ORAM extremely oblivious ram protocol amount client storage partly due simplicity ORAM practical ORAM scheme date client storage formally ORAM bandwidth ORAM asymptotically ORAM scheme client storage due practicality ORAM adopt secure processor proposal category descriptor management compute information security protection algorithm security additional oblivious ram ORAM ORAM access introduction data encryption alone user privacy outsource storage application sequence storage location access client access leak significant amount sensitive information unencrypted data statistical inference demonstrate access encrypt email repository adversary infer query oblivious ram ORAM algorithm propose goldreich ostrovsky goldreich ostrovsky client conceal access remote storage continuously shuffle encrypt data access adversary physical storage location access ORAM algorithm ensures adversary negligible probability anything logical access proposal research community strive ORAM scheme theoretically practical article propose novel ORAM algorithm ORAM date practical ORAM construction client storage theoretical bound performance experimental contribution ORAM theorem probability ORAM client storage bandwidth simplicity practical efficiency comparison ORAM algorithm construction arguably simpler although formal simplicity core ORAM algorithm described pseudocode construction perform sophisticated amortize oblivious sort oblivious cuckoo hash construction exist ORAM algorithm instead ORAM access express simply fetch remotely server ORAM simplicity practical exist ORAM construction constant polylogarithmic client storage asymptotic efficiency asymptotic efficiency ORAM prior reasonably nonuniform recursive ORAM achieves asymptotic bandwidth overhead recursion nonuniform introduce access logical client access physical hide access storage server recursive ORAM consumes client storage achieve failure probability negligible ORAM outperforms prior scheme bandwidth nonuniform  construction ORAM data server access throughout article notation function unless otherwise logarithm journal acm vol article publication date april ORAM extremely oblivious ram protocol comparison ORAM scheme ORAM scheme data client storage bandwidth recursive recursive ORAM recursive nonuniform ORAM nonuniform data independent failure probability negligible asymptotically bandwidth overhead ORAM ORAM client storage requirement introduce ORAM ORAM algorithm effectively assume implicitly index otherwise additional factor ORAM algorithm practical theoretic impact ORAM propose ORAM february practical theoretic impact community practical ORAM suitable algorithm hardware ORAM implementation due conceptual simplicity client storage practical efficiency ascend secure processor ORAM primitive later optimize ORAM hardware integration implement ORAM secure processor FPGAs convey platform theoretic subsequent proposal ORAM theoretic adopt eviction ORAM construction notably chung pas improve ORAM bound binary construction however bound asymptotically chung pas gentry ORAM variant construction apply secure multiparty computation novel proof technique although construction proof upper bound client storage intricate proof relies abstract infinite ORAM construction analyze stash usage nonrecursive ORAM nonrecursive ORAM choice parameter operation probability stash failure probability negligible empirical parameter theoretic bound recursive ORAM construction recursive ORAMs client storage careful analysis achieve client storage recursive construction journal acm vol article publication date april related oblivious ram investigate ostrovsky goldreich goldreich ostrovsky context software piracy efficient simulation program oblivious RAMs subsequent devote improve ORAM construction ORAM binary ORAM framework propose optimality ORAM goldreich ostrovsky client storage ORAM algorithm treat opaque hence generic bandwidth client arbitrary metadata entire ORAM construction poly  storage bandwidth ORAM ORAM construction achieve bandwidth overhead client storage partially address reasonably data nonuniform assumption metadata nonuniform hence goldreich ostrovsky bound applies nonuniform subsequent circuit ORAM improves reduce client storage goldreich ostrovsky bound tight specific model remains ORAM bound circumvent model relaxed treat opaque  naor subsequent related circuit complexity sort comparison improve binary ORAM scheme propose achieve failure probability scheme achieves bandwidth adjust failure probability negligible bandwidth chung pas slightly asymptotically chung pas recent concurrent independent propose another statistically secure binary ORAM algorithm ORAM theoretical bandwidth bound logn factor simulation empirical bucket practical bandwidth constant factor ORAM operating expectation data access ORAM reading statistical security ORAM statistically secure counting encryption statistically secure perfectly secure ORAMs prior binary ORAM scheme variant statistically secure assume bucket trivial ORAM poly failure probability equivalently simplify notation personal communication kai min chung journal acm vol article publication date april ORAM extremely oblivious ram protocol research direction ORAM optimize ORAM communication response parallelism various metric data structure oblivious without ORAM application ORAM ORAM application theoretical practical context ORAM quote promising privacy preserve storage outsource ORAM adopt secure processor conceal access ORAM frequently building ram model cryptography garble ram secure multiparty computation ORAM eliminate access leakage searchable encryption ORAM technique adopt efficiency ORAM ORAM technique construct proof retrievability relation private information retrieval private information retrieval pir hide access untrusted server difference ORAM pir server public data accessible anyone ORAM client outsources private data server update data pir server computation data traditional ORAM model assumes server storage device operation combination define server private client data computation data reduce bandwidth overhead combination multiple private information storage oblivious storage simply ORAM server computation construction constant bandwidth overhead polylogarithmic server computation model definition client data remote untrusted server preserve privacy traditional encryption scheme data confidentiality hide data access reveal sensitive information untrusted server access server access reveal assume server untrusted client trust client processor memory disk goal ORAM completely hide data access server server perspective data access sequence operation indistinguishable notation assume client fetch data server atomic refer typical storage KB secure processor KB preferable throughout article distinct data ORAM simplicity aim extremely ORAM construction contrast previous scheme consists pseudo code journal acm vol article publication date april security definition adopt standard security definition ORAMs intuitively security definition server learns access information leak data access access data access linkability access sequential random etc access definition security definition opm  data denote data request sequence  denotes data operation specifically denotes identifier  denotes data notation index corresponds recent load index corresponds load operation denote possibly randomize sequence access remote storage sequence data request ORAM construction secure data request sequence access computationally indistinguishable anyone client ORAM construction return input data consistent probability  ORAM fail probability  adaptive versus nonadaptive access sequence security definition adversary chooses request sequence upfront notion nonadaptive request sequence however protocol randomness generate access hence proof actually imply probabilistic polynomial simulator request sequence output statistically sequence access ORAM algorithm upon adaptively chosen request sequence related ORAM construction information leakage timing channel frequently client data request achieve integrity potentially malicious server focus integrity presentation ORAM protocol nonrecursive version ORAM protocol linear amount client storage later explain client storage reduce poly logarithmic via recursion overview informal overview ORAM protocol client amount local data stash server storage treat binary node bucket fix invariant maintain invariant mapped uniformly random leaf bucket  bucket along mapped leaf whenever server entire mapped leaf stash request remapped another leaf server server additional stash evict invariant preserve remain bucket server storage data server consist bucket node necessarily binary binary description simplicity journal acm vol article publication date april ORAM extremely oblivious ram protocol binary server binary data structure height leaf theoretic bound sufficient easily laid array disk numbered denotes denotes leaf denote xth leaf node leaf node defines unique leaf denote bucket along leaf additionally denotes bucket bucket node bucket bucket alongside metadata address leaf mapped tuple data bucket pad dummy dummy metadata suffices bucket constant bucket server storage client storage bandwidth storage client consists data structure stash stash algorithm overflow bucket server client locally overflow local data structure stash stash probability stash usually empty ORAM operation completes client currently mapped xth leaf node resides bucket stash access remapped mapping metadata binary server bandwidth load operation client server writes bandwidth per access constant bandwidth usage client storage assume stash client stash nonrecursive ORAM obtain negligible failure probability later explain recursive construction achieve client storage ofO ORAM initialization client stash empty server bucket  random encryption dummy server client independent random ORAM writes construction reading ORAM via protocol access described specifically client performs data access journal acm vol article publication date april protocol data access data identify input parameter data none access operation ORAM access operation writes specify data identify return data notation outsource server height binary capacity bucket leaf node bucket along client local stash client local currently associate leaf node resides somewhere along stash none data client performs access data access protocol summarize remap randomly remap random denote client performs access stash assume default zero update access update data possibly additional stash bucket greedily stash leaf ensure mapped leaf bucket journal acm vol article publication date april ORAM extremely oblivious ram protocol intersects access subroutine  bucket client metadata dummy bucket server decrypt  bucket client writes metadata specify bucket server client pad dummy important security dummy encrypt randomize encryption scheme computation client computation iso per data access majority spent decrypt encrypt per data access treat server storage device performs operation retrieve per data access security analysis security ORAM data request sequence definition ORAM server sequence  address jth load operation access notation definition server sequence encrypt computationally indistinguishable random sequence due randomize encryption reveal server remapped completely random label hence statistically independent address affect another ORAM statistically independent statistically independent therefore bayes prof computationally indistinguishable random sequence security theorem stash ORAM fails exceeds stash negligible probability recursion parameterization recursion technique scheme described previous client relatively leverage recursion described ORAM construction reduce client storage instead client server ORAM recurse concretely recursive ORAM series ORAMs ORam ORam ORam  ORam contains data   client  ORam data ORAM others ORAMs important parameter ORAMs equivalent entry ORAMs entry previous ORAM clearly  journal acm vol article publication date april  factor ORam ORam ORam recursion constant access ORam client update ORam trigger recursive update ORam finally  update client storage essentially replaces  recursive access  input access  return data partial update entry pseudocode remains unchanged parameterization metric parameterize scheme additional metric setting nonuniform uniform nonuniform allows data metadata whereas uniform besides bandwidth metric access fetch translates runtime oblivious ram program memory access roundtrips assume roundtrip multiple nonuniform parameterizing scheme bandwidth consume access bandwidth blowup factor access roundtrips uniform data entry therefore ORAMs conclude roundtrips access bandwidth consume access reasonably constant ORAMs bandwidth theoretic BOUNDS stash usage analyze stash usage nonrecursive ORAM bucket ORAM binary constant analyze probability sequence load operation stash exceeds probability decrease exponentially ORAMZ denote nonrecursive ORAM bucket dummy leaf define sequence load operation triple contains sequence address load sequence label server sequence remapped leaf label tuple corresponds recent load operation corresponds recent load operation eviction journal acm vol article publication date april ORAM extremely oblivious ram protocol assign load operation denote correspond define distinct address ORAMZ denote distribution ORAMZ sequence load operation empty ORAM sequence completely defines randomness address leaf label bucket stash corresponds bucket stash reconstruct assume infinite stash analysis investigate usage ORAMZ stash define stash sequence load operation stash limited ORAM fails sequence load operation stash happens usage infinite stash ORAMZ theorem sequence address bucket height stash probability ORAM failure sequence load operation correspond ORAM probability randomness determines corollary load operation data ORAM client storage server storage bandwidth per load operation fails load operation probability assume load poly stash sizeO probability ORAM failure load operation negligible proof outline proof theorem consists introduce ORAM ORAM algorithm  stash bucket ORAM ORAM access sequence load operation distribution bucket exactly distribution ORAM access characterize distribution bucket ORAM postprocessing stash usage stash usage postprocessing exists subtree usage ORAM capacity union bound upper bound ORAMZ sum probability subtrees analyze usage subtrees mixture binomial geometric probability distribution express probability evict sequence load operation concentration technique theorem ORAM define ORAM denote ORAM ORAM exhibit structure ORAM bucket infinite ORAM usage analysis respect security notion ORAM analyze stash usage ORAMZ define postprocessing greedy algorithm  input ORAM sequence load operation attempt reassign bucket excess empty stash  ORAM denote stash usage journal acm vol article publication date april greedy algorithm apply greedy algorithm define operation define operation analyze bucket usage ORAM ORAM define operation apply ORAMs remark purpose operation analyze bucket usage related hiding data access leaf label evict performs eviction along leaf ORAM leaf label performs procedure leaf bucket along bucket ensure usage bucket exceed capacity specifically bucket capacity contains assume global consistently processing update label therefore express access operation ORAM update evict ORAM update evict sequence operation equivalent configuration ORAM bucket contains exactly execution sequence lemma leaf label sequence equivalent proof initial configuration ancestor global bucket processing sequence equivalent procedure perform postprocessing perform postprocessing perform postprocessing define postprocessing algorithm  lemma greedy postprocessing  define concatenate operation leaf lemma suppose label label sequence equivalent update evict update evict proof lemma operation commutative sequence equivalent update evict journal acm vol article publication date april ORAM extremely oblivious ram protocol argue equivalent strategy fix configuration ORAM described sequence pause suppose ancestor leaf specifically operation execution pause originate leaf bucket denote configuration ORAM immediately hence actually execution operation resume execution later perform configuration execute sequence execute operation pause  toc recall ancestor operation evict hence execution processing immediately nullified evict execute evict evict operation oblivious another independent execute evict configuration ORAM exactly configuration pause execution resume execute sequence execution configuration remain operation execution execution configuration afterward lemma stash usage  ORAM exactly stash usage ORAM  ORAM ORAMZ proof ORAM operation evict interleave postprocessing ORAM interpret evict operation operation specifically suppose operation sequence correspond access ORAM update evict update evict apply lemma repeatedly equivalent sequence update evict update evict remark operation reverse actually really lemma ORAM postprocessing obtain sequence update evict update evict append concatenation operation leaf  ORAM sequence operation leaf correspond evict operation sequence bucket capacity violate hence operation leaf sequence completes proof usage capacity bound investigate ORAM stash usage postprocessing analyze bucket usage subtrees subtree binary implicitly assume contains ORAM node ancestor define node journal acm vol article publication date april ORAM define usage ORAM oft sequence load operation actual bucket lemma characterizes stash usage lemma stash usage  ORAM  ORAM exists subtree ORAM ORAM proof  subtree ORAM greedy algorithm assign bucket ancestor bucket assign stash greedy algorithm  suppose  ORAM  maximal subtree contains bucket exactly postprocessing greedy algorithm  suppose bucket maximality ancestor necessarily ancestor bucket contains postprocessing implies stash hence stash originate bucket therefore ORAM lemma address fix subtree positive integer address sequence distinct access probability ORAM maximize sequence address exactly duplicate address consequence address label statistically independent another proof suppose exists address load twice ORAM exist index without jth load remains likely correspond evict fromt load evict bucket outside bucket ORAM infinitely remove jth load generate extra storage otherwise probability ORAM maximize sequence address without duplicate remark lemma implies address consists access distinct however achieve distinct directly access distinct remark probability bound distinct access specifically distinct bin define bound usage subtree lemma fix sequence distinct address randomness independent choice label corollary lemma obtain ORAMZ  ORAM ORAM ORAM journal acm vol article publication date april ORAM extremely oblivious ram protocol subtree leaf ORAM binary augment exit node subtrees inequality union bound binary catalan ORAMZ max ORAM uniform upper bound ORAM analyze usage subtree via eviction lemma assume request sequence consists distinct address recall label independent label corresponds leaf bucket index reverse access access request resides random label previously chosen however random choice reveal henceforth eviction  logically assign freshly chosen random label refer assign  recall subtree probabilistically bound quantity ORAM access sequence survive subtree evict subtree definition exit node leaf node suppose node node refer node exit node denote exit exit node exit null bound reside access sequence lemma lemma suppose request assign  request evict exists later recall index later exit node exit  exit  null proof evict exit node exit  null hence evict later  intersects exit  equivalent conclusion lemma journal acm vol article publication date april define notation relate subtree node leaf ORAM binary denote augment node node node node node refer exit node denote leaf denote contains node summarize notation variable meaning subtree ORAM binary augment node node subtree leaf ORAM binary exit node subtree leaf capacity bucket eviction eviction essentially ORAM access sequence reverse node marked node remain node marked later random eviction denote  intersect exactly node exit node node exit node already marked request random assignment   intersect exactly node node survives otherwise evict fori survives correspond assignment intersects node exit node define indicator variable  intersects node survives indicator variable  intersects node survives define survive negative association independence concentration however random variable independent fortunately negatively associate simplicity lemma useful later concentration argument lemma define   proof exists define random variable nonincreasing choice eviction hence negatively associate conditioning choice independent assignment hence independent hence journal acm vol article publication date april ORAM extremely oblivious ram protocol   proposition conditioning negatively associate nonnegative     equality independent expectation   stochastic dominance negative association analyze random variable separately bin random variable distribution modify eviction countably infinite random variable stochastically dominates couple bin simplicity assume thrown independently uniformly random bucket correspond leaf ORAM binary leaf survive survive distribution mention remark distinct hence correspond random variable stochastically dominate infinite eviction difference node later eviction  intersects leaf node node become countably infinite eventually node survive survive infinite eviction assign intersect node node hence couple survive infinite finite eviction hence random variable stochastically dominates hence nonnegative   concentration survive subtree parameter probability simplicity assume lemma suppose address sequence moreover suppose thatt subtree binary ORAM node ORAM proof negative association stochastic dominance analyze node leaf bin recall indicator variable assign  intersects bucket recall leaf bucket binary ORAM  exp hence independence  exp journal acm vol article publication date april infinite eviction suppose depth depth sum node define survive exactly node correspond assign chosen contains node infinite eviction eviction node hence node assign chosen exactly node jth node define conditioning geometric distribution parameter specifically moreover conditioning sum independent bernoulli random variable expectation define analyze generate function  appropriate strategy derive upper bound  depends independent allows conclude  simplicity argument assume recall sum independent bernoulli random variable geometric distribution therefore ETM ETM exp exp exp exp equation generate function sum independent bernoulli random variable expectation ETM  exp equation series converge exp exp equation exp hence  conditioning independent expectation inequality independent therefore argument journal acm vol article publication date april ORAM extremely oblivious ram protocol hence induction argument  combine capacity bucket binary ORAM overflow binary stash perform standard generate function argument markov inequality negative associativity stochastic dominance   max eet probability proof theorem apply lemma inequality equation ORAMZ bound stash recursion stash stash probability suppose recursion recursive ORAM sequence ORAM operation execute stash theorem geometric distribution parameter satisfies proposition random variable stochastically dominate geometric distribution parameter proposition stash storage stochastically dominate independent geometric distribution parameter suffices perform standard concentration analysis sum independent geometrically distribute random variable sum deviate significantly achieve negligible failure probability lemma sum independent geometric distribution suppose independent geometrically distribute random variable parameter exp proof standard generate function   pet journal acm vol article publication date april exp equation geometric series converges equation inequality equation inequality exp exp exp exp lemma achieve failure probability suffices capacity stash storage APPLICATIONS EXTENSIONS oblivious binary recursive binary ORAM construction propose novel perform entire binary ORAM lookup immediately applicable ORAM ORAM perform oblivious binary bandwidth binary navigate node exist generic ORAM technique bandwidth stateless ORAM oblivious ram client model sometimes useful multiple client access ORAM avoid complicate possibly expensive oblivious synchronization client introduce concept stateless ORAM client client access ORAM data access upload afterward client private ORAM data ORAM recursive ORAM construction upload client access client bandwidth reduce permanent client achieve bandwidth access client transient client storage perform access operation access operation completes client private achieve permanent client storage transient client storage bandwidth secure processor secure processor private computation inside tamper resistant processor memory dram access vulnerable eavesdropping journal acm vol article publication date april ORAM extremely oblivious ram protocol empirical estimation stash achieve failure probability security parameter stash measurement stash access stash temporarily fetch access tamper mention earlier ORAM particularly amenable hardware simplicity chip storage requirement ascend secure processor built ORAM fpga custom silicon improve bandwidth stash recursive construction various hardware architectural optimization built hardware implementation ORAM secure processor FPGAs convey platform rely chip cache ORAM request cache project report performance overhead benchmark spec trace sqlite query integrity protocol easily extend integrity freshness access untrusted server storage data untrusted storage fetch achieve integrity simply treat ORAM merkle data node leaf node node bucket ORAM tag hash bucket dummy hash leaf node hence hash node sibling   operation optimize integrity verification overhead recursive ORAM construction journal acm vol article publication date april stash achieve failure probability stash access stash temporarily fetch access max stash security parameter maximum stash probability exceed stash stash access extrapolate empirical stash temporarily fetch access evaluation ORAM binary height stash occupancy distribution stash occupancy experimental theoretical analysis define stash occupancy overflow remain stash phase ORAM access persistent local storage client addition client  storage temporarily cache fetch server ORAM access theorem probability exceed stash capacity decrease exponentially stash bucket theorem verify experimental ORAM empty load ORAM access robin access sequence access stash occupancy ORAM simulate ORAM billion access billion access journal acm vol article publication date april ORAM extremely oblivious ram protocol average bucket load bucket error quartile stash access ORAM stochastic  empirically verify ORAM average equivalent ensemble average multiple chapter   minimum stash failure probability security parameter axis extrapolate realistic stash grows linearly security parameter accordance theorem failure probability decrease exponentially stash stash failure probability ORAM scalability theorem stash capacity exceed probability behaves relatively stash occupancy unclear likely stash capacity exceed journal acm vol article publication date april experimental security parameter stash definition infeasible simulate practically adopt security parameter simulate failure reasonable amount secure empirical analysis stash stash bucket load bucket load per usage subtree bucket bucket load indeed bucket seldom indicates stash empty leaf slightly heavier load accumulate leaf however exhibit distribution bucket load mention stash