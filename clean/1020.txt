compute conjunctive query database parallel architecture without storage structure query skew data tradeoff processor communication per processor load processor compute processor load storage per processor data skew obtain essentially tight upper bound algorithm bound degrade skew data skewed data improve algorithm approximate necessarily  available obtain essentially optimal algorithm query skewed skewed query query identify treelike nearly upper bound  algorithm skew database consequence latter bound processor compute component graph output specify vertex graph per processor load logp communication upper bound structure algorithm mapreduce bound model massively parallel communication mpc model allows processor communicate arbitrary multi bound apply restrict version mpc model processor subsequent communication tuples category descriptor parallel database algorithm theory additional parallel computation bound introduction spent data analysis allocate data processing task identify relevant data cleaning filter transform extract feature evaluate task bottleneck data analysis challenge improve performance usability data processing motivation article understand complexity query processing data management query processing data typically perform parallel architecture data independent server interconnect network server perform local computation communicate exchange data mapreduce decade development massively parallel framework data processing  hive  spark spark  unlike traditional query processing complexity longer dominate disk access typically query evaluate sufficiently server entire data memory complexity parameter communication depends amount data exchange global synchronization barrier contribution define massively parallel communication mpc model analyze tradeoff amount communication massively parallel compute environment server parameter server infinitely powerful data access computation proceeds consists local computation global exchange data server algorithm mpc model characterize server maximum maximum load server receives restriction communication server storage capacity server parameter server data load bound storage capacity server ideal parallel algorithm input distribute input data equally server server maximum load perform computation degenerate entire data server exists parallelism focus mpc model communication load capture architecture assume mapreduce related program abstraction restriction communication operation processing local data bound obtain mpc model apply generally bound specific assume primitive communication structure mapreduce establish upper bound mpc model compute conjunctive query setting restrict computation communication input data without skew query relation input relation focus somewhat related generic approach communication valiant bulk synchronous parallel BSP model mpc model simplifies strengthens discus relationship mpc model variety mapreduce parallel model journal acm vol article publication date october communication parallel query processing examine minimum load compute algorithm correctly computes load maxu muj fractional pack hypergraph bound applies model server encode information message access source randomness bound   assume exchange tuples algorithm hypercube algorithm bound conjunctive query input data skew query bound load hypercube algorithm bound skew influence computation database skewed hitter occurs frequency predefined threshold data distribution typically hash partition unless handle differently tuples hitter server overload standard technique handle skew consists detect hitter treat differently partition tuples hitter attribute analyze impact skew bound behavior algorithm information hitter hence limited ability skew model handle skew assumes computation server identity hitter approximate frequency hitter easy hitter information easily obtain advance statistic upper bound maximum load conjunctive query bound conjunctive query upper bound query query query establish bound multiple communication restrict version mpc model tuple mpc model message unrestricted subsequent server tuples tuples input tuples correspond subquery moreover destination tuple tuple content message server frequently mapreduce algorithm query processing tuple parallel hash broadcast essentially depth query query operator subquery compute load compute chain query achieve optimal computation  operator optimal load operator compute frequency perform parallel aggregation hitter sample execute load journal acm vol article publication date october roadmap organization article data distribution upper bound bound mpc model skew skew oblivious skew information multiple  mpc model skew optimal decrease generally nearly upper bound graph theoretic query conjunctive query imply tuple mpc algorithm load logp compute component sparse undirected graph contrast component indeed minimum span undirected graph compute mapreduce input graph sufficiently dense explicit processor mpc model directly handle issue load balance skew task reducer ignore mapreduce algorithm actually critical performance task standard analysis hash load balance however standard bound yield significant deviation handle situation chernoff bound bin particularly analysis hash load balance skewed data bound independent organization mpc model define important notion upper bound computation restrict data without skew data skew upper bound multiple conclude related reader detailed roadmap article model detail mpc model introduce terminology background massively parallel communication mpc model computation perform server processor network private channel computation proceeds consists distinct phase communication phase server exchange data communicate server data computation phase server performs local computation input data uniformly partition server server data describes data typically partition distribute storage assume data partition journal acm vol article publication date october communication parallel query processing algorithm mpc model return input data partition execution output union processor bound output overlap processor however algorithm guarantee output tuple exactly processor complexity algorithm mpc model capture parameter parameter denotes synchronization barrier algorithm maximum load parameter denotes maximum load server load amount data server normally data exchange communication load load strictly otherwise load trivially simply entire data server compute locally typical load depends query bound load amount input data query assume query execute server query constant dependence query linear  trivially data server server accumulates entire data algorithm article constant input server explain data distribute uniformly server input partition input bound query fix relational vocabulary alternative powerful model relation server input server input server distribute data worker longer participate computation input server model potentially powerful jth input server access entire relation bound input server model algorithm partition input model load convert input server algorithm load denote assume input server assume statistic algorithm input server relation partition  fragment simulate  worker processing fragment bound input sever model immediately apply partition input model randomization mpc model allows randomization random available server compute independently input data algorithm fail output probability independent input randomization load balance abort computation amount data exceed maximum load exponentially probability bound randomize algorithm yao lemma bound deterministic algorithm algorithm fails probability input chosen randomly distribution implies yao lemma randomize algorithm resource bound fail input probability algorithm random choice journal acm vol article publication date october conjunctive query article mpc model namely compute conjunctive query database fix input vocabulary relation fix arity denote input data consist relation instance conjunctive query  without denote denotes vector variable query meaning variable without meaning relation restriction conjunctive query limitation bound conjunctive query upper bound restriction query without hypergraph query define introduce node variable hyperedge variable conjunctive query query hypergraph whereas var denote variable denote occurs denote variable equation component maximal subqueries characteristic query characteristic conjunctive query equation define sum arity variable component intuitively characteristic implies variable characteristic query crucial role multi algorithm query define query contract hypergraph define lemma characteristic query satisfies component denote query obtain distinct occurrence relation algorithm compute load server locally fragment relation execute input conversely algorithm convert algorithm load input algorithm obtain server fragment relation namely derive server insert tuple tuple replace variable similarly operation locally server without communication input relation finally algorithm relation preliminary version article define definition journal acm vol article publication date october communication parallel query processing proof immediate definition component disjoint respect variable contract accord component induction suffices variable arity query contraction component variable arity reduce reduction suffices   variable arity illustration equivalent consists disconnect component characteristic query graph graph variable denote characteristic finally define query later article definition conjunctive query treelike query treelike query binary vocabulary treelike hypergraph non binary vocabulary query treelike acyclic converse query acyclic treelike important treelike query subquery treelike fractional pack fractional pack fractional query feasible linear constraint pack associate non negative variable sum exceed inequality equation equality tight dual notion fractional notion hypergraph acyclicity literature   recent survey notion restrictive prohibits variable journal acm vol article publication date october vertex feasible linear constraint optimality maxu minv quantity denote fractional vertex pack query tight pack optimal pack fractional feasible linear constraint replace equation tight fractional pack tight fractional vice versa optimal fractional denote fractional pack connection relationship notion coincide however tight meaning tight fractional tight fractional pack vice versa fractional recently article bound query sequential algorithm query article fractional pack entropy fix finite probability random variable entropy conditional entropy define respectively entropy satisfies inequality assume additionally logn friedgut inequality friedgut introduces inequality inequality described hypergraph article corresponds query inequality query terminology fix query equation integer arity introduce naj variable denote vector project variable relation fractional journal acm vol article publication date october communication parallel query processing illustrate friedgut inequality query forc obtain inequality respectively        max    max  friedgut inequality immediately imply developed series article upper bound query function cardinality relation instance  otherwise  similarly   obtain express fractional apply friedgut inequality fractional pack ensure pack tight communication without skew data skew computation restrict communication database database domain attribute relation domain occurs equivalently attribute relation bound frequency exactly bound database upper bound load analysis algorithm database amount skew formally define assume input server cardinality relation denote vector cardinality denote relation derive statistic tuple logn domain database ajmj logn upper bound cardinality define derive statistic def ajmj logn bound apply encoding restrict database ajmj logn standard encode relation arity cardinality logn relation restrict cardinality equivalently relation permutation domain logn extreme unary relation encode bitmap logn hypercube algorithm algorithm computes conjunctive query algorithm introduce   mapreduce algorithm  vassilvitskii trace journal acm vol article publication date october parallel processing datalog program hypercube HC algorithm HC algorithm parametrized vector variable assign algorithm server mapped distinct dimensional hypercube description HC algorithm algorithm hypercube algorithm input query relation assign server distinct independent hash function communication tuple  computation server computes local instance correctness HC algorithm observation potential tuple server contains information belongs illustrate compute query  server uniquely identify triple communication input server sends tuple server index tuple replicate input server proceed similarly tuples tuples contribute output tuple server server detects tuples output analysis HC algorithm technical analysis HC algorithm theorem considers hypercube partition relation partition balance analysis HC algorithm immediately theorem convenient input relation bag tuple multiple cardinality defines tuples counting multiplicity relation arity bag tuples tuple  define tuple relation denote tuple multiplicity empty tuple database non empty tuple theorem relation arity  integer hash partition bin identify bin tuple tuple bin independent perfectly random hash function domain respectively load bin fix constant non empty tuple constant probability maximum load server exceeds exponentially journal acm vol article publication date october communication parallel query processing tuple probability maximum load server exceeds tuple probability maximum load server exceeds denote load server straightforward expectation choice random hash function theorem establishes maximum load server explain establish server load subset  sub cube accumulate load sub cube def implies tuple bound otherwise tuple sub cube load theorem establishes stricter sufficient item essentially bond constant probability maximum load exceeds decrease exponentially withm item essentially allows increase lnp probability maximum load exceeds decrease polynomially bound finally item allows approach upper bound lnp lnp without loss generality simply project away attribute apply theorem remain relation duplicate tuples project away become bag theorem bag theorem immediately implies statement behavior HC algorithm corollary HC algorithm fix suppose relation  satisfies theorem respect integer pir constant probability choice random hash function maximum load per server HC algorithm exceeds maxj exponentially bound constant polynomially bound theorem item theorem application chernoff inequality lemma corollary independent def denote relative entropy KL divergence bernoulli indicator variable probability lemma sequence non negative sequence random variable impagliazzo kabanets relax requirement random variable identical negatively correlate journal acm vol article publication date october wixi exp proof proof along constructive proof chernoff bound impagliazzo kabanets assume indeed extend longer sequence define possibly ensure wixi ixi independent random variable identical assume random independently probability def  denote wixi bound expectation    inequality function def convex therefore multi variate function def   maximum polytope obtain vertex polytope vertex polytope consists def vertex inequality concavity function hence   increase convex journal acm vol article publication date october communication parallel query processing outcome satisfies probability index  implies combine equation obtain impagliazzo kabanets derivative function minimum obtain theorem apply lemma bin corollary bin suppose  uniformly independently bin bin proof bound corollary KL divergence apply lemma union bound bin definition yield bound function corollary naturally bound apply uniformly random hash function bag multiplicity item remark failure bound corollary express trivially failure probability failure probability qualitative equivalently constant failure bound chernoff bound decay exponentially constant journal acm vol article publication date october lnp constant failure bound constant lnp lnp failure bound generalize lemma sequence multi dimensional array ifu finite tuple correspond component indexed multi dimensional array dimension dimensional array sequence non negative tuples tuples respectively disjoint tuple combine tuples dimensional array denotes dimensional array def VU identify standard norm maxi theorem dimensional array non negative satisfies constraint sequence random variable satisfy assume variable independent XI def wixi exp proof theorem induction equation implies immediately lemma assume definition wixi   tuple component component def  yield dimensional array denote depends outcome random variable def wixi  failure probability dimensional array satisfies analog equation respect hence apply inductive hypothesis dimensional subproblem achieve bound failure probability journal acm vol article publication date october communication parallel query processing  probability analog equation respect fails  simplicity notation define  def  notation probability analog equation fails equation max apply lemma dimensional array obtain bound equation union instead partition BK bound equation union apply lemma perform partition partition bin BK apply greedy bin pack algorithm norm vector bin capacity tuples decrease bin decrease bin greedy pack bin claimed algorithm decrease improve pack improve analysis bin define vector def max max journal acm vol article publication date october apply lemma replace replace replace replace replace obtain probability equation exp probability analog equation exp exp remain equation apply inductive hypothesis failure probability exp hence failure probability exp apply theorem bound multidimensional hash proof theorem expectation immediately independence uniformity individual hash function suppose tuple define multiplicity comprise dimensional non negative array bound imply fix server define random indicator variable otherwise hash function drawn independent uniformly random hash function independent random variable moreover def define suppose apply theorem probability server receives tuples exp corollary exp remark bound choice failure probability correspond induction theorem actually therefore avoid hypothesis conclude probability server receives tuples equation journal acm vol article publication date october communication parallel query processing constraint sufficient various theorem corresponds item failure probability plug lnp lnp probability server receives tuples taylor series expansion yield lnp lnp lnp item bound forc yield probability server receives tuples bound prof item finally suppose tuple subset max bound clearly monotone increase obtain probability server load exponentially yield item discus compute optimize load per server   compute optimize load constraint non linear lagrange multiplier approach optimize maximum load per relation maxj load per server linear optimization express load derive statistic ajmj logn maxj facilitate connection bound pei exponent denote logp logp assume hence optimize LP minimize optimal equation denote  journal acm vol article publication date october theorem upper bound fix query database relation cardinality derive statistic server optimal equation denote pei constant relation tuple bound HC algorithm achieves  maximum load probability therefore optimal equation obtain optimal fractional vertex feasible equation defines vertex direction vertex defines feasible furthermore minimize equivalent minimize relation optimality  illustrate bound bound maximum load per server database express bound apply immediately derive cardinality ajmj logn ajmj logn abuse derive statistic fix query fractional pack denote muj denote llower maxu packing detailed version theorem llower yield bound load processor mpc algorithm compute database derive statistic theorem vector derive statistic input database query processor probability distribution database statistic processor deterministic mpc algorithm load llower output input chosen strictly output compute input constant load processor randomize mpc algorithm compute conjunctive query component probability llower gain intuition formula llower derive statistic llower quantity maximize maximum fractional pack fractional vertex llower expression  equivalence journal acm vol article publication date october communication parallel query processing theorem  vector derive statistic processor llower  max extreme convex polytope define fractional pack constraint equation additionally llower  fractional vertex theorem immediately imply theorem corollary optimality without skew theorem HC algorithm chosen theorem achieves load within constant factor optimal load mpc algorithm constant depends linearly ratio relation component query remainder theorem theorem proof theorem define vertex polytope belong define denote vertex linear inequality vertex obtain convert maximal inequality equality fractional pack polytope equation vertex obtain convert inequality  variable definition  optimal primal LP dual LP maximize denote polytope feasible denote objective function  denote optimal subset feasible longer polytope  indeed primal dual theorem assume feasible primal LP optimal dual LP journal acm vol article publication date october non linear optimization maximize  denote feasible denote polytope obtain relax denote objective function   optimal moreover maximum   function easily verify meaning feasible image feasible inverse moreover   implies    optimal attain vertex polytope objective equation maximize vertex polytope hence obtain vertex suffices vertex equivalently  non vertex non vertex calculation non vertex constraint equation without affect optimal indeed optimal equation    earlier finally vector feasible equation iff fractional pack hypergraph query implies maxu  theorem  max  max muj llower immediately therefore maxu maxu bound expectation theorem analysis extend bound randomize algorithm theorem bound define probability input database drawn cardinality relation domain maxj journal acm vol article publication date october communication parallel query processing specify later independently uniformly relation matchings  tuples derive statistic probability probability contains database relation without skew exactly probability theorem bound expectation fix cardinality deterministic mpc algorithm communication server output subset query input database statistic fractional pack server load server report muj expectation randomly chosen probability cardinality domain maxj derive statistic therefore server algorithm report expectation max maximum load server bound relation cardinality arity theorem implies theorem proof theorem denote fractional pack achieves llower exist theorem optimal vertex therefore theorem output tuples algorithm input strictly tuples expectation unless llower relation arity obtain llower theorem analyze particularly nice function characteristic query relation lemma component proof relation tuple probability contains naj tuple arity query denote projection variable  argument algorithm report false positive server output tuple tuple message communication journal acm vol article publication date october imposes upper bound tuples bound input relation imposes upper bound random choice input database tuples server belong relation apply friedgut inequality bound tuples query function tuples input relation fix server msg denote function specify message server receives input recall input sever model input relation input server therefore message consists message msgj msgj msgj server receives msgj input relation msgj msgj justifies definition message msgj tuples server kmsgj instance msgj msgj arity define kmsg output tuples server message msg clearly algorithm output tuple query iff kmsgj denotes projection variable upper bound kmsgj bound along friedgut inequality establish upper bound kmsg hence theorem bound knowledge relation fix server input relation recall ajmj logn denotes naive encode algorithm exploit uniformly chosen dimensional precisely dimensional matchings arity relation entropy later lemma bound knowledge  server obtain lemma suppose define message msgj kmsgj expectation random choice message msgj encode server message expectation tuples bound expectation specialized encode server receives message tuples however combination encode matchings proof  equation correspond encode attribute encode subset journal acm vol article publication date october communication parallel query processing attribute encode permutation fix msgj message server input kmsgj uniformly distribute conditional entropy msgj msgj msgj msgj msgj fix tuples msgj msgj  entropy decrease  factor entropy equation decrease factor tackle increase function equivalent hence equation suffices equation remains equation equation suffices bound binary entropy function decrease function hence implies equation hence equation finally equation lemma apply chain entropy msgj msgj msgj journal acm vol article publication date october msgj completely determines msgj apply definition msgj equation msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj kmsgj  msgj msgj msgj kmsgj  kmsgj  inequality assume upper bound msgj inequality equation definition equation zero rearrange obtain statement bound knowledge query lemma derive upper bound server report proof theorem recall lemma assume message msgj entropy instead entire msg server concatenation message msgj relation define  msgj server receives choice immediately derive upper bound  msgj relation chosen independently implies  denote probability server tuple kmsgj probability random choice lemma relation naj define lemma proof naj kmsgj lemma server receives message relation distinct input server kmsg kmsg independent hence kmsg kmsg journal acm vol article publication date october communication parallel query processing friedgut inequality recall apply inequality fractional fractional pack define equation extend query unary variable define var pack define lemma assignment tight fractional pack tight fractional  proof straightforward variable var sum var  prof apply friedgut inequality extend query variable friedgut inequality kmsgj tuple recall tuple projection variable abuse projection variable assume kmsg lemma obtain naj  journal acm vol article publication date october plug bound kmsg   equality lemma equality lemma derive bound replace yield  hence extra factor  equation however obtain upper bound limit approach extra factor approach equation upper bound quantity  recall        inequality version arithmetic geometric inequality inequality theorem suffices bound relation proposition journal acm vol article publication date october communication parallel query processing proof item ajmj ajmj item inequality assumption obtain hence proof theorem recall subsection denotes load arbitrary server denote statement theorem bound randomize algorithm bound load randomize algorithm theorem argument apply yao lemma implies probability database instance deterministic algorithm resource constraint fails compute probability random choice exists instance randomize algorithm resource constraint fails probability random choice theorem bound deterministic algorithm distribution instance directly yield bound apply yao lemma output probability indeed uniformly chosen random matchings useful purpose query characteristic therefore naive deterministic algorithm return empty fail probably instead define constant apply yao lemma probability distribution random matchings query occurs significant probability lemma random database conjunctive query proof bound version  inequality random variable bound construct query consists plus disjoint variable component define disjoint variable journal acm vol article publication date october independent tuples attribute query attribute random selects tuples independently implies naj naj equality lemma plug bound yield statement lemma generalize definition arbitrary query component query define pack maximizes llower theorem implies deterministic algorithm load deterministic algorithm computes query randomize instance algorithm fails return output tuples lemma upper bound tuples return obtain bound probability failure choice nearly optimizes bound lemma random database query component deterministic algorithm denote proof define moreover distribution independent component definition journal acm vol article publication date october communication parallel query processing additionally combine inequality assumption independent apply lemma separately component therefore definition distinguish nearly minimal obtain apply yao lemma distribution obtain bound randomize algorithm theorem conjunctive query component fix vector cardinality randomize mpc algorithm domain maxj maximum load llower constant derive statistic exists instance cardinality derive statistic randomize algorithm fails compute correctly probability proof conjunctive query component theorem pack achieves maximum llower journal acm vol article publication date october deterministic algorithm llower assumption optimal component hence lemma probability failure distribution apply yao lemma distribution obtain claimed bound randomize algorithm derive theorem proof theorem apply theorem randomize algorithm load llower probability failure discussion application theorem computation optimal exponent query speedup hypercube denote fractional pack maximizes server increase load decrease rate speedup hypercube algorithm quantity speedup exponent cardinality speedup exponent cardinality unequal speedup exponent query assume relation vertex justified max load HC algorithm quantity optimal LP load HC algorithm maximum expression compute speedup suppose optimal pack load hypercube achieves linear speedup compute standard broadcasting relation allocate journal acm vol article publication date october communication parallel query processing query cycle query linear query query query relation relation contains distinct variable bound conjunctive query exponent exponent mod SI exponent relation optimal pack load speedup decrease lemma shed hypercube algorithm exploit unequal cardinality lemma query database derive statistic  maxk increase speedup exponent remains constant decrease eventually proof item lemma modify fractional pack obtain fractional pack function strictly decrease implies lemma logp positive constant hence monotone imply monotonically decrease immediately previous item latter pack packing denote assume constant independent increase crossover therefore decrease speedup exponent denote optimal vertex pack maximize pack muj item lemma relation relation HC algorithm relation broadcast HC algorithm item HC algorithm advantage unequal cardinality achieve speedup allocate journal acm vol article publication date october relation broadcasting increase speedup decrease exponent denote input database sometimes convenient algorithm maximum load per server constant parameter exponent algorithm bound theorem interpret bound exponent relation load denote optimal fractional pack exponent query theorem implies algorithm fix exponent report therefore algorithm exponent increase return intuition achieve parallelism becomes harder increase algorithm exponent compute query correctly eventually fail becomes replication rate algorithm computes conjunctive query load server replication rate algorithm define replication rate computes average input communicate author discus tradeoff maximum load server chosen optimally apply bound obtain bound tradeoff replication rate maximum load corollary conjunctive query derive statistic algorithm computes maximum load replication rate maxu fractional packing maxu proof return server expectation randomly chosen database statistic pack theorem muj assume return muj muj muj optimal relation processor without journal acm vol article publication date october communication parallel query processing specific relation corollary replication rate hence ideal achieve maximum vertex happens variable occurs query query assume pack maximizes bound obtain bound replication rate query  data skew communication discus compute query mpc model presence skew HC algorithm optimal equation fails data skewed asymptotically optimal relation query relation cardinality optimal allocation corresponds standard parallel hash algorithm relation hash variable data skew maximum load probability however relation skew maximum load occurs tuples variable occurs input data frequency occurrence outlier hitter scenario handle data skew scenario assume algorithm information data apart relation scenario assume algorithm outlier data limited algorithm hypercube algorithm skew optimal HC algorithm maximum load minimize distribution input data limit treatment hypercube algorithm data heavily skewed HC algorithm oblivious skewed cannot modify handle separately analysis lemma hash lemma relation arity tuples integer suppose mini suppose hash tuple bin independent uniformly random hash function probability bin receives mini tuples exp mini proof assume without loss generality mini define mini partition relation projection coordinate tuple tuples remain journal acm vol article publication date october definition projection satisfy tuples fix dth coordinate construction tuples bin receives mini tuples union bin receives tuples bin receives tuples upper bound probability dth analysis hash function bin bin corollary bin receives tuples upper bound probability probability  tuples distribution tuples mapping independent binomial distribution binomial tuples therefore tuples binomial upper bound probability standard chernoff bound corollary probability coordinate bin bin receives tuples bound plug yield claimed bound unbounded function immediately obtain corollary corollary integer relation arity  mini tuples suppose hash tuple bin independent uniformly random hash function probability maximum load exceeds mini exponentially mini corollary HC algorithm relation probability maximum load per server maxj mini bound tight construct instance maximum load indeed relation arg mini construct instance attribute hash across dimension server maximum load relation journal acm vol article publication date october communication parallel query processing previous denotes maximum load per server mini denote logp logp load optimize LP minimize previous obtain dual LP transformation obtain non linear program optimal objective function maximize  wij wij wij skew information discus additional information skew input database bound arbitrary conjunctive query algorithm bound query generalization query query algorithmic technique  algorithm compute arbitrary conjunctive query however substantial gap upper bound introduce notation query relation assignment variable define frequency interested assignment frequency hitter algorithm skew account assume input server assignment frequency relation along frequency relation hitter relation server data amount information easily input server bound assumption information available input server conjunctive query fix variable var relation statistic statistic vector function associate function denotes restriction tuple journal acm vol article publication date october variable instance satisfies statistic tuple frequency   simply consists cardinality relation statistic generalizes cardinality statistic recall upper denote correspond derive statistic express ajmj query assume input server statistic assignment variable frequency relation precisely cardinality algorithm query algorithm principle popular virtually parallel implementation date identify hitter treat differently distribute data however analysis optimality proof knowledge denote hitter relation algorithm tuples hitter tuples vanilla HC algorithm  load analysis corollary maximum load ofO maxj probability  hide polylogarithmic factor depends hitter adapt function compute algorithm compute subquery equivalent compute cartesian relation cardinality residual query algorithm allocate server compute unary relation skew maximum load max query specify pack maximizes quantity overcome refine assignment server hitter allocate server evenly distribute load hitter allocate server proportionally  execute residual query hence compute server maximum load max journal acm vol article publication date october communication parallel query processing plug obtain upper bound algorithm hitter max frequency hitter bound maxj obtain hitter extreme hitter demand maximum load algorithm query compute query relation query algorithm tuples hitter frequency vanilla HC algorithm load analysis corollary maximum load probability handle hitter distinguish handle tuples frequency variable  threshold explain without loss generality suppose relation belong observation variable hence tuples server essentially compute query compute frequency relation relate maximum load computation handle remain output tuples variable frequency variable frequency without loss generality assume compute query hitter denotes hitter variable residual query equivalent compute query cardinality respectively allocate server compute skew maximum load formula max MR MT formula packing optimal load skew however assume frequency skew  threshold instead journal acm vol article publication date october quantity max expression allocate server similarly chose query MS MR MT MR MT load max MR MT sum obtain load algorithm compute max MR MT MR MS MS MT bound tight algorithm bound bound conjunctive query generalizes bound theorem database cardinality statistic database fix sequence sequence skewed bound skew input data query evaluation harder fix statistic define residual query obtain remove variable decrease arity arity relation clearly fractional pack fractional pack converse fractional pack saturates variable var saturates saturates variable saturates define derive statistic theorem fix statistic relation deterministic mpc algorithm communication server maximum load fractional pack saturates min derive statistic define equation however theorem imply theorem bound algorithm output output proof denote tuple variable denote subset tuples denote restriction domain maxj construct probability instance define derive statistic fix tuple restriction journal acm vol article publication date october communication parallel query processing uniformly chosen instance database cardinality vector precisely probability proof theorem probability contains naj lemma immediately naj fix server msg message server receives input previous kmsgj denote tuples relation server kmsgj probability random choice upper bound naj derive upper bound exploit server receives limited analogy lemma lemma relation suppose message msgj kmsgj relation statistic fix tuples instance relation hence kmsgj proof express entropy msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj msgj kmsgj denote tuples belong restriction proof lemma denote msgj msgj kmsgj kmsgj kmsgj kmsgj inequality proposition plug equation kmsgj concludes proof journal acm vol article publication date october residual query recall fractional pack saturates define extend query consist variable var define define slack variable pack pack extend query slack hence tight fractional pack tight fractional equality tight pack obtain compute output tuples  expectation server kmsg kmsg  bound sum quantity equation naj   relation kmsg equality equation equation sum server obtain output kmsg algorithm fail compute consequently journal acm vol article publication date october communication parallel query processing sum inequality friedgut inequality lemma ajmj obtain pack saturates min concludes proof theorem applies query assume input server  assignment variable frequency relation pack saturates obtain bound packing saturate maximize quantity hence obtain bound max upper bound query tight constant factor hitter subset hence upper bound hitter bound upper bound maxj hitter bound singleton similarly choice subset vertex saturate obtains bound upper bound query multiple communication  discus computation query mpc model multiple establish upper bound compute query restrict structure input computation mpc model multi algorithm query relation data skew additionally bound proven restrict version mpc model tuple mpc model limit communication perform journal acm vol article publication date october algorithm multiple relation database exactly compute conjunctive query maximum load denotes fractional vertex hence conjunctive query compute mpc model load recall parameter exponent define query induction define define conjunctive query construct query query vocabulary var arity query obtain substitute definition consists query query depth operator query computable maximum load proposition conjunctive query input database relation compute mpc algorithm maximum load proof proof induction  definition query compute load inductive query express inductive hypothesis  compute  additionally database compute additional load intuition structure query query construct query depth load exponent notation computes parallel query isomorphic query therefore hence compute load express query easy hence conclude generalize approach integer   journal acm vol article publication date october communication parallel query processing compute  building depth logkε achieve load query spk spk algorithm achieve load multiple spk hence exists query load achieve compute query spk query hence connection query query decomposition  decomposition  notion width decomposition exponent construct execute within minimize depth query additional objective minimize exponent upper bound compute query achieve load minimum achieve exponent rad minu maxv denote radius query denotes distance node hypergraph rad rad lemma fix query define logkε rad treelike logkε rad otherwise compute database input relation maximum load proof definition rad exists node var maximum distance node hypergraph rad treelike decompose rad possibly overlap rad endpoint essentially isomorphic rad compute logkε rad query proposition hypercube algorithm moreover compute parallel constant variable compute load difference query vertex distance rad rad rad formula apply equality   positive integer application lemma query bound multiple bound multiple restrict communication mpc model define restriction mpc model tuple mpc model journal acm vol article publication date october tradeoff communication query exponent achieve query load tradeoff NA spk NA tuple mpc mpc model restriction message server tuple mpc model impose structure communicate message input database instance query compute algorithm server denote msg message input server server  message server server msg msg msg    define msg vector message server msg msg msg define tuple tuple  subquery algorithm tuple mpc model restriction communication server message  tuples tuple server decides  parameter message msg contains tuple restrict model allows unrestricted communication information msg server available throughout computation however server message consist tuples moreover destination tuples tuple msg restriction communication tuples arbitrary statistical information tuple mpc model capture variety algorithm multiway mapreduce algorithm server perform arbitrary inference message limitation message tuples without restriction rout essentially equivalent fully mpc model server sequence another server encode sequence tuples exchange previous slight loss efficiency understand tuples important arbitrary fix boolean function tuples message communicate explains rout tuples tuple mpc model imposes journal acm vol article publication date october communication parallel query processing bound bound conjunctive query tuple mpc model introduce combinatorial associate query central construction multi bound define notion discus construct various query query recall query contract hypergraph define recall definition conjunctive query satisfies subquery contains lemma integer sequence intuition definition lemma obtain query respectively lemma query admits logkε integer proof induction   admits prof lemma integer logkε logkε admits suffices hence query admits compute query exponent induction inductive hypothesis query define   contraction      query isomorphic inductive hypothesis query admits definition implies sequence extend sequence sufficient indeed satisfied additionally recall consists query subqueries precisely query subquery satisfied intuitively guarantee algorithm tuples exponent lemma query admits logkε integer journal acm vol article publication date october proof proof proof query indeed apart along cycle contract query isomorphic difference  inductive integer admits query construct theorem obtain bound communication compute conjunctive query theorem bound multiple conjunctive query admits randomize algorithm tuple mpc model computes load sufficiently constant exists instance relation algorithm fails compute probability constant theorem depends query parameter precise expression constant additional definition definition conjunctive query define minimum subqueries proposition conjunctive query proof definition additionally definition query define subquery subquery minimal subquery precise statement theorem deterministic tuple mpc algorithm maximum load report expectation uniformly random chosen database relation theorem implies theorem proof theorem indeed obtain output tuples constant apply lemma randomize algorithm instance fail output probability journal acm vol article publication date october communication parallel query processing proof theorem algorithm computes intuition database consists relation relation fix instance algorithm compute however almost useless algorithm discover tuples subquery algorithm compute argument algorithm remains formalize intuition notation relation  denote tuples tuple variable  denote tuples tuple variable deterministic algorithm server subquery define msg var database msg msg msg msg notation msg msg denote tuples server server respectively input msg algorithm input finally define msg msg precisely tuples restrict correspond subqueries computable query computable equation implies tuples infer vanish tuples tuples lemma building theorem lemma query algorithm database exists algorithm processor communication per processor database define algorithm return tuples plus another algorithm define computes denote fix instance oppose denotes random instance journal acm vol article publication date october proof contract query query input database input contract query  lemma algorithm fix database construction construction contraction retraction contraction algorithm derive algorithm component representative variable var query instance treelike denote var variable var permutation var define identity otherwise unique component var unique tuple define  permute domain variable var server fix instance idm idm identity database relation therefore denotes projection operator  idm equation define algorithm computes query input server replaces unchanged substitute relation identity finally apply return output hence  idm retraction transform algorithm retraction  input input server sends addition message tuple server eventually input server sends exists msg restriction tuple mpc model destination hence compute input server increase processor communication possibly perform therefore entire inductive argument load load sends tuples sends tuple server server server algorithm sends algorithm output subset quantify tuples assume var var contract node hypergraph replace node journal acm vol article publication date october communication parallel query processing contract algorithm QM subquery define QM msg exactly non atomic tuples tuples algorithm lemma proof statement induction subquery server algorithm server algorithm induction construction msg msg tuple atomic server algorithm algorithm tuple server algorithm relation statement construction atomic tuples algorithm otherwise QM  server tuple construct server algorithm induction hypothesis server algorithm communicate server lemma additionally definition  goodness subquery hence  information compress algorithm finally combine everything   concludes proof lemma conjunctive query subquery algorithm output subset database uniformly random chosen database  restriction journal acm vol article publication date october proof var symmetry quantity independent therefore construction inequality database proof theorem define Mˆ algorithm apply lemma algorithm database exists algorithm database iteratively apply argument denote iMk inductively define algorithm query database exists algorithm iMk database iMk iMk iMk iMk iMk combine inequality obtain imr imr imr imr imr expectation equation uniformly chosen database upper bound hence lemma IMk analyze equation output algorithm compute definition processor algorithm journal acm vol article publication date october communication parallel query processing algorithm therefore apply theorem obtain imr imr bound remain IMk imr tuples IMk algorithm IMk depends choice tuples subquery hence contributes fix iMk tuples subquery portion iMk tuples satisfies IMk IMk processor iMk hence receives communication bound apply lemma derive IMk IMk IMk IMk average choice iMk sum query recall minimal subqueries obtain IMk combine bound obtain equation conclude prof theorem journal acm vol article publication date october application bound apply theorem obtain bound query bound upper bound query corollary straightforward application theorem lemma corollary tuple mpc algorithm computes load logkε computation tight bound previous exists query depth logkε load bound treelike query observation proposition treelike query subquery exists tuple algorithm computes load tuple algorithm computes load proof tuple mpc algorithm compute maximum load construct tuple mpc algorithm computes load interpret instance instance relation identity permutation relation exactly project tuple variable correctness treelike define diam diameter query distance node hypergraph rad diam rad rad diam rad diam corollary tuple mpc algorithm computes treelike query load logkε diam proof subquery corresponds diameter query moreover behaves exactly  hence lemma algorithm logkε diam compute apply proposition bound  logkε diam upper bound rup logkε rad lemma diam rad  rup additionally rad diam   gap bound upper bound treelike query bound rad diam treelike query instance non treelike query namely cycle query lemma application lemma lemma tuple mpc algorithm computes query load logkε cycle query gap bound upper bound lemma query rad rad query bound upper bound hence ofc tight upper bound query journal acm vol article publication date october communication parallel query processing upper bound bound becomes compute finally apply lemma transitive closure graph  undirected graph input requirement label node component label unique component graph disjoint union bound input distribute algorithm structure fashion graph input multiway naturally capture moreover tuple restriction algorithm capture restrict mapreduce algorithm connectivity portion graph restrict graph tuple rout mapreduce yield restriction rout decision tuples model theorem input graph algorithm tuple mpc model computes component union disjoint processor load logp proof construct input graph component component correspond output tuples constant bound query fix depends processor proof implies powerful algorithm assume without loss generality integer constant input graph initial distribution server input vertex input graph partition partition vertex permutation matchings adjacent partition exactly construction creates essentially binary relation tuples assume adversary graph server relation easy tuple algorithm mpc solves component arbitrary graph load implies tuple algorithm load solves relation indeed algorithm algorithm component executes label node tuple corresponds exactly component recover tuples query independent server carefully compute constant bound algorithm load logkε proof lemma apply theorem compute factor query isomorphic consists choice isomorphic  journal acm vol article publication date october assume consequently theorem implies tuple mpc algorithm logkε report output tuples query   constant output tuples function processor implies algorithm computes component logkε logp related mapreduce related model computation model propose understand mapreduce related massively parallel program framework identify communication complexity parameter treatment communication model massive unordered distribute  model input sequence applies binary merge operation repeatedly obtain similarly user define aggregate database article  algorithm algorithm trivially simulate  converse merge operator computationally powerful beyond  define MRC multi algorithm mapreduce primitive sole building fix specific parameter balance processing processor exchange mapreduce output expressible per storage processor focus algorithmic simulation parallel model MRC algorithm specific propose mapreduce model parameter maximum memory reducer amount memory journal acm vol article publication date october communication parallel query processing MRC model restriction processor another mapreduce model introduce maximum reducer parameter bound mapreduce model derive tradeoff reducer replication rate nicely illustrate  drug interaction drug consist MB data patient drug drug interaction apply user define function udf drug tradeoff simplify assume apply udf item compute cartesian extreme reducer item reducer approach impractical data replicate extreme reducer handle entire data replication rate reducer impractical tradeoff partition reducer reducer replication rate tradeoff replication rate reducer significant limitation prior powerful convenient mapreduce framework operation advantage resource constraint bound alternative structure computation amount data per within mapreduce framework bound apply communication limitation multi mapreduce algorithm convenient mapreduce hide server programmer efficient resource expose information resource programmer article server explicit parameter model allows focus tradeoff amount communication cartesian server optimal partition server handle model explicit parameter propose   upper bound communication model tuples rout independent   prof multi attribute compute multi attribute strictly mostly focus understand data skew model limited apply mpc model introduce article model arbitrary communicate data tuples unbounded compute server bound apply broadly moreover establish bound absence skew parallel model prior parallel model closest mpc model valiant bulk synchronous parallel BSP model BSP model operates synchronous supersteps consist possibly asynchronous addition processor superstep notion relation mapping processor sends receives architecture dependent bandwidth parameter journal acm vol article publication date october superstep processor deliver relation superstep mpc model notion load largely parallel notion relation technically bound processor receives obtain bound parameter irrelevant strengthen model unbounded local computation hence notion model synchronous supersteps finer grain logp model away synchronization barrier notion relation inherent BSP model continuous notion relaxed synchrony latency bound bound processor overhead communication supersteps finer grain computation relaxed  tighter model parallel architecture architecture mapreduce style computation BSP mpc model communication complexity belong communication complexity exist research communication complexity considers communicate cooperate agent computational agent unlimited computational model related multi communication complexity multiple agent information communication already important understand processing massive data analysis nih communication complexity obtain bound  algorithm however something almost prior bound agent access communication agent typically via blackboard agent access referee receives communication communication mpc model communication server private restrict communication per processor per communication indeed privacy communication essential bound bound apply communication bound apply communication recent article   author construct parallel algorithm mpc model  optimal maximum load behave data distribution conjunctive query exists data distribution input mpc algorithm load minimum fractional query moreover binary conjunctive query relation exists algorithm achieves load author propose multi algorithm acyclic conjunctive query load depends input output private message model define aware bound agent access communication    huang assumption communication private multi pas unlike bound bound input  define distribute model communication complexity network input processor communicate privately helper processor however model equivalent ordinary public communication network allows private communication processor model journal acm vol article publication date october communication parallel query processing hypercube algorithm implement massively parallel traditional parallel query conclusion article introduce powerful model mpc model allows analyze query processing massively parallel mpc model capture important parameter communication maximum load server receives computation tight upper bound maximum load communication input data without skew handle skew query finally analyze precise tradeoff maximum load multiple leaf analysis multiple limited input assume relation bound almost tight specific query treelike query remains obtain bound conjunctive query relation data skew parallel computation another research direction although understand handle skew skew influence computation multiple tradeoff obtain