universal reachability PDR semi algorithm automatic inference invariant universal fragment logic PDR extension bradley PDR IC algorithm inference propositional invariant PDR terminates discovers concrete counterexample infers inductive universal invariant establish desire safety proof invariant exist PDR guaranteed terminate however program manipulate singly link implement analyzer PDR apply collection manipulate program analyzer automatically infer universal invariant establish memory safety functional correctness absence invariant program specification detect bug without user abstraction predicate CCS concept theory computation invariant program verification verification model additional universal invariant reachability IC PDR EPR introduction universal reachability PDR semi algorithm automatic inference quantify inductive invariant application analysis program manipulate unbounded data structure singly link doubly link data structure program inductive invariant generate ensures program satisfies specification erroneous program PDR concrete counterexample historically address abstract interpretation algorithm automatically infer inductive invariant bound model algorithm explore limited loop iteration systematically bug recent simultaneously invariant counterexample bradley PDR IC incremental construction inductive clause  correctness algorithm repeatedly strengthen candidate invariant becomes inductive counterexample correctness program proven universal invariant hence simplify focus infer universal invariant PDR terminates yield outcome universal inductive invariant program respect concrete counterexample program violates desire safety proof program cannot proven universal invariant vocabulary diagram abstraction unlike previous neither assume predicate constitute invariant priori bound universal quantifier instead rely theory finite model theory smt return unsat negation formula valid construct finite model translate diagram formula model extend diagram construct universal clause strengthen candidate invariant invariant inference similarly IC PDR iteratively construct increase sequence candidate inductive invariant FN overapproximates execution initial iteration PDR smt candidate invariant become inductive program respect desire PDR iteratively strengthens candidate invariant specifically exists satisfies FN smt FN diagram execution exists candidate invariant FN strengthen conjoin negation otherwise recursively strengthen exclude approximation recursive strengthen bound model checker counterexample counterexample PDR determines universal invariant desire exists lemma PDR guaranteed terminate program manipulate singly link furthermore terminates procedure split satisfy PDR infer tricky inductive invariant memory safety null dereference memory leak satisfy satisfy introduce stability reachability satisfy implementation verify split satisfies fully automatically infer inductive journal acm vol article publication date march inference universal invariant absence motivate loop invariant consist clause universal formula invariant appendix procedure filter remove  satisfy loop invariant infer PDR verify simplify version satisfy remove invariant highlight filter clause becomes immediate predecessor clause reachable satisfy experimental evaluation implement PDR decision procedure apply collection procedure manipulate possibly sort singly link doubly link multi link analysis journal acm vol article publication date march invariant filter readability infer clause displayed implication successfully verify specification detect bug incorrect program establish absence universal invariant program contribution contribution summarize PDR  surprisingly powerful combination PDR strengthen technique diagram PDR enjoys automation predefined abstraction predicate diagram abstraction particularly  accord structural discover PDR traversal diagram abstraction precise PDR spurious counterexample program cannot proven universal invariant unique feature approach sufficient ensure PDR terminates implement PDR decision procedure logic apply successfully verify collection manipulate program detect bug absence universal invariant technique outperforms exist PDR verification technique decision procedure user abstraction predicate implementation available http bitbucket org    model acyclic encode developed novel encode allows model program manipulate restrict cyclic apply analysis PRELIMINARIES formalizes verification terminology notation explain logic transition consists transition explain translate program transition obtain verification capture correctness program logic aer validity decidable article interested satisfiability logic negation formula aer formula hence satisfiability reduce validity aer hence decidable journal acm vol article publication date march inference universal invariant absence verification representation logic finite model vocabulary consists constant relation finite domain model interpretation function assume domain subset fix universe transition relation transition transition define transition relation transition relation model vocabulary Vˆ vocabulary source transition vocabulary target model describes program definition reduct model Vˆ Vˆ reduct denote reduct model transition reduct vocabulary described reduct successor predecessor verification transition TS init init formula denote initial program formula Vˆ denote transition relation initial init transition reachable reachable context application initial denote reachable reachable reachable TS satisfies safety reachable satisfy define def refer satisfy assertion express pre assertion within loop logical formula invariant invariant transition reachable inductive application denote formula obtain replace constant relation formula prim version definition invariant TS init transition safety formula safety inductive invariant invariant TS init exists invariant TS TS satisfies invariant universal equivalent universal formula formula quantifier prefix prenex normal invariant infer PDR conjunction universal clause universal clause universally quantify disjunction literal positive negative atomic formula program verification program handle loop program assume program cond cmd cmd loop encode complicate model finite finite domain journal acm vol article publication date march structure nest multiple loop explicitly program counter clarity sequence instruction precede loop technically encode loop precondition program semantics verification semantics program described transition program iteration loop transition describes execution loop cmd relates iteration loop iteration technically derive semantics loop transition relation formula weak liberal precondition predicate transformer wlp define command II definition wlp imperative imp construct transition relation wlp define identity formula specifies input output identical vocabulary formula formally define def denote constant relation respectively variable accord arity relation vocabulary corresponds structure corresponds define def cond wlp cmd wlp cmd denotes weak liberal precondition loop define init program pre assertion init def pre def cond cond wlp cmd initial satisfies precondition satisfies negation loop indicates termination loop satisfy capture requirement loop terminates violation assertion within loop encounter loop capture subformula wlp cmd construction init ensures TS init satisfies execution program satisfies precondition violates assertion terminates satisfies postcondition  heap   USING effectively propositional logic exemplify heap manipulate program correspond verification logic define fragment logic construction formula init program construction formula program manipulate acyclic data structure developed journal acm vol article publication date march inference universal invariant absence effectively propositional axiomatization deterministic reflexive transitive closure def reflexivity acyclicity transitivity semi linearity develop novel construction handle restrict cyclic data structure EPR effectively propositional logic EPR  ramsey fragment logic allows relational formula quantifier prefix forbids functional satisfiability EPR decidable EPR enjoys model satisfiable formula EPR guaranteed finite model program correspond verification auxiliary logic built EPR enables program manipulate  structure extends EPR deterministic transitive closure operator acyclic relation satisfiability reducible EPR enjoys technically reduction introduces axiom EPR formula characterization axiom program manipulate link data structure transition memory manipulate program fix infinite countable universe individual dynamically allocate recall finite model vocabulary associate program variable constant contains designate constant null denote null contains binary predicate defines reachability pointer  vocabulary definable formula II shorthand clearly definition rely acyclicity cycle node cycle node information define node cycle encode addition boolean function unary predicate relation sort binary predicate depict memory graph individual heap location depict label constant unary predicate individual respectively clarity directly depict interpretation relation instead compact scheme annotate interpretation infer annotate omit incoming corresponds null constant reflexive transitive closure remain transition relation express semantics loop code transition relation vocabulary define weak liberal precondition predicate transformer wlp command impr extension imp heap related command wlp II notation denote substitution journal acm vol article publication date march II compute weak liberal precondition procedure impr wlp skip def wlp def wlp cmd cmd def wlp cmd wlp cmd wlp cmd cmd def wlp cmd wlp cmd wlp assert def wlp null def wlp def null wlp def def null wlp def var null express formula frame standard wlp imp frame contains addition heap update dereference memory allocation assume program  modify command precede command null existential variant wlp wlp def wlp def var null occurrence constant notation denotes substitution formula placeholder argument var constant pertain variable program wlp encode correspond update wlp confound fairly intuition remove pointer link node disconnect link source target express respectively formula null null former describes latter describes addition denote  heap location traverse pointer successor express transitive closure formula location null successor iff node successor null iff empty ability recover successor encode heap structure transitive closure wlp definition transition relation define equation important universal formula negative context wlp define universal formula formula quantifier prefix formula purpose achieve quantify slightly variant remain unchanged journal acm vol article publication date march inference universal invariant absence onward switch definition transition relation def cond wlp cmd equivalence semantics relies location differs null exactly location definition transition relation obtain filter demonstrate construction simpler program loop consists command cmd null wlp cmd wlp null wlp wlp null wlp wlp null transition relation construct null wlp cmd null wlp cmd null proposition wlp cmd wlp cmd define equation initial express manipulate program pre pre respectively assertion vocabulary init define assertion equation pre null null refer pre loop terminates respectively therefore init def null def null null null occurs loop terminates nonempty contains assert statement hence disjunct definition equation capture semantics assertion violation simplifies false subsume disjunct analysis formula init translate equisatisfiable EPR formula model program manipulate cyclic link extension previous target acyclic data structure augment formalism handle restrict cycle formalism allows cycle heap achieve decompose pointer label journal acm vol article publication date march IV modify wlp handle restrict cyclic acyclic label plus additional label heap contains cycle remove acyclic denote reflexive transitive closure source destination label null relationship null therefore fully characterize heap reachability axiom instead addition successor cycle null modify wlp formula II reflect situation semantics null IV multiple substitution bracket parallel operator  denotes otherwise  formula express utilize  cycle semantics maintains cycle assignment remove replace cycle broken null wlp remains II definition adjustment wlp suitable universal DIRECTED reachability universal reachability PDR algorithm transition TS satisfies safety PDR adaptation bradley reachability IC algorithm formula  translate equivalent formula standard connective however smt lib compliant solver natively  translation journal acm vol article publication date march inference universal invariant absence universal formula instead propositional predicate predicate abstraction throughout flavor PDR developed implementation  presentation article deterministic implementation PDR employ recursion instead commonly obligation queue allows simplify presentation focus unique aspect PDR expense preclude discussion optimization requirement transition relation init expressible logic fragment logic assume conjunction contains universal existential formula satisfiable formula finite model assume decision procedure formula satisfiable function model return finite model model exists none otherwise EPR logic express transition negation described negation EPR formula formula diagram structural abstraction PDR iteratively strengthens candidate invariant retrieve program retrieve reachable PDR IC novel aspect approach diagram generalize individual reachability diagram structural abstraction existential formula diagram finite model denote diag existential cube describes explicitly relation model definition diagram finite model alphabet diagram denote diag formula alphabet denotes model  embed diag construct variable  introduce  conjunction inequality   distinct model  conjunction equality constant  conjunction atomic formula predicate atomic formula otherwise diag def    intuitively diag formula treat individual existentially quantify variable explicitly encode interpretation constant predicate conjunction equality inequality  formulate lemma adaptation standard  notion diagram journal acm vol article publication date march graphical depiction model model diag atomic formula diag define model finite domain diagram depict diag def null domain consists characterizes interpretation constant capture precisely interpretation predicate substructure restriction lemma lemma diag iff isomorphic substructure diagram abstract away domain abstraction model diag depict clarity drawn correspond link extract structure recall II substructure additional node additional additional additional additional node respectively contains substructure recall vocabulary contains annotate due transitive similarly contains additional node contains substructure demonstrate link program model diagram abstraction allows forget diagram useful sequel lemma model existential formula diag differently diag existentially quantify formula model semantically lemma model diag implies reachable journal acm vol article publication date march inference universal invariant absence program proven inductive universal invariant diagram unreachable inductive invariant satisfy existential formula hence diag satisfy diag unreachable abstraction diagram precise program universal invariant diagram PDR absence universal invariant proposition data structure frame PDR algorithm procedure  algorithm algorithm respectively subroutine algorithm array frame frame conjunction universal clause clarity refer ith entry array subscript notation instead intuitively frame approximates reachable algorithm maintains frame counter frame developed refer initial frame FN frontier frame frame PDR maintains invariant ensure frame  hence sequence developed frame  trace program technically algorithm construct approximate reachability sequence definition TS init transition safety sequence FN formula approximate reachability sequence TS init transition item ensure frame previous frame successor respectively item induction model satisfy superset furthermore item frame iterative construction approximate reachability sequence PDR iterative algorithm iteration algorithm strengthens frame contains otherwise develop frame addition iteration strengthen frame strengthen frame perform universal clause reachable conjoin initialization algorithm initial intersect exit return satisfies init counterexample otherwise initial frame counter trivial approximation initial successor iterative construction algorithm iterative inductive invariant recall algorithm develops frame already manage approximate reachability sequence FN journal acm vol article publication date march algorithm PDR init init exit invalid model init init exists return valid FN FN model FN algorithm diag init   model algorithm  exists init exit invalid exit universal invariant exists hence iteration fixpoint inductive invariant  algorithm return valid otherwise algorithm strengthen frontier frame FN witness frontier frame exists reachable moreover FN approximate reachability sequence iterative strengthen FN terminates frontier frame initialize frontier frame contains witness FN satisfiable reachable due requirement finite satisfiability logic witness finite model witness algorithm indeed reachable program satisfy specification discover due approximation frame invoke procedure index frontier frame parameter latter return counterexample determines impossible specification universal invariant logic vocabulary strengthens frontier frame exclude diagram possibly strengthens frame iterative construction strengthen frame fixpoint counterexample absence universal invariant analyze algorithm discovers witness invokes succeed unfortunately strengthen frame model therefore iterative strengthen iteration depict efficiency implementation frame clause meaning conjunction implication inclusion facilitate fixpoint computation clause inductive propagate allows initialize frontier frame FN tighter approximation RN journal acm vol article publication date march inference universal invariant absence graphical depiction model analysis witness model witness model witness model however algorithm determines strengthen frame witness approximate reachability sequence PDR initializes frame inductive invariant diagram abstract procedure algorithm index frame jth frame reachable unique aspect approach abstract accelerate strengthen routine namely diagram specifically PDR computes diagram reachable satisfy importantly due lemma universal invariant exists generalization diagram reachable hence abstraction precise maintains  strengthen guaranteed succeed exclude entire diagram diagram reachable conservatively initial predecessor recall approximates former equivalent init satisfiable initial frame init hence formula guaranteed satisfiable explicitly init satisfiable frame proof lemma diag init diag algorithm adverse initial initial satisfy invokes procedure  analysis otherwise algorithm formula satisfiable predecessor unsatisfiable reachable hence remains approximation exclude exclusion init universal formula lemma hence init omit optimization instead formula equivalent lemma checked  satisfiability cheaper journal acm vol article publication date march conjoin jth frame universal formula strengthen conjoin frame similarly traditional PDR maintain inclusion frame definition moreover update maintains definition preserve despite conjoin frame inclusion ensures latter implies preserve approximate reachability sequence update remains approximation refer exclusion diagram frame iteration update diag excludes null empty reachable nonzero depict later iteration update diag diag diag II satisfiable exists adverse frame predecessor diagram frame necessarily predecessor adverse reduct finite model adverse model exists algorithm recursively recursive procedure adverse algorithm adverse initial adverse development frame strengthen frame  approximation concrete counterexample absence universal invariant procedure  algorithm adverse initial indicates abstract counterexample exists definition abstract spurious counterexample sequence formula abstract counterexample formula init satisfiable abstract counterexample spurious exists sequence init abstract counterexample necessarily counterexample counterexample necessarily spurious counterexample shorter exist algorithm already terminate development frame however algorithm determines abstract counterexample spurious application transition relation technically  implement symbolic bound model checker counterexample algorithm report otherwise obtain counterexample spurious technically neither verify falsify algorithm verification effort doom spurious counterexample proof absence universal invariant prop generalization diagram diagram frame conjoin clause implementation minimal unsat core init define clause implies journal acm vol article publication date march inference universal invariant absence disjoint init unreachable conjoin correctness formalize correctness guarantee PDR formalize invariant sequence frame maintain PDR output PDR frame compute PDR lemma summarizes invariant sequence frame compute PDR induction PDR invariant adopt traditional PDR lemma TS init transition safety sequence FN obtain PDR increase approximate reachability sequence TS definition loop sequence FN satisfies requirement definition possibly requirement slightly tighter characterization frame compute PDR unlike lemma specific PDR definition definition relaxed trace transition TS init sequence relaxed trace TS exists diag transition TS denote via relaxed trace exists relaxed trace denote via relaxed trace lemma frame compute PDR via relaxed trace trace depends frame index lemma TS init transition safety BN via relaxed trace lemma increase implies BN proof induction BN exclude easy induction PDR attempt frame lemma TS init transition safety BN return proof lemma inductive generalization minimal  inductive relative meaning init unsatisfiable journal acm vol article publication date march proof lemma suppose discover backward traversal FN lemma BN therefore lemma proof recall therefore hence universal formula therefore lemma diag equivalently diag conclude diag init universal formula formulate lemma diag additional init perform false hence correctness outcome PDR recall PDR terminates report program program counterexample program cannot verify universal inductive invariant lemma TS init transition safety PDR return valid TS satisfies PDR return counterexample TS satisfy proof PDR return valid exists therefore recall approximate reachability sequence init therefore inductive invariant ensures TS satisfies immediately definition counterexample proof lemma implies PDR determines TS satisfies obtains universal inductive invariant namely frame fixpoint identify comprises invariant recall frame universal formula obtain conjunction negate diagram proposition TS init transition safety PDR obtains spurious counterexample exists universal safety inductive invariant TS vocabulary proposition universal inductive invariant exists TS via relaxed trace satisfies invariant proposition TS init transition safety via relaxed trace universal inductive safety invariant proof induction implies conclude inductive definition exist model diag moreover induction hypothesis existential formula lemma diag conclude diag therefore model formula assume satisfiable contradiction inductive hence journal acm vol article publication date march inference universal invariant absence procedure non empty acyclic spurious counterexample procedure  proof proposition assume exists universal safety inductive invariant lemma generate PDR frame hence proposition implies lemma diagram generate PDR frame hence init recall definition init init contradicts existence spurious counterexample init satisfiable procedure  pre traverse traversal terminates program indeed satisfies however cannot proven inductive universal invariant init procedure precondition safety negation null null procedure postcondition depict clearly model satisfies init therefore exists predecessor hence submodel interprets constant universal model successor hence however contradiction safety invariant indeed PDR spurious counterexample obtain indicates universal invariant exists predecessor recall predecessor spurious counterexample obtain satisfies diagram sufficient  termination PDR algorithm guaranteed terminate restrict distinct existentially quantify variable diagram blessing invariant arbitrary quantify variable curse bound however non trivial program terminates PDR terminates journal acm vol article publication date march program manipulate singly link infer universal invariant program decidable theorem ıve backwards reachability algorithm algorithm bridge backwards reachability PDR formulate transition TS init proposition backwards reachability algorithm terminates input transition TS PDR terminates establish introduce notion effective encoding backwards reachable define nutshell backwards reachable effective transition reachable define  existential formula formula finite quantify variable contains finite sub formula allows backwards reachability PDR lemma lemma algorithm terminates TS effective lemma effective TS PDR guaranteed terminate description algorithm computes complement fixpoint diagram via relaxed trace formula properly initial init universal inductive invariant otherwise algorithm ıve backward reachability model diag init return universal inductive invariant return universal inductive invariant define backward reachable effective recall denote via relaxed trace TS denote via relaxed trace definition effective described existential formula exists existential formula lemma description ıve algorithm definition effective proof lemma suppose algorithm terminates negation obtain formula equivalent disjunction diagram existential formula ensures effectiveness establish lemma context recall satisfiable formula finite model assume decision procedure journal acm vol article publication date march inference universal invariant absence formula satisfiable function model return finite model model exists none otherwise termination argument requirement finite model function constant existentially quantify variable existence function bound formula existentially quantify variable constant finite model model contains bound bound depends existential quantifier constant universal quantifier EPR bound assume model return model bound assume satisfies additional requirement satisfiability perform PDR lemma proof lemma proof consists argument exists frame fix PDR generates clause generate clause bound function depends distance frame latter bound obtain bound clause ensures termination effective exists existential formula finite disjunction diagram indeed achieve convert formula dnf perform existential cube splitting existentially quantify variable distinct instance constant relation negatively positively therefore effectiveness implies exists finite diag shortest relaxed trace maxm model diag relaxed trace therefore hence PDR generates clause frame fix lemma BN choice BN lemma PDR attempt frame exists conclude therefore clause generate frame FN FN backwards generate bound model obtain PDR backward traversal hence bound generate clause denote constant  denote existential quantifier denote existential quantifier induction bound model obtain PDR frame function  bound additional parameter recall backward traversal FN FN universal formula ensure obtain model bound bound  induction PDR backward diagram formula diag existential quantifier formula latter domain construction diagram assumption model therefore ensure journal acm vol article publication date march domain obtain model bound bound induction hypothesis bound function  hence denote function  bound model obtain PDR frame therefore PDR backward obtain model bound max max  bound model PDR altogether conclude clause generate PDR diagram max quantifier potential clause finite hence ensures termination PDR termination effectively propositional logic init EPR formula universal formula satisfiability query PDR EPR formula EPR finite model satisfiability decidable EPR additional requirement termination EPR formula satisfiable satisfy model bound constant existentially quantify variable EPR formula bound existence bound   ramsey formula bound quantifier clause generate PDR frame explicitly express  denotes constant  denotes existential quantifier denotes existential quantifier proven induction bound algorithm guaranteed terminate substructure relation quasi program manipulate singly link model EPR transitive reflexive binary relation constant unary relation additional binary arity relation therefore conclude PDR terminates program implementation empirical evaluation PDR parametric vocabulary implement decision procedure finite satisfiability logic formula formula expressive capture assertion transition candidate invariant algorithm guaranteed terminate underlie logic decidable implementation however explain quasi preorder reflexive transitive binary relation infinite sequence contains increase journal acm vol article publication date march inference universal invariant absence ability PDR infer inductive invariant manipulate program generalization counterexample  enumerate formula luckily specifies transition relation instead formulation abstraction combination generalization via diagram unsat core allows infer clause apply reachability without enumerate diagram reachable benchmark implement PDR apply collection procedure manipulate singly link doubly link multi link implementation insertion sort algorithm union algorithm conduct 6GHz intel core machine 2GB memory ubuntu version   default setting satisfiability EPR formula summarizes experimental verification analyzer successfully verify memory safety absence null dereferences memory leak preservation data structure integrity meaning procedure creates cycle acyclic manipulate procedure cyclic structure preserve procedure operating cyclic functional correctness singly doubly link manipulate procedure procedure operating restrict cyclic precondition input possibly empty cyclic procedure reverse return comprise input reverse verify absence memory leak unary predicate alloc node allocate encode instruction alloc update accordingly transition relation absence memory leak formulate informally non reachable satisfy alloc alloc   denotes variable program additionally auxiliary ghost constant predicate input reachability specify reverse introduce ghost predicate initial reachability formula implementation fault avoidance version wlp ensures program perform null pointer dereferences preserve data structure integrity absence memory leak aforementioned formula user pertain functional correctness verify correctness procedure manipulate sort sort insert insert appropriate sort sort merge creates sort merge sort bubble sort insertion sort sort input data implementation available http bitbucket org    journal acm vol article publication date march experimental memory safety memory safety verification singly link concat AF delete delete filter insert insert merge AF reverse split union sort singly link sort insert sort merge AF bubble sort insertion sort doubly link delete insert composite link structure nest flatten AF nest split AF overlaid delete restrict cyclic singly link cycle  insert delete reverse absence universal invariant description comb bug bug description insert precondition weak omit null filter forgot insertion sort typo typed instead sort merge forgot link obtain analysis denotes index developed frame denotes AF denotes abstraction failure timeout program clause infer invariant elimination redundant clause program universal inductive invariant incorrect program maximal model arises counterexample journal acm vol article publication date march inference universal invariant absence VI instrumentation predicate manually previous denote pointer   predicate denotes data semantics enforce appropriate background theory binary predicate appropriate axiom predicate express  without directly data addition verify procedure manipulate multi link overlaid delete overlaid deletes overlaid multiple pointer index nest split satisfy sublist flatten nest flattens concatenate sublists verify union algorithm compress operation maintains reachability node preserve finally verify procedure manipulate cyclic link cycle cycle cyclic  cyclic delete deletes input cyclic insert insert sort cyclic preserve  verify manipulate program PDR universally quantify abstraction predicate template VI template parameterized arbitrary pointer program variable meaning immediate successor heap location stable allocate rev pointer sort sort predicate trivial specific technique discover without manually instrumentation predicate establish functional correctness strictly weaker verify reverse input verify absence universal invariant cannot verify universal invariant procedure described universal invariant journal acm vol article publication date march apply procedure comb allocates pointer hence heap comb discover universal invariant comb terminates null input bug analysis program deliberate bug detect bug generate concrete trace safety correctness violate loop invariant however loop becomes complicate conditional statement formula transition adverse scalability evident verification insertion sort nest loop encode loop additional statement related synthesize quantify invariant significant attention discovery quantify predicate counterexample extension predicate abstraction variable infer invariant comprise universally quantify predicate unlike approach computation predicate employ predicate abstraction additional generation quantify invariant abstract domain quantify data automaton tailor  arithmetic array instantiate quantifier template apply symbolic proof technique aim identify loop invariant predicate candidate ingredient  algorithm aware  recent algorithm predicate abstraction context IC predicate abstraction specifically target analysis predefined predicate therefore automatic approach diagram abstraction mechanism approach  refinement CEGAR infer predicate  beyond predicate introduce unary predicate heap location allows infer quantify permit lazy refinement improve performance completeness guarantee addition infer invariant quantifier nest depth whereas PDR allows arbitrary nest depth PDR extremely domain hardware verification subsequently generalize ware model program model linear arithmetic approach   conflict projection linear arithmetic   employ quantifier elimination procedure linear arithmetic approximate pre image operation finally model projection extract approximation  contrast diagram allows obtain approximation precise program verify universal invariant journal acm vol article publication date march inference universal invariant absence reduction EPR creates parametrized array array booleans developed array safari smt abstraction array  relevant related  model checker modulo theory  safari symbolic precondition propagate symbolic cube conjunction literal array constraint  synthesize universal invariant propagate inductively generalize diagram differs PDR generally diagram lazily finite abstraction array lazy abstraction apply terminate abstraction structure satisfy ascend chain chain abstraction  mcmillan various abstraction domain interpolation termination interpolation enforce limit creation atomic formula exist sub contrast termination argument quasi logic implementation limited capability express variable impose limitation expressibility approach canonical abstraction prior apply predicate abstraction link abstraction node variable merge domain separation logic primitive asserts existence possibly empty node node decision procedure previous compute transformer individual statement manipulate link logic heap verification decision procedure obtain reduction traditional logic strand structure  data logic ability heap data structure data monadic logic  define relation heap decidable fragment inspire EPR universally quantify variable elastic relation essentially elasticity generalization transitive closure strand earlier  pointer assertion logic translates reachability  graph strand invariant inference mechanism strand logic PDR logic  composite structure logic flavor strand sort restriction syntax generalizes handle doubly link allows constraint structure decidability obtain model via reduction logic logic cyclic singly link propose logic contains transitive closure link function decision procedure custom inference logic data   logic  logic interpret bound quantification ternary primitive corresponds heap node allows pointer cycle decision procedure custom proof termination relies stratification sort semantic formula journal acm vol article publication date march previous author proposes translation logic manual instantiation quantifier separation logic inductive predicate conjoin operator unbounded heap basis static analysis decidable fragment latter allows heap collection program variable existentially quantify logic however express separation explicitly collection heap  reachability   graph reachability invert essentially decidable fragment separation logic former decision procedure reduction logic latter recently reducible EPR  allows numerical data heap CONCLUSIONS PDR combination PDR IC model theoretic notion diagram latter PDR aggressive strengthen scheme structural abstract formula extension within iteration PDR refinement loop obviates user abstraction predicate automation particularly important verify tricky program program manipulate unbounded data structure variety possibly specification indeed implementation successfully analyze multiple specification tricky  program discover counterexample uniquely approach program cannot proven universal invariant interestingly sometimes harder verify verify complicate verify partial correctness faster verify memory safety without hindsight surprising due analysis pleased simplicity approach notion diagram abstraction particularly useful verification program manipulate unbounded recent extend PDR interprocedural analysis procedure summary infer instead invariant interprocedural version verify iterators java program future apply context verification network program