buffer heap cache oblivious priority queue delete min delete hybrid insert decrease operation amortize transfer memory unknown cache respectively queue introduce notion slim data structure capture situation limited portion cache slim cache available data structure retain data data structural operation buffer heap automatically adapts environment operation amortize transfer slim cache substantial improvement trivial cache performance bound cache oblivious priority queue decrease buffer heap cache oblivious implementation dijkstra algorithm undirected source shortest graph non negative graph vertex algorithm undirected performs transfer performs transfer non trivial cache oblivious bound graph shortest APSP undirected graph incorporate slim buffer heap multi  heap improve cache aware cache complexity  APSP algorithm unweighted undirected graph  logm transfer cache aware bound substantial improvement previous cache oblivious bound CCS concept theory computation shortest data structure analysis additional cache efficient cache oblivious priority queue decrease buffer heap shortest introduction shortest source shortest shortest APSP fundamental important combinatorial optimization theoretical practical undirected graph vertex non negative  distinguish vertex seek minimum  reachable vertexv APSP asks vertex denote respectively cache consideration undirected graph efficiently logn dijkstra algorithm implement fibonacci heap faster algorithm exist graph graph restrict APSP bound undirected graph inverse ackermann function evaluates constant practical logn graph dense graph function article mainly interested sparse graph graph interested algorithm arbitrary memory machine typically organize hierarchy register cache possibly ram disk access increase depth transfer adjacent execute machine algorithm traditional model processor stall data transfer memory situation datasets involve transfer disk therefore perform machine algorithm reduce transfer memory hierarchy cache aware algorithm capture influence memory access algorithm aggarwal  introduce model external memory model model consists memory hierarchy cache internal memory arbitrarily memory external memory partition algorithm cache fault reference reside cache fetch memory cache complexity complexity algorithm cache incurs transfer operation model successfully capture situation transfer memory hierarchy dominates algorithm cache complexity model cache incur contiguous data item memory scan cache incur sort data item sort realistic scan sort considerable research develop cache efficient graph algorithm   meyer survey cache efficient algorithm kumar schwabe  meyer virtually algorithm maintain upper bound shortest distance tentative acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest distance vertex source vertex vertex non decrease tentative distance vertex vertex tentative distance extract unvisited vertex priority queue vertex vertex extract unvisited insert finite tentative distance tentative distance update already resides addition mechanism vertex cache efficient implementation algorithm cache efficient priority queue decrease operation model summarize caption cache aware kumar schwabe develop cache efficient version dijkstra algorithm undirected graph cache aware tournament priority queue perform extra auxiliary priority queue handle vertex cache aware tournament kumar schwabe sequence delete delete min decrease operation transfer algorithm incur cache phase approach implement priority queue decrease indirectly undirected algorithm kumar schwabe algorithm vertex cache meyer  another cache aware undirected algorithm graph  incurs mst cache mst sort algorithm hierarchical decomposition technique reduce random access adjacency tournament priority queue outperforms kumar schwabe algorithm graph survey article  mention cache complexity cache aware tournament phase approach BM transfer straightforward compute APSP cache efficiently simply  algorithm vertex graph knowledge sparse graph dense graph algorithm alberto  obtain efficient cache oblivious algorithm gaussian elimination paradigm GEP undirected graph non negative propose cache aware APSP algorithm performs logn transfer priority queue structure multi tournament bundling cache aware tournament structure reduces unstructured access adjacency expense increase priority queue operation algorithm implies cache complexity combine APSP imply algorithm kumar schwabe ideal cache model cache oblivious algorithm disadvantage model algorithm crucially knowledge parameter memory hierarchy adapt parameter remove inflexibility introduce ideal cache model model consists memory hierarchy acm transaction algorithm vol article publication date january chowdhury ramachandran algorithm analyze without parameter algorithm description model assumes optimal offline cache replacement policy assumes cache fetch memory cache chosen eviction access farthest future analysis algorithm model cache multilevel memory hierarchy memory model multi memory model another advantage model algorithm flexible portable however algorithm data structure model sometimes cache cache optimality cache oblivious priority queue introduce funnel heap introduce   insert delete min optimal cache cache assumption queue decrease external memory batch integer priority queue data structure propose meyer  specifically efficiently undirected graph bound explicitly mention meyer  data structure cache oblivious update delete  operation update operation hybrid decrease insert operation amortize cache complexity operation difference simultaneously priority queue cache complexity algorithm logw mst undirected graph vertex arbitrary mst cache complexity construct minimum span graph although bound priority queue buffer heap technique batch integer priority queue recent bound argument prof decrease operation expensive insert delete min operation specifically intermixed sequence insert delete min decreasekey operation incur loglog cache bound reduces loglog prior report chowdhury ramachandran nontrivial  priority queue decrease graph graph arbitrary brief overview cache oblivious buffer heap buffer heap bucket heap cache oblivious priority queue decrease operation buffer heap cache complexity cache aware tournament obtain cache oblivious algorithm undirected graph cache performance cache aware counterpart cache bound impressive sparse graph dramatic improvement moderately dense graph undirected graph ifm algorithm reduces acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest amortize cache complexity priority queue decrease model priority queue decrease delete delete min cache aware tournament cache oblivious buffer heap item queue cache cache cache complexity algorithm graph cache aware cache oblivious undirected BM sort mst BM cache aware model mst sort cache factor na√Øve graph obtain improvement APSP slim data structure article introduce notion slim data structure capture scenario limited portion cache available data data structure assume however execute individual operation data structure entire cache available computation analyze slim buffer heap slim data structure buffer heap performance slim tournament data structure addition oblivious cache parameter slim buffer heap oblivious slim cache limited portion cache allocate storage detailed discussion slim data structure slim buffer heap cache aware data structure multi buffer heap improve cache performance cache aware APSP algorithm undirected graph non negative ofm algorithm performs transfer addition undirected APSP algorithm mention cache oblivious algorithm compute APSP unweighted undirected graph sort internal memory algorithm acm transaction algorithm vol article publication date january chowdhury ramachandran amortize cache complexity slim priority queue decrease model slim priority queue decrease delete delete min cache aware slim tournament component multi tournament cache oblivious slim buffer heap item queue cache cache slim cache cache complexity APSP algorithm undirected graph cache aware unweighted undirected APSP cache sort extra MNB cache oblivious cache sort extra undirected APSP combine APSP imply kumar schwabe cache aware ratio graph cache aware unless mention otherwise cache cache complexity cache aware counterpart algorithm priority queue slim data structure algorithm compute diameter unweighted undirected graph cache bound cache oblivious algorithm arguably simpler cache aware algorithm bound compute diameter earlier cache efficient APSP sparse graph non negative beyond efficient implementation dijkstra algorithm source cache oblivious algorithm reduce cache factor technical overview buffer heap difference priority queue insert delete min operation   buffer heap decrease former away concentrate data structure latter identification tag decrease operation identity decrease identification tag usually totally universe internal memory  queue specifies index pointer decrease operation apply access directly update however cache efficient priority queue cannot afford access access incur cache hence mechanism apply decrease operation cache efficiently without directly access cache efficient priority queue delete min operation typically access non decrease acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest decrease operation requirement index complicates implementation cache efficient priority queue decrease buffer heap tradeoff requirement impose grain inside coarse grain buffer heap data structure batch integer priority queue data structure propose meyer  discus unlike buffer heap operation depends difference priority queue instead data structure multi hierarchical data structure significant difference hierarchy construct hierarchy batch integer priority queue depth hierarchy difference minimum maximum data structure location hierarchy depends extremal redistribution buffer heap hierarchy logarithmic data structure location specific depends redistribution ensure depth hierarchy remains logarithmic buffer heap periodically reconstruct entire data structure independent simultaneously propose data structure buffer heap bucket heap bucket heap priority queue operation buffer heap within asymptotic bound buffer heap undirected graph however article bound buffer heap operation treat slim data structure assumes limited portion cache available data data structure priority queue operation information slim data structure slim buffer heap improve cache performance cache aware APSP algorithm undirected graph non negative regular buffer heap cache obliviously graph preliminary version preliminary version buffer heap along cache oblivious undirected graph chowdhury ramachandran preliminary slim buffer heap chowdhury ramachandran cache oblivious unweighted APSP cache aware APSP undirected graph article combine notion slim buffer heap within analysis regular buffer heap detail proof data structure cache efficient shortest algorithm undirected graph APSP unweighted undirected graph algorithm cache efficient fundamental graph cache oblivious undirected APSP algorithm cache aware notion slim data structure independent application setting building preliminary appearance conference preliminary slim buffer heap cache oblivious unweighted APSP cache aware APSP acm transaction algorithm vol article publication date january chowdhury ramachandran efficient betweenness centrality BC algorithm unweighted graph algorithm BC undirected unweighted graph obtain modify unweighted APSP algorithm BC algorithm undirected graph slim buffer heap APSP algorithm latter algorithm compute diameter graph within asymptotic bound APSP diameter algorithm chowdhury ramachandran improves bound graph sparse conference buffer heap various implementation buffer heap dijkstra algorithm incorporate sequence undergraduate honor thesis implement buffer heap performance chowdhury ramachandran  clifford report bucket heap buffer heap operation magnitude faster standard binary heap operation ram limited data  ram organization article define slim data multi data structure  buffer heap slim data structure correctness implementation analyze cache complexity buffer heap obtain cache oblivious implementation dijkstra algorithm undirected graph respectively application buffer heap APSP undirected graph cache oblivious APSP algorithm unweighted undirected graph multi buffer heap improve cache aware APSP algorithm undirected graph finally conclude remark slim multi data  slim data structure data structure fix footprint cache cache footprint slim cache DS denote data structure DS portion slim cache assume behavior model namely cache data transfer cache memory data structural operation assume portion data structure slim cache memory access anything outside slim cache cache execute data structural operation operation cache temporary computation operation completes data slim cache preserve reuse operation data structure multi data structure environment instantiation data structure maintain multi data structure parameter maintains instantiation slim data structure slim cache pack per motivation multi data structure suppose hierarchical data structure buffer heap treelike data structure tournament access hierarchy leaf cache available data instantiation topmost cache efficiency closer data frequently access intuitively reduce acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest perform data structural operation application perform operation instantiation robin fashion machine cache cache instantiation operation perform transfer load cache topmost reduce load construct multi data structure instantiation pack data topmost instantiation cache transfer load topmost albeit instantiation amortize load reduces factor although data structural operation increase suitable reduces overall load operating access multi data structure multi tournament multi buffer heap article multi tournament multi data structure tournament kumar schwabe node multiple tournament packed cache memory analysis component tournament multi tournament decrease delete delete min operation amortize cache slim data structure multi tournament obtain cache efficient APSP algorithm undirected graph non negative article analyze slim buffer heap multi buffer heap multi data structure buffer heap improve APSP detail straightforward analysis multi tournament amortize cache complexity slim buffer heap operation increase bound achieve regular buffer heap unlike multi tournament node component tournament slim cache multi buffer heap slim buffer heap slim cache accommodate difference storage sophisticated analysis slim buffer heap decrease delete delete min operation amortize cache improves bound obtain slim tournament earlier built preliminary version obtain cache efficient algorithm betweenness centrality implement tournament obtain bound slim buffer heap another application slim data structure obtain improvement requirement compute diameter sparse undirected graph slim priority queue batch slim buffer heap batch slim data structure arise application typical application data structure access application frequently cache simultaneously cache efficiency limited portion cache dedicate data structure however operation data structure necessarily achieve improvement buffer heap tournament cache efficient undirected APSP data structure likely slim version access initial portion layout buffer heap tournament data structure scenario extract operation buffer repository BRT acm transaction algorithm vol article publication date january chowdhury ramachandran algorithm bottleneck inability bound undirected APSP buffer heap buffer heap cache oblivious priority queue hybrid insert decrease operation along delete delete min operation amortize cache item priority queue operation decrease operation insert queue already exist queue user apply operation data structure otherwise queue operation apply user replace operation operation combine insert decrease operation delete operation deletes queue exists delete min operation retrieves deletes minimum queue simplicity exposition assume data structure distinct traditional memory priority queue perform decrease delete operation directly access priority queue update delete due access arbitrary decrease delete operation cache priority queue deficient respect cache efficiency avoid access priority queue combine decrease insert operation operation cache efficient priority queue aware decrease operation cache aware tournament analyze slim data structure slim cache buffer heap operation amortize cache buffer heap however remains oblivious parameter external application data structure maintain slim cache impose restriction buffer heap restrict slim cache slim buffer heap denote  otherwise regular buffer heap buffer heap aware existence slim cache buffer heap slim regular exactly implementation difference analysis regular buffer heap slim buffer heap slim cache regular buffer heap cache complexity cache aware tournament cache aware counterpart operation slim version cache aware tournament component multi tournament introduce delete delete min decrease operation amortize cache restrict slim cache slim buffer heap improves cache complexity slim tournament cache oblivious structure buffer heap item consists consists buffer update  function decrease acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest buffer heap structure operation update augment timestamp insertion data structure invariant maintain invariant contains contains update invariant update applicable apply reside update applicable corresponds delete operation exists corresponds decrease operation explain update batch batch contiguous memory location invariant sort ascend update sort ascend timestamp buffer empty layout buffer stack SB occupy contiguous stack another directly buffer stack similarly update buffer another stack SU update update buffer occupy contiguous stack acm transaction algorithm vol article publication date january chowdhury ramachandran  another stack update sort timestamp array information buffer contains along update buffer heap operation delete delete min decrease operation implement decrease operation perform decrease function function insert augment timestamp processing defer delete min operation fix function restore invariant overflow update buffer structure delete operation perform delete function function exactly handle overflow buffer data structure internally generates applies operation sink operation fori sinki operation  specifically overflow violates invariant overflow sinki operation operation apply sinki operation disappear cannot sink operation sinki operation exist fix function function apply update parameter apply update function applies update empty update overflow sinki operation fix function function parameter overflow function apply update successive overflow apply update completes execution return buffer empty fix redistribute function function redistributes return fix shallowest buffer delete min function function executes delete min operation min function minimum data structure delete function delete min function function shallowest buffer non empty apply update  apply update fix function fix overflow update buffer along return fix distribute shallowest buffer redistribute operation reconstruct function function function reconstructs entire data structure periodically remembers structure immediately reconstruction operation perform data structure rebuilt apply update empty update buffer distribute remain shallowest objective function ensure structure within structure invariant maintain decrease reconstruction happens operation delete delete min operation increase operation decrease acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest function decrease insert decrease operation structure decrease already exist structure operation insertion insert operation augment timestamp maintain inv return fix fix fix restore invariant overflow redistribute redistribute shallowest buffer reconstruct reconstruct data structure periodically function delete insert delete operation structure deletes structure exists function decrease function delete min extract structure min delete delete data structure nonempty return function min return structure apply update apply update data structure become empty return minimum data structure nonempty fix restore invariant overflow redistribute redistribute content shallowest buffer minimum return correctness correctness buffer heap operation lemma buffer heap correctly decrease delete delete min operation proof decrease delete function correctly insert correspond decrease delete operation buffer heap delete min function correctly extract minimum buffer heap correctly apply relevant decrease delete operation maintain invariant acm transaction algorithm vol article publication date january chowdhury ramachandran function apply update applies update remain update apply update overflow sinki precondition invariant possibly empty postconditions invariant possibly empty merge empty empty content foreach scan simultaneously apply delete remove decrease sinki replace min exists scan sort update decrease apply delete decrease apply delete timestamp operation originate restore invariant violate sort remain sinki operation apply function fix fix overflow update buffer update buffer overflow invariant overflow content apply precondition invariant invariant empty postconditions invariant index loop execute empty content apply applicable update buffer empty apply update apply update empty merge remain acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest function redistribute distributes shallowest buffer maintain invariant precondition invariant empty integer data structure postconditions invariant update buffer remain unchanged integer maintain invariant function reconstruct reconstructs data structure data structure immediately reconstruction operation reconstruction initialization data structure apply update apply update merge remain redistribute redistribute content shallowest buffer correctness buffer heap operation described establish correctness apply update fix subroutine apply update function core buffer heap functionality apply update  apply update applies update  assumption invariant possibly invariant assume empty invariant update applicable reside function considers update applicable increase timestamp insert data structure apply update delete exists operation apply delete apply update irrespective delete operation delete without timestamp acm transaction algorithm vol article publication date january chowdhury ramachandran apply update ensures remain occurrence data structure insert operation earlier timestamps delete decrease decrease operation apply replace min apply update however insert apply update decrease operation cannot apply applicable buffer ensure apply appropriate buffer decrease operation apply delete operation timestamp occurrence insert decrease  operation earlier timestamps delete sinki replace min otherwise insert sinki operation update applicable buffer apply update update clearly apply update violates invariant however violate invariant update fix violation remain sinki operation overflow item sinki operation timestamp exist operation data structure cannot prevent operation insert function terminates invariant possibly invariant update discard fix function  overflow assumption apply update apply update  overflow apply update terminates data structure overflow update buffer invariant fori function temporary buffer content  empty return correctness fix directly correctness  redistribute function distributes shallowest buffer maintain invariant assume precondition empty integer empty buffer data structure accommodate empty invariant data structure invariant function terminates decrease delete function insert correspond decrease delete operation  augment timestamp treat data structure recent operation insertion violate invariant possibly invariant  overflow violation fix fix parameter return fix invariant return fix empty content possibly zero consecutive buffer cannot data structure acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest empty fix contributes fix leaf empty buffer shallowest distribute buffer without violate invariant redistribute function performs distribution reconstruct function reconstructs entire data structure periodically correctness decrease delete correctness fix redistribute reconstruct already argue correctness fix proof correctness redistribute reconstruct straightforward hence omit delete min delete min function min minimum entire data structure delete delete already argue correctness delete hence min invariant non empty apply update entire data structure min function observation apply update return apply update invariant possibly invariant  fix fix return fix along content distribute shallowest buffer redistribute correctness redistribution correctness redistribute argument correctness proof decrease delete invariant contains exactly empty therefore return min indeed cache complexity buffer heap slim data structure slim cache remain buffer reside external memory denote data structure  observation useful analysis observation sinki operation mapped unique decrease sinki operation exist longer exists cannot sinki operation delete operation proof operation sinki operation execution apply update execution apply update execution convenience sinki buffer apply update execute sinki operation sinki sinki currently  empty execution apply update execution apply update buffer execution  execution apply update associate decrease sinki operation  sinki operation arbitrary bijection sinki operation execution unique decrease sinki operation mapped sinki  operation operation sinki operation exist contains sinki operation operation decrease operation apply execution delete operation acm transaction algorithm vol article publication date january chowdhury ramachandran decrease operation hence decrease operation establishes sinki  trace operation  mapping described hence mapped decrease operation sink operation exist otherwise sink operation inu sink internal operation exist hence decrease operation apply apply update update buffer delete operation  delete operation empty hence delete operation execution unique delete operation associate sinki  sinki operation  associate distinct delete operation  establishes observation min operation execute sequence buffer heap operation loop terminates  min operation assume empty interval operation delete delete min operation execute proof terminate apply update nonempty distribute buffer min remains non empty redistribution redistribute terminate delete delete min operation execute nonempty leaf empty  update redistribute initiate  lemma implies merge  incurs amortize cache per operation crucial cache complexity buffer heap operation lemma empty receives batch update constant apply empty proof cannot batch update overflow lemma hence proof assume batch update execution apply update sort sequence apply update analysis transfer bound account additional apply update invoked buffer heap operation label analyze decrease delete operation invokes apply update  sort consist operation overflow fix recall analyze transfer  reside apply update apply update operation sinki operation  distinct operation operation sink operation hence   overflow hence empty acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest operation perform apply update apply instead min operation invoke apply update findmin apply update invoked nonempty empty min fix consist operation  overflow fix empty apply update arrives leaf empty proceed  empty remain nonempty nonempty apply update content fix leaf intact slightly however another terminates buffer heap operation execute operation  intervene operation operation operation empty intervene operation operation  overflow hence empty execution apply update reconstruct immediately empty empty operation bound constant lemma establish cache complexity operation slim buffer heap theorem theorem slim buffer heap slim cache  delete  decrease operation amortize cache structure proof operation decrease operation operation denote decrease delete delete min operation insert  construction reconstruction data structure  define potential max positive constant precise occurrence replace min dominate immediately precede potential function convenience define observation analysis operation update buffer operation access modify constant lemma access structure sequential scan operation contiguous memory location summation capture data acm transaction algorithm vol article publication date january chowdhury ramachandran ensure operation potential accumulate account extra cache access data outside slim cache potential gain due decrease operation roughly twice delete operation uneven distribution potential observation decrease operation apply successfully delete operation possibly generates additional sinki operation observation implication potential reconstruction data structure compute amortize buffer heap operation reconstruction amortize reconstruction reconstruct function reconstruction structure immediately reconstruction imply reconstruction operation buffer outside slim cache access cache occurs therefore buffer access access data outside slim cache incurs cache actual cache complexity apply update parameter reconstruct merge operation apply update perform cache imply lemma involve constant scan  incur cache perform cache linear selection algorithm buffer merge reconstruct cache therefore actual cache complexity reconstruct actual redistribute function reconstruct loop redistribute iterates iteration scan constant linear selection algorithm actual cache complexity reconstruction update buffer empty reconstruction potential amortize reconstruction negative appropriately constant decrease delete  potential perform decrease delete operation  potential perform operation insertion decrease operation increase unchanged potential due insertion decrease operation   max max insertion delete operation increase unchanged delete operation potential   buffer access decrease delete function cache occurs reconstruct function amortize already access loop fix execute actual apply update parameter fix acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest buffer merge fix cache therefore fix incurs cache fix return hence actual cache incur redistribute decrease delete redistribute assume linear selection algorithm therefore cache incur access data outside slim cache actual decrease delete operation apply update fix potential due movement update therefore potential compensate actual execute decreasekey delete amortize decrease delete operation access incurs cache amortize delete min delete min function min function delete function already amortize delete operation amortize  apply update min immediately apply update inside fix min analysis decrease delete operation hence apply update min assume analysis decreasekey delete actual cache complexity min apply update compute potential redistribute function distribute completely hence delete structure access therefore immediately apply update delete operation  hence potential due movement operation due apply update earlier fix overflow buffer apply update parameter overflow  operation therefore delete structure implies potential amortize min nonpositive appropriately constant therefore delete min operation incurs amortize cache corollary replace  corollary buffer heap delete delete min decrease operation amortize cache structure acm transaction algorithm vol article publication date january chowdhury ramachandran complexity internal memory complexity slim buffer heap operation independent slim cache lemma lemma slim buffer heap delete delete min decrease operation amortize structure proof proof potential function data structure define proof theorem proof theorem simpler hence omit additional priority queue operation straightforward augment slim buffer heap priority queue operation without performance bound operation implement perform delete operation immediately decrease operation delete operation simply delete operation generate decrease operation immediately application correctly delete operation deletes decrease operation  delete operation timestamp decrease cannot delete insert decrease hence correctly relative increase operation increase exists priority queue implement operation decrease operation instead however delete operation precede decrease update discover delete decrease operation apply cache efficient ALGORITHMS discus application buffer heap dijkstra algorithm cache oblivious algorithm undirected graph respectively algorithm regular buffer heap impose restriction slim cache addition cache efficient priority queue decrease operation  shortest computation dijkstra algorithm efficient mechanism vertex shortest distance source vertex already mechanism identify vertex reduce unstructured indexed access adjacency  meyer regard dijkstra algorithm vertex avoid recomputing shortest vertex future traditional implementation dijkstra algorithm vertex already incurs cache boolean flag vertex cache kumar schwabe cache aware implementation dijkstra algorithm undirected graph performs indirectly cache auxiliary priority queue detailed description algorithm  meyer briefly algorithm buffer acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest heap cache bound cache obliviously graph vertex cache efficiently cache oblivious BRT incurs logn logn cache function undirected kumar schwabe algorithm buffer heap undirected graph vertex vertex identify unique integer function source vertex function cache obliviously computes shortest distance vertex regular buffer heap item regular buffer heap item foreach decrease insert vertex distance min min shortest distance delete shortest distance foreach decrease relax decrease guard spurious update shortest distance already compute delete delete remove spurious vertex unstructured access refer dijkstra algorithm delete min operation return vertex algorithm access adjacency incur cache per vertex cache  ofv adjacency source cache inefficiency remains algorithm contrast cache aware APSP algorithm execute vertex reduces overhead sort  per adjacency appropriate vertex  instead access individually reduction overhead access adjacency achieve slim buffer heap priority queue cache oblivious undirected cache aware undirected algorithm kumar schwabe  replace primary auxiliary cache aware priority queue algorithm buffer heap primary priority queue perform standard operation shortest computation auxiliary priority queue spurious update perform explain unlike standard dijkstra algorithm internal memory cache efficiency kumar schwabe algorithm vertex already extract relax later acm transaction algorithm vol article publication date january chowdhury ramachandran decrease operation perform  kumar schwabe algorithm auxiliary priority queue potentially spurious entry remove cache efficiently extract vertex incorrect actual distance auxiliary priority queue treat instead vertex whenever vertex distance decreasekey operation perform entry guard  later cache oblivious algorithm kumar schwabe algorithm buffer heap function undirected cache complexity algorithm incurs cache priority queue operation performs addition incurs cache access adjacency cache complexity cache oblivious algorithm cache oblivious standard implementation dijkstra algorithm priority queue decrease priority queue vertex vertex shortest source vertex finalize estimate shortest iteration algorithm vertex extract delete min operation vertex provably suitable decrease operation perform improve cache oblivious implementation dijkstra algorithm algorithm function differs standard implementation improve cache efficiency difference regular buffer heap instead standard priority queue buffer heap effectively dijkstra algorithm cache efficient identify vertex currently address issue cache oblivious BRT described addition buffer heap BRT maintains operation insert extract insert operation insert BRT extract operation report deletes data structure  insert extract operation amortize cache respectively amortize cache respectively assume cache BRT along  priority queue without decrease implement cache oblivious depth correctness function basically implement dijkstra algorithm graph standard implementation initialization vertex maintain incoming outgo sort vertex loop BRT identify vertex iteration vertex extract thereby become insert BRT buffer repository breadth depth cache aware cache oblivious acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest iteration prior iteration currently vertex execute exactly vertex hence decrease operation apply vertex currently outside BRT simply implementation dijkstra algorithm regular buffer heap priority queue hence implementation function graph vertex vertex identify unique integer function source vertex function cache obliviously computes shortest distance vertex foreach vertex vertex sort item vertex regular buffer heap item BRT capable foreach decrease insert vertex distance delete min shortest distance extract vertex sort vertex foreach scan simultaneously decrease relax foreach insert cache complexity lemma cache complexity lemma source shortest graph compute cache obliviously cache buffer heap cache assumption proof generate item appropriately sort constant sort scan phase incur cache algorithm performs delete min decrease operation extract andm insert operation incur  respectively sort cache cache incur scan therefore overall cache complexity acm transaction algorithm vol article publication date january chowdhury ramachandran cache oblivious tournament chowdhury ramachandran cache oblivious tournament  operation delete delete min decrease buffer heap although  weaker bound buffer heap simpler data structure instead buffer heap algorithm achieve cache efficiency buffer heap cache efficient APSP ALGORITHMS discus cache efficient APSP algorithm undirected graph cache oblivious APSP algorithm unweighted undirected graph construct multi data structure slim buffer heap  heap MBH cache efficient computation APSP undirected graph non negative latter algorithm cache aware cache oblivious APSP diameter unweighted undirected graph cache oblivious algorithm compute shortest diameter unweighted undirected graph algorithm    bfs algorithm subroutine   cache oblivious bfs algorithm unweighted undirected graph source vertex   algorithm computes bfs vertex respect denote vertex bfs vertex adjacent vertex assume empty algorithm arrow incrementally computes assume already compute function implement algorithm sum cache incur algorithm obtain sort sort sort sort cache complexity algorithm reduces sort algorithm cache oblivious APSP unweighted undirected graph cache oblivious APSP algorithm unweighted undirected graph incurs sort cache unweighted undirected graph denote shortest distance algorithm observation inequality undirected graph observation vertex suppose already compute sort adjacency non decrease denote portion sort adjacency vertex another vertex observation implies adjacency vertex reside therefore compute MR bfs source vertexv MR bfs instead construct independent access adjacency construct simultaneously scan max min algorithm incremental bfs function acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest function MR bfs   cache oblivious bfs algorithm unweighted undirected graph vertex source vertex  obliviously computes bfs vertex vertex bfs iteration loop construct concatenate adjacency vertex vertex multiset vertex adjacent remove duplicate sort vertex index scan construct scan simultaneously construct scan append update sort vertex index scan return function incremental bfs unweighted undirected graph vertex vertex algorithm computes assume adjacency adj denote adjacency sort adj precedes adj sort adj compute MR bfs MR bfs replace max min scan parallel append adj adj return incremental bfs incurs sort cache scan therefore cache incur sort vertex exactly exactly cache complexity reduces sort overall cache complexity incremental bfs acm transaction algorithm vol article publication date january chowdhury ramachandran function AP bfs unweighted undirected graph vertex function cache obliviously computes shortest distance vertex perform initialization span ET euler tour occurrence vertex ET marked vertex ET MR bfs incremental bfs return incremental bfs actually implementation   algorithm correctness correctness algorithm observation guarantee adjacency incremental bfs scan incremental bfs perform bfs cache efficiently observation trivially span euler tour shortest central extension observation ET euler tour span unweighted undirected graph vertex ET upper bound ET vertex ET extension outline function AP bfs construct euler tour ET span input graph occurrence vertex ET marked vertex ET algorithm MR bfs compute incremental bfs compute compute previous correctness correctness AP bfs correctness MR bfs  moreover observation ensures bfs perform complexity algorithm output pairwise distance cache complexity AP bfs perform cache obliviously min sort sort sort cache respectively incurs sort cache cache incur sort sort respectively observation cache complexity consequently entire algorithm reduces sort acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest cache oblivious unweighted diameter undirected graph AP bfs algorithm unweighted diameter undirected graph cache obliviously sort cache longer output pairwise distance iteration AP bfs distance compute previous iteration requirement addition handle adjacency cache aware APSP undirected graph cache efficient APSP algorithm undirected graph non negative algorithm multi buffer heap improve cache performance multi buffer heap recall multi data structure obtain pack multiple instantiation slim version data structure APSP algorithm multi version slim buffer heap multi buffer heap MBH multi buffer heap construct pack slim cache slim buffer heap  cache multi slim cache structure multi buffer heap analysis structure delete delete min decrease operation component slim buffer heap amortize cache slim buffer heap access APSP undirected graph compute APSP approach described solves APSP underlie simultaneously individual kumar schwabe algorithm undirected graph function pseudocode allocate slim buffer heap  ith belongs ith slim buffer heap packed multi buffer heap MBH  MQ slim buffer heap slim cache slim buffer heap MBH occupy cache accommodate ith slim buffer heap belongs  MQ algorithm proceeds load multi slim cache MBH MBH extract vertex minimum distance  sort extract vertex vertex index scan sort vertex sort sequence adjacency simultaneously retrieve adjacency vertex cache efficiently another sort phase adjacency apply MBH decrease operation perform cycling MBH algorithm extract vertex along compute distance sort distance matrix cache complexity pack slim cache multi slim cache occupy exactly cache hence multi slim cache multi buffer heap load cache cache access adjacency incurs sort cache cache incur priority queue operation perform algorithm distance matrix sort sort cache cache complexity algorithm sort fix complexity minimize acm transaction algorithm vol article publication date january chowdhury ramachandran function undirected APSP undirected graph vertexset vertex identify  integer  function compute shortest distance sort nondecreasing vertex vertex slim buffer heap multi buffer heap multi buffer heap  MQ accommodate slim buffer heap slim buffer  item slim buffer     MQ MQ decrease insert vertex distance assume whenever access multi buffer heap  load  already similarly MQ stack compute pairwise shortest finite distance stack information vertex stack information relaxed min min shortest distance delete shortest distance shortest distance already compute delete delete remove spurious vertex sort nondecreasing entry entry pop foreach sort nondecreasing entry tuples pop decrease relax decrease guard spurious update sort nondecreasing entry tuples pop acm transaction algorithm vol article publication date january cache oblivious buffer heap shortest logn reduces conjunction cache efficient APSP algorithm sufficiently dense graph imply kumar schwabe obtain corollary lemma APSP undirected graph non negative logn cache cache reduces logn otherwise conclusion article buffer heap cache oblivious priority queue decrease operation obtain cache oblivious algorithm undirected graph improve cache aware APSP algorithm undirected graph cache oblivious cache complexity cache aware counterpart however remain trivial bound cache complexity priority queue operation amortize derive sort bound recently intermixed sequence insert delete min decrease operation incur loglog cache reduces loglog cache oblivious buffer heap improves upper bound trivial amortize gap upper bound bound moreover gap exists cache aware fundamentally technique gap cache bound sort algorithm improve upper bound reasonably dense graph optimal cache complexity cache oblivious undirected algorithm unstructured access adjacency progress reduce overhead bound bound logn cache complexity cache oblivious algorithm overhead vertex develop technique overcome bottleneck cache complexity undirected APSP algorithm described arises unstructured access adjacency rid completely unweighted undirected graph achieve graph remains APSP compute efficient cache oblivious algorithm graph dense logn however sparse graph cache oblivious algorithm source undirected APSP overall cache performance instance cache efficient algorithm improve slim data structure strategy compute APSP algorithm acm transaction algorithm vol article publication date january chowdhury ramachandran indeed BRT data structure algorithm efficient slim version invocation extract operation scan entire possibly leaf obtain improve cache bound APSP alternative BRT amenable slim version