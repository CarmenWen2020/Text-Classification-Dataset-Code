succinct data structure flourish compress array   FM index   generalization application index burrow wheeler transform bwt developed amount input largescale application construction index usage computation genome building index concatenation detect substructure query index efficient index analysis core primitive data intensive throughput dna sequence report advance index analysis bwt built deterministic deterministic linear achieve exploit partial rank data structure query constant independent within budget index bwt allows enumerate internal node fundamental analysis maximal maximal unique kernel mapped enumeration deterministic input tailor enumeration algorithm specific computation exist index bwt compress array compress bidirectional bwt index randomize previously construction algorithm bwt compress array compress structure logϵ positive constant alternatively bwt previously built linear willing  logσ contrary bidirectional bwt index operation constant per output CCS concept theory computation data compression sort mathematics compute combinatorial algorithm information data structure apply compute molecular sequence analysis introduction fundamental text index data structure processing array another widely popular data structure text index although versatile usage bound constant specifically alphabet occupies logn array exactly logn decade witness compress version array contrast version occupy shave logσ factor becomes constant text encode exactly operation implement algorithm data structure implement compress henceforth denote cst price slowdown logϵ operation building cst however suffers slowdown restrict amount constant factor away cst precisely cst built deterministic logϵ constant ando alternatively deterministic logn employ linear deterministic construction algorithm compress representation built deterministic logn logn combine reference reference compress version array denote CSA suffer slowdown construction compress built  alternatively deterministic logσ article CSA built deterministic cst built randomize randomization monotone minimal perfect hash function contrast built deterministic however hash building representation fundamental operation constant building representation randomize insists achieve deterministic linear construction bound operation roughly article max monotone minimal perfect hash function define constant operation enables operation predecessor bound achieve logw sophisticated predecessor data structure universe acm transaction algorithm vol article publication date march linear index analysis ingredient compress text index namely burrow wheeler transform bwt built deterministic optimal input encode allows  random access individual previously construction algorithm bwt previous algorithm achieve linear logσ otherwise encode logσ machine logn bwt built logσ polylog identical bwt optimal  compressible related bwt binary packed ino logn machine built ino logn ando logn packed alphabet logn  logσ becomes logn logn efficient construction quadratic algorithm additional logn logn algorithm  kth empirical entropy input reference contribution article derive independent technical applicability processing biological sequence analysis data structure access partial rank query constant related data structure positive integer access partial rank query constant query query constant access partial rank query lemma data structure built deterministic latter data structure enables index allows enumerate representation internal node overall ino additional lemma theorem index independent unidirectional bwt index enumeration algorithm easy implement parallelize apply multiple performs depth traversal link stack contains logn node enumeration algorithm performs however  traversal link described reference algorithm queue contains node node application per node kernel reference reference therein plug multi version unidirectional index recursive bwt construction algorithm reference index merge bwt version text bwt version circular rotation text theorem combine bwt data structure lemma immediately deterministic construction CSA theorem data structure positive integer access partial rank constant ino rank ino lemma algorithm overwrites input text output bwt access rank partial rank query define link define acm transaction algorithm vol article publication date march combine data structure bwt construction algorithm achieve deterministic construction succinct array bwt index theorem cst bidirectional bwt index data structure consist BWTS application throughput sequence independent consists randomize bidirectional bwt index operation constant per output theorem contrast per output exist bidirectional index operation randomization monotone minimal perfect hash function implement weiner link operation constant theorem finally employ constant bidirectional bwt index component cst permute lcp array define randomize logn lemma algorithm allows building statistic array define practical addition algorithm index construction fundamental primitive analysis comparison application genomics throughput sequence perform enumerate internal node regardless allows implement operation deterministic unidirectional index deterministic directly input fourth independent implement analysis procedure enumeration algorithm practical amount code invoked callback function enumeration procedure practical algorithm building bwt reverse bwt contrary reference algorithm array addition bwt article consists intermediate logical dependency summarize reading concurrently article partially building reference deterministic construction bwt CSA cst ino ando achieve deterministic batch rank query enable building permute lcp array deterministic reference detail deterministic algorithm building lcp array bwt propose recently DEFINITIONS PRELIMINARIES ram model index array denote mod function return return return temporary temporary memory input algorithm initialize specific possibly algorithm execution restore algorithm terminates maximum amount memory algorithm addition input output temporary temporary algorithm query define acm transaction algorithm vol article publication date march linear index analysis data structure rectangle algorithm described article arc dependency arc highlight derivation data structure construction algorithm randomize highlight algorithm static allocation strategy marked algorithm logarithmic stack technique described proof lemma marked algorithm easy implement marked dash arc data structure data structure component discard construction acm transaction algorithm vol article publication date march sequence compact alphabet assume logn alphabet already exist algorithm building data structure described article linear logn linear array construction algorithm reference choice logn become apparent assume separator belong specifically multiple distinct separator denote integer denote substring convention empty customary denote concatenation prefix rotation denote lexicographically  oft  rotation lexicographically identical happens interested rotation lexicographically distinct enforce terminate denote distinct necessarily prefix rotation rotation define notion maximal array prefix array typically define terminate highlight connection notion burrow wheeler transform define rotation correspondence ith rotation oft lexicographic ith lexicographic rotation substring maximal  andt thatt maximal rotation intuitively maximal respectively maximal cannot extend respectively without lose occurrence maximal  substring respectively maximal substring necessarily maximal max strongly maximal distinct maximal definition useful maximal strongly maximal strongly maximal subset maximal necessarily strongly maximal max described article extend effort burrow wheeler transform ofw obtain burrow wheeler transform ofw transform identical acm transaction algorithm vol article publication date march linear index analysis alphabet trie node label function define label exactly node distinct label node sort lexicographically accord label correspond correspondence distinct prefix prefix another correspondence leaf trie trie unary maximal sequence exactly collapse unary  concatenation label trie compact trie label obtain collapse unary trie node compact trie zero definition stt compact trie stt define rotation oft lexicographically identical correspondence leaf precisely leaf internal node branching internal node denote leaf leaf leaf subtree internal node respectively denote label nodev  depth  locus  forw stt correspondence internal node stt maximal moreover maximal enjoys prefix closure maximal prefix maximal induced subgraph assume generalize compact trie  label internal node  label internal node generalize however internal node generalize label internal node  rotation node generalize leaf subtree rotation node pure impure otherwise label internal node stt occurs occurs  otherwise node link label  generally label internal node stt enjoys closure  belongs acm transaction algorithm vol article publication date march define  leaf stt link leaf another leaf stt graph consists internal node stt link trie node stt trie link  link unary traverse link allows enumerate node extend maximal maximal exploit enumerate node neither link explicitly invert direction link yield explicit weiner link node label internal node stt extension internal node implicit weiner link internal node multiple outgo weiner link possibly explicit implicit weiner link distinct label construction described article explicit implicit weiner link observation link explicit weiner link implicit weiner link upper bound respectively proof internal node link explicit weiner link inverse link internal node implicit weiner link node implicit weiner link bound implicit weiner link remain implicit weiner link II internal node implicit weiner link label weiner link fromv internal  stt reverse label reverse mapped distinct stt injective mapping II implicit weiner link sum II weiner link implicit weiner link hence bound slightly involve argument upper bound implicit weiner link leaf link weiner link maximal coincides internal node link implicit explicit weiner link leaf link rank denote rankc occurrence denote selectc jth occurrence rankc selectc partialRank shorthand  data structure operation efficiently described recall bitvector rank query constant reference representation built rank data structure implement representation operation access without acm transaction algorithm vol article publication date march linear index analysis index sort rotation yield index binary definition array permutation iff rotation rank rotation lexicographic define rotation lexicographically identical denote maximal interval rotation prefixed correspondence node notion interchangeably prefix array prefix consecutive rotation array definition function return prefix rotation rotation int prefix array oft denote  define   permute prefix array denote  permutation    article obtain efficient index structure permutation induced array definition burrow wheeler transform denote BWTT permutation mod BWTT cannot uniquely define rotation lexicographically identical bwt obtain sort lexicographically printing precedes rotation feature bwt  BWTT reconstruct unique burrow wheeler transform indeed letv andw rotation oft lexicographically assume precede rotation lexicographically rotation bijection rotation precede rotation preserve relative rotation rotation assume corresponds kth occurrence rotation kth rotation belong compact interval contains rotation historical function project rotation rotation mod LF mapping define LF SA SA mod reconstruct bwt lexicographically rotation burrow wheeler transform assume  inc occurrence int strictly sum frequency acm transaction algorithm vol article publication date march rotation LF  function LF extend backward algorithm occurrence int  ino iteratively  interval corresponds   interval corresponds compute asi rankc rankc maximal backward corresponds explicit implicit weiner link stt compute backward dominate perform rank query typically inverse function LF historical define assume corresponds rotation satisfies compute perform bitvector zero built append zero append zero function return lexicographic rank rotation lexicographic rank rotation  BWTT combine bwt array index  literature definition bwt index data structure consists BWTT rank query integer array occurrence strictly lemma derives immediately function LF lemma bwt index algorithm output sequence SA SA SA per output logn perform function LF described counting query sample array extract LF mapping adjust sample rate tradeoff specifically sample satisfy sample consecutively array sample equivalent sample bitvector array sample otherwise combine LF mapping allows compute function LF sample logn logϵ asymptotically counting query implies extraction collection data structure succinct array reference succinct array extend index index succinct representation addition query arbitrary input allows access substring specify index completely replaces acm transaction algorithm vol article publication date march linear index analysis discard recall reconstruct BWTT apply function LF iteratively reconstruct arbitrary substring efficiently suffices sample specifically additional array    sample inverse array amount array sample interval  sample apply LF mapping retrieve bwt possibly operation array derive substring return  procedure succinct array index increase asymptotic complexity define succinct array definition succinct array data structure logn sample rate query return occurrence return substring return immediate consequence lemma lemma succinct array built bwt index logn perform function LF define additional index article compress array compress bidirectional bwt index building BLOCKS TECHNIQUES summarize operation correspond data structure algorithm repeatedly throughout article addition algorithm batch query lemma access rank partial rank query lemma building balance parenthesis representation lemma static memory allocation algorithm array iteratively append described article array built precomputed slightly modify version complexity restructure precompute array built allocate contiguous memory array built compute array inside finally strategy avoids memory fragmentation allows achieve bound algorithm article technique acm transaction algorithm vol article publication date march batch query analysis application compute maximal maximal resolve batch query issue distinct lemma describes query bwt data structure function LF lemma bwt data structure function LF occ integer occ transform correspond possibly alter ino occ ino occ logn perform function LF proof assume bitvector marked marked distinct building marked occ invert BWTT whenever BWTT correspond marked append temporary array translate occ translate reverse sort translate array finally perform linear simultaneous scan sort array replace correspond translate occ logn marked occ logn otherwise marked bitvector marked marked iff invert BWTT contains bwt marked binary binary occ perform occ binary occ logn marked occ logn spent binary logn occ occ sort array occ radix sort specifically interpret triple msb lsb msb function return significant logn lsb function return significant logn primary secondary belong sort translate occ occ logn occ logn occ sort array occ standard comparison sort occ logn logn data structure prefix sum query prefix sum data structure query array return extensively building index derives combine elia  cod bitvectors indexed operation constant lemma representation array integer sum  allows access entry logu data structure prefix sum query constant data structure access rank query algorithm building compress array bwt index succinct array deterministic linear acm transaction algorithm vol article publication date march linear index analysis algorithm rely partial rank rank data structure lemma derive detail conceptually split possibly specifically  denote substring SN substring purpose splitting consists translate global operation local operation access implement issue access construction largely overlap reference denote frequency denote frequency shorthand encode structure bitvector freq   bitvector  define  freq indeed  contains exactly bitvectors zero bitvectors rank operation specific  translate constant rank operation freq bitvector freq compute efficiently lemma vector freq built proof static allocation strategy described specifically compute scan incrementing correspond counter compute bitvector  allocate contiguous memory freq counter logn logn logn finally scan whenever append  whenever occurrence append zero  pointer  freq overall vector  indexed rank operation constant translate constant rank operation correspond operation focus rank operation inside purpose permutation function onto function choice permutation function   satisfies explicitly random access permutation constant permutation implicitly described lemma lemma permutation sequence data structure logn addition query integer data structure built acm transaction algorithm vol article publication date march query construction algorithm assume constant access proof permutation sequence collection  cycle indeed iterate version permutation operator belongs cycle positive integer decompose cycle linear iterate operator bitvector iteration marked cycle contains arc predefined threshold subdivide arc vertex associate pointer vertex precedes cycle  successively compute query vertex sequence query successful compute sequence return implement bitvector rank cycle combine lemma lemma equation obtain lemma alphabet data structure data structure access partialRank constant data structure positive integer access partialRank constant constant access partialRank neither data structure access partialRank proof addition data structure built lemma explicitly spending overall compute linear bitvector coincides unary encode satisfies rank query bitvector implement access constant allows implement  constant equation  query  combine implicit representation described lemma allows implement acm transaction algorithm vol article publication date march linear index analysis additional per complexity  exchange   explicitly individual rank query bitvectors  structure implement lemma necessarily concatenate individual bitvectors index rank query simulate operation individual bitvector operation bitvectors concatenation bwt index succinct array implementation rank partialRank operation efficiently predecessor query sort integer predecessor query return index integer integer input predecessor query implement efficiently data structure lemma sort sequence integer encode logu logu data structure takesO logu predecessor query ino logu data structure sequence integer query predecessor data structure described reference trie linear construction algorithm construction randomize data structure hash obtain deterministic linear construction replace hash deterministic implement rank query amount plug lemma partition scheme lemma lemma alphabet integer data structure logc positive integer access partialRank constant rank access partialRank ino constant rank ino data structure built construct longer access rank proof described lemma bitvectors  ranka contains indexed zero zero  precede bth compute  occurs logc inside binary zero  query convert zero inside  occurrence perform query occurs logc inside  sample strategy described reference specifically sample relative occurs inside logc occurrence zero  encode data structure described lemma sample relative acm transaction algorithm vol article publication date march universe data structure query data structure lemma index immediately precedes inside sample logc occurrence exactly logc zero inside jth finally immediately precedes inside binary logc consecutive described strategy logc data structure lemma logc data structure logc data structure built logc data structure consecutively memory encode prefix sum data structure described lemma prefix sum data structure overall logc built logn bitvector   built data structure lemma data structure rank query  query prefix sum data structure constant bitvectors overall complexity lemma achieve replace bitvectors  compress bitvector representation described reference constant rank query logc polylog lemma improve replace binary query data structure lemma  constant precompute lookup sort sequence integer polylog ino ino logu data structure logu combination precomputed lookup predecessor query access arbitrary sort sequence integer lookup built polynomial lemma alphabet data structure positive integer access partialRank constant rank access partialRank constant rank data structure built construct longer access rank proof proceed lemma data structure lemma sequence consecutive logc occurrence inside data structure logc predecessor query data structure replaces binary perform lemma perform query building data structure lemma data structure overall lookup acm transaction algorithm vol article publication date march linear index analysis built prefix sum data structure lemma allows constant access data structure lemma topology topology treeT node sequence balance parenthesis built opening parenthesis recur node closing parenthesis building index operation representation data structure lemma node rank node preorder traversal oft balance parenthesis representation oft encode data structure operation constant return  ith node return lca return ancestor node   return plus leaf preorder traversal oft respectively leaf belongs subtree  return ith leaf preorder traversal depth height return distance deepest descendant respectively ancestor return ancestor depth data structure built operation lemma implement preorder traversal described folklore lemma lemma node rank node preorder traversal assume representation operation  return identifier node  return identifier node return identifier node preorder traversal implement logn proof preorder traversal leaf exactly internal node exactly twice specifically node previous sibling previous sibling traversal sibling previous sibling otherwise traversal sibling ofv previous sibling sibling acm transaction algorithm vol article publication date march traversal encodes direction repeatedly traverse preorder surprisingly interested contraction induced subset node node  relationship node contract ancestor efficient algorithm building balance parenthesis representation lemma assume algorithm enumerates interval sas correspond internal node sts per interval balance parenthesis representation topology sts proof assume without loss generality logn associate counter parenthesis parenthesis implement counter array interval internal node sts increment interval enumerate scan synchronously parenthesis parenthesis parenthesis output naive implementation algorithm logn achieve static allocation strategy described specifically  possibly assign counter enumerate interval internal node incrementing counter increment counter maximum incrementing saturate correspond counter constant multiple allocate memory logn saturate saturate logn available saturate memory allocate saturate logn quantity grows faster logn non saturate assign memory counter inside specifically elia gamma cod counter exactly concatenate encoding counter memory  counter acm transaction algorithm vol article publication date march linear index analysis equation derives apply jensen inequality logarithm equation allocate non saturate choice tighter bound clarity concatenate memory prefix sum data structure return constant memory allocate lemma bitvector  saturate index rank query memory allocation enumerate interval internal node interval increment compute contains  saturate prefix sum data structure retrieve constant memory assign saturate increment counter corresponds directly otherwise access precomputed configuration interpret concatenation elia gamma cod counter configuration concatenation elia gamma cod counter  equation  logn constant logn  choice guarantee constant counter memory allocation phase algorithm iso finally guarantee grows faster logn memory allocate saturate precomputed linear array parenthesis handle array combine algorithm specific enumerate array interval node theorem index construction link node specifically operation  return identifier destination link node sts topology sts augment operation  BWTS lemma assume representation topology sts described lemma bwt indexed operation array implement function  node sts possibly leaf proof destination link interval node BWTS convert operation   topology correspond BWTS respectively alphabet ofw BWTS  BWTS BWTS  BWTS prefix correspond BWTS label node sts operation  topology sts convert identifier leaf sts compute operation lca leaf acm transaction algorithm vol article publication date march neither maximal substring algorithm lemma locus locus  sts unique shortest extension maximal locus  locus bidirectional bwt index definition operation  respectively  neither maximal substring respectively however maximal data structure monotone minimal perfect hash function monotone minimal perfect hash function denote mmphf function implies function return rank inside argument function return arbitrary implementation bidirectional bwt index compress weiner link efficient implementation  advantage lemma lemma sort sequence encode logu logu implementation mmphf logu evaluates constant built randomize logu proof technique significant bucketing specifically partition sequence consecutive  contains exactly logn possibly compute prefix significant suffices compute prefix constant  operation implement constant multiplication prefix logu logn logu implementation minimal perfect hash function onto logu randomize reference lcp index prefix belongs index relative inside formally lcp implementation logu lcp logu logn folklore distinct identifies uniquely implementation minimal perfect hash function inversion  index implementation logn logu built logn logu randomize logn  logn logn acm transaction algorithm vol article publication date march linear index analysis setup data structure return constant rank issue  lcp denotes substring binary representation logu mostly lemma inside construction partition universe lemma sort sequence encode logu implementation mmphf logb evaluates constant built randomize logb choice proof partition technique  partition interval significant logu logb identical belong contains implementation monotone minimal perfect hash function inside described lemma restrict significant logb implementation logb construct logb lemma prefix sum data structure encodes belongs compute prefix sum data structure compute belong finally return logu logb logu denotes substring binary representation logu construction lemma slight generalization described reference lemma mmphf implementation data structure minimum distinct query array integer function rmq return index min broken arbitrarily function minimum query rmq minimum query data structure efficient compute lemma assume representation array integer access data structure rmq integer constant without access representation data structure built assume array belong alphabet distinct inside subarray function rangeDistinct return tuples ranka ranka occurrence respectively frequency inside acm transaction algorithm vol article publication date march ranka ranka rangeDistinct query building enumerator rangeDistinct query implement rmq query specific array described lemma lemma  data structure rangeDistinct  ino occ logn temporary occ data structure built positive integer construct longer access rangeDistinct query proof return distinct suffices data structure  auxiliary array previous occurrence rmq leftmost occurrence rmq built  occ rmq query ando occ access stack occ logn bitvector achieve rmq recur subintervals bitvector distinct recursion already marked random access array simulated constant partialRank operation implement described lemma constant data structure lemma simulate access without rmq data structure lemma construction query output encode inverse permutation lemma report partial rank addition adapt construction data structure  auxiliary array occurrence interval rmq data structure vector char occurrence rmq data structure detect occurrence access char retrieve correspond char query finally compute ranka ranka partialRank data structure lemma data structure  memory data structure  temporary rangeDistinct query reduce involve argument partialRank access implement rangeDistinct operation  lemma detail approach technique weiner link lemma augment data structure rangeDistinct  ino occ logn temporary occ data structure built randomize proof sequence contains  increase encode bitvector fori elia gamma cod sequence apply jensen inequality twice compute allocate correspond memory static allocation strategy described additional bitvector  representation index  query acm transaction algorithm vol article publication date march linear index analysis implementation mmphf lemma positive integer specifically perform scan sequence decode inside building implementation mmphf inside  built discard sequence mmphf implementation construction assume logn additional finally proceed lemma compute ranka query mmphf data structure simulate random access query mmphf data structure  access operation  lemma internal representation representation input discard however lemma input representation query combine representation ofA allows constant access kth empirical entropy logσ  maximal  core construction algorithm capture requirement fundamental analysis application return information maximal substring sort sequence distinct substring sequence interval sequence distinct aiw prefix rotation sequence necessarily lexicographic sequence interval  specify maximal substring oft equivalently internal node stt enumerate extension aiw maximal substring return however specify extension return consists devise suitable representation  substring distinct prefix rotation oft  distinct prefix rotation prefix rotation maximal substring maximal substring suggests substring repr char char coincides concatenation acm transaction algorithm vol article publication date march interval extension ofw lexicographic  maximal array char repr respectively repr repr aiw precomputed lemma assume notation data structure rangeDistinct query BWTT array repr char substring compute sequence correspond sequence repr repr  occ logn temporary rangeDistinct operation per output occ distinct aiw prefix rotation proof leftExtensions vector input algorithm initialize zero nonempty vector vector leftExtensions necessarily lexicographic matrix input algorithm initialize zero correspond extension ofw increase iff aiw prefix rotation aiw aiw triplet identifies extension associate specifies interval aiw BWTT array gamma input algorithm initialize zero maintain distinct prefix rotation equivalently nonempty matrix gamma enumerate distinct inside interval BWTT char along correspond partial rank operation rangeDistinct recall rangeDistinct necessarily return lexicographic return rangeDistinct compute constant array partial rank increment counter gamma gamma char gamma gamma gamma transition zero increment leftExtensions leftExtensions leftExtensions necessarily sort lexicographically nonempty correspond matrix sort lexicographically correspond interval precisely interval aiw BWTT interval adjacent BWTT repr aiw gamma gamma gamma denotes append array restore matrix vector within claimed budget scan leftExtensions address matrix array gamma matrix acm transaction algorithm vol article publication date march linear index analysis lemma apply maximal substring arc implicit explicit weiner link dot destination implicit weiner link node stt interval BWTT prefixed prefixed  precede CW maximal weiner link label implicit conversely  CG andw  precede AW maximal weiner link label explicit iterate application lemma almost efficiently described lemma lemma data structure rangeDistinct query bwt array algorithm solves rangeDistinct operation per output proof notation assume induction repr char maximal  oft lemma compute repr aiw charsi firsti aiw maximal charsi equivalently gamma lemma repr aiw stack iteration pop representation stack stack becomes empty equivalent explicit weiner link equivalently reverse link node stt necessarily lexicographic algorithm stack initialize repr equivalent depth traversal link necessarily lexicographic weiner link label recall traversal  guarantee enumerate maximal substring triplet repr easily built array acm transaction algorithm vol article publication date march rangeDistinct query perform algorithm distinct node stt tuple output rangeDistinct query distinct explicit implicit weiner link observation algorithm algorithm performs depth traversal link depth stack bound maximal substring precisely pop stack depth stack bound quantity define necessarily maximal maximal precisely maximal substring depth stack bound quantity define unfortunately reduce depth logn iteration repr aiw aiw aiw technique already described reference interval necessarily stack contains logn link contains logn stack algorithm summarizes lemma pseudocode combine lemma rangeDistinct data structure lemma obtain theorem bwt logn logn positive integer proof lemma array logn rangeDistinct data structure lemma query linear output logn addition output building array BWTT building rangeDistinct data structure lemma takesO positive integer replace lemma theorem alternative construction lemma introduces randomization improve complexity efficient algorithm enumerate interval BWTT maximal substring immediate construction balance parenthesis representation stt derives plug theorem lemma extensively construct index theorem bwt balance parenthesis representation topology stt positive integer building bwt efficiently rely enumerate maximal substring concatenation recall maximal substring correspond internal node generalize apply lemma bwt bwt separately however substring array repr char   charsi distinct thatw  lexicographic interval charsi BWTT firsti firsti assume charsi firsti plus acm transaction algorithm vol article publication date march linear index analysis lexicographically  representation convert ino representation interval BWTT adapt approach lemma generalization described lemma   fori return information maximal substring sort sequence distinct substring sequence interval sequence distinct aiw prefix rotation sequence necessarily lexicographic sequence interval  lemma assume data structure rangeDistinct query bwt array algorithm solves mnt rangeDistinct operation per output proof presentation omit detail handle   algorithm lemma data structure distinct array gamma gamma  distinct matrix stack repr tuples array leftExtensions distinct extension prefix rotation necessarily lexicographic repr maximal  oft apply lemma  compute correspond repr prefix rotation  update   gammai accordingly array leftExtensions whenever algorithm assume actually assume stack repr char   charsi gammai firsti gammai gammai  equivalently iff gammai alternatively integer gammai  algorithm repr stack stack analogy lemma stack extension ofw maximizes gammai traversal link necessarily lexicographic weiner link label translate repr quantity recall node possibly leaf pure leaf subtree exactly impure otherwise acm transaction algorithm vol article publication date march lemma adapt traverse impure node generalize algorithm building bwt bwt lemma assume data structure rangeDistinct query bwt array algorithm bwt mnt rangeDistinct operation per output proof bwt partition disjoint interval correspond pure node minimal depth stt pure node impure stt link impure node impure node impure node subgraph  traverse iteratively explicit weiner link modify algorithm traverse impure internal node stt stack repr charsi firsti charsi gammai firsti gammai gammai iff internal node stt moreover integer gammai  assume enumerate impure internal node stt label repr charsi firsti merge linear sort array charsi assume charsi occurs charsi locus stt pure node minimal depth BWTT firsti firsti BWTT firsti firsti firsti charsi charsi maxj charsi firsti otherwise easily maintain merge charsi occurs charsi array locus stt impure enumerate already enumerate traversal algorithm article focus theorem extensively combine lemma rangeDistinct data structure lemma theorem bwt bwt positive integer finally terminate version lemma rotation theorem bwt bwt bwt ino proof rotation lexicographically distinct compact trie rotation define leaf trie corresponds distinct rotation rotation lexicographically identical rotation generalize compact trie contains rotation rotation define leaf trie corresponds distinct rotation traverse generalize compact trie acm transaction algorithm vol article publication date march linear index analysis BWTS BWTS described lemma lemma implement rangeDistinct data structure algorithm building repr repr prefix rotation input repr substring rangeDistinct query bwt array empty matrix empty array gamma leftExtensions pointer output matrix pointer array gamma leftExtensions described lemma char repr char BWTT rangeDistinct gamma leftExtensions gamma gamma gamma char gamma gamma building  wheeler transform burrow wheeler transform built construction plug theorem recursive algorithm described reference summarize completeness specifically partition convenience version multiple append occurrence pad integer multiple pad contains occurrence recall multiple append simplify notation denote interpret partition XB define alphabet alphabet XB correspond XB assume denote respectively function return respectively circular rotation specifically denote equivalently  rotate denote alphabet induced partition acm transaction algorithm vol article publication date march algorithm enumerate maximal substring lemma definition operator callback function callback highlight repr input describes implementation callback input bwt transform array array  distinct lexicographic array correspond interval BWTT rangeDistinct query BWTT implementation algorithm function  output repr maximal substring empty stack zero zero zero gamma zero leftExtensions zero repr  repr isempty repr pop  repr BWTT gamma leftExtensions callback repr BWTT gamma leftExtensions maximal extension stack leftExtensions gamma argmax gamma repr gamma gamma gamma repr repr gamma gamma gamma repr cleaning iteration leftExtensions gamma gamma acm transaction algorithm vol article publication date march linear index analysis algorithm enumerate maximal substring difference algorithm highlight iterate impure maximal substring suffices replace lemma lemma definition operator callback function callback input repr brevity occurs handle input bwt transform array array  distinct lexicographic array  correspond interval BWTT rangeDistinct query BWTT implementation algorithm function  output repr maximal substring empty stack zero zero zero gammai zero leftExtensions zero zero repr   repr isempty repr pop  repr BWTT gammai leftExtensions callback repr BWTT gammai leftExtensions maximal extension stack leftExtensions    argmax gammai repr gammai gammai gammai repr repr gammai gammai gammai repr cleaning iteration leftExtensions mod    acm transaction algorithm vol article publication date march algorithm building repr repr prefix rotation highlight difference algorithm input repr substring rangeDistinct query BWTT array empty matrix empty array gammai empty array leftExtensions bitvector pointer output matrix pointer array gammai leftExtensions described lemma charsi firsti repr charsi BWTT rangeDistinct firsti firsti leftExtensions mod leftExtensions gammai gammai gammai charsi gammai gammai XB XB surprising derive bwt bwt XB lemma bwt derive bwt XB observation exploit building bwt  XB odd coincide XB XB coincide reconstruct bwt XB merge bwt XB bwt theorem lemma assume constant bwt XB derive bwt XB bwt acm transaction algorithm vol article publication date march linear index analysis proof rotation XB respectively lexicographically distinct rotation XB lexicographically identical rotation theorem bwt XB inside algorithm theorem apply constant operator input BWTS bijection XB XB preserve lexicographic bwt XB coincides bwt XB operator lemma building bwt compute bwt XB requirement lemma rotation XB respectively lexicographically distinct rotation XB lexicographically identical rotation burrow wheeler transforms XB recursion bwt XB initial array construction algorithm described reference phase satisfy constraint strictly logn recall assume constant logn constraint satisfied choice logn constraint satisfied choice recursion  logn constant lemma machine assume logn building bwt bwt derive bwt extra asymptotic reference theorem bwt built building  building compress array compress array abbreviate CSA representation constant increase access logσ without loss generality suitably terminate define alphabet alphabet correspond consecutive  obtain consecutive acm transaction algorithm vol article publication date march CSA parameter consists array layer layer compose data structure access partialRank operation   array  define alphabet encode bitvector zero indexed query bitvector   multiple concreteness constant layer contains information function LF compute     rank  otherwise iteratively LF constant  iteration    rank  layer spent layer traverse layer logσ achieves claimed complexity assume without loss generality integer ensures integer lemma layer irrespective data structure counting occ occurrence perform CSA logn logσ consists perform binary array allows occurrence logn occ logσ alternatively query implement backward bwt index overall lemma CSA  logσ CSA variant built usingO combine setup data structure described theorem allows CSA efficiently theorem compress array bwt  CSA oft bitvectors  built invocation theorem invoke theorem combine theorem lemma data structure lemma yield immediately bwt index succinct array built deterministic linear theorem data structure bwt index positive integer implement operation LF constant operation index built succinct array logn positive integer implement operation operation operation substring index built CSA originally define function query acm transaction algorithm vol article publication date march linear index analysis building bwt index reduce complexity backward constant however augment representation topology stt described lemma additional operation recall identifier nodev stt rank ofv preorder traversal stt nodev stt operation  return zero prefix rotation return otherwise locus stt lemma describes  query efficiently lemma assume data structure access query bwt constant data structure rangeDistinct query BWTT constant per output data structure query BWTT assume representation topology stt described lemma data structure operation  node stt leaf data structure built randomize proof efficiently data structure described reference summarize completeness topology convert constant operation   vice versa operation  lca traverse stt preorder topology described lemma internal node stt rangeDistinct query compute distinct BWTT interval BWTT overall sequence return rangeDistinct query necessarily sort lexicographic label node stt link locus lemma destination link indeed vector sourcesc node stt leaf source implicit explicit weiner link label induced preorder traversal stt encode difference preorder rank consecutive node sourcesc elia delta gamma cod bitvector  explicit weiner link sourcesc recall weiner link leaf explicit bitvectors sourcesc  preorder traversal stt  index rank query indexed   observation vector sourcesc apply jensen inequality twice lemma static allocation strategy described specifically compute sourcesc  preliminary pas stt increment array preorder internal node weiner link label preprocessing logn allocate contiguous memory finally    stt leaf strictly implementation mmphf sourcesc technique described proof lemma discard sourcesc mmphf implementation built overall randomize acm transaction algorithm vol article publication date march integer logn logn built linear preorder traversal stt node stt weiner link label explicit implicit access  compute identifier  destination weiner link leaf compute rank  weiner link label belong sourcesc return valid pointer sourcesc pointer corresponds convert interval BWTT topology selectc BWTT output construction consists array  implementation operation  coincides backward BWTT lemma enables construction efficient bwt index constant LF theorem data structure randomize bwt index positive integer implement operation LF constant operation succinct array logn positive integer implement operation operation operation substring alternatively construction analogous data structure LF substring data structure described proof proof combine described earlier article summary mutual dependency theorem BWTT fromt lemma data structure access partialRank query BWTT discard BWTT array already implement function LF array sample  succinct array lemma data structure lemma query implement substring query function LF data structure query constant implement substring query function implement backward  operation internal node stt lemma rangeDistinct data structure BWTT access partialRank data structure built lemma rangeDistinct query inside algorithm enumerate bwt interval internal node stt described theorem algorithm balance parenthesis representation stt described theorem operation topology stt balance parenthesis representation stt lemma finally rangeDistinct data structure topology access partialRank query BWTT acm transaction algorithm vol article publication date march linear index analysis data structure  operation described lemma discard rangeDistinct data structure output construction consists data structure access partialRank BWTT  stt building bidirectional bwt index bwt index bidirectional adapt extension addition application throughput sequence reference index implement analysis algorithm intermediate building compress  alphabet bwt transforms built  built   function return interval BWTT oft prefixed  interval array contains symmetrically interval array oft contains  definition bidirectional bwt index data structure operation integer  oft  return substring BWTT contains distinct otherwise  return substring BWTT contains distinct otherwise  return distinct substring BWTT lexicographic  return distinct BWTT lexicographic  return  return  maximal return  andw maximal return operation   analogous standard backward BWTT BWTT interval bwt synchronize interval reverse bwt bidirectional bwt index operation countSmaller return occurrence BWTT node stt label explicit implicit weiner link leaf stt countSmaller BWTT construction lemma extend  countSmaller query described lemma assume data structure access query bwt constant data structure rangeDistinct query BWTT constant per output data structure query BWTT assume representation topology stt described acm transaction algorithm vol article publication date march lemma data structure operation  node stt leaf operation countSmaller constant internal node stt label weiner link data structure built randomize proof algorithm described proof lemma specifically traverse stt preorder array sourcesc implementation mmphf sourcesc discard sourcesc prefix sum data structure lemma sourcesc jensen inequality observation data structure stc contraction stt induced node leaf explicit implicit weiner link label preorder traversal stt concatenate bitvector  parenthesis internal node weiner link label parenthesis  topology stc observation building bitvectors  correspond parenthesis explicit implicit weiner link stt  lemma obtain operation discard  strategy described  sourcesc   preliminary pas stt preorder rank stc node denote idc array sourcesc idc descendant stc contiguous allocate empty array  algorithm information  idc countSmaller countSmaller  encode difference bwt interval node stt mapped sourcesc bwt interval descendant contract stc compute countSmaller internal node stt proceed implementation mmphf built sourcesc compute idc retrieve idc assume descendant stc operation   topology stc sum  compute sum constant encode  prefix sum data structure described lemma  prefix sum data structure observation jensen inequality  array scan sequence  node temporary vector  per node stt   label weiner link assume countSmaller query constant  traverse  preorder topology described lemma node   acm transaction algorithm vol article publication date march linear index analysis prefix sum data structure  compute internal node stt access  compute occurrence operation  compute occurrence constant operation countSmaller  access topology  finally sum sum append  elia delta gamma cod finally  access node stt constant weiner link algorithm output construction consists topology    lemma implementation prefix sum data structure  lemma immediately yield theorem   ino bidirectional bwt index implement operation linear output proof substring BWTT BWTT node stt BWTT node stt BWTT plug countSmaller lemma construction bwt index described theorem correspond data structure BWTT BWTT operation  implement compute  countSmaller countSmaller  bitvector BWTT BWTT vector linear scan BWTT index rank query constant implement  rank rank technique already described reference assume maximal  compute BWTT operation  described lemma operation  maximal otherwise label internal node stt node implement   return otherwise BWTT recall operation rangeDistinct BWTT return distinct BWTT sequence necessarily sort lexicographically precisely distinct extension   maximal label associate stt mmphf rank stt sort output rangeDistinct linear implementation internal node stt enumeration algorithm described theorem apply array char repr implementation mmphf described lemma char array distinct node stt mmphf implementation building acm transaction algorithm vol article publication date march randomize operation  combine  return interval addition distinct     symmetrically operation  respectively  complexity maximal respectively maximal maximal construction index constant countSmaller lemma combine enumeration algorithm lemma enables efficient building BWTT BWTT lemma lett BWTT indexed rangeDistinct query constant per output countSmaller query constant BWTT BWTT logn define proof lemma iterate maximal substring countSmaller query addition repr interval ofw BWTT described theorem BWTT BWTT recall maximal gamma lemma maximal weiner link label locus stt implicit BWTT matrix lemma maximal iteration correspond interval BWTT recursively BWTT suffices replace traversal strategy lemma logarithmic stack technique traversal lexicographic extension maximal substring depth traversal stack lemma become contrary algorithm described reference lemma addition BWTT bidirectional bwt index theorem enables application detail enumerate maximal substring additional advantage access extension lexicographic lemma bidirectional bwt index oft described theorem algorithm solves ino ino ando logn temporary sequence extension maximal lexicographic proof adapt lemma operation    bidirectional bwt index respect lemma derives representation   interval building permute lcp array bidirectional bwt index compute permute lcp array lemma bidirectional bwt index described theorem  logn acm transaction algorithm vol article publication date march linear index analysis proof scan invert BWTT constant BWTT corresponds assume PLCP interval PLCP BWTT BWTT maximal link internal node label internal node label operation  interval ofw BWTT BWTT respectively ifi PLCP link  PLCP PLCP PLCP bound issue  PLCP neither PLCP extension prefix BWTT otherwise increment PLCP issue  operation interval PLCP BWTT BWTT algorithm algorithm easily adapt compute distinguish statistic array bidirectional bwt index compute statistic array respect bidirectional bwt index building compress compress abbreviate cst index consists compress array topology reduce permute lcp array cst operation specifically operation involve topology constant node ancestor node remain operation instead access array operation augment cst data structure connects node label return error exists additional operation ancestor query define additional logn combine lemma theorem theorem component compress compress array topology permute lcp array randomize component overall application additional operation  return label node  return identifier node output undefined outgo label analogous  acm transaction algorithm vol article publication date march return outgo label  return locus prefix latter operation ancestor query operation  ino logϵ component compress  additional structure lemma randomize data structure allows compress operation  constant operation logϵ data structure proof data structure described reference array  node preorder array label sort label node preorder enumerate bwt interval  substring distinct extension theorem convert preorder identifier correspond node topology  prefix sum data structure lemma array  recall structure enumerate bwt interval maximal substring along  theorem label compute prefix sum data structure finally scan  label  respectively initialize iteratively monotone minimal perfect hash function label  lemma   ino built randomize output  checked logϵ compress array  operation assume finally data structure ancestor query built deterministic linear lemma compress data structure allows compress  query logϵ logn data structure proof depth node connects height internal node difference depth deepest leaf subtree depth data structure sample node node specifically sample node iff depth multiple height sample node associate non sample node sample node specifically sample node depth descendant sample assign node fromv deepest leaf descendant sample sample  depth assign non sample node perform sample operation balance parenthesis representation topology lemma specifically perform preorder traversal topology lemma compute depth height acm transaction algorithm vol article publication date march linear index analysis node operation depth height balance parenthesis representation sample append  temporary building logϵ logn traversal sequence balance parenthesis encodes topology subgraph induced sample node traverse sample node append parenthesis traverse sample node append parenthesis ancestor data structure  reference sample node assign node depth data structure lemma algorithm described reference  data structure built query logn finally deterministic identifier sample node logn built logn query constant  data structure output construction  omit detail brevity ancestor depth sample compute depth issue ancestor topology query sample replace ancestor depth necessarily sample depth return otherwise depth perform binary depth depth plus depth operation ancestor  otherwise query  data structure deepest sample ancestor depth perform binary depth depth ofu plus depth ofw operation ancestor  explore binary takesO logb ando logb logϵ query logn logϵ  data structure analysis enumerator maximal substring described theorem fundamental analysis optimal deterministic specifically efficiently implement function callback invoked algorithm compute statistic distinguish statistic define bidirectional bwt index statistic definition integer threshold statistic mst respect vector index prefix occurs definition integer threshold distinguish statistic DSS vector index shortest prefix occurs acm transaction algorithm vol article publication date march subscript DSS whenever context DSS additional DSS   definition sequence nonnegative integer sequence monotone specifically mst mst dst dst   allows vector encode correspond input statistic array distinguish statistic array built linear bidirectional bwt index theorem lemma bidirectional bwt index operation linear output dst logn proof proceed proof lemma scan assume assume DS DS occurs maximal substring compute DS link node corresponds operation  issue  operation   DS DS frequency extension lemma bidirectional bwt index concatenation operation linear output mst proof algorithm lemma scan frequency constant bitvector indexed rank operation iff lexicographic rank inside plug theorem lemma immediately theorem dst randomize ino mst  moreover algorithm achieve bound deterministic linear theorem dst mst proof simplicity compute mst array mst built linear bitvectors iff mst mst iff mst auxiliary bitvector initialize zero algorithm iterate maximal substring repr       iteration otherwise   enumerate distinct correspond interval BWTT described lemma prefix acm transaction algorithm vol article publication date march linear index analysis rotation interval BWTT invert BWTT lexicographic rank finally entire BWTT BWTS claimed complexity theorem maximal maximal unique maximal recall maximal  maximal occ occ distinct maximal encode occ occurrence theorem compute encode occ distinct maximal occ proof recall representation repr substring algorithm invokes function callback maximal substring inside function maximality positive append repr interval BWTT algorithm execution algorithm lemma obtain output uniquely identifies maximal BWTT theorem lemma data structure access partialRank query BWTT discard BWTT structure implement function LF lemma rangeDistinct data structure lemma finally described theorem implement lemma rangeDistinct data structure allocate related data structure lemma static allocation strategy described output lemma output translate radix sort maximal detect input overall specifically achieve overall combine bwt construction algorithm described reference maximal detection algorithm described reference ino theorem encode maximal contains maximal occurrence occ becomes occurrence maximal specifically bwt interval maximal  suffices inside interval bitvector marked assign unique identifier distinct maximal sort translate identifier return output bitvector marked replace bitvector marked described lemma encode maximal return correspond scan logn output logσ constant allows output overall logσ alternatively discard altogether maintain instead auxiliary stack traverse link lemma detect maximal output scan auxiliary stack logn recall leaf link maximal implies acm transaction algorithm vol article publication date march algorithm function callback maximal theorem algorithm input repr BWTT array matrix gamma leftExtensions counter lemma return append depth auxiliary stack maximal maximum auxiliary stack output  maximal substring another maximal  maximal occurrence inside occurrence another maximal reference proof theorem adapt detect   within bound detail reader maximal unique mum exactly exactly reference detect  andt suffice concatenation traverse internal node  maximal substring ofc maximal specifically internal node exactly leaf  leaf node associate respectively maximality checked access mod mod constant notion extends naturally maximal unique mum occurs exactly cannot extend without lose occurrence encode maximal unique occ triplet occurrence uniquely identifies maximal unique maximal concatenation adapt theorem theorem compute encode distinct maximal unique occ occ encode proof data structure theorem enumerate maximal algorithm whenever maximal exactly occurrence bitvector interval interval BWTT algorithm bwt interval maximal oft exactly occurrence disjoint index interval rank query constant allocate another bitvector document invert BWTT assume generic inversion BWTT belongs interval maximal occurrence rank interval odd interval belongs interval marked interval acm transaction algorithm vol article publication date march linear index analysis algorithm callback function maximal unique theorem algorithm input repr BWTT array matrix gamma leftExtensions counter lemma bitvector interval return interval interval algorithm callback function maximal unique theorem algorithm input repr BWTT array matrix gamma leftExtensions counter lemma bitvector interval integer interval interval return append compute rank query interval document identifier document contains finally scan bitvectors interval document synchronously interval marked interval document reset interval interval zero finally iterate maximal exactly occurrence algorithm maximal interval BWTT interval interval append theorem triplet uniquely identifies algorithm theorem maximal MEMs related maximal triplet maximal maximal reference encode maximal occ triplet maximal occurs detection algorithm generalize iterator algorithm theorem compute encode occ maximal ino occ ino proof recall algorithm rangeDistinct data structure built bwt rangeDistinct data structure built bwt iterate acm transaction algorithm vol article publication date march maximal substring algorithm function callback interval prefix rotation interval prefix rotation oft recall representation repr substring oft inside function callback suffices  occurs  array repr maximal algorithm succeed prefix rotation prefix rotation leftExtensions gamma gamma leftExtensions gamma gamma interval bwt oft interval  bwt building maximal overall linear input respectively distinct implicit weiner link generalize linear input observation lemma compute quadruplet overall linear input output quadruplet append triplet theorem algorithm building input data structure fromt andt overall ando combine theorem lemma finally translate described theorem allocate related data structure lemma static allocation strategy described output lemma output translate radix sort lemma subset compute proof assume without loss generality compatible compatible incompatible iteratively scan another compatible scan report compatible output scan output remove becomes empty remain incompatible    scan report output scan printing acm transaction algorithm vol article publication date march linear index analysis algorithm function callback maximal theorem algorithm operator lemma input repr BWTT array matrix gammai array leftExtensions counter char char return leftExtensions gamma gamma gamma gamma append report report theorem matrix array lemma access extension extension access extension approach compute minimal absent  minimal absent substring substring substring reference minimal absent suffices maximal  minimal absent enumerate maximal theorem recall minimal absent oft andw int repr enumerate vector leftExtensions enumerate finally matrix discard algorithm approach output encode distinct minimal absent triplet triplet encodes minimal absent operation algorithm output weiner link theorem observation apply theorem proof reader acm transaction algorithm vol article publication date march algorithm function callback minimal absent theorem algorithm input repr BWTT array matrix gamma leftExtensions counter lemma bitvector initialize zero return char char leftExtensions gamma char char append char char theorem compute encode occ minimal absent occ recall occ minimal absent detect linear input array reference reference therein kernel another analyze consists composition abundance distinct kernel function simultaneously convert composition vector indexed distinct computes similarity distance reference typically function possibly overlap occurrence  estimate empirical probability   focus compute cosine angle define specifically indexed distinct mers indexed distinct acm transaction algorithm vol article publication date march linear index analysis definition vector  mer   nonzero component mer kernel definition  infinite dimensional vector indexed distinct substring substring complexity nonzero component substring kernel substring complexity substring kernel without constraint compute generalize telescope technique sum node enumerate implement algorithm callback function algorithm theorem algorithm computes mer complexity integer substring complexity algorithm computes mer kernel integer substring kernel proof article sketch proof mer complexity reference telescope technique apply reference mer label node latter assume mer locus leaf initialize leaf correspond exclude algorithm enumerate internal node stt enumerate node proceed unaltered otherwise increment decrement stt char repr node stt depth locus mer algorithm algorithm leaf depth initialization enumeration conversely locus mer leaf claimed complexity theorem theorem kernel complexity implement algorithm reference detail iterators data structure built input deterministic linear kernel complexity compute input deterministic input