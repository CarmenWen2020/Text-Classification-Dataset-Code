evolves via link operation node another intermixed link operation nca operation return ancestor node exists article sequence nca link operation node online previously restrict link operation link extends leaf occurs edmonds algorithm maximum graph incorporate algorithm implementation edmonds algorithm achieves logn arguably optimum asymptotic bound vertex respectively data structure alternative implementation incremental merge algorithm gabow tarjan CCS concept theory computation data structure analysis graph algorithm analysis mathematics compute additional ancestor algorithm merge disjoint data structure introduction ancestor ncas data structure operation via arises leaf efficient implementation algorithm generalization application jumping article summarize algorithm dynamic ncas version recall ancestor node ancestor depth operation operation node link nca return ancestor return ancestor link online arbitrary sequence link nca operation initial node data structure propose various date offline algorithm aho hopcroft  ancestor static equivalently link precede ncas harel tarjan algorithm nca query preprocess algorithm achieve asymptotic bound simpler harel tarjan algorithm link nca operation intermixed argument link article remove restriction link ancestor link previous dynamic data structure performs operation logn achieve logn algorithm although dynamic advantage operation dynamic ncas arise edmonds algorithm graph algorithm notion blossom subgraph contract augment blossom contract trivial nca computation graph cheapest blossom contract edmonds algorithm efficient algorithm blossom contract necessitates nca query blossom furthermore query graph grows leaf progress precise operation node already node leaf leaf incremental ancestor online arbitrary sequence leaf operation intermixed nca operation empty precisely node artificial edmonds algorithm actually leaf nca operation algorithm solves logn achieves desire bound edmonds algorithm maximum logn refine nca algorithm timeO incremental algorithm becomes algorithm link data structure implement incremental merge algorithm gabow tarjan implementation asymptotic performance simpler primitive operation precomputed specifically  logical afford advantage conference version article cole  powerful algorithm incremental nca algorithm nca query operation amortize cole  achieve operation insertion internal node deletion bound optimal appropriate model computation survey previous acm transaction algorithm vol article publication date september data structure ancestor link node algorithm version approach model computation throughout article random access machine logn harel tarjan bound unlikely ancestor achieve pointer machine however achieve edmonds algorithm pointer machine article organize concludes terminology introduces generalization preorder solves incremental nca ino improves bound toO logn implementation edmonds algorithm logn reader interested application approach extend achieves linear incremental nca achieves nca link operation node detail appendix appendix compute logarithm appendix prof lemma dynamic allocation appendix algorithm incremental merge appendix prof ackermann function appendix extends algorithm ncas link node operation node advance terminology interval notation integer logn denotes logarithm assume ram machine truncate integer rational positive integer assume integer compute precompute precomputation generally fix rational logÎ² compute appendix terminology denotes vertex subtree subgraph denote node ancestor node ancestor indicates interpret expression ancestor descendant node ancestor denotes subtree descendant denote function define node context preorder dynamic TREES introduces dynamic preorder generalizes preorder algorithm ancestor advance extends algorithm incremental nca auxiliary compress review definition node descendant node descendant otherwise delete partition node nonnegative isolated node reorganize operation define bound amortize cole  reorganization piecemeal future operation operation constant acm transaction algorithm vol article publication date september gabow preorder interval vertex empty interval guard preorder vertex node depth node apex equivalently apex node generalize arbitrary partition disjoint nonnegative node depth node apex compress node node ancestor ofv apex  descendant inc andt consists compress denote extreme binary height binary node apex apex arbitrary compress height logn node node treeT compute  correspond node  compress harel tarjan compute  embed binary ncas calculate binary expansion inorder node   approach strategy simpler algorithm simplicity algorithm  extend algorithm closely related characteristic ancestor later discussion  define generalize compress constant integer inequality satisfied convenient choice letc equip function node satisfies function preorder node illustrate descendant node node definition necessarily eventually variant acm transaction algorithm vol article publication date september data structure ancestor link equivalent preorder definition allows guard interval overlap descend however algorithm maintain interval laminar without loss generality assume cne cne preorders construct function static variant dynamic  algorithm return  ancestor ancestor return return lemma  algorithm proof ancestor satisfies interval contains precede inequality lemma ancestor clearly assume amount ancestor  descendant equation inequality equation  descends implement algorithm compute ncas compress auxiliary nca node fix node nca ancestor immediately precede define characteristic ancestor triplet nca algorithm actually compute data structure vertex ancestor    ancestor ancestor exists entry core algorithm characteristic ancestor  algorithm computes node convert desire ancestor computes characteristic ancestor auxiliary node omit computation symmetric CAC refer entire algorithm compute entire tuple refer arbitrary preorder lemma CAC algorithm proof ancestor assignment inequality equation weaker definition  exists definition  ancestor satisfies equation  definition   satisfies equation acm transaction algorithm vol article publication date september gabow abbreviate CAC algorithm mention equation implies ancestor possibly clearly suppose equation  satisfies inequality  algorithm defines implies correctly correctly accord  algorithm remains analyze examine code correctly assume correctly assume correctly assume code algorithm clearly bound easily compute appendix node satisfy equation compress  ofc exists construct ino recursive procedure traverse node already assign interval assign interval cne leftmost interval interval partition interval execute procedure assign assign interval assign interval lemma algorithm valid  satisfy equation proof algorithm achieves preorder interval assign interval leaf interval isc assume interior node  denote relation equation consequence obtain implies interval assign account suffices equivalent inequality equation acm transaction algorithm vol article publication date september data structure ancestor link preorder construct ancestor node successive entry  traverse logn dominates entire algorithm important nca algorithm procedure due computes characteristic ancestor compress arbitrary suppose characteristic  seek characteristic ancestor  apex definition implies  ancestor denote ancestor shallower vertex procedure applies predecessor ancestor possibly ancestor clearly combine equation definition combine definition definition  previous  leaf displayed equation ancestor  leaf unique vertex  definition  combine algorithm nca query static summarize algorithm preprocessing computes compress numbered preorder addition node described earlier ancestor construct query algorithm computes characteristic ancestor CAC  lemma node preprocessed logn query preprocessing resource compute ancestor incremental extend leaf operation easy incremental data structure incorporate operation strategy data structure detailed algorithm finally correctly dynamic version compress maintain  compute detail maintain collection partition leaf leaf singleton algorithm maintain operation apex shallowest vertex  replace define   accordingly node reorganize   update  function  subtree  parameter specify later  static  acm transaction algorithm vol article publication date september gabow algorithm assign node interval currently expansion interval clearly assign interval  algorithm assign node interval update decrease expansion interval interval longer discard description parameter node denote denote  interval plus descendant gain reorganization maintain node data structure data structure maintains vertex apex pointer node algorithm detailed algorithm algorithm static leaf proceeds int singleton apex apex increase ancestor letv ancestor convention  compute  construct ancestor node  algorithm  assigns preorder finally parameter preorder precede strategy expansion interval precede parameter constant equation addition equation implies approach inequality achieve equation amount equation amount preorder satisfy define parameter algorithm ensure expansion interval precisely apex reorganize algorithm descendant  addition various  assign interval interval assign strict inequality account integer assign interval assign reorganize interval acm transaction algorithm vol article publication date september data structure ancestor link notation denote reorganize apex  various reorganize  apex lemma  reorganize reorganization interval assign proof equation implies interval assign strictly obviously interval assign strictly assume reorganize reorganize gain reorganize descendant descendant reorganization sum calculus maximize exactly node descends initial initial configuration maximize node descend maximize descendant descendant maximum inequality equation implies desire correctness proof lemma leaf algorithm proof verify equation function satisfies immediately reorganize inequality  reorganization descendant define preorder  static preorder algorithm nondecreasing data structure consists ancestor ordering  construct entirety    remains valid ancestor similarly apex vertex disjoint  data structure remains valid algorithm correctly data structure acm transaction algorithm vol article publication date september gabow lemma ancestor leaf operation logn proof operation leaf examine ancestor logn  node processing construct ancestor logn hence leaf operation logn algorithm  strategy implies logn  descendant reorganization logn descendant rate logn per node account  node node ancestor leaf proof  reorganizes ancestor  fromv ancestor equation implies  bound bound ancestor logn remain specify data structure linear lemma leaf operation advance application algorithm although implementation edmonds algorithm timing analysis applies verbatim ancestor necessitates storage management achieve lemma bound standard strategy lemma precise statement completeness lemma appendix application sec collection array entry operation enlarges entry increase content entry implement operation allocate array sequentially within array version becomes allocate version twice operation creates array lemma collection array grows array entry array maintain within array extra return lemma unknown usage consists ancestor associate vertex fort vertex vertex pred vertex pred predecessor update leaf operation  lemma manage vertex conclude lemma entirety advance extend algorithm operation addition leaf incremental reduces leaf operation extend characteristic ancestor operation arbitrary node nca denote ancestor  vertex define similarly terminology unchanged denotes characteristic ancestor acm transaction algorithm vol article publication date september data structure ancestor link similarly ancestor lemma compute function lemma node nca nca nca nca nca nca nca nca remark symmetry definition proof shallowest node nca nca nca wlog nca  nca nca ancestor deeper descends nca suppose nca nca nca ancestor ancestor nca descends contradict nca nca nca clearly suppose nca nca nca equality implies ancestor inequality implies ancestor nca nca  implement operation leaf data structure instead maintain pointer define operation operation implement lea algorithm implement directly without reduction observation compress perform plus apex construct transformation easily implement data structure corollary ancestor leaf operation logn corollary advance ncas edmonds algorithm algorithm ncas edmonds algorithm nca operation leaf logn extra completes efficient implementation algorithm reader interested beyond introduces multilevel approach wherein incremental algorithm derive version approach simplest edmonds algorithm elaborate version finally bitstring data structure apply appendix implementation incremental merge algorithm gabow tarjan acm transaction algorithm vol article publication date september gabow data structure ncas edmonds algorithm logn node nonfull generalization TL reduce node contract subtrees vertex incremental treeT refer operation leaf vertex vertex illustrate incremental enhance data structure version derive contraction deletion index multilevel structure illustrate TL minor edmonds algorithm edmonds algorithm define logn algorithm maintains partition vertex oft subtrees vertex subtrees subtree exactly vertex fromt discard nonfull subtrees contract node contract subtree node illustrates additional notation illustrate vertex  subtree subtrees maintain leaf subtree subtree otherwise  node node description guarantee acm transaction algorithm vol article publication date september data structure ancestor link ncas edmonds algorithm denotes node node contraction subtree denotes vertex vertex function node rely context identity argument incremental nca algorithm lemma clearly logn node spent logn data structure subtree marked pointer node pointer  pointer subtree node pointer pointer belong  algorithm nca operation nca operation subtree data structure leaf nca operation subtrees maintain representation ancestor bitstrings leaf operation assume remains logn edmonds algorithm data structure subtree detail data structure grows leaf operation logn node numbered sequentially node identifier array translates identifier correspond node specifies vertex identifier vertex ram anc logn ith anc correspond node ancestor reading significant ancestor decrease depth leaf maintain leaf implement anc anc precompute significant specifically bitstring logn msb index significant operation nca implement msb anc anc easy leaf nca data structure edmonds algorithm usage linear strategy lemma collection array subtrees gabow leaf incremental nca detail edmonds algorithm arrow notation corresponds arrow acm transaction algorithm vol article publication date september gabow theorem edmonds algorithm implement logn bitstring data structure vector nca accomplish precompute another significant specifically bitstring logn lsb index significant recall nca node nca lsb anc anc similarly multilevel incremental ALGORITHMS detail multilevel approach illustrate algorithm incremental nca nca query leaf operation algorithm construct nca algorithm multilevel structure unbounded framework organization incremental nca algorithm arbitrary unbounded vertex incremental refer operation leaf vertex vertex int multilevel algorithm designate incremental empty threshold TL derive deletion contraction compose node node algorithm maintains partition node subtrees subtrees algorithm incremental subtree multilevel algorithm described  algorithm incremental integral parameter subtree contains node equality nonfull exists discard nonfull subtree contract invariant nonfull subtrees frontier node nonfull subtree efficiency multilevel algorithm achieve shrinkage specifically node contains  vertex node  additional notation node  subtree denotes node contraction contraction subtree denotes node function node rely context identity argument reference parameter replace notion stage acm transaction algorithm vol article publication date september data structure ancestor link procedure   data structure node subtree subtree pointer  pointer subtree pointer routine incremental recursive routine performs leaf operation node node vertex graph operation leaf perform routine subtrees specifically node node subtree operation organize similarly recursive routine return characteristic ancestor node possibly invoke vertex graph operation nca perform routine return characteristic ancestor node belong subtree extend operation later ahead nca routine obvious modification link routine overall structure leaf recursive algorithm node singleton subtree nonfull execute suppose  become node node subcases subcase unique node singleton subtree subcase subtree execute leaf leaf algorithm preserve define leaf operation dominate subtrees singleton subtree routine strategy subtree nca routine desire characteristic ancestor various  contains etc detail  pseudocode handle acm transaction algorithm vol article publication date september gabow nonfull directly node assume nonfull replace similarly execute code return replacement similarly analysis algorithm leaf correctness define operation nca dominate routine extend routine extension corollary implement equation pointer node TL routine nca instead immediately modify lemma specifically  chooses nca accord lemma linear incremental logn incremental algorithm equation node corollary bitstring data structure compute characteristic ancestor vector described analysis linear strategy lemma nonfull subtrees completes incremental algorithm theorem incremental ancestor leaf operation corollary theorem leaf operation advance achieve equation define approach update instead simply interpret equation maximum integer ram ram timing estimate unchanged instance maintain array lemma link  extends multilevel data structure dynamic nca algorithm nca link operation node linear multilevel structure detail previous notion node subtree unchanged difference counterpart contract subtree subtrees delete notation define without nca operation implement routine link operation implement recursive routine analog link fold convenient extra argument  acm transaction algorithm vol article publication date september data structure ancestor link built link operation link operation link perform link algorithm motivation sketch simplest version algorithm algorithm link incremental link operation leaf operation transfer node arbitrarily discard incremental node transfer logn theorem logn analysis algorithm stage link stage vertex analysis vertex advance stage account spent leaf operation theorem spent ultimately grows node proportional node transfer efficient algorithm maintain explicit stage stage faster growth algorithm algorithm improve  previous classifies stage stage logn node stage logn node stage partition subtrees contains logn node subtree incremental data structure theorem contract subtrees correspond stage consistent terminology stage node subtree algorithm routine denote respectively executes applies stage link algorithm stage stage transfer node leaf operation discard data structure stage appropriate operation transfer stage combine logn node initialize stage subtree consist node discard data structure otherwise link algorithm dominate spent incremental subtree grows node leaf operation subtrees stage collectively logn node node transfer algorithm logn stage collectively node transfer logn algorithm logn strictly dominates algorithm bound clearly improve algorithm another stage logn node becomes fashion achieve sketch algorithm detailed version algorithm define acm transaction algorithm vol article publication date september gabow algorithm later convenient switch notation function exponentiation recall  function define algorithm stage stage node partition subtrees contains node remain essentially previous algorithm routine criterion otherwise unchanged detail stage similarly max combine node stage initialize otherwise node transfer precede otherwise algorithm link image link operation iso stage iso sketch proof subtree grows node leaf operation stage stage node contract subtree fix stage contains subtrees entire algorithm stage node transfer algorithm grown node advanced stage spent algorithm stage node stage conclude algorithm algorithm construction algorithm faster algorithm algorithm define ackermann function define inverse function min min definition slightly tarjan asymptotic estimate significant difference function constant rapidly function tarjan convenient treatment algorithm weak ackermann function inequality appendix acm transaction algorithm vol article publication date september data structure ancestor link preprocessing  relevant ackermann function fori define array ackermann logn logn ackermann ackermann allows logn equation  initialize allows desire ackermann function linear incremental data structure theorem data structure incremental preprocessing computes algorithm approach gabow splitting construct algorithm multilevel algorithm function algorithm node refer manipulate link corresponds node stage belongs unique stage define stage stage trivial algorithm invocation stage satisfy subtree stage subtree node node partition subtrees subtree contract contract trivial stage contract subtree subtree node node algorithm data structure subtree pointer node node stage  subtree subtree incremental recall theorem pointer update operation link nca operation node singleton link stage recall operation link invoke recursive algorithm argument link recursive algorithm otherwise recursively compute algorithm denote respectively entry combine combine treeT algorithm determines stage decomposition subtrees increase max execute applies return stage consist subtree initialize incremental traverse node leaf operation tor discard data structure stage consist node acm transaction algorithm vol article publication date september gabow link link subtrees subtree link link subtrees  subtrees subtree contains entire traverse leaf operation node incremental discard data structure traverse operation node incremental traverse leaf operation node discard data structure combine trivial algorithm illustrates link operation link executes link link  node incremental link executes executes stage stage node node subtree illustrate incremental pointer node arbitrary depth lemma algorithm link preserve define data structure acm transaction algorithm vol article publication date september data structure ancestor link proof sketch argument detail assume bookkeeping  update node incremental link denotes correspond define data structure pointer correctly TL induction combine furthermore contract subtree absorbed similarly implies vertex  image justifies argument recursive stage subtrees belongs stage equation incremental exists positive stage similarly  treeT combine correctly partition subtrees actually exists applies update combine algorithm trivial universe zero positive universe multi algorithm algorithm subtree contract node executes code lemma algorithm executes sequence link operation node proof query positive stage spent recursion universe zero link estimate link operation account initial computation plus recursion associate processing routine combine lemma leaf operation operation define operation operation recursive proportional theorem incremental grows node leaf operation discard data structure bound lemma suffices induction operation exclude operation recursive node previously stage node stage establishes induction bound fix stage recursive stage stage contribute acm transaction algorithm vol article publication date september gabow bound equation completes induction approach inductive assumption estimate node inductive bound overestimate discard entire data structure stage earlier instead approach maximal stage vertex subtrees inequality bound subtree inequality upper bound node inductive assumption sia inequality equation inequality equation stage sia bound per stage implies recursive completes induction node additional node node obviously bound leaf operation theorem incremental proportional allocate global array lemma equation implies desire bound remain issue bound algorithm definition lemma implies theorem sequence nca link operation universe node appendix extends setting advance multilevel apply achieve bound mention earlier gabow applies splitting arises expand edmonds algorithm technique  han  multilevel algorithm merge application gabow corollary independently  personal communication application static  introduce gabow  graphic matroids schedule matroid former useful various involve span acm transaction algorithm vol article publication date september data structure ancestor link APPENDICES computing  compute logÎ² integer cne fix rational positive integer fix integer logÎ² precompute logÎ² precomputation code  exit desire logÎ² desire respectively algorithm compute logÎ² integer cne unique integer satisfy  logÎ² logÎ²  desire successive  desire logÎ²  cne  implies  desire logarithmic equation logÎ²  corresponds entry  desire entry   truncate proof allocation lemma proof maintain invariant array furthermore amount version array entry allocate storage within allocate entry allocate copying content entry invariant preserve operation copying entry allocation incremental  incremental merge introduce gabow tarjan union achieves slight asymptotic improvement  algorithm reduce universe linear acm transaction algorithm vol article publication date september gabow variety application static merge implementation simplifies precomputed specifically gabow tarjan memory precomputation bitstrings correspond performs depth precomputed operation specifically significant logical incremental merge data structure maintains collection disjoint specify operation leaf node node singleton union merge return denotes grown leaf operation operation leaf  consist algorithm terminology subtree node data structure subtree bitstring data structure specify anc define maintain addition subtree bitstring logn ith node ith union perform bitstring initialize subtree irrelevant operation union implement union lazy fashion explain later vertex define anc easy ind msb denotes merge data structure node choice  algorithm union operation logn clarity operation int union  union merge maintain preserve invariant arbitrary node furthermore implies vertex operation implement nonfull loop vertex node union return msb acm transaction algorithm vol article publication date september data structure ancestor link easy invariant maintain algorithm invariant operation union  operation subtree data structure takesO logn union operation execution union nontrivial precede operation  union operation logn logn operation easy ignore union  plus execution execution logn account execution remain execution union logn earlier implies desire  ackermann function proof  trivial inequality induction inductive induct inductive inductive equation relation displayed earlier proof equation recall  however equation increase function equation equation induction inductive argument proof  inequality equation applies slightly involve calculation ncas   appendix extends dynamic nca algorithm setting advance precisely addition nca link operation operation node creates node singleton analog theorem corollary acm transaction algorithm vol article publication date september gabow convenient assume node involve link operation increase desire bound theorem link increase technique strategy difficulty overcome decrease withm bound operation decrease algorithm progress bound lemma predictable procedure algorithm repeatedly modify precise sequence operation parameter andm denote nca link operation algorithm execution  remains declare whenever   ncas conclusion algorithm precise algorithm execute nca link operation update operation execute operation otherwise reorganize entire data structure algorithm link incremental appropriate stage correspond node stage finally execute nca link operation procedure clearly handle link ncas correctly compute ackermann compute incremental stage incremental compute ackermann procedure achieves goal resource bound corollary essentially theorem corollary sequence nca link operation ncas link link neither advance proof bulk argument establishes bound processing define constant amount compute algorithm bound algorithm analysis denote nca link operation execute addition denote operation denote operation convention operation proof bound consists algorithm earlier acm transaction algorithm vol article publication date september data structure ancestor link entire algorithm bound corollary parameter define consideration parameter define proof lemma iso equivalent inequality definition possibility implies inequality equation quantity bound nca link implies algorithm account data structure  actually account account nca link nca link account increase  parameter corollary bound entire algorithm completely proof assume previous switch notation becomes parameter operation precede  denote account operation possibility account nca link certainly nca link account increase applies equation implies equation implies inequality assume acm transaction algorithm vol article publication date september gabow account nca link operation currently transfer operation permissible operation operation account finally lemma argument reuse bound