article algorithm solves sum logn improve previous logarithmic factor framework shave logarithmic factor apply median convolution matrix multiplication algebraic generalization sum obtains subquadratic sum computational geometry interior constant polygon intersection CCS concept theory computation analysis algorithm computational geometry additional sum convolution matrix multiplication computational geometry introduction sum article sum exists triple considerable attention algorithm researcher understand complexity fundamental conjecture cannot integer basis conditional bound numerous variety computational geometry data structure algorithm previous reference background surprising breakthrough grønlund pettie discover subquadratic algorithm sum decision complexity logn randomize logn logn algorithm deterministic logn algorithm standard ram model improvement subsequently report freund sharir independently logn logn deterministic algorithm latter eliminate logn factor decision complexity bound another dramatic breakthrough developed technique obtain optimal decision complexity linear decision upper bound sum technique implication uniform complexity sum although probably another logn logn algorithm article improvement complexity logarithmic factor deterministic logn algorithm ignore logn factor sum integer input randomize logn bound obtain via hash technique contrast besides algorithm deterministic variation closest predecessor successor development sum parallel combinatorial algorithm shortest APSP dense graph equivalently min matrix multiplication matrix slightly subquadratic algorithm grønlund pettie subsequent refinement freund sharir geometric subproblem dominance logarithmic dimension author logn APSP algorithm later author improve logn algorithm APSP geometric approach via cutting logarithmic dimension improvement approach reference analogy sum APSP algorithm hindsight immediately obvious author explains article grønlund pettie breakthrough technical challenge involve pack simulation sort network convolution matrix multiplication grønlund pettie subsequent author dominance sum actually resemble previous algorithm another related median convolution generally convolution  integer compute  necklace alignment distance improve logn logn bound logn similarly matrix multiplication logn aware prior matrix aij bij integer matrix kij compute cij    acm transaction algorithm vol article publication date november logarithmic factor speedup sum algebraic sum recently logn logn algorithm generalization sum refer algebraic sum function constant description complexity semi algebraic constant exists triple faster logn algorithm geometric sum importance sum stem sum seminal   computational geometry grønlund pettie breakthrough possibility slightly subquadratic algorithm exist geometric however geometric materialize contrast orthogonal vector computational geometry slightly subquadratic algorithm earlier algebraic sum algorithm standard geometric sum degenerate collinear triple fix algebraic curve 2D input intrinsically dimensional article adapt technique obtain logn algorithm genuinely dimensional intersection polygon polygon vertex intersection empty coverage polygon polygon vertex union polygon degeneracy chromatic consist disjoint exist meeting offline bichromatic intersection consist disjoint intersection inside furthermore obtain slightly logn logn algorithm related intersection polygon polygon vertex intersection empty coverage polygon polygon vertex union polygon vii offline reverse bichromatic intersection consist disjoint intersection output implicit representation precisely data sum unpublished http  workshop  pdf online query version recently briefly connection sum acm transaction algorithm vol article publication date november chan structure return intersection constant explicitly minimum maximum intersection sum moreover reduce reduce vii reduces intersection polygon nonempty triangulate polygon vertex intersection polygon inside polygon reduces complement reduces examine triple degenerate reduces vii intersection polygon nonempty triangulate complement polygon vertex intersection polygon complement polygon reduces complement polygon disconnect collection disjoint polygon bound remains subquadratic  polygon logδ summarize contribution recipe shave logarithmic factor host russian style algorithm logarithmic factor usually eliminate exception tend limited applicability identification sum computational geometry slightly subquadratic algorithm important qualitative contribution article precise logarithmic factor shave PRELIMINARIES denote denote ith assume ram model input pointer fix logn operation evaluate constant polynomial constant input sum algorithm comparison convenience assume model nonstandard operation  constant logn sufficiently constant nonstandard operation argument simulated lookup initial preprocessing mention pack later sequence logb sort sequence compute proof review described reference lemma roughly packed variant mergesort merge linear logb nonstandard operation reference lemma roughly sort split sublists replace sublist concatenate sublists finally sort acm transaction algorithm vol article publication date november logarithmic factor speedup sum sum denote multiset reduction batch selection formulate subproblems sum  query cij cij predecessor ofc cij batch selection query kij kij kth kij tsearch tselect complexity tsearch tselect logd reduces instance simultaneous binary rank ofc  cij sum clearly reduces lemma grønlund pettie approach reduction instance lemma sum tsearch logn proof sort sublists sublists cij iff satisfy monotone sequence nondecreasing coordinate nonincreasing linear scan ino cij generate  iso predecessor ofc maximum predecessor ofc cij instance query batch selection via cutting logarithmic dimension batch selection logm geometric approach author APSP algorithm computational geometry lemma hyperplanes disjoint hyperplanes furthermore generate PΔ  hyperplanes  proof review randomization algorithm random sample  hyperplanes canonical triangulation arrangement hyperplanes derandomization involve reference survey intersects interior relative interior  acm transaction algorithm vol article publication date november chan application hyperplanes orthogonal direction easy proof reference roughly hyperplanes quantiles direction arrangement hyperplanes batch selection theorem supersede later version theorem serf theorem version tselect logm logm sufficiently constant proof define define hyperplanes hyperplanes apply lemma obtain  PΔ   index handle query kij PΔ hyperplane   afford algorithm namely PΔ sort kij constant PΔ kij PΔ logd  choice PΔ logd hyperplane  sort sort PΔ hyperplane index kth index kth PΔ representative  PΔ sort  kij constant PΔ kij PΔ logd PΔ logd overall logd desire logm logm tsearch logd logm logm lemma immediately obtain sum algorithm logd logn logn simpler previous improve theorem factor pack technique improvement previous dominance instead cutting query kij compactly kij logd output kij kth index input output logd actually variant input output representation lower consecutive index fix acm transaction algorithm vol article publication date november logarithmic factor speedup sum mod kij input output representation becomes theorem refine version tselect logm logm sufficiently constant proof modify proof theorem define consecutive index handle query PΔ hyperplane  fix PΔ sort logd mod index kth PΔ PΔ PΔ logd  choice PΔ logd hyperplane  sort sort PΔ representative  PΔ  ino logd mod index kth  concatenate PΔ combine PΔ PΔ split output PΔ logd overall logd desire logm logm unfortunately theorem sufficient yield improvement sum lemma unless propose sophisticated pack trick around bottleneck batch comparison sort via pack fredman trick subroutine subproblem batch comparison query qij quadruple qij qij  complexity pack input logd output output qij qij vector representation theorem inspire reference theorem APSP algorithm han theorem  logd proof fredman trick trivial observation acm transaction algorithm vol article publication date november chan observation fredman subcubic decision APSP min matrix multiplication sort rank rank quadruple qij concatenate lexicographical concatenate similarly combine obtain output boolean correspond split qij logd factor bound replace logd easily logd apply algorithm subroutine enables  subproblem batch sort query  qij  sequence reorder sequence qij tsort complexity logd sufficiently constant sequence qij packed input output theorem tsort logo logd sufficiently constant proof simulate sort network sort sequence qij simultaneously recall sort network sort pre chosen ofO disjoint index perform exchange operation exchange operation index involves swap pre chosen index per independent input  sort network sort network sequence qij extract nonstandard operation sequence packed pre chosen index encode concatenate sequence  apply algorithm  comparison query split per per sequence sequence qij perform swap another operation sequence packed outcome comparison acm transaction algorithm vol article publication date november logarithmic factor speedup sum  logd overall factor  sort network algorithm sort qij extra attach qij extra everything via batch logm reduce batch selection lemma tsearch tselect tsort logo logd min proof assume cij afford algorithm compute logd cij  binary cij logd logd logd assume cij sort sublists sublists fix cij algorithm predecessor aip bjq aip bjq aip aip assumes handle symmetric algorithm algorithm pseudocode unique index aip bjqp aip binary predecessor ofc aip bjqp another binary rank oracle selection aip bjqp predecessor overall predecessor initialize aip aip bjqp return max aip bjqp algorithm simultaneously cij packed maintains  tuples variable algorithm cij  tuples logd implement sort tuples  aip batch sort subroutine tsort sort resolve comparison aip standard binary per pack binary logd however sort index aip bjqp batch selection acm transaction algorithm vol article publication date november chan algorithm tselect batch selection setup  input representation precisely ofw index instead mod tuple  mod thatc encode integer cij concatenation   sort split sublists   obtain concatenate  sort mod  choice choice extra entire algorithm iteration overall logd factor combine lemma theorem obtains tsearch logo logo assume logm logw logm lemma logn logw obtain corollary sum logn logo logn assume logn important optimize factor interested sum algorithm logn factor logn factor replace  sort network  sort network simpler randomization sort network probably avoid entirely approximate median instead sort convolution matrix multiplication apply matrix multiplication convolution denote tselect complexity batch selection variant replace reduction batch selection matrix multiplication convolution reduce batch selection lemma matrix multiplication tselect logd convolution tselect logd proof sort array algorithm kth logd algorithm proceed logd iteration iteration entry per array acm transaction algorithm vol article publication date november logarithmic factor speedup sum parallel detail important purpose sake completeness algorithm initialize negate reverse return algorithm maintains invariant kth remove remove remain symmetric negate reverse operation implicitly mostO logd iteration  linear selection algorithm indeed logd lemma ith sublists jth sublists compute cij  union denote rearrange sort algorithm kij simultaneously explicitly sort desire retrieve kth sort selection iteration instance batch selection instance per tselect per algorithm logd iteration overall logd factor sublists sublists compute cid kid union denotes reverse xip denote rearrange sort algorithm simultaneously iteration batch selection tselect per algorithm logd iteration overall logd factor compute output entry cid compute cid shift apply algorithm factor acm transaction algorithm vol article publication date november chan tselect tselect batch selection reduces batch selection mapping sufficiently mapping everything via adapt lemma batch batch selection lemma tselect tselect tsort logo logd min proof sublists sublists  denote aip  rearrange sort algorithm xij xij proof lemma simultaneously kij packed maintain  tuples tuples variable algorithm explicitly sort  desire retrieve kth sort selection aip  apply batch selection  tselect apply batch sort sort tuples  easy tsort batch sort detail packed manipulation analysis proof lemma tselect logo assume logm logw logm lemma logn logw obtains corollary median matrix multiplication logn logo logn median convolution logn logo logn assume logn algebraic sum generalize sum algorithm algebraic sum introduction define define batch replace instead predecessor cij define batch selection comparison sort replace tsearch tselect  tsort complexity reduction batch selection lemma algebraic sum tsearch logn proof proof lemma fix iso curve intersect grid grid curve intersect grid extra address curve completely grid without intersect boundary grid grid curve component acm transaction algorithm vol article publication date november logarithmic factor speedup sum batch selection via cutting logarithmic dimension adapt proof theorem replace hyperplanes hyper  apply version lemma generalize lemma remains  semi algebraic constant absolute constant proof subset tuple fix compute computational geometry constant dimension output overlay cutting intersection clearly arrangement semi algebraic complexity assume constant application explicit representation necessarily constant complexity assign dimensional location tuple obtains label theorem tselect logm logm sufficiently constant proof proof theorem analog theorem without pack already yield algorithm algebraic sum logn logn faster somewhat simpler algorithm adapt batch comparison sort via pack fredman trick theorem  proof adapt proof theorem consecutive index dimensional arrangement curve arrangement data structure logo location query logd index contains construct logd location query false arbitrary construct tuple qij concatenate qij concatenate recombine tuples split qij acm transaction algorithm vol article publication date november chan logd logd assume factor replace logd theorem tsort logo sufficiently constant proof proof theorem everything via lemma tsearch tselect tsort logo logd min proof proof lemma algorithm replace aip bjq curve boundary aip bjq algorithm boundary handle algorithm extra address curve completely grid arbitrary component curve unique aip bjq contains extra cij corollary algebraic sum logn logo logn assume logn offline  bichromatic  adapt sum algorithm geometric introduction suffices offline bichromatic intersection reduce simplicity assumes input nondegenerate intersect intersection coordinate degeneracy handle tedious modification algorithm apply perturbation technique concentrate endpoint boundary fix assume halfplanes replace bound halfplanes intersection outside sum intersection outside halfplanes without loss generality assume halfplanes halfplanes reduces instance assume vertical coordinate respectively denote  slope coordinate intersection formula  acm transaction algorithm vol article publication date november logarithmic factor speedup sum denote dual extension halfplane letc denote dual bound denote dual denote arrangement define intersection reduction batch selection replace   query cij halfplanes cij inside  cij batch selection query kij kij kth leftmost vertex kij sort query kij kij kth leftmost vertex kij tsearch tselect complexity respectively tsearch tselect logd simultaneous binary via via cij analogous standard slab planar location lemma offline halfplane bichromatic intersection tsearch logn proof adapt proof lemma sort endpoint sublists sublists recall respectively disjoint denote within denote within intersection intersection intersects intersection interior intersection  cij iff intersect along linear scan intersection instance query intersection suffices interior compute another linear scan intersection intersection dual equation refers dual refers equation iff dual dual acm transaction algorithm vol article publication date november chan batch selection via cutting logarithmic dimension theorem tselect logm logm sufficiently constant proof adapt proof theorem redefine redefine express polynomial generalize lemma applicable construct arrangement instead logd affect bound appropriate setting parameter due definition sort vertex sort vertex sort slope sort slope PΔ kth leftmost vertex kth leftmost vertex proof theorem logn logn algorithm already adapt batch comparison sort via pack fredman trick redefine batch comparison query qij tuples qij qij query qij tuples qij qij  complexity theorem  proof focus easy proceed proof theorem consecutive index acm transaction algorithm vol article publication date november logarithmic factor speedup sum dimensional arrangement arrangement data structure logo location query logd index contains construct logd location query false arbitrary construct tuple qij concatenate qij concatenate recombine tuples split qij logd logd assume factor replace logd redefine batch sort query qij qij qij sequence quadruple reorder sequence qij query qij qij qij sequence reorder sequence qij increase  complexity logd sufficiently constant input output sequence exclude packed theorem tsort logo sufficiently constant proof batch sort algorithm proceeds proof theorem batch comparison subroutine theorem effort simulate sort network sequence qij simultaneously network sequence qij pre chosen index acm transaction algorithm vol article publication date november chan iff statement false resolve comparison sort tuples via already sequence extract tuples sort operation sequence exclude packed pre chosen index encode resolve comparison standard binary sequence qij binary resolve comparison batch comparison theorem  logo logo another factor everything via lemma tsearch tselect tsort logo logd min proof adapt proof lemma cij afford algorithm compute arrangement location query cij cij logd logd assume cij sort endpoint sublists sublists  denote   within  denote bjq within fix cij intersection intersection aip bjq   intersects intersection aip bjq   interior algorithm intersection intersection aip  bjq  without loss generality assume aip  handle algorithm careful algorithm pseudocode  unique index aip  bjqp binary rank vertex aip bjqp binary finally rank ofc aip bjqp another binary intersection aip bjqp inside initialize aip acm transaction algorithm vol article publication date november logarithmic factor speedup sum leftmost vertex aip bjqp leftmost vertex aip bjqp simultaneously  cij packed implement contains aip aip contains  sort batch sort specifically resolve comparison standard binary implement apply batch selection namely obtain index leftmost vertex aip bjq sort vertex batch sort namely resolve comparison standard binary logd implement apply batch selection namely obtain index leftmost vertex aip bjq sort batch sort namely resolve comparison standard binary logd detail packed manipulation analysis intersection fix fix cij suffices  intersection  interior  vice versa easily compute index  index binary manner corollary offline halfplane bichromatic intersection logn logo logn assume logn reduction finally arbitrary disjoint necessarily arbitrary corollary offline bichromatic intersection logn logo logn assume logn proof construct triangular intersect conflict intersect generate subdivide acm transaction algorithm vol article publication date november chan vertical endpoint vertex triangulate clipped increase invoke corollary logn logo completely contains query standard multi structure logo yield offline reverse  bichromatic  adapt algorithm geometric vii introduction slightly suffices vii offline reverse bichromatic intersection reduce concentrate assume halfplanes replace bound halfplanes intersection sum halfplanes reduction batch selection tsearch report complexity variant replace report output cij encode logd sequence interval inside indeed interval assume sort output logd representation tselect report complexity variant replace output encode scheme tsearch report tselect report logd logd logd due output lemma offline reverse halfplane bichromatic intersection tsearch report logd logn proof proof lemma compute contains intersection define proof lemma refer counter define compute cij reporting variant recall cij fix cij afford algorithm compute arrangement ino location query forc ino logd cij inside arrangement cij equivalent counter subsequently compute brute cij cij logd logd fix cij counter bound pack compactly sort cij acm transaction algorithm vol article publication date november logarithmic factor speedup sum output cij split sublists sublist sort endpoint interval perform linear scan interval linear scan cij logd nonstandard operation precisely desire cij finally compute ofc contains intersection independent refer counter counter strictly inside generate compute examine halfplanes cij request actual intersection  constant sum counter counter overall minimum maximum minimum maximum counter counter without increase bound batch selection via cutting logarithmic dimension theorem tselect report logd logm logm sufficiently constant proof proof theorem sufficient simpler theorem instead theorem logd due output tsearch report logd logd logm logm logm lemma obtains corollary offline reverse halfplane bichromatic intersection logn logn improvement complicate algorithm incorporate currently achieve logn reduction corollary offline reverse bichromatic intersection logn logn proof reduction proof corollary additional counter completely request actual intersection additional counter sum additional counter query standard multi structure logo REMARKS analogy sum convolution suggests hindsight convolution ano logn logn algorithm sum closer convolution sum acm transaction algorithm vol article publication date november chan exist basically batch selection logn convolution sum reduces batch selection simultaneous binary extra logd logn factor convolution integer sum integer version sum reduces integer version convolution sum extra logarithmic factor overhead reduces integer version convolution simultaneous binary another logarithmic factor overhead geometric obtain truly subquadratic upper bound decision complexity subset instance  sufficiently constantε decision model manipulation logarithmic factor important concern cutting logarithmic dimension optimize exponent approach unclear recent technique applicable geometric location dimensional arrangement nonlinear whereas technique location arrangement hyperplanes integer coefficient technique application computational geometry currently technique limited geometric setting input disjoint arbitrary remains subquadratic algorithm degeneracy exist meeting equivalently duality degeneracy exist collinear sum computational geometry actually collinear triple remain unaffected technique unfortunately author combinatorial algorithm APSP min matrix multiplication ino logn building earlier combinatorial algorithm boolean matrix multiplication applicable sum matrix multiplication shave logarithmic factor williams breakthrough  algorithm APSP min matrix multiplication polynomial fail sum matrix multiplication obtain faster algorithm integer sum although truly subquadratic algorithm