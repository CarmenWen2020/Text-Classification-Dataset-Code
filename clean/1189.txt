hypergraph vertex nearly intersect intersects  vertex colorable vertex assign monochromatic colorability nearly intersect hypergraph drawn constant checked quasi polynomial keywords hypergraph hypergraph  algorithm quasi polynomial algorithm introduction hypergraph vertex hypergraph receives distinct theoretical computer discrete mathematics considerable attention NP already quasi NP colorable hypergraph properly positive polynomial algorithm colorable hypergraph vertex generalization vertex intrinsic difficulty hypergraphs easy exist approximation algorithm hypergraphs discrepancy rainbow colorable hypergraphs polynomial algorithm bound linear hypergraphs random uniform colorable hypergraphs graph hypergraphs intersects hypergraphs intersect nearly intersect polylogarithmic vertex contrast considers nearly disjoint hypergraphs intersection restriction actually highly non trivial equivalent monotone boolean duality cnf dnf formula monotone boolean function complexity duality outstanding reference complexity theory retrospective fredman  algorithm input evidence decision unlikely NP reduction boolean duality colorability essentially obtain construction reduces monotone boolean function cnf dual however almost algorithm boolean duality cannot directly duality hence  formulation due recursive subproblems involve duality algorithm aware directly colorability version yield weaker bound bound closely extend constant intersect hypergraphs colorability remark intersect hypergraph trivially colorable becomes non trivial easy intersect hypergraph colorable colorability becomes worth mention intersect hypergraphs hypergraph colorable colorable extends finally remarkable becomes NP notion colorability easily instance notion colorability intersect hypergraph vertex contains distinct notation hypergraph finite positive integer mapping assigns vertex admissible assignment vertex monochromatic denote assume without loss generality non negative integer hypergraph intersect hypergraph nearly intersect intersect interested hypergraph satisfy mapping declare exists  induced projection trace multi   non empty intersection define quasi polynomial nearly intersect hypergraphs constant theorem algorithm recursion depth corollary obtain parallel complexity pram model corollary parallel processor partial coloring vertex assign fully monochromatic partial hypergraph notation simply context extension obtain vertex monochromatic combine yield partial denotes hypergraph delete multi chromatic partial coloring denote partial assigns assume properly colorable assumption empty hypergraph properly colorable partial resp assignment obtain resp distinct vertex distinct resp vertex assignment partial straightforward proposition resp assignment resp algorithm inspire correspond algorithm monotone boolean duality generalization algorithm simpler exploit existence vertex non colorable instance admissible coloring vertex remove recurse substantially unfortunately vertex guarantee bound assume fix algorithm complicate considers scenario vertex none threshold vertex balance induces constant decomposition obtain quasi polynomial lemma existence vertex unless hypergraph easily colorable lemma intersect hypergraph mapping partial vertex proof minimum assume without loss generality random assign independently probability conditional expectation therefore assume proof vertex maximize implies consequently lemma hypergraph intersect hypergraph mapping partial vertex proof minimum implies satisfy arbitrarily assume therefore distinct index random assign independently probability satisfy conditional expectation therefore assume proof vertex maximize implies consequently algorithm algorithm algorithm terminates partial unassigned vertex conclude exists algorithm image KB image algorithm algorithm proceeds phase assign threshold algorithm phase otherwise proceeds phase II phase resp phase II algorithm vertex satisfy lemma resp lemma iterates feasible assignment monochromatic algorithm concludes obtain lemma resp lemma iteration becomes multi chromatic remove algorithm  update hypergraph none recursive yield feasible extension partial  vertex recursive phase II preform assignment hypergraphs sufficiently allows phase II hypergraphs threshold analyze algorithm volume subproblem input phase phase II recursion meaning hence algorithm manage completely vertex satisfy lemma lemma extension partial assignment exists lemma algorithm solves proof assume otherwise imply algorithm terminate assignment implies recursion algorithm resp subtree resp sub belonging phase resp phase II algorithm consists maximal sub leaf resp denote resp node resp subproblem volume resp phase resp phase II recursive algorithm obtain recurrence resp explain naturally assume resp monotonically increase resp simplicity avoid confusion denote hypergraphs volume non empty hypergraphs recursive respectively sake analysis without loss generality assume throughout algorithm terminate proof vertex chosen vertex respect receives non leaf node recurrence leaf depth recursion subtree node volume initial volume hence node bound proof location recursive initiate phase II remove hypergraph assignment recurrence correspond vertex chosen recursive satisfies lemma recursive initiate correspond  recursive delete delete yield wet consequently recurrence definition induction recurrence applies iteratively recurrence induction recurrence applies induction proof bound recurrence apply induction bound internal node maximal sub leaf lemma efficient algorithm algorithm previous moreover recursion depth algorithm recursion depth theorem speedup algorithm assign vertex vertex previous algorithm algorithm probe assignment lemma lemma assignment cannot hypergraph information gain failure useful restrict assignment algorithm probe strategy expensive satisfy balance lemma lemma ensure increase probe offset amount information gain hypergraph positive denote subset vertex balance respect proposition satisfies exists balance respect proof arbitrary vertex index existence guaranteed finally imply indeed balance superset lemma intersect hypergraph mapping partial vertex equivalently fix arbitrary extendable extendable extendable proof introduce monochromatic suppose extendable statement satisfied extension assigns vertex exactly assign vertex hence satisfied conversely trivially extension properly lemma intersect hypergraph mapping partial vertex equivalently fix arbitrarily extendable extendable extendable proof introduce monochromatic suppose extendable satisfied assigns vertex exactly assign vertex hence satisfied conversely trivially extension properly lemma intersect hypergraph mapping partial satisfy balance respect proof balance guaranteed proposition obtain append vertex vertex append vertex lemma intersect hypergraph mapping partial satisfy balance respect proof intersection satisfy otherwise implies cannot intersect outside balance respect respectively obtain proposition suppose obtain induced obtain append vertex vertex append vertex algorithm proceeds phase assign algorithm phase otherwise proceeds phase II phase resp phase II algorithm resp vertex resp iterates feasible assignment monochromatic lemma resp lemma guarantee existence balance respect resp respect resp lemma resp lemma reduces latter lemma resp none recursive yield feasible extension partial  vertex recursive phase II preform assignment hypergraphs sufficiently allows phase II hypergraphs prescribed threshold previous analyze algorithm volume subproblem phase phase II recursion extension partial subproblem volume unique positive equation hence constant algorithm lemma proof recursion algorithm resp subtree resp sub belonging phase resp phase II algorithm resp denote resp node resp subproblem volume resp phase resp phase II recursive algorithm obtain recurrence resp explain assume resp monotonically increase resp denote hypergraphs volume non empty hypergraphs recursive respectively proof location recursive initiate phase vertex consequently recurrence recursion exclude vertex lemma implies balance respect apply lemma reduces recursive hypergraph fix vertex recursive hypergraphs obtain fix satisfies hence remove moreover non empty intersection iteration loop vertex assign recurrence definition termination phase induction assume recurrence apply induction recurrence apply induction proof location recursive initiate phase II remove hypergraph assignment recurrence algorithm proceeds recurrence recurse hypergraph excludes hence vertex lemma implies balance respect apply lemma reduces recursive hypergraph fix vertex recursive hypergraphs obtain fix satisfies recurse hypergraph moreover non empty intersection iteration loop vertex assign recurrence hence definition induction recurrence applies iteratively recurrence induction recurrence applies induction proof bound recurrence identical replace replace essentially inductive proof finally recurrence apply induction bound bound lemma lemma depth recursion proof resp denote depth recursion subtree resp sub phase resp phase II volume subproblem resp correspond recurrence recurrence depth resp resp phase resp phase II recursive recurrence imply resp resp overall depth recursion remark insist recursion polylogarithmic depth algorithm simplify vertex analysis weaker recurrence obtain replace respectively assume parameter fix depth recursion linear