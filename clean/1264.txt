recursion theoretic characterization polynomial hierarchy hierarchy characterize composition recursion scheme identify recursion scheme polynomial hierarchy keywords implicit complexity recursion polynomial hierarchy introduction meyer  polynomial hierarchy polynomial analog arithmetical hierarchy boolean function predicate introduce non deterministic oracle turing machine hierarchy boolean function computable polynomial respectively polynomial deterministic turing machine union complexity boolean function computable polynomial non deterministic turing machine oracle boolean function function bus extends concept function extra denote function notation function computable polynomial deterministic turing machine oracle polynomial hierarchy function union polynomial hierarchy function hierarchy described  characterizes minimization scheme ben approach via monotonicity constraint characterization purely recursion theoretically neither minimization scheme monotonicity constraint define function algebra style  characterization function algebra characterization function inductive closure operator initial function concept frequently recursion theory namely obtain characterization complexity denote function algebra correspond respectively sigma recursion theoretic description definition closure computation closure algebra  scheme therefore define simultaneously interleave challenge identify composition recursion scheme appropriate strength define definition crucial interleave description identify recursion scheme polynomial hierarchy non sort background algebra generate  unary constructor respectively interpret finite binary function define algebra context considers destructor predecessor arity introduces arity conditional function algebra define recursion scheme recursion notation scheme recursion disjunctive recursion scheme return input otherwise input pointer information recursion scheme characterize  recursion scheme sort characterize NC algebra algebra generate arity respectively recursion scheme pointer restriction recursion scheme substitution  input sort input sort function notation introduce  function sort input tier tier respectively normal tier tier input semicolon definition function compose constructor destructor conditional projection function input tier integer define SC input sort composition restrict input sort composition SR input sort recursion notation disjunctive recursion tier pointer omit input  function return input otherwise recursion scheme designate function function disjunctive recursion scheme function fix moreover output function define disjunctive recursion simplicity instead context scheme understood boolean function scheme pointer tier pointer tier therefore cannot recurse pointer recursion input tier issue recursion pointer establish proof challenge however pointer tier crucial proposition hierarchy essential function definable definition remark exists respectively input sort function non sort function coincide satisfied exists exists goal establish theorem integer characterizes characterizes theorem statement algebra function boolean function characterizes boolean precise already function algebra  characterization rewrite proposition compiles concern relevant proposition characterizes polynomial exists exist polynomial exists polynomial proof detail item correspond important technical statement crucial establish theorem extend polynomial hierarchy extend straightforward extension delicate difficulty already issue scheme formulate tier pointer cannot recurse tier input cannot recurse pointer difference characterization pointer tier recurse proposition along polynomial coefficient extend technical function algebra correspond complexity theorem extend technical lemma bound lemma exists polynomial proof proof straightforward induction function definition suffices function scheme preserve function define SC immediate function define output define SR induction polynomial satisfies proof semi colon discipline recursion tier semi colon definitional strength algebra amount function tier input meaningful function recursion proposition strength algebra crucial proof complexity define turing machine characterize function algebra input sort function algebra statement denote reference exist polynomial proposition II II proposition consequence lemma lemma II proof fix assumption initial function ensure closure SC SR scheme preserve inspect proof auxiliary function therefore  function output polynomially bound ensure lemma mention proof applies smoothly lemma II hint proof lemma occurs define disjunctive recursion recursion variable tier tier variable simulate recursion define disjunctive recursion image KB image height recursion input function evaluate simplification omit variable calculate evaluate link respective node instead recur  sake argument assume denote extension image KB image function evaluate leaf proof via function denote significant therefore label obviously leaf label iff function recursion notation compute label tier input preserve duplicate consume spawn moreover instead definition account input duplicate available proof lemma proceed induction function definition assumption proof bound lemma function straightforward statement define function induction hypothesis exist polynomial concatenation truncation function function composition denote SP function function exist polynomial define polynomial whenever proof proof proposition simultaneously induction integer consequence item proposition statement lemma assume induction hypothesis therefore lemma lemma proof function function establish inclusion integer formalize notion non deterministic turing machine   described assume tape ntm tuple finite internal tape alphabet transition function initial accept assume non terminate configuration successor configuration therefore split transition function  input accepted ntm exists computation accept configuration lemma proof non deterministic turing machine polynomial input simulate function assume configuration code code respective code accept assume input configuration code polynomial exist return configuration code accord respectively code non configuration return otherwise proposition exist polynomial define function associate polynomial proposition code initial configuration define SR function simulates sequential computation perform along configuration code formally distinction definition function via initial function argument proposition exist polynomial function associate polynomial bound respectively described proposition define function proposition integer proof induction denote similarly statement proposition lemma respectively fix assume proof arbitrary function exists tape oracle turing machine computes function polynomial oracle function denote polynomial bound correspondent function proposition assume tape oracle tape output tape distinguish query whenever enters content oracle tape instantaneously replace proposition ensures existence polynomial whenever encode configuration portion tape scan similarly oracle tape content output tape encode binary fix polynomial assume reachable configuration input encode pad exactly polynomial encode manipulate function function therefore definable tier input involve tier input applies proposition encodes initial configuration input encodes configuration accord instruction configuration code polynomial proposition query interpret tape query tape configuration configuration code polynomial proposition correspond output tape configuration configuration code define sort recursion notation function valid configuration assume configuration polynomial bound output respectively existence polynomial ensure via lemma polynomial encodes configuration oracle input function associate proposition polynomial proof arbitrary function exists compute oracle function described proof ntm output tape encode configuration polynomial assume accept simulate computation perform auxiliary function function definable tier input described define SR simulates sequential computation perform along configuration code define proof correspond proposition proposition exist polynomial function associate polynomial bound respectively described proposition define function function function lemma function appropriate arity proof trivial machine compute non deterministic deterministic respectively oracle describes non deterministic turing machine oracle obvious machine polynomial straightforward lemma exists polynomial proof simplicity simulation omit variable assume component input tape machine initialize scan rightmost non empty additional tape oracle tape empty computation exist deterministic turing machine oracle computes polynomial polynomial bound machine oracle described tape output plus tape oracle tape assume content tape halt tape scan immediately rightmost non empty era tape copying content tape halt leftmost non empty tape machine initialize tape rightmost tape empty tape plus oracle tape tape scan otherwise halt tape tape oracle tape compute possibility loop instruction previous moreover inputting machine loop performs constant hypothesis output polynomially bound bound polynomial therefore lemma function define proof proof  tape arity plus oracle tape numbered assume component input tape nth input nth tape machine initialize scan rightmost non empty ntm accord transition function informally pointer deletes input recursion input respectively proceeds analogous constant exists ntm oracle computes bound polynomial ntm oracle described tape scan otherwise compute loop occurs moreover inputting machine loop constant therefore instruction machine performs constant input remains constant bound proof proposition integer proof proceed induction denotes similarly proposition sub induction definition function inside initial function statement consequence define sub induction hypothesis lemma define scheme sub induction hypothesis actually boolean boolean function lemma ensures desire assume proof sub induction definition function inside initial function due function define SC SR lemma respectively proof sub induction definition function inside initial function due function define sub induction hypothesis lemma define boolean function sub induction hypothesis boolean apply lemma conclusion establish theorem proof theorem inclusion establish proposition proposition entail theorem polynomial hierarchy function described closure combination scheme sort composition SC sort recursion SR disjunctive recursion recursion theoretically polynomial hierarchy function extension  characterization recall definition define theorem proof integer evoke theorem scheme occurs definition induction assume situation define applies consequently define SC SR function apply function deeper sub apply closure SC SR concludes proof characterization achieve non sort context explicit bound recursion scheme characterization denote parallel  characterization polynomial hierarchy definition function compose constructor destructor conditional projection function integer define composition restrict composition BR bound recursion notation function explicitly definable concatenation denotes truncate disjunctive recursion omit input  function concatenates corresponds smash function bus theorem integer proof evoke lemma therefore due theorem theorem inclusion output function polynomially bound proof correspond inclusion sort context adapts smoothly lemma lemma formulate unsorted context unsorted version research namely induction scheme context bound arithmetic