approximate minimum selection presence independent random comparison fault asks linearly collection perform unreliable pairwise comparison whenever probability comparison outcome randomize algorithm solves probability comparison expectation becomes trivial comparison algorithm succeed probability whenever bound away imply comparison perform algorithm asymptotically optimal moreover approximate minimum selection comparison optimal bound away introduction ideal computational task reliably operation perform algorithm behaves exactly intend practical architecture however error prone operation sometimes return involve spurious instinct detect error manifest classical non fault tolerant algorithm alternative approach deliberately allows error interfere execution algorithm compute approximate  devise algorithm cope fault return  investigate generalization fundamental minimum totally fault tolerant approximate minimum selection return collection unreliable pairwise comparison comparison sometimes incorrect due error allows representative percentile input obtain estimate minimum noisy observation upper bound comparison possibly randomize algorithm solves probability simply return random input focus comparison expectation footnote comparison asymptotically optimal bound away moreover whenever asymptotic comparison application random comparison error due communication interference alpha particle collection  ray efficient architecture consume computation substantially reduce faulty perform accurate comparison resource consume reference remotely approximate comparison quicker concrete application tier collection item built imprecise manufacturing quality   semiconductor fabrication facility setting another expert automate comparison necessarily accurate footnote detail briefly discus error model error model independent random comparison fault error model exists strict relation input algorithm information relation via unreliable comparison outcome comparison involve distinct signify report respectively outcome comparison correspond relative probability upper bound constant instead algorithm happens outcome comparison chosen independently previous comparison involve assume independent error model related minimum sort sequence due monte carlo algorithm probability comparison respectively moreover author bound algorithm asymptotically optimal comparison sequel invoke minimum algorithm findmin subroutine therefore convenient restate theorem notation theorem theorem parameter algorithm findmin performs comparison return minimum probability contribution randomize algorithm solves probability comparison expectation moreover comparison perform algorithm asymptotically optimal bound away algorithm succeed probability comparison expectation additionally guarantee comparison algorithm implies probability comparison asymptotically optimal bound away evaluate algorithm handle impose asymptotic upper limit possibly comparison perform algorithm succeed probability algorithm executes findmin randomly chosen subset choice algorithm exhibit quadratic difference achievable algorithm cannot non trivial guarantee rank return algorithm summarize algorithm handle asymptotically optimal refers comparison refers comparison technique obtain positive reduction transforms instance instance reduction probability comparison probability comparison allows focus probability comparison noisy oracle detect constant comparison error probability upper bound constant employ noisy oracle iterative algorithm considers random input whenever query oracle multiple return query report amount query perform increase iteration chosen simultaneously ensure overall comparison probability wrongly return reduction algorithm immediately transform algorithm solves comparison expectation comparison reduce comparison algorithm reminiscent  style tournament performs comparison thanks reduction latter algorithm improves comparison optimal bound away regard negative obtain bound strategy bound away deem reduce extension bound applies construct roughly instance generic input contains instance return input algorithm detect input instance sufficiently confidence comparison expectation finally improve probability algorithm solves comparison employ bound strategy described related minimum collection unreliable comparison already attention variant comparison fail comparison bound away expectation comparison sect comparison fails constant probability  prefix bound probability error execution algorithm comparison fail situation significantly worsens comparison minimum tight moreover erroneous comparison globally bound  algorithm succeed certainty landscape improves assume error independently random addition already cite algorithm sect recent complexity comparison partition selection algorithm imply constant error probability comparison algorithm selects minimum recently focus compute independent noisy comparison error model tight algorithm sample algorithm achieves probability attention related sort fault comparison correctly sort comparison return tight prefix bound model minimum selection implies comparison sufficient sort bound easy input already sort sort fault permanent equivalently extensively exhibit connection rank aggregation minimum feedback arc another related framework rényi  player responder secretly selects universe questioner identify responder responder questioner fails uniquely identify comparison chosen questioner questioner tight footnote broadly rényi  extensively variety error prone model context optimization algorithm resilient data  related aforementioned fault model refer interested reader survey monograph finally fault sample strategy allows probability comparison organization sect preliminary remark outline strategy reduce error probability describes reduction sect algorithm comparison expectation comparison respectively finally sect devote bound preliminary input multi sample replacement multiple multiset perform comparison multisets distinct arbitrary consistent accord error model comparison fault happens independently random probability error probability reduce comparison multiple majority strategy strategy related pairwise comparison longer access noisy oracle query return false associate binary query return probability complementary probability error independent lemma bound probability correctness majority strategy lemma distinct error probability upper bound constant exists constant strategy resp query return majority probability proof suppose indicator random variable iff comparison resp query independent bernoulli random variable parameter stochastically dominates definition binomial random variable parameter footnote hence moreover hence chernoff bound upper bound probability failure majority strategy theorem indeed satisfies reduction reduce footnote otherwise reduction construct contains later independently sample replacement per findmin theorem failure probability collection return return execution findmin theorem lemma chernoff bound lemma lemma probability proof contains independently probability probability upper bound inequality contains probability moreover chose probability findmin return minimum theorem clearly previous union bound complementary probability indicator random variable iff independently probability variable stochastically dominates binomial random variable parameter consequence chernoff bound theorem obtain consequence reduction lemma algorithm solves probability comparison resp expectation choice exists algorithm solves probability comparison resp expectation proof compute accord reduction failure probability return reduction comparison moreover execution findmin comparison theorem recall comparison perform overall comparison claimed upper bound refers comparison expectation refers comparison probability lemma probability probability fails return union bound algorithm lemma findmin thanks reduction allows probability comparison comparison bound theorem sect bound away nevertheless difficulty asymptotically optimal comparison probability comparison expectation lemma sufficient devise algorithm solves probability comparison expectation assume otherwise simply return uniformly random algorithm noisy oracle query precisely denote denote satisfies report probability probability identifies failure probability query error independent query implement constant comparison guarantee accuracy oracle sect constant lemma algorithm phase generic phase uniformly random perform consists query succeed report majority query otherwise fails succeed return otherwise phase algorithm GeometricTest probability succeed decrease geometrically phase sect implement implementation assume without loss generality simulate comparison return majority comparison lemma oracle query randomly sample report otherwise report suppose incorrectly report comparison return probability probability therefore probability report incorrectly report comparison return probability probability overall report probability analysis comparison probability GeometricTest lemma respectively upper bound comparison bound probability GeometricTest lemma GeometricTest performs comparison expectation proof generic phase assume algorithm phase probability phase perform phase succeed probability lemma phase execute algorithm stochastically dominate geometric random variable parameter definition constant comparison perform phase footnote overall comparison perform phase upper bound comparison perform GeometricTest equality identity lemma GeometricTest solves probability proof GeometricTest fails terminate return easy algorithm terminates almost surely footnote focus upper bound probability algorithm terminates generic phase return report query probability lemma probability imply union bound phase upper bound overall failure probability combine lemma conclude GeometricTest solves probability comparison expectation lemma immediately implies theorem theorem probability comparison expectation conclude phase GeometricTest probability return proof lemma variant obtain GeometricTest phase phase exceed return random variant  upper bound comparison perform  bound probability combine  lemma obtain algorithm solves probability comparison expectation comparison latter algorithm comparison obtain combine findmin lemma comparison expectation discussion sect detail reduce asymptotic comparison almost optimal comparison probability comparison sake simplicity assume footnote parameter chosen later algorithm comparison probability binary execution algorithm input sequence contains internal vertex winner consist comparison image algorithm simulates  tournament construct obtain findmin failure probability multi randomly sample replacement generic winner specifically consist comparison constant lemma winner report majority comparison winner tournament return algorithm algorithm visualize binary height leaf unique internal vertex depth previous otherwise lemma bound probability algorithm lemma tournament probability winner tournament proof induction obtain findmin multi sample replacement execution findmin fails happens probability independently probability probability union bound probability induction winner probability induction hypothesis moreover chosen function collection along outcome pairwise comparison perform phase disjoint subset chosen independent execution findmin independently chosen subset independent happens probability exactly phase probability exactly upper bound probability induction hypothesis hence focus probability lemma ensures probability completes proof induction winner tournament sole probability probability analyze comparison perform algorithm lemma simulate tournament comparison proof initial selection comparison recall tournament consists comparison comparison perform overall comparison obtain algorithm performs comparison probability algorithm reduction lemma immediately obtain algorithm optimal bound away theorem sect theorem probability comparison combine algorithm GeometricTest described sect probability comparison expectation comparison simply algorithm parallel terminates clearly comparison asymptotically unaffected probability combine algorithm fails upper bound sum respective failure probability recall GeometricTest fails probability lemma bound devote bound comparison probability bound strategy qualitative representation deem namely upper bound constant simplicity constant although proof strategy actually constant choice footnote algorithm probability probability bound  solves probability perform comparison expectation formalize theorem proof appendix theorem establish bound comparison footnote theorem algorithm solves probability exists sequence comparison perform constant depends bound qualitative representation parameter handle lemma image lemma algorithm solves probability exists sequence comparison perform constant depends proof constant theorem suppose towards contradiction algorithm probability comparison instance existence implies existence algorithm probability instance comparison expectation contradict theorem algorithm instance construct instance consists arbitrary contains exactly output return execution probability imply conclude proof suffices comparison perform upper bound comparison perform attention lemma recall bound exists without perform comparison simply return chosen uniformly random bound away namely assume existence constant consequence preliminary bound comparison probability bound useful handle sequel lemma algorithm solves probability exists sequence comparison perform proof suppose towards contradiction algorithm probability comparison instance execution performs comparison probability input random permutation failure probability implies existence instance fails probability yield sought contradiction handle suitable instance ensure algorithm probability perform comparison instance constant lemma algorithm solves probability exists sequence comparison perform constant depends proof algorithm solves probability comparison expectation instance constant depends define lemma already ensures proof sequence bound comparison instance probability define sequence obtain perform consecutive rotation footnote denote sequence refer execution input denote return moreover performs comparison comparison markov inequality implies performs comparison probability input sequence proof lemma background sequence background interval sequence overlap contains sequence choice ensures highlight bold image input sequence encode execution return input sequence comparison outcome random choice probability execution realize input sequence moreover denote probability random choice execution exactly comparison comparison error exactly probability comparison outcome input resp resp relate sum inequality choice return input obtain index moreover define inequality generic summand sum fails probability inequality yield combine obtain sought bound finally remain probability algorithm solves boost multiple return bound lemma applies lemma algorithm solves probability exists sequence comparison perform constant depends proof constant failure probability comparison instance theorem ensures constant exists algorithm solves probability error comparison instance constant lemma respectively define restrict otherwise lemma inequality algorithm probability instance performs independent execution input return findmin probability error return comparison probability execution return union bound overall failure probability invoke lemma comparison formula moreover combine inequality combine combine lemma obtain theorem algorithm solves probability exists sequence comparison perform constant depends notation omit ceiling asymptotic upper bound relevant approach interestingly semiconductor approximately classify binning identically built processor assign commercial performance throughout denote binary logarithm refer logarithm parameter binomial random variable independent trial parameter probability trial notation throughout shorthand recall sect query implement comparison comparison query phase proof lemma probability phase suffice pad randomly lemma bound theorem concern related compute logical input sequence noisy query bound immediately translates bound detail lemma theorem proof theorem appendix rotation sequence sequence reference  maximum minimum   math MathSciNet article google scholar  inexact beyond fault tolerance  acm article google scholar  sort presence erroneous information inf lett article google scholar  radiation induced error advanced semiconductor technology trans device   article google scholar   comparison presence error proceeding fifth symposium theory compute STOC  mao  parallel algorithm partition noisy comparison proceeding forty eighth symposium theory compute STOC   noisy sort without resampling proceeding  symposium discrete algorithm soda  error electronic memory    ultra compute via probabilistic algorithm device CMOS device primitive probability relationship proceeding international conference solid device      probabilistic CMOS switch realization exploit proceeding IFIP international conference integration chip VLSI soc chen  mao schneider competitive analysis rank proceeding eighth symposium discrete algorithm soda  fault tolerant algorithm reliable computation unreliable information monograph theoretical computer springer  staircase series math mag MathSciNet article google scholar feige  peleg  compute noisy information siam comput MathSciNet article google scholar  grandoni  optimal resilient sort presence memory fault theor comput sci http doi org ezproxy auckland MathSciNet article math google scholar   liu  sort recurrent comparison error proceeding eighth international symposium algorithm computation isaac   liu  optimal sort persistent comparison error proceeding seventh european symposium algorithm ESA   liu  optimal dislocation persistent error subquadratic theory comput  http doi org ezproxy auckland MathSciNet article math google scholar   liu   dual mode greedy algorithm proceeding international symposium algorithm computation isaac  vol  dagstuhl     http doi org ezproxy auckland  isaac    recur comparison fault sort minimum proceeding twentieth international symposium fundamental computation theory FCT    rank error proceeding thirty  symposium theory compute STOC klein   woodruff tolerant algorithm proceeding  european symposium algorithm ESA    cop erroneous information sort trans comput article google scholar  tight bound fault tolerant merge sort network destructive fault siam comput MathSciNet article google scholar  liu  resilient randomly unreliable memory proceeding annual european symposium algorithm ESA  vol  dagstuhl     http doi org ezproxy auckland  ESA sort faulty comparison oracle california santa  tech rep    sort noisy data partial information proceeding fourth conference innovation theoretical computer  mitzenmacher  probability compute randomization probabilistic technique algorithm data analysis  cambridge   building broken chip physic engineering inexact compute acm trans embed comput   error probability theor comput sci MathSciNet article google scholar  error fifty cop liar theor comput sci MathSciNet article google scholar    spite erroneous information proceeding fourth symposium theoretical aspect computer  rivest meyer   spencer cop error binary procedure comput  sci MathSciNet article google scholar reference acknowledgement author     paolo  daniel  peter  insightful discussion claire nicole  anonymous reviewer coordinate editor careful reading manuscript comment suggestion funding access funding swiss federal institute technology zurich author information affiliation department information engineering computer mathematics aquila aquila italy   department computer eth   switzerland  hung liu author   author pubmed google scholar  hung liu author pubmed google scholar correspond author correspondence  hung liu additional information publisher springer remains neutral regard  publish institutional affiliation research  project proof theorem proof theorem noisy introduce finite input sequence output false otherwise actual cannot directly perform query noisy oracle whenever query return probability complementary probability denote query algorithm solves instance probability algorithm solves noisy instance probability intuitively algorithm input simulates execution input consequence probability return index otherwise formally executes modification whenever symmetric simulates comparison query return treat otherwise treat performs query resp computes majority resp exactly treat correspond otherwise treat lemma resp probability report actually probability whenever terminates return return false otherwise comparison implement query therefore average comparison instance performs query expectation instance noisy consist proof algorithm noisy probability perform query instance suitable constant depends immediately algorithm solves noisy probability maximum query perform input sequence derive bound assume finite parameter chosen later existence implies existence algorithm noisy probability performs query expectation instance query obtain immediately query return arbitrary input markov inequality probability probability failure denote sequence otherwise consists zero similarly proof theorem noisy boolean decision associate internal vertex label query leaf label false specific execution input sequence trace leaf output execution label leaf denote probability execution input trace unique define internal vertex label unique execution described performs query depth input differs execution trace performs query convex function jensen inequality leaf label false combine sum leaf obtain define succeed probability input sequence moreover monotonically decrease convex function combine inequality jensen inequality obtain implies bound average query perform input indeed valid choice therefore identity sought bound completes proof