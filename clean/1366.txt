maximal subsequence MCS inclusion maximal subsequence MCSs generalization classical concept subsequence LCS MCS efficiently listing distinct MCSs algorithmically challenge MCS cannot multiple dynamic program incurs exponential waste recent algorithm MCS immediately extend listing alternative novel graph approach propose output sensitive algorithm polynomial per MCS polynomial preprocessing introduction widely subsequence LCS notion inclusion maximal subsequence MCS define formally MCS subsequence insert longer yield subsequence enumeration distinct MCSs intrigue algorithm novel graph theoretic approach definition alphabet concatenation subsequence denote exist index definition maximal subsequence denote subsequence satisfy namely inclusion maximal subsequence greedy sequence necessarily MCS reading MCS focus enumeration MCS formally MCS enumeration alphabet maximal subsequence enumeration algorithm aim complexity algorithm depends cardinality exponential input motivates define complexity output definition enumeration algorithm polynomial delay generates delay output consecutive bound polynomial input aim polynomial delay MCS enumeration algorithm specifically theorem delay enumeration algorithm preprocessing motivation relation previous maximal subsequence introduce mid concept MCS address author computation shortest maximal subsequence  shortest MCS introduce context LCS approximation dynamic program algorithm  cubic  thoroughly plethora comparison application domain error correction molecular biology plagiarism detection MCSs  information alignment MCSs information possibly reveal slightly alternative alignment MCS principle helpful information application LCS simplify representation genome potential anchor identify  alignment anchor  alignment instance image furthermore application alignment highlight MCSs comparative genomics sheer input comparative genomics specific comparison branching employ genome comparison akin MCS rely anchor genome potential anchor meaningful chunk genome anchor extract compute  genome sequence non overlap potential anchor eventual gap anchor separately interpret sequence potential anchor MCS optimal  alignment later extract anchor alignment efficient algorithm MCS therefore employ consume comparison drawback LCS quadratic conditional bound computation exponential hypothesis footnote quadratic bound exists MCS recent sakai algorithm deterministically MCS later improve algorithm extend sequence maximal furthermore algorithm subsequence maximal described author neat characterization MCSs useful later lemma illustrate lemma MCS characterization subsequence define resp remain substring obtain resp delete shortest prefix shortest substring  notion maximal disjoint showcase pitfall arise trivially extend aforementioned MCS enumeration worth approach literature LCS subsequence constraint subsequence subsequence automaton approach described directly MCS clarity focus latter approach pitfall arise extension knowledge approach literature immediately extend efficient MCS enumeration strategic pitfall visual representation sakai characterization image aforementioned sakai neither directly employ obtain polynomial delay enumeration algorithm dynamic program approach dynamic program modify MCS polynomial cannot easily generalize indeed incremental approach dynamic program exponential delay enumeration algorithm MCS proceed incrementally halfway compute MCS exponential input output approach algorithm cannot easily generalize specific choice crucial ensure maximality output iterate application lemma efficient algorithm subsequence disjoint compute distinct recur extend sequence instance sequence algorithm recur almost subsequence output exponential lastly refine approach immediate extension enumeration MCS latter approach input greedy identify surely MCS fix recursively MCS prefix occurrence whenever finally yield MCS MCS adapt algorithm enumeration multiple otherwise MCS chosen reasonably insertion otherwise algorithm deterministically MCS perform enumeration algorithm insertion equivalent greedy approach yield sequence multiple  output  polynomial delay enumeration therefore intrigue maximal polynomial directly imply enumeration algorithm existence output sensitive enumeration algorithm imply pitfall circumvent approach approach finally prefix incremental prefix MCS identify prefix MCS task highly non trivial pitfall overview interpret MCS graph sect perspective central combinatorial theorem basis prefix incremental algorithm involve proof detailed sect theorem naively polynomial delay enumeration algorithm introduce sect lastly sect refinement initial algorithm finally bound described theorem MCS graph reduce graph theoretic characterization insight combine MCS afterward characterization reformulate operative algorithm MCS enumeration bipartite graph definition bipartite graph vertex respectively pairwise occurrence connects wherever context denote simply definition mapping subset iff mapping non graph mapping inclusion maximal maximal mapping mapping graph subsequence vice versa subsequence correspond mapping incorrectly MCS correspond inclusion maximal mapping counterexample inclusion maximal mapping correspond otherwise shorthand definition mapping rightmost mapping correspond mapping occurrence portion symmetrically define leftmost mapping remark subsequence unique rightmost mapping rightmost mapping symmetrically unique leftmost mapping efficient enumeration algorithm definition MCS relate develop prefix expand strategy prefix extension remark concatenation pairwise MCS fails combine latter sequence maximal maximal combine MCS sophisticated theorem denote prefix concatenation MCS maximal dash orange dot online image theorem MCS combination subsequence leftmost mapping rightmost mapping proof ensure equivalence sufficient sakai   subsequence shortest subsequence unchanged shortest already rightmost exactly shortest prefix subsequence definition leftmost mapping leftmost mapping occurs hypothesis shortest prefix unchanged therefore  unchanged  symmetrical previous  unchanged   coincide leftmost rightmost coincide  theorem precise characterization combine maximal subsequence cannot blindly employ enumeration algorithm valid prefix exists prefix suppose leftmost mapping expand append remains valid correspond related theorem maximal sequence describes perform task without explicitly valid prefix leftmost mapping correspond yield valid prefix extend possibility insertion sufficient discard valid extension corresponds valid endpoint mapped dash insertion remark image remark occurrence insertion endpoint discard candidate valid prefix clearly insertion nonetheless correspond generates valid prefix illustrate along sakai algorithm cannot generates MCS contains subsequence necessarily prefix therefore cannot easily employ identify depth graph characterize relationship notion unshiftable unshiftable unshiftable discus suitable unshiftable definition bipartite graph unshiftable belongs maximal rightmost mapping unshiftable denote  unshiftable unshiftable symmetric definition unshiftable maximal leftmost mapping related dominant concept introduce  dominant subset unshiftable footnote unshiftable characterize directly proposition proposition unshiftable corresponds rightmost pairwise occurrence unshiftable subgraph proof definition exists maximal rightmost mapping definition rightmost mapping corresponds pairwise occurrence satisfies correspond definition  definition rightmost maximal mapping occurrence therefore unshiftable belongs subgraph satisfy satisfies rightmost extend rightmost maximal mapping satisfy belongs subgraph rightmost maximal mapping contains contains otherwise restriction contains subsequent rightmost mapping extend rightmost maximal obtain rightmost maximal mapping unshiftable immediate consequence proposition operative unshiftable rightmost occurrence respectively unshiftable remark although MCS correspond rightmost maximal mapping latter unshiftable definition incorrect conclude rightmost maximal mapping MCS maximal rightmost mapping remark unshiftable dense unshiftable unshiftable therefore candidate extension finalize characterization relationship theorem leftmost mapping valid prefix priori correspond without explicitly incremental discovery specifically correspond valid prefix definition unshiftable graphical representation drawn purple unshiftable online image definition define  unshiftable subset candidate extension immediately definition endpoint definition application identify valid prefix extension extraction belonging dash image valid prefix extension valid prefix leftmost mapping shorthand candidate unshiftable unshiftable completely delimit illustrate algorithmic characterization valid extension prefix relate theorem theorem valid prefix leftmost mapping valid prefix exists correspond proof theorem involve postpone sect crucial polynomial delay binary partition algorithm latter recursively enumerates MCS building increasingly valid prefix avoid  recursive proof theorem finalize proof theorem introduce concept certificate sufficiency necessity theorem certificate certificate unshiftable pairwise occurrence correspond unshiftable recall certificate define illustrate definition certificate another certifies denote certificate iff certificate certify  detailed remark definition certificate rightmost occurrence correspond certificate bold correspond drawn solid dash unshiftable image definition certificate mapping mapping rightmost leftmost certificate certificate sufficient identify MCSs lemma maximal certificate mapping subsequence rightmost maximal mapping unshiftable proof contradiction assume rightmost exists correspond occurs therefore certificate contradiction assume contradiction maximal minimum index insert insertion pairwise occurrence rightmost pairwise occurrence certificate therefore remark contradiction therefore suppose insert  non empty contains equivalent correspond substring leftmost mapping rightmost mapping latter already rightmost perform mapping remapping shift endpoint per shift endpoint therefore insertion impossible hypothesis minimal leftward allows insertion endpoint rightmost insertion minimal endpoint mapped belong otherwise valid mapping superfluous contradict minimality illustrate correspond insertion solid orange minimal leftward dash online image correspond rightmost insertion unshiftable certificate insert illustrate correspond rightmost pairwise occurrence unshiftable certificate previous proof proceed without loss generality leftmost insertion without loss generality leftmost insertion image fashion guarantee unshiftable regular furthermore minimal leftward occurrence correspond certify unshiftable propagates backward correspond assume unshiftable occurrence occurrence minimal occurrence belong rightmost mapping propagation  solid orange rightmost counterpart dash corresponds cannot former minimality mapping latter rightmost mapping online image unshiftable obtain unshiftable subgraph contradiction define procedure generate certificate mapping procedure implicitly theorem unshiftable chooses certificate  proposition graph extension return certificate mapping correspond subsequence proof procedure generates certificate mapping definition cannot unshiftable subgraph lemma rightmost sufficient necessity theorem valid prefix namely exists correspond suppose none correspond contradiction sakai characterization maximality index disjoint valid prefix definition disjoint leftmost mapping rightmost mapping latter mapping correspond contradiction suppose implies definition therefore cannot disjoint correspond respectively contradiction implies disjoint contradiction necessity namely brief remark restriction  mapping valid prefix proof rightmost mapping correspond therefore mapping consist leftmost rightmost apply remark sufficiency suppose theorem proposition hypothesis theorem latter therefore prefix baseline algorithm polynomial delay MCS enumeration characterization theorem immediately prefix expand enumeration algorithm progressively augments prefix valid MCSs recursively generate baseline algorithm polynomial delay worth theorem guarantee recursive yield MCS moreover MCSs recursive originate prefix perform append distinct algorithm overview algorithm employ binary partition scheme footnote data structure sect unshiftable polynomial preprocessing phase  described detail sect recursive computation  considers enumeration MCSs valid prefix partition valid ensure theorem convenience dummy recursive computation leftmost mapping procedure valid extension prefix unshiftable empty MCS return otherwise procedure loop correspond theorem satisfy theorem positive valid prefix algorithm leftmost mapping update partition MCSs enumerate prefix recursively proceeds recursive algorithm loop correctness algorithm immediately theorem polynomial delay complexity recall unshiftable polynomial quadratic remark extraction preprocessing phase computation polynomial algorithm loop alphabet ext correspond satisfy theorem polynomial employ sakai algorithm recur algorithm update leftmost mapping polynomial operation operation polynomial loop polynomial recursive polynomial polynomial delay complexity height recursive binary partition MCS bound leaf corresponds distinct delay  leaf recursion polynomial height bound obtain algorithm theorem polynomial delay algorithm polynomial preprocessing polynomial preprocessing phase data structure detail analyse complexity baseline algorithm specifically theorem delay algorithm preprocessing data structure data structure employ algorithm query unshiftable data structure operation perform multiple execution algorithm computation previous occurrence perform operation constant employ  array analogously  implement rank directory succinct per array array directory rank operation perform retrieve previous occurrence respect structure unshiftable data structure subsequent operation unshiftable data structure specifically array array array priority entry unshiftable wedge sort array built symmetrically respect node wedge sort array image array strict array unshiftable perform binary sort array procedure unshiftable array construct  procedure unshiftable preprocessing phase algorithm initialize data structure compute unshiftable  compute unshiftable backwards exploit corresponds rightmost occurrence unshiftable unshiftable pairwise occurrence unshiftable already compute rightmost occurrence correspond unshiftable correctly identify unshiftable analogously  obtain unshiftable recursive procedure unshiftable candidate unshiftable rightmost occurrence recur unless already originates  procedure pseudocode algorithm unshiftable fashion pairwise occurrence unshiftable pairwise occurrence proposition unshiftable surely leftmost therefore correctly marked unshiftable auxiliary data structure complexity  procedure intermediate data structure quickly membership perform insertion static creation data structure preprocessing phase procedure array delete  procedure ensure twice employ balance binary avl respectively unshiftable respect membership insertion procedure considers unshiftable exactly previous pairwise occurrence membership performs insertion insertion perform described data structure pairwise occurrence constant data structure membership insertion perform logarithmic contains sort unshiftable respect correspond array pas already sort recall remark  procedure perform complexity analysis algorithm satisfies complexity bound theorem detailed sect preprocessing phase encompasses building data structure unshiftable perform quadratic complexity recursive  procedure operation consists compute scan unshiftable trivially another scan  nonempty loop correspond perform maximality employ sakai maximality positive perform leftward constant data structure recall recursive amount overall delay  recursive height recursion polynomial delay algorithm delay polynomial preprocessing recursive leaf plus unshiftable theorem sufficient exists polynomial delay polynomial algorithm MCS enumeration focus improve performance improve delay baseline algorithm refinement algorithm achieve bound theorem ideal yield distinct MCS proportional latter linear refine algorithm logarithmic factor per alphabet constant ideal instance preprocessing quadratic factor unavoidable employ possibly quadratic unshiftable refinement algorithm quickly extract ext instead perform maximality constant without employ linear algorithm sakai compute candidate extension faster correspond refinement extract logarithmic algorithm respectively index correspond occurrence remark leftmost mapping correspond endpoint occurrence leftmost mapping directly definition leftmost mapping unshiftable completely stem occurrence respectively graphical representation respectively bold purple dash unshiftable stem discard endpoint bound online image subset extraction ext remove another unshiftable completely definition proposition proof remark definition reduction none remove therefore specifically inclusion contradiction unshiftable completely leftmost mapping latter impossible definition therefore immediately contradiction completely characterization procedure  algorithm candidate extension restrict occurrence correspond occurrence compute correspond leftmost unshiftable stem respectively refine remove precede another obtain ext complexity analysis algorithm compute insert compute occurrence respectively constant data structure compute resp involve leftmost unshiftable stem resp resp employ unshiftable array symmetric therefore candidate extract sort accord merge sort sort discard remove unwanted complexity extraction procedure  instead naive computation candidate extension improve maximality swing refinement algorithm concern maximality algorithm instead sakai information allows immediately extension valid introduce notion swing definition leftmost mapping swing mapping integer respectively swing equivalently simply swing guarantee insertion previous visual representation concept swing swing mapping drawn insertion swing specifically insertion correspond mapped swing previous mapped dash online image notion maximality becomes immediate lemma valid prefix leftmost mapping swing furthermore candidate proof swing definition symmetrically swing assume satisfies contradiction definition swing cannot perform insertion insert directly contradicts quickly update swing prefix specifically leftmost mapping constant additional perform maximality swing leftmost mapping compute inductively fashion procedure  algorithm mapping correspond compute occurrence corresponds insertion occurrence swing mapping computation swing symmetrical inductive leftmost mapping swing compute swing leftmost mapping compute personal swing respect cumulative swing previous mapping personal swing respect denote swing mapping perform instead swing endpoint insert something analogous cumulative swing simply swing swing mapping minimum swing procedure  performs described operation update swing mapping adopt convention leftmost mapping swing convention occurs ensures compute ensure personal swing return complexity analysis procedure iterate alphabet constant occurrence complexity update swing refine algorithm MCS enumeration refine enumeration algorithm algorithm algorithm implement improvement described sect employ procedure   furthermore refinement correspond compute recursive perform loop instead ext ensure efficient recursive perform respect  counterpart algorithm employ binary partition scheme extend prefix valid preprocessing phase identical data structure  procedure unchanged recursive computation perform procedure  swing mapping prefix recursive perform leftmost mapping swing swing trivially procedure valid extension procedure  algorithm directly extract valid satisfy theorem loop maximality swing maximality satisfied correspond empty valid extension return MCS otherwise contains valid extension recursive procedure computes pairwise occurrence mapping update swing procedure  algorithm performs recursive correspond prefix passing mapping update swing refinement algorithm correctness  immediate complexity analysis procedure compute extension procedure  computes perform constant maximality compute overall afterwards pairwise occurrence compute perform data structure lastly recur procedure  update swing mapping perform recursive  however improve observation execute recursive immediately generate simply attribute  computation perform meaning recursive  procedure instead delay algorithm  recursive height partition algorithm  delay preprocessing regard complexity addition aforementioned data structure data recursive leaf partition namely leftmost mapping swing additional employ algorithm therefore theorem specifically constant alphabet algorithm enumerates MCS delay preprocessing quadratic complexity conclusion acknowledgement maximal subsequence MCSs investigate combinatorial familiarize circumvent various pitfall ultimately efficient binary partition polynomial delay algorithm listing MCSs equivalent bipartite graph partially fund  japan  crest grant  italian ministry research   project  ahead partially author TU laboratory author AC   author RG pisa  author GP  preliminary version professor shin   kyoto useful discussion combinatorial MCS  workshop pisa illustrate exponential hypothesis seth widely conditional bound variety author employ improve  algorithm extract LCS sequence bipartite graph precise recursive node node binary partition recursive corresponds continuation backtracking corresponds