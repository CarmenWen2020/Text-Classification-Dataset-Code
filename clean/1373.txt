building lean agile devops automation software development delivery hardly anybody approach  style approach developer benefit previously isolated silo development operation devops exist devops flexible development provision business efficiently integrates development delivery operation facilitate lean fluid connection traditionally silo  software technology       brief overview recent devops technology delivery microservices discus project hearing reader prospective author christof ebert quality delivery cycle automation devops integrates development operation automate development deployment infrastructure monitoring organizational shift instead distribute siloed perform function separately functional continuous operational feature delivery approach deliver faster continuously reduce due  member accelerate resolution devops culture shift collaboration development quality assurance operation generic aim integrate development production operation business adequate technology instead highly artificial concept organization continuous delivery upgrade amazon google approach achieve cycle obviously achievable cycle depends environmental constraint deployment model service easy facilitate actual software delivery generic devops production delivery aim integrate development production operation business adequate technology generic devops production delivery aim integrate development production operation business adequate technology devops apply delivery model tailor environment architecture facilitate continuous delivery instance safety critical nevertheless constrain environment upgrade deliver quickly reliably recent evolution automotive software besides highly secure delivery delivery model dedicate architecture hardware swap controller operational update swap active mode depth security verification procedure devops embed challenge service attempt combine legacy code architecture continuous delivery devops mandatory automate devops quality delivery cycle automation environment project important devops automation discus article devops phase workflow discus achieve iteration reduce manual consume task continuous integration CI merge code developer broken code improve software quality automation crucial devops environment agile fluid development become manage software development service cycle involves compile code manage dependency generate documentation deploy application environment apache ant become standard building application source source syntax define task execute reflect ant advantage disadvantage easy understand verbose task xml procedural program maven aim ant xml define statement define project instead task maven project model defines uniform advantage define standard project sometimes inflexibility custom operation define manage dependency automate sometimes creates due external automatic dependency rake gradle ant maven offering program application rake code ruby gradle configuration employ groovy domain specific DSL automation devops automation devops continuous integration CI agile concept CI integrate developer constantly embrace CI easy embed ded development challenge building target hardware simulated moreover hardware limitation affect therefore cycle jenkins source java implement plug option popularity user easy however UI outdated attractive uis  developed  java java jenkins unlike jenkins net although license edition project   integrates  advantage already  deployment phase important shift treat infrastructure code approach infrastructure version development production homogenous infrastructure reduce bug due infrastructure configuration devops automation application infrastructure manual infrastructure provision configuration management reduce production provision configuration maintenance complexity enable recreation production development machine devops enabler architecture monolithic software microservices approach discus microservices detail later achieve continuous delivery embed device machine machine communication internet architecture continuous delivery improve allows agile rapid consumer feedback however critical application failure option medical aerospace application conservative approach preferable improve application cycle puppet approach infrastructure provision desire puppet infrastructure generally consists server agent client puppet ruby DSL json javascript notation machine configuration containerization virtualization difference development production machine achieve consistency developer virtualization technology recreate production environment development machine virtualization technology focus security  whereas application development environmental consistency goal scenario containerization lightweight alternative virtualization moreover virtualization lack compatibility provider whereas containerization enhances migration provider traditional hypervisor vendor VMware project  microsoft server integrate containerization platform chef approach recipe purely ruby DSL detail provision chef client server isolated installation chef solo mode ansible easy implement instal agent client machine ssh secure configuration source python configuration cod yaml yaml markup file reduce curve finally orchestration technology account production infrastructure virtualization containerization technology docker containerization virtualization sidebar operation although researcher focus considerably deployment devops impact infrastructure operation maintain infrastructure stability performance sometimes replacement debug programmer advise debug instead trace application devops viewpoint trace manage application everything fatal error warn info trace debug application complex standard java java util package complex project framework logj logj although task management  service data application platform server standard http syslog installation custom performance devops dashboard easy  powerful feature  integrate relic effective identify isolate  source analyzer allows error easy web interface hoc dashboard alert feature handle data format customize considerable plug monitoring monitoring organization identify resolve infrastructure affect critical business monitor aspect cpu load ram allocation network traffic statistic memory consumption availability disk continuously health alert administrator detect administrator corrective action  source monitoring infrastructure user service active network component easy navigate web interface interactive dashboard overview host service network device trend capacity planning graph organization infrastructure upgrade plug limitation lack automatic device discovery difficulty configure relic software service powerful interface web apps monitor native mobile application iOS android monitor apps hybrid premise environment customizable dashboard integrate additional monitoring feature generate custom report threshold alarm trigger notification specific cactus web intuitive easy interface template configuration enables customization graph displayed mode addition standard preview mode devops software efficiency devops emerge paradigm innovative feature faster technology recently popped smooth transition development operation fluid delivery manage complexity technology application delivery platform apply embed software certainly approach domain mention emergence technology automotive software update principle transferable account stringent continuous functional safety security web development adopter devops domain amazon web service aws implement continuous delivery aws elastic beanstalk continuous deployment easy approach therefore shallower curve configurability aws  code infrastructure integration chef aws  template json format provision infrastructure repeatable infrastructure component aws  service deploy application across multiple virtual machine elastic compute instance minimal downtime alternatively aws  service launch integrates implementation  aws component continuous delivery aws code commit manage source service host private repository aws  monitoring alert infrastructure deployed application reliability performance devops architecture aws  architecture amazon web service aws implement continuous delivery beyond devops microservices researcher microservices manage complex legacy architecture microservices software application granular modular software emerge approximately service orient architecture approach fragment complex application deliver service demand improve performance devops framework develop deploy manage microservices container ecosystem devops benefit refactored architecture advantage delivery cycle integrate development operation devops microservices focus efficient service delivery unlike centrally microservices inherently distribute delivery dependency impact analyze validate packaging microservices across network delivery incur significant performance penalty accommodate additional architectural tweak cache layer complex critical application availability security constraint address entirely volatile delivery model microservices devops recommend tailor devops strategy immediate owe integration across cycle gradually evolve microservices delivery model appropriate devops culture shift vector consult service improve efficiency devops continuous delivery sidebar devops lesson underestimate culture shift devops project related challenge complex architecture feature chunk deployed independently maintain configuration environment constant visibility deployed version dependency introduce purpose built development production environment derive legacy application cycle management cycle management environment bridging traditionally siloed culture development operation folk perceive cumbersome expensive thoroughness operation developer perceive dirty transition devops obviously challenge legacy software embed domain involve application development web environment migrate easily devops source orchestrate rollback feasible deployed software embrace devops culture developer stack developer approach responsibility release environment extend beyond code knowledge database administration furthermore functional silo boundary blur intense collaboration member developer embrace devops critical development development performs driven development CI scenario tester developer gain technical knowledge quality assurance ensure automation code coverage operation perspective devops greatly affect culture discipline operation continuously function without lose operation development closely collaborate achieve continuous promote devops moreover infrastructure monitoring application performance management important communication member fluid devops global supplier critical infrastructure overly cycle rework deliver upgrade overall delivery development deployment upgrade domain vector consult service introduce devops model tailor environmental constraint focus mapped cycle abstraction enhance requirement engineering delivery model devops model tailor environmental constraint global supplier critical infrastructure focus mapped lifecycle abstraction  static runtime analysis automatic management client discover defect development feature development rework due quality issue directly improve return investment software release become consistent painful owe quality overall cycle decrease almost upgrade devops impact entire software building lean agile devops automation software development delivery hardly anybody approach  style approach developer benefit development operation typically mutual understand requirement onward maintenance service evolution improve cycle percent reduce percent driver requirement focus quality assurance faster delivery cycle feature driven however cycle approach achieve devops architecture culture