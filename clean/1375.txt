proponent various agile lean community bold usefulness rarely empirical investigation data item shed kanban versus scrum acquire knowledge performance agile lean scholar conduct organization application domain culture competence proponent various agile lean community bold usefulness rarely empirical investigation data item shed kanban versus scrum suppose manager software development scrum primarily  scrum rigid kanban approach unfortunately literature report sort evidence shift introduce kanban improve performance respect quality productivity systematically empirical evidence basis important decision data scientific engineering discipline however solid evidence generally utility relevant data perceive resource demand software organization academia prioritize empirical conduct agile program scientific data various agile lean variable quality productivity response report software innovation SI  developed document management built microsoft  platform tightly integrate microsoft environment currently approximately developer specialist SI employee distribute developer tester primarily  norway  india SI partner customer SI waterfall annual cycle implementation deployment release carefully examine development decision introduce scrum SI implement scrum standard functional sprint planning meeting estimation item planning poker daily  meeting sprint  increment code fully sprint demo review meeting status visible automate report task couple author  SI operation manager  SI CTO scrum rigid unsuitable maintenance task combination inaccurate estimate  longer perceive waste scrum planning meeting reduce productivity quality consequently switch scrum kanban SI implement kanban manner item attempt item stage release satisfactory quality quickly delivery without  furthermore limited item progress simultaneously wip limit wip limit item previous jit item backlog oppose scrum item within sprint simultaneously backlog estimate another scrum SI longer functional abandon meeting focus estimation item SI daily  meeting kanban instead demo meeting sprint status meeting demo twice regardless progress item difference quality gate scrum kanban code equally  author realize rigorous agility theoretical toy business contact  quantify hypothesis benefit switch kanban respect quality productivity investigate hypothesis primarily author analyze data item microsoft foundation server tfs although scrum analyze data onward SI overcome difficulty agile development independent dependent variable quality quality   defines project appearance collins definition manufacturing production business delivery consultancy contract customer request tailor software definition useful define amount proposal feature another request deployment customer environment however development SI release customer definition unsuitable amount item remains backlog queue function priority scrum kanban development furthermore develop customer propose feature backlog customer request policy release item deliver customer immediately consequently   definition appropriate define amount development receives request completes item definition consistent elsewhere item across average bug project backlog item PBIs quarter within SI scrum kanban quarter scrum kanban data SI scrum switch kanban prevent outlier remove item within percent quarter item consequently analysis compose item average item quarter average decline approximately percent scrum kanban bug average scrum kanban project backlog item PBIs decline orange purple bug PBIs average local quarter due activity holiday average item quarter average decline approximately percent scrum kanban bug average scrum kanban project backlog item PBIs decline orange purple bug PBIs average local quarter due activity holiday variation standard deviation scrum bug PBIs standard deviation kanban bug PBIs scrum scrum kanban scrum bug versus kanban bug scrum PBIs versus kanban PBIs churn development performance due aspect formal due technological environment however environment stable furthermore assumes average amount per item stable  developer tester spent item instead churn surrogate effort churn define sum delete modify source code effort correlation effort churn modification exist file correlation development file average churn bug PBIs remove item within percent churn within quarter item conduct analysis reduce outlier analysis pertains item involve code comprise approximately item churn indicates item although dramatic correlation exists churn individual file bug spearman PBIs spearman however quarterly medium insignificant correlation exists average churn average bug whereas significant correlation exists PBIs average churn bug PBIs average churn bug percent kanban scrum PBIs average churn percent kanban scrum average churn bug PBIs average churn bug percent kanban scrum PBIs average churn percent kanban scrum consequently account effort item churn average decline approximately percent scrum kanban percent bug percent PBIs quality accord iso IEC standard software dimension pertain quality functionality reliability usability efficiency maintainability portability focus reliability important bug operational undesirable outcome crash data corruption reliability bug classify severity orthogonal defect classification bug correspond severity SI bug detect internally percent externally SI customer percent internal bug detect release intense manual automatic average bug per quarter scrum kanban percent variability decline standard deviation scrum kanban critical bug bug decline percent standard deviation dip quarter mainly due bug fix holiday bug scrum quarter afterward scrum kanban hence reduction bug independent scrum kanban interpret caution increase bug due bug detection SI employ presumably tester code continually extend bug average bug per quarter scrum kanban critical bug bug decline bug average bug per quarter scrum kanban critical bug bug decline production productivity production bug fix PBIs bug fix almost scrum per quarter stddev kanban stddev whereas production PBIs triple scrum stddev kanban stddev however usually increase production employ productivity important production SI developer tester fix bug increase average scrum kanban  increase productivity item per decrease percent bug increase percent PBIs productivity bug per developer PBIs per developer item per productivity decrease bug increase PBIs productivity bug per developer PBIs per developer item per productivity decrease bug increase PBIs churn indicator item propose alternative productivity validate specifically define productivity churn developer quarter bug productivity decrease average kloc stddev scrum kloc stddev kanban reduction percent PBIs productivity increase average kloc stddev scrum kloc std dev kanban increase percent consequently adjust item churn reduction productivity bug productivity increase considerably overall scrum kanban productivity bug per developer PBIs per developer bug productivity decrease average kloc scrum kloc kanban PBIs productivity increase average kloc scrum kloc kanban productivity gain kanban growth employee reduction project manager employee increase productivity per employee decline slightly organizational communication overhead furthermore despite almost developer tester SI manage reduce costly project manager transition scrum kanban qualitative evaluation complement quantitative data sought opinion operation manager author CTO author leader developer SI author interviewed leader developer clearly kanban scrum perceive fix scrum artificial item frequently underestimated developer hoc bug fix maintenance task item regardless suppose item within  timeline item quality satisfactory defer iteration planning activity kanban item developer focus item scrum allocate resource optimally within sprint tester tend sprint sprint meeting perceive waste SI already reduce sprint planning activity abandon functional employee mention relaxation scrum explanation reduce lack  kanban insufficient pressure item consensus combination daily meeting weekly status meeting visibility item status personal ambition constitute sufficient pressure replace scrum kanban SI almost halve reduce bug percent improve productivity consequently SI benefit kanban scrum strongly recommend software difficulty effort estimation interruption hoc bug fix maintenance task lean kanban nevertheless software engineering generalize challenge SI scrum almost data analyze kanban advantage simply due kanban scrum SI familiar agile scrum kanban introduce aspect SI technological environment basically scrum kanban reader judge situation apply environment agile lean software community evidence various particularly scrum kanban organization context encourage analyze data dataset quality data challenge obtain reliable information performance reliable raw data  environment motivate developer tester information continually item fortunately suggests become motivate data useful feedback addition feedback overall various SI display information bug detect monitor building partner customer trend bug various scrum kanban implementation another replicate environment characteristic kanban wip limited kanban specify wip limit various wip limit conduct wip limit performance criterion described article