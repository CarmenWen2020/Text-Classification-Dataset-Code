  uml author perspective software engineering article theme issue software engineering  web extra version article expand bibliography http extra computer org ezproxy auckland extra  pdf computer digital circulation around george  another george  apply electromechanical device another decade john tukey popularize software software engineering origin  conference software engineering coin   others   communication acm wherein software engineering distinction computer building software intensive earlier june issue computer automation classify seek software engineer data  hamilton coin sage semi automatic environment program become developer  apollo  lab accord unpublished oral software engineering sometime distinguish hardware engineering nascent program software engineering versus computer grace  program practical  dijkstra program organize complexity donald knuth refer program suspect observation david  observation   distinction computer stuff unlike distinction chemical engineering chemistry valid software engineering equally practical engineering resolution civil engineering static dynamic physical software engineering balance schedule complexity functionality performance reliability security legal ethical compute technology certainly charles  however fundamental engineering although discovers truth engineering software computer ada  understand program  around george  mathematician philosopher express classic computer     others harvard computer  edward  organize  contemporary agile development around computational mechanical aid calculation become reliable economical compute underwent  computer mostly data computer operation pas computer organic manifestation pipeline architecture depression II birth electronic computer efficiency reduction important industrial  taylor frank   cheaper dozen fame introduce  promote concept predecessor flowchart codify industrial manufacturing compute global depression progress administration launch president    mathematical project predecessor handbook mathematical function relief project employ mathematician computer mostly  developed compute extremely sophisticated mechanism error influence punch compute evolve wallace  publish punch scientific  manner compute methodology ada  understand program  gathering europe george  apply george  binary logic digital adder electromechanical relay model kitchen built digital compute building electromechanical mechanism computation rapidly thereafter others realize relay replace vacuum faster serendipitous meeting john von neumann manhattan project herman   research laboratory connection john mauchly professor moore electrical engineering  electronic numerical integrator computer prominence important later yield draft report  electronic discrete variable automatic computer concept programmable electronic computer instruction memory grace  spirit ada   software  distinct machine hardware instance abstraction program devise program closer expression machine hardware furthermore  realize computer translate expression machine compiler  II compute split germany   gravity compute program purpose computer england  park alan turing laid theoretical foundation computer however engineer notably  theory pragmatic    computer primary operator   codify workflow eventually programmed machine  later  dominate scene program wiring  task computer mostly    snyder france      organize reminiscent harvard computer manner anticipate structure contemporary development focus continuous integration II compute birth software engineering technical economic software engineering coalesce economic II compute apply domain beyond conflict herman  built  john von neumann notation eventually morph flowchart   david wheeler   concept subroutine compute abstraction manifest pragmatic algorithmic decomposition john  grace  yield fortran imperative dominate scientific compute commercial  global conflict automatic aid compute opportunity growth quickly  reliability computer computer commercial lyon electronic leo john  leo engineer insight software treat component  realize program task bundle routine library operating framework another program abstraction grace  robert  jean  others influence john   another imperative focus business introduction ibm software specific machine ibm decision  software hardware transformative develop software component individual economic around organization emerge predecessor source software movement platform software hardware UK dina johnson seize business opportunity establish england software service business manifest outsource software development compute specific domain knowledge posse  union generate another software engineering tom   explore possibility program directly sage construct defense  threat nuclear   sage important innovation issue computer interface crt display pen  core memory associate building software distribute environment software development longer computer increasingly expensive certainly important confluence important software commercial software  complexity defense sage critical software demand program context  hamilton coin software engineering  declare software crisis sort program  software development era computer programmer computer apart climate pipelined punch era analyst requirement pas programmer flowchart devise algorithm programmer pas program  deck computer operator  economics computer   realization christopher  model development context principle software project management alive  brook profoundly described  brook important insight software engineering technical economic II boost inevitably  shift  described john   introduction personal compute fuel technical social advance software engineering programmer expensive computer economically viable computer everywhere allen   compute described wonderful essay  sixty eighty maturation software engineering mature   introduce concept modular program couple cohesion apply mechanism algorithmic decomposition  dijkstra formal approach important software engineering structure program introduction personal compute software engineering around important researcher robert floyd  hoare devise formal express program attempt computer software engineering   pascal effort explicitly structure program ole dahl    wonderful yield invention  orient algorithmic   formal software development although criticize waterfall methodology actually advanced iterative development importance prototyping artifact beyond source code couple david  information hiding   abstract data peter chen approach entity relationship model vibrant whereby express artifact software development generation software engineering methodology  ross    tom  chris    michael jackson developed structure analysis michael  software inspection james martin information engineering john  functional program  lamport distribute compute software engineering golden eighty onward golden however owe software quality  software intensive globalization software shift program distribute approach ole dahl   orient program completely program smalltalk ada others although structure useful altogether sufficient golden software engineering ada department defense proliferation program software catalyst era structure pioneer pivot james martin  celebrate orient approach others completely stephen  peter        jim   model technique  jacobson  opportunity united become unified model unified aspect software engineering   model software architecture barry boehm software economics spiral model   empirical software engineering  jones software metric  mill software engineering donald knuth literate program watt  capability maturity model simultaneously software engineering concept influence development entirely generation program   become later influence creation java alan cooper visual  platform brad cox invention objective tremendous  furthermore cox surround component engineering another software engineering abstraction directly microsoft ole link embed com component model predecessor microservice architecture ninety  era disruption another internet suddenly unexplored platform distribution default consumer stakeholder user billion participant ecosystem necessarily reliable trustworthy longer building program building longer exist relatively stable economically vibrant software engineering community independent exist requirement analysis development configuration management continuous integration incremental iterative development become norm gang eric gamma richard helm  johnson john  another bump software engineering abstraction institutionalize  heavily influence generation software development jim  software apply organizational mary shaw david  concept software architecture style development era eric  evolve important legal framework source compute kiran  india establish outsource contract india foundation transformative economic shift software development internet organization embrace possibility mobile device scene foundation laid brad cox component engineering morph service architecture morph microservice architecture evolve web technical infrastructure program handful dominate java javascript python php swift compute mainframe datacenter couple microservices internet evolve become facto compute platform specific ecosystem  amazon google microsoft facebook  ibm really economically built fortress framework religious battle operating battle  along  explosion source framework bootstrap jquery apache nodejs mongodb  cocoa caffe flutter truly  collection longer program monolithic apps interact distribute agile various personality variation become dominant necessarily perfectly     coin scrum agile approach development later ken schwaber independently jeff sutherland jeff  codify principle domain software development around kent beck introduce concept extreme program  johnson developed refactoring martin fowler codify  improve exist code february  met   pen agile manifesto agile approach software development mainstream software engineering another golden git github emerge   stack overflow  introduce  andrew  patrick  devops stack developer become internet imaginable everyone code artifact SWEBOK engineering knowledge  exist attempt codify software engineering decade ahead data AI software engineering undergo another architect operation cannot explain fully trust foundation AI around decade decade AI manifest extreme fortune growth data abundance raw computational presence  economic statistical approach neural network viable advance signal AI neural network gradient descent complex image video audio signal outcome impressive evidence ibm watson google AlphaGo understand limit  model computation built AI fully understand impact software engineering certainly lifecycle component program configuration management data truth important neural network architect operation cannot explain fully trust challenge generation software engineering vibrant growth quantum compute augment reality virtual reality compute device   beyond tremendously compute compute progression mathematical symbolic   reality software building  without blueprint fail another software building economics failure software engineering  radical innovation constrain cultural social ethical moral context everyone medium technology domain fundamental software engineering apply craft abstraction maintain separation concern strive balance distribution responsibility seek simplicity pendulum swing symbolic  quantum model computation intentional architecture emergent architecture compute fundamental dozen software engineering software engineering unique contribution future software engineering closing keynote international conference software engineering florence software invisible whisper possibility hardware storyteller