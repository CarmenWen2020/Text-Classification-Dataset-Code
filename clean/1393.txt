discussion traditional developer manager concern agile software development nearly somewhat contradictory alone project agile burdensome tune software increase rapid development cop continuous manager barrier perceive agile approach traditional organization categorize barrier scope significant issue resolution category identify development conflict business conflict conflict critical challenge software manager organization agile approach project discussion traditional developer manager concern agile software development nearly somewhat contradictory alone project agile burdensome tune software increase rapid development cop continuous agile sidebar explains characteristic useful however frustrate difficulty integrate traditional development organization response daunt  barrier march southern california software engineering usc cse affiliate annual research review fourth series annual workshop identify barrier discus conflict traditional engineering http  usc edu participant agile developer traditional aerospace telecommunication developer agile creator academic collection related challenge nearly perceive barrier agile implementation category barrier agile sidebar workshop participant consensus perceive barrier   sidebar categorize barrier scope significant issue resolution category identify development conflict business conflict conflict critical challenge software manager organization agile approach project development conflict obvious difficulty merge agile lightweight standard industrial without agility undermine spent define refining software engineering asset forge alloy disparate technically  challenge manager creative succeed annual workshop aerospace manufacturing agile enthusiastic agile adopter pilot program consist pure agile apply isolated possibly fail project hybrid agile traditional generally risk application almost pilot successful minimally extend evolve interoperate agile variability manage variability subsystem proven agile traditional develop software develop radically artifact integrate easily without coordination agile domain assumption GUIs commercial shelf choice significantly developer counterpart assumption functionality delivery agile specific emerge incorporates customer feedback interface definition agile evolves interface risk develop standard however traditional approach lock interface specification  agile refactor organization specific attention identify synchronize organization experienced medium multiple daily meeting become untenable competent leader posse technical agility cycle cycle agile focus immediately deliver functionality traditional focus optimize development longer traditional longer cycle adjustment agile documentation traditional training output agile driven agile readily maintenance phase automatically regression agile development entire development cycle maintenance phase focus iteration merge agile lightweight standard industrial without agility legacy apply agile legacy within maintenance development numerous issue legacy generally easy refactor disassemble accommodate agile replacement capability increment legacy institutionalize awkward  business embed culture easy refactor away requirement difference agile traditional approach perform requirement agile requirement tend primarily functional reasonably informal engineering verification validation approach strengthen agile requirement approach additional information information requirement statement specifically address nonfunctional requirement reliability security suggestion approach organization integrate agile traditional serious preparation conduct significant analysis exist propose identify mismatch requirement expectation tailor project asset indispensable instance rigor component define specific functionality responsibility address agile approach gui intensive application cycle mention earlier maintenance agile approach develop architecture  agile traditional identify agility characteristic architectural evaluation requirement likely rapidly approach unclear designate agile opportunity realign redefine traditional milestone review iterative approach fashion standard review cycle anchor milestone spiral rational preliminary review developed code prototype implement agile exist organizational priority exist prioritize requirement helpful schedule requirement emerge continuous integration helpful earlier later organizational priority benefit agile rapid application development aid continuous integration program typically percent effort percent calendar  counterpart schedule independent variable evaluate risk overall approach agility attribute project decision risk versus agility counterpart risk planning architecting cocomo II analysis architecting indicates source code project devote percent project schedule planning architecting percent investment usually sloc percentage closer zero developed mature architectural framework middleware package agile agile lightweight employ iterative cycle actively involve user establish prioritize verify requirement rely tacit knowledge oppose documentation truly agile iterative cycle incremental deliver entire organize handle emergent principle structure recognize project predetermine agile  agile source advanced development inc  com  agile source advanced development inc  com concept  belong communication metaphor program management planning cycle frequent delivery technical refactoring driven agile concept embrace ally allows creativity quicker customer cycle frequent delivery schedule release span implementation priority function delivers customer quickly requirement emergence  establishes specific frame prioritize functionality developed battle     strip develop inevitable planning future function waste effort refactoring restructuring software remove duplication improve communication simplify flexibility without behavior redesign program style program programmer computer continually collaborate algorithm code retrospective reflection iteration review effectiveness perform estimate review estimation future iteration tacit knowledge establish update project knowledge participant document explicit knowledge driven development developer customer incrementally module cod encourages iteration cycle implement agile approach obviously integrate agile approach philosophy traditional environment otherwise challenge upon research software progress earn ratio identify unnecessary function therefore implement cycle focus specific capability specific description functionality identify misconception customer developer earlier agile emerge requirement capability specification traditional approach agile rapid customer deliver capability traditional sort agile empower developer suffer constraint agile proven generally currently accepted category barrier agile participant usc cse annual research review identify category perceive barrier implement agile  quality assurance agile inadequate manage defect refactoring rework agile monolithic quantitative management extension effectiveness automatic acceptance integration perception agile extreme  responsible agile project  scope configuration management earn agile focus feature business traditional focus activity stakeholder requirement planning documentation deployment cycle training cycle  decay rate tacit knowledge risk management contract pebble milestone QA standard standard DoD  battle significant issue resource load slack  evaluation colocation customer access nonfunctional requirement documentation critical review milestone contractual source selection issue interfacing integration methodology discipline predictability perfect knowledge  regulatory constraint HR policy interface role responsibility agile legacy formal requirement engineering model maturity assessment traditional engineering measurement estimation comment challenge issue integrate advance software development approach traditional engineering approach address issue opinion manage integration software engineering engineering sidebar business conflict overlook difference agile traditional engineering everyday business conduct estimation resource load slack calculation significantly uncertainty ambiguity exists evolutionary iterative particularly estimate likely agile approach certainty ambiguity conundrum business infrastructure perfect prediction estimate task encourage experimentation evolution  accept  resource organization accommodate resource issue  description orient versus individual reward agile development member boundary standard development description significantly adequately perform  HR department procedure frequently empower pursue  approach organization revisit legally vet audit policy procedure progress measurement traditional contract milestone progress measurement technique inadequate agile rapid pace contract payment tend mil std milestone preliminary critical review almost meaning agile environment traditional earn impossible apply agile breakdown structure inadequacy flexibility  agile measurement requirement  requirement function backlog accomplish completion successfully reasonable substitute traditional standard rating conflict mature organization agile affect rating respect CMMI iso standard agile concept constantly adapt improve performance unfortunately agile documentation infrastructure certification agile effective enlighten  agile alternative instance although safety critical component certification rigorous appraisal suggestion address business issue numerous research topic promise possibility address HR issue pilot project impact traditional initial delay considerable confusion feeling issue arise mid project apply throughput accounting accounting software development project david anderson discus extensively agile management software engineering develop management architectural hybrid agile driven establish standard characteristic stable component evolve requirement environment investigate update contract agile concept  payment upon delivery software demonstration progress completion artifact review develop contract provision incentive client satisfaction agile development identify incompatible assumption model clash compatible assumption synergy agile traditional within organizational eliminate clash  synergy conduct empirical unpredictable therefore agile predictable suitable traditional driven research modify  legacy enable agility compatible engineering maintenance replacement extension establish guideline agility compatible maturity assessment sei improvement quickly address acknowledge agile establish standard assessor handle  barrier participant identify usc workshop deem  perception false myth organization easily eliminate issue without significant agile traditional business myth stem misunderstand lack clarity intent actual operation agile refactoring program engineer react   proclaim extreme myth arise encounter counterfeit agile software developer agile reality simply hack  easy eliminate quality management generally organization adopt broader definition traditional measurement critical agile particularly establish development velocity critical  however organization reinterpret easily exist quality defect management intrinsic agile activity necessarily traditional approach imagination program driven development daily traditional quality acceptance program management agile define developer remainder organization coach certainly aspect management discipline opinion manage integration software engineering engineering march issue computer barry boehm described reactive adversarial software engineering unified concurrent address rapid development dynamically software intensive software considerably agile concurrent hardware intensive engineering discipline largely continued sequential document driven sequential approach waterfall concept relatively requirement allocate hardware software developer configuration item integration validation mil std review development cycle stable environment software software development somewhat pace environment software user interaction majority functionality requirement tend emerge evolve rapidly hardware expensive evolve establish requirement specification without interactivity software risky transition software engineering aggressively embrace iterative concurrent unfortunately significant issue engineering recently hardware intensive mainstream engineering recognize although waterfall approach hardware production planning preparation synchronize software spiral disconnect visible network centric software responsible percentage functionality infrastructure various organization standard capability maturity model integration effort modernize integrate discipline however fully mitigate software risk attempt develop integrate breed developed performance responsibility guideline usually  discovery incompatible commercial shelf gui architectural decision integrate  poorly coordinate powerpoint uml architectural risk discover development cycle iterative development traditional discipline generally establish increment functionality focus without overarch architecture risk  amount breakage rework later increment stringent requirement crosscut attribute safety security scalability essential critical factor emerge expectation management component evolve unrealistic schedule budget continuously revise upward lose lose software engineering proceed concurrently coordinate manner coordination  asynchronous machine engineering activity periodic synchronization synchronization formal informal mechanism exist define reasonable outcome relatively critical establish adjust activity risk issue analyze downstream impact  outcome development evolve architecture driven prototype experimentation crucial define characterize architecture multiple development sufficient guidance concurrency coordination mention earlier particularly component source legacy independently evolve built  architecture  contractual agreement establish avoid unaffordable rework incompatible component compatibility organizational structure business fourth factor communication component developer engineer architect conceptually bandwidth readily accessible integrate evolve independent management lose importance teamwork flexibility agility vision prevent  local optimization contract incentive structure reflect understand finally manage risk critical manage risk risk exist hierarchy risk rapidly management identify respond quickly become serious program threaten program actively seek risk discus across development hierarchy intentionally crosscut risk mitigation activity undergo constant evaluation effectiveness quickly perform ripe software engineer software along unpredictable requirement engineering successfully integrate exist component intentionally lifecycle definition incorporate discipline capitalize strength reference boehm unify software engineering engineering computer vol conflict issue critical improve management engineering development personnel address vital adoption integration agile issue agile movement paradigm aim empower individual reasonable goal shorter feedback cycle ownership flexibility management attitude migrate traditional agile management attitude management earn statistical evolve manufacturing paradigm tend cast employee interchangeable manager tend associate employee specific role difficulty multitasking characteristic agile member project manager agile primary role protector coach barrier organization minimize unnecessary perturbation sprint development cycle experienced technical traditional manager function agile focus logistical issue logistical issue directly affect agile environment agile nearly colocated typical agile workspace program status assignment layout allows member easily converse information sufficient equipment continuous integration regression reminiscent engineering  HBO series handle successful pilot negative impact organization handle pilot project overlook reporting outcome usc workshop   described frequently response successful agile pilot promote manager split destroys relationship technical personal  knowledge gain lesson sends message hazardous career management management expert organizational  something exist culture concern inadequacy   assignment business  arouse defense mechanism rapidly deploy destructive behavior cultural  agent adopter deliberate sabotage project indirect clearly agile concept migrate traditional organization vice versa  vector employee simply refuse identify   someone oppose disable particularly damage agile context agile rely heavily trust tacit knowledge program ownership moot effort within organization affected introduction agile stakeholder particularly customer significantly role agile strongly onsite customer significant customer interaction feedback customer input acceptance attention customer education smooth transition suggestion address issue understand communication occurs within development incorporate agile discussion   agile software development educate stakeholder counter  education ancient honor tradition customer manager practitioner engage speaker discus specific methodology  possibly negative impact  translate agile software issue management customer engage upper management customer fruitful discussion software issue  response discus technical issue technical issue audience easily emphasize software engineering traditionally neutral requirement defect essentially equally important agile emphasize negotiate prioritize requirement expectation manage  acknowledge member entity organization customer reward pilot project definitely eliminate pilot appreciation regardless outcome member reputation organization vulnerable organizational  minimize effort  reward recognize individual contribution identify barrier integrate agile traditional perceptual technical however technical barrier exist insurmountable confident organization overcome diligence patience clearly agile concept migrate traditional organization vice versa  vector research approach harmonize software consortium finalize document discipline agility describes approach implement agile maturity compliant environment importantly capture metric data lesson data critical validate integration activity return investment lesson rapid integration eliminate repetition ineffective approach disseminate across organization throughout community