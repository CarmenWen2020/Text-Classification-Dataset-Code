 hamilton theory error derive error along axiom universal USL automation preventative paradigm development issue away largely traditional paradigm preventative paradigm error define unlike traditional approach preventative approach reliable productivity lifecycle article theme issue software engineering  preventative paradigm error define approach reliable productivity lifecycle exist software concerned become familiar available command computer sometimes computer manufacturer understand english demonstrate ability novel program project demand become later software engineering  building flight software apollo mission software engineering celebrate issue software international conference software engineering exist assignment prediction software hexadecimal  mit edward lorenz understand hardware relationship software knowledge increase software performance priority error  debug forever longer overnight spending hexadecimal code instead tape machine code binary generate computer hexadecimal program breakthrough realize directly tape  pencil scotch tape approach hack error prone another project sage semi automatic environment defense lincoln laboratory developed software  computer  unfriendly aircraft important error computer everyone machine crashed siren  throughout building operator programmer program crashed belong programmer console secret guilty location program halt register console flash information crash register content error code program crash challenge  programmer bug become creative program computer operator something terrible program longer  rush debug understand error error prevent future apollo onboard flight software sage drama error apollo onboard flight software project mit contract nasa challenge unique rat software meaning astronaut stake software  detect error recover disappoint mission drama apollo everything accord something totally unexpected astronaut onboard apollo guidance computer  become  software priority display display interface routine alarm interrupt astronaut normal mission display warn emergency nasa mission understand alert astronaut rendezvous radar switch priority display astronaut decision quickly become software inform everyone hardware related compensate spare decision apollo astronaut become software become software software develop future surround mission task develop command module CM lunar module LM software  software reside within CM LM flight software glue define integrate manage relationship mission phase routine update software continuously submit release mission document approval official version everything finely tune orchestra interface error data timing priority conflict software software involve hardware   flight software asynchronous priority interrupt priority accomplish developer assign unique priority ensure software relative everything earlier within software within asynchronous environment become basis within distribute environment become apparent although execute  environment exist parallel execute backdrop priority display machine interface astronaut software synchronous asynchronous flight software astronaut become parallel within distribute environment software error detection recovery program recompute snapshot rollback restart capability priority display loop capability warn astronaut replace normal display priority display without integrate approach innovative contribution hardware mit hardware mission planning houston astronaut procedure closely accommodate priority display CM LM emergency throughout mission mission prepared astronaut display interrupt priority display addition software developed outside code submit become flight software someone navigation analysis submit approval code supervision update become integrate software strict onboard flight software ensure flight software module aspect module completely integrate interface error within module development exist dramatic dictate requirement thrown mission expert software expert software expert software  within  integrate mission related requirement software become understood everyone application orient flight software realize mission requirement mission expertise mission expert software expert vice versa mission engineer software engineer necessarily become interchangeable lifecycle phase discipline originate perspective software issue become understand subtlety develop asynchronous flight software software expert responsibility necessitate evolve standard develop software emphasis prevent error although error software  phase onboard flight software error flight apollo mission invaluable within assembly supervisor ACS  code submit mission LM CM apollo CM another apollo LM ACS  eyeball designate interface error violation cod throughout official flight software release interim update certainly practical software actual mission hardware digital simulation aspect apollo mission loop simulation simulated interaction variation simulated hardware integration mission behave exactly preventative paradigm initial funding nasa department defense perform empirical apollo effort error opportunity error lack mention opportunity responsibility error without error sometimes drama  audience evolve theory error theory derive error theory evolve basis lesson apollo later project axiom derive allowable become basis universal USL automation preventative paradigm development unlike typically traditional instead computer user defines relationship formalism mathematics USL axiom theory formal application define function fmaps  fmaps define function relationship function  define relationship fmaps inherently integrate  define fmaps  robot exploration define function fmap  TMAP robot fmaps dynamic action capture functional temporal priority characteristic  static capture  importance characteristic define universal primitive structure dependency independency alternative robot explores environment reactive sensorimotor memory distribute independent relation TMAP structure  robot exploration define function fmap  TMAP robot fmaps dynamic action capture functional temporal priority characteristic  static capture  importance characteristic define universal primitive structure dependency independency alternative robot explores environment reactive sensorimotor memory distribute independent relation TMAP structure  USL define maximize potential reuse reliable define reliable universal primitive structure derive axiom  structure derive ultimately primitive structure specify primitive function resides fmap leaf node corresponds primitive operation TMAP primitive define primitive operation axiom reside TMAP leaf node define application domain primitive operation realize fmap layer correctness accomplish define built inherent USL grammar USL definition model application avionics cognitive lifecycle mathematical approach understand limited nontrivial unlike formal USL extends traditional mathematics mathematical logic unique concept enable definition realization mathematical formalism hidden mechanism derive formalism semantics dependent syntax independent preventative important perspective asynchronous driven distribute behavior inherently lends detect automatically recover error whereas apollo developer explicitly schedule flight software assign unique priority USL longer priority inherent grammar fmaps  function within totally function unique priority along become define USL inherently development eliminate task procedure previously become longer analyze code ensure conforms specification assign unique priority schedule manually discover USL define realize traditional approach user fix USL preventative paradigm instead error error lifecycle majority error interface error subtle error define nonexistent error becomes obsolete endeavor whereas error phase traditional development USL prevents eliminates error definition derivative software software automatically generate formal definition inherit definition instead automation lifecycle lifecycle automate integration traceability within definition software seamless USL automation error incorrect USL code documentation software automatically generate command automatically generate another resource robot USL architecture automation configure generate implementation resource architecture choice database package user legacy code status functional impact  fmaps automatically  analyzer reestablish status maintenance benefit developer code application USL definition code target resource architecture generator environment configuration code regenerate integrate application automatically analyze generate compile link execute without manual intervention software issue exist earlier exist largely traditional paradigm around traditional paradigm exist preventative paradigm counterintuitive traditional approach becomes intuitive preventative paradigm reliable productivity lifecycle discover essence along realization something longer lifecycle develop  happens application developed USL development developed USL USL automation completely define USL automatically generates future research government commercial organization conduct throughout USL evolution approach traditional approach within diverse domain formal technology computer aid software engineering domain analysis model driven development uml SysML  functional requirement operational validate code  observer agency sponsor competition USL medium reliability productivity importance error without unexpectedly paradigm future educate paradigm becomes challenge