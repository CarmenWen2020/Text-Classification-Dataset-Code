architectural technical debt TD significant TD industrial goal understand phenomenon architectural practitioner manage relevant researcher metaphor technical debt TD reflect technical compromise software practitioner achieve advantage expense technical context increase complexity TD incur throughout entire software development multiple identify requirement architecture code architectural TD ATD significant TD typically architectural decision software lifecycle impact architectural ATD instance ATD item ATD item define commonly although intentionally architectural decision negatively impact quality manifest undesired dependency unbalanced distribution responsibility excessive couple component software principle ultimately affect maintainability evolvability presence inevitably architecture analyze despite recent attention research community topic investigate practitioner understand associate maintainability issue address shortcoming interviewed software developer architect opinion industrial regard research rqs specifically focus practitioner perceive maintenance evolution issue associate introduce adopt goal enrich researcher understand inform practitioner manifest scenario ultimately management perform regard rqs RQ perceive practitioner RQ maintainability evolvability issue experienced practitioner relate presence RQ practitioner introduce practitioner understand relate issue experienced others obtain deeper knowledge manage researcher understand experienced practitioner exactly contribute TD data interview practitioner europe operating domain embed enterprise application development program java participant practitioner background activity junior developer architect average project code loc loc loc interview semistructured approximately min chose interview clarification ensure participant understood detail online appendix available http doi org ezproxy auckland MS exist limited scope detect available important currently described literature cyclic dependency CD software artifact file package component upon cycle CD acyclic dependency principle increase couple hub dependency HL artifact excessive incoming outgo dependency hub HL modularity hub overload responsibility exacerbates dependency structure unstable dependency UD package construct component dependency package stable increase package stable resilient package UD stable dependency principle direction stability affected package depends package stable god component GC package component code noticeably component GC modularity aggregate concern package important participant limit mention related perceive RQ participant report familiar GCs practitioner report personal manage GCs perceive maintenance issue reduce evolvability affected component mainly complexity characterizes instance almost practitioner architect opinion underlined importance vividly architect instead express skepticism importance disregard technical splitting GC opinion CD generally align interviewee detrimental maintainability reliability testability concern reliability deadlock mostly express participant project highlight CD instance issue risk future undertaking interviewee java perceive CD detrimental GC difference perception probably due application domain difference java typically symptom profound issue architecture however CD affected reliability testability presence developer resolve opinion polarize HL participant mention intentional decision concern understandable easy participant express however respondent java mention HL important avoid easy manage hinders maintainability evolvability understand insert code presence HL concern UD participant generally perceive threat maintainability evolvability highlight concern ripple associate underline importance avoid dependency package constantly evolve nevertheless developer express doubt importance fully understand feedback detrimental perceive differently practitioner educational background application domain GC CD perceive important HL manageable UD detrimental critical important account UD visible cannot package stable another without employ dedicate finally existence slight correlation interviewee concern express junior participant tend concerned presence CDS impact deployed senior interviewee  evolvability related member GC impact maintenance evolution RQ participant plenty anecdote maintenance evolution issue associate presence almost anecdote GCs involve difficulty understand functionality component mainly excessive internal entanglement file significant amount functionality implement functionality scatter across component relationship GCs code duplication frequently component affected GC grain easily reuse inside outside component entangle hence developer reuse exist functionality prefer entire adapt purpose instead extract reusable functionality duplicate code enlarges exist GC CD diverse deadlock throughput unclear chain command component separation concern cycle report intertwine mess understand package request data another package request initial package issue significant amount effort fix along production customer participant mention widespread impact cycle prevent creation microservice subset package package cycle microservice desire functionality isolated concern HL practitioner associate issue difficulty understand logic central component ripple propagate component central component depends upon component mention overlap UD former usually associate central component expose functionality interface latter unexpected practitioner relate initial activity bug fix maintenance issue associate UD ripple instance practitioner report functional component package file component report participant possibility propagate component increase difficulty practitioner compatible component avoid recompiling component introduce manage RQ participant report introduce interviewee admit happens instance concern GCs component file intend subsequently report interviewee developer tend underestimate severity introduce GC incremental apply contribute introduce inadvertently participant report separation concern exploitation inheritance CD another respondent mention dedicate interface hide unstable component avoid propagation however precisely description UD misinterpret introduce unavoidable accepted evil participant explain imminent deadline focus develop feature structure code without maintainability management participant refactoring refactoring GCs splitting component apply incremental detach easy subcomponents interviewee manage CD remodel involve dependency hierarchical structure others report replacement interface slowly migrate client refactoring exist component contrast developer commonly refactor HL effort tend code around without remove develop feature persist mention refactoring absence comprehensive regression suite concern refactoring participant mention usage sonarqube code readable maintainable refactoring quality code refactoring consume another respondent program senior developer valid however interviewee report adoption refactoring avoid refactoring client refactoring visible production intervene finally practitioner manage sonarqube mention respondent regard detect cycle besides practitioner rely specific manage nonetheless participant mention feature ideal manages due limitation feature report online appendix available http doi org ezproxy auckland MS summarize rqs summarize perception prevention introduction presence described participant parenthesis report data appropriate associate summarize perception prevention introduction presence described participant parenthesis report data appropriate associate discussion implication clearly incur ATD architecture impact maintainability evolvability affected harder implement increase effort understand implication easy underestimate effort ahead practitioner aware inform struggle  prioritize deliver feature fowler  deliberate TD practitioner understand implication decision incur TD practitioner sooner later apply refactorings proceed implementation feature mention participant considerable amount TD extend emerge interview TD incur inadvertently  knowledge affected component request parameter belongs another component  optimal becomes implement chosen introduction TD  detect automatically lack adoption dedicate manage practitioner mostly focus code TD rate regardless incur TD inevitable inherent software development practitioner adopt enable management TD item manage detect recently detect practitioner another important prevention practitioner attention internal dependency balance changeability dependency per file file become entangle modify GCs CD modify reuse dependency graph multiple implement functionality apply repetitive practitioner carefully balance dependency devise architectural prevent creation undesired dependency generate research date focus precisely address issue culminate development arcan detection dependency analysis easy practitioner java python