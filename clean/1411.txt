microservices application responsibility deployed independently gain momentum across facilitate agile delivery mechanism service orient architecture migrate function orient legacy architecture highly flexible service orientation article brief overview microservice technology migrate editor microservices gain momentum across facilitate agile delivery mechanism service orient architecture migrate function orient legacy architecture highly flexible service orientation international data corporation forecast percent application development platform microservices  software technology        brief overview microservice technology migrate hearing reader prospective author christof ebert inspire service orient compute microservices application responsibility deployed  decomposition monolith module execute independently granular interact via message rpc apis restful web service instance enables organization achieve  continuous delivery representational transfer enables agile structure around service microservices definition autonomously developed microservices devops increase software engineering impact benefit however microservices challenge disadvantage challenge  monolith microservices continuous architecture monitoring deployment complex versioning deprecate management disadvantage microservices involve factor experienced staff difficulty technology amazon   linkedin netflix  guardian uber  quickly adopt microservice approach microservices modernize legacy application goal split monolithic microservices refactoring incremental modernization legacy software risky completely  microservices technology microservices microservice software application granular modular concept service orient architecture soa followup fragment complex application fluid delivery model delivers service demand improve performance devops framework develop deploy manage microservice container ecosystem service orient refactored architecture devops ensure delivery cycle integrate previous silo style business development operation variety microservice technology evolve overview technology rate qualitatively basis grade microservice technology grade microservice technology migration microservices introduce microservice migration guideline prepared organizational microservices ahead business culture identify dependency retrace   manually define architecture architectural structure define framework although specific migrate postpone platform selection devops enablers architecture earlier prioritize component migration develop criterion migration perform approach risk adoption migration perform cod integration adopt agile approach devops phase  git github jenkins phantom kubernetes microservices software evolution significantly affect quality attribute security data microservices exists secure communication encryption technique authentication mechanism implement sidebar performance generally microservices perform monolith performance depends factor network aspect latency instance virtualization deployment virtual machine imposes additional performance overhead reliability microservices distribute reliable monolith availability microservice architecture availability depends micro service availability integration microservices reduce deployment increase availability maintainability microservices independent maintainability approach aspect testability microservice easy monolith however integration complex component connection microservices security develop application sonarqube  related origin resource CORS sonarqube analyze source code site application service information site CORS application additional http header gain permission access resource server origin domain normally browser request security instance avoid cyberattacks microservices scenario microservice architecture affect CORS behavior configure CORS option web browser scenario user access browser website information service scenario user access browser website information service server browser implement CORS accord WC user agent commonly apply origin restriction network request restriction prevent client web application origin obtain data retrieve another origin limit unsafe http request automatically launch destination application origin basis mitigate CORS security risk properly configure CORS available browser browser environment enable disable origin resource CORS migration interrelate technical challenge regard   data consistency migration tackle ensure addition aspect potentially threaten migration monolith decouple data splitting communication service effort estimation devops infrastructure resistance sum challenge technical economic psychological mention microservices typically distribute agile devops delivery model delivery dependency impact analyze validate packaging across network microservices incur significant performance penalty compensate additional architectural tweak cache layer impact application lifecycle management lifecycle management along devops microservices automation application infrastructure manual infrastructure provision configuration management facilitate production provision reduce configuration maintenance complexity optimize microservice architecture recreate production development machine monolithic software microservice approach microservices facilitate convergence classic embed obviously complex critical application availability security constraint address entirely volatile delivery model achieve continuous delivery embed device machine machine communication internet architecture implement however critical application failure option automotive medical aerospace domain conservative approach focus availability safety performance successful microservice appropriate software architecture application domain currently microservice technology evolve evolution serverless compute approach encapsulates functionality business functionality authentication validation monitoring host microservice handle aspect execute business function serverless function service FaaS amazon web service lambda google function host business function microservices devops recommend tailor devops strategy immediate owe integration across lifecycle gradually evolve microservice delivery model appropriate