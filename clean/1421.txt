software fault localization identify location fault program widely recognize tedious consume expensive equally critical activity program debug due increase complexity software manually fault failure rapidly become infeasible consequently demand technique software developer location fault program minimal intervention demand fuel proposal development spectrum fault localization technique aim streamline fault localization effective attack unique article catalog comprehensive overview technique discus issue concern pertinent software fault localization introduction software fundamental increase usage adoption influence practically ubiquitous software employ critical security safety critical medicine  nuclear surprisingly trend accompany drastic increase complexity software unfortunately software bug execution failure loss furthermore software fault safety critical significant ramification financial loss potential loss alarm prospect report national institute standard technology nist software error estimate economy billion annually percent GDP undoubtedly grown fix respond bug software user software developer vendor absorb fault software discover due erroneous behavior manifestation fault fix entirely fault localization focus former identify location fault historically manual task recognize consume tedious prohibitively expensive complexity software furthermore manual fault localization relies heavily software developer judgment intuition identify prioritize code likely faulty limitation surge develop technique partially fully automate localization fault software reduce input technique data consume program component focus comparative effectiveness efficiency etc attack fault localization unique perspective typically advantage disadvantage relative another technique already existence others continually propose advance theoretical practical perspective important catalog overview technique fault localization comprehensive resource already interested contribution survey publication related software fault localization publication repository publish november thesis closely related software fault localization recent thesis software fault localization repository sort displayed publication rapidly researcher devote software fault localization software fault localization november per repository publication related software fault localization quality journal conference focus software engineering transaction software engineering acm transaction software engineering methodology international conference software engineering acm international symposium foundation software engineering acm international conference automate software engineering november trend software fault localization important popular research topic heavily quality software engineering journal conference publication software fault localization venue november publication software fault localization venue november collection literature various technique aim facilitate fault localization effective despite technique goal another stem originate discipline aim comprehensively fault localization technique article regardless breadth depth survey primary focus technique  diagnose  performance bug memory leak software bloat security vulnerability scope due limitation technique appropriate category collective discussion emphasis important feature detail technique respectively publish technique target specific application domain fault localization concurrency bug spreadsheet review reader understand repeatedly throughout article convenience definition per taxonomy failure service deviate behavior error failure fault underlie error bug remainder article organize manner traditional intuitive fault localization technique advanced complex technique popular program discus program evolve evaluation metric ass effectiveness fault localization technique described discussion fault localization finally critical aspect conclusion respectively traditional fault localization technique describes traditional intuitive fault localization technique program assertion breakpoints profile program statement program commonly insert code hoc fashion monitor variable program information abnormal program behavior detect developer examine program file information diagnose underlie failure assertion assertion constraint program operation program developer specify assertion program code conditional statement terminate execution evaluate false detect erroneous program behavior runtime detail assertion program debug breakpoints breakpoints pause program execution specify user examine breakpoint trigger user modify variable execution progression bug data breakpoints configure trigger specify expression combination variable conditional breakpoints pause execution upon satisfaction predicate specify user approach developer bug program execute symbolic debugger approach adopt advanced debug gnu gdb microsoft visual studio debugger profile profile runtime analysis metric execution memory usage typically aim program optimization however leveraged debug activity detect unexpected execution frequency function identify memory leak code performs unexpectedly poorly examine lazy evaluation profile program debug gnu  eclipse plugin tptp advanced fault localization technique massive software traditional fault localization technique effective isolate failure advanced fault localization technique recently causality related philosophical theory objective characterize relationship program bug phenomenon execution failure causality model counterfactual probabilistic statistical causal calculus model probabilistic causality model widely fault localization identify suspicious code responsible execution failure survey classify fault localization technique category slice spectrum statistic program machine data mining model miscellaneous technique evaluate effectiveness specific fault localization technique report however none comprehensive discussion technique slice technique program slice technique abstract program reduce delete irrelevant slice behave program respect specification topic publish  propose static slice important application static slice reduce domain programmer bug program fails due incorrect variable statement defect static slice associate variable statement confine slice entire program   extend approach construct program dice difference static slice reduce domain location fault although static slice technique experimentally evaluate confirm useful fault localization handle pointer variable data analysis inefficient data introduce dereferences pointer variable equivalence analysis identifies equivalence relationship various memory location access procedure improve efficiency data analysis presence pointer variable equivalent memory location identical data procedure data analysis compute information representative memory location data equivalent location garner representative location static slice apply fault localization binary executables checker disadvantage static slice slice variable statement contains executable statement possibly affect variable statement generate dice statement cannot predict via static analysis exclude extra statement dice slice dynamic slice instead static slice former identify statement affect location possibly affect latter dynamic slice concept program debug report  combine dynamic slice model diagnosis achieve effective fault localization suite program dynamic slice erroneous variable discover construct statement dynamic slice probability statement faulty calculate statement propose multiple dynamic slice technique intersects slice technique backward dynamic slice  dynamic slice  bidirectional dynamic slice   capture execute statement affect output faulty variable  compute minimal input difference fail successful isolate input trigger failure  flip predicate execution fail program generates output qian propose scenario orient program slice technique user specify scenario identify extra slice parameter program related computation execution scenario implement scenario orient slice technique scenario input identification scenario relevant code finally gathering scenario orient slice limitation dynamic slice technique cannot capture execution omission error execution critical statement program omit failure propose relevant slice faulty statement responsible execution omission error fail execution relevant slice construct dynamic dependence graph classic dynamic slice augments dynamic dependence graph potential dependence relevant slice compute transitive closure incorrect output augment dynamic dependence graph however incorrect dependency program statement  relevant slice address introduce concept implicit dependency dependency obtain predicate switch identify omission error concurrent program dual slice combination dynamic slice trace differencing alternative approach static dynamic slice execution slice data program bug execution slice respect contains statement execute execution slice static slice static slice focus statement possibly impact variable input versus statement execute specific input implies static slice input reveal fault violates important concept debug suggests programmer analyze program behavior fails generic dynamic slice consume excessive file algorithm propose address issue conversely relatively easy construct execution slice code coverage data execution execution slice debug developed   formerly    apply execution slice fault localization examine execution dice fail successful program bug extend multiple successful fail observation successful execute code likely code bug fail respect bug execute code likely contains bug demonstrate difference static dynamic execution slice code reference assume bug static slice output variable contains statement possibly affect dynamic slice contains statement affect respect fourth execution slice respect contains statement execute therefore execution slice consists fifth difference static dynamic execution slice aforementioned slice technique bug dice bug dice code examine overcome inter data dependency augmentation refining propose former additional code domain inspection inter data dependency code currently examine whereas latter excludes suspicious code domain execution slice additional successful additionally slice problematic lengthy understand notion barrier propose filter approach program slice comprehensibility author propose slice producer statement compute variable statement explain producer statement affect variable exclude slice program spectrum technique discussion emphasize spectrum technique inspire probabilistic statistical causality model understand explain detail technique program spectrum detail execution information program perspective execution information conditional loop intra procedural program behavior  cousin suggests spectrum software fault localization execution fails information identify suspicious code responsible failure code coverage executable statement spectrum  indicates program execution information identify component involve failure narrow faulty component execution fail notation program NCF fail statement  fail statement NCS successful statement NUS successful statement NC statement NU statement NS successful NF fail ith technique fail spectrum fault localization approach subsequently deem ineffective later achieve successful fail emphasize contrast union intersection propose union focus source code execute fail successful code suspicious others intersection excludes code execute successful fail   propose another  technique contrast fail successful fail distance bug difference bug difference construct program dependence graph pdg adjacent checked node graph node graph examine lewis counterfactual maximally theory counterfactual intuitively closer execution statement failure likely statement faulty consequently suspicious statement token farther execution statement failure suspicious statement similarity coefficient quantify closeness closeness interpret suspiciousness statement popular  similarity coefficient technique tarantula coverage execution failure compute suspiciousness statement NCF NF NCF NF NCS NS siemens suite tarantula inspects code faulty statement identify effective fault localization technique others union intersection transition suspiciousness compute tarantula visual mapping participation program statement execution suite fail execute statement brighter  assign statement revise tarantula technique statement execute fail grouped ranked descend fail tarantula statement ranked suspiciousness within discussion purpose code assume successful fail suspiciousness statement compute tarantula technique suspiciousness compute tarantula technique fifth statement coverage entry statement correspond empty entry statement NCF NCS statement sixth seventh definition tarantula suspiciousness statement compute displayed eighth rank statement rightmost faulty statement rank recent technique propose perform surpass tarantula effectiveness fault localization ochiai similarity coefficient technique generally effective tarantula formula suspiciousness ochiai  NCF NCS source difference ochiai model model utilizes fail ochiai multiple fail model selects successful closely resembles fail ochiai successful ochiai extension ochiai formula suspiciousness ochiai NCF NUS NCF NCS NUS  NCF  ncp NUS source propose technique OP define technique program bug OP apply program multiple bug data OP effective tarantula ochiai ochiai bug program ochiai effective OP program bug suspiciousness  NUS otherwise source similarity coefficient technique along algebraic additional technique approach   available compute suspiciousness respect technique similarity coefficient technique empirical technique propose effective tarantula dstar empirical evaluation similarity coefficient technique tarantula ochiai ochiai  rbf dstar outperforms technique comparison spectrum fault localization technique frequently recent however technique outperform others scenario optimum spectrum technique exist additional program spectrum fault localization technique program invariant spectrum  spectrum coverage program invariant program remain unchanged across program execution  technique violation program fail program execution bug potential invariant likely invariant program successful execution unlike invariant necessarily execution obstacle apply technique automatically identify program fault localization address exist  technique invariant spectrum successful execution program   propose extend invariant execution feature execution invariant extend invariant helpful fault localization predicate spectrum   predicate execute program behavior likely erroneous technique label statistical debug technique  information analyze statistical fault localization technique category  sober etc detail author  achieve fault localization effectiveness  sequence spectrum  information regard sequence program execution execution data java program demonstrate fault localization identification analysis sequence incoming outgo implement another construct software behavior graph program execution data transition relationship function define framework frequent graph behavior graph classifier identify suspicious function spectrum spectrum execution successful fail execution behavior model spectrum successful execution deviation model fail execution identify ranked potential failure program spectrum apply identify suspicious code program additional program spectrum relevant fault localization issue concern variety issue concern spectrum fault localization identify depth spectrum technique calibrate contribution fail successful statement suspicious unsuspicious suspicious contains statement execute fail unsuspicious contains remain statement risk calculate suspicious statement unsuspicious statement simply assign however successful bug focus additional fail successful aid program bug respect code contribution fail executes compute suspiciousness fail executes fail executes principle apply contribution successful addition contribution successful execute statement contribution fail execute recognize fault localization proceeds information associate fail successful wong attempt successful comparison effective fault localization successful execution sequence fail accord difference metric minimize domain fault spectrum technique statement exhibit execution likelihood suspiciousness assign statement exactly statement suspiciousness rank information related statement execution frequency addition statement coverage utilized evaluate strategy statement strategy confidence strategy data dependency strategy another almost spectrum technique assume oracle exists restricts practical applicability propose fault localization technique integration metamorphic relation slice program execution slice replace metamorphic slice individual replace metamorphic failure replace violation non violation metamorphic author metamorphic relation symbolic program debug however technique rely strongly metamorphic relation derive program specification identification relation consume posit individual coverage information reveal execution therefore program graph analyze program execution distribution fail execution bug proneness qualify contributes failure bug confidence quantify likelihood bug distribution fail execution instrumentation overhead another issue introduces considerable fault localization resource constrain environment mitigate propose coin dynamic code coverage coarser instrumentation reduce overhead technique analyze coverage trace component program package progressively increase instrumentation granularity faulty component statement statistic technique statistical debug technique  isolate bug program predicate predicate  computes probability implies failure failure probability execution implies failure context predicate failure context discard remain predicate prioritize importance indication relationship predicate program bug predicate examine propose replace predicate profile improve effectiveness  profile execution aggregate across execution multiple feedback report importance calculate potential propose sober technique rank suspicious predicate predicate evaluate execution compute probability evaluate execution evaluate evaluate false distribution fail execution significantly successful execution related fault heuristic rank predicate addition apply non parametric hypothesis difference spectrum predicate successful fail enhancement empirically evaluate effective tabulation  analysis technique compute suspiciousness statement  construct statement vertical category horizontal category successful execution fail execution hypothesis reference dependency independency execution coverage statement suspiciousness statement depends association coverage execution primary difference  sober   generally apply rank suspicious program statement predicate function etc whereas rank suspicious predicate fault localization  sober correspond statement predicate initial examine bug jones   quantify rank statement predicate define approach detail statement related bug outside predicate sober bug initial statement additional statement perform breadth correspond program dependence graph potentially consume however  statement program ranked suspiciousness report  almost effective bug siemens suite  sober program execution circuit evaluation frequently predicate suffices predicate evaluate execute identify circuit evaluation individual predicate evaluation sequence predicate information propose debug evaluation sequence DES approach exist predicate technique sober  propose statistical approach employ behavior sequentially predicate execution construct execution graph execution predicate vertex transition sequential predicate suspiciousness calculate quantify fault relevant likelihood author apply causal inference technique fault localization linear model built program graph estimate causal statement occurrence failure model reduce confound bias thereby generate fault localization ranking enhance linear model fault localization effectiveness information data dependence explore usage execution phase information cache rate cpu memory usage statistical program debug couple execution phase predicate bug localization accuracy oppose phase information program technique program consists variable program execution indicator program bug program software fault localization relative debug fault development version via runtime comparison internal reference version program another approach modify variable erroneous program execution   propose technique delta debug contrast program execution successful fail via memory graph described variable suspiciousness replace successful correspond fail program execution unless identical failure variable longer suspicious simplify failure induce input orthogonal technique significantly reduces execution delta widely automate debug   extend delta debug transition technique identify location failure variable another algorithm propose quickly transition program execution combinatorial report input parameter faulty healthy identify minimal failure induce combination parameter however transition technique relatively approach exist program execution delta debug additional execution narrow another identify location bug reside introduce concept failure induce chop extension transition technique overcome issue delta debug identify input output variable failure dynamic slice construct variable code intersection slice input variable backward slice output variable suspicious improve robustness precision efficiency delta debug combine precise execution alignment technique however limitation delta debug fails handle confound partial replacement cannot execution omission error suffers efficiency address limitation  zhang propose inference model comparative causality systematic technique explain difference fail execution successful execution predicate switch propose another program fault localization technique program forcefully alter execute fail execution predicate switch program execute successfully label critical predicate technique erroneous variable strategy execute switch  prioritization prior candidate critical predicate wang  technique analyzes execution fail alters outcome successful execution statement outcome bug deficiency predicate switch alternation program program dependence analysis fault intrinsically propagate chain program dependence extends predicate switch technique reduces program subset trace fail execution dependence analysis profile technique fault localization assist developer software debug approach involves compute mapping  program statement alter fail output instead alternate profile information execution available suite alternate perform replacement statement instance fail  statement ranked accord fail execution  identify statement bug within statement propagate series infect program manifest failure fail execution executes statement statement necessarily failure profile program execution ass suspiciousness infect program propagate associate suspiciousness rank generate program bug machine technique machine computer algorithm improve machine technique adaptive robust model data limited interaction employment discipline bioinformatics processing cryptography computer vision etc context fault localization identify deduce location fault input data statement coverage execution failure wong propose fault localization technique propagation BP neural network popular neural network model BP neural network structure easy implement computer program BP neural network ability approximate complicate nonlinear function coverage data correspond execution BP neural network network relationship coverage suite virtual statement program input BP network output regard likelihood statement bug extend BP technique orient program BP neural network suffer issue paralysis local minimum propose another approach radial basis function rbf network susceptible faster rate rbf network approach BP network training output respect coverage virtual suspiciousness correspond statement novelty approach coverage information execution within modify rbf neural network formalism innovative algorithm simultaneously estimate hidden neuron receptive comparison distance instead euclidean distance distance coverage decision algorithm construct classify various partition fail partition likely fail due  fault underlie premise distinct failure identify input output category partition decision model distinct failure possibly originate fault distinct failure probability prediction statement coverage fail successful partition rank statement heuristic tarantula rank individual ranking consolidated statement rank examine fault data mining technique along machine data mining seek model pertinent information extract data data mining uncover hidden sample data discover manual analysis alone due sheer volume information efficient data mining technique transcend reasonable amount accuracy software fault localization abstract data mining identify statement execution failure addition although execution trace program valuable resource fault localization volume data unwieldy usage therefore creatively apply data mining technique execution trace generate statement subsequence refer gram trace data fail execution trace examine gram rate occurrence threshold statistical analysis conduct conditional probability gram fail execution trace probability confidence gram gram sort descend confidence correspond statement program displayed appearance siemens suite grep program technique effective fault tarantula discus combination association formal concept analysis assist fault localization propose technique identify regard association statement coverage correspond execution failure frequency threshold upon minimum fail execution generate partially ranked lattice rank examine fault author propose technique advantage recent progress multi relational data mining fault localization specifically technique markov logic combine logic markov random satisfiability efficient inference vote perceptron algorithm  apply fault localization markov logic combine information source statement coverage static program structure information prior bug knowledge improve effectiveness fault localization technique empirically effective tarantula program siemens suite propose technique interprets tarantula data mining technique association relationship statement program failure coverage information execution suite relevance evaluate metric conf commonly classical data mining interpret suspiciousness statement bug model technique respect model technique critical concern model expressive capability significant impact effectiveness technique model diagnosis assume model program diagnose available model oracle correspond program difference behavior model actual behavior program bug program model software fault localization model generate directly actual program bug difference program execution programmer tester identify model responsible misbehavior demonstrate java diagnosis jade model software fault localization application model diagnosis dependency model derive dependency statement program static dynamic analysis functional dependency model java program handle subset feature java conditionals assignment loop model structure program described dependency model logic logic apply model behavior target program dependency model extend handle unstructured java program exception recursive return statement notion dependence graph extend model behavior program suite probabilistic program dependence graph model internal behavior program facilitate probabilistic analysis uncertain program behavior likely associate fault logic construct dependency model source code analysis target program program structure behavior output transform observation logic execution target program fails conflict model equivalent static dynamic slice identify suspicious statement responsible failure statement default assumption statement incorrect assumption revise fault localization failure explain limitation focus loop program fix mayer  propose abstraction model abstract interpretation apply handle loop recursive procedure heap data structure additionally abstract interpretation improve effectiveness slice model fault localization technique addition dependency abstraction model model data information program apply component bug however model computationally intensive dependency practical program discus model fault localization technique rely model checker bug model satisfy correspond program specification imply model contains bug model checker counter specification violate counter directly specify model associate bug however fail identify causality bug propose model checker explore program counter successful execution failure algorithm identify transition execution counter successful execution program component related transition likely bug technique suffers weakness   generate successful execution expensive counter bug bug trigger multiple counter occurs introduce bias overcome   generate execution explore backwards counter model checker additional execution generate failure analyze difference transition invariant transformation fail successful execution identify location bug inspire lewis counterfactual program execution assignment variable define distance metric distance program execution metric model checker generate successful execution closest counter difference successful execution counter explanation location bug explain implement technique extend technique combine predicate abstraction technique successful execution argue successful execution counter cannot easily identify technique instead successful execution counter minimal program counter fail revise program assume bug program component propose technique revise program specification component program specification cannot satisfied variant program variant exactly component replace component alternative behavior variant model checker counter violate revise specification replace component potentially responsible failure component responsible failure programmer manually inspect component identify bug model checker  whereas extend additional model checker  report described   symbolic execution bug imperative program important  extensive model checker technique efficient however fault localization model checker refine precise technique modify program fail program execute successfully modify program automatic bug fix additional model fault localization technique exist apply functional program hardware description VHDL spreadsheet constraint program automatically compile constraint propose model analyze software failure fault debug purpose failure mode failure define identify existence program failure analyze program failure respectively failure mode execution program fails failure failure abnormal behavior program execution failure classify correspond failure mode refer pre establish relationship failure mode failure failure identify failure heuristic dynamic instrumentation dynamic slice information reduce domain fault predict faulty statement significant drawback model extremely impossible obtain exhaustive failure mode program abnormal behavior symptom fail relationship failure mode failure identify failure responsible failure analyze additional technique addition technique software fault localization focus specific program scenario development software enhance functionality inevitably introduction bug detect immediately trace behavior code highly consume propose technique identify recently introduce dynamic static code information combine reduce impact faulty execution semi automatically spite garbage collection java program suffer memory leak due unwanted reference chen chen develop aspect  utilize aspect memory consumption statistic reference program execution information analyze detect memory leak implicit social network model predict location fault fault location cite historical bug report retrieve  bug report manage souza  propose technique integration coverage data bug rank suspicious invocation roadmaps sort investigate propose interactive fault localization technique incorporates programmer feedback spectrum fault localization technique programmer inspects suspicious program rank generate fault localization technique judge correctness information feedback rank inspect author demonstrate programmer feedback increase effectiveness exist fault localization technique understand program behavior software developer translate code related query speculate fault  debug avoids speculation enable developer derive source code combination static dynamic slice precise graph explanation failure author propose software fault localization technique bug signature within program bug signature program execute fail successful bug signature ranked descend discriminative significance likely related bug rank identify location bug culprit overwritten variable access memory location bug remove bug execution execute generally statement faulty recently apply information retrieval technique software fault localization initial bug report rank source code file descend relevance bug report developer examine rank identify file bug unlike spectrum fault localization technique information retrieval technique program coverage information generate rank solely source code file program finer granularity statement predicate algorithmic debug declarative debug shapiro dissertation detail decomposes complex computation series sub computation program bug outcome sub computation checked correctness respect input algorithmic debugger identify portion code bug issue apply technique oracle available sub computation formula fault localization technique rely encode fail execution trace error trace formula unsatisfiability error trace formula algorithm programmer capture relevant statement failure   propose technique  max solver compute maximal statement failure fail execution trace introduce error invariant semantic argument statement fail execution trace irrelevant failure remove statement bug manual effort weakness technique report statement responsible failure without input execution statement address reporting extend error invariant encodes fail execution trace sensitive error trace formula addition statement relevant failure specify statement execute input program maintenance source code modify fix bug enhance functionality regression conduct prevent invalidation previously functionality execution fails programmer failure induce crisp compliant intermediate version program partial edit subset recent code maintenance perform programmer focus specific portion code debug concurrent program become prevalent application affect everyday however due non determinism debug program propose inject random timing within program assist elicit bug bug trigger objective identify source bug author propose algorithm iteratively sample dimensional projection program identifies candidate relevant refer discussion distribution repository distribution repository across category spectrum dominant category percent slice contains percent model contains percent statistic program others category percent data mining machine category percent distribution repository distribution classification static dynamic slice execution slice program spectrum technique footnote rationale publish respect classification leftmost rightmost january november correspond display information cumulative data cumulative publish correspond observation publish respect category cumulative respect category static dynamic slice technique popular however category decrease execution slice program spectrum technique increase dramatically focus technique static dynamic slice technique recent program popular program effectiveness fault localization technique code brief description functionality program program summary popular program fault localization siemens suite frequently however program suite code blank another important worth bug mutation artificially inject bug although mutation effective approach simulate realistic fault bug delicate cannot model mutant introduction advanced technique software fault localization accurate comparison effectiveness demand furthermore feasibility technique benefit demonstrate environment contrast academic laboratory orient environment response challenge complex program another trend bug actually introduce development phase bugzilla gcc program bug mozilla firefox evaluation metric program bug span multiple code necessarily contiguous module examination suspicious code faulty location identify focus programmer initiate bug fix code modify delete respect bug effectiveness software fault localization technique define percentage code examine faulty location bug identify estimate percentage code programmer examine faulty location program dependence graph construct node marked faulty report differencing faulty version program blame report  node correspond dependency sphere dsk node DS contains node DS node report node  indicates location bug DS dependency sphere faulty node compute ratio node dependency sphere node entire pdg DS pdg source programmer distinguish defect non defect location location furthermore assumes programmer data dependency relation statement fault exam expense percentage statement program examine faulty statement  statement  statement program source author executable statement instead statement technique generate rank predicate instead statement sort descend fault relevance exam compute percentage predicate examine define approach  sourcewhere sort predicate described fault relevant predicate fault notation index predicate indexed report percentage faulty version program fault examination amount code exam subsequently define  source exam easy understand directly proportional amount code examine indirect measurement amount code examine summary exam expense effective technique whereas effective technique wilcoxon rank alternative normal distribution population cannot assume metric evaluation statistical assume technique effective another technique examine alternative hypothesis examination statement confidence alternative hypothesis accepted statistically effective another metric cumulative statement examine bug scenario metric global contrast wilcoxon focus individual pairwise comparison effective fault localization technique assign unique suspiciousness statement however suspiciousness assign statement happens effectiveness effectiveness assumes faulty statement examine statement suspiciousness effectiveness occurs faulty statement examine reporting unlikely programmer scenario something straightforward compute average effectiveness effectiveness however converse average effectiveness insight effectiveness seriously ambiguous mislead technique average effectiveness wider technique equally effective average effectiveness approach report effectiveness perform evaluation scenario evaluation metric assumption perfect bug detection ideal user examine suspicious code contains bug bug statement detect statement examine however recent indicates assumption statement examine bug increase factor affect effectiveness software fault localization technique metric relative expense impact expense discussion regard impact fault localization  suggests effectiveness evaluate respect fault technique effective another bug trigger consistently define namely  effective bug failure cannot systematically reproduce namely  instrumentation overhead interference within multiple bug program impact effectiveness fault localization important realize software fault localization technique evaluate effectiveness described factor computational overhead data collection amount effort addition emphasize user aim programmer actually debug reveal chain failure upon beyond suspiciousness rank code unfortunately none publish report comprehensive evaluation aspect software fault localization challenge empirical software fault localization appropriate automatic semi automatic data collection suspiciousness computation commonly brief description availability commercial source openly accessible source code available acquire contact author summary fault localization critical aspect explore critical aspect software fault localization fault localization multiple bug majority publish software fault localization focus program bug faulty program exactly bug however software contains multiple bug analysis fault failure data project individual failure trigger multiple bug throughout another report observation doubt concern validity heuristic assumption bug scenario response conduct program multiple bug popular assumption multiple bug program perform independently debroy wong examine interaction bug interference manifest trigger mask execution failure destructive interference execution fails due bug longer fails another bug program constructive interference execution fails presence bug program presence bug alone failure masked trigger additional bug program multiple bug suffers destructive constructive interference  jones report multiple bug adverse impact effectiveness spectrum technique debug multiple bug program bug approach program failure execute suite approach programmer fix bug modify program suite execution fail additional debug fix bug failure program bug cannot detect suite approach adopt dstar technique fault localization technique bayesian framework potential weakness technique bayesian assume program component fail independently interference multiple bug ignore necessarily multiple bug program parallel fail fault focus cluster cluster related bug tarantula fault localization technique fail cluster successful identify suspicious code correspond bug cluster fail approach execution profile apply supervise unsupervised classification multivariate visualization execution profile fail fault focus cluster     algorithm technique widely integer linear program cluster fail however cluster similarity execution profile reflect accurate causation relationship fault correspond fail execution fail associate bug execution profile cluster technique execution profile fail cluster overcome liu han investigate due relationship fail underlie bug apply sober fail successful generate correspond predicate rank kendall tau distance compute ranking distance ranking identify suspicious predicate implies rank proximity proximity fail proximity cluster likely due relationship variation effective fault localization technique  rbf dstar instead tarantula sober subset refer successful variation explore input output impact addition fail successful although technique information underlie program model execute respect detail via execution profile coverage statement predicate etc output spectrum fault localization technique tarantula suspiciousness rank statement ranked descend suspiciousness rightmost bug programmer examine statement rank statement former suspiciousness likely bug latter slice technique return statement without specific rank refer static slice variable statement however programmer statement likely bug therefore examine bug location technique statistic machine data mining likely generate output suspiciousness ranking generate spectrum technique whereas program model technique likely output program model component possibly bug explicitly specify rank component although output suspicious component statement predicate etc bug former prioritizes component suspiciousness latter suite program debug another important factor affect effectiveness fault localization technique fault localization technique focus program bug fail fail successful others multiple fail successful latter technique advantage former likely latter effective program bug tarantula multiple fail multiple successful effective technique fail successful however important successful fail align detailed explanation failure technique account multiple successful fail simultaneously although technique multiple fail multiple successful fault localization effectiveness underlie assumption available assumption existence oracle automatically execution successful fail unfortunately oracle incomplete date ambiguous report currently tester formal specification assertion automate oracle potentially daunt task manually behavior execute response challenge researcher various nevertheless generate automate oracle remains issue explore hence cannot grant multiple execution failure suite achieve coverage target program adverse impact fault localization generation criterion requirement boundary analysis statement decision coverage guidance meta heuristic technique tabu approach automatically generate suite obtain maximum coverage apollo generate automatically combine concrete symbolic execution apollo executes program empty input constraint reflect program execute predicate input generate predicate constraint constraint execute program input additional failure execution pre define threshold statement coverage sufficient fault detect budget exhaust author suite satisfy coverage satisfy statement coverage effectively fault localization whereas author suite satisfy MC DC coverage satisfy coverage furthermore fault localization effectiveness tarantula program coverage statement define conclude tarantula define coverage effective stable coverage effective statement coverage author propose combination coverage achieve fault localization effectiveness researcher argue efficient suite program bug instead reduction subset prioritization assign priority improve efficiency fault localization technique approach prioritization priority fail execute statement information minimize domain author propose approach generate balance suite improve fault localization effectiveness clone fail suitable successful  propose technique  applies dynamic symbolic execution generate minimal difference execution fail generate execute fail successful likely failure applies generation approach generate instead spectrum fault localization technique rank descend accord suspiciousness  approach adaptation genetic algorithm bridge gap diagnosis fault localization diagnosis criterion generate satisfy criterion diagnosis algorithm efficiently objective achieve diagnosis efficient fault localization minimal focus evaluation impact reduction prioritization technique efficiency software fault localization execution sequence impact program debug program execution fails previous appropriate execution environment failure cannot unless execute specific sequence bundle fail coincidental correctness concept coincidental correctness introduce   discus circumstance error program output program phenomenon faulty statement variable assign incorrect execution affect output program failure however another execution variable later overwritten output program affected failure trigger coincidental correctness report recent coincidental correctness negatively impact effectiveness fault localization technique technique fails bug bug program conclude effectiveness tarantula decrease frequency coincidental correctness increase frequency overcome masri  propose technique suite remove introduce coincidental correctness fault localization effectiveness technique enhance fuzzy suite cluster analysis   approach likelihood coincidental correctness successful average proximity execution profile fail likelihood assign correspond successful subsequent suspiciousness computation  technique relies fail bug statistically fault localization commonly relies successful fail author propose fault localization technique  calculate contrast propagate profile successful fail execution alleviate impact coincidental correctness fault introduce code generally fault localization technique survey incapable bug code slice technique bug faulty code program therefore code slice conclude fault localization technique inappropriate bug although argument reasonable overlook important detail admittedly code cannot slice however omission code trigger adverse elsewhere program execution traversal incorrect decision statement abnormal program execution appearance unexpected code correspond slice respect hint programmer omit statement anomaly implies identify suspicious code related omission error affected decision slice technique argument technique limited program spectrum statistic program technique software fault localization technique pinpoint location code combination multiple fault localization technique effectiveness fault localization technique scenario dependent affected successful fail program structure semantics bug etc technique superior others scenario combine multiple technique retain quality individual technique mitigate drawback propose combine ranking statement generate multiple technique advantage approach combine ranking integration approach actual technique somehow incorporate technique effective realize extensible  xia normalization combine fault localization technique address inherent limitation spectrum fault localization technique component semantics program propose enhance diagnostic quality spectrum fault localization technique combine model debug approach abstraction interpretation generate framework  precisely model approach refine rank via filter exclude component explain failure program semantics algorithm simulated anneal genetic algorithm approximate optimal composition exist spectrum fault localization technique however approach lack flexibility efficiency flexibility perform update optimal composition whenever fault localization technique optimal composition program optimal another program perform program efficiency potential consume spectrum slice technique widely combination technique category report combine tarantula dynamic slice improve fault localization effectiveness statement program ranked suspiciousness calculate tarantula technique dynamic slice respect failure variable failure generate statement slice remove rank reduce domain propose hybrid slice fault localization technique combine dynamic execution slice prototype hybrid slice spectrum fault locator  implement technique   emphasize spectrum fault localization technique ochiai grain whereas technique slice computation HS slice algorithm sometimes undesirable rank statement constructor execute eliminate drawback technique combine combination explore combine tarantula technique output mapping reduce statement examine approach tarantula replace ochiai jaccard apply spectrum localization synergy specification analysis accurately bug unsatisfiability analysis violate specification enable technology compute unsatisfiable core statement likely bug   propose technique  combine delta debug dynamic slice effective fault localization  fail execution treat series interaction return eventually failure interaction reduce minimum reproduce failure reduce correspond bug within fault localization ranking earlier refer statement suspiciousness rank fault localization technique program symptom assign suspiciousness multiple statement existence rank everywhere limited technique program scenario statement programmer examine bug considerably response effectiveness compute evaluation metric difference effectiveness effectiveness fault localization technique uncertain voting scenario voter unable alternative candidate ranked alphabetical similarly statement rank assign text editor technique confidence strategy data dependency strategy fault localization concurrency bug concurrent program suffer access anomaly data atomicity violation atomic serializability violation approach mushroom recent predictive analysis technique drawn significant attention generally technique trace program execution statically generate permutation expose  concurrency bug potential technique sometimes report false positive report atomicity violation  dynamic atomicity checker contrary  atomicity violation detection report false positive  statically analyze program concurrency bug however explore impractical apply complicate program runtime analysis powerful static analysis false alarm drawback fault manifest specific execution detect another approach bug localization concurrent program model instance model checker construct evidence data report  algorithm however due exponential adopt approach program without compromise detection capability technique detect concurrency bug flanagan freund prototype  explore non determinism relaxed memory model detect destructive program apply  framework detect atomicity violation program execution probability thread inter  park debug non deadlock concurrency bug propose technique buggy memory access responsible trigger concurrency bug author propose  debug memory model fault concurrency program spectrum fault localization technique spreadsheet fault localization spreadsheet landmark generic software estimate percent firm spreadsheet financial reporting percent analyst perform calculation spreadsheet percent spreadsheet basis decision usage however accompany effective mechanism bug prevention detection bug spreadsheet blame compile available european spreadsheet risk  web site http  org recent   conclusion response regard spreadsheet fault localization report model spreadsheet fault localization technique extend algorithm user specify historical assertion identify error apply constraint representation spreadsheet constraint solver bug spreadsheet another constraint approach debug faulty spreadsheet  spreadsheet input compute faulty candidate    debug spreadsheet constraint approach whenever compute output incorrect user employ correspond formula apply generate user specify output involves mutate spreadsheet pre define repair ascertain user expectation met approach author propose strategy automatically fix bug java program combine mutation software fault localization approach weak precondition generate program modification bug fix    infers header information spreadsheet performs analysis notifies user bug detect spreadsheet weak spreadsheet display user data diagram approach detect visualize data clone copying compute formula text spreadsheet report technique aim reduce occurrence error spreadsheet code inspection refactoring adoption spreadsheet theoretical instead evaluate empirically effectiveness software fault localization technique analyze theoretical perspective report formula compute suspiciousness statement tarantula express suspiciousness depends ratio fail NCF successful NCS execute statement tarantula rank identical technique suspiciousness function formulate  NCS examines formula equivalent rank independently debroy wong report similarity coefficient fault localization technique equivalent another perform theoretical effectiveness spectrum fault localization technique risk suspiciousness survey program statement assign  SRF sra risk statement bug author assumption faulty program exactly fault fault program exactly faulty statement faulty statement execute fail assume underlie suite percent statement coverage unfortunately assumption simplify program respect technique similarity coefficient examine subset relation  sra generate correspond rank formula conclude technique   sra sra effective statement examine examine faulty statement proof report statement SRF proof indicates technique effective another former examine statement statement latter contradict proof another weakness advanced effective technique exclude exactly input data author validity effectiveness fault localization technique theoretical effectiveness tarantula ochiai latter significantly effective former directly contradicts conclusion apply theoretical analysis framework genetic program evolve formula fault localization however simplify assumption theoretical bug program identify strictly rational fault localization technique suspicious statement strictly increase statement execute fail strictly decrease statement execute successful author strictly rational technique necessarily outperform therefore limited attention strictly rational technique identify optimal fault localization technique deterministic bug  define fail whenever execute conclusion software become complex software fault localization accordingly investment resource consequently program bug longer easily automate mechanical location intelligent experienced programmer expert knowledge software debug examine however fails appropriate fallback systematic technique survey solid  hoc approach technique programmer effectively bug highly demand stimulates proposal fault localization technique widespread perspective imperative software engineer involve develop reliable dependable understand exist technique awareness emerge trend development facilitate conduct detailed survey software engineer program debug quickly gain background knowledge ability apply effective software fault localization technique tailor specific environment survey publication repository thesis software fault localization november technique classify category slice spectrum statistic program machine data mining model miscellaneous previous strongly software fault localization become important research topic  trend ongoing research direction analysis publish category research shift category another static dynamic slice technique popular whereas execution slice program spectrum technique dominate metric evaluate effectiveness software fault localization technique code examine faulty location identify review exam expense wilcoxon rank program debug various empirical evaluation summarize empirical metric program category completely superior another technique category advantage disadvantage additionally effectiveness technique analyze theoretical perspective however analysis simplify non realistic assumption program hence conclusion applicable within limited scope implies theoretical analysis alone advisable apply empirical evaluation theoretical analysis assessment emphasize effectiveness attribute software fault localization technique factor overhead compute suspiciousness program component data collection effort discus aspect critical software fault localization fault localization program multiple bug concurrent program spreadsheet impact coincidental correctness fault introduce code conclude objective survey software engineering community understand research software fault localization identify potential drawback deficiency exist technique additional conduct improve practicality robustness