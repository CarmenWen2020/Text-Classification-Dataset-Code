monolithic increasingly suffer maintainability scalability issue functionality complexity widely micro service architecture alleviate service suppose characteristic clearly define functionality sufficient modularity ability evolve independently industrial service extraction legacy monolithic labor intensive complex exist service candidate identification aim entity monolithic potential service candidate challenge extract service candidate consistent quality evaluate identify service candidate regard characteristic address challenge proposes functionality orient service candidate identification FoSCI framework identify service candidate monolithic approach monolith execution trace extract service candidate functional algorithm contribute comprehensive service candidate evaluation suite interface information structural conceptual dependency commit evaluation consists metric functionality modularity evolvability respectively identify service candidate FoSCI exist widely source project evaluation FoSCI outperforms exist introduction monolithic software increasingly suffer maintainability scalability issue functionality complexity widely service microservice architecture alleviate service suppose exhibit define functionality modularity importantly service evolve independently migrate monolithic service option rewrite scratch extract service legacy source code legacy code latter recommend enterprise netflix amazon adopt option phase splitting code implementation splitting identify boundary split monolith multiple functional separable function becomes service candidate code implementation realizes service candidate physical service focus splitting complex labor intensive alleviate burden splitting researcher propose various automate service candidate identification splitting entity monolithic multiple function corresponds potential service candidate service candidate identification traditional software decomposition software cluster technique bunch  assumption cluster entity principle cohesion couple exist service candidate identification challenge quality service candidate define functionality sufficient modularity independent evolvability systematic quality quantitatively consistently introduces approach address challenge propose functionality orient service candidate identification FoSCI framework identify service candidate extract processing execution trace framework consists extract representative execution trace identify entity functional algorithm identify interface service candidate comprehensive measurement quantitatively evaluate service candidate quality functionality modularity evolvability FoSCI framework prior research aim split monolithic source code structure usually model structure monolith graph node structural relation semantic similarity achieve cohesion couple weaker relation remove split subgraphs graph structure without functionality consequently service candidate define functionality addition cannot apply source code available FoSCI address challenge utilize execution trace service candidate identification rationale execution trace precisely reveal program functionality evaluate FoSCI execution widely project construct reduce extract representative execution trace execution trace FoSCI generates functional coherent minimal functional assumption frequently execution trace dedicate related functionality FoSCI assigns functional service candidate optimize objective execution trace finally FoSCI identifies interface operation candidate execution trace FoSCI identify service candidate source code monolithic application available evaluation framework multiple extract service candidate currently exists systematic evaluation framework ass functionality modularity evolvability service candidate functionality describes visible function service business capability accessible external client modularity internal entity within service behave coherently entity across service loosely couple evolvability service ability evolve independently service service frequently affect service challenge service evolve exclusively prior research quantify quality proposes cohesion couple service evolvability service candidate explore construct comprehensive evaluation suite systematically service candidate aspect independence functionality integrate interface ifn cohesion message chm cohesion domain chd modularity extend modularity quality propose  metric structural conceptual modularity service candidate independence evolvability quantify internal frequency icf external frequency ecf ration ecf icf rei derive revision project revision version unique actual evolution software revision wealth software evolution information metadata purpose metric comprehensively quantify critical quality aspect service candidate summary contribution FoSCI framework identify service candidate entity interface identification FoSCI employ execution trace accurately reveal functional grouping software evaluation suite service candidate consists metric quantify quality criterion service candidate independence functionality modularity independence evolvability describes propose functionality orient service candidate identification framework illustrates quantify independence functionality modularity independence evolvability setup evaluation discus limitation threat validity survey related conclusion discus future methodology introduce definition related service candidate illustrate FoSCI framework jpetstore monolithic version intermediate repository notation globally definition service candidate intermediate splitting phase migration monolithic micro service architecture potential refinement actually implement physical service formally define service candidate SC eser sourcewhere eser denotes entity compose SC interface SC grain operation entity monolith interface entity potential publicly publish publish interface service candidate functionality visible external client operation publicly interface FoSCI framework overview depicts functionality orient service candidate identification FoSCI framework FoSCI representative execution trace extraction apply trace  execution trace monolithic executable software pre functional suite execution file extract representative execution trace rtr entity identification identify functional execution trace modify non dominate sort genetic algorithm II multi objective optimization technique functional entity eser service candidate interface identification service candidate interface operation identify combine eser service candidate SC eser representative execution trace extraction execution monitoring trace  insert probe target software probe monitor execution execution file obtain execution trace accurately capture functionality target functional suite executable software executable instance built target monolithic software execute functional functional identify independent function split service candidate functional functionality oppose aim algorithm execution trace reduction algorithm input otr trn output rtr  rtr otr otr rtr initialize rtr tri otr trj rtr trj tri trj replace tri rtr delete trj rtr tri trj rtr tri trj trj ignore tri rtr tri tri trj  execution trace extraction execution file contains item  globally unique ID identify thread trace  depth stack invoked  extract execution trace sequence correspond execution slice function processing construct execution trace otr execution trace reduction execution trace otr typically contains redundant execution trace algorithm algorithm reduce otr representative execution trace rtr rtr otr algorithm  denote involve  assume tri otr trj rtr tri trj tri rtr conversely trj tri trj replace tri tri trj tri trj trj rtr tri rtr finally obtain representative execution trace rtr jpetstore execution trace reduction finally obtain representative execution trace entity identification identify entity eser service candidate generate functional reduce execution trace derive optimization objective functional modify non dominate sort genetic algorithm II technique conduct functional entity entity within service candidate functional generation define functional minimal coherent entity responsible functional logic execution trace reflect slice software logic trace correspond employ classic hierarchical cluster algorithm execution trace generate functional input cluster algorithm diff threshold cluster ctr ctri ctr ctri involve tri functional contains fai cluster jaccard coefficient  fai  compute similarity fai   fai  sourcewhere ctr contains fai  maximum  merge functional update cluster  diff  min source accord observation described diff cluster FA  obtain fai jpetstore initialize functional fai employ algorithm finally generate function SourceRight click MathML additional feature objective functional functional aim combine multiple functional eser service candidate related functional non related maximize intra connectivity inside service candidate minimize inter connectivity across candidate boundary formalize objective information reveal execution trace structural conceptual intra connectivity structural conceptual information execution trace define objective intra connectivity formula  specifically structural intra connectivity formulate  functional inside sci functional inside sci execution trace relationship fai  fai  functional cluster conceptual intra connectivity formula difference fai  exists intersection textual identifier fai  empty structural conceptual inter connectivity similarly define objective functional cluster inter connectivity define  specifically structural inter connectivity formalize  inside cluster cluster denotes cluster cluster conceptual inter connectivity formula difference illustrate definition conceptual intra connectivity optimization objective summary functional optimization objective maximize structural intra connectivity maximize structural inter connectivity maximize conceptual intra connectivity maximize conceptual inter connectivity functional functional aim service candidate combination functional optimize objective address multi objective tailor non dominate sort genetic algorithm II NSGA II context functional NSGA II widely exploit software  efficient genetic technique distribute pareto approximately optimal tailor NSGA II context functional described initial population functional FA  obtain individual chromosome partition FA sourcewhere FA partition FA non empty partition FA partition FA corresponds service candidate randomly generate FA initial population fitness function define vector objective function compose fitness function sourcewhere correspond previous optimization objective respectively functional optimal maximize crossover employ crossover generate offspring partition individual partition NP partition FA generate functional manifest strategy monolith splitting strategy strategy merges functional service candidate strategy functional service candidate mutation mutation probability randomly offspring generate crossover randomly NP offspring mutation processing NSGA II functional output pareto consist optimal partition partition knee compromise optimization objective knee  euclidean distance fitness fitness    ideal fitness  pareto  max max max max  compose eser service candidate jpetstore initialize population randomly generate partition assume FA individual individual partition FA FA  processing population tailor NSGA II knee pareto extend  entity identify eser eser eser eser eser source interface identification accord rtr identify  service candidate sci recognize potential interface operation publish detect entry execution trace entry rtr functional request external client related logic configuration context exclude entry irrelevant business capability almost execution trace service candidate sci regard entry  operation publish identify interface service candidate intuitively operation owner regard interface interface compose service candidate sci jpetstore identify operation interface member prefix org  jpetstore web action illustrates identify service candidate jpetstore generate service candidate independent function catalog service service account service cart service obviously domain account domain organize code package monolith service candidate clearly define functionality service candidate extract jpetstore evaluation model introduce evaluation ass quality service candidate aspect external independence functionality service define independent coherent functionality external client responsibility principle SRP internal modularity service modularized internal entity cohesive entity across service boundary loosely couple evolvability independence evolvability evolve independently without service desirable service meaning flexibly accommodate future independence functionality quantitatively objectively ass functional independence leverage information publish interface expose functionality module service interface identify service candidate objectively quantify independence functionality ifn interface publish interface service ifn likely service assumes responsibility ifn average ifn formal definition ifn  source  sourcewhere publish interface interface service service publish interface service chm cohesion message cohesiveness interface publish service message chm service cohesive service external perspective chm average functional cohesiveness define chm variation  lack message cohesion propose chm  chm  source     source        park  park  sourcewhere   union operation   return input parameter   computes similarity operation message denote average similarity input message parameter output message return ifn chd cohesion domain cohesiveness interface service domain chd functionally cohesive service similarly chd average chd within define chd variation  lack domain cohesion define chd  chd  source     source            sourcewhere opr define chm  computes similarity operation   describes domain signature  modularity modularity component service multiple perspective structural conceptual dynamic dimension extend modularity quality MQ define  structural conceptual dependency structural modularity quality conceptual modularity quality ass modularity service candidate  structural modularity quality modularity quality structural perspective  modularized service       source consistent intra connectivity inter connectivity  structural cohesiveness service  couple service inside service service service entity inside service structural dependency entity exists    conceptual modularity quality similarly modularity quality conceptual perspective        sourcethe formalism       difference  definition entity exists intersection textual entity empty independence evolvability ideally evaluate independence evolvability service examine revision implement service impossible service phase propose service candidate independence evolvability revision monolithic software rationale frequently grouped service chosen grouped service assume service evolve relatively independently rationale propose icf internal frequency entity inside service revision icf entity inside service likely evolve icf average icf within icf  source  eserj eserj eserj eserj  sourcewhere  commits entity  eserj  ecf external frequency entity assign service accord revision ecf entity service evolve independently similarly ecf average ecf service within ecf  source  eserj eserj    sourcewhere  computes frequency entity eserj service entity   entity eserj    define icf eserj   eserj rei ratio ecf icf ratio frequency across service versus frequency within service ratio inside service across service ratio likely across service extract service tend evolve independently ideally inside service rei ecf icf SourceRight click MathML additional feature ecf icf notion define jpetstore jpetstore introduce intuitively explain icf ecf rei commits grouped service candidate splitting scenario commit revision happens within service service independently extreme commit revision service boundary service influence another service intermediate service others cannot icf becomes ecf rei become icf ecf rei reflect independence evolvability  independence evolvability splitting jpetstore experimental setup introduce investigate obtain execution trace introduce parameter configuration illustrate baseline evolution data finally evaluation configuration web application project introduction illustrates project version version project analyze date date denote examination loc code implement java  solo blogging  discussion apache roller feature multi user blog server  source agile project management xwiki platform generic wiki platform offering runtime service xwiki platform project contains module extension project heterogeneous business domain  apache roller  xwiki platform popular widely summary project execution trace web application classical multi layer architecture layer presentation business persistence layer presentation application business persistence chose web application server web application typically package file monolithic web application usually suffer maintainability scalability issue rapid growth decompose service candidate exclude presentation layer database various adopt decomposition beyond scope research relational mapping employ investigate interact database schema database corresponds entity decompose software database naturally organize schema service candidate execution trace collection mention earlier functional functional entire application functional application physically executable automatic manual approach conduct automation functional xwiki platform repository xwiki platform project functional module confirm developer community automation infrastructure automatically execute functional manual functional project  solo  apache roller  project suite suite functional manually conduct functional project functionality project specification documentation function scenario maximum amount application functionality project generate executable package deploy apache tomcat manually execute scenario manipulate application web browser apache jmeter operation execute scenario jmeter fully feature ide allows browser configure jmeter functional proxy server user explores gui browser jmeter intercept http request transaction script transaction corresponds repeatedly execute jmeter automate manually execute scenario jmeter execution trace execution data extract monitoring TC TS functional scenario otr extract execution trace otr ocall invoked otr rtr  representative execution trace rtr rtr representative execution trace obtain execution trace ensure reproducibility project specification document description scenario file jmeter execution trace http github com FoSCI parameter FoSCI parameter diff population crossover probability mutation probability maximum generation diff functional generation minimum coherent functional diff illustrates functional percentage initial diff investigate functional flattens diff recommend diff percentage functional diff increase functional involves parameter due NSGA II technique calibrate parameter exist NSGA II population individual achieves balance effectiveness efficiency accord crossover probability mutation probability configure maximum generation reduce bias randomness genetic algorithm optimal execution merge chose non dominate individual knee explain service candidate identification baseline FoSCI baseline limbo WCA mem microservice extraction model WCA hierarchical cluster leverage similarity unbiased  UE unbiased  NM  employ  outperforms UE limbo information loss distance software cluster mem graph monolith relation extract strategy logical semantic contributor coupling semantic couple approach mem strategy target project percentage WCA limbo mem FoSCI percentage refers proportion analyze various percentage rarely percent percentage limbo WCA structural dependency parse source code percentage mem FoSCI limbo WCA discus uncovered FoSCI percentage ensure identify service candidate comparison unbiased intersection data standard filter evaluate performance revision collection commit information revision evaluate independence evolvability commits evolution commits irrelevant evolution file modify file html modify configuration file xml update license remove irrelevant commits commits incomplete revision  commits involve analysis commit evaluation configuration baseline configure service candidate identify software modularization trivial task define highly related target modularization cluster maximum generate module identify service monolithic software domain expert investigate project ideally recommend knowledge business logic functionality feature illustrate data repository address comparison rigorously supplement extra setting input  solo   apache roller xwiki platform split service candidate respectively conduct evaluation WCA limbo mem apply configuration described evaluation objective evaluation ass FoSCI effective service candidate independence evolvability independence functionality  FoSCI baseline limbo WCA mem explore performance FoSCI coverage execution trace differs described conduct illustrates due consistent performance illustrate available repository evaluation evolvability icf ecf rei service candidate generate corresponds  evaluation identify service candidate rigorously FoSCI employ wilcoxon rank non parametric statistical hypothesis sample metric measurement FoSCI significantly sample illustrate measurement icf ecf rei analysis recall rei evolvability feature integrate icf ecf rei FoSCI rei outlier limbo WCA mem evolvability service candidate generate denote respectively FoSCI limbo WCA mem regard rei FoSCI significantly outperforms accord service candidate FoSCI perform rei moreover FoSCI ensure constrain within service instead service boundary addition performance consistent icf ecf rei overall evolvability investigate performance individual service candidate icf ecf distribution icf ecf solo apache roller  xwiki platform performance consistent target service randomly picked distribution icf ecf service candidate icf inside service candidate frequent across service ecf FoSCI positive difference icf ecf FoSCI significantly others moreover WCA mem generate service candidate negative difference icf ecf service hardly evolve independently plot reveal difference icf ecf FoSCI positive baseline observation consistent summary evaluation evolvability icf icf ecf ecf rei FoSCI aggregate frequently entity within monolith service candidate infrequently entity candidate contrast service candidate generate limbo WCA mem across service boundary within service consequently service unable evolve independently conclusion FoSCI generate service candidate significantly independence evolvability baseline evaluation functionality analysis ifn chm chd service candidate identify individual service candidate distribution ifn chm chd service candidate report distribution ifn chm chd service candidate measurement ifn chm chd analysis recall ifn split ifn WCA mem FoSCI limbo performance ifn ifn FoSCI limbo WCA mem  apache roller statistical comparison limbo FoSCI significantly outperforms WCA mem ifn similarly ifn distribution service candidate report xwiki platform WCA assigns publish functionality  service service candidate interface ifn phenomenon FoSCI limbo however identify service interface ifn plot consistent ifn analysis chm chd baseline perform FoSCI rank highlight FoSCI significantly surpasses limbo statistical difference FoSCI mem WCA understand observation investigate distribution chd chm xwiki platform mem FoSCI mem service interface service interface interface chm chd consequently mem exceptionally chm chd FoSCI summary evaluation functionality ifn ifn FoSCI limbo capable splitting business responsibility within monolith reasonable service candidate mem WCA tend heavily function service service furthermore chm chd chm chd FoSCI performs limbo WCA mem chm chd FoSCI decompose monolith super service monolith service phenomenon obvious decompose software xwiki platform evaluation modularity   concretely illustrates distribution   individual service candidate likewise distribution   distribution     service candidate measurement   analysis  FoSCI  FoSCI outperforms others outlier   limbo WCA mem modularity statistically statistical significance comparison FoSCI others structural cohesion  couple  individual service candidate service candidate FoSCI exhibit distinctively positive difference   unable achieve cohesion couple conceptual cohesion  couple  observation bee observation consistent summary evaluation modularity structural conceptual modularity measurement FoSCI split monolith service candidate considerably modularity entity inside service candidate FoSCI tend function coherently generate influence coverage FoSCI FoSCI depends functional suite investigate coverage influence manually inspect source code categorize entity execution trace investigate service candidate generate FoSCI performance coverage category non entity execution trace manually inspect source code investigate project  solo  apache roller categorize uncovered data repository mention category uncovered category illustrates distribution project  execution trace percent uncovered  account percent account percent   solo apache roller execution trace code entity distribution coverage influence FoSCI FoSCI perform coverage execution trace introduce variable coveragetr  coveragetr denotes coverage execution trace ratio execution trace entire execution trace  denotes coverage ratio entire execution trace project investigation conduct coveragetr percent experimental experimental  along increase coveragetr randomly execution trace specify coveragetr statistic label median  individually  coveragetr sometimes coveragetr statistically median  tends increase increase coveragetr therefore execution trace specify coveragetr correspond  median label rigorously conduct evaluation service candidate identify  assume solo project coveragetr coveragetr int configure introduce parameter FoSCI entity service candidate remain service candidate coverage define service candidate sci generate coveragetr max sci sourcewhere sci service candidate sci max maximum sci remain candidate coveragetr service candidate SC percent definition statistic  coveragetr distribution indicates percent service candidate remain candidate coveragetr differs project xwiki platform median percent coveragetr average  solo  apache roller  xwiki platform percent respectively distribution coveragetr quality criterion perform differently coverage differs investigate illustrates standard deviation sample compose coverage coverage summary data service candidate quality evaluation influence coverage differs however acceptable stability addition coverage varies percent impact FoSCI linear obvious execution trace variable observation coverage rate impact project xwiki platform investigate coverage influence future summary sum evident FoSCI efficient service candidate consistently exhibit reasonable functionality modularity evolution characteristic furthermore FoSCI acceptable stability split quality evaluation coverage execution trace differs limitation threat validity FoSCI service candidate evaluation framework propose focus functionality modularity evolvability without quality attribute performance security reliability FoSCI framework incorporate quality attribute assessment future relies execution trace instead source code appropriate scenario source code monolithic application available functionality within monolith extract service candidate core business capability commonly function frequently update feature transition usually incremental executable monolith sufficient functional suite available migration monolithic application service architecture brings benefit maintainability scalability complex costly importantly microservice architecture bullet improve maintainability application microservices objective improve quality poorly architect refactoring migrate microservices widely web application evaluation web application suffer maintainability scalability issue rapid evolution growth complexity however guarantee evaluation generalize embed mitigate threat web project architectural structure technology stack conduct future address threat validity due lack comprehensive reliable quality evaluation ass service candidate construct systematic measurement suite quantitatively consistently ass service candidate quality criterion functionality modularity evolvability metric metric derive service interface information structural conceptual dependency revision evaluation outperforms baseline respect metric deserves evaluation reliable metric become available related software decomposition decomposition goal software decomposition split manageable module component WCA limbo classic static structural relation extract source code input employ hierarchical cluster distance measurement employ information retrieval technique technique source file text corpus ignore structure program approach source code file vector keywords distribution topic extract source code comment perform comparative analysis cluster technique approach explore treat module cluster objective optimization modular quality optimization objective define software modularization multi objective optimization objective cohesion couple others exist rarely software functionality motivate assumption developer pursue module cohesion couple however factor cohesion couple account contrast functionality orient generates functional cluster model multiple optimization objective execution trace evaluation evaluate improvement cohesion reduction couple propose suite metric ass accuracy architecture recovery benchmark architecture mention addition cohesion couple quality criterion evaluation addition oracle architecture normally exist contrast employ extract service candidate interface revision novel objective service candidate identification identification service candidate identification software decomposition realm service architecture counterpart traditional software decomposition classify exist category data orient structure orient data orient splitting data source database partition database access compose service candidate data data diagram business logic user structure orient employ structural relation source code graph algorithm generate service candidate data orient database partition analysis data graph business logic cannot automate structure relieve manual operation expense ignore business functionality evaluation research service extraction microservice extraction infancy conduct evaluation validate conclude microservices benefit reduction domain redundancy propose others conduct none prior conduct comparative comprehensive evaluation conduct widely source project extract execution trace execution importantly evaluate metric assess independence functionality modularity independence evolvability respectively service extraction another related service extraction aim transition application service advantage resource described mechanism recommend transform service factor application performance penalty business functionality moreover developed implement refactoring technique reduce manual effort involve code transformation survey research migrate legacy application relevant issue approach concern address offload execute intensive portion mobile application remote server purpose mobile performance improvement optimization dynamic analysis execution trace dynamic analysis execution trace program comprehension recognize execution data accurately expose actual software behavior reveal specific functionality program utilized execution trace feature localization combine static analysis dynamic analysis feature location analyze execution trace rely analysis execution accurately recognize entity contribute function research employ execution trace program  summarize content execution trace generate uml sequence diagram infer hierarchical motif execution trace discover specific function program rationale leverage execution trace extract service candidate conclusion future propose FoSCI framework service candidate identification monolithic software moreover comprehensive measurement evaluate service candidate baseline evaluation FoSCI identify service candidate independence functionality modularity independence evolvability identify service boundary monolithic software complicate task research focus improve future interactive service candidate identification service identification monolith iterative incremental assist architect developer important expert knowledge service intend improve user integrate feedback guidance refining service candidate executable service service candidate intermediate potential implement service transition service candidate deployable service another goal future