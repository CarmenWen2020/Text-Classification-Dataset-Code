empirical comparison generation technique namely combinatorial CT random RT adaptive random scenario literature account realistic tester information parameter constraint pertain account challenge fault failure rate conduct program scenario combination available parameter constraint information failure rate significant difference technique fault detection ability fault detect failure rate relatively CT performs overall percent scenario enhances RT comparable CT percent scenario computational CT program highly constrain additionally constraint information unavailable highly constrain program random suite effective CT computational generation significantly technique introduction combinatorial CT potentially powerful technique reveal fault software however input approach model parameter constraint pertain previous assume perfect knowledge parameter constraint sadly unrealistic practical scenario model labour intensive error prone neither automatic technique tester rely practise tester parameter affect constraint delimit valid potential parameter combination absence constraint purely random surprisingly effective achieve combinatorial coverage relative performance combinatorial technique random improve adaptive version pure random tester imperfect partial knowledge constraint parameter apply furthermore fault easy detect execute fault failure characteristic fault harder detect practise tester interested fault characterise likely failure rate reliable proportion detect fault characterise failure rate implementation poorly understood proportion easy detect failure rate fault therefore important tester understand difference behaviour technique failure rate fault varies technique combinatorial CT combinatorial interaction cit random RT adaptive random presence partial information parameter constraint respect fault challenge denote fault failure rate CT RT popular technique knowledge implementation software suite generation automate technique understand relative effectiveness efficiency previous comparative report summarises previous CT RT CT RT previous controversial CT effective random suite others difference CT RT previous derive report empirical beyond analysis overview literature comparison CT RT regard comparison RT generally enhances RT theoretically empirically however assume constraint parameter problematic application constrain domain previous CT RT synthetically generate model model unconstrained synthetic fault combination thereby reduce relevance finding moreover none scenario account whereas behaviour CT RT scenario understand benefit limitation CT RT scenario empirical comparison partial parameter constraint important increase relevance scenario clearly optimistic tester aware parameter constraint potentially artificially inflate perceive performance technique imbue unrealistic information therefore adopt nuanced approach evaluate technique presence imperfect information report performance technique tester incomplete information parameter constraint intuition CT choice fault detect complex software previous  fault proneness additionally alternative technique CT proportion combination parameter similarity heuristic suite generation empirically evaluate moreover scenario application important investigate performance CT RT scenario report aim investigate thoroughly specifically account scenario relative performance CT RT conduct program software artifact infrastructure repository sir widely relatively highly configurable program combine choice feature scenario proportion parameter available proportion constraint available failure rate scenario scenario apply CT RT generate suite evaluate relative performance fault detection ability computational seek quantitative data underpin intuition CT RT baseline others extend explore relationship future finding suggestion choice CT RT respect scenario specifically primary finding clearly technique become indistinguishable failure rate rate denote almost impossible fault whereas fault failure rate non trivial technique expose quantitative bound intuition CT RT specifically technique become indistinguishable failure rate approximate sweet differentiation technique maximally distinguishable failure rate roughly overall CT recommend favourable technique fault detection ability RT percent scenario failure rate constraint model however constraint available model technique tend perform equally RT computational effective improvement RT enhances RT almost scenario percent scenario effective CT sometimes performs however significantly CT constraint model parameter involve constraint strength suite desirable partial constraint information available average difference proportion fault detect strength desirable failure rate percent fault detect sufficiently suite constraint information unavailable highly constrain program random suite preferable performs CT computational contrast constraint model recommend systematically suite CT increase strength organise introduces concept suite generation technique CT RT describes research experimental report discus implication finding describes threat validity related concludes background introduce notation throughout generation technique combinatorial CT random RT adaptive random model suite generation software behaviour impact parameter interaction suppose SUT parameter configuration parameter internal external user input etc parameter discrete finite tuple denotes consists software usually prohibitively tester strategy automatically sample subset additionally combination parameter valid due constraint parameter SUT constraint parameter assignment cannot combine constraint prevent execution constraint handle strategy apply suite generation constraint classify constraint constraint parameter combination cannot constraint combination usually identify software tester interaction rarely parameter correspond constraint model model font processor model parameter exists constraint text cannot superscript subscript model font algorithm framework met generate constraint satisfy accord criterion return generate suite model strategy framework algorithm illustrates framework empty suite generate iteratively met framework adapt suite generation technique CT RT difference selection strategy available RT constraint handle implement generation algorithm avoid potential environmental bias combinatorial insight combinatorial CT combinatorial interaction cit parameter assignment trigger fault interaction various parameter software failure CT suite array combination fix parameter parameter interaction strength empirical demonstrate parameter software failure usually likely exceed therefore CT detect proportion fault apply relatively CT parameter interaction combination combination parameter generation strategy CT construct array combination refer strength array CA   array  parameter array model CA instead examine CT valid combination interaction parameter trigger fault effectiveness array equivalent exhaustive array CA CA generate array criterion algorithm generate uncovered combination implement variant  effective algorithm constrain array generation iteration algorithm reorder parameter randomly assigns parameter another parameter uncovered combination assign calculate maximum coverage assign parameter boolean satisfiability solver apply assignment satisfies constraint invalid combination introduce parameter reassign another violate constraint valid combination finally array return aside  researcher propose algorithm array generation algebraic approach constraint satisfaction csp incremental boolean satisfiability hyper heuristic mode   CASA comprehensive survey technique random instead intentionally sample target fault random RT generates input random technique conceptually easy implement useful technique fault detection ability theoretically analyse RT generate suite generate suite accord correspond CT suite array generate RT suite criterion algorithm generate random assign random parameter similarly handle constraint solver assignment satisfies constraint introduces invalid combination parameter reassign another random adaptive random observation fault input cluster contiguous adaptive random propose enhance RT randomly sample evenly goal promote diversity dissimilarity trigger fault sample strategy away previously execute generate suite correspond CT suite software SBST fitness function diversity generate suite criterion algorithm generate previously generate implement fix candidate algorithm FSCS algorithm iteration algorithm generates candidate random solver ensure candidate satisfies constraint subsequently distance similarity metric evaluate candidate distance previously generate suite distance suite define minimum ham distance empirical conduct research research goal technique highly configurable combinatorial CT random RT adaptive random empirically fault detection ability computational scenario understand benefit limitation aim research RQ scenario significant difference performance technique RQ effective technique investigate detect fault scenario RQ strength impact effectiveness technique scenario RQ efficient technique scenario program program flex grep gzip sed  drupal busybox linux detail program detail program scenario generate program software artifact infrastructure repository sir program source command utility standard benchmark combinatorial literature program source highly configurable sir program parameter drupal modular framework web content management busybox software unix utility executable file linux operation model sir program previous parameter model input program flag option digit file etc parameter constraint model manually extract described specification tsl sir sir file script execute model drupal feature model report previous parameter module enable disabled customise functionality parameter constraint feature model manually extract software documentation model busybox linux extract model previous parameter model configuration option implement conditional compilation preprocessor  directive parameter constraint extract  file model busybox linux parameter constraint respectively model cannot efficiently handle greedy generation algorithm aware CT generate suite model aim CT RT file bug report mention extract sub model program algorithm model extraction fault detect model fault undetectable trigger parameter model source file detectable fault extract relevant parameter constraint model parameter busybox linux respectively algorithm extract sub model fault corpus fault detect model parameter file parameter model parameter constraint model parameter involve model return constraint constraint constraint model encode boolean formula satisfied sixth constraint boolean formula program constraint involve parameter evidence constraint parameter harder tester model constraint treat equally identification parameter constraint program CT model program extract subset model busybox linux previous avoid potential bias model program investigate fault detection ability technique sir program available software version sir model version program version sir series fault developer bug encounter sir correspond fault matrix trigger fault fault trigger parameter model namely cannot detect CT RT suite generate sir program exhaustively examine model fault detect version fault fault version equally distinguish version fault belongs scenario drupal busybox linux exist corpus fault previous combination parameter trigger fault accord previous fault mostly bug report developer confirm fix developer fault intention program evaluate technique program model fault cannot achieve sir program alone seventh fault scenario feature impact performance technique CT RT proportion parameter available para proportion constraint available con model failure rate rate fault detect exist failure data combination choice feature para con rate scenario proportion parameter available para defines raw parameter task model software tester parameter model phase understand software specification parameter available automate technique truly relevant investigate impact available parameter effectiveness technique program model series model para para parameter parameter model program para parameter model raw explore para program consist para parameter detect fault complement parameter default fault matrix corpus fault model furthermore tester unaware pertinent constraint valid input proportion constraint available con denotes constraint fully identify tester invalid combination cannot execute suite generate accord model con invalid harder detect fault suite constraint task con important issue assess effectiveness technique affected partial constraint identification model para parameter model con constraint correspond para parameter con constraint model con program   constraint model con respectively failure rate rate denotes difficulty detect fault measurement effectiveness random model para con input failure trigger fault failure rate fault respect model define   SourceNote rate detect likely harder scenario para con rate combination model para con fault fault proneness rate failure rate fault dependent input define model program fault rate accord model contains parameter default parameter relevant failure combination rate fault becomes parameter available model therefore correctly difficulty detect fault scenario rate calculate model scenario program fault rate model evaluation scenario series model combination para con program model fault detect input compute rate fault fault undetectable model rate fault scenario model define para con finally combine choice para con rate scenario program scenario investigate scenario grep para parameter con combine choice para con model model para con fault detect failure rate failure rate therefore scenario scenario grep fault detect respectively iterate model failure rate model scenario grep distribution failure rate investigate program contains failure rate obtain scenario grep fault relatively failure rate frequently fault easy detect failure rate distribution failure rate program evaluate fault detection ability combinatorial CT random RT adaptive random scenario apply CT generate array RT generate suite fault detect suite computational technique fault scenario effectiveness technique scenario effectiveness  sourcethe ratio technique performs scenario ratio technique probability detect fault failure rate rate suite generate accord model para con technique involve randomness therefore inferential statistical analysis cater inherent randomness algorithm sample data population execution suite generation evaluation scenario apply tukey HSD honest significant difference percent significance distinguish technique significantly tukey HSD multiple comparison report CT RT statistical significance difference proportion fault detect assigns technique performance technique significantly technique ranked category effectiveness addition statistical significance imply practical significance apply vargha  Aˆ statistic investigate magnitude difference technique denotes probability technique outperforms another Aˆ suggests technique equivalent Aˆ probability technique yield machine intel xeon ghz cpu GB memory centos operating research investigate impact scenario viewpoint model failure rate tester determines choice para con model cannot failure rate commences therefore model viewpoint analyse respect combination para con fault detection ability evaluate scenario para con failure rate alone determines proneness fault failure rate indicates fault harder easy detect regardless choice para con failure rate viewpoint analyse respect rate experimental data scenario program companion website http gist  edu doc RQ existence difference research asks technique perform differently investigate impact scenario effectiveness CT RT identify scenario technique significantly accord statistical investigate distribution fault detection ability scenario calculate proportion fault detect effectiveness technique distribution respect combination para con strength respectively namely boxplot contains obtain scenario combination para con strength proportion fault detect combinatorial CT random RT adaptive random para con conclude proportion constraint available con increase ability detect fault tends increase technique regardless choice para variance fault detection ability decrease scenario constraint available model scenario constraint available para indicates importance identify constraint improve fault detection technique addition parameter available model technique detect fault available con median proportion fault detect scenario parameter available para strength however con increase proportion parameter available greatly reduce detect fault con fault detect CT percent scenario quartile choice para strength furthermore proportion fault detect increase increase strength para con median proportion fault detect increase strength strength strength therefore detect fault increase technique importance strength combinatorial average proportion fault detect respect choice rate define scenario conclude fault failure rate easy detect rate fault detection fault almost detect strength failure rate hardest detect fault rate technique likely detect strength performance increase strength attribute strength suite detect fault proportion fault detect combinatorial CT random RT adaptive random rate significant scenario illustrate trend concern fault detection ability CT RT due randomness difference significant scenario deem significant tukey HSD determines exists significant difference fault detection effectiveness technique scenario tukey HSD investigate scenario percent significant significant scenario strength respectively confirms previous observation strength usually suite performance difference tend diminish increase suite significant scenario para con strength scenario para con scenario significant scenario respectively distribution significant scenario para con scenario increase increase para fault detect parameter involve scenario para significant scenario occurs con percent scenario significant indicates technique tend indistinguishable constraint unavailable model highly constrain input significant scenario con para con proportion significant scenario percent strength indicates difference technique model partial constraint scenario likely model configurable non trivial task dependency software configuration distribution significant scenario interval rate rate series continuous uniformly distribute uneven interval calculate significant scenario interval scenario rate significant scenario strength distribution significant scenario interval rate increase rate significant scenario increase decrease suggests performance difference technique likely rate relatively specifically average percent scenario significant rate whereas proportion percent interval additionally performance difference diminish insignificant rate scenario program rate investigate contrast rate significant scenario strength overall average rate significant scenario technique tend perform differently fault relatively detect sum RQ effectiveness CT RT tends significantly failure rate relatively difference failure rate technique tend perform differently suite generate pairwise suite model highly constrain program contains constraint con technique tend become indistinguishable fault detection RQ favourable technique research asks technique perform scenario fault detection ability technique namely CT RT CT RT scenario tukey HSD significant difference performance technique scenario technique significantly superior indistinguishable significantly inferior technique across program strength technique investigate indistinguishable scenario strength due significant difference CT RT percent scenario characteristic significant scenario technique distinguishable investigate RQ specifically technique tend perform differently failure rate relatively proportion constraint model regard relative performance technique overall CT significantly outperforms RT scenario scenario scenario RT significantly outperforms strength otherwise RT moreover percent scenario CT indistinguishable difference scenario suggests usually effective CT scenario technique AA significantly superior indistinguishable significantly inferior technique BB technique favourable significant scenario scenario technique favourable technique significantly others recommend accord tukey HSD technique exactly favourable technique scenario belong performance significantly assume scenario assign CT RT respectively CT significantly RT distinguishable CT RT CT favourable technique technique RT proportion significant scenario technique favourable para con dimensional coordinate denotes combination para con darker colour indicates proportion para con significant scenario CT RT favourable percent respectively scenario significantly technique proportion significant scenario technique favourable para con proportion significant scenario favour CT RT combination para con strength specifically significant scenario CT identify favourable percent CT statistically significantly technique scenario technique perform equally overall CT others percent demonstrates CT favourable technique addition con CT favourable percent significant scenario CT unlikely perform relatively proportion constraint model however scenario CT significantly RT fault detection across program percent scenario flex scenario percent constraint model con invalid combination prevent execution failure combination invalid combination fault cannot detect failure combination masked constraint violation mask consequently failure combination parameter fix valid trigger fault parameter fix exceeds strength CT generate trigger fault apply concerned favourable significant scenario RT favourable scenario RT favourable demonstrates superiority RT regardless scenario moreover significant scenario CT favourable technique recommend percent suggests effectiveness perform CT extent furthermore scenario percent significant scenario favourable CT performs CT proportion significant scenario technique favourable interval rate interval indicates significant scenario rate CT RT favourable percent significant scenario respectively proportion significant scenario technique favourable interval  conclusion CT generally favourable technique demonstrates relatively behaviour CT moreover rate average CT favourable percent significant scenario noticeably RT percent percent suggests CT desirable fault detect additionally quantify difference technique apply vargha  Aˆ statistic CT RT CT RT significant scenario distribution Aˆ obtain strength Aˆ indicates technique probability outperform distribution Aˆ statistic obtain significant scenario CT RT CT RT percent significant scenario percent significant scenario CT percent outperform RT regard CT median program median confirms indistinguishable performance CT addition RT percent significant scenario confirms superiority RT sum RQ CT RT percent scenario failure rate rate favourable technique investigate CT desirable constraint model con percent scenario CT others con improvement RT enhances RT almost scenario moreover indistinguishable CT percent scenario suite RQ strength research asks technique perform strength suite technique tend indistinguishable strength suite apply CT generally strength remain difference exists strength scenario detect fault scenario apply CT recommend investigate impact strength effectiveness technique scenario evaluate difference CT RT difference  CT RT  CT RT sourcewhere RT RT apply generate suite CT potential performance technique average difference obtain para con difference improves fault detection ability almost average difference fault detection ability CT RT   choice para con con increase improvement tends slightly increase subsequently decrease choice para technique specifically improvement occurs constraint model con average difference CT RT respectively contrast improvement average con indicates suite beneficial detect fault partial constraint available model constraint identify apply increase strength incremental manner average difference proportion fault detect rate axis adjust due uneven distribution failure rate difference performance increase decrease increase rate attribute slight multimodal distribution program improvement occurs failure rate relatively detect percent fault failure rate exceeds difference tends diminish apply trigger easy detect fault difference tends diminish failure rate likely trigger almost impossible fault average difference fault detection ability CT RT rate sum RQ scenario suite generally performance partial constraint available model con average difference proportion fault detect strength desirable scenario strength desirable failure rate relatively percent fault detect failure rate exceeds strength benefit RQ efficiency research asks computational CT RT scenario scenario duration suite generation related parameter constraint impact para con computational technique additionally due greedy framework apply generate suite scenario technique suite generation quickly within scenario therefore computational CT RT across scenario program strength respectively generally CT expensive expensive RT computational conforms conventional wisdom RT calculate distance previous iteration CT calculate combination computational technique grep sed drupal busybox linux para con program program computational CT RT grep sed drupal busybox linux conclude computational RT negligible almost computational CT increase increase para parameter model constraint available con CT CT model parameter linux however constraint tester con increase significantly grep sed tends CT con CT grep sed parameter involve constraint highly constrain program drupal busybox linux proportion parameter involve constraint percent respectively generate algorithm randomly sample valid program highly constrain constraint model randomly sample likely valid computational grep sed whereas parameter busybox linux CT tends sum RQ RT technique scenario constraint model con faster CT spends faster CT parameter however constraint model parameter involve constraint tends CT CT 5Discussion percent scenario combinatorial CT fault detection ability random RT adaptive random therefore effectiveness priority recommend CT moreover technique tend significantly distinguishable failure rate relatively strength CT helpful detect detect fault CT likely perform constraint correctly identify percent scenario CT significantly RT partial constraint model however derive CT suite scalability CT confirm earlier finding CT model linux parameter strength hence research improve scalability CT program addition CT CT generation algorithm derive CT model highly constrain program technique tend exhibit behaviour percent scenario constraint available model RT preferable due computational furthermore RT effective CT scenario failure rate efficiently discover easy detect fault likely poorly implement software similarity suite generation technique effectiveness similarity heuristic combination coverage demonstrate percent scenario performs CT fault detection ability indeed alternative CT extent moreover model busybox linux computational effective usually faster CT however model highly constrain proportion constraint model computational CT desirable apply constraint handle strategy FSCS algorithm improvement constrain suite generation strength suite concerned difference technique tends diminish suite suggests RT perform limitation resource additionally performance difference CT RT usually indistinguishable constraint information unavailable model con desirable average difference proportion fault detect con therefore tester cannot identify constraint highly constrain program RT suite sophisticated technique CT contrast tester confidence constraint model con average difference apply CT increase strength incremental manner additionally although RT favourable CT scenario  advantage CT percent combination coverage guarantee desire CT apply overall fault tend easy detect poorly implement software constraint tend identify tester insufficient knowledge software RT preferable usually efficient effective CT contrast fault tend harder detect model tends CT likely perform however model highly constrain parameter involve constraint CT preferable constraint handle becomes effective threat validity internal threat validity concerned performance CT RT depends implementation slightly apply generation algorithm although widely array generation available generate RT suite presence constraint avoid potential bias apply framework technique implement generation algorithm technique framework difference selection strategy acknowledge available combinatorial available random combinatorial avoid environmental bias focus differentiates strategy selection criterion focus framework furthermore allows suite generate reasonable model CT superior scenario predict CT suite generate CT algorithm suite RT suite detect fault CT algorithm  algorithm implement version popular version argue survey acknowledge sophisticated CT variant developed suite CT diverse suite another internal threat validity model program creation perfect model identification parameter constraint challenge task indeed CT model extract subset model previous avoid potential bias model program acknowledge tester model identify parameter constraint encode constraint format assign priority constraint addition exist corpus fault manually repository ensures fault report confirm developer avoids biasing fault detection technique acknowledge CT RT discover fault program external threat validity concerned threat conduct program scenario bound failure rate recommend technique sir program relatively respect parameter software repository widely CT literature highly configurable program model fault program realistic scenario technique related evaluate effectiveness CT comparison CT RT CT manually generate technique however conflict report literature CT detect fault RT achieve combination coverage evaluate random code coverage operation CT strength effective coverage  random detect security fault network related access policy superiority CT additionally apply random examine logical expression specification tcas II expand automatically generate expression simulation investigation CT advantage RT moreover CT RT conformance byte code verifier component java virtual machine demonstrate superiority CT CT detect wider fault cannot detect random suite comparable recently conduct empirical sample algorithm source configurable software CT strength detect fault regard tradeoff suite fault detection ability enable disabled algorithm CT efficient although CT outperforms RT finding report  mallow combination coverage optimal array random suite RT percent combination evaluate random industrial program manually fault significant difference technique structural combination coverage random suite component flight guidance CT benefit RT improve requirement additionally code coverage fault detection ability CT RT siemens suite conclude difference technique significant probably moreover comparison CT RT reveal relative effectiveness dependent strength random  generate suite industrial CT adequate CT strength perform manually generate suite random detect deadlock network simulator CT detects slightly deadlock random suite CT performs RT additionally empirical arcuri  formal analysis probability detect interaction trigger fault CT RT random suite array trigger fault probability percent furthermore conclude increase parameter RT effective converge towards effectiveness CT however analysis assumes constraint originally enhance fault detection ability RT technique almost consistently demonstrate outperforms RT simulated report empirical conduct various source program fault fault however impact constraint goal achieve diverse suite implies combination relatively combination coverage achieve propose technique employ similarity heuristic generate prioritise configuration software SPL although technique guarantee achieve combination coverage SPLs reasonable portion combination suggests similarity generation viable alternative however combination coverage evaluate although comparison CT RT RT CT RT technique ability detect interaction trigger fault detect fault CT RT suite however detect fault CT advantage finding explain significant difference RT CT although previous CT RT aspect summarise previous focus impact parameter involve fault focus completeness model parameter constraint difficulty fault detection moreover previous ideal assumption SUT unconstrained fault combination simulated conduct  scenario instead program constrain domain software fault multiple combination practical suggestion realistic scenario detailed comparison previous detailed comparison previous sum overview literature comparison CT RT although exist shortcoming comparison CT RT analysis report empirical finding empirical comparison CT available previous unconstrained model RT moreover previous assume usage model relevant parameter constraint tester however model remains task automate tester aware parameter constraint therefore unable avoid omit researcher propose adaptive strategy relieve tester perfect model addition fault characterise failure rate challenge technique hence empirically CT RT report observation respect scenario parameter constraint failure rate achieve understand relationship conclusion empirically popular technique namely CT RT scenario fault detection ability computational evaluate choice proportion parameter available para proportion constraint available con model fault failure rate rate conduct program fault scenario evaluation tends significant difference fault detection ability technique failure rate relatively however suite constraint model highly constrain program difference performance tends diminish indistinguishable CT recommend apply performs technique percent scenario becomes favourable fault detect constraint correctly identify model improvement RT enhance RT indistinguishable CT percent scenario however constraint model parameter involve constraint significantly efficient RT CT overall relative performance technique dependent interplay fault  tester knowledge parameter constraint RT preferable fault tend easy detect constraint tend available model however fault become harder detect model become recommend CT CT preferable highly constrain program model corpus fault code experimental plot respect program available companion website http gist  edu doc