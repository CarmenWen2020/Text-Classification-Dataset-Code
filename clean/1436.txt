describes GenProg automate repair defect shelf legacy program without formal specification program annotation cod GenProg extend genetic program evolve program variant retains functionality susceptible defect exist suite encode defect functionality structural differencing algorithm delta debug reduce difference variant program minimal repair algorithm report experimental program code module code span defect average analyze generate repair qualitatively quantitatively demonstrate efficiently evolve program repair defect fragile input memorization serious degradation functionality introduction software quality  mature software project unknown bug outstanding software defect typically exceeds resource available address software maintenance bug repair component consume expensive accounting percent software project billion per simply bug ubiquitous repair consume manual technique automatically detect software flaw intrusion detection model lightweight static analysis software diversity however detect defect identify bug repair software deployment frequency defect report increase portion repair address automatically describes evaluates genetic program repair GenProg technique exist automatically generate repair bug shelf legacy application define repair patch consist code apply program pas typically behavior encode bug regression suite reproduce error generate automatically repair patch interchangeably GenProg formal specification program annotation cod GenProg approach generic report demonstrate GenProg successfully repair defect contrast related approach repair specific defect buffer overrun GenProg input program defect GenProg apply program source individual module genetic program GP program variant retains functionality vulnerable defect GP stochastic inspire biological evolution discovers computer program tailor task GP computational analog biological mutation crossover generate program variation variant user define fitness function evaluates variant GenProg input evaluate fitness individual fitness continued evolution GP successful variant encode behavior fail encode bug although GP impressive previously evolve shelf legacy software patch vulnerability despite various proposal automate error repair significant impediment GP effort date potentially infinite program introduce innovation address longstanding GenProg operates statement program abstract syntax ast increase granularity hypothesize program contains error likely implement behavior elsewhere therefore GenProg statement program repair error code finally GenProg localizes genetic operator statement execute fail critical fault localization unsolved scalability approach relies exist imperfect strategy exist defect nondeterministic bug cannot localize defect however choice reduce sufficiently permit automate repair varied program error GP introduces irrelevant code along repair GenProg structural differencing delta debug postprocessing obtain minimal program permit pas repair contribution GenProg algorithm GP automatically generate patch bug program validate algorithm novel efficient representation operation apply GP domain demonstrate GP repair software  program publicly document bug experimental GenProg efficiently repair error program algorithm stochastic report rate program average trial program trial successful repair average rate percent across program trial report average rate percent  demonstrate algorithm repair multiple error program drawn multiple domain error span defect infinite loop segmentation fault remote heap buffer overflow inject code remote heap buffer overflow overwrite variable  denial service local stack buffer overflow integer overflow format vulnerability benchmark program unix utility server medium player text processing program benchmark code loc although GenProg operates directly program module code previously version summarize audience extends repair previous repair program code error additional program GenProg entire program source code module benchmark consist source code repair code module program error significant increase  GenProg ability loop repair description proof concept evaluation loop repair integrates GenProg anomaly intrusion detection repair quality partial evaluation quality repair manually quantitatively indicative workload fuzz variant bug induce input preliminary finding repair fragile memorization input instead address defect retain functionality motivate defect highlight important insight underlie GenProg approach motivate important decision pseudocode adapt remote exploitable heap buffer overflow vulnerability nullhttpd webserver function request incoming request data request header  allocate memory request content trust content request header malicious attacker negative content malicious payload request overflow heap remotely gain server pseudocode buggy webserver implementation repair version program pseudocode buggy webserver implementation repair version program automatically repair program codify desire behavior sends request negative content malicious payload webserver webserver unmodified nullhttpd fails GenProg valid variant program display specify buggy behavior however randomly related program yield undesirable variant algorithm version  crash bug encode fails request repair program pas error encode retain core functionality functionality express standard regression obtains index html retrieve output satisfy goal program modification ideally focus code affect behavior without affect behavior therefore employ fault localization strategy reduce program processing location exclusively negative standard regression  demonstrate error mutation crossover operation therefore focus exclusively implement functionality despite fault localization explore constrain assume defect repair adapt exist code another location program program mistake location handle situation correctly another hypothesis nullhttpd although request handle  bound user specify content cgi function implement elsewhere fault localization bias modification request code restriction exist code insertion limit eventually GenProg insert cgi  program version  primary repair GP spurious addition repair program randomly insert return  request socket return insertion dangerous execute contribute repair remove extraneous postprocessing minimal patch repair traditional diff format formalize procedure concrete implementation detail technical approach pseudocode GenProg GenProg input source code defect fail negative defect passing positive requirement GP maintains population program variant variant modify instance defective program modification generate mutation crossover operation described initial population mutation operator construct initial GP population input program fitness function evaluates individual fitness desirability GenProg input GP evaluate fitness GP iterates fitness individual generation introduce variation mutation crossover operation cycle goal achieve variant predetermine resource limit consume finally GenProg minimizes successful variant pseudocode GenProg GP feasible variant subroutine mutate  described subsequently program representation GenProg variant candidate program abstract syntax statement program consist program statement associate statement occurrence various execution trace GenProg generates program ast shelf cil toolkit ASTs express program structure multiple abstraction granularity GenProg operates construct cil defines statement assignment function conditionals loop construct GenProg directly modify expression directly modify directive goto genotype representation reflect tradeoff expressive scalability constraint permit program modification GP generates syntactically ill program generate unbalanced parenthesis however generate variant fail compile due semantic error variable scope sequence statement constrains mutation operator likely relevant highly subset program statement modify although mutation operator variant sequence program crossover operation described construct apply transformation assigns statement unique insert code statement execute duplicate statement remove assume statement frequently loop likely repair site however respect statement statement sequence statement execution negative candidate repair initial statement assign modify initial statement negative execution modify statement execute positive goal bias modification portion source code likely affect behavior avoid influence behavior   statement positive parameter wpath wpath prevents modification statement positive remove wpath typically serf localize fault fault localization strategy benchmark program fault localization instead advantage relatively shelf approach repair majority program investigate without typically efficiently however effective fault localization automatic manual repair remains unsolved exist fault remain impossible localize GenProg improve advance fault localization extension technique sophisticated localization future selection genetic operator selection code implement GenProg selects individual variant generation GenProg discard individual fitness variant compile pas remainder viable selection strategy pop member generation previous iteration individual become mating pool stochastic universal sample individual probability selection directly proportional relative fitness tournament selection subset population randomly tournament member subset generation iterate population selection technique application GP operator mutation crossover variant mating pool mutation pseudocode mutation operator mutation statement along statement  reflect correspond ast statement mutate probability maximum mutation per individual global mutation rate parameter  probability statement mutate mutation operator update  update ast genetic algorithm mutation operation typically involve flip symbolic substitution primitive statement mutation operator complicate consists deletion entire statement delete insertion another statement insert swap another statement option uniform random probability insertion swap statement  chosen uniformly random anywhere program along statement influence probability candidate repair reflect intuition related program null probably somewhere necessarily negative swap  replace   replace  insert transform  statement contains   implementation  modify insert although intermediate variant fail compile code insert reference scope variable deletion transform  empty statement delete statement therefore modify later mutation operation statement retains statement maintain invariant uniform program variant insert swap statement initial crossover pseudocode crossover operator crossover combine variant another offspring variant combine information crossover rate survive variant population undergoes crossover variant operation per generation statement along cutoff along swap statement cutoff crossover operator crossover bias crossover program crossover crossover operator update   update ASTs fitness function fitness function evaluates acceptability program variant fitness termination criterion selection variant generation fitness function encodes software requirement negative encode fault repair positive encode functionality cannot sacrifice compile variant ast executable program executable successful positive global parameter  successful negative global parameter  fitness function simply sum fitness       source   positive concrete variant compile fitness zero safety evaluation virtual machine sandbox validate repair correctness suite selection important consideration repair minimization terminates successfully GP discovers primary repair due randomness mutation crossover algorithm primary repair typically contains magnitude repair program render repair inspect correctness therefore GenProg minimizes primary repair repair express edits standard diff format defect associate patch likely address GenProg performs minimization difference primary repair program discard difference affect repair behavior standard diff patch encode concrete abstract syntax concrete syntax inefficient minimize adapt  xml differencing algorithm cil ASTs modify  generates structure edit operation subtree node become node encode typically shorter correspond diff patch apply edit syntactically ill program patch easy minimize minimization subset initial repair edits without program fail minimal subset brute subset initial edits infeasible instead delta debug efficiently compute minimal subset minimize repair  edits convert automatically standard diff patch apply automatically developer inspection patch report unix diff patch  operation repair description substantiate automate repair defect buggy program patch GenProg generates benchmark subsequent defect infinite loop segmentation fault memory allocation error integer overflow format vulnerability program source repair restrict attention module negative gcd euclid algorithm compute divisor  fragment code microsoft  medium player freeze december unix utility fuzz program crash random input remain benchmark public vulnerability report benchmark program program repair program code unix utility repair entirety however entire  server module openldap repair indicates openly available exploit exemplar repair previously publish security domain illustrate repair context program publicly document bug bug corresponds public vulnerability report indicative patch discover GenProg nullhttpd remote heap buffer overflow nullhttpd webserver lightweight multithreaded webserver handle static content cgi script version contains heap buffer overflow vulnerability allows remote attacker execute arbitrary code illustrates vulnerability explanatory purpose nullhttpd trust content user http header request negative nullhttpd overflow buffer positive request publicly available exploit negative negative request crash webserver  attack succeed insert legitimate request index html exploit negative fails index html actual buffer overflow occurs  data function define http  attacker however location program cgi function cgi data evolve repair header function data processing cgi instead  data minimize repair although repair release developer insert local bound code  eliminates vulnerability retains desire functionality openldap  denial service openldap server implement lightweight directory access protocol client authenticate query internal telephone directory version vulnerable denial service attack LDAP encodes protocol lightweight encode ber  remote attacker crash server improperly request assertion visibly fails  restrict attention file demonstrate repair program module isolation without program analysis evaluate fitness variant openldap source rebuild link  library apply binary positive consist unmodified prefix regression suite openldap negative positive exploit request insert problematic code around loop contains sanity processing ber tag tag byte byte repair remove entire loop byte untouched limit ber tag repair openldap handle repair fix sanity multibyte ber tag however tag actually define openldap request repair openldap lighttpd remote heap buffer overflow lighttpd webserver optimize performance environment youtube wikimedia others version  module improves script performance vulnerable heap buffer overflow allows remote attacker overwrite arbitrary cgi variable execute server machine GenProg repair dynamically link mod  without executable positive request static content index html request cgi perl script action server cgi environment variable negative request exploit retrieve content etc passwd file content return exploit request lighttpd random text creates request fake  data overwrites execute script vulnerable server responds content etc passwd exploit request lighttpd random text creates request fake  data overwrites execute script vulnerable server responds content etc passwd  env function memcpy data buffer without bound  env loop  env bound calculation repair modifies calculation  uninitialized loop exit data allocation however repair server report cgi server environment variable static dynamic content php integer overflow php program interpreter popular web application script version vulnerable integer overflow attack allows context dependent attacker execute arbitrary code exploit interpreter calculates maintains bound replacement openldap repair restrict GenProg operation processing library manually generate positive php functionality iteration splitting concatenation popular built function explode negative php processing exploit code program variant output without crash replacement replaces instance attack functionality implement php char str function php str replace file php str replace macro  define header file calculate macro expands len char len wrap around negative  input repair replaces disabled output unchanged input  replaces perform php str str php str str function replaces instance substring another vulnerable integer overflow php char str calculates differently disable functionality suppress security violation legitimate response context mode mode although acceptable situation disable functionality deleterious consequence setting address issue  format  ftp server allows anonymous authenticate file transfer command execution version vulnerable format vulnerability site exec enable user execute restrict subset quote command server user command directly printf function anonymous remote user gain access carefully conversion although exploit structure buffer overrun underlie lack input validation GenProg entire  source positive obtain directory listing transfer text file transfer binary file correctly reject invalid login innocent site exec command negative exploit dynamically craft format target architecture bug site exec function  manipulates user buffer cmd  output printing execute command return code denotes ftp protocol  cmd printf cmd carefully craft cmd format compromise explicit attempt sanitize cmd skip slash convert lowercase prevent format attack repair replaces  cmd  char disables verbose debug output cmd report return code properly sanitize site exec buf maintain functionality GenProg repair performance report GenProg repair error multiple legacy program evaluate repair multiple trial performance scalability fitness function evaluation experimental setup program defect benchmark consist program program loc repair error span defect infinite loop segmentation fault remote heap buffer overflow inject code remote heap buffer overflow overwrite variable  denial service local stack buffer overflow integer overflow format vulnerability repair module program code conduct quad core ghz machine program negative elicits fault unix utility fuzz input evince fault others construct vulnerability report positive per program  fuzz input others manually focus relevant program functionality openldap suite parameter report global GenProg parameter chose pop typical GP application trial GP maximum generation fitness computation   related precise fitness distance correlation metric however benchmark heuristically chosen capture intuition fitness function emphasize repair fault positive evenly thorough exploration future parameter setting fix parameter setting wpath  wpath wpath   SourceRight click MathML additional feature wpath statement execute negative positive mutate wpath statement infrequently parameter wpath  additional GenProg robust parameter population selection crossover technique impact repair probability worsens beyond  sum statement negative estimate complexity statement negative positive wpath metric correlate algorithm performance trial define trial consist serial invocation GP loop parameter trial initial repair otherwise GP generation per parameter perform random trial program report percentage trial repair average initial repair successful trial minimize repair deterministic perform per successful trial initial repair input random trial deterministically reproducible repair unique program GenProg generates patch random trial random trial GenProg acceptable patch  patch openldap disparity likely related program error patch report patch theory infinite address error however definition repair program pas render patch acceptable rank acceptable patch remains future investigation optimization calculate fitness memorize fitness abstract syntax variant ASTs identical source code evaluate twice similarly variant unchanged generation reevaluate beyond cache prototype optimize advantage GP repair task embarrassingly parallel fitness variant program individual variant evaluate independently repair summarizes repair program initial repair report timing information GP phase repair minimization report average per trial primary repair execution analyze detail repair average fitness average fitness evaluation per successful trial fitness function evaluation dominant expense GP application independent specific hardware configuration trial successful average percent trial repair although benchmark succeed frequently rarely rate mitigate multiple independent trial parallel primary repair diff experimental program module source code program source code report average random trial positive describes positive initial repair average performance trial average successful trial fitness average fitness evaluation successful trial random trial repair report average unix diff source primary repair repair report information production minimal repair initial repair minimization succeed describes operation perform indicative patch patch insert code delete code insert delete code experimental program module source code program source code report average random trial positive describes positive initial repair average performance trial average successful trial fitness average fitness evaluation successful trial random trial repair report average unix diff source primary repair repair report information production minimal repair initial repair minimization succeed describes operation perform indicative patch patch insert code delete code insert delete code repair performance information transform primary repair repair summary repair judged manual inspection minimization deterministic fitness evaluation initial repair minimize patch manageable average patch insert code gcd    delete code uniq  openldap lighttpd flex  php insert delete code nullhttpd  sequence mutation repair operation patch swap deletion minimize patch contains insertion comprehensive code review beyond scope manual inspection suggests patch acceptable patch delete code necessarily degrade functionality delete code erroneously patch compensate deletion insertion uniq  flex patch delete erroneous code degrade untested functionality openldap patch remove unnecessary faulty code handle multibyte ber tag tag degrade functionality nullhttpd  patch delete faulty code replace insert nonfaulty code elsewhere  patch disables verbose output source location modify functionality program nullhttpd patch degrade functionality lighttpd patch machine specific reduce functionality message detailed patch description evaluate repair quality indicative workload fuzz insert code without negatively affect functionality benchmark program  gcd benchmark infinite loop  calculate date involve leap gcd argument zero repair involves insert additional code gcd repair insert code return skip infinite loop argument zero  code decrement loop leap exactly remain correctly insertion carefully guard apply relevant input zero argument tricky leap explains insert code negatively impact functionality behavior buggy binary terminates input  repair insert exit loop guard complicate user input static buffer without bound pointer lookup function lookup possibly dereferenced repair insert code lookup exist initialization function failure return  static buffer avoid  combine explanation repair nullhttpd  insertion deletion indicative repair involve insert code demonstrates GenProg successfully repair defect exist program reasonable amount report developer average address security critical repair elapse exploit source  availability patch scalability performance GenProg largely cpu bound average repair proportion important component execute fitness function average positive negative fitness evaluation comprise repair negative specify infinite loop error others involve explicit internal delay hoc instruction web server request openldap suite extensive delay contribute runtime compilation variant average repair initial implementation attempt incremental compilation standard deviation arise widely suite execution  openldap percentage repair spent repair task plot average fitness evaluation repair suggests relationship  slope indicates linear relationship suggests relationship linear slope recall behavior loop program fully complexity notably program grows statement swap insert along grows account accordingly relationship approximation scalability  however encourage program GenProg execution data benchmark program described increase statistical significance detail additional benchmark exclude gcd  axis axis fitness evaluation perform primary repair average comprise fitness evaluation define patch correctness suite selection important scalability correctness repair nullhttpd without positive data functionality GenProg generates repair disables functionality entirely instance processing functionality negative positive delete statement expedient variant fix unreasonable safer alarm mode however functionality GenProg repair remove functionality positive actually reduce core functionality improve rate possibly increase runtime suite increase fitness variability GP generation additional confirm suite selection technique improve performance GenProg program regression suite reduce repair percent repair GenProg repair shelf code reasonable amount GenProg performance viable avenue apply technique program comprehensive suite future GenProg repair quality although previous encourage systematically address important issue repair quality GenProg reliance positive important lose functionality exclusively define acceptability admits possibility repair degrade quality maintain concern evaluate automatically beyond scope however inadequate suite repair reduce functionality introduce  evaluate automatically indicative workload fuzz additionally automate program repair relies manual initialization dispatch GenProg principle automate detection technique signal repair automation loop integrate GenProg automate error detection loop error detection repair repair quality overhead program realistic workload therefore evaluates GenProg context proof concept loop webserver program experimental goal outline prototype loop repair enumerate experimental concern performance impact repair quality functionality reduce repair throughput analyze quality generate repair functionality fuzz variant bug induce input associate intrusion detection IDS false positive loop overview propose loop repair requirement beyond input GenProg anomaly detection signal launch repair ability replay input automatically construct negative anomaly detection exist behavior technique concurrently program operating almost monitoring program behavior examine network traffic regular checkpoint etc prototype adopts intrusion detection detects suspicious http request request feature preprocessing phase IDS learns probabilistic finite machine model normal request training legitimate traffic training model label subsequent http request probability correspond suspiciousness component webserver normally expose untrusted input outside IDS anomalous behavior program input IDS detects anomaly program suspend GenProg invoked repair suspicious behavior negative construct IDS flag input variant sandbox input program input detect variant terminates successfully without trigger IDS negative otherwise fails positive consist standard regression purpose described repair indicative workload evaluate repair deployment benchmark patch generate deployed immediately GenProg cannot viable repair within limit subsequent identical request operator alert GenProg refuse request respond mode technique signature generation filter suspicious request application domain chain management request banking commerce buffering request repair procedure later summarizes propose program anomaly detector misclassification rate false positive negative efficacy repair integration GenProg IDS creates concern concern imperfect repair degrades functionality guaranteed positive vulnerability potentially loss legitimate request vulnerability security vulnerability repair patch validity deployment evaluate suitability GenProg therefore important gain confidence GenProg repair underlie error unlikely introduce fault repair generate response IDS false alarm degrade functionality lose legitimate request loop outcome per request function anomaly detector repair concern remainder evaluates concern framework motivate evaluation automate repair quality overhead program throughput correctness suite indicative workload experimental setup focus repair quality benchmark consist security vulnerability server lighttpd nullhttpd php exist mature intrusion detection security vulnerability identify bug repair similarly web server compelling loop repair attack target important service continually driven easy isolate negative php repair php interpreter  shelf apache webserver  indicative workload program throughput pre  obtain workload content layout virginia CS department webserver evaluate repair nullhttpd lighttpd  workload http request span distinct client IP address november evaluate repair php obtain resource reservation virginia CS department feature authentication graphical animate date selection mysql php str replace php repair fairly indicative tier web application obtain request span november recall php repair loses functionality workload evaluate repair request label successful data return client client request output response machine contains GB ram ghz dual core cpu avoid mask repair uniformly workload server machine percent utilization additional speedup packet remove network latency bandwidth consideration server client machine metric evaluate repair overhead quality metric successful request program repair evaluate repair overhead assume scenario machine request repair program incoming request buffer repair metric evaluates program fuzz behavior pre  repair introduce error repair generalizes repair overhead GenProg request indicative workload unmodified program successfully handle generate repair request lose repair server machine summarizes request lose repair request repair successful request program avoid skew relative performance workload normalize attack absolute server relevant server machine twice overall generate repair request twice quickly percent daily request lose offline repair buffering request repair machine technique signature generation reduce overhead loop repair evaluation repair scenario separately normalize  daily throughput percent nullhttpd lighttpd repair php repair degrades functionality false repair intrusion detection false positive nullhttpd indicates standard deviation lose repair indicates daily workload lose server offline generate repair lose repair quality indicates daily workload lose repair deployed generic fuzz failure fuzz input fail repair exploit failure fuzz exploit fail repair repair degrades functionality request lose repair quality quantifies generate repair program throughput difference request benchmark handle repair express percentage daily throughput repair nullhttpd lighttpd noticeably affect performance recall php repair degrades functionality disable portion str replace function php quality loss functionality repair strongly affect performance quality repair potential harm lose percentage php worth examine reservation application str replace involve replacement  substring replace html comment repair leaf  substring behavior unchanged str replace rare str replace label invoked another variable label null replace underscore label repair str replace perform replacement underscore remains finally remain sql sanitization replace however application mysql escape remains attack repair generality fuzzing previous GenProg repair impair legitimate request important component repair quality additional concern remain repair introduce flaw vulnerability behavior input microsoft security critical fuzz input randomly generate structure input similarly spike fuzzer  com generate fuzz request built handle http protocol generic request program program fail additional  lighttpd fail fuzz repair repair merely memorize reject attack input address underlie vulnerability evaluate repair generalize fuzzer generate variant exploit input exploit lighttpd vulnerable variant exploit plus exploit attack repair version defeat GenProg repair introduce error detect fuzz GenProg repair defeat variant attack exploit repair simply fragile memorization input issue repair generality extends beyond security dealt repair security defect fuzz applicable establish repair generic software engineering error introduce failure otherwise overfit accomplish validation intrusion detection false positive finally examine IDS false positive signal GenProg IDS request independent data machine quad core ghz GB ram assigns incoming request anomalous normal however IDS perfectly discriminate benign  request workload false negative false positive threshold therefore perform randomly normal request closest incorrectly label anomalous attempt repair nullhttpd associate request input diff baseline negative request quasi false positive  false repair request lose repair repair  qfp malformed http request quote data GenProg repair error response behavior response header  http OK user visible retains implement message cod strip header inclusion ignore client affect user visible error message neither webserver additional legitimate request significant loss due repair quality qfp request request rarer request return header information modification client cached local suffices repair processing request cache omit response directive instructs browser response display repair allows client cache longer desire worth expires date response header remains unchanged correctly date date header cached conform browser unlikely behave differently indicates negligible loss repair quality qfp relatively standard http request GenProg fails generate repair within cannot generate variant successful index html positive fails almost identical qfp request repair deployed subsequent loss repair quality GenProg repair address error compromise functionality generate repair reasonable unduly influence program performance finally anomaly detection false positive quality repair inadequate suite limitation manageable discussion limitation threat GenProg repair error shelf program efficiently overhead GenProg associate false positive quality repair repair generalize without introduce vulnerability approach viable apply program workload additional concern loop detection repair however limitation nondeterminism GenProg relies encode error repair important functionality impossible encode nondeterministic GenProg cannot currently repair however multithreaded program nullhttpd already repair thread independent limitation mitigate multiple incorporate scheduler constraint GP representation repair code schedule directive multithreaded error deterministic liveness fairness noninterference cannot disprove finite execution patch noninterference information suite repair quality GenProg defines repair acceptability accord patch program input suite consequently scope suite directly impact quality patch minimize reduce unnecessary encode holistic choice repair GenProg developer automatic patch potentially degrade source code readability patch sometimes developer related research automatic documentation mitigate concern repair reduce functionality utility loop architecture suite sufficient guard lose functionality vulnerability however readily available specification code annotation exist generation technique positive negative robust patch validity security critical patch robust fuzzed exploit input degrade functionality additionally repair reduce functionality prohibitive corroborate precedent previous definition repair acceptability ultimately however GenProg replace developer debug pipeline unable incarnation goal program behavior beyond GenProg dominate fitness evaluation impede however GenProg integrate suite selection technique permit speedup percent repair fault localization fault localization critical GenProg without fault localization algorithm rarely succeed gcd fails percent GenProg scalability predicate accurate fault localization positive negative implementation fault localization technique GenProg positive negative portion program security related data attack overlap completely constrain effectively potentially prevent timely repair precise bug localization technique mitigate fault localization remains unsolved related concern GenProg assumption repair adapt elsewhere source code limitation potentially address library repair template augment code randomize overwhelmed statement developed fix localization repair localization technique avenue future intrusion detection loop described intrusion detection apply fault actually fault fault isolation IDS integrate propose architecture GenProg fault isolation exist technique although approach limited fault localize lightweight technique exclude data attack rely IDS pinpoint fault location instead propose loop monitoring identify input faulty behavior significantly easy permit construction negative input oracle limitation associate intrusion detection apply loop evaluation GenProg experimental validity exist threat validity parameter implementation experimental setup heuristically chosen empirical performance optimum parameter threat construct validity actually tune genetic algorithm domain although additionally parameter generalize defect program threat external validity focus particularly security critical vulnerability source software indicative program error mitigate threat attempt variety benchmark error evaluate GenProg recent publication technique additional benchmark benchmark sufficient public information reproduce error access relevant source code revision access operating environment enable reproduction error investigate report application domain bind openssl error unicode parse remains future research related research broadly related automatic bug detection localization debug automatic error preemption repair automatic patch generation intrusion detection genetic program software engineering SBSE research advance debug replay debug cooperative bug isolation trace localization minimization explanation project aim elucidate fault repair approach typically narrow counterexample backtrace error symptom potential however narrow trace program concrete repair GenProg theoretically detect fault static analysis counterexample finally algorithm limited trace source code localize error statement swap code address statement repair research complementary defect static analysis repair explain automatically repair explanation developer however thread debug research information flexibility developer repair  program manually approach automatic error preemption repair source code instrumentation runtime monitoring detect prevent harmful error automatically insert runtime monitoring code detect data structure violates formal consistency specification modify consistent buggy program execute automatically compile program integrate code detect overflow attack trace information exploit generate correspond attack signature software patch  vulnerable memory allocation underflows trigger exception address specific handler research effort focus directly patch generation previous developed automatic static algorithm soundly repair program specification  runtime monitor flag erroneous execution identify invariant violation characterize failure generates candidate patch program accordingly deploys observes candidate program variant patch continued deployment transactional emulation executes potentially vulnerable function emulation environment prevent damage prespecified repair approach accurate approach rescue   propose counter worm intrusion detector identify vulnerable code memory preemptively enumerate repair template automatically generate patch technique drawback priori enumeration vulnerability repair approach formal specification external runtime monitor predefined error repair template despite recent advance specification mining formal specification rarely available none program specify moreover specification limited error fix cannot repair multithreaded code violation liveness infinite loop although  technique theoretically applicable security vulnerability typically evaluation limited buffer underflows exception  address illegal transfer limited availability external monitor vulnerability contrast GenProg generic formal specification advanced knowledge vulnerability successfully repair error date buffer overrun technique source code instrumentation smirnov  increase source code percent apache  runtime monitoring virtual execution  transactional emulation impose substantial runtime overhead percent  percent smirnov percent apache  percent firefox  runtime chosen monitor GenProg impose preemptive performance minimizes patch theory generate patch arbitrary patch localize instrumentation easily inspect approach evaluate generate repair quality repair program loss functionality  author manual inspection repair program suggests functionality dramatically impaired similarly evaluate runtime monitor false positive cannot guarantee correctness GenProg explicitly encodes patch correctness regression fitness evaluation GenProg patch overhead repair quality explicitly evaluate IDS false positive performance standard automatically generate exploit program patch described generate concern attacker although validity threat worth distribute patch negative distribute certify alert individual generate repair literature intrusion detection web server anomaly principle technique   wang  incorporate directly propose loop repair non webserver program anomaly detection layer network stack monitor library approach instruction randomization specification mining report anomaly repair however false positive remain concern although evidence false positive manage incorporate multiple independent signal initiate repair finally false positive reduce intelligently retrain anomaly detector patch apply propose GP automate evolution repair software error demonstrate cod bubble sort algorithm detail approach proposal demonstrate practical repair variety legacy program important difference leverage representation choice permit repair program bug minimize fitness evolutionary instead code bloat along execution localize evolutionary operator rely formal specification fitness evaluation aspect augment approach evolutionary technique generate however relies formal specification limit program apply scalability   evolve java bytecode specially operator modify code however report substantial experimental program bug recently debroy wong independently validate mutation target statement likely fault affect repair without intervention software engineering evolutionary related software develop suite SBSE evolutionary improve software project management effort estimation safety violation refactor  software SBSE innovation GP technique involve fitness function emphasis novel representation operator explore conclusion GenProg technique genetic program evolve version program retains functionality avoid error limit GP restrict attention statement focus genetic operation along advantage coverage information reuse exist program statement structure differencing technique delta debug manage GP generate code minimal repair validate repair input GenProg repair program code encompass error program module code average technique encourage behavior evaluate quality generate repair context proof concept loop repair benchmark lose repair request lose repair quality manageable negligible IDS false positive similarly manageable threat finally evaluate repair program fuzzed input variant defect repair introduce vulnerability program susceptible variant exploit credit technique decision limit traditionally serious difficulty apply GP program evolve automatic repair software efficacy environment exceedingly understand entire software package adequately localize source error context surprising program trial error component bug repair copying code another location paste another approach described GenProg utility debug aid temporarily address bug otherwise patch detrimental temporary explore loop repair prototype technique described leaf substantial future investigation repair bug program automatic repair program readability maintainability quality remain realize automatic program vision date compute automatic repair automation aspect software development