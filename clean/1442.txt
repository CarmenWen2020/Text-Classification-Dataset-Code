graph application software engineering bug security analysis code navigation IDEs however construction graph significant investment program analysis infrastructure increase program compile java virtual machine jvm program analysis framework wala soot program analysis algorithm analyze jvm bytecode approach apply bytecode java code diverse jvm host dynamically typed functional scheme statically typed orient scala polymorphic functional OCaml effectively graph construction exist analysis infrastructure java minor challenge soundness suggests bytecode analysis implementation vehicle bug security analysis ide feature qualitative quantitative analysis soundness precision graph construct jvm bytecodes groovy clojure python ruby however implementation detail greatly jvm host implementation groovy clojure python ruby unsound graph due pervasive reflection invokedynamic instruction code generation interestingly dynamic translation scheme employ unsound static graph tend correlate performance introduction java virtual machine jvm portable efficient implementation java define relatively bytecode instruction semantics task interpreter compiler java simplify significantly recent jvm implement program clojure groovy OCaml python ruby scala scheme compile jvm bytecode  significantly reduce amount implement achieve portability across platform framework  soot wala  developed static analysis jvm bytecode framework algorithm static pointer analysis graph construction data analysis others jvm approach java jvm bytecode fairly java avoids syntactic bytecode analysis framework widely academia development  possibility program analysis infrastructure rely analyze generate jvm bytecode however jvm bytecode analysis java hence investigates jvm bytecode approach apply bytecode examine bytecodes generate scheme scala OCaml groovy clojure python ruby program scheme scala OCaml diverse compiler bytecode amenable analysis however implementation detail greatly complex reflection implementation inhibit analysis specifically focus graph construction graph enable application software engineering bug detect security vulnerability ide feature code navigation application extraction optimization focus issue soundness static graph compute jvm bytecode arise execution precision static graph node cannot arise execution relationship quality construct graph runtime performance application evaluate soundness precision conduct qualitative quantitative qualitative inspect graph construct compile bytecode translation function reflection dynamic code generation invokedynamic instruction challenge static analysis quantitative program computer benchmark CLBG suite version available enables program uniform consistent compile program jvm bytecode standard cfa analysis wala construct static graph dynamic graph construct wala instrumentation dynamic graph builder probe graph comparison unsoundness identify node dynamic graph static similarly potential imprecision reflect node static graph dynamic manually static analysis imprecise discrepancy due code coverage dynamic graph CLBG program fairly conduct consideration additional program program perform quantitative CLBG program moreover detailed qualitative assessment additional issue arose program comprise soundness precision graph construct groovy clojure python ruby bytecode static analysis unsound due pervasive reflection dynamic code generation invokedynamic instruction challenge overcome construct graph remain highly imprecise due function translate graph construct kawa implementation scheme dynamically typed necessitate reflective analyze implementation statically typed scala polymorphic OCaml reflection proxy unsoundness java occurs rarely apply unsoundness avoid reflect bytecode analysis java graph construct kawa program generally precise precision lose lambda expression scala precision suffers information lose compile feature closure issue lambda expression java address standard context sensitivity OCaml compiler implement closure jvm MethodHandles wala analyzes soundly precisely performance compile CLBG program memory consumption standard jvm interestingly java memory consumption scheme scala OCaml construct graph suggests translation scheme hamper static analysis performance bottleneck overall conclude jvm bytecode analysis practical static polymorphic dynamic orient functional style careful implementation avoids reflective feature java substitute compilation suggests bytecode analysis useful implementation vehicle software engineering alternative program analysis infrastructure readily available summary contribution soundness precision graph construct jvm bytecode scheme scala OCaml groovy clojure python ruby program knowledge comparative static analysis jvm host kawa scala OCaml construct graph java compromise reflection proxy rare precision issue java groovy clojure python ruby construct graph highly unsound imprecise due implementation reflection pervasively invokedynamic bytecode implementation similarly performance dynamic translation scheme loss soundness static analysis correlate performance remainder organize detail MethodHandles invokedynamic jvm instruction review experimental setup concerned analysis soundness precision graph compute consideration scheme scala OCaml groovy clojure python ruby respectively report performance implementation correlate soundness precision observation along threat validity related finally conclusion background briefly review MethodHandles invokedynamic instruction feature jvm java facilitate implementation dynamic already implementation static analysis community paid significant attention feature briefly review challenge static analysis MethodHandles handle constant uniquely identifies invoked static virtual furthermore handle apply transformation sequence argument encapsulate unpack array sequence handle embed file constant pool constant load  instruction constant pool entry constant MethodHandle refers directly associate constant  constant  constant  entry alternatively handle factory java lang invoke MethodHandles lookup MethodHandles lookup  argument specify encapsulate parameter return encapsulate handle invoked MethodHandle invoke MethodHandle  argument bound receiver virtual formal parameter functionality handle java reflection api access perform upon creation handle whereas java lang reflect invoke performs access reflective static analysis perspective denote explicitly handle enable precise analysis reflective idiom java invokedynamic instruction invokedynamic instruction mechanism defer association site invoke runtime invokedynamic instruction executes associate bootstrap execute association invokedynamic instruction associate bootstrap bootstrap component jvm file bootstrap return java lang invoke callsite encapsulates MethodHandle identifies invoked retrieve callsite  automatically invoked jvm callsite return bootstrap cached subsequent execution invokedynamic instruction jvm retrieve handle execute callsite  resolution mechanism considerably flexible jvm invoke instruction   specify target dispatch transitively override target parameter compile static analysis analyze inheritance hierarchy conservatively approximate invoked invokedynamic obvious static analysis approximate target bootstrap arbitrarily complex compile constraint parameter subsequently invoked complicate callsite return bootstrap mutable  encapsulate handle update runtime however callsite immutable bootstrap standard java java lang invoke  analysis pre invokedynamic instruction rewrite standard  instruction simulate semantics invokedynamic alternatively analysis cod model bootstrap invokedynamic approach currently analysis framework  wala soot overcome challenge around precise analysis invokedynamic instruction experimental setup analysis detail article wala implementation cfa algorithm construct static graph wala instrumentation dynamic graph builder  construct dynamic graph configuration static dynamic graph analysis across conduct oracle java machine dual core amd opteron ghz CPUs mode capped available ram GB graph probe graph comparison identify node static graph dynamic vice versa unsoundness loss precision static dynamic graph complicate static graph builder wala analyze java runtime library compute precise graph node correspond library code instrumentation dynamic graph builder wala typically inside runtime avoid disrupt runtime mechanism invisible source therefore graph wala construct code java standard library node enable comparison collapse static graph correspond code java standard library node additional effort involve handle static   consistently static dynamic graph model invoked anonymous node selection experimental program scheme scala OCaml groovy clojure python ruby program investigate jvm bytecodes generate compiler amenable static analysis investigation comprises program consideration program illustrate challenge likely arise analyze program program already sufficient conclude precise static analysis infeasible due pervasive reflection dynamically generate code conduct systematic evaluation program computer benchmark suite version available consideration benchmark suite program enables program uniform consistent enables investigate correlation exist performance characteristic generate jvm bytecodes suitability bytecodes static analysis detail CLBG program lastly program consideration exception jruby unable ruby program successfully compile jruby ahead program attempt additional issue arise due feature CLBG program CLBG benchmark suite program computer benchmark suite version available consideration  BT allocate balance binary various node garbage  FK simulates indexed access integer sequence  FA generates writes random dna sequence  KN built hash implementation accumulate nucleotide lookup update hash mandelbrot MB generates mandelbrot portable bitmap file nbody NB model orbit  precision simulation pidigits PD arbitrary precision arithmetic  RD dna mers substitute magic  RC dna sequence writes reverse complement  SN program calculates eigenvalue scheme scheme dialect functional program lisp scheme dynamically typed syntax prefix operator distinguish feature lexical scoping function kawa implement extension scheme jvm  java library kawa version translation jvm bytecode scheme program defines function foo foo invoked argument function inside function foo function invoked argument anonymous function invokes function constant argument printing scheme program relevant fragment jvm bytecodes kawa compiler program diagram subsequent diagram solid arrow graph situation dispatch specific definition dash arrow sequence kawa compiler static foo correspond directly function contains static initializer initializes environment correspond code execution invoke  arrow label invokes via library callback arrow label depiction bytecodes kawa compiler program function mapping exists function scheme source code  jvm bytecode kawa compiler foo reflect static label translation function involve lambda expression gnu expr  static initializer creates later argument foo library gnu mapping  apply function bound argument label library library eventually arrow label translation function involves lengthy sequence library function implies potential significant loss precision unless context sensitivity employ however reflection invokedynamic entire sequence compromise soundness bytecode static analysis qualitative analysis kawa compiler avoids reflection invokedynamic graph construct wala program quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic scheme CLBG program node static dynamic graph scheme program benchmark suite node dynamic graph static graph static graph dynamic graph node dynamic graph static graph graph node static dynamic graph scheme CLBG program glance compute static graph imprecise node static graph dynamic graph however upon closer inspection nearly imprecision static graph correspond code kawa library graph correspond application generally precise loss precision occurs lambda expression program previously summary program consideration kawa generates bytecode easily amenable static analysis stark contrast later highly unsound static graph dynamically typed groovy clojure python ruby additional addition scheme CLBG program chess  scheme application publicly available github sourceforge respectively chess swing program chess  java scheme  text editor chess  kawa implement scheme RRS program exclude library code source code generate bytecodes site generate bytecodes various characteristic chess  scheme program node static graph  dynamic graph investigation graph node gnu mapping future handle thread kawa runtime library wala java thread currently kawa specific thread node static graph  dynamic graph chess static graph respect node dynamic graph however within kawa runtime library render static graph useful various application code navigation development environment node static dynamic graph chess  scheme program precision scheme program CLBG program precision compromise largely lack sufficient context sensitivity handle indirection standard library however issue encounter CLBG kawa implementation reflection handle function apply scheme idiom chess initialize function apply status initialize function define macro kawa handle syntax generates  code however apply function MethodHandle lookup  argument  java lang denote java lang denote java lang invoke  denote argument return specify directly bytecode wala precisely specify directly wala statically site although ignore wala sufficient analysis reflection scheme function exactly therefore wala precisely graph remains despite reflection precision lose heap scheme program necessitate reflection scala scala statically typed orient functional program functional program idiom lazy evaluation closure scala definition grouped trait mixed scala compiler compiles jvm bytecode scala translation jvm bytecode scala program defines trait trait composition defines closure identity scala program  bytecode instruction scala compiler program scala trait translate jvm file    defines static bytecode translation finally trait composition translate anonymous    anon reflect arrow label contains  actual implementation arrow label depiction bytecodes scala compiler program scala closure identity translate anonymous   runtime      apply  arrow label scala feature mutable anonymous scala compiler generates jvm bytecodes reflective challenge static analysis static analysis conservative approximation static graph become extremely imprecise qualitative analysis significant challenge static analysis evident graph construct nevertheless report analyze jvm bytecodes generate scala compiler precise graph construct scala source code loss precision occurs significant information lose translate scala feature closure jvm bytecode scala compiler translates closure  apply scala  arity closure therefore bytecode static graph analysis apply subclass scala  site scala  apply render static graph extremely imprecise algorithm construct graph scala program source code avoids loss precision advantage parameter scala  correspond parameter return closure erase bytecode generate therefore unavailable bytecode analysis quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic scala CLBG program various characteristic scala CLBG program benchmark program node dynamic graph subset correspond static graph execution however  CLBG program quantitative static graph dynamic graph investigation reveal unsoundness arises reflection bytecodes generate scala compiler convert collection array java java util   examine precision static graph average percent static graph dynamic graph involve apply node static dynamic graph scala CLBG program additional addition scala CLBG program   scala application  scala benchmarking project  toolkit probabilistic model user relational factor graph estimate parameter perform inference  library processing compile execute program exclude library code source code generate bytecodes site generate bytecodes various characteristic   scala program   static graph node dynamic graph   mainly involve reflective scala construct scala reflect  scala reflect  respect precision percent  percent  percent static graph dynamic graph involve apply lose information static graph precision analyze application   scala CLBG benchmark program node static dynamic graph   scala program recent development significant code generation series scala release scala code generation target feature introduce version java virtual machine version scala compile closure java invokedynamic instruction eliminates compiler generate  closure program addition version scala compile trait java interface implement default interface introduce java eliminates implement trait  compiler scala release code generation technique OCaml OCaml purpose program functional imperative orient style static infer compiler OCaml java compiles OCaml code jvm bytecode OCaml java alpha OCaml translation jvm bytecode OCaml program declares function foo program illustrates curry partial argument closure foo along argument function foo argument bound bound parameter function argument output OCaml program visualizes bytecodes OCaml compiler program OCaml java runtime compiles extend  machinery invoke  thread harness dash arrow label code translate entry  label depiction bytecodes OCaml compiler program OCaml java translates function function  instance foo label curry translate construct closure org  runtime  combination extra function crucially function explicitly MethodHandles bytecode constant partial translate   MethodHandle closure parameter closure closure invoked label invokes MethodHandle  avoid reflection qualitative analysis OCaml java exploit MethodHandles constant MethodHandles embed bytecode avoid reflection function manifest explicit constant wala model constant invocation hence function graph analysis precise function argument imprecision context insensitive analysis dynamic dispatch parameter orient however context sensitivity inspire technique orient quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic OCaml CLBG benchmark quantitative OCaml CLBG program impact MethodHandles amenable static analysis apparent absence unsoundness static graph unsoundness percent mostly due idiom OCaml runtime involve java lang reflect proxy wala understand reflective idiom static graph sometimes code deem unreachable static analysis proxy runtime generate code stack dynamic graph correspond source code hence static graph however manual investigation within OCaml runtime library therefore static graph useful various application code navigation integrate development environment eclipse node static dynamic graph OCaml CLBG program node static dynamic graph OCaml CLBG program precision across program node static graph dynamic sometimes boxed org  runtime indirection access convert context insensitive analysis imprecise MethodHandle runtime primitive handle context insensitive analysis primitive significant imprecision issue standard library reachable imprecision node function imprecision OCaml analysis address extent exist technique cartesian algorithm additional addition OCaml CLBG program   OCaml application publicly available github  lexer generator OCaml java compiler  documentation generator OCaml java compiler   OCaml program exclude library code source code generate bytecodes site generate bytecodes various characteristic   OCaml program node static graph   respective dynamic graph investigation node involve reflective org  runtime annotation parameter parameter code allocates java lang reflect proxy  currently model soundly wala respect graph static graph   percent respectively dynamic graph manual investigation primarily due node unsound handle reflection wala runtime generate code creates stack observation CLBG OCaml program within OCaml runtime library render generate static graph useful application ide node static dynamic graph   OCaml program majority percent percent static graph   dynamic graph mainly due indirection arise boxed context insensitive handle involve MethodHandle imprecision CLBG OCaml program additional issue compromise precision  groovy dynamically typed orient script seamlessly integrates java groovy compiler option generate code invokedynamic instruction conduct without option understand impact feature groovy version translation jvm bytecode groovy contains static construct array callsite implement standard library array indexed assign site callsite initialize site generate bytecode retrieves correspond callsite array invokes passing parameter invokes multiple within groovy standard library ultimately   dynamic representation hierarchy  target reflection translation closure involves creation additional invoke  sequence reflective invocation  relevant bytecodes groovy compiler program translate code generate invokes callsite  invoke code label callsite  invoke foo invokes callsite invoke closure assign variable groovy program invokedynamic enable bootstrap groovy return  lookup code without invokedynamic site execute desire target  update MethodHandle target subsequent invoke MethodHandle directly however static analysis initial procedure target equally complicate qualitative analysis dash sequence reflective indirection creation dynamic data structure lookup reflection complicate static analysis model groovy code depiction bytecodes groovy compiler program quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic groovy CLBG program without invokedynamic invokedynamic quantitative groovy benchmark static graph wala unable compute site application code compute static graph approximately groovy library boilerplate code generate node static dynamic graph groovy CLBG program without invokedynamic invokedynamic without invokedynamic static graph dynamic static analysis infers groovy library benchmark program furthermore significant unsoundness due reflection invokedynamic enable static graph boilerplate initialization code reachable however analysis become unsound analysis complex reflection code reachable via invokedynamic beyond additional addition groovy CLBG program   groovy application publicly available github  static analysis groovy source file pre define cod standard  data preprocessing program exclude library code source code generate bytecodes site generate bytecodes various characteristic   groovy program   significantly percentage static graph site application code  percent percent  percent percent quantitative analysis groovy CLBG program static analysis simply unable compute site application code moreover compile application invokedynamic improve  percent percent  percent percent node static dynamic graph   groovy program without invokedynamic invokedynamic node static dynamic graph   groovy program without invokedynamic invokedynamic clojure clojure dialect lisp feature function powerful macro concurrency software transactional memory clojure version translation jvm bytecode clojure program foo foo clojure compiler translates clojure function convenience refer function discussion function   generate defines  contains code correspond function clojure source code  return argument bytecodes clojure compiler program illustrate typical function foo translate clojure program depiction bytecodes clojure compiler program core foo  ifn invoke label dynamically dispatch  invoke interface ifn  clojure runtime library  invoke performs bookkeeping  label target function lastly  invoke  label target function actual callee static initializer core contains compile program code dynamically load RT var clojure core load invoke core core argument ultimately  clojure runtime java reflection api core ifn var  execute launch actual program ultimately core  mechanism illustrate qualitative analysis reflection compile code static analysis code entirely specifically core init function   instantiate load reflection static analysis resolve instantiate omit           ultimately core foo  however function deem instantiate   deem instantiate ifn var  resolve trivial actual user define function similarly translation module import clojure compiler involves generation reflective code quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic clojure CLBG program node static dynamic graph construct clojure version program CLBG suite static graph node consist clojure runtime library application logic completely analyze complex reflective code beyond analysis extremely unsound manual inspection graph correspond runtime library reveals significant imprecision due complex chain introduce translation function cannot analyze precisely context insensitive analysis node static dynamic graph clojure CLBG program additional addition clojure CLBG program   clojure application publicly available github  suite encode decode json json binary json format ability custom encoders  parser context grammar program exclude library code source code generate bytecodes site generate bytecodes various characteristic   clojure program quantitative analysis clojure CLBG benchmark static graph   node investigation node node static graph analysis computes clojure CLBG program node involve regardless complexity analyze clojure program jvm bytecodes generate amenable static graph analysis mainly due reflection complex chain function node static dynamic graph   clojure program python python popular dynamically typed orient program addition built data structure python feature lambda expression comprehension generator jython jvm implementation python jython compatible python translation jvm bytecode python program illustrate jython translates python source code jvm file program declares function foo program foo foo program jython compiler generates application logic function python source code mapped sequence generate bytecode sequence generate python program  foo  jython runtime library  invokes another library  dynamically dispatch   invokes another dispatch override definition   invokes function translate application function function contains switch statement application function parameter fid fid originates instance relevant bytecodes jython compiler program previous visualize correspondingly annotate arrow depiction bytecodes jython compiler program depiction bytecodes jython compiler program qualitative analysis suppose construct graph program analyze bytecodes generate jython compiler mention    foo  correspond code function foo python source code program foo code chain exists function consequently site python source file translate chain involves function correspond function python file observation bytecode analysis jvm bytecodes jython compute useful graph precise static analysis employ context sensitivity heap allocate beyond therefore conclude generate precise graph jvm bytecodes jython infeasible soundness compromise import module jython generates code relies reflection implement module import quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic python CLBG program average percent percent static graph dynamic graph significant imprecision mainly arises chain involve function moreover feature module import implement reflection percent percent dynamic graph absent static graph node static dynamic graph python CLBG program additional addition python CLBG program   python application publicly available github  parser generator input grammar variation extend     python package convenient  numerical input built python library program exclude library code source code generate bytecodes site generate bytecodes various characteristic   python program overwhelm majority percent static graph   dynamic graph quantitative analysis python CLBG benchmark static graph   significantly imprecise similarly majority percent dynamic graph   absent static graph mainly due reflection module import additional issue application compromise unsoundness precision node static dynamic graph   python program ruby ruby popular orient program server script jruby jvm implementation ruby jruby version groovy jruby compiler  flag enable generation bytecode invokedynamic instruction translation jvm bytecode ruby program defines function foo code invokes foo function foo ruby program  translates ruby source file defines load file generate additional function ruby source code program   generate compiler ruby source file function ruby source code translate sequence generate bytecode foo sequence generate  invokes org jruby runtime callsite dynamically dispatch org jruby runtime callsite   invokes     retrieves  cache maintain invokes org jruby internal runtime  trigger sequence jruby runtime java standard library ultimately invokes  brace  generate finally  brace  brace  relevant bytecodes jruby compiler program visualize correspondingly label arrow depiction bytecodes jruby compiler program depiction bytecodes jruby compiler program enable invokedynamic approach groovy code actually determines target feature enable static analysis suffer issue previously qualitative analysis code generate  serious challenge static analysis  brace  brace  render compute graph unsound furthermore   invoked source code invoke correspond source code function   jython precise static analysis context sensitivity understand heap allocate cached beyond therefore conclude generate precise graph jvm bytecodes jruby infeasible ruby construct import code another file jruby implement idiom dynamically load script file  rely mechanism described interpret script static analysis incapable precisely accounting code interpret additional unsoundness quantitative analysis program benchmark suite exclude library code source code generate bytecodes site generate bytecodes various characteristic ruby CLBG program without invokedynamic invokedynamic dynamic static graph jruby benchmark across benchmark jruby library contains overwhelmingly benchmark program static graph node dynamic graph primarily generate static analysis node static dynamic graph ruby CLBG program without invokedynamic invokedynamic compute graph exhibit significant imprecision benchmark approximately percent percent static graph absent dynamic graph imprecision occurs overwhelmingly jruby standard library due library complex structure analysis almost standard library reachable although relatively program regardless invokedynamic enable additional addition ruby CLBG program attempt  psd ruby application publicly available github  functionality png image pure ruby psd ruby purpose adobe photoshop file parser program exclude library code source code generate bytecodes site generate bytecodes various characteristic  psd ruby program unfortunately ahead jruby building codebases jruby runtime execute without dynamically interpret ruby script setup almost impossible perform reasonable comparison static dynamic graph performance reflection indirection implementation hamper static analysis plausibly harm performance correlation exist compilation strategy performance investigate performance bytecode generate compiler various CLBG benchmark baseline comparison evaluate java version evaluate performance memory usage rate setup java microbenchmarking harness  JDK analyze CLBG benchmark java target jvm experimental setup  warmup iteration measurement iteration however exclude program KN MB RD RC clojure benchmark program construct eventually exit java runtime library  prematurely shutdown jvm execution reporting measurement similarly exclude program NB PD RD benchmark jruby invokedynamic code program initialize constant generate bytecode flag invokedynamic jruby compiler enable jvm runtime exception prevents  reporting measurement CLBG program edit code avoid runtime error invalidate therefore opt exclude performance evaluation  average  report program memory consumption alloc rate norm output  normalize allocate byte per operation program memory usage rate respectively logarithmic normalize java benchmark program per program logarithmic normalize java CLBG benchmark program program logarithmic normalize java CLBG benchmark program memory usage rate logarithmic normalize java CLBG benchmark program memory usage rate logarithmic normalize java CLBG benchmark program across scala generates jvm bytecodes performance memory usage scala bytecodes faster java counterpart memory discrepancy primarily due benchmark SN KN manual investigation SN approximately java scala contributes discrepancy java version multi thread scala version thread core machine synchronization barrier java version expensive roughly computation benchmark actually KN exhibit behaviour extent synchronization barrier java version approximately scala counterpart surprisingly jvm bytecodes generate dynamically typed kawa performance java respect average memory performance jvm bytecodes generate OCaml statically typed java OCaml generates jvm bytecodes memory another surprising observation dynamically typed clojure generates jvm bytecodes faster OCaml counterpart attribute clojure jvm bytecodes amenable optimization java jit compiler performs runtime clojure jvm bytecodes memory java memory OCaml jvm bytecodes jvm bytecodes generate dynamically typed performance respect memory usage jruby jvm bytecodes memory java compile ruby script invokedynamic flag improves performance jruby jvm bytecodes memory java invokedynamic memory usage groovy jvm bytecodes without significant respect correlation runtime performance extent generate jvm bytecode amenable static analysis suggests effort  aim improve performance generate code benefit application bytecode program analysis  threat validity discussion soundness analysis mostly kawa scala OCaml java graph due relatively straightforward translation judicious feature recent java version MethodHandles MethodHandles encode reflective access directly readable bytecode allows analysis soundly precisely model denote enables construction graph feature reflection frequently retrieve heap approximation problematic unsound graph version employ invokedynamic implementation employ technique yield similarly unsound feature critical reader argue program feature representative program consideration serious concern primary conclusion soundness imprecision occurs consideration evident manual analysis program quantitative CLBG program address concern CLBG program fairly conduct consideration ruby additional program program perform quantitative CLBG program moreover detailed qualitative assessment additional issue arose program comprise soundness precision assessment conclude program exhibit issue program fundamentally alter conclusion code coverage compute precise static graph undecidable dynamic graph estimate precision static graph however dynamic graph approximation precise static graph reader code coverage reasonable address concern coverage average across consideration program input CLBG benchmark suite coverage percent generality choice wala cfa analysis overly bias analysis challenge fundamental qualitative conduct dynamic translation scheme code generation reflection potentially cripple bytecode static graph analysis wala applicability chose graph construction graph application software engineering bug detect security vulnerability ide feature code navigation application extraction optimization furthermore graph deeply pointer analysis another fundamental analysis technology hence bytecode program analysis application ephemeral multiple version implementation impact invokedynamic instruction impact analysis invokedynamic memory performance implementation groovy therefore future version related discus category related empirical unsoundness arises graph construction algorithm java due feature mechanism reflection unsafe native apis serialization lambda reference default craft program feature loss soundness analyze program exist implementation graph construction algorithm soot wala concludes wala soot trivial reflection literal java feature lambda wala soot lose soundness serialization unsafe native apis investigates soundness graph construction algorithm compromise dynamic feature reflection dynamic load proxy serialization invokedynamic instruction unsafe native api define micro benchmark consist program dynamic feature program specifies execution behavior java annotation mechanism specifically annotation specify execute execute sometimes execute execution platform dependent conduct apply graph construction algorithm soot wala  framework benchmark report none framework handle dynamic feature soundly framework unique strength wala  invokedynamic proxy soot relies  analyze reflective code contrast challenge dynamic feature context synthetic benchmark focus identify analyze challenge static analysis arise jvm bytecodes compiler program program exist benchmark suite source repository non java jvm host focus dynamic behavior bytecode jvm executes jvm bytecode generate scala clojure jython jruby CLBG program diversity bytecode instruction sequence execute depth stack hotness distribution lifetime amount boxing primitive clojure jython jruby version CLBG program polymorphic immutability lifetime amount memory zero evaluation identity hash code introduce benchmark suite scala  suite java dynamic behavior program  java program dynamic feature normally compile jvm bytecode dynamic feature javascript eval construct various feature php program eval contrast examines jvm bytecode static analysis perspective multilingual virtual machine translation various program bytecode platform considerable attention compilation scala jvm bytecode addition already pizza machine code microsoft runtime clr outset multiple source visual target others clr intermediate cil cil bytecode trace compiler specifically dynamic script javascript recent adapt virtual machine deeply modify exist jit compiler exploit dynamic characteristic python improve performance  built virtual machine allows custom source variety laid foundation later development  universal virtual machine javascript python ruby addition jvm host custom  typically implement truffle implementation framework interpret profile optionally transform source program later partially evaluates interpreter generate machine code  thread code generation jvm host interpreter reduce indirect improve prediction approach improve runtime performance execute dynamic influence amenable static analysis custom data structure  evaluate regression selection analysis aspectj analysis extremely imprecise graph construct bytecode generate aspectj code improve precision introduce interaction graph structure graph explicitly model aspectj feature evaluate analysis construct graph aspectj source code conclusion future program analysis infrastructure attractive prospect investigate jvm bytecode analysis java compile bytecode indeed statically typed dynamically typed functional scheme orient scala polymorphic OCaml graph java challenge obtain precision suggests bytecode analysis useful implementation vehicle application bug security analysis code navigation IDEs program analysis infrastructure readily available otherwise however demonstrate implementation bytecode generation crucial complex reflection implementation prevent analysis groovy clojure python ruby performance implementation tend performance overall encourage quality jvm implementation benefit jvm mature implementation associate mature program analysis infrastructure focus graph construction conclusion broadly applicable bytecode interprocedural static analysis graph prerequisite static analysis program implement compiler designer balance objective ability analyze compile code exist jvm analysis objective easily various compilation strategy analyze exist jvm analysis data implementers balance goal  objective implementation program data initiate discussion future research relative benefit drawback various compilation strategy context specific program