software startup newly operating orient towards however despite increase importance startup economy scientific attempt address software engineering issue stage startup anything startup engineering resource scarce fail project business aim improve understand software development strategy employ startup perform investigation theory approach package greenfield startup model GSM explains priority startup release quickly strategy allows startup verify adjust trajectory accord user feedback shorten development precision engineering activity counterbalance restructure target growth implication GSM outline challenge gap opportunity future research develop validate engineering startup context introduction software startup launch worldwide increase accessible technology venture software startup refer organization focus creation tech innovative operating aim aggressively business highly scalable startup usually temporary mature domain knowledge analysis thereby decrease extreme uncertainty research aim understand practitioner engineer software development strategy startup focus structure planning software project conception beta release perform semi structure depth interview   startup spectrum theme iteratively adjust developed model accord emerge evidence greenfield startup model GSM capture underlie phenomenon software development stage startup venture facebook linkedin spotify pinterest instagram  dropbox startup evolve successful business despite vast majority startup fail within creation primarily due destruction competition operating chaotic rapidly evolve uncertain environment software startup intense pressure expose  competition succeed environment startup adapt demand constrain limited resource engineering perspective software development startup challenge context software prescriptive methodology startup characteristic context web combination factor specific software development context unique therefore research investigate startup engineering activity practitioner decision avoid choice easily business failure however despite impressive startup ecosystem research software engineering SE startup gap greenfield startup model aim contribute knowledge startup software engineering model abstraction reality systematic procedure empirical data obtain GSM significant theme development strategy characterize startup context guideline however category GSM relation direction vocabulary model future research software development startup researcher GSM understand technical debt influence future growth startup furthermore model understand context startup central develop model technique development effort gap startup beneficial startup practitioner apply strategy development although likely performance later stage regard identify commonality issue related software development startup research focus technical debt contribution empirical investigation characteristic stage startup rigorously developed model illustrates explains startup perform engineering activity manner discussion opportunity future research potential challenge startup remainder structure background related introduces research execution illustrate GSM discus relevant implication GSM literature discus validity threat concludes background business incubator decade estimate importance startup disruption technology non startup competitive undertake radical organizational  renewal attempt behave startup however implementation methodology structure development activity startup challenge model introduce software development activity startup however without deliver significant benefit software engineering complex multifaceted obstacle understand manage development startup context bach refers startup bunch energetic commit without define development sutton defines startup creative flexible reluctant introduce bureaucratic ineffective limitation resource focus development instead establish rigid attempt tailor lightweight startup report failure everyone software engineering developer reject notion repeatable startup prominently advantage reactive precision engineering startup typically develop software service license customer customize client driven software development sometimes package software development COTS software development address issue related aspect researcher emphasize importance strategic objective operating sector furthermore requirement software rarely document validate release hence fail launch largely due meeting customer address issue startup embrace orient flexible apply workflow ability quickly direction target therefore startup focus productivity grant freedom employee instead rigid guideline goal startup namely accelerate meeting customer improve solid engineering customize startup specific focus detailed investigation prerequisite future research enable engineering startup lack research startup sutton lack software startup mostly neglect evidence observation coleman  systematic mapping SMS perform identify software engineering focus startup moreover identify highly fragment across constitute consistent knowledge discus finding SMS software development startup  introduce startup SE literature completion package firm particularly innovative successful advocate research investigate software development enable replication transfer technology sector software startup orient development phase despite achievement software development organizational management increase complexity deterioration performance briefly necessity establish initial repeatable scalable cannot postpone forever without establish workflow startup stabilize eventually improve sufficiently mature startup training activity sutton focus shift prescriptive capability hire empower focus methodological attribute orient towards prototyping proof concept mock ups demo functionality priority startup startup growth coordinate quality planning become  extent maturity affect adoption report introduce extreme program XP principle development challenge arise member fully implement methodology similarly silva  XP coach nevertheless customization implement adapt startup context contribution flexibility  development exist lean agile methodology report startup uncertain trial error customer relationship avoid waste building unneeded functionality prevent exhaustion resource customer involvement software development  important factor encourage alignment business concern technology strategy however remains extent improve requirement engineering contribute shorten improve target accuracy initiative optimize specific purpose   introduce adapt reduce development performance none focus startup per knowledge useful startup function perform research startup conclusion decision related development situation startup generally optimize workflow dynamic context involve startup typically adopt development style  remark coleman  manager apply merely however preclude possibility package transfer lightweight manner allows flexible adoption engineering contrary startup cannot benefit experienced member increase potential validate software improvement spi startup related spi representation startup described  discus actuate criterion establish software startup sutton remark rigid spi model software startup arise due dynamic development precludes repeatability organizational maturity cannot maintain startup lack corporate direction severe lack resource technological definition implementation management training conclusion primary benefit spi startup instead promote quality aim minimize additionally role rigid spi neglect obstacle creativity flexibility delivery environment quality aside minimal suitable functionality shorten    report quality aspect mostly consideration internet startup orient towards usability scalability however application heavily influence quality demand maintain development activity orient towards limited suitable functionality externalize complexity project outsource activity software reuse source strategy technical debt SE research tackle technical debt brings encompasses various implication development software startup   technical debt originally introduce cunningham recently attract attention SE researcher illustration technical debt concept developer sometimes accept compromise aspect modularity urgent demand aspect deadline compromise incur debt paid principal repaid health project identify dimension technical debt code architecture environment knowledge distribution documentation daily basis startup quality engineering architecture multifaceted aspect weak project management context stage startup illustrate empirical evidence accumulate technical debt discus implication terminology prevent ambiguity terminology throughout software development strategy overall approach adopt development engineering activity activity traditional engineering activity others requirement engineering architecture implementation engineering artifact contribute engineering activity quality attribute overall factor affect behavior user concern potential application impact across various layer tier attribute related overall others specific user centric issue growth increase respect initial employee user customer complexity handle increase feature request software software software service software improvement framework activity software development research methodology goal understand software development strategy engineer practitioner startup interested structure planning software project conception beta release software boundary research reuse previously conduct systematic mapping steer formulation research RQ startup structure execute engineering activity RQ quality attribute startup investigate software development approach undertaken practitioner startup theory GT methodology execute semi structure interview integrate questionnaire tailor questionnaire startup partially advantage  grid principle elaborate extract greenfield startup model explain underlie phenomenon software development startup GT principle capture relevant aspect software development startup practitioner theory emerge interview adjust research hypothesis proceed interview data related engineering activity undertaken startup proceed analysis data important relation concept formal approach generate validate theory coleman version GT researcher implementation theory information obtain SMS startup initial knowledge  strauss approach GT version empowers researcher theoretical sensitivity encourages outline research beforehand overview methodology execution illustrate tailor GT methodology specific data collection analysis package interview questionnaire code available supplemental research methodology theory overview previous SMS input contribute execution depict evolutionary affect iteration data collection integrate empirical database subsequently data analysis theoretical category iteration emergent theory update formal procedure paradigm model generation verify achieve theoretical saturation category proceed theory validation author jointly execute procedure handle conflict review rationale decision fourth author perform depth review data execution detail described structure accord macro phase depict execution address technical aspect related software development startup explore operational dynamic lack agreement unique definition startup sample accord recurrent theme characterize definition startup newly operating lack resource economical physical limited resource uncertainty knowledge ecosystem perspective feature competition finance aim scalable business increase user customer sample distinct phase execute initial convenience sample identification additional startup theory formation theoretical sample iteratively improve sample accord emerge theory characteristic sample report characteristic within average member majority developer moreover employee expand initial release within conception consist pure web web mobile web desktop application launch united italy germany sweden united kingdom zealand publicly available data generally healthy status business detailed documentation startup sample distribution supplemental execute online video conferencing session average interview   interviewee consist actual interview preparation customize questionnaire iterative adjustment interview package artifact data collection data collection triangulation integrates multiple data source interview questionnaire converge phenomenon interview supplemental aspect development requirement elicitation quality requirement analysis implementation deployment transcribe interview questionnaire interviewee questionnaire capture additional data information confirm interview triangulation data questionnaire input theory generation supplemental available online prototype questionnaire adapt interviewee data earlier interview database easily retrieve information assemble evidence data source described yin construct database qualitative data analysis software package  overlap interview questionnaire reveal flag potential inconsistency data data analysis author cod procedure perform analysis environment computer screen analysis data procedure interview across multitude topic therefore structure transcript thematic accord topic interview proceed horizontally analyze thematic within transcript entire transcript data cod interview accord assign label raw data conceptualization vivo cod grouped concept theoretical category subcategories axial cod described relation subcategories relation subcategories category refine category abstraction adjust concept aid knowledge management validate consistency category selective cod explore analyze link subcategories identify core category explanatory analyze causal relation category data extraction vivo cod combine descriptive procedure cod theory developed related information software improvement perform conceptualization creation category refining axial selective cod iterate interview analyze data update code category memo adjust emerge theory cod formalize representation GT theoretical model model category subcategories link accord relationship formation theoretical model approach empirical data cod model developed detailed network subcategories identify mainly axial cod representation category network identify mainly selective cod paradigm model generation mention emergent theory integrate additional sample principle theoretical sample paradigm model introduce  iteration interview execution systematically analyze emerge theory paradigm model compose causal occurrence phenomenon core category context phenomenon extrapolate intervene broader phenomenon generalize action interaction strategy action response phenomenon consequence specification outcome intend unintended action interaction strategy within limit critical bound assumption role generate theory explain predict understand underlie phenomenon theory validation theory challenge researcher attention structure detail data portrayed display evidence emergent category ass GT sufficiently systematic technique validate theory strauss  assist finding concept generate concept systematically related conceptual linkage category developed variation built theory variation built explain variation built explain account theory theoretical finding significant extent remainder illustrate generate concept accord described cod systematically related network diagram iteration theory examine concept within dimension incorporate data broader practitioner construct linkage category atlas TI accord data analysis moreover extensive explanation vivo statement report practitioner developed concept research multiple explain purpose implementation supplemental enables researcher replicate within context moreover perform comparison validate theory strengthen applicability within wider frame comparison highlight neglect exist direction future furthermore confound factor interfere application GSM greenfield startup model GSM capture underlie phenomenon software development stage startup model sub category cluster finally category abstraction GSM explanation development strategy engineering activity undertaken startup focus data startup GSM report GSM abstraction empirical data thirteen startup implication GSM validity respectively category causal relationship greenfield startup model model overview grouped concept underlie phenomenon category network causal relationship arrow category forthcoming explanation GSM identifier  category network around core category development interconnect node theory reflect category explanatory contextual characterizes extent startup severe lack resource limited access intellectual resource constrain capability stage startup development activity severe lack resource focus implement essential functionality quality priority respect urgent constraint startup capable motivate individual unanimously express respondent priority development adopt flexible effective evolutionary approach attention architectural aspect related quality facilitates efficiency teamwork allows startup function faulty quickly introduce prototype implementation initial employee ingredient enable performance software development pace production environment engineer highly commit multi role organize catalyst development essential flexible relies tacit knowledge instead formal documentation startup achieve cycle however code without structure contributes accumulate technical debt increase almost non exist specification minimal project management lack automate consequence debt perceive initial stage startup quickly important priority startup survive subsequent phase likely increase user developer eventually accumulate technical debt confront initial growth hinders productivity explain category conclude theory explanation identifier highlight statement interviewee severe lack resource concept severe lack resource characterizes uncertainty development strategy startup compose subcategories shortage limited resource limited access expertise startup quickly resource deprive startup constant pressure mainly generate external source investor pressure business pressure sometimes internal necessity internal deadline demo presentation regard comment investor feature engineer finally important somehow sacrifice addition compensate limited resource practitioner empower multi role stack engineer confirm everyone involve task mobile web development organize implement extent startup access specialized knowledge internal external reduce establish software therefore partially mitigate limited access expertise startup rely external aid mentor advisor strict limitation decision related software development fundamentally situation development catalyst aspect foster development startup focus characteristic initial startup developer responsibility limited resource member active aspect development definition functionality deployment engineer startup sometimes multi role typically stack engineer multi role engineer handle development responsible marketing sale developer responsibility quickly variety task hierarchy stack engineer tackle various technology stack generalist developer instead specialist remark instead hire guru technology startup hire developer generalist quickly technology quickly variety task moreover development enables member coordination rely tacit knowledge replace documentation informal discussion practitioner report development startup flexible remark absolutely impossible knowledge standard domain efficiency activity limit formality member software skilled developer essential development startup hack culture tendency approach quickly formulation feature implementation regard comment hacker culture environment hack stuff without formally analyze around limited access expertise rely mainly personal ability interviewee report mentor opinion viable aim feasible objective furthermore constant pressure mainly constrain tight shortage finally startup founder centric structure stage CTO ceo background impact development approach instance academic background CTO encourage introduction architectural development phase CTO ceo development decision collectively member CTO ceo  situation conflict evolutionary approach startup prefer initial prototype iteratively refine similarly concept evolutionary prototyping goal validate indeed startup focus develop validate instead develop prototype release user detect opportunity functionality improvement feedback developer flexibility  priority suitable software development approach highly evolutionary uncertain planning viable startup cannot assumption without rapidly validate release uncertainty composition typically project knowledge generally undocumented minor composition developer ill significant impact overall development furthermore startup continuously evolve environment competitor target sector competitive advantage startup typically characterize evolution cannot foreseen however user feedback request role daily decision driver define feature obtain user response quickly validate startup function prototype iterate quote something really rough polish fix iterate constant pressure aim understand iterate quickly adjust release focus building functionality version progressively iteration confirm deploy objective evolutionary approach avoid waste engineering building complex functionality user release functionality startup verifies suitability feature understands adjust direction development towards actual user version typically prototype functionality developed effort validates critical feature enable startup survival contact observation user automate feedback collection analysis metric startup attempt valuable customer quality priority software startup related concentrate building limited suitable functionality fulfil non functional requirement strategy allows quickly release preliminary architectural quality aspect startup development gear towards user UX attractiveness UI smooth user without interruption UX important quality factor user action application without return usable extent quality aspect account sector application nevertheless realize UX important attribute customer discovery evolutionary approach limited resource shortage confirms none quality aspect development achieve UX lack resource shortage startup analyze developed afford rigorous usability user feedback metric central role achieve UX metric typically web statistical hypothesis UX factor influence quality concern development efficiency emerges engineer avoid waste excessive improvement validate functionality reasonably accommodate potential growth user startup externalize complexity service achieve sufficient scalability realize reliability urgent priority user fault tolerant towards innovative beta user typically positive attitude towards exhibit unreliable behavior regard focus beta reduce friction user incorporate usability beta release typically software available outside develop organization development development core category GSM firmly primary objective startup important characteristic develop software stage development startup adopt evolutionary approach solid focus implement minimal suitable functionality startup informal workflow flexible reactive adapt environment typically organize developer significant responsibility facilitates adoption informal workflow aim shorten restricts potential planning activity report essence detail unpredictability startup prefer decision mainly informal frequent verbal discussion agile principle embrace startup perceive development waste ignore accommodate release quickly approach lack systematic quality assurance activity startup focus user quality aspect efficiency postpone release another beneficial strategy startup employ quickly deliver externalization complexity startup component COTS source component development library advantage external service sake deliver reasonably future growth moreover advanced version manage code task assignment responsibility trace configuration issue management automatic deployment informal code  issue integrate allows startup automate activity reduce completion drawback approach increase interoperability issue startup improve development standard technology widely recognize community moreover standard framework reduces formal architectural document ruby standard framework documentation important factor positively impact development desire disruptive technology demonstrate personal ability report practitioner factor essential enhance morale developer therefore achieve performance developer deadline typical sprint environment agile morale hinder development finally constant pressure regularly operates overtime deadline report practitioner effective strategy poorly maintainable code developer burnout accumulate technical debt startup achieve development radically ignore aspect related documentation structure accept extent technical debt flaw code faster sweet without code cant update anymore instead traditional requirement engineering activity startup informal specification functionality ticket manage precision feature implement explanatory user practitioner intensively physical whiteboards functionality visible prioritize personal comment mistake spec realize valuable startup risky business attention traditional phase analysis replace rough feasibility however approach disadvantage later realize drawback nice detailed maybe agility flexibility tradeoff generally analyze risk technology feasibility project startup attempt implementation rough informal specification assume project complexity remain limited functionality additionally competitor mistake practitioner context ass feasibility project finally avoid restriction flexibility potentially limit decision strictly limit decision increase technical debt comment shortcoming initial decision data structure fundamental code business logic rely percent percent data structure refactoring code another important factor contributes accumulation technical debt lack architectural substitute mock ups precision diagram critical interaction component standard framework convention remove formal uml diagram documentation minimum maintenance perfect hindsight framework maintainability code framework develop application faster additional framework  increase understandability code structure decrease developer attitude towards verification validation brings startup lack automate replace manual smoke quote internally allows rid percent bug important functionality meanwhile user report bug secondary functionality eventually mitigate lack indeed production enables identify percent bug however component loss data severe damage user engineer realize reasonable automatic aid automatic quickly ass status integration functionality startup perceive rigid project management waste hinders development uncertainty formal schedule pointless report initial chaos develop faster startup minimal project management internal milestone informal precision task assignment mechanism project metric quote progress ticket context release milestone viable practitioner remain focus goal feature production finally category contributes accumulate technical debt substantial informal verbal communication channel daily basis location pace development approach increase volume tacit knowledge severe lack documentation regard issue documentation diagram source code update something instead code understandable situation strategy due lack documentation documentation initial growth hinders performance lack attention phase engineering activity allows startup code quickly however startup survives initial becomes complex user increase circumstance initial chaos development return accumulate technical debt instead focus user request hence initial growth hinders performance functionality deliver user user increase customer become quality demand scalability issue arise user business funding acquisition release compete project public release therefore project lack minimal manage increase complexity functionality maintain codebase subsequently practitioner project management activity hire staff member project management strictly radically grows informal communication lack documentation afterwards project management becomes important focus shift business concern effort almost entirely dedicate development business activity moreover availability project information becomes important issue accumulate tacit knowledge hinders ability hire project task another factor slows performance portion code rewrite substantial refactoring codebase increase demand practitioner realize decision rough feasibility implementation negative consequence performance maintainability combination factor engineer engineering startup aim increase scalability infrastructure standardize codebase framework report mitigate lack framework schema developer hire refactoring codebase custom php  normalize model business strategy code php server communicate via json engineering horror fix really painful trash code however regret choice sooner arises complexity increase codebase bug fix become highly interrelate functionality manage poorly engineer therefore arises validate user response increase feature request necessity release therefore startup partially replace informal communication traceable introduce metric project progress establish initial structure workflow reasonable performance grows lose paradigm model explain understand development strategy stage software startup construct theory generate GSM theory focus limited suitable functionality adopt partial rapid evolutionary development approach stage software startup development aid skilled highly developer development strategy stage software startup aim within uncertain severe lack resource however development accumulate technical debt initial temporary performance growth theory specify  strauss causal conceptual category quality priority evolutionary approach catalyst development phenomenon core category development context limited stage web software startup operating severe lack resource aim intervene summarize extremely uncertain development environment action interaction strategy accumulation technical debt consequence temporary performance implication GSM relevant implication emerge behavior stage startup formally express GSM although startup across various sector emerge discus respect literature identify venue future research methodology urgent priority software development startup shorten however focus building release version startup tend apply specific standard development methodology interviewee reference lean startup methodology highly evolutionary development approach around production function prototype customer feedback however none startup strictly cycle propose lean startup methodology purpose lean waste reduction although identification waste easy span perspective mapping resource intensive something startup nevertheless absence enable startup focus startup advantage engineering activity stage instance  report startup benefit tailor XP startup stage apply cycle fix quickly  response however lack perceivable relationship constrains effective analysis hence apply highly uncertain environment counter productive analyze emerge waste quickly develop suitable functionality allows member prototype potential customer investor feedback respond accordingly however startup explicitly customer development define blank instead absorb implement principle customer development methodology reflect GSM theoretical category quickly research perspective collaboration startup technology transfer challenge technology transfer model commitment participant investment acceptable stage startup develop validate technology transfer model adapt startup context empower member lean startup methodology propose  emphasizes empowerment critical factor pursue development minimum viable MVP empowerment allows rapidly  approval committee veto culture however empowerment cannot implement without structure performance startup lightweight collection evaluation performance indicator task management continuous deployment enable information autonomy creation aspect empowerment   unlike  methodology structurally differentiates dimension positively impact performance empowerment program autonomy decision member activity interested responsibility organizational performance information member influence decision creativity enable culture negative punish attempt reward coordination utilize handshaking investigate manager startup CTO ceo cannot involve decision GSM identifies explains startup focus characteristic initial research adapt validate empowerment program startup context foster development focus minimal functionality deliver feature built startup prioritize filter engineering startup explicitly apply traditional requirement engineering activity manage requirement however integrate technique persona scenario improve effectiveness requirement elicitation mostly unknown user thereby shorten another suggests lightweight project initiation framework agile inception deck prevent premature failure software project due understand project requirement guideline adapt organization organization relevant  startup benefit limited inventory engineering technical debt faster startup technical debt investment repayment due refer debt  debt feature fails potentially useful technical debt negative impact morale productivity quality identify debt listing debt related task backlog release iteration planning technical debt conduct usability scalability attention customer behavior predictive monitoring alternative technical debt effort interviewee cod platform github framework cod platform developer integrate engineering activity requirement issue source documentation continuous integration release configuration management framework program compiler code library enable initial development project limited overhead however strategy target dimension technical debt environmental knowledge debt furthermore effective selection component framework startup perform efficient impact analysis configuration technology selection framework stimulate innovation decision selection however approach adapt constraint context stage startup synthesis slightly adherence implication reflect behavior analysis stage startup adopt standard development methodology typical tendency focus capability implement quickly iterate prototype release context lightweight agile methodology penetrate research focus development accumulate technical debt important determinant stage startup investigation stage startup opportunity research importantly performance necessity return accumulate technical debt expand operation structure mitigation strategy address achieve meeting software development objective integrate scalable iteration minimal functionality allows startup maintain effective planning realistic expectation empower member enable horizontally activity development environment simultaneously improve desirable workflow initiation minimal project management emerge activity trace project progress task assignment mechanism chaos manage planning performance adoption agile lean development eventually enable introduction adoption development methodology research adapt technology transfer model academia startup context theory validation discus validity GSM methodological observation refer GSM category throughout validation correspond introduce development evolutionary approach quality priority catalyst development accumulate technical debt initial growth hinders performance severe lack resource comparison model validate generalization model conceptualization derive GSM previous model developed coleman  brook overview comparison mapping GSM category aspect report literature GSM category mapped concept report related model refer coleman conduct context startup focus coleman investigate factor software development hinder initiative software improvement later stage expansion phase employee coleman aim highlight manager distinct essential non essential essential closely link development requirement gathering non essential omit planning estimate stag meeting discus routinely remove methodology approach adapt adapt coleman network characterize core category factor management contribute lack software improvement lack formal prescriptive development mainly conduct verbal communication without documentation  coleman report practitioner perception documentation alone ensure understand project requirement moreover manager perceive rigid negative impact creativity flexibility development accordance generate theory adopt evolutionary precision engineering flexibility reactivity attribute development startup report GSM definition minimum knowledge training necessity faster difficulty penetrate software organization startup establish rigid spi erosion barely satisfy organizational business software startup agile principle creativity flexibility instead spi coleman describes management approach orient towards embrace empower consist trust development staff task supervision nevertheless software development manager founder impact management style indirectly software development stage startup founder mainly software development manager   technical practitioner coleman identify influence founder manager background software development GSM similarly identifies   background strategy adopt develop initial  refers rigid spi approach typically effective development effort stable discipline internet software development orient towards daily aim develop differs traditional software development  theory approach causal factor influence development desperate rush unique software environment lack develop software environment imposes research focus context  reveal causal factor GSM argues dawn internet era intensified software development emphasize shorter cycle strategy efficiently validate target wider focus brook discus challenge involve construct software brook difficulty development essence inherent software accident difficulty attend software production inherent essence concern building software activity specification accident refer labor software representation brook effort apply engineer dedicate towards accident exploit strategy enhance software performance reliability simplicity development introduction program despite achievement improve development performance essence software remain unaltered mitigation strategy brook essence versus requirement refinement rapid prototyping incremental development accurately GSM forecasting startup theoretical category exist literature extend theory validation mapping category GSM empirical investigate startup contribution GSM category sort accord GSM category GSM category overlap SMS address GSM category discussion address GSM category majority retrieve mention issue related development core category GSM another category address catalyst development importance widely software engineering cooper  coleman     advocate empower mention related quality priority accumulate technical debt initial hinders performance indicates potential lack research suggests direction future confound factor purpose identify confound factor threaten validity GSM mapping validate literature coverage GSM category interested variable GSM interfere theoretical model positively negatively report factor identify SMS GSM creativity innovation requirement application developer summarize confound factor GSM confound factor GSM understand impact confound factor interpretation model important analysis GSM researcher GSM implication contextualize analysis startup demographic background characteristic requirement undermine generalizability GSM scenario avoid minimum expectation quality assurance quality critical security banking service profoundly affect customer satisfaction threat validity discus validity overall research methodology structure discussion accord wohlin taxonomy external validity threat external validity selection interviewed threat affect GT qualitative research semi structure interview respondent opinion mitigate threat interviewee   perspective startup organization data consideration majority startup successful web introduce potential bias development GSM lack perspective fail startup potentially evidence relationship GSM partially mitigate threat GSM model comparison establish context finding generalize previous model developed coleman identify similarity difference enable broader related factor hinder mature startup addition analyze literature SMS startup however focus embed fail startup internal validity enhance internal validity dimensional research framework theory approach systematic mapping interview questionnaire convergence source information confirm contradict generate theory strategy collection artifact project meeting bug repository verify statement interview however none access information furthermore subset interviewee return questionnaire validate GSM conduct comparison emergent theory exist literature previously developed model theory validation highlight examine similarity contrast explanation regard  emergent theory exist literature enhances internal validity generalizability theoretical theory building research finding limited identify important confound factor related innovation requirement developer factor cater GSM regard relevant startup context mitigate reporting bias packaging conduct interview package instruction available supplemental moreover researcher involve execution conduct peer review analysis theory construct distortion analysis extensive memo comparative analysis data emerge theory counter subjectivity construct validity threat inadequate description construct diminish risk entire construct adapt terminology utilized practitioner define adequate theoretical conceptualization instance define shortage investor pressure ceo business pressure demo presentation internal deadline interviewee moreover cod interview transcript adopt explanatory descriptive label theoretical category capture underlie phenomenon without lose relevant detail important threat interviewee already aware emergent theory analyze researcher reduce risk disclose goal emergent interviewee conclusion validity theory apply researcher context attest relationship conceptualization examine phenomenon relationship verify emerge finding remain consistent data prepared modify generate category data adapt emerge theory accord concept theoretical sample saturation accord theoretical sample concept adjust emergent theory marginal generate moreover enhance reliability outcome conceptualization relation conduct cod interview systematic important issue related limited interview scenario context issue partially mitigate theoretical saturation concept  quantitative qualitative data saturation involves obtain data information emerges critical obtain applicability qualitative research attest relevant information execute additional interview iterate theory cycle verify explanatory core category fulfil conclusion startup software impact significantly contribute global economy software development stage core daily activity despite failure rate earlier systematic mapping proliferation startup scientific knowledge intervene software development strategy startup scientific engineering approach understand startup behavior hence initial explanation underlie phenomenon theory focus engineering activity conception beta release greenfield startup model hindsight knowledge practitioner aim explain development strategy engineer utilized startup explanatory capability correctness model validate systematic comparison SMS reveal multi faceted lack software development activity startup empirical evidence obtain theory approach overall characteristic startup uncertainty lack resource pressure factor influence software development extent transforms decision related development strategy moreover although startup characteristic SE context driven development web engineering unique combination factor challenge address research startup urgent priority release quickly verify adjust business trajectory accord feedback metric stage startup discard formal project management documentation analysis planning traditional activity practitioner advantage evolutionary prototyping approach integrate externalize complexity however restructure engineering activity grows counterbalance initial gain flexibility successful startup growth customer employee functionality necessity initial chaotic software development environment significant challenge stage startup sweet amount accumulate technical debt GSM software development objective stage startup researcher seek improve integration scalable iteration minimal functionality empowerment member grant responsibility autonomy involve activity development phase improvement workflow initiation minimal project management adaptation lean agile development initial chaotic startup phase novel challenge practitioner researcher concept activity rapidly increase startup phenomenon comparison berry definition SE discipline startup engineering define scientific engineering managerial systematic approach aim successfully develop software startup