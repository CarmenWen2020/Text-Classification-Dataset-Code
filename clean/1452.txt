coverage greybox fuzzing CGF random approach program analysis generate slightly mutate input otherwise discard frequency develop strategy explore significantly  towards frequency explain challenge opportunity CGF markov chain model specifies probability fuzzing generates input specifies input generate CGF considerably efficient inversely proportional density stationary distribution increase monotonically chosen schedule implement schedule extend afl aflfast expose previously unreported CVEs expose afl expose previously unreported CVEs faster afl aflfast magnitude unique crash afl aflfast symbolic executor klee vulnerability detection aflfast significantly effective klee program klee code coverage aflfast slightly outperforms klee combination achieves mitigate individual weakness introduction recently controversial debate efficiency symbolic execution whitebox fuzzers versus lightweight greybox fuzzers symbolic execution systematic effort stress behavior considerably effective vulnerability expose particularly lightweight fuzzers leverage program analysis effective technique efficient blackbox fuzzing spent generate symbolic execution effective program however effectiveness spending significant program analysis constraint blackbox fuzzing program analysis generates magnitude coverage greybox fuzzing CGF attempt fuzzing effective exploration without sacrifice program analysis CGF lightweight binary instrumentation unique identifier input generate slightly mutate input fuzz fuzz fuzzer retains input otherwise discard input retain fuzzed continuous loop contribute symbolic execution CGF program analysis brings benefit imprecision instance graph program binary encode smt formula CGF scalable depends program execution complexity CGF highly parallelizable retain internal afl implement CGF impact vulnerability discovery generate valid image file  initial virtually empty integrate symbolic execution afl stuck clearly increase efficiency fuzzers afl practical impact vulnerability detection ultimately practitioner propose approach bug software   discus challenge exist  opportunity boost efficiency magnitude observation fuzz exist  generate input stress behavior efficient  amount fuzz instance suppose expose vulnerability libpng fuzzing valid image file percent mutate variant reject invalid image file fuzzing invalid image file percent mutate variant independent initial image file average amount fuzz bound reject invalid input informally frequency propose strategy systematically bias fuzzer towards frequency explore amount fuzz encourage afl extension aflfast discover vulnerability gnu binutils CVEs national vulnerability database aflfast expose CVEs faster afl expose CVEs expose afl aflfast report magnitude unique crash afl argue strategy detrimental impact effectiveness afl afl report unique crash expose remain CVEs explain remarkable performance gain aflfast model coverage greybox fuzzing CGF markov chain chain specifies probability pij fuzzing generates input specifies amount fuzz generate fuzzing chosen instance minimum discover fuzzing however pij clearly unknown pre define schedule afl implement schedule assigns constant chosen fuzzing chosen input generate afl assign significantly minimum discover afl assign contrast aflfast implement schedule assigns exponential fuzzed assign chosen thereafter exponentially input generate bound allows rapidly approach minimum discover afl implement schedule assigns constantly input generate address rapid independent initial input significantly fuzz others assign  allows discover frequency instance fuzz valid image file objective generate valid image file assign however discover frequency afl assign generate valid image file significantly invalid file contrast aflfast implement schedule assigns inversely proportional density stationary distribution assigns frequency frequency estimate fuzzer probability aflfast maximum likelihood estimator fuzz fuzz generate throughout fuzzing campaign afl chooses fuzzed afl resume cycle aflfast  strategy chooses likely  per cycle cycle aflfast chooses earlier frequency chosen strategy allows fuzz however independent strategy schedule cycle fuzzed schedule strategy merely impact afl efficiency explore per effectiveness explore average modify mutation operator fuzzing probability pij discover fuzzing input afl aflfast aflfast effectively expose exactly vulnerability afl significantly faster summary argue  symbolic execution stem systematic enumeration program allows expose vulnerability hide program unfortunately fuzzers systematic coverage scalability however coverage greybox fuzzers maintain effectiveness retain fuzz previously progress towards generate deeper coverage fuzzers tend frequency generate fuzz understand difference klee aflfast vulnerability detection coverage achieve setting klee klee expose klee benchmark error quicker aflfast however aflfast discover bug klee expose indicates klee detect error quickly unable detect error frame investigate klee constraint vulnerability detection mechanism presumes completeness constraint encode completeness environment model contrast aflfast merely executes program report crash via runtime code coverage aflfast performs slightly klee average percent executable code program versus percent klee however combination technique powerful individual strength mitigate others weakness conceptual contribution smartly amount fuzz generate thereby  towards frequency towards vulnerability lurk technically achieve enhance coverage schedule strategy program analysis specifically contribution markov chain model model coverage greybox fuzzing systematic exploration markov chain insight machinery afl arguably successful vulnerability detection date utilize model explain challenge afl remarkable performance gain aflfast schedule introduce evaluate strategy input generate objective frequency strategy devise evaluate strategy chosen fuzzing objective comparison symbolic execution empirically popular symbolic execution klee implementation coverage greybox fuzzing vulnerability detection code coverage achieve publish aflfast fork afl release aflfast considerable impact software security feature blog tweet aflfast  bug darpa cyber challenge http github com  aflfast remainder article structure introduction introduce background markov chain model introduce discus opportunity boost efficiency CGF implementation boost CGF aflfast vanilla CGF afl symbolic execution klee discussion related conclude background coverage greybox fuzzing fuzz automate random developed understand reliability unix fuzzing evolve substantially becomes widely adopt expose serious vulnerability important software program category leverage internal program structure fuzzing program execute fuzzing binary program analysis instance construct graph greybox fuzzing situate  lightweight binary instrumentation glean program structure without program analysis greybox fuzzing efficient whitebox fuzzing information internal structure effective blackbox fuzzing coverage greybox fuzzers CGF lightweight instrumentation gain coverage information instance afl instrumentation capture transition along coarse sketch code inject program afl instrumentation variable cur location identifies random identifier generate compile variable mem memory byte array tuple code execute shift operation preserve directionality versus hash mem identifier algorithm coverage greybox fuzzing input input empty file   mutate input crash  timeout abort signal output crash input CGF coverage information generate input retain fuzzing input fuzz algorithm overview illustrate afl implementation CGF queue otherwise empty file generate  continuous loop timeout fuzzing aborted afl classifies favorite input afl implementation  mostly ignores non favorite architecture coverage greybox fuzzing CGF input CGF determines input generate fuzzing fuzz afl implementation  execution transition coverage creation fuzzer generates input mutate accord define mutation operator afl implementation mutate input flip arithmetic boundary deletion insertion strategy generate input generate input circular queue afl implementation  return transition execute execute queue specifically executes transition logn logm function afl bucketing address explosion intuitively afl retains input execute transition transition twice normally afl discard input execute transition previously generate input crash program crash input crash input marked unique crash fuzzing stage afl calibration deterministic stage calibration stage execute multiple average execution associate identifier across execution normally afl fuzz randomly sequence mutation operator apply random location file however deterministic stage afl applies specific mutation operator input byte afl assigns chosen binary instrumentation afl source code instrumentation binary instrumentation via qemu qemu instrumentation interpretation runtime  injects instrumentation directly binary modification afl concern function  implement strategy  implement schedule markov chain markov chain stochastic transition another chain chain transition another probability transition probability probability depends upon upon formally markov chain sequence random variable describes random variable probability markov chain initial distribution probability matrix pij specifies transition stochastic matrix entry non negative sum conditional probability pij defines probability chain transition pij source markov chain homogeneous probability matrix pij chain probability jumping markov chain homogeneous vector stationary distribution markov chain satisfies    markov chain rapidly stationary distribution sufficiently rapidly chain approach stationary distribution within reasonable independent initial random walker sample distribution described markov chain walker accord initial distribution transition accord transition probability walker arrives sample distribution ensemble walker around randomly instance crawl web model markov chain link transition link link probability pij random  click pij crawler google seek index important internet  developed algorithm pagerank assigns importance intuitively pagerank random  sequence click formally pagerank approximates density stationary distribution markov chain important density markov chain model model probability fuzzing program generates transition probability pij markov chain allows discus objective greybox fuzzing efficient exploration chain explain challenge opportunity CGF afl specifically argue coverage greybox fuzzer distinct per focus input density markov chain hence devise strategy bias traversal towards density density stationary distribution strategy introduce markov chain model coverage fuzzing markov chain homogeneous model suppose fuzzer initial input fuzzer immediately explores randomly mutate previous input input generate directly chosen sequence fuzzer described markov chain transition probability pij define probability generate input randomly mutate previous input clearly markov chain homogeneous transition probability pij depends markov chain input fuzzed probability pij generate input markov chain homogeneous analysis existence stationary distribution guaranteed homogeneous model stationary distribution exist model coverage fuzzing markov chain define discover immediate discover undiscovered input generate fuzzer fuzzing markov chain sourcethe probability matrix pij markov chain define discover pij probability randomly mutate generates input undiscovered pii  pij pji assumption assume generate input undiscovered likely generate input undiscovered assume undiscovered stationary distribution markov chain probability random walker spends roughly  proportion spent converges infinity density neighborhood μtj arithmetic similarly density neighborhood μtj neighborhood pij pji arbitrary constant greybox fuzzer likely density density markov chain undiscovered discover sequence chain fuzzing campaign sequence markov chain transition chain occurs discover however argue informally asymptotically stationary distribution clarify markov chain generate input pij probability matrix markov chain specify qij probability matrix markov chain specify       pji  pij qij sourcein probability generate input fuzzing newly discover stationary distribution markov chain specify stationary distribution chain specify similarity increase input generate discovery  monotonically approach  discover approach asymptotic stationary distribution markov chain approach stationary distribution markov chain specify asymptotic schedule determines input generate fuzzing chosen queue pre define schedule local specific unlike  anneal algorithm schedule implement function  notable markov chain model coverage greybox fuzzing stationary distribution density density percent generate input percent generate input input frequency input invalid input frequency valid basically almost valid input behavior hence devise strategy explore density efficiently fuzz afl rapid moreover markov chain mostly rapidly exploration objective unfortunate transition forget initial density walker transition probability corresponds frequency walker initial frequency walker valid invalid input benefit markov chain model coverage greybox fuzzing benefit fuzzing efficient approximation numerical program average execution consumption exist markov chain monte carlo MCMC simulated anneal guarantee convergence actual context  research markov chain model allows explain challenge opportunity exist coverage fuzzers afl model probability fuzzing input generates input transition probability pij markov chain illustrate model program input crash input motivate program execution execute execute execute execute finally execute input specify implementation mutate input MI algorithm modify input generate input MI chooses probability substitute randomly chosen ASCII bill probability MI chooses probability chooses substitution probability MI generates bill input simplify transition matrix pij diagram input bill markov chain likelihood transition explain earlier average execution MI bill bill likelihood transition MI substitute substitute probability fourth probability probability transition MI substitute markov chain motivate probability density initial distribution heavily bias towards random walker transition probability probability approximate probability input generate walker challenge coverage fuzzers coverage greybox fuzzer ensemble random walker markov chain walker objective discover generate minimal input conceptually walker simultaneously technically resource limited walker sequential fuzzer chooses input fuzz accord  generates input  algorithm usually upper bound generate input afl afl implement schedule assigns constant correspond chosen queue input  xij random variable fuzz generate discover xij recursive argument probability discover fuzz generate pij probability discover fuzz pij formally xij pij xij pij pij sourcein expectation minimum assign fuzzer discovers pij afl constant schedule assign significantly significantly actually afl schedule assign chosen input likely input generate fuzzing input input retain another input generate fuzzing input retain procedure input generate retain crash input efficient fuzzer generate input expose vulnerability crash input generate fuzzing constant excessive density afl schedule assigns constantly fuzzing input machine address rapid initial density stationary distribution markov chain assign  immediate neighborhood allows discover density however retain input density tendency assign definition density stationary distribution markov chain proportion input generate fuzzing frequency initial input afl schedule assign chosen allows discus fuzzing iteration cycle circular queue recall afl chooses elaborates fuzzing initial input discover quarter fuzz input respectively fuzzing discover fuzz fuzzing discover quarter fuzz quarter discover cycle initial procedure vulnerability expose fuzz evidently fuzzer spends frequency spent fuzzing frequency fuzz correspond fuzzing assign discover cycle summary challenge exist coverage greybox fuzzers schedule assign expectation discover assign density chain stationary distribution density boost greybox fuzzing efficient coverage greybox fuzzer discovers undiscovered density assign amount specifically strategy fuzzer chooses xij minimal schedule fuzzer assigns xij chosen limit fuzzing minimum discover density propose monotonous schedule assign monotonously increase correspond chosen queue allows rapidly approach xij moreover schedule assign inversely proportional density stationary distribution markov chain intuitively discover swiftly explore neighborhood expend allows estimate density chosen thereafter assign intuitively neighborhood explore establish density fuzzer invest significantly density neighborhood propose evaluate strategy aim fuzzer expend density instance establish density prioritize chosen circular queue generate input schedule schedule regulates specifically schedule decides input generate fuzzing function previously  queue generate input maximum likelihood estimator CGF probability generate input approximates distribution density discus evaluate schedule exploitation constant schedule exploit implement greybox fuzzers assign fairly constant chosen circular queue compute  sourcewhere CGF implementation  algorithm remains constant varies instance afl computes execution transition coverage creation derive constant schedule exploration constant schedule explore schedule assigns constant fairly compute sourcewhere maintains fuzzer judgement quality constant exponential coe exponential schedule prevents frequency fuzzed become frequency coe increase fuzzing exponentially chosen circular queue compute min iff  sourcewhere  fuzzer judgement constant fuzzer exploration mode recently discover fuzz discover sourcewhere discover intuitively frequency fuzz fuzzing priority fuzzed constant upper bound input generate per fuzzing iteration depicts greybox fuzzer explores coe schedule input chosen random program input input likely corresponds fuzzed input generate generate input discover newly discover assign however  fuzzed fashion input generate fuzzing input discover procedure input generate input retain crash input random generation magnitude input average random input constant schedule magnitude input average exponential schedule extension coe instead fuzzing schedule induces fuzz inversely proportional amount fuzz schedule assigns compute min  denominator allows exploit fuzz likely density exponential increase allows confident density linear schedule linear increase linear manner chosen inversely proportional amount fuzz min sourcethe quadratic schedule quad increase quadratic manner chosen proportional amount fuzz compute min source crash input generate fuzzing schedule strategy schedule regulates spent fuzzing strategy chosen decision purely fuzzed amount fuzz efficient coverage greybox fuzzer prioritizes input fuzzed input frequency prioritize strategy chooses fuzzed minimal however fuzzer skip  input instance designate favourite strategy apply fuzzer skip input effectively queue reorder strategy intuitively fuzzer establish frequency invest fuzzing prioritize strategy chooses generate input minimal fuzzer skip chosen input instance designate favourite finally input chosen accord strategy accepted fuzzing intuitively fuzzing input frequency generate input frequency evaluation vanilla versus boost CGF aflfast implementation monotonous schedule afl baseline implementation feature constant schedule implementation aflfast afl coverage greybox fuzzer information transition input afl binary instrumentation extend version afl implement strategy input fuzz queue functionality afl address explosion bucketing accord execute transition functionality   algorithm schedule computation amount fuzz generate input afl computes execution transition coverage creation essentially executes quickly generate later fuzz maintain evaluation various schedule afl executes deterministic stage fuzzed schedule assign significantly stage extension executes deterministic stage later assign spent deterministic fuzzing lastly afl compute dynamically increase input generate implementation via schedule disabled dynamic increase strategy afl chooses input queue afl designates favourite input effectively exclusively chosen queue execute transition afl chooses favourite input execute aflfast chooses input chosen queue input amount fuzz input afl chooses favourite input input queue aflfast chooses favourite input chosen queue chooses amount fuzz aflfast improve version available http github com  aflfast aflfast vulnerability chose gnu binutils non trivial widely analysis program binary consists objdump  zoom detail binutils fuzzer generate approximation program binary behavior program serious vulnerability bug cve IDs exploitation vulnerability previously unreported rat medium security risk inform maintainer submit patch inform security community via  mail mitre assign CVEs patch accepted vulnerability affect available binary analysis valgrind gdb binutils   attacker modify program binary executes malicious code upon analysis analysis identify binary malicious reverse engineer binary specific utility command parameter parameter placeholder file fuzzer generates input binutils afl maintains unique   input queue compute hash memory transition implement  generate potentially discard input crash afl defines unique crash crash input bucket input effectively expose unique crash experimental infrastructure machine core ghz intel xeon GB memory ubuntu host OS simultaneously core simultaneously advantage longer input empty file unix stamp crash aflfast magnitude unique crash afl  respectively aflfast unique crash objdump afl crash none fuzzers crash input remain crash investigate unique crash generate budget detail average crash aflfast solid versus afl dash compute interval vulnerability average aflfast expose CVEs faster afl expose CVEs expose afl aflfast expose vulnerability average afl vulnerability detail facet aflfast afl plot jitter overlay aflfast consistently significantly outperforms classic afl average exposure vulnerability expose within exponential schedule improve strategy clearly boost efficiency coverage greybox fuzzer expose vulnerability expose vulnerability bug aflfast buffer overflow faster afl aflfast expose bug expose afl overflow invalid unlikely exploitable detail extension consistently outperforms classic version afl independent evaluation collaborator  darpa cyber challenge CGC evaluate afl aflfast benchmark program CGC binary aflfast expose error faster afl average afl expose error expose extension however aflfast expose error expose afl  integrate aflfast bot  vulnerability binary  CGC bug thorough discussion reflection CGC article however  demonstrates potential aflfast frequency argue fuzzing spent explore frequency frequency likely valid input stress behavior program waste fuzzing frequency fuzz  finally allows coverage greybox fuzzer efficiently discover per generate input indeed heuristic generate fuzz frequency fuzz frequency aflfast discover twice afl aflfast percent discover frequency input afl percent input amount generate input per aflfast clearly demonstrates effectiveness heuristic explore maximal frequency expend minimum fuzz afl fuzz afl comparison schedule earlier introduce constant monotonous schedule afl adopts constant schedule assigns fairly amount basically input performance fuzzed exploitation constant schedule exploit understand impact choice reduce fuzzing per input investigate exploration constant schedule explore assigns fairly constant amount monotonous schedule increase fuzzing linear quadratic exponential manner specifically aflfast implement exponential schedule exponential schedule implement aflfast outperforms schedule exponential schedule coe performs slightly aflfast schedule coe expose percent unique crash linear quad explore interestingly exploration constant schedule explore discover crash schedule fuzz input quickly swiftly however strategy longer performs schedule afl exploitation constant schedule quadratic schedule quad reveal unique crash aflfast budget performs comparably linear explore comparison strategy strategy prioritize input fuzzed input frequency investigate strategy target implementation   algorithm strategy designates favourite execution transition coverage creation minimal without strategy aflfast afl designates favorite execution transition coverage creation minimal strategy chooses input queue minimal favourite without strategy aflfast afl chooses input queue marked favourite strategy exponential schedule combination strategy significantly effective strategy individually strategy perform similarly individual strategy strategy afl designates favourite effective strategy strategy individual strategy strategy input chosen queue effective performs similarly aflfast without strategy comparable afl exponential schedule however aflfast strategy expose almost twice unique crash aflfast strategy strategy summary evaluate aflfast schedule plus strategy gnu binutils exponential schedule outperforms schedule strategy effective aflfast exponential schedule average magnitude unique crash afl  crash input objdump afl expose crash aflfast vulnerability faster afl expose vulnerability expose afl aflfast expose bug unlikely exploitable faster afl expose bug expose afl independent evaluation  binary benchmark cyber challenge establishes average aflfast expose error faster afl expose error afl symbolic execution whitebox fuzzing coverage greybox fuzzing aflfast boost coverage greybox fuzzer implement exponential schedule recent version klee widely symbolic execution whitebox fuzzer vulnerability detection code coverage comparison vulnerability detection author klee originally introduce gnu coreutils expose previously unreported error exist recent version motivate recent version coreutils comparison code coverage recent version coreutils conceptual comparison symbolic execution efficient exploration systematic enumeration program graph program symbolic execution construct constraint quantifier logic formula satisfied input constraint construct conjunction constraint constraint constraint conditional instruction along false constraint  modulo theorem smt solver input satisfies constraint klee symbolic execution implement heuristic explore particularly yield code coverage quickly contrast blackbox fuzzers exploration treat program blackbox whence notion program however blackbox fuzzers generate  amount input earlier effective fuzzer efficient blackbox fuzzing generate input relatively blackbox fuzzer generates input symbolic execution explore quickly collateral incidental manner however blackbox fuzzer ability discover quickly  symbolic execution discover steadily symbolic execution outperforms blackbox fuzzer available coverage greybox fuzzer CGF exploration blackbox fuzzer objective CGF explicitly discover CGF leverage lightweight instrumentation identify input input retain explore neighborhood discover otherwise input symbolic execution program analysis taint constraint CGF random mutation input retain efficiency blackbox fuzzers schedule improve capability explore maximal per hence klee aflfast exploration code coverage expose error leverage benchmark klee however comparison grain empirical evaluation implementation concept concept improve efficiency extend engineering effort unrelated concept conscious effort explain phenomenon distinguish conceptual technical origin fuzzing command utility aflargv gnu coreutils collection widely command file mkdir directory overview utility recent version utility mandatory optional command parameter file upper bound option file klee synthesis option file symbolic execution however aflfast afl generate file program input statement coverage achieve coreutils coreutils executable code  facilitate coreutils command utility implement aflargv upper bound command option file input file  file command option file aflargv allows specify upper bound format klee aflargv argument sym args min max specify min max command option maximum aflargv argument sym file min max specify min max file maximum byte argument file specifies file arbitrary instance aflfast aflargv fuzz utility  argument maximum file arbitrary execute afl fuzz aflargv sym args file  file format leverage fix data chunk  actual specify option file instance aflfast generates fuzz input aflargv via aflargv argument specify command option maximum byte specify optional parameter indeed parameter byte specify ASCII code actual argument byte interpret  ASCII code remain byte ignore via aflargv argument specify file arbitrary hence everything beyond sixth byte interpret file content aflfast oblivious aflargv fuzzer concerned generates input objective discover maximum per generate fuzz aflargv synthesizes file correspond command parameter per normal feedback discover aflargv generates file txt  txt experimental setup experimental parameter klee mitigate experimenter bias comparison fuzzing campaign experimental infrastructure earlier klee aflfast command option author sym args sym args sym file aflfast option empty file technically assemble empty file minimum option zero minimum file zero byte aflargv allows assemble file argument file accord file format important fuzzer exist regression suite however actually utilize functionality effectiveness execute generate input utility compile AddressSanitizer vulnerability detection symbolic execution whitebox fuzzer klee boost greybox fuzzer aflfast vulnerability detection klee benchmark collection bug report klee expose error efficiency discus bug aflfast klee  finally encourage finding conduct recent version coreutils aflfast klee previously unreported bug effectiveness efficiency klee benchmark klee efficient aflfast bug however average aflfast expose error klee specifically exposure aflfast klee moreover klee benchmark consists bug explicitly discover report author klee introduces selection bias klee discover error discover discover discover klee outperforms aflfast efficiency klee benchmark bug effectiveness benchmark aflfast klee fail discover bug klee benchmark moreover aflfast discover bug klee exist recent version coreutils buffer overflow ptx aflfast detect within klee however unsure klee capability detect allocate negative amount memory integer overflow memory exhaustion investigate failure detect bug within budget klee attribute failure discover bug tac recent klee aflfast attribute failure discover bug  difficulty synthesize specific sequence expose bug aflfast generate file specific sequence byte option expose bug however aflfast detect bug budget aflfast outperforms klee effectiveness within frame coreutils coreutils aflfast discovers previously unreported bug klee discovers attribute advantage aflfast runtime klee constraint error detection mechanism klee symbolically executes interprets program llvm intermediate representation constraint error symbolic execution whitebox fuzzers integrate error detection directly constraint embed restricts detection error encode constraint violation instance encode detect misalign address bug aflfast error detection impaired incompleteness environment model underlies symbolic interpreter contrast aflfast greybox fuzzer executes compile binary concretely report generate input crash runtime checker  crash program execution program normally crash detect vulnerability klee constraint vulnerability detection mechanism presumes completeness constraint encode environment model aflfast merely executes program reporting crash runtime code coverage klee aflfast coverage achieve leverage earlier experimental infrastructure recent version gnu coreutils experimental setup remains statement coverage achieve fuzzing execute generate input utility compile  average aflfast achieves slightly code coverage klee klee circa percent executable code average utility aflfast percent executable statement aflfast slightly percent klee slightly percent aflfast klee effective statement utility however statement utility fuzzer klee aflfast individual strength perform circumstance instance klee easily synthesize complex command option aflfast without majority option aflfast performs slightly klee code coverage however combination powerful strength mitigate weakness  afl publication shorter version aflfast available public http github com  aflfast release aflfast github repository considerable cyber security researcher link repository tweet twitter member security community evaluate bug previously  feature entry  popular forum tech savvy reader google security award USD bug bounty bug aflfast report release github repository aflfast fork source code relatively impact security community immense   developer afl implementation improve afl accord observation conduct report observation aflfast improvement afl outcome  implementation spending deterministic stage aflfast spends proportion non deterministic fuzzing campaign aflfast assigns substantially fuzzing campaign cycle aflfast queue cycle rapidly retain input fuzzed almost immediately aflfast assigns queue substantially faster exploration exploitation observation  implement mainline afl explore schedule concretely reduce fuzzed factor version FidgetyAFL version confuse version implement exploit schedule version  afl FidgetyAFL aflfast instead crash  density density correlate graph fuzzers parameter libpng afl consistently slightly ahead aflfast percent FidgetyAFL outperform afl aflfast percent slightly trail consistent observation explore schedule efficient later outperform schedule crash schedule crash strategy expose klee benchmark bug klee fairly deterministic report min sec aflfast random approach hence report bug aflfast coreutils bug fix bug integer overflow memory exhaustion exists recent version remain bug heap buffer overflow regular expression component  coreutils bug recent version coreutils  turbo aflfast outperform afl percent percent FidgetyAFL outperform afl percent percent zlib aflfast afl perform similarly aflfast solid percent later FidgetyAFL aflfast perform similarly throughout patch aflfast outperforms afl  percent FidgetyAFL aflfast perform similarly statistically fuzzing campaign relatively report specifically exponential schedule implement aflfast gain traction outperform explore schedule implement FidgetyAFL version afl implement explore schedule fuzz explore schedule outperforms schedule revise version afl significantly efficient predecessor aflfast favourably improve version afl performance difference afl newer version conduct FidgetyAFL aflfast discover security critical program openssl library secure communication internet libxml popular xml parser library openssl fuzzed asn utility libxml  utility fuzzed without additional command parameter without deterministic stage afl option empty file initial conduct FidgetyAFL aflfast overall aflfast efficient FidgetyAFL libxml FidgetyAFL discover aflfast discovers longer openssl FidgetyAFL discover aflfast discovers average discover libxml openssl FidgetyAFL aflfast related technique propose increase efficiency fuzzing important optimization pertains input wisely wealth input assumption  input empty file however coverage greybox fuzzing CGF clearly benefit smart selection file available others program analysis detect dependency input instance image width occupies byte png image file format modify dependency analysis allows fuzz dependent byte mutation operator ratio recognize exploration exploitation fuzzing input shorter versus longer amount proceed model blackbox fuzzing multi bandit compute expose unique crash previous fuzzing iteration fuzzer bias towards generate crash input already error bias instead towards frequency stress program behavior symbolic execution fuzzers generate file stress frequency probabilistic symbolic execution model counting compute probability random input symbolic execution effective enumerates essentially independent frequency towards dangerous program location generate specific negate alternative taint fuzzing whitebox fuzzing technique exploit classical taint analysis localize input marked symbolic instance portion input file symbolic argument execute critical model whitebox fuzzing leverage input model synthesize transplant data chunk critical chunk input file however symbolic execution technique rely program analysis constraint hamper scalability imprecision program binary encode constraint hamper applicability contrast CGF completely  program analysis sake scalability tremendous vulnerability detection colleague combine lightweight greybox fuzzers symbolic execution whitebox fuzzers instance  symbolic execution generate input frontier node input blackbox fuzzer contrast driller afl seek symbolic execution stuck instance generate magic monotonous schedule employ expensive symbolic execution sufficiently markov chain model variety random fuzz markov chain monte carlo random MCMC RT markov chain monte carlo MCMC leverage knowledge input probability reveal error however MCMC RT entirely scalable maintains probability input program input CGF explain markov chain actually maintain chain probability memory MCMC RT bias towards reveal suspect error CGF expose unknown error hide program bias boost CGF towards frequency utilize MCMC leverage knowledge mutation operator effectiveness operator effective previous fuzzing iteration chosen probability fuzzing model program markov chain prioritize explore contrast markov chain explain efficient smartly spent fuzzing fuzz without program analysis markov chain meta heuristic algorithm optimization demonstration utility markov chain model CGF recent greybox fuzzing novel schedule implement simulated anneal meta heuristic minimize distance target location program important patch vulnerability detection dangerous location schedule assign closer target compile graph analyze program runtime distance efficiently compute markov chain model CGF cast target location optimization fuzzing objective encode conclusion symbolic execution technique gain prominence scalability approach blackbox greybox fuzzers blackbox greybox technique effectiveness limited semantic oversight technique explain technique effective greybox fuzzer afl identifier enhance effectiveness efficiency afl crash evidence collaborator aflfast extension afl expose magnitude unique crash afl budget moreover aflfast expose bug vulnerability afl cannot vulnerability aflfast expose substantially earlier afl importantly explanation enhance effectiveness visualize CGF exploration markov chain exist CGF density devise investigate strategy CGF otherwise hidden density generate input density