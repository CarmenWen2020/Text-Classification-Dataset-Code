code flaw vulnerability prevalent software potentially variety deadlock hack information loss failure variety approach developed detect likely location code vulnerability code rely manually code feature complexity metric frequency code token characteristic potentially problematic code however suffer challenge sufficiently capture semantic syntactic representation source code important capability building accurate prediction model approach built upon powerful memory model automatically semantic syntactic feature code evaluation android application firefox application demonstrates prediction obtain feature achieve vulnerability prediction model within project prediction project prediction introduction software vulnerability security flaw glitch bug weakness software potentially significant damage business increase reliance software society instance heartbleed vulnerability openssl expose affected billion internet user cyberattacks constant threat business government consumer rate cyber breach increase rapidly annual global economy cybercrime estimate billion estimate global security worth billion central security protection ability detect mitigate software vulnerability software release effectively prevent attacker exploit software significantly increase complexity identify security vulnerability software code rare software defect infamous heartbleed vulnerability code software vulnerability commonly refer needle haystack static analysis routinely security commonly generate false positive dynamic analysis rely detailed monitoring file memory representative application hence standard relies heavily domain knowledge identify vulnerable software intensive security inspection software engineer automate explore remain software code likely vulnerability alert predictive model prioritize effort optimize inspection aim increase likelihood vulnerability reduce software engineer discover vulnerability addition predictive capability identifies vulnerable component software lifecycle significant achievement fix error increase dramatically software lifecycle progress approach building vulnerability prediction model machine technique feature software code predictor vulnerability commonly feature previous software metric code dependency cyclomatic complexity code churn metric code developer activity dependency organizational however feature recognize code semantically hence potentially vulnerable code complexity metric behave differently likelihood vulnerability attack furthermore choice feature predictor manually chosen knowledgeable domain expert disadvantage outdated underlie bias addition situation handcraft feature generalize feature software project perform project emerge approach treat software code text leverage processing nlp technique automatically extract feature recent bag bow source code file collection code token associate frequency feature predictor vulnerability prediction model bow feature rely code token developer fix pre software metric model however bow approach weakness ignores semantics code token fails recognize semantic relation bag code token necessarily capture semantic structure code sequential software program define syntax semantics program execute approach capture semantics code structure individual code token important information program previous demonstrate semantic information hidden program useful various software engineering task code completion bug detection defect prediction semantic information richer representation vulnerable code improve vulnerability prediction recent advance technique machine powerful alternative software metric bow software code widely model memory lstm recurrent neural network highly effective dependency sequential data text lstms demonstrate performance application machine translation video analysis recognition novel approach automatically feature predict vulnerability software code leverage lstm capture context relationship source code dependent code scatter apart code token due program specification java due api usage specification lock unlock immediately textual code file previous preliminary demonstration effectiveness model lstm however merely sketch lstm predict code token comprehensive framework feature combine novel novel application building vulnerability prediction model feature semantics code token semantic feature sequential structure source code syntactic feature automatic feature approach eliminates manual feature engineering occupies effort traditional approach java application android OS platform firefox application public datasets demonstrate approach highly effective predict vulnerability code outline motivation brief background vulnerability prediction neural network model overview approach detail feature automatically implementation approach report evaluate discus threat validity discus related summarize contribution outline future motivation motivate demonstrates limitation exist approach software component vulnerability prediction code listing java adapt code aim avoid data corruption multi thread java program data concurrent modification access file  mutual exclusion lock enforce exclusive access file thread execute code acquire lock reading file release lock reading file thread access file motivate motivate lock however deadlock listing demonstrates deadlock vulnerability file exception file transfer hence unlock execute fails release lock  lock thread prevent thread acquire lock deadlock situation deadlock serious vulnerability exploit attacker organise denial service dos attack attack prevent legitimate user access software listing  vulnerability fix lock release unlock finally hence guarantee lock release regardless exception occurs addition code ensures lock finally executes acquire lock lock immediately code listing identical respect software metric bag predictive machine approach code vulnerability detection code variable listing code token frequency identical code hence code listing indistinguishable software metric bow feature vulnerability detection analysis recommendation approach exist relies feature fail recognize listing contains vulnerability background vulnerability prediction vulnerability prediction involves software component likely vulnerable exist vulnerability prediction refer component source file java file software hence granularity become standard literature predict vulnerability software code benchmark technique datasets objective alert software engineer software focus manual inspection target suite pinpoint exactly code vulnerability resides hence chose file scope exist approach component likely vulnerable function  input file return boolean indicates component likely vulnerable false indicates component likely vulnerability prediction therefore approximate classification function  component vulnerable training training function refer model automatically vulnerability component project within project prediction project project prediction within project prediction setting within version component version training component version component later version vulnerability prediction adapt date various machine technique widely function  mathematically computationally convenient machine algorithm file dimensional vector dimension feature predictor memory feature vector representation file critical building accurate vulnerability prediction model representation code complexity metric useful reveal semantics hidden deeply source code demonstrate motivation memory architecture powerful representation source code automatically syntactic semantic feature dependency code code immediately source code memory lstm recurrent neural network sequence input vector sequence output vector memory lstm neural network architecture variant recurrent neural network rnn capable dependency difference feedforward neural network input vector output vector recurrent neural network lstm network sequence lstm input sequence code token sequence correspond label code token lstm input previous output previous memory model parameter compute output output predict output code token previous lstm memory accumulate memory context feature lstm model dependency information memory refresh partially forget irrelevant information accept input specifically amount information memory gate input gate forget gate output gate return blockage passing internal structure lstm gate learnable code corpus lstm network parameter perform task predict code token input hence traditional feedforward network lstm network significantly reduces model parameter lstm model input sequence output sequence error output predict output backwards network backpropagation training adjust model parameter error minimize detail lstms seminal lstm highly effective representation sequential data text demonstrate recent breakthrough machine translation recognition software code typically important text repetitive predictable dependency investigate lstm representation software code vulnerability prediction architectural overview automatic feature multiple java source file consist header contains declaration variable treat header parse code within sequence code token fed memory lstm vector representation feature important transforms variable sequence code token fix feature vector multi dimensional addition input code token lstm token capture distributional semantics code token context overview approach automatic feature vulnerability prediction lstm codebook construct bag token project detailed overview approach automatic feature vulnerability prediction lstm codebook construct bag token project detailed obtain feature vector file aggregate feature vector feature vector aggregation operation pool pool aim transform joint feature representation feature usable file feature maintain important information remove irrelevant detail simplest statistical pool pool sum vector file complex pool discus detail local feature file feature however local project variable typically project specific hence feature alone effective within project prediction sufficient project setting approach therefore learns another feature address generalization issue universal bag token file across project automatically code token cluster semantic closeness centroid cluster codebook generate global feature file centroid assignment feature fed classifier predict vulnerable component vulnerability prediction project due lack suitable training data technique address issue training model data source project apply target project approach source code source target project readily applicable within project prediction project prediction feature generation usage detail approach automatically learns generates feature source code file vulnerability prediction recommendation software engineer parse source code approach convert program vector lstm abstract syntax ast extract syntactic information source code source file project utilize parser lexically analyze source file obtain ast source file parse parse sequence code token attribute header grouped sequence token processing comment blank ignore contribute actual behaviour code standard replace integer exponential notation hexadecimal generic num token replace constant generic str token allows generalize specific source file project replace popular token corpus token exist exist training token unk limited token fix vocabulary construct popular token rare token assign unk corpus compact computation sufficient semantic information code token semantics parse tokenizing sequence code token perform vector representation code token code token dimensional continuous vector code token embed described detail sequence code token input sequence lstm lstm predict code token sequence detail lstm generate output vector code token code token vector representation capture distribution semantics code token context detail code token embed lstm input vector code token hence convert code token fix continuous vector code token embed maintain token embed matrix code token vector vocabulary code token index vocabulary embed matrix ith embed matrix embed vector token ith denote vector representation code token token convert vector vector representation obtain code sequence model training code sequence vector input sequence lstm specifically token vector sequence input lstm lstm recurrent net lstm model parameter computes output input token output vector code token vector input token vector simplicity training model assume vector predict token another token matrix denote lstm automatically learns model parameter token matrix code token embed matrix maximize likelihood predict code token training data specifically output vector code token predict code token context earlier code token compute posterior distribution exp  exp sourcewhere index token vocabulary transpose matrix indicates vector kth index vocabulary style essentially estimate model code previous demonstrate model built lstm lstm capability automatically grammar code lstm automatically code sequence extract dataset training token sequence token token information model parameter maximize accuracy token prediction accuracy loss entropy token logp token logp token logp token model sequence code token dataset minimize sum loss sequence logp logp SourceRight click MathML additional feature essentially logp involves compute gradient propagation phase update model parameter consists internal lstm parameter via stochastic gradient descent generate output token training phase lstm compute code token vector code token extract dataset lstm ensures code token contains information code token code token capture distributional semantics processing concept dictate meaning code token define context lexical token theoretically realize infinite usage context hence token semantics semantic define token usage code token usage context corpus token semantics proximity another hence token capture syntactic semantic code token token generate distinct feature file generate local feature generate local feature file involves generate feature file extract sequence code token lstm obtain output sequence token compute feature vector aggregate token sequence information accumulate pool multiple perform pool requirement pool invariant pool sensitive variable employ effective statistical pool pool nst variance pool denotes wise multiplication concatenation pool variance pool previous obtain feature file file contains multiple involves aggregate vector vector file employ another statistical pool mechanism generate local feature file generate global feature local feature useful within project vulnerability prediction capture local usage context tend project specific enable effective project vulnerability prediction another feature file reflect file semantic across project refer feature global feature similarly spirit local global model defect prediction file code token generate lstm capture semantic structure token usage context file bag code token index vocabulary regardless usage partition token subset corresponds distinct semantic suppose file vector dimension dimension token vector respective challenge partition semantic borrow concept computer vision token file analogy salient informative image token akin descriptor sift difference vision visual descriptor calculate manually whereas token learnt automatically lstm vision descriptor cluster codebook confuse software source code essentially descriptor centroid similarly codebook summarizes token semantic across project dataset code codebook distinct semantic construct codebook euclidian distance cluster vector training pre define centroid hence codebook token cluster file obtain vector assign closest centroid file vector centroid occurrence file token vector compute distance vector centroid establish training closest centroid centroid centroid hence feature vector file codebook automatically generate global feature source file technique powerful abstraction code token file intuition code token entire dataset usage context token cluster hence file characterize usage context contains approach efficient effective feature file code token constitute file collection distinct semantic code token knowledge utilize concept codebook computer vision automatically generate feature software code vulnerability prediction enables automatically generate local global feature source file training file feature label vulnerable machine classifier model predict vulnerability file standard described previous conduct demonstrate vulnerability prediction file indeed actionable although source code file sometimes exist average file hence inspect predict source file location vulnerability feasible although prediction finer granularity potentially decrease manual inspection effort severe reduction accuracy predict vulnerability binary collection source file accurate file predict false positive reduce usefulness machinery user trust addition approach learns feature code token feature aggregate code source file demonstrate chose apply approach file almost exist datasets vulnerability prediction operates granularity facilitate training model perform comparison evaluate impact classifier approach widely classifier random decision naive bayes logistic regression random effective classifier vulnerability prediction previous random belongs randomize ensemble combine estimate weak classifier prediction random RFs decision weak learner randomly sample subset dataset node decision RFs splitting feature predictor node randomly subset feature random feature feature node split feature feature RFs randomizes training sample feature selection apply generate slightly sample usually generate prediction instance RFs combine prediction generate decision typically average output across decision generates decision node information gain factor decision classifier widely due explainability naive bayes assumption feature conditionally independent outcome despite naive assumption naive bayes effective classifier logistic regression logistic sigmoid function return probability input feature probability mapped discrete classification purpose implementation propose approach implement theano kera framework python theano automatic differentiation loss host powerful adaptive gradient descent kera wrapper model building easy training detail RMSprop optimizer standard rate smooth hyper parameter model parameter update stochastic fashion mini batch frequent token code model dropout rate hidden output lstm layer parameter setting standard literature classifier random implement scikit toolkit hyper parameter tune performance maximum depth minimum sample split internal node maximum feature per code intel xeon cpu ghz machine CPUs physical core thread ram GB handle vocabulary evaluate prediction probability equation iterate unique token vocabulary vocabulary highly expensive tackle issue employ approximate contrastive estimation approximates vocabulary probability evaluation subset randomly sample vocabulary contrastive estimation replaces expensive normalization token vocabulary logistic model token ensures theoretically probability token maintain data hence datasets loss accuracy mathematical technique improve computation expensive normalization probabilistic model softmax quality split token handle variable inefficient handle separately recent advance graphical processing gpus handle mini batch fix typical pad dummy token mini batch however approach waste computational effort handle dummy token approach split non overlap sequence fix chosen implementation due faster simplicity feature simply feature sequence evaluation datasets empirical evaluation exploit publicly available datasets previous vulnerability prediction android dataset dataset previous vulnerability prediction dataset originally popular application droid android OS dataset diversity application domain education finance email image however dataset application version date file vulnerability label vulnerable file source code file file version retrieve relevant source file code repository application code repository application longer available apps version retrieve code repository datasets retrieve source file version  dataset version source file version longer maintain code repository resultant dataset contains application source application droid repository application pre instal android OS droid application downloads downloads vulnerability exist across application dataset forge information leak  resource denial service site script command injection privacy violation header manipulation privacy violation forge denial service vulnerability dataset descriptive statistic apps dataset version file average file version average code version average vulnerable file version ratio vulnerable file dataset contains sequence sequence training others validation lstm achieve perplexity validation finally feature extraction dataset statistic firefox dataset firefox  dataset previously built shin williams vulnerability report firefox mozilla foundation security advisory  link  report bug report firefox information identify file firefox report vulnerability dataset source file firefox vulnerable file accounting percent file dataset  code source file archive firefox code repository research previous vulnerability prediction aim standard research RQ within project prediction automatically feature lstm approach suitable building useful vulnerability prediction model RQ version prediction propose approach perform predict future version model version application newer version application RQ project prediction approach suitable project prediction model application application experimental setting experimental setting research within project prediction training data version application specifically application dataset source file version training prediction model employ stratify fold validation file fold approximately ratio vulnerable file file fold foi remain fold foi foi training prediction model performance prediction model source file fold foi fold compute average performance version prediction experimental prediction model source file version application source file subsequent version version  app training remain version another model training update specifically model previous release application version conduct model version remain version model version remain version compute average performance project prediction source file version application prediction model model version remain application compute performance average performance procedure application prediction model application training benchmark performance approach benchmark software metric complexity metric extensively defect prediction vulnerability prediction intuition complex code understand maintain vulnerability code implement vulnerability prediction model metric feature commonly exist vulnerability prediction model category cohesion metric extent source code coherent complexity metric complexity source code algorithm couple metric amount interdependency source code documentation metric amount comment documentation source code inheritance metric aspect inheritance hierarchy code duplication metric metric code bag technique previous considers source code text hence treat source code file collection associate frequency frequency feature predictor vulnerability prediction model lexical analysis source code vector code token frequency token file previous discretizing bow feature significantly improve performance vulnerability prediction model discretization involves transform numerical bow feature bin code token occurs threshold mapped bin otherwise mapped another bin belief network recent demonstrate belief network DBN defect prediction DBN stochastic neural network extract multiple layer data representation implementation DBN per file input latent posterior output file representation standard DBN accepts input normalize dimension maximum  entire training data DBN built stage wise fashion layer restrict boltzmann machine RBM normalize RBM layer neural network binary neuron unlike standard neural network mapping input output supervise manner RBM learns distribution data unsupervised without label standard literature RBM contrastive divergence RBM posterior input RBM training finally RBMs stack DBN hidden layer posterior RBM file representation implementation hidden layer respectively enable comparison classifier prediction model benchmark chose random RF ensemble combine estimate multiple estimator effective classifier vulnerability prediction implementation RF scikit toolkit perform tune hyper parameter maximum depth minimum sample split internal node maximum feature hyper parameter tune prediction model benchmark performance confusion matrix evaluate performance predictive model confusion matrix incorrect decision classifier file classify vulnerable truly vulnerable classification positive file classify vulnerable actually vulnerable classification false positive file classify vulnerable classification false negative finally file classify classification negative confusion matrix compute widely precision recall vulnerable file widely literature evaluate predictive performance vulnerability prediction model precision prec ratio correctly predict delayed issue issue predict delayed issue calculate tptp source recall ratio correctly predict delayed issue actually issue delay calculate tptp source harmonic precision recall calculate repr source roc curve auc evaluate discrimination achieve model auc random prediction auc advantage auc insensitive decision threshold precision recall auc indicates predictor code token semantics important approach semantics code token context usage lstm approach frequent code token dataset automatically grouped cluster cluster token lstm recall cluster basis construct codebook distribute stochastic embed sne display dimensional vector dimension representative code token cluster brief illustration code token semantically related grouped cluster code token related exception    grouped cluster indicates extent token effectively capture semantic relation code token useful later syntactic semantic feature frequent code token automatically grouped cluster cluster distinct frequent code token automatically grouped cluster cluster distinct within project prediction RQ variation approach pool technique pool standard deviation pool local global feature report random classifier RQ RQ detailed decision naive bayes logistic regression report appendix computer society digital library http doi org ezproxy auckland tse report precision recall auc variation approach local feature global feature joint feature local feature option joint feature option report pool generate feature standard deviation pool generate syntactic file feature within project RQ variation approach approach obtain android application achieve percent across precision recall auc variation approach local feature option vulnerability prediction consistent underlie theory local feature project specific useful within project prediction option deliver precision recall auc average across application prediction model local feature achieve percent application percent auc application approach outperforms benchmark extent plot demonstrate performance improvement approach exist technique plot distribution improvement across seventeen project dataset   etc specific performance indicator quartile inside quartile median extend parallel variability outside upper quartile individual dot outlier plot improvement distribute across seventeen project model software metric approach across project median improvement approximately percent refer appendix available online supplemental distribution absolute performance percentage performance difference apply benchmark software metric bag belief network local feature approach performance within project prediction within project RQ variation approach firefox dataset classification threshold joint feature indicates local feature global feature percentage performance difference apply benchmark software metric bag belief network local feature approach performance version prediction android application local feature approach consistently outperform software metric approach performance application approach percent improvement software metric approach application   improvement percent bag bow belief network approach achieve average percent consistent finding previous bow hence improvement approach benchmark software metric approach approach outperform bow approach application improvement percent random clearly outperform decision logistic regression naive bayes within project vulnerability prediction setting local feature global feature classifier logistic regression naive bayes decision mixed appendix available online supplemental improvement approach bow DBN classifier random firefox application dataset highly unbalanced percent file vulnerable minor classification model tends bias towards predict file reduce training error vulnerable false negative issue previous employ rebalancing technique oversampling undersampling training balance resampling technique however artificial bias towards minor alternative impose additional model classification mistake minor training penalize classification enable model attention minority conduct undersampling oversampling penalize classification penalize classification report undersampling oversampling technique report appendix available online supplemental similarly previous firefox dataset perform sensitivity analysis classification threshold evaluate prediction model classification threshold interval instead default threshold classification threshold model classify file predict probability overall model global feature joint feature outperform model local feature global joint feature consistently achieve auc classification threshold auc model local feature local feature recall precision threshold recall dramatically decrease precision rapidly increase threshold model global joint feature balance precision recall although recall precision optimize vice versa security engineer reluctant risk sufficient resource inspection recommend model performance threshold limited resource inspection model precision threshold model developed shin williams model joint global feature consistently precision threshold threshold model joint feature achieve percent precision offering percent improvement model developed shin williams improvement percent threshold model balance precision recall threshold shin williams model RQ feature automatically source code lstm highly accurate prediction model detect vulnerability software application version prediction RQ report version prediction model version application subsequent version application  application version exclude hence application evaluate demonstrate variation approach achieve predictive performance criterion average precision recall approximately percent average auc percent version RQ variation approach global feature improve generalization prediction model version local feature global feature option approach achieve percent performance application approach joint feature outperform software metric approach respect performance application refer appendix available online supplemental distribution absolute performance average improvement software metric approach percent percent auc approach outperform bow approach auc DBN approach auc bow DBN approach perform version prediction average percent camera application achieve recall percent DBN percent bow precision percent approach achieve balance performance recall precision camera application approach achieve recall percent bow DBN precision percent percent improvement percent improvement auc random clearly outperform decision logistic regression naive bayes version vulnerability prediction setting local feature global feature logistic regression decision classifier improvement appendix available online supplemental improvement approach bow DBN naive bayes appendix available online supplemental classifier model training update model previous release average project slightly improve update model training helpful RQ predictive model version software application highly accurate prediction vulnerable component version application version RQ variation approach random update training project prediction RQ setup previous built prediction model version application training model version application hence prediction setting benchmark variation approach focus raw performance instead procedure previously benchmark focus assess application model effectively apply baseline previous model applicable application precision recall percent application report application correspond model apply global feature improves applicability prediction model model semantic syntactic feature successfully applicable application  applicable application project prediction approach improvement bow DBN benchmark average joint feature model applicable around application approximately application achieve bow DBN model random clearly outperform decision logistic regression naive bayes project vulnerability prediction setting local feature global feature addition approach outperforms bow DBN decision naive bayes classifier appendix available online supplemental logistic regression classifier appendix available online supplemental project RQ benchmark variation approach project prediction challenge due potentially significant difference cod style functionality project although encourage however acknowledge improve applicable potential improvement feature diverse application application RQ predictive model feature automatically learnt software application predict vulnerable software component software application discussion performance bow within project prediction RQ RQ totally surprising bow representation text classification source code text executable program although training file file identical project typically version version file significant amount information version information multiple fully code bow statistic code convention style representation sufficiently expressive couple highly flexible classifier random likely however project prediction RQ bow statistic likely project knowledge project transfer others machine data mining domain adaptation project domain approach representation across domain upon classifier built precisely lstm model codebook construction lstm codebook available data without supervision suggests actually external data vulnerability label competitive performance propose approach clearly demonstrates effectiveness representation conclude within project prediction useful bow due simplicity generalize project another representation recommend lstm model codebook semantic structure discovery finally almost exist vulnerability prediction operates file prediction file granularity standard related chose file leverage exist datasets facilitate comparison however approach feature code token beyond file granularity sequence code token model already automatically generate feature feature model predict vulnerability manner treat code sequence code token aggregation obtain feature code approach potentially applicable vulnerability prediction training prediction model granularity correspond  code label vulnerable exist vulnerability datasets others previous unfortunately label code datasets become available model readily extensible leverage alternatively recent defect prediction target hence another possibility investigate future extend model defect prediction datasets threat validity threat validity discus construct validity mitigate construct validity concern publicly available dataset previous dataset contains application vulnerability label file application dataset unfortunately source file however carefully information application detail version date dataset retrieve relevant source file code repository application acknowledge dataset false positive approach manually remove dataset however dataset detailed report vulnerability unable remove false positive however report remove false positive application   negatively affect performance approach negatively affected remove false positive dataset addition appendix computer society digital library http doi org ezproxy auckland model highly accurate prediction component negative setting within project version project conclusion validity minimize threat conclusion validity standard performance vulnerability prediction however acknowledge statistical apply verify statistical significance conclusion although statistical previous vulnerability prediction investigation future benchmark software metric bag belief network technique propose implement exist however implementation publicly available access hence implement version technique although closely procedure described acknowledge implementation detail particularly explicitly described implementation however ensure implementation reflect implementation implementation dataset implementation consistent internal validity dataset contains vulnerability label java source file file xml manifest file security information access another threat concern version prediction replicate exactly file version inflate prediction model benefit external validity application significantly complexity domain popularity revision however acknowledge data representative software application investigation confirm finding application web application application program php related vulnerability prediction machine technique widely vulnerability prediction model approach employ complexity metric McCabe cyclomatic complexity nest complexity predictor later approach enrich software metric feature couple cohesion metric code churn developer activity metric dependency organizational approach knowledgeable domain expert metric predictor vulnerability recent approach treat source code another text leverage text mining technique extract feature building vulnerability prediction model bag representation source code file associate frequency frequency feature predict vulnerability bow model recall software metric model php application recent linux kernel superiority bow vulnerability prediction code metric feature however bow approach inherent limitation bow syntactic information code disregard approach rely manual feature engineering discriminative feature extract deliberate combine primitive component token feature gram topic selection keywords expression etc feature sufficient shallow model naive bayes svm random perform token readily available code argue token easy domain knowledge assume code sequence token feature learnt automatically estimate  neuron multiple abstraction defect prediction predict vulnerability related software defect prediction active software analytics defect prediction highlight refer reader comprehensive review detail code metric commonly feature building defect prediction model various metric employ related metric developer related metric organization metric metric defect prediction model adapt vulnerability prediction however model directly transfer predict  vulnerability recently approach leveraged model belief network DBN automatically feature defect prediction demonstrate improvement predictive performance DBN however naturally capture sequential dependency source code defect prediction file recent approach address issue approach feature code token finer granularity however development vulnerability dataset training contains  vulnerability label currently exist code model recently attract increase software engineering recent vision propose  generic framework lstm model software development evolution demonstrate lstm leveraged temporal dependency software evolution address challenge software engineering requirement maintenance realizes vision demonstrate effectiveness recurrent neural network rnn model source code later extend rnn model detect code clone rnn encoder decoder consists encoder rnn input sequence decoder rnn attention generate output sequence generate api usage sequence api related query rnn encoder decoder fix error program convolutional neural network cnn bug localization preliminary earlier lstm effective model source code built model automatically syntactic semantic feature predict vulnerable code component conclusion future proposes leverage memory representation model automatically feature directly source code vulnerability prediction syntactic feature capture sequential structure code semantic feature characterize source code file usage context code token perform evaluation android application public dataset previous within project prediction demonstrate approach achieve percent performance precision recall auc android application random classifier approach outperforms traditional software metric approach percent improvement average bag approach percent improvement average another approach belief network percent improvement average project prediction predictive model android application approach predict vulnerable software component average android application precision recall percent application achieve bag belief network evaluation firefox application  model improve percent precision exist model future involves apply approach application web application program php vulnerability datasets available aim leverage approach feature predict vulnerability code addition explore approach extend predict defect safety critical hazard code finally future investigation involves building fully prediction raw input data code token vulnerability outcome