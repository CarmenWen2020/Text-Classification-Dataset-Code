complexity dynamism microservice unique challenge variety software engineering task fault analysis debug spite prevalence importance microservices limited research fault analysis debug microservice gap conduct industrial survey typical fault microservice debug challenge developer develop medium benchmark microservice complex source microservice within knowledge replicate industrial fault benchmark replicate fault conduct empirical investigate effectiveness exist industrial debug improve introduce trace visualization technique distribute industrial microservice debug improve employ trace visualization technique strategy finding intelligent trace analysis visualization combine trace visualization improve fault localization employ data driven recommendation visual exploration comparison trace introduction microservice architecture architectural style approach develop application suite service communicate lightweight mechanism http resource api microservice architecture allows microservice independently developed deployed upgraded particularly suitable infrastructure frequent update component nowadays chosen migrate monolithic architecture microservice architecture core business increasingly built microservice architecture typically microservice microservices netflix online service microservices handle billion api request tencent wechat accommodates service machine microservice complicate due extremely grain complex interaction microservices complex configuration runtime environment execution microservice involve microservice interaction interaction asynchronous involve complex invocation chain netflix online service involves billion service invocation per percent internal microservice invocation amazon com microservice invocation situation complicate dynamic microservices microservice physical instance container manage microservice discovery service service discovery component docker swarm instance dynamically destroyed accord requirement runtime invocation microservice trace accomplish instance therefore address architectural challenge asynchronous communication cascade failure data consistency discovery authentication microservices complexity dynamism microservice unique challenge debug developer concurrent behavior microservices understand interaction topology effective understand debug distribute trace visualize execution however microservice complex dynamic traditional distribute lack correspondence microservices node distribute microservice instance dynamically destroyed therefore debug visualization distribute microservice spite prevalence importance microservices exists limited research microservices software engineering research community conference exist research focus topic microservices deployment verification composition architecture recovery legacy migration runtime adaptation exists research fault analysis debug microservice moreover exist research microservices usually microservices microservices lack non trivial source benchmark microservice gap research community industrial really appeal practitioner researcher develop microservice infrastructure emulate production environment typical microservice application repeatable focus empirical gap pursue relevant research microservices conduct industrial survey fault analysis typical fault microservice debug challenge developer survey technique limited developer challenge microservice debug conduct empirical investigate effectiveness exist industrial debug facilitate debug visualization enable valuable reflect benchmark research community develop medium benchmark microservice TrainTicket within knowledge complex source microservice upon replicate representative fault industrial survey benchmark replicate fault empirically evaluate effectiveness execution trace visualization microservice debug extend debug visualization distribute summarize finding direction future research contribution conduct survey industrial microservice report fault analysis typical fault debug challenge developer develop medium benchmark microservice complex source microservice within knowledge replicate representative fault upon replicate fault benchmark research community conduct relevant research microservice fault analysis debug potentially relevant research microservices experimentally evaluate effectiveness execution trace visualization microservice debug propose visualization analysis strategy microservice debug extend benchmark earlier poster introduce microservices characteristic interaction mode replicate fault release source project easily integrate benchmark detail industrial survey empirical along source code source benchmark replicate fault replication package article structure background knowledge microservice architecture describes industrial survey introduces benchmark replicate fault effectiveness evaluation execution trace visualization replicate fault discus observation suggestion discus threat validity review related concludes outline future background microservice architecture arises broader service orient architecture soa focus  lightweight microservices application agile devops decentralize data management governance microservices migration monolithic architecture microservice architecture architectural complexity code interaction microservices interaction microservices implement network communication microservice invocation synchronous asynchronous synchronous invocation harmful due multiplicative downtime asynchronous invocation implement asynchronous invocation message queue former performance whereas latter reliability user request usually involves microservice invocation microservice fail microservices accordingly failure microservice invocation account microservice architecture series infrastructure technique microservice development framework boot  facilitate development microservice functionality client database integration externalize configuration cache microservice widely employ container docker deployment portability flexibility efficiency microservice container organize manage cluster configuration management service discovery service registry load balance runtime infrastructure framework mesos kubernetes docker swarm unique characteristic microservices challenge exist debug technique exist debug technique breakpoints manual inspection intermediate program profile however technique ineffective microservices instance due concurrency breakpoint execution intermediate program furthermore microservice contains asynchronous trace multiple breakpoints across trace considerably challenge debug monolithic besides inspect intermediate program equally important comprehend microservices interact debug profile similarly becomes complicate due dynamism microservices addition exist fault localization technique ineffective microservices program slice fault localization identify program statement irrelevant faulty statement developer investigate fault remain statement program slice microservices complicate slice interleavings spectrum fault localization computes suspiciousness statement information execute passing execution fail execution rank statement accordingly developer focus highly suspicious evidence technique highly concurrent dynamic microservices similarly related fault localization technique mainly sequential program statistic fault localization machine recent fault localization extend concurrent program distribute thread node execution information fault exist technique apply technique microservices highly non trivial container instance microservices constantly difficulty overly fragment industrial survey precisely understand industrial survey proceed collection typical fault understand microservice debug participant identify initial candidate survey local technical community microservice industrial conference online article blog candidate recommend candidate colleague candidate invite engineer interview criterion candidate industrial software development microservice development invite engineer accept invitation participant feedback microservice participant representation traditional internet non microservice internet service enterprise microservices role development technical role managerial role information participant participant microservices participant survey participant survey participant traditional fortune internet non categorize internet microservices consumer via internet enterprise employee microservices majority involve microservices participant respective junior software engineer staff software engineer senior software engineer architect technical manager managerial manages development project schedule conduct interview participant participant recall microservice familiar subsequent feedback participant introduces role development project interview discus participant around apply microservice architecture migrate exist monolithic developed partition microservices technique program develop challenge maintenance afterwards participant recall fault handle fault participant fault symptom fault reproduce fault microservices involve debug spent debug technique interview whenever conduct communication participant via email phone clarify detail survey internet traditional adopt microservice architecture independent development deployment diversity development technique adopt microservice architecture survey adopt microservice architecture migrate exist monolithic remain project microservice architecture comparatively independent business migration incomplete microservices monolithic module decision migration highly business effort feedback response mainly participant manager architect perspective instead project perspective architectural microservice partition business model express strategy ensures stable boundary responsibility microservices survey java ruby python node participant runtime verification debug challenge heavily runtime monitoring trace microservice manager architect interested runtime monitoring trace verify conformance microservice developer interested debug debug remains challenge almost participant analyze debug fault fault participant report fault reporter symptom detailed description fault along source code source benchmark replicate fault replication package developer fault grouped category symptom functional non functional internal interaction environment microservice fault report participant fault category functional fault malfunction service error incorrect non functional fault influence quality service performance reliability fault functional incorrect runtime failure response non functional unreliable service response internal fault internal implementation individual microservices internal fault mistake calculation consumer price index cpi implement microservice interaction fault interaction multiple microservices fault incorrect coordination microservice interaction lack sequence asynchronous invocation multiple message delivery microservices incorrect behavior microservice unexpected another microservice environment fault configuration runtime infrastructure influence instance microservice instance cluster microservices improper configuration docker cluster  service respectively fault influence availability stability performance functionality related microservices characteristic fault microservice discus participant report fault microservice architecture criterion fault monolithic architecture discussion internal fault service environment configuration fault microservice monolithic interaction fault cluster environment configuration fault microservice debug survey summarize exist debug microservice identify maturity technique debug analyze effectiveness debug report fault debug survey participant analysis fault analysis debug debug usually trigger failure report symptom possibly reproduction failure fault fix debug typically initial understand IU developer initial understand report failure failure report examine production environment understand failure understand preliminary judgement reproduce failure debug environment setup ES developer runtime environment reproduce failure initial understand failure environment setup preparation virtual machine deployment related microservices configuration related microservice instance debug developer usually simplify environment virtual machine microservices developer directly production environment failure debug skip failure reproduction FR prepared runtime environment developer execute failure scenario reproduce failure developer usually data reproduce failure preliminary failure important subsequent failure identification FI developer identify failure symptom failure reproduction execution symptom error message microservice instance abnormal behaviour microservice response developer fault scoping FS developer identify suspicious location microservice reside implementation individual microservices environment configuration interaction microservices fault localization FL developer localize failure identify suspicious location suspicious location developer confirm involves fault failure identify precise location fault fault fix FF developer fix identify fault verify fix rerun related sequentially execute subsequent successfully developer environment reproduce failure skip experienced developer skip environment setup failure reproduction fault production environment verify fault fix partial execution strategy maturity debug technique debug categorize maturity maturity debug analysis developer analyze execution fault execution information specific execute parameter variable intermediate extra context information execution thread analysis debug monolithic logj capture execution fault developer manually examine successful debug depends heavily developer overall architecture error prone microservices fault technology stack visual analysis execution structure visualize fault localization developer flexibly retrieve specific execution interested regular expression sort candidate accord specific strategy debug execution aggregate visualize statistical retrieval visualization usually combine developer interactively drill data execution fault abnormal execution microservice developer histogram distribution specific abnormal examine related execution visual analysis developer centralize execution node information microservice instance execution analysis highly depends collection retrieval visualization commonly toolset elk stack  collection elasticsearch index retrieval  visualization visual trace analysis developer analyze trace execution trace visualization trace execution scenario compose user request trace user request trace consists user request ID user request user request adopt trace framework creates unique user request ID along request directly indirectly invoked microservice invoked microservice user request ID developer visualization analyze user request microservice invocation chain extract trace identify suspicious microservice invocation execution microservice invoke multiple microservices parallel visualization usually organize microservice invocation chain structure visualization vertically nest structure microservice invocation horizontally duration microservice invocation analysis highly depends advanced microservice execution trace visualization commonly toolset  zipkin survey implement trace visualization specific implementation technique microservice architecture visual analysis fault analysis flexible retrieval filter execution visualize statistic microservice execution variable execution reveal microservice execution suspicious microservice execution developer easily exclude execute failure occurrence statistic however interaction related fault developer understand microservice execution context microservice invocation chain visual trace analysis improves visual analysis embed analysis context trace developer trace scenario trace failure scenario identify specific microservice execution mismatch analysis fault analysis cannot fault report developer manually investigate execution code usually failure trigger location examine backwards suspicious microservices code microservices effectiveness analysis analyze effectiveness debug maturity debug consume fault fault microservices involve fault MS maturity actually adopt maturity debug consume debug individual average MS average consume entire debug individual analysis debug industrial survey fault maturity debug adopt developer developer analysis equip visual trace analysis moreover developer combine adopt visual trace analysis visual analysis analysis examine detail consume debug individual obtain description participant interview participant estimate validate estimation participant confirm estimation colleague examine debug bug assignment resolution issue average fix fault increase microservices involve fault microservice microservices microservices microservices fault overall sum spent usually simultaneous execution multiple confirm suspicious location fault fault localization developer simultaneously conduct fault scoping identify suspicious location advantage visual analysis visual trace analysis obvious interaction fault average developer fault adopt visual trace analysis visual analysis analysis respectively initial understand fault scoping fault localization consume depth understand analysis advantage visual trace analysis obvious average initial understand visual trace analysis visual analysis analysis respectively developer skip environment setup failure reproduction easily identify failure symptom user interface exception developer skip failure identification fault scoping identify potential location fault failure symptom accord feedback participant visual trace analysis visual analysis useful depends faulty developer preference benchmark fault replication survey clearly reveals exist fault analysis debug microservice improve conduct research difficulty researcher lack benchmark due complexity realistic microservice benchmark TrainTicket empirical TrainTicket fault report survey replicate replicate fault valuable benchmark research community conduct relevant research microservice fault analysis debug relevant research microservices TrainTicket typical ticket functionality ticket enquiry reservation payment user notification microservice principle interaction mode synchronous invocation asynchronous invocation message queue contains microservices related business logic without counting database infrastructure microservices program java python node detailed description along source code source benchmark replicate fault replication package replicate fault industrial survey fault replicate transfer fault mechanism benchmark replication implementation representative fault description replication implementation fault replication package fault associate asynchronous task message asynchronously without message sequence replicate fault cancellation TrainTicket asynchronous task additional sequence task however task delayed abnormal status failure reliability improper configuration jvm docker jvm max memory configuration conflict docker cluster memory limitation configuration docker sometimes jvm replicate fault ticket microservices involve revise resource consume revise microservices deployed docker cluster conflict configuration microservices sometimes unavailable performance improper configuration secure socket layer ssl apply microservices frequent ssl offload granularity slows execution related microservices replicate fault apply faulty ssl configuration microservice TrainTicket user request service ticket reservation response reliability improper usage thread pool microservice thread pool multiple service request thread pool exhaust due load service request another service request fail due timeout replicate fault ticket reservation service serf ticket ticket load ticket thread pool service exhaust ticket request service fail due timeout incorrect parameter passing along invocation chain replicate fault cancellation vip user cancel ticket login token redis memory data involve microservices token fault user unexpectedly ticket refund rate unexpected output microservice business processing replicate fault ticket ticket service implement apis respectively ticket ticket api ticket sometimes return unexpected output correctly handle ticket fail fault occurs asynchronous update data sequence bill BOM update unexpected incorrect user strict mode BOM service rebuilt BOM negative replicate fault cancellation microservices payment service cancel service asynchronously database due sequence microservices sequence incorrect user strict mode service incorrect eventually unexpected output microservice replicate fault ticket introduce   ticket reservation service instance departure destination administrator examine ticket administrator examine correspond ticket reservation service instance without departure destination ticket reservation request   ticket reservation service access request thread twice without instance request deny unexpected output ticket return error precede fault development replication fault repository researcher repository easily fault faulty version TrainTicket multiple fault empirical empirical TrainTicket replicate fault investigate effectiveness exist industrial debug fault develop microservice execution trace trace visualization strategy fault localization debug visualization distribute investigate improve effectiveness debug interaction fault graduate familiar TrainTicket comparable microservice development developer conduct debug independently fault developer fix fault failure report developer debug comparison randomly developer fault developer fault developer debug developer cannot fail debug industrial debug investigate effectiveness debug maturity qualitative analysis quantitative analysis respectively fault developer debug maturity maturity analysis developer command grab analyze visual analysis developer elk stack  collection elasticsearch index retrieval  visualization visual trace analysis developer elk stack zipkin debug qualitative analysis qualitatively debug qualitative comparison debug snapshot analysis capture container microservice service developer identify suspicious fragment refund rate percent predefined vip refund rate regard calculation refund rate potential fault location shortage analysis lack context microservice invocation developer analyze understand context user request invocation chain snapshot visual analysis histogram average refund rate instance related microservices service  service virtual machine correspond refund service ticket refund failure symptom ticket refund rate developer average refund rate VM developer refund rate percent regard calculation refund rate potential fault location analysis visual analysis aggregate statistic variable quality attribute response developer identify suspicious microservices instance however lack context user request invocation chain analysis microservice interaction snapshot visual trace analysis entire trace cancellation nest invocation microservices consume invocation developer ticket cancellation invokes service  service config service route service analyze config service suspicious refund rate percent ticket cancellation calculate refund rate regard calculation refund rate config service potential fault location fault localization precise localization analysis visual analysis visual analysis visual trace analysis understand microservice execution context user request invocation chain quantitative analysis debug developer skip skip fault easily identify fix analysis fail developer fails debug fails fails analysis debug industrial debug developer fail industrial non functional environment fault developer easily fix fault analysis internal fault fault trend reduce debug employment debug visual visual trace analysis fault interaction fault benefit debug industrial survey initial understand fault scoping fault localization consume environment setup failure reproduction sometimes skip environment setup failure reproduction varies employ debug accord feedback developer simplest failure reproduction initial understand accuracy initial understand influence environment setup failure reproduction debug improve trace visualization trace visualize potentially fault analysis debug microservice fault analysis debug microservice investigate effectiveness distribute debug technique microservice debug trace visualization approach ShiViz debug visualization distribute visualizes distribute execution interactive diagram explicitly capture distribute ShiViz pairwise comparison trace highlight difference distribute node trace description highlight node trace ShiViz selection trace comparison user request trace specific user request request ID trace visualization ShiViz node node timeline vertical timeline partial rhombus highlight difference trace click detail rhombus trace visualization ShiViz trace visualization ShiViz pairwise comparison suspicious node microservice debug execution information service user request ID invoked description node treat microservice distribute node leverage ShiViz visualize trace microservices transform trace format ShiViz however visualize microservice trace microservice node microservice instance container dynamically destroyed container moreover instance assign handle microservice invocation uncertain therefore microservice instance container cannot treat node trace visualization propose visualization strategy microservice trace microservice node service analysis instance microservice treat node instance microservice aggregate node microservice node analysis instance microservice predefined variable expression treat node instance microservice aggregate node technique depends predefined variable expression microservice trace execute microservice scenario user request ticket query request trigger button click web trace user request trace user request series microservice invocation furthermore microservice invocation involve multiple execution microservice instance invocation request therefore execution trace execution attach user request ID request ID microservice invocation ID invocation ID implement java invocation  filter interceptor inject trace information caller http header  inject information request ID invocation ID microservice instance ID IP address along invoked microservice caller respectively information http request callee message queue message channel interceptor inject interaction queue data trace information microservice instance trace central visualization strategy leverage ShiViz diagnose microservice fault pairwise comparison trace characteristic ShiViz superior previous microservice trace visualization elk stack zipkin debug methodology trace visualization strategy define debug methodology empirical debug distribute rationale assumption fault reveal failure trace correspond trace another failure trace debug methodology fault trace execute scenario parameter trace failure trace trace  failure trace   comparison   user request scenario ticket series user request ticket query selection passenger selection request trace separately selection user request attach readable label ticket query request ID comparison obtain diff DR multiple consecutive trace   user request confirm DR trace confirm DR identify fault reveal purpose investigate trace debug benefit improve trace visualization therefore fault accord criterion interaction environment fault internal fault benefit trace analysis debug visual trace analysis fault fault developer debug fault industrial debug fix fault qualitative analysis benefit debug obtain improve trace visualization initial understand developer impression overall difference trace failure trace diff developer directly identify suspicious fault location initial understand environment setup failure reproduction failure identification indirectly benefit analysis accurate initial understand failure fault scoping fault localization directly benefit analysis identify diff fault fix indirectly benefit analysis verification fault fix service analysis faulty microservice invocation incorrect handle unexpected output apis microservice developer difference rhombus invoked apis although invoked microservices correspond comparison failure trace involves difference identify potential fault location service analysis faulty microservice invocation service analysis faulty interaction sequence coordination asynchronous invocation structure developer identify correspond trace failure trace respectively trace difference comparison failure trace identify difference potential fault location service analysis faulty interaction sequence service debug conduct service analysis difference failure trace trace developer analysis refine comparison trace introduce variable expression understand developer variable ticket service administrator examine departure destination administrator examine ticket processing thread pool limit pool exceed administrator examine developer expression instead variable information  administrator examine developer analysis node ticket service annotate combine difference node failure trace trace identify highlight rhombus developer examine comparison failure trace ticket service administration thread pool comparison preliminary evidence administrator examine ticket service relevant fault highlight candidate fault reveal service analysis service analysis developer introduce variable expression comparison price node visualize trace developer gradually adjust strategy attempt combination variable expression heuristic apply identify combination instance desirable variable expression likely built static variable singleton member variable temp storage redis successful analysis tactic failure trace trace difference fault reveal difference description invoked difference fault reveal involves interaction sequence node multiple difference execution multiple fault reveal multiple request difference execution multiple user request tactic involve difference node interaction sequence tactic tactic analysis fault tactic combine debug fault fault involve multiple fault reveal difficulty debug increase analysis trace difference scope empirical debug improve trace visualization relatively involves complex interaction user request due extensive usage asynchronous interaction microservice processing user request correspond interaction user request likely fault introduce due erroneous coordination processing user request trace analysis involves across multiple user request request interleave cannot effectively analyze exist visualization technique unless difference failure trace reflect trace comparison request developer spends seek trace analysis involves across multiple user request request ShiViz easily distinguish effectively analyze consume quantitative analysis analysis debug improve trace visualization fault developer fail fail visual trace analysis developer succeed visual trace analysis environment fault non functional functional suggests debug fault cannot benefit trace analysis fault developer achieve improve debug effectiveness decrease average debug fault interaction fault fault fault localization initial understand failure reproduction benefit analysis reduce percent respectively visual trace analysis detailed analysis developer fault visualization strategy node user request UR fault reveal identify analysis FR fault reveal analysis FE analysis succeed identify fault reveal indicates successfully identify indicates fail analysis indicates developer fail identify debug combination failure trace involves node service service belong user request trace user request separately successful analysis identifies fault reveal dozen fault service analysis effectively identify fault reveal fault service analysis identify fault reveal developer successfully identify issue unsuccessful developer fail fault reveal environmental fault sufficiently debug methodology finding fault environmental setting benefit trace visualization related microservice interaction treat microservices microservice node improve effectiveness microservice debug debug visualization distribute difficulty trace visualization mainly definition microservice microservice microservices variable expression highly depends developer achieve effective efficient fault analysis identify reveal fault challenge trace visualization node industrial microservice microservices trace node visualization analysis infeasible alleviate aspect trace visualization technique zoom node cluster developer focus suspicious scope node cluster adaptively cohesive node reduce node examine progressively disclose information fault localization technique spectrum fault localization delta debug combine visualization analysis microservice debug combination suspicious scope trace apply statistical fault localization microservice invocation combination code fault localization code within specific microservices complexity microservice interaction dynamic infrastructure debug microservices data driven instance combine expertise machine intelligence visual exploration comparison trace advantage amount data runtime monitoring historical analysis critical suggestion guidance visual exploration comparison trace suspicious scope trace sensitive variable differentiate failure trace probabilistic data analysis recommend historical fault trace suggestion guidance developer dig trace relevant variable trace comparison visualization action feedback improve suggestion guidance threat validity threat external validity limited participant fault industrial participant microservice characteristic fault industrial participant complex fault fault threat internal validity industrial survey accuracy information debug participant information completely precise historical information accurate threat external validity empirical mainly representativeness benchmark currently complex heterogeneous survey industrial despite complex source microservice within knowledge debug obtain valid industrial threat internal validity empirical implementation fault understand understand inaccurate replication fault fully capture essential characteristic fault uncertainty runtime environment access load network traffic fault behave differently environment setting debug strategy difference developer participate difference contribute difference debug related researcher review development status microservice research systematic mapping literature review systematic mapping architecting microservices perspective publication trend focus research potential industrial adoption conclusion research architecting microservices initial phase balance involvement industrial academic author promising systematic mapping microservice architecture focus architectural challenge microservice architectural diagram involve quality requirement review development service microservices future challenge initial requirement candidate microservice benchmark research software architecture evaluate source microservice requirement none mature community research benchmark source benchmark promising candidate vacancy industrial survey supplement previous systematic mapping literature review research debug concurrent program distribute systematic mapping debug concurrent multicore software decade survey recent technique debug distribute conclusion debug distribute infancy propose technique visualize execution distribute schedule network interrupt simulation visualization platform incorporates distribute debugger discus feature debug challenge distribute debug visualization ShiViz empirical investigates extends contrast previous research focus debug microservice conclusion industrial survey conduct fault analysis typical fault microservice industrial debug challenge developer survey developed medium benchmark microservice complex source microservice within knowledge replicate representative fault industrial replicate fault basis empirical microservice debug trace visualization technique strategy trace visualization analysis debug various fault involve microservice interaction finding intelligent trace analysis visualization combine technique trace visualization improve fault localization employ data driven recommendation visual exploration comparison trace industrial microservice complex industrial highly heterogeneous microservice interaction invocation message queue remote procedure socket communication moreover industrial highly complex infrastructure auto microservice cluster service mesh dedicate infrastructure layer service service communication complexity heterogeneity additional challenge execution trace visualization future extend benchmark reflect characteristic industrial microservice explore effective trace visualization technique combination fault localization technique spectrum fault localization delta debug microservice debug moreover explore technology independent inject trace information service invocation via service mesh  istio