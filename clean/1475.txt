formalism cyclic model semantic framework model combine sequence observable action passing discrete specify reactive robotic implementation relation formally define notion correctness SUT respect specification aim devise extension classical ioco implementation relation available variant ioco suitable cyclic model defines implementation relation encapsulate discrete account action model perform refuse addition define relation alternative characterisation relation appropriate conservative extension trace containment finally derivation algorithm limit keywords model implementation relation cyclic introduction cyclic cycle sensor input perform calculation actuator output correspond model typically combine action behaviour sequence passing importance model relevance embed robotics model statecharts semantics aim discus define formal automate approach standard robotics development typically robotic model machine afterwards simulation model validate model simulation model developed relevance contrast analysis partially abstract fundamental role cyclic treat citizen simulation discrete slot contains sequence action robotic expand manufacturing healthcare transport assistance sale increase fifth trend steady accord UK government report global robotics autonomous billion described stage project robotic motivation foundational theory automate formalism syntactically simplest capture feature syntactic simplicity beneficial facilitates formal formalism advantage corresponds operational semantics model overall motivate factor robotic ubiquitous safety critical utmost importance increase confidence correctness become widely recognise academia formal increase reliability developed software software validation technique combination formal promising approach analyse behaviour factor motivate although mainly manual informal activity formal approach define apply formal approach usually rely model model label transition LTSs model label transition lts normal assume SUT behaves unknown lts minimal hypothesis iso IEC  SC WG ITU SG involves LTSs unknown respect relation LTSs describes correctness usually formalise implementation relation literature myriad implementation relation LTSs difference strongly depends observational observer introduce framework specify validate robotic described cyclic model ultimate goal technique development robotic efficient effective remove manual error prone activity enumerate contribution introduce formalism tockLTS specify cyclic model tockLTS formalism corresponds underlie operational semantics tock csp  chapter variant csp algebra semantics RoboSim define simulation model robotics tockLTS instead RoboSim simpler syntax relatively easy adapt framework simulation cyclic semantics define implementation relation notion correctness notion correctness useful user framework suite observation framework assume action performs passing addition notion refusal observation cannot perform action previous refusal distinguish distinct behaviour otherwise identical implementation relation related via containment alternative characterisation define implementation relation contribution consists framework implementation relation framework correspond derivation algorithm algorithm SUT pas algorithm SUT faulty algorithm exhaustive limit SUT faulty fails return generation algorithm finite suite guaranteed fault detection effectiveness however limitation inevitable unless introduces finite fault model restricts fault approach ioco implementation relation introduce discus choice formalism motivate factor previously developed within robotics project aim formalism familiar roboticists formal semantics generation formal verification development  uml statecharts colleague robotics roboticists automaton familiar  model mapped RoboSim simulation interested within simulation RoboSim however theory RoboSim syntax theory complex theory syntactically simplest formalism capture semantics RoboSim model addition RoboSim model mapped csp specification formalism inspire csp discrete tock csp  chapter formalism essentially mirror operational semantics tock csp crucial difference interested semantics reflect role input output theory developed RoboSim model basis derive suitable model formalism propose formalism express semantics model  RoboSim theory developed apply interestingly cyclic model finite machine FSMs mealy machine finite transition transition input output theory generation technique associate FSMs alternative FSMs unfortunately FSMs transition necessarily involve input output arbitrarily sequence input output sequence input sequence output input controllability sequence transition mealy machine addition transition structure cycle infinitely transition potentially infinitely however situation FSMs correspond theory generation algorithm benefit algorithm generate guaranteed fault fault model revise extend enhance version recent briefly contribution respect conference detailed rigorous development implementation relation previously trace refusal addition implementation relation situation input define specification alternative capture context incompleteness handle additional variant implementation relation previously relate define framework implementation relation associate automate generation algorithm limit organise briefly discus context framework relevant related introduce definition concept implementation relation around trace inclusion defines observation notion refusal trace introduce implementation relation refusal trace strictly correspond relation alternative characterisation implementation relation explores generation finally conclusion future technical context related develop robotic model described developed context  allows model described familiar roboticists  model automatically mapped simulation model RoboSim consistent model simulation model formal semantics automatically analyse formal semantics RoboSim mapping RoboSim model variant csp tock csp  chapter operational semantics lts benefit approach analyse semantics RoboSim model formal methodology available csp previously explain formalism LTSs actually slight generalisation therefore framework directly apply development robotic distinguish input output role implementation relation classically implementation relation ioco difference classical definition ioco implementation relation relation discrete interested refusal assume SUTs input enable concern assume SUT input enable impose restriction SUT react input tester assumption SUT input enable observation SUT input however input enable deliberate option  webpage simply available instance option available editor author journal manuscript context autonomous switch sensor addition sensor fail convert model input enable however model appropriately model SUT input disabled generation perspective introduces redundancy approach absence input denotes input define relaxed implementation relation adapt ioco approach undefined input option regard observational user interact observer action participates however increase capability observer situation refusal action action cannot participate scope algebra approach subtle difference respect notion classical ioco refusal  cannot evolve via internal action addition cannot output without input observation refusal typically situation environment chooses engage action composition environment SUT deadlock deadlock usually timeout  classical ioco observation deadlock refusal precede duration action passing aware alternative approach model feature combination urgent output refusal discrete exactly combination model interested formal theory model development generation algorithm ultimately generation execution important variant ioco refusal input enable depart addition refusal stable implication specifically internal choice output equivalent external choice input obtain semantically algebraic notation action precede denote respectively input output denotes internal action notion input enable restrictive input enable none notation input enable finally ioco account cannot ordinary action neither input tester output SUT SUT cannot variant ioco typically  version   observation version  discrete situation sufficient prefer native discrete  addition previous notion refusal formalism developed within context formal correspond implementation relation however combination feature model interested develops novel theory associate implementation relation previous ioco  background model define model notation along fulfil cyclic model previously explain motivate model embed robotics automotive cycle sensor input perform calculation actuator output correspond model typically combine action behaviour sequence passing model robotics  RoboSim model simulation package variation statecharts inspire previous rescue application drone deliver relief target location model described  complex comprise module robotic platform controller excerpt machine model explanatory deliver return  notation allows specify entry exit action transition action operation transition model trigger  target operation action pause explain formalisation consistent model model within domain aim develop formalisation correspond technique relatively embed interestingly  classical assumption implementation relation available version  suitable image KB image machine model rescue drone trace automaton observation sequence empty sequence denotes finite sequence denotes infinite sequence interact environment input output throughout disjoint input output alphabet denote action untimed model automaton automaton theory contrast standard notion lts concept definition automaton automaton tuple countable non empty initial countable visible action transition relation internal action automaton action sometimes alternative notation transition express exist transition relation extend definition automaton visible action sequence visible action image KB image distinguish model initial identify initial usually instead automaton defines finite sequence definition automaton define image KB image model model lts action denotes passing action tock consistent tock csp  chapter definition  trace label transition tock tockLTS tuple countable non empty initial countable disjoint input output respectively visible action transition relation internal action tock action denote passage denote tockLTS input output definition relation definition difference therefore omit trace define image KB image additional notation specifically compute perform sequence action define predicate refuse action definition tockLTS label define notion progress cannot impossible advance urgency internal action output consistent cyclic model zeno behaviour infinite sequence action finite finally determinism passing perform internal action definition urgency zeno behaviour determinism tockLTS progress exists urgent internal action output zeno behaviour exists infinite finitely tock action determinism implies previously input exists outgo transition input conceptually requirement essentially cannot weaken assumption progress cyclic model input development obligation demonstrate context SUT ensures composition specification environment cannot formal representation tockLTS  machine denote tockLTS initial action essentially trigger transition  transform input  origin action sequence action transform output takeoff  transform action involve delivery delivery sequence action simulate passing arbitrary output action additional capture complex transition behaviour specifically split  transition sequence tockLTS transition similarly transition simulate entry action associate transform transform deliver return transform respectively illustrate concept definition compute consequently concern refusal regard trace model worth mention regard visible tock action execution action sequence however correspond trace consist visible tock action easy satisfies definition model determinism urgent internal output action transition depart urgency longer similarly additional transition violate determinism progress transition easy zeno behaviour however transition replace transition tockLTS infinite described action therefore exhibit zeno behaviour tockLTS proof easily absence zeno behaviour progress assumption proposition tockLTS exists infinite implementation relation trace environment trace visible action cannot refusal associate implementation relation simplest simply behaviour trace SUT trace specification definition  conforms trace inclusion denote immediate definition proposition trace inclusion relation reflexive transitive symmetric  situation trace specification input trace specification trace SUT trace inclusion SUT cannot input define context input undefined specification corresponds input input undefined correspond requirement correspond option interface  access sensor however input specify denotes situation behaviour situation trace inclusion implementation relation define additional implementation relation interpret input undefined slightly consistent untimed implementation relation approach trace specification define behaviour SUT receives simply specification define behaviour definition  exists prefix immediate definition proposition relation reflexive symmetric   centre depict specification anything SUT concern subsequent evolution trivial however obvious implementation relation response input specification define specification definition tockLTS completion denote tockLTS zeno behaviour cannot perform theoretical alternative characterisation relation tockLTS drone model described completion transition explain definition accept input transition label input action remain transition transition input already accepted consists loop label visible action proof easily extends accept undefined behaviour exactly role respect extend latter potential behaviour unspecified input theorem tockLTS alphabet undefined input manner untimed implementation relation untimed input output transition undefined input literature finite machine however implementation relation perspective response input trace define specification initial define adapts trace inclusion approach input specify definition  exists prefix naturally cannot completion specification implementation relation behaviour trace however convert equivalent deterministic tockLTS adaption classical transformation non deterministic deterministic finite automaton tockLTS denote  version trace definition tockLTS denote automaton automaton tockLTS satisfy requirement tockLTS urgent output output tockLTS transition  automaton source non determinism model due transition relatively straightforward construct action obtain simply input specify trace theorem tockLTS alphabet automaton necessarily tockLTS construct principle correspond infinite bound approach partial construction however relatively assume definition tockLTS finitely branching finite finite trace correspond finite proof easily induction proposition tockLTS finitely branching finite theorem tockLTS alphabet proof immediate definition specification tockLTS centre tockLTS relation implementation anything however trace relate definition exists prefix implies exists prefix  depict essentially cannot specify behaviour contrast specify behaviour trace therefore previous implementation relation unspecified input theorem countable disjoint input output respectively input enable statement equivalent trace implementation relation benefit nice relatively define addition correspond inclusion formal concept formal theory however potential strengthen refusal related implementation relation intuitively discus trace inclusion argument apply implementation relation define fragment model model conform trace inclusion however distinguish conformance output cannot environment choice output exactly correspond internal choice available user tester cannot perform equivalent issue tester user input available option  machine correspond internal choice input available implementation relation satisfies refusal trace extend notion trace refusal refusal trace define refusal trace tockLTS finally develop approach tockLTS transform automaton describes refusal trace define implementation relation refusal trace express inclusion recall interested model cyclic semantics sequence action occurs without model passing tock action refusal typically tester willing engage action composition tester SUT  deadlock timeouts observation refusal refusal immediately tock action output internal action urgent refusal stable definition stable tockLTS stable action denote refusal denote refusal extend transition relation tockLTS refusal definition refusal tockLTS constitutes observation refusal stable model cannot perform action belonging previously due urgency output stable definition observation refusal implies therefore obtain proposition tockLTS illustrate refusal model easily checked stable addition refusal stable tockLTS model denote refusal stable exactly transition relation extend loop refusal transition definition implies refusal action refuse action refuse therefore maximal refusal undesirable clearer implementation relation refusal refusal trace tockLTS already define recall however refusal immediately tock action therefore obtain potential refusal trace satisfy refusal trace refusal trace cannot refusal observation refusal prefix definition refusal trace action define refusal trace tockLTS refusal trace define image KB image refusal stable explain previous refusal trace trace inclusion corresponds relation define automaton correspond lts benefit standard algorithm formal theory particularly useful deterministic finite automaton efficient algorithm standard inclusion trace inclusion generate automaton trace exactly refusal trace tockLTS explore approach achieve fragment model refuse action simply loop transition refusal however loop action inclusion loop refusal trace refusal trace refusal action image KB image refusal immediately duration tock outline loop transition label refusal action automaton transition transition transition label notion model automaton tockLTS formally define automaton refusal definition tockLTS subset evolve perform define denote automaton previous construction theorem tockLTS proof subset slightly specifically proof induction empty sequence immediate inductive hypothesis sequence suppose definition sequence cannot refusal refusal inductive hypothesis addition construction refusal inductive hypothesis construction implementation relation refusal previous define notion refusal trace extend previous implementation relation implementation relation refusal trace trace definition countable disjoint input output respectively conforms refusal trace inclusion denote examine implementation relation alternative treat unspecified input relation model maximal refusal implementation relation fragment model cannot refusal trace stable therefore assume refusal trace conforms refusal trace inclusion converse external choice input implementation internal choice input fragment cannot restrict compute maximal refusal refusal trace correspond longer trace inclusion immediate theorem theorem countable disjoint input output respectively define alternative implementation relation approach corresponds behaviour unspecified input however behaviour refusal trace trace definition prefix refusal trace definition countable disjoint input output respectively exists prefix exists approach corresponds implementation relation definition countable disjoint input output respectively exists prefix implementation relation refusal trace proof equivalent correspond trace theorem theorem countable disjoint input output respectively implementation relation coincide specification input enable theorem countable disjoint input output respectively input enable statement equivalent implementation relation define trace inclusion introduce proof proposition countable disjoint input output respectively however converse proposition countable disjoint input output respectively exist proof sufficient  depict therefore conforms trace inclusion contrary therefore conform refusal trace inclusion summarise therefore proof tockLTS model input specify affected therefore proposition countable disjoint input output respectively exist therefore obtain implementation relation refusal trace strictly correspond implementation relation trace theorem countable disjoint input output respectively converse converse converse previous refusal trace powerful implementation relation obtain trace environment user refusal trace refusal action option available screen insufficient trace inclusion variant user SUT faulty respect specification trace finally refusal trace inclusion express containment automaton immediate consequence theorem capture behaviour refusal trace inclusion theorem countable disjoint input output respectively alternative characterisation observer alternative characterisation implementation relation around refusal trace inclusion implementation relation correspond ability environment tester distinguish typically observation SUT observation interact specification define notion observer context observer interacts tockLTS alternative equivalent characterisation refusal trace inclusion classical approach ioco action observer denote observation refusal ioco previously explain refusal associate inability model perform output denote model observer tester define notion observer observer automaton additional constraint satisfied definition observer countable disjoint input output respectively observer automaton satisfies exists transition action available denote observer input output observer cannot perform internal transition rationale essentially ensures refusal standard tester output indicates pas output available finally observation refusal observer tockLTS drone model observer addition graphical representation capture observer however illustrate observation refusal label transition passing transition acceptance output definition synchronise parallel communication countable disjoint input output respectively composition observer model denote automaton define exist exist exists observation observer denote image KB image composition evolve via stable tockLTS  urgent output internal action definition discard performance composition remain naturally ensures composition observer previous tockLTS model proposition countable disjoint input output respectively observer prefix refusal trace refusal trace refusal refusal trace refusal immediate proposition theorem countable disjoint input output respectively observer capture observation refusal trace inclusion suitable implementation relation scenario generation framework cyclic specify tockLTS goal specification SUT derive exhaustive suite respect implementation relation suite soundness ensures SUT fails derive SUT faulty conform specification respect chosen implementation relation addition exhaustiveness ensures SUT faulty exists derive fail SUT soundness relatively easy achieve empty exhaustiveness usually SUT bound apply algorithm achieves exhaustiveness limit construct suite fault observation tends infinity achieve exhaustiveness limit recent approach derive suite exhaustive SUT exceed bound approach underlie sequence tends infinity derive suite limit image KB image define framework tester capability detect refusal characterise implementation relation trace relation extend refusal characterisation implementation relation refusal trace relation suite respect task define notion usually input SUT output framework passing difference respect notion ability SUT perform input detects SUT perform input specification faulty behaviour detect similarly capability SUT perform refusal tock action passing difference respect automaton internal action actually deterministic finite induced graph cannot cycle finally notion observer introduce previous related restrictive deterministic finite behaviour input definition countable disjoint input output respectively simply infer context acyclic deterministic automaton finite outgo transition restriction output passing exists input exists input addition non denote fail  exist denote distinguish input apply successfully fail graphically respectively terminate output passing fail terminate fail potential application input SUT potential output passing encompasses situation input belongs input otherwise input indicates fault detect finite capture application verdict finite output infinite compress transition retain finiteness partition transition  pas fail respectively obtain sake simplicity assume uncompressed rely equivalent representation infinite output image KB image compress image KB image faulty implementation  drone model define application SUT essentially compose parallel SUT application fail non definition application countable disjoint input output respectively tockLTS define application denote automaton transition fulfil application fail sequence transition belonging depart belonging otherwise application successful input output respectively correspond faulty implementation application fails sequence perform fail contrary application successful immediate definition lemma countable disjoint input output respectively algorithm derive specification SUT conforms specification respect SUT successfully suite algorithm application algorithm specification non deterministic choice algorithm choice choice input obtain suite clause chosen input output tock specification perform partially traverse image KB image derivation relation definition tockLTS denote derive apply algorithm depict respectively latter fail transition depart label derivation algorithm fail transition available perform computational complexity algorithm therefore restrict finite  assume finite input output transition previously derivation algorithm return algorithm bound therefore computational complexity addition inevitably upper bound fix bound explore complexity input equivalent apply derivation algorithm theorem tockLTS input generate algorithm apply proof application generates transition addition auxiliary storage increase subset auxiliary iteration therefore compute input transition auxiliary construct theorem tockLTS input generate algorithm apply proof application constant simply item constant concern item traverse multi graph induced traverse graph depth breadth strategy vertex operation operation computes belonging item previous therefore compute input consists derive suite indeed respect implementation relation auxiliary proposition tockLTS unique proof induction empty sequence immediate initial construction belongs empty sequence trace inductive hypothesis sequence suppose therefore belonging outgo transition depart therefore induction unexpected input output tock transition label respectively otherwise straightforward belongs perform belonging proposition countable disjoint input output respectively exists proof induction empty sequence immediate built apply initialisation algorithm loop exist option empty inductive hypothesis sequence suppose therefore perform belongs stage addition trace input apply output tock apply belongs independently request theorem soundness countable disjoint input output respectively fails proof fails exists sequence non automaton initial lemma non proposition therefore conclude obtain fails soundness framework allows without compute trace theorem exhaustiveness countable disjoint input output respectively exists fails proof exists sequence exists empty cannot empty proposition trace extend non denote fail application obviously trace trace apply lemma trace therefore fails request corollary completeness countable disjoint input output respectively fail suite respect capture refusal increase slightly modify notion definition action capability existence refusal refusal performance tock action detect faulty behaviour definition countable disjoint input output respectively refusal simply infer context account refusal acyclic deterministic automaton outgo transition restriction output passing exists input refusal exists exists exists transition depart unexpected refusal exist transition depart addition non denote fail  exist denote refusal similarly previous notion refusal potential application input SUT application potential output passing addition SUT cannot perform action option goal SUT unexpected refusal refusal former unique transition label belonging refusal SUT refusal performance tock action obvious corollary previous definition sequence transition perform transition label explicitly proof define application refusal SUT application fail non definition application countable disjoint input output respectively tockLTS refusal define application denote automaton transition fulfil application fail sequence transition belonging depart belonging otherwise application successful difference respect definition fourth clause refusal refuse synchronise account structure offering refusal tock perform action refusal refuse refusal simultaneously evolve lemma countable disjoint input output respectively refusal exists replace occurrence refusal moreover concern membership penultimate action belongs latter exists action belongs otherwise algorithm derive specification SUT conforms specification respect SUT successfully suite algorithm variation account refusal application algorithm specification non deterministic choice algorithm choice option choice input refusal obtain suite algorithm image KB image derivation II relation definition tockLTS denote derive apply algorithm computational complexity algorithm assume finite input output transition input refusal non trivial iteration loop theorem tockLTS input refusal generate algorithm apply proof application generates transition difference respect proof theorem additional transition unexpected refusal apply refusal instead input transition instead similarly increase belonging subset however account transition amount information previous information transition action however framework iteration transition label unexpected refusal therefore transition although refusal subset omit output refusal proposition therefore compute input refusal auxiliary construct theorem tockLTS input refusal generate algorithm apply proof difference respect proof theorem iteration loop compute refusal processing unexpected refusal refusal omit output explain proof theorem iteration additional processing respect iteration previous algorithm therefore compute input refusal involves derive suite indeed respect implementation relation methodology previously auxiliary proposition tockLTS unique exists exists proof action cannot non induction empty sequence immediate initial construction belongs empty sequence trace inductive hypothesis sequence suppose therefore belonging outgo transition depart account observation proof proof proposition unexpected input output tock transition label respectively otherwise straightforward belongs perform belonging action belonging cannot consecutive occurrence refusal refusal tock therefore action belongs cannot refusal tock occurrence action belonging sequence perform conclude moreover construction trivially proof obvious adaption proof proposition therefore omit sequence refusal trace proposition countable disjoint input output respectively exists theorem soundness countable disjoint input output respectively fails proof fails exists sequence non automaton initial possibility cannot action belonging transition label action lemma refusal refusal obtain non apply proposition possibility viable belonging therefore conclude apply lemma exists apply proposition sequence extend account definition derivation algorithm contains refusal cannot perform perform cannot perform sequence therefore conclude theorem exhaustiveness countable disjoint input output respectively exists fails proof exists sequence exists empty cannot empty distinguish proceed proof theorem proposition trace extend non denote fail application obviously trace trace apply lemma trace therefore fails request tock action therefore proposition trace member refusal built apply perform apply account fails request corollary completeness countable disjoint input output respectively fail conclusion future significant formal model brings potential automate systematic formal model implementation relation SUT implementation specification cyclic model behaviour sequence observable action discrete interval motivate cyclic simulator robotic although implementation relation variant ioco implementation relation ioco version suitable cyclic model define novel implementation relation account discrete cyclic model define implementation relation situation model refuse action variant implementation relation unspecified input treat introduce alternative characterisation refusal trace inclusion define automaton exactly refusal trace model allows express correctness formal containment automaton define refusal trace inclusion observation observer interact specification SUT demonstrates refusal trace inclusion corresponds notion observation model finally introduce framework appropriately capture implementation relation specifically derivation algorithm conforms specification successfully derive specification future regard deployed robot oppose simulation explore role environment framework although within simulation model environment environment behave model address reality gap actual deployed robot propose algorithm deployed robot however likely additional explore reality gap possibly approach aim maximise difference simulation environment actual environment future associate formalism theory generation algorithm explore model express finite machine associate generation algorithm generally scope introduce additional generation algorithm possibly algorithm account fault model fault sometimes interact interested situation passive approach approach previous considers role asynchronous communication potential enrich model probability continuous variable hybrid previous finally robotic credit authorship contribution statement   methodology investigation software draft review edit visualization robert  conceptualization methodology draft review edit supervision funding acquisition   methodology draft review edit visualization supervision funding acquisition