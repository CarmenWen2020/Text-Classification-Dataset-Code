developer frequently reuse apis exist library implement functionality however apis due complexity abstract framework NLICode reuse framework user reuse library functionality automatically generate nli interface instead detailed api framework consists component functional feature extractor summarize frequently library function code miner code template functional feature synthesizer code typed snippet perspective user reuse task NLICode functional feature framework user synthesize desire instantiate framework reuse java library evaluation generate quality interface cod newcomer program task previous keywords library reuse code program synthesis introduction implement functionality developer reuse exist library correspond apis discover subset apis obstacle api user obstacle apis furthermore program task usually cooperation multiple apis api invocation strict specification functionality excel desire api usage sequence apache poi address issue promote concept nli interface library reuse nli user reuse library functionality description instead directly manipulate detailed apis summarizes alice java programmer reuses library apache poi nli alice desire functionality description selection functionality mapped correspond implementation built code template nli alice parameter specific background foreground template parameter annotate expression font recommend synthesizer parameter code template synthesizer automatically trivial context workbook constructor alice parameter typed code snippet synthesize insert editor perfectly solves alice task library reuse highlight benefit nli aspect benefit query composition developer familiar library compose quality query accurately describes desire functionality display stack overflow title mistakenly mention concept background accepted user actually desire foreground nli summarize library functionality functional feature conjecture compose query mechanism functional feature easy user confident benefit code quality illustrative code developer quickly understand implement functionality however online code intend express instead reuse previous online code explanatory quality incorrect api code snippet accepted contains api task nli code explore usage api hypothesis unveil apis program context improve code quality image KB image application nli reuse apache poi construct nli abstract framework NLICode consists component functional feature extractor code miner synthesizer functional feature description library functionality instantiate extractor mining stack overflow previous survey option developer program component functional feature code code template multiple implementation feature code usually lack customize information local parameter synthesizer suppose compilable snippet parameter synthesize program context user finally NLICode combine component generates typed code snippet user stack overflow title apache poi background spreadsheet apache poi excel background background excel apache poi code background style    around central concept nli contribution algorithm extract library functionality stack overflow approach code intermediate representation java eliminate cod style difference instantiation NLICode reuse java library evaluation task feasibility framework remainder organize demonstrates abstract framework NLICode extract functional feature mining code synthesizer explain implementation framework available online artifact conduct accuracy algorithm apply explain NLICode development introduces related briefly summarizes framework NLICode framework consists component offline construct interface functional feature code online user solves task functional feature synthesizer completes correspond code typed code snippet discus component separately image KB image NLICode framework functional feature extractor extract functional feature framework functional feature brief description library functionality nowadays library typically multiple platform developer user communicate mail issue tracker online forum stack overflow communication corpus extract functional feature information library framework discussion candidate functional feature issue challenge usable functional feature unrelated library functionality semantic information prune diversity functionality express excel excel furthermore user lexically semantic information cluster normalize otherwise generate interface verbose repetitive apply filter pipeline remove structure context cluster normal extract core action normalization content merely lexically merge define important extract functional feature accurate functional feature clearly correspond library functionality functional feature library functionality code miner functional feature organize library functionality although user forum naturally code usually cannot reuse code intend understood others furthermore recent analysis online code usually quality construct incorrect api another analysis java code snippet stack overflow  practical improve quality code detect api usage codebase code code template usage scenario api frequently code code exploit commonality program reduces risk unknown consequence moreover code naturally hint user code modify variation program unfilled variation cod magic procedure code mining construct code corpus abstract code data structure sequence abstract syntax data graph apply correspond frequent mining algorithm corpus transform frequent item code synthesizer code incomplete usually local information exist IDEs integrate development environment usually code completion feature however completion typically considers computation recommendation variable parameter chain desire furthermore chain parameter synthesize effort direction synthesizer NLICode program context desire synthesize entire expression context formally expression conclude synthesizer enumerates expression desire usually heuristic function recommends expression accord statistical analysis code corpus synthesize desire expression user benefit recommend expression frequently context understand potential feasibility framework instantiate NLIj reuse java library separately introduce implementation component extract functional feature component NLICode functional feature summarize frequently library functionality recall functional feature define brief description functionality library extractor stack overflow thread input output functional feature workflow approach extract functional feature firstly extract stack overflow thread leverage syntax parse technique heuristic filter unlikely functionality express propose normalize functional feature representation grammar ensure cluster frequent subgraph mining algorithm  apply functional feature cluster candidate functional feature data source thread stack overflow specific tag apache poi poi project accord definition extract candidate functional feature stanford nlp toolkits extract raw data apply nlp software documentation code error prone POS tag failure syntax parse replace code placeholder ensure POS tag reproducibility briefly explain recognize code stack overflow thread usually label code fragment consecutive tag tag inline code code annotate html tag employ regular expression identify content preprocessing split text stanford nlp toolkit toolkit return structure parse display parse contains subtrees tag VP parse extract initial candidate functional feature filter filter pipeline pipeline filter related library function subtrees valuable seventh excel file filter pipeline filter pipeline consists filter filter evidence evidence vote vote veto accept evidence vote  remove upvotes downvotes filter handcraft  likely meaningful functional feature grammatical ingredient auxiliary modal pronoun usually actual meaning stack overflow trivial questioner requirement program program keywords program development usually valid functional feature extend return stack trace filter judge information context expression invalid expression likely refer library functionality filter excel file functional feature analyze precede content expression  filter structure syntax syntactic structure characteristic filter invalid filter structural filter besides usually complex sub clause generate feature concise therefore remove sub clause another important purpose filter parse structure candidate later normalization structural filter ensures candidate compatible normal normalization cluster meaning define normal feature denotes component optional generally functional feature consists action modify usually prepositional pilot summarizes parse compatible normal transformation normal denotes consist particle  another popular contains NP prepositional PP denotes consist chain typical prepositional normal feature feature action action particle adj prep normalization rebuild representation apply  algorithm frequent subgraphs functional feature furthermore merge action synonym judged wordnet explains normalization parse depicts another candidate excel file parse detailed grammatical ingredient prevent mining valuable subgraphs subgraphs VP VB NP bold font NP DT NN underscored meaningless contrast rebuilt normalize omit unnecessary detail POS tag unify structure layer bold font reasonable transformation    normal VP VB  cached formula  NP VP VB NP DT JJ NN NN VP VB prt   prt particle VP VB prt RP NP DT NN NN NP VP VB NP  document lucene  NP VP VB NP NN PP NP NN NN PP VP VB   PP particle VP VB PP NP NP DT NN PP NP DT NN NP PP NP  adj PP  prep NP mining code functional feature feature implementation although stack overflow code snippet along description usually incomplete mention apis instead quality incorrect api augment code unveil program specific functional feature related api construct code corpus usage api abstract code corpus data graph apply exist frequent subgraph mining algorithm finally transform frequent subgraphs text code code corpus construction functional feature related api construct code corpus usage api rationale decision although code snippet stack overflow suffer quality mention api apis functional feature code mention stack overflow thread content inside tag candidate apis metric related api lexical similarity split api accord camel stem  token api calculate overlap token functional feature api  feature overlap token api overlap token counting occurrence api thread related api extract usage api client repository github advance source code file repository contains desire api corpus code abstraction source code text however representation sensitive trivial difference variable  affect performance mining apply frequent mining algorithm construct code corpus abstract code data structure abstraction ast abstract syntax sequence representation source code ast sensitive cod style difference keywords implement loop recently apply structure sequence code abstraction api centric code sequence model allows user define interested code api invocation guard however sometimes api affect program behavior snippet behave sequence model sensitive capture image KB image snippet sequence model fails image KB image data graph annotation ast sequence graph model expressive interaction variable augment data graph annotate data node api vertex data graph data operation library reuse annotate data node correspond api display dataflow graph generate snippet annotation   api library apache poi invocation affect abstraction data workflow generate data graph source code generate intermediate representation IR java code IR independent source conducive processing generate graph IR furthermore graph refine static assignment ssa graph transform data graph implementation exist algorithm subsection discus IR intermediate representation exist generate java IR behave poorly incomplete code snippet soot dependency file generate correspond intermediate code input snippet compilation without wrapper invocation syntax java complex multiple code behavior increment variable cnt cnt iterate loop iterator detail normalize exist IR eliminate cod style difference snippet representation intermediate code specific increment operation define generate data graph corpus apply  algorithm frequent subgraphs code skeleton code mining recover graph code skeleton code definition skeleton code incomplete syntax obtain remove syntax node syntax node skeleton code skeleton code recover graph node wrap dot syntax text skeleton code generation data graph correspond node syntax construct skeleton code data graph node graph randomly syntax source code ancestor lca node recover syntax node graph naturally node graph recover syntax become skeleton code synthesizer component framework synthesizer completes skeleton code typed code snippet program context explain detail reproducibility synthesizer contribution skeleton code annotate correspond synthesis program context expression desire strategy variable context constructor function invoke chain return strategy display node api library connects node separately caller return declare variable leaf target leaf chain return desire chain variable workbook cast analyze inheritance apis define model heuristic model evaluates goodness variable synthesis mapping integer exist variable context encourage zero multiple variable recently due software  variable return constructor variable synthesis recursive synthesize variable invocation parameter context model synthesize parameter expression model refer code corpus recall skeleton code code corpus instance skeleton code corpus instance extract variable definition variable analyze def relationship extraction recursive definition variable undeclared variable recursion terminates definition variable variable define outside parameter global variable instance corpus extract expression chain synthesize expression calculate frequency expression extract corpus recommend decrease frequency evaluation evaluate  perspective correspond component framework evaluate accuracy completeness functional feature extract functional feature library functionality official tutorial evaluate quality code code official tutorial benchmark mining algorithm exist mining evaluate synthesizer apache poi implement ide plugin component investigate plugin programmer task research filter pipeline perform functional feature user discussion aim access filter pipeline effective filter unrelated furthermore investigate importance filter extent NLIj accurate functional feature evaluates accuracy completeness normalize functional feature accuracy refers functional feature clearly correspond functionality completeness refers capability generate functional feature frequently library functionality code mining algorithm perform exist mining research related quality code codebase code exist mining algorithm separately abstract source code syntax sequence extent NLIj promote efficiency program task finally research directly investigates usefulness NLIj development introduce datasets benchmark research detail evaluation methodology individual subsection datasets benchmark research data java library html extraction library jsoup source code parser eclipse jdt library manipulate microsoft document apache poi toolkit deeplearningj graph database platform neoj addition widely library domain program html parse database manipulation construct nli library related thread stack overflow client code reuse library apis stack overflow tag library tag jsoup jsoup library library crawl thread tag java library specific tag functional feature extractor extract textual content thread split text stanford nlp toolkit dataset thread split furthermore extract dataset randomly sample library sample remove shorter usually mistakenly split seldom functional feature dataset contains theoretical definition extraction author manually label functional feature client code dataset client repository github apis library query restrict library jsoup program specify java repository client repository source file repository evaluate generate nli library functionality implementation benchmark official tutorial library tutorial library  developer organize tutorial functionality functionality consist concise description code filter functionality code code remove comment instead specific feature likely topic procedure reuse library filter treat official functionality benchmark evaluation library functionality average code loc benchmark overview stack overflow dataset library thread jsoup apache poi neoj deeplearningj eclipse jdt overview client code dataset library repository source file jsoup apache poi neoj deeplearningj eclipse jdt benchmark official tutorial library  loc jsoup apache poi neoj deeplearningj eclipse jdt RQ filter pipeline algorithm NLIj extract user discussion functional feature filter unrelated subsection discus output filter pipeline label dataset methodology combine filter filter context filter structure filter filter manually label dataset automatically script simply textual content avoid mistake trivial detail tense instead annotator label benchmark scratch extract annotator functional feature already functional feature verdict failure comparison furthermore evaluate importance filter filter pipeline remove filter evaluate modify pipeline script extractor extract stanford nlp toolkit fed filter pipeline functional feature automatically extract functional feature label benchmark functional feature feature remain summarizes detail library library functional feature filter filter benchmark significant variation library however fix false negative library specify domain specific concept action library customize recommend checked fail summarize mistake functional feature filter library library feature jsoup apache poi neoj deeplearningj eclipse jdt preprocessing fail nlp toolkit tangle vote   filter decision external factor stanford nlp toolkit sometimes fail split correctly punctuation correctly fail POS tag upvotes downvotes filter pipeline sometimes tangle mistake functional feature recognition return node cypher return node  return  context precede expression machine approach scenario assign filter implementation however annotate algorithm accurate apply machine approach evaluate importance filter filter pipeline remove filter displayed combine filter filter remove feature rapidly context filter upvotes expression filter pipeline tends remove filter feature without context filter depicts remove structure filter brings incorrect feature image KB image combination filter filter  context structure structure context filter RQ functional feature subsection generate functional feature library dataset benchmark functionality description official tutorial evaluation functional feature accurate functionality tutorial methodology stack overflow corpus library output functional feature extractor functional feature evaluate accuracy annotator rate extract functional feature request feature actual library functionality likely functionality information zero meaningless annotator functional feature separately afterwards discus agreement rating annotator calculate average functional feature evaluate completeness annotator review functionality benchmark judge functionality generate functional feature annotator functionality functionality generate feature output functional feature precise otherwise zero functionality display accuracy functional feature library normalize functional feature extract dataset functional feature marked average functional feature library functional feature annotate annotate remain irrelevant library functionality average functional feature approximately display completeness functional feature instead rating functional feature rate functionality official tutorial generate functional feature functionality benchmark function annotator report majority tutorial summarizes task functionality function tutorial apache poi multiple style mention task font style user discus functionality carefully analyze functionality rat zero manually stack overflow mention stack overflow functionality corpus frequent normalize syntax normalize functional feature frequency fluctuation library completeness eclipse jdt library deeplearningj library rat fluctuation related thread stack overflow thread tag deeplearningj dataset discussion obviously affect completeness functional feature external threat algorithm image KB image accuracy generate functional feature library  jsoup apache poi neoj  eclipse jdt completeness generate functional feature library  jsoup apache poi neoj  eclipse jdt RQ code focus evaluate performance code mining algorithm evaluation miner exist mining code NLIj denotes code specific variable code reader immediate usefulness code api usage code usually describes frequent combination api fourth code merge denotes manage usually invoked another instantiate parameter specify statement besides api invocation workbook code summarizes apis invoke hint handle exception specific handle exception user image KB image code functional feature methodology evaluate performance mining algorithm code official tutorial benchmark functionality benchmark remove functionality functional feature functionality zero remove another functionality algorithm fail api correspond functional feature functionality universal metric quality code approximate quality calculate jaccard distance specific built invoked apis code another invoked apis official jaccard distance metric calculate difference functionality code library function  jsoup apache poi neoj deeplearningj eclipse jdt mining algorithm exist    expands api java expression pre  probabilistic context grammar model  api misuse stack overflow rationale api stack overflow api usage github abstraction source code representative  abstract code structure   abstract code sequence structure SCS structure sequence comparison meaningful configure setting codebase codebase usage api average codebase api contains source code file threshold threshold minimum frequency codebase library average jaccard distance code code benchmark overall NLIj achieves minimum average jaccard distance prof code official code  synthesize code benchmark api invocation performance   NLIj generate complex code however explain sequence structure  strict mining task apache poi apis   swap however swap apis subsequence  fail besides fluctuation library deeplearningj eclipse jdt jaccard distance significantly library style api usage varies library deeplearningj chain configure network aspect however user deeplearningj skip aspect client code visibly shorter official code eclipse jdt functionality library apply visitor code abstraction analyze code snippet inside visitor image KB image comparison mining  jsoup apache poi neoj deeplearningj eclipse jdt average conduct library apache poi improve efficiency reuse library program rank expression accepted user evaluate performance synthesizer methodology evaluate utility effectiveness program NLIj invite participant program task participant familiar java program newcomer consist participant library apache poi participant built client project apache poi expert logic usage NLIj briefly introduce participant advance prepared specific program task participant prototype task randomly picked online tutorial website concretize task task specific configuration automatically validate concretize task blank workbook specify file task tutorial suppose user manipulate multiple subtasks subtasks executable compose validators task brief description api invoked code tutorial average task invokes api user interface task component task description detailed hint file pre define variable validator program task blank approach participant file implement function task accomplish validator return accepted available publish online artifact participant online resource forum task setting configure cod environment  NLIj plugin without participant assign random program task cod environment balance participant assign task cod environment participant NLIj interaction plugin recall synthesizer recommend synthesize expression user user accepted recommendation rank expression finally overall task duration website facilitate data analysis task participant apache poi  description invoked apis blank workbook spreadsheet italic font font hyperlink url display participant index report program expertise newcomer expert display task code environment std standard ide nli ide equip NLIj plugin finally refers overall duration task display web participant task summarize data newcomer average web newcomer cod environment average newcomer without NLIj spent web task significantly participant plugin newcomer NLIj met task blank workbook task without refer web source summary   std nli std std  std nli nli std  nli std std std  nli std nli nli  std nli std nli  std nli nli std  nli std std nli  nli std nli nli however difference obvious expert average expert NLIj task expert without NLIj task later communication expert familiar library documentation explain web newcomer however expert confirm plugin convenient forgot api participant report plugin accomplish task without external information web confirm image KB image comparison average newcomer spent cod environment image KB image comparison average web newcomer cod environment participant task NLIj ranking expression chose code synthesizer recommend useful expression participant interaction task interaction variable user recommend expression metric MRR reciprocal rank evaluate quality recommendation synthesizer recommend useful expression specify user interaction task workbook valid NLIj fail recommend desire MRR metric actually interaction task arbitrary built interaction NLIj successfully recommend desire expression task desire variable recommend choice average task interaction average MRR recommendation performance synthesizer task ID  average discussion participant survey survey available publish artifact survey participant NLIj improve cod efficiency input functional feature participant report prefer functional feature however participant concern function functional feature query besides participant mention although query flexible however compose query scratch newcomer mention hint auto completion functional feature helpful user described requirement participant code NLIj concrete code overall participant prefer code code hint modify participant code quality reliable multiple concrete image KB image threat validity internal validity research construct nli functional feature extraction code mining synthesizer however evaluate detail implementation framework workflow discus parameter tune frequent mining algorithm implementation frequency threshold code datasets however threshold datasets although NLIj varies user participant relatively daily development developer user data future external validity library domain parse database popular toolkits evaluation accurate functional feature accuracy quality code however feature orient performance library feature usually library framework furthermore api invocation library reuse library heavily rely syntax annotation OGM mechanism neoj external validity generalization framework library carefully chose datasets finding generalize stack overflow extract functional feature popular platform program task discussion api usage site previous encourage corpus nonetheless library active stack overflow although specific stack overflow performance user discussion input regard codebase mining code repository github source code file code corpus file quality however evaluate java apis representative library related NLICode contributes api comprehension software reuse addition component benefit related correspond domain summarize separately information extraction software artifact researcher succeed extract quality software specification software artifact nlp technique propose approach infer specification api documentation detect action resource machine evaluation relatively precision recall software library potential bug detection  tonella nlp approach extract organize concept software identifier wordnet structure tokenization tag dependency sort lexical expansion introduce approach relevant tutorial fragment apis combine topic model pagerank algorithm closely goal summarize software artifact functional explanation  approach extract  mail forum approach apply lda algorithm extract topic model data creation topic specific  define concept task specific program action described documentation index document task user quickly furthermore campbell  developed task code snippet stack overflow NLICode normalize task pre define functional feature enhance concrete code abstract code quality stack overflow code controversial code mining code abstract code  component user IDEs usually integrate relevant feature define widely code template feature   eclipse apply statistical automatically code source code highly repetitive workflow code mining abstract source code data structure apply correspond frequent mining algorithm  sutton  mining code built technique statistical processing  transform source code abstract syntax apply bayesian probabilistic substitution technique code accurate meaningful author mention accepted eclipse  project detect api misuse online forum developed  api usage forum code codebases author data structure structure sequence enrich api invocation syntax guard statement enrichment vital api misuse online code suffer guard exception handle  effectively misuse exist NLICode abstract framework specify approach code code abstraction exist rely cannot easily generalize others program synthesis program synthesis task automatically program underlie program satisfies user intent express specification holy grail computer inception AI program synthesis diverse specification partial data structure combination despite ambiguity specification flexible effort compose exist synthesis input recommend related apis compilable snippet   define specification user query local variable specification mapped expand  model codebases developed dynamic interactive program synthesis  integrate eclipse ide  user execute recommend code snippet refine snippet iteratively conclusion promotes concept nli interface library reuse construct nli framework component functional feature extractor code miner synthesizer instantiate component NLIj reuse java library accuracy extract functional feature functionality official tutorial exist code miner NLIj accurate code finally participant task cod newcomer library practical perspective framework promotes efficiency reuse library academic perspective framework building interface library hopefully inspire research