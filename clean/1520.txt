background development scientific software application trivial due constant increase complexity application increase intensive maintenance reuse aim developer scientific software usually lack formal computer background appropriate software engineering SE describes systematic mapping SE scientific application development impact software quality achieve goal perform systematic mapping catalog SE scientific software development discus quality attribute application tentative apply quality finding scientific software developer focus improve implementation productivity code reuse library application program technique addition apart performance driver application scientific software developer maintainability productivity important conclusion exist literature interpret software engineering prism various implication researcher practitioner finding important future research endeavor lack evidence offs apply software negative indirect quality attribute previous keywords software engineering performance compute scientific compute introduction scientific software development refers analysis implementation deployment software application scientific purpose physic biology medical analysis data continuous experimentation validation technique simulation release scientific emergence domain scientific software development important researcher successful multiple scientist engineer debug maintain software handful taught effectively couple introductory  reinvent program  software instead research reliable efficient program wilson quote sentiment anything dependence upon software increase within scientific domain scientist equip national foundation NSF award billion project  survey report software developed research addition recent blog survey researcher fund NSF vast majority respondent sufficient training development activity cod development although scientist invest building software advantage advancement software engineering SE lack SE attribute partially limited knowledge benefit  survey mention earlier software development training NSF fund researcher report training specific scientist image KB image envision scientific software development finding highlight issue arise scientific software developer lack SE text explains issue detail management code collaboration scientific software application complex code project complexity cannot developed therefore scientific software developer collaborative software development approach addition project multi disciplinary increase collaboration development application input scientist expertise mathematician biologist scientist etc maintainability development portion software lifecycle maintenance activity consume project important maintenance waste development maintenance due technical debt similarly scientific software project maintainability important goal maintenance costly productivity loss vital scientific exascale application usually fortran performance evolve maintain reuse opportunity productivity concern scientific software project improve productivity reduce development software reuse algorithm across project within domain reuse code helpful approach evidence potential reuse scientific software project explore software advanced reuse technique address limitation scientific software developer benefit advance SE illustrate collaboration developer management codebases perform git jenkins quality monitoring focus technical debt perform sonarqube reusability facilitate refactorings synchronize methodology manage software development lifecycles agile benefit SE scientific software development scientific software developer cultivate culture SE within community impact literature domain report technique improve development scientific software therefore goal detailed mapping research SE scientific software development properly scope topic define specific goal investigate SE currently scientific software development identify quality attribute SE ass empirical evidence impact SE quality attribute achieve goal conduct systematic mapping SMS focus classification categorization primary understand domain related overview    SE  software  empirical  goal  carver  XX slr  agile requirement activity SMS      challenge scientific software development     guideline gamification principle  slr  offs qas  related describes secondary mapping systematic literature review related application SE scientific software annotate bibliographic reference whereas detailed analysis primary  carver systematic literature review aim identify developer scientific software SE hpc publish prior SE classify evidence interview evidence interview survey issue version SE heavily adopt verification validation scientific software developer important widely adopt expands recent literature expand criterion SE scientific software development literature review agile scientific software development investigate extent scientific software project agile impact agile requirement activity review describes publish scientific project adopt agile achieve however author positive agile requirement related activity additional identify agile originate scrum originate extreme program expands broadening scope review beyond agile requirement activity perform systematic mapping SE develop scientific software finding majority scientific software fortran python java matlab SE relate architecture development cod verification validation quality validation propose expands recent investigation quality attribute   systematic literature review identify challenge propose unsolved related scientific software review publish prior january challenge due characteristic scientific software cultural difference scientific software developer SE community technique scientific software developer overcome challenge expands focus broadly recent   perform systematic literature review identify UI gamification improve usability scientific software selection retrieve primary publish prior lens lab vehicle designer collaboration scientist software engineer professional scientific software initiative moreover author propose lens project straightforward stage consult appropriate stakeholder issue broader   focus SE beyond UI  conduct systematic literature review identify offs scalability efficiency maintainability portability simulation software engineering selection retrieve primary publish finding primary proposal empirical opinion report comparison related overview focus research goal focus goal highlight goal research dictate depth analysis typically SLRs depth SMSs analyze indicator review highlight analysis goal aim identify commonality difference balance overlap novelty desirable comparison update novelty additional implication research broader contains almost comparable goal date almost review goal focus focus specific development methodology focus agile focus specific activity   focus focus specific   focus gui focus specific quality attribute  focus quality attribute finally advancement catalog impact application software engineering quality attribute scientific software development offs quality protocol systematic mapping guideline described objective research goal express goal metric GQM format analyze development scientific software application purpose characterization evaluation respect software engineering employ quality attribute researcher practitioner goal define research address ass empirical evidence SE scientific software development sub research RQ image KB image research aid scientific software developer identify SE researcher frequently investigate explore SE development activity requirement difference across application domain image KB image research expand knowledge acquire RQ scientific software developer decision quality attribute software development activity outcome research fold mapping activity quality attribute triplet empirical evidence scientific software developer outcome research quality planning activity researcher scope future address important understudied quality attribute goal research chosen conduct mapping systematic literature review topic overview topic goal develop classification perform synthesis quality assessment primary content digital library acm springer sciencedirect chose digital library DLs specific venue inclusive selection related scientific software development SE overview organize scopus without date filter retain publish DLs remove duplicate apply inclusion exclusion criterion retain primary mapping detail developed identify relevant SE scientific software development scientific software demand calculation vast amount data application performance compute hpc hpc application address outside computer therefore inclusive hpc perform title abstract keywords scopus DLs scopus DL avoid inconsistency issue identify springer allows text title abstract image KB image image KB image overview manually filter retain publish DLs remove duplicate finally hpc ensure relevant scientific software development define inclusion criterion IC primary apply scientific domain IC primary defines SE IC primary evaluates SE IC primary quality attribute inclusion criterion IC IC IC IC similarly define exclusion criterion exclude met EC primary english EC primary editorial keynote biography opinion tutorial workshop summary report progress report poster panel EC primary horizontal perspective spectrum SE report related EC focus hpc without reference scientific software development inclusion exclusion author independently examine author inspect publication text assign inclusion exclusion maximum threshold retain author review decision development empirical classification schema data extraction data extraction phase variable primary dataset available online strengthen validity data extraction systematic author independently extract data inconsistency extract information author inconsistency resolve discrepancy author discussion resolve disagreement extract assign variable title title author author publication conference journal workshop publication venue correspond journal conference development activity development activity investigate primary requirement architecture implementation software artifact software artifact mention diagram etc software engineering SE described traceability model driven development etc quality attribute quality attribute investigate exactly report primary program program fortran etc application domain application domain software astronomy geology chemistry etc empirical research empirical survey action research ethnography research validate impact SE quality attribute impact outcome empirical validation positive negative neutral QA impact QA positive impact QA negative marked blend positive negative impact identify parameter marked variable perform data extraction terminology primary author incorrect pre development activity rater report activity emerge data identification development activity mapping software artifact trivial task due existence various software development lifecycle model SDLC catalog activity perform mapping artifact activity source source datapoints artifact activity identify specifically model rup   scrum standard software architecture document mapped architecture activity accord rup rup activity workflow whereas model mapped requirement activity    activity domain  discipline artifact mapped activity SDLC model artifact activity report bug issue treat rup requirement fed backlog item scrum bug outcome later fed requirement conversely reuse empirical empirical research literature research source empirical research identify source empirical software engineering research however source focus specific research respectively identify focus empirical research generic perspective additionally empirical research international symposium empirical software engineering measurement ESEM conference empirical SE community similarly examine aim scope journal empirical software engineering however identify additional keywords research empirical approach source classification schema retain source although slr reference framework primary review primary identify empirical explicitly mention validate empirical setup assign correspond variable explicitly mention empirical upon data analysis variable documentation variable demographic mapping research remain variable along analysis perform data RQ RQ frequency variable respectively due SE literature perform pre processing consolidate merge sort identify generic super category SE primary developed theme program technique review theme candidate merge mapped model driven engineering program technique define theme super category manuscript report super category dataset report detailed category author perform author validate mapping attribute rqs research          initial interpretation data overview upon frequency demographic information RQ RQ RQ RQ respectively overview overview frequency variable primary frequency exclude item occurrence additionally datapoints split slash correspond merge datapoints whereas datapoints split comma correspond illustrates publish per scientific software development research particularly focus SE however increase substantially surprising scientific software increase complexity SE helpful scalability portability frequency investigate specific development activity frequently development activity implementation architecture interestingly investigate maintenance activity despite maintenance important costly activity software evolves prevalence implementation architecture activity scientific software development consistent finding earlier image KB image frequency publication software artifact primary source code frequently software artifact outcome distribution artifact popular activity rank artifact frequency development activity development    management    requirement tabulation source code development activity addition activity artifact associate activity SDLC model prevalent requirement artifact requirement activity component diagram architecture activity frequency software artifact software   source  model diagram component component   diagram program report fortran scientific software development consistent prior fortran dominant scientific application heavily rely mathematical operation ranked explain popularity curriculum department acquaint developer scientific software frequency software artifact per development activity development    code  component diagram  source code  model diagram diagram  domain model diagram  code report researcher involve scientific software development variety domain sum report application domain frequent domain report simulation amount computational amount data agreement previous physic biology mathematics application domain scientific software development frequency program program   python    cuda OpenCL JS ruby java empirical author validate propose approach percentage validation propose empirical validation distribution mirror traditional SE dominant research observation data prior apply empirical however researcher frequently validate via empirical frequency application domain application      climate  compute   frequency empirical validation purpose empirical   survey ethnography exclude refer specific QA empirical variable cannot define RQ software engineering scientific software development mapping related SE scientific software development software frequently report consolidation described consistent scientific software development commonly report related implementation SE software reuse source code reuse develop artifact reuse packaging software library domain researcher discus application program interface apis reuse library discus variety program technique model driven engineering skeleton program task schedule program paradigm aspect orient program AOP orient program OOP discussion program technique none suggests scientific software development community achieve program efficiency architecting parallel distribute software architecture dominant reuse component software engineering  focus parallelization attribute execution performance complex calculation usually perform scientific software focus  suggests attempt systematize reuse earlier phase development fourth portion research spent scientific software application complex developer perform verify validate furthermore additional driven development quality assurance aspect finally underline related software improvement scientific software developer SE assemble lifecycle benefit software development instance collaborative development prevalence topic consistent complexity scientific project collaboration multiple developer diverse background frequency software RQ software  software  reuse library  assurance without metric program  parallel program distribute  optimization software development improvement lifecycle management introduce specific program component software  development environment ide domain specific development framework propose code generation regression automate without  management formal software architecture requirement specification architecture  management communication SE per activity activity SE implementation developer scientific software interested development reuse code library adoption program technique development framework collaboration developer technique improve quality software architecture activity developer scientific software interested reuse component software engineering model technique improve quality software reduce software SPL researcher multiple software development requirement activity developer scientific software focus gathering requirement various technique interview workshop etc stakeholder building understand requirement project management activity developer scientific software focus  aspect manage factor deliver project consistently efficiently within budget sum item report link SE activity previous report understudied activity scientific software development later activity finally SE apply development activity quality assurance without metric perform implementation quality assurance code review  architecture phase perform review inspection finally phase perform coverage metric however SE substantial perform analysis difference development activity SE per application domain tabulation SE application domain finding difference SE apply across application domain manuscript report dataset without differentiate application domain development activity frequency software per application domain      library   management  OSS agile software architecture gui program development compiler requirement specification parallel program distribute software requirement elicitation architecture  management communication software development improvement lifecycle management requirement elicitation reuse library api separation concern   library api code  program requirement elicitation separation concern requirement management documentation software development improvement lifecycle management management communication development framework propose  assurance without metric release OSS program architecture model architecture model requirement specification development framework usage development framework propose effort estimation  framework propose   library api project  optimization management  elicitation reuse library api quality optimization risk management agile component software development requirement elicitation parallel program distribute software architecture  software development version configuration management program technique requirement specification release OSS quality assurance without metric RQ quality attribute relevant scientific software development response RQ frequency quality attribute target primary performance quality attribute developer scientific software obtain data analysis quickly ranked quality attribute productivity refers development efficiency explain focus reuse library  interestingly reusability ranked indicates goal scientific software developer systematic reuse reduce development attribute maintainability rationale outcome application frequently therefore desirable reduce effort update software finally observation portability fourth frequently quality attribute developer scientific software interested develop application portable parallel development environment response RQ qas development activity frequency target quality attribute quality  quality   reference fault tolerance  reference understandability maintainability reference extensibility flexibility changeability interoperability usability  memory efficiency  safety correctness reference accuracy reliability modularity testability reference verifiability reusability information maintainability development activity deployment explain scientific software developer interested efficiently maintain code minor adjustment across version perform corrective maintenance maintainability important across multiple development activity activity project management architecture impact maintenance image KB image frequency quality attribute per development activity RQ response RQ quality attribute associate software parenthesis applicable denote report negative neutral impact SE quality attribute negative designate reveals uniform SE positive others negative researcher publish positive frequently negative report negative due phenomenon publication bias tendency publish positive identify traditional software engineering research venue explicitly accept negative increase additionally traditional software engineering decision application without decision maker various quality attribute explore quality offs QA improve whereas another deteriorates seek explicit analysis dataset identify identifies offs identify positive negative impact parameter response RQ empirical validation bubble frequency QA evaluate empirical visualize frequency impact SE validate frequency quality attribute per software software   reuse library  portability scalability robustness reference fault tolerance productivity reusability maintainability reference extensibility flexibility changeability program  maintainability reference extensibility flexibility changeability productivity scalability reusability complexity reference understandability correctness reference accuracy reliability parallel program distribute  portability scalability correctness reference accuracy reliability maintainability reference extensibility flexibility changeability productivity software development improvement lifecycle  productivity maintainability reference extensibility flexibility changeability portability usability component software  portability maintainability reference extensibility flexibility changeability reusability modularity scalability regression automate without  correctness reference accuracy reliability portability scalability productivity development framework propose portability performance productivity scalability maintainability reference extensibility flexibility changeability memory efficiency correctness reference accuracy reliability interoperability robustness reference fault tolerance quality assurance without  complexity reference understandability architecture  reusability maintainability reference extensibility flexibility changeability program  productivity quality  reference extensibility flexibility changeability performance productivity agile  reference extensibility flexibility changeability performance security safety productivity domain specific  productivity code  productivity project  formal  fault tolerance performance software  management  robustness reference fault tolerance overview validation exists researcher performance scalability correctness complexity rigorously percentage without validation exclude quality attribute reusability usability consumption robustness empirical evidence percentage validation observation focus extreme address management focus software lifecycle improvement SDLC software architecture empirical validation explanation observation earlier stage activity artifact developed evaluate due advance qualitative approach focus parallelization distribution code rigorous validation explain performance indicator execute software relatively easy obtain image KB image frequency empirical validation qas discussion overview interpretation mapping consistent prior software identify prior  highlight importance improvement multiple importance multiple importance focus application development program closer frequently SE majority implementation task development report multiple aim speedup software development reusable code identification algorithm library software development framework develop application evolve emphasis explain scientific application functionality therefore reuse appeal improve productivity productivity increase achieve framework library report related driven development specific regression automate outcome suggests scientific software developer simulation related critical software implement optimization algorithm simulation CO emission  scientific software developer prioritize global optimum local ensure goal developer exhaustive validation cod addition aim development easy efficient productive another research direction program compiler code generation code management strategy identify scientific software developer cod task important struggle therefore research invest substantial effort scientific software developer cod project management scientific software domain project management software development SE focus specific activity application standardize development hoc topic scientific software researcher yield various benefit quality software increase productivity quality assurance finally literature scientific software researcher interested software quality assurance procedure focus non functional requirement addition described focus functional requirement focus scientific software development literature performance priority scientific software developer quality attribute maintainability development productivity suggests developer scientific software highly interested decrease effort software development software construction productive decrease maintenance effort deem non negligible finally quality attribute primarily improve reusability correctness reliability software probably proxy effort portability portability sub characteristic maintainability important scientific software development related performance instance decrease execution architect calculation gpu cpu tailor code portable processor hardware operation etc importance quality attribute comply   quality driver scientific software application performance maintainability portability correctness implication researcher practitioner benefit practitioner guidance fitting SE improve quality attribute development activity illustrate practitioner develop synthesize selection development activity practitioner specify software development activity selection identify SE activity RQ selection quality attribute limit SE developer identify related quality attribute development activity RQ RQ portion matrix developed illustrate development activity SE quality attribute dimension inside quality attribute due matrix matrix available appendix reduce complexity representation mapped development activity SE matrix via nest SE development activity remain highlight SE related quality attribute developer SE relevant develop scientific software suppose practitioner SE improve maintainability portability implementation architecture SE marked rectangle improve quality attribute aforementioned activity namely component software development reuse library apis program technique development parallel distribute however practitioner SE improve portability maintainability isolation marked rectangle develop software architecture model address portability observation mental qualitative synthesis software engineer understands development reuse building component architecture specify relevant model proceed implementation attempt reuse code artifact COTS library etc additionally parallel distribute architecture image KB image illustrative interpretation reference colour legend reader refer web version article research perspective research effort account performance quality attribute primary impact propose approach performance additionally advise researcher compromise performance benefit quality attribute focus potential benefit refactoring impact performance researcher conduct benefit analysis previous statement extends quality attribute research QA multiple propose approach application SE therefore highly advise researcher seek analysis SE  without uniform impact across furthermore prominent unexpected SMS community focus reuse contrast traditional software engineering reuse mostly hoc highly systematic SPLs scientific software development reuse relies mostly library reuse research endeavor develop reuse document impact quality performance however evident pool software visible development repository reusable artifact maven repository highly benefit community finally endeavor catalog program technique benefit drawback helpful community research suggests experimentation technique limited  suggests almost program technique scientific software development threat validity organize threat validity around guideline report threat validity related selection report threat related data validity finally report threat related research validity selection validity selection validity concern phase research filter guarantee adequately identify relevant define protocol primary strict guideline identification consist automate DLs keywords synonym related domain SE scientific software development however return candidate primary related hpc scientific software however literature hpc apps non computer apps scientific software computer application scientific purpose data percentage false positive becomes threat minor vast majority application deployed hpc related additionally verification contrast dataset primary broader previous secondary literature manually checked verify publish DLs pool primary inclusion exclusion phase accidentally exclude relevant mitigate threat extensively criterion ensure clarity understand author conduct potential conflict author randomly screen subset chosen inclusion verify choice without identify furthermore exclude literature goal focus empirical evidence almost publish literature careful remove duplicate extensive version suffer non english publish limited journal conference aim publication venue DLs publishing english finally access publication institution access DLs data validity primary data validity threat related data extraction bias author extract manually relevant data due potential subjectivity author inspect refine data validate procedure author resolve conflict potential threat data validity publication bias publication bias bias primary publish researcher tendency publishing positive negative publication bias identify researcher regard publication bias due acknowledge existence threat therefore likely sample  positive simply negative publish peer review literature reader examine interested SE apply addition potential threat data validity affect sample concern analyze lack relationship threat aim identify relationship data classify quality primary potential threat SMS guideline perform quality assessment explicit research related quality therefore analysis regardless quality reflect bias overall fourth selection variable extract threat straightforward research conflict discussion author variable extract fifth identify issue statistical analysis research hypothesis statistical analysis descriptive statistic sixth mitigate researcher bias data interpretation analysis author data cluster SE quality finally finding mapping summarize research necessarily cannot guarantee report generalize reflection industrial research validity threat category research bias author experienced conduct secondary conduct review therefore threat minimal threat validity selection research research concern RQ RQ aspect slr demand synthesis issue threaten validity literature various hybrid secondary research usually RQ nevertheless reporting empirical detail recognize empirical detail data collection analysis sample etc indeed synthesis threat category repeatability detailed review enable reliability replication manuscript describes review procedure detail multiple author involve phase reduce potential bias finally extract data publicly available enable comparison validation additionally discussion author define research accurately holistically goal clearly depict mapping research research sub goal objective therefore bias selection specific research furthermore literature identify substantial amount related comparison related SE scientific software development literature additionally selection research adequate goal deviation guideline summary scientist increasingly development software research goal simulation model data analysis complexity software application reuse code improve productivity continuous maintenance scientific software developer become familiar SE project mapping insight scientific software developer SE obtain relevant digital library construct approximately article identify rigorous filter reduce primary analyze scientific software development mostly interested software implementation activity however aid achieve architecture implementation focus reuse library component apart understandable focus performance maintainability development productivity important quality driver scientific software developer actionable illustration usage scenario perspective researcher practitioner finally researcher SE scientific software development domain multiple implication future opportunity