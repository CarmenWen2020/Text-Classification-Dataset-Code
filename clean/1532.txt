static program analysis precise sensitive execution context execution expensive memory consumption iteration context grows exponentially program theoretical issue evaluate inter procedural context sensitive data analysis report severe memory explosion issue program verification model propose capture manipulate context sensitive program information data analysis implement acyclic graph without redundant subgraphs efficiency approach memory usage alternative data structure clearly outperform alternative memory efficiency previous keywords static program analysis data analysis context sensitivity introduction static program analysis approximate behavior program abstract concrete semantics program concrete data analysis context sensitive insensitive analysis distinguish analysis execution context context alternative intra procedural execution due statement context sensitive analysis precise context insensitive counterpart expensive memory consumption conditional execution context grows exponentially program iteration countably infinitely context merge analyze information context reduces memory consumption analysis precision therefore aim compact representation mapping context information analysis information memory usage related context sensitive analysis theoretical issue     evaluate various inter procedural context sensitive data approach report severe memory depth explosion  sen issue program verification model technique capture context sensitive analysis information hence distinguish inter procedural context sensitivity intra procedural trace sensitivity context analysis program memory efficient approach capture analysis context assume static assignment ssa representation program assume program analysis standard data analysis approach   iterates ssa representation program update analysis information node node transfer function fix ssa graph node definition variable relation node apply transfer function node encodes various dependent analysis option available transfer function apply distinguish operator static related node node occurs loop hence analyze numerical index operator generate analysis iteration node index increase node update transfer function apply analysis approach extension formalization martin  dissertation similarity acyclic graph cyclic graph global capture difference approach memory efficiency achieve avoid data redundancy understood generalization binary decision diagram BDD logical function BDDs graph representation redundancy elimination memory efficiency decision logical false analysis conditional execution decision diagram  multiple decision node false parameter subtrees analysis multiple predecessor node multiple target leaf false leaf analysis lattice traditionally context sensitivity inter procedural data analysis sake simplicity however presentation focus intra procedural context sensitivity various context due statement context sensitive data inter procedural data analysis however important ssa context sensitive static program analysis intra procedural compiler optimization intra procedural program verification complement framework memory efficient context sensitive program analysis formal presentation context sensitive analysis abstract lattice conservative context insensitive analysis transform approximate conservative context sensitive analysis finite implies context sensitive analysis guaranteed fix hence memory efficient data structure context sensitive analysis information backbone theoretical framework context sensitive program analysis formal presentation outline theoretical framework without experimental evidence memory efficient aim complement contribution propose approximate memory efficient representation capture context sensitive analysis ssa program analysis memory efficiency approach handle context sensitive information approach context context variant hash approach explain detail remainder structure informal introduction intra procedural analysis easy understand theory demonstrate memory efficiency relation data structure apply theory inter procedural analysis related concludes introduction informal introduction aim understand formality earlier formal presentation algorithm proof brief presentation  publish german  algorithm manipulate outline described assume ssa program representation refer program representation ssa graph code statement correspond structure ssa graph ssa graph annotate node node ssa graph integer image KB image source code correspond ssa graph ssa graph program representation sensitive def relation operation explicitly define operation operation ssa graph multi graph ssa node ssa unique graph entry node satisfy unique graph exit node satisfy dominates node dominates node context insensitive data analysis interpretation function merger definition variable approximation approximate variable representation option affect variable variable interpretation variable predecessor graph predecessor addition representation contains information generate abstract however variable variable sequence variable correspond construct composition previous variable define generates involve operator construction construction distinction context sensitive analysis precisely apply analysis update function node analysis selects node variable transfer function asks predecessor definition construct predecessor predecessor define asks predecessor construction subterm recursively predecessor terminate correspond definition ssa graph loop image KB image code fragment loop encloses statement correspond ssa graph loop analysis fix termination approximate context insensitive analysis lattice fix analysis iteration assume countably infinite node generates analysis situation illustrate loop encloses statement assigns variable node loop header generates  undefined later propagate inside loop operator inside operation shannon expansion explain detail node statement generates propagate loop header approach analysis generate arbitrary fix loop iteration interaction escape loop loop iteration secondly interpret iteration loop iteration analysis terminate indefinitely approximation termination described switch behavior index generate analysis iteration node denote generate iteration switch behavior execution program important later introduce operation allows reduce significantly actual statically representation naturally illustrate representation variable option node leaf contains sequence decision leaf image KB image variable illustrate acyclic graph representation direction actually expensive efficient representation graph BDDs   avoid redundant subtrees operation operation focus restriction shannon expansion redundancy important shannon expansion manipulate without affect restriction denote subterm switch behavior replace restrict unaffected shannon expansion define shannon expansion creates rewrite manipulate expression expansion valid switch behavior manipulation accord definition switch behavior index therefore remove illustrate shannon expansion without redundancy elimination redundant simplify redundancy elimination sub equivalent redundancy elimination rewrite encode context sensitive information implies redundant subterm reduce without loss information remove redundant subterms redundancy elimination corresponds replace subtree subterms equivalent illustrate redundancy elimination redundancy elimination remove redundant information redundancy elimination remove superfluous information compact representation context sensitive information decision actually redundancy elimination outperform alternative memory efficiency operation code fragment assigns variable statement return sum express correspond illustrate addition operator define integer integer directly image KB image correspond representation return expression illustrates operator leaf exploitation switch behavior furthermore execution statement observation rewrite switch behavior apply operator separately merge transformation illustrate rewrite addition addition individual obvious however apply operator rewrite expression shannon expansion  literature symbolically boolean function  finally apply rewrite operator apply leaf ordinary integer arithmetic simplification redundancy symbolically indicates statement illustrates strength rewrite information compute precise context insensitive approach approximation introduce approximation handle generate analysis ensure analysis termination handle loop approximation option handle introduce precision parameter context memory secondly approximate loop guarantee termination analysis analysis analyze node ssa graph option affect variable grows analysis proceeds reduce finite approximation restrict option approximation manipulation traversal leaf node replace context insensitive approximation height finite approximation depict depth reduce leaf merge image KB image finite approximation loop analysis loop generate newly subterm iteration index loop iteration composition infinite depth non terminate analysis iteration guarantee termination analysis loop approximation analysis loop approximate newly generate approximate subterm union context insensitive subterms approximation easy understand manipulation traversal replace node context insensitive approximation iteration index option option earlier merge approximation lattice integer lattice moreover assume transfer function resp operation integer loop approximation loop iteration stable analysis loop guarantee termination analysis introduce finite approximation loop approximation reduce memory demand ensure analysis termination precision parameter adjust reasonable balance analysis precision memory summary data structure context sensitive analysis information BDDs avoid redundancy capture intra procedural inter procedural evaluation context information addition  backbone theoretical framework guarantee conservative context insensitive analysis transform approximate conservative context sensitive analysis guaranteed fix analysis intermediate consume memory actually upper bound approximation memory footprint analysis exploit assess memory analysis alternative understand acyclic graph node without loss generality assume analysis construct ssa node analyze update data driven node successor inner loop node outer loop ssa program representation eventually attach context sensitive analyze program fix leaf context insensitive constant lattice recall context insensitive without node analysis lattice amount memory symbolic constant vector inner node context sensitive unique node reference leaf node node program contributes analysis function ssa node transfer function update node analysis update correspond situation analyze predecessor output predecessor output node correspond node node situation occurs pointer update analyze predecessor ssa node update another node analysis update correspond accord transfer function situation predecessor context insensitive output update context insensitive accord exists otherwise predecessor context insensitive node output update shannon expansion apply predecessor important constant increase obvious shannon expansion node recursive descent without leaf context insensitive accord respectively recursive ascent shannon expansion update exist elsewhere described monotonously increase memory footprint throughout analysis motivates analysis evaluate memory efficiency evaluate memory efficiency evaluate memory efficiency context sensitive information memory frequently internal representation hash detail context sensitive analysis brief presentation context sensitive analysis memory metric internal representation context sensitive analysis setup memory sensitivity memory sensitivity discus evaluation context sensitive analysis analysis inter procedural static program analysis computes precise reference information abstract program another abstract analysis abstraction syntactic creation corresponds unique abstract execution analyze program analysis variable analyze program associate abstract reference data analysis abstract creation along data dependency graph typical approach analysis   program graph ssa function model specific node merges transport along context insensitive analysis argument target graph propagate mixed analysis merger target furthermore analysis approximate return heap update affect callees context sensitive analysis aim reduce approximation partition target finite context clone graph context sensitivity precise analysis argument target mixed analyze context partition grain depth account concrete analysis depth cfa recent site define context analysis quintuple variable site site site hence triple identifies context identifies variable actual variable context memory metric drawback context sensitivity increase memory maintain context increase depth exponential increase memory memory theoretical issue     evaluate various context sensitive analysis approach report severe memory depth memory metric data structure context context variant hash context sensitive analysis information depth analysis specify quintuple variable context handle analysis depth handle context sensitive data analysis context depth approximation quintuple contribute leaf representation variable memory technique abstract memory metric actual memory measurement actual analysis twofold avoid implementation detail affect actual hence memory metric abstraction memory ideal memory influence parameter constant identify actual memory analysis due handle context information non trivial context obvious approach quintuple generate analysis quintuple memory quintuple related variable artificial corresponds unique context sensitive variable context realistic program variable variable context sensitive memory related tuples associate variable besides memory footprint drawback context lookup access variable context however representation context another approach context sensitive variable tuple unique node leaf context variable context selection context representation guarantee speedy lookup memory efficient variable partially therefore internal node variable node node variable memory associate variable improvement representation avoid duplicate leaf node merge leaf node representative node structure correspond data structure variable lookup mechanism reduce node internal node unique memory associate variable hash representation currently analysis optimize speedy lookup hash analysis algorithm analyze context context variable hence technique context variable furthermore avoid duplicate approach described memory approach context depth compute context triple triple variable context unique hash approach contrast representation explicitly variable hence calculation variable variable analysis context depth maximum depth context variable due redundancy elimination essential context information acyclic graph therefore node variable consequently memory variable data structure complexity introduce memory efficiency memory usage issue related context sensitive analysis however efficiency import analyze program complexity variable context context context hash hence efficient data structure strength memory efficiency setup context information analysis analysis program extract context sensitive analysis variable compute memory metric analysis construct memory metric metric analysis motivate allows memory metric context information data structure without implement maximum memory analysis context sensitive analysis core PhD thesis sensitive data algorithm ssa simulated execution context sensitive approach analysis sensitivity simulated execution data algorithm simulate abstract execution program processing interrupt occurs later resume processing sensitivity modify version sensitivity target context associate site target expression hence distinguish analysis context implicit variable whereas target context sensitivity   sensitivity almost precise sensitivity precision metric however slightly precision sensitivity price magnitude memory sensitivity sensitivity article comparably memory sensitivity substantial memory already memory efficient sensitive analysis instead sensitivity memory footprint sensitivity generate realistic context data tuples sensitivity abstract stack cfa define site stack hence unique variable sensitivity quintuple unique identifier ssa variable context analysis variable context context information tuples benchmark program analyze java bytecode characterize program ssa variable code benchmark program program program upper suite picked program freely available internet recent benchmark program freely available program analyze version java standard library relative tuple analysis relative average tuples variable hence TS indicates variable average quintuple analyze sensitivity tuple obtain ssa variable relative tuple tuple TS tuples variable increase context depth sensitivity benchmark variable tuples construct memory data structure construct structure semantic immutable purpose structure compute correspond memory metric memory sensitivity memory program benchmark analyze sensitivity TS relative metric metric baseline hence antlr percent similarly antlr percent memory accord memory metric rank memory usage parenthesis average baseline average memory explain metric account additional memory cannot compensate quintuple internal node definition reduction memory indicates reuse leaf node effective reduce memory speedy lookup however reduction memory memory efficient representation memory footprint without loss precision accord memory metric average memory approach understand closer typical context sensitive percentage benchmark context sensitive representation consists leaf another variable define quintuple average variable memory node accord accord difference due redundancy elimination remove internal node variable image KB image various metric redundancy elimination reduces memory footprint benchmark information relative tuple  tuple  variable TS TS TS antlr javadoc jython  soot    pmd average median important understand memory efficiency percentage variable consist quintuple independent context average variable sensitive analysis context sensitive variable average define quintuple variable benefit analysis depth argument context sensitivity   however   increase depth beyond important application grain context information context sensitive variable complex structure hash redundancy elimination deduce majority structure simplify identify reduce analysis context independent context remain depth reduction redundancy elimination redundancy elimination reduces truly context sensitive depth reduction superset manage reduce depth average variable redundancy elimination superset depth reduction construction variable benchmark average involves redundancy elimination hence accord memory metric sensitivity reduce memory context independent manage reduce complex context sensitive analysis memory sensitivity memory metric benchmark program sensitivity summary mutual ranking memory footprint maintain significantly memory however maximum depth tuples per variable reduce redundancy elimination pronounce summary rank memory usage    TS TS TS finally summary memory related chosen memory indicator memory axis average relative memory memory metric context insensitive analysis definition baseline growth rate memory depth context increase increase depth costly data structure handle context sensitive program information due redundancy elimination moderate growth rate increase depth increase depth image KB image relative memory various analysis TS TS TS relation previous reuse informal description definition conference formal presentation framework context sensitive program analysis     efficient approach constant propagation graph approach restrict constant propagation whereas apply data analysis shannon expansion operator leaf operation evaluate graph operator node remain scatter graph moreover evaluation leaf automatically remove redundancy satisfiability modulo theory smt sensitive analysis verify safety program approach satisfiability module program enumerates exist program satisfiability theory formula program approach precise program   approach apply data analysis ssa representation program derive variable predicate ssa variable program predicate contains detailed information predicate decision influence variable variable predicate later fed smt solver verify program abstraction sensitive approach  context influence variable disregard detailed information predicate context active precision performance handle program precision context sensitive analysis memory consumption implies data structure efficient memory usage operation manipulation structure usage binary decision diagram BDD approach exploit analysis zhu zhu  approach analysis symbolic pointer memory source domain target reference pointer relation model graph correspond unique boolean formula domain boolean domain function boolean function capture BDDs update analysis BDD operation memory preserve update performance BDDs minimize representation data relation variable abstract binary program BDD approach reduces memory partially redundant evaluation approach beneficial execution memory consumption  lam clone invocation context insensitive analysis extend graph clone context sensitive analysis context sensitive relation capture BDDs efficient memory usage benchmark context insensitive context sensitive analysis variant   conclude analysis sensitive usage BDDs capture analysis data allows increase analyze program author discus precision efficiency context sensitive analysis precision application dependent efficiency depends analysis analysis framework paddle sensitivity BDD representation context sensitive information reduction memory usage sensitive analysis accuracy  introduce  sensitive inter procedural data analysis program data vertex graph feasible analysis memory efficiency capture BDDs usage BDD memory efficient approach capture context sensitive information introduces systematic approach generalize context insensitive context sensitive analysis BDDs apply analysis importance utilize dimension sensitivity static program analysis improve analysis precision framework capture dimension sensitivity context trace sensitivity encompass variety analysis dimension combination thereof abstract interpretation context sensitive analysis instance framework furthermore importance sparse representation handle analysis data without implementation detail focus data structure sparse representation therefore efficient flexible data structure handle analysis information analysis generate framework summary static program analysis important optimize compiler software engineering program verification model analysis context sensitive insensitive analysis distinguish analysis execution context sensitive analysis precise context insensitive counterpart expensive memory consumption memory related context sensitive analysis theoretical issue evaluate various inter procedural context sensitive data approach report severe memory depth explosion issue program verification model capture context sensitive analysis program ssa graph execution program node mapped alternative analysis graph without redundancy generalizes  memory efficient representation context sensitive analysis information furthermore operation context sensitive analysis implement transfer function analysis define restriction shannon expansion correspond  operation conditional execution context grows exponentially program iteration countably infinitely context memory efficiency context data exist analysis memory usage data structure context sensitive information outperform alternative memory efficiency analysis depth memory data structure without loss precision context sensitive data analysis memory gain increase context analysis phase increase depth precise analysis evaluate memory efficiency implementation concrete analysis scenario future future apply methodology inter procedural analysis static garbage collection synchronization barrier removal intra procedural analysis