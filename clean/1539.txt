popularization android platform android application apps manage sensitive data android ecosystem attractive target malicious software researcher practitioner investigate approach address android security issue technique leverage dynamic analysis android sandbox mining sandbox approach consists dynamic analysis benign version android app exploratory phase sensitive apis later information prevent sensitive apis exploratory phase dynamic analysis version app execution fuzzing warn malicious behavior whenever version app sensitive api exploratory phase mining sandbox approach effective technique android malware analysis previous research reveal particularly exist report accuracy almost identification malicious behavior dynamic analysis android sandbox however although dynamic analysis mining android sandbox investigate potential benefit combine static analysis mining sandbox approach identify malicious behavior accordingly investigate impact static analysis complement performance exist dynamic analysis tailor mining android sandbox task identify malicious behavior conduct non replication previous hereafter BLL performance generation mining android sandbox differently isolate independent static analysis component DroidFax android apps decision motivate DroidFax influence efficacy dynamic analysis positively execution specific static analysis algorithm DroidFax implement investigate efficacy taint analysis algorithm complement mining sandbox approach previously identify malicious behavior execute flowdroid source sink benign malign android apps previous research brings finding instance reveals DroidFax alone static analysis detect malwares BLL dataset contribute substantially performance dynamic analysis BLL taint analysis practical complement mining sandbox approach performance dynamic analysis previous keywords malware detection mining sandbox android platform static analysis dynamic analysis introduction almost mobile technology  android operating dominate smartphones tablet others electronic device due popularity incident related android malicious software malware significantly increase researcher report substantial increase population android malwares sample sample security issue android software application become relevant research topic technique developed identify vulnerability android apps static analysis algorithm identify privacy leak reveal misuse cryptographic primitive instance another alternative user android malicious behavior consists dynamic analysis android sandbox sandbox approach exploratory phase practitioner advantage automatic generator explores android application sensitive apis app sensitive comprises sandbox infrastructure exploratory phase sandbox monitor sensitive apis user app identify exploratory phase thereby android user additional malicious behavior argue dynamic analysis mining sandbox instead static analysis mostly  static analysis assume behavior actually addition code dynamic feature reflection additional challenge static analysis algorithm dynamic feature program introduce malicious behavior reasonable previous research empirical assessment limitation static analysis sandbox consequently approach dynamic static analysis complement mining android sandbox lack understand static dynamic analysis complement hereafter BLL empirical explores performance dynamic analysis identify malicious behavior mining sandbox approach leverage DroidFax android apps comprise benign malicious version app information sandbox sensitive apis although author report precision dynamic analysis differentiate benign malicious version apps author ignore DroidFax statically analyzes android apps sensitive apis besides apps discus DroidFax static analysis component overestimation performance dynamic analysis mining sandbox introduce threat conclusion security domain overestimate performance technique malware identification brings serious risk DroidFax inflate significantly performance dynamic analysis mining sandbox report BLL goal fold external non replication BLL advantage DroidXP suite researcher integrate generation performance mining android sandbox implementation DroidXP conference initial evaluation DroidXP DroidXP evaluation reveal overestimation performance dynamic analysis report BLL motivate conduct non replication extend previous couple customizations DroidXP reproduce BLL series reveal actual performance dynamic analysis revisit DroidXP discus setup replication explore static analysis approach taint analysis complement mining sandbox technique identify malicious behavior  benign application dataflows source sink statement compute execution flowdroid infrastructure execution analyzes benign version android app execution analyzes malicious version taint analysis approach identify malware whenever dataflow source sink execution detail setting taint analysis altogether brings contribution replication BLL clarifies performance dynamic analysis mining android sandbox replication evidence previous overestimate performance dynamic analysis without DroidFax independent component BLL performance comprehension role static analysis mining sandbox benefit static dynamic analysis detect malicious android apps addition evidence static analysis approach taint analysis performance dynamic analysis approach differentiate benign malicious version app reproduction package available online script statistic analysis reproduce extend repository DroidXP available github background related introduce concept terminology understand remainder introduces background information sandbox invalid access sensitive resource review mining sandbox approach detect malicious behavior android apps finally background information taint analysis sandbox approach resource sandbox isolated environment electronic device within application cannot affect program outside boundary file network device data sandbox enable execution unsafe untested code malware without worry integrity electronic device application arise variety situation execute software input untrusted user malware analysis security mechanism trust compromise sandbox environment shield host machine operating damage software sandbox environment minimum requirement program program impact resource outside sandbox assign program privilege principle privilege permission user accord successfully perform task principle prevents escalate privilege unauthorized access resource thereby improve overall reliability within android ecosystem privilege realize sandboxing apps access data apps app access user resource contact location specific apis application program interface guard permission google primary source android apps flexible policy regard apps  therefore administrator remove android apps issue related spyware malware security google app request permission however malicious apps usually permission apis normally permission user app installation android version user careless interested nowadays malware becomes stealthy hacker avoid anti virus signature instance obfuscate native code conduct attack benign app mining android sandbox mining android sandbox approach relies generator explore android app dynamic behavior sensitive resource app sandbox sensitive apis ensure app execution security restrict resource mining sandbox approach phase exploratory phase practitioner generator execute benign version app sensitive apis app phase execution sandbox constraint app access sensitive apis phase accordingly sandbox ensures malicious app sensitive api besides apis phase automatically mining software resource component infer behavior instance combine dynamic static analysis api mining infer program behavior usage java propose machine approach specification mining discover temporal data dependence relationship program interact api abstract data purpose generator program crash bug nonetheless generator explore program behavior dynamic analysis assist task building sandbox regard generator mining android sandbox   propose DroidMate generation implement pseudo random graphical user interface gui exploration strategy approach leverage generation extract sandbox apps propose DroidBot generator explores sensitive resource access android apps model exploration strategy author comparison DroidBot monkey regard malware analysis DroidBot trigger sensitive monkey sensitive android context occurs android app functionality access leak android user sensitive data sensitive access user location network information humanoid another generator android actually DroidBot evolution gui generator interact android apps contrary random input generator humanoid model generate input prioritize interaction gui accord importance comparative generator identify malicious behavior mining sandbox approach indicates efficient identify malware specific dataset report combine generator detect malicious behavior explore however focus interference static analysis DroidFax apps discus DroidFax performs static analysis apps complement dynamic analysis approach mining sandbox taint analysis taint analysis static dynamic analysis aim data within program typically taint analysis identify sensitive information leakage detect taint source sink context android apps data leak occurs sensitive data contact device ID sensitive resource sink information peer message taint analysis malicious data malware detection source sink relationship unwanted behavior thereby taint analysis monitor sensitive source taint app pre define android context source apis apps access sensitive information sensitive apis analysis data sink sends SMS brings precise information data leak android sdk apis apps private data apps device remote device apis sensitive data leakage security critical attention listing data leakage device information capture source leak sink SMS transmission image KB image propose scalable taint analysis android apps applies traditional taint analysis technique target optimization specific android OS flowdroid improves precision traditional approach context sensitivity significant issue taint analysis hamper performance  mitigates issue introduce intermediate abstraction perform analysis taint graph  improve efficiency precision  focus explore propagation taint traditional data analysis  construct taint graph  explore taint extract subset potential taint PTFs  improves analysis perform analysis PTFs investigate taint analysis identify malicious behavior mining source sink distinct version app setting research aim understand static analysis android sandbox explore benefit combine taint analysis sandbox approach identify malicious behavior static analysis approach mining sandbox ineffective due  however knowledge empirical static dynamic analysis mining sandbox BLL explore mining sandbox approach performance dynamic analysis DroidMate DroidBot puma  monkey identify malicious behavior nonetheless research involve external static analysis component DroidFax impact malware identification lack understand implication static analysis mining sandbox motivates research investigates research RQ impact DroidFax static analysis algorithm BLL estimate impact detect malwares RQ effective performance sandbox detect malware discard contribution DroidFax static analysis algorithm RQ benefit taint analysis algorithm complement dynamic analysis approach mining sandbox additional malwares identify research RQ RQ allows understand relevance combine static dynamic analysis mining android sandbox moreover explore RQ RQ reveal overestimation performance dynamic analysis BLL research RQ allows possibility strategy malware detection complement performance dynamic analysis static analysis algorithm conduct empirical research address research RQ RQ empirical goal conduct non replication BLL conduct empirical DroidXP simplifies execution performance dynamic analysis task identify malwares mining sandbox approach setting empirical empirical flowdroid investigate suitability taint analysis algorithm complement mining sandbox approach identify malwares target research RQ setting empirical DroidXP benchmark implement DroidXP systematically ass performance generation mining android sandbox allows integration comparison generation mining sandbox simplifies reproduction DroidXP relies command interface cli simplifies integration generation setup execution DroidXP relies DroidFax android apps relevant information execution sensitive apis app execution DroidFax inter component communication ICC static program analysis DroidXP cli command listing generation execute project option integrate command execute configure accord parameter specifies specifies threshold execution specifies repetition output format specifies output format debug specifies debug mode default false disable static analysis disable DroidFax static analysis phase default false DroidXP architecture pipe filter architectural style architecture component component responsible specific phase execution instrumentation execution analysis phase instrumentation phase researcher define corpus apk file DroidXP execution DroidXP DroidFax service apk file DroidXP data sensitive apis execution improve performance DroidXP instrumentation phase apk phase DroidFax static analysis procedure option disable static analysis phase execution phase DroidXP installs already apk file android emulator executes generation generation apk file repeatability DroidXP remove data emulator execution execution emulator without information previous execution relatively easy generation DroidXP indeed override abstract accord strategy phase analysis execution apps data relevant research  android sdk native  dump android emulator already app execution analyze phase comprises data within android app phase DroidFax data coverage execution generator sensitive apis app execution sensitive apis estimate generator performance identify malicious apps difference sensitive api access version app benign malign DroidXP output performance generator mining sandbox DroidXP infrastructure conduct empirical setting replication BLL BLL report empirical performance generation android sandbox BLL compute impact DroidFax performance generation replicate understand impact DroidFax static analysis algorithm BLL replication differs decision isolate DroidFax static analysis algorithm task identify malicious apps addition although dataset android apps BLL discard originally  repository introduce recent generator previous finally extend execution generation execute app generation instead built sandbox execute generation execute generation important goal conduct replication BLL instead understand role DroidFax static analysis algorithm performance generation mining sandbox besides humanoid considers generation BLL DroidBot DroidMate monkey DroidBot  achieve performance detect malicious behavior android apps BLL important version DroidMate DroidMate enhancement comparison previous version google monkey source mostly widely generation android monkey android sdk additional installation effort humanoid recent emulates realistic user input technique data collection similarly BLL besides coverage information sensitive android platform generation sensitive  privacy framework execute DroidXP configuration WOS execute DroidXP dataset android apps benign malign version generation DroidBot DroidMate monkey humanoid disable static analysis option DroidFax disables execution DroidFax static analysis component WOS configuration generation limit configuration WS execute DroidXP dataset android apps execute fake generator joker without disable static analysis option joker simulates android apps execution usage estimate actual performance DroidFax static analysis component WS configuration execution phase DroidXP sensitive apis estimate performance static analysis component DroidFax RQ differently WOS configuration disables static analysis component DroidFax estimate performance generation mining android sandbox RQ comparison purpose execute generation DroidFax static analysis component data analysis DroidXP dataset sensitive apis benign malign version app execution generation estimate performance generation percentage malwares dataset sandbox identify recall sandbox exploratory phase mining sandbox approach exploratory phase sensitive apis benign version app execution generation similarly BLL sandbox app identifies malware whenever malicious version sensitive api exploratory phase sum analyze performance generation joker sensitive apis benign malign version apps execution generate observation observation contains repetition boolean reporting DroidFax static analysis component boolean malware identify descriptive statistic plot performance RQ RQ logistic regression understand statistical relevance contribution feature repetition DroidFax static analysis component malware identification hypothesis DroidFax static analysis component positive performance sandbox identify malwares image KB image overview approach malware identification taint analysis malware identification empirical investigate taint static analysis approach promising identify malwares version app assume secure goal research RQ leverage flowdroid taint analysis algorithm android apps version identify dataflows leakage sensitive information goal investigate detect malicious behavior divergent source sink flowdroid reveals analyze benign malign version android app data collection flowdroid input android application package apk file api marked source sink source access sensitive information access user location sink information external peer sends message recipient rely source sink definition flowdroid implementation involves curate source sink callback android api flowdroid context sensitive analysis identify dataflow source sink data collection approach involves execute flowdroid source sink benign version app enumerate dataflows source sink secure analysis flowdroid execution malicious apk version app source sink important source sink malign specific methodology identify malwares taint analysis report malware flowdroid additional source sink malicious version app identify analyze benign version therefore compute difference empty assume flowdroid identify malware dataset android apps empirical data analysis metric malicious apps flowdroid execution taint analysis algorithm app similarly empirical descriptive statistic plot performance taint analysis mining sandbox approach logistic regression understand statistical significance benefit flowdroid comparison DroidFax static analysis component hypothesis flowdroid outperforms detect malware sandbox generate DroidFax static analysis component discussion detail finding BLL replication taint analysis malware identification respectively summarize implication BLL replication replication BLL previous execute analysis DroidXP benchmark default configuration however isolate static analysis component DroidFax estimate performance dynamic analysis mining android sandbox summarizes execution exec WS exec WOS malwares identify execute DroidFax static analysis algorithm WS without DroidFax static analysis algorithm WOS impact percentage extent DroidFax static analysis algorithm influence performance sandbox execute generation calculate impact impact DroidFax significant DroidBot humanoid BLL author discussion influence DroidFax performance generation influence negligible joker fake generation execute apps benchmark execution DroidFax improves performance joker execute dynamic analysis discus individual generation summary  WS exec WOS impact DroidBot monkey DroidMate humanoid joker DroidBot execution exec WS sandbox detect malware dataset detect apps malicious behavior BLL DroidBot generation sandbox detect malicious apps moreover execution exec WOS remove DroidFax static analysis reduce DroidBot performance impact monkey execution exec WS sandbox detect android apps contrast monkey sandbox detect malwares within difference due monkey random strategy generation outcome execution BLL author outcome execution execution exec WOS reduction monkey performance sandbox detect malwares DroidMate execution exec WS sandbox detect apps malicious behavior BLL DroidMate detect malwares apps execution exec WOS without DroidFax static analysis algorithm sandbox performance detect android apps humanoid performance previous coverage comparison monkey DroidBot DroidMate humanoid interact apps model generation simulate environment generate input effective android sandbox comparison technique rely random monkey execution exec WS humanoid sandbox identify malwares dataset humanoid affected execution exec WOS sandbox reduction detect malwares BLL explore humanoid baseline comparison previous joker fake generation understand performance DroidFax static analysis algorithm mining sandbox integrate joker DroidXP benchmark additional generation android apps analysis joker reveals performance DroidFax static analysis algorithm alone execution DroidFax static algorithm enable joker execute android apps sandbox detect malwares execution disable DroidFax static analysis algorithm joker sandbox detect malware therefore DroidFax alone detect malicious version apps image KB image venn diagram summarizes complement diagram malwares detect sandbox generate execution DroidFax static analysis algorithm malwares identify sandbox addition DroidMate sandbox detect malware detect differently monkey sandbox detect malwares detect sandbox DroidBot sandbox detect malwares detect sandbox humanoid sandbox detect malware detect sandbox contrast BLL DroidMate combination monkey DroidBot humanoid improve performance integrate environment mining android sandbox image KB image altogether ignore joker reveals humanoid DroidBot malicious apps investigate detect sandbox generate DroidFax static analysis algorithm investigate DroidFax static analysis component statistically significant benefit malware identification logistic regression model logistic regression analysis highlight humanoid negative significant impact malware identification DroidFax static analysis positive significant impact malware identification image KB image venn diagram highlight sandbox complement besides execution WS none sandbox detect malwares dataset accord  malwares  trojan  potentially unwanted program exploit additional arises characteristic malwares identify mining sandbox approach explore advantage  reverse engineer malwares analysis compute diffs benign malicious version apps activity available replication package dissect malwares identify characteristic malware none sandbox detect goal intuition malware mining sandbox approach detect reader interested detail skip logistic regression   DroidBot DroidMate humanoid monkey DroidFax static analysis repetition AIC num malicious version app com   DroidBot humanoid sandbox detect analysis malicious version android manifest file permission SMS message listing permission malicious app  message without user confirmation instance indicates code malicious version app  malware malicious version  introduces behavior sensitive information international mobile equipment identity IMEI sends SMS message listing image KB image image KB image malicious version app com   manifest file additional permission behavior app malicious code sandbox detect malware malicious version app android manifest file permission access network wifi listing app status network configure wifi network image KB image malicious version introduces actually network wifi information mac address network listing information http request image KB image sandbox detect malicious version app  android  malware android manifest file request permission access location service listing permission allows access location feature global gps phone enable malicious application feature phone owner classic document privacy threat image KB image addition malicious app  monitor geographic location user sink information web server listing sensitive information image KB image android manifest file characterizes malwares mining sandbox approach excels vein malicious version app com   apps none sandbox detect indeed malicious version android manifest file modify meta data admob publisher ID admob monetize service google admob publisher identifier account redirects advertisement revenue another destination observation envision integrate approach modification android manifest file complement mining sandbox approach task detect malwares mining sandbox approach detect malicious package introduce sensitive apis image KB image taint analysis malware identification taint analysis approach difference benign malicious version android apps dataset leverage flowdroid sensitive information apps taint analysis algorithm regard accuracy taint analysis approach detect dataset taint analysis implementation flowdroid alone outperforms monkey DroidMate humanoid sandbox compute execution without DroidFax static analysis algorithm static analysis algorithm promising complement mining sandbox approach image KB image additionally investigate benefit combine static analysis strategy flowdroid DroidFax venn diagram summarize combine flowdroid DroidFax detect malicious apps compatible performance response execution generation considers DroidFax static analysis algorithm malicious apps identify malwares flowdroid DroidFax completely static analysis approach furthermore flowdroid effective DroidFax alone detect malicious apps detect DroidFax DroidFax detect malicious apps detect flowdroid logistic regression analysis model malware response variable malware detect flowdroid sandbox DroidFax static analysis component generates reveals existence significant difference performance image KB image execution flowdroid feasible analysis per app average processing min analyze android apps execute flowdroid analysis depends app summarizes flowdroid execution concludes execution average standard deviation logistic regression   flowdroid DroidFax static analysis component AIC num image KB image venn diagram highlight benefit integrate flowdroid DroidFax implication evidence BLL overestimate performance dynamic analysis malware identification mining sandbox implication researcher practitioner revisit literature DroidFax alone effective mining sandbox identify malwares dataset moreover DroidFax identifies malwares none generate sandbox increase performance sandbox humanoid previous summarizes execute mining sandbox approach without DroidFax static analysis humanoid sandbox identify malwares malwares dataset conversely DroidBot sandbox achieve performance detect malware without DroidFax static analysis identify malwares message researcher practitioner explore DroidFax conjunction dynamic analysis technique mining sandbox review finding BLL enrich discussion limitation static analysis mining sandbox flowdroid explore novel approach malware identification aim source sink version app secure another  inject malicious behavior contrast static analysis limitation finding approach effective malware identification indeed taint analysis approach flowdroid detects malwares none sandbox generate dynamic analysis plus DroidFax static analysis component identify implication academia reinforces benefit integrate static dynamic analysis malware identification suggests practitioner benefit integrate approach combine mining sandbox approach taint analysis malware identification malwares detect increase taint analysis approach   DroidBot monkey DroidMate humanoid joker threat empirical limitation threat validity organize taxonomy chapter conclusion validity concerned issue compromise conclusion causal relation treatment output inadequate statistical statistical significance threat conclusion validity besides descriptive statistic plot leverage binomial logistic regression conclusion empirical indeed logistic regression analysis evidence existence data DroidFax static analysis component increase performance sandbox built execution dynamic analysis flowdroid outperforms DroidFax static analysis component task identify malwares internal validity relates external factor impact independent variable without researcher knowledge empirical technology orient threat nonetheless due random behavior generation validate without presence random execution mitigate threat configuration DroidXP multiple computes average execution adequately BLL beyond apps execute apps due crash android emulator however goal conduct replication previous actually understand static analysis complement mining sandbox approach malware identification construct validity concern issue prevent researcher conclusion experimental involves treatment factor DroidFax static analysis component independent variable app factor generation factor DroidBot DroidMate monkey humanoid factor repetition execute apps without DroidFax static analysis component dependent variable indicates malware identify sandbox generation built without DroidFax static analysis component repetition observation conformance recommendation arcuri  straightforward comprise factor treatment flowdroid DroidFax static analysis apps dependent variable indicates malware identify flowdroid sandbox DroidFax static analysis component generates sufficient conclusion logistic regression external validity concern researcher generalize scenario threat BLL apps  dataset release dataset category android malware besides generation mitigate threat enrich generalization research available DroidXP future evaluate generation malware datasets conclusion report empirical explore technique android malware identification non replication previous research investigates android mining sandbox approach malware identification report malwares dataset detect sandbox built execution generation monkey DroidMate replication reveal performance achieve enable static analysis component DroidFax suppose android apk file independently contributes building sandbox statically DroidFax overestimation performance mining sandbox approach dynamic analysis indeed execution DroidFax alone enable generate sandbox identify malwares dataset investigate approach taint analysis malware identification promising taint static analysis approach detect malwares dataset combine taint analysis mining sandbox approach identify malwares dataset implication researcher practitioner review literature empirical evidence mining sandbox approach benefit dynamic static analysis practitioner improve malware identification combination mining sandbox approach taint analysis nonetheless mining sandbox approach taint analysis limitation identify malware sensitive apis benign version app mining sandbox approach similarly identify malware source sink correspond benign version app taint analysis approach mitigate limitation envision approach machine algorithm classify non code asset android manifest file symbolic execution differentiate malicious source sink