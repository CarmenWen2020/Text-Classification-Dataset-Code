orient code concept software engineering refer development commonly software emergence mobile apps code identify research community mobile specific code code symptom important performance issue bottleneck despite multiple empirical code diffuseness evolution along remains unclear article empirical inspects introduction evolution removal android code relies data extract apps manual analysis remove commits discussion android developer finding reveal diffuseness mobile specific code release pressure removal code generally maintenance activity developer refactor instance aware introduction mobile apps establish mainstream software deployed successfully invade software retain user mobile apps generally rely software development classical software manifest particularity embed device performance constraint specificity mobile apps remain fluid efficient continuously perform complex task consequence development satisfy requirement qualify code propose catalogue android specific code violate performance guideline code originate official documentation developer reporting blog code memory resolver describes non compliance official recommendation implement memory resolvers inside activity research community extend catalogue aspect mobile specific code performance impact code inspect multiple hinder app performance increase consumption research propose automate detect mobile code   empirical previous assess role played developer  mobile code quantify survival initial understand mobile code hinder app quality however research remains lack knowledge various aspect code lack extent analysis propose code detection quantify code instance android iOS apps however none analyse diffuseness code comparison important distinguish code prioritize detection refactoring future diffuseness analysis important precisely ass code prevalence code frequent host entity source code diffuseness analysis alleviates precisely frequent code occurrence host entity lack release analysis leveraged mobile apps understand code specifically previous evaluate impact release code survival however ass impact release introduction removal code release usually factor favour code technical debt developer code rapidly deadline regardless quality constraint besides mobile apps frequent release update contribute prevalence mobile code potential factor important analyse impact release presence mobile code lack qualitative analysis previous interviewed developer understand usage  anticipate performance bottleneck mobile apps insight adequacy static analyser mobile code nonetheless facet code qualitative investigation lack knowledge developer remove mobile code source code knowledge important ass developer awareness mobile code developer refactor code intentionally removal technique developer  future code refactoring article address lack research RQ frequent diffuse mobile code introduction RQ release impact introduction removal mobile code RQ developer remove mobile code RQ developer refactor mobile code artefact previous perform empirical leverage quantitative qualitative analysis inspect introduction removal android code specifically analyse evolution code instance RQ RQ manually explore code removal RQ finally interview remove developer RQ regard frequency diffuseness important discrepancy code memory resolver leak inner diffuse affect activity inner respectively release impact introduction removal code source android apps code instance remove however removal mostly source code removal mention refactoring developer author removal confirm action intentional refactoring developer aware android code necessarily refactor code init OnDraw recognize participant refactored developer intentionally refactor code affirm action driven assist built code analysis developer refactor android code  performance impact usefulness refactoring developer prefer handle performance issue arise instead anticipate comprehensible replication package data analysis script extract data qualitative analysis remainder article organize explains report interprets discus expose threat validity finally analysis related concludes finding perform rely artefact built previous mobile code leveraged dataset code data approach analyse data research dataset previous dataset mobile specific code dataset built sniffer android apps mobile code containment purpose sniffer code content dataset sniffer sniffer source toolkit android specific code tackle issue git mining community detect rename sniffer code repository app  extract commits metadata release commit author analysis source code commit separately detect code instance finally code instance repository metadata output database performance sniffer manually validate commits randomly sample source android apps validation detect code introduction code removal code dataset android specific  detectable sniffer code performance orient originate catalogue  unlike android code objective exist code cannot introduce remove gradually hence introduction removal attribute specific commits without confusion code highlight source code entity mention performance resource impact code code leak inner lic android anonymous non static inner reference prevent garbage collector memory outer anymore memory leak entity inner impact memory member ignore mim occurs constructor access non static attribute static invocation static faster dynamic invocation framework recommends static entity impact cpu memory resolver  code occurs activity implement  operating memory allocate unused memory implement operating entity activity impact memory hashmap usage  usage hashmap  manage android  entail auto boxing primitive convert generic issue generic primitive byte respectively therefore framework recommends  data structure memory efficient entity impact memory UI overdraw  UI overdraw situation pixel screen drawn frame happens UI consists unneeded overlap layer hidden background avoid situation canvas  api define boundary  entity impact gpu unsupported hardware acceleration  android operation execute gpu rare operation execute cpu  android graphic canvas avoid reduce cpu load entity impact cpu init OnDraw IOD  occurs allocation inside  routine  responsible invoked per therefore allocation init avoid inside avoid memory churn entity impact memory unsuited lru cache ucs android cache frequently recently lru api code occurs lru initialize without available memory via  available memory considerably accord device adapt cache available memory entity impact memory content sniffer source android apps dataset code instance apps summarizes content dataset worth file file xml configuration etc analyse version apps commit dataset november october content dataset   data analysis subsection approach analyse data research report metric define purpose code affect specific entity source code therefore compute metric diffuseness focus entity instance code init OnDraw affect entity compute percentage affected allows focus relevant source code precise vision code diffuseness app diffuseness code affect entity define instance diffuseness code memory resolver  app memory resolver instance app activity metric  code  instance introduce dataset affected  percentage apps affected code  diffuseness code instance source code app  instance remove dataset  percentage instance remove code  instance remove source code removal code  percentage instance remove source code removal commit commit  code instance introduce commit commit  code instance remove commit distance  distance commit release commits  distance commit release metric code remove code remove  source code modification code removal code removal host entity remove instance code memory resolver remove removal code remove host activity remove commit RQ frequent diffuse mobile code introduction inspect prevalence code compute code metric introduction affected apps metric prevalence code obtain precise assessment prevalence metric diffuseness compute diffuseness code app dataset finally plot distribution diffuse code host entity release impact introduction removal mobile code research focus impact release code evolution ensure relevance investigation paid careful attention suitability apps release inspection manually checked timeline app verify publishes release exclude apps release apps stage instance  app release commits commits release hence app extent release irrelevant research apps release apps artefact worth android apps continuous delivery release analysis minor release allows perform grain release analyse apps evaluate impact release code introduction removal visualize project evolution source code code along release plot evolution code diffuseness apps visualization insight impact release evolution code accurately impact release analyse approach release introduction removal perform commits therefore metric distance release release distance release aim evaluate relationship distance release code introduce remove per commit purpose assess correlation distance release commit introduction commit removal spearman rank coefficient spearman non parametric ass relationship variable described monotonic function adequate analysis normality variable ass linearity release metric release extract commit commits author release commits author release commits author release commit introduction commit removal mann whitney cliff mann whitney confidence distribution introduction removal identical quantify presume difference cliff cliff non parametric report robust reliable cohen moreover suitable ordinal data assumption distribution interpretation guideline negligible medium RQ developer remove mobile code quantitative analysis compute code metric removal removal gain insight action code removal compute code remove code remove metric code remove report percentage code instance remove source code removal metric code removal technique identify grain action remove code opt qualitative analysis qualitative analysis objective analysis understand code remove achieve manually analyse sample code removal stratify sample statistically significant sample code randomly code removal dataset statistically significant stratify sample confidence interval removal detect dataset stratum sample code sample commits sample analyse remove commit inspect aspect commit action source code modification removal code instance aspect code theoretical remove inspect commits identify action concretely remove code codebase commit message checked message mention code removal regard aware developer refer without explicitly mention therefore thoroughly commit message implicit mention code removal RQ developer refactor mobile code objective verify code removal detect actual refactoring operation purpose randomly remove developer developer perform code removal remove developer identify dataset afterwards filter developer email git commits developer contact email developer remove code concerned code definition code snippet illustrates aware code refactor code intentionally objective capture developer knowledge awareness code allows code removal author developer intend refactorings outcome refactor code refactor code developer express mobile code explain choice refactoring developer response rate rate expectedly developer multiple code instance impose deeper investment recall understand participant code unsupported hardware acceleration unsuited lru cache none respond developer involve code indeed rare dataset respondent text developer topic perform online interview interview textual developer additional consequently detailed transcribed interview recording text  approach allows focus informational content faithful transcription interview qualitative inspection analyse analytical strategy schmidt adapt analysis rely semantic category developer refactor code developer refactor code encode developer identify passage relate category passage formulate sub category sub category refactoring code avoid redundancy sub category later report research report worth facilitate replication companion artefact RQ frequent code introduction report code introduce percentage apps affected analyse apps code instance introduce reflect widespread code android apps nonetheless code frequently introduce indeed significant disparity code code leak inner member ignore introduce unsuited lru cache init OnDraw introduce highlight observation code introduction code  introduction affected apps frequently introduce code leak inner member ignore source code entity static performance optimization UI related code UI overdraw unsupported hardware acceleration init OnDraw frequently introduce code regard affected apps apps code introduction highlight widespread phenomenon disparity introduction frequency reflect percentage affected apps frequent code tend affect apps however instance imply affect apps memory resolver leak inner member ignore respectively affected apps obtain vision disparity report diffuseness code within host entity apps memory resolver diffuse code dataset apps code activity leak inner diffuse apps affected inner code host diffuse average affected UI overdraw init OnDraw generally affected finally code host diffuse member ignore hashmap usage unsupported hardware acceleration unsuited lru cache diffuseness surprising RQ release impact introduction removal mobile code report release analysis apps release regularly app generate code evolution curve artefact curve depicts evolution code  client app highlight release code approach release manual examination evolution curve tendency code increase decline immediately release generally code evolves important growth stage feature development growth stabilizes project maintenance phase naturally analyse project component module remove project code  app regardless growth code project observation align lehman growth decline quality increase code indicator decline quality image KB image evolution code android apps isolate impact project generate evolution curve code diffuseness curve generate android apps inspection curve impact release code diffuseness sometimes abrupt peak code diffuseness explicitly related release diffuseness evolution raw code however trend emerge frequently consistent consistent decline stability consistent code diffuseness  project project code per consistently code per commits code diffuseness decline lifetime  app stage project diffuseness around per decline progressively around per  app depict stable code diffuseness despite abrupt peak initial commits code diffuseness along commits apps code evolution random along project lifetime instance  app evolution curve indeed diffuseness evolve constantly commits decrease initial diffuseness beyond manual analysis assess impact release metric distance release release distance release scatter plot relationship distance release code introduction removal per commit leap similarity plot code introduction removal similarly distribute regard distance release code introduction removal negatively correlate visually correlation distance release code introduction removal indeed spearman rank correlation coefficient confirm absence correlation correlation threshold hence compute coefficient statistically significant correlation coefficient negligible conclude monotonic relationship distance release introduction removal per commit release analyse impact distance release investigate impact release code introduction removal density function code introduction removal timing code introduction removal distribute similarly timing density function code introduction removal analogous image KB image density function code introduction removal release comparison code introduction perform commits perform release probability code introduction commits perform release tend around code introduction introduce code commits author release necessarily code introduction code removal distribution timing infer release visible impact code introduction removal confirm observation  introduction perform release code significant difference code introduction date release confirm quantify difference negligible commit introduction commits author release  similarly code removal commits author release code introduction difference commits insignificant negligible regardless code observation difference introduction removal tendency commits author release worth UI overdraw init OnDraw unsupported hardware acceleration unsuited lru cache instance insufficient perform statistical hence applicable code image KB image commit removal commits author release  RQ developer remove mobile code quantitative analysis report percentage removal average code instance remove code separately removal rate varies member ignore remove code instance remove along unsupported hardware acceleration remove code instance remove code coherent removal percentage instance remove report percentage  instance remove within source code removal code remove overall code removal remove source code code member ignore code removal accompany removal host entity member ignore code rarely remove source code removal code remove percentage code removal code  removal removal code remove code remove remove commits commits remove code instance percentage code delete remove commits delete code commits delete codebase code removal commits perform code deletion average remove commits delete commits remove code discrepancy percentage code delete codebase remove commits delete codebase whereas portion non remove commits delete codebase image KB image percentage delete remove commits commit deletion deletion    remove median qualitative analysis summarizes manual analysis remove commits code analyse instance breakdown action remove percentage message mention removal subsection report detail code removal action report sake clarification remind code action perform remove reporting action analyse sample code leak inner lic manual analysis code    inner inner static  remove  activity transform activity  remove statement  remove statement   remove statement  remove statement  remove statement removal inner static remove inner commit action lic instance remove inner remove code instance commit  app fix bug remove unused code non static inner hence commit remove lic instance bug fix explains percentage code remove lic quantitative analysis lic removal source code deletion commit refactored feature inner private static remove code instance commit diverse modification affirm action intend code refactoring commit message explicit implicit mention lic message remove commits moreover message refer specifically remove inner unique commit remove lic instance modification mention anything message code member ignore mim removal affected static introduce code access non static attribute affected remove affected commit action mim removal due deletion host mim remove introduction source code specifically empty developed instruction inside correspond mim definition anymore code instance remove instance remove introduction instruction access non static attribute finally mim removal perform static commit message commit message refer removal mim instance code memory resolver  removal  activity remove affected activity commit action  instance remove source code deletion deletion modification code migration addition feature instance commit silence app refactored app fragment component consequence modification deletion  activity instance  remain instance removal due conversion host activity component commit app convert activity instance  fragment code  activity fragment correspond definition anymore code instance remove action remove  instance  refactor code commit message commit message mention removal  instance message mention commit performs memory improvement nonetheless improvement related  code code hashmap usage  unsupported hardware acceleration  init OnDraw IOD removal remove statement introduce remove host entity commit action manual analysis code inspect removal due deletion code chunk removal specific statement instance instance   usually remove deletion host respectively IOD equally instance remove code deletion instance remove statement removal potential intend refactorings carefully examine instance remove granularity statement   instance code removal intend refactoring instance remove modification inside specifically target code statement however IOD instance remove precise modification refactoring indeed IOD instance specifically remove init statement extract  another incite modification intend remove  warn suppression  developer aware remove code instance commit message potential refactorings IOD commit message mention code removal confirms operation intend refactorings   none analyse message mention removal code UI overdraw  unsuited lru cache ucs removal     ucs remove code statement remove host commit action  ucs instance remove source code respectively remainder instance remove modification inside imply deletion code statement exception  instance remove introduction  modification refactoring commit message none analyse message mention code  ucs image KB image RQ developer refactor mobile specific code sub percentage developer affirm awareness refactoring code orange sub percentage developer maybe grey percentage developer average mobile code recognize participant leak inner init OnDraw hashmap usage acknowledge code participant aware UI overdraw acknowledge participant whereas member ignore memory resolver recognize participant image KB image code awareness refactoring interpretation reference colour legend reader refer web version article refactoring approximately developer already recognize code indeed average participant affirm refactored mobile code leak inner hashmap usage recognize participant refactored member ignore UI overdraw refactored participant interestingly memory resolver init OnDraw rarely refactored respectively proportion particularly init OnDraw acknowledge participant another observation proportion uncertain respondent refactoring developer respond maybe indeed proportion awareness whereas refactoring reasonable participant already refactored code uncertain image KB image semantic sub category identify developer refactor mobile code code analysis participant claimed refactor code report code analysis participant affirm refactoring critical code detect android lint trust default configuration  something flag critical fix another participant emphasize impact IDEs built code analysis warning encourage fix unaware accord another participant beyond refactoring code context explanation sharpen programmer perception future avoid beforehand nudge underestimated personal developer code refactoring development adopt participant  code regularly improve code source project issue fix participant described refactoring code routine exist code dig foreign code fix along gain understand code developer explain easy refactor app another relate app specifically knowledge freedom participant affirm perform refactoring operation maintainer source project external stakeholder release external pressure invest source code quality satisfies interestingly developer explicitly freedom available industrial project contribute image KB image developer refactor mobile code impact significant participant judged impact mobile code developer claimed performance difference really non existent developer claimed code automatically mitigate runtime perform optimization another developer explain architecture mobile apps code concern apps logic implement backend unless UI update therefore performance issue usually issue argument construct another developer performance issue arise connection backend instead frontend code network latency typically dominates mobile app responsiveness participant specific code  developer  impact hashmap usage  collection memory usage important device memory resolver irrelevant participant described approach memory activity cycle callback   participant code commonly acknowledge developer android community recall hearing code performance participant express doubt relationship mobile code performance instance developer member ignore code usability issue performance another developer estimate code directly related performance memory resolver leak inner another developer issue qualify code quality completeness correctness resource usage issue instead performance refactoring developer judged refactoring code useless memory resolver specifically developer memory warning memory management app respond warn fix issue explain probably memory leak another app manages memory clearing cache prevent memory crash temporary aid app eventually crash anyway another participant refactoring memory resolver introduction bug handle memory likely harm implementation likely buggy benefit app performance issue handle reactively participant developer worry  performance issue handle proactively participant gut feeling performance issue usually advises trust feeling instinct optimize profile exactly application participant advice recommend rely reactive profilers performance issue arise instead worry detail advise android developer worry UX app performance slows profiler bottleneck fix prioritization participant mention refactoring mobile code priority developer reference perpetual quality improvement feature  improve codebase prioritize feature directly benefit client developer described criterion considers initiate refactoring evaluate source code quality refactoring maintenance performance perform justifiable participant judged label code justifiable   alternative data structure code maintenance explain android framework  component prevents jvm image KB image discussion implication release RQ pressure release impact code introduction removal suggests code introduce release pressure moreover refactoring code developer blame release developer mention prioritization release explain quality aspect outcome prioritize challenge belief release relationship technical debt however noteworthy source project industrial counterpart participant praise freedom source project aware circumstance rare industrial project hence encourage future evaluate impact release mobile code industrial project ecosystem awareness code previous  mobile code indifference developer  however input developer RQ challenge hypothesis participant claimed recognize android code neglect developer reluctant code refactoring assume issue remove obstacle encourage researcher  propose automate refactoring mobile code static analysis code detect android lint leak inner init OnDraw hashmap usage UI overdraw recognize developer developer perform refactoring explain action motivate assist built code analysis apparent refactorings identify RQ init OnDraw UI overdraw detect android lint refactorings explicitly delete android lint suppression developer  warning respond intend refactoring finding confirm static analyser awareness code refactoring hence encourage researcher  integrate static analyser code coverage removal refactoring quantitative qualitative finding RQ code mainly remove source code deletion member ignore instance remove source code introduction remove empty primitive developed statement cannot judge intention source code modification analyse commits reveal intend refactoring mention code RQ minority remove developer perform refactoring hence code removal maintenance activity intentional refactorings implies cannot rely code removal refactoring technique future intend automate refactoring cannot rely removal code controversial code accord RQ memory resolver acknowledge refactored code respectively code disapprove developer explain absence resolver systematically memory issue presence useful disapproval explain code affected apps diffuse code code UI code  hashmap usage described justifiable irrelevant device invite future research reassess relevance code accuracy definition manage performance reactively developer explain instead worry code prefer handle performance bottleneck arise reactive approach already previous mobile apps research contribution remain rare specifically static analyser detect performance issue mobile apps knowledge profiler manage bottleneck encourage future profilers developer performance bottleneck identify relationship code performance bottleneck previous mobile developer performance bottleneck seriously code developer  participant doubt impact code association performance developer perceive causal relationship code performance bottleneck indeed existence relationship remains theoretical previous rely execution scenario demonstrate impact android code performance associate bottleneck therefore encourage future relationship mobile code performance bottleneck threat validity threat threat internal validity imprecise detection code introduction removal imprecision relevant situation code introduce remove gradually accurately tracked however objective code introduce remove commit rely sniffer  accurately detects code introduction removal external validity threat representativeness dataset source android apps commits code instance preferable source apps diverse dataset however access proprietary software encourage future datasets source apps extend encourage inclusion apps frequency mobile code codebase another threat external validity concern android specific code without investigation generalize code development framework therefore encourage future replicate datasets code mobile platform RQ threat internal validity selection release project avoid threat apps release along ensures accuracy metric distance release release another potential threat presence app release marked github release detection relies github tag purpose developer release project without tag hence approach app release furthermore impact release code limited source apps apps developed industrial project external requirement release pressure encourage future extend inspect impact release setting RQ threat internal validity accuracy manual analysis alleviate threat rely objective criterion action perform commit content message judge intention developer RQ ass proportion refactoring another threat generalizability qualitative analysis randomly remove commits statistically significant stratify sample confidence interval removal detect dataset credibility artefact RQ user threaten sample bias remove developer objective removal actual refactoring operation without investigation proportion awareness refactoring cannot generalize mobile developer furthermore  desirability bias participant inclined aware software quality issue minimize bias anonymous avoid implication participant express related report literature related  mobile apps analysis mobile code reference mobile specific code propose catalogue quality dedicate android code originate online android documentation various aspect implementation user interface database usage report harm efficiency user security research built catalogue propose approach detect code mobile apps propose  approach detects OO android android apps  model android apps architectural graph query detect code propose another  identify android specific code catalogue propose extension  detects iOS specific code lately machine algorithm generate detect android code  algorithm achieve generate capable detect overall precision cope mobile code researcher propose refactoring lin dig propose  extract operation   transforms improperly  android  propose  aware refactoring approach mobile apps identify OO mobile antipatterns  generates refactoring sequence automatically empirical mobile code empirical focus assess performance impact mobile code app performance conduct empirical individual combine impact android performance apps without metric frame delayed frame memory usage garbage collection measurement refactoring member ignore improves frame metric code focus impact analyse source android apps refactoring code reduce global consumption analyse source apps refactoring antipatterns decrease significantly consumption mobile apps notably occurrence internal setter leak thread member ignore loop consume smelly beyond performance impact empirical distribution code mobile apps desktop specifically presence OO code android apps desktop application difference application density code however distribution OO code android diversified desktop application analyse iOS apps android apps presence OO mobile specific platform semantic similarity code exhibit platform android apps tend OO mobile specific code understand distribution impact mobile specific code qualitative insight topic indeed leveraged qualitative analysis investigate perception performance android developer report developer lack awareness android code moreover developer challenge relevance impact code complement relies another information source removal instance understand phenomenon code besides quantitative insight code introduce remove code evolution code address various OO context address analyse source project understand code introduce survive code instance introduce file due evolution feature enhancement activity responsible introduction newcomer necessarily prone introduce interestingly investigate rationale code removal code remove specific refactoring operation yield code instance remove code  described action intentional refactoring peter  conduct source investigate lifespan code refactoring behaviour developer average code instance lifespan approximately examine revision moreover usually developer refactor others however difference finally refactoring rationale cleaning obsolete code dedicate refactoring maintenance activity analyse source project inspect evolution relationship code similarly OO code introduce survivability existence relationship code code context mobile apps already leveraged code previous developer contribution ownership code across developer regardless seniority code survival android code remain codebase remove effective commits remove developer lack code action accidental wise complement finding developer  code novelty wise relies artefact address topic removal fashion inspects action code removal refactoring discus developer intentionally refactor code identify motivation action release diffuseness previous evaluate impact release code survival ass impact release code introduction removal insight evolution code diffuseness another relevant conduct  manually analyse commits fix performance bug android iOS apps analysis taxonomy performance bug confirm gui lag leak memory bloat performance bug mobile apps analyse survival performance bug average remain surpasses average lifetime bug conclusion article empirical leverage quantitative qualitative analysis improve understand mobile code finding diffuseness android code introduce diffuse equally memory resolver leak inner diffuse affect activity inner release pressure release impact frequency code introduction removal source android apps removal code instance remove however removal mostly source code removal mention refactoring developer author removal confirm action intentional refactorings awareness developer aware android code necessarily refactor code init OnDraw recognize participant refactored refactoring developer refactored android  motivate assist built code analysis commitment code quality developer refactor android code doubt performance impact usefulness refactoring developer prefer handle performance issue arise instead anticipate finding notable implication future  encourage future evaluate impact release mobile code industrial project ecosystem arises remark developer contrast freedom develop source apps pressure undergo industrial project future intend automate refactoring cannot rely code removal address doubt developer reassess relevance android code accuracy definition intend relationship mobile code performance bottleneck understand ass impact performance besides finding encourage maker profilers developer performance bottleneck identify rapidly integrate static analyser code coverage beneficial impact developer awareness action propose automate refactoring mobile code crucial developer reluctant refactoring introduce issue comprehensive replication package datasets credit authorship contribution statement   conceptualization methodology investigation draft   conceptualization review edit funding acquisition   conceptualization review edit supervision funding acquisition