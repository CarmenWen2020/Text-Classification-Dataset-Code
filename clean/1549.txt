configuration spark deployed public ensure efficient periodic configuration explore compose numerous performance related parameter dimension application poorly significantly degrade performance overhead however automatically optimal configuration various application performance challenge address issue propose optimal configuration algorithm AB MOEA combine multi objective optimization algorithm performance prediction model AB MOEA decomposition multi objective optimization algorithm configuration objective minimize execution performance model construct adaboost algorithm evaluate fitness candidate configuration besides configuration automatic tune AB MOEA optimization experimental benchmark data AB MOEA significantly outperforms previous execution average improvement approximately percent previous keywords spark configuration tune multi objective optimization introduction spark become popular distribute data compute framework memory calculation spark improves performance data processing data environment ensure fault tolerance scalability advanced component spark sql structure data processing mllib machine graphx graph processing spark component ensure spark domain graph compute file analysis database management machine important category application usually repeatedly input data periodic benchmarking community theoretically practically proven application periodic performance requirement periodic configuration critical improve service quality competitiveness instance configuration achieve optimal performance contrary configuration overhead performance however challenge address simultaneously optimal configuration spark application configuration spark define configuration parameter efficient overall performance highly sensitive setting parameter stakeholder professional knowledge hardly tune parameter various customize scenario moreover complicate deploy spark application effective public configuration parameter allocation available resource optimization objective user variable generally optimization objective spark application reduce execution reduce execution user satisfy multiple optimization objective simultaneously objective conflict therefore without automate optimal configuration satisfy adaptability complexity spark application spark optimal configuration selection probably due existence however exist fully address challenge   investigate impact important adjustable spark parameter application performance developer proceed default mapped trial error iterative improvement methodology apply spark enable  MN compute infrastructure later optimal configuration continued  qian others detailed literature review refer related performance related parameter spark optimal configuration involve objective optimization recently propose automatic configuration tune combine multiple objective linear aggregation achieve multi objective optimization gap quantitative standard optimization objective allocation largely direction optimization approach AB MOEA spark optimal configuration selection combine multi objective optimization algorithm decomposition MOEA performance prediction model construct adaboost algorithm propose approach optimal configuration selection convert multi objective optimization mop minimize execution framework MOEA purpose adaboost performance prediction model evaluate candidate configuration AB MOEA overall contribution summarize knowledge approach multi objective optimization optimal configuration spark application deployed public AB MOEA pareto optimal user optimize specific objective objective significant advance AB MOEA considers factor related spark performance unprecedented previous application configuration parameter propose spark configuration automatic tune AB MOEA optimization highly scalable structure flexibly optimization objective algorithm conduct comprehensive representative benchmark benchmark data proposal significantly outperforms previous multi objective configuration tune organize discus background motivation describes AB MOEA propose implementation configuration automatic tune AB MOEA outline experimental setup analysis discussion review related configuration tune concludes background motivation apache spark spark memory cache distribute compute achieve performance inherit fault tolerance mapreduce couple flexible data structure powerful functional program interface spark mapreduce various data processing program machine iterative analysis generally spark cluster consists elastic compute service ECS instance effective public user configure application optimize performance adjust performance related parameter parameter application parameter parameter define spark specify memory executor parameter parameter specify amount resource available virtual machine parameter detail refer previous researcher impact former spark comprehensive amount available resource bottleneck cpu network bandwidth memory performance improvement obtain adjust application parameter limited execution variation terasort benchmark application configuration cluster virtual machine GB ram core ali ECS scope improvement execution cluster increase however benefit node significant configuration affect spark performance non linear therefore configuration optimize spark image KB image terasort execution cluster benefit configuration significantly improve performance spark application without excessively increase reduce monetary automatic tune enable user avoid inefficient consume manual setting important configuration periodic user gain benefit configuration amortize execution periodic recent report periodic account approach propose periodic formulation spark optimal configuration selection regard multi objective optimization spark application goal optimal configuration objective minimize execution formally denote function execution application respectively formulate configuration vector feasible configuration application parameter parameter spark deployed public related denote price per service provider candidate configuration essential eqn explain obtain candidate configuration optimal configuration naive approach optimal configuration traverse configuration unfortunately due numerous configuration parameter accumulative application recently researcher evolutionary algorithm effectively genetic algorithm GA particle swarm optimization algorithm PSO algorithm explore unknown configuration accord information exist configuration iterative manner optimal however performance candidate configuration unknown without practical configuration iteration evolution algorithm departure intention therefore apply evolutionary algorithm evaluate performance candidate configuration quickly accurately performance prediction model machine specific information seemingly chaotic data mapping relationship performance metric configuration sufficiently accurate model predict performance spark application configuration faster approach execute application currently combine algorithm performance prediction model widely apply automatic optimal configuration data compute framework achieve overview joint initial configuration generate random heuristic performance model predict performance configuration prediction fitness minimization evolutionary algorithm judge accord predefined termination accepted output optimal configuration otherwise evolutionary algorithm applies series genetic operation selection crossover mutation operator generate configuration evaluate optimal configuration image KB image evolutionary algorithm combine performance model advantage combine multi objective optimization algorithm performance prediction model configuration regard allows attention relationship configuration optimization objective tune configuration without insight parameter potential interaction parameter along multi objective evaluation algorithm spark optimal configuration propose AB MOEA goal optimal configuration spark application public optimal involves conflict objective multi objective optimization framework propose approach algorithm AB MOEA combine decomposition multi objective optimization algorithm MOEA performance prediction model MOEA aim explore configuration whereas model construct adaboost algorithm introduce evaluate fitness AB MOEA decomposes objective optimization subproblems solves simultaneously principle aggregation purpose convenience  approach adopt generation AB MOEA maintains population former compose subproblem latter apply non dominate image KB image AB MOEA algorithm component population initialization population evaluation genetic operator population update precede component described detail population initialization individual population spark configuration consist application parameter application parameter related application setting define workload characteristic execution specifically application parameter parameter define spark configure separately application parameter deploy spark public virtual machine parameter parameter configuration available service parameter cpu per core average ram per core virtual machine however affect usability propose service configurable parameter future individual configuration parameter within respective randomly random valid individual generate initial population configuration uniform algorithm empty model fitness function multi objective optimization algorithm fitness function evaluate quality individual selection fitness function affect convergence algorithm optimal spark optimal configuration selection goal configuration minimize execution non negative directly objective function fitness function however mention overhead spark configuration iteration construct performance model predict execution candidate configuration observation spark model via machine algorithm model spark configuration input output performance prediction performance model built adaboost algorithm ensemble machine utilizes boost combine multiple learner task machine algorithm adaboost algorithm significant advantage prediction accuracy resistance fitting dimensional complex moreover assumption configuration parameter algorithmic setting core principle adaboost convert sequence weak learner learner intuitively weak learner slightly random learner perfect performance image KB image performance model construct training matrix vector vector spark configuration parameter observation spark configuration parameter execution observation vector observation training sample matrix subsequently input matrix adaboost algorithm performance model invoke algorithm cart decision training data generate weak regressor depends average loss training sample adaboost adjusts sample distribution weak regressor attention sample incorrect prediction sequence weak regressors correspond generate finally combine weak regressors performance prediction model formal description model illustrate algorithm obtain performance prediction model easily execution candidate configuration fitness optimization algorithm genetic operator evolutionary algorithm theory selection screen suitable individual evolution retain outstanding characteristic evolve population aspect essential mating individual random offspring AB MOEA aspect respectively translate crossover mutation operator crossover operator generates individual combine genetic randomly crossover employ randomly individual subproblem individual randomly exchange individual offspring crossover operator offspring accord pareto dominance non dominate individual offspring dominance cannot randomly crossover operator probability mutation operator randomly individual flip goal introduce genetic population increase diversity gene apply mutation offspring obtain crossover operator similarly randomly individual generate randomly within specify replace illustrates mutation operator mutation operator probability image KB image genetic operator image KB image architecture spark configuration automatic tune AB MOEA generally offspring individual genetic operation genetic offspring individual exceed boundary invalid individual infeasible invalid individual crucial improve efficiency algorithm recently propose boundary optimization uneven distribution individual improper boundary processing core utilize theory specular reflection generate valid individual uniformly distribute within boundary adopt specific calculation formula evolve individual correspond boundary limit population update evolution individual population iteration individual generate genetic operator individual individual replace individual AB MOEA achieves purpose population update update individual objective previous ensure objective update subproblem individual individual correspond subproblem update update empty individual empty remove individual dominate individual individual dominate individual individual population evolve continually termination fulfil output termination freely define maximum iteration specify objective function implementation discus implementation detail spark configuration automatic tune AB MOEA module workload generator workload generator generates application workload user benchmark workload commonly stress hibench actual application workload tune user representative application optimization objective minimize execution constraint maximum execution budget controller controller adaptation layer handle heterogeneity user submits workload controller creates operating environment application user uniform operation api configuration mapping benefit standardization tune cope controller status workload runtime configuration performance metric configuration generator configuration generator candidate configuration sample consists performance related parameter parameter within specify ensure generate configuration valid configuration submit controller benchmarking workload configuration searcher configuration searcher configuration searcher core tune built AB MOEA algorithm configuration information workload correspond performance metric controller AB MOEA automatically optimal configuration user requirement optimal configuration configuration searcher submits controller configure workload optimize performance spark configuration automatic tune highly flexible extensible architecture component loosely couple component interacts configuration information performance metric minimizes dependency component rely uniform operation api allows optimization algorithm apply tune handle actual scenario user architecture slightly workload generator controller cop workload optimization objective future experimental setup experimental platform ali purpose elastic compute service ECS deploy benchmark experimental environment linux centos spark hadoop distribute compute framework involve adopt multiple structure detail experimental setup representative application configuration algorithm implementation detail characteristic vms VM   GB gbps xlarge GB gbps spark benchmark  data wordcount WC GB terasort TS GB kmeans KM sample bayes BA linear LR nweight NW description application configuration parameter  spark executor memory EM amount memory per executor GB VM max spark executor core EC core executor VM max spark executor  amount heap memory allocate per executor cluster mode MB EM min EM EM spark driver memory DM amount memory driver GB VM max spark driver core DC core driver VM max spark driver  serialize partition spark action byte MB GB  DM spark driver  amount heap memory allocate per driver cluster mode MB DM min DM DM spark reducer  output fetch simultaneously reduce task MB spark  remote fetch disk threshold byte spark broadcast   MB spark broadcast  compress broadcast variable  false spark broadcast  enable checksum broadcast  false spark default  partition RDDs return transformation  parallelize user EC spark file  maximum byte pack partition reading file MB spark file  estimate file byte scan MB spark storage  byte spark memory reading disk MB spark python worker  memory per python worker aggregation MB spark python worker  python worker  false spark shuffle  compress output file  false spark shuffle file  memory buffer shuffle file output KB spark shuffle  fail due IO related exception automatically retry non zero spark shuffle service index cache  entry limited specify memory footprint MB spark shuffle spill  shuffle spill compress  false spark shuffle service  external shuffle service  false spark   dynamic resource allocation  false spark rdd  compress serialize rdd partition  false spark  serialize network cached serialize   spark memory  execution storage spark memory  storage memory immune eviction spark memory   spark attempt heap memory operation  false spark  performs speculative execution task  false spark speculation  task median speculation spark speculation  task speculation enable stage spark task  core allocate task EC max spark task  failure task spark rpc message  message MB communication spark compression  codec compress internal data rdd partition   spark compression  LZ compression KB spark compression snappy  snappy KB representative application hibench widely benchmark evaluate spark framework consists series workload evaluate propose approach wordcount occurrence document generates input data  terasort standard sort benchmark data analytics generates input data hadoop  program kmeans iterative cluster analysis algorithm spark mllib generates input data  data uniform distribution gaussian distribution bayes multi classification algorithm implement spark mllib workload automatically generate document zipfian distribution linear regression determines quantitative relationship variable implement spark mllib  input data generate  nweight iterative graph parallel algorithm implement spark graphx computes association vertex hop away workload typical spark workload behavior disk intensive memory intensive cpu intensive intensive configuration spark configuration parameter consists disjoint application parameter parameter application parameter spark user configuration parameter involve application runtime environment shuffle behavior etc goal optimize performance parameter irrelevant performance within consideration defines task indicates task spark UI apis garbage collection parameter usually none user spark specific parameter closely related application performance default spark default parameter expertise cluster affordability configuration parameter parameter aspect spark runtime compression serialization memory management execution behavior aspect ultimately performance spark application parameter earlier configuration virtual machine xlarge instance core per machine respectively instance core constraint combination however configuration reasonable objective significant improvement execution expensive compute resource configuration parameter VM  vms xlarge core algorithm implementation detail parameter involve AB MOEA configuration specifically parameter decomposition multi objective optimization algorithm model construction specifically parameter adaboost algorithm parameter combine recommendation relevant research attempt ensure AB MOEA achieve benchmark introduce parameter AB MOEA parameter termination criterion predefined maximum iteration population crossover probability mutation probability application parameter precisely vector individual therefore vector suggestion zhang optimization objective therefore performance prediction model cart decision learner adaboost algorithm learner rate respectively performance obtain adaboost model adjustment benchmark randomly generate sample configuration training another sample sample consists valid parameter training fix sample training iteratively accuracy model longer improves significantly training sample separately application concurrently interfere measurement AB MOEA algorithm adaboost algorithm derive tune implement python evaluation verify effectiveness adaboost performance prediction model AB MOEA BestConfig report overhead AB MOEA finally discus insight AB MOEA specific benchmark model accuracy concern AB MOEA performance model accurately predict execution spark application configuration crucial optimal configuration evaluate accuracy performance model relative error statistic evaluation metric absolute error reasonable judgment reliability credibility prediction formula execution predict adaboost model execution predict execution spark application configuration eliminate bias computer hardware network etc image KB image error distribution illustrate prediction versus measurement randomly spark configuration application performance prediction model construct adaboost algorithm model apply spark objective optimization approach random model stage model setting model sample algorithm parameter fully accord developer accuracy verify sample calculate average relative error sample reflect overall error model benchmark prediction error model construct algorithm benchmark adaboost model significant improvement model benchmark specifically average error adaboost model respectively average benchmark error model respectively phenomenon explain latitude feature related issue usually decision model complex mapping relationship besides sensitive distribution training sample disturbance structure decision affect prediction adaboost random integrate multiple decision prediction difference ensemble adaboost attention sample correctly predict learner prediction accuracy generates prediction average effectively reduce deviation prediction random introduces random attribute selection basis bagging algorithm generates prediction majority voting average ensemble determines random concerned reduce variance prediction therefore accuracy priority adaboost model performs evident error distribution scatter plot measurement prediction generate application randomly spark configuration prediction measurement scatter trend without obvious outlier adaboost model fairly accurate across entire configuration demonstrate adaboost model accurate apply optimal configuration performance improvement AB MOEA BestConfig propose AB MOEA optimization framework BestConfig BestConfig automatic optimization configuration configuration performance objective core BestConfig diverge sample selects effective information sample recursive bound selects configuration configuration fairly implement BestConfig experimental environment perform multi objective optimization algorithm output AB MOEA valid pareto pareto non dominate optimal objective analyze experimental requirement non dominate propose prefer previous sum objective optimization algorithm objective consideration equally important objective minimal maximum objective pareto optimal experimental AB MOEA BestConfig benchmark horizontal axis application input data WC corresponds wordcount 0G data optimize plot graph graph improvement percentage AB MOEA BestConfig AB MOEA significant improvement BestConfig specifically improvement AB MOEA execution average improvement execution average image KB image evolution objective WC KM analyze BestConfig performs poorly BestConfig merges multiple conflict objective objective summation distance pareto interpretable core BestConfig scalar objective evolution algorithm optimal objective function MOPS domination define objective benefit multi objective framework decomposition AB MOEA non dominate diverse closer pareto MOPS stakeholder accord requirement besides actual operation assignment scalar optimization algorithm important evaluate quality BestConfig adjust objective trial variety combination linear combination symbolic function achieve performance moreover due non  multiple objective balance dimension objective objective inevitably impact entire objective function purpose multi objective optimization procedure overhead AB MOEA iteration algorithm convergence affect entire clearer analysis comparison AB MOEA BestConfig evaluation objective iteration maximum iteration AB MOEA achieve minimum around BestConfig generally stable objective around generation phenomenon attribute BestConfig stuck sub optimal illustrate overhead AB MOEA entire optimization consists historical data establish performance model optimal configuration marked overhead AB MOEA occurs collection historical data comparison overhead building performance model optimal configuration worth spending optimize configuration although overhead relatively expense benefit worth expense optimize configuration periodic spark monetary periodic usually expense BestConfig expense inevitable optimization AB MOEA attractive empirical tune empirical tune fail optimal configuration application orient another user scenario application periodic utility gain AB MOEA expand  model wordcount terasort kmeans bayes linear nweight image KB image execution stage bayes empirical tune BestConfig AB MOEA detailed analysis experimental depth perform detailed analysis bayes precede benchmark chosen mainly AB MOEA achieve optimization execution stage bayes AB MOEA BestConfig achieve significant performance improvement empirical tune AB MOEA gain mention bayes iterative sensitive memory sensitive stage iteratively counting data input data data stage 0G 0G 0G respectively memory becomes bottleneck affect execution bayes AB MOEA optimal configuration allocate appropriate execution memory bayes ensure stage execute maximum efficiency minimize execution avoid waste resource moreover optimization AB MOEA consistent tune official difference AB MOEA recommend quantitative suggestion instead qualitative although BestConfig achieve performance improvement gain satisfactory execution simultaneously mention investigate AB MOEA optimal execution execution pareto comparison AB MOEA execution AB MOEA AB MOEA data bayes execution AB MOEA AB MOEA increase average maximum execution reduce average maximum performance improvement expectation paid price benchmark performance scenario user certainly AB MOEA scenario effectiveness feasible sacrifice amount execution benefit valid AB MOEA user flexibly configuration accord requirement balance execution optimally image KB image performance comparison bayes AB MOEA AB MOEA discussion choice framework pareto dominance multi objective optimization algorithm NSGA II SPEA II decomposition multi objective optimization algorithm MOEA advantage computational complexity performs maintain population diversity undoubtedly attractive optimal configuration selection diverse choice complex multi objective optimization algorithm NSGA suitable objective  research involves objective performance model although performance model avoid computational evaluate candidate configuration maintain sample training reduce overhead building performance model utility AB MOEA improve recent heuristic sample training sample meeting accuracy requirement integrate sample AB MOEA future uncertainty assume relationship spark application performance configuration fix spark application public assumption due uncertainty resource environment user operation overload failure affect performance spark application situation rarely occurs public environment AB MOEA remain relevant across relatively related spark configuration optimization model objective multi objective optimal parameter selection approach objective optimization objective optimization   investigate impact important tunable spark parameter application performance propose systematic graph algorithm basis trial error methodology generate candidate configuration optimal performance  qian input data significant impact spark performance propose combine performance prediction model genetic algorithm GA configuration difference model model former input data account whereas latter algorithm spark configuration parameter tune genetic algorithm GA particle swarm optimization PSO propose neural network algorithm configuration tune performance model random apply improve efficiency latin hypercube strategy training data effective performance model finally recursive random algorithm tune configuration setting spark application mention propose approach tune configuration accord resource bottleneck stable cluster although approach apply optimize spark performance optimization objective execution spark application approach execution objective equally important actual situation treat spark configuration tune multi objective optimization pareto optimal convenient stakeholder comprehensive optimization another objective optimization focus mapreduce compute framework propose mapreduce optimization approach configuration tune respectively   RDMA enhance mapreduce introduce runtime configurator cluster scheduler automatically adapts workload resource status directly apply approach successful mapreduce compute framework spark however spark mapreduce compute framework implementation transfer achieve desire therefore optimization approach spark multi objective optimization relatively multi objective optimization spark multi objective optimization mapreduce inspire propose automatic configuration tune BestConfig spark tune configuration within resource limit introduce diverge sample recursive bound algorithm however mention BestConfig mainly optimization objective therefore multi objective optimization difficulty weigh objective limit optimization automatic query determines cluster mapreduce propose configuration automatic adjustment identify configuration data analytics bayesian optimization leveraged non dominate sort genetic algorithm II virtual machine management minimization objective focus configuration analyze impact configuration parameter spark performance approach comprehensively considers parameter achieve performance improvement closely related multi objective optimization interaction theory mop interval parameter propose interactive evolutionary algorithm theory preference polyhedron feedback information decision maker optimization propose hybrid multi objective discrete artificial bee algorithm schedule objective batch workshop newly developed genetic operator local respectively enhance performance algorithm exploitation exploration propose decomposition archive improve traditional multi objective optimization algorithm effectively reduce computational combine PSO bagging ensemble surrogate model multiple radial basis function network  generate coverage data message passing interface mpi program expensive optimization valuable spark configuration optimization besides optimize spark performance resource utilization optimize performance aspect instead focus configuration complement approach conclusion investigate issue configuration optimize spark application public choice configuration depends user requirement typically involves conflict objective minimize execution minimize execution automatically configuration objective challenge address challenge propose optimal configuration algorithm AB MOEA combine multi objective optimization algorithm performance prediction model configuration compose application parameter AB MOEA pareto optimal user besides configuration automatic tune AB MOEA optimization highly flexible extensible architecture evaluate approach typical spark benchmark input data AB MOEA significantly outperforms previous execution average improvement approximately percent