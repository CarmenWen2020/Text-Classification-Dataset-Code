background software manage refactor technical debt issue therefore understand refactoring technical debt prioritize respect develop feature fix bug objective goal investigate exist knowledge software engineering understand technical debt prioritization approach propose research conduct systematic literature review unique publish consolidated methodology apply software engineering primary approach propose technical debt prioritization goal propose optimization regard criterion propose capture plethora factor prioritize technical debt qualitatively impact factor however lack empirical validate conclusion technical debt prioritization research preliminary consensus important factor consequently cannot research conclusive therefore outline direction future investigation keywords technical debt technical debt prioritization systematic literature review introduction technical debt TD metaphor introduce cunningham sub optimal implementation yield benefit costly impossible medium software manage sub optimal presence TD inevitable desirable circumstance related unpredictable business environmental internal external organization however financial debt TD attach extra negative impact generate presence sub optimal becomes costly disruptive development crisis employ software TD bay avoid consequence refactoring rewrite code artifact rid accumulate sub optimal negative impact cannot afford avoid repay TD generate continuously unknown business goal continuously deliver customer maintain activity refactoring TD usually competes allocation develop feature fix defect TD refactoring activity prioritize implementation feature therefore utmost importance understand refactoring TD becomes important postpone feature bug fix important understand prioritize TD respect feature bug however recent perform software report struggle prioritize TD systematic approach research prioritization strategy propose RQ RQ prioritization strategy useful practitioner improve identify strategy aim image KB image TD prioritization addition recent project TD associate refactoring principal negative impact academia principal activity formulate rqs factor TD prioritization RQ prioritize TD RQ practitioner actionable quantify estimate principal therefore prioritize TD furthermore prioritization strategy related RQ TD dangerous others therefore important understand prioritize TD respect TD therefore propose RQ understand approach available instead prioritize TD TD TD feature RQ another important aspect related strategy prioritize TD refers periodicity prioritization instance shot activity iteratively continuous therefore propose RQ prioritization shot activity continuous RQ research focus prioritization described review publication periodicity distinguish approach shot activity versus continuous however overall investigate strategy factor TD prioritization analyze prioritization approach account goal survey exist knowledge software engineering understand approach propose research prioritize TD perform systematic literature review slr prioritization TD conduct slr investigate exist knowledge software engineering understand TD prioritize software organization research approach propose contribution report concern approach factor propose research prioritize TD structure background review outline research methodology adopt discussion discus obtain finally identify threat validity conclusion TD prioritization propose preliminary conceptualize goal research practitioner TD prioritization activity illustrate exploration factor consideration TD prioritization factor relates practitioner prioritization refactorings TD issue prioritize TD refactoring versus implementation feature bug fix RQ approach assess impact TD assess impact feature bug former prioritization approach factor latter principal TD feature orient factor competitive advantage delay scope comparison define evaluation TD perform account difference TD principal fix issue impact TD factor economic marketing factor RQ evaluation quantitative qualitative RQ RQ quantitatively evaluate presence code debt perform qualitative evaluation code review factor cannot code readability  quality characteristic addition calculate principal TD practitioner calculate qualitatively assess impact factor moreover evaluation perform scenario available resource evolution TD context dependent impact factor RQ practitioner ass estimation future scenario  practitioner specify medium scenario evaluation scenario refactoring decision regard refactorings perform postpone definition technical debt TD  requirement TD refers distance optimal requirement specification actual implementation domain assumption constraint architectural TD architecture decision compromise internal quality aspect maintainability TD refers technical shortcut detailed code TD poorly code violates cod cod code duplication complex code TD refers shortcut lack integration acceptance TD refers flaw software overly complex documentation TD refers insufficient incomplete outdated documentation aspect software development date architecture documentation lack code comment infrastructure TD refers sub optimal configuration development related technology etc sub optimal configuration negatively affect ability quality versioning TD refers source code versioning unnecessary code fork defect TD refers defect bug failure software previous slr  understand TD TD management TD classification financial approach manage TD TD payment prioritization TD management strategy TD taxonomy fern치ndez s치nchez TD management TD agile development manage architectural TD TD management strategy TD TD effort decision implement feature involves code module suffer TD TD estimate generate scenario generate TD overcome delay feature practitioner refactor code implement feature concrete refactoring decision prioritization architect refactor sub optimal interface application access developed activity architect evaluate prioritize refactoring TD develop feature architect consideration calculate factor principal factor without refactoring TD code contagious debt addition application suffer negative impact generate interact sub optimal api impact although delay development application feature orient factor imply scenario develop feature scenario reduce developer generate sub optimal interface gain overcomes delay application development practitioner perform refactoring api refactoring decision evaluate future scenario avoid worth principal TD prioritization assist practitioner combination impact description prioritization approach available refactoring decision background explain meaning TD avoid confusion misunderstanding report previously publish systematic review technical debt concept TD introduce cunningham debt incur software project development deficiency maintenance overhead McConnell refine definition TD construction approach expedient creates technical context later increase define collection implementation construct expedient technical context future costly impossible TD actual contingent liability impact limited internal quality primarily maintainability evolvability conduct systematic mapping understand concept TD overview research manage TD propose classification TD report classification derives recent secondary accord knowledge available literature strategy define previous slr briefly report previous systematic review systematic mapping systematic literature review available source goal chronological research evolution regard TD systematic review publish knowledge exploit exploratory technique involves multivocal literature review supplement interview software practitioner academic establish boundary TD phenomenon theoretical framework holistic TD comprise TD dimension attribute precedent outcome framework useful approach understand overall phenomenon TD practical purpose investigate TD management TDM classification TD concept research TDM publication ultimately empirical quality evidence TDM application TDM approach industrial context manage TD TDM analyze research effort regard TD focus financial aspect underlie software engineering concept publication glossary classification scheme financial approach apply manage TD moreover discover mapping financial software engineering concept lack evaluate appropriate TD item apply decision criterion balance benefit publication identify decision criterion development prioritize payment TD item debt related criterion investigate strategy propose identify manage TD software project publication propose initial taxonomy TD indicator identify TD management strategy moreover analyze TD highlight research gap researcher TD identify gap regard indicator proposal management strategy TD another gap identify regard empirical validate propose strategy fern치ndez s치nchez identify  manage TD publication overview TD phenomenon activity manage TD classify decision factor estimation technique technique decision grouped stakeholder engineering engineering management business organizational management analyze TD consequence management strategy context agile software development ASD publication potential research investigation highlight positive TD ASD potential category easily TD focus delivery architectural issue investigate architectural TD ATD synthesize compile research effort knowledge specific ATD publication lack guideline manage ATD successfully overall activity fully integrate perform tertiary research evaluate secondary date march evolve taxonomy TD identify situation debt item software project organize activity strategy TD management identify investigation TD research management activity investigate exist measurement analysis TD focus quantitative automate retrieve approach define TD exist TD feature popularity analyze exist empirical evidence validity differently adopt prioritize TD recently investigate software artifact dependency involvement analyze prioritization approach account resource constraint exist slr investigates strategy factor TD prioritization aspect focus specific methodology understand technical debt prioritization conduct systematic literature review guideline define kitchenham charter kitchenham  apply snowball define wohlin goal research report strategy approach moreover perform quality assessment outline data extraction analysis correspond data goal research goal investigate exist knowledge software engineering understand TD prioritize software organization research approach propose goal define research RQ  prioritization strategy propose RQ prioritize TD TD TD feature RQ prioritization shot activity continuous  factor TD prioritization  prioritize TD research target investigate research address prioritization TD strategy RQ prioritization TD mainly focus TD item prioritization TD item implementation feature RQ prioritization described periodicity RQ RQ aim identify factor useful TD prioritization activity RQ moreover aim understand prioritization TD component principal aim exist evaluate TD depict situation maturity RQ strategy strategy involves outline relevant bibliographic source definition inclusion exclusion criterion selection relevant inclusion decision strategy depict technical debt debt architect debt debt  debt  debt requirement debt code debt infrastructure debt versioning debt defect debt debt asterisk capture variation conjugation increase likelihood publication address TD prioritization apply title abstract bibliographic source relevant bibliographic source suggestion kitchenham charter source recognize representative software engineering domain review acm digital library digital library scopus google scholar citeseer library inspec springer link moreover perform manual important conference workshop technical debt international conference technical debt  inclusion exclusion criterion define inclusion exclusion criterion apply title abstract text report selection conduct december publication available application return unique inclusion exclusion criterion    prioritize TD  report criterion removal refactoring remediation TD issue regard aspect financial maintenance performance readability TD  empirically investigate prioritization removal refactoring remediation TD   fully  peer review blog forum duplicate recent version report publication cannot database access text publication publication mention prioritization TD introductory statement fully partly focus  version journal extend conference exclude refer dataset applicability inclusion exclusion criterion apply inclusion exclusion criterion applicability subset assign author randomly retrieve apply inclusion exclusion criterion title abstract apply refine criterion remain author disagreement author involve discussion disagreement involve author initial title abstract reading fully title abstract apply criterion define assign author involve author decision possibly relevant contribution snowball perform snowball reference retrieve evaluate reference retrieve additional relevant apply retrieve snowball conduct december identify potential compose publication selection retrieve review report quality assessment proceed review checked quality sufficient goal quality quality perform accord protocol propose  dings칮yr evaluate prepared checklist specific ranked assign likert excellent satisfied quality assessment criterion achieve rating review selection fulfil quality assessment criterion report quality assessment criterion  assessment criterion QA response  research merely lesson report expert opinion  statement aim research  adequate description context research  research appropriate address aim research excellent  recruitment strategy appropriate aim research  treatment  data address research issue  data analysis sufficiently rigorous  relationship researcher participant adequate  statement finding  research selection application quality assessment criterion retrieval bibliographic source unique reading title abstract reject reading reject backward snowball identify quality assessment reject primary data extraction extract data primary PSs satisfied quality assessment criterion data extraction mapping information rqs summarize RQ extract data related context outline PS TD evaluate accord propose report evaluation adopt distinguish qualitative quantitative mixed evaluation approach moreover extract criterion removal refactoring remediation TD issue extract data related goal prioritization RQ understand prioritize TD TD TD implementation feature RQ report prioritization shot activity continuous proactive reactive RQ extract factor ass prioritization TD issue prioritization finally RQ retrieve information framework adopt evaluate prioritize TD issue data exclusively report without personal interpretation data extraction    code defect documentation infrastructure requirement versioning   quantitative mixed evaluation approach  removal refactoring remediation TD issue RQ prioritization  TD TD feature RQ  activity continuous proactive reactive  factor ass prioritization TD issuee specific code metric feature  adopt replicability replication extension researcher prepared replication package obtain adopt selection identify primary PS TD report TD frequently PS code debt architectural debt debt moreover PS report issue specific TD evaluate TD code TD generally investigate impact software quality SP SP SP SP maintainability SP SP SP maintenance effort SP SP SP SP PS code debt evaluation mostly code SP SP SP SP SP SP image KB image TD metric SP SP SP fix violation quality SP factor related subjective evaluation customer feedback SP developer comment code SP evaluate approach mainly involve model reduce TD remove refactoring code metric SP SP approach impact code SP comparison without SP SP rank code SP perceive critical developer architectural TD investigate account role architectural SP SP SP complex architectural SP SP negatively impact software quality SP SP SP architectural TD evaluate extra maintenance effort bug fix SP analyze bug proneness SP code another approach combine perspective historical data project architectural severity prioritize refactoring activity SP architectural identify waste related architectural TD SP combine metric file percentage complex function file SP another approach identifies dependency social gap across architecture organization define architectural TD SP RQ prioritization strategy propose TD prioritization important activity manage TD TD prioritization define schedule refactoring initiative priority identify TD item concern impact individual item software prioritization aspect propose researcher review publication prioritize TD developed unified approach regard TD prioritization consensus aspect focus perform TD prioritization selection prioritization strategy currently context dependent organization SP analyze prioritization aspect retrieve publication thematic analysis approach thematic analysis effective identify analyze reporting theme within data scope thematic analysis return mainly theme illustrate prioritization aspect however software evolution perspective aspect potentially dependency coupling analysis prioritization strategy review publication mainly improve software quality increase software practitioner productivity affection correctness software benefit analysis CBA various TD item respect payoff combination approach strategy reference publication strategy internal software quality focus internal software quality prioritization strategy commonly focus quality assessment software identify TD item maintenance SP SP SP SP SP SP SP SP SP SP SP factor remain debt severity impact future development activity business related constraint SP SP SP approach focus architectural TD focus TD item rank prioritize approach return TD item consume maintenance effort therefore deserve attention priority refactoring  proposes TD prioritization approach primarily focus prioritization debt approach relies quantification transfer identify TD item portfolio matrix SP   software database fourth normal likely TD therefore ill normalize prioritize refactoring SP software productivity review publication decrease software practitioner productivity consideration prioritize TD software suffer architectural TD slows development rework SP SP software correctness TD correctness software described approach evaluate candidate TD item prioritization SP specifically     SP report prioritization refactoring code debt evaluate impact refactoring code quality metric goal identify prioritize dangerous hence TD prioritize defect debt SP focus approach severity debt item categorization critical normal minor duration bug xing SP bayesian approach prediction model TD proneness TD item classification scheme accord TD proneness probability risk individual item assess benefit analysis researcher SP SP benefit analysis prioritize TD item focus refactoring activity perform likely inexpensive implement significant refactoring postpone due payoff focus approach lucrative investment software output analysis prioritize TD item profitability refactoring activity SP strategy echoed SP debt worth paid contrary justify refactoring waste resource refactor however SP stress importance focus prioritization decision TD item assess TD item separately understand overall impact TD item generally project focus overall project goal evaluate information holistically approach SP factor portion code affected TD project roadmap positive impact TD existence alternative cultural attitude prioritize TD refactoring activity combination approach investigate publication combination approach instance  boehm SP propose automate approach prioritize TD multi objective evolutionary algorithm MOEA source java library focus repayment TD refactoring activity within specific constraint borrowing prioritization approach discipline finance psychology SP technique analytic hierarchy AHP portfolio option approach AHP approach involves building criterion hierarchy assign criterion finally perform series pairwise comparison alternative various criterion goal portfolio approach asset maximize return investment minimize investment risk SP stress importance adopt broader perspective prioritization focus liability TD accord decision maker beyond associate fix debt estimate future decision additional reflect prioritization liability respond request associate catastrophic failure etc potential  service agreement violate  debt SP multiple decision strategy criterion model combination prioritization approach project phase model focus aspect severity impact TD item customer perspective TD lifetime project possibility evolution another prioritization perspective approach described SP approach focus combination overall software quality focus productivity improvement future orient perspective proactive methodology SP approach prioritize TD TD item assess accord importance urgency TD item impact business effort assess SP TD prioritization approach rank customer expectation accord priority availability development resource TD item status debt infect module impact debt feature software practitioner prioritize TD item yli SP SP conclude prioritization approach commonly focus scalability business feature customer SP TD prioritization approach combination factor severity existence workaround urgency refactoring customer refactoring effort risk propose refactoring scope schmid SP distinguishes potential effective TD potential TD suboptimal software effective TD refers issue software development prioritization approach considers aspect evolution refactoring probability predict evolution realize SP focus business objective prioritization TD business expectation goal researcher difference technical prioritization business orient business priority account decision related technical debt prioritization prioritization aspect described facilitate argumentation technical thereby convince business stakeholder prioritize previously pure technical martini bosch SP propose  assistance TD prioritization ass severity TD item calculation assessment factor growth assess factor reduce development bug related TD item quality compromise extra frequency issue user affected SP propose  specifically prioritize source code related TD TD item evaluate accord importance prioritization criterion calculates rank code accord importance instantiate prioritize TD item criterion criterion relevance code software metric others additionally developer external information improve prioritization another review publication SP suggests perform TD prioritization  factor developer code consideration complexity trend analysis calculate  complexity identify TD item skilled observer TD prioritization RQ prioritize TD TD TD feature software increase pressure deliver customer balance spending developer effort resource implement feature spending TD remediation activity fix bug improvement become vital limited scope balance prioritize implementation feature remediation exist TD conclude research seek address TD prioritization mainly focus prioritization TD item TD item described compete implementation feature budget resource available important factor software project prioritization spending effort refactoring activity commonly infers spent implement feature software additional budget effort refactoring TD commonly focus deliver customer visible feature SP SP situation challenge project manager balance budget schedule reduce TD technical feature balance release future maintenance acceptable echo ideally actionable refactoring target prioritize technical debt rate balance improvement risk feature SP furthermore martini bosch  SP TD refactoring initiative usually priority implementation feature TD directly related implementation feature postpone   SP echo notion resource develop feature fix debt challenge task researcher highlight software prioritize feature bug fix TD refactoring within prioritization however balance implement feature TD refactoring activity described important SP investigate commonly focus prioritization approach prioritization TD item goal item refactored none prioritization approach described survey publication explicitly address prioritization implement feature spending effort refactoring TD however pressure deliver customer meeting delivery deadline software prioritize TD refactorings continuously implement feature rapidly RQ prioritization shot activity continuous important prioritize TD refactoring activity project management strategy prioritization therefore research focus prioritization described review publication periodicity distinguish approach shot activity versus continuous publication review highlight TD prioritization continuous integrate iterative SP SP whereas others stress importance prioritize TD refactoring within sprint SP SP illustrate prioritization integral continuous development ideally software incorporate refactoring integral development maintenance SP SP echo notion systematic management TD reduce important release development project interestingly however publication review explicit recommendation prioritization TD RQ factor TD prioritization analyze understand factor TD prioritization approach inductive analysis deductive analysis priori category advance risk factor cod factor mention obtain factor grouped rename overlap factor obtain factor finally grouped factor category aspect software development factor related visible prioritization PS principal SP SP SP SP SP SP PS SP SP SP SP principal calculate SP SP SP SP fix technical quality issue SP violation quality SP factor rank customer feedback SP calculate extra spent maintenance due technical quality issue SP SP SP SP waste related activity management refactoring SP SP principal without item benefit outweigh SP factor customer expectation priority availability development resource TD item status debt infect module impact debt feature SP impact highlight plethora factor related impact TD prioritization variation across project unique factor factor overlap although factor calculate differently bug roi calculate bug obviously overlap factor although sheer bug impact indicator prioritize generic concept although probably implicitly calculate researcher practitioner consideration remain factor explicitly mention however report information perform mapping report generic factor risk specific factor grouped category navigate mapped factor quality mention relation TD category evolution maintenance productivity definition TD explicitly mention impact maintainability evolvability emphasis quality grouped factor accord TD impact quality quality former productivity usually associate TD extra effort spent debt impact factor related TD prioritize RQ  ID  advantage SP SP attractiveness SP penalty SP feature usage SP business SP roi calculate per bug SP  SP satisfaction SP specific customer SP customer expectation SP customer SP SP  impact evolution SP risk critical impact evolution crisis SP impact feature SP SP impact upcoming feature SP SP SP  SP SP SP SP bug SP SP SP SP SP SP SP SP SP SP maintenance SP SP SP  SP performance efficiency SP SP SP security SP transferability SP scalability SP generic quality SP SP SP quality debt issue occurrence SP SP SP SP SP SP SP SP productivity waste effort SP SP SP SP SP SP developer TD SP waste development SP generic effort SP cod output effort SP project  resource SP project complexity SP  bug SP social  morale SP social debt SP positive impact TD SP culture SP  debt SP existence TD alternative SP impact SP SP SP user affected SP SP SP frequency negative impact SP SP SP SP SP SP compromise architecture SP future SP user perception SP  SP SP likelihood SP SP SP SP severity SP SP customizable SP SP SP SP SP SP proceed categorize remain factor accord aspect software development impact related important understand role impact consequence prioritization TD impact customer factor TD important organization prioritization understand impact business factor useful prioritization feature prioritize mostly business concern social project factor consideration non technical aspect software development factor category factor described factor without additional detail specify majority focus impact TD maintainability focus productivity evolvability quality customer perspective consideration factor business factor social factor project factor non categorize factor customer aspect identify factor report highlight specificity specific context lack focus factor literature SP SP author conduct survey practitioner understand factor important developer architect owner customer business factor important however address factor prioritize TD conclude factor overlook literature prioritize TD RQ impact TD identify assess generic likelihood risk severity customizable practitioner factor categorize specifically previously mention category impact TD span multiple category specific aspect related category assume impact TD associate occurrence instance issue code sub optimal quantity debt however accord impact individual issue assume assign arbitrarily estimate refactoring principal contrast impact TD contrast theoretical approach accord TD prioritize consideration refactoring impact RQ prioritize TD report mention usage evaluate prioritize TD report information custom developed specific purpose aforementioned identify static analysis arcan cast coverity findbugs visual studio     understand sonarqube  understand analyzes code visualizes architecture remain detect TD issue code architectural security violation others cast coverity findbugs studio   sonarqube commercial commonly analyze code compliance violate TD issue severity issue classify issue bug increase software maintenance effort security vulnerability moreover cast sonarqube associate remediation effort principal remove TD issue arcan   source developed research aim detect architectural arcan code    management TD enhance backlog backlog allows creation TD item performs TD specific operation item SP SP  report visualize information TD manually manager developer  framework identifies organizational role architectural responsibility allocate moreover defines member framework SP analyze mismatch architecture community architecture arcan SP detect architectural TD principal investigate survey SP developer discus TD issue sonarqube however information  developer severity TD issue SP author cast estimate principal calculate remove TD issue   SP SP respectively detect code refactored investigation  understand SP identify architectural issue investigation TD issue detect coverity findbugs visual studio  SP industrial survey discussion discus obtain outline implication researcher practitioner TD domain although TD domain relatively domain software software quality significant contribution publish researcher become active TD propose code debt architectural debt frequently researcher RQ context TD prioritization propose code debt commonly investigate TD debt however TD significant attention differently emerge code debt architectural debt frequently investigate debt TD prioritization due easy mainly extension previous research domain due particularly ATD harmful expensive manage software architectural code investigate debt commonly TD code debt architectural debt mainly evaluate architectural code anti architectural code code violation moreover  mainly related influence external quality impact specific code maintenance effort however influence vast majority  TD investigate future code debt investigate easy access data mining software repository debt involve developer recommend practitioner identify RQ complement expert judgment understand architectural code code violation software affected TD significantly effective reduce TD refactor stress importance continuously iteratively prioritize identify refactoring task thereby highlight importance appropriate TD prioritization identify approach strategy prioritize TD RQ RQ RQ however unified approach activity consensus aspect focus perform TD prioritization evidently finding prioritization TD refactoring approach goal propose optimization regard criterion identify approach aim improve software quality maintainability evolvability increase software practitioner productivity reduce fault proneness software various TD item benefit analysis CBA understand convenience refactoring combine approach academic practitioner illustrates important identify goal TD prioritization thereafter implement correspond TD prioritization approach target identify specify goal investigate usually TD item prioritize rarely implement feature refactoring TD regard characteristic prioritization RQ imply prioritize TD activity holistic factor systematic assessment TD amount information TD prioritize without standardize approach capture factor prioritize TD proxy maintenance productivity prioritize TD without relevant factor risk consequently partial bias prioritization business decision factor report conduct specific context relevant prioritization obtain evidence factor overlook factor related customer business social project aspect addition understand factor context additional prioritize TD finally although holistic approach report martini bosch SP SP define framework standardize approach assess TD component TD limited propose evaluate principal mainly calculate extra waste fix TD issue TD easy calculate without access empirical data researcher perform understand actual exist TD issue prioritization activity fragment RQ highlight lack solid widely validate specifically TD prioritization mainly identify TD issue propose estimate fix however knowledge calculate due  activity implication practitioner researcher highlight implication researcher practitioner topic investigate depth relevant understand researcher focus mainly code architectural TD without TD TD relevant worthy investigation infrastructure TD moreover useful understand due lack knowledge prime approach limited data due academia researcher evaluate important factor approach affect variable prioritization TD additionally researcher investigate prioritization TD item refactoring TD development addition feature introduce code effort spent refactoring TD practitioner really benefit investigation possibly avoid reduce accumulation TD development moreover important consensus regard calculate TD estimate effort principal fix issue code code style violation cannot estimate impact extra postpone fix issue postpone fix activity ripple impact postpone adoption software library developer extra code library finally adopt lack knowledge regard calculate TD dramatic increase decrease software development quality possibly negative impact customer calculate TD schedule refactoring activity preference avoid accumulation TD become  future issue researcher empirical data practitioner crucial role active empirical data researcher researcher focus attention factor TD technical aspect factor related customer business social investigate another prospective possibly interdisciplinary research direction available fully mature research activity focus empirical validation exist confirm usefulness propose practitioner benefit impact explore anticipate impact TD moreover careful selection apply threat validity slr validity threat mainly concern correctness completeness survey outline implication researcher practitioner TD domain structure propose construct internal external conclusion validity threat construct validity construct validity related generalization concept theory execution related potentially subjective analysis recommend kitchenham guideline data extraction perform independently researcher discrepancy author involve discussion disagreement moreover quality checked accord protocol propose  dings칮yr internal validity internal validity threat related conclusion causal relationship treatment outcome secondary internal validity finding finding report literature address threat carefully tactic propose kitchenham charter external validity external validity threat related ability generalize secondary external validity depends validity externally valid synthesis content valid evaluate external validity conclusion validity conclusion validity related reliability conclusion drawn threat related potential non inclusion mitigate threat carefully apply strategy perform digital library conjunction snowball reference retrieve evaluate reference retrieve additional relevant apply article enable define inclusion exclusion criterion apply title abstract however rely exclusively title abstract establish report evidence technical debt prioritization accept title abstract browse text apply inclusion exclusion criterion conclusion software manage refactor TD issue sometimes presence inevitable due related unpredictable business environmental internal external organization moreover TD dangerous others therefore understand refactoring TD prioritize respect implement feature fix bug respect TD conduct slr investigate exist knowledge software engineering gain understand TD prioritize software organization research approach propose slr rigorous approach scientific article indexed important bibliographic source rigorous article publish december data concern approach factor propose research prioritize TD review code debt architectural debt frequently investigate debt TD prioritization scant evidence TD debt requirement debt prioritization TD refactoring approach goal propose optimization regard criterion however identify capture factor prioritize TD lack empirical evidence principal moreover highlight lack solid validate widely specifically TD prioritization plethora aspect prioritize TD impact factor comprehensive reference regard paid organization research future focus investigation TD investigate moreover planning investigate systematically evaluate principal TD aim develop framework decision related prioritization TD credit authorship contribution statement   conceptualization methodology draft   data extraction data analysis   methodology draft antonio martini supervision review edit funding acquisition    supervision review edit funding acquisition appendix overview primary adopt selection identify primary PS illustrate distribution relevant TD prioritization publish publish publication trend increase considerable increase respectively PS publish source journal conference workshop specifically journal publication source information software technology ist journal software JSS software empirical software engineering journal  journal software evolution  computer program regard conference workshop international conference technical debt  former workshop manage technical debt MTD euromicro conference software engineering advanced application seaa international conference agile software development XP international conference focus software improvement  international conference software engineering ICSE international conference management digital eco  international conference service compute international workshop quantitative approach software quality  international workshop emerge trend software metric  international conference enterprise information  international symposium empirical software engineering measurement ESEM international conference software architecture workshop  international conference software maintenance evolution icsme international conference quality software architecture  international conference software engineering advance  context data PS conduct investigate TD issue analyze project PS report finding analyze project project project program regard project analyze majority PS project identify account context project SP project SP project SP project PS report program project java remain investigate TD issue survey practitioner TD issue mainly investigate focus maintainability remain PS account phase  changeability appendix SP   kuiper empirical model technical debt workshop manage technical debt MTD SP  shaw   investigate impact debt software quality workshop manage technical debt MTD SP    prioritize debt investment opportunity workshop manage technical debt MTD SP    estimate principal application technical debt software vol SP     investigate impact code debt quality code evaluation international workshop manage technical debt MTD SP technical debt data decision potential decision approach international workshop manage technical debt MTD SP  robinson guo  define decision factor manage defect technical debt perspective international workshop manage technical debt MTD SP schmid formal approach technical debt decision international acm  conference quality software architecture  SP sharma   challenge refactoring adoption industrial perspective software vol SP martini bosch  investigate architectural technical debt accumulation refactoring multiple information software technology volume SP wang    series software engineering refactoring recommendation international conference management computational collective intelligence digital   SP martini bosch towards prioritize architecture technical debt information architect owner euromicro conference software engineering advanced application SP   validate prioritize quality manage technical debt industrial international workshop manage technical debt MTD SP yli      develop increase technical debt visibility manageability action research focus software improvement SP guo oliveira   explore technical debt management empirical   volume SP yli    software development manage technical debt empirical journal software vol SP xiao  cai rick   feng identify quantify architectural debt international conference software engineering ICSE SP vidal   pace  garcia   flexible analysis code international conference  computer society SP  singh minimize refactoring effort prioritization historical architectural code information  tda  SP gupta    pragmatic approach manage technical debt legacy software project india software engineering conference  SP  williams technical debt prioritization predictive analytics international conference software engineering companion ICSE SP   technical debt management genetic algorithm euromicro conference software engineering advanced application seaa  SP    heuristic estimate impact linger defect debt analogy metric workshop emerge trend software metric  SP      strategy multiple decision criterion technical debt management euromicro conference software engineering advanced application seaa SP  williams  cantor empirical assessment technical debt journal software evolution vol SP     assess code probability XP scientific workshop XP article SP  martini bosch impact architectural technical debt daily software development survey software practitioner euromicro conference software engineering advanced application seaa SP   santos     investigate identification technical debt code comment analysis lecture business information processing SP     lesson  research project planning technical debt strategically international conference focus software improvement SP   martini bosch peace manage technical debt exploratory international symposium empirical software engineering measurement ESEM SP martini bosch reveal social debt  framework  architectural debt international conference software architecture workshop  SP martini  vas jones  grundy bosch technical debt assessment issue project XP scientific workshop SP martini bosch  towards systematic estimation technical debt  scientific workshop XP article SP  martini bosch  bill technical debt paid international conference software maintenance evolution icsme SP martini   semi automate framework identification estimation architectural technical debt information software technology vol SP  rodr칤guez  hern치ndez  ortiz   s치nchez  evaluation technical debt impact maintainability journal software vol SP martini  bosch technical debt survey multiple organization computer program vol SP martini     identify prioritize architectural debt architectural software european conference software architecture  SP  prioritize technical debt  international conference technical debt  SP   prioritize technical debt database normalization portfolio theory data quality metric international conference   SP   towards technical debt management framework benefit analysis  SP     debt prioritization approach international conference technical debt  SP         lima align technical debt prioritization business objective  international conference software maintenance evolution SP  boehm technical debt prioritization approach international conference software quality reliability security QRS