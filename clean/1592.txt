background microservices architecture popular strategy software organization deliver customer continuously however scientific knowledge manage architectural debt microservices scarce objective context microservices application aim identify architectural technical debt ATDs conduct exploratory multiple conduct interview practitioner microservices ATD issue negative impact repay debt related principal critical ATD issue database properly potential service database schema api couple identify ATDs domain stage development relationship debt conclusion finding organization develop microservices manage avoid architectural debt previous keywords software software quality software maintainability qualitative analysis introduction microservice architecture relatively architectural style become increasingly popular microservice component developed deployed independently easy responsibility characteristic microservices particularly convenient continuous delivery microservices built around business capability architectural style capable organize functional around service microservices suppose deliver customer continuous fashion despite advantage microservices emerge technology drawback architectural style data inconsistency various service suppose online bookstore service manage catalog another manage delivery customer service database client remove stock service delivery trigger database update remains inconsistent service update database meanwhile client available stock database properly migrate monolithic software microservices challenge implement microservices scratch easy maintain evolve situation practitioner architectural sub optimal decision benefit increase overall situation described metaphor architectural technical debt ATD fundamental principle claimed benefit quality maintainability microservices proven research envision qualitative practitioner manage ATD microservices directly affect software maintainability request literature concern microservices migration related literature focus specifically ATD explore diversity challenge regard ATD microservices across contribution meeting described conduct multiple international europe investigate ATD microservices research RQ critical ATD issue microservices RQ negative impact ATD issue RQ repay avoid ATD issue identify ATDs outline principal develop metric quantify ATDs contribution practitioner decision project involve microservices background describes concept microservices architectural technical debt microservices lewis fowler accepted definition microservices architectural style approach develop application suite service communicate lightweight mechanism http resource api microservices frequently described alternative monolithic application built deployed amazon netflix microservices overcome difficulty previous monolithic architecture application microservices easy shorter cycle release frequently affected downtime monolithic application characteristic microservice application particularly desirable continuous delivery feature independently continuously deliver update specific microservices without drastically reduces challenge risk increase data inconsistency operational complexity image KB image monolithic microservice architecture microservice architecture described implement service orient architecture soa although certainly soa describes application cannot microservices soa application implement enterprise service bus  infrastructure mediates request service intercept communication transformation capability function  monolithic artifact deployed service contrast microservices employ dump pipe communication layer without business logic characteristic soa microservice architecture characteristic guidance service granularity soa microservice architecture suggests service capability soa transport protocol transformation microservices usually apply http protocol message bus service soa business enterprise application microservices functional business capability infrastructure technical capability authentication authorization service despite difference concept technique microservices borrow soa approach communication detailed concept scalability service discovery service registry detailed concept service availability responsiveness detailed adaptation concept technique microservice architecture limited communication protocol concept service mesh explain emerge microservice architecture summary overlap certainly difference technique concept soa microservice architecture focus microservices microservices communication scalability service discovery microservices context scalability service ability cope perform demand scalable microservice adapts consumer service multiple instance instance service replace fails already traffic another instance service available instance service service discovery mechanism situation service discovery instance service perform consult service registry service information service available unavailable instance service instance perform service discovery exemplify api gateway query registry instance service client service discovery exemplify server discovery oppose client discovery client responsible query service registry service availability responsiveness service consumer request information remote service producer service availability producer ability accept request timely manner inversely service responsiveness consumer ability timely response consumer request producer consumer response cannot indefinitely consumer specific timeout request failure consumer request producer load entirely inaccessible consumer repeatedly producer available timeout action waste resource technique circuit breaker service demonstrate latency mostly unusable circuit breaker immediately responds consumer consumer resource service fail unavailable service response prevents network service failure cascade service consumer service mesh finally service mesh emerge popularization microservice architecture service mesh dedicate infrastructure layer service service communication service reliable observable usually implement mechanism introduce previous others service discovery mechanism load balance encryption circuit service observability mechanism strictly implement microservices beneficial microservices architectural technical debt overview ATD management relationship related concept overview ATD ATD technical debt TD consist suboptimal architectural deliver benefit increase overall identify ATD particularly important architecture functionality related author ATD challenge TD unveiled manage due lack research practical concept TD debt principal debt sub optimal benefit generate future payment debt suppose functionality implement component developer component without carefully planning interface develop faster tightly couple component easy develop maintenance costly due tightly couple component component consequential component update component delivery functionality extra paid debt amount debt previous additional effort update dependent component component principal develop avoids debt refactoring avoid debt principal previous principal effort resource develop involve component interface tightly couple independently profitable circumstance accumulate debt theory accumulate debt calculation principal accumulate debt significant principal debt avoid however easy actual regard principal important involve stakeholder conscious debt principal practitioner decision ATD avoid accumulation ATDs software cycle important debt repaid avoid accumulation microservices lack identify ATD motivates ATD management manage ATD important repay debt ATD management activity ATD identification phase ATD item principal detect described ATD measurement phase debt benefit analyze estimate ATD prioritization phase item sort criterion importance ATD item repaid ATD repaid instead invest activity develop feature ATD repayment phase architectural decision repay debt partially ATD monitoring phase ATD item monitor regard benefit identify ATD microservices contribute information helpful ATD prioritization monitoring ATD repayment ATD versus related concept relationship ATD concept architectural anti erosion drift concept associate ATD others defect degrade quality TD literature briefly although various exist concept comprehensive clarify relationship therefore report interpretation concept available literature date definition TD available dagstuhl seminar report technical debt collection implementation construct expedient technical context future costly impossible architecture focus construct relationship sub optimal construct discus architectural indicator symptom presence ATD however architectural ATD context report situation cyclic architectural dependency graphical user interface gui component suboptimal fairly normal report ATD principal image KB image ATD related concept architectural reusable architectural correctly context define appropriate architecture exist ATD however context specific context respective debt apis architectural issue context principal debt remove architectural anti repeatable suboptimal construct violate principle increase likelihood bug anti debt generates anti besides suffer ATD consist something bug loss development degradation software quality report architectural anti cyclic dependency disclose report practitioner research anti microservices infancy define taxonomy identify soa focus microservices although soa relevant microservices architectural erosion describes architecture violate architecture architectural erosion addition workarounds bypass architecture architectural drift describes situation imply architecture unclear divergence architecture easy violation erosion amount suboptimal construct increase principal TD become accumulate debt debt however remains principal context debt data leak debt newsletter email address compromise notion architectural erosion drift literature architectural degeneration software erosion architectural decay defect software fix software malfunction unexpected explain defect visible customer therefore TD ATD defect degrade quality issue perceive customer internal issue reduce productivity existence TD debt concept apart perceive gap suboptimal optimal construct misuse architectural context suitable responsible gap however gap optimal suboptimal formulate ATD focus financial variable related principal dependent context methodology aim identify critical ATD issue principal microservice architecture investigate circumstance ATD identify insight related occurrence conduct exploratory multiple analyze remainder data analyze outline methodology image KB image methodology overview context   application   approx employee approx employee approx employee approx unique microservices stage     selection software international sub within multinational  microservice architecture although minor previously developed monolith soa approach overall architecture microservice architecture migrate various application domain diversity investigate context understand widespread domain specific summary confidentiality respectively application domain microservices project investigate finance software assist user financial operation management payment insurance investment software service consumer iot software internet domain information data device internet health software health service user profile medical information public service software public service  management tax transport software assist user public private transport passenger stage software project accord classification initial development software developed microservices migration software migrate monolith service approach microservices evolve consolidated microservice approach currently maintain evolve multiple specific simplicity refer image KB image transform quotation practitioner code cod classify category extract analysis debt emphasize reference analysis data collection perform interview employee role detailed interviewee convenience sample collaboration network access interviewee role consent interview transcribed semi structure interview appendix interview access employee solid understand amount detail initial exist ATDs continued additional investigate across context interview interviewee num  interview owner  author interview  author return interview developer  author interview   author return interview  author interview  software  author return interview  author interview   author interview     software   progress interview context aspect emerge additional ATD instance detail specific instance update interview along interview regard debt ensue interview investigate return previous interview additional available shorter complementary interview min met newly discover aspect interview later interviewee clearly distinguish internal library external dependency external framework source software previous interview clearly distinction return previous interviewee additional clarification detail return previous interviewee newly discover ATD item identify later interview interviewee perceive heterogeneity approach service implementation neutrality harmful initial interview researcher distance interview conduct interview audio video conferencing detailed methodology interviewee additional input information context additional interview interview appendix data analysis data analysis mainly perform cod approach theory theory systematic methodology involves cod usually cod exploratory aim concept data fragment analysis quotation transcription audio recording flag label code later despite finding related topic cod category identify related ATD issue finally associate code category ATD principal deductive manner perform cod phase relationship code category cod code instance debt another instance instance principal cod phase principal respectively consequence debt multiple api version apis poorly debt grouped code relationship report phase synthesize finally perform member participant review finding increase reliability summary finding interviewee review feedback update description accord comment critical ATDs distribute debt principal indicates respectively accumulate debt identify paid principal empty interviewee report related debt principal negative impact ATD accord respondent actual numerical negative impact principal closest qualitative description extract data propose apply successfully practitioner project remainder describes identify debt principal debt insufficient metadata message ATD message insufficient metadata data packet communication apis message however data packet message bus metadata typically message useful information increase overall message debt accumulate developer message lighter performance due service planning debt insufficient message traceability message insufficient metadata  message source service deliver message message bus traceability metadata available service consumes message message bus service service message primary issue impossibility dependency service interviewee exemplify debt regulatory requirement document traceability data data source lack metadata data fulfill requirement service dependency service longer service deactivate service service cannot deactivate service impossible dependency deactivate dependent service mention service unused service service remain deployed consume resource besides impossible message source incurs related data trace regulation financing financial operation impossible available metadata indicates source principal interviewee described primary service ownership metadata message hypothetical metadata information attach message metadata allows service service message originate entire service information service message propose define requirement implementation canonical data model ensure compliance data traceability canonical data model agreement standardization data definition business ensure service information image KB image absence dependency mechanism impossible service longer service deactivate service cannot debt queue growth management queue receives message nonexistent queue message reject queue accumulates message facilitate inspection lack mechanism queue growth ATD issue queue becomes message ownership architectural technical debt identify         insufficient metadata message insufficient message traceability queue growth management microservice couple lack communication standard microservices inadequate apis restful api complex api message simpler inadequate technology microservices architecture excessive diversity heterogeneity technology chosen across manual per service handle network failure target service unavailable unplanned data synchronization service persistence database schema unplanned database synchronization business logic communication service reuse implementation service version internal library external dependency various license approval overwhelm amount unnecessary setting service excessive queue quickly inspect message becomes impossible queue consumes resource cleaning queue without lose important information impossible due message besides predict message queue instead destination catalog architectural technical debt principal   principal insufficient metadata message insufficient message  impossibility identify deactivate service anymore impossibility source message incur data trace  service ownership metadata message identification source implementation canonical data model ensure compliance queue growth  impossibility identify source message message loss  removal queue responsibility message delivery endpoint metadata identify source message splitting queue queue manage microservice  increase amount unnecessary service dependency coordination overhead cascade service consumer producer update eventual service eventual incident update  generic independent service internal training api development api approach service slot continuous api improvement development lack communication standard  translation service overwhelm amount message format  ensure standardization canonical data model inadequate apis restful api  apis stable frequent frequently backwards compatible instability demand creation maintenance multiple api  additional effort stabilize api avoid future management api version internal external consumer definition deprecation strategy definition standard apis complex api message simpler  additional couple service inherently  redesign service message approach inadequate technology microservices  latency service communication dedicate maintain impossibility  planning technology migration excessive diversity heterogeneity technology chosen across  service cannot communicate developer cannot easily migrate resistance technology later developer velocity slows maintain distinct additional source code  limit technology specific mono repository incentive related project related software program likely manual per service handle network failure target service  extra maintain additional complexity  circuit breaker mechanism service mesh unplanned data synchronization service persistence database  potential service complex database schema difficulty service  database service creation distinct database scheme service inside database wrap database within service prevent access unplanned database  synchronization issue visible  context dependent database complex transaction mechanism implement business logic communication  unnecessary maintain business logic communication  business logic service communication layer reuse implementation service version internal  update related service service update multiple version library maintain issue generate refusal adopt adopter handle dependency service library developer  reduction library replication code creation service perform complex code functionality external dependency various license  delay approval  invest evaluate approve external dependency overwhelm amount unnecessary setting  complex environment unexpected issue  creation repository configuration setting reduce amount configuration setting service requirement peer approval accept setting creation configuration server automate deploy configuration setting excessive  governance multiple project instead monolith reveals principal primary remove queue shift responsibility message delivery service issue queue service accumulation message impossible articulate interviewee distribute queue ownership metadata message distribute queue therefore metadata identifies message source easy handle lose message easy creator splitting queue queue manage conquer debt microservice couple microservices mostly independent define boundary interface lack knowledge  accumulate ATD related tightly couple microservices interviewee decouple dependency something debt apis accumulation debt creates dependency delay affect development delay delivery besides someone access involve handle unnecessary coordination overhead exemplify develop tight microservices tightly coordinate another incur debt cascade spending effort update deploy dependent service due service accumulate debt service easily increase various service useful diverse situation specific finally debt incident dependent service update principal service generic independent usually incurs principal mention reduce accumulation aforementioned debt api service instead focus code accord interviewee suggestion orchestrate apis api longer relevant internal training develop apis mitigate propose aside slot development continuously refactor improve apis debt lack communication standard microservices autonomous guideline standard model apis message format service communicate service accumulate debt apis message format emerge various interviewee message producer message define format data debt microservices standard standard incur additional become issue tower babel previous evidence message developer exert unnecessary effort  message distinct format service communicate accord source debt data duplication lack consistency unwanted complexity becomes overwhelmingly complex due api message format service interact another develops service message api format define translation principal accord typically organization canonical data model implementation properly police model become complex costly debt inadequate apis api fail properly api interface error code etc easy code negative apis situation message preferable situation constitute debt inadequate api detail situation debt restful api restful apis convention address readability uniform interface  implement retrieve update delete operation resource http status code api response developer restful apis without convention focus functional operation perform resource update instead retrieve collection item api issue api convention apis stable interviewee emphasize revision api api instability creation api version maintain deprecate version maintain backward compatibility version api intentional unintentional principal interviewee apis standardize versioned stable service affect apis interviewee explicit deprecation strategy deprecation announcement previously define extend useful internal external consumer hence contact directly request migration stable version api debt complex api message simpler situation asynchronous communication approach particularly appropriate execute situation service immediate response another update user address synchronous communication choice synchronous whereas message approach asynchronous message appropriate constitutes another architectural debt associate improper specific instance described complex service forth message instead service respond message arrives api endpoint instance communication service situation increase couple service due relatively complex handshake service involve service directly api endpoint instead simply trigger message besides service harder due aforementioned complexity maintain service increase principal accord primary completely message passing approach message generic involve service without complex processing debt inadequate technology microservices architecture technology choice positively negatively affect software architecture technology microservices architectural style service discovery circuit others certainly technological similarity soa approach however difference  microservices provider technology operating storage software architectural choice simply limitation interviewee technological built platform upon choice therefore inadequate technology platform service infrastructure service provider technology software architecture incurs debt debt context dependent finding technology message bus responsible transfer message service considerable latency communication consequent maintain instead priority feature previously platform sufficiently manage service implement functionality without availability technology principal report primary planning architecture technology harder later impossible migrate appropriate technology prevent debt excessive diversity heterogeneity technology chosen across program related technology architectural choice project microservices developer freedom program communication technology api standard message technology technology service although advantage framework technology appropriate specific task freedom described freedom debt excessively diversified environment issue service technology cannot communicate service another apis message technology service distinct technology communicate workaround developed individual cannot easily migrate another technology choice later service become accustom choice finally developer performance decrease maintain distinct potentially divergent setup environment maintain additional source code repository principal primary report limit technology available technology multiple service limit available technology interviewed practitioner alignment complexity minimize complexity besides program specific monolithic repository allows related software microservices distinct payment cash credit program repository repository encourage deployment prevent surge setup merge service technology debt manual per service handle network failure target service unavailable distinct microservices communicate synchronously usually contact network unfortunately issue communication communication channel overload target service unavailable lack resource crash timeouts approach mechanism within service retry contact target fix however approach proven debt developer handle described interviewee mention implement retry mechanism manually service increase code complexity developer service handle situation retry signal error approach increase service complexity related maintenance increase architecture overall complexity principal report reduce complexity feature retry mechanism circuit breaker interviewee declare introduce service mesh simplify complexity developer handle retries service mesh introduce usually circuit mechanism carefully overhead debt unplanned data synchronization service microservices database synchronize data service situation incur debt planning data synchronization service various debt interpret couple service debt another fix necessarily couple issue fix debt database issue debt persistence database schema persistent storage database schema multiple microservices critical architectural debt easily recognize situation database technical debt aware rid database service  data database modification potentially service schema easily service structure without database schema service unknown service database schema therefore development service schema due lack information increase odds service database complex contains information multiple service principal ideal database service split database service responsible database wrap database service expose api instead access although database complexity database contains data multiple service complex database reduce database schema manipulation wrap database impossible service business critical migration cannot interviewee database schema service enable service independently debt unplanned database synchronization microservices increase likelihood distribute database synchronization however interviewee challenge data consistency involve multiple service multiple database somehow consistent align fulfill successfully situation incur debt improperly synchronization software compose multiple microservices remain inconsistent related database update bug interviewee feature basically align database information user dashboard cannot due confidentiality restriction explain fictitious online bookstore developed microservices contains microservice purchase microservice manage inventory user purchase simultaneously user simultaneously buying user buying payment mechanism synchronize inventory management purchase service encounter business criticality affected feature principal report distinct feature criticality database service debt complex transaction mechanism approach implement transaction report debt business logic communication service microservices encourage dumb pipe message router communication communication layer microservices business logic however project developed data transport within communication channel service communication channel business logic business logic service communication layer constitutes architectural debt logic suppose exist maintain additional business logic apart service costly service communication layer business logic besides communication communication channel possibly business logic external communication channel maintainer understand detail related service implement business logic principal interviewee business logic service communication layer dumb pipe involve related implement logic service understand implement independently debt reuse implementation reuse code reduce resource program software development reuse develop library various microservices library context microservices various service usually reusable code framework extension library developed external code external external dependency microservice library external dependency implementation evidence implementation architectural debt differs library external dependency debt service version internal library develop library reuse code library complex operation exist library efficient native binding faster however library constitute architectural debt service library described negative impact release library update service roadmap establish handle version library maintain replace version service impossible development priority sometimes client business critical roadmap upgrade version library priority adopter refuse implement version exist library frequently unknown due unexpected situation fix library update service developer library explicitly develop library delay release library version functionality likely affect service developer principal mention avoid discourage library complex code transform service straightforward code duplicate practitioner exception alternative exists amount library minimal debt external dependency various license approval external dependency library framework software developed external evidence architectural debt license strictly limited externally developed software accumulate debt almost impossible steep avoid code licensing limitation document document  application trial public export another eventually dependency replace due non compliance regulation license limit business model service prevent software distribution due risk regulation issue approve dependency consume delay principal approach exists handle issue invest evaluate approve dependency suggests external dependency license approve advance avoid issue debt overwhelm amount unnecessary setting service microservices reuse deployed various setting tweak parameter explain situation microservices tend expose configuration setting basically overridden default whoever deploy microservice override deployment microservices aggregate setting handle parameter becomes overwhelm instance parameter overridden environment resource usage however incur debt unnecessary configuration setting service maintenance manage parameter overhead deploy debt increase likelihood unexpected issue frequent deployment somebody something deployment script likelihood mistake combination mistake fix development principal interviewee repository configuration setting usually manage version besides peer approval setting repository production prevent issue interviewee reduce configurable setting service minimum configuration server automatically apply setting repository deployment simplifies manage setting debt excessive definition microservice capability cycle development deployment documentation governance software report microservices effectively become handle debt via excessive microservice separately overhead dedicate management development deployment maintenance exist monolith deployment principal reveals report really standard document handle aspect software discussion discus ATDs context relate overall avoid limitation debt context discus various ATDs relation application domain project stage specific context factor aim practitioner understand adapt apply specific context difficulty message traceability debt affect financial management queue debt migrate approach couple debt affect report critical couple issue service interviewee lack communication standard service debt frequently application service avoid project microservices however conclusion investigation service report inadequate apis debt debt attention api update report affected apis investigation primarily message approach balance apis message interviewee discus technique apis focus reporting finding interview however api important role fix debt  systematic approach develop usable apis relation debt debt lack communication standard microservices although apparent data inadequate technology debt usually harder fix entire platform project chosen technology entirely project therefore debt attention project technology chosen propose overwhelm diversity technology debt limit technology contradict definition microservices suppose independently deployable practitioner freedom technology however diversity reasonably limited various difficulty migrate developer decrease performance maintain potentially divergent setup additionally despite monolithic repository debt risk microservices overload repository therefore monolithic repository subset microservices microservices technology stack manually handle retries communicate temporarily unavailable service debt attention debt apis message technology access another service message bus issue data debt rare dangerous service attention service debt persistence database schema unplanned database synchronization highly interconnect debt splitting database debt database service propose interviewee debt incur debt avoid database schema business logic communication layer debt dangerous legacy develop aware issue avoid successfully misuse library debt generate therefore argue carefully interviewee report issue library external dependency framework identify difference library external dependency issue external dependency debt relate licensing restrict multiple deploys software various worldwide project microservices involves configurable setting microservices debt report service deployment complex error prone setting define excessive debt avoid relate service granularity unknown factor simply drawback microservices investigate debt described architectural style restful api debt monolith however microservices service application monolith expose api whereas functionality existence multiple apis application multiple failure instead microservices additional technology apply architectural style introduce description technology technology originally developed adapt soa others specifically microservices approach propose literature manage ATD regard debt newman suggests database wrap service newman discus finding migration user interface composition database synchronization although mention respondent principal debt understand debt related essential analyze consequence refactoring illustrates debt principal principal debt built described category debt category debt generate extra handle cascade unnecessary service debt overwhelm amount message format developer handle debt categorize development overhead interviewee explicitly relationship researcher infer others analysis finally procedure principal principal debt metadata standardization generic service development overhead twelve debt report eleven sixteen sub debt reduce development overhead without invest repay debt developer affected overhead image KB image principal debt potential within service debt debt invest debt reduce probability instability cascade failure dependency debt debt dependency contribute delay project productivity loss developer another similarly velocity reduction debt debt advisable extra attention debt responsible specific principal related debt mapping practitioner focus debt manage accord costly issue perceive project microservices couple evidence debt sub debt indirectly increase probability microservices couple debt consequence debt lack communication standard microservices excessive apis message format increase likelihood format couple default involve service cannot communicate originally developed interaction consequence debt inadequate apis service boundary define creation functionality service service independently couple functionality another service debt unplanned data synchronization service indirect couple database database trigger additional functionality eventually service service database database structure finally debt business logic communication service couple logic usually couple service couple issue handle microservices developer mention developer debt described debt indirect consequence debt invest repay debt addition debt reduce probability couple service approach avoid ATDs microservices technique described non peer review literature handle ATDs report research technique ATDs report domain driven significant challenge microservices relates boundary boundary increase couple microservices debt powerful approach define microservices boundary shelf deserves research however remove debt chose database none interviewee detail approach avoid inconsistency data however approach eventual consistency model optimistic replication saga phase commits  explains eventual consistency model guarantee subsequent access return update away eventually access data return update delay consistency versus availability distribute garcia   propose saga technique adapt microservices saga involve implement transaction service via sequence local transaction service saga transaction fails compensate transaction restore database previous phase commits distribute database research technique consists commit phase permanently phase agreement involve newman argues phase commits mainly existence inconsistency data newman suggests saga instead regard ATD approach investigation microservice architecture maturity microservice architecture mature practitioner understanding comprises microservice practical decision soa mature concept standard WS standard web service microservices implement soa standard WS microservices implementation practitioner tend heterogeneous experienced staff member distinct background variation staff member generate opinion emerge architecture definition related technology mature opinion increase practitioner likelihood struggle ATD environment consequently frequent costly ATD microservices important limitation sample respondent limited particularly interviewee bias triangulate data via additional perspective participant source triangulation furthermore interviewed debt debt exist unable interviewee convenience sample debt representative respective return interviewee multiple bias return interview interviewee primarily emerge interview directly related debt identify precede interview introduce bias mitigate issue interview exist debt avoid anchor specific debt interviewee uncomfortable truth mitigate via source triangulation impossible achieve source triangulation purpose multiple investigate depth generalize finding statistically yin sample opportunity shed empirical theoretical concept principle practitioner judge extent finding apply context similarity difference investigate survey context related insight enables reporting statistically research conduct survey opinion regard identify ATDs principal related identify ATDs microservices hinder adoption microservices deeper barrier driver adopt microservices   identify issue related compliance regulation license barrier identify licensing regulation become ATD barrier microservice architecture article extends previous investigate additional confirm debt previous apart business logic communication service insight specifically update catalog ATDs moreover originally propose debt connection service explain couple issue debt related debt business logic implement communication layer described debt approach standardize communication model service described debt weak source code knowledge management service remove catalog classify distinct non architectural debt unnecessary presence middleware technology communication service merge debt debt description   interviewed developer built catalog microservices recently taxonomy architectural organizational anti microservices relationship ATDs architectural architectural anti concept anti ATD code duplication TD ATDs identify anti however ATDs enables evaluate principal identify   overlap persistence overlap debt standard overlap debt library overlap debt microservice greedy overlap debt however careful consideration service interview reinforce importance overlap exist detail debt principal   argue transform internal library source software reduce issue library debt despite insufficient evidence confirm suggestion depth confirm refute finding perform qualitative via interview explore evolvability assurance microservice issue report related ATD differs research focus investigate evolvability assurance across ATD issue systematically investigate debt principal microservices architecture partially overlap ATDs technological heterogeneity discus participant technology microservices relates debt inter service dependency ripple refers debt api debt distribute code repository argue complicate access source code relates debt summary related overlap limited none extensive comprehensive concern ATD microservices interview  organization  project duration technology goal role project microservices another service orient architecture challenge regard architecture recently impact manage avoid migrate challenge migration migration migrate  challenge regard communication service business logic outside service communication manage handle  standard apis message format issue due choice standard manage manage source code documentation  issue regard license manage  issue regard library manage  issue regard data manage mention situation issue manage reduce development bug negative impact quality impact developer become future  additional issue conclusion future software development  important manage ATD avoid extra analysis catalog ATDs microservices consequence principal moreover relationship ATDs principal practitioner identify avoid ATDs planning refactorings remove regard RQ ATDs business logic service database lack data traceability mechanism poorly apis library RQ debt substantial unexpected due database schema dependency unnecessary api complexity couple service dependency finally RQ identify handle ATDs ATD future survey increase generalizability additional information repayment prioritization furthermore insight report article propose investigates metric debt principal microservice architecture quantify benefit prioritization decision