microservices widely impact software recent rapid evolution continuous deployment specific benefit microservice significant impact non functional performance despite obvious relevance lack systematic approach explicitly account performance issue lifecycle microservice context evolution deployment model driven engineering technique various software engineering activity manage relationship architectural model propose model driven integrate approach exploit traceability relationship monitor data microservice architectural model derive recommend refactoring action performance improvement approach apply validate microservice domain commerce ticket reservation respectively architectural model uml profile MARTE previous keywords performance engineering model driven engineering microservices software refactoring software evolution continuous deployment introduction microservices become popular style architecting software suite service nowadays adopt technological player netflix amazon google benefit microservice architecture ensures loose couple rapid evolution continuous deployment addition independently developed service developer productivity scalability maintainability contextually rapidly complexity software practitioner investigate development technique tackle advance productivity quality extent software engineering relay automate approach development tackle rapid software capability considerably impact non functional performance manage software complexity decade embed model driven engineering MDE approach perceive benefit enable developer abstraction rely automation throughout development nevertheless MDE developed industrial project intent challenge achieve efficient integration runtime aspect instance observation instrumentation metric related software comprehend extrapolate analyze inner behavior software context non functional performance consumption memory footprint become relevant software application identification induces model software performance engineering approach propose detect remove performance software model technique concept performance antipattern characterizes jeopardize software performance along refactoring action aim remove propose monitoring execution performance however envisage solid integration architectural model instead benefit adopt model performance evaluation ability conduct analysis analysis expensive analyze behavior expose workload analyze performance sensitivity parameter variation solid connection runtime information architectural developer architectural aim meeting performance requirement actually scenario specific workload propose model driven approach realize continuous software engineering loop microservice approach exploit runtime interaction designer microservices performance analysis refactoring task microservices monitor distribute trace central location metric instance service aggregate understand overall behavior runtime related architectural investigate potential performance issue implement effective refactoring action realize approach exploit specific characteristic microservice autonomous entity independently allows service deploy independently contrast monolithic application refactoring impact amount additional coordination component release monolithic application deployed imply manage delta release risk malfunction previous preliminary version approach realize within eclipse emf integrates model driven framework definition traceability model extract architectural model realize JTL architectural model runtime monitor performance index adopt performance improvement extends previous extend translation refactoring action performance model analysis refactoring action apply closing continuous performance engineering loop enable detection performance antipatterns basis performance index instead employ model estimate performance index addition introduce extraction additional performance index cpu utilization inevitably realistic evaluation performance previous apply approach shopper model beside application performance engineering loop shopper model apply approach additional ticket previous literature evaluation approach research introduce former RQ propose model refactoring action improve performance RQ extent performance antipattern PA removal improve performance previous approach apply microservice model uml profile MARTE official omg profile augment uml quantitative knowledge behavioral aspect sequence diagram whereas static aspect component deployment diagram organize introduces background information technique describes propose model driven approach continuous performance engineering approach apply validate realistic microservice threat validity related finally concludes background background exist technique adopt monitoring infrastructure define characteristic microservice service independently deployable aspect independent development service traditional application monitoring insufficient suitable monolithic application gathering metric service understand behavior adoption distribute trace correlate generate individual service transaction traverse entire focus microservices application deployed docker developed boot consequence chose  implement distribute trace  trace consists series casually related trigger request distribute span operation component span reference span trace assemble workflow span contains information operation component operation timestamp duration alternatively timestamp role span request user define annotation tag beside information span generate  IP address service java implement operation unique identifier instance application trace infrastructure approach trace service execution zipkin distribute trace zipkin configure monitoring data distribute database elasticsearch resource utilization individual microservices another important aspect monitoring performance perf performance analyze perf commonly performance counter profile linux hardware software performance counter  dynamic probe perf accurate cpu utilization microservice elasticsearch along trace zipkin MDE technique model driven engineering MDE leverage intellectual business logic source code specification enable accurate analysis application domain consistently analyze engineer metamodel coherent interrelate concept model conform metamodel meaning former express concept encode latter constraint define meta consistency relationship model guaranteed bidirectional model transformation specify source target metamodels introduction model driven technique software lifecycle analysis non functional become effective dedicate automate assessment quality attribute model driven framework define model driven traceability link relate software architecture runtime information perform performance analysis model refactoring respectively framework introduce JTL JTL janus transformation eclipse emf realize maintain consistency software artifact constraint relational model transformation specifically tailor  propagation traceability within framework designer specify model transformation bidirectional relationship domain metamodels bidirectional possibility apply transformation domain vice versa JTL transformation mechanism relational semantics rely program asp  constraint solver consistent JTL traceability mechanism relevant detail linkage model execution MDE linkage concept traceability relationship designer understand association dependency exist heterogeneous model traceability link relationship source model target model whereas trace model structure traceability link source target model within JTL traceability link extrapolate transformation execution explicit framework traceability model maintain model conforms dedicate traceability metamodel define ecore format within emf traceability model manipulate designer PADRE PADRE performance antipatterns detection model refactoring unified framework improve performance quality uml model performance antipatterns detection model refactoring exploit epsilon implement detection refactoring action furthermore PADRE employ uml model augment MARTE stereotype link performance data uml MARTE model analysis embed official omg profile extends uml quantitative knowledge MARTE profile structure package sub package specific aim approach stereotype generic quantitative analysis model  package  stereotype runtime data uml basis runtime knowledge PADRE detect eventually remove performance antipatterns performance antipattern description performance degradation moreover PADRE equip performance analyzer exploit queue network  approximation algorithm obtain performance index PADRE detect performance antipatterns refactoring action refactoring action specific action remove specific antipatterns aim improve performance quality without target specific aspect PADRE detection refactoring session namely user driven batch multiple session multiple session allows apply refactoring action batch session performs refactoring action performance antipattern remove user driven allows performance expert specific performance antipattern occurrence remove employ user driver session performance expert refactoring loop performance antipattern introduce performance antipattern PA concept performance antipattern describes performance degradation concept mutate antipatterns describes quality degradation cohesion smith williams textually described performance antipatterns PA smith williams identify basis exist textual description translate logic representation enable automate detection pas logic representation PA combination multiple literal specific furthermore literal threshold safety limit  image KB image workflow approach blob pipe filter performance antipatterns potential microservice recap definition pas blob occurs component god performs software manifestation excessive message traffic degrade performance expression describes blob performance antipattern logic inequality expression refers expose interface component interface precondition identify component god inequality instead god effectively involve inequality refers hardware utilization hardware component inequality component identify blob performance antipattern pipe filter occurs slowest filter pipe unacceptable throughput situation formalize expression differently blob performance antipattern pipe filter identifies operation performance degradation operation amount resource execute heavyweight resource demand described inequality expression beside operation certainly execute performance degradation checked equality finally hardware utilization exceed safety threshold inequality pipe filter manifest literal refer characteristic performance approach underlie approach exploit correspondence architectural runtime aspect software aim improve performance depicts continuous performance engineering loop runtime data acquisition microservice monitor distribute trace central location metric instance service aggregate understand overall data model format compliant emf runtime traceability generation phase behavior runtime architectural traceability model automatically generate correspondence formally pre define metamodel model analysis refactoring analysis traceability model aim performance issue affected component identify analysis definition model refactoring action apply model identify promising refactoring emerge refactoring action implement apply runtime data acquire iteration workflow detail runtime data acquisition metamodel defines characteristic model trace information request  service microservices application associate span  service utilization attribute percentage cpu usage observation trace identify unique ID span execution span define attribute timestamp occurs duration server client undefined moreover span trigger another  reference connects trigger span trigger span span refers endpoint url perform request image KB image fragment raw image KB image model sample eclipse depicts sample model information negligible purpose instance topmost span  span duration server november timestamp http category category endpoint belonging gateway service model automatically generate raw java transformation serialize textual representation xmi encode model conform metamodel runtime traceability generation phase depict correspondence behavior runtime architectural define generate generate traceability link uml model JTL introduce JTL specification runtime relationship declarative metamodel bidirectional model transformation metamodels JTL traceability execute bidirectional model transformation automatically generate correspond traceability link uml model model image KB image runtime traceability generation traceability link explicit traceability model conform dedicate metamodel namely JTL traceability metamodel depict basically defines notion  traceability model relates model belonging domain model belonging domain trace link enforce mapping  relates belonging domain  correspond belonging domain  link   refers  org eclipse emf ecore  specific domain listing excerpt JTL define correspondence runtime concept runtime concept belonging metamodel explain software concept belonging uml metamodel behavioral aspect target sequence diagram whereas static aspect target component deployment diagram image KB image JTL traceability metamodel specification define relation involve metamodels uml related monitoring trace execution uml message sequence diagram related monitor span operation scenario operation invoked message specific api endpoint relate endpoint span signature message finally microservices model uml component relate service span described mapping specify declarative manner correspondence JTL described variable uml declare model conform uml metamodels respectively specify relation described relation  container trace domain container  uml domain clause invokes execution  relation  relation span message involve interaction clause invokes execution  relation  relation endpoint span operation signature message relation  service container component image KB image described mapping assumes consistent implementation convention moreover described correspondence specify accord adopt notation however approach extend model monitoring technology JTL allows specification heterogeneous relation complexity trivially relation multiplicity application  transformation uml model generates correspond traceability model arrow trace link source target model refer instance   traceability link relates homepage correspond  trace hence message correspond operation response consequence traceability model complex performance average response specific scenario average service operation described detail image KB image traceability model uml model model analysis refactoring performance index annotator exploit traceability model report runtime data model goal exploit MARTE stereotype input data performance parameter performance analysis operation service demand output data performance index performance analysis model utilization adopt MARTE  package stereotype MARTE input data  generator express generational workload annotate exponential arrival rate  denotes   express service demand uml operation hence annotate uml message trigger operation uml sequence diagram express demand scenario output data   express response uml report response scenario specific workload  throughput express throughput uml similarly response  utilization express utilization uml node within deployment diagram operation service demand stimulate lightweight workload indeed parameterization aim avoid generate queue service demand definition service demand service definition service demand operation response lightweight workload execute guarantee observation queue originate workload service demand input   tag stimulate possibly realistic workload discover performance flaw PADRE refactoring loop performance antipattern detection model refactoring performance analysis performance antipattern detection execute detect performance antipatterns occurrence worth PADRE employ multi model discover performance antipatterns multi uml model depict performance antipatterns arise model model refactoring perform remove PADRE refactoring action performance antipattern execute refactoring action refactored model input PADRE performance analysis model transformation execute transform uml MARTE model queue model thereafter queue model analysis  algorithm allows rapidly performance index latter exploit recognize refactoring action promising clone refactoring clone refactoring action aim introduce replica microservice model assumption microservice uml component docker container uml node action glance depict initial model refactored model clone refactoring action nutshell creates uml component clone  creates uml node clone container  replica deployed dynamic depict refactoring action affect operation refactoring operation refactoring action aim critical operation due service demand microservice depict initial model refactored version operation  microservice action creates replica microservice clone  behavior deployment respectively differently clone refactoring action operation involves dynamic therefore uml lifeline clone  replicate microservice message refer operation transfer towards lifeline furthermore deployment diagram refactored uml node clone container service finally action defines newly connection uml node connection uml node clone container  container  node link node originally node microservice host critical operation deployed refactoring refactoring action implement docker client java library operation perform docker instance regard online modification configuration file developed java library publicly available clone refactoring action creates replica microservice translates creation container deploy boot microservice intend clone refactoring achieve exploit docker api container image microservice replica balance along microservice specifically ensure traffic target microservice redirect clone technology request microservices scenario  eureka scenario straightforward combination  proxy eureka registration service automatically balance additional microservice microservice register eureka  physical location available request internally  ribbon balance incoming request robin policy therefore modification nginx nginx reverse proxy modify configuration server clone microservices moreover mapping request update address request newly server default nginx robin algorithm balance server server proxy finally proxy deployed microservice without disrupt prefer deploy  automatically generate configuration derive composition server network link docker instance operation refactoring action operation service newly purpose exclusively offering operation implement replica service contains operation consequently request intend operation replica similarly clone refactoring action action implement scenario  eureka replica register eureka  automatically detects request operation replica route  configuration file route operation endpoint url replica nginx analogously previous scenario nginx reverse proxy route redirect request operation accomplish nginx location directive endpoint url proxy proxy application  nginx purpose configuration redirect url evaluation discus evaluation perform aim research RQ propose model refactoring action improve performance RQ extent performance antipattern PA removal improve performance setup validate approach shopper commerce web application application developed suite service docker container communicate restful http api shopper compose application microservices developed framework database TrainTicket web ticket application within railway domain developed microservices program framework program ticket java evaluation previous reverse engineer uml representation reference employ performance improvement approach uml model augment MARTE profile stereotype adopt MARTE standard profile widely adopt annotate uml model performance attribute response adopt generic quantitative analysis model  package introduce accurate trustworthy evaluation formal quantitative analysis generate scenario application stimulate discover suffer performance degradation concurrent usage identify scenario typically trigger application validate approach performance critical context scenario workload picked workload stress application performance fully saturation approach intend extreme degradation performance shopper application realize scenario specific workload desktop request homepage workload user sec mobile request specific service api shopper mobile app workload user sec warehouse request warehouse worker availability item workload user sec ticket realize scenario respective workload rebook ticket scenario customer ticket reservation workload user sec update user scenario admin user information workload user sec worth stimulate application workload stress originate error timeouts achieve steady performance execute min initial additional min application refactoring action intermediate ups application restart perform refactoring action simulate production environment response utilization continuously min warmup refactoring action finally avoid  external influence performance measurement perform server dual intel xeon cpu ghz core 0GB ram performance measurement data model validation available online RQ performance improvement RQ evaluate approach refactoring decision improve performance metric compute software model consequently performance approach applies refactoring action promising basis model action propagate context moreover refactoring action induced performance antipatterns action randomly perform model approach refactoring action improve performance selection action combination QN analysis performance antipatterns detection effective randomly refactoring assessment refactoring impact model utilization response modification comparison response utilization compute QN utilization report relevant microservices involve scenario utilization varies refactoring action shopper initial approach propose alternative refactoring action improve desktop scenario clone web microservice clone web  operation item microservice newly  item  feasible action randomly clone item microservice clone item  operation microservice newly randomly action marked histogram clone web microservice remarkably beneficial response desktop scenario randomly action clone item microservice negligible impact scenario impact mobile action operation microservice difference response refactoring target operation  improve rebook ticket scenario ticket approach propose clone rebook microservice clone rebook alternatively operation generate verification code microservice newly  verification code generate randomly action clone admin user microservice clone admin user login operation sso microservice action basis performance antipatterns induced improvement response target scenario image KB image average response utilization compute QN shopper image KB image average response utilization compute QN ticket refactoring action basis antipatterns effective improve response target scenario furthermore aspect instance utilization compute QN shopper performance analyst probably clone item microservice action perform instead refactoring marginally decrease response desktop scenario QN clone web microservices effective obtain extreme situation ticket action randomly actually increase response rebook ticket scenario clone operation refactoring action performance improvement apply without consideration application indeed degrade performance combination runtime knowledge induce thorough selection convenient refactoring perform generally runtime traceability additional knowledge automatically maintain decision software production RQ performance antipatterns RQ discus benefit employ detection refactoring pas performance improvement forecasting performance antipatterns suitably microservice namely blob  pipe filter described literal performance antipattern logic representation threshold definition fix threshold application dependent task become complex therefore employ concept fuzzy threshold instead deterministically identify occurrence performance antipattern fuzziness threshold induces probability antipattern combination probability threshold violation probability violate fuzzy threshold metric define expression considers upper bound threshold respectively metric assumes blob inequality expression described undergoes fuzzy evaluation expression hence probability blob occurrence obtain pipe filter  inequality expression described undergoes fuzzy evaluation expression hence probability  occurrence obtain remark literal expression trigger  omit expression quantifies  occurrence probability performance antipattern probability refactoring action randomly driven performance antipattern detection initial probability obtain initial configuration probability obtain apply action PADRE remove antipattern probability obtain apply random refactoring action literal performance antipattern expression report occurrence probability antipattern shopper probability web item blob performance antipatterns respectively shopper corresponds clone refactoring action web microservice PADRE corresponds clone refactoring action item randomly  action noteworthy probability refactoring action PADRE probability grows random action item clone recall application refactoring action clone web reduces utilization microservices whereas clone item utilization web microservice although initial probability item blob web operation item  PADRE reduces initial probability application operation randomly  probability recall PADRE suggestion negligible performance utilization item reduce response however random action performance twofold utilization item decrease utilization web increase albeit saturate probability web blob initial model model refactored clone refactoring action web model refactored clone refactoring action item performance antipattern literal probability item blob initial model model refactored operation refactoring action item  model refactored operation refactoring action  performance antipattern literal ticket report performance antipattern probability due refactoring action apply ticket report probability verification code generate operation pipe filter  refers operation refactoring action verification code generate PADRE refers randomly chosen operation refactoring action sso login operation  probability decrease apply refactoring action PADRE code refactoring action decrease utilization container verification microservice response rebook ticket scenario random action instead increase probability verification code generate  refactoring action increase utilization container verification response rebook ticket scenario report probability rebook blob probability related clone refactoring action rebook PADRE suggests probability related refactoring action admin user probability decrease apply refactoring action PADRE remains unchanged randomly chosen action code random action clone admin user microservice utilization negligible increase response rebook ticket scenario instead refactoring action PADRE performance twofold response rebook ticket scenario decrease utilization container rebook microservice decrease probability verification code generate pipe filter  initial model model refactored operation refactoring action verification code generate model refactored operation refactoring action sso login performance antipattern literal report probability verification blob probability operation refactoring action verification code generate PADRE suggests report probability refactoring action sso login probability decrease apply refactoring action PADRE reduces verification code utilization response rebook ticket scenario application random action instead increase probability verification code blob probability rebook blob initial model model refactored clone refactoring action rebook model refactored clone refactoring action admin user performance antipattern literal probability verification code blob initial model model refactored operation refactoring action verification code generate model refactored operation refactoring action sso login performance antipattern literal summarize discussion basis obtain removal performance antipatterns performance improvement ignore performance antipatterns knowledge induces unchanged performance performance detriment indeed ticket performance improvement hardware utilization verification code generate operation response rebook ticket scenario reduce noteworthy refactoring action remove pipe filter performance antipattern shopper hardware utilization container web clone PADRE response desktop scenario reduce probability web blob performance antipattern decrease application random refactoring action induces unchanged performance performance detriment ticket utilization increment response rebook ticket scenario remain unchanged probability verification code generate pipe filter performance antipattern increase instead random action shopper utilization response probability web blob performance antipattern threat validity potential threat validity associate validation conclusion validity concern reliability explain properly rigorously setup attempt avoid bias generate scenario respective workload simulate stress execution application performance realistic measurement avoid  external influence cannot assert realistic scenario application mostly literature sake validation environment ticket expose numerous service load varies request per workload adopt application within however adopt application setting application performance boundary situation enable validate effectiveness approach propose furthermore evaluation ensure performance improvement actually induced refactoring action approach performance variation randomly refactoring action internal validity concern extraneous factor influence implementation approach defective analysis inaccurate avoid bias assure implementation align software generate accurate traceability model consistently annotate performance model completely delegate analysis performance model external consolidated employ technology widely production  eureka nginx unified interface refactoring microservices without expose internal structure furthermore detailed discussion code instrumentation publicly available source code researcher reproduce inspect construct validity concern factor compromise validity measurement observation evaluation highly dependent quality evaluation apply monitor data performance described properly setup avoid influence factor instance disabled service linux  lessen context switch avoid interference internal error monitor machine  buffer  journal unexpected entry another threat link generate traceability model error generation model monitoring trace incorrectly define correspondence specification uml model avoid perform manual assessment generate traceability model link link finally annotate performance index uml MARTE model consistent consolidated literature software performance external validity refers generalizability obtain facilitate deeper understand approach affect representativeness mitigate microservice web application benchmark successfully previous heterogeneity choice indicator reference adopt specific development monitoring technology framework specific model standard uml MARTE technology widely academia approach generalizable easily reproduce context adopt specific JTL PADRE threat generalizability approach merit alternative available replace JTL actually none replace PADRE detect performance antipatterns uml model however proven suitable specific purpose approach heterogeneous context related discus exist proposes approach architectural improvement software driven observation monitoring data interleave software model researcher adaptive software engineering continuous engineering actively variety technique applicable runtime hereafter focus approach dedicate software performance approach software model domain microservices software performance engineering approach vast literature exists performance model performance monitoring performance identification technique research domain report significant attempt merge domain systematic identify performance issue runtime data load operational profile application profile runtime data performance antipatterns detect aim identify performance issue software refactoring manually apply identify performance antipatterns apart technological implementation aspect methodological difference distinguishes approach namely runtime data annotate uml model MARTE profile advantage address performance issue narrow potential action  affect performance propose  approach scope derivation architectural model runtime model decentralize decision architecture adaptation distribute aim  identify important architectural characteristic application component connector node communication    introduce runtime failure analysis architectural recovery discover architecture however  adopt identify performance automate generation performance model uml MARTE architectural model propagation performance analysis latter difference approach fully model availability software runtime information extract accurate identification performance obtain monitoring software exploit  automatically extract workload specification load performance model parameterization however  limited parameterization performance model whilst approach interpretation analysis performance antipattern detection approach continuous integration performance model considers parametric dependency analyze source code approach upon  approach goal automatically performance model date architecture performance prediction contrast approach approach identify model alternative overcome detect performance apply recently  propose approach align architectural model development operation correspondence model implementation artifact component  architectural model contrast approach uml widely adopt standard respect  component model hoc correspondence model exploit complex pipeline transformation propose approach correspondence generate declarative specification easily adaptable context specific infrastructure monitoring combine application instrumentation infrastructure monitoring scope contribution ass software performance aim decision whereas approach limited runtime correspondence predict performance issue indeed enable identification alternative implementation refactoring action improve performance contrast approach workload characterization model structure update propose  model update online scalability accuracy validate finally limited microservices domain approach model approach microservices adaptive software model mostly development specification software model microservice application adaptation respect survey model microservice service orient architecture   vision future challenge domain specific model model transformation across software lifecycle runtime define evolve microservice application architectural weyns described relevant aspect future challenge software engineering adaptive author concrete realization runtime adaptation mechanism leverage software model runtime goal model runtime model propose extend applicability software model MDE approach runtime environment model update behavior envision goal adaptive subsequent adaptation decision fix error explore decision alternative model runtime traceability model runtime information relation model exploit exist monitoring infrastructure exist model throughout phase approach  van  propose preliminary framework generate microservice environment measurement evaluation performance resilience approach allows developer model generate java code deployment file generate microservices automatically metric runtime contrast propose setup developed benchmarking environment evaluation approach performance resilience although framework generate microservice environment specify adopt adaptation microservice  propose incremental model driven approach integration service application dynamic architecture reconfiguration model generate skeleton microservices integration logic script automatically deploy integrate microservices specific environment microservice deployed approach integration increment compose microservices whereas adopt improvement exist service runtime information propose platform independent runtime adaptation mechanism reconfigure placement microservices communication affinity resource usage author propose identify runtime aspect microservice execution impact placement microservices model runtime contrast approach contribution limited reconfiguring mechanism manage placement microservices conclusion extend previously introduce approach aim identification performance integrate approach exploit traceability relationship monitoring data architectural model detect performance antipatterns extension introduce consist metric performance translate refactoring action performance model analysis refactorings apply closing performance engineering loop shopper fully apply approach additional ticket model application approach consolidated insight definition traceability model automate exploitation runtime information sake performance analysis improvement absence collection correspondence monitor data extrapolation amount data application annotation software model expensive validate approach ticket benchmark realistic realize application refactoring action runtime easy adjust technology merit probably concept impose microservices paradigm focus component emphasize composability extension approach performance metric confirm runtime interaction automatically generate declarative specification introduction monitoring model notation format correspondence specification evidently convenient rely purpose code generate correspondence apply refactoring action appreciate crucial role knowledge selection action improve target performance metric knowledge proven reconstruct monitoring indeed directly extract performance model runtime information obtain accurate model ability predict performance limit discard model approach usually compel  engineer information already available information role component scenario intensely operation suppose invoked direction future obtain apply refactoring action approach obtain apply suggestion situation indeed fully automate accepted actual industrial context expertise exploit multiple refactoring option conceive implement approach extensible define dedicate metamodel format monitoring infrastructure however runtime information simulation executable model trace configuration model dynamic information runtime format textual binary datasets various mechanism simulation monitoring execution debug profile verification enhancement generic metamodel runtime information specify integrate approach extension adoption model approach designer specify correspondence JTL indeed ecore artifact conforms emf moreover envisage possibly redefine model annotation antipattern detection PADRE indeed designer interface notation specific