software reuse widely adopt researcher practitioner relation security reuse become secure rely mature dependency insecure expose attack via exploitable dependency previous shed examine association software reuse security threat empirically investigate source project multiple explore discus distribution security vulnerability code development code reuse dependency potential vulnerability assess static analysis disclose vulnerability report public database project associate increase amount potential vulnerability native reuse code moreover correlation dependency vulnerability empirical investigation source code reuse neither bullet combat vulnerability   entail excessive previous keywords software reuse security vulnerability source software introduction software reuse software development practitioner researcher alike dominant mobile operating android software reuse operating highly modular smartphone provider deploy flavor reuse customize functionality platform java library maven repository moreover android core another reuses linux kernel reuse unix emerge evolve thanks systematic reuse maintain however software reuse bullet limitation characterize concern dangerous important security risk entail source software although outdated external library interviewed developer unaware security risk introduce due incorporate reuse code moreover source security report  worrisome finding increase disclose vulnerability source library concrete heartbleed severe security vulnerability reside openssl cryptographic software library popular source component vulnerability enable malicious user arbitrary memory content exploit vulnerability user access communication usernames password personal email document message bug detect later affected web server active web site another recent  incident hacker exploit vulnerability java library  reuse  personal private information american citizen various initiative battle github introduce security alert vulnerable dependency service aim increase user awareness mitigate potential security risk similarly linux bsd notifies user available security update vulnerable version instal package library additionally popular security assessment SpotBugs  owasp dependency plugins available integrate automation continuous integration CI service development reuse software library functionality without implement available feature scratch software reuse perform reuse code binary source code insert application reuse developer interact library apis developer without edit maintain code reuse developer adjust reuse code subset reuse focus reuse developer visibility library implementation consequence awareness security risk inherit reuse code refer reuse unless otherwise despite existence security  initiative counteract knowledge lack attempt obtain overview security vulnerability associate code reuse understand phenomenon gap exploratory investigate potential vulnerability distribute source software intensive regard native code software development reuse code introduce dependency scope research concern software practitioner researcher related potential security risk reuse software specifically aim library reuse suffer security vulnerability security vulnerability source project distribute native reuse code library source community vulnerable reuse frequency developer library associate amount vulnerability specific library finding previous software reuse positive reduce security risk however limitation relation sample enlighten discussion factor explain relation explore investigation limited potential vulnerability although potential vulnerability proxy lack quality risk due unmet security reflect exist exploitable threat report repository disclose vulnerability aim alleviate aforementioned limitation analyze considerably source software security native reuse code triangulate investigate additional source information namely disclose vulnerability achieve goal java project disclose vulnerability report public datasets potential vulnerability detect static analysis initial characteristic investigate information regard characteristic project dependency dataset namely community belonging enterprise organization contributor frequency usage project addition statistical analysis previous extend analysis incorporate aforementioned dimension analysis dataset suggests native code vulnerable reuse code although reuse code dominant majority project additionally analyze project suffer security vulnerability introduce dependency moreover disclose potential vulnerability strongly correlate dependency summary contribution enhance toolkit associate dataset foster investigation security vulnerability regard software reuse source java project aforementioned update dataset per additional dataset dependency characteristic extend statistical analysis dataset toolkit guideline reproduce available github dataset zenodo organize related describes theoretical model approach construct analyze dataset finding discus limitation conclusion related broaden scope effort software defect vulnerability reuse code sap software ecosystem regard vulnerable source dependency dataset comprise commonly source maven dependency regard vulnerability disclose public database cve database suffer false positive vulnerability report however  vulnerability guarantee absence undetected vulnerability transitive dependency report disclose vulnerability analysis exclude non deployed dependency dependency direction  zimmermann linux  distribution empirical evidence package dependency increase risk vulnerability package decrease goal developer decision regard package native code recent investigate security risk attach javascript package distribute via npm package manager upon analyze dependency maintainer author due transitive vulnerability lack maintenance individual package considerable threat vulnerability tends increase transitive dependency javascript npm dependency network investigate author analyze vulnerability report security vulnerability package affected additionally report package network version affected vulnerable transitive dependency regard developer security defect code meneely williams perform  kernel author empirical evidence developer member independent developer tend introduce security defect code development file developed core developer perform analysis software defect data consequent release telecom developed ericsson goal examine reuse affect factor defect density define defect per code stability define modification author evidence defect density stability reuse component non reuse component additionally findbugs perform analysis maven ecosystem outcome dataset bug security bug maven dependency version dataset analyze risk outdated library exist maven central repository although examine reuse relevant mention author report weak correlation potential security vulnerability project direction investigate  kernel mozilla firefox web browser prediction model detect potentially vulnerable code code metric complexity code churn developer activity concern reuse code snippet publicly available web source quality software report android application analyze code snippet related security publish stackoverflow interestingly application vulnerable code snippet similarly analyze android application extent developer code snippet stackoverflow finding statistically significant medium increase bug fix commits reuse code stackoverflow detect vulnerable code contribute towards automate detection suspicious code author introduce  analyzes exist disclose vulnerability source creates model detect suspicious author evaluate approach analyze release source project identify suspicious code practitioner significant contribution classify exist vulnerability exploitable specifically approach identify exploitable vulnerability function graph vulnerability reuse code accessible native code risk recently vulnerability dataset available detect vulnerability java python software highlight difference related knowledge report investigate correlation code reuse vulnerability obtain static analysis specially conjunction disclose vulnerability multiple source comparison related     security reuse sourceYes    java   sourceYes   sourceYes static analysis clone  sourceYes  dynamic  meneely williams sourceYes vulnerability  sourceYes vulnerability   zimmermann sourceYes vulnerability  sourceYes   sourceYes   sourceYes       sourceYes  analysis vulnerability  theoretical empirical theoretical model protocol accord guideline report linear analytic structure theoretical model insight obtain analysis vulnerability reuse software intensive drew assumption theoretical model aspect analysis relationship visualize relationship establish research investigate relationship theorize developer exist available reusable library code satisfy requirement software implement action avoid accumulation vulnerability relationship source code sloc introduces security risk however increase dependency source code reuse code increase relationship vulnerability despite potential increase software due reuse theorize code reuse source dependency faster detection patch security defect relationship application  eyeball bug shallow  consequently project dependency update security vulnerability overall relationship image KB image theoretical model summary goal evaluate relationship finding analysis datasets objective research goal formulate accord goal metric GQM approach described analyze native reuse code purpose evaluate respect difference estimate actual security vulnerability software developer context source software fulfill objective research rqs RQ reuse factor related potential security vulnerability project RQ aim acquire overview factor reuse factor related potential security vulnerability project RQ investigate relationship additionally investigate dependency community affect potential vulnerability project RQ potential security vulnerability distribute native reuse code RQ aim investigate important correlate software reuse namely extent reuse influence security project correlation depict relationship exploit static analysis identify potential vulnerability investigate native code developed project reuse code stem dependency component contribute overall estimate security RQ extent source project suffer vulnerability introduce dependency purpose RQ evidence disclose vulnerability affect dependency project depicts relationship achieve analyze dependency owasp dependency report finding RQ characteristic dependency related potential actual vulnerability RQ reuse frequency dependency related potential actual vulnerability RQ community dependency related potential actual vulnerability RQ aim investigate validity  eyeball increase reuse actually fix potential disclose vulnerability relationship additionally RQ aim investigate dependency community enterprise organization associate dependency potential actual vulnerability variable project dataset   project dependency disclose vulnerability introduce dependency project native reuse source project source code native source code reuse source code reuse enterprise organization source code reuse non enterprise organization source code reuse community source code reuse community potential vulnerability project potential vulnerability native code potential vulnerability reuse code potential vulnerability reuse enterprise organization potential vulnerability reuse volunteer contribution potential vulnerability reuse community potential vulnerability reuse community potentially vulnerable native potentially vulnerable reuse analysis aforementioned research multiple multiple analysis chose source project analysis granularity project sufficient multiple statistical analysis moreover analysis allows research pinpoint researcher practitioner investigate detail github activity data dataset publicly available google public datasets github activity data TB dataset contains snapshot content source github repository unique commits additionally contains billion file content revision file searchable regular expression user execute query dataset google  api variable data collection address research built variable analysis project information vulnerability information built dataset procedure described associate variable illustrates data collection summary variable additionally aforementioned dataset built dataset comprises dependency information community author  dependency potential publicly disclose vulnerability summary variable dataset procedure automate script available github filter project query github activity data database project met criterion java code apache maven automation configuration file pom xml java program advantage automate maven security violation identification capability SpotBugs owasp dependency maven establish automate multiple project retrieve dependency operation potential vulnerability finally query github api retrieve project aforementioned indicator popularity sort project criterion variable dependency dataset   dependency source community enterprise github organization disclose vulnerability potential vulnerability dependency project dependency contributor project dependency image KB image dataset construction procedure repository detect popular github project generate amount project improve representativeness sample towards population strengthen statistical analysis git clone locally project project consist module component various program manage automation identify project scope analysis automatically detects maven configuration file manually resolve multiple project retrieve dependency local repository built project accelerate skip task java documentation generation task static analysis code review execution checkstyle pmd building generate compile package jar file local maven repository directory default dependency along transitive dependency project defines configuration file local maven repository initial discard project fail failure java version incompatibility non accessible maven dependency compilation error remain successful transitive dependency package project dependency dependency retrieve  dependency maven command project information analyze successfully project dependency previous variable project definition file jar file retrieve source code sloc estimate statement analyze dependency deployed application runtime characterize compile runtime correspond maven configuration file dependency ignore exploitable threat deployed application additionally analyze project dependency individually detect maintain enterprise organization dataset contains identify github enterprise repository dataset defines enterprise project likely mainly developed financially compensate employee organization management furthermore compile source community popular github apache google facebook microsoft mysql eclipse community software development quality source software widely developer apache web server facebook react web framework mysql community database microsoft  framework  editor detect dependency maintain community mapped maven unique identifier dependency   project belonging github organization community finally perform filter identify discard project dependency discard project native code project entirety dependency project aws aws lambda java libs bus  dependency dependency project dataset apply filter dataset project detect potential vulnerability detect potential vulnerability perform static analysis project code analysis ability ass project without execution scenario latter technique consume prone code coverage static analyzer code execution   static analysis detect security vulnerability code constant improvement algorithm static analysis consequently static analyzer performance accuracy precision detect security vulnerability analyzer consult web application security project owasp static analysis analyze java code offline actively maintain source community detect potential security violation aforementioned criterion static analyzer SpotBugs identifies violation cod bug category related security security malicious code moreover completeness bug detection SpotBugs classifies detection confidence medium already evaluate independent report average precision additionally medium confidence detection precision significantly increase nevertheless SpotBugs static analysis prone introduce false positive data collection however SpotBugs finding valuable pointer maintain enhance security related detection capability SpotBugs plugin  plugin bug related web application security project owasp vulnerability weakness enumeration cwe cwe community software security weakness serf classify security vulnerability software combination  core functionality  specialized bug capability detect potential security vulnerability perform analysis SpotBugs compile java project dependency acquire information SpotBugs generates xml file report potential vulnerability java native code dependency due failure SpotBugs analysis exclude project error executable file compile code java version incompatibility finally analyze SpotBugs dependency detect potential vulnerability analyze dependency standalone jar avoid vulnerability dependency related analyze apply filter earlier SpotBugs finding dependency retrieve disclose vulnerability perform parallel purpose owasp dependency analyze dependency retrieve information disclose vulnerability owasp dependency report unique identifier cve dependency transitive dependency exclude disclose vulnerability refer non java transitive dependency variable vulnerability information variable project parse xml report generate SpotBugs report potential security vulnerability discard data aggregate separately native source code reuse source code parse json report owasp dependency generate dependency assign unique disclose vulnerability project vulnerability related java code dismiss others analysis procedure investigate data perform various statistical analysis RQ calculate descriptive statistic variable linear regression analysis variable associate project reuse additionally investigate overall amount vulnerability associate dependency maintain community enterprise volunteer RQ calculate ratio reuse vulnerability density described similarly RQ perform linear regression analysis evaluate correlation reuse security vulnerability regard RQ disclose vulnerability project dependency perform linear regression analysis dependency disclose vulnerability finally RQ data related frequency dependency dataset perform linear regression analysis frequency vulnerability procedure automate available online script detail obtain dataset research analysis project regard variable obtain descriptive statistic descriptive statistic   project project project project project project project project project project project project project project project project project project project project     RQ relationship vulnerability reuse investigate factor source code sloc dependency reuse ratio related potential vulnerability perform multivariate ordinary linear regression standardize beta coefficient aforementioned variable summary analysis source code sloc strongly correlate potential vulnerability interestingly potential vulnerability although contradict previous finding majority dataset comprise project encapsulate functionality regard reuse factor statistical evidence correlate potential vulnerability dependency reuse ratio weak correlation investigate dependency community contribute amount potential vulnerability calculate ratio sloc community sloc reuse code analyze correlation potential vulnerability ratio perform non parametric kendall potential vulnerability correlate ratio image KB image RQ distribution vulnerability native reuse code depicts boxplots illustrate distribution vulnerability density per code native reuse code respectively vulnerability density native code boxplot vulnerability density reuse code boxplot vulnerability density median native code project vulnerability density native code reuse code furthermore overall density boxplot density reuse code native code due reuse code considerably native code density calculate vulnerability correspond code combine multivariate regression analysis potential vulnerability  code dependency reuse ratio investigate RQ regard correlation reuse ratio vulnerability density perform ordinary linear regression standardize coefficient statistic evidence statistically significant relationship variable interpret correlation relationship AC depict dataset evidence confirm deny project reuse ratio tend vulnerability density image KB image boxplots vulnerability density native code reuse code overall investigate distribution potential vulnerability native reuse code vulnerability report SpotBugs integrate recurrent potential vulnerability native reuse code potential vulnerability calculate density detect potential vulnerability per code description reference cwe software weakness potential vulnerability belong detect reuse code native code difference similarly moderately frequency detection reuse code contrary moderately frequency appearance native code regard frequency appearance native reuse code image KB image density vulnerability vulnerability    potential  injection cwe potential traversal file cwe expose internal representation return reference mutable expose internal representation incorporate reference mutable information exposure error message cwe predictable pseudo random generator cwe  server request forgery  file disclosure cwe package format manipulation cwe serialization cwe MD MD MD weak hash function cwe RQ disclose vulnerability reuse code RQ analyze dependency dataset owasp dependency analysis dependency report disclose vulnerability consequently mapping finding project account project vulnerable dependency distribution disclose vulnerability dataset majority project disclose vulnerability however concern vulnerability security breach severe consequence source project outdated dependency disclose vulnerability reference disclose vulnerability detail along code patch fix security defect motivates user update newer secure version disclosure detail malicious user attack target exploit specific defect  incident image KB image violin plot disclose vulnerability project investigate disclose vulnerability project correlate dependency project perform linear regression analysis variable statistic disclose vulnerability strongly correlate dependency similarly respect potential vulnerability perform linear regression analysis statistic previous analysis correlation dependency potential vulnerability finding amount dependency project correlate risk disclose vulnerability described complex configuration developer dependency project unaware indirect dependency project dependency interviewed developer affirm unaware security risk code reuse additionally  report disclose vulnerability indirect dependency image KB image RQ dependency frequency dataset analyze RQ regard unique dependency population project dependency disclose vulnerability report owasp dependency potential vulnerability report SpotBugs maintain community enterprise organization contributor project reuse dependency investigate frequency correlate disclose potential vulnerability perform linear regression analysis variable statistically significant evidence correlate disclose potential vulnerability frequency evidence popular dependency disclose vulnerability report potential vulnerability regression analysis dependency frequency  potential vulnerability disclose vulnerability investigate  estimate contributor project reuse dependency eyeball detect vulnerability amount contributor associate potential disclose vulnerability dependency calculate kendall non parametric correlation report kendall correlation overall dependency dataset population dependency community dependency enterprise organization dependency enterprise organization regression analysis dependency frequency   vulnerability dependency community enterprise organization enterprise execute correlation evidence community enterprise correlate potential vulnerability actual vulnerability statistical evidence individual community weak correlation dependency belong community enterprise organization image KB image discussion revisit explain finding previous related applicable elaborate stem discussion namely enterprise source project finally elaborate implication observation researcher practitioner interpretation amount potential vulnerability project strongly correlate source code sloc chowdhury  consequent version mozilla firefox web browser similarly positive correlation project amount vulnerability aligns finding furthermore finding mishra project evolves functionality accumulates defect finding lehman seventh quality software decrease unless restructure assume reuse code code otherwise scratch vulnerability ultimately arise native reuse code security expertise development strategy  strategy avoid reuse develop component strict security requirement manage vulnerability threat internally desirable reduce vulnerability risk reuse discus focus RQ presence vulnerability density native code vulnerability per sloc reuse code however distribution vulnerability native reuse code homogeneous project project vulnerability density feature perform comparable industrial defect density security vulnerability reuse code native code summary finding heavier decision development verify maturity reuse code balance expertise secure code regard relatively amount reuse code understandable due dataset multiple medium project observable dependency library impact project introduce cascade dependency evolution project additional reuse decrease reuse ratio disclose vulnerability analysis significantly percentage affected dependency report related dependency vulnerable difference explain difference datasets dataset dependency source project dependency proprietary sap project explanation enterprise project selective code tend update version shed explore difference reuse code volunteer enterprise source community respect frequency dependency clearly identify correlation potential disclose vulnerability consequently establish data   user code necessarily contributor fix security vulnerability aforementioned however absence evidence evidence absence related worth pursue investigate project popularity associate security defect detect fix direction van  firefox community community bug reporter associate quicker bug fix addition software developer incurs fix delay however scope  perform github project correlation bug fix amount issue reporter negligible partially contradict research paramount indicator project popularity downloads fork positive review descriptive statistic enterprise volunteer project  volunteer  finally investigate extent amount potential vulnerability correlate amount disclose vulnerability linear regression analysis medium correlation factor despite disclose vulnerability cannot tracked code dataset potential vulnerability indicator risk exploitable vulnerability comparison enterprise volunteer project previous community reflect selective manage reuse enterprise source project volunteer dataset encompasses project feasible perform comparison identify dependency belonging enterprise organization identify enterprise project classification project enterprise volunteer available dataset extension dataset revisit research perform project analysis RQ RQ summary descriptive statistic briefly sub population regard RQ analyze relationship vulnerability reuse project significant difference regard RQ examine distribution vulnerability native reuse code although density vulnerability native code enterprise project statistically significant finally regard RQ project affected disclose vulnerability percentage overall population enterprise volunteer however estimate association disclose vulnerability dependency enterprise project likely suffer volunteer project linear regression analysis coeff coeff summary dataset allows speculate enterprise project indeed likely suffer vulnerability due quality native code careful selection dependency however cannot evidence dataset alone investigate population additional factor inspection SpotBugs finding acquire insight SpotBugs finding project dataset investigate report potential vulnerability exploitable consists retrieve SpotBugs xml report project dynamically analyze project execute developer manually inspect source code flag vulnerable project namely spotify netty    twitter  manually investigate validity thirteen potential vulnerability report SpotBugs project potential vulnerability detect SpotBugs challenge functionality application finding manual inspection potential vulnerability project positive bug SpotBugs report actual security vulnerability description SpotBugs plugin  false positive report SpotBugs finding constitute security vulnerability finally undecided report partially vulnerability description dynamically analyze source code project execute apply java code coverage library potential vulnerability flag positive  suggests extensive related security requirement manual inspection SpotBugs finding    spotify netty    twitter  furthermore aspect dynamic analysis supplement static analysis application behavior extensively fuzz prominent dynamic analysis technique discover software bug security vulnerability technique reflect bug detect popular application fuzzer afl fuzz iteratively randomly generates input target program however technique computational perform evaluation related fuzz report suffer violation propose methodology perform technique effectiveness fuzz depends prior execution configuration tester context application fuzz apply analysis report manuscript implication researcher practitioner security assessment risk analysis software developer researcher prevalence agile software development automation continuous deployment strategy security assessment perform version release software evidence source code negative impact security software additionally dependency tend associate security risk source software mitigate risk strict security assessment automate integrate vulnerability detection SpotBugs  owasp dependency valuable information regard security status native code risk introduce dependency software developer consult dataset gain insight related security vulnerability source project practitioner information perform risk analysis prioritize bug fix activity related security defect moreover practitioner employ automation script perform analysis code dataset researcher explore additional research characteristic project cluster project available variable additionally advantage SpotBugs plurality finding researcher investigate software quality attribute correctness performance examine aspect researcher modify script enrich SpotBugs report information related attribute script guideline available researcher dataset extend analyze threat validity discus validity applicable construct validity reliability external validity exclude internal validity examine causality construct validity examines relationship observable phenomenon research reliability examines replicate finally external validity examines potential threat generalize  construct validity argue static analysis detect potential security defect actually exploitable vulnerability however report correlate existence exploitable vulnerability furthermore vulnerability report static analyzer reuse code exploitable vulnerable execute native code irrelevant moreover limited identify reuse define developer binary version dependency reuse integration dependency code native code clone code detection scope finally amount github popularity project criterion watcher fork render concern reliability effort easy replicate source code along guideline execute available github reproduce researcher revert git repository locally project date july mitigate reliability risk developer involve development script author review analysis finally concern external validity identify potential risk firstly project selection limited program java generalization finding investigation secondly selection project proportion available source java project github generalization finding source java project host github web vcs investigation finally despite maven building project easy access dependency limited dataset almost initial project selection fail maven partially built therefore exclude analysis conclusion software reuse widely adopt concern security risk argument reuse reuse source code regard source software context conduct multiple explore discus relationship software reuse amount security vulnerability source project previous examine distribution potential vulnerability code development native code code reuse dependency moreover investigate information disclose vulnerability public database triangulate previous association ratio reuse density vulnerability popular java project github activity data database construct dataset project information regard native reuse code vulnerability information obtain static analyzer SpotBugs owasp dependency project related increase amount potential vulnerability native reuse code furthermore native code vulnerability density however analysis evidence native code contributes vulnerability reuse code project additionally dependency project correlate vulnerability theoretical empirical envisage opportunity future desirable investigate program automate package manager ant gradle npm pip data enrich dataset confirmatory replication future explore depth research related feature cluster project qualitative analysis explain cluster toolkit report implement workbench benefit practitioner researcher alike foster analysis future