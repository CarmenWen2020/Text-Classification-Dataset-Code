smart contract software allows user perform irreversible transaction distribute persistent data storage blockchain contract technical detail blockchain architecture fault specific behaviour expose socrates generic extensible framework smart contract blockchain socrates comprises bot interact blockchain accord composable behaviour instantiate society bot trigger fault due multi user interaction impossible expose bot experimental socrates expose fault detect previously unknown fault contract currently publish ethereum blockchain society bot effective bot fault exposure keywords software blockchain smart contract introduction recent extension crypto currency ethereum consists smart contract smart contract programme blockchain execution guaranteed distribute network miner computation model smart contract peculiar innovative distribute blockchain smart contract transaction immutable program defect later identify incorrect computation frozen forever blockchain thorough smart contract crucial detect program error erroneous transaction permanently blockchain contract definition mediates interaction multiple user role contract interaction scenario contract handle token contract user spender authorizes initiator transfer amount token behalf initiator transfer token spender account receiver account detail scenario scenario user distinct actor interact coherently contract accord intend protocol spender authorizes initiator receiver observation smart contract multi role programme propose socrates smart  testing novel extensible framework federate society interact bot bot  distinct user role contract contract role exist contract code emerge permission contract owner token owner assign user simulator iteratively assigns execution slot federate bot aim program defect hidden potentially complex articulate interaction contract multiple player involve instance socrates deploy bot smart contract listing spender bot initiator bot receiver bot bot instantiates specific behaviour combination predefined behaviour bot generate input submit transaction accord configurable strategy socrates predefined behaviour random boundary overflow combine extensible domain specific behaviour implement specific strategy interaction contract socrates oracle specification contract invariant socrates predefined generic invariant predefined eip specific invariant enable contract socrates easily extend contract specific invariant demonstrate perform ethereum contract additional contract specific invariant exist smart contract focus security issue reentrancy vulnerability functional invariant successful token transfer transfer contract suppose ensure correspondingly detect violation security associate vulnerability extensible framework exists functional smart contract related echidna completely approach namely contract fuzzing purely random composition extensible behaviour moreover echidna pre define invariant classify outcome execution detect defect expose empirical validation socrates effective detect defect smart contract actively blockchain perform transaction associate monetary execute smart contract retrieve etherscan socrates report invariant violation false alarm socrates smart contract fuzzer echidna socrates identifies substantially invariant violation report echidna image KB image interaction distinct user contribution novel framework smart contract innovative federation bot interact autonomously contract extensible configurable bot behaviour extensible configurable contract invariant empirical conduct contract retrieve ethereum blockchain invariant violation identify data contract empirical comparison echidna structure background blockchain smart contract specific focus ethereum platform motivate explain technical empirically validate socrates related concludes background cryptocurrency proposal however alternative distribute currency gain considerable global financial crisis decentralize cryptocurrency bitcoin release developed alias satoshi nakamoto bitcoin consensus protocol distribute data structure blockchain blockchain consensus protocol blockchain data structure maintains transaction mapping address account account persistent information associate address amount cryptocurrency address transaction payment user transaction update blockchain blockchain implement link chain replicate participant peer peer network information package reference previous hash timestamp nonce newly validate transaction consensus protocol nakamoto consensus guarantee immutability chain modify blockchain indeed node sequence validity transaction chain node miner creates propose available limited sequence transaction miner attempt proof puzzle miner solves proof broadcast propose node network upon propose node integrity validity valid node local blockchain creator successful miner receives compensation compensation core motivation miner involve mining validate successful miner receives compensation sum transaction fee validate plus newly amount cryptocurrency transaction fee extra amount cryptocurrency paid transaction sender compensate miner transaction fee likely miner quickly validate ethereum ethereum platform built concept nakamoto consensus protocol blockchain publish   gain turing smart contract cryptocurrency associate ethereum platform ether ethereum extends concept blockchain ethereum distinguishes account externally account contract account account associate ether balance externally account private user submit transaction contract account instead code instruction blockchain contract account internal storage blockchain additional persistent information whenever contract receives transaction contract code execute miner network performs distribute validation contract execution code contract turing termination cannot statically avoid malicious user network endless execution ethereum manages resource network fee ethereum instruction associate amount paid network execute instruction invoke contract transaction payload data user amount execution contract code moreover sender arbitrary  per expression  amount ether spent transaction fee paid miner execution instruction contract code eip token developed erc aka eip standard define interface ethereum smart contract implement management custom token custom token newly currency living within ethereum ecosystem interface document functionality eip token implement contains contract function optional return token optional return token optional return token  return emit token balanceOf return amount token specify address transfer transfer amount token sender address destination address approve approves another address specific amount token sender balance allowance return amount token spender withdraw owner transferFrom transfer amount token origin address destination address eip token gain popularity commonly asset  initial coin offering popularity importance interface associate eip contract ideal experimentation motivate intuition motivation generation framework introduce society bot invariant oracle revolves around listing buggy contract overflow fault function  listing implementation eip function transferFrom aim function transfer amount token parameter address address detail function access local variable define within contract namely balance eip interface respectively token balance user amount token user address user balance function approve statement enforce precondition input instance amount token approve transfer msg sender amount transfer sequence operation apply variable actually transfer token account amount remove address balance address moreover amount token approve transfer perform msg sender decrease nominal contract interaction status contract user message spender balance token initiator message balance spender initiator grant token spender balance reflect variable image KB image nominal execution scenario  message initiator exploit allowance token spender balance receiver balance moreover initiator reset code contains program defect error scenario reveals defect execute scenario contract initial nominal spender approve function grant initiator possibility token account message image KB image attack scenario  function approve fund availability therefore succeed amount token approve exceeds spender balance variable ensures initiator token spender initiator sends message token spender balance function  function  actual availability spender asserts initiator grant amount token spender expression compute negative underflows unsigned integer spender balance amount token moreover correctly execute initiator balance approve amount token reset scenario contract consistent token inconsistent token exploit bug function suppose transfer exist token image KB image society bot execution contract function strictly dependent instance execution  depends variable balance similarly orient goal contract function contract however smart contract bot limit smart contract indeed smart contract reachable cooperation interaction actor listing sender token account explicitly approve sender eip function approve  function bot role bot pre authorizes bot spends token bot otherwise defect cannot expose overflow subtle contract  overflow numeric expression expression overflow indeed exception programmer constraint revert contract overflow although library SafeMath perform math operation contract exist library function  account amount token sender transfer moreover amount possibly balance expression overflow inconsistent invalid contract invariant perform transaction        generation framework developed socrates highly configurable framework generation allows smart contract simulate interaction multiple bot framework typescript adopts orient configurability  component framework developed typescript compile node JS module framework compose module configure module simulator diagram relation simulator account bot behaviour contract account account model ethereum account account compose account address balance ether engineer extend extra contract instance eip contract useful amount token account account image KB image socrates diagram contract contract ethereum smart contract target generator ethereum contract account characterize executable code tester extend contract contract specific  eip contract moreover contract contains contract public function application binary interface abi implement  socrates interact deployed contract instance blockchain interaction contract ethereum blockchain handle  JS bot bot associate account bot task contract function parameter pas transaction contract account function associate formal parameter complex task strategy pro con socrates bot implement strategy instantiate behaviour bot framework contract function activates decision implement behaviour behaviour behaviour contains abstract   implementation within subclass behaviour define strategy function parameter pas perform bot action implement preliminary behaviour described simulator simulator core execution controller framework simulator simulation input account instance contract society bot simulator activates configurable invariant entire simulation goal simulation indeed contract interaction bot contract invalid invariant violate simulation described consists loop simulator bot perform action action  invariant violate simulation invariant violate manually fix amount image KB image workflow simulation simulator within ethereum ecosystem simulator truffle suite compose truffle ganache truffle framework developer easily compile deploy smart contract feature truffle environment web JS javascript library useful assertion definition ganache lightweight implementation ethereum blockchain purpose ganache blockchain implementation simulated avoid typical delay blockchain distribute validation upon transaction immediately validate requirement simulator web JS instance ganache blockchain simulation instantiate simulator deploys instance contract associate invariant bot behaviour web JS instance entire simulation interact deployed contract bot transaction submit ganache invariant define chai assertion checked processing submit transaction generation entire simulation generate successful transaction transaction involve account abi function invoked associate parameter generator input simulation output reproduce simulation simulation terminates violation invariant invalid correspondingly fail output truffle configuration simulator ganache account simulation invariant recognize inconsistent contract define generic contract specific invariant oracle contract invariant contract contract invariant violate contract implementation error define invariant violate invalid identify preliminary invariant applicable generically contract specifically contract report invariant exist successful transaction execution overflow eip specific invariant sum token account balanceOf amount token  eip specific invariant express function transferFrom transferFrom successful amount token transfer amount token transaction sender behalf allowance msg sender eip specific invariant express function transferFrom successful transferFrom amount token transaction sender address decrease amount token transfer eip specific invariant express transfer transferFrom transaction emit successful transfer consistent actual function parameter interface specification eip specific invariant express function approve similarly invariant successful transaction approve emit consistent approval function  invariant applicable although invariant validity exception indeed contract legitimately violate invariant due specific business contract developer configure socrates manually disable invariant relevant compatible specific contract behaviour preliminary behaviour implement socrates contract solidity function function precondition statement precondition fails transaction failure report transaction aborted input transaction failure useful modify contract blockchain avoid improve efficiency behaviour described configurable heuristic aim minimize possibility transaction failure due precondition violation  contract function associate parameter chosen random fashion typical solidity variable  without constraint generally transaction failure contract function input reduce failure engineer limit random chosen manually specify constraint instance transfer amount token eip function transfer chosen within limited balance decrease probability transaction failure due insufficient amount token listing code fragment implement  parameter generation switch statement generate random chosen interval instance return random integer image KB image  parameter randomly chosen boundary parameter uint unsigned int behaviour uniform probability interval implementation logic boundary behaviour parameter generation listing function  chooses randomly boundary min max choice return integer uniform probability min min delta delta pre define offset image KB image  input pas function precondition overflow inner expression contract function detail behaviour  behaviour randomly chooses predefined atomic behaviour described random choice configure tester default applies probability combine behaviour instance boundary random boundary random overflow combine behaviour evaluate empirically image KB image overflow behaviour overflow behaviour substantially complex random boundary behaviour hence detailed presentation contract function  function sends amount address receiver variable amount amount token sender transfer multiplication however overflow likely generate combine random boundary overflow unlikely execution indeed without additional constraint receiver arbitrary variable amount overflow balance sender introduce specialized  employ workflow described generate input overflow contract expression respect contract function precondition component workflow static analyser smt script generator code normalizer transaction executor static analyser source code parse obtain abstract syntax ast ast function contract expression overflow constraint define expression candidate overflow contains operator image KB image workflow overflow behaviour smt script generator aim script solidity function satisfiability modulo theory smt solver computes concrete input satisfy constraint correspond function precondition overflow generator static analyser define symbolic variable introduce constraint satisfied pas precondition overflow smt solver constraint function  listing listing simplify smt script code image KB image utility function overflow parameter overflow specify parameter function later impose variable amount overflow define symbolic variable cnt amount correspond assignment listing constraint impose input precondition smart contract important behaviour function solidity contract global blockchain balance handle global symbolically affordable static code analysis adopt heuristic strategy commonly dynamic symbolic execution concolic constraint smt solver concrete symbolic contract variable concrete embed constraint actually implementation smt script generator automatically creates python script invokes smt solver constrains listing satisfiable actually compute parameter receiver statement pas multiplication overflow listing overflow variable amount assign sender amount token sum token transfer receiver loop hence overflow violation invariant amount token exceed declare violation invariant code normalizer smt script generator access contract concrete variable embed constraint generator fully inspect contract code normalizer visibility contract variable public normalize code deployed blockchain transaction executor  smt script expression overflow  invoked framework executes generate script smt script compute input overflow  invokes contract function input parameter otherwise behaviour another randomly smt script successful transaction reject contract contract expression overflow violation invariant hence fault contract socrates emits document reproduces expose defect experimental validation assess framework socrates investigate research RQ effective socrates detect invariant violation RQ society bot bot detect invariant violation RQ effectiveness atomic combine bot behaviour invariant violation bot detect RQ socrates echidna invariant violation RQ effective socrates detect contract specific invariant research RQ intend investigate socrates indeed capable detect invariant violation smart contract generate reproducible violation research RQ society bot appropriate smart contract bot alone research validate initial assumption motivate definition multi bot framework research RQ analyse role atomic combine bot behaviour detect invariant violation fourth research RQ socrates echidna respective ability detect invariant violation generate finally research RQ ass validity approach beyond generic eip invariant contract specific assertion empirical validation considers token eip interface experimentation prominent interface token manage ethereum smart contract apply socrates smart contract recent contract eip interface contract contract capitalization smart contract empirical validation actually active blockchain sample rely etherscan web portal inspect content ethereum blockchain specific site recent valid transaction smart contract define token accord eip interface transaction report contract sender address eip interface emerge standard increasingly adopt smart contract whenever custom currency query perform contract october recent ethereum transaction associate unique smart contract smart contract comprises smart contract smart contract report etherscan contains smart contract ranked token capitalization website  blockchain compile byte code interface smart contract however relatively contract owner publish source code smart contract transparent trustful restrict selection smart contract fetch source code sample recently smart contract implement interface eip contract publish source code accessible user competitor alternative namely  echidna oyente mythril madmax zeus securify maian described literature automatically analyse generate ethereum smart contract preliminary research prototype mature stable conduct  symbolic execution generate input trigger error binary executables solidity smart contract however smart contract partial limited despite explicitly declares monitor detect overflow error monitor contract preliminary assessment  submit issue github project host issue confirm issue image KB image echidna fuzzing generates random input smart contract ethereum virtual machine configure monitor contract invariant violation whenever fuzzing succeed violate invariant sequence error induct input valuable echidna fuzzing algorithm function generate input parameter random fashion algorithm responsible action unlike socrates cannot extend behaviour user define business logic echidna assumption invariant implement directly solidity contract source code choice impossible smart contract invariant without code edit echidna socrates echidna invariant aim manually edit code contract promote local variable contract variable local variable visible echidna useable within echidna invariant code snippet listing implementation invariant code instrumentation listing invariant transfer emits consistent transfer balance address transaction auxiliary variable respectively listing image KB image potential alternative evaluate discard compatible experimental ability handle smart contract define business logic specific invariant oyente upon symbolic execution technique target  exception transaction dependence timestamp dependence reentrancy vulnerability generates symbolic constraint bytecode input output problematic target vulnerability user however oyente replicate vulnerability comparison impossible mythril symbolic virtual machine ethereum smart contract however emit concrete trigger vulnerability report discover vulnerability madmax static analysis smart contract generate zeus securify maian symbolic execution target limited contract vulnerability survey report extend description comparison evaluate socrates echidna mature competitor experimental setting socrates ganache default configuration active account unlimited ether balance ganache simulates completely empty blockchain environment transaction empty blockchain deliver easily interpretable assumption initial data consistent across execution hence contract assumption initial data transaction available blockchain currently compatible experimental setting generation framework non deterministic component comprises restarts simulator blockchain status simulator configure maximum simulation timeout min timeout amount fuzz contract difference approach deploy contract fully functional blockchain heavyweight consensus algorithm transaction instead deploy contract environment ganache avoids overhead due consensus network irrelevant contract bot behaviour summarizes configuration socrates research speedup contract split multiple distinct core intel xeon cpu ghz processor assign GB ram replication package available online contract socrates instruction configuration       random boundary overflow   RQ invariant violation detection socrates configure distinct bot account default bot configure combination available behaviour version implementation    bot switch randomly violation detect socrates manually review classify actual program error TP positive false alarm FP false positive classification perform manually author behaviour implement contract behaviour described official documentation eip interface assertion violation detect socrates data  recent empirical report positive TP false positive FP report invariant recent smart contract smart contract report vulnerable recent smart contract vulnerable smart contract invariant overflow violate contract data contract data false positive latter data invariant inconsistent frequently violate socrates detect respectively positive data false positive per data invariant allowance detect correctly per data socrates report false positive invariant allowance update violate data positive invariant transfer violate false positive finally invariant approval violate false positive data contract program error significant capitalization positive violation detect socrates average capitalization defective smart contract data respectively worth frequently violate invariant although invariant violation associate program mistake violation invariant regard choice contract fully compliant eip interface indeed eip interface document ambiguity interpretation interpret meaning variable  amount token transferable account accord interpretation socrates classifies violation token  distribute frozen transferable token variable  discrepancy due choice interpretation eip interface false positive rate invariant due contract specialize eip interface document interface instance contract impose fee transaction grant operation address generic invariant apply contract tester custom invariant custom contract behaviour developer consequently define appropriate contract specific invariant research image KB image RQ society bot bot replicate execute RQ instead deploy society bot deployed bot smart contract bot equip default behaviour combine available behaviour    limit limited investigation data recently contract experimental invariant contrast framework bot variant bot invariant report false positive FP positive TP violation report configuration uni invariant configuration positive uniquely identify violation instead configuration clearly preferable report positive uniquely identify violation limited configuration bot although false positive configuration bot positive false positive invariant violation detect configuration configuration reporting false positive false positive bot configuration bot report positive false positive configuration bot report positive false positive moreover configuration detect violation configuration detect configuration detect violation detect overall configuration bot outperform configuration bot however bot limit transaction address favour transaction society hence transaction specifically relevant address invariant violation contract owner transaction bot assume bot  relevant address uniquely identify violation detect configuration bot indeed invariant violation function contract owner execute contrary violation detect bot configuration multiple bot vulnerability listing function distribute contract owner transfer token balance address address bot configuration caller bot isolation function distribute array repetition address address destination address expression  contrary bot configuration caller bot aware blockchain context correspondingly function distribute array bot address amount token transfer address expression  unwanted creation token formulate research image KB image RQ bot behaviour bot society deployed data similarly behaviour replicate behaviour configuration behaviour    boundary random composition behaviour randomly perform uniform bias sample input domain   overflow  alone boundary  alone random  alone configuration non deterministic behaviour experimental behaviour report invariant violation detect violation report sum violation across however violation multiple violation report distinct invariant invariant violation manually validate classify positive violation TP false positive FP moreover report positive invariant violation detect uniquely configuration none configuration uni behaviour detect violation invariant overflow behaviour detect violation behaviour detect violation assertion violation detect behaviour configuration  bound rand overflow boundary random invariant boundary behaviour detect violation however behaviour uniquely identify violation invariant boundary boundary random behaviour report positive behaviour invariant overflow behaviour report amount positive behaviour uniquely identify violation rightmost behaviour detect positive violation boundary detect violation random boundary violation overflow behaviour effective detect quantity violation behaviour implementation overflow behaviour indeed bot perform action pas initial statement subsequent arithmetic expression overflow overflow behaviour accurate false positive however execute valid transaction without overflow evolve contract explore eventually invariant violation random behaviour overall report positive overflow behaviour research image KB image RQ comparison fourth echidna smart contract violate invariant aim manually contract code manually specify invariant format echidna instrumentation manual consume apply subset contract randomly sample contract socrates detect violation contract violation contract violation contract violation echidna contract amount socrates RQ comparison experimental report echidna generate violate invariant detect socrates violation detect echidna violate violation report echidna violation detect echidna whenever fuzzing arithmetic overflow violation invariant echidna alone report without instrumentation echidna mechanism assert occurrence overflow thanks manual instrumentation contract code echidna overflow become detectable echidna echidna generate violate invariant sender address function transferFrom concept token allowance address research image KB image RQ contract specific invariant generic invariant descend specification eip token interface however smart contract implement additional feature beyond interface instance contract possibility increase available token mint token contract limited mint limit cannot exceed additional feature additional constraint express invariant satisfied execution implementation extend invariant define contract specific invariant target contract manually inspect classify violation report socrates false positive contract specific invariant identify assertion violate generate echidna      violate  violate  violate  violate   contract specific invariant  csi csi csi csi csi csi csi owner address submit transaction owner address csi transaction variable  increase remain decrease csi sum token account balanceOf variable  accord csi  successful transaction sender address  csi sum allocate token exceed sum variable    reserve accord csi owner address execute function  successfully invariant suppose contract contract business logic developer functional requirement contract suppose contract specific invariant enable define invariant socrates detect violation contract specific invariant analyse contract research image KB image threat validity internal validity implementation socrates limitation random boundary behaviour feature solidity overflow behaviour extract constraint subset static analysis intra procedural moreover static analyser handle statement translate statement fail exit statement loop possibly fail exit statement limitation due symbolic execution derive overflow constraint despite limitation static analyser overflow behaviour remains largely applicable contract symbolic model execution precondition expression candidate overflow precondition usually precede complex loop expression candidate usually precede unhandled instruction effectiveness overflow behaviour empirical validation actually apply contract normalization feature instance function visibility regular expression fail contract ethereum smart contract constructor function instantiate contract blockchain normally constructor formal parameter however sometimes constructor parameter configure contract instantiation automatic generation constructor parameter socrates construct validity eip interface evolution finalize contract developed version interface invariant violation due implementation defect mismatch recent version interface limit smart contract recent transaction blockchain external validity although sample contract experimental validation socrates cannot assume arbitrary contract contract specific invariant involve additional corroborate finding related technique automate generation address specific challenge smart contract automate generator decompose isolation accessible purpose interface however fault affect business logic contract cannot expose solidity function adequacy criterion coverage structural individual code statement coverage interface interact entity simulate behaviour contract user beyond coverage public interface function define solidity moreover simulated user insufficient fault expose multiple contract user interact generation accommodate various fitness function generation traditionally structural coverage regard objective generation recent alternative objective fitness function however exist fitness function guidance society bot interact smart contract application achieve framework define behaviour bot development behaviour associate fitness function future multi agent exhibit collective behaviour desire service user cooperative agent engineer dynamic distribute parallel sub task bot society effectively smart contract largely inspire ultimate goal ensure bot interaction converge exposure contract defect addition technique agent influence choice agent model agent instantiate evolve identify limit configuration expose functional non functional deviation behaviour instantiate contract blockchain focus society autonomous bot smart contract agent society target activity previous agent framework goal correspondingly behaviour strategy another related adaptive behaviour adaptive emerges runtime specific execution context instantiate hence addition standard pre release verification validation quality assurance adaptive runtime relies monitoring survey runtime monitoring adaptive conduct recent attempt relate dependability constraint dynamically execution context implement  framework framework runtime monitoring specific execution context behavioural constraint checked another approach context dependent adaptation monitoring  substantially approach goal recognize runtime execution context dynamically feature expose fault adaptive goal smart contract evolve simulated environment however similarly society bot monitor exhibit autonomous possibly adaptive behaviour exist security smart contract focus catalogue security vulnerability transaction dependency timestamp dependency  exception reentrancy  exception disorder reentrancy timestamp dependency dependency dangerous delegate freeze ether vulnerability knowledge extensible framework propose detection arbitrary invariant violation restrict specific security vulnerability assumption availability database vulnerability advantage society autonomous bot conclusion deployed blockchain smart contract immutable program mistake implementation hence thorough smart contract crucial implementation defect deployment socrates framework smart contract federate society bot simulate complex interaction multiple user involve role contract experimental validation approach effective detect implementation error violate contract invariant smart contract actually production associate monetary importance instantiate society bot role combine behaviour oppose atomic bot behaviour future extend framework invariant socrates integrate behaviour improve effectiveness socrates socrates release source replication package contract instruction credit authorship contribution statement   conceptualization methodology software validation review edit   conceptualization methodology review edit supervision paolo tonella conceptualization methodology review edit supervision