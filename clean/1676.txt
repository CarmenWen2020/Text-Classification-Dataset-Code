measurement computational effort execute replicate operation ethereum blockchain platform transaction exceeds amount allot user limit exception execution interrupt analysis ethereum smart contract inference bound consumption knowledge static analysis infer parametric non constant bound smart contract infer bound parametric input parameter function parametric contract blockchain data analysis developed EVM bytecode ethereum model define analysis implement gastap aware smart contract analysis platform input smart contract automatically infers upper bound public function gastap apply function fetch ethereum blockchain succeed obtain bound previous keywords smart contract resource analysis static analysis decompilation introduction ethereum consensus protocol operation replicate blockchain perform transactional manner execute smart contract code amount monetary ether ethereum currency paid transaction propose computation initiate protocol client invoke smart contract computational storage resource resource regard storage ethereum virtual machine EVM item storage contract variable reside contract storage persistent external function transaction expensive memory temporary erase transaction cheaper stack operation limited amount rationale resource aware smart contract semantics consumption fold propose transaction emitter waste aka miner computational perform worthless intensive fee  user consume replicate storage valuable resource blockchain consensus finally semantics cap computation transaction execute hence prevents attack non terminate execution otherwise miner loop forever operational semantics EVM introduce novel challenge static resource consumption correctness security replicate computation EVM specification precise consumption operation smart contract solidity vyper translation construct static estimation runtime bound challenge throughout implement hoc compiler constant bound return otherwise recent foundation dangerous smart contract consumption dependent data contract function input blockchain however accord almost contract function analyze feature dependency situation without iterative code solidity code solidity compiler loop EVM bytecode hidden loop function parameter array message data data structure storage image KB image consume function source code EVM program obtain solidity program hidden loop content memory loop another traverse data loop resource analysis technique EVM allows infer accurate upper bound expression accumulates hidden loop inability soundly estimate lack analysis mistake contract unsafe prone exploit instance contract exceeds limit forever stuck progress vulnerability recognize discover unsound analysis graph article address challenge principled develop static analysis infer parametric bound smart contract upper bound infer input parameter function contract blockchain data consumption depends upon ether effective correspond transaction inference complex transformation analysis code construction EVM graph decompilation EVM bytecode representation program treatment EVM data byte challenge storage memory model definition static model capture consume program plug within analysis implementation effort advantage shelf analysis compute parametric bound input program challenge aspect definition bound analysis approximation EVM model formally specify EVM model highly complex unconventional consumption instruction memory instruction access location memory beyond previously access location active memory proportional distance access location opcode related bytecode instruction challenge infer somewhat counter intuitively constant contract blockchain analysis soundly approximate component former estimate instance peak resource analysis latter parametric model within standard resource analysis analysis implement gastap aware smart contract analysis platform knowledge automatic analyzer smart contract gastap input smart contract solidity source code possibly decompiled EVM code automatically infers upper bound consumption public function overview architecture analyzer component introduce throughout gastap application contract developer attacker owner detection vulnerability debug verification certification usage contract developer owner precise resource analyzer query specific smart contract amount safely without exception execution contract code execute function debug verify certify amount ensure progress besides gastap allows calculate amount external data source contract popular  service enable successful asynchronous callback forthcoming response transaction rational attacker resource analysis estimate ether pour contract execute denial service attack attack however economically impractical summary contribution representation EVM code analysis EVM bytecode graph cfg obtain implementation address analysis jumping address cfg RBR generation decompilation EVM bytecode representation RBR enables subsequent static analysis EVM code decompiled program explicitly local variable operand stack blockchain data parameter handle EVM data storage memory model RBR refinement program transformation RBR allows handle specific feature EVM program handle byte fundamental achieve precise analysis EVM program transformation consists retrieve data visible within variable RBR another transformation perform storage memory access within RBR program infer information subsequent analysis opcode bound apply analysis framework infer upper bound definition operation model approximates usage EVM bytecode instruction approximation model EVM declare concrete execution fully instantiate exp varies logarithmically operand apply sstore varies zero however statically infer bound static parametric model soundly defines concrete arise execution memory bound memory compute separately framework non standard analysis explain inference memory bound boil infer address slot memory access instantiate within formula memory propose infer slot peak resource analysis transformation within RBR annotates acquire declaration memory address access peak analysis infers peak acquire annotation hence obtain slot access implementation experimental evaluation finally describes experimental evaluation analyze smart contract succeed analyze public function infer bound gastap web interface http costa fdi ucm gastap basically contribution item enables standard resource analyzer unique smart contract contribution item handle storage memory model data item static definition operation model item develop technique infer memory preliminary version decompilation phase demonstration proceeding  description component analyzer proceeding  article formal basis formally describes analysis namely formalize representation aware semantics multiple purpose beyond analysis another novelty previous publication extension item handle particularity EVM code within static analysis formal definition model item computation memory bound rely exist analysis technique beyond formal contribution improve experimental evaluation significantly former version rely CFGs incomplete fail fully implement cfg generation besides apply contract namely contract solidity code available assess accuracy upper bound obtain analyze function actual transaction preliminary stack sensitive graph EVM stack local volatile memory behaves address array byte persistent storage blockchain detailed description operation code stack sensitive CFGs contribution computation cfg notion program maximal sequence consecutive code program instruction instruction EVM program split jumping instruction destination instruction return invalid revert significant difference EVM virtual machine java bytecode cli net program stack address instead explicit code jumping instruction EVM instruction  unconditionally conditionally respectively program counter execution stack difficulty address happens instance public function invoked privately contract return program counter introduce  program unique instruction invoked return caller invoked function feature EVM obtain graph program information stack compute stack precisely infer address jumping program context sensitive static analysis analyzes separately stack address stack context sensitive analysis information compute stack sensitive graph vertex replicate stack invoke node clone correspond replicate accord replicate program counter instruction numeric identifier clone clone identifier omit context function return stack program clone identify precise definition phase assume function available online technical report analysis generate mostly due recursion program solidity importantly analysis incomplete generate EVM program execution trace exists correspond correctly proof soundness generation cite technical report image KB image excerpt solidity code  contract technique  extract  contract implement lottery node obtain  correspond invocation solid dash execution entry solid dash interestingly marked return address function   publicly invoked address invoked function callback non replicate node stack node however node stack node clone replica node cfg representation obtain representation RBR described  analysis implement standalone  facilitate integration corresponds RBR generation representation bytecode instruction operation assignment stack variable parameter explicit representation stack memory storage blockchain data conditional branching cfg guard mutually exclusive boolean guard grammar RBR EVM translate image KB image assume instruction RBR unique program identifier RBR program assignment instruction ignore program unless program RBR correspond program counter EVM program replicate RBR parameter stack variable relevant ingredient transformation stack flatten explicit variable stack instruction model variable stack stack explicitly parameter denote obtain function refer stack variable program memory variable array maximum memory model content local memory transaction memory access stack hence access array index stack variable access memory location variable model contract variable array maximum storage memory indexed stack variable stack variable contains address involve operation blockchain data model blockchain data mapping blockchain variable environmental blockchain data data access dedicate opcodes consume offset stack normally stack  besides information local memory extend notation refer additional parameter environmental information refer access message input data refer blockchain variable RBR generation RBR generation cfg bytecode described intuitively cfg RBR cfg induce invocation besides bytecode transform correspond instruction associate EVM operation EVM instruction RBR precisely compute execute EVM instruction definition formalizes transformation EVM bytecode instruction RBR instruction definition RBR instruction EVM instruction EVM bytecode program counter EVM program define function define representative EVM instruction image KB image function translates bytecode component applies function correspond assignment RBR variable RBR bytecode instruction simply wrap within functor function transforms EVM instruction assignment explicit stack variable dup swap convert arithmetic operation operation stack boolean operation transform function access array formalize generation RBR definition RBR stack sensitive graph EVM program instruction generate  image KB image RBR generation distinguish bytecode conditional  additional guard guard continuation conditional outgo correspond generate continuation instruction terminates execution revert invalid without stack variable stack instruction function definition translate cfg obtain operation assignment explicit stack variable dup bytecode instruction storage memory transform assignment involve variable sload translate arithmetic operation boolean operation wise operation etc variable explicit LT operates transform guard explicit correspond stack variable involve guard however brevity omit conditional implement mutually exclusive guard explain conditional  opcodes stack address boolean execution opcode address stack opcode aware semantics define aware operational semantics EVM RBR denote non empty sequence empty sequence denote activation sequence instruction empty denote instruction execute mapping stack variable EVM image KB image RBR semantics program sequence activation mapping local memory address mapping storage address mapping blockchain variable correspond consumption accumulate execution instruction execution memory allocation respectively handle assignment expression stack variable accord grammar expression constant content memory storage address content blockchain variable arithmetic operation stack variable operation functor function evaluates expression arithmetic respect mapping stack memory storage variable model assignment blockchain data stack variable correspond assignment stack variable memory storage corresponds evaluation annotation EVM instruction external consumption program update correspond EVM instruction purpose function consume define appendix define RBR opcode model memory model representative blockchain variable contains amount available transaction execution exceeds limit semantics hence execution progress blockchain execution exception instruction correspond external handle separately besides consume instruction limit consume external contract execution addition accord external data memory storage instance external contract perform callback contract possibly modify storage variable express semantics function return tuple contains local memory storage execute external consume execute contract respectively evaluates RBR activation code argument finally corresponds termination activation program execution execution function smart contract initial RBR code empty mapping stack variable local variable respectively contains mapping variable blockchain additionally contains blockchain variable message data hash code bound trace already mention infinite trace guarantee execution smart contract terminates consume limited amount blockchain variable execution therefore execution trace terminates trace empty sequence activation definition opcode function fix cond  delegatecall callcode         sha definition RBR function smart contract initial storage blockchain information execution trace consumption define model EVM model complex unconventional computation component depends EVM instruction execute function described another consume related memory consumption function described opcode model focus computation attribute EVM instruction compute fee bound opcode define function RBR semantics definition opcode function EVM opcode stack mapping storage mapping function define EVM opcodes EVM opcode stack mapping variable opcode return consume correspond instruction definition distinguishes instruction bytecode instruction fix constant consumption define define instruction consumption consumption generic refer fix bytecode instruction constant consumption sstore storage zero non zero assignment otherwise  refer instruction define consumption EVM opcodes sstore definition varies actual blockchain variable latter account non existent code activity zero balance execution external code invoked instruction model already capture function semantics bytecode instruction non constant parametric consumption depends stack location define complex exp consumption define otherwise consumption depends exponent accounting computational effort definition function memory function EVM bytecodes operates memory mload mstore mstore      callcode delegatecall  return revert sha memory model component transaction amount memory access memory EVM instruction define difference denote memory slot access local memory execution respectively function memory slot define compute EVM instruction accumulate obtain memory compute EVM instruction local stack actual memory slot access auxiliary function define besides mload mstore instruction sha others local memory hence increase memory semantics maximum compute hence function infer memory slot access operation execute program definition memory function EVM opcode stack mapping define define function define computation memory slot access EVM instruction RBR semantics replace difference computation maximum extract compute hence return instead slot memory access maximum thanks function RBR RBR transformation analysis RBR program semantics allows dynamically compute consumption concrete EVM transaction however enable exist analyzer statically infer bound transaction transformation RBR detail adaptation RBR model local memory storage access local variable allows resource analysis handle local variable infer EVM program without specific extension EVM memory storage model besides content storage memory modify another contract execute additional transformation finally RBR program transform abstract byte array enable resource analyzer flatten storage memory location mutable data structure heap  formal static analysis array content RBR semantics model local memory storage array imitate treatment EVM program inspire aim flatten memory storage allocate data variable content address memory storage avoids extend resource analyzer complex treatment array content proposal consists analyze address load instruction mload mstore sload sstore identify address access  basically load instruction access address explicit variable model location otherwise exist heap pointer analysis apply gain accuracy model access goal analysis assume respectively memory storage variable identify analysis program instruction mload mstore function return variable address access uniquely identify analysis cannot identify return analogously function RBR program refine instead access RBR concrete variable identify analysis modify correspond RBR instruction definition illustrates refinement RBR flatten memory storage access besides blockchain variable extract definition RBR refinement RBR refine RBR compute function define mload sload RBR instruction replace assignment concrete memory storage variable destination stack variable concrete variable tracked however address assign function model lack information content denote generator variable safely unknown correspond address analogously mstore sstore replace assignment memory storage variable treatment address access mstore sstore unknown extends memory storage variable respectively destination assignment forget memory content storage respectively affect memory location storage location respectively rely previously information implementation detect array forget cannot modify bytecode obtain compilation solidity code crucial accuracy analysis function apply program return EVM instruction sstore sload program variable storage address hexadecimal stack EVM instruction sstore sload access slot storage something happens function apply program return however apply sload program obtain load storage location iteration loop access storage address generate previous sha instruction traverse array slot function variable instance hence resource analyzer integer variable content memory storage blockchain data without specific extension external external contract invoked EVM instruction callcode delegatecall  handle semantics address invoked contract stack actual code aspect account analyze contract external consume invoked contract existence callback return focus consumption execution contract consume external contract regard aspect external invoke contract execute function callback external code code unknown analysis modify storage invoke contract RBR program therefore forget previous storage sstore access unknown storage address finally return external sequence local memory variable therefore assign previous local memory refinement RBR soundly approximate modification perform memory storage due external apply refinement RBR already refine definition RBR refinement RBR refine RBR compute function define image KB image refinement described definition maintain nop  instruction compute consume byte array solidity storage variable byte solidity dynamic array challenge resource analysis EVM depends actual shorter byte data packed storage slot correspond variable otherwise slot contains data content address obtain standard array typically loop traverse data structure proportional data structure traverse hence resource analyzer analysis approximate data structure program bound iteration loop infer upper bound infer array crucial obtain precise analysis unfortunately instruction access packed array wise operation others analysis cannot handle standard analysis unpacked byte develop specific analysis purpose challenge besides unnecessary issue transformation RBR sequence instruction generate compiler content byte variable stack obtain stack instruction apply variable byte remove RBR interested  account analyzer unable wise operation assume unknown therefore lose information stack importantly stack indeed contains remove remain instruction analyzer handle stack variable byte assume content byte variable stack transformation apply image KB image transformation apply whenever infer bound function   report without transformation fails bound analysis EVM transaction computation fee split related EVM opcodes execute another depends memory address access likewise analysis split computation upper bound transaction upper bound corresponds opcode upper bound compute standard resource analyzer memory upper bound computation perform peak resource analyzer opcode upper bound resource analysis analysis complex analysis handle article exist technique resource analyzer quantify associate instruction generic notion model model function assigns execute instruction program resource analysis function receives RBR program model return upper bound resource model function function purpose definition static opcode model model dynamic describes usage concrete execution define static model concrete execution explain distinguish instruction consumption definition detail instruction fix consumption directly apply model instruction constant consumption concrete stack instruction non constant parametric concrete consumption depends stack instruction dynamic depends concrete stack unknown static analysis imprecise define static model instruction sstore improve precision static model analysis stack variable contains constant storage hence concrete instruction program assume function return infer constant program constant detail implementation function syntactic analysis precise semantic constancy analysis additionally function stack RBR program definition EVM instruction program define static EVM model define definition associate nop instruction instruction directly correspond EVM instruction remain RBR instruction model definition consideration fix instruction dynamic model instruction constant depends concrete stack rely retrieve correspond stack unknown information blockchain expression return directly  analyze contract execution external symbolic instruction parametric directly stack variable expression static EVM opcode model fix  delegatecall callcode         sha RBR adheres representation hence directly resource analyzer RBR implement model analyzer return upper bound expression parametric input argument function input argument function function parameter storage variable infer blockchain associate transaction  detail resource analyzer without modification fully automate expression approximates amount related operation execute EVM bound compute gastap function  parametric variable corresponds array function define otherwise upper bound upper bound parametric variable input blockchain data memory upper bound already mention infer memory bound boil approximate memory address access transaction approach instance peak resource analysis analysis accumulate standard resource analysis computes peak supremum resource consumption execution model atypical resource memory location instruction access memory location allocates resource notation acquire allocate amount resource expression variable peak analysis allows infer maximal acquire annotation analogously standard analysis peak analysis function return peak supremum resource consumption acquire annotation within RBR program perform transformation RBR program convert memory access mload addr allocation addr resource slot memory EVM instruction accord definition depends correspond stack variable memory address access information within acquire statement nop  EVM instruction access memory stack variable peak resource analysis computes maximum expression within acquire corresponds memory slot address execution alternative infer information analysis computes upper bound expression access memory maximization obtain upper bound contrast approach directly obtain maximum memory access finally apply function define analysis obtain memory upper bound public function contract illustrates analysis transformation apply peak analysis   mload         acquire delegatecall  acquire return revert   function  executes EVM instruction access memory mload mstore return mstore sha analyze EVM instruction infer mload instruction load memory address stack variable mstore memory address stack variable return operates stack variable similarly mstore instruction memory address stack variable sha instruction operates stack variable respectively compute expression obtain resource acquire respectively hence analysis return slot memory access execution function  finally apply function obtain memory upper bound function finally upper bound function  memory upper bound conclude upper bound theorem public function RBR program blockchain information sketch proof soundness program transformation RBR program RBR RBR transformation analysis analysis preserve instruction program regard opcode straightforward approximation EVM instruction soundness resource analysis ensures infer upper bound opcode finally soundness peak analysis guarantee memory component upper bound memory implementation evaluation analysis article implement gastap aware smart contract analysis platform input smart contract automatically infers upper bound public function implementation detail evaluation gastap implementation detail gastap evaluate accuracy bound infer gastap  bound compute solidity compiler evaluate efficiency effectiveness analyze ethereum smart contract obtain ethereum blockchain popular etherscan service dataset http github com costa  gastap intrinsic execution solidity compiler however gastap flag incorporate transaction fee finally ass accuracy upper bound infer gastap upper bound obtain account ether valuable obtain etherscan service transaction gastap online web interface http costa fdi ucm gastap available subset smart contract experimental evaluation user solidity contract text available file manager refresh outline allows button function infer finally click apply analysis bound obtain setting menu specify input solidity program EVM code implementation component developed source  analyzer source available executable classify component implement python implementation component related generation stack sensitive graph introduce generation representation abstraction described implement python component implement code prolog implementation  analyzer implement prolog implement component directly integrate prolog analysis model component implement prolog component implement classical data analysis corresponds function retrieve stack analysis component contains model described fix instruction model prolog specify concrete instruction constant depends concrete instruction parametric model prolog analysis compute output component text file RBR file component bound   bound solidity compiler  bound gastap opcode memory respectively public function contract memory bound function constant consumption accurate  hence lose precision due static analysis function  fails infer constant consumption return opcode infer precise parametric bound  linear variable resp array address slot    callback besides depends function parameter proof parameter important although solidity source code function   loop generate compiler visible EVM happens function byte variable argument another develop analyzer EVM  cannot ensure consumption finite without embed information blockchain analyzer  loop image KB image  variable initialize definition uint  ether ether ether execute instruction code indeed initialization variable  ether EVM code available blockchain instruction execute contract analyzer cannot instruction  unknown hence bound besides analyzer cannot infer loop terminates  guaranteed strictly zero initialization instruction infer bound  callback guarantee memory finite cannot obtain upper bound gastap yield maximization error maximization error analyzer compose fragment code maximal inner component context detail maximization involves memory location unknown translate variable definition upper bound cannot infer rank function error loop terminate memory consumption finite finally transaction constant limit contrast non constant bound obtain gastap spent without refund beyond limit transaction exception player bound conclude player contract risk stuck limit cannot gastap prevent vulnerability contract player limit increase statistic analyze contract experimental setup consists contract blockchain ethereum contract blockchain january solidity source code available reduces smart contract analyze significantly estimate smart contract deployed ethereum blockchain source code available remove duplicate instance contract remove smart contract compiler error due version compiler introduces syntax solidity newer version compiler file solidity file contains contract solidity compiler generates EVM bytecode file EVM bytecode file contract define solidity input gastap analyzes EVM bytecode file separately however exclude file decompilation phase fails contract information file failure happens file failure  mainly due recursive function handle failure rate vandal failure rate oyente failure rate  failure rate previous prototype gastap failure rate finally  timeout file remove file experimental evaluation remain file mention contract analyze public function auxiliary function solidity compiler generate EVM bytecode version binary version contract deployed blockchain code constructor contract runtime version contract already deployed code actually blockchain bytecode function contract exclude constructor gastap analyzes runtime version default code related constructor contract perform intel core ghz GB memory ubuntu gastap accepts smart contract version solidity bytecode ethereum virtual machine statistic obtain function analyzer summarize opcode memory consumption separately discus aim effectiveness gastap  mem analyze function opcode memory resp precede percentage analyze contract function resp constant opcode resp memory consumption smart contract ethereum safety recommendation mention relevant function resp obtain opcode resp memory bound constant hence potentially vulnerable additionally analyze function opcodes memory timeout due complexity equation thanks information  analyzer gastap classify error explain source incompleteness analysis image KB image statistic usage analyze valuable smart contract source code available ethereum blockchain maximization error maximization error consequence loss information analysis decompilation memory location lose mention formula consumption finite otherwise flag rank function error described rank function error solver rank function bound maximum iteration loop analyze code perform gastap fails output rank function error described scenario stumble across error failure mem opcode accumulate loop  rank function error equation transform recursive transformation feasible error thrown mutually recursive function happens nest loop non structure instruction inner loop outer vice versa become mutually recursive loop extraction transformation implementation future discus detail parametric bound obtain parametric opcode bound linear bound memory bound linear bound importantly solver automatically infer linear complex automate inference linear rank function bound loop iteration linear rank function involve multiple program variable increase loop execution others decrease etc automatically loop bound static analysis technique gastap considers EVM bytecode instruction within public function analyze compute upper bound bytecode instruction related failure revert invalid  accumulate consumption EVM bytecode contract loop visible solidity source code instance hidden loop function return array parameter message data data structure storage gastap analyzes EVM bytecode detect loop infers parametric upper bound function regard source parametric bound percentage correspond getters public variable version getters almost parametric function public function analyze getter function introduce automatically solidity compiler variable public standard function user content transaction constant variable solidity variable modifier constant constant compile assign variable declare translate directly EVM bytecode generate upper bound infer constant however gastap detect infer rely variable immutable modify contract constancy detect analysis another orthogonal analysis detects variable constant constructor ensures function inter procedural constancy analysis complementary constant replace within formula infer regard efficiency gastap analysis function resp phase percentage bound inference opcode memory bound equation generation opcode memory spent GE timeouts  negligible syntactic transformation semantic argue statistic experimental evaluation accuracy effectiveness efficiency source incompleteness direction improvement finally gastap EVM bytecode analysis independent version compiler solidity code compile version compiler upper bound optimization perform compiler orthogonal analyzer contract publish ethereum platform specially contract publish version compiler cannot accuracy gastap transaction ass accuracy upper bound infer gastap transaction consume prominent benchmark account valuable ether source code available etherscan service september solidity file smart contract analyze public function contract obtain meaning explain parametric upper bound obtain subset benchmark correspond constant bound parametric bound function return maximization error termination function analyzer rank function function error function error contract analyze various public function nest loop conditional statement inside loop extraction transformation mention implement  analyzer image KB image accuracy upper bound infer gastap transaction ass accuracy restrict function invoked exist transaction information retrieve etherscan service  service public function analyze almost execution bound infer gastap consume execution transaction fee gastap bound default compute average consume transaction function upper bound average summarizes grouped analyze function upper bound overhead leftmost upper bound overhead rightmost overhead within function constant upper bound parametric model model described scenario denote improve model capture blockchain transaction execute accounting pessimistic consumption bytecodes namely sstore delegatecall callcode   improve model instead assume account involve  operation exist considers active consume instead sstore bytecode assume storage location involve operation previously consume instead finally opcodes related external delegatecall callcode  assume contract previously model leftmost orange display function namely constant improve model overhead upper bound obtain average consume actual transaction invoke function model upper bound infer function amount consume transaction however improve notably assume improve model indeed constant bound disappear overhead function rightmost parametric bound overhead upper bound surprising actual transaction concrete data upper bound input data important analyze exception gastap infers upper bound limit specify correspond transaction bound prevent exception addition function exception transaction involve finally manual inspection function explain source  function classify parametric bound input data function parameter parametric bound message data bound express  traverse variable array loop explicit code however source code translate EVM code primitive delete correspond getters public variable bound express return related analysis ethereum smart contract safety security violation vulnerability popular topic attention recently numerous developed leverage technique symbolic execution smt certify program approach target vulnerability induced contract specific phenomenon reentrancy  trace however contract analysis ignore resource usage focus non related safety security temporal gastap smart contract analyzer focus exclusively consumption survey relate approach concerned usage correspond vulnerability  identifies costly program optimize consume relies specific smt solver symbolic computation analysis neither usage bound classify useless code related loop related technique focus detect code improve development contract infer consumption bound previous extend  EVM bytecode  bytecode smart contract output optimize version consumes define sequence EVM instruction replace another consumes semantics sequence structure code opaque code identify inspect instance execution trace deployed smart contract  approach identify inefficient code symbolic execution parallelize mapreduce model compute increase described improve performance fully scalable vein identifies focus vulnerability madmax static analysis decompiled EVM bytecode combine technique analysis analysis cfa context sensitive analysis model memory layout madmax infers loop data information loop infers information related exit loop induction variable incremented concrete inside loop data analysis information aliasing dependency variable loop data analysis madmax infer concept array iterators storage increase public function technique madmax differs gastap focus identify data inherent related vulnerability bug finder complexity analyzer derive accurate complexity boundary goal    madmax unsuitable tackle challenge introduction proof assistant detect exception model update along execution trace encode constraint formula however infer loop invariant specify manually automatically infer bound program involve loop preliminary prototype gastap develop  optimizer smart contract  analysis gastap detect optimize storage generate automatic optimization avoids storage access replace memory access purpose simplify version model account storage operation propose methodology notion consumption  estimate consumption technique symbolic bound model approach symbolically enumerate execution unwind loop limit contrast gastap infers maximal iteration loop generates accurate bound execution function  approach  loop limit resource analysis approach infer maximal iteration loop execute resource analysis approach addition infer precise expression constant consumption beyond generate parametric bound besides knowledge approach implement context EVM evaluate smart contract therefore generate approach propose signer  visualize  deployment initialization transaction contract generate transaction public function apply technique described  approach differs analysis dynamic hence focus compute concrete transaction generate previously technique static infers consume arbitrary input public function analysis conclusion future automate static resource consumption critical develop secure blockchain replicate computation manage billion worth virtual currency adapt extend technique resource analysis feasible ethereum prevent vulnerability verification certification exist smart contract improvement auxiliary analysis gastap impact precision performance future improve accuracy direction precise abstraction memory allocate data abstraction explain aim handle wise operation abstraction