homomorphic encryption privacy preserve compute enable computation encrypt data user however software implementation homomorphic encryption purpose processor emergence FPGAs service hardware acceleration computationally workload popular article propose HEAWS domain specific coprocessor architecture accelerate homomorphic function evaluation encrypt data performance FPGAs available amazon aws knowledge report hardware acceleration homomorphic encryption amazon aws FPGAs utilize massive aws FPGAs performance parallel coprocessor architecture FV homomorphic encryption scheme become popular compute arithmetic encrypt data parallel building apply pipeline processing implementation hierarchy optimization instantiate multiple parallel coprocessors fpga execute homomorphic computation simultaneously absolute computation reduce deploy computational resource efficiency HW SW communication interface important role homomorphic encryption computation data intensive implementation utilizes  feature bandwidth communication available aws reduce overhead HW SW data transfer moreover explore identify optimal chip data transfer strategy parallel coprocessors manner optimization aws accelerator perform homomorphic multiplication per parameter enables homomorphic computation depth finally benchmark artificial neural network privacy preserve forecasting consumption smart grid application introduction decade rapid transition towards compute already everyday social network upload video youtube internet online etc service become popular expand education health role  society similarly business application platform service volume data analyze data despite numerous advantage compute privacy issue data owner abuse data owner honest data breach hacker concern hacker breach security linkedin email address password sale web homomorphic encryption enables privacy preserve confidential compute privacy user data convenience service homomorphic encryption scheme augment public encryption scheme extra procedure evaluate function encrypt data user upload homomorphic encrypt data computer evaluate functionality directly encrypt data data remains encrypt platform owner useful information data breach expose encrypt data plaintext although homomorphic encryption conceptualize decade rivest adleman  homomorphic encryption scheme construct partially homomorphic perform operation homomorphic addition multiplication encrypt data homomorphic encryption scheme compute homomorphic addition multiplication evaluate generic application encrypt data construct gentry generation scheme extremely suffer massive ciphertext expansion generation homomorphic encryption scheme magnitude faster scheme ciphertext kilobyte megabyte homomorphic encryption computationally demand hence naturally becomes research target accelerator designer community propose speedup performance critical application application domain homomorphic encryption research topic hardware acceleration explore research topic cryptography symmetric public cryptography typical encryption security plaintext ciphertext polynomial coefficient encrypt homomorphic addition multiplication perform besides data processing operation complicate module perform computation polynomial hardware accelerator naturally speedup computation however data computation intensive homomorphic encryption hardware implementation challenge literature dedicate hardware yield computation purpose cpu typical software implementation target scheme intel cpu multiplication aim accelerate homomorphic operation FPGAs privacy preserve application however accelerate homomorphic encryption building performance implementation fpga platform challenge purpose desktop laptop processor ghz frequency achieve mhz frequency fpga platform really challenge complex circuit processor homomorphic compute encrypt data roy     accelerate homomorphic evaluation fpga publish HPCA incorporate parallel processing fpga accelerate compute HEAWS programmable performance domain specific accelerator architecture fpga accelerate homomorphic computation specifically HEAWS target amazon web service aws service elastic compute EC consist instance instance attach xilinx FPGAs powerful intel CPUs tailor hardware acceleration homomorphic compute FPGAs instance hardware software interface achieve performance knowledge instance FPGAs accelerate homomorphic compute evaluate performance benchmarking contribution propose massively parallel datapath architecture accelerate homomorphic computation platform amazon aws parallel coprocessors instance coprocessor calculates parallel computation core chinese remainder theorem crt extension propose modulus scheme residue RNS RNS decompose modulus prime residue arithmetic modulo prime dsp brams addition assign decompose prime parallel execution datapaths furthermore coprocessor consists core core ntt core reside polynomial arithmetic  architecture massively parallel distribute memory architecture dedicate address scheme maximum fpga specific distribute memory brams memory URAMs coprocessor assign polynomial memory memory polynomial coefficient combination brams URAMs optimise polynomial multiplication ntt algorithm algorithm adapt data dependent operation address scheme guaranteed conflict dual access coprocessor ciphertexts optimize hardware software interface essential avoid communication bottleneck maximum communication interface amazon aws fpga platform achieve latency transfer polynomial minimise overhead chip data transfer effort investigation OS correspond kernel driver handle transfer adapt memory layout polynomial layout driver coprocessor programmed dedicate instruction demonstrate elementary arithmetic operation homomorphic computation coprocessors demonstrate machine application smart grid forecasting application estimate fpga accelerator perform nearly per gpu instance consumption background homomorphic encryption convert plaintext message ciphertext confidentiality addition computation ciphertext mathematical homomorphism computation ciphertexts yield ciphertext decryption corresponds computation perform plaintext exist homomorphic encryption scheme augment public encryption scheme extra procedure namely homomorphic addition multiplication perform homomorphic computation encrypt data plaintexts encrypt public encryption procedure scheme uploaded evaluate function plaintexts function translate representation consists addition multiplication gate function evaluate ciphertexts evaluate homomorphic addition multiplication respective ciphertexts due underlie homomorphism operation ciphertexts mapped operation plaintexts homomorphic encryption scheme perform homomorphic addition multiplication encrypt data construct mathematical lattice scheme encryption plaintext besides homomorphic arithmetic yield extra output homomorphic evaluation signal ratio diminishes threshold beyond recovery signal plaintext decryption becomes erroneous therefore exist homomorphic encryption scheme threshold maximum operation admissible ciphertext threshold depth context homomorphic encryption tune tune parameter encryption scheme depth parameter performance penalty lattice homomorphic encryption scheme noisy operation homomorphic multiplication ciphertexts growth evaluation application mostly dependent sequential homomorphic multiplication operation multiplication gate critical depth lattice homomorphic encryption scheme actually multiplicative depth scheme scheme limited homomorphic computation somewhat homomorphic encryption scheme extend fully homomorphic encryption FHE scheme extra procedure bootstrapping bootstrapping operation evaluates decryption circuit homomorphically encryption ciphertext encryption plaintext encryption plaintext amount lattice homomorphic encryption scheme propose efficient scheme ideal lattice polynomial arithmetic centre computation polynomial arithmetic variation parameter protocol execution target accelerate fan  FV somewhat homomorphic encryption scheme FV scheme computation encrypt data HEAWS modular methodology generic adaptation architecture accelerate multiple homomorphic encryption scheme fan  FV scheme FV popular scheme perform calculation encrypt data error lwe structure ideal lattice correspond ideal polynomial irreducible polynomial denote polynomial coefficient reduce integer modulo secret polynomial coefficient uniformly random modulo lwe distribution consists tuples uniformly random error polynomial sample discrete error distribution typically discrete gaussian lwe tuples computationally infeasible compute secret FV scheme polynomial reduction polynomial dth cyclotomic polynomial reduce homomorphic computation author FV propose ternary secret polynomial coefficient application encryption decryption operation user local computer homomorphic computation namely addition multiplication encrypt data perform introduce encryption decryption operation homomorphic addition multiplication operation detailed mathematical description FV scheme reader fan  encryption decryption operation variable polynomial public polynomial private encryption operation encodes message generates error polynomial computes polynomial addition multiplication generate ciphertext recommendation author FV ternary polynomial decryption performs polynomial multiplication addition finally coefficient wise decode challenge scheme polynomial operation FV encryption public encryption scheme receives message encrypts ciphertext polynomial public ciphertext decrypt plaintext secret homomorphic computation encryption decryption operation handle local computer ciphertext homomorphic addition multiplication operation calculate ciphertext fpga acceleration aim execute homomorphic addition coefficient wise operation polynomial ciphertext homomorphic addition yield ciphertext contrast homomorphic multiplication complicate operation calculate diagram  operation polynomial RQ modulus instance respectively later parameter detail  multiplication RQ perform  operation later polynomial RQ FV homomorphic multiplication ciphertext calculates ciphertext operation input polynomial RQ multiplication polynomial compute later operation polynomial ciphertext calculate reduce polynomial reduction decompose polynomial  algorithm iterative ntt input polynomial nth primitive unity output polynomial ntt    polynomial coefficient decomposes slice coefficient hence cheap operation manipulation output vector polynomial bold font  relinearization operation vector computes  ciphertext SoP  SoP  SoP summation     relinearization fix vector polynomial diagram building implement homomorphic multiplication operation FV scheme remain computation perform building polynomial multiplication homomorphic encryption computes multiplication coefficient polynomial polynomial coefficient parameter detail compute multiplication polynomial commonly efficient algorithm fourier transform fft multiplication  multiplication  multiplication fft polynomial multiplication asymptotic complexity nlogn hence candidate implement polynomial multiplier polynomial theoretic transform ntt integer generalization fft arithmetic operation perform integer ntt polynomial multiplication introduce approximation error suitable homomorphic encryption cryptography accuracy computation critical role however ntt modulus polynomial coefficient prime satisfies congruence relation modn polynomial ntt polynomial multiplication compute NTTs compute input polynomial coefficient wise intermediate ntt domain finally inverse ntt apply transform domain iterative version ntt algorithm algorithm algorithm constant nth primitive unity inverse ntt operation ntt additional coefficient residue RNS polynomial ntt additional optimization coefficient homomorphic encryption coefficient homomorphic encryption parameter instance polynomial coefficient parameter detail arithmetic integer implementation complicate multi precision architecture severely slowdown computation FV homomorphic encryption scheme target scheme residue RNS avoid expensive integer arithmetic additionally achieve parallel processing residue RNS relies chinese remainder theorem crt hence sometimes refer crt representation theorem pairwise coprime positive integer arbitrary integer simultaneous congruence  unique  modulo RNS modulus prime RNS basis consists modulus coefficient  equivalent RNS representation   prime factor RNS representation arithmetic operation coefficient  mapped arithmetic operation  involve expensive data processing FPGAs arithmetic compute chip specialise hardware dsp slice additionally computation perform parallel factor parallel processing FV homomorphic encryption polynomial modulo RNS representation forth compute residue modulo reduction RNS compute  residue application crt operation expensive integer arithmetic explain parameter detail explain data width prefer RNS   operation RNS basis conversion parameter parameter defines polynomial coefficient proportional relationship multiplicative depth security achieves parameter chosen multiplicative depth achieve complex application evaluate encrypt data accelerator architecture parameter multiplicative depth security ciphertext modulus polynomial coefficient standard deviation error distribution modulus multiplicative depth homomorphically evaluate privacy friendly forecasting smart grid complexity cipher  ciphertext private information retrieval encrypt entry encrypt sort RNS modulus prime modulus additional prime RNS basis extends RNS basis additional prime operation input ciphertext RQ modulus naturally  operation input polynomial modulo however RNS representation prefer optimise polynomial multiplication extend RNS representation prevents  operation naive extend RNS representation coefficient construct coefficient modulo RNS representation apply crt compute extend RNS representation compute modular reduction however computation expensive integer arithmetic modular recently propose RNS extension approximate arithmetic avoid integer arithmetic completely approximate amount extra ciphertext negligible increase decryption failure rate context negligible increase decryption failure rate acceptable privacy preserve application detail optimization  optimization explain RNS representation coefficient RNS compose modulus parameter described simultaneous coefficient    sourcefor relationship reconstruct sourcethe  optimize algorithm calculate approximation without compute multi precision arithmetic  SourceNote calculation handle operand modulus computes approximate however approximation error bound float negligible detail architecture described operation  operation input ciphertext RQ hence inverse  mathematical calculates coefficient RQ plaintext modulus binary message expensive  operation  algorithm approximates expensive  computation without compute multi precision arithmetic operation coefficient RNS consist thirteen prime RNS modulus consists prime correspond calculation RNS coefficient  sourcewhere  computation friendly approach operand constant coefficient RNS basis conversion  operation implement described architecture homomorphic compute computationally expensive operation perform polynomial coefficient described various technique literature computation polynomial mathematical operation hardware building integrate processor architecture compute encrypt data efficiently demand multiple optimization reduce chip chip memory access arithmetic coefficient serial computation parallel computation achieve frequency architecture detailed explanation processing mathematics employ diagram propose HEAWS architecture processing coprocessor multiple coprocessor instance  fpga accelerator interface software architecture HEAWS instantiate coprocessors fpga accelerator instance amazon aws diagram connectivity memory processing coprocessor access signal denote data transfer polynomial computation benefit residue arithmetic hence coprocessor consist parallel residue polynomial arithmetic  access correspond memory parallel  ntt inside parallel execute computation core instance connects fpga cpu pci bus however colour simplify communication aws axi interface accelerator application aws api communicate accelerator coprocessors axi interconnects polynomial arithmetic arithmetic purpose processor integer float data however data homomorphic encryption polynomial therefore fpga specific memory ram bram polynomial arithmetic computes memory polynomial however ninth physical memory imitates memory zero polynomial zero coefficient zero polynomial useful execute operation addition zero besides polynomial arithmetic functional operation memory detail architecture described subsection chosen parameter compose thirteen prime respectively allows correspond polynomial thirteen coefficient residue polynomial processing parallel arithmetic residue polynomial arithmetic  besides parallelism RNS various advantage hardware flexible placement avoid propagation helpful achieve frequency however disadvantage RNS representation merge coefficient modulo   operation FV scheme RNS enables processing residue polynomial parallel algorithmic parallelism extra parallelism introduce architecture instantiate multiple computation core inside  operation perform  addition multiplication residue polynomial addition already coefficient wise operation parallelize easily multiplication residue polynomial modulo perform ntt polynomial multiplication described ntt calculation  transform ntt parallelize accelerate computation mathematical ntt operation already capture implementation implementation constrain memory access operation data dependency correspond calculation access data data dependent operation annotate butterfly operation algorithm therefore achieve parallelize ntt computation modification algorithm memory access consideration irregular memory access butterfly operation annotate algorithm parallel computation introduce data dependency coefficient bram access factor overcome data dependency operation execute cycle memory location therefore fold parallelism processing polynomial coefficient cycle polynomial memory bram construction memory address coefficient compute coefficient cycle butterfly core processing coefficient memory access scheme enables parallel computation butterfly core scheme described loop dependent index ntt butterfly core introduce complex access parallel execution core complicates difficulty avoid memory access conflict prevention core simultaneous access memory location another difficulty coefficient algorithm memory location access loop variable ntt algorithm creates increase index gap access coefficient loop iteration index gap access memory index loop iteration ntt core gap iteration allows butterfly core access upper memory mention memory construction exclusively memory address respectively core exclusively memory index gap increase core demand simultaneous access memory memory access conflict demand prevent invert memory address request core core access memory upper memory address sequence whereas core access upper memory memory address sequence core access upper memory exclusively effectively avoid memory access conflict loop iteration access described memory butterfly core exclusively upper memory access memory address ntt core dash memory upper implement bram coefficient address various loop iteration ntt access coefficient ntt core respectively  operation described receives polynomial coefficient RNS calculates RQ architecture correspond coefficient wise computation pipelined parallel computation combination parallel computation within RNS hence cycle pipeline apply seventh cycle output successor input predecessor operation pipelined computation seventh cycle input polynomial coefficient RNS data progress pipeline relatively expensive computation parallel execute multiple accumulate mac prefer  optimization advantageous hardware replaces integer operation integer arithmetic operation execute efficiently parallel computation parallel mac parallel implement parallel processing architecture operation replace multiplication reciprocal reciprocal precision however reciprocal zero therefore architecture integer multiplier hardware precision yield approximation error implementation achieve float described architecture receives RNS coefficient RQ input output respectively computation constant cod computation architecture  operation described computation operation execute parallelism pipeline operation computation  pipelining consist mac hardware imaginary equation computation input RNS RNS RNS reuse  operation described previous architecture prefer processing unify operation furthermore processing consist computation core increase throughput architecture dedicate hardware computation decomposition  former operation integrate propose comparison latter implement polynomial arithmetic described without hardware opt transfer  cpu coprocessor instead reserve chip memory efficiency decision depends data transfer capability described implementation implement described HEAWS architecture homomorphic encryption coprocessor dedicate instruction instruction coefficient wise addition multiplication ntt inverse ntt coefficient rearrangement   sequential execution instruction allows homomorphic operation arithmetic ciphertext respect coprocessor domain specific processor architecture fpga amazon aws instantiate coprocessors parallel implementation detail explain offs increase parallel coprocessors maximum frequency hardware software interface homomorphic encryption computation communication centric overhead data transfer across hardware software interface critical role performance computation software hence reduce data transfer overhead hardware accelerator accelerate homomorphic computation chose amazon aws instance target platform instance cpu fpga heterogeneous platform xilinx fpga tightly attach intel cpu bandwidth pcie interface diagram architecture instance instance wrapper aws encapsulate accelerator module partial reconfiguration interface communication hardware software various communication hardware accelerator fpga correspond apis respective software application cpu communication aws perform address mapped communication application accelerator memory access dma accelerator architecture instruction fpga accelerator status software application data transfer input operand accelerator output execute data transfer  facility amazon minimise data transfer overhead opt residue polynomial memory  reading parallel polynomial coefficient align residue polynomial coefficient input output ciphertext polynomial modulo consist RNS hence spar memory structure allows polynomial coefficient residue coefficient address  transfer polynomial memory  memory memory management software application minor improvement data transfer overhead align polynomial modulo mention KiB default linux KiB polynomial modulo consist  mode data transfer burst OS arbitrary memory location hence transfer chunk maximum dma configure scatter mode allows link configuration sequence dma transfer minimum align memory allocation polynomial polynomial exactly structure prevents creation partially occupy eliminates extra transfer related fragmentation consideration improves data transfer ciphertext upto percent parallel instantiation coprocessors another parallel processing hierarchy instantiate multiple parallel coprocessors capable evaluate independent homomorphic operation fpga coprocessors instantiate depends amount available resource target fpga heavily FPGAs memory resource polynomial ntt coefficient implementation benefit generation URAMs extra storage xilinx ultrascale series FPGAs prefer target amazon instance URAMs fpga parallel brams URAMs brams physically therefore instantiation strategy brams odd indexed URAMs indexed coprocessors interleave coprocessors however interleave critical increase rout delay hence avoid interleave achieve frequency construct memory isometric manner URAMs brams within coprocessor  memory described implement upper memory brams URAMs discus impact strategy resource utilization critical delay challenge implement massively parallel hardware accelerator placement module data transfer module easily critical due net delay architecture coprocessors unconnected individual independently however rout implementation IO basically axi interconnect signal extend axi aws farthest coprocessors interface layer register axi interconnects chose performance synthesis strategy configuration user attach multiple axi module data width axi crossbar module instance multiple coprocessor axi aws crossbar data width width input output conversion perform conversion yield extra communication overhead implementation aws already axi data width parallel transfer scheme prefers data accord crossbar instead conversion slows data transfer computation homomorphic multiplication however crossbar costly hardware extend fpga another sweep width crossbar sweet implementation yield coprocessors without decrease frequency FPGAs aws disallows feature hardware development  technique instruction software placement hardware module fpga target FPGAs manual  achieve rout constraint aws fpga performs implicit  option manual  designer tendency hardware module central fpga resource reside unused manual placement coprocessor fpga however uncontrollable placement realize without reduce frequency multiple coprocessors instantiate fpga multiple application accelerate computation simultaneously alternatively application coprocessors although plurality coprocessors useful acceleration computation introduces limitation input output data transfer instance  communicate coprocessors multiplexed manner overhead multiplexed data transfer performance utilisation accelerator architecture HEAWS computation homomorphic addition multiplication accelerator benchmark homomorphic application namely evaluation privacy preserve neural network encrypt data forecasting smart grid application resource utilisation target fpga platform finally comparison performance estimate financial homomorphic compute FPGAs gpus demonstrate performance arithmetic operation maximum frequency accelerator achieves mhz however aws frequency mhz frequency determines axi interface execution homomorphic operation frequency coprocessor homomorphic multiplication operation corresponds multiplication per addition ciphertext transfer execution homomorphic operation amazon aws comparison previous implementation zynq soc measurement coprocessors simultaneously simultaneous execution multiplexing data transfer interface decrease per multiplication performance application parallel thread coprocessor compute homomorphic multiplication loop overhead percent computation due overhead execute multiplication per fpga aws implement service amazon aws compute encrypt data software component service linux comparison previous  without OS zynq soc device availability OS flexibility library instal application development easy moreover application manage resource available disadvantage application cannot directly access hardware interaction OS kernel driver interaction correspond function context switch user kernel although encapsulates overhead achieves minor performance improvement previous improvement mostly outcome HW SW interface benchmarking homomorphic evaluation artificial neural network ann homomorphic computation encrypt data hardware accelerator benchmarked privacy friendly forecasting algorithm smart grid application user consumption forecasting consumption user consumption data however smart grid privacy issue amount data user initiative privacy user smart grid application scenario recently privacy friendly forecasting smart grid FV homomorphic encryption scheme homomorphic multiplication computationally expensive complexity neural network apply data handle simplify activation function neuron network multiplicative depth evaluate target neural network implement library forecasting algorithm  library homomorphic procedure intel laptop software forecast consumption apartment software implementation forecasting algorithm coprocessor accelerate homomorphic multiplication entire implementation amazon aws thread software program executes processor coprocessor fpga software implementation forecasting hardware software codesign homomorphic multiplication compute coprocessor forecasting acceleration feasible coprocessor multithreaded software implementation independent privacy preserve forecasting parallel coprocessors available fpga estimate application parallel processing instance achieve privacy preserve forecasting fpga resource utilisation FPGAs available amazon aws device xilinx virtex ultrascale plenty programmable hardware resource nearly percent reserve already aws hence cannot accelerator fpga resource available implement architecture amount available resource fpga consumption aws entire accelerator coprocessor instance individual resource utilisation sub computation module explain later fpga resource utilisation hardware accelerator homomorphic coprocessors instance aws instance coprocessor instance computation core resource overhead core estimate execution homomorphic multiplication core coprocessor instance computation core resource overhead core estimate execution homomorphic multiplication core coprocessor implementation memory utilisation outcome hardware polynomial storage memory addition memory ntt computation constant precomputed inverse modulus parallel coprocessors availability memory slice fpga implementation coprocessors limited fitting sixth coprocessor URAMs another coprocessor seventh URAMs instead brams coprocessors implementation lower frequency choice architecture configure core  ntt module summarizes resource core estimate execution homomorphic multiplication coprocessor configure instance computation core homomorphic multiplication compute polynomial memory revision instruction execute multiplication revision computes intermediate instead compute memory access later computation revision reduce polynomial memory percent increase homomorphic multiplication extra percent bram percent URAM utilisation instantiate coprocessors fpga estimate parameter estimate resource performance coprocessor parameter assume proportionally parameter  core polynomial coefficient logq parameter individual computation increase resource utilisation yield increase net computation chip data transfer resource utilisation computation estimation various extrapolate parameter security estimation coprocessor parameter estimation coprocessor parameter fpga versus gpu acceleration implement performance FV library target nvidia tesla gpus  data workload consist core GB ram ghz implementation parameter ciphertext modulus performs homomorphic multiplication msec estimate computation increase modulus tesla gpu perform around multiplication per comparison coprocessors achieves multiplication per gpus consumption FPGAs addition timing gpus FPGAs amazon aws accord aws calculator tesla gpu expensive fpga timing financial account fpga accelerator perform nearly per gpu instance remark factor however knowledge comparative price february comparison fpga accelerator literature scarce fpga accelerator target scheme comparison focus  another fpga accelerator implement fold parallel computation hardware optimisation performance homomorphic operation tough prefers approximate compute CKKS scheme resource utilisation intel FPGAs performance dedicate ntt inverse ntt module resource unified return ntt computation polynomial accelerator target FV scheme focus encryption decryption operation handle user local computer aim accelerate homomorphic operation execute expensive operation ntt hence specifically target accelerate ntt algorithm ntt resource coprocessor achieve around faster ntt calculation conclusion programmable performance domain specific architecture HEAWS implement amazon aws fpga accelerate homomorphic compute encrypt data achieve homomorphic evaluation apply specific algorithmic architectural optimization technique computation addition benefit parallel computation hierarchy summary implement instruction coprocessor instantiate amazon aws fpga addition custom HW SW interface transfer polynomial data massively parallel architecture HEAWS attach cpu HEAWS achieves homomorphic multiplication per performance improvement privacy preserve forecasting smart meter application respect software implementation comparison gpu acceleration amazon aws almost computation per