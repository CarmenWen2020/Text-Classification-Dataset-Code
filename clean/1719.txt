continually disclose vulnerability reveal traditional computer architecture lack consideration security article proposes security architecture active security processor asp integrate conventional computer architecture reduce attack asp improve security asp physically isolated computation processor cpu asymmetric address enables asp cpu operating application independently memory furthermore asp privilege super posse advantageous feature asp efficiently access cpu resource multi dimensional information monitor malicious behavior meanwhile cpu cannot access asp private resource instead schedule CPUs asp actively manage security mechanism employ CPUs asp security architecture introduce typical security task asp consideration overhead complexity performance explore typical implementation integrate asp security architecture generation asp implement technology security computer implement evaluation hardware platform demonstrate security architecture effectively minor performance impact compute workload introduction continually discover software hardware vulnerability illustrate significant challenge building secure compute increase complexity operating application attack production processor usually involve multiple vendor security risk meanwhile rapidly upgraded diversified attack challenge security computer seriously critical technique classically computer architecture microarchitecture speculative execution chip cache hierarchy performance improvement security vulnerability channel information leakage recently architecture security mechanism integrate commercial processor intel sgx trustzone trust execution environment tee secure task data logical isolation intel sgx application code operating hypervisor bios firmware compromise however mechanism confirm expose attack vulnerability logical isolation security compute task compute environment resource processor core chip cache bus memory etc secure non secure isolated via switch architectural hardware execution security task affect performance compute task due resource contention logic security specifically conventional microarchitecture vulnerability cache channel predictor channel cache dram attack exist sgx besides recent disclose OS adversary exploit fault channel access channel deduce secret inside sgx enclave intel admit sgx cannot defend information leakage attack vector statistic cache statistic timing access via similarly cache channel predictor channel exploit trustzone logical isolation instead physical isolation consideration implementation actually decade primary goal compute optimize performance security secondary priority performance philosophy series hardware security spectre variant migrate vulnerability sgx trustzone due resource propose security architecture  traditional performance principle within architecture fully security architecture stage comprehensively balance security performance secure performance execution environment security task specifically contribution propose security architecture considers security citizen requirement stage addition traditional compute CPUs security architecture introduces processor dedicate security task active security processor asp thats traditional cpu responsible compute task security mechanism independently asp cpu asp private resource memory disk network device operating application architecture adopts asymmetric address realize unidirectional isolation cpu asp super permission possess asp enables efficiently access cpu resource cannot disabled compute cpu meanwhile cpu access asp resource typical security mechanism asp detail detection malicious behavior active trust compute active interference security consideration security mechanism elaborate asp protects cpu malicious attack asp implementation explore generation implementation adopts chip implement technology security computer implement evaluation hardware platform demonstrate security mechanism asp effectively security compute environment performance impact compute task negligible threat model security challenge address concept security architecture introduce introduces implementation asp evaluation analysis related concludes threat model security challenge threat model assume compute cpu software stack totally insecure component application operating firmware cpu hardware exploit user trust privileged cpu compute subsystem asp security subsystem privileged cpu subsystem besides adversary attack replace hardware cpu disk security challenge address hardware software vulnerability inevitable challenge secure computer priority issue ensure security efficiency flexibility security mechanism attack defense challenge building secure analyze secure execution environment security mechanism avoid security risk attack due logical isolation security mechanism bypass due lack initiative secure computer execution environment security mechanism access accurate efficient security mechanism secure computer balance accuracy efficiency minimize impact security mechanism compute environment furthermore deployment security mechanism reduce avoid modification compute processor finally security subsystem flexible programmable attack defense iterate security mechanism independent security subsystem guarantee efficient execution diverse security task scalability programmability addition security subsystem efficient secure upgrade security architecture overview philosophy built security computer security jointly chip architectural phase comprehensively balance performance security physical isolation secure logical isolation secure physically isolated insecure avail minimal attack security mechanism access privilege proactive minimum performance impact compute task illustrates propose security architecture feature overview security architecture security computation decouple besides traditional CPUs security architecture introduces active security processor  computer computer consists cpu compute subsystem asp security subsystem within security architecture subsystem hardware software stack OS application typical implementation cpu normal compute task asp audit security mechanism secure boot dynamic integrity measurement malicious behavior analysis worth asp mechanism sgx enclave sensitive code data compute task asp however asp usage cannot guarantee security code arbitrary compute task existence code data specific security mechanism asp security challenge adopt asymmetric address realize unidirectional physical isolation analyze logical isolation compute subsystem security subsystem attack due resource therefore propose security architecture adopts unidirectional physical isolation security citizen requirement computer built security architecture asymmetric address indicates subsystem private hardware resource memory disk IO device individual OS application memory asp efficiently access specify microarchitecture memory device cpu cpu cannot access private resource asp unidirectional isolation implement asymmetric address effectively reduces attack improves security asp privilege super privilege feature asp integrity firmware operating user critical application execute cpu asp stack information compute subsystem important architectural microarchitectural module inject dynamically configure hardware module response security risk detect capability disabled software cpu realization feature cpu specifically internal bus collection operation issue asp correspond hardware module cpu expose asp dynamic configuration instance agent embed module cpu microarchitectural information chip preprocessing compress valuable information filter sends asp analysis actually exist commercial processor chip chip fabric chip debug trace collection bus leveraged furthermore interconnection asp access memory device compute subsystem active security processor asp asp critical component security architecture secure environment trust security task task highly diversified usually performance requirement processor core asp purpose processor core heterogeneous architecture requirement purpose processor core flexibility domain specific accelerator cryptography AI accelerator significantly improve efficiency security subsystem built security computer independent processor asp memory device cpu environment asymmetric memory security task trust via audit load asp subsystem approach OS complex standard linux therefore OS asp simplify version linux posse feature security mechanism furthermore formal verification improve security another functionality asp analyze traffic compute subsystem essence asp serf bridge device cpu compute subsystem request related data access violates specify asp discard transaction introduction asp concept actually practical implementation chip integrate cpu chip IP attach chip fabric explores asp implementation typical security mechanism asp introduces typical scenario deploy security task asp scenario active online detection malicious behavior malicious behavior usually capture active online detection memory rootkit detection GPRs malware detection elaborate mechanism active online malicious behavior detection rootkit attack usually tamper critical kernel structure task struct operating hide hijack execution kernel function function maliciously task struct linux kernel hide besides tamper replace function malicious function elaborate attacker typical attack approach rootkits active detection module asp capture rootkit attack compute subsystem memory content critical kernel data structure compute subsystem periodically detect activity rootkit attack active detection scheme mainly contains module overview active detection rootkit attack semantics reconstruction data extract directly memory binary format without semantic information propose reconstruct semantic information pure binary byte address normal computation kernel load kernel offset kernel function kernel data mention semantics reconstruction module kernel function address function sum kernel associate offset active detection module reconstruct kernel structure semantics information active detection module structure actively detect potential threat adversary initiate hook attack load malicious kernel module rootkit tamper quickly detect active detection model integrity static kernel structure detection interval important factor degrade performance attack therefore impact detection frequency investigate evaluation detection task independent asp subsystem minimum performance impact exist detection measurement module active detection module periodically monitor critical structure normal computation subsystem extract binary data submits binary data measurement structure measurement module calculate measurement verify integrity kernel structure attack response module integrity submit attack response module measurement module verifies kernel structure tamper attack response module conduct associate defense strategy compute subsystem another online detection mechanism asp identify malware cpu subsystem analyze spatial temporal purpose register GPRs cpu chip component depth data collection automatically multiple architectural microarchitectural feature opcode feature feature GPRs feature data detection model  traditional mechanism information collection restriction technique manual operation besides specialize extract opcode information automatic data collection automatically effectively extract GPRs content microarchitectural sub sample mechanism pre GPRs feature depth data collection module prior illustrates opcode feature existence opcodes frequency opcodes difference effective malicious behaviour detection temporal statistic input feature spatial temporal propriety GPRs apply malware detection GPRs utilized input feature malware detection model GPRs translate numeric sample directly input classification model active malware detection model exploit spatial temporal GPRs active malware detection model exploit spatial temporal GPRs malware detection adopts combine model jointly convolution neural network cnns memory lstms illegal behaviour sample architecture propose  model input series sub sample cnns abstract spatial correlation GPRs fuse information layer lstm encode sequential information temporal correlation detection rootkit detection submit attack response module associate defense action trigger scenario active trust compute traditional trust compute limitation trust trust platform module tpm chip invoked cpu therefore computer compromise trust measurement bypass measurement fails detect dynamic therefore researcher propose active integrity measurement integrity statically dynamically static trust measurement perform computer software application execute maintain integrity static chain trust operating kernel library application execution computer perform dynamic trust measurement measurement task asp model initiate integrity measurement establish trust chain compose multiple trust dependency scenario active interference application microarchitecture behavior hardware usually policy observable opportunity attacker relevant microarchitecture behavior cache ratio attacker infer victim secret via channel information leakage addition deterministic behavior micro architecture component predictor attacker maliciously induce victim transmit secret various covert channel within security architecture asp actively cpu non deterministic execute brings attacker sneak cache adversary evict target cache conflict eviction monitor cache subsequent cache access issue victim recent research confirm effective defend attack randomize address mapping hardware leverage cryptography hash function randomize index mechanism dynamically remaps layout inside cache prevent attacker exploit cache eviction viable channel trust computer asp randomize cpu cache layout dynamically configure random related flush logic inside cpu cache asp determines enable disable cache layout randomization random cache layout update hash random adjust index action asp accord specify security policy cpu randomizes hash remap cache index asp manage random index cache compute xoring randomize hash deterministic index generate cache layout completely unknown adversary randomize layout construct definitive eviction channel attack moreover asp manage random software cpu access random protects mechanism comprise random cache mapping asp  exploration built security computer asp asp implement additional IP module chipset extra core processor chip processor chip combination chip agent chip chip philosophy security architecture reflect consideration overhead complexity performance candidate mention chip implementation advantage density integration efficient data collection expensive modify cpu chiplet chip meanwhile chip scheme applicability independence integrate asp chipset asp entry chipset integrate IP attach exist chip fabric chipset implementation convenient asp analyze traffic effectively shutdown channel request principle asymmetric memory asp memory disk device embed dma scan memory compute subsystem however chipset already complex internal architecture contains chip rout fabric controller various device increase pin bound chip memory bandwidth asp possibly limited intel borrows memory cpu introduces security risk implement asp chipset integrate asp inside cpu chip asp integrate cpu chip extra core efficient asp monitor analyze chip micro architecture behavior cpu chip monitoring enables timely identification response elusive attack malicious behavior avoids transfer amount behavior data outside chip asp utilized extra IP performance memory bandwidth limitation chipset implementation implement asp inside cpu implement asp chip depict asp deployed chip asp resource monitor cpu chip request granularity cpu micro architectural option implementation enables asymmetric memory bandwidth asp additional hardware accelerator improve efficiency security task online realtime neural network task boost additional AI accelerator greatly enhance ability monitoring recognize elusive attack implement asp chip chip chip combine implementation improve efficiency cpu asp collaborate collection analysis scenario analysis amount runtime information cpu instruction trace scan memory reasonable approach embed correspond proxy module cpu information quickly chip asp approach avoids cpu modification facilitate collection various runtime information asp issue configuration command inject module cpu cpu hardware addition physical isolation cpu asp module embed cpu chip cannot modify cpu software evaluation analysis methodology platform built security computer cpu asp generation asp chip consists processor core active pcie interface memory controller electrical fuse  interface spi UART etc asp chip implement leakage chip layout parameter built security computer built asp chip intel core purpose processor asp commercial intel processor via pcie bus illustrate detailed configuration summarize parameter asp chip parameter asp chip built security computer intel core asp chip platform built security computer intel core asp chip platform combine implementation asp combine implementation asp asp chip asp chip built security computer asp intel core processor platform built security computer asp intel core processor platform functionality asp chip unidirectional isolation enable internal active pcie interface module bridge cpu asp responsible data exchange filter component generic pcie interface address translation module isolation logic specifically generic pcie interface handle pcie inbound outbound traffic cpu asp address translation module consists inbound address filter  outbound address transformation  request initiate cpu dot untrusted filter  filter raw data hardware isolation logic contrast request initiate asp trust dot transform  accord specific address mapping pcie cpu memory hardware isolation logic compose memory equivalent interval multiplexing  memory exchange filter trust message cpu security functional message initiate asp equivalent access technology  guarantee access memory request nearly constant mitigates timing channel cpu asp cooperation generic pcie interface address translation module hardware isolation logic security enhancement achieve asp chip actively initiate access request cpu memory without participation cpu cpu dma asymmetric address enable asp cpu asp access cpu resource memory traffic cpu access limited memory expose hardware isolation logic cannot access asp private resource local memory therefore physical separation asp chip active pcie interface secure execution environment security task secure strength traditional software isolation platform gem simulator commercial processor active interference evaluate performance cycle accurate simulator gem evaluation platform specific configuration gem simulator modify cache layout randomization mechanism recent reveal security mechanism frequent update evict correspond dirty cache asp access behavior cache reset flush within specific timing threshold default experimental scenario platform gem simulator configuration platform benchmark performance evaluation hardware platform evaluate performance impact classic compute benchmark spec cpu reference input  spec cpu standardize benchmark suite performance evaluation  evaluate performance thread multi thread task sustainable memory bandwidth correspond computation rate vector kernel construct scenario imitate deployment security compute task scenario simulates chip asp implementation llc chip fabric cpu core scenario security task allocate core cpu compute benchmark core core scenario scenario target propose chip asp implementation scenario compute benchmark core differently security task asp chip scenario security task scenario platform gem simulator spec cpu benchmark input evaluate performance cache randomization manage chip asp security evaluation platform typical attack scenario construct evaluate mechanism rootkit detection inject bios trojan startup maliciously modify file rootkits kernel malware without obvious characteristic malware detection model performs confront completely malware non signature involve multiple malware maker    non signature malwares positive sample release  additionally malware virus maker pack ultimate collection generate another non signature positive furthermore another benign sample sourceforge malware negative  model popular antivirus software   nod kaspersky non signature performance evaluation performance impact active trust compute active memory monitoring security task investigate performance impact asp implementation compute workload analyze specifically performance scenario described platform performance chip asp scenario baseline scenario indicates chip asp interfere compute workload however chip asp scenario observable performance interference compute workload  average performance impact chip asp compute workload percent performance impact chip asp percent performance impact active trust compute platform performance impact active trust compute platform understand performance difference intel vtune profiler microarchitecture behavior implementation chip llc cache competition important simulated chip asp cache llc cpu core dynamic memory monitoring generates frequent chip memory request llc rate frequent access traffic interfere compute workload due llc contention describes llc bound indicates cpu stall llc cache contend sibling core implementation chip asp performance degradation due llc resource contention chip asp implementation LLCs cpu compete chip fabric memory controller frequent access interfere computation intensive workload cache contention cache contention performance evaluation active interference demonstrates minimum impact active interference cache address randomization performance loss percent performance speedup performance mcf lbm improve percent cache conflict cache layout randomization performance evaluation asp cache randomization platform performance evaluation asp cache randomization platform understand performance impact MPKI MPKI icache cache dcache MPKI loss percent average exceptional astar sjeng MPKI dcache decrease significantly cache MPKI overhead memory bound benchmark libquantum mcf lbm soplex percent abnormal overhead astar hmmer gromacs sphinx MPKI cache abnormal overhead variation MPKI evaluation security task asp rootkits detection active memory monitoring source antivirus software rootkit detection software detection capability asp active memory monitoring mechanism verify source antivirus software clamav  antivirus  antivirus linux source rootkit detection software    typical rootkits detection target     rootkit     detailed comparison summarize rootkits detection platform conventional rootkits detection software usually signature exist rootkits generally detect specific behavior attack fails variant rootkits contrast propose active memory monitoring effectively detect various rootkits accurately program rootkits infer potential attack significantly enhance security evaluate detection interval  popular performance evaluation investigate aspect operation context switch communication compute file operation evaluation baseline disable active memory monitoring indicates dynamical measurement trigger detection interval almost negligible impact performance normal compute task cpu measurement module physically asp subsystem overhead asp measurement frequency detection interval evaluation detection interval malware detection content GPRs utilize microarchitecture feature processor detect malicious behavior mainly GPRs malicious program obtain malicious program identify analyze GPRs via classification algorithm anti virus software malware detection performance anti virus software specifically however anti virus software identify generate sample generate sample zero unknown malware generate executable file virustotal website anti virus report none anti virus newly generate file malicious  model accurately identify non signature malware instance accuracy  fpr generate indicates malicious program recognition technology GPRs micro architecture feature effectively detect malicious program evaluation detect non signature malware platform security analysis threat model assumes adversary privilege CPUs security computer depends factor ability  detect potential malware ability prevent  compromise factor asp performs static trust measurement phase secure boot dynamically memory data structure kernel computer factor adopt security enhancement architecture asymmetric address realize unidirectional isolation compromise CPUs access asp resource anyway furthermore interference circuit asp chip resist leakage software  technique encryption signature verification guarantee integrity software security mechanism additionally OS asp customize security verification formal methodology future related hardware tee trust execution environment promising approach secure execution trustzone deployed processor secure non secure physical core sensitive non sensitive respectively switch manage security monitor increase identity data secure non secure distinguish data secure inaccessible non secure software guard extension sgx propose intel isolates secure enclave sensitive processing normal untrusted execution environment hardware software operating program outside enclave access data directly within enclave however sgx trustzone secure enclave non secure microarchitecture attacker opportunity steal sensitive information channel attack  attack exploit predictor cache hierarchy concept enclave enhance mechanism propose private environment security code data compute program sanctum protects secret enclave cache timing attack software isolation minimal hardware enclave entry exit MI isolation sanctum statically distribute memory resource flush temporally per core private resource  deduces performance overhead flush mechanism dynamic hardware allocation inter communication ipc multicore processor mechanism focus secure compute environment security subsystem asp security task code data compute task furthermore adopts asymmetric address realize unidirectional isolation cpu asp trust platform module propose trust compute TCG employ dedicate processor trust responsible secret related function nevertheless security capability mechanism limited management intel processor platform security processor amd processor employ dedicate weak processor security task secure boot remote reboot etc however mechanism resource compute instance reserve memory compute intel processor furthermore vulnerability intel amd psp secure boot bypass psp secure version firmware attacker non secure status propose concept security architecture extension security task asp refine active trust compute AI malware detection GPRs active interference etc microarchitecture asp chip active pcie interface unidirectional isolation introduce detail realistic built security computer integrate asp chip introduce performance evaluation investigate platform finally security asp analyze detection accuracy rootkit attack addition exist hardware assist security mechanism propose defend specific attack integrity hardware assist mechanism prevent return orient program rop orient program  attack mapping relationship employ partition architecture cache channel attack prevent speculative execution channel attack defend identify suspicious instruction speculative execution prevent secret dependent trace microarchitecture security mechanism effectively combine propose security architecture specifically mechanism deployed cpu core chip cache hierarchy management module deployed asp conclusion continually disclose vulnerability reveal traditional computer architecture lack consideration security propose security architecture considers security citizen requirement stage addition traditional compute CPUs security architecture introduces processor dedicate security task active security processor thats traditional cpu responsible compute task security mechanism independently asp cpu asp private resource memory disk network device operating application architecture adopts asymmetric address realize unidirectional isolation cpu asp super permission possess asp enables efficiently access cpu resource cannot disabled compute cpu meanwhile cpu access asp resource generation asp implement technology secure computer implement evaluation hardware platform demonstrate security mechanism asp effectively protects security compute environment performance impact compute task minimal