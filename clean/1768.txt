multi core architecture enable data increasingly multiple improve resource utilization operational unfortunately naively multiple modest increase throughput user proportionally performance degradation user physical multi core satori novel strategy partition multi core architectural resource achieve conflict goal simultaneously increase throughput achieve fairness introduction background workload chip multiprocessor  attractive approach compute service provider enables improve resource utilization operational data location workload likely yield benefit future data continuously increase  workload workload naturally suitable location strict latency requirement location workload potentially increase throughput unfairness user workload proportionally performance degradation others interference location execution consequently prior research attempt optimize throughput focus achieve fairness however achieve goal throughput fairness simultaneously workload challenge throughput fairness fundamentally conflict goal provider throughput fairness prefer user optimize compromise discus exist approach useful achieve potential optimal multi objective challenge exist approach gap difficulty achieve optimality stem significant challenge complexity multiple architectural perform unprecedented around peak covid pandemic conduct scientific responder essential worker  community function grateful effort dedicate memory responder essential worker sacrifice resource cache memory etc runtime towards optimization goal throughput  conflict goal simultaneously runtime throughput fairness unfair throughput undesirable user disproportionate slowdown incorrect resource usage delay scientific discovery user indirect monetary loss fairness quantify widely fairness index jain fairness index capture similarity performance degradation location execution sec II relatively scenario multiple cmp machine resource cache aim improve goal throughput prior practical recent dCAT cache llc allocation dynamically workload achieve throughput core intuition ass relative utility additional resource performance approach classifies donor others receiver improve throughput resource memory bandwidth challenge previous CoPart  PARTIES demonstrate approach optimize partition multiple resource approach partition individual resource separately decision communicate global optimal resource partition CoPart maintains finite machine FSM cache memory bandwidth FSMs joint link aware decision approach partition individual resource perform dimension gradient descent  PARTIES recent resource partition strategy perform resource partition gradient descent style partition resource explore adjust allocation resource CoPart multiple resource unlike PARTIES  multiple resource however source sub optimality approach explore partition multiple resource simultaneously joint exploration multiple resource simultaneously benefit increase resource UI OOVBM  PNQVUFS SDIJUFDUVSF acm annual international symposium computer architecture isca doi isca allocation realize fully allocation resource appropriately resize explosion sec II finally optimize goal compound challenge goal conflict goal improve throughput fairness prior optimize fairness throughput resort target goal effort improvement CoPart focus improve fairness demonstrates throughput hurt baseline  partition resource effectively balance conflict goal online challenge experimental evidence sec II satori contribution evaluation satori actively throughput fairness goal simultaneously multiple workload cmp machine multiple architectural resource satori proposes exist gap optimality approach satori develops approach bayesian optimization BO theory intelligently explore multi resource partition configuration satori BO approach enables practically feasible technique online fashion intuition BO accurate model optimal without offline profile instrumentation offline reinforcement training building complex performance model incur overhead portable situation upon offline training dataset evaluation confirms tolerate slight inaccuracy model allows satori achieve  configuration online fashion satori enables efficient navigation configuration optimal resource partition configuration sec performs joint exploration multiple resource simultaneously remove limitation exist approach maintain finite machine resource explore resource dimension vital novel insight discover beneficial goal another temporarily achieve return goal sec exploit observation satori intelligently prioritizes goal basis strike balance goal basis knowledge satori exploit unfortunately dynamic prioritization goal objective function optimize hence becomes challenge ineffective apply BO address challenge satori implement enhancement dynamically separately monitor throughput fairness indicator construct overall combine BO objective function target multiple goal objective function successfully prioritization goal maintain behavior traditional BO bound magnitude dynamic prioritization goal sec inherent satori suitable additional concurrent optimization goal satori evaluation demonstrates effectiveness across scenario parallel workload throughput satori outperforms recent workload location technique dCAT CoPart PARTIES respectively achieve fairness respectively satori performs within offline practically infeasible oracle scheme satori complementary potentially combine recent target approach economics resource multiplexing machine satori available http github com  satori II  CHALLENGES  multi goal SHARED resource partitioning cmp server consist multiple resource across workload core llc memory bandwidth chip manufacture mechanism partition resource workload dynamically configurable intel mba RAPL previous leverage capability partition resource concurrently workload analyze characterization define resource partition configuration simply configuration refers architectural resource resource core core llc cache per configuration define permutation resource allocation available resource configuration core core cache per cache per throughput fairness objective express multiple metric described metric advantage widely various maximize throughput fairness optimize chosen metric throughput express multiple metric express geometric speedup baseline isolation performance speedup express harmonic ups sum instruction per fairness similarity performance express multiple metric jain fairness index metric fairness cov cov coefficient variation standard deviation speedup baseline isolation performance standard deviation speedup speedup hence treat highly fairly cov fairness index cov optimal throughput configuration blackscholes freqmine canneal streamcluster fluidanimate core llc mem configuration achieves optimal throughput significantly frequently architectural resource core llc mem fairness oracle throughput oracle blackscholes freqmine canneal streamcluster fluidanimate optimal configuration throughput fairness significantly fairness another fairness metric cov evaluates perfect fairness negative unfairness optimal configuration configuration unfortunately configuration grows prohibitively resource increase formally suppose  resource  rth resource  resource configuration express     resource core memory bandwidth resource configuration increase configuration grows simply resource increase configuration optimal configuration remain understand magnitude challenge tracked optimal resource configuration architectural resource core  cache memory bandwidth optimal resource partition obtain via exhaustive offline configuration maximize throughput optimal configuration throughput consist parsec benchmark suite evaluation methodology detail sec IV configuration achieve optimal throughput essence program phase phase sensitivity architectural resource unfortunately explore optimal resource partition configuration exhaustive optimal configuration fairness varies dynamically significantly brevity observation architectural resource partition configuration grows prohibitively architectural resource increase optimal resource partition configuration challenge frequently demonstrates difference optimal configuration conflict goal execution configuration significantly goal difference employ throughput optimize configuration achieves fairness obtain fairness optimize resource partition similarly fairness optimize resource partition achieves throughput obtain throughput optimize resource partition hypothesize average optimal resource partition configuration goal perform reasonably goal compromise obtain average optimal configuration practically infeasible obtain exhaustive offline obtain optimal configuration goal separately hypothetically assume optimal configuration available instantaneously oracle knowledge derive average optimal configuration performs poorly aspect achieves oracle throughput oracle fairness observation optimal resource partition configuration conflict goal throughput fairness resource partition configuration strike balance conflict goal challenge alternative intuitive strike balance throughput fairness optimize throughput optimize fairness although hypothetically assume optimal resource partition configuration available instantaneously reveal approach significantly sub optimal achieve oracle throughput oracle fairness slight improvement previous average optimal resource partition fundamental opportunity difficulty balance throughput fairness easy obtain throughput temporary sacrifice fairness later becomes easy obtain fairness temporary sacrifice throughput net gain goal another intuition exploration optimal configuration throughput fairness respective contribution throughput fairness remain static opportunity throughput fairness diff perf diff perf diff perf diff perf exists opportunity balance conflict goal throughput fairness emphasis goal temporarily trading goal another difference throughput obtain sample configuration correspond difference fairness sample configuration quantifies metric sample configuration methodology choice configuration simplicity evidence observation configuration percentage difference throughput configuration however correspond difference fairness configuration direction suggests prioritizes throughput prioritizes fairness net gain fairness without sacrifice throughput net gain throughput without sacrifice fairness selectively prioritize goal observation opportunity balance conflict goal prioritize goal duration vice versa another yield benefit satori insight finding satori implementation satori leverage bayesian optimization BO efficiently navigate optimal partition configuration sec discus detail summary BO overhead proxy model predict performance configuration sample acquisition function directs BO sample evaluate principled intelligent exploration BO underlie proxy model wholly accurate becomes iteratively accurate suitable online employ proxy model underneath navigate configuration acquisition function allows satori adjust partition multiple resource simultaneously satori carefully construct objective function incorporates achieve multiple goal throughput fairness satori objective function carefully satori prioritize goal another temporarily exploit opportunity balance conflict goal configurable finally satori objective function extensible additional goal efficiency BO exploration optimizes objective function optimal configuration notably satori programmer hint recompilation architecture instrumentation satori deployed readily platform hardware architectural resource partition available satori employ bayesian optimization efficient exploration BO theoretically maximize objective function BO relationship input objective function BO incorporates prior belief objective function query multiple develops posterior approximates traditionally optimization aim input maximizes objective function minimum query mathematically BO express argmax context satori input objective function resource partition configuration allocates resource resource partition configuration comprise refer sample objective function unknown satori relationship input configuration objective function function express relationship configuration correspond outcome throughput fairness however satori evaluate objective function input resource partition configuration configuration performance objective function indicates quality merit throughput fairness however unlike traditional optimization maximize objective function satori careful construction objective function due dynamically objective dynamic prioritization multiple goal aspect satori correspond later sec satori BO optimal objective function function evaluation minimum configuration identify global optimum objective function BO intelligently explores evaluate objective function input sample configuration explores sample stochastic model unknown objective function update knowledge identify sample evaluate global optimum component enable proxy model acquisition function BO proxy model stochastically estimate performance configuration stochastic model improve iteratively exploration sample configuration objective function predictive model confidence interval predictive model acquisition function exploration exploitation exploration BC application core llc mem configuration denote refers application resource resource visual depiction bayesian optimization BO component configuration objective function proxy model acquisition function algorithm satori BO algorithm input initial resource configuration sinit sinit throughput fairness baseline isolation performance generate objective function detail sec update proxy model compute acquisition function optimize sample evaluate configuration throughput fairness exist reset interval reset baseline  isolation performance sample snapshot BO execution exploration already sample BO estimate predict proxy model proxy model predicts non sample consists predict variance variance capture model uncertainty satori chooses gaussian GP proxy model sample configuration uncertainty gaussian normal distribution define standard deviation uncertainty satori  covariance kernel GP proxy model BO steer global optimum sample promising BO acquisition function direction exploration acquisition function dictate configuration sample BO closer perform sample acquisition function return non sample stage mostly acquisition function BO explore neighborhood strike balance exploration explore configuration significant uncertainty exploitation exploit vicinity neighborhood predict proxy model satori chooses improvement EI acquisition function reasonable balance exploration exploitation evaluation sample proxy model update acquisition function evaluate sample iterative satori summarize algorithm sinit refers initial resource configuration available resource equally workload construct satori objective function unlike traditional BO implementation evaluate objective function return runtime maximize minimize satori balance multiple goal throughput fairness decision configuration evaluate satori ass goodness configuration evaluate duration configuration satori objective function performance assign configuration resource partition configuration function satori direction configuration achieve effectively objective function treat goal equally comparable unfortunately goal calculate formula instance fairness calculate cov cov coefficient variance speedup respective baseline isolation performance fairness metric bound normalize obtain satori configurable goal therefore objective function express  WT WF WT throughput WF fairness evaluate configuration however objective function configurable reduce goal throughput extend goal objective function configure runtime recall dynamic balance exploit opportunity temporary prioritization detail sec BO WT WF however traditional BO cannot optimizes non  objective function traditional BO optimizes static objective function configuration sample sample sample however satori objective function already sample throughput fairness objective function construct accordingly traditional BO however throughput fairness objective function reconstruct accordingly traditional BO objective function BO sample already sample configuration reconstruct proxy model objective function however incurs overhead configuration sample iteration prohibitively infeasible online combat satori employ novel technique maintains configuration dependent objective function configuration sample configuration traditional bayesian optimization satori bayesian optimization throughput fairness objective function configuration sample configuration satori maintains throughput fairness performance construct objective function iteration dynamic performance conflict goal benefit strategy multi fold reduction overhead objective function reconstruction significant instead sample configuration enables exist goal specific perform software reconstruction proxy model slightly overhead simply update proxy model traditional BO evaluation sec overhead interfere execution performance gain outweighs overhead significantly approach satori portable customizable extensible multiple objective without user cod effort goal weigh independently discus dynamically balance throughput fairness dynamic prioritization goal satori satori delivers performance dynamically priority throughput fairness however ensure throughput fairness achieve priority sec achieve average throughput fairness satori equalization TE throughput fairness average moreover satori shorter prioritization TP prioritize goal therefore throughput fairness component equalization prioritization purpose equalization equalize accord imbalance throughput fairness equalization instance throughput equalization decrease equalization approach therefore satori assigns WT  WF       throughput fairness ΔT ΔF throughput fairness ΔT ΔF update throughput fairness accord WTP    WTP    update throughput fairness accord WTP  dominant   WTP    prioritization improvement throughput fairness performance prioritization equalization dominant equalization WT WF equalization throughput fairness amount elapse equalization   throughput fairness iteration discretized interval configure implementation hence summation equalization amount elapse previous equalization prioritization percent throughput fairness prioritization intuitively prioritization throughput fairness adjust fairness throughput goal achieve previous prioritization fairness priority previous successfully utilized opportunity throughput opportunity interval vice versa therefore satori assigns prioritization WT ΔF ΔT ΔF WF ΔT ΔT ΔF WT WF prioritization throughput fairness ΔT ΔF improvement throughput fairness prioritization TP evidently improvement fairness ΔF previous prioritization prioritization throughput WT constant satori limit prioritization completely  goal unstable fluctuation sample interval another perform objective reasonably effective underperform chosen approximately summarize equalization depends along satori within equalization contrast prioritization depends improvement throughput fairness prioritization task combine equalization prioritization generate throughput WT fairness WF combine requirement gradually increase importance equalization equalization approach ensure average maintain ensures neither fairness throughput demonstrate equation WT TE WT TE WT WF TE WF TE WF influence equalization component linearly increase equalization approach linear increase oppose increase exponential ensure equalization component completely  temporary prioritization opportunity adequately exploit aware phase workload satori reset baseline equalization isolated performance workload phase workload satori initialization adaptively configures optimal configuration satori  previously sample configuration evaluation upon phase workload reacts program phase evaluation confirms sec implication dynamically objective function satori satori construct objective function exploit temporal opportunity maximize compete goal dynamic prioritization dynamically factor however naturally BO strategy choice traditional BO approach goal affect satori belief subsequent decision ensure deviation bound satori upper bound factor respectively equalization prioritization bound evaluation sec effective BO traditionally behavior maximize objective function hence achieve performance satori predicts promising configuration evaluate predict improvement configuration directly instead configuration indeed evaluate previous configuration evaluation therefore  perception underlie BO proxy model affect function correctness evaluation sec confirms variation performance satori satori without dynamic prioritization achieve average performance performance remains stable satori without dynamic prioritization unless phase related characteristic workload finally satori workload instead satori workload IV experimental methodology testbed implementation conduct intel xeon scalable platform skylake parsec benchmark blackscholes option pricing scholes partial differential canneal simulated cache aware anneal optimize chip fluidanimate fluid dynamic animation smooth freqmine frequent itemset mining streamcluster online cluster input swaptions pricing portfolio swaptions II cloudsuite benchmark data analytics naive bayes classifier wikipedia entry graph analytics rank twitter data memory analytics memory filter movie rating medium nginx server video web web algorithm implementation processor server physical core hyperthreading thermal turbo boost cache satori logic implement lightweight python monitoring service leverage  performance user intervention profile additional hardware deployable user software satori  core affinity intel cache allocation technology llc cache assignment intel memory bandwidth allocation mba feature memory bandwidth partition via model specific register MSRs satori monitoring decision characterize overhead sec instruction per IPS workload  sample rate methodological pitfall associate IPS due synchronization avoid multi thread workload  methodology instruction partition  partition employ confirm methodological choice negatively affect conclusion default metric jain fairness index sum instruction per compete technique evaluation confirm satori improvement compete technique commonly objective metric core insight satori metric dependent workload specific behavior satori implement   distribute hyperparameter optimization library online evaluation isolated performance workload perform baseline measurement throughput fairness prioritization equalization configure respectively default trend sec workload satori evaluate representative parallel throughput orient workload chosen parsec benchmark suite additionally demonstrate effectiveness satori diverse workload satori evaluate benchmark cloudsuite benchmark suite exascale compute project ECP benchmark suite II unless otherwise mention correspond parsec suite satori evaluate combination application workload parsec workload chosen ECP benchmark minife unstructured finite solver xsbench computational kernel monte carlo   fourier transform   code  parallel algebraic multigrid solver linear  scalable linear solver multigrid workload configuration relatively location chosen challenge situation satori optimization workload cloudsuite workload II ECP workload respectively chosen workload configuration benchmark suite satori underlie BO scheme update resource allocation configuration compete resource partition policy performance satori policy random random sample configuration stochastically configuration uniform distribution without repetition sample configuration update dCAT improves throughput dynamically partition resource cache CoPart primarily focus improve fairness partition resource cache memory bandwidth FSMs resource PARTIES primarily target achieve quality service qos multiple latency critical workload PARTIES meeting qos target latency critical consequential caveat PARTIES necessarily perform situation however PARTIES evaluation core PARTIES partition resource gradient descent gradient descent apply resource partition throughput orient workload via iteratively optimize throughput optimal resource partition configuration although originally apply context latency critical workload evaluation confirms promise gradient descent context however adjustment simultaneously optimize throughput fairness modify PARTIES maximize throughput fairness priority brute oracle oracle refers brute offline strategy sample configuration selects maximizes goal combination goal calculate account phase II oracle strategy variant throughput oracle solely maximizes throughput ignores fairness goal WT WF fairness oracle solely maximizes fairness ignores throughput goal WT WF balance oracle priority maximize random dCAT CoPART PARTIES satori throughput satori throughput oracle throughput balance oracle throughput random dCAT CoPART PARTIES satori fairness satori fairness oracle fairness balance oracle fairness satori achieves throughput fairness technique average across parsec benchmark throughput fairness WT WF strategy ceiling satori aim maximize throughput fairness therefore balance oracle distance theoretical optimal throughput fairness satori satori dynamically WT WF runtime maintain balance conflict goal maximize throughput fairness throughput satori refers specific variant satori WT WF maximize throughput fairness satori refers specific variant satori WT WF maximize fairness variant evaluate analyze quantify limit satori optimize goal evaluation RESULTS analysis satori actively achieves throughput fairness goal simultaneously satori optimal throughput fairness significant improvement compete technique quantifies performance technique average consist percentage performance balance oracle observation satori outperforms compete technique perform technique PARTIES throughput fairness notably satori achieves throughput fairness balance oracle throughput satori throughput goal throughput satori throughput obtain satori focus goal ideal throughput oracle satori configure maximize goal achieve throughput throughput oracle trend fairness finally random policy performs dCAT CoPart PARTIES confirms intuition multiple resource actively achieves performance CoPart dCAT gradient descent approach PARTIES useful improve throughput fairness metric dig deeper quantify effectiveness satori individual plot throughput fairness individually satori performance compete technique consistently throughput fairness satori throughput fairness ID throughput balance oracle random dCAT CoPART PARTIES satori throughput ID fairness balance oracle random dCAT CoPART PARTIES satori fairness satori achieves throughput fairness technique parsec benchmark sort ascend satori performance ID speedup perform balance oracle random dCAT CoPART PARTIES satori speedup per random dCAT CoPART PARTIES satori speedup perform balance oracle average perform performs satori technique across average technique PARTIES compete technique  performs satori technique average achieve balance oracle performance benefit satori dependent specific characteristic specific workload cpu intensive memory intensive cache sensitive etc satori effectively across variety workload analyze variation satori benefit across consist canneal freqmine streamcluster swaptions vip parsec benchmark suite throughput gain replace freqmine fluidanimate throughput gain compute resource core sensitivity fluidanimate animation fluid particle another canneal freqmine streamcluster swaptions vip throughput gain however replace swaptions streamcluster blackscholes fluidanimate throughput gain blackscholes fluidanimate contend resource memory bandwidth effectiveness satori across workload evaluate cloudsuite ECP benchmark performance trend satori significantly outperforms compete technique consistently outperforms across benchmark cloudsuite ECP benchmark chosen diverse workload beyond parsec benchmark data analytics kernel graph algorithm scientific compute application linear solver physical simulation kernel satori consistent improvement throughput fairness cloudsuite ECP benchmark suite ID throughput balance oracle random dCAT CoPART PARTIES satori throughput ID fairness balance oracle random dCAT CoPART PARTIES satori fairness satori achieves throughput fairness technique cloudsuite benchmark sort satori performance ID throughput balance oracle random dCAT CoPART PARTIES satori throughput ID throughput balance oracle random dCAT CoPART PARTIES satori fairness satori achieves throughput fairness technique ECP benchmark sort satori performance aggregate throughput satori outperforms technique PARTIES cloudsuite ECP benchmark suite respectively fairness satori outperforms technique PARTIES cloudsuite ECP benchmark suite respectively understand performance behavior satori achieves performance minife  ECP benchmark suite minife intensive compute ipc flop rate cache  requirement  equally llc requirement satori achieves performance   resource requirement resource location easy navigate satori optimal variety characteristic satori performs compete technique throughput fairness investigate source satori benefit satori outperform dCAT CoPart partition resource dCAT partition llc CoPart partition memory bandwidth llc interestingly reveal satori approach effective dCAT CoPart partition resource satori partition llc performs dCAT throughput fairness satori partition llc memory bandwidth performs CoPart throughput fairness therefore benefit satori merely operating multi resource random dCAT CoPART PARTIES satori throughput balance oracle throughput random dCAT CoPART PARTIES satori fairness balance oracle fairness satori achieves throughput fairness average across cloudsuite benchmark random dCAT CoPART PARTIES satori throughput balance oracle throughput random dCAT CoPART PARTIES satori fairness balance oracle fairness satori achieves throughput fairness average across ECP benchmark satori PARTIES partition resource satori internal function satori insight performance gain closer satori dynamically balance prioritization equalization component fairness throughput combine overall throughput combine overall fairness overall throughput fairness deviate due temporary prioritization goal however equalization component ensures equalization configurable parameter average equalization component dominant approach equalization etc understand effectiveness dynamic prioritization strategy satori satori implement static fairness throughput dynamic prioritization additional benefit static strategy fairness throughput importantly dynamic prioritization opportunity benefit improvement goal limited improve goal throughput fairness indicates satori successfully leverage prioritization goal improve performance significantly explain satori outperforms compete technique configuration quantify proximity configuration obtain satori configuration obtain balance oracle demonstrate optimality comparison PARTIES calculate distance configuration allocate prioritization throughput prioritization fairness equalization throughput equalization fairness balance runtime ID perf improvement constant throughput fairness impact dynamic satori dynamically balance equalization prioritization throughput fairness dynamic balance improves performance random dCAT CoPART PARTIES satori configuration distance balance oracle config distance distance balance oracle background  satori PARTIES satori PARTIES config distance configuration satori closest balance oracle satori dynamically configuration PARTIES phase technique configuration allocate balance oracle configuration dimension resource calculate distance configuration calculate euclidean distance vector dimension maximum distance scenario satori indeed achieves closest proximity balance oracle average runtime across technique distance satori satori configuration PARTIES phase distance oracle satori PARTIES although optimal configuration frequently satori outperforms capability gradient descent dynamic prioritization magnitude individual contribution upon application workload temporal phase satori sensitive prioritization equalization within investment tune effort yield benefit factor satori performance sensitivity satori performance prioritization equalization essential tunable parameter satori sensitivity generally throughput fairness performance degrades increase prioritization performance balance oracle throughput fairness equalization satori sensitivity tune prioritization equalization tune effort achieve optimal longer prioritization opportunity precise dynamic decision phase decision performance longer phase longer equalization opportunity equalize goal performance degrade however happens prioritization equalization overall satori amount tune effort parameter parameter chosen reasonable perform similarly satori objective function goal extract performance throughput fairness underlie BO model behave unexpectedly recall satori construct objective function objective function dynamic prioritization goal feature although non conventional underlie BO operation neighborhood BO operation yield performance illustration parsec benchmark blackscholes canneal fluidanimate freqmine streamcluster initial portion observation drawn brevity objective function satori achieves objective function satori without prioritization goal satori indeed maximize objective function yield performance however inquiry increase variance decision underlie BO specifically estimation satori proxy model drastically estimate satori without prioritization difference estimation erratically potentially correspond increase variability performance percentage proxy model absolute difference estimate configuration iteration satori satori without dynamic prioritization confirms percentage proxy model satori satori without dynamic prioritization curve exploration exploitation phase satori satori without dynamic prioritization synchronization inquiry satori variation performance due objective function factor earlier objective function maximize objective function demonstrate objective function proxy model iteration satori satori without dynamic prioritization objective function construction satori improves quality obtain objective function without unexpected underlie BO operation performance balance oracle throughput satori satori without dynamic prioritization fairness variation performance goal satori satori without prioritization variation performance satori satori without dynamic prioritization satori curve satori without dynamic prioritization curve closer oracle within confirm bound factor helpful sec finally sample snapshot demonstrate prioritize weaker goal empirically potential improve benefit goal instead prioritize goal sec satori relative improvement increase colocation scalability location increase application difference satori PARTIES monotonically increase throughput fairness goal difference colocated application respectively colocation increase optimum becomes challenge due local maximum gradient descent tend stuck local maximum satori satori practical incurs overhead satori overhead critical execution execute satori decision execute previous resource allocation configuration satori generates decision implement satori consume component BO GP model update acquisition function evaluation sample interval BO related task average satori optimize active incur computation related overhead invoked performance specific significantly ensures overhead incur optimization avoid frequent update GP model optimal configuration detection GP model overhead potentially increase computational performance balance oracle throughput satori weaker goal prioritize satori goal prioritize fairness prioritize weaker perform goal satori throughput fairness computation interference reveal satori executes instruction execute average performance related satori automatically overhead BO sensitive initial configuration outcome quality satori mitigates challenge building reasonable configuration resource partition imbalance partition across resource instead random configuration VI related besides multiple technique evaluation prior focus manage partition resource goal improve utilization consumption etc technique customize goal goal simultaneously recent leveraged hardware capability llc memory bandwidth partition cap etc multiple resource goal recent latency critical  BO approach partition multi core resource  outperforms PARTIES multiple latency critical apply satori context multiple throughput orient workload compete objective fairness throughput  performs PARTIES underperforms satori margin PARTIES  PARTIES context actively simultaneously compete objective employ insight dynamic prioritization goal ref technique propose proposal demonstrate  douglas utility model performance theory fairly allocate resource multiple application ref primarily focus improve fairness actively maximize throughput unlike satori multiple desirable incentive envy freeness pareto efficiency contrast satori ref prior information profile performance application resource allocation  douglas utility function promising practical typical compute scenario theoretic approach suitable application fix tenant assurance envy freeness incentive propose  resource allocation scheme allocate multi core resource  proposes novel iterative bidding pricing procedure user optimization maximize local utility bid resource determines allocation multiple bidding extensive simulation evaluation leverage hardware utility calculation demonstrates iterative bidding however quickly achieve equilibrium multiple application architectural resource challenge contrast satori employ BO approach commodity hardware exploit dynamic prioritization compete goal fairness throughput combine  approach ref  satori opportunity improve fairness throughput propose dominant resource fairness drf maintain fairness application dominant resource application propose hug improve drf elastic correlate demand network link however assume demand vector user correlate utility critical multi core resource partition memory bandwidth allocation affect utility allocate cache satori BO approach capture approach user define demand vector resource readily available application cmp satori assumes input user satori static decision instead adapts dynamically characteristic utilize resource efficiently vii conclusion previous actively simultaneously partition knob achieve multiple goal satori technique actively simultaneously multiple cmp architectural resource achieve multiple goal satori effectively handle compute core llc memory bandwidth cap resource achieve optimal balance throughput fairness complement recently publish approach energyefficiency location economics collaborative filter machine