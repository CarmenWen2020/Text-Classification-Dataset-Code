microarchitectural attack  computer architecture security crisis moore justifies exotic microarchitecture likely tip  anticipate security crisis performs systematic security centric analysis computer architecture literature rationale implement future processor  reasonably previously propose uncovers microarchitectural optimization novel security implication proposes conceptual framework demonstrates proof concept efficacy optimization leak privacy spectre meltdown without exploit speculative execution otherwise undermine security critical program variety  patent medium speculation regard implementation status recent renew academic community goal perform hopefully analysis inform development introduction computer architecture grapple security crisis spectre meltdown  security vulnerability attribute microarchitecture breathe sub microarchitectural attack thesis moore significantly exacerbate security without transistor  employ exotic microarchitectural optimization improve performance indicator future optimization novel devastate security implication beyond simply impact future processor likely microarchitecture already exists hardware latent discover vulnerability examine  exploit processor complexity outpace attacker bandwidth hardware zero anticipate security crisis goal perform systematic computer architecture literature security lens rationale implement future processor  reasonably previously propose quote website recent predictor competition prediction regain era moore fading dennard motivate data memory dependent prefetchers leak privacy spectre meltdown motivate prefetching community aware security implication traditional stride software prefetching tip  prefetcher literature significant literature data memory dependent prefetchers prefetchers account content data memory directly prefetchers effective stride prefetchers fail application dominate indirection pointer chase indirect memory prefetcher leak program memory universal gadget sandbox attacker private data leak target relative address array victim  sandbox software memory safety prefetchers prime implementation candidate tackle critical increase memory bottleneck indirect memory prefetcher recently patent intel multilevel listing detect program prefetch cache correspond prefetcher sequentially prefetch cache access prefetcher adversarial suppose attacker UI OOVBM  PNQVUFS SDIJUFDUVSF acm annual international symposium computer architecture isca doi isca memory outside software sandbox browser eBPF linux kernel latter target spectre disclosure attacker malicious program another inside sandbox activate prefetcher content memory immediately bound attacker trick prefetcher reading attacker data bound implies attacker attacker chosen private bound finally leak transmit traditional cache covert channel prime probe prefetch detail attack attack attacker leak memory outside sandbox universal gadget knowledge microarchitectural optimization outside speculative execution universal gadget realistic software assumption devastate privacy leakage systemic previously security analysis microarchitectural optimization beyond data memory dependent prefetchers security implication additional microarchitectural optimization computer architecture principle locality compressibility prediction prefetching generally hardware analyze computation simplification pipeline compression computation reuse prediction register file compression data memory dependent prefetchers additionally discussion continuous trace optimization significant evidence optimization commercial future already analysis evidence limited actually implement intel machine explicitly mention RISC memory consistency model documentation mention prediction recently resurgence competition spur innovation award originate proposal mention data memory dependent prefetcher motivate recently patent intel patent issue optimization variety finally limited computation simplification pipeline compression indeed implement demonstrate attack respectively focus microarchitecture novel privacy implication importantly chose optimization leak data beyond prior attack via previously  microarchitectural mechanism novel microarchitecture important attack likely evade defense defense propose universal gadget spectre mechanism insufficient universal gadget data memory dependent prefetcher optimization widely deployed software defense paradigm constant program contribution summarize contribution perform comprehensive security centric previously propose microarchitectural optimization totality analyze optimization data memory dependent prefetching computation reuse computation simplification pipeline compression register file compression prediction continuous trace optimization novel security implication propose conceptual framework leakage microarchitectural optimization framework precisely describes information leakage interaction flight instruction microarchitectural architectural context passive active attacker proof concept implementation architectural simulator develop technique amplify timing difference stem technique constant cryptography detailed analysis data memory dependent prefetcher exploit context eBPF sandbox source source proof concept infrastructure related project http github com   II uarch attack primer threat model microarchitectural attack covert channel attack enable communication privacy leakage due processor microarchitecture channel victim program attacker program observes hardware resource victim infers victim private data covert channel attacker program attempt communicate hardware resource usage intentionally attack model transmitter victim sender covert channel setting respectively although optimization currently implement warrant investigation modulate channel hardware resource interpret receiver typically another thread transmitter specific instruction modulates channel function operand refer transmit instruction receiver channel source non determinism available function microarchitectural resource usage usually explicit timer instruction implicit construct memory channel privacy leakage hardware structure exploit channel cache TLBs dram predictor others construct covert channel subtle central program data leak channel landscape significantly memory related channel cache tlb dram etc directly leak function victim memory access data address operand load instruction likewise prediction arithmetic contention channel leak victim data predicate target operand speculative execution attack spectre novel enable incorrect transient sequence instruction steer previously reachable data transmitter active attack perform multiple replay microarchitecture attack typically active attack attacker explicitly prime precondition amplify leakage spectre variant attacker index specify private leak likewise  attack compress cache attacker data private data induce compression function private data attacker precondition microarchitectural prime probe attack normally assume attacker perform replay precondition reduce precondition amplify leakage spectre attacker leak information multiple private data orthogonally  attacker data specific private data incrementally reduce uncertainty private data differential analysis attack scenario proof concept assume popular attack scenario sandbox scenario influence attacker performs active attack receiver receiver attacker remote device interacts victim program  interface interact remote web server network endpoint interact sgx enclave sgx ecall interface attacker user  privilege receiver remote attacker monitor victim runtime network concurrent victim processor smt sibling another physical core kernel sandbox attacker code victim address linux eBPF web browser sandbox  eBPF enables kernel safely  code kernel specific OS kernel eBPF sandbox creator ensure code cannot memory outside sandbox memory attacker goal circumvent protection receiver typically attacker program sandbox scope physical related attack setting attacker software monitor microarchitectural resource usage treat analog channel physical equipment monitor EM emission scope interaction microarchitectural frequency DVFS although important future focus uarch novel privacy  microarchitectural optimization inherently creates program data dependent resource usage therefore potentially reveals information attacker monitor usage goal meaningful subset optimization namely leak program data risk microarchitecture variant data risk data leak return transmit instruction transmitter activates architectural directly data leakage instruction leak operand leak data leakage architectural register file memory leak assume victim program presence software attacker receiver described II useful security related information attacker defender  mitigation constant program attempt attack ensure private data compute transmit instruction speculative execution attack transient execution pas private receiver equivalent idealize  attacker monitor hardware resource usage flip flop cycle granularity data transmit instruction identify transmitter latent microarchitecture leakage landscape denote unsafe unsafe leak function data assumption respectively indicates data unsafe victim program contains appropriate speculative execution gadget arithmetic operation operand oppose transmitter fully specify partition operand assignment flight dynamic instance instruction IV representative citation data baseline microarchitecture leak acronym meaning CS computation simplification PC pipeline compression SS CR computation reuse VP prediction rfc reg file compression DMP data  prefetching baseline CS IV PC IV SS IV CR IV VP IV rfc IV DMP IV data operand transmit instruction operand int ops int mul int div FP ops int ops int mul int div FP ops addr load data load data register file data memory analyze leakage relative baseline architecture baseline typical commercial server processor speculative multicore attack II baseline plus specify microarchitectural optimization SS indicates baseline architecture indicates data leak unsafe difference baseline baseline plus optimization data transition transmitter function flight data indicates safety relative baseline goal security analysis optimization expand leakage relative baseline optimization rightmost increase scope program data leak relative optimization speculative execution attack explicitly transient execution steer private data towards transmit instruction whereas goal articulate instruction transmit instruction constant program reduce assumption launch speculative execution attack otherwise leak previously data meta takeaway considers union optimization instruction operand data goal precisely privacy leakage beyond optimization simply endanger previously data interested understand precisely function private data leak circumstance subtle important cache prime probe attack address lookup cache unsafe attacker prime cache beforehand II optimization subtlety framework precisely specify data leak circumstance optimization leak function already unsafe data IV  novel information leakage microarchitecture analyze security implication microarchitectural optimization microarchitectural leakage descriptor precisely privacy leakage develop conceptual framework concisely precisely privacy leak microarchitecture microarchitectural optimization trigger hardware resource usage due interaction flight dynamic instruction ISA invisible persistent microarchitectural predictor cache ISA visible persistent architectural register file data memory interaction distinct observable outcome distinct modulation hardware resource channel II microarchitectural leakage descriptor  mld microarchitectural optimization stateless function specifies input optimization functional behavior input inst uarch arch dynamic instruction persistent microarchitectural architectural respectively mapping assignment input distinct observable outcome concrete assignment input mld return unique distinct observable outcome input assignment correspond mapping partition mld input assignment   microarchitectural structure prior python notation assume mld argument convenience inst PC opcode cycle addition mld cycle alu inst return zero skip mld zero skip mul inst return arg cache memory random replacement policy assume load addr load address cache cache mld cache rand inst uarch cache return addr addr cache microarchitectural leakage descriptor  optimization prior return cache argument address denotes logical etc refer operand register IDs respectively cycle alu input operand dynamic instruction inst cycle later assignment operand mld unconditionally output alu transmitter multiplier cycle execute neither operand skip cycle operand creates distinguishable outcome timing difference mld definition indicates occurs function instruction operand arg cache access memory instruction assume memory random replacement policy creates num cache distinguishable outcome address cache correspond address cached additional outcome cache model cache replacement policy analogous mld mapping simply extend account extra information transmit via replacement public private attacker data leakage important understand data mld input public private attacker determines extent attacker influence precondition II zero skip operand private attacker learns input operand public private attacker learns private operand public operand non zero learns information public operand already public operand skip occurs purely function public information operand attacker private interpret security lattice denote public attacker private data respectively attacker attacker operand non zero leak precisely private operand non zero data public private attacker precondition attacker data depends factor victim program microarchitectural estimate channel capacity finally mld specification information optimization channel capacity denotes partition specify mld denotes upper bound encode channel preliminary characterization mld framework describes optimization detail discus representative finding capture security implication optimization organize discussion II optimization creates transmitter function purely flight instruction stateless instruction centric IV flight instruction interact persistent microarchitectural architectural stateful instruction centric IV purely architectural memory centric IV  specific proposal optimization refer throughout text II optimization classification mld signature instruction inst memory stateless stateful IV arch IV uarch arch IV comp simplification pipeline compression computation reuse prediction reg file compression memory prefetching stateless instruction centric optimization optimization computation simplification pipeline compression flight instruction computation simplification technique simplify eliminate instruction execution operand satisfy zero skip multiplier IV principle apply everything complex instruction simplest integer operation etc instruction execution simplify convert shift eliminate entirely zero skip IV finally manifest pipeline stage skip issue execution register file finally proposal presence multiple inflight instruction trigger IV arithmetic operand pack execution mld operand pack inst inst return msb arg msb arg msb arg msb arg IV mld inst arch data memory return data data memory addr IV dynamic instruction reuse variant reuse buffer PC indexed memoization memoized instruction operand mld instruction reuse inst uarch reuse buffer return arg reuse buffer IV prediction prediction PC indexed predictor entry contains confidence conf unsigned predict prediction mld prediction inst uarch prediction return prediction conf prediction prediction dst IV register file compression entry register file variant compress register assume register treat unsigned mld compression arch register file return register file register file IV indirect memory prefetching access prefetcher array  offset prefetch mld iml prefetcher uarch imp uarch cache arch data memory imp data memory imp  data memory imp  return cache imp  cache cache imp  cache cache imp  cache microarchitectural leakage descriptor  optimization IV IV msb return index significant argument denotes logical cache refers cache mld cache rand address argument oppose dynamic instruction denotes concatenation projection onto function concrete assignment mld input DN domain informally microarchitecture leak information independently pipeline compression technique compress data processor pipeline reduce improve throughput recur significance compression data effectively bitwidth wise significant scheme exploit pipeline purpose improve execution throughput pack multiple narrow width operand improve bandwidth pipeline stage writes register file scheme granularity capable operand byte security analysis community nascent understand optimization implement limited attack float  behavior computation simplification digit serial multiplication significance pipeline compression exit beyond observation optimization significantly broader extreme optimization render bitwise instruction critical constant program unsafe susceptible active attack analogous zero skip multiplier IV optimization instruction sometimes interaction multiple flight instruction mld operand pack execution optimization improves execution throughput pack arithmetic operation operand pending instruction sufficiently narrow width observable outcome mld depends instruction colocated reservation implication specific threat model receiver sibling smt thread perform active attack instruction operand pack optimization occurs strictly function victim instruction operand stateful instruction centric optimization discus optimization trigger due interaction flight instruction microarchitectural architectural content memory perform microarchitecture detect skip perform proposal implement pipeline stage retirement flight data content data memory load queue flight flight speculatively decode stage computation reuse hardware detect eliminate redundant computation technique identify computation lookup hardware memoization skip computation nonspeculative lookup cannot yield false positive yield relevant computation memoized lookup proposal computation latency instruction potentially arithmetic memory instruction  instruction trace proposal lookup memoization operand register file proposal lookup operand ID logical register former typically achieves reuse focus discussion discus latter implication defense VI prediction speculative optimization intend instruction dependency thereby increase instruction parallelism scheme predict instruction compute prediction scheme prediction incorrect prediction pipeline squash resolve prediction update dynamic predictor information related resolve prior propose predict load broader instruction proposal multitude prediction heuristic stride predictor hybrid predictor nearly threshold prediction prediction sufficiently confidence maintain counter predictable security analysis knowledge prior perform security analysis optimization analysis indicates limited implement intel machine explicitly mention RISC documentation proof  demonstrates render  code longer constant likewise prediction recently resurgence competition spur innovation important observation privacy leakage standpoint  implementation computation reuse dynamic instruction reuse typical  predictor takeaway  leak function instruction operand another architectural microarchitectural memoized non speculative squash memoization squash imply transient instruction poison transmit secret covert channel speculative execution attack important implication context active replay attack II situation computation reuse prediction content data memory addr data memory address addr attacker attacker perform multiple attacker eventually data precisely attacker data across optimization equality attacker exponentially reduce perform narrower width byte expectation respectively attack predictor attack symmetric attack data private data memory addr attacker vice versa data private attacker flight instruction operand data memory addr private attacker data data mechanism dma finally receiver relative previous attack predictor receiver attack predictor monitor program execution function mispredictions squash similarly improve throughput memory computation reuse improves pipeline issue execute stage throughput prediction squash memory centric optimization finally discus optimization trigger function data register file data memory register file compression exploit locality increase effective physical register outof pipeline enable instruction parallelism typical approach rename stage allocate physical register instruction already register file return physical register allocate pool enables queue instruction rename scheme enable scheme exploit compressibility apply significance compression pack narrow width exploit similarity data memory dependent prefetchers prefetchers program data memory content input directly oppose program memory address motivation capture access cannot capture prefetchers namely involve indirection memory sparse tensor algebra graph generally application pointer chase target application influence data access prefetcher identify prefetch access sparse tensor algebra graph computation correspondingly imp detect access imp imp stride loop variable prefetch data assume future prefetchers typically boundary typically core access tlb prefetch virtual address security analysis memory centric optimization significant novel security implication relative optimization leak data regardless compute outside model constant program indiscriminately architectural register data memory risk unaware effort towards implement register file compression data memory dependent prefetchers patent building universal gadget analysis data memory dependent prefetcher variant beyond simply leak data memory  dependent prefetchers additionally universal gadget  detail attack mld terminology URG optimization data memory data memory attacker input observable outcome function data memory optimization dependent attacker function distinct observable outcome attacker reduce uncertainty data memory address memory attacker framework optimization prefetchers  circumstance mld imp variant without cache access array offset URG sandbox II attacker sandbox address private victim memory outside typically along public mld indicates prefetcher reveals offset public cache transmitter public focus attacker imp nearby data attacker access recently address easy address max mem addr victim memory attacker data within imp creates URG imp URG beyond leak victim data address evaluation proof concept  demonstrate proof concept attack optimization namely IV data memory dependent prefetching IV cannot evaluate optimization chose exemplar novelty security implication likelihood implement future processor evaluate obvious impact pipeline measurable difference victim program execution pipeline prevent stall due perform memory nuance implementation absorb datadependent timing difference despite challenge demonstrate dynamic instance secret dependent induce timing difference  encryption function ingredient novel amplification gadget novel precondition creates cycle timing difference attacker chosen gadget leveraged reveal critical encryption operation information reconstruct victim implementation lack implementation implement evaluate attack gem implementation  proposal assume release consistency memory model amplification gadget queue SQ perform memory dequeue SQ program implementation processor RISC boom processor perform dequeue SQ cache cache implement steal scheme important issue load load SS load address resolve load content memory address  return perform memory marked iff data return SS load data marked perform silently dequeued without interact memory multiple consecutive dequeue cycle marked perform sequence action steal scheme precondition resolve cache cache load delay sub gadget load flush sub gadget target thread inline victim program amplification gadget release consistency memory model mapped cache refers cache associate address refers cache occupy SQ behavior dequeued finally SS load cannot issue load SS load issue arrives perform marked operationally equivalent architecture implement amplification gadget hardware resource usage flight data content memory non trivial convert measurable timing difference contribute attack attack hinge attacker timing difference stem dynamic instruction net dynamic likely completely hidden execution address challenge amplification gadget goal maximal timing difference specify dynamic instruction maximize target dequeue SQ dequeue sufficiently SQ stall pipeline perform program dequeue SQ amplification gadget stall pipeline iff target maximally delay dequeue gadget arranges target cache target cache target SQ dequeue happens target cache creates delay proportional cache latency gadget challenge target candidate SS load return target perform implies target cache previous around issue amplification gadget evict target SS load completes target perform amplification gadget implementation depends threat model implementation gadget victim program gadget target instruction delay sub gadget flush sub gadget delay flush gadget delay gadget instruction execute flush gadget instruction depends delay gadget otherwise executes SS load target return execution remove target cache implementation delay flush gadget load flush implement via cache contention conceptually delay gadget ensure SS load completes target perform flush gadget ensure target evict SS load completion target perform detail suppose instruction execute delay gadget perform cache concurrently SS load pseudocode target issue return candidacy occurs target perform SS load completes delay gadget return enables flush gadget execute target remove cache SS load completes target perform desire implementation gadget another resident thread emulate flush gadget attack  aes encrypt amplification gadget demonstrate proof  attack constant  aes encrypt implementation abbreviate  proof concept around scenario threat model II victim consists server worker thread encryption adversary victim trigger encryption plaintexts model encryption worker allocates various temporary variable stack variable subsequent guaranteed overwrite behavior victim program goal attack attacker compute victim secret plaintext induce specific location data memory victim prior encryption operation assume attacker access secret victim repeatedly encrypt public data packet header  achieves constant byte substitution perform series exclusive operation aes stage intermediate logical register spill onto stack identify location intermediate reconstruct aes byte substitution byte substitution stage  performs exclusive aes sixteen byte expand compute encrypt data expansion algorithm invertible sixteen byte allows attacker reconstruct entire attack victim data encrypt aes byte substitution stack attacker data encrypt attacker attempt writes intermediate trigger attacker modify plaintext intermediate multiple intermediate attacker possibility reconstruct attempt compute victim amplification gadget increase timing difference dynamic  code simplicity manually delay gadget flush gadget  code target aes stack attack victim program latent amplification gadget attacker implement gadget resident thread incorrect corresponds attacker overwrites aes byte assumes architecture entry SQ associative cache takeaway dynamic creates easily distinguishable timing difference cycle histogram runtimes  amplification gadget apply overwrites aes timing difference reflect dynamic instruction data memory dependent prefetching goal detail attack indirect memory prefetcher imp leak victim memory universal gadget analyze imp attack data dependent memory prefetcher performs indirection IV assume attacker goal kernel memory spectre poc attacker malicious program inside eBPF sandbox imp sandbox II previously eBPF performs static analysis sandbox code memory safety ensure cannot sandbox  sandbox code target machine ISA improve performance access hardware imp instead attack assumption imp eBPF specifically attacker program likely trigger imp bypass eBPF software analysis attacker program imp bound access bypassing eBPF eBPF allows program kernel source code attacker address outside sandbox target immediately bound eBPF complains unless explicit null dereference  array lookup bound disguise bound lookup bpf array return null although eBPF programmer bpf array wrapper instantiate array  assembly normal array specifically additional memory access reading register file relevant bpf array int bpf array int bpf array int int attacker int int int lookup return lookup return lookup return return return attacker eBPF source mov rsi eax eax bound len cmp rax   rax rdi rax rax jmp xor eax eax cmp rax   rdi rdi mov rax rsi rdi rdi array eax mov rsi eax attacker eBPF  assembly snippet attacker program eBPF sandbox indirect memory prefetcher trigger bound access imp program tailor trigger imp imp bound access hardware prefetcher imp knowledge array bound imp identifies indirect access monitoring data return core address indirection core subsequently target access information array imp prefetching assumes subsequent remain bound assumption attacker violates prefetch buffer discussion conclude attack trigger imp sandbox transmit bound data  covert channel remain subtlety prefetchers prefetch buffer prevent cache unless prefetched data actually attacker program per eBPF defense aggravate mitigate attack knowledge prefetch buffer apply cache llc receiver attacker simply monitor buffer VI discussion defense strategy optimization privacy implication data variety instruction operand data imperative invest holistic oppose defense review potential approach discus challenge security maintain performance benefit optimization challenge sandbox efficiently holistic defense attempt microarchitectural attack spatial temporal isolation information principle isolate victim spatially receiver data dependent  hardware resource usage hide termination pad execution simply accept seemingly amount leakage approach significant promise argue termination channel leakage creates significant roadblock towards security performance context optimization incur worstcase execution likely negates optimization benefit leak timing critical application due active replay attack II IV attacker data slowly leak entire secret retrofit constant program constant program optimization retrofit technique security mitigate leakage significance compression IV software instrumentation significant assume preserve functionality mitigate leakage data memory centric optimization variant attack IV data  prefetching IV encrypt data spill register file data memory advantage approach software disadvantage complexity  performance overhead prudent retrofit unclear retrofit constant program handle optimization prediction register file compression likely ample opportunity performance mitigation closer naive leakage encryption sufficient data memory target fashion finally ISAs constant program dit promise significantly simplify constant augment optimization dit currently described memory centric optimization IV architecting security conscious microarchitecture finally research agenda proactively architecting security conscious microarchitecture important observation slight tweak microarchitecture render secure without compromise performance dynamic instruction reuse proposes variant interestingly dit explicitly mention timing independent load data potentially protection load prediction scheme instruction operand memoization leak operand IV whereas latter scheme operand register IDs leak information instruction execute public information constant program leak related information generally report achieves performance substantial performance gain variant takeaway instance architect efficient secure microarchitecture extent principle generalize microarchitectural optimization additional optimization novel security implication comprehensive incomplete  community microarchitecture novel security implication implement optimization unpublished outside optimization patent optimization novel privacy implication subtle circumstance analysis dynamic optimization program trace continuous optimization instruction micro ops runtime information optimize program instruction flight respectively glance optimization privacy novel security implication specific circumstance analysis runtime optimization constant fold leak privacy beyond program readily leak attack apply strength reduction optimization specific operand security issue strength reduction manifest due specific operand data beyond arithmetic contention exploit attack subtle performance technique deserve limited continuous optimization implement micro fusion processor attack landscape finally beyond traditional microarchitectural attack trend dennard moore forge significantly broader threat related interact microarchitecture research demonstrate undervolting DVFS enable novel integrity attack microarchitecture recent isolated communicate related mechanism processor turbo boost security analysis analogous perform  attack important future attack perform remotely traditional microarchitectural attack largely evade defense spatial isolation microarchitectural structure VI  recent extend spatial isolation invasive apply generalpurpose program vii related previous related microarchitectural attack II implication program data privacy novel vulnerability previously  microarchitectural mechanism IV background relevant defense literature VI knowledge privacy implication emerge microarchitecture  complementary analysis compress cache classify memory centric optimization IV render data memory unsafe data memory dependent prefetchers  proposes universal gadget URG whereas propose data memory dependent prefetchers sandbox II IV URG weak software assumption attacker merely trigger data memory dependent prefetcher program  software assumption namely victim latent buffer overflow vulnerability conclusion perform systematic computer architecture literature security lens microarchitectural optimization novel security implication devastate spectre meltdown without rely speculative execution render constant program ineffective overhaul implicate computer architecture concept locality compressibility prediction prefetching implement commercial machine indeed others resurgence moore implement future