intel amd processor translate complex instruction simpler internal micro ops cached dedicate chip structure microop cache depth characterization micro cache reverse engineering undocumented feature describes attack exploit microop cache timing channel transmit secret information describes attack thread domain attack leak secret across  boundary smt thread attack transmits secret across smt thread via micro cache transient execution attack ability leak unauthorized secret access along  transient instruction dispatch execution exist invisible speculation fence mitigate spectre introduction processor feature complex microarchitectural structure carefully tune maximize performance however structure characterize observable timing cache exploit covertly transmit secret information bypassing sandbox traditional privilege boundary although numerous channel attack propose literature recent influx spectre related attack highlight extent threat transiently access secret transmit via microarchitectural channel expose timing channel manifest integral performance enhancement intel amd processor micro cache ISA implement variety complex instruction internally broken RISC micro ops processor pipeline facilitate simpler backend micro ops cached dedicate chip buffer micro cache feature performance optimization allows instruction fetch decode micro ops directly micro cache translation available decode pipeline microop cache occurs decode pipeline activate perform internal CISC RISC translation translation penalty function complexity instruction micro cache ripe candidate implement timing channel however contrast chip cache micro cache organization conventional cache channel technique directly apply cite software restrict directly index micro cache alone access content regardless privilege unlike traditional data instruction cache micro cache buffer fetch sequentially decode micro ops span multiple within cache II detail micro ops within cache drastically various nuance prefix opcodes immediate  adjacent micro ops finally proprietary micro ISA minimal documentation important detail micro cache replacement policy security implication largely ignore depth characterization micro cache allows confirm understand feature document intel amd manual undocumented feature partition replacement policy thread multi thread setting leverage knowledge behavior microop cache propose principled framework automatically generate bandwidth micro cache timing channel exploit primary setting across code within thread operating privilege across thread simultaneously smt context logical core within physical core transient execution attack variant leverage micro cache leak secret bypassing exist hardware softwarebased mitigation intel recommend lfence micro cache channel dangerous implication bypass technique mitigate UI OOVBM  PNQVUFS SDIJUFDUVSF acm annual international symposium computer architecture isca doi isca cache channel attack detect exist attack malware profile micro cache sits pipeline execution defense mitigate spectre transient execution attack restrict speculative cache update remain vulnerable micro cache attack exist invisible speculation fence focus hiding unintended vulnerable speculative execution processor pipeline inhibit source speculation vulnerable attack discloses speculatively access secret channel transient instruction opportunity dispatch execution  suite exist defense furthermore due relatively micro cache attack significantly faster exist spectre variant rely prim probe cache transmit secret information considerably stealthy micro cache sole disclosure primitive introduce data instruction cache access alone summary contribution depth characterization microop cache feature intel amd processor reverse engineering undocumented feature replacement partition policy propose mechanism automatically generate exploit code leak secret leverage micro cache timing channel evaluate attack variant exploit novel micro cache vulnerability domain address attack smt thread attack transient execution attack variant comment extensibility exist cache sidechannel transient execution attack mitigation address vulnerability expose potential attack detection defense mechanism II background related relevant background frontend salient component micro cache feature reference intel skylake amd zen microarchitectures briefly discus related research channel transient execution attack decode pipeline decode processor absence optimization instruction fetch instruction byte correspond byte code instruction cache fetch buffer cycle  extract individual instruction macro ops dedicate fifo structure macro queue skylake microarchitecture consists entry  highly sensitive composition fetch buffer macro ops constitutes incur additional penalty BPU predicts instruction address byte cycle instruction fetch micro cache  decode macro queue macro ops cycle fuse decoder macro ops cycle micro ops cycle fuse micro ops cycle micro ops cycle instruction decode queue IDQ micro ops cycle instruction cache hierarchy  micro cache decode pipeline cycle prefix lcp encounter decode instruction default macro ops decode macro queue consecutive macro entry fuse macro decode bandwidth multiple macro ops macro queue cycle distribute decoder translate macro internal RISC reduce instruction compute micro ops skylake microarchitecture feature multiple decoder translate macro ops decompose micro decoder translate complex macro ops decompose anywhere micro ops  rom  translates complex  instruction  translate micro ops potentially involve multiple loop decode cycle decode pipeline peak bandwidth micro ops per cycle contrast amd zen feature decoder  microcode rom encounter complex instruction translates micro ops translate micro ops queue instruction decode queue IDQ processing pipeline cycle micro ops deliver IDQ micro cache available expensive decode pipeline micro ops deliver intel architecture macro queue IDQ micro cache remain partition across smt thread physical core amd allows micro cache competitively amongst colocated smt thread structure decode pipeline decoder  micro cache organization functionality inherent complexity decode substantial impact overall throughput micro ops decode byte micro cache micro decoder micro predictor μop fetch address byte align index micro cache organization functionality consumption instruction decode pipeline consume overall processor architecture  shot recent processor skylake decoder  consume significant chunk core intel amd processor cache decode  dedicate cache decode buffer micro cache bypass decoder cached micro translation already available specifically allows processing code faster efficient source micro ops cache decode pipeline micro cache introduce intel sandy bridge microarchitecture rate average hotspot tight loop kernel overall performance improvement saving skylake micro cache organize associative cache cache capable micro ops maximum overall capacity micro ops decode micro ops micro cache decoder  appropriate identify macro instruction address cache contains micro ops correspond macro instruction host within align byte code placement byte code consume maximum micro ops micro ops deliver  consume entire micro cache micro ops correspond macro instruction span micro cache boundary unconditional instruction micro micro cache immediate consume micro slot within cache IV mechanism automatically generate code exploit placement arbitrary conflict micro cache contrast traditional data instruction cache micro cache implement cache micro ops correspond byte code continuously another unconditional encounter misprediction conditional interrupt micro ops byte code appropriate micro cache checked statically contiguous byte code program lookup fails micro cache occurs switch decode pipeline trigger phase decode switch entail cycle penalty therefore micro cache penalty combination  switch penalty variable latency phase instruction decode highly sensitive composition byte code macro ops decode sufficiently signal implement timing channel due performance saving potential micro cache steadily intel sunny  microarchitecture recent amd zen processor feature micro cache micro ops finally micro cache inclusive respect instruction cache instruction translation lookaside buffer iTLB implies cache evict instruction cache trigger eviction micro cache vice versa iTLB flush sgx enclave entry exit entire micro cache flush information leak via micro cache across enclave boundary optimization maximize code density structure beyond instruction cache intel amd processor implement bandwidth optimization micro fusion feature allows decode micro ops adhere fuse micro fuse micro slot buffer micro cache micro queue decode bandwidth improve micro cache utilization however later broken respective component micro ops dispatch functional execution addition micro cache intel processor feature loop detector lsd capable identify critical loop kernel lock IDQ decode potentially fuse micro ops continuously issue IDQ without access micro cache straightforward violate requirement lsd operation ensure microop cache operating technique already disabled skylake due implementation bug  SKL macro uop lbl lbl nop byte nop byte nop byte byte  sample uop uop uop listing microbenchmark μop cache microarchitectural covert channel literature describes covert channel attack microarchitectural resource medium information leakage prominent exploit stateful resource data cache instruction cache tlb predictor stateful resource persistence attacker periodically probe monitor activity potential victim stateless resource exploit channel leakage attack model stateless resource mostly limited scenario involve thread continuously contend stateless resource execution functional memory bus stateless resource covert communication channel transient execution attack transient execution attack exploit transient instruction bypass software security leak sensitive information attacker via microarchitectural channel attack typically salient component speculation primitive allows attacker steer execution along  windowing gadget sufficiently prolongs execution along  disclosure gadget comprise instruction transmit transiently access secret attacker disclosure primitive covert transmission medium exist attack mostly data cache primary disclosure primitive attack  stateless resource execution viable alternative micro  transient execution attack exploit novel powerful disclosure primitive easily exist defense information disclosure occurs pipeline transient instruction dispatch execution macro uop lbl target align lbl jmp target  sample uop uop uop exit exit listing microbenchmark μop cache associativity  micro OP cache perform detailed characterization micro cache mechanism microbenchmarks timing execution scenario importance characterization fold allows reverse engineer important micro cache feature document manual addition timing various document feature nuance placement importantly enables development principled framework automatically generate code timing exploit construct highbandwidth timing channel perform characterization intel processor implement coffee microarchitecture skylake refresh  framework initial analysis leverage performance counter expose intel understand structure organization policy micro cache however finding purely timing variance alone intel  instruction available user infer micro cache microbenchmark listing executes loop increment byte code performance counter micro ops deliver decode pipeline micro cache microbenchmark craft byte loop consumes exactly micro cache exactly micro slot within clearly micro ops deliver decode pipeline loop increase beyond byte code consume cache micro cache confirm understand micro cache contains cache curve gradual slope consistently spike around byte loop micro ops decode pipeline cache byte loop micro ops decode pipeline cache associativity μop cache progressively loop μop cache associativity macro uop lbl target  jmp byte align lbl nop byte nop nop jmp target  sample uop uop uop exit exit listing microbenchmark placement hypothesize artifact potential hotness replacement policy micro cache detail later associativity attention associativity attack traditional cache rely heavily knowledge associativity replacement policy listing microbenchmark allows associativity micro cache leverage regularly hop within loop variable loop target cache specifically loop align cache contains unconditional instruction align recall micro cache placement forbid host micro ops beyond unconditional cache microbenchmark within loop consumes exactly cache exactly micro slot cache micro ops deliver decode pipeline clearly within increase beyond confirms understand micro cache associative organization contains placement understand micro cache placement variant microbenchmark described listing align micro ops per micro ops dsb micro ops per micro ops per micro cache placement byte code maximum micro cache micro ops intel performance counter documentation micro cache dsb another loop difference byte code loop micro ops within byte  unconditional instruction micro ops anywhere parameter infer maximum cache per byte code micro slot per cache finding scenario within loop report micro ops deliver micro cache decode pipeline inference constrain loop byte code micro ops deliver microop cache steadily code host micro ops per beyond micro ops suddenly micro cache unable host byte code micro slot constrain loop micro cache host steadily deliver micro ops consume micro slot consume micro slot confirms understand associative micro cache skylake allows micro ops cache byte code consume maximum per micro slot exceeds cached replacement policy extend characterization reverse engineer undocumented feature microop cache identify replacement policy eviction criterion skylake micro cache absence information replacement policy traditional cache lru policy decision evict cache recency trace cache decision hotness driven gain insight replacement policy micro cache leverage variant microbenchmarks micro ops micro cache loop evict another associativity placement micro cache however interleave loop loop evict loop iteration performance counter micro ops deliver micro cache loop iteration execute loop byte code exactly micro ops micro slot cache occupies within loop iteration absence interference micro cache micro ops micro cache per loop iteration iteration loop intensity coordinate micro ops deliver microop cache micro ops deliver micro cache interference quickly increase iteration evict loop execute iteration loop however loop executes iteration degradation gradual tend retain micro ops loop micro cache eviction replacement policy clearly hotness interfere access loop relative target code recency access evict replace significant interfere loop exceeds target loop hotness replacement policy potentially leak information traditional cache replacement policy evict dangerous attack vector traditional cache attack detect instruction access micro cache potentially reveals exactly conflict executes pause executes pointer chase micro cache usage sibling thread  intel processor executes listing executes pause pointer chase load multiple deconstruction smt mechanism intel processor within mapped across detect contention lack thereof potential smt mode instruction access partition policy devise logical thread smt core contend micro cache thread execute byte nop instruction microop cache intel sandy bridge ivy bridge haswell skylake processor measurable interference thread effective visible thread exactly physical confirm micro cache indeed statically partition examine scenario thread contend micro cache execute micro ops thread inherently unequal micro cache conclude dynamically partition examine option thread intel pause instruction pointer chase program frequently data cache specifically thread execute nop sequence thread executes fix pause pointer chase load clearly smt mode allocate exactly micro cache regardless instruction execute interestingly pause instruction cached microop cache indicates intel processor micro cache statically partition thread dynamically deconstruct partition mechanism intel processor devise thread zero micro cache repeatedly fetch execute micro cache align byte address microbenchmark listing thread monitor micro ops deliver decode pipeline somewhat surprising partition cache remain associative analyze shift micro cache align code address index fetch code mapped zero thread deliver micro ops micro cache regardless probed associative behavior access multiple mapped consecutive exactly thread mode exactly smt mode hypothesize micro cache partition thread available thread performance counter obtain measurement throughout characterization gain insight various feature nuance micro cache however extend microbenchmarks craft exploit rely timing measurement important technique attacker access performance counter covertly transmit secret micro cache IV   contention micro OP cache leverage extend microbenchmarks characterization framework automatically generate exploit code arbitrary conflict micro cache goal exploit timing associate conflict access micro cache construct timing channel covertly transmit secret micro cache cannot detect performance counter monitor unless specifically target micro cache accomplish craft attack signal micro cache noticeable perturbation instruction cache activity data cache activity backend resource related stall load buffer reservation rob bob etc code automatically generate exploit code micro cache nop micro micro zebra tiger strip occupation micro cache zebra tiger devise mapped mutually exclusive micro cache target arrow evict code replicate microop cache footprint occupy generate timing signal another occupy mutually exclusive subset micro cache conflict consequently timing signal henceforth refer former tiger latter zebra tiger contend zebra tiger contend occupy cache mutually exclusive manner although microbenchmark listing associativity micro cache requisite framework code arbitrarily cache another cache host  unconditional instruction code automatically generate correspond tiger zebra code ensure micro cache appropriate cache strip occupation micro cache zebra tiger fourth micro cache zebra tiger thereby interleave tiger zebra occupy evenly across micro cache empty subsequent code micro cache without obfuscate signal code micro ops pad ops prefix lcp instruction composition described facilitates timing signal lack backend execution combine lcp ensures bottleneck decode pipeline creates observable difference micro cache allows obtain clearly distinguishable binary signal timing difference cycle standard deviation cycle reliably transmit zero micro cache bandwidth error rate comparison mode bandwidth bandwidth error rate kbit error correction address address user kernel thread smt transient execution attack sample standard deviation kbit error rate error rate sample error rate bandwidth kbps bandwidth kbps sample bandwidth kbps tune occupancy sample transmission accuracy bandwidth parameter constant constant parameter   sample micro OP cache disclosure primitive leverage framework described demonstrate information disclosure rely solely exploit timing micro cache covertly transmit secret across user kernel privilege boundary within thread across smt thread physical core logical core observable modification data instruction cache traditional cache hierarchy therefore detectable ability bypass recently propose cache channel defense rely deploy randomize cache index mechanism evaluate detail domain address leakage goal attack establish communication channel code within address proof concept attack leak information micro cache across code within address privilege discus technique improve bandwidth error rate channel extend attack detect secret across privilege proof concept implementation describes proof concept implementation exploit timing due conflict micro cache access code albeit operating privilege leverage distinct function available framework described IV version tiger zebra recall tiger function contend micro cache occupy tiger zebra occupy mutually exclusive cache micro cache allows conflict attack receiver spy executes tiger loop sender trojan executes version tiger function zebra function zero verify information transmit timing channel indeed manifestation timing micro cache instruction cache measurable performance variation probe performance counter instruction deliver decode pipeline micro cache noticeable signal due data instruction cache execution bandwidth optimization improve bandwidth accuracy timing channel tune parameter micro cache probed tiger zebra function sample measurement impact bandwidth error rate occupy occupy sample observation covert channel bandwidth increase reduce sample probe bandwidth mbps incur error rate probe sample probed significant impact accuracy conflict micro cache noticeable timing tiger function contend error rate drastically increase probed bandwidth kbps error rate probed limit sample report  bandwidth encode transmit data reed solomon encode  file roughly bandwidth kbps error leak information across privilege boundary extend proof concept attack described enable information disclosure across user kernel boundary leverage function described spy periodic trigger kernel routine secret dependent another internal kernel routine secret infer spy probe phase execute timing correspond tiger version internal routine timing channel bandwidth kbps accuracy kbps error correction confirms micro cache flush across privilege boundary channel tolerant interference due additional overhead II trace spectre variant performance counter attack llc llc μop cache reference penalty spectre cycle spectre μop cache cycle smt thread leakage examine thread micro cache leakage smt processor thread smt processor micro cache vulnerable microop cache attack however characterization suggests micro cache intel processor statically partition attention amd zen processor micro cache competitively thread amd zen processor micro ops thread evict micro ops another thread compete micro cache observation construct thread covert channel amd zen processor trojan sender thread encodes execute static instruction contend micro cache spy receiver thread constantly executes static instruction micro cache instruction execution sensitive micro cache rate spy execution considerably increase trojan sends enables achieve covert channel bandwidth kbps error rate kbps error correction VI  transient execution attack evaluate transient execution attack variant exploit novel micro cache vulnerability expose attack  bypass bound perform unauthorized secret data leverage micro cache channel disclosure primitive attack bypass software authorization performs secret dependent indirect function automatically trigger micro cache access predict target function thereby observable footprint micro cache instruction predict target rename dispatch execution proof concept attack described intel processor implement coffee microarchitecture variant μop disclosure primitive attack setup listing code vulnerable library contains secret memory array secret expose api victim function non secret array victim function performs bound index index within bound public char array int array char secret  uint victim function bound array misspeculation bypass bound return array return listing victim variant attack array return non secret index however described spectre attack bound bypass mistraining predictor predict bound accomplish repeatedly victim function bound index predictor sufficiently emit predict outcome micro cache covert transmission attacker leverage distinct function framework described IV version tiger sender receiver zebra attacker prime appropriate micro cache receiver version tiger function invokes victim function maliciously compute bound index transient array access array actually evaluates target location secret array victim function return speculatively access secret byte caller secret transmission attacker infer secret via micro cache channel attacker extract byte manipulation mask logic zebra transmit zero tiger sender version transmit channel inference attacker transiently execute instruction squash victim function return  error executes receiver version tiger timing icache decode directly micro cache attacker infer secret secret infer bandwidth stealthiness attack attack spirit spectre attack exploit transient execution bypass bound gain unauthorized access secret information however difference attack microop cache transmit information non speculative commit attacker code instead transmit llc attack faster II relevant performance counter measurement attack spectre attack reading sample reveal secret data timing signal clearly shift llc microop cache llc reference decrease significantly respectively whereas micro cache penalty decode overhead switch penalty substantially increase overall attack faster spectre attack difference dramatic attack leak secret  basis spectre attack leak byte  basis significant additional bandwidth optimization expand gap furthermore attack stealthy detectable traditional cache monitoring technique reference llc data instruction cache across hierarchy likely significantly gadget attack naturally spectre involve array access untrusted index guard security  taint analysis  security analysis web platform gadget  linux repository spectre identify gadget linux kernel version ability perform mask operation retrieve secret dependent trigger micro cache access demonstrate exploitability gadget replace gadget proof concept exploit code gadget specifically gadget pci driver routine pci  ind tag automatically generate appropriate tiger function channel inference attack reliably leak transiently access secret measurement signal micro cache combine attack spectre target injection arbitrarily gadget address comprehensive gadget analysis chain future variant bypassing lfence novel transient execution attack variant leverage micro cache disclosure primitive exploit indirect trigger micro cache access fetch  predict target micro ops transmitter instruction secret transmit via suitable disclosure primitive footprint micro cache dispatch execution exist invisible speculation defense potential transmitter instruction instruction queue prevent leak information bypass restrictive char secret  void victim function ID user authorization bypass mistraining user authorize asm volatile lfence lfence stall execution instruction transmitter indirect secret listing victim variant attack recommend intel lfence synchronization primitive forbids instruction dispatch execution transient execution attack demonstrate transmitter instruction observable microarchitectural hardwarebased defense strategy opportunity decode operand analyze information prevent instruction execute proof concept attack goal proof  attack consistently leak secret across lfence demonstrate victim function listing contains gadget guard authorization  however difference gadget relies transmitter instruction performs secret dependent indirect function secret dependent data access allows implicit transmission secret information fetch execute indirect predictor sufficiently accurately predict outcome transmit indirect instruction training via previous legitimate invocation victim function authorize user passing security essentially encode secret implicitly indirect predictor setup phase sufficiently  authorization guard spectre gadget spectre specifically target bypassing authorization influence outcome secret dependent indirect prime entire micro cache ensure timing measurement attribute linger data microop cache potential target indirect automatically generate prime appropriate micro cache correspond tiger version code predict target methodology described IV invoke victim untrusted input otherwise authorization fail however due mistraining execution proceeds speculatively beyond authorization essentially bypassing spectre execution lfence instruction transmitter prevent micro cache timing signal  lfence fence bound dispatch functional lfence commit however prevent instruction predict target secret dependent indirect fetch thereby trace micro cache secret dependent indirect evaluate accurately predict fetch instruction appropriate target appropriate microop cache execution recovers misspeculation transfer attacker secret infer probe micro cache appropriate tiger routine timing signal reveal evict victim function remain untouched ultimately disclose secret evaluate effectiveness attack presence synchronization primitive victim function authorization transmitter instruction synchronization primitive lfence prevents instruction dispatch execution  prevents instruction fetch signal execution synchronization primitive signal speculation restrict via  however signal lfence deployed serialize execution unlike spectre completely mitigate lfence vii discussion discus effectiveness attack presence exist mitigation countermeasure propose literature channel  attack discus extensibility mitigation defend attack categorize recently propose mitigation spectre related transient execution attack prevent covert transmission secret prevent unauthorized access secret data discus effectiveness attack presence defense prevention covert transmission secret exist defense focus covert transmission secret primarily target cache hierarchy channel within processor architecture partition defend conflict channel attack typically ensure isolation organize cache microarchitectural structure multiple per thread independent partition prevent conflict access within partition core smt thread attack prevent attack information leak across privilege albeit within although micro cache partition intel processor remains vulnerable attack spectre variant encryption randomization randomize index cache procedure impede eviction construction defense specifically target traditional cache directly apply attack attack additional icache cache hierarchy confirm performance counter measurement micro cache trigger fetch icache randomize index icache neither affect micro cache access affect extend randomize index micro cache entropy due extremely expensive unlike traditional cache micro cache implement cache procedure numerous placement described II effective entropy challenge address future recent defense transient execution attack prevent leak secret access along  category invisible speculation technique undo technique leverage invisible speculation delay speculative update cache hierarchy visibility resolve undo rely reverse speculative update cache hierarchy misspeculation detect attack completely penetrate primarily prevent covert transmission information traditional cache arithmetic albeit performance overhead specifically evict tiger zebra function icache cache information trace cache prevention unauthorized access secret data literature contains vast amount prior memory safety prevent unauthorized access secret data bound sophisticated capability machine transient execution attack ability successfully bypass software bound mistraining predictor temporarily override remain hardware capability machine finegrained memory safety remain vulnerable attack spectre offend instruction unauthorized access squash pipeline exception handle recently hardware software fence propose inhibit speculation security critical code prevent unauthorized access secret information typically rely inject speculation fence load instruction potentially access secret data thereby ensure load instruction dispatch execution instruction commit defense particularly effective prevent unauthorized access secret data exist transient execution attack however defend transient attack variant taint analysis detect data exist defense prevent  instruction dispatch execution speculatively fetch rename instruction queue thereby footprint micro cache stt  prevent instruction along  update predictor instruction access along correctly speculate eventually commit update predictor information non transiently access secret scope however variant attack instruction essentially implicitly encode secret predictor avoid without incur significant performance penalty unless  instruction annotate unsafe programmer automatic annotation mechanism accidentally encode predictor microarchitectural structure secret encode predictor attack leverage transient indirect instruction implicitly access secret reading predict target address predictor transmit via micro cache potential  discus potential attack mitigation information leakage micro cache flush micro cache domain crossing domain information leakage via channel prevent flush micro cache appropriate protection domain crossing simply accomplish hardware flush instruction translation lookaside buffer iTLB flush entire micro cache intel sgx already enclave entry exit enclave  code trace micro cache sidechannel inference however frequent flush micro cache severely degrade performance furthermore processor iTLB flush achieve micro cache flush frequent flush structure performance consequence processor progress iTLB refill selectively flush cache micro cache flush correspond instruction cache appropriate protection domain crossing tractable flush cache icache micro cache significantly fetch decode code protection domain switch considerably expensive already selective flush necessarily continuous monitoring attribution micro cache hardware tractable protection domain increase performance counter monitoring lightweight alternative disable flush micro cache leverage performance counter detect anomaly potential malicious activity micro cache instance micro cache reveal potential attack however technique inherently prone misclassification error vulnerable mimicry attack evade detection moreover grain measurement imperative performance counter probed frequently significant impact performance privilege partition intel micro cache statically partition performance isolation smt thread physical core logical core however prevent  attack secret information leak within thread across protection domain unauthorized countermeasure extend partition privilege code kernel user code interfere micro cache however scalable protection domain increase relatively micro cache partition scheme underutilization micro cache negate performance advantage moreover prevent variant attack prim probe operation perform user trigger secret return kernel code IX conclusion detailed characterization microop cache intel skylake amd zen microarchitectures reveal detail undocumented feature attack exploit micro cache leak secret primary setting across user kernel boundary across smt thread physical core logical core transient execution attack variant exploit micro cache timing channel bypassing recently propose defense literature finally discussion effectiveness attack exist mitigation channel transient execution attack identifies potential mitigation