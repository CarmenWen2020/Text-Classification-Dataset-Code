availability security unfortunately security tend induce crash exception attack trading availability security propose ZeRØ pointer integrity mechanism program execution attack ZeRØ proposes unique memory instruction novel metadata encode scheme code data pointer combination instruction metadata allows ZeRØ avoid explicitly tag memory eliminate performance overhead moreover ZeRØ deterministic security primitive minor microarchitectural ZeRØ commercially available hardware primitive pointer authentication pac significant margin ZeRØ incurs zero performance overhead spec cpu benchmark VLSI measurement overhead index exploit mitigation pointer integrity memory safety code reuse defense cache introduction pointer programmer raw ability memory location flexibility pointer program efficient programmer careful usage unfortunately error pointer usage bound access memory corruption vulnerability memory corruption vulnerability attacker significant opportunity exploitation attacker abuse memory safety vulnerability overwrite code pointer hijack program similarly attacker target data pointer sequence operation aka data orient gadget without modify program prevalence pointer manipulation attack software prompt processor manufacturer implement hardware mitigation primitive intel CET pac pac cryptographic message authentication code MACs integrity pointer namely return address code pointer data pointer unfortunately pac usage cryptographic primitive non zero performance penalty addition pac remains vulnerable speculative execution attack arbitrary pointer speculatively authenticate ZeRØ hardware primitive preserve pointer integrity additional performance traditional processor memory instruction freely access memory location restriction operand memory instruction behavior fundamental attacker craft exploit ZeRØ introduces unique memory instruction category pointer program code data specific memory instruction code pointer data pointer regular data allows ZeRØ enforce access maintain pointer integrity attack understand ZeRØ security guarantee normal program execution ZeRØ enforces data integrity namely return address integrity code pointer integrity data pointer integrity return address integrity aim prevent attacker overwrite return address stack aka return orient program rop return address integrity extend functionality regular ret instruction return address memory prevent memory instruction access attacker attempt overwrite return address hijack program return address marked access ret ZeRØ prevents attacker hijack ZeRØ code data pointer integrity introduce memory instruction access code data pointer respectively CPtrST CPtrLD instruction exclusively access code pointer attacker attempt overwrite code pointer regular memory instruction ZeRØ prevents memory access ZeRØ maintains data pointer integrity code pointer introduce specific DPtrST DPtrLD instruction variant unlike prior tag memory identify program asset code data pointer ZeRØ novel metadata encode scheme UI OOVBM  PNQVUFS SDIJUFDUVSF acm annual international symposium computer architecture isca doi isca return addr regular data foo ret load function ptr regular data memory return address integrity code pointer integrity memory CPtrST CPtrLD load data ptr regular data data pointer integrity memory DPtrST DPtrLD load ZeRØ enforces access maintain pointer integrity return address function pointer data pointer return addr regular data foo ret ret function ptr regular data memory memory CPtrST CPtrLD load data ptr regular data memory DPtrST DPtrLD load ZeRØ mitigates code reuse attack access prevent regular  corrupt pointer overview ZeRØ pointer integrity mechanism allows precisely metadata identify program asset per cache memory memory overhead ZeRØ additionally resilient operation pointer integrity attack attacker attempt overwrite pointer regular memory instruction ZeRØ reject violate memory access program execution forensics ZeRØ address operand violate instruction operating advisory exception unlike traditional exception advisory exception crash program unless program configure prevent attacker abuse defense launch denial service attack implement ZeRØ software llvm compiler infrastructure emit memory instruction pointer false positive experimental spec cpu benchmark suite software overhead ZeRØ baseline additionally VLSI implementation ZeRØ efficiently processor negligible performance overhead unlike pointer authentication ZeRØ dedicate budget cryptographic coprocessors standalone shadow stack II background overview memory corruption attack define threat model memory safety vulnerability program code target victim return address stack function pointer heap data pointer  data code corruption hijack data hijack data corruption ZeRØ pointer integrity defense memory safety overhead software hardware memory corruption target typical defense ZeRØ prevents attack vector pointer integrity performance overhead memory corruption attack taxonomy memory corruption attack memory unsafe memory corruption attack memory safety vulnerability buffer overflow attacker access vulnerability target program asset achieve various goal code corruption attack traditional approach exploit memory vulnerability aim overwrite program instruction memory attacker payload dump attacker code discretely program stack execute nowadays code corruption attack ineffective due widespread deployment  attacker cannot overwrite program data code marked readable executable writable cannot execute code data marked readable writable executable hijack attack attack aka code reuse attack CRAS exploit memory vulnerability overwrite code pointer memory corrupt code pointer transfer anywhere executable memory code pointer return address stack function pointer anywhere memory code pointer program memory stack heap target attacker return orient program rop corrupts return address whereas orient program corrupt function pointer indirect code address cra attacker analyze code identify attack gadget sequence instruction victim program return instruction attacker memory corruption vulnerability inject sequence target address correspond sequence gadget function return code pointer dereferenced location gadget gadget terminates instruction return transfer program execution gadget CRAS execute exist instruction belonging program prevent  data hijack attack contrast hijack attack data orient program DOP attack malicious without program prior manipulate data pointer memory sufficient attacker achieve arbitrary computation program input DOP attack alter program easily bypass integrity DOP appeal attack technique future exploitation defense data corruption attack attack target non pointer data item memory manipulate program flag bypass selective configuration parameter mitigate  data corruption attack memory safety performance overhead threat model adversarial capability assume adversary aware apply defense access source code binary image target program furthermore target program suffers memory safety related vulnerability adversary arbitrary memory address attacker objective memory corruption disclosure bug  attack achieve privilege escalation furthermore DOP attack threat model exclude pure data corruption attack threat model target non pointer data limitation applies prior due prominence speculative execution attack threat model harden assumption assume underlie operating OS trust OS compromise attacker kernel privilege attacker execute malicious code without CRAS mapping data executable suffice however technique apply operating code code data pointer assume ASLR  protection enable code injection non executable data code non writable immutable code attack modify program code runtime rowhammer clkscrew scope secret unlike prior ZeRØ secret parameter configuration security purely derive runtime enforcement  overview ZeRØ enforces pointer integrity program asset return address code pointer data pointer return address integrity prevent return orient program attack ZeRØ protects return address stack extend functionality regular ret instruction return address memory prevent program load access instruction execute return address stack alongside function argument ZeRØ metadata data cache return address ret instruction execute return address stack program counter metadata metadata verify program execution address ZeRØ metadata data cache memory location regular location non load instruction access memory location metadata hardware generates advisory exception effectively prevent return address leak overwritten advisory exception notify administrator access violation without crash function pointer integrity return address ZeRØ metadata data cache function pointer accurately identify memory instruction suppose access function pointer ZeRØ compiler proposes instruction code pointer load CPtrLD code pointer CPtrST access function pointer CPtrST function pointer location assigns unique distinguish function pointer return address CPtrLD instruction load function pointer location ZeRØ generates advisory exception regular memory instruction access memory location metadata data pointer integrity data pointer analogously function pointer similarly ZeRØ proposes instruction data pointer load DPtrLD data pointer DPtrST access data pointer functionality instruction mirror usage code pointer variant described memory data pointer assign unique metadata avoid confuse item return address function pointer elaborate layout ZeRØ metadata propagate memory pointer integrity addition distinguish program asset code pointer data pointer regular data ZeRØ achieves finer protection granularity distinguish program asset ZeRØ encodes pointer spare prototype pointer execute DPtrST verify pointer DPtrLD location pointer assign compile  analysis pointer compatible encode DPtrST DPtrLD site attacker cannot vulnerable DPtrST instruction corrupt data pointer incompatible reduce attack approach apply code pointer prevent attacker confuse incompatible function pointer function unique per CPtrST CPtrLD site instruction extension hardware compiler ZeRØ IV instruction EXTENSIONS aspect ZeRØ ability isolate code data pointer memory corrupt attacker memory instruction ZeRØ extends instruction architecture exclusively code data pointer CPtrST CPtrLD instruction code pointer code pointer load respectively traditional load CPtrST CPtrLD register operand register load address source destination register instruction emit compiler load code pointer compiler encodes code pointer upper upon execute instruction hardware correspond metadata data cache pointer upper memory location load address DPtrST DPtrLD instruction data pointer data pointer load respectively CPtrST CPtrLD emit compiler action various instruction memory location regular data return address code pointer specifically function pointer data pointer instruction metadata action metadata invalid cannot overwrite return address ret invalid cannot return non address metadata invalid cannot return function pointer invalid cannot return data pointer CPtrST metadata invalid cannot overwrite return address invalid cannot overwrite data pointer CPtrLD load code pointer invalid cannot load non code pointer invalid cannot load non code pointer DPtrST metadata invalid cannot overwrite return address invalid cannot overwrite code pointer DPtrLD load data pointer invalid cannot load non data pointer invalid cannot load non data pointer load load non pointer data item invalid cannot access return address invalid cannot access code pointer invalid cannot access data pointer  invalid cannot stack memory metadata metadata load data pointer upon execute instruction hardware correspond metadata data cache verifies pointer described  code data pointer correspond metadata memory freed functionality pointer metadata  instruction register operand register address cache register mask correspond cache allows disallows correspond byte mask perform partial update metadata within cache instruction treat similarly instruction processor pipeline modifies architectural data byte cache upon execute  instruction metadata target cache data cache additionally ZeRØ extends implementation regular ret instruction validity return address metadata data cache functionality guarantee integrity return address unlike prior feature instruction additional compiler explicitly return address metadata upon execute ret instruction summarizes action various instruction memory location cache data ZeRØ metadata return address function pointer data pointer regular data memory metadata chunk ZeRØ metadata encode data cache ZeRØ vector chunk byte return address function pointer data pointer regular non pointer data data array tag array ZeRØ metadata address decoder address decoder tag index offset mux aligner data advisory exception address calc ptr inst pipeline diagram cache operation shade correspond ZeRØ component microarchitecture microarchitectural enable ZeRØ data cache modification data cache metadata encode ZeRØ vector identify location return address function pointer data pointer cache metadata vector correspond align cache chunk return address function pointer data pointer regular data vector introduces storage overhead per cache storage data cache load access byte reading correspond vector advisory exception load commit exception handle circuitry program function library desirable suppress exception program intentionally access pointer regular load instruction ZeRØ hardware suppress advisory exception permit binary load OS writes address permit function library  cache data ZeRØ metadata pointer pointer pointer pointer ptr ZeRØ metadata ptr ptr ZeRØ metadata encode data cache memory ptr ptr encodes offset pointer cache whereas encodes return address code pointer data pointer ZeRØ metadata identify cache exception handle circuitry ZeRØ exception occurs hardware PC memory access instruction permit PC permit advisory exception suppress otherwise advisory exception fault PC memory address OS exception handler reporting investigation purpose entry permit entry byte byte function address byte cache modification schematic data cache memory metadata encode ZeRØ compress format metadata per cache storage overhead cache memory cache memory location return address code pointer data pointer unused byte upper pointer pointer upper encode metadata pointer cache offset within define return address code pointer data pointer zero easily identify content cache upper pointer location pointer scan vector occurrence data pointer operation implement priority encoder approach asset exist cache handle multiple pointer exist cache cache code data pointer unused upper pointer recognize traditional ZeRØ metadata entire distinguish format regular vector evict evict pointer zero pointer location address location obtain algorithm cache transformation metadata aka pointer per cache indicator pointer pointer cache otherwise cache normal processing dram additional per cache spare ecc similarly prior ddr standard DIMMs channel ample additional metadata  DRAMs ZeRØ byte per KB disjoint location memory additional transformation module ZeRØ format data cache another data cache transformation module switch format cache direction transformation module critical invoked cache evict transformation module critical processor load operation transformation carefully avoid latency data cache access algorithm transformation module diagram module  input vector detect address return address code pointer data pointer exists cache zero address detect simply pointer ZeRØ metadata zero address detect cache header accord priority encoders index address exist aforementioned location content cache algorithm combinational logic algorithm diagram transformation module cache pointer significant byte identify encode reconstruct content cache accordingly evaluate ZeRØ metadata completely hidden cache error correction code ecc technique  ZeRØ metadata without compromise typical ecc functionality extension future latency overhead transformation module load queue modification ret instruction generate load micro regular functionality CISC load return address instruction subsequent flight load instruction violate return address integrity avoid scenario ZeRØ extends load queue entry specify entry associate return address function pointer data pointer regular data addition pointer entry marked return address code data pointer CPtrST DPtrST instruction load ret CPtrLD DPtrLD instruction respectively tamper resistance channel attack ZeRØ zero entry flight load instruction potential  advisory exception thrown potential violate instruction commit avoid false positive due misspeculation operation perform parallel regular address performance impact VI software memory management compiler operating enable ZeRØ memory management ZeRØ agnostic memory allocator ZeRØ intercept program delete emits  instruction code data pointer metadata exists additionally ZeRØ emits  instruction function return cleanup stack frame compiler pointer integrity pointer integrity accurately identify load instruction access pointer prototype clang llvm compiler infrastructure replace program  data pointer load instruction CPtrLD CPtrST DPtrLD DPtrST code pointer initialize prior runtime entry virtual  function emits CPtrST instruction global pointer invoke function program initialization code pointer explicit instruction execute runtime pointer integrity prevent pointer confusion data pointer encode pointer significant prior execute DPtrLD DPtrST pointer llvm  depends data structure  cache data input cache data output ZeRØ metadata output location pointer combinational logic location pointer byte data ZeRØ metadata pointer ZeRØ metadata input combinational logic diagram transformation module spill operation input cache data correspond ZeRØ vector cache data output ZeRØ metadata output cache data input ZeRØ metadata input zero data location pointer byte ZeRØ pointer combinational logic lsbs diagram transformation module operation input cache data correspond pointer ZeRØ pointer insert entire vector significant byte vector location address data upper location obtain metadata address ptr data significant byte ptr algorithm cache transformation pointer readily available analysis similarly encode code pointer significant code pointer prior execute CPtrLD CPtrST prevent attacker confuse incompatible function pointer function unique code pointer return address integrity compiler return address integrity ZeRØ extends functionality traditional ret instruction finally recent feasible data pointer hardware compiler pointer feature enable ZeRØ relax compiler requirement data pointer integrity operating advisory exception ZeRØ hardware detects access violation exception instruction becomes non speculative exception advisory halt program execution instead notify operating invalid behavior program execution reject violate memory access ZeRØ hardware suppress advisory exception permit described desirable function byte memcpy  permit generate exception upon access address pointer wherever compiler pas emits aware copying function exception handle spec cpu benchmark gcc blender permit benchmark compiler pas successfully identifies operand emits instruction copying regular memory access instruction  swap ZeRØ metadata per cache swap memory fault handler metadata entire reserve address manage OS metadata reclaim upon swap kernel address kernel virtual address TB linux virtual address metadata metadata minimal KB stack unwind standard   program interface exception functionality  environment return address stack pointer memory buffer jmp buf  restores previously environment jmp buf guarantee return address stack pointer integrity jmp buf ZeRØ   insert CPtrST CPtrLD instruction address attacker cannot regular memory instruction overwrite return address stack pointer jmp buf approach apply exception handle mechanism appropriate apis context switch permit content byte maintain across context switch permit likely minimal overhead load instruction OS context switch typically OS related task remain intact inter data memorymapped file faulty instruction reject guarantee pointer integrity skip faulty load data program finally ZeRØ metadata inlined within pointer extra multithreaded application vii security analysis analyze security guarantee ZeRØ limitation security discussion return orient program attack corrupt code pointer prefer attack vector decade instance rop attack variant typically corrupt return address function hijack program ZeRØ return address integrity effectively mitigates attack adversary leak overwrite return address metadata per cache memory attacker overflow buffer adjacent return address ZeRØ reject action advisory exception access violates orient program attack return address alone sufficient advanced attack variant variation rop attack indirect instruction jmp transfer gadget attack technique orient program  another attack variant orient program cop gadget indirect instruction  cop code pointer indirect jmp instruction ZeRØ code pointer integrity protects code pointer manipulate memory attacker cannot pointer launch  cop attack counterfeit orient program attack unlike rop  cop attack instruction sequence counterfeit orient program  attack function invoked code pointer memory  pointer vptr vtable pointer virtual invocation therefore dereferencing vtable pointer compute respective index execute indirect instruction entry previous operand  attack typically hijack program overwrite  existent craft counterfeit arbitrary  ZeRØ prevents  attack code pointer inside  data pointer integrity harden vptr inside instance regular instruction vptr advisory exception counterfeit vptr access DPtrLD instruction data orient program attack unlike hijack attack data orient program DOP attack alter program instead DOP attack abuse data pointer simulate attacker arbitrary computation victim program mitigate DOP challenge prior defense due attack data pointer data pointer code pointer overhead significant ZeRØ inlined metadata allows data pointer integrity performance ZeRØ prevents attack ensure regular load  cannot corrupt data pointer pointer confusion attack attacker access DPtrST instruction potentially overwrite data pointer data pointer encode mitigate issue ZeRØ assigns unique identifier data pointer verifies DPtrST DPtrLD site identifier prevents attacker vulnerable DPtrST instruction corrupt arbitrary data pointer memory instead attacker restrict access data pointer compatible reduce attack comply standard ZeRØ permit access data pointer void char without flag violation data pointer incompatible similarly ZeRØ mitigates code pointer confusion attack function unique identifier CPtrST CPtrLD site report unique data code pointer spec cpu benchmark speculative execution attack speculative execution attack challenge security attacker leak program memory speculatively execute instruction suppose execute normal trace microarchitecture speculatively execute instruction leak information covertly ZeRØ prevent speculative execution attack ZeRØ multiple ensure speculative execution attack cannot bypass recent  attacker speculatively chain multiple rop gadget  speculative execution prime target indirect instruction construct gadget chain leak secret gadget speculatively execute defense exception upon execute ZeRØ resilient  regular data address code pointer processor pipeline instead potential violation advisory exception become non speculative  gadget attacker prim target addition speculative execution attack bypass pac speculatively execute pointer signing instruction gadget arbitrary pointer pointer attacker leak signature via covert channel forge pointer forge pointer bypass pac authentication attacker speculative execution attack bypass ZeRØ speculatively execute CPtrLD DPtrLD instruction leak pointer leak code data pointer cannot alter data program overwrite pointer instruction cannot speculatively execute finally  instruction cannot speculatively pointer metadata treat similarly instruction limitation non pointer data corruption focus prevent corruption pointer ZeRØ prevent regular non pointer data corrupt program load   aka non data attack tamper leak security sensitive memory defeat non pointer data attack memory safety typically significant memory performance overhead recent hardware  pac  opt exclude pure data attack simplify performance requirement code prior ZeRØ pointer integrity code library cannot advantage ZeRØ without recompilation facilitate communication unprotected code ZeRØ couple option option address code permit load instruction code normally without generate advisory exception option code  metadata memory thirdparty code invoke external library recognize external library compiler insert  instruction accordingly regular load instruction uninstrumented library access pointer without exception ZeRØ however return address metadata return address integrity program recompilation library legacy binary memory aliasing memory access instruction access memory location union pointer integer member access regular DPtrST instruction avoid false alarm ZeRØ statically detects occurrence compile emits regular instruction union access similarly emit regular  pointer cast integer memory emit regular  potential pointer reduces security coverage opt eliminate false positive idiom uncommon II delay overhead ZeRØ GE gate equivalent ZeRØ GE delay overhead transformation transformation evaluation hardware overhead implement ZeRØ ZeRØ performance prior spec cpu benchmark suite hardware measurement ZeRØ additional operation data cache interface cache qualitatively overhead ZeRØ metadata per metadata lookup happens parallel data tag access ZeRØ impact access latency verify hypothesis implement ZeRØ KB mapped data cache synthesize baseline data cache ZeRØ modify cache synopsys compiler  library  generate SRAMs data tag array data cache vector array ZeRØ report VLSI measurement II overhead associate ZeRØ pointer integrity minor delay consumption latency transformation module data cache latency latency implies transformation module fold completely within pipeline stage impact performance critical cache operation latency transformation module slightly acceptable spill operation processor critical cycle cache eviction impact program execution finally overhead transformation module negligible data cache software performance VLSI measurement guideline software evaluation VLSI measurement ZeRØ hardware impact access latency extra cycle perform integrity operation program instruction ZeRØ return address integrity instruction instead extends functionality regular ret instruction ZeRØ instruction access code data pointer CPtrLD CPtrST DPtrST DPtrST instruction simply replace traditional load code data pointer respectively extra register insert mov instruction unique llvm function pointer  data pointer  spec cpu benchmark suite benchmark benchmark     perlbench xalancbmk gcc mcf blender namd deepsjeng   povray leela lbm nab omnetpp encode pointer upper CPtrLD DPtrLD destination register CPtrST DPtrST source register pointer report unique data code pointer finally ZeRØ insert  instruction upon heap stack memory deallocation remove tag  data pointer exist emulate overhead  instruction insert dummy instruction correspond deallocation code comparison prior demonstrate implement ZeRØ pointer integrity technique pac spec cpu workload prior pac enforce  data pointer integrity pac available socs code emulation methodology estimate performance overhead llvm clang compiler pas insert exclusive xor operation account cycle latency introduce pac instruction addition ZeRØ instrumentation configuration pac fptr configuration pointer authentication apply function pointer usage  protection compiler pas insert dummy instruction whenever function pointer load memory emulate code pointer authentication memory emulate code pointer signing pac ret configuration pointer authentication apply return address  protection compiler pas insert dummy instruction instruction execute return address stack memory ret instruction execute authenticate return address load memory pac configuration pointer authentication apply return address code pointer data pointer addition configuration data pointer load instruction insert dummy pac instruction norm perf pac fptr pac ret pac ZeRØ performance overhead ZeRØ pac configuration spec cpu benchmark suite evaluation setup bare intel skylake xeon processor 6GHz  linux kernel spec cpu benchmark ref input completion minimize variability benchmark execute average execution report negligible variance performance runtime overhead approach normalize baseline execution defense suggests ZeRØ introduces performance overhead average maximum overhead pac fptr average maximum overhead pac ret average maximum code data pointer pac performance overhead average maximum situation costly pac practically deployed data pointer protection AOS reduces performance data pointer integrity bound chip cache instead signing authenticate data pointer AOS report average performance overhead spec cpu workload billion instruction gem simulator ZeRØ reduces pointer integrity zero minimal metadata memory overhead IX related ZeRØ performance advantage commercial pac explore memory corruption mitigation discus benefit difference IV prior shadow stack encryption memory safety technique shadow stack technique straightforward  integrity return address adopt shadow stack instruction execute return address regular stack additional memory instruction return address shadow stack function return return address restore stack shadow return address attacker manipulates return address stack mismatch occurs shadow stack accessible attacker intel enforcement technology CET shadow stack inaccessible program load CFI  protects shadow stack trustzone security extension ZeRØ return address integrity shadow stack apply legacy binary compiler modification however shadow stack extra memory access operation function return increase memory overhead unlike return address code pointer access ret instruction shadow  defense additional component code pointer aka transition intel CET  instruction entry invoked via indirect indirect occurs instruction  otherwise attack assume CFI  binary manner remove function indirect replaces dispatch instruction trap monitor monitor verifies transition pre compile graph cfg program trap monitor indirect CFI  performance overhead importantly technique rely static analysis construct cfg enforce runtime ultimately limited precision analysis ZeRØ instruction extension implicitly transition guarantee code pointer integrity zero code pointer integrity cpi relaxed variant code pointer separation compiler analysis instrumentation isolate code pointer memory concept shadow stack extends code pointer globals heap unlike ZeRØ inlined metadata cpi extra memory access per sensitive pointer access fetch IV comparison prior asset ret return address integrity protection  function pointer integrity  data pointer integrity data non pointer data integrity proposal asset hardware metadata ret   data operation overhead intel CET memory access per ret isolated shadow stack per  indirect FSM tracker return address CFI  memory access per ret trustzone shadow stack per verification return address cpi extra memory access per per sensitive pointer access sensitive pointer regulation memory access per ret isolated secure stack per verification function bound cache stack frame  pointer signing authentication aes processor ptr inlined pac pointer signing authentication  processor ptr inlined  tag per L1D tag per   pointer encryption decryption  processor tag per pointer displacement churn intel MPX mem ref bound unknown platform per ptr CHERI mem ref capability capability coprocessor tag ptr capability management instruction capability CHEx mem ref capability μop injection logic capability per ptr pointer alias speculative pointer tracker  mem ref programmable instruction per update extra pipeline stage califorms tag per L1D per per ptr ZeRØ tag per L1D per ptr inlined correspond metadata moreover prior cpi leak maliciously modify data pointer overwrites undermine security guarantee encryption technique eliminate memory associate shadow stack prior encryption randomize pointer layout memory attacker access encryption cannot reliably leak overwrite pointer xor encryption avoid performance pointer load operation  encryption vulnerable plaintext attack utilizes encryption aes cryptographic integrity   cipher pac  software evaluation ZeRØ completely eliminates runtime overhead associate pac code data pointer protection another encryption defense  architecture  code data pointer address  representation code pointer encryption periodically displacement ZeRØ  non pointer data corruption performance overhead unlike ZeRØ secret  parameter secret displacement code data encrypt decrypt pointer additionally limitation encryption technique additional per pointer operation aes operation per encryption mhz  operation per encryption magnitude ZeRØ metadata data cache consumption data access byte per memory safety technique memory safety vulnerability majority memory attack researcher manufacturer propose hardware address bound technique memory tag tripwires aforementioned technique pointer non pointer data item hurdle adopt performance overhead intel MPX introduce performance overhead whereas recent capability CHEx introduces runtime overhead memory overhead ZeRØ instead code data pointer integrity sufficient prevent code reuse data orient program attack runtime tripwires califorms performance overhead vulnerable non adjacent buffer overflow attack attacker leverage non adjacent buffer overflow redzones califorms corrupt victim pointer ZeRØ resilient non adjacent buffer overflow microsoft memory safety CVEs finally cache format introduce califorms ZeRØ simpler encode reduces complexity transformation module avoids latency performance critical operation moreover califorms metadata deny access byte whereas ZeRØ metadata enforce access data byte code data pointer conclusion user security inconvenience battery drain apps bother update crash unfortunate reality sends novel security technique minor performance overhead crypt security technique deployed hardware   SMAP zero overhead technique pointer authentication pac significant overhead apply fully apply partially code pointer kernel overhead performance overhead convenience widespread adoption security technique propose ZeRØ hardware primitive resilient operation memory corruption attack zero overhead ZeRØ enforces code data pointer integrity minimal metadata specifically per byte beyond overhead ZeRØ integrity code data pointer ZeRØ incurs performance degradation pac apply extent ZeRØ security guarantee pac intel CET moreover VLSI ZeRØ implement minimal latency overhead technique described exploit mitigation perfect complement identify mitigate broader memory attack extant memory safety technique suitable apps distribute customer overhead tolerate exploit mitigation technique ZeRØ overhead resilient operation suitable user deployment memory safety technique runtime overhead