serialization deserialization essential feature efficient communication distribute compute node potentially non uniform execution environment operation widely data analytics framework remote procedure massive data transfer shuffle however frequent operation incur significant performance overhead traverse graph prior approach improve throughput effectively hiding disk network latency computation increase compression ratio application specific customization however inherent dependency exist serialization format algorithm eventually become performance bottleneck propose cereal specialized hardware accelerator memory serialization serialization format hardware architecture cereal effectively utilizes abundant parallelism deliver throughput cereal employ efficient pack scheme compress metadata reference offset efficient bitmap representation layout evaluation cereal cycle simulator synthesizable chisel rtl demonstrates cereal delivers average throughput library java serialization benchmark suite spark application cereal achieves speedup average operation java built serializer kryo respectively index serialization domain specific architecture data analytics apache spark hardware software introduction serialization deserialization fundamental operation data analytics portable  communication distribute compute node efficient inter node data transfer sender node serializes byte receiver node reconstructs serialize byte massive data manipulation operation data analytics framework reduce shuffle heavily utilize operation operation incur substantial performance overhead data analytics framework manage runtime environment java scala recent report serialization overhead account execution popular data analytics framework accord google serialization along lowlevel operation memory allocation compression network stack processing consumes cpu cycle datacenter tax unfortunately exist library relatively throughput various java built serializer java embeds format expensive operation resolution deserialization bloat serialize library improve throughput adopt compact representation integer optimize serialization function compilation approach obviate extract information runtime operation backing array reduce encode raw graph overlap computation communication although proposal address inefficiency substantial improvement demonstrate operation execution average spark application kryo highly optimize library java detail serialization operation recursive traversal graph serialize reference serialize furthermore invokes function extract individual reflection exist library inefficient handle operation partly due limited parallelism within highly parallelize algorithm performance purpose CPUs bottleneck limited microarchitectural resource instruction load queue operation characterize frequent indirect load random memory access volume memory data reuse handle efficiently CPUs address limitation propose cereal hardware accelerator operation carefully serialization format hardware architecture effectively leverage multiple parallelism multi parallelism harness massive memory acm annual international symposium computer architecture isca doi isca parallelism mlp cereal achieve memory bandwidth utilization hence throughput overhead metadata propose efficient pack scheme compress reference offset preserve significant discard zero bitmap representation layout summary contribution propose serialization format expose coarsegrained parallelism maintain compact representation metadata via efficient pack architect implement cereal specialized architecture operation serialization format integrate cereal apache spark hotspot jvm validate functionality evaluate performance data analytics workload demonstrate cereal achieves significant speedup saving software implementation java serialization benchmark suite spark application II background serialization serialization convert byte deserialization reverse reconstruct byte fundamental operation data analytics framework massive data communication manipulation shuffle management distribute file message remote procedure variety implementation data necessity reference pointer serialization becomes complicate reference recursive graph traversal identify transitively indirect load fetch information layout recently identify performance bottleneck data analytics framework focus optimize operation java framework jvm execution environment java layout illustrates memory layout java hotspot widely production jvm code snippet fix header reference header compose klass pointer identity hash code synchronization GC unused klass pointer metadata descriptor contains layout layout offset reference serializer utilizes java built serializer java built serializer java baseline serializer java serialization format java  serialize serialize contains data metadata recursively reference serialize java java addition java metadata metadata associate serialization serialize contains amount metadata reference java package java lang reflect content reference insert serialize  package return specify void obj target input generally package source computational overhead java perform lookup information kryo serializer kryo popular thirdparty serialization library java kryo address limitation java manual registration serialize kryo unlike java kryo  integer primitive int register assign distinct  register registration kryo reduces overhead plus additional metadata java null overall overhead spark application serializer library metadata java kryo actual data kryo optimize library information serialization deserialization instead reflect package java optimization reduce overhead drastically user manually register serialize registry deserialization therefore kryo additional user effort performance skyway serializer skyway serializer specialized data shuffle node distribute skyway proposes transfer memory reduce computational overhead disassemble reassemble eliminates access impose exist  skyway integer ID kryo identify instead skyway global registry unique ID kryo unlike kryo however skyway reduce manual registration effort utilize automatic registration serialization skyway convert absolute address relative address eliminate overhead invoke reflect package adjust reference skyway reduces user effort computational overhead report speedup kryo average however sequential reference adjustment receiver inefficient serialize byte kryo serialize reference header analysis motivation overhead quantify overhead data analytics application analyze performance data analytics application apache spark hotspot jvm spark extensively utilizes operation input output management distribute file hdfs communication worker node data manipulation across node shuffle software cache data spill efficient memory management data analytics framework intensive application intel hibench execute spark executor instance intel processor detailed experimental setup available VI breakdown application computation GC runtime breakdown application java kryo spark analysis overhead operation substantial accounting average execution java svm kryo svm II java embeds serialize substantial overhead nweight excessive reflection function resolution involve expensive operation contrast kryo employ integer minimize metadata overhead kryo reflection resolution utilizes custom reflection library yield substantially runtime overhead java however kryo overhead substantial nearly execution average understand performance data structure benchmark commonly application graph ipc cache rate bandwidth utilization linux perf benchmark node depth graph detail benchmark VI observation relatively average IPCs java kryo demonstrates temporal locality cache rate finally cache rate fail fully utilize memory bandwidth due limited parallelism motivation specialized hardware abstract operation graph traversal serialization copying content another operation handle poorly purpose CPUs graph traversal indirect load indirect load inherently generate random memory access significantly degrade cache performance copying operation memory evicts cache increase cache rate moreover graph parallelism without exploit intra parallelism CPUs cannot fully utilize memory parallelism mlp due limited instruction load queue hence yield memory bandwidth utilization kryo improves java remove 1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK  1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK  1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK  1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK  analysis microbenchmark ipc llc rate bandwidth speedup inefficiency reduction reduce expensive reflective function performance gain marginal moreover data application compute intensive user computation contend operation cpu cycle specialized architecture extract parallelism within substantially improve performance reduce cpu load IV serialization format cereal serialization layout  format baseline serialization format cereal pack illustrative graph  layout bitmap location reference jvm align layout bitmap corresponds heap contains reference location obtain layout bitmap illustrates serialize format cereal compose structure array reference array layout bitmap graph structure fed packer IV illustration cereal baseline serialization format memory layout serialize format  format reduce serialize reconstruct address serialize notable difference cereal skyway reference aforementioned pack scheme deserialization skyway adjust reference sequentially relative address however cereal reference separately handle copying reference adjustment parallel layout bitmap contains location reference operation reference perform independently enables cereal exploit parallelism hence achieve throughput specialized hardware overhead analysis baseline format overhead layout bitmap proportional layout bitmap responsible layout bitmap layout bitmap byte boundary adjacent layout bitmap easy distinguish layout bitmap boundary layout bitmap however overhead layout bitmap per layout bitmap data alternatively layout bitmap pad fix bucket layout bitmap overhead due pad significant reference relative address difference address reference address  typically relative address finally overhead sum serialization optimize serialize format cereal pack reference array optimize serialize format serialize format serialization format overhead exist scheme compensate overhead propose pack scheme compress layout bitmap reference pack scheme cereal optimize pack scheme eliminate redundant metadata layout bitmap excessive pad reduce overall serialize byte optimize serialization format cereal pack illustrates pack reference packer extract significant reference zero bold optional pad zero bucket byte align boundary packed reference occupies layout bitmap static bucket  serialize cereal multiple reference inspect apply pack scheme layout bitmap reference contrast array header baseline format IV without apply scheme cereal architecture overview overview cereal architecture host issue serialization deserialization request software interface explain request buffer cereal command queue request scheduler inspects request queue available serialization SU deserialization DU request correspond execution cereal interacts memory directly without cache hierarchy instead cereal memory access interface cereal architecture overview mai performs functionality request coalesce conventional MSHRs software interface cereal serialization deserialization interface popular  kryo skyway essentially replace conventional serializer  cereal serializer  trivial initialize simply application secure amount memory cereal  register specify serialize  cereal function serialize  function effectively identical kryo serializer function serialize obj user    obj    output file  user    return    raw byte sequence associate  memory access interface mai mai memory access interface accelerator role mai correctly return response request various module cereal mai contains associative memory entry entry memory address outstanding request module response associate metadata related memory request addition mai contains multiple reorder buffer reorder unordered memory response requester response request finally mai atomic  within accelerator module within accelerator safely update without atomic operation mai contains another associative memory structure buffer outstanding modify operation serialization SU serialization diagram serialization SU consists component header manager metadata manager handler reference array writer data serialization component performs functionality specifically header manager responsible inspect header update header metadata manager receives header header manager fetch metadata memory generates packed layout bitmap cereal serialization format handler receives layout information metadata manager fetch memory layout information handler distinguish reference within sends reference address reference header manager update array memory lastly reference array writer receives relative address header manager performs pack IV output packed reference array serialization enters header manager graph header manager header header manager relative address sum already serialize sends reference array writer update header relative address header header manager sends klass address metadata manager already implies already serialize header manager relative address header sends reference array writer address metadata manager klass address header manager serialization metadata manager fetch metadata identify byte header reference metadata load metadata manager generates layout bitmap memory metadata handler handler load memory update array memory reference address reference header manager discus operation component detail header manager header manager address input header inspects inspect header header manager identifies already serialize load header metadata manager utilize header fetch various metadata another header manager update header trace header manager relative address header serialize indicates relative address currently serialize  format metadata manager return information header update counter responsibility header manager pas relative address relative address  format reference array writer explain previously address serialize previously relative address already header extract header manager cannot another receives metadata manager update counter metadata manager metadata manager retrieves header header manager fetch relevant metadata layout memory layout fetch memory handler addition generates packed layout bitmap utilize layout information finally fetch information header manager header manager update serialize handler handler receives metadata layout metadata manager metadata handler load memory load header reference extract reference extract handler header manager important pas reference within header manager guarantee memory access return request utilize reorder buffer memory access interface mai extract handler header klass address translate ID perform lookup content addressable memory cam structure klass pointer KB content  api software header buffer memory granularity buffer becomes data memory array cereal serialization format reference array writer reference array writer module output packed reference array receives relative address handle header manager performs pack generate packed reference array HPRU                    data deserialization deserialization DU deserialization diagram deserialization DU consists layout manager manager multiple  layout manager module fetch layout bitmap unpacks layout bitmap identifies header reference sends layout bitmap correspond along manager manager module internally prefetches array packed reference array fetch packed reference array unpacked immediately manager receives layout bitmap chunk along header reference retrieves amount header internal array loader amount reference internal reference array loader manager dispatch load layout bitmap reference available  finally reconstructor scan layout bitmap reconstructs byte output accord layout bitmap reconstruction reconstructor writes output destination address layout manager layout manager module eagerly fetch packed layout bitmap unpacks hardware module layout bitmap loader eagerly prefetches packed layout bitmap maintains amount internal buffer eagerly issue load request memory whenever buffer empty load layout bitmap fed custom unpack module unpacks layout bitmap finally custom logic cycle information unpacked layout module manager manager manager module module eagerly prefetch array packed reference array respectively layout manager load packed reference array unpacked custom hardware module unpacked internal buffer whenever layout manager layout bitmap retrieves array loader retrieves reference reference array loader sends layout bitmap retrieve retrieve reference available constructor addition maintains internal counter generate destination address reconstructor output reconstructor reconstructor reconstruct output manager assigns reconstruct prevents manager issue another reconstructor layout bitmap reconstructor simply correspond layout bitmap zero reference correspond layout bitmap additionally reconstructor identifies header ID layout bitmap chunk along correspond translate ID klass address appropriate index SRAM structure ID KB ID klass address mapping serialization SRAM  api software sends request destination address parallelism cereal cereal exploit parallelism operation parallelism parallelism across operation multiple cereal sus DUs multiple operation execute parallel parallelism essentially task parallelism exploit multi thread execution operation multiple cpu core parallelism parallelism across within graph SU exploit pipeline parallelism multiple within graph within graph parallelism parallelism across multiple unpacked DU decouple reference array layout bitmap enable deserialization parallel multiple  exist library java kryo utilize operation parallelism multiple cpu core multi thread execution however library cannot easily exploit neither parallelism parallelism conventional cpu lack ability extract parallelism due limited resource instruction load queue furthermore exist library serialization format limit amount parallelism contrast cereal leverage hardware specialization tightly couple software format optimization fully exploit abundant parallelism within operation implementation detail header extension cereal amount  metadata serialization however assign memory address per metadata performance degradation cereal serializer cannot easily retrieve address specific metadata avoid performance degradation cereal extends jvm potentially serializable implement java serializable interface allocate additional header cereal serializer utilize metadata serialization metadata easily retrieve relative address calculation address metadata metadata metadata metadata relative address already serialize traverse conventional graph traversal maintain header however approach reset zero traversal serialization however overhead potentially negate benefit cereal assign header purpose serialization happens application runtime per serialization counter incremented serializer traversal serialization counter reserve header serialization serialization counter counter overflow however metadata java garbage collection overflow likely serialization counter overflow garbage collection invoke serialization relative address already serialize however limited reserve purpose multiple thread perform serialization thread reserve implementation thread serialize reserve header ID another reserve access header ID header reserve cereal cannot perform serialization software handle serialization utilizes thread local hash relative address serialize potentially reduce performance benefit cereal however data analytics workload essentially serialize ID regularly garbage collection architectural PARAMETERS evaluation host processor core intel core TM cpu core 0GHz KB cache KB cache MB private unified MB unified ddr memory organization ddr channel 8GB bandwidth latency GB GB per channel zero load latency cereal configuration cereal serializer  mai tlb KB entry entry limitation cereal utilizes hardware structure cam serialization SRAM deserialization klass address ID translation serialization ID klass address translation cereal serialization  involves serializable however entry cam ram various application evaluate data analytics application spark serializable address translation cache coherence cereal assumes 1GB popular physical memory prototype 8GB physical memory assume tlb entry tlb however physical memory tlb cereal cereal deserialization DU sequential memory access tlb amortize cereal serialization SU random memory access therefore tlb potentially become performance bottleneck improve tlb effectiveness accelerator active research leverage recent proposal identity mapping coarse grain protection flatten coalesce MMU cache speculative address translation cache coherence cereal sends coherence message fetch date chip cache chip memory cereal directly chip bus participate chip coherence domain relatively straightforward potential increase memory latency due coherence operation effectively tolerate cereal pipelined execution VI evaluation methodology evaluation model evaluate cereal custom  simulator integrate dram model popular architectural simulator integrate simulator production grade jvm openjdk simulator access complex jvm internal function layout simplify layout microbenchmarks graph II microbenchmark configuration narrow leaf node leaf node graph sparse node dense node spark WORKLOADS workload input nweight graph MB vector machine svm machine MB bayesian classification bayes machine MB logistic regression LR machine MB terasort sort MB alternate ALS machine MB address constant acquisition functionally validate simulator checked simulator functional outcome workload spark application cereal software  java kryo kryo kryo version summarizes parameter evaluate software  cereal estimation implement cereal module rtl chisel synthesize cereal rtl synopsys compiler TSMC standard library throughout evaluation assume deserialization utilizes  multiple parallel workload evaluate cereal workload microbenchmarks java serialization benchmark suite  spark application evaluate microbenchmarks serializes graph random graph layout microbenchmark II microbenchmark configuration cereal performance library evaluate cereal   contains  repeatedly executes serializer pre define execute   average speedup serialize cereal lastly evaluate apache spark intel hibench carefully benchmark heavily summarizes workload correspond input  roi sufficiently heap 4GB default heap ratio generation minimize impact GC 1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK     performance software implementation cereal microbenchmarks 1DUURZ LGH PDOO DUJH SDUVH HQVH 1DUURZ LGH PDOO DUJH SDUVH HQVH UHH LVW UDSK UHH LVW UDSK     bandwidth utilization software implementation cereal implementation microbenchmarks microbenchmark analysis overall speedup kryo cereal java throughout benchmark kryo achieves significant speedup serialization deserialization integer tightly optimize reflection function cereal achieves speedup serialization deserialization java significant kryo cereal significant speedup utilization multi parallelism exist library java kryo fails exploit label cereal vanilla demonstrates hypothetical performance cereal without parallelism pipelining reconstructor DU operation parallelism assumes multiple sus DUs parallel cereal performance identify substantial amount performance gain indeed attribute grain parallelism parallelism DUs newly expose efficient format specifically serialization format decouples array reference array layout bitmap allows DUs execute deserialization parallel granularity regardless layout enables DU multiple reconstructor module improve throughput propose serialization format cereal DU handle deserialization sequential memory access maximize chip data reuse cereal achieves speedup deserialization serialization bandwidth utilization serialization deserialization java kryo execute cpu utilizes memory bandwidth java serializer kryo utilizes average IV   across various microbenchmarks MB graph narrow sparse dense java kryo cereal RUPDOL   performance comparison library dram bandwidth GB ddr memory channel respectively indicates ample hardware accelerator achieve substantially throughput without limited memory bandwidth cereal utilizes peak dram bandwidth average significant speedup deserialization cereal utilizes dram bandwidth average java  kryo respectively IV overhead microbenchmarks format java benchmark serialization format focus efficient computation cereal serialization format incurs modest overhead mostly additional metadata reference offset java kryo however cereal pack scheme metadata graph benchmark reference serialize efficiently format jvm serializer benchmark normalize speedup library cereal significantly speedup library achieves speedup average kryo manual library  optimization  utilizes integer reduce reflection overhead optimize reflection function  manually optimize serialization function aggressive optimization kryo manual cereal outperforms kryo manual due computation efficiency utilize multiple compute parallelism memory parallelism cereal significantly outperforms others cereal comparable others cereal average benchmark pack scheme reference bitmap metadata  HV      speedup spark application  HV      program speedup spark application apache spark speedup cereal software implementation spark application java kryo achieves speedup cereal achieves speedup java kryo throughout application cereal utilizes specialized hardware exploit abundant parallelism within operation expose specialized serialization format accelerate overall application performance improve java kryo respectively overall application performance improvement bandwidth utilization software cereal overall trend microbenchmarks  cereal utilizes substantially memory bandwidth software scheme deserialization significantly serialization carefully serialization format enable specialized hardware execute efficiently consequently serialization format cereal additional metadata bitmap reference java kryo reference serialize format cereal relatively overhead java kryo reference cereal java kryo respectively however cereal focus computation efficiency unique serialization format specialized hardware format compression ratio cereal across application pack scheme reduces reference offset layout bitmap naturally scheme effective reference cereal reduce serialize format strip  header serialization header strip however header  reconstruct deserialization incur additional  HV    bandwidth utilization cereal spark application  HV       HI rps  compression rate cereal pack scheme performance overhead pack scheme achieves moderate compression ratio average pack scheme effective workload nweight reference workload svm bayes LR reference therefore pack scheme  strip impact compression rate analysis breakdown cereal cereal serialization deserialization baseline cpu intel processor cereal occupies baseline cpu synthesize cereal technology effective difference becomes serializer occupies serializer  occupies  others component tlb mai consume average breakdown cereal host cpu TDP cereal consumes indicates generalpurpose cpu inefficient perform operation mainly consists arithmetic operation chip memory access specialized architecture operation achieves performance improvement saving consumption java kryo cereal spark application normalize java kryo host cpu java consumes geomean java serialization geomean java deserialization  device efficiency kryo speedup cereal consumes geomean java usage cereal serializer header manager reference array writer metadata manager handler serializer average  layout manager manager reconstructor  average tlb mai ID KB klass pointer KB average  HV    normalize consumption serialization geomean java deserialization cereal consumes geomean kryo serialization geomean kryo deserialization cereal java built serializer kryo respectively superior efficiency cereal attribute speedup specialized hardware vii related software optimization library propose pickle serializes scala statically generate code however reflection function runtime cannot compile skyway focus reduce inefficiency reflective function user effort manual registration however skyway achieves marginal average performance gain kryo inflate serialize heap approach propose alternative cope data representation heavily relies user  engineering effort dedicate compiler runtime hardware optimization  aim minimize cpu burden offload deserialization embed core ssd however ssd controller core overload various task FTL garbage collection flash function burden core performance degradation alternative approach  exploit fpga module offload deserialization parallel storage operation however relatively narrow applicability cannot reference inside ssd propose accelerate serialization  accelerator relatively marginal gain due limited utilization parallelism domain specific architecture data application recent propose various domain specific architecture accelerate data intensive workload graph processing garbage collection database application proposal overcome limitation convention cpu specialize hardware primitive data intensive computational operation within target algorithm exploit abundant data parallelism within algorithm utilize memory parallelism maximize chip memory minimize chip communication adopt emerge technology data processing cereal exploit technique efficient hardware serialization deserialization moreover proposal jointly optimizes serialization format along hardware achieve efficiency conclusion cereal specialized architecture operation widely data analytics framework careful serialization format hardware architecture cereal effectively exploit massive memory parallelism mlp processing parallel multiple reference multiple cereal introduces pack scheme metadata serialize compact cereal demonstrates substantial performance efficiency gain library cpu synthetic benchmark data analytics application apache spark