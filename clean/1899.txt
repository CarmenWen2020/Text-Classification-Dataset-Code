framework composable modular cmd facilitate processor cmd interface module instantaneous access perform atomic update inside module interface guard cannot apply unless module compose atomic interface module successfully update module cmd compile rtl FPGAs synthesize standard ASIC atomicity interface cmd ensures composability module refine selectively efficacy cmd building parameterized RISC processor boot linux FPGAs mhz mhz synthesize variant technology ghz ghz performance evaluation processor processor ipc architectural compete wider superscalar commercial processor module cmd framework rob reservation load refine implementation realistic framework revolutionize architectural research library reusable component grows introduction software community benefit source project permissive licensing reusable library apis flourish RISC ISA attempt processor community ISA  restrictive license suddenly become research community develop sophisticated sophisticated architecture benefit architecture community realize potential RISC implementation RISC implementation role exemplar community architect hardware development framework contribute framework variety replacement modify combine easily commercially competitive chip socs framework framework express multicores memory efficiently complex digital hardware component module compose complexity processor pas performance tune refining implementation various module module interact challenge compose module ensure module combine correctly performance tune phase module selectively refine essential composability modular refinement latency insensitivity request affect correctness overall knowledge module latency insensitive fifo interface compose easily refine individually however processor microarchitectural across module simultaneously interface atomicity beyond latency insensitivity atomicity interface governs concurrent execution multiple specify via conflict matrix module framework composable modular cmd address issue cmd collection module interact accord atomic interface module combinational access perform atomic update inside module interface guard cannot apply unless module compose transaction interface module successfully update module cmd compile rtl simulated software FPGAs synthesize standard ASIC hardware behaves multiple execute cycle behavior express execute cmd highly parameterized hardware synthesis rtl generation feasible parameter specify cmd framework annual acm international symposium microarchitecture doi micro express hdl appropriately annotate  verilog  benefit  enforces guard interface protocol atomicity violation detect compiler along combinational cycle enforcement considerably preserve correctness various refinement undertaken contribution composable modular cmd framework implement complex realistic microarchitectures parameterized module implement RISC processor module rob instruction issue queue load cache coherent memory parameterized processor built cmd framework boot linux FPGAs mhz synthesize technology ghz extensive performance evaluation spec cint parsec benchmark suite execute trillion instruction without hardware bug processor easily processor ipc compete wider superscalar commercial processor ultimate cmd ability ability others community refine future release http github com  csg  mit license organization II framework processor RISC introduces module cmd via IV illustrate atomic action across module important microarchitecture introduces  modular decomposition multicore define interface module module atomic VI discus performance spec benchmark processor RISC processor discus synthesis finally conclusion vii II related processor academic effort RISC processor mips RISC RISC II spur dataflow machine  sigma EM  attempt focus demonstrate architecture expectation improve refine exist implementation publication RISC ISA already  source processor probably necessarily source socs RISC processor source RISC others soc extent framework generate rtl variety specific configuration discus framework rocket chip generator developed UC berkeley generates socs RISC core accelerator RISC core parameterized cache predictor  ISA extension hardware multiplier atomic memory instruction FPUs compress instruction soc specify core accelerator chosen fix library interconnect parameter rocket chip generator synthesizable verilog rtl rocket chip generator soc module rocket chip generator implement berkeley outof boom processor rocket chip generator chisel  developed carolina allows assemble variety superscalar predefined pipeline stage  template instantiate desire  stage glue generate rtl superscalar core fetch stage issue register chosen predictor  successful generate heterogeneous core ISA multicore chip report comparable commercial craft rtl  intend modify pulp developed eth zurich goal pulp project easy ultra iot soc focus processing data variety sensor interface processor core intend refine within framework socs fabricate pulp framework structural guarantee correctness component timing assumption functionality timing assumption rigid fix cycle output others cache access timing assumption latency insensitive replace user observes timing constraint however mechanical verification perform ensure timing assumption violate timing violation obvious due interaction across timing assumption goal cmd framework ambitious addition parameterized user incorporate microarchitectural replace central instruction issue queue instruction issue queue functional traditionally knowledge internal function otherwise processor unlikely function encapsulate interface compose without understand internal detail recent argues agile development processor along agile development software methodological concern express orthogonal concern express methodology however advocate beyond structural module advocate achieve modularity amenable modular refinement interface METHODS  atomic   module  orient program java manipulate interface internals module beyond via allows alternative implementation interface associate extra interface hardware module  empty fifo software exception hardware model assume implicit guard signal invoked enable module invoked aka guard atomic action another difference software action multiple module concurrently action multiple atomic apply successfully none apply action definition guard generally apply guard exception explain encounter illustrate module generates hardware compute divisor gcd gcd illustrate latency insensitivity interface gcd interface action affect module return getResult  return addition affect module another affect return gcd interface interface replace getResult action  delete internally parameter define gcd interface implementation gcd interface  implementation instantiates appropriate reset register implementation gcd implementation interface getResult guard flag false invoked guard getResult register zero module getResult reset flag ensure picked interface latency insensitive gcd iteration compute finally implementation perform actual gcd computation implementation  accomplishes semantics implementation   inc compiler implement execute cycle register cycle update swap circuit generate implementation gcd interface gcd action  getResult  gcd interface module  gcd reg  reg  reg bool  false  swap  action   getResult false return   gcd implementation throughput gcd suppose gcd implementation initiate repeatedly another getResult implementation permit unless getResult previous execute therefore getResult rdy EN rdy getResult EN getResult logic EN generate hardware gcd gcd compute implementation gcd interface twice throughput  module compute concurrently  gcd implementation achieve module  gcd gcd gcd  gcd gcd  reg bool   reg bool outturn  action  gcd   gcd     getResult outturn gcd getResult outturn outturn gcd getResult outturn outturn return   throughput gcd implementation policy internal  module robin manner flag input output  module getResult generalize implementation improve throughput  module throughput achieve insist gcd module however interface tag identification input output interface latency insensitive aspect gcd affected module pipelined latency insensitive paradigm illustrate useful processor increase decrease functional inside memory non cache associativity IV atomic  across  latency insensitive paradigm useful compose module sufficient introduce instruction issue queue IQ microarchitectures guard interface extend concurrency instruction issue queue IQ processor instruction issue queue IQ structure IQ contains instruction rename issue execution pipeline source src rob tag instruction source contains physical register presence physical register file prf rename register vector rdyb associate presence register rename source register allocate destination register prf instruction along rob tag rob IQ copying prf presence rdyb presence rdyb destination register instruction reset instruction presence issue equivalently execution pipeline instruction leaf execution pipeline writes destination register prf presence additionally register IQ presence associate location update wakeup challenge IQ issue wakeup perform concurrently src rdyb prf IQ issue rename src execution pipeline wakeup reg atomicity issue reading register understand difficulty concurrently execute operation situation instruction IQ source register concurrently  without bypass wakeup signal logic instruction IQ source marked correspond entry prf marked newly instruction issue eventually deadlock avoid deadlock permit wakeup operation perform concurrently bypass source register register bypass exist glue logic rdyb IQ reside within rdyb IQ concurrent action destroy modularity hardware modify IQ implementation internal detail rdyb implementation rdyb implementation bypass IQ bypass concurrency issue examine placement wakeup bypass inside rdyb bypass implement update wakeup inside IQ bypass implement wakeup update entry newly insert instruction imply concurrent action wakeup happens happens wakeup crux correctness action perform atomically wakeup update rdyb IQ simultaneously action similarly rdyb update IQ atomically manner correspond wakeup perform perform wakeup bypassing consistent across module conflict matrix extend module interface concurrency module concurrently module interface definition specify concurrent permit permit functionality module execute concurrently execute execute information summarize conflict matrix CM specifies possibility CF conflict cannot concurrently concurrently net execute net execute CF conflict affect notion CM extends conflict conflict CF respect  compiler automatically generates CM module implementation declares illegal conflict concurrently CM gcd implementation getResult conflict update flag constructive procedure transform module implementation achieve desire CM  detailed explanation transformation procedure beyond scope CM information IQ without detailed implementation module composable modular IQ structure composable modular solves IQ concurrency interface module IQ rdyb implementation assume instantiate module rdyb correspond interface respectively module liberty declaration code avoid clutter IQ rdyb prf rename reg issue execution pipeline cmd concurrency module interface external interface IQ action  rdy rdy action wakeup    issue  interface rdyb bool rdy presence bool rdy action   presence action   reset presence  interface   decode rename rob bool rdy rdyb rdy  src bool rdy rdyb rdy  src rdyb   dst  rdy rdy    issue exec req  exe pipeline    exec resp inst leaf exe pipeline wakeup  dst rdyb   dst prf rob   invokes rdy rdy  rdyb module IQ concurrently conceivable IQ preserve atomicity  cannot execute execute concurrently affect     feasible various module IQ behave issue wakeup rdyb behave  rdy rdy  module satisfy happens overall module slightly suppose rdyb module internal bypassing therefore rdy rdy     longer execute concurrently preserve atomicity  concurrently rdyb module overall concurrency imply performance advantage modular atomic action interface oppose interconnection finite machine modularity architectural exploration illustrate another atomic action implication performance mechanism microarchitectural exploration execute concurrently affect     feasible various module IQ wakeup issue rdyb  rdy rdy  implies entry IQ  issue instruction issue cycle reduces cycle latency focus shift correctness exploration performance  processor overall structure core salient feature microarchitecture physical register file prf reorder buffer rob instruction issue queue IQ execution pipeline avoid clutter load lsq non cache etc predictor BTB tournament direction predictor return address stack enters instruction rob IQs rename epoch identify instruction instruction flush mispredictions load memory dependency fault address translation instruction flush assign speculation tag subsequent instruction affected tag speculation tag manage finite mask rename rob alu IQ issue reg exec reg mem IQ issue reg addr calc update lsq physical reg file tlb lsq LQ SQ commit bypass issue deq buffer resp issue resp rename speculation manager epoch manager scoreboard alu pipeline mem pipeline load fetch structure core instruction execution proceeds instruction longer flush release speculation tag correspond reset mask subsequent instruction tag recycle reduce mask assign speculation tag instruction defer handle interrupt exception load speculation failure commit stage module  instruction speculation mask  speculation mask  instruction repeatedly maintain prf presence reduce latency dependent instruction presence reg stage stall instruction another presence scoreboard optimistically register instruction predictable latency optimistic maintain scoreboard instruction IQ improve throughput instruction dependency module core contribution easily understandable interface module atomic compose module lack detail subsection discus salient module important briefly multiple core multiprocessor release publicly RiscyOO processor http github com  csg  due lack discus detail directly execution load execution execution consists multiple parallel execution pipeline instruction issue IQs pipeline simultaneously execution pipeline parameterized instruction execute register file program rob physical register file prf execution pipeline presence physical register unlike scoreboard presence data physical register IQ responsible raw dependency issue instruction source operand IV important module rob discus rob rob program flight instruction rename commit entry PC instruction speculation mask completion detect exception index lsq fault address memory instruction miscellaneous status instruction manipulate register  RISC overload fault address data reduce width rob entry data address structure without affect rob interface rob register csr data csr instruction flight another register fault address however lsq virtual address slot RISC memory access exception address translation addition enq deq rob  return index slot entry allocate  instruction specify rob index commit later  memory instruction address translation rob memory instruction access memory  rob notify lsq instruction commit slot normal  load memory mapped dequeued lsq exception load speculation failure bypass instead bypassing hoc manner structure bypass alu execution exec reg alu pipeline  pipeline exec reg pas alu reg cycle implement load load consists lsq buffer SB non cache lsq contains load queue LQ queue SQ flight load program respectively SB commit memory instruction leaf enters IQ memory pipeline allocates entry LQ SQ memory pipeline computes virtual address addr calc stage sends tlb address translation translation available update lsq stage fault memory instruction access normal cached memory memory mapped IO MMIO update rob LQ SQ entry instruction accordingly normal load execute speculatively SB SQ however stall fence partially overlap LQ internal logic  load cycle speculative load violate memory dependency detect marked update lsq stage update lsq address unlike normal load MMIO access atomic access load reserve conditional modify access memory instruction commit stage normal dequeued SQ sequentially commit rob tso SQ issue commit rob however dequeued SQ cache request SQ issue prefetch request currently implement feature weak memory model  gam dequeued insert buffer SB without issue SB coalesce cache issue normal load dequeued LQ sequentially load address become fault dequeued load correspond rob entry exception lsq mention earlier load queue memory dependency load load LQ index immediately precede SQ entry load issue LQ load cache SQ entry SB entry load issue proceed fence partially overlap load source stall retries source stall resolve rob flush load memory response load entry marked response reallocate entry load issue lsq module enq allocates entry LQ SQ load instruction respectively rename stage update memory instruction translate address compute data physical address data correspond entry memory instruction memory instruction load violate memory dependency upon memory model  perform implement mechanism tso  straightforward implement weak memory model  return load LQ issue load source stall response  issue load LQ index SQ stall input buffer combine queue load stall issue cache stall source stall load queue entry  memory response data load return response response   implementation buffer entry dequeued remove correspond source stall load queue entry  tso implementation cache evict load stale violate tso  instruction commit slot rob cannot squash enables MMIO atomic access access memory enables dequeued   return load LQ SQ   remove load LQ SQ buffer buffer enq insert buffer address exist entry coalesce entry otherwise buffer entry allocate issue return address  buffer entry entry issue deq remove entry specify index return content entry return content buffer entry address cache cache module req request cache load address correspond load queue index address correspond buffer index  return load response load queue index  return buffer index cache exclusive permission address indexed buffer entry cache remain lock  data indexed buffer entry cache  writes data cache data correspond previously respond buffer index interface cache tlb tlb fifo request response interface address translation tlb module cmd framework module core module implicitly describes datapaths module importantly guaranteed atomically concurrency bug challenge cycle achieve conflict matrix module conflict conflict matrix module mechanical translate initial implementation conflict implementation desire conflict matrix cycle behave another dozen instead introduce explain detail illustrate atomicity issue     issue load lsq module buffer stall due partially overlap entry  lsq combine buffer queue lsq derive load issue  response cache dequeues buffer writes finally wake load lsq stall earlier  load lsq    load addr  lsq  load   tag data fifo later   enq tuple load index data   issue cache dcache req load index load addr otherwise load stall    dcache  data   deq  dcache  data  lsq    lsq buffer without cmd framework cycle concurrency bug arise access lsq buffer load  lsq buffer contains partially overlap entry dequeued  valid buffer entry source stall load without cmd attention register cycle   buffer entry stall load   fail stall source load load stall forever without  retry cmd framework implement conflict cannot cycle cycle conflict matrix lsq   conflict matrix buffer deq cycle   multicore core multiprocessor cache communicate via TLBs sends uncached load request via another perform hardware memory access memory request memory instruction instruction fetch load coherent implement msi coherence protocol formally verify extend msi protocol MESI protocol prototype fpga core core becomes future partition multiple replace chip network core tlb tlb cache non core uncached load multiprocessor VI evaluation demonstrate effectiveness cmd framework parameterized superscalar processor RiscyOO cmd validate correctness evaluate performance microarchitectural synthesize processor aws fpga configuration core buffer processor boot linux fpga benchmarking linux environment syscall emulation core performance spec cint benchmark ref input completion instruction benchmark billion trillion processor mhz fpga benchmark multicore performance parsec benchmark  input completion quad core configuration mhz core performance multicore performance ASIC synthesis core performance methodology configuration refer RiscyOO RiscyOO processor cycle memory access fpga processor model memory latency bandwidth ghz fpga implementation processor rocket RISC ISA ISA denver ISA boom RISC ISA grouped processor category rocket processor denver commercial processor boom academic processor memory latency rocket configurable cycle default configuration rocket evaluation rocket default cycle memory latency rocket cycle memory latency rocket cache instantiate RiscyOO configuration processor shrink cache RiscyOO configuration KB KB illustrate flexibility cmd another configuration RiscyOO improves tlb microarchitecture RiscyOO RiscyOO TLBs tlb memory execution pipeline RiscyOO parallel handle TLBs maximum tlb tlb RiscyOO split translation cache cache intermediate cache contains fully associative entry implement microarchitectural optimization cmd merely instantiate RiscyOO configuration extends rob RiscyOO boom rob boom summarize variant RiscyOO configuration RiscyOO RiscyOO  evaluation spec cint benchmark perlbench compile RISC prototype aws confirm author actually publicly release version benchmark ref input completion processor boom performance directly boom publicly release fpga image boom processor ISAs fabrication technology performance cycle benchmark cycle factor across processor performance evaluation informative rigorous goal processor cmd achieve reasonable performance superscalar fetch decode  entry mapped BTB tournament predictor alpha entry return address stack execution entry rob insert commit pipeline alu mem FP mul div entry IQ per pipeline entry LQ entry SQ entry SB TLBs entry fully associative entry associative cache KB associative max request cache MB max request coherent memory cycle latency max req 8GB 2GHz RiscyOO configuration RISC uniprocessor description  rocket prototype aws fpga  demo RISC ISA core KB cycle cycle memory latency cortex core nvidia jetson ISA superscalar core KB KB MB commercial denver denver core nvidia jetson ISA superscalar KB KB MB boom performance RISC ISA superscalar core entry rob KB MB cycle latency cycle memory latency academic processor variant difference specification RiscyOO cache KB KB RiscyOO improve tlb non TLBs cache RiscyOO rob RiscyOO entry rob variant RiscyOO configuration tlb microarchitectural optimization processor evaluate tlb microarchitectural optimization employ RiscyOO performance RiscyOO normalize RiscyOO benchmark imply performance geometric across benchmark tlb optimization RiscyOO effective average RiscyOO outperforms RiscyOO performance benchmark astar understand performance difference tlb tlb mispredictions cache cache per instruction RiscyOO benchmark mcf astar omnetpp tlb rate although RiscyOO tlb TLBs tlb incur penalty non tlb translation cache RiscyOO mitigate tlb penalty substantial performance gain evaluation microarchitectural optimization significant performance benefit cmd implement evaluate optimization RiscyOO outperforms RiscyOO RiscyOO instead RiscyOO processor performance RiscyOO normalize RiscyOO tlb tlb mispredictions per instruction RiscyOO comparison rocket processor performance RiscyOO rocket rocket benchmark performance normalize RiscyOO libquantum data rocket attempt benchmark aws server crash around execution rocket  RiscyOO benchmark probably pipeline cannot hide memory latency average RiscyOO RiscyOO outperform rocket respectively although rocket cycle memory latency RiscyOO outperforms rocket benchmark RiscyOO outperform rocket benchmark average  RiscyOO outperforms rocket respectively comparison processor easily outperform processor comparison commercial processor performance processor denver benchmark performance performance RiscyOO rocket rocket normalize RiscyOO normalize RiscyOO denver generally faster RiscyOO benchmark mcf astar omnetpp average outperforms RiscyOO denver outperforms RiscyOO understand performance difference revisit rate RiscyOO tlb rate benchmark mcf astar omnetpp tlb optimization enable RiscyOO outperform denver benchmark commercial processor significantly performance benchmark hmmer href libquantum benchmark hmmer href rate TLBs cache prediction performance denver wider pipeline superscalar denver benchmark libquantum cache rate commercial processor employ memory prefetchers reduce cache detail commercial processor cannot performance difference spite comparison performance norm however beyond superscalar processor architectural performance denver normalize RiscyOO comparison academic processor boom IPCs boom  comparison RiscyOO boom RiscyOO boom rob cache influence benchmark ref input sometimes compute ipc aggregate instruction cycle instruction report boom longer latency boom partially offset longer memory latency RiscyOO boom report IPCs benchmark gobmk hmmer libquantum IPCs remain benchmark harmonic IPCs benchmark average RiscyOO boom performance outperform benchmark benchmark mcf RiscyOO ipc outperforms boom ipc tlb optimization benchmark sjeng boom ipc outperforms RiscyOO ipc partially RiscyOO suffers mispredictions per instruction boom comparison processor cmd performance academic processor IPCs boom RiscyOO boom summary parameterized processor cmd benchmark trillion instruction without error easily outperform processor rocket academic processor boom highly optimize commercial processor multicore performance methodology implement quad core multiprocessor fpga core processor derive core cmd memory model cmd methodology derive version core tso  respectively lsq module surround onto fpga core instantiate entry rob buffer reduce accordingly core fetch decode rename commit pipeline parsec benchmark tso   multiprocessor parsec benchmark compile raytrace vip dedup RISC manage compile bodytrack canneal cannot RISC ISA simulator golden model riscv implementation therefore remain benchmark evaluation benchmark  input completion thread respectively execution parallel phase marked parsec roi parsec roi performance benchmark tso  multicores thread benchmark performance normalize tso thread geometric across benchmark imply performance discernible difference performance tso  speculative load tso cache eviction extremely rare maximum per instruction benchmark streamcluster phenomenon benchmark freqmine super linear speedup investigate explanation core data core becomes rate tlb cache become performance tso  multicores thread normalize tso thread legend tso  tso  thread ASIC synthesis evaluate quality synthesize core processor pipeline cache RiscyOO RiscyOO processor configuration ASIC synthesis  technology SRAM timing information CACTI perform topographical synthesis synopsys compiler perform timing driven synthesis performs placement heuristic resistive capacitive delay timing model approach significantly reduces gap synthesis placement rout maximum frequency configuration reporting frequency successfully synthesize nand equivalent gate default width nand standard library nand equivalent gate logic SRAMs core configuration RiscyOO RiscyOO max frequency ghz ghz nand equivalent gate ASIC synthesis synthesis processor ghz RiscyOO configuration RiscyOO configuration RiscyOO increase rob speculation tag RiscyOO nand equivalent gate processor significantly affected predictor reduce reduce tournament predictor utilize SRAM predictor vii conclusion fully benefit openness RISC architecture community framework cooperate hardware although exist chip generator parameterized building frequent building  interface alone insufficient processor propose cmd framework module guard interface compose atomic action atomicity guarantee cmd module refine selectively rely interface detail conflict matrix module efficacy cmd processor fairly complex architectural feature synthesis performance encourage sufficient effort community deliver commercial grade processor future