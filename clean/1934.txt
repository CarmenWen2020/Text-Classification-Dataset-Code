harvest device solely environment forth paradigm intermittent compute device  frequent outage conventional stuck perpetual loop restart computation progress ensure progress intermittent execution model nonvolatile memory backup potentially execute upon loss restore interplay spending useful processing spending overhead yield unexpected offs facilitate exploration intermittent compute model generalize offs architect programmer stage decision propose EH model characterizes intermittent ability maximize available spent useful processor execution model  associate intermittent execution intuitive understand progress EH model explore progress impact frequency backup backup restores validate EH model hardware measurement msp characterize parameter via simulation demonstrate architect programmer model explore intermittent processor derive insight model optimization unique intermittent processor architecture introduction  operation compute device introduces challenge offs programmer computer architect ambient source photovoltaic thermal RF wifi constant device typically average device overcome approach capacitor device sporadic ambient source execution model inherently intermittent computation computation application deplete cannot resume device harvest sufficient environment intermittent computation application nonvolatile memory deplete restore available intermittent architecture maximizes available spent useful progress overhead backup restores building architecture task researcher propose variety processor inorder core complex core diverse nonvolatile memory technology flash fram variety approach propose demonstrates vast intermittent processor architecture architecture perform backup cycle critical explicitly program implicitly infer hardware program counter register file volatile memory data cache data dirty programmer manually code nonvolatile memory task program model checkpointing scheme simply rely hardware perform backup hood simulator exist specific rapidly explore intermittent processor inform future architecture address extend EH model analytical model exploration generalizes characterizes complex unconventional offs arise intermittent processor validate model demonstrate utility  exploration behaviour application architect focus effort maximize progress backup restore mechanism programmer estimate application perform specific architectural configuration optimal task chain circumstance architectural optimization reduce precision beneficial intermittent programmer transform code perform architecture memory locality mixed volatility cache EH model architect programmer derive insight rapidly explore model  research harvest EH canadian annual acm international symposium microarchitecture doi micro cpu transducer nonvolatile memory backup restore processor volatile memory abstract harvest device alleviate complexity efficient intermittent II background abstract harvest device transducer harvest environment capacitor hardware component cpu nonvolatile memory backup restore mechanism typically capacitor minimum threshold execute progress phase minimum threshold active phase capacitor deplete transition active phase intermittent computation function harvest environment architecture challenge intermittent computation progress execute instruction nonvolatile memory intermediate volatile memory lose outage expend instruction output outage wasteful overview prior intermittent compute progress frequent outage technique category multi backup backup multi backup multi backup typically performs backup within active memento insert checkpoint code loop iteration function volatile memory SRAM nonvolatile memory flash dino chain alpaca  program atomic task backup perform boundary task maintain consistency ensure progress ratchet clank data modify outage periodically data nonvolatile memory backup backup per active hibernus  analog digital converter adc voltage dip pre define threshold upon increase efficiency intermittent compute nonvolatile processor multi backup augment conventional processor incorporate volatile memory SRAM outage alternative approach nonvolatile memory fram   nonvolatile processor NVP explicit checkpointing preserve across outage upon recover outage resume processing immediately without restore however nonvolatile memory suffers consumption  backing cycle backing voltage threshold EH model capture conventional NVP architecture NVP cycle characterize multi backup threshold characterize backup demonstrate EH model multi backup IV backup architecture IV remain characterize VI detailed description EH model EH model goal model enable exploration intermittent processor architecture estimate progress prior model behaviour  source RF vibration photovoltaic piezoelectric contrast focus model processor intermittent execution harvest EH model focus active expend execute instruction perform backup restores differentiate spent progress backup restores execution outage model parameter output model estimate progress expend useful spent backup restores execution characterize fundamental consumer spent progress spent backup spent execution spent restore budget fix increase device active model additional device rate equation consumer rate model component equation opt incorporate individual equation simplify discussion without loss fidelity EH model input PARAMETERS  parameter joule per active joule cycle execution per cycle joule cycle per cycle backup parameter cycle backup byte cycle memory backup bandwidth ΩB joule byte backup AB byte architectural per backup byte cycle application per backup restore parameter byte cycle memory restore bandwidth ΩR joule byte restore AR byte architectural per restore byte cycle application per restore model output cycle spent progress spent progress progress application  amount per cycle execute active cycle progress spent progress compute via equation along additional per cycle execution processor sensor peripheral active technique reduce duty cycling sensor dynamic voltage beneficial progress backup active computation nonvolatile memory progress approach multiple within active others characterize backup cycle backup compute spent backup nonvolatile memory ΩB byte per backup fix byte AB architectural program counter register incur variable backup proportional application backup byte cycle dirty data volatile cache amount depends application footprint explore VI spent perform backup gain additional inversely proportional nonvolatile memory backup bandwidth msp cpu corresponds cycle per mhz cycle per mhz calculate expend backup ΩB AB ideally data deplete application expend computation nonvolatile memory cycle backup contribute calculate amount expend spent progress equation replace application computation restore cycle due non deterministic application behaviour simplify model average cycle equation discus impact variability IV average restores application resume execution expend restore mirror backup overhead equation incurs access nonvolatile memory ΩR amount architectural AR application restore AR fix byte processor restore active register file variable revert cleaning uncommitted execution previous active flush instruction nonvolatile processor gain additional restore duration inversely proportional nonvolatile memory restore bandwidth compute restore ΩR AR model output percentage spent progress equation yield denominator progress ratio backup overhead useful backup commits backup reward ratio governs rate application additional progress due active rate generally consumption rate progress approach numerator restore incur per active limit progress backup completely eliminate denominator impose upper bound performance minimize architect programmer garner implication equation explores detail discus insight reveal IV  previous demonstrate estimate progress consumption component equation focus architect model maximizes progress paradigm introduce II multi backup backup recall multi backup invoke backup active whereas backup invoke detail application EH model approach intermittent compute device multi backup generalize multi backup architecture invoke periodic backup cycle average define periodic backup program induced backup periodic backup hardware watchdog timer backup cycle clank compiler insert checkpoint memento nonvolatile processor cycle program induced backup task commit transaction chain  average task memory operation violate idempotency clank idempotency explore VI formulate model characterize arbitrary backup per active model multi backup appropriate backup optimize backup minimize cycle balance restore versus backup IV IV IV optimal backup cycle apart backup maximize progress  progress normalize varies backup backup ΩB execution active illustrative purpose focus trend oppose assume restore overhead brevity straightforward extend analysis progress backup execution ΩB cycle progress multi backup backup ΩB normalize assumes AB ΩR progress backup execution ΩB cycle progress multi backup backup ΩB normalize architectural AB assumes ΩR takeaway reduce backup performance backup approach progress favour frequent backup minimizes cycle backup cheap takeaway optimal backup  varies backup equation obtain optimal opt ΩB AB ΩB ΩB ΩB AB ratio ΩB AB ΩB dictate optimal cycle backup numerator compulsory per backup denominator proportional backup backing frequently compulsory backing frequently proportional equation programmer estimate optimal task code chain task optimal backup designer configure optimal checkpoint watchdog timer clank appropriate duration watchdog interrupt architectural AB approach sweet backup progress monotonically non increase rare nearly progress cycle backup average progress multi backup assumes ΩB AB ΩR zero architectural dirty register modify  selective backup nonvolatile processor program counter compulsory backup assume backing architectural AB equation leaf relationship  application frequently overhead decrease proportionally backup equation variability cycle analysis multi backup assumes average cycle equation due non determinism fluctuation source application input dependent program behaviour cycle dramatically across active explore variability affect important decision progress varies cycle parameter assume restore simplicity takeaway variability diminishes backup approach backing decrease likelihood execution conversely backup increase risk backing possibility ideal scenario backup invoked active introduces aggressive performance gain desire architect backup schedule intelligent speculative consistently minimize cycle performance latency important architect sacrifice average opt   amount per active employ voltage frequency maximize efficiency analysis upper bound progress  related apply advanced speculative technique cycle apart backup invoked maximize progress glance assume equation sufficient however assumes average cycle instead opt ΩB AB ΩB ΩB ΩB AB average equation takeaway opt opt optimal backup average important consideration latency backup restores cycle backup focus minimize backup restore overhead multi backup decision arises situation architect optimize average task programmer optimize periodic backup impose watchdog timer glance assume optimize backup performs restore per active backup insufficient progress explore interplay backup backup restore overhead backup becomes significantly approach performance improvement reduce restore outweighs backup progress inversely proportional backup restore overhead partial derivative negative reduce yield performance investigate cycle backup takeaway backup reduce backup backup reduce restores frequent backup architect focus optimize backup mechanism improve performance nonvolatile processor designer discard structure instruction fetch queue predictor conversely backup increase restore overhead dominate becomes likely backup invoked within active happens execution actually restore invocation backup invocation backup exceeds analysis architect programmer gain understand focus optimization effort backup instance clank checkpoint due idempotent violation watchdog timer frequency checkpoint inform clank architect optimize restore backup overhead backup characterize backup architecture invoke backup per active signal imminent loss hibernus backup nonvolatile processor model backup backup cycle extreme compute progress backup ΩB AB ΩB difference equation execution effectively assume cycle equation advantage multi backup introduces risk perform backup potentially nonvolatile memory inconsistent reading voltage adc monitoring imminent loss generally expensive yield overhead summary exploration implication EH model efficient harvest model characterizes multi backup architecture explore optimal backup programmer granularity task architect configure optimal watchdog timer architect guideline optimize backup restore overhead model compute upper bound performance accounting non determinism intermittent execution useful seek aggressive performance gain VI dive deeper additional demonstrate application EH model experimental model validation characterization experimental RESULTS hardware validation EH model estimate progress texas  platform embed  microcontroller msp extensively  validation counter program demonstrate EH model capture variation progress cycle backup varied validation harvest backup hibernus multi backup memento dino finally progress cycle backup validate multi backup hardware dash upper bound estimate EH model obtain model parameter application exist hardware clank via simulation therefore extend simulator prior characterize application namely profile cycle backup cycle application parameter validation mimic multi backup backup fix interval constant throughout experimental sweep backup multiple application increment counter interrupt occurs cycle upon application data data consists array timestamp nonvolatile fram array byte varies varied application byte cycle simulation byte cycle slightly average consumption instruction execute TI  load operation memory consume instruction consume progress onboard timer active prior plot progress dash upper bound predict EH model variance data due variation cycle backup active cycle alternatively active backup cycle progress data within bound calculate EH model demonstrate capture trend explore intermittent architecture progress hardware progress predict EH model harvest hibernus II BENCHMARKS USED hardware validation description rsa data encryption crc checksum calculation statistic calculation sensor data AR activity recognition sensor data midi audio data DS histogram data logger rsa crc rsa crc AR midi DS progress predict progress hibernus memento dino progress predict progress EH model diagonal corresponds zero error model estimate memento dino benchmark II cycle spent phase execution progress backup restores cycle toggle cycle pulse purpose  pin phase signal capture performance microcontroller allows faithfully capture cycle spent msp microcontroller without affect platform apart minimal toggle  cycle duration active monitoring voltage msp microcontroller threshold voltage specify device manufacturer comparison progress predict EH model measurement msp  geometric error predict actual application AR midi exhibit error dino due EH model cycle backup however benchmark backup cycle cycle backup average input EH model error application predict progress memento geometric error recall multi backup EH model AR DS midi progress relative similarity opt correlation progress relative similarity optimal opt EH model estimate cycle however cycle memento dependent amount backup account minimum voltage threshold however memento checkpoint perform another backup additional difference estimate minimum voltage threshold checkpoint progress prediction EH model validate estimate optimal backup opt equation correlate progress application progress dino benchmark plot average dino optimal backup estimate model AR benchmark achieves average nearly opt progress contrast DS midi optimally significantly progress EH model insight application designer ideal opt aim maximize progress characterization extend simulator clank understand EH model parameter capacitor model simulator harvest  voltage trace evaluate subset  suite compile gcc embed processor update simulator statistic active backup cycle backup cycle brief description clank characterization backup clank backup induced idempotency violation idempotent sequence instruction interrupt execute idempotency violation specifically nonvolatile memory location backup backup cycle backup average error standard error cycle average error standard error lose instruction completes execute previous checkpoint memory instead incorrect identify violation clank volatile buffer detection logic propose buffer optimization minimize backup implementation clank employ entry buffer entry  buffer violation cycle watchdog timer idempotent violation clank cortex register restore timing datasheet core plot average backup cycle respectively across voltage trace trace contains spike trough trace gradually increase voltage voltage trace multiple peak trough error standard error standard deviation distribution sample distribution parameter closely packed around median variation outlier error variation insignificant distribution across voltage trace nearly identical function active amount within active relatively stable sequence idempotent violation byte per cycle average error standard error idempotent violation signal backup variation cycle benchmark reflect similarly backup cannot exceed introduce variability simulate hypothetical mixed volatility processor parametrized watchdog timer implement unbounded queue modification application within backup queue additional ΩB plot average application watchdog timer backup cycle backup increment cycle byte per cycle across benchmark average byte per cycle combine backup understand progress data understand likelihood idempotent violation  frequent backup clank likely due rate parameter chosen recreate scenario exhibit realistic benchmark evaluate future intermittent processing device VI STUDIES apply EH model intermittent processor locality conventional architecture cache locality load instruction generally beneficial performance locality instruction unlike reading data modify data typically critical execution theart intermittent processor equip volatile hybrid volatile nonvolatile cache processor nonvolatile memory upon backup dirty data nonvolatile memory critical execution prevent inconsistent nonvolatile update programmer architect reconsider offs load locality explore matrix transpose program listing array encode standard memory conventional approach iterate listing loop conventional load nest loop load innermost loop iterates contiguous dimension array yield maximum cache locality load instruction suffer cache   load average  cache  byte per load instruction incur cache access assume array cache conventional architecture concern performance processor execute without service memory however intermittent processor load increase byte factor   average  byte per instruction due dirty tracked cache granularity instead byte granularity latter expensive metadata overhead illustrate load loop program backup invoked   instruction inner loop dirty cache due maximum locality however load iteration   cache  byte modify characterize ratio performance overhead cycle load loop   loop                average byte application per cycle  nonvolatile memory bandwidth load operation simplify equation loop improve performance  loop       ratio unique dirty application unique application load cache ratio backup bandwidth bandwidth nonvolatile memory device programmer transform loop application footprint footprint backing listing circular buffer idempotency conventional circular buffer idempotency nonvolatile memory expensive relative reading listing footprint matrix transpose program assume latency reading backing nonvolatile memory   yield performance takeaway apply conventional architecture memory device latency latency stt ram  loop beneficial highlight importance reconsider conventional offs insight optimize program cache locality intermittent processor architecture circular buffer idempotency conventional thread generally programmer concern eliminate induce memory dependency instruction memory location immediately load instruction location neither particularly performance however clank processor important consideration backup induced idempotency violation clank average idempotency violation program violate instruction precede load dictate frequency backup sweet frequently invoke backup maximize progress IV ability idempotency violation important clank equation model exploration introduce technique programmer tune idempotent application idempotency violation optimal backup opt clank architecture propose program array circular buffer nonvolatile memory difference buffer array idempotent program snippet listing conventional iteration loop invokes idempotency violation due reading backup frequent undesirable parameter address access array ascend loop code transform circular buffer instead circular buffer relative array idempotency violation effectively postpone average instruction violation compute implies conventional circular buffering implies buffering analysis configuration underlie clank architecture programmer maximize performance optimal circular buffer    opt  average cycle instruction obtain via application profile EH model reveal characterize unconventional optimization intermittent processor reduce precision backup recently increase reduce precision computation storage architecture community motivate trend ubiquity device mobile internet sensor network designer  tight resource constraint widespread cognitive processing approximate computer vision audio video processing application opportunity reduce precision technique due resilience error intermittent processor architecture unique opportunity exploit reduce precision backup unlike conventional intermittent processor frequently incur writes nonvolatile memory dive deeper analyze factor performance benefit reduce reduce architectural AB application architectural data register file attractive candidate precision reduction fix per backup  data modify backup volatile buffer volatile cache writeback buffer backup infrequent AB equation multi backup analysis straightforward backup regardless architectural AB application performance benefit reduce application specifically AB partial derivative negative amount extra overhead index circular buffer negligible accounting buffer clank simply involves buffer equation analysis extends restore focus backup simplify discussion increase progress per reduction cycle backup increase progress per reduction benchmark susan clank curve corresponds ratio ΩB AB ΩB assumes ΩR dot optimal backup inversely impact progress addition approximate architectural risky carefully incorrect program architectural program counter PC register memory address precisely program execution remainder focus approximate application alone observation circumstance beneficial reduce precision application precision reduction maximum achieve backup ΩB AB ΩB ΩB ΩB AB primarily dictate ratio compulsory architectural ΩB AB proportional backup ΩB plot benefit reduce precision varies backup benchmark susan clank configure ratio ΩB AB ΩB decrease precision reduction favour frequent backup decrease overhead application impactful ΩB AB ΩB ratio architectural register ratio application volatile memory footprint equation architect sweet employ  optimization suppose architecture register file configure curve reduce precision improve progress backup optimal cycle analysis factor application error due reduce precision curve merely architect benefit reduce precision sufficient warrant investigation ratio parameter clank summary demonstrate EH model expose unconventional insight catalyze technique optimization intermittent compute architecture programmer designer rethink tradeoff load cache locality VI VI propose program transformation tune optimal backup clank processor explore performance potential reduce  popular optimization emerge architecture VI vii related evaluation methodology intermittent processor architecture related model resilience performance compute analytical model driven compute taxonomy harvest span neutral transient driven hibernus detail mathematical model spent execution memento achieve overhead mathematical model data harvest aid designer hibernus analytical model expand breakdown prior approach namely memento hibernus recall across various application scenario hibernus achieves overhead memento efficient interruption frequency   efficient frequency approach aim aid designer optimal situation limited recommendation approach contrast model target wider intermittent compute architecture checkpoint nonvolatile processor simulation simulation evaluate device simulation clank identify execution cycle outweigh checkpointing EH model allows observation without implementation detail backup restore mechanism reveal insight formula simulator enable exploration various harvest  explores NVP choice nonvolatile memory onchip cache backup strategy buffer siren supplement cycle simulation realworld harvest capture source contrast simulator EH model allows rapid exploration intermittent compute  proposes curve capture checkpointing variable EH model architecture centric focus active fully execution resume resilience checkpointing mechanism resilience fault performance compute model resilience similarity multi backup component model fault approximate periodic failure recent opts sophisticated probabilistic model EH model address fundamentally fault spontaneous loss progressively decay imminent loss anticipate via adc postpone via unique backup component model model unique ability account architectural application nonvolatile memory technology whereas resilience model focus congestion thread schedule parallel multi backup model prior model exploration bridge innovation  resilience conclusion propose EH model towards understand implication complex interaction arise intermittent processor derive model compute progress harvest spent useful processor execution oppose spent backup restores execution reading understand architecture performs circumstance performs exploration hardware validation demonstrate effectiveness model architect programmer model reveals insight unconventional consideration pertain cache locality idempotency reduce precision EH model facilitates exploration assist research