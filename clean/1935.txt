processor typically hardware performance counter capture microarchitecture counter easily generate amount GB TB per data performance data compute platform server complex workload manner performance data precious foundation analysis performance bottleneck architecture compiler optimization however challenge extract performance data due  error outlier difficulty obtain insight relate performance propose CounterMiner rigorous methodology enables measurement understand performance data data mining machine technique novel component data cleaning improve data quality replace outlier iteratively quantify rank prune importance respect performance quantify interaction intensity residual variance sixteen benchmark cloudsuite spark version hibench evaluate CounterMiner experimental CounterMiner reduces average error multiplexing hardware counter conduct identify important configuration parameter spark program importance faster directly rank importance parameter index performance data computer architecture performance counter data mining introduction processor typically hardware counter crucial cache tlb generally reveal insight performance computer microarchitecture throughput spark apache spark throughput therefore performance counter analysis apply application task schedule workload characterization performance optimization application compiler optimization architecture optimization  performance measurement therefore developed  vtune   others however fundamental tension accuracy efficiency hardware counter counter OCOE approach achieve accuracy hardware counter obviously OCOE becomes inefficient fourteen measurable motivates multiplexing MLPX approach improves measurement efficiency schedule execution hardware counter extrapolate behavior sample however MLPX incurs measurement error due sample compute era exaggerated resolve measurement error MLPX requirement compute platform usually consists server complex workload service diverse characteristic manner incentive understand performance behavior performance improvement saving context randomly OCOE sufficient service performance affected  MLPX handle measurement error mandatory prior error cannot annual acm international symposium microarchitecture doi micro effectively avoid sample becomes extract insight performance behavior server processor compute platform generate amount data performance data   profiler generate GBs performance data per treat data equally dimensionality typically incurs extremely propose CounterMiner rigorous methodology enables measurement understand performance data data mining machine technique component data cleaner improves counter data quality replace outlier sample MLPX complementary importance ranker iteratively quantifies rank prune importance respect performance interaction ranker quantifies interaction intensity residual variance sixteen benchmark cloudsuite spark version hibench evaluate CounterMiner experimental CounterMiner reduces average error multiplexing hardware counter conduct identify important configuration parameter spark program importance faster directly rank importance parameter moreover CounterMiner reveals finding stall cycle due instruction queue important program related interact strongly significantly important smi concludes generally benchmark significantly important others respect performance noisy processor definitely remove important related TLBs instruction data TLBs remote memory remote cache operation spark benchmark hibench surprisingly diversity cloudsuite important finding valuable layer performance optimization architecture application organize II discus background motivation CounterMiner framework IV describes experimental methodology analysis VI discus related VI concludes II background motivation hardware counter processor logical performance monitoring pmu consists hardware counter counter occurs interval program execution counter across microarchitectures processor mode within microarchitecture cortex  processor counter register recent intel processor fix counter specific cycle retire instruction programmable counter per core per smt thread enable hardware counter predefined processor vendor significantly generation processor within microarchitecture alone microarchitectures instance ivy bridge model defines whereas  chip summary greatly  hardware counter program hardware counter capture counter OCOE approach hardware counter programmed counting profile program OCOE accurate counter dedicate however OCOE ineffective usually identify performance bottleneck unknown simultaneously OCOE available hardware counter processor multiplexing MLPX developed improve measurement efficiency multiple  hardware counter MLPX schedule sample execution sample behavior extrapolate however measurement error MLPX information lose sample interval happens sample interval report error spec cpu benchmark profile MLPX motivation measurement error prior employ OCOE performance MLPX mandatory sample emerge workload compute moreover quantify measurement error fundamental challenge due sample MLPX conduct error MLPX firstly compute program OCOE program compute platform non deterministic operating series traditional approach calculate euclidean manhattan agg bay jon   scn   avg error measurement error MLPX  wordcount  agg aggregation jon scn scan  sort bay bayes  kmeans   DAC DataCaching DAS  GPA GraphAnalytics      websearch wsg  avg average error distance vector cannot calculate performance behavior difference vector compute distance difference series wrap axis sequence achieve alignment dynamic wrap dtw technique efficiently achieve wrap employ dynamic program approach align series another distance measurement minimize therefore employ dtw calculate distance series dist dtw series respectively necessarily calculate dtw series OCOE denote   dtw     series program OCOE due accuracy OCOE non deterministic OS  nonzero theoretically zero compute dtw series MLPX OCOE   dtw     series MLPX OCOE respectively   program theoretically   due MLPX finally define error MLPX error   error definition roughly quantifies series generate MLPX obtain OCOE   OCOE program  zero contrast   error reflect error  error MLPX icache MISSES program program description IV minimum maximum error respectively ops measurement sample OCOE MLPX measurement sample OCOE MLPX outlier outlier benchmark wordcount outlier series IDQ dsb uops uops deliver instruction decode queue decode buffer series icache MISSES instruction cache per instruction average error achieves error carefully analyze error outlier outlier series IDQ dsb uops MLPX uops normal OCOE outlier significantly improve overall account illustrates OCOE instruction cache series icache MISSES reasonable program execution instruction cache empty cache however instruction cache MLPX MLPX indeed error moreover simultaneously MLPX generally exacerbates error however remove schedule estimation algorithm sample procedure motivates reduce data cleaning technique sample procedure MLPX important mining cpu performance data manner equally important due measurable available hardware counter  MLPX therefore mandatory MLPX error increase simultaneously limited hardware counter indicates trend error counter program execution limited however program processor accurately ideal scenario zero  optimization overhead extremely processor improve performance OS leverage feedback runtime optimization therefore crucial identify subset error simultaneously error variation along axis simultaneously strongly relevant architecture workload reduce measurement optimization overhead achieve goal quantify importance  methodology CounterMiner methodology performance data hardware counter reduces measurement error MLPX leverage data cleaning technique traditional schedule estimation algorithm CounterMiner complementary CounterMiner sample moreover quantifies importance interaction respect performance workflow CounterMiner consists component data collector data cleaner importance ranker interaction ranker data collector data collector sample program mode OCOE MLPX data collector available counter profile perf  linux perf available linux distribution sample series important behavior formally series sei vij vin sei series program vij jth sample sei important feature challenge series significantly program non deterministic behavior OS analyze series challenge series database management DBMS popular DBMS mysql sql server CounterMiner employ sqlite seamlessly integrates python program data analysis database organization information program execution program series program initialize CounterMiner apply microarchitecture selection selection selection perf workload raw series data integrator data filter data  importance quantification selection remove outlier data collector data cleaner importance ranker interaction ranker machine algorithm library performance counter database diagram CounterMiner data cleaner outlier error source data MLPX data cleaner replaces outlier normal evaluate accuracy data cleaner OCOE golden reference replace outlier outlier perform rigorous statistic IV distribution gaussian distribution investigate distribution distribution distribution perform statistic distribution function logistic  extreme GEV distribution GEV distribution distribution confirm distribution criterion replace outlier employ technique data mining outlier equation threshold std threshold criterion replace outlier std standard deviation series respectively variable accord distribution user requirement percentage data within threshold accord data series obeys gaussian distribution obey gaussian distribution instead distribution percentage data within threshold specify data program within threshold outlier confirm observation percentage data within threshold percentage data within threshold program exceed therefore outlier median interval outlier locates replace outlier interval calculate sei sei  sqrt sei benchmark benchmark wordcount  pagerank DataCaching aggregation  GraphAnalytics scan  sort  bayes websearch kmeans  coverage rate  sei sei maximum minimum sei respectively sei sei sqrt  classify category zero none zero observation zero highly likely however indeed zero therefore distinguish address issue maximum minimum minimum zero maximum zero rationale maximum zero actual zero error none zero category employ knn  algorithm series data icache MISSES icache MISSES knn regression calculate average determination important affect accuracy accurate importance ranker quantify importance respect ipc instruction per cycle accurate performance model construct input model output ipc ipc perf typically processor processor extremely challenge accurate performance model input parameter analytical model technique suitable parameter moreover analytical model accurate complex statistical model technique accurate dimensional input unrealistic assumption relationship input parameter linear however complex nonlinear relationship typically exist processor machine technique apply construct accurate model dimensional input mitigate fitting ensemble algorithm stochastic gradient boost regression  construct model insight  combine model  manner reflect performance model ensemble model performance model construct leverage model quantify importance interaction clearly accurate performance model precise importance quantification ensemble model importance splitting improvement model split importance calculate split performance improvement model kth split define relative ipc error   IP kth split splitter ensemble model importance model intuitive importance normalize sum across percentage indicates influence performance importance respect performance obtain rank descend remove important remainder input parameter construct performance model  algorithm conduct procedure model quantify importance remain rank procedure iteratively obtain accurate performance model  program procedure importance refinement eir importance obtain  accurate interaction ranker obtain important construct linear regression model per residual variance model indication interaction intensity intuition microarchitecture orthogonal interact residual variance linear model accurately predict combine microarchitecture interact substantially reflect residual variance significantly zero linear model unable accurately capture combine linear regression model important respective residual variance interaction intensity compute performance ipc predict linear regression model performance prediction zero indicates interaction microarchitecture indicates interaction importance interaction normalize interaction intensity importance interaction interaction intensity normalization important another reflect relative interaction intensity IV experimental methodology experimental cluster experimental cluster consists dell server serf node node server equip intel xeon cpu 0GHz core processor  microarchitecture 4GB PC memory OS node  linux enterprise server OS cluster mesos although experimental cluster platform evaluate CounterMiner environment sufficient essentially performance analysis methodology platform CounterMiner easily google profiler  meaningful addition integrate cluster management  compute research benchmark framework input data wordcount spark generate  pagerank spark hyperlink zipfian aggregation spark hyperlink zipfian spark hyperlink zipfian scan spark hyperlink zipfian sort spark generate  bayes spark zipfian kmeans spark gaussian  hadoop wikimedia dataset DataCaching memcached twitter dataset  cassandra ycsb dataset GraphAnalytics graphx twitter dataset   rating dataset  nginx synthetic video dataset websearch apache solr crawl website   generate  II  BENCHMARKS ops measurement sample OCOE MLPX MLPX  measurement sample OCOE MLPX MLPX  outlier replace cleaning replace outlier series IDQ dsb uops series icache MISSES MLPX  series   agg jon scn  bay  avg error raw  measurement error comparison data cleaning approach employ benchmark employ cloudsuite program hibench version spark  evaluate CounterMiner cloudsuite benchmark suite service consists application popularity datacenters hibench spark consists mapreduce program implement spark benchmark II benchmark cloudsuite framework hibench employ framework category application websearch sql machine microbenchmarks model python freely available program perform  model knn model python version scikit machine algorithm library implement python construct performance model perform rigorous statistic distribution employ scipy source software mathematics engineering abbr description ISF  stall IQ stall cycle due IQ isl  stall lcp cycle decoder stall inst prefix lcp BRE BR inst exec  execute necessarily retire IPD inst RETIRED prec dist precise inst retire HW reduce  shadow IP distribution brb BR inst RETIRED  retire instruction bmp BR misp RETIRED  mispredicted macro instruction retire PI walker  ITLB extend ITLB itm ITLB MISSES duration cycle  handler dsp DTLB MIS pde cache MIS DTLB linear physical address translation  DTLB MIS  ops tlb MMR mem LD uops MIS retire load uops data source remote dram mul mem uops RETIRED  load uops retire architected filter apply ura uops RETIRED micro ops retire  uops RETIRED retire  retirement slot cycle MCO machine  memory ordering machine due memory conflict MSL mem uops RETIRED   load uops  tlb retire architected MLL mem uops RETIRED lock load load uops lock access retire architected PDM walker  DTLB memory DTLB walker memory  tlb flush   tlb flush attempt LAA LD  partial addr alias false dependency mob memory buffer due partial address  LD  load overlap buffer cannot BRC BR inst RETIRED conditional conditional instruction retire  BR misp RETIRED TAKEN instruction retire mispredicted LMH mem LD uops  retire load uops data source remote  response  uops  cycle uops dispatch reservation RS per thread basis  mem load uops RETIRED retire load uops cache data source mst mem uops RETIRED  ST uops  retire architected IM ITLB MISSES  code tlb completes IMC ITLB MISSES  ITLB  LD uops retire load uops data source without snoop CAC cyc cyc  pend cycle pending memory load CP cyc  pend luo lsd uops uops deliver lsd plm walker LD DTLB mem DTLB walker load memory ots  avx SSE transition avx legacy SSE penalty applicable IU IDQ   uops cycle  deliver uops     data RD data request uncore demand prefetch baa  steer due BPU prediction misprediction   code RD instruction fetch cache  elimination int  integer elimination candidate uops eliminate ORO  req  AL RD  outstanding cacheable data transaction SQ super queue uncore IDU IDQ dsb uops uops deliver IDQ instruction dispatch queue dsb decode buffer lra  rfo rfo ownership request description  important benchmark error  raw measurement error comparison data cleaning approach employ simultaneously MLPX scipy stats anderson perform anderson  data distribution RESULTS analysis error reduction cleaning outlier MLPX  series correspond benchmark wordcount illustrates outlier correctly replace measurement error apply data cleaning technique series icache MISSES sixteen benchmark data cleaner significantly reduces error MLPX average error reduce thanks data cleaning illustrates behavior data cleaner increase MLPX observation data cleaner significantly reduces error MLPX error reduce data cleaner accurately error trend simultaneously increase although error error indicates data cleaner recommendation important mention importance obtain  accurate performance model accurate therefore perform eir importance refinement procedure aim  err wordcount kmeans pagerank aggregation scan bayes sort avg error variation model reduce input hibench benchmark axis important microarchitecture eir employ training model quarter unseen evaluate model accuracy error model define err     ipc program  ipc predict performance model error variation perform eir hibench benchmark necessarily performance model accuracy processor benchmark average error model input average error around model input parameter indicates exhaust processor noisy processor vendor leverage propose approach systematically processor however accuracy performance model decrease reduce input model achieve accuracy decrease average performance model error increase decrease average error increase model implies achieve performance analysis benchmark cloudsuite therefore due limited importance rank obtain  benchmark hibench cloudsuite respectively axis importance axis denotes abbreviation due limit important benchmark highlight finding importance benchmark significantly benchmark benchmark hibench cloudsuite important benchmark wordcount ISF BRE  importance exceeds phenomenon significantly important smi pareto principle accumulate importance around smi indicates opportunity optimize program significantly efficiently tune parameter related tune demonstrate importance rank across benchmark instance important wordcount ISF pagerank BRE indicates benchmark characteristic microarchitecture important benchmark related instruction queue TLBs instruction tlb data tlb tlb memory load remote memory cache access insight indicates application specific tune application whereas indicates optimization approach application effective microarchitecture compiler enlarge instruction queue processor enhance performance memory sub server improve performance service significantly ISF stall cycle due instruction queue important benchmark fourth surprisingly benchmark hibench diversity cloudsuite important benchmark important mul MLL dsp  cloudsuite benchmark hibench benchmark thirteen important  ura  BRC baa  IMC IM CAC ORO IDU lra ots hibench program cloudsuite benchmark belief benchmark cloudsuite diverse hibench cloudsuite benchmark framework hadoop spark memcached hibench benchmark apache spark counter intuitive achieve application diversity framework important algorithm code benchmark moreover diverse benchmark  important interaction interaction intensity rank spark benchmark hibench benchmark cloudsuite respectively important interaction axis importance interaction intensity axis denotes ISF BRE  IPD brb bmp MSL ura  itm BRE ISF brb LMH bmp itm PI MCO BRC  ISF BRE brb MSL baa MMR PI bmp IPD MCO BRE  ISF brb LMH IPD bmp IMC IM itm BRE ISF LMH brb MSL PI MMR bmp  CAC ORO IDU ISF lra BRE brb bmp LMH MSL mst BRE ISF PI MSL brb IPD mst  MMR LMH ISF BRE IPD brb IMT MSL PI ots bmp MCO wordcount pagerank aggregation scan sort bayes kmeans importance rank spark benchmark hibench employ construct accurate performance model axis importance axis denotes abbreviation ISF brb BRE IPD MMR MSL LMH mul mst MLL ISF brb IPD BRE MSL bmp MMR LMH mst MLL ISF PI BRE brb IPD MMR MSL LMH itm bmp ISF BRE brb MSL dsp  MMR  mst bmp BRE ISF brb MSL IPD MMR bmp PI LMH MLL BRE ISF brb MMR IPD MSL LMH bmp MCO PI ISF MSL IPD BRE MMR bmp brb mst  MLL MSL ISF bmp MMR  IPD isl BRE MLL LMH  DataCaching  GraphAnalytics   websearch  importance rank benchmark cloudsuite employ construct accurate performance model axis importance axis denotes abbreviation brb bmp  brb ura  brb itm  bmp ISF brb brb ura BRE brb  itm ISF BRE brb bmp BRE ISF BRE brb BRE bmp ISF brb ISF bmp brb BRC BRE PI BRE itm ISF itm BRE MSL ISF MSL MSL bmp MSL baa MMR bmp ISF BRE MSL PI brb bmp brb MSL BRE brb brb bmp BRE brb ISF bmp ISF brb BRE ISF BRE bmp  brb  bmp BRE IPD bmp IMC ISF bmp ISF LMH BRE bmp LMH MMR LMH bmp BRE LMH BRE ISF MMR bmp ISF MMR BRE MMR ISF mst lra mst ORO mst BRE mst IDU mst bmp LMH lra BRE bmp mst ORO lra BRE MSL ISF brb BRE brb BRE ISF PI brb ISF PI BRE PI MSL mst MMR LMH brb LMH BRE LMH brb bmp ISF bmp ISF brb itm bmp brb itm BRE brb BRE bmp PI bmp MSL bmp brb PI wordcount pagerank aggregation scan sort bayes kmeans interaction rank important  benchmark hibench axis importance interaction intensity axis abbreviation denotes ISF brb ISF MLL brb MLL MSL MLL brb MSL MMR brb BRE mul MLL ISF BRE brb LMH brb bmp brb BRE ISF brb BRE bmp ISF bmp brb MSL ISF BRE MSL bmp BRE MSL BRE MLL brb bmp BRE brb ISF bmp ISF brb BRE bmp PI brb PI bmp itm bmp ISF BRE brb itm brb bmp BRE brb brb PI ISF brb bmp PI BRE bmp ISF bmp BRE PI ISF PI BRE ISF dsp bmp BRE bmp ISF bmp brb bmp BRE brb dsp  MSL bmp ISF brb brb dsp BRE dsp brb bmp BRE brb BRE bmp brb PI ISF brb bmp PI BRE PI BRE ISF ISF PI ISF MMR bmp brb brb MLL BRE brb bmp MLL BRE bmp BRE MLL MSL brb MSL bmp ISF brb MSL BRE bmp brb ISF brb ISF bmp isl brb bmp MLL brb MLL ISF isl bmp isl bmp  MSL bmp  DataCaching   GraphAnalytics websearch  interaction rank important benchmark  axis importance interaction intensity axis abbreviation denotes ISF dmm ISF mmf MSL mmf MSL itm dmm itm mmf brb kbm BRE kbm ISF IPD mmf  exc PI exc bmp exc BRC dpl MCO ISF  ISF dpl LMH  bmp rdm itm mmf BRE mmf baa mmf PI mmf brb mmf MMR mmf MSL mmf IPD mmf MMR  baa nwt PI ssb itm itm  BRE rdm ISF kbm IPD dpl BRE kbm IM IM kbm BRE dmm IPD mmf BRE dmm BRE mmf MMR mmf MMR CAC dmm CAC mmf MSL kbm ISF kbm BRE brb mmf ORO IDU nwt MSL rdm ORO  ISF nwt ISF mmf ISF kbm MSL nwt LMH mst  PI ssb mst nwt ISF ssb MSL ssb BRE dpl MSL dpl IPD nwt ISF rdm MSL exc PI BRE  PI exc MSL  MSL  bmp  bmp dpl MSL exc bmp dmm MCO dpl PI dpl wordcount pagerank aggregation scan sort bayes kmeans interaction rank spark configuration parameter axis importance interaction configuration parameter axis denotes abbreviation parameter configuration parameter benchmark dominant interact strongly indicates focus analyze dominant interaction limited budget related interact strongly important interaction benchmark important interaction related involve interaction related involve interaction important interaction related imply related critical compute environment moreover  benchmark ranked important interaction benchmark wordcount pagerank kmeans DataCaching    websearch  indicates successfully retire instruction brb mispredicted finally successfully retire instruction bmp interact strongly benchmark brb surely bmp bmp definitely brb another phenomenon dominant interaction benchmark cloudsuite interact strongly dominant benchmark hibench indicates benchmark software tier interaction benchmark implement algorithm  tier web server database server memcached server client interaction intensity dominant interaction achieves contrast GraphAnalytics implement pagerank algorithm spark library graphx interaction intensity dominant interaction importance interaction important performance analysis explain significantly interaction explain performance variation usage CounterMiner important leverage interaction intensity quantification approach configuration parameter spark framework strongly interact important tune configuration parameter tightly correlate important important respectively finally performance variation tune parameter default spark configuration parameter importance interaction spark configuration parameter spark configuration parameter abbreviation IV benchmark exists spark configuration parameter interaction intensity implies tune configuration parameter interaction likely performance gain important interaction spark configuration parameter varies across benchmark characteristic benchmark indicates configuration parameter tune program efficiently optimize performance abbr configuration parameter spark broadcast  dpl spark default parallelism dmm spark driver memory exc spark executor core  spark executor memory spark compression snappy   spark  buffer kbm spark  buffer max mmf spark memory nwt spark network timeout rdm spark reducer   spark shuffle file buffer ssb spark shuffle sort  IV NAMES  spark configuration PARAMETERS interact important  strongly  exec exec nwt execution optimization sort tune nwt tightly correlate important ORO sort nwt tightly correlate important IU nwt IV ORO IU illustration profile denotes ith configuration parameter execution benchmark denotes mth demonstrate optimize performance spark program importance quantification important interaction benchmark sort ORO ORO important sort IV corresponds spark broadcast  important spark configuration parameter tightly correlate IU correspond configuration parameter nwt spark network timeout tune spark broadcast  spark network timeout separately performance variation execution reduction significantly tune tune nwt specifically average execution variation tune tune nwt confirm CounterMiner indeed handle user optimize performance quickly efficiently nevertheless unnecessary identify important parameter spark program importance quantification instead quantify importance parameter directly importance ranker argue  longer illustrate quantify importance configuration parameter training ISF PI brb  IPD MLL mul MSL  BRE BRE LH LR dsp LC  LA LM LS MSL DataCaching DataCaching DataCaching GraphAnalytics importance rank workload DataCaching DataCaching DataCaching GraphAnalytics benchmark configuration training execution program completes execution contrast training execution benchmark sample benchmark configuration therefore benchmark pagerank training performance model around accuracy identify important configuration parameter benchmark performance model function accuracy tightly couple configuration parameter additionally benchmark therefore pagerank identify important configuration parameter nearly workload demonstrate CounterMiner colocated benchmark cluster typical scenario compute environment application submit cluster application application submit cluster another application typical platform DataCaching DataCaching DataCaching GraphAnalytics demonstrate respectively importance rank CounterMiner importance rank individual benchmark context hardware counter resource benchmark importance rank DataCaching DataCaching important ISF importance however importance important DataCaching DataCaching slightly DataCaching indicates DataCaching program interfere severely contrast importance DataCaching GraphAnalytics significantly DataCaching GraphAnalytics indicates GraphAnalytics churn execution DataCaching severely interestingly cache related ranked important DataCaching GraphAnalytics cache related DataCaching GraphAnalytics indicates mixed benchmark cache instruction data cache avoid CounterMiner capture significant churn context workload platform VI related counter data management analysis google recently developed profile infrastructure google profile  performance insight application  employ sample technique sample machine sample interval within machine profile counter data google data developed framework manage performance data propose leverage statistic technique cluster analyze performance data parallel machine propose statistical technique pca principle component analysis extract important feature performance counter CounterMiner differs twofold CounterMiner proposes data cleaning technique counter data MLPX CounterMiner extract important directly quantifies importance respect performance related pca random linear projection implicitly important principle component project metric explicitly quantify important hinders directly leverage important optimize application performance error reduction measurement error MLPX nearly decade approach propose reduce MLPX unsampled interval usually estimate linear interpolate predecessor successor interval develop grain estimation algorithm interval sub interval perform linear interpolation estimation sub interval accuracy experimental setup significantly affect accuracy measurement hardware counter therefore correspond suggestion reduce error recently propose schedule algorithm schedule counter traditional robin algorithm improve measurement accuracy monitor recent another schedule monitor counter significantly another schedule vice versa measurement error MLPX increase intel hyper thread enable propose dynamic schedule algorithm graph reduce error reduce error performance measurement contrast approach decrease error performance measurement counter application workload characterization recently leveraged hardware counter profile warehouse computer observation instruction locality emerge compute workload weaker therefore instruction cache redesign employ hardware counter characterize workload release cloudsuite later perform characterization hardware counter cloudsuite performance counter characterize data analysis workload datacenters characterize data workload internet service employ performance counter characterize data analysis transportation propose transportation data benchmark suite architecture compiler optimization employ hardware counter analyze online service resource data insight server architecture data leveraged hardware sample generate profile perform feedback optimization application runtime performance hardware counter optimize compiler speedup spec cpu benchmark application optimization hardware counter cache behavior propose task steal algorithm  multicore architecture developed user schedule algorithm numa multicore linux analyze information hardware performance counter cpi cycle per instruction hardware counter propose cpu performance isolation strategy compute cluster firstly carefully analyze cache rate behavior commodity subsequently propose algorithm approximate rate curve online optimization propose leverage fractal approximate rate curve overhead hardware counter propose algorithm manage contention numa multicore although CounterMiner focus workload characterization optimization architecture compiler application important goal CounterMiner performance counter data approach achieve CounterMiner quantifies importance microarchitecture approach efficient vii CONCLUSIONS proposes CounterMiner methodology enables measurement understand performance data novel technique data cleaning improve data quality replace outlier iteratively quantify rank prune importance respect performance quantify interaction intensity residual variance various application experimental CounterMiner reduces average error multiplexing hardware counter identify important parameter spark program importance faster directly rank importance parameter