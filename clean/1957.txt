application  recursively nest data parse xml json web content various data mining task typical cpu processing hinder misprediction penalty attempt reconstruct nest structure irregular memory access recent demonstrate improve performance data processing application memory centric automaton processing unfortunately architecture computational model task xml parse aspen purpose scalable reconfigurable memory centric architecture processing data inspiration previous automaton processing architecture richer deterministic pushdown automaton computational model propose custom datapath capable perform stack manipulation transition rout operation pushdown automaton efficiently compute memory array compilation algorithm transform exist grammar pushdown automaton executable aspen demonstrate effectiveness orient program dot graph visualization json xml finally empirical evaluation application scenario aspen xml parse frequent subtree mining propose architecture achieves average per KB parse xml per KB ofthe xml parser across benchmark demonstrate speedup cpu gpu implementation subtree mining index pushdown automaton emerge technology memory compute accelerator introduction processing structure recursively nest data intrinsic computational application data serialization format xml json inherently nest opening closing tag brace respectively structure program arithmetic expression operation grammatical structure english text reconstruct validate data refer parse data processing analytics demonstrate increase rate data collection increase demand analysis therefore scalable performance technique parse processing data industrial demand unfortunately parse extremely challenge task accelerate within   berkeley parallel computation taxonomy software parse exhibit irregular data access mispredictions performance custom accelerator exist parse application parse xml generalize multiple important deterministic pushdown automaton DPDA purpose computational model processing structure data pushdown automaton extend finite automaton stack transition input stack determinism precludes stack divergence simultaneous transition stack admits efficient hardware implementation somewhat restrictive demonstrate DPDAs powerful parse program serialization format frequent subtrees within dataset aspen accelerate SRAM pushdown  realization deterministic pushdown automaton cache llc insight DPDA processing architected llc SRAM array lookup without involve cpu perform DPDA computation cache aspen avoids conventional cpu overhead random memory access mispredictions execution DPDA aspen stage input stack transition stack action lookup stack update stage SRAM array encode transition operation DPDAs aspen adopts hierarchical architecture processing input cycle aspen processing DPDAs parallel llc SRAM array purpose DPDA processing feature critical application frequent subtree mining parse parallel adaptation legacy parse application implement compiler convert exist grammar parser generator DPDAs executable aspen propose optimization improve runtime parser aspen architecture pop reconfigurable stack cycle feature annual acm international symposium microarchitecture doi micro multipop compiler implement merge algorithm reduces chain transition optimization reduce stall input processing summarize contribution propose aspen scalable execution purpose llc slice DPDA acceleration develop custom data DPDA processing SRAM array lookup aspen implement transition stack update efficient multipop parse token per cycle develop optimize compiler transform exist grammar DPDAs compiler optimization reduce stall cycle execution demonstrate compilation orient program dot graph visualization json xml empirically evaluate aspen application scenario tightly couple xml tokenizer parser pipeline highly parallelize subtree miner demonstrate average per KB parse xml per KB ofthe xml parser across xml benchmark demonstrate speedup cpu gpu implementation subtree mining II background motivation review automaton theory relevant aspen introduce application motivate accelerate pushdown automaton execution automaton primer non deterministic finite automaton NFA machine tuple finite finite transition function initial accept transition function determines active input automaton enters accept input report homogeneous NFA transition input homogeneous NFAs traditional NFAs equivalent representative regular expression pushdown automaton  extend finite automaton stack memory structure PDA tuple finite alphabet stack input alphabet transition function extend stack operation transition function PDA considers input stack return along stack operation specify pop stack operation deterministic pushdown automaton restrict attention deterministic pushdown automaton DPDAs limit transition function transition valid configuration DPDA input restriction prevents stack divergence leverage efficient implementation hardware transition perform stack operation without input refer transition epsilon transition maintain determinism transition transition input unlike finite automaton non deterministic deterministic machine representative NFA equivalent dfa vice versa DPDAs strictly weaker  DPDAs however powerful parse program serialization format frequent subtrees within dataset exploration hardware implementation  future hardware efficiency extend definition homogeneous finite automaton DPDA homogeneous DPDA hDPDA transition input stack comparison stack operation concretely operation stack restriction transition function limit computational increase computation DPDA equivalent hDPDA bound proof fully incident incoming performs input stack stack operation therefore duplicate node ensure homogeneity node equivalent hDPDA node input stack operation incident therefore vertex equivalent hDPDA DPDAs tend fully fix alphabet quadratic growth  significantly increase exponential NFA dfa transformation DPDA hDPDA odd palindrome parse xml file data processing task  parse parse syntactic analysis validate reconstruct nest data structure sequence input token relates validate sequence valid structure program parser verify statement conditional contains keywords expression ush ush ush ush ush ush equivalent DPDA hDPDA recognize odd palindrome simplicity transition DPDA input stack stack pop stack hDPDA input stack wildcard pop ebay psd med soap cpu cycle per byte expat xerces ebay psd med soap instruction per byte expat xerces conventional parser performance cpu cycle per byte instruction per byte statement focus task parse xml file application parse xml data structure document model dom parser typically implement stage pipeline stage lexer tokenizer scanner raw data token lexer convert parser parser input token validate later pipeline stage xml parser validate tag properly nest later stage pipeline performs semantic verify text opening closing tag parse performance CPUs conventional softwarebased parser exhibit complex input dependent data performance execute CPUs source xml parser expat xerces instruction byte input markup density input xml file ratio syntactic markup document overhead nest switch statement parse furthermore parser alternate markup processing processing variable content data reuse cache rate cache per xerces subtrees induced embed unordered misprediction cache rate software parser cpu cycle parse input byte contrast aspen virtue perform DPDA computation cache incur overhead frequent subtree mining another application DPDA computational model frequent subtree mining analysis processing recommendation improve network packet rout query text database core kernel task subtree inclusion subtree inclusion assume label define node node embed subtree label node tim label label  tij ancestor  latter preserve structure induced subtrees restrict ancestor descendant relationship relationship subtrees propose approximate subtree inclusion kernel NFA hardware accelerator false positive focus subtree inclusion deterministic pushdown automaton exp erm int erm exp erm int exp erm int exp exp erm exp erm erm int erm exp int cfg parse grammar subset arithmetic expression signify  token transformation DPDA parse expression integer transform int token prior derive parse subtree input   pushdown  context grammar algorithm compile grammar pushdown automaton prototype implementation context grammar DPDAs functional definition computation helpful representation generates underlie machine regular expression generate finite automaton  grammar CFGs generate pushdown automaton briefly review relevant grammar interested reader refer reference additional detail CFGs definition recursive structure collection substitution production production defines input legally rewrite another sequence production substitute production refer non terminal refer terminal cfg recursively apply production terminal remain sequential application production input derivation parse internal node non terminal leaf node terminal cfg subset arithmetic operation grammar demonstrates recursive nest balance parenthesis operator precedence multiplication tightly bound addition associativity multiplication addition associative grammar depicts parse grammar equation compile grammar DPDAs compile input cfg DPDA II  DPDAs representative therefore CFGs cannot recognize DPDA focus strict subset CFGs LR grammar practical importance DPDAs program grammar deterministic representation parser generator focus LR grammar target grammar therefore parse xml json ANSI exist parser generator yacc  unsuitable compile aspen  DPDAs instead generate source code richer operation CPUs however demonstrate exist leveraged portion compilation transformation grammar hDPDA broken stage parse automaton generation hDPDA generation optimization parse automaton generation parse input accord LR grammar dfa parse automaton machine input determines production apply machine encodes shift reduce operation shift another input token production encode transition parse automaton reduce operation reverse application production machine input substitution grammar apply encode accept dfa accept production shift reduce operation inspect input subsequent lookahead leverage shelf generate parse automaton concretely parse automaton generate gnu   parser generator cpu parser generate parse automaton intermediate output conceptually parse proceeds processing input parse automaton stack accept input rewrite pop stack recently replace discover substitution processing restart rewrite input non terminal remains classical approach refer DK literature creator donald knuth http gnu org software  http  com  parse multiple iteration transformation input hDPDA generation improve efficiency parse simulate execution parse automaton DPDA lemma input token pas transformation input approach input stack instead stack hDPDA sequence parse automaton shift operation destination parse automaton stack shift transition parse automaton reduce operation rewrite non terminal perform parse automaton hDPDA pop stack hDPDA stack parse automaton immediately precede shift token reduce pop stack reduction parse automaton reverse undo shift hDPDA simulation parse automaton restore prototype compiler generates hDPDA reading textual description parse automaton generate   parse automaton generate hDPDA terminal non terminal grammar terminal non terminal homogeneity pushdown automaton operation per II terminal generate lookahead lookahead positional memory encodes relevant shift reduce operation shift operation parse automaton stack reduce operation pop stack generates output signal non terminal generate perform shift reduce operation addition stack validate undo shift operation additional perform stack pop operation reduce operation pop reduce production finally transition accord transition parse automaton hDPDA emit  file format  source json machine serialization format within  automaton processing research ecosystem extend  schema hDPDA encode stack operation  admits reuse analysis  minimal modification optimization algorithm transform parse automaton DPDA DPDA contains transition extraneous remove unreachable incoming transition perform optimization reduce ush ush ush ush ush ush ush ush compiler optimization reduce stall incur transition epsilon merge attempt combine perform non overlap operation multipop allows stack pointer configurable distance operation transition within hDPDA recall transition stack operation without reading additional input pop stack reduce operation transition another observation hDPDA compilation algorithm algorithm input perform stack operation combine merge input perform stack operation simultaneously initial hDPDA perform  traversal machine merge optimization epsilon merge apply conservatively linear chain merge perform input input comparison perform pop merge algorithm assumes computational model pop reduction operation production duration stall however comparison intermediate stack architecture stack pointer variable amount reduction perform refer multipop demonstrates reduction multipop compilation summary overview CFGs representation generate pushdown automaton described algorithm compile important subset CFGs LR grammar  leverage exist intermediate parser representation parse automaton encode hDPDA execution aspen introduce optimization epsilon merge multipop reduce stall processing input approach accelerates exist parser specification without modification parser redesign advantage aspen increase parse performance IV architectural aspen architecture augments llc slice DPDA processing discus DPDA processing pipeline aspen tradeoff involve cache slice propose aspen architecture augments cache slice purpose processor situ DPDA processing core enterprise xeon processor llc slice interconnect typically intel xeon slice cache slice macro MB consists centralize cache  slice organize organize constitute data array fifth tag valid lru cache interconnect hierarchical bus bandwidth byte per cycle internally consists SRAM array accommodate DPDA span repurpose array perform stage DPDA processing remain array address PA regular cache data transition encode hierarchical memory interconnect consist local global crossbar switch switch  register active cycle active vector provision input buffer broadcast input token output buffer report generate processing cycle operation subsection detail DPDA processing recall DPDA active processing cycle active input DPDA input buffer phase input stack phase identify active DPDA label input stack tos respectively stack action lookup phase stack action define pop stack stack update phase stack update finally transition phase hierarchical transition interconnect matrix determines active cycle transition active handle consume input perform stack action cycle pop mask register logical mask register active vector active processing cycle active stall signal stall input processing cycle stack action per cycle sufficient DPDA functionality reduce stall input significantly improve performance multipop optimization reduces stall due transition hardware manipulate stack pointer encode popped stack action lookup phase proceed discus stage involve DPDA processing input IM adapt memory centric automaton processing model input phase mapped SRAM array input label encode ASCII homogeneous representation DPDA ensures input SRAM input broadcast address SRAM array global reading content input vector label input parallel stack SM contrast NFAs active input candidate  DPDA valid transition define input stack tos purpose SRAM array DPDA stack tos input provision global broadcast tos address SRAM array reading content tos vector perform logical input vector active vector candidate transition refer candidate simply active leverage amplifier cycling technique accelerate IM SM stage stack action lookup AL DPDA associate correspond stack action stack action pop multipop stack action encode action onto stack remain pop action popped stack multipop stack action correspond packed along IM SRAM array however AL stage lookup SRAM array vector obtain logical previous remove decode overhead array access reserve global communicate  subarray data tag lru AP AP AP AP AP AP AP AP AP AP AP AP AP AP decoder input IM vector decoder local tos SM vector active vector input IM stack SM switch stack action lookup AL pop stack update SU tos stack pointer EN tos global tos mux mux SRAM switch switch mask stall switch stack AP AP core xeon processor MB cache llc slice internal organization SRAM array repurposed DPDA processing stack action stack logic transition ST transition phase determines activate cycle transition function compactly encode hierarchy local global memory crossbar switch transition interconnect flexible  dense connectivity mapped switch sparse connectivity mapped multiple graph partition algorithm satisfy local global connectivity constraint maximize utilization crossbar switch consist input output implement regular SRAM array switch  flip flop register purpose typically implement transistor inefficient  valid transition define programmed initialization processing MBs GBs input active previous phase input crossbar switch DPDAs active cycle SRAM array transition activate stack update SU parallel processing DPDAs subtree mining local stack repurpose SM array accommodate local stack DPDAs xml parse global stack parse global stack implement register file DPDAs mapped adjacent stack depth sufficient parse application VI sort stack local global enable configuration DPDA stack pointer register address stack DPDA processing aspen dependency graph stage serial processing input stack tos tos register optimization access stack register file ensures availability stack processing cycle operation writes stack tos lazy mechanism update stack content tos similarly pop operation tos tos lazily reading stack register file update tos critical aspen performance depends critical factor input spent stall due  multipop optimization reduces stall due transition ıve approach input sequentially phase significant increase however phase dependent perform sequentially dependency graph DPDA processing stage intra dependency inter dependency marked dependency graph stage schedule propagation interconnect switch transition overlap stack action lookup stack update stack cannot stack update previous input DPDA processing serial contrast NFA processing independent stage input transition overlap stage pipeline critical delay aspen spent input stack stack action lookup update spent transition fully overlap stack related operation discus pipeline stage delay operating frequency lexical analysis critical parse lexical analysis partition input generate token parse grammar apply verify formedness input token II aspen accelerate phase leverage NFA compute capability cache automaton architecture lexical analysis identify token NFA active active vector zero exhaustion signal lexer logic cycle reporting ID recent report tracked report register reporting mask register mask report lexer exhaustion signal lexer logic reset reporting mask reloads NFA input buffer token generates token DPDA input buffer lookup convert report code token integration aspen cache cpu restrict DPDA computation llc slice regular operation furthermore cache dedicate aspen regular cache non parse workload cache access latency unaffected DPDA related rout logic additional global layer DPDAs rout  hardware resource bitmap stack action runtime driver load binary cache array memory mapped switch standard load instruction intel cache allocation technology input output buffer aspen memory mapped facilitate input output reporting ISA extension DPDA function disable llc slice hash configuration configuration overhead processing MBs GBs input report automaton application counting provision counter per llc processing output report cpu xml parse pipeline dom representation II construct perform linear pas DPDA report richer analysis verify opening closing tag xml parse arbitrary tag implement  subtree mining datasets dataset ave node item max depth subtrees TM TM treebank ave node average node per item frequent label max depth maximum depth dataset tion although cpu aspen pipeline evaluation dom construction future experimental methodology experimental setup xml parse workload frequent subtree mining cpu evaluation ghz dual socket intel xeon core gpu evaluation  titan  intel RAPL obtain performance measurement nvidia nvprof utility profile gpu utilize metis graph partition framework DPDA cache array xml parse evaluate aspen  source xml expat  parser xerces validate parser apache project validation application  verifies syntactic correctness input xml document return attribute content byte restrict analysis  interface  scanner xerces filter non ASCII input document dom generation evaluation consistent prior evaluation  xerces  expat assume input data already load memory xml benchmark dataset derive   UW xml repository evaluate xml file unable obtain reliable estimation baseline benchmark execution evaluate  parse pipeline extend source cycle accurate virtual automaton simulator  DPDA computation derive per cycle statistic tight integration lexer parser llc enables aspen largely overlap parse  report generate token DPDA cycle frequent subtree mining aspen  thread cpu implementation  gpu implementation employ breadth iterative frequent subtrees evaluate datasets treebank synthetically generate generation program  TM TM detail datasets treebank widely http washington edu research  http rpi edu  software II stage delay operating frequency IM SM ST AL SU max freq freq  aspen mhz mhz CA ghz ghz computational linguistics consists xml document syntactic structure english text  tag hierarchical structure TM TM generate maximal depth fan node TM TM respectively datasets generate subtrees database convert preorder traversal label sequence representation subtree node label predefined determines correspond DPDA detailed information   subtrees sum iteration frequent subtree mining subtrees aspen parameter SRAM array xeon llc ghz absence  data array standard foundry memory compiler technology node estimate SRAM array calculate aspen xeon processor model per access array crossbar switch estimate respectively llc slice contains switch switch DPDA computation switch leverage standard SRAM achieve compact layout overhead llc slice SRAM switch regular data perform DPDA computation cache automaton global broadcast input stack propagate transition signal global repeater delay consumption II stage delay DPDA processing aspen IM TM phase leverage amplifier cycling ST stage compose delay due local global switch traversal AL SU compose delay array access VI evaluation evaluate aspen application indicative workload evaluate generality aspen propose optimization compile parser architecture evaluate runtime motivate application description grammar token grammar parse aut description production program dot graph visualization json data interchange xml data interchange IV compilation optimization reduce epsilon average hDPDA epsilon average compilation optimization sec none  eps dot none  eps json none  eps xml none  eps parse generality demonstrate compilation orient program dot  graph visualization json xml benchmark grammar specification   readily available importantly modification exist legacy grammar compilation aspen architecture purpose diverse application prototype compiler exist parser detail token grammar parse automaton parse automaton complex computation grammar production apply complexity related token production grammar IV compilation statistic prototype compiler report average across compiler optimization compilation grammar optimization meaning compilation grammar significant bottleneck aspen multipop epsilon reduction optimization enable average decrease epsilon reduce average reduce epsilon reduces input stall report prior placement rout aspen hDPDA reduce fan fan complexity however epsilon chain neither increase decrease evaluate performance xml parse compile xml grammar performance http wikipedia org wiki program generalize consideration evaluate parser detail xml parse graph partition framework metis xml parser hDPDA optimization cache array llc cache occupancy KB aspen performance expat xerces  application evaluate DPDA configuration  multipop epsilon merge optimization enable aspen enables epsilon merge xml datasets markup density indirect xml document complexity performance expat xerces markup density input xml document increase complex document tend token verification aspen slight increase runtime increase markup density dependence pronounce noticeable trend performance benefit aspen MP aspen markup density increase density increase token generate frequently  stall likely masked tokenization stage pipeline aspen MP reduces stall cycle parse improve performance markup density aspen MP achieves improvement performance aspen overall average across datasets evaluate aspen MP consumes expat speedup achieve aspen MP achieves speedup consumes xerces  idle cpu core xml parse aspen within TDP xeon processor core consume attribute removal data movement instruction processing overhead conventional core cache active processing cycle due deterministic automaton saving subtree inclusion evaluate benefit DPDA hardware acceleration subtree inclusion kernel frequent subtree mining  computation subtree inclusion  compose subtree candidate candidate generate frequent candidate frequent candidate node subtree candidate generation detail proof correctness  stage candidate subtree occurrence inclusion subtree dataset exceeds specify threshold report candidate frequent generation architectural parameter subtree inclusion dataset automaton alphabet stack alphabet stack TM TM treebank architectural parameter  application datasets application compatible hardware restriction maximum stack depth alphabet contrast xml parse transition subtree inclusion DPDAs runtime linear input data homogeneous DPDAs  average node fan maximum kernel speedup aspen cpu gpu baseline aspen timing pre processing intermediate processing iteration cpu load transfer data dram llc reporting report vector dram addition kernel aspen performance improvement cpu gpu treebank consists average node processing cpu gpu treebank uneven distribution database synchronization overhead thread warp increase addition increase thread divergence warp possibility subtree node label input warp increase therefore gpus attractive gpus speedup aspen TM TM dataset consists evenly unlike CPUs gpus complexity subtree inclusion aspen independent input dataset aspen cpu gpu implementation trend performance unevenly treebank increase runtime cpu gpu increase average aspen achieves improvement cpu gpu implementation respectively vii related knowledge demonstrates evaluates pushdown automaton processing implement cache context respect related effort approach finite automaton accelerator recent acceleration finite automaton NFA dfa processing across multiple architecture developed algorithm efficient  automaton processing regular  dfa processing ASIC propose incorporate regular expression extract transform load pipeline sup aspen performance aspen  expat xerces speedup aspen cpu gpu aspen cpu gpu richer application closely related aspen memory centric architecture automaton processing micron automaton processor AP parallel automaton processor pap cache automaton CA  performance finite automaton processing accelerator promising underlie computational model parse mining application finite automaton processor perform regular expression processing lack stack memory nest data structure software parser generator cpu algorithm parse input data accord grammar remain largely unchanged algorithm generate parse automaton described encode lookup optimization effort focus compression algorithm lookup limited memory effort grammar generalize LR parser generator however typically grammar rewrite redesign preclude legacy xml parse acceleration evaluation demonstrates aspen competitive custom xml accelerator achieve KB moreover aspen application xml parse demonstrate compile parser evaluate subtree inclusion generality preferable datacenter compute resource rent client parse application likely perform aspen derive purpose cache array additional cache capacity application pushdown automaton  program framework acceleration xml parse achieves KB ghz cpu aspen achieves KB  redesign grammar specification parse orthogonal propose propose enumerative parallelization approach xml processing benefit aspen subtree inclusion recently propose approximate subtree inclusion kernel AP author convert structure simpler sequence representation AP prune candidate approach introduce percentage false positive aspen performs subtree mining therefore false positive conclusion aspen purpose scalable reconfigurable memory centric architecture automaton processing data custom datapath performs stack update transition rout memory array develop compiler transform exist grammar pushdown automaton executable aspen evaluation cpu gpu approach multiple kernel task highly performant faster parse faster subtree inclusion efficient parse subtree inclusion hardware DPDA aspen brings efficiency recent automaton acceleration approach application