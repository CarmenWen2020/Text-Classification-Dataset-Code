recent attack broken isolation exploit microarchitectural channel indirect access microarchitectural enclave strengthen abstraction restore isolation guarantee propose MI aggressively speculative processor capable secure enclave threat model untrusted OS attacker capable software attack currently practical utilize speculation MI inspire sanctum extends isolation guarantee realistic memory hierarchy introduces purge instruction secure schedule implement complex processor microarchitecture model performance impact enclave MI fpga emulation aws FPGAs spec cint benchmark enclave within untrusted linux OS security approximately average slowdown program CCS CONCEPTS computer organization multicore architecture secure processor keywords secure processor architectural isolation microarchitectural isolation introduction secure enclave abstraction pervasive underpins software conventional wisdom pertain security attacker cannot cannot attack situation unconditional trust OS  architectural isolation OS enforce commodity hardware microarchitectural channel indirect access microarchitectural information leak recent attack speculation spectre issue fore focus strengthen capability conventional speculative multicores OS linux isolation guarantee enclave borrowing intel sgx  sgx enclave secure task coexist ordinary isolation guarantee private memory goal enclave abstraction achieve isolation attack privileged attacker program machine victim enclave extract secret inside victim successfully attacker machine victim attacker machine victim communicate victim victim public api latency api program infer anything private enclave program resource microarchitectural cache predictor implies unique address enclave separation resource cache hierarchy address reside goal enclave cannot leak information influence program achieve resource microarchitecture isolated spatially temporally threat model described enclave expressivity security enclave software restrict interacts untrusted software OS trust security monitor machine mode mediates enclave entry exit verifies resource allocation untrusted software ensure allocation non overlap memory enclave security monitor tamper appropriately configure hardware protection mechanism OS compromise trust hardware assume bug threat model assumes privileged software adversary detailed outside threat model primarily concerned attack exploit hardware resource interact victim enclave via outside public api doi micro october columbus usa   wright zhang   MI source RiscyOO processor secure enclave threat model model performance impact enclave MI fpga emulation aws FPGAs benchmark spec cint untrusted linux OS contribution organization sanctum argue enclave define strengthen excellent abstraction secure computation contribution argument subtle channel associate queue associate arbitration handle multiple outstanding memory request memory hierarchy enforce isolation MI therefore protects broader attack sanctum excludes attack cache coherence bandwidth dram controller bandwidth channel threat model complexity processor core completely decouple complexity memory hierarchy purge instruction easily incorporate instruction architecture ISA optimization  software purge implementation modification security monitor maintain isolation speculative processor optimization relate access permission detailed evaluation performance overhead enclave implementation MI processor flush microarchitectural isolation overall security approximately average slowdown program assumes baseline physical attack memory unlike  intel sgx constant latency dram controller organization enclave abstraction threat model related baseline implementation RiscyOO speculative processor RISC ISA hardware modification describes steady isolation enclave MI describes MI handle transition enclave performance MI evaluate conclude  isolated execution enclave abstraction approach micro architectural isolation MI employ achieve capability adversary discus outside threat model enclave abstraction processor enclave platform implement isolated software environment disjoint address accessible within enclave thread execution  resides entirely exclusively isolated memory contains code data structure comprise enclave isolated software enclave platform guarantee integrity private execution enclave presence software per threat model strongly isolates enclave software consequence isolation enclave cannot transparently service issue software outside enclave trust access enclave private memory enclave platform mediates transfer enclave via statically define location entry guarantee execution remain across context switch enclave service proxy untrusted software respect OS service untrusted guarantee enclave become trust component application aside platform carefully programmed enclave execute safely privileged software compromise platform implement measurement attestation protocol enclave integrity remote enclave isolation goal enclave abstraction achieve enclave integrity processor implement architectural isolation memory invariant hardware mechanism prevent access enclave physical memory enclave code access microarchitectural resource mutually distrust software transmit private information via availability finite resource measurable via timing operation channel microarchitectural isolation confidentiality enclave execution closing channel cache enclave integrity context core executes speculatively instead directly implement isolated enclave MI hardware implement flush constraint core instruction fetch isolation primitive sufficient partition relevant sub MI protection domain non overlap allocation machine resource program multiple core protection domain steady MI guarantee non interference isolation domain platform transition protection domain configuration implement enclave MI relies trust security monitor executes dedicate protection domain compose machine protection domain constraint execution isolated enclave implementation detail MI security monitor largely borrow scope manuscript detail aspect monitor relevant isolation enclave MI secure enclave speculative processor micro october columbus usa trust compute TCB MI processor processor chip memory dram security monitor binary security monitor software machine mode privilege mode riscv privileged supervisor mode untrusted OS MI isolates software inside enclave software speculative processor satisfy attacker capability assume  remote adversary exploit software vulnerability software specifically assume attacker compromise operating hypervisor computer execute enclave launch malicious enclave attacker knowledge enclave platform architecture microarchitecture software load attacker analyze passively data fault address active attack memory probe cache tag attack attacker exploit speculative predictor microarchitectural software attack spectre outside threat model MI isolation mechanism exclusively address software attack assume absence adversary physical access attack victim application leak information via public api leak occurs victim dedicate machine software attack rely sensor data physical attack MI physical attack memory augment memory encryption integrity verification exemplify processor  oblivious random access memory ORAM ascend variously defend attack ORAM overhead substantially reduce smart memory assume MI denial service dos attack assumes underlie hardware software attack exploit hardware bug fault injection attack rowhammer finally exclude attack utilize performance counter related microarchitectural channel attack attack exploit microarchitectural channel leak information variety attack cache tag channel retrieve cryptographic cryptographic implementation aes rsa diffie hellman elliptic curve cryptography attack unprivileged software computer victim software sophisticated channel modulation scheme flush reload variant prime probe target cache llc core socket evict reload variant flush reload cache contention flush viable strategy corresponds coherence replacement metadata directory readily reverse engineer construct eviction recently multiple security researcher attacker exploit speculative execution transmitter within victim code leak secret spectre meltdown exploit code execute speculatively unrestricted access register memory host variant attack propose attack motivate MI defend channel attack partition occupancy cache data protection domain disable cache  channel advantage hardware allocate granularity via sanctum partition cache timing attack MI intel cache allocation technology variant catalyst mechanism configure logical service allocates cache llc cache logical somewhat isolation access leak metadata update load replacement metadata across protection domain DAWG endows associative structure notion protection domain isolation unlike DAWG explicitly isolates cache replacement replace DAWG another cache isolation mechanism MI alternative strategy cache timing attack partition randomize interference cache  random cache  CEASER CEASER alter replacement policy ric MI adaptivity cache allocate enclave cache occupancy attack therefore cannot technique MI technique achieve timing independence non interference memory demand secure fashion MI enclave ORAM briefly described sanctum efficient approach  secure processor detailed review secure processor architecture   trustzone  channel attack threat model intel sgx adapt    multi core processor coherent cache sgx cache timing attack speculation attack iso extends sgx enclave allocation cache timing attack sanctum introduce straightforward software hardware enclave resistant software attack exploit microarchitectural processor MI sanctum protects micro october columbus usa   wright zhang   broader attack cache cache directory dram controller bandwidth channel cache hierarchy MI corresponds processor cache hierarchy model sanctum queue arbitration logic speculation MI attack MI introduces microarchitecture independent purge instruction flush pipeline keystone borrows sanctum implement enclave target standard RISC processor RISC physical memory protection primitive komodo privileged software monitor trustzone implement enclave komodo described multi processor execution inorder processor invisispec speculation invisible data cache hierarchy significant performance preclude speculation attack microarchitectural baseline processor MI source RiscyOO speculative processor RiscyOO implement feature microprocessor register rename prediction nonblocking cache TLBs superscalar speculative execution RiscyOO issue load speculatively instruction unresolved memory address RiscyOO cache coherent inclusive private cache core refer cache llc therefore RiscyOO contains cache timing channel vulnerable speculation attack spectre detailed configuration RiscyOO RiscyOO source RISC instruction prototyped aws FPGAs fpga implementation boot linux completes spec cint benchmark input ref input slightly RiscyOO platform secure enclave vastly complex implementation sanctum challenge security hardware modification enclave processor intervention physical address protection isolation memory hierarchy rigorous implementation purge operation scrub physical resource separately allocate enclave speculation guard security monitor software access physical address speculatively load address speculatively fetch outside security monitor binary specifically summarize hardware modification MI enclave detail modification flush microarchitectural speculation instruction fetch machine mode llc partition MSHR partition llc llc MSHR llc channel steady isolation examine interaction program program core program core ISA program independent program output another program architectural isolation capture interaction instruction ISA load channel timing beyond operation ISA assume precise microarchitectural within core instruction fetch issue execute commit etc program core conservatively abstract cleverly engineer program ability latency define guarantee weak timing independence underlie variation timing timing variation due program multiple cycle another core release reserve resource define timing leak timing variation due program compete resource within cycle per cycle arbitration define minor timing leakage program weak timing independence architecturally isolated exhibit minor timing leakage program timing independence architecturally isolated neither flavor timing leak ensure program disjoint protection domain weak timing independence achieves timing independence program resource disjoint microarchitectural protection domain timing independent definition assumption program collection instruction core supervisor privilege mode correspond initial data assume machine mode code enclave program program behalf program lifetime ignore machine mode software machine mode tamper arbitrary configuration register alter active protection domain supervisor mode analysis simplifies worry operating service virtual memory user mode program configuration usage virtual memory entirely within program security monitor lean minor operation enclave exit security monitor program physical address access program access physical address virtual memory physical address access instruction fetch load virtual memory physical address access RiscyOO aggressive execution processor MI secure enclave speculative processor micro october columbus usa speculative instruction fetch speculative load speculative physical memory access speculation incorrect physical address access program physical address physical memory access speculative assume entire address normal memory memory mapped trust device driver establish architectural isolation program address without timing microarchitectural execution program cannot affect therefore disjoint address imply program architecturally isolated establish weak timing independence unfortunately disjoint address program architectural isolation weak timing independence cache partition program access disjoint address program access physical address cache access evict instead access issue stem program dynamically resource entry cache demand transition resource program observable program therefore infer demand program around achieve weak timing independence cache statically partition program MI partition cache partition sanctum MI equally physical memory dram multiple contiguous dram MI modifies llc cache index function dram disjoint cache llc index replace dram ID physical address dram program partition physical address disjoint dram avoid timing leakage dynamic cache MSHR partition cache RiscyOO handle fix request request tracked status handle register MSHRs MSHRs cannot request multiple cycle backpressure cache request program cache request MSHRs cache MSHR available request stall timing variation therefore timing leak avoid timing leak MI partition MSHRs llc actively processor core occupy MSHRs MI equally MSHRs llc processor core statically associate MSHR partition processor core allocate MSHRs affect request stall due backpressure MSHRs avoid dram backpressure dmax maximum outstanding request dram controller handle dmax flight request dram controller asserts backpressure prevents request enqueued dram controller assert backpressure dram request delayed timing leak RiscyOO request dram controller request MSHR moreover request MSHR dram request lifetime request therefore machine dram controller accept dmax outstanding request MSHRs cache dmax amount dmax MSHRs per core core dram controller latency another complication ensure timing independence dram dram controller dram controller reorder request request increase achieve bandwidth dram program access address dram access address dram interleave request dram request reorder dram controller perform request timing request timing weak timing independence program weak timing independence MI dram controller constant latency sophisticated dram controller aware protection domain associate dram ensures timing independence across protection domain optimization buffer within protection domain across protection domain dram controller model RiscyOO evaluation constant latency exploration variable latency dram controller timing independent future address validation protection domain unlike sanctum MI enclave virtual address untrusted software explore couple mechanism rout fault enclave  fault access channel prevents attack untrusted OS fault access achieve timing independence program ensure cache program restriction address usage access memory easy program performs load address harder ensure program emit speculative access memory outside harder ensure another program outside address partition easy MI hardware ensure physical access within specify dram micro october columbus usa   wright zhang   therefore cache allocate program core MI machine mode modifiable bitvector dram access program access speculative nonspeculative address outside allocate cache core emit access location exception access become non speculative dram physical cache access MI performs optimization simplify cache dram permission tlb dram alignment KB dram therefore determines access specify legal translation tlb access translation legal dram allocation program physical address security monitor configures core trap virtual memory management instruction security monitor swap identity program virtual memory describes tlb maintain ensure transition violate isolation achieve timing independence remain modification achieve timing independence therefore mechanism introduce cannot achieve timing independence primarily llc explain structure llc RiscyOO minor leakage timing independence analyze performance qualitatively cache llc core dram core integration llc RiscyOO understand llc RiscyOO internal detail llc llc integrate core RiscyOO machine llc msi directory cache coherency protocol dedicate link communicate  message processor core link contains independent FIFOs transfer upgrade request downgrade response upgrade response downgrade request llc respectively llc dram controller FIFOs dram controller sends response llc contains MSHRs cache access pipeline incoming message llc upgrade request downgrade response dram response cache access pipeline access tag data SRAMs llc upgrade request reserve MSHR entry pipeline dram response buffer MSHR entry initiate correspond dram request enters pipeline  backpressure dram response message access SRAMs pipeline pipeline processing upgrade request respond MSHR index request fifo UQ response data buffer MSHR entry depth UQ MSHRs backpressure pipeline cache replacement cache occurs upgrade request replacement cache request dram MSHR index fifo DQ buffer data MSHR entry writeback depth DQ MSHRs backpressure pipeline cache access pipeline  llc downgrade logic cycle logic MSHR entry downgrade sends downgrade request cache access pipeline core downgrade resp core downgrade resp core upgrade req core upgrade req downgrade dram resp dram req MSHR index upgrade resp downgrade req core core MSHR index dram req UQ DQ MSHRs internal microarchitecture llc RiscyOO minor timing leakage llc partition storage llc cache array MSHRs prevent timing leakage however resource llc contend message belonging core potentially protection domain contention exists minor timing leakage enumerate contend resource entry cache access pipeline incoming message contend entry cache access pipeline mux message core llc message another cycle minor timing leakage contention message core minor leakage dram response core upgrade request core downgrade logic MSHR entry downgrade request contend downgrade logic downgrade request arbitration MSHR entry core downgrade request MSHR entry core downgrade request UQ downgrade request UQ response core stall later response core UQ downgrade request downgrade logic contend response UQ outgo processor core DQ MSHR entry DQ cache without replacement dram request dequeued DQ dequeue DQ leakage however MSHR entry enters DQ completion cache replacement dram writeback request dram MI secure enclave speculative processor micro october columbus usa request MSHR entry llc dequeue DQ cycle request dram delay later request DQ minor timing leakage enumerate instance contention llc minor timing leakage  source leakage response cache core dram response  explain llc timing independence microarchitecture llc MI prevents minor timing leakage achieves timing independence explain handle contend resource cache access pipeline downgrade dram resp dram req MSHR index upgrade resp downgrade req core MSHR index dram req UQ DQ robin arbiter UQ core retry upgrade req replacement core downgrade resp core upgrade req dram resp core core MSHR core downgrade resp core upgrade req core MSHR dram resp core downgrade microarchitecture llc MI achieve microarchitectural isolation entry cache access pipeline instead merge incoming message merge message llc merges incoming message core upgrade request downgrade response dram response core contention message core protection domain leakage merge message core robin arbiter arbitrate message core cache access pipeline core IDs cycle message core modulo pipeline incoming message core message core cannot proceed cache access pipeline backpressure robin arbiter ensures message core pipeline independent activity core protection domain timing independence achieve entry downgrade logic approach contention downgrade logic approach MI already partition MSHRs across processor core instead MSHRs downgrade logic examines MSHR partition core cycle logic iterates partition robin fashion timing independence logic cycle partition MSHR partition downgrade request ensures MSHRs core downgrade request independent core protection domain approach duplicate downgrade logic MSHR partition downgrade logic therefore responsible MSHR partition thereby remove contention UQ downgrade request resolve timing dependence due UQ split UQ multiple FIFOs  MSHR index core depth  MSHR partition core  simply stall within response core timing dependence across core protection domain entry  MSHRs overhead split UQ downgrade request core contend response core  downgrade request initiate upgrade request core address request core cache downgrade address core core protection domain multithreaded enclave assign core therefore contention UQ downgrade request cannot influence timing across protection domain DQ dequeue MSHR index DQ cycle MSHR entry cache replacement dequeue DQ timing influence DQ MSHR entry enters DQ cache replacement MSHR index DQ retry MSHR entry MSHR index dequeued DQ sends writeback request dram dequeue cycle MSHR entry retry cache access pipeline enters DQ pure cache issue dram request entry contends message core leakage cache slot lock MSHR entry upgrade request cannot occupy slot qualitative analysis performance impact split UQ multiple FIFOs zero performance overhead retry request replacement increase processing latency request cycle however request dram increase negligible downgrade logic duplicate therefore zero performance overhead chosen logic robin latency downgrade increase proportionately core performance overhead mainly robin arbiter cache access pipeline arbiter core SRAM bandwidth core without arbiter message core contend bandwidth SRAM therefore bandwidth loss average performance decrease traffic core bursty multiprocessor core llc request core cycle core typically cycle micro october columbus usa   wright zhang   issue exacerbate core increase depends strongly timing contention memory access core arbiter introduces extra latency access pipeline message core pipeline average latency roughly cycle evaluate performance impact increase latency isolation across protection domain  addition achieve isolation program schedule concurrently onto core achieve isolation program schedule core described earlier MI relies flush microarchitectural erase program dependent microarchitectural schedule protection domain onto core operationally microarchitectural purge instruction achieve specific purge module scrub discus privileged security monitor occupies dedicate protection domain executes privilege orchestrates operation implement secure context switch across protection domain purge instruction flight instruction core consists module bookkeeping flight instruction register rename register reorder buffer issue queue scoreboard speculation tag manager load queue correspond MSHRs buffer various FIFOs module context correspond instruction currently processor pipeline achieve comprehensive flush baseline RiscyOO processor correctly flush privilege handle hazard privilege multitude throughout module core equivalently empty pipeline register indicates empty pipeline exist multiple permutation interestingly consideration equivalent distinguishable software situation pertains issue queue instruction issue execute RiscyOO processor issue queue circular buffer associate pointer configuration pointer empty entirely indistinguishable software applicable RiscyOO issue queue module additional correctly flush program dependent priority queue mips issue instruction numbered slot queue predictor structure predictor demonstrate hijack speculative execution spectre structure deeply stateful transmit information previously schedule program via prediction context switch purge predictor predictor define public via reset initial reduce overhead prediction context switch processor opt implement primitive restore predictor practical cache TLBs translation cache attack exploit cache tag secret dependent memory access latency explore offering increasingly practical private leakage via cache cache timing attack cache MI partition address vulnerability cache program schedule onto core obviate attack cache along TLBs translation cache flush context switch TLBs translation cache private core addition tag cache replacement policy  RiscyOO fortunately employ pseudo random replacement policy replacement TLBs translation cache associative structure lru replacement policy RiscyOO implementation lru policy cleaning data pre define lru cache prime eviction scrub private information replacement noteworthy observation cache  allocate physical memory protection domain disjoint physical memory correspond disjoint via belonging schedule protection domain inaccessible remain domain schedule MI memory arbitrary protection domain communication domain mediate security monitor described security monitor functionality sanctum employ software security monitor semantics enclave onto invariant implement hardware implementation security monitor MI contribution manuscript briefly describes functionality differs slightly prior construction sanctum security monitor  schedule physical resource allocation decision untrusted OS assert enclave resource overlap software scrub resource available allocation MI security monitor considers resource core memory respective subtle resource memory hierarchy microarchitecture network chip OS request enclave schedule schedule security monitor purge described scrub core schedule enclave pristine environment adversarial influence schedule enclave erase enclave execution likewise memory grant enclave enclave destroyed security monitor invoked scrub owner steady execution security monitor schedule protection domain isolated via mechanism described MI secure enclave speculative processor micro october columbus usa monitor  enclave asynchronous exception safely schedule enclave delegate OS handler OS observes syscall schedule enclave security monitor occupies dedicate protection domain outside OS statically reserve sufficient amount physical memory text data structure implement monitor limited functionality security monitor physical memory protection primitive par sanctum address ensure integrity software protection domain exception security monitor execute virtual memory operating transparently identity access physical address protection domain destroyed stale translation  security monitor tlb shootdown transition ensure cached translation remain coherent security policy translation exist virtual address protection domain physical address outside protection domain described speculative fetch load outside protection domain boundary uphold isolation described MI ensures protection domain access memory another notable exception security monitor relies restrict mode execution sidestep speculative misbehavior described straightforward isolation cache via enclave occasionally communicate software minimum input output sanctum sgx communication enclave host untrusted linux processor address  exists MI cannot portion address untrusted software silo speculative execution security monitor implement explicit message protection domain sender request message domain pre allocate buffer domain sanctum mailbox primitive mechanism enclave authenticate private byte message local attestation MI extends primitive implement privileged  enclave untrusted software via upon buffer security monitor responds enclave request OS buffer copying content enclave copying enclave buffer OS memory security monitor handle primitive transmit data enclave invocation apis private security monitor therefore perform purge mediates communication primitive restriction permissive communication mechanism sgx sanctum defend timing attack memory exploit speculative execution enclave interact outside security monitor implication definition security instead leak completion enclave transmits timing sequence interaction potential adversary communication untrusted software untrusted potential influence channel enclave responsible pad timing interaction tolerate malicious response pad constant zero leakage fix limit leakage protection domain security monitor enclave untrusted software resource another speculative execution within domain visible across protection domain boundary core execute protection domain therefore speculate restriction security monitor domain executes privilege access arbitrary virtual memory security monitor code trust maintain integrity violate isolation domain trust insufficient MI restrict speculative execution security monitor prevent speculate fetch access observable across protection domain boundary achieve restrict instruction fetch address correspond security monitor throttle register rename machine mode execution exclusively security monitor effectively serialize execution restrict instruction fetch prevents security monitor leak information via cache jumping branching data dependent address visible adversary replicate security monitor code within enclave replica confidential integrity via par sanctum physical memory protection mechanism invoke enclave communication primitive unintended monitor text protection domain  non speculative buffer enclave explicitly intend access sophisticated implementation allows speculation within security monitor guarantee isolation allows finer grain communication protection domain defer future isolation argument steady execution enclave straightforwardly isolated uniquely allocate core address core software core local microarchitectural private allocate address thread core invariant circuit ensures external software access enclave physical memory enclave access address outside address speculative access cache isolation cache MSHR partition memory request timing isolation cache hierarchy  program responsible safeguard timing public operation transient execution enclave schedule  creation destruction enclave isolated security monitor sanitize architectural micro architectural within core security monitor perform enclave transient operation core switch machine mode switch pipeline flush flight speculation previously execute program security monitor purge instruction fully micro october columbus usa   wright zhang   flush  processor software routine scrub architectural initial return software outside machine mode security monitor purge relevant architectural microarchitectural grant incoming software execution environment subtle complication security monitor unrestricted access physical memory speculative misbehavior within security monitor circumvent isolation private enclave memory speculate machine mode performance evaluation performance overhead MI flush per core microarchitectural context switch partition cache llc partition MSHRs llc robin arbiter llc pipeline speculation machine mode evaluate performance overhead outside arbiter due explain evaluate overhead respectively summarize overall performance overhead MI overhead apply enclave application overhead apply speculation security monitor transfer data behalf enclave outside rare typically enclave execution account speculation evaluate overall performance overhead MI variant RiscyOO processor baseline insecure RiscyOO processor parameter flush flush per core microarchitectural context switch processor partition llc processor organization llc MSHRs processor model llc MSHR partition arb increase llc pipeline latency processor model robin arbiter llc pipeline NONSPEC executes memory instruction non speculatively processor combination flush arb prototyped processor aws FPGAs spec cint benchmark ref input benchmark perlbench compile RISC benchmark multiple ref input aggregate performance input benchmark completion linux without sample exception evaluation speculation truncate processor without speculation becomes benchmark superscalar fetch decode rename entry mapped BTB tournament predictor alpha entry return address stack execution entry rob insert commit pipeline alu mem FP mul div entry IQ per pipeline entry LQ entry SQ entry SB TLBs entry fully associative tlb max request tlb private core entry associative max request translation cache contains fully associative entry intermediate translation cache KB associative max request cache MB max request llc coherent memory 2GB cycle latency max request 8GB 2GHz insecure baseline configuration flush per core microarchitectural methodology core performance flush influence flush per core microarchitectural TLBs cache predictor flush flush whenever processor trap exception interrupt return trap handle cycle hardware flush entry cache TLBs predictor cache cache invalidate per cycle cannot invalidate per cycle coherence protocol RiscyOO notify invalidation entry TLBs predictor discard directly fully associative TLBs flush cycle tlb entry discard per cycle tournament predictor entry discard entry per cycle sustain bandwidth eviction per cycle latency eviction cycle flush parallel cycle processor idle stall flush application resume trap handle cache TLBs predictor cache TLBs mispredictions increase execution flush benchmark average across benchmark performance overhead average overhead execution maximum overhead benchmark astar explain earlier overhead stall flush additional cache tlb MI secure enclave speculative processor micro october columbus usa bzip gcc  sjeng libquantum href omnetpp astar  increase runtime overall overhead flush execution normalize execution bzip gcc  sjeng libquantum href omnetpp astar  normalize stall flush flush normalize execution bzip gcc  sjeng libquantum href omnetpp astar  per inst flush mispredictions flush flush additional mispredictions flush examine source stall flush microarchitectural flush average across benchmark flush merely execution benchmark xalancbmk stall trigger exception  instruction data cache tlb negligible unlikely source performance degradation mispredictions per instruction flush average across benchmark flush prediction substantial impact misprediction rate average mispredictions per instruction microarchitecture flush enable significant increase responsible overall performance overhead benchmark astar mispredictions maximum overhead summary flush per core microarchitectural context switch impact rate cache TLBs increase misprediction rate substantially however overall performance overhead flush partition llc methodology llc partition ideal evaluation methodology multiprogrammed workload multiprocessor evaluate core multiprocessor MB cache llc assume core parameter llc associative cache however fpga logic gate SRAMs prototype multiprocessor explain closely approximate evaluation multiprocessor core performance overhead llc partition mainly decrease llc allocate enclave application additional conflict llc cache index function described allocate llc concern allows enclave multiple llc besides multiprogrammed workload without security partition llc quality service qos evaluation llc partition achieve qos focus overhead cache index function llc multiprogrammed workload consists spec benchmark core multiprocessor benchmark core simplicity assume insecure baseline partition llc allocate MB core baseline partition core effectively MB mapped llc overestimate baseline performance assume core baseline MB cache associative insecure baseline performance approximate performance processor secure partition MB llc KB assign MB enclave spec benchmark core difference allocate llc performance overhead partition cache index function explain cache address offset cache baseline insecure MB llc cache index partition MB llc conceptual multiprocessor cache index combination dram enclave fix effective cache index equivalent index MB llc index function approximate performance impact llc  simply influence replace llc index dram llc index refer processor llc index performance micro october columbus usa   wright zhang   dram cache address 2GB dram performance overhead address index llc increase execution llc partition average across benchmark performance overhead average overhead execution maximum overhead benchmark gcc understand performance overhead llc per instruction address llc index average llc per instruction increase benchmark gcc maximum execution overhead llc increase understood evaluation benchmark linux boot physical memory allocate linux tends allocate physical sequentially benchmark physical address benchmark likely mapped llc index llc conflict bzip gcc  sjeng libquantum href omnetpp astar  increase runtime overhead execution normalize execution bzip gcc  sjeng libquantum href omnetpp astar  per inst llc partition llc MSHR methodology multiprocessor insecure baseline assume average memory bandwidth available core core processor core multiprocessor occupy llc MSHR entry flight dram request average secure partition llc MSHRs prevent channel due contention llc MSHRs dram bandwidth accord llc MSHRs partition allocate entry core memory request writebacks data fetch generate core exceed dram bandwidth available core request llc organize cache partition MSHRs llc evaluation llc slice accord cache index core allocate entry entry insecure baseline cache core occupy MSHR entry llc MSHRs distribute across accord analysis performance overhead llc MSHR partition reduction MSHR insufficient MSHRs cache conflict model overhead instantiate processor processor processor llc MSHR entry MSHRs slice accord cache address performance overhead llc MSHR partition characterize performance difference performance pessimistic estimate overwhelm MSHR stall MSHR structure MSHR independent model error avoid refining implementation future increase execution partition MSHRs llc performance overhead average overhead execution maximum benchmark astar overhead bzip gcc  sjeng libquantum href omnetpp astar  increase runtime overhead execution normalize execution llc arbiter methodology described performance overhead robin arbiter associate llc  pipeline bandwidth loss bursty cache traffic increase latency access pipeline evaluate overhead due bursty traffic depends strongly timing concurrently application unable RiscyOO multiprocessor fpga approximation evaluate overhead increase pipeline latency core multiprocessor pipeline latency increase cycle average instantiate arb processor increase llc pipeline latency cycle model overhead increase execution llc arbiter performance overhead MI secure enclave speculative processor micro october columbus usa average overhead execution maximum benchmark libquantum overhead comparable llc partition bzip gcc  sjeng libquantum href omnetpp astar  increase runtime overhead arb execution normalize execution speculation methodology processor non speculatively address translation execution memory instruction load cannot instruction squash mispredictions exception speculation uncommon implement non speculative mode processor optimize non speculative mode processor rename memory instruction cannot rob rob empty refer processor NONSPEC evaluate performance overhead speculation benchmark NONSPEC entirely non speculative mode non speculative mode normal speculative mode truncate benchmark benchmark billion instruction without performance data billion instruction performance data benchmark rerun methodology baseline performance increase execution non speculative mode performance overhead average overhead execution maximum overhead benchmark href although overhead incur enclave program enclave apply insecure program outside enclave bzip gcc  sjeng libquantum href omnetpp astar  increase runtime overhead NONSPEC execution normalize execution overall performance overhead MI overhead enclave enclave program MI affected flush microarchitectural context switch llc partition llc MSHR partition llc robin arbiter omit influence speculation earlier overhead approximate evaluate performance processor simply combination flush arb increase execution performance overhead enclave program performance overhead average overhead enclave MI maximum overhead benchmark gcc performance approximation primary omission ignore bursty traffic overhead llc arbiter however conservative model overhead llc MSHR partition bzip gcc  sjeng libquantum href omnetpp astar  increase runtime execution overhead enclave application MI normalize execution overhead non enclave performance overhead enclave program overhead non enclave program MI flush microarchitectural overhead synthesis clocked maximum 1GHz therefore additional hardware enforce security affect frequency approximately consume component llc SRAMs FPUs increase conclusion enclave strengthen abstraction restore isolation guarantee specify threat model careful prototyping evaluation enclave MI aggressive speculative processor prototype reasonable overhead effort overhead unprotected program timing independence enclave unprotected program modify OS reduce overhead cache index primary remain challenge enclave software expressive memory across protection domain maintain isolation