approximate compute precise data significant performance gain reduction compute kernel however without leverage stack computer computer architecture undermine potential approximate compute varifocal storage dynamic multiresolution storage tackle challenge performance quality flexibility computer diverse application demand varifocal storage dynamically adjusts dataset resolution within storage device thereby mitigate performance bottleneck exchange data approximate compute kernel varifocal storage introduces autofocus iFilter mechanism quality inside storage device program adaptive diverse datasets varifocal storage flexible efficient approximate compute without exceed conventional storage raw dataset storage device target operator complement exist ssd controller dynamically generate resolution datasets evaluate performance varifocal storage application heterogeneous computer prototype ssd varifocal storage data resolution adjustment without programmer input conventional approximate compute architecture varifocal storage overall execution keywords approximate compute heterogeneous computer architecture storage processing intelligent storage data processing introduction approximate compute gain traction commercialize application tolerate error input data detail raw data processor hardware accelerator approximate compute offs accuracy improve performance apply simplify circuit reduce computation therefore approximate compute creates demand dataset resolution meaning detail raw data data precision summarize intermediate sample context raw data storage essential compute exist approximate compute research focus accelerate compute kernel improve architectural component program framework algorithm computer host approximate compute storage stack conventional compute generation GPGPUs execute approximate compute kernel overhead input datasets due data storage device adjust data resolution etc becomes critical stage data processing pipeline recent advance approximate hardware accelerator embody TPUs  NPUs mixed precision GPGPUs shrunk execution compute kernel deepen gap data preparation computation approximate application fundamentally address aforementioned bottleneck approximate compute storage device application deliver datasets resolution lower resolution reduces dataset layer lessen bandwidth demand data source decrease latency critical data transfer overhead compute kernel directly resolution input avoid unnecessary data conversion spite benefit storage device effectively implement data resolution reduction building storage device challenge performance computation adjust data resolution storage device efficient exceed latency transfer adjust data affect normal workload quality reduce data resolution lower latency data transfer potential degrade output quality micro october columbus usa     hung wei tseng input data significantly inaccurate application recompute iteratively retrieve reduce data increase latency flexibility preserve ability datasets diverse resolution application fails limit usefulness minimize datacenter architecture prohibitively expensive hardware component  likely prevent widely adopt propose varifocal storage VS dynamic multi resolution storage architecture improves performance address aforementioned challenge VS extends storage interface semantics introduce operator application apply data resolution adjustment VS compute resource already storage device non volatile memory nvm operator raw data without additional hardware component VS architecture raw data VS storage overhead storage device quality apply approximate compute application VS autofocus mechanism automatically specify resolution autofocus selects resolution satisfies variable VS operator data inside storage device compute kernel host computer heterogeneous compute resource processing data autofocus approximate compute  VS prevent compute kernel processing data quality reduce performance loss due recomputation input data resolution application tolerate wider datasets reduce programmer burden application enable potential resolution adjustment VS introduces iFilter mechanism specify approximate operator appropriate resolution later evaluate VS implement VS compliant solid ssd extension exist datacenter ssd  ssd allows application adjust data resolution operator approximation pack data filter content selection firmware program without modify hardware summary contribution VS architecture optimizes performance approximate compute stack dynamically data resolution storage device address demand performance flexibility quality demonstrates potential benefit another layer quality reduce programmer burden introduce autofocus iFilter mechanism automatically data resolution operator describes implementation VS demonstrate feasibility VS architecture storage device evaluate performance VS approximate compute application application manually VS critical data preparation without significantly affect accuracy autofocus cpu storage device gpu accelerator access data transfer adjust resolution compute kernel idle access data transfer access adjust resolution data transfer access data transfer compute kernel adjust resolution data transfer access data transfer compute kernel data processing pipeline approximate application conventional execution model bfs scholes  hotspot   kmeans knn SC svm XGB cnn pred svm pred  average geomean ratio data transfer approximate compute kernel data exchange overhead execution perform compute kernel amount data mechanism resolution VS performance average fully automatic iFilter mechanism VS achieve speedup latency VS conventional approximate compute architecture VS faster programmer optimization faster autofocus faster iFilter motivation background VS improves data performance accommodates demand approximate compute application motivation describes opportunity computer architecture discus alternative overhead datasets resolution illustrates data processing pipeline  application heterogeneous computer computer issue command storage device access raw data internal data array transfer raw data underlie interconnect simultaneously data access request host computer receives chunk data cpu datasets resolution approximate compute kernel perform computation resolution adjust datasets kernel leverage gpu tpu npu hardware accelerator additionally exchange component interconnects accelerator compute prepared data dynamic multi resolution data storage micro october columbus usa non volatile memory chip non volatile memory chip non volatile memory chip non volatile memory chip ssd controller interface dma dram controller flash interface generalpurpose core ecc accelerator ssd dram non volatile memory chip non volatile memory chip non volatile memory chip non volatile memory chip intra storage interconnect gpu pcie switch cpu memory accelerator storage device pcie switch storage device architecture SSDs pcie interconnect architecture approximate compute acceleration technique latency retrieve data storage becomes critical stage data processing pipeline latency raw data chunk nvm express nvme storage device execution perform approximate mixed precision compute kernel data chunk nvidia tesla gpu application detailed description highly optimize library saturates nvme bandwidth overhead datasets exceeds kernel execution critical stage majority application opportunity nvm storage without revisit hardware software interface storage device conventional approximate compute framework fail optimize increasingly critical data preparation opportunity reduce data approximate compute  datasets compute kernel usually consume byte compute however conventional storage interface nvme standard command exchange raw data source destination application reduce bandwidth demand exchange raw data storage device host device internal bandwidth conventional storage interface waste internal bandwidth storage device controller datacenter SSDs controller prototype ssd channel internal bandwidth prototype ssd GB ssd mlc flash memory chip average reading latency KB however application host computer exchange data ssd limited pcie bandwidth newer faster nvm technology   mismatch internal external bandwidth become significant storage processing conventional interface hide freely available processing ssd controller architecture datacenter ssd addition nvm chip ssd contains purpose core dram execute firmware program cache buffer data spite limitation dynamic outgo bandwidth ssd controller access data storage array channel nonetheless ssd purpose core remain unavailable application conventional interface access raw data due relatively longer latency access nvm device provision processing avoid embed operating ssd core idle significant amount accurately processor idle analyze load processor core baseline data SSDs scenario maximum utilization saturate outgo pcie bandwidth continually issue MB request scenario busiest ssd processor core spent parse nvme request busiest core spent command pcie interconnect processor responsible manage data access flash data ssd perform garbage collection none processor due latency erase operation characteristic SSDs consistent previous data SSDs ssd prototype average utilization ssd processor framework  ssd controller typically idle spare non essential workload alternative approach alternative address  bottleneck purpose application  requirement approximate compute application however none alternative address demand approximate compute heterogeneous computer alternative address subset challenge datasets resolution increase bandwidth approach improve data transfer performance storage device host computer increase bandwidth storage device however approach expensive architecture topology attach peripheral device host processor accelerator popular interconnect pci express pcie SSDs attach pcie pcie gen lane GB sec bandwidth CPUs incorporate memory controller chip exclusive processor memory bus bandwidth host application communicate device gpus NICs hardware accelerator SSDs limited pcie bandwidth cpu connects actual outgo bandwidth ssd narrower theoretical bandwidth usually multiple device compete bandwidth cpu memory controller interconnect architecture increase bandwidth challenge cpu pcie lane available increase micro october columbus usa     hung wei tseng varifocal storage core varifocal storage api VS compatible nvme driver host application computer kernel accelerator interconnect storage interface nvm array storage device host computer accelerator pcie pcie intra storage interconnect ssd management layer VS architecture pin processor reduce peripheral device data compression although lossy lossless data compression algorithm reduce data bandwidth overhead decompress data destination compute device easily cancel benefit reduce data transfer without appropriate hardware data compression performance degradation precisely storage device data lossy algorithm sacrifice  storage processing isp purpose intelligent storage framework  samsung      application processing inside SSDs platform approximate compute platform aim offload computation compute suboptimal performance approximate compute  filter operation render datasets distort raw dataset increase data exchange computation platform programmer customize storage computation resolution adjustment approximate compute per application basis increase burden programmer security concern program easy programmer easily overestimate capability controller hurt performance approximate storage approximate storage data unreliable memory faithfully raw data neither computation dynamically generate data resolution approximate storage simply sacrifice flexibility quality without revisit storage interface exist quality mechanism request raw data storage device framework output quality subset approximate computation opportunity capture quality input fail requirement computation superiority VS conventional approach respect cpu storage device compute kernel data transfer compute kernel data transfer adjust resolution access access adjust resolution access data transfer adjust resolution access gpu accelerator compute kernel data transfer data transfer adjust resolution access compute kernel compute kernel data transfer data transfer adjust resolution access data processing pipeline VS overview VS heterogeneous computer VS revisits storage stack device dynamically data resolution demand VS core layer resides inside storage device data resolution application VS layer interacts exist interface extend interface resolution adjustment VS layer ssd management layer flash translation layer flash solid request data host extend kernel driver api function application request exchange data feedback VS core layer host application interacts api sends command specify raw data operator VS VS core layer operator effective application data parallelism tolerate inaccuracy datasets VS layer autofocus iFilter perform mechanism automatically appropriate data resolution quality host application optionally enable autofocus iFilter VS api kernel driver illustrates data processing pipeline VS enables tackle challenge performance quality flexibility operator quality mechanism inside storage device VS exploit richer internal bandwidth idle processing efficiently adjust datasets resolution approximate compute application instead raw data VS allows storage device adjust datasets host reduce latency transfer data interconnect VS mitigates idle compute cpu resource tackle useful workload performance gain approximate application host varifocal storage programming model application advantage VS model programmer VS library specify data resolution retrieve adjust data application application access compute kernel resolution data detail VS program model VS library function application programmer function operator data autofocus iFilter enable dynamic multi resolution data storage micro october columbus usa synopsis description int setup int  struct operator const char restrict format function VS operator apply file associate file descriptor  describes desire operator data associate file descriptor function data format within file format VS apply operator data accordingly contains nop operator VS apply approximation correspond data int int  void buf  struct feedback function data storage device previously operator file descriptor feedback struct feedback data structure int release int  function disables VS operator data  release resource operator sample function VS api int setup int  char  skip code int  VS declare VS variable struct operator struct feedback file descriptor  filename  precise data file descriptor   sizeof int  nfeatures sizeof int skip initialization code VS parameter desire operator packing default packing AF autofocus VS iFilter packing resolution skip initialization code VS apply desire VS operator file setup  VS data VS operator  buf  nfeatures sizeof float VS disable usage VS operator file release  skip code VS approximate kernel operator succeed resolution resolution cluster approximate cluster skip code kmeans code sample insert VS function parameter allows underlie storage device adjust data variable autofocus iFilter adjust data representative api function function application file descriptor offset file descriptor manipulate application simply conventional file function   kmeans code rodinia benchmark suite VS function insert kmeans conventional library function manage file descriptor program data standard function function code VS resolution access data modify kmeans code initiate VS  file descriptor setup version code desire operator resolution setup function accepts argument describes data format kmeans code sample VS interpret file content float VS adjust data application function function resembles exist linux function data request data operator trim data function feedback regard resolution VS selects program regular function replace VS data resolution program previously initiate VS setup api function interact underlie file cache improve performance another application request dataset resolution VS successfully adjusts data application compute kernel resolution input cluster approximate reduce execution program kernel elastic dataset machine algorithm compute kernel programmer compose approximate version compute kernel slightly modify kernel function precise data summarize input datasets application library function mixed precision cuda library  library npu leverage approximate hardware accelerator perform approximation compute kernel approximate compute kernel application programmer VS operator data adjustment setup function desire resolution programmer leverage exist framework profile addition traditional approach resolution VS autofocus mechanism automatically resolution variable programmer optionally pas parameter resolution reduction choice autofocus usually conservative programmer autofocus nonetheless application adapt datasets ensure quality execution VS leverage exist approximate framework application apply multiple version approximate kernel VS operator programmer iFilter mechanism storage device appropriate operator resolution dataset programmer pas VS operator trigger iFilter mechanism optionally available operator variable feedback data structure feedback application execute correspond approximate kernel core varifocal storage layer core VS operator adjust data resolution VS expose operator application extend storage interface VS layer implement mechanism appropriate data resolution quality adjust data micro october columbus usa     hung wei tseng VS operator VS operator adjust data resolution shipping data host application achieve performance VS model operator accordance criterion computation overhead processing inside storage device VS minimize impact access latency consumption avoid extra hardware application apply operator thereby efficient valuable device resource VS identifies useful operator previous effort operator VS advantage mismatch external internal bandwidth downsize outgo data VS model effective data adjustment reduce demand interconnect bandwidth VS framework category operator diverse data data pack data pack operator trim dataset byte express item condense layout memory data pack operator suitable application within data application tolerate inaccuracy input data data pack operator translates raw data precise data potentially decrease accuracy float int int char quantization quantization operator  raw preserve relative quantization operator applicable application  reduction tile reduction operator applies function average input yield output apply reduction operator VS sends reduce amount data passing interconnect operator useful machine statistic application input data uniformly distribute sample sample operator chooses subset item raw data sends item host computer operator category perform uniform random data selection report representative data sample operator filter repetitive input contribution application compute kernel elastic respect within dataset sample operator achieve loop  without code modification without VS sample operator conventional loop  raw data memory besides precede operator VS designer extend operator mechanism described autofocus iFilter autofocus iFilter mechanism quality reduce amount programmer effort adjust data resolution autofocus iFilter inspire previously phenomenon quality input data affect quality approximate compute subset input data representative input data approximate compute application tolerate inaccuracy building upon observation autofocus iFilter resolution operator portion raw input data request dataset monitor quality adjust input data algorithm autofocus input CV CV optional sort ascend  data compute CV satisfy CV remove return autofocus autofocus allows programmer simply specify desire VS operator VS appropriate resolution guarantee quality improve performance autofocus application adaptive datasets appropriate resolution varies dataset dataset algorithm autofocus mechanism autofocus decision programmer operator quality variable specify CV programmer default setting autofocus adjusts data subset specify operator precise resolution autofocus examine available operator resolution autofocus quality adjust data adjust data raw data generate comparison data pack operator autofocus precision loss data FP adjust data FP difference variable reduce overhead operator complex logic sample generate controller load autofocus applies quality function compute CV byte data randomly remain adjust data summarizes compute variable VS operator checked adjust data successfully compute CV VS report resolution host application transfer adjust data algorithm interconnect quality adjust data fails variable autofocus resolution algorithm iFilter iFilter without programmer input effective autofocus application compute dynamic multi resolution data storage micro october columbus usa VS operator function compute CV description data pack     data    data  data pack VS calculates absolute difference data adjust data threshold adjust data target data quantization    actor actor max  data  min  data  max  data  min  data  quantization VS quality rescale adjust data raw data format absolute difference VS adjustment difference threshold reduction tile    reduction tile VS computes absolute difference raw data adjust data VS absolute difference threshold sample binary distance    sample VS calculates ham distance raw data adjust data decision distance distance summary function compute CV algorithm iFilter input OP CV OP CV optional OP sort ascend   min min data compute CV satisfy CV remove min min OP  data compute CV satisfy CV remove return remove kernel compatible multiple VS operator algorithm iFilter mechanism iFilter algorithm decision phase monitoring phase decisionmaking phase iFilter available VS operator OP apply input data request data iFilter algorithm autofocus algorithm selects appropriate resolution operator iFilter resolution min data min operator decision phase iFilter monitoring phase operator yield data iFilter operator adjust raw data iFilter successfully request iFilter report operator resolution adjust data host iFilter fails request remove resolution available resolution restart decision phase appropriate operator resolution computation overhead iFilter autofocus iFilter examines operator minimum amount data interconnect however additional overhead negligible datasets relevant VS operator apply chunk dataset building storage device compliant varifocal storage building VS compliant storage device tackle challenge associate hardware software interface allows application resolution quality target data minimize computational overhead adjust data resolution VS overcomes former challenge extend nvme interface modification stack application VS address latter challenge exploit idle cycle available ssd controller describes nvme extension exist architectural component ssd ensure VS compliance describes operator VS architecture nvme extension VS conventional storage interface popular nvme protocol command data access therefore nvme extension VS command VS operator apply operator datasets extend nvme interface aligns program model simplify complexity software implementation VS operator nvme extension VS command file descriptor setup command command descriptor byte reserve standard nvme command format descriptor usually corresponds file program abstraction VS abstraction instruction architecture allows api demand operator operator byte opcode byte integer argument argument target data resolution quality variable category operator VS opcode micro october columbus usa     hung wei tseng host cpu intel core ghz gpu nvidia tesla OS file linux kernel ext baseline VS compliant ssd controller   controller channel dram 2GB ddr dram capacity GB  flash chip mlc nand KB interface nvme pcie platform configuration evaluation data api generates sequence operator driver sequence host dma ssd access upon setup command ssd specify operator internal data structure usually resides dram ssd later command descriptor operator setup command previously correspond operator internal data structure application setup operator release command signal ssd release descriptor later setup command reuse descriptor apply VS operator VS adjusts data resolution data request command command typical command exception command contains byte reserve command report data host operator data negative error occurs command report operator data adjustment host software stack regular feedback host computer error code driver allocate additional dma host command receives feedback nvme physical prp link data structure allows command specify almost unlimited dma accommodate feedback information nvme command format minor modification device driver nvme standard allows nvme command transfer MB data consequently firmware program offset data within data associate descriptor autofocus iFilter revise decision processing MB file transaction api generate command restart entire transaction revise decision architecting VS compliant ssd minimize extra hardware VS efficient exist architectural component SSDs flash memory technology critical data access pipeline access flash chip latency dma stage outgo bandwidth ssd data transfer critical pipeline usually microsecond  processor core execute instruction within latency critical stage ssd data access pipeline core idle slack VS apply operator without additional accelerator ssd performance degradation access data array apply operator average data access latency pipeline VS extends firmware program reclaim idle compute resource VS operator chunk request data flash arrives ssd dram extend firmware program signal underutilized idle processor core fetch data data location ssd dram apply desire operator VS operator reduce dataset program VS operator reuse exist data buffer additional buffer processing firmware program runtime ssd dram data cache processor core operator ssd VS operator implement overlay function firmware program extend nvme protocol mechanism exchange information adjust data resolution overlay function argument resolution pointer ssd dram data buffer location report data resolution data structure define framework operator chain designer function designer update header file firmware program identifies locates operator designer compiler generate machine code controller microarchitecture finally deploys compile firmware program ssd standard firmware update command nvme protocol experimental methodology developed VS extend datacenter ssd performance workload span application describes setup experimental platform benchmark experimental platform built VS compliant ssd extend commercialize datacenter ssd attach VS compliant ssd highend heterogeneous machine gpu host operating contains extend nvme driver additional VS nvme command specification host computer ssd VS compliant ssd modify firmware program firmware compatible standard nvme modify code handle regular nvme command firmware achieves performance regular nvme ssd hardware configuration throughout baseline ssd achieve GB bandwidth communicate host theoretical internal bandwidth twice dynamic multi resolution data storage micro october columbus usa workload application category operator resolution raw data relative error rate breadth bfs graph traversal pack GB scholes financial pack GB hotspot physic simulation reduction GB 2D discrete wavelet transform  image video compression reduction GB  robotics pack GB  3D pack GB kmeans data mining quantization GB knn data mining pack streamcluster SC data mining pack  svm machine sample GB  XGB machine pack cnn pred machine quantization GB  pred svm pred machine pack  pred XGB pred machine pack workload default VS operator input data error rate perform utilization ssd capacity SSDs provision internal data array typically minimize garbage collection leveling  workload interference VS operation regular ssd workload benchmark workload VS performance assessment workload baseline configuration VS enable configuration application criterion application representative approximate compute workload publicly available repository application accept publicly available datasets data generator capable arbitrary datasets meaningful input dataset dataset gpu accommodate limitation ssd VS program model previous modify compute kernel scholes hotspot  kmeans implement approximate compute version knn SC svm xgboost leverage native mixed precision nvidia turing architecture workload default parameter workload demo script application exploit pipeline parallelism overlap resolution adjustment compute kernel hide latency data resolution correspond operator approximate compute application accept workload carefully profile chose operator parameter limit relative error rate version application benchmark application chosen datasets kmeans knn SC svm XGB cnn pred svm pred XGB pred respect evaluate VS difference kmeans knn SC kmeans aggressive pack operation reduces input difference svm xgboost svm encourages programmer aside raw data training predictor machine ML model svm pred model precise datasets reduce resolution datasets predict predictor cnn allows aggressive quantization reduces data model error programmer VS version apply operator target resolution autofocus iFilter mechanism enable implementation feedback VS api VS decides adjust data resolution code apply appropriate compute kernel data otherwise code baseline compute kernel autofocus iFilter default variable relatively conservative across application variable delta pack reduction quantization binary difference sample target error rate RESULTS performance VS prototype potential impact VS approximate compute overhead VS operator mechanism throughout VS operator critical stage data access pipeline ssd limited processor core operator advantage processing inside storage device complex pack operator convert precision precision float quantization operator rescale precision integer shorter critical stage latency ssd reduction operator evaluate average precision float within flash sample operator generally randomly binary data autofocus iFilter mechanism ssd generalpurpose core execute algorithm autofocus mechanism VS stabilize resolution operator binary iFilter decision phase decision micro october columbus usa     hung wei tseng bfs scholes  hotspot   kmeans knn SC svm XGB cnn pred svm pred  average geomean speedup VS VS autofocus VS iFilter VS int ext bandwidth speedup reading input adjust data resolution VS perform sample operator autofocus iFilter resolution mechanism simply compute variable overhead negligible throughput unaffected performance data resolution adjustment speedup reading input datasets adjust data resolution workload VS mode VS conventional approximate program model relies host adjust data resolution programmer VS default VS setting specify desire operator resolution performance data adjustment kmeans  tolerate resolution input speedup data adjustment storage device raw data host scholes adjust raw data host consume data transfer therefore VS achieve speedup VS advantage isp model data adjustment geometric discount outlier VS exhibit speedup autofocus iFilter without programmer input desire resolution operator autofocus iFilter accelerate datasets approximate kernel respectively workload autofocus mechanism effectively selects resolution obtain exhaustive profile kmeans programmer decision condense dataset quantize autofocus quantizes dataset indistinguishable achieve raw dataset cnn pred autofocus conservatively decides quantize input however programmer exhaustive profile quantization operator shrink input data svm autofocus perform adjustment raw data kernel computation kernel computes raw data svm skip data preprocessing stage host slight performance gain data adjustment fully automatic mode iFilter achieves speedup data preparation overhead iFilter decisionmaking phase autofocus iFilter operator resolution overhead relatively insignificant input iFilter decision operator target resolution autofocus kmeans svm cnn pred iFilter selects pack instead programmer decision relative error rate computation autofocus iFilter exceed autofocus iFilter conservative choice programmer internal external bandwidth VS useful ssd limited external bandwidth nonetheless VS adjusts data resolution within data access pipeline avoids operating overhead VS model beneficial internal bandwidth external bandwidth quantify benefit modify ssd firmware controller ssd channel internal bandwidth external bandwidth prevent application advantage reduce demand outgo bandwidth VS int ext bandwidth speedup modify version prototype ssd without rely host cpu data adjustment VS latency datasets additionally VS reduces data interconnect application adaptive device compete limited pcie link datasets VS reduce overhead dataset dynamically resolution accommodate demand diverse application application kmeans knn SC svm XGB cnn pred  XGB pred raw input VS programmer quantization operator resolution reduces data kmeans pack operator knn SC reduce data dataset autofocus iFilter enable resolution preview input dataset without compute kernel mechanism chose resolution application without architecture VS storage multiple version dataset raw data host preprocessing hurt efficiency performance svm XGB programmer operator dataset iFilter enable selects pack svm instead sample resolution chosen iFilter XGB svm compute kernel elastic input dataset iFilter allows application advantage svm elasticity discard data achieve loop  unmodified compute kernel similarly cnn pred svm pred XGB pred programmer quantize input data VS achieve performance performance achieve simply operator dataset dynamic multi resolution data storage micro october columbus usa speedup compute VS AF ira bfs scholes  hotspot   kmeans knn SC svm XGB cnn pred svm pred XGB pred average geomean speedup data compression speedup latency VS conventional approximate compute framework speedup data preparation VS data compression diverse datasets autofocus determines appropriate resolution examine characteristic datasets autofocus VS adaptive input datasets approximate compute application addition autofocus rely feedback kernel computation storage device raw data autofocus efficient conventional approach tackle illustrate strength VS modify data generator   generate random various 3D autofocus datasets dimension VS autofocus exhibit significantly shorter latency datasets conventional approximate compute approach ira unmodified compute version  baseline autofocus raw datasets host VS outperforms ira dataset VS data encode byte integer dataset autofocus sample datasets data speedup ira dataset distribution coordinate expands float approximate compute kernel cannot advantage precise without exceed error rate limit VS ira apply compute generate autofocus detects potential data resolution slight slowdown VS overhead autofocus decision contrast ira slows approximate compute cannot generate meaningful data compression comparison significant VS performance gain reduce data movement overhead VS performance lossy lossless compression algorithm FPC pack bdi ZSTD clocked reading compress data decode data adjust resolution exclude overhead compress data perform compression algorithm baseline speedup VS data compression bfs scholes  hotspot   kmeans knn SC svm XGB cnn pred svm pred  average geomean speedup VS VS autofocus VS iFilter compute speedup latency average VS outperforms compression algorithm dataset overhead decompression consumes considerable overhead host decompression bandwidth addition VS generates data compute kernel directly application bypass decompression overhead data compression without hardware accelerate compression decompression data compression cannot compete VS impact VS application latency VS impact relative latency workload workload conventional approximate compute approach gpu accelerate kernel baseline VS efficiently prepares input datasets storage device approximate compute kernel gpu programmer VS speedup application autofocus dynamically data resolution application achieve average speedup autofocus adjusts data resolution constraint variable generally conservative decision programmer autofocus resolution adjustment svm cnn pred applies compute kernel distort without programmer intervention iFilter improve performance iFilter flexibility appropriate combination VS operator resolution autofocus however without VS conventional approximate compute approach compute quantify reduce cpu workload consumption examine cpu frequency perform data pack VS compliant ssd baseline host version implementation sample cpu frequency pack lightweight operation computational burden host program cpu frequency beyond ghz VS cpu handle dma issue nvme command peak cpu frequency data mhz watt meter micro october columbus usa     hung wei tseng bfs scholes  hotspot   kmeans knn SC svm XGB cnn pred svm pred  average geomean relative consumption VS VS autofocus VS iFilter compute consumption consumption consumes frequency without VS consumes average data VS reduces consumption application latency VS reduces consumption consumption watt VS achieve average saving application conventional approximate compute approach without programmer aggressive decision adjust data resolution VS autofocus iFilter achieve saving application svm cnn pred due increase latency explains autofocus iFilter saving respectively contrast conventional architecture aggressive data adjustment approximate compute kernel improve consumption compute related approximate compute significant presence tackle limitation hardware simplify algorithm ALUs FPUs faster operator approximate compute maximizes efficiency silicon chip simpler faster approximate circuit circuit  accelerator load approximation approximate memoization approximate compute avoids intensive usage precise circuit performance efficiency addition approximate compute allows hardware designer unreliable transistor commonly advanced technology approximate compute research cite  principle resolution adjustment address VS complementary project address issue reduce overhead apply approximate hardware software approximate compute research project analysis program extension compiler VS simply expose feature application api proposes extension protocol firmware program application adapt VS without program extension compiler autofocus iFilter mechanism input quality apply VS operator within storage device VS react compute intensive kernel VS exist project orthogonal incorporate VS exist approximate compute program framework VS operator mechanism efficiently VS benefit recent advance isp  processing framework mechanism VS execute approximate compute application efficiently approximate compute channel encode memory controller achieve VS reduce data movement overhead VS independent project hardware conclusion VS architecture arbitrary data resolution approximate compute VS adjusts resolution input data within source storage device application access feature VS programmer interface VS significantly reduces overhead latency leverage underutilized processor resource describes autofocus iFilter mechanism automatically appropriate parameter data adjustment reduces programmer burden enforce quality outgo data conduct VS compliant ssd gain tailor application platform demonstrates VS compliant architecture modification hardware software indication VS efficiency relative conventional  architecture speedup VS data resolution adjustment speedup latency improvement summary VS improves performance maintains flexibility guarantee quality incurs storage overhead adjust data resolution