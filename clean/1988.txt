harvest emerge alternative  embed device due intermittent harvest researcher equip nonvolatile memory nvm crash consistency mechanism however prior non trivial hardware modification voltage monitor nonvolatile flip flop scratchpad dependence module etc thereby significant manufacturing performant intermittent computation CoSpec architecture compiler scheme commodity processor harvest achieve crash consistency without unconventional architectural CoSpec leverage speculation assume failure commit buffer SB speculative  CoSpec compiler partition program series recoverable code SB overflow SB program speculation successful release buffer nvm failure occurs execution speculative disappear volatile SB affect program nvm consequently interrupt restart consistent program wake failure hide latency SB release essentially nvm writes boundary CoSpec overlap nvm writes speculative execution instruction parallelism illusion outof execution processor achieve speedup outage harvest trace frequent outage demonstrate CoSpec outperforms scheme average introduction harvest rapid pace application become wider iot device vehicle pressure sensor health monitoring application unmanned vehicle challenge harvest instability source solar thermal etc unpredictable frequent outage harvest capacitor buffer intermittently compute secure capacitor deplete intermittent computation intermittent researcher adopt microarchitecture  nonvolatile memory nvm crash consistency mechanism checkpoint backup data restore across outage crash consistency prior nonvolatile processor NVP approach rely voltage monitor checkpoint scheme checkpoint volatile register voltage monitoring detects voltage define threshold buffer capacitor addition voltage monitor scheme non trivial hardware modification nonvolatile flip flop laid volatile flip flop backup restoration hardware checkpoint controller logic additional capacitor voltage monitor voltage monitor stability issue excessive leakage crack capacitor reduce capacitance voltage detection delay unexpected glitch mitigate issue exist aggressively increase voltage threshold wake backup consequently waste progress voltage secure wake  proposes voltage monitor crash consistency scheme clank implement idempotent processing hardware identify idempotence violation due  writer dependence clank dependence hardware module memory buffer load instruction  load detect clank buffer buffer becomes clank checkpoint register flush buffer nonvolatile scratchpad flush data nvm without voltage monitor wake voltage micro october columbus usa  choi  liu  jung unfortunately clank although nonvolatile scratchpad performance realize nonvolatile SRAM future technology alternative exploit  3D stack SRAM nonvolatile memory SRAM data underlie nonvolatile failure however voltage monitor checkpointing controller logic render clank vulnerable voltage monitor issue clank significant slowdown due frequent overflow memory buffer although buffer mitigate increase dependence delay accord clank performance overhead unrealistic assumption nonvolatile scratchpad summary prior suffer hardware efficiency overhead compelling practical crash consistency commodity processor without significant slowdown achieve performant intermittent computation CoSpec novel architecture compiler scheme commodity processor harvest achieve crash consistency without unconventional architectural CoSpec leverage speculation assume failure commit buffer SB speculative  CoSpec compiler partition program series recoverable SB overflow SB execution program speculation successful therefore CoSpec release buffer SB nvm failure occurs SB release incorrect recovery CoSpec proposes phase release drain SB entry proxy buffer allocate nvm copying primary memory nvm buffer primary memory intact lose failure occurs execution buffer SB disappear volatile implication speculate commit failure cannot affect program nvm consequently interrupt restart consistent program wake failure CoSpec effectively crash consistency  speculation pipeline stall due phase SB release consists nvm writes consume instruction stall significant performance overhead hide nvm latency phase SB release CoSpec overlap SB release speculative execution instruction parallelism ILP illusion execution processor achieve speedup finally CoSpec advantage memory access dma another exist hardware component commodity harvest dma module already adopt msp series microcontrollers accelerates memory  fram nonvolatile memory dma CoSpec accelerate phase SB release memory proxy buffer entry primary memory location improve ILP efficiency deliver significantly performance prior contribution summarize unlike prior CoSpec expensive hardware modification CoSpec intelligent  interaction commodity microarchitecture crash consistency achieve truly recoverable intermittent computation CoSpec achieves performance intermittent computation propose ILP technique allows CoSpec effectively hide latency nvm writes program ILP CoSpec performance CoSpec achieves speedup non dma ILP alone dma respectively overall CoSpec outperforms nonvolatile processor average outage context voltage monitor harvest CoSpec decrease wake voltage efficiency experimentation frequent outage demonstrates CoSpec consumes background motivation architecture harvest hungry harvest prior opt extremely processor architecture despite performance processor suitable consume complex processor architecture outage become norm program execution harvest processor byte addressable nonvolatile memory nvm efficient backup recovery across outage TI  series microcontrollers mcu popularly harvest already integrate fram memory processor core important CoSpec target commodity mcu fram nonvolatile memory conventional microarchitecture without cache prior absence cache data processor core register transient lose register checkpointed nonvolatile memory nvm restoration wake failure crash consistency crash consistency harvest checkpoint volatile register nvm program execution rollback checkpointed wake prior propose processor hybrid core equip pipeline however assume harvest source deliver stable execution CoSpec compiler speculative intermittent computation micro october columbus usa failure however nvm alone cannot ensure recovery due memory inconsistency data nvm corrupt across outage suppose nvm data increment checkpoint checkpoint allocate nvm initial code execute failure however increment rollback checkpoint execute increment already update failure unexpected output memory inconsistency incorrect recovery software approach prior ratchet identifies eliminates memory inconsistency idempotent processing memory inconsistency ratchet recognizes non idempotent memory access comprise load subsequent memory location   dependence nvm data increment load subsequent  memory access around  ratchet compiler automatically partition input program series idempotent  interrupt idempotent safely execute without memory inconsistency prior user partition program task data task become inconsistent due  along checkpointing volatile register input later task unfortunately software crash consistency scheme significant slowdown overhead advent hardware approach hardware approach reduce overhead eliminate additional burden user prior hardware approach propose architectural relies voltage monitoring hardware implement idempotent processing voltage monitoring approach hardware approach crash consistent harvest nonvolatile processor requirement prior voltage monitor ensure sufficient capacitor checkpoint volatile register voltage monitor alert processor checkpoint monitor estimate capacitor contains register file checkpointing similarly voltage monitor wake processor sufficient secure successfully restore checkpointed volatile register voltage monitor checkpoint failure resume exactly  code failure memory inconsistency however expensive hardware voltage monitor approach non trivial hardware modification nonvolatile flip flop laid volatile flip flop register backup restoration hardware checkpoint controller logic additional capacitor estimate voltage voltage monitor approach precision issue reliably estimate sufficient capacitor checkpoint without failure mainly estimation predict future rate discharge capacitor suffer unstable discharge due crack increase discharge rate voltage monitor underestimate future rate dissipation unfortunately partial unfinished checkpointing incorrect recovery voltage monitor address unpredictable discharge rate pessimistically overestimate discharge rate inevitably increase checkpointing frequency thereby hurt performance efficiency rate nvm address capacitor issue inaccurate timing error voltage monitor recent developed precise reliable voltage detection technology however ensure checkpoint recovery increase wake backup voltage threshold harvest almost previous generation voltage monitor voltage monitor approach recent threshold consequently waste without progress sufficient voltage wake finally backup recovery controller decision reboot potential checkpoint data corruption due voltage spark unexpected glitch voltage monitor approach address issue clank proposes voltage monitor processor implement idempotent processing hardware detail clank monitor memory access load memory buffer address prefix buffer sweep buffer clank  load impossible perform idempotent processing memory inconsistency wake failure  detect clank buffer non  directly merge nvm buffer overflow unable accommodate memory instruction address clank alert processor checkpoint register flush buffer nonvolatile scratchpad empty buffer flush data eventually nonvolatile memory  buffer clank load buffer load unfortunately clank suffers significant prohibit adoption although clank advantage nonvolatile scratchpad faster nvm performance technology realize nonvolatile SRAM reality clank leverage  3D stack micro october columbus usa  choi  liu  jung hybrid SRAM nvm SRAM data nonvolatile failure however  voltage monitor checkpointing controller logic render clank vulnerable voltage monitor issue clank involve frequent checkpoint due overflow memory buffer degrade performance significantly clank proposes increase buffer overflow another potentially serious hardware extent enlarge buffer significant pressure cam content addressable memory structure clank associative buffer load queue scarcely increase decade apart additional consumption buffer delay significant consumption possibly clank inappropriate harvest reasonable buffer performance overhead clank unrealistic assumption nonvolatile scratchpad deficiency prior seek develop practical crash consistency commodity processor without significant overhead  approach CoSpec architecture compiler scheme enables reliable crash consistency without significant performance overhead CoSpec hardware compiler architecture compiler optimization technique CoSpec defer CoSpec hardware philosophy CoSpec commodity microcontroller mcu architecture harvest almost enable performance intermittent computation without expensive hardware modification buffer failure speculation buffer adopt commodity MCUs armv core implementation mainly handle  misprediction achieve lightweight crash consistency CoSpec proposes exploit buffer SB speculation difference CoSpec speculation likely without interruption due failure CoSpec leverage buffer SB commit recoverable code execution treat speculative program boundary speculation successful buffer release speculation approach allows interrupt failure primary memory nvm failure occurs buffer currently processor harvest predictor msp MCUs  nonvolatile processor clank CoSpec SB disappear volatile therefore impossible speculate affect nvm consequently interrupt restart consistent program wake failure takeaway speculative cannot release nvm become non speculative without failure CoSpec completely eliminate memory inconsistency without multiple non trivial microarchitectural component nonvolatile processor clank important CoSpec split buffer enable instruction parallelism program execution consecutive recoverable code exclusively occupy SB statically partition code commits SB program boundary CoSpec drain nvm SB challenge achieve crash consistency CoSpec maintain failure atomicity SB drain otherwise partial drain memory inconsistency overcome challenge CoSpec leverage phase SB release mechanism CoSpec drain commit SB proxy buffer nvm drain buffer primary memory nvm phase SB release buffer memory remain intact detail CoSpec compiler partition program CoSpec compiler traverse graph cfg program threshold SB CoSpec compiler boundary compiler analyzes register insert checkpoint instruction designate register file RF checkpoint storage nvm PC register serf recovery wake failure forthcoming failure recover restart insert checkpoint instruction normal instruction accord CoSpec failure speculation commit SB drain nvm speculation successful indeed formation tricky due circular dependence partition register checkpointing essentially instruction determines boundary affect register boundary formation conduct formation leverage algorithm prior detail reader refer CoSpec compiler speculative intermittent computation micro october columbus usa CoSpec partition input program program structure loop purpose CoSpec boundary entry exit function likewise boundary loop header CoSpec identifies boundary split allows boundary compute initial checkpoint instruction initial formation CoSpec analyzes register checkpoint instruction CoSpec compiler traverse cfg topological combine initial combine eliminate checkpoint register precede longer combine traversal CoSpec update sum incoming boundary along sum becomes SB threshold boundary CoSpec boundary CoSpec compiler analyzes partition insert checkpoint possibly partition threshold guaranteed partition SB threshold mistake exactly threshold threshold due partition operation knowledge  operation operation remain CoSpec compiler boundary function function implement operation treat cannot recover due operation CoSpec operation simply checkpointing status operation interrupt operation restart wake failure architecture compiler phase buffer release protocol achieve failureatomic buffer SB release failure recovery without memory inconsistency CoSpec drain SB nvm phase mechanism program boundary CoSpec drain commit proxy buffer allocate nvm drain data buffer primary memory nvm describes phase SB release protocol normal exceptional watchdog timer normal checkpoint trigger SB release boundary program execution CoSpec drain SB corresponds proxy buffer nvm drain CoSpec buffer data primary memory location CoSpec exceptional watchdog timer compiler partition excessively unable execution progress execute interrupt across outage lock situation stagnation avoid stagnation CoSpec dynamically checkpoint register SB expiration watchdog timer adjust account dynamic failure behavior dynamic checkpointing phase SB release watchdog timer expires CoSpec immediately checkpoint register commits idle SB CoSpec drain SB proxy buffer nvm SB completely drain CoSpec buffer data primary nvm location normal watchdog timer disabled phase SB release phase SB release mechanism protects proxy buffer primary data nvm manage partial SB drain fail recover failure  devise phase release SB corresponds completely drain proxy buffer nvm exceptional SB drain completely  devise phase release data proxy buffer completely primary memory location nvm CoSpec restore data wake failure discus detail recovery protocol recovery protocol CoSpec recovery protocol address potential memory inconsistency across failure failure failure timeline failure SB drain phase release  CoSpec simply ignores SB data drain proxy buffer nvm SB content disappear due volatility SB resume interrupt wake failure CoSpec restores register recovery PC RF checkpoint storage nvm PC interrupt although compiler insert checkpoint successfully recovery PC neither proxy buffer RF checkpoint storage nvm failure phase release failure proxy buffer primary memory nvm phase release  recovery PC checkpoint successfully proxy buffer CoSpec rollback instead CoSpec redo phase release proxy data primary memory nvm CoSpec restores register micro october columbus usa  choi  liu  jung cpu drain trigger boundary program execution phase phase SB SB RF checkpoint storage checkpoint normal timer checkpoint register checkpoint drain trigger program execution cpu SB SB phase phase RF checkpoint storage timer checkpoint exceptional CoSpec checkpoint protocol normal exceptional stagnation recovery PC RF checkpoint storage nvm PC recovery failure outside phase release CoSpec recognizes   recovery simpler CoSpec restores register recovery PC RF checkpoint storage nvm PC interrupt failure takeaway accord status CoSpec appropriate action recovery thereby ensure truly recoverable intermittent computation lose occurs optimization avoid potential memory inconsistency phase SB release mechanism persistent writes unfortunately incurs significant performance overhead consume expensive nvm writes otherwise execution progress address overhead CoSpec optimizes phase SB release enable instruction parallelism ILP CoSpec SB release speculatively executes instruction SB release pending describes implementation detail optimization reliably enable ILP execution processor without memory inconsistency adapt ILP intermittent computation frequency outage varies instruction parallelism enable ILP execution CoSpec enables instruction parallelism hide nvm latency overlap code execution instruction parallelism ILP consecutive execute describes non ILP SB drain nvm phase release mechanism phase ensure SB data safely primary memory similarly tso  leverage overlap execution atomic dynamic optimization however devise multi core processor achieve thread interleave queue formation algorithm CoSpec partial SB release memory inconsistency failure recovery fail CoSpec hide latency nvm writes overlap nvm writes entire phase SB release speculative execution code CoSpec execute instruction within ILP approach executes instruction non ILP approach encounter stall instruction due phase SB release speculative execution CoSpec SB release execute achieve crash consistency CoSpec achieve ILP without correctness challenge CoSpec overcome achieve ILP optimization recovery CoSpec avoid insert SB drain otherwise incur data hazard buffer address challenge CoSpec code alternatively SB recall CoSpec split SB exclusive code insert SB insert SB consecutive exclusively SB however insert SB speculative execution phase SB release previous execute overwrite data SB pending drain phase release avoid CoSpec conservatively speculative previous SB release pending load instruction date data execution suppose load instruction data data SB drain load instruction stall correctness purpose avoid delay SB available execution CoSpec invalidate SB entry drain program speculative prior phase SB release pending load speculative data prior SB drain without CoSpec compiler speculative intermittent computation micro october columbus usa str  str inst inst inst inst inst inst inst inst inst inst   sub str str SB release completes SB release phase phase CoSpec without ILP str  str inst inst inst inst inst inst inst inst inst inst   sub str str inst  str backup sub def str PC inst inst SB release completes   writes  SB completely drain proxy buffer nvm  data proxy buffer completely primary memory location nvm phase phase SB release CoSpec ILP performance benefit thanks ILP dma enable accelerate phase SB release stall load data load conventional load SB discussion argue SB inorder pipeline reduce core frequency processor SB dependent load data within avoid complicate schedule logic however CoSpec concern thanks architecture characteristic apart pipeline frequency mhz harvest CoSpec cache implication SB within nvm fram access doable SB entry access magnitude faster fram access latency consequently CoSpec neither frequency reduction schedule logic complication addition CoSpec bypass SB majority load detail SB bypassing compiler analysis stagnation intermittent computation CoSpec address stagnation otherwise waste harvest  without execution progress ensure progress presence frequent outage CoSpec proposes adaptive execution technique account dynamic failure behavior ILP optimization speculation increase consumption non modify possibly failure intermittent computation CoSpec adaptively ILP adjusts speculation accord failure reactive manner suffers failure CoSpec ILP execution failure happens twice stagnation CoSpec watchdog timer checkpoint timer expire CoSpec checkpoint register buffer SB performs technically access SB entry cycle phase SB release timer expire stagnate CoSpec resume timer expiration wake failure jumping encounter another failure CoSpec decrease watchdog timer previous frequency register checkpointing phase SB release stagnate across outage progress without outage CoSpec assumes harvest enables ILP disables watchdog timer approach adaptive execution heuristic CoSpec address stagnation improve performance spending harvest execution progress waste  stagnate efficient buffer load load consult buffer SB however involves expensive cam content addressable memory associative SB address issue CoSpec bypass unnecessary SB effective SB logic CoSpec compiler statically load  aliased previous leverage alias analysis alias CoSpec compiler load instruction bypass SB program execution processor detects load instruction avoids SB directly access primary memory impact compiler SB bypass scheme conduct load instruction avoid SB compile experimental demonstrates significant load bypass SB compile load instruction marked bypass SB average alias analysis  micro october columbus usa  choi  liu  jung advanced alias analysis SVF static analysis dynamic load SB mainly non aliased load loop whereas aliased load   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean SB bypass rate  static SVF static static bypass dynamic buffer bypass rate compile  SVF static alias analysis promising SB bypass rate motivate SB mechanism CoSpec afford sequential logic expensive cam associative freedom SB harvest without worry consumption cam SB SB SB per load access cam ram consumption breakdown SB scheme SB configuration axis conventional cam CoSpec sequential respectively estimate consumption performance conventional cam associative sequential CACTI technology prior conventional associative SB comprise component cam logic ram buffer CoSpec remove cam thanks sequential describes consumption breakdown cam associative sequential SB consumption associative SB sequential analyze latency overhead CoSpec sequential cam normalize access latency consumption overhead CoSpec compiler SVF sensitive successfully program sub graph advanced analysis expensive program analysis per analysis SVF benchmark buffer overhead latency overhead latency normalize latency overhead sequential SB cam associative latency overhead buffer consumption reduction evaluates impact SB scheme various benchmark application memory access dma although ILP execution hide latency phase SB release reduce latency accelerate SB release CoSpec opt dma processing available commodity harvest microcontrollers MCUs msp series dma msp MCUs nvm data transfer memory memory faster normal CoSpec dma accelerate phase phase data phase SB release however perform dma processing data proxy nvm buffer correspond primary memory location precise manner currently CoSpec dma channel multiple dma operation proxy buffer entry although series dma optimize dma processing helpful thanks faster nvm important due dma processing improve ILP efficiency prevention SB ILP mechanism conservatively speculative previous phase release evaluation implement CoSpec compiler technique described llvm compiler infrastructure perform gem simulator ISA model core stage pipeline NVP simulator CoSpec nonvolatile processor NVP  checkpoint scheme mixture   application compile standard optimization default configuration CoSpec SB entry sequential logic describes hardware specification baseline NVP CoSpec target microcontroller register SB register file safely enable watchdog timer checkpoint scheme CoSpec compiler speculative intermittent computation micro october columbus usa NVP CoSpec capacitor compute mhz mhz voltage monitor VM buffer dma optional von   restore latency wakeup recovery VM boundary ILP simulation configuration evaluate CoSpec harsh environment frequent outage trace NVP simulator RF harvest describes trace detailed analysis CoSpec hardware execution without failure consumption breakdown voltage trace voltage trace harvest voltage trace trace incur outage respectively hardware analysis scheme NVP clank  CoSpec core ino ino OoO ino buffer buffer SB SB dma optional ISA optional backup counter NV scratchpad   extra buffer voltage monitor hardware comparison entry bold non commodity hardware component bold expensive hardware modification others already adopt commodity hardware analyzes hardware prior highlight CoSpec configure nvm latency commodity hardware comparison NVP voltage monitor  extra buffer voltage monitor consumes significant amount occupies nontrivial portion integrate  nonvolatile flip flop laid proximity volatile flip flop core microarchitecture complex expensive due manufacturing overall hardware NVP clank introduces hardware component nonvolatile scratchpad idempotence violation  detector memory buffer dependence monitor load sweep buffer cam associative clank  variant NVP oforder processor NVP  voltage monitor extra buffer  addition  introduces nonvolatile buffer  threshold counter controller logic checkpoint interval  another approach finally CoSpec purpose exist SB introduces phase release logic CoSpec modify core microarchitecture unlike prior although CoSpec currently assumes load instruction bypassing SB without ISA significant aliased load address operand zero due granularity pipeline architecture reset enable SB bypassing although instruction insert compile overhead significant thanks portion aliased load although CoSpec opt dma already adopt commodity processor msp series MCUs overall hardware CoSpec significantly prior execution analysis outage analyze execution CoSpec baseline NVP uninstrumented binary execution CoSpec benchmark application configuration analyze performance impact alias analysis SB bypass  AA without SB bypass  CoSpec incurs execution overhead due failure speculation overhead phase SB release insert register checkpoint SB bypass enable AA execution reduction marginal implies SB source execution overhead analyze impact dma ILP execution application recall dma memory memory therefore phase SB release SB bypass dma enable AA dma CoSpec execution overhead msp microcontrollers dma faster normal memory default SB bypass ILP enable occupy commodity voltage monitor micro october columbus usa  choi  liu  jung   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean normalize exec  AA AA dma AA ILP AA ILP cam AA ILP dma normalize execution CoSpec NVP default CoSpec enables SB bypass ILP dma   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean normalize exec dma dma dma dma normalize execution CoSpec NVP dma dma default configuration   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean ILP efficiency  dma dma dma dma ILP efficiency comparison dma dma default configuration AA ILP fourth execution overhead dma enable confirms ILP CoSpec performance finally enable optimization performance bound CoSpec configuration AA ILP dma sixth CoSpec outperforms stateof NVP average dma improve ILP efficiency CoSpec effectively hide latency nvm writes involve phase SB release interestingly cam impact execution average cam enable SB bypass ILP AA ILP cam fifth marginal difference sequential SB bypass ILP AA ILP load access buffer thanks precise alias analysis CoSpec compiler load cam benefit AA ILP cam sequential SB logic sensitivity analysis explore performance impact dma nvm technology highly optimize CoSpec AA ILP dma varied dma data transfer nvm faster normal nvm execution NVP CoSpec benchmark application normalize execution CoSpec NVP baseline prior extent CoSpec becomes faster dma increase dma CoSpec achieve speedup default analyze correlation dma ILP execution ILP efficiency dma ILP efficiency define phase SB release code overlap execution SB release completely overlap execution ILP efficiency perfect efficiency achieve execution SB release SB release fully hidden ILP efficiency SB release pending ILP efficiency decrease CoSpec compiler speculative intermittent computation micro october columbus usa   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean normalize exec normalize execution CoSpec NVP ratio nvm ratio default configuration   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean completion trace   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean completion trace completion comparison application NVP CoSpec respectively CoSpec SB release phase SB release overlap execution dma memory fram  pcm ram ratio ratio nvm technology varied nvm latency ratio assume nvm technology normalize execution CoSpec baseline NVP average CoSpec outperforms NVP nvm ratio becomes execution analysis outage ability execution progress presence myriad outage completion benchmark application voltage trace RF harvest deployed completion baseline NVP CoSpec dominates completion NVP CoSpec however NVP wake voltage minimum voltage MCUs due voltage monitor issue implies NVP mode substantial amount without progress unlike NVP CoSpec minimum voltage secure achieve progress highlight CoSpec outperforms NVP trace trace respectively interestingly NVP execution progress trace trace NVP completion trace trace trace relatively outage trace NVP tends prefer reliable voltage trace CoSpec outperform NVP significantly source unreliable breakdown outage finally analyze average consumption breakdown across outage consumption ILP execution non ILP execution ILP broken successful speculation comprise phase phase SB release computation non ILP fold  execution  simply consumption CoSpec executes without ILP exclude execute interrupt indicates overhead CoSpec mostly execution exec although CoSpec enables ILP watchdog timer checkpoint adaptive manner accord dynamic failure adaptation progress avoid stagnation CoSpec CoSpec consumption trend trace average consumption CoSpec presence failure trace NVP micro october columbus usa  choi  liu  jung perform multiple adaptation reactive manner involve sequence ILP watchdog timer timer halve execution consumes harvest without actual progress CoSpec finally stagnate multiple adaptation execution consumes average   epic          sha   gmean medium  bitcount rijndael patricia  qsort crc fft fft gmean gmean con succ phase succ phase succ comp phase phase comp  exec consumption breakdown CoSpec average CoSpec consumes harvest ILP execution  execution  consumes average due adaptation CoSpec throttle execution escape potentially stagnate extra nvm writes phase SB release successful misspeculation account consumption average waste speculate execution computation speculation negligible thanks CoSpec adaptive execution related ensure data consistency improve progress intermittently harvest compute variety technique propose introduce non traditional microarchitecture modification incur significant performance overhead contrast CoSpec achieve performance speculative intermittent computation commodity harvest microcontrollers without expensive modification propose incidental compute scheme attempt output quality program improve execution progress observation input data signal image processing application mostly data dependency application memory independent loop iteration skip entirety scheme ignores computation interrupt due failure recent data earlier output expense quality degradation unfortunately scheme  programmer skip recovery unlike scheme CoSpec user intervention achieve goal improve progress without compromise output quality hybrid processor equip inorder pipeline adapt processor execution underlie harvest scheme chooses pipeline accord failure behavior unfortunately scheme expensive hardware modification due hybrid processor additional switch delay consumption hardware resource contrast CoSpec commodity microarchitecture without expensive hardware modification nevertheless CoSpec achieve execution progress speculative intermittent computation propose reconfigurable buffer multiple capacitor efficiency application amount author attempt reconfigure capacity application demand switch however buffer suffer unstable discharge due environmental scheme unreliable harvest deployed harsh environment capacitor reconfiguration technique orthogonal CoSpec achieve truly reliable crash consistency without custom capacitor logic additional hardware devise driven transactional concurrency scheme transaction task failure atomicity author leverage interrupt service routine purpose program task delineate encapsulate transaction asynchronous apart burden programmer scheme significant performance overhead contrast CoSpec automate compiler architecture scheme enables performance intermittent computation summary CoSpec architecture compiler scheme commodity processor achieve performant intermittent computation CoSpec advantage failure speculation enable crash consistency without significant hardware performance overhead CoSpec realizes instruction parallelism processor pipeline hide latency nonvolatile memory writes thereby improve performance significantly harvest trace frequent outage demonstrate CoSpec outperforms theart nonvolatile processor across variety benchmark application average