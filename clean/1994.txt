non volatile memory nvm suffers security vulnerability physical access attack due non volatility ensure data security nvm counter mode encryption security decryption latency however counter mode encryption incurs persistence crash consistency guarantee due requirement atomically persist data counter address exist battery backup complex modification hardware software layer due employ writeback counter cache battery backup expensive software layer modification limit portability application encrypt nvm encrypt proposes SuperMem application transparent secure persistent memory leverage counter cache guarantee atomicity data counter writes without battery backup  modification reduce performance overhead baseline counter cache SuperMem leverage locality aware counter coalesce scheme reduce request exploit spatial locality counter storage data writes moreover SuperMem leverage counter storage scheme efficiently distribute data counter writes writes exploit parallelism experimental demonstrate SuperMem improves performance encrypt nvm baseline counter cache achieves performance comparable ideal secure nvm exhibit optimal performance encrypt nvm CCS CONCEPTS hardware non volatile memory security privacy hardware attack countermeasure keywords non volatile memory memory encryption crash consistency introduction dram suffers limited scalability leakage non volatile memory nvm pcm ReRAM stt ram 3D xpoint become promising candidate generation memory nvm advantage scalability density zero standby however fundamental issue address effectively nvm memory data persistence security non volatility nvm enables data persistently memory instantaneous failure recovery ensure correctness persistent data crash consistency guarantee non trivial factor achieve recovery persistent data failure failure crash specifically nvm typically volatile storage component cpu cache dram failure occurs data structure nvm update data structure corrupt moreover processor memory controller usually reorder memory writes partial update reorder crash inconsistency nvm hence cache flush memory barrier mechanism ensure crash consistency non volatility nvm security data  vulnerability nvm retains data legacy dram memory encryption data encrypt data disk raw data retain memory dram DIMM steal data quickly lose due volatility unlike micro october columbus usa   hua yuan xie nvm DIMM steal attacker easily data DIMM hence memory encryption becomes important ensure data security nvm counter mode encryption usually secure nvm due decryption latency security counter mode encryption secret associate address counter generate pad OTP via aes encryption counter mode encryption encrypt data via xoring plaintext OTP decrypt data xoring ciphertext data OTP counter mode encryption generates OTP via counter buffer chip counter cache meantime data fetch memory parallel execution hide aes computation latency efficiently nevertheless challenge ensure crash consistency data security nvm data encrypt nvm generates request data counter guarantee crash consistency writes persist failure occurs data persist nvm counter data fails decrypt upon recovery due counter similarly failure occurs counter persist nvm data version data nvm fails correctly decrypt unfortunately computer cannot atomically perform request nvm data evict cpu cache counter evict counter cache manage memory controller programmer actively flush data cpu cache exist cache flush memory barrier instruction data persistence however instruction cannot counter writes counter cache guarantee crash consistency encrypt nvm reduce performance overhead exist counter cache battery backup scheme persist counter counter cache nvm battery failure however counter cache usually kilobyte megabyte battery backup counter cache expensive occupies chip processor vendor battery backup asynchronous dram refresh adr persistent domain entry queue memory controller without battery backup exist proposes selective counter atomicity sca scheme counter cache primitive program  variable counter cache writeback function primitive enable programmer explicitly flush specify counter counter cache nvm moreover sca scheme counter queue memory controller enables data counter counter atomicity achieve perform modification software hardware layer program compiler memory controller application encrypt nvm cannot directly encrypt nvm proposes SuperMem pronunciation  application transparent secure persistent memory without battery backup software layer modification SuperMem employ counter cache enables crash consistency guarantee encrypt nvm easy counter cache however baseline counter cache incurs counter request decrease performance SuperMem improves performance aspect reduce counter request memory writes specifically SuperMem leverage locality aware counter coalesce CWC scheme reduce counter request explore exploit spatial locality counter storage data writes moreover SuperMem leverage counter storage xbank scheme efficiently distribute data counter writes writes exploit parallelism summary SuperMem effective CWC xbank scheme enable encrypt nvm counter cache deliver performance comparable ideal secure nvm exhibit optimal performance encrypt nvm contribution counter reduction exploit data locality propose locality aware counter coalesce CWC scheme improve performance SuperMem via significantly reduce nvm request counter leverage spatial locality counter storage data writes counter data successive physical address memory CWC scheme merges counter writes memory queue speedup leverage parallelism propose counter storage xbank scheme efficiently distribute data counter writes SuperMem writes handle memory parallel xbank scheme writes leverage parallelism application transparent implementation implementation SuperMem perform slight modification hardware layer without modification software layer program compiler transparent programmer application application encrypt nvm directly execute encrypt nvm SuperMem experimental evaluation implement evaluate SuperMem gem  experimental CWC scheme reduces request encrypt nvm counter cache xbank scheme improves performance SuperMem enable application transparent secure persistent memory overhead micro october columbus usa SuperMem achieves performance comparable ideal secure nvm optimal performance encrypt nvm background motivation background data persistence security issue nvm gap persistence security guarantee consistency guarantee persistence correctly persist data nvm important guarantee data crash consistency however CPUs memory controller usually reorder memory writes usually data inconsistency failure cache flush memory barrier instruction enforce cache flush instruction clflush  clwb explicitly flush dirty cpu cache queue memory controller memory barrier instruction  sfence memory operation via memory operation fence memory operation fence  instruction request queue nvm deprecate later intel due asynchronous dram refresh adr mechanism adr persist request queue nvm failure via battery backup therefore cache queue durable moreover atomic memory computer byte memory bus width CPUs data byte update failure occurs update data corrupt mechanism avoid partial update technique writes data redo data undo update data failure occurs update data recover nevertheless  mechanism expensive due data craft data structure  hash propose exploit atomic nvm ensure data crash consistency avoid overhead mechanism associate data data valid invalid atomic data structure atomically switch data version memory encryption security threat model threat model exist secure nvm aim nvm physical access attack addr aes ctr encrypt ctr aes ctr addr encrypt aes encrypt addr addr ctr encryption global address address counter ctr steal DIMM bus snoop attack steal DIMM attack nvm retains data attacker easily data nvm steal nvm DIMM bus snoop attack nvm access memory bus attacker insert bus  obtain data bus defend attack memory encryption important non trivial security guarantee via encryption straightforward encrypt memory cipher algorithm aes global however attacker content via simply encrypt encrypt vulnerable replay attack along address encrypt secure ensure encrypt however vulnerable attack attacker monitor consecutive writes secure encrypt memory global address conjunction per counter counter increase hence consecutive memory writes encrypt achieve security latency reduction via pad memory critical program execution memory encryption latency decryption memory due serial execution serial execution significantly degrades performance unlike counter mode encryption reduce decryption latency critical memory via pad OTP technique hence widely encrypt memory compute OTP parallel memory xor OTP ciphertext data generate plaintext hiding bus tamper attack threat model exist attack defend via merkle authentication technique orthogonal micro october columbus usa   hua yuan xie decryption memory access serial parallel reduce latency memory access pad reduce decryption latency pad OTP decryption latency memory access latency operation counter mode encryption security counter mode encryption premise OTP reuse data encryption ensure counter mode encryption secret address per counter generate OTP aes circuit memory cache encrypt xoring content OTP memory decrypt xoring content OTP counter retain memory reduce generation  memory controller manages chip counter cache buffer recently access counter aes ctr  counter plaintext plaintext ciphertext ciphertext encryption decryption OTP encryption decryption counter mode encryption gap persistence security data encrypt nvm request data counter guarantee crash consistency writes persist failure occurs counter persist nvm data persist data nvm cannot correctly decrypt upon recovery counter failure occurs data persist nvm counter persist data cannot decrypt data counter persist atomic manner crash consistency guaranteed however computer fail atomically perform request nvm data evict cpu cache counter evict counter cache manage memory controller programmer actively flush data cpu cache exist cache flush memory barrier instruction however instruction cannot counter writes counter cache counter data data fails data counter counter fails data counter failure atomicity failure mechanism nvm guarantee crash consistency encrypt nvm analyze effectiveness durable transaction commonly crash consistency guarantee failure occurs stage durable transaction execute encrypt nvm recoverability durable transaction failure occurs mutate commit stage data  specifically failure occurs stage data content counter encrypt data unmodified consistent however failure occurs mutate stage data update completely become content due flush memory barrier instruction unknown counter encrypt correctly persist cache flush memory barrier instruction fail handle counter counter cache hence recovery cannot decrypt due counter fail recover data failure occurs commit stage correctness data counter unknown hence data  recoverability failure occurs stage transaction stage creates entry data mutate stage modifies data commit stage invalidates entry stage stage content counter data content data counter recoverable mutate unknown commit unknown unknown address inconsistency encrypt nvm exist propose concept selective counter atomicity sca indicates data associate counter simultaneously persist counter cache counter nvm evict therefore sca primitive counter cache writeback function program enable programmer explicitly flush specify counter cache nvm moreover sca counter queue memory controller enables data counter however data counter stall queue decrease performance author SuperMem enable application transparent secure persistent memory overhead micro october columbus usa cache memory controller aes ctr counter cache queue plaintext OTP ciphertext counter counter counter encrypt nvm hardware architecture SuperMem adr apply queue hence cache queue durable writes immediately affect recoverability data consistent writes mutate stage durable transaction consistent failure occurs transaction recover therefore sca selectively relaxes atomicity writes improve performance primitive  enable memory controller identify data writes cannot relax atomicity sca effective mechanism guarantee crash consistency encrypt nvm program primitive application encrypt nvm encrypt nvm programmer modify program code application primitive  architectural overview proposes SuperMem application transparent guarantee crash consistency encrypt nvm SuperMem employ counter cache register enables crash consistency easy exist counter cache data nvm correspond counter nvm data SuperMem application transparent programmer actively flush counter counter cache nvm however counter cache generates request data decrease performance propose efficient counter storage xbank scheme distribute data counter improve performance leverage parallelism moreover propose counter coalesce CWC scheme SuperMem significantly reduce request leverage spatial locality counter data writes hardware architecture SuperMem cpu issue flush instruction correspond cache evict cache memory controller memory controller encrypts cache counter appends encrypt cache queue adr mechanism memory ctrl queue cpu flu app app ack ret enc sequence memory controller cache flush counter cache flu flush cache nvm counter app append queue enc encrypt ret flush retire memory ctrl register cpu flu sto sto ack ret enc queue app sequence memory controller cache flush counter cache register sto register scheme perform counter cache xbank scheme memory controller CWC scheme perform queue merge counter writes SuperMem performs slight hardware modification memory controller transparent programmer application program application encrypt nvm directly execute encrypt nvm SuperMem counter cache SuperMem employ scheme counter cache writes dirty counter counter cache simultaneously counter queue schedule cache flush via scheme ensure crash consistency encrypt nvm sequence diagram memory controller cache flush naturally evict cpu cache SuperMem cpu issue flush cache flu memory controller counter counter cache counter update counter encrypt enc encryption update counter counter cache simultaneously append queue app via scheme encrypt append queue app memory controller sends ack ack cpu cache flush retire ret counter encrypt cpu cache already append queue cache flush completes via scheme hence data persist counter persist however simply perform baseline scheme cannot ensure crash consistency counter persist data specifically micro october columbus usa   hua yuan xie ID data data data ctr ctr ctr data ctr  storage ID data ctr ctr data ctr data ctr data  storage ID data ctr data data data ctr ctr ctr xbank storage counter storage approach counter ctr indicates correspond data ctr counter data flush cache failure occurs append counter app append app queue counter update persist nvm adr mechanism recover failure cannot decrypt counter address register aes encryption encrypt data cache evict cpu cache correspond counter register  instead directly append counter queue encrypt data encrypt data register  simultaneously append encrypt data counter queue  data associate counter simultaneously exist queue register crash consistency data counter ensure SuperMem moreover register cache data cache counter cache writes register register negligible performance overhead counter storage exist secure nvm counter mode encryption counter generally continuous nvm  storage approach efficient counter cache counter writes buffer counter cache nvm however employ counter cache data counter counter storage counter becomes bottleneck decrease performance data request    respectively counter request    counter storage data request simultaneously due parallelism however counter request counter request degrade performance avoid performance bottleneck access counter straightforward counter data local  data counter however average processing serf data encrypt nvm serially request data serially   reduce processing request propose counter storage xbank scheme data counter instead data correspond counter moreover interval data correspond counter operating usually allocates continuous memory application adjacent data counter writes application easily access conflict therefore xbank scheme data correspond counter perform xbank scheme data counter writes distribute efficiently reduce access conflict hence writes leverage parallelism data writes    correspond counter writes    partial access xbank scheme becomes efficient due strength parallel execution load almost simultaneously access xbank scheme performance  due competition access however  memory access SuperMem delivers performance evaluate due efficiently  xbank scheme CWC scheme subsection SuperMem enable application transparent secure persistent memory overhead micro october columbus usa minor counter counter counter storage within physical queue cache nvm content counter content illustration queue queue cpu cache counter cache counter remove queue via CWC scheme locality aware counter coalesce encrypt nvm cpu cache flush appends request queue request encrypt nvm propose locality aware counter coalesce CWC scheme SuperMem reduce counter writes via exploit spatial locality counter storage data writes spatial locality counter storage SuperMem exploit split counter mode encryption reduces storage overhead counter facilitates propose counter coalesce reduce counter writes counter mode encryption counter minor counter memory KB counter minor counter counter memory memory exhibit spatial locality memory encrypt per counter concatenate per minor counter memory rewrite correspond minor counter increase although update minor counter modifies persist minor counter entire memory nvm memory memory writes minor counter overflow counter mode encryption increase counter reset minor counter encrypts memory counter encrypt counter cannot overflow throughout lifespan nvm endurance limit nvm pcm ReRAM spatial locality data writes contiguous nvm writes transaction flush multiple cache contiguous physical address spatial locality moreover data writes transaction usually exhibit spatial locality program usually allocate contiguous memory transaction hence cache flush contiguous contiguous physical address transaction insert KB item maintain nvm flush cache contiguous physical address writes writes content correspond counter cache cpu cache flush counter coalesce scheme locality exist counter storage data writes queue flush entry transaction entry contains multiple cache contiguous physical address physical counter memory counter cache entry memory counter cache evict  counter cache latter counter cache update content former address memory correspond minor counter respectively nvm counter cache contains update minor counter contains contains moreover multiple cache entry flush cpu cache flush correspond counter cache queue valid counter cache latter update content former accord observation insight counter coalesce CWC scheme specifically counter cache evict counter cache queue counter cache queue physical address merge cache physical address moreover instead merge latter cache former cache queue directly remove former cache advantageous delay counter cache merge writes micro october columbus usa   hua yuan xie directly remove instead merge deletion former counter cache loss data counter cache contains update content remove reduce latency cache address flag cache queue facilitate identification counter cache flag distinguish cache cpu cache counter cache cache cpu cache counter cache cache counter cache flag perform CWC scheme queue request significantly reduce counter remove transaction flush cpu counter cache nvm without propose CWC scheme CWC scheme cache nvm reduce almost nvm writes encryption handle overflow counter mode encryption counter cannot overflow minor counter memory overflow  update counter encryption exist crash inconsistency persistent memory perform slight modification guarantee crash consistency encryption encrypt memory cache memory encrypt update counter concatenate zeroed minor counter finally memory encrypt memory encryption status register RSR maintain memory controller encryption status memory within RSR counter RSR maintains memory within correspond memory already encrypt RSR encryption RSR freed however failure occurs encrypt persistent memory memory within encrypt others encryption status RSR lose recovery encrypt memory encrypt memory encrypt fail correctly decrypt inconsistent guarantee crash consistency encryption SuperMem employ adr mechanism battery configuration simulated processor cpu core processor ghz private cache KB lru cycle latency private cache KB lru cycle latency cache MB lru cycle latency memory capacity 8GB pcm latency model tRCD tcl  tFAW  twr queue entry counter cache KB lru cycle latency backup queue RSR battery overhead negligible RSR byte physical counter data RSR flush nvm failure adr load RSR recover  memory encrypt content RSR hence encryption recovery failure moreover encrypt memory memory controller regular cache flush consistency encrypt ensure scheme performance encryption improve CWC xbank scheme evaluation methodology hardware available implement propose persistence encryption scheme gem  evaluate SuperMem  cycleaccurate memory simulator emerge nvm technology nvm consists processor 2GHz KB data instruction cache KB cache MB cache counter cache KB without loss generality model pcm technology 8GB capacity pcm latency model model aes pipeline encryption cycle encryption latency prior simulation persistent memory employ clwb sfence instruction implement gem propose SuperMem scheme encrypt nvm  baseline nvm without memory encryption ideal secure nvm counter cache WB ideal counter cache evict dirty counter cache nvm assume ideal counter cache battery backup counter atomicity performance overhead therefore ideal secure nvm WB scheme optimal performance encrypt nvm sca counter SuperMem enable application transparent secure persistent memory overhead micro october columbus usa cache without battery backup counter atomicity data counter queue incur performance overhead therefore sca performance WB scheme scheme WT baseline  counter cache flush data counter nvm data WT scheme software layer modification achieve counter crash consistency scheme CWC WT CWC counter cache employ propose counter coalesce CWC scheme reduce counter writes scheme xbank WT xbank counter cache employ propose counter storage xbank scheme memory request workload evaluate performance SuperMem acid atomicity consistency isolation durability operation workload ensure via durable transaction workload widely exist persistent memory array initialize 1GB array randomly swap entry queue randomly   entry 1GB queue insert random item 1GB hash insert random item 1GB hash RB insert random item 1GB performance evaluation investigate impact scheme transaction execution latency request evaluate sensitivity experimental configuration parameter transaction execution latency core performance average latency execute transaction workload  scheme without secure guarantee ideal WB scheme slightly increase transaction execution latency due increase counter memory writes WT scheme increase transaction execution latency across workload  scheme request nvm significantly degrades performance propose SuperMem WT scheme examine efficiency counter coalesce transaction transaction KB transaction average latency execute transaction request transaction normalize encrypt nvm CWC counter storage xbank SuperMem evaluate performance WT CWC WT xbank scheme respectively transaction request impact data storage locality performance CWC scheme hence respectively evaluate performance transaction request cache writes request request WT scheme WT CWC reduces average transaction execution latency transaction request increase transaction request WT CWC reduces execution latency transaction spatial locality counter writes merge CWC scheme WT scheme WT xbank reduces transaction execution latency workload due xbank scheme efficiently distributes data counter micro october columbus usa   hua yuan xie program program program average latency execute transaction request normalize encrypt nvm multi core application overlap latency writes employ CWC xbank scheme SuperMem improves performance WT scheme achieves approximate performance ideal WB scheme transaction execution latency SuperMem slightly  scheme due encryption decryption overhead multi core performance evaluate performance SuperMem multi core thread executes program core configuration entry queue KB transaction KB counter cache enable program memory footprint memory program access program memory performance xbank scheme described experimental  WT scheme increase transaction execution latency core performance WT CWC WT xbank scheme significantly reduce transaction execution latency WT scheme however core performance WT CWC scheme transaction execution latency WT xbank scheme workload program program CWC scheme obtains performance benefit xbank scheme multi core application due access competition employ CWC xbank scheme SuperMem achieves approximate multi core performance WB scheme request request nvm normalize  scheme workload propose CWC scheme improves performance employ spatial locality data writes transaction request exhibit spatial locality impact memory writes therefore transaction request workload evaluate nvm writes WB scheme increase memory writes due evict dirty counter cache counter cache nvm transaction request increase transaction request memory writes WB scheme reduce counter access spatial locality achieve counter cache ratio WB scheme WT scheme incurs memory writes  scheme whatever transaction request data secure nvm request data counter WT scheme SuperMem significantly reduces nvm writes transaction request SuperMem reduces memory writes transaction data writes locality writes locality transaction request increase locality data writes significantly increase SuperMem reduces memory writes WT scheme transaction KB respectively sensitivity queue fix configuration KB counter cache KB transaction queue evaluate performance request transaction execution latency influence queue percentage reduce counter writes SuperMem WT scheme SuperMem reduces counter writes longer queue longer queue SuperMem enable application transparent secure persistent memory overhead micro october columbus usa transaction KB transaction KB transaction nvm request normalize  transaction percentage reduce counter writes queue array queue hash RB percentage reduce counter writes normalize execution latency queue array queue hash RB execution latency normalize entry queue percentage reduce counter writes average execution latency queue opportunity CWC scheme merge counter writes physical address queue queue increase SuperMem reduces counter writes array queue hash rbtree workload respectively queue percentage reduce counter writes increase workload hence queue reasonable CWC influence queue transaction execution latency SuperMem increase queue decrease average latency execute transaction workload longer queue reduces counter writes queue increase counter cache rate counter cache array queue hash RB counter cache rate speedup KB counter cache counter cache array queue hash RB speedup KB counter cache counter cache rate performance SuperMem counter cache average transaction execution latency reduce array queue hash RB workload respectively sensitivity counter cache fix configuration entry queue KB transaction counter cache KB MB evaluate counter cache rate workload execution influence counter cache cache rate SuperMem increase counter cache substantial impact counter cache rate array hash RB rarely affect queue dequeue enqueue queue access continuous micro october columbus usa   hua yuan xie memory structure node continuously multiple item exhibit spatial locality data access contrast random entry swap array item insertion random hash location hash structure item per node RB exhibit spatial locality data access spatial locality data access counter cache rate reading memory counter decrypt load counter cache due memory access counter cache counter cache increase KB MB cache rate improve array hash RB workload influence counter cache overall execution workload SuperMem execution workload counter cache normalize KB counter cache counter cache impact execution queue workload array hash RB execution performance improve respectively counter cache increase KB MB related secure nvm nvm suffers data  vulnerability data security nvm widely  proposes dual counter encryption scheme reduce traffic encrypt nvm encrypt modify memory  secret avoids encryption zero content memory reduce writes  reduces nvm writes encrypt nvm eliminate zero cache writes data   proposes lightweight deduplication scheme enhance performance endurance encrypt nvm via eliminate duplicate content writes scheme encrypt nvm mainly aim reduce writes encrypt data nvm focus crash consistency secure nvm moreover exist focus memory authentication nvm assure triad nvm  orthogonal crash consistency nvm achieve data persistence various durable transaction mnemosyne NV heap DudeTM nvml dct propose manage persistent data crash consistency guarantee nvm moreover multiple nvm file    nova nova  propose achieve improvement storage performance leverage byte addressable benefit nvm crash consistency guarantee employ technique shadow replication scheme built encrypt nvm without memory encryption nvm crash consistency secure nvm crash consistency encrypt nvm exist scheme counter cache aid battery backup however due limited chip available backup battery becomes practical implementation processor vendor battery backup asynchronous dram refresh adr mechanism domain entry queue persistent without battery backup propose selective counter atomicity sca scheme counter cache ensures data counter atomically persist overhead program primitive unlike exist counter cache battery backup software layer modification SuperMem counter cache guarantee crash consistency encrypt nvm performance overhead via efficient xbank CWC scheme moreover propose  relax counter persistence application execution recover counter failure leverage error correction code merkle however  incurs counter recovery recover failure recovery linearly increase memory contrast propose SuperMem sca recover counter due strict counter persistence application execution conclusion proposes SuperMem achieve security persistence non volatile memory SuperMem leverage counter cache scheme register guarantee crash consistency encrypt nvm moreover counter coalesce scheme introduce reduce request counter storage scheme employ reduce processing request scheme implement slight modification hardware layer transparent programmer application program application encrypt nvm directly execute encrypt nvm SuperMem experimental SuperMem achieves performance comparable ideal secure nvm exhibit optimal performance encrypt nvm