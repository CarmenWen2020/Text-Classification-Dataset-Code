lack temporal safety epidemic exploit surpass severity infamous buffer overflow exploit violate spatial safety capability address directly enforce spatial safety enforce bound pointer render pointer unforgeable nevertheless efficient temporal memory safety remains elusive CHERI architectural extension hardware capability address significant commercial opensource CHERI capability foundation enable heap temporal safety facilitate date pointer revocation capability enable precise efficient identification invalidation pointer unsafe develop cherivoke technique deterministic sweep revocation enforce temporal safety CHERI cherivoke quarantine freed data periodically shadow revoke dangle pointer sweep memory tunable performance heap growth evaluate performance performance processor analytically examine primary overhead configure heap overhead cherivoke achieves average execution overhead overhead associate traditional garbage collection revocation CCS CONCEPTS computer organization architecture security privacy security security hardware software application security keywords temporal safety architecture security introduction codebases plague violation temporal safety typical temporal safety violation consists pointer deallocated mistakenly reuse programmer temporal safety violation combination program behaviour security vulnerability temporal safety vulnerability attacker manipulate data input achieve program entire indeed attack recently buffer overflow attack spatial safety violation future computer enforcement spatial temporal memory safety recent research spatial safety guaranteed architectural extension CHERI hardware capability architecture influence direction CHERI replaces pointer unforgeable architecturally identifiable reference capability convey address legally accessible reference CHERI allows achieve temporal safety heap lowlevel minor architectural contrast legacy architecture grain temporal safety untrusted program neither eliminate possibility retain fabricate reference freed memory distinguish dangle pointer innocuous data cherivoke technique temporal safety memory allocator hardware capability minor architectural extension performance cherivoke delay reallocation memory manually freed quarantine buffer perform sweep memory remove reference implementation cherivoke prevents reallocation memory addressable reference available program furthermore cherivoke specifies data structure freed memory location shadow wherein byte allocation granule shadow enables sweep revoke access arbitrary memory location regardless heap layout cherivoke  temporal guarantee memory cannot address without capability reference capability contains bound information contrast temporal safety pointer cannot hidden cherivoke variety useful performance memory overhead capped due active revocation garbage collection capability entirely skip hardware tag metadata evaluate performance cherivoke reproduce behaviour account memory  demonstrate overhead previous cherivoke achieve temporal memory safety heap average runtime overhead maximum increase heap across spec cpu benchmark sweep overhead application pointer density rate memory freed complicate factor load allocation strategy deterministically increase heap overhead unlike pure software approach memory safety practical efficient cherivoke overhead predictable intuitive understand contribution temporal safety built tag CHERI capability pointer algorithm CHERI temporal safety buffer revocation achieve predictable substantially previous technique evaluation algorithm memory subsystem lightweight CHERI extension optimise sweep memory identify capability background temporal safety violation memory model programmer memory consist allows programmer manipulate pointer perform arithmetic pointer programmer mistakenly attack overwrites reallocate vtable pointer reference attacker function pointer violate memory model reference actually memory model distinct another distinguish another occupy disparate address memory exist program execution implementation traditionally violation boundary dubbed spatial temporal safety respectively CHERI naturally enforce spatial safety attach bound pointer manipulation reference another however CHERI naturally defend temporal safety violation arise pointer program freed accidental reuse deallocation violation temporal safety security vulnerability whereby attacker manipulate memory dangle pointer routinely allows attacker flexibility fully compromise computer illustrative temporal safety violation depict delete destructor vtable  delete pointer location memory accessible becomes dangle pointer memory reallocate program external data input attacker accidental delete dangle pointer address attacker cede vulnerability within kernel mode entire besides pointer corruption data corruption program execution alter administrator gain program scenario commonly classify  vulnerability accurately reallocation attack attack advantage cherivoke characterise pointer revocation CHERI capability temporal memory safety micro october columbus usa perm compress bound address representation CHERI capability reallocation dangerous security perspective attacker advantage mismatch memory interpretation gain influence execution particularly interpretation user data comparison reallocation manipulation data erroneous rarely security vulnerability enforcement reallocation strict allows flexibility batch revocation achieve reasonable performance attack reallocation corrupt allocator metadata freed memory vulnerability relatively  careful placement metadata  address revocation CHERI capability CHERI instruction extension address memory unforgeable bound reference capability classic concept computer CHERI capability embed metadata pointer typically extend pointer address address metadata bound reference permission grant reference enforce monotonicity access capability instruction bound capability enlarge enforce unforgeability capability capability tag distinguishes capability arbitrary data tag non capability prevent capability virtual address accessible program limited authorise capability register file reachable capability transitively authorise memory prior described  application binary interface program CHERI aware freebsd program compile  capability reference achieve spatial safety attack buffer overflow reference stack heap globals overhead typically pointer application primary benefit CHERI architecture memory location accessible program entirely encode memory tag uniquely identify capability pointer capability entirely define memory reference structure facilitates precise pointer identification eliminate false negative false positive inspection memory cannot hidden pointer cannot mistake data cpu register file initialise  capability bearing permission memory capability execution trace provenance architectural operation derive tag exclusively  input derivation bound tag input pointer visibility architectural enables temporal safety performance secondary benefit CHERI architecture spatial safety allocator ability bound return pointer thereby ensure access within bound buffer overflow attack impossible program compile  link bound allocator cherivoke ability ensure application capability authority access heap authority exactly heap lifetime imply capability lifetime prior CHERI analyse performance tag storage tag performance pointer inspection particularly tag separately associate data avoid load  non pointer data CHERI prototype capability tag hierarchical conventional dram introduce tag cache reduce additional dram traffic tag cache achieves rate separation tag data facilitates efficient tag inspection without load associate data threat model threat model assumes non malicious programmer inadvertently local program vulnerability malicious external attacker influence behaviour via network socket manipulate vulnerable program attacker utilise dangle pointer vulnerability induce writes via prior pointer memory allows attacker scope  data corruption attack particularly user data confuse trust data function pointer aim remove dangle pointer address reallocate strategy address critical exploit technique relate manipulation data pointer memory technique literature cherivoke address broader category temporal safety violation  data information leakage prior allocation alongside orthogonal protection mechanism purpose cherivoke extend address CHERI threat model software  local programmer malicious ensure memory reference mutually distrust compartment improperly freed compartment address sophisticated guarantee cherivoke propose cherivoke technique enforce temporal safety CHERI revoke access freed memory reallocation revoke capability remove derivative capability program cherivoke periodically performs bulk revocation reduce overhead achieve manually freed micro october columbus usa xia woodruff  deallocations quarantine buffer revoke revocation implement efficiently shadow heap deallocated quarantine memory register swept shadow identify dangle pointer sweep cherivoke shadow quarantine location reallocation heap memory quarantine buffer cherivoke swept program memory tag capability reference quarantine memory quarantine buffer prevent reallocation attack allocator reissue freed address ensure remain reference memory memory available caller allocation freed allocator immediately return address  quarantine buffer quarantine buffer sweep memory reference heap invalidate capability reference quarantine buffer sweep quarantine address return  maintain consistent memory overhead buffer fix proportion heap initiate revocation sweep quarantine data heap quarantine buffer memory overhead runtime overhead increase reduce sweep frequency revocation shadow achieve reliable performance regardless application sweep procedure ideally deterministic independent heap layout achieve maintain revocation metadata revocation shadow allocation granule byte memory default dlmalloc allocate shadow shadow occupies heap sweep allocation quarantine buffer shadow correspond allocation granule reference memory revoke sweep actual sweep procedure performs lookup shadow capability detect revoke shadow scheme allows index lookup capability reference sweep deterministic instruction shadow significantly heap access highly likely temporally spatially local shadow typically cache access limit dram bandwidth available primary sweep importantly shadow strategy allows revocation quarantine address sweep sweep frequency depends purely rate application MB quarantine buffer heap layout ensures predictable reliable performance application sweep procedure revocation sweep memory capability reference heap heap stack register file global data sweep primary overhead cherivoke sweep aim fully utilise dram bandwidth highly optimise inner loop limit investigation efficiency software implementation loop evaluation reasonable extend memory access dma digital signal processor DSPs perform loop bus without cpu involvement software inner loop consists code  min addr max addr   capability   byte alloc granule byte shadow char    index int     freed memory invalidate capability issue circumstance involves data dependent data dependent predictor predict direction inner loop carefully implement conditional execution conditional instruction branching achieve performance software implementation however accurate speculation loop easily compute bound despite memory access ensure compute bound implement model loop intel avx vector extension along software pipelining vector extension actual CHERI implementation capability heap capability within allocation bound capability enlarge restrict cherivoke allocator bound return request allocation cherivoke characterise pointer revocation CHERI capability temporal memory safety micro october columbus usa cpu tag dram tag implementation CLoadTags tag data tag metadata tag directly dereference capability sweep loop pointer shadow hardware CHERI capability presence capability reference hardware therefore facilitate sweep inspects genuine capability pointer opportunity optimise sweep procedure capability architectural feature avoid sweep entire memory pointer fundamentally decrease amount however memory tag contains valid capability CHERI ISA load capability tag register  instruction query tag mechanism load data cache despite later quarter cache pointer application implement cherivoke efficiently directly exploit tag metadata eliminate non capability data sweep dram bandwidth increase performance propose architectural assist atop CHERI exist spatial safety focus specification significantly reduce dram traffic consume sweep revocation CLoadTags introduce instruction CLoadTags CHERI architecture directly load tag without load data address CLoadTags return zero cache skip sweep contains capability avoid dram traffic implementation CLoadTags extensive integration memory hierarchy  load tag cache request cache tag controller furthermore cache modify report tag cache lookup  implementation cache across cycle entirety cache capability tag data cycle response CLoadTags bus request therefore implement CHERI cache capability tag tag metadata cache respond CLoadTags bus request CLoadTags request data cache tag controller respond tag without fetch correspond data dram response contains tag cache inconvenient cache intervene cache approximate semantics CLoadTags request conveniently instruction likely sweep memory cache response unlikely helpful future microarchitectures prefetching data cache CLoadTags return non zero tag cache capability dirty pte CapDirty coarser repurpose flag exist CHERI mips  entry avoid sweep entire capability flag traditional dirty flag  entry although specifically presence valid capability writes CapDirty indicates tag capability exception operating presence capability CapDirty  entry capability scan sweep traditional dirty flag entry architecture maintain pte CapDirty entirely hardware approach false positive clearing capability reset CapDirty marked without capability sweep however preliminary evaluation false positive rate negligible benchmark evaluate generally determines capability rarely encounter alternate capability none opportunity parallelism description cherivoke described sweep application execution program pause sweep occurs however sweep revocation independent execution alongside execution program addition sweep procedure embarrassingly parallel revocation shadow sweep sweep distribute independent thread unreasonable  software sweep routine realistically saturate dram bandwidth shadow maintenance convenient concurrency update shadow memory chunk quarantine buffer parallel prevent mask within painting shadow vector instruction unlikely optimisation explore evaluation framework architecture meaningful measurement concurrent revocation explore implication parallelism capability inhibit lightly exist CHERI software sole reflect static kernel manage prevent capability memory potentially violate capability provenance within address mapping file file capable tag micro october columbus usa xia woodruff  role allocator cherivoke invalidate reference quarantine memory available program nevertheless allocator reference heap memory quarantine memory later reallocate memory program cherivoke allocator trust compute TCB relies allocator enforce temporal safety indeed definition temporal safety derive allocator preserve allocator reference cherivoke distinguish pointer allocator pointer issue program plausible mechanism preservation option allocator  capability quarantine protection guarantee cherivoke enforces temporal safety heap allocation heap allocation proven dangerous source temporal safety exploit stack exploit prevent technique escape analysis strictly cherivoke prevents reallocation  program reference quarantine memory revocation sweep nevertheless cherivoke guarantee allocate access reference derive allocation memory CHERI facilitate strict debug sweep perform cherivoke enforce temporal safety deployed user program subset heap temporal memory safety protection vast majority exploitable bug advantage buffering achieve reasonable performance summary cherivoke technique temporal safety architecture CHERI dangle pointer revoke sweep application memory remove reference deallocated location within quarantine CHERI uniquely distinguishes pointer capability location architectural along valid capability revocation implement efficiently shadow invalid capability pointer addition hardware pte CapDirty CLoadTags instruction limit memory swept cache pointer cherivoke quarantine buffer shadow strategy achieves overhead exist easily understood account CHERI  cherivoke relies CHERI capability architecture precise pointer identification spatial enforcement efficient pointer location metadata mechanism enable efficient precise revocation program compile CHERI pure capability mode pointer tag capability distinguish data CHERI therefore eliminates conservative pointer classification integer misclassified pointer garbage collection technique conversely clearing tag capability revocation completely prevents reference memory furthermore cherivoke relies CHERI bound enforcement ensure capability heap easily attribute exactly allocation specifically heap capability remain within allocation pointer address wander bound relies bound capability cannot expand mechanism fuse adjacent capability reference multiple allocation lifetime CHERI identifies reference certainty associate uniquely allocation correctly invalidate reference quarantine memory affect behaviour program memory safety CHERI capability spatial safety unforgeability memory access within bound allocation capability allocation cannot fabricate cherivoke completely prevent access heap allocation revocation adversarial program capability easily identify trivially associate allocation reliably identify dangle pointer pointer hidden cherivoke without destroy ability reference memory cherivoke completely prevents adversarial program access deallocated memory revocation sweep consequently temporal security guarantee presence capability significantly previous efficient pointer CHERI architecturally visible capability tag enable identification pointer detect presence pointer memory optimise tag storage CHERI prototype enables CLoadTags eliminate non pointer data reduce limit revocation sweep dangle pointer experimental setup evaluation addition evaluation hardware extension CHERI fpga platform evaluate cherivoke revocation machine establish performance expectation deployment mature CHERI implementation memory sweep performance depends heavily microarchitecture characterise revocation memory vector extension superscalar hardware simulate existence capability conservative pointer estimation garbage collector integer valid virtual address pointer evaluate mature platform application coverage CHERI prototype implement cherivoke characterise pointer revocation CHERI capability temporal memory safety micro october columbus usa specification intel core HK cpu  core thread MiB llc stage superscalar pipeline avx  ddr freebsd CHERI  IV fpga mhz core KiB llc stage scalar pipeline  ddr setup processor evaluation mips instruction lack application benchmark toolset CHERI freebsd freebsd ensure uniformity apply operating impact hardware addition extend CHERI core cache subsystem implement CLoadTags instruction pte CapDirty prototype operating impact performance perform revocation sweep CHERI fpga implementation application memory dump data elimination application execute natively CHERI mips architecture dlmalloc cherivoke implement dlmalloc cherivoke extension dlmalloc classic allocator remains modify allocator maintains quarantine buffer proportional heap maintains correspond shadow insert allocation quarantine buffer dlmalloc constant algorithm aggregate contiguous allocation proportion heap quarantine dlmalloc cherivoke simulated sweep return chunk quarantine buffer internal aggregation internal without quarantine implement shadow mmap accompany mapping fix transform allocation allows sweep procedure index shadow heap allocation shift pointer fix amount shadow dlmalloc aligns allocation byte boundary shadow primary allocation unmapped correspond shadow unmapped besides shadow allocation dlmalloc cherivoke delay shadow operation simulated sweep trigger sweep traverse quarantine chunk buffer shadow sweep optimise shadow painting procedure align contiguous byte instruction individual sweep dlmalloc cherivoke evaluates overhead besides revocation sweep accurately model CHERI revocation loop pointer architecturally visible simulate visibility memory preprocessed prevents accurate performance model execution capture memory dump core image periodically quarantine buffer sweep trigger preprocess memory image identify virtual address within core dump zero non pointer allows zero simulate ability capability tag CHERI core dump preserve revocation shadow sweep simulate sweep pte CapDirty optimisation eliminate non pointer data granularity CLoadTags instruction elimination model sufficiently standard microarchitecture CLoadTags model due interaction tag memory tag cache performance pessimistic estimation optimisation CHERI sweep procedure simulates api return array capability accord pte CapDirty flag evaluate overall perform revocation sweep sample core dump across application execution average sweep sweep derive sweep execution benchmark evaluate cherivoke interested average overhead evaluate benchmark mostly spec cpu literature subset evaluate allocation intensive workload dealii omnetpp xalancbmk spec cpu benchmark compile freebsd setup CHERI infrastructure astar bzip gobmk href hmmer lbm libquantum mcf milc povray sjeng soplex sphinx evaluate reference input ffmpeg allocation throughput spec benchmark useful fully account worstcase application behaviour average benchmark evaluation overall overhead cherivoke temporal safety technique literature CHERI capability target heap storage overhead quarantine buffer achieve average execution memory overhead significantly outperforms technique cherivoke performs reliably maximum runtime memory overhead cherivoke api  implement return reset accelerate garbage collection runtimes core dump per application increase evaluation improve accuracy sweep core dump average sweep micro october columbus usa xia woodruff  astar bzip dealii gobmk href hmmer lbm libquantum mcf milc omnetpp povray sjeng soplex sphinx xalancbmk geomean normalise execution cherivoke oscar   boehm GC execution astar bzip dealii gobmk href hmmer lbm libquantum mcf milc omnetpp povray sjeng soplex sphinx xalancbmk geomean normalise memory utilization memory dash cherivoke default quarantine heap overhead cherivoke report technique ffmpeg astar bzip dealii gobmk href hmmer lbm libquantum  omnetpp povray sjeng soplex sphinx xalancbmk geomean normalise execution cherivoke quarantine buffer shadow sweep decomposition overhead cherivoke default heap overhead significantly predictable behaviour regardless workload sweep technique suffers none encounter complex temporal safety scheme overhead proportional memory freed pointer density pointer movement load per memory layout addition CHERI enforces safety guarantee construction reference freed memory impossible revocation breakdown overhead overhead successively constituent cherivoke quarantine freed memory shadow maintenance finally memory sweep memory sweep usually dominant overhead discover notable exception quarantine buffer exist allocator dlmalloc attempt reuse freed memory quickly improve cache performance dlmalloc cherivoke however introduces quarantine buffer freed memory  opportunity reuse cached memory quarantine buffer negligible impact benchmark xalancbmk however quarantine buffer increase execution performance counter confirm instruction grows cache favorable deallocation simply  cache xalancbmk combination allocation allocation throughput nearly per accord temporal fragmentation temporal fragmentation occurs lifetime intersperse heap quarantine memory cache suggests cherivoke memory allocator attempt lifetime nevertheless discover increase quarantine buffer consistently improves cache performance xalancbmk quarantine buffer actually improves performance benchmark batching aggregate dealii per constitute significant amount execution dlmalloc cherivoke quarantine allocation typically execution freed aggregate operation perform quarantine buffer drain perform cherivoke characterise pointer revocation CHERI capability temporal memory safety micro october columbus usa benchmark pointer rate MiB ffmpeg astar bzip dealii gobmk href hmmer lbm libquantum mcf milc omnetpp povray sjeng soplex sphinx xalancbmk deallocation metadata application demand minor benchmark gain advantage quarantine buffer net overhead temporal safety shadow maintenance cherivoke maintenance revocation shadow shadow heap quarantine portion overhead painting predict due sensitivity towards alignment allocation nevertheless net impact  maintenance minor application benchmarked sweep overhead cherivoke significant execution overhead memory sweep benchmark overhead beyond dealii omnetpp soplex dominate sweep overhead xalancbmk sweep predictable described mathematically memory sweep initiate amount memory freed quarantine buffer frequency sweep directly proportional   MB relation allows analytically derive estimation runtime overhead thread implementation      equation assumes sweep proportion memory contains pointer  granularity equation assumes quarantine buffer fix proportion memory heap rough approximation heap nevertheless equation intuitive model sweep cherivoke numerator   constitutes application specific factor throughput conversely pointer density sweep cherivoke denominator  function memory bandwidth efficiency sweep loop  tunable balance performance memory consumption ffmpeg astar dealii gobmk href hmmer  omnetpp povray soplex sphinx xalancbmk geomean dram bandwidth MiB loop unroll manual pipelining avx memory bandwidth achieve sweep loop optimisation bandwidth MiB analytical model along data allows understand sweep overhead xalancbmk omnetpp significant rate pointer density dealii soplex pointer density respectively indeed benchmark execution overhead model ffmpeg rate pointer density sweep overhead sweep loop optimisation memory sweep critical performance cherivoke evaluate performance implementation sweep procedure kernel benchmark feature significant deallocation cherivoke sweep approach MiB bandwidth procedure compute bound indirect shadow lookup entirely cached naïve sweep loop utilises bandwidth average unroll manually pipelining loop schedule achieves fully vectorise loop avx sweep entire cache instruction achieve bandwidth average unconditional possibly dangle pointer limit memory performance performance avx loop roughly constant almost  avx hmmer sphinx vectorised implementation cannot compete unrolled loop mcf milc bandwidth utilisation infrequent sweep loop throughput none allocation intensive outlier significant performance impact hardware optimisation hardware optimisation introduce sweep memory mechanism avoid reading memory without pointer pte CapDirty remove scan without capability grain CLoadTags instruction allows skip cache tag evaluation micro october columbus usa xia woodruff  ffmpeg astar bzip dealii gobmk href hmmer lbm libquantum  omnetpp povray sjeng soplex sphinx xalancbmk memory sweep proportion pte CapDirty CLoadTags proportion memory swept specific benchmark reduction granularity pte CapDirty cache granularity CLoadTags normalise execution pointer density cache granularity CLoadTags pte dirty  normalise execution sweep memory addition pte dirty exclude capability CLoadTags instruction exclude capability cache plot versus target granularity pte dirty plot density CLoadTags cache density dot ideal improvement technique impact hardware optimisation amount memory swept resultant execution CHERI proportion memory swept optimisation derive density capability cache granularity pte CapDirty sufficient achievable reduction workload CLoadTags instruction significant reduction mechanism performance improvement CHERI fpga hardware pte CapDirty ideal performance improvement dot pointer corresponds directly performance improvement performance CLoadTags orange complex capture grain density data therefore theoretically reduce amount performance  ideal performance reflect normalise execution heap overhead xalancbmk omnetpp normalise execution workload overhead heap overhead default setup dot amount exploit grain information cache pointer skip CLoadTags query cache tag cache around cycle fpga implementation perform unpredictable contrast pte CapDirty implementation skip pointer inspect metadata coarse grain pte CapDirty grain CLoadTags optimisation optimal reduction sweep frequency offs overhead another cherivoke extent evaluate xalancbmk omnetpp workload overhead default setting target heap overhead heap overhead willing tolerate performance impact highly allocation intensive workload willing tolerate heap overhead deallocations quarantine longer sweep proportionately account majority performance increase quarantine buffer overhead cherivoke via sweep procedure subtle xalancbmk heap overhead normalise execution actually non sweep alone consistent reduction non sweep overhead correspond increase cache rate program quarantine buffer counterintuitive allocation fragmentation increase heap severe temporal fragmentation quarantine memory longer cache entirely frequently release fragment severely fragment heap sweep traffic overhead extra traffic generate sweep intel performance counter report core cherivoke characterise pointer revocation CHERI capability temporal memory safety micro october columbus usa ffmpeg astar bzip dealii gobmk href hmmer lbm libquantum  omnetpp povray sjeng soplex sphinx xalancbmk traffic overhead core traffic overhead traffic benchmark machine indicates traffic cache extra traffic utilisation comparable dealii significantly omnetpp soplex xalancbmk performance overhead unsurprising cherivoke overhead workload allocation intensive workload allocation intensive tend memory bandwidth intensive render cherivoke sweep overhead significant comparison information judgement impact cherivoke consumption performance multicores consumption overhead comparably performance overhead additional factor  traffic dram traffic comparable similarly access cache resource outside core affect performance application multicore typically minimal allocation intensive environment comparable performance overhead summary cherivoke significantly outperforms performance guarantee average runtime overall memory overhead performance memory overhead typically sweep procedure code kernel heavily optimise vector instruction analytically understood volume freed data density pointer memory hardware extension CLoadTags pte CapDirty significantly reduce amount perform cherivoke performance overhead memory target performance related revocation technique revocation technique hardware capability explore     compiler disambiguate pointer data code pointer creation insert pointer per allocation nullify entry data freed however per allocation highly performance storage intensive technique infeasible allocation workload additionally pointer hidden technique cannot guarantee temporal safety CHERI disambiguate pointer without additional metadata tag metadata instead sweep memory nullify dangle pointer avoid memory performance overhead associate complex metadata compiler involve quarantine CHERI  prevents hidden pointer guarantee temporal safety BOGO cherivoke temporal safety spatial safety intel MPX due lack quarantine buffer batching due complex MPX structure BOGO overhead significantly cherivoke spec cpu cherivoke average overhead whereas BOGO average technique dangle pointer prevent via protection granularity poison memory upon technique fence   extend technique reuse underlie physical address reduce overhead aliasing virtual  oscar concurrency workload granularity achieve overhead allocation however frequent allocation performance memory overhead increase enormously allocation virtual increase tlb pressure significant slowdown garbage collection garbage collection solves inverse pointer  prevents data freed reference remove garbage collection approach failsafe  pointer hidden garbage collection challenge cannot security issue temporal safety  issue premature deletion data however CHERI architecture pointer cannot hidden memory access unforgeable capability distinguish data tag CHERI avoids safety issue pointer aliasing conservative  technique addition garbage collection suffers weakness cherivoke reference pointer exist data longer garbage collector suffer significant memory overhead frequent sweep procedure counteract technique   garbage collector manual deallocation reallocate violation performance garbage collector issue related performance garbage collector procedure significantly cherivoke micro october columbus usa xia woodruff  sweep procedure involves complex  graph allocation whereas sweep perform rate memory bandwidth via easy optimise loop cherivoke precisely memory reclaim sweep procedure programmer manual deallocations optimise sweep procedure sufficient useful quarantine buffer heap vastly reduce overhead without increase memory usage moreover programmer malloc model simply familiar semantics explicitly manage memory understood acceptable programmer exemplify community exist codebases legacy extra GC model function reasonable memory performance overhead contrary malloc sweep revocation temporal safety without perturb memory allocation semantics predictable memory performance overhead demonstrates partial temporal safety technique reduce eliminate temporal safety bug academia  reduces bug exploit promote reuse pointer site reduce provenance reuse memory along  prevent memory exhaustion expense security technique delay reuse technique harder attacker reallocate data falsely freed    detection runtime protection fully guarantee temporal safety however protection detection debug application strategy AddressSanitizer poison deallocated flag access performance loss substantial software AddressSanitizer debug however hardware acceleration memory debug implement sparc adi technique  shadow tag pointer access allocate tag fail however tag motivate attacker exhaust reallocate data tag technique therefore suitable runtime fault reporting security another detection  dangle pointer within program false positive dangle pointer future tag memory CHERI tag memory improve security debug annotate address validity version ownership CHERI per capability align prevent arbitrary capability technique multiple memory versioning sparc adi  another tag memory debug technique aarch  combine memory tag modify compiler toolchain hardware assist AddressSanitizer scheme utilise unused pointer memory tag detect stale reference  unique tag memory access memory access fail tag allocate pointer CHERI false positive rate suffer due pointer hiding valid non CHERI unlike CHERI spatial safety cannot guaranteed hardware  significant performance loss watchdog unique pointer allocation identifier temporal safety hardware benchmark watchdog cherivoke watchdog average overhead whereas cherivoke conclusion enforce temporal safety hardware capability overhead cherivoke technique sweep memory architecturally visible capability pointer efficient revocation shadow identify revoke achieve performance overhead heap increase requirement presentation cherivoke considers fundamental mechanism performance temporal safety implementation optimise technique reuse physical address deallocations  reuse allocation data delay revocation reuse location multiple  style potential combine cherivoke  cheap become ubiquitous future