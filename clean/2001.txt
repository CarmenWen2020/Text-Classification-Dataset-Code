speculative execution attack meltdown spectre access secret data execution secret transmit recover attacker via covert channel exist mitigation code modification address specific exploit technique cache covert channel  exploit technique covert channel seek speculative execution attack source observation attack chain dependent instruction access transmit secret data propose nda technique restrict speculative data propagation nda attack dependence chain speculation dynamic schedule nda variant constraint dynamic schedule speculative execution attack prevent nda preserve performance advantage execution spec cpu nda variant performance gap unconstrained insecure execution introduction speculative execution attack exploit micro architectural behavior channel exfiltrate sensitive information unlike classical software exploit modify architectural steer chosen code attack  attacker steer exist victim code induce unwanted access victim memory chosen code attacker generates code access privileged data data belongs another context register memory speculative execution attack demonstrate attacker retrieve secret micro architectural cache speculative execution speculative execution attack classify category spectre spectre others allows malicious code steer victim program carefully training predictor execute specific instruction speculative although instruction ultimately squash architectural victim program coerce leak memory content micro architectural channel instance sgx secure enclave steer leak memory classify attack steer attack another attack enables unprivileged attacker code access privileged memory temporarily expose execution instance meltdown allows reading kernel memory foreshadow allows reading hypervisor OS SMM sgx memory  allows reading aes avx register another MDS attack reading recently access memory belonging attacker generates code arbitrary instruction sequence execution classify attack chosen code attack attack fundamentally therefore approach mitigation exist software defense speculative execution attack modify program source code attack specific mechanism software defense steer attack retpoline  improve lfence micro october columbus usa  instruction focus prevent attacker steer execution victim code unfortunately defense immediately applicable exist binary specifically software mitigation chosen code attack involve modify OS hypervisor SMM code recent google discus software approach aim mitigate timing channel manipulate timer insufficient author optimization perform micro architecture negligible become observable amplification technique code modification defense bypass instance attacker redirect evade fence instruction training target buffer BTB return stack buffer  hardware defense potential obviate modify exist software disclose speculative execution attack cache covert channel leak data execution consequently initial hardware defense invisispec  others seek prevent execution secret cache later recover suggests hardware modification automatically insert lfence micro ops however author mainly address spectre attack data cache covert channel technique effective recent closing cache covert channel insufficient speculative execution attack cache potential covert channel   spectre already secret transmit via FPU via contention transmit secret via BTB isolate predictive structure seal individual covert channel  instead seek speculative execution attack source philosophy treat potentially secret prevent secret propagate microarchitecture observation speculative execution attack chain dependent instruction access transmit data covert channel prevent potentially propagate dependency chain thwart code sequence attack propose nda non speculative data access technique restrict speculative data propagation OoO processor nda allows instruction output dependent source instruction nda restricts data propagation prevent tag broadcast unsafe instruction delay wakeup dependant issue queue source instruction becomes taxonomy building speculative execution attack attack depends upon data propagation execution demonstrate define unsafe prevent data attack compose various restriction instruction becomes nda variant variant constraint dynamic execution schedule therefore performance location secret data extract purpose register speculation attack prevent steer chosen code nda defeat document speculative execution attack without modify exist code importantly however nda preclude speculation OoO execution nda policy treat instruction unresolved unsafe instruction execute speculatively OoO restrict propagate output dependent precede resolve evaluation demonstrates despite delayed wake ups vast majority performance gap model eliminate speculative execution attack unconstrained OoO execution recover simulate nda spec cpu benchmark suite performance invisispec setup invisispec data cache attack introduces overhead setup comparison nda covert channel nda policy mitigates  vulnerability fundamental unconstrained OoO execution slows execution faster preclude meltdown hardware implementation flaw nda strictest policy slows execution insecure OoO processor faster execution contribution introduce speculative execution attack taxonomy attack induce execution nda technique speculative data propagation processor defeat speculative execution attack nda multiple variant security performance tradeoff evaluate nda variant spec effective efficient background data propagation OoO processor illustrates conceptual instruction cycle OoO processor upon dispatch reorder buffer rob instruction execute source operand instruction source operand instruction issue enters execution pipeline execution completes instruction wake dependent broadcasting tag correspond destination physical register instruction instruction essence nda technique delay tag broadcast transition wake dependent instruction input operand become nda wake input operand expand concept speculative execution attack speculative execution attack exploit execution typically undefined processor vendor content architectural register memory guaranteed reflect precise commit instruction execution affect microarchitectural structure instance cache access nda prevent speculative execution attack source micro october columbus usa inst inst instruction output broadcast inst broadcast source instruction execute inst source input cycle instruction OoO processor instruction execution dependant instruction access output broadcast allocate modify cache replacement revert instruction squash variety micro architectural structure revert squash direction predictor pre decode micro trace cache memory dependence predictor prefetchers TLBs grain management FPU avx performance counter micro architectural structure channel infer timing execution sequence refer channel intentionally transmit data covert channel attacker execution transmit data via covert channel later infer execution hence leak data architectural analysis classify speculative execution attack fundamental attack phase exist attack exist mitigation technique attack shortcoming lastly demonstrate closing specific channel insufficient attack via covert channel BTB classify attack attack phase speculative execution attack aware comprise phase access transmit recover access phase secret data load temporary register transmit phase secret data covertly transmit micro architectural revert instruction squash finally recover phase transmit secret recover non speculative memory access latency whereas instruction involve phase speculatively execute eventually squash phase access phase speculatively secret physical register restrict memory register cache FPU attacker memory BTB transmit phase speculatively transmit secret via covert channel preprocessing recover phase covert transmission non speculatively physical register xff pre probe covert channel tlb physical register load secret probe PHT transmit via covert channel phase speculative execution attack prior defense focus mostly cache covert channel fail prevent leak channel FPU BTB others commit architectural execution essential attack evades software hardware protection mechanism prevent secret data leak architectural steer chosen code attack classify attack methodology perform access phase transmit phase attack access phase category correspond attacker threat model subdivide attack accord covert channel exploit transmit phase illustrates taxonomy currently attack steer attack attacker  victim program speculatively execute instruction leak data covert channel attack leak data victim application hardware access privilege intend secret permission bound software   secure sgx enclave access leak encrypt memory illustrate steer attack unlike classical security vulnerability wherein attacker directly hijack program counter stack smash attack overwrites return address speculative steer attack misdirect execution training predictor instruction fetch attacker target hence trace commit instruction sequence leak data covert channel approach steer demonstrate steer attack attacker typically introduce instruction victim binary attacker composes series gadget exist code return orient program rop contrast chosen code attack category access phase adversary generate micro october columbus usa  init channel clflush  phase access secret data attacker array predict array secret array phase covertly transmit secret  secret somewhere attacker code phase recover secret addr   timer temp addr access probe array  timer cache threshold listing exfiltrating secret data spectre  cache covert channel phase access secret secret kernel addr fault load phase covertly transmit secret execute fault  secret phase recover secret listing listing exfiltrating secret data meltdown  attack cache channel execute arbitrary code sequence attack adversary already access register memory attack instead seek circumvent hardware protection preclude attacker access secret data  code instance meltdown access kernel memory foreshadow access sgx hypervisor memory  access avx register another attack exploit implementation flaw relative timing hardware protection data instruction secret data propagates instruction leak covert channel protection squash execution chosen code attack sample attack code listing illustrates phase spectre bound bypass attack  attack attack victim code instruction access array index access array victim code performs bound circumvent bound attacker direction predictor invoke victim code repeatedly valid attack attacker victim code illegal attacker chooses array refer location victim memory secret direction predictor predicts execute execution code access secret transmits secret later execution attacker executes recover secret cache channel timing access  correspond cache load evaluation spectre spectre spectre    spectre ssb spectre future attack meltdown  foreshadow LTF MDS attack future attack phase BTB steer phase attack chosen code speculative load cache FPU demonstrate prior demonstrate cache attack defeat prior cache taxonomy attack secret data access covert channel nda exist attack regardless covert channel attack cache channel exfiltrate secret data currently chosen code attack load load operation future attack instruction covert transmission channel illustrate difference access timing reveals secret data listing depicts chosen code attack simplify meltdown exploit whereas illegal load eventually fault instruction executes evidence cache attacker recover secret recover phase identical listing avoid trap fault handler attacker steer technique ensure fault load executes predict nevertheless classify attack chosen code attacker execute binary limitation exist defense mitigation hardware defense mitigate steer attack prevent attacker training predictor   barrier instruction prevent speculation context switch lfence  unfortunately recent attack reveal technique overcome   disables speculative bypass ssb explain prevent attacker reading data overwritten however  spectre introduces overhead software defense retpoline  stuff ret instruction steer compiler approach data dependency code disable speculation however compiler approach defeat spectre attack recent compiler modification nda prevent speculative execution attack source micro october columbus usa cycle cache secret byte BTB secret byte cache BTB cache BTB spectre cache BTB orange covert channel cache channel cache cycle difference cache BTB channel successfully predicts target cycle difference BT spectre attack unfortunately approach defeat cache attack overhead chosen code attack mitigate prevent speculative load access restrict memory instance kernel address layout randomization KASLR kernel isolation kpti prevent meltdown attack reading privileged kernel memory KASLR randomizes kernel address ASLR user kpti manages kernel userspace prevent user code issue illegal load kernel memory kpti swap transfer cpu privilege mitigate foreshadow modification OS hypervisor SMM code modify management alter virtual machine schedule cache flush switch security domain unfortunately defense mechanism specific exploit technique therefore deploy myriad software hardware defense resilient steer chosen code attack recent suggests prevent steer  attack cache channel  transmit phase however abundant covert channel defeat speculative attack closing channel individually challenge exploit already demonstrate channel  demonstrate FPU viable speculative covert channel  spectre transmit data via contention attack via BTB BTB covert channel demonstrate covert channel exploit cache covert channel available BTB BTB mapping instruction address associate target address instruction address function address installs mapping BTB processor fetch instruction address processor speculatively redirect fetch address BTB predicts correctly speculatively fetch instruction eventually retire however prediction    predict squash predict incorrect BTB prediction BTB prediction  overhead prediction  BTB covert channel attacker BTB prediction execution processor squash execution mispredicted instruction address execute recovery illustrate gem simulator cycle BTB resolve execution squash execution resume target crucially update BTB speculation revert squash effective covert channel cache absence security concern BTB update replacement policy speculation advantageous avoid future BTB demonstrate BTB covert channel construct variant spectre leak secret byte speculative BTB update illustrate listing leak byte covert channel comprises distinct function target transmit phase recover phase invoke target site  ensure BTB entry mapping target originate PC therefore conflict BTB mispredicted attacker access address attacker transmits secret speculatively  secret speculation processor update BTB entry instruction secret access phase recover phase destructive execution alters content BTB target confirm BTB covert channel attack important validate execution difference arise cache cache latency cache hierarchy attack upon secret validate attack ensure target array target function cached access transmission recovery report effectiveness BTB covert channel gem via orange recover phase incur cycle prediction squash delay depict execute faster depict micro october columbus usa  array unique target function void target void location hence BTB entry consult void  int index target index void victim function phase access secret data attacker array predict secret array phase covertly transmit secret  secret update BTB somewhere attacker code phase recover secret induce victim leak secret victim function  timer  BTB prediction  timer threshold listing exfiltrating secret data spectre  attack BTB channel BTB covert channel potential machine specific transmission channel BTB channel poc demonstrate nda agnostic specific transmission channel threat MODELS nda variant address threat model location secret data steal attacker steer chosen code attack nda goal eliminate channel execution channel prior threat model agnostic covert channel attack steer attack threat model secret reside model considers attack secret memory register currently steer attack  threat model additionally considers hypothetical attack leak secret reside purpose register GPRs threat model chosen code attack threat secret privileged memory register  attack presuppose attacker GPRs lastly fourth threat model comprises union threat steer chosen code attack secret memory register GPRs leak memory via steer steer attack steer  execution code access secret memory manipulate execution timing load stale assume attacker steer execution instruction manipulate execution timing instruction instruction variant jmp ret phantom BTB  steer program counter correspond dispatch stage stall micro ops opcode unknown hence BTB predicts none dispatch stall phantom opcode obtain resolve misprediction fetch instruction discard OoO instruction squash dispatch threat potentially fault instruction steer steer attack whereas fault execution attack fault instruction meltdown foreshadow  MDS etc threat model chosen code attack speculative bypass ssb spectre variant attack performs access phase malicious speculative load bypass address unresolved malicious load speculatively yield stale secret data although attack necessarily misdirect access phase steer attacker leverage exist code snippet attacker code stale data without exploit speculative bypass leak GPRs via steer currently steer attack extract secret reside memory nevertheless recognize future attack extract secret reside victim GPRs threat model considers attacker steer victim leak GPR content scenario steer victim code already posse secret GPR access phase steer attack already possibly unintentionally victim therefore focus hinder attacker perform phase transmit GPR resident secret attack data micro ops transmit phase preprocess secret calculate offset relative address leak prevent attack leak secret speculative micro principle covertly transmit GPR secret micro instance GPR contains secret corresponds valid virtual memory address attacker speculatively issue load fetch address cache hierarchy perform transmit phase micro however scenario secret valid memory address victim code voluntarily load secret GPR shortly vulnerable steer attack exploit behavior leak memory chosen code chosen code attack attacker attempt access secret reside memory specifically attacker influence code generation execution treat operation  register avx abuse  model specific register MSRs meltdown variant memory access craft defense instruction  access register treat load chosen code attack attacker already nda prevent speculative execution attack source micro october columbus usa GPRs therefore content GPR secret instruction guaranteed retire retirement rob satisfies hardware permission memory  retire instruction cannot leak secret access combine threat model finally nda conservative threat model combination threat outline suppose attacker conduct steer attack extract secret victim memory GPRs chosen code attack access privileged memory register combine threat model practical approach linux deploy mitigation attack nda goal mitigate steer chosen code attack reap benefit OoO speculative execution discus variant nda policy speculative data propagation threat model nda data propagation policy security guarantee correspond performance implication nda upon baseline physical register OoO micro architecture insight nda speculative instruction safely execute without leak secret input instruction define instruction respect threat model execution leak information channel instruction consequently eliminate gap speculative channel attack non speculative channel security conscious programmer already nda policy define instruction wake dependent instruction instruction advance mitigate steer attack nda restricts data propagation unresolved unresolved address secret reside bypass ssb threat instruction predict unsafe target direction resolve load unresolved address unsafe bypass restriction mitigate chosen code attack nda introduces propagate retire mechanism defeat document chosen code attack variant future exploit rely speculative load policy return load instruction instruction sensitive register  unsafe load retire finally mechanism combine defend attack strict data propagation nda address steer attack define unresolved unresolved prediction incorrect border unsafe speculation micro enters rob unresolved fetch predicts instruction fetch via BTB  etc subsequently dispatch micro ops similarly micro enters rob unresolved address calculate address calculate load erroneously access stale data address overlap variant data propagation restriction regard steer attack strict permissive variant leverage bypass restriction mechanism defeat ssb attack strict propagation explain permissive propagation bypass restriction strict propagation defends threat model secret reside memory register GPRs union threat described policy nda micro ops dispatch unresolved unsafe unsafe instruction wake compete issue baseline OoO issue operand become unsafe micro completes execution writes destination physical register broadcast destination tag dependent instruction destination register output bypass network hence dependent instruction issue cannot unsafe manage propagation  outstanding micro resolve instruction rob  unresolved rob entry extend unsafe instruction unresolved micro exec instruction execute  instruction broadcast tag wake dependent upon instruction completion unsafe tag broadcast defer micro resolve unsafe subsequent rob entry unresolved unsafe exec  instruction arbitrate tag broadcast compete instruction cycle instruction priority avoid pipeline stall  broadcasting instruction broadcast tag issue queue destination register wake dependent additional tag broadcast rob baseline OoO broadcast unchanged broadcast shift precede micro ops resolve assume broadcast bandwidth instruction cycle another instruction marked newly instruction wake dependent cycle majority evaluation assume broadcast wake newly instruction within exist wake critical sensitivity impact delay due critical constraint cycle delay reduces cpi illustrates rob snapshot execute code akin listing depict various nda data propagation policy micro october columbus usa  operation description strict propagation permissive propagation load restriction strict prop load mov rax rbp mov rdi rax  victim function mov eax rip load array cmp rax array  array lea rax rbx calc addr arr  eax rax load arr access phase  eax char arr preprocess  eax preprocess probe  edx rdx rax probe transmit phase execute execute broadcast unsafe broadcast resolve unresolved blank rob snapshot execution spectre listing nda policy resolve therefore load strict permissive propagation broadcast wake dependant load restriction policy instruction execute retirement therefore cannot issue execute rob snapshot strict propagation resolve instruction marked unsafe whereas instruction executes completion unsafe therefore cannot wake dependent instruction resolve micro completes execution upon misprediction micro ops rob squash rename recover discard physical register become prevent potentially secret data leak permissive data propagation threat model nda protects secret memory register safely optimize performance via permissive propagation load instruction unresolved unsafe arithmetic instruction unconditionally marked dispatch intuition policy load introduce secret microarchitecture load precede  unresolved micro commit architectural GPRs threat model execution due exception meltdown foreshadow address threat model address chosen code attack dependent instruction fetch unresolved arithmetic instruction non load therefore broadcast output upon completion issue without resolve threat model protects content register avx MSRs  meltdown instruction register  treat load marked unsafe dispatch unresolved illustrates difference strict permissive propagation contrast strict propagation lea instruction marked load operation therefore lea wake dependent instruction immediately bypass restriction BR defeat ssb attack introduce mechanism bypass tandem strict permissive propagation scheme unlike intel  load execute bypass load queue lsq however load marked unsafe bypass address resolve bypass resolve address generates violation offend load instruction squash memory dependency load restriction nda protects chosen code attack data propagation speculative load meltdown foreshadow  MDS attack attack exploit specific flaw processor implementation data propagates load eventually fault flaw individually patch however complexity processor implementation implementation error future moreover chosen code context myriad induce execution fault load intel tsx transaction abort interrupt delivery breakpoint syscall instruction performance counter overflow load replay due memory misspeculation etc prior suggests effective defense address underlie chosen code attack nda prevent speculative execution attack source micro october columbus usa steer memory steer GPRs chosen code overhead OoO speedup wrt IO perm propagation perm propagation BR strict propagation strict propagation BR load restriction protection invisispec spectre invisispec future steer memory steer GPRs chosen code overhead OoO speedup wrt IO perm propagation strict propagation load restriction protection mechanism defeat covert channel defeat cache attack defeat covert channel ssb defeat covert channel micro GPR attack evaluation invisispec spec detailed nda propagation policy attack prevent bypass restriction BR protection ssb spectre register avx MSRs  spectre treat access load none document attack leak data GPRs without dependent micro ops therefore propose blanket nda protection policy load restriction document chosen code attack potential prevent future variant instance nda load restriction MDS attack discover submission load restriction load unsafe   instruction rob load restriction microarchitecture guarantee load wake dependent immediately retire illustrates rob snapshot load restriction load independent execute concurrently enable memory instruction parallelism mlp ILP however wake dependent retires prevent attack defeat steer chosen code attack nda policy composes strict propagation load restriction nda policy defensive protection illustrates rob snapshot protection policy load issue execute completion contrast load restriction arithmetic operation unsafe therefore cannot wake instruction however parallel execution execute parallel unlike processor security analysis strict propagation bypass restriction policy protects secret memory hinders exfiltration secret GPRs via steer attack spectre ssb  importantly   spectre BTB attack parameter architecture ghz core OoO issue smt load queue entry queue entry rob entry BTB entry RAS entry core  gem cache associative SA cycle RT latency cache MB SA cycle RT latency dram response latency gem simulation configuration address prior defeat secret reside memory output access phase cannot transmit phase execution attacker leak content GPR transmit phase successful attack comprise  another instruction prior exist attack multiple dependent micro ops transmit secret permissive propagation bypass restriction policy protects secret memory secret GPRs rax protection par threat model recent benefit covert channel document steer attack load unresolved marked unsafe therefore transmission phase output load however unlike strict propagation non load micro ops marked secret already resides GPR attacker pre transmit secret sequence  operation load restriction load restriction policy address chosen code attack spectre  foreshadow NG MDS attack chosen code threat model attacker already execute code trivially access content GPRs memory load restriction protects secret privileged memory register specifically micro load load instruction load retires upon retirement return load longer speculative accordingly load restriction potential future chosen code attack access memory register additionally none exist speculative execution attack leak secret GPRs load restriction policy prevents steer attack protection combine load restriction strict propagation policy defensive nda protection policy defeat steer chosen code attack exfiltrating data memory register hinders attacker ability transmit content GPRs micro october columbus usa  cycle per instruction normalize OoO perlbench gcc bwaves mcf cactubssn  lbm omnetpp wrf xalancbmk namd OoO permissive permissive BR strict strict BR restrict load protection invisispec spectre invisispec future cycle per instruction normalize OoO blender cam deepsjeng  leela povray nab exchange fotonikd rom average nda invisispec performance spec error depict confidence interval nda prevent speculative execution attack source micro october columbus usa cycle cache BTB secret byte BTB cache secret byte spectre nda permissive propagation policy cycle difference spectre without nda eliminate nda conceals secret byte regardless covert channel evaluation demonstrate nda effectiveness mitigate speculative execution attack evaluate performance nda policy experimental setup methodology evaluate nda gem spec cpu benchmark suite cpu configuration reflect haswell microarchitecture recent architectural speculative execution attack obtain spec benchmark performance statistical confidence guarantee extend gem enable simulation sample methodology SMARTS spec benchmark hardware haswell xeon dump snapshot execution fix interval gdb developed convert snapshot gem checkpoint resume execution simulation checkpoint simulation instruction performance instruction validate unknown cache reference measurement reference cache tag initialize warmup negligible performance error due unknown cache reference sample error report confidence interval cpi nda performance variant invisispec SMARTS methodology gem configuration source code author nda invisispec performance baseline configuration spec within confidence interval absolute performance invisispec depict due benchmark spec spec sample methodology billion instruction SMARTS sample publication invisispec author release bug fix affect performance effectiveness nda evaluate spectre listing listing unmodified gem without nda protection illustrate cache BTB covert timing channel clearly leak secret byte secret byte cache covert channel yield cycle decrease due cache BTB covert channel similarly yield cycle decrease due overhead prediction however spectre cache BTB attack permissive propagation enable nda speculative data leakage regardless covert channel depict secret indistinguishable candidate nda performance evaluate nda performance configuration nda policy described baseline invisispec configuration baseline configuration unconstrained OoO processor processor extreme speculation trivially immune speculative execution attack besides nda load restriction protection processor execution model defeat document speculative execution attack regardless covert channel unconstrained OoO processor performance insecure cycle per instruction cpi depicts cpi configuration across benchmark normalize OoO average overhead policy summarize defeat ssb bypass restriction BR overhead permissive propagation BR performance policy prevents steer vulnerability average performance loss relative OoO baseline policy thwart steer attack recovers performance gap OoO baseline protection secure policy average performance loss policy prevents document variant steer chosen code attack offering potential protection future attack despite restriction imposes dynamic schedule protection performance gap OoO depicts average breakdown OoO variant normalize baseline OoO commit cycle cycle instruction retires memory stall cycle rob incomplete memory operation stall cycle rob non memory operation retire stall cycle rob empty cycle spent squash execution nda policy restrict data propagation thereby limit dynamic schedule therefore average instruction commit cycle increase overall commit cycle instruction parallelism memory non memory instruction reduce cycle spent memory stall stall stall cycle generally across average contribute difference cycle wake latency nda introduces delay instruction completion tag broadcast whereas broadcast delay directly affect cpi delay propagates dependent instruction micro october columbus usa  aggregate statistic spec benchmark nda extend cycle spent commit backend stall mlp ILP across nda policy nda delay latency issue however overall impact cpi substantially impact nda logic latency cpi relatively rob delay issue average delay instruction dispatch wake average latency across benchmark nda policy average cycle increase latency manifest increase cycle spent stall however wake latency modest impact overall performance cpi memory instruction parallelism mlp ILP favorable performance nda processor explain memory instruction parallelism profile geometric mlp ILP across benchmark depict report mlp average outstanding chip outstanding whereas mlp ILP various nda profile OoO baseline respectively baseline processor mlp ILP cannot exceed nda enables execution parallelism chip despite schedule restriction speculative instruction importantly nda typically restrict issue load wake dependent  typically dependent load delayed mlp ILP comparison invisispec nda invisispec threat model detailed comparison evaluation invisispec spectre defeat cache steer attack slowdown comparison nda steer attack regardless covert channel slowdown secret reside futuristic chosen code attack invisispec future introduces overhead nda however nda covert channel contention FPU BTB related micro architectural channel attack cache channel infer aes VM myriad channel technique developed flush reload advanced technique refer attack classical cache attack attack leverage speculative execution demonstrates cache channel covert channel dram issue demonstrate viable covert channel speculative execution attack meltdown spectre leveraged prior cache covert channel transmit data obtain execution via data cache dcache speculative attack various technique access secret steer execution leveraged cache covert channel cache covert channel widely exploit initial defense exclusively focus cache however defense mitigate non cache speculative execution attack specifically demonstrate covert transmission secret via instruction cache cache unfortunately trivial apply cache  cache protection delay speculative load cache prevent speculative cache modification however author mention apply policy cache overhead cache delay preclude flight instruction execute OoO cache delay stall starve entire pipeline invisispec allows speculative load execute dedicate buffer commit update cache speculation resolve author hypothesize apply cache implement evaluate performance overhead cache protection comparison cache defense nda agnostic covert channel transmit phase attack conditional speculation protects secret memory GPRs comparison nda strict propagation prevents attacker perform pre processing nda prevent speculative execution attack source micro october columbus usa speculative exec register secret secret addr secret secret scrub secret resume speculative exec listing closing register memory security gap transmit phase nda defeat   attack protection secret register prior mitigation defeat spectre variant context sensitive fence hardware modification automatically insert lfence micro ops cache channel  delay broadcast micro ops defeat spectre across multiple covert channel however author goal spectre attack nda defeat variant regardless covert channel recent DAWG CEASER others hinder attacker ability deterministically cache collision another VM thwart  covert channel however technique mitigate attack non cache covert channel address related deployed defense mechanism speculative execution attack discussion nda capable defeat steer chosen code attack perform considerably processor however nda attack steer attack generalpurpose register exists feasible micro leak register content register introduce instruction processor mode temporarily disables speculation execution vulnerability secret load memory resides register overwritten illustrate defense listing defense effective addition nda without nda  attack simply steer execution bypass speculatively execute leak register content conclusion speculative execution attack challenge mitigate individual covert channel specific exploitation technique insufficient effective mitigation introduce classification speculative execution attack attack induces execution technique speculative data propagation nda defeat speculative execution attack drastically reduces attack future variant spec nda effective performant mitigation