coflow schedule effectively improve application performance cooperative environment private datacenter network fairness primary concern non cooperative environment multi tenant datacenter network coflow schedule strategy proof otherwise tenant unfairly acquire resource cheat scheduler minimize coflow completion CCT prioritize coflows specific shortest coflow effective bottleneck tenant priority coflows coflow information belief optimize coflow performance inevitably violate strategy proofness argue average CCT reduce without violate strategy proofness insight prioritization inherently achieve CCT without specific effective bottleneck propose coflow scheduler non cooperative environment split multiple ensures data transmit tenant optimal isolation guarantee prioritizes coflow transmission tenant robin manner tenant fairly prioritize tenant necessarily gain bandwidth cheat extensive simulation outperforms strategy proof mechanism average CCT keywords coflow schedule datacenter network data intensive application introduction data parallel application mapreduce spark widely apply compute datacenters application usually contains communication various server generate parallel generally communication transmission therefore optimize performance individual necessarily improve application performance coflow abstraction propose narrow mismatch coflow refers collection parallel objective coflow constituent minimize coflow completion CCT truly accelerate correspond tremendous effort optimize coflow performance focus minimize average CCT cooperative environment private datacenter network environment feasible collaborate improve overall application performance specifically coflow schedule algorithm prioritize coflows others minimize average CCT varys preferentially allocates bandwidth coflows bottleneck completion however mechanism cannot directly employ non cooperative environment multi tenant datacenter network environment various tenant entity resource tenant willing yield resource tenant environment prioritize coflows tenant accord specific coflow encourage tenant demand schedule algorithm strategy proof tenant obtain bandwidth strategy proofness minimize CCT conflict objective recent coflow schedule non cooperative environment prioritization ensure strategy proofness strategy proofness performance drf hug equally split bandwidth compete coflows max min manner however without prioritization cannot achieve satisfactory performance CCT hug sustains longer average shuffle completion mapreduce varys series mechanism CCT significantly reduce trading strategy proofness coflex tunable fairness knob flexibly tradeoff fairness efficiency utopia achieve optimal CCT performance provable isolation guarantee however mechanism fairness suffer serious unfairness specific situation argue CCT reduce without violate strategy proofness insight prioritization necessarily violation strategy proofness violation strategy proofness happens prioritization merely coflows width successfully speculate tenant tenant discover prioritization cannot obtain bandwidth cheat regardless schedule prioritize coflows inherently achieves CCT max min bandwidth prioritization without specific coflow CCT reduce drf hug propose robin coflow scheduler split multiple hug ensures overall bandwidth allocate tenant optimal isolation guarantee hug prioritizes coflows inside minimize CCT prioritization conduct robin manner tenant tenant prioritize tenant tenant prioritize tenant tenant fairly prioritize furthermore prioritization irrelevant coflow tenant cannot gain bandwidth coflow information evaluate extensive trace driven simulation realistic setting outperforms hug average CCT meanwhile ensure bandwidth allocation tenant granularity background motivation background coflow abstraction non cooperative environment exist coflow scheduler non cooperative environment coflow schedule non cooperative environment coflow abstraction data parallel computation framework widely compute machine datacenters mapreduce spark tensorflow framework contains multiple computation communication stage communication stage usually involves parallel data transmission coflow abstraction propose express communication requirement communication stage mapreduce cluster compute framework implement apache hadoop widely apply compute mapreduce mapper machine data distribute file dfs sort data intermediate data inputted reducer reducer distribute another machine fetch data mapper shuffle finally reducer merge data dfs assume mapreduce involves mapper machine reducer machine data shuffle phase generate intermediate data mapper reducer network collection parallel refer denote cardinality coflow image KB image communication mapreduce coflow define collection parallel semantically related minimize completion cluster compute application deadline non cooperative environment public various tenant entity network unlike private datacenters tenant usually willing compromise bandwidth accelerate shorter coflows another tenant reduce overall coflow completion therefore environment non cooperative environment traditional coflow schedule algorithm cooperative environment apply environment algorithm prioritize coflows accord coflow attribute effective bottleneck encourage tenant cheat scheduler tenant acquire bandwidth coflow information tenant coflow multiple sub coflows reporting sub coflows instead actual coflow priority occupy bandwidth objective accord characteristic ideal coflow scheduler non cooperative environment strategy proofness tenant obtain bandwidth bandwidth demand prevent tenant cheat scheduler incentivize tenant report actual coflow information efficient performance coflow scheduler achieve performance coflow schedule minimize average CCT accelerate completion datacenter application isolation guarantee non cooperative environment multiple tenant network contend bandwidth predictable performance tenant ideal coflow scheduler guarantee performance isolation tenant exist approach coflow schedule non cooperative environment propose scheduler isolation tenant assign coflow bandwidth isolate completion coflow another hug scheduler hug optimal isolation guarantee tenant preserve strategy proofness however performance efficient CCT improve hug coflex attempt flexibly adjust balance isolation guarantee efficiency utopia attains optimal performance provable isolation guarantee novel bandwidth allocation algorithm super coflow coflex utopia substantially improve efficiency coflow performance however strategy proof unfair schedule exist approach subsection limitation coflow scheduler non cooperative environment efficiency hug hug partition bandwidth tenant max min manner optimal isolation guarantee however without prioritization coflow performance coflows contend gbps link coflow transmit link link respectively demand denote coflow transmit link link respectively demand denote hug bandwidth allocation CCTs coflow coflow respectively comparison performance efficient coflow schedule shortest coflow bandwidth allocation coflow coflow coflow transmit CCTs coflow coflow respectively shortest coflow algorithm hug extends CCT coflow without improve CCT coflow overall coflow performance hug shortest coflow algorithm average CCT coflow coflow prioritize CCT performance improve upon hug improve efficiency hug strategy proofness violation coflex utopia unlike hug coflex utopia argue constraint strategy proofness relaxed coflow performance significantly improve specifically coflex schedule coflows accord effective bottleneck SEBF heuristic assign coflow tunable drf allocation coflow bottleneck completion priority obtain unused bandwidth similarly utopia coflow completes earlier drf bandwidth preferentially however absence strategy proofness coflex utopia tenant acquire bandwidth cheat previous bandwidth allocation coflex utopia respectively fairness knob coflex coflex fairly allocates gbps bandwidth link coflow coflow improve CCT performance coflex allocates remain gbps bandwidth coflow coflow utopia prioritizes coflow coflow achieve CCT hug however assume coflow coflow belong tenant tenant tenant respectively tenant acquire bandwidth cheat specifically coflow multiple coflows coflows demand coflex tenant extra gbps bandwidth respectively utopia tenant occupy bandwidth allocate tenant image KB image illustration strategy proofness violation coflex utopia summary summary hug strategy proof optimal isolation guarantee however CCT performance improvement coflex utopia dramatically optimize CCT performance however strategy proof tenant acquire bandwidth cheat incentivize tenant actual bandwidth demand prevents scheduler optimize performance due limitation exist approach strategy proof scheduler aim efficiently schedule coflows assumption model network model previous chowdhury model datacenter fabric non switch assume physical machine network machine machine duplex uplink downlink coflow schedule model coflow data transmission demand uplink link link  link link coflow demand vector transmission demand coflow link amount data transmit link image KB image datacenter fabric ingres egress machine assume tenant network tenant multiple coflows demand tenant sum demand coflows specifically assume tenant coflows denote tenant demand vector coflows denote demand vector tenant finally bandwidth allocate tenant link scheduler allocate bandwidth link regardless prioritize coflows inherently achieves CCT performance splitting bandwidth splitting bandwidth extends CCTs tenant extreme CCTs equally splitting bandwidth CCTs instead coflows transmit majority coflows earlier significantly reduce average CCT coflows uniform prioritize coflows penalizes coflows argue avoid  splitting multiple limit data transmit coflows prioritization necessarily violation strategy proofness violation happens prioritization purely coflow infer tenant scheduler prioritizes coflows tenant infer coflows acquire bandwidth combine propose schedule coflows multiple prioritize coflows robin manner tenant tenant opportunity prioritize coflows tenant bandwidth fairly allocate meanwhile tenant benefit cheat scheduler specifically mechanism illustrate tenant tenant tenant coflow gbps link respectively splitting multiple split limit amount data transfer tenant overall bandwidth allocation max min assigns amount data transmission shorter coflow coflows cannot prioritizes coflows optimize CCT performance robin prioritize ensure coflow schedule strategy proof adopts robin prioritize coflows tenant tenant prioritize tenant tenant precedence tenant mechanism effectively ensures tenant fairly prioritize fundamentally prevents tenant gain bandwidth prioritization irrelevant coflow prioritization coflows completion coflows dominate bandwidth prioritizes coflows robin manner constrains amount data transfer coflows tenant bandwidth occupy priority coflow priority coflow priority coflow consumes amount data transmission therefore shorter coflow sufficient bandwidth amount data transmission likely accelerates completion coflows coflow coflow coflow transmit respectively prioritize tenant assume tenant coflows coflow transfer coflow tenant gbps bandwidth however hug coflows equally entire link bandwidth gbps coflow later performance coflows significantly improve detail subsection overall architecture detail architectural overview coordinate coflow scheduler consist component daemon deployed controller daemon host integrates information tenant status network bandwidth daemon schedule coflows tenant global network computes transmission volume tenant rate within coflows tenant distributes decision host update bandwidth allocation coflows transmission volume exhaust tenant besides achieves management registration tenant client library daemon monitor coflows status demand vector byte coflow api report periodically host allocate bandwidth within coflows rate limiter calculates overall bandwidth allocation tenant hug determines duration shortest completion coflows hug bandwidth duration assigns coflow byte transfer finally schedule coflows prioritization image KB image architecture detail offline involves schedule coflows within tenant coflows duration duration crucial performance investigate approach detail efficient obtain completion coflows hug duration completion coflow ensure coflow assume tenant network tenant coflows obtain bandwidth allocation tenant hug specifically demand vector coflows tenant demand vector tenant calculate accord demand vector obtain bandwidth allocation vector tenant hug compute completion coflows bandwidth vector shortest completion duration completion coflow demand link bandwidth allocate tenant link ensures coflow transmission allocate transmission tenant transmission tenant depends bandwidth allocation duration namely tenant data transfer coflows within tenant assign ascend completion hug schedule coflows rank coflows robin manner super coflow inspire utopia calculate bandwidth coflow specifically coflows classify category coflows coflows cannot intuitively former earlier priority latter cannot accomplish therefore priority prioritize former robin manner accord tenant across multiple strategy proofness sort latter ascend completion hug illustrate mechanism tenant tenant coflows respectively prioritize coflows ascend completion hug sort sequence sequence tenant tenant respectively sequence coflow others cannot rank coflows tenant accord coflow tenant participate sort distribution coflow extract coflows sort accord tenant coflow cannot involve sort guarantee bandwidth allocation assume tenant distribution coflows exist distribution remain coflows involve sort ascend completion hug distribution remain coflows cannot sort accord sequence finally obtain sequence merge distribution schedule coflow rearrange coflows ascend completion hug sequence assume tenant coflows therefore approach aggregate prioritize coflows super coflows super coflow coflows denote demand vector data coflow denote coflow transmit data uplink downlink fabric bandwidth allocate ramp function amount data transfer uplink downlink amount data transfer super coflow bottleneck link remain bandwidth link link respectively coflow transfer data rate calculate transfer data amount data transmission exhaust refer  rem algorithm summary entire image KB image explain tenant compete gbps link bandwidth allocate algorithm coflows tenant without cheat tenant coflow demand tenant coflow demand coflow demand assume tenant without cheat tenant honest coflows demand coflows determines duration transmission volume coflows allocates bandwidth coflows super coflow information schedule illustrate schedule tenant demand vector accord demand vector tenant bandwidth allocate tenant tenant hug obtain completion coflows hug sequence ascend completion duration transmission tenant accord sequence transmission tenant assign transmission coflows coflow tenant obtain coflows schedule priority finally sequence transmission volume allocate bandwidth coflows coflow schedule occupies entire link coflow consumes transmission coflow monopolize link link respectively sufficient transmission coflow completes link image KB image illustration without cheat respectively transmission priority coflows tenant without cheat    priority abc tenant priority coflow tenant obtains bandwidth completes coflow constrain transmission cannot transfer cheat tenant dishonest coflow tenant coflows coflows demand schedule coflows allocates transmission transmission priority coflows tenant cheat    priority BC coflow tenant priority completes coflow coflow tenant cannot data coflow coflow cheat moreover coflow coflow cannot prioritize bandwidth allocation priority fourth respectively tenant cheat scheduler completion coflow tenant cannot improve performance cheat effective guarantee performance ensures performance coflows coflow guaranteed later completion hug formally theorem theorem assume coflows tenant coflow define CCT hug respectively proof hug schedule coflows bandwidth coflows allocate coflow completes assume hug coflow respectively schedule coflows duration completion coflow hug coflow regardless schedule priority coflow accomplish theorem offline online implement easy generalization offline online schedule maintain information tenant coflows tenant coflow arrives departure insert remove correlate demand update trigger bandwidth redistribution amount data transfer tenant exhaust schedule tenant coflows update offline online algorithm detail image KB image coflow schedule hug analysis strategy proofness analyze strategy proofness strategy proof tenant cannot data transmit demand cannot obtain bandwidth restricts amount data transfer tenant suppose tenant transfer data increase allocate bandwidth duration accord calculate hug strategy proof tenant cannot extra bandwidth  demand tenant increase duration dominate duration coflow faster coflows tenant hug shorter duration contradict tenant expectation tenant duration amount data transfer tenant increase extends schedule tenant priority tenant bandwidth allocation tenant cannot promote duration prevent tenant occasionally succeed cheat monitor frequency completion coflows coflows submit tenant tenant coflows consecutive frequently decrease allocate bandwidth coflows cheat reduce frequency completion behavior characteristic tenant disappear eliminates restriction bandwidth allocation however tenant cheat coflows become constrain bandwidth reduce robin mechanism prevents tenant preempt bandwidth illustrate assume tenant network tenant initiate coflow tenant scheduler tenant coflow coflows prioritize accord ascend completion hug probability tenant allocate bandwidth assume tenant coflows sort accord robin mechanism priority tenant coflows priority coflow priority likely allocate bandwidth priority tenant priority tenant reduce prevents priority tenant constantly gain bandwidth summary tenant data transmit preempt bandwidth strategy proof evaluation evaluate extensive simulation realistic hive mapreduce trace production cluster facebook CCT performance outperforms strategy proof mechanism average CCT strategy proofness prevent tenant gain bandwidth cheat effectively ensure strategy proofness fairness fairly allocate bandwidth tenant granularity duration indicates isolation guarantee tenant parameter setting duration dynamic adaptive achieve performance fix parameter setting specifically completion coflows fix mode simulation setup platform topology evaluate  simulator coflow schedule scheduler hug utopia coflow scheduler DC fabric adopt simulation non switch ingres egress correspond uplink  rack workload  workload evaluation  contains trace production environment information coflows machine hive mapreduce cluster rack facebook coflows fabric mapper reducer rack combine rack mapper reducer accord width coflows category specifically coflow MB narrow constituent overall performance CCT performance slowdown slowdown coflow CCT achieve scheduler normalize minimum CCT alone specifically statistical CCT slowdown significantly improve CCT performance specifically reduces average slowdown percentile slowdown hug hug focus reduction CCT utopia varys significantly outperform performance closer utopia varys hug average slowdown evaluate performance CCT coflow average CCT SN narrow LN narrow SW LW coflows reduce average CCT SN LN SW LW coflows respectively hug besides reduce average CCT varys completion coflows allocate amount bandwidth image KB image statistical summary slowdown coflows bin width narrow coflow   average CCT coflows coflow  hug varys utopia strategy proofness evaluate strategy proof judging tenant improve performance cheat tenant cannot decrease CCTs cheat tenant cheat strategy proof strategy proofness scheduler metric normalize CCT normalize CCT define coflow within dishonest tenant scheduler CCT cheat normalize without cheat intuitively normalize CCT coflow within dishonest tenant faster tenant obtains loses benefit scheduler snapshot concurrent  tenant coflow CCT coflow within randomly tenant without cheat tenant cheat scheduler coflow MB demand average normalize CCT utopia varys coflow bin  completion coflows within dishonest tenant cheat bin  tenant abandon cheat ensure strategy proofness contrary utopia varys completion coflows respectively incentivizing tenant fairness evaluate fairly allocate bandwidth tenant calculate progress tenant progress tenant define progress indicates tenant data jain fairness index quantitatively progress fairness jain fairness index fairness index fairness index nearly granularity duration restricts amount data transmit tenant max min manner inside tenant preempt tenant therefore unfairness confine inside granularity duration fairly allocate bandwidth tenant parameter setting duration duration crucial performance effectiveness heuristic dynamically duration evaluate performance fix duration discussion tenant somehow coflow coflows coflow within hug tenant prioritize tenant coflows mostly cannot viability analysis theoretical attack viable coflow schedule tenant improve performance cheat dynamic scene tenant bandwidth prioritization allocate scheduler tenant cannot coflow coflows dominate allocation duration coflows completion calculate hug duration coflows coflows schedule however coflows extend completion coflows increase CCT actual coflow schedule coflow without cheat honest tenant coflow schedule completes coflow coflows dishonest tenant completes increase coflows duration shorten longer duration without cheat shorter duration possibility completion coflow approach completion coflow extend therefore attack image KB image illustration coflow schedule besides scenario dishonest tenant completes honest tenant dishonest tenant completes duration advance duration reduce coflows increase coflows schedule robin manner probability therefore rarely occurs coflows enormous datacenter prevent tenant occasionally succeed cheat monitor frequency completion coflows coflow submit tenant coflows tenant consecutive frequently decrease allocate bandwidth coflows cheat reduce frequency completion behavior characteristic tenant disappear eliminates restriction bandwidth allocation however tenant cheat coflows become constrain bandwidth reduce related cooperative environment coflow scheduler propose optimize CCT performance orchestra  improve average CCT fifo varys improves performance SEBF heuristic inter coflow schedule minimum allocation desire duration madd intra coflow schedule minimize completion coflows propose polynomial deterministic approximation algorithm   reduce average coflow completion combination rout schedule coflows unlike clairvoyant scheduler   coda MCS  schedule coflows without prior knowledge readily deployable coflow schedule scheme opportunistically exploit communication decentralize manner minimizes average CCT emulate conditional shortest  heuristic algorithm  coda  minimizes average CCT coflows across geo distribute datacenters jointly endpoint placement coflow schedule propose performance metric coflow CA coflows generate distribute application address minimize average CA simultaneously guarantee throughput requirement coflows  applies reinforcement technique information agnostic coflow schedule minimizes CCT automatically adjust threshold fai employ bottleneck aware schedule improves overall coflow performance accelerate bottleneck without prior knowledge non cooperative environment network scheduler propose allocate bandwidth tenant drf allocate bandwidth link max min manner  discus tradeoff proposes allocation policy hug variant hug developed optimal isolation guarantee network utilization however scheduler efficient CCT performance coflex attempt navigate tradeoff performance isolation tunable fairness knob utopia achieve optimal performance provable isolation guarantee aggregate coflows super coflow coflex utopia achieve CCT performance hug however strategy proof conclusion propose coflow scheduler non cooperative multi tenant datacenter network strategy proof reduce average CCT coflows prevent tenant gain bandwidth cheat employ multi schedule distributes amount data transfer tenant max min manner prioritizes coflow transmission tenant robin manner guarantee optimal isolation ensures overall bandwidth allocate tenant hug moreover dynamically adjusts duration significantly completion coflows trace driven simulation demonstrate significantly improve CCT performance