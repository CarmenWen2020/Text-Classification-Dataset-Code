advent internet internet device business application rapid increase variability transactional workload database replication employ performance improve availability relational database approach suffer various issue limited scalability performance versus consistency tradeoff requirement database application modification hihooi replication middleware achieve workload scalability consistency guarantee elasticity exist transactional database novel replication algorithm enables hihooi propagate database modification asynchronously replica ensure replica consistent grain rout algorithm load balance incoming transaction available replica consistent thorough experimental evaluation establish benchmark hihooi achieve almost linear workload scalability transactional database introduction recent explosion data development innovative data processing transactional arena google  spanner introduce handle massive amount data across datacenter boundary however majority transactional database TB excessive data scalability non requirement medium enterprise SMEs application tend rapid growth variability user consequently application workload due advent internet internet device therefore workload scalability ability handle increase workload demand elasticity handle variation workload critical exist database instance nosql technology mongodb cassandra explicitly address scalability elasticity requirement nosql sacrifice traditional consistency model familiarity sql hence cannot replace exist transactional database recently arisen  scalable performance nosql maintain acid guarantee traditional database  however highly optimize narrow  tune cluster analytics compromise related transaction workload handle capability  transaction java procedure finally evolution compute database service  offering amazon rds azure sql DB natively scalability elasticity model SMEs cautious adopt due associate rewrite application retrain employee privacy security concern typical approach exist database physical resource memory disk server upgrade server disk database cluster oracle rac apart expensive due hardware software licensing necessitate provision peak eventual volume alternative utilize approach reduce host database multiple commodity hardware server data partition sharding physical implementation database data partition across node approach improve scalability due distribute transaction expensive data migration extensive manual physical tune partition data effectively approach database replication increase performance availability database various requirement approach fully replicates data across node multi former replica transaction explicit synchronization mechanism serializable execution transaction replica executes concurrent transaction conflict abort limit scalability replication primary handle operation replica operation node handle workload linearly addition node challenge performance consistency overall hihooi replication middleware achieve workload scalability consistency elasticity transactional database exist database readily become hihooi deployment replication increase processing capacity increase throughput load across node decrease latency mask potential failure individual node improves availability middleware hihooi sits database client offering database mask complexity underlie replication neither database client modify popular  jdbc driver load distribution fault tolerance failure recovery handle hihooi novelty hihooi replication transaction rout algorithm hihooi replicates statement asynchronously applies parallel replica node ensure replica remain consistent primary grain transaction rout algorithm ensures transaction load balance replica maintain consistency semantics hihooi global snapshot isolation explain finally elasticity achieve easy remove replica cluster partly due architecture exist replication approach achieve hihooi aforementioned desideratum source replication database specific mysql cluster synchronous replication mechanism limit scalability postgres integrates replica kernel postgresql utilizes multicast primitive propagate operation replica allows replica execute transaction communication global commit database modification extract apply tuple modification finally  replication middleware hihooi applies serially replica coarse grain load balance transaction summary contribution database replication middleware architecture achieve workload scalability consistency statement replication algorithm apply writes parallel ensure consistent replica transaction statement rout algorithm execute transaction consistently efficiently extensive evaluation showcasing workload scalability attainable hihooi overview hihooi experimental evaluation related concludes hihooi overview hihooi replication middleware aim offering workload scalability consistency enterprise database hihooi employ replication popular technique improve performance transactional workload transaction categorize transaction query modifies database insert update delete sql statement transaction otherwise replication transaction node denote primary DB transaction node denote extension DBs primary DB handle writes propagates writes extension DBs efficiently linearly extension DBs however achieve dual goal scalability consistency introduces core challenge address choice hihooi challenge replica efficiently consistently propagate update primary DB extension DBs ensure transaction extension DB consistent database replica reflect transaction consistent snapshot data primary DB replica reflect data modification transaction transaction execute primary DB execution retain global consistency hihooi capture transaction completion primary DB utilizes statement replication statement replicate extension DBs ensure replica applies writes statement replication asynchronously avoid delay transaction execute primary DB conventional database replication standby deployment apply writes serially parallel heavily load production however lag node become significant hihooi implement novel algorithm apply transaction parallel maintain consistency guarantee asynchronous propagation parallel execution writes extension DBs described challenge concurrency efficiently consistently route transaction extension DBs middleware layer application database hihooi intercept incoming transaction tasked rout primary DB extension DBs transaction execute primary DB hihooi safely route query tactic however primary goal hihooi performance maximize query distribute available extension DBs issue extension DBs date primary DB due asynchronous propagation transaction extension DBs hence hihooi efficient approach extension DBs consistent incoming query employ hihooi consists incoming query hihooi utilizes custom parser primary equality predicate potentially modify query access query hihooi transaction apply extension DBs along transaction currently primary DB hence hihooi recognizes date extension DBs finally hihooi employ novel lightweight algorithm query consistency execute extension DBs multiple extension DBs execute incoming query hihooi perform load balance query load extension DB hihooi middleware query multi statement transaction consistent extension DB route request primary DB overall query interception rout approach detailed challenge backup scalability management efficiently extension DB consistent backup quickly date perform backup standard management operation database recovery failure replicate database hihooi important backup extension DBs without affect performance primary DB exist extension DBs hihooi periodically creates backup DB aware exactly transaction backup execute properly synchronize extension DB extension DB clone DB node execution transaction creation backup synchronize extension DB transaction execute primary DB hihooi already allows extension DBs smart query rout algorithm execute query correctly enact global barrier ensure consistency instead extension DB initial transaction execute execute transaction concurrently apply transaction backup scalability management procedure described architecture depicts hihooi architecture along core component transaction middleware hihooi application database custom hihooi jdbc  driver implement hihooi api database independent connectivity application hihooi approach database driver replace application application code internally hihooi jdbc driver interact underlie database execute query manage replication scene hence hihooi couple database multiple vendor currently hihooi multiple version concurrently important database update heterogeneous future finally  interactive console application configure manage hihooi remove replica checkpoint execute query hihooi architecture hihooi architecture transaction manager responsible intercept query sort transaction transaction execute primary DB transaction load balance consistent extension DBs apart manage client session transaction manager oversees available extension DBs transaction apply transaction completes via commit rollback transaction statement transaction buffer  memory memcached transaction buffer highly available fault tolerant propagation medium database modification apply asynchronously extension DBs extension DB node host hihooi service extractor delivery agent extractor responsible fetch transaction transaction buffer apply local database extractor implement novel algorithm execute transaction parallel respect impose transaction commit timestamps primary DB delivery agent responsible execute query rout local extension DB deliver incrementally client request avoid execution bottleneck transaction manager archiver dual role hihooi responsible initiate incremental backup DB primary DB transaction backup hence DB consistent checkpoint primary DB archiver periodically transaction apply extension DBs transaction buffer local persistent archiver buffer memory usage transaction buffer bound extension DB initialize DB application appropriate transaction archiver buffer extension DB notifies transaction manager query apply transaction buffer finally  coordinate management operation remove extension DBs  replication hihooi intercept redirects incoming transaction transaction modify database primary DB execution transaction completes primary DB propagate execute extension DBs preserve completion primary DB explain statement propagation replication procedure introduce notion transaction finally discus benefit practical consideration approach transaction transaction naturally multi statement sql statement transaction database sql statement statement transaction default commit automatically completes execution multi statement transaction statement automatic commit disabled commit manually enclose specific keywords atomic hihooi convention presentation discus statement transaction generalization multi statement transaction transaction modify database instance define respectively transaction modify respective correspond transaction affect effectively parallelize execution transaction extension DBs route transaction efficiently suppose execute primary DB commit execute extension DBs ensure consistency replica scenario modify execute parallel commit reverse execute completion modifies preserve consistency transaction along correspond affect transaction identifier TSIDs transaction underline underline along correspond affect transaction identifier TSIDs operating constitutes coarse grain mechanism conflict transaction hence define granularity transaction denote transaction update similarly disjoint hence modify modify execute parallel without affect consistency finally transaction denote primary PK equality predicate instance transaction update primary whereas deletes concurrently without affect consistency restrict primary equality predicate identify query parser efficient alternative complex query semantics overhead potentially outweigh performance benefit concurrent execution defer thorough investigation tradeoff future formalizes creation fundamental relational algebra operation operation project union difference cartesian aggregation access respectively operation conjunctive equality predicate primary unique non empty insert delete update operation insert delete operation modify update operation refer modify primary unique applicable finally operation item access involve expression sql statement along correspond definition relational algebra operation definition relational algebra operation transaction along correspond affect consistent transaction identifier TSIDs transaction underline underline along correspond affect consistent transaction identifier TSIDs scope sql statement affect categorize affect affect statement RAS modifies access affect statement CAS modifies access affect statement TAS modifies access definition utilized algorithm later affect transaction aforementioned definition easily extend multi statement transaction simply union individual sql statement applies affect apply statement RAS RAS statement CAS CAS otherwise TAS finally ddl statement handle TAS statement statement replication procedure transaction intercept hihooi transaction tstate built maintain transaction manager tstate contains tstate identifier tsid uniquely identifies sql statement execution statement overall execution primary DB completion operation commit rollback replication fail transaction explain tsid generation tsid unique sequential tstate commits rollback primary DB purpose TSIDs capture transaction completion primary DB transaction commit timestamps underlie database ensure transaction manager TM performs completes TM obtains commit timestamp commit timestamps concurrent transaction issue commit request response TM issue TSIDs transaction commit timestamps typically timestamp simply receives tsid occasionally commit response percent intensive due multi thread schedule TM network delay hence procedure ensure TSIDs induced commit timestamps tstate tsid fetch replayed extension DBs practical issue resolution statement replication practical issue resolution statement replication extension DB node host extractor service responsible  transaction buffer execute local extension DB goal extractor ensure local database replica consistent primary DB execute transaction  serial impose TSIDs sufficient achieve consistency however inefficient extension DBs significantly primary DB load parallel execution primary DB hence crucial extractor execute parallel transaction maintain consistency semantics allude transaction backbone parallel execution algorithm specifically transaction transaction affect data item database algorithm affect item independent transaction disjoint independent modify otherwise modify transaction commonly modify transaction belong CAS affect modify independent similarly transaction belong RAS affect modify independent transaction independent execute concurrently algorithm independence transaction function  return bool independent false CAS CAS col col col col independent RAS RAS independent independent false return false return function notation union important definition cumulative union multiple statement multi statement transaction semantics explain combine multi statement transaction parallel transaction statement multi statement transaction suppose transaction execute extractor define transaction merge meaning currently modify combine allows avoid transaction independent currently transaction instead transaction independent combine transaction algorithm function constitute parallel execution algorithm employ extractor transaction extractor impose primary DB execution transaction tsNew extractor independent combine already transaction respectively tsNew execute parallel already transaction merge transaction otherwise tsNew queue update important tsNew transaction conflict indicates already transaction modify data item tsNew affect suppose transaction execute extension DB transaction execute parallel modify queue conflict independent transaction independent hence queue parallel modifies transaction completes execution remove queue iterate transaction independent transaction submit execution completes execution execute algorithm parallel transaction execution extension DBs  combine transaction  combine transaction  fifo queue transaction function  tsNew   tsNew   tsNew  merge tsNew execute tsNew  merge tsNew  enqueue tsNew function function    remove       peek   dequeue  remove   merge  execute  function refer internally implement hash data item counter query statement access data item addition maintain separately per database hash facilitate algorithm merge transaction straightforward correspond underlie hash merge hash associate counter otherwise entry simply deletion transaction previously merge involves decrease counter counter zero correspond entry delete hash hence operation efficient implement finally extractor responsible notify transaction manager apply tsid sequential without gap suppose transaction completes tsid report completes report completes TSIDs report hence transaction manager aware transaction replayed extension DB sequential information hash extension DBs apply tsid benefit practical consideration statement replication hihooi employ statement replication ensure consistency replica replicates executes statement extension DBs alternative approach replication entail capture modify primary DB replicate extension DBs achieve replication integrate middleware underlie database extract limit ability middleware database version another declare trigger extract modification complex mechanism apply replica serious drawback performance overhead introduce primary database multiple trigger execution hihooi avoids aforementioned limitation replication statement replication hence capable multiple unmodified database prevent unnecessary overhead primary DB addition update delete statement affect multiple efficient replicate sql statement propagate replica finally capture statement basis extract improve performance replication query rout procedure practical issue concern statement replication arise due non deterministic query query execute database statement replication execution statement primary DB extension DBs however sql statement legitimately replica reference sequence timestamp invoked non deterministic function rand hihooi resolve issue perform query rewrite submit query execution replicate fail transaction practical issue along hihooi resolution implementation currently hihooi non deterministic procedure trigger concurrency explain transaction execute primary DB sequential tsid upon completion replicate extension DBs extension DB consistent replicate transaction transaction tsid execute primary DB transaction safely rout primary DB consistent extension DB execution however asynchronous replication transaction extension DBs lag primary DB extension DBs scenario transaction extension DB become consistent redirect primary DB option introduces latency delay transaction increase load primary DB performance scalability suffer hihooi implement novel transaction rout load balance algorithm utilizes transaction extension DBs consistent primary DB route transaction extension DB access modify transaction execute extension DB hihooi perform finer grain load balance individual statement within multi statement transaction extension DBs knowledge hihooi replication middleware statement rout respect transaction boundary maintain consistency transaction load balance goal transaction load balance transaction extension DBs consistent primary DB regard data transaction access achieve efficiently hihooi access access transaction date extension DB former achieve transaction latter TSIDs transaction hash index maintain transaction manager hash index separately mapping transaction modify hence index transaction replica consistent regard specific algorithm update transaction manager hash index execute transaction function    tsid TAS CAS   col tsid RAS   tsid function transaction completes update index algorithm reference hash index  mapped transaction identifier tsid action indicates transaction update modification index depends affect TAS CAS hash index  mapped tsid otherwise hash index  mapped tsid entry  apply replica periodically prune index bound transaction execution primary DB content hash index entry index tsid modify item modify transaction tsid modify tsid content hash index execute transaction content hash index execute transaction transaction load balance extension DBs consistent incoming transaction algorithm index tsid transaction modify data item access access utilize affect algorithm assume modify TAS access lookup  tsid CAS access specific lookup  tsid  tsid affect modification potentially modify finally RAS access specific lookup   overall return tsid lookup across ensure consistency extension DB replicate tsid execute algorithm consistent tsid transaction transaction manager function  tsid  contains skip iteration TAS tsid max tsid  lookup CAS tsid max tsid  lookup col tsid max tsid   RAS tsid max tsid  lookup tsid max tsid  lookup col return tsid function transaction along consistent tsid index content transaction access relevant modify transaction tsid hence execute extension DB apply transaction tsid statement load balance replication dictate transaction modify database multi statement execute however multi statement transaction sql statement execute primary DB potentially execute extension DBs without violate atomicity consistency constraint hence increase scalability entire premise statement within multi statement transaction independent precede statement safely execute consistent extension DB premise serializable execution snapshot isolation default consistency hihooi consistent snapshot database algorithm efficiently independence consistent extension DB respectively statement execute primary DB transaction manager extractor described statement arrives hihooi independent recall algorithm algorithm consistent tsid available extension DBs execution independent previous writes consistent replica execute primary DB consistency database postgresql oracle DB snapshot isolation SI enforce consistency SI transaction operates data snapshot transaction without similarly database replication research focus SI variant generalize SI SI weak SI hihooi SI database replica illusion SI database client hence global snapshot isolation  concept introduce formalize notion  replicate develop proof hihooi accord SI introduce assigns transaction timestamp execution perform operation data snapshot commit data writes perform transaction commits visible writes perform transaction commits visible SI transaction writes writes operation assign commit timestamp recent commit timestamp assign transaction commits transaction commit lifespan modify data otherwise aborted prevent lose update transaction concurrent lifespan interval overlap accord definition SI actual hence snapshot earlier timestamp necessarily relaxed version SI weak SI SI transaction commit transaction guaranteed commit database snapshot database database postgresql research prototype SI finally qualifier global indicates definition SI applies distribute individual database replica summarize transaction replicate database satisfies global SI commit transaction satisfy operation transaction database commit operation data concurrent transaction modify data database theorem underlie database replica guarantee SI hihooi guarantee global SI proof transaction execute hihooi transaction satisfy global SI suppose transaction execution hihooi algorithm tsid transaction modify data access recall rout extension DB replicate tsid guarantee relevant extension DB rout primary DB date SI transaction execute primary DB transaction execute primary DB primary DB guarantee SI locally operation database statement load balance recall statement independent precede statement rout extension DBs rout algorithm transaction statement relevant explain statement access data previous statement primary DB hence data transaction execute primary DB SI concurrent transaction modify data commit successfully primary DB extension DBs transaction modify data concurrently per algorithm recall independent transaction execute parallel extension DBs guarantee concurrent transaction modify data database replication rout mechanism hihooi additional consistency granularity database session weak SI transaction asynchronously execute extension DBs transaction extension DB regardless consistency replicate SI primary rsi PC transaction asynchronously execute extension DBs transaction extension DB fully consistent primary DB none available rsi PC another  implement middleware  serializability SR transaction synchronously execute extension DBs transaction extension DB SR default consistency middleware jdbc scalability management perform backup remove extension DBs important management operation ensure hihooi fault recovery scalability explains operation discus enable future automate backup elasticity management backup fault recovery hihooi backup enable recovery failure efficient addition extension DBs avoid building complex backup recovery procedure various database manages hihooi exist backup utility specific implementation overall utility checkpoint database associate tsid commit transaction backup DB incremental postgresql equivalent restore backing data oracle equivalent perform online backup replay redo checkpoint consistent backup database transaction contains DB creation transaction modify primary DB transaction buffer archiver periodically transaction apply extension DBs archiver buffer text file memory transaction buffer bound addition DB creation archiver permanently remove archiver buffer transaction already DB primary DB failure transaction buffer replayed DB node workload transfer DB standby node archiver fails archiver buffer lose recreate DB resolve issue reset archiver buffer DB becomes date primary DB transaction manager TM transaction  transaction buffer transaction execution primary DB recall however  delete TM apply extension DBs greatly simplifies recovery potential transaction buffer failure guarantee  lose transaction buffer fails extension DBs update transaction consistent database upon recovery transaction buffer  TM transaction buffer apply extension DBs parallel failure TM sever connection primary DB typically abortion active transaction failure TM launch backup node retrieves previously active  transaction buffer primary DB status commit transaction primary DB reflect  transaction buffer TM rebuilds internal resume operation extension DBs notify client switch TM otherwise transaction commit primary DB TM fail correspond  transaction buffer DB incrementally primary DB apply extension DBs resume normal operation concurrent failure TM transaction buffer remove extension DBs addition extension DB involves replication DB node parallel execution transaction archiver buffer procedure described afterwards extension DB fully consistent primary DB register transaction manager consistent request apply transaction transaction buffer hence addition replica hihooi global synchronization barrier resource active replica extension DBs remove variety maintenance operation insufficient workload justify presence failure extension DBs transaction client complicate failure mechanism client perspective transaction manager notify detects removal extension DB simply route transaction consistent extension DBs application transaction transaction buffer extractor transaction node transaction replayed towards replica management extension DB depends replicate DB extension DB node plus execution transaction archiver buffer former easily calculate entail bulk transfer latter compute execution transaction tstate hence hihooi accurately model estimate replica synchronization model decision frequently backup bound guarantee deploy extension DB ability remove replica without service interruption addition accurately model towards autonomic middleware replicate database recent database workload monitoring characterization development elasticity policy automatically remove node actual workload another future direction integrate hihooi extend resource available host replica finally technology virtual machine migration clone backup launch extension DB node experimental evaluation purpose evaluation evaluate performance scalability workload consistency grain statement replication rout algorithm evaluate management fault tolerance feature hihooi node cluster centos linux primary DB DB extension DBs client node client transaction manager primary DB node backup archiver DB node transaction buffer active extension DB node primary node core ghz cpu GB ram TB hdd storage node core ghz cpu GB ram TB hdd storage evaluation benchmark employ workload tpc standard OLTP workload complex intensive transaction ycsb yahoo benchmark collection web micro benchmark data management application workload scalability  CH benchmark workload combine OLTP tpc olap tpc tpc database  warehouse GB ycsb database  GB data database fully replicate extension DBs postgresql version node unless otherwise trial precede OLTP bench benchmark transaction load inject client per extension DB continuously issue transaction OLTP workload scalability effectiveness efficiency hihooi OLTP workload throughput latency increase extension DBs comparison along dimension workload balance consistency weak SI hihooi rsi PC SR recall weak SI upper limit performance consistency guarantee achieve rsi PC  middleware replication rout algorithm hihooi boast SR jdbc synchronous replication tpc balance workload percent statement respectively generate via tpc multi statement transaction throughput rate commit transaction per workload consistency workload linearly replica increase throughput extension DBs writes perform difference consistency trend exception SR replica replica apply modification subsequent percentage writes increase workload scalability naturally suffers consistency writes execute primary DB consistent replica nonetheless hihooi comparable performance weak SI throughput rsi PC SR respectively composition tpc workload composition tpc workload OLTP workload scalability tpc workload consistency throughput rate workload consistency ycsb ycsb workload zipfian distribution theta unmodified query tpc ycsb workload exhibit almost perfect linear scalability workload consists percent insert percent scan query per balance workload consists percent percent insert weak SI hihooi achieve linear scalability rsi PC SR balance workload observation insert ycsb faster  delay execution insert propagate replica hihooi rout algorithm excels enables route transaction replica fully consistent primary DB consistent finally workload consists percent percent update per demand workload throughput scalability suffer nevertheless hihooi performs considerably rsi PC SR OLTP workload scalability ycsb workload consistency OLTP workload scalability ycsb workload consistency average latency transaction across workload tpc ycsb workload increase latency replica increase due efficient load balance query replica however writes introduce balance workload replica increase average latency weak SI percentage workload primary DB focus hihooi increase latency replica increase overhead due replication conversely rsi PC SR increasingly latency workload due explain hihooi latency comparable weak SI almost due grain transaction rout capability average latency tpc ycsb workload consistency average latency tpc ycsb workload consistency OLTP olap workload scalability execution olap query transactional database motivate scenario database replication evaluate olap workload scalability hihooi OLTP workload OLTP client node executes  transactional workload olap client node submit  analytical query default hihooi consistency  trend olap workload sub linearly OLTP exhibit negative impact worsens replica increase percent olap query execute primary DB due conflict however olap workload typically consistency weak SI olap workload  OLTP reveal linear  olap workload almost overhead OLTP highlight benefit hihooi mixed OLTP olap workload scalability  mixed OLTP olap workload scalability  affect query statement modify access data granularity namely capture definition TAS CAS RAS respectively recall percentage TAS CAS RAS statement workload benchmark tpc workload contains statement percentage TAS increase workload becomes ycsb workload significant RAS CAS statement percentage TAS CAS RAS statement percentage TAS CAS RAS statement hihooi increase granularity configure TAS TAS CAS execute tpc ycsb workload hihooi extension DBs reveal benefit utilize CAS RAS workload benefit workload relatively replica almost consistent primary DB typically load balance regardless affect portion workload increase opportunity hihooi route statement access modify evident ycsb balance workload significant RAS statement hence hihooi exploit RAS overall throughput increase percent tpc complex transaction benefit CAS RAS percent average latency trend throughput due constraint finally memory overhead hash index maximum KB TAS CAS RAS TAS CAS RAS parallel replication algorithm  performance implication parallel replication algorithm recall approach executes transaction serially replica approach impact throughput tpc workload writes apply replica tpc contains TAS RAS statement amenable parallelism actual parallelism apply writes depends submission writes portion data apply indicative average balance workload extension DBs percentage writes increase balance workload parallel algorithm profound throughput serial version enables extension DBs consistency quicker hence available performance workload extension DBs writes generate concurrently client overload primary DB weak SI experienced performance hihooi parallel replication algorithm tpc hihooi parallel replication algorithm tpc extension DBs corresponds processing workload node without replication difference extension DBs reveals overhead incur hihooi intersect transaction typically percent percent across due constraint workload hihooi effective execution writes primary extension DBs respectively aggregate throughput statement load balance novel aspect hihooi ability route individual statement consistent replica within multi statement transaction evaluates statement versus typical transaction load balance route statement transaction primary DB throughput average latency tpc workload execute hihooi extension DBs transaction statement load balance percent writes increase benefit statement load balance throughput percent latency transaction load balance benefit attribute extra statement divert extension DBs specifically workload transaction algorithm route percent primary DB consistent extension DBs multi statement transaction contrary statement algorithm route percent primary DB remain load balance extension DBs overall multi statement transaction hihooi opportunity divert extension DBs increase parallelism therefore throughput statement load balance tpc remove extension DBs explore scenario remove extension DB balance ycsb workload hihooi client extension DBs remove extension DB simulate failure maintenance operation transaction execute extension DB fail transaction manager automatically rerouted replica hence hihooi continued workload without issue albeit percent throughput average latency restore extension DB throughput rate return normal quickly extension DB restoration due grain rout algorithm apply outage transaction memory transaction buffer MB procedure serial replication approach throughput average latency entire extension DB highlight benefit parallel replication algorithm ycsb throughput remove extension DB ycsb throughput remove extension DB transaction buffer failure recovery investigate behavior hihooi failure recovery transaction buffer balance ycsb workload hihooi client extension DBs induced failure transaction buffer extension DBs update however hihooi incoming workload without query failure extension DBs amount transaction execute decrease ycsb workload skewed recent item transaction rout towards primary DB throughput unaffected failure due asynchronous replication procedure overall throughput experienced slowdown percent recover transaction buffer transaction accumulate transaction manager MB transaction buffer extension DBs apply parallel overhead recovery percent decrease overall throughput workload return pre failure hihooi gracefully handle transaction buffer failure ycsb throughput transaction buffer failure ycsb throughput transaction buffer failure comparison postgresql replication postgresql replication database server executes transaction standby replica execute query postgresql replicates database modification via wal replica employ replication replication asynchronous default data standby eventually consistent primary postgresql cluster  II connection pool load balance query replica setup  II postgresql replication local cluster performance hihooi throughput average latency ycsb balance workload execute  II hihooi replica increase throughput replica fashion negative impact average latency nonetheless hihooi percent throughput percent latency  II across hihooi performance attribute parallel replication algorithm postgresql applies wal serially grain rout algorithm  II load balance multi statement transaction  II versus hihooi ycsb balance workload  II versus hihooi ycsb balance workload related database replication primary handle writes replica multi replica writes implement inside database kernel outside middleware layer former approach opportunity various optimization tight couple concurrency replica heavily invasive database specific middleware approach employ hihooi seamless separation concern unmodified database application enable heterogeneous environment postgres multi replication communication primitive enable scalability   later version snapshot isolation SI middleware extension postgres communication outside database database modification extract apply tuple update rely communication primitive SI  SI rep jdbc multi middleware database modification jdbc driver hihooi consistency guarantee lock middleware  upon database modification middleware transaction delegate replica replica consistent primary middleware  access transaction enable efficient schedule middleware execute transaction primary replica extract lock concurrency information enforce transaction schedule replica prevents conflict schedule unlike hihooi underlie database strict phase lock cannot handle snapshot isolation widely  middleware instead transaction middleware layer replica becomes consistent contrary hihooi transaction transaction replica primary DB consistent transaction hihooi replication middleware grain statement rout within multi statement transaction  II another postgresql specific replication middleware applies wal entry replica  II   apply database modification serially replica oppose hihooi applies parallel another hihooi differs architecture memory distribute storage statement replication rely command propagation complex communication protocol transaction buffer highly available propagation medium database modification apply asynchronously active replica improve network load distribution simplify recovery procedure amazon aurora architecture decouples compute storage employ primary replication achieve aurora physical replication redo replayed replica physically identical primary approach however cannot exist node database unlike hihooi   abstraction replicate memory data structure leverage enable transaction across shipping primary former synchronous writes avoids concurrency issue reading replica relies presence infiniband NVRAM efficient latter replay approach target scenario primary backup replication backup instead multiple replica  primary backup replication concurrent replay construct utilize graph dependency unlike hihooi relies solely TSIDs operation backup  introduces barrier transaction snapshot consistent primary unlike hihooi barrier commercial cluster oracle rac ibm DB  rely specialized hardware network attach storage hence unlike approach cannot easily instal commodity server finally database replication oracle golden gate exist weak consistent reporting disaster recovery data partition another popular approach partition distributes data across cluster node approach amenable dynamic via migrate data exist node diminish performance issue due skew load  migrates data coarse predefined granularity whereas clay finer tuple granularity aforementioned approach perform data migration detect performance issue whereas another elastic OLTP DBMS focus workload prediction proactive migration scalability hurdle data partition approach transaction span multiple partition lock specialized protocol non existent issue hihooi transaction access database finally issue dynamic orthogonal approach something future conclusion replication middleware hihooi workload scalability exist database without sacrifice consistency parallel replication algorithm allows extension DBs consistency quicker rout algorithm avoids delay rout statement consistent replica hihooi research towards automate elasticity creation offering