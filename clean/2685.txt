dependent network consume complexity dependent function vertex SSFP fix departure ISFP interval selects departure interval FPP profile return entire domain aim query dependent network faster extend hop label approach shortest distance query static graph however construct index SSFP ISFP interval domain therefore propose dependent hop label FPP specific optimization SSFP ISFP query moreover consume index dependent graph partition network sub graph index within partition furthermore propose online approximation technique dijkstra compression reduce label construction speedup query network approach outperforms index approach query introduction development gps technology mobile network traffic easy obtain google feature google traffic display traffic highway analyze gps location transmit google mobile phone user gps navigator  traffic data decade traffic prediction feature addition approach application developed infer traffic driver trajectory data traffic information measurement planning distance another become essential query wider application planning information disease metabolic pathway analysis   within shortest static dependent function departure besides vertex departure departure categorize SSFP ISFP interval FPP profile SSFP departure input arrival vertex fix actually therefore complexity dijkstra extra retrieve function departure becomes interval becomes ISFP optimal departure function source destination instead complexity bound grows function function extend departure interval entire domain FPP useful bulk query fundamental query traffic analysis FPP generalize query SSFP ISFP unfortunately ISFP therefore aim speedup query additionally denote FPP throughout FPP essentially widely explain furthermore dependent function fifo forbids overtake classify exist approach index construction query index illustrate classification applies reachability query distance query static graph extreme compute vertex exist algorithm directly consumes extra index however  normal network vertex foundation application extreme query retrieve precomputed approach applicable static graph due unrealistically preprocessing quadratic index mention therefore technique propose query online fashion static version bidirectional augments alt dependent CH tch expands CH dependent   extends arc flag CH core alt combine landmark bidirectional contraction however approach traverse graph consume although achieve query conduct histogram profile constrains fix query easy faster linear piecewise function widely algorithm nevertheless benefit shorter construction index comparison approach aim query faster advantage hop label assign label vertex distance information vertex static hop label shortest query label however exist extend dependent scenario due challenge achieve minimum label static graph already NP another temporal dimension definitely harder dependent index linear piecewise function already online approach away histogram profile moreover unlike static version shortest vertex fix another hop instead therefore query longer minimum construct minimum function function impossible specialized index SSFP ISFP departure SSFP departure interval ISFP domain although FPP query efficiency largely affected unrelated interval distance ISFP query dijkstra faster FPP index dependent graph label label similarly label suppose query label label intersection label correspond function illustrate compute function via return minimum function depart via depart around via depart later via combination FPP SSFP interval ISFP dependent hop label dependent hop label important notation important notation dependent graph graph linear piecewise function domain dependent graph graph linear piecewise function domain label function label function function via hop propose dependent hop label THop approach query efficiently partition network subgraphs label label disk index retrieval sample prune demonstrate THop SSFP ISFP FPP efficiently furthermore propose approximate dependent dijkstra dijkstra technique faster construction compression reduce label extensive network profile query construct online approach tch  linear piecewise function approach outperforms contribution propose disk dependent hop label approach query linear piecewise function propose correspond query technique SSFP ISFP FPP propose approximation approach dijkstra technique faster construction compression index query thoroughly evaluate approach extensive network linear piecewise function profile approach outperforms extends introduce THop however query SSFP ISFP FPP construct FPP derive SSFP ISFP SSFP directly inter partition environment specialized FPP query extend THop query efficiently min min function hop lbrace rbrace hvs dash input solid output fvs min function hop hvs dash input solid output fvs continuous dependent hop label construction dependent query dependent query index load optimization approach ISFP blank rectangle load function shade rectangle actual useful retrieve function index load optimization approach ISFP blank rectangle load function shade rectangle actual useful retrieve function inter partition SSFP boundary computation comparison departure intra ISFP inter ISFP index construction inner subgraph query speedup network query speedup SSFP ISFP query speedup organize discus related defines correspond notion construct hop label graph partition describes label utilized FPP SSFP ISFP efficiently approximation evaluate conclude related technique speedup technique reachability shortest distance query dependent online speedup technique extend static version query dependent graph category approach apply augmentation static version bidirectional augments landmark alt apply landmark bound graph bound correspond function although correctness guaranteed bound loose approximation dependent graph effectiveness weak extends arc flag counting important therefore unlike arc flag approach label besides consume construct applies approximation preprocessing dependent CH expands CH shortcut within category approach combine previous core alt combination dependent landmark bidirectional CH  combination tch arc flag obvious speedup approach apply extension dependent scenario project dimension static graph dependent graph treat denser static graph technique apply directly although query adapt dependent version speedup performance limited static structure temporal information discard vertex longer preprocessing although query finally online approach actually prune strategy graph query hop label hop label originally propose shortest distance reachability query efficiently static graph hop label pre compute label vertex query label involve vertex undirected graph vertex label dvi shortest distance dvi shortest distance query vertex exist selects dvs  derive hop label minimal NP approximate algorithm return label optimal bound propose label faster however graph highway centric label inspire highway structure network exist online approach vertex highway vertex query constant hop convert distance source vertex entry highway distance entry exit distance exit destination label graph independent graph hierarchical structure distance information preserve vertex hierarchy construction vertex generate directly hierarchical structure vertex vertex attach label vertex prune label mainly focus undirected unweighted graph bfs vertex label incrementally distance vertex exist label expand label compress query processing index construction hop unweighted graph constraint vertex betweenness centrality approximate derives effective vertex naturally approximation proposes  constraint shortest although spirit dijkstra  aim prune dominate upper bound complies csp reduce dependent function approximation bound preliminary dependent network dependent network graph vertex function mapping dependent domain amount arrival departure dependent sum departure  dependent network define definition SSFP dependent graph query departure SSFP minimal  network naturally fifo overtake ensures vertex increase intermediate vertex essential minimize extend departure departure interval ISFP aim optimal departure definition interval ISFP dependent graph query departure interval ISFP minimal  extend departure interval domain minimum function fvs departure definition profile FPP dependent graph query FPP compute minimum function fvs fvs min definition dependent graph construct index SSFP query ISFP query FPP query dependent hop vertex pre compute label label lout fvi label lin  hop vertex fvi return minimal departure lout lin denote label query dependent hop minimum function query return fvs label min fvs min fvs fvi min fvi fvs fvs hvs lout lin SourceRight click MathML additional feature exists label label hop vertex query hop vertex hvs compute minimum function via fvs concatenation operation dependent function compute fvs fvs fvi fvi fvs min function fvs input combine function sub interval minimum function fvs input function others min min operation label construction within minimum function fvs denote vertex along via hop hop lin lout dependent hop label construction construct dependent hop label static hop label index construction grows graph becomes therefore label organize partition fashion network partition vertex disjoint subgraphs label construct within subgraphs partition graph construct label within subgraphs finally correctness analysis graph partition input graph partition vertex disjoint subgraphs subgraphs boundary vertex boundary vertex graph partition exist implementation approach boundary vertex vertex boundary construct THop differently boundary vertex boundary THop hop boundary vertex information compute graph vertex belong subgraph construct THop subgraph boundary vertex contains subgraph label construction understand construction procedure demonstrate naive suppose vertex intuitively source fvi vertex another reverse backward  vertex   denote label  suppose  obtain label minimum function  therefore update label   meanwhile reverse backward minimum function  correspondingly update label   procedure vertex algorithm dependent hop construction input output label FM  label FM fvi  queue empty queue pop  FM fvi fvi  FM min FM fvi queue update backward label FM skip  FM BM skip iout BM return obviously approach exactly pre computation generate hop query correctly however inefficient construction label therefore apply prune approach reduce reduce construction denote ith prune suppose label vertex obtain function  query obtain intermediate function min    dominate query  prune  prune strategy applies reverse backward demonstrate procedure algorithm demonstrates index construction dependent graph vertex behavior prune prune backward skip vertex denote vertex denote dominate exist THop label update vertex hop exists stage nearly vertex label backward skip exists label remain procedure obvious latter earlier construction apply subgraph boundary vertex already boundary label reside inside subgraph boundary via another boundary therefore exist boundary label capture information boundary label construction boundary label construction boundary vertex vertex subgraphs involve subgraphs pas therefore boundary vertex naturally hop vertex although boundary vertex subgraphs consumption boundary vertex longer within subgraph longer straightforward approach construct label directly sub graph however actually entire graph meanwhile consumption tolerate moreover iteration parallel prolongs construction therefore boundary THop construction phase parallel construction phase prune phase phase advantage multi thread technique compute boundary parallel origin boundary vertex disk obtain boundary vertex prune phase load predefined prune described denote processing ith boundary vertex suppose  label load  fvd dominate query safely otherwise dependent hop boundary vertex correctness analysis dependent hop subgraph correctness boundary partition easily extend lemma instance hop lemma dependent hop proof index fvs  fvs  therefore   contains fvs fvs function fvs dependent hop dependent hop label iteration capability theorem theorem proof math induction iteration suppose suppose minimum function query label return otherwise simply ignore query hop label exactly mention function vertex hvs function fvs hop vertex query correspond although minimum function interval within vertex along fix suppose vertex iteration creates otherwise replace proof obviously fvs  lin fvs  exist prune respectively fvs    vertex along interval label  hth iteration label insert hth   source vertex along inner vertex hop vertex hop vertex  hop vertex exists along label cannot return  therefore cannot dominate   hth backward fvs exists  symmetrically safely conclusion prune approach approach corollary label construct dependent hop theorem remove hop vertex dependent hop proof suppose remove fvs directly fvs cannot dominate fvs otherwise fvs hth iteration label earlier construction therefore label sth iteration dominate fvs incomplete dependent hop complexity analysis refer query processing label query query situation partition inner label subgraph query directly partition decompose query component boundary vertex gbi boundary gbi boundary GBj GBj concatenate construct intra partition inter partition FPP query processing basis label construction query dig query optimization SSFP ISFP FPP query intra partition FPP query straightforward hop hvs hash retrieve hop vertex hvs lout lin min lout lin lin lout return hop function query directly guaranteed minimum function otherwise construct function fvs concatenation operation fvs fvi fvi fvs hvs fvs generate min fvs therefore query approach hvs average linear piecewise function fvs however acceptable index subgraph memory unrealistic index subgraphs boundary index disk moreover hop cannot contribute minimum function waste concatenate consume load disk therefore index organize disk query prune unnecessary IO computation label file consists index hop sample function index address vertex disk retrieval hop label IDs vertex sample approximation hop function function interval minimum maximum function actual dependent function inner index retrieval utilize structure reduce query disk involve structure query procedure illustrate hop vertex maintain memory query issue hop obtain candidate hop hvs previous approach load sample correspond hop disk dimensional sample vector jth minj maxj minj fvs minj fvi minj maxj fvs maxj fvi maxj sample vector minimum correspond maximum compute function hop dominate therefore skyline vector hvs denote hop fvs min fvi min minimum heap lowerbound actual function hop retrieve hop maximum fvs max fvs max return fvs hop remain heap fvs update fvs otherwise actual dependent function concatenation update temporal fvs minimization label construction phase query related subgraph temporal index memory memory query procedure without IO finally analyze query average label vertex query hop vertex obviously hvs min hop vertex concatenate minimize therefore inter partition FPP query inter partition FPP query inner query gbi GBj boundary query gbi GBj FPP query entire domain input query independent input interval constraint output therefore parallel query combine obtain query gbi query boundary vertex gbi obviously query parallel actual query query subgraph meanwhile query GBj symmetric gbi denote fvs gbi  respectively boundary query gbi GBj gbi GBj query consume compute avoid load hop function hop construct hop reading suppose gbi GBj fvi fvi return without computation gbi load hop function reading empty GBj otherwise GBj reading similarly another reading obtain compute boundary query parallel finally obtain concatenate generate however combination gbi GBj involves concatenation hence prune intra query sample query generate sample vector stage instead sort boundary function minimum retrieve increase observation boundary function boundary vertex direction query direction useless easy dominate avoid boundary retrieve   compute lowerbound minimum correspond inner lowerbound maximum discard   directly otherwise generate sample vector correspond inner dominate sample vector ignore worth concatenate inner function fvs     update exist fvs function update fvs return query inner subgraph query LC LC label subgraph boundary query LB LB concatenation update operation LB overall query maximum inner boundary query plus update SSFP query previous FPP query although FPP query SSFP ISFP query source destination unnecessary computation involve query asks construct entire function query compute function therefore avoid useless computation query faster obviously optimization SSFP ISFP query critical reality although detail prune procedure apply query essential query avoid unnecessary file reading function computation query issue within partition optimization mainly focus reduce computation file index load query issue partition optimization mainly reduce disk reading index involve intra partition SSFP query SSFP query computation intra partition SSFP query essentially return min fvi fvs static variable min fvi fvs therefore fvs fvi fvs sum instead concatenation minimize function hop straightforward approach load entire function function return obviously function construction unnecessary improvement retrieve fvs fvi fvs load index without concatenate fvs fvs explicitly approach THop however load useless disk reading approach THop reduce data load binary apply label approach THop approach illustrate although ISFP SSFP spirit apparently stable reading performance THop affected earlier data retrieve performance later deteriorate THop complexity algorithm complexity load retrieve data  dominate THop THop THop logt inter partition SSFP query FPP query inter partition SSFP query fvs     however cannot parallel cannot departure  fvs  obtain similarly  besides disk reading longer computation SSFP therefore compute linear inevitable reduce influence restriction identify improvement parallel pipeline reading hop candidate generation phase parallel whenever fvs  obtain boundary query whenever boundary query obtain query query split gbi GBj sub query pipeline illustrates query logic construction fvs  intra partition creates temporal boundary gbi temporal pipeline arrival  boundary query boundary  GBj temporal  reading obtain arrival minimum due fifo finally destination arrival boundary  compute pipeline label GBj boundary improvement introduce previously complexity correspond ISFP query unlike SSFP query ISFP query interval therefore function construction computation inevitable essential ISFP arrival departure interval related hop intra partition ISFP query SSFP intra partition query basis inter partition query approach load entire function generates sub function faster computation interval label departure interval interval label depends arrival hop limit function useful shorter concatenation minimization achieve approach label function construct interval approach binary interval construct function interval binary eventually data load approach complexity algorithm interval THop THop THop logt inter partition ISFP query difference inter partition ISFP interval determination fvs  generates sub function boundary partition inter boundary hop boundary label interval union label interval minimum beginning maximum label interval limit organize sub function procedure hop label difference intra version illustrate cannot fully parallel partial parallel pipeline cannot estimate interval label accurately complexity  replace correspond approximation technique analyze previous influence complexity therefore reduce essential construction query propose technique task approximation dependent dijkstra reduce describes compression dijkstra approximation ratio aim construct approximate minimum function avi  avi fvi however cannot apply approximation ratio along route directly suppose series consecutive apply approximation factor error linearly    sourceto achieve guarantee another budget prune along budget assign vertex prune reduce earlier vertex latter concentrate prune latter vertex global threshold vertex exceed prune sample average suppose stage fvi prune prune slide  prune  safely replace replacement  approximation bound possibility optimal satisfy cannot prune empty  return remain approximate function avi  strictly avi  algorithm approximation input fvs error threshold output fvs  inf  error fvs     breakpoint  erase breakpoint  return fvs function error fvs error linear fvs fvs error error fvs return error remains distribute prune reduce exponentially prune logarithm vertex prune vertex prune budget  prune actual prune usage max prune remain prune logarithm  prune prune budget   remain sum   equation actual approximation ratio approximation bound guaranteed bound avoid useless prune  source compression although partition approach reduce label THop network therefore compress label guarantee approximation ratio bound detail approximation algorithm fvs error bound input return approximate function algorithm iteration within iteration remove introduce error remain error array index remain fvs compute error introduce remove actually remove introduce minimum error removal implement erase index introduce error compute function error construct linear function fvs fvs although actual multiple erase previous iteration accumulate error intermediate compute difference correspond linear function error error input error bound iteration minimum function return remain query considers label error bound inner partition query partition obviously experimentally evaluate propose THop label network describes setting influence subgraph construction label evaluation subgraph network respectively setup algorithm implement compile optimization dell PowerEdge rack server xeon ghz core thread 8G memory data TB raid disk dataset obtain network beijing  consists intersection spatial partition subgraph partition subgraphs boundary vertex partition subgraphs boundary partition subgraphs boundary profile derive trajectory data obtain didi average inner rural typically query subgraphs categorize profile density average per function sparse medium dense subgraph evaluation density network evaluation subgraph category variation distance generate vertex randomly denote THop dijkstra denote  compression denote  implement dependent CH tch heuristic described hop limit dependent   implement baseline approach algorithm FP optimization SSFP ISFP denote THop THop THop construction label label illustrate construction illustrate subgraph increase boundary decrease boundary label inner label boundary construction inner partition construct partition subgraphs obviously partition construct label partition dijkstra construction dramatically reduce label nearly compression compression rate evaluation FPP subgraph actual marker speedup ratio FP sparse subgraphs rural dense subgraphs urban query sparse subgraph query dense subgraph THop approach shorter query FP tch  label  due profile density impact query distance longer query distance dense subgraph sparse meanwhile longer dense query sparse query sparse graph rural longer query derive rural sparser profile shorter query derive urban denser profile query increase distance increase FP query increase speedup increase dramatically affected vertex label lastly distance vertex significant tch query FP distance grows speedup performance becomes THop contains shortcut link vertex away reduce query however query shortcut possibility contribute therefore tch vertex FP query speedup performance query distance nevertheless approach evaluation FPP network apparently approach shorter query online speedup approach approximate faster evaluation subgraph profile density subgraph important role query distance longer distance denser subgraphs increase distance increase dense subgraphs THop query distance increase subgraph query involves concatenation dense query hop function tch  shortcut vertex suffer wasteful computation benefit  slightly faster tch essentially prune strategy tch avoids apparently useless shortcut addition average error dijkstra percent evaluation SSFP ISFP departure departure THop THop faster THop approach faster THop speedup intra partition inter partition inter query computes label linearly parallel specifically SSFP intra optimization achieve faster SSFP inter THop SSFP directly SSFP essentially variant dijkstra optimization approach achieve faster SSFP ISFP intra optimization speedup THop faster FP ISFP inter optimization speedup FP query THop performs departure earlier conclusion extend hop label approach dependent environment query quickly unlike static environment shortest index widely dependent environment approach easy online category histogram profile linear piecewise function propose dependent hop label approach linear piecewise function partition network label FPP SSFP ISFP query reduce label construction query online approximation strategy dijkstra construction compression extensive query faster online approach