extend abstract analyze lossy compression MinHash bucket logn bucket loglogn encode float notation compress sketch hyperminhash HyperLogLog scaffold replacement MinHash unlike comparable jaccard index fingerprint algorithm sub logarithmic MinHash hyperminhash retains MinHash feature update union cardinality estimation additive approximation error jaccard index random oracle hyperminhash loglogn logϵ hyperminhash allows estimate jaccard index cardinality relative error around percent MiB memory MinHash estimate jaccard index cardinality memory consumption introduction data rephrase item database satisfy boolean formula similarity multiple relative overlap participant political survey independent favorable federal government source IPs DDoS attack versus MinHash sketch developed  standard technique MinHash logn unique item allows update directly estimate union cardinality jaccard index couple jaccard index union cardinality intersection accessible literature sub logarithmic optimal probabilistic data structure approximate distinct sketch losslessly merge sketch union enables cardinality union rephrase query item satisfy boolean formula union enable query similarly sub logarithmic optimal fingerprint exist compute jaccard index distinct sketch allows query intersection cardinality unfortunately jaccard index fingerprint MinHash cannot merge jaccard index union query perform combine distinct sketch jaccard index fingerprint complicate query cannot advantage MinHash merge sketch distinct jaccard index estimator compose fashion knowledge practical sub logarithmic sketch replace MinHash exist sub logarithmic jaccard index fingerprint cannot merge improve performance characteristic MinHash sketch advance permutation minimal independence actually random hash function prior loglog counter lossy compression minimum hash reduces storage hash logn loglogn MinHash jaccard index define  distinct estimator allows estimate intersection jaccard originally define index ecological diversity proxy document similarity  introduce min wise hash  MinHash technique quickly estimate resemblance document jaccard index  collection within document MinHash jaccard index estimation relies apply random permutation universe item permutation precisely jaccard index random permutation minimum disjoint minimum min min min symmetry conversely min clearly min min permutation random probability minimum min min SourceRight click MathML additional feature random permutation unbiased estimator  random variable variance instead permutation average trial unbiased estimator jaccard index variance decrease multiplicative factor theoretical justification predicate random permutation approximate hash function instead hash function specify nearly universe item hash function output probability accidental collision exponentially theoretically easy analyze scheme drawback amongst requirement random hash function imply computational complexity generate sketch address variant MinHash propose hash function scheme described shortcoming computation generate sketch minimum hash function instead minimum  sketch sketch generation reduce  incur  sort penalty compute jaccard index partition another permutation MinHash variant partition stochastically average deterministically partition bucket couple hash minimum within bucket partition advantage sketch generation jaccard index computation analysis partition permutation MinHash significantly efficient hash function sort compute jaccard index partition bucket implicitly commonly whenever refer MinHash partition permutation MinHash MinHash sketch losslessly combine MinHash sketch minimum across bucket additionally statistic estimate distinct cardinality directly estimate union cardinality merge sketch intersection cardinality jaccard index union cardinality complex operation rewrite intersection union distinct union cardinality standard variant MinHash logarithmic per bucket prevent accidental collision ensure hash identical however related cardinality estimation unique item distinct literature decade sketch logarithmic per bucket indeed loglog  HyperLogLog sketch loglog per bucket uniform hash function multiplicative error loglogn analysis originally access random oracle truly random hash function hash function additional logn loglogn logn compact hash concentration inequality min wise independent hash function relax requirement random oracle reduction complexity logn without counting hash function loglogn randomness essentially optimal sketch constant per bucket logarithmic HyperLogLog sketch assumption randomness standard cryptographic hash function sha behave random oracle clearly empirically data logarithmic essentially constant jaccard index estimation trivially HyperLogLog union cardinality compute intersection cardinality jaccard index inclusion exclusion principle unfortunately relative error union oppose jaccard index MinHash compound intersection multiple intersection error practically feasible unless significantly precisely achieve relative error inclusion exclusion inverse jaccard index oppose inverse jaccard index notably newer cardinality estimation maximum likelihood estimation directly access intersection HyperLogLog sketch union cardinality estimate jaccard index however approach restrict information available HyperLogLog sketch empirically constant improvement conventional inclusion exclusion alternately union update literature jaccard index fingerprint fingerprint reduction norm sketch truncate MinHash MinHash achieve bound  highly jaccard index estimate jaccard similarity fingerprint technique basically asymptotically optimal however MinHash norm reduction jaccard index lose benefit standard MinHash jaccard index estimation MinHash minimum hash minimum per bucket sketch generation phase standard MinHash implies lack  fingerprint union cannot compute fingerprint constituent norm reduction counting item logarithmic MinHash aim reduce complexity MinHash preserve feature focus jaccard index unbounded data model primary feature differentiate MinHash distinct sketch preliminary distinct theoretical focus reduce amount randomness MinHash min wise  independent hash function however assume randomness existence random oracle standard construct hyperminhash sketch compress MinHash sketch float encode HyperLogLog scaffold HyperLogLog scaffold statistic previously propose MinHash hyperminhash loglogn logϵ SourceRight click MathML additional feature standard nice feature MinHash update ability union sketch distinct cardinality estimation construction optimal likely  sketch instead HyperLogLog reduction practical compromise easy implement software MinHash premise identical minimum probability jaccard index minimum minimum corresponds member intersection union bucket unbiased estimator jaccard index however limited precision hash function accidental collision potential hash union hence logn however minimum collection uniform random variable likely insight distinct sketch hyperminhash operates identically MinHash instead minimum fix precision float notation increase resolution exponent mantissa compute exponent binary location nonzero binary expansion HyperLogLog mantissa simply fix beyond MinHash precisely item partition accidental collision minimum hyperminhash generates sketch fashion permutation partition MinHash hash float notation hash uniform random encode binary hash partition minimum within partition ordinary MinHash procedure fix hash hyperminhash  compress exponent mantissa exponent leftmost otherwise mantissa simply hyperminhash generates sketch fashion permutation partition MinHash hash float notation hash uniform random encode binary hash partition minimum within partition ordinary MinHash procedure fix hash hyperminhash  compress exponent mantissa exponent leftmost otherwise mantissa simply analyze performance hyperminhash random permutation MinHash equivalently collision standard MinHash suffices accidental collision intuitive analysis rigorously analyze collision bucket flavor argument partition multiple bucket HyperLogLog sketch collision whenever item magnitude HyperLogLog alone collision whenever minimum hash magnitude addition hash collision narrow factor within bucket explicit formula collision EC SourceRight click MathML additional feature formula hyperminhash  HyperLogLog indicator bucket achieve collision precisely intuitively suppose hash partition implies minimum hash uniform random hash collides probability cardinality collision luckily cardinality increase analyze construction HyperLogLog collision probability remain roughly constant cardinality increase precision limit loglog counter finite indicator loglog counter sufficient cardinality increase collision collision origin directly compute collision probability similarly variance sum probability replace infinite sum finite sum lemma sensitive estimation collision  estimation later bound expectation variance collision hyperminhash limited loglog counter bucket precision limit implementation detail algorithm naive implementation hyperminhash described python implementation author available http github com  hyperminhash additionally java implementation pseudo code kindly   http github com  hyperminhash   http github com  hyperminhash java hyperminhash sketch procedure generate hyperminhash sketch standard permutation partition MinHash sketch minimum hash float encode programmatically easy directly split hash bucket ID negative exponent bucket mantissa bucket independent hash function hash data domain binary domain generally hash function sha hash function hyperminhash min initialize tuples return function hyperminhash union hyperminhash sketch return hyperminhash sketch bucket maximum exponent exponent minimum mantissa float interpretation bucket simply minimum bucket function union assert initialize tuples return function estimate cardinality bucket directly HyperLogLog estimator minimum distinct cardinality estimator empirically useful cardinality function  initialize integer register  return initialize register return return function compute jaccard index hyperminhash sketch compute jaccard index counting bucket correction factor EC generally really jaccard index additionally practical purpose substitute   algorithm function  assert   EC approx  return EC function compute collision collision hyperminhash sketch compute lemma float error  sensitive estimation jaccard index  estimator algorithm function  prx   return function approximate algorithm numerically stable approximation algorithm generally underestimate collision discus detail function  swap return error cardinality approximation return return  return function empirical optimization recommend optimization practical implementation hyperminhash mathematically equivalent pack hash tuple enables jaccard index computation comparison per bucket instead max instead min sub bucket allows union sketch comparison per bucket recommendation explanatory simply minor engineering optimization prototyping affect accuracy however exactly compute collision lemma computation float error unless  algorithm exponential ignore bias simply error bias standard deviation error magnitude absolute error estimation jaccard index jaccard index numerically stable algorithm approximate collision algorithm however approximate collision procedure empirically asymptotically algorithm approximate HyperLogLog collision HyperLogLog interested collision along along diagonal approximation simply assume joint probability density function almost uniform within completely accurate empirically collision approach furthermore collision dependent factor approximate approximation primarily float error unfortunately around collision increase approximation fail however reasonable proof bound expectation variance accidental collision hyperminhash sketch disjoint rigorously define hyperminhash sketch described proof unbounded data model assume random oracle randomness definition define hyperminhash sketch construct  ith bucket sketch precisely uniformly random hash function min  define mina source definition  define indicator variable collision bucket respective hyperminhash sketch SourceRight click MathML additional feature theorem theorem collision hyperminhash sketch disjoint expectation EC source theorem setup theorem var source theorem allows random collision compute jaccard distance theorem standard deviation collision approximately expectation simpler proposition proposition hyperminhash sketch bucket disjoint naturally hash function uniform random variable dependent cardinality SourceRight click MathML additional feature technical lemma theorem lemma source proof random variable correspond hash item uniform similarly drawn hash uniform min min probability density function pdf pdf SourceRight click MathML additional feature cumulative density function cdf cdf SourceRight click MathML additional feature particularly interested joint probability density function pdf sourcethe probability enclose along diagonal precisely ssn  SourceRight click MathML additional feature recall binary expansion unless binary expansion collision precisely finally formula suffices sum probability collision image SourceRight click MathML additional feature substitute completes proof precisely sum probability purple along diagonal lemma allows explicitly compute lack upper bound expectation integrate collision notation TR orange upper bound collision probability hyperminhash integration orange magenta ray intermediate strip purple purple sub bucket origin upper bound collision probability hyperminhash integration orange magenta ray intermediate strip purple purple sub bucket origin magenta origin bound denote ray strip origin purple origin bound denote strip purple BL lemma probability TR proof equation TR  SourceRight click MathML additional feature lemma probability origin BL proof BL  SourceRight click MathML additional feature linear binomial approximation actually strict upper bound trivially verify taylor expansion BL  lemma probability ray origin bound ray proof unfortunately ray align cannot integrate separately ray   elementary difference formula    SourceRight click MathML additional feature symbolic manipulation conclude ray  source integration ray    SourceRight click MathML additional feature lemma probability diagonal strip origin strip proof integration procedure difference formula proof lemma strip   source proof proposition sum bound lemma proof theorem ith partition respectively notation define recall bound  technique proposition effectively  minimum hash factor substitute lemma lemma already magenta ray lemma sum readily conclude  linearity expectation EC proof theorem conditioning multinomial distribution decompose SourceRight click MathML additional feature notation denote respectively additionally var cov source vice versa disjoint indicator variable cov SourceRight click MathML additional feature imply var cov var cov SourceRight click MathML additional feature simplify recall  var var EC SourceRight click MathML additional feature covariance formula independent random variable cov XY XY  XY XY var sourcethus summation bound cov var var var SourceRight click MathML additional feature conclude var complexity analysis theorem implies standard deviation collision collision bound theorem jaccard index absolute error minimum hash collision approximately ECP SourceRight click MathML additional feature bound absolute error jaccard index estimation collision bound constant gross overestimate empirically constant closer desire absolute error logϵ SourceRight click MathML additional feature error implies hyperminhash loglogn per bucket additionally bucket error proof hyperminhash loglogn logϵ astute reader complexity analysis implicitly assume jointly empty bucket hyperminhash sketch assumption allows simpler jaccard index estimator bucket SourceRight click MathML additional feature harder analyze estimator bucket jointly empty bucket SourceRight click MathML additional feature regime empty bucket although proof additional accidental collision hyperminhash compression relative error jaccard index estimator bucket however asymptotic cardinality regime practitioner hyperminhash saving cardinality regime logarithmic importance detailed algorithm theoretical analysis hyperminhash completeness simulated empirical MinHash generate permutation partition MinHash sketch detailed introduction consists hash within partition bucket minimum hash within bucket estimate jaccard index bucket bucket empty sketch hyperminhash proceeds identically compress minimum hash indicator jaccard index estimation identical bucket indicator additional allocate byte standard MinHash sketch hyperminhash sketch plot relative error jaccard index simulated overlap jaccard index sake comparability error collision correction hyperminhash python implementation available github http github com  hyperminhash rerun regenerate fix sketch hyperminhash accuracy cardinality MinHash jaccard index estimation identically jaccard index plot relative error without estimate collision correction datasets random repetition reasonable percent confidence interval shade byte hyperminhash sketch bucket allocate loglog counter jaccard index estimation remains stable cardinality around orange byte MinHash sketch bucket achieves accuracy cardinality fails cardinality approach byte MinHash sketch bucket access cardinality around cardinality accuracy fix sketch hyperminhash accuracy cardinality MinHash jaccard index estimation identically jaccard index plot relative error without estimate collision correction datasets random repetition reasonable percent confidence interval shade byte hyperminhash sketch bucket allocate loglog counter jaccard index estimation remains stable cardinality around orange byte MinHash sketch bucket achieves accuracy cardinality fails cardinality approach byte MinHash sketch bucket access cardinality around cardinality accuracy jaccard index baseline relative error maximum relative error error remain basically stable across cardinality handle without hash collision hyperminhash bucket allocate indicator sketch access cardinality MinHash bucket maintains error hyperminhash union cardinality fails bucket MinHash bucket allows access cardinality around baseline error fix sketch cardinality hyperminhash accurate fix sketch bucket hyperminhash access exponentially cardinality conclusion introduce hyperminhash compress version MinHash sketch loglog available prototype python implementation http github com  hyperminhash compression scheme MinHash reduces per bucket loglog insight HyperLogLog partition MinHash MinHash retains variance bucket jaccard index however introduces variance increase collision alternately extension  jaccard index fingerprint MinHash feature update union sketch practitioner desire jaccard index fingerprint recommend MinHash however hyperminhash serf around replacement MinHash preserve MinHash compositional feature efficient jaccard index fingerprint remain theoretical improvement remove requirement random oracle notably  sketch sketch improves HyperLogLog constant bucket logarithmic offset limited randomness envision technique extend hyperminhash reduce complexity HyperLogLog bucket identical regular HyperLogLog similarly  introduce min wise hash function reduce amount randomness MinHash sketch although analyze hyperminhash partition variant float encode apply sketch error behavior luckily without theoretical improvement hyperminhash already practically applicable reasonable parameter hyperminhash sketch MiB memory per estimate jaccard index cardinality accuracy around percent hyperminhash knowledge practical summary sketch capable directly estimate union cardinality jaccard index intersection cardinality loglog apply arbitrary boolean formula conjunctive normal error rate bound hyperminhash manuscript utility boolean query database