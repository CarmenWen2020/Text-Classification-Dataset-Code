keyword widely retrieve relevant substructure graph keywords however exist approach aim compact subgraphs keywords ignore critical density strongly stably keyword node substructure keywords cohesive subgraph density compactness graph model cohesive subgraph carefully chosen truss model formulate cohesive subgraphs keyword query minimal dense truss minimal subgraph maximizes trussness however unlike truss community efficiently local node minimal dense truss keyword query nontrivial task subset keyword node retrieve substructure previously unknown tackle novel hybrid KT index keyword truss information  propose efficient algorithm KT index directly dense truss maximum trussness gden without access graph develop novel refinement approach extract minimal dense truss dense truss gden node anti monotonicity derive truss optimization strategy batch deletion deletion local exploration moreover extend propose extensive experimental network validate effectiveness efficiency approach introduction keyword user friendly query scheme widely retrieve useful information graph data knowledge graph information network social network etc query consist keywords target keyword graph substructure graph relevant query keywords recent decade keyword extensively literature earlier aim minimal keywords function return compact partial relationship keywords subgraphs keywords subsequently propose radius subgraph community clique however focus compactness retrieve substructure evaluate distance keyword node subgraph fail explore densely keywords application density critical reflect stability relationship keywords member stably cooperate multiple communication member cannot disconnect easily implies density recent diversified keyword neglect density retrieve substructure recent density keyword community however target maximize keyword cohesiveness contextual density combine keyword cohesiveness structural cohesiveness inherently dense subgraph query keywords cohesive subgraphs highly dense compact keyword query various cohesive subgraph model propose literature core truss component truss within model substructure keyword query due stable relationship truss define graph motif primitive vertex fundamental building network ensure stable relationship keyword node bound diameter diameter truss vertex bound ensures compactness retrieve subgraphs density truss core subgraph node remain whenever remove ensures keyword node retrieve subgraphs densely illustrate difference truss exist keyword approach steiner community clique authorship citation graph author author rank author citation frequency query james identify respectively community identify multi subgraphs distance node keyword node threshold ranked minimum node keyword node correspond shortest community node community node respectively clique model diameter return steiner qualify clique finally extract approach return substructure james wilson john however james wilson jim  jack implies stable closer relationship truss model properly discover truss dash motivate challenge attain highly dense compact substructure keyword query subgraph maximum trussness minimum minimum dense truss however discus minimum dense truss query keywords NP moreover apx cannot polynomial algorithm approximates minimum dense truss within constant ratio unless NP relaxed version minimal dense truss subgraph maximum trussness subgraph trussness model closest truss model maximum trussness minimum diameter diameter truss node bound truss minimum diameter arbitrarily node moreover closest truss NP minimal dense truss polynomial despite related community detection community minimal dense truss keyword query nontrivial task minimal dense truss query keywords inherently community detection query independent aim detect maximal truss community truss decomposition community aim maximal community maximize trussness query node local index recent attribute community rank community attribute input subset node difficulty minimal dense truss keyword query unlike community query node subset node keywords dense truss retrieve unknown advance therefore node adopt local approach query explore combination keyword node subgraph maximum trussness node  graph local essentially optimal due combination already obtain truss maximum trussness verify minimality truss consume subgraphs subgraph trussness contribution tackle minimal dense truss keyword query subtasks dense truss gden maximum trussness refining gden obtain minimal dense truss subtask manner manner due limit framework preliminary version KT index thorough analysis optimization technique version hardness analysis discus thoroughly framework framework furthermore discus extension propose moreover although node anti monotonicity truss preliminary version refinement consume truss verification deletion propose optimization strategy accelerate refinement batch deletion deletion local exploration perform extensive experimental datasets parameter newly propose faster previously propose magnitude summarize substantial improvement cohesive subgraphs keyword query formulate carefully chosen truss model knowledge literature analyze hardness propose framework namely framework framework comparison novel hybrid index KT index keyword information truss information efficient propose novel algorithm KT index efficiently dense truss maximum trussness keyword query without access graph develop efficient refinement algorithm extract minimal dense truss dense truss optimization strategy batch deletion deletion local exploration accelerate refinement conduct extensive experimental synthetic network validate effectiveness efficiency approach discover cohesive substructure keyword query organize statement hardness analysis algorithmic framework illustrates improve algorithm KT index novel algorithm refining dense truss extract minimal dense truss keyword query experimental discus related concludes statement related notation definition analyze hardness minimum dense truss keywords notation definition label undirected vertex label graph vertex label function assigns node label denote vertex graph respectively denote vertex respectively vertex denote vertex substructure definition graph occurs define  sup  interchangeably context definition truss graph integer truss subgraph  definition implies truss vertex vertex truss vertex truss truss core trussness subgraph minimum plus define  trussness maximum trussness subgraphs  trussness vertex maximum trussness adjacent maxu denote subgraph induced vertex minimum trussness subgraph trussness maximum trussness adjacent definition dense truss keywords graph keyword dense truss truss gden maximizes trussness contains definition minimum dense truss keywords graph keyword minimum dense truss keywords dense truss gden minimum node definition  dense truss keywords graph keyword minimal dense truss dense truss gden subgraph gden dense truss graph graph query DB ML truss truss clearly dense truss another truss induced minimal minimal dense truss minimum dense truss keywords graph keyword minimum dense truss refer minimum dense truss context hardness minimum dense truss NP hardness minimum dense truss reduction maximum clique decision version minimum dense truss define truss graph keyword integer contains truss node keywords theorem truss NP proof reduce NP maximum clique decision truss graph integer maximum clique decision contains clique construct instance truss consist graph parameter query instance maximum clique decision instance iff instance truss instance clearly clique node truss truss node truss implies clique theorem implies hardness minimum dense truss explore approximate constant instance algorithm achieve approximation minimum dense truss output truss subgraph optimal admit polynomial algorithm achieve constant approximation ratio unless NP obtain reduction maximum clique decision theorem unless NP exist polynomial algorithm approximates minimum dense truss within constant ratio proof contradiction assume exists polynomial algorithm minimum dense truss approximation ratio optimal clearly assumption subgraph approximate maximum clique decision algorithm instance maximum clique decision parameter query contains clique iff output suppose optimal clique suppose cannot clique clique optimal minimum dense truss parameter contradicts optimality algorithm distinguish instance maximum clique decision theorem intractable obtain minimum dense truss keyword query approximate polynomial hence focus minimal dense truss keyword query solvable polynomial minimal dense truss keywords graph keyword minimal dense truss keywords refer minimal dense truss context application minimal dense truss keywords ranked trussness simplicity minimal dense truss keywords discus extend version later algorithmic framework minimal dense truss keyword query naturally phase algorithm dense truss gden maximum trussness  refining gden obtain minimal dense truss  propose dense truss framework phase detail phase introduce later algorithm  input graph keyword query output minimal dense truss gden  algorithm algorithm  gden return dense truss obtain dense truss keyword query straightforward explore combination keyword node specifically keyword node obtain dense truss maximizes trussness dense truss discover return truss gden trussness consume dense truss node dense truss gden utilize upper bound trussness node subset define minv lemma graph subset node truss lemma easily derive trussness definition subgraph minv upper bound trussness node dense truss algorithm initialize variable sequentially descend dense truss upper bound node subset trussness kmax subgraph trussness achieve truss decomposition index adopt algorithm   input graph keyword query output dense truss gden compute trussness node keyword node minv sort descend kmax kmax truss maximum trussness kmax kmax gden return gden theorem algorithm max proof trussness node compute truss decomposition  index adopt loop overall complexity max complexity implies   impractical graph complexity sort trussness steiner induced however heuristic cannot reduce complexity meanwhile extra approximately compute steiner dense truss avoid enumerate combination keyword node propose framework truss trussness kmax graph kmax truss gradually decrease kmax accelerate keyword trussness node keyword upper bound keyword trussness define maximum trussness node maxv  graph keyword truss min proof truss exist node obviously minv min moreover node min min dense truss algorithm obtain trussness node truss decomposition keyword compute node obtain upper bound trussness keyword maxv  kmax truss kmax min specifically extract  kmax component  contains keywords return component otherwise kmax truss truss gden algorithm   input graph keyword query output dense truss gden compute trussness node keyword node maxv gden kmax min gden extract kmax truss  kmax component  contains keywords gden gden kmax kmax return gden theorem algorithm proof complexity bound truss decomposition kmax truss  compute component  component contains keywords usually  kmax min maximum trussness node graph complexity overall complexity improve algorithm novel keyword truss index KT index keywords trussness information propose highly efficient algorithm minimal dense truss query KT index construction algorithm trussness computation primitive independent keyword query computation truss decomposition offline query hash trussness another consume algorithm examination truss complexity KT index truss index keyword index truss index truss index multi layer structure truss indexed kth layer suppose component  kth layer sort component descend node assign component ID component node kth layer  keyword index keyword index invert keyword node IDs keyword keyword node meanwhile upper bound trussness keyword moreover keyword IDs component  keyword occurs kth layer  algorithm building KT index obtain trussness truss decomposition  accord trussness invert keyword scan graph kmax obtain truss kth delete sort component ascend component assign component ID component output truss index compute keyword occurs component ID  keyword algorithm  input graph output  compute kmax   keyword invert kmax obtain delete sort component assign cid component output truss index compute keywords  theorem KT index construct  proof complexity dominate complexity truss decomposition complexity loop kmax occurs layer kmax   ere   bound arboricity graph overall complexity algorithm complexity computational algorithm bound index trussness kmax node truss layer node occurs layer kmax keyword index bound   average keywords associate node usually constant furthermore component  kth layer keyword usually graph away node index KT index bound graph algorithm obtain trussness node component trussness remove trussness obtain component trussness cid component assign keyword index keyword AI upper bound trussness node occurs component layer truss index truss index keyword index keyword index improve algorithm KT index construct directly minimal dense subgraph index   algorithm algorithm avoid layer truss index binary kmax iteration kth layer obtain component IDs CC contains keywords CC empty layer  otherwise layer trussness component IDs CC keywords component dense truss gden extract minimal dense truss gden function   introduce later algorithm   input graph keyword query output dense truss gden kmax min  kmax  kmax  sci  CC  CC  kmax   gden component cid kth layer return gden theorem algorithm   maximum component layer KT index proof clearly iteration binary bound  iteration compute component ID contains keywords pmax pmax maximum component layer maximum trussness graph overall complexity pmax component layer node usually graph KT index algorithm identify gden efficiently extension application prefer dense subgraphs ranked trussness definition truss subgraph component truss component truss avoid repeatedly return dense truss keyword node minimal dense truss identify overlap therefore marked node already identify algorithm easily revise return minimal dense truss instead return component ID algorithm return IDs CC CC extract minimal truss component CC return CC extract minimal truss component CC update CC layer repeatedly minimal dense truss layer minimal dense truss extraction subtask extract minimal dense truss gden algorithm detail function  gden discus anti monotonic truss essential guideline refinement truss node adjacent graph truss exist subgraph contains truss proof contradiction assume contains truss clearly contradicts assumption truss refine gden delete node node gden checked delete subgraph contains truss  deletion algorithm   algorithm randomly node graph gden uniformly random delete node adjacent truss update gden otherwise node  node checked avoid examination function  den existence truss delete node subset adjacent den edel maintain delete graph gradually delete edel violate constraint truss continually edel edel component return truss otherwise return algorithm  input dense truss gden keyword query output minimal dense truss gden  gden  den gden node den   den gden   return procedure  den edel adjacent node edel edel edel remove den sup sup sup sup sup edel edel edel sup edel edel edel component den return return theorem complexity algorithm gden iteration trussness gden gden arboricity gden minimum span gden proof analyze complexity  mainly execute cannot delete update delete bound gden sup gden   bound gden arboricity gden gden iteration node deletable delete truss otherwise deletable theorem complexity  mainly depends iteration gden iteration constant graph reduce complexity reduce iteration delete deletable node reduce dense truss quickly introduce optimization strategy accelerate optimization batch deletion reduce iteration delete node batch instead subset gden delete gden remain contains truss delete node immediately however delete node truss therefore increase deletion successful deletion increase node delete unsuccessful removal reset delete node deletion minimal dense truss return optimization II  deletion addition optimization strategy accelerate computation approximate minimal dense truss consecutive unsuccessful deletion exceeds threshold random deletion output approximation minimal dense truss probability threshold logδ logc omit proof proof minimal steiner maximum subgraph query node optimization local exploration gden deletion obtain minimal dense truss extract subgraph den gden keywords local exploration specifically construct steiner gden node keywords expand subgraph GT bfs manner GT initialize iteratively adjacent vertex trussness GT exceeds threshold adjacent node GT GT contains truss den keywords den densest subgraph apply refinement den otherwise expand GT GT exceeds truss den extract performance introduce setup discus experimental experimental setup knowledge exist cohesive subgraph truss keyword query implement version thoroughly evaluate efficiency effectiveness KT index algorithm optimization strategy   algorithm  implement algorithm KT   algorithm  implement algorithm  algorithm algorithm batch deletion  algorithm algorithm deletion  algorithm algorithm local exploration  algorithm algorithm batch deletion deletion  algorithm algorithm batch deletion deletion local exploration algorithm implement conduct linux server intel xeon cpu ghz GB memory datasets evaluate performance algorithm datasets widely previous keyword attribute community dblp bibliographic dataset node dataset node denotes author denotes authorship author dbpedia knowledge graph node node entity architecture attribute  ford YAGO knowledge graph node sparser dblp dbpedia another widely dataset imdb tripartite graph maximum trussness syn synthetic dataset generate snap  albert BA model contains datasets node average model respectively keyword distribution keyword query borrow dblp specifically node synthetic data randomly corresponds node dblp borrow correspond keywords attach keyword query dblp syn keyword query evaluation associate keyword frequency  dbpedia YAGO query template consist keywords keywords keyword associate node entity generalize query modify query template replace keyword american award correspond contains entity  keyword query dblp keyword query dblp keywords query dbpedia YAGO keywords query dbpedia YAGO parameter performance algorithm parameter keywords keyword frequency  default parameter specifically synthetic datasets density affect minimal dense truss parameter exp index construction construction index  algorithm typically perform offline keyword index built reside memory efficiently keyword graph report consume overall index structure memory spent index construction KT index construct within efficiently datasets KT index graph consistent complexity previous theoretical analysis omit datasets syn dblp exp effectiveness efficiency dblp syn performance algorithm dblp parameter  respectively syn density construction index average minimal dense truss dblp report increase keywords increase substructure return keywords evaluate algorithm average remains stable increase trussness stable multiple component truss layer minimal dense truss keyword frequency keywords frequent  keyword node distribute sparsely graph subgraph keywords frequent keywords  subgraph keywords however due distribution keyword query decrease average minimal dense truss syn report increase density graph increase dataset dblp random generate topological structure destroy community  topic related dblp trussness minimal dense truss effectiveness efficiency dblp effectiveness efficiency dblp dblp parameter increase algorithm increase slowly complexity mainly graph dense truss gden keywords overhead KT index algorithm KT faster without index almost magnitude optimization technique accelerate computation  combination faster KT increase return increase becomes refine truss trussness decrease slowly keyword frequency increase dense truss gden refinement syn density algorithm increase along increase density KT algorithm maximum trussness syn dense community destroyed random graph exp effectiveness efficiency dbpedia YAGO evaluate performance dbpedia YAGO query cannot  keyword query fix average minimal dense truss report algorithm KT achieve examine node return subgraphs dbpedia dbpedia dbpedia sparser dblp similarly retrieve subgraphs dbpedia YAGO query dbpedia YAGO remains stable increase multiple component contains keywords truss layer effectiveness efficiency YAGO dbpedia effectiveness efficiency YAGO dbpedia report algorithm KT faster magnitude  faster KT trend  performs performs algorithm YAGO dbpedia increase along increase exp statistic trussness diameter report trussness diameter query report efficient algorithm  algorithm obtain dblp obtains trussness YAGO dbpedia density moreover trussness increase query keyword frequency increase implies frequent keywords probably denser truss diameter return datasets confirms previous analysis tight bound diameter truss trussness diameter dblp YAGO dbpedia trussness diameter dblp YAGO dbpedia exp dblp perform dblp model steiner cohesive subgraph stable coauthor relationship author  suppose AI task biometric recognition kohonen neural network  facial recognition query biometric recognition  kohonen minimal dense truss trussness node author publication subgraph       expert publication biometric recognition recognition  biometric recognition respectively meanwhile   adam    publish recognition kohonen neural network    college   biometric recognition research author researcher subgraph steiner  subgraph maximum truss author publish collaboration comparison return densely stably subgraph publication coauthor relationship steiner approach loosely structure publication dblp dblp related related keyword community graph keyword graph keyword extensively literature query usually model individual minimal graph query keywords popularly subtree keyword query rank function usually define steiner semantics distinct semantics optimal steiner subtree steiner semantics NP heuristic algorithm BANKS propose approximate backward optimal steiner parameterized DP algorithm  propose parameter steiner algorithm steiner polynomial delay developed another achieve approximation optimal steiner pseudo polynomial recently improve DP algorithm  propose optimal decomposition conditional merge BANKS II BLINKS developed subtree distinct semantics sum shortest distance keyword node BANKS II promising node BLINKS improve algorithm index partition graph overcome drawback portion relationship query keywords researcher subsequently propose model subgraphs radius subgraph community clique propose subgraph query keywords radius rank function structural compactness textual relevancy polynomial delay algorithm generate ranked community multi subgraphs distance node keyword node threshold  polynomial delay algorithm approximately clique distance keyword node addition diversified keyword subgraphs however focus evaluate distance query node ensure compactness query none density recently approach density keyword however aim maximize contextual density density density keyword density inherently truss another aim maximize contextual cohesiveness core specific truss model community truss community truss model aim community maximize truss query node construct tcp index efficient truss community query node propose compact index  accelerate computation truss community query node avoid rider truss maximum truss minimum diameter approximate recent attribute community node attribute propose rank function regard attribute algorithm query node cannot directly adopt subset node keywords dense truss previously unknown moreover related query independent community detection aim detect maximal truss information approach mainly sequential algorithm another parallel graph keyword community related structure task conclusion cohesive subgraphs highly dense compact keywords model cohesive subgraph truss model formulate cohesive subgraphs minimal dense truss keyword query tackle subtasks dense truss maximizes truss keywords refining dense truss obtain minimal dense truss keywords network efficiently novel hybrid graph index scheme KT index keyword information truss information compactly efficiently propose efficient algorithm KT index directly dense truss without access graph extract minimal dense truss develop novel refinement approach node anti monotonicity truss optimize refinement batch deletion deletion local exploration extensive experimental graph effectiveness efficiency approach