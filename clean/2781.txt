resource description framework rdf commonly standard data interchange web collection rdf data graph consumes query graphic processing gpus employ execute parallel program speedup propose novel rdf data representation along query processing algorithm suitable gpu processing challenge gpu architecture limited memory memory transfer latency vast gpu core strengthen gpu core reduce memory transfer propose representation consists index rdf ID data reduce gpu memory requirement index pre upload filter technique apply reduce data transfer host gpu memory index swap facilitate sort data variable pre upload reduce storage data transfer experimental representation traditional NT format gStore query processing speedup  gStore processing watdiv suite achieves speedup LUBM benchmark rdf gStore analysis query gain benefit approach introduction resource description framework rdf propose WC data exchange standard semantic web contains predicate relation triple iri international resource identifier collection triple rdf dump link data useful query inference widely domain taxonomy environmental thesaurus influence tracker patent description wikipedia etc connectivity rdf dump file significant triple efficient retrieve data web consortium release standard query rdf protocol rdf query SPARQL query sql traditional database query operation filter projection sort etc capable query across rdf data network endpoint applicable efficiently retrieve query rdf data rdf processing platform perform SPARQL query acceptable performance efficient hardware accelerator gpu platform nevertheless challenge building application gpu gpu limited resource rdf dump text file transfer latency host gpu degrade speedup gain normally gpu processing data gpu memory thread gpus utilize increase processing speedup propose framework  representation inside gpu memory compress representation transform format index memory rdf data usually sparse propose algorithm primitive  query operation representation propose pre upload filter technique reduce data transfer host gpu memory representation compress exhaustive index representation rdf graph representation gStore aspect query processing promising due decrease query storage VEDAS benefit representation  storage triple format representation considers index tuple query operation query considers gpu resource properly limited gpu memory transfer overhead massively parallel thread query contains operation query yield speedup gStore rdf operation thread workload significantly hide transfer structure background related explains related inspiration VEDAS framework operation representation propose processing algorithm gpu comparison analysis described extension operation discus extension complex query finally conclusion future concludes discus future implementation background related preliminary knowledge resource description framework SPARQL background gpu processing highlight related rdf representation query processing resource description framework rdf representation resource description framework rdf data triple quad rdf xml turtle etc simplest popular representation triple statement contains triple predicate predicate express relation predicate iri representation triple triple implies subclass  rdfs vocabulary http owl ontology com  owl http org rdf schema  predicate http owl ontology com  owl  iris obtain biomedical ontology triple convert rdf xml triple image rdf xml image another interpretation rdf data label multigraph vertex graph predicate correspond graph implies bob male alice alice birthday alice founder  restaurant fry rice menu triple image triple data graph visualization image SPARQL query commonly rdf data SPARQL statement analogous sql statement triple query predicate triple normal sql query subqueries listing subqueries journal title journal supercomputing author journal query author variable statement abbreviation prefix http  org standard vocabulary resource dublin core data era rdf data popular nosql information linkage trend data governance standardize encourage rdf data rapidly data  triple census data billion triple link data triple dbpedia triple etc challenge domain retrieve efficiently SPARQL facto standard query rdf data syntax sql relational database founder ISA restaurant query restaurant founder restaurant alice  SPARQL sub graph rdf graph complex query SPARQL modifier query limit limit filter filter boolean union modifier combine focus query contains guideline apply implementation important modifier extension operation graphic processing gpu gpu accelerate graphic application currently application utilize improve performance due parallel processing gpu instruction multiple data simd architecture multiple data simultaneously core instruction architecture multiple processing multiple multiprocessor SMs gpu thread execute SMs scheduler gpu inside computer host cpu memory memory host memory gpu technology maximum GB memory per host memory enlarge gigabyte addition gpu hierarchical memory layout register local memory memory global memory global memory register memory thread register local memory thread thread access memory execute SM global memory accessible gpu thread gpu computation data transfer host memory gpu global memory transfer latency overhead incur gpu processing etc data resides gpu memory gpu execution maximize application performance gpus consideration reduce transfer data cpu gpu hide memory transfer latency overlap processing memory transfer maximize parallelism thread optimize gpu memory usage memory data thread instead global memory enable locality adjust thread memory access reduce global memory transfer etc interested utilize gpu improve query performance rdf data due constraint gpu develop rdf compact representation introduce query processing framework suitable gpu processing framework contains operation pre upload filter index swap parallel merge optimize transfer enable gpu parallelism framework multiple gpus cluster future related various rdf query processing highlight subareas related rdf representation parallel query processing rdf representation rdf data categorize relational graph matrix representation relational approach around treat rdf data relational database approach benefit allows user manipulate data relational database sql query distribute  rdf graph style data structure update mechanism rdf data normally index triple important efficient query however approach computation handle related data operation bottleneck another approach graph representation graph representation relationship data gStore rdf data representation SPARQL query graph sub graph algorithm query representation gStore VS contains index data faster graph approach handle relation limited memory moreover irregular access effectively implement gpu utilize thread gpu memory propose dual approach combine advantage relational graph structure data relational database query complex query graph database graph representation suitable perform complex query datasets matrix representation alternative approach easy compress data index propose  rdf data matrix  rdf sparse matrix propose matrix algebra query data SPARQL query convert equivalent matrix algebra exist matrix algebra library matlab  utilized  rdf sparse matrix translates operation sparse matrix multiplication matrix multiplication gpu operator implement operator cpu gpu cuda  sparse tensor rdf graph trie data structure  tensor slice operation tensor operation define SPARQL query summary representation representation index rapidly access triple compress data replace rdf unique IDs rdf representation literature besides data representation query processing operator important  handle SPARQL query mapreduce framework  utilizes multi algorithm reduce network processing distribute SPARQL query distribute approach SPARQL query processing classify distribute rdf exist distribute compute framework hadoop spark etc partition federate integrates multiple virtual classification storage partition graph DBMS query executive strategy partition DBMS indicates architecture storage query factor SPARQL query performance triad partition  graph  DBMS partition approach triad outperform others evaluate SPARQL query distribute scheme author partial evaluation assembly framework author model rdf data graph query propose algorithm local partial partial fragment rdf graph watdiv LUBM btc benchmark performance measurement various triple intermediate stage performance partition strategy memory operation etc triad author propose asynchronous message passing architecture SPARQL query processing approach partition rdf graph distributes portion metis graph partition SPARQL query transform graph binding variable rdf entity query execute distribute fashion global LUBM btc  benchmark benchmarking literature distribute aspect highly impact query efficiency architecture query affect intermediate subquery subquery operation data partition strategy algorithm etc SPARQL optimization gpu gpu subquery upon operation subquery data query gpu memory transfer data gpu memory usually incurs significant overhead performance SPARQL query gpu highly depends representation affect transfer algorithm algorithm suitable gpu query planner increase query performance  mapreduce technique gpu increase processing author processing subquery gStore merge subqueries propose mapreduce algorithm implement gpu LUBM benchmark performance gStore  speedup gain   implement parallel algorithm apache spark execute gpu matrix approach  leverage matlab gpu SuiteSparse package execution gpu  sparse matrix representation implement gpu algorithm SM  gain speedup rdf gStore various query watdiv benchmark sparse matrix library query benefit library version optimization ordinary matrix multi graph rdf data complicate handle advanced SPARQL  another sparse matrix representation focus heterogeneous architecture execute cpu gpu hierarchical partition incident  implement scratch instead library  relies relational format rdf data convert triple integer IDs compact data sub triple simultaneously marked gpu thread merge approach however query planner optimization previous rdf processing gpus comparison query processing gpu approach VEDAS framework operation due constraint gpu architecture goal minimize memory usage query processing component framework consists data storage representation data loader query processor VEDAS image data storage convert rdf data host contains propose representation gpu processing storage refers disk storage triple data data loader contains subcomponents parser indexer parser performs syntax parse triple data indexer transforms triple data index triple ID index format facilitates SPARQL query query processing query processor contains parser par SPARQL query output internal format query operation query planner optimal query operation finally query executor utilizes query obtain query planner applies accordingly data representation triple format contains datatype iri import triple directly gpu appropriate occupies memory induces gpu cpu memory transfer representation convert data byte integer hash function encode triple byte memory byte byte predicate another byte mapping iri unique integer host memory triple statement contains predicate convert unique triple statement becomes triple ID associate associate predicate associate intermediate perform subquery sequence denote tuple triple ID access indexer construct permutation index POS PSO ops osp SPO SOP        associate triple ID sort predicate respectively convert triple IDs triple data convert hash function triple ID triple sort SOP representation convert triple ID image triple ID representation index image data loader data loader responsible convert triple data triple format triple ID format construct index implementation  raptor library parse triple file integer assign triple statement convert triple ID format permutation index employ thrust library sort triple gpus various sort predicate predicate etc sort dataset data transfer triple data gpu memory incurs however perform dataset transform data future query parser SPARQL query subquery listing subquery alice variable bound variable alice query consist subquery variable listing subqueries founder restaurant variable subquery subquery respectively bound variable founder ISA restaurant predicate predicate respectively subquery triple IDs subquery extract predicate return founder  relational combine SPARQL query consists subqueries optimization reduce intermediate input operation discus query planner notation SPARQL query consists variable subqueries      SPARQL query variable subqueries assume subquery  consists variable subquery return intermediate variable sort variable construct intermediate subquery index index variable correspondingly index reduce overall processing query parser convert SPARQL query internal format implementation source   parse SPARQL query query   variable SV subqueries SQ query planner executor subquery  bound variable convert query listing   query planner query planner query triple ID obtain parse analyzes creates sequence operation execution operator VEDAS framework upload operator uploads intermediate subquery  gpu memory indicates index subquery  combine another maybe index swap sort merge variable index swap operator swap operation assumption operator subqueries sequential fashion operator binary multi operator intermediate operator operator upload operator transfer host memory gpu memory index swap operator gpu processing task query query planner component creates operator construct query operator directly impact performance query index swap operator reduce increase performance however sometimes increase index swap operator intermediate decrease operator data however query planning NP assume manual static scheduler manage operation strategy interleave upload operation upload operation triple SPARQL query approach construct evaluate framework query executor obtain operator query planner query executor executes sequence operator intermediate gpu memory transfer gpu memory host operator query executor contains subcomponents accord operator previous upload operator upload function intermediate subquery gpu memory denote index dataset        variable subquery  bound variable upload function return tuple variable tuples return query reality  upload algorithm algorithm bound variable  identify index datasets indexed predicate  predicate  triple orient fashion upload related instead uploaded variable index consecutive     compact information triple filter technique filter tuples described pre upload filter listing  assume return tuples respectively triple ID format subquery image index  data contains sort  data contains sort  sort immediately sort subquery   obtain operator subqueries usually denote intermediate operator respectively composes hence equation data  denote data denote algorithm variable variable combine variable applies inner sort gpu sort merge inner index another intermediate allocate memory gpu correspond index inner data merge data tuple update variable bound pre upload filter phase operation variable variable variable triple image pre upload filter reduce tuples upload gpu memory bound upload preliminary filter pre upload filter phase suppose intermediate variable suppose contains bound minimum maximum tuple contains variable discard bound variable construct variable boundary variable minimum maximum denote minimum maximum variable query upload update bound pre upload filter reduce data transfer gpu memory index swap operator variable prevents operation index swap operation operation swap variable sort afterwards purpose operator index swap function swap variable sort tuple swap variable tuples tuples sort swap index variable image index swap sort tuples gpu index swap stage consume perform later stage faster due tuples thrust library parallel sort complexity nlog hence thread query frequently SPARQL query query node SPARQL query query prevents index swap variable tuples linear query index swap operator exploratory subquery query  subquery  variable subquery exploration subquery exploratory subquery upload triple data variable however pre upload filter bound reduce tuples reduce data transfer gpu memory index swap VEDAS activity diagram SPARQL query image summarizes overall activity VEDAS framework host gpu SPARQL query parse SV SQ query planner construct subquery  index pre upload filter away tuples upload remainder gpu upload operator interleave scheme tighten bound variable upload upon completion upload task transfer host memory contains related tuples therefore mapping decode transform triple IDs rdf data data initialization VEDAS creates hash transform convert triple IDs along indexer performs sort convert triple IDs permute indexed data triple ID data index       sort triple ID SOP index data component data initialize host data previous suitable explanation query assume previous user sends SPARQL query listing query subqueries listing listing listing listing suppose planner arranges operation execution operation   index upload intermediate variable operation upload  variable respectively upload gpu memory filter max min bound upload index data intermediate operator intermediate apply pre upload filter execution query image intermediate listing image operation performs gpu contains suppose data return host update bound therefore operation bound data transfer gpu memory intermediate variable operation swap index tuples operation return host decode obtain numerical operation assume intermediate obtain operation correspond respectively apply pre upload filter apply pre upload filter bound tuples eliminate uploaded gpu memory intermediate consists similarly uploaded tuples filter bound pre upload filter reduce tuples bound update due intermediate obtain output cannot indexed variable swap index bound update instead upload tuples filter uploaded obtain correspond tuple VEDAS gStore rdf source rdf storage query processing watdiv suite LUBM benchmark watdiv SPARQL benchmark query structure workload generate query category linear query query  query complex query perform specification cpu intel xeon cpu 0GHz GB memory contains nvidia tesla 2GB memory cuda source code implement nvidia thrust library gpu library sort merge gpu option VEDAS demand upload pre upload demand option upload triple data gpu memory filter selection described VEDAS framework operation subquery uploads triple IDs pre upload option uploads triple data excludes index gpu memory triple data another gpu memory reduction upload increase storage gpu memory performance option pre upload filter algorithm gpu memory approach analysis compute data transfer perform demonstrate query speedup gain explain query planner improve speedup storage data file framework generate measurement rdf compress data file gStore file dataset VEDAS vdd file data file triple data calculate file storage byte framework watdiv datasets triple VEDAS memory rdf gStore storage byte query watdiv query categorize rdf gStore query query exclude load data memory query query summation query category query workload query triple display speedup VEDAS query demand pre upload rdf gStore query rdf gStore VEDAS query millisecond query rdf gStore VEDAS query millisecond speedup rdf gStore nvidia nvprof profile proportion computation upload data report summarize intermediate operation upload index swap proportion computation upload query processing analysis watdiv data query query rdf gStore VEDAS VEDAS obtains speedup intermediate operation therefore gpu performs although almost query benefit gpu query perform query query query image query image query image intermediate computation query proportion upload uploaded data therefore query suitable processing gpu upload ratio computation transfer ratio query computation data sort consequently significant computation cpu query VEDAS slowly query computation transfer ratio gpu query upload  slightly cpu approach upload overall gpu approach superior query computation transfer ratio query query upload data without yield speedup leaf opportunity optimize upload reduce intermediate query planner future obvious VEDAS pre upload gain speedup VEDAS demand however demand performance pre upload demand approach practical gpu memory increase processing pre upload filter significantly improve performance LUBM synthetic benchmark watdiv generate dataset triple complex query query query cycle operation variable query intermediate query selectivity finally contains triple selectivity query speedup VEDAS rdf gStore query LUBM benchmark rdf gStore VEDAS millisecond LUBM benchmark speedup rdf gStore VEDAS runtime query notably faster rdf gStore computation query IR therefore advantage gpu architecture query graph however data data upload gain speedup query triple data speedup output selectivity computation selectivity upload triple inefficiency gpu processing speedup VEDAS  rdf  matlab matrix library gpu query tune optimize matrix processing  LUBM difference cpu gpu specification therefore cannot speedup directly however speedup  benchmark LUBM benchmark speedup VEDAS  rdf data transfer percentage operator query data query upload data query upload improve future upload optimize data uploaded reside gpu memory reuse another approach pin host memory increase reduce transfer percentage operation  significant query operation insignificant upload upload moreover usually filter data filter operation input relation intermediate data gpu memory allocation consume query memory usage optimization reuse pool pre allocate memory encode decode VEDAS triple integer IDs reduce data transfer volume transform SPARQL query decode triple hash std unordered implement hash encode decode encode almost insignificant immediately encode query hash constant access decode depends query encode query millisecond decode query watdiv perspective acceptable assumption memory enormously dataset cannot reside memory complex data structure index split access parallel processing decode query planner VEDAS potential enhance performance improve query planner component explain subsection query planner planner normal approach considers leftmost subquery fashion bound variable update operation reduce upload data triple exist filter data upload operation query upload operator uploaded operator intermediate IR output triple uploaded gpu memory triple uploads data query processing VEDAS benefit pre upload filter upload data therefore apply cardinality estimation predict intermediate query planner reduce data related upload operation query query watdiv complex query triple subqueries variable hence performs upload operation index swap operation query numerous query optimal query operation summation query triple stage previous processing subquery index swap operation slowest index swap operation uploads data query faster computation dominates query query planner considers gpu operation efficient accurate cpu gpu data transfer rate latency computation performance gpu model improve query operation query extension operation implementation focus SPARQL project variable advanced query implement guideline optional optional clause equivalent operator simplest scheme handle clause subqueries outside optional clause operation apply listing   inner optional clause  homepage inner union disjunction union operator combine intermediate straightforward approach union operation perform parallel filter filter challenge clause complex expression function regex   concat etc insert information encode integer triple ID data insert specify datatype correspond raw scheme literal filter expression filter encode format data bound filter variable upload gpu memory listing SPARQL query filter clause logical operator handle constraint variable bound query rewrite apply handle operator convert filter operator union clause function mechanism raw data structure function construct component function obtain obtain inner triple filter obtain VEDAS maintains ascend assume literal technique subsection filter variable variable obtain immediately asc desc sort  gpu directly perform parallel sort return user variable query planner planner arranges operator desire processing reduce conclusion future rdf query processing involves triple data processing consume demonstrates handle SPARQL query utilize thread gpu suitable data representation compact data reduce data transfer gpu cpu utilize parallel thread effectively introduce compact representation triple data host gpu memory framework query triple data SPARQL processing utilize gpu propose triple data convert indexed data triple ID triple data host memory uploaded gpu query processing pre upload filter reduce data minimize transfer uploaded data quickly access index index swap operation introduce enable gpu sort merge query combination upload index swap approach achieves speedup rdf gStore demand upload pre upload approach yield execution demand upload choice timing implication approach improve query processing gpu analysis demonstrates query gain advantage framework improve performance overcome gpu memory limitation processing extension multi gpu attractive operator parallelize operator task increase efficiency pre upload filter query faster eliminate triple increase hash function maximize filter tuples algorithm representation another hardware acceleration nowadays multiprocessor architecture popular accelerator emerge focus nvidia gpu technique representation generalize accelerator combination integer ID format index permutation pre upload filter technique apply fpga tpu vector processor operation optimize accelerator application data database addition hardware acceleration trend database researcher attention data database attempt structure unstructured datasets focus rdf datasets semi structure data approach adaptable data database source database distribute manner hadoop file hdfs preprocessing modify convert triple IDs parallel easily hdfs convert representation query proceed obtain convert data file multi gpu cluster machine parallelization query cluster multiple gpus query modify accommodate multiple gpus distribute query