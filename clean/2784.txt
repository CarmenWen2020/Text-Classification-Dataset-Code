nowadays amount data originate complex social network transportation computer service network model graph exploit graph metric betweenness centrality BC popular metric analyze node centrality graph spite potential metric computation graph algorithm compute BC undirected graph exploit cluster algorithm leverage structural graph equivalent node representative node compute BC significantly reduce source shortest exploration adopt brandes algorithm formally graph exploit define algorithm implementation scala sequential parallel reduce execution experimental evaluation version conduct synthetic graph reveals largely outperforms brandes algorithm significantly improves heuristic introduction massive amount data available domain originate complex model graph social network transportation network computer network service network etc network centrality exploit identify important node model centrality metric betweenness centrality BC increase popularity due potential identify critical node metric extent node sustains information node network BC widely undirected graph identify opinion leader influential social network analysis critical intersection transportation network vulnerability computer network threat terrorist network however spite potential computation BC barrier application metric context dynamic graph recent floyd computation overcome brandes algorithm graph exhibit complexity complexity unweighted graph  node however polynomial complexity brandes algorithm almost quadratic sparse graph obstacle analyze network becomes evident limit centrality analysis dynamic network decade researcher therefore aim improve performance brandes algorithm propose algorithm cluster inspire previous approximate BC computation computation BC undirected graph impressive speedup brandes algorithm significant improvement recent variant brandes algorithm cluster algorithm leverage structural graph equivalent node representative node compute BC significantly reduce source shortest exploration brandes algorithm formally graph exploit define implement version algorithm scala sequential parallel reduce execution experimental analysis conduct version algorithm synthetic graph algorithm propose undirected unweighted graph focus unweighted graph extension easily obtain substitute breadth bfs dijkstra algorithm undirected graph social network communication network protein interaction graph interaction graph finite mesh etc graph barab√°si albert graph important target analysis model web internet computer network citation network social network airline network financial network etc contribution introduction concept equivalence reduce BC computation formal proof existence topological identify equivalence respect cluster border node undirected graph variant brandes propagation technique avoid computation dependency cluster node due pivot scala implementation propose algorithm sequential parallel reduce execution extensive evaluation propose algorithm synthetic graph organize related reference literature background introduces notation background concept algorithm basis propose cluster BC computation exploit define algorithm cluster identify equivalent node EC FastBC algorithm illustrates rationale specific implementation algorithm characterize constituent sub algorithm exploit implementation experimental evaluation report experimental obtain propose algorithm synthetic graph characterize topological mathematical foundation dedicate formal proof theorem algorithm BC computation finally conclusion summarizes discus limit propose highlight future improvement related brandes algorithm robust compute BC adequate processing graph BC computation increase rapidly graph sparsely configuration approach approximate developed reduce BC computation improve brandes algorithm propose classify category exploit increase parallelism update BC specific node dynamically evolve graph estimate BC via partial exploration graph node exploit structural graph compress reduce complexity decompose graph cluster worth proposal belong multiple category technique category complement reduce computation exploit parallelism brandes algorithm extremely parallelizable due possibility perform independent breadth bfs dijkstra exploration graph structure efficient parallel implementation BC computation leverage grain multi parallelism concurrently traverse node via data structure granular lock increase concurrency improve version previous approach propose remove lock dependency accumulation stage brandes algorithm adoption successor instead predecessor node author propose mpi parallel implementation adaptive sample algorithm  effort direction exploit amount core available gpus exploit parallelism incremental computation approach avoid recomputing BC node graph previous configuration perform computation portion graph impact recently efficient algorithm BC computation evolve graph propose addition removal however algorithm efficient graph continuous BC processing graph handle significant therefore inefficient MR ibc mapreduce incremental algorithm BC computation dynamic network addition removal exploit distribute compute achieve scalability reduce compute focus related propose instead handle batch update parallel exploit component decomposition technique along structural improve performance approximate computation algorithm aim achieve computation calculate approximate BC brandes  propose approximate algorithm faster BC calculation node pivot source source shortest algorithm strategy random selection pivot achieve accuracy comparable heuristic approach improve author goal algorithm calculate BC node pivot node selection node depends limit BC  adaptive sample algorithm approximate betweenness centrality adopts probabilistic approach BC node probability randomly node randomly shortest belongs algorithm allows specify maximum absolute error probability error guaranteed approach  suite algorithm compute quality approximation betweenness centrality node static fully dynamic graph progressive random sample topology manipulation algorithm exploit topological graph accelerate BC computation propose heuristic simplify BC computation identification structural equivalent node node centrality index contribute equally centrality node partition graph sub graph computation graph partition significantly due quadratic cubic complexity brandes algorithm author combine technique improve speedup brandes algorithm author compression splitting technique developed reduce input graph component parameter affect computation split input graph bridge articulation vertex compress remove identical vertex bridge articulation vertex node respectively removal graph graph component vertex leaf node source target contribute equally computation BC node identical vertex characterize consequently BC vertex node graph induced clique shortest technique author achieve significant speedup graph author propose variant brandes algorithm topological characteristic social network node belonging structure brandes exploration contribution simply compute counting topology manipulation graph compression useful technique graph complementary literature propose reduce complexity decompose graph cluster compute BC cluster graph sub graph calculate BC inside graph compute BC remain graph approach propose technique exploit cluster identify cluster inside graph border node cluster reference node discover cluster node contribute dependency node outside cluster pivot node representative node computation dependency node graph node exploit exploration graph hence dependency cardinality source node belongs sum local contribution BC compute node belonging cluster obtain approximate BC technique classify pivot typically compute approximate BC strategy adopt identify pivot cluster author propose technique cluster reduce complexity BC computation decomposition graph hierarchical sub network  complexity reduce unweighted graph  cluster speedup brandes algorithm graph average graph speedup algorithm improve brandes algorithm propose differently author propose simplify hierarchical representation graph cluster skeleton substitute cluster clique cluster border node reduce node skeleton computationally expensive dijkstra algorithm compute shortest graph moreover propose computes BC node respect subset node graph target target node graph converges towards brandes algorithm additional overhead due creation exploitation skeleton graph recently graph neural network GNN model approximate betweenness closeness centrality propose demonstrates efficient computation BC topic particularly graph neural network propose technique reduce compute BC undirected graph compute BC sum contribution local cluster global cluster category reduce exploration global phase identification pivot node category HSN correction local contribution undirected graph completely remove error computation affected proposal extends previous proposal significantly improve algorithm implementation graph moreover formally correctness propose technique worth algorithm complement algorithm aforementioned category finer grain parallelism category compression technique exploit graph topological within category conversely incremental approximate computation approach specific application regard slowly graph rank exploitation BC respectively scope background introduce notation throughout briefly brandes algorithm finally concept equivalence constitutes basis algorithm undirected unweighted graph vertex node link generic node denote vertex vertex distance denote shortest shortest denote whereas shortest generic node denote worth graph undirected symmetric function generic node predecessor vertex shortest betweenness centrality BC vertex define   BC shortest shortest graph generic node sum refer summary notation notation brandes algorithm brandes algorithm purpose sequential algorithm compute BC notion dependency dependency generic node shortest dependency intermediary node define dependency shortest dependency vertex vertex define  BC redefine dependency     observation brandes algorithm dependency obeys recursive formula  brandes algorithm phase exploit equation source node phase source shortest algorithm breadth bfs execute shortest phase dependency accumulate backtracking along discover shortest recursive relation backtracking node descend distance source phase node algorithm exploit data structure predecessor  shortest source distance source shortest source dependency accumulates contribution source node due destination propagation equivalence reduce exploration BC computation exploit concept equivalence formally sub graph induced node  define equivalence subset node  dependency node destination outside sub graph source exploration representative node pivot dependency node compute compute via pivot cardinality pivot  node outside sub graph    accord notation     equation clearly significantly reduces computation skip exploration cluster BC computation technique identify equivalence reference node generic sub graph reference node  traverse via shortest node  node  easily identify reference node cluster increase identify equivalence cluster technique modularity allows reduce amount connection node belonging cluster consequently lower reference node discover equivalence propose approach relies mathematical sake readability introduce subsection mathematical foundation equivalence cluster assume graph split cluster cluster sub graph induced node  cluster identify border node  border node  node belonging belonging another cluster graphically node border node cluster image discover equivalence cluster node distance shortest border node leverage theorem mathematical foundation theorem formal proof generic cluster graph border node       node belonging sub graph induced node cluster  dependency node  destination  distance shortest border node additive multiplicative factor respectively previous theorem derive corollary formally mathematical foundation corollary     normalize distance generic node generic border node define   normalize shortest generic node generic border node define   normalize distance normalize shortest simplify identification characterize vector normalize distance shortest explain graphical representation graph report decompose cluster separately focus cluster refer illustrate concept equivalence normalize distance normalize shortest cluster equivalent node cluster image node border node remain node related accord detailed node normalize distance normalize shortest border node report accord previous definition node grouped respectively whereas node assign singleton node  cluster BC computation equivalence compute dependency node destination belong cluster source node contribution compute via approach partial obtain BC rewrite       sum local dependency  sum global dependency   sum dependency external node distinguish local global dependency additional properly account existence shortest node cluster via node belonging cluster external node define local dependency node node  sum dependency source destination node belong cluster define local BC node BC compute sub graph local BC compute brandes algorithm inside  generates additional information shortest distance border node information later node equivalence  computation global dependency algorithm implementation global dependency node node  sum dependency destination belong cluster source node global BC generic node sum global dependency source node node dependency node external node  sum dependency destination belong cluster source node denote sum dependency external node source destination cluster zero cluster ideal shortest node cluster node cluster fulfil multiple due presence external node account external node shortest cluster node border node exist shortest exit node belonging cluster shortest external shortest node belong  external node existence external shortest neglect BC computation affected error due incorrect distance shortest node inside cluster consequently error computation local BC identification equivalence introduce approximation error affected previous version algorithm remove intra cluster error propose author cluster hierarchical sub network HSN sub graph induced border node cluster node intra cluster shortest border node cluster retrieve shortest border node cluster via HSN identify external node cluster afterwards extend cluster related external node extend cluster sub graph identify equivalence pivot local BC correctly compute inside extend cluster instead initial formally extend cluster cluster define sub graph induced node    understand HSN built extend cluster illustrative cluster graph cluster node border node node intra cluster shortest cluster node border node node intra cluster shortest finally cluster border node aforementioned node HSN shortest border node via HSN node shortest former node consequently external node external node HSN image dependency pivot equivalence relationship described equivalence pivot representative dependency node destination belong cluster cluster equivalence        equation exploit computation BC building brandes algorithm exploration  cannot directly apply correctly compute global BC cluster source therefore algorithm elaborate approach properly efficiently calculate contribution pivot  BC node  decompose global dependency cluster node        previous equation simplify mathematical foundation undirected graph     rely becomes replace zero sum dependency   compensate later lack sum dependency   global dependency therefore redefine      pivot efficiently compute global BC     global dependency node node destination belonging belonging global dependency node node destination belonging rewrite      therefore cluster equivalence            equation propagation phase distinguish contribution due destination inside cluster contribution due destination outside cluster understand formula illustrative leverage cluster graph equivalence cluster pivot node equivalence compose node node accord propose approach calculate dependency node node cluster avoid calculate dependency node computation however dependency node node belonging cluster pivot node equivalent reference border node cluster node therefore dependency node compute instance node node avoid dependency later compensate exploration pivot node global exploration pivot image propagation differently brandes algorithm directly express global dependency  node  global dependency  indeed cluster destination belong compose destination belonging destination belonging former dependency whereas latter operation overcome apply classic recursive formula brandes algorithm vector contribution propagate global dependency  dimension vector contribution correspond cluster contribution due destination assign   formally recursive formula      boolean variable  propagation phase dependency node belonging cluster pivot source node whereas dependency node belonging cluster compute formula       finally accord  cardinality equivalence belongs EC FastBC algorithm EC FastBC algorithm implementation cluster introduce previous discus parallel version mapreduce louvain cluster node cluster minimize border node  consequently  cluster exploit modularity cluster algorithm modularity scalar metric define density link inside cluster link inter cluster link consequently maximize modularity reduces border node cluster allows complexity algorithm reduce HSN node topological normalize distance normalize shortest compute maximise equivalence node vector topological increase probability linear dependency consequently highly beneficial perspective reduce exploration louvain modularity cluster technique complexity  brandes algorithm louvain algorithm phase iteratively phase node assign cluster cluster ensures maximum increase modularity respect previous configuration phase terminates node explore modularity improvement phase graph generate identify cluster node loop inside loop phase graph generate phase phase iterate maximum modularity hierarchical structure cluster output algorithm consequently modularity identify cluster affected node evaluate influence computation improve sub optimal modularity multiple algorithm perform network associate analysis node algorithm implementation algorithm report pseudo code EC FastBC algorithm input undirected unweighted graph output BC node algorithm compose phase detailed description intermediate phase associate pseudo code relevant algorithm louvain modularity cluster algorithm exploit splitting graph cluster louvain cluster cluster explicitly dedicate data structure graph filter membership information node identify border node  node existence belonging cluster node building HSN refer  retrieve detailed pseudo code algorithm HSN execute  local bfs border node source  local refers node belonging cluster  exploration bfs return predecessor  node  shortest later algorithm discover shortest backwards destination traversal return node shortest border node cluster node source destination border node belong HSN therefore node  identify external node  detailed algorithm bfs execute source  exploration node HSN  bfs return predecessor node  shortest  similarly previous shortest backwards destination source predecessor node belonging cluster external node  extend cluster generate algorithm cluster update external node compute extend cluster local BC node BC contribution external node topological node normalize distance normalize shortest compute respect border node belonging cluster node topological subsequently equivalence equivalence cluster modify version brandes algorithm enables computation metric described algorithm difference canonical implementation brandes algorithm related propagation phase contribution due external node destination propagate non local destination compute global BC algorithm modify version brandes algorithm exploit pivot randomly exploration pivot global dependency   compute node graph global BC node obtain sum global dependency derive pivot finally algorithm previously compute partial aggregate via sum operation obtain BC node parallel implementation reduce propose EC FastBC algorithm parallelize execution sub algorithm highly parallelizable exception cluster algorithm exploit data parallelism perform operation partition graph leverage mapreduce paradigm computation apply node graph report representation parallel version EC FastBC built concept introduce apache spark popular data processing report experimental evaluation spark application generally define transformation action apply resilient distribute datasets RDDs RDDs immutable collection data partition across worker node cluster transformation action parallel partition transformation function RDDs invoked whereas action function return computation perform rdd reduce spark description EC FastBC execution solid arrow dash broadcast variable task depict rectangle cube respectively RDDs non rectangle image spark application collection perform action execute executor deployed worker node cluster parallel task partition rdd task encapsulate transformation apply RDDs latter node cluster node host driver responsible application RDDs input possibly across executor broadcast variable lazily worker node execution parallel version EC FastBC sequence implement sub algorithm algorithm detailed execution solid arrow whereas dash arrow data via broadcast spark worker executes specific task illustrate receives input RDDs parallelism task broadcast variable task partition task behavior input organizes graph cluster algorithm perform parallel execution louvain configuration aim cluster modularity input graph broadcast variable output cluster rdd data enables parallel execution multiple louvain identifies border node algorithm node existence belonging cluster input cluster graph broadcast variable rdd contains node analyze built graph vertex retrieves HSN node algorithm perform border node constrain intra cluster bfs border node cluster graph input broadcast variable border node rdd nevertheless execution availability border node avoid cluster perform  destination border node discovers external node algorithm  bound node belonging HSN consequently HSN node additional input broadcast variable rdd output cluster extend external node computes local BC BC external node normalize distance normalize shortest algorithm receives graph cluster extend cluster border node input transfer broadcast  rdd contains node graph identifies equivalence pivot algorithm rdd contains topological normalize distance normalize shortest per node input broadcast variable previous computes global BC algorithm rdd compose pivot cardinality equivalence input via broadcast variable graph cluster BC obtain aggregate previously calculate perform entirely driver sequential manner node grain function encapsulate various task define node node border node pivot report detailed description exemplify perform solid arrow elaboration phase dash data transfer phase dot transformation apply task host executor partition dash report source code related whereas report source code task pipeline trigger action driver initial rdd execute parallelize partition executor executor partition partition executor along operation perform operation encapsulate task operation generates intermediate rdd unique node identifier boolean false depends node border node filter operation creates intermediate rdd finally operation rdd extract previous hence border node driver reduce detailed description elaboration data transfer phase solid dash arrow transformation apply task dot related source code dash image experimental evaluation report experimental evaluation conduct algorithm sequential parallel execution graph graph execution obtain algorithm obtain algorithm algorithmic speedup algorithm algorithmic speedup core  define     computation obtain core algorithm respectively hence faster compute resource  therefore faster EC FastBC algorithm label brandes algorithm label propose label chose algorithm comparison belongs category cluster computation address BC computation however due unavailability source executable code metric sequential mode rely indication author computation explore performance analyze efficiency EC FastBC algorithm canonical definition speedup specifically speedup obtain core define computation sequential mode computation core efficiency core define efficiency influence metric demonstrate analysis definition speedup      execution sequential mode speedup obtain core algorithm similarly    equation definition metric      definition efficiency     consequently      relationship suggests comparable efficiency core depends ratio execution algorithm sequential mode insight comparatively analyze finally breakdown analysis computation useful investigate contribution compose sub algorithm report checked accuracy zero error BC datasets synthetic graph category focus graph generate implementation barab√°si albert model python library networkx accord model graph node grown attach node preferentially attach exist node preferential attachment coefficient graph average approximately preferential attachment coefficient choice motivate feature implementation algorithm benefit modularity dataset scenario however mention introduction limit applicability barab√°si albert model analyze algorithm performance scalability generate graph topological information synthetic graph category focus  available public datasets report graph relevant graph average  max  average cluster coefficient  datasets related lyon network graph experimentation testbed platform server machine GB ram socket intel xeon cpu 0GHz physical core thread per core logical core per socket virtual core hyper thread linux debian operating brandes algorithm EC FastBC implement scala execute apache spark standalone mode deploy spark cluster compose node worker node available resource core approximately 5GB memory perform employ driver core 0GB memory variable executor variable amount memory compute resource specifically core sequential execution executor resource core 0GB memory fix core experimentation instantiate executor core amount memory evenly executor instance core deploy executor 0GB memory core executor GB memory deployed RDDs decompose partition core synthetic graph analysis algorithmic speedup EC FastBC brandes algorithm  obtain synthetic graph sequential parallel mode node core estimate regression computation brandes algorithm graph node execution whereas algorithm maximum min respectively sequential mode highlight  increase graph meaning EC FastBC faster brandes algorithm speedup grows graph due computation algorithm strongly dependent border node  pivot external node  addition node variable increase slowly node almost zero drawback  decrease core increase behaviour due brandes algorithm efficient EC FastBC ratio   relationship metric efficiency consequently sequential preserve core increase however efficiency analysis clarify EC FastBC scalable brandes algorithm graph exploit available compute resource statement confirm clearly graph core performs  core core behavior core graph comparison brandes algorithm algorithmic speedup analysis  image comparison brandes algorithm efficiency analysis image understand performance EC FastBC investigate efficiency respect brandes algorithm report efficiency analysis perform algorithm efficiency decrease core increase core increase node increase however worth highlight efficiency analysis overlap node graph aim algorithm graph efficiency trend almost report moreover maximum node algorithm brandes efficiency approximately core parallel configuration significantly diverge core increase efficiency EC FastBC decrease rate behaviour reduce amount computation indeed pivot significantly decrease modify brandes exploration perform graph heaviest computation reduce workload core introduces another benefit allows mitigate variability computation due topological characteristic graph partition data perform spark execution indeed exist partition RDDs characterize concentration node generate complex shortest partition directly impact rdd partition parallel however spark task partition sequentially aspect combine partition rdd core default partition scheme spark distributes data evenly across partition explains punctual efficiency plot related brandes algorithm graph node core report algorithmic speedup EC FastBC brandes algorithm  alongside algorithmic speedup approach brandes  synthetic graph sequential setting  analytically compute comparison propose algorithmic speedup analysis synthetic graph sequential mode    synthetic graph synthetic graph analysis therefore zoom visible reader image equation  depends cluster average   approximate  therefore synthetic graph average constant cluster increase node  approximately average cluster closer  algorithm propose improve brandes conversely multiplicative factor conclude outperforms synthetic graph graph analysis report analysis   graph  compute outperforms comparison propose algorithmic speedup analysis graph sequential mode   image confirm consideration scalability report previous analyze algorithmic speedup efficiency EC FastBC lyon network graph pivot node algorithmic speedup factor confirm usefulness although report comparable obtain synthetic graph node spite algorithm becomes scalable efficient synthetic graph node due increase amount computation border node pivot external node dependency relationship metric efficiency core difference efficiency brandes algorithm EC FastBC decrease increase algorithmic speedup analysis lyon network graph parallel mode  image efficiency analysis lyon network graph comparison synthetic graph node brandes algorithm graph image breakdown computation analyze contribution component sub algorithm overall computation EC FastBC goal analysis bottleneck limit scalability consequently improvement split algorithm algorithm dataset reading louvain cluster HSN external node local BC prop pivot global BC accumulation report obtain algorithm synthetic graph node sequential parallel mode parallelism exploit core axis breakdown analysis computation synthetic graph node image breakdown analysis computation synthetic graph node image exhibit computation global BC local BC prop scalability increase resource maximum limit core translates reduction heaviest louvain cluster computation decrease augment parallelism beyond core due chosen launch parallel execution louvain configuration aim cluster modularity aspect highlight potential bottleneck computation louvain cluster parallelism becomes comparable related global BC local BC prop already synthetic graph analysis external node synthetic graph almost zero therefore contribution HSN external node relevant pivot accumulation latter sequential entirely perform driver therefore core dataset reading computation slowly increase core due overhead introduce initial rdd reading data file partition core computation becomes comparable obtain local BC prop global BC parallelism increase worth synthetic graph sort scenario border node pivot almost absence external node allows excellent performance realistic scenario analyze focus graph report algorithm ego twitter  sequential parallel mode HSN external node becomes heaviest contribution comparable local BC prop mainly due increase external node confirms importance achieve ideal cluster consideration synthetic graph apply remain contribution breakdown analysis related ego twitter graph breakdown analysis computation graph ego twitter image mathematical foundation cluster BC computation algorithm relies multiple mathematical computation BC mathematical proof mathematical foundation theorem corollary basis algorithm theorem node cluster satisfy dependency node outside cluster destination outside cluster theorem generic cluster graph border node       proof rewrite statement theorem        hypothesis theorem lemma permit express relationship distance cluster border node equivalence border node traverse node outside cluster lemma   denote border node cluster shortest   constant node     proof border node    definition shortest node  hypothesis easily rely hypothesis lemma exploit relationship distance generic node border node  obtain derive belong shortest  relation node  belong shortest conclude   likewise     therefore conclude relationship       prof lemma proof theorem purpose lemma lemma node cluster node   border node cluster belong shortest    proof leverage bellman criterion   hypothesis theorem  equivalently    therefore becomes   hypothesis lemma       evident lemma via lemma respectively therefore theorem normalize distance shortest fulfill theorem hence node equivalence corollary       proof corollary equation     generic node belonging cluster           definition easily          constant  corresponds likewise             corresponds equation jointly satisfied corollary theorem undirected graph     proof dependency pivot entirely  remove estimation error previous implementation computation global dependency proof thanks undirected graph         variable         conclusion algorithm perform computation BC undirected graph algorithm exploit cluster structural graph reduce compute algorithm exhibit impressive speedup brandes algorithm label graph attachment coefficient significant speedup achieve graph demonstrate obtain graph reduction computation mainly due adoption pivot node contribute equally dependency graph node described sequential reduce parallel version algorithm implement scala spark experimental analysis perform reference core exploit computation reveal efficiency slightly brandes algorithm increase graph granularity per spark task computation graph due relative pivot speedup EC FastBC strongly depends pivot cluster modularity role computation algorithm future aim cluster effectively identify border node synthetic graph topology finally investigate mapping algorithm distribute resource data parallelism exploit improve locality spark executor