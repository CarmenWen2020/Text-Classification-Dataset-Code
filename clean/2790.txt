era global service organisation volume data distribute across multiple data centre vast geographical distance cluster compute application mapreduce spark widely deployed data centre commercial application scientific research across geo distribute data centre necessity utilise infrastructure introduces challenge data analytics due bandwidth limitation inter data centre communication article discus challenge survey geo distribute data analytics framework scheduler mapreduce spark wan bandwidth awareness introduction nowadays service provider microsoft amazon google deploy data centre DCs across location customer access service geographically distribute site data generate application sensor network climate stock exchange social networking application file distribute server video distribute camera scientific application analyse massive amount geo distribute data daily requirement decision data analyst application data processing framework mapreduce hadoop spark dryad efficiently analyse datasets framework assume data centre deployment network generally available homogenous trivial centrally aggregate data site however analyse applicable due privacy regulatory constraint proven costly wasteful wan bandwidth geo distribute scenario data generate location across multiple data centre geo distribute data processing framework assign computation data aggregate output computation site execute computation global overview geo distribute data processing image briefly geographically distribute data analytics gda execute across location local transparent user exist data processing framework movement data relevant output handle task node rack DC failure  recent effort propose framework schedule technique hadoop mapreduce spark enable data analytics across multiple DCs however framework optimise inter DC bandwidth heterogeneity limitation addition assume site homogenous available computational capacity conform reality review popular framework account wan bandwidth formulation performance geo distribute dependent wan bandwidth amount inter DC data movement survey choice geo distribute data analytics identify engineering efficient bandwidth aware geo distribute analytics framework survey criterion inter DC bandwidth heterogeneity improve application span query execution minimise inter DC data transfer focus geo distribute schedule resource allocation mechanism exclude flutter    focus data exclude  propose gda service available specific provider exclude  framework distribute data across DC computation exclude  photon data already distribute computation geo distribute machine exclude gaia publish exclude previous survey domain extend scope previous survey recent advance geo distribute compute focus particularly geo distribute wan bandwidth aware data framework reflect specific motivation motivation challenge challenge geo distribute compute feature geo distribute categorisation geo distribute data processing goal organisation researcher comprehensive review geo distribute data processing efficient deployed production survey geo distribute data processing framework wan bandwidth awareness pro con framework categorise processing technique batching micro batching native data framework mapreduce spark flink feature data locality multi cluster architecture recommendation future privacy security authentication mechanism framework decentralise architecture flexibility fault tolerance gda machine improve schedule task placement remainder organize background introduces data batch framework gda survey motivation motivation geo distribute data framework challenge describes challenge geo distribute data processing geo distribute data processing review categorise bandwidth aware gda framework finally conclusion issue concludes background briefly introduce background data batch processing framework batch processing framework batch processing widely processing amount data data undergoes processing various analytical obviously processing amount data considerable amount briefly introduce mapreduce framework processing data batch mapreduce mapreduce program model introduce google parallel processing datasets machine failure manner mapreduce data phase input data split assign mapper machine distribute phase split apply user define function transform input data intermediate data sort shuffle phase intermediate data reducer mapper reduce phase data mapper apply user define reduce function generate output mapreduce algorithm execution image apache hadoop apache hadoop source implementation mapreduce distribute storage parallel processing datasets cluster node mapreduce submit resource manager supervises assigns execution task node manager resource manager responsible resource allocation node manager monitor node reserve resource container task execution illustrate hadoop distribute file hdfs distribute file data storage mapreduce application hdfs input file mapreduce MB MB replicate DataNodes fault tolerance apache spark apache spark cluster compute platform hadoop mapreduce extends model computation interactive query unlike hadoop mapreduce output task disk spark output memory increase data processing architecture hadoop cluster image resilient distribute dataset rdd fundamental data structure spark dataset rdd split logical partition node RDDs python java scala user define comparison data processing technique processing framework unlike batch processing processing data immediately continuously processing native incoming immediately without others operator continuously pas micro batching incoming batch define interval mini batch spark spark extension core spark api processing data micro batch define discretized   built RDDs perform computation integration spark component mllib spark sql apache flink flink source framework data native instantly pipelined operator flink fault management throughput compatibility mode allows exist unmodified apache storm mapreduce code flink comparison processing approach data analytic complexity latency framework data data centre network generally available homogenous motivation exist data centre argue geo distribute data analytics motivation geo distribute data framework geo distribute application organisation operating around deploy application geo distribute data centre customer latency requirement thereby volume data generate geo distribute location aggregate data location processing proven wasteful costly resource data framework assign computation data aggregate relevant output computation site execute computation data centre failure  data centre failure unusual however service interruption organisation host application DC fault tolerance already manage data framework disk node rack failure replicate data across node data replication expand outside data centre introduce architecture task data replication technique geo distribute data processing handle DC failure regulatory constraint recently government increase restriction data movement storage centrally aggregate data location computation unattainable sensitive confidential raw data health data within acceptable however sensitive raw data outside breach privacy therefore mandatory geo distribute processing maintain data privacy avoid raw data movement transfer desire intermediate data challenge aggregate data location proven wasteful costly limit timeliness analytics approach data distribute task across cluster approach challenge elaborate remainder network constraint important characteristic geo distribute data analytics network resource heterogeneity wan bandwidth limited comparison local network lan bandwidth report intra DC bandwidth around mbps whereas inter DC bandwidth around mbps addition available bandwidth considerably DC another difference network hardware traffic non analytics application cluster report variation amazon EC DCs microsoft inter DC bandwidth fluctuation unpredictable data transmission impact performance geo distribute computation significantly wan bandwidth significant constrain bottleneck geo distribute data analytics heterogeneous cluster mention introduction recent assume site homogenous available computational capacity conform reality cluster built investment capacity requirement report computational resource magnitude across site cluster resource non analytics application client service limit available computational resource data analytics increase heterogeneity furthermore proven memory become bottleneck runtime data analytics query heterogeneous data globally distribute sensor network data generate dependent frequency sensor data distribution varies significantly constant moreover geo distribute data site analysis distribute dataset problematic balance site computational resource proportional data generate decentralise centralise architecture image comparison data processing technique geo distribute data processing survey geo distribute data framework bandwidth scenario data already distribute multiple site computation review framework mapreduce spark flink feature resource management fault tolerance data locality multi cluster categorise architecture centralise architecture site resource worker site decentralise architecture site worker site traditional cluster collaborate computational data resource geo distribute geo distribute batch processing framework mapreduce framework  platform mapreduce allows geo distribute computation without modification hadoop framework faulty scenario accidental malicious outage  replica mapreduce validates computation output replicate accidental fault execute faulty malicious fault outage executes faulty another  identify compromise scenario malicious fault   replicates task instead proxy replica output reduce task identify faulty task immediately execute instead execution  launch replica faulty task accidental fault malicious fault outage  executes replica faulty task another fault task  execute malicious fault outage happens reduce phase pro   schedule replicate task across multiple   computational core cpu memory bandwidth decrease completion  locality network aware scheduler data locality replication data migration optimise makespan data intensive geo distribute centralise global scheduler manages fifo queue submit decides task replica access DC local scheduler maintains report global scheduler progress local task queue task placement data access described linear program LP  solver propose online heuristic algorithm favour data locality data migration data transfer remote data centre algorithm data replica data centre link  decrease makespan processing algorithm remain within closer optimal LP solver architecture  image propose geo distribute mapreduce framework minimises traffic DCs jointly input data movement task placement input data task remote DCs inter DC traffic reduce data movement task placement formulate non linear optimisation  technique replace non linear constraint linear approximation approach relax constraint achieve predict completion component parameter extractor estimate parameter bandwidth cluster information OI ratio analyse execution sends parameter optimiser optimiser algorithm determines input data movement task placement estimate parameter algorithm minimises inter cluster traffic incur mapreduce data loader task  input data retrieve data loader accord task placement choice optimiser data split load task  task reduce task spark framework  geo distribute framework reduces query response detect bottleneck runtime  monitor performance metric cpu memory network disk autoregressive integrate average ARIMA slide hidden markov model  detect resource bottleneck runtime schedule algorithm considers data locality bottleneck severity assign task worker node binding algorithm sparrow avoid false positive detect bottleneck task submit worker node  framework machine technique detect runtime bottleneck  implement spark achieves accuracy bottleneck detection reduces query response deployed across amazon EC pro author  machine detect runtime bottleneck con author mention dataset training machine model  data network aware algorithm spark geo distribute data processing algorithm advantage data locality reduce transfer schedule computation execute schedule computation reduce computation movement described integer linear program ILP gurobi solver component computation movement model  attribute    location matrix matrix location reduce task location node computation  defines task belongs reduce phase  data location output task   function submits task execute  rdd dependency  task  calculates computation location computation location rdd dependency reduce computation location ILP matrix   node overload cannot execute task stage matrix sort node node task compute resource available reportedly  improves performance geo distribute data processing spark default scheduler deployed data centre con  performs poorly data distribution unbalanced data centre  geo distribute multiple resource allocation spark considers heterogeneous bandwidth compute resource schedule reduce task  consists manager global manager site coordinate analytics across site adjust workload data location site manager site execute assign local resource notify global manager resource schedule multiple compete geo distribute cluster simplify schedule extend multiple linear program described optimise execution available compute slot bandwidth constraint shortest remain processing  LP schedule compete geo distribute  improves average response exist locality technique iridium tetri deployed across amazon EC tpc DS data benchmark pro  effort towards multi resource schedule data analytics across geo distribute cluster considers data distribution compute capacity network bandwidth heterogeneity con  network congestion DCs suitable orient workload  decentralise geo distribute data analytics efficiently collection DCs DC traditional cluster mode geo distribute mode collaborate DCs  applies adaptive feedback algorithm AF parametrized delay schedule steal  extends delay schedule algorithm manager JM respectively manage resource schedule task geo distribute cycle  consists illustrate lifecycle  image submission manager generation user submits acyclic graph dag generates manager accord description primary JM directly cluster description remote remote resource semi active  remote cluster resource request task execution manager request local computational resource task executor container scheduler schedule resource  return container request resource  submit task container dag unfold multiple  built spark yarn zookeeper synchronize  deployed machine across alibaba   improvement average response improvement makespan comparison decentralise architecture static schedule algorithm pro decentralise architecture propose  flexibility multi cluster respect regulatory constraint  aware geo distribute data analytics determines reduce task placement data transfer wan bandwidth intermediate data location preference performance application  gda  reduce task placement multi data transfer provider data transfer rate task placement described mip input preference application minimum minimum latency data transfer information website provider network bandwidth information executor DC estimate bandwidth data transfer DCs data shuffle task information available  spark output mip task DC plus latency network task mip shuffle stage output scheduler assigns task DCs dynamic network contention bandwidth detect scheduler heuristic assigns task another idle DC respect preference  built spark framework spark  setting  reportedly reduces without impact performance reduces query execution without impact baseline approach centralise minimum vanilla spark bandwidth aware iridium pro  flexibility application latency regardless minimum regardless latency program dag stag strategy image harmony geo distribute processing framework jointly considers wan bandwidth computational capacity stag schedule goal minimise application execution apache spark program define dag node operator data dependency respectively spark stag strategy shuffle dependency operator stage prevent operator execute previous stage harmony stag strategy critical dag operator node shortest execution greedy algorithm determines operator shuffle dependency illustrate operator shuffle dependent assign stage minimise overall computation harmony scheduler determines minimal computation stage input data computation capacity DC data transfer compute DC link link assign task location input data allocate DCs minimal computation stage minimum data transfer data transfer harmony implement apache spark report faster iridium deployed aws EC location uniform non uniform network link bandwidth respectively sql style processing framework turbo geo distribute analytics framework machine predict output execution query optimise performance geo distribute query dynamically query execute response resource variation memory cpu wan bandwidth framework perform framework spark hive pig without alter layer functionality task schedule placement data replication sample dataset built query tpc benchmark output completion query feature cpu core memory available bandwidth etc handcraft feature feature nonlinear feature predict completion output query architecture turbo consists component illustrate overview turbo image model training absolute shrinkage selection operator lasso regression analysis important feature discard irrelevant predict output lasso alone unable predict completion relationship feature completion nonlinear gradient boost regression gbrt regression technique prediction model ensemble weak regression unlike linear model boost model capture non linear interaction feature target gbrt feature lasso input predict completion estimator query execution series output input scenario output DC predict ML model reduce task multiple DCs output across DCs predict ML model predict conquer heuristic partition series sub predict ML model runtime  adjustment regularly adapts query execution runtime dynamic explore greedy policy pairwise lookahead shortest completion  selects pairwise completion maximum data reduction  selects pairwise difference volume input output data maximum data reduction rate  selects pairwise maximise data reduction input minus output estimate joint completion turbo achieves estimation accuracy reduces query completion deployed google cluster instance distribute across  similarity aware geo distribute data analytics reduces shuffle consequently minimises query completion  pre generate data olap data cube query arrives  olap instruction dice slice retrieve attribute query similarity attribute organise data prepares datasets similarity aware data placement query   extends iridium task data placement probe contains representative dataset identify data bottleneck DC DCs linear program LP reduce task placement bottleneck DCs detection  spark reduce query completion comparison iridium deployed across amazon EC pro  extends iridium data similarity optimise data datasets query access con iridium  assumption query arrival overhead olap cube batch processing framework hierarchically distribute data matrix multi cluster HDM MC data processing framework data analytics multiple cluster HDM MC extension hierarchically distribute data matrix HDM data representation contains format location dependency input output parallel execution data intensive application framework consists component responsible multi cluster coordination planning schedule respectively review detail multi cluster coordination HDM MC coordination architecture hierarchical architecture decentralise architecture hierarchical architecture super cluster coordinate multiple cluster contains worker resource decentralise architecture super sibling collaborate manage worker update information resource sibling multi cluster planning planning phase perform stage planning task planning stage planning computational execute multiple stage belongs category local input datasets cluster performs planning stage schedule cluster remote input datasets another cluster stage submit execution cluster contains input datasets collaborative input datasets distribute multiple cluster stage  schedule sibling cluster task planning stage identify stage planning schedule execute cluster task schedule multi cluster schedule explain layer schedule layer monitor schedule stage layer receives monitor schedule task active stage apply schedule strategy delay schedule task duration achieve data locality min max schedule task schedule estimate minimum completion min max aware distance worker network hungarian algorithm graph algorithm optimal shortest distance node worker graph pro HDM MC  dynamic switch architecture multi cluster exist data framework geo distribute processing framework micro batch processing framework iridium latency geo distribute analytics minimises query response optimise data task placement query redistributes datasets DCs prior query arrival task site bandwidth reduce network bottleneck execution task placement formulate linear program LP model site bandwidth query characteristic gurobi solver greedy heuristic iteratively chunk access datasets datasets amount intermediate data architecture iridium consists component local manager centralise global manager local manager executes assign task available resource site centralise global manager convert query acyclic graph DAGs stage coordinate query execution data location across site iridium implement spark reportedly query  bing tpc DS berkeley data benchmark wan bandwidth usage deployed across amazon EC pro iridium incorporate knob budget wan usage minimises query execution latency relevant intermediate data prior arrival query con iridium network congestion DCs assumption query arrival propose geo distribute spark framework aim reduce processing micro batch jointly micro batch bandwidth task schedule rout data described non convex optimisation combination alternate direction multiplier ADMM lasso propose ADMM algorithm aim reduce query response bandwidth route spark  source collection site algorithm converge within iteration iteration batch selection available bandwidth link batch query execute frequently network whereas bandwidth batch propose spark framework reportedly reduces query processing latency improves network transfer spark framework deployed cluster amazon EC instance emulate bandwidth coexist query wordcount grep native processing framework  geo distribute processing  processing adaptive sample data cube abstraction architecture component worker node data processing centralise coordinator manages distributes computation across available worker client cycle query  client program generates sends data graph execution data graph checked structural error submit coordinator centralise coordinator assign link data operator worker sends relevant subset graph node node establish network connection operator query coordinator sends signal source message data pro  wan bandwidth limitation compromise quality performance sensor network con output quality performance inaccuracy architecture  image  wan aware geo distribute processing apache flink incrementally enables geo distribute query execution policy input query subset input data operator query execution data processing input data output query output intermediate utilises policy generate query execution schedule execution wan aware manner consists component illustrate wan monitor monitor wan bandwidth availability site detects congest link ratio bandwidth utilisation maximum available bandwidth manager deployment exist query information query optimiser query optimiser  generates query execution identify commonality query exist inter site bandwidth information scheduler schedule deploys operator instance compute node minimise latency wan bandwidth consumption recovery manager query execution allows failure  query execution  achieves throughput wan bandwidth utilisation deployed across geo distribute amazon elastic compute EC data centre twitter data twitter apis  resource aware adaptive processing aim maintain latency execution dynamic resource workload variation straggler failure adjust physical logical query runtime multiple technique task assignment operator query replanning  architecture consists manager JM multiple geo distribute task manager TM DC JM query planner generates query execution scheduler schedule assigns task TMs wan monitor monitor report wan bandwidth query planner scheduler global metric monitor metric TM local metric monitor identifies dynamic occurrence reconfiguration manager adjusts query execution global metric monitor detects dynamic TM local metric monitor monitor task performance processing latency rate checkpoint manager task task resume execution task failure migration reconfiguration manager query planner scheduler adjusts query execution technique task assignment assign task described ILP aim minimise data network transmission delay inbound outbound bandwidth compute resource constraint operator instantiate operator site computational bottleneck detect instantiate operator across site network bottleneck detect reduce operator resource allocate due misconfiguration query planning query planner heuristic algorithm generate multiple execution scheduler computes task placement selects placement delay  implement apache flink reportedly handle dynamic overhead maintain quality deployed across node DC node simulated network bandwidth latency conclusion issue mapreduce spark flink widely commercial application scientific research geo distribute data analytics analytics across geo distribute site none wan bandwidth important factor geo distribute data processing overview framework data analytics challenge efficient geo distribute data processing investigate geo distribute analytics heterogeneity wan bandwidth survey highlight issue direction future development security privacy review geo distribute data framework none security privacy due regulation data storage movement impose government recommend researcher focus authentication mechanism trust model geo distribute data analytics applicable realistic decentralise architecture another important issue throughout survey lack framework decentralise architecture multi cluster  HDM MC feature decentralise geo distribute data flexibility deployment autonomous geo distribute cluster coordinate geo distribute avoid  DC failure moreover decentralise combine security authentication mechanism regulatory constraint restriction machine  turbo machine efficient schedule task bottleneck detection predict query however unanswered performance metric training bottleneck detection model feature accurately efficiently predict task execution benchmark generate training dataset evaluate turbo structure data  future research focus semi structure unstructured data evaluate resource manager review resource manager yarn lan bandwidth yarn resource recently knowledge none exist geo distribute manages wan bandwidth resource resource manager wan bandwidth challenge combine decentralise architecture distinguish local geo distribute abbreviation wan network DC data centre hdfs hadoop distribute file rdd resilient distribute dataset lan local network LP linear program ARIMA autoregressive integrate average  slide hidden markov model ILP integer linear program  shortest remain processing JM manager dag acyclic graph lasso absolute shrinkage selection operator gbrt gradient boost regression ML machine  shortest completion  maximum data reduction  maximum data reduction rate olap online analytical processing HDM MC hierarchically distribute data matrix multi cluster