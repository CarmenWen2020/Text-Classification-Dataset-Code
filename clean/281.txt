intrusion detection IDS content header payload packet detect intrusion network essential function network security traditionally IDS snort widely source IDS implement program user hardware server recently availability extend bpf eBPF linux kernel efficiently filter packet directly kernel becomes feasible implement IDS linux kernel eBPF perform pre portion packet user examines packet modify version register ruleset snort experimental maximum throughput IDS outperform snort factor previous keywords intrusion detection IDS eBPF snort introduction extend bsd packet filter eBPF kernel virtual machine widely packet filter monitoring utilizes hook kernel customize behavior kernel purpose hook express data XDP allows eBPF program attach network device driver XDP customize program packet stage eBPF advantage firstly kernel bypassing technique data development kit dpdk eBPF closely cooperates exist network stack selectively data structure function network stack eBPF greatly development effort secondly eBPF achieve performance data application XDP packet layer network stack processing overhead XDP relatively finally eBPF dedicate cpu core packet processing contrast dpdk network driver polling mode occupies cpu core waste compute traffic load eBPF interrupt mechanism cpu usage proportional traffic load eBPF performance cpu efficiency exist network stack variety network application intrusion detection IDS network function examines packet detect network attack IDS perform packet inspection dpi packet significantly impact throughput detect packet URLs machine classify url malicious dpi perform IDS production environment performance critical hardware IDS prefer throughput processing packet software IDS advantage scalability recently network function virtualization NFV service function chain sfc become popular IDS software gradually attention mature source IDS software snort  however currently performance IDS software mitigate propose approach integrates eBPF program kernel program user contribution firstly propose eBPF approach implement IDS although eBPF perform task parse packet header accept reject packet tuple information header contrast addition filter packet information header eBPF program IDS arbitrary parallel packet payload secondly modify version register ruleset snort experimental maximum throughput almost snort structure typical usage IDS related brief introduction eBPF XDP aho corasick algorithm snort implementation IDS experimental setup performance evaluation finally discus future concludes network architecture typical usage IDS assume network attack internet malicious traffic router firewall traffic firewall trust host local network lan IDS attach switch traffic traffic passing switch mirror IDS examination IDS generate alert inform network administrator related nowadays network attack frequently motif efficiently filter attack packet becomes important snort  ability filter packet eBPF however parse layer header neither eBPF packet payload snort specify tcpdump style filter expression command option expression later convert eBPF instruction similarly eBPF task  packet filter load balance XDP bypassing difference  customize eBPF program expression feature flexibility user besides examine payload packet eBPF contrast  perform eBPF context currently impossible perform dpi  eBPF author implement eBPF dpi scheme detect video frame packet however fix format packet inadequate IDS  host IDS eBPF however detects anomaly network anomaly eBPF widely data application author thorough survey eBPF survey technical detail utilize eBPF network function rewrite eBPF switch rout firewall advanced feature eBPF enable develop complex application load balance storage application filter distribute denial service DDoS mitigation specifically research eBPF related NFV boom recent  kernel framework building network function construct kernel service function chain sfc feature eBPF author limitation eBPF eBPF author performance eBPF filter packet tuple information packet header nowadays 5G network become popular author implement source 5G mobile gateway eBPF author eBPF inter VM virtual machine traffic monitoring author propose framework implement eBPF network function microservices although exist network function eBPF none implement complex algorithm aho corasick algorithm dpi author factor affect performance eBPF implement complex network function however eBPF continuously improve limitation article publish although author analyze performance eBPF focus eBPF firewall simpler IDS detailed analysis performance XDP virtual machine VM hardware offload environment XDP inside vms suffer performance penalty emergence snort research focus optimize component IDS impact performance snort adopts  moore BM aho corasick AC algorithm BM algorithm perform complexity text respectively AC algorithm multiple scan text obviously latter performs efficiently former although research effort spent optimization snort utilize eBPF background introduction eBPF XDP eBPF originates classical bpf  propose steven  van jacobson  packet filter tcpdump  command expression tcpdump parse convert  assembly code execute bpf virtual machine inside kernel although  limited feature become obstacle future development linux introduce eBPF replace  version  eBPF enhances virtual hardware ability attach eBPF program various trace kernel greatly expands application express data XDP trace inside linux kernel architecture eBPF XDP driver maintains buffer incoming packet packet network interface NIC hardware buffer fetch bpf program outcome packet local packet remove buffer without processing packet intend locally upper layer network stack otherwise packet NIC transmit packet locally bpf program specify cpu perform processing eBPF steer packet load balance multiple cpu core finally application user load configure bpf program eBPF generic data structure storage data inside kernel access eBPF program application user memory eBPF communication medium eBPF program application addition eBPF eBPF program data user output perf data structure linux perf architecture eBPF XDP introduction aho corasick algorithm aho corasick AC algorithm propose  aho  corasick efficient algorithm occurrence finite keywords text algorithm consists phase construct machine keywords machine text pas algorithm suitable IDSes occurrence multiple packet data eBPF program implement AC algorithm pre packet briefly introduce phase building machine phase building trie prefix fail link convert machine deterministic finite automaton dfa drawn building trie algorithm trie convert identical fail link trie construct previous algorithm algorithm fail link fail link fail link breadth fail link transition define fail fail fail link fail traverse fail instance fail respectively AC trie machine dfa transition input perform algorithm dfa version transition output algorithm similarly node breadth transition node precomputed input transition dot specify input transition            dfa transition    phase algorithm procedure AC algorithm algorithm loop input algorithm performs transition instance input series transition factor influence efficiency input loop algorithm bound longer input iteration loop factor occurrence input algorithm consume factor constant amount output complexity output summarize complexity algorithm introduction snort snort source IDS propose martin  mode mode snort mode intrusion prevention IPS packet mode mode packet analyze mode mode configuration mode available sniffer packet logger network intrusion detection NIDS mode sniffer mode snort capture packet display screen packet logger mode packet file NIDS mode snort performs detailed analysis packet define user intrusion detect snort output alert console file NIDS configuration mode performance snort rulesets snort rulesets snort available conduct research community default ruleset snort package official web site snort without registration unfortunately contains unable threat register ruleset web site community ruleset however user register web site ruleset author snort user register ruleset environment community emerge threat ruleset maintain emerge threat ruleset register ruleset chose register ruleset evaluate performance snort default comment rulesets accord official  snort user load ruleset performance greatly impact within ruleset configuration connectivity security balance security connectivity maximum detection configuration subset ruleset unused comment comment rulesets impact performance generate false alert target minor threat register ruleset environment therefore varied performance snort maximum ruleset community default  threat uncommented comment format snort format snort header header specifies action perform action generate alert message packet ignore packet respectively packet ignore checked pas action function accept action  firewall linux kernel trust host network domain protocol packet protocol IP directly header tuple information packet header source destination meaningful tcp udp option option indicates option specifies message payload detection option specify multiple option action option logical statement snort evaluates option option snort evaluate option various snort ruleset logical statement packet action packet ruleset alert snort option implement snort format subset option due constraint eBPF frequent option register ruleset achieve coverage ruleset option frequent option option option influence bypass option summarize option option bypass option unsupported architecture snort snort packet packet decode handle packet information inside packet header extract internal data structure module preprocessors multiple preprocessors snort sequentially invoke commonly preprocessors preprocessor reassemble fragment packet preprocessor status tcp udp preprocessor responsible information tcp udp specialized reassembly packet detection explain packet output plug generate alarm detection snort detection consists component FPM option associate snort FPM facilitate detection default define option addition specify writer option listing demonstrate snort although contains option specify explicitly picked FPM important component snort packet scan FPM packet packet otherwise ignore without processing organize snort efficiently packet adopts detail later payload packet encrypt packet payload signature detect malicious packet detect attack packet implementation architecture depict program eBPF FPM program eBPF matcher kernel packet network driver eBPF FPM payload contains ruleset explain previously ruleset illustrate usage ruleset packet impossible packet eBPF FPM packet without program examination mention previously snort NIDS configuration mode packet actually mirror packet mirror packet packet safely without affect network device packet contains ruleset packet program structure detailed analysis program user initialization stage par extract information eBPF FPM information eBPF handle packet eBPF FPM packet applies action packet otherwise packet initialize data structure eBPF program program enters infinite loop continuously poll perf packet data information essential program packet limitation eBPF eBPF execute inside kernel eBPF program satisfy constrains crash kernel inject eBPF program kernel program checked verifier verifier statically constrains instruction execution memory access currently execution instruction instruction eBPF program overcome restriction another program execution program bpf bpf function eliminate duplicate code reduce code eBPF verifier eBPF program developer memory access validity memory access stack XDP context memory access stack eBPF packet data eBPF eBPF program ensures pointer valid packet data eBPF program ensures pointer within bound packet currently automatic manually memory access eBPF program linux eBPF verifier backward cannot loop eBPF program workaround fully unroll loop backward however loop iteration eBPF program exceed limit verifier overcome linux introduce bound loop version bound loop iterate fix loop become legal iteration derive verifier feature eBPF program ensure loop constant iteration bound loop reduce eBPF program improve cache rate performance loop byte packet adopt bound loop overcome limitation instruction eBPF program eBPF program incoming packet encapsulate within virtual local network vlan header strip vlan header ethernet header extract packet packet IP packet immediately IP packet layer protocol tcp udp packet source destination AC algorithm packet detailed description function icmp packet packet protocol source destination cod program variable indicates offset program scan calculate sum header tcp packet program perform AC algorithm packet explains calculate AC machine packet tcp udp source destination later AC machine simplicity AC machine return function actually integer index AC machine packet adopt approach source destination correspond AC program source safely otherwise program snort source destination packet neither packet packet similarly destination output correspond source destination packet eBPF program detailed perform AC algorithm procedure variable indicates related packet initialize calculate program bound loop scan payload termination loop termination loop constant cod network maximum transmission MTU ethernet header consideration packet static eBPF verifier bound loop termination packet cannot directly termination function safely access packet data data byte convert upper snort performs insensitive variable attribute listing program examine packet eBPF program pas packet data program otherwise program obviously packet data packet however program packet data program packet data waste compute resource packet data program packet program program display content packet data network administrator manual examination processing within program perform transition AC automaton deterministic finite automaton dfa pre compute transition initialization stage program computes transition array AC listing eBPF program perform transition code finally program scan loop another iteration overcome limitation eBPF implement overcome limitation eBPF limitation loop instruction analyze entire payload packet loop byte version eBPF loop fully unrolled prevent backward however eBPF program easily exceed limit instruction recently bound loop convert normal loop bound loop listing byte packet variable offset packet however loop reject eBPF verifier loop bound variable pas verifier loop bound constant compile listing bound version loop loop bound maximum packet constant however packet loop exceeds packet satisfy constrain bound loop packet another limited memory eBPF eBPF stack cannot dynamically allocate memory heap overcome restriction instead heap dynamic data eBPF program eBPF eBPF program SM machine AC machine eBPF index machine return program initialization procedure initialization procedure IDS focus parse data structure configure buffer related eBPF program file par database later classify category accord layer protocol tcp udp category contains source destination classification AC machine  built program initializes data structure eBPF program attache eBPF program NIC driver specifically code eBPF program compile clang compiler translate eBPF binary llvm binary verify load kernel verification constrains checked eBPF program satisfy reject kernel eBPF program functional lack important data structure node AC machine merge array array AC algorithm described fourth initializes buffer perf program allocates buffer perf inside kernel creates file descriptor monitor status buffer perf generate perf buffer eBPF program file descriptor related become readable multi core perf buffer cannot across multiple core perf buffer core program attache eBPF program NIC driver eBPF program fully functional loop polling handler described structure eBPF program pas data program eBPF perf difference direction copying packet eBPF eBPF program program direction data bidirectional contrast perf eBPF program program eBPF communicate user kernel flexible however regard copying packet perf suitable eBPF program packet data user eBPF copying data byte consumes amount compute perf perform task function built function kernel function cpu without involve eBPF virtual machine efficient perf pas packet data listing definition perf header pre define kernel cannot customize data define structure contains information definition listing structure handle explain packet protocol packet packet NIC driver generate packet timestamp packet packet structure pointer packet data explain perf packet data packet meaningless handler handler perf eBPF program program generate eBPF program kernel due buffer overflow program cannot handle timestamp packet detect situation normal sequence without generate eBPF program packet packet program packet becomes outcome contrary program loses packet buffer program replace data packet later program receives another packet stamp packet packet avoid generate alarm without processing tcp udp grouped program efficiently AC machine built specific suppose packet checked therefore packet source destination contains situation finally source destination neither contains organize program efficiently packet node node node node explain AC machine program receives perf locates correspond evaluates breadth bfs packet instance packet contains node discard node discard packet node successfully evaluate packet evaluation packet packet contains overlap packet multiple however bfs return packet return adopt snort illustrate illustrate ruleset incoming packet tcp built packet tcp packet eBPF FPM scan payload perf generate contains entire packet data packet program receives packet data buffer evaluate option specify impose requirement payload specify option simultaneously exist payload packet packet program receives although packet neither program packet program evaluate perf program program evaluate alert packet eBPF FPM output perf payload program evaluate packet udp packet udp packet eBPF FPM perf generate incoming packet    tcp aabb tcp   multi core optimize performance eBPF program utilize multiple cpu core simultaneously feature relies multi queue RSS NIC hardware NICs queue bandwidth network increase queue becomes bottleneck network stack therefore nowadays NICs dispatch packet multiple queue kernel however packet cannot split across multiple queue load balance RSS propose RSS multiple queue queue usually cpu core machine testbed core kernel queue NICs multiple core data structure eBPF program modify prevent eBPF eBPF program perf generate program multiple core buffer core perf generate program thread repeatedly poll core perf handle sequentially experimental setup hardware software network topology testbed gbps unidirectional optical link IDS host packet generator IDS host IDS monitoring program python program sends command packet generator rate attribute generate traffic packet generator host packet generator program simultaneously generate traffic command generate traffic transmit link interfere detailed specification testbed modify register ruleset mention register ruleset evaluate performance snort register ruleset exclude option explains option almost packet exclude performance evaluation specific overwhelm eBPF FPM byte almost packet byte zero network packet exclude ruleset performance evaluation author   anomaly firewall propose resolution future preprocessors snort exclude preprocessors optional plugins packet register ruleset function correctly without preprocessor therefore disabled preprocessors default configuration handle fragment IP packet lastly without option exclude option eBPF FPM exclude ruleset modify ruleset explain modify ruleset rulesets performance evaluation parameter default generate traffic load component alert trigger traffic background traffic alert trigger traffic traffic ruleset contrary background traffic traffic ruleset important parameter impact performance alert trigger traffic ratio attr maximum packet MPL background traffic NR ruleset conduct parameter varied parameter default setting realistic chose reasonable default parameter attr ratio network traffic trigger alert network default MPL MTU byte network default packet distribution generate background traffic packet distribution traffic data caida traffic dataset packet distribution distribution generate background traffic distribution distribution packet MPL parameter varied interval generate background traffic MPL shift frequency packet packet frequency packet background traffic generate adjust packet distribution NR chose default accord community ruleset therefore reasonable environment ruleset parameter varied interval ruleset specific desire modify ruleset selection modify ruleset ruleset modify ruleset rate attribute generate traffic attribute generate traffic generate background traffic traffic generate perform python script generate traffic multiple instance instance tcp traffic udp traffic command option specify bandwidth instance ratio tcp udp traffic capture traffic generate generate alert trigger traffic generate traffic capture generate traffic background alert trigger traffic separately file later finally file replayed variation modify replay packet file option specify replay stress IDS option maximum generate packet generate alert trigger traffic trigger alert per greatly impact performance IDS therefore ratio traffic trigger alert impact  source IDS IPS framework default grouped module user python easily official package generate alert trigger traffic detailed  adopts server client architecture IDS server client virtual machine  generate malicious traffic client server instal IDS capture packet server capture packet pcap file later maximum throughput binary algorithm maximum throughput IDS without incur packet loss maximum rate generate traffic IDS handle without processing backlog packet backlog queue overflow upper bound mbps link bandwidth testbed gbps upper bound function IDS packet generator packet IDS accord parameter return packet loss rate algorithm termination binary difference upper bound bound mbps packet loss rate return maximum throughput without incur packet loss mbps mbps termination threshold reduce execution algorithm compensate minor loss accuracy perform measurement average maximum throughput performance evaluation performance scheme snort performance metric cpu usage packet loss rate maximum throughput evaluation various attr MPL NR parameter definition explain cpu usage packet loss rate scheme snort traffic load varied load generate traffic gbps bandwidth link scheme performance scheme snort eBPF compile snort version source code stable version snort conduct research snort beta version scheme implement eBPF linux version kernel implement IDS kernel ubuntu distribution rely bound loop feature introduce linux implement eBPF FPM although implement eBPF FPM without bound loop performance overhead purpose performance scheme ensure IDSes identical hardware traffic load configuration OS ruleset hardware IDSes machine hardware resource operating available traffic load packet generate procedure described IDSes identical ensure comparison meaningful performance metric performance metric performance evaluation cpu usage packet loss rate scheme traffic load default attr NR MPL parameter cpu usage usage usage percentage cpu kernel context usage percentage spent user context usage percentage spent context kernel packet although context kernel kernel maintains counter spent context packet loss rate percentage packet due processing backlog IDS cannot generate traffic load maximum throughput IDS without incur packet loss algorithm measurement loss rate IDS traffic load obtain stable measurement cpu usage maximum throughput performance data average cpu usage packet loss rate cpu usage packet loss rate snort traffic load horizontal axis traffic load vertical axis core cpu usage percentage packet loss rate percentage host IDS core core cpu usage maximum cpu usage drawn loss rate drawn finding maximum throughput snort bound cpu core traffic load mbps user usage bound phenomenon explain snort implement user application thread maximum throughput snort without incur packet loss mbps traffic load exceed mbps usage continued user usage remain packet kernel snort consequently packet queue kernel finally kernel queue cpu usage packet loss rate cpu usage snort finding usage traffic load incoming packet pre checked eBPF program eBPF program AC algorithm quickly packet portion incoming packet identify packet immediately pre eBPF program kernel portion incoming packet program examination attr default loss rate snort eBPF multiple core simultaneously throughput eBPF program increase traffic load increase therefore scalability snort usage snort traffic load traffic load mbps usage snort XDP stage network stack packet packet pre checked packet immediately pre XDP complex processing upper layer network stack processing context avoid cpu usage packet loss rate snort traffic load maximum throughput without incur packet loss chose parameter maximum throughput measurement parameter consists primary parameter secondary parameter primary parameter axis secondary parameter plot secondary parameter parameter parameter primary variable measurement generate easy parameter secondary parameter measurement min max default attr primary parameter NR secondary parameter finding maximum throughput affected attr NR NR maximum throughput slightly decrease attr phenomenon explain load likely packet consume generally maximum throughput decrease grows maximum throughput snort achieve almost rate gbps snort achieve mbps NR maximum throughput almost snort parameter  attr NR MPL primary parameter MPL secondary parameter NR MPL maximum throughput snort MPL decrease maximum throughput snort decrease phenomenon explain packet IDS roughly fix MPL becomes correspond throughput packet processing rate packet become maximum throughput alert trigger traffic ratio finally NR primary parameter attr secondary parameter trend maximum throughput snort slightly decrease NR attr phenomenon explain NR attr increase packet per impose load program program handle packet packet maximum throughput decrease outperform snort almost factor regard maximum throughput maximum throughput maximum packet discussion future due constraint impose enforce kernel security eBPF mechanism cannot develop eBPF program handle complex examination processing packet currently eBPF feature snort feature performance snort modify register ruleset snort rulesets compose snort performance comparison modify rulesets performance gain snort cautiously interpret context experimental core core cpu snort core however currently maximum throughput snort indicates fully utilized cycle core regard program performance bottleneck currently thread future multi thread another improve generate traffic load attribute traffic load generate synthesize traffic evaluate performance snort although simulate traffic internet realistic datasets available IDS evaluation  CTU normal user traffic malicious traffic future realistic traffic datasets generate realistic synthesize traffic recently customer switch CES serf extension classical firewall functionality communicate security device establish network traffic benign malicious scheme firewall scheme scheme apply besides malwares prevalent internet identify signature analyze detect malwares  transmit network conclusion nowadays IDS essential function network security traffic load increase internet improve throughput IDS highly desire eBPF mechanism implement performance IDS eBPF program linux kernel pre pre portion packet stage program user examines packet modify version register ruleset snort experimental maximum throughput IDS outperform snort factor eBPF mechanism potential framework implement performance IDS linux kernel however due constraint impose enforce kernel security eBPF program developer advanced fully achieve performance gain enable eBPF addition due strict constraint currently complex examination processing packet snort cannot implement eBPF kernel despite limitation eBPF however eBPF potential evolve feature improvement continuously release linux kernel performance functionality eBPF IDS continuously enhance future