web apis access information service continuously increase exist automate consume error prone invoke apis compose response recent emergence widely adopt standardize web api description format development link data technology data integration motivate lra link apis methodology lra relies rdf service specification automate development around usage web apis automation opportunity systematize improve quality service orient application development however lra reliance SPARQL user interaction model hinder adoption developer intricacy unconventional graph data model associate datasets developed lra workbench  advantage emergent schema web api specification simplify formulation lra compliant SPARQL query empirical evaluation  usability demonstrates significantly improves performance developer formulate SPARQL query lra subsequent effectiveness  demonstrate developer lra tend code considerable structural complexity developer manually compose apis introduction evolution web increase adoption web  revolutionize user software access information service web apis enable increase revenue discover   generates revenue apis  generates ebay  web apis potential service orchestration across provider nevertheless relies manual service composition approach considerable development investment application developer examine amount documentation understand client code specific apis compose compatible apis manage authentication credential apis data principle easily access web apis remains  isolated silo interoperate resource service web recently evolution  widely adopt description format   specify relevant implementation detail resource status code input argument completely ignore underlie service semantics parallel development semantic representation driven creation promising knowledge description formalism link data lod project schema org demonstrate potential link data approach data integration synergy popular technology namely standardize specification apis link data semantics motivate emergence approach semantic annotation web apis   link apis lra attempt simplify partially automate developer interact data web apis link api approach conceptual framework service specification link data model correspond software architecture automatically compose api respond data query quality access constraint subsequently formalize define formal semantics lra api specification discovery composition algorithm formalism validate usefulness accuracy lra composition algorithm context realistic scenario around collection publicly accessible web apis lra methodology entail SPARQL developer longer browse web api documentation declaratively specify desire functionality SPARQL query lra composition enactment algorithm retrieves appropriate apis multiple provider automatically composes data production consumption graph SPARQL powerful experienced user understand average application developer author acknowledge semantic web technology accessible highly expert offering benefit  additional effort investment spite realism evaluation methodology promising recognize lra reliance SPARQL hinder adoption implement  introduce develops lra algorithm software development lra specify apis  integrate development environment streamlines lra enable developer express information without extensive knowledge lra encode formalism delegate query formulation interpretation abstract SPARQL rdf user  upon previous research visual query formalism link data creation query structure inference global schema data web apis creation  formulate research  developer formulate lra compliant SPARQL query conduct empirical ass accuracy efficiency perceive usability developer query  furthermore performance developer  developer YASGUI popular SPARQL interface link data publisher demonstrate developer perceive  considerably usable YASGUI confirm effectiveness  SPARQL easy proceed examine impact software development research  improve developer efficiency code quality conduct empirical traditional craft endpoint request workflow baseline quality software artifact accuracy efficiency developer develop  web application  quality code performance developer traditional approach developer manually workflow submit request directly service endpoint implement service composition lra developer significantly complex code developer classic development environment additionally lra developer code developer traditional approach composition workflow namely service discovery identify performance code complexity developer lra comparable developer traditional approach reveal overhead impose matchmaking runtime lra negligible remainder organize link apis approach introduces methodology lra automatically compose web apis review link data query systematic survey link data query identify desire feature development environment  introduces detailed description propose query environment usability evaluation  discus protocol usability  effectiveness evaluation  empirical evaluation lra environment discus finding finally conclusion summarizes contribution approach link apis approach briefly describes lra approach web api semantic description automate discovery composition link apis define data model composition methodology delineate requirement constraint implement development environment review link data query interested reader detailed overview lra approach previous introduce concept link apis middleware service integration link data model brings web service description formalism concise web api description model lra data expose service mapped link data schema description middleware automatically compose api respond SPARQL query graph addition lra model access protocol apis quality data expose enable creation legal composition desire quality consequence lra potentially interaction paradigm manual formulation procedure automatic definition composition graph query available service operation conceptually lra model considers data web apis rdf graph external service provider  described schema data express SPARQL graph link api specify operation define tuple  endpoint information graph input output authentication mechanism quality attribute respectively leverage lra description SPARQL mediate integration heterogeneous source therefore query graph  service operation subgraphs query graph subgraphs graph define lra operation query define lra composition formulate sequence api operation service operation non empty mapping query query triple mapped operation variable project clause output service operation service operation execute sequence compatible subgraph compatible service operation execute input available query detailed description data model composition algorithm although preliminary performance accuracy lra encourage adopter approach report difficulty formulate SPARQL query despite verse technology sql unfortunately powerful expressive structure query model SPARQL fundamentally user adopt user data model comprehend structure dataset express query structure argue proficiency SPARQL crucial optimal interaction  query curve developer formulate query review link data query user task formulate SPARQL query recognize important research objective propose address hence analyze previous link data query relation requirement specify lra middleware  characteristic development environment abstract complexity query link apis development environment evaluate empirical reveals effectiveness developer ide formulation lra complaint query development environment enhances accessibility lra conduct survey literature comparatively analyze prominent link data query focus recent contribution perform systematic link data query acm digital library xplore google scholar google springer link retrieve relevant reference cite highly relevant publication summarize organize review feature around dimension user interface query interpretation usability structural discovery render knowledge comprehensive link data query link data query description matrix user interface query interface typically rely capacity perceptual inference enable interpretation concisely encode quantity information user interface exist organize category text editor choice software developer accustom code program IDEs relational database client editor typically dataset provider   employ compose query SPARQL directly   text user SPARQL query others YASGUI syntax edit feature  syntax highlight error although interface adopt facto standard interaction model triple author recognize textual interface generally inaccessible typical software developer formulate semantically meaningful query user structure data syntax query interface capitalize user interface adopt computer increase initial familiarity user approach query specify text menu typically faceted interface enable user explore data apply multiple filter   adopt faceted interface combine interaction model SPARQL builder graph visualization illustrate relationship although casual user prefer interface visual approach building query explore facet approach consume ontology query complex interface  enable user formulate factoid query command representative interface  nlp reduce due linguistic ambiguity    restrict user input structure constrain grammar lexicon although almost perceive intuitive approach restriction acceptable construct limit expressiveness imposes cognitive challenge user visual approach adopt diagrammatic consist geometric texture connection convey query semantics category adopt graph data model   affective graph semantic crystal  rdf triple node link predicate  uml representation inside  visual pipe data node define filter function depict data node representation concept interface user define embed   usability expert user prefer graph interface due reduce complexity expressiveness accordingly lra visual query assistant VQA adopts visual query interface graph model mapping visual syntax underlie query facilitate eventual transition text interface query interpretation query interpretation translate expression construct interface request formalism data interpretation approach organize category navigation approach concept focal concept logically organize iteratively subset query request refinement data approach   category category query expressiveness limited concept focus formulate complex query user navigate concept identify laborious approach composition approach unambiguous mapping configuration user input underlie formal query trivial query compose text editor submit directly data expressiveness query interface graph approach typically translate node rdf resource predicate respectively however construct filter function disjunction inclusion graphic intuitive user despite potential loss expressiveness previous remark capability visual formulate complex query VQA adopts composition approach query interpretation approximate mapping infer semantic structure query apply nlp technique entity recognition approach complexity naïve technique minimal processing nlp reduce sophisticated approach generate triple structure involve disjunction aggregation  although approach user fully understands input subset correctly identify commonly refer literature  response accuracy limit expressiveness query rely amount background domain knowledge usability although primary objective aforementioned user formulate SPARQL query address perceive effectiveness usability analyze consideration user casual expert user casual user characterize lack training formal query unfamiliarity detail internal organization query previous research investigate effectiveness approach nlp reduce   formal approach  visual interface  semantic crystal affective graph casual user casual user approach graph visualization approach spending satisfactory complexity query difficulty interaction despite preference approach graph approach casual user  intuitive restrict however  interface dissatisfaction return expert user target user lra posse program database management indirectly associate link data query conduct distinguish casual expert user approach nlp reduce  semantic crystal affective graph expert user prefer graph approach closely approach argue approach formulate complex query  unlike casual user restriction impose restrict nli approach regard annoy impediment construct expressive query casual user expert  nlp reduce intuitive unacceptable structural discovery difficulty involve compose complex query approach assistance generate suggestion structure data graph discover structural relationship grouped category ontology browser facilitate query formulation user query relationship constitute schema data approach   simply available dataset approach  semantic crystal employ sophisticated technique communicate information data ontology ontology graph ontology browser useful ontology visualization ontology become complex recommendation explore predicate focus plausible query YASGUI autocomplete feature predicts predicate user prefix query visual approach  autocomplete available instance accessible predicate subsequently insert node graph visualization approach faceted interface recommendation feature navigation link filter VQA adopts recommendation mechanism immediate predicate available focus entity facilitate exploration detect strength approach discovery connection resource immediate relationship exist strategy attempt resource explore data graph obtain chain resource approach review  proposes discovery methodology preprocessing datasets extract metadata construct graph  VQA improves upon previously propose approach incorporate semantic knowledge emergent schema rank proximity render presentation information return important component query organize visually appeal display impact readability clarity user satisfaction accordingly query usually however account context data appropriate diagram query timeline user capture relationship amongst output data review visualize YASGUI incorporates  visualization via google VQA combination graphic tabular representation yield data therefore accurate comprehension  development environment component facilitate automation discovery composition enactment external web service lra lra development environment image query console experienced user manipulation SPARQL query query console SPARQL query editor query console alternative representation response renderer project variable clause along specifies data source raw json LD response consume application lra service graph visualization entity node relationship II graph visualization assist user exploration return visualization layout II visual density facilitate detection cluster representation analogy underlie data model developer familiar graph data model visualization parallel coordinate layout visualization technique suitable exploration analysis dimension entity node assign parallel coordinate effective exploratory data analysis diagnosis marginal density correlation attribute cluster visual query assistant VQA visual model VQA semantics effective semantic developer information lra model graphical notation VQA notation consists triple structure rdf model entity literal node predicate link establish correspondence visual query expression underlie SPARQL hypothesize mapping query edit graphical notation SPARQL syntax eventually enable user transition textual SPARQL editor visual query assistant gestalt theory visual screen simplicity similarity proximity simplicity VQA visual construct compose node link node label differentiates role query prevents information overload approach  combination distinctive feature similarity VQA depict distinguish instance filter IV specifically instance structure query stroke input pink output stroke filter attach filter emphasize importance query approach   alike fail capitalize opportunity visually distinguish finally proximity VQA link distance strategically instance congruent cluster instance distance enables user perceive inter relationship without interfere visual cluster contrast visual approach   account distance important graphic representation emergent schema structure discovery VQA relies underlie structure data lra service emergent schema model assist user knowledge SPARQL specific dataset structure emergent schema specialized graph approach node correspond data predicate respectively triple lra service description denote define emergent schema label graph vertex denote predicate resource label predicate label rdf triple extract initial node emergent schema VQA triple   obtain initial VQA exists triple     addition semantic subsumption efficient relationship developer query scholarly apis instead refer individual publication blog patent aggregate publication refer document nevertheless superclass superfluous clutter user interface VQA superclass initial node ancestor hierarchy accordingly superclass subclass relationship formally VQA exists indicates subclass emergent schema construct user instance VQA query graph computes relationship exist query explore emergent schema relationship option ranked priority intuitively emphasizes relationship improves interaction graph approach user explicit knowledge relationship selection option creation graph query II IV query graph expression generator component traverse graph gradually construct SPARQL query comprises restriction define graph usability evaluation  conduct empirical seek address research  improve effectiveness developer formulate lra complaint query YASGUI besides structural discovery syntactic assistance actively maintain widely SPARQL query interface incorporate rdf framework project apache jena   gov  american museum protocol recruit software developer computer software development sql previous SPARQL participant randomly assign VQA YASGUI participant series interactive video lesson representative query formulation task factor complexity query exist SPARQL benchmark related usability complexity query examine characterization extract dbpedia semantic web public endpoint query complexity indicator author operator triple topology addition SPARQL performance benchmark  query discard representative complexity indicator mention domain intricate understand review comparable usability dataset geographical information  contains predefined english besides dataset SPARQL translation consideration query specification task population usa  available   border   population correspond formulate optional operator complex relationship complexity query usability data collection query participant execution query presentation geographic dataset formulate query assign interface usability quantitative qualitative data quantitative data information retrieval computer interaction literature formulate query attempt accuracy combine precision recall task participant reflect feedback text comment usability sus questionnaire standardize usability proven useful investigate interface usability session  popular source online survey survey task task questionnaire application configure disallow participant return task survey application spent participant task calculate task participant submit query submit extract attempt per task accuracy query evaluate precision recall return summarize discussion VQA YASGUI evaluation criterion query report average VQA YASGUI respectively probability apply evaluate difference sample statistically significant VQA usability evaluation VQA user significantly overall attempt formulate query YASGUI user confidence addition query formulate VQA accurate query YASGUI although difference statistically significant furthermore VQA usability rating YASGUI directly comparable graph approach dataset due difference background nevertheless similarity attempt increase accuracy perceive usability average VQA however seemingly unfavorable increase average VQA user relative  user hypothesize due phenomenon affected aforementioned experimental protocol participant interface significantly increase potential become familiar ontology interface improve performance reduce overall average visual representation query facilitate inspection semantic correctness query VQA user attempt formulate query YASGUI user submit erroneous query typo variable non exist predicate query incrementally execute partial query erroneous query YASGUI user due inconsistent variable absence link assistive feature VQA difficulty formulate query increase YASGUI user VQA user despite query construct YASGUI user declare frustrate devise syntactically semantically SPARQL query query demand chain resonate accuracy query VQA user achieve YASGUI user particularly YASGUI user relatively accuracy query query complex query accuracy considerably VQA user remains summary VQA favorable environment introduce lra developer SPARQL interface reduces formulate query maintain accuracy additionally interface restricts composition valid SPARQL query visually inspect semantic error increase perceive usability however important YASGUI valuable user interface allows flexibility expressiveness significant SPARQL effectiveness evaluation  evaluate user interface development workbench attention assess usability lra framework automates reuse service software application reduces manual software developer particularly conduct empirical research lra environment improvement developer efficiency code quality hypothesize enable developer retrieve data multiple web apis declarative significantly improve performance quality code artifact difference performance quality evaluation around realistic software engineering building application integrate multiple web service approach developer previously identify relevant service provider formulates service workflow functionality application development involves implementation web application machine MTM essence MTM detailed information popular specific date user application application billboard footnote birthday  playback birthday  MTM application comprises software component component contains date picker button load specify date component information related title artist release date component graph rank fourth component display link image video related artist machine MTM application image data component data source  historical information rank  contains detailed information album artist  contains data video google  configure image related additionally lra semantic description aforementioned data source schema org widely adopt annotate semantics related data performance quality application previously mention component characterization composition propose task aim understand developer service composition treatment task evaluate prevalent composition structural discovery sequential composition parallel composition discovery refers binding consumer service data retrieve data sequential specifies composition execution service logical subsequent service extract previous service invocation hence discovery sequential limited service sequential structural corresponds workflow finally parallel refers composition independent composition chain eventually merge specifically corresponds parallel split  workflow component protocol involve compute alberta participant enrol fourth software management lesson service lab session apply concept incrementally develop software application lab session account grade participation session mandatory however consent prior data collection participant report program javascript program reduce variability structural complexity attribute inherent model furthermore none participant web apis prior unfair advantage participant protocol stage stage preparation session involve leveling session topic related version program service orient architecture regular demonstrate effectiveness industrial academic scenario stage version MTM local web api data provider subsequent stage focus data management integration instead  aspect application stage training session introduce lra approach description semantics api specification session laboratory workshop lra environment illustrate difference traditional approach lra voluntary participation emphasize consent participate repercussion grade session participant randomly assign lra traditional http request individual service provider stage session involve session maximum restriction session survey task task questionnaire linear questionnaire strategy software development comprehension survey submit commit hash allows audit code task software repository participant reflect sus questionnaire previous data collection ass performance developer quality code quantitative data develop task execution render task component response structural complexity metric derive code accuracy development task calculate task participant submit response amount byte transfer client application service execution task calculate load task component measurement corresponds average load load discard collection execution lra framework configure perform exploration maximum cache query service response disabled variation partial implementation considerable enumerate mechanism evaluate accuracy task assigns entity attribute entity attribute task implement return approach explanation grade rubric variability participant important participant capable identify goal correctly difference application stage data source structural complexity metric program intrinsic attribute syntactic structure program category code halstead software McCabe complexity popular complexity metric although author consistency aforementioned metric researcher accept attribute significant indicator effort maintainability  widely industrial scenario incorporate popular IDEs visual studio eclipse exclude orient complexity depth inheritance task significant consideration regard orient addition exclude extrinsic metric readability individual style preference avoid summary complexity metric effective code halstead software vocabulary volume difficulty effort estimate bug cyclomatic complexity maintainability index performance complexity metric task evaluation criterion average task approach probability apply evaluate difference approach statistically significant furthermore fourteen whisker diagram portray distribution measurement task approach consideration illustrate difference lra traditional approach data task analysis effectiveness evaluation lra boxplots data analyze effectiveness metric image task seek explore difference approach sequential service composition component ideally combine operation billboard spotify structural complexity lra approach statistical significance code traditional approach average lra average develop functionality task significantly lra developer average min contrast min spent average developer traditional approach execution response advantage traditional approach difference considerable goal task investigate difference traditional lra approach service discovery operation service orient principle operation selects invokes service billboard perform task although considerable difference regard structural complexity traditional approach slightly complexity average estimate bug traditional approach lra performance difference return response statistically significant average byte lra byte traditional approach difference overhead lra information request status code query URLs detailed description service invoked service response billboard concise format task investigates difference approach parallel service composition composition request information billboard split execution request  google cse subsequently merge task task structural complexity significantly benefit software artifact lra although difference execution response difference considerable likewise development significantly lra developer average min oppose min average spent developer traditional approach important statistically significant difference accuracy however marginally accuracy lra developer average developer traditional approach average implementation lra developer properly implement component traditional developer implement component subjective evaluation sus questionnaire traditional approach outperform lra approach significantly average usability traditional approach lra approach OK respectively accord adjective rating introduce discussion complex workflow involve service composition benefit structural complexity abstraction lra software application invoke endpoint automates dynamic binding consumer application multiple service endpoint despite overhead incur due service composition runtime lra affect performance considerably execution traditional approach nevertheless workflow involve service discovery structural complexity performance approach comparable explain similarity approach task reduce request endpoint addition hypothesize limited relevant web apis semantic concept task browsing web api documentation service regard equivalent scan ontology documentation formulate query domain specific visual likewise lra developer spent implement composition workflow developer traditional approach comparable discovery workflow however aspect lra developer considerable amount task amortize significantly subsequent task approach lra developer spent average min task spent min task nevertheless perceive usability traditional approach lra phenomenon benefit attractive user express opposition technology innovation resistance extensively literature previous research resistance technological user perceive lack ability successfully perform task lra developer perceive task VQA schema org traditional developer knowledge task hence successful implementation lra appropriate strategy endogenous exogenous factor resistance limitation limited participant limited expertise web technology concern external validity however conduct pool participant significant program intensive training service orient architecture addition relative  participant technology guarantee preconceive bias towards traditional approach bias technology evaluation aware curve approach consideration impact developer performance minimize impact threat validity stage preparation training protocol development environment participant return task fail account exploratory non linearity software development limit survey application strictly linear mechanism motivate desire precisely spent developer implement individual task minimize threat validity thoroughly explore preparation training stage development task couple minimal although participant report reconsider previous sophisticated mechanism desirable flexible strategy increase generality linear questionnaire strategy software development comprehension stage span minimize fatigue developer additionally protocol gradually increase familiarity participant review training session finally lra user interface previously described usability evaluation  improve accessibility intuitiveness user interaction lra query application  developed research purpose although identify application functionality generalize industrial ecosystem scope research substantial insight developer application integrate data multiple service provider via web apis task limited investigate performance developer structural indeed generalize performance developer service discovery non trivial service composition conclusion previously propose conceptual framework link apis methodology semantically specify automatically compose web apis lra methodology aim web service composition interpretation service documentation manual program client code service invocation norm model driven engineering rely declarative rdf annotate service specification methodological shift necessitates SPARQL rdf annotate service specification spite efficiency quality improvement promise SPARQL query creates barrier adoption lra approach traditional software developer mitigate challenge software developer SPARQL motivate development  exploit underlie graph model imply rdf infers emergent schema dataset developer data relation relevant focal accordingly developer SPARQL query correspond desire composition exploration connection query entity emergent schema described  report evaluate usability effectiveness software development collection task aim evaluate performance developer lra compliant query evaluate developer performance objective namely accuracy attempt overall query feedback participant perception VQA visual SPARQL query composition  superior YASGUI significantly examine developer performance quality code application retrieve integrate data multiple web apis examine indicator develop task execution response structural complexity code accuracy developer lra complex composition code structural complexity developer classic development approach furthermore reveal service discovery performance code quality developer comparable overhead incur lra middleware considerable future research agenda investigate relation textual description web service automatically input output relationship ontology simplify development cycle semantically enhance web service