development peta exascale computational data artificial intelligence AI application data AI application implement java scala python widely performance compute hpc dominate fortran moreover dedicate environment hadoop spark integrate traditional hpc management developed parallel compute java pcj library scalable performance compute data processing java functionality pcj library highly scalable application resource performance application traditional computational intensive hpc workload stencil communication intensive algorithm fourier transform fft implementation detail performance data processing  AI workload parallelize pcj introduction artificial intelligence AI computational intelligence become popular discipline impossible traditional algorithm currently approach widely broadly machine neural network approach par training data learns fix internal volume variety training data neural network environment previously data processing amount data neural network parameter significant computational effort available laptop workstation therefore important integrate data processing artificial intelligence workload performance compute hpc ongoing adapt exist facilitate AI calculation research exist limitation performance heterogenous employ specialise hardware AI computation acceleration networking performance enhance throughput training inference data whilst deployment concerned advent AI python library pytorch tensorflow integration exist hpc easy parallel compute java pcj library herein hpc bridge various workload currently exist distribute neural network training performer concerned comparison hadoop spark former corroborates library concert exist cluster management torque slurm distribute across cluster neural network training deploy production model inference latter prof training data efficiently handle recently various exascale initiative data AI application hpc due algorithm achievement performance data AI application implement java scala python widely hpc dominate fortran moreover data AI framework rely dedicate environment hadoop spark integrate traditional hpc management vendor effort rewrite consume mpi laborious easy task limited effort adapt data AI software hpc however approach remove limitation exist software package library significant effort modify exist hpc technology flexible easy limited popularity traditional program fortran decrease message passing interface mpi parallelization library criticize complicate application program interface api program user easy feasible scalable align popular program java python develop application workstation laptop easily peta exascale developed hardware provider direction unification operating compiler workstation approach approach establish program java user easy flexible scalable program framework allows development workload hpc data AI others easy integration hpc data AI application moreover due java portability user develop laptop workstation without recompilation hpc infrastructure peta purpose developed pcj library pcj implement partition global address PGAS program paradigm adhere promising context exascale PGAS model variable private owner thread nevertheless variable marked variable accessible thread execution address remote variable modify locally PGAS model easy construct perform operation significantly reduces programmer effort preserve code performance scalability pcj library fully complies java standard therefore programmer additional library standard java distribution pcj library hpc challenge award already successfully parallelization various application communication intensive graph graph suite pcj implementation outperforms hadoop implementation factor benchmark hadoop processing pcj library apache hadoop conventional widely benchmark performance hadoop cluster performance application developed pcj library apache hadoop pcj library develop code evolutionary algorithm minimum function define cec benchmark suite recent pcj usage parallelization sequence alignment pcj library easy implementation dynamic load balance multiple ncbi blast instance span multiple node earlier implementation static distribution previous pcj library allows easy development computational application data AI processing focus comparison pcj java performance comparison mpi code previous remainder organize remark emerge program program paradigm prospective program paradigm functionality pcj library discussion contains subsection discussion various application hpc workload contains performance application traditional computational intensive hpc workload stencil communication intensive algorithm fourier transform fft data  implementation detail performance data processing  AI workload parallelize pcj artificial intelligence workload description ongoing pcj library concludes conclusion prospective program paradigm machine data workload associate program traditionally performance compute python julia java others pcj startup python load modify python installation execution hostname command concurrently node plot reference image python acceptable hpc application due gordon  application  demonstrate python application performance compete native application fortran supercomputer however multiple version available limited backward compatibility significant administrative effort handle startup python application report node dedicate effort minimize acceptable python remains thread environment global interpreter lock bottleneck thread thread assign production code useful simulation implementation thread compatibility limited hardware vendor tune version python improve performance function perform cod optimally machine library vectorize parallelize assign workload understand hardware architecture julia program relatively unknown hpc community rapidly popularity parallel execution julia task module rely julia runtime library module suspend resume computation inter task communication without manually interface operating scheduler hpc application implement julia  project attain performance julia source code julia thread model fully utilize manycore intel xeon phi processor parallelization available java thread java concurrency introduce java SE improve java SE various implementation mpi library distribute java virtual machine jvm remote invocation rmi rely external communication library usability portability scalability performance mention motivate partition global address approach titanium scientific compute dialect java titanium defines construct dedicate compiler recent java python julia extent java parallelization independent task model limited communication capability significantly reduces algorithm implement trivially parallel alternative approach interfacing mpi library message passing model recently program model PGAS gain popularity PGAS important exascale distinct feature development effort approach PGAS model library  global array charm upc fortran  PGAS global namespace organize  fortran local data others global data successful realization PGAS program model java developed pcj library successful implementation scalability reasonable performance another prospective implementation APGAS library offering program java pcj library pcj opensource java library available bsd license source code host github pcj extension compiler user jar file develop parallel application java instal alternatively automation maven gradle library deployed maven central repository edu icm pcj artifact pcj programmer pcj implement parallel construct technical detail thread administration communication network program hidden programmer pcj library extension java parallel program easy implementation data partition pcj automatic data distribution task parallelization parallel algorithm allows efficient implementation summary elementary pcj diagram pcj compute model arrow communication variable image pcj library PGAS paradigm application collection thread pcj thread pcj thread local variable location physical memory applies thread within jvm pcj library pcj thread jvm parallel environment multiple  pcj thread application launch execution termination library manage thread execution thread actual pcj thread manage thread pcj library synchronize execution pcj  exchange data thread communication asynchronous perform pcj  pcj  pcj  synchronous version communication available data exchange specially marked variable exposition local remote address perform storage  annotation pcj mechanism data transfer ensure programmer asynchronous data transfer thread variable  local variable overlap operation calculation programmer status data transfer  pcj api successful PGAS implementation array fortran however dedicate effort align java programmer api version pcj library user collective operation implement efficient communication binary node  reduction algorithm faster iteration available thread pcj thread node collective data within physical node node reduces communication perform node jvm implementation detail java specific implementation PGAS functionality multi thread execution communication thread execution pcj allows scenario multiple thread jvm multiple  physical node jvm remote node relies secure ssh connection machine passwordless login authentication without passphrase startup python however grows node pcj startup initial communication synchronization thread utilize execution schema accessible supercomputer cluster     application node allocate situation instead deploy however situation internet address instead loopback address node file node description prepared user output hostname command execute allocate node communication architectural detail communication pcj thread intranode communication implement java concurrency mechanism thread another clone data copying reference concurrency access pcj library deeply serialize  thread partially thread serialize partially local worker  clone data data deeply thread data independently clone available java sufficient creates shallow array therefore data array thread implementation standard java util  moreover implementation java lang  interface  override clone public modifier mutable clone serialization deserialization mechanism serializable implement java serializable interface serialization handle additionally serialization byte array requirement data node communication node standard network communication socket data serialize thread transfer data  remote worker network communication perform java java  detail algorithm implement pcj communication described diagram pcj communication model arrow local remote communication image parallel application sum random listing  implement startpoint interface application parallel pcj  execution environment parallel application node node txt file distribute manner pcj thread sum data parallelization perform loop define loop adjust automatically thread execution partial sum accumulate variable local pcj thread variable broadcast define ensures variable  ensure thread calculate partial sum pcj barrier partial sum accumulate pcj thread pcj reduce fail node thread failure pcj library fail mechanism without mechanism computation stuck recoverable computation execute cluster situation useless utilization central processing cpu without useful action limit version pcj library fail mechanism computation gracefully failure fail mechanism alive abort message heartbeat mechanism communication neighbour node fail mechanism arrow node alive message neighbour node arrow node alive message neighbour node image alive message periodically node neighbour node node node neighbour node node node alive message neighbour node within predetermine configurable assumes failure node failure node assume alive message cannot node node pcj thread exit  exception failure occurs node discovers breakdown remove fail node neighbour immediately sends abort message neighbour interrupt pcj thread execute node node receives abort message remove node message neighbour avoid message already notify node sends abort message remain neighbour interrupt pcj thread fail mechanism allows quicker shut breakdown cluster cpu  utilized user disable fail mechanism appropriate flag pcj execution discussion performance obtain cray XC icm  poland   germany compute node equip intel xeon icm intel haswell  processor processor contains core hyperthreading available thread per core cray  interconnect instal pcj library architecture intel KNL however obtain cray XC exascale continuation architecture java oracle pcj oracle JDK APGAS mpi cray MPICH implementation version icm  machine respectively OpenMPI version java binding mpi data java mpi execution hpc workload 2D stencil 2D stencil algorithm typical 2D stencil 2D moore neighborhood cellular automaton devise john conway implementation infinite maximum width height thread  uniform distribution although algorithm optimization computational generate universe  memorization straightforward implementation lookup however memory alive respectively generate universe border  exchange asynchronously thread thread universe exchange thread neighbour universe treat performance  perform java virtual machine jvm jit compilation optimize instead execution interpret mode ensure garbage collector GC impact gain performance peak performance maximum performance simulation thread per node performance implement pcj mpi java mpi universe obtain cray XC icm pcj mpi java mpi cray XC  pcj ideal pcj drawn dash inset plot performance statistic calculate node thread inset plot whisker minimum maximum average quartile inside median image performance comparison application universe performance implementation pcj java mpi almost ideal scalability mpi version performance scalability performance data scalability thread node thread parallel efficiency decrease due workload processor communication halo exchange obtain weak mode constant amount allocate thread despite thread scalability beyond thread limit ideal dash pcj plot reference ability hpc application java pcj library inset performance statistic calculate application execute node thread whisker minimum maximum average quartile inside median mpi whisker visible execution performance execution jvm execution pcj java mpi minimum execution execution interpret mode however jit compilation quickly optimize vast majority performance clearly visible java application jit compilation stable performance maximum median quartile data almost indistinguishable fourier transform difficulty efficient parallelization fft global algorithm involves extensive communication efficient distribute fft implementation available algorithm publish   reference mpi implementation hpc challenge benchmark suite assess hpc performance implementation treat baseline pcj version described herein performance exchange factor performance 1D fft implement algorithm data HPCC implementation mpi java mpi reference array ideal pcj drawn dash inset communication percentage execution benchmark cray XC icm image pcj code chosen PGAS implementation developed  fortran fortran algorithm radix binary exchange algorithm aim reduce interprocess communication structure firstly local fft calculation perform reverse permutation input data thread perform data transposition cyclic layout subsequent local fft computation finally reverse transposition restores data layout similarly random access implementation inter thread communication therefore localize routine global conversion data layout cyclic vice verse implementation allows limit communication implementation exchange central overall program performance complex dimensional fft alternative pcj implementation scalability non iterate thread data memory  non version hypercube communication utilizes series pairwise exchange avoid network congestion nonblocking communication achieve peak performance hypercube exploit available computational resource extent peak performance thread thread nonblocking communication java mpi code algorithm pcj calculation exchange implement native mpi primitive scalability pcj implementation reference mpi code java mpi execution java native implementation irrespective underlie communication library confirm performance scalability pcj java mpi implementation pcj library easy error prone library external java mpi therefore alternative mpi java implementation HPCC implement access data data  wordcount wordcount traditionally demonstrative purpose showcase reduce program paradigm reading input file basis counting individual occurrence phase reduction perform sum partial calculate worker thread source code application available github herein comparison pcj APGAS performance mpi version baseline  implementation  version enhance dynamic load balance capability APGAS library implementation wordcount code prior APGAS code slurm multiple program multiple data  mode command computation remote APGAS node thread achieve due APGAS requirement oracle JDK MB utf encode text english translation  peace textual corpus counting code perform scalability regime input file thread reading file file content preloaded application memory benchmark scalability wordcount application implement pcj APGAS   denote fork algorithm algorithm lifeline global load balance mpi plot reference ideal pcj mpi drawn dash MB file obtain cray XC icm APGAS calculate node due startup exceed attribute library  generic startup image performance reduction phase overall performance pcj obtain binary communication APGAS reduction implement report performance pcj due simpler therefore efficient reduction scheme scalability pcj implementation pcj performance APGAS tracked pcj reduction implementation regard native code chosen task built primitive manipulation routine code ideally performance absolute trace implementation tokenizing code pcj APGAS earlier consistently regular expression task obtain hadoop cluster pcj implementation faster hadoop spark artificial intelligence workload AI currently vibrant research gain advance processing capability hardware pcj library artificial intelligence ensure AI workload sufficient processing potential exploit future exascale respect workload firstly stem traditional mode AI research aim discover inner physiological library aid researcher task model  neuronal  secondly training artificial neural network distribute gradient descent calculation neural network model     model organism neuronal development extensively remains organism fully  currently aim link structure actual worm behavior worm  neuron ablate laser affect movement mathematical model relevant  fragment  expert model define ordinary differential equation parameter performance evolution algorithm parameter neural network simulate   performance data execution without hyperthreading benchmark cray XC  ideal drawn dash image parameter model accuracy impossible calculate traditional numerical analytical therefore differential evolution algorithm explore model parameter prediction empirical data mathematical model implement java parallelize pcj library library rapidly prototype  model align accord shift requirement  expert regard implementation performance consult express configuration per experimental dataset amount population candidate vector affiliate thread evaluate iteration weak regime ideal achieve irrespective hyperthreading status overhead scenario minimal outlier visible thread probably due stochastic differential evolution algorithm disparity regard model evaluation concrete parameter distribute neural network training pcj library workload specific machine application successfully integrate tensorflow distribution gradient descent operation effective training neural network perform python mpi horovod comparison distribute training horovod pcj cray XC icm accuracy achieve image presentation purpose network consist fully layer neuron respectively handwritten digit recognition epoch fix iteration mnist dataset compose training image aside validation purpose mini batch consist image pcj algorithm gradient descent calculation horovod data parallel calculation perform wise gradient subsequently average mini batch implement asynchronous parallel gradient descent described implementation wise horovod user python package wrapper hook enhance exist code distribute capability mpi interprocess communication pcj runner cod java tensorflow java api distribution instrumentation training calculation relevant implement python code code implement reduction operation hypercube allreduce algorithm calculation perform cray XC icm python instal alongside tensorflow horovod instal python pip version slurm distribute calculation tensorflow per node thread per node scalability regime pcj implementation facilitates asynchronicity par mpi horovod training data node implementation disadvantage accuracy overall calculation communication routine thread local training datapoint thread node omit asynchronous achieve performance horovod cluster non standard configuration available tensorflow installation fully exploit inter node parallelism math kernel library mkl tensorflow java available maven package exhibit tune mkl computation clearly pcj efficiently parallelization AI workload moreover java allows easy integration exist application framework pcj easy deployment efficient configuration tensorflow hpc cluster future pcj library socket transfer data node straightforward however precludes utilization novel communication hardware cray  infiniband interconnects ongoing novel technology pcj important network intensive application however java interface simplify integration   choice however specific implementation communication usage pcj library easy attempt data access java remote memory access RDMA technology investigate pcj library another communication performance data copying cannot avoid due java technology zero access memory important issue pcj library java principle pcj library additional library pcj standard java serialization mechanism undergo external serialization clone library kryo data development pcj library focus code execution multiple multicore processor whilst cray XC representative equip graphic processing gpus peta exascale heterogeneous addition cpu node contains accelerator gpus programmable gate array FPGAs others pcj library accelerator jni mechanism  compute unified device architecture cuda kernel accelerator mechanism checked experimentally performance preparation similarly precludes already exist pcj tensorflow code tensorflow gpu exploitation capability conclusion perspective exascale  computer productive program paradigm capable develop code workload supercomputer data processing artificial intelligence application unfortunately majority workload computer implement java scala hpc community perform brief review program program paradigm attention context hpc data AI processing focus java widely program feasibility implement AI data application computer pcj library allows easy development highly scalable parallel application moreover pcj promise successful parallelization hpc workload AI data application application scalability performance report previous publication clearly feasibility java implement parallel application thread PGAS program model allows easy implementation various parallel schema traditional hpc data AI peta exascale propose possibility application java popular program widely business application pcj library allows effort extend application computer simulation data analysis artificial intelligence pcj library allows easily develop application variety resource personal workstation computer resource extend exist application integration various processing maintain advantage java important exist application allows easy adaptation demand abbreviation AI artificial intelligence api application program interface cpu central processing cuda compute unified device architecture fft fourier transform fpga programmable gate array GC garbage collector gpu graphic processing hpc performance compute jit jvm java virtual machine mkl math kernel library mpi message passing interface  multiple program multiple data pcj parallel compute java PGAS partition global address RDMA remote memory access rmi remote invocation ssh secure