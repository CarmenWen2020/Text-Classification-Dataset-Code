mining average utility itemsets HAUIs promising research topic data mining contrast utility itemsets bias itemsets regardless upper bound prune strategy exist HAUI mining algorithm concept maximal utility namely utility item transaction generalize typical maximal utility average utility upper bound item itemset propose efficient  mining algorithm generalize maximal utility HAUIM gmu algorithm propose concept generalize maximal utility generalize average utility upper bound discus propose upper bound tighter generate candidate prune strategy propose concept effective filter  itemsets algorithm described detail extensive experimental HAUIM gmu algorithm outperforms exist algorithm access auckland library introduction topic data mining frequent itemset FI mining aim FI mining discover item frequency transaction database however frequency metric FI reflect profit utility item extension FI utility itemset hui mining itemsets profit quantity item recently mining  considerable attention algorithm propose although hui mining discover profitable itemsets FI mining considers frequency obvious longer itemsets tend utility utility threshold itemsets item likely discover balance profit itemsets average utility itemset mining HAUIM propose contrast  average utility itemsets HAUIs normalize utility itemsets accord itemsets profit discover HAUIM algorithm traverse breadth manner maximal utility item transaction upper bound itemset mining algorithm wise candidate generation roadmap algorithm suffers database scan numerous candidate itemsets HAUIM algorithm subsequently propose data structure prune strategy algorithm HAUIM HAUIM multiple threshold HAUIM dynamic database HAUIM data parallel HAUIM algorithm reduce candidate consideration tighter upper bound factor HAUIM HAUIM motivation algorithmic consideration exist algorithm maximal utility remain maximal utility revise transaction maximum utility component upper bound utility item algorithmic consideration generalize exist upper bound item itemset precise approximation candidate furthermore knowledge parameter mining fis mining HAUIs propose prune strategy perspective calculation occurs within database scan operation propose generalize average utility upper bound gauub overestimate average utility gauub tighter typical average utility upper bound traverse efficiently prune strategy upper bound model prune strategy novel algorithm average utility itemset mining generalize maximal utility HAUIM gmu propose experimental demonstrate superiority HAUIM gmu exist remainder organize HAUIM sect review related propose algorithm explain sect experimental analyze sect finally conclusion sect HAUIM II finite item II itemset itemset item itemset DD TN transaction database transaction DD unique identifier tid subset II internal utility quantity item transaction external utility profit item utility item transaction define utility itemset transaction define  utility itemset DD define  transaction utility TU transaction define TU average utility itemset transaction define average utility transaction database DD define  minimum average utility threshold specify user define percentage TU database whereas minimum average utility define min util  itemset HAUI min util otherwise average utility itemset  HAUI  item HAUI  transaction database DD task HAUIM itemsets average utility min util maximal utility transaction DD define max average utility upper bound auub itemset define auub  auub min util auub itemset   item  auub model generally downward closure improve mining efficiency HAUIs database profit transaction database profit convenience denote itemset CF database utility item transaction utility itemset CF transaction CF utility itemset CF transaction database CF CF CF CF average utility CF transaction database CF CF CF CF min util CF min util CF HAUI however threshold CF hui CF min util maximal utility max maximal utility transaction auub CF auub CF auub CF min util CF  exist algorithm HAUIM propose phase mining  HAUIM algorithm  wise traversal HAUI propose furthermore auub propose approximate average utility itemset breadth algorithm suffers multiple database scan apriori algorithm mining fis subsequently algorithm  growth growth methodology propose mining algorithm  growth construct  generates  growth approach finally identifies HAUIs candidate although structure compact minimal occupies memory propose projection HAUIM algorithm  instead building structure  prefix projection avoid  itemsets furthermore index efficient computation link transaction processing itemsets propose HAUI algorithm mining HAUIs facilitate mining efficiency node itemset auub transaction identifier transaction another data structure efficient HAUIM average utility AU HAUI miner algorithm itemset transaction identifier utility transaction maximum utility AU information relevant HAUIM mining efficiency improve  another HAUIM algorithm average utility itemset  structure AU  maximum item utility remain item transaction maximum utility regardless data structure prune strategy compact effective upper bound approximate universally important HAUIM algorithm auub upper bound model approximates average utility itemsets sum maximum utility transaction itemset maximum utility transaction indicates item utility item utility item transaction improve auub model remove  item prefix projection propose tighter upper bound remain maximum utility considers relevant item upper bound maximal item utility entire transaction maximal item utility remain item respect itemset component consists utility item itemsets propose upper bound HAUIM   algorithm maximum utility upper bound remain maximal utility item improve upper bound revise transaction maximum utility upper bound  approximates average utility itemset itemset contrast  propose algorithm approximates average utility itemset itemset propose algorithm introduce propose generalize maximal utility gauub discus prune strategy propose algorithm detail finally analyze complexity propose algorithm generalize maximal utility upper bound maximal utility overestimate HAUIs  algorithm generally summation maximal utility item transaction target itemset initial upper bound HAUIs identify calculate actual average utility regardless data structure prune strategy maximal utility fundamental component HAUIM algorithm exist maximal utility related maximal utility item itemset transaction generalize concept itemsets definition DD transaction item transaction utility  compose utility item  define   utility item item utility  definition DD transaction item generalize maximal utility gmu itemset define  jth  generalize maximal utility itemset CF gmu definition maximal utility transaction maximum utility generalize maximal utility generalize maximal utility generalize average utility upper bound definition itemset generalize average utility upper bound gauub define gauub  CF transaction CF  transaction    accord definition gauub CF average utility upper bound auub CF gauub tighter auub definition average utility upper bound gauub theorem itemset gauub min util HAUI proof transaction item  item utility descend itemset transformation hence   DD hence DD DD   gauub gauub gauub min util gauub min util therefore HAUI theorem gauub effective metric overestimate HAUIs theorem itemset gauub auub proof accord definition gauub  DD DD kmax DD    auub theorem propose gauub tighter typical auub definition itemset gauub itemset  gauub min util similarly  item  CF min util gauub CF min util CF  theorem  HAUIs  HGAUUBIs   proof  min util accord theorem gauub gauub min util accord definition  hence   accord theorem mining HAUIs safely identify HGAUUBIs filter HAUIs calculate actual average utility candidate prune strategy prune strategy important component mining HAUIs efficiently discover fis itemset denote sup define transaction occurs subset quantity improve mining efficiency hui discovery propose prune HAUI realize strategy introduce concept maximal utility critical introduce concept define DD itemset item transaction database DD associate transaction subset definition itemset itemset maximal utility  define  mui  mui muj mui maximal utility transaction definition DD transaction database transaction database maximal utility  DD define  mui  mui muj mui maximal utility transaction DD accord definition maximal utility itemset maximal utility transaction occurs subset sort descend maximal utility maximal utility database DD empty  database CF sup  CF  DD definition DD transaction database transaction min util minimum average utility database maximal utility  DD  critical integer csup   min util csup  min util accord definition csup integer threshold database transaction utility csup cumulative sum maximal utility min util otherwise cumulative sum maximal utility min util database min util csup  DD  min util  min util critical prune HAUIs theorem itemset csup critical transaction database DD sup csup  superset  proof suppose sup sup csup csup csup suppose transaction DD  DD  similarly  accord definition mul hence auub  mul  csup  accord definition csup  min util auub min util  sup sup sup csup sup csup hence accord discussion  accord theorem itemset sup critical safely prune  HAUIM gmu algorithm propose HAUIM gmu algorithm described algorithm algorithm extension itemset described item II extensible item itemset denote II item accord algorithm transaction database scan prune strategy theorem eliminate  item inadequate item filter delete item HGAUUBIs transaction utility transaction compose remain item calculate procedure  extension described algorithm empty parameter loop itemset HGAUUBIs denote  output itemsets average utility min util calculate actual average utility  scan transaction scan database itemset algorithm generates candidate HAUIs traverse depth manner terminates empty loop enumerates candidate HAUIs prefixed candidate generate concatenate item critical gauub sequentially prune qualify itemsets generate candidate  extension procedure recursively transaction database profit suppose min util accord  DD csup sup csup prune database gauub remain item gauub remain item gauub min util item delete accord theorem organize database transaction utility reorganize database candidate extension lexicographic extend item sup AB csup prune gauub AB min util AB cannot HAUI AC cannot prune sup AC csup gauub AC min util AC  similarly verify AF  traversal perform fashion itemsets prefixed HGAUUBIs discover actual average utility candidate calculate scan entire database complexity analysis computational complexity HAUIM gmu analyze principal component database scan operation  item delete transaction utility calculate transaction utility item calculate assume item database operation transaction calculate gauub item sort descend utility sort complexity  complexity database scan operation complexity  complexity generation HGAUUBIs HAUIM gmu generates HGAUUBIs recursively pure depth traversal HGAUUBIs maximum depth upper bound complexity complexity proportional maximum recursion depth namely identification HAUIs generate HGAUUBIs candidate HAUI  HGAUUBIs HGAUUBIs transaction complexity  database database scan stage complexity  complexity HAUIM gmu exist algorithm HAUI HAUI miner EHAUPM algorithm traverse depth manner propose HAUIM gmu algorithm analyze difference algorithm HAUIM gmu HAUIM gmu HAUI phase algorithm candidate generate candidate verify identify actual difference HAUI HAUIM gmu additional information storage candidate HAUI item transaction complexity proportional  assume item database complexity operation HAUIM gmu transaction transaction utility database maximal utility complexity operation HAUIM gmu superior HAUI storage additional information analyze complexity HAUI miner EHAUPM HAUIM gmu HAUI miner node storage EHAUPM node storage furthermore estimate average utility occurrence matrix  auub itemsets storage  storage additional information EHAUPM accord discussion regardless AU  complexity HAUI miner EHAUPM basically accord discussion HAUIM gmu complexity additional information HAUIM gmu superior algorithm storage additional information however HAUIM gmu  complexity operation HAUI miner EHAUPM candidate generate storage additional information candidate complexity HAUIM gmu comparable HAUI miner EHAUPM actual performance HAUIM gmu depends gauub model prune strategy experimental evaluate performance algorithm HAUIM algorithm HAUI HAUI miner EHAUPM source code HAUI miner EHAUPM  data mining library experimental environment datasets perform computer core ghz cpu GB memory microsoft program java datasets evaluate performance algorithm characteristic datasets characteristic datasets TI0DK TI0DK synthetic datasets data generator  parameter average item per transaction item transaction respectively datasets  chess dataset contains chess dataset derive retail dataset contains anonymized retail basket data  retail mushroom dataset contains various specie mushroom characteristic odor habitat performance analysis synthetic datasets evaluate performance algorithm synthetic datasets TI0DK TI0DK runtime memory various minimum average utility threshold comparison peak memory usage standard java api performance evaluation synthetic datasets image comparison TI0DK HAUIM gmu achieves considerable performance improvement HAUI mining algorithm efficiency HAUIM gmu consistently magnitude faster HAUI HAUI miner twice EHAUPM although superior efficiency HAUIM gmu EHAUPM obvious algorithm gap increase minimum average utility threshold decrease memory consumption HAUIM gmu consumes average memory algorithm memory consumption HAUI HAUI miner fluctuates threshold HAUI memory requirement HAUI miner however threshold situation reverse HAUI consume memory HAUI miner difference algorithm HAUI item candidate itemset whereas HAUI miner AU prune strategy threshold AU prune strategy perform alternately relative correspondingly average EHAUPM performs respect memory usage TI0DK dataset   information prune however structure reduce significantly TI0DK TI0DK HAUIM gmu consistently faster algorithm furthermore HAUIM gmu remains constant around increase minimum threshold varies indicates propose gauub model effective steadily filter candidate HAUIs memory usage HAUI miner performs EHAUPM HAUIM gmu HAUI minimum average utility threshold HAUIs item threshold HAUIs HAUIs HAUIs circumstance neither  EHAUPM gauub HAUIM gmu effective AU HAUI miner reduce memory usage discussion HAUIM gmu outperforms HAUI HAUI miner EHAUPM regard efficiency considerably memory apply synthetic datasets performance analysis datasets evaluate performance algorithm datasets comparison HAUIM gmu performance datasets retail chess dataset runtime increase minimum threshold decrease average HAUIM gmu faster EHAUPM magnitude faster HAUI miner magnitude faster HAUI HAUIM gmu consistently consumes memory algorithm HAUI miner memory EHAUPM minimum threshold memory usage HAUI HAUI miner fluctuate indicates AU structure minimum threshold improve memory performance HAUIM gmu reflect tighter upper bound gauub model reduces approximate demonstrates critical effective filter  item performance evaluation datasets image dataset superiority HAUIM gmu obvious threshold HAUI HAUI miner return algorithm plot efficiency HAUIM gmu magnitude faster EHAUPM minimum average utility threshold HAUIM gmu EHAUPM terminate respectively memory storage algorithm exhibit steady increase minimum average utility threshold decrease reasonable minimum average utility threshold itemsets HAUIs increase memory usage average HAUIM gmu memory EHAUPM indicates efficiency improvement sacrifice storage datasets retail propose HAUIM gmu outperform algorithm HAUIM gmu EHAUPM consumes memory EHAUPM HAUI miner analyze characteristic retail dataset identify weaker performance HAUIM gmu indicates retail sparse dataset shortest average transaction datasets dataset HAUIs minimum average utility threshold HAUIs item specifically HAUIs HAUIs HAUIs HAUIs gauub model omit limited item efficiency storage finally mushroom dataset HAUIM gmu performs efficiency storage usage superiority obvious runtime HAUIM gmu slightly faster EHAUPM regard memory usage HAUIM gmu consumes slightly memory HAUI miner mushroom contains itemsets item prune effective item neither mining efficiency memory usage significantly improve critical summary propose HAUIM gmu algorithm outperforms related HAUI mining algorithm datasets retail generally considerably reduce adopt tighter upper bound mining improve prune strategy evaluation prune strategy evaluate benefit prune strategy performance HAUIM gmu without technique implementation without prune strategy refer HAUIM gmu conduct TI0DK synthetic dataset retail datasets TI0DK chosen synthetic counterpart TI0DK datasets HAUIM gmu performance chess furthermore retail chosen HAUIM gmu outperform algorithm dataset comparison performance evaluation without prune strategy image TI0DK dataset prune strategy accelerates mining efficiency magnitude furthermore memory consumption reduce although difference HAUIM gmu HAUIM gmu significant TI0DK runtime memory consumption prune strategy apply dataset although HAUIM gmu outperform algorithm retail dataset demonstrate prune strategy improve performance reduce storage minimum average utility threshold prune strategy efficiency improvement magnitude accord prune strategy suitable sparse datasets TI0DK retail item dataset usually critical filter  item recursively however dense datasets item item prune critical conclude prune strategy improve runtime efficiency memory consumption effectiveness gauub verify superiority gauub auub HGAUUBIs generate gauub  generate auub reduce ratio RR compute RR NG NH NG NH HGAUUBIs  respectively comparison HGAUUBIs  TI0DK dataset comparison HGAUUBIs  TI0DK dataset comparison HGAUUBIs  chess dataset comparison HGAUUBIs  dataset comparison HGAUUBIs  retail dataset comparison HGAUUBIs  mushroom dataset typical auub model propose gauub model reduces candidate TI0DK dataset explain sect HAUIs item minimum threshold TI0DK gauub cannot filter candidate auub furthermore filter gauub retail dataset obvious average chess datasets gauub model candidate average auub model gauub model obvious TI0DK mushroom datasets gauub model reduces candidate obtain auub model average respectively accord analysis propose gauub model effective generate candidate typical auub model HAUIs conclusion future extend concept maximal utility average utility upper bound item itemset propose HAUIM algorithm HAUIM gmu rationality model exploit concept prune performance propose algorithm algorithm experimental HAUIM gmu efficient memory although propose gauub model tighter dominant auub model effective filter  itemsets HAUIM gmu algorithm phase routine stage candidate verification future attempt incorporate novel data structure avoid candidate generation furthermore extend HAUIM gmu algorithm data application investigate future