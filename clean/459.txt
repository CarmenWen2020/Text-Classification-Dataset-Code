software service SaaS significant attention software provider user software delivery model exist transfer business SaaS model intensely competitive environment impose challenge SaaS developer vendor SaaS development complex SaaS depends architecture development understand SaaS application architecture phase SaaS development focus mainly empirical investigation factor SaaS architecture phase identify systematic literature review quantitative survey developed conduct identify architecture factor improve successful SaaS application developed survey propose hypothesis empirical investigation evidence vendor developer architecture factor SaaS development competitive environment factor customization scalability MTA multi tenancy architecture security integration fault tolerance recovery management contribution investigate empirically influence identify factor architecture SaaS application introduction software service SaaS software delivery model provider software service internet multiple user SaaS generation software engineering package development execution automate runtime resource management security source model software development provider target user medium enterprise service instal assemble maintain SaaS provider user per pricing model flexible location access SaaS application web email google site  crm youtube video etc enables various service without purchase maintain infrastructure nowadays intensely competitive environment adopt model web business application attention software provider user advantage SaaS traditional premise software per model relatively monthly investment instead upfront investment allows rid personnel manage software underlie infrastructure decrease financial pressure application service access without worry development installation SaaS vendor application domain customer flexibility decision shift another vendor invest infrastructure SaaS architecture database partition database architecture scalability issue user interface apis workflow tradition application traditional application development mainly focus functional requirement premise deployed application implicit operation security application hardware specific annual innovation cycle contrary SaaS integrate internet SaaS application weekly innovation service granularity SaaS developer usage customer hence SaaS maintain relatively quality conventional SaaS development approach traditional software development lifecycle developed leverage benefit deliver orient compute platform research motivation severity competition SaaS compute growth SaaS effective service attract customer provider concern SaaS development architectural architecture fulfill functional non functional requirement SaaS architecture database orient architecture middleware orient architecture paas architecture service orient SaaS architecture recent research researcher propose incremental mature SaaS model maturity depends SaaS architectural characteristic identify factor SaaS architecture empirically quantitative survey conduct report research model hypothesis survey identify factor important develop SaaS application implication SaaS development organize describes literature review propose hypothesis research methodology describes data analysis discussion concludes literature review propose hypothesis decade SaaS identification factor architecture dimension SaaS application successful vendor competitive environment criterion selection identify factor presence publish article SaaS development architecture implementation issue presence identify systematic literature review identify factor related literature described subsection customization customization concept adopt multi tenant tenant requirement requirement tenant successful SaaS application customization feature data service interface customization data customization enables tenant modify data application customization configure configure link service application tenant service customization interface customization tenant customize display graphic font accord enable customization provider SaaS template application remains customize tenant accord unique requirement customizable customization variability application tenant customize customization component component fulfill variation tenant requirement customization multiple option enable tenant customize application customization interdependent option variability permit subsequent variability dependence variability hinders customization although customization software research feature SaaS multi tenancy awareness etc introduce challenge SaaS customization propose SaaS maturity model described SaaS provider automatically generate customization variability SaaS application implement multi tenant web application framework SaaS easiness configuration categorize manual automate orthogonal variability model aspect orient approach customization  requirement business propose layer configuration perspective business composition multi granularity model achieve customization multi layer layer relation complexity introduce dependency customization enforce validation customization choice tenant avoid unpredictable propose model customization temporal logic action propose customization model meta graph relationship customization apply  developer multiple dimension user concern customize independently report customization model easy handle model accord discussion feature customization important role improve architecture SaaS application independent variable hypothesis propose hypothesis provision customization feature positive influence SaaS application scalability handle increase quantity maintain stable performance resource scalable online shopping portal workload holiday acceptable response workload feature scalability feature SaaS application multi tenant tenant user simultaneous access user SaaS scalable performance user SaaS application vendor guarantee minimum requirement performance workload underlie compute resource scalability classify category vertical horizontal define application machine compute resource memory disk bandwidth disk distribute application multiple machine configuration handle additional load resource machine increase limit therefore application implement instead SaaS application correctly consume resource specific effective SaaS provider load balance algorithm cluster replica application server distribute request processing replica achieve scalability scalability SaaS underlie paas SaaS scalability multi scalability architecture tenant awareness automate data migration workload software architecture database access SaaS application implementation literature researcher explore importance scalability propose mechanism achieve scalability SaaS application identify important aspect significant impact SaaS scalability achieve effective SaaS scalability automation intelligent environment usually automation achieve define service variable workload met trigger action service horizontally vertically automatically remove resource auto auto application efficient handle unpredictable traffic variation demand faster response address challenge exist developed robust controller  enables qualitative description elasticity fuzzy logic handle unpredictable environment request degradation response moreover propose unified framework load distribution fault tolerance stateful application server distributes load efficiently across replica replica easily shrink demand addition propose hybrid genetic algorithm composite SaaS application domain knowledge application infrastructure layer decision scalability SaaS application another research metric scalability SaaS application evaluation report scalability analysis   scalability metric addition propose scalability analysis architectural template propose service infrastructure SaaS performance scalability evaluation literature scalability role development SaaS application guarantee minimum requirement performance workload therefore scalability independent variable hypothesis propose hypothesis consideration scalability characteristic SaaS application architecture positive impact MTA multi tenancy architecture ability SaaS application multiple tenant tenant organization entity server service instance tenant dedicate server  multi tenancy architectural instance software service provider infrastructure access multiple tenant component data model server database layer multi tenancy feature SaaS software SaaS vendor multi tenancy data model multi tenancy application multi tenancy multi tenancy data model multi tenancy simplest tenant database data access tenant specific GUID application multi tenancy tenant instance application along database multi tenancy brings variability software tenant database software instance variant benefit multi tenancy data aggregation opportunity multi tenant SaaS decrease maintenance improves utilization rate hardware resource deployment maintenance software become easy advantage multi tenancy organization transform tenant SaaS application multi tenant multi tenancy introduces complication tenant tenant hardware resource feature scalability security configurability effort multi tenant SaaS development multi tenant apply software layer multi tenant SaaS model application layer middleware layer virtual machine VM layer operating layer propose conceptual architecture SaaS platform configurable  SaaS application moreover introduce evaluate multi tenancy investigate service delivery combine challenge achieve benefit multi tenant application difficulty calculate resource requirement additional tenant user meeting constraint tenant application instance propose database tenant multi tenant placement model without violate SLA requirement maximum saving distribute compute environment highlight challenge developer maintainer engineering  software application database choice MTA enable SaaS issue MTA database identify approach architecture multi tenant SaaS application addition technique data tier scalable multi tenant application furthermore evaluate performance tenant user amount data per tenant propose approach service recommendation multi tenant SaaS application cluster candidate service tenant similarity qos requirement define requirement SLA aware evolution multi tenant application propose dynamic adaption approach manage multiple coexist version component without service continuity throughout evolution SaaS application propose approach beneficial tenant SaaS provider recently explore SPL MDE technique manage variability evolve multi tenant SaaS application precede discussion multi tenancy feature SaaS architecture SaaS vendor independent variable hence hypothesis hypothesis facility multi tenant architecture SaaS application important aspect SaaS application security benefit convenience SaaS model threaten security challenge multi tenancy deployment model instance tenant instance multiple tenant resource multi tenant SaaS application increase security privacy concern outsource host asset multi tenant SaaS application multiple tenant instance server tenant competitor malicious user data enterprise SaaS provider data along data enterprise SaaS provider deploys public data along data unrelated SaaS application provider replicate data multiple location across achieve availability local enterprise guard secure strategic data business access compliance policy SaaS model client totally dependent provider security management data secure SaaS model lack visibility client uncomfortable reluctant integrate business SaaS security feature multi tenant SaaS application application engineer multi tenancy SaaS application security requirement tenant emerge application service developed deliver requirement business security risk traditional security engineering approach fix cod service provider multiple tenant access instance tenant security requirement analyze SaaS security issue conduct survey security risk service delivery model compute later highlight security challenge SaaS model compute literature analyze security issue compute highlight security concern SaaS application highlight concern application security multi tenancy data security accessibility examine SaaS context environment compute mobile compute software define networking internet later classify subgroup mapped issue SaaS architecture layer insight issue approach model driven engineering MDE security mechanism handle SaaS security code propose security model SaaS SMS assess enhance security layer SaaS delivery model developed model prototype  model driven approach dynamically engineering security multi tenant SaaS application runtime propose quality model security quality service software quality SaaS service perspective provider user separately evidence collection security incident SaaS important service consumer limited access evidence security incident investment monitor available generate security alert intrusion detection network audit vulnerability scan analysis security alert generate security monitor node network useful information detect attack pinpoint potential misuse tenant trust achieve monitor security status behavior host asset developed model SaaS satisfaction incorporates perceive security perceive understand role security client satisfaction propose framework address security alert generate security monitor automate identification alert filter decision enterprise become demand detail data secure vendor isolate data multi tenant important implement security SaaS requirement variation SaaS importance SaaS resource multiple tenant user tenant independent variable therefore hypothesis address security concern SaaS architecture development positive impact SaaS application integration nowadays business complicate business business application integrate premise SaaS application advantage SaaS SaaS application integrate service application desire business functionality accord survey percent SaaS integration facility SaaS promise application SaaS platform expose data metadata functionality service web service discover query update premise application web service soa integration easy allows client data functionality programmatically integrate SaaS application soa infrastructure standard SaaS provider web service application program interface apis batch synchronization data delete update statement complex enterprise integration requirement integration percent SaaS implementation layer SaaS application user interface business logic data integration happens layer application integrate environment user interface access user switch interface credential SaaS premise application user interface integration enables user access SaaS service application business SaaS business another SaaS premise application integration automate business across multiple SaaS service premise application integration usually SaaS service data transaction data data arise synchronize migrate data SaaS service SaaS service premise application data source data application environment data integration usually data integration SaaS essential integration data merge synchronization important integration premise application although SaaS application facilitate data import export however challenge connection SaaS application effort integrate SaaS application exponentially absence standard data model diversity issue SaaS integration security privacy controllability composition orchestration data transformation data transfer standard compliance flexibility location premise source target integration currently SaaS vendor toolkits integration integrator however unified environment standardize SaaS integration technique improve integration productivity efficiency SaaS adoption web service adoption SaaS foundation SaaS service unified environment absence define validation effective integration framework standard connectivity protocol interaction interface service api increase difficulty integration although integration barrier adoption SaaS research investigate integration SaaS important requirement integration security privacy requirement business data customer forth SaaS service premise application internet described SaaS integration emerge integration technology examine issue integrate communication service dynamic SaaS application propose transfer business software integrate software SaaS environment code associate propose apply commercial software examine premise enterprise application landscape integrate SaaS avoid integration introduce intermediate layer environment apply enterprise service bus SaaS broker integration centralize SaaS communication SaaS business model obvious integrate SaaS local premise application important factor advantage SaaS model independent variable hypothesis propose hypothesis address integration issue positive influence SaaS application fault tolerance recovery management fault tolerance feature continuously failure fault tolerance algorithm server replica mask failure individual replica usually sufficient backup concern critical service application execution reliability availability therefore failure predict handle proactively minimize impact execution application service fault detector handle detection host fault application performance compute hpc fault tolerance GAE google app transparent fault tolerance scalability without interference application application standard fault tolerant policy proactive fault tolerance policy reactive fault tolerant policy avoid failure prevention principle proactive fault tolerance fault tolerant technique principle proactive fault tolerance preemptive migration software  reduce consequence fault already policy reactive fault tolerance checkpointing restart replication task  fault tolerant technique reactive fault tolerance policy reactive technique proactive technique simplicity implementation incorrect prediction due proactive fault tolerance report comparison replication style  application checkpoint computational resource bandwidth recovery although SaaS fault tolerant mechanism addition underlie paas fault tolerance SaaS identify factor interaction scalability SaaS application developed framework recovery guarantee  application mask failure user fault tolerance technique heartbeat gossip algorithm detect application smoothly propose architecture handle fault tolerance load balance stateful application server propose criticality fault tolerance formulate effective fault tolerance strategy multi tenant service integrate fault tolerance strategy across multiple tenant fault tolerance recovery management architecture feature SaaS application fault tolerance recovery management independent variable hence hypothesis correspond null hypothesis hypothesis fault tolerance recovery management important feature SaaS application architecture research model methodology research model objective propose research model relationship architecture factor SaaS application understand influence factor overall SaaS development quality SaaS model theoretical foundation exist concept SaaS development literature identify systematic literature approach literature discus factor mention SaaS architecture impact overall SaaS development proposes investigate empirically influence association software factor improve SaaS architecture theoretical model empirically investigate research model theoretical model evaluates relationship various independent variable emerge software engineering management concept dependent variable performance SaaS application context SaaS application architecture mainly investigates address research research SaaS developer improve quality SaaS application specifically architecture dimension capture business research model independent variable customization scalability MTA security integration fault tolerance recovery management dependent variable SaaS application performance multiple linear regression equation model  SourceRight click MathML additional feature coefficient independent variable research methodology SaaS development stage stage requirement stage focus explore business opportunity requirement analysis stage perform business perspective phase business model technology implementation stage perform SaaS platform environment stage focus validation interaction application SaaS platform performance usage meter phase factor SaaS architecture important role employee SaaS development organization target respondent data collection author contact SaaS development organization respondent participate multinational organization asia europe america wise distribution respondent respondent specific respondent specific agreement respondent survey identity confidential SaaS development chosen survey SaaS project respondent respondent percentage role SaaS application development project participant mainly SaaS development project application developed platform standalone device web PC mac mobile phone SaaS project development duration project respondent percentage respondent role project respondent developer respondent project development duration qualify survey project requirement cancel within respondent role developer programmer designer producer manager tester sixty respondent participate survey respondent per organization almost percent participant organization medium provider business critical percent respondent belong organization customer percent respondent organization provider data factor perceive SaaS application performance identify research model depict topic questionnaire appendix data collection organization involve SaaS development extent identify factor SaaS development project questionnaire respond SaaS application performance respondent specify agreement likert independent variable thirty statement dependent variable SaaS application performance statement perform detail literature review generate statement factor likert associate statement strongly disagree strongly statement identify factor numbered appendix multi item likert project within SaaS application performance chosen dependent variable statement label sequentially appendix reliability validity analysis reliability stability consistency measurement validity refers valid inference agreement reliable valid research quantitative analysis perform reliability validity analysis perform technique empirical analysis perform empirical integral precision reliability validity analysis consistency multi measurement statement factor reliability analysis perform sample dataset evaluate consistency cronbach alpha coefficient researcher cronbach alpha researcher reliability coefficient satisfactory others satisfactory criterion cronbach alpha satisfactory depict cronbach alpha coefficient principal component analysis variable cronbach alpha coefficient principal component analysis variable perform validity analysis principal component analysis eigenvalue criterion retain component kaiser criterion eigenvalue analysis factor factor eigenvalue hence report convergent validity adequate data analysis technique statistical approach perform empirical investigation ass implication propose hypothesis research activity stage normal distribution parametric statistical perform stage stage pearson correlation coefficient parametric statistical approach calculate hypothesis stage spearman correlation coefficient hypothesis non parametric statistical technique analysis partial analysis parametric nonparametric address external threat validity due sample parametric approach strength linear relationship normally distribute variable non parametric approach non linear relationship variable consistent approach multiple statement independent dependent variable composite aggregate respondent rating  address non normal distribution complexity sample dataset empirical investigation perform stage partial analysis helpful non normal distribution complexity sample theoretical information sample increase reliability pls technique stage  analysis hypothesis phase stage parametric statistic hypothesis pearson correlation coefficient independent variable dependent variable criterion reject hypothesis define hypothesis hypothesis accepted reject pearson correlation coefficient pls regression hypothesis pls regression hypothesis hypothesis accepted pearson correlation efficient customization SaaS application performance positive hypothesis concern scalability SaaS SaaS application performance pearson correlation coefficient positive therefore hypothesis accepted hypothesis concern MTA SaaS application performance accepted due positive correlation coefficient hypothesis concern security factor SaaS architecture SaaS application performance accepted positive pearson correlation coefficient hypothesis concern integration SaaS application performance accepted positive correlation coefficient hypothesis regard fault tolerance recovery management SaaS application performance reject positive correlation coefficient phase II hypothesis stage nonparametric spearman correlation coefficient hypothesis spearman correlation coefficient hypothesis regard customization accepted positive spearman correlation coefficient spearman correlation coefficient scalability SaaS application performance hypothesis positive significant relationship MTA SaaS application performance hypothesis statistically significant due spearman correlation coefficient accepted hypothesis regard security SaaS application performance spearman correlation coefficient positive therefore accepted hypothesis concern integration factor SaaS application performance accepted due positive coefficient hypothesis concern fault tolerance recovery management SaaS application performance reject due positive spearman correlation coefficient phase hypothesis validate parametric non parametric statistical technique stage partial pls technique hypothesis stage perform hypothesis direction significance pls examination independent variable designate predicate variable dependent variable SaaS application performance response variable coefficient ratio hypothesis parametric non parametric correlation coefficient coefficient customization ratio therefore significant scalability positive coefficient ratio statistically significant MTA coefficient ratio significant security positive coefficient ratio judged significant integration coefficient ratio significant fault tolerance recovery management coefficient ratio statistically insignificant research model linear regression equation research model research model empirical evidence factor important SaaS developer considerable role SaaS application performance regression analysis model coefficient direction association pls examination independent variable factor designate predicate variable dependent variable SaaS application performance response variable regression analysis linear regression analysis research model linear regression analysis research model coefficient customization scalability MTA security integration positive statistically significant coefficient fault tolerance recovery management positive statistically significant overall research model adjust ratio significant 5Discussion emerge SaaS software business environment trend business delivery model benefit SaaS advance paradigm SaaS service component SaaS representative vendor google amazon microsoft  com paradigm shift quality SaaS architecture important SaaS application business performance SaaS architecture identifies structural component underlie interdependency challenge issue due lack guideline adopt SaaS delivery model traditional factor exist competitive environment improve exist SaaS architecture regard SaaS developer understand factor improve SaaS architecture quality developer vendor understand factor relationship developer perspective improve SaaS application knowledge empirical investigation factor association important SaaS architecture application customization multi tenant SaaS application important brings challenge implementation SaaS application application data service interface designer developer model customization define relationship variation dependency define tenant understandable format option available dependent variation customization framework customization choice tenant review modify simplify extent validate customization user error unpredictable customization multiple option discover positive association customization feature SaaS architecture SaaS application performance  attribute widely SaaS maturity model  data model application multi tenancy simplest complex SaaS vendor increase utilization rate hardware resource decrease multi tenancy increase complexity associate scalability security customization SaaS application effort involve implement feature multi tenancy security data resource multiple tenant scalability challenge multi tenancy multiple tenant user requirement tenant tenant request multiple database option application domain requirement multi tenancy positively associate SaaS application performance ability application resource per attractive feature business effective traditional host SaaS intelligent automatically overload maintain persistent response appropriate approach SaaS achieve scalability avoid underutilization resource criterion evaluate software service SaaS business requirement environment scalability another important issue vendor easy effective apis enable user SaaS scalability actual environment scalability positively associate SaaS application performance security issue SaaS enterprise uncomfortable transfer important data SaaS integration multi tenancy feature SaaS improve resource usage application concern related security multi tenant SaaS user security requirement emerge integrate security SaaS external pluggable security SaaS model user customize accord requirement monitoring security incident evidence collection avoid incident future improve customer satisfaction attack potential misuse empirically investigate address security concern architecture significant importance organization secure moreover positive association SaaS software cannot obscure integration challenge designer developer enterprise infrastructure transition exist software data asp SaaS complicate integration issue affect SaaS adoption data integration data consists data software integration variety software integrate SaaS application software SaaS application enterprise premise software without sometimes SaaS application absence standard handle data software integration standard integration service web service model adopt SaaS application decrease complexity associate integration positive association integration factor SaaS application performance introduce fault tolerance multi tenant application challenge task due quality requirement tenant fault tolerance multi tenant SaaS investigation fault tolerance technique SaaS architecture although SaaS fault tolerance underlie paas introduce fault tolerance SaaS customize fault tolerance tenant finding statistically positive relationship fault tolerance recovery management SaaS application performance direction association positive confidence hence hypothesis fault tolerance recovery management positive impact SaaS application performance statistically reject outcome research significant development quality successful SaaS application software development activity continual technology establish SaaS organization trend ass development methodology weakness strength assessment methodology guidance improvement finding SaaS vendor important factor SaaS application architecture dimension limitation empirical approach metric survey software engineering empirical limitation criterion validation empirical internal validity construct validity external validity reliability generalize experimental industrial researcher mostly limited threat external validity measurement handle external threat validity respondent chosen around random sample limitation choice selection factor independent variable chosen analyze association impact SaaS application performance factor impact SaaS application performance due presence variable literature exclude focus architecture factor affect SaaS application performance another limitation sample although response sample population respondent refuse questionnaire schedule data SaaS limited researcher highlight technique handle sample data analysis stage handle sample issue consequence sample statistical II error significance distribution statement avoid conclusion although sample generalize helpful interplay variable interpret sample confirmatory increase popularity empirical concern ethic applicable ethical principle avoid violation experimental ethical guideline regardless limitation contribute SaaS architecture SaaS development organization understand architecture dimension SaaS application remain competitive conclusion SaaS application future evolve rapidly advancement SaaS mobility security revenue model integration SaaS transform incredible potential growth customer SaaS application become dependent retention increase pressure customer expectation global competition software introduce demand SaaS application development quality SaaS architecture important SaaS development SaaS architecture identifies structural component underlie interdependency successful development quality SaaS architecture SaaS developer explore related factor discus stakeholder involve understand factor SaaS application architecture explore impact factor SaaS application performance research earlier empirical investigation factor important role improve SaaS architecture ultimately performance conclude customization scalability MTA security integration positively associate SaaS application performance helpful SaaS developer SaaS vendor empirical evidence justification architecture factor developer identify factor improve SaaS architecture develop quality SaaS application remain competitive