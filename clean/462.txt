datacenters become backbone business economy electricity consumer globally numerous datacenters  others grossly utilized resource consolidation technique however consolidation comprises migration expensive consumption performance degradation mostly account exist model possibly performance efficient consolidate investigate migration decision migration recover migration recover performance guaranteed demonstrate google workload data host approximately task belong workload allocation policy combine various migration approach impact datacenter performance efficiency plausible assumption containerise datacenter combination propose performance aware allocation epc migration cper technique migrate relatively container ideal performance efficiency introduction national complication fuel global altogether efficient compute focus reduction coal particularly UK offering project safety margin percent closure nuclear france germany outage load shed future assume comparable consumption rate approximately percent overall consumption percent growth datacenter efficiency increase safety margin furthermore suggests due migration internal datacenter consumption remain constant address approach efficient resource management resource allocation schedule consolidation resource management technique dependent technology virtualisation container virtualisation containerization service provider resource customer virtualisation brings notion virtual machine VM containerization replace VM container virtualised hardware server virtualisation extensively infrastructure particularly infrastructure service IaaS largely familiar notion vms service provider amazon EC microsoft azure google vms available user application workload service inside vms software service SaaS platform service paas provider built IaaS application inside vms containerization alternative vms lightweight OS kernel moreover container deployed quickly vms containerization increase rapidly evidence viral implementation docker reality docker google container application customer deploy application vms container application dependant desirable application host virtualised application portable deploy container suitable vms application launch customer bill runtime application resource demand quantity however resource largely utilised datacenters significant resource management technique investigate resource management container vms performance workload application platform natively application bare hardware however resource management consolidation vms container involves migration expensive additional consumption performance loss hence largely account publish model performance efficient consolidate investigate migration decision performance involve migration recoverable performance maintain improve degrade explore impact performance efficiency allocation heuristic robin RR random resource selection BRS minimum difference  FF FillUp epc combine approach migration migration migrate dynamic consolidation migrate relatively vms cmcr migrate relatively container cper exploration recovery performance incur migration exploration conduct extensive simulation google workload trace host approximately task application combination cloudsim organize contribution discus server consolidation bin pack explain container migration overhead containerise host performance efficiency propose performance recovery consolidation cper technique avoids migrate container recover migration performs target host migration model resource heterogeneity google cluster workload dataset perfective validate cper workload trace google cluster cper reduce migration overhead reduce migration increase maintain performance majority migrate container recover migration perform therefore overview related finally concludes future research direction contribution contribution research algorithm container allocation account host efficiency performance efficient host utilized decrease datacenter consumption increase reliability mathematical model estimate consumption container inside VM containerise platform novel host efficiency migration approach migrates container migration performance recover ideally perform extensive simulation dataset perform demonstrate migrate relatively container performance efficient evaluation propose technique dynamic workload dynamic demand resource description resource allocation consolidation migration multidimensional bin pack bin host vms item container container placement objective minimize host accommodate container literature formulate placement consolidation bin pack optimisation however host heterogeneous becomes complex due resource cpu memory accommodate vms container allocation formulate multi bin pack issue objective minimize sum bin NP typically linear program LP heuristic dynamic consolidation typically improvement switch underutilized host accommodate container relocate host withdraw host overload sum accommodate container becomes capacity migrate workload perform host increase service reliability besides involve migrate container heterogeneous host decrease host accommodate container container migration without downtime ideally without impact performance specifically SLAs production amazon EC google user amount provision resource duration service execution absolutely depends performance container container runtime consequence increase container runtime due performance host resource contention container compete resource consumption host albeit host efficient others performance directly impact provider revenue therefore essential ensure container performance achieves service migrate host perform reduce performance source host beneficial furthermore migration decision recently allocate host perform efficient previous diverse opportunity increase runtime decrease performance increase consumption aim develop consolidation model predict performance container derive correlation predict quantity migration finally migrate container achieve consumption performance realistic  performance application hpc performance runtime due consolidation container individual server vms container consolidated server vms vertical server darker denotes server idle label container denotes dynamic shade denote server consumption specific runtime height furthermore container recover migration execution performance efficient host migration effective achieve performance saving therefore reduction dynamic consolidation assume multi objective optimization minimize amount consume increase performance avoid unnecessarily costly migration cper performance recovery consolidation explain address exploration impact container runtimes however demand public platform container runtimes usually unknown therefore container runtime rpast migration express container migration multi objective optimization comprises nominal namely consumption ecc container performance cpc objective objective optimization minimize runtime inversely proportional performance mathematically express min       sourcethe constraint container VM mapped VM host container host cannot exceed host overall resource capacity multi objective optimisation easily objective define ERP response capture exist performance therefore largely acceptable suitable metric capture offs ERP minimization maximization performance per watt ratio performance define inverse response performance runtime comparable response factor hence revise metric runtime ERP ERP ERP sourcewe assume comparable magnitude however complex scenario dominates ERP express ERP domination factor respectively theoretically objective objective optimization minimize evaluate ERP behaviour various resource schedule consolidation policy min ERP  implementation predict hence previous runtime container calculate ERP various technique predict execution container within scope background service perspective application encapsulate pre configure platform hypervisor vms relatively technique container easy distribution virtualisation technology vms isolated guest OSs host OS containerisation technology container host OS moreover technology vms completely emulate OS kernel hardware whereas container directly hardware kernel host machine therefore container virtualisation overhead occupy resource vms adaptable linux container LXC cannot server container become compute instance choice platform recent survey leader benchmark container adoption conduct  suggests approximately percent leader respondent survey replace vms container moreover approximately percent respondent deployed container vms public private however favour organisation  instead container bare obviously vms disappearance overnight however application deployment clearly vms container significantly increase resource utilisation datacenters consolidation technique vms container migration VM migration container migration within datacenter host maintenance user mobility electricity price load balance migration beneficial renewable decrease datacenter CO footprint furthermore workload performs specific host due location resource heterogeneity migrate another host performance hence efficient container migration container host another migrate data disk underlie storage memory migration file container image storage nfs  memory ethernet migration container image local disk memory disk container image latter migration longer migration particularly container replay  haul explain widely checkpoint restore container target host container migration saving factor electricity price renewable generation user mobility cloudlets fog compute trigger container migration perform migration achieve performance efficiency duration migration loss performance additional container source host host profile performance factor available bandwidth assume linear function host utilisation utilised consume relationship consumption cpu utilisation described pidle pmax pidle sourcewhere estimate consumption utilisation pidle static consume host percent utilised pmax consume host percent utilised pmax pidle dynamic consumption treat linear function simplify model estimate consumption non virtualised host percent error however modification account virtualisation containerization moreover assume performance degradation due migration extend model address containerise host discus migration performance host efficiency investigate migration recovery performance satisfied container migrate performance efficient target host migration container target host sufficient discus performance efficiency host address efficiency non virtualised host performs consumes another execute application workload former performance efficient latter however workload efficiently former host therefore efficiency address across workload supercomputer benchmarking organization model host efficiency however performance account furthermore empirical evaluation propose metric author inability non suitability efficient host virtualised containerise platform   SourceRight click MathML additional feature equation denotes host efficiency host capacity instruction execute mips containerise environment container multiple vms workload host therefore factor performance efficiency host characterise distribution physical host resource container vms hence overall consumption containerise host denote phost pidle  sourcewhere host consumption watt accommodate container host pidle static idle consumption host  dynamic consumption ith container estimate roughly linear model described    sourcewhere  host resource cpu memory allocate container permit streamline concern assume container physical host VM container equally IaaS amount allocate cpu core hyper thread core host allocation specific amount memory core hyper thread   sourceto heterogeneity host consumption amongst accommodate container fairly core vcpus  SourceRight click MathML additional feature static consume container    pmax pidle SourceRight click MathML additional feature container host utilisation container hence host efficiency related container specifically individual efficiency fairly host pidle amongst container replace  amount resource core allocate container   pidle  pmax pidle source   pidle pmax pidle  describes simplify model estimate consumption container bare directly hardware however container inside vms modify estimate consumption VM pvm  pidle pmax pidle SourceTherefore consumption container inside VM estimate      sourcewhere   idle maximum consumption percent utilized respectively similarly  resource allocate container container utilization consumption containerize host container vms phost pidle   sourcein simulation model estimate container consumption migrate host furthermore model consume host container maximum due host pidle similarly container host efficient container therefore host VM density define notion container density somewhere address container host maximum possibly whereas evade resource starvation merge understand container density maximum host limitation model shortcoming datacenters heterogeneous application diverse resource usage cpu memory disk network subsystem apart processor report noticeable consumption workload avoid model specific cpu intensive application impact consumption subsystem II moreover container virtual machine vms VM cpu utilization characterize VM workload correlate processor usage consumption however utilization indicator processor usage regard correlation consumption application utilization processor consumption instruction execute report performance efficiency theoretically host perform execute instruction per notion mips ghz ratio lower however empirical evaluation demonstrates various platform perform differently application workload largely due location container allocate host compete resource predict containerise application perform specific host however dataset google cluster derive host performance parameter standard deviation variation execution workload performance efficient performance variation   ray namd bzip benchmark workload instance amd performs  namd perform namd  performance variation   ray namd bzip benchmark workload instance amd performs  namd perform namd  amd performs bzip performs therefore migrate bzip application amd performance efficient moreover migration efficient target host efficient source performance related containerise application migrate performance efficient host increase runtime decrease efficiency therefore performance increase runtime consumption account consolidate workload onto heterogeneous host dilemma suppose container allocate host container allocate host performance parameter respectively container utilize percent proportional resource allocate per container consumption container   respectively accord equation consumption host PH  PH  respectively container  migration sufficient allocate   performance efficient factor PH   host efficiency host performance efficient performance efficient PH equivalent metric response ERP propose response reciprocal runtime ERP overall performance efficiency host denotes efficiency vice versa dilemma account difference price electricity source target host price electricity target host considerably price electricity source host economical migrate container source efficient target host however performance role electricity price trend service provider towards renewables intermittently therefore necessitate grid implies consolidation policy effectively switch available source electricity price objective formulation described multiple PH MH host however beneficial migration perform datacenters geographical intra datacenters focus migration inside datacenter inter datacenters electricity price migration performance model memory container target host pre former memory transfer repetitively processor afterwards whereas latter memory transfer processor target host extra container target host synchronize progressively synchronization container target destroyed source therefore duration migration migration roughly resource moreover migration effort waste container terminates migration resource  moreover suggests approximately percent performance degradation due migration percent performance degradation analogue increase runtime increase consumption discus container consolidation ignore due migration performance overhead notable exception rarely address migration dictate expensive container source host duration migration plus associate performance network migration performance approximately percent loss subsequently increase runtime migration marginal migration  migration procedure host furthermore assume container inside vms  VM terminate VM migration heterogeneous host duration migration tmig cmem  sourcewhere tmig reliant memory cmem container ephemeral disk image  migration network bandwidth available transmit migration data cmem  disk migration  cmem calculate memory container active amount dirty continuously throughout migration duration tmig idle container amount dirty memory therefore network traffic data transfer cmem MB otherwise cmem nci SourceRight click MathML additional feature SourceRight click MathML additional feature rate container memory dirty MB duration denotes dirty MB assume container load dynamic accord google cluster dataset therefore constant varies container realistic simulate distribution around reference historical usage data therefore estimate container migratable memory cmem migration tmig container historical usage data interval assume percent loss container performance due migration tmig become migration overhead remain runtime container target host described migration overhead costmig costmig tmig  pnet tmig   sourcewhere  denotes marginal migration joule host standby hibernate respectively pnet network consumption  expensive container source host marginal  relates server transition delay typical compute server correspond amount consume however various report variation transition delay various server operating due complexity involve pnet assume zero network within scope moreover VM switch VM container inside vms host switch standby hibernate perform due migrate container amount consume correspondingly  address overall consumption propose deliberate migration consolidate workload onto host minimize consumption whereas ensure performance migration consumption performance marginal migration host status due migration switch account actual migration decision accommodate container target host identical performance efficient source host impossible  migration otherwise migration earn eventually container runtime efficiency factor source target host estimate toff target host container earn migration costmig essentially perform longer saving achieve consolidation technique migration performance recovery cper described detail cper container within VM source host migration target host assume performance efficient efficiency factor container host consumes idle pidle mips rating performance efficient however container along efficiency host associate container container container target host compute    SourceRight click MathML additional feature denotes multiple profile performance rating host identical therefore cannot earn migration target host performance efficient source host offset migration additional saving migration costmig watt per difference consumption performance efficiency source target host     SourceRight click MathML additional feature     sourceand therefore toff express toff tmig costmig sourcefor container rpast runtime source host migration target host completes tmig runtime source host express rpast tmig remain runtime target host express tmig estimate runtime hence due difference performance host performance degradation due migration assume performance distribution  target host remain  tmig sourcewhere  tmig increase container remain runtime due performance degradation migration furthermore model normalization runtimes normal normal distribution exp    tmig SourceRight click MathML additional feature toff earn costmig subsequently efficiently performs remain runtime target host toff toff SourceRight click MathML additional feature overall saving  achievable performance efficient migration   offset costmig express  tmig toff therefore container rpast  express  rpast tmig toff sourcein  toff migration performance efficient container terminate prior toff migration recover moreover  earn costmig rpast estimate migration performance efficient toff source rpast rpast toff sourcein trigger appropriate migration decision efficiency improve application performance extend easily runtime prediction technique future runtime prediction historical workload retrieve knowledge database however prediction container physical host therefore historical workload host tedious particularly datacenter heterogeneous container host moreover database significant schedule delay however bias allocation implementation simplicity absolute optimality cper technique description extend version cmcr account consumption performance loss   offset container  migration performance respectively formulation  container unknown particularly public scenario applicable realistic demand platform assume runtimes container rpast instead predict future runtimes  container candidate performance efficient migration probabilistic approach previous runtimes similarity likelihood assumption justifiable described moreover longer likely likely therefore reasonable assume container rpast clue longer shorter runtimes however aware reduce applicability proposal container provider instance typical IaaS provider google amazon EC involve cper approach described algorithm algorithm cper technique input migratable container costmig tmig source target host output return toff costmig recover container    explain     toff  tmig tmig costmig costmig recoverable remove container target performance efficient source remove container return toff  cluster dataset google compute cluster workload dataset publicly available dataset trace activity production cluster consists heterogeneous host duration moreover host classify architecture available CPUs memory capacity described although dataset identify various host nevertheless doubtful relate host google describes sandy bridge ghz intel xeon ivy bridge ghz intel xeon haswell ghz intel xeon dataset comprises approximately user user consists task combine approximately unique task moreover data comprises information task requirement cpu memory helpful schedule execution dataset demonstrates majority task duration slight volume host resource cannot assume cpu memory nevertheless task execution exist literature regard analysis google dataset illustrates although identify statistical distribution task duration resource distribution behaviour due behaviour irregularity user application volume heterogeneous data economics machine google cluster assume machine equivalent sandy bridge ivy bridge haswell platform respectively cpu normalize cpu server available google cluster moreover host volume normalize maximum core host within google cluster whereas disregard cpu described instance host instal ghz core ghz core ghz core normalize volume host correspondingly google deliver precise host machine due safety confidentiality nevertheless plausible realistic assumption host characteristic architecture data extract detail demand resource cpu memory clearer simulation purpose google precise information cluster usage however researcher task usage data cluster percent utilized likewise project resource demand cpu memory sometime peak capacity percent utilised possibly cluster resource oversubscribed however cluster mostly utilized within percent empirical evaluation google workload trace suggests resource usage accurately model simply task usage usage model resource usage cpu relatively stable majority task data anonymized distinguish application host bare virtual machine VM inside container google researcher endorse container virtualisation containerization suppose comprises task possibly host task linux program undoubtedly numerous nonetheless host practical realistic accept task container container runtimes identify illustrate host heterogeneity performance parameter inside google cluster model heterogeneity google cluster task information reveal application belong unfortunately dataset deliver precise host specification heterogeneity nevertheless suppose heterogeneity directly interpret dissimilarity consumption performance container runtime evaluation metric characterize performance variation amongst various host runtimes performance vice versa dataset various workload however task priority representation workload dataset provider priority task affect billing therefore trust reflect workload accurately task inside workload assume container  host google data machine platform ID task container extract host resource provision container assume runtime execution container evaluation metric performance beneficial IaaS customer task discounting task machine detail absent upon visual inspection runtime distribution multi modal lognormal distribution essentially multi modality analogous application perform various machine advise multi modality  cpu architecture performance principally cpu model available amount memory priority workload performs machine machine similarly priority workload performs machine machine therefore migration priority workload machine machine performance efficient efficient furthermore avoid migration performance efficient machine recover migration performance efficiency investigate affect workload priority calculate machine heterogeneity performance parameter standard deviation existence computational variation however data prior finding performance relate data heterogeneous infrastructure machine heterogeneity performance parameter described performance variation various application machine priority workload performs priority workload performs axis denotes container runtimes axis denotes container parameter host performance cpu architecture google cluster lognormal distribution container runtime performance parameter calculate overall performance efficiency host explain role affect efficiency due overlap histogram however simplicity assume source target host differentiate performance moreover increase decrease container performance characterise increase decrease container runtime normalization performance evaluation bin pack usually various heuristic guarantee optimal however address assume comparable container pack initial datacenter ideal demand host realise datacenter implement various schedule technique RR FF FillUp epc aware FillUp epc container pack guarantee performance efficiency assure explain migration performance  earn demonstrate impact migration migration dynamic consolidation runtime migration cper moreover cper container migration technique cmcr technique vms migration involve epc container allocation migration policy described algorithm respectively algorithm epc aware FillUp epc container allocation input host queue container request output performance efficient container placement sort decrease  described container  sort respect available slot active resource container allocate container loop container container cannot allocate active dcp assume assign container container allocate container request algorithm epc aware container consolidation input migratable container container migrate    rpast rpast instead  algorithm  container rpast migration output return migration decision container false estimate  assume      consume host        calculate model   migrate migration model migration model account migration consumption migration duration performance degradation return assume consolidation migration optimization objective decrease host interval optimization module utilization host container selection host monitor utilization pre define  threshold percent accommodate container host chosen migration container suitable migration container selection policy algorithm priority container longer duration rpast migrate container host minimize performance loss host selection migration policy chooses suitable host available host container nevertheless decrease active host avoids allocation switch host host intend idle switch switch idle placement container sort decrease rpast runtimes favour migrate container finally container allocation algorithm reallocate container container placement sub consolidation migration algorithm container selection policy input migratable container output suitable container migration  null container access rpast container sort decrease runtimes rpast  denotes container return  metric metric evaluate performance efficiency propose container allocation migration policy container migration consume kwh execution application performance inversely proportional runtime performance ERP explain electricity bill assume PUE price per kwh mimic google datacenter  usa experimental cluster simulated cloudsim heterogeneous host comprises various architecture respect performance hardware specification available various benchmark workload moreover host subdivide architecture workload described simulated host configure reasonable assumption google commonly available server IaaS dataset trace specification hardware consumption host specpower benchmark host characteristic google idle  maximum consumption  host specpower benchmark simulation comprises VM resemble amazon instance VM ranked resource capacity performance accord amazon description VM performance rating ECU EC compute described equivalent cpu capacity ghz opteron xeon processor variation performance approximately percent ghz ECU rating per core therefore rating host calculate core ECU rating amazon instance characteristic mem memory ram assume host comparable permit performance rank assume cloudsim notion instruction per mips proxy however endorse performance metric due workload comparability cpu architecture technique VM assign VM core maximum core hyperthread VM gear quarter core address allocation flexibly along IaaS provider cpu frequency host amazon ECUs ghz cpu GB ram numerous instance ECU mips consistency cloudsim simulator instance ECU vcpu core instance mips rating multiple ECUs ECU 1GHz vcpus core instance medium instance ECUs vcpu ghz address context amazon lambda google task assign  container corresponds google machine exception container core VM container mips VM accommodate container medium instance accommodate container container task utilizes allocate resource accord task statistic usage google data container characteristic container characteristic container assume workload belong google cluster dataset utilization workload model normal distribution function cpu usage trace interval furthermore execution application sum task execution experimental simulated infrastructure compose host vms configuration workload belong priority respectively container request container available flavour suitable VM already host suitable VM accommodate container VM available instance various container described assume container workload heterogeneous therefore container migrate host another interval cper technique consolidation opportunity selects container longer migration possibility perform container runtime migrate dynamic consolidation migrate container longer longer discussion obtain workload error standard deviation various schedule consolidation heuristic various analyse obtain respect various aspect consumption kwh workload priority minimum error standard deviation respect consumption consumption various application varies significantly percent across various policy hardware platform epc aware schedule technique economical consolidation technique particularly priority workload without migration percent decrease consumption achieve epc instead RR epc percent decrease consumption achieve dynamic consolidation average decrease percent consumption epc scheduler similarly cper epc average percent efficient FF scheduler migration economical dynamic consolidation cmcr cper workload epc aware schedule approach cper consolidation technique cmcr allocate container performance efficient host maintains performance minimizes migration runtime migration increase probability container recovers migration performance priority workload schedule combine cmcr approach minimum ERP however combination epc FU cper moreover cper reduces container migration described migration workload priority minimum error standard deviation respect performance workload performance host ERP execution datacenter utilization interval approach epc schedule approach epc effective minimum efficient host epc allocate container host idle consumption performance efficient host migrate efficiency cmcr performance workload affected however migration performance efficiency cper ensure saving improve performance degradation experimental approach min interval host maximum host entire boldface runtime migrate container depends schedule heuristic workload RR scheduler distributes container equally amongst available vms therefore host vms host utilized migration consolidation opportunity likewise scheduler typically chooses host container allocation randomisation consumption increase migration effort host active utilized therefore optimal RR technique achieve cper runtime moreover efficient heuristic FF epc optimal migrate container runtime migration recovery data migration statistic combine cper epc percent container migratable percent recover migration epc dynamic consolidation percent container migrate percent recover migration investigation suggests cmcr migration technique largely unable recover container migration heterogeneity resource application account propose technique cper increase probability recover migration containerize platform google trace workload simulation migration technique economical dynamic consolidation efficient container VM schedule heuristic migrate relatively container performance efficient host recover migration economical performance efficient recovery dynamic consolidation cmcr cper furthermore recovery approach beneficial vms migration container migration possibly due container migration trigger consolidation interval container target host recover migration increase recovery decrease migration consolidation interval moreover repeatable migration container degrades workload performance technique cmcr cper minimise migration however avoid repeatable migration mechanism avoid effort migration migrate container pre define duration migrate container migrate frequently certainly increase workload performance infrastructure efficiency generalization finding cper various workload correspond various datasets moreover checked applicability cper technique workload datasets priority priority priority cper applicable datacenter assumption workload validate cper technique generalization finding experimental detail host consumption performance parameter previous moreover container correspond task workload consistency finding ERP across objective minimize consumption improve performance however datacenter bill totally estimate therefore datacenter bill guaranteed optimal technique priority experimental across various datacenter assumption workload bold reader advise host characteristic performance parameter experimental across various datacenter assumption workload bold reader advise host characteristic performance parameter statistical significance demonstrate significant statistical difference approach others perform hoc statistical analysis repeatedly achieve calculate probability error critical ratio difference approach datasets statistically significant confidence interval percent difference datasets percent probability critical efficiency propose epc FU cper technique combination cmcr various allocation approach analysis various allocation migration policy axis denotes kwh denotes significant difference datasets analysis various allocation migration policy axis denotes kwh denotes significant difference datasets overlap epc FU allocation policy others however exist overlap cmcr cper verifies previous discussion therefore however cper average outperforms consolidation technique demonstrate impact workload runtimes resource allocation migration decision workload performance efficiency recovery migration heterogeneous resource application account empirical evaluation demonstrates efficiency workload performance across hardware platform potential performance benefit achieve datacenters performance efficient allocation migration technique epc FU cper performance recovery combination relatively unexplored exist literature described related consolidation vms largely literature however container bare container inside vms consolidation investigate described container resource management containerize datacenter various container allocation consolidation technique empirically demonstrate driven simulator  although efficiency datacenter explore however various application performance workload furthermore consolidate container vms resource manager container VM migrate container balance technique increase container schedule rate cluster utilization container migration context dataset google moreover comparison vms container however approach assumption container bare model capture container migration rebuttal investigate migration containerize application server inside datacenter heterogeneous improve efficiency container migration technique implement  technology demonstrate migration approach significantly reduces container potentially reduces network traffic resource management container docker vms kvm achievable performance various application cpu memory storage network intensive bare author workload metric latency throughput virtualisation containerization overhead execution vms container overlap workload moreover finding container vms impose almost overhead cpu memory usage impact OS interaction research author reject IaaS implement vms paas container technical unfortunately migration account resource isolation issue container virtualisation author investigate performance hypervisors xen container LXC various application script php insert randomly generate data database author conclude script executes xen platform LXC platform LXC unable isolate resource successfully xen propose container migration technique  replay pre VM migration container target host file source host source container activity iteratively file replayed target host file finally container target host source host terminate approach reduces application downtime container migration significantly  container migration detail propose voyager combine  memory migration data federation capability union minimize migration downtime union data source target host voyager container resume operation instantly target host perform disk transfer lazily background technique notable exception focus migration vms container hence server consolidation recovery migration heterogeneity datacenter resource application address cmcr host efficiency quantification approach host performance factor VM migration factor electricity price renewable generation user mobility cloudlets fog compute propose scheme cper address issue hence beneficial migrate containerize application production container instead vms bare google inside vms aws EC container service respect vms migration replace container migration however respect possibility container migrate vms vms migrate host conclusion future continual investigation performance efficient resource management indispensable address important issue national global fuel particularly evade datacenter outage improvement performance efficiency decrease consumption therefore bill associate infrastructure along concomitant environmental benefit literature devote container allocation migration however ignore resource plus workload heterogeneity migration performance recovery impact runtimes migration decision combination schedule consolidation migration approach information container runtimes investigate potential performance various workload containerise datacenters circumstance migrate container performance therefore efficient dynamic consolidation container approach overall limit migration approximately percent container percent recover migration IaaS provider aws EC possibly benefit consolidation migration technique therefore improve customer translate  buying infrastructure pas provision reduce user monetary reputation business minimize CO emission evaluation suggests migrate comparatively container performance efficient host economical efficient nevertheless address container runtimes estimate public IaaS challenge task service provider usually knowledge user workload machine prediction approach precision investigation research moreover limitation described mathematical model evaluation keen implementation model accurate validate mathematical model moreover implement validate model platform applicability describes propose framework emerge cloudlets fog compute mobile MECs trigger migration technique particularly user application network issue proximity ensure customer performance across location future intend extend scenario moreover container vms perform differently various application similarly electricity price various geographical location source certainly affect economics migration perform datacenters research investigate various application performance resource management inside container vms container vms various location