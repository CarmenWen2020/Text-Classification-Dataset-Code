charon storage capable data secure reliable efficient multiple provider storage repository comply legal requirement sensitive personal data charon implement distinguish feature trust entity client manage server efficiently file geo disperse storage service besides developed novel byzantine resilient data centric lease protocol avoid conflict client access repository evaluate charon micro application benchmark simulate representative workflow bioinformatics prominent data domain unique feasible performance introduction volume velocity variety data diverse scientific business domain challenge standard data management ensure security dependability fundamental vast amount data continuously generate private infrastructure option organization however maintain data expensive specialized workforce hurdle conversely attribute effectiveness almost infinite scalability public service candidate address data storage unfortunately organization  adopt public service already integrate introduce difficulty non technical user organization critical information concern trust data externally service occasionally suffer unavailability security incident finally data analyze legal restriction impede institution outsource storage manipulation datasets involve personal information charon posix storage capable data minimal management dedicate infrastructure motivation building management genomic data bioinformatics organization  institution originally physical sample later retrieve research purpose recently become responsible analyze data related sample sequence genome GB individual genome sequence  lack scalable infrastructure manage potentially vast data volume public plenty resource furthermore widely accessible service facilitate data  hospital laboratory manage repository public access datasets enable research initiative due lack sufficient sample institution sample interaction gene environment lifestyle enable inhibit complex disease rarer disease longer sample rarity disease unlikely hospital research institute sample exploit benefit public data storage without endanger security dependability  data charon replication encrypt encode data avoid service provider failure operating correctly provider unavailable happens misbehave due bug intrusion malicious insider ensures instance security requirement europe data protection regulation GDPR moreover comply data protection legislation charon allows datasets distinct location private repository namespace explore tradeoff compliance guarantee performance another distinguish feature charon data centric custom server code rely instead manage service amazon azure queue brings important benefit saving execute server vms expensive resort data service significant reduction management task data centric remove manage effort server operating properly vms dropbox file synchronization service charon address trust provider limitation address recent multi file synchronization service none target data diverse data location difference besides storage rely custom server program library export register roughly equivalent disk simpler insufficient implement fully fledge data enable distribute file charon employ byzantine resilient data centric algorithm novel lease protocol avoid conflict file protocol allows implementation synchronization guarantee without rely custom server  assume linearizable storage service instance DepSky mutual exclusion   rely consistency service however listing container popular service amazon rackspace file potential safety violation algorithm service furthermore charon capable handle data secure file chunk employ encryption erasure code compression prefetching background uploads integrate technique usable charon unique feature furthermore performance charon compete multi offering usage standard nfs summary contribution implementation charon practical storage data byzantine resilient data centric lease algorithm exploit service without trust individually evaluation charon local networked storage microbenchmarks novel benchmark capture bioinformatics application supplemental computer society digital library http doi org ezproxy auckland TCC formal description correctness proof lease algorithm described extensive description bioinformatics benchmark charon threat model previous unconstrained client provider client unique account limited local storage provider service implement access mechanism ensure authorize account access minimize trust assumption unbounded client service arbitrary byzantine fault storage malicious client jeopardize security file access leak information data modify destroy data furthermore security information faulty client compromise assumption extreme scenario active adversary faulty maliciously charon implement security model owner file storage defines permission enforce mapping file permission posix ACLs service access mechanism detail therefore malicious client modify delete file file overview charon distribute file posix interface access ecosystem multiple service allows data transfer client preference posix interface data resort envision user likely non expert existent file input efficiently multiple storage location reasonably file file challenge amplify goal exclude user deployed server modification exist service immediate deployability address challenge novel data centric protocol coordinate metadata writes adaptation multi storage technique practical demand novel lack efficient fulfill data centric dependability performance technique charon combine important decision absorbs file writes client local disk background uploads storage location similarly prefetching parallel downloads widely employ accelerate improves usability charon transfer file significant avoids conflict ruling optimistic mechanism relies user application conflict resolution file envision user justify decision specifically conflict manually file consume user likely non expert normally unaware repair conflict maintain duplicate file significant instance collaborative repository google genomics user data available sample aggregate novel knowledge derive data bucket sample charon file data metadata diverse location manages strategy illustrate file data location charon public storage private repository private alternative explore various dependability tradeoff address placement requirement encounter data application critical data charon namespace file availability confidentiality assure multi scenario provider fault tolerance non critical public anonymized datasets file provider dependent potentially expensive finally private repository clinical data sample cannot boundary institution file file local infrastructure restriction charon architecture charon architecture charon maintains namespace file metadata replicate storage rationale decision file structure secure exploit availability expand efficient data centric replication protocol developed objective client reconstruct crash fetch data charon interacts retrieve file data retrieve file metadata obtain release lease avoid conflict interaction depends operation client perform client obtains lease uploads file data uploads correspond metadata client obtains file metadata downloads data associate request file describes compute abstraction interaction rely detail described operation building charon around distribute compute abstraction built service innovation combine abstraction manage data principled practical file chunk non updatable shot register file modify chunk file metadata independently file chunk location integrity file attain verify validity chunk sha cryptographic hash confidentiality enforce encrypt data randomly generate aes secure writer multi reader register building file private repository chunk otherwise storage scenario encrypt chunk encode storage optimal erasure code encode distribute quorum storage service amazon scenario improve availability reconstruct encrypt file chunk client combine reduce quorum sufficient shot register non updatable differentiate version data overall storage overhead mechanism percent obtain erasure code parameter operation register metadata folder multiple client update shot register cannot implement writer multi reader SWMR register address resort DepSky implement data replication regular SWMR register abstraction storage service redesign optimize DepSky parallel connection metadata service regular semantics reader operating concurrently writer metadata version previous achieve dissemination byzantine quorum establish recent version metadata file version cryptographic hash data writer approach enforce security data similarity shot register fundamental difference encryption split shamir secret encode operation access metadata file another data mention difference ensures client grant access folder regenerate decrypt metadata consequently obtain pointer encryption metadata access data shot register preclude conflict directory charon relies efficient lease tolerates byzantine fault novel fundamental ensure sub lock acquisition latency detailed summary charon shot register data SWMR register metadata lease assign lease directory avoid conflict lease lease contract concurrent access resource prevent version conflict novel byzantine resilient lease algorithm avoid conflict charon besides resilience byzantine failure define innovation construction lease algorithm apache zookeeper data centric custom code deployed formalization correctness proof algorithm supplemental available online model guarantee lease algorithm threat model additional assumption refer service client invoke parallel operation execute fifo lease implies timing guarantee upper bound interval assume message transmission client however assumption liveness safety guaranteed algorithm ensures client access resource limited duration lease resource lease related operation lease renew acquires extends lease respectively release lease operation satisfy mutual exclusion safety client valid lease resource obstruction freedom liveness client lease resource without contention succeed algorithm composite resource lease client function lease   parallel  lease    release  operation return boundedness liveness client acquires lease unless lease renew algorithm satisfies obstruction freedom instead pursue performance contention execution contention infrequent additionally boundedness ensures client release valid lease due crash lease available byzantine resilient composite lease previous data centric fault tolerant mutual exclusion algorithm directly storage service propose modular approach non fault tolerant lease specific service service combine fault tolerant composite lease approach allows efficient lease service queue instead rely fault tolerant register construction previous lease storage service abstraction available provider lease operation composite lease algorithm acquire composite lease client simultaneously lease lease failure client acquire lease otherwise lease unavailable contention client release potentially obtain lease successful unanswered  algorithm succeed timeout trigger release lease invoke release operation renew algorithm lease additional access remove version lease renew operation release renew execute critical charon latency lease implementation public service storage atomic database service feature lease however implementation lease comply specification composite lease lease operation successful creation various flavor lease entry service lease entry ensure provider cannot corrupt lease lease implementation rely access service guarantee authorize client access lease malicious client hinder user inadvertently access resource affect resource client fourth client assign local timestamps lease enforce lease validity instead mechanism service augment queue specify duration lease entry lease entry lease duration timestamps service timestamps lease validity instead local bound drift client provider source implementation lease service storage service variable data container accessible hierarchical interface lease service client listing container associate aim resource valid lease entry insert entry container entry insert concurrently another valid lease entry operation client remove entry return  otherwise lease succeed algorithm implement service google storage azure blob storage rackspace file amazon guarantee consistency timestamp service however listing container satisfy consistency service construction susceptible safety violation augment queue azure queue rackspace queue strongly consistent enqueue dequeue function universal memory abstraction capable synchronization queue service permit client specify duration lease entry valid entry vanishes queue release lease algorithm client queue entry contender queue empty enqueues lease entry queue entry valid index queue lease succeed operation return valid entry another client client return  however exist valid entry belongs renew client entry remove lease queue nosql database data unique associate amazon DynamoDB strongly consistent service conditional update operation enables implementation efficient lease algorithm client verifies entry aim resource already exists database entry belongs another client operation return  otherwise client writes lease entry conditional update operation ensures entry client equivalent entry meanwhile return operation transactional database data acid transaction google datastore transactional database service allows implementation lease algorithm client query database lease entry target resource valid entry belonging another client transaction aborted operation return  otherwise client writes lease entry commits transaction commit succeed lease obtain otherwise conflict detect operation return  lease algorithm satisfy obstruction freedom however algorithm storage satisfy deadlock freedom guarantee client concurrently acquire lease succeed regard access access acquire lease lease moderate contention scenario significantly cheaper fault tolerant lock service multiple vms specifically lease acquisition medium vms provider plus management effort lease built service charon implementation charon user file implement fuse java wrapper fuse library fully implement client service storage coordination publicly available source software http github com charon metadata organization metadata attribute assign file directory permission independently location data chunk charon metadata writer multi reader register improve accessibility availability guarantee specifically redesign optimize SWMR register implementation DepSky improve performance concurrency described remain manage namespaces metadata within namespace encapsulate hierarchical structure file directory  charon namespaces personal namespace PNS namespace SNS PNS metadata non client file directory access owner client associate PNS client access SNSs folder access folder associate exactly SNS reference  client although personal namespaces hash recent version file data chunk hash primarily validate cached file chunk  hash serialize file metadata SNSs hash chunk hash CH explain another difference PNS SNS latter associate lease coordinate concurrent access user acquire update execute file directory namespace SNS associate folder lease obtain coordinate concurrent access entire folder contrarily concurrent reader lock SWMR register metadata multiple reader concurrent writes depicts file relates namespaces file private owner client respectively file chunk client file private metadata owner  file reference file chunk SNS maintain charon file PNS metadata file SNSs periodically fetch obtain metadata update directory opt CH SNSs SNS contains file metadata hash chunk file information significantly increase monetary performance periodic downloads therefore CH refresh file reading file update however hash data chunk CH costly linearly chunk refer SNS circumvent charon defines maximum entry CH hash newer chunk hash additional exception hash chunk file CH avoid fetch CH opening file illustrates happens client writes file SNS another client client performs concurrent non cached client obtain lease entire SNS enforces metadata CH ensure date metadata client writes file local cache execute asynchronously propagate adequate location CH SNS update lease release background propagation crucial usability considerable update SNS client update file SNS lease valid charon garbage collection protocol delete obsolete version data metadata charon operation client concurrently perform operation lease SNS client explain SNS metadata obtain periodically perform operation client SNS metadata version CH hash date version data chunk file cached downloads cache return client metadata uploaded data client client data belongs unfinished writes data management describes important technique charon manage file efficiently multi cache charon local disk cache recent file client moreover fix memory cache improve data access file cache implement recently lru policy cache improves performance decrease operational happens provider data downloads usually uploads incentive data facility charon operational roughly data storage plus traffic version file data chunk manage file file brings challenge reading resp file impractical due resp upload latency file memory cache employ file ensure usable performance charon address challenge splitting file fix chunk MB megabyte compression erasure code report tradeoff latency throughput chunk megabyte relatively load disk memory transfer reasonable maintain memory additionally approach effective cached file update modify data chunk uploaded illustrates charon manages chunk closing file update chunk insert queue consume thread thread responsible perform sequence compute intensive operation chunk upload compress encrypt chunk storage optimal erasure code generate distinct cod chunk reconstruct thread worker thread pool already destination assign worker illustrate thread operation notify successfully uploaded define timeout worker uploads tolerate operation worker perform operation within stipulate timeout thread worker cancel launch perform data chunk management private repository employ erasure code instead chunk encrypt thread pool respective location worker storage location unreachable data inaccessible parallelize transmission data advantage per operation strategy aim optimize performance upload data outperforms strategy slowest technique compression erasure cod additionally configuration capability architectural allows client adapt behavior bandwidth consumption related operation compute network specificity moreover employ prefer quorum technique charon adapt request user preference beyond latency provider geographical constraint prefetching prominence sequential data workload motivates chunk prefetching charon thread pool prefetching data chunk location sequential identify prefetching data chunk sequentially meanwhile file prefetched prefetching task cancel besides reading data advance additional advantage technique tcp connection data parallel accelerate file access charon implement security model owner file storage define permission client private data data associate folder independently charon client trust access perform provider enforce permission moreover access satisfied provider misbehave happens faulty provider useful information obtain recall data encrypt secret SWMR register implementation model mapping file storage abstraction configure user define api credential charon charon client authenticates provider file directory user creates creation associate user account granularity directory subtrees others permission access directory user posix acl associate desire directory happens charon transparently permission access mechanism apis namely directory creates SNS permission  user update owner PNS charon user identifier mapped correspond account identifier mapping client PNS centralize server inform client arrival client discovery client directory external mail invitation dropbox  federation  account identifier evaluation evaluate charon latency lease algorithm microbenchmarks metadata data intensive operation bioinformatics benchmark experimental environment machine intel xeon GB ram rpm hdd ssd gigabit network portugal storage location charon configure storage amazon azure storage UK rackspace file UK google storage storage amazon private repository client machine disk machine lan composite lease additional service azure queue rackspace queue amazon DynamoDB google datastore therefore configuration charon ext local file linux  deployed cluster file code available web  sql charon configure upload data background  coordination service replica deployed medium vms amazon EC UK composite lease evaluate composite lease algorithm described implementation focus analysis lease operation critical application update folder contention execution composite lease algorithm configure storage service provider ST non storage service queue provider nst additionally composition DepSky mutual exclusion algorithm DL service ST configuration lease latency algorithm lease latency lease acquisition algorithm without contention contention client lease acquire lease overall non storage lease storage service happens probably storage service throughput orient effective lease entry composite lease configuration reflect performance specifically composite lease protocol quorum lease acknowledgment service latency service instance latency nst   AQ RQ pure storage lease ST lease latency nst consequently nst configuration charon latency DepSky lock DL twice latency ST nst charon difference happens DepSky algorithm access storage phase execute lease algorithm parallel DepSky storage lease algorithm additional disadvantage algorithm consistency storage guaranteed execution contention important aspect lease algorithm performance degrades contention perform client acquire lease SNS release client acquire lease obstruction lease algorithm random backoff lease composite lease configuration non storage service faster storage service happens non storage service satisfy deadlock freedom acquire lease concurrently succeed efficient contention storage algorithm implement obstruction freedom composite lease nst ST obstruction freedom superlinear increase lease obtain contention charon optimize scenario client update folder file composite lease algorithm contend client noticeably behavior DepSky lock latency instance latency contend client DepSky ST nst respectively file microbenchmarks charon file  microbenchmark suite focus evaluate performance isolated latency associate interact upload data lease acquisition metadata intensive operation focus metadata intensive operation operation per ext ssd nfs sql  charon operation byte file metadata intensive microbenchmark ops charon performance mostly within magnitude ext nfs mainly due overhead fuse java wrapper file  significantly faster metadata update execute disk later sql sqlite local database  access metadata operation data intensive operation microbenchmarks focus data intensive operation file MB data intensive microbenchmark MB data intensive microbenchmark MB unsurprisingly ext throughput sequential random workload sql nfs slightly throughput ext despite performance  charon competitive workload throughput ext nfs performance sequential workload however charon sequential throughput file sql throughput almost happens sql perform chunk benchmark configure writes file efficiency reading file objective charon sequentially non cached file MB GB perform data location charon namely private repository network lan amazon  additionally multi data replication algorithm DepSky  service  environment however achieve  percent publish differently previous latency upload data location non cached upload latency file charon data location DepSky  deployment charon  resp writes GB file resp faster DepSky  respectively happens previous multi data replication algorithm optimize file file chunk chunk neither upload strategy technique prefetching furthermore  robin distribution data chunk balance storage usage noticeably others approach data chunk management allows charon perform resp reading resp chunk data location charon reading private repository latency target location inside local network difference latency charon amazon reading additional latency data latency dictate takeaway byzantine resilient storage imply increase latency charon significantly faster file compete bioinformatics workflow aim performance configuration charon alternative FS  novel storage benchmark domain bioinformatics described supplemental available online exist bioinformatics macro benchmark focus cpu bound task discontinue version broadly accepted overlook operation execute FS  emulates specifically operation representative bioinformatics workload summarize independent external workflow sequential writes access file structure execution reading entire file anything interpose writes reading file parallel workflow complex pipeline achieve concrete bioinformatics workflow analyze implement  project characteristic FS   workflow duration FS  workflow ext ssd nfs client server lan sql charon repository location ssd machine local disk server lan lan aws   evaluate file execute workflow scenario report average charon sql cache workflow execution local file cached FS  execution configuration ext nfs basis comparison usually faster workflow charon workflow data location happens operation immediately return file update local disk workflow almost longer  local lan due latency fetch file remote service workflow GB  file repository workflow  file MB nonetheless workflow rank data location local lan  interestingly benchmark host repository due capability fetch chunk importantly latency fetch input file dominate benchmark setup file processing chunk available conclusion charon  workflow faster file sql furthermore percent nfs workflow intensive excellent latency access access lan server related distribute file charon intrusion tolerant file maintains data confidentiality integrity availability despite existence compromise component adopts exist file separation data metadata  volume lease afs background update peer peer file  similarity crucially byzantine fault tolerant bft replica assign lease maintain metadata consistently another related  data centric network file data metadata client fundamental difference charon client interact widely available untrusted service instead communicate directly coordination data centric coordination feature charon byzantine resilient data centric algorithm implement storage coordination propose algorithm implement dependable byzantine disk paxos consensus protocol built untrusted disk recently enhance version protocol specifically file synchronization service dropbox google instead disk publish algorithm implement mutual exclusion satisfy deadlock freedom liveness guarantee obstruction freedom however access lease protocol access acquire lease knowledge fault tolerant data centric lease algorithm literature lease algorithm   important difference charon bft composite lease lease admits existence valid lease tolerates crash trust individual provider bft mutual exclusion algorithm DepSky candidate regulate access contention charon however composite lease algorithm faster DepSky client synchronize neither rely weakly consistent operation storage multi storage propose multiple provider improve integrity availability data storage register  integration exist application  archival storage DepSky evolution  updatable register    employ hybrid approach unmodified storage service compute node metadata coordinate data access limitation server deployed provider implies additional management complexity limitation applies provider geo replicate storage spanner   deployed multiple slightly proposes aggregation multiple file synchronization service dropbox google dependable service  implement concurrency client version file access concurrently  employ lock protocol quorum client access folder lock file alone majority service however tolerates crash failure improve handle data finally  constraint assumption linearizable storage service replication upload data increase monetary regard latter  file update easy integrate erasure code charon data centric file requirement data domain conclusion charon file data relies important principle file metadata data multiple without trust individually completely data centric develop novel byzantine resilient lease protocol avoid conflict without custom server feasible employ institution critical datasets