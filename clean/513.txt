mobile compute MEC become attractive enhance compute storage capacity mobile device leverage available resource node MEC arrival task highly dynamic predict precisely importance challenge assign task node guaranteed performance article aim optimize revenue earn node optimally offload task node formulate revenue driven online task offload ROTO NP relax ROTO linear fractional program propose balance allocation LBA algorithm performance guarantee LBA rigorous theoretical analysis LB algorithm ROTO primal dual technique algorithm achieves approximation ratio considerable probability maximum slot node constant performance propose algorithm validate trace driven simulation testbed propose scheme efficient baseline algorithm introduction nowadays pervasive mobile compute internet development compute intensive latency sensitive application mobile virtual augment reality VR AR massive data generate network however device smartphones wearable device limited processing capacity data due network bandwidth storage data privacy concern impractical unnecessary data remote fortunately mobile compute MEC gain momentum emerge paradigm compute capability compute storage resource wireless access network although MEC powerful remote transmission latency user mobile remote network task offload scenario arrival user dynamic task quickly motivates online scenario user dynamically resource allocate offload decision node therefore decision task arrival uncertain challenge meanwhile increase complexity application wireless network dynamic offload enormous obstacle tackle issue propose online computation rate maximization algorithm lyapunov multi user MEC jointly manage computational resource allocate transfer data transmission formulate multi user multi task computation offload MEC lyapunov optimization approach harvest policy although lyapunov optimization online converge cannot fully adapt burst task request chose network DQN training advance explicit theoretical performance guarantee meanwhile mainly focus efficient resource efficient computational service offload scheme MEC revenue maximization task offload offline scenario competition scenario service provider amazon alibaba deployed node built node server platform compute content delivery network cdn node  lambda enterprise individual rent node demand revenue driven online task offload ROTO MEC specifically focus offload multiple computation intensive task node objective maximize revenue node perspective service provider illustrates typical offload scenario node constitute mobile generally node service construct operator network task offload BS operator assume service provider obtain information BS function BS software define network sdn user offload task node extend compute ability via task execution moreover user offload task node user node within communication BS user sends task nearby BS BS decides offload task node within communication accord revenue compute demand task node illustration multiple node constitute mobile aim optimize revenue earn node formulate ROTO integer linear program ROTO NP reduce multi dimensional knapsack relax linear fractional program ROTO LP important notion enable efficient algorithm balance allocation LBA intelligently construct potential function primal dual schema LBA achieve approximation ratio maximum slot node intuition obtain LBA ROTO LP finally propose balance LBR algorithm ROTO combine LBA technique chernoff bound probability analysis LBR achieve approximation ratio LBA probability user implement LBR testbed consist raspberry mobile phone trace driven simulation testbed reveal effectiveness LBR contribution summarize develop multi user computation offload framework mobile compute maximize revenue formal formulation revenue driven online task offload ROTO NP balance allocation LBA algorithm ROTO LP achieves approximation ratio LBA propose balance LBR algorithm obtain ROTO LBR achieves approximation ratio probability conduct trace driven simulation testbed evaluate performance propose algorithm perspective conclusion organize prior review model offload formulate proof ROTO NP hardness explain online algorithm maximum revenue propose analyze simulation testbed investigate respectively conclude related brief overview related regard task offload mobile compute task offload category accord dependency task offload dependent task MEC complicate assumption concerned dependent task assignment multiple device however impose restriction capacity device algorithm inclined offload task device capable device GenDoc jointly dependent task offload service cache placement objective application completion minimization however GenDoc compute capacity offload task node mobile node resource sensitive GenDoc irrational limited compute resource offload independent task  theory coordinate offload various task request multi user mobile investigate task offload wireless mobile compute factor service cache offload task leveraged software define network investigate task offload ultra dense network  focus task offload autonomous device focus offload independent task MEC offline scenario arrival task advance however enhance agility mobile online algorithm prefer online offload scenario chose reinforcement objective maximize sum computation rate minimize consumption minimize however training advance explicit theoretical performance guarantee addition machine related lyapunov optimization approach apply analyze online offload multi user multi task offload schedule scheme renewable mobile  optimization approach harvest policy comprehensively MEC compute iterative heuristic algorithm minimize offload delay investigate collaborative mobile computation offload 5G hetnets propose theoretical computation offload scheme however mainly focus efficient resource efficient computation offload scheme MEC maximize benefit node perspective service provider additional lyapunov converge cannot fully adapt burst task request primal dual theory instead lyapunov theorem propose algorithm theoretical guarantee model formulation elaborate computation task model node execution model formulate task computation offload optimization maximize offload revenue goal optimization optimal node offload task user arrival user resource requirement presentation cpu resource resource memory usage disk cycle similarly address proof ROTO NP hardness computation task model horizon simplicity discrete extend continuous assume independent user offload task node user denote task user characterize parameter   αij  denotes input data byte denotes cpu cycle byte data   arrival deadline task respectively αij ratio revenue node compute demand within communication BS αij zero rapid development 5G network distance user node assume data transmission user node ignore compute demand cpu cycle per   denote define revenue node task offload  accord survey price paid user computation resource service service slot focus compute intensive task service task price task node greatly assume  αij  αij constant node server focus scenario mobile device limited computational resource hence task offload node execution task user atomic cannot task assume offload node node execution model assume independent node compute service user node denote node slot task slot entire compute capacity denote yij binary  yij task offload node yij otherwise hence  source yij source user node user node within communication BS denote node within communication BS task offload feasibility constraint yij source yij source denote compute capacity node cpu cycle per node cannot compute resource exceed capacity hence  source assume compute demand  assumption reasonable user offload task node processing compute demand formulation intend maximize overall revenue node define horizon user parameter   αij  correspond task node parameter correspond denote node revenue driven online task offload allocation task node maximizes overall revenue max  source sourcewhere    theorem ROTO NP proof reduce multi dimensional knapsack ROTO NP multi dimensional knapsack define knapsack item dimensional vector  knapsack dimensional capacity vector WD knapsack item target maximize sum item knapsack sum dimension exceed construct task node node slot capacity item knapsack construct task ROTO item construct vector ROTO item construct reward  ROTO capacity knapsack construct vector ROTO construction polynomial reduce NP multi dimensional knapsack ROTO imply ROTO NP transformation theorem easily assume without loss generality multi dimensional knapsack ROTO algorithmic relax ROTO linear fractional program propose LBA algorithm notion performance guarantee LBA rigorous theoretical analysis LBR algorithm ROTO approximation ratio LBA probability relax ROTO ROTO LP relax constraint linear formulation ROTO ROTO LP max  source yij source yij source  source yij source yij SourceNote yij constraint constraint node task online task user arrives implies objective function sum unknown ahead gradually reveal algorithm operation online algorithm account future arrival reserve resource properly online algorithm ROTO LP subsection propose LBA ROTO LP task arbitrary preliminary maximum slot  denote amount compute resource allocate user notion define definition node associate integer node amount compute resource allocate user formally  SourceRight click MathML additional feature definition notion capture node propose LBA algorithm prefers allocate compute resource node newly task LBA strives node avoid overload node probably increase probability offload newly task node sufficient resource otherwise newly task node overload algorithm LB allocation LBA alg ROTO LP initialization   task user arrives invoke LB algorithm task node yij ωij   node integer cannot precisely node introduce another important notion definition node amount compute resource allocate task node increase exactly formally  source suppose allocate resource increase task arrives  LBA allocates resource LBA algorithm balance allocation algorithm principle LBA task arrives LBA gradually allocates compute resource node node task formally define preference definition preference LBA prefers allocate compute resource sourceor sourceif denote preference SourceRight click MathML additional feature algorithm balance LB procedure ωij yij node node     node ωij ωij  node yij  algorithm detail LBA initialization node LBA handle online ROTO LP invoke balance procedure algorithm allocate resource task arrives update yij node task highlight balance LB procedure introduce notation ωij denote amount resource allocate task maintain node allocate resource amount compute demand allocate LB node exhaust compute capacity loop handle resource allocation iteration LB chooses node preference LB chooses node prefer LB LB allocates amount resource task update  allocate amount resource task increase exactly remain compute demand cannot increase node LB equally split remain demand allocates node complexity algorithm task arrives algorithm invoked LB gradually allocates compute resource task allocation LB node complexity LB complexity algorithm intuitively explain algorithm user offload task node assume task respectively compute capacity respectively initialize respectively initialize initialize without loss generality assume submits task compute demand prime prime initialize LBA allocates compute resource update omega omega LBA prime update prime node LBA allocates prime compute resource node update accord LBA omega omega submits task demand LBA allocates compute resource update compute resource allocate respectively finally submits task demand accord LBA allocates compute resource allocate compute resource competitive analysis LBA formulate dual ROTO LP intelligently construct potential function important role analysis lemma weak duality theorem approximation ratio LBA dual ROTO LP indicator variable analyze algorithm denotes task offload node hence align forall mathbb quad quad quad quad quad sum limit leq tag align source align forall mathbb mathbb quad quad tag align source align forall mathbb mathbb quad quad lbrace rbrace tag align source dual variable user introduce variable node dual ROTO LP minimize sum sum align forall mathbb mathbb qquad geq alpha tag align source align forall mathbb qquad sum limit leq tag align sourceand constraint geq geq lbrace rbrace forall mathbb mathbb approximation analysis elaborate potential function relates prime variable dual objective function potential function arrives ith dual constraint assume satisfied goal constrain derivative dual function primal profit frac partial partial frac partial partial leq lambda frac partial partial lambda competitive factor suppose derivative dual satisfies align frac partial partial frac alpha tag align sourcewhere constant leq frac alpha alpha due inequality frac alpha leq alpha geq frac partial partial alpha frac alpha leq frac partial partial lambda frac partial partial frac frac alpha integration equation obtain cdot exp frac sum nolimits frac alpha exp boundary equation happens frac sum frac sum primal constraint tight alpha dual constraint satisfied boundary alpha boundary potential function equation frac alpha exp frac sum limit equation sourceif sum alpha denote alpha max alpha node bound iteration objective function primal dual respectively derive algorithm submits task upon arrival task update primal dual program primal program update constraint correspond user constraint node dual program update variable user constraint geq node dual assignment variable primal dual zero delta delta respectively user submits task lemma iteration arrival delta leq delta proof situation task fully allocate node node exhaust compute capacity allocate compute resource correspond variable alpha iteration dual constraint satisfied satisfies constraint cdot cdot cdot dual iteration bound increase variable derivative primal profit algorithm frac partial alpha partial alpha derivative dual frac partial partial align frac alpha exp frac sum limit frac alpha exp frac sum limit frac alpha frac alpha leq cdot alpha alpha align sourcethe inequality alpha alpha leq alpha delta leq delta submits task task user fully allocate LBA situation task user fully offload node task offload node analyze situation node derivative dual constraint satisfied geq node derivative dual alpha alpha alpha alpha satisfy dual constraint node constraint satisfied align tag align source align alpha frac alpha frac alpha exp frac sum limit tag align source align frac alpha exp frac sum limit tag align source align geq frac alpha exp frac tag align source align geq frac alpha cdot geq alpha tag align  sum geq node inequality exp frac geq geq dual constraint satisfied therefore arrives dual node delta update align alpha frac alpha frac alpha alpha frac alpha frac alpha leq alpha frac alpha frac alpha alpha leq cdot alpha leq alpha align sourcethus lemma feasibility feasibility LBA lemma algorithm LBA feasible primal dual ROTO LP proof ROTO LP LBA increase sum whenever sum increase iteration LBA allocate compute resource user compute capacity exhaust therefore sum anymore unless task reduces sum LBA increase sum beyond whenever sum iteration LBA allocate compute resource compute demand satisfied dual ROTO LP task resource allocate decrease arrival subsequent user monotonically increase constraint task task anymore task  alpha alpha constraint satisfied geq constraint weak duality weak duality ROTO LP theorem ldots ldots ldots feasible primal dual ROTO LP respectively equation sum limit sum limit geq sum limit alpha equation source theorem feasible dual feasible primal dual program upper bound feasible primal proof theorem proof align sum limit sum limit tag align source align geq sum limit sum limit sum limit tag align source align geq sum limit sum limit sum limit sum limit tag align SourceRight click MathML additional feature align sum limit sum limit sum limit sum limit tag align SourceRight click MathML additional feature align sum limit sum limit tag align SourceRight click MathML additional feature align geq sum limit alpha tag align SourceRight click MathML additional feature align sum limit alpha tag align sourcewhere inequality sum leq sum leq summation merge summation inequality ldots feasible inequality satisfied theorem algorithm LBA competitive proof theorem easily lemma weak duality online algorithm ROTO subsection propose ROTO propose algorithm achieves approximation probability sigma user sigma constant balance algorithm pseudo code algorithm algorithm upon arrival user LBR invokes LB procedure fractional offload decision LBR technique fractional integer sum mathbb leq sum sum interval sum sum probability offload task node sum sum probability reject task algorithm LB LBR alg ROTO initialization omega leftarrow forall qquad qquad qquad leftarrow lfloor frac omega rfloor forall qquad qquad qquad leftarrow frac cdot omega forall task user arrives invoke LB algorithm uniformly interval sum reject task ddot leftarrow forall sum leq sum allocate ddot leftarrow omega leftarrow omega omega omega leftarrow leftarrow lfloor frac omega rfloor leftarrow frac omega ddot leftarrow forall node ddot omega leftarrow omega omega omega leftarrow leftarrow lfloor frac omega rfloor leftarrow frac omega leftarrow setminus lbrace rbrace task node ddot leftarrow omega leftarrow omega omega leftarrow lfloor frac omega rfloor leftarrow frac omega uniformly interval reject task offload task specific node accord ddot LBR ddot binary variable ddot update omega node ddot update node ddot update node task complexity algorithm mathcal algorithm algorithm LBA fractional  technique fractional integer complexity mathcal complexity algorithm mathcal analysis denote objective achieve LBA algorithm denote optimal objective ROTO ROTO LP opt opt LP respectively previous geq frac text opt LP ROTO LP convex relaxation ROTO opt LP geq opt geq text opt denote objective derive LBR ddot define random variable ddot ddot sum alpha ddot ddot sum ddot ddot sum nolimits ddot sum nolimits sum nolimits alpha ddot theorem delta equation ddot delta frac text opt leq sigma equation source proof chernoff bound facilitate proof obviously random variable lbrace ddot rbrace independent construction apply chernoff bound align ddot leq delta frac text opt sum limit ddot leq delta frac text opt leq sum limit ddot leq delta frac text opt LP leq sum limit ddot leq delta ddot leq delta leq exp delta align source without loss generality assume opt mathcal geq frac text opt LP geq frac text opt constant geq sufficiently therefore equation exp frac delta leq exp frac delta equation SourceLet sigma delta align ddot delta frac text opt leq sigma align sourcethe theorem immediately discussion subsection discus limitation future direction divisible task assume task user atomic however situation task independent dependent subtasks dependent subtasks subtasks parallel independent task accord dag graph independent subtasks task revenue accord entire task non negligible device capacity focus scenario mobile device limited compute resource hence task offload node execution mobile device powerful compute capacity task divisible user node connects user revenue consumption task locally LBA slightly adjust dynamic revenue assumes revenue task fix however user willing task due urgency revenue ratio alpha dynamically modify accord deadline schedule urgent task revenue meanwhile existence competition user modify price task node minimal theoretic framework uncertain task requirement mainly scenario compute requirement task available however realistic scenario task processing generally uncertain task assignment uncertainty processing theoretical computer however focus efficient task schedule concern allocation compute resource computation offload uncertain processing future nonnegligible transmission assume rapid development 5G network transmission ignore meanwhile assume user task user offload node within communication BS user ROTO particularly however MEC scene performance algorithm theoretically schedule amount node challenge distribute competition analysis transmission delay specifically organize distribute framework whenever user arrives schedule calculation task offload perform BS user trace driven simulation demonstrate performance LBR LBR baseline algorithm assume information user advance random allocation RA algorithm user arrives RA randomly offloads task node user greedy allocation GA algorithm offloads task node maximum revenue optimal opt obtain exist mathematical ibm cplex setup parameter perspective insightful conclusion simulation setting envision mobile compute deployed inside  asia node trace location envision node location  due  usually achieve decent coverage user addition distribution  actually population density perfect location deployment future location    envision node default node compute capacity node ghz slot node loc  task trace task statistic accordance task input data per task MB cpu cycle byte data compute demand user  price statistic accordance price compute demand alpha user trace customer   implies customer mid mathbb mid default user location user randomly distribute  5G scenario user node distance within communication default communication user data trace google cluster trace information processing dependency relationship processing resource task adjust user arrival poisson distribution accommodate stochastic arrival deadline arrival uniformly distribute simulation evaluate influence user varies trend user grows overall revenue grows accordingly reasonable user maximize revenue node sufficient compute capacity overall revenue exceed threshold compute capacity node limited node exhaust capacity future user revenue longer increase online algorithm outperforms RA GA optimal algorithm testbed testbed simulation algorithm baseline algorithm configuration simulation algorithm baseline algorithm configuration impact node overall revenue randomly node node overall revenue increase node increase increase node compute capacity increase accordingly compute capacity revenue algorithm performs RA GA optimal algorithm inspect impact network topology communication average node user overall revenue grows connection increase connection likely node user exhaust compute capacity node sufficient capacity connection happens likely overall revenue algorithm significantly RA GA optimal algorithm slot slot node slot grows overall revenue grows slot user node overall revenue increase algorithm outperforms classic RA GA algorithm optimal algorithm LBR outperforms GA RA testbed implement revenue driven online task offload conduct implementation validate performance LBR testbed deployment platform testbed environment raspberry model cortex cpu core 5GHz raspberry model cortex cpu core 2GHz node samsung samsung phone user user raspberry program python environment roughly implement code user trace adjust user arrival poisson distribution arrival deadline task uniformly distribute task trace realistic task trace google cluster computation intensive task contains information processing dependency relationship processing resource task cpu cycle byte data accordance task namely mathrm  mathrm  program cpu cycle byte data mathrm  mathrm  respectively price compute demand alpha mathrm  task MB MB mathrm  task MB MB mid mathbb mid performance comparison overall revenue node gain revenue task successfully execute revenue remains task performance algorithm compute resource node sufficient task offload node GA RA perform LBR LBR selects node revenue however LBR outperforms baseline overall revenue LBR percent baseline testbed algorithm baseline algorithm configuration testbed algorithm baseline algorithm configuration experimental testbed consistent simulation overall revenue versus user node respectively overall revenue increase growth user node LBR achieves significant revenue increment algorithm evaluates impact connection user node overall revenue increase connection overall revenue increase LBR outperforms GA RA GA prefers offload task node maximum revenue imbalance remain resource node node exhaust resource quickly others sufficient resource newly task likely reject node overload situation apply RA LBR outperforms GA RA connection slot affect offload decision GA RA connection slot node exhaust resource cannot node exhaust resource others sufficient resource conclusion formulate task computation offload optimization maximize offload revenue performance guarantee propose algorithm achieves approximation probability sigma trace driven simulation testbed propose scheme outperforms classic RA GA algorithm optimal algorithm