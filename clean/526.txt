microservices widely flexible software development recently container become prefer deployment technology microservices overhead however container layer complicates task schedule auto exist algorithm adapt layer structure compose virtual machine container ignore workload article proposes elastic schedule microservices ESMS integrates task schedule auto ESMS aim minimize virtual machine meeting deadline constraint specifically define task schedule microservices optimization deadline constraint propose statistic strategy configuration container workload propose urgency workflow schedule algorithm assigns task determines quantity instance finally model mapping container virtual machine variable bin pack achieve integrate virtual machine container via simulation workflow application ability ESMS improve ratio meeting deadline reduce verify comparison exist algorithm introduction software development SaaS software service become increasingly popular improves business agility lower software maintenance however diversity business elasticity software architecture scalability rapid development traditional architecture microservices shorten development cycle reduce inherent complexity improve scalability construct service independent lifecycles reduce granularity service microservices popularly commercial software netflix generally application deployed performance requirement response reduce resource therefore task schedule auto address microservice application literature task schedule auto effectively utilize compute resource task schedule application described workflow topic schedule task execution multiple instance optimize makespan instance insufficient performance requirement algorithm instance resource achieve performance however usually cannot sophisticated requirement layer structure consist container virtual machine vms auto establishes threshold reinforcement performance prediction model determines amount resource performance criterion task schedule auto algorithm focus construct simplify ignore task schedule schedule strategy demand resource scheme difference predict algorithm without combine schedule actual amount resource schedule difference performance degradation resource provision unnecessary extra provision therefore motivate integrate auto task schedule microservices obtain accurate resource demand satisfy service performance requirement minimize service deployment currently schedule algorithm assume workflow execution decision workflow parameter advance ignore dynamic characteristic workload workload schedule algorithm execute repeatedly continuously submit workflow algorithm cannot advance characteristic workflow execution task execution task fluctuate runtime optimal decision schedule algorithm configuration service instance cannot guarantee global optimality therefore schedule algorithm decision optimization ensure performance workload microservices container become prefer technology deploy microservice instance due overhead however container layer brings challenge auto provider resource vms configuration layer resource structure container container layer VM layer simultaneously whereas traditional algorithm applicable layer structure vms container container VM image newly container deployed VM host correspond image reduce image container therefore algorithm exist image improve performance consideration factor vms instance vms identify propose elastic schedule algorithm microservices ESMS integrates task schedule auto demand model define task schedule microservices optimization deadline constraint statistic strategy appropriate container configuration workload heuristic task schedule algorithm deadline distribution urgency propose determines schedule scheme container impact container image furthermore realize layer vms container deployment container described variable bin pack  heuristic algorithm scheme vms mapping container vms finally perform simulation workflow application montage wikipedia access trace ESMS demonstrate reduce rental obtain ratio meeting deadline constraint exist algorithm ProLiS contribution propose elastic schedule algorithm microservices integrate task schedule auto urgency schedule algorithm obtain schedule scheme accurately instance scheme obtain layer algorithm aim improve utilization workload microservices configuration algorithm statistical information configuration container assign deadline improve accuracy deadline distribution layer vms container impact container image initialization container task schedule auto construct  obtain optimal scheme vms deployment container minimize vms simulation workflow application propose algorithm verify outperform representative task schedule auto algorithm ratio meeting deadline vms remainder organize summarizes related defines model elastic schedule microservice application propose task schedule auto algorithm detail respectively experimentation evaluation concludes related task schedule NP task schedule intensively goal optimization response security various goal performance drawn attention traditional distribute assume infinite resource machine resource price therefore performance provider user interval partial utilization interval interval task schedule avoid waste interval exist schedule algorithm mainly deadline constrain workflow schedule budget constrain workflow schedule deadline constrain workflow schedule performance requirement deadline workflow goal minimize execution workflow meeting deadline constraint define partial critical  propose IC pcp algorithm minimize extend upward rank HEFT define probabilistic upward rank algorithm ProLiS  propose deadline constrain workflow schedule propose algorithm  minimize reduce vms instance propose granularity approach schedule deadline constrain workflow budget constrain workflow schedule minimizes makespan workflow within user define budget extend classic HEFT propose  selects service via assessment spare budget model performance microservices propose  algorithm greedy strategy task exist instance propose remain cheapest budget budget constraint guarantee feasibility however focus schedule workflow ignore workload multi workflow resource workflow increase resource utilization reduce infrastructure effort multiple workflow schedule limited constrain resource scenario inapplicable compute   propose  algorithm  compute schedule multiple workflow submit algorithm execute workflow characteristic ignore workload workload workflow submit timestamps schedule algorithm execute repeatedly without information subsequent workflow algorithm leftover resource subsequent workload allocate resource instance task schedule workflow data processing task define replica operator responsible processing data therefore task processing service instance microservice task schedule corresponds service instance placement microservices task schedule algorithm adopt strategy instance cheapest service instance adopt strategy instance directly VM however layer structure consist container vms strategy cannot configuration container vms VM container although described layer resource structure microservices discus related container ignore vms auto accord methodology auto category series analysis model analysis widely amazon EC threshold prior knowledge trigger action respond dynamic workload  become SLA aware microservices framework  series analysis data discover repetitive predict future request volume future periodic trend typically machine technique  auto regressive average predict request volume per utilized distinct statistical model adapt workload model analysis mathematical probabilistic model construct predict performance decision prime queue theory queue theory model response microservice provision resource addition reinforcement markov regression model petri net analytical model widely technique however algorithm involve specific schedule affect performance model actual schedule cannot accurately reflect actual requirement resource author propose schedule algorithm integrate algorithm schedule algorithm execute request submit evaluation  average schedule policy significant difference conveys necessity integrate schedule auto addition auto algorithm structure layer resource directly deploy service instance VM situation exist amazon auto algorithm assume instance homogeneous configuration manually advance  adjust instance heterogeneous resource provider various vms configuration user combine amount vms generate optimal however overhead vms reduce flexibility algorithm vms container become choice service instance deployment due overhead recently deployment microservices mainly container exist container related focus performance analysis container substitute vms exist container related rarely layer vms container analyze horizontal vertical container vms fold model however relevant performance model capacity instance parameter without overall performance application deployment containerize microservices multi environment involve layer structure initial deployment instead auto runtime initial deployment assumes configuration container core auto although layer vms container VM placement data DCs optimization objective apart performance related objective VM placement DCs mainly minimize related related host whereas reduce rental related price model provider difference objective model addition characteristic image container available vms model formulation request sequence contains user request microservice schedule algorithm perform series request execution schedule schedule uniquely identify timestamp schedule request schedule service instance remove model generally microservice consists layer workflow layer microservice instance layer VM layer workflow layer structure microservice application define workflow request trigger execution workflow instance therefore multiple request schedule multiple workflow instance WF  microservice instance layer contains microservice instance task instance deployed container microservice instance layer container layer VM layer VM resource occupy microservice application vms communicate provider network layer structure vms introduction container layer enables grain resource management lightweight container quickly remove service instance optimization schedule task workflow microservice instance satisfy deadline constraint reduce resource container vms mapping container vms reduce rent vms workflow schedule algorithm optimization simplify ignore container algorithm assume service instance occupies entire VM regardless container layer container VM cap occupy resource container interfere former completely ignores container layer whereas latter unpredictable performance interference cannot apply directly scenario workflow schedule algorithm exist auto algorithm focus traditional vms simply container algorithm rarely layer structure vms container primarily microservice instance layer ignore optimization schedule strategy FCFS cannot resolve dependency task fairness multi workflow optimization poorly address algorithm propose optimization integrate manner achieve elastic schedule microservice application model primary variable parameter workflow correspond request described tuple  task workflow dependency task execute task predecessor task successor task task without predecessor task successor task entry task  exit task  respectively attribute  computation load data transfer amount respectively unique identifier workflow instance task summary variable parameter microservice instance layer microservice deployed multiple service instance instance microservice functional overlap microservices task microservice instance correspond instance msi deployed container amount resource container determines processing instance container distinguish assume workflow schedule algorithm service instance execute task instance compute resource mainly vms microservice instance deployed vms container provider multiple vms configuration price user accord interval VM partial interval consume bill interval interval amazon EC vms VM  VM  price  lease duration  bandwidth network delay vms   described respectively illustrate optimization due workload schedule ΔT ΔT accord timestamps ΔT schedule occurs timestamp similarly ΔT schedule occurs timestamp microservice instance task workload microservice instance task workload dot indicates duration instance solid indicates duration task execute instance height dot processing instance solid execution task instance ΔT assign task respectively similarly instance assign task respectively task schedule ΔT resource interval vms container shut interval vms service instance previous utilize remain resource minimize priority meanwhile service instance newly instance ΔT amount resource instance schedule algorithm timestamp schedule task schedule instance algorithm assign instance utilize exist resource algorithm creates instance instance correspond traditional schedule algorithm newly service instance minimum enables task sub deadline sufficient sub deadline strategy ensures minimum deadline constraint workflow however workload service instance task workflow subsequent workflow subsequent ΔT due fluctuation execution task unassigned task workload longer execution exceed sub deadline task schedule exist instance cannot  instance however resource waste ΔT extra instance increase resource consumption waste instance requirement reasonable redundancy instance faster assign  improves resource utilization reduces therefore service instance configuration instance container address verify feasibility resource redundancy task   LIGO workflow experimental execution data strategy instance cheapest redundancy strategy calculate instance cheapest strategy creates service instance amount resource sub deadline redundancy strategy described experimental setting described deploy container vms sub deadline  respectively  respectively reasonable redundancy reduce instance comparison strategy instance formulation capability instance insufficient container service instance quickly container exist VM rent VM container  therefore elasticity microservice application involves optimization workflow schedule integrate container vms optimize schedule schedule define task schedule scheme scheme  msj ST msj  MS SourceRight click MathML additional feature lst vmx vmx  vmx SourceRight click MathML additional feature indicates task workflow  allocate instance msj ST msj microservice instance msj deployed VM vmx occupy amount resource duration lease lst vmx lease  vmx processing depends schedule scheme mapping task instance msj ST msj msj instance scheme mapping container VM vmx vmx VM msj vmx newly configuration container vms vmx container vms scheme affect container vms schedule exist instance container remain unchanged task assign microservice instance msj execution define ET msj  source FT msj ST msj ET msj source lst vmx  vmx task msj lst vmx   msj ST msj source  vmx   msj FT msj sourcewhere  msj task assign instance msj ST msj depends est task instance instance est instance ST msj est instance goal minimization task assign instance est ST msj est est msj max avail msj  pred aft TT source TT   sourcewhere TT data transfer assume instance task deployed container vmx  bandwidth delay vms respectively aft actual predecessor task avail msj timestamp instance msj task avail msj max msj   msj aft sourcewhere msj initialization instance msj schedule accord container vms msj PT PT vmx msj    source msj newly immediately timestamp msj newly VM image additional container msj newly VM image additional container image msj vmx newly VM container vmx schedule scheme scheme response rtl workflow vms calculate rtl   aft SourceRight click MathML additional feature vmx   sourcewhere VM lease vms   price lease duration VM vmx respectively interval interval provider amazon EC response request constrain deadline optimization elastic schedule microservice application define minimize vms meeting deadline constraint request min rtl  source urgency workflow schedule ESMS consists configuration urgency workflow schedule auto ESMS workflow WF schedule input obtain schedule scheme scheme algorithm calculates effective configuration CE container correspond microservice statistical information computation workload task offline receives workflow urgency workflow schedule algorithm UWS perform CE UWS algorithm deadline distribution allocates sub deadline task accord CE schedule urgency calculate urgency calculation task prioritize accord urgency task mapping selects appropriate service instance task priority finally newly service instance container input integrate algorithm IFFD focus detailed algorithm introduce UWS IFFD perform diagram ESMS knowledge netflix conductor model application workflow execution task schedule task queue addition custom plugins adjust configuration container apis kubernetes kubernetes combine api implement vms function ESMS compatible exist workload workflow multiple workflow service instance therefore schedule algorithm guarantee schedule fairness schedule algorithm repeatedly execute continuous schedule associate therefore specific address summarize ensure schedule fairness leftover instance reduce overall configuration instance container workload subsequent task strategy aim UWS pseudocode algorithm UWS structure schedule task phase calculate heuristic information sort task task mapping phase assign task service instance critical metric priority task schedule propose schedule urgency task basis task adopt frequently merge strategy multi workflow schedule aspect task mapping increase assign task exist instance accord container image exist vms newly container deployed advance propose statistic algorithm reasonable container configuration microservice configuration basis deadline distribution container creation container configuration service instance container configuration correspond container task workflow appropriate resource redundancy address fluctuation execution historical data computation workload various task calculate efficient configuration microservice instance data assume microservices obtain container configuration scheme CE cej cej vector configuration service instance microservice cpu core application increase service instance microservice container configure cej preferentially analyze execution task workflow distribution mode variance normally distribute variance uniform distribution former computation workload correspond average execution plus accord criterion latter workload correspond maximum execution task workload strategy execute task mapping phase user container directly vms correlate configuration price container vms propose conversion strategy container configuration discretization discretizing memory MB amount memory multiple MB container price conversion container price ratio container configuration VM configuration VM amazon EC price VM vcpu GB   per occupies cpu quarter memory ratio detailed configuration initialize cej CE configuration amount resource amount resource resource discretization amount memory MB assume instance microservice msj container configure cej calculate makespan workflow configuration scheme CE eft msj est msj ET msj source  CE   eft msj source zero msj correspond container cej makespan deadline replace configuration microservice cej configuration resource cej usually amount increase resource discretizing resource scheme cej CE cej gain replace cej calculate   CE  cej CE cej  CE  cej cej CE  cej CE  cej CE otherwise source CE    source   duration price container respectively microservices replace configuration microservice obtain gain   corresponds gain replaces configuration microservice scheme cej  replace CE return depends price duration container remains unchanged decrease price increase duration decrease makespan deadline constraint CE efficient container configuration scheme deadline distribution adopt distribution formula calculate sub deadline task sdi rank  rank ET rank  source rank ET  succ TT rank source sub deadline sdi task execution rank meaning rank HEFT execution exit task critical workflow therefore reasonable distribute deadline ratio rank  formula execution calculate service instance however goal minimize meeting deadline constraint formula deadline execute task instance increase unnecessary furthermore task assign instance sub deadline inaccurate therefore container configure cej CE calculate execution service instance deployed container strategy task mapping phase container configure cej actual instance deadline distribution task multi workflow combine workflow workflow task predecessor task entry task task successor task exit task algorithm computational workload data transfer task task zero strategy ensure fairness multi workflow schedule calculate schedule urgency task merge workflow basis task task predecessor task entry task task sdi  hop sourcewhere hop unassigned task critical exit task  define   MS eft sourcewhere MS instance instance unknown instance calculate eft instance msj difference sdi  risk exceed sub deadline subsequent task schedule impact delay directly delay subsequent task increase makespan workflow therefore schedule urgency task mapping accord urgency task schedule task mapping exist resource service instance container exist instance task instance increase instance container configuration CE task workload exceeds sub deadline instance meeting deadline constraint image instance VM instance deployed VM detail algorithm  msj calculate instance MS  msj sdi eft msj source instance  msj nonnegative task sub deadline increase  assign msj calculate task assign instance   msj SourceRight click MathML additional feature assign task respectively  msj negative instance sub deadline minimum  instance sub deadline calculate strategy   source  negative maximum available VM impossible calculate eft assign task exist instance instance maximum assign task eft  container configure cej instance container configuration cej task assign  container configure cej maximum available VM instance container slightly  usually multiple discretizing task assign task assign instance exist instance instance algorithm UWS CE WF merge workflow WF newIns calculate rank sub deadline task CE calculate urgency task unassigned task task minimum msj execute calculate  msj  nonnegative msj microservice instance minimum      msj exist instance minimum eft msj instance maximum eft msj eft msj msj msj msj msj  container cej msj instance container configuration cej msj instance  vms image msj vmx VM manner deploy msj vmx advance newIns newIns msj return newIns complexity workflow workflow task task complexity compute est sdi task instance complexity task mapping configuration container calculate makespan complexity calculate est configuration discretization microservices complexity compute CE hence complexity auto container vms related exist algorithm deploy service instance vms directly algorithm determines instance vms instance algorithm directly apply layer container previous strategy vms however newly container deployed vms occupy resource VM VM container deployed algorithm mapping container vms container deployed VM VM mapping exist algorithm focus mapping service instance VM without strategy abovementioned optimization described service instance workflow application workload algorithm fully utilize exist vms optimization combine impact container image therefore resource occupy container vms mapping container vms schedule algorithm layer algorithm  propose image VM affect initialization container therefore ESMS deploy container VM image specifically vms image traverse VM BF strategy selects VM difference remain resource VM resource container strategy UWS affect actual task algorithm container deployed advance deployed algorithm UWS container deployed newIns attempt deploy newIns exist vms remain resource exist vms insufficient vms lease newIns container newIns sort ascend amount resource container deployed exist vms BF strategy resource exist vms deploy container model deployment remain container   container newIns msj VM  container msj price VM   respectively deploy container VM lease vms minimize resource occupy container exceed resource VM  lease vms related VM interval interval VM adopt heuristic algorithm IFFD ffd decrease container vms sort descend resource amount container vms feasible described VM container deployed timestamp extreme instance task exist vms VM complexity loop loop loop task therefore therefore complexity IFFD vms task VM container complexity ESMS evaluate complexity ESMS complexity comparison algorithm ProLiS SCS IC PCPD complexity respectively load vector SCS algorithm complexity difference algorithm IFFD newIns instance msj newIns vmx VM manner newIns newIns msj feasible newIns ffd manner assume vms   vmx VM allocate msj vmx vms  ffd manner vmx  argminc reallocate msj vmx VM msj reduce return evaluation workflow simulate microservice application simulation conduct verify performance propose algorithm experimental setting simulation built simulation platform implement java workflow DAX format file generate request sequence workflow platform PC ghz cpu GB ram JDK workflow application simulation montage LIGO genome sipht workflow widely research workflow schedule workflow montage intensive genome data intensive LIGO sipht cpu intensive sipht asymmetric others asymmetric detail workflow DAX format file computation workload data transfer amount dependency task computation workload task define execution standard compute service workflow application microservice application task corresponds microservice microservice task execution task detailed information available vms related ECU VM compute capacity resource VM assume discretizing ECU addition boot VM container accord related configuration price virtual machine workflow schedule algorithm ProLiS IC PCPD auto algorithm SCS comparison algorithm algorithm focus optimization deadline constraint ProLiS schedule task assign cheapest VM meeting sub deadline IC pcp multiple task execute instance incompatible function characteristic microservices IC PCPD comparison algorithm IC PCPD distributes deadline individual task  assigns VM sub deadline SCS determines vms load vector schedule task deadline EDF algorithm algorithm ignore container layer modify adapt layer structure algorithm mapping task service instance container integrate container vms  strategy  strategy deploys container exist vms BF strategy resource exist vms insufficient VM resource amount closest amount container lease simulate workload randomly sample wikipedia access trace request sequence workload stable decrease increase request sequence workflow instance deadline constraint reasonable deadline calculate average critical workflow deadline factor  deadline constraint factor  source metric although objective minimize workflow cannot deadline constraint feasible constraint meaningless minimize therefore metric ratio define ratio workflow deadline schedule workflow ratio   WF  rtl  source furthermore schedule scheme ratio percent feasible feasible obtain metric vms lease calculate metric evaluation ratio scheme scheme scheme ratio scheme percent scheme conduct performance algorithm workflow workload workload workflow application stable workload execute algorithm workflow application workflow task workflow approximately sipht approximately unique structure ratio factor respectively feasible ratio workflow stable workload workflow stable workload feasible workflow factor increase ratio gradually increase SCS performance ESMS superior performance others data data ESMS obtain feasible others LIGO ratio due ESMS percent ProLiS SCS IC PCPD respectively ratio SCS fluctuates greatly feasible SCS algorithm SCS estimate instance load vector EDF schedule algorithm however slight difference predict load vector demand EDF schedule algorithm task queue delay gradually accumulates execution workflow eventually workflow addition factor increase efficient vms configuration gradually decrease therefore ratio increase deadline factor relaxed algorithm task schedule resource demand schedule scheme ratio demonstrates effectiveness integrate task schedule auto performance IC PCPD unstable obtain ratio feasible ESMS genome cannot obtain feasible montage sipht average ratio IC PCPD ESMS IC PCPD feasible ratio IC PCPD percent percent although difference ratio workflow ESMS average ratio average normalize workflow feasible factor normalize calculate average due ESMS significantly ProLiS reduce percent IC PCPD feasible montage ESMS percent IC PCPD workflow ProLiS decrease factor increase unreasonable deadline distribution montage data transfer madd  ProLiS distribute deadline sub deadline madd task execute task madd instance workflow instance sub deadline madd makespan workflow deadline ESMS distributes deadline correspond CE sub deadline madd makespan closer deadline reduce unnecessary workflow ESMS reasonable redundancy instance reduce resource waste ESMS ratio due strategy UWS strategy instance algorithm impact container image algorithm former task exceeds sub deadline ESMS reduce impact timeout task task although instance increase task exceeds sub deadline subsequent schedule workflow IC PCPD cannot obtain feasible montage neither exist instance instance sub deadline correspond strategy IC PCPD ratio percent latter VM contains image container affect initialization container affect task instance deployed VM image reduce initialization makespan workflow ESMS achieves ratio accord ESMS machine maintain machine reduce complexity operation maintenance montage ProLiS machine analyze unreasonable deadline distribution faster instance occupy vms certainly depends vms configuration vms however vms vms workflow workload evaluate performance algorithm workload access LIGO genome increase decrease workload workflow application examine workflow notation LIGO application decrease workload average ratio average normalize workload feasible workload combine workload ratio SCS random feasible LIGO ESMS maintains ratio genome ESMS outperforms ProLiS SCS performance IC PCPD ESMS ESMS obtain feasible algorithm display improvement ESMS comparison algorithm improvement ratio workflow application workload ratio ESMS algorithm increase percent ProLiS improvement percent LIGO respect improvement percent percent montage SCS increase ratio usually percent percent SCS cannot cannot obtain feasible IC PCPD obtain performance ESMS genome cannot obtain feasible montage performance improvement ESMS percent IC PCPD ratio ESMS percent IC PCPD montage percent improvement percentage ESMS algorithm performance strategy IFFD baseline  task schedule algorithm fix UWS combine IFFD  UWS IFFD ESMS task schedule algorithm impact container image UWS ratio algorithm generally IFFD outperforms  montage LIGO unlike bin pack vms remove rental duration prolong schedule scheme subsequent schedule therefore improvement IFFD  bin pack IFFD  improvement percentage IFFD  strategy  UWS  obtain ratio ProLiS IC PCPD indicates task schedule algorithm UWS improve ratio workload workload workload request schedule task workflow impact workload performance algorithm workload adjust workload workflow request increase request workflow increase normalize ratio algorithm workflow request workflow factor eleven outlier boxplot performance comparison request performance comparison request boxplot reflect ratio obtain ESMS cluster around percent whereas ProLiS IC PCPD disperse addition outlier reflect ratio algorithm factor therefore outlier ESMS significantly ratio others deadline constraint strict indicates obtain ESMS request ProLiS IC PCPD SCS obtain feasible request feasible obtain ProLiS workflow IC PCPD feasible extreme workload task workflow factor ratio algorithm percent runtime evaluate overhead algorithm runtime workload workflow request unstable performance IC PCPD ProLiS ESMS performance comparison workflow performance comparison workflow runtime algorithm request runtime algorithm request request runtime difference increase runtime increase algorithm superiority runtime ProLiS shortest median runtimes basically identical ProLiS ESMS increase runtime ProLiS distribute whereas ESMS shorter algorithm difference complexity conclusion propose developed elastic schedule algorithm ESMS microservices tackle task schedule auto integrate manner algorithm determines container configuration statistic workload adaptive workload  algorithm propose layer introduction container layer impact container image simulation workflow application ability propose algorithm improve ratio microservices validate future construct generalize performance model microservice accurately predict response microservice configuration focus horizontal combination horizontal vertical diversity resource billing model research direction