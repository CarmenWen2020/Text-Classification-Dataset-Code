prior algorithm graph simulation distribute graph scalable exhibit message passing moreover dependent graph partition quality bottleneck due skew data parallelism becomes limited propose efficient parallel centric approach distribute graph novel distribute data structure ST allows grain parallelism hence guarantee linear scalability ST develop parallel graph simulation algorithm PGSim furthermore propose PDSim centric algorithm efficiently evaluates dual simulation parallel PDSim combine ST PGSim split combine approach accelerate computation stage effectiveness efficiency proposition theoretical guarantee extensive massive graph achieve confirm approach outperforms exist algorithm magnitude introduction graph GPM application domain software plagiarism detection database analytics allows input query graph relatively data graph GPM model define constraint query graph subgraph isomorphism NP model domain defines bijective mapping query graph vertex data graph vertex mapping preserve topology query graph important subgraph isomorphism  algorithm VF  graphql spath turbo boost CFL context graph various address subgraph isomorphism graph exploration however subgraph isomorphism stringent application subgraphs ideal model define input limitation rigid constraint subgraph isomorphism impractical application GPM social network moreover subgraph isomorphism return exponential query graph actually query graph automorphism isomorphic subgraph subgraph isomorphism particularity subgraph isomorphism handle propose algorithm impractical becomes analyze return subgraphs without additional contrast graph simulation flexible model GPM relaxation constraint impose subgraph isomorphism preserve relationship input query graph graph simulation return graph evaluate quadratic addition graph simulation flexible suitable application social network community furthermore relaxed model extend graph simulation dual simulation capture topological structure query graph graph simulation impose constraint vertex feasible quadratic simulation reinforces dual simulation introduce locality addition GPM model relax constraint graph simulation bound simulation query reachability data graph surjective simulation extends bound simulation multi label graph relaxation simulation allows constraint substitute grandchild  constraint taxonomy simulation allows mapping vertex label taxonomy hierarchy exist label finally simulation extends bound simulation duality thorough exist GPM model distribute algorithm nevertheless address GPM graph actual data graph challenge social network generate amount data continuously facebook network billion monthly active user june network cannot memory machine due hence distribute storage processing challenge encounter distribute environment linear scalability distribute graph algorithm prior address relaxed GPM context limited due bound parallelism graph simulation dual simulation efficiently evaluate parallel algorithm achieve linear scalability actually algorithm adopt vertex centric paradigm pregel pregel data graph distribute vertex analogous compute execute local program parallel exchange message vertex algorithm series computation synchronization barrier message exchange initial message consist query graph data vertex information locally iteration graph vertex information removal message update local accordingly distribute algorithm converges message exchange anymore nevertheless vertex centric paradigm limited generally exhibit message passing additionally skew graph parallelism finally vertex centric paradigm suitable graph algorithm data locality indeed data locality important graph neighborhood vertex evaluate GPM model subgraph isomorphism simulation furthermore algorithm propose adopt partial evaluation graph simulation query partial evaluation worker distribute evaluates graph simulation data locally communicates coordinator machine propagates newly compute information worker reception information worker worker update local information accordingly update another message exchange computation algorithm convergence partition strategy adopt worker remain inactive processing moreover mechanism parallelize computation machine hence limit parallelism achieve shortcoming motivate propose PGSim PDSim parallel algorithm GPM query parallel model respectively contribution summarize introduce ST novel distribute data structure data graph ensures parallelism ST compose compute STwigs source destination vertex ST ensures scalability due independence parallel propose PGSim centric algorithm evaluate graph simulation parallel distribute data graph knowledge graph simulation adopts centric program model ST PGSim propose PDSim parallel algorithm evaluate dual simulation context massive graph addition effectiveness approach theoretical guarantee correctness algorithm propose furthermore propose implementation parallel algorithm memory distribute apache spark finally efficiency PGSim PDSim extensive vertex centric approach synthetic data graph obtain verify PGSim PDSim faster vertex centric counterpart remainder organize iterates related sect dedicate define relaxed graph addition preliminary introduce PGSim parallel centric approach graph simulation sect sect propose parallel centric algorithm dual simulation implementation detail addition experimental evaluation PGSim PDSim whereas sect concludes future direction related algorithm graph simulation later propose quadratic algorithm context label data graph incremental graph simulation address moreover query graph simulation address however approach centralize hence cannot directly employ massive graph approach propose decade relaxed GPM distribute graph propose algorithm worker component data graph across machine graph simulation evaluate sequential component finally union obtain component return clearly approach scalable assume component data graph reside memory machine cannot adopt partial evaluation graph simulation distribute graph iterative algorithm evaluates graph simulation machine parallel available data vertex boundary node vertex reside machine unknown hence non evaluate iteration distribute algorithm worker propagates information boundary node central coordinator machine newly available data another algorithm partial evaluation grape subgraph mining adopts partial evaluation program model however approach fully distribute involves coordinator machine propagates update drawback approach partial evaluation performance heavily depends efficient partition strategy data graph vertex centric approach pregel program model vertex data graph information locally vertex communicate information removal message vertex satisfy graph simulation anymore removal message vertex update accordingly potentially generate removal message distribute algorithm converges removal approach author propose vertex centric algorithm dual simulation moreover author adapt approach context dynamic evolve graph instead compute graph simulation data vertex update algorithm update exist upon addition update removal propagate data graph another vertex centric algorithm evaluate dual simulation distribute rdf graph finally author combine partial evaluation vertex centric paradigm evaluate graph simulation acyclic cyclic separately however address graph distinct label limit application proposition PGSim distribute data structure ST instead sequential graph traversal evaluate graph simulation grain parallelism ensure ST allows handle skewed distribution graph vertex centric program algorithm generally incur message passing vertex reside machine slows processing distribute graph computation contrast approach memory abstraction propagate update along algorithm finally approach evaluate dual simulation PDSim split computation increase parallelism algorithm faster vertex centric graph simulation background introduces concept related GPM particularly graph simulation dual simulation throughout label graph formally define definition label graph label graph graph finite vertex denotes function vertex label label graph simulation defines mapping relation label graph graph data graph relatively graph query graph without loss generality assume otherwise graph simulation union component formal definition graph simulation definition graph simulation data graph graph via graph simulation exists binary relation label dual simulation imposes constraint data vertex formal definition definition dual simulation data graph graph via dual simulation exists binary relation label relationship relationship query graph simulation dual simulation graph simply subgraph vertex vertex relation define formally subgraph maximum graph definition subgraph graph subgraph iff vertex definition maximum graph data graph graph maximum relation graph simulation dual simulation maximum graph subgraph verify vertex vertex parallel algorithm PGSim PDSim evaluate GPM query distribute data graph graph simulation dual simulation respectively parallel centric graph simulation particularity graph simulation availability information data vertex illustrate query graph data graph graph graph simulation respectively query label identifier simplicity purpose query vertex mapped data vertex graph moreover vertex vertex hence vertex mapped relationship vertex however relation reflect scenario relationship query via graph simulation image data graph image graph image efficient scalable algorithm data vertex graph simulation allows avoid sequential traversal data graph exploit decouple data graph computation perform hence increase parallelism moreover data locality preserve vertex centric program model important graph neighborhood vertex evaluate GPM model subgraph isomorphism simulation therefore paradigm suitable accurate graph simulation message passing communication adopt computation moreover vertex centric paradigm message passing vertex reside physical machine exchange information vertex directly available adopt observation motivate proposition PGSim parallel algorithm adopts memory abstraction instead message passing evaluate graph simulation distribute graph introduce terminology data structure approach parallel algorithm PGSim formal validation terminology data structure graph simulation defines constraint respect data vertex query vertex define constraint definition constraint vertex query graph constraint query vertex function query vertex constraint defines constraint consequently vertex zero empty constraint constraint query graph data graph data vertex query vertex respect constraint constraint constraint candidate candidate data vertex label therefore data vertex multiple constraint met constraint met outgo source vertex grouped data structure STwig define moreover ST STwigs extract data graph definition STwig data graph vertex graph generates STwig structure STwig compose outgo vertex refer destination vertex STwig STwig exactly zero empty STwig STwig isolated data vertex data vertex STwigs related data graph illustrate PGSim STwigs parallel evaluate graph simulation STwigs extract data graph STwig image STwig initial ST extract data graph local context local context compose local definition local STwig define local vertex mapped boolean definition STwig simply union local however flag STwig non empty mapped query vertex consequently STwig empty therefore eliminate ST intuitively empty STwig mapped query vertex empty constraint hence local initialize update afterward definition ST STwigs data graph distribute data structure ST STwig ST mapped local context compose ST construct initial data graph parallel furthermore global graph simulation define definition global query graph ST distribute STwigs extract data graph compute union local ST constraint constraint union global otherwise union define concept data structure ST introduce PGSim parallel graph simulation via PGSim approach evaluate graph simulation parallel consists preliminary phase ST simply data graph source vertex moreover vertex without outgo empty STwigs reception input query graph extract constraint straightforward directly retrieve finally compute global graph simulation ST algorithm PGSim input ST iterative algorithm applies transformation initial ST refine data structure closer graph iteration PGSim transforms STwig update local addition parallel parallel algorithm executes category iteration initialization computation convergence PGSim extract global refine ST parallel initialization initialization algorithm  evaluate STwig local label label STwig local program parallel initializes procedure  local procedure  compose label constraint verifies constraint respect assign false procedure  boolean flag attach indicates constraint pas constraint return parallel algorithm STwig satisfy constraint allows update local local recomputed initialization algorithm PGSim reduces ST invoke procedure refine remove ST STwigs empty local procedure  constraint vertex computes label similarity constraint initialization program STwig invokes procedure local initialize procedure  addition constraint input parameter verifies exist constraint remains unmatched mapped otherwise flag query graph data graph PGSim building initial ST data structure vertex STwig initial ST contains STwig described earlier non empty STwig empty STwig initialization STwig computes local update local empty STwigs mapped query vertex initialization phase however constraint vertex query vertex STwigs empty hence initial become invalid therefore broadcast global invalid iteration parallel algorithm computation computation invalid empty compose local pas constraint algorithm  consequently STwigs non empty algorithm  parallel update accord reevaluate local constraint graph simulation procedure  return invalid propagate STwigs ST invalid empty another computation algorithm  trigger propagate removal update local accordingly afterward invalid reevaluate algorithm PGSim STwigs invalid filter procedure refine invalid computation yield empty algorithm PGSim converges global compute remain STwig ST query graph data graph iteration STwigs empty consequently eliminate refinement phase ST iteration empty iteration computation STwig refine ST update invalid STwigs data vertex affected previous iteration actually constraint STwig filter eliminates local nevertheless valid therefore local remains applies STwig vertex update local without local update ST iteration remains empty announces parallel algorithm iteration global union local remain STwigs ST moreover graph compose remain STwigs ST exactly PGSim graph data graph illustrate initial ST transformation apply PGSim graph graph simulation flag illustrate false image convergence correctness PGSim convergence propose algorithm lemma lemma maximum super PGSim proof successive elimination filter iteration remove STwig propagate STwigs removal information propagate remove STwig therefore maximum iteration maximum maximum local label frequency lemma complexity algorithm  proof initialize program STwig initializes initializes evaluates graph simulation finally update therefore complexity algorithm  lemma complexity algorithm  proof update program STwig update  graph simulation finally update hence complexity algorithm  theorem algorithm PGSim evaluate graph simulation parallel terminate complexity proof data structure ST maximum construction contains exactly STwigs iteration refine procedure remove ST algorithm PGSim iterate ST STwigs update STwig parallel processor parallel loop loop iteration lemma iteration refine ST parallel update STwigs parallel global extract therefore complexity algorithm PGSim environment processor theorem algorithm PGSim computes graph simulation proof correctness PGSim verify parallel algorithm terminates theorem parallel algorithm computes graph simulation parallel algorithm return graph simulation suppose parallel algorithm exists satisfy constraint graph simulation PGSim STwig local satisfy graph simulation label satisfy constraint however impossible initialize procedure  query vertex label moreover satisfy already filter initialization program evaluate graph simulation procedure  iteration constraint reevaluate update furthermore operation perform initial removal contains PGSim verify contains graph simulation actually necessarily belongs initial generate procedure  data vertex data graph suppose PGSim filter incorrectly local STwig update inside procedure  removal happens satisfied anymore therefore PGSim return graph simulation parallel centric dual simulation introduce split combine approach evaluate dual simulation introduce parallel algorithm approach dubbed PDSim theoretical guarantee correctness dual simulation availability information data vertex addition exist algorithm dual simulation centralize vertex centric information incoming outgo data vertex sequentially however vertex strategy load imbalance therefore address computation related constraint related constraint parallel split combine approach parallel dual simulation image split combine approach parallel dual simulation split combine approach considers dual simulation constraint constraint separation allows generate STwigs STwig PGSim data vertex data vertex STwig destination empty STwigs vertex zero data graph phase refer split phase illustrates computation algorithm PDSim parallel dual simulation algorithm PDSim input distribute data structure construct split phase perform data graph ST contains STwigs relationship built relationship split phase execute algorithm PGSim constraint input query modify version PGSim constraint execute PGSim return refine ST without compute global phase refine data structure data graph respect constraint constraint separately however dual simulation constraint met hence algorithm combine input STwig dual simulation algorithm combine information STwig computes local eliminate satisfy dual simulation STwig compute intersection respectively indeed data vertex query vertex dual simulation satisfies label constraint constraint constraint addition filter return parallel algorithm nevertheless evaluation dual simulation actually removal PGSim trigger update local combine ST propagate remove across STwigs therefore routine execute remove broadcast iteration dual simulation reevaluate STwig affected removal becomes empty algorithm PDSim consequently algorithm PDSim converges graph global compute graph simulation split combine approach increase parallelism distribute data structure parallel prune invalid remain computation perform parallel ST illustrate execution PDSim data graph query graph graph respectively STwig non empty local empty intuitively local STwig empty algorithm combine respect constraint dual simulation indeed intersection inform STwigs combine ST removal remove contains indeed local STwig becomes empty remain iteration algorithm PDSim eliminates STwig vertex STwigs data vertex filter another remain STwigs graph image image graph image convergence correctness PDSim theorem theorem convergence correctness algorithm PDSim respectively theorem algorithm PDSim terminate complexity proof PDSim complexity combine combine remain dual simulation converge evaluation graph simulation moreover global extract consequently complexity algorithm PDSim theorem algorithm PDSim return dual simulation proof correctness PDSim ensure parallel algorithm terminate theorem parallel algorithm return dual simulation algorithm return dual simulation suppose algorithm exists incorrect return incorrect vertex label satisfy constraint cannot local initialize query vertex label union local moreover local STwig ST initialize intersection satisfy satisfy moreover iteration parallel algorithm remove member satisfy dual simulation furthermore operation perform removal operation ensures invalid cannot stage hence initial  valid therefore algorithm PGSim return dual simulation suppose exists return satisfies constraint constraint correctness algorithm PGSim theorem necessarily therefore exists filter combine phase removal iteration PDSim however removal local evaluate dual simulation update hence algorithm PGSim return dual simulation experimental evaluation evaluate performance propose parallel centric algorithm vertex centric detail distribute implementation ST PGSim PDSim datasets characteristic cluster configuration environment finally discus distribute implementation PGSim PDSim implement distribute data structure ST apache spark apache spark memory data processing framework distribute computation model resilient distribute datasets RDDs rdd distribute data structure parallel apply transformation rdd immutability spark RDDs guarantee resilience rdd lose distribute algorithm directly recomputed operation generate hence spark fault tolerant avoid costly operation load initial rdd ST inherits spark RDDs distribute data structure memory processing compute cluster PGSim implement series successive rdd transformation apply initial ST moreover implement split combine approach PDSim spark RDDs experimental datasets addition synthetic graph generate mat model datasets snap library characteristic graph unless  otherwise distinct label fix characteristic data graph experimental setup execute spark cluster compose node 2GB memory core node role remain node worker extract data graph implement algorithm input parameter subgraph density default algorithm executes bfs traversal random vertex data graph vertex randomly fix average compute extract subgraph vertex input parameter algorithm extract randomly furthermore mat model generate synthetic data graph generator input distinct label fix synthetic graph generate experimental discus performance evaluation PGSim PDSim comparison vertex centric algorithm VC GSim propose implement VC GSim graphx graph processing implementation pregel apache spark performance evaluation parallel algorithm PGSim PDSim comparison vertex centric VC GSim graph parameter query graph query graph diameter distinct label image weak parallel algorithm axis image parallel algorithm PGSim PDSim image graph parameter evaluate impact parameter query graph diameter query graph distinct label data graph performance PGSim PDSim discus average response obtain superiority approach PGSim faster VC GSim datasets epinions amazon  livejournal improvement response achieve becomes significant data graph increase indeed PGSim faster vertex centric version livejournal moreover PGSim sensitive query graph increase linear curve respect parallel algorithm PDSim evaluate dual simulation behaves VC GSim epinions explain dual simulation computation prune invalid graph simulation however shorter query datasets actually PDSim scalable query graph datasets massive graph livejournal PDSim response closer PGSim evaluate behavior PGSim PDSim VC GSim respect diameter graph datasets average graph response affected however livejournal response increase slightly parameter iteration filter invalid PGSim sensitive variation finally distinct label data graph important parameter affect generally initial candidate datasets query graph moreover generate data graph query graph evaluate graph simulation PGSim VC GSim dual simulation PDSim average response response decrease increase normally behavior PGSim PDSim refinement iteration algorithm prune data vertex label exists query graph invalid increase data graph distinct label inversely response VC GSim algorithm longer evaluate graph simulation datasets weak evaluate weak scalability PGSim PDSim consists fix worker core cluster increase data graph generate synthetic data graph mat model varies report average response graph simulation dual simulation instance query PGSim PDSim VC GSim PGSim outperforms VC GSim magnitude difference response algorithm data graph increase data graph vertex algorithm PDSim evaluates dual simulation data graph nevertheless increase data graph PGSim synthetic graph vertex VC GSim moreover difference return graph simulation dual simulation PDSim prune return graph simulation happens combine phase along remain iteration parallel algorithm converge additional computation perform PDSim approach evaluate dual simulation outperforms significantly VC GSim increase indeed synthetic graph consequently prof scalability parallel algorithm scalability PGSim PDSim fix fix data graph core cluster report average response speedup evaluate graph simulation dual simulation respectively instance query graph datasets addition synthetic graph obtain PGSim core indeed algorithm speedup increase linearly increase core data graph data graph speedup achieve indeed speedup achieve PGSim PDSim respectively synthetic graph nevertheless remain data graph speedup curve flatten due maximum parallelism datasets epinions amazon  speedup algorithm increase core speedup increase slowly core scalability distribute data structure ST parallel algorithm PGSim PDSim conclusion propose PGSim efficient parallel centric approach evaluate graph simulation distribute graph PGSim relies distribute data structure ST data graph allows parallelism avoid locality issue generally vertex centric graph algorithm moreover propose PDSim split combine approach evaluate dual simulation ST PGSim theoretical guarantee correctness convergence PGSim PDSim moreover experimental proposition outperform vertex centric graph simulation magnitude future research direction propose parallel algorithm relaxed GPM multi label graph another important challenge address highly dynamic graph important distribute data structure ST maintain performance update frequency