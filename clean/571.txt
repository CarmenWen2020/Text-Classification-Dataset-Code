fortran widely scientific compute corpus legacy code fortran code incorrect program compile without error formal approach ensure safety legacy fortran code automate program transformation objective reduce program error guarantee safety rigorous analysis safety fortran novel program transformation algorithm convert fortran subroutine function pure subroutine function fortran implement algorithm source source compiler automatically transforms legacy code code pure  transparent subroutine readily offload accelerator introduction endure appeal fortran fortran program originally propose john  purpose facilitate scientific program become widely adopt amongst scientist effective supercomputing fortran dominant supercomputing accord yamamoto utilisation computer supercomputer fortran invocation compiler proxy monthly usage statistic archer supercomputer UK footnote illustrate ratio monthly usage UK archer supercomputer per program image fortran actively developed recent standard fortran iso IEC release november however adoption recent standard relative citation citation per revision normalise sum citation revision google scholar sciencedirect revision fortran release fortran absolute reference citation google scholar mention fortran fortran widely standard widespread adoption literature mention revision fortran google scholar sciencedirect image evidence confirm collaboration scientist affair scientist fortran effectively choice  code adopts fortran syntax semantic extension semantic perspective code fortran vast amount legacy code fortran fortran assumption requirement code inherent issue readability scalability maintainability  comprehensive discussion issue effort aim refactoring legacy code interactive automatic address issue effort specifically interested automatically refactoring fortran offload accelerator gpus FPGAs acceleration offload hardware accelerator proven extremely effective accelerate scientific code accelerator however accelerator memory compute  offload calculation accelerator host memory accelerator cache coherent host memory code accelerator memory advantageous reduce coherency traffic pure function separation memory absence operating accelerator code offload accelerator memory operation library intrinsic routine requirement equivalent pure function input output influence output therefore mechanism data specifically kernel offload accelerator behave pure function input data accelerator memory output data accelerator memory therefore requirement offload code accelerator pure function implies function impure restriction library practical incorporate binary accelerator pure function perspective library function acceptable library function pure safety safety theory polymorphism program robin milner express notion safety typed program cannot compute component contribute behaviour checker finally actual program code ensures program cannot perform operation compatible operand involve error typed program error error arise variable constant function treat checker accepts correctly typed program however checker accepts correctly typed program program safety fortran context fortran specify ANSI american national standard program fortran hereafter specification program checker accepts nonetheless incorrect perspective culprit loss information occurs data handle via equivalence statement related formalisation fortran surprisingly research fortran formalisation data abstraction specifically encapsulation abstract array fortran formal specification abstract data implement derive fortran formalisation fortran semantics VDM publication outcome specifically regard aware extension fortran attribute reflect measurement accord survey formalisation fortran analysis safety report source source compilation refactoring source source compiler refactoring fortran available however actually fortran  LLNL relies fortran parser  parser fortran standard furthermore  parser fortran fortran refactoring framework fortran  accord documentation fortran various legacy extension eclipse interactive refactoring  fortran useful indeed   powerful refactorings discus detail effective refactoring determination data movement direction source code inter procedural analysis refactoring essential project inter procedural analysis  footnote  fortran refactorings propose completeness mention commercial  vast  refactor module procedure argument conclusion project refactoring program transformation however none focus safety program contribution formal analysis safety normalise fortran program sect series algorithm program transformation normalise sect additional equivalence association sect precondition program transformation algorithm implement source source  automatically rewrite fortran program fortran remove equivalence statement referential transparency ensure function marked offload accelerator pure conversion fortran fortran rely fortran feature notably intent implicit none improve safety impact performance program additional restriction code checked typed program adhere restriction accepted checker fortran program accepted checker source source compiler fortran program generates checked ordinary fortran  warning error code cleanly validate source source compiler nist national institute standard technology fortran  aim validate adherence ANSI fortran standard furthermore compiler shallow  coriolis  nasa chemical equilibrium application program footnote calculate theoretical rocket performance eddy simulator urban footnote resolution turbulent  formal analysis safety normalise fortran program normalise fortran program program consists pure function sect formal definition variable parameter function explicitly typed discus sect achieve fully explicitly procedure pure concept notation formal mechanism information computation precisely expression integer assertion evaluate integer assertion judgment judgement meaningful typed expression internally consistent consistent context expression contains variable declare context code statement specification declaration theory statement declare constant variable function standard notation summarise assertion expression assertion context expression declare code context conventionally denote operator  theory assertion assume context expression arrow additional constraint constraint apply judgement function argument function without parenthesis declaration tuple expression brevity deviate slightly terminology specification favour terminology refer symbolic datum variable variable refer specification variable scalar variable scalar array definition pure function function pure return datum otherwise compute anything remove code furthermore pure function without input argument effectively constant assume input variable therefore without loss generality assume function argument tuple expression return tuple expression context program variable declare code function function pure iff context declare argument function return regardless content input function implies function modify sect fortran procedure transform pure function specification fortran data accord data specification data integer precision complex logical specification discus storage accord storage storage numeric storage storage integer logical datum numeric storage storage sequence precision complex datum numeric storage storage sequence datum storage storage sequence datum standard specify relationship numeric storage storage datum storage storage sequence storage consecutive integer storage precision datum consecutive numeric storage storage sequence precision complex datum processor approximation complex representation complex datum data complex datum imaginary approximation datum complex datum consecutive numeric storage storage sequence storage storage imaginary complex quote specification specify storage however consensus amongst fortran  relationship storage byte fortran various extension exists byte complex etc technically statement integer specification however widely fortran compiler specifically source gnu fortran compiler effectively fortran define specification combine extension footnote treat byte storage define scalar  tuples moreover define storage byte allows simplify integer complex logical define precision integer discussion treat integer array discus needlessly complicate discussion without anything formalise fortran convention sect assumption fortran entity formal definition appendix fortran construct primitive scalar array tuple function void variable tuple denote argument function subroutine function entire function declaration function input return void subroutine assignment statement subroutine declaration therefore variable variable arise polymorphism arithmetic relational operator intrinsic function sect investigate safety constant scalar array declaration access function subroutine declaration application assignment expression furthermore specifically fortran handle subtypes arise context specification conversion commonly coercion constant numeric constant described data constant specification appendix formal description define constant integer   constant belongs scalar scalar simply access scalar variable variable declaration context code scalar fortran expression variable statement code statement array array declaration addition valid scalar valid dimension attribute array access index scalar additional validity array index array slice fortran allows array slice notation fortran style code array slice integer dimension array perspective slice array assign tuple slice valid within bound index slice  denote  slice array  array dim slice tuple valid slice therefore dim array scalar dimension  implies component slice constant slice context compiler performs aggressive linear constant fold linear expression constant leaf node reduce constant  compiler allows insert explain appendix array index fortran allows array indexed array array index integer array array index array rank contains index location access  requirement safety array criterion array valid index valid index array index index compiler allows insert explain appendix bound fortran constant array bound compiler performs aggressive constant fold index reducible constant linear arithmetic constant however array index therefore typed program bound error fundamentally index concern actual perform fortran compiler option  bound gnu  subroutine function explain sect fortran subroutine external function transform pure function intrinsic function pure definition perspective difference fortran function external intrinsic subroutine function expression therefore return subroutine statement return explain subroutine function pure interaction code via argument return subroutine declaration dummy argument valid fortran subroutine return denote void subroutine application argument dummy argument subroutine statement return external function declaration dummy argument valid fortran external function return function application argument dummy argument function application return function gloss important detail subroutine external function subroutine external function argument external function function argument return indistinguishable variable subroutine argument however void valid argument subroutine function specification external statement external function subroutine argument declare external statement omit declaration error strictly external attribute function subroutine however purpose extend instead external function context actual function compile appendix algorithm via construction sum function compute assignment fortran assignment statement return therefore assignment variable declare code expression variable declare code variable expression accord specification assignment variable array valid extension array fortran limit scalar array assignment expression expression consist constant variable operator intrinsic external function polymorphic numeric operator numeric operator fortran polymorphic handle operand numeric numeric variable constraint num operator valid numeric definition appendix operator argument return argument operator exponent integer numeric integer preserve unary operator polymorphic fortran operator array comparison operation polymorphic intrinsics intrinsic function polymorphic intrinsic function refer specification intrinsics intrinsics min max argument undetermined denote expression expression application operator intrinsic function leaf constant variable perform via recursive descent conversion polymorphic operator specification defines specific intrinsic function int   purpose conversion fortran specification extends thereby  redundant signature respectively footnote argument identify num generic  fortran allows implicit conversion coercion operator assignment accord subtyping subtype context denote transitive subtyping relation apply numeric fortran therefore generalise conversion interpretation specification formally conversion expression expression footnote relational operator accord specification interpretation arithmetic relational expression arithmetic expression relational expression  expression  therefore conversion difference expression bool conversion assignment assignment specification assignment typed accord execution arithmetic assignment statement evaluation expression sect conversion definition assignment establish implicitly convert conversion unsafe strictly error gnu fortran compiler flag indeed error unsafe coercion program  integer output program    conversion coercion coercion error conversion integer  conversion however behaviour default fortran compiler warn unsafe conversion warning enable compiler warns default convert implicit conversion explicit conversion code assume explicit conversion programmer explicit conversion program  integer int program  conclusion regard safety fortran analysis conclude fortran program explicitly typed consist pure function specific construct array slice array index unknown compile function compiler guarantee safety slice index array index constant array index rank however index non constant expression potentially unsafe program pas without warn error compiler issue error relaxed warn ignore potential unsafe behaviour function argument function function fundamentally unsafe signature fortran function subroutine information argument novel equivalent construct sum external function variant principle coercion unsafe however unsafe coercion recognise compiler compiler warn error option enable coercion compromise safety compiler convention conclusion fortran program explicitly typed consist pure function almost entirely compile entirely addition array slice array index unknown compile function discus transformation ensure program explicitly typed consist pure function safety loss information perspective equivalence association specification mention datum loses information coercion extension complex integer equivalence statement associate memory location memory location erase therefore legal generate warning incorrect loss information equivalence integer equivalence happens sequence byte memory reference interpret integer complement format interpret precision float information sequence byte interpretation program transformation safety precede analyse safety fortran program consists pure function variable parameter function explicitly typed fortran program transform equivalent program transform procedure pure function discus remove manner assumption procedure external library source potential transform fortran subroutine pure function fortran subroutine translate pure function algorithm linear subroutine argument longer intent  tuple intent tuple argument intent identify function argument function return regardless subroutine syntax information pure function argument concerned external function algorithm return tuple return infer intent procedure argument subroutine offload cannot external variable transform subroutine argument infer intent procedure argument recursive descent nest algorithm intent reflect subroutine argument access  subroutine intent argument leaf subroutine algorithm inspect statement access subroutine argument expression procedure intrinsic occurrence statement variable access intent argument unknown specification intent attribute access subroutine intent  intent  remain statement intent statement  inspect statement subroutine intent argument access statement algorithm combine algorithm linear complexity node argument subroutine transform implicit explicit accord data procedure identifier specification fortran variable specify statement integer precision complex logical absence explicit declaration statement imply implies integer implies unless implicit statement default imply implicit statement specifies variable specification safety perspective discipline referential transparency variable computation aim pure functional code compiler infers explicit declaration statement specification implicit typed variable algorithm algorithm straightforward linear undeclared variable code transform procedure argument specification defines semantics statement statement statement associate entity program allows program define reference data without argument storage specification statement slightly statement specifies physical storage access scoping program statement global data facility storage association storage sequence relationship exist variable variable storage association association data occurs storage sequence align storage explain remove pure function memory caller code essential requirement offload accelerator however removal rewrite equivalence statement guarantee code approach convert variable subroutine argument approach conversion module scoped variable suitable purpose pure function furthermore difference semantics storage association module scoped variable approach variable align whereas overlap sequence contribution conversion associate sect subscript variable caller variable local callee construct chain subroutine chain caller sufficient subroutine occurs somewhere chain consequence generally associate variable subroutine caller chain program program subroutine subroutine subroutine subroutine associate program passing argument chain program program subroutine subroutine subroutine subroutine argument via program therefore analyse code chain disjoint pas argument via intervene unique rename analysis subroutine consist sequence become argument sequence become dummy argument associate variable procedure caller argument dummy argument identify variable caller sequence subroutine sequence local sequence brevity complicate storage sequence overlap normal acceptable overlap sequence caller complex local complex statement association complex complex complex complex  association correctly variable declare caller correspond variable subroutine variable array scalar whereas purpose assume variable scalar without loss generality assume variable array scalar simply syntactic array merely compact traverse array linear index array caller array subroutine overlap direction strategy convert variable dummy parameter algorithm algorithm linear sequence variable storage compiler maintains global information subroutine  evaluation array bound sequence  consists tuples declaration  linear index idx array variable declaration contains dim array index index tuples equivalence  contains declaration variable subroutine variable caller constitute argument subroutine caller variable prefixed caller subroutine algorithm traverse local sequence caller sequence algorithm algorithm iterative local sequence consume return   subscript indicates sequence sequence remove removal equivalence statement accord equivalence statement specification equivalence statement specify storage entity program association entity storage  entity data equivalence statement conversion imply mathematical equivalence variable array  variable array array variable another storage association issue equivalence error silently specification mandate error warn unsafe equivalence program equivalence implicit integer dimension logical precision equivalence equivalence OK equivalence equivalence therefore equivalence statement refactored flavour complication transitivity multiple tuples variable tuple effectively transitivity across tuples tuple occurs another tuple sufficient transitivity tuple associate quadratic complexity furthermore tuples spec effectively variable associate others unique association tuple association algorithm therefore quadratic complexity fortunately associate variable program overlap complication overlap overlap equivalence dimension   equivalence   array overlap actually creates equivalence     overlap equivalence account identify scalar variable array access equivalent equivalence remove equivalence statement insert additional assignment statement variable equivalence modify variable equivalence local argument refactoring initial assignment variable assignment argument subroutine function intent  construction equivalence algorithm array access syntactic indexed scalar distinguish scalar array algorithm construct  tuples equivalence statement account transitivity tuples   algorithm replace equivalence statement assignment algorithm linear occurrence code variable equivalence summary program transformation algorithm transform code fortran program pure function argument local variable explicitly statically typed algorithm sect prerequisite actual transformation pure function sect infer intent procedure argument algorithm sect ensure safety transformation sect perform equivalence statement eliminate algorithm sect novel algorithm equivalence association sect analyse safety fortran program consists pure function variable parameter function explicitly typed sect algorithm transform fortran program equivalent program remove equivalence association novel algorithm variable equivalence statement equivalence statement safely remove otherwise code likely incorrect code transform code without equivalence statement checked fortran compiler sect equivalence association simply associate memory storage variable preserve information attempt conversion sect purpose without loss generality assume variable scalar array syntactic collection scalar assume array linear traverse index soundness equivalence statement algorithm refers variable local procedure variable code caller procedure algorithm linear complexity variable program scalar atomic therefore cannot split attempt variable associate via extension subroutine sequence byte indicates access subroutine caller otherwise caller declare correspond typed variable associate via logical coercion logical default default sequence variable caller subroutine however strict coercion correspond associate via involves  logical false coerce otherwise therefore interpret logical integer interpret integer logical return false therefore interpret logical false interpret non zero depends non intuitive checker therefore error attempt interpret logical complex coercion complex involves complex coerce contiguous default default overall becomes soundness association equivalence statement association correctly typed proceed remove sect conclusion formally analyse safety fortran program fortran program explicitly typed consist pure function compile exception array slice array index unknown compile function feature entirely addition feature algorithm transform arbitrary fortran program explicitly typed code consist pure function source source compiler implement transformation generates fully fortran code fortran program entirely program transformation significant however considerable benefit obvious benefit safety error furthermore compiler transform legacy fortran code fortran finally code consists pure function function offload easily accelerator gpus FPGAs demonstrate automate  gpu offload