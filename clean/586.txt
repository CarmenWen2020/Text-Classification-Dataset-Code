gradually realize importance efficiency cycle application application service consist micro service however traditional monolithic longer suitable development cycle due difficulty maintenance load balance factor associate consequently switch focus containerization lightweight virtualization technology grace machine resource efficiently virtual machine VM VM guest OS simulate host machine whereas containerization enables application OS furthermore containerization facilitates user delete deploy container effortlessly manipulate manage multiple container provider introduce container orchestration platform kubernetes docker swarm nomad others rigorous kubernetes administrator perspective conduct later stage serverless compute paradigm redefine integrate kubernetes accelerate development software application theoretical knowledge experimental evaluation novel approach accommodate developer software architecture development efficiently effectively minimize public provider aws GCP azure however serverless function attach issue security threat inadequacy function debug consequently challenge address issue however difficulty hardship address issue altogether respectively simply narrow analysis security aspect serverless quantitatively probability attack serverless attack attack defense attack scenario related countermeasure thereafter quantification reflect security enhancement concludes research challenge burdensome error prone platform investigate exist security vulnerability serverless compute future direction introduction virtualization evolve decade initial multiple application host machine multiple vms host machine community container replace VM resource utilization security container operating virtualization shed hypervisor multiple container linux kernel enables container interact host OS directly advantage container lightweight efficient feature tedious manage container manually container orchestration platform collectively manage multiple container instance adopts container orchestration technology develops various orchestration platform docker swarm nomad kubernetes others besides organization deploy application service platform provider container orchestration platform however increase demand community smarter framework container underlie infrastructure requirement provider aws GCP azure adopt serverless compute paradigm serverless compute neither concept community derives FaaS function service literally serverless compute FaaS combine container orchestration serverless compute FaaS developer simply stateless function deploy  traditional  vendor VM serverless simply function invoke therefore FaaS paradigm developer transfer responsibility handle underlie infrastructure network configuration FaaS provider aspect nowadays serverless compute widely apis data processing iot scenario commercial potential nevertheless serverless compute encounter security threat risk typically exploit attacker besides serverless function suffer incurs latency function deployed inadequacy function debug consequently challenge secure serverless platform function optimize devise function debug approach significant research optimize related notable research context security monitoring debug however difficulty hardship address issue altogether respectively simply narrow analysis security enhancement serverless platform function excellent contribution delineate analyze comparison pro con orchestration platform kubernetes throughout composition internal architecture kubernetes fully implement kubernetes cluster scratch conclude difficulty configure cluster without auxiliary upgrade kubernetes cluster update application deployed cluster importantly backup deployed kubernetes cluster restore cluster disaster deeply analyze principle feature serverless compute advantage serverless compute conclude potential business analyze security issue serverless related countermeasure exist unresolved vulnerability comprehend analyze prominent standard security quantification mechanism attack attack defense besides carefully model attack defense conclude  attack attack defense serverless attack scenario related countermeasure thereafter quantitatively probability attack without countermeasure quantification reflect security enhancement organize introduces evolution virtualization highlight advantage kubernetes sect structure image container relationship summary mainstream orchestration comparison suitable orchestration introduce kubernetes core component sect principle inside kubernetes cluster sect alongside commonly internal relation besides sect briefly introduce networking kubernetes demonstrate detailed deploy cluster scratch sect introduces strategy administrator maintain administer cluster discus standard error kubernetes countermeasure later shortly discus containerize application sect importantly discus serverless compute comparative analysis pro con traditional server compute sect besides demonstrate deploy app serverless platform analyze prominent feature serverless distribute development security issue serverless framework related countermeasure sect sect introduce research challenge encounter analysis moreover summary related critical application serverless compute sect conclusion future evolution virtualization image kubernetes traditional deployment developer deploy application various physical machine due multiple development environment resource utilization developer cannot upper limit resource application furthermore hardware resource fix application traffic increase unless increase infrastructure reallocate resource equipment community ideal virtual machine resource issue clearly stage virtualization advantage VM developer deploy multiple application compile deployed operating physical machine VM vms hypervisor monitoring guest OS host machine user install platform hypervisor simulate hardware driver guest OS nevertheless resource utilization developer virtual OS host install application VM guest OS already plenty resource maintain environment alone application finally container enables application OS allocate independent resource administrator precisely manage app resource organize automatically monitor multiple container status concept orchestration mainstream orchestration platform kubernetes kubernetes enables developer quickly efficiently unify management apps rollback update apps load balance stage evolution virtualization evolution virtualization prerequisite kubernetes container concept container image fundamental kubernetes inside container image inside image image file container application containerize packed image image runtime dependent file application image compose file shot contains application file dependent library startup command execute service app program structure image container image inside container container image container compose binary application linux kernel resource disk cpu memory network etc resource allocate  container linux virtual machine environment application pre instal command linux kernel invokes resource discussion kubernetes application developer image container specifically app micro service easy packet image image uploaded docker  private repository kubernetes image finally image container assign scheduler comparison orchestration nowadays various orchestration mainstream kubernetes mesos ECS docker swarm nomad  although unique feature others limitation  potential user however multi dimensional comparison kubernetes choice mainstream orchestration platform feature pro con comparison orchestration kubernetes kubernetes KS leader container orchestration series standard realizes fundamental useful feature instance automatically deploy update container container isolation monitoring utility various metric exam healthy network configuration KS ingres service realize communication moreover administrator configure imperative declarative former KS api command latter yaml file configure lastly KS cluster maximum node production environment feature useful orchestration another advantage KS application deployed multiple micro service deployment pod flexibility suitable enterprise furthermore KS persistent volume external storage aws GCP user choice native dashboard however drawback containerize workload deploy yaml configuration rewrite accord platform mesos  mesos grain resource platform data developed UC berkeley objective enable multiple framework cluster therefore mesos allows user containerize non containerize workload achieve feature unique architecture node node scheduler node framework framework scheduler assign resource node node information request scheduler nevertheless mesos target achieve maximum redundant node mesos configure furthermore familiar KS hardly adapt mesos KS feature mesos persistent volume cannot external storage container assign IP default cannot network namespace therefore limitation mesos mighty narrow audience simpler mesos user  container orchestration framework mesos docker swarm docker swarm docker native cluster management container scheduler swarm integrates docker api convenient easy user command interface cli cluster swarm architecture straightforward component service node manager task service file pre define container image meta data node manager par service maintains KS deployment task executor KS service defines application manager multiple task demand task container however although docker swarm easy lack feature automatic native monitoring component native gui  limited docker api therefore docker swarm suitable cluster lightweight workload nomad nomad binary focus schedule multi datacenter multi configuration data analysis unique feature automatically manage failure hide node manages user application container legacy batch application moreover lightweight due architecture however nomad cluster management scheduler without service   KS distribution introduce  aim enterprise feature productivity security  commercial user highlight productivity network ingres load balance storage monitor RBAC module package user install component scratch convenient however coin  forbids user install image docker hub safety image private repository moreover  limited installation user designate linux distribution important price KS maintain community component kubernetes deploy KS cluster abstract concept cluster compose multiple machine physical machine VM machine collectively node node node worker node former monitoring cluster worker node load execute application component node worker node web application mostly compose micro service advantage container function communicate interact service eco commerce platform consists payment shopping cart user management service deployed worker node communicate service platform service micro service advantage micro service easy maintain update KS component node component kube api server kube api server core KS offering KS api manage KS component kube api server component component kube api server etcd server etcd distribute database retrieval management flexible cluster configuration data resource status kube api server receives command update etcd data inform component kubectl kubectl cli command administrator transfer command kube api server manipulate cluster kube scheduler scheduler suitable node pending pod ass node resource workload rank filter node fulfil pod kube controller manager kube controller manager supervises cluster resource component dozen sub controller monitor status coincident cluster controller ensure desire status manager replication controller endpoint controller etc pod network  communicate cluster deploy pod network weave worker node component kubelet kubelet agent worker node node manage maintain worker node pod kubelet connects kube api server kube scheduler chooses suitable node pod configuration kubelet container accord config file kubelet monitor status container pod transmits container status kube api server kube proxy kube proxy network proxy implement pod network policy manages service cluster route traffic designate service runtime runtime container container environment popular runtime docker  replace principle inside cluster kubernetes pod pod minimum KS highly suitable container web server database container inside pod network namespace  resource   contains pod duty pod desire user easily  accord demand deployment commonly manages multiple pod invokes replica replica update downgrade pod image   pod deployed node monitoring execute task exit service service strategy access pod micro service  establish communication outside network inside pod  enable pod inside node  server load balancer route outside traffic service ingres ingres function load balancer ssl url rout external url developer config url multiple service secret secret data cipher text avoid directly sensitive information config file pod volume pod access sensitive data database password secret namespace namespace logically physical cluster multiple virtual cluster multi user develop deploy physical cluster without interfere namespace isolates resource namespaces cluster default default kube suppose developer specify namespace assign default namespace cluster component latter   pod configuration environment variable facilitate pod retrieve PV persistent volume data pod node pod data delete pod delete contrast PV ensure data delete pod delete pvc persistent volume pod data permanently pvc bind PV requirement component KS image hood node efficiently handle task simultaneously maintain framework cluster monitor manage node status core component component responsible function duty overview relationship kube api server hub connects component exchange information request workflow kube api server authenticate incoming command identity request command valid transmit request component execute etcd etcd connects api server update information kube api server executes command prevent server crash administrator usually deploy etcd server backup kubectl invokes KS api manipulate kube scheduler monitor kube api server pod scheduler chooses node pod kube controller manager contains manager supervise status node controller listens node correctly node controller node unreachable restart min however node restart controller remove allocate another replication controller monitor replica pod pod controller automatically pod schedule kube scheduler evaluates suitable node pod utilize technique label label pod attribute label pod function admin easily filter pod accord function pod server label tier pod server label tier selector selector pod individual label specify coincident label filter non conform pod deployment pod selector discover coincident pod user mechanism enables deployment manage label pod collectively moreover user bind service pod service selector pod taint taint define node pod conform taint node typical pod cannot deployed   define pod taint node summarizes component KS commonly component inside KS networking kubernetes KS cluster complex network depends address analysis network situation KS moreover bridge network inside cluster combine network KS network inside KS communication container inside pod pod cluster network namespace individual IP address container communicate  belongs network namespace prevents conflict communication pod pod IP endpoint visible pod cluster directly communicate others without nat tunnel proxy bridge network inside cluster image communication pod service although pod IP IP frequently due kube api server operation therefore service pod abstract layer unified access service pod selector bind designate pod route traffic pod outside access IP endpoint pod service invisible node private address access KS service outside   pod inside host client pod cni container network interface network standard extensible flexible KS cni standard cni defines developer technology plugins deploy cluster scratch deploy KS cluster  virtual machine kubernetes cluster requirement analysis cluster kubernetes  approach approach fully automate command kubernetes cluster optimize ensure understand task bootstrap kubernetes cluster installation kubernetes generate security certificate component security define component application analyze security protocol kubernetes cluster administration application development installation VM configuration freely node VM configuration configure vms   vms node worker node  node node availability HA prevent node respond  node gateway install container runtime docker node allocate IP address node network configure authentication secret node install kubectl node node certificate authority CA certificate crt secret CA authenticate certificate crt generate KS component certificate secret crt generate admin crt admin admin user generate kube config file component client authenticate server configure component bootstrapping installation etcd server kubernetes kube scheduler kube api server configure worker component bootstrapping installation crt worker crt worker  authorize kubelet creates worker  install kubelet kube proxy kubectl configure admin user permission access kubectl remotely  file enable user access kubectl remotely kube api server file authenticate authorize user configuration file cluster credential coincident certificate establish cni weave network pod node status worker node  configure pod network therefore deploy popular network weave worker node configure api server permission access kubelet RBAC kube api server frequently communicate worker node kubelet retrieve node status cluster role kube api server assign permission access kubelet instal  cluster although cluster dns service application therefore install  cluster summary deploy cluster scratch troublesome user install configure component individually administrator configure vms node cluster authentication security moreover suitable network install coincident plugins finally access permission user safety therefore convenient  rapidly deploy cluster kubernetes cluster   cluster maintenance maintenance upgrade version cluster instal manually version kube api server component version version otherwise incompatibility arise moreover update cluster cannot directly update version update gradually application upgrade software update strategy cluster  affect user access server update node upgrade transfer node update app version node load pod backup etcd backup cluster restore disaster directly command convert configuration information service yaml file however configuration information cluster status information cluster etcd therefore etcd separately access etcd authentication file server crt server crt file specify backup backup etcd command command  snapshot  database file snapshot etcd restore etcd specify data dir file etcd token file address cluster node address cluster peer finally etc kubernetes manifest etcd yaml modify etcd configuration file data dir volume  summary KS neat  constant maintenance consistency user administrator application cluster upgrade otherwise user access server maintenance moreover KS availability HA footnote regularly backup cluster data essential maintenance administrator recover cluster troubleshoot error application access application compose coincident service access therefore service curl http service terminal display timeout pod configuration service configuration ensure label selector service endpoint host address cannot access sometimes failure arise component interact dependent component respond affect cluster therefore node status ensure accordingly command component besides install component binary component service status command detail service service fails simply restart service lastly service restart information issue scroll update displayed worker node cannot access worker node status node status  command node node login worker node node abnormal disk volume status node usually ignore disk capacity moreover kubelet checked stuff worker node certificate certificate date reassign therefore csr CA approve request discussion service usually quickly understand KS architecture principle vital administrator analyze relationship service container gateway kube api server core component kubelet agent worker node node moreover proficiency command helpful significant documentation containerize application traditional apps monolithic architecture cannot directly container platform therefore reconstruct stateful function transform stateless function adapt environment continuous integration continuous deployment CI CD platform deploy application containerize deploy application application micro service accord function docker image micro service accord runtime environment dependency upload docker image CI CD platform analysis  platform popular CI CD platform executes image docker hub pas specifically script  install dependency environment finally deploy application platform successful platform suite code executes app pas feature deployment CI CD platform code production environment update discussion containerize application topic belongs software engineering briefly discus dozen paradigm develop application furthermore KS stateless function developer reconstruct legacy function adapt environment however principle simply micro service image deploy container serverless compute serverless compute serverless compute development compute paradigm developer server instead development underlie infrastructure allocate cpu resource ram resource network application developer focus cod develop furthermore serverless compute application owner efficiently application advantage compute resource serverless compute serverless compute function service FaaS concept conventional community IaaS infrastructure service SaaS software service application former asks developer manage infrastructure hardware software latter workload underlie resource however inconvenience developer develop decouple apps SaaS platform flexibly therefore FaaS emerge background hardware infrastructure decouple service independent function container deployed FaaS platform request invoke function task function user duration code execution moreover FaaS platform manage function auto function demand accord incoming request monitor function metric administrator easy maintain application advantage serverless compute developer manage underlie infrastructure collectively manage serverless platform vendor helpful startup manpower serverless compute per function invoke developer IaaS SaaS application active however serverless function execute demand trigger idle spare serverless compute application easy update due decouple function moreover developer rid restriction suitable feature allows developer dependency scenario without influence organization administrator underlie infrastructure attention code serverless compute convenient monitor safety function stateless status information collectively platform moreover communication function tracked public platform vendor lock restricts program container orchestration framework therefore source serverless compute framework merge kubeless openwhisk openfaas framework flexibly adapt private environment without artificial restriction instance openfaas container orchestration nearly consequently focus openfaas literature summarizes pro con serverless compute traditional server comparison serverless compute traditional server openfaas mainstream public platform aws azure GCP FaaS service developer deploy service duration code execution however public platform usually resource threshold restrict user container orchestration platform program developer adopt therefore source FaaS framework serverless compute private infrastructure thereby avoid vendor lock source framework openfaas extensible flexible popular platform openfaas architecture user communicate openfaas gateway cli gateway connects prometheus function monitor brings KS feature manage container openfaas architecture image openfaas openfaas container orchestration platform KS docker swarm nomad developer extend platform compose api gateway function watchdog former external route function relies native functionality chosen docker orchestrator prometheus service function metric function alert prometheus function watchdog packed function entry function deploy app serverless platform openfaas KS FaaS framework vms configure ubuntu install faa cli deploy invoke function install docker KS namespaces openfaas openfaas former belongs openfaas component latter function cluster install openfaas openfaas gateway deployment cluster generate password config openfaas url global variable openfaas UI easily deploy function monitor function status openfaas command interface faa cli deploy monitoring function openfaas environment function function code template exist binary adopt template github function command file directory directory yml file configure cli building deploy function handler core file function logic implement file react invoke finally command deploy function function image docker hub command faa cli deploy command faa cli shot serverless distribute development prominent feature serverless enhance distribute development empirical analysis openfaas earlier source popular community feature template serverless framework template template generate function openfaas template command template template template openfaas personal openfaas template zero serverless zero manage optimally increase agility achieve passing command kubectl deploy replica  openfaas deployment default replica however zero deployment function label com openfaas zero  function deployed earlier replica zero openfaas UI prometheus graph  dashboard pas command kubectl deploy  openfaas terminal  replica thereafter invoke function faa cli invoke  replica invoke function openfaas UI replica accordingly listing asynchronous function asynchronously achieve simply pas async option function invoke callback autoscaling  serverless function  function upon user request autoscaling openfaas implement prometheus  threshold request per define prometheus  exceed limit  minimum maximum replica deployment function label com openfaas min com openfaas max assign min max replica respectively kubernetes native horizontal pod   instead  status autoscaling function  deploy  min max replica respectively thereafter script invoke  function replica listing monitor autoscaling prometheus pane besides prometheus  dashboard pane monitor autoscaling depicts status monitor important parameter replica replica min besides max invoke function replica remains afterward function script earlier replica gradually pane replica becomes invoke function addition  dashboard pane monitor request rate per request rate around information monitor load discus autoscale monitoring serverless image replica distribute across cluster balance manner besides user request balance kubernetes component  ingres handle  task load distribution cluster replica deployed replica distribute evenly worker node earlier worker node cluster multi user load serverless multiple request multi user validate perform load  invoke function  user request per duration pas command monitor status min max replica autoscaling scenario output load pane output summary terminal pane  dashboard function rate replica multi request multi user duly load serverless user request image feature mention herein strike feature serverless compute trigger easy integration deployment metric summary earlier serverless compute container orchestration framework reduces developer hurdle developer client underlie infrastructure anymore decrease overhead focus develop application moreover serverless compute framework powerful source useful ensure service monitoring hence serverless compute excellent opportunity developer besides strike feature serverless develop enhance compute distribute compute compute machine related security quantification serverless attack security revenue loss besides quality service service agreement privacy integrity safety confidentiality reliability availability downtime vulnerability threat attack degrade therefore security risk quantification important security quantification identify security risk threat vulnerability evaluate validate analyze available security data mathematical model technique accurately security environment manner inform security infrastructure investment risk transfer decision numerous mechanism quantify security attribute metric potential mechanism quantify security attack model attack threat vulnerability finally predict risk security related metric correspond vulnerability attack impact analyze security risk serverless afterward security quantification attack security risk serverless serverless platform vendor customer information isolate multi tenant function serverless function stateless cannot data permanent data delete function exit mechanism potential issue data across network frequently risk leak data adopt ifc information data information ifc function monitoring data interact data taint label secret data taint label OS prevent access internet nevertheless primary ifc efficient typical application function monitoring data consume substantial resource influence performance platform moreover ifc attacker advantage termination termination leak information attacker multiple concurrent request crack secret  architecture image therefore research innovative dynamic ifc implement architecture  approach creates sandbox security shim serverless incoming outgo function request shim static security label serverless function invocation dynamic faceted label data persistent another security issue broken authentication platform apis public domain authentication anyone request function leaf weakness attacker exploit function administrator authentication endpoint another security issue sql injection attack attack function sql injection command execution others developer filter encode external data inside function countermeasure injection attack data command query besides perform input validation server nevertheless security risk properly instance legacy unused function ignore development  function role resource dependency hack attacker hacker advantage platform automatically function denial service attack serverless application developer amount function invocation summarizes serverless compute exist security advent serverless compute security emerge serverless disrupt previous security responsibility shift responsibility user provider without fundamentally however serverless address inherent risk multi tenant resource application serverless compute security issue attack attack atree propose  widely evaluate potential security threat graphical mathematical structure decision notation model attack systematically categorizes attack attack construct perspective adversary nice attack role attacker multi consist leaf node attack overall goal attack leaf node sub goal attacker likely implement perform attack attack structure image attack defense fundamental formalism attack defense mechanism attack defense ADTree extends attack defensive countermeasure yield graphical mathematical model multi stage attack along safeguard developed investigate defense mechanism attack defend attack probability defense node attack defense therefore node belongs attacker defender model countermeasure prevent adversary goal ADTree interplay attacker goal attack defender attack defense construct diagram node mathematical model visual beneath expands fork structure decision apply pivotal business decision fault logical relationship failure ADTree analysis vulnerability specific attack node global goal attacker intermediate node refinement global goal define stage attack leaf node model attack longer refine attack defense structure image goal carefully likely comprehensively analyze simply ADTree however hostile attacker goal sometimes multiple attack defense perform attack analysis plainly thanks succinct structure ADTree complex attack scenario express clearly simply besides hostile attacker various unique goal benefit scalability flexibility ADTree qualify perceive attack countermeasure easily situation construct attack defense identify goal goal attack identify attack goal attack goal exist attack plug countermeasure defense node attack construct illustrate attack defensive structure boolean gate explain refinement conjunctive gate disjunctive gate node achieve goal node achieve goal quantitative analysis estimate probability attack attack defend without countermeasure application attack attack defense attack defense easily understand attacker intrude target vulnerability moreover effective display security budget serverless compute primarily focus code infrastructure besides allows decompose workload artifact easy manage optimum  however earlier issue address security attack defense analyze security threat enhancement attack thoroughly analyze exist commercial source attack model commercial attack    technology  security besides source   ent  analysis commercial source  limitation date quantitative analysis source attack model quantification attack serverless attack scenario image attack scenario demonstrate earlier  establish attack demonstrate serverless attack threaten probability attack attack scenario image quantify security risk standpoint probability indicates likelihood threat probability attribute domain literally apparently evident probability congruent probability risk context risk implies presence risk instead avoid assign probability attack scenario compute probability attack probability simply assumption severity attack statistical analysis probability attack however limit objective simply assume probability assign probability leaf node consequently ADTree derives attack probability attack defense model quantification model attack attack serverless quantitative analysis construct attack defense related countermeasure attack defense serverless related countermeasure image quantitative analysis attack defense probability attribute domain assume defensive analysis probability attack related countermeasure image assign probability countermeasure probability correspond attack reduce overall reflection cumulative attack reduction risk defensive automatically generate node attack refer reflect cannot totally eliminate risk mitigate impact effective countermeasure secure serverless compute discussion security quantification recommendation  serverless platform probability attack attack attack defense attack scenario establish consistent serverless platform function satisfactory reduction risk probability defensive quantification serverless security quantification accord confidently insecure urgent demand enhance security aspect serverless effective defend risk develop safer accord research strongly community attention security issue serverless analysis limited probability assumption empirical evaluation validation future devise quantitative logically compute probability attack countermeasure besides perform empirical evaluation validation attack related countermeasure research challenge kubernetes beginner deploy KS cluster  configure everything component version appropriate network consume easy mistake organization deeply cluster security reliability networking stuff client traffic standard bandwidth site consume individual developer reconstruct monolithic architecture micro service architecture stateless program hence developer adapt program architecture summarizes challenge KS research challenge serverless compute DDoS billing issue hacker DDoS attack maliciously invoke function financial loss client broken authentication developer deploy release service expose function api public domain however hacker unauthenticated function bypass logic steal data vulnerable dependency developer library dependency convenience nevertheless unexpected risk dependency security strategy hacker vulnerability attack related researcher developer devote serverless compute perspective improve serverless compute performance user user therefore focus critical application summarize critical application derive unique approach switch workbench aim offering development environment critical microservice native application application sensitive data component distribute traditional service model docker virtualization orchestration technology cannot fulfil demand switch package contains component drip ASAP demand advantage docker compose application component drip allocate resource component ASAP monitor application perfectly adopt critical application handle serverless function access database traditional VM demonstrate function database instance container function database frequently latency therefore latency cache runtime container function fetch data cache cache retrieve directly otherwise access database dramatically optimizes performance serverless framework moreover researcher explore adapt serverless framework latency hardware application scenario iot adam ramachandran explore alternative WebAssembly fulfil requirement therefore perfect substitute similarly plenty optimize serverless performance suppose application stable performance handle burst request extension serverless interface administrator pas service objective slo maintain function invocation rate slo ensure optimum performance application latency transmission quality aforementioned research analysis innovative handle critical similarly researcher propose numerous dong derive novel serverless  sharply optimize startup function scenario user initiate request function image mention image repository docker hub creates sandbox container function issue processing sluggish issue  reuses image sandbox eliminates application initialization sandbox creation finally optimize user lightweight choreography middleware reduce principle middleware knowledge predict approximation incoming function container therefore user invoke multiple function provision container function effectively reduce another research address analyze redundant content deploy container versioning duplicate reuse code optimize latency evaluate novel compose peer peer network PP virtual file content addressable storage CAS partial delivery execution tcp splitting user upload source code file execute container file code fetch code worker node PP network addition strategy explicitly optimize serverless performance latency issue latency external request function instead resource consequently alleviate function stack otherwise severe latency issue addition researcher explore vendor lock earlier serverless provider hide critical management user convenience sometime strategy choice function specifically algorithm function node robust FaaS platform function node without performance implication therefore fix issue adopt machine technology multiple model algorithm smart dramatically improves serverless compute performance compatibility instal platform scheduler moreover  framework automatically provider schedule application across provider monitoring function effectively supervise complex application traditional monitoring module platform propose queue theory model approach analyze performance micro service platform approach facilitate platform predict distribution response besides instance maintain specific circumstance serverless compute compelling significant research continuously overall improve quality service qos service agreement security review perspective kubernetes serverless compute distribute compute hybrid data adopt kubernetes distribute analyzes volume data multiple iot device aspect monitor allocates reasonable resource iot application ensures performance overhead consume resource limited device author introduce  automl platform multiple automl algorithm reduce prohibitive computational adopt automl research abstract machine algorithm function  micro service consequently flexible extensible  becomes user friendly powerful platform enterprise user another research proposes architecture hybrid environment combine multiple environment compute resource reduce architecture adopts infrastructure layer compose multiple worker node moreover federation layer node collectively manage cluster public private besides author proposes heterogeneous mobile compute model hybrid distribute compute model utilize mobile device compute operation relieve overload model adopts service research analyzes FaaS platform investigate ability orchestration serverless function handle parallel processing none exist platform promising performance however valuable direction performance enhancement FaaS service parallel processing author proposes innovative framework execute parallel computation integrates container platform distribute compute consequently user easily implement parallel application efficient image management utility enables developer easy application overall significant aim optimize serverless performance various aspect critical application optimize mitigate latency enhance monitoring module aspect mission empirically analyze usage prospect serverless compute firm robust conclusion future conclusion containerization gradually potential developer utilize container technology serverless compute numerous challenge VM performance loss auto load balance optimize others mainly principle KS associate serverless compute framework openfaas primary motivation KS platform evaluate manageability administrator achieve KS cluster analyze deploy manage container discus KS cluster structure administrator perspective focus relationship kube api server component function besides KS usage effectiveness establish communication pod configure pod proxy node agent cni network weave  KS security mechanism data kube api server cluster authenticate role authorize permission access deeply discus serverless compute transfer responsibility handle underlie architecture network provider serverless compute platform popular source framework openfaas easy deploy function besides prominent feature serverless enhance compute distribute compute compute machine nevertheless serverless issue security application monitoring function debug others consequently challenge address issue significant research optimize optimize performance critical application summarize related critical application serverless performance optimization respectively simply narrow analysis security aspect serverless therefore analyze serverless security issue related countermeasure vulnerability address countermeasure instead exist thereafter quantitatively probability serverless attack attack attack defense attack scenario related countermeasure quantification reflect security enhancement attention defend security attack however attack analysis limited probability assumption attack related countermeasure besides empirical evaluation validation important attack analysis concludes research challenge burdensome error prone platform investigate exist vulnerability serverless compute future direction future thorough analysis kubernetes serverless compute besides analyze security issue serverless related countermeasure moreover quantitatively analyze security serverless quantification reflect security enhancement however deficiency enhancement kubernetes serverless compute future efficiently legacy function resource role attack hacker issue privileged function permission agent assign privilege function accord automatically improve function monitoring utility platform weak monitor function status application layer therefore easy efficient function monitoring framework future research challenge focus analyze challenge address earlier attack security analysis limited probability assumption empirical evaluation validation future devise quantitative logically compute probability attack countermeasure besides perform empirical evaluation validation attack related countermeasure focus perform penetration detect security flaw finally ensure countermeasure namespace encapsulates kernel global resource namespace independent isolated resource ensure resource namespaces without interfere docker hub registry service allows developer docker image built community pod collection container function highly related volume technique local file container directory enables developer modify local code dynamic update container  automatic manage multiple vms  dns server multitude environment flexibility availability HA developer usually node service prevent emergency node node abbreviation aws amazon web service ASAP autonomous adaptation platform CAS content addressable storage CI continuous integration CD continuous deployment cli command interface cni container network interface CA certificate authority drip dynamic infrastructure planner FaaS function service GCP google platform HA availability iot internet ifc information IaaS infrastructure service KS kubernetes  horizontal pod   multi provider serverless compute PP peer peer SaaS software service switch software workbench interactive critical highly adaptive application slo service objective switch interactive development environment VM virtual machine atree attack ADTree attack defense