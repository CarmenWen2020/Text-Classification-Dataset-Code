lattice cryptography mathematical basis homomorphic encryption scheme allows computation directly encrypt data homomorphic encryption enables privacy preserve application secure compute practical application suffer computational complexity homomorphic operation implementation homomorphic encryption scheme heavily efficient polynomial arithmetic multiplication polynomial polynomial theoretic transform ntt accelerates polynomial multiplication significantly therefore core arithmetic operation majority homomorphic encryption scheme implementation therefore practical homomorphic application efficient implementation ntt compute platform efficient implementation ntt inverse ntt ntt polynomial multiplication operation gpu platform demonstrate gpu implementation utilized actual accelerator generation encryption decryption operation  fan  BFV homomorphic encryption scheme implement microsoft seal homomorphic encryption library gpu heavily ntt polynomial multiplication gpu implementation improve performance BFV operation respectively tesla gpu highly optimize seal library intel cpu introduction lattice cryptography conjecture secure attack quantum computer quantum cryptography PQC mathematical basis fully homomorphic encryption FHE scheme demonstrate gentry FHE allows computation encrypt data neither decryption secret therefore enables secure processing sensitive data FHE variety application private text classification secure compute gentry breakthrough homomorphic encryption gain tremendous amount attention homomorphic encryption scheme propose literature  gentry vaikuntanathan   fan  BFV  kim kim CKKS various effort develop practical implementation source highly optimize software library seal   homomorphic encryption computation seal library developed microsoft research BFV CKKS scheme   CKKS scheme   BFV CKKS scheme although potential application FHE groundbreaking algorithmic complexity impediment efficient practical implementation thereof core arithmetic operation various FHE scheme multiplication polynomial probably consume therefore literature propose efficient implementation multiplication polynomial polynomial mathbf polynomial coefficient modulus respectively   multiplication generally utilized scheme polynomial ntt suitable ntt polynomial multiplication highly utilized lattice cryptosystems reduces mathcal computational complexity  polynomial multiplication mathcal cdot logùëõ although utilize ntt improves performance polynomial multiplication operation inefficient application therefore ntt polynomial multiplication implementation propose literature efficient practical lattice cryptosystems platform hardware architecture software implementation implementation gpus hybrid approach combine ntt  multiplication polynomial multiplication operation ntt polynomial multiplication operation perform parameter application FHE application usually parameter PQC utilizes parameter therefore efficient implementation ntt polynomial multiplication flexibility FHE PQC addition offering performance motivation literature propose efficient ntt INTT ntt polynomial multiplication implementation gpu propose implementation gpu polynomial propose implementation perform ntt INTT operation   respectively tesla gpu overhead kernel propose gpu implementation useful actual accelerator homomorphic encryption scheme proof concept propose implementation utilized implement accelerate generation encryption decryption operation BFV homomorphic encryption scheme gpu recap contribution performance efficient gpu implementation ntt INTT ntt polynomial multiplication operation propose gpu implementation polynomial  implementation gpu platform nvidia gtx nvidia gtx nvidia tesla ntt operation polynomial coefficient perform nvidia gtx nvidia gtx nvidia tesla respectively modify ntt INTT algorithm significantly efficient thread usage gpu kernel multi kernel approach perform relatively polynomial respectively kernel approach allocates gpu gpu thread polynomial kernel memory multi kernel approach multiple thread performs kernel ntt INTT operation focus introduce novel hybrid combine multi kernel approach performs polynomial hybrid employ multi kernel approach switch kernel approach ntt INTT becomes sufficiently hybrid approach achieves polynomial multi kernel approach generation encryption decryption operation BFV scheme fully implement gpu BFV implementation microsoft seal library intel cpu nvidia gtx nvidia gtx nvidia tesla generation encryption decryption operation respectively generation encryption operation BFV scheme random polynomial uniform ternary discrete gaussian distribution introduce implementation random polynomial sampler distribution gpu utilized salsa implementation pseudo random generation uniform distribution inverse cumulative standard distribution function  cuda math api implementation utilize carrier prime unlike literature instead switch ntt domain polynomial domain INTT multiplication operation ntt domain perform arbitrary operation without necessity switch polynomial domain via INTT illustrate approach performs operation multiplication polynomial architecture model accelerator infrastructure image organize notation background ntt polynomial multiplication operation summarizes prior literature introduces seal library propose gpu implementation sect concludes background notation brief description ntt INTT polynomial multiplication operation structure gpus prior literature notation mathbb consists integer ldots polynomial varvec mathbb phi polynomial reduce irreducible polynomial phi coefficient mathbb phi polynomial mathbb varvec consists polynomial coefficient mathbb varvec mathbb polynomial coefficient mathbb polynomial varvec sum cdot varvec vector mathbb varvec ldots coefficient similarly varvec coefficient polynomial varvec throughout integer polynomial regular lowercase boldface lowercase varvec respectively vector ntt domain overline varvec ntt domain representation vector varvec cdot odot integer polynomial coefficient wise vector multiplication respectively varvec cdot varvec coefficient polynomial varvec integer respectively operand integer varvec leftarrow varvec varvec  mathbf polynomial varvec sample uniformly varvec mathbf respectively lfloor rceil lceil rceil lfloor rfloor integer reduction modulo operation respectively coefficient modulus polynomial respectively theoretic transform ntt define discrete fourier transform dft mathbf efficient dft algorithm adopt ntt algorithm ntt operation transforms vector varvec another vector overline varvec define align varvec sum cdot omega pmod text ldots align ntt calculation involve constant twiddle factor omega mathbb define unity twiddle factor satisfies omega equiv pmod omega pmod forall equiv pmod similarly INTT operation almost formula ntt operation omega pmod modular inverse omega mathbb instead omega coefficient pmod mathbb align varvec frac sum cdot omega pmod text ldots align apply ntt INTT operation computational complexity therefore efficient implementation ntt operation literature construct around approach  dit  frequency  FFTs former latter fft operation utilize  tukey CT   GS butterfly structure respectively theoretic transform polynomial multiplication multiplication polynomial varvec varvec compute  polynomial multiplication polynomial multiplication perform varvec polynomial varvec reduce phi align varvec varvec varvec sum sum cdot cdot align ntt INTT operation enable efficient implementation polynomial multiplication operation convert  polynomial multiplication operation coefficient wise multiplication operation tex ntt tex INTT ntt INTT operation respectively however input polynomial zero pad polynomial reduction operation phi align varvec tex INTT tex ntt varvec odot tex ntt varvec bmod phi align polynomial mathbf equiv pmod technique negative wrap convolution utilized eliminates input polynomial reduction operation align varvec ldots odot psi psi ldots psi align align varvec ldots odot psi psi ldots psi align align varvec tex INTT tex ntt varvec odot tex ntt varvec align align varvec ldots odot psi psi ldots psi align however coefficient input output polynomial psi psi ldots psi psi psi ldots psi usually refer preprocessing processing respectively constant psi unity satisfy psi equiv pmod psi pmod forall equiv pmod merge preprocessing ntt operation employ dit ntt operation utilize CT butterfly structure input standard output reverse algorithm merge preprocessing ntt operation algorithm function performs reversal input refer operation ntt  merge INTT processing operation employ  ntt operation utilize GS butterfly input reverse output standard algorithm merge INTT processing operation algorithm refer operation INTT technique preprocessing processing operation eliminate expense butterfly structure formulates ntt polynomial multiplication align varvec tex INTT tex ntt varvec odot tex ntt varvec align tex ntt tex INTT merge ntt INTT operation respectively graphical processing gpu inner structure ntt INTT algorithm opportunity parallelization depth insight gpu organization fundamental principal significant importance understand technique algorithm suitable gpu implementation introduce subsequent advantage inherently parallelizable ntt INTT algorithm gpus consist core CPUs gpu core significantly powerful cpu core gpus plausible alternative perform overly relatively operation operation complex partition concurrently executable cpu alternative architectural overview gpu image kernel context cuda function host cpu execute device gpu kernel operation sequence kernel execute parallel important abstraction kernel grid thread illustrate hierarchically organize grid consist consist thread grid maximum actual varies gpu model organize inside grid dimensional array ID dimension grid consist organize array shade ID indicates grid grid maximum thread varies gpu model organize dimension array inside thread index access specific thread shade thread ID derive index within schedule computational refer multiprocessor SM schedule slice warp consists thread SM warp arbitrary warp scheduler SM global memory memory partition gpu accessible thread memory alternative gpu communication global memory consume therefore access substitute memory alternative data constant memory cached cannot execution operation constant memory significantly faster global memory assignment SM allows another alternative memory hierarchy memory unlike constant memory memory modify execution faster global memory accessible thread within thread cannot access memory register storage private thread thread neither thread register exception thread others register warp detail pertain memory access summarize summary memory hierarchy inside gpu relationship thread prior efficient implementation ntt ntt polynomial multiplication operation various platform gpu fpga cpu application PQC FHE literature gpus variety optimization efficient implementation  utilized accelerate intrinsically parallelizable operation moreover literature employ gpu adapt advantage parallelism multiple gpus instance performance evaluation implementation variant BFV scheme multi gpu another strategy advantage memory hierarchy gpus overall execution significantly improve utilize faster memory memory hierarchy reduce communication global memory propose gpu accelerator ntt operation utilized FHE application besides strategy optimize memory access gpus utilized warp shuffle allows thread warp others register enables faster data access global memory propose improve performance ntt eliminate recursive  algorithm  cyclic convolution along optimization non coalesce memory access focus mitigate warp divergence ntt operation utilized ntt operation  lattice quantum digital signature scheme propose gpu accelerator PQC scheme   efficient implementation ntt analyze improve performance ntt operation introduce twiddle factor generation FHE scheme  focus performance implementation proxy encryption scheme nvidia gpus parallel ntt procedure propose  homomorphic encryption library cuda gpu platform solid reference future propose gpu implementation sect  combine discrete galois transform  crt alternative approach concentrate ntt focus ntt perform comparison microsoft seal homomorphic encryption library seal homomorphic encryption library developed cryptography research microsoft research enables efficient homomorphic application variety application private information retrieval secure neural network inference seal homomorphic encryption scheme BFV CKKS implement homomorphic operation former integer latter enables homomorphic arithmetic utilize propose gpu implementation accelerate operation BFV scheme detail CKKS scheme BFV homomorphic scheme BFV homomorphic encryption scheme propose extends  construction error RLWE involves intensive polynomial arithmetic plaintext ciphertext varvec varvec respectively integer neither prime suppose varDelta lfloor rfloor chi discrete gaussian distribution leftarrow random sample uniform distribution  chi sample distribution chi generation encryption decryption operation described textbook BFV scheme generation varvec leftarrow varvec varvec leftarrow varvec varvec  chi varvec encryption varvec varvec varvec varvec varvec varvec leftarrow varvec varvec varvec  chi varvec varvec varvec cdot varDelta varvec varvec varvec varvec varvec varvec decryption varvec varvec varvec varvec varvec lfloor frac varvec varvec varvec rceil residue RNS homomorphic computation operation express logic arithmetic circuit homomorphic encryption application practical multiplicative depth circuit homomorphically evaluate private information retrieval entry multiplicative depth reasonably implement homomorphic encryption complicate homomorphic operation due increase depth circuit efficient arithmetic modulus challenge therefore residue RNS enable parallelism algorithmic modular integer arithmetic frequently utilized implementation homomorphic encryption scheme RNS coprime modulus align prod align modulus RNS arithmetic operation modulo varvec mapped operation varvec perform parallel modulus construct modulus RNS arithmetic conversion integer integer bmod modulus reconstruction integer modulus via chinese remainder theorem crt perform align sum cdot cdot pmod align pmod ldots seal library utilizes RNS implement arithmetic operation slightly textbook BFV polynomial arithmetic perform parallel modulo approach gpu implementation RNS enables leverage parallelism gpu architecture polynomial varvec varvec prod array varvec varvec ldots implementation homomorphic operation seal library RNS implementation generation encryption decryption operation seal algorithm respectively generation encryption operation seal random polynomial seal utilizes distribution ternary distribution varvec uniform distribution varvec discrete gaussian distribution chi relatively standard deviation sigma besides operation utilize polynomial arithmetic generation operation ntt coefficient wise multiplication vector encryption operation ntt INTT coefficient wise multiplication vector decryption operation ntt INTT coefficient wise multiplication vector consume operation generation encryption decryption operation seal implementation timing breakdown parameter obtain intel cpu ghz GB ram gcc version ubuntu lts seal version obtain parameter target security percentage polynomial arithmetic overall execution increase polynomial ciphertext modulus increase polynomial arithmetic constitutes execution generation encryption decryption operation respectively timing breakdown arithmetic operation generation encryption decryption operation percentage propose implementation discus propose gpu implementation optimization thereof fashion efficient modular reduction operation implementation ntt implementation optimization finally gpu implementation generation encryption decryption operation BFV scheme propose gpu implementation version version modular arithmetic modulus modulus implementation coefficient modulus refer respectively propose gpu implementation polynomial polynomial barrett reduction algorithm unsigned integer library ntt INTT polynomial multiplication operation substantial multiplication modulo considerable amount therefore lightweight efficient modular reduction algorithm essential performance implementation modular reduction algorithm chose barrett reduction barrett reduction algorithm replaces reduction operation multiplication shift subtraction operation significantly faster operation algorithm barrett reduction calculates cdot modulo approximation modulus reduce approximation becomes coefficient polynomial varvec coefficient modulus coefficient guaranteed barrett reduction algorithm return modulus algorithm precomputed define align lfloor frac rfloor align modulus barrett algorithm gpu tweak barrett reduction algorithm barrett reduction algorithm multiplies cdot algorithm integer variable computation generates integer respectively perform operation integer demand gpu resource therefore reduce integer obtain operation maximum shift operation algorithm shift operation algorithm respectively shift operation perform multiplication cdot shift shift operation perform multiplication shift modulus tweak guaranteed intermediate memory improves performance algorithm modify barrett reduction algorithm optimize gpu implementation unsigned integer cuda intrinsic integer developed highly optimize unsigned integer library unsigned integer unsigned integer naturally cuda integer significant integer significant overload arithmetic binary logic operator operator gpu computation cod computation perform gpu multiplication unsigned integer subtraction unsigned integer operation cod ptx inline assembly feature cuda achieve maximum performance ptx enables insert  code feature unavailable otherwise therefore multiplication subtraction operation ptx compile instruction indeed multiplication operation ptx slightly performance multiplication perform nvidia intrinsic function umul derivative ntt implementation gpu algorithm ntt operation perform nest loop loop unrolled ntt operation actually consists iteration butterfly operation iteration iteration ntt operation toy depict illustrates butterfly operation psi unity correspond iteration execution input array computation iteration butterfly operation iteration ntt halve iteration INTT algorithm visualize butterfly operation somewhat reverse visualization ntt operation image challenge implement ntt INTT algorithm gpu assign thread efficiently achieve utilization performance thread workload thread equivalent butterfly operation iteration array algorithm thereby elect gpu thread array algorithm thread schedule butterfly operation array algorithm thread obtains perform butterfly operation namely array correspond psi illustrates array assign thread algorithm role variable define algorithm array psi psi index psi define algorithm solid dash array psi array dash index variable iteration variable index array algorithm respectively variable array assign thread summary variable thread easily array iteration independently gpu thread assignment image iteration array assign thread variable consecutive array tex tex assign thread dash identical thread variable iteration access array psi iteration consists array index index respectively target idx variable thread compute index array thread iteration algorithm computation thread computes array previous iteration tex psi cdot tex cdot yield array thread array iteration algorithm illustrates thread schedule dimension input array gpu thread per array majority gpu technology thread per knowledge therefore thread gpu performs algorithm nevertheless handle array challenge approach partition array multiple gpu iteration ntt computation optimization memory usage kernel efficient gpu memory hierarchy significant role overall performance implementation coefficient input polynomial array array psi constantly render memory access crucial optimization utilize global memory however possibly performance utilize memory array gpu memory alternative thread critical array psi access per thereby copying memory benefit access computation ntt INTT precise instead request global memory request global memory copying memory access memory hybrid approach kernel investigate alternative kernel essentially alternative kernel approach kernel computation ntt INTT array iteration kernel multi kernel approach kernel iteration computation ntt INTT operation kernel approach advantage disadvantage array kernel approach however array experimentally gpus multi kernel approach advantageous kernel synchronization image principle kernel approach explain circular arrow operation gpu thread array alternative schedule array gpu alternative gpu concurrently however due dependency arrow synchronization mechanism gpu progress iteration otherwise assign consecutive tex gpu gpu gpu processing array however exploit limited parallelism gpu multi kernel approach benefit parallelism beyond limitation kernel approach multi kernel approach schedule gpu kernel concurrently consequently multi kernel approach perform array sufficiently kernel incurs overhead performance kernel approach array fully utilize potential parallelism due multiple kernel reduce overhead optimal develop hybrid approach multi kernel approach switch kernel approach array illustrate hybrid approach array leftmost kernel whereby operates array parallel kernel manner iteration ntt computation adopt multi kernel approach however switch kernel approach gpu iteration array kernel upper array sequentially inefficient nevertheless alternative additional kernel brings kernel overhead immediately overhead incur due sequential processing experimentally kernel overhead execution optimal switch multi kernel approach kernel approach switch INTT operation hybrid approach internals modulus image multi kernel phase hybrid approach input array access global memory instead copying faster memory due memory survive across kernel however kernel phase array memory access iteration within kernel ntt iteration perform memory memory utilization hybrid approach INTT algorithm slightly ntt merges iteration consequently kernel ntt operation switch multi kernel approach optimal switch INTT computation finally cpu gpu memory transfer operation   perform asynchronously achieve optimization optimization propose technique eliminate multiplication coefficient frac mathbb INTT operation instead output GS butterfly operation utilized INTT frac mathbb generates frac pmod frac psi pmod odd coefficient modulus namely frac perform mathbb align frac pmod cdot frac align integer expression becomes odd integer expression becomes frac shift operation optimization replaces modular multiplication operation INTT shift addition operation faster complexity complexity algorithm mathcal cdot outer loop execute inner loop execute combine propose algorithm algorithm distributes inner loop gpu thread executes parallel operation independent reduces complexity algorithm mathcal complexity multi kernel approach kernel approach utilized specific tex tex complexity kernel comparison multi kernel approach thread handle sequential iteration complexity kernel quadruple maximum sequential iteration kernel mathcal complexity hybrid approach inner loop algorithm execute parallel batch respectively constant hybrid approach mathcal complexity complexity ntt INTT algorithm identical implementation BFV scheme gpu demonstrate performance propose ntt INTT implementation practical implement generation encryption decryption operation BFV scheme gpu operation parameter psi generate cpu host computer gpu prior computation gpu parameter generation encryption decryption operation parameter gpu adopt approach refer kernel merge strategy whereby optimal kernel yield performance generation generation BFV scheme implement algorithm generation algorithm chi input generates secret polynomial public polynomial varvec generation operation randomly generate polynomial uniform ternary discrete gaussian distribution random polynomial sampler performs ntt coefficient wise multiplication operation generation random polynomial generate sequence cryptographically secure random byte convert random integer desire distribution uniform ternary discrete gaussian salsa cipher generate random byte utilize exist implementation discrete gaussian distribution consecutive byte output salsa interpret unsigned integer convert convert float define cuda strictly apply inverse cumulative standard distribution function  cuda math api random discrete gaussian distribution standard deviation seal library discrete gaussian distribution standard deviation uniform distribution mathbb consecutive byte output salsa interpret unsigned integer convert ternary distribution byte output salsa interpret unsigned integer mapped decremented finally fractional discard obtain algorithm random polynomial generation uniform distribution ntt coefficient wise multiplication operation perform iteration loop kernel merge strategy instead invoke kernel iteration loop invoke kernel handle iteration avoid overhead multiple kernel encryption encryption BFV scheme implement algorithm encryption algorithm chi plaintext polynomial varvec public polynomial varvec input generates ciphertext polynomial varvec encryption operation randomly generate polynomial ternary discrete gaussian distribution performs polynomial arithmetic mainly ntt INTT coefficient wise multiplication operation generation implementation kernel merge strategy invoke kernel generate random polynomial discrete gaussian uniform distribution kernel loop decryption decryption BFV scheme implement algorithm decryption algorithm gamma parameter secret polynomial varvec ciphertext polynomial varvec input generates plaintext polynomial varvec decryption operation utilize randomly generate polynomial performs polynomial arithmetic mainly ntt INTT coefficient wise multiplication operation addition kernel merge strategy utilized specify explicitly kernel schedule default operation execute sequentially concurrent operation multiple allows parallel implementation performance propose ntt INTT implementation obtain gpus nvidia gtx nvidia gtx nvidia tesla environment propose implementation verify data generate seal library performance seal obtain intel cpu ghz GB ram gcc version ubuntu lts seal version performance generation encryption decryption implementation BFV scheme gpu obtain nvidia tesla environment obtain performance gpu implementation  profiler utilize nvprof initialization parameter psi gpu cpu performance ntt INTT operation environment performance comparison seal evaluate individual optimization implementation obtain performance nvidia gtx gpu kernel ntt INTT operation multiple kernel ntt INTT operation kernel ntt INTT operation utilizes memory kernel ntt INTT operation utilizes warp shuffle utilized utilizes propose hybrid approach ntt INTT operation sect performance performance optimization gtx tex utilize memory improves performance ntt INTT implementation kernel respectively due limited capacity memory gpu optimization apply polynomial implementation apply warp shuffle implementation kernel improvement significant memory utilization warp shuffle optimization improves performance ntt INTT warp shuffle mechanism iteration ntt INTT operation kernel utilize memory performance multiple kernel respectively utilize multiple kernel per ntt INTT operation performance multiple kernel performance kernel without memory utilization respectively therefore explain sect combine approach utilized hybrid approach memory hybrid approach performance comparison applicable INTT operation hybrid approach obtain performance implementation ntt INTT hybrid approach gpu platform performance ntt INTT implementation generation encryption decryption operation BFV scheme implement gpu explain sect operation implement parameter seal library target various security gpu implementation generation encryption decryption utilize propose efficient ntt INTT implementation performance seal library propose gpu implementation parameter speedup gpu implementation seal library become parameter increase gpu implementation generation encryption decryption operation improve respectively seal library cpu mainly improvement percentage polynomial arithmetic increase parameter increase increase gpu platform leverage parallelism cpu platform sake simplicity improvement gpu platform nvidia gtx nvidia gtx nvidia gtx nvidia gtx generation encryption decryption operation respectively performance generation encryption decryption operation BFV scheme comparison prior plenty literature target acceleration FHE PQC scheme gpu accelerate polynomial multiplication operation implement  gpu variant  ntt algorithm performance around polynomial multiplication operation however implementation utilize RNS therefore easy implement accelerate arithmetic operation BFV scheme gpu however discrete galois transform  instead ntt gpu implementation generation encryption decryption operation BFV scheme achieves speedup average respectively tesla parameter seal library version improves performance generation encryption decryption operation BFV scheme average respectively tesla seal library version focus PQC scheme utilize namely fix therefore applicable FHE scheme comparison focus accelerate FHE scheme performance ntt INTT operation comparison ideal estimate due platform difference implementation gtx tesla timing performance implementation gpu platform outperform gtx performance tesla tesla mhz gtx mhz therefore operation gtx outperform tesla roughly tesla multiprocessor gtx operation gtx multiprocessor handle simultaneously tesla performance gtx perform parameter due frequency comparison outperforms implementation however fix prime modulus utilize prime  prime carrier modulus ntt INTT operation varvec prime enables useful efficient modular reduction operation addition subtraction unity enables convert multiplication operation twiddle factor shift operation although prime carrier modulus reduces computational complexity improves performance limitation input polynomial upper coefficient zero pad ntt polynomial multiplication ntt operation although ntt operation perform varvec prime encryption scheme constrain cdot modulus polynomial INTT operation polynomial reduction polynomial forth ntt polynomial domain employ carrier modulus restrict aforementioned limitation input polynomial apply polynomial reduction operation forth ntt polynomial domain polynomial conclusion future propose efficient gpu implementation ntt INTT operation ntt polynomial multiplication propose implementation perform ntt INTT operation respectively kernel overhead tesla gpu propose gpu implementation utilized accelerate generation encryption decryption operation BFV homomorphic encryption scheme ntt INTT operation frequently propose gpu implementation improve performance generation encryption decryption operation respectively tesla implementation seal library intel cpu propose gpu implementation useful accelerator computation demand FHE scheme utilize gpus accelerator FHE library seal promising future target accelerate homomorphic multiplication generate gpu accelerator library BFV CKKS scheme practical FHE application finally minor modification propose ntt INTT implementation accelerate PQC scheme polynomial ntt unfriendly lattice cryptosystems