stabilize distribute algorithm token distribution network graph token goal distribute token uniformly network exactly token initial configuration token network network ability token remove token network aim minimize convergence token complexity stabilize token distribution algorithm converges within asynchronous redundant unnecessary token height network novel mechanism reduce redundant token reduces redundant token without additional reduces redundant token increase convergence algorithm constant memory link register MSC  algorithm keywords token distribution stabilization constant algorithm introduction token distribution originally define peleg  seminal network token token arbitrarily distribute maximum token distribute token exactly token redefine another author token instead token goal configuration token token distribution load balance distribute token task load token distribution load balance goal maintain load evenly fault tolerant stabilize version load balance distribute arora  stabilize algorithm convergence stability convergence regardless initial distribution load fault cease environment longer load computation configuration load balance within finitely stability guarantee computation cannot shift load forever token distribution refer constraint maintain specifies computation load balance token distribution algorithm token token consume however constraint cannot maintain due token distribution fix token stabilize network designate arbitrary configuration token network exactly instead arbitrary zero token initial configuration algorithm exception constraint assume token external decrease increase token network constraint external define stabilize token distribution algorithm network performance algorithm summarize constant specifically algorithm amount memory information token constant per per link register stabilize token distribution algorithm convergence asynchronous stabilize token distribution algorithm convergence arbitrarily amount memory achieves optimal convergence despite constant redundant token informally token redundant later reverse formally computation algorithm token token redundant redundant token height network algorithm combine synchronizer algorithm combine pif propagation information feedback complexity redundant complexity redundant algorithm optimal redundant token related token distribution introduce peleg  another author define bound graph  another efficient local computation ignore another version perfect token distribution introduce termination algorithm token variation perfect token distribution maximum difference token termination algorithm constant difference depends network parameter algorithm category algorithm network binary mesh torus network token distribution network without peleg another version token distribution token compute algorithm token distribute perfectly diameter although asynchronous message passing model communication primitive typical primitive network another model dimension exchange assumption knowledge arora  stabilize load balance algorithm network arbitrary initial assignment load task algorithm guaranteed converge configuration load token distribution algorithm convergence  token  link bound preliminary network consist sub consist descendant height leaf height link register output register input register variable model computation composite atomicity model computation local variable variable output register variable input register link register define variable global configuration define link register define neighborhood consist output input register neighborhood configuration algorithm specifies variable variable link register atomic action program code defines update local variable variable output register sends receives token accord neighborhood enable execution atomic action variable token otherwise disabled daemon scheduler selects non empty enable executes atomic action enable computation halt specification formally specify version token distribution address parameter construct stabilize distribute algorithm token local memory token link register token lose gain network token fictitious external mention external sometimes denote configuration legitimate local memory contains exactly token token link register legitimate configuration stabilize meaning exists subset universal attractor computation eventually configuration computation finite eventually configuration enable movement token token despite variable switch passing token message message register predicate computable token false false token writes token flip token token flip false predicate calculate token token becomes token token becomes false token external token external token external however resp token resp external complexity evaluate token distribution algorithm metric complexity complexity token complexity asynchronous computation enable define computation prefix member executes becomes disabled define forth complexity amount memory information token per link register analysis focus redundant token intuitively redundant unnecessary configuration token local memory configuration token input register define token otherwise achieve goal token configuration computation token computation token optimal computation redundancy computation define token computation minus token optimal computation bound arbitrary algorithm composite atomicity model link register solves token distribution network theorem exist computation legitimate configuration proof assume odd configuration token zero token scheduler token scheduler token exists computation configuration achieve token distribution lemma network contains exactly configuration enable token proof computation positive non positive sends token theorem network computation contains redundant token image KB image register empty implies false token remain false although token exist writes token reverse false token reverse false procedure passing token proof assume multiple leaf construct computation neighborhood lemma specify execute lemma sends token sends token furthermore arbitrary input output register sends token token local memory later token initial token redundant sends token token token local memory later token initial token redundant redundant algorithm define simplest algorithm stabilize overview computation estimate token subtree estimate meaning token sends token estimate token sends token estimate token sends token receives token external storage eventually exactly token halt variable function structure zero token denote token link register variable token link register boolean variable communication output register variable estimate leaf estimation variable compute intuitive meaning token token neither token instead situation token token redundant simply lack information estimate function insert token deletes token return token token external token external return token passing token subsection pas token stabilize alternate algorithm passing token token execute delete reverse become execute execute copying token reverse become false token external token token external token external token algorithm stabilize token distribution algorithm complexity resp register zero resp constant convergence redundant token standard notation respectively computation estimate positive negative zero report estimate variable estimate negative sends token token estimate positive sends token token token external increase estimate negative token external decrease estimate positive correctly estimate eventually token sends token estimate algorithm computes estimate candidate estimate positive negative zero positive negative unsure respectively sends token estimate sends token estimate domain variable leaf leaf algorithm pseudo code executes input register token receives token invoke unless token passing mechanism sends token estimate negative invoke unless empty perform action sends token estimate positive report estimate decrease sends token hence invokes increase decrease token token external token pop token token token external algorithm description function argument function configuration denote function explicitly specify configuration configuration clearly understood context link register token external token constraint token remark define remark execution execution correctness evaluate redundant token convergence algorithm computation finite lemma correctness immediately theorem image KB image image KB image lemma computation finite proof fix computation define predicate predicate sends receives token finitely finitely remainder proof proposition guarantee leaf satisfies height satisfies height satisfies induction proposition implies lemma suppose sends receives token remains unchanged computation unfair daemon clearly computation sends token sends token hence sends receives token implies exists sends receives token implies lemma discussion theorem algorithm stabilize token distribution algorithm proof computation lemma guarantee configuration enable hence token token token exists register otherwise enable asymptotically tight bound redundant token recall lemma redundant token computation proof computation sends token monotonically non increase sends token scheduler decrement sends token similarly sends token redundant token lemma redundant token computation proof network consists configuration token token computation scheduler selects computation configuration enable denote prefix token increase however token token increase however token therefore redundant token computation finally analyze convergence computation satisfies predicate define within image KB image lemma lemma statement proof implies implies similarly lemma proof suffices lemma remains trivially becomes definition latter statement lemma imply hence similarly suppose lemma trivially definition lemma imply implies hence similarly lemma twice scheduler becomes disabled proof computation computation disabled definition algorithm assumption hence lemma suffices scheduler cannot token sends token assume token therefore thanks assumption similarly token lemma computation predicate elapse proof lemma proven induction lemma lemma leaf satisfies elapse non leaf satisfies elapse satisfies elapse corollary computation configuration within deviate thereafter furthermore lemma trivially definition lemma implies redundant token computation configuration lemma monotonically non increase computation configuration computation configuration define distance extra token extra token token token computation configuration configuration intuitively meaning sends token within receives token immediately sends token receives token within sends token immediately becomes definition define lemma configuration proof define therefore monotonically non increase computation configuration monotonically non increase computation moreover decrease within constant lemma lemma lemma lemma lemma lemma lemma lemma computation configuration decrease proof token sends sends assume suffices obtain proof definition trivially hence simplicity otherwise contradicts contradicts hence sends token within sends token within lemma imply lemma proof moreover implies therefore lemma computation configuration assume exists decrease proof configuration decrease sends token sends token assume contradiction sends token sends token assumption implies initial configuration therefore token token input register token otherwise token contradiction lemma computation configuration decrease proof assume however contradicts however contradicts hence implies therefore decrease lemma computation configuration decrease proof predicate induction yield lemma leaf satisfies domain excludes inductive assume assume contradiction lemma monotonically non increase suffices decrease satisfies decrease contradiction therefore decrease lemma lemma contradiction hence decrease lemma decrease lemma contradiction furthermore otherwise decrease lemma following statement implies exists therefore statement however implies within lemma contradiction lemma computation decrease proof assume assume contradiction decrease proof lemma statement decrease token token external contradiction lemma computation within proof corollary lemma lemma imply configuration within token token external exactly token additional configuration enable theorem algorithm stabilize token distribution algorithm per constant per register converges redundant token algorithm subsection algorithm reduces redundant token corollary lemma guarantee computation configuration within redundant token thereafter however token redundant token lemma algorithm simulates computation simplify version synchronizer loosely synchronizes computation integer executes procedure execute procedure lemma guarantee execute procedure configuration redundant token image KB image code algorithm variable variable simulate computation ahead increment ahead ahead enable execute procedure executes procedure increment easy algorithm satisfies hence obtain theorem image KB image pif variable simultaneously theorem algorithm stabilize token distribution algorithm constant per per register converges redundant token algorithm reduces redundant token increase convergence algorithm propagation information feedback pif scheme reduce redundant token simplify version pif pseudo code algorithm local variable variable variable computation cycle zero propagate leaf parallel verify already zero variable leaf bounce reset cycle executes procedure receives easy computation configuration cycle forever furthermore pif mechanism guarantee leaf receives receives twice therefore lemma computation configuration executes procedure hence redundant token however convergence increase consecutive computation procedure computation algorithm however slightly modify detects simulated algorithm terminate modification easily implement enable signal propagation technique theorem stabilize token distribution algorithm constant per per register converges redundant token image KB image conclusion stabilize distribute algorithm token distribution network algorithm converges asynchronous redundant token algorithm synchronizer pif scheme respectively algorithm reduces redundant token without increase convergence reduces redundant token increase convergence algorithm constant memory link register