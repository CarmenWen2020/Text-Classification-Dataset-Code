analysis quorum erasure cod data frequency writes access guarantee sequential consistency fail model atomic modify operation multiple client propose definition asymmetric quorum framework cod data explicitly exploit structural code instantiate distinct cod strategy maximum distance separable MDS code code locality mechanism synchronize stale node differential update exploit code structure propose quorum behavior analyze theoretically explore aspect viability quorum node unavailability contention resource operation quorum load complement theoretical exploration simulation quantify behavior propose mechanism overall demonstrates feasibility practicality quorum code practicable assumption achieve stringent consistency specifically sequential consistency data mutate potentially multiple modify exist data achieve without resort multiple version data keywords erasure code quorum modify sequential consistency introduction data storage fix data erasure cod apply realize storage efficient redundancy fault tolerance data durability context address issue manage mutate data propose quorum mechanism achieve consistency atomic modify operation assume fix data storage abstraction umbrella decouples actual data storage traditional file consideration directory structure access physical placement data file split across multiple fix chunk google file multiple file volume facebook haystack multiple binary  arbitrary overlie software define orchestrator determines indexed access manipulate meta information placement semantics file abstraction upper layer application storage storage substrate performance sensitive application database transactional guarantee data access modification storage persistence data reasonably stable environment failure individual component cannot avoid report annualized failure rate disk frequent duration outage individual storage component data redundant manner ensure availability durability failure traditionally redundancy achieve replication mature data management technique application diverse consistency requirement variety environment refer collection survey various facet replication management replication however  prohibitive storage  volume data despite inhibition deploy erasure code data decade erasure cod storage proliferate across data service backends azure storage facebook google redesign file  baidu atlas mention prominent principle erasure cod involves linear combination data replicate reduce storage overhead maintain fault tolerance overview cod distribute storage typical erasure code deployment reduce storage overhead volume raw data superior fault tolerance significantly overhead typical replication complex currently erasure cod predominantly static data infrequently access archive data dynamic data infrequently data limited update semantics facebook accommodates deletion  archive volume achieve overwrite correspond overview related cod mutable content frequently modify data replication temporarily replicate disentangle persistent cod storage remain facto redundancy nevertheless arbitrary manipulation mutation erasure cod data enable sophisticated update semantics atomic modify operation multiple reader writer client consistency guarantee promise extend usage erasure cod significantly wider variety application frequency moderate performance requirement motivation establish proof concept strict consistency application involve mutate data rely erasure code redundancy data networked distribute storage ups model assumption target consideration data erasure cod redundancy generally stable environment failure component nevertheless norm request infrequent multiple concurrently attempt modify data overlie application however atomic modify semantics reasonably strict sequential consistency retain consistency guarantee presence moderate failure individual storage component modular relies practicable assumption specifically implicitly rely asynchronous model proxy failure detection explicit assumption presence distribute lock service assume network primitive atomicity aim transactional semantics atomic modify operation achieve propose quorum cod data essential primitive upper layer consistency quorum data denote instance generally multiple attempt update concurrently possibility compute overall concurs unique globally sequence sequential consistency achieve however guarantee refer atomic multi reader multi writer  register literature atomic  abstraction emulate variously concurrently version posteriori consensus algorithm operation semantics serf application inadequate achieve database transactional semantics atomic modify semantics contrast achieve sequence globally ensure sequence desirable valid sequence outcome naturally operation sequence previous operation achieve stricter semantics erasure cod data propose quorum lock context replication storage multiple fault tolerance distinct mechanism ensure consistency exist designate replica primary coordinate sequence operation communicate replica alternatively quorum mechanism vote lock replica completion exclusivity operation instance replica associate lock lock lock exclusive multiple simultaneously acquire lock replica contrast lock exclusive acquire lock replica precludes lock vice versa replica lock mechanism effectively achieve consistency instance presence replication nuanced voting quorum mechanism apply quorum replicate storage research decade reference numerous variant meeting consistency performance objective exist quorum explore context data storage application mutual exclusion resource message passing abstraction audit decentralize formally replica label quorum non empty subset distinguish operation notion asymmetric quorum asymmetric quorum non empty subset respectively quorum quorum satisfy asymmetric intersection additionally quorum quorum disjoint applies organization contribution approach define investigate quorum erasure cod data leverage structural dependence data parity erasure code efficient incorporation identify suitable membership constraint quorum sequential consistency guarantee data potentially manipulate multiple client data mutation atomic modify operational semantics without native network atomic operation model correspond assumption precise recall salient erasure code relevant distribute storage contains core definition quorum quorum compute quorum capture cod data enables degrade operation reconstruct data quorum instantiate code maximum distance separable MDS code code locality mechanism propagate update efficiently exploit structural linear code detailed analyze quorum investigate along aspect likelihood quorum presence node unavailability contention resource operation specific quorum cod data unlike replication multiple independent data entangle cod load quorum summary finding theoretical investigation impact node unavailability establish expression MDS code probability compute quorum quorum parameterized storage node unavailable interpret particularly parameter practical deployment demonstrate propose quorum significantly adversarial setting confirm viability resource contention erasure cod multiple data creates entanglement parity consequently define metric benchmark behavior quorum cod data contention resource operation storage node available storage node unavailable compute quorum invoked establish expression MDS code probability service operation operation estimate operation cannot service within analytical concurrency operation involve distinct data within collection cod achievable operational environment analysis foremost validate viability quorum despite entanglement dependency quantify interference quorum compute quorum analysis environment parameter node unavailable beyond interference render operation  discus mitigation prioritize operation quorum load load define minimal load across access strategy maximal load induced access strategy standard metric evaluate quorum infer processing bottleneck establish expression load parameterized composition operation directly node versus compute respect suitably version quorum load replicate accounting cod data caters multiple data oppose replicate load data load replicate data benchmark code parameter load erasure cod others compute operation stable environment  practicality quorum cod data perspective processing bottleneck theoretical complement discrete simulation simulation explore quorum performance beyond simplify assumption theoretical workload operation prioritization operation node unavailability finding simulation echo finding analysis demonstrate neither operation pile service within upto delay environment node unavailability relative frequency writes expose already understood quorum limitation approach multiple concurrent writes distinct within collection cod feasible interestingly processing operation hinder prioritize operation reduce latency processing operation discernible adverse impact operation finding simulation mention theoretical conclusion extensive discussion related comment aim achieve various consistency semantics cod data establish gap novelty salient aspect unique address atomic modify operation cod data unique explicitly exploit structural dependency data parity realize quorum prior quorum explicitly implicitly context cod data consistency additionally exploit relation efficient disseminate impart update differential across version update instead multiple version literature achieve sequential consistency instead approach amount ephemeral storage span update propagation involve storage node ongoing assumption model erasure code erasure cod storage assume collection jointly cod generate parity compute linear function encode assume underlie alphabet coefficient chosen accordingly obtain code data retain code systematic non systematic code storage application systematic code usually prefer computation vector codeword linear code parity local depends data extreme data parity data simply replicate approach redundancy namely replication repetition code codeword linear code ham distance coefficient zero minimum ham distance codewords minimum ham distance code difference codewords codeword code linear minimum ham distance codewords coefficient therefore erasure unavailable storage node data recover data lose minimum ham distance code bound maximum distance separable MDS code MDS code storage overhead fault tolerance minimum ham distance repetition code replication trivial MDS code replication fault tolerance choice code incurs storage overhead optimal redundancy storage fault tolerance realistic operational environment apart extremely churn storage application frequent important data node failure reconstruct data parity absence node degrade efficient degrade local parity typically replication refer code code locality MDS code typically parity local detail category erasure cod strategy replication instance MDS cod code locality local reconstruction code  azure storage MDS code google  file illustrate repetition code minimum distance parity local corresponds replica code minimum distance parity local local MDS code obtain linear combination erasure tolerate minimum distance storage overhead parity local minimum distance allows linear code recover erasure alternatively error combination thereof reed solomon code widely distribute storage inherently error harness byzantine fault tolerance storage erasure cod granularity choice obtain redundancy availability fault tolerance load balance approach apply along hybrid strategy combine replication individual erasure encode obtain splitting individual multiple alternatively erasure encode across treat abstract approach creation incur overhead manage additional meta information defeat purpose choice granularity storage model popular refer cod collection moreover assume data grouped encode arbitrary manner correlation application layer logic contrarily related accordingly access modification individual data remain independent perspective consistency management layer within storage discussion storage node belong distinct encode reconciliation inconsistency across application semantics consequently overlie storage application align norm objective storage model guarantee consistency redundantly interdependent parity image KB image modular software define storage architecture propose quorum realizes consistency management layer within storage file volume management software module overlie application access data logical data file underlie redundancy consistency management mechanism abstract away likewise underlie distribute storage layer access individual data agnostic relationship replica parity relationship decouple actual orchestration operation quorum mechanism agnostic centralize generation google file decentralize amazon dynamo hybrid architecture operation consistency semantics objective atomic modify operational semantics data without hardware network service primitive inherently atomic operation however assume availability network service particularly distribute lock service availability atomic broadcast service essential approach implementation update propagation node collection cod achieve atomic modify operational semantics sequential consistency focus prevent inconsistency otherwise arise manner multiple manipulate specific data concurrently inconsistent access writes data data reconstruct inconsistent repair information parity synchronize choice grouped disentangle application dependency exist across multiple data subsection subsection maintain consistency data across cod data achieve extrinsic mechanism file application layer beyond scope likewise complex transaction involve multiple operation data orchestrate overlie application layer however utilize building propose mechanism failure model synchronicity overview assume architecture logical physical multiple component layer depict physical component storage node client application access processing data device likewise device distribute file orchestrate activity assume pool storage device multiple data logically overlie distribute operating file management belong within layer role placement bookkeeping related meta information data encode erasure cod input data generate parity subsection detail ensure physical dispersal data encode parity belonging encode data failure storage device correlate failure within approach agnostic orchestration activity particularly adoption choice file centralize architecture node generation google file decentralize amazon dynamo hybrid architecture distribute node functionality  fail failure model storage node whereby storage node fails data cannot data node node  rebuild data anti entropy mechanism participates actively storage alternatively upon failure node data node recreate node node respective erasure cod instead implication fail model storage node member encode participates data reconcile content version data overlie application access cod cod data parity available apply quorum approach guarantee consistency ensure operation conflict upper layer application access consistent data imposes constraint whenever quorum built reading data fail node cannot participate quorum anew  date content implicitly assume choice quorum node identify data parity physical identifier immaterial discussion node  node data instead assumption practical storage node undergo rebuilds handle raid however contrast traditional raid multiple cod data collocate assume data placement placement cod data independent typical data file  specific physical storage node   parlance fails therein recreate physical storage node propose quorum mechanism cod data granularity specific cod collection irrespective affected physical storage node rebuilt refer storage node data interchangeably reader attention subtle difference physical storage node cod versus usage node namely logical construct storage node contains cod collection lock  propose lock opt lock protocol atomic modify operational semantics without rely underlie atomic primitive operation distribute network atomic operation alternatively relax semantics operation quorum apply without lock particularly relaxed semantics accommodate concurrent operation multiple version related achieve non algorithm concurrent writes quorum achieve satisfy consistency guarantee equivalent respective implement distribute lock optimally ideally perfect synchronization fault detection achievable distribute lock practicable assumption asynchronous assume bound accordingly proxy failure detection instance quote redis lab description distribute lock service algorithm relies assumption synchronize across local approximately rate error  likely address assume existence distribute coordination lock service lock acknowledge imprecision heuristic performance penalty extent explore simply assume existence reliable distribute lock service refer discussion issue impact performance byzantine failure address byzantine failure pragmatic choice principle separation concern account practical reuse subsystem prefer modular architecture byzantine behavior client application layer issue disentangle storage layer within storage layer principal source byzantine fault exist software artifact bug corruption actual data storage hardware instance software identify approximately bug affected consistency presence bug however unbounded byzantine fault algorithmic storage layer unable mitigate software firmware byzantine fault address approach formal verification debug data corruption storage stack characterize data corruption checksum parity inconsistency file identity discrepancy file identity handle file data corruption checksum parity inconsistency readily handle local raid storage appliance erasure code inherent error correction capability otherwise amount meta information sophisticated variation sum hash digest utilized data corruption issue concern effective exist quorum erasure cod data cod data combine independent data generate redundancy propose definition quorum presence independent data dependent parity within collection erasure cod recall exclusive respectively lock vote assume associate node participate respectively quorum definition asymmetric quorum data encode linear code subset label data refer quorum quorum furthermore quorum construction suppose update data definition define quorum subset node comprise node node parity definition bound quorum extreme parity involve quorum replica quorum equivalent involve node desirable assume quorum contains exactly parity linear code quorum satisfies data update assume failure permit parity quorum suppose failure involve quorum exactly parity failure affect data parity lock quorum another unavailable repair code redundancy mechanism node  quorum parity participate quorum actually update update propagate parity involve quorum subsection immediate implication concurrent writes prevent simultaneously data essential modify semantics independent data cannot concurrently latter limitation propose approach inter dependency data parity ensure consistency maintain degrade compute decode concurrency bottleneck compromise consistency stringent semantics concurrency elaborate discussion issue related mechanism achieves concurrency without compromise stringency operation consistency semantics achieve challenge recognize recall propose mechanism specifically data operation infrequent moreover mechanism prevent concurrently multiple data within cod data detail deem limitation non critical weigh core novel achieve define quorum discus replication replica cod data systematic however node specific data overload excessive access data physical node data demand concurrently access node overload offline purpose redistribute load degrade access cod reconstruct compute data parity become available subset local retrieve varies reconstruct data prefer client asks directly assume correspond node quorum compute cod node overload compute quorum instead compute quorum however invoked inaccessible due conflict lock choice quorum invoked typically within consistency management layer expose overlie client application definition define quorum node compute quorum subset node comprise parity parity cod compute quorum satisfies cannot simultaneous lock due quorum mutually exclusive intersection quorum therefore update available quorum satisfies cannot simultaneous parity quorum quorum parity pigeon principle guarantee existence node intersection quorum therefore update node eventually parity comprise date mechanism subsection quorum definition definition satisfy consistency multiple cannot update simultaneously quorum parity update cannot vice versa lock cod lock parity quorum contains replica version parity node intersection yield atomic modify operational semantics concurrent writes data sequential consistency elaborate MDS code MDS code becomes code parity compute code tolerate erasure compute quorum minimizes node quorum retrieve linear equation unknown alternatively node computation easily retrieve quorum tolerate erasure data outside quorum node quorum lock indeed minimum data recovery code locality MDS code replication local parity code locality harder characterize combine local parity happens quorum tolerate erasure bound code unlike code parity local local quorum local parity involves local parity upper bound lose recover ongoing operation conclude node quorum release quorum node lock local parity recover data quorum unlocked mode emphasize multiple node become unavailable operating quorum becomes infeasible mode unavailable node within fault tolerance threshold code employ MDS code storage overhead replica failure occurs quorum contrast data parity node cod data storage overhead fault configuration operation perform fault parity node MDS code mode node fail moderately typically desire data access consideration differential parity update quorum definition definition guarantee existence node intersection node date replicate update propagate replica parity update update operation notation logical timestamps realize vector standard mechanism capture partial information distribute difference propagate node parity update parity locally correspond appropriate coefficient update erasure cod data efficiently differential understood image KB image quorum update twice subsequently interpretation reader refer web version article suppose update twice subsequently summarizes mechanism relevant information explicitly node participate quorum operation update update node data parity bold elongate dash auxiliary information parity node upper respective quorum ensure operation mutually exclusive operation necessarily operation commences hence operation establish naturally version data previous operation operation access prior version furthermore concurrent operation invariant yield atomic modify operational semantic convention operation operation node parity quorum differential update prior operation creates content synchronization issue ought update content instead stale parity stale timestamp parity involve quorum illustrate synchronization issue parity node additionally temporarily differential incorporate auxiliary information quorum involve parity node parity belongs quorum quorum node differential node node already interim differential node update discus issue node lag update accordingly reconcile local information incorporate update subsequently information regard update specifically differential similarly available parity node propagate differential parity node participate quorum node differential discard previous  node stale parity obtain eventually commutative differential reconcile stale parity node incorporate update separately reverse likewise argument update data parity node update quorum operation reconcile locally differential node intersection quorum outline practical aspect implement propose mechanism argument apply parity involve compute quorum stale parity update actual parity date associate timestamp update differential parity node assume addition encounter parity compute node parity broadcast gossip update gossip algorithm update robustly quickly highly unreliable environment deployed successfully amazon dynamo gossip gossip confine node cod collection parity update differential garbage parity node gossip timestamps member regularly actual differential member information garbage collection likewise relevant differential realize information broadcast gossip disseminate parity differential per cod collection multiple cod collection amortize communication within differential parity however temporarily separately facilitate stale parity update computational communication barely delay differential stale parity node foremost contact information node date reconstruction consequence differential temporarily effective storage overhead cod data temporarily instead efficacy update propagation subsequent garbage collection however increase data undergo recent update propagate across node data affected cod data furthermore emphasize auxiliary information optional communicate discard absence stale parity reconstruction information albeit amount coordination communication computation associate delay analysis relies presence node intersection quorum discus likelihood intersection contains node parity parity node quorum specific parity node probability consequently quorum parity node member probability parity node binomial distribution choice quorum instance simplifies suggests usually parity node quorum precisely prior quorum relevant update differential analysis account additional parity node quorum date proactive update dissemination stale parity node ample choice obtain update possibility node parity lag update lag update logical timestamp manner replicate storage however parity differential retain approach unless intermediate differential  reconstruction parity instead apply differential approach become essential node flag ineligible participate compute quorum date multiple quorum described precludes simultaneous writes update multiple simultaneously achieve foremost already lock parity node suitable quorum obtain lock data setup cannot operation simultaneously cannot obtain lock parity obtain additional lock data within cod contention operation extend notion quorum involve definition define quorum subset node comprise parity however differential update mechanism incur correspondingly volume storage differential update parity practical beyond disseminate update differential immediately operation parity outside quorum  differential node data instead stale parity recomputation stale parity cod quorum analysis understand behavior propose quorum analyze likelihood quorum presence node failure contention resource concurrently access data load quorum standard metric traditionally characterize quorum resource availability estimation probability node unavailable offline overload assume baseline node unavailability independent identical compute probability compute quorum despite unavailability individual node absence contention conflict operation explore afterwards resource contention separately quorum quorum obtain node relevant online happens probability available probability compute parity node possibly data probability compute quorum depends structural code confine analysis MDS code locality baseline code locality suitable compute quorum MDS code regime equivalent odd instead data parity probability parity online overall probability suitable quorum node compute parity remain data data unavailable parity odd suppose data remain available parity parity available suitable compute quorum probability node compute parity overall probability compute quorum quorum node available probability furthermore parity node available happens probability overall probability quorum illustrates probability compute quorum respectively probability axis function axis probability node unavailable code parameter chosen code storage overhead storage overhead twice curve distinct suggests parameter influence probability behavior ratio image KB image function probability node unavailable probability pcr pcr compute quorum probability quorum probability compute quorum remain particularly code storage overhead code plot influential factor ability quorum parity code perform code likely explain parity involve parity code choice parity sensitive node unavailability code storage overhead probability compute quorum linear code behaves quorum probability finally emphasize explore till data storage significantly  environment effective magnitude instance annual disk failure rate amount disk report google report server average crashed twice annually accounting failure rate amount server failure daily statistic emphasize fault tolerant storage indicator environment typically operates instance annual server failure rate mention envelope estimate daily failure rate individual server infer analysis span operation overall implication observation extremely  capture resilience simplify assumption independence failure massive correlate failure resource contention estimation estimate contention resource quorum cod data determines delay operation analysis meaningful quorum replicate data specific data constraint atomic modify operation operation replicate distinct data inter dependency node available construction operation concurrent operation involve within cod collection feasible interested contention quorum baseline decouple analysis node unavailability issue tractable analysis simplify assumption propose mechanism function asynchronous setup discrete model implication synchronous simplification described solely purpose tractable resource contention analysis consequently analysis insight primarily qualitative indicative manner operation correspond quorum operation involve uniformly identically data operation quorum construction operation already multiple writes contend resource service lock individual data acquire individual lock data normal directly data operation acquire lock parity quorum without interference request contention data later simulation realistic setting relax assumption pending operation contend resource future operation multiple operation contend resource operation prioritize simulate scenario unavailable storage node assumption operation operation contend resource respective quorum lock already acquire lock attempt random variable likelihood probability prior operation data attempt probability none probability suitable lock acquire random operation presence operation uniformly randomly compute sum lock obtain lock request probability lock obtain probability none lock data yield explicit summation compute geometric sequence likewise operation encounter conflict probability  operation quorum otherwise encounter conflict conflict operation service conflict operation obtain lock operation already obtain lock contention happens operation data operation happens probability probability sum explicit summation compute arithmetic sequence probability service operation function operation overall operation acquire lock operation obtain lock unless operation prioritize consequently operation data operation contention nevertheless demand twice likelihood service simulation subsequently percentile operation service within delay workload node available congruent assumption inference analysis refer detail image KB image probability lock acquire axis request conflict operation request delay service operation standard deviation significant digit percentile simulation operation service inject simulator delay operation remain unserviced till correspond multiple operation inject per mechanism handle operation per statistic operation meaningful   ops  dev  dev plot unserviced operation function plot exhibit dynamic oppose influence operation likely cannot service concerned data lock operation likely operation already reserve lock data item preempt lock hence operation reinforce others obtain lock influence  behavior cannot service conflict unserviced flattens report simulation percentile operation service none delay across variety workload operation prioritize II node unavailable compute assume storage node available operation lock correspond data contend parity writes concurrently within cod data involve distinct however storage node unavailable compute involve parity node compute quorum situation concurrent operation desirable quorum mechanism ensures mutual exclusivity discus contention resource operation operation prioritize storage node unavailable probability probability operation compute simply probability node data unavailable probability none precede operation compute accordingly probability compute trigger probability quorum possibility compute quorum trigger ignore node availability ability obtain quorum otherwise already earlier operation per operation expectation summation compute summation  constant  geometric sequence probability quorum contention resource potential compute operation plot choice naturally frequent operation likely storage node unavailable likely trigger compute contention resource quorum crucially probability collapse sharply increase recall discussion stable environment probability quorum due compute operation adequately mitigation inadvertent situation invoke compute implement application layer schedule mechanism fairer prioritize access resource operation image KB image probability  quorum contention operation compute correspond storage node unavailable load access strategy defines probability access quorum quorum contains compute quorum load access strategy node load induced access strategy maximal load induced load quorum minimal access probability busiest node quorum quality load busiest node heavily access available task load desirable access strategy ought chosen accordingly load quorum minimum load across strategy express load minimization primal linear program optimization vector probability quorum constraint plus equality without counting variable positivity dual constraint variable variable unconstrained correspond primal equality weak duality theorem guarantee feasible primal feasible dual objective function dual evaluate bound objective function primal evaluate vector feasible compute indeed minimal cardinality quorum bound becomes compute quorum compute hence symmetric quorum data access data replication load comparison cod collection caters data accordingly compute load replication load load plot load propose quorum code continuous strictly correspond dot storage overhead code respectively propose quorum identify code storage overhead respectively code code observation load increase decrease behavior decrease service directly node becomes meaning compute invoked load depends bound numerator depends function denominator depends parity code storage overhead ratio negative bound finally regime suggests service access storage node regime typical stable environment load quorum code replicate image KB image comparison load propose quorum continuous minimum load symmetric quorum dot code code load axis function service directly access node axis simulation discrete simulator implement model lock quorum access data collection cod data fix random operation per possibility node unavailable parameterized probability possibility prioritize operation within discrete contend lock operation operation remain unserviced addition newly operation simulator realistic aspect ignore earlier theoretical analysis simulator arbitrary code parameter report code storage overhead overhead update differential account fix operation precisely furthermore operation writes previous service unserviced operation normalize operation generate per simulation operation generate per report normalize unserviced writes image KB image operation per operation random operation pending priority operation normalize unserviced writes report   conduct prioritization operation scenario without node unavailability node unavailable probability recall discussion data environment stable extremely adversarial environment chosen stress propose mechanism latter scenario operation service node unavailable addition operation conflict resource fluctuation plot operation service service pile elaborate delay service operation report particularly operation rate operation per operation per conflict absolute unserviced operation per highlight benefit service operation concurrently presence operation within cod data unserviced operation node available analysis report foremost analysis allows compute simulation instance random variable occurrence spike within actual instantiation random variable magnitude predict almost twice predict analysis identify operation per non zero physically namely unserviced analytically predict unserviced quantization simulation unserviced operation increase contention simplistic theoretical analysis contrast individual isolation accordingly considers fix operation understand dependency within static ignores dynamic operation prioritize priority writes discernible adverse impact service operation infer maximum unserviced operation report statistic delay service operation moreover node unavailable operation service immediately pending operation lack considerable adverse impact operation highlight salient feature strength propose mechanism readily explain harness insight drawn prior analysis operation priority hinder operation data average operation operation concurrently  without prioritize writes operation operation acquire lock net impact prioritize writes operation bound numerator probability  service anyway refer analysis report yield marginal impact node unavailable operation service massive pile unserviced operation reduction caveat magnitude reduction within margin artifact randomize consistently reduction percentile delay processing operation report simulation report report standard deviation percentile statistic delay operation service overall consistent insight drawn simulation imply theoretical analysis  aggregate pile operation moreover individual operation linger scenario operation operation operation pile consequence constraint propose mechanism operation within collection data explore mention adverse scenario operation per chosen random assume report operation operation probability operation probability probabilistically multiple operation inset image operation per multiple request generate per service per mechanism priority unserviced operation pile operation per additionally node occasionally unavailable probability accentuate however operation adversely affected fare arguably actually operation per image KB image operation composition randomly probability operation inset actual distribution operation generate per pending operation priority normalize unserviced writes report   discus related perspective novelty strength exist literature related research cod distribute storage predominantly dominate repair erasure code maintenance efficiently proactive repair lazy repair failure accumulate multiple repair MDS code survey topic repairability erasure cod data relevant research realm manage mutable data erasure cod grouped category efficiency propagate compute update storage multiple version data consistency update propagation computation efficiency achieve efficient update exploit linear code difference version data update parity principle however contrast prior disseminate update effort manner demonstrate quorum mechanism enforce update stale node storage multiple version data another considers archive chronological version data focus consistency  establish instead exploit redundancy across version data reduce storage overhead sparse sample technique information theoretic optimization apply multi versioned data storage efficient manner consistency relevant related pertain mechanism guarantee consistency mutate data erasure cod characterize across multiple aspect prominent operation granularity cod data manage individual data respectively decode encode extent concurrency non associate consistency semantics synchronicity fault fail byzantine propose mechanism resilience mechanism relies centralize primary distribute identifies version multiple previous version summary prominent related pertinent aspect overload storage foremost distinguish behavior storage server passive versus active passive server perform storage function return data return client possibly establish secure communication channel active client multiple task communicate consensus algorithm propagate data complex computation cryptographic computation data validation algorithm former constraint naturally applicable wider setting contrast latter enables richer functionality leverage active storage typical environment particularly data exist distinguish version replace version individual version separately consistency rely temporary buffer others propose mechanism eventual garbage collection highlight within storage dimension aside erasure cod deployed storage multiple version manage consistency defeat principal purpose deploy erasure code unless upper layer application chronological snapshot previous subsection code leverage redundancy across version storage efficient situation prominent related consistency refers consistency guarantee achieve synch refers synchronicity model failure refers failure model refers operation semantics MR refers multiple reader SR MW refers multiple writer rmw refers causally dependent atomic modify semantics storage refers storage server active passive participant role consistency mechanism data replaces data separately version indicates eventual garbage collection mechanism propose buffer indicates relatively version retain ref    QOC      update prior difference till propagation completion     update reconciliation background differential buffer sequential    version buffer algorithm variant distribute difference update unspecified regular    leader election   version primary replicate cache consistency erasure cod layer durability eventual    environment    static node  version extrinsic data structure data corruption detection version timestamp   focus mitigation byzantine client improve non skip timestamps operation consistency semantics exist multi reader multi writer atomic register abstraction multi reader writer limited multiple writer priori allocation non intersect lease moreover scenario operation data approach difference efficient recomputation parity instead encode data necessarily involve reading previous difference data within collection cod  impart parity computation exploit concurrency operation across data weaker regular semantics consistency ensure overwritten another return concurrent multiple concurrent writes return writes previously fail achieve atomic modify semantics approach additional alternate variation explore server data node coordinate operation multiple version data presence concurrent operation variation multiple version achieve sequential consistency guarantee posteriori impose global version achieve atomic modify semantics approach parity inconsistent consistency guarantee apply degrade compute storage node data unavailable contrast approach approach discus detail achieve sequential consistency likewise multiple version data define global version replace content allows non algorithm however necessarily compromise modify semantics chronological relationship wise version sibling prior version treat sequence version contrast knowledge multiple writer multiple reader moreover atomic modify operational semantics without rely underlie hardware network primitive furthermore overwrite content instead version data instead  delta till gossiped across storage node achieve atomic modify operational semantics ensure concurrent writes quorum node incorporate version operation obtain stale data layer maintain data client interact node sequence operation enforce sequential consistency coordinate erasure cod redundancy leader cache follower cod explore distinct define architecture paxos coordination node employ leader lease dynamically discussion consistency somewhat obfuscate absence failure approach achieve sequential consistency baseline achieve regular semantics protocol propose DepSky focus multi storage relies various version data aim consistency regular semantics eventual consistency writer multiple reader ups dependent behavior participate likewise  considers data across data version data cod granularity individual data instance maintain version unless explicitly delete approach distinct version update thrust manage logical version identify version impose serialization heuristic reduce dependence version hiding operation technique particularly unsuitable modify operation garbage version lazily failure synchronicity model majority assume fail model client server likewise practicable variation asynchronous model loosely synchronize timeout mechanism deployed implicitly rely upper limit category exception strictly asynchronous model stringency asynchronous model allows elegant theoretical analysis explicit bound safety algorithm analysis rely response actually obtain progress practical implementation equivalent implication former stringent asynchronous model relies abort operation mitigation byzantine client byzantine storage server resilience byzantine behavior indeed principal emphasis novelty complement treatment client byzantine behavior limited byzantine behavior address emphasis cryptographic technique ensure version generate meaningful manner guarantee non skip timestamps hash stamp thwart byzantine storage server extrinsically meta information hash digest utilized technique propose complementary focus principle modularity decouple overlie application client client behavior scope readily augment quorum redundancy erasure cod data quorum explicitly implicitly related however approach legacy replication redundancy focus algorithm traditionally replication consequently quorum algorithm significantly considers fail model quorum approach mitigate byzantine failure quorum parameterized explicitly specify contrast account structural dependency erasure cod systematic data treat mutually independent operation granularity data parity dependent multiple data effective quorum involve node parity node specific data node operation assume MDS code refer definition detail storage overhead code translates particularly quorum data node available quorum furthermore approach explicitly exploit structural code allows accommodate non MDS local reconstruction code contrast guarantee quorum remain untested likely render invalid non MDS code highlight qualitative difference underlie philosophy across related alone strongly entangle specific multi data across multiple data layer data environment emphasis address niche issue ensure non skip timestamps paxos leader election approach suitable building scratch modular separation concern organic integration exist technique modular philosophy address specific niche namely achieve sequential consistency atomic modify operation erasure cod data quorum efficient differential update management mechanism explicitly exploit structural dependency data parity conclude remark motivation proof concept demonstrate quorum erasure cod data account salient structural code relatively stringent sequential consistency atomic modify operational semantics enable richer wider variety database transactional application data networked distribute storage deploy erasure code data reliability availability propose quorum customize erasure code maximum distance separable MDS local reconstruction code  rely practicable assumption distribute lock service without network layer atomic primitive atomic modify operation explore theoretical involve analysis availability resource contention quorum load parameterized expression numerical via discrete simulator latter allows exploration quorum performance workload prioritization operation node unavailability  exploration behavior propose quorum approach strength limitation particularly demonstrate relatively stable environment fault nevertheless typical data workload characteristic namely frequency operation attempt concurrent access propose mechanism viable enforce stringent atomic modify operation semantics correspondingly sequential consistency cod data extensive survey related establish novelty quorum scheme explicitly structural code involves quorum relatively prior addition exploit efficient propagate impart update differential atomic modify operation another salient novelty approach operation guarantee sequential consistency prior version instead temporarily update differential update propagate storage node multiple concurrent writes data within collection cod scheme  prevents multiple concurrently weigh strength target workload data update frequency critical nevertheless concurrency without compromise operational consistency semantics meanwhile important practical wider application specify stringent requirement cod data