memory graph processing usually efficient cluster effectiveness program runtime however limited memory capacity machine graph  applicability hence imperative reduce memory footprint index compression promise propose CIC pim lightweight encode  index compression reduce memory footprint runtime graph algorithm CIC pim aim significant random access cache efficiency exploit ubiquitous sparseness feature graph index structure chunk appropriate compress chunk lightweight fix byte align encode CIC pim compression fold graph data memory speedup memory processing unattainable previously previous keywords graph processing parallel processing index compression memory introduction graph important data structure conveniently model scenario social network web network etc increase graph graph processing attract considerable research subgraph vertex pairwise important concept graph structure analysis counting TC obtains graph fundamental graph processing compute important graph metric cluster coefficient transitivity ratio widely application graph algorithm bfs pagerank vertex access however TC algorithm unique vertex usually access graph TC algorithm usually processing tight couple graph graph processing memory machine data memory memory graph processing usually efficient cluster perspective efficiency program commodity server equip GBs TBs memory core enable efficiently graph billion memory allows twitter graph server combination graph limited memory capacity server  applicability memory graph processing rapid growth graph relatively growth memory capacity exacerbate widen gap compute cpu bandwidth memory memory grows core integrate cpu therefore trading spare compute cpu memory reduce data compression reasonable aforementioned increasingly reasonable gap become wider knowledge prior address index compression popular graph representation csr compress sparse detailed graph processing scenario potentially important opportunity improve memory graph processing exist graph compression scheme sequential setting suitable memory processing compress specific graph representation limited graph algorithm aim accelerator FPGAs CPUs gain reasonable graph specific ligra memory graph processing compress csr graph efficiently graph algorithm nevertheless ligra TC algorithm compress adjacency adjlist leaf index data uncompressed detailed evaluation index data compress due around percentage detailed mainly compress index structure csr graph propose chunk index compression scheme  index compression parallel memory graph processing CIC pim detailed CIC pim exploit ubiquitous sparseness feature graph index structure chunk appropriate compress chunk novel lightweight fix byte align encode evaluation CIC pim achieves saving index data entire graph improve approach CIC pim compression graph fold ratio uncompressed graph CIC pim compress graph uncompressed data memory speedup memory processing unattainable previously CIC pim advantage stem unique compression friendliness chunk random access cache efficient compress index structure lightweight decode routine contribution mainly compress index structure graph scheme CIC pim achieves significant saving improve conduct depth analysis demonstrate efficacy technique CIC pim perform extensive evaluation driven graph evaluate efficacy CIC pim notable improvement approach organize background information motivates CIC pim scheme related issue described analyzes experimental exist related review finally concludes remark future notation concept notation   counting counting algorithm graph  vertex access contrast TC par  vertex partially compress  graph adjacency compress index data uncompressed ligra compress graph par fully compress  graph adjacency index data compress CIC pim compress graph par adjlist  array  vertex par offset  array offset adjlist array  vertex  array vertex index data  array offset array par  efficient heuristic almost TC algorithm orient  TC algorithm graph orientation execute unoriented  contrast orient graph undirected graph graph algorithm  memory TC algorithm uncompressed graph par  propose MTC algorithm compress graph background motivation briefly introduce widely csr representation graph sparse matrix efficient heuristic widely TC algorithm vByte encode foundation observation motivate reference frequently notation concept csr representation compress graph compress sparse csr widely representation graph sparse matrix due memory requirement simplicity efficiency toy graph csr csr compress graph addition offset array compress adjlist array array introduce cannot obtain offset array due compression adjlist array variable encode detailed specifically uncertainty codeword variable encode longer calculate offset array array collectively index data uncompressed ligra graph compress adjlist array uncompressed index data define partially compress ligra compress graph adjlist array index data compress define fully compress CIC pim compress image KB image undirected orient graph csr representation undirected graph reciprocal utilize symmetric feature undirected graph vertex csr  vertex merge adjlist array adjlist sort ascend offset adjlist array adjlist vertex offset array additional slot contains convenience program graph asymmetric feature vertex another csr structure orient graph significantly unoriented graph undirected graph TC algorithm orientation heuristic almost TC algorithm leverage efficient orientation heuristic vertex define vertex ID reciprocal undirected graph replace direction vertex orient graph undirected graph csr accordingly undirected graph collectively unoriented graph ligra graph algorithm hence adjlist array orient graph usually significantly unoriented graph undirected graph index data unchanged vertex therefore orient graph usually contains proportion index data unoriented graph TC algorithm orient graph faster unoriented graph speedup mainly stem reduce complexity memory TC algorithm leverage orientation heuristic MTC multicore counting understandability simplify MTC propose elaborate MTC modify compress graph variable byte align encode scheme compress adjlist array CIC pim variant standard variable byte align encode standard vByte compress non negative integer standard vByte remove zero codeword standard vByte consists variable byte align physical byte boundary access graph compression integer compress negative standard vByte modify encode negative integer significant byte codeword encode modify scheme vByte ligra vByte achieves compromise runtime scheme CIC pim vByte borrow compress adjlist array delta difference consecutive adjlist calculate adjlist delta vertex calculate maybe negative delta encode vByte delta standard vByte due byte align feature encode decode routine vByte decode routine graph algorithm incurs limited runtime overhead image KB image encode vByte vByte remove zero code standard vByte encode non negative integer chunk code encode correspond byte codeword significant shade byte byte codeword vByte significant dot byte codeword positive byte codeword contains chunk code observation motivation ligra memory graph processing compress graph popular csr representation graph algorithm efficiently however ligra TC algorithm compress adjlist array furthermore partially compress graph ligra percentage index data average considerable proportion compress index data orient graph TC algorithm contains portion index data unoriented graph ligra evaluation confirm prediction percentage index data partially compress orient graph around sparse graph average raw data omit clearly suggests compress index data graph usually sparse average extent average statistic graph snap popular graph repository average graph graph average moreover graph graph highly skewed distribution specifically graph usually vertex vast majority vertex vertex sparseness feature index structure offset array array chunk consecutive vertex maximum chunk vertex chunk offset reference calculate delta offset reference maximum offset delta chunk therefore offset delta chunk potentially encode fix byte align codewords byte detailed assume chunk contains vertex maximum chunk chunk byte offset delta byte graph graph however ubiquitous sparseness feature graph aforementioned argument smallness offset delta chunk graph  non graph considerable proportion index data motivates index encode scheme suitable memory graph processing index structure chunk smallness maximum offset delta chunk inspires propose scheme CIC pim implementation CIC pim compress graph CIC pim compress adjlist array vByte compress index structure obtains fully compress graph processing fully compress graph decode whenever offset vertex decode routine CIC pim offset decode decode routine vByte obtain adjlist vertex compress index structure critical memory graph processing CIC pim achieve goal simultaneously reasonable random access cache efficient compress structure lightweight decode routine random access access index random achieve goal adopt technique considerable via chunk index structure index structure chunk vertex offset delta chunk mostly encode byte ensures considerable random access via fix byte align encode offset delta chunk encode byte align codewords fix byte align encode fix feature random access detailed fix encode rarely adopt usually however due compression  chunk CIC pim achieves reasonable furthermore byte align feature contributes decode routine cache efficiency via array structure memory layout AOS AOS memory layout detailed cache efficiency codewords offset delta interlaced compress index structure ensures codewords offset delta vertex consecutive memory reside cache probability offset vertex usually obtain successively AOS layout effectively improve cache efficiency improvement detailed due careful CIC pim implement lightweight decode routine without mispredictions obtain offset detailed therefore CIC pim achieves goal combine technique image KB image CIC pim encode chunk index data depict compression index data offset adjlist array previously compress compress adjlist array offset subscript compress adjlist array depiction description assume offset integer array however actually offset interlaced codewords implementation AOS layout cache efficiency offset delta compress interlaced compress index data array metadata chunk uncompressed access array structure AOS chunk index array implementation implementation CIC pim compression index data assume adjlist array compress vByte advance depiction description assume offset separately integer array however actually offset interlaced implementation AOS layout cache efficiency offset delta chunk calculate compression chunk integer array compress index structure adjlist array separately byte array compress index data array compress adjlist array metadata chunk index structure chunk index array implement array structure AOS layout instead array cache efficiency usually access successively metadata chunk reference offset offset index offset delta codeword codeword reference offset subscript compress adjlist array index subscript compress index data array avoid mixed metadata uncompressed access metadata relative index data chunk contains vertex workflow chunk workflow index compression detailed depiction chunk assume vertex ID chunk calculate chunk ID chunk dedicate chunk unnecessary compress chunk index data encode routine CIC pim operates index  array idx cnk idx array scan obtain maximum codeword maximum byte hence chunk encode byte codeword  cnk idx array codeword  array byte correspond offset reference offset uncompressed cnk idx array offset reference offset ref oft cnk idx array offset scan delta difference reference offset calculate delta maximum determines codeword delta maximum encode byte offset delta codeword  cnk idx array codewords offset delta remain codewords interlaced  array sequentially AOS layout decode routine   routine CIC pim obtain offset lightweight bitwise operation byte align data extra data decode due random access  decode precede data exist scheme cannot random access decode precede data statement  predictable statement evaluate advance mispredictions graph algorithm fully compress graph whenever adjlist vertex decode  advance decode offset offset decode routine vByte decode adjlist image KB image   routine CIC pim obtain offset vertex ID chunk chunk calculate chunk metadata chunk index structure cnk idx array vertex chunk offset reference offset cnk idx array without compression directly compress  array decode vertex chunk offset delta vertex variable update skip vertex address index data calculate codeword offset delta finally offset delta decode successively analysis effectiveness AOS conclusion contrast layout soa structure array AOS layout decrease cache rate index data access nearly around gain speedup index data CIC pim memory layout exist soa usually efficient AOS parallel processing however AOS efficient graph processing simplify discussion assume cache memory corresponds cache usually dozen KBs cache cache cache cache memory uniformly ram omit detail hardware discussion memory computer data memory byte cpu data cache met cpu data memory simultaneously data chunk consecutive memory access load cache future chunk cache usually contains byte image KB image AOS soa memory layout index data offset CIC pim AOS layout adopt data structure cache efficiency index data vertex offset usually access randomly offset usually access successively AOS layout offset vertex reside cache probability assume offset vertex byte compression cache contains byte probability detailed offset vertex access cache offset load cache simultaneously cache probability ram access avoid probability soa layout offset vertex cannot reside cache cannot advantage  access feature memory index data graph usually cache usually MBs dozen KBs data index data reside cache access index data usually random data cannot correctly prefetched cache rate CMR access cache nearly soa layout offset vertex reside cache CMR access nearly AOS layout offset vertex reside cache probability hence CMR slightly CMR access offset nearly average AOS layout index data achieves average speedup soa raw data omit access index data consist relatively portion data access speedup relatively image KB image AOS layout probability offset vertex reside cache calculate frame byte memory assume offset vertex byte totally byte regard offset cache byte resides cache completely reside cache probability offset reside cache index data conclusion CIC pim index data simplify analysis assume chunk contains offset vertex implementation vertex IDs offset byte integer isolated vertex graph actually CIC pim graph isolated vertex graph graph analyze index data graph discussion non graph distribution vertex probability skewness exponent typical probability density function constant probability density function probability probability chunk contains probability probability chunk contains negligible byte compress vertex corresponds chunk corresponds chunk aforementioned analysis assume chunk contains codewords byte encode offset delta assumption  byte codeword average chunk offset delta byte encode recall vertex due negligible probability byte compress offset delta vertex corresponds chunk corresponds chunk maximum offset delta chunk probability byte encode compress index data vertex due introduction metadata chunk around loss hence craft model predict CIC pim entire graph related variable average vertex skewness exponent chunk however qualitatively analyze CIC pim graph relatively average vByte achieve reasonable saving graph average saving vByte due considerable proportion index data nonetheless reasonable CIC pim index data CIC pim entire graph reasonable implementation TC algorithm memory TC algorithm MTC mention modify partially fully compress graph algorithm CMTC orientation execute preprocessing MTC implement orientation execute sample approximate counting however focus counting orientation perform orient graph orientation preprocessing implementation ligra TC algorithm consideration cannot utilize orientation heuristic hence implement ligra hereafter TC TC algorithm MTC CMTC brevity image KB image CMTC modify MTC algorithm partially fully compress graph fully compress graph  advance decode offset whenever adjlist vertex decode intersection compute  vertex decode   decode routine vByte standard vByte respectively optimization introduce array avoid repetitive decode adjlist specifically adjlist intersect adjlist adjlist decode actually adjlist intersect  remain adjlist directly obtain implementation graph algorithm although inspire TC related issue CIC pim similarly applicable graph algorithm bfs pagerank sparse matrix vector multiplication spmv radius estimation radius component CC demonstrate capability implement algorithm uncompressed graph naively modify obtain implementation partially fully compress graph hereafter graph algorithm algorithm implementation compress graph brevity evaluation discussion evaluation setting server equip xeon CPUs GB memory OS ubuntu swap disabled obtain memory program cod scratch parallelize openmp compile option program default thread openmp twice physical core scalability evaluation average processing relatively graph hence notably average speedup percentage remain constant conduct evaluation twice datasets preprocessing graph evaluation  slj twr social network  web graph graph graph increase diversity datasets non graph distribution osm europe nlp related optimization linearize karush kuhn tucker 3D grid generate ligra dataset information dataset vertex    slj osm 3G nlp 9G 6G twr 3G 8G  3G  orient uncompressed storage orient graph confident obtain another processing TC algorithm raw graph uncompressed orient graph graph algorithm raw graph uncompressed unoriented graph undirected obtain compress graph uncompressed graph partially fully compress parallelize compression due lightweight CIC pim compression obtain server runtimes amortize across graph algorithm raw graph undirected graph specific application scenario evaluation graph twr undirected ligra compression   pim  slj osm nlp twr  compression external storage sas hdd bottleneck explains fully compress obtain partially ligra compress graph hence graph compress data memory hence ligra partially compress metric metric evaluate efficacy speedup approach index data entire graph multithreaded scalability speedup speedup TC uncompressed graph fold ram capacity GB GB memory error MTC CMTC processing ligra partially compress graph GB graph ram capacity swap disabled memory error arises fully compress GB CMTC graph data memory memory processing graph data memory uncompressed MTC uncompressed graph speedup percentage define CMTC CIC pim fully compress graph average MTC speedup percentage CMTC ligra partially compress graph average index compression CIC pim achieves speedup moderate speedup twofold due careful CIC pim lightweight decode routine incurs limited compute overhead overhead mostly offset spare compute significantly reduce index data mitigates memory contributes speedup therefore generally speedup positively correlate moreover ratio compress graph cache capacity structure characteristic graph important factor runtime  bfs pagerank spmv radius CC  CIC  CIC  CIC  CIC  CIC  CIC pim  slj osm nlp twr   algorithm leftmost MTC ligra contains runtimes algorithm uncompressed graph ligra contains runtimes algorithm partially ligra compress graph rightmost CIC pim contains runtimes algorithm fully CIC pim compress graph generally CIC pim reduces data processing due careful memory processing unattainable previously algorithm ligra neither orientation TC algorithm  memory speedup graph algorithm discussion TC graph data memory uncompressed algorithm uncompressed graph ligra average speedup percentage bfs pagerank spmv radius CC CIC pim fully compress graph respectively algorithm uncompressed graph average speedup percentage ligra partially compress graph correspondingly careful CIC pim alleviate memory due index compression speedup achieve algorithm various graph algorithm operation adjlist vertex traverse compute significant difference speedup algorithm specifically radius average speedup relatively pagerank speedup relatively remarkable bfs spmv CC speedup moderate respectively runtime decomposition decode spent decode compute processing CIC pim compress graph spent code decode compute negligible percentage decode average specifically TC bfs pagerank spmv radius CC percentage respectively pagerank spmv algorithm compute decode adjacency vertex relatively mispredictions compute latter hence percentage difference algorithm insignificant moreover percentage difference graph insignificant index data index data TC orient graph TC index data saving index saving average noticeable mainly smallness maximum offset delta chunk index saving usually achieve graph  graph offset byte integer portion zero remove however nlp exception index consecutive vertex become sink vertex orientation compress index chunk sink vertex zero recall csr orient graph offset delta chunk sink vertex zero decode percentage   slj osm nlp twr  storage  graph algorithm ligra CIC  CIC   slj osm nlp twr  relative storage uncompressed graph CIC pim averagely achieves saving entire graph index data around technique sequential graph processing CIC pim relatively application CIC pim critical memory graph processing compress graph aggressively without processing loss negative increase storage saving CIC pim index data index data graph algorithm unoriented graph graph algorithm index data saving average index saving smallness maximum offset delta chunk TC average index data slight increase mainly stem orientation firstly replaces reciprocal reduces average increase sparseness secondly redirects vertex vertex alleviates skewness distribution operation orientation contribute smallness maximum offset delta chunk hence index data index data saving achieve graph due representation offset byte integer nlp longer exception graph algorithm unoriented graph explain index data saving relatively graph offset byte integer  twr around non graph osm osm vertex graph dozen chunk encode byte offset delta chunk encode byte hence due introduction metadata chunk around loss hence another non graph vertex discussion clearly  relatively graph  slj twr vast majority vertex however existence vertex loss percent analysis  index data saving relatively graph around entire graph saving entire graph storage peak memory usage due CIC pim compression former entire graph TC saving compress orient graph TC additional saving due index compression average difference marked saving reasonable compression efficacy CIC pim considerable proportion index data graph proportion index data graph average osm additional saving achieve uncompressed graph saving CIC pim fully compress graph average significant saving achieve compression efficacy CIC pim index data adjlist array saving usually achieve graph vertex dense graph graph average former latter twr  graph vertex vertex IDs offset byte integer portion zero remove dense graph adjlist vertex tends averagely integer scatter vertex delta consecutive integer adjlist tend byte encode delta nlp gain vertex IDs adjlist vertex sequential integer delta consecutive integer byte encode ligra partially compress osm stem average increase introduction array offset gain compression adjlist array entire graph graph algorithm saving compress unoriented graph graph algorithm fifth sixth additional saving due index compression average difference marked saving stem reasonable compression efficacy CIC pim considerable proportion index data percentage TC proportion index data unoriented graph orient graph TC uncompressed graph saving CIC pim fully compress graph average sixth TC saving usually achieve graph vertex dense graph nlp exception image KB image multithreaded scalability CMTC CIC pim fully compress graph MTC uncompressed graph speedup normalize thread CMTC scalability MTC graph scalability improvement significant average graph osm nlp exception average scalability improvement significant scalability evaluate multithreaded scalability CIC pim speedup CMTC fully compress graph MTC uncompressed graph thread varies multiple CMTC scalability MTC graph scalability improvement significant average graph osm however nlp exception average scalability improvement significant generally scalability CIC pim mainly alleviate memory due reduce data traverse adjlist vertex access usually random subsequent access sequential processing graph  graph average portion random access graph average hence effective memory bandwidth processing graph average memory  processing graph average osm sensitive data gain significant scalability improvement due CIC pim compression nlp exceptional structure feature matrix representation nlp nearly diagonal matrix processing graph thread thread increase beyond memory bandwidth quickly saturate processing decrease explains scalability MTC nlp nlp contains consecutive vertex zero vertex relatively hence processing portion random memory access effective memory bandwidth processing graph compress thread limited compute core effective memory bandwidth cpu become bottleneck MTC processing uncompressed graph thread effective memory bandwidth processing CMTC processing fully compress graph thread computation decode runtime increase significantly due limited compute core contrast thread memory bottleneck MTC CMTC processing comparable thread increase speedup CMTC MTC omit remain graph clearer visualization graph specifically osm   slj twr various graph algorithm operation significant difference speedup algorithm scalability CIC pim graph algorithm TC omit impact chunk parameter CIC pim chunk integer evaluate integer decrease slightly increase slightly increase chunk chunk metadata reduce significantly cache rate index data access increase explains slight increase however growth chunk increase possibility chunk contains vertex increase compress index data offset reduction chunk metadata explains slight decrease achieve compromise chunk chosen related graph processing compression memory graph processing report efficiently graph nonetheless compression reduce memory usage contrast CIC pim aim reduce memory usage improve focus compress graph matrix sequential setting achieve saving around nevertheless suitable memory processing due aim specific application neighborhood query sequential setting multithreading consideration random access decode extra data compress data variable align scheme overhead memory graph processing recent aim memory setting compress specific graph representation hence limited graph algorithm aim accelerator FPGAs CPUs gain reasonable graph specific CIC pim aim compress popular csr representation graph memory setting graph sparse matrix algorithm index compression literature nevertheless technique mainly compress invert index index database decode practical memory processing compression technique index data graph propose usually achieve metric however application sequential setting graph specific representation suitable graph specific counting counting TC generally classify category TC approximate TC TC obtains classify memory TC node core TC distribute memory TC distribute core TC memory TC TC multicore node data memory generally efficient cluster regard effectiveness implementation however applicability memory TC limited ram capacity node effectively reduce memory TC graph ram node CIC pim compress index structure graph node core TC leverage capacity external storage node graph performance however due bandwidth node algorithm suffer memory TC distribute memory TC graph memory TC however due longer network latency local ram communication intensive TC distribute memory TC usually significantly memory TC distribute core TC mostly refers mapreduce algorithm usually graph however due network latency bandwidth usually memory TC approximate TC estimate mainly sample usually graph although static graph approximate TC algorithm aim node setting distribute sample approximate TC usually reduce magnitude improve processing dramatically however drawback cannot obtain leverage matrix computation estimate fully massive legacy resource matrix computation simplify TC usually compute intensive hence conclusion conduct research graph compression related issue inspire TC related issue memory setting mainly compress considerable proportion index data graph popular csr format propose scheme CIC pim achieves significant saving improve TC graph algorithm CIC pim extend distribute setting