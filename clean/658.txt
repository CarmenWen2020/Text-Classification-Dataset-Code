challenge heterogeneous programmer leverage performance device integrate sigmoid load balance algorithm efficiently executes OpenCL data parallel kernel device heterogeneous sigmoid split workload proportionally capability device drastically reduce response consumption around feature dynamic adaptive effortless user parameter adapt behaviour kernel runtime evaluate sigmoid performance implement  abstraction library experimental kernel sigmoid exhibit excellent performance utilization saving reduce program effort OpenCL facilitate portability heterogeneous machine keywords heterogeneous load balance adaptability OpenCL efficiency introduction computer architecture constrain dennard consequence growth processor frequency efficient architecture designer resort increase core per processor recently focus specialization processing tendency foster advent hardware accelerator consequently computer incorporate sort hardware accelerator become heterogeneous socs mobile telephone compute node supercomputer advantage performance outstanding efficiency device regardless gpu tpu fpga accelerator substantial architectural difference cpu heterogeneous interestingly despite efficiently program trivial software development heterogeneous currently relies host device model dictate application cpu purely numerical kernel offload accelerator meanwhile cpu accelerator remain idle conclusion execution kernel obviously waste compute capability cpu idle device consume considerable amount idle OpenCL kernel thread item grouped execute concurrently independently device consequently kernel execute simultaneously device combine compute capability reduce consumption framework cuda OpenCL available program heterogeneous enable programmer access accelerator fail heterogeneous therefore programmer alone complex task efficient heterogeneous load balance programmer invest significant effort tackle generic complication distribution data perform accordance compute capability device largely load balance algorithm capable assign amount device compute simultaneously algorithm adapt heterogeneity behaviour application however adaptiveness sometimes introduces overhead increase host device interaction ideally minimize achieve accurate load balance avoid device oversubscription  minimize response usage load balance algorithm behaviour kernel classify regular irregular amount compute operation device constant execution contrast irregular kernel substantially compute load therefore unpredictable execution article proposes sigmoid load balance algorithm achieves optimal performance regular irregular kernel parameter whatsoever utilise available device reduces response reduction consumption sigmoid dynamic enable adjust heterogeneity device capable automatically adapt kernel extract maximum performance finally minimises program effort parameter internally sigmoid kernel launch initial adjusts measurement execution sigmoid integrate  abstraction library enables transparent execution OpenCL kernel exploit capacity heterogeneous exhaustive experimental evaluation scenario performance CPUs gpus combine evaluate capability sigmoid account device gpus resemble supercomputer node evaluate scalability sigmoid heterogeneous static algorithm dynamic algorithm HGuided adaptive experimental sigmoid almost perfectly balance load device regardless kernel scenario performance wise maximum speedup achievable application utilisation furthermore average consumption reduce combine sigmoid efficiency finally sigmoid scalability regular irregular kernel contains contribution sigmoid load balance algorithm reduces program effort combine dynamic adaptive technique distributes workload kernel device heterogeneous regardless behaviour kernel explains sigmoid function transform load balance algorithm adapts runtime specific application obtain remainder structure introduces concept central article presentation sigmoid algorithm detail experimental methodology discus related literature finally conclusion future background program heterogeneous efficiency complex endeavour knowledge summarises concept throughout program heterogeneous OpenCL program framework heterogeneous favour host device approach parallel program host manages available resource offloads numerical kernel hardware accelerator code destine execution accelerator encapsulate usually data parallel function commonly kernel offload accelerator OpenCL launch multiple instance kernel code instruction multiple thread SIMT fashion instance item global parameter dictate item launch item launch cooperate synchronise define local parameter OpenCL ensures item launch simultaneously compute device however device resource execute kernel therefore OpenCL execute independently choice schedule load balance maximum performance efficiency achieve adequately balance load kernel available compute resource however something framework desirable feature widely literature proposal classify task parallel approach data parallel approach rely assign kernel application device minimises idle execution split kernel permit device cooperate parallel approach suitable task usually offload gpus usually highly parallel therefore load balance kernel device amount assign device distribute device batch package greatly influence performance kernel approach workload adequately package computation device available static algorithm optimal regular kernel compute device unpredictable irregular kernel correctly balance execution dynamic algorithm workload package device centralise marshal assign package device upon request allows runtime adaptation irregularity kernel achieve performance however suffer significant performance loss due host device interaction package overcome limitation prior propose algorithm reduce package remain adaptive adaptive algorithm initial probe package attempt obtain compute device calculate ideal distribution workload however package sometimes waste compute resource due underutilization affect approach moreover experimental adaptive algorithm package ultimately compromise load balance HGuided algorithm contrary approach launch package subsequently reduces amount package grain schedule execution however limitation instance HGuided fully leverage capability device graph evolution compute express per binomial kernel HGuided algorithm significant portion execution device package decrease linearly graph package execution negatively impact performance increase host device interaction package cannot fully exploit computational resource device particularly notorious regular kernel adaptiveness obtain performance image KB image compute comparison binomial image KB image package comparison binomial HGuided algorithm parameter programmer strongly load balance accurately costly parameter sweep kernel moreover kernel sensitive parameter deliver highly degrade performance slightly dozen tune execution waste resource furthermore unfeasible dynamic environment datacenter application priori unknown sigmoid load balance algorithm solves aforementioned issue sigmoid load balance algorithm overview introduce previous sigmoid load balance algorithm conceive chase objective successfully massively data parallel OpenCL kernel heterogeneous device evaluate computational performance device avoid overhead kernel fourth effortlessly programmer goal efficient transparent available resource regardless underlie hardware execute kernel sigmoid dynamic heterogeneous algorithm distribute workload device proportionally compute package compute device excessively package assign device powerful maximise adaptive algorithm capable modify operation kernel regular kernel package reduce overhead irregular kernel impossible predict execution continually performance device tune internal parameter accordingly unlike proposal parameter tune perform transparently programmer without loss performance sigmoid behaves equally regular irregular application finally algorithm package proportional compute device decrease towards kernel execution satisfies goal package execution reduces overhead decrease package improves accuracy load balance addition utilisation device nearly constant throughout execution impact performance algorithm description sigmoid dynamic approach load balance launch initial package available device completes execution package accordance initial compute gflops report spec device execution pending package generate issue idle device improve load balance response package analyze tune internal parameter algorithm throughout execution kernel package evolves throughout execution kernel efficient load balance package dilemma package garner adaptiveness overhead moreover compute sometimes correlate quantity offload device package suboptimal performance representative actual capability hardware importance phenomenon already address load balance algorithm attempt compute consequently package compromise adaptiveness calculate successive package sigmoid relies function issue package execution gradually reduces overhead maintain adaptiveness device utilisation depict compute package evolution execute binomial benchmark HGuided sigmoid algorithm sigmoid generates package maintain compute longer decrease rate package adjustable internal parameter varies behaviour kernel sigmoid response execute package detect kernel irregular adjust decrease rate generate package adaptiveness algorithm automatically identifies adequate minimum package strike balance adaptiveness performance calculates compute device avoid imbalance algorithm adapts behaviour kernel package generate HGuided sigmoid irregular kernel HGuided generates linearly decrease package although distortion appreciate due irregularity sigmoid variable package adapt kernel  execution gpu gpu account compute variation associate package workload difference exhaustive package evolution analysis evaluate application however due limitation representative behaviour regular irregular kernel respectively description algorithm algorithm explain internal parameter function algorithm refer algorithm image KB image package comparison BM3D algorithm image KB image algorithm sigmoid algorithm logistic function load balance apply function load balance variable amount remain consequently monotonically decrease positive parameter eliminate maximum function package function yield asymptotic maximum obtain sigmoid curve capture desire behaviour package decrease rate sigmoid function interval decrease package adaptiveness prevent steep variable slope curve internally calculate sigmoid modify rate package decrease detail internal sigmoid function derive logistic function image KB image evolution package remain aim obtain function decrease package execution kernel progress logistic function however normalise interval return transform appropriate package function mapped interval maximum function package schedule algorithm chosen available device equivalent chunk commonly openmp algorithm account heterogeneity correction compute device define device compute per similarly aggregate compute schedule package device function obtain package avoid excessive overhead bound sigmoid automatically obtains slope function explain automatic parameter tune expression series parameter beforehand device remain others compute update kernel execution progress compute device slope sigmoid curve moreover minimum package avoid package execution increase host device interaction overhead reduce compute device due automatic update parameter allows sigmoid autonomously adapt kernel behaviour explain parameter obtain compute device tailor amount distribute accord capability device easily compute runtime monitoring kernel execution however compute kernel dependent consequently package kernel information available approximation estimation nominal gflop report hardware vendor calculate relative device accurately capability device kernel approximate estimation kernel execution impact performance execution accurate algorithm refine throughout duration kernel package execute calculate per reduce influence burst representative behaviour workload average package launch device update sigmoid algorithm however package negative adaptiveness longer longer sigmoid converge behaviour workload experimentally package strike balance adaptiveness sensitivity consequently sigmoid converge device package execute irregular application algorithm adapt accordingly slope sigmoid curve rate package decrease ultimately adaptiveness algorithm steeper curve package limit adaptiveness execution situation regular kernel adaptiveness benefit reduce overhead irregular kernel increase adaptiveness overhead adequate execution kernel evaluation sufficient achieve regular irregular kernel irregular kernel regular choice deliver overall performance belong stable interval difference performance variability behaviour representative kernel mandelbrot regular ray irregular chosen performance kernel nevertheless strictly optimal performance slight adjustment parameter execute kernel image KB image influence regular irregular kernel apply kernel execute kernel launch regard regular proven otherwise avoids penalize regular kernel affect irregular adaptiveness execution consequently package distribute irregularity define variability execute equally chunk therefore switch variability compute device analyse sigmoid considers standard deviation package device ratio average threshold kernel deem irregular kernel irregular remainder execution algorithm due irregular kernel regular behaviour standard deviation ratio threshold however guarantee irregularity execution opportunity react therefore irregular kernel greatly harm performance nevertheless verify hypothesis version sigmoid regularity detect version average performance loss adequately threshold analysis performance variability regular irregular kernel regular kernel performance difference due factor cache contention threshold package execute evaluate kernel depicts histogram standard deviation ratio regular irregular kernel package obtain regular kernel maximum performance variability around difference irregular avoid  regular kernel image KB image histogram package regular irregular kernel respect variability percentage purpose apply limit package generate sigmoid twofold strives excessive overhead inherent package guarantee package decrease resource device fully however factor odds adaptiveness induce imbalance utilisation target mention purpose implies risk avoid overhead increase package generate imbalance arise difference termination package schedule device scenario imbalance execution associate package accounting maximum imbalance coefficient define maximum imbalance generate sigmoid aforementioned scenario equation execution average device obtain minimum package limit overhead generate significant imbalance benchmark chosen excessive overhead avoids imbalance conceptually execution package launch device calculate equation execution equivalently scenario runtime spent imbalanced execution device compute idle bound package guarantee device fully gpus algorithm implement equation cuda occupancy calculator cuda toolkit version register amount memory kernel obtain OpenCL compiler calculate maximum occupancy per multiprocessor latter multiprocessor gpu query OpenCL minimum achieve maximum occupancy CPUs usually regular performance gpus CPUs bound per cpu core package maximum bound obtain sigmoid function algorithm experimental methodology describes detail experimental setup evaluate sigmoid description load balance algorithm comparison hardware choice benchmark kernel measurement load balance algorithm evaluate improvement sigmoid load balance algorithm static algorithm classic algorithm kernel package device available package proportional relative compute device execute algorithm minimizes overhead package device regular kernel priori choice however algorithm compute device input parameter performs badly irregular kernel HGuided algorithm algorithm aim reduce overhead associate host device interaction retain adaptiveness openmp package diminishes execution progress parameter compute device minimum package version label BestHG optimal parameter kernel obtain exhaustive parameter sweep  effortless usage HGuided parameter sigmoid nominal compute report cuda occupancy calculator minimum package adaptive algorithm algorithm propose device scenario dynamic technique training responds automatically performance variability implementation extension algorithm arbitrary device introduce proceeds launch probe package device execution predict ideal static partition remain amount probe package per device growth rate programmer define parameter author parameter deliver performance however experimentally probe package slowest device package adaptive distribution device consequently package algorithm bibliography aforementioned algorithm static BestHG parameter impact performance optimal kernel configuration consequence individually tune benchmark obtain perform execution benchmark consume parameter sweep benchmark hardware configuration platform benchmark experimentation machine label  CPUs gpus GBs ddr memory CPUs gpus execution CPUs intel xeon core thread ghz CPUs via QPI allows OpenCL detect device therefore throughout remainder document reference cpu xeon processor core load balance scheme individual core separately device fission evaluate however deliver performance distribution obtain OpenCL driver distribute cpu core attribute overhead cache affinity issue device fission identify placement return core memory hierarchy gpus nvidia kepler simd lane SMs nvidia terminology gbytes  independent pci slot performance baseline gpu static unused device idle consume account hpc incorporate accelerator unused considerable waste machine label hydra evaluate scalability sigmoid algorithm nvidia geforce gtx titan gpus  lane GB  cpu execution analyze scalability evaluate behaviour algorithm identical device increase kernel chosen exhibit regular behaviour binomial bin generates binomial lattice useful option pricing financial software mandelbrot implement algorithm compute mandelbrot nbody  simulates dynamic particle physic application gaussian  calculates gaussian blur image commonly image video processing software regular kernel taylor  performs dimensional taylor approximation kernel irregular aho implementation parallel  aho corasick  algorithm commonly protein sequence BM3D BM implement filter BM3D image denoising algorithm rap implementation resource allocation irregularity rap successive package amount previous finally ray trace render realistic image calculate pixel model ray scene complexity distribution ray ray define later input data behaviour application varies wildly parameter kernel load balance algorithm gpu compute minimum parameter static HGuided load balance algorithm former compute gpu relative cpu latter minimum package generate HGuided algorithm express local maximise performance device namely gpu almost performance difference detect local cpu parameter benchmark    compute           measurement consumption account drawn device compute device application monitor functionality performance however associate device kernel execution impractical measurement code application development monitoring  program parameter periodically query device measurement throughout execution program significant amount conception  monitor device adapt particularity consistent homogeneous output data apis perform measurement intel CPUs recent version linux kernel access average limit RAPL register accumulative reading contrast nvidia nvidia management library nvml measurement naturally  convert magnitude particularly aspect development  impact sample frequency program sample device variation across device feasible frequency series device  device react differently sample frequency RAPL measurement frequency surprisingly nvidia device noticeably sample frequency threshold actually kernel device longer magnitude variation cpu sample rate execution binomial kernel nvidia gpu graph adopt frequency however sample spike irregular load inexact sample increase execution error restrict image KB image impact sample measurement kernel execution experimental evaluation experimental obtain benchmark described aim sigmoid balance workload across heterogeneous device performance sigmoid regular irregular kernel balance execution capable improve consumption heterogeneous sigmoid device increase aforementioned achieve sigmoid load balance algorithm load balance metric analysis load balance  execution define ratio response device conclude ideal metric meaning device simultaneously maximum utilisation machine image KB image load balance device algorithm benchmark heterogeneous sigmoid perfect load balance benchmark algorithm obtains load balance rap nbody slightly BestHG  geometric sigmoid boast almost perfect load balance closely BestHG recall parameter BestHG optimal obtain consume sweep regard algorithm static performs regular benchmark performs poorly irregular consequence kernel devise load distribution actual execution adaptive regular kernel nbody satisfactory irregular performance performance speedup benchmark  baseline scenario gpu compose device compute speedup summarises maximum speedup benchmark derive response device relation device equation maximum speedup addition relative performance device respect obtain horizontal benchmark image KB image speedup benchmark algorithm heterogeneous maximum speedup benchmark  max speedup geometric speedup sigmoid performance static BestHG regard regular irregular kernel separately depict sigmoid obtains performance static regular benchmark slightly BestHG irregular sigmoid delivers overall performance performance alternative regular irregular workload speedup effortless algorithm sigmoid excels adaptive  regard benchmark individually sigmoid performance nbody taylor rap despite sigmoid attains load balance nbody taylor optimal parameter static obtains speedup benchmark computation communication ratio overhead increase workload subdivide package device rap sigmoid delivers performance minimum package guarantee efficient device generates slight imbalance execution regard effortless algorithm sigmoid delivers performance application taylor marginally surpass adaptive gap theoretical maximum consequence extra communication overhead device notorious application data replicate nbody ratio computation communication mandelbrot rap advantage sigmoid reduce package implies interaction host device maintain adaptability depicts package generate algorithm exclude static generate package device adaptive almost amount package benchmark translates regular benchmark overhead reduce however fails irregular cannot adapt HGuided algorithm version generate amount package although slightly BestHG thanks tune parameter occurs regular benchmark binomial advantage adaptability damage notably increase overhead package excessively fully advantage capacity gpus finally sigmoid generates package reduce overhead respect HGuided maintains adaptability accord benchmark surpass adaptive regard package generate load balance algorithm benchmark  adaptive  BestHG sigmoid consumption nowadays performance merit evaluate compute consumption efficiency important obtain advantage compute device  heterogeneous contrast baseline gpu device idle consume therefore benchmark consumption algorithm normalise baseline consumption graph heterogeneous consumes baseline image KB image consumption benchmark algorithm normalise baseline heterogeneous measurement strongly correlate performance algorithm geometric sigmoid BestHG saving respectively closely benchmark algorithm consume significantly baseline static adaptive irregular benchmark  BestHG improvement binomial gaussian interestingly algorithm improves baseline consumption sigmoid device logically increase instantaneous execution reduce consumption improve idle device consume device contribute beneficial effortless algorithm sigmoid attains consumption adaptive overall consumption baseline another metric efficiency combine performance consumption delay EDP algorithm normalise baseline combination metric relative advantage algorithm maintain geometric metric algorithm advantageous sigmoid improvement BestHG parameter optimise algorithm benchmark remain algorithm exhibit variability normalise EDP image KB image EDP benchmark algorithm normalise baseline heterogeneous summary execution improves consumption heterogeneous addition performance previous scalability developed hydra identical gpus evaluates scalability load balance algorithm therefore device increase comparison metric evaluate scalability efficiency define ratio achieve speedup device consequently perfect scalability implies constant efficiency meaning performance per device obtain regardless usually efficiency scalability algorithm image KB image efficiency algorithm execute benchmark homogeneous sigmoid algorithm regular irregular benchmark regard algorithm static regular algorithm serious irregular aho ray device strongly device adaptive regular benchmark exclude nbody device behaves poorly irregular finally BestHG  erratic behaviour regular benchmark scalability nbody mandelbrot taylor badly binomial gaussian version HGuided behaviour irregular benchmark scalability aho BM3D rap ray ray sum evaluate algorithm sigmoid delivers uniform scalability regardless behaviour workload regular irregular currently server supercomputer gpus tendency future data obtain estimation weak scalability sigmoid device gustafson evaluate device cannot execute device due memory constraint efficiency evolves increase device workload per device constant depict weak sigmoid almost perfect accord gustafson estimate image KB image estimation weak scalability sigmoid algorithm gustafson conclusion sigmoid achieves almost perfect load balance deliver excellent performance effortless load balance algorithm moreover delivers overall performance load balance algorithm parameter algorithm regular irregular kernel individually finally scalability regular irregular application related development heterogeneous advantage performance consumption academia however despite effort adequately enormous compute capability research address angle task data parallelism task parallelism distribute independent task available device ideally resource fully approach proposes lightweight runtime quark distributes task task superscalar schedule greedy heuristic author apply fuzzy neural network task distribution  OpenCL runtime task parallel workload execution information kernel device future kernel launch  OpenCL abstraction framework implement task scheduler construct regression model predict turnaround author propose  throughput aware runtime task allocator heterogeneous core platform analyzes task runtime information maximize efficiency unicorn parallel program model hybrid cpu gpu cluster implement dynamic steal task scheduler another steal approach  remarkable effort towards efficient capability heterogeneous however technique task parallelism kernel dependency workload data machine application extract parallelism device collaborate execution task via data parallelism execution focus sigmoid  intermediate approach combine coarse grain schedule indivisible kernel opportunistic grain distribution idle slot detect predicts execution heuristic focus splitting task maximise usage gpu extend device extra dispatcher tackle load balance data parallelism substantiate throughout load balance technique succeed flexible heterogeneity device irregularity application additionally excessive information programmer approach implement OpenCL framework compute device transparently manage memory device approach data parallelism static load balance strategy cannot adapt irregularity besides identical gpus ignore CPUs proposal suitable truly heterogeneous propose automatic modification OpenCL code executes device load balance propose library implement static load balance encapsulate standard OpenCL machine technique offline model predicts ideal static load partition however model irregularity similarly performance model identify ideal static distribution focus static distribution kernel execution available device via code modification author propose training load balance  proposes execution database program execute linear regression model another approach maestro technique useful application frequently propose static approach fail address importance adaptiveness moreover regular workload cannot recover inaccurate initial estimation capability available device dynamic sigmoid prevent issue workload chunk load balance decision runtime  implement adaptive dynamic scheduler focus cpu gpu  OpenCL framework heterogeneous cpu gpu cluster however regard load balance capable dynamically distribute kernel cpu core gpu execution kernel propose adaptive execution package distribute load however focus cpu gpu scenario unlike sigmoid configuration device similarly  load balance algorithm dynamically learns computational processor schedule remainder workload schedule scheme however algorithm assumes package launch initial phase representative load irregular kernel besides package decrease linearly completion phase unnecessary overhead substantiate propose dynamic adaptive algorithm thread building TBB fix package gpu variable cpu extend propose adaptive package gpu initial package identify package obtains optimal performance propose distribution scheme accelerate openmp compute however propose load balance library implement load balance algorithm proposes HGuided adapts irregularity heterogeneity however parameter programmer linearly decrease package impose overhead  software analyzes irregular application input data available integrate hardware performance model obtain ideal partition model calculation perform input data costly software application sparse matrix finally propose algorithm distribute workload accounting performance  dynamically distributes gpu cpu minimize waste idle slowest device maximise saving avoid performance degradation throttle frequency cpu gpu memory utilisation wang ren propose analytical model guideline partition balance performance consumption conclusion sigmoid load balance algorithm allows execute data parallel OpenCL kernel advantage compute device heterogeneous algorithm dynamic distributes workload device adaptive behaviour execution adapt regular irregular kernel additionally package reduce synchronisation reduce overhead execution advance shortens package increase granularity perfect load balance finally feature limited effort sigmoid amount setting easily establish installation sigmoid algorithm implement  OpenCL library simplifies management heterogeneous execute data parallel kernel exhaustive experimental evaluation confirm heterogeneous improves performance consumption device individually experimental sigmoid almost perfect load balance kernel diverse behaviour consequence performance consumption evaluate alternative benchmark additionally proven excellent scalability sigmoid delivers adaptation parameter installation without consume parameter effortless load balance algorithm sigmoid delivers regard performance consumption future sigmoid parallel application heterogeneous compose FPGAs tensor processing