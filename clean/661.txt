fault within transaction jeopardize concurrency intel restrict transactional memory RTM progress spite fault induced abort program resort non speculative fallback execute affected transaction atomicity non speculative transaction guaranteed impede execution speculative transaction former completes fallback particularly harmful performance therefore fault induced abort currently thread serialization potentially resolve propose PfTouch extension RTM allows fault handle non speculative transactional execution mutual exclusion proposal sidestep fallback avoids associate performance loss trigger fault abort handler speculative transaction concurrently PfTouch minimal modification intel RTM specification OS unaltered simulation PfTouch achieves average reduction execution stamp benchmark closely performance complex suspend transactional mode ibm ISA previous keywords transactional memory intel tsx fault serialization fallback introduction hardware transactional memory htm propose hurdle traditional lock synchronization namely priority inversion  deadlock htm implementation  processor decade however hardware transactional memory commercial processor arena firstly ibm later intel announce adoption  haswell chip respectively although inclusion commercial processor simplify parallel program htm rudimentary fulfill transactional memory promise parallel program audience parallel application extensive modification benefit htm particularly intel htm intel restrict transactional memory RTM effort  guarantee hardware transaction succeed abort htm arise conflict memory access amongst concurrent transaction lack buffering resource interrupt fault therefore non speculative fallback software combine htm ensure progress complicate intel RTM escape action without escape action non transactional instruction cannot execute within context hardware transaction restrict software fallback interact htm resort fallback transaction becomes non speculative irrevocable execution hardware limit although hardware prohibit concurrent execution speculative irrevocable transaction typical fallback recommend RTM specification global lock fallback lock enforce mutual exclusion irrevocable speculative transaction TM runtime ensures concurrent speculative transaction access data irrevocable guarantee atomicity complex scheme multiple lock fallback complicate program model programmer compiler circumstance concurrency irrevocable transaction threaten atomicity regardless specific implementation fallback irrevocability entail thread serialization opportunity parallel execution concurrent transaction potentially overlap irrevocable transaction performance suffers transaction frequently resort irrevocability intel RTM htm stamp average execute cycle due serialization irrevocable transaction detail evaluation methodology deeper inspection reveal switch irrevocability fault within boundary transaction contributor stamp fault cycle associate fallback average fault manage RTM via irrevocability couple coarse grain synchronization style characterizes stamp benchmark contrary transaction fault rare parallel program employ grain synchronization program  grain lock replace transaction without adequate hardware fault important performance bottleneck program scratch TM paradigm promise parallel program easy coarse grain transaction author fault limit factor accord intel transactional synchronization extension tsx specification RTM interface fault occurs within transaction suppress fault memory access transaction abort hardware informs abort handler transaction succeed retry abort handler determines fallback proceeds abort concurrent speculative transaction ensure transaction subsequently irrevocable transaction executes everything fault memory access transaction speculative trigger fault handle operating OS transaction resume execution handle fault manner avoids non trivial hardware pause resume speculative transaction kernel executes htm completely transparent OS downside approach significant impact performance fault within transaction preclude concurrency transaction irrevocable progress OS cycle resolve instance content load disk performance dramatically transaction execute meantime propose PfTouch technique allows fault handle RTM transactional execution mutual exclusion proposal fault trigger abort handler sidestep switch irrevocability therefore eliminate associate performance loss hardware informs abort handler transaction aborted fault address trigger fault abort handler address fault handle OS transaction concurrently useful OS handle fault resolve transaction restarts speculative execution modification intel RTM specification optimization minimal additional information abort address return abort handler via rax register abort handler detect abort due fault fault address report hardware fault OS remains unchanged oblivious htm expose fault address abort handler channel information infer exist interface detailed simulation core cmp transactional program stamp benchmark PfTouch achieves noticeable reduction execution translation fault average stamp benchmark vacation PfTouch suspend transactional mode ibm ISA proposal closely performance complex alternative evaluation PfTouch improves performance workload fault diverse source gain unattainable software heap pre fault highlight involve PfTouch relieve programmer worry occurrence transaction fault pave efficient coarse grain transaction imperative promise transactional memory simpler parallel program fulfil manuscript organize background fault manage intel RTM detail modification PfTouch implication alternative handle fault transaction without abort simulation environment evaluate PfTouch explain obtain explain finally contains conclusion avenue future background fault handle intel RTM typical software implementation function commit transaction intel RTM instruction listing  function attempt execute transaction speculatively hardware irrevocability non speculative execution mutual exclusion enforce global lock tsx recommendation speculative transaction perform eager subscription global lock hence invariably transaction lock listing immediately  instruction proceed lock thread determines resort non speculative execution achieves mutual exclusion acquire lock simultaneously meeting maintain atomicity transaction execute non speculatively fallback lock lock another non speculative transaction executes lock variable immediate abort speculative transaction due transactional conflict lock acquisition newly speculative transaction subscribed lock resolve explicitly abort fallback lock acquire atomicity risk speculative transaction concurrently non speculative transaction latter prevent conflict access former avoid  thread fallback lock unlocked speculative transaction aborted retry transaction image KB image RTM specification report abort flag significant eax register ret listing explicit abort execution  instruction transaction succeed retry  listing unset fallback progress fault indicates abort conflict another thread warns transaction overflow hardware resource debug breakpoint encounter report transaction aborted within nest transaction fault occurs within transaction hardware simply suppresses execution abort handler eax register unset  false retry speculatively likely trigger fault another abort therefore thread acquire fallback lock execute transaction non speculatively mutual exclusion fault trigger handle OS affected thread fallback lock although manage fault simplifies hardware OS entail serious performance degradation benchmark transaction due amount discard conflict fallback lock importantly thread lock fault handle fault transaction release lock fault within transaction serialization thread attempt execute transaction sketch situation transaction suffers fault transaction execute acquisition fallback lock implies abort conflict cache contains lock amongst sharer lock subscription listing prevent speculative transaction execute transaction explicitly abort fallback lock lock subscription listing restarts execution irrevocable mode fallback lock release preclude concurrency resolve fault restart execute PfTouch enable concurrency presence fault intel RTM reduce fallback resolve fault inside transaction propose PfTouch straightforward extension RTM enables handle fault abort handler information transaction aborted due fault address abort handler report address OS handle fault resolve transaction retry speculatively probability transactional code access address previously fault access fault transaction become irrevocable fallback lock transaction concurrently useful OS handle fault scheme guarantee transaction aborted due another fault unlikely transaction access memory location executes newly access location trigger additional fault transaction abort repeatedly due fault fallback lock currently abort although infrequent hardware modification modification PfTouch minimal intel RTM specification return abort status via eax register broadly abort significant explicit capacity conflict however fault category propose modify RTM interface inform handler abort due fault fault address advocate significant rax significant currently unmodified eax currently reserve non explicit abort propose status abort fault fault access operation finally fault virtual address exclude significant image KB image abort handler modification assume ISA extension described highlight code listing abort handler architectural restore upon abort program counter instruction  rax ret abort status  false abort handler abort due fault fault memory extract virtual address ret fault access fault access load instruction fetch memory address simply otherwise swap identical addr execute content modify operation perform modifies ret enable  transaction retry speculatively fallback OS remains totally oblivious software modification confine abort handler illustrates PfTouch fault transaction affect execution transaction execute OS resolve security implication intel RTM htm leveraged improve bandwidth channel attack meltdown htm prevent regard propose RTM interface channel information infer exist interface rely RTM interface userspace already virtual memory mapped memory without mapping custom abort handler access memory thread inside transaction conflict capacity induced abort ensure transaction execute RTM unfriendly instruction remain abort interrupt fault distinguish return abort status  retry alternative proposal handle fault transaction without abort rely complicate hardware OS fully virtualized htm literature LogTM SE escape action transactional code escape library virtual machine OS code escape action bypass transaction version management conflict detection escape action invoked explicitly via instruction implicitly trap OS handle fault without abort transaction addition interrupt mechanism implement effort htm ibm ISA suspend transactional mode mode interrupt fault explicit instruction mode memory access thread execution OS code access thread detect conflict transaction detects conflict failure abort defer execution resume OS handle fault performance degradation fault inside transaction mitigate software strategy fault within transaction boundary heap access newly allocate memory transaction abort avoid speculation memory return subsequent malloc oppose hardware technique software approach henceforth refer heap pre fault limited applicability address specific fault helpful important source memory mapped unlike pre fault hardware scheme avoid performance exceeds physical memory another important shortcoming pre fault besides limited applicability fix overhead transaction program hardware alternative described handle fault without abort transaction without preclude concurrency transaction contrast proposal abort transaction handle fault retries transaction achieve performance complexity hardware intrusive OS evaluation PfTouch ibm suspend transaction heap pre fault simulation environment extend widely gem simulator transactional memory model intel RTM effort baseline simulation mode gem employ capture RTM unfriendly OS performance transactional workload employ detailed timing model memory subsystem ruby combine issue processor model  gem functional simulation ISA boot unmodified  linux perform core tile cmp memory network parameter detailed thread benchmark  server allows thread correspond parallel application account variability parallel application gathering average statistic randomize random jitter extra cycle dram response performance analysis vacation simulation input variability execution fault arise htm evaluate summarizes htm evaluate RTM baseline speculatively modify SM annotation data cache perfect signature maintain feature commercial intel chip cannot exceed KiB MiB exist effort htm implementation data cache speculative versioning requester policy resolve conflict MESI coherence protocol augment speculative versioning invalidation abort data cache discard speculative update gang invalidation SM exclusive ownership information directory become outdated handle former exclusive cache negative acknowledgment nack directory upon request remote cache longer request service data speculative writes SM unset data cache completes cache controller SM action perform SM typically alongside coherence extra regular replacement writebacks retain exclusive ownership critical originate baseline model abort handler implementation listing implement scheme concurrent handle fault PfTouch modify abort handler depict listing underlie htm remains identical additional information fault induced abort abort status return rax register parameter MESI directory cmp core setting core issue non memory ipc memory setting  KiB split cycle latency  MiB unified tag data cycle latency memory GiB cycle latency cache  MESI network setting topology rout mesh flit byte message flit data flit link latency cycle link bandwidth flit per cycle htm evaluate  perfect signature SM cache  fault handle abort handler  transaction  pre fault  SE perfect signature entry filter PfTouch related baseline effort requester htm augment suspend transaction suspend abort handler hardware model modify trap kernel code due interrupt fault abort ongoing transaction instead kernel code executes non  versioned hardware monitoring coherence traffic eviction speculatively modify local cache conflict capacity induced abort signal occurs transaction suspend processing defer cpu resume transaction upon return kernel code abort signal transaction suspend processing cpu execute user code otherwise transactional execution resume successfully interrupt fault handle heap pre fault scheme prefault implement entirely software extend thread local memory allocator stamp library function memory writes memory location return subsequent memory replacement malloc inside transaction stamp benchmark location byte boundary byte memory function  wrapper listing additionally relative performance aforementioned effort LogTM SE LogTM popular htm virtualized transaction footprint duration LogTM SE requester stall policy resolve conflict timestamp scheme conservative deadlock avoidance prevents starve writer pathology perfect signature employ software abort handler undo restore memory comparison aforementioned effort HTMs randomize exponential backoff perform abort LogTM redundant writes minimize filter contains recently address accommodate syscalls inside transaction  benchmark augment LogTM model ability transaction non speculatively mutual exclusion fallback lock acquire upon syscall induced abort acquisition abort speculative transaction irrevocability implement effort HTMs benchmark stamp transactional benchmark selection benchmark  workload stamp recommend medium input selection  benchmark input scalability thread LogTM parallel performance bayes labyrinth htm transaction code KiB medium input performance execute effort htm due capacity induced abort moreover execution bayes varies significantly execution implement algorithm thread interleave execute transaction input clearly labyrinth scalability partly due lack hardware release prevents data structure remove privatization thread attempt commit invariably abort concurrent transaction moreover pathological performance LogTM labyrinth explain transaction repeatedly abort undo compete cache resource program data expensive software rollback aforementioned bayes labyrinth stamp benchmark input stamp bayes genome intruder kmeans random kmeans random labyrinth random txt ssca vacation vacation yada  modify stamp intruder mmap  ssca vacation  benchmark input  avl   item dedup  dat   queue    leveldb num benchmark    frame   image KB image scalability baseline LogTM htm thread  benchmark adapt suitable simulation infrastructure  apart fix important program bug data corruption transform client server model server spends majority kernel datagrams socket alone program server obtains client command trace file previously client server program native hardware adapt dedup version creates thread stage parallel pipeline isolate thread schedule context switch overhead thread available core derive dedup version pipeline stage employ coarse grain transaction chunk thread contention fault htm performance without interference kernel due thread  reschedule scalability stamp modify  benchmark additional command argument runtime iteration execute duration applicable distribute thread attempt amount constant across thread moreover reduce spurious abort due conflict transaction data structure memory allocation library replace libc malloc stamp thread local malloc concurrent transaction allocate dynamic memory without conflict induced abort patch modify version  code available benchmark  thread LogTM  leveldb  capacity induced abort barely speedup thread effort htm baseline  thread workload amount execute thread configuration directly comparable fault induced abort PfTouch execution benchmark mention along average cycle spent function listing kernel handle fault fault classify minor reading data swap file partition backing file  fault stamp benchmark minor access unused heap zeroed enrich performance characterization additional benchmark intruder mmap vacation ssca attempt applicability fault abort mitigation technique fault experienced transaction stamp benchmark medium input minor fault fault exclusively access memory dynamically allocate inside transaction intruder mmap vacation attempt gap mimic workload fault transaction source abort fault PfTouch average duration cycle abort handler minor  fault   duration genome intruder intruder mmap kmeans kmeans ssca ssca vacation vacation yada avl   dedup  leveldb    vacation vacation vacation vacation vacation vacation vacation vacation vacation vacation intruder mmap modify version intruder attempt capture behavior workload perform memory mapped transaction explain detail thread obtain network packet memory mapped input file contains packet instead generate initialization phase fault initialization input data version intruder obtain packet memory mapped file furthermore optimize version vector instead link packet belonging vector advance alone achieves nearly speedup thread execution benchmark vacation showcase behavior htm load scenario fault arise goal input chosen benchmark option slightly relation physical memory requirement slightly GiB limit simulated prevent imbalance thread due appearance fault cycle resolve static workload assignment scheme benchmark replace dynamic scheme steal parallel phase thread perform database transaction throughput amount remains constant specify option furthermore unlike vacation query option identifier thread version thread query disjoint sum span identifier database progress thread remains physical memory presence fault affect thread patch flavor vacation available benchmark fault vacation precisely exhibit behavior intruder mmap fault although access file disk  verify happens OS ahead memory mapped file eagerly cache mmap shortly fault data disk parallel phase access  phase minor fault mapping kernel cache ssca simply zoom execution phase ssca transaction inspection adjacency array characterize fix overhead incur prefault benchmark transaction dominate relative performance htm stamp  respectively normalize baseline role source overhead performance configuration execution disjoint component execution cycle attribute category non transactional spent barrier  handle interrupt fault kernel fallback lock  execute speculative transaction commit aborted fallback lock release retry speculative transaction lock transaction handle fault   lastly categorizes cycle spent handle fault trigger abort handler PfTouch heap prefault stamp benchmark intruder vacation clearly performance gain achieve fault abort mitigation technique suspend PfTouch ability handle fault without acquire fallback lock enables concurrency elimination  due irrevocable transaction acquire fallback lock remains almost vacation fault nearly transaction resort irrevocability hence virtually cycle    eliminate genome intruder yada   component remain thread livelock situation conflict induced abort consequence conflict resolution policy requester cycle attribute kernel fault non speculative transaction component PfTouch spent handle fault impact performance apparent kernel cycle execute thread useful transactional fallback lock whereas PfTouch suspend kernel cycle kernel component execute concurrently transaction furthermore fault transaction invariably trigger irrevocability mechanism abort concurrent speculative transaction PfTouch suspend transaction affected performance PfTouch suspend achieve performance benchmark genome intruder vacation advantage increase concurrency handle fault achieves differently suspend suspend transaction handle fault resume without discard PfTouch abort transaction handle fault retries confirm slightly augment RTM interface capture majority benefit complex hardware suspend transaction performance exhibit prefault approximates suspend stamp benchmark significantly affected fault induced abort almost abort due dynamic memory allocation stamp simplistic thread local memory allocator memory memory reuse fault heap become recurrent prefault trigger fault transaction sidestep abort reduce aborted component suspend clearly visible vacation fault induced abort transaction hence discard downside inability prefault performance fault induced abort dynamic memory allocation visible intruder mmap PfTouch suspend advantage software heuristic heap  applicability another shortcoming prefault extra overhead transaction becomes apparent ssca heap pre fault transparent programmer implement inside  function listing heap transaction speculatively execute blind heap prefetch prefault program transaction ssca slowdown transactional phase overall stamp memory allocator heap operation comprises instruction realistic allocator likely increment fix understand performance handle fault spent transaction finally aborted correspond cycle aborted category split finer grain category conflict cycle aborted due conflict transaction   cycle waste due abort limited capacity cache respectively capacity abort cycle waste abort trigger due fault account  interrupt cycle transaction aborted due interrupt  cycle waste due abort acquisition fallback lock syscall cycle waste due abort inside transaction cycle due abort conflict transaction exception vacation yada additional concurrency achieve thread serialization fallback lock fault performance gain slightly discard benchmark effort htm configuration virtualized htm implementation LogTM generally discard effort counterpart LogTM abort transaction conflict exception yada LogTM achieves dramatic reduction execution almost discard transactional effort htm simply absence fallback thread execute speculative without serialize conflict resolve stall LogTM image KB image cycle waste due abort stamp benchmark categorize abort benchmark fault component aborted cycle visible abort conflict conflict fallback lock clearly dominate prefault genome eliminates  cycle increase amount waste cycle due conflict fault induced abort throttle concurrency highly contend phase benchmark remove prefault conflict induced abort eventually fallback lock acquire  explain increase conflict category benchmark PfTouch pathological scenario arise contend transaction affected fault others transaction aborted fault handle abort handler scalability yada extension effort HTMs evaluate mainly due contention experienced transaction  thread transaction average cycle LogTM around execution transaction non speculative fallback remain commit speculative execution around cycle thread mostly fault interrupt lesser extent capacity induced abort thread resort fallback multi thread friendly requester policy evaluate effort htm thread fallback conflict induced abort explain aborted cycle conflict fallback lock vacation PfTouch optimization remove aborted cycle acquisition fallback lock transaction suffers fault however amount waste cycle reduce overall speculative transaction concurrent fault processing abort handler aborted interrupt  component remains unchanged PfTouch configuration remove prefault suspend LogTM configuration fault occurs transaction prefault abort transaction handle fault suspend LogTM performance advantage prefault PfTouch mostly interrupt induced abort affect latter lesser extent ability former sidestep fault induced abort analysis reveal unexpected increase interrupt PfTouch  instruction simulated gem interaction operating simulated processor model instruction decode micro instruction load memory location consecutive fault generate instruction load micro instruction minor fault zeroed virtual previously  memory allocator fulfill request operating handle mapping zeroed physical virtual later micro instruction another minor fault operating allocate physical virtual address actually modify optimization crucial static code data  operating  memory entry tlb entry allocate fault permission operating detect fault unfortunately tlb translation allocate load micro instruction update execute micro instruction operating ensure tlb translation tlb interrupt core invalidate appropriate tlb entry unlikely mapping actually tlb burst interrupt affect core interrupt induced abort PfTouch prefault component instruction instead swap heap zero pool prefault memory location valid data contrary PfTouch mechanism capable fault memory limited heap cannot modify content extra penalty fault incur PfTouch avoid access perform  handle suspend LogTM eliminate aborted cycle due interrupt fault achieve nearly identical performance vacation marginal gain LogTM suspend vacation attribute exclusively ability resolve conflict stall abort yada extent genome noticeable aborted cycle interrupt PfTouch employ aforementioned fault performance PfTouch suspend prefault LogTM vacation benchmark execute increase input relation creates database memory slightly physical memory available simulated goal htm performance workload fault application approach surpass physical memory available due resource contention amongst multi programmed environment prefault performs slightly PfTouch absence fault explain vacation related behavior swap LogTM suspend perform avoid discard fault occurs however workload exceed available physical memory vacation happens database relation fault arise PfTouch suspend becomes scheme tolerate without sustain severe slowdown increase input relation PfTouch gracefully handle appearance fault barely performance loss prefault significant performance acute fault relation PfTouch suspend outperform LogTM extra memory requirement undo additional fault suffer input prefault unable trigger fault ahead affected transaction cannot prevent thread serialization fallback lock scenario fault access newly allocate dynamic memory contrary PfTouch sidestep thread serialization allows remain thread execute affected thread remains halt request swap disk  benchmark grain transaction replace lock transaction amount data speculatively access typically benchmark suffer fault dedup  potential performance improvement fault mitigation technique execution aborted cycle PfTouch suspend benchmark dedup consists coarse grain transaction dynamically allocate memory chunk byte difference htm prefault cannot perform par PfTouch suspend  adequately heuristic tune stamp benchmark memory ahead available location however prefault outperforms PfTouch  thanks reduction cycle waste due conflict induced abort consequence prefetching available heap transaction cache ahead transaction duration reduce shrink exposure abort concurrent conflict transaction although positive contention occurs  translate performance improvement unlike  benchmark transaction account execute cycle moreover prefault suffers slowdown explain ssca previous transaction overhead heap becomes notable component finally performance LogTM worth mention avl moderate contention setup lookup insertion frequent abort LogTM expensive unroll software furthermore conflict resolution policy LogTM requester stall futile stall pathology LogTM achieves important improvement benchmark   sidestep fallback irrevocability effort HTMs upon conflict induced abort  capacity abort  conclusion address limitation intel tsx specification fault inside transaction manage accord fault within boundary transaction suppress fault memory access transaction abort hardware informs abort handler transaction succeed retry abort handler determines fallback proceeds abort concurrent speculative transaction ensure transaction subsequently irrevocable transaction executes everything fault memory access transaction speculative trigger fault handle operating OS transaction resume execution although handle fault manner avoids non trivial hardware pause resume speculative transaction kernel executes htm completely transparent OS significant impact performance fault within transaction preclude concurrency latency OS programmer avoid fault within transaction something struggle htm premise simplify parallel program cannot guaranteed program perform memory mapped transaction simply exceeds physical memory overcome propose PfTouch extension intel RTM specification enables fault within transaction handle operating concurrently execution speculative transaction particularly PfTouch fault informs abort handler abort fault address hitherto unused rax register abort handler detect abort due fault fault address report hardware fault OS remains unchanged oblivious htm expose fault address abort handler channel information infer exist interface detail simulation core cmp architecture demonstrate despite simplicity PfTouch achieves significant performance gain average reduction execution thanks circumvent irrevocability serialization costly ongoing develop additional optimization minimal hardware intrusion operating goal bridging performance gap effort htm intel RTM sophisticated implementation literature LogTM SE