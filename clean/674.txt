multi replica strategy multiple data replica DataNodes improves data availability data service quality however storage resource DataNodes limited user demand data unreasonable data replica storage burden file data service quality therefore data replica dynamically adjust accord actual situation dynamic replica creation strategy markov chain propose replica increase newly replica DataNodes load balance datanode replica placement proposes replica placement strategy non dominate sort genetic algorithm addition data replica synchronization data recovery fail DataNodes proposes delay adaptive replica synchronization strategy load balance replica recovery strategy finally effectiveness propose strategy keywords replica synchronization replica placement introduction connection massive smart device explosive growth data traffic emergence application increase demand service quality mobile user compute platform specific network distance compute platform user relatively delay user request compute storage resource remote compute transmission processing amount data compute platform increase load core network reduction data transmission processing rate reasonable compute technology without network architecture compute deploys series server server server micro network compute storage service user data transmit compute platform transmit server local processing achieve purpose reduce core network pressure resource request delay however compute disadvantage compute storage capacity server limited therefore compute ecc technology combine compute compute respective advantage user service quality environment amount data access heterogeneity storage device network device service interruption data failure multi replica approach effectively however multi replica adjustment replica unreasonable replica replica consistency maintenance data service quality replica increase replica DataNodes ensure load balance cluster replica placement distribute file hdfs consistency strategy usually update replica data however consistency strategy suitable application environment DataNodes geographical location consistency strategy affected delay insufficient bandwidth network congestion eventually replica unable synchronize increase data latency reduce data throughput reduce data availability due heterogeneity node DataNodes cluster fail data lose thereby reduce data reliability replica adjustment proposes dynamic replica creation strategy rda GM strategy considers data data access response calculate replica creation factor adjust data replica markov chain predict access frequency data calculation data replica placement propose replica placement strategy rps  strategy considers datanode performance cluster storage load network distance establish multi objective replica placement pareto optimal non dominate sort genetic algorithm consistency replica synchronization strategy suitable proposes delay adaptive replica synchronization strategy DA RS strategy update replica consistency update replica data access improves availability data file idle  become data non update replica update guarantee ultimate consistency replica reduce data reliability datanode failure propose load balance replica recovery strategy LB RR strategy fail DataNodes detect heartbeat mechanism file recovery benefit recovery data fail datanode calculate data recover finally datanode load target node data replica recovery contribution unreasonable data replica data availability proposes dynamic replica creation placement strategy strategy comprehensively considers data access response dynamically adjust data replica improve data service quality considers network distance node load performance cluster storage load DataNodes data replica achieve load balance data latency data availability consistent replica synchronization strategy file delay adaptive replica synchronization strategy propose strategy update replica consistency update replica data access improves availability data unsynchronized replica synchronize appropriate guarantee ultimate consistency replica data replica loss due datanode failure load balance replica recovery strategy propose strategy selects recover data accord data recovery benefit selects data recovery node accord load balance principle strategy ensure load balance file cluster basis ensure data reliability effectiveness propose strategy experimental propose replica dynamic creation strategy effectively reduce response adjustment replica propose replica placement strategy effectively improve data throughput storage utilization ensure load balance propose replica synchronization strategy reduce data latency improve throughput file basis ensure consistency replica effectively improves data readability propose replica recovery strategy reduce data improve data throughput effectively improves data reliability organize related propose replica management strategy algorithm application scenario propose replica management strategy experimental environment introduction algorithm performance analysis conclusion future related replica management strategy replica management strategy important issue architecture dynamic replica adjustment creation strategy dynamically adjust data replica accord network environment compute environment requirement user data access scholar management strategy perspective propose data replication dynamic management strategy hdfs comprehensively considers popularity data replication factor active node dynamically calculate optimal replication factor accord data factor replication factor increase data replica dynamically adjust replica propose aware data replication strategy dynamically calculates minimum replica availability file optimizes replica creation concept backpack propose novel dynamic data replication strategy improve access efficiency storage remain qos attribute propose dynamic data replication strategy compute strategy calculates popularity file principle locality principle calculate popularity file popularity file threshold replica creation operation file replica trigger propose genetic algorithm replica management strategy dynamically adjusts file replica data access rate disk characteristic propose effective data replication strategy replicates data dynamically data popularity strategy categorizes data access dynamically manages replication category replication factor data maintain accord availability requirement minimum replica data dynamic replica creation strategy node overheat similarity defines fuzzy membership function node overheat similarity node load  propose enhance replica synchronization strategy strategy whenever client request replica data update remain replica immediately update  propose proactive replication strategy strategy comprehensively considers cpu utilization target node disk usage popularity replica recover data replica fail datanode target node summary dynamic replica creation adjustment strategy summary dynamic replica creation adjustment strategy  reduce storage consumption storage without affect reliability availability requirement storage data replication erasure  popularity replication factor active node guarantee data availability reduce replica  concept  availability data replication improve storage access efficiency preserve qos attribute smart  access replica location improve data availability reduce user request replica file locality  popularity load balance replica placement node minimize data availability access   access rate disk characteristic reduce storage utilization data storage without affect data availability  replication factor data data popularity calculate threshold data access model data popularity improve load balance reduce user access  fuzzy cluster analysis  load  reduce task response improve storage service performance grey markov  access frequency response file data dynamic replica adjustment creation strategy environment environment usually calculate replica adjust factor popularity access overheat similarity file data replica adjust factor adjust replica file data user reliable data access service however access frequency file data consideration model file model due data access frequency dynamically access frequency within cannot reflect file data future access frequency ignore access response model file data model reduces quality service user request data file cache replica reduction resource utilization file increase consistency maintenance user interested data file entire file experimentally propose dynamic replica creation strategy previous advantage propose strategy access frequency within cannot reflect data future access frequency data future factor model data model markov chain predict frequency data access future obtain accurate prediction addition frequency data access data access response account model data improves quality service user request data data replica solves file cache utilization consistency maintenance file cache replica file replica placement strategy goal related research replica placement mainly appropriate placement node data replica achieve purpose load balance node scholar achieve remarkable research replica placement strategy propose dimensional security model replica placement fuzzy entropy theory security risk data evaluate replica placement evaluation algorithm security data replica establish multi factor fusion evaluation model propose replication placement mechanism adjustable replica deployment strategy availability data frequency replication access remain capacity storage node propose web server replica placement algorithm fuzzy cluster organize mapping neural network algorithm web server file replica balance load replica placement node content placement optimal monetary transform constraint optimization goal minimize content placement joint optimization data replica placement data intensive service geographically distribute response author propose overlap correlation cluster algorithm propose genetic algorithm data replica placement strategy considers data network bandwidth data propose distribute data replica placement strategy strategy replica placement decision user requirement storage location replica storage reduce replica access latency network overhead propose topology component service replica placement communication topology multi graph cluster obtains topology compute node spectral cluster finally replica component service topology summary replica placement strategy replica placement strategy application environment aspect specific factor application environment appropriate target node data replica placement achieve purpose load balance although relatively perfect replica placement however network distance source node target node replica placement strategy source node away target node unstable data transmission longer data transmission latency increase network bandwidth consumption hardware performance difference DataNodes difference hardware performance load capacity DataNodes hardware performance DataNodes account perform replica placement operation load imbalance file multi objective replica placement strategy linear construct objective function reduce sub objective objective function introduce coefficient difficulty linear reasonable coefficient optimization linear depends extent choice coefficient depends expert therefore linear cannot multi objective optimization requirement actual propose replica placement strategy previous advantage propose replica placement strategy summary replica placement strategy  achieve probability data replica availability reduce fuzzy entropy  replica storage security maintain load balance improve rate successful data  data replica node spare  availability replication access frequency remain capacity storage node minimize runtime latency balance load  fuzzy cluster organize mapping neural network  replica client load replica minimize content  ktt  storage bandwidth improve evaluation metric reduce execution  correlation cluster  storage inter data traffic data span reduce data transmission  genetic  data network bandwidth data reduce replica access latency network  replica placement decision user requirement storage location replica storage  location user demand storage pricing improve performance service  graph cluster spectral  topology service application communication performance compute node  ensure load balance DataNodes improve data access efficiency reduce data latency improve data  non dominate sort genetic  performance file cluster storage load network distance replica placement strategy network distance source node target node difference load capacity node establishes multi objective replica placement optimization strategy considers traditional node load balance factor file availability node performance relative node load comprehensively considers node hardware heterogeneity network distance node exist replica placement strategy rely expert opinion parameter objective function non dominate sort genetic algorithm optimal replica placement algorithm obtain pareto optimal multi objective without rely expert opinion requirement multi target replica placement optimization practical situation replica management strategy dynamic replica creation model rda GM propose strategy comprehensively considers data data access response calculate dynamic factor data data file calculate static factor data calculation data comprehensively considers access frequency data future markov chain predict access frequency data future replica creation factor calculate dynamic factor static factor replica creation factor adjust replica data optimal motivation grey markov chain model basis replica creation algorithm propose replica creation strategy calculates dynamic replica creation factor predict data access frequency future sample data access frequency prediction cannot otherwise workload node manager complexity transaction increase availability file decrease data access frequency dynamically distribution regularity obvious characterize non stationary random prediction model grey GM strict requirement sample distribution regularity historical data information prediction however data access frequency fluctuation prediction performance grey GM markov chain performs data prediction transition probability prediction data volatility combine markov chain GM shortcoming prediction GM volatile data thereby obtain prediction markov chain accurately predict data access frequency future prediction model data model reflect data replica popularity model construction propose dynamic replica creation strategy specifically model dynamic replica creation strategy assume access frequency data tth express access ith replica data express replica data access frequency data model  predict frequency access data future assume data sequence compose access frequency data interval tth specific model data sequence indicates access frequency data kth interval tth accumulate generate operation sequence GM model obtain establish differential equation sequence whiten differential equation GM model traditional parameter estimate parameter calculate estimate whiten differential equation predict access frequency data estimate access frequency prediction GM greatly deviate due randomness user access user access frequency markov chain predicts future initial transition probability markov model prediction GM model relative residual estimate actual model indicates estimate indicates actual kth relative residual express upper bound kth respectively model constant data residual transfer another prediction residual transition probability data model indicates transfer indicates therefore transfer probability matrix obtain denote median relative residual interval correction prediction specific formula calculation dynamic replica creation average access frequency data tth model denotes access frequency data kth interval tth data tth model denotes average access frequency data predictive access frequency data access response data kth interval tth average response data tth model response data dynamically therefore defines dynamic factor data file data belongs file fragment data file data fragment therefore static factor model dynamic replica creation factor data model denotes impact factor data difference initial tth dynamic replica creation factor optimal replica data dynamic replica creation algorithm image KB image algorithm describes dynamic replica creation algorithm grey  model algorithm data series compose access frequency data access response average access frequency file data obtain prediction model predict access frequency data future markov chain prediction data tth calculate average response data tth calculate static factor calculate accord dynamic replica creation factor calculate complexity analysis algorithm complexity complexity complexity denotes data denotes mention complexity algorithm manage data access replica creation user access data replica creation user node resource manager datanode datanode replica data user access replica creation happens resource manager resource manager calculates optimal data replica accord propose replica creation algorithm replica creation user access data user communicates namenode request access data request user namenode selects datanode closest user replica data data access service user namenode return metadata user access address datanode metadata metadata user establishes network connection datanode relevant information metadata user downloads replica data datanode discussion data replica advantage data replica file data improve efficiency random concurrent reading file replica data DataNodes improve concurrent reading efficiency data achieve data reliability data replica data backup file data fault tolerance data availability accord data characteristic SaaS storage application user access tendency replica placement algorithm file replication actual situation user interested data file experimentally therefore replica entire file reduce utilization cluster storage resource increase maintain data replica consistency overhead data replica replica creation summarize replica data resource manager calculate replica data accord propose replica creation algorithm compute resource overhead resource manager introduction resource manager creation replica migration replica source node destination node network traffic overhead DataNodes source node datanode replica data target node datanode replica replica related information metadata replica namenode mainly address datanode replica mapping relationship replica file belongs therefore replica creation data replica storage overhead namenode however propose replica creation algorithm creates replica data access frequency data file experimentally therefore data replica overhead replica creation mention advantage data replica outweigh disadvantage replica placement model accord propose dynamic replica creation strategy replica data increase newly replica appropriate DataNodes ensure load balance file proposes rps  strategy comprehensively considers datanode performance file cluster storage load network distance establish multi objective replica placement pareto optimal non dominate sort genetic algorithm obtain optimal replica placement node motivation non dominate sort genetic algorithm NSGA II basis replica placement heuristic algorithm NSGA II balance runtime quality NSGA II algorithm pareto optimal multi replica placement obtain addition linear objective function multiple sub objective function combine objective function introduce coefficient however optimization linear depends largely coefficient depends expert therefore linear cannot requirement multi objective optimization actual NSGA II replica placement multi objective optimization NSGA II obtain pareto optimal multi objective optimization without introduce coefficient multi objective optimization practical situation requirement multi objective optimization practical situation load balance related sub objective function datanode load performance performance indicator DataNodes mainly cpu processing capacity disk performance memory load capacity disk load capacity cpu processing capacity datanode model indicates frequency cpu datanode denotes cpu core denotes usage cpu cpu usage cpu load file performs data processing operation performance disk impact execution task therefore performance disk important indicator replica placement strategy model indicates disk maximum byte disk per indicates disk indicates parameter load capacity memory model indicates memory memory usage memory usage datanode memory load datanode obtain load capacity disk indicates disk indicates capacity disk cpu processing capacity disk load capacity memory load capacity disk node sub objective function datanode model file cluster storage load denote storage datanode assume data usage storage datanode model denotes data datanode denotes uniform data file average storage usage file cluster model indicates replica data indicates DataNodes denotes data already exists cluster sub objective function file cluster storage load model network distance network distance described topology leaf node DataNodes internal node network device router switch network topology distance node node distance DataNodes sum distance ancestor assume network distance source node target node maximum network distance network network distance coefficient source node destination node model network distance coefficient proportional actual network distance DataNodes network distance DataNodes bandwidth data transmission efficiency shorter replica therefore network distance sub objective function DataNodes define denotes data denotes transmission per data per multi objective optimize replica placement pareto optimal account datanode performance file cluster storage load network distance multi objective optimization replica placement model sub objective function correspond respectively multi objective function replica placement integration function account sub objective function satisfy constraint denotes feasible satisfies constraint generally global optimal cannot obtain multi objective optimization compromise pareto optimal NSGA II improve multi objective optimization algorithm NSGA pareto optimal obtain NSGA II uniform distribution convergence robustness NSGA II multi replica placement replica placement non dominate genetic algorithm chromosome cod fitness function binary encode suitable establishment data placement model therefore chromosome cod perform binary cod cod scheme chromosome cod express DataNodes gene chromosome express datanode gene bool variable replica data datanode replica datanode population algorithm consists series chromosome image KB image chromosome cod scheme accord mention chromosome cod initial population compose binary cod chromosome generate fitness function impact convergence algorithm optimization article objective function fitness function non dominant sort non dominate rank stratify population accord individual non inferior non dominate sort calculate parameter individual population individual dominate individual population individual dominate individual population indicates non dominate layer specific stratify population non dominate sort individual dominates non dominate individual label non dominate sequence perform individual individual stratify calculation distance distance dense surround objective function individual objective function sort average cube compose calculate individual distance calculation distance objective function distance boundary infinity distance ith individual consecutive pareto respectively maximum minimum mth sub objective function respectively population iteration individual distance closest optimal target selection crossover mutation selects objective function fitness function chooses roulette selection selection operation suppose population fitness individual probability individual selection operation optimal retention roulette selection individual fitness retain optimal retention roulette selection individual data replica involves DataNodes data replica datanode uniform crossover placement data replica crossover replica data datanode uniform mutation mutation parameter MP uniform mutation odd digit chromosome code designate mutation random mutation occurs mutation PM probability chromosome code exceed DataNodes data replica gene exceed DataNodes NSGA II multi objective replica placement mention NSGA II multi objective replica placement initialize population perform non dominate sort selection crossover mutation operation population obtain offspring population merge population offspring population population perform non dominate sort pareto pareto individual accord distance population genetic algorithm operation perform population obtain population operation algorithm satisfied pareto optimal obtain replica placement algorithm image KB image algorithm describes replica placement algorithm non dominate sort genetic algorithm algorithm replica data optimal replica data calculate algorithm obtain dynamic replica creation replica DataNodes remove replica placement operation perform sub objective function construct crossover operator mutation operator selection operator population termination configure population generate non dominate sort perform selection crossover mutation operation perform obtain population iteration loop population offspring population merge population non dominate sort perform distance individual calculate individual accord distance population population population iteration loop individual minimum distance multi objective optimization data replica accord optimal multi objective optimization algorithm return optimal replica placement scheme complexity analysis algorithm complexity complexity denotes sub objective function denotes population complexity denotes data mention complexity algorithm manage data access replica placement user access data replica placement user namenode resource manager DataNodes datanode replica data user access replica placement scene progress resource manager selects node target placement node replica data accord propose replica placement algorithm datanode transmit replica data datanode user access data data access replica creation replica synchronization strategy replica delayed update hdfs file client writes data data access replica data synchronize although default hdfs replica synchronization strategy advantage consistency user friendliness performance disadvantage data latency throughput environment DataNodes geographical location default hdfs replica synchronization strategy affected replica synchronization delay insufficient bandwidth network congestion eventually data replica fail synchronize latency throughput proposes delay adaptive replica synchronization strategy DA RS model strategy selective data replica synchronization assume redundant replica data client writes data replica synchronize return client calculate ensures client receives data replica successfully synchronize ensure reliability data access strategy selects DataNodes replica data synchronize data transmission channel replica synchronization DataNodes closer network distance client distance client datanode default node distance calculation hdfs sum distance node ancestor node sort DataNodes accord distance transmission channel client datanode synchronize replica data replica status accord replica synchronize replica synchronize unsynchronized replica data structure replica status rst synchronization status data replica facilitate subsequent synchronization replica replica data maintains rst rst entry rst location rst respectively location indicates datanode replica data indicates replica update indicates replica synchronize indicates replica synchronize rst replica data datanode data replica datanode datanode datanode respectively replica datanode synchronize replica datanode datanode synchronize image KB image rst replica datanode rst update client operation client initiate request data namenode namenode allocates replica data decides datanode datanode datanode replica accord formula namenode obtain replica rst update replica update rst namenode calculates network distance client DataNodes client closest node farthest datanode datanode distance client datanode datanode namenode return information client namenode return information client client writes replica datanode update rst datanode writes replica datanode update rst datanode update rst datanode finally datanode return data message client operation transaction image KB image update rst client data delay adaptive synchronization unsynchronized replica rst replica synchronization update postpone subsequent synchronous update replica trigger data synchronize becomes data load performance datanode replica synchronize replica data accord judgment DA RS replica synchronize client writes data rst replica DA RS calculates access frequency data tth accord assume data file average access frequency data file tth model access frequency data tth average access frequency data data define data replica synchronize rst replica datanode datanode replica data synchronize calculate load capacity datanode tth accord assume DataNodes average load capacity DataNodes tth model load capacity datanode unsynchronized replica datanode synchronize rst replica propose algorithm achieves eventual consistency client perspective selective replica synchronization reduces latency operation delayed synchronous update replica ensures reliability data adaptive synchronous update replica throughput replica synchronization algorithm replica delayed update algorithm describes replica synchronization algorithm delayed update algorithm replica data obtain client sends request data namenode synchronize replica DataNodes accord network distance synchronize replica data replica rst DataNodes rst replica data without synchronize replica average access frequency data average load capacity DataNodes calculate datanode load capacity replica becomes data unsynchronized data replica DataNodes synchronize algorithm return message replica synchronization complexity analysis algorithm complexity complexity complexity denotes synchronize replica denotes replica mention complexity algorithm image KB image replica recovery strategy load balance due heterogeneity node unreliability network datanode failure cluster datanode failure data lose data distribute file multiple replica allows DataNodes data access data fail DataNodes however failure DataNodes increase access non fail DataNodes increase load eventually load imbalance entire file cluster ensure load balance file data replica fail datanode restore non fail datanode load capacity cluster article proposes load balance replica recovery strategy LB RR failure datanode detection hdfs file hdfs DataNodes periodically generates heartbeat packet accord node status storage status sends heartbeat packet namenode interval namenode datanode fails cannot generate heartbeat packet namenode namenode heartbeat packet datanode within namenode failure datanode data recovery strategy selection data recover assume data data fail datanode denote access probability data tth mold denotes access data tth denotes access data tth replica location bandwidth recovery data model indicates data indicates hdfs replica data maximum available network bandwidth target node datanode replica data data recovery benefit data recovery replica selection factor data model suppose data replica fail datanode average replica selection factor data fail datanode model data data recover data recovery benefit recovery quickly recover hdfs performance rapidly improve restore data replica allows storage burden target node reduce selection target node hdfs load balance node affected factor disk datanode cpu capacity cache capacity comprehensively factor target datanode replica recovery remain amount node disk node disk load capacity disk availability datanode express denotes rate disk node cpu load capacity datanode model denotes frequency cup datanode indicates core cpu indicates remain usage rate cpu indicates bus cpu data frequently access DataNodes data memory significantly increase data access therefore cache capacity node significant impact load balance model denotes cache remain capacity denotes access data load capacity indicator datanode mention comprehensive load capacity datanode define coefficient disk availability cpu load capacity cache capacity satisfy target node LB RR calculates CP DataNodes replica data recover accord datanode CP target node data replica recovery replica recovery algorithm load balance image KB image algorithm describes load balance replica recovery algorithm algorithm data fail datanode obtain data replica selection factor data calculate average replica selection factor data calculate data recover fail datanode load capacity datanode calculate replica data datanode datanode load capacity cluster data restore datanode algorithm return message data recovery complexity analysis algorithm complexity denotes data fail datanode complexity complexity denotes DataNodes DataNodes without replica recover complexity mention complexity algorithm application scenario navigation architecture compute platform powerful compute storage resource navigation navigation obtain traffic data compute platform optimal improve efficiency reduce traffic pressure architecture compute platform layer core layer layer user layer user layer mainly equip smart mobile device layer compose roadside access server deployed network user layer core layer compose compute node monitor node management status monitoring layer mainly implement core layer traffic data generate user layer uploaded server via roadside access traffic data navigation usually related specific navigation task route planning traffic accident warn analysis route planning discus application propose algorithm navigation platform dynamic replica creation strategy user request node monitor central user related data access information performance server server perform route planning task perform replica creation accord information user data access data access frequency compute server central markov model predict data access frequency future data access frequency data access response dynamic factor calculation dynamic replica creation factor addition factor data file data belongs calculation replica creation factor factor data file static factor compute server considers dynamic static factor calculate optimal data replica accord compute server increase decrease data replica accordingly user access requirement data image KB image navigation architecture replica placement strategy central calculates dynamic replica creation accord optimal replica calculate dynamic replica creation strategy replica currently exist datanode dynamic replica creation positive replica data increase manager server formulates correspond replica placement sub objective function transmission relative load node performance node non dominate sort genetic algorithm sub objective function finally placement node replica derive replica data node accord data dynamic creation dynamic replica creation negative user access demand data reduce data replica reduce reduce burden storage resource datanode manager server deletes data replica DataNodes datanode load preferentially delete data replica optimal data replica satisfied user performs route planning navigation navigation quickly obtain data nearby server replica data perform route planning performance evaluation experimental environment experimental setup performance algorithm propose mainly linux environment operating ubuntu lts file hdfs hardware environment experimental platform compose host central compose performance host central VPN network rack rack deploys DataNodes network topology architecture described node cluster exchange information tcp IP protocol ethernet bandwidth datanode node network topology heterogeneous server node environment obtain experimental node hardware parameter hardware parameter environment  GB disk GB  core  core      core  core  core  core  core  core      core  core  core hardware parameter central  GB disk GB  xeon  xeon performance framework apache jmeter evaluate propose replica creation algorithm apache jmeter application load functional behavior performance apache jmeter performance static dynamic resource file  perl script java data query ftp server simulate load server network strength analyze overall performance load graphical analysis performance server script behavior concurrent load apache jmeter simulate data access situation access frequency data calculate accord data access situation access frequency data calculate data propose replica creation algorithm public benchmark load compute compute environment apache jmeter suitable evaluate performance propose algorithm related apache jmeter benchmark performance algorithm related compute environment related environment author apache jmeter evaluate response throughput performance serverless framework compute environment configure apache jmeter perform request various concurrency author apache jmeter simulates amount user access compute environment apache jmeter evaluate packet throughput network environment generate legitimate http packet target node author apache jmeter simulate user request data compute environment author evaluates throughput compute environment apache jmeter simulate user request service author apache jmeter simulate user request perform performance propose public recommendation algorithm author propose novel software define storage framework environment apache jmeter automate prefetching performance propose framework simulate http request generate workload mention apache jmeter public benchmark widely compute compute environment suitable evaluate performance propose performance metric response evaluate performance propose dynamic replica creation algorithm response SRT storage utilization  model indicates submit indicates indicates  model indicates DataNodes storage capacity datanode indicates storage datanode replica average throughput update UC evaluate performance propose replica placement algorithm model indicates data indicates data indicates reading data UC express network distance source node destination node source node datanode replica data target node datanode replica network distance described topology leaf node DataNodes internal node network device router switch network topology distance node node network distance DataNodes sum distance ancestor response rrt  SRT evaluate performance propose replica reconstruction strategy rrt model indicates client data interval client request data client data indicates data data tdw evaluate performance propose replica synchronization strategy tdw model indicates data benchmark algorithm   benchmark algorithm evaluate propose dynamic replica adjustment algorithm   benchmark algorithm evaluate propose replica placement algorithm propose replica synchronization strategy benchmark algorithm hdfs default replica synchronization strategy ERS hdfs default replica recovery strategy  benchmark algorithm evaluate propose replica recovery strategy benchmark dynamic replication management  strategy comprehensively considers popularity data replication factor active node dynamically calculate optimal replication factor accord data factor replication factor increase data replica dynamically adjust replica novel dynamic data replication strategy  strategy improves access efficiency storage remain qos attribute strategy account file access replica location dynamically data replica novel data replica placement mechanism adjustable replica deployment strategy  mechanism initializes replica replica adjust replica access replica placement mechanism remain storage capacity node tends replica node capacity genetic algorithm data replica placement strategy  strategy considers data network bandwidth data replica data data reduce data transmission default replica recovery strategy hdfs replica data fail datanode restore random target node proactive replication strategy  strategy comprehensively considers cpu utilization target node disk usage popularity replica recover data replica fail datanode target node default replica synchronization strategy hdfs client writes data replica data synchronize data return client enhance replica synchronization strategy ERS whenever client request replica data update remain replica immediately update data access frequency difference access frequency data file analyzes  lab file storage access data file user within proportion access frequency data file proportion access frequency data file data access data access experimental data file access infrequently data access therefore propose replica creation algorithm data replica replica data overhead image KB image access frequency data file analysis performance comparison rda GM exist replica creation algorithm evaluation SRT performance data access SRT algorithm increase data access frequency user access data increase occupancy compute resource storage cluster increase increase access frequency data access per propose algorithm benchmark SRT performance increase access frequency propose algorithm creates replica data replica user data service improves performance SRT SRT performance propose algorithm gradually benchmark addition propose algorithm   SRT performance  performance evaluation algorithm submit  algorithm increase submit increase addition propose algorithm   respectively  propose dynamic replica creation algorithm satisfy data access premise data replica increase remain capacity DataNodes performance comparison rps  exist replica placement algorithm distribution data remote rack hdfs default replica placement strategy replica data randomly replica DataNodes rack hdfs default replica placement strategy performance DataNodes load balance greatly affect load balance file distribution data remote rack propose replica placement strategy data replica distribute rack obviously rack rack mainly propose algorithm fully considers data transmission network distance load balance load cluster unchanged replica rack load capacity datanode improve overall performance hdfs ensure load balance load balance propose replica placement strategy remote rack significantly default replica placement algorithm hdfs propose replica placement strategy compute storage resource access frequency data data access per affect performance data MB MB algorithm increase increase data access frequency increase access frequency data increase probability user successfully access data increase data increase algorithm decrease mainly storage capacity DataNodes limited data replica datanode replica placement algorithm reduces quality data service reduces algorithm decrease data increase mainly storage capacity DataNodes limited data replica DataNodes replica placement algorithm reduces quality data service reduces addition propose algorithm   average respectively mainly propose algorithm replica suitable DataNodes requirement data access user image KB image distribution replica remote rack image KB image performance evaluation replica placement algorithm UC performance evaluation replica placement algorithm UC express network distance source node destination node source node datanode replica data target node datanode replica expands DataNodes observes UC DataNodes evaluate scalability propose replica placement algorithm UC algorithm increase DataNodes DataNodes increase network device router switch DataNodes increase increase network distance DataNodes propose replica placement algorithm   UC mainly propose algorithm considers transmission node allows propose algorithm data node update mainly propose algorithm account network distance DataNodes perform replica placement operation UC propose algorithm performance evaluation propose replica reconstruction algorithm failure datanode cluster rrt performance datanode fails rrt algorithm remains normal min datanode fail increase rrt algorithm datanode fails propose algorithm restore rrt performance normal faster benchmark mainly propose algorithm prioritizes recovery data replica access frequency enables data replica user data service faster thereby reduce data response evaluation performance propose algorithm datanode failure datanode failure min reduce algorithm datanode fails algorithm increase increase mainly algorithm perform data recovery operation increase propose algorithm faster benchmark rrt propose algorithm preferentially restores replica data access frequency improves data throughput performance evaluation SRT algorithm submit SRT algorithm increase increase submit mainly submit increase compute load cluster gradually increase available compute resource gradually decrease response increase addition propose algorithm outperforms hdfs  SRT illustrates propose algorithm data replica suitable DataNodes improve performance file performance evaluation propose replica synchronization algorithm describes tdw performance evaluation algorithm data tdw algorithm increase increase data fix hardware configuration data datanode addition propose algorithm hdfs ERS tdw mainly propose algorithm return message user synchronize replica reduces data evaluates performance propose algorithm concurrent increase concurrent concurrent data increase throughput addition hdfs default algorithm mainly hdfs default policy update data replica consistency data replica date hdfs default algorithm propose algorithm slightly hdfs default strategy ERS mainly propose algorithm synchronously update data replica data data replica reduces performance extent idle unsynchronized replica become data data replica synchronize improves performance propose algorithm image KB image performance evaluation  replica reconstruction algorithm image KB image performance evaluation SRT replica reconstruction algorithm image KB image performance evaluation tdw replica synchronization algorithm image KB image performance evaluation replica synchronization algorithm conclusion future aim dynamic replica creation proposes dynamic replica creation strategy experimental propose dynamic replica creation strategy effectively reduces response aim replica placement proposes replica placement strategy experimental propose replica placement strategy reduce response improve data throughput storage utilization ensure load balance addition data replica synchronization data recovery fail DataNodes proposes delay adaptive replica synchronization strategy load balance replica recovery strategy effectiveness future evaluate effectiveness propose algorithm experimental environment performance propose algorithm public benchmark addition replica migration strategy reduce replica migration replica placement improve network resource utilization