memory efficient multidimensional data structure dense sparse storage arise numerical software application data structure perform equally across multiple computer architecture CPUs gpus purpose developed MATAR software library allows creation intricate data structure portable across disparate architecture kokkos performance aspect achieve contiguous memory layout contiguous multidimensional multi dense sparse matrix array hence MATAR MATAR capability improve memory utilization performance programmer productivity scientific compute achieve fitting available memory minimize memory load load memory efficient document describes purpose implementation data performance baseline application code keywords performance portability productivity memory efficiency gpus dense sparse storage introduction code computational physic code easy  programmer productive code performant code portable across multiple computer architecture arise data layout code simplify developed software library MATAR flexible data structure scientific application delivers performance code within complex routine application layout data hurdle performance code sparse data unstructured data commonplace complexity data structure furthermore array data structure implementation multidimensional inadequate achieve desire performance MATAR improve performance data structure within interface portable across multiple architecture MATAR gpu capability kokkos portability library dense array straightforward implement gpu sparse data representation within constraint gpu contribution data structure data efficiently memory easy interface data access modifier operator data structure kokkos multiple cpu gpu architecture performant portable manner remainder document background decision undertake project overall goal MATAR methodology code discussion mental model data laid access discus MATAR portable across multiple computer architecture kokkos performance multiple CPUs gpus finally utility MATAR contact detection production  code MATAR discus MATAR finite library  background dynamic memory allocation introduce program research efficient memory allocation notable review memory allocator performance criterion mostly allocator execute memory allocation important interested performance data performance data mostly orthogonal initial allocation certainly impact algorithm allocation data locality data access contiguously focus memory allocation within kernel  performance impact usage memory slab allocator slab allocator memory allocation subgroup organize around memory impact memory allocation translation lookaside buffer tlb reduce significantly improve performance another performance issue memory allocation cache allocation potentially mapping cache uniform manner data locality numa partition memory necessitates multidimensional array allocator contiguous memory approach recent elia  fernandes review allocator multi processor environment recently memory allocation package  package freebsd tcmalloc google hoard focus multi thread multi processor application another memory management strategy performance application memory pool memory pool utilize pre allocate buffer application allocation memory pool tune application performance generic memory allocator memory pool pre date dynamic memory allocator fortran application heap around lack dynamic memory allocation capability memory pool application performance network communication computer frame rate graphic memory pool cod directly application purpose pool boost pool library performance compute gpus  package memory pool memory overlap computational module   package gpu memory pool neural network application multidimensional array exist program community capability standard template library STL vector vector dimensional 2D array performant reasonably dimensional array dimension STL collection memory java collection framework focus convenience performance extensive alternative java collection framework demonstrate performance conclusion array implementation improvement link collection jung developed improves performance simply analyse program usage STL recommend container unfortunately usage specify initial container avoid expensive reallocation quantify explicit memory management parallel code seek performance processor reallocation others avoid smart usage STL minimize easy prey convenience unaware performance penalty boost multidimensional array library multidimensional array template programmer library dense dimensional array template user contiguously allocate array interoperate standard library container algorithm addition library allows programmer sub array array dimension array specify memory layout array array style fortran style memory layout specify array array indexed reshape array array dimensionality along dimension preserve array resize array array dimensionality along dimension without necessarily preserve array boost multidimensional array library  library powerful multidimensional array capability another software package matrix template library develops flexible multidimensional data structure matrix operation numerical solver warwick data wds another template library multidimensional array capability focus programmer data structure highly interoperable exist codebases incur minimal overhead specifically warwick data collection controller functionality programmer variable allocate manage underlie memory desire data structure easy access underlie memory desire data structure compose collection warwick data easy programmer replace exist data structure 2D array highly specialized container warwick data inspire performance compress sparse multi data structure    interface performant data structure warwick data exist codebases without significant conversion code codebase contains function regular 2D array programmer function warwick data data structure instead intend memory layout array programmer without modify function account memory layout replacement data structure handle entirely warwick data multidimensional array implementation  proposal accepted standard  originate multidimensional array kokkos performance portability library library cite motivation multidimensional array easy powerful application performance contiguous memory implementation vector vector approach target purpose focus cpu application regular multidimensional array kokkos extend gpu multidimensional array sparse data array important performance compute matrix solver community sparse storage scheme developed delve sparse data array develop simplify array contiguous memory goal extend kokkos eventually standard sparse array broader data representation exploration implementation library eventually coalesce model usage goal code computational physic data laid memory access data efficient contiguous memory access generally performant hardware allows data vectorization contiguous memory rarely efficient programmer perspective data structure contiguous memory become challenge complexity increase rarely contiguous memory access easy achieve arise involve  mesh  mesh connectivity structure entirely initial generate symmetry structure simplify mesh building node node node node data structure information necessarily rag amount information varies building mesh complexity construction promise mesh complex geometry image KB image  mesh lend easily implementable contiguous connectivity structure amount information connectivity another eulerian code multiple exist inside throughout code approach multi code performant information laid access contiguously memory memory application centric centric performance analyze rag data layout image KB image application multiple per eulerian arbitrary lagrangian eulerian  rag memory layout code centric centric numerical derive multidimensional matrix calculation manipulation matrix matrix instead processor manipulates data contiguous access fuse goal MATAR data structure easy manipulation access data contiguously memory user performance benefit data orient productivity benefit orient data orient orient review definition orient program data orient introduce around orient program OOP prominent program paradigm become prefer program orient program solves constitutive relation manipulate instead manipulate information individually although orient program mental relationship capability performance limitation overlook significant drawback orient program typically efficient paradigm listing variable function performance sub optimal layout data memory non contiguous memory layout variable radius memory load cache data sequentially memory load become bottleneck optimize code performance listing image KB image listing orient program manipulates trait laid memory radius sequentially calculation generally per cache load memory laid radius contiguous sequential memory load multiple cache faster allows vectorization orient program creates orient program approach apply multi physic multi implementation image KB image memory layout array data load memory instead data variable contiguously memory data sequentially memory load memory bottleneck performance focus shift data layout access reduce memory load others depth data orient DOD approach performant programmer orient orient program paradigm focus data memory shift focus onto data access data data contiguously memory access algorithm sequential data access maximize cache usage opportunity vectorization rag data structure amount memory minimize data contiguous memory bandwidth limited code yield performance benefit cache cache cache generally performance cache precision roughly increase performance factor mostly cache memory memory avoid additional load associate penalty data cache load dynamically allocate multidimensional array important feature user ability dynamically allocate array via keywords delete explicit multidimensional array dynamic memory allocation array extend multidimensional array listing conventional dynamically allocate memory heap 2D array listing image KB image listing dynamically allocate delete 2D array instance programmer multidimensional array usage approach listing however programmer conventionally allocate multidimensional array dimensional array correspond code cumbersome error prone error forget deallocate memory upon termination application memory leak crash code addition deeper approach listing issue multidimensional array conventionally allocate necessarily reside contiguously memory memory performance image KB image generally malloc allocate multidimensional array necessarily memory contiguously laid hardware severely limit performance memory random instead continuously data array scatter global memory impact flop per load lower overall cache efficiency impact array cache efficiency importantly code array necessarily portable parallelizable multidimensional array allocate cannot trivially program gpus cannot array array cannot format file multiple processor cannot easily portion array programmer dynamically allocate multidimensional array allocate multidimensional array contiguously memory listing listing image KB image listing code allocates 2D array contiguously increase dimension complexity allocate array contiguously increase memory delete grows generally error code listing certainly contiguously allocate memory multidimensional array rudimentary approach programmer obtain memory allocation efficiency cache efficiency addition portability identify earlier address however approach error prone programmer caution allocate  array programmer multidimensional array issue motivate creation MATAR goal MATAR MATAR header library development los  national laboratory aim address issue identify previous regard contiguous memory layout multidimensional sparse data MATAR aim user data structure easy data structure library expose interface intuitive data access modification portable data structure serial parallel setting multiple cpu gpu architecture kokkos program model performant data structure regardless data sparsity access modifies data efficiently memory MATAR data structure minimum amount memory complex data layout allows programmer access manipulate data easily performance cache hierarchy methodology MATAR data structure combine organization focus orient program data allocation management data orient MATAR data structure pseudo allocate multidimensional dense sparse data contiguous memory access memory dimensional 1D array MATAR data structure consists 1D array allocate contiguous memory meta data specifies array dimension data treatment user access modify array consistent mental model MATAR data structure user 2D array expose access array index user index calculation MATAR prevents user 2D array 1D array dimensional array compile debug flag allows debug affect performance production addition MATAR additional detail memory underlie array associate meta data allocate cpu gpu MATAR data structure categorize criterion access refers data laid format format index data indexed indexed data sparsity data densely packed sparsely packed various MATAR data structure grouped criterion sub detail importance criterion structure allocate access image KB image MATAR data structure dense data access modification organize memory access index image KB image MATAR data structure sparse data access modification organize memory access index sparse data structure indexed important distinction remainder MATAR array matrix data structure allocate memory attribute dimension rag data structure allocate memory additional metadata stride array argument MATAR allocate data instead metadata MATAR array memory pointer pre exist data structure distinction important MATAR access manipulate data data structure data layout performance compute hpc community extensively fortran hpc practitioner fortran code numerical linear algebra subroutine  code difficulty exist fortran code correctly within code ensure exist access modify multidimensional array appropriately respect fortran code difficulty arises fortran data memory memory allocate fortran multidimensional array laid memory layout fortran user ability allocate array contiguously memory via contiguous attribute keyword heavily fortran compiler allocate array contiguously without programmer explicitly multidimensional array laid memory layout programmer  memory allocate earlier fortran multidimensional data dimensional array wise dimensional array wise image KB image memory layout 2D array fortran fortran data laid traverse data laid MATAR considers memory layout optimal performance important memory layout performance achieve data access data laid memory loop structure data laid machine memory listing slowest loop structure loop structure reverse fortran code listing image KB image listing memory index contiguous memory data access contiguously loop index loop structure loop interchange memory fetch index array cache performance vectorization access data laid memory ensures cache fully utilized MATAR dense data structure matrix array contiguous memory allocation dimensional 7D data consistent fortran standard another benefit simplifies convert scientific fortran code code dense data structure MATAR data dense data array matrix data allocate contiguously memory access operator difference array matrix index array matrix array traditional index matrix index consistent index normally define mathematics image KB image MATAR style dimensional data user interpret laid contiguous memory listing carray  dimension MATAR data structure desire data specify  bracket dimension parenthesis comma MATAR currently 1D 7D array matrix fortran standard listing image KB image listing access   MATAR data index contiguous memory data primitive data int float complex struct caution struct array structure performance however array structure array inner array vector perform creation   exactly notable exception index contiguous memory legacy code unfeasible code replace traditional array MATAR data alternative programmer pre exist array data access programmer exist array contiguously allocate memory treat multidimensional array manipulation benefit programmer pas pre exist memory function reference memory access contiguously memory manipulate similarly array access memory difference allocate memory simply pointer index memory pre exist data manipulate data contiguous memory access 3D array programmer memory reference function listing memory modify pre exist array modify data data pre exist array modify treat underlie data dimension bound underlie array user operation numerically consistent whatever operation data underlie structure data programmer image KB image specify desire index pre exist memory 3D array access carray image KB image necessarily index pre exist array user defines dimension dimension listing image KB image listing reference function modify listing pre exist array benefit treat data array access modify data contiguously memory listing reiterate slice python matlab simply access underlie contiguously allocate data matrix array whatever matrix memory listing clarify listing image KB image listing allows programmer access already exist contiguous array treat treat dimension underlie data sparse data structure MATAR data structure sparse data access modification data structure category rag data structure dynamic rag data structure compress sparse array overview category data structure rag data structure computational physic code data grouped data layout memory issue arise 2D array laid image KB image contiguous array unevenly rag non trivial allocate memory efficiently structure standard approach programmer allocate individually allocate dense array  link performant necessarily contiguous memory inefficient expensive respect memory usage treat sparse array dense array programmer sparse array allocate memory data gain benefit approach ensure underlie memory contiguously allocate instance MATAR rag data structure programmer benefit sparse data intuitively efficiently without pitfall standard allocation programmer visualize data  MATAR data structure associate data layout indexed image KB image programmer visualize data previously sparse array  MATAR associate data memory underlie memory contiguously allocate extra array index implement rag data representation gpu kokkos challenge sparse data representation limit kokkos cuda effort clever within limitation hardware MATAR  data structure nearly identical  structure allows programmer access modify data laid format instead dynamic rag data structure MATAR programmer dynamic extendable rag data structure rag array earlier additional buffer available programmer entry programmer increase individual whenever arises buffer specify upon construction dense array dense array treat dynamic rag array application programmer resize MATAR dynamic rag array buffer rag data structure slight performance faster overall memory allocate propagate programmer traverse data format MATAR  data structure image KB image programmer visualize data previously sparse array  MATAR associate data memory underlie memory contiguously allocate regular  extra array metadata index furthermore  allows programmer append additional data buffer motivation rag data structure link data structure linear series pointer pointer typical link implementation flexible representation dynamic delete unlike traditional array although link flexible significant drawback access sequence therefore quickly become expensive sort guarantee link contiguous memory data locality scatter throughout global memory similarly easily gpu repeatedly allocation heap memory prohibitively memory intensive operation link generally avoid parallel numerical code avoid heavily modify insert delete MATAR dynamic rag data representation address drawback link rag dynamic data structure programmer leverage flexibility link usable parallel setting CPUs gpus data locality contiguous memory allocation difference MATAR dynamic data structure link link node throughout dynamic rag structure append buffer   compress sparse array array non zero entry finite difference matrix typically desirable non zero entry array commonly format compress sparse 2D typically non symmetric array compress storage CRS format yale format data compress wise compress storage CCS format   format data compress wise brevity sake discus format sparse 2D typically non symmetric array non zero entry typically csr implementation non zero data via 1D array val array non zero traverse ptr array entry ptr index val entry col ind array index correspond val entry sparse 2D array array csr format MATAR cpu gpu implementation csr CCS data structure image KB image sparse array non zero entry parallelization MATAR built performance developer scientist alike trend technology focus performance portability kokkos obvious choice couple program model focus concept objective kokkos environment code nearly performance multiple cpu gpu architecture MATAR specifically incorporate target gpu architecture diverse hpc leverage kokkos MATAR complex data structure user interface kokkos MATAR extensive collaboration kokkos developer incorporate kokkos inside MATAR interface user portion involve MATAR data function user hide gpu pointer memory management complex index inherit library gpu memory manage MATAR user costly initialization parallelize optimize inside MATAR library specific function label kokkos macro kokkos function function return data member gpu data structure allocate initialize almost exactly non kokkos counterpart kokkos confuse MATAR instead array difference MATAR kokkos within rag data structure constructor preliminary calculation rag array index ideally conversion loop kokkos parallel loop however cuda version lambda capture inside function lambda extend kokkos parallel constructor preserve functionality appearance MATAR extra background within MATAR initialization user furthermore kokkos functionality gcc couple cuda virtual function MATAR ability data integer library data structure important demonstrate ability data complex ability MATAR data involve virtual function fairly trivial cpu complicate involve gpu kokkos ability data copying attribute function constructor destructors instantiation however virtual function extra ensure virtual function derive counterpart device gpu host cpu kokkos framework adequate explanation specific kokkos echo simplification initialize host host vtable access gpu error occurs device knowledge host pointer initialize gpu virtual function pointer gpu pointer unfortunately kokkos initialize host kokkos gpu situation becomes complex derive within accommodate situation obviously scope application application programmer MATAR helpful abstraction extend derive inside situation  application algorithm ensure pointer location algorithm image KB image algorithm allocate polymorphic virtual function MATAR goal MATAR performant standard data structure link array vector performant variety metric improvement application data volume performance MATAR dynamically allocate array performance metric memory bandwidth memory bandwidth memory bandwidth advanced vector extension avx precision DP  obtain performance metric mention performance choice  linux specific suite command hardware counter programmer report information application specifically   version marker api mode data kernel code initialization timing performance diagnostics babel benchmark matrix matrix matrix vector MVP contact detection algorithm HOSS  application lanl HOSS software integrates solid mechanic finite discrete computational fluid dynamic HOSS capable simulate strain rate harsh  environment application construction mining defense technique multi physic production application cpu intel skylake cpu ghz gcc detail respect subsection detailed reproduce available github site MATAR focus MATAR multidimensional data structure contiguously allocate memory faster traditional dynamically allocate array intricate sparse MATAR data structure efficient traditional sparse representation application cpu cpu performance portion focus understand baseline performance bandwidth data volume vectorization MATAR  ViewCArray traditional dynamically allocate array denote trad array babel benchmark matrix matrix matrix vector MVP operation heavily numerical operator validate effectiveness MATAR data orient methodology matrix data structure difference MATAR array matrix index refer array matrix allocate identically memory fortran style babel benchmark carray sufficient MATAR ideology traditional array MATAR data structure contiguously allocate access contiguous memory fortran style wise style wise perform similarly babel benchmark therefore style array extend matrix fortran style data structure babel benchmark benchmark kernel sum triad theoretical sustainable memory bandwidth MB array allocate stack storage memory difference contiguous memory dynamically allocate memory modify babel dot kernel array allocate heap babel MATAR carray ViewCArray traditional array traditionally dynamically allocate array 1D 3D 1D array proof concept par traditional array dimensional representation MATAR capability intend array 1D array memory divisible ideal vectorization 3D dimension amount 1D MATAR ViewCArray carray slightly perform traditional array kernel sum triad dot kernel kernel slowest carray millisecond dimensional  benchmark variation MATAR carray ViewCArray kernel ViewCArray faster carray dot overall significant overhead MATAR 1D memory data  min max trad  sum triad dot prod  sum triad dot prod  sum triad dot prod ViewCArray minor variation significant overhead implementation MATAR data structure 1D 3D average compute timing ignore cache report standard  steady truncate significant digit millisecond dimensional babel benchmark MATAR excels operation dimensional data kernel exclude dot faster decrease likely attribute contiguous memory layout maximize cache usage multidimensional array guaranteed continuous scatter throughout global memory data  min max trad  sum triad dot prod  sum triad dot prod  sum triad dot prod timing 3D MATAR carray ViewCArray kernel MATAR carray ViewCArray faster dot faster triad kernel MATAR significant dimensional data structure dynamically allocate multidimensional array guaranteed contiguous scatter throughout global memory performance benefit likely due contiguous memory allocation data laid memory therefore maximize cache usage memory load per operation hence decrease image KB image memory bandwidth data volume 3D triad kernel carray ViewCArray outperform traditional array bandwidth rate spectrum ViewCArray bandwidth carray traditional array data volume overall explicit pragma omp directive dimension vectorization flag automatically   module vector module attempt optimize compiler flag architecture 1D data structure precision flop vectorized sum triad kernel however consistent vectorization 3D achieve vectorization dimension MATAR carray ViewCArray multidimensional data unrolled allocate 1D contiguous array dimensional data understand vectorization inconsistency triad kernel 3D 4D array gcc intel compiler 4D dimension triad compiler arithmetic intensive vectorized experimentation pragma omp directive vectorization achievable gcc compiler without pragma whereas intel compiler vectorized pragma directive  per intel gcc compiler 3D 4D triad intel compiler pragma omp directive whereas gcc compiler FLOPS vectorize vectorization avx precision DP variation FLOPS due compiler implement loop future research conduct compiler vectorization flag sensitivity MATAR multidimensional traditional array gcc intel   trad array  trad array unclear MATAR traditional array compiler sensitive pragma directive obtain consistent vectorization complicate task merit research scope compiler sensitivity MATAR apply data structure vectorize combination compiler flag per compiler version deeper analysis individual compiler vectorization flag future traditional array amount data volume meaning hardware load data contiguous memory data volume indicator traditional array significantly counterpart dimensional data structure data scatter throughout memory recall listing therefore increase amount memory load per operation matrix operation performance tensor inner computation numerical therefore timing heavily operation matrix matrix matrix vector MVP important matrix vector MVP extra MATAR carray FArray matrix multiplication matrix traverse wise memory layout fortran array image KB image matrix matrix matrix inner matrix matrix combination carray FArray perform carray perform slowest although  contiguous memory carray perform poorly maximize performance MATAR  access carray unrolled memory wise however matrix traverse wise already load cache memory load obtain matrix computation perform memory complex trad array becomes fragment global memory performance drastically illustrates actual access matrix optimal access carray memory layout access identical memory layout FArray carray amount data volume overall data volume extra memory fetch obtain significant carray contiguous memory alone guarantee performance contiguous memory access optimally performant timing matrix matrix combination matrix carray slowest likely due access carray layout access contiguous memory layout performance data  minmax trad array carray image KB image 2D carray explain memory layout carray contiguous memory wise maximize cache usage access however matrix matrix operation matrix traverse already load cache ignore memory load per calculation array actual access latter matrix image KB image memory bandwidth data volume matrix matrix access contiguous memory layout vital performance benefit carray data volume overall access matrix memory layout carray memory load obtain operation analysis bandwidth data volume bandwidth data volume closely traditional array matrix vector MVP traditional dynamic array matrix vector carray matrix carray vector carray matrix FArray vector operation matrix vector unlike significant difference vector option memory allocation access 1D FArray carray identical traditional array dynamically allocate 2D array matrix 1D array vector carray carray vector carray 2D matrix FArray vector image KB image matrix vector vector inner matrix vector vector inclined FArray suitable 1D memory allocation access FArray carray timing matrix vector matrix millisecond carray FArray vector combination perform MATAR data structure faster traditional 2D array amount data  minmax trad array carray matrix MATAR data structure faster traditional array amount deviance carray FArray vector mention difference 1D memory layout access data access consideration appropriate data structure FArray carray rag data structure performance novel contribution rag data structure MATAR data structure efficient representation rag data numerical computational physic issue arises multiple physic simulation rag data efficiently important computational physic application benchmark analyze performance MATAR rag array rag 2D traditional array trad array dynamically allocate 2D array varied randomly average display display precision flop vectorization rag RR benchmark millisecond data  RR MATAR RR trad array precision flop advanced vectorization extension rag benchmark traditional array rag vectorize flop flop data   RR  avx RR trad  avx MATAR rag RR data structure faster traditional array triad kernel increase traditional array dynamically allocate varied data scatter throughout memory performance improvement memory coherence commonly gpu operation roughly faster rag data structure equivalent 2D dense array compiler vectorize traditional array MATAR RR sum triad kernel rag initialize access 2D fix collapse loop pragma directive dimension constant therefore pragma omp directive inner loop memory bandwidth data volume plot triad benchmark inconsistency bandwidth data volume 3D benchmark kernel bandwidth rag data volume associate data volume decrease MVP sum triad kernel image KB image memory bandwidth data volume rag RR triad kernel RR faster however bandwidth data volume RR traditional array unclear sum kernel rag rag triad kernel overall rag array faster depth analysis regard data volume bandwidth limited profile hardware counter metric related cache performance 1D 3D data structure rag MATAR traditional array overall bandwidth cache bandwidth comparable across exception rag structure MATAR variation bandwidth traditional rag implementation additionally MATAR data structure consistently traditional counterpart sometimes magnitude memory performance deeper insight improvement MATAR data structure performance comparison MATAR data structure traditional array cache bandwidth cache triad operation data  mbytes  3D RR trad  3D RR verify potential gain MATAR dynamic rag data structure link HOSS  application specifically within contact detection algorithm within HOSS within simulation link simulation progress node link insert contact remove longer contact depth understand contact detection algorithm refer reader code maintain exist code link modify code MATAR  array  data structure input file cartesian coordinate freely performance contact detection algorithm data structure command  information bandwidth data volume vectorization information  code compile gcc intel xeon cpu ghz without accelerator performance link dynamic rag data structure evaluate iteration HOSS contact detection algorithm evaluate difference data structure quantify difference structure simulate production statistic average minimum maximum sum calculate respective data structure iteration reasonable iteration HOSS building data structure structure comparable dynamic rag array slight improvement link data data structure dynamic rag array load memory link code drastically decrease  contact detection algorithm compete HOSS implementation dynamic rag array faster building initialize data structure performance   DP  avx DP   compute statistic compete HOSS implementation iteration drastic improvement  link increase performance due contiguous memory access minimizes amount memory load performance   DP  avx DP  image KB image memory bandwidth data volume HOSS stress link bandwidth data volume stress data volume attribute link data scatter throughout global memory dynamic rag array allocate contiguously memory load memory bandwidth data volume significantly overall plot  HOSS code 2D contact expensive HOSS reduce intel compiler gcc compiler overall HOSS code reduce intel gcc overall HOSS code algorithm routinely benefit dynamic rag array link importantly dynamic rag array MATAR feature link easily handle link portable across multiple computer architecture parallelize MATAR portability parallelization dynamic rag array access 2D array eliminate sort overhead link QR decomposition performance data representation QR decomposition matrix factor orthonormal matrix upper triangular matrix QR orthonormal vector obtain gram schmidt variation obtain  rotation householder transformation gram schmidt  vector vector projection QR  define projection vector onto vector defines inner gram schmidt intermediate matrix orthogonal define matrix 1D discretized laplacian operator homogenous dirichlet boundary average minimum maximum elapse QR algorithm algorithm obtain average matrix FArray efficient data representation carray significantly underperform carray exhibit matrix matrix confirm observation mismatch memory layout access negative impact performance QR algorithm matrix representation fetch load QR decomposition matrix MATAR dynamic array average FArray perform traditional array carray perform significantly dimension increase behavior matrix matrix  max min carray FArray reg carray FArray reg carray FArray reg image KB image average elapse QR decomposition data representation increase FArray remains superior regular dynamic array performance carray due layout ideal algorithm matrix situation matrix matrix linear algebraic algorithm matrix multiplies vector vector operation saving MATAR algorithm kokkos performance performance almost identical traditional kokkos 1D surprising data structure identical 3D kokkos data conversion dimension allocation breakthrough performance discover importance data layout loop index gpu kokkos data layout kokkos gpu additionally kokkos allows user handle loop lambda argument apply factor performance gpu MATAR additional option  versus  optimal gpu data layout loop index kokkos lambda int int int performance int int int assume access data structure MATAR optimization complexity hidden simply user   target architecture timing 1D 3D parallel cpu gpu 1D 3D benchmark kokkos cpu openmp max thread millisecond average benchmark ibm data  prod  trad kokkos   trad kokkos  1D 3D benchmark kokkos gpu millisecond average benchmark nvidia data  prod  trad kokkos   trad kokkos  kokkos optimization within MATAR specific whichever data layout chosen investigation optimal layout combination discover mathematical operation optimize data layout formula multiplication array perform  assume default kokkos setting gpu however matrix multiplication performs   MATAR facilitate optimization data structure declare layout data layout layout performance caveat user ensure operation valid access matrix  become symmetric ensure layout layout 2D matrix across serial cpu parallel gpu parallel image KB image 2D matrix matrix ibm architecture nvidia gpu cpu serial cpu parallel max thread gpu parallel summary conclusion introduce library performance portability productivity dense sparse data representation multidimensional dense data unrolled 1D array fortran FArray memory layout carray data structure allocate contiguously memory sparse data structure rag array dynamic rag array sparsely array sparse data unrolled 1D array allocate contiguously memory nearly contiguously dynamic rag various validate contiguous memory layout sequential data access improves performance furthermore performance portability favorable across cpu gpu architecture data structure cpu MATAR data structure dense array competitive traditional dynamically allocate 1D array faster traditional 3D array rag data structure yield slightly faster around percent traditional dynamically allocate rag array MATAR dynamic rag data structure  nearly twice dynamic link HOSS contact detection algorithm furthermore  portable across architecture  HOSS code yield intel gcc reduction contact expensive code intel gcc reduction overall 2D performance portability MATAR demonstrate benchmark multi core ibm cpu gpu MATAR dense array favorably traditional kokkos architecture gpu faster core cpu max thread performance portability MATAR demonstrate matrix matrix multi core cpu gpu linear multi core cpu gpu faster core cpu max thread MATAR data structure competitive advantage traditional array link due performance gain contiguous memory portability architecture kokkos addition sparse data representation MATAR already extensively finite library  routine numerical continuous discontinuous  mesh data structure linear curvilinear version code code github although focus benchmark validate theory data orient remains obtain consistent vectorization MATAR array dimension 1D 7D various compiler theoretical deeper focus performance portability aspect explore quantitative measurement  metric