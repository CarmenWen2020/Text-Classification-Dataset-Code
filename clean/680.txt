curriculum computer engineering program concept parallelism concurrency consistency atomicity usually address due thoroughness extension isolate concept focus specific aspect reality computer concept detach abstraction however due isolation exists risk induce absence interaction concept extension abstraction proposes showcasing interaction abstraction address laboratory session parallel ray tracer implement assemble component application algorithmic tracer assembly instruction guarantee atomicity lab focus abstraction interaction technical outcome analysis survey validate propose confirm improvement integrate keywords ray trace task queue semaphore futex assembly instruction introduction development computer engineering CE program evolution decade technological limitation increase execution context parallel computer ability implement algorithm expose parallelism efficient hardware mechanism guarantee parallel execution recommendation NSF  curriculum committee acm joint task compute curriculum numerous approach effort increase presence reinforce parallel distribute compute PDC CE program recent distributes PDC topic across integration module exist introduce parallel program proposal research orient methodology creation approach explain computer split complexity relate interface remain interface model simplify abstraction underlie complexity establish boundary across CE program typically resort abstraction explain computer abstraction strengthen focus specific aspect however lose overall computer approach conclusion relate particularly forget hardware implication underlie abstraction performance previous propose PDC topic perspective abstraction algorithm software abstraction assembly program understand parallel execution unlike approach reinforces PDC topic abstraction underlie complex parallel application computer precisely expose instruction architecture ISA operating synchronization operation strengthen knowledge essential concept parallelism concurrency consistency atomicity entangle hardware understand relation aforementioned concept proposes develop multiple component fully parallel ray trace application ray trace integrate upper refer abstraction cuda program advanced render concept contrary involve multiple laboratory session upper CE program ray tracer serf motivate concurrent queue assign task execution thread queue access mutual exclusion preserve data integrity purpose access queue manage accord abstraction mutexes implement library function directly assembly propose abstraction application library operating ISA abstraction implicates propose lab mainly interaction specific abstraction purposely endow context refer contribute integrate abstraction introduce guideline objective propose implement reinforce inter prior suitability computer parallel compute mobile device laptop virtual machine remote multicore server upon hardware propose lab contributes consolidate integrate analyze conclude raspberry vast majority hardware software requirement inter project CE program academic assessment proposal already thanks volunteer academic propose lab fully deployed enrol involve propose discus experimental propose lab technical detail lab assignment outcome pre survey survey expose effectively demand deeper understand interaction abstraction demand fulfil completion lab remainder organize introduces context CE program specific propose establish describes depth discus requirement implement inter suitability technical qualitative assessment apply outcome finally summarizes context describes organization CE program brief description academic addition syllabus involve propose described detail CE program propose fully integrate CE program    program consists academic  credit core mostly focus knowledge CE graduate algebra calculus discrete mathematics program theory data structure algorithm computer architecture organization operating physic electronics computer network database distribute software engineering artificial intelligence computer interaction afterward reinforce knowledge within available option compute computer engineering information information technology software engineering consists compulsory addition optional core regardless chosen finally achieve program undertaking undergraduate dissertation  CE program focus application theoretical knowledge development lab project approach ideal assimilation concept lab session tailor reinforce theoretical content coordinate belong knowledge mention perceive isolated apply knowledge acquire professional career purely organizational interaction accord computer engineering curriculum development computer lab exposure hardware operating context relevant application ray trace algorithm involve propose implicates within program jointly computer graphic distribute concurrent program operating multiprocessor related application library operating ISA abstraction respectively computer graphic CG core compute optional CG focus mathematical model algorithm generate synthetic image video performance underlie mathematical physical concept define appearance practical assignment develop algorithm ray trace output image concept parallelization performance algorithm parallelization strategy static dynamic structure partition explore distribute concurrent program  core concentrate fundamental program concurrency lecture focus explanation arise data resource mutual exclusion algorithm variable structure semaphore monitor distribute coordinate synchronous asynchronous message passing tuple besides concept conceptual laboratory session project develop program concept crucial operating OS core comprehensive structure function operating operating resource manager service provider command interpreter acquires concept related management resource processor memory input output device relation topic synchronization primitive pthread library implementation analyzes implementation spin primitive processor atomic memory access instruction motivates operating implement primitive multiprocessor MP core computer engineering optional MP focus mechanism parallel execution task computer architecture organization computer precisely focus parallel processor memory complex digital topic performance analysis performance model chip network atomicity consistency coherence memory hierarchy parallel processor laboratory session openmp parallel program computer performance measurement propose propose accomplish integrate computer lab resource abstraction consist description code snippet series milestone previous involves lab session comprises associate interested reader refer repository source code lab http github com   ray trace overview propose allows consolidate concept parallelism concurrency consistency atomicity exploitable multicore computer focus ray trace appeal application efficiently parallelize concept involve abstraction associate academic semester chronological activity relation abstraction activity academic semester chronological abstraction      task  operating    assembly  accord chronological academic lab belongs  core focus library lab implementation management task queue concurrent access multiple thread synchronization aspect avoid semaphore library handle synchronization subsequent lab shortly academic semester focus operating core lab mutex implement futex userspace mutex mechanism atomic primitive operating invoked mutex contest mutex implement semaphore library replaces previous lab academic lab assembly developed optional MP lab assembly instruction implement mutex futex potential achieve efficiency consumption performance library function finally fourth focus application implement ray tracer lab CG optional activity render image parallelize image assign thread concurrent task queue fully evaluate difference concurrent access task queue library function assembly instruction development risk transfer institution another fail simply involve optional mitigate risk lab actual lab link lab others therefore precede lab assignment faculty accomplish lab establish link abstraction abstraction application chronological concurrent task queue aim lab implementation concurrent data structure queue queue sequential approach already previous data structure algorithm suitable mechanism collaborative producer consumer queue information synchronize data structure preserve data integrity concurrent access data synchronization mechanism context objective lab implement concurrent bound queue generic data familiarity semaphore synchronization powerful approach synchronization semaphore concurrent access queue mutual exclusion access queue component synchronization exists empty queue insert queue accord focus propose  assignment concurrent access queue coarse grain atomic statement await boolean guard usually concern data sequential statement semantics statement ensures execution statement atomically execute statement easy task concurrent program aim generic  sketch listing  attribute code data structure enqueue dequeue operation semaphore synchronization listing image KB image listing  generic previous lecture pas baton technique implement await statement binary semaphore technique await synchronize mutex semaphore ensures exclusive access code binary semaphore initial await statement false addition counter initial illustrates implementation await pas baton implementation sketch listing image KB image implementation critical binary semaphore listing image KB image listing pas baton function finally implement semaphore technique developed semaphore instead binary semaphore anyway technique implement semaphore behavior equivalent binary semaphore binary semaphore abstraction construct manage synchronization abstract data semantics equivalent safeness liveness however semaphore implement operates internally spin access grant operating issue outline lab implement semaphore abstract data lab optional lab assignment implement approach concurrent queue operation queue execute mutual exclusion adapt reader writer approach multiple access reading operation operation queue preserve mutual exclusion access operation priority writer conflict lecture already await instruction whereas assignment implementation lab reinforce knowledge concept related semaphore synchronization addition propose assignment technique focus synthesis concurrent program task queue protection futex lab intend mechanism operating synchronization concurrent algorithm objective lab operating service provider user efficient futex primitive atomic instruction operating standard library understand mechanism execution mutual exclusion  atomic instruction implement lock unlock primitive mutex abstraction manage access concurrent task queue implement previous activity lab firstly describes atomic instruction   implement mutex spin lock atomic instruction approach mutex motivate introduce mandatory intervention operating thread status naive approach mutex hypothetical wakeup management operation queue limitation approach motivate futex syntax parameter futex futex wake described implement intuitive straightforward version mutex refer implementation finally pseudo code algorithm efficient mutex guideline code advanced implementation approach mutex implementation propose  integrate linux kernel lock unlock procedure spin lock SL mutex critical userspace val variable mutex val val atomic instruction mutex precisely instruction val load previous without overhead thread enters critical lock  otherwise thread spin lock unlock procedure thread simply val release mutex SL mutex leaf waiter thread lock awake suffer performance loss mutex contest image KB image lock unlock procedure spin lock mutexes implementation operating thread status illustrates naive approach mutex procedure version textbook operating concept code procedure execute atomically however assume non atomic execution lab understood specifically reading operation val atomically perform multiple thread reading lock reading lock insertion thread queue neither atomic indefinitely suspend thread lock freed reading insertion operation wake thread guarantee obtain lock mutual exclusion another thread critical former lock BS implementation address incorrect behavior lock function atomic operation mutex lock  kernel invoked thread enters critical otherwise futex invoked suspends thread queue lock val return immediately lock release meantime val thread remains suspend another thread wake futex return thread acquire lock unlock procedure val futex wake wake thread argument thread critical suspend queue invoked regardless lock  impact performance advanced implementation address performance approach mutex val waiter thread val waiter thread val lock procedure longer useful val instead atomic  primitive desire argument load val successful comparison val argument regardless comparison val load thread update mutex waiter enters critical otherwise thread suspend queue futex previously  val update mutex waiter lock freed  latter return thread suspend  ensures thread mutex return val certainty waiter unlock subtracts val atomic fetch sub return previous argument futex wake invoked suspend thread lock avoid costly waiter thread reader refer detail mutex implementation mutexes cod understood complex abstraction concurrent task queue implement previous lab listing implementation alternative semaphore introduce listing refer library approach standard library mutexes std unique lock mutex ensure mutual exclusion semaphore listing implementation refer thread suspension lock unlock replace procedure mutex version listing image KB image listing library implementation alternative semaphore listing image KB image listing thread suspension implementation alternative semaphore mutex lock unlock procedure refer approach implementation alternative consists loop variable thread suspends execution signal wake suspend thread semaphore implement functionality thread suspension suspend wakeup cod futex contrary library approach relies variable suspend wake thread alternative ass suitability cod spin lock mutexes library mutex execution chip contention scenario overall futex atomic instruction implement spin lock version synchronization abstraction mutex incorporate approach concurrent task queue experimentally performance difference  assembly code purpose lab understand ISA implement reliable mutual exclusion consistency atomicity processor load link conditional instruction memory barrier foundation structure mutexes  addition instruction privilege execute programmer directly exploit improve efficiency reduce overhead lab accomplish goal understand atomic instruction ISA armv processor data memory barrier atomic instruction performance implication mutex implementation assignment lab engage complex code enhance program concern performance efficiency addition important ISA complex constructor mutexes operating library application finally gain knowledge relation memory model correspond consistency model ISA lab session organize generate multi thread program reduces array without synchronization primitive code fetch primitive armv load link  conditional  instruction implement fetch previous program verify code comprises assignment proposes implementation lock unlock mutex function   instruction plot thread lock function spin acquire lock mutex approach refer SL asm spin  instruction lock already   instruction fails attempt lock  instruction return loop likewise SL BS implementation OS mutex assembly image KB image lock unlock procedure armv assembly code assignment proposes advanced implementation lock function replace hungry spin lock  instruction instruction core without return operating efficient implementation refer LPS asm mutex operating considers program actually lock release thread regain lock without  instruction unlock function performs release barrier wake core execute  instruction guarantee progress core interruption occurs context switch SL asm LPS asm implementation comparison performance consumption raspberry hardware counter indirect measurement periodically chip mapped OS filesystem parallel ray trace CG proposes practical assignment involve implementation ray trace algorithm parallelize assign task partition synthesize image thread objective lab understand computational bottleneck algorithm devise parallelization strategy affect performance without accuracy loss explore analyze impact overhead combination parallelization strategy partition structure thread assignment methodology performance content lab description ray tracer introduction parallelize assignment minimalist  ray tracer  algorithm generates 2D image 3D representation virtual scene geometry optical physical characterization sensor camera source algorithm simulates transport across virtual scene obtain pixel image generate camera traverse pixel independently computation associate pixel independent algorithm highly parallelizable moreover parallelization worthwhile algorithm computational intensive converge quality virtual scene complex scene ray trace parallelization strategy subdivide image convert computation render task assign execution thread explore parallelization strategy dimension illustrate image pixel rectangle rectangle batch image KB image diagram 2D image split render task image geometry virtual scene implementation detail algorithm computational load greatly another mechanism distribute task thread assignment static pre assign per thread dynamic concurrent task queue impossible estimate computational load task beforehand dynamic assignment likely efficient listing implementation vector replace  former lab enqueue dequeue operation generation render respectively depicts diagram concurrent task queue thread generates enqueues task whereas multiple worker thread dequeue task perform render parallel finally static dynamic strategy orthogonal distribution depict listing image KB image listing dynamic parallelization strategy computer graphic algorithm image KB image concurrent thread task queue assign task worker thread identify pro con approach analyze justify impact performance instance optimal mutex approach task queue circumstance lab propose approach relies program construct helpful showcase interaction abstraction however boost productivity heterogeneous standard nowadays advise opt approach overall implementation parallelization trace algorithm performance evaluation mutex understand analyze mechanism decision implementation detail application algorithm reinforce integrate computer experimental environment consolidate overall computer propose computer lab analyze subset commonly fulfil restriction price multiprocessing parallelism cannot core raspberry model  AML SX CC potato orange zero plus  plus pine lts summarizes relevant hardware software requirement development met offering performance functionality    highly price hardware software requirement evaluate raspberry model RP  CP RC potato LP orange zero plus OP  plus NP pine lts PA       HI extension screen button   framework option  runtime gpu  standard OS  OS requirement mainly focus subset nevertheless desirable allows future expansion therefore broader requirement facilitate additional computer architecture organization administration computer network security artificial intelligence machine embed robotics video computer vision others requirement potential raspberry orange  choice requirement JTAG however finally chose raspberry primarily due broader usage amount source available technical technical conclusion obtain propose lab assignment precisely impact performance chip obtain mutex implementation analyze contention scenario raspberry model quad core processor core thread assume fix cpu frequency ghz performance governor guarantee reproducibility OS ubuntu lts release gcc compiler chip decrease define threshold report  fan calculate execution chip increase cpu thread account quad core processor application cpu bound thread oversubscription thread physical core penalizes performance insight addition another important insight thread oversubscription implementation mutex affect performance differently OS lab assignment implementation concurrent bound queue limited ensure correctness queue lab assignment refers implementation SL BS mutexes  evaluates implementation respectively execution chip increase celsius thread access variable mutex thread acquire lock increment variable release lock execution variable image KB image performance OS mutex implementation thread contention scenario refer synthetic scenario thread release lock computes private consist series trigonometric function variable input synthetic scenario release lock thread immediately competes lock without perform private latter scenario extreme amount private unexpected conclusion scenario mutexes obtain performance thread thread overhead invoke futex unlock subsequent context switch BS slight increase execution SL however thread increase SL progressively enlarges execution thread spin dispute lock mutexes maintain execution thread increase realize application thread oversubscription improve performance contrary mutex implementation performance hurt increase chip steady thread private chip limit around prevents obtain significant cpu difference mutexes however SL suggests invoke futex thermal signature parallelism exploit synthetic scenario meaning thread execution exhibit performance mutex implementation SL mutexes mutexes SL obtains execution thread execution thread coincides physical core confirms overhead futex BS approach similarly previous scenario thread oversubscription spin largely increase execution approach whereas mutexes maintain roughly performance observation thread BS execution mutexes multiple thread confirms overhead invoke costly futex wake unlock function waiter thread lock regard chip execution sufficiently significant difference execution library refers evaluation OS lab assignment previous mutexes concurrent task queue library mutex  lab comparison purpose queue initial thread within critical dequeue queue empty private thread described previous image KB image performance OS mutex implementation concurrent bound queue library mutex comparison purpose scenario confirms perform thread SL library mutex obtain performance suggests library mutex implement spin lock mechanism thread thread oversubscription execution SL BS library mutex clearly outperforms mutexes thread differently spin lock OS library implementation possibly throttle unnecessary thread accord processor core exploit internal userspace queue minimize thread context switch contrary previous SL performs BS mutexes mainly due additional overhead futex suspend wakeup semaphore largely reduces execution respect BS due additional invoke futex wake similarly previous SL slightly increase cpu mutexes library mutex surprisingly synthetic scenario greatly affect library mutex thread extreme contention scenario library mutex development contention affect SL although lesser scenario sufficient thread overhead subsequent context switch compensates distribution cpu active thread spin lock remove private allows significant difference confirm thermal signature SL SL enlarges execution respect approach library mutex increase likely due extend execution overall library mutex convenient choice scenario relatively amount private library likely exploit hybrid management combine spin lock thread throttle queue adaptive mechanism frequent however synthetic scenario library heuristic fail adapt atypical OS mutexes preferable choice assembly evaluates SL asm LPS asm mutexes concurrent task queue initial queue amount private previous depicts illustrative purpose perform mutexes thread previous library SL synthetic contention respectively image KB image performance assembly mutexes concurrent bound queue perform previous similarly previous spin lock increase execution thread oversubscription contention scenario SL asm LPS asm execution core context switch trigger reduces lock contention however prevent library mutex obtain performance thanks enhance management lock differently previous approach LPS asm alternative reduction thread oversubscription mainly due thread core increase contrary steady library mutex suggests implementation core synthetic scenario spin lock alternative progressively increase execution thread however implement spin lock abstraction respect ISA introduces performance overhead accord timing difference SL SL asm finally LPS asm clearly reduces respect spin lock approach application evaluates mutexes ray trace application dynamic parallelization strategy concurrent task queue plot restrict performance illustrative purpose render scene simplification purpose image partition fix rectangular image KB image performance mutex implementation trace application assume dynamic parallelization strategy scenario previous perform thread accord physical core analyze mutexes exhibit performance addition performance ray tracer thread execution thread reduces respect thread performance thread oversubscription corroborate previous finding abstraction OS overhead largely penalizes mutex BS mutex whereas OS SL assembly mutexes finally library mutex scarcely affected thread oversubscription assessment qualitative assessment propose lab attendance lab voluntary participate lab  OS participate lab MP CG lab schedule completion opportunity lab assignment interaction lab propose lab assignment consecutive academic meaning participate CG lab participate remain assessment  OS lab correspond previous whereas MP CG lab correspond previous respectively lab without assessment survey lab refer pre survey survey survey propose lab session pre survey consists series perception interaction CE program particularly involve theoretical practical assess knowledge PDC topic survey structure stress interaction series propose lab refer obtain technical theoretical practical pre survey conclusion extract survey summarize lab session program somehow related relation totally related respectively faculty effort relation explicit effort rat regard involve conclusive strongly related program response survey strengthen previous conveyed related rate theoretical practical survey propose faculty  mainly focus concept mutual exclusion semantics semaphore semaphore critical refer OS session requirement implement semaphore refer MP role atomicity consistency thread synchronization correspond CG impact abstraction parallel ray trace application reader refer appendix detail desire highlight boldface rate pre survey  pre OS MP CG survey rate improve rate obtain pre survey overall usefulness average rate survey versus obtain session remarkable aspect rate opinion conceptual semantics semaphore abstract data currently possibility concept introduce OS semaphore abstraction implementation closer maybe information understand rate survey strike CG lab OS lab survey OS lab correctly however later previous survey CG lab correctly respectively demonstrate memory fortunately CG lab session refresh memory survey survey reveal lab session lab assignment overall quality lab resource faculty assistance opinion CG lab mention unify consolidate another positive initiative everything multiple lab broader interaction operating computer architecture parallel distribute compute outcome discern mutex implementation alternative clearly identify programmability execution efficiency offs abstraction conclusion structure computer engineering CE program isolated lose overall typical computer organize abstraction aim reinforce vision abstraction application library operating instruction architecture consists implementation parallel ray trace algorithm concurrent queue assign task execution thread access mutual exclusion queue manage mutexes implement library function assembly instruction aforementioned abstraction introduce related subset laboratory CE program consolidate concept parallelism concurrency atomicity consistency structure content propose lab interaction remain lab addition detailed hardware software requirement consequent choice raspberry hardware development platform experimental consist technical evaluation assessment propose technical refer evaluation discussion performance difference implement mutexes lab assessment consist series pre survey enhancement lab exposure relation addition enhancement integrate perception address concept acquisition knowledge response technical survey improve