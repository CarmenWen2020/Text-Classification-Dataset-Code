speculative transaction replication str protocol exploit transparent speculation technique enhance performance geo distribute partially replicate transactional data addition define consistency model speculative snapshot isolation SPSI variant snapshot isolation SI shelter application subtle anomaly arise speculative transaction processing technique str speculation fully transparent programmer expose  client speculation technique employ str satisfy SPSI leveraged application program transparent without source code modification application SI str combine technique speculative transaction pre commit version reduce effective duration pre commit lock enhance throughput precise novel timestamping mechanism per item timestamps physical greatly enhance probability successful speculation ass str performance geo distribute amazon EC data synthetic benchmark realistic benchmark tpc RUBiS evaluation str achieves throughput gain latency reduction respect non speculative ensure SI workload characterize inter data contention furthermore thanks tune mechanism dynamically transparently enables disables speculation str robust performance unfavorable workload suffer misspeculation rate keywords data distribute transaction geo replication consistency speculation introduction storage increasingly deployed geographically scatter data geo replication allows storage remain available presence outage affect entire data reduces access latency data closer client performance geographically distribute data challenged communication delay data acid transaction desirable feature greatly simplify application development global inter data certification safely detect conflict concurrent transaction execute data adverse performance impact global certification twofold throughput severely impaired transaction pre commit lock global certification phase cripple effective concurrency achieve client perceive latency increase global certification critical transaction execution transparent speculation investigates speculative processing technique alleviate focus geo distribute partially replicate transactional data snapshot isolation widely employ consistency criterion SI propose novel distribute concurrency scheme speculative snapshot isolation SPSI transparent speculative execution speculative speculative transaction data item version pre commit transaction instead commit aborted speculative reduce effective duration pre commit lock perceive conflict transaction reduce transaction execution enhance maximum parallelism achievable ultimately throughput speculative transparent speculation technique  client dealt simply execute affected transaction avoid pitfall speculation demonstrate speculation transparently source code modification significantly enhance performance distribute site transactional however approach suffer limitation  geo distribution partial replication exist partially replicate geo replicate data contrary target data model replication rely technique impose prohibitive wan environment centralize sequencer totally transaction subtle concurrency anomaly exist partially replicate geo distribute transactional data speculative expose application anomaly arise non speculative severely undermine application correctness illustrates concurrency anomaly arise exist speculative pre commit data version expose application data snapshot reflect partially update transaction version conflict concurrent transaction anomaly twofold harmful impact externalize non atomic non isolated snapshot client application non sandboxed environment anomalous affect transaction execution extent generate anomalous unexpected behavior instance java program  interface access transparently data maintain data application exploit arbitrary data fetch data inconsistent application crash hang infinite loop exemplify performance robustness  speculation hamper performance adverse scenario likelihood transaction abort load  significantly penalize user perceive latency throughput speculative snapshot isolation SPSI novel consistency model foundation str besides guarantee familiar snapshot isolation SI commit transaction SPSI rigorous guarantee atomicity isolation snapshot execute transaction nutshell SPSI execute transaction data item version commit SI allows atomically non conflict transaction originate node pre commit transaction shelter programmer complex concurrency anomaly otherwise arise speculative speculative transaction replication str novel speculative transactional protocol partially replicate geo distribute data str choice strongly consistent data contribute efficiency scalability multi versioning maximizes efficiency dominate workload purely decentralize concurrency loosely synchronize physical partial replication contribution str innovative fully decentralize concurrency mechanism aim ensure SPSI speculation lightweight scalable fashion enhance successful speculation via novel transaction timestamping mechanism precise discus extension enable str serializability guarantee lightweight effective tune mechanism feedback loop dynamically enables disables speculation workload characteristic evaluate str geo distribute amazon EC data synthetic realistic benchmark tpc RUBiS experimental transparent speculation speculative yield throughput improvement latency reduction protocol SI ensures SI without resort speculative technique achieve fully transparent compensation logic related distribute transactional data efficient mechanism ensure consistency semantics distribute replicate data extensively machine replication SMR approach replica serialization transaction execute without coordination recent adopt defer update DU approach transaction locally execute globally certify approach scalable SMR update intensive workload unlike SMR seamlessly non deterministic transaction DU approach lock maintain duration transaction global certification severely hinder throughput str DU approach tackle performance limitation via speculative technique usage transaction propose context distribute file blob simplify development application spare complexity explicitly coordinate access file blob avoid anomaly inconsistent writes typically focus ensure efficient management metadata content file characterize access access file orient apis define posix standard transactional data simpler data model api classic model argue speculative transaction processing technique applicable transactional file adopt consistency model  SI specification speculative technique introduce ensure application correctly SI model expose additional concurrency anomaly therefore preserve correctness introduce SPSI related psi parallel snapshot isolation consistency criterion relaxes SI reduce latency geo distribute data SPSI psi specifies weaker consistency criterion commit transaction psi transaction recent commit version data transaction originate site allows anomaly SI fork exclude SPSI guarantee SI semantics commit transaction recent commit version independently site originate psi prohibits transaction reading version commit motivation underlie definition SPSI spar transaction pre commit lock release rigorous consistency guarantee shelter application arbitrary concurrency anomaly speculation transaction optimistically borrow manner data update concurrent transaction already investigate   apply local cluster data fully replicate via coordination primitive apply partially replicate distribute database rely central coordinator totally distribute transaction consistency guarantee execute transaction commit spirit specify SPSI however adopt replication scheme replica dataset apply update significantly hinders scalability instead rely global sequencer become bottleneck imposes  latency geo distribute setting distribute database literature explore speculative sometimes refer lock release decentralize transactional protocol partition database model assume str however protocol guarantee consistency snapshot transaction eventually abort execution expose application subtle concurrency bug exemplify another speculation strives reduce perceive latency expose preliminary external client speculative commits explore various advocate  program paradigm expose preliminary request reconcile expose  approach adopt recent  unlike str totally transparent programmer approach employ external speculation source code modification incorporate compensation logic furthermore approach conventional storage speculative pre commit data although approach reduce user perceive latency tackle reduce transaction str experimental evidence speculative transaction processing mention  rely tune mechanism aim autonomously speculation beneficial already mention str employ hoc tune mechanism aim pursue analogous goal dynamically enable disable speculation workload characteristic exists literature tune transactional feasibility automatic technique predict react timely workload data model target model consists geo distribute data host node assume data model simplicity implementation str however protocol agnostic underlie data model relational orient data replication model dataset split multiple partition responsible disjoint maintains multiple timestamped version partition scatter across node arbitrary data placement policy node host multiple partition node data host partition partition replicate within data across data str employ synchronous replication enforce fault tolerance transparent fail partition replica replica clearer replica replica date request replicate data item partition remote node node replicate partition synchrony assumption assume classic asynchronous distribute model assumption upper bound relative communication latency str node equip loosely synchronize conventional hardware assume monotonically correctness protocol affected skew skew performance protocol physical SI spanner negatively affected skews introduce delay suffer abort rate consideration applies protocol propose extends protocol SI speculative transaction processing technique additional synchrony assumption ensure fault tolerance specifically str integrates classic replication protocol assumes perfect failure detection capability replace replication scheme currently employ str technique paxos weaker synchrony assumption discus mechanism employ str ensure SPSI semantics guaranteed presence failure hinge assumption establish finite upper bound skew node additional synchrony assumption implementation variant str ensures transaction execution model transaction execute coordinator node originate transaction attribute snapshot accord physical originate node transaction request commit undergoes local certification phase conflict concurrent transaction locally replicate partition certification phase succeed partition transaction pre commits partition obtain pre commit timestamp pre commit prepared synonym transaction certification phase local partition involves transaction local commits node transaction originate speculative commits attribute local commit timestamp executes global certification phase detects conflict transaction originate node aim pre commit transaction replica partition transaction update define snapshot transaction simply snapshot transaction local commit version transaction snapshot transaction version directly indirectly exists sequence transaction version transaction pas global certification phase commit attribute commit timestamp commit request confirm application transaction commit guarantee speculative client however version local commit transaction expose transaction via speculative mechanism transaction transaction execution model defines additional local commit intend transaction local commit transaction originate node revise definition concurrent transaction intuitively transaction concurrent execution interval overlap execution interval execution interval vice versa identify transaction execution interval execution interval originate node originate node identify execution interval originate node define execution interval local commit commit commit SPSI consistency model introduce speculative snapshot isolation SPSI consistency model generalizes SI criterion define guarantee shelter application subtle anomaly arise speculative technique definition SI enforces guarantee SPSI define upon variant SI namely generalize SI  guarantee remainder SI refer  unless otherwise specify SPSI specification recall definition SI adapt terminology transaction execution model simplify notation SI totally commit version data item commit version totally SI transaction consistent snapshot operation issue transaction snapshot timestamp recent version commit transaction commit timestamp SI conflict commit concurrent transaction disjoint introduce SPSI specification SPSI totally commit version data item commit version totally SPSI per node totally speculatively commit version node speculative commit version data item totally SPSI transaction consistent speculative snapshot transaction originate node snapshot recent version transaction commit timestamp independently node transaction originate local commit timestamp originate node SPSI conflict commit transaction commit concurrent transaction disjoint SPSI conflict transaction speculative snapshot snapshot transaction concurrent transaction disjoint SPSI dependency uncommitted transaction transaction commit non commit transaction SPSI SPSI jointly define speculatively commit data item version SPSI applies node SPSI item version within node speculatively commit version node totally SPSI extends notion snapshot basis SI definition illusion transaction executes immutable snapshot reflect execution transaction local commit activation originate node demand snapshot transaction execute reflect locally activate transaction SPSI allows efficient implementation str local commit transaction solely local information SPSI specify transaction eventually abort SPSI violate hence SPSI throughout execution transaction another relevant implication assume transaction speculatively local commit transaction timestamp later commits timestamp violates sub SPSI hence aborted commit applies abort SPSI prohibits develop dependency aborted transaction aborted SPSI coincides SI ensure absence conflict concurrent commit transaction SPSI complement SI ensure conflict transaction finally SPSI ensures transaction commit transaction eventually abort anomaly SPSI SPSI identical guarantee SI commit transaction local commit active transaction SPSI allows reject SI version locally commit transaction eventually abort due conflict remote transaction however argue anomaly SPSI  application SI easy considers SPSI ensures transaction behaves execute SI transaction node originate activate formally snapshot observable SPSI compliant equivalent SI compliant differs omit remote transaction concurrent snapshot observable SPSI obtain via legal SI clearly application correctly SI SI compliant application execute SPSI compliant anomaly SPSI prevent already exemplify concurrency anomaly SPSI prevents application hang crash interestingly analyze tpc RUBiS benchmark identify concurrency bug arise application crash SPSI guarantee enforce image KB image listing illustrates anomaly tpc benchmark involves status OS transaction insert customer creates correspond OS fetch identifies customer retrieves correspond partially replicate node transaction activate node  speculative OS transaction pre commit concurrent OS correspond atomicity violation prevent SPSI parse OS fed null pointer generate unexpected exception SI SPSI crash application str protocol introduces speculative transaction replication str protocol clarity str incrementally non speculative fault tolerant protocol implement SI compliant transaction extend protocol mechanism aim speculation efficient SPSI compliant discus augment protocol tune speculation dynamic achieve fault tolerance non speculative protocol protocol multi versioned SI compliant algorithm relies fully decentralize concurrency scheme employ recent highly scalable spanner SI phase str protocol execution transaction activate attribute snapshot timestamp ST physical node originate snapshot determines data item version visible transaction upon transaction observes recent version commit timestamp however exists pre commit version timestamp pre commit version commit aborted become shortly pre commit version eventually commit timestamp snapshot visible request replica maintains request data item node receives request snapshot physical node delay request physical instead writes locally maintain transaction private buffer execution phase certification transaction immediately commit execution update transaction instead conflict concurrent local transaction local certification stage activates PC global certification phase pre commit request replica update local node replica replica detects conflict acquires pre commit lock proposes physical pre commit timestamp replication replica successfully pre commits transaction synchronously replicates pre commit request replica coordinator physical propose pre commit timestamps commit replica update partition coordinator calculates commit timestamp maximum pre commit timestamps sends commit message replica update partition client upon commit message replica version commit release pre commit lock protocol potential scalability unfortunately geo distribute setting throughput severely limited  pre commit lock lock throughout transaction certification phase geo distribute data entail latency inter data rtt data partition replicate data disaster recovery throughout concurrent transaction attempt pre commit data conservatively ensure version data item snapshot transaction version guaranteed commit transaction version eventually abort timestamp snapshot timestamp transaction version eventually commit obtain timestamp snapshot timestamp inherently limit maximum concurrency hence throughput achievable mention basis str tackle transaction pre commit version materialize str technical challenge guarantee SPSI speculation maximize likelihood successful speculation ensure robust performance adverse workload setting enable SPSI speculation discus extend protocol described incorporate speculative preserve SPSI semantics execution illustrate anomaly transaction non atomic snapshot violate SPSI snapshot reflect execution conflict transaction violate SPSI str tackle issue restricts speculative mandate SPSI pre commit version local transaction sufficient prevent anomalous execution illustrate execution transaction execute node transaction execution anomaly prevent reading speculatively pre commit data however mechanism suffice ensure scenario SPSI SPSI subtle account involve speculative version local commit transaction update remote scenario illustrate associate possibility snapshot local commit transaction eventually abort due remote conflict remote commit transaction totally decentralize str concurrency protocol node global knowledge transaction commit challenge detect scenario illustrate distinguish execution transaction inclusion mechanism str employ tackle issue observation scenario arise transaction attempt speculatively local commit transaction update remote latter transaction unsafe transaction developed remote conflict concurrent commit transaction detect global certification phase SPSI detect scenario str maintains additional data structure per transaction local commit  commit respectively snapshot unsafe local commit transaction commit timestamp recent remote commit transaction transaction directly indirectly str transaction attempt version become mechanism prevents snapshot unsafe local commit transaction along remote commit transaction concurrent conflict str attempt outcome scenario arises transaction attempt speculatively data item update local commit transaction replicate locally attempt remotely risk version violate SPSI cope scenario whenever unsafe transaction local commits temporarily commits abort remote update cache partition tag local commit timestamp transaction remote data item local cache partition grant prompt atomic access local transaction attempt speculatively promote successful speculation via precise recall SPSI transaction speculatively local commit transaction eventually commits commit timestamp snapshot aborted increase speculative important commit timestamps attribute commit transaction str proposes timestamping mechanism precise observation commit timestamp attributable transaction snapshot ensure guarantee data item version timestamp update version generates timestamp snapshot transaction commit update version max ensure serialize transaction dependency transaction correctly ensure straightforward instead propose physical local node pre commit timestamp transaction coordinator proposes ensure str associate data item additional timestamp snapshot recent transaction data item hence ensure node involve global certification phase transaction propose pre commit timestamp maximum timestamps update node easily precise mechanism allows dependency transaction finer granularity timestamping mechanism protocol recall mechanism non speculative protocol spanner SI indeed reduction commit timestamps achievable via precise increase successful speculation reduces abort rate non speculative protocol precise mechanism overhead additional storage requirement additional computational discus precise mechanism introduces storage overhead metadata granularity quantify approximately realistic workload tpc RUBiS argue spatial overhead increase abort rate information coarser granularity associate entire partition concern computational overhead precise mechanism update variable upon operation whereas typical SI protocol avoid however str target geo distribute throughput normally limited global certification phase affected communication delay data account delay millisecond argue additional impose local update variable likely negligible experimentally overhead precise mechanism largely outweigh benefit image KB image pseudo code str protocol pseudocode str protocol report algorithm respectively behavior transaction coordinator data partition transaction upon activation transaction assign snapshot timestamp node physical ffc OLCSet identifier snapshot unsafe transaction transaction algorithm speculative request locally replicate local partition request non local cache partition update previous local commit transaction appropriate version request remote replica partition contains algorithm upon request partition update fetch version timestamp reader snapshot algorithm fetch version commit local commit reader reading locally partition return transaction otherwise reader transaction outcome algorithm reader transaction update OLCSet ffc minimum OLCSet ffc transaction minimum OLCSet becomes ffc algorithm become transaction fetch conflict transaction already reader snapshot reader aborted conflict detect local certification transaction execution locally certify local certification essentially local PC across local partition transaction cache partition transaction update non local algorithm update partition detects conflict transaction update refer version conflict update timestamp aborted independently conflict pre commit local commit commit discus recent exist version timestamp recent version commit local commit version immediately data pre commit recent version pre commit till commit aborted local commit recent version commits timestamp version become abort algorithm cope transaction algorithm outcome depends FC certification partition proposes timestamp accord precise algorithm upon update local partition cache partition coordinator calculates local commit timestamp maximum timestamps transaction snapshot plus notifies update local partition notify partition convert pre commit local commit local commit timestamp algorithm algorithm transaction update non local transaction unsafe transaction snapshot OLCSet algorithm global certification replication local certification transaction remote correspond partition certification algorithm analogously local certification phase partition conflict propose timestamp pre commit transaction algorithm unlike local transaction remote pre commit request conflict local commit transaction local commit recall str allows locally originate transaction expose pre commit local transaction partition replicates request replica coordinator algorithm replicate request partition abort conflict local commit transaction replica directly bypassing replica replica proposes timestamp transaction coordinator algorithm commit abort transaction coordinator commit transaction replica update partition dependency resolve commit decision along commit timestamp non local replica update partition update commit timestamp infinity algorithm upon abort coordinator remove local commit update version trigger abort dependent transaction sends decision remote replica algorithm image KB image dynamically tune speculation speculative optimistic assumption local commit transaction unlikely contention remote transaction although assumption met benchmark tpc RUBiS application dependent  speculation adverse workload excessive misspeculation degrade performance enhance performance robustness str couple lightweight tune mechanism dynamically decides enable disable speculative mechanism workload characteristic tune scheme approach agnostic data implementation totally transparent application developer relies feedback driven loop steer centralize measurement node periodic fashion throughput achieve speculative enable disabled accordingly configures opt quickly converge scheme instead complex approach classifier sophisticated strategy experimental finding confirm workload decision speculation straightforward throughput  behavior implementation allows administrator initiate tune periodically upon request tune scheme naturally extend detect statistically meaningful average input load via robust detection algorithm CUSUM react initiate tune mechanism fault tolerance str transaction coordinator node replicate data update transaction approach assumes existence underlie management toolkit virtual synchrony guarantee straightforward upon purge faulty node reconfigure ensure progress specifically replica partition transit rely virtual synchrony ensure deliver update upon partition unless additional mechanism employ presence replica failure SPSI violate illustrate execution transaction replica variable transaction data item update replica request information request lose fault replica update transaction commit happens detect failure replica exclude computes basis message longer reflect replica issue tackle enforce update transaction attribute sufficiently future avoid anomaly illustrate transaction fail replica achieve compute reconfiguration phase replica fault upper bound skew replica active fault denote resume transaction processing sufficient ensure timestamps compute transaction coordinator local transaction coordinator deliver ensure transaction coordinator timestamps algorithm guaranteed safety liveness str violate SPSI transaction infinite eventually commit abort analysis assumes failure scenario discussion cope failure scenario safety theorem SPSI data item commit version totally proof assume contradiction transaction update commit version tag commit version transaction replica assume without loss generality replica transaction enters prepared request version pre commit immediately aborted contradicts assumption commits originate undergo local commit phase possibly attribute timestamp local commits scenario equivalent request local commit discus originate scenario commits discus scenario commit local commit timestamp aborted contradicts assumption otherwise originate pre commits version dependence commits aborted contradict assumption accord algorithm commit therefore necessarily contradicts assumption commit aborted otherwise argument previous local commit attribute obtain contradiction theorem SPSI node speculative commit version data item totally proof SPSI contradiction specifically assume node replicates transaction update scenario SPSI violate local commit version commits version timestamp whereas local commits timestamp commit version contradiction SPSI already proven impossible focus impossibility without loss generality assume node transaction enters prepared request version pre commit pre commit timestamp immediately aborted contradict assumption local commits otherwise local commits local commit timestamp aborted contradicts assumption otherwise accord algorithm local commit therefore necessarily contradict assumption discus commits timestamp local commits timestamp sub prepares vice versa prepares  prepares version namely pre commit local commit argument employ exclude possibility local commit sub abort commits timestamp sub finally sub prepares already scenario pre commit local commit attempt discus commit aborted otherwise accord algorithm obtain pre commit timestamp assume hence obtain contradiction theorem SPSI transaction consistent speculative snapshot transaction originate node snapshot recent version transaction commit timestamp independently node transaction originate local commit timestamp originate node proof SPSI contradiction assume transaction creates local commit version denote recent version local commit however discus local commit separately local commit local commit later namely former local commit already latter non existent pre commit discus non existent version update later transaction update local commit timestamp contradicts assumption recent version local commit pre commit  local commits discus local commit indeed recent version accord fetch recent version snapshot contradicts assumption commit version non existent pre commit local commit local transaction commit already discus commit basically version argument previous local commit contradict assumption theorem SPSI conflict commit transaction commit concurrent transaction disjoint proof contradiction assume concurrent conflict transaction update commit without loss generality assume commit replica assume node replicates prepares scenario request version pre commit certification fail abort contradicts assumption local commit local commit implies originate aborted otherwise originate commits discus originate prepared dependence algorithm eventually commits assume aborted algorithm commit fail abort contradicts assumption prepares accord algorithm therefore version accord algorithm aborted contradicts assumption commits theorem SPSI conflict transaction speculative snapshot transaction snapshot concurrent transaction disjoint proof contradiction assume exists transaction snapshot concurrent transaction conflict snapshot transaction commit local commit analyze scenario local commit snapshot commit SPSI guarantee concurrent transaction conflict cannot commit contradiction local commit snapshot originate node node assume without loss generality node transaction enters prepared request version pre commit pre commit timestamp immediately aborted algorithm contradict assumption local commits otherwise local commits local commit assume pre commits succeed pre commit abort algorithm however implies concurrent yield contradiction local commit commit vice versa without loss generality assume local commit commit originate node denote local commit version readable scenario replicate replicate discus scenario replicate assume commits implies prepared replica cannot replica assume contradiction replica prepares aborted algorithm request pre commit contradiction assume commit conversely prepares aborted pre commit another contradiction assume local commit successfully pre commits assume replica scenario snapshot vice versa snapshot directly indirectly already prepared replica necessarily commit analyze sub correspond scenario attempt local commits prepares vice versa local commits prepares accord algorithm conflict receives replica request replicate pre commit version abort prepares local commit conflict fail pre commit obtain contradiction snapshot implies snapshot pre commit later snapshot replicate already commit happens aborted pre commit version instal happens conflict directly indirectly algorithm algorithm therefore guaranteed abort commits contradicts assumption snapshot replicate snapshot  min OLCSet ffc directly indirectly execute algorithm min OLCSet ST update non local algorithm ffc FC directly indirectly commit transaction necessarily commit timestamp algorithm min OLCSet min OLCSet directly indirectly timestamp necessarily timestamp OLCSet algorithm combine  conclude implies concurrent contradicts assumption theorem SPSI dependency uncommitted transaction transaction commit non commit transaction proof algorithm transaction commit transaction depends commit timestamp timestamp transaction abort abort transaction transaction commit depends uncommitted transaction liveness devote analyze liveness str precisely failure execution transaction abort commit finite amount refer discussion handle failure scenario algorithm execution transaction scenario pre commit remote local commit version exists commit timestamp algorithm local commit version exists transaction conflict another local commit transaction previously ffc minimum OLCSet algorithm execute certification phase algorithm resolve speculative dependency developed whenever local commit transaction algorithm inspect scenario indefinitely statement algorithm algorithm occurs attempt version pre commit local commit transaction originate node attempt version pre commit transaction execute certification phase discus later scenario eventually commit abort unblock algorithm update reflect reading version return  implies exist unsafe transaction however unsafe transaction local commit implies execute certification phase discus scenario eventually abort commit remove eventually  execution local global certification phase partition delay certification request already prepared local commit another transaction algorithm assume contradiction indefinitely due existence cycle transaction graph compose transaction transaction transaction attempt already prepared local commit analogous recall however accord algorithm transaction transaction aborted transaction necessarily algorithm implies transaction necessarily obtain however hence obtain contradiction proof cannot indefinitely reading execute certification phase remains indefinitely unresolved dependency algorithm assume contradiction speculatively local commit transaction commits abort assume without loss generality exists series dependent transaction transaction depends version local commit transaction denote respectively transaction speculatively another local commit transaction former latter transaction necessarily series dependent transaction cannot cyclic transaction series namely cannot speculative dependency eventually commit abort argument scenario eventually unblock unblock transaction series forth eventually unblock ensure serializability SPSI extends SI specification introduce specification impose guarantee transaction commits visible transaction accord SI transaction snapshot physical originate node assume physical possibly arbitrary skews version commit transaction transaction due skews snapshot commit timestamp attribute sort anomaly illustrate affect str various recent adopt SI definition discus extend str anomaly ensure exist approach enforce RTO transactional protocol integrate str technique propose spanner delayed commit image KB image exemplify violate commit delay avoid denote node denote transaction  denote progress delayed commit integrate approach employ spanner ensure achieves delay commit operation transaction attribute commit timestamp specifically assume upper bound skew across node commit timestamp transaction node commit transaction physical additionally visibility commit version prevent delayed commit phase achieve delay commit message transaction coordinator extend effective duration pre commit lock illustrates technique avoid violate although commits due skew assign snapshot origin node whereas attribute commit timestamp item modify update version violate apply commit delay technique finalizes commit commit message involve partition return commit request issue application local become concurrent transaction freed constraint hence becomes legal version approach essentially delay commit transaction guarantee transaction commit obtains snapshot timestamp commit timestamp attribute transaction commits due skews possibly update guaranteed become concurrent integrate str integrate delayed commit technique str relatively straightforward technique implies simply inject delay algorithm namely establish commit timestamp local dependent transaction aborted impact correctness discus introduce delayed commit mechanism str compromise correctness respect SPSI specification discus ensure SPSI delayed commit technique equivalent assume execution algorithm delayed however model assumes bound relative incorporate technique protocol endanger correctness respect SPSI specification integration delayed commit str spanner ensure discus non speculative speculative separately non speculative non speculative str visibility logic spanner transaction return recent version tag commit timestamp snapshot timestamp delayed commit ensures str transaction reading non speculatively commit data item cannot version commit transaction ensure speculative speculative transaction local commit data version commit unless transaction aborted due misspeculation however transaction commit visible transaction preclude transaction transaction commit impact effectiveness speculation str speculation fail scenario speculative return version locally commit transaction eventually commits commit timestamp snapshot timestamp reading transaction speculative return version locally commit transaction eventually abort due contention delayed commit increase commit timestamps transaction affect speculation fail due likelihood transaction abort due contention however increase consequence increase duration pre commit lock delayed commit mechanism implies contention prone workload delayed commit technique reduce effectiveness speculative increase likelihood speculation transaction abort speculation succeed contention scenario performance gain achievable speculation amplify via speculative bypass pre commit lock concurrent transaction duration amplify delayed commit mechanism serializability described str ensures SPSI consistency criterion extends SI additional correctness guarantee regard speculative execution transaction although SI widely adopt deem sufficient application non serializable execution endanger correctness scenario SPSI imposes restriction SI non speculative execution transaction commit SPSI admits anomaly affect SI anomaly refer skew illustrate concurrent transaction withdraw credit account respectively balance withdrawal become negative transaction generate conflict SI SPSI transaction commit application invariant imposes balance negative discus extend str ensure serializability literature exists investigate ensure serializability database SI via middleware application acquisition additional lock detection specific conflict underlie SI compliant DBMS adaptable principle partially replicate distribute setting loosely synchronize deployment scenario target str however argue serializability attain simpler introduce relatively straightforward alteration certification logic employ str basically instead transaction generate conflict local global certification transaction incur conflict transaction certify invalidate commit concurrent transaction specifically certify locally globally transaction additional perform timestamp recently local commit version snapshot timestamp transaction aborted easy technique avoid illustrate develop conflict pas validation commit nevertheless mechanism transaction enable detection conflict introduce significant performance penalty update transaction perform scan evaluation extensive experimental aim performance gain achieve str transaction speculatively pre commit data str employ external speculation technique unlike str programmer develop compensation logic  workload characteristic impact performance str relevant precise technique conjunction speculative non speculative protocol effective str tune mechanism ensure robust performance presence workload favorable speculative technique baseline baseline protocol SI extend replication explain refer protocol ClockSI rep ClockSI rep representative transactional protocol decentralize physical snapshot isolation namely consistency guarantee SPSI extends accommodate speculation ClockSI rep appropriate baseline evaluate performance gain achievable str thanks speculative precise baseline representative recent approach propose program model aim external speculation technique contrast str internal transparent speculation expose uncommitted client extra complexity programmer identify concurrency anomaly affect program develop correspond compensation logic str baseline ext spec develop variant ClockSI rep  client transaction local certification phase undergo global certification phase compensation logic execute ext spec simplicity benchmark speculation production incorrect client compromise internal consistency server application choice actually ext spec spare baseline additional overhead associate execution potentially complex compensation logic ext spec ClockSI rep distribute concurrency mechanism deliver peak throughput latency abort rate however ext spec external speculation reduce speculative latency respect ClockSI rep finally evaluation focus evaluate performance absence failure neither str baseline implement additional fault tolerance mechanism experimental setup implement baseline protocol str erlang  source platform evaluate distribute consistency protocol precisely memory backend  interface extend develop fully fledge  implementation str aforementioned baseline code protocol publicly accessible http github com  str experimental testbed deployed across DCs amazon EC span consists instance replication factor partition replica instance replica partition replica partition setting ensure target remote partition choice allows evaluate gain stem accelerate commit phase speculation technique str aim tackle scenario locality remote gain str decrease str transaction speculatively remote data item update relative benefit str decrease argue realistic setting desirable optimize data partition scheme minimize frequency remote avoid incur latency transaction execution due fetch remote data upon commit phase geo distribute server involve PC protocol load inject spawn thread per emulate client node client issue transaction pool local transaction coordinator retries transaction aborted metric evaluate latency latency transaction calculate elapse activation commit abort retries ext spec report speculative latency define activation transaction speculative commit commit besides reporting abort rate ext spec report rate external misspeculation percentage transaction speculatively commit finally aborted trigger activation compensation logic implement simplicity report obtain average standard deviation omit reporting plot enhance readability unless otherwise specify str tune mechanism described enable disable internal speculation tune throughput measurement frequency report str refer configuration identify tune synthetic workload synthetic benchmark allows generate workload precisely identifiable heterogeneous characteristic synthetic benchmark generates transaction zero client thread issue transaction previous commit transaction data access node host partition serf replica yield distinct partition node serf replica additional partition data partition logically subdivide local remote contains access locally originate transaction access transaction originate node within assume existence hotspot relatively probability access adjust hotspot contention rate allows adjust independent likelihood contention transaction initiate local node local contention transaction originate remote node remote contention detail shortly transaction update partition originate node serf replica access transaction target partition originate node replica remain access target partition originate node serf replica sake brevity refer former partition partition latter partition transaction target partition access probability hotspot correspond local remote respectively workload obtain hotspot data partition synthesize extreme scenario workload synth generates local contention configure partition remote contention configure partition due likelihood local contention transaction likely speculatively version local commit concurrent local transaction remote contention internal speculation likely succeed workload synth local remote contention resp local resp remote partition workload synth transaction frequently speculative internal speculation almost certainly doom fail due remote contention synth clearly highlight potential benefit internal speculation favorable workload ClockSI rep ext spec fail achieve scalability thrash due abort rate plot concurrency grows client conversely str almost linearly client throughput saturates around client achieve gain respect baseline achieve throughput abort rate str significantly baseline protocol  baseline transaction pre commit concurrent transaction commits likely generates commit timestamp snapshot abort scenario str speculatively commit timestamp attribute precise likely absolute probability baseline timestamp str spare abort allows str minimize waste due transaction rollback enhance parallelism sustainable local contention dominates workload abort local certification phase transaction transaction pas local certification likely avoid conflict remote transaction hence commit probability consideration explain ext spec incurs abort rate ClockSI rep incur external misspeculation rate latency plot magnitude latency str baseline client due ClockSI rep ext spec thrash due contention load analogous speculative latency ext spec latency str load client abort rate relatively synth unfavorable workload internal speculation str robust performance par baseline protocol thanks tune capability str automatically disables speculative client correspond load internal speculation adverse performance illustrate report performance achieve str statically configure enable disable speculative tune mechanism configuration detail axis report throughput variant str normalize respect throughput variant achieves performance workload client axis indeed speculative reduces throughput around workload synth client propose tune scheme correctly identify optimal configuration plot choice enable disable internal speculation affected workload speculative beneficial synth synth load fix workload speculative actually penalize throughput synth client moreover without enable speculative technique str achieves throughput non speculative baseline experimental evidence efficiency propose mechanism normalize throughput abort rate technique update transaction physical precise denotes physical precise SR denotes speculative enable throughput report normalize accord throughput physical technique physical precise physical SR precise SR image KB image performance protocol synthetic workload representative favorable synth unfavorable synth scenario internal speculation latency plot solid latency dash speculative latency abort rate plot report abort rate solid misspeculation rate dash benefit overhead precise aim quantify benefit stem precise mechanism conjunction speculative non speculative protocol alternative obtain ClockSI rep physical extend precise precise speculative SR transaction duration hence correspond abort update transaction maintain contention stable increase access transaction accordingly increase factor image KB image normalize throughput respect perform static configuration SR SR denote enable disable statically speculative str auto denotes tune technique image KB image performance protocol tpc workload latency plot solid latency dash speculative latency abort rate plot report abort rate solid misspeculation rate dash precise significantly reduces abort rate achieve throughput gain physical non speculative protocol generally transaction update abort throughput gain achieve precise another enable speculative physical actually negative abort rate throughput physical protocol SI spanner tend generate commit timestamp reduces speculative succeed finally collective precise speculative throughput gain transaction update assess additional storage overhead introduce precise recall maintain additional metadata timestamp access measurement tpc RUBiS benchmark precise extra storage macro benchmark evaluate performance str implement realistic benchmark namely tpc RUBiS unlike previous synthetic benchmark tpc RUBiS specify consecutive operation issue client hence client population saturate tpc tpc workload consists representative transaction payment transaction local contention remote contention transaction local contention remote contention status transaction workload payment status tpc payment status tpc payment status tpc server replica warehouse speculative significant throughput gain workload local contention baseline protocol ClockSI rep ext spec str achieves significant speedup tpc local contention due proportion payment transaction tpc tpc str achieve speedup respectively external speculation barely brings improvement throughput ClockSI rep external speculation significantly reduce speculative latency perceive client load explain abort rate plot clearly load increase likelihood external speculation successful quickly decrease client client per server latency ext spec ClockSI rep consequence abort rate incur protocol conversely str delivers latency millisecond RUBiS RUBiS model online bidding encompasses transaction update transaction RUBiS sql database perform modification adapt str data model horizontally partition database across node node contains portion data local index shard insertion operation unique ID obtain ID locally instead update index shard default RUBiS update default workload default transaction benchmark str achieves remarkable throughput gain latency reduction client memory limit unable load client str achieves throughput latency gain str baseline extend latency reduction ClockSI rep ext spec external speculation effective reduce speculative latency load loose effectiveness collapse performance ClockSI rep conclusion future proposes str innovative protocol exploit speculative technique boost performance distribute transaction geo replicate setting str novel consistency criterion speculative snapshot isolation SPSI SPSI extends familiar SI criterion shelter programmer subtle anomaly arise adopt speculative transaction processing technique furthermore str source code modification fully transparent programmer str recent highly scalable transactional protocol physical SI google spanner extends novel item timestamping mechanism precise speculative tune mechanism via extensive experimental str achieve strike gain throughput increase latency reduction workload characterize inter data contention ensure robust performance adverse setting research opportunity related evaluation alternative tune mechanism model methodology rely analytical model aim optimize multiple kpis external misspeculation throughput diverse speculation transaction node heterogeneous cluster image KB image performance protocol RUBiS latency plot solid latency dash speculative latency abort rate plot report abort rate solid misspeculation rate dash