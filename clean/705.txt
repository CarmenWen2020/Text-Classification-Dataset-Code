task reallocation load balance mapreduce application datasets context propose novel strategy cooperative agent optimize task schedule mapreduce novelty strategy ability agent identify opportunity within unbalanced allocation trigger concurrent negotiation amongst agent locally reallocate task within contribution task reallocate accord proximity resource perform accordance capability node agent situate evaluate adaptivity responsiveness approach implement prototype conduct vast panel heterogeneous environment explore hardware configuration extensive experimentation reveals strategy significantly improves overall runtime classical hadoop data processing previous keywords artificial intelligence multi agent negotiation mapreduce bigdata introduction data involves processing volume data distribute file parallel program emerge distribute compute topic brings challenge related task allocation load balance adaptivity various setting without configuration user expertise responsiveness rapid improve concerned practical application resource data successfully execute task distribute node node encounter potential execution hazard node communication lag task prevents centralize approach compute allocation resource perform task allocation inevitably fetch resource node incur extra task execution application task allocation challenged execution capitalize upon resource distribute practical application mapreduce prominent distribute data processing model tackle vast amount data commodity cluster task task reduce task distribute node task allocation reducer priori fix partition function instance partition hash modulus partition accord default partition popular implementation hadoop task allocation problematic firstly data skews mapreduce application unbalanced workload reduce phase secondly unfair allocation reduce phase due heterogeneous performance node thirdly load balance challenged rapid performance variation due exogenous tackle load balance task allocation application motivate multi agent technology attention multi agent decentralize multiple agent local decision perception environment complex emerge interaction individual behaviour exist adopt approach model load balance non cooperative optimize user centric metric centric global runtime assume agent cooperative viz objective minimize global runtime assume knowledge knowledge task allocation however agent model peer compute task peer assume practical application task perform agent without preemption precedence task indivisible deadline shareable task belongs agent formalize multi agent situate task allocation propose dynamic task reallocation concurrently task execution distribute adaptive disruptive phenomenon node agent locally identify opportunity within unbalanced allocation trigger concurrent negotiation reallocate task apart decentralization avoid performance bottleneck due global multi agent approach situate task allocation additional crucial requirement concurrency task reallocation task execution concurrent adaptation task reallocation trigger disruptive perform significantly extends previous contrary assume task intrinsic data location resource account beyond introduce multi auction allows agent bid concurrent negotiation improve responsiveness additionally vast panel empirically evaluate adaptivity multi agent heterogeneous environment responsiveness multi agent due multi auction adequacy agent strategy respect compute infrastructure specifically contribution formalize multi agent situate task allocation task agent due resource locality multi agent version mapreduce distribute solves partition data skew task reallocation concurrent negotiation agent occurs along mapreduce processing cope continuously evolve environment conduct extensive datasets experimental improves runtime negligible computational overhead mitigates heterogeneity computational environment structure overview relevant related defines socially rational task delegation agent locally improve task allocation sketch negotiation concurrent task consumption specifies strategy agent task perform negotiate practical application empirical evaluation described finally summarizes contribution outline future related context mapreduce context task schedule consists assign reduce task confuse schedule considers allocation usage resource multiple mapreduce banerjee  data skews mapreduce application identify unbalanced workload data processing focus partition skew unbalanced allocation node reduce phase penalize load reducer data skew tackle parametrization prior knowledge data distribute compute environment reduce task schedule accord data skew data locality without modify partition address partition data skew dynamic adaptative task reallocation concurrent task consumption reallocation adaptative data processing enables tackle issue lack prerequisite knowledge data processing inaccurate estimation task execution execution hazard node communication lag knowledge proposal scalable responsive comparison significant exist task allocation load balance summarize analysis grid classifies accord crucial aspect request practical application deployment mapreduce processing datasets classical schedule extensive research offline scheduler model minimize makespan completion task perform task unrelated machine capability denote NP pseudo polynomial algorithm developed completion heuristic ect propose  kim phase heuristic linear program local heuristic propose   bound algorithm apply centralize algorithm recent ect heuristic approximation algorithm acceptable computational requirement cannot apply scenario task strategy decentralize local heuristic analysis grid related accord aspect   kim makespan minimization makespan minimization   makespan minimization makespan minimization jiang response makespan minimization wang throughput throughput throughput jiang jiang throughput jiang response minimization jiang  response minimization walsh  allocation allocation response minimization   response minimization   makespan minimization  makespan minimization multi agent schedule significant attention load balance distribute classical schedule due aspect decentralization global performance bottleneck status information entire instead task allocation negotiate agent node instance propose negotiation reputation allocation mechanism load balance reduce resource access respond adaptation classical schedule static inaccurate estimation task execution disruptive phenomenon task consumption node etc modification exist allocation optimal wang introduce adaptive implement adaptable task allocation dynamic environment combine supervise classification internal decision task assignment investigate adaptive behaviour agent efficient load balance multi agent reinforcement cannot practical application concerned neither generalizable predictive prior model data environment available enormous amount related recent survey mainly distinguish aspect objective makespan minimization widely apply optimization objective task allocation propose task schedule minimize makespan however allocation reduce phase challenge allocation along minimize response task minimize task throughput task per reliability probability task successfully execute   distinguish node related reliability reliability resource computation related reliability reliability communication distribution resource node access execute task purpose location agent accessibility resource task allocation algorithm jiang jiang allocate task node proportional resource resource interact node jiang propose locality sensitive resource allocation model account distance node locality resource jiang  task allocation mechanism contextual resource node richer execute task node access resource node equidistant fully physical social network efficiency task allocation depends proportion resource data local intrinsic talent cpu cooperation distinguish meta scheduler optimize centric metric recent focus user centric metric latter adopts approach model load balance non cooperative walsh  task allocation protocol agent acquire behalf consumer producer agent maximize benefit cooperate perform task propose distribute negotiation mechanism selfish agent negotiate resource contract price decommitment penalty   formulate load balance non cooperative user minimize response task cooperative agent negotiate address centric metric global runtime instance   task assignment agent task cannot perform reliable agent contrast assume task perform agent without preemption precedence indivisible shareable task belongs agent deadline situate task allocation formalize multi agent situate task allocation  task runtime agent due resource locality definition  multi agent situate task allocation tuple node agent task perform function return location agent function specifies resource task node specifies task location task cheaper resource local denote respectively similarly denote local partially local agent respectively  evaluate task allocation collective viewpoint maximum completion makespan definition task allocation workload makespan task allocation partition task agent task bundle workload agent allocation define makespan define task allocation workload makespan location task task allocation optimal agent modify task allocation negotiate task delegation delegation task agent agent aim improve makespan load balance agent definition formalizes effective task delegation location task definition socially rational task delegation task allocation delegation task agent agent define allocation delegation socially rational iff socially rational task delegation strictly decrease local makespan agent increase global makespan denote socially rational task delegation agent trigger task allocation stable agent trigger socially rational task delegation socially rational task delegation delegation task agent agent task allocation improves makespan however stable task allocation delegation agent agent optimal stable depicts workload agent delegation load balance unstable task allocation stable finite socially rational task delegation proof load balance task allocation vector workload decrease denotes workload stable exists socially rational task delegation formally implies lexicographic formally finite allocation strict finite socially rational task delegation negotiation sketch negotiation concurrent task execution task consume remove task multi agent aim minimize makespan allocation  execution task disruptive modifies  task allocation formally definition task consumption task allocation consumption task agent task allocation sequence task consumption remove task initial allocation empty denote obviously task consumption decrease makespan decentralize task delegation agent concurrent negotiation task delegation negotiation contract net protocol decision choice task negotiate strategy initiator described refusal bid peer social rationality task delegation selection bid initiator initiator selects bidder workload decrease makespan knowledge agent partial necessarily belief allocation indeed agent workload belief belief agent workload agent allocation potential socially rational task delegation agent initiate task allocation belief formally agent initiate negotiation computation local makespan initiator negotiation belief possibly inaccurate price decentralization however agent informs peer workload trigger within negotiation message task execution therefore belief peer update successful negotiation socially rational task delegation tends improve makespan agent accord belief identifies opportunity within unbalanced allocation initiate negotiation local decision promote adaptivity multi agent concurrent consumption delegation task delegation task consumption concurrent complementary operation task removal opportunity socially rational task delegation influence operation initial allocation agent perform socially rational task delegation improve makespan task consumption eventually interrupt stable allocation grey task consumption agent stable allocation multi auction agent involve negotiation bidder cannot initiate another negotiation conversely negotiation involve agent concurrently additionally introduce multi auction allows agent bid concurrent negotiation improve responsiveness empirical gap load reducer load faster load balance faster image KB image concurrent task consumption vertical task delegation horizontal tackle eager bidder adopt conservative approach warrant task delegation socially rational purpose bidder computes overhead definition overhead allocation task currently negotiate pending task agent proposal overhead agent potential workload agent workload auction involve allows bidder optimistic proposal socially rational task delegation evaluate delegation task agent bidder adopts strategy bidder decline delegation socially rational bidder postpones evaluation delegation depends outcome pending negotiation bidder proposal task delegation socially rational whatever outcome pending negotiation moreover bidder informs initiator potential workload latter negotiation bidder workload update workload remains overhead update finally pending delegation evaluate multi auction allocation agent workload focus overhead agent influence negotiation assume agent delegation task respectively task agent illustrates evolution overhead agent interaction peer agent proposal agent message however delegation request agent message socially rational decline message agent postpone evaluation delegation agent message depends previous pending negotiation delegation task confirm message agent decline delegation message social rationality delegation task neither exclude confirm finally delegation task reject message agent proposal message strategy task delegation task consumption concurrent strategy agent task perform delegate definition strategy allocation strategy agent couple selects task perform none denote selects task negotiate none worth delegation strategy potential socially rational propose strategy local agnostic strategy function location aware account location resource local agnostic strategy adopt principle consume delegate agent performs task bundle negotiate potential socially rational delegation purpose strategy agent sort task accord consideration resource fetch strategy implicit agent perform local task peer delegate task peer strategy principle explicit location aware strategy accord strategy agent performs local task negotiates local belief knowledge strategy built data structure local aware bundle firstly local availability ratio locality task definition local availability ratio local availability ratio agent task define maximum local availability ratio task local availability ratio agent task ratio local resource resource task secondly local aware bundle agent depict  accordance local availability ratio agent task maximum local bundle contains task agent resource agent resource task task sort decrease intermediate local bundle contains task partially local task sort decrease local availability ratio task local availability ratio sort decrease centre bundle contains task task sort increase agent task perform maximum local bundle local task agent task negotiate bundle task selects potential socially rational delegation discussion introduce practical application prototype discus empirical practical application practical application distribute deployment mapreduce datasets cluster hadoop mapreduce consists successive phase reduce phase node filter parallel input data generate data chunk data chunk node mapper generate reduce phase node parallel individual reduce phase mapreduce formalize  definition node cluster reducer agent reduce task capture reducer per node considers data location conformance specify task agent denotes chunk capture resource fetch empirically cluster network computer function carefully tune adaptivity dynamic task reallocation allows mitigate inaccurate function implementation developed multi agent version mapreduce distribute  testbed  implement akka highly concurrent distribute resilient message driven application fault tolerance node scope assume message transmission delay arbitrary negligible message lose acknowledgement deadline mechanism interaction protocol decrease complexity related reducer agent adopt modular agent architecture allows concurrency negotiation task performance separation communicative decision behaviour empirical explain experimental detail choice metric datasets report experimental metric evaluate runtime fairness introduce previous metric contribution reducer sum task perform contribution fairness ratio minimum maximum contribution agent runtime reduce phase runtime reducer fairness ratio runtime slowest reducer runtime contribution reducer corresponds workload definition runtime effectively makespan closer contribution fairness fairness fairer allocation agent workload application setup hardware configuration cluster blade CPUs  ram network PCs core intel 6GB ram obtain configuration cluster exception configuration distinct datasets dataset contains rating user movie dataset  ranking per movie dataset contains timestamp rainfall etc dataset  per per increase volume data without mapping phase scope without data distribution replicate   whatever datasets mapper reducer due observable nondeterminism distribute execution comment distinctive runtimes initial workload default hadoop partition function  modulo reducer partition balance intentionally  reducer task perform latter highlight partition skew reducer execute task empirical firstly aim validate approach negotiation improves makespan runtime overhead negotiation multi agent adaptive performance variation heterogeneous environment adopt default local agnostic strategy multi auction secondly evaluate choice image KB image allocation classical hadoop negotiation improves runtime negotiation beneficial initial allocation validate hypothesis contribution fairness fairness runtime without negotiation throughout whenever without negotiation refer obtain classical hadoop empirical negotiation improves runtime due load balance reducer contribution strongly benefit negotiation initial unfair allocation execute  reducer homogeneous node data processing task delegation workload unbalanced load reducer propose task accepted load finally contribution fairly distribute node reducer terminate fairness therefore makespan runtime halve empirical initial allocation overhead negotiation negligible affect runtime cannot penalize negotiation initial allocation execute  reducer homogeneous node initial allocation surprising contribution fairness fairness without negotiation however improve negotiation makespan slightly decrease therefore runtime faster negotiation worth negotiation trigger agent allocation stable validate adaptive dynamic concurrent negotiation task reallocation improves runtime initial allocation demonstrates  tackle partition skew highlight overhead negotiation negligible respect benefit load balance image KB image median metric standard deviation depict boxplots contribution negotiation distinctive execution  negotiation mitigates heterogeneity heterogeneity computational environment permanent non uniformity processing capability node temporary due exogenous slowdown node empirical negotiation allows heterogeneous environment reallocate task node improve runtime multi agent adapts allocation runtime hazard initial allocation execute  reducer indeed cpu activate node reducer cannot cpu therefore reducer faster initial allocation challenged reducer without negotiation reducer terminate reducer fairness around contrast negotiation allows reducer terminate fairness negotiation trigger processing load balance thanks dynamic continuous task reallocation penalize node faster due negotiation finally contribution reducer contribution contribution fairness approximately image KB image median contribution fairness standard deviation depict boxplots contribution distinctive execution  node evolution workload without negotiation negotiation negotiation mitigates impact runtime hazard slows reducer reducer delegate task execute multi agent adapts allocation heterogeneous environment initial allocation execute  reducer indeed cpu activate node reducer node reducer node previously contribution fairness negotiation reducer perform task others dynamic continuous task reallocation allows fairness approximately faster due negotiation finally contribution reducer contribution others contribution fairness validate heterogeneous environment benefit adaptivity multi agent performance variation brings unbalanced allocation continuous dynamic detects trigger reallocation task node speedup runtime image KB image median metric standard deviation depict boxplots contribution negotiation distinctive execution  heterogeneous environment auction versus multi auction assume multi auction allows agent bid concurrent negotiation improves responsiveness multi agent empirical multi auction faster stable allocation multi agent adapts allocation faster multi auction generate dataset initial task allocation unfair  per reducer homogeneous environment none task assign reducer task per task assign others reducer workload previous negotiation improves load balance however multi auction efficient multi auction allocation workload agent remains reduce phase auction actually task delegate auction reducer instantly perform contrast agent continuously bid simultaneous auction multi auction therefore data processing auction around multi auction finally contribution fairness around auction multi auction multi auction load balance improves responsiveness multi agent image KB image initial workload contribution workload distinctive execution  auction multi auction adequacy strategy respect infrastructure assume efficiency location aware strategy depends resource fetch empirical location aware strategy improves runtime extra fetch resource significant efficiency negotiation strategy depends hardware configuration generate dataset initial task allocation  challenged evaluate impact proximity data resource processing node runtime data task node assign reducer detail network computer location aware strategy significantly improves runtime respect local agnostic strategy around contrast local agnostic strategy efficient within cluster indeed fetch resource node network computer impact local execution task runtime contrast extra task execution within cluster experimentally around moreover worth locality implicitly account local agnostic strategy underlie function define task cheaper resource local conclusion propose multi agent task reallocation distribute node location resource perform task minimize makespan apply negotiation framework load balance reduce phase distribute mapreduce model datasets prototype empirically evaluate  adaptive partition skew heterogeneous compute environment potential execution hazard due negotiation improves runtime due load balance reducer contribution future task swap improve makespan stable allocation task bundle speedup negotiation  scalable tackle task due local decision agent task delegate perform moreover overhead negotiation negligible respect benefit load balance task reallocation concurrent task consumption negotiation trigger agent allocation stable indeed schedule algorithm allocates task ongoing distribute strategy attempt repair potential unbalanced partition user perspective adaptive dynamic approach tackle performance fault tolerance achieve data replication worth  expertise parametrization due adaptivity choice strategy depends hardware configuration parameter carefully tune replication factor default hdfs sensitivity analysis influence parameter beyond scope certainly worth investigation generally future continuous arrival complex concurrently submit user focus reassignment independent grain task execution granularity gap formal framework extend optimization objective  concurrent maximum completion dependent task