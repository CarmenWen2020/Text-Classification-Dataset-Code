dispersion graph asks robot arbitrarily node node anonymous graph reposition autonomously configuration robot distinct node graph significant due relationship fundamental robot coordination exploration scatter load balance relocation driven robot recharge node dispersion global communication model robot communicate robot graph graph unknown robot novel deterministic algorithm arbitrary graph synchronous robot perform action algorithm dfs traversal guarantee runtime robot min runtime logk robot maximum graph algorithm bfs traversal guarantee runtime logd  robot diameter graph complement exist establish local communication model robot communication robot node keywords multi agent autonomous mobile robot dispersion distribute algorithm memory complexity introduction dispersion autonomous mobile robot evenly significant distribute robotics recently formulate  moses context graph define arbitrary initial configuration robot node node anonymous graph robot reposition autonomously configuration robot distinct node graph dispersion practical application relocate driven robot recharge node assume smart device communicate empty important due relationship autonomous robot coordination exploration scatter load balance deployment aspect mobile robot research understand resource limited robot accomplish task distribute manner memory requirement dispersion graph dispersion global communication model robot communicate robot graph structure robot previous detail related dispersion local communication model robot communicate robot node although global communication model local model challenge local model arise global model robot node cannot communication node therefore robot explore local model global communication model heavily distribute robotics addition local model goal explore global communication dispersion graph local model dispersion robot node arbitrary graph diameter maximum  robot comm model initial conf  local local local Î”D local local local bound global bound global thm global thm global thm  local thm global deterministic algorithm dispersion global communication model arbitrary graph algorithm depth dfs traversal performs local communication model factor algorithm algorithm dispersion breadth bfs traversal memory offs complement algorithm bound memory requirement global model overview model model difference described  moses  ali robot operating node graph assume undirected graph diameter maximum addition anonymous node unique IDs hence indistinguishable incident node unique label node robot distinguishable unique IDs robot activation synchronous robot activate perform operation simultaneously synchronize runtime difference model assume local communication model robot communicate node whereas global communication model robot communicate irrespective despite capability robot oblivious robot communicate colocated establish dispersion arbitrary graph differentiates initial configuration robot configuration robot node initial configuration initial configuration otherwise theorem initial configuration mobile robot arbitrary anonymous node graph maximum dispersion robot global communication model dispersion robot global communication model theorem mobile robot arbitrary anonymous node graph diameter maximum initial configuration dispersion robot local communication model initial configuration dispersion robot global communication model theorem performs previously algorithm local communication model factor additional bound memory bound robot dispersion graph global communication model implication constant arbitrary graph theorem asymptotically optimal respect memory arbitrary graph theorem significantly algorithm local communication model bound dispersion global communication model implies theorem asymptotically optimal constant arbitrary graph although theorem complexity theorem algorithm theorem significant algorithm bfs approach dfs dispersion illustrates technique performs algorithm local communication model directly contributes merge concurrently initiate bfs construction traversal distribute application challenge technique dfs traversal approach previous dispersion robot node dfs traversal dispersion robot node dispersion however node robot node multiple robot reposition node approach dfs traversal parallel minimize challenge arises dfs traversal robot happens robot node traverse already traverse graph dfs traversal smarter synchronize parallel dfs traversal increase factor local communication model however remove factor due synchronization develop approach algorithm allows synchronize dfs traversal without traverse already traverse graph dfs robot node global communication model additive multiplicative synchronize dfs traversal due information robot action passing information remotely robot local communication model literature local communication model mechanism synchronization local communication model incur factor synchronize dispersion bound global communication model becomes constant arbitrary graph asymptotically optimal propose technique algorithm generalize apply merge concurrently initiate concurrently dfs component dfs component additive despite efficiency merge dfs traversal due global communication bound inherent algorithm dfs traversal global model circumvent limitation bfs traversal node naive approach bfs exponential runtime smarter algorithm algorithm perform bfs achieve dispersion arbitrary graph initial configuration initial configuration introduces factor instead factor bound propose technique algorithm algorithm generalize apply merge concurrently initiate concurrently bfs component bfs component related previous focus dispersion local communication model  moses dispersion assume memory bound robot bound arbitrary graph deterministic algorithm graph deterministic algorithm robot dispersion arbitrary graph algorithm robot another robot  ali bound arbitrary graph deterministic algorithm dispersion arbitrary graph algorithm robot algorithm robot algorithm robot recently algorithm arbitrary graph memory robot grid graph algorithm memory robot local model algorithm memory robot global model randomize algorithm dispersion initial configuration random mainly reduce memory requirement robot global communication model previous arbitrary graph summarize closely related dispersion graph exploration mobile robot exploration heavily literature specific arbitrary graph robot explore anonymous graph memory runtime algorithm model graph node memory algorithm algorithm robot node algorithm robot node runtime algorithm preprocessing exploration robot collective exploration robot another related dispersion scatter robot node graph grid recently  sharma algorithm uniform scatter grid furthermore dispersion related load balance load node distribute processor node heavily graph refer reader recent development topic organization discus detail model bound discus dfs traversal graph dfs algorithm arbitrary graph theorem bfs algorithm arbitrary graph theorem bfs algorithm arbitrary graph theorem finally conclude discussion model detail preliminary graph graph model node graph assume unweighted undirected anonymous node identifier node incident uniquely identify label node maximum maximum node assume correlation robot along graph node memory information robot robot model robot reside node simplicity sometimes denote robot robot reside robot occupy node robot unique ID robot node node aware furthermore assume robot equip memory information modify robot node communication model assume robot global communication model robot capable communicate robot irrespective graph node however information robot graph node anonymous contrast local communication model robot communicate robot node global communication abstraction implement message passing memory algorithm message passing non robot wherein message destination robot broadcast perform simulated memory model robot writes broadcast message content memory receiver content memory cycle robot active inactive robot becomes active performs communicate compute CCM cycle communicate robot node robot node memory algorithm communication message passing broadcast simulated memory model robot memory compute perform arbitrary computation information communicate portion cycle determination possibly exit information robot cycle writes information memory robot exit compute cycle CCM sub cycle memory complexity synchronous robot active CCM cycle sub cycle perform cycle sub cycle synchrony therefore cycle another important parameter memory memory source robot memory persistent memory memory survive across memory robot identifier mobile robot dispersion dispersion formally define definition dispersion node anonymous graph mobile robot arbitrarily node robot reposition autonomously configuration robot distinct node goal dispersion optimize performance metric memory robot bound discus memory bound global communication model difficulty obtain runtime memory algorithm initial configuration robot node arbitrary graph diameter bound immediate robot traverse per node away bound theorem deterministic algorithm dispersion graph global communication model proof graph initial configuration robot node robot dispersion distinct node exactly node node robot bound theorem exists node diameter height deterministic algorithm dispersion global communication model proof bound proof exploration due bound argue bound exploration applies dispersion argue bound applies dispersion global communication model bound exploration assume initial configuration robot node moreover assume node unique identifier robot global communication specifically robot exists vertex diameter height deterministic exploration strategy explore model weaker node indistinguishable bound applies dispersion global communication model finally bound robot deterministic algorithm dispersion graph theorem deterministic algorithm dispersion node anonymous graph robot global communication model robot proof model robot identifier memory identifier survive across complexity dfs traversal graph algorithm node arbitrary graph define initial configuration robot node robot robot ID dfs traversal algorithm  robot node guarantee exactly robot node heavily building robot memory variable assign robot denotes node assign node currently exit node assign ID ID robot associate assign executes phase algorithm pseudo code algorithm robot dfs ID robot newly discover node adopt ID ID robot node robot node mode backtrack mode unsettled robot however robot node mode subsequent phase backtrack modify algorithm robot robot node node mode subsequent hence backtrack algorithm image KB image algorithm algorithm dfs dfs traversal graph robot initial configuration code robot theorem algorithm correctly solves dispersion robot node node arbitrary graph robot proof dispersion achieve robot node robot assign node resembles dfs traversal anonymous numbered graph robot node therefore node robot memory bound dfs traversal traverse twice backward traverse direction phase direction backward phase however guaranteed node dfs traverse hence traversal node node therefore runtime regard memory variable robot distinguish IDs robot dfs algorithm arbitrary graph theorem analyze graph disperse dfs dfs algorithm solves dispersion robot arbitrary node graph memory robot memory robot global communication model algorithm previously algorithm arbitrary graph local communication model mainly discus subsection discus modify approach obtain specifically achieves improve expense additional per robot robot node initial configuration multiple concurrent dfs traversal described initiate  collide dfs node another dfs robot another dfs challenge combine  efficiently algorithm operates phase dfs dfs described algorithm dfs associate component ID cid  collide component  global communication subsume graph construct dfs collide  dfs chosen subsume others component CIDS collapse others unsettled robot dfs chosen leader traverse dfs component subsume  dfs phase unsettled robot dfs component dfs traversal switch dfs phase dfs node interrupt collision algorithm nice winner component chosen collision node define node robot subsume component  node component subsume graph component network graph hence leader successfully traverse node node traverse node winner component node dfs phase unsettled robot node leader dfs traversal component cid subsume multiple possibly multiple collision multiple winner however collection subsume dfs component linear node component cid across lifetime execution robot component subsume leader without interruption dfs phase dfs phase component linearly additive dfs traversal node subsume component leader switch dfs phase bound addition dfs phase winner additive hence dfs traversal maximum robot winner bound overall additive hence bound algorithm algorithm dfs traversal robot interchangeable dfs phase dfs dfs independent dfs variable operating phase additional variable ID robot identifier ID dfs phase robot associate minimum ID colocated robot ID robot identifier ID dfs dfs phase robot associate cid component ID robot identifier denote component associate dfs phase dfs earlier component ID robot identifier denote earlier component ID recent component ID cid update associate dfs phase dfs robot identifier multiple component collide merge component ID subsume component boolean robot responsible various robot distribute subsume component robot identifier robot identifier robot identify origin node leader robot responsible scatter robot subsume component origin node denotes robot boolean robot reset robot initial configuration robot node robot minimum ID colocated robot robot node dfs traversal node node robot robot dfs traversal extend dfs associate dfs associate component ID cid initialize multiple dfs associate CIDS node specifically dfs component cid another component dfs robot node define robot newly robot dfs component cid broadcast message component cid subsume component multiple message broadcast robot graph robot broadcast graph component IDs indicates message graph node outgo multiple incoming component ID corresponds node component minimum cid node incoming node exists otherwise node component graph exist cycle cid node cycle chosen significance cid subsumes CIDS component robot component overwrite cid component leader robot component robot minimum ID  phase phase leader independent dfs traversal component node robot newly component ID cid unsettled robot newly cid leader hence cid overwrite movement unsettled robot leader movement dfs traversal leader node unsettled robot brings node dfs traversal robot collection traversal traversal component traverse subsume component robot component traverse reset dfs traversal completes successfully robot leader leader resume dfs leader reset leader status dfs component subsume another component robot interrupt dfs leader dfs independent dfs independent variable  instance dfs dfs identify detect robot robot switch instance reset dfs dfs phase leader node component node robot component ID robot excludes node already dfs phase robot cid leader become leader confine dfs node leader backtrack node node cid leader backtrack subsume backtrack leader accompany robot simply robot node node belongs adjoin independent component robot later leader component earlier leader component former execution latter issue violate correctness robot component cid adjacent cid correctness complexity lemma robot enters dfs completes within robot within proof theorem dfs within robot completion dfs component subsume subsumes another component robot lemma robot enters dfs completes robot within proof dfs traversal component completes within completes within robot dfs traverse node component collection completes leader node completion dfs robot completion dfs component subsume another component robot lemma dfs cid node dfs component subsume winner correspond node component subsume winner component node dfs leader winner traverse node node proof possibility subsume graph processing node component cycle node cycle minus node component exists node component incoming cid node component possibility definition broadcast indicates node belonging dfs component reachable component therefore implies union node node reachable another furthermore subsume node algorithm lemma algorithm pseudocode dfs leader winner traverse node node lemma theorem algorithm solves dispersion proof robot denote observation transition diagram robot robot robot lemma leader winner dfs component subsume robot node dfs completes within unless serially subsume another winner subsumption dfs robot subsume component along leader leader backtracking dfs interrupt another winner partially dfs belongs component hence dfs per lemma subsume robot robot leader leader leader node node leader return node explore node dfs hence virtually backtracking dfs transition happens within unless serially subsume another winner subsumption within robot lemma robot remain lemma robot transition within denote robot remains permanently bound robot transition subsume cid maximum robot maximum robot maximum robot sum sojourn bound although cycle transition diagram robot exit bound sojourn robot exit bound sojourn remains permanently within finite bound robot permanently dfs traversal associate within theorem robot node dispersion achieve within finite bound model cid ID robot definition transition diagram cid theorem algorithm terminates proof theorem robot permanently within finite bound precisely cid enters  robot transition subsume assign cid possibly cid assign  robot associate cid termination denote cid robot algorithm  therefore shuttle passive separately bound spent dfs associate multiple sojourn associate dfs data structure associate overwritten another dfs component subsume independent dfs traversal data structure maintain dfs dfs phase within possibly across multiple sojourn dfs associate completes robot associate robot associate within dfs hence within node transit maximum subsume another cid transition spent jth transition transition successful dfs traversal component node lemma denote node node subsume dfs component component lemma dfs traversal leader jth transition leader node adjacent dfs across transition hence theorem separately combine dfs dfs phase separately combine dfs dfs phase theorem proof phase theorem cid theorem proof theorem theorem theorem efficient dfs dfs traversal naive dfs traversal traverse node node node component node node node node adjacent component dfs traverse whereas traverse exactly mode backtrack mode disjoint bound phase complexity algorithm graph disperse dfs efficient dfs procedure complexity algorithm obtain internal traverse dfs subsume component traverse robot complexity complexity robot dfs phase node junction node robot leader winner component subsume graph processing serially dfs dfs robot dfs outline junction node perform dfs traversal algorithm variable phase explore marked marked pointer dfs phase ensures backtracking node along pointer dfs phase mode backtrack ensures robot node backtracking along junction node node ensures tid remains traversal interrupt due another subsume graph processing leader traverse pointer dfs phase dfs traversal dfs traversal return node robot junction node active node preserve structure junction node interruption another subsume graph processing dfs traversal junction node encounter dfs traversal recursively cycle recursive broken broadcasting whenever dfs reset variable appropriately proof theorem modify dfs algorithm outline subsume dfs dfs node traverse robot plus traverse junction node node maximum robot various phase various theorem phase overall complexity modify algorithm phase extra variable implement modify phase combine complexity theorem complexity modify algorithm per robot theorem theorem theorem bfs algorithm arbitrary graph theorem analyze graph disperse bfs bfs algorithm solves dispersion robot arbitrary node graph memory robot local communication model algorithm assumes robot node initial configuration adapt algorithm robot multiple node initial configuration algorithm robot node bfs built graph explore identify node exploration neighborhood robot demand robot demand unsettled robot borrow unfortunately demand likely  node reachable independently multiple node robot exceeds  demand arises robot demand topology information available robot distribute leaf node partially fulfill demand node partial fulfillment deficit robot node node via multiple node surplus robot node challenge transfer robot efficiently surplus deficit without topology information procedure return surplus robot  demand node borrowing robot demand multiple partially fulfil demand algorithm cleverly bound iteration procedure transfer robot surplus deficit algorithm simultaneously reduces  demand actual demand exploratory robot borrow perform iteration classify node uniquely node valid node uniquely reachable another node invalid undetermined node uniquely reachable  movement robot meeting demand rebalancing surplus deficit goal complexity extend algorithm algorithm assume global communication model compact directly adapt multi global communication model correctness algorithm global communication replace local communication model without increase asymptotic complexity algorithm initial configuration robot node synchronous algorithm proceeds described algorithm algorithm induces breadth bfs graph algorithm extend leaf node bfs procedure leaf demand achieve neighborhood traversal perform robot demand robot leaf node node coordinate manner arbitrary connectivity procedure iteratively borrowing robot exploration algorithm image KB image algorithm algorithm graph disperse bfs dispersion global model denotes robot node iterative borrowing robot iteration leaf node demand accumulate convergecast manner broadcast detailed algorithm node learns demand sub parallel unsettled robot leaf node completes redistributes available robot sub per accumulate demand rebalancing downward robot leaf node another robot assign leaf node demand node incident node multiple node node robot  node robot  node neighborhood traversal invalidates node node robot actually node participates computation return node designates node valid robot evaluate demand robot  validate invalidate node unsettled robot  node return iteration reassign iteration renew decrease net demand exploratory robot leaf node upward downward movement algorithm guarantee iteration suffice valid status sufficient node node sufficient available robot iteration robot movement reassigns demand valid unique node distributes robot node procedure due bfs growth iteration outer loop graph disperse bfs suffice hence variable robot robot initialize define robot node bfs initialize maximum robot initialize non leaf node demand robot sub reachable via initialize leaf node semantics initialize node refer context sometimes omit subscript ID node reachable via initialize ID robot bfs initialize identify node bfs initialize uniquely robot node outgo along outgo node initialize variable unique robot identifier assumption strictly without broadcast function simulated robot communicate demand subtree unique robot identifier assumption robot assign robot per demand without randomize scheme determination lemma loop algorithm terminates within iteration proof denote  validate invalidate  explore node account validate exactly node invalidate  node loop exit iteration clause loop falsify robot service exploration node uniquely iteration earlier iteration via  hence currently marked validate iteration loop decrease amount within iteration validate clause loop falsify loop exit validate happens validate iteration iteration validate exactly validate remain  iteration clause loop falsify loop exit within iteration additional iteration loop exit loop exit within iteration lemma bfs induced underlie graph algorithm graph disperse bfs algorithm proof induction hypothesis node distance along shortest robot assign robot assign node hypothesis clearly execution algorithm assume hypothesis iteration robot algorithm iteration loop otherwise proof procedure leaf demand correctly identifies node  node node iteration loop node assign robot marked traversal robot distribution robot robot node node correspond outgo robot argue proof lemma within iteration loop validate clause loop falsify loop exit remain robot accommodate node node assign robot algorithm robot bfs validate clause loop falsify loop exit remain robot decrease within iteration additional iteration loop exit validate validate iteration validate iteration robot accommodate node remain algorithm robot strictly validate validate iteration iteration node assign robot robot correctness induced bfs theorem algorithm graph disperse bfs solves dispersion graph memory local communication model proof robot node bfs induced lemma hence dispersion achieve iteration loop leaf demand neighborhood traversal parallel hence iteration loop lemma upward movement downward movement robot code upward downward movement robot outside loop complexity iteration loop lemma bfs induced hence maximum iteration loop graph disperse bfs overall complexity variable synchronize implement counter local communication model suffices simulate global communication pseudocode local communication without increase asymptotic complexity broadcast simulated robot communicate demand sub evaluate leaf node trigger convergecast wherein robot convey subtree variable evaluates broadcast action wherein locally convey synchronize implement mechanism theorem bfs algorithm arbitrary graph theorem adapt algorithm graph disperse bfs algorithm multi analyze graph disperse bfs algorithm bfs algorithm solves dispersion robot arbitrary node graph memory robot global communication model algorithm previously algorithm arbitrary graph local communication model furthermore algorithm bfs approach dispersion algorithm contributes bfs creation distribute concurrently initiate bfs creation node algorithm adapt algorithm multi algorithm bfs initiate parallel identify robot ID bfs node collision detect collide message broadcast collision detection leaf demand collision processing depth collide chosen subsume directly collide correspond subsume message broadcast robot subsume subsume disappear subsume maximal depth subsume maximal depth others depth active subsume processing robot subsume subsume subsume bfs algorithm depth execute completely fully maximum robot collision hence collision processing subsume processing execute bfs subsume hence serial execution procedure bound execution algorithm synchronize statement ensure growth lock barrier synchronization implement global communication model counter collision detect robot node maximum robot node along outgo tuple collision associate direction exploration collision code refer fourth parameter respectively message collide broadcast exploration denote parameter collide parameter exploration unique robot executes collision processing collide message creates undirected collision graph creates maximal independent MIS node maximum robot identify adjacent identify collision active active instance broadcast inactive instance broadcast collapse subsume identify broadcasting subsume subsume  adjacent multiple collapse subsume however longer MIS construction guarantee adjacent depth hence active subsume subsume hence unblock occurs subsumes active outside unblock subsume subsume processing message subsume identify backwards manner via node along leaf node serially broadcast progressively serial broadcast suffice robot node reachable via outgo broadcast identify previous node along alternately identify robot serially identify towards robot along upwards along upwards movement theorem algorithm graph disperse bfs solves dispersion multi graph memory global communication model proof concurrently initiate bfs grows collides another robot collide processing collision graph collapse subsume identify broadcasting subsume message subsume  subsumes active unblock subsume unblock collide hence invocation collision processing subsume processing termination exhaust unsettled robot termination robot distinct node bfs hence dispersion achieve building proof theorem algorithm addition execution collision processing subsume processing iteration correspond serial subsumption depth jth subsumption additional incur additional complexity logic introduce multi algorithm variable counter synchronize increase complexity global communication model issue processing broadcast theorem proof theorem theorem theorem conclude remark dispersion robot node arbitrary graph dfs traversal algorithm performs previously algorithm local communication model factor additional memory algorithm bfs traversal significantly faster previously algorithm local communication model future dispersion arbitrary graph dfs algorithm improve exist bound furthermore achieve bound theorem per robot remove additional factor bfs algorithm improve factor arbitrary graph fourth direction faulty robot fifth direction extend algorithm semi synchronous asynchronous setting credit authorship contribution statement   formal analysis investigation methodology draft review edit    formal analysis investigation validation  sharma conceptualization formal analysis investigation methodology project administration supervision draft