investigates randomization distribute algorithm dynamic network network topology evolve adaptive adversary context randomization algorithm input algorithm evolve topology generate adaptive adversary randomness limited adaptive adversary define notion prophetic adversary evolve topology adversary accurately predicts randomness algorithm beforehand hence randomness useless prophetic adversary randomize algorithm complexity satisfies mild convert algorithm comparable complexity prophetic adversary implies benefit randomness adaptive adversary limited keywords derandomization distribute algorithm adversary dynamic network introduction background understand randomization goal algorithm research researcher obtain randomization centralize algorithm parallel algorithm algorithm static network aim gain deeper insight randomization distribute algorithm dynamic network adaptive adversary dynamic network model communication network topology research topic distribute compute randomization extensively various specific dynamic network prior focus randomization distribute algorithm dynamic network extent randomize algorithm outperform deterministic synchronous dynamic network fix node network topology arbitrary undirected graph adaptive adversary adopt commonly model adaptive adversary decides topology algorithm coin flip outcome adaptive adversary coin flip outcome later communication model node message broadcast model message sender node input arbitrary unique distribute compute model arbitrary function input input vector output function vector node output entry vector constraint output algorithm refers algorithm distribute compute model typically define function compute unique minimum span input graph token dissemination nevertheless model function complexity define node output algorithm complexity denote corresponds complexity scenario scenario consists input vector adaptive adversary generate dynamic network node dynamic diameter dynamic diameter dynamic network intuitively minimum node causally influence another node dynamic network description model practical relevance proceed quickly comment practical relevance research dynamic network research dynamic network stage mostly theoretical theoretical research eventually benefit application mobile hoc network provable performance guarantee topology mobile hoc network naturally due mobility channel provable performance guarantee context topology adversary theoretical dynamic network become applicable randomness dynamic network deterministic algorithm informally correspond scenario scenario scenario deterministic algorithm scenario deterministic algorithm randomize algorithm distribution deterministic algorithm intuitively randomization potentially scenario algorithm dynamic network scenario consists input adaptive adversary input dynamic network randomization reduce complexity exponentially communication complexity CC equality input equality randomize CC deterministic CC dynamic network congestion exponential gap CC equality directly translates exponential gap complexity conjecture adaptive adversary quickly conjecture randomness limited randomness already visible adaptive adversary chooses topology randomness topology deeper randomness potentially algorithm topology algorithm flood token network network dynamic diameter node token later algorithm estimate estimate token constant node adaptive adversary influence manipulate topology fix effectively adaptive adversary commit algorithm randomness later independent remainder algorithm execution midway input randomness remainder algorithm execution potentially midway input hence indirectly adaptive adversary behavior possibility unclear earlier conjecture resolve goal LV algorithm novel earlier conjecture mild algorithm complexity fully specify mild later later conjecture trivial expose randomization adaptive adversary properly isolate randomization input immediately obvious randomness input adaptive adversary define notion prophetic adversary dynamic network prophetic adversary accurately predicts coin flip outcome randomize algorithm decides dynamic network topology enables prophetic adversary dynamic network coin flip outcome hence randomness algorithm dynamic network generate prophetic adversary adaptive adversary generate dynamic network node dynamic diameter vega LV algorithm complexity adaptive adversary exists constant theorem theorem convert another LV algorithm complexity prophetic adversary adversary accurately predicts randomness complexity benefit randomization adaptive adversary reduce complexity factor prof earlier conjecture affirmatively previous mild version theorem actually complexity upper bound polynomial namely exists constant without constraint LV algorithm construct another LV algorithm complexity prophetic adversary constant hence imply randomization adaptive adversary multiplicative factor finally adaptive adversary randomization inherently limited suggests algorithm randomness input derandomize efficiently LV algorithm MC algorithm obtain monte carlo MC algorithm constant error monte carlo MC algorithm exists constant construct another error MC algorithm complexity prophetic adversary version exists constant without constraint version algorithm complexity challenge technique obtain essentially derandomize randomness adaptive adversary randomness amenable typical derandomization pairwise independence conditional expectation network decomposition motivate route prior derandomization effort approach simulate execution adaptive adversary carefully construct namely simulates prophetic adversary node internally invoke message dynamic network generate flood message dynamic network generate node message finally node dynamic network generate deliver message respective invocation node simulation approach flood dynamic network generate performance flood randomness behavior adaptive adversary another prophetic adversary coin flip outcome beforehand performance flood eventually derandomization randomness adaptive adversary however technical challenge overcome approach efficient flood separately complexity simulation grows  topology message node flood diameter correspond dynamic network reduce complexity execution achieve somewhat conflict carefully construct topology probability node technical challenge simulation dynamic diameter dynamic network dynamic network generate naively upper bound dynamic diameter considerably weaker instead algorithm increasingly dynamic diameter challenge specifically incorrect flood explain fail node node something node realize happily generate technical partial execution remains incorrect dynamic network generate node incorrect prevent overcome leverage node regardless finally previous bound complexity specific distribute compute diameter dynamic network beforehand diameter assume diameter beforehand previous bound randomization contradict technique unrelated technique specifically obtain bound reduce various communication complexity distribute compute dynamic network dynamic network construct reduction completely dynamic network construct surprising dynamic network construct facilitate reduction communication complexity dynamic network construct enable efficiently simulate execution flood specific challenge regard dynamic diameter relevant central involve dynamic diameter adversary adaptive adversary strongly adaptive adversary adversary dynamic network notion oblivious adversary randomness topology prophetic adversary strongly adaptive adversary correspond oblivious adversary respectively researcher oblivious adversary weakly adaptive adversary oblivious adversary oblivious adversary oblivious adversary proof already non trivial algorithm randomization likely increase increase suspect conjecture potentially extend oblivious adversary future related randomization extensively various specific dynamic network however prior focus randomization distribute algorithm dynamic network randomization setting discus relevant centralize online algorithm sequence request context adaptive adversary generates request algorithm behavior coin flip request randomize online algorithm adaptive adversary effectively derandomized however goodness online algorithm competitive ratio hence derandomized algorithm afford exponential computational complexity distribute adopt technique input node unbounded complexity input constrain due fundamental difference technique recently series breakthrough derandomizing distribute algorithm static network derandomization local algorithm output correctness output node depends neighborhood instead entire network algorithm complexity notion local algorithm longer define dynamic network node neighborhood comparison considers distribute algorithm necessarily local dynamic network instead static network technique network decomposition conditional expectation mainly rely novel simulation novel adaptive adversary model summarizes notation notation  node dynamic diameter  adaptive adversary define  adaptive adversary generates dynamic network adaptive adversary prophetic adversary randomize algorithm dynamic network qthe randomize algorithm convert  vector  flip outcome coin flip outcome  flip outcome dynamic network generate communication integer inclusive inclusive complexity tcp complexity adaptive adversary node diameter complexity prophetic adversary node diameter err error  error adaptive adversary node arbitrary diameter error prophetic adversary node arbitrary diameter dynamic network adversary synchronous network fix node node proceed lock throughout assume publicly node execution simultaneously node unique node input constraint input input input vector distribute compute node aim compute function input vector output function vector node output entry vector constraint output entry algorithm refers algorithm model topology node assume topology adaptive adversary adaptive adversary infinite sequence function parameter randomize algorithm input vector coin flip outcome inclusive inclusive function output undirected graph node topology network constraint graph infinite sequence graph dynamic network adaptive adversary node slight abuse notation denote dynamic network algorithm input vector coin flip outcome across slight abuse function dynamic network topology define adaptive adversary prophetic adversary function mapping tuple dynamic network function instead sequence function coin flip outcome topology communication model node message broadcast model algorithm node message sender diameter adopt standard notion dynamic diameter diameter dynamic network formally define relation transitive closure diameter define trivially diameter dynamic network node diameter adversary algorithm beforehand diameter adaptive adversary prophetic adversary diameter complexity error complexity execution define function node output algorithm input vector adaptive adversary coin flip outcome error execution define binary function iff output node adaptive adversary node diameter unless otherwise specify algorithm vega LV algorithm monte carlo MC algorithm define randomize algorithm complexity adaptive adversary LV algorithm MC algorithm define MC algorithm error adaptive adversary algorithm prophetic adversary coin flip outcome prophetic adversary beforehand prophetic adversary dynamic network hence LV algorithm define complexity prophetic adversary dynamic network node diameter MC algorithm complexity error prophetic adversary respectively input stability define notion input stability formal definition intuition notion intuitively input stable dynamic network coin flip outcome complexity error communication independent input implies randomness adaptive adversary eventually derandomized output message content probably input dynamic network coin flip outcome complexity error communication token dissemination node token input node output token treat token opaque input stable treat token opaque input stable formal definition input stability algorithm input vector adaptive adversary coin flip outcome define communication denote sequence node execution algorithm input stable dynamic network coin flip outcome input vector LV algorithm MC algorithm aspect definition worth elaborate constant easily replace constant input stable complexity error communication node probability iff distinct message execution depends finally equation adaptive adversary input stability regardless input stable input stable whenever input stable explicitly assumption lemma theorem statement intuition assumption explicitly correspond regardless input stable convention logarithm sometimes convenience algorithm node adaptive adversary simulated mention arbitrary randomize algorithm construct algorithm simulates execution novel adaptive adversary diameter complexity dynamic network complexity error guarantee construct prophetic adversary intuition construction recall adaptive adversary node adaptive adversary adversary decides topology trivial topology topology node clique node clique node chosen node directly simulate topology deliver message node flood message dynamic network flood obviously generate prophetic adversary simulate diameter issue node node switch dynamic diameter dynamic network despite topology static diameter naive avoid node render simulation inefficient explains overcome issue logarithmic obtain intuition consecutive define receives hence superscript sends hence superscript sends receives refers execution similarly define remain convenient separately arbitrary node ensure similarly arbitrary node another chose accord earlier already trickier trickier intuition node continuously receives ensure node clearly hence complicate chosen sends observation node node sends future future coin flip outcome incoming message adaptive adversary incoming message future suppose future coin flip outcome observation adaptive adversary topology actually probability node node currently already incoming message topology hence probability uniquely probability node node probability node promising node logarithmic promising node probability exist sends due technicality promising node actually increase eventually union bound across infinite finally sufficient logarithmic promising node empty probability detail adaptive adversary formally define adaptive adversary generates clique topology algorithm input vector coin flip outcome infer node node promising node node adversary undirected chooses node node already chosen node node node node node node finally rank promising node node sequence sequence contains node criterion necessarily exclusive node chosen multiple detail adaptive adversary facilitate later diameter introduce adaptive adversary diameter generates dynamic network probability probability algorithm coin flip simulation simulate instead easily connection complexity error connection alone simulation algorithm efficiently distribute fashion behaves exactly directly diameter dynamic network generate achieve define concept favorable define favorable sufficient behave algorithm directly favorable efficiently dynamic network generate node twice twice exists node twice denote inclusive inclusive definition favorable algorithm input vector coin flip outcome favorable dynamic network generate twice node sends continuously definition adaptive adversary behaves exactly favorable examine topology generate clique topology diameter easily verify topology generate theorem diameter probability behaves diameter simulation efficient theorem algorithm input vector coin flip outcome dynamic network diameter proof recall denotes inclusive inclusive denote integer inclusive inclusive define function node dynamic network suffices recall topology clique hence trivially favorable clique topology earlier immediately remain favorable trivially favorable favorable definition twice node sends continuously exists twice node directly node sends continuously separately possibility sends within receives sends adaptive adversary hence receives sends hence theorem algorithm input vector define favorable implies contains coin flip outcome proof satisfies definition probability probability union bound across favorable probability recall denotes inclusive inclusive denotes integer inclusive inclusive exists promising node promising node probability non empty node become hence twice hence satisfy definition promising node promising node exists promising node sends twice node satisfy definition remain promising node later node sends easily verify consecutive implies probability node sends continuously hence satisfy definition suffices earlier argument promising node hence hence node promising node non promising node probability hence input stability input stable definition eventually derandomize derandomization behavior input obviously leverage input stable namely dynamic network complexity error communication independent input however immediately dynamic network generate adapts depends randomness dynamic network theorem indeed intuitively proof relies argument topology generate partly depends node node promising node depends probability node probability independent input via induction repeatedly invoke  argument concerned indistinguishable dynamic network beforehand formally theorem complexity error dynamic network generate input theorem input stable algorithm input vector coin flip outcome adaptive adversary furthermore favorable iff favorable proof directly lemma input stable LV algorithm MC algorithm finally lemma implies favorable definition favorable remain proof lemma input stable algorithm input vector coin flip outcome topology node promising node respectively define similarly instead proof induction induction obviously assume define dynamic network topology clique denote node input adaptive adversary coin flip outcome uniquely topology generate combine input stable node depends execution node probability define probability already probability define coin flip execution probability exactly execution facilitate proof coin flip outcome boolean function denote execution coin flip outcome probability execution suffices define dynamic network define earlier topology topology generate behavior exactly hence behavior unaffected topology dynamic network behavior exactly hence argument finally input stable finally easily verify function function hence immediately inductive hypothesis conversion LV algorithm LV algorithm pseudo code intuition overview construction adversary LV algorithm algorithm pseudo code algorithm simulate execution effectively simulate adversary ensure prophetic adversary simulated refers simulated execution algorithm image KB image algorithm LV convert algorithm simulates execution clarity pseudo code explicitly input relayed without loss generality output node numerical assume non negative node output algorithm node suppress output previously already output recall simulated adversary chooses binary via logarithmic sequential  binary node node previous simulated simulated simulated message flood message message node simulated challenge difficulty simulation diameter dynamic network flood naturally standard trick maintains recall flood via binary disseminate message obviously incorrect incorrect behavior binary designate node node flood binary node binary flood node node binary binary return node return regardless intuitively achieve binary return participates binary regardless return binary node return return guarantee formalize lemma discussion node flood node binary node something flag flag flood message whoever flood flag sequentially flood node flag participate flood binary anymore nevertheless correspond remains sync non flag node possibility node flag node flag node flag immediately guarantee simulation binary fortunately node flag simulation specifically disseminate message obvious node flag node message regardless binary binary return node node flag binary corresponds execution node flag trickier challenge non flag node everything happily generate potentially output flag node message whoever receives message flag simulated algorithm allocate exactly dedicate technical mechanism somewhat interestingly non flag node actually constitute valid execution prophetic adversary valid execution proof explicitly construct prophetic adversary dynamic network generate topology leverage topology dynamic network important prophetic adversary instead adaptive adversary generate depends generate prophetic adversary quickly summarize effectively node flag properly simulated execution node flag non flag node properly simulated execution prophetic adversary LV algorithm error generate prophetic adversary generate adaptive adversary adaptive adversary output regardless input coin flip outcome promise zero error adaptive adversary output non flag node safely complexity guarantee longer output increase retry coin finally trick already trick output proof constructive proof instead existential proof worth mention simulated output simulate random coin coin flip outcome adversary diameter output finally simulation efficient maintain budget budget simulate constant factor apart conversion LV algorithm LV algorithm theorem output theorem LV algorithm output algorithm theorem complexity prophetic adversary complexity complexity adaptive adversary furthermore input stable derandomized deterministic algorithm without increase complexity theorem algorithm LV algorithm constant exists constant independent dynamic network node diameter furthermore input stable exist coin flip outcome exists constant furthermore input stable exist coin flip outcome derandomize input stable LV algorithm combine theorem theorem plug deterministic algorithm desire complexity proof theorem proof theorem theorem prof technical lemma theorem theorem respectively technical lemma theorem theorem algorithm algorithm algorithm invokes subroutine SimulateP algorithm SimulateP invokes algorithm algorithm algorithm simulates execution simulated algorithm essentially simulates algorithm adaptive adversary algorithm obtains simulation algorithm binary minimum node algorithm utility subroutine useful technical lemma pseudo code algorithm image KB image algorithm SimulateP subroutine simulates execution simulated coin flip outcome diameter dynamic network without loss generality output numerical assume non negative node flag node node pseudo code node flood something flood originates node exactly participate flood algorithm image KB image algorithm  subroutine return array chosen accord construction subroutine binary entry array diameter dynamic network algorithm image KB image algorithm findmin input parameter integer subroutine binary minimum input node diameter dynamic network algorithm image KB image algorithm ExistValue subroutine node dynamic network invoked subroutine diameter dynamic network lemma prof algorithm findmin lemma crucial later proof lemma lemma dynamic network node diameter node invokes findmin invocation return integer regardless node invoke findmin fix node invoke findmin simultaneously findmin return node return findmin return node proof algorithm later modify modification remain significant hence modification decrease binary finally obvious return non negative integer denote binary significant integer return findmin node algorithm satisfied execution findmin node exist exists derive contradiction definition finally ExistValue return node exist node node invoked ExistValue node invoked ExistValue node invoked ExistValue iteration algorithm node execution findmin algorithm satisfied otherwise node implies contradict ExistValue return node return exists node invoke ExistValue easily verify findmin return node lemma bound incur invocation SimulateP lemma constant exists constant protocol coin flip outcome SimulateP proof directly pseudo code SimulateP algorithm lemma prof SimulateP invoked sufficiently diameter node flag invocation lemma algorithm dynamic network diameter node invoke SimulateP simultaneously node flag flag variable execution SimulateP proof return  algorithm indirectly various invocation findmin diameter lemma findmin return node hence node return  algorithm array node non entry array correspond findmin invocation return node lemma diameter implies node invoked findmin pseudo code algorithm easy verify node node simulated node algorithm satisfied hence diameter easily verify algorithm satisfied hence node flag execution SimulateP lemma prof SimulateP properly simulates execution node flag lemma invocation SimulateP node simultaneously algorithm node flag flag variable invocation invocation properly simulated execution behavior execution exactly SimulateP furthermore execution exactly SimulateP proof induction assume lemma node flag immediately SimulateP array node identical recall entry array return invocation findmin entry array entry node return respective invocation findmin lemma return minimum across node inductive hypothesis pseudo code algorithm easily verify entry array exactly chosen furthermore node flag node message flood hence node simulated properly message incoming message simulation remainder proof easily pseudo code SimulateP algorithm proof theorem theorem restate proof mainly relies intuition previous proof involve sufficient node flag simulated actually simulated theorem LV algorithm output algorithm proof invocation SimulateP algorithm node refer iteration SimulateP algorithm simulated execution unless otherwise mention remainder proof refer algorithm denote node already flag respectively simulated execution denote negation respectively define sends receives simulated execution satisfy define array node immediately simulated execution define reference dynamic network facilitate proof define reference dynamic network topology reference dynamic network construct node iff simulated execution finally necessarily mutually exclusive define implies clique non empty exist node node node flag node dynamic network node receives flag node node node simulated execution obviously clique remain complex node sends simulated execution array node immediately array non entry receives simulated execution sends invokes  invoke algorithm receives sends algorithm invoke findmin lemma implies node findmin return become non entry array node array node immediately contains non entry imply immediately array node exactly array node definition node hence component everything simulated execution reference execution reference execution reference dynamic network input vector coin flip outcome simulated execution node node behavior reference execution simulated execution exactly via induction assume node reference execution behavior reference execution entirely reference execution coin flip outcome apply inductive hypothesis immediately behavior simulated execution behavior reference execution reference execution apply inductive hypothesis simulated execution message execution reference execution simulated execution algorithm node contains message message array node imply array node immediately hence implies hence construct array node immediately flood msg imply hence impossible remain possibility array node immediately message otherwise implies hence message reference execution simulated execution otherwise simulated execution flood message hence belong invoke inductive hypothesis behavior execution execution node behavior affected topology behavior node behavior execution hence message execution message node execution output behavior execution output simulated execution output reference execution furthermore reference execution topology dynamic network LV protocol output reference execution hence simulated execution output proof theorem restate theorem theorem algorithm LV algorithm constant exists constant independent dynamic network node diameter furthermore input stable exist coin flip outcome exists constant furthermore input stable exist coin flip outcome proof exists positive constant constant exactly node generalize trivial input vector define theorem contains coin flip outcome theorem hence markov inequality contains coin flip outcome various theorem proof throughout invocation SimulateP lemma node flag lemma dynamic network diameter SimulateP return output output within hence diameter SimulateP return non negative node recall contains coin flip outcome hence probability SimulateP return non negative hence probability SimulateP return non negative independent SimulateP return non negative output algorithm everything lemma proof input stable fix input vector theorem input vector earlier dynamic network diameter SimulateP return non negative node output algorithm coin flip outcome generates algorithm exist lemma constant algorithm spends execute SimulateP immediately output hence proof already proof proof hence omit avoid redundancy prof lemma proof bound execute SimulateP lemma algorithm exists constant LV algorithm coin flip outcome execution SimulateP spent execution proof lemma suffices completes iteration spent execution execute SimulateP lemma completes iteration conversion MC algorithm MC algorithm focus convert LV algorithm another LV algorithm nice prophetic adversary MC algorithm convert MC algorithm another MC algorithm nice prophetic adversary pseudo code intuition algorithm simulates multiple diameter simulated output coin flip simulation MC algorithm coin flip amplify error excessively hence coin flip outcome simulation happens favorable generate dynamic network diameter output avoid explicitly favorable distribute fashion favorable generate arbitrary output immediately favorable diameter dynamic network actual diameter error otherwise error interestingly proof despite error node flag non flag node nevertheless properly simulated execution prophetic adversary trick unfortunately longer MC algorithm prophetic adversary error guarantee longer simulation explicitly flag node hence MC algorithm extra additive conversion MC algorithm MC algorithm theorem MC algorithm theorem MC algorithm constant algorithm constant exists constant independent dynamic network node diameter furthermore exists constant furthermore input stable exist coin flip outcome dynamic network node theorem capture derandomization derandomize input stable MC algorithm simply plug theorem algorithm error desire complexity proof theorem theorem directly theorem theorem theorem MC algorithm constant algorithm constant exists constant independent dynamic network node diameter furthermore exists constant proof recall hence theorem universal constant exactly node diameter generalize trivial exists positive constant constant output executes algorithm completes execution SimulateP iteration algorithm SimulateP invoked diameter lemma throughout execution SimulateP node flag lemma SimulateP properly simulated execution adversary furthermore node flag node hence ExistValue return return false node node node immediately node output node immediately  return diameter dynamic network  return SimulateP properly simulated execution easily verify favorable hence construction definition theorem adversary diameter hence SimulateP properly simulated execution node algorithm satisfied execution SimulateP node SimulateP return non negative output output executes algorithm completes execution SimulateP execution SimulateP algorithm execution SimulateP lemma constant execution SimulateP algorithm universal constant finally theorem MC algorithm constant algorithm constant furthermore input stable exist coin flip outcome dynamic network node proof theorem node output within fix within node invoke SimulateP algorithm finite node output node invoked SimulateP definition theorem recall hence define coin flip outcome theorem contains coin flip outcome immediately topology generate chosen exactly topology generate chosen adversary favorable generate output within otherwise generate output within output input vector node iteration algorithm node SimulateP invoked generate output flag output neither ExistValue return return node diameter dynamic network topology graph node invoked ExistValue iteration otherwise invocation ExistValue return node return implies node SimulateP return node flag respective execution SimulateP lemma SimulateP properly simulated execution exactly algorithm earlier argument favorable exactly algorithm algorithm satisfied node verify regardless relation  return node node algorithm hence output earlier argument generates output SimulateP properly simulated execution SimulateP return non negative output hence generate output algorithm altogether input vector node generate output neither algorithm output contains coin flip outcome input stable theorem input stable fix input vector coin flip outcome proof already dynamic network node input vector input stable theorem immediately hence proof dynamic network node conclusion future considers distribute algorithm dynamic network topology adaptive adversary within context randomness limited adaptive adversary specifically randomize algorithm complexity satisfies mild convert algorithm comparable complexity prophetic adversary prophetic adversary accurately predict randomness algorithm beforehand implies benefit randomness adaptive adversary limited research currently model assumes node arbitrary obstacle node arbitrary potentially input algorithm randomness input derandomize nevertheless impose restriction overcome MC algorithm additive LV algorithm investigate strengthen additive overhead existence flag node accumulation error probability simulation MC algorithm longer hence potentially avoid research future