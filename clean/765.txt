fuzz enjoy discover security critical bug software recently researcher devote significant effort devise fuzzing technique strategy algorithm primarily evaluate experimentally important experimental setup trustworthy survey recent research literature assess experimental evaluation fuzzing evaluation perform extensive experimental evaluation exist fuzzer exist experimental evaluation indeed translate actual mislead assessment conclude guideline improve experimental evaluation fuzz algorithm report robust CCS CONCEPTS security privacy software application security keywords fuzzing evaluation security acm reference format george klee andrew   cooper  wei michael  evaluate fuzz acm  conference computer communication security CCS october toronto canada acm york NY usa http doi org introduction fuzz tester fuzzer iteratively randomly generates input target program despite naive sophisticated involve smt solver symbolic execution static analysis fuzzers surprisingly effective popular fuzzer afl bug popular program afl symbolic executor angr afl bug corpus fuzzers popular topic research fuzzers inspiration drawn mathematical analysis fuzzers primarily evaluate experimentally researcher develops fuzzer algorithm empirically demonstrate advantage status quo compelling baseline fuzzer sample target program benchmark suite performance metric benchmark suite ideally possibly exploitable bug identify crash input meaningful configuration parameter file file fuzzing timeout duration fuzzing evaluation account fundamentally random fuzzing fuzzing target program due randomness evaluation sufficiently trial sample overall distribution fuzzer performance statistical improvement due failure perform fail recommend mislead incorrect conclusion conclusion waste practitioner profit alternative configuration waste researcher overly assumption arbitrary tune evaluation parameter examine recently publish fuzz  conference proceeding quality venue experimental evaluation fuzz evaluation properly news theory cpu news aflfast afl baseline variety performance chose aflfast recent advance code publicly available confident ability rerun described author evaluation expand parameter experimenter choice driven importance afl literature examine afl baseline evaluation target binutils program objdump cxxfilt image processing program  ffmpeg prior fuzzing evaluation deviate recipe easily incorrect conclusion session 0D VulnDet channel CCS october toronto canada fuzzing performance configuration substantially nearly examine afl crash input aflfast around median crash afl closer aflfast average via statistical apparent difference performance statistically significant fuzzing performance timeouts mislead empty afl crash  aflfast nearly afl aflfast non empty afl outperform aflfast statistical significance trend reverse similarly substantial performance variation empty aflfast crash non empty statistically indistinguishable afl treat choice casually apparently assume equally without performance examine code coverage ass fuzzing effectiveness code intuitively correlate bug worth correlation weak directly bug prefer instead crash input apply heuristic procedure attempt duplicate input trigger bug retain unique input bug popular heuristic afl coverage profile fuzzy stack hash unfortunately duplication heuristic ineffective additional compute portion truth apply patch cxxfilt version fuzzed grouped input patch gracefully exit confirm patch conceptual  crash input deem unique coverage profile address distinct patch dramatic  bug ultimately aflfast unique crash input afl slightly likelihood unique bug stack hash bug instead bug mapping afl coverage unique crash trial stack hash average stack hash false negative roughly hash crash bug crash another bug distinct bug crash crash non unique hash meaning evidence distinct bug duplication substantial suggests reliance heuristic evaluate performance  approach truth directly assess fuzzers bug synthetic suite CGC lava examine truth alongside input duplicate stack hash coverage profile overall fuzzing performance target program important evaluate diverse representative benchmark suite aflfast perform generally afl binutils program basically originally publish empty statistically significant advantage image processing program program evaluation reader drawn nuanced conclusion advantage diverse benchmark suite CGC lava methodology program  program overlap choice median program evaluation commonly program binutils overlap version individual evaluation mislead conclusion internally across outline suggests meaningful scientific progress fuzzing algorithmic improvement solid evidence evaluation lack important aspect regard propose guideline future evaluation adhere researcher perform multiple trial statistical evaluate longer timeouts evaluate bug performance truth heuristic unique crash finally argue establishment adoption fuzzing benchmark sketch target problematic upon benchmark address identify worth establishment duplication heuristic topic recent algorithmic related background dynamic analysis described fuzzing unify feature fuzzers concrete input otherwise fuzzers instantiate choice parameter setting outline fuzzers advance recently publish core fuzzing evaluation session 0D VulnDet channel CCS october toronto canada core fuzzing algorithm corpus  queue observation  observation queue candidate queue observation mutate mutate candidate observation observation eval mutate  observation observation queue queue mutate observation observation observation parameterized function  initialize corpus  fuzzing progress goal timeout candidate queue mutation mutate observation program candidate eval evaluate program observation  observation evaluation mutate input preserve fuzzing nutshell fuzzing procedure fuzzers procedure outline corpus input target program fuzzer repeatedly mutates input evaluates program behavior fuzzer mutate input future eventually fuzzer due goal sort bug timeout fuzzers observation program fuzzer observation program crashed fuzzing observation consist intermediate information execution execution identifier execute directly sequence fuzzers observation modification exploit semantics application source binary code possibly involve sophisticated gathering additional observation overhead fuzzers choice hop overhead bug effectiveness usually ultimate goal fuzzer generate input program crash fuzzer configuration  queue crash loop fuzzer configuration seek crash crash default libfuzzer discovers crash afl attempt discover crash observation desirable longer presence algorithmic complexity vulnerability output fuzzer concrete input configuration outside fuzzer reproduce observation allows software developer confirm reproduce debug issue recent advance fuzzing effectiveness fuzz active research perform literature publish propose improvement various core fuzzing algorithm examine publish impact fuzzing publish security venue chase citation sanity keyword title abstract publish finally judged relevance target domain propose advance filter chronological briefly summarize topic organize fuzzing procedure prominently aim improve ultimately evaluate claimed improvement    propose improve initial selection analysis program bootstrap information corpus assist   allows generation grammar specify structure valid input difuze performs static analysis identify structure input device driver prior fuzzing mutate  symbolic executor mutate mutate aware taint observation program behavior specifically mutate input program fuzzers pre define data mutation strategy flip rand replacement  fragment program parse manipulate input  dynamic slice SDF mutation sometimes grammar mutation  mutator exploit knowledge java construct assist fuzzing android service eval driller mayhem conditional guard program satisfy via brute occasionally invoke symbolic executor eval phase SF symbolic executor eval focus increase eval operating primitive execution fuzz transform program remove input prevent code session 0D VulnDet channel CCS october toronto canada  performs finer grain analysis detect error fuzzing  focus crash observation program behavior longer differential behavior steelix  program finer grain information progress towards satisfy expose observation  vuzzer static analysis assign reward program likely hood estimation vulnerability deeper cfg input candidate program explores algorithm candidate overview experimental setup assess exist research experimentally evaluate fuzz algorithm mention introduction evaluate fuzz algorithm baseline algorithm representative target program performance ideally bug algorithm parameter file chosen algorithm multiple statistically performance research fuzz substantially introduce indicates benchmark program evaluation baseline fuzzer comparison trial per configuration variance performance crash input mapped bug code coverage judge performance file chosen timeout per trial fuzzer explanation caption blank evaluation mention item aflfast aflfast evaluation program benchmark afl baseline fuzzer without reporting variance report crash conduct manual triage obtain truth code coverage empty file input timeouts evaluation obtain evidence claimed technical advance ass evaluation theoretically empirically demonstrate choice mislead incorrect conclusion algorithm fitness choice evaluation approach naive approach overall exist evaluation lack important conclude description setup fuzzers afl standard configuration parameter baseline aflfast advanced algorithm aflfast version july clone github afl version recent version  aflfast incorporate afl version issue goal reproduce aflfast representative advanced fuzzer purpose validity approach empirically evaluate fuzzers afl baseline speaks directly evaluation chose afl source easy easily comparable occasionally configuration  afl coverage option effectively afl fuzzer benchmark program benchmark program objdump cxxfilt binutils  ffmpeg program obtain recent evaluation fuzzing technique ffmpeg  binutils aflfast evaluation program  bug  vuzzer benchmark suite derive benchmark suite simply program demonstrate target conclusion performance unique crash fuzzer induce uniqueness afl notion coverage crash input coverage profile uncommon discus detail platform configuration conduct machine machine II equip twelve  intel  CPUs logical core 8GB ram ubuntu machine 4GHz CPUs 0GB ram enterprise linux server account variation benchmark program machine fuzzer combination script advantage CPUs trial parallel  spawn per cpu confine cpu affinity trial generally trial per configuration variety file empty file  version ffmpeg  assess likewise binutils session 0D VulnDet channel CCS october toronto canada benchmark baseline trial variance crash coverage timeout mayhem  0D     SDF 5D driller  aflfast  aflgo vuzzer  steelix   4D 2D difuze  7D   0D  IMF  SF   fuzz  summary fuzzing evaluation blank evaluation mention item relevant mention insufficient detail benchmark program CGC data lava benchmark program manually inject bug google fuzzer suite baseline afl  libfuzzer   baseline trial trial variance confidence interval crash stack hash related crash triage triage coverage profile distinguish crash crash triaged accord truth manual effort partially obtain truth triaging coverage instruction coverage coverage coverage coverage information randomly sample manually construct automatically generate non empty corpus valid assumes existence valid corpus obtain empty program program timeout report randomly file manually generate file statistically  fuzzing algorithm fundamentally employ randomness perform notably perform mutation sometimes sufficient simply fuzzer baseline performance trial difference performance judged surprisingly fuzzing mention trial perform context clue interpretation trial justification randomness random choice converge fuzzer crash input fuzzing performance dramatically graph cumulative crash axis axis afl aflfast session 0D VulnDet channel CCS october toronto canada objdump cxxfilt ffmpeg  crash empty solid median dash confidence interval max min empty plot solid median dash maximum minimum upper bound confidence interval median outermost dash max min inner CIs highly performance plot conclusion suppose ffmpeg afl maximum crash aflfast minimum crash aflfast advantage afl aflfast maximum afl minimum conclude perform multiple trial reporting average variance problematic multiple trial characterize performance variance blank variance instead average performance assume arithmetic conclusion  report median mention average calculate variance difference average statistically significant statistical indicates likelihood difference performance due arcuri  randomize algorithm fuzzers mann whitney stochastic rank  outcome trial data sample likely outcome mann whitney non parametric assumption distribution randomize algorithm performance contrast standard assumes normal distribution return simply average yield conclusion  aflfast median crash afl difference perform mann whitney yield difference statistically significant evidence thirty trial ffmpeg aflfast median crash afl difference crash afl likewise mann whitney deems difference insignificant advantage aflfast afl extremely unlikely variance closest confidence interval along average statistically performance approach baseline reader visually judge difference helpful conclusive easy perform statistical discussion recommendation statistical  debate session 0D VulnDet channel CCS october toronto canada empty sample sample sample ffmpeg solid median dash confidence interval statistical afl aflfast afl  respectively choice viable alternative permutation bootstrap treat data overall population systematically permutation sample data ranking confidence interval appropriate mann whitney unclear arcuri  median performance fuzzer fuzzer paramount related concern likely implicitly difference median statistical likelihood difference difference arcuri  vargha delaney Aˆ statistic employ mann whitney calculation bootstrap employ selection recall prior iteratively input fuzzer initial corpus input per recent focus improve fuzzing loop non empty corpus entry popular valid program execute intend logic quickly terminate parse formedness detail entry valid corpus detail entry non empty detail content opt empty entry empty easy baseline significant variable input configuration manually algorithmically construct randomly sample detail initial corpus unimportant algorithmic improvement reflect surprising interaction format algorithm choice nuance indeed ffmpeg empty sample exist video file sample  video sample video session 0D VulnDet channel CCS october toronto canada empty ffmpeg  ffmpeg afl ffmpeg aflfast afl aflfast objdump afl objdump aflfast cxxfilt afl cxxfilt aflfast crash median crash timeout drawn ffmpeg sample website sample avi MP mpeg mpeg sub directory file filter MiB afl maximum sample par video file sample sample generate video gif file random video frame  ffmpeg audio  stitch ffmpeg MP  avi file fps generate MP file objdump cxxfilt empty objdump generate compile program cxxfilt generate file random chosen uppercase lowercase digit underscore standard alphabet mangle choice ffmpeg trend afl aflfast empty yield crash input valid nonempty  trend reverse non empty performance varies performance valid construct former around crash afl aflfast latter zoom data indicates target program fuzzer empty indicates median crash empty indicates median crash valid  statistical difference aflfast  performance afl due afl aflfast empty crash input  none however  significantly crash afl aflfast remainder reproduces aflfast evaluation empty  http sample ffmpeg org valid conclusion aflfast aflfast superior afl crash ability empty statistical significance however aflfast longer outperforms afl afl aflfast generally crash sum fuzzer performance program valid induce behavior assume evaluation fuzzer superior fuzzer prudent variety evaluate algorithm specific available actual empty despite  conventional wisdom choice empty file input file processing program fuzzer empty across variety program empty program significant variable file vast configuration timeouts another important fuzzer target prior fuzzers timeouts generally choice recent lava benchmark suite chose timeout possibly choice lava fuzzers report timeout without justification implication beyond threshold distinction algorithm however relative performance algorithm terminate quickly yield incomplete aflfast evaluation afl bug objdump afl longer afl aflfast crash reasonable clip afl  another median crash afl crash bug reside program fuzzing detects bug eventually explore afl aflfast sample none afl bug median crash aflfast mann whitney difference significant trend reverse afl crash aflfast difference significant reasonable timeout shorter timeouts convenient practical perspective outlier timeout evaluation focus generation rate instead bug ability session 0D VulnDet channel CCS october toronto canada sample aflfast superior afl afl superior aflfast overall hardware resource shorter useful scenario overnight normal development longer illuminate performance trend algorithm longer accelerate bug ability generate  performance afl become evaluation plot depict performance timeout performance shorter easily extract longer discussion addition performance crash report curve auc  performance fuzzer crash per auc crash whereas fuzzer crash auc crash intuitively reflect crash earlier prefer burst prefer steady crash finder peak crash  crash auc substitute performance plot performance  focus fuzzer performance unique crash input induce unique crash define shortly crash symptom potentially serious bug fuzzer accord crash input bug crash input input trigger bug buffer overrun likely crash input data consists data exceeds buffer simply counting crash input performance mislead fuzzer crash fuzzer actual bug employ strategy duplicate triage crash unique bug popular automate heuristic afl notion coverage profile stack hash marked crash triage marked vuzzer additionally exploitable ass exploitability crash bug crash likelihood attack discount user fuzzer dangerous bug advantageous duplication strategy corresponds unfortunately experimentally duplication heuristic actually cluster crash input accord truth performance marked virtue choice benchmark program crash input perfectly marked effort triage crash identify  typically triage neither truth overall numeric performance subsection discus performance detail heuristic actual truth fuzzer performance mislead conclusion lieu bug directly nearly examine fuzzer ability execute significant target program measurement potentially generalizable bug substitute discus truth bug ultimate fuzzer distinct bug fuzzer generally bug baseline effective distinct bug subjective easy developer ultimately crash input debug fix target program crash longer occurs fix probably specific input generalize  consist buffer overrun input target crash input longer crash  apply associate bug address fix moreover input induce crash longer  apply identify bug assume fix suitably minimal target program bug access truth program version bug fix synthetic program program synthetically introduce bug former category aware prior session 0D VulnDet channel CCS october toronto canada int int  char   char  crash crash return coverage deduplication  program correspond fix completely triage crash accord truth latter category synthetic suite truth popular suite CGC cyber challenge lava discus bug inject program trigger bug  error message program crash immediately apparent bug trigger fuzzer generate input bug trigger input discard program manually inject vulnerability afl coverage profile truth available researcher commonly employ heuristic duplicate crash input approach afl marked input code coverage profile equivalent afl crash unique coverage crash contains previous crash otherwise previously crash classify duplicate input coverage profile plausible bug coverage representation easy bug trigger coverage profile suppose function crash program  unconditionally bug program input treat distinct assess truth examine crash input fuzzing generate cxxfilt afl aflfast development activity code version fuzzed release bug fuzzing patch git identify commits source file compile cxxfilt built version cxxfilt commits version cxxfilt crash input afl utility afl cmin offline prune corpus input minimal corpus specifically afl cmin algorithm input input trace afl algorithm retains input input trace prior  afl cmin input afl rely algorithm version cxxfilt version crashed input manifestation bug fix program version ensure triaging trustworthy additional ensure non crash behavior incidental memory error bug category uncovered fuzzing crash trigger bound array crash program unmapped memory access commit aspect program eliminates crash without actually fix bug address issue compile cxxfilt version address sanitizer undefined behavior sanitizer   dynamic various error memory error presence   error report crash ensure bug fix commit corresponds  manually inspect commit convert crash input non crash judging multiple distinct bug fix principle developed previously manually split commit per fix commit import batch  fork cxxfilt trunk individual  commits batch split ultimately distinct bug fix commits methodology distinct bug fix commits input crash version cxxfilt organizes graph fuzzing trial afl aflfast magnitude axis unique accord coverage profile crash induce input input grouped bug fix discover truth analysis bug discover compartment unique bug weak correlation bug crash input correlation imply upward trend crash aflfast generally unique crash input afl bug per slightly mann whitney difference crash statistically significant difference bug discussion despite ensure triage truth inflate reduce actual bug former   guaranteed memory safety violation attribute incidental  explain commit fix crash associate commit bug http github com gcc mirror gcc  trial data individually afl coverage metric apply trial session 0D VulnDet channel CCS october toronto canada crash afl aflfast crash unique bug per cxxfilt independent afl aflfast height crash input discover cluster input input unique bug fail differentiate multiple  commit mistake observer judgment differs magnitude difference unique crash unique crash massively  bug truth performance variation within configuration due randomness stark counting bug unique crash input advice multiple trial important performance difference fuzzers trial discern performance difference due stark crash another crash correspond bug performance variation bug crash variation sufficient concern advice longer timeouts variety empty unless experimental truth data shed situation stack hash another heuristic duplication technique stack hash technique marked suppose buffer overrun bug function inside program library routine assume overrun induces  immediately crash program generally crash additional program context overrun buffer  function stack program counter crash bug ignore spurious variation focus return address normalize source code location stack closest relevant associate recent stack frame trigger bug chosen frame hash comparison prior bug stack hash stack hash relevant context unique stack crash easy situation stack hash   bug code bug format function corrupts ultimately output function crash  function format function separately function suppose fuzz program generate input induce crash frame stack hash correctly recognize input correspond bug format output stack however treat input distinct crash stack contains contains suppose program another buggy session 0D VulnDet channel CCS october toronto canada void format void format void format char bug corrupt void char output void output char failure manifest stack hash  bug stack hash cxxfilt specifies label assign progressive version cxxfilt specifies distinct stack hash input assign truth label stack hash input grouped label fourth stack hash label distinct input label bug hash false input unfixed unknown function corrupts prior passing improperly conflate crash due bug due buggy format function stack assess truth effectiveness stack hash determination label bug identify prior implementation stack hash address sanitizer stack trace crash input cxxfilt chooses entry stack hash analysis discover stack hash effective  input coverage profile  bug discover comparison stack hash label identify label input input distinct stack hash stack hash metric knowledge distribution bug cxxfilt discover magnitude bug actually stack hash label hash input sum across hash correspond bug inflation coverage profile unique input bug inflation crash input associate fix commit inspect respective code fix crash input unknown   detect undefined behavior code data layout compilation non determinism suppress crash behavior compiler bug possibility investigate stack hash  bug nearly afl coverage profile serious hash unique label input associate remain crash input input wrongly discard stack hash duplication indeed label unique hash falsely overall hash non unique stack hash deduplication discard bug discussion another trend evident precisely bug trigger input others bug correspond input bug correspond input prior fuzzing bug distribution combine input trial trial individually per bug bug additional bug important trend cxxfilt target program truth analysis flavor assume tentative conclusion trend reinforce bug heuristic presence rare input difference crash input apparently insignificant difference unique bug significant fuzzers benefit algorithmic trick employ solver randomly reboot discard initial simulate trial challenge fuzzer retain across reboots retain important knowledge avoid stuck local minimum  crash input across trial instead stack hash per basis somewhat overall trend remain compute sum distinct hash bound distinct hash overall bound session 0D VulnDet channel CCS october toronto canada related recent van experimentally ass efficacy stack hash coverage profile truth define truth conceptual bug code patch coverage profile stack hash approximate truth tend  bug patch target program complementary however crash input generate via mutation initial crash input via normal fuzzing characterize impact deduplication strategy typical fuzzing stack hash bug identify symbolic execution comparison deduplication technique comprehensively truth code coverage fuzzers bug program fuzzer bug unsuccessful user logical evaluate fuzzer bug fuzzer however fuzzer bug fuzzer efficacy algorithm bug fuzzer merely gotten  instead improvement code coverage fuzzer baseline greybox fuzzers already aim optimize coverage  function surely improve code coverage improvement fuzzing crash program program execute prior suite effectiveness coverage correlate bug effectiveness nearly code coverage  evaluate performance code coverage however fundamental maximize code coverage directly bug efficacy coverage fuzzers implies correlation algorithm eschew coverage focus bug aflgo aim increase coverage globally aim focus possibly error prone program assume coverage bug correlate correlation weak substantial improvement coverage yield merely negligible improvement bug effectiveness code coverage secondary truth accord bug discover primary target  establish fuzzing algorithm generally another ability bug target program drawn population generality usually fuzzer benchmark suite purport population performance suite translate performance population benchmark suite recent publish variety benchmark program broadly category program artificial program bug former google fuzzer suite hoc selection program latter comprises CGC lava  program synthetically inject bug benchmark drew category vuzzer steelix discus exist benchmark choice entirely satisfy important develop fuzzing benchmark program accord nearly program evaluation google fuzzer suite program library couple harness focus fuzzing bug others evaluate program program fuzzing target target program without justification representativeness median program per sometimes justified IMF specifically fuzz OS kernel evaluation program MacOS kernel fuzzers aim apply population file processing program positive outlier  program explain methodology evidence threat insufficiently target experimental report  objdump cxxfilt program  crash focus attention program suggests aflfast uniformly superior afl crash ability however ffmpeg  program fuzzing evaluation mann whitney statistical difference afl aflfast program assessment weakens aflfast improvement afl program date target version informal comparison across overlap target binutils program evaluation multiple ffmpeg  however none series plot difference plot plot axis trial trial plot median confidence interval compute plot version afl aflfast session 0D VulnDet channel CCS october toronto canada version version binutils aflfast aflgo   google fuzzer suite address issue comprises program bug define independently fuzzer regression suite necessarily representative fuzzing harness mostly intend fuzzers target bug within suite artificial program bug program  likelihood bug depends factor program active development bug relatively stable respond bug report program representative program anti bug likely inject artificially popular suite CGC lava CGC suite comprises buggy program darpa cyber challenge suite specifically evaluate bug fuzz tester suite program perform realistic function exploitable bug lava automate vulnerability addition inject bug program crash input  bug along feasible lava author lava suite comprises bug inject coreutils program  uniq unlike CGC program inject bug lava program dozen suite fuzzer trigger bug  useful understand bug CGC lava gain popularity benchmark choice evaluate fuzzers introduction within CGC lava evaluate fuzzers respectively vuzzer steelix fuzz benchmark evaluation however sometimes CGC benchmark subset driller vuzzer steelix evaluate program respectively CGC program simulate reality simulation imperfect perform CGC program fail generalize actual program average CGC  challenge program code program telnet style text protocol likewise lava inject bug sufficiently resemble incentive circumstance software development fail translate synthetic benchmark specifically insecure lava author significant chunk future lava involves generate corpus bug program indeed recent relatively technique effectively lava bug aware independently ass extent suite fuzzing benchmark suite assessment solid independently define benchmark suite  spec fuzz task presume community effort effort suite selection program indicator bug bug synthetically introduce lava CGC previously discover version truth assessment knowledge truth avoids  input correspond bug allows assess false positive false negative lean program bug simply ecological validity assure suite program program overall target population program CGC comprises program google fuzzer suite around chosen closer finally methodology defense overfitting static benchmark suite employ heuristic strategy fundamental advantage apply disproportionately benchmark program fix standard suite  relatively frequently latter fuzzing competition series competition effort direction  recur bug competition target program fuzzing researcher advance incentivized develop reusable technique competition suite static benchmark suite robust challenge regularly develop target ecologically valid  automate bug insertion technique overfit issue lava CONCLUSIONS future fuzz promising technology uncover important bug security vulnerability promise prompt researcher develop fuzz algorithm evidence algorithm primarily experimental important experimental methodology researcher algorithm target program http spec org benchmark html http  org http  mit edu session 0D VulnDet channel CCS october toronto canada meaningful configuration parameter input duration timeout performance baseline algorithm performance define distinct bug inherent randomness fuzzing account performance judged via statistical survey recent analyze experimental methodology completely methodology outline moreover aflfast afl illustrate methodology mislead weaken conclusion fail perform multiple fail account performance statistical performance substantially fuzzer performance counting distinct bug instead counting unique crash heuristic afl coverage stack hash heuristic dramatically bug indeed suppress bug wrongly crash input apparent improvement modest  consideration performance assessment timeouts without justification longer timeouts algorithm performance carefully impact choice algorithmic improvement performance substantially non empty input performance empty varied widely choice target program synthetic suite CGC  advantage define independently algorithm bug fuzzing reliably crash duplication strategy picked disjoint program across aflfast performs target originally assess perform afl target ultimately roughly positive aflfast expand scope evaluation longer timeouts target program evidence aflfast superiority version weaken heuristic crash deduplication strategy questionable weakens confidence improvement prior suffer evaluation conclusion fuzzing community rigorous reliable conclusion specifically recommend fuzz evaluation multiple trial statistical distinguish distribution benchmark target program bug lava CGC program bug fix measurement performance bug heuristic afl coverage profile stack hash coverage secondary consideration various document choice empty timeouts justification performance plot important future assess benchmark suite described related worthwhile crash duplication realistic fuzzing potentially develop assist triage assess fuzzing truth recent promise finally explore enhancement fuzzing algorithm inspire observation fuzzing bug cxxfilt algorithm reboots acknowledgment     aflfast anonymous reviewer     luis  jeff foster  sweet participant    payer helpful comment suggestion draft research national foundation grant CNS CNS darpa contract FA FA google research award