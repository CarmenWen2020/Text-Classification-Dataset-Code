platform binary code similarity detection aim detect binary function platform security application plagiarism detection malware detection vulnerability etc exist approach rely approximate  algorithm inevitably sometimes inaccurate adapt task address issue propose novel neural network approach compute embed numeric vector graph binary function similarity detection efficiently distance embeddings function implement prototype gemini extensive evaluation gemini outperforms approach margin respect similarity detection accuracy gemini prior embed generation magnitude reduce training demonstrate gemini identify significantly vulnerable firmware image genius research showcase successful application computer security CCS CONCEPTS security privacy vulnerability scanner keywords binary code similarity detection neural network introduction binary function detect binary code similarity detection security application plagiarism detection malware detection vulnerability etc security application vulnerability firmware image iot device particularly critical crucial bug source code across device diverse hardware architecture software platform vendor issue firmware release multiple vulnerability recently release firmware update vulnerability thirdparty library security practitioner increase quickly detect function directly binary across multiple platform mips recently researcher tackle platform binary code similarity detection effort propose extract directly binary code various robust platform independent feature node graph function conduct binary code similarity detection graph algorithm function graph representation genius learns feature representation graph encodes embeds graph embeddings dimensional numerical vector compute embed binary function however relies graph algorithm compute similarity target function codebook binary function unfortunately graph approach inevitable drawback similarity function approximate fix graph algorithm adapt application binary code instruction application plagiarism detection majority code identical application vulnerability dissimilar instruction difference fix important vulnerability manually similarity function cannot scenario efficiency similarity detection approach graph bound efficiency graph algorithm bipartite graph however graph algorithm super linear session investigate attack CCS october november dallas TX usa runtime graph approach inevitably inefficient recent apply application domain binary analysis approach advantage neural network binary analysis task generate embed binary function neural network parameter relies domain knowledge graph previous approach neural network approach adaptive neural network data application scenario task neural network model compute efficiently runtime linear input network inspire advantage propose neural network approach generate embeddings binary function similarity detection assume binary function graph attribute attach node graph embed network convert graph embed previously graph embed network propose classification regression task domain classification however similarity detection classification approach apply task directly instead propose approach compute graph embed similarity detection combine graph embed network siamese network naturally capture objective graph embeddings function vice versa entire network model similarity detection training dataset creation default policy pre task independent graph embed network approach construct training dataset binary function compile source code platform compiler optimization evaluation demonstrates task independent model effective generalize unseen function stateof graph approach advantage neural network approach pre model retrain quickly presence additional supervision adapt application scenario evaluation additional supervision retrain model efficiently adapt novel task previous approach genius retrain model training neural network efficient retrain phase within efficiency enables practical usage retrain improve quality similarity detection implement prototype gemini evaluation demonstrate gemini outperforms approach genius margin respect accuracy efficiency accuracy apply gemini task genius evaluate task independent task specific model former auc curve pre task independent model whereas auc genius latter dataset task specific model identify average vulnerable firmware image genius previous approach flexibility incorporate additional task specific supervision efficiently retrain unique advantage approach previous efficiency gemini efficient genius embed generation training embed generation gemini faster genius approach training training effective gemini model training genius broader scope showcase successful apply important emerge computer security substantially improves summarize contribution propose neural network approach generate embeddings binary function propose novel approach embed network siamese network pre model generate embed similarity detection propose retrain approach pre model additional supervision adapt specific task implement prototype gemini evaluation demonstrates construct openssl gemini achieve auc genius graph approach evaluation gemini compute embed magnitude faster prior genius conduct firmware image gemini significantly vulnerable firmware image genius binary code similarity detection platform binary code explain similarity detection function explain exist approach demonstration efficient embed function similarity function approach neural network embed function benefit approach motivation platform binary code platform binary code similarity detection binary function contains heartbleed vulnerability examine corpus binary function extract firmware image various iot device quickly accurately identify candidate semantically equivalent function binary function query function corpus binary function target corpus session investigate attack CCS october november dallas TX usa technique apply security application bug firmware image plagiarism detection binary code etc core function detect function effective approach achieve goal binary access source code binary function effective similarity detection code technique binary code directly platform query function function target corpus hardware architecture software platform effective binary technique tolerate syntactic variation introduce platform capture intrinsic characteristic binary function precision effective binary code similarity detector assign  function irrelevant efficiency similarity function compute efficiently vulnerability application target corpus adaptive domain expert dissimilar similarity function adapt quickly domainspecific application exist technique series effort binary code binary code platform recently researcher tackle platform effort propose extract various feature binary code directly robust persist across architecture compiler optimization option pairwise graph approach extract input output feature label graph performs graph unfortunately expensive calculation input output graph expensive improve efficiency  propose extract lightweight syntax feature arithmetic instruction instruction instead feature extraction apply pre filter  feature graph improve efficiency however accord pre filter approach reliable significant degradation accuracy fundamentally approach rely pairwise graph detect similarity inevitably inefficient graph embed achieve scalability accuracy simultaneously  feature representation graph encode embed graph representation embed numeric feature vector similarity function compute easy compute distance function raw feature extraction embed network firmware database vulnerability database firmware image vulnerability ACFG embeddings image embeddings vulnerability vulnerability suspicious embed image binary suspicious vulnerability threshold embed LSH DB platform binary code workflow attribute attribute constant numeric constant transfer instruction instruction arithmetic instruction inter attribute offspring betweenness attribute vector efficient feature vector indexed locality sensitive hash LSH database query execute apply approach vulnerability propose genius graph embed workflow illustrate binary function firmware image vulnerability genius extract raw feature attribute graph ACFG ACFG vertex label attribute attribute inter attribute genius illustrates ACFG function openssl heartbleed vulnerability ACFG convert embed hash locality sensitive hash LSH consequently identify binary function query function correspond embed query function nearby embeddings target corpus component convert ACFGs embeddings genius codebook approach embed ACFG cluster algorithm codebook consist representative ACFGs identify cluster convert ACFG feature vector genius similarity specify ACFG representative session investigate attack CCS october november dallas TX usa code graph function dtls heartbeat heartbleed vulnerability ACFG codebook bipartite graph algorithm consequently similarity feature vector specify ACFG graph embed inspire convincing codebook graph limitation codebook generation expensive pairwise graph conduct graph training dataset spectral cluster perform quality generate codebook limited training dataset runtime overhead graph embed increase linearly codebook graph codebook therefore codebook confines fidelity graph encode accuracy approach ultimately bound quality bipartite graph approximate algorithm bipartite graph optimal neural network embed generation propose neural network approach embed ACFG overcome limitation previous graph approach approach employ neural network transform ACFG embed discus detail approach advantage previous accuracy neural network embed achieve significantly accuracy bipartite graph genius neural network graph embed rely bipartite graph instead evaluates graphical representation iteratively propagate embed throughout graph parameter neural network automatically maximize embed objective distance embeddings ACFG minimize chosen codebook whereas distance embeddings dissimilar ACFGs maximize neural network approach allows model retrain additional supervision domain expert adapt task scenario improve accuracy embed efficiency graph embed genius perform bipartite graph ACFG codebook comparison neural network model cheap compute computation neural network parallelize leverage massively parallel compute hardware multi core CPUs gpus another performance boost inter attribute achieve graph genius extract inter attribute offspring betweenness average expensive compute attribute neural network model attribute offspring cheap compute achieve accuracy neural network model already incorporates inter relation information embed inter attribute betweenness achieve accuracy faster offline training compute codebook genius compute distance matrix training ACFGs complexity quadratic training sample linear bipartite graph algorithm contrast neural network approach training constant epoch complexity linear training data genius generate codebook approach neural network model within enable practical application retrain neural network BASED model EMBEDDING generation introduce code similarity embed overview explain important module approach graph embed network overall architecture training approach acquire  model pre training task specific model training code similarity embed aforementioned code similarity task dependent assume exists oracle code similarity metric task unknown binary program function indicates otherwise indicates dissimilar oracle specific task typically unknown task limited instance triple domain expert truth data oracle session investigate attack CCS october november dallas TX usa objective code similarity embed mapping ACFG function vector representation intuitively embed capture information detect function  compute similarity function sim cosine function vector program binary function sim otherwise advantage embed mapping enables efficient computation similarity function compute inexpensive similarity function vector without incur expensive graph algorithm aforementioned neural network approximate embed function particularly appeal quickly retrain adapt task easily limited  truth data compute neural network embed rely expensive graph algorithm implement efficiently overview code similarity embed assume binary code function ACFG binary code function ACFG interchangeably embed mapping neural network input ACFG leverage previous graph embed network machine community address however graph embed network classification label information model contrast code similarity embed classification exist approach apply directly novel approach graph embed network similarity detection tackle challenge propose approach instead training graph embed network predictive task differentiate similarity input ACFGs siamese architecture embed graph embed network structurevec siamese architecture function input similarity output enables model supervision graph input truth output without additional craft heuristic embeddings generate approach robust easy adapt task explain detail overall architecture training training siamese architecture function dissimilar function however task truth data limited address issue default policy considers equivalent function binary function compile source code  function easily generate training collection source code dataset pre task independent model effective task incorporate available truth data task specific policy approach allows model retrain incorporate task specific data explain task independent pre training task specific training detail graph embed network graph embed network adapt structurevec denote ACFG vertex respectively furthermore vertex graph additional feature correspond feature ACFG graph embed network compute dimensional feature vertex embed vector compute aggregation vertex embeddings aggregation function summation average exploration aggregation function future explain detail generic graph embed network variant instantiate specifically ACFG embed structurevec approach structurevec inspire graphical model inference algorithm vertex specific feature aggregate recursively accord graph topology recursion network feature representation embed vertex account graph characteristic interaction vertex feature specifically denote vertex graph variant structurevec network initialize embed vertex update embeddings iteration fix update formula generic nonlinear mapping specify choice later update formula embed update graph topology synchronous fashion embed sweep across vertex embed update vertex previous easy update defines vertex feature propagate vertex via nonlinear propagation function furthermore iteration update farther away vertex feature propagate vertex aggregate nonlinearly vertex terminates update iteration vertex embed information hop neighborhood graph topology involve vertex feature instead manually specify parameter nonlinear mapping parameter structurevec model originally classification previous truth label input graph belongs model link softmax layer entire model session investigate attack CCS october november dallas TX usa ACFG iteration graph embed network overview vertex adjacent vertex relu relu tanh layer layer iteration graph embed network graph embed network minimize entropy loss approach applicable classification instead parameter parameter siamese architecture embeddings compute similarity explain parameterization discus  neural network visualizes network architecture tanh  dimensional vector graph node feature matrix embed explain nonlinear transformation powerful define layer fully neural network relu relu  matrix refer embed depth relu rectify linear relu max novel parameterization update function iterative update scheme described completes embed network ACFGs overall algorithm generate embed ACFG summarize algorithm algorithm another matrix transform embed vector denote output parameter siamese architecture explain overall network architecture graph embed similarity detection siamese architecture combine graph algorithm graph embed generation input ACFG initialize tanh  fix equation update return embed structurevec network siamese architecture identical graph embed network structurevec graph embed network ACFG input output embed output siamese architecture cosine distance embeddings embed network parameter training network remain identical overall architecture illustrate ACFGs truth information indicates otherwise define siamese network output sim algorithm model parameter optimize objective function min sim session investigate attack CCS october november dallas TX usa embed network embed network siamese architecture optimize objective stochastic gradient descent gradient parameter calculate recursively accord graph topology siamese network achieve performance auc training terminates graph embed network convert input graph effective embed  similarity detection task independent pre training task specific training training model amount data truth oracle obtain tackle issue construct training dataset default policy dataset pre task independent model effective task additional task specific data becomes available pre model retrain quickly acquire task specific model explain approach task independent pre training pre model applicable task intuitively generate embed function capture invariant feature function across architecture compiler implement intuition construct dataset default oracle assume source code compile program binary architecture compiler optimization default oracle determines binary function compile source code dissimilar otherwise construct training dataset binary function function dissimilar function sample construct training sample evaluation demonstrate model pre training performs graph approach task evaluate task specific training sometimes policy specific task deviate default policy pre model efficient tune parameter graph embed network additional data domain expert training procedure refines graph embed network incorporate additional data task specific policy domain expert specifically assume function truth label expert generate additional ACFG retrain graph embed network ACFG augment training information label expert augment dataset graph embed network epoch epoch newly sample data augment training network deployed similarity detection task retrain procedure allows expert feedback model tune adaptive task specific oracle improves similarity detection accuracy evaluation evaluate gemini respect accuracy computation efficiency evaluate accuracy task independent pre model dataset truth datasets model retrain adapt task evaluation approach exhibit superior advantage approach implementation setup consists component ACFG extractor neural network model graph embed obtain ACFG extractor plug disassembly ida pro author genius raw feature extract binary code consistent extract genius implement neural network model tensorflow python conduct server equip intel xeon CPUs core 1GHz GB memory TB ssd geforce gtx gpu training evaluation gpu baseline previous address bug  multi HM multi HM centroid genius demonstrate genius approach accurate efficient approach therefore evaluation baseline approach evaluate bipartite graph BGM binary function directly compute similarity ACFGs bipartite graph described genius approach baseline evaluate accuracy pairwise graph approach codebook graph embed genius approach baseline graph embed contact author genius obtain ACFG extraction code codebook evaluation implement session investigate attack CCS october november dallas TX usa training validation mips ACFGs dataset codebook generation embed generation comparison datasets evaluation datasets dataset training neural network evaluate accuracy pre model dataset II evaluate performance task specific model dataset efficiency evaluation vulnerability dataset dataset IV dataset dataset neural network training baseline comparison consists binary compile source code truth ACFGs compile source code function function dissimilar compile openssl version gcc compiler emit code mips optimization obtain binary file ACFGs split dataset disjoint subset function training validation respectively statistic split guarantee binary function compile source function training validation examine pre model generalize unseen function dataset II contact author genius dataset refer dataset firmware image image image successfully unpacked image vendor IP camera router access etc dataset evaluate efficiency construct dataset ACFGs various vertex graph randomly firmware image dataset II firmware image ACFGs ACFGs grouped ACFGs ACFGs randomly remove ACFGs obtain ACFGs dataset dataset IV dataset contains vulnerable function obtain vulnerability dataset contains vulnerable function training detail neural network model pre dataset adam optimization algorithm rate siamese model epoch epoch construct training data epoch ACFG training randomly ACFG ACFGs compile source function ACFG ACFGs training generate training sample truth label label randomly independently epoch training data epoch training data generate epoch randomly shuffle fed training mini batch ACFG epoch loss auc validation training epoch model achieve auc validation default embed embed depth model iteration attribute attribute offspring attribute accuracy evaluate accuracy pre model gemini construct similarity dataset dataset ACFG randomly ACFGs dataset truth label source function respectively similarity dataset consists ACFGs construct binary function compile source training examine performance gemini unseen function illustrates roc curve neural network model gemini baseline approach gemini outperforms BGM genius margin examine performance gemini graph split similarity accuracy graph subset graph subset graph subset contains ACFGs vertex graph subset contains roc curve approach evaluate graph subset graph subset plot respectively consistent observation gemini outperforms BGM genius significantly genius outperforms BGM graph BGM performs genius graph gemini outperforms BGM genius graph hyperparameters evaluate effectiveness hyperparameters gemini model examine impact training epoch embed depth embed ACFG attribute iteration examination impact training epoch similarity validation examine hyperparameters similarity entire  however auc almost identical interested performance model graph examination hyperparameters graph subset similarity session investigate attack CCS october november dallas TX usa false positive rate positive rate gemini BGM genius similarity false positive rate positive rate gemini BGM genius graph subset false positive rate positive rate gemini BGM genius graph subset roc curve approach evaluate similarity dataset epoch model epoch evaluate model validation epoch loss auc plot loss training epoch almost remains loss model epoch observation auc although auc model epoch therefore conclude model quickly achieve reasonably performance epoch embed depth layer function gemini model embed depth roc curve auc structurevec embed depth improvement increase non linear mapping layer however layer embed embed achieve  roc curve however curve correspond embed embed longer training longer evaluation embed performance efficiency worth embed gemini effective genius embed dimensionality BGM ACFG attribute evaluate accuracy extract attribute construct ACFGs attribute attribute attribute plus offspring attribute attribute achieves performance unexpected model attribute expressive model overfitting scenario training data additional  attribute misleads model compute embed iteration model achieves performance iteration reasonable dataset graph hop propagate local information vertex graph efficiency evaluate efficiency gemini genius embed generation dataset latency task ACFG extraction function embed generation ACFG overall latency embed generation task task exclude disassembly ida pro approach usually disassemble binary file amortize function binary file embed generation implement version gemini genius respectively implement cpu gpu version gemini tensorflow maximally leverage multi core hardware accelerate performance genius implement thread version multi thread version genius computes embed ACFG similarity ACFG graph codebook bipartite graph naturally parallelize thread graph codebook multi thread version parallelizes computation ACFG extraction sample average extraction ACFG illustrate extract attribute extract attribute along offspring attribute additionally extract betweenness attribute average extraction increase along ACFG variation genius attribute achieve performance contrast gemini aggregate graph structural information iteration embed update achieve performance without session investigate attack CCS october november dallas TX usa ACFG ACFG extraction ACFG average ACFG extraction ACFG genius genius gemini gpu gemini cpu feature vector generation ACFG genius genius gemini gpu gemini cpu average feature vector generation efficiency evaluation dataset plot sample dataset average data ACFG therefore data ACFG indicates extraction attribute indicates extraction offspring attribute indicates extraction betweenness attribute gemini cpu gemini gpu denote cpu gpu implementation gemini approach respectively genius genius denote thread multi thread implementation genius respectively costly betweenness attribute computation therefore gemini improve upon genius average ACFG extraction embed generation embed generation cpu implementation gemini faster multi thread version genius average speedup attribute gemini approach avoids expensive graph algorithm reduces complexity graph ACFGs sparse graph vertex computation almost linear graph computation gemini implement matrix operation matrix multiplication matrix summation wise operation matrix operation parallelize utilize underlie multi core CPUs achieve speedup respect core graph algorithm genius cannot easily parallelize speedup processing codebook parallel speedup bound codebook later analysis achieve upper bound theoretical speedup genius codebook thread version multi thread version genius achieve theoretical upper bound speedup codebook although multi thread version faster average speedup codebook genius contains graph vertex dominates overall feature generation ACFG synchronization multi thread introduces additional overhead observation ACFG multi thread version session investigate attack CCS october november dallas TX usa epoch loss similarity validation subset loss versus epoch epoch auc similarity validation subset auc versus epoch false positive rate positive rate BGM genius roc versus embed depth false positive rate positive rate BGM genius roc versus embed false positive rate positive rate BGM genius roc versus ACFG attribute false positive rate positive rate BGM genius roc versus iteration effectiveness hyperparameters NN evaluate similarity validation evaluate graph subset similarity thread version ACFG becomes speedup multi thread increase examine performance gemini gpu however gpu version average cpu version happens mostly embed generation graph graph gpu version faster cpu version attribute observation gpu version additional overhead allocate gpu memory copying data memory gpu memory computation therefore ACFG becomes overhead becomes insignificant overall compute embed overall latency embed generation embed generation genius ACFG extraction inter feature multi thread cpu implementation feature encode genius gemini embed generation ACFG extraction feature offspring cpu implementation graph embed gemini cpu gemini achieve speedup average gemini faster genius training although offline training amortize online query release firmware image model update monthly basis weekly basis accurately model data therefore briefly training genius gemini genius approach compute codebook unsupervised algorithm spectral cluster algorithm construct distance matrix quadratic complexity training data training data contains function construct codebook previous genius construct codebook contrast gemini model fix epoch linear epoch linear sample epoch training dataset epoch contains around training sample earlier session investigate attack CCS october november dallas TX usa policy   priv decode  prompt info ssl message visualize embeddings function sne indicates source function legend source function gemini model epoch training achieve reasonable performance epoch performance gemini epoch model outperform genius achieve performance therefore neural network approach allows model update frequently genius crucial retrain model update practical understand embeddings visualize embeddings compute task independently pre embed network understand effectiveness randomly source function compute embeddings correspond binary function compile compiler target architecture optimization sne project highdimensional embeddings onto plot project source function binary function compile source function binary function compile source function therefore visualization illustrates task independent pre embed function preserve information source function embeddings regardless target architecture compiler optimization accuracy task specific retrain model dataset evaluate effectiveness task specific retrain approach firmware image evaluation setup extract ACFGs function dataset II function vulnerability dataset IV vulnerability specific task function dataset vulnerability achieve retrain model pre dataset inspects evaluate precision function gemini retrain achieve accuracy task significantly prior accuracy around detail approach allows identify novel vulnerable firmware image average genius retrain effectiveness perform retrain iterative manner pre model compute embeddings function target corpus index query handle within manually inspect assign truth label retrain iteration retrain compute embeddings subset randomly sample entire target corpus iteration iteration retrain genius approach flexibility incorporate additional supervision efficiently retrain unique advantage approach genius allows approach achieve accuracy additional supervision domain expert vulnerability genius cve cve genius reference cve iteration retrain approach discovers positive vendor link  DD wrt tomato  approach discovers positive retrain iteration improve precision reference genius detect vulnerable firmware image precision link  cve harder graph patch instruction zero memory buffer insert patch approach iteration retrain approach identifies firmware image vulnerable precision comparison genius identify vulnerable firmware image precision retrain consumption iteration retrain model epoch sample entire dataset evaluation earlier ACFGs regenerate embed computation overall automate within iteration manual investigation experienced expert manual investigation candidate within shorter later iteration vulnerable code already familiar expert iteration investigation session investigate attack CCS october november dallas TX usa expert iteration effective model vulnerability model deployed entire dataset around generate embeddings entire dataset therefore conclude retrain capability approach enables practical usage feedback expert increase accuracy within reasonable amount within related closely related throughout briefly survey additional related focus approach code similarity bug without source code approach unknown bug bug already comparison earlier raw feature bug researcher already bug binary contribution towards direction fundamentally rely various raw feature directly extract binary code similarity gram perm approach bug adopt binary sequence mnemonic code without understand semantics code cannot tolerate opcode reorder issue compilation improve accuracy  approach capture execution sequence feature code similarity address opcode issue  capture semantics expression however opcode register across architecture approach suitable bug architecture approach bug  expensive apply firmware bug    adopt expensive graph isomorphism algorithm quantify similarity graph code symbolic execution theorem prover   expensive extract equation conduct equivalent although MinHash reduce code similarity computation graph algorithm expensive handle graph  utilizes pre filter boost cfg eliminate unnecessary pre filter unreliable output tremendous false negative approach indeed efficient bug specific bug obvious artifact cannot handle graph embed graph analysis significance various application biology social network typically meaning graph embed graph analysis embed node graph node vector structural information graph preserve approach LLE embed vector embed node linear combination node embed node recently  adopt graph dataset another meaning graph embed adopt embed vector graph perform machine task protein gene analysis currently kernel widely technique processing structural data sequence graph kernel carefully kernel function positive semidefinite function node kernel counting elementary structure graph specific subtree graph appearance subgraph specific structure weisfeiler lehman algorithm however kernel fix embed dimension another kernel leverage graphical model account structure data variation representative fisher kernel probability kernel kernel graphical model input graph inner distribution kernel function model apply structurevec construct graphical model input graph parameterize inference algorithm graphical model neural network define feature correspond kernel function graph embed approach propose graph neural network compute embeddings graph extend gate recurrent gru generate feature generalize principled graphical model allows flexible embed function define therefore variant embed generation function another research generate graph embeddings network social network focus unsupervised semi supervise generate feature node graph embeddings entire graph approach easy incorporate additional training data retrain suitable conclusion neural network approach generate embeddings binary function implement prototype gemini extensive evaluation gemini outperforms approach margin respect similarity detection accuracy embed generation overall training demonstrate retrain gemini identify significantly vulnerable firmware image genius session investigate attack CCS october november dallas TX usa research showcase successful application computer security