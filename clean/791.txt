device driver essential unix handle operation physical device disk printer digital camera bluetooth speaker surge hardware particularly mobile device introduces explosive growth device driver kernel driver developer susceptible security vulnerability lack vet unfortunately complex input data structure device driver render traditional analysis fuzz effective research kernel driver security comparatively sparse difuze interface aware fuzzing automatically generate valid input trigger execution kernel driver leverage static analysis compose correctly structure input userspace explore kernel driver difuze fully automatic identify driver handler mapping device file construct complex argument instance evaluate approach android smartphones difuze effectively identify kernel driver bug report previously unknown vulnerability flaw arbitrary code execution CCS CONCEPTS security privacy mobile platform security vulnerability scanner keywords fuzzing kernel driver interface aware introduction smartphones mobile device occupy central interact financial transaction communicate coworkers location audio video increasingly personal commercial purpose facilitate government activity importance security device obvious adversary compromise device become gateway gain enormous amount therefore effort ensure security smartphones security achieve sophisticated application sandboxing leverage attack mitigation technique target userspace application address layout randomization data execution protection  security tier development goal however weakness security mobile device kernel unlike userspace application vulnerability mitigation technique available kernel operating relatively vulnerable attack despite available protection vulnerability userspace application become rarer attacker focus kernel android vulnerability kernel code increase highlight technique detect eliminate kernel bug kernel split code core kernel code device driver former access syscall interface user file execute program  latter posix compliant linux android freebsd iOS mobile phone typically access via ioctl interface interface implement specific allows dispatch input device driver accord google bug report android kernel fork linux driver code device vendor continually mobile device criticality security automate approach identify vulnerability device driver exploit attacker critical automatic analysis interface thoroughly explore related ioctls neglect interaction syscalls session fuzzing CCS october november dallas TX usa unified define specification interaction ioctls varies device driver specifically ioctl interface comprises structure argument valid command command data structure driver dependent security implication pointer dynamically union sub structure structure increase vulnerability parse structure device analyze automate analysis device interface aware effective interact ioctls command identifier data structure difuze novel combination technique enable interface aware fuzzing facilitate dynamic exploration ioctl interface device driver difuze performs automate static analysis kernel driver code recover specific ioctl interface valid command associate data structure recover interface generate input ioctl dispatch kernel userspace program input command structure driver enable efficient deeper exploration ioctls recover interface allows fuzzer meaningful choice mutate data typed pointer  integer handle simply sequence byte difuze stress assumption driver expose serious security vulnerability analyze mobile device vulnerability previously unknown vulnerability difuze patch severity flaw crash device denial service dos bug attacker phone summary contribution interface aware fuzzing novel approach facilitate fuzzing interface sensitive target ioctl kernel driver interface posix automate driver analysis developed fuzzing framework automatically analyze kernel source device driver identifies ioctl entry correspond structure device file apply technique analyze device identify vulnerability vulnerability dos code execution flaw demonstrate efficacy impact approach responsibly disclose vulnerability respective driver vendor difuze prototype release difuze source github com   difuze useful future security researcher background related explain unique challenge overcome challenge exist theart inapplicable ioctl fuzzing introduce platform android fuzzing operates previous program vulnerability posix device driver posix standard specifies interface interaction userspace application device driver interface interaction device device file file userspace presence kernel resident device driver userspace application obtains handle device file multiple application interact file device fulfill functionality seek presumably applicable device file content essentially file audio device raw audio data microphone raw audio data speaker seek unused however functionality cannot implement traditional audio device userspace application configure sample rate audio action posix standard ioctl interface allows driver expose functionality model traditional file generality ioctl interface arbitrary driver specify structure input prototype int ioctl int file descriptor int request argument file descriptor argument integer commonly command identifier quantity remain argument dependent driver command identifier challenge aforementioned ioctl susceptible vulnerability unlike data ioctl instance extremely complex non standard data structure parse structure trivial mistake introduce critical vulnerability directly kernel context generality data structure analysis ioctl interface analyst knowledge driver command identifier data optional argument core aim difuze automatically recover command identifier structure information complex data structure fuzz device ioctl interface security vulnerability minimal intervention android operating android operating smartphones recent report android dominate smartphone OS although android designer cautious safeguard device vulnerability smartphone popularity increase security android standard interface device implementation session fuzzing CCS october november dallas TX usa android target platform evaluate analysis approach difuze unix android linux kernel monolithic architecture although kernel module device driver modularity principle monolithic entire kernel memory equally privileged therefore vulnerability device driver compromise entire kernel indeed bug report android kernel driver code vendor android source project allows vendor sony HTC customize android kernel driver hardware digital camera accelerometer gps device security development susceptible introduction security vulnerability thankfully openness android source code publicly available gnu public license facilitates approach access semantically information driver fuzz fuzzing technique program generate random data input program drawn research attention spike valgrind  fuzzing prospect fuzzing generate mostly valid input execute target program functionality trigger vulnerability dynamic taint widely strategy generate potential input   taint generate input likely trigger vulnerability however ioctl function highly constrain input technique effective approach taint analysis exist recover input format underlie program cannot recover dependency command identifier ioctl handler argument evolutionary technique another input generation strategy fuzzing vuzzer  combine static analysis mutation evolutionary technique efficiently generate input however technique ineffective generate highly constrain input difuze solves ioctl command fuzzing unconstrained input format input format program fuzzing enhance specification valid input peach standard however cannot generate data data active pointer data device driver input structure pointer grammar technique fuzz file format interpreter compiler technique input fix format kernel driver fuzzing fuzzing operating interface practical approach operating kernel driver ioctl function posix standard interact userspace ioctls complex specific command data format generate user identify valid command associate data structure ioctl fuzzing developed ioctl interface kernel     however extensive trace information kernel format ioctl command specific moreover simplistic involve simply attach hook ioctl hooked mutates lack aspect capability driver cannot information incoming data difuze analyzes source code device driver identify valid command correspond data structure analysis technique modification actual device extraction valid ioctl command previously attempt  unable kernel module conversely difuze vulnerability kernel module device  syzkaller specifically developed linux syscall fuzzing perform badly fuzzing ioctl handler device driver although syzkaller additional instrumentation technique kernel address sanitizer detect bug technique cannot directly vendor device analyst  device custom firmware approach concentrate fuzzing specifically chosen syscalls driver however focus specific function cannot generalize syscalls driver difuze completely automate generalize fuzz linux kernel driver device unmodified kernel analysis aside fuzzing analysis technique symbolic execution static analysis related introduce mechanism explain affect symbolic execution symbolic execution technique symbolic variable generate constrain input satisfy complex dart sage  driller combine symbolic execution random increase code coverage borg symbolic execution generate input likely trigger buffer  engineering issue perform symbolic execution raw device fundamental explosion complex kernel render technique impractical kernel driver session fuzzing CCS october november dallas TX usa ioctl handler identification device file detection command determination argument identification structure definition pointer  sub structure generation specific creation structure recursion execution automatic reboot xml spec interface recovery structure generation device execution fuzz analysis host analysis host target host kernel source code  vulnerability trigger difuze approach diagram difuze analyzes kernel source composition analysis extract driver interface information valid ioctl command argument structure synthesizes instance structure dispatch target device trigger ioctl execution input eventually crash device driver static analysis static analysis popular technique program vulnerability without execute program maximize precision technique typically source code perform analysis kernel linux kernel device driver source kernel security greatly benefit static analysis  developed compiler extension integer untrusted source linux OpenBSD kernel bound model checker deadlock memory leak linux kernel built static analysis correctness driver limitation static analysis production false positive leverage fuzzing vulnerability detection identify vulnerability actual bug false positive entirely avoid another drawback static analysis technique analysis manual specification security policy overview overview interface aware fuzzing approach application vulnerability detection device driver ioctl fuzzing reference throughout assist curious reader understand demonstrates workflow difuze input source code kernel source code device driver target host linux license gnu public license software link kernel driver interface code release kernel source android device readily available analysis input difuze phase recover interaction interface device driver generate structure interface trigger processing structure kernel target host trigger kernel bug render unstable hang reboot difuze stage vivo target host stage execute external analysis host locally input replay bug trigger transfer network connection debug interface target host detail stage interface recovery stage difuze analyzes source detect driver enable target host device file interact ioctl command structure command series analysis implement llvm described stage tuples device filename target driver target ioctl command structure definition structure generation structure difuze continuously generates structure instance memory content instantiation information recover previous instance transfer target host along associate target device filename target ioctl command identifier stage detailed device execution actual ioctl trigger component resides target host upon receipt target device filename target ioctl command generate structure instance executor proceeds trigger execution ioctls discus stage difuze sequence input target bug trigger target device crash input reproducibility manual triage analysis session fuzzing CCS october november dallas TX usa reader understand difuze driver listing structure definition wrapper around user function minor complication analysis listing driver initialization code listing ioctl handler function driver init listing driver initialization function kernel initialization function register device device specifies function ioctl handler invoked userspace application performs ioctl device file dev device although filename device absolute file depends device device device dev directory however device file directory instance proc device proc directory refer throughout  struct sub char sub   union meta  data   struct int idx uint subtype    listing structure definition difuze automatically recovers performs structure aware fuzzing target driver int user wrapper void buff void  byte address user  return user buff  listing driver driver wrap user function wrapper complex difuze analysis nest function  dev data  dev data static bool enable static bool  enable ioctl handler struct file file int cmd arg uint curr idx uint idx void argp void arg  target dev null switch cmd target dev dev data target dev target dev dev data program execute enable user wrapper void curr idx argp sizeof curr idx return  fail user user wrapper void idx argp sizeof idx return  fail user curr idx idx curr idx return data target dev curr idx return  default  enable return ioctl  file cmd argp return  ioctl  struct file file int cmd void argp   data  target dev cmd user wrapper void  data argp sizeof  data return  fail user target dev dev data  data subtype target dev dev data arbitrary heap  data idx user wrapper void target dev  data idx  data  sizeof  return  fail user return return  listing ioctl handler specific command identifier data structure command ioctl processing split across multiple function session fuzzing CCS october november dallas TX usa static struct  driver  static dev client  static struct file operation driver ops init int driver init void request minor alloc  driver  device ioctl handler device driver ops unlocked ioctl ioctl handler  init driver  driver ops register correspond device  driver   driver  listing driver initialization function dynamically creates driver file recover difuze register ioctl handler recover interface recovery efficiently fuzz ioctls device driver difuze recover interface driver interface device driver comprise device file communicate device valid ioctl command device structure definition ioctl data argument ioctl command recover data difuze combination analysis implement llvm linux kernel lend analysis compilation llvm developed alternate procedure identify filename device file device driver ioctl handler recover valid ioctl command identifier retrieve structure definition data argument ioctl command instrumentation enable difuze perform llvm analysis linux device driver gcc compilation perform manual kernel driver source target host compilation gcc generally document vendor mobile device GPL mandate source code release easy compile manual configuration effort source compile gcc compilation execute command gcc llvm conversion execute command compilation gcc llvm command conversion utility difuze utility translates command flag format gcc format llvm utility enables compilation kernel source via llvm compilation llvm generates bitcode file source file enable debug information embed bitcode file extract structure definition explain bitcode consolidation analysis difuze  driver separately consolidate various bitcode file bitcode file per driver allows interface recovery analysis bitcode file simplify analysis consolidated bitcode file phase perform analysis ioctl handler identification interaction device driver happens ioctl interface userspace application ioctl passing file descriptor driver device file command identifier structure data argument kernel correspond driver ioctl handler invoked handler dispatch request functionality inside driver command identifier ioctl handler function ioctl handler recover valid command identifier structure definition additional ioctl argument difuze identify ioctl handler driver register ioctl handler device file linux kernel however involve creation structure purpose structure function pointer ioctl handler structure correspond kernel appendix analysis identify ioctl handler straightforward llvm analysis capability structure driver recover assignment ioctl handler function pointer identify unlocked ioctl file operation structure listing function ioctl handler ioctl handler device file detection device file correspond ioctl handler identify registration ioctl handler device file dev device listing device register file linux kernel registration device alloc  associate device proc device proc filename furthermore mention device directory device file ioctl handler procedure identify correspond device llvm instruction address operation structure appendix reference operation structure registration function analyze argument device filename return constant variation structure session fuzzing CCS october november dallas TX usa listing previously ioctl handler function ioctl handler identify ioctl handler file operation structure driver ops usage driver ops parameter function  init function  implies device device backtrack allocation function device metadata alloc  argument device detect constant return dev device device  int init    void   sizeof   dev prefix    listing dynamically generate device  driver huawei honor phone difuze fails device driver driver dynamically filename listing unfortunately limitation inherent static analysis filename fallback manual analysis remain fully automate simply ignore device proceed identify valid command identifier accepted ioctl handler command determination ioctl handler perform static inter procedural  analysis equality constraint cmd argument ioctl analysis recover comparison operand ioctl listing constraint cmd cmd cmd comparison operand constant analysis constant respectively equality constraint cmd observation almost driver equality comparison valid command IDs exists ioctl function VL driver driver specific function nest manner driver expand appendix argument identification ioctl command identifier correspond data structure definition relationship ioctl command structure global configuration command structure multiple ioctl command structure identify user function linux kernel data userspace kernel listing listing ignore site source operand argument user argument ioctl function cannot ioctl argument remain site source operand definition user data argument ioctl handler conform pointer cast hide actual structure user listing reachable ioctl handler ioctl handler listing multiple however actual source operand site void addition user function reside wrapper function indirectly ioctl function listing listing distribute across function file handle perform inter procedural sensitive propagation assign source operand user function user data argument ioctl handler associate command identifier structure equality constraint explain along perform propagation constraint command user function command identifier associate structure listing identify user site actual happens wrapper function user wrapper relevant brevity ignore constraint cmd site ignore source operand user argument listing argument user wrapper argp finally remain identify destination operand target user site command argp destination operand curr idx define uint command multiple instance cmd constraint argument command associate argument command associate argument uint uint extract argument structure definition structure definition definition definition compose listing extract definition  extract definition   identify source file correspond user function debug information compute source file session fuzzing CCS october november dallas TX usa relevant ioctl handler listing user site cmd constraint resolve command user argument listing cmd uint listing cmd uint listing cmd uint listing cmd uint listing cmd  listing cmd gcc llvm pipeline generate correspond preprocessed file preprocessed file definition definition identify  parse struct definition xml format definition extract structure generation difuze recovers ioctl interface generate instance structure pas device execution procedure straightforward difuze instantiates structure random data properly pointer complex input ioctls specific creation likely trigger increase code coverage others buffer code align boundary buffer boundary likely trigger byte overwrites due careless termination observation wisdom fuzzing community previous widely difuze leverage concept confine integer generate integer pointer reference data unstructured char pointer structure definition recover void data data difuze allocates random content sub structure generation input ioctls nest structure structure contains pointer structure difuze generates structure instance individually sends device execution component component stage merges nest structure passing ioctl device execution prior stage difuze analysis host actual execution ioctls target host structure generation component sends generate structure along target device driver filename ioctl command identifier device execution component component finalizes structure trigger ioctl pointer  structure comprise multiple memory pointer structure generation component transmits memory instance independently along metadata combine device execution component structure data preserve bandwidth analysis host target host data differently built structure individual node structure individually node configuration structure structure recursive link node pointer link node bound combination structure device execution component attempt difuze limit recursion structure threshold execution structure difuze device execution component appropriate device file trigger ioctl ioctl command identifier data structure difuze bug kernel crash target device maintain heartbeat signal analysis host target host difuze bug series input host device later reproduction triage restart bug trigger target host inconsistent crashed former device execution component trigger reboot device resume fuzzing ioctl command driver latter crash device sometimes restarts happens difuze resume without analyst interaction otherwise analyst reboot device fuzzing resume implementation engineer completely automate user simply compilable kernel source archive connects target host mobile phone analysis host device execution component target host command entire pipeline interface extraction llvm implement interface extraction technique component interface session fuzzing CCS october november dallas TX usa extraction implement individual llvm mention exist implementation analysis recover valid command identifier interface aware fuzzing implementation   combination structure generation analysis host device execution ioctls achieve interface aware fuzzing intentionally prototype effectiveness interface aware fuzzing without optimization influence  specifically target ioctl android device described generates random sequence ioctl along associate structure sends device execution component target host production variant approach integrate difuze syzkaller linux fuzzer integration goal contribute community source enhancement syzkaller syzkaller linux fuzzer allows analyst manually description fuzz associate syzkaller handle structure argument correspond format manually specify integrate difuze automatically convert interface recovery format syzkaller interface aware syzkaller typically kernel compile coverage information  another memory access sanitizer however configuration unmodified android device purpose evaluation effectiveness difuze evaluate interface recovery bug capability evaluation perform android phone popular vendor device driver specific phone along vendor chipsets evaluate effectiveness efficiency interface recovery core component validate manually analyze random sample ioctls structure recover interface perform comparative evaluation bug capability difuze  improvement syzkaller fuzzing component interface extraction evaluation interface extraction platform machine intel xeon cpu ghz ubuntu lts average entire interface extraction phase kernel evaluate effectiveness interface extraction kernel device interface extraction kernel difuze identify ioctl handler kernel android phone evaluation kernel version android kernel phone device vendor chipset vendor android kernel version pixel google qualcomm plus HTC  HTC qualcomm lite huawei huawei honor huawei huawei galaxy samsung samsung  XA sony  valid command identifier cumulative  ioctl handler cdf percentage ioctl handler valid command identifier device handler closely correspond driver correspond phone device identification approach device identification  device difuze automatically identify device accounting ioctl handler identification failure kernel mainline driver recovery vendor driver  XA recover discrepancy mainline driver tend dynamically generate listing whereas vendor driver tend static manually extract dynamically device valid command identifier fourth valid command identifier extract across entry correspond kernel difuze valid command identifier across driver kernel valid command identifier considerably across kernel crash fuzzer positively correlate valid command identifier distribution valid command identifier per ioctl handler ioctl handler command code ioctls conditionally session fuzzing CCS october november dallas TX usa interface recover difuze kernel phone ioctl device valid command user argument handler automatically identify identifier user scalar struct struct pointer pixel plus lite honor galaxy  XA compile guard kernel configuration compilation ioctl handler code disabled correspond ioctl handler empty generate bitcode file zero command command identification ioctl handler command identifier attribute ioctl ops explain appendix nest handler manage specific command majority ioctl handler valid command identifier manually investigate ioctls command identifier approach approximates function pointer ioctl function although estimation extra invalid fuzz subsequent fuzzing marginal impact overall performance percentage user argument argument user argument ioctl handler treat command identifier user category user argument treat argument identification user argument treat raw hence user instead user user pointer kernel information user identification kernel processing user data command identifier user argument pointer specific data user data pointer argument categorize command identifier scalar pointer argument command IDs belongs category user argument scalar uint uint command identifier user argument structure embed pointer  listing command identifier date structure contains embed pointer command ID belong category user argument  contains embed pointer listing command extremely effectively fuzz without argument information user argument structure contains pointer valid pointer random sample verification picked random sample ioctls android phone manually verify extract ioctls command correctly identify argument command yield accuracy evaluation setup difuze actual bug device driver extract interface information ability prototype fuzzer  syzkaller identifier   difuze  syzkaller respectively fuzzing device execution component additionally evaluate amount interface syzkaller examine interface extraction influence specifically configuration difuze syzkaller specify syzkaller fuzz device file ioctl trigger ioctl handler default configuration contains standard device filename structure standard along ioctls linux device syzkaller configuration specification extract driver syzkaller fuzz however interface information  extract interface information device ioctls syzkaller fuzzer configuration trigger ioctl command handle unable explore code handle complex structure  configuration integrates interface recovery automatic identification ioctl argument structure format syzkaller perform configuration leverage optimization syzkaller session fuzzing CCS october november dallas TX usa  configuration integrates interface recovery fuzzer prototype  configuration explore interface aware fuzzing discover bug optimization absent evaluate android device flagship model google popular phone samsung sony HTC device update available version device device execution component ensure fuzz driver accessible app permission however component standard application accessibility device file ioctl handler setup code coverage feedback  enable compile kernel flash non stock kernel discussion compile instrumentation aforementioned difuze configuration android device crash occurs frequently driver blacklist buggy ioctl handler prevent phone repeatedly crash reboots interfere crash crash sequence manually triaged filter duplicate difuze unique bug android device overview bug unable syzkaller galaxy  unable trigger bug android device zero bug device anywhere vulnerability honor fourteen vulnerability  XA configuration syzkaller without interface information unable bug driver syzkaller yield crash across device suggests blindly fuzzing kernel driver effective likely undertaken vendor device partial interface information extract ioctl  bug although impressive remain interface information ioctl argument structure definition interface substantially increase bug bug effectiveness interface aware fuzzing moreover importance recover ioctl command identifier structure information analysis ioctl handler particularly  bug  syzkaller fuzzing strategy optimization built  fuzzing prototype optimization described crash difuze crash arbitrary arbitrary assert failure buffer overflow null dereference bound index  non volatile memory fuzzing accurate interface information powerful briefly triaged crash quickly classify device crash serious bug crash benign assertion error trigger serious underlie bug malicious user carefully craft gain powerful primitive bug discover bypass asserts encounter ability bypass thwart scenario become reality demonstrate severity exploit arbitrary vulnerability gain code execution kernel escalate app privilege currently responsibly disclose vulnerability vendor bug patch knowledge remain bug subsection bug demonstrate impact necessity interface information detection issue honor bug collection OS crash typical kernel bug behavior target host fuzzing huawei honor serial device listing serial device boot loader EL privilege however occurrence serial actually userspace application privilege EL android exploit kernel driver vulnerability bug fuzzing driver  honor partition flash nvme device configuration information configuration option unprivileged modifiable android device unlock enable  notably excludes identifier serial modifiable boot loader however ioctl handler device dev  option additionally session fuzzing CCS october november dallas TX usa bug fuzzing configuration per device syzkaller syzkaller    unique pixel plus lite honor galaxy  XA configuration option malicious userspace application privileged configuration option disallow modification privilege configuration option fix issue android kernel privilege EL option belong boot loader privilege truly fix privileged unprivileged option partition accessible differently privileged code fuzzing     fuzzing    listing issue difuze fuzzing  driver II  bug bug interface extraction recovery complex structure instantiation relevant source reference static int   cipher dip void user argp struct   cipher dip req req   char  null  null int ret ret user req argp sizeof req ret err user fail ret ret input buffer userspace kernel  align req buf    gfp kernel  err error allocate buffer ret  ret user  req buf req buf return ret  ioctl struct file file unsigned cmd unsigned arg int ret void user argp void user arg switch cmd  ioctl  cipher dip req ret   cipher dip argp return ret cve bug patch bug google flagship android phone pixel ioctl function driver ioctls userspace application specifies cmd arg cmd  ioctl  cipher dip req   cipher dip inside function user data struct   cipher dip req req bug  calculate align user req buf userspace application align overflow req buf specifically zero attempt  calculate finally driver attempt user embed pointer struct allocate buffer user crash buffer improperly calculate however crash user req buffer valid pointer user fail gracefully return error without properly instantiate argument ioctl crash trigger session fuzzing CCS october november dallas TX usa performance coverage fuzzing without interface information ioctl cmd ID interface percentage increase interface interface aware  ioctl command structure  packet complex structure augment coverage fuzzing coverage fuzzing technique effective achieve coverage arises interface awareness  interface information coverage fuzzing significantly improve performance driver demonstrate syzkaller coverage mode kernel fuzzing ioctls  ioctl command interface  packet complex interface without structure interface information per combination combination percentage increase interface information interface information significantly improve coverage fuzzing performance evaluation commercial device due necessity recompile   flash kernel significant engineering effort outside scope project discussion interface aware fuzzing difuze improve kernel security uncover potentially harmful bug however weakness approach direction improvement review weakness discover fuzzing buggy driver crash prevent fuzzer explore deeper functionality driver likely bug simply earlier bug trigger frequently bug phone reboot technique recourse fuzzing command identifier ioctl handler others another weakness difuze inability extract complex relationship structure interface uncommon structure relates another specify buffer however recognize relationship potentially valuable information fuzzer future valuable technique fuzzing fuzzers coverage fuzzer currently technique vastly improve coverage technique interface awareness coverage information compile flash kernel device challenge grain coverage information development expensive simply unavailable device kernel source recompile acceptable difuze unlikely ioctl interface radically minor kernel update actual execution perform version software target host however kernel flash onto target host bug discover already obsolete finally vendor easy flash kernel device lock bootloader perform security kernel insert code coverage measurement kernel address sanitizer   coverage information improve difuze  bug detect memory corruption trigger assertion failure without exploitable bug trigger without device crash simply corrupt memory functionality important data corrupt coverage information improve enable deeper exploration driver mutate input trigger previously neglect driver functionality conclusion propose interface aware fuzzing increase effectiveness automate analysis interface sensitive code linux kernel driver technique recover ioctl interface specification fuzzing code implement technique automate pipeline directly kernel source archive command technique efficient effective recover component device file valid command identifier correspond argument interface driver thorough evaluation configuration difuze model android phone demonstrate implementation interface aware fuzzer effective bug previously unknown vulnerability source difuze community ensure safety mobile device