exist greybox fuzzers GF cannot effectively instance towards problematic patch towards critical dangerous location towards function  report vulnerability reproduce introduce greybox fuzzing DGF generates input objective target program location efficiently develop evaluate simulated anneal schedule gradually assigns closer target location reduce away implementation aflgo demonstrate DGF outperforms symbolic execution whitebox fuzzing undirected greybox fuzzing application DGF patch crash reproduction discus integration aflgo google continuous fuzzing platform OSS fuzz due directedness aflgo bug fuzzed security critical project libxml CVEs assign keywords patch crash reproduction reachability coverage greybox fuzzing verify positive introduction greybox fuzzing GF vulnerability detection GF lightweight instrumentation negligible performance overhead unique identifier input input generate mutate input fuzzer queue afl responsible discovery impact vulnerability generate valid image file community security researcher involve extend however exist greybox fuzzers cannot effectively fuzzers important portfolio security  unlike undirected fuzzers fuzzer spends budget specific target location without waste resource stress unrelated program component typical application fuzzers patch statement target critical component introduce vulnerability commit introduce heartbleed fuzzer focus expose regression crash reproduction stack trace target crash report stack trace environmental parameter development preserve user privacy specific crash input available fuzzers swiftly reproduce crash static analysis report verification statement target static analysis report potentially dangerous localize potential buffer overflow fuzzer generate input vulnerability actually exists information detection sensitive source sink target expose data leakage  security researcher generate execution sensitive source private information sensitive sink data becomes visible outside fuzzer generate execution efficiently exist fuzzers symbolic execution symbolic execution whitebox fuzzing technique program analysis constraint synthesize input program implement fuzzer symbolic execution technique choice due systematic exploration suppose graph exists target location symbolic execution construct firstorder logic formula satisfied input satisfiability modulo theory smt solver generates actual input constraint constraint satisfiable input contains target fuzzing target generation input specific program location identification specific input byte input already dangerous location achieve specific location taint fuzzing moreover generation input program achieve code coverage coverage fuzzing session fuzzing finer faster CCS october november dallas TX usa payload  payload  TLS HB request response payload TLS HB response payload memcpy payload commit introduce heartbleed reading payload incoming message payload byte incoming outgo message payload incoming message byte sender reveals private data symbolic execution DSE cast reachability iterative constraint satisfaction actually infeasible usually  feasible intermediate target instance patch katch symbolic execution klee statement suppose target katch feasible intermediate target katch constraint  TLS HB request constraint solver generate input actually target location unlike greybox fuzzers symbolic execution whitebox fuzzers trivial handle implement fuzzing however DSE effectiveness efficiency DSE spends considerable program analysis constraint iteration DSE identifies negate closer target program analysis construct correspond sequence instruction along satisfiability constraint solver DSE generates input greybox fuzzer execute magnitude input opportunity develop greybox fuzzers towards commit greybox fuzzer aflgo expose heartbleed DSE katch cannot expose heartbleed introduce greybox fuzzing DGF focus target location program cast reachability optimization employ specific meta heuristic minimize distance generate target compute distance compute distance target distance inter procedural novel analysis graph intraprocedural cfg runtime fuzzer aggregate distance compute distance meta heuristic DGF employ minimize distance simulated anneal implement schedule schedule specifies spent fuzzing greybox fuzzing technique analysis compile minimize overhead runtime DGF cast reachability target location optimization exist whitebox fuzzing approach cast reachability iterative constraint satisfaction demonstrate greybox fuzzing outperforms symbolic execution effectiveness DGF expose vulnerability efficiency DGF target integration technique performs technique individually implement DGF popular successful greybox fuzzer afl greybox fuzzer aflgo patch aflgo katch symbolic execution katch benchmark aflgo discovers bug CVEs katch expose aflgo target katch apply technique target individually fuzzing approach complement crash reproduction aflgo BugRedux symbolic execution BugRedux benchmark aflgo reproduce crash BugRedux stack trace available demonstrate anneal schedule effective aflgo effectively aflgo undirected greybox fuzzer afl aflgo implement indeed aflgo target faster afl libpng faster binutils greybox fuzzing effectively efficiently complement symbolic execution fuzzing demonstrate greybox fuzzing useful domain patch crash reproduction integrate aflgo OSS fuzz continuous platform security critical library source project recently announce google integration aflgo discover previously undiscovered bug security critical library serious vulnerability assign CVEs discovery directly attribute aflgo directedness aflgo useful patch effectively expose vulnerability recently introduce incomplete fix previously report vulnerability contribution article integration greybox fuzzing simulated anneal formal distance inter procedural account multiple target effectively pre compute instrumentation efficiently derive runtime implementation greybox fuzzing aflgo publicly available http github com aflgo aflgo integration aflgo patch fully automate toolchain OSS fuzz publicly available http github com aflgo fuzz evaluation efficacy utility greybox fuzzing patch crash reproduction session fuzzing finer faster CCS october november dallas TX usa remainder article structure heartbleed explain pertinent feature greybox fuzzing discus formal distance integration greybox fuzzing simulated anneal implementation experimental apply aflgo patch katch discus integration aflgo OSS fuzz towards recent apply aflgo crash reproduction baseline undirected greybox fuzzer afl BugRedux elicits threat validity survey related conclusion  heartbleed vulnerability motivate discus approach fuzzing traditionally fuzzing symbolic execution katch patch symbolic execution klee aflgo implementation greybox fuzzing heartbleed patch heartbleed cve vulnerability compromise privacy integrity data via  secure protocol ssl TLS excerpt commit introduce heartbleed interestingly heartbleed exploit without mitm suppose bob secret attacker mallory bob message payload mallory incoming message message bob payload outgo message response finally bob payload byte incoming message outgo message payload byte allocate bob reveals secret heartbleed detect introduce openssl library widespread distribution vulnerability april quarter machine vulnerable heartbleed introduce eve commit implement feature heartbeat fuzzer statement target location discover vulnerability introduce prevent widespread distribution openssl consists almost code commit introduce vulnerability code arguably fuzzing openssl undirected manner really recent error prone waste resource fuzzer efficiently patch symbolic execution katch  matrix cie  patch katch automate patch readily available katch motivate http git openssl org  commit cfg sketch katch along execute fuzzing heartbleed introduce source code commit katch patch symbolic execution implement klee openssl compile llvm bytecode katch motivate katch identifies reachable target location already exist regression suite target katch executes greedy katch identifies regression suite closest instance exist execute incorrect message negate target katch program analysis identify execute closest  construct constraint conjunction executes identify specific input byte modify negate input byte encode message katch negates derive constraint satisfiability modulo theory smt solver compute specific identify input byte indeed negate incoming message execute vulnerability challenge symbolic execution whitebox fuzzing effective extremely expensive due program analysis katch generate input katch cannot detect heartbleed within distance compute runtime explore incomplete interpreter bytecode constraint solver feature float arithmetic greedy stuck local global optimum target due sequential katch opportunity inform target progress target anew target katch klee actually execute binary interprets bytecode setup corpus   corpus code hence katch negate vulnerability session fuzzing finer faster CCS october november dallas TX usa cve fuzzer  median  aflgo katch exposure  aflgo versus katch opportunity  extremely efficient greybox fuzzer aflgo generates executes input per expose heartbleed aflgo implement novel greybox fuzzing technique virtually program analysis runtime lightweight program analysis compile instrumentation aflgo implement global simulated anneal allows greybox fuzzer approach global optimum target eventually approach optimum input technique  aflgo implement parallel target simultaneously closer target target executes aflgo ass fitness aflgo openssl additional compiler pas clang classical afl aflgo instrumentation compile binary afl instrumentation informs fuzzer increase code coverage aflgo instrumentation informs fuzzer distance execute target novel distance computation substantially intricate katch account target simultaneously fully establish compile reduces overhead runtime aflgo fuzz openssl simulated anneal aflgo enters exploration phase afl exploration phase aflgo randomly mutates generate input input increase code coverage fuzzed otherwise discard generate fuzzed continuous loop aflgo suppose infeasible cannot input roughly input generate rationale exploration explore longer closer target likely actually aflgo enters exploitation specify user exploitation timeout exploitation phase aflgo generates substantially input closer target essentially waste precious fuzzing away suppose aflgo generate exploitation phase spent fuzzing closest target aflgo slowly transition exploration phase exploitation phase accord anneal function implement schedule average aflgo unlike katch aflgo random generation technique statistical technique develop greybox fuzzing DGF vulnerability detection technique focus user define target location DGF retains efficiency greybox fuzzing conduct program analysis runtime program analysis conduct compile DGF easily parallelizable compute assign DGF allows specify multiple target location define inter procedural distance target location fully establish instrumentation efficiently compute runtime inter procedural program analysis actually intra procedural graph CG intra procedural graph CFGs yield quadratic saving inter procedural analysis CG CFGs readily available llvm compiler infrastructure novel distance define novel schedule integrates popular anneal function exponential schedule anneal schedule gradually assigns closer target location reduce away per distance greybox fuzzing explain greybox fuzzing distance instrumentation  schedule implement realize greybox fuzzing fuzzing coin random investigate reliability unix distinguish program analysis fuzzing program execute fuzzing symbolic execution program analysis constraint greybox fuzzing lightweight instrumentation glean program structure without program analysis greybox fuzzing efficient whitebox fuzzing information internal structure effective blackbox fuzzing coverage greybox fuzzers CGF afl libfuzzer lightweight instrumentation gain coverage information instance afl instrumentation capture transition along coarse CGF coverage information generate input retain fuzzing input fuzz extend instrumentation account distance chosen target location distance computation shortest target node graph intra procedural graph readily available llvm shortest analysis implement dijkstra algorithm algorithm algorithmic sketch CGF fuzzer input chooses input continuous loop timeout fuzzing aborted selection implement  instance afl essentially chooses circular queue http llvm org doc html session fuzzing finer faster CCS october november dallas TX usa input CGF determines input generate fuzzing implement  anneal schedule implement fuzzer generates input randomly mutate accord define mutation operator implement mutate input afl flip arithmetic boundary deletion insertion strategy generate input generate input circular queue generate input crash program crash input crash input marked unique crash algorithm greybox fuzzing input input   modification mutate input crash  timeout abort signal output crash input  coverage greybox fuzzing model markov chain specific program transition probability pij probability fuzzing generates author CGF frequency significantly others density stationary distribution formally describes likelihood fuzzer iteration  developed technique  fuzzer towards frequency adjust fuzz generate density neighborhood implement aflfast fork afl fuzz generate schedule local markov chain unlike global simulated anneal distance input multiple target location compute distance across function assign node graph CG function intraprocedural graph CFGs target  target  swiftly identify source code reference http github com  aflfast arithmetic harmonic difference node distance define arithmetic versus harmonic node distance target marked function target distance determines distance function target function graph function distance determines distance function graph formally define function distance along shortest function graph CG define function target distance function target function harmonic function distance reachable target function undefined otherwise target function reachable CG harmonic allows distinguish node closer target another node equi target contrast arithmetic assign node target distance target distance determines distance function addition multiple function target distance function intuitively assign target distance average distance function chain towards target location moreover assign target distance chain shorter BB distance determines distance cfg formally define BB distance along shortest   function function  define target distance target min otherwise constant magnifies function distance define none target exist cfg exist BBs transitively function target BB session fuzzing finer faster CCS october november dallas TX usa finally ingredient define normalize distance distance target location execution trace trace contains define distance fuzzer  maintains fuzz define normalize distance difference distance minimum distance previous difference max min distance     min  max normalize distance program analysis distance computation instrumentation performance overhead minimal runtime graph intra procedural graph extract achieve compiler binary available code translation target location function target distance compute instrumentation normalize distance compute runtime pre compute distance anneal schedule develop novel anneal schedule APS  greybox fuzzing markov chain efficiently navigate schedule opportunity employ markov chain monte carlo MCMC optimization technique simulated anneal anneal schedule assigns closer target away difference increase decrease passage simulated anneal SA inspire anneal  technique involve heating increase crystal reduce defect similarly SA algorithm converges asymptotically towards global optimal maximum target location SA markov chain monte carlo MCMC approximate global optimum discrete within acceptable budget feature worth definition normalize distance arithmetic normalize target distance min max target distance probability density around significant positive kurtosis substantially reduce definition normalize distance reduces kurtosis nicely distribution zero http llvm org doc html dot  graph dot file instance  http github com    explore schedule implement afl version distance min min min min impact distance min SA random accepts sometimes accept parameter SA algorithm regulates acceptance decrease accord schedule SA algorithm accept probability towards degenerate classical gradient descent algorithm accept schedule rate convergence function initial  cycle local global popular exponential schedule  constant typically anneal schedule automate vulnerability detection usually limited budget hence specify anneal exploitation sufficient exploration intuitively simulated anneal comparable classical gradient descent algorithm greedy schedule exploitation  adjustment schedule straightforward compute    simplify define anneal schedule APS exponential schedule target location APS assigns   behavior APS illustrate normalize distance respectively moreover APS assigns distance distance target assign progress session fuzzing finer faster CCS october november dallas TX usa min APS factor distance min APS factor distance anneal factor originally assign afl schedule maximal distance target minimal distance target axis practical integration afl already implement schedule integrate APS exist schedule assigns execution input ofs ancestor integrate afl pre exist schedule  schedule define integrate  schedule  afl normally assigns target compute integrate APS  anneal factor increase reduction assign afl schedule behavior anneal factor extremal normalize distance extremal normalize distance maximal factor assign afl assign  however min assign equation lim  target location assign   assign extremal normalize distance minimal factor maximal distance however equation lim  target location assign thirty  assign version afl implement explore schedule scalability greybox fuzzing central benefit greybox fuzzing efficiency absence program analysis generates executes input greybox fuzzing DGF program analysis specifically graph DGF distance inter procedural program analysis actually intra procedural substantial saving inter procedural analysis inter procedural analysis instantiation aflgo construct inter procedural graph  site function function already  available compute target distance within  average shortest target due node  aflgo completely skip  computation compute function target distance graph computes target distance site within intra procedural graph  function target distance approximation remainder target core BB target distance relies  shortest algorithm complexity node suppose intra procedural CFGs average node complexity shortest distance computation  contrast complexity shortest distance computation graph intra procedural graph yield saving quadratic function moreover DGF analysis compile instrumentation hence DGF retains efficiency runtime compile target distance compute function extension classical afl trampoline target distance program trampoline instruction implement instrumentation instrumentation framework llvm handle static analysis program efficiently runtime aflgo scalable afl program firefox php acrobat reader aflgo trampoline aggregate  target distance execute contains instruction afl trampoline anneal schedule implement fuzzer aflgo cannot afl summary program analysis instrumentation maintain efficiency runtime instrumentation program analysis compute inter procedural via intraprocedural analysis saving reduce instrumentation session fuzzing finer faster CCS october november dallas TX usa aflgo graph extractor program source code graph graph target aflgo distance calculator BB distance aflgo  aflgo fuzzer binary input error input architecture graph extractor generates graph source code distance calculator computes target distance   binary informs fuzzer coverage distance evaluation setup evaluate efficacy utility greybox fuzzing conduct implement technique exist undirected greybox fuzzer afl aflgo apply aflgo distinct domain patch crash reproduction integrate OSS fuzz implementation aflgo implement component graph extractor distance calculator  fuzzer integration OSS fuzz demonstrate component  integrate environment ninja overall architecture explain component implement aflgo graph extractor GE generates graph CG relevant graph CFGs CG node identify function signature cfg node identify source file statement correspond GE implement extension afl llvm pas activate compiler afl clang compiler environment variable CC afl clang project built aflgo distance calculator DC graph intra procedural compute inter procedural distance BB per DC implement python script networkx package parse graph shortest distance computation accord  algorithm DC generates BB distance file contains target distance BB aflgo  BB distance file BB target binary specifically BB determines respective BB target distance injects extend trampoline trampoline assembly code execute instruction identify byte memory architecture extension additional byte memory byte accumulate distance byte BBs BB aflgo  assembly code load accumulate distance target distance BB load increment BBs memory instrumentation implement extension afl llvm pas compiler afl clang compiler flag reference BB distance file project built  aflgo fuzzer implement afl version already integrates aflfast explore schedule fuzz binary accord  schedule additional byte memory inform fuzzer distance distance compute accumulate BB distance BBs infrastructure execute machine intel xeon cpu processor logical core  access 4GB memory ubuntu operating utilized exactly core workload  retain core experimental comparison aflgo baseline afl katch BugRedux fuzzers corpus corpus available aflgo empty file corpus echo file experimental comparison fuzzers budget computational resource target location application patch testing application greybox fuzzing patch implementation aflgo patch katch suppose security critical library  fuzzed continuously vulnerability library feature profitable focus fuzzing campaign specifically recent introduce vulnerability patch katch whitebox fuzzer symbolic execution klee session fuzzing finer faster CCS october november dallas TX usa project diff  diff cmp program loc chosen commits commits nov gnu diffutils project  cxxfilt   objdump  readelf strip program loc kloc library chosen commits commits apr aug gnu binutils description katch benchmark greybox fuzzer aflgo katch patch coverage vulnerability detection experimental parameter infrastructure author katch however exclude  capability execute arbitrary command delete arbitrary file aflgo actually executes binary katch merely interprets llvm bytecode descriptive statistic remain virtual infrastructure request author katch reuse script infrastructure target location analyze corpus  timeout min per target diffutils min per target binutils conservatively virtual core 3GB memory available aflgo core 6GB available katch however comparison grain empirical evaluation implementation concept concept improve efficiency extend engineering effort unrelated concept conscious effort explain phenomenon distinguish conceptual technical origin moreover encourage reader perspective security researcher actually handle establish exists vulnerability patch coverage analyze patch coverage achieve katch aflgo previously uncovered respective patch patch coverage previously uncovered target katch aflgo stipulate budget respectively uncovered BBs katch aflgo binutils diffutils sum katch aflgo venn diagram BBs katch aflgo individually aflgo previously uncovered katch aflgo previously uncovered katch already exist regression suite finally previously uncovered katch aflgo respectively previously uncovered target klee substantial aflgo actually outperforms katch patch coverage benchmark publish katch analyze remain target due limitation prototype katch instance accessible via  function pointer analyze graph controlflow graph symbolic execution greybox fuzzing  program complex input structure binutils target execute file contains specific architecture mips individually define structure technique benefit quality regression suite model fuzzing approach understand researcher benefit approach investigate target technique aflgo target katch cannot katch target aflgo cannot attribute reasonably intersection individual strength technique symbolic execution constraint compartment otherwise access greybox fuzzer quickly explore towards target without stuck neighborhood aflgo katch complement target katch aflgo individually session fuzzing finer faster CCS october november dallas TX usa future planning integrate symbolic  whitebox fuzzing greybox fuzzing achieve fuzzing technique effective efficient pre specify target location integration superior technique individually integrate fuzzing technique leverage symbolic execution  combine strength mitigate  weakness driller undirected fuzzer integrates afl greybox fuzzer klee whitebox fuzzer vulnerability detection previously unreported bug aflgo addition bug report katch katch aflgo report report report CVEs binutils diffutils sum aflgo previously unreported bug addition bug katch despite thorough patch katch aflgo expose bug exist recent version bug comprise mostly buffer overflow null pointer  error katch klee normally handle previously unreported bug exist  library assign   allows manipulate file compile variety instruction architecture  widely assembler  binary analysis greybox fuzzer significantly outperforms stateof vulnerability detection aflgo effective patch investigate discovery bug related target location twelve bug discover consequence directedness aflgo specifically bug stack trace target location bug vicinity target location katch conduct commits binutils diffutils feb bug report countless bug report report bug exist recent version binutils diffutils however aflgo expose bug experimental fix bug aflgo report author katch report execute crash input aflgo patch error crash input reduces patch correspond bug marked detect aflgo sought confirmation stack trace bug report  bug report http  doc project katch preview html bug discover aflgo fix within report bug report cve IDs discovery aflgo report ID cve ID report ID cve ID binutils cve cve cve cve cve cve cve diffutils http gnu org archive html bug diffutils msg html attribute advantage aflgo katch efficiency greybox fuzzing aflgo program analysis runtime hence generates  input katch another source  runtime katch constraint error detection mechanism runtime checker crash program detects error execution instance runtime checker AddressSanitizer  input illegal memory writes reading beyond memory allocate buffer memory already  signal  program normally crash fuzzer signal runtime checker report error generate input contrast katch symbolically executes interprets program llvm intermediate representation constraint error exists symbolic execution whitebox fuzzers integrate error detection directly constraint embed restricts detection error encode constraint violation error detection impaired incompleteness environment model underlies symbolic interpreter instance bug diffutils null pointer dereference regular expression component glibc however katch implement simplify model glibc klee  hence possibly bug diffutils contrast aflgo greybox fuzzer executes compile binary concretely report crash input application continuous fuzzing practical utility greybox fuzzing integrate aflgo google OSS fuzz release dec OSS fuzz continuous platform security critical library source project fully automate fashion regular interval  register project fuzz bug report automatically submit project maintainer bug patch boarding project maintainer script implement driver OSS fuzz source project integrate google machine OSS fuzz churn trillion input per discover bug security critical vulnerability however OSS fuzz fuzz recent version fuzzers afl libfuzzer towards recent introduce vulnerability http  org bugzilla bug cgi report session fuzzing finer faster CCS october november dallas TX usa project aflgo discovery project description report CVEs libxml xml parser req assign  swf parser req assign   parser req assign libc abi llvm  none request libav video processor req assign expat xml parser none request  google fork openssl none request sum CVEs assign integrate aflgo google fully automate fuzzing platform OSS fuzz discover distinct bug  source project vulnerability project remote exploit internet ass bug security critical vulnerability exploit denial service attack potentially remote arbitrary code execution attack aflgo successful patch OSS fuzz discover vulnerability fuzzed project investigate aflgo discovery directedness contribute towards expose bug focus specifically discovery libxml  libxml libxml widely xml parser library core component php fuzzing recent commits libxml aflgo discover distinct crash buffer overflow reproduce dom validator recent version php invalid writes potentially exploit arbitrary code execution submit bug report patch publish security advisory CVEs assign cve identify  cve incomplete fix incomplete bug fix patch attempt fix previously report bug bug reproduce bug fix input bug report input expose bug bug fix parser non   parser bug fix html parser  xml parser  greybox fuzzer towards statement previous fix bug aflgo effectively generate crash input expose bug suppose fix  cve localize vicinity commit commit  developer patch null pointer dereference bound  valid function function   however function parser execute  previously unreported overflow expose function content function ret  ctxt doc elem elem xml node attr elem attr null  doc attr ret  ctxt elem attr null  char attr attr elem  null elem null ret  ctxt doc elem null href ret  ctxt doc elem elem prefix href function cve bold function commit  via grey background aflgo discover previously report vulnerability suppose fix furthermore aflgo discover vulnerability error prone software component patch   widely library reading generate  flash file swf bundle php version available extension fuzzing recent commits  aflgo discover incomplete fix bug recently discover another security researcher cve patch maintainer security advisory update  however recent aflgo generate another crash input exactly stack trace patch incomplete submit bug report detailed analysis patch review accepted cve assign identify vulnerability error AddressSanitizer heap buffer overflow  thread   rgba parser    parser    parser    parser    parser    parser     previously report bug fix incompletely aflgo reproduce stack trace recent fix version session fuzzing finer faster CCS october november dallas TX usa application crash reproduction greybox fuzzing relevant crash reproduction commercial software automate bug reporting facility  client VLC crash due buffer overflow libpng user report bug developer button automate bug report important ensure quality service  buffer overflow vulnerability exploit gain access user machine however concerned user privacy  organization file crash video player confidential information instead software stack trace environmental parameter remains development actually reproduce potentially security critical vulnerability evaluate greybox fuzzing indeed aflgo afl efficiency evaluate greybox fuzzing apply crash reproduction outperforms crash reproduction aflgo BugRedux effectiveness BugRedux symbolic execution whitebox fuzzer klee sequence target location stack trace program crash generates input target location sequence objective crash program DGF really greybox fuzzer aflgo ass quickly development automatically reproduce crash specify stack trace target location average reproduce crash undirected greybox fuzzer afl aflgo baseline afl vulnerability binutils report context earlier however mitigate potential experimenter bias chose reproducible recent vulnerability report libpng binutils collection binary analysis almost code loc libpng image library almost loc widely source project vulnerability identify cve ID national vulnerability database timeout exploitation fuzzing efficiency performance gain exposure  fuzzing campaign input generate expose error error expose execute fail input fix version version fix error input fix version witness correspond error expose error factor improvement factor performance gain  afl program cve ID vulnerability libpng cve buffer overflow libpng cve zero libpng cve buffer overflow binutils cve invalid binutils cve invalid binutils cve invalid binutils cve access violation binutils cve stack corruption binutils cve access violation binutils cve access violation crash reproduction  aflgo factor aflgo outperforms afl vargha delaney statistic Aˆ non parametric recommend standard evaluation randomize algorithm performance  aflgo afl Aˆ statistic probability aflgo yield afl mann whitney statistical significance performance gain significant Aˆ bold performance aflgo afl highlight statistically significant Aˆ bold reproduce vulnerability within receives  cve ID  factor Aˆ libpng aflgo afl aflgo afl aflgo afl binutils aflgo afl aflgo afl aflgo afl aflgo afl aflgo afl aflgo afl aflgo afl Aˆ median Aˆ aflgo session fuzzing finer faster CCS october november dallas TX usa libpng reproduce CVEs libpng aflgo faster afl detail generate crash input stack trace CVEs libpng cve aflgo reproduce vulnerability afl almost cve aflgo spends merely afl remain cve aflgo reproduce crash afl binutils reproduce CVEs binutils aflgo usually faster afl CVEs expose afl aflgo reproduce vulnerability difference statistically significant CVEs usually reproduce aflgo gain speedup afl cve aflgo exhibit performance afl however cve expose external impact negligible aflgo extension afl effectively unlike afl successfully towards target location moreover aflgo effective crash reproduction DGF outperform symbolic execution aflgo BugRedux ofthe crash reproduction dataset experimental setup configuration timeouts BugRedux whitebox fuzzer klee input sequence program statement generates output sequence crash program BugRedux sequence crash however earlier stack trace available already return execution hence comparison stack trace target despite request dataset subset   obtain stack trace specify target location specifically crash  reproduce architecture crash  overflow stack stack trace overridden remain bug reproduce BugRedux BugRedux aflgo comment sed fault file input sed fault grep gzip fault gzip fault   aflgo substantially effective BugRedux benchmark crash aflgo cannot reproduce due engineering aflgo incapable generate file aflgo reproduces crash min remain gzip budget stack trace aflgo reproduce crash BugRedux benchmark  validity concern external validity notably generality however conduct variety source project comprises software security critical vulnerability establish indeed CVEs issue program CVEs issue program comparison whitebox fuzzer katch BugRedux differently however katch BugRedux fuzzers klee klee widely symbolic execution basis whitebox fuzzers katch implement author klee moreover comparison katch BugRedux benchmark author effectiveness concern internal validity minimizes systematic error threat internal validity fuzzer selection initial however corpus readily available exist regression suite binutils katch available corpus OSS fuzz otherwise corpus afl classically important file format moreover fuzzers corpus fuzzers gain dis advantage implementation technique aflgo faithfully implement technique however comparison afl aflgo effectively concern construct validity purport comparison grain empirical evaluation implementation concept concept improve efficiency extend fuzzer engineering effort unrelated concept however conscious effort explain phenomenon distinguish conceptual technical origin moreover encourage reader perspective security researcher actually handle establish exists vulnerability session fuzzing finer faster CCS october november dallas TX usa related survey exist approach fuzzing typical application survey  fuzzing objective generate input achieve maximum code coverage finally discus taint fuzzers objective identify fuzz specific input byte achieve specific program location fuzzing knowledge mostly implement symbolic execution klee symbolic execution DSE employ machinery symbolic execution program analysis constraint systematically effectively explore feasible feasible identify actually target witness generate posteriori correspond constraint DSE employ dangerous program location critical patch previously uncovered program increase coverage validate static analysis report mutation reproduce failure contrast DSE greybox fuzzing DGF machinery symbolic execution program analysis constraint lightweight program analysis DGF implement completely conduct compile demonstrate DGF outperform DWF technique effective technique individually coverage fuzzing seek increase code coverage corpus another corpus program discover vulnerability observable coverage greybox fuzzers lightweight instrumentation coverage information runtime boost technique aflfast focus fuzzing campaign  per vuzzer assigns error handle code prioritize likely reveal vulnerability genetic algorithm evolve fix corpus input grammar penetrate deeper controlflow logic coverage whitebox fuzzers  increase coverage instance klee strategy  closer uncovered combination integration approach explore contrast greybox fuzzing coverage fuzzers program target achieve maximum code coverage however stress unrelated component waste resource objective really specific target location taint whitebox fuzzing leverage classical taint analysis identify input fuzzed priority increase probability generate  vulnerability target location zero denominator operator drastically reduce instance  portion file  argument execute critical proportion file fuzzed coverage fuzzer vuzzer taint code otherwise identify pertinent conditional statement vuzzer taint achieve outcome increase likelihood unlike DSE taint whitebox fuzzing machinery symbolic execution constraint however user input already target location contrast aflgo empty input evident future DGF benefit taint approach implement vuzzer runtime analysis identify conditional statement negate decrease distance taint increase probability actually negate statement fuzzing however intuition contribute factor greybox fuzzing become vulnerability detection efficiency ability generate execute input per maintain philosophy DGF conduct analysis compile retain efficiency runtime conclusion coverage greybox fuzzers afl attempt program without incur overhead program analysis symbolic execution whitebox fuzzers klee katch symbolic program analysis constraint accurately generation symbolic execution technique choice implement fuzzer target simply constraint symbolic execution analytical mathematically rigorous framework explore specifically objective target location contrast greybox fuzzing inherently random approach directedness fundamentally greybox fuzzer merely applies random mutation random location random file attempt directedness greybox fuzzing retain efficiency greybox fuzzing runtime program analysis  simulated anneal practical global meta heuristic generation unlike symbolic execution greybox fuzzing incur runtime performance overhead due program analysis encode execute instruction constraint greybox fuzzer aflgo implement code easy integration OSS fuzz expose aflgo  program library unlike symbolic execution greybox fuzzer inherently random cannot systematically steer towards target hence astonish aflgo performs exist symbolic execution whitebox fuzzers BugRedux katch effectiveness aflgo detects vulnerability efficiency aflgo target session fuzzing finer faster CCS october november dallas TX usa greybox fuzzing myriad towards problematic patch towards critical dangerous location towards function  report vulnerability reproduce application greybox fuzzing patch location patch code crash reproduction failure stack trace reproduce discus integration fuzzer continuous fuzzing platform OSS fuzz future planning integrate symbolic  whitebox fuzzing greybox fuzzing integrate fuzzing technique leverage symbolic execution optimization combine strength mitigate  weakness evidence effective patch purpose tease potentially vulnerable program planning evaluate effectiveness aflgo integrate static analysis dangerous location security critical component focus fuzzing effort likely vulnerability aflgo integration OSS fuzz reader execute command