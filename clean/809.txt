blockchain interoperability allows transition across blockchain network critical functionality facilitate blockchain adoption exist interoperability protocol mostly focus atomic token exchange blockchains however blockchains upgraded passive distribute ledger programmable machine thanks smart contract scope blockchain interoperability beyond token exchange HyperService platform delivers interoperability programmability across heterogeneous blockchains HyperService innovative developer program framework allows developer chain application unified program model secure blockchain cryptography protocol provably realizes application blockchains implement prototype HyperService approximately code demonstrate practicality HyperService imposes reasonable latency execution chain application HyperService platform scalable continuously incorporate production blockchains CCS CONCEPTS security privacy distribute security security protocol keywords blockchain interoperability smart contract chain dapps introduction witness rapid growth flagship blockchain application payment bitcoin smart contract platform ethereum considerable effort improve performance security individual blockchains efficient consensus algorithm improve transaction rate sharding payment channel enhance privacy smart contract reduce vulnerability via program analysis blockchain ecosystem distinct blockchains roughly category public private consortium blockchains  isolated blockchains interoperability blockchain interoperability enables secure transition across blockchains invaluable decentralize web exist interoperability proposal mostly around atomic token exchange blockchains aim eliminate requirement centralize exchange however smart contract execute blockchains transform blockchains append distribute ledger programmable machine argue token exchange scope blockchain interoperability instead blockchain interoperability programmability developer decentralize application executable across disconnect machine recognize category challenge simultaneously deliver programmability interoperability program model chain decentralize application dapps unclear developer perspective desirable chain dapps preserve machine program abstraction chain contract however virtualization challenge abstract away heterogeneity smart contract account blockchains interaction operation contract account uniformly specify chain dapps exist token exchange orient interoperability protocol atomic chain swap  generic realize chain dapps executables dapps complex operation token transfer instance dapp invokes smart contract parameter obtain smart contract session blockchain CCS november london united kingdom phase hsl program compilation client VES hsl program executable graph insurance smart contract  service fee revert effective fund enforce accountability phase chain execution phase insurance client VES channel BN BN BN network status blockchain NSB action PoA action overall architecture HyperService zoom PoA dapp client VESes blockchain network BN BN BN universal model BN BN BN hsl program hsl program hsl program hsl executables chain execution reachability client VES security attestation security attestation NSB mutual BN architecture HyperService deployed blockchains complexity operation beyond mere token transfer addition executables chain dapps transaction blockchains correctness dapps transaction execute precondition deadline constraint another technical challenge securely coordinate transaction enforce dapp correctness fully decentralize manner zero trust assumption challenge propose HyperService platform building execute dapps across heterogeneous blockchains HyperService innovative developer program framework chain dapps blockchain cryptography protocol securely realize dapps blockchains within program framework propose unified model USM blockchain neutral extensible model chain dapps hsl program chain dapps USM program model dapps hsl compile HyperService executables execute underlie cryptography protocol UIP universal inter blockchain protocol cryptography protocol handle complexity chain execution UIP generic operating blockchain public transaction ledger secure execution dapps verifiable correctness abort due security violation misbehave accountable financially atomic meaning involve almost zero financial loss regardless execution status dapps UIP fully trust assume trust entity contribution knowledge HyperService platform simultaneously interoperability programmability across heterogeneous blockchains specifically contribution propose program framework develop chain dapps framework greatly facilitates dapp development virtualization layer underlie heterogeneous blockchains yield unified model program dapps framework developer easily chain dapps without implement cryptography propose UIP generic blockchain interoperability protocol scope beyond chain token exchange UIP capable securely realize complex chain operation involve smart contract deployed heterogeneous blockchains express security UIP via ideal functionality FUIP rigorously UIP realizes FUIP universal composability UC framework implement prototype HyperService approximately code evaluate prototype category chain dapps toend dapp execution latency impose HyperService HyperService platform sufficient capacity continuously incorporate production blockchains  overview architecture depict architecturally HyperService consists component dapp client gateway dapps interact HyperService platform HyperService intentionally client lightweight mobile web application interact HyperService verifiable execution VESes conceptually blockchain driver compile dapp program dapp client blockchain executable transaction runtime executables HyperService VESes dapp client employ underlie UIP cryptography protocol securely execute transaction across blockchains UIP building network status blockchain NSB insurance smart contract  NSB conceptually blockchain blockchains HyperService objective unified dapps execution status  arbitrate correctness violation dapp execution trust manner exception  financially revert execute transaction guarantee financial atomicity misbehave entity accountable universal model blockchain smart contract dapps execute blockchain perceive machine desire preserve abstraction developer chain dapps towards propose unified model USM blockchain neutral extensible model transition across blockchains essential defines chain dapps USM realizes virtualization layer unify underlie heterogeneous blockchains virtualization blockchains regardless implementation consensus mechanism smart contract execution session blockchain CCS november london united kingdom entity operation dependency USM entity attribute operation attribute dependency account address balance payment exchange rate precondition contract address variable interface source invocation interface parameter const contract SV invoker deadline environment program abstract public variable function developer program dapps specify desire operation along relative operation local machine formally USM define entity operation perform entity constraint define dependency operation entity abstract blockchains entity conceptually local regardless blockchains obtain entity entity attribute version USM defines concrete entity account contract tabulate discus extension USM specifically account entity associate uniquely identifiable address balance contract entity besides address associate public attribute variable callable interface source code deployed blockchains entity attribute crucial enforce security correctness dapps compilation operation USM defines computation perform entity operation USM payment operation describes balance update account entity exchange rate invocation operation describes execution specify interface contract entity compatible parameter obtain contract entity variable although operation conceptually local operation eventually compile transaction blockchains consensus synchronize honor dependency distribute compute USM therefore defines constraint specify dependency operation currently USM dependency precondition deadline operation proceed precondition operation operation within bound interval dependency satisfied precondition deadline desirable program abstraction dapps precondition enable developer organize operation acyclic graph upstream node persistent downstream node deadline crucial ensure progress dapp execution HyperService program demonstrate usage USM develop hsl program chain dapps USM introductory hsl program financial derivative commonly cite blockchain application financial derivative rely authentic data oracle input instance standard option contract import source code contract import broker sol option option entity definition attribute contract entity implicit source code account  account  account  account  account  account  contract  broker  contract  option contract  option  operation definition invocation  payment    invocation   invocation   dependency definition deadline deadline default deadline min chain option dapp hsl genuine strike price exist oracle smart contract blockchain interact client smart contract dependable unbiased oracle simultaneously accessible multiple blockchains cannot simply deploy oracle smart contract individual blockchain synchronize execution oracle contract blockchain interoperability chicken limitation prevents dapps business across multiple blockchains instance option contract deployed ethereum investor option ether cryptocurrencies introductory conceptually elegant developer perspective universal option dapp allows investor natively option cryptocurrencies prefer code snippet hsl implementation refer dapp dapp option contract deployed blockchains   rely broker contract  genuine strike price detailed hsl grammar grammar hsl program compilation core HyperService program framework hsl compiler compiler performs task enforce security correctness hsl program compile hsl program blockchain executable transaction differentiation HyperService allows dapps natively define interaction operation smart contract deployed heterogeneous blockchains smart contract hsl multi analyze source code session blockchain CCS november london united kingdom smart contract extract information public variable function convert unified define hsl enables effective correctness hsl program instance ensures parameter contract invocation operation compatible verifiable argument extract remote contract invoke contract hsl program syntax correctness compiler generate executable program executable structure transaction dependency graph contains information compute blockchain executable transaction metadata transaction execution precondition deadline transaction honor dependency constraint specify hsl program HyperService verifiable execution VESes actual entity hsl compiler therefore resume aforementioned compiler responsibility VESes blockchain driver bridge program framework underlie blockchains VES distribute trust service compile execute hsl program dapp client VESes trust action dapp execution verifiable VES defines service model reachability blockchains VES service fee execution insurance compensation dapps VES execution proven incorrect dapps autonomy VESes satisfy requirement vision VESes besides hsl compiler VESes participate actual execution hsl executables universal inter blockchain protocol UIP correctly execute dapp transaction executable blockchains execution meanwhile precondition deadline honor although execute procedure conceptually thanks hsl abstraction challenge enforce execution fully  manner trust authority coordinate execution blockchains mutual trust VESes dapp client establish address challenge HyperService UIP cryptography protocol VESes dapp client securely execute hsl executables blockchains UIP blockchain public ledger impose additional requirement consensus protocol contract execution environment UIP security guarantee execute dapps dapps correctly execute correctness publicly verifiable stakeholder otherwise UIP misbehave accountable financially reverts commit transaction achieve financial atomicity UIP innovative network status blockchain NSB insurance smart contract isc NSB blockchain HyperService objective unified status dapp execution NSB consolidates finalize transaction underlie blockchains merkle unified representation transaction status verifiable merkle proof NSB proof action  dapp client VESes construct proof certify action chain execution isc code arbitrator transaction status proof construct NSB input correctness violation dapp execution meanwhile action proof accountable parity exception define security UIP via ideal functionality rigorously UIP realizes ideal functionality UC framework assumption threat model assume cryptographic primitive consensus protocol underlie blockchains secure concept transaction finality nakamoto consensus blockchains typically permissionless achieve assume probability blockchain reorganization exponentially append prefix byzantine tolerance blockchains usually permissioned finality guaranteed signature quorum permissioned voting node blockchain NSB propose definition transaction finality blockchain accepted user dapps HyperService operation trust model permissionless permissioned consensus efficiency latency transaction become blockchain provably impact security guarantee UIP protocol assume underlie blockchain public ledger allows external examine transaction finality public smart contract correctness UIP relies correctness NSB implementation NSB permissioned blockchain information NSB becomes legitimate quorum consensus node maintain NSB approve information assume consensus node NSB honest quorum threshold majority NSB node become node underlie blockchains byzantine adversary interferes UIP protocol arbitrarily delay reorder network message indefinitely compromise protocol participant protocol participant compromise adversary security UIP guaranteed programming framework HyperService program framework around hsl compiler depicts compilation workflow hsl compiler  extract entity operation dependency hsl program extract public variable smart contract deployed blockchains unified ensure smart contract abstract interoperable entity define hsl program afterwards compiler performs semantic validation session blockchain CCS november london united kingdom hsl unified entity operation dependency dependency validation operation validation entity validation hsl hsl program multi hsl validation compilation contract solidity contract vyper contract transaction compilation transaction dependency graph workflow hsl compilation entity operation dependency ensure security correctness hsl program finally compiler executable hsl program structure transaction dependency graph detail component unified USM unified virtualization layer developer define invocation operation hsl program without handle heterogeneity contract entity towards program framework internally defines unified variable contract entity abstract unified hsl program enables hsl compiler ensure argument specify invocation operation compatible specifically unified defines elementary data commonly smart contract program mapped unified compilation solidity fully fix vyper  vyper fix declare via  solidity dynamically declare multi lang recognizes difference performs conversion numeric literal integer numeric  solidity vyper boolean struct simply correspond unified finally solidity vyper contract address mapped address contract address  mapped address mapping specific unified tabulate unified horizontally scalable additional typed program complex data contract function parameter fully production complex hsl future unified mapping solidity vyper solidity vyper boolean bool bool bool numeric int uint int uint int uint  float address address address array array byte array byte array slice mapping struct struct struct struct function function enum def func contract contract file hsl import entity def def dep def contract import import import file file file entity definition entity def entity entity chain constructor entity chain chain constructor contract address contract account entity account contract operation definition def payment invocation payment payment coin  exchange coin num     exchange coin coin invocation invocation  recv arg arg int float var var  prop dependency definition dep def temp deps del deps temp deps temp dep temp dep temp dep del deps del dep del dep del dep deadline del spec del spec int default int grammar representative  grammar hsl hsl construct hsl coherent USM developer straightforwardly specify entity operation dependency hsl program additional construct import import source code contract entity grammar representative hsl omit terminal address contract import developer import source code contract entity program import contract hsl multi lang correspond parser parse source code performs semantic validation security purpose compiler verify import source code consistent actual deployed code blockchain instance compile byte code entity definition entity def specifies definition account contract entity entity define via constructor chain address entity parameter account entity initialize optional specify cryptocurrency account contract entity correspond contract import source code file entity assign entity define operation session blockchain CCS november london united kingdom operation definition def specifies definition payment invocation operation payment operation payment specifies transfer amount coin coin account blockchains  coin blockchains operation exchange specify exchange rate coin account invocation operation invocation specifies contract entity public argument argument invocation literal int float variable var contract entity variable semantic validation dependency definition dep def specifies define precondition deadline operation precondition temp deps specifies temporal constraint execution operation deadline del deps specifies deadline constraint operation deadline dependency NSB int absolute int explain semantic validation compiler performs semantic validation ensure security correctness hsl program compiler guarantee compatibility verifiability argument invocation operation argument obtain contract entity compatibility compiler performs ensure argument parameter mapped unified verifiability compiler ensures literal variable publicly blockchains eligible argument invocation operation return contract entity eligible persistent blockchains requirement UIP protocol construct publicly verifiable attestation invoke contract actual chain execution compiler performs dependency validation dependency constraint define hsl program uniquely specify acyclic graph operation ensures conflict temporal constraint specify hsl program executables hsl program validation hsl compiler generates executables program transaction dependency graph GT vertex GT refer transaction wrapper contains information compute chain transaction executable specific blockchain additional metadata transaction GT define precondition requirement transaction consistent dependency constraint specify hsl program GT generate hsl program transaction wrapper seq meta decides address chain transaction seq omit sequence GT meta structure customizable metadata explain transaction  address address meta data  amt dst  proof NSB transaction  address VES  address meta  amt dst  deadline NSB transaction  VES  address address meta  amt dst  deadline NSB transaction  address address meta data   amt dst  proof meta proof transaction  GT generate hsl program meta achieve financial atomicity meta tuple amt dst fund reversion amt specifies address commit destination blockchain explicitly paid fee entire execution fails exception whereas commit dst account guaranteed amount fund specify amt fund reversion handle insurance smart contract isc therefore amt  cryptocurrency blockchain isc deployed dst host blockchain transaction subsequently downstream transaction meta correspond proof proof transaction destination blockchain transaction finalize chain payment operation hsl program multiple transaction GT instance realize individual transaction involve relay account VES generate blockchain driver VES suppose account blockchains visibility VES transaction blockchains instance   account VES bridge balance update   VES account GT VES specific finally deadline transaction specify NSB NSB construct unified status underlie blockchains therefore execution transaction specifically deadline transaction NSB prof finalization precondition transaction prof finalization explain detail finality proof construct NSB transaction deadline indeed enforce isc NSB improve expressiveness hsl allows developer define deadline interval compiler convert interval NSB session blockchain CCS november london united kingdom summary executable hsl  defines blueprint blockchain execution realize hsl program input instruction underlie cryptography protocol UIP detailed UIP detail UIP cryptography protocol executes hsl program executables protocol ProtUIP preliminary protocol ProtVES ProtCLI define execution protocol implement VESes dapp client respectively ProtNSB ProtISC protocol realization NSB isc respectively lastly ProtUIP ProtBC protocol realization purpose blockchain overall ProtUIP phase execution phase transaction specify hsl executables blockchains insurance phase execution correctness violation arbitrate protocol preliminary runtime transaction execution phase transaction unknown init inited latter advanced former transaction gradually promote sequence unknown ProtUIP correspond attestation execution phase terminates execution status hsl program collectively transaction ProtISC arbitrates correctness violation chain channel protocol exchange ProtVES ProtCLI conduct via chain channel latency challenge however enforce accountability  transaction without preserve execution address issue ProtUIP proposes proof action  ProtVES ProtCLI stake execution NSB NSB treat publicly observable fallback communication medium chain channel benefit dual medium protocol exchange ProtVES ProtCLI proceed  via chain channel typical scenario whereas granularity protocol exchange preserve NSB exception eliminate ambiguity accountability enforcement mention ProtUIP security attestation runtime transaction attestation certificate denote cert ProtVES ProtCLI chain exchange chain merkle proof denote  construct NSB underlie blockchains cert correspond  treat equivalently ProtISC code arbitration architecture NSB NSB blockchain objective execution status dapps depicts architecture NSB typical blockchain NSB contains hash link     hash   blockchain    blockchain    cert cert architecture NSB merkle transaction extra functionality NSB NSB contains additional merkle    merkle refer  transaction status underlie blockchains NSB transaction status blockchain   retrieve blockchain public ledger although  blockchains   blockchain merkle transaction storage account balance contract respectively NSB relevant blockchain blockchain relevant package transaction dapp executables  merkle refer  leaf node certificate compute VESes dapp client certificate VES dapp client execution phase action construct merkle proof demonstrate certificate mapped action link commit NSB  crucial isc enforce accountability execution fails information  static lexicographically sort  achieve convenient proof non membership construction  ensures underlie blockchain dedicate subtree transaction status NSB  granularity individual blockchains ensue NSB horizontally scalable HyperService continuously incorporates additional blockchains ProtNSB protocol specifies detailed construction guarantee correctness execution protocol VESes protocol ProtVES detailed clarify technical subtlety compilation session setup GT generate ProtVES initiate execution session GT  daemon primary goal initialization deploy insurance contract execution GT towards ProtVES interacts protocol ProtISC insurance contract GT deploys contract NSB dapp client agrees contract throughout cert sig certificate signing agrees enclose certificate SigV sid  sid signature ProtVES ProtCLI respectively session blockchain CCS november london united kingdom init data daemon  generate session ID sid cid contract ProtISC  GT cert sid GT contract SigV sid ProtCLI approval halt cert sid GT contract SigV sid  sid package contract valid transaction contract ProtNSB exec contract deploy contract halt contract initialize ProtNSB ProtISC  stake fund ProtISC halt stake fund ProtISC initialize data sid GT cid SCert SMerk daemon sid ProtBC private GT SCert SMerk data sid abort GT identify chain counterpart ProtBC status commit tsclosed ProtNSB  compute cert sid tsclosed SigV sid ProtCLI  negotiate attestation ProtBC  obtain finalization proof denote finalization proof merkc update SCert SMerk merkc daemon sid ProtNSB private GT SCert SMerk data sid abort attestation certid certo certod  attestation via correspond handler retrieve alternative attestation GT merkc SMerk retrieve proof merkc ProtNSB  obtain status proof merkc merkc available ProtNSB compute proof merkc merkc merkc update SMerk merkc compute eligible transaction GT unknown ProtCLI compute certi cert init sid SigV sid ProtCLI  certi request initialization ProtNSB  certi certi update SCert certi init non ProtNSB  certi  update SMerk   sid upon  sid private northbound GT SCert SMerk data sid abort compute chain counterpart compute certid cert inited sid SigV sid ProtCLI  certid request opening initialize ProtNSB  certid certid update SCert certid inited non ProtNSB  certid return  update SMerk  upon  certid public southbound assert certid valid cert inited sid  sid SCert SMerk data sid abort abort certi correspond certid SCert assert correctly associate wrapper tsopen ProtNSB  compute certo cert sid tsopen SigV sid ProtCLI  certo request opening ProtNSB  certo certo update SCert certo non ProtNSB  certo return  update SMerk  upon  certo public northbound assert certo valid cert sid tsopen  sid SCert SMerk data sid abort abort certid correspond certo SCert assert tsopen within bound ProtNSB  compute certod cert sid tsopen  sid SigV sid ProtBC exec trigger chain execution ProtCLI  certod acknowledge request ProtNSB  certod certod update SCert certod non ProtNSB  certod return  update SMerk  upon  certod public southbound ast certod valid  sid tsopen SigV sid  sid SCert data sid abort abort certo correspond certod SCert update SCert certod upon  public bidirectional assert valid cert sid tsclosed  sid assert finalize destination blockchain obtain merkc assert tsclosed within bound margin ProtNSB  SCert SMerk data sid abort compute  cert sid tsclosed  sid SigV sid ProtCLI   acknowledge request update SCert  SMerk merkc upon   public bidirectional ast  valid  sid tsclosed SigV sid  sid SCert data sid abort abort cert sid tsclosed SigV sid SCert update SCert  daemon redeem sid private invoke insurance contract periodically GT cid SCert SMerk data sid abort  GT  SCert SMerk advanced ProtISC  cid  insurance protocol description ProtVES background denotes non operation trigger status update ProtNSB handler annotate northbound southbound transaction originate ProtVES ProtCLI respectively handler annotate bidirectional transaction session blockchain CCS november london united kingdom additionally ProtVES ProtCLI deposit sufficient fund ProtISC ensure ProtISC sufficient fund financially revert commit transaction regardless execution abort prematurely intuitively stake amount incoming fund without deduct outgo fund strawman however stake  dependency requirement GT ProtVES ProtCLI stake max GS meta amt meta amt GS  subset GT subset GT  whenever precondition clarity notation throughout ProtVES originate ProtVES account ProtVES likewise ProtCLI indicates account entity define hsl program ProtISC refund remain fund contract terminate contract instantiate sufficiently stake ProtVES initializes internal bookkeeping session notation SCert SMerk certificate via chain channel chain merkle proof construct ProtNSB ProtBC protocol exchange transaction handle ProtVES   handler processing northbound transaction originates ProtVES  handle invoked precondition finalize detect service ProtVES  computes certid inited correspond handler ProtCLI subsequent processing meanwhile  stake certid ProtNSB later retrieves merkle proof  NSB certid  essentially hash chain link certid  commit NSB proof retrieval non operation trigger consensus update NSB  handler  listens timestamped certo suppose generate ProtCLI certid ProtVES  performs correctness tsopen enclose certo ProtVES ProtCLI height NSB calibrate tsopen within bound NSB height ProtVES ensures tsopen ProtCLI correctness certid promote  computes certificate update destination blockchain chain execution throughout  chain executable transaction compute information difference certo ProtCLI certificate certod compute ProtVES latter tsopen specify certod ProtISC evaluate deadline constraint     blockchain    blockchain NSB chain proof denote merkc transaction eligible promote finalization proof denote merkc transaction destination blockchain blockchain status proof denote merkc NSB southbound transaction originate ProtCLI ProtVES manner northbound transaction via   handler clarify subtlety  handler verify association depends upstream transaction instance depends ProtVES verify consistent enclose finalization proof upstream transaction proactive service chain execution progress  blockchains NSB progress transaction driver execution ProtVES internally creates service proactively status blockchains daemon blockchain ProtVES mainly public ledger ProtBC monitor status transaction chain execution ProtVES chain transaction recently finalize request closing ProtCLI timestamped certificate  handler   ProtVES ProtCLI exchange handler handle northbound southbound transaction sends closing request transaction originator motivation initiate closing originator accountable transaction timely deadline addition ProtVES retrieve merkle proof ProtBC finalization  proof denote merkc serf purpose chain proof promote downstream transaction merkc ensure downstream transaction indeed genuine service ProtNSB ProtVES performs task described NSB treat fallback communication medium chain channel ProtVES sort  session relevant certificate via chain channel attestation ProtVES  reaction session blockchain CCS november london united kingdom init data upon  GT generate arbitration cod denote contract initialize tstate   GT compute internal identifier tid initialize tstate tid unknown tsopen tsclosed  retrieve tid fund reversion account denote dst initialize  tid amt dst compute identifier contract cid contract initialize data cid GT tstate   cid contract requester acknowledgment upon  cid  data cid abort update  msg sender  msg sender msg upon  cid atte tstate data cid abort compute tid atte tstate tid abort abort advanced enclose cert atte certificate assert sigverify atte atte certod update tsopen atte tsopen update tsclosed atte tsclosed atte merkle proof assert  atte atte    retrieve certificate certi certid certo atte assert enclose certid certo genuine assert tsopen enclose certo genuine update atte elif atte  retrieve certificate certod atte update tsopen certod tsopen elif atte merkc update  merkc update tsclosed height attach merkc update upon timeout  cid internal daemon GT tstate   data cid abort tid tstate update  tid amt meta amt  update compute  GT tstate non empty execution fails execute fund reversion non zero entry  empty initialize resp blame tid resp tid elif inited resp tid elif init resp tid resp tid return remain fund  correspond sender data erase cid afterwards ProtISC protocol realization isc arbitrator ProtCLI ProtVES retrieve merkc ProtNSB proof denote merkc merkle refer merkc correctly link  finalize NSB merkc fully construct promote finally ProtVES transaction eligible execute precondition finalize due recently transaction ProtVES request initialization ProtCLI  internally originator transaction ProtISC invocation ProtVES periodically invokes ProtISC execute contract internally certificate merkle proof acceptable however ProtVES invoke ProtISC attestation advanced ranked attestation effectively ignore ProtISC execution protocol dapp client ProtCLI specifies protocol implement dapp client ProtCLI defines handler ProtVES     ProtVES respectively certid certod ProtVES handle transaction originate ProtVES   certi certo ProtVES execute transaction originate ProtCLI   ProtCLI counterpart ProtVES negotiate closing attestation usability HyperService imposes requirement daemon implement ProtCLI specially ProtCLI proactively ProtNSB fallback communication medium ProtVES however ProtCLI proactively status underlie blockchains dynamically compute eligible transaction whenever execution status intentionally offload complexity ProtVES enable lightweight dapp client ProtCLI motivate status originate transaction request transaction closing protocol realization isc specifies protocol realization isc  handler entry request insurance contract creation ProtISC generates arbitration code denote contract dapp executable GT contract internally tstate transaction GT update processing security attestation  handler presentation extract proof fund reversion tuple dedicate variable   ProtISC executes contract internal fund deplete contract explain technical subtlety session blockchain CCS november london united kingdom blame originator violate deadline inited originator fail dispatch init dest fail request opening dapp fail initialize unknown VES fail proactively negative positive decision accountable dirty transaction insurance  handler security attestation ProtVES ProtCLI dual certificate certod  merkle proof acceptable processing  certificate straightforward explicitly however processing merkle proof additional correctness validate merkle proof    ProtISC retrieves certificate certi certid certo enclose proof performs correctness certificate certificate certi ProtVES certid originator certo destination enclose chain transaction  certid certo correctly associate logic ProtVES explain enclose tsopen certo genuine genuineness define bound difference tsopen height NSB attache  contract settlement ProtISC register callback  execute contract automatically upon timeout ProtISC internally defines additional transaction transaction promote deadline constraint satisfied ProtISC computes dirty transaction GT transaction eligible non execution succeed GT dirty transaction otherwise ProtISC employ decision responsible dirty transaction decision derive execution ProtVES ProtCLI transaction originator blame fail fulfill deadline constraint fail dispatch chain execution transaction inited destination responsibility proceed certid provably transaction init transaction originate dapp init status originator blame react certi finally transaction unknown accountable proactively initialization originates specification ProtNSB ProtBC ProtBC specifies protocol realization purpose blockchain consensus node secure protocol upon public global regard ProtBC conceptual trust correctness availability ProtBC guarantee correctly perform predefined computation turing smart contract program available handle user request despite unbounded response latency ProtNSB specifies protocol realization NSB ProtNSB extend version ProtBC additional capability due constraint detailed protocol description ProtBC ProtNSB technical report available source code repository arxiv security theorem rigorously security UIP cryptography abstraction UIP ideal functionality FUIP ideal functionality articulates correctness security UIP attain assume trust entity ProtUIP decentralize protocol aforementioned preliminary protocol securely realizes FUIP UC framework ProtUIP achieves functionality security FUIP without assume trust authority rigorous proof non trivial simulator construction within UC framework defer detailed proof dedicate implementation EXPERIMENTS implementation HyperService prototype report prototype development effort java code antlr grammar code building hsl program framework code mainly python implement UIP protocol code mainly implement NSB code solidity vyper hsl chain dapps HyperService release source code available HyperService consortium active development HyperService platform implementation demonstrate interoperability programmability across heterogeneous blockchains HyperService prototype incorporates ethereum flagship public blockchain permissioned blockchain built atop tendermint consensus commonly cite cornerstone building enterprise blockchains implement account wallet smart contract environment chain storage deliver permissioned blockchain programmability NSB built atop tendermint claimed capability action stake merkle proof retrieval program framework implement hsl compiler hsl program contract solidity vyper input transaction dependency graph implement multi lang hsl antlr parse input hsl program contract intermediate representation hsl program convert contract entity unified implement validation component analyzes session blockchain CCS november london united kingdom intermediate representation validate entity operation dependency specify hsl program prototype implementation effort horizontally HyperService incorporate blockchain lightweight protocol UIP blockchain simply extra parser multi lang program blockchain HyperService meanwhile VESes extend visibility blockchain HyperService consortium continuously boarding additional blockchains permissioned permissionless application implementation besides platform implementation implement deploy category chain dapps HyperService financial derivative financial derivative mostly cite blockchain application however external data oracle financial instruction currently oracle built atop trust provider  trust hardware enclave HyperService realizes possibility blockchains oracle built decentralization correctness guarantee blockchains HyperService fully avoids trust deliver genuine data smart contract application sector implement chain cash option dapp option natively blockchains version introductory chain asset movement HyperService natively enables chain asset transfer without rely trust entity exchange primitive application global payment network interconnects geographically distribute consortium blockchains initial coin offering token various cryptocurrencies platform player freely redeem valuable non  token across category implement asset movement dapp hybrid operation asset account smart contract across blockchains federate compute federate compute model participant collectively umbrella task submit local computation scenario transparency accountability desire blockchains perfect platform persist submit participant logic aggregate application category implement federate voting delegate submit vote regional blockchains logic compute vote regional vote publicly visible another blockchain blockchain  private ethereum testnet tendermint blockchain NSB  deployed VM instance public purpose dapp client VES node deployed locally financial derivative  movement federate compute hsl compilation session creation action status stake proof retrieval dapp execution latency HyperService profile breakdown throughput KB batch cert byte cert byte cert byte throughput NSB commit certificate NSB per latency evaluate application mention report execution latency introduce HyperService report latency hsl program compile dapp VES session creation batch NSB action stake proof retrieval UIP protocol exchange report networking latency across global internet datapoint average latency actual chain execution consensus efficiency blockchains varies HyperService isc insurance latency offline anytime isc expires dapps latency profile breakdown session creation consume phase handshake dapp client VES isc deployment initialization  dapp hsl compilation latency operation involves smart contract whereas dapps import contract vyper solidity dapp NSB related operation action status stake proof retrieval bundle perform batch purpose certificate isc arbitration via chain channel action proof dapps executables transaction NSB throughput HyperService capacity throughput NSB affect aggregate dapp capacity HyperService report peak throughput currently implement NSB stress NSB initiate dapp client VES node concurrently dispatch action status stake NSB batch multiple certificate  client session blockchain CCS november london united kingdom NSB transaction effective certificate stake throughput perceive client exceed consensus limit NSB plot NSB throughput commit certificate client per certificate batch batch increase regardless certificate NSB throughput converge kilobyte per certificate enlarge batch cannot boost throughput whereas failure rate certificate stake increase NSB fully load NSB throughput actual dapp capacity HyperService platform depends communication dapp client  NSB dapp transaction spawn NSB transaction action  status stake assume chain channel fully nonfunctional zero NSB transaction otherwise bound aggregate dapp capacity HyperService chain channel dapp client VESes simultaneously broken transaction per tps average byte certificate capacity tps PoS production blockchains magnitude NSB horizontally  granularity underlie blockchain transaction underlie blockchain chain related anticipate NSB become bottleneck HyperService blockchains future discussion discus aspect thoroughly address vision future HyperService impact program framework extension hsl program  dapps USM program model construct hsl developer directly specify entity operation dependency hsl program ensure determinism operation important NSB isc correctness violation dapp execution construct operation conditional branching loop return procedure additionally dynamic transaction generation hsl bug entrancy vulnerability choice consistent recent blockchain program emphasize safety guarantee facebook libra blockchain future extend UIP protocol dynamic transaction graph allows conditional execution operation  operation execution operation specific variable compute previous operation extension implement controlflow operation hsl static dynamic verification ensure correctness dapps shard HyperService motivate heterogeneous blockchain  thanks generic HyperService enable shard smart contract transaction sharded blockchain platform omniledger rapidchain hsl program framework blockchain neutral extensible dapps involve smart contract account blockchains conceptually identical dapps contract account shard sharded blockchains homogeneously sharded shard format contract account develop compile shard dapps hsl simpler chain dapps realize UIP sharded blockchains overhead maintain NSB homogeneous shard lightweight maintain NSB heterogeneous blockchains sharded blockchain platform already maintain dedicate global blockchain trust anchor identity chain omniledger beacon chain harmony NSB functionality additionally envision fully web centralize platform compensate functionality perform computationally intensive task execute chain recognize additional capability minimal distribution operation model centralize platform compatible HyperService public publish couple verifiable proof certify correctness definition correctness application specific publish concept finality capability dapps HyperService  incorporate publish centralize platform interoperability service provider VESes vital role HyperService platform envision VESes HyperService ecosystem chain interoperability service provider CSPs service chain dapps compile hsl program transaction dependency graph UIP protocol vision indeed strengthen practical architecture production blockchains peer peer node evolve hierarchy stakeholder organization without necessarily mining proof blockchains stake proof  blockchains hierarchical architecture undermines decentralization debatable beyond scope HyperService organization perfectly qualify CSPs connectivity multiple blockchains maintain sufficient token liquidity insurance stake contract invocation token transfer chain dapps CSPs VESes via community driven directory tor relay directory envision informal CSPs csp operation model reachable blockchains service fee dapp execution insurance compensate session blockchain CCS november london united kingdom csp induced dapp failure developer autonomy CSPs dapp requirement dapp execution publicly verifiable csp reputation valuable metric csp selection CSPs misbehave risk csp limit stake fund risk isc dapp csp alternatively dapp span blockchains csp reachability chain dapp execute collection VESes HyperService allows multi VES execution UIP protocol restrict VESes dapp client envision industrial impact HyperService birth csp liquidity network interconnect UIP protocol chain dapps atomicity dapps context chain application dapps treat citizen failure individual transaction cannot fully dapp HyperService philosophy security guarantee granularity dapps however version HyperService fully dapp atomic UIP unable revert update smart contract dapp terminates prematurely recognize fundamental challenge due finality guarantee blockchains deliver dapp atomicity HyperService propose concept stateless smart contract contract load blockchain execution persistent smart contact eventually becomes dirty due dapp failure subsequent dapps load contract prior although imposes additional requirement underlie blockchains practical deliverable  protocol smart contract execution decouple consensus layer instance via usage trust execution environment intel sgx keystone privacy preserve blockchains primary challenge privacy preserve blockchains HyperService lack generic abstraction various propose enhance blockchain privacy encrypt blockchain obfuscate transaction via cryptography signature none blockchains abstract generic programmable machine therefore approach towards  privacy preserve blockchains dapp specific rely zero knowledge proof  certify extract blockchains related blockchain interoperability prerequisite massive adoption blockchains recent academic proposal mostly focus token blockchains via trustless exchange protocol chain atomic chain swap cryptocurrency asset however programmability smart contract across heterogeneous blockchains largely ignore protocol cosmos polkadot notable project advocate blockchain interoperability spirit consensus blockchains tendermint cosmos substrate polkadot mainchain hub cosmos  polkadot bridge individual blockchains although vision internet blockchains notable difference HyperService foremost chain layer cosmos inter blockchain communication protocol ibc mainly focus preliminary network communication contrast HyperService proposes stack unified program framework chain dapps provably secure cryptography protocol execute dapps recent development cosmos adoption towards homogeneity tendermint blockchains interoperable fundamental contrast HyperService blockchain heterogeneity requirement polkadot proceeds relatively cosmos substrate stage exist blockchain platform ethereum nebula developer contract solidity vyper tailor version exist javascript facebook recently release program blockchain platform libra adopts semantics rust prohibit copying implicitly discard coin coin unify heterogeneous program propose hsl multi lang parse contact convert unified although exist domain specific variety security related establish corpus algorithm secure overlay network network intrusion enterprise explicitly domain specific cannot unified program framework chain dapps security  security theorem UIP rigorously UC framework ideal functionality FUIP cryptography abstraction UIP ideal functionality FUIP ideal functionality articulates correctness security HyperService attain assume trust entity detailed description FUIP additional explanation session setup interface dapp client VES request FUIP securely execute dapp executable executable transaction dependency graph GT correctness arbitration code contract trust entity FUIP generates session blockchain CCS november london united kingdom init data upon  GT contract generate session ID sid cert sid GT contract  sid  sid halt deposit sufficient fund denote stake blockchain monitoring daemon session expiration timer timer execute contract GT initialize annotation update data sid GT contract stake timer upon  sid GT data sid abort assert assert eligible accord GT update init compute certi cert init sid  sid certi inform action upon  sid GT data sid abort assert init compute chain transaction update inited trans compute certid cert inited sid  sid certid inform action upon  sid GT data sid abort assert inited trans update tsopen compute certo cert tsopen sid  sid certo inform action upon  sid tsopen GT data sid abort assert trans assert tsopen within error boundary update tsopen tsopen  chain execution compute certod cert tsopen sid  sid  sid certod inform action upon  sid tsclosed GT data sid abort assert trans query ledger  status abort finalize  assert tsclosed within error boundary update tsclosed tsclosed compute  cert tsclosed sid  sid  sid  inform action upon  sid public GT contract stake timer data sid abort abort timer expire arbitration logic specify contract initialize resp blame compute eligible transaction GT unknown update resp elif init update resp elif inited update resp elif update resp elif deadline constraint fails update resp financially revert transaction resp empty return remain fund stake correspond sender remove internal bookkeeping sid data ideal functionality FUIP FUIP transaction compute certificate behalf stake sufficient fund derive contract FUIP FUIP annotates transaction wrapper GT status initialize unknown timestamps initialize chain counterpart initialize empty accurately FUIP protocol ProtUIP assume dapp client VES FUIP impose requirement underlie blockchains model ideal blockchain ideal functionality  interface public ledger query transition trigger transaction FUIP imposes constraint ledger format consensus logic transition transaction update FUIP defines interface accept external update transaction interface FUIP performs correctness guarantee promotion legitimate interface FUIP computes attestation correspond transaction sends formally notify action FUIP financial execution upon expiration timer invoke  interface trigger contract code execution arbitration logic derive decision mention however FUIP decides transaction merely internal due assume  verbose definition FUIP intentionally define FUIP  message accurately FUIP protocol ProtUIP instance  interface FUIP certifies GT contract sid behalf simulate successful handshake another attestation generate update interface essential ensure correctness due assume  FUIP however FUIP publishes attestation emulate ProtUIP emulation crucial FUIP UC realizes ProtUIP correctness security FUIP assume  FUIP correctness security pre timeout execution correctly precondition session blockchain CCS november london united kingdom deadline satisfied execution fails financially revert regardless stage execution fails FUIP misbehave accountable failure  model bound transaction finality latency guaranteed correctly honest finally FUIP contract public protocol ProtUIP status execution public isc NSB privacy preserve blockchains HyperService future security theorem security theorem HyperService correctness theorem guarantee ProtUIP achieves security FUIP theorem assume distribute consensus algorithm relevant BNs provably secure hash function preimage resistant digital signature EU cma secure existentially unforgeable chosen message attack decentralize protocol ProtUIP securely UC realizes ideal functionality FUIP malicious adversary passive corruption model variant ProtUIP refer ProtUIP   PNSB communication medium theorem assumption theorem UIP protocol variant ProtUIP securely UC realizes ideal functionality FUIP malicious adversary byzantine corruption model proof overview theorem theorem UC framework model ProtUIP execution define machine environment adversary participant refer ProtUIP execute ProtUIP intuitively environment external contains protocol input obtain output ProtUIP adversary adversarial activity protocol execution communication channel corruption message communicate freely passive corruption model theorem enables adversary internal corrupt whereas corrupt protocol compliant executes instruction desire discus byzantine corruption model adversary corrupt ProtUIP UC realizes ideal functionality FUIP ProtUIP UC emulates IFUIP ideal protocol define ideal functionality FUIP adversary exists adversary simulator cannot distinguish ideal feature IFUIP feature ProtUIP mathematically input probability output interact ProtUIP differs negligible amount probability output interact IFUIP ideal ideal protocol IFUIP wrapper around FUIP dummy interface ProtUIP interact IFUIP ideal interacts ProtUIP dummy simply pas input FUIP relay output FUIP without implement additional logic FUIP dummy sake presentation abstract participant ProtUIP    PNSB pbc correspond dummy  ideal denote VES annotation applies ProtUIP UC emulates IFUIP adversary sufficient construct simulator dummy adversary simply relay message ProtUIP proof simulator observes ProtUIP attestation publication NSB contract invocation isc accurately emulates ideal FUIP cannot distinguish ideal construction ideal simulator detail construction specify action upon instruction distinguisher sends instruction ideal dummy parity upon instruction inter BN session cli VES emulates GT contract setup construct  FUIP parameter GT contract cli VES upon instructs VES initialization request transaction intent extract sid instruction construct  FUIP parameter sid VES instruction category handle similarly instruction   FUIP instruction   FUIP instruction   FUIP instruction   FUIP ignores instruction   extract instruction interface FUIP ensure association due asymmetry interface define cli VES slightly differently instruction VES instruction   FUIP instruction   FUIP instruction   FUIP  VES upon instructs VES invoke smart contract locally executes contract instructs FUIP publish update contract isc  ideal  ideal perspective sequence hybrid session blockchain CCS november london united kingdom argument argument hybrid construction FUIP subset dummy IFUIP subset ProtUIP argument ProtUIP without ideal argument IFUIP without cannot distinguish consecutive hybrid argument transitivity protocol emulation argument ProtUIP UC emulates argument IFUIP ProtUIP dummy adversary simply message hybrid hybrid   replace dummy VES cli upon instruction execute dapp executables GT  interface  living hybrid obtain contract code contract upon contract  interface FUIP parameter GT contract VES cli output certificate dummy emulate handshake   deploys contract PNSB pbc hybrid finally stake fund FUIP unblock execution upon instruction dummy execute transaction GT construction information construct FUIP interface parameter generates certificate cert retrieves cert emulate  stake   publishes certificate PNSB instruction publishes correspond certificate PNSB hybrid otherwise skip publishing later retrieves merkle proof PNSB instructs FUIP output proof dummy publisher cert upon instruction dummy invoke smart contract certificate merkle proof invoke  hybrid accordingly execution GT automatic GT continuously proceed without additional instruction successful session setup hybrid although   replace dummy fully knowledge GT execution GT perspective GT execute automatically  hybrid trigger  interface FUIP avoid execution contract reclaim fund stake FUIP via backdoor channel FUIP communicate freely UC framework aforementioned construction FUIP immediately output dummy hybrid exactly output correspond actual accurately emulate hybrid cannot distinguish hybrid hybrid hybrid hybrid  replace dummy isc resume responsibility  hybrid instruction execute GT computes arbitration code contract instructs FUIP publish contract isc observable instruction invoke contract locally executes contract input publishes update contract isc via FUIP finally upon predefined contract timeout  interface FUIP parameter sid VES sid cli execute contract emulates arbitration perform  hybrid immediately FUIP output dummy isc hybrid exactly hybrid cannot distinguish hybrid hybrid hybrid PNSB replace dummy NSB structure PNSB message PNSB public simulate functionality trivial therefore hybrid identically distribute hybrid hybrid ideal hybrid hybrid pbc replace dummy BC hybrid essentially IFUIP functionality pbc strict subset PNSB simulate pbc straightforward therefore IFUIP indistinguishable hybrid perspective transitivity protocol emulation ProtUIP UC emulates IFUIP therefore ProtUIP  FUIP throughout simulation maintain invariant FUIP accurately simulate desire output dummy hybrid  ideal naturally byzantine corruption model theorem considers passive corruption model discus byzantine corruption model   assumption blockchains smart contract trust correctness previously construct FUIP accurately desire execution ProtUIP however  corrupt behaves arbitrarily byzantine corrupt conflict message chain channel PNSB transaction ProtUIP attestation certificate channel merkle proof PNSB effectively ignores adversary inject message inconsistency protocol execution attestation impossible accurately emulate behavior difference ideal incorporate byzantine corruption model security analysis variant ProtUIP refer ProtUIP   PNSB communication medium granularity protocol execution guaranteed public unique emulate whatever action corrupt therefore conclude theorem session blockchain CCS november london united kingdom conclusion HyperService platform interoperability programmability across heterogeneous blockchains HyperService innovative hsl program framework chain dapps unify smart contract UIP universal blockchain interoperability protocol securely realize complex operation define dapps blockchains implement HyperService prototype approximately code demonstrate practicality prototype report execution latency dapps aggregate platform throughput