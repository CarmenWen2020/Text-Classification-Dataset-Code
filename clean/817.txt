blockchains distribute ledger become increasingly popular efficient reliable persistent data transaction unfortunately ensure reliability correctness data public confidentiality concern eliminate potential solidus protocol confidential transaction public blockchains asset transfer chain settlement solidus operates framework financial institution modest maintain user account within framework solidus hide transaction transaction graph identity transact entity maintain public verifiability blockchains appeal achieve confidentiality introduce concept publicly verifiable oblivious ram machine PVORM formal security definition PVORM solidus construction secure finally implement solidus benchmark efficient CCS CONCEPTS security privacy domain specific security privacy architecture keywords confidential transaction oblivious ram blockchain introduction blockchain cryptocurrencies bitcoin user transfer quickly  reliable distribute public ledger ability manage asset privately  ledger appeal setting beyond cryptocurrencies already issue ledger financial institution explore ledger instantaneous financial settlement confidentiality concern bitcoin markedly insufficient expose transaction pseudonym transact entity permit  concern leakage financial institution restrict chain storage transaction digest detail elsewhere architecture discard benefit blockchains centralize authoritative ledger reduce timestamping service overall structure blockchains additionally  financial peer  transaction bitcoin interfere customer service role customer regulatory requirement financial institution instead financial explore model intermediate entity manage transaction chain asset behalf user handful retail  ledger  stock purchase customer intermediate faithfully replicate asset within financial institution intermediate blockchain propose inherently confidentiality  data chain prevent chain settlement coin cryptocurrencies monero zcash improve confidentiality notable limitation coin monero partial confidentiality demonstrate weakness zero knowledge succinct non interactive  knowledge snarks zcash built confidentiality proof generation however expensive consumer machine zcash feasible client perform infrequent transaction experimentally adapt snarks intermediate prohibitively expensive snarks undesirable trust setup introduce engineering complexity cryptographic hardness assumption financial institution reluctant embrace session blockchains CCS october november dallas TX usa address concern solidus confidentiality transaction rate  ledger solidus conceals transaction technically challenge transaction graph confidentiality transaction sender receiver cannot publicly identify pseudonym identify respective entity identity solidus fundamentally approach  confidentiality previous zcash technical cornerstone solidus introduce primitive publicly verifiable oblivious ram machine PVORM derive previous oblivious ram ORAM previously propose application ORAM client outsource storage client verify integrity ORAM solidus ORAM user account balance entity verify  ORAM reflect precisely valid transaction involve novel requirement PVORM defines legal application specific operation update accompany ZK proof correctness correctness requirement account balance remain non negative transaction update account forth formal definition PVORM implementation incorporate solidus introduction PVORM benefit solidus PVORM construct snarks NIZK proof generalize schnorr proof GSPs GSPs efficient construct snarks trust setup verify explore option unlike zcash solidus core data structure grows user account transaction lifetime important throughput minimizes performance penalty inject dummy transaction mitigate timing channel finally solidus maintains balance ciphertexts ledger approach chain settlement feature zcash aim permit decryption balance authorize allows user balance transfer fund away unresponsive addition PVORM component formal security model solidus ideal functionality presentation independent specification security requirement intermediate ledger security solidus model solidus target permissioned ledger model permissioned agnostic implementation underlie ledger centralize distribute therefore generic ledger denote blockchain substrate instantiate variety contribution summarize solidus solid coin roman empire pseudonymous cryptocurrencies bitcoin graph node transaction transaction graph confidentiality conceal graph guard  attack exploit structure intermediate ledger solidus formal treatment confidentiality intermediate ledger architecture closely aligns settlement financial formal security model broadly capture requirement financial institution migrate asset onto ledger PVORM introduce publicly verifiable  ram machine construction derive ORAM suitable enforce transaction graph confidentiality ledger formal definition efficient construction generalize schnorr proof implementation report prototype implementation solidus benchmarking  demonstrate bound solidus  performance comparison snarks technical approach  confidentiality ledger practicality intermediate ledger chain settlement background review exist cryptocurrency scheme approach confidentiality background  model technical building achieve security confidentiality solidus exist cryptocurrencies popular cryptocurrencies transaction mechanism popularize bitcoin user account address bitcoin public private transfer creates transaction signing request quantity coin recipient miner sequence transaction directly publish blockchain authoritative append transaction transaction balance tally transaction involve entire blockchain performance optimization entity maintain balance summary unspent transaction utxo bitcoin setup  account balance transaction detail confidentiality stem pseudonymity public impossible link identity conceal balance transaction maxwell propose scheme confidential transaction CT CT operates bitcoin model publishes pedersen commitment balance transaction similarly hidden balance update homomorphism commitment proven non negative generalize schnorr proof solidus  variant CT conceal transaction decentralize cryptocurrency scheme aim partial transaction graph confidentiality brief overview involve snarks confidentiality seek simplification detail transaction bitcoin  reference output previous transaction script restrict user output mining fee session blockchains CCS october november dallas TX usa solidus zcash  hawk conceal balance transfer amount transaction graph however aim align financial settlement additionally trust setup authoritative merkle grows linearly transaction drawback avoid solidus basis performance comparison evaluate snark version solidus intermediate manage asset ledger appeal financial transfer asset financial involves laborious execution denotes legally enforceable agreement buyer seller swap asset security cash clearing update ledger reflect transaction settlement denotes exchange asset clearing multiple financial institution typically intermediary customer security broker behalf via  settlement typically security delay introduces systemic risk financial sector government agency security exchange commission sec reduce delay distribute ledger option asset title authoritative ownership ledger execute nearly instantaneously exist cryptocurrencies bitcoin title digital asset execution digitally transaction request clearing settlement simultaneously accomplish transaction however intermediate financial transaction bitcoin ordinary customer defer account management exchange coinbase additionally  regulation customer  exist cryptocurrencies align financial ordinary customer solidus aim transaction settlement  ledger standard cryptocurrencies solidus assumes user public private digitally transaction solidus however conceals account balance transaction amount ciphertexts public verifiability relies PVORM oblivious ram PVORM heavily inspire oblivious ram ORAM background ORAM cryptographic protocol permit client safely data untrusted server client maintains logical memory address remote physical address performs writes remotely ensure freshness integrity confidentiality data straightforward authenticate encryption minimal local ORAM concealment memory access strictly settlement involves exchange asset transaction issue outside scope polynomially bound adversarial server cannot distinguish identical sequence client operation appeal building solidus identify transaction graph easily reduce identify account balance transaction balance ORAM immediately transaction graph confidentiality moreover recent drastically improve performance ORAM practical ORAM construction maintain local cache client stash organize data logarithmic access completely randomize location constant writes linear ORAM unfortunately standard ORAM insufficient solidus ORAM client untrusted server correctness simply ORAM reflect client update notion valid update alone client update validity solidus client application define notion correctness update cannot local stash longer data ledger address concern introduce PVORM detailed construction inspire ORAM generalize schnorr proof solidus intensive generalize schnorr proof GSPs protocol practical honest verifier zero knowledge argument proof knowledge construct notation introduce powerful specification GSPs  multiplicative notation cyclic prime  ZK proof knowledge verifier schnorr identification protocol  specification GSPs arbitrary variable conjunction disjunction predicate correspond standard schnorr identification protocol efficient realization  additionally fiat shamir heuristic render GSPs non interactive generate NIZK proof knowledge solidus GSPs variety ensure account balance  properly update remain valid solidus overview delve technical detail overview solidus notation trust assumption security goal architectural sketch however concrete target application motivation   inform solidus solidus management asset title  building electronic communication network ecn physical  intermediate solidus elliptic curve secpk choice performance despite elliptic curve typically additive notation multiplicative notation simplicity generality session blockchains CCS october november dallas TX usa ledger settlement title management physical  manage custodian trust inflow outflow specifically designate vault user account generally commercial manages user additionally outside vault  ecn custodian asset  ecn remove vault elsewhere  custodian destroy asset  ledger fractional  individual user user authorizes transfer another user service collateral loan freeze asset loan repaid solidus asset lifecycle  ecn practical performance confidentiality verifiability guarantee approach solidus important feature exist ledger amenable financial intermediate unlike nearly propose research community solidus aligns structure financial solidus customer user asset security cryptocurrency account specially designate entity asset notary injection asset discus unlike intermediate solidus confidentiality conceals account balance transaction detail non transact entity ledger ciphertexts solidus PVORM maintains PVORM ledger identity balance account transaction involves user user user sender transaction verifies validity transaction correctly posse fund update PVORM reflect transaction performs correspond update user account confidentiality PVORM ensure another entity identity identity transact user indeed cannot identify user user public verifiability PVORM ensures entity access ledger verify transaction correctly solidus agnostic implementation underlie ledger mutually aware transaction validation ledger maintainer desirable receiver verify sender identity sender easily acquire receipt retain proof authorize transaction ledger PVORM PVORM pks pks pkr pkr pks pks pkr pkr ZK proof transaction sends user upper logical plaintext memory PVORM associate public encrypt memory entity user user update  correctly maintainer permissioned fix entity  fully decentralize ledger blockchain trustworthy append data structure architectural model solidus predetermine maintain asset title ledger public private encrypt signing user signature account publicly associate define maintains private data structure user balance public maintains correspond public data structure ledger encrypt encryption constitute memory PVORM solidus structure ensure update reflect valid transaction conceal transaction detail transaction graph transaction digitally request user balance amount asset another user transaction valid transaction update update generate publicly verifiable ZK proof update respective  correctly depicts solidus transaction treat ledger public append memory verifies transaction asynchronous authenticate access ledger accepts transaction already model ideal functionality FLedger detailed invoke  asset title described user transaction zero sum sends financial generally asset specific channel solidus defines fix asset notary session blockchains CCS october november dallas TX usa account balance authority destroy asset title audit sensitive action transaction involve reveal identity asset notary clearly restrict arbitrary user destroy asset title solidus designate custodian sole notary responsible acknowledge receipt removal physical asset guarantee physical integrity trust model solidus assumes respect confidentiality user otherwise behave honestly attempt steal  others manipulate account balance falsify proof etc respectively user attempt violate confidentiality user respectively user passively actively assume bound corrupt user collude freely ledger assume ledger abstraction ledger maintain maintain ledger trust model independent protocol construct crash tolerant consensus protocol paxos zookeeper raft byzantine consensus protocol PBFT decentralize consensus protocol nakamoto consensus trustworthy entity simply assume ledger maintainer satisfy protocol requirement ledger remains available regard ledger public PVORM data structure replicate machine despite solidus flexible allows treat consensus application layer entirely majority discussion availability assume ledger remains available susceptible denial service attack consensus node remain non faulty maintain liveness however unavailable freeze user asset reject transaction offline entirely asset freeze feature asset user balance collateral loan however maliciously freeze user asset offline due technical business failure auditor decryption enable user balance recover fund despite unable transact directly audit regulator auditor pivotal role financial sector solidus explicit audit enables decryption chain data private decryption auditor acquire transaction demand verify correctness completeness auditor directly proactively monitor activity within account network assume network adversary active network adversary availability requirement ledger impossible passive adversary mostly mitigate simply secure message TLS existence communication user leak information inherent intermediate mitigate tor protocol security goal solidus aim safety confidentiality guarantee individual user safety guarantee solidus safety guarantee user balance decrease without explicit permission user signature authorization replay attack account balance negative ensure user finally transaction asset notary zero sum ensure correctness transaction publicly verifiable fashion via ZK proof ledger proof accept transaction transaction maintain guarantee solidus proof ledger meaning auditor verify offline maintain guarantee transaction involve serialize serialization ledger another lock mechanism accomplish everyone confidentiality guarantee facilitate audit asset recovery malicious solidus account balance transaction detail directly ledger despite persistent public solidus confidentiality user account balance visible user authorize auditor transaction reveal transaction involve involve account hidden public signature scheme appendix enforce publicly verifiable authorization requirement without reveal identity feature refer  graph confidentiality precludes pseudonymous scheme employ bitcoin challenge specifically address PVORM directly address information leak timing transaction channel transaction graph however eliminate transaction regular interval batch uniform batch pad dummy transaction obscure conduct transaction formal model encompasses security confidentiality goal PVORM ORAM conceal solidus transaction graph lack public verifiability solidus overcome limitation introduce publicly verifiable oblivious ram machine PVORM ORAMs  private logical memory correspond encrypt physical memory however difference session blockchains CCS october november dallas TX usa constrain update operation constrain public function solidus contains account IDs balance update balance non negative publicly verifiable update whenever client modifies publicly zero knowledge reflect valid application client maintains memory instead client maintain server maintain client maintains directly remains hidden publicly visible ledger solidus private stash data prevent client correctness writes instead variable private stash PVORM fix public encrypt stash achieve public verifiability PVORM construction relies public cryptography another ORAM scheme public cryptography ORAM standard traditional ORAMs generally symmetric primitive difference fundamental construct PVORM symmetric encryption snarks construction performs poorly leverage PVORM public verifiability storage outsource improve efficiency ORAM incur client retrieve data server PVORM reading public ledger solidus leak writes however publicly visible PVORM aim reduce local memory usage assume client locally maintains PVORM private data metadata allows client perform update efficiently avoid unnecessary decryption feature nearly identical leveraged  ORAM technique apply ORAM writes implement update  operation formal definition formal definition PVORM private array publicly define public encrypt representation update specification account ID balance definition correctness define public interface PVORM operation PVORM consists operation init randomize function initializes PVORM security parameter data initial memory valid update update constraint function update accord update undefined input invalid update undefined update proof randomize update function update public memory emits public memory ciphertext zero knowledge proof application ver proof false deterministic update verification function define dec deterministic function plaintext memory decrypt update ciphertext respectively employ operation correctness security definition core PVORM interface define correctness PVORM respect valid update sequence update sequence valid define PVORM initial update sequence valid   define  init return false proof update dec ver proof return false return define PVORM update correctly transforms define ver verifies update obliviousness  structure realize ORAM guarantee adaptive adversary intuitively PVORM guarantee  valid update sequence indistinguishable output formally PVORM oblivious ppt adversary negligible negl   negl  define  init return  stateful oracle initial input executes proof update update return proof abort undefined definition adaptive version ORAM literature public verifiability security definition public verifiability intuitively update proof update perform valid session blockchains CCS october november dallas TX usa stash fix modify cipher bucket update circuit ORAM PVORM bucket involve operation modify structure shade distinguish fix modify combine homomorphically modify ciphertext dash finally evicts along eviction border claimed formally PVORM publicly verifiable ppt adversary  negl  define  init proof return ver proof dec corresponds soundness ZK proof update perform correctly solidus instantiation solidus instantiate PVORM combine structure circuit ORAM GSPs circuit ORAM data bucket organize binary performs update swap along structure performance update logarithmic account pairwise swap public ciphertext admit efficient ZK proof correctness solidus PVORM structure update data account unique identifier balance tandem shuffle solidus employ verifiable swap algorithm  ciphertexts augment swap ciphertexts appendix solidus constrains update modify account balance balance remain fix update publicly verifiable desire account deterministic fix swap along circuit ORAM access update account balance generates inclusion proof ciphertext legal appendix finally performs circuit ORAM eviction algorithm  update account swap fix appendix concretize construction oblivious publicly verifiable extend stash overflow circuit ORAM assumes stash bound data loss stash overflow probabilistic definition correctness behavior occurs data lose probability data loss negligible stash definition reasonable solidus stash ledger prevent leak information bound stash data loss however catastrophic infrequent stash overflow instead lose data insert account deeper insertion public leak regular eviction insufficient location account account identity solidus inherits stash overflow probability circuit ORAM negligible stash PVORM update performance linear stash solidus performance privacy  modest stash overflow exceedingly unlikely bucket stash reduces overflow probability solidus protocol solidus protocol construction relies heavily cryptographic primitive appendix choice simplify explanation abstract operation instantiation proof consists encryption  eski signing   account account unique account identifier balance simplicity public  identifier maintains PVORM update transaction information account describes PVORM structure request transaction solidus intermediate request request consists unique ID txid enc  encrypt public enc  pkr ciphertext ID public hidden public signature sks appendix receipt request validate request txid globally unique initiate transaction settlement transaction structure transaction generates proof   sends txid enc  enc  pkr concurrently update respective  update associate proof signature onto ledger transaction accepted ledger asset transfer transaction session blockchains CCS october november dallas TX usa ledger transaction request verify PVORM update PVORM update lifecycle transaction solidus arrow operation another depends user role transaction transaction IDs prevent replay attack solidus globally unique ID transaction ID simply random GUID verification ID transaction lifetime avoid solidus transaction ID timestamp random transaction valid within txid transaction valid   tnow allows verification IDs properly prevent replay attack opening closing account constantly opening account solidus account insert account PVORM construction publishes ID verifiable encryption ID balance insert ciphertext PVORM replace dummy account simply publicly verifies identity account replaces PVORM dummy FLedger hybrid functionality simplicity define solidus protocol  trust initializer idealize ledger instantiate trust initializer exist pki mention solidus agnostic ledger implementation abstract trust initializer finit ledger FLedger throughout protocol user employ hidden public signature appendix employ schnorr signature denote   FLedger functionality operation transaction abort progress transaction obvious ledger authoritative transaction responsible verification finit init generate pki ski  pki user pki skk generate     eski init    user solidus ideal initializer user FLedger init txid ledger  txid txn assert txid txid parse txn txdatas  assert  txdatas    txn ledger txid txid txid ledger ledger txid txn broadcast  txid txn  abort parse abort txid proof assert txid txid assert ver epk ledger proof assert prof txid txid txid ledger ledger abort broadcast  abort solidus ideal ledger user ledger denotes recent PVORM ledger  verifies proof associate transaction public precede PVORM involve guard malicious activity processing transaction PVORM update prior transaction ledger abort operation option dos attack none arrives proceed transaction initiate probability participates future transaction involve circuit ORAM access involve access likely prevent information leakage PVORM update ledger update initiate transaction transaction exactly update otherwise invoke  dummy update invalidate information gain ideal functionality define solidus protocol  environment standard UC framework entity behavior external protocol execution input output protocol adversary session blockchains CCS october november dallas TX usa  user input  environment generate random unique txid encrypt enc   enc   ski  txid  txid     finit assert    txid txn FLedger retrieve txn pend update     input  environment assert pend retrieve pend update proof update eski generate ZK proof encrypts  txid proof FLedger  abort FLedger parse txid proof abort assert pend txid pend   pend pend execute  described  txid  assert pend txid unique   txid dec eski pks decrypt dec eski assert update proof update eski enc  generate txdatas txid proof  proof update amount proof encrypt pend txdatas  txdatas  txid txdatas  txid txdatas assert pend txid unique   txdatas proof txdatas valid retrieve txid txdatas decrypt dec eski assert txid unique decrypt pkr dec eski update proof update eski generate  txid proof proof update account pend txid    txn txdatas   txid txn FLedger FLedger hybrid protocol solidus user simplicity omit operation account execute transaction  user executes  sends  request user verifies request update PVORM update recipient similarly verifies update transaction FLedger simplicity performs update sends update respective  parallel imply protocol contains operation purpose handle transaction abort described update update FLedger security definition demonstrate security  notion secure solidus protocol operates define ideal functionality  adversary environment  denote transcript interact   transcript simulator ideal  allows define security definition solidus securely emulates  ppt adversary environment exists simulator ppt distinguishers   negl definition theorem extend version theorem solidus protocol  satisfies definition assume DDH rom theorem universal composability UC framework assume solidus employ universally composable UC  prior demonstrates GSPs transform UC  fiat shamir heuristic ciphertext witness public initializer solidus already employ trust initialization ciphertexts operation anyway performance impact ensure UC  minimal  addition parallelize operation optimization solidus practical optimization appropriate session blockchains CCS october november dallas TX usa  init initialize empty initialize  assert generate unique txid txid req txid req txid  txid retrieve txid assert req txid   txid  txid retrieve txid assert  remove txid mapping retrieve assert reveal identity asset notary otherwise otherwise broadcast  txid  txid txid abort nonexistent transaction retrieve txid assert remove txid mapping broadcast  txid ideal functionality solidus user asset notary simplicity assume fix account significant speedup applicable simpler optimization evaluation precomputing randomization factor computational expense solidus randomize ciphertexts update PVORM fortunately  allows randomize ciphertexts combine encryption identity ciphertext randomize random compute pkr compute pkr knowledge groupG generator public none precompute ciphertexts randomize precomputed indefinitely generate randomization factor financial predictable load traffic utilize otherwise idle hardware purpose traffic precomputation generates randomization application consumes modest frame drastically improve performance reduce verification overhead proof verification expensive protocol ledger consensus node verify transaction increase load consensus node strengthen trust assumption slightly omit online verification increase performance strategy rely assumption threshold verification financial entity regulator generally trust threshold entity verify transaction consensus node confidence transaction valid accept without verification threshold node verify signature trust entity verify transaction faster perform verification trust entity significantly threshold entity capacity others strategy improve offline verification treat covert adversary attempt extra information subvert protocol attribution impossible situation arise solidus commercial information misbehave deter attributable protocol deviation assumption omit online verification entirely verifiability ledger remains submits invalid transaction proof hoc identification faulty transaction offend trivial covert adversary model submit valid transaction proof meaning ledger accept transaction without verify associate proof transaction pipelining solidus sequential processing transaction PVORM update sequential generate valid proof transaction PVORM however associate proof therefore assumes fault rare processing generate proof fort technique reduce transaction latency drastically increase throughput moreover update PVORM primarily randomize ciphertexts optimization particularly effective combine precomputation failure impact performance correctness ift abort  immediately identify reprocess transaction without reprocess significant temporary performance degradation meaning optimization appropriate failure rare transaction individually ledger session blockchains CCS october november dallas TX usa stash sec ver update PVORM performance capacity bucket stash varies alleviate performance penalty bundling transaction bitcoin abort instead reprocess rollback operation later rollback provably revert execute update verifier however recompute rollback remain EXPERIMENTS performance PVORM solidus prototype solidus implementation java code constitute PVORM  crypto primitive apache zookeeper distribute consensus xlarge amazon EC instance employ precomputation optimization benchmark precomputation emphasize performance employ unoptimized implementation server per highly limit parallelism solidus highly parallelize multiple server per achieve vastly superior performance PVORM performance concrete performance PVORM update ver operation configuration parallelism bucket stash thread performance PVORM bucket stash bucket runtime grows linearly stash bucket stash stash overflow performance privacy depth thread performance PVORM capacity binary structure clearly logarithmic parallelism PVORM construction highly parallel operation update contains  verify independently performance PVORM capacity sec generate verify PVORM capacity bucket stash worker thread throughput ops sec perfect update ver parallel PVORM performance bucket stash capacity dash perfect computation parallelize overhead PVORM worker thread exactly coordination thread proof pairwise swap compute verify independently performance beyond thread possibly combination PVORM operation cpu bound thread beyond cpu core meaningful speedup prototype implementation distribute multiple host poorly multi cpu architecture xlarge EC instance core CPUs worker thread worker thread thread effectively parallelize cpu likely explains reduce proof memory usage PVORM bucket stash capacity PVORM update proof KB KB compress generate update prototype PVORM memory despite memory consumption peak MB solidus performance performance fully distribute solidus xlarge EC instance maintains PVORM bucket stash capacity parameter realistic stash overflow probability around maintain ledger elliptic curve compress decompression imposes nontrivial overhead session blockchains CCS october november dallas TX usa throughput sec offline verification online verification solidus performance distribute zookeeper zookeeper node maintains PVORM bucket stash capacity host zookeeper node attempt tune zookeeper optimize ledger communication configuration fully load incoming outgo transaction explain setting transaction verification offline performance online verification contains regular online verification performance improves CPUs saturate verify transaction slows offline verification transaction faster additional impose overhead exist improve improve distribute verification multiple machine improve capacity throughput pipelining transaction described improve throughput substantially distribute proof generation across multiple host distribution unlikely benefit without pipelining implement distribution introduces complex engineering challenge orthogonal technical innovation introduce solidus neither implement benchmark option snark comparison finally prototype performance PVORM implement snarks approach succinct proof verification costly proof generation simply circuit ORAM PVORM construction convert proof snarks needlessly expensive snarks application arbitrary circuit compact merkle structure account standard merkle hash ledger update PVORM update account valid modifies merkle accordingly snark properly perform update verify requester signature merkle PVORM snark proof implement construction security equivalent gsp PVORM performance hash sha gsp PVORM  secpk curve snark PVORM rsa security thread proof sec verification sec proof byte peak memory GB performance PVORM snarks xlarge EC instance verification extremely highly parallel proof generation gsp PVORM improve overall throughput verify proof around maintain ledger significantly moreover additional hardware verify numerous gsp transaction parallel benefit snarks related solidus related cryptocurrencies transaction confidentiality omit related ORAM anonymous cryptocurrencies anonymous cash propose  refine series scheme trust centralize authority issue  coin anonymized blind signature credential due centralization technical limitation handle fractional coin spending cash largely displace decentralize cryptocurrencies zcash recently deployed decentralize cryptocurrency academic antecedent  hawk transaction graph confidentiality solidus zcash relies snarks ensure conservation prevent spending hide transaction transaction graph consequently unlike solidus trust setup centralize multiparty computation purpose impractical moreover exploration snark variant solidus snarks expensive generate magnitude GSPs solidus additionally zcash hawk auditability solidus asset chain commitment alternative scheme monero relatively popular cryptocurrency  pseudonymous proposal partial transaction graph concealment serious weakness monero anonymity recently identify however  deployed confidentiality formally analyze partially obscure transaction graph exist cryptocurrency propose deployed fundamental limitation participate user partial anonymity demonstrate weakness session blockchains CCS october november dallas TX usa linear participant contrast solidus achieves rigorously provable  confidentiality user confidential transaction scheme confidential transaction hide transaction amount aim transaction graph privacy solidus employ confidential transaction scheme inherits provable security GSPs financial sector blockchain technology financial intense blockchains propose deployed banking transaction solidus achieve solidus lack feature ripple widely deployed scheme transfer aim confidentiality solidus  scheme central cryptocurrency issuance auditability solidus similarly inherently transaction confidentiality  aim chain settlement solidus lack  confidentiality digital asset platform confidentiality transaction detail chain completely forego chain settlement auditability conclusion introduce solidus address impediment blockchain transaction critical lack transaction graph confidentiality unlike previous approach zcash solidus specifically gear towards structural performance requirement financial transaction settlement innovation solidus publicly verifiable oblivious ram machine PVORM generalization ORAM PVORM publicly verifiable outsource computation memory enable completely approach blockchain transaction solidus employ PVORM data structure linear account transaction zcash proof computation magnitude faster  define security solidus ideal functionality security UC framework finally series optimization solidus protocol distribute ledger zookeeper demonstrate ability solidus throughput workload solidus viable approach building strongly verifiable fully auditable intermediate ledger transaction