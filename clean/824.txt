automatic exploit generation challenge exist usually explore depth crash proof concept poc input trigger vulnerability generate exploit exploitable along however exploitable exist crash moreover exist heavily rely symbolic execution scalable exploration exploit generation addition exploit heap vulnerability propose revery exploitable diverge crash generate hijack exploit heap vulnerability adopts novel technique layout contributor digraph characterize vulnerability memory layout contributor instruction layout orient fuzzing explore diverge memory layout crash exploitable generate correspond diverge input stitch stitch crash diverge synthesize exp input trigger vulnerability exploitable CCS CONCEPTS security privacy penetration software reverse engineering keywords exploit vulnerability taint analysis fuzzing symbolic execution introduction due automate vulnerability discovery fuzzing vulnerability application proof concept poc input google OSS fuzz platform adopts stateof fuzzers continuously source application bug resource spent assess vulnerability identify fix automatically ass severity priority vulnerability vulnerability assessment exploitability assessment important defender attacker attacker isolate session 9D VulnDet CCS october toronto canada exploitable vulnerability exploit launch attack defender prioritize exploitable vulnerability fix allocate resource accordingly moreover defender exploit generate IDS intrusion detection signature future attack straightforward ass vulnerability analyze program crash instruction program crash security violation sanitizer AddressSanitizer microsoft exploitable inspects instruction crash exploitable transfer instruction taint target  extra recover data corrupt heap overflow enable program execute code crash reliable assessment however rely heuristic exploitability vulnerability inaccurate sometimes moreover exploit input exploitability ultimate ass exploitability vulnerability generate exploit machine demonstrate cyber challenge CGC   propose prototype thesis dynamic analysis symbolic execution generate exploit classic buffer overflow vulnerability AEG mayhem discover vulnerability automatically generate exploit source code binary respectively  generate exploit binary poc input automatic exploit generation AEG workflow analyze vulnerability detail crash dynamic analysis exploitable crash utilize symbolic execution reachability constraint vulnerability trigger constraint exploit construction constraint respectively finally constraint smt satisfiability modulo theory solver generate exploit input however machine developed CGC challenge program challenge address challenge exploit derivability issue memory corruption vulnerability trigger victim program machine weird machine exploitation actually program weird machine perform unintended behavior extremely important initial weird machine exploit however poc input fuzzers corrupt data weird machine non exploitable initial program exit crash due sanity AEG exploitable crash poc input alternative diverge exploit derivability core challenge exploitation AEG paid attention issue challenge symbolic execution bottleneck exist heavily rely symbolic execution explore program vulnerability discovery perform exploit generation AEG mayhem utilize symbolic execution explore reachable vulnerability exploitable mitigate aforementioned exploit derivability issue however symbolic execution scalability issue performs poorly exploit generation explosion issue explore consumes resource analyze blind exploitable concretize concretize symbolic argument memory allocation symbolic index memory access operation model memory enable explore sub concretize non exploitable memory challenge exploit heap vulnerability exist generate exploit heap vulnerability heap management function complicate program analysis technique analyze file malloc library glibc code heap management function deployed sanity detect heap corruption checkpoint focus exploitability assessment heap vulnerability poc input framework revery exploitable crash diverge generate hijack exploit analyzes vulnerability dynamic analysis exist AEG revery runtime information crash taint attribute variable addition inspects corrupt memory denote exceptional exceptional moreover retrieves layout contributor instruction relationship instruction revery creates layout contributor digraph characterize vulnerability memory contributor alternative diverge exploitable revery utilizes novel layout orient fuzzing symbolic execution explore diverge fuzzing revery fuzzer explore specific target crash however revery aim crash trigger vulnerability fuzzing instead ignores instruction crash aim aforementioned layout contributor instruction yield memory layout vulnerability therefore fuzzer explore diverge exploitable around vulnerable memory finally revery synthesize exp input trigger exploitable diverge vulnerability crash employ novel stitch stitch diverge crash utilizes lightweight symbolic execution generate exp input revery directly generate exploit guaranteed due presence complicate defense mechanism requirement dynamic session 9D VulnDet CCS october toronto canada stitch crash vulnerability exploitable exp input poc input stitch diverge input hijack struct char data struct int status int ptr void init int handler const int struct obj obj  int foo  obj  obj  obj init status vul   obj data vulnerability  obj status stitch  obj ptr crash stitch  obj ptr int exploitable handler  obj ptr hijack return heap overflow vulnerability overwrite obj poc input crash non exploitable successful exploit trigger exploitable decision exploitation challenge scope worth revery fails generate exploit revery exp input expert exploit built prototype revery binary analysis angr evaluate CTF capture flag program demonstrate revery effective trigger exploitable generate exploit portion specifically revery generate exploit program exist source AEG furthermore trigger exploitable another summary contribution propose automate revery transfer poc input exp input trigger vulnerability exploitable directly generate exploit propose layout contributor digraph data structure characterize vulnerability memory layout contributor instruction enable exploit related analysis propose novel layout orient fuzzing exploitable diverge without symbolic execution propose novel stitch stitch crash diverge synthesize exp input lightweight symbolic execution implement prototype revery demonstrate effectiveness CTF program motivation illustrate exploit derivability issue automate exploit generation overview revery demonstrate vulnerability heap overflow vulnerability obj obj likely allocate heap vulnerability vul met lengthy input overflow buffer obj data obj buffer corrupt therefore statement corrupt memory address respectively corrupt pointer obj ptr invalid nonexistent memory statement crash valid memory statement execute normally return statement corrupt target memory arbitrary address  perspective exploitation statement non exploitable unless return affect caller function statement trigger exploitable  primitive overwrite arbitrary target global function pointer handler invoked hijack exploit derivability exploit derivability core challenge exploitation specifically poc input vulnerability program weird machine non exploitable initial successfully exploit vulnerability exploitable alternative diverge weird machine exploitable assume poc input vulnerability fuzzers overwrite obj status non zero overwrite obj ptr invalid memory address crash poc weird machine non exploitable initial successful exploitation trigger vulnerability exploitable simplicity introduce terminology crash poc input crash instruction program crash security violation sanitizers session 9D VulnDet CCS october toronto canada  slice vulnerability analysis diverge exploration exploit synthesis vulnerability identification layout analysis prog poc  digraph layout orient fuzzing filter exploitable identify stitch diverge diverge input generate exploit exp crash stitch overview revery analyzes vulnerability crash layout contributor digraph characterize vulnerability fuzzer digraph explore diverge exploitable finally stitch diverge crash synthesize exploit vulnerability instruction vulnerability security violation happens crash multiple security violation violation denote vulnerability exploitable instruction successful exploit exploitable exploitable weird machine properly arbitrary address execute instruction AAR   classical exploitable diverge exploitable hijack instruction hijack exploitable exploitable exploitable exploitation successful exploit stitch instruction diverge crash stitch generate exploitation numerous sub stitch explore worth crash hijack exploitable aforementioned hijack  exploitable exploitable without exploit conduct successful exploitation outside poc exploitable diverge intuition origin revery knowledge exist AEG paid attention exploit derivability issue revery propose novel revery exploit derivability issue ass exploitability heap vulnerability revery analyzes vulnerability detail utilizes vulnerability information fuzzer symbolic execution explore diverge exploitable synthesizes exploitation stitch crash diverge finally generates input trigger vulnerability exploitable component vulnerability analysis revery analyzes vulnerability detail exist AEG dynamic analysis target application poc input specifically pointer memory security violation along crash identify vulnerability importantly identifies exceptional corrupt vulnerability obj revery identifies exceptional index exceptional global variable  moreover retrieves layout contributor instruction execution trace exceptional index relationship contributor instruction construct layout contributor digraph diverge exploration revery exploitable diverge exploit derivability issue symbolic execution employ fuzzing employ novel layout orient fuzzing explore diverge facilitate exploit generation diverge memory layout poc input explore fuzzer explore crash fuzzing instead crash aforementioned layout contributor instruction fuzzer guidance fuzzer diverge input diverge memory layout revery exploitable diverge heuristic identify exploitable memory operation destination corrupt exploitable furthermore revery hijack diverge hijack sometimes obvious revery heuristic infer hijack hijack enable overwrites global function pointer poc stitch exploitable diverge input diverge revery synthesize input trigger vulnerability exploitable stitch crash diverge specific data analysis session 9D VulnDet CCS october toronto canada memory  tag shadow memory tag status tag status malloc request access return pointer tag tag pointer transfer illustration heap vulnerability identification heap pointer associate memory tag extra status attach memory utilizes lightweight symbolic execution explore potential sub stitch stitch crash diverge synthesize exploitation finally generate input exploitation optimization deployed symbolic execution lightweight therefore revery exp input trigger vulnerability exploitable expert quickly generate exploit revery directly generate exploit revery generate exploit input hijack utilize exploitable overwrite global function pointer handler assumption assume victim program deployed regular operating default defense enable dep sanity glibc ASLR disabled extra information disclosure vulnerability exploit revery currently vulnerability analysis exploit vulnerability vulnerability program furthermore exploit derivability issue exploitable around vulnerability therefore revery performs vulnerability identification vulnerability performs layout analysis characterize vulnerability vulnerability identification poc input revery identify correspond vulnerability dozen propose detect memory error AddressSanitizer valgrind however AddressSanitizer valgrind slightly memory layout target application suitable exploit generation revery utilizes technique memory tag MT memory memory taint lock vulnerability recent implement memory tag hardware however encodes tag memory pointer affect program moreover detects spatial memory violation temporal violation revery shadow memory non  tag pointer heap status heap enable detection spatial vulnerability heap overflow temporal vulnerability principle pointer access specific memory valid status runtime access tag invalid status security violation vulnerability identification memory tag heap pointer attach memory tag lineage tag uniquely generate propagate pointer related pointer taint label taint analysis moreover heap associate status uninitialized status cycle allocate initialize initialize freed worth freed memory allocate memory status tag accordingly developer pointer another pointer arithmetic operation wrongly propagate tag pointer fortunately rare heap offset heap fix exception heap management function inspect adjacent semantics revery disable tag propagation validation function worth optimization pointer derive revery pointer normal security heap memory access instruction load pointer tag tag ptr target memory tag tag obj status status obj memory access violate security access intend instruction access intend tag obj tag ptr load instruction access freed uninitialized memory status obj alive instruction access freed memory status obj uninitialized violation vulnerability buffer overflow memory access violate uninitialized variable vulnerability violate UAF vulnerability violate freed memory access violate access violate freed memory tag access via dangle pointer violate layout analysis revery analyzes layout characterize vulnerability retrieve instruction contribute vulnerability related layout heap vulnerability heap overflow UAF related exceptional content corrupt vulnerability operation weird machine exploitable session 9D VulnDet CCS october toronto canada malloc mov ptr eax malloc mov ebx ptr mov ebx eax malloc mov eax mov ebx ptr mov ebx eax malloc mov ebx ptr mov ecx ebx mov ecx eax ptr ptr ptr data ptr tag tag tag tag layout contributor slice sample execution trace layout digraph layout contributor layout contributor digraph layout contributor digraph assume exceptional indexed  eventually global pointer ptr assume vulnerability pointer tag tag ptr access target tag tag obj access tag tag obj exceptional corrupt access access vulnerability UAF tag tag ptr exceptional corrupt allocation memory revery currently access violation revery index exceptional exceptional index relationship revery digraph denote layout digraph layout digraph characterizes vulnerability extent layout digraph vulnerability related code aforementioned weird machine specific initial vulnerability layout vulnerability diverge exploitation instruction contribute layout important operation contribute layout memory allocation creates operation assign pointer another revery retrieve contributor operation layout digraph generate layout contributor digraph specifically node digraph exceptional index attribute creator instruction memory tag digraph relationship attribute pointer assignment instruction target exceptional backward slice construct digraph layout contributor digraph digraph simpler layout contributor slice sequence contributor instruction execution  exploration exploit derivability issue explore diverge exploitable introduce revery explores diverge instruction instruction instruction instruction layout contributor slice longer prefix target slice alternative choice exist automate exploit generation AEG mayhem heavily rely symbolic execution explore crash reachable vulnerability exploitable along exploration however symbolic execution severe challenge suitable exploration exploitable scalable explore suffers explosion issue loop program analyze resource moreover symbolic constraint complicate symbolic execution blind exploitable concretize symbolic along exploration extra constraint concretize assignment impossible candidate concretize blindness exploitable concretize symbolic argument memory allocation model memory explore sub likely allocation exploitable concretize memory allocation non exploitable moreover concretize symbolic index memory access operation otherwise operation unknown similarly non exploitable another choice explore combination fuzzing symbolic execution driller however symbolic execution component aforementioned challenge moreover fuzzing component usually lack target effective exploitable layout orient fuzzing revery utilizes fuzzing solely explore diverge exploitable vulnerability discovery fuzzing effective symbolic execution explore program likely fuzzing diverge exploitable faster revery employ novel layout orient fuzzing layout contributor digraph explore diverge memory layout vulnerability session 9D VulnDet CCS october toronto canada queue mutate identify diverge input qemu target binary application testcases initial input code coverage slice illustration fuzzer implement revery revery extends popular coverage fuzzer afl perform fuzzing instead rely solely code coverage exploration revery layout contributor digraph guidance tune direction exploration mutation fuzzing revery fuzzer explore crash aim instruction layout contributor slice ignores instruction crash choice intuition simplicity introduce terminology input layout contributor instruction maybe slice instruction denote subsequence LCS target slice denote intuition input layout contributor instruction slice construct memory layout vulnerability layout contributor instruction responsible exceptional vulnerability index relationship input layout contributor slice probably construct memory layout intuition input longer subsequence slice likely derive input slice input LCS longer LCS input assume target slice input input mutation input derive input slice faster intuition input layout contributor instruction likely introduce exploit generation input LCS layout contributor instruction longer input input duplicate contributor instruction redundant creation layout construction memory layout complicate exploit implementation detail revery extends popular fuzzer afl afl applies continuous loop explore queue testcases selects queue mutates bunch testcases target diverge layout contributor digraph target layout contributor digraph crash align filter diverge layout target crash align binary program generate testcases qemu coverage identify coverage information revery modifies afl aspect slice revery extra buffer memory qemu fuzzer driver addition exist bitmap code coverage slice instruction slice specifically layout contributor instruction execute qemu increase slice instruction instruction slice qemu fuzzer driver slice LCS slice tune fuzzing direction revery modifies fuzzer driver slice information basically slightly algorithm selection queue mutate prioritizes longer LCS intuition LCS prioritizes slice intuition finally prioritizes faster execution afl default policy diverge input filter layout orient fuzzing revery diverge input trigger layout contributor slice poc input however unlike layout contributor digraph data constraint layout contributor slice diverge input sometimes target layout contributor digraph built crash revery extra isolate diverge input target  digraph aligns diverge crash locates instruction responsible exceptional construct layout contributor digraph exceptional diverge backward slice crash finally digraph target digraph node memory tag creator instruction address digraph digraph diverge input discard otherwise diverge input moreover session 9D VulnDet CCS october toronto canada diverge crash exploitation backward  stitch symbolic exploration poc diverge input stitch vulnerability constraint constraint payload constraint constraint exploit generation workflow exploit synthesis digraph node heap align accordingly memory tag node infer counterpart diverge crash enable analysis exploitable diverge layout vulnerability exploitable revery remove diverge exploitable exploitable exceptional affect sometimes directly indirectly sensitive operation program sensitive operation denote exploitable mainly sensitive exploitable operation memory indirect target address memory affected exceptional attacker  arbitrary address commonly exploitable attacker affect target indirect virtual function indirect jmp instruction etc hijack addition revery template expert extend definition exploitable operation launch  attack exploitable becomes identify sensitive instruction operand affected exceptional taint analysis straightforward revery creation operation taint source attache unique taint label operation propagates source operand taint label destination sensitive instruction memory function target address taint label checked exceptional taint label sensitive instruction exploitable exploit synthesis introduce synthesize exploit poc input diverge input exploitable exist AEG usually generate exploit vulnerability exploit constraint however symbolic execution solely effective exploit generation therefore revery symbolic execution lightweight symbolic execution bond stitch crash diverge reuses poc input diverge input reduce complicate constraint symbolic execution practical workflow exploit synthesis practical identifies stitch explores subpaths stitch synthesize exploitation finally related constraint generate exploit identify stitch introduce revery identifies stitch crash diverge stitch crash successfully exploit victim program vulnerability trigger exceptional corrupt revery chooses location exceptional corrupt crash stitch mention crash access violation corrupts exceptional candidate stitch access violation UAF vulnerability exceptional freed dangle pointer exceptional memory occupy another memory allocation revery memory allocation operation candidate stitch multiple violation crash multiple stitch revery stitch diverge stitch diverge successfully exploit victim program exploitable operation perform corrupt exceptional collateral stitch instruction stitch stitch satisfy criterion entry otherwise duplicate operation crash perform duplicate operation initialization legitimate infeasible stitch counterpart crash exploitable otherwise longer stitch counterpart effort symbolic execution stitch operation initialization exploitable operand symbolic execution effort minimum data dependency data stitch diverge intersection data stitch crash stitch revery diverge data dependency crash locates difference instruction difference diverge stitch revery layout contributor digraph exploitable operation operand diverge digraph digraph exceptional crash former sub graph latter crash already data dependency exploitable operation instruction diverge session 9D VulnDet CCS october toronto canada stitch crash stitch diverge stack stitch access exploitable operation operand chosen stitch otherwise node diverge digraph diverge alternate dependency exploitable operation revery chooses instruction creation diverge difference digraph stitch stitch stitch crash diverge revery explores potential sub stitch relies symbolic execution explore however revery utilizes heuristic efficiently symbolic execution revery function stack exploration inspects stack stitch respectively difference stack difference stack direction exploration function invocation crash return function invocation diverge later explore potential revery return instruction function target instruction entry function target instruction target instruction dominator stitch revery explore potential sub intermediate target instruction revery mitigates sub exploration reuse exist already sub intermediate destination diverge crash revery reuse sub revery performs loop identification algorithm sub escape loop reduce burden symbolic execution sometimes reuse sub overall unsolvable revery remove sub alternative sub revery greatly reduces burden symbolic execution explore sub stitch exploit generation sub stitch candidate exploitation construct revery vulnerability constraint constraint exploit constraint generate exploit sample however inadequate exploitable constraint simply constraint exploitation trigger exploitable diverge revery extra data constraint exploitation ensure program exploitable memory allocation exploitation diverge trigger exploitable diverge revery concrete memory allocation analyze diverge exploitation memory allocation diverge symbolic revery constraint ensure concrete diverge revery align digraph crash diverge symbolic address diverge logically counterpart crash stitch exploitation extra constraint introduce equality symbolic address payload constraint aforementioned exploitable constraint vulnerability constraint revery generate exp input trigger exploitable vulnerability input security expert construct exploit revery directly generate exploit exploitable revery construct payload constraint hijack exploitable function  jmp instruction target symbolic revery extra constraint target attacker exploitable access destination address content symbolic revery extra constraint overwrite address global offset entry global function pointer attacker revery generate exploit hijack however guaranteed succeed evaluation implement prototype revery binary analysis angr popular fuzzer afl consists code analyze vulnerability code explore diverge fuzzing code stitch generate exploit evaluation conduct ubuntu server 5G ram intel xeon cpu 0GHz evaluate revery vulnerable program CTF capture flag competition  thoroughly evaluate effectiveness revery target program CTF source code debug exist program evaluate revery CGC program heap vulnerability program binary analysis angr constraint ability complex program session 9D VulnDet CCS october toronto canada CTF vul crash violation exp gen rex gdb exploitable hijack  TU CTF UAF heap error eip hijack exploitable  fix TU CTF UAF heap error eip hijack exploitable  UAF mem eip hijack unknown  CTF UAF mem mem unknown   UAF mem mem unknown   crash mem fail marimo  heap overflow crash mem fail   CTF heap overflow crash mem fail  heap overflow crash mem fail exploitable  heap overflow crash unlink attack fail  heap overflow crash unlink attack fail  heap overflow crash unlink attack fail   heap overflow crash unlink attack fail tokyo western crash unlink attack fail    heap error exploitable   crash fail   heap overflow crash fail  heap overflow crash fail recurse UAF crash fail CTF  program evaluate revery application revery generate exploit generate exp input trigger exploitable another fail program heap vulnerability diversity vulnerability quality source CTF acknowledge program regular linux operating ubuntu defense dep enable unlike traditional environment disabled ASLR evaluation information disclosure vulnerability exploit bypass ASLR prototype revery generate information disclosure exploit exploit revery program evaluate program revery successfully exploit hijack revery trigger exploitable program exploit primitive expert launch successful exploit fail analyze program detail later detail CTF program vulnerability program heap overflow UAF crash vulnerability apply poc input vulnerable program memory manager sanity denote heap error others crash invalid memory instruction crash addition violation vulnerability detect revery exploitable trigger revery revery generate exploit revery detect security violation program trigger exploitable eip hijack arbitrary memory unlink attack program respectively revery generate exploit exploitable comparison evaluate source AEG rex  exploitable plugin gdb program rex program gdb exploitable simply ass exploitability crash investigate program detail analyze revery succeed fail hijack exploit revery successfully generate hijack exploit program poc input program corrupt heap metadata sanity deployed glibc memory allocator program crash invalid memory instruction dumped function printf hijack program crash poc limit AEG vulnerability usually non exploitable exploitability assessment successfully exploit vulnerability avoid metadata corruption sanity accurately model memory allocator symbolic execution AEG generate exploit automatically program rex automate exploit generation developed  offense CGC fail generate exploit performance revery explore exploitable diverge revery generate exploit program   fix crash freed twice exploit vulnerability heap  session 9D VulnDet CCS october toronto canada     fix  binary revery afl interval diverge trigger layout contributor slice revery afl complicate automate instead revery vulnerability diverge eip hijack exploitable hijack program counter arbitrary address   exploit primitive enable exploit modify global offset hijack exploitable sometimes revery generate exploit exploitable stitch exploitation revery trigger exploitable fail generate exploit program program critical data function pointer vtable pointer etc exceptional extremely challenge automatically generate exploit instead utilize corrupt metadata exceptional exploit specific heap allocator revery utilizes layout orient fuzzing diverge exceptional trigger exploitable glibc library link maintain  node due memory operation update backward node pointer unintended memory operation unlink attack however successfully exploit heap layout heap  technique scope however input generate revery expert manually massage heap layout exploit quicker fail aforementioned revery cannot guarantee generate exploit trigger exploitable revery fail program limitation vulnerability detection program revery fails detect security violation challenge  buffer overflow inside corrupt data revery currently corruption detection     fix  binary revery afl interval exploitable diverge revery afl future detection buffer overflow limitation angr revery relies angr perform symbolic execution angr emulates syscalls fully implement alternatively angr rewrite library function python hook function however angr cannot program evaluate revery CTF program exploit  characteristic  function function hooked angr feature properly implement revery exploit vulnerability efficiency layout orient fuzzing evaluate efficiency revery diverge exploration exploitable layout orient fuzzing fuzzer afl evaluate efficiency layout orient fuzzing fairly revery afl exploitable module revery evaluate generate fuzzers interval revery afl input instruction layout contributor slice average revery faster afl revery spends afl exploitable diverge afl fail exploitable program contrast revery exploitable program program afl revery succeed revery faster afl average layout orient fuzzing revery diverge exploitable faster afl layout orient fuzzing driller driller exploitable program program symbolic execution driller invoked probably driller CGC program bug elf binary session 9D VulnDet CCS october toronto canada vul revery gen reuse rate revery exp  gen  exp UAF fail bof fail  bof fail bof fail bof fail UAF unknown  bof fail marimo bof fail  bof fail  UAF fail bof bof  UAF  fix UAF comparison symbolic execution efficiency stitch candidate exploitable revery utilizes novel stitch generate input trigger vulnerability exploitable theory symbolic execution solely explore vulnerability exploitable efficiency evaluate revery strawman symbolic   angr overall evaluation program angr handle revery generate exp input trigger exploitable program  exploitable program vulnerability crash effort explore  fail program fail program reuse rate reuse rate ass quality stitch revery rate compute reuse diverge exploitation reuse rate indicates stitch exploit generation program reuse rate failure analysis  fail program traditional symbolic execution unable infer exploitable constraint fails generate exploit revery infer constraint diverge program  marimo listing code fragment  manage  listing target exploitable function manage trigger argument null retrieve ack printf  tmp index tmp edit marimo marimo index marimo ptr marimo marimo ptr marimo marimo   CTF program marimo data constraint essential generate heap overflow exploit symbolic index array traditional symbolic execution  concretize symbolic index null pointer array trigger exploitable marimo illustrates vulnerability marimo overflow marimo corrupts marimo marimo edit marimo function exploitable trigger however angr knowledge random solver revery knowledge crash extra constraint exploitable generate exploit successfully related automatic exploit generation revery aim automatic exploit generation challenge propose AEG symbolic execution  automate exploitation patch analysis AEG develops novel precondition symbolic execution prioritization technique generate exploit source code mayhem built hybrid symbolic execution memory index model technique automatically generate exploit binary symbolically execute program scalable exploration unlike revery unaware exploitable constraint previous AEG derivability usually stack overflow exploitable crash format exploitable vulnerability vulnerability heap vulnerability exploitable crash diverge explore moreover concretize symbolic symbolic execution practical mayhem proposes prioritize concretization aforementioned concretization non exploitable session 9D VulnDet CCS october toronto canada AEG crash analysis   dynamic taint analysis program verification generate controlflow hijack exploit crash poc input similarly crash  symbolically executes program exploitable automatically generates exploit binary crash exploitable aforementioned exploitable exist crash hinder exploit derivability issue contrast revery explores exploitable crash diverge data orient AEG  automatically generates data orient exploit information disclosure privilege escalation stitch multiple data without although stitch revery target data stitch intact symbolic execution easy exploit data attack instead hijack attack AEG  novel framework facilitate kernel UAF exploitation  utilizes fuzzing dereference site dangle pointer contrast revery utilizes layout orient fuzzing explore diverge exploitable   AEG web application  sql injection site script XSS attack automatically  systematically navigation structure database web application automatically generate exploit AEG binary application revery fuzzing revery utilizes fuzzing explore diverge advance recent coverage fuzzing aim increase code coverage fuzz coverage fuzzing afl libfuzzer honggfuzz aflfast vuzzer collafl  fuzzers prioritize code coverage mutation however target specific code memory efficient explore diverge satisfy requirement target fuzzing focus aflgo greybox fuzzing aflgo prioritizes closer predetermine target code enable efficient fuzzing interested trigger multiple layout contributor instruction instruction aflgo effective explore diverge multiple target revery fuzzer layout contributor slice explore diverge exploitable efficiently vulnerability detection revery utilizes memory tag detect security violation sanitizers propose purpose  pad redzones freed quarantine detect spatial temporal violation valgrind replaces heap management function modify implementation redzones detect memory safety violation softbound bound information pointer disjoint metadata enforce completely spatial memory safety program  lock address pointer disjoint metadata pointer dereferences enforce temporal safety program slightly memory layout target program instrumentation suitable exploit generation contrast revery utilizes shadow memory tag pointer status heap non  discussion AEG challenge revery towards goal challenge limited advanced defense defense propose deployed popular attack defense attacker hinder automate revery bypass ASLR lack ability information disclosure trigger exploitable program generate defense sanity deployed heap allocator heap layout massage heap vulnerability exploit specific memory layout due complexity memory allocator program behavior challenge generate input memory layout combination multiple vulnerability successful exploit usually multiple vulnerability assemble vulnerability utilize corruption craft exploit program comprehension analysis successfully exploit program understand program behavior input output dynamic decision runtime addition program analysis extract information aforementioned widely symbolic execution limitation conclusion exist AEG challenge exploit derivability issue symbolic execution bottleneck heap vulnerability propose revery exploitable diverge crash novel layout orient fuzzing stitch trigger vulnerability exploitable portion vulnerable application successfully generate exploit vulnerability towards practical AEG