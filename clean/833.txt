intel software guard extension sgx hardware trust execution environment tee security critical application however terminate traditional memory corruption vulnerability software inside enclave enclave software developed unsafe rust sgx efficient layer approach  memory corruption software inside sgx enclave enable development enclave program efficient memory rust rust sgx sdk challenge sgx software memory meanwhile efficiently sdk intel therefore propose rust sgx atop intel sgx sdk tame unsafe component formally proven memory safety implement rust sgx series benchmark program evaluation rust sgx imposes extra overhead respect sgx specific feature service software developed intel sgx sdk meanwhile memory safety CCS CONCEPTS security privacy formal theory security security keywords sgx rust program memory safety soundness introduction software developed unsafe memory corruption buffer overflow integer overflow memory corruption attack severe cyber threat numerous attack morris worm stack smash return libc return orient program rop variant BROP jit rop orient program  orient program cop data orient program DOP likely attack remain cyber threat intel introduce software guard EXTENSIONS sgx skylake cpu application programmer capability execute code secure enclave namely isolated trust execution environment tee sgx isolates sensitive code data operating hypervisors bios application guarantee confidentiality integrity enclave program software operating hypervisors bios compromise however sgx hardware guarantee memory safety software inside enclave developed memory unsafe assembly sgx program traditional memory corruption vulnerability traditional software seriously undermine security guarantee sgx attacker violate integrity confidentiality enclave program instance enclave code implement memory corruption vulnerability attacker leverage return orient program rop perform memory hijack leak secret although  approach propose mitigate attack sgx runtime inherently contains memory address fix therefore completely  threat decade defense mechanism propose defeat memory corruption attack stack canary data execution prevention dep address layout randomization ASLR integrity CFI forth however imperfect session tee II CCS november london united kingdom various performance outweigh potential protection incompatibility legacy rely compiler chain access program source code imperative alternative secure sgx enclave program sgx brand platform legacy application perfect opportunity efficient memory develop enclave program instead rely traditional defense ASLR CFI variety program memory feature rust swift javascript java python solidity enable program sgx program development appeal approach terminate memory corruption inside enclave however enormous challenge enable memory enclave software development memory program memory unsafe component java jvm python library swift runtime javascript garbage collection GC assembly code rust unsafe feature component inside enclave developed memory sgx feature specific instruction remote attestation performance critical cryptography operation assembly therefore impractical component inside sgx enclave memory practical memory safety inside enclave layer rust sgx memory sgx sdk propose observation specifically leverage intel sgx sdk foundation fledge sgx development apis rust layer rust sgx enclave programmer develop program pure rust  bridge gap rust intel sgx interface enclave program developed intel sgx sdk enclave program developed rust sgx significantly secure application layer thanks memory rust whereas library layer equivalent security due dependency intel sgx sdk enable rust atop intel sgx sdk non trivial challenge foreign function interface ffi memory memory unsafe rust secure rust sgx address issue via formalize model proof memory safety ffi formalization inspire  java native interface jni tan extend secure critical boundary code bridging rust unsafe implement rust sgx benchmark program evaluation rust sgx sdk imposes imperceptible modest overhead respect sgx service software developed intel sgx sdk rust sgx release source project widely employ community develop memory sgx enclave community adoption rust sgx program rust sgx productive efficient reliable contribution summarize contribution rust sgx practical layer approach  memory corruption sgx enclave program propose safety formal proof handle unsafe component layer memory safety model implement rust sgx evaluate benchmark program evaluation rust sgx fully preserve sgx functionality meanwhile impose significant performance overhead roadmap organize background related intel sgx rust program describes objective threat model scope challenge architecture rust sgx perform secure binding rust formalize memory safety implementation evaluation application  respectively discus limitation future related finally concludes background intel sgx intel sgx application capability execute code secure enclave secret execution environment sgx application programmer directly security application without rely underlie software OS hypervisor significantly reduces trust compute TCB code code execute inside enclave trust prevents various software attack software compromise sgx application typically implement component trust component untrusted component trust component execute inside enclave whereas untrusted component execute outside data trust untrusted component enclave enclave memory cannot directly outside enclave intel mechanism bridge function correspond sgx sdk bridge function enclave entry dispatch correspond function inside enclave allows enclave function specify developer function  untrusted component correspond function reside untrusted component  invoked inside enclave request service outside rust program rust program developer efficient implementation software session tee II CCS november london united kingdom functional imperative procedural program rust memory zero abstraction unique statically guarantee absence uninitialized variable dangle pointer memory safety bug meanwhile rust rely automate garbage collection reclaim memory resource instead rust statically lifetime manage smart pointer rust null pointer data structure acyclic important concept rust gain statically verifiable memory safety memory ownership memory ownership dictate memory owner variable program owner variable scope automatically deallocated variable temporarily borrow owner return owner lifetime borrow unlimited immutable whereas mutable borrows exclusive rust ensures memory mutable aliased eliminate memory error however rust mechanism programmer code bypass memory safety compromise rust interact manipulate hardware directly safety rust applicable code across irregular program boundary unsafe keyword introduce unchecked code convenience additional security audit overview objective threat model scope objective rust sgx remove memory corruption vulnerability inside sgx enclave enable enclave software development memory memory python instead efficient memory focus rust however ensure implementation impose significant performance overhead enable rust sgx enclave program rust sgx threat model intel sgx namely software inside enclave trust operating hypervisors untrusted attack rust sgx aim defeat memory corruption exploit insecure memory operation inside enclave program additional mechanism defeat various channel attack cache enclave program orthogonal memory safety aim focus enable application layer memory safety memory safety layer software core sgx library cryptographic function implementation sgx core service routine within scope rust sgx enclave developer building memory sgx application however enforce strict adherence memory program application developer abuse unsafe feature mention rust program exploitable memory bug completely secure development enclave code audit manually automatically machine deployed rust program significantly easy audit memory unsafe presence unsafe code nevertheless audit enclave code within scope challenge direction memory  scratch without rely anything layer approach rust sgx built atop exist fledge sdk intel sgx sdk rust sgx scratch appeal unfortunately erroneous challenge sgx enclave program heavily involve cryptographic computation abstract apis communicate outside enclave message encrypt challenge implement cryptography apis directly rust without assembly code performance cryptography algorithm speedup assembly program notable intel native aes NI hardware implementation cipher directly invoked assembly code rust contains unsafe rust rust sgx inevitably assembly code efficient cryptographic api implementation develop rust sgx purely rust already  intel sgx sdk available contains performance efficient implementation cryptography apis sgx functionality seal remote attestation implement another achieve performance therefore rust sgx atop intel sgx sdk challenge namely guarantee program developed rust sgx efficient performance enclave program developed traditional sgx SDKs integration intel sgx sdk unsafe rust safety guarantee spite unsafe component layer approach practical ensure interface layer secure instance apis rust sgx programmer ensure foreign function interface ffi secure argument ffi function interpose verify finally engineering challenge implement rust sgx due discrepancy program execution model enclave program traditional rust program instance static data easily initialize rust mechanism sgx enclave unlike rust thread sgx thread constructor destructors addition rust mutex sgx pthread mutex properly implement rust mutex sgx enclave session tee II CCS november london united kingdom intel sgx trust apis libs rust sgx trust apis libs securely binding rust enclave application rust trust runtime service     standard libs     enclave application trust runtime service sgx  sgx  sgx  standard libs sgx  sgx  enclave application overview rust sgx architecture overview rust sgx layer inside rust sgx layer intel sgx sdk implement assembly layer rust foreign function interface ffi layer rust sgx sdk rust sgx memory safety rust memory meanwhile ensure interface interact intel sgx sdk memory cannot verify memory safety intel sgx sdk due code ensure interaction rust secure rust escape ensure memory safety rust issue java interacts java native interface jni however substantial difference rust java totally independent aspect meanwhile sgx sdk variety data mapping rust sgx detail achieve mapping secure binding rust layer rust sgx consists code rust naturally securely bind memory safety rust relies security invariant arbitrary combination cannot guaranteed memory therefore additional enforcement interact assure construct securely bound previous research investigate achieve memory safety context manner interacts unsafe developed scheme safely function inside java runtime environment via java native interface jni situation rust sgx although safety java rust enforce via mechanism detail independent approach therefore modify extend technique securely binding rust underlie intel sgx sdk carefully foreign function interface ffi core regulate behavior unsafe code via memory management scheme advanced pointer operation memory management scheme restrict expressiveness unsafe affect programmer productivity rust sgx however concern safely wrap fix apis guaranteed stable intel thorough review intel sgx sdk semantics apis suitable aforementioned safety regulation feasible memory interpolation scheme rust intel sgx sdk safety formally worth mention purpose memory rust foreign function interface securely rust interface intel sgx sdk therefore exclude considerable proportion semantics consideration address enumeration reasonable amount manual intel sgx sdk finite data structure apis extensible enclave developer memory management manually audit semantics intel sgx apis clearly document intel manual function ensure segregation heap manage rust apis reference memory manage caller therefore intel apis preserve safety invariant rust heap without additional regulation however intel apis expose allocate private heap outside rust sgx sha init api return allocate initialize sha context later reclaim intel sdk api sgx sha loophole allows rust code corrupt heap mitigate rust sgx potential access heap via rust code binding inappropriately rust code manipulate internal suppose hidden demonstrate concern resolve introduce safety enforcement explain directly related memory management rust code heap freed memory error session tee II CCS november london united kingdom  raw intel sgx sdk apis sgx sha init sgx sha pub struct  handle sgx sha handle impl  initialization intel sgx api allocate heap handle pub unsafe sgx sha init mut handle impl  exit scope automatically via intel sgx api pub mut unsafe sgx sha mut handle  style heap management rust error implement wrapper sgx data structure allocate heap wrapper resource acquisition initialization  style memory management task release heap completely delegate lifetime semantics rust security safety heap therefore guaranteed soundness rust memory management scheme display conceptual  memory management rust user  construct static function lifespan automatically securely release internal reference data heap automate extract formalize semantics apis intel reference inspection manually perform experienced security researcher professional finite intel sgx apis reasonably stable manual effort manageable mostly memory access important security enforce rust sgx safety mismatch rust primitive define conversion semantics rust std libc  definition rust  library platform dependent numerical along routine safely cast correspond rust however complex define intel sgx sdk built rust representation naive refer complex void rust apparently abstraction unsound easily confusion error prevent conversion incompatible rust introduce handle rust define correspond rust  essentially pointer refer memory chunk interpret legal rust  equality function argument init flag handle initialize pointer operation define sgx specific semantics obtain  rust initialization null pointer intel sgx sdk api initializes rust allocate memory chunk achieve safety memory access rust memory access raw byte intel sgx apis memory  manner apis treat memory chunk raw byte ignore semantics memory chunk apis mostly cryptography task convert inmemory data structure byte array memory variable access bound address refer intel sgx sdk manual intel apis perform bound  memory access caller specify memory additional parameter api sgx seal data function encrypts data aes gcm derive secret unique cpu chip function parameter contains unsigned integer parameter byte pointer ptr parameter safely api caller ensure parameter integer correctly bound memory refer pointer parameter abstractly parameter pointer bound information formalize seq sequence pointer define  byte notation rust sgx seq  byte generic constructor concrete model array byte regulate usage byte pointer define trait  data structure contiguous memory layout trait derive byte pointer whoever implement  responsible safety conversion  unsafe trait prevent enclave developer rust sgx abuse byte pointer unsafe keyword purely syntactical necessarily actual lack safety indeed session tee II CCS november london united kingdom sgx status sgx seal data memory access const uint additional  const uint ptr additional  memory access const uint  const uint ptr  writable memory access const uint seal data sgx seal data ptr seal data intel sgx api bound memory access rust interpolation notation operation byte pointer arithmetic pas apis content non overlap byte described memory location  convert byte  construct byte  equality validity guarantee enclave developer securely implement trait unsafe code easy audit security professional similarly define unsafe generic trait  static function byte safely construct byte pointer implementation  obligate sanitize raw byte array ensure memory valid summary rust sgx securely wrap intel sgx apis inside rust formalization proof formal proof memory safety intel sgx sdk binding rust sgx formal LR model subset rust relevant secure intel sgx sdk binding scheme formalization resembles  java native interface jni tan considerable amount formally model verify security rust program clarify scope emphasize formalization proof aim demonstrate memory safety foreign binding intend verify security implementation unsafe rust code inherit official rust standard library code fulfillment objective powerful theory significantly labor scope    intel sgx apis constructor  ref LR bool int   byte  null false sgx sgx error ref  handle  byte  nstart  failsafe expression init statement alloc byte byte byte syntax LR syntax LR simplicity LR function declaration definition instead treat function important memory safety built statement statement alloc byte allocate byte array rust program statement concretize variable loop scoping model LR assume temporal safety enforce rust compiler define intel sgx apis model callable built denote apis rust sgx sgx sgx error correspond intel sgx api successful session tee II CCS november london united kingdom ref  pointer exclusively parameter intel sgx apis rust indeed reference irrelevant formalization handle  denotes   memory address underlie hidden binit correctly initialize byte  nstart  denotes chunk raw byte memory bound information singleton failsafe error introduce simplify semantics implement exception simply termination program worth syntax LR contains notation correspond handle LR semantics bound notation explicit instantiation convenience TC denote universe intel sgx apis universe valid LR denote TR valid LR  enclave developer handle rust implement byte byte LR however another security concern arises correctness data serialization serialization handle enclave developer define arbitrarily complicate data structure serializable tackle serde rust library sgx serde toolkit secure automate data serialization deserialization rust rust sgx enclave developer encourage pas custom data structure apis intel sgx sdk defines LR statement information although constraint  void statement phantom void indicates computation denote union intersection respectively formally operator define expression explanation  null pointer handle handle initialize null aforementioned failsafe lattice valid LR  typical inference meta constraint impose intel sgx apis native sgx api byte int reference  parameter return  notify caller invocation fails although LR reference handle http serde reference moreover dereference operation LR modify memory reference intel sgx apis reference parameter critical safety memory operational semantics define semantics LR mathematical construct program universe variable program program variable variable memory location universe program memory configuration mapping model private memory intel sgx sdk throughout program execution invariant rng dom variable allocate chunk memory express operational semantics judgment expression evaluation statement evaluation notation evaluate expression computation statement modify program safety define formal memory safety guarantee LR satisfies intuitively LR memory environment honestly describes program memory abstract introduce concept consistency memory memory location TR TC byte byte meta memory confuse byte valid LR meta data allocate chunk memory define valid KΠ LR pointer valid depends define  TC agnostic LR fundamental implementation intel sgx sdk transparent  nevertheless assume intel sgx sdk securely implement information formalize safety formally define safety program definition program notation indicates program environment respect def dom dom dom dom  KΠ session tee II CCS november london united kingdom int int bool false false bool  sgx   sgx error   null handle TC   handle TC  byte byte  nstart  byte failsafe failsafe TR   byte int ref  TC expression  int int int  byte int byte neg bool bool int byte  TC bool ref  ref    init bool statement  void  void    int alloc byte byte   byte byte  byte  byte seq bool void loop bool void notation TR universe valid LR TC universe subtype relation union intersection LR program program program program safety establish via theorem theorem safety program expression initial program environment exists failsafe KΠ theorem safety program statement initial program environment exists session tee II CCS november london united kingdom   false   sgx sgx error  KΠ handle dom TC  byte dom byte  KΠ ref dom valid within failsafe KΠ simplicity notation define invariant judgment TR KΠ context expression evaluation similarly TR KΠ statement evaluation theorem progress preservation typed program stuck computation computation preserve proof theorem induction structure expression statement LR formalization theorem assumes computation terminate although LR loop formalization easily extend non terminate situation operational semantics LR display operational semantics LR conventional program semantics integer boolean operation formalization mostly trivial omit formalization mixed notation syntactical operational simplicity clarity understand text safety dynamically checked marked frame fail evaluation generates failsafe failsafe blocker computation  semantic principle  sub statement evaluate failsafe entire expression statement evaluate failsafe imaginary  propagates computation indefinitely ensure safety statement byte byte allocate memory instead modify input content implementation sometimes optimize performance semantics intel sgx apis complicate others previously mention intel sgx api parameter integer array bound handle private assume implementation intel sgx apis preserve safety assumption formalize predicate frame semantics init expression implementation primitive dependent handle primitive implement bundling handle instance companion variable data structure properly initialize intel sgx sdk api nevertheless initialization handle mostly irrelevant memory safety instead LR ensure temporal safety stateful data structure operation soundness proof sketch safety expression theorem induct structure proof sketch demonstrate trivial similarly omit lemma safety plus expression initial program environment exists failsafe KΠ proof assume exists   applies proof split  applies int assumption failsafe  conclusion failsafe failsafe failsafe proof obligation successfully evaluate  semantics  applies therefore integer definition   applies byte int assumption evaluate  evaluate session tee II CCS november london united kingdom expression var ref ref   byte byte statement  seq   false   false    nstart nstart nstart  dom alloc byte byte nstart nstart nstart  nstart nstart    sizeof alloc byte  byte nstart nstart nstart  byte byte nstart nstart nstart  nstart nstart  LVM byte sizeof  byte nstart   LM nstart nstart  KΠ alloc byte  nstart byte byte LM nstart    int int  handle ref ref  byte byte   handle  int int ref ref ref ref byte byte byte byte byte byte overlap exists dom dom sgx error proposition frame dynamically checked failsafe generate fail proposition frame assumption intel sgx api semantics notation LVM byte interpret memory sequence byte notation  interpret byte sequence memory operational semantics session tee II CCS november london united kingdom failsafe sufficient exists   letv byte  dynamic commenced fails evaluate failsafe otherwise semantics  applies per byte easy verify byte  safety statement theorem theorem induct structure statement expression statement immediate corollary theorem corollary initial program environment exists failsafe KΠ non expression statement statement assume instance intel sgx api invocation statement compound statement evaluate statement without potentially non terminate loop statement immediately evaluate statement structure statement recursively safety sub statement eventually proof statement theorem sufficient lemma lemma recursive safety program statement initial program environment exists failsafe KΠ exists sub statement  statement alloc byte statement demonstration strategy statement safety accord  alloc byte statement byte lemma safety byte allocation statement initial program environment exists alloc byte byte alloc byte failsafe alloc byte  proof per  int induction assumption failsafe  derives failsafe due failsafe propagation alloc byte failsafe otherwise  dynamically positive evaluation failure heap allocator memory contiguous byte heap evaluation fails safely dynamic succeed semantics  applies alloc byte byte nstart nstart nstart nstart address newly allocate memory byte nstart nstart valid byte respect byte nstart nstart nstart  nstart byte nstart byte assumption correctness heap memory allocation nstart nstart dom therefore byte nstart nstart nstart  definition dom dom domain disjoint dom dom nstart nstart already dom definition rng nstart nstart rng nstart nstart byte nstart nstart unify safety disjoint memory layout session tee II CCS november london united kingdom summary loc rust sgx implementation component code trust trust sgx runtime trust platform service trust cryptographic trust exchange trust file sgx rust standard library others untrusted untrusted sgx runtime untrusted sgx cryptographic implementation mention sgx program typically component trust component inside sgx enclave untrusted component interacts enclave accordingly implementation rust sgx sdk trust untrusted challenge related trust engineering perspective however untrusted enclave developer develop sgx program rust trust broken component rust sgx sdk component rust standard library sgx execution environment component depends rust standard library rust wrapper intel sgx sdk apis broken component sgx runtime platform service sgx cryptography trust exchange file etc amount code component  implementation detail component rust standard library sgx standard library crucial program platform incomplete standard library exclude rust standard library compatible sgx non trivial component rust std refactored inside sgx component mostly related thread synchronization exception handle illustrates rust std refactoring rust sgx maintains refactored compatible component simply reuse code upstream rust component update thread program concurrency rust initialize data source code rust sgx release github http github com baidu rust sgx sdk thread local storage launch thread mention sgx systematic mechanism allows developer customize construction data thread local storage TLS implement mechanism rust sgx engineering complicate sgx unbound thread policy allows untrusted thread enclave exist thread structure TCS allocate inside sgx untrusted thread corrupt rust TLS preempt another untrusted thread ocall operation however aware secure mechanism identity untrusted thread enclave therefore  thread local storage enclave configure unbound TCS policy mutex rust implementation mutex internal interface sys mutex interface decouples mutex abstraction visible programmer actual mutex implementation hardware dependent code sys mutex confirm primitive implement mutex intel sgx sdk therefore implement wrapper layer convert raw mutex intel sgx sdk rust sys mutex enable rust standard mutex sgx exception handle rust style exception handle redefine rust panic mechanism customize panic handler implement rust unwind mechanism standard implementation compatible sgx program model rust sgx developer exception handler  unwind mechanism handle exception static data initialization unix platform static data dynamic library initialize library load  sgx procedure static data enclave initialize ecall happens trust runtime service sgx implement mechanism initialize static define enclave elf init array rust static data initialization implementation platform specific sgx static initialization functionality trust sgx runtime service rust adopts lazy initialization scheme meaning static data fully initialize access therefore static variable associate initialization rust sgx concurrency lazy initialization thread mutex primitive sgx secure binding rust introduce formalize sanitize interaction rust unsafe session tee II CCS november london united kingdom panic abort  unwind rust   libc glue  compiler  glibc rust standard library rust standard library sgx panic abort  sgx unwind rust    glue  compiler  trust libc  sgx runtime service sgx backtrace sgx FS component maintain rust sgx sgx  rust sgx std rust std program location sanitize secure rust binding rust sgx component securely wrap apis memory management manipulation raw byte memory access trust sgx runtime trust platform service trust cryptographic trust exchange trust file particularly interface intel sgx sdk implementation sanitization scheme purely relies native rust display detailed breakdown program improve performance carefully optimize redundant operational semantics operational semantics byte statement chunk memory allocate construct  rust performance critical function optimize scheme construction style program optimize strategy carefully audit modification security breach evaluation performance evaluation rust sgx benchmark evaluate performance overhead software developed rust sgx microbenchmark characterizes overhead individual sgx specific apis rust binding intel sgx sdk  characterizes individual rust program developed rust sgx perform machine intel cpu 4G ddr ram 2G hdd ubuntu operating cpu microcode revision date execution benchmark program utilize operating granularity nanosecond benchmark multiple average source code benchmark release github http github com  linux rust sgx benchmark microbenchmark microbenchmark aim evaluate overhead  respect apis intel sgx sdk therefore intel sgx sdk baseline comparison instal intel sgx sdk correspond driver version comparison conduct software developed intel sgx sdk rust sgx sdk apis intel sgx sdk cannot report instead evaluate report apis rust binding involve sgx specific instruction   ecall ocall feature attestation service seal unseal meanwhile apis likely enclave program multiple overhead apis overhead enclave creation destruction therefore criterion eventually microbenchmark program average overhead session tee II CCS november london united kingdom normal ocall  ocall normal ecall  ecall sgx sgx report sgx verify report normalize overhead intel sgx sdk rust sgx sdk evaluation microbenchmark enclave exit attestation seal data normalize overhead intel sgx sdk rust sgx sdk evaluation microbenchmark sgx seal data varied input enclave exit rust sgx apis enclave developer exit enclave evaluate overhead rust binding microbenchmarks normal ecall  ecall normal ocall  ocall intel collection  feature eliminate enclave transition sgx application  ecall ocall characterize rust impact important feature normalize overhead  ecall slightly difference extra maximum overhead trust service intel sgx sdk apis trust service attestation retrieve cryptography attestation report verify rust sgx correspond binding  data normalize overhead intel sgx sdk rust sgx sdk evaluation microbenchmark sgx unseal data varied input microbenchmarks sgx sgx report sgx verify report verify report input empty maximize potential overhead rust binding normalize overhead overhead sgx seal unseal enclave program seal data enclave disk storage later unseal multiple sgx seal data sgx unseal data characterize overhead byte kilobyte input evaluate overhead seal unseal infer overhead commonly cryptography function rijndael aes gcm hmac function involve seal unseal normalize overhead interestingly rust version seal unseal apis actually perform slightly faster intel seal unseal input rust sgx largely rewrite seal unseal apis rust directly invoke intel aes gcm cryptography primitive apis memory safety principle propose redefine interface implementation transparent statement statement rust translation safer typed interface slightly performance input difference input processing dominates rust binding performance gain rust compiler implementation accord microbenchmark evaluation overhead maximum baseline intel sgx sdk therefore rust sgx session tee II CCS november london united kingdom  spectral  mandelbrot normalize overhead rust sgx sdk fortanix rust EDP sdk evaluation  program developed fortanix rust EDP rust sgx performance sacrifice built atop intel sgx sdk respect sgx specific feature due difference timing minimize execute microbenchmark function   aim evaluate overhead rust program developed rust sgx cannot rust program program comparison inappropriate essentially comparison specific issue compile link optimization instead really quantify overhead rust sgx rust sgx SDKs fortunately public release repository fortanix rust EDP github recently project platform develop rust program sgx enclave therefore rust program developed rust sgx fortanix rust EDP develop typical rust program luckily program benchmarking website benchmark rust program website successfully evaluate overhead rust sgx fortanix rust EDP program cannot  multi thread parallelism benchmark incompatible intel sgx depends  available sgx evaluation benchmark rust program fortanix rust EDP overhead rust sgx rust program directly rust sgx fortanix rust EDP perspective operating  data parallelism library  github com   rust sgx performance fortanix due fortanix rust EDP sdk depends rust  optimization feature sgx secondly fortanix rust EDP sdk replaces ecall ocall intel   heavily enclave program performance significantly affected rust sgx instead sgx customize rust standard library sgx optimization APPLICATIONS rust sgx infrastructure memory sgx enclave program development demonstrate application developed mostly developed community contributor demonstration application program rust sgx productive efficient reliable TLS sgx remote attestation attractive security feature intel sgx confidential data client remotely attest enclave assure execution environment indeed secure intel sgx sdk reference implementation attestation modify sigma protocol client enclave secret remote attestation succeed rust sgx development easy application rust sgx implement complicate secure communication protocol modest engineering effort theoretically secret enables establishment secure communication channel however functionality communication mechanism intel sgx sdk intel propose integrate sgx remote attestation TLS protocol friendly interface developer sgx enclave client therefore implement algorithm described rust  enclave code consists rust code exclude library dependency sgx validate critical version extension verify certification error prone engineering task rust sgx easy performance scientific computation rust sgx suitable processing scientific data meanwhile preserve confidentiality  privacy security workshop genomic data privacy security protection competition significant nucleotide polymorphism database genome chi competitor data inside sgx enclave prevent privacy leakage judging criterion computation correctness participant contest chose develop rust sgx performance   worth none member session tee II CCS november london united kingdom  secure genome analysis competition pre processing input pre processing GB computation correctness CEA   fujitsu UT dallas   winner CEA rust sgx contestant program source http github com CEA  involve development rust sgx interpret evidence rust sgx user friendly performance efficient machine preservation user privacy machine task become concern AI boost computation sgx reliable platform secure multi computation provider model provider client securely segregate developer rust sgx perform sgx specific optimization relax constraint limited sgx physical memory researcher built inference gradient boost decision GBDT algorithm rust sgx  optimize memory access sgx implementation volume data inside MB sgx physical memory performance slowdown implementation untrusted hardware discussion release rust sgx adopt developer community secure sgx enclave usability reliability rust sgx fully demonstrate software engineering however admit rust sgx cannot intend promise absolute security weakness secure methodology fails argue security practical engineering benefit rust sgx mere research prototype instead aim quality infrastructure production software development specifically source potential insecurity rust sgx code built upon previously explain rust sgx depends code sgx standard library intel sgx sdk dependency libc inherit official rust implementation avoid libc extensively refactor official rust implementation impractical rust constantly involve rapid pace introduce massive amount code incompatible upstream maintenance rust sgx extremely drove rust sgx intel sgx sdk instead enclave abi pure rust abstraction layer fortanix rust EDP intel sgx sdk quality implementation various cryptography algorithm assembly  rust performance degradation incompatibility nist standard channel intel provider library important privacy preserve application intel math kernel library intel library sgx version likely intel sgx sdk related attack defense enclave memory corruption enclave software developed memory corruption vulnerability exploit rop memory corruption attack sgx exploit memory corruption vulnerability sgx enclave utilize return orient program rop rop attack traditionally rely gadget instruction return statement attacker execution insert malicious function address stack however perform rop attack sgx significantly traditional rop attack target code protection hardware enclave code data accessible outside enclave rop achieves attack exploit exception handle mechanism sgx construct oracle hint attacker internal status enclave execution attacker useful gadget exploit however  assumption memory layout constant randomize sgx shield performs address layout randomization ASLR sgx environment prevent memory corruption employ grain randomization along non readable code render traditional attack perform however randomization fully implement sgx transition host code enclave code trust library attack guard dilemma exploit memory corruption efficient code reuse attack intel sgx finegrained randomization sgx shield previous attack enclave crash kernel privilege session tee II CCS november london united kingdom assumption memory layout constant non randomize guard dilemma bypass enclave crash  sgx shield sgx shield trust randomize avenue attacker guard dilemma employ knowledge implement attack bypass sgx shield without kernel privilege sgx various effort development deployment sgx enclave program library OS   graphene sgx aim legacy program sgx without modification approach mimic program primitive posix pthread apis inside sgx program aware hardware environment knowledge exist library OSes implement unsafe significantly increase TCB code moreover legacy program align sgx threat model vulnerable infamous  attack secure enclave memory rust sgx enable secure productive enclave development  source python spin sgx  mostly  typed python dialect code formally verify commercial abstract interpreter  research project runtime sgx programmer execute  within enclave rust security sgx  secure principle rust program formal verification memory none rust safety formally proven  formal safety proof subset rust machine checked safety proof  formalize static dynamic semantics feature rust fundamental theorem coq proof assistant  proven safety important rust standard library member unsafe code related memory management synchronization release rust sgx methodology building secure enclave memory inspire effort related fortanix rust enclave development platform fortanix rust EDP release fortanix EDP application binary interface sgx hardware fortanix rust EDP slightly engineering focus rust sgx specifically  focus memory safety compatibility trust execution environment whereas fortanix rust EDP engage memory safety compatibility rust standard library portion rust standard library cannot securely implement sgx environment variable timing networking rust sgx chooses component user functionality http github com  linux  responsible choice fortanix EDP fully compatible standard rust everything cannot implement inside sgx delegate untrusted application OS outside enclave conclusion rust sgx sdk sgx programmer develop memory enclave program scratch rust instead layer approach building atop intel sgx sdk formally proven secure interface rust implement  benchmark evaluation rust sgx sdk impose extra overhead sgx related service software directly developed intel sgx sdk overall enclave program developed rust sgx performance intel sgx sdk memory safety application layer rust