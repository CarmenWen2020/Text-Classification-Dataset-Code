data prefetching hardware optimization mechanism microprocessor fetch data cache novel microarchitectural attack exploit prefetching mechanism attack target instruction pointer IP stride prefetching intel processor stride prefetcher detects memory access regular stride likely lookup cryptographic implementation monitoring prefetching activity lookup attacker extract sensitive information secret victim application leakage prefetching constant algorithm prevent channel attack potential propose attack apply elliptic curve diffie hellman ECDH algorithm built upon version openssl library knowledge microarchitectural channel attack exploit hardware prefetching microprocessor CCS CONCEPTS security privacy cryptanalysis attack keywords hardware prefetching microarchitectural channel attack openssl ECDH algorithm introduction microprocessor utilize variety microarchitectural achieve hardware optimization attractive performance perspective pursue optimization microarchitectural attack cpu cache wellknown hardware component exploit cache sidechannel attack attack cache contention core unintentional channel sensitive information leak attacker core prediction BPU another hardware component processor rely enable speculative execution recently discover microarchitectural attack dubbed meltdown spectre exploit BPU speculative execution fundamental isolation security domain software microarchitectural attack exploit hardware data prefetcher processor optimization commodity CPUs hardware prefetcher cpu cache hierarchy attempt predict memory access fetch anticipate data cache actually access otherwise cache contemporary intel core equip hardware data prefetchers feature specific prefetching algorithm discover prefetchers instruction pointer IP stride prefetcher affect cache usage execution constant cryptographic algorithm implies prefetcher detects memory access regular stride load instruction loop structure access lookup cryptographic implementation lookup operation accidentally sequence stride memory access prefetcher trigger fetch memory adjacent lookup leaf unique footprint cache attack utilizes footprint lookup channel infer secret cryptographic algorithm core information leakage prefetching  algorithm examine potential propose attack apply openssl version cryptographic session channel CCS october toronto canada library elliptic curve cryptography library scalar multiplication algorithm implement branchless montgomery ladder constant algorithm secret dependent cache trace thereby resistant cache channel attack however implementation binary GF arithmetic internally montgomery ladder algorithm openssl library implement lookup improve computational efficiency scalar multiplication execute prefetching activity affect cache adjacent lookup carefully monitoring activity recover unknown scalar exploit microarchitectural channel successfully extract private elliptic curve diffie hellman ECDH algorithm openssl  curve nist binary curve cpu attacker core private recovery important attack procedure online phase min attack practical application affected processor investigate intel processor available model affected attack core ivy bridge haswell xeon broadwell vulnerable attack worth microarchitectures widely commercial infrastructure aws EC contribution novel discovery hardware data prefetching processor exploit source information leakage demonstrate IP stride prefetching enables microarchitectural channel attack constant cryptographic algorithm suppose immune attack specifically contribution threefold novel channel propose novel channel cryptographic application allows hidden source channel application cannot reveal program  approach methodology differs approach vulnerable location specifically consideration cache trace memory belonging executable binary exhaustively inspect secret dependent cache trace discovery information leakage intel stride prefetcher propose generic automatically therefore easily adopt channel vulnerability cryptographic library detailed procedure depth analysis intel stride prefetcher disclose detail IP stride prefetcher intel core openssl version later release march vulnerable attack explore literature due lack sufficient information prefetcher conduct depth analysis diverse specifically analyze prefetching activity truth memory access actual execution trace approach extend knowledge prefetching prefetching trigger memory fetch cache analysis intel stride prefetcher demonstrate prefetching behavior scalar multiplication GF openssl library attack ECDH version openssl prefetching analysis observation scalar multiplication implement attack ECDH algorithm openssl library exploit hardware data prefetcher intel microarchitecture attack defeat countermeasure implement version openssl library cache channel attack successfully recovers private ECDH implementation built upon library detailed algorithm attack experimental related microarchitectural attack due vulnerability channel attack resolution variety channel attack exploit cpu cache propose propose attack classify technique namely flush reload prime probe accord granularity attack variant specialized hardware feature intel tsx sgx enhance attack performance hide detect prediction another microarchitectural feature exploit construct channel attack propose hardware protection BPU microarchitectural feature prefetching mechanism considerable attention prefetch channel attack exploit weakness software prefetching defeat kernel protection KASLR attack regard exploitation attacker goal examine information leakage hardware prefetcher examination conduct simulated cpu concrete attack prefetching utilized protection cache channel attack channel identify channel vulnerability program crucially important secure purpose program analysis approach propose  formal verification automatic analysis cache channel program binary cache configuration target input upper bound information leakage channel extend dynamically session channel CCS october toronto canada allocate memory analysis cached another leverage symbolic execution constraint identify potential difference cache usage program analysis approach cache trace memory program binary consideration investigation therefore aforementioned cannot vulnerable memory location affected indirect cache activity hardware prefetcher cache template attack utilizes cache trace rely program analysis exploitation somewhat propose however realize grain detect channel refer detailed comparison attack constant cryptographic algorithm  algorithm widely various software cryptographic implementation mitigate cache channel attack countermeasure however advanced sophisticated attack conditional openssl montgomery ladder algorithm exploit extract secret information monitoring cache usage discover cache  conditional arithmetic algorithm curve implementation discover software defect openssl constant algorithm ECDSA dsa vulnerable cache channel attack attack mention attack target constant cryptographic algorithm differs hardware prefetching exploit hence attack deliver robust implementation constant algorithm neither conditional software bug PRELIMINARIES cache channel cache hierarchy cache hardware cpu microarchitecture storage aim bridging gap latency memory processor multi core processor cache hierarchy chip cache namely cache closest processor core cache others cache refer cache llc instance intel xeon amazon EC llc MB cache privately core llc core processor cache cache contains multiple cache fix usually byte cache associativity determines cache cache flush reload technique attack construct upon flush reload technique establish  channel flush reload technique exploit memory technique proceeds phase flush phase flush desire memory entire cache hierarchy clflush instruction owe inclusiveness hardware prefetchers intel processor sandy bridge hardware prefetcher detection technique cache msr streamer spatial prefetcher adjacent  prefetcher IP stride prefetcher stride llc intel processor clflush instruction evict cache cache phase execute operation finally reload phase reloads previously flush memory access access phase reload cache cache occurs reload memory resides memory reload due cache hardware data prefetching cache access cache memory consume operation execution delay data prefetching technique predicts usage fetch data memory cache prior actual access processor data prefetching software hardware software prefetching compiler hardware prefetching dedicate hardware cache hardware data prefetching technique hardware prefetching technique exist diverse application memory access processor utilize various hardware prefetching technique  application prefetching approach access detect prefetches cache adjacent prefetching exploit spatial locality attempt fetch adjacent access prefetching assumes consecutive memory access algorithm therefore fetch multiple memory ahead within boundary stride prefetching mainly focus individual data load instruction attempt detect consequently access address memory address constant stride detect fetch memory backward direction access sequence stride prefetcher maintains indexed load PC entry consists address stride confidence stride hardware prefetching intel core sandy bridge successive processor core equip hardware prefetchers cache streamer spatial prefetcher data cache  prefetcher instruction pointer IP stride prefetcher unfortunately detail behavior session channel CCS october toronto canada algorithm montgomery ladder algorithm input coordinate scalar output affine coordinate procedure  ladder constant madd mdouble madd mdouble return  transform affine coordinate procedure algorithm branchless montgomery ladder algorithm input coordinate scalar output affine coordinate procedure  ladder const swap const swap madd mdouble const swap const swap return  procedure prefetchers publicly brief explanation prefetching mechanism intel document recently intel disclose useful information various hardware prefetchers processor model accord disclose model specific register msr address core register enable disable prefetcher core correspond prefetcher core msr bios indicates prefetchers enable default hardware prefetchers detection technique location msr scalar multiplication openssl openssl comprehensive library cryptographic primitive elliptic curve cryptography openssl implement scalar multiplication algorithm elliptic curve prime binary implementation detail scalar multiplication operation elliptic curve define binary openssl library algorithm operation input coordinate output coordinate procedure mdouble constant specific elliptic curve return procedure algorithm addition operation input coordinate output coordinate procedure madd return procedure montgomery ladder algorithm scalar multiplication primitive operation elliptic curve cryptography scalar elliptic curve operation simplest implementation scalar multiplication secure leak timing information attacker scalar timing channel attack openssl library adopts montgomery ladder algorithm algorithm implement scalar multiplication algorithm projective coordinate scalar input performs constant addition madd algorithm mdouble algorithm operation regardless  computation effective prevent channel attacker timing information branchless montgomery ladder algorithm previous version openssl implementation montgomery ladder algorithm basically lopez  algorithm execution conditional scalar implementation vulnerable access driven cache channel attack version openssl mitigate attack eliminate session channel CCS october toronto canada algorithm GF operation input GF output GF procedure gfm sqare nibble data sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr sqr return mod irreducible polynomial procedure implementation specifically instruction const swap operation implement conditionally swap addition operation const swap performs swap algorithm branchless version montgomery ladder algorithm listing lookup gfm BN  con BN  sqr operation GF openssl implement binary arithmetic operation elliptic curve define binary binary GF binary polynomial coefficient GF GF GF addition involves addition polynomial multiplication perform modulo reduction polynomial operation perform faster lookup arbitrary polynomial openssl lookup implementation operation GF algorithm gfm sqare algorithm lookup denote sqr array listing sequence binary representation GF input gfm sqare algorithm repeatedly transforms consecutive loop specifically iteration loop sequence nibble nibble convert expand wise counterpart lookup sqr wise shift operation access sqr nibble index intermediate reduce reduction polynomial output algorithm  channel propose vulnerable location cryptographic library deliver microarchitectural attack program analysis approach analyze source code executable binary vividly propose detect location however approach reveals vulnerable directly related logical execution program overlook vulnerable location affected indirect cache activity hidden processor component hardware prefetchers however approach capture vulnerable location exhaustive inspection memory belonging target library specifically input secret sample cache access trace execution cryptographic operation memory location relevant cache status affected input significant difference cache trace difference trace indication cache channel channel seek detail scalar multiplication openssl library finding hardware prefetching experimental channel seek construct generic automate therefore apply cryptographic library besides openssl automate procedure propose channel proceeds phase phase relevant memory phase address memory belong text data target cryptographic library linux library construct accord executable linkable format elf standard file format executable binary information runtime memory layout address program header elf file information address construct iteratively increase session channel CCS october toronto canada address text data byte filter contains relevant memory refers cache activity execution cryptographic operation flush reload technique identify relevant memory specifically memory flush cache execution cryptographic operation execution load onto cache marked relevant memory openssl EC mul function library target operation function scalar elliptic curve input computes function montgomery ladder multiplication internally invoked  elliptic curve perform scalar multiplication EC mul function relevant memory belong text belong data phase trace cache activity relevant memory previous phase runtime trace cache activity target function denote relevant memory memory address status cache cache correspond repeatedly flush reload technique fix slot interval execution function goal relevant memory secret dependent cache trace cache trace obtain input scalar randomly chosen input sufficient identify secret dependent trace denote runtime cache trace input vector trace elapse execution target function slot flush reload technique indicates cache status exists non negligible cache due diversity unexpected activity trace obtain average sufficient measurement reduce precise cache ratio cache measurement conduct phase scalar choice secret dependent trace incur computational burden phase curve EC mul function arbitrary scalar around cycle average experimental environment intel xeon processor elapse slot cycle temporal resolution probe individual operation per scalar slot determines trace xec xec xec xec  xec sqr  memory layout sqr openssl proceed phase sufficient sample trace collection trace multiple multiple sample trace denote phase secret dependent trace phase relevant memory runtime cache trace sensitive input underlie phase stem cache trace dependency input sample obtain input obtain input approach perform cluster analysis trace sample memory cluster distinct infer correspond memory secret dependent cache trace cluster algorithm algorithm aim partition unlabeled vector cluster vector belongs cluster euclidean distance specifically invoke algorithm parameter unlabeled vector input input algorithm attempt cluster centroid partition vector label vector partition cluster upon completion return label output evaluate cluster trace define vector belong label vector label refers cluster refers trace vector obtain input comprises majority instance secret dependent trace ideal vector label algorithm actually belong trace regard EC mul function openssl conduct cluster analysis relevant memory trace sample scalar input discover relevant memory significant average strongly indicates execution function memory experienced cache activity correlate scalar session channel CCS october toronto canada memory secret dependent trace openssl openssl gfm montgomery mult   sqr gfm xec xec mult mult source code comparison previous somewhat exist trace approach cache template attack approach utilizes profile matrix cache ratio memory address input channel detect variance ratio input ratio define dependent function however specific attack latter detail differs previous realize ratio dependency channel propose cache ratio series vector input series contains information scalar instance vector input clearly indicates channel correspond scalar indistinguishable contrary previous detailed identify variance vector employ algorithm therefore specifies grain detect channel observation scalar multiplication openssl library described previous insight comparison openssl experimental previous version target openssl library vulnerable montgomery ladder implementation cache channel attack openssl identify memory address xec xec location sqr listing lookup gfm sqare operation algorithm depicts memory layout sqr along memory denote sqr byte listing across memory address xec  adjacent lookup memory identify secret dependent trace openssl memory address  sqr openssl memory newly identify   binary analysis library reveals portion execution code montgomery msr openssl openssl identify accord msr ladder implementation algorithm memory location specifically memory code conditional algorithm dependent scalar memory   disclose cache channel attack implementation unlike montgomery ladder implementation sqr xec xec version version neither machine code data related conduction operation confirm program analysis library reverse engineering debug observation conclusion cache activity actually introduce hardware data prefetching mechanism validation described intel core equip hardware prefetchers various cache prefetching strategy location prefetchers independently msr address detail validate cache prefetching prefetchers affect secret dependent cache activity lookup utilize msr actually setup intel xeon conduct procedure described version openssl library msr manipulate experimental graph identify secret dependent cache trace accord msr msr combination status hardware prefetchers instance indicates prefetchers disabled indicates prefetchers enable session channel CCS october toronto canada access regular stride load instruction gfm sqare sequence madd operation input invocation sequence access index sqr lookup stride direction input gfm sqare sequence   backward  BC  backward    clearly difference msr cache activity sqr decrement graph indicates hardware prefetchers actually cache activity secret dependent cache trace relevant memory furthermore prefetchers  stride prefetcher corresponds msr solely affect memory sqr analysis stride prefetching behavior IP stride prefetcher intel processor identify previous hidden source observable cache activity concretely examine impact cache trace couple memory adjacent lookup sqr perform scalar multiplication described IP stride prefetcher basically strategy detect stride load operation loop structure however detail behavior prefetcher prefetching trigger memory fetch cache publicly unknown hence infer behavior observation depth experimental analysis prefetching activity memory sqr lookup gfm sqare algorithm algorithm algorithm primitive operation madd algorithm mdouble algorithm algorithm hence montgomery ladder multiplication series gfm sqare operation necessarily invoked computation scalar input GF gfm sqare algorithm computes iterative lookup sqr loop specifically iteration loop lookup sqr indexed algorithm machine code lookup translate load instruction fetch memory memory address calculate address sqr correspond index iteration loop instance  curve input average memory access execution load instruction gfm sqare sequence madd operation xeon gfm sqare iteration loop demonstrate examine behavior stride prefetcher algorithm approach analyze prefetching activity truth memory access sqr lookup obtain sequence input data  sqare algorithm execution truth montgomery ladder multiplication algorithm fix  curve arbitrary scalar another input algorithm input trace invocation gfm sqare algorithm trace actual memory access load instruction correspond sqr lookup specifically access load instruction invocation gfm sqare memory access regular stride confidence consecutive access constant stride minimal regular stride load instruction algorithm gfm sqare operation obtain operation invoked session channel CCS october toronto canada distribution access sequence regular stride dash distribution madd algorithm scalar access load instruction identify regular stride underlined instance input invocation gfm sqare sequence consists significant lookup index sqr load instruction access sequence sequential access index regular stride byte sequence index incremental therefore stride direction access sequence access index regular stride backward direction identify access truth analysis cache activity examine cache trace memory xec xec sqr implementation openssl library gfm sqare algorithm dozen load instruction affect cache activity simultaneously infer prefetching behavior individual instruction dismantle cache trace focus cache activity load instruction purpose remain load instruction implementation modify longer affect cache activity permit multiplication correctly average memory access execution madd operation multiplication sequence shorter cycle access others indicates prefetched cache graph sequence shorter access couple peak sequence access regular stride backward direction madd mdouble madd scalar scalar probe invocation gfm sqare sqr processing sequence montgomery ladder multiplication sqr address address lookup infer observation IP stride prefetching trigger regular stride detect backward direction adjacent memory address fetch cache observation conforms inference sqr peak sequence peak sequence regular stride direction trigger prefetcher fetch adjacent address sqr dynamic behavior prefetcher worth sequence relatively average memory access sequence peak IP stride prefetcher intel processor disclose amount uncertainty behavior prefetcher however distribution access sequence stride prefetcher behave deterministic instance sequence respectively distribution sequence almost memory access cache implies decision prefetching access unknown dynamic mechanism buffer probabilistic model investigate future analysis uncertain behavior systematic approach direction reverse engineer internal working hardware prefetcher hardware performance counter via intel performance monitoring useful information internal processor cache  scalar BITS analysis previous implies behavior stride prefetcher execution montgomery ladder multiplication dependent input scalar processing sequence loop multiplication algorithm unique prefetching behavior accord scalar finding detail furthermore cache activity due prefetching distinguish execution branchless montgomery ladder multiplication scalar session channel CCS october toronto canada measurement iteration montgomery ladder multiplication xeon slot cache ratio slot cache ratio measurement processing sequence branchless montgomery ladder algorithm algorithm madd operation argument xci zci xci zci mdouble operation argument xci zci sequence scalar algorithm gfm sqare function invoked sequence madd mdouble operation madd operation function input derive xci zci xci zci algorithm mdouble operation function invoked input derive xci zci algorithm execute gfm sqare function index lookup sqr input function hence behavior stride prefetcher sequence processing montgomery ladder multiplication dependent input xci zci xci zci scalar prefetching activity probe cache status execution gfm sqare function sequence illustrate iteration montgomery ladder multiplication invocation gfm sqare function due limited resolution flush reload probe technique prefetching activity separately instead probe perform sequence measurement aggregate activity series gfm sqare invocation measurement consecutive sequence distinguishable probe mdouble execution timing information obtain probe another memory epilogue stub mdouble function owe  execution montgomery ladder multiplication  fix slot consistent measurement cache activity iteration  mdouble  mdouble  mdouble  mdouble  mdouble  mdouble  mdouble  mdouble operation sequence branchless montgomery ladder multiplication algorithm scalar measurement prefetching activity iteration slot montgomery ladder multiplication metric cache ratio define cache measurement slot distinguishable cache prefetching activity independent ratio indicates prefetching activity cache slot ratio indication invocation trigger stride prefetching addition remain measurement empirical analysis memory access conclude dynamic behavior stride prefetcher previous distinguishability scalar measurement prefetching activity iteration montgomery ladder algorithm model xci zci xci zci refer cache ratio respectively define input vector sequence output tuple cache ratio distinguish execution branchless implementation montgomery ladder multiplication scalar multiplication scalar sequence madd mdouble operation algorithm input scalar suppose iteration initial leftmost input iteration prefetching activity thereby input session channel CCS october toronto canada slot slot slot slot difference scalar dpos leftmost prefetching activity fourth scalar however behavior argument madd mdouble function accumulate previous iteration suggests crucial aspect prefetching activity branchless montgomery ladder multiplication sequence execution scalar leftmost actually another illustrate finding scalar dpos leftmost dpos difference scalar processing sequence branchless montgomery ladder multiplication measurement scalar slot graph almost difference slot significant difference marked noticeable dpos leftmost slot difference remain slot exploitation recover unknown scalar scalar scalar multiplication treat secret cryptographic algorithm distinguishability exploit attacker attempt reveal unknown secret scalar branchless implementation montgomery ladder multiplication demonstrate attacker recover unknown scalar utilize information leakage prefetcher recover leftmost unknown scalar iteration detail notation secret scalar recover attack substring leftmost denote recover substring iteration attack nil iteration attack recover substring chosen attack parameter attack proceeds prefetching activity cache usage yield victim execution scalar multiplication attacker obtains ank construct candidate scalar initialize substring construct candidate arbitrary insert execute multiplication attacker machine obtain compute difference  candidate update output recovery secret scalar session channel CCS october toronto canada difference candidate substring evaluation difference prefetching activity substring error handle ideal perform attacker unique practical however inevitably introduce measurement prefetching activity due variety unexpected behavior error scalar instance candidate infeasible error handle reduce specifically attacker candidate majority attacker chooses candidate attack ECDH deliver attack ECDH agreement protocol implement openssl library ECDH elliptic curve diffie hellman ECDH variant diffie hellman algorithm elliptic curve cryptography ECDH purpose agreement entity suppose user establish secret private   public    kbp respectively generator curve exchange public compute secret    experimental setup target openssl implement branchless montgomery ladder multiplication algorithm described conduct openssl version openssl perform server equip xeon broadwell processor 6GB memory ubuntu lts cpu core KB data instruction cache KB unified cache MB unified llc cache core across cpu openssl bundle ubuntu built library official website openssl library built debug executable purpose identify location flush reload probe debug load affect feasibility attack performance victim application victim application built victim application performs ECDH algorithm implement openssl link executable ECDH generation ECDH compute function library function internally EC mul function passing private scalar target function consequentially invoked victim application  elliptic curve multiplication generate public private victim openssl command private scalar recover victim application generation request spy upon receipt request attacker public performs ECDH generation scalar multiplication responds attacker attack scenario attacker spy victim physical core communication spy victim socket communication implement attack described previous evaluate victim application chose attack parameter spy attempt recover scalar leftmost iteration perform attack iteration recover iteration prefetching activity session channel CCS october toronto canada candidate scalar cache ratio evaluate capture trace processing sequence scalar multiplication experimental recover substring scalar xaa processing candidate xaa candidate unknown scalar measurement error around min recover data scalar conduct attack experienced measurement error iteration recover overall attack around cpu recover elapse conduct around min obtain trace victim prefetching activity emphasize entire attack execution attack involvement victim application proceed recovery pragmatic attack application impact algorithm demonstrate attack successfully recover private ECDH algorithm however attack limited specific algorithm discus impact attack cryptographic algorithm elliptic curve cryptography scalar multiplication algorithm core component construct cryptographic function described previous attack target scalar multiplication apply EC cryptographic algorithm signature ECDSA encryption  rsa implementation lookup operation perform rsa decryption modular exponentiation implement repeatedly access precomputed multiplier accord chunk exponent access multiplier dependent exponent susceptible attack aes another instance lookup implementation operation involves lookup input dependent prefetching activity aes implementation already vulnerable cache channel attack however attack aes challenge cache attack prefetching trigger byte regular stride moreover attack target implementation loop structure fully unrolled otherwise stride prefetching trigger mitigation disable prefetcher attack  activity IP stride prefetcher mitigation involve disable prefetcher processor core target intel processor individual hardware prefetchers via model specific register msr stride prefetcher leftmost msr address linux user utility available msr manipulate register achieve protection suppress prefetcher incur performance degradation ensure constant access softwarebased mitigation eliminate involve lookup implementation target function gfm sqare openssl library lookup sqr remove replace calculation countermeasure already apply patch version openssl library lookup technique generally achieves performance optimization inevitable performance degradation openssl benchmarking report patch performance another mitigation memory access lookup constant regardless input instance recent implementation rsa modular exponentiation openssl adopt scatter technique arranges lookup access via constant technique generalize lookup implementation prevent flush reload attack prefetching attack construct upon flush reload technique hence mitigation strategy flush reload attack effective countermeasure attack prerequisite attack memory attacker victim access mechanism software hinders memory across security domain vms specifically duplicate physical whenever access multiple security domain software diversification another defense mechanism flush reload attack technique dynamically randomizes executable binary software memory inherently restrict conclusion microarchitectural attack exploit hardware data prefetching leak secret data attack target IP stride prefetcher hardware prefetchers enclose recent intel processor demonstrate potential attack recover private ECDH algorithm version openssl library propose attack limited specific cryptographic algorithm implementation utilizes lookup attack exploit hardware prefetchers therefore developer researcher attack security threat future temporary countermeasure recommend mitigate prefetching vulnerability processor however effective fundamental countermeasure devise attack minimize performance degradation