binary pack encode binary code prior execution decode obfuscation adopt malware author camouflage malicious code packer recover code  execute layer render unpack increasingly generic binary unpack approach propose extract packed binary without prior knowledge packer however runtime overhead lack anti analysis resistance severely limited adoption decade packed malware  challenge anti malware landscape revisits binary unpack angle packer consistently obfuscate standard api depth enormous variety malware packer malware import address iat lookup dynamically link api typically erase packer obfuscation unpack routine custom dynamic loader reconstruct iat code resume execution packed malware execution api invoked rebuilt iat indicates payload restore insight motivates efficient unpack approach BinUnpack previous suffer multiple execute unpack layer BinUnpack tedious memory access monitoring therefore introduces runtime overhead defeat variety evolve evasion trick BinUnpack api monitor module via novel kernel dll hijack technique evaluate BinUnpack efficacy extensively packed malware multiple utility BinUnpack rate significantly exist magnitude performance boost demonstrates BinUnpack apply malware analysis CCS CONCEPTS security privacy software reverse engineering keywords malware analysis generic binary unpack import address kernel dll hijack introduction malicious software malware become significant threat cybersecurity malware attack ransomware ripple across catastrophic damage driven profit cyber criminal highly motivate undermine malware detection analysis apply numerous obfuscation scheme binary pack panacea thwart widely anti virus scan binary packer encode malware code encryption compression attach unpack routine packed malware addition packer erase portable executable PE file import address iat complicate analysis api packed malware unpack routine decodes payload binary memory reconstructs iat execution entry OEP resume malware payload execution actual malicious code data unrecognizable immune malware analysis technique static feature apply machine packed malware detection packer malicious behavior embarrass anti virus scanner widely deployed host packer signature identification malware nearly packed file falsely label malware binary pack technique evolve  packer complicate multi layer packer variety anti analysis trick packed binary code memory sometime execute besides execute procedure iterate dynamically generate code generate code execute iteration dynamically generate code layer previous generic unpack fully utilized feature execute instruction memory however bullet sharply multi layer unpack proven undecidable exist approach continuously monitor  execute layer detect existence code layer heuristic factor contribute runtime overhead impose generic unpack expensive deployment notable feature sophisticated packer adopt anti analysis technique impede unpack attempt packer decode progress generic unpack typically relies dynamic analysis technique debug dynamic binary instrumentation emulator api hook however transparent packer evasive packer fingerprint analysis terminate unpack execution themida detect unpack reduce  assumption commercial packer applies virtualization obfuscation unpack routine instruction explosion trace unpack progress malware author customize packer exist packer source upx yoda protector lack anti analysis resistance render exist generic unpack futile sophisticated packer security overwhelmed packed malware decade slows response emerge malware threat online pack service utilizes exist packer anti malware scanner feedback mechanism return packer optimal evasion generic unpack packer obfuscate payload binary api resolution approach BinUnpack motivate observation sophisticated packer evolve malware payload interacts OS perform malicious behavior code remote injection ransomware file encryption malware author achieve mainly user apis native apis api semantic information native typically binary code resolve api address PE header iat address lookup apis export dynamic link library dll apis payload reveal semantics malware hence security analyst upper observation packer usually remove payload import address iat impede reverse engineering afterwards unpack routine obtain api address rebuild iat restore payload invoke apis properly observation inspire chase heuristic unpack api invoked rebuilt iat indicates code restore OEP already rebuilt BinUnpack capture rebuilt feature instead  execute behavior BinUnpack hook api related iat rebuilt trace api BinUnpack OEP within distance exist BinUnpack distinct advantage sidestep multi layer unpack avoids significant overhead impose tedious memory access trace api hook become textbook option available  however malware packer already embed anti hook trick steal code hollow crash hook module evade api monitoring develop hybrid kernel dll hijack technique api monitoring module approach overcomes limit core dlls kernel dll prevents traditional achieve dll hijack furthermore integrate exist sequence alignment memory subversion rootkit scalable binary http upx github http sourceforge net project  native apis discus exception conclusion session binary analysis CCS october toronto canada function fake api dll integrity custom api implementation respectively enables resistance various evasion perform evaluation packed malware utility packer contains malware packer sophisticated commercial custom packer evaluate BinUnpack challenge multiple packer combination partial code reveal packer denial service dos attack nevertheless BinUnpack maintains rate consistently unpacked code BinUnpack greatly increase accuracy antivirus scan overhead utility execution negligible comparative evaluation consumer grade laptop BinUnpack outperforms exist significantly performance effectiveness BinUnpack unpack within substantially exist magnitude hook evasion evaluation indicates BinUnpack outperforms sandbox  cuckoo resistance encourage demonstrate BinUnpack deployed honeypot sandbox preprocess packed malware integrate online malware scan service virustotal achieve optimal malware recognition rate scope contribution another related obfuscation binary pack code virtualization completely challenge although BinUnpack immune unpack routine virtualization recover virtualization code scope summary contribution propose generic quickly unpack capture rebuilt behavior approach memory access trace multi layer unpack therefore BinUnpack performance significantly previous novel hybrid kernel dll hijack technique aware scientific core dll hijack enables BinUnpack exhibit powerful unpack capability exist evaluate BinUnpack extensively datasets almost malware packer available BinUnpack consistently across various packer potential attack online BinUnpack web service construction background motivation summarize drawback exist multi layer anti analysis packer illustrate another pervasive feature packer api resolution obfuscation import address rebuild inspire propose unpack generic  http virustotal com status quo generic unpack exist generic unpack approach suffer overhead lack anti analysis resistance unpack routine procedure memory execute memory borrow definition unpack layer layer intuitively memory address execute code another layer longitudinal unique packer multi layer packer factor contribute challenge unpack execute feature indication dynamically generate code code execution counter intuitively code necessarily deepest layer  packer multiple layer evaluate packer identify code layer illustrates deepest layer contains junk code code therefore unpack heuristic capture layer signal termination   payload unpack progress traditional approach unpack layer via memory access trace presence OEP various heuristic typically impose significantly runtime overhead expensive resource constrain scenario generic unpack utilizes various analysis monitor unpack progress however analysis leak recognizable footprint packer detect evade unpack armadillo terminate execution debug  packer perform dynamic integrity fingerprint dynamic binary instrumentation environment although unpack rely hardware virtualization achieve transparency performance penalty slowdown default function themida packer applies virtualization obfuscation unpack routine monitoring unpack progress instruction explosion anti analysis trick nullify execute feature memory attack heuristic code identification comparative evaluation recent unpack previous cope packer api resolution binary pack technique evolve counter reverse engineering maintains stable malware payload interact OS via apis fulfill diversified malicious intent injection communication document encryption compiler unaware dll api address compile PE portable executable file resolve dll api address dynamically standard api resolution implicit link II dynamic api resolution explicit link prevalent access PE file header import address iat session binary analysis CCS october toronto canada unpack routine layer timeline entry packed malware execute layer layer junk code layer malware payload layer junk code integrity anti debug unpack multiple execute layer layer contains anti analysis code integrity anti debug deepest layer consist malware payload junk code obtain api address iat entry function ordinal import specific dll PE file load loader responsible load link dlls iat entry virtual address import function PE file refers iat indirect instruction dll apis contrast II function explicitly load dll obtain import function address convenient explicitly invoke loadlibrary GetProcAddress apis iat II exception II iat api address cod binary however diversified OS version address layout randomization exception exception happens shellcode shellcode dynamically load loader inject victim program shellcode acquire apis address without iat shellcode address kernel dll structure exception handle  environment  structure address loadlibrary GetProcAddress kernel dll export directory however develop complicate malicious behavior shellcode constraint lack compatibility shellcode typically target specific mainly stage malware infection exploit vulnerability bypassing protection data execution prevention addition already mature prevent shellcode obtain dll address via   therefore practical import address rebuild complicate reverse engineering packer obfuscate api resolution erase iat code attach unpack routine rebuild iat resume code execution rebuild iat unpack routine custom dynamic loader recover connection api virtual address achieve explicitly api loadlibrary GetProcAddress II local iat attach unpack routine unpack routine apis various dll address execution return api virtual address purpose detect debug emulation environment rebuild iat code code obfuscation viewpoint remove iat benefit apis abuse malicious purpose   malware author injection remove payload iat prevents insight semantics malware manually modify source packer remove iat malware payload consequence another additional anti virus scanner recognize malware benefit impede reconstruction fully functional version binary addition remove iat advanced packer apply api redirection iat rebuild address iat directly api function another memory api api redirection hinders perfect reconstruction iat therefore unpacked code cannot function correctly another byproduct delete iat reduce packed code previous report iat erase rebuild behavior focus feature generic unpack motivate malware sample hupigon eyf  packer illustrate iat rebuild hupigon notorious compromise machine hupigon eyf contains apis indirect api iat  packed version  compress code data era iat attache iat unpack routine unpack routine iat contains api kernel dll loadlibrary GetProcAddress capable rebuild iat memory  packed version feature BinUnpack relies arrives OEP packed code data restore payload iat apis address reconstruct reconstruct payload iat unpack routine iat functionality unpack routine relatively typically import apis reconstruct payload iat reside memory recall program MD session binary analysis CCS october toronto canada hupigon eyf disk entry code entry data iat kernel dll user dll packed hupigon eyf  disk  unpack routine packed hupigon eyf memory  code entry data iat kernel dll user dll CA unpack routine unpack code rebuild iat OEP unpack routine iat kernel dll apis apis unpack routine iat kernel dll apis packed code data   CA offset   offset loadlibrary CAE offset GetProcAddress kernel dll function reference  packer remove malware iat packed version attach unpack routine iat contains apis loadlibrary GetProcAddress rebuild iat refers iat via indirect deliberately overlap payload iat unpack routine iat memory particularly challenge packer perform binary rewrite recover payload code related indirect address redirect location BinUnpack advantage difference detect unpack overview packer pervasive iat rebuild behavior uncover clue unpack reconstruction payload iat happens ahead OEP api rebuilt iat unpack routine iat indicates malware payload restore BinUnpack capture  feature architecture BinUnpack BinUnpack extract unpack routine iat packed malware via static analysis monitor dynamic execution packed malware core BinUnpack hook evasion resistant api monitor monitor api related iat api related iat unpack routine iat related iat unpack routine iat related iat rebuilt BinUnpack halt execution packed malware trace OEP OEP dump memory dump BinUnpack output malware payload malware analysis distinct competitive advantage BinUnpack avoids runtime overhead monitoring multiple execute layer however challenge BinUnpack api monitor exist BinUnpack dilemma easily evade unaware user api semantics discus manage address dilemma hybrid hook evasion resistant api monitor another contribution BinUnpack api monitor combine exist achieve dll hijack rely kernel hook intercept indispensable dll load function load dll target dll dll hijack amplifies advantage technique avoid limitation addition BinUnpack integrates exist defeat evasion attack api hook limitation api hook intercept api function normal invocation rerouted location hook function resides exist api hook user kernel hook  api hook iat hook export address hook user OS specific adopt prevalent sandbox extract user api semantics malware however user hook modify target easily detect counter hook evasion technique session binary analysis CCS october toronto canada unpack routine packed malware OEP BinUnpack hooked api related iat malware payload kernel dll hijack  shadow walker  hook evasion resistant api monitor dump  unpack routine iat kernel dll architecture BinUnpack user api hook evasion adopt packer evasion packer steal code   yoda protector yoda  enigma themida private exe protector pep armadillo  hollow ransomware custom packer crash hook module user api hook evasion representative packer encounter category steal code steal code instruction api allocate memory malware packed malware attempt api executes instruction instead api instruction instruction steal code happens dll load user api hook technique identify target api virtual address apis steal code api hook target hollow evasion hide presence malicious packed malware fork malware executes unpack routine payload user api monitoring typically specific specific iat hooked ransomware custom packer apply advanced technique hollow hollow unpack routine code execution decouple generic unpack multiple circumvent crash hook module ransomware custom packer adopt powerful anti hook technique crash hook module packer access violation exception arbitrarily apis invalid argument non hook environment OS default exception handler handle error packed ransomware properly however complicate develop exception handler api hook therefore crash access violation exception security vendor  report custom packer adopt cerber ransomware crash api hook sandbox contrast kernel hook native api tamper user hook global multiple unfortunately kernel hook suffice BinUnpack bijective mapping user apis kernel native apis user apis related apis dll management apis GetProcAddress user service exclusively invoke native api BinUnpack OEP accurately hook GetProcAddress api limit OEP scope kernel hook alone api invoked rebuilt iat render OEP inaccurate dll hijack limitation user kernel api hook attention another api monitoring dll hijack developer load dll absolute dll hijack exploit dll load custom dll instead dll api hook dll hijack compatible target dll hijack  evasion steal code dll hijack modify target already load custom dll api instruction steal occurs therefore steal code  api besides dll hijack immune crash hook module attack naturally deliver runtime error OS exception handler however dll hijack robust resilience another rear microsoft realize default dll misuse load malicious component strict restriction core dlls kernel dll  dll core dlls explicitly specify registry overcome challenge hijack core dll combine dll hijack kernel hook OS standard dll dll hijack appendix appendix session binary analysis CCS october toronto canada target dll memory target dll   user kernel chain kernel hook custom dll memory execution kernel dll hijack execution custom api custom   api   custom dll  api custom api monitor code monitor code monitor code loadlibrary custom loader BinUnpack kernel dll hijack  initialization code mapping dll initialization code dll address   NtMapViewOfSection  status image dll relocate relocation code initialization code mapping dll initialization code dll address   modify previous NtMapViewOfSection NtMapViewOfSection  interaction  NtMapViewOfSection  pointer address dll mapped kernel dll hijack standard dll load mainly loadlibrary implicit link explicit link inspires bypass restriction particularly hook loadlibrary replace core dll custom dll achieve goal hijack user api hook resist evasion switch kernel hook intercept loadlibrary reverse engineer kernel  chain loadlibrary related native api NtMapViewOfSection  exe chain appendix user api chain kernel NtMapViewOfSection function  dll NtMapViewOfSection  exe native api correspond NtMapViewOfSection  dll NtMapViewOfSection  dll parameter NtMapViewOfSection  exe kernel hook NtMapViewOfSection  exe intercept NtMapViewOfSection  dll  interacts NtMapViewOfSection  dll  NtMapViewOfSection twice happens return status image indicates dll relocate memory NtMapViewOfSection invoked intercept NtMapViewOfSection redirect  memory load address custom dll enforce NtMapViewOfSection return status image code activate custom dll load eventually appendix algorithm detailed algorithm load custom dll illustrates hijack standard dll load kernel hook intercept dll load hijack target dll core dll  dll  intercept custom dll memory monitor code custom dll conduct rebuilt iat identification OEP dump iat rebuilt monitor code api target dll api hook approach advantage compatible target aware user api semantics benefit enable BinUnpack reveal resilience hook evasion adopt packer non standard explicit link non standard implementation explicit link malware author already adopt evade hook loadlibrary reimplement functionality loadlibrary   however custom loader eventually invokes NtMapViewOfSection load dll kernel hook NtMapViewOfSection capable session binary analysis CCS october toronto canada another recent stealth loader avoids file apis  via reflective dll injection technique    dll non file mapped memory expense memory footprint stealth loader NtMapViewOfSection however stealth loader trace invisible  kernel dll dll allocates virtual memory dll capture characteristic feature kernel hook  dll monitor apis load stealth loader iat comparison custom dll BinUnpack mimic target dll hijack automatically generate custom dll target attach monitor code custom api algorithm  kernel dll custom dll approach  iat hooked dll indirect via stack backtrace  memory location content complicate iat comparison attacker apply multiple packer combination innermost packed code unpack routine packed another packer similarly iat inner unpack routine erase rebuilt later behavior multiple phase rebuilt therefore global variable  algorithm rebuilt iat initial  unpack routine iat outermost packer   indicates phase rebuilt otherwise execution api execution unpack routine perform backtrack OEP OEP restore unpacked code packer update  comparison style algorithm recover packed code packer finally malware payload evaluation handle multiple packer combination leaf impact BinUnpack performance imposes significant performance degradation traditional generic unpack OEP dump entry OEP instruction restore code OEP mislead  incorrect instruction although previous propose effective heuristic existence OEP standard compiler signature dangerous api  suffer OEP recall reconstruction payload iat completes recover payload resume execution utilize api respectively unpack routine payload narrow OEP algorithm custom api   file delete  global variable rebuilt iat function            iat comparison OEP  OEP    return   function rebuild payload iat  loadlibrary kernel dll GetProcAddress  api GetProcAddress  api GetProcAddress   GetProcAddress api OEP OEP timeline payload execution multi layer unpack api monitoring limit scope OEP kernel hook alone checkpoint checkpoint GetProcAddress rebuild payload iat identify checkpoint api payload obviously memory scope OEP limited upper bound bound BinUnpack backtracks OEP heuristic   approach reduce OEP scope remarkably unpack hupigon eyf armadillo  instruction OEP contrast BinUnpack instruction evaluation maximum instruction OEP average api implementation custom loader malware author implement functionality GetProcAddress dll module export directory hook GetProcAddress checkpoint GetProcAddress invoke native api kernel hook adopt exist scalable obfuscation resilient binary library function  identify specific memory patter api custom implementation  derives heterogeneous feature library function graph instruction statistical feature detailed evaluation data session binary analysis CCS october toronto canada OEP timeline payload execution rebuild iat evasion malware iat multi layer unpack evasion multiple phase rebuilt evasion fake api rebuilt iat unpack routine code evasion rebuilt behavior packer adopt anti dump trick prevent obtain unpacked code memory modify access attribute PE memory access dump crash access PE BinUnpack relies dump  evaluation  achieves optimal handle anti dump technique payload dump apply malware code analysis binary code disassembly binary  largescale malware cluster lineage becomes straightforward ATTACKS  although BinUnpack conceptually recover code accuracy efficiency skilled attacker circumvent BinUnpack approach discus attack countermeasure attack rebuilt approach quickly unpack capture rebuilt behavior evade attack feature malware iat evasion exception malware iat practical constraint develop malware sample hardcoded api address shellcode hinder execution propagation diverse victim machine therefore unreliable threat fake rebuilt iat fake api multiple  execute layer packer intuitive attack BinUnpack generate multiple phase rebuilt packer rebuilt fake iat apis evasion II similarly rebuild iat packer invoke fake api OEP evasion evasion II evasion trigger BinUnpack OEP dump OEP detect evasion algorithm BinUnpack OEP efficient limited evasion II impact BinUnpack performance however attacker perform denial service dos attack perform iteration evasion II evasion treat extreme limit multiple execute layer multiple phase  impose dramatically overhead packed malware api expensive instruction evaluate impact dos attack BinUnpack simulated evasion II evasion opensource upx packer BinUnpack overall iteration evasion II iteration dos upx introduce additional slowdown BinUnpack occupy OEP proactively mitigate attack apply advanced  sequence alignment  bypassing fake api  enable BinUnpack api monitor function   identify scope evasion II evasion enable BinUnpack unpack function api scope evasion II evasion extreme iteration reduce BinUnpack attack kernel dll hijack core BinUnpack api monitor kernel dll hijack discus attack component kernel hook detection become harder malware load kernel defeat BinUnpack api monitoring vista release microsoft employ security mechanism mandatory driver signing prevent OS kernel hack malware mandatory driver signing kernel mode driver digitally verify code integrity dll integrity another evasion integrity dll microsoft dlls kernel dll publicly available packer calculate kernel dll hash offline hash dll memory BinUnpack substitute kernel dll load custom dll hash however release OS version verify hash trivial task attacker nevertheless extend BinUnpack memory subversion technique shadow walker rootkit bypass dll integrity data access custom dll target dll code access custom dll therefore hash integrity calculate target dll instead custom dll evaluation malware sample malware repository VX   virustotal malware sample malware category http  org http  com session binary analysis CCS october toronto canada evasion II evasion dos attack relatively impact BinUnpack sample BinUnpack BinUnpack   dump relative slowdown upx upx evasion II upx evasion II upx evasion II backdoor worm trojan virus infamous ransomware active sample evaluate generic binary unpack testbed consumer grade laptop intel core processor quad core 0GHz 8GB memory packer signature  PE  non packed sample code virtualization BinUnpack coverage eventually obtain packed malware binary packer unknown packer custom packer generation malware ransomware comparative evaluation perform comparative evaluation accurately evaluate BinUnpack effectiveness performance malware sample truth source code manually verify unpack packed version motivate hupigon eyf typical scenario malware author generate variant apply packer optimal achieves evasion propagate packer packer packer combination layer code layer packer packer multi layer packer packer reveal code deepest layer bold  packer layer code locates layer api unpack routine iat confirms erase payload iat packer hupigon eyf import apis packer  apis loadlibrary GetProcAddress fourth evasion apply packer hupigon eyf belongs backdoor trojan function botnet victimize machine detection hupigon anti malware scanner recognize hupigon eyf packer version virustotal anti virus correctly label submission hupigon therefore treat optimal anti malware scan http   com http  com wiki  http wikipedia org wiki backdoor hupigon multi layer packer packer packer multiple execute layer packer circumvent anti virus although advanced anti virus already embed sandbox generic unpack cope packed sample virustotal unpack output BinUnpack optimal BinUnpack significantly improves accuracy anti virus scan packer reveal code deepest layer enigma  armadillo  virustotal unpacked code  return layer code packer combination packer apply code repeatedly generic unpack becomes packed code generate packer packed combination successful packer packer combination indeed likely evade anti malware scan virustotal detection packer combination already threat packer combination algorithm BinUnpack efficiently extract code multi packer version themida themida sophisticated commercial packer widely malware author detection rate themida malware themida evaluate complicate apply themida default binary pack function hupigon eyf binary code distinct feature themida packer unpack routine code virtualization obfuscation unpack routine instruction replace bytecode attach virtualization simulate bytecode unpack routine virtualization trace execute instruction become extremely consume unlike previous BinUnpack neatly sidestep memory access trace avoids overhead code virtualization execution source code hupigon available enable themida optional function encode macro encode macro user source code encrypt encrypt code execute themida decrypt code inside macro execute encrypt themida encode macro option enable partial code reveal packer generic  portion session binary analysis CCS october toronto canada comparative evaluation truth dataset evasion anti debug anti VM virtual machine emulator anti DBI dynamic binary instrumentation anti hook    BinUnpack packer layer apis evasion virustotal performance packed unpacked    BinUnpack hupigon eyf packer multi layer packer    upx           yoda    pep enigma  yoda protector      armadillo  packer combination                pep themida unpack routine virtualization partial code reveal timeout unpack exceeds  exception unpack exception exit code reveal unpack countermeasure dump continuous series memory later reassemble consistent code image enable themida encode macro option function hupigon eyf restore function binary code BinUnpack extract code successfully greatly increase malware detection rate however partial code reveal packer rare source code available unreliability runtime overhead performance comparison BinUnpack performance representative generic unpack    rely pin monitor execute instruction memory borrow    generic  developed related respectively although purpose binary disassembly defeat anti instrumentation evasion generic unpack indispensable preprocess appeal application BinUnpack advantage avoid trace execute layer resilient anti analysis trick  representative respect BinUnpack  relies dump  reconstruct payload iat  extension  defeat anti DBI equip packer evaluation threshold runtime execution unpack exceeds threshold execution performance data timeout besides unpack exception exit therefore exception BinUnpack succeed average unpack partial code reveal packer contrast overhead BinUnpack magnitude addition fail timeout exception fail packer combination sample themida version attribute failure lack anti analysis resistance   packer fingerprint pin environment crash execution    extension  defeat anti  packer overhead developed  server generate trace memory dump server timeout threshold session binary analysis CCS october toronto canada representative generic unpack unavailable obsolete report overhead mention evaluate limited packer packer combination partial code reveal packer defeat sophisticated packer unclear overhead  average average unpack  packer  incurs runtime slowdown unpack packer eureka packer unpack binary per malware packed benign program  packer addition hupigon eyf evaluate malware packed web browser custom packer adopt ransomware malware sample security vendor march manage binary code packer version various packer apply sample packer compatible malware benign browser average virustotal scan packer packed unpacked version respectively successful unpack unpack OEP extract code correctly report average successfully unpack packed malware BinUnpack magnitude performance boost rate packed benign program popular web browser anti virus scanner generate false alarm unpack fail extract code BinUnpack output reduce false positive anti virus scanner zero custom packer adopt ransomware data available packer version ransomware sample customize   packer    install script driven  install package legitimate software   anti virus scanner false positive  malware signature unique feature  packer malware malicious executables file  malware bypass malware static analysis approach appendix typical attack procedure  packed ransomware complicate generic unpack cerber customizes  packer evasion technique hollow crash hook module nonetheless  packed ransomware behavior rebuilt BinUnpack extract payload efficiently impact benign program execution overhead BinUnpack introduces benign program packer version execution benign program BinUnpack disabled enable comparative evaluation summary sample data    BinUnpack sample packer virustotal avg  avg packer packed unpacked locky  zeus    pykspa   WannaCry  jaff    packed browser IE firefox chrome custom packer cryptolocker CTB    cerber meaning timeout exception application    prevalent web browser IE firefox chrome evaluate browser cache benchmark site ranked alexa insert javascript  routine compute delta delta load appendix additional overhead BinUnpack mainly iat comparison iat comparison BinUnpack perform OEP dump relative slowdown BinUnpack chrome browser heavily api  BinUnpack perform iat comparison frequently overall BinUnpack brings marginal overhead benign program execution hook evasion resistance evaluation addition runtime overhead lack anti analysis resistance another limit application generic unpack evaluate capacity BinUnpack hook evasion resistance classical user api monitor detour prevalent sandbox api hook service  cuckoo sandbox data contains packer hook evasion adopt packer besides modify source code upx another evasion custom loader stealth loader dll integrity custom loader implement functionality loadlibrary GetProcAddress avoids explicitly apis stealth loader avoids NtMapViewOfSection dll non file mapped memory dll integrity http alexa com session binary analysis CCS october toronto canada detect dll load memory modify fortunately BinUnpack countermeasure defeat evasion evaluation summarize appendix hollow evasion  cuckoo sandbox recursively hook apis detour specific inject code target BinUnpack api monitor identify target apis virtual address apis therefore steal code technique target detour sandbox implement exception handler perfectly crash hook module particularly effective impede addition custom loader stealth loader circumvent user api hook contrast kernel dll hijack binary function technique enable BinUnpack resist stealthy hook evasion furthermore BinUnpack resilient dll integrity api monitor patch dll load memory countermeasure bypass dll integrity adopt shadow walker rootkit data access custom dll target dll hook evasion resistance explains BinUnpack exhibit broader unpack scope approach develop resilient api monitor sandbox unpack packed malware performance BinUnpack enables perform largescale evaluation BinUnpack packed malware sample BinUnpack succeed sample unpack within failure binary code executable unpack routine exit investigation custom packer attempt detect involvement movement mouse cursor mouse cursor packer monitoring exit challenge truth source code binary code packer sample apply statistic previous ass BinUnpack recover code entropy deviation code data ratio byte entropy examines randomness binary code efficiently recognize packed binary sample compress encrypt entropy typically accord  evaluation entropy deviation unpacked version packed version sufficient verify dump another eureka code data ratio increase malware sample unpacks eureka threshold unpack accident complementary attempt entropy increase code data ratio eventually entropy deviation beyond threshold deviation average code data ratio evaluation packed malware ratio remain ratio threshold outlier packed armadillo  unlike packer packer apply instruction obfuscation instead mislead  however outlier packed sample exhibit entropy virustotal detection packed malware output BinUnpack difference respectively BinUnpack preprocessing extra anti virus scanner average recognize malware evaluation demonstrates effectiveness BinUnpack packed malware related previous confirm erase iat code packer however utilize iat rebuild unpack resist various evasion rare status quo generic unpack technique recent focus related concern malware unpack motivation perfectly researcher underestimate complexity packer anti virus report false alarm scan packed benign program pervasive packed malware severely limited accuracy machine therefore advanced generic unpack  recent malware detect existence DBI develops anti DBI resistant  however overhead cannot handle hollow technique customize multi exploration technique packed code purpose trigger unpack routine runtime environment BinUnpack benefit multi exploration execute hidden unpack routine extract unpack routine code instead code insight mechanism custom packer another related direction dll hijack prevention dll hijack originally malicious component load propose prevent dll hijack  kwon  automatic technique detect unsafe component loading profile application dynamic load behaviour via hook apis load component apis    introduce  min   propose verification mechanism secure execution dynamic component load hook apis  monitor dynamic load behaviour dll hijack prevention assume dll  OS kernel contrast dll hijack defense purpose available resource defender BinUnpack session binary analysis CCS october toronto canada packed malware packed unpacked difference entropy packed unpacked difference code data ratio packed dumped difference virustotal detection cumulative distribution unpack packed malware OS kernel hook native apis therefore dll hijack prevention mechanism defeat BinUnpack becomes increasingly discussion conclusion prototype BinUnpack limitation custom packer evade BinUnpack detect movement mouse cursor artificial realistic environment simulate user interact OS unpacked code function correctly iat obfuscation api redirection render rebuilt iat incomplete rebuilt iat unpack routine iat however accurately reconstruct iat heavyweight data analysis future another direction feasibility apply BinUnpack linux malware packed malware circulation tremendous amount exist generic unpack limited overhead lack anti analysis resistance develop novel unpack approach BinUnpack capture rebuilt feature instead execute memory BinUnpack tedious memory access trace runtime overhead withstand anti hook trick develop BinUnpack api monitor module kernel dll hijack demonstrate efficacy generality BinUnpack