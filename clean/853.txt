smart contract programmable decentralize transparent financial application smart contract platform typically turing program enable arbitrary application however permissionless smart contract impose restriction computation implement globally replicate sequential execution model ethereum limit computation infeasible propose novel ace goal enable complex smart contract permissionless blockchains ace chain execution model contract issuer appoint service provider execute contract code independent consensus layer primary advantage ace previous allows contract safely another contract execute service provider ace enable offchain execution interactive smart contract flexible trust assumption evaluation ace enables magnitude complex smart contract standard ethereum CCS CONCEPTS security privacy distribute security keywords blockchain smart contract scalability introduction bitcoin become permissionless cryptocurrency popularize blockchain technology ethereum extend concept smart contract program contract participant load blockchain currency  account contract code defines fund transfer contract commonly argue smart contract significant advantage traditional financial advantage generality smart contract programmable enable arbitrary financial application blockchains improve transparency smart contract code execution verifiable anyone public blockchain liveness contract execution entity permissionless attractive building novel financial application smart contract fail realize fully ethereum principle allows arbitrary contract turing heavily limit contract complexity limit ethereum sequential globally replicate execution model miner execute contract due replication computational complexity contract inherently limited prevent excessive delay ethereum metric execution complexity contract surpasses specify limit execution aborted effectively limit computation implement task sort integer selection sort limit sort limit complex application decentralize blockchain oracle quickly become infeasible goal increase per execution limit enable execution complex smart contract permissionless blockchain ethereum maintain transparency liveness previous ethereum execution model expensive recent research explore alternative execute contract permissionless blockchains yoda proposes randomly sample model asynchronous execution contract contract session smart contract cryptocurrencies CCS november virtual usa subset miner chosen randomly execute contract code independently mining return transaction arbitrum suggests model contract creator  verifier execution integrity chain arbitrum replaces sequential globally replicate execution model ethereum contract execute verify asynchronously contract integrity  trust execution environment TEEs namely sgx enclave execute smart contract motivation  enable confidential contract complex execution decouple consensus  purpose execute contract partition none address concurrent execution transaction partition contract execute partition contract another partition ethereum contract contract execute contract without concurrency contract inconsistent distribute database none previous enable execution ethereum contract propose novel ace asynchronous concurrent execution complex smart contract ace combine previous efficient concurrency mechanism flexible trust model yoda ace executes contract asynchronously chain decouple consensus arbitrum execution perform service provider appoint contract issuer model allows execution complex contract without consensus enables flexible trust assumption liveness guarantee contract issuer appropriate service provider contract separately user service provider trust contract safety liveness execution model allows digital currency permissionless blockchain transparency integrity guarantee benefiting efficiency flexibility chain execution ace noteworthy difference previous unlike arbitrum service provider unanimous agreement execution expensive chain verification enable flexible verification execution accepted service provider report ace trust model safety ensure appoint service provider byzantine faulty contrast  ace tee fully trust integrity compromise sgx platform relevant threat finally unlike previous ace partition transaction transaction involve contract handle service provider enables efficient execution contract interact across service provider boundary integrity partition transaction guaranteed faulty partition involve concurrency extensively context database classical phase lock optimistic concurrency recent research propose deterministic alternative transaction pre execution benefit avoid expensive distribute commit protocol multiple communication involve partition observation deterministic approach basis chain smart contract execution tailor approach purpose augment typical structure miner creates pre transaction execution service provider examine contains transaction contract execute chain typically concurrency expensive synchronization partition distribute commit protocol avoid leverage pre assign broadcasting commit transaction execution peer peer network transaction fully execute service provider transaction miner accept service provider commits transaction ace transaction processing service provider tentative contract previous execution chain ensure contradict obtain signature commit execution reference previous contract miner refer chain ensures allows flexible trust model safely primary goal ace enable complex contract evaluate aspect simulated asynchronous chain execution ace sequential execution model ethereum ace enables contract magnitude longer execute instead millisecond throughput transaction per ace significantly improves advantage smart contract ability implement arbitrary financial application cryptocurrencies advantage smart contract improve transparency liveness ace preserve transparency contract execution publicly chain naturally ace cannot liveness guarantee ethereum contract execute pre entity instead permissionless network denial service attack specific contract easy however ace adjustable liveness guarantee contract guaranteed honest service provider available contribution summarize contribution ace propose novel ace offchain execution complex smart contract permissionless blockchains feature ace flexible trust model concurrency protocol session smart contract cryptocurrencies CCS november virtual usa evaluation ace enables magnitude complex contract ethereum statement motivate define goal discus limitation previous motivation goal ethereum contract execute sequentially miner participate consensus sequential globally replicate execution model combine pow consensus mechanism execution integrity strict serializability transaction model ensures integrity blockchain contract assume trust assumption ethereum consensus mechanism background ethereum execution trust model appendix ethereum ensure transaction execution integrity honest miner execute transaction verify correctness miner verification inherently limit achievable throughput contract implement throughput interval therefore execution ethereum contract limited limit computational complexity contract currently limit ethereum approximately perspective task sort integer insertion sort twice although ethereum turing principle allows execution arbitrary smart contract arbitrary severely limited contract perform cryptographic operation data TLS machine model infeasible goal allows execution computationally complex smart contract instead millisecond computation permissionless blockchain ethereum argue enable various contract perform cryptographic operation natively EVM assume heavier computation rarely smart contract limitation previous recent research explore alternative execute smart contract summarize limitation approach discus additional related alternative execution model yoda subset consensus participant randomly sample execute verify contract limitation yoda smart contract multiple execution subset sample subset relatively miner mining acquire monetary benefit benefit verification cryptosystem therefore miner tempt skip execution verification accept refer verifier dilemma node reduce probability cheat approach reduce execution replication standard ethereum node amount redundancy multi execution communication overhead probability integrity violation negligible addition yoda unbiased distribute random beacon beacon protocol randhound highly expensive initialization routine participant significant communication periodic random arbitrum execution smart contract perform asynchronously chain manager appoint contract creator execution accepted miner appoint manager manager transaction immediately accepted challenge instead signing manager dispute challenger deposit prof correctness protocol logarithmic execution trace challenge contract cannot progress partition handle message chain equivalent transaction chain execute atomically serializability guaranteed chain creates latency  confidentiality smart contract decouples contract execution consensus execute contract chain sgx enclave approach enables execution complex contract  enclave trust compromise enclave enables adversary violate contract integrity arbitrarily recent research tee compromise practical threat distribute database terminology executes contract partition however none partition transaction contract execution partition another ethereum contract another contract therefore cannot execute safely sharding scheme sharding approach increase blockchain transaction throughput scheme  backbone infrastructure shard partition smart contract author designate trust shard execute smart contract parallelize execution however maintain integrity across shard execution shard honest mutual trust omniledger another sharding scheme cro transaction shard random sample yoda shard reduce probability cheat random selection omniledger significant redundancy addition omniledger bitcoin style transaction modification securely smart contract transaction splitting another execute computationally complex contract ethereum split execution multiple transaction however splitting contract additional mechanism contract atomic session smart contract cryptocurrencies CCS november virtual usa lock timeouts within contract prone subtle program error importantly splitting contract individual widespread computationally complex contract approach cannot increase average execution per contract contract limited sequential execution ace overview overview ace goal ace enable execution complex smart contract permissionless blockchains address limitation previous review model model ace permissionless entity freely role client equivalent user ethereum client smart contract broadcasting transaction specifies contract addition contract client deploy smart contract contract creator broadcasting transaction contains contract code specification specification defines service provider execute contract acceptance criterion execution miner responsible transaction ethereum primary difference ace miner ethereum miner former execute contract instead perform validity transaction dependency execution service provider responsible execute contract execution service provider communicate execution network service provider public available potential client execute smart contract publishing website blockchain service provider incentivized fee execution complexity network assume entity communicate peer peer network exist blockchains bitcoin ethereum execution model chain contract execution model arbitrum deploy contract contract creator  service provider responsible contract execution execute contract creator specifies identity public service provider transaction creates contract instead service provider execution approach contract creator define quorum service provider acceptable execution identity focus ethereum proof consensus therefore miner refer consensus participant although orthogonal consensus scheme ace permissionless consensus scheme proof stake PP network service provider miner client ace model client deploy contract broadcasting transaction miner organize transaction service provider execute contract miner service provider security parameter define trust contract contract execute specify service provider report execution accepted miner contract involve multiple contract execute execute involve contract contract participant trust execute contract detail comparison ethereum counterintuitive contract creator trust contract separately however emphasize decision exist trust model ethereum contract execution ethereum trust model contract specific user freely contract trust user decides smart contract action user implicitly agrees contract specification logic specify contract code user decides trust contract trust contract ace specification additionally identity service provider quorum ethereum ace contract affected contract generally execution model hybrid permissionless permissioned model acceptance ace explores permissionless cryptocurrency permissioned contract argue valuable understand improvement moderate trust model decouple chain execution efficiency allows flexible trust model permissioned validators appoint contract separately smart contract execute chain directly utilize underlie digital currency implement permissionless blockchain transparency  protection trust model flexible allows various application security requirement exist validators contract fully compromise fund contract affected integrity currency contract guaranteed session smart contract cryptocurrencies CCS november virtual usa additionally public blockchain client service provider enables service discovery trust assumption client fully untrusted permissionless blockchain regard miner standard trust assumption ethereum pow individual miner malicious miner collectively trust consensus honest majority mining service provider reputable entity contract exchange service fee non profit organization contract public assume service provider compromise behave arbitrarily contrast  contract creator  execute defines security parameter deployed contract contract honest quorum non faulty service provider byzantine fault contract faulty quorum contract honest faulty quorum integrity underlie cryptocurrency creation spending independent contract execution rely appoint service provider requirement define informal requirement detailed definition proof requirement safety safety requirement ace enable partition without assume partition trust precisely guarantee execution integrity strict serializability transaction contract faulty quorum byzantine faulty service provider contract interacts contract faulty quorum fault requirement ace apart previous none partition strict serializability isolation distribute database ensures outcome transaction execute parallel partition transaction execute atomically sequentially apparent external observer background concurrency appendix execution integrity context code contract execute correctly input contract receives execution contract depends input another contract option option contract logic treat input untrusted data accordingly option input trust data client contract willing trust source contract trust option faulty source cannot violate integrity contract execution contract ethereum ethereum contract receives input oracle another contract input treat untrusted contract code alternatively oracle input source contract code trust user contract requirement liveness liveness contract liveness contract honest quorum non faulty service provider responsive interacts contract honest quorum faulty quorum contract responsive transaction successfully execute return abort message processing transaction benefit liveness interaction another potentially faulty non responsive contract cannot halt contract liveness transaction liveness transaction eventually execute successfully ace transaction liveness contract involve transaction honest quorum none faulty quorum requirement performance performance requirement ace efficient concurrent distribute entity execute transaction execution execution successfully node commit classical distribute commit protocol phase lock guarantee strict serializability multiple communication involve entity appendix ace minimize concurrency overhead transaction execute within contract across multiple contract optimize benign transaction execution minimal communication overhead absence error attack recovery error expensive contract execution overview overview contract execution ace ethereum client broadcast transaction peer peer network assume ace transaction contains operation computation simply examine blockchain without issue transaction broadcast transaction miner transaction contract transfer account another miner immediately execute transaction chain transaction contract miner perform transaction format transaction importantly execute contract broadcast network service provider appoint contract execute contract code execute service provider transaction broadcast network miner signature quorum appoint service provider dependency meaning refer hash previous correspond signature future session smart contract cryptocurrencies CCS november virtual usa necessarily dependency ensures conflict quorum within execution cannot replayed context another fork blockchain becomes canonical chain efficient commits distribute node execution successfully node commit ace service provider agreement protocol transaction already perform miner similarly miner ultimately transaction commit therefore service provider multi commit protocol byzantine agreement ace variant deterministic concurrency transaction pre avoid expensive distribute commit protocol appendix distribute database transaction typically commit immediately execution avoid dirty transaction resource another transaction transaction commit transaction cannot commit due crash transaction preserve consistency chain contract execution transaction commits inherent latency due infrequent generation rate permissionless blockchains dirty unavoidable ace ensures consistency presence potential dirty miner commit transaction ensure per contract previously transaction another transaction commit invalidate transaction commit transaction affect contract replicate contract execution execute partition transaction distribute node service provider execute operation access resource contract storage variable request another partition execute transaction resource partition contact service provider execute request operation approach optimizes computational resource illustrate however significant drawback approach communication smart contract involve subcalls contract communication involve service provider drastic adversarial partition trust approach ace optimize communication instead service principle execute transaction commit execution transaction proceed however transaction per completely impractical EC EC PP network strawman EC EC PP network uncommitted contract execution ace strawman concurrent execution subcall communication partition replicate model involve service provider execute transaction precede initial update contract tentative uncommitted provider communicate subcalls involve service provider execute transaction publish afterward illustrate enable partition involve service provider update tentative involve contract execute previous contract blockchain service provider broadcast PP network update relevant precede transaction within specify timeout service provider issue abort transaction otherwise service provider execute transaction PP network exchange tentative contract deployment ace easy service provider establish communication link freedom migrate IP address etc partition contract model transaction possibly involve contract ace client pre transaction reconnaissance contract service provider involve attach information broadcast transaction enables service provider contract execute contract assemble tentative tentative involve service provider execute chain execution service provider sends PP network miner threshold signature involve smart contract perform dependency future per contract previous service provider communicate ensure within PP network reduce latency mining pool ensure latency session smart contract cryptocurrencies CCS november virtual usa ace DETAILS ace detail structure ace consist transaction execution execute smart contract contract deployment deployment smart contract client chooses execute EC available service provider sends deployment request RD service provider EC executor contract deployment request contains contract code parameter identity chosen service provider service provider agrees execute return signature RD deployment request client creates deployment transaction  service provider EC deployment request RD signature  RD RD EC member EC client sends deployment transaction network miner verify signature valid transaction member EC execute constructor contract normal contract described service provider network future contract smart contract client creates transaction ethereum transaction however addition standard component ethereum transaction nonce price recipient transfer input data signature client specifies involve contract allows service provider quickly involve contract execution directly contract specify ethereum transaction apply contract indirectly subcalls execute contract involve contract client execute contract locally dynamically contract reconnaissance analogous estimate ethereum ethereum contract local pre execution execution transaction already apply transaction execution abort client transaction newly involve contract however unlikely smart contract purposefully exhibit behavior alternatively static analysis approximate involve contract client cannot misuse feature violate contract safety contract subcall contract simply execute responsible execute respective contract commit non faulty execute involve transaction simply exception execution PP network RD RD RD  EC contract deployment client sends deployment request RD service provider chosen execute EC return client client sends transaction network service provider transaction execute contract constructor network future per transaction limit price specify client prevent infinite loop limit ace contrast ethereum client transaction network miner validity account balance transaction nonce signature verifies correctly transaction service provider parse involve contract transaction specify contract responsible transaction execution queue service provider parallelize execution distinct smart contract execute contract sequentially queue contract execute transaction involve smart contract service provider simply execute transaction network miner transition recent previous hash hash apply ensures cannot replayed context conflict quorum signature miner transaction quorum service provider execute commit transaction partition contract transaction involve smart contract contract execute described session smart contract cryptocurrencies CCS november virtual usa transaction client creates transaction sends network described miner validity fetch service provider fetch transaction PP network transaction address contract contract contract responsible transaction execution queue respective contract tentative update service provider tentative transaction PP network quorum respective execute chain service provider update tentative local contract allows service provider involve contract execution EC service provider update contract update transaction contract schedule contract execution update transaction execution queue contract service provider executes transaction contract subcalls tentative smart contract broadcast execution service provider sends correspond signature PP network hash previous contract ensure blockchain fork inconsistent tentative contract cannot inconsistency quorum service provider involve execute eci transaction accepted becomes unresponsive protocol progress without abort sufficient achieve quorum upon service provider miner previous already apply involve smart contract correspond schedule transaction transaction chain signature ensure quorum involve smart contract future verification verify verifier correctly transaction valid transaction valid conforms consensus valid proof  finally apply validity node transaction signature sender valid sender sufficient balance node signature service provider valid quorum execute involve contract performs PP network uncommitted EC EC partition contract contract execute quorum EC execute quorum EC diagram message exchange contract involve becomes unresponsive exchange responsive quorum commit successfully dependency hash previous apply contract additionally previous transaction involve involve smart contract apply previously define per contract transaction preserve node fifo queue transaction per contract easily smart contract recovery error unresponsive service provider ifu individual service provider become unresponsive transaction handle service provider describes transaction despite unresponsive service provider unresponsive execute service provider become unresponsive unresponsive transaction involve service provider obviously unresponsive service provider fix restart crash discus permanently unresponsive service provider replace goal ace ensure unresponsive cannot prevent contract proceed ace achieves service provider broadcast abort transaction service provider broadcast abort tentative update signature involve contract partition transaction execution within pre define limit broadcast abort signature execution within limit execution session smart contract cryptocurrencies CCS november virtual usa miner abort service provider execute eci involve contract quorum threshold abort blockchain transaction instead allows involve contract progress execution future transaction execute another contract unresponsive extend fail reconnaissance client fail correctly contract involve transaction service provider transaction execution exception execution exist ethereum exception client issue transaction newly estimate involve contract contract ace involve dirty previous transaction miner due temporary networking issue intentional attack cannot commit miner per contract transaction service provider commit miner simply security analysis analyze safety liveness ace safety recall safety requirement ace ensure contract without faulty quorum execution integrity strict serializability interact faulty contract perform analysis intra partition safety analysis safety contract involve smart contract specification contract defines execute consist service provider quorum asynchronous network service provider byzantine fault execution integrity strict serializability contract contract involve contract proof member compromise others correctly execute contract code adversary cannot signature execution non compromise service provider transaction per contract execute transaction atomically sequentially another miner dependency execution integrity strict serializability transaction partition safety safety contract involve multiple smart contract specification contract defines execute EA consists service provider quorum asynchronous network service provider EA byzantine fault execution integrity strict serializability contract contract involve contract proof distinguish faulty execute involve contract EB consist service provider  service provider EB byzantine faulty adversary cannot acceptable false contract adversary cannot false tentative contract accepted non faulty service provider EA provider EA derive execution contract initial involve contract execution integrity guaranteed execute transaction fault execution involve contract tentative involve contract EB consist service provider quorum service provider EB become byzantine faulty execution false execution contract quorum EB however due quorum EA achieve ensures accepted miner execution integrity ensure inconsistent tentative involve contract EB consist service provider quorum service provider EB faulty execution inconsistent execution previous convince member EA false tentative contract contract execution contract execute quorum EA false however reference tentative miner correctly reference previous commit chain tentative execution canonical commit chain ensure execution integrity contract strict serializability ensure due blockchain dependent transaction execute atomically guarantee concurrent execution equivalent sequential execution accord finally execution smart contract relevant participant smart contract enable spends affect overall cryptocurrency ace integrity underlie cryptocurrency guaranteed independently smart contract execution smart contract faulty execute arbitrarily modify balance transfer checked cryptocurrency consensus layer contract balance increase amount explicitly transaction smart contract smart contract initiate fund exceed balance ensures compromise execute neither fund execute completely compromise liveness recall liveness contract liveness contract honest quorum responsive session smart contract cryptocurrencies CCS november virtual usa interacts non responsive faulty contract transaction liveness transaction eventually execute successfully involve contract honest quorum none faulty quorum ace previously safety asynchronous network liveness assume synchronous network bound network delay synchrony assumption consensus protocol bitcoin contract liveness contract liveness specification contract defines execute EA consists service provider quorum synchronous network service provider EA non faulty transaction contract eventually execute aborted proof contract contract non faulty service provider exist execution successfully contract non faulty service provider execution contract interacts another contract non faulty service provider EA EB execute successfully execution available service provider EA EB timeout issue abort allows transaction contract execute aborted similarly available service provider EA inconsistent EB contract faulty transaction aborted allows transaction contract transaction liveness transaction liveness transaction involve contract define execute eci quorum synchronous network assumption min service provider eci byzantine fault liveness guaranteed transaction eventually execute proof min service provider eci faulty involve contract quorum non faulty service provider involve contract liveness broadcast previous transaction within finite bound synchrony assumption allows involve service provider derive tentative involve contract honest service provider issue abort abort issue byzantine service provider quorum threshold faulty quorum contract execution honest service provider exists honest quorum involve contract execution quorum dissipate within fix bound honest service provider issue abort abort issue byzantine service provider quorum threshold inclusion blockchain evaluation analyze complex contract ace evaluate performance ace contract complexity average computational complexity contract ace execution model sequential execution model ethereum model python simulate throughput node  complexity contract target throughput dependency contract simulation detail simulate ace parameter service provider smart contract standard deviation contract execution upper bound throughput service provider contract affect interdependent smart contract execution generate simulated contract define execution involve contract sub simplicity assume contract contract amount sub execution fix execution sample normal distribution standard deviation involve contract sample uniformly contract furthermore contract assign responsible service provider chosen uniformly fix provider sample transaction transaction contract sample uniformly random generate contract simulation simulated service provider connection  network delay simulate propagation delay exchange tentative measurement configuration throughput transaction per tps ace execution contract allows computationally intensive smart contract execution target throughput exhaust throughput underlie consensus layer achieve tps fix interval simulate transaction per tps upper bound achievable permissionless network throughput throughput capped average ethereum throughput limited tps service provider theoretical maximum execution complexity ethereum target throughput execution sequential transaction execution model absolute upper bound sequential execution model assumes propagation transaction overhead session smart contract cryptocurrencies CCS november virtual usa average execution per transaction target throughput sample refers contract sample transaction additionally involve contract per contract sample uniformly average execution per transaction target throughput sample fix contract upper limit sample additionally involve contract varies whereas reality average execution achieve target throughput sequential execution model ethereum contract sample transaction maximum involve contract fix currently percentile ethereum  impact sample clearly visible simulation sample contract ace allows execution magnitude sequential execution dependency transaction contract execution target throughput target throughput tps currently achievable ethereum transaction execution whereas theoretical upper bound sequential execution contract involve contract measurement contract sample contract graph denote upper bound uniformly sample additionally involve contract contract transaction involve zero additional contract transaction involve additional contract dependency therefore average computational complexity however difference additionally involve contract ace capable handle contract execution clearly ace longer execution contract interdependence distinct smart contract exist contract involve smart contract simulation service provider service provider available ace longer execution summary overall ace transaction execution magnitude theoretically handle sequential execution optimal propagation sequential execution due propagation delay difference ace performance evaluate computation storage communication ace implementation implement ace ethereum implementation execution smart contract compile EVM bytecode EVM implementation parity ethereum client computation performance metric evaluate computation verification contract verification task perform miner node verify verification saving chain contract execution reduce eliminate verify transaction consists verification service provider signature deserialization encode finally application hash signature verification deserialization input verification relative transaction storage variable contract independent sub quorum variable corresponds byte conduct machine intel core TM cpu ghz thread GB ram verification proportional throughput verify apply roughly MB service provider signature contributes verification parallelize multiple signature session smart contract cryptocurrencies CCS november virtual usa chain storage verification contract transaction per ethereum throughput average quorum per transaction quorum storage verification verification quorum service provider average per transaction verification per storage performance metric evaluate storage chain storage due execution execution storage linearly update byte byte byte location addition ECDSA signature byte member quorum storage independent execution contract chain storage average storage per transaction quorum assume throughput ethereum contract transaction per quorum storage overhead kilobyte currently ethereum average per transaction contract overhead effectively overhead grows linearly increase debate community implication security issue stem increase increase verification execution ace address exactly execution away miner propagation issue assume addition propagation protocol developed MB propagate majority bitcoin network within connection mbps feasible contract ace communication primary communication ace increase described message involve significant latency transaction execute finally another latency commit instead ethereum however overhead latency usually transaction pow blockchains discussion incentive naturally ace incentive service provider participate easily model ethereum miner per byte fee inclusion transaction fee contract execution service provider execute contract participant execute contract price significantly ethereum service provider smart contract desirable ability update service provider replace service provider become permanently unresponsive approach deployed smart contract code contract specific service provider update policy defines service provider update initial contract deployment signature aggregation execute service provider signature increase verification execute verification reduce aggregate signature scheme BLS signature client individual signature service provider aggregate broadcasting miner optimization beneficial execution verification aggregate signature standard signature ECDSA ace ethereum principle ace implement smart contract ethereum however verification component smart contract ethereum virtual machine instead natively operation costly implement ethereum smart contract handle queue verification throughput limited related plasma another approach ethereum introduce chain consensus mechanism transaction specific purpose explicit transfer asset chain chain complicates interaction chain parallelize smart contract execution multiple core node node execute smart contract conclusion permissionless smart contract platform ethereum enable arbitrary financial application however impose restriction computation implement described novel ace enables magnitude complex contract chain execution appoint service provider technical ingredient concurrency protocol allows contract across service provider boundary service provider mutually trust