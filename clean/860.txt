cryptographic api misuse expose secret predictable random vulnerable certificate verification seriously threaten software security vision automatically screen cryptographic api massive loc program however hinder practical difficulty reduce false positive without compromise analysis quality goal accomplish cryptoguard detection algorithm refine program slice identify specific irrelevant refinement reduce false alert cryptoguard impact apache project android apps generate security insight finding multiple popular apache project harden code spark ranger ofbiz progress towards analysis manually analyze apache alert confirm positive precision depth comparison crysl SpotBugs coverity CCS CONCEPTS security privacy software application security keywords accuracy cryptographic api misuse static program analysis false positive false negative benchmark java introduction cryptographic algorithm provable security guarantee presence adversary however vulnerability deficiency cryptographic implementation seriously reduce guarantee researcher misuse cryptographic apis unusual application code vulnerability multi fold complex apis lack cybersecurity training lack insecure mislead forum stackoverflow aspect security library JCA   developer correctly certificate verification encryption decryption focus goal screen massive java project cryptographic api misuse specifically aim static analysis false positive false alarm routinely developer effort screen cryptographic apis previously report literature static analysis crysl  CogniCrypt CryptoLint dynamic analysis SMV hunter  manual code inspection static dynamic analysis respective pro con static execution program program security unlikely false negative detection dynamic comparison trigger detect specific misuse symptom runtime  ssl TLS advantage dynamic approach tend false positive false alarm static analysis deployment grade code screen scalable coverage static program analysis approach favorable however exist static  optimize massive java project loc exist static analysis limited detect ssl TLS api misuse detect complex misuse scenario  insecure implementation  TrustManager screen apps google recently deployed automatic app mechanism ssl TLS hostname verifier certificate verification vulnerability however inspection target obvious misuse scenario return verify empty  JCA   java cryptography architecture java cryptography extension java secure socket extension respectively session 0D mobile security CCS november london united kingdom substantial progress building accuracy runtime static analysis detect cryptographic ssl TLS api misuse vulnerability cryptoguard built specialized backward program slice technique slice algorithm implement context sensitive data analysis although program slice technique identify instruction influence influence program variable application screen cryptographic implementation explain detection accuracy challenge excessive false positive static analysis slice generates detection constant predictable apis password initialization vector IVs however benign constant irrelevant parameter mistaken violation array collection bookkeeping constant another source detection inaccuracy assumption runtime library analysis assumption android apps necessarily java project cryptoguard address false positive refinement algorithm derive empirical observation program idiom restriction refinement remove irrelevant resource identifier argument operation constant infeasible bookkeeping refinement algorithm reduce alert apache android manual analysis cryptoguard precision apache efficiency coverage analysis technique super graph entire program incur significant memory runtime overhead contrast demand slice algorithm lightweight slice criterion propagate potential impact security hence portion code technical contribution summarize implement analysis algorithm detect cryptographic ssl TLS api misuse static code cryptoguard developer routinely java project besides source cryptoguard currently integrate software assurance marketplace swamp software security analysis platform gain numerous security insight screen apache project violation apache project project cryptographic misuse project report security finding apache promptly fix disclose apache pragmatic constraint backward compatibility evaluation android apps around vulnerability library package application code library google facebook apache tencent available http github com  cryptoguard GPL violation category hardcoded keystore password  multiple google library detect multiple ssl TLS mitm vulnerability google automatic screen benchmark  bench  bench contains intraprocedural instance inter procedural sensitive false positive api threat model overview threat model discus technical challenge associate detect threat static program analysis challenge briefly overview threat model summarize vulnerability cryptoguard aim detect rank severity vulnerability due predictable secret software predictable cryptographic password inherently insecure constant derive constant api predictable output  timestamps insecure vulnerability mitm attack ssl TLS improper customization java secure socket extension  apis mitm vulnerability CryptoLint detect vulnerability vulnerability predictable PRNGs predictable pseudorandom generator PRNGs source vulnerability java util random PRNG insecure addition java security  predictable vulnerability cpa ciphertexts indistinguishable chosen plaintext attack cpa static attack easy password encryption PBE addition static initialization vector IVs cipher chain cbc electronic codebook ECB mode insecure vulnerability feasible bruteforce attack MD sha susceptible hash collision pre image attack addition bruteforce attack feasible symmetric cipher DES  blowfish rsa dsa DH ecc weak rfc recommends iteration PBE severe vulnerability specific attack scenario document literature prioritize alert categorize severity medium attacker gain attack difficulty vulnerability predictable secret ssl TLS mitm immediately exploitable substantially benefit attacker android application access keystore hence cod password harmful android however privilege escalation attack bypassing restriction demonstrate commercially available rainbow attacker easily obtain pre image MD sha hash typical password hash collision algorithm enable attacker forge digital signature benchmark available http github com   bench session 0D mobile security CCS november london united kingdom  crypto crypto public     pas crypto crypto  byte  arg return crypto encrypt arg arg static  src context  src null  return crypto algo aes algo spec aes cbc   cipher cipher public crypto  cipher cipher getInstance algo spec   assign byte encrypt txt null  byte   utf byte  txt      algo cipher init cipher encrypt mode  return cipher   param crypto  encrypt utf   param arg   crypto context    pas   param param influence influence orthogonal invocation orthogonal influence demonstrate various feature cryptoguard crypto generic aes encryption  crypto password encryption indicates influence indicates influence parameter partial data dependency graph  variable integrity message therefore vulnerability classify risk vulnerability predictability cpa substantial advantage attacker significantly reduce attack effort medium risk brute cipher non trivial effort risk technical challenge overview task screen code cryptographic api misuse technical challenge technical challenge false positive false positive due phantom phantom available analysis unlike android java web application phantom library non library package project binary refer phantom library exist cryptographic misuse vulnerability CryptoLint crysl handle phantom library false positive context member phantom library  phantom data diagram straightforward def analysis likely report pas cod cannot explore  crypto specific refine slice output examine context reveals pas identifier security influence  safely discard false positive due data structure constant bookkeeping data structure another source false positive largely uncovered exist literature frequently data structure array data structure unaware analysis likely report cod influence parameter encrypt refinement algorithm discard data structure bookkeeping constant technical challenge II precision runtime tradeoff project loc building super cfg costly unnecessary cryptographic functionality confine within project however context sensitive analysis super graph superimpose project graph graph invoke instruction entry exit contrast adopt scalable approach depth orthogonal exploration cryptographic vulnerability involve constant distinguish feature constant processing generally processing orthogonal invocation clip orthogonal exploration impact detection accuracy runtime depth orthogonal exploration detection technique phantom handle reduce false positive introduce clip demand driven analysis context sensitive analysis demand driven perform demand inter procedural backward data analysis perform backward slice analysis slice criterion propagates upward orthogonally demand propagation encrypt  upward propagation propagation orthogonal invocation orthogonal propagation demand sensitivity apply inter procedural backward session 0D mobile security CCS november london united kingdom cryptographic vulnerability static analysis medium risk denote respectively cpa chosen ciphertext attack mitm confidentiality integrity authenticity respectively backward slice slice slice inter procedural unless otherwise specify intra refinement insight apply inter procedural backward slice vulnerability attack crypto severity analysis predictable constant cryptographic predictable secret confidentiality slice slice predictable constant password PBE confidentiality slice slice predictable constant password keystore confidentiality slice slice custom hostname verifier accept host ssl TLS mitm slice intra custom TrustManager trust certificate slice intra custom SSLSocketFactory manual hostname verification slice intra occasional http slice predictable constant PRNG predictability randomness slice slice cryptographically insecure PRNGs java util random randomness static PBE cpa confidentiality slice slice ECB mode symmetric cipher confidentiality slice static IVs cbc mode symmetric cipher confidentiality slice slice iteration PBE brute confidentiality slice slice cipher DES blowfish RC RC confidentiality slice insecure asymmetric cipher rsa ecc slice slice insecure cryptographic hash sha MD MD MD integrity slice slice influence indirect access orthogonal invocation getter refer sensitivity data sensitivity  awareness code project usually organize subprojects package jar cryptoguard creates consults acyclic graph dag  dependency approach excludes unnecessary subprojects analyzes independent sub project concurrently  analysis important cryptographic concrete java program statically enforce detection abstract mapped static analysis illustrate mapping cryptographic vulnerability concrete program analysis task mapping manual perform vulnerability refer detection vulnerability detect abuse  interface ideally implementation  javax net ssl  parameter verify verify hostname return statement slice criterion perform intra procedural backward slice verify implement detect abuse  interface reduce task detect concrete exception validate certificate   certificate expiration valid certificate  intuitively program analysis occurrence propagate exception slice criterion intra procedural backward slice parse inadequate analysis thrown exception detect  directly without perform hostname verification intuitively detect vulnerability  SSLSocketFactory influence  parameter verify  invocation addition return verify statement detection program slice identify instruction influence SSLSocketFactory instance instruction examine   verify return verify decision  hostname verification detect insecure asymmetric cipher configuration rsa concrete goal detect insecure default explicit definition insecure task program analysis define explicitly default statically define generation algorithm task analysis slice initialize invoked generator task backward program slice algorithm respectively employ demand sensitivity data task analysis complex cryptoguard mapping deduce implement inter procedural backward slice indicates inter procedural slice demand data sensitivity slice criterion appendix crypto specific  specialize static def analysis backward program  detect java cryptographic api misuse session 0D mobile security CCS november london united kingdom detection strategy realize program slice perform slice program slice analyze presence vulnerability category vulnerability program analysis detection summarizes slice technique detect vulnerability purpose slice alone inadequate explain overcome accuracy challenge definition variable statement modifies declaration assignment variable statement argument def dataflow analysis def analysis identifies definition statement describes dependency relation slice criterion statement variable statement parameter api backward program slice compute program statement affect slice criterion data slice criterion program slice compute program statement affected slice criterion data program slice criterion program slicer return program slice intraprocedural program slice mechanism def analysis compute slice confine inter procedural backward slice within security code analysis cryptographic apis influence recursively approach effectively skip bulk functional code substantially analysis slice criterion choice slice criterion directly impact analysis outcome slice criterion factor relevance vulnerability simplicity across multiple project slice criterion correspond apis appendix backward slice inter procedural backward slice slice criterion define parameter target invocation predictable secret parameter constructor  slice criterion intra procedural backward slice define slice criterion parameter assignment return detect insecure hostname verifier accept host return statement verify slice criterion intra procedural backward slice purpose intra procedural backward slice fold independently enforce security building inter procedural program slice intra procedural program slice utilizes def statement statement slice implementation utilizes  algorithm intra procedural data analysis framework soot orthogonal invocation encounter recursively slice argument statement influence return statement within orthogonal reduce runtime overhead orthogonal exploration clipped pre configurable depth refinement insight exclude security irrelevant instruction def analysis cannot identify      indirect access orthogonal invocation data demand inter procedural backward slice algorithm performs upward propagation analysis inter procedural backward slice intra procedural backward slice algorithm caller callee relationship graph program graph construction hierarchy analysis identify  specify slice criterion callsite refers invocation  obtain inter procedural backward slice invoke intra procedural slice recursively caller chain procedure sensitive typical initialization statement assignment encounter assignment analysis influence recursively slice analysis demand slice inspects statement slice criterion intra procedural slice intra procedural slice SSLSocketFactory hostname verification weak asymmetric crypto operation intraprocedural slice intra procedural backward slice slice assignment slice criterion traversal execution problematic code confine within slice analysis inter procedural inter procedural slice assign instruction constant slice criterion perform inter procedural slice identify instruction influence slice criterion def relation inter procedural slice operates slice obtain inter procedural backward slice latter collection instruction combine define data visible within orthogonal invocation inter procedural slice demand sensitivity data sensitivity upward propagation inter procedural backward slice data access indirectly orthogonal  invocation constant inter procedural slice cryptoguard determines constant influence data later encounter assign invocation observes previously influence return statement report constant demand sensitivity data cryptoguard constant  cod slice demand data sensitivity prototype sensitivity session 0D mobile security CCS november london united kingdom refinement FP reduction refinement algorithm exclude security irrelevant instruction reduce false alarm refinement insight RI deduce program idiom restriction discus possibility false negative detection overview refinement insight RI identify constant predictable program slice purpose ensure data cryptographic password IVs hardcoded solely derive hardcoded predictable timestamp  insecure however constant impact security refer pseudo influence  source false positive empirical observation program idiom restriction strategy systematically remove irrelevant constant predictable slice reduce  summarize RI removal indicator discard constant predictable variable orthogonal invocation RI II removal resource identifier discard constant predictable identifier source orthogonal invocation RI removal bookkeeping index discard constant predictable index data structure specifically RI discard influence parameter array collection instantiation index array index collection RI IV removal contextually incompatible constant discard constant predictable incompatible analysis context boolean variable cannot IV RI removal constant infeasible constant initialization update along slice criterion discard initialization valid influence criterion RI RI II RI IV handle clip orthogonal exploration due phantom invocation pre configure clip depth RI achieve data structure awareness RI compensate insensitivity highlight detail refinement insight remove indicator resource identifier detail RIs appendix RI removal indicator clip orthogonal exploration false positive argument variable utf jimple representation variable   invoke non static jimple intermediate representation IR java program  java lang byte  java lang utf analysis clipped cannot explore  def analysis constant utf influence  straightforward detection report utf hardcoded however utf encode safely ignore refer constant indicator  refinement insight impact analysis outcome discard argument  generate false negative suppose   instance constant   void  java lang  constant  flag contrary argument  assign statement typically variable ignore RI argument  invocation assignment instruction regard pseudo influence constant influence argument discard RI II removal source identifier another pseudo influence due clip orthogonal exploration identifier source illustrate importance insight code straightforward analysis flag constant encrypt however identifier retrieve java data structure false positive  java util java lang java lang encrypt retrieve external source static invocation  jimple assign statement typically external source  context java lang  java lang src variable src refers identifier actual pseudo influence avoid pseudo influence RI II discard argument  assignment although  transform representation another unlikely  transform constant evaluation refinement report alert employ refinement algorithm apache project android apps refinement algorithm reduce alert apache android apache project manually confirm remove alert indeed false positive constant related greatly benefit refinement significant reduction irrelevant alert maximum reduction detailed breakdown appendix effective regard validity manual analysis manual confirmation alert conduct prior cybersecurity author guidance professor senior author session 0D mobile security CCS november london united kingdom predictable hardcoded keystore pas predictable predictable IVs PBE iteration alert RI apache RI apache RI android RI android reduction false positive refinement insight apache project subprojects android apps maximum reduction refinement insight apache android RI removal array collection bookkeeping information refinement enable alert apache project careful manual source code analysis confirms alert positive precision false positive due insensitivity clip orthogonal exploration report conduct refinement enable refinement false negative discus impact orthogonal exploration depth impact orthogonal exploration depth conduct apache subprojects varied clip depth depth orthogonal exploration refers distance orthogonal slice orthogonal depth invoked slice discover constant across project increase slightly depth axis however manual analysis reveal none constant positive constant false positive increase orthogonal exploration depth improve recall specific decrease axis interestingly analysis runtime increase increase depth average runtime subprojects appendix inter procedural slice average drastically reduce depth increase analysis explores inside influence argument orthogonal invocation become irrelevant drastic reduction observation orthogonal exploration depth return irrelevant constant security FINDINGS evaluation experimental evaluation security finding apache project apache project risk vulnerability hardcoded secret mitm vulnerability breakdown accuracy apache project duplicate handle   constant predictable array collection individual violation alert positive precision predictable hardcoded pas dummy hostname verifier dummy cert validation improper socket http predictable untrusted PRNG static ECB mode  crypto static IV PBE iteration broken  crypto algorithm insecure  crypto broken hash security finding android apps thirdparty library risk vulnerability cryptoguard crysl SpotBugs trial version coverity benchmark project selection pre processing program popular apache project crypto api popularity fork github maximum minimum average code loc around hadoop crypto respectively perform  dependency analysis DAGs parse script  dependency analysis automate gradle maven manual ant identify  sub project incoming  dependency dag analyze subprojects popularity android apps google app category median apps per category soot  apk file java bytecode interface cryptoguard online apk  obtain readable source code manual verification concurrent instance cryptoguard intel xeon server 7GHz cpu 2GB ram apache average runtime median around android terminate unfinished analysis average runtime median cutoff app analysis within cryptoguard generate partial cryptoguard security finding apache project apache project project cryptographic misuse project summarizes security finding screen apache exclude subprojects session 0D mobile security CCS november london united kingdom depth constant discover constant positive depth runtime spark hadoop  depth orthogonal invocation inter procedural slice average slice impact orthogonal exploration depth discover constant runtime analysis project predictable http url insecure hash function insecure PRNGs vulnerability apache predictable constant predictable http   http  portion http cfg client xml   verifier  portion  java disabled hostname verification apache  public static  http  portion  java   alias boolean  TrustManager    portion  java trust certificate apache ofbiz vulnerability predictable secret apache project sub  hardcoded    hardcoded symmetric   triple DES obfuscation purpose unfortunately deterministic trivial obfuscation  fork aes encrypt user password however hardcoded password vulnerable apache  hardcoded code accidentally package production code triple DES insecure openssl remove triple DES nist recommend aes hardcoded password PBE default default password PBE      PBE default hardcoded password without sufficient warning risky distribution default configuration susceptible recovery plaintext password attacker access PBE ciphertext apache ranger fork hardcoded password default PBE distribution installation wiki mention administrator unaware setup likely default cod significantly weakens security guarantee PBE hardcoded password  private  tomcat   ofbiz  none  hive hadoop default project predictable hardcoded keystore password persistent insecure cod style insecure manual analysis insecure apache project secret cod default password source code plaintext password configuration file encrypt password configuration file decryption plaintext source code configuration java security apis callback  prompt user secret password however none project option  plaintext password filesystem unless personally modify code insecure secret storage user probably inflate security actual risk vulnerability ssl TLS mitm mitm vulnerability risk threat model apache project subprojects dummy hostname verifier accept hostnames spark fork  fork  fork ofbiz  apache project dummy trust manager trust certificate spark    broker  ofbiz project additional connectivity option session 0D mobile security CCS november london united kingdom manual analysis reveals project insecure implementation default ofbiz insecure ssl TLS configuration default ups shipping service socket recommend verify hostname manually project accept arbitrary hostnames project subprojects occasionally http protocol communication medium severity vulnerability important aware medium risk vulnerability recognize risk increase adversarial model hardcoded project apache ranger    ECB mode aes project predictable IVs project occurrence project PBE iteration ranger  project iteration PBE incubator  workbench  project iteration listing vulnerable code snippet apache ranger PBEKeySpec  password  MessageDigest MessageDigest getInstance MD algo MD byte  digest password  byte byte   int iteration password  return PBEKeySpec password  iteration listing code snippet ranger multiple issue iteration proportional password addition code timing channel adversary capable PBE execution multi tenant environment password information substantially decrease difficulty attack another issue compute MD hash password adversary obtain quickly recover password dependence password  requirement PBE chosen plaintext attack listing expiration  certificate yahoo finance  app due com  library void   chain str chain null chain  chain str lack signature verification others chain  listing ignore exception  sina finance app void   chain str  chain str  ignores exception various occurrence blowfish DES RC cipher occurrence default occurrence explicitly initialize project java util random PRNG static java util random deterministic java security  listing  without manual hostname verification  driver app  instance  getInstance TLS   instance     security finding android apps violation apps library distinguish app code library package information  xml android java file generation robust obfuscation average detect vulnerability library extends observation vulnerability report distribution vulnerability source hardcoded keystore password violation library frequent hardcoded keystore password  access certificate google library     besides google profile library source facebook apache  tencent library frequently application distinguish library package cryptoguard detect api misuse obfuscate package violation within obfuscate code report however unable report vendor obfuscate library pinpoint source obfuscate package active research overview android finding expose secret apache project summarizes discover vulnerability android application category untrusted PRNG broken hash violation interestingly predictable stamp java lang  api apache project android apps percentage ssl TLS api misuse http android apps dummy trust manager twice apache appendix analysis detect sophisticated google built screen likely code snippet listing cryptoguard detects developer  certificate mere expiration listing another developer ignore exception  listing addition cryptoguard detects occurrence apk contains app code library session 0D mobile security CCS november london united kingdom experimental  bench  bench advanced benchmark crysl coverity SpotBugs cryptoguard  truth positive TP FP FN positive false positive false negative output respectively pre rec precision recall respectively evaluate maximum subset negative advanced compute FPRs alert TP FP  bench  bench advanced GT summary inter pro GT inter pro multiple GT sensitive GT false positive GT summary TP FP FN fpr FNR pre rec TP FP FN TP FP FN TP FP FN TP FP FN fpr FNR pre rec crysl coverity SpotBugs cryptoguard distribution vulnerability android apps library library app unique predictable hardcoded password dummy hostname verifier dummy cert validation improper socket http predictable untrusted PRNG predictable ECB  crypto predictable IVs PBE iteration broken  crypto insecure  crypto broken hash violation popular libs manually confirm package violate com google api com  analytics com facebook org apache com tencent improper  without manual hostname verification apps listing   without manually verify hostname comparison google inspection detect obvious misuse security violation app popularity category substantial difference across comparison exist accuracy runtime cryptoguard exist crysl coverity SpotBugs cryptoguard commit  SpotBugs swamp coverity online obtain march crysl analyze apache project crysl commit android application  commit bda  http developer android com training  security ssl  CryptoLint code unavailable benchmark preparation construct  comprehensive benchmark quality cryptographic vulnerability detection regard exist benchmark   cryptographic apis web version coverity source code however  contains apk binary  bench cryptographic specify april advanced benchmark contains straightforward api misuse api negative advanced complex scenario inter procedural sensitive false positive evaluate ability recognize irrelevant api negative appendix distribution per per api respectively recent version benchmark diverse github update version http github com   bench benchmark comparison maintain fairness comparison report benchmark crysl coverity SpotBugs due lack documentation infer coverage generates alert category SpotBugs coverity cryptoguard perform benchmark crysl error partly due definition specific crysl alert cryptographic directly obtain generator however previously generate cryptographic securely code without generator cryptographic password crysl alert derive likely java recommends char password wipe however policy hardcoded password define char generate false negative advance benchmark crysl SpotBugs generate false positive variable multiple coverity zero false positive likely author benchmark author implement cryptoguard involve involve session 0D mobile security CCS november london united kingdom summary average runtime across crysl cryptoguard evaluate apache subprojects android apps  incomplete analysis standard deviation std compute across project apps variation across negligible apache subprojects android application  avg std median  avg std median crysl symbolic execution sensitive analysis however coverity multiple advanced vulnerability scenario benchmark appendix comparison cryptoguard fail report misuse false negative discus runtime comparison crysl cryptoguard randomly apache subprojects loc android application loc summarize runtime detail sort loc loc appendix cryptoguard task demonstrate robust efficient performance crysl exit prematurely apache project android apps due various error memory error apache cryptoguard exhibit overall runtime performance crysl android crysl faster partly crysl analyzes code reachable app cycle comparison cryptoguard library regardless lifecycle reachability valid alert maker pokemon cryptoguard crysl generate alert respectively cartoon avatar maker cryptoguard crysl generate alert respectively alert distinct positive library cryptoguard false negative crysl false negative cryptoguard false negative MD android core library com google android cryptoguard currently analyze web version coverity unable obtain runtime runtime SpotBugs comparison meaningful analysis mostly syntactical source code bug summary finding refinement reduction alarm apache project reduction android application apache project manually confirm remove alert indeed false positive manually examine remain apache alert refinement confirms precision apache project cryptographic misuse coverity source unable confirm loc obtain online java apk  cloc command increase heap 0GB crysl cryptoguard default 4GB heap memory widespread insecure plaintext password code configuration file insecure ssl TLS apis default configuration android apps cryptographic misuse apps vulnerability library package application library software firm cryptoguard detection ssl TLS api misuse comprehensive built screen google LIMITATIONS discussion static analysis perfect cryptoguard exception discus detection limitation cryptoguard future improvement cryptoguard intra procedural slice inter procedural slice potentially improve coverage difference  creation initialization usually implementation ignores sub SSLSocketFactory avoid false positive inter procedural slice extend analysis sub false positive source false positive insensitivity cryptoguard alert variable iteration assign code snippet project   however alert false positive assignment infeasible int iteration iteration iteration iteration iteration default iteration cryptoguard detects existence api misuse code verify vulnerable code trigger runtime issue limitation static program analysis apache spark confirm insecure PRNG affected code security critical however eliminate alert analysis aware custom define security criterion constitutes critical security depth knowledge project semantics another source false positive clip orthogonal exploration however deeper exploration impact eliminate false positive increase overall irrelevant constant discover net increase depth discover irrelevant constant oppose reduce false negative due refinement refinement false negative benchmark evaluation appendix cryptoguard false negative detection due refinement clip orthogonal exploration RI II ignore  pseudo influence instruction orthogonal exploration explore  clipped byte    however conversion mostly external source file network conversion unclear spark chose insecure PRNG non security purpose session 0D mobile security CCS november london united kingdom static highly unlikely indeed outside benchmark manual investigation apache alert additionally vulnerability originate clipped orthogonal cryptoguard conceptually false negative avoid increase depth orthogonal exploration default depth apache subprojects depth orthogonal exploration increase depth necessarily discover positive increase vulnerability disclosure feedback apache project regard vulnerability disclosure tomcat hadoop hive spark ofbiz  ranger apache spark remove dummy hostname verifier dummy trust apache ranger fix constant default PBE insecure cryptographic primitive ofbiz promise fix report issue constant IVs keystore password regard MD apache hadoop justifies MD per checksum hadoop file hdfs consistency setup assume presence active adversary android library submit vulnerability report google google issue misuse google library cite lack concrete exploit demonstration facebook tencent requirement feedback apache software foundation administrator demand concrete exploit demonstration report issue examine developer explain operational constraint backward compatibility client prevent fix apache tomcat server MD digest authentication code browser secure hash function define rfc however digest authentication rarely  issue secret storage justification developer choice plaintext password file  environment automate script manage service however deployment scenario server  environment project secure option prompt operator password unlock generate password properly disclose document insecure configuration  project user related detect cryptographic misuse cryptographic misuse detection typically construct static analysis CryptoLint   CogniCrypt crysl dynamic analysis    insecure implementation  TrustManager screen android apps author generate false positive significant barrier adopt static analysis http security  com  rfc http digest auth exists anomaly intrusion detection screen project virtually static slice generate non negligible amount false positive contextual refinement cryptoguard achieve precision crysl cryptoguard overlap security capability crysl code documentation identify crysl cryptoguard crysl verify correctness signature mac generation procedure crysl report non crypto issue variable flip cryptoguard crysl dummy hostname verifier dummy certificate validation http predictable untrusted PRNG fairness intersect portion capability misuse detection  CogniCrypt mainly built user goal detection developer friendly oppose deployment quality screen  focus feedback developer CogniCrypt focus code generation eclipse ide cryptographic task data encryption dynamic analysis static analysis narrow potential apps dynamic analysis SMV hunter apps custom implementation   initial screen  static taint analysis discover library cryptographic implementation issue cryptographic library openssl symbolic execution exploration reduce false alarm usually costly  graph mining technique detect ssl TLS api misuse program program dependence graph researcher misuse non cryptographic apis android serious security implication apis apis access sensitive information location IMEI password apis fingerprint protection service apis information storage data driven technique identify api misuse propose lightweight static analysis infer detection author propose bayesian framework automatically api effort automatically repair insecure code report static code analysis extensively related software malware analysis detection vulnerability discovery data leak detection infer client behavior leverage symbolic execution client code knowledge filter anomalous traffic fuzzing demonstrate automatically discover software vulnerability technique aim input vulnerability observable behavior trigger program crash anomalous protocol unclear fuzzing detect cryptographic vulnerability predictable IVs secret legacy primitive exhibit easily observable anomalous behavior session 0D mobile security CCS november london united kingdom CONCLUSIONS described effort deployment quality static analysis cryptoguard detect cryptographic misuse java program developer routinely effort crypto specific contribution specific contextual refinement FP reduction demand sensitive context sensitive sensitive program slice benchmark comparison obtain  security insight java secure cod research compiler automatically transforms cryptographic vulnerability static analysis code screen algorithm crysl expressiveness precision recall enable stateful analysis capture lifecycle cryptographic cryptoguard another useful future direction unlike crysl cryptoguard perform analysis code machine lack analysis overestimation vulnerability detection predictable insecure instantiation cannot