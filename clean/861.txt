prevalent software engineering code reuse methodology contribute significant widespread increase complexity software software bloat decrease performance increase security vulnerability propose chisel enable programmer effectively customize  program chisel input program debloated specification desire functionality output reduce version program respect specification chisel significantly improves upon exist program reduction novel reinforcement approach accelerate reduce program program evaluation suite widely unix utility program comprise kloc source code demonstrates chisel successfully remove unwanted functionality reduce attack program reducer reduce perses program program respectively chisel faster program CCS CONCEPTS security privacy software security engineering keywords program debloating reinforcement introduction software witness dramatic increase complexity prevalent software engineering factor trend instance emphasize increase developer productivity code reuse moreover  methodology whereby software feature package reusable code module library diverse client software bloat decrease performance increase security vulnerability moreover abundance gadget library allows attacker execute arbitrary algorithm without inject code application although software contains extraneous feature seldom average user commonly without user practical effective disable remove feature prevail approach reimplement lightweight counterpart exist program web server database library command utility  target embed platform however approach applicable source code available significant manual effort context mobile application app recently introduce iOS apps automatically detect user device relevant content specific device promising towards address bloat developer tag software identify correspondence spar iOS develop practical enable programmer customize  program input program simplify specification desire functionality generates minimize version program respect specification identify criterion satisfy effective minimality trim code aggressively respect specification efficiency efficiently minimize program program robustness avoid introduce error vulnerability generate program naturalness debloated code maintainable extensible generality handle variety program specification session 2D ML CCS october toronto canada software debloating chisel satisfies criterion depict chisel program minimize function candidate program satisfies violates output minimize version program satisfies chisel formal guarantee minimality generate program minimality suffice literature program reduction function expensive invoke instance involve compile candidate program suite minimality guarantee admits minimization algorithm invoke function quadratic input program however lesser guarantee global minimality exponential behavior challenge program chisel overcomes avoid generate syntactically semantically invalid candidate program chisel guarantee minimize program respect therefore robust avoids program transformation mangle program naturalness finally treat program enable applicable program specification program reduction reduce perses satisfy criterion chisel program minimize arbitrary function return minimize version program reduce satisfies minimality correctness criterion chisel however sacrifice efficiency naturalness generality reduce tightly couple craft program transformation tailor myopic reduce generates significant syntactically invalid candidate minimal version program moreover generates unnatural code perses sacrifice efficiency generality reduction syntax enables overcome limitation reduce avoid generate syntactically invalid program however suffers limited scalability generate semantically invalid program algorithm unaware semantic dependency program def relation variable generates program semantic error uninitialized variable grammar aware reduction overly conservative reduction thereby efficient reduce lastly perses applicable parse feasible binary program technical insight overcome limitation exist program reduction technique accelerate program reduction via reinforcement trial error chisel refines statistical model determines likelihood candidate program passing model effectively capture semantic dependency program towards desirable minimal program employ chisel agnostic program learner statistical model spec reduce checker  HPI HPI program overview chisel target program specification model vector representation candidate program evaluate chisel suite widely unix utility program comprise kloc source code chisel efficiently converges desire minimal program outperforms exist program reduction reduce perses program program respectively chisel achieves speedup program successfully trim vulnerability CVEs program eliminates available gadget average robustness debloated program validate fuzzer afl furthermore manually analyze source code generate program confirm remove functionality intend desirable software engineering modularity locality preserve summary contribution propose practical chisel reduce complexity software aim remove unwanted functionality exist program reduce attack propose reinforcement framework efficient scalable program reduction algorithm agnostic target program specification evaluate chisel widely unix utility program demonstrate enables remove exist vulnerability reduce attack without introduce bug  illustrate chisel enables programmer customize  program unix utility tar suppose obtain simplify version tar target embed platform exists version tar unix utility package embed linux busybox tar command option whereas lightweight counterpart busybox option demonstrate automatically obtain program functionality busybox version session 2D ML CCS october toronto canada bin  function compile clang tar  tar return function core archive multiple file foo tar  foo tar foo foo tar  foo tar foo exit extract  foo tar  foo tar foo foo foo tar tar  foo exit target option return function non core script optional script grep segmentation fault exit return compile exit core exit non core exit script debloating tar specification chisel debloating concise code enhance security lastly explain guarantee robustness program specify input chisel user specification desire feature specification script program program source compiles input output behavior compile program desirable error inconsistency script program return false otherwise return depicts script program specification recall goal obtain program functionality tar busybox core functionality tar command option script comprises function compile invoked source compilable program compile function core program exhibit desire comprises command option archive file extract file archive file extract function return program function non core serf avoid introduce error debloating specifies reduce program crash input undesired feature without requirement reducer arbitrarily remove code non core functionality possibly reduce program exploitable remove feature invoked script extensively functionality target program obtain various automatic generation technique regression suite developer suite developer program chisel approach specification version tar comprise loc statement within chisel generates simplify version comprise loc statement statistical model detailed enables efficiently minimal contrast program reducer perses reduce fail minimal program within depict reduce version tar respectively function reduce version code handle command option simplify version reduce program option besides function safer simplify version function header input file exception handle mechanism header invalid header valid function invoked accord command option reduce version exception handle remove program quietly terminates header invalid moreover reduce version function safer significantly simplify remove redundant achieve program reduction straightforward typical static dynamic analysis alone static analysis conservatively code actual  option input file unknown compile static approach cannot remove code function variable status unknown dynamic reachability cannot remove code function safer option variable absolute zero dynamic approach cannot remove contains security vulnerability analyze output chisel salient aspect reduce version tar generate chisel remove security vulnerability facilitate validation session 2D ML CCS october toronto canada chisel global variable declaration remove struct tar stat info stat info char safer char file int link target chisel code cve remove return file void extract archive char file safer stat info file chisel overwrite functionality remove void archive void void something void enum header status status header switch status header something chisel unnecessary functionality remove default option int int  char  int      switch  extract archive archive chisel unsupported option remove code snippet debloated version tar generate chisel security vulnerability removal tar extract file archive default writes file relative directory archive generate untrusted user malicious content absolute user potentially file extract archive however handle relative challenge archive contains target  malicious content file escape intend destination avoid tar sanitization mechanism implement function safer sanitizer  remove prefix  without  becomes sanitization unfortunately sanitization flaw recently discover cve exploit sanitize file target extract attacker file vulnerability allows attacker gain file overwrite capability realistic attack scenario suppose user unknowingly archive file malicious server extract message file archive malicious archive tar poc tar contains entry member etc  etc shadow command directory user intend extract file archive etc  tar tar poc tar etc  exploit vulnerability file etc shadow etc shadow extract etc  etc shadow file actual password encrypt format user account scenario vulnerability compromise developer tar fix issue simply ignore entry  contains subsequent version tar skip extract entry etc  etc shadow cve trivially disabled version disallows benign overwrite exist file reduce version chisel exploit reproducible albeit due chisel remove feature overwrite exist file sanitization feature core functionality script version input archive file extract outside directory exist file overwritten malicious content hence exploit reduce version reduce version cannot obtain simply remove code execution variable absolute debloated program dynamic reachability attacker gain file overwrite capability scope validation reduce program typically largely preserve syntactic structure user easily verify difference sophisticated code comparison clearly reduction furthermore reduce complexity enable apply precise automate technique reduce version introduces bug exist program technique static dynamic analysis fuzzing runtime monitoring mechanism verification employ improve correctness guarantee analyze reduce tar program static analysis random fuzzing debloating feasible manually inspect static analysis sparrow static analyzer security bug generate alarm reduce tar program within oppose alarm file etc  unix contains message message user http git  gnu org  tar git commit  session 2D ML CCS october toronto canada int absolute int ignore zero option struct tar stat info stat info char safer char file int link target char absolute file cve incorrect sanitization file contains file without return void extract archive char file safer stat info file overwrite file exists void archive void void something void enum header status header switch status header something header zero ignore zero option default option int int  char  int      switch  extract archive archive absolute ignore zero option code snippet version tar manual inspection conclude alarm false debloated program efficiently random fuzzers afl reduce tar program failure induce input within improve confidence correctness debloated program background formalizes program debloating introduces concept delta debug reinforcement upon program debloating approach program debloating program universe program described function exhibit otherwise denote accord appropriate metric statement token program function goal program debloating minimize program arg min achieve goal global minimality NP therefore debloating relaxed target feasible goal minimality program minimal variant derive remove pas delta debug briefly introduce program debloating algorithm delta debug DD algorithm input program DD convert input program arbitrary granularity token function initial candidate partition respectively candidate split partition partition algorithm partition resp complement preserve remove complement resp resume loop partition DD coarsest granularity complement DD maintains granularity none partition session 2D ML CCS october toronto canada algorithm delta debug input program input function output minimal program representation split partition return correspond int return int return int return int return int return int return int return int return program complement satisfy DD split partition partition cannot split return program correspond remain otherwise resume loop splitting remain partition complexity algorithm illustrate DD algorithm code suppose desire termination reduce program granularity function definition therefore bare minimum program contains function although minimal obtain static analysis depict DD algorithm presume analysis available depicts iteration algorithm iteration algorithm partition comprises respectively partition fail preserve algorithm increase granularity partition fail iteration algorithm complement partition iteration algorithm complement preserve  algorithm maintains granularity subset candidate subset DD iteration already skip complement another program iteration  algorithm maintains granularity subset candidate subset complement already fail algorithm granularity subset iteration fail proceed complement iteration another complement subset complement program minimal iteration reinforcement markov decision markov decision MDP framework sequential decision agent learner decision maker interacts environment agent reward environment action formally MDP comprises component initial denote action function specify available action transition model denotes probability transition action reward function denotes reward MDP policy specifies desirable action agent usually interested optimal policy define arg max sum reward agent executes optimal policy recursively define session 2D ML CCS october toronto canada discount rate determines future reward agent myopic concerned maximize immediate reward approach return objective future reward account strongly agent becomes  model reinforcement model reinforcement  technique MDP guidance model predicts environment responds agent action  learns model transition probability reward MDP  transition action update model obtain information agent estimate sum future reward model action maximizes sum future reward approach program debloating approach illustrate algorithm algorithm instantiate MDP delta debug lastly explain statistical model delta debug informal description insight aim quickly converge prioritize candidate likely pas recall trial DD algorithm fail aim avoid fail trial model reinforcement   statistical model approximates maintain decision assume model correctly approximates decision  approach trial error refine statistical model determines likelihood passing candidate program depicts iteration algorithm contrast naive DD algorithm invokes already described algorithm invoke detail iteration algorithm standard decision model iteration program program initial dataset contains passing initial model dataset predicts program pas model prioritize candidate sub program generate iteration DD subset complement model arbitrarily chooses subset fails dataset leftmost decision internal node presence specific function leaf node correspond probability program passing predicts program contains pas program without fail iteration subset predict pas chosen fails dataset decision partition subset complement fail model predicts desirable program iteration complement predict pas chosen fails dataset decision model predicts desirable program manner iteration desirable decision regard program desirable iteration depict program chosen available candidate program comprise dataset however observation contradict model model update available candidate fail iteration confirm remove program pas therefore loop terminates program return minimal markov decision delta debug formalize markov decision MDP delta debug program function goal MDP policy delta debug algorithm towards minimal program satisfies throughout program interchangeably DD program component MDP define candidate program granularity partition denote universe program initial representation program action action action define subset complement granularity partition consists candidate program granularity iteration algorithm session 2D ML CCS october toronto canada iteration algorithm decision iteration respectively iteration desirable decision minimal program iteration transition function transition  define partition otherwise transition occurs candidate program exhibit desire granularity program none desirable reward function reward function define minimal otherwise reward iff minimal program minimality function guarantee variant derive remove pas intuitively goal MDP described minimal transition unfortunately MDP optimal policy impractical invocation transition function reward function define incurs nontrivial computation address issue sub optimal policy model reinforcement simultaneously probabilistic model return probability candidate program passing function derive policy model denote Tˆ Rˆ approximation respectively define instead function Tˆ define partition Tˆ normalization factor Tˆ probability distribution transition probability define probability target subset complement passing increase granularity recall increase granularity none candidate pas compute probability probability candidate program fail model however situation model   increase granularity algorithm terminates return non minimal program prevent probability increase granularity granularity described definition algorithm subset complement terminates guarantee minimality function Rˆ define Rˆ partition Rˆ probability minimal model approximate function Tˆ Rˆ goal optimal policy arg max Tˆ Vˆ Vˆ sum reward policy Vˆ Rˆ Tˆ Vˆ Vˆ compute via dynamic program policy optimal action chosen transition reward action refine  improve policy evaluation yield performance computation Vˆ evaluates immediate reward statistical model aforementioned model goal model predict probability program model data program debloating session 2D ML CCS october toronto canada feature representation suppose program sub program encode binary feature vector feature encode function  sub program otherwise program encode empty program encode label data feature vector label boolean feature vector program label data trial DD model statistical model  shelf supervise algorithm decision feature vector label DD model predict probability feature vector representation approximate version transition Tˆ reward Rˆ function define replace definition program debloating overall algorithm algorithm program reduce function shelf supervise algorithm model feature encode function denotes throughout algorithm initialize program dataset initialize feature vector encode program label iteration model iteratively refine update dataset loop iterates program cannot split iteration loop approximate policy compute model policy chosen checked program exhibit granularity input program dataset termination sub program program algorithm guarantee minimality thanks Tˆ described evaluation experimentally evaluate chisel address research effectiveness effectively chisel reduce program reduction quality reduction security chisel trim vulnerability program chisel reduce potential attack program robustness robust reduce program generate chisel unseen input algorithm delta debug input program input function input function probabilistic model input feature encode function output minimal program representation initial initial dataset probabilistic model construct equation action define transition data dataset return correspond implementation instantiate chisel program reducer program syntax hierarchical delta debug algorithm chisel reduces global component global variable declaration definition function definition etc standard delta debug algorithm recursively applies local component assignment  statement etc local reduction chisel invokes global reduction minimal version chisel simply reject nonsensical program without invoke script dependency analysis program function variable declaration variable initialization return statement chisel consists OCaml code  shelf decision algorithm  model decision neither boost bagging bound maximum depth conduct linux machine ghz GB memory benchmark evaluate chisel suite benchmark program gnu package characteristic program program chosen source widely program contains vulnerability report CVEs manually reduce implementation available busybox lightweight unix utility package embed macro expansion specification desire feature preserve chosen reference busybox implementation benchmark assume option default configuration busybox core functionality program addition security reduce program undefined behavior crash buffer overrun uninitialized variable execution non core http    edu hal  session 2D ML CCS october toronto canada characteristic benchmark program loc func stmt report code function statement macro expansion program loc func stmt cve ID CVSS vulnerability bzip cve execute arbitrary code pre temporary directory  cve modify ownership arbitrary file option date cve execute arbitrary code option grep cve crash option gzip cve arbitrary directory option mkdir cve modify ownership arbitrary file option cve modify ownership arbitrary file option sort cve crash option tar cve arbitrary file uniq cve crash input functionality compile program sanitizer option clang monitor undefined behavior runtime extensively functionality source code repository summary chisel generates reduce version program satisfies constraint reduce program compilable reduce program output program core functionality reduce program yield undefined behavior non core functionality addition timeouts execution benchmark prevent non terminate program generate chisel introduces infinite loop baseline reducer chisel program reduction approach reduce perses reduce shelf program reducer implement perses recent chisel perses reduces program respect grammar reduction probabilistic model variant delta debug guarantee reduce program minimal effectiveness reduction evaluate effectiveness chisel reduction statement program reduce version unreachable code removal generate chisel unreachable code removal remove unreachable function function sparrow static analyzer program static analysis reduce statement reduction static reachability mainly due amount library code gnu  program statically reachable statement chisel reduce statement bzip  date grep gzip mkdir sort tar uniq statement static chisel effectiveness chisel reduction ratio report statement program static chisel report program unreachable function removal static analysis program debloating chisel respectively evaluate chisel exist program reducer chisel effectively reduce benchmark program within timeout limit reduce perses program program respectively approach efficient previous perses purely grammar program reducer faster reduce basically reducer avoid trial syntactic error chisel outperforms benchmark avoids syntactic error akin perses learns avoid semantic error chisel faster average reduce perses respectively session 2D ML CCS october toronto canada bzip  date grep gzip mkdir sort tar uniq reduce perses chisel effectiveness chisel reduce perses chisel report program debloating timeout comparison busybox opt report command option gnu program busybox counterpart stmt report statement program gnu  busybox chisel program opt stmt opt stmt stmt bzip  date grep gzip mkdir sort tar uniq justify reduction benchmark program manually reduce implementation busybox package busybox executable program invokes utility via  exclude boilerplate code parse  subprogram comparison gnu  program implement command option statement busybox option statement reduce program chisel option busybox comprise statement program busybox implementation statement program void  struct seq seq seq seq void file file struct seq seq seq  seq  seq  seq  seq int   return struct seq seq seq automatically initialize int    seq  seq return code snippet reduce version chisel reduce chisel generates program preserve locality modularity  mangle software engineering optimize code however aspect sometimes algorithm data structure program style overall chisel generates reasonable code chisel yield program exist reducer reduce considers program input data primary goal minimize possibly randomly generate crash input program compiler therefore reduce heed software engineering modularity locality goal generate program maintain extend depicts chisel preserve structure source code reduce modularity locality reader naive approach program reduction runtime code coverage suffices justify chisel runtime code coverage reduce program coverage compute llvm cov default option session 2D ML CCS october toronto canada dynamic code coverage coverage report executable default functionality reduce program coverage coverage bzip  date grep gzip mkdir sort tar uniq report execute benchmark execution program core functionality executable executable code reduce program executable execution reduce program summary chisel reduce significantly code naive approach dynamic code coverage security harden report upon efficacy chisel security harden evaluate aspect inspect reduce program checked vulnerability trim chisel reduction potential attack counting gadget reduce program  static buffer overrun analyzer sparrow inspect report alarm chisel successfully eliminate CVEs program CVEs  functionality significantly CVEs core functionality tar date CVEs core functionality typically remove vulnerability trigger tar extract tar file rarely chisel aggressively remove sub functionality handle core functionality extract  chisel eliminate CVEs remain program vulnerability trigger core functionality easily  reduction addition chisel reduce potential attack remove rop gadget average decrease complexity reduce program enable apply precise program checker static analyzer debloating reduce buffer overrun alarm report sparrow feasible security harden cve CVEs disabled chisel gadget alarm report rop gadget static analysis alarm reduce program gadget alarm program cve reduce reduce bzip  date grep gzip mkdir sort tar uniq manually inspect remain alarm false upon inspection robustness robustness debloated program fuzzer afl program randomly generate command input input file fuzzer debloated program robust crash detect fuzzing despite developer extensively program addition runtime monitoring sanitizers effectively filter erroneous program debloating debloating without sanitizers yield problematic program bug program uninitialized variable buffer overflow program crash  script return non deterministic however sanitizers erroneous behavior execution enable chisel avoid candidate program bug nevertheless reduce program fail unseen input random fuzzing enrich script derive robust program grep bzip fuzzer quickly crash input within typical excerpt code grep shade remove without violation allocate memory chunk initial program easily crashed buffer overrun random input generate fuzzer simply input script  chisel fuzzer feedback effectively improve robustness program unlike program synthesis  input program reduction easily program session 2D ML CCS october toronto canada struct dfa token token token int  token buffer int  token index omit clarity struct dfa dfa void tok token dfa  dfa  dfa token token  dfa token dfa  code snippet grep shade code remove trial program fuzzer crash input version summary summary chisel efficiently reduce program yield speedup reduce perses respectively reduce perses program program respectively benchmark chisel remove code deem reachable sophisticated static analysis eliminate CVEs rop gadget robustness reduce program empirically confirm static analyzer random fuzzer  validity threat validity approach outline along proposal mitigate non determinism script chisel misbehave script return non deterministic behavior mainly undefined behavior uninitialized variable candidate program already described partially sanitizers prevent undefined behavior however sanitizers erroneous behavior target program external library compile protection scheme mitigate recompiling external library scheme library source available non deterministic behavior avoid non terminate candidate program transformation non termination remove loop termination reject invalid program timeout limit however limit script return non deterministic program execution slight variance issue mitigate dynamically detect escape infinite loop without timeout limit incompleteness input robustness program afl fuzzer however exhaustive input specific format cannot specific grammar afl enable prune filter ill input mitigate issue grammar fuzzers unsoundness static analysis sparrow static analyzer robustness along afl although analyzer respect feature program unsound target program exhibit tricky feature complex pointer arithmetic operation complex api function unknown semantics fully static analyzer extremely challenge various static analyzer  respect feature mitigate issue combine multiple static analyzer posse capability regard related program debloating recently propose technique alleviate software bloat granularity coarse grain application debloating propose technique debloating application container docker decompose complicate container multiple simpler container respect user define constraint technique dynamic analysis obtain information application behavior technique propose finer grain debloating   trim unused java android application respectively debloating trim unnecessary code compilation load reduces application library function dependency compute static analysis training technique program library invoked function load loader load library function previous approach chisel applicable program debloating finer granularity  exist grain approach static analysis conservative remove unreachable code instead aggressively remove redundant code execution research software bloat detection introduce analysis technique detect source bloat java application aim detect statement source bloat optional feature longer assume potential feature interaction graph construct graph traverse heuristic likely source bloat finally user intervene confirm detect statement remove unlike approach automatically remove redundant code respect script addition software bloat detection research detect reduce runtime memory bloat orthogonal complementary goal program debloating potential mitigate extent remove code execution session 2D ML CCS october toronto canada input minimization program reduction technique propose context input minimization goal minimize input program compiler interpreter crash intend minimize source code execute maintain however program carefully generate security readability already described reduce mangle software engineering goal reduce program subsequent developer exist technique blindly towards minimal program guidance oracle recently researcher propose efficient technique aware syntactic structure program prior knowledge allows avoid trial involve syntactically ill program approach semantic error infer knowledge previous trial addition avoid syntactically invalid program employ approach avoids semantically invalid program building statistical model online feedback oracle approach applicable accelerate exist approach delta debug unstructured input program slice reachability analysis program slice technique program reduction specific purpose debug compiler optimization software customization program analysis slice sub program relevant typically compute static dynamic dependency program debloating aim specify semantics dependence relation moreover approach obtain program obtainable static dynamic slice approach approach reachability analysis slice dynamic slice contains statement affect target variable program execution program however challenge variable program specification user manually annotate target dynamic slice ineffective program debloating output safer actually depends statement function therefore cannot remove vulnerability contrast chisel static reachability computation imprecise approximation actually reachable code inherent limitation due undecidability static analysis cannot effectively handle complex indirect procedure   function pointer reflection complex conditionals pointer arithmetic approach limited dynamic reachability computation effective static approach code however demonstrates approach program dynamic reachability attack conclusion chisel program debloating delta debug approach effectively remove redundant code respect script probabilistic model accelerate minimal program debloating remove vulnerability redundant functionality significantly reduce potential attack moreover reduce complexity enable apply precise program technique manual inspection future extend chisel direction investigate expressive probabilistic model efficient incremental various specification input output apply  program arbitrary binary