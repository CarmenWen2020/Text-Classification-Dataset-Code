byzantine fault tolerant machine replication SMR powerful integrity guarantee fails privacy guarantee whatsoever privacy guarantee secret instead fully replicate combination enable exchange distribute certification authority however incorporate secret traditional byzantine fault tolerant bft SMR protocol unique challenge bft protocol network model asynchrony verifiable secret VSS unsuitable however asynchronous VSS AVSS unnecessary bft algorithm broadcast channel VSS recovery subproblem AVSS incorporate secret bft VSS recovery KZG VSSR failure incurs constant cryptographic operation per replica finally efficiently integrate instantiation VSSR bft replication protocol incur constant overhead instantiate VSSR prior AVSS protocol quadratic communication incur linear overhead incorporate bft replication demonstrate via private keyvalue built bft replication instantiation VSSR KZG VSSR ped VSSR evaluation introduction combine byzantine fault tolerant bft replication secret decentralize service private coordinate manner consensus  powerful combination leveraged various automate decentralize threshold trust TP client private data decentralize TP escrow crucially  secret consensus  necessarily client interaction greatly simplifies traditionally exchange exchange implement  another  consensus  another certification computes decentralize threshold signature certify document policy polynomial secret multiple entrust decentralize TP aggregate without client involvement additive aggregation trivial implement arbitrary multi computation costly enable core mechanism verifiable secret VSS decentralize service secret VSS weave bft replication automate handle secret private client request entry broken public private public normal bft replication request private VSS client directly private entry importantly replica delay participation protocol obtain verifiable private entry client due weave VSS arbitrary bft replication asynchronous synchronous protocol simply honest replica technique asynchronous setting crucial VSS protocol simply inherit network model bft replication additional assumption recovery prior asynchronous VSS AVSS scheme directly address asynchronous VSS AVSS client dealer incur quadratic computation communication complexity imposes linear computation storage replica performance overhead increase linearly session secret CCS november london united kingdom cluster AVSS bft replication originally developed bft aim tolerate fault replica however bft replication revisit blockchain replica incur degradation service performance privacy prohibitively expensive incorporate VSS bft protocol introduces verifiable secret framework VSSR VSSR framework VSS scheme recovery constant factor overhead VSS scheme instantiate VSSR KZG VSSR kate secret scheme instantiate VSS constant verification ped VSSR pedersen secret scheme linear verification recovery cheaper cryptographic operation faster cluster framework concept recovery polynomial recovery polynomial polynomial encodes recovery information constant additional polynomial client enable recover intertwine ped VSSR KZG VSSR bft replication private performs throughput overhead non private request latency millisecond contributes framework incorporate VSS bft replication recovery polynomial VSSR instantiate VSSR verifiable secret scheme benchmark overhead framework finally incorporate instantiation PBFT evaluate private byzantine fault tolerant technical overview informal overview core technique VSS recovery introduce asynchronous VSS AVSS recovery arises AVSS relation byzantine fault tolerance discus prior AVSS technique recovery finally overview contribution asynchronous VSS asynchronous VSS dealer participant polynomial api denote vssShare completes anywhere eventually non faulty participant completes secret participant polynomial fulfills hiding binding loosely hiding polynomial suffice reconstruct via interpolation api vssReconstruct combination reveal information binding participant receives addition private global commitment polynomial bind receives verifiable valid api vssVerify asynchronous setting dealer participant acknowledge valid inevitably away dealer away honest replica valid asynchronous VSS dealer participant completes protocol participant eventually reconstruct distribute protocol participant participant contribute recovery information api vssRecoverContrib validate recipient api vssRecoverVerify combine reconstruct api vssRecover VSS byzantine fault tolerance incorporate VSS byzantine fault tolerance bft unique challenge bft protocol variety network assumption consequently handle scenario replica traditional bft protocol replicate identical across replica recovery transmit validate secret replica unique replicate private recovery complicate AVSS protocol minimal assumption network analogous version recovery goal incorporate AVSS bft acceptable byzantine client lose hiding guarantee however binding otherwise replicate machine inconsistent typical AVSS scheme reliable broadcast protocol guarantee binding however machine replication SMR solves reliable broadcast eliminate VSSR implement reliable broadcast VSSR assumption network additionally byzantine fault tolerance bft algorithm literature optimize perform circumstance bft algorithm incorporate linear suitable failure optimize performance something foresee bft literature important secret scheme minimal overhead verifiable secret scheme bft requirement secret replica compute constant cryptographic operation ensures technique reusable scalable bft protocol cluster exist seminal shamir introduce employ polynomial interpolation technique error correction code secret unconditional security emanate address additional feature verifiability asynchrony proactive refresh session secret CCS november london united kingdom verifiability tackle malicious dealer  maliciously inconsistent scheme classical feldman pedersen scheme newer scape VSSR input construct verifiable secret scheme recovery asynchronous VSS  introduce context byzantine agreement secure mpc incur communication complexity logn message complexity AVSS practical asynchronous VSS computational introduce refer AVSS handle recovery AVSS bivariate secret polynomial consists univariate polynomial dealer sends information participant reconstruct evaluation evaluation incur linear communication overhead per recovery overall recovery complexity message additionally participant verify bound polynomial AVSS pedersen polynomial commitment polynomial commitment scheme leverage hardness discrete multiplicative generator commitment another secret drawn random pedersen commitment polynomial consists commitment verify commitment homomorphic valid commitment mod AVSS weave protocol dissemination commitment incur message complexity communication complexity  SC introduces polynomial commitment constant commitment scheme leverage hardness  hellman assumption generator commitment define unknown participant polynomial evaluate commit evaluation dealer witness triple witness commitment verify indeed evaluation polynomial bilinear technique employ construct asynchronous VSS scheme  SC incurs message communication complexity  SC dealer chooses addition secret polynomial another polynomial   encodes recovery purpose  constant polynomial commitment due scheme commitment construct commitment  validates homomorphism commitment  SC weave protocol dissemination commitment incur message complexity technique phase recovery phase client replica replica bivariate polynomial  batching KZG VSSR ped VSSR communication overhead VSSR typical scenario dealer honest denotes replica recovery phase recover replica recovery technique AVSS scheme proactive secret verifiable secret recovery however scheme amenable byzantine fault tolerance protocol prior AVSS scheme dealer computes commitment sends hence date asynchronous VSS dealer secret incur communication complexity replica cpu typically perform cryptographic operation prohibitive moderate infeasible fundamentally prior asynchronous VSS scheme recovery dealer enumerate pairwise response replica recovery replica replica recover dealer response necessarily incur quadratic bandwidth dealer linear cpu overhead replica prior proactive secret scheme PSS approach recovery PSS scheme dealer enumerate pairwise response bivariate polynomial approach performance overhead weakness AVSS scheme PSS scheme  technique replica construct secret reconstructs interpolation overhead phase replica obtain whenever replica initiate recovery technique employ PSS scheme batching quadratic parallel batching leveraged recent AVSS protocol linear amortize overhead batching asymptotic overhead KZG VSSR failure environment incurs latency VSSR approach distribute pseudorandom function DPRF generate recovery response dynamically information setup phase bandwidth instantiate VSSR session secret CCS november london united kingdom VSSR VSSR VSS recovery replica constant per failure participant failure dealer byzantine overhead quadratic prior scheme strawman introduces insight VSSR fix issue strawman strawman proactive secret participant compute informally suppose replica simply polynomial recover recovery polynomial RP random fori recover replica receives sum polynomial mask polynomial recover without obtain information strawman assumes recovery polynomial dealer construct recovery polynomial replica assumes optimistically dealer honest recovery polynomial later dealer dishonest privacy guarantee dealer broken secret reveal scheme quadratic overhead strawman recovery polynomial dealer construct recovery polynomial incur quadratic overhead overhead factor recover recovery polynomial remove constraint distribute pseudorandom function communicate efficiently dealer construct recovery polynomial constant factor overhead VSS scheme description protocol secret dealer partition secret recovery polynomial rps encode correspond encode rps dealer participant participant recovery specifically RP random polynomial pre define recovery polynomial construct DPRF reconstruction threshold actual construction random ensure distinct elide discussion recover participant probe participant participant responds ofs participant construct response ofs addition participant responds secret api vssRecoverContrib return participant reconstructs computes api vssRecover verify recovery vssRecoverVerify participant validates ofs receives commitment computes validates recovery commitment validation fails participant participant dealer AVSS  SC participant expose dealer secret complexity incur participant VSSR protocol instantiate dealer participant constant commitment polynomial communication complexity simply participant receives recovery request sends constant amount information requester communication request finally participant recovery obtains participant incur communication communication request recovery VSS detail VSS protocol security definition distribute pseudorandom function verifiable secret detail goal assumption scheme construction security finally instantiate implementation proof applicable scheme satisfy description highlight generality description instantiate secret scheme described desire asymptotic complexity inexpensive cryptographic operation distribute pseudorandom function distribute pseudorandom function DPRF pseudorandom function cooperation replica replica evaluate DPRF interface  randomize procedure return dpki dski  dpki public dski correspond private  randomize procedure return contribution  dski failure otherwise  deterministic procedure return boolean  dpki return output  dski nonzero probability private dski correspond dpki dprfEval deterministic procedure return dprfEval  dpki return otherwise dprfEval return security distribute pseudorandom function DPRF informally define adversary unable distinguish session secret CCS november london united kingdom output DPRF random oracle ability compromise replica formally security distribute pseudorandom function define adversary AF input dpki dpki dski  addition AF oracle access oracle oracle denote query AF invoke  return  dski invoke compromise return dski oracle AF denote instantiate oracle rand oracle input selects subset random invokes  return dprfEval oracle rand instantiate function chosen uniformly random function oracle index AF invokes compromise  AF legitimate AF invokes finally AF output distribute pseudorandom function secure legitimate adversary AF polynomial dpki rand dpki negligible verifiable secret verifiable secret VSS secret coalition replica replica reconstruct secret VSS scheme interface vssInit randomize procedure return vpki vski vssInit prime vpki public vski correspond private vssShare randomize procedure vssShare vpki polynomial vpki output vssInit commitment vssVerify deterministic procedure return boolean vssVerify vpki return arbitrary  output vssShare vpki nonzero probability vssReconstruct deterministic procedure return vssReconstruct vpki vssVerify vpki return otherwise vssReconstruct vpki return security VSS scheme hiding binding hiding informally hiding suppose adversary client secret client picked randomly VSS scheme access replica secret adversary cannot secret probability hiding definition computational transformation  underlie secret scheme information theoretic secret scheme satisfy requirement formally hiding adversary AV input vpki vpki vski vssInit access oracle oracle denote OV OV initialize vski invoked described oracle AV denote AV invoke oracle input invoked generates  performs vssShare vpki AV OV oracle OV invoked AV AV invoke OV  return OV commitment AV invoke OV compromise return vski oracle index AV invokes OV compromise OV  AV legitimate finally AV output VSS hiding legitimate adversary AV polynomial OV vpki OV vpki negligible binding informally binding adversarial dealer public commitment uniquely identifies secret reconstruct essentially probability dealer secret reconstruct public commitment negligible formally binding adversary AV input vpki vski vssInit AV output  ˆI VSS binding binding adversary AV polynomial vssReconstruct vpki vssReconstruct vpki  ˆI negligible probability respect random choice vssInit AV goal VSS scheme DPRF goal construct VSS scheme vssInit vssShare vssVerify vssReconstruct algorithm denote vssInit vssShare vssVerify vssReconstruct respectively define algorithm denote vssRecoverContrib vssRecoverVerify vssRecover vssShare algorithm accept additional argument private DPRF return additional input procedure vssInit algorithm vssRecoverContrib session secret CCS november london united kingdom vssRecoverVerify vssRecover permit replica recover replica behave vssRecoverContrib randomize procedure return vssRecoverContrib vsk recovery described vssRecoverVerify deterministic procedure return boolean vssRecoverVerify vpk return ifv output vssRecoverContrib vsk nonzero probability vssVerify vpk return vssRecover deterministic procedure return vssRecover vpk vpk vssRecoverVerify vpk return vssVerify vpk return otherwise vssRecover vpk vpk return due additional interface definition hiding security oracle OV additionally query OV recover return vssRecoverContrib vsk oracle index AV invokes OV compromise OV  OV recover ˆI ˆI AV legitimate assumption underlie VSS construction combine exist VSS scheme DPRF vpki vski vssInit output vssShare addition VSS additional procedure procedure  creates  vssShare vpki procedure  vssReconstruct vpki vssReconstruct vpki   vssReconstruct vpki  scheme due pedersen VSS scheme recovery procedure VSS scheme algorithm express constant replica reconstruction threshold commitment zero indexed vector denote respectively refer vssInit initializes underlie VSS DPRF public vpk replica consists public vpki public dpki similarly private vsk vssShare modify private dski DPRF argument definition construction dealer distinct parameter  vssInit enables dealer evaluate random nonce construct   invoked recall definition  satisfies input secret  grouped accord replica index return along commitment nonce vssVerify vssReconstruct vssVerify verifies commitment verify commitment addition verifies intuitively latter verification skip occurs recover ignore vssReconstruct simply vssVerify verify input submits input vpki vssReconstruct reconstruct vssRecoverContrib vsk invoked replica construct contribution enable replica reconstruct vssRecoverContrib return blind replica recover secret replica return DPRF scheme evaluate vssRecoverVerify vpk execute replica verify replica perform vssRecoverContrib correctly output vssRecoverContrib contribute replica vssRecoverVerify parse constituent component DPRF contribution checked ensure corresponds evaluation DPRF scheme vssRecoverVerify combine commitment vssVerify blind correctly pas vssRecoverVerify return vssRecover vpk vpk execute replica recover polynomial vssRecover invokes vssRecoverVerify replica vssRecover leverage vssReconstruct reconstruct polynomial sum polynomial originally vssShare commitment mask polynomial commitment vssRecover evaluates session secret CCS november london united kingdom procedure vssInit vpki vski vssInit dpki dski  vpk vpki dpki vsk vski dski return vpk vsk procedure vssShare dski vpk vpki dpki vpk dprfEval      vssShare vpki vssShare vpki return procedure vssVerify vpk vpki dpki vpk vssVerify vpki false return false  dpki false return false vssVerify vpki false return false return procedure vssReconstruct vpk vssVerify vpk false return vpki dpki vpk return vssReconstruct vpki procedure vssRecoverContrib vsk vski dski vsk  dski return procedure vssRecoverVerify vpk vpki dpki vpk  dpki false return false  vssVerify vpki false return false return procedure vssRecover vpk vpk vssRecoverVerify vpk false return vpki dpki vpk  vssReconstruct vpki yˆi dprfEval yˆi vssVerify vpk false return return pseudocode VSS scheme  dprfEval obtain security sketch proof modify VSS scheme preserve security underlie VSS protocol hiding hiding adversary AV legitimate legitimate execution dprfEval instantiate rand commitment index AV obtains invocation return satisfies AV obtain invoke OV compromise invoke OV  invoke OV recover ˆI ˆI AV recover vssRecover routine critically invoke OV recover ˆI ˆI yield information ˆI random hidden information theoretically AV legitimate obtains equation nonnegligible construct hiding attacker nonnegligible suppose AV execution negligible execution instead instantiate AV nonnegligible AV construct DPRF attacker nonnegligible equation session secret CCS november london united kingdom summarize hiding attacker nonnegligible probability hiding attacker nonnegligible probability DPRF attacker nonnegligible probability binding binding adversary AV input vpk vsk vssInit succeed  ˆI vssReconstruct vpk vssReconstruct vpk ˆI satisfy vssReconstruct vpki vssReconstruct vpki ˆI vpki vski vssInit binding implies binding ensures binding instantiate VSSR discus instantiate VSSR concretely DPRF scheme VSS scheme instantiate VSSR VSS scheme pedersen detail appendix secret secret scheme framework secret scheme witness prof consistent polynomial commitment witness additively homomorphic manipulate perform polynomial interpolation witness obtain witness additionally witness transmit correspond witness increase communication overhead constant factor description assume witness correspond vssInit chooses prime initialize exists bilinear generate generator vpki vski delete finally vssInit return vpki vski vssShare vpki extract public coefficient evaluation ofs  compute compute assign polynomial compute coefficient compute witness finally vssShare return vssVerify vpki extract vpki access witness transmit along vssVerify return false otherwise vssReconstruct vpki vssVerify vpki vssVerify return otherwise vssReconstruct return extract lagrange interpolation identify polynomial return  lagrange interpolation identify unique polynomial return  extract return DPRF instantiation distribute pseudorandom function consists algorithm    dprfEval implementation defines  chooses generator secret private shamir secret     output dpki dski  dski computes hash function model random oracle obtain dski randomly generate hash function model random oracle  mod  output  dpki extract extract dpki finally  return dprfEval verifies  verification return false dprfEval return otherwise extract exponent exponent shamir secret dprfEval lagrange interpolation exponent hash output secret SHARED PBFT private replicate byzantine fault tolerance incorporate VSSR PBFT service apis reading respectively assumes partial asynchronous byzantine model specifically replica byzantine correctness ensure despite byzantine faulty replica private faulty replica verifiable secret approach previous client secret directly replica consensus protocol agreement verifiable digest session secret CCS november london united kingdom network assume asynchronous eventually synchrony message deliver within bound replica client progress rate network assumption due PBFT network assumption VSSR construction completely independent network model underlie bft protocol assume message sender origin standard cryptographic assumption client however service maintains potentially dynamic access policy specifies client assumption standard guarantee byzantine fault tolerant protocol linearizability client sends request replicate service service response consistent execution client request execute instantaneously request response liveness network synchronous client request response addition standard privacy privacy client access policy prohibits access faulty client remains hidden byzantine server setup addition authenticate communication channel setup phase vssInit client public private infrastructure client role dealer vssInit replica role participant client secret replica return invocation vssInit replica entry public keyed pub private keyed priv replica maintains bound pending command cannot beyond  parameter command commit apply employ classical framework revolves around explicit rank proposal via replica initial progress accept request respond message designate leader zero decision sufficient replica suspect leader faulty occurs leader elect precise described appendix mode protocol client split public private specifically request client privately  via vssShare sends correspond replica public consists client request client leader vssShare commit  pre  IO client leader vssShare commit   pre IO recovery mode leader global commitment polynomial bind replica verifiable leader local extends local request sends pre request replica accepts pre leader format extends previous pre leader pending entry replica valid correspond leader pre message valid format replica correspond timer  appendix accept pre replica regular PBFT protocol replica extends local request broadcast message replica replica  response replica broadcast commit message commit certificate replica decision distinct replica commit message replica learns request commit insert local entry global entry pub global commitment private entry priv replica private replica responds client acknowledgement message client response request depicts client protocol consists request leader pre commit phase protocol without session secret CCS november london united kingdom stage replica executes request return client response replica initiate recovery protocol client valid response vssVerify verify response vssReconstruct reconstruct secret response recovery protocol circumstance protocol replica discovers private request recover initiate recovery replica broadcast recovery request replica respond recovery request output vssRecoverContrib response replica vssRecoverVerify response response valid invalid receives valid response replica vssRecover recover secret mode performance mode protocol incurs performance client interaction bft replicate service linear replica additionally client response server communication replica achieve decision quadratic practical variant bft replication achieve linear communication synchrony leader non faulty improvement outside scope however modify VSS protocol incorporate within without increase asymptotic complexity mode latency protocol non interactive perform concurrently leader broadcast recovery incurs extra latency replica replica contribution bft protocol recover request replica request data recovery protocol interactive asymptotic increase latency however difference latency scenario proof intuition proof construction satisfies linearizability liveness privacy appendix intuition proof linearizability liveness execution secret PBFT protocol mapped execution unmodified PBFT protocol PBFT protocol satisfies linearizability liveness modify protocol privacy recover secret adversary obtain cooperation replica implementation implement secret bft layer PBFT secret scheme implementation consists python optimize multi core environment network thread core additionally thread core cryptographic operation PBFT secret scheme elliptic curve signature secpk library signature operation relic library cryptographic operation related scheme optimization pedersen secret scheme faster secret scheme lends extensive cache setup construct precomputation coefficient exponentiation runtime leverage efficiency  optimize evaluation however intermediate obtain  evaluate coefficient polynomial precomputation evaluate verification verification precompute bilinear operation verification phase precompute finally lagrange interpolation index denominator compute difference index avoid inverse simply inverse difference runtime multiplication pedersen pedersen secret scheme lend cache unknown beforehand however generate precomputation setup compute inverse lagrange interpolation easy evaluation evaluation seek investigate api secret scheme expensive incorporate secret scheme bft instantiate VSSR DPRF VSS scheme pedersen VSS scheme VSS scheme pedersen instantiation ped VSSR instantiation KZG VSSR implementation relic cryptographic library elliptic curve algorithm BN curve private bft PBFT replication implement python incorporate VSSR algorithm microbenchmarks microbenchmarks evaluate function VSSR scheme replica latency throughput operation EC xlarge instance microbenchmarks virtual CPUs per instance session secret CCS november london united kingdom vssShare throughput vssShare latency vssShare latency throughput module implement secret scheme optimizes throughput compromise slightly latency api core task completion return task enqueued maximizes throughput due lack core communication expense request latency underlie cryptographic operation leverage multi core environment execute faster microbenchmark sample compute statistic ignore request report aggregate throughput standard deviation latency request volume dealer transmits per replica secret replica vssShare microbenchmark ped VSSR sustain  per KZG VSSR cluster gap increase replica increase difference ped VSSR  due underlie VSS scheme  computes witness involves evaluate polynomial elliptic curve additionally throughput decrease quadratic evaluate witness cpu vssShare KZG VSSR ped VSSR mirror latency graph associate metadata replica client integer disk replica secret ped VSSR linearly increase bandwidth storage footprint respect cluster meanwhile KZG VSSR replica byte information irrespective cluster vssVerify throughput vssVerify latency vssVerify latency throughput vssReconstruct throughput vssReconstruct latency vssReconstruct latency throughput vssRecoverContrib throughput vssRecoverContrib latency vssRecoverContrib latency throughput vssVerify microbenchmark throughput latency verify replica upon KZG VSSR latency throughput constant operation per millisecond latency irrespective cluster meanwhile ped VSSR throughput decrease latency increase replica cluster increase KZG VSSR asymptotically faster ped VSSR ped VSSR cheaper cryptographic operation outperform KZG VSSR vssReconstruct microbenchmark vssReconstruct almost identical performance KZG VSSR ped VSSR vssReconstruct vssVerify verification happens message verify vssReconstruct throughput performance quadratically similarly latency increase quadratically cluster increase quadratic performance due quadratic modular multiplication vssReconstruct session secret CCS november london united kingdom vssRecoverVerify throughput vssRecoverVerify latency vssRecoverVerify latency throughput vssRecover throughput vssRecover latency vssRecover latency throughput vssRecoverContrib microbenchmark vssRecoverContrib throughput latency independent cluster KZG VSSR ped VSSR additionally  vssRecoverContrib exactly throughput twice latency KZG VSSR recovery polynomial recovery vssRecoverContrib constant amount per recovery ped VSSR vssRecoverContrib operation polynomial recover KZG VSSR vssRecoverVerify microbenchmark  vssRecoverVerify operation throughput latency ped VSSR performance difference occurs vssRecoverVerify combine commitment witness contribution vssRecoverContrib  performs computation constant elliptic curve multiplication whereas ped VSSR computes linear elliptic curve multiplication cluster increase ped VSSR performance degrades accordingly vssRecover microbenchmark vssReconstruct verification via vssRecoverVerify happens implementation upon replica vssRecover incurs primarily due interpolation vssReconstruct evaluation DPRF interpolation witness therefore asymptotically vssRecover behaves similarly vssReconstruct magnitude throughput magnitude latency operation throughput operation latency operation latency throughput incorporate VSSR PBFT incorporate VSSR PBFT implementation implement threshold trust TP instantiate TP KZG VSSR ped VSSR refer KZG TP ped TP implement evaluate KZG TP ped TP PBFT generate load evaluation client sends request asynchronously primary client  request cluster loop throughput client asynchronously request saturate latency benchmark client request serially latency request amazon aws xlarge instance client replica microbenchmarks implementation relic cryptographic library cryptographic operation BN elliptic curve signature PBFT implementation optimize secpk library bitcoin benchmark scheme cluster request latency millisecond performance KZG TP performance ped TP secret overhead vanilla PBFT however latency scheme efficient scenario throughput overhead secret due quadratic overhead ped TP PBFT performance penalty roughly constant cluster KZG TP linear performance overhead shrink slightly cluster increase PBFT performance throughput similarly ped TP performance however KZG TP linear cryptographic operation dominate performance overhead suffer related primary contribution VSSR framework building VSS scheme recovery KZG VSSR instantiation VSSR linear dealer phase threshold trust TP built combine VSSR byzantine fault tolerant machine discus related session secret CCS november london united kingdom proactive secret treatment prior verifiable secret asynchronous verifiable secret unlike prior another approach recovery proactive secret proactive secret threshold signature scheme storage proactive secret recovery random polynomial polynomial recover replica interested prior proactive secret apply directly recovery however assume synchronous broadcast channel delivers replica instantaneously greatly simplifies random recovery polynomial proactive secret replica  secret polynomial interpolation batching parallelization explore proactive secret scheme batching asymptotic guarantee KZG VSSR latency  assumption VSSR suffers exponential setup fault tolerates unusable tolerate fault  byzantine agreement protocol explicitly random recovery polynomial additional VSSR reconstruction  bivariate polynomial refresh protocol incurs quadratic although closest spirit proactive recovery scheme VSSR address phase future proactive recovery expedite technique borrowing VSSR privacy bft data across storage node ensures privacy integrity availability data despite node compromise theme revisit numerous proposal vein research defend misbehavior data writer data writer deploy data storage node data recovery impossible ambiguous data reconstruct depends node cooperate corrupt data writer primary goal verifiable secret derivative survey directly related blockchains smart contract resurgence activity privacy guarantee byzantine fault tolerant algorithm indeed motivation another approach zero knowledge proof privacy approach guarantee impossible anyone data owner recover sensitive data anyone validate data satisfies prespecified however limited application purpose machine target additionally data sensitive data manage owner suitable application  resolve publicly verifiable secret scheme bft cluster access secret management protocol replica additionally  access policy specify ahead client whereas TP easily dynamic access policy related address causal byzantine secret however secret hide command replicate service fairness consequently reveal command immediately technique recovery conclusion investigates incorporate verifiable secret VSS byzantine fault tolerance bft protocol VSS recovery towards goal framework VSSR instantiate distinct VSS scheme VSS recovery incorporate instantiation PBFT evaluate private