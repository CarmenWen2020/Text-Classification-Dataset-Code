machine checked proof security domain management protocol amazon web service KMS management service critical security service throughout aws aws customer domain management core aws KMS governs anchor security encryption service aws protocol securely implement ideal distribute encryption mechanism standard cryptographic assumption proof machine checked EasyCrypt proof assistant EasyCrypt development date CCS CONCEPTS security privacy management logic verification keywords provable security machine checked proof management introduction service sophisticated distribute architecture algorithm data highly available durable improve security data typically encrypt decrypt encryption similarly durable available however directly whichever service unnecessarily increase attack sensitive prudent encapsulate within distribute encryption service service allows creation encrypt decrypt data expose client aws domain management protocol henceforth abbreviate DMP distribute encryption service underlie amazon web service aws management service KMS aws KMS core component aws aws customer manage encryption consistent encryption decryption operation across aws service aws identity access management IAM widespread usage aws KMS central role DMP justifies assurance security proof leverage recent development computer aid cryptography fully mechanize concrete proof security DMP informally proof DMP idealize encryption service security goal DMP confidentiality data encrypt domain guarantee operation interface presence malicious individual interfere inner working adversary commission  host hsms hardware security module assume adversarial manipulate insert delete modify message exchange entity within aws KMS DMP encrypt decrypt customer customer hierarchy KMS outside DMP described session security CCS november london united kingdom goal adversary cannot gain advantage possibly unresponsive formally security goal define ideal functionality ideal paradigm similarly universal composability framework DMP indistinguishable idealize encryption service arbitrary external environment collude malicious insider adversary formalization capture precisely security aws KMS DMP theorem theorem DMP behaves ideal authenticate encryption service theorem attack arbitrary computationally bound adversary standard cryptographic assumption digital signature hash function encryption scheme formally probability protocol qops        qops  upper bound operator hsms respectively  upper bound domain    denote maximum probability standard signature authenticate encryption cryptographic hash function respectively  denotes maximum probability multi recipient variant public encryption  statistical related collision signature verification security cryptographic signature hash authenticate encryption implies epsilon hence probability protocol negligible precise statement concrete cryptographic bound formalization proof fully machine checked EasyCrypt proof assistant cryptographic proof development code loc loc comprise protocol specification besides EasyCrypt development date proof combine hop technique standard cryptographic proof inductive standard program verification machine checked proof novel formalize notion secrecy KMS DMP style cryptographic apis extend prior address substantially complex distribute api explicit assumption behaviour operator otherwise trivial whilst exclude non trivial prior reduce standard cryptographic assumption relate definition security ideal security definition encryption service reusable composition combine cryptographic management apis AEAD scheme security theorem establishes KMS DMP ideal authenticate encryption service specify trust model machine checked proof proof engineering reusable component verification effort reusable standard cryptographic assumption signature hash function idealize version permit symbolically complex invariant authenticate data structure inductive intricate authentication invariant security rewrite slice code security explicit split data adversarial due trivial strategy contradict security data outside adversary previous conduct hop proof  digital signature hash function  concrete negligible security loss modularly authentication invariant perform security slice finally reduces secrecy security multi recipient encryption structure approach technical detailed description DMP formalization EasyCrypt formalize security model adopt security DMP machine checked security proof overview improvement EasyCrypt developed project contains summary related conclude remark overview overview DMP goal interface outline structure content EasyCrypt model proof DMP concept fundamental security DMP domain domain independent distribute encryption functionality combination machine collectively refer entity entity participate multiple domain concretely domain entity domain symmetric domain entity hsms operator host hsms inner security boundary DMP limited web api active physical interface operational sensitive cryptographic HSM volatile memory erase HSM exit operational shutdown reset domain likewise volatile memory hsms domain goal DMP operation domain manage membership hsms domain authorize operator domain hsms communicate directly central function DMP synchronize domain domain participant purpose information domain domain transfer domain token domain token contains encryption domain authenticate bind encryption domain session security CCS november london united kingdom domain modify quorum authenticate command issue authorize operator domain domain modify trust participant domain modify quorum periodically rotate domain quorum command mitigate attack collude dishonest operator namely attack operator bypass security protection hsms authorization operator domain security operation entity domain anchor assumption quorum operator domain honest operator protocol security parameter domain detailed description domain management operation along formalization EasyCrypt DMP implementation counting crypto library implementation DMP protocol across java code conformance code protocol checked via integration additionally formal code validation mechanism built extension taint checker framework checked conformance protocol domain return return api without encrypt another perform continuously KMS codebase manual annotation codebase DMP functional interface DMP encryption functionality domain domain entity trust tolerance dishonesty security related parameter domain encryption functionality interface formalize hdl creates domain within domain associate identifier hdl indicates operation successful enc hdl msg domain associate identifier hdl encrypt payload msg associate data return ciphertext dec hdl cph domain associate identifier hdl decrypt ciphertext cph associate data successful return recover plaintext goal DMP security proof DMP idealize version interface probability error ideal interface standard authenticate encryption associate data AEAD detailed operation fail distribute EasyCrypt security proof consists layer layer ideal security definition DMP security DMP domain model interface mention domain functionality security DMP aws KMS proof increase trust fully machine checked EasyCrypt indeed motivation  provable security guarantee proof justifies formalize security theorem trust EasyCrypt sig UF  ideal hash CR hash chain ideal policy ideal policy AEAD tag MR PKE ODH KDF crypto api ind AEAD service ideal structure machine checked proof secrecy domain layer DMP indeed preserve secrecy domain honest domain described assume secure implementation cryptographic construction domain token layer security construction proof ideal security layer EasyCrypt proof formal definition security encryption service management protocol DMP detailed definition ideal paradigm UC framework proof specific hybrid model UC framework discus detail appendix intuitively ideal functionality leak adversarial environment data encrypt implement decryption maintain mapping cph message ideal encryption return encryption encrypt data entry decryption simply lookup decryption function reduce ideal security DMP  security capture secrecy domain proof domain suffices DMP domain hidden attacker proof  security layer prof protocol hide information domain adversary formalize cryptographic api guarantee domain secrecy model capture action malicious insider adversary domain management operation consist multiple adversarially orchestrate challenge proof formalize hop technique establish invariant security hop invariant combine arise standard cryptographic session security CCS november london united kingdom DMP assumption absence collision signature forgery inductive argument justifies soundness domain update operation honest operator hsms host joint action guarantee domain management policy excludes dishonest entity explicitly obtain information domain proof layer reduces security api security abstraction formalize  style facilitate hop technique detail proof abstraction layer security defines idealize version digital signature service hash certification identity operator contains proof abstraction indistinguishable instantiation standard cryptographic assumption concrete bound theorem establish layer development formalize specific flavor multi recipient public encryption DMP layer proof modularize various component purpose assumption formalize unforgeability collision resistance  definition proof solely  hop reuse abstraction across project reuse signature abstraction operator signature HSM signature multiple instantiation underlie primitive encryption scheme construction proof KMS domain management protocol detailed description operational DMP reproduce operator issue command hsms manipulate content domain token coordinator server propagate update domain token HSM domain domain approximately synchronize latter assume purpose proof adversarial core concept mechanism involve DMP mathematical model protocol basis formal proof security introduce notion domain entity assumption behavior explain role entity domain transition conclude intuitive explanation security rationale underlie protocol entity assume behavior DMP implement entity hsms host operator entity identify identity signature verification genuine entity identity HSM host operator behaves specify DMP domain non genuine identity entity malicious entity hsms perform actual encryption decryption operation entity manipulate domain cleartext operator responsible certify identity statement identity genuine HSM host operator honest operator statement honest operator genuine HSM genuine conversely dishonest operator genuine statement false assume honest operator another operator genuine honest genuine dishonest operator model insider threat possibly collude external adversary non genuine operator model arbitrary rogue identity adversary attack purpose quorum define security parameter describes minimum operator domain authorize update domain security analysis anchor global assumption genuine operator contains honest operator protocol impose quorum consists operator domain guarantee dishonest operator domain security finally host service endpoint although action host aws KMS complex analysis focus crucial role honest host cryptographic operation honest domain entry host domain update consistently domain management hsms although formalize appendix discus proof implies security model corrupt host hsms aws KMS instance fips certify hardware security module generate identity agreement boot volatile memory instance effectively destroyed lose simplifies physical protection suffices guarantee machine cannot physically attack without lose protocol model hsms conceptually stateless beyond identity agreement aws KMS hsms maintain domain domain behavior tightly defense depth potentially allows proof additional security described aws KMS statement actually command perform action command request HSM remove hsms operator domain command implicitly certification command signer entity genuine operator operator additional security role justify security proof domain local secret encrypt domain secret HSM domain immediately encrypts secret domain encrypt domain another domain domain aws KMS customer treat host responsible issue command manage creation usage session security CCS november london united kingdom domain token usage domain logically consists domain trust administrative domain entity operation actual domain trust component unique domain entity treat genuine domain agreement HSM domain trust quorum define operator quorum trustworthy domain modification authorize quorum trust domain evolve operator hsms host remove domain trust cryptographic fingerprint hash previous trust derive trust update domain secret entity hsms domain whereas domain trust authenticate concrete trust representation HSM trust encryption functionality domain hsms access domain expose entity domain concretely domain token HSM trust encryption domain representation authenticates bind encrypt data trust domain  hsms trust encryption hsms domain HSM diffie hellman agreement certifies public agreement signing identity encrypt domain hsms domain HSM encrypts ephemeral symmetric generates ephemeral diffie hellman DH agreement agreement domain hsms compute secret HSM derivation function KDF secret symmetric encrypt ephemeral symmetric multi recipient encryption domain hsms domain  scheme performance advantage ciphertexts hsms domain bandwidth batch generate faster domain token encryption public ephemeral diffie hellman domain trust HSM token HSM receives command domain domain token decrypts domain token request domain transition security domain depends critically hsms domain genuine adversary somehow introduce identity domain private signing identity agreement private another member update domain fake agreement decrypt domain token security however hsms perform domain update operation remove entity allows recognize identity genuine entity domain aws KMS domain typically cached within hsms explicitly command slightly security guarantee wrt rollback update hsms modify trust therefore rely authorization attestation identity operator HSM trust entity quorum trust initial predecessor fingerprint modify exist trust trust HSM HSM exist trust entity trust trust certify domain quorum operator exist trust successful creates trust update information fingerprint exist trust predecessor host processing request domain maintains trust domain command hsms trust trust domain evolves host update version trust host domain initial trust domain host update trust predecessor fingerprint trust fingerprint trust trust HSM trust invariant honest trust honest trust honest hsms host operator genuine quorum operator define quorum contains honest operator predecessor trust honest crucial DMP domain honest trust domain remain honest update perform hsms guarantee enforce HSM perform update signing agreement HSM distinguish genuine operator non genuine depends attestation operator identify genuine hsms intuitively trust honesty preserve inductive formalize  proof trivial inductive HSM update honest exist trust trust performs described quorum requirement honest trust entity certify quorum exist trust guaranteed genuine HSM therefore guarantee entity trust genuine honesty preserve remains quorum requirement satisfied trust guaranteed global assumption security parameter operator trust genuine subset operator contains honest operator trust honest successor trust HSM predecessor trust honest observation action host guarantee host honest trust host trust remain honest dishonest domain DMP allows dishonest domain entity honest domain aws KMS prevent hsms cache domain corresponds domain creation request aws KMS command issue obtain ephemeral symmetric token generate HSM trust plaintext  domain host request token communication mechanism aws KMS cache domain token explicitly update DMP proof cache security proof session security CCS november london united kingdom hid identity hsms  identity operator hstid identity host  identity domain trust data genuine hsms metadata fpr quorum   int metadata quorum fpr option hstid   trust hid  metadata domain plaintext encrypt handle fmap   unwrapped domain token  inst bool trust trust  wrap domain token trust  tkw   tkw signer hid tkw sig signature token inst bool trust trust   EasyCrypt definition domain token additional command HSM  domain allows operator HSM load honest domain token request dishonest domain token proof lock hsms achieve domain security proof nevertheless applies security aws KMS latter stricter simply restrict adversarial action formalization EasyCrypt background EasyCrypt EasyCrypt interactive proof assistant verify security cryptographic construction computational model EasyCrypt adopts code approach primitive security goal hardness assumption express probabilistic program EasyCrypt formal program verification program justify cryptographic program logic formalization DMP EasyCrypt trust domain token EasyCrypt declaration domain token hid signing HSM public agreement  simply signing operator  corresponds data structure reuse trust domain token technically simplifies invariant encode function domain signature scheme syntactically distinguish inst installable trust instal host domain token domain wrap unwrap formalize EasyCrypt operation hsms wrap data structure digitally contains encrypt domain unwrap verify authenticity recover cleartext domain domain token operator  performs consistency token performs signature verification encrypt cph encrypt notation EasyCrypt  denotes tuple notation overload rec proj pks hids hid  mpk image snd hids operator unwrap trust update  inst installable trust tkw   sid sig tkw tkw  tkw tkw signer tkw tkw sig msg encode msg  sid inst verify sid msg sig proj pks mem   sid mem proc wrap hid hid  token inst trust inst trust  mem mem trust tag encode tag trust  encode    proj pks mem tag  msg encode msg trust  hid inst sig  hid msg tkw tkw   tkw signer hid tkw sig sig return inst inst trust trust  tkw proc unwrap hid hid token  option rtd none inst trust data inst trust  signer trust trust  inst trust  hid mem trust hid hid     hid tag  encode tag trust data tkw  cph    decrypt  tag cph  none  decode   rtd inst inst trust trust   return rtd HSM operation domain token wrap HSM member trust proj pks mem   signer member trust sid mem encryption formalize tag multi recipient  encryption intuitively variant public encryption multiple agreement encryption algorithm ciphertext decrypt independently multiple recipient individual private agreement encryption therefore public mpk model ciphertexts public sub ciphertexts ciphertext recipient decrypt abstraction permit capture specific flavor public encryption DMP multi recipient syntax permit model scheme minimize bandwidth encryption via reuse randomness across multiple ciphertexts construction  bind ciphertext meta data token parameter tag thereby prevent adversary ciphertext domain token associate honest trust domain token formalize proof security encryption scheme aws KMS security model satisfies sufficient purpose DMP trust management operation model host operation consists trust token consistency relation predecessor latter signer predecessor trust operator unwrap trust operator update host hsms signer HSM predecessor trust session security CCS november london united kingdom initial trust trust  trust none  trust  proc  hstid hstid token bool false hstid  host host hstid signer trust trust installable inst  inst trust  hstid host initial data trust  host hstid trust host hstid trust return host trust update operation  trust trust auth authorization bool threshold preserve   signer quorum  auth subset signer quorum   auth hash consistency  hash member     verify signature msg encode   auth verify msg  auth  auth HSM trust update validation predecessor fingerprint trust fingerprint predecessor trust trust initial trust actually fingerprint host trust instal host finally behavior HSM request trust update successful unwrap domain token trust ensures HSM member trust update request formalize trust authorization signature operator member trust trust enforces minimum quorum  preserve quorum operator trust request compute fold operator auth request VS ideal security KMS DMP justify security definition adopt DMP correspond AEAD service layer define syntax possibly distribute cryptographic management apis inspire    formalism abstract away detail protocol directly related operation independent analyse security management apis allows security model simpler definition later refine concrete DMP refinement clarify introduce abstract notion DMP feature various remark throughout text KMS oracle proc   bool  option  option proc  request request   authorization option proc  hstid proc  hstid hstid token bool proc  hstid hstid token bool proc  hid proc  hid hid trust token option proc  hid hid trust trust auth authorization token token option proc  hid hid hdl handle token token option KMS   operation management apis management apis token token implement trust hardware HSM sim perform computation trust boundary hardware device setting underlie hardware cannot internal token implement cryptographically harden data structure guarantee trust device temporarily access formalization abstract detail applies token data structure mapping handle identifier meta data api management operation operation token  cmd generic interface capture management operation token empty token meta data operation affect token input token command description return possibly update token  hdl cmd sample appropriate distribution token relation hdl api specific instruction described cmd operation consistency input token command cmd command violate permission generate token TkReveal hdl cmd expose associate hdl within api specific instruction described cmd operation command detail cmd TkReveal operation model artifact explicit cryptographic api internal mechanism procedure recover within token cryptographic service serf purpose define correctness api obtain manage api security define api security simply adversary model security breach construct challenge adversary relation DMP EasyCrypt declaration notion    command api meta data associate handle model deletion operation model affect proof rationale complexity invariant session security CCS november london united kingdom remain proc declaration DMP  simply identity HSM operation token token management  procedure genuine operator model allows honest dishonest adversary signing genuine host hsms  procedure model action honest operator signing attestation request genuine entity identity management operation really operating token global api procedure entity request indeed genuine request honest operator  procedure model operation host instal initial trust host hstid update instal trust procedure ensures instal trust honest initial capture global assumption focus analysis host configure honest trust guarantee otherwise latter procedure executes operation host finally   procedure model action hsms upon empty token update trust authorization issue operator crucially model enforces DMP genuine hsms operator host totally disjoint communication entity model explicitly perform api remains explain semantics TkReveal operation within aws KMS recall purpose operation syntax management apis define security explicitly access api express goal adversary formalize indistinguishable random access construct random oracle model DMP TkReveal simply operation asks genuine HSM unwrap domain token return handle correctness requirement management apis api specific restriction reliably secret define correctness introduce predicate valid trace   token handle command input hdl cmd indicates reveal operation successfully return aws KMS model valid simply command genuine HSM trust domain token instal genuine host correctness HSM validates domain token hdl within TkReveal successfully recover define security encryption service cryptographic management apis DMP cryptographic service approach adopt universal composability formalize notion TkReveal actual operation DMP proof  cmd hdl  hdl cmd  hdl cmd mathsf enc mathsf hdl mathsf msg mathsf mathsf dec mathsf hdl mathsf cph mathsf enc hdl msg dec hdl cph diagram UC style ideal functionality focus service authenticate encryption client chosen payload described central component definition correctness security cryptographic service ideal functionality describes service behave monolithic trust ideal functionality functional specification service precise bound information service possibly adversarial environment define functionality encryption service interface approach extends naturally cryptographic mechanism confidentiality authentication ideal functionality interface external interface accessible arbitrary environment adversarial interface capture whatever influence malicious insider adversary underlie cryptographic api interface accessible ideal pictorially adversary environment communicate freely execution interact outward encryption service interface pas goal distinguish encryption service ideal authenticate encryption functionality insider collude environment achieve goal ideal AEAD functionality standard UC approach hdl enc hdl msg return encryption fix constant msg dec hdl cph return msg cph previously enc hdl msg however underlie distribute protocol manages access encryption possibility adversary disrupts operation api request therefore request environment adversary interact cryptographic api configuration choice detail ideal security model functionality corrupt handle handle encryption decryption encryption decryption operation standard AEAD scheme disjoint corrupt encryption operation fully remove restriction non commit encryption security goal aws KMS however appendix proof extends relaxation corrupt corruption session security CCS november london united kingdom interface environment behaves hdl request generation domain handle hdl enc hdl msg request AEAD encryption payload msg associate data secret correspond handle hdl adversary eventually return tuple cmd predicate valid trace hdl cmd hdl corrupt functionality computes TkReveal hdl cmd cph msg return otherwise error return dec hdl cph request decryption ciphertext cph associate data correspond handle hdl adversary eventually return tuple cmd valid trace hdl cmd hdl corrupt functionality computes TkReveal hdl cmd msg cph return otherwise error return previous definition security   oracle relies valid predicate service output environment adversary therefore prevent service client request simply execute api indeed valid naturally exclude sequence api secret handle hdl request creation request however crucially valid predicate totally oblivious honesty trust token adversary succeed dishonest configuration restrict action host HSM exist host configure trust token valid trace token hdl hdl cmd bool  hstid hid  hids  hid hids  hstid trust ideal ideal interface environment behaves identically exception ideal functionality associate handle ciphertext authenticate data tuples hdl cph payload msg empty oracle occurs oracle hdl enc hdl msg request AEAD encryption payload msg associate data secret correspond handle hdl adversary eventually return tuple cmd predicate valid trace hdl cmd hdl corrupt functionality computes TkReveal hdl cmd cph msg update hdl cph msg return cph otherwise error return dec hdl cph request decryption ciphertext cph associate data correspond handle hdl adversary eventually return tuple cmd valid trace hdl cmd hdl corrupt receives hdl cph otherwise error return presentation interface adversarial interface oracle available reflect precisely capability malicious insider adversary access cryptographic api scenario adversary schedule api management generation operation adversary api environment request cryptographic api security definition corrupt  oracle explicitly secret handle hdl otherwise hidden api importantly capture issue maliciously inadvertently leak ensures non leak remain secret circumstance prevent adversary trivially distinguish ideal corrupt environment encryption decryption operation security goal cryptographic service secure ideal computationally indistinguishable leak ideal functionality reveals client payload insider adversary interact api machine checked security proof machine checked proof EasyCrypt correspond layer introduce formalization  security convenient analysis DMP implies ideal notion security corresponds layer abstraction construct tame complexity proof  security discus security guarantee modularly obtain abstraction standard cryptographic assumption allows concrete corresponds  layer finally core theorem establishes  security DMP highlight technical aspect proof corresponds intermediate layer hiding ideal security  security cryptographic api guarantee cryptographic manage api remain hidden adversary adapt notion formalism via addition interact api session security CCS november london united kingdom  corrupt  return  hdl cmd hdl valid hdl cmd TkReveal hdl cmd corrupt hdl corrupt return hdl cmd hdl corrupt valid hdl cmd TkReveal hdl cmd hdl hdl hdl  return insider hdl cmd honest hdl cmd TkReveal hdl cmd return   insider   security manage token adversary access oracle capture hiding oracle internally TkReveal operator model random style challenge oracle  insider oracle TkReveal model explicit leakage secret via corruption execution trace recognize dishonest security definition query strengthen definition domain specific leak external  oracle allows adversary expose otherwise challenged insider oracle permit capture  attack adversary interacts oracle valid non corrupt handle randomly generate adversary probability random theorem formalize EasyCrypt implies cryptographic api satisfies  security encryption service achieves notion UC style security AEAD scheme satisfy standard notion correctness security theorem informal cryptographic api satisfies  security satisfy standard notion AEAD security adversary ideal indistinguishable proof proceeds  security api dec effectively operating consistent secret hdl hidden adversary consistency imply  definition random enforces return handle consistency essential ensure standard AEAD security suffices proof otherwise robust encryption guarantee ensure operation ciphertext leak information forgery AEAD correctness unforgeability switch computation dec perform ideal functionality reduce security api validity predicate trace enforce ideal functionality directly identical oracle available  definition corrupt oracle exactly EasyCrypt theorem reduction tight bound advantage correctness  security twice proof symmetric hop replace api manage random ind AEAD security restore ideal functionality exactly lemma   RI  api  api AEAD  api  RI api ideal api  api ind api false ind api  AEAD AEAD  false AEAD  statement construct adversary theorem allows focus proven EasyCrypt namely KMS domain management api satisfies  security abstraction layer EasyCrypt development defines instantiates reusable abstraction module proof  security abstraction generic signature service multiple proof reuse future EasyCrypt development abstraction specific aws KMS manage complexity proof boxing guarantee combine action hsms operator domain management abstraction multi recipient public encryption scheme proof security reuse future EasyCrypt development ideal signature service abstraction central component model protocol proof security version signature service abstraction introduce module  external interface permit stateless signer independent signing service signature verification procedure pure operator public signature verification algorithm underlie signature scheme protocol digital signature multiple signer arbitrary verifier access public described client signature service standard unforgeability implies service indistinguishable ideal signature verification message proof security protocol relies instance abstraction operator signature another HSM signature abstraction rewrite description protocol function  adversary session security CCS november london united kingdom distinguish service ideal counterpart modify protocol another idealize representation signature invariant refer idealize domain token trust resp identity attestation genuine hsms resp operator domain management abstraction define notion domain management policy specify security distinguish policy enforcement mechanism ideal policy enforcement mechanism detail module capture notion domain management policy action host operator hsms introduce module maintains data structure trust manipulate   trust genuine trust directly checked operator  operation initial trust HSM checked valid descendant trust  descendant relation maintain  idealize version abstraction omit brevity functionality ensures invariant trust genuine HSM member descend trust descendant relation compute hsms behaves injective function trust valid throughout lifetime relation checked host compute hsms intuitively proof invariant described abstraction genuine host hsms trust previously checked genuine HSM speaks trust tag precisely ideal policy trust previously tag honest propagate genuine host descendant relation otherwise guarantee proof discus subsection strengthen security guarantee abstraction rely authentication guarantee inherent trust data structure ahead trust honesty establish genuine HSM EasyCrypt theorem concrete bound adversary distinguish policy management module idealize version KMS domain management policy enforce operator hsms bound collision resistance hash function compute trust fingerprint unforgeability advantage signature scheme operator certify identity maximum operator ops formalization relies  hash function concrete security reduction meaningful  cryptographic hash function modify proof keyed hash function straightforward assumption entity module  OA   var  trust  var  trust trust fmap proc   OA  proc   OA  proc   OA  proc    proc    proc    proc    proc  trust trust  OA  data trust    trust return proc  trust trust auth authorization bool   auth       return proc  trust trust bool return trust  domain management policy abstraction lemma domain management       CR  ops UF   OA  multi recipient PKE abstraction security proof theorem relies tag multi recipient public encryption abstraction contribution independent variant  DMP domain  satisfies notion security ind cca security construction multi recipient encryption extend tag shoup encryption tag decryption oracle permit decrypt cph cph return  oracle extension crucial malicious HSM cannot modify honest token trust decrypts successfully theorem proof  security hop technique hop KMS domain management protocol express signature service policy management abstraction introduce previous subsection hop conservative introduces additional security bound hop consist replace signature abstraction policy management abstraction ideal counterpart hop adversary distinguish hop ideal  guarantee abstraction previous subsection reduce security standard cryptographic primitive perform conservative hop entail innovative entire security proof combine inductive argument establishes session security CCS november london united kingdom propagation trust honesty global invariant guarantee absence collision trust fingerprint signature forgery justify hop slice entire code  isolate honest trust remain enforces oracle adversary trust furthermore longer relies public decryption recover domain trust instead domain adversary challenge query domain encrypt domain token domain token trust explicitly decrypt hop formalize invariant appendix establishes equivalence honest trust trust demonstrates trust instal genuine host invariant implies consistent management handle  security mention proof rely security  encryption scheme replace domain encrypt domain token fix constant crucial strict separation trust dishonest trust reduction security encryption scheme critically relies  challenge oracle public encryption emulate encryption domain domain token intuitively genuine hsms honest public multi recipient public encryption cca security underlie encryption scheme permit arbitrary insider query decrypt ciphertexts domain token  adversary proof adversary independent domain hence advantage conclude statement EasyCrypt security theorem  advantage upper bound probability adversary domain management policy invariant upper bound lemma domain management previous subsection probability adversary underlie signature scheme probability adversary underlie multi recipient public encryption scheme additional negligible account probability signing honest collide adversary generates identity adversarially operator hsms KMS ror   CR  ops   hid      sec false  sec hid hid   max keygen hop explicit imply unforgeability digital signature adversary signing genuine entity generate trust declare dishonest remains dishonest identity generate ops   max keygen  usage EXTENSIONS EasyCrypt development consists code loc loc correspond protocol specification additionally loc establish reusable definition lemma standard cryptographic primitive EasyCrypt data structure loc definition KMS specific security model loc approximate security proof core logic EasyCrypt expressive  logic proof however convenience development introduce feature reduce proof effort unprecedented project feature enlarge trust compute TCB EasyCrypt compose tactic define EasyCrypt core logic indeed feature generate internal proof rely core tactic hence bug feature acceptance invalid proof reject TCB management pre core tactic user intermediate assertion loop invariant complex program specification intermediate assertion becomes cumbersome  however majority assertion express pre tend possibility sub formula proof goal sub formula assertion greatly decrease proof effort proof script robust assertion delta active proof goal readable proof goal proof automation core tactic EasyCrypt generate proof obligation code lossless terminates probability implement heuristic goal automatically improve exist automation chain application core tactic tune implementation core tactic integrate automatic version frame remove immediately imply pre   addition machine checked specification security proof KMS DMP described project   challenge development computer aid cryptographic provable security particularly EasyCrypt overview away lesson project imperative functional specification EasyCrypt freedom formalize cryptographic primitive security session security CCS november london united kingdom security model become intricate crucial decision model usually tension readability complexity proof goal invariant favour readability EasyCrypt imperative action oracle dedicate EasyCrypt module syntactically distinguish behaviour entity entity local variable submodule statement consequence program describes security display complex equivalence hop harder hop typically address introduce additional branching alternative flatten  security collapse module structure detail EasyCrypt operator functional specification deterministic transition specification readable naturally slice probabilistic statement model cryptographic operation associate branching signature verification usually crucial program action  hop branching iteration statement model management operation syntactic validity message dispatch project approach hindsight conclusion readable model checked soundness easily flatten hop choice modular proof global invariant related issue manage proof complexity identify abstraction boundary decompose proof  intermediate goal straightforward namely sub component protocol cryptographer naturally building signature service global hash function understood global invariant security however project encounter protocol specific semantically global invariant permit correctly identify formalize proof manageable subgoals simplify proof intuitively achieve specify invariant globally reduce preservation simpler flatten probability bound jumping preservation hardwired sometimes branching sub formula directly code challenge pin minimal invariant  proof easily generalize future  syntactically display relevant establish invariant code easy understand context proof goal proof effort overall rough analysis proof effort involve project intuition resource hop proof experienced EasyCrypt user security invariant correctly specify highlight linearly complexity program similarly functional equivalence proof program reasonably identical related significant formal verification cryptographic api pkcs token   model token security protocol sole apply dolev yao verification analyze security    automate model security functionality token evaluate commercially available pkcs token discover security issue validate patch   formalize computational security cryptographic apis security pkcs token model   define another model  powerful corruption   define UC functionality management model security minimal model imposes constraint interaction management usage     definition security cryptographic apis composes symmetric primitive AEAD mac cryptographic service security cryptographic service define extend attack vector standard AEAD mac security oracle available cryptographic api adversary depart approach adopt alternative formulation security cryptographic service inspire universal composability framework UC appendix UC inherit important advantage composition guarantee cryptographic service intuitive correctness security guarantee client cryptographic service   proverif analyze protocol secure file distribute management feature analysis conduct symbolic model cryptography weaker guarantee allows automation  cryptographic security proof computational model probabilistic algebra model leverage notion equivalence proof equivalence equivalence failure hybrid argument  verify primitive protocol recently apply TLS session security CCS november london united kingdom conclusion concrete security bound DMP aws KMS standard cryptographic assumption bound tight increase linearly entity machine checked EasyCrypt practical purpose evidence DMP ideal encryption service assumption quorum aws operator authorizes domain update operation honest operator