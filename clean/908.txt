vast majority security breach encounter insecure code consequently protection computer critically depends rigorous identification vulnerability software tedious error prone significant expertise unfortunately flaw suffices undermine security sheer amount code audit attacker effectively amount source code vulnerability introduce novel representation source code code graph merges concept classic program analysis namely abstract syntax graph program dependence graph joint data structure comprehensive representation enables elegantly model template vulnerability graph traversal instance identify buffer overflow integer overflow format vulnerability memory disclosure implement approach popular graph database demonstrate efficacy identify previously unknown vulnerability source code linux kernel introduction security computer fundamentally depends quality underlie software despite series research academia security vulnerability regularly manifest program code failure account buffer boundary insufficient validation input data consequently vulnerability software remain primary security breach buffer overflow universal plug library render router vulnerable attack internet similarly user currently victim web malware exploit flaw java runtime environment discovery software vulnerability classic challenge security due inability program identify non trivial another program generic software vulnerability undecidable consequence security flaw limited specific vulnerability tedious manual audit secure software project operating kernel resembles daunt task flaw undermine security entire code although vulnerability  throughout software landscape exist buffer overflow format vulnerability automatically detect incarnation specific software project without significant expert knowledge situation security research focus statically specific vulnerability flaw induced insecure library function buffer overflow integer overflow insufficient validation input data concept software broader detection vulnerability achieve dynamic program analysis fuzz advanced taint symbolic execution approach discover flaw efficiently fail appropriate due prohibitive runtime exponential growth execution remedy security research recently explore approach assist analyst audit instead replace propose accelerate audit augment static program analysis expert knowledge thereby vulnerability direction research novel approach mining amount source code vulnerability approach combine classic concept program analysis recent development graph mining insight underlie approach vulnerability adequately discover jointly account structure dependency code address requirement introduce novel representation source code denote code graph graph combine abstract syntax graph program dependence graph joint data structure comprehensive code enables elegantly model template vulnerability graph traversal query database graph traversal code graph inspects code structure data dependency associate node joint access code enables craft concise template flaw thereby audit amount code vulnerability implement approach popular graph database demonstrate practical merit graph traversal vulnerability buffer overflow integer overflow format vulnerability memory disclosure analyze source code linux kernel audit code almost vulnerability report linux kernel described traversal code graph despite considerable effort source community improve kernel security traversal enable discover previously unknown vulnerability linux kernel thereby demonstrate capability code graph summary contribution vulnerability discovery code graph introduce novel representation source code combine abstract syntax graph program dependence graph joint data structure traversal vulnerability vulnerability elegantly model traversal code graph efficient detection template efficient implementation demonstrate import code graph graph database traversal efficiently execute code linux kernel remainder structure background information representation code II define concept graph graph traversal introduce novel representation code graph IV demonstrate characterize vulnerability evaluate approach VI related limitation vii respectively IX concludes II representation code various representation code developed program analysis compiler program representation primarily analyze optimize code characterize explore focus classic representation namely abstract syntax graph program dependence graph basis approach vulnerability discovery detailed discussion code representation illustrate representation code sample exemplary code sample abstract syntax ast abstract syntax usually intermediate representation code parser compiler basis generation code representation faithfully encode statement expression nest program contrast parse however abstract syntax longer concrete syntax chosen express program comma declaration usually abstract syntax consecutive declaration abstract syntax inner node operator addition assignment leaf node correspond operand constant identifier abstract syntax code sample abstract syntax code transformation employ identify semantically code applicable evolve code analysis detection code uninitialized variable deficiency neither data dependency explicit representation code representation code data dependency program dependence graph representation code data dependency program dependence graph graph cfg graph explicitly describes code statement execute met execution statement predicate node transfer abstract syntax assign label false statement node outgo label whereas predicate node outgo correspond false evaluation predicate graph construct abstract syntax procedure structure statement account preliminary graph preliminary graph additionally unstructured statement goto cfg code sample graph variety application security context detect variant malicious application fuzz moreover become standard code representation reverse engineering aid program understand however graph expose application fail data information vulnerability analysis graph cannot easily identify statement data influence attacker program dependence graph pdg program dependence graph introduce originally developed perform program slice statement predicate program affect variable specify statement program dependence graph explicitly dependency statement predicate graph construct data dependency reflect influence variable another dependency correspond influence predicate variable program dependence graph calculate graph variable define variable statement calculate definition statement predicate standard compiler program dependence graph code sample dependency simply statement execute longer graph whereas dependency statement predicate clearly visible graph traversal representation unique source code emphasize aspect underlie program combine joint representation vulnerability discovery employ concept graph representation structure data graph database  neoj  formally graph define definition graph label attribute multigraph node EC label function assign label alphabet assign node function graph node graph multigraphs node multiple node moreover assign node node graph assign node dash mining information graph graph traversal traversal along graph label formally traversal graph define definition traversal function node another node accord graph generic definition allows chain multiple traversal graph traversal chain function composition chain define elementary traversal basis construction traversal define filter traversal   return node boolean predicate along graph define traversal      SourceRight click MathML additional feature return node reachable node detail traversal return node reachable return node reachable label  node reachable label similarly define traversal inl ink backward graph inl ink  SourceRight click MathML additional feature finally define traversal aggregate output traversal TN TN TN TN SourceRight click MathML additional feature despite slightly technical definition graph database efficient implementation elementary traversal filter traversal function graph gremlin popular database neoj  discus detail implement graph traversal along evaluation approach VI IV code graph representation II capture underlie software however representation alone insufficient characterize vulnerability vast majority combine representation joint data structure concept graph introduce model ASTs CFGs PDGs graph proceed merge graph offering advantage individual representation transform abstract syntax representation offering detailed decomposition source code construct ast hence construction joint representation express ast graph GA VA EA node VA node EA correspond label ast label function additionally assign code node corresponds operator operand node finally assign node reflect structure graph KA code SA operator operand transform graph cfg incorporation joint representation purpose express cfg graph GC VC EC node VC simply correspond statement predicate ast node VA stmt pred code furthermore define label function assigns label  false graph transform program dependence graph pdg data dependency statement predicate node graph cfg graph hence pdg graph GP VC EP simply define EP correspond label function   corresponds data dependency additionally assign data dependency correspond dependency originate predicate false combine representation combine graph joint data structure denote code graph insight construct graph graph node exists statement predicate source code ast representation introduces additional node statement predicate node naturally representation transition representation another definition code graph graph construct ast cfg pdg source code VA EA EC EP combine label function slight abuse notation code graph code sample simplicity label ast node graph mainly ast irrelevant func node transform cfg pdg code graph code sample code graph code sample traversal vulnerability code graph allows program express however immediately employ discover  ability code graph effectively identify security flaw develop template description vulnerability explore limitation purely syntactic description code proceed additional information slight improvement finally data syntactical information combine variety vulnerability accessible motivational recent buffer overflow ssh implementation  expose iOS application attack  employ regular expression vulnerable code excerpt code  vulnerability function   excerpt code  vulnerability function   vulnerable statement marked allocates memory buffer exit signal function  alloc amount memory allocate calculate directly argument variable  unfortunately variable attacker chosen maximum unsigned integer summation wrap allocation function allocation pad byte  byte  buffer buffer overflow occurs  discover vulnerable statement regular expression algorithm unfortunately regular expression describes summation inside allocation vulnerability moreover description inherently vague regular expression cannot nest structure code however drawback formulation description fails model attacker variable  furthermore vulnerability exist variable properly sanitize finally width variable vital vulnerability insight code role characterization vulnerability summary aspect sensitive operation security sensitive operation functionality copying buffer allocation memory  nest code arithmetic operation inside allocation access ast usage vulnerability tightly bound data program vulnerability exist  integer oppose integer information ast attacker analyst express data source attacker refer highly likely variable return   attacker routine convert integer network host byte hence integer almost certainly network data dependency express pdg model sanitization finally vulnerability program lack sanitization attacker data variable  checked allocation vulnerability exist model statement explicit cfg crucial analyze detail code graph contribute construction successful graph traversal vulnerability discovery syntax vulnerability description code graph expose information originally abstract syntax information sufficient attacker source sensitive operation sanitizers fails capture interplay statement illustrate vulnerable statement syntactical structure vulnerability summation occurs directly argument allocation function already introduce challenge function contains summation capture nest structure code address obtain node function subsequently filter node summation node ast criterion  address define usable traversal  traverse ast node ast immediately allows ast contains summation node simply combine  filter obtain   SourceRight click MathML additional feature traverse node ASTs filter node accord predicate traverse allocation function code simply achieve traversal function node allocation function identify summation nest inside argument becomes easy traversal simply chain function composition identify summation inside ith argument function traversal  SourceRight click MathML additional feature  traversal return argument function code summation false otherwise traversal alone characterize interplay statement however basis precise description sensitive operation sanitizers attacker source vast majority vulnerability moreover characterize statement already narrow vulnerability vulnerability traversal alone equally successful insecure argument insecure argument source vulnerability format vulnerability attacker format function printf  exploit arbitrary code execution platform format vulnerability format utility function printf   constant described traversal  SourceRight click MathML additional feature constant code traversal model attacker successful non constant format integer overflow arithmetic operation perform inside argument allocation function prime candidate integer overflow corruption memory motivate depict easily express traversal  SourceRight click MathML additional feature arithmetic operation code multiplication integer issue vulnerability consequence conversion unforeseen developer buffer overflow incorrectly calculate verify buffer implicit integer cast integer truncation occurs integer righthand assignment wider vulnerability evolve previous subtrees assignment vulnerable define function  node assignment node performs independent traversal traverse subtree assignment traverse combine traversal filter accord predicate function  define analogously filter integer truncation easily detect combine function yield traversal  SourceRight click MathML additional feature node denotes variable wider node node assignment finally traverse subtrees assignment respectively attempt characterize vulnerability traversal alone bound fail statement cannot relation combine traversal introduce narrow potentially code permission characterize security critical operation attacker source code vulnerable unfortunately abstract syntax definition capture definition syntax vulnerability description tuple traversal ast node syntax description traversal none traversal syntax vulnerability description effective however express attacker interaction statement false positive discus description tackle partially vulnerability description code graph wider vulnerability becomes accessible model statement execution vulnerability correspond graph described resource leak vulnerability exist resource allocate properly deallocated error typical become unavailable however trigger vulnerability failure release lock concurrency issue detect analysis detect lock release error vulnerability software defect code access already release memory exploitable arbitrary code execution vulnerability complicate interaction seemingly unrelated function analysis suffice identify vulnerability within function vulnerability associate specific graph resource leak graph statement attain memory malloc function without passing statement release resource however relevant allocation function return pointer allocate memory attach additional constraint graph capture observation definition definition vulnerability description tuple     syntax description source statement statement  destination statement  syntax description associate outcome false node vulnerability description ast contains subtree node   exists graph  node node  node description simd originate node label vulnerability express traversal performs depth source node node node destination description adhere description associate outcome formal definition traversal omit brevity unfortunately syntactical information alone usually sufficient specify vulnerability particularly interested attacker data discus taint style vulnerability description finally combine syntax data information model vulnerability syntax vulnerability description gain additional capability model attacker data statement node contains incoming data assignment variable definition easily traverse statement variable statement simply however difficulty arises statement node data traverse argument function data producer traverse enclose statement fortunately easily achieve traversal statement formally define appendix IX producer variable node calculate traversal   statement sourcewhere identifier restrict analysis subset variable statement convenience define traversal source statement data variable statement source valuable traversal combine syntax description sensitive operation data source identify attacker data sensitive operation incarnation buffer overflow linux kernel user integer function user directly memcpy operation formulate traversal identify vulnerability    SourceRight click MathML additional feature predicate return node user traverse user directly argument memcpy addition traversal source chain arbitrary identify argument indirectly generate attacker source weakness formulation account data sanitization return data checked ensure harmful possibility account sanitizers introduce additional syntax description however account statement impossible detect correctly address deficiency combination data information interested traversal functionality source additionally syntax description sanitizers define traversal  replacement source additionally allows specific syntax sanitizer description  exclude properly sanitize traversal return attacker source exists source statement sink statement graph node sanitizer description variable define source sink sink via variable redefine node combine syntax description  traversal define taint style vulnerability description definition taint style vulnerability description tuple    syntax description  attacker source security sensitive sink  syntax description sanitizers  node taint style description ast contains subtree node   another subtree   exists data dependency   sequence node exists   data dependency exists graph define sanitizer description san taint style description define traversal vulnerability described validate source sink vulnerability injection vulnerability buffer overflow integer overflow integer vulnerability insecure argument permission memory disclosure illustrate buffer overflow vulnerability motivate description buffer overflow insufficient validation operation linux kernel code buffer overflow function user argument memcpy  user without undergo validation vulnerability express traversal  user   source traversal selects argument memcpy directly taint argument user validate node traversal traversal relational expression involve tracked variable traversal easily extend argument taint indirectly chain  traversal code injection vulnerability vulnerability sql command injection described taint style description typical command injection vulnerability attacker execute arbitrary command described traversal   TS  SourceRight click MathML additional feature traversal comparison semicolon validation function traversal return argument recv argument without contains semicolon permission web application kernel code commonly user permission execute operation failure allows privilege escalate vulnerability express     sourcewhere predicate attacker source ensure user sufficient permission security sensitive operation respectively taint style description attacker source security sensitive operation sanitizers information interplay statement data enables query vulnerability evaluation approach vulnerability indeed relevant security critical code VI evaluation proceed evaluate practical efficacy approach source code linux kernel code regularly audit vulnerability software vendor source community evaluation conduct coverage analysis review code vulnerability report linux kernel vulnerability model graph traversal VI ability approach discover vulnerability construct traversal prevalent vulnerability apply code graph linux kernel VI implementation evaluation implement static code analysis code graph employ robust parser extract ASTs function code transform ASTs CFGs PDGs merge representation code graph outline IV additionally introduce node global variable structure declaration code finally link graph function visible caller callee relationship entire code code graph source code linux kernel obtain graph node obviously mining information graph commodity hardware trivial task fortunately specialized graph database capable efficient access graph employ neoj version moreover graph database benefit sophisticated cache algorithm accelerate traversal graph prototype implementation import linux kernel version approximately code laptop computer ghz intel core cpu GB memory database GB disk node another GB efficient index implement graph traversal gremlin graph allows user define traversal chain database implement mechanism procedure sql database enables convert traversal directly gremlin code furthermore gremlin interfacing database compatibility layer blueprint thereby enable craft traversal graph database implementation without modification traversal vulnerability discovery database database content disk node cached memory execution reduces vast majority spent viable function traversal  coverage analysis analysis query central vulnerability database maintain mitre organization cve identifier allocate vulnerability linux kernel retrieve identifier address unique vulnerability source code kernel categorize vulnerability manually inspect patch vulnerability report flaw information assign vulnerability vulnerability memory disclosure buffer overflow resource leak express graph traversal vulnerability discover linux kernel sort vulnerability ass coverage approach analyze code representation vulnerability discover linux kernel analyze coverage ast alone combination ast pdg combination ast cfg combination ast pdg cfg analysis II II coverage code representation model vulnerability II coverage code representation model vulnerability obviously ast alone information security flaw insecure argument incorrect cast discover representation combine information ast pdg obtain code buffer overflow permission zero however combination ast pdg limited statement location security combination ast cfg vulnerability vulnerability attacker data model resource leak vulnerability identify statement encode cfg combine representation code graph finally model vulnerability information available ast cfg pdg remain error express graph traversal depends runtime model without detail intend program moreover exist contrive vulnerability without runtime information discussion limitation approach vii discovery vulnerability graph traversal code graph vulnerability however remains effective practically evaluate mining code graph linux kernel traversal vulnerability specify traversal vulnerability encounter buffer overflow due bound memory disclosure incompletely initialize structure proceed traversal vulnerability encounter namely memory mapping vulnerability zero byte allocation vulnerability specific linux kernel conventional summary traversal buffer overflow construct traversal buffer overflow attacker traversal detail VI memory disclosure security critical flaw linux kernel improperly initialize structure user flaw attacker leak sensitive kernel memory identify vulnerability construct taint style traversal local declaration structure operation copying user pas  moreover lookup structure syntax description structure assign memory mapping kernel ensure user cannot arbitrary physical memory address user prevent leak confidential information arbitrary code execution vulnerability specific kernel formulate syntax vulnerability description identify vulnerability adapt program specific bug zero byte allocation attacker allocation function zero byte crash linux kernel allocation function return error code instead allocate memory uncommon allocator program specific vulnerability taint style traversal overall traversal identify previously unknown vulnerability address kernel developer particularly alarm vulnerability vulnerability prevalent sufficient attacker model exist vulnerability effectively flaw code traversal summarizes finding zero vulnerability discover graph traversal zero vulnerability discover graph traversal proceed discus illustrate vulnerability discovery graph traversal traversal identify previously unknown buffer overflow vulnerability review eleven function buffer overflow identification traversal identify buffer overflow validation vulnerability elegantly express taint style description hence traversal  merely define suitable traversal attacker source sanitizers finally security sensitive sink source attacker specific application examination linux kernel prominent source potentially harmful input user kernel interface data user kernel api function  user function taint argument data attacker capture traversal  user parameter handler attacker parameter handler invoke correspond parameter traversal func    non empty parameter node function sub respectively data sink argument user memcpy interested identify attacker amount data buffer handler restrict analysis analyze  user ensure data attacker sink traversal arg memcpy  user finally reduce false positive assume properly sanitize met dynamic allocation destination buffer destination buffer dynamically allocate specify buffer buffer data relational expression relational expression inside buffer macro min incorrect practical false positive false negative hence define sanitizer traversal traversal allocation argument contains traversal relative expression min traversal   SourceRight click MathML additional feature traversal entire linux source code return eleven function IV eleven function buffer overflow vulnerability vulnerable function   command attacker data initialize local variable req len variable without perform sanitization operation attacker overflow buffer  possibly execution arbitrary code buffer overflow vulnerability linux kernel driver approach IV function extract linux kernel graph traversal vulnerability shade vii limitation discovery unknown vulnerability linux kernel clearly demonstrates capability approach nonetheless exist limitation approach purely static cannot overcome inherent limitation static program analysis implement data interpret code equivalent differently formulate expression symbolic execution vulnerability induced runtime behavior cannot model code graph due vulnerability discovery undecidable approach potentially vulnerable code contrast approach target specific vulnerability focus generic mining vulnerability guarantee presence security flaw identify potentially vulnerability software project implementation address inter procedural analysis link function accord relation graph database formulate effective inter procedural traversal additional challenge inherent limitation approach inter procedural variant graph program dependence graph exist inter procedural graph dependence graph future aim extend inter procedural analysis related scan source code vulnerability vulnerability scanner microsoft    adopt vulnerability valuable development usually fail identify complex subtle vulnerability code moreover adapt account specific code remedy researcher incorporate expert knowledge static analysis evans   allows analyst annotation incarnation buffer overflow format vulnerability application moreover   propose extend static checker  lite identify vulnerability microsoft com component approach related wider vulnerability accessible expense precise analysis security research query vulnerability flaw source code  lam construct static checker program description formulate query  subsequently employ static taint analysis uncover site script sql injection vulnerability java code similarly static taint analysis identify format vulnerability program approach highly effective identify specific vulnerability however applicable wider vulnerability memory disclosure resource leak furthermore static taint analysis inherently limited passive data expression cannot evaluate dynamic approach program analysis fuzz dynamic taint propose address deficiency static program analysis unfortunately vulnerability trigger runtime security flaw unusual discover remedy researcher propose combine fuzz symbolic execution actively analysis explore unusual approach however costly suffer exponential program finally directly related vulnerability discovery rep pioneer perform program analysis graph reachability dataflow program slice traverse graph moreover representation specifically aid bug program understand   combine graph  essence program dependence graph similarly   grain dependence graph combine syntactical data information precise program slice calculate via constraint explore bug vulnerability graph traversal explore IX conclusion analyst practical discovery vulnerability software utmost importance secure computer approach mining amount code vulnerability approach novel representation source code code graph enables model vulnerability graph traversal representation concise traversal vulnerability buffer overflow format vulnerability memory address leak moreover audit code linux kernel code graph identify previously unknown vulnerability source code confirm fix vendor code graph graph traversal suitable vulnerability importantly tailor identify vulnerability specific code refining traversal analyst false positive false negative rate vague traversal formulate discovery phase analysis precise traversal capture instance understood vulnerability