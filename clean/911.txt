emerge smart contract decentralize cryptocurrencies mutually  transact safely without trust contractual breach abort decentralize blockchain ensures honest obtain commensurate compensation exist however lack transactional privacy transaction pseudonym amount transact expose blockchain hawk decentralize smart contract financial transaction blockchain retain transactional privacy public hawk programmer private smart contract intuitive manner without implement cryptography compiler automatically generates efficient cryptographic protocol contractual interact blockchain cryptographic primitive zero knowledge proof formally define security protocol formalize blockchain model cryptography formal model independent advocate community adopt formal model application atop decentralize blockchains introduction decentralize cryptocurrencies bitcoin alt coin rapidly gain popularity quote glimpse future emerge   atop novel blockchain technology miner distribute consensus security ensure adversary  computational resource blockchain miner therefore interchangeably blockchains bitcoin consensus data computation involve data bitcoin specifically data transfer transaction propose user computation involves transaction validation update data structure unspent transaction output  user account balance newly emerge cryptocurrency ethereum embrace arbitrary user define program blockchain expressive decentralize smart contract smart contract protocol interact blockchain assume decentralize  protocol secure blockchain conceptual reality decentralize trust correctness availability privacy blockchain powerful abstraction distribute protocol blockchain expressive enhance blockchains naturally embody discrete notion increment whenever existence trust crucial attain financial fairness protocol malicious contractual prematurely abort protocol avoid financial payment however trust timeouts employ abort evident blockchain financially penalize abort redistribute collateral deposit honest non abort blockchain model cryptography powerful traditional model without blockchain fairness impossible majority corrupt summary blockchains mutually unbeknownst transact securely without centrally trust intermediary avoid legal transactional despite expressiveness blockchain smart contract technology lack transactional privacy entire sequence action smart contract propagate across network blockchain therefore publicly visible pseudonymous public increase anonymity transaction balance pseudonymous public publicly visible recent demonstrate  attack analyze transactional graph structure cryptocurrencies stress lack privacy hindrance towards adoption decentralize smart contract financial transaction insurance contract stock trading individual organization highly secret although progress privacy preserve cryptocurrencies zerocash others forgo programmability unclear priori enable programmability without expose transaction data cleartext miner hawk overview propose hawk framework building privacy preserve smart contract hawk non specialist programmer easily hawk program without implement cryptography hawk compiler compile program cryptographic protocol blockchain user hawk program contains private portion denote ϕpriv input data choice scissors currency bid auction ϕpriv performs computation payout distribution amongst auction winner bid seller others bid refund private hawk program ϕpriv participant data exchange public portion denote ϕpub private data compiler compile hawk program jointly define cryptographic protocol user manager blockchain blockchain program execute consensus node program execute user program execute facilitate manager explain shortly security guarantee hawk security guarantee encompass aspect chain privacy chain privacy stipulates transactional privacy public involve contract unless contractual voluntarily disclose information although hawk protocol user exchange data blockchain rely ensure fairness abort amount transact private hawk program ϕpriv cryptographically hidden public informally achieve encrypt information blockchain rely zero knowledge proof enforce correctness contract execution conservation contractual security chain privacy protects contractual privacy public involve financial contract contractual security protects contractual agreement hawk assumes contractual selfishly maximize financial arbitrarily deviate prescribed protocol abort prematurely therefore contractual security multi faceted notion encompasses cryptographic notion confidentiality authenticity financial fairness presence cheat abort behavior understand contractual security concrete refer reader detailed explanation minimally trust manager execution hawk contract facilitate manager manager user input trust disclose user private data however manager trust manager deviate arbitrarily protocol collude manager cannot affect execution contract manager abort protocol financially penalize user obtain compensation accordingly hawk overview hawk overview manager trust maintain security privacy underlie currency cannot inflate currency deanonymize user furthermore multiple contract instance concurrently contract specify manager corrupt manager confine instance finally manager role instantiate trust compute hardware intel sgx replace multiparty computation user IV appendix terminology ethereum blockchain portion protocol ethereum contract however refers entire protocol define hawk program contract blockchain program constituent protocol manager abort protocol financially penalize user obtain compensation accordingly seal auction program hawk program implement seal price auction bidder price price auction incentivize truthful bidding assumption important bidder submit bid without bid auction program contains private portion ϕpriv determines bidder price paid public portion ϕpub relies public deposit bidder abort manager assume bidder priori contractual security requirement hawk compile auction program cryptographic protocol mention earlier bidder manager voluntarily disclose information transaction privacy maintain public hawk guarantee contractual security requirement contract hawk program price seal auction code described approximation implementation public contract syntax corresponds semantics cryptographic formalism ledger ledger II input independent privacy user others bid commit collude potentially malicious manager user bid independent others bid posterior privacy manager disclose information user bid private public auction financial fairness attempt prematurely abort protocol avoid payment affect redistribution wealth abort auction manager abort abort financially penalize remain compensation cryptography literature fairness guarantee attainable chain protocol secure multi computation explain later hawk built mechanism enforce refund private bid timeouts hawk allows programmer define additional hawk contract financial fairness security dishonest manager ensure authenticity dishonest manager besides abort dishonest manager cannot affect outcome auction redistribution colludes subset user stress ensure input independent privacy faulty manager prerequisite moreover manager abort financially penalize participant obtain correspond  auction security privacy requirement cannot trivially implement atop exist cryptocurrency ethereum zerocash former allows programmability guarantee transactional privacy latter guarantee transactional privacy price reduce programmability bitcoin abort timeouts abort dealt timeouts hawk program declares timeout parameter  syntax timeouts declare hawk contract bid user bid manager within user submit bid fails input bid treat potential input data treat manager manager abort user reclaim private bid public hawk contract ϕpub additionally implement incentive structure seal auction program redistributes manager public deposit abort specifically seal auction program ϕpub defines function namely  function invoked hawk contract completes execution within manager abort otherwise hawk contract execution within  function invoked remark although explicitly code hawk contract implicit default entry accept deposit deposit withheld contract till redistribute contract bidder manager public deposit submit bid additional application besides seal auction hawk various application sample program VI contribution knowledge hawk simultaneously transactional privacy programmability decentralize cryptocurrency formal model decentralize smart contract initiate formal academic treatment blockchain model cryptography formal universal composability UC model blockchain model cryptography formal model independent useful define model security protocol blockchain model formal model adopt  criminal smart contract define formal blockchain model rely notion wrapper modularize protocol simplify presentation wrapper handle detail timer pseudonym global ledger centralize protocol cryptography suite implement cryptography suite bind private transaction programmable logic protocol suite contains essential primitive freeze compute finalize freeze primitive allows commit normal data coin commit coin frozen contract payout distribution later program ϕpriv compute commit data currency manager manager compute function ϕpriv outcome ϕpriv manager construct private coin paid recipient manager submits blockchain private coin zero knowledge proof formedness previously frozen coin redistribute user protocol suite strictly generalizes zerocash zerocash implement private transfer user without programmability define security primitive ideal functionality formally security construction simulation paradigm implementation evaluation built hawk prototype evaluate performance implement application seal bid auction scissors crowdfunding application swap financial propose protocol optimization gain factor performance relative straightforward implementation auction crowdfunding manager cryptographic computation expensive protocol min core translate EC chain computation perform miner cheap source hawk framework future background related background bitcoin limited programmability script neither turing user friendly numerous previous endeavor smart contract application atop bitcoin lottery micropayments verifiable computation demonstrate difficulty retrofit bitcoin script serf motivate turing user friendly smart contract ethereum turing decentralize smart contract ethereum imminent launch hobbyist already building numerous smart contract application atop ethereum fork ethereum prediction chain provenance  security derivative trading security blockchain earlier smart contract application cryptocurrencies rely underlie decentralize blockchain secure therefore assume blockchain consensus protocol attains security adversary  computational exist cryptocurrencies heuristic security researcher identify attack various aspect effort formally understand security blockchain consensus minimize chain miner execute smart contract program verify transaction cryptocurrencies bitcoin ethereum transaction fee roughly correlate execution explicitly model fee protocol minimize chain perform computation chain additional related leverage blockchain financial fairness prior explore leverage blockchain technology achieve fairness protocol bitcoin ensure fairness secure multi computation protocol protocol perform chain secure computation various guarantee transactional privacy hiding currency amount transact implement seal auction earlier technique earlier implementation implementation specific application lottery comparison hawk generic platform  programmer easily develop privacy preserve smart contract smart contract conceptual programmable electronic smart contract date nearly besides recent decentralize cryptocurrencies guarantee authenticity privacy smart contract implementation rely trust server security therefore closest realize vision interact trustworthy virtual computer executes program involve data program framework cryptography developed program framework program specification generate cryptographic implementation compiler secure multi computation authenticate data structure zero knowledge proof generate secure distribute protocol seal auction  banking application various notion security none interact directly leverage public blockchains ensure financial fairness combine construction cryptography approach smart contract concurrent framework fledge formal model decentralize blockchains embody bitcoin ethereum popular decentralize cryptocurrencies concurrent independent propose blockchain model generalize universal composability framework derive online version mpc public deposit however programmability formalism limited specific application mpc public deposit comparison formalism broader goal facilitate protocol designer protocol blockchain model wrapper ideal wrapper model presence arbitrary user define contract program interact ledger formalism adopt  demonstrate usefulness II blockchain model cryptography blockchain model informally trust model assumption propose formal framework blockchain model cryptography specify security protocol blockchain refers decentralize miner secure consensus protocol upon global therefore regard blockchain conceptual trust trust correctness availability trust privacy blockchain maintains global ledger balance pseudonym executes user define program specifically assumption blockchain aware discrete increment epoch interchangeably public chain public ledger blockchain user blockchain program contract protocol message delivery message blockchain network adversary arbitrarily reorder message blockchain within adversary attempt attack refer rush adversary cryptographer upon honest user trading stock adversary preempt transaction trading stock protocol proven secure despite adversarial message delivery schedule assume reliable channel blockchain adversary cannot message sends blockchain reality overlay network sufficient redundancy however adversary message deliver blockchain pseudonym user unbounded polynomial pseudonym communicate blockchain correctness availability assume blockchain perform prescribed computation correctly assume blockchain available advantage generic blockchain model adopt generic blockchain model blockchain arbitrary turing program comparison previous concurrent retrofit artifact bitcoin limited script vii online version additional theoretical demonstrate generic blockchain model yield asymptotically efficient cryptographic protocol formally model blockchain adopts carefully notational reader understand construction without understand precise detail formal model stress however formal precise specification functionality security protocol formally proven secure universal composability UC framework contribution independent propose formal UC framework security distribute protocol interact blockchain refer formal model blockchain model cryptography program wrapper functionality remainder ideal specification protocol execute blockchain user manager respectively program pseudocode refer ideal program denote ideal blockchain program denote blockchain user manager program denote  respectively pseudo code style program precise meaning UC framework compile program UC style functionality protocol apply wrapper program specifically define wrapper ideal wrapper transforms ideal program  UC ideal functionality  blockchain wrapper transforms blockchain program blockchain functionality blockchain functionality model program execute blockchain protocol wrapper transforms user manager program  user manager protocol  important wrapper wrapper implement feature smart contract application public ledger pseudonym adversarial reorder message notation blockchain application defer formal UC model appendix hinder reader understand protocol reader intuitively understands blockchain model assumption described II protocol define notational convention program reader interested detail formal model proof refer appendix convention program wrapper  notation allows convention user define ideal program blockchain program user protocol convention timer activation ideal functionality wrapper blockchain wrapper implement advance advanced wrapper invoke timer activation therefore convention ideal program blockchain program define timer activation timeout operation refund timeout implement timer activation delayed processing ideal program blockchain program message blockchain program already delayed due wrapper ideal program introduce convention denote delayed computation program instruction background denote computation immediately defer timer click convenient shorthand protocol effectively computation blockchain functionality delayed IdealPcash ideal program whenever ideal functionality receives mint pour message ideal adversary notify immediately however processing message defer till timer click formally delayed processing implement simply invoke delayed program instruction timer click convention assume delayed instruction invoked timer upon timer click delayed instruction execute pseudonymity identifier ideal program blockchain program user program default refer pseudonym upon message accepts message pseudonym whenever upon message without keyword accepts message fix pseudonym typically pseudonym refer context whenever  inside user program sends internal message protocol wrapper protocol wrapper authenticate message appropriately pseudonym definition IdealPcash notation ledger denotes public ledger coin denotes private pool coin mention II background denotes batch delayed activation correspond pseudonym due notation convention define II context avoid  simply formal allows user message anonymously blockchain although option ledger transfer public ledger denote ledger ideal program blockchain program sends      adopt readability distinguish variable associate variable meaning significance simply variable cryptography abstraction cryptography abstraction ideal program ideal program define correctness security requirement attain specification assume existence fully trust later protocol smart contract securely emulate ideal program mention earlier ideal program combine wrapper endow execution semantics overview hawk realizes specification private ledger currency transfer hawk relies existence private ledger private currency transfer therefore define ideal functionality IdealPcash describes requirement private ledger informally earlier zerocash realize approximation ideal functionality although technically ought interpret caveat earlier  security instead DC simulation security hawk specific primitive private ledger specify define hawk specific primitive freeze compute finalize essential enable transactional privacy programmability simultaneously private cash specification IdealPcash IdealPcash specifies requirement private ledger currency transfer adopt mint pour terminology zerocash mint mint operation allows user transfer public ledger denote ledger private pool denote coin transfer private coin user associate val correctness ideal program IdealPcash user sufficient fund public ledger ledger private coin pour pour operation allows user private privately simplicity define input coin output coin sufficient user transfer amount although straightforward efficient batch operation correctness ideal program IdealPcash input coin indeed posse private coin declare input coin sum output coin coin neither vanish privacy honest mint ideal adversary learns val mint coin public pool private pool operation public pool observable honest pours however adversary learns output pseudonym coin private pool coin spent spender therefore spent coin anonymous respect private pool coin anonymity pseudonym generate pour stress pour hide sender transaction graph prevent link analysis corrupt recipient pour adversary additionally learns coin receives additional subtlety later protocol honest wallet coin whenever honest pours appropriate coin exists local wallet immediately remove coin wallet without delay honest multiple pour transaction distinct coin pour transaction therefore IdealPcash functionality honest  coin immediately remove coin honest coin paid contrast corrupt coin paid due message rout immediately adversary adversary permutation message blockchain II appendix another subtlety IdealPcash functionality honest pour exist pseudonym functionality allows adversary pour non exist pseudonym denote effectively private coin blackhole cannot retrieve enables performance optimization   protocol later avoid cti NIZK  IV malicious  chooses compute cti recipient pour pour hawk specification IdealPhawk enable transactional privacy programmability simultaneously specification hawk primitive freeze compute finalize formal specification ideal program IdealPhawk explanation refer reader explanation freeze freeze IdealPhawk remove coin private coin pool coin freeze blockchain  private input denote  IdealPhawk freeze earlier coin val exists coin proceed freeze compute compute private input frozen coin val disclose manager PM finalize finalize manager PM submits public input IdealPhawk IdealPhawk computes outcome ϕpriv input frozen coin redistributes  outcome ϕpriv ensure conservation ideal program IdealPhawk sum frozen coin sum output coin interaction public contract IdealPhawk functionality parameterized public hawk contract ϕpub IdealPhawk sub module finalize IdealPhawk ϕpub public contract ϕpub typically serf purpose formedness manager input financial derivative application VI public contract ϕpub asserts input corresponds price stock report stock exchange authentic data redistribute public deposit manager aborted invalid input minimum bet public contract ϕpub redistribute public deposit ensure financial fairness scissors VI private contract ϕpriv frozen minimal bet ϕpriv information ϕpub public deposit others definition ideal  notation  denotes frozen coin contract coin denotes global private coin pool define IdealPcash ini vali denotes input data frozen coin security privacy requirement IdealPhawk specifies privacy guarantee honest freeze bid adversary amount frozen however adversary pseudonym leak pseudonym hurt privacy simply pseudonym pour pseudonym immediately freeze honest compute manager PM input frozen coin however public contractual anything unless manager voluntarily discloses information finally finalize operation output declassify public empty declassify information public ideal program IdealPhawk satisfies input independent privacy authenticity dishonest manager satisfies posterior privacy manager voluntarily disclose information intuitive explanation security privacy timing abort ideal program IdealPhawk freeze operation compute operation user  coin ideal program IdealPhawk treat ini vali user essentially forfeit frozen coin managerial abort handle inside IdealPhawk public portion contract simplify assumption clarity version IdealPhawk strip version implementation specifically IdealPhawk protocol realize refund frozen coin upon managerial abort mention IV extend protocol refund simplify assumption IdealPhawk assumes pseudonym participate contract timeouts cod program easily relaxed mention IV IV cryptographic protocol protocol broken private cash implement transfer user hawk specific bind transactional privacy programmable logic formal protocol description explain intuition warmup private cash transfer construction adopts zerocash protocol implement private cash private currency transfer completeness brief explanation mainly focus pour operation technically blockchain program  maintains coin private coin private coin format coin comms val sourcewhere denotes pseudonym coin commits coin val randomness  construction trust setup phase generates NIZK reference notational convenience omit explicitly construction merkle MT blockchain compute omit protocol notational simplicity protocol wrapper invokes  whenever creates pseudonym pour operation spender chooses coin coin denote coin coin   vali pour operation val val amount output pseudonym denote respectively val val val val spender chooses randomness computes output coin  comms val source spender val recipient coin later spender computes zero knowledge proof output coin construct appropriately correctness compass aspect existence coin spent coin spent coin coin indeed private pool coin remark zero knowledge allows spender hide coin spending transactional privacy efficiently  maintains merkle MT private pool coin membership demonstrate merkle consistent hash zero knowledge spending coin coin cryptographically unique serial compute pseudorandom function secret coin pour coin serial disclose zero knowledge proof correctness  twice conservation zero knowledge proof  input coin output coin remark security scheme intuitively honest pours honest adversary output coin assume commitment scheme comm hiding NIZK scheme employ computational zero knowledge adversary  output coin however remark earlier  leak adversary okay essentially linkability ensure transactional privacy   construction corrupt pours honest adversary opening coin cannot coin coin transaction  cannot demonstrate knowledge secret stress contract bind owner  coin owner opening coin disclose technical subtlety  modify version zerocash achieve security simulation paradigm comparison zerocash adopts strictly weaker  privacy notion ledger  multi protocol  security notion strictly weaker simulation security ledger  notion adopt zerocash subtly questionable upon scrutiny elaborate online version imply zerocash construction necessarily insecure however obvious scheme secure simulation paradigm binding privacy programmable logic  zerocash transfer user transactional privacy programmable logic  freeze operation freeze directly user commits accompany private input smart contract pour protocol user chooses private coin coin coin coin comms val secret computes serial coin disclose freeze operation prevent spending user computes commitment val contract denotes input symmetric encryption introduce due practical optimization explain later user zero knowledge proof attest statement pour operation spent coin exists pool coin correctly construct val commit contract coin spent  detail NP statement proven compute computation chain compute payout distribution val proof correctness hawk rely minimally trust manager PM perform computation input manager PM encrypt opening manager public enc PM epk val source ciphertext submit smart contract along appropriate zero knowledge proof correctness user directly opening manager chain passing ciphertext smart contract abort evident contract financially punish abort user obtain opening manager computes payout distribution val public output apply private contract ϕpriv manager construct zero knowledge proof attest outcome finalize manager submits outcome ϕpriv zero knowledge proof correctness   verifies proof redistributes frozen accordingly  manager public input  public output public hawk contract ϕpub public contract ϕpub invoked validity manager input redistribute public collateral deposit theorem assume hash function merkle collision resistant commitment scheme comm perfectly binding computationally hiding NIZK scheme computationally zero knowledge simulation extractable encryption scheme enc senc perfectly semantically secure prf scheme prf secure protocol securely emulates ideal functionality IdealPhawk malicious adversary static corruption model proof defer online version extension discussion refund frozen coin user implementation extend scheme user reclaim frozen timeout achieve user simply sends contract newly construct coin coin comms val prof zero knowledge val frozen coin user identify previously frozen coin compute zero knowledge proof membership within frozen pool pour transaction instantiate manager trust hardware application instantiate manager trust hardware emerge intel sgx chain computation secret sgx enclave visible untrusted software user alternatively principle manager role split jointly secure computation protocol although approach likely incur overhead stress model fundamentally trust centralize node trust hardware cannot replacement blockchain chain protocol interact blockchain cannot financial fairness presence abort trust hardware employ furthermore sgx obviate cryptographic protocol sgx trust subset private contact globally user benefit efficiency sgx manage private contract utilize widely trust underlie currency pour anonymously pseudonym formalism IdealPcash pour operation discloses recipient pseudonym adversary IdealPcash retains privacy recipient generates pseudonym comparison zero cash option anonymously spending pseudonym IdealPcash reveal recipient pseudonym adversary straightforward feature hawk constant factor blowup performance however application payment invoice transfer subsequent interaction recipient sender enrollment pseudonym formalism pseudonym hardcoded priori easily relax enrollment pseudonym contract auction implementation enrollment due snark preprocessing contract instance declare upperbound participant enrollment fee potentially adopt prevent dos attack attacker contract pseudonym prevent legitimate user fee amount achieve incentive compatibility research challenge priori upper bound participant avoid adopt recursively composable snarks alternative proof circuit dependent setup adopt snarks UC protocol practical optimization snarks UC protocol succinct non interactive  knowledge succinct proof computation task implement snarks instantiate NIZK proof protocol unfortunately snark security weak directly employ UC protocol specifically snark knowledge extractor non blackbox cannot UC simulator extract witness statement adversary environment extractor aware environment algorithm inherently incompatible UC security UC protocol  simulation extractability although snarks satisfy simulation extractability apply efficient snark transformation construct simulation extractable proof snarks implementation adopt efficient snark transformation propose practical consideration efficient snark circuit snark prover performance mainly multiplication gate algebraic circuit proven achieve efficiency optimize circuit cryptographic primitive snark friendly efficiently realizable arithmetic circuit specific snark parametrization building customize circuit generator snark friendly implementation instead rely compiler translate implementation cryptographic building collision resistant hash function merkle pseudorandom function commitment encryption implementation security instantiate crh efficiently  snark friendly collision resistant hash function ben implementation modulus underlie snark implementation prime dimension security security analysis PRFs commitment optimize implementation sha furthermore adopt snark friendly primitive encryption efficient circuit hybrid encryption security propose circuit performs public operation prime subgroup galois extension  underlie snark prime typically prime prime subgroup prime originally inspire  coin circuit applies lightweight cipher   lts perform symmetric encryption cbc mode standard aes instead security public operation intensive factorization suitable parameter therefore manually optimize rsa  encryption circuit instead illustrate snark friendly implementation saving circuit security naive straightforward implementation illustrate performance practical security optimization finalize addition snark friendly optimization focus optimize finalize circuit performance bottleneck snark proof scheme circuit observation greatly improve performance proof generation finalize optimization minimize SSE secure  proof simulator extract witness corrupt manager submits proof finalize operation witness extract simulator therefore employ ordinary snark instead simulation extractable NIZK finalize freeze compute NIZK optimization reduces snark circuit infer VI snark friendly optimization apply optimization minimize public encryption snarks finalize manager encrypts output coin ciphertext cti ciphertexts cti submit contract along appropriate snark proof correctness public encryption employ generate cti relatively snark circuit instead rely symmetric encryption scheme denote senc manager perform exchange establish symmetric compute user encrypts manager public PM epk encrypt consistent commit earlier cmi snark proof finalize commitment symmetric encryption instead public encryption circuit latter expensive optimization additionally gain factor VI apply previous optimization overall optimization gain finalize circuit remark reference snark scheme generation reference CRS pre processing reference consists evaluation prover verification verifier unless employ recursively compose snarks significantly evaluation circuit dependent proportional circuit comparison verification depends input output independent circuit stress verification portion CRS public contract blockchain remark CRS protocol  globally generate setup comparison CRS hawk contract hawk contract therefore exists per instance hawk contract minimize trust CRS generation employ trust hardware secure multi computation technique described ben finally future primitive become sufficiently replace snarks  per circuit preprocessing recursively compose snarks efficient pcp construction community effort optimize construction underway compiler overview circuit augmentation finalize VI implementation evaluation compiler implementation compiler consists illustrate preprocessing input hawk program split public contract private contract component public contract  code execute directly atop ordinary cryptocurrency platform ethereum private contract subset input  arithmetic circuit compiler keywords  implement preprocessors macro define input inp output  datatypes currently private contract inherits limitation  compiler cannot dynamic loop future relax limitation employ recursively composition snarks circuit augmentation compile preprocessed private contract code  arithmetic circuit input output relation ϕpriv becomes subcomponent arithmetic circuit assemble customize circuit assembly parameterized input output datatypes attache cryptographic constraint compute commitment encryption output assert input output satisfy balance cryptographic protocol finally augment arithmetic circuit input zksnark library  avoid implement snark verification ethereum  snark verification opcode ethereum stack machine finally compile executable program compute  proof accord protocol additional besides seal bid auction implement hawk demonstrate various capability crowdfunding  style crowdfunding campaign assurance contract economics literature overcomes rider contribute fund towards social minimum donation target deadline donation transfer designate entrepreneur otherwise donation refund hawk preserve privacy donation pledge private deadline contract fails manager learns amount donation insufficient privacy conceivably positive willingness entrepreneur launch  campaign likelihood performance snark circuit user circuit pour freeze compute application mul denotes multiple core denotes core mint operation involve snarks compute within microsecond proof additional cryptographic snark transformation scissors player lottery naturally generalize player version hawk implementation notion financial fairness security privacy guarantee manager cheat abort remain honest maximum amount otherwise furthermore beyond prior conceal player pseudonym winner everyone manager swap financial individual risky investment portfolio bitcoins hedge risk purchasing insurance effectively bet price bitcoin another individual implement swap price stock future date report trust authority specify public contract determines receives payout private contract ensures privacy detail agreement price threshold outcome hawk program online version performance evaluation evaluate performance various amazon EC xlarge virtual machine assume maximum leaf merkle security benchmark actually consume 7GB memory core expensive II illustrate focus evaluate snark performance computation negligible comparison highlight important observation gain snark friendly implementation user circuit pour freeze compute security II performance snark circuit manager circuit finalize application manager circuit security mul denotes multiple core denotes core II performance snark circuit manager circuit finalize application manager circuit security mul denotes multiple core denotes core chain computation dominate snark verification millisecond verification algorithm linearly dependent public statement computation verification gain optimization finalize auction circuit bidder opt opt practical optimization detailed gain optimization finalize auction circuit bidder opt opt practical optimization detailed chain public parameter mention IV entire snark reference CRS blockchain verification CRS chain implementation suggests private cash protocol verification KB chain verification globally instance besides globally public parameter hawk contract additionally KB verification chain user per contract verification circuit dependent depends contract program refer reader IV discussion technique perform trust setup manager computation private auction funding protocol participant min proof manager core min core translates EC user computation user proof pour freeze compute independent additionally peak memory usage user GB saving protocol optimization illustrates performance gain attain snark friendly implementation user circuit pour freeze compute naive implementation security calculate naive implementation conservative estimate straightforward implementation standard cryptographic primitive gain naive implementation furthermore illustrates performance gain attain protocol optimization described considers seal bid auction finalize circuit bidder snark friendly implementation along optimization combine significantly reduce snark circuit achieve gain relative straightforward implementation illustrates manager proportional participant contrast user independent participant vii additional theoretical additional theoretical  illustrate usefulness formal chain model defer detail online version finding mpc public deposit generic blockchain model understood fairness impossible model multi computation majority corrupt  later extend subsequent assume blockchain trust correctness availability privacy notion fairness refer financial fairness attain recent blockchain financially penalize abort  deposit earlier focus protocol retrofit artifact bitcoin limited script specifically bitcoin script construct intermediate abstraction refund multi lock atop abstraction construct protocol vii assume generic blockchain model blockchain turing program improve efficiency financially mpc protocol additional theoretical mpc public deposit assumes FF securely compute output reveal collateral assume abort honest currency mpc private deposit illustrate perform financially mpc private deposit amount deposit cannot public formal definition construction proof online version