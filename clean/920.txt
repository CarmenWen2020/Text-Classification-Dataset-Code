coin digital currency widespread adoption payment conduct pseudonym coin cannot privacy guarantee payment transaction public decentralize ledger information deduce zero coin tackle privacy issue  transaction payment origin reveals payment destination amount limited functionality construct fledge ledger digital currency privacy guarantee leverage recent advance zero knowledge succinct non interactive argument knowledge snarks formulate construct decentralize anonymous payment scheme DAP scheme DAP scheme enables user directly privately correspond transaction hide payment origin destination transfer amount formal definition proof construction security zero cash practical instantiation DAP scheme construction zero cash transaction verify magnitude efficient anonymous zero coin competitive coin introduction bitcoin digital currency achieve widespread adoption currency  unlike traditional cash scheme trust instead appoint central bitcoin leverage distribute ledger chain transaction user chain massively replicate mutually  peer information contains public user employ identity pseudonym enhance privacy increase research anyone anonymize bitcoin information chain structure transaction graph date transaction bitcoin fails  privacy traditional payment alone robust privacy anonymous cash scheme bitcoin anonymous sufficient motivation obfuscate transaction laundry  allows user entrust coin pool central interval retrieve coin pool suffer limitation delay reclaim coin coin mixed trace coin steal coin user something hide risk acceptable typical legitimate user spending habit private peer risk averse expend continual effort privacy sufficiently aware compromise privacy privacy user risk importantly automatic guarantee data reveal spending habit account balance publicly accessible worker merchant anonymous transaction guarantee coin independent ensure legitimate user coin remain  zerocoin decentralize propose zerocoin extends bitcoin anonymity guarantee cash protocol zerocoin employ zero knowledge proof prevent transaction graph analysis unlike earlier practical cash protocol however zerocoin rely digital signature validate coin central prevent spending instead zerocoin authenticates coin zero knowledge belong public valid coin maintain chain fledge anonymous currency zerocoin decentralize user periodically bitcoins via zerocoin protocol routine transaction conduct via bitcoin due review performance redeem zerocoins discrete logarithm proof knowledge exceeds verify security proof broadcast network verify node permanently ledger entail magnitude bitcoin seriously tax bitcoin network operating normal functionality zerocoin constitutes cash scheme lack critical feature fledge anonymous payment zerocoin coin fix denomination payment transaction coin zerocoin mechanism user another directly zerocoins zerocoin anonymity  payment transaction origin address hide amount metadata transaction network contribution address aforementioned issue via contribution introduce notion decentralize anonymous payment scheme formally capture functionality security guarantee fledge decentralize electronic currency anonymity guarantee construction primitive security specific cryptographic assumption construction leverage recent advance zero knowledge proof specifically zero knowledge succinct non interactive  knowledge snarks achieve implementation primitive via zerocash zerocoin security reduces transaction spending coin reduces transaction verification allows anonymous transaction variable amount hide transaction amount coin user allows payment directly user fix address without user interaction validate performance establish feasibility conduct network node approximately unique IPs bitcoin network node reachable inspires confidence zerocash deployed fork bitcoin due significantly improve functionality performance zerocash entirely replace traditional bitcoin payment anonymous alternative concurrent snarks bitcoin author bitcoin concurrent snarks reduce proof verification zerocoin IX comparison snarks sketch technical definition snark II detail snark non interactive zero knowledge proof knowledge succinct proof easy verify precisely NP nondeterministic decision circuit instance snark verify membership instance input trust conduct setup phase public verification enables untrusted prover proof attest instance choice non interactive proof zero knowledge proof knowledge anyone verification verify proof snark proof publicly verifiable anyone verify without interact prover generate succinctness security constant verify linear linear decentralize anonymous payment scheme construct decentralize anonymous payment DAP scheme decentralize cash scheme allows anonymous payment amount formal definition outline construction incremental construction detail IV construction function ledger currency bitcoin unique valid snapshot currency ledger available user ledger sequence transaction append transaction underlie currency transaction transaction introduce construction concreteness focus discussion bitcoin later definition construction abstractly assume familiarity bitcoin zerocoin user anonymity fix coin simplify construction coin btc construction zerocoin protocol hide payment origin snarks recall commitment scheme comm denote statistically hiding non interactive commitment scheme randomness message commitment  subsequently reveal verify  simplify construction coin mint user sample random serial trapdoor computes coin commitment comm correspond mint transaction  ledger  append ledger paid btc backing escrow pool btc paid via plaintext information encode mint mint transaction certificate deposit derive backing pool subsequently CM denote coin commitment ledger transaction contains coin serial snark proof NP statement comm  coin commitment assume already ledger transaction redeem deposit amount btc transfer someone immediately deposit coin already ledger spending transaction discard user anonymity achieve proof zero knowledge reveal information numerous commitment CM corresponds transaction  equivalent invert  assume infeasible origin payment anonymous compress coin commitment statement CM specify explicitly coin commitment naive representation severely limit scalability complexity protocol algorithm proof verification algorithm grows linearly  moreover coin commitment correspond already spent coin cannot CM reduce cannot identify due zero knowledge anonymity rely collision resistant hash function crh avoid explicit representation CM maintain efficiently updatable append crh merkle   denote  update account insertion leaf proportional depth hence complexity reduce linear CM logarithmic modify statement  leaf crh merkle naive data structure CM modification increase exponentially CM snark implementation concretely depth zerocash coin extend coin anonymous payment coin commitment coin commitment coin serial however creates transfer another user indeed suppose user sends another user spending anonymous spent recognize risky immediately mint coin transfer btc unwieldy transfer anonymous amount transfer leak transfer amount multiple btc fix coin simplify construction described inadequate payment scheme address modify derivation coin commitment pseudorandom function target payment derive serial pseudorandom function derive denote    assume  moreover collision resistant target payment address user generates address  coin apk spent knowledge apk sample random apk   user generate address mint functionality mint coin desire user sample secret determines coin serial  commits tuple apk phase computes  apk random computes comms random mint coin apk mint transaction mint crucially due nest commitment anyone verify mint coin commitment coin comms cannot discern owner address apk serial derive hidden mint accepted ledger deposit amount btc coin spent pour operation input coin consume pours output coin output coin input coin suppose address  dsk consume coin   coin cnew cnew   respectively target address public   address   belong user user proceeds sample serial randomness  computes     random  computes     random  yield coin  cnew     snew  snark proof  NP statement pour pour transaction     append ledger transaction reject serial previous transaction suppose address secret  associate public  cannot cnew cannot  witness subsequent pour operation furthermore user  cnew user cannot information reveal serial    pour reveals information consume coin coin coin commitment corresponds consume coin address public coin target payment conduct anonymity generally user pour coin  coin simplicity   without loss generality indeed  user mint coin null input  user discard coin  user compose logn  input output pours coin suppose  address public actually coin cnew somehow secret cnew private message requisite private communication channel necessitates additional infrastructure assumption avoid channel instead capability directly construction leverage ledger modify structure address user    apk pkenc  skenc apk generate addition pkenc skenc private encryption scheme computes ciphertext encryption plaintext    snew  address public  pour transaction pour user decrypt message  scan pour transaction public ledger  leak neither paid amount target address due private encryption scheme user cnew correspond ciphertext  public output construction allows user mint merge split coin user redeem coin convert currency bitcoin modify pour operation public output spending coin user specifies nonnegative  arbitrary info balance equation NP statement pour accordingly  input  publicly declare target specify somehow info info specify destination redeem fund bitcoin wallet public  info pour transaction pour public output optional user  non malleability prevent malleability attack pour transaction pour  target public output pour modify info modify NP statement pour digital signature specifically pour operation user sample   signature scheme computes  crh  computes  dsk   dsk  MACs  address secret modifies pour  latter compute correctly  associate pour operation obtain signature along  pour  secret probability  pour transaction unpredictable moreover signature statement bind outline construction summarize conclude due snark construction trust setup public parameter trust affect soundness proof anonymity setup corrupt malicious zerocash outline zerocash concrete implementation security DAP scheme construction detail zerocash entail carefully instantiate cryptographic ingredient construction ensure snark heaviest component efficient construction snark verify specific NP statement pour snarks asymptotically efficient concrete efficiency depends arithmetic circuit NP statement seek instantiation relatively arithmetic circuit  verify NP statement pour approach instantiate cryptographic ingredient commitment scheme pseudorandom function collision resistant hash sha optimize circuit verify sha computation precisely compression function suffices purpose circuit construct  verifies satisfy NP statement  illustration crh merkle  coin commitment coin illustration structure coin commitment illustration structure coin serial illustration crh merkle  coin commitment coin illustration structure coin commitment illustration structure coin serial along judicious parameter choice implementation snark arithmetic circuit II snark prover snark verifier millisecond allows DAP scheme implementation practical deployment zerocash integrate bitcoin fork commonly refer altcoins later organization remainder organize II background snarks define DAP scheme construction thereof IV discus concrete instantiation zerocash VI describes integration zerocash exist ledger currency vii microbenchmarks prototype implementation network simulation describes optimization discus concurrent IX summarize contribution future direction II background snarks cryptographic primitive succinct non interactive argument knowledge snark concretely publicly verifiable preprocessing zero knowledge snark snark background snarks informal definition recall construction implementation informal definition informally define snarks arithmetic circuit satisfiability refer reader formal definition arithmetic circuit input gate output naturally associate circuit function computes model nondeterminism circuit input auxiliary input witness circuit bilinear gate arithmetic circuit satisfiability define analogously boolean definition arithmetic circuit satisfiability arithmetic circuit capture relation RC LC publicly verifiable preprocessing snark arithmetic circuit satisfiability triple polynomial algorithm keygen verify keygen input security parameter unary arithmetic circuit generator keygen probabilistically sample verification publish public parameter verify membership LC input RC prover output non interactive proof statement LC verify input verification input proof verifier verify output convince cal snark satisfies completeness security parameter lambda BBF arithmetic circuit cal honest prover convince verifier namely probability negl lambda leftarrow keygen lambda leftarrow leftarrow verify succinctness honestly generate proof lambda verify lambda vert vert lambda hide fix polynomial factor lambda proof knowledge soundness verifier accepts proof output bound prover prover witness instance soundness bound provers namely poly lambda adversary cal poly lambda extractor cal verify cal probability negl lambda leftarrow keygen lambda leftarrow cal leftarrow cal perfect zero knowledge honestly generate proof perfect zero knowledge namely poly lambda simulator sim stateful poly lambda distinguishers probability probability cal honest proof matrix epsilon cal vert leftarrow keygen cal vert leftarrow cal vert leftarrow source probability simulated proof matrix epsilon cal vert trap leftarrow sim cal vert leftarrow cal vert leftarrow sim trap SourceRight click MathML additional feature construction security snark construction literature interested snarks arithmetic circuit satisfiability efficient quadratic arithmetic program construction linear keygen  linear verify security snarks knowledge exponent assumption variant diffie hellman assumption bilinear knowledge exponent assumption fairly evidence assumption inherent construct snarks snark implementation publish implementation snarks implementation snarks program data dependency ben implementation snarks arbitrary program data dependency ben implementation snarks program modify code runtime code generation implementation reduces program allows universal achieves snarks arithmetic circuit satisfiability towards respective effort interested snark arithmetic circuit satisfiability rely implementation snark implementation protocol refer interested reader detail protocol intuition proof security implementation performance concrete parameter implementation security BBF prime definition decentralize anonymous payment scheme introduce notion decentralize anonymous payment scheme DAP scheme extend notion decentralize cash later IV construction data structure intuition data structure DAP scheme algorithm data structure introduce  ledger protocol apply  currency bitcoin generality refer currency  user access ledger sequence transaction ledger append prime implies prefix prime transaction ledger  transaction transaction described public parameter public parameter available user generate trust algorithm address user generates address addr addr public addr publish enables others payment user secret addr payment addr user generate address coin coin data associate  commitment denote ledger mint coin denote denomination  integer maximum parameter coin serial denote unique associate prevent spending coin address denote addr address public quantity associate coin various trapdoors implementation detail transaction besides  transaction transaction mint transaction mint transaction mint tuple ast coin commitment coin ast denotes implementation dependent information transaction mint coin coin commitment mint pour transaction pour transaction pour tuple info ast merkle coin serial coin commitment coin info arbitrary ast denotes implementation dependent information transaction pour input consume coin circ respective serial circ output coin respective coin commitment public output zero furthermore pour information info information recipient  transaction merkle coin commitment commitment mint coin serial spent coin CM denotes coin commitment mint pour transaction SN denotes serial pour transaction deduce convenient separately maintain due efficiency merkle commitment denotes merkle CM cal moreover function authentication coin commitment CM convenience assume prime prime leq merkle algorithm DAP scheme II tuple polynomial algorithm setup  mint pour verify transaction syntax semantics setup algorithm setup generates public parameter algorithm algorithm setup execute trust public parameter publish available embed protocol implementation setup afterwards trust global secret trapdoors payment address algorithm  generates address algorithm user generates address addr addr coin public addr publish secret addr redeem coin addr user generate address interaction mint coin algorithm mint generates coin mint transaction algorithm parameter max cap coin output coin coin address addr output mint transaction min ast coin commitment pour coin pour algorithm transfer input coin output coin input coin consume moreover input publicly reveal pour allows user subdivide coin denomination merge coin transfer ownership anonymous coin public payment algorithm pour algorithm input distinct input coin along correspond address secret addr redeem input coin ensure previously mint pour algorithm input merkle allegedly merkle coin commitment along authentication coin commitment input specify anonymous coin generate input address public addr addr specify recipient  specifies amount publicly spent redeem coin transaction fee sum output pub sum input coin cannot exceed finally pour algorithm receives arbitrary info bound output pour transaction pour pour algorithm output coin pour transaction pour transaction pour pub info ast coin commitment output coin ast denotes implementation dependent information crucially  reveals currency public  zero reveal payment address coin verify transaction algorithm  validity transaction mint pour transaction verify transaction verify node distribute maintain ledger user rely transaction coin algorithm scan ledger retrieves unspent coin paid user address algorithm user address addr addr payment addr algorithm scan ledger payment addr ledger output correspond coin serial ledger coin spent mint coin pour algorithm detect coin paid addr via pour algorithm detect coin mint user completeness security completeness completeness DAP scheme unspent coin spent precisely ledger sampler output ledger coin coin commitment valid transaction serial spent pour namely pour pour transaction verify transaction accepts coin intend recipient moreover correctly intend  transaction info formalize via incompleteness  definition DAP scheme setup  mint pour verify transaction polynomial ledger sampler  negligible probability security security DAP scheme characterize ledger  transaction non malleability balance definition DAP scheme setup  mint pour  secure satisfies ledger  transaction non malleability balance informal overview defer formal definition extend version formalize adversary cal challenger behavior honest realize via DAP scheme oracle cal DAP maintains ledger interface execute  mint pour algorithm honest elicit behavior honest cal query sanity proxy query cal DAP query request honest perform action cal specifies identity previous transaction input learns transaction secret trapdoors involve transaction oracle cal DAP insert query allows cal directly  transaction ledger ledger  capture requirement ledger reveals information adversary beyond publicly reveal information mint coin public information transaction etc adversary adaptively induce honest perform DAP operation choice bound adversary cal distinguish ledger construct query DAP scheme oracle query oracle publicly consistent identical publicly reveal information information related address ledger  formalize ind proceeds challenger sample random initializes DAP scheme oracle cal DA cal DA maintain ledger throughout challenger allows cal issue query cal DA cal DA behavior honest challenger adversary ledger randomize  adversary goal distinguish corresponds adversary issue query query query  address generate oracle mint pour prime insert query query prime  adversary query restrict maintain public consistency ledger public pour query mint amount mint query conclusion output prime prime ledger  cal ind probability negligibly transaction non malleability bound adversary cal alter data within valid pour transaction pour transaction non malleability prevents malicious attacker modify others transaction ledger retargeting  public output pour transaction transaction non malleability formalize TR NM cal adaptively interacts DAP scheme oracle cal DAP output pour transaction cal denote pour transaction return cal DAP denote ledger cal exists cal ast neq reveals serial valid respect ledger prime transaction precede cal txt manages modify previous pour transaction coin transaction non malleability cal TR NM negligible probability cal valid pour transaction unrelated cal ast reveals serial previously spent coin capture non malleability balance bound adversary cal mint via payment others balance formalize bal cal adaptively interacts DAP scheme oracle cal DAP output coin address return  query address honest user cal spent coin  public output cal cup  rightarrow AD DR vert AD DR rightarrow cup  unspent coin  public output cal ledger vert cal mint transaction AD DR rightarrow payment address rightarrow AD DR payment cal address balance bal negligible probability IV construction decentralize anonymous payment scheme construct DAP scheme introduce snarks building later concrete instantiation construction cryptographic building introduce notation standard cryptographic building assume familiarity definition building detail throughout lambda denotes security parameter collision resistant hash collision resistant hash function crh ast rightarrow lambda pseudorandom function pseudorandom function prf prf ast rightarrow lambda denotes prf derive non overlap pseudorandom function chosen arbitrarily  prf vert prf prf vert prf prf vert furthermore assume  collision resistant infeasible neq prime prime PR PR prime statistically hiding commitment commitment scheme comm binding computationally hiding statistically denote comm ast rightarrow lambda denotes commitment trapdoor namely reveal commitment suffices trapdoor OMM strongly unforgeable digital signature digital signature scheme sig cal vert cal vert vert cal cal lambda rightarrow security parameter lambda unary cal sig sample public parameter encryption scheme cal cdot rightarrow public parameter cal sig sample public secret user sig rightarrow sigma secret message obtain signature sigma cal sigma rightarrow public sig message signature sigma cal sig output signature sigma valid message output signature scheme sig satisfies security unforgeability chosen message attack   security private public encryption public encryption scheme enc cal cal cal cal cal lambda rightarrow security parameter lambda unary cal  sample public parameter encryption scheme cal rightarrow public parameter cal sample public secret user cal rightarrow public message cal encrypts obtain ciphertext cal rightarrow secret ciphertext decrypts message perp decryption fails encryption scheme enc satisfies security ciphertext  chosen ciphertext attack ind GGA security  chosen ciphertext attack IK cca security standard informally IK cca ciphertexts cannot link public encrypt ciphertexts encrypt public definition refer reader snarks pour coin outline construction invokes snark specific NP statement pour define recall context motivate pour user pours coin coin correspond pour transaction info ast SourceRight click MathML additional feature generate construction evidence various respect pour operation concretely pour demonstrate coin commitment somewhere ledger reveal serial circ circ reveal coin commitment balance preserve construction achieves snark proof pour statement pour invariant others non malleability statement pour concretely NP statement pour define instance vec instance vec specifies crh merkle commitment serial consume coin coin commitment coin public non malleability witness vec  rho addr rho SourceRight click MathML additional feature vec  addr enc addr addr enc SourceRight click MathML additional feature witness vec alpha specifies authentication coin commitment entirety coin information coin address secret coin pour instance vec witness vec valid vec coin commitment ledger valid authentication leaf respect crh merkle address secret address public circ prf circ serial compute correctly circ prf circ vert rho circ coin com circ com circ vert rho vert coin CO com dot vert rho vert address secret dot vert prf circ circ circ geq circ circ leq recall snarks relative arithmetic circuit satisfiability II express pour via arithmetic circuit denote PO UR depth merkle hardcoded pour parameter construction maximum coin varpi algorithm construction proceed construction DAP scheme setup  mint pour verify transaction intuition pseudocode algorithm building introduce IV IV construction  quantity balance preserve pub maximum coin max depth merkle construction DAP scheme snarks ingredient construction DAP scheme snarks ingredient completeness security theorem construction indeed DAP scheme theorem IV tuple   res mint pour verify transaction define IV definition secure definition DAP scheme proof theorem IV extend version construction modify yield statistical  anonymity discussion extension version remark trust setup security relies trust setup generate public parameter trust transaction non malleability balance ledger  powerful  agency corrupt setup anonymity maintain moreover mitigate trust requirement conduct computation setup secure multiparty computation technique future zerocash concrete instantiation DAP scheme instantiation basis zerocash later VI discus zerocash integrate exist ledger currency instantiation building instantiate DAP scheme construction IV aim security concrete choice described crh prf comm sha cal sha compression function input output mostly rely cal hash suffices fix input simplifies construction PO UR instantiate crh RF com via cal suitable assumption cal instantiate collision resistant hash function crh cal function compress construct binary merkle instantiate pseudorandom function prf cal vert input derive function  cal vert overline vert prf cal vert vert PR overline cal vert vert commitment scheme comm  comm vert rho comm vert source due instantiation prf rho compute com vert rho cal vert cal vert rho cdot denotes truncate significant implementation heuristically distribution induced cal vert uniform basis statistically hiding compute coin integer implementation compute comm vert cal vert vert noticeably ignore commitment randomness already output statistically hiding commitment randomness commitment scheme instantiate statement pour choice imply concrete instantiation statement pour IV specifically implementation pour authentication leaf respect crh merkle circ cal cal circ vert cal circ vert rho circ vert vert circ  cal cal vert cal vert rho vert vert cal vert vert vert vert moreover pour pub geq circ circ finally mention PO UR define fix merkle depth implementation fix coin instantiate sig signature scheme sig ECDSA retain consistency compatibility exist bitcoind source code however standard ECDSA malleable verify valid signature non malleable variant restrict aware formal  cma proof variant consistent proposal resolve bitcoin transaction malleability instantiate enc encryption scheme enc private elliptic curve integrate encryption scheme  standardize private encryption scheme available implementation detail efficiently realize arithmetic circuit pour version VI integration exist ledger currency zerocash deployed atop ledger maintain central briefly detail integration bitcoin protocol unless explicitly otherwise refer bitcoin account bitcoin bitcoins underlie protocol software currency discussion modification fork bitcoin altcoins litecoin introduce transaction payment semantics zerocash compatibility bitcoin network zerocash integrate bitcoin actual currency software via flag super majority bitcoin miner simultaneously adopt software neither advise integration future zerocash altcoin integrate zerocash bitcoin consists transaction zerocash transaction modify protocol software invoke zerocash DAP interface verify transaction approach described discussion anonymizing network layer integration replace currency approach alter underlie monetary transaction zerocash invoke DAP interface reading associate transaction distribute ledger suffices core functionality payment mint merge splitting etc assure user transaction currency anonymous however drawback transaction incur generate snark proof script feature bitcoin lose bitcoin ability unconfirmed transaction lose integration hybrid currency approach extend bitcoin parallel anonymized currency zerocoins exist alongside coin ledger ability convert freely behavior functionality regular bitcoins unaltered functionality script approach bitcoin ledger consists bitcoin style transaction input output input pointer output previous transaction bitcoin zerocash pour transaction contributes public bitcoins transaction output  amount destination public address script bitcoin zerocash mint transaction consumes input bitcoins zerocoins invariant bitcoins maintain checked sum bitcoin input pours  sum bitcoin output mint difference transaction fee however accounting zerocoins consume separately implicitly DAP scheme additional anonymity consideration zerocash  transaction ledger network traffic announce transaction retrieve contact merchant leak identify information IP address user anonymity network safely zerocash obvious via tor zerocash transaction latency   viable anonymity vulnerable traffic analysis tor  email functionality benefit notification mechanism replacement additionally although theory user chain powerful attacker potentially fabricate additional solely target user spending coin respect update merkle poison pill uniquely identify target user mitigate attack user trust peer chain sensitive transaction coin relative ledger illusion multiple harder vii performance zerocash benchmarked performance snark NP statement pour vii DAP scheme algorithm vii impact verification via simulation bitcoin network vii performance snarks pour coin snark NP statement pour obtain construct arithmetic circuit PO UR verify pour invoke generic implementation snark arithmetic circuit satisfiability II arithmetic circuit PO UR built scratch optimize exploit nondeterministic verification characteristic report performance characteristic snark pour setting thread performance laptop machine thread multi thread performance desktop machine measurement average standard deviation performance zerocash algorithm report performance characteristic DAP scheme algorithm implementation maintain merkle responsibility algorithm moreover verify transaction separately report verify mint pour transaction latter exclude scan depends finally report pour transaction network simulation bitcoin mining typically dedicate gpus ASICs cpu resource execute DAP scheme algorithm minimal consequence network performance potential exception verify transaction algorithm network node routine transaction validation perform verification significant impact network performance zerocash implementation bitcoin zero cash transaction verify hop network potentially transaction verify verify consists proof validate transaction performance snark NP statement pour sigma leq zerocash transaction longer network zerocash transaction longer verify concerned issue potential impact issue concern zerocash transaction cannot spent onto ledger verify hop network delay verification propagation network node waste cpu cycle mining date reduce computational network easy attack dishonest majority miner distribute ledger priori unclear potential issue concern bitcoin cache transaction verification transaction already verify propagate network verify unknown percentage transaction actually node cache conduct simulation bitcoin network investigate zerocash transaction onto ledger establish zerocash transaction verification propagation zerocash transaction spent reasonably quickly increase validation minimal simulation zerocash bitcoin protocol cannot protocol bitcoin network dedicate testnet private testnet efficiency bitcoin node amount hardware issue reduce proof practical preserve realistic rate virtualized hardware variable performance overhead snark verification prevents bitcoin node virtualized server frequency model poisson lambda generate stochastically modify bitcoind fix difficulty trivial poisson simulation server trivially randomly node preserve distribution without computational overhead proof another poisson trigger mechanism introduces transaction random network node performance zerocash algorithm sigma leq differentiate transaction normal bitcoin expenditure zerocash pour transaction simulated zerocash transaction unique amount bitcoins arbitrarily btc transaction output preset verification cache modify bitcoin client insert delay simulate runtime verify transaction otherwise transaction specify bitcoin protocol amount simulated zerocash traffic transaction output amount minimizes code estimate generic impact verification delay specific implementation choice methodology recent research suggests bitcoin network contains distinct node likely longer participate approximately reachable node average connection randomly peer november peak transaction rate bitcoin slightly transaction per simulation node network node average peer transaction generate lambda duration variable percentage epsilon zerocash traffic faster instead generate bitcoin average lambda litecoin popular altcoin average metric function epsilon percentage transaction zerocash transaction latency undefined epsilon hence omit average metric function epsilon percentage transaction zerocash transaction latency undefined epsilon hence omit simulation traffic epsilon indicates percentage zerocash transaction epsilon simulation amazon EC purpose medium instance private network instance deploy instance bitcoind transaction trigger function simulation node random node transaction poisson model transaction generates delay node  sends transaction actual transaction rate skewed transaction rate shift away target per average plot metric epsilon average define data entire simulation epsilon multiple transaction  transaction latency interval transaction creation inclusion propagation flavor average node compute node average compute node verification average node verify verification cache effective marked increase verification propagation average approximately transaction delay transaction non cached zerocash transaction instead conclude cache effective negligible propagation likely network operation dominate transaction confirm hence  roughly generation rate bitcoin user spending transaction optimization extension extend version extension  anonymity batch merkle update faster propagation serial IX concurrent snarks reduce proof verification zerocoin differs functionality scalability protocol zerocoin fix coin decentralize instead define construct implement fledge decentralize electronic currency anonymous payment amount complexity snark generator prover verifier  coin arithmetic circuit computes explicitly coin coin mixed anonymity cannot instead construction respective complexity polylogarithmic polylogarithmic constant coin approach practically unbounded coin conclusion decentralize currency ensure user privacy peer conduct legitimate financial transaction zerocash privacy protection hiding user identity transaction amount account balance public however criticize hamper accountability regulation oversight zerocash limited enforce monetary invariant currency underlie snark cryptographic proof machinery flexible policy user paid due tax transaction without reveal transaction amount amount tax paid policy specify efficient nondeterministic computation NP statement principle enforce snarks zerocash enable privacy preserve verification enforcement compliance regulatory policy otherwise invasive directly bypass corrupt authority research policy engineering policy desirable practically realizable another research functionality realize augment capability already bitcoin script snarks verification expressive statement