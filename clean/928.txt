secure permissionless distribute ledger blockchain performs par centralize payment processor visa challenge task exist distribute ledger unable processing capacity validators compromise security decentralization omniledger novel distribute ledger preserve longterm security permissionless operation ensures security correctness bias resistant public randomness protocol statistically representative shard transaction introduce efficient shard commit protocol atomically handle transaction affect multiple shard omniledger optimizes performance via parallel intra shard transaction processing ledger prune via collectively latency trust verify validation transaction evaluation experimental prototype omniledger throughput linearly active validators visa workload beyond confirm typical transaction introduction scalability distribute ledger DLs transaction volume independent participant involve processing challenge mainstream adoption security decentralization challenge approach exhibit security performance offs replace nakamoto consensus PBFT increase throughput decrease transaction commit latency approach validators consensus member redundantly validate transaction hence transaction processing capacity increase participant gradually decrease due increase coordination overhead proven obvious approach building database capacity horizontally participant sharding partition multiple shard handle parallel subset participate validators sharding benefit DLs reduce transaction processing load validator increase processing capacity proportionally participant exist proposal sharded DLs however forfeit permissionless decentralization introduce security assumption performance security illustrate explore detail II IX introduce omniledger DL architecture transaction processing capacity competitive centralize payment processing visa without compromise security permissionless decentralization achieve goal omniledger correctness security challenge omniledger statistically representative validators periodically via permissionless sybil attack resistant foundation proof proof stake omniledger ensure negligible probability shard compromise across lifetime via periodically shard subset validators transaction sufficiently bias resistant omniledger correctly atomically handle shard transaction transaction affect ledger distinct shard offs DL representative validators via proof  byzcoin hybrid consensus slide recent proof miner validator efficient alternative apportion consensus membership directly invest stake omniledger ouroboros algorand public randomness cryptographic sortition protocol within prior validator subsequent validator stakeholder distribution define ledger ensure sample representative validators scalable strongly bias resistant omniledger randhound protocol serf purpose standard threshold assumption appropriate randhound basis omniledger address security challenge securely assign validators shard periodically rotate assignment validators evolves omniledger chooses shard analysis VI ensure negligible probability shard compromise across operation finally ensure transaction commit abort atomically affect distribute across multiple shard cryptocurrency account omniledger introduces atomix phase client driven lock unlock protocol ensures client fully commit transaction across shard obtain rejection proof abort unlock affected partially transaction besides address security challenge  introduces performance scalability refinement instrumental achieve usability goal omniledger consensus protocol byzcoinx enhances PBFT consensus byzcoin preserve performance byzantine denial service dos attack adopt robust communication offline miner ledger without entire omniledger adapts classic distribute checkpointing principle consistent periodically finally minimize transaction latency payment omniledger optional trust verify validation tier val  transaction quickly hence tier  correctness tier transaction ensures security approach ensures misbehavior within tier detect within strongly  recourse loss deposit client tier transaction maximum security tier transaction evaluate omniledger implement prototype commodity server core vms  experimental omniledger linearly validators yield throughput transaction per consensus latency widely distribute host malicious furthermore deploy omniledger trust verify validation throughput tps tier latency adversary finally bitcoin validator stale incurs bandwidth due summary contribution introduce DL architecture horizontal without compromise security permissionless decentralization introduce atomix atomic commit protocol commit transaction atomically across shard introduce byzcoinx bft consensus protocol increase performance robustness dos attack introduce deployed along  minimize storage update overhead introduce tier trust verify processing minimize latency transaction II background scalable byzantine consensus byzcoin omniledger byzantine consensus scheme byzcoin efficiently consensus member traditional consensus algorithm PBFT scalable byzcoin collective signing  scalable cryptographic primitive implement  byzcoin distributes multicast performance scalable topology fault tolerance although byzcoin consensus scalable processing capacity increase participation transaction processing utxo model distribute ledger derive blockchain sequence totally transaction omniledger adopts unspent transaction output utxo model ledger due simplicity parallelizability model output transaction UTXOs assign credit input completely exist UTXOs bootstrapping node crawl entire distribute ledger database valid UTXOs subsequently accepted utxo model introduce bitcoin widely adopt distribute ledger secure distribute randomness generation randhound scalable secure multi computation mpc protocol  decentralize randomness byzantine randhound assumes existence externally accountable client obtain provable randomness semi trustworthy server randomness randhound split server creates publicly verifiable commit reveal protocol employ pigeonhole principle random contribution honest participant perfectly randomize randhound output cryptographic sortition subset validators accord per validator function enable validators belong subset public private pki ski sortition implement verifiable random function vrf input return random hash proof ski proof enables anyone pki hash corresponds sybil resistant identity unlike permissioned blockchains validators permissionless blockchains potential sybil attack remain secure bitcoin proof pow validators aka miner valid perform expensive computation iterate nonce brute hash header zero bitcoin NG pow technique enable sybil resistant generation identity issue associate pow waste electricity  mining pool approach establish sybil resistant identity proof stake PoS proof pob proof  overcome pow compatible  identity blockchain omniledger prior sharded ledger elastico omniledger closely elastico previously explore sharding permissionless ledger elastico significant pow hash distribute miner shard setup shard PBFT consensus leader shard verifies signature creates global omniledger address challenge elastico leaf unsolved elastico relatively shard validators per shard yield failure probability per shard per adversary cannot safely relaxed pow shard failure probability epoch elastico shard selection strongly bias resistant miner selectively discard  bias elastico ensure transaction atomicity across shard fund shard lock forever another shard reject transaction fourth validators constantly switch shard global hinder performance guarantee adaptive adversary finally latency transaction commitment comparable bitcoin min omniledger usability goal overview network threat model goal roadmap towards omniledger strawman model assume validators transaction ensure consistency validator public private pki ski identify pki validators evenly distribute across shard assume configuration parameter shard summarize shard policy file denote epoch fix global reconfiguration assignment validators shard compute epoch consistent shard shard transaction client assume validators establish identity sybil attack resistant mechanism commit identity blockchain participate epoch validators register epoch identity identity blockchain described II network model underlie network assumption prior specifically assume network graph honest validators communication channel honest validators synchronous honest validator broadcast message honest validators message within maximum delay however cannot within epoch target latency protocol inside epoch partially synchronous model optimistic exponentially increase whereas operation identity creation shard assignment threat model denote byzantine validators assume validators malicious prior DL malicious node behave arbitrarily refuse participate collude attack remain validators honest faithfully protocol assume adversary mildly adaptive epoch corrupt validators corruption attempt actually assume adversary computationally bound cryptographic primitive secure computational diffie hellman goal omniledger primary goal respect decentralization security scalability decentralization omniledger failure trust shard robustness shard correctly continuously transaction assign secure transaction transaction commit atomically eventually aborted within across shard throughput omniledger increase linearly participate validators storage overhead validators transaction periodically compute reference summarizes shard latency omniledger latency transaction confirmation roadmap introduces  strawman DL outline omniledger epoch  transition epoch epoch secure validator assignment shard permit validators shard validate insecure adversary focus validators shard source randomness ensure validators shard sample overall malicious node  operates trust randomness beacon broadcast random  participant epoch validators participate  epoch register global identity blockchain identity sybil attack resistant mechanism epoch broadcast respective proof gossip network epoch omniledger architecture overview epoch validators shard membership visualize randhound assign randomly threshold validators shard assign validators register identity blockchain epoch validators ensure consistency shard ledger via byzcoinx client ensure consistency shard transaction via atomix client spends input shard output shard epoch leader elect randomness  request already register active validators bft signature identity provably establish validators endorse becomes valid leader appends identity blockchain afterwards register validators  assignment  shard bootstrap internal shard distribute ledger processing transaction byzcoin random shard assignment ensures ratio malicious honest validators shard closely ratio across validators probability  already functionality  significant security restriction randomness beacon trust processing transaction global reconfiguration epoch validators bootstrapped internal shard transaction  performance due byzcoin failure handle mechanism performance deteriorates validators fail validators storage bootstrapping overhead finally  cannot confirmation latency throughput address security challenge introduce  security IV IV remove trust randomness beacon validators autonomously perform secure sharding combination randhound vrf leader election via cryptographic sortition IV securely handle validator assignment shard epoch maintain ability continuously transaction IV atomix novel atomic commit protocol atomically processing shard transaction byzantine performance challenge introduce omniledger performance usability introduce byzcoinx variant  coin utilizes robust communication efficiently transaction within shard validators fail resolve dependency transaction achieve parallelization introduce summarize shard epoch enable ledger prune reduce storage bootstrapping validators enable optimistic realtime transaction confirmation without sacrifice security throughput utilize intra shard architecture trust verify transaction validation overview security architecture omniledger illustrate IV omniledger security sharding via bias resistant distribute randomness generate sharding securely without trust randomness beacon binding protocol pow rely distribute randomness generation protocol collectively execute validators distribute randomness generation protocol  unpredictability verifiability scalability multiple proposal exist approach relies bitcoin whereas focus randhound due documentation source implementation randhound relies leader orchestrate protocol appropriate mechanism validators role deterministic approach perform leader election adversary enforce failure refuse protocol failure threat model hence selection mechanism unpredictable  chicken randhound generate randomness overcome  combine randhound vrf leader election algorithm epoch validator computes ticket   leader   configuration properly register validators epoch identity blockchain counter validators gossip ticket lock valid ticket accept correspond node leader randhound protocol elect node fails randhound within another validators fail ignore validator epoch return later validators increase lottery validators successfully randhound leader broadcast  correctness proof properly register validators verify  compute permutation subdivide approximately equally bucket thereby assignment node shard security argument observation informally argue security approach participant valid ticket per epoch vrf leader election valid identity fix identity blockchain furthermore output vrf unpredictable private ski secret ticket non collude node hence outcome lottery unpredictable synchrony bound guarantee ticket honest leader honest validators adversary lottery comply randhound protocol fail excludes node participate epoch successful randhound adversary randomness hence sharding assignment however benefit minimal adversary cooperate publish random withhold lottery obtain sharding assignment agenda however probability adversary lottery upper bound exponentially decrease lottery honest node probability coordinate sharding finally remark adversary cannot random multiple validators accept random appendix omniledger extend probabilistically detect remain secure protocol maintain operability epoch transition recall epoch  assignment validators shard idle phase cannot transaction validators bootstrapping maintain operability transition phase  gradually swap validators shard per epoch enables remain operator service honest scenario client recently validators bootstrapping achieve continued operation swap shard however batch risk remain honest validators insufficient consensus stress bootstrapping validators network balance temporary loss liveness shard assignment validators omniledger fix parameter specify swap batch validators swap omniledger batch  shard derive  compute permutation shard validators specify permutation batch compute another  permute scatter validators epoch define batch define random permutation batch bootstrap load network validator sends announcement shard leader swap validator security argument transition phase ensure safety bft consensus shard honest validators willing participate consensus within shard epoch randomness  permutation batch shard configuration target adaptive adversary finally honest date validators liveness guaranteed whereas quorum breach transition batch honest validators update liveness lose temporarily validators update shard transaction enable transfer shard thereby achieve shard interoperability secure shard transaction crucial sharded ledger majority transaction shard traditional model UTXOs randomly assign shard processing appendix inadequate strawman approach shard transaction concurrently transaction shard processing shard commit transaction others abort UTXOs shard accepted transaction lose straightforward commit transaction without exploitable address issue propose novel byzantine shard atomic commit atomix protocol atomically processing transaction across shard transaction commit eventually aborted purpose ensure consistency transaction shard prevent spending prevent unspent fund lock forever distribute compute atomic commit atomic commit protocol deployed honest unreliable processor deploy protocol omniledger unnecessarily complex shard collectively honest crash infinitely byzcoin bft consensus atomix improves strawman approach lock unlock intentionally shard logic shard shard communication unnecessary task client responsibility unlock permit validators client client specific transaction stall submit processing atomix utxo model II overview enables efficient protocol depict initialize client creates shard transaction TX input UTXOs input shard ISS output UTXOs output shard OSs client gossip TX eventually ISS lock input shard associate TX proceed input spent leader validates transaction within shard transaction valid leader within input spent transaction shard ledger gossip proof acceptance merkle proof transaction transaction reject leader creates analogous proof rejection indicates acceptance rejection client ledger verify proof transaction indeed lock ISS lock request client proof commit transaction abort reclaim lock fund unlock outcome lock phase client commit abort transaction unlock commit leader issue proof acceptance respective transaction commit client entity leader creates gossip unlock commit transaction consists lock transaction proof acceptance input utxo involve OS validates transaction ledger update enable expenditure fund unlock abort however issue proof rejection transaction cannot commit abort reclaim fund lock previous phase client entity request involve ISS unlock transaction gossip unlock abort transaction proof rejection input UTXOs upon request unlock ISS leader procedure UTXOs  atomix protocol omniledger remark although focus omniledger utxo model atomix extend lock mechanism smart contract appendix detail security argument informally argue previously security atomix observation assumption shard honest fail eventually message bft consensus consequently shard faithfully valid transaction input shard issue proof acceptance output shard unlocks commit input shard issue proof rejection input shard unlocks abort input shard issue proof rejection output shard unlocks commit atomix TX eventually commits abort input shard return exactly response proof acceptance proof rejection consequently client proof per input utxo client proof acceptance transaction commit transaction abort simultaneously atomix TX spent twice shard transaction atomic assign specific shard solely responsible assign shard transaction twice shard attempt unlock commit atomix transaction cannot commit lock fund reclaim transaction cannot commit exist proof rejection issue input shard therefore input shard unlock abort fund become available remark fund automatically reclaim client entity initiate unlock abort although approach risk client crash indefinitely fund remain lock enables simplify protocol minimal logic shard shard communication client crash indefinitely equivalent client loses private prevents spending correspond UTXOs furthermore entity validator exchange fee client unlock transaction information gossiped ensure robustness assign shard input utxo coordinator responsible unlock transaction shard leader malicious validators shard unlock transaction guarantee transaction eventually unlocked unlock transaction atomix unlock transaction regular transaction appropriate proof input UTXOs omniledger relies byzcoinx novel bft consensus described processing transaction within shard shard validators agreement contains commit transaction collective signature independent validators important feature enables atomix proof consequently unlock transaction validity transaction checked input UTXOs byzcoinx collective signature unlock transaction impractical shard validators collective signature byte whereas regular signature KB almost magnitude transaction byte refinement performance introduce performance sub protocol omniledger scalable bft consensus byzcoinx robust parallelizable byzcoin introduce enable bootstrapping decrease storage finally propose optional trust verify validation latency risk transaction fault tolerance byzantine fault byzcoin scalability partially due usage communication maintain communication susceptible fault failure byzcoin robust communication similarly PBFT consequently consensus performance deteriorates significantly adversary exploit hinder performance achieve fault tolerance omniledger without resort PBFT communication introduce byzcoinx communication byzcoin scalability robustness message propagation mechanism within consensus resemble setup omniledger epoch generate randomness assign validators shard assign evenly within shard maximum derive shard account specify shard policy file byzcoinx roundtrip protocol leader randomly selects validators leader responsible manage communication protocol leader respective member leader predefined timeout protocol leader randomly chooses another member replace fail leader protocol leader receives validators acceptance proceeds phase protocol protocol leader fails validators initiate PBFT procedure parallelize commitment byzcoinx parallelizes commitment utxo model carefully analyze handle dependency transaction transaction conflict commit consequently safely parallel identify conflict transaction analyze dependency transaction   denote transaction carefully handle   utxo utxo output  spent input  vice versa address maintain consistency commit address  commit ledger   depends transitively  transaction exhibit safely parallel remark transaction credit address conflict generate UTXOs capture concurrent processing adopt acyclic graph  data structure multiple byzcoinx protocol leader enforces pending non conflict transaction capture utxo dependency hash former  upon transaction decrease hash remark utxo dependency transitive enable relax requirement capture utxo dependency directly instead simply  transitively capture dependency shard ledger prune tackle issue ledger costly bootstrapping validators particularly urgent throughput DL whereas bitcoin blockchain grows MB per GB generation visa throughput sec easily GB per reduce storage bootstrapping validators shard assignment periodically introduce stable checkpoint PBFT summarize entire shard ledger sbj shard epoch shard validators execute shard leader UTXOs merkle merkle hash header sbj afterwards validators consensus header sbj validator construct merkle verification successful leader approve header shard ledger sbj genesis epoch finally sbj UTXOs discard safely regular epoch however epoch purpose transaction proof omniledger split across multiple shard header shard ledger client cannot existence transaction another inclusion proof transaction commit around responsibility transaction proof existence client omniledger epoch client generate proof existence transaction validate epoch normal epoch proof transaction contains merkle inclusion proof regular commit epoch sequence header sbj epoch reduce proof multi hop  header intermediate regular similarly  finally naively implement creation stall epoch hence transaction processing sbj append ledger avoid downtime consistent validators shard epoch empty epoch placeholder sbj commit regular holder sbj optional trust verify validation exists inherent shard consequently shard throughput latency illustrate shard performance resiliency powerful attacker omniledger security scalability pessimistically assume adversary validators accordingly shard latency guarantee finality transaction assumption however appropriately reflect priority client frequent latency sensitive transaction grocery buying coffee transaction quickly trust verify validation architecture response client augment intra shard architecture trust verify model optimistic validators transaction quickly provisional unlikely commitment core validators subsequently verify transaction finality ensure verifiability optimistic validators procedure transaction commit validator per consequently latency potentially secure adversary proportionally validators subvert operation transaction commit ultimately core validators verify provisional commitment detect inconsistency culprit punish rogue validators compensate  customer damage trust verify approach strike balance processing transaction validators unlikely misbehave amount epoch validators assign shard per epoch randomness bootstrap respective shard omniledger assigns validator randomly multiple optimistic processing core processing shard policy file specifies optimistic core validators optimistic finally guarantee misbehavior inside shard define maximum amount optimistic validate transaction stake revenue validators transaction optimistic optimistically validate input validation core validators concurrently combine input multiple optimistic processing maximize throughput valid transaction finalize shard ledger finally however core validators detect inconsistency respective optimistically validate transaction exclude validators invalid identify accountable withholding reward exclude remark detail punishment incentive scheme scope minimal incentive misbehave quantifiable confidence security optimistic validation client advantage realtime processing optimistic assurance finality transaction finalize VI security analysis contribution mainly pragmatic theoretical informal security analysis supplement argument IV randomness creation randhound assumes honest leader responsible coordinate protocol randomness available others omniledger however cannot guarantee honest leader although dishonest leader cannot affect  random output withhold randomness protocol restart economically  behavior bound bias randomize leader election leader election unpredictable adversary bound cryptographic hardness assumption unaware private honest validators input vrf function omniledger membership unpredictable private selection private bound identity adversary per elect leader node adversary leader elect randhound adversary accept random output sharding assignment forfeit favorable random assignment consequently probability adversary consecutive leader upper bound adversary consecutive randhound upper bound exclusion previous leader consecutive election shard security previously assumption shard collectively honest assumption shard malicious validators byzcoinx bft consensus security omniledger validator assignment mechanism model random sample outcome honest malicious assume infinite pool potential validators binomial distribution assume random sample due rand  unpredictability guarantee selection completely random adversarial source shard failure probability adversarial model security optimistic validation adversary calculate failure rate shard probability shard adversary cumulative distribution shard random variable malicious node illustrates propose shard adversary fashion calculate confidence client optimistic validation honest epoch security model security shard random selection however correspond failure probability within epoch instead failure rate approximate union bound failure rate individual shard argue adequately shard epoch failure probability negligible calculate upper bound failure probability permit adversary randhound multiple output prefers assumption randhound permit adversary cannot previously compute output chose randhound upper bound epoch failure XE XE XS sourcewhere consecutive adversary shard XS failure probability shard calculate VI XE XS concretely failure probability adversary shard failure epoch communication omniledger communication probability convergence fault assume node split node ensure shard leader honest leader setup accordingly omniledger achieves timeout shard leader retry request non responsive member timeout member identify potential failure shard leader initiate ensure shard leader retry request fix ratio however trigger typical contemplate increase network asynchrony hence respect ratio consensus calculate probability population node sample hypergeometric distribution calculation yield probability malicious node union bound yield probability malicious node exactly malicious node honest validators contains exactly malicious node shard leader honest leader byzcoinx probability probability failure remark failure constitute compromise security omniledger probability failure shard leader coordinate shard operation shard leader indeed fails shard leader elect probability successfully consensus vii implementation implement omniledger subprotocols sharding consensus processing shard transaction sharding combine randhound code available github implementation vrf leader election mechanism vrf construction franklin zhang similarly implement byzcoinx extend byzcoin code available github parallel commitment mechanism introduce implement atomix protocol IV shard client dispatch verifies shard transaction evaluation experimentally evaluate prototype implementation omniledger primary evaluate concern overall performance omniledger truly epoch transition client perceive latency commit shard transaction performance difference byzcoinx  coin respect throughput latency experimental setup  physical machine equip intel cpu GB ram gbps network link simulate realistic globally distribute deployment restrict bandwidth connection node mbps impose latency communication link basis data consist bitcoin blockchain omniledger throughput host shard adversarial omniledger throughput host shard adversarial omniledger transaction confirmation latency configuration respect shard adversarial validation omniledger transaction confirmation latency configuration respect shard adversarial validation omniledger performance evaluate performance  throughput latency situation distinguish fix shard adversarial distinguish configuration regular trust verify validation MB former KB optimistically validate MB latter transaction shard optimistic validation concurrently core shard enable latency risk transaction throughput omniledger throughput host configuration comparison average throughput visa sec additionally confirmation latency configuration omniledger throughput trust verify validation almost magnitude regular validation latency risk transaction validation risk transaction omniledger optimistic confirmation validation probability confirmation vulnerable spending attack due average malicious validators risk transaction latency guarantee finality II omniledger throughput transaction per tps adversarial shard shard II omniledger throughput transaction per tps adversarial shard shard epoch transition latency epoch transition latency II throughput omniledger adversary shard shard throughput increase almost linearly shard adversary host distribute latter across shard throughput tps correspond visa maintain omniledger security adversary achieve average throughput visa tps estimate increase host bitcoin node split shard unfortunately experimental platform handle load therefore mention estimate epoch transition evaluate transition epoch epoch recall epoch membership configuration collectively vrf leader election leader elect randhound host secure adversary broadcast validators verify peer assume validators already shard validate important mention critical occurs concurrently previous epoch setup shard leader enforce bootstrapping mainly due randhound estimate scenario refer security analysis VI host honest leader elect randhound probability approximately epoch duration overhead acceptable client perceive latency shard transaction via atomix client perceive latency shard transaction via atomix client perceive latency atomix evaluate shard configuration client perceive latency atomix client perceive latency almost consensus latency already consequently inclusion transaction delayed latency increase slightly multiple shard validate transaction overall latency client output shard consensus however client directly fund batch proof acceptance expenditure transaction respect input output constraint overall client perceive latency shard transaction significantly affected increase shard byzcoinx performance performance improvement byzcoinx byzcoin comparison data series corresponds data concurrently network meaning concurrency MB concurrently MB whereas concurrency MB performance increase concurrently concurrent decrease per consensus latency attribute resource utilization frequently validation concurrency increase slight performance meaning overhead parallel consensus outweighs parallelization benefit due constant cryptographic operation per byzcoinx throughput transaction per concurrency byzcoinx throughput transaction per concurrency byzcoinx latency concurrency data byzcoinx latency concurrency data illustrates scalability byzcoin topology versus byzcoinx fault tolerant topology performance failure topology consensus node assumes adversary byzcoinx communication actually performs byzcoin due byzcoinx communication shallow roundtrip leaf faster byzcoin hence byzcoin fix branching factor increase depth whereas byzcoinx fix depth increase branching factor choice latency node fix depth importance topology however fault tolerant failure performance seriously affected byzcoin switch topology failure node due branching factor MB non visible data bandwidth bootstrapping evaluate improvement validators bootstrapping recall epoch transition validator  identity blockchain instead replay blockchain utxo reconstruct bitcoin blockchain parallel omniledger blockchain weekly byzcoinx communication latency byzcoinx communication latency bootstrap bandwidth consumption bootstrap bandwidth consumption depicts bandwidth overhead validator approach validator outdated bitcoin benefit substantial bitcoin omniledger meaning epoch approach significantly peak throughput MB deployed reduce bandwidth consumption magnitude IX related blockchains prominent IV byzcoin scalable bft consensus cannot elastico DL however suffers performance security challenge already II  proposes sharding scalable approach centrally cryptocurrencies  relies trust source randomness sharding audit usage problematic trustless setting furthermore validate transaction shard coordinate client instead bft  phase commit assume safety preserve majority validators honest approach however spending attempt malicious client collude validator IV comparison distribute ledger IV comparison distribute ledger prior achieve desire decentralization security illustrate omniledger overcomes issue throughput concerned maintain consistency safety without impose bitcoin NG bitcoin without consensus algorithm pow transaction validation timeline pow transaction validation although bitcoin NG significantly increase throughput bitcoin susceptible attack bitcoin effort blockchains tendermint protocol PBFT shard consensus due similarity PBFT lightning network chain payment protocol bitcoin compatible omniledger limit amount information commit blockchain  enhances  smart contract capability  recognizes shard atomic commit devise complicate algorithm chooses shard protocol without client increase shard communication approach synergistic  focus scalable utxo style DL whereas  focus sharded smart contract shard deployed weak adversary however combine omniledger  potential scalable smart contract platform scalability security adversary limitation future omniledger proof concept limitation address future epoch bootstrap interfere normal operation significant future advanced cryptography BLS performance improvement additionally actual throughput dependent workload appendix transaction shard commit shard future exploration alternative sharding locality furthermore rely honest validators detect transaction unfairly censor leader censorship anti censorship guarantee protocol sketch appendix future implementation combination secret technique guarantee another shortcoming omniledger formally around incentive participant focus honest malicious  proven unrealistic anonymous cryptocurrencies finally suitable highly adaptive adversary bootstrap epoch substantial moderately epoch XI conclusion omniledger DL securely visa throughput latency preserve decentralization byzantine adversary omniledger achieves novel approach consist omniledger concurrency sharding shard separately byzcoinx validate transaction parallel maximize resource utilization preserve safety omniledger enables user transact safely user regardless shard deploy atomix algorithm shard transaction validation introduction trust verify approach finally omniledger enables validators securely efficiently switch shard without bound anti sybil attack without stall reconfiguration implement evaluate omniledger sub component byzcoinx improves byzcoin performance throughput latency robustness failure atomix secure processing shard transaction overhead minimal intra shard consensus finally evaluate omniledger prototype thoroughly indeed achieve visa throughput