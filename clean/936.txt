processor prediction speculative execution maximize performance destination depends memory CPUs destination attempt execute ahead memory finally arrives cpu discard commits speculative computation speculative logic  executes access victim memory register perform operation measurable spectre attack involve induce victim speculatively perform operation program execution leak victim confidential information via channel adversary describes practical attack combine methodology channel attack fault attack return orient program arbitrary memory victim broadly speculative execution implementation violate security assumption underpin numerous software security mechanism operating separation containerization jit compilation countermeasure cache timing channel attack attack serious threat actual vulnerable speculative execution capability microprocessor intel amd billion device  processor specific countermeasure fix processor update instruction architecture ISAs hardware architect software developer understand computation cpu implementation permit leak introduction computation perform physical device observable beyond computation nominal output channel attack focus exploit extract otherwise unavailable secret information introduction physical consumption electromagnetic radiation acoustic leveraged extract cryptographic secret physical channel attack extract secret information complex device PCs mobile phone however device execute code potentially unknown origin additional threat software attack external measurement equipment attack exploit software vulnerability buffer overflow error software attack leverage hardware vulnerability leak sensitive information attack latter microarchitectural attack exploit cache timing prediction target buffer dram software technique fault attack alter physical memory internal cpu microarchitectural technique facilitate increase processor decade advancement speculative execution widely increase performance involves cpu likely future execution direction prematurely execute instruction specifically program depends uncached external physical memory memory cpu cycle becomes waste cycle idle cpu attempt direction checkpoint register proceeds speculatively execute program eventually arrives memory cpu correctness initial cpu discard incorrect speculative execution revert register checkpoint performance comparable idle however speculative execution commit yield significant performance gain useful accomplish delay security perspective speculative execution involves execute program possibly incorrect however CPUs maintain functional correctness revert incorrect speculative execution prior error previously assume analyze security implication incorrect speculative execution microarchitectural attack spectre attack spectre attack trick processor speculatively execute instruction sequence execute program execution instruction nominal cpu eventually revert transient instruction influence transient instruction speculatively execute leak information within victim memory address empirically demonstrate feasibility spectre attack exploit transient instruction sequence leak information across security domain unprivileged native code portable javascript code attack native code proof concept victim program contains secret data within memory address compile victim binary operating library instruction sequence leak information victim address finally attacker program exploit cpu speculative execution feature execute previously sequence transient instruction technique memory victim address secret within attack javascript eBPF addition violate isolation boundary native code spectre attack violate sandboxing via portable javascript code empirically demonstrate javascript program successfully data address browser addition demonstrate attack leverage eBPF interpreter jit linux technique spectre attack violate memory isolation boundary combine speculative execution data exfiltration via microarchitectural covert channel specifically spectre attack attacker introduce sequence instruction within address execute covert channel transmitter leak victim memory register content attacker trick cpu speculatively erroneously execute instruction sequence thereby leak victim information covert channel finally attacker retrieves victim information covert channel nominal cpu erroneous speculative execution eventually revert previously leak information microarchitectural cpu cache content survive nominal reversion description spectre attack concretely instantiate induce erroneous speculative execution microarchitectural covert channel choice covert channel component implementation described cache covert channel flush reload evict reload proceed technique induce influence erroneous speculative execution variant exploit conditional variant spectre attack attacker  cpu predictor mispredicting direction cpu temporarily violate program semantics execute code execute otherwise incorrect speculative execution allows attacker secret information program address indeed code array array array assume variable contains attacker data ensure validity memory access array code contains statement purpose verify within legal attacker bypass statement thereby reading potentially secret data address initial mistraining phase attacker invokes code valid input thereby training predictor exploit phase attacker invokes code outside bound array determination cpu bound already speculatively executes instruction evaluate array array malicious array load data cache address dependent array malicious access cache avoid hardware prefetching bound eventually cpu discovers error reverts nominal micro architectural however cache revert attacker analyze cache content potentially secret byte retrieve bound victim memory variant exploit indirect return orient program rop variant attacker chooses gadget victim address influence victim speculatively execute gadget unlike rop attacker rely vulnerability victim code instead attacker target buffer BTB mispredict indirect instruction address gadget speculative execution gadget incorrect speculative execution cpu nominal eventually revert cache thereby gadget leak sensitive information via cache channel empirically demonstrate careful gadget selection allows arbitrary memory victim  BTB attacker virtual address gadget victim address performs indirect address training attacker address resides gadget address attacker address attacker virtual address training alias victim attacker handle exception attack code mapped virtual address gadget attacker address variant attack achieve speculative execution leak information mistraining return instruction leak information via timing variation contention arithmetic target hardware status hardware empirically verify vulnerability intel processor spectre attack ivy bridge haswell broadwell skylake kaby processor verify attack applicability amd ryzen CPUs finally successfully spectre attack samsung qualcomm processor popular mobile phone status responsible disclosure disjoint author preliminary version partially overlap cpu vendor affected coordination author participate  spectre attack document cve cve meltdown meltdown related micro architectural attack exploit execution leak kernel memory meltdown distinct spectre attack unlike spectre meltdown prediction instead relies observation instruction trap instruction execute terminate meltdown exploit vulnerability specific intel processor allows speculatively execute instruction bypass memory protection combine issue meltdown access kernel memory user access trap trap issue instruction access leak content access memory cache covert channel contrast spectre attack wider processor amd processor furthermore kaiser mechanism widely apply mitigation meltdown attack spectre II background micro architectural component processor improve performance leak information program return orient program rop gadget execution execution paradigm increase utilization processor component instruction instruction program execute parallel sometimes precede instruction processor internally micro ops emulate instruction architecture instruction decode micro ops  correspond instruction precede instruction instruction retire commit register architectural reorder buffer instruction retire program execution speculative execution processor future instruction program occurs oforder execution conditional instruction direction depends precede instruction execution processor preserve register prediction program speculatively execute instruction along prediction speculative execution commit yield performance advantage idle otherwise processor determines abandon perform speculatively revert register resume along refer instruction perform erroneously misprediction micro architectural trace transient instruction although speculative execution maintains architectural program execution micro architectural valid transient execution speculative execution CPUs instruction ahead limit typically reorder buffer cpu instance haswell microarchitecture reorder buffer sufficient micro ops relationship micro ops instruction limit depends instruction prediction speculative execution processor likely outcome instruction prediction improve performance increase speculatively execute operation successfully commit predictor intel processor haswell xeon processor multiple prediction mechanism indirect indirect instruction arbitrary target address compute runtime instruction address register memory location stack jmp eax jmp eax ret indirect mov mips RISC  processor compensate additional flexibility indirect optimize prediction mechanism intel describes processor predicts static monotonic manner indirect monotonic manner manner depends recent program behavior conditional target consequently processor component predict outcome target buffer BTB mapping address recently execute instruction destination address processor BTB predict future code address decode instruction analyze BTB intel haswell processor conclude significant address index BTB conditional target address predict outcome destination typically encode instruction runtime improve prediction processor maintains outcome recent indirect analyze structure prediction recent intel processor although return instruction indirect mechanism predict destination address CPUs return stack buffer  maintains recently portion stack data available  processor stall execution BTB fallback prediction logic BTB  typically across physical core hence processor learns previous execute core memory hierarchy bridge gap faster processor memory processor hierarchy successively faster cache cache memory fix chunk typical byte processor data memory cache hierarchy contains cache data cache data retrieve cache otherwise cache procedure attempt retrieve data cache finally external memory data typically cache previously cached evict future intel processor typically cache core dedicate cache core cache cache llc processor ensure per core cache coherent cache coherence protocol MESI protocol MESI protocol variant implies memory operation core data cache core marked invalid meaning future access data core quickly load data cache happens repeatedly specific memory location informally cache bounce memory cached granularity core access nearby memory location cache behavior false source performance issue cache coherency protocol sometimes abuse replacement cache eviction clflush instruction eviction behavior previously explore potential mechanism facilitate rowhammer attack micro architectural channel attack microarchitectural component improve processor performance predict future program behavior aim maintain depends program behavior assume future behavior related behavior multiple program execute hardware concurrently via microarchitectural behavior program affect program unintended information leak program another initial microarchitectural channel attack exploit timing variability leakage data cache extract cryptographic primitive channel demonstrate multiple microarchitectural component instruction cache cache BTB target attack broaden encompass location detection ASLR keystroke monitoring website fingerprint genome processing recent core cpu attack attack attack trust execution environment attack mobile code attack technique flush reload technique variant evict reload leak sensitive information technique attacker evict cache cache victim victim executes attacker perform memory address correspond evict cache victim access monitor cache data cache access otherwise victim access hence access attacker learns victim access monitor cache eviction probe difference technique mechanism evict monitor cache cache flush reload technique attacker dedicate machine instruction clflush evict evict reload eviction achieve contention cache access memory location load cache due limited cache processor discard evict subsequently probed return orient program return orient program rop technique allows attacker hijack victim perform complex operation chain machine code snippet gadget code vulnerable victim specifically attacker usable gadget victim binary gadget performs computation execute return instruction attacker modify stack pointer return address externally writable buffer overwrite stack content buffer overflow stack pointer series maliciously chosen gadget address execute return instruction destination address stack attacker series address return effectively gadget chain attack overview spectre attack induce victim speculatively perform operation strictly serialize inorder processing program instruction leak victim confidential information via covert channel adversary variant leverage conditional mispredictions IV variant leverage misprediction target indirect attack setup phase adversary performs operation  processor later  erroneous speculative prediction addition setup phase usually induce speculative execution manipulate cache remove data processor actual setup phase adversary covert channel extract victim information perform flush evict flush reload evict reload attack phase processor speculatively executes instruction transfer confidential information victim context microarchitectural covert channel trigger attacker request victim perform action via socket file attacker leverage speculative execution code obtain sensitive information attack code sandboxed interpreter compiler memory suppose access speculative execution potentially expose sensitive data via covert channel speculative execution memory attacker chosen address perform memory operation modifies cache expose phase sensitive data recover spectre attack flush reload evict reload recovery consists timing access memory address cache monitor spectre attack assume speculatively execute instruction memory victim access normally without trigger fault exception hence spectre orthogonal meltdown exploit scenario CPUs execution user instruction kernel memory consequently processor prevents speculative execution instruction user access kernel memory spectre attack IV variant exploit conditional misprediction demonstrate conditional misprediction exploit attacker arbitrary memory another context another code listing function library unsigned integer untrusted source code access array unsigned byte array array byte array array MB listing conditional listing conditional code fragment bound essential security prevents processor reading sensitive memory outside array otherwise bound input trigger exception processor access sensitive memory address secret byte address array illustrates bound combination speculative execution bound cpu speculatively executes code predict likely outcome comparison bound immediately cache precede bound congestion execution bound complex arithmetic dependency nest speculative execution however illustrate prediction faster overall execution outcome bound predictor likely target overall execution outcome correctly predict however bound incorrectly predict attacker leak secret information scenario unfortunately speculative execution conditional bound incorrect suppose adversary code maliciously chosen bound array resolve secret byte somewhere victim memory array array uncached cached previous operation valid predictor assume likely cache configuration naturally adversary eviction array array kernel secret legitimate operation compile code processor malicious array reading array cache processor substantial delay available dram instruction somewhere argument uncached meantime predictor assumes consequently speculative execution logic address array request data address memory subsystem cache quickly return secret byte speculative execution logic compute address array sends request address memory cache array already flight finally processor realizes speculative execution erroneous rewinds register however speculative array affect cache address specific manner address depends attack adversary location array cache via flush reload prime probe reveals victim speculative execution cached array alternatively adversary evict immediately target function bound array location access array cache operation tends faster scenario exploitable leak variant instead perform bound mispredicted conditional previously compute safety similarly code speculatively execute leak comparison fix memory location instruction cache status described restrictive scenario attack array cached prediction apply speculative execution involve comparison processor speculative execution initiate variety situation variant VI experimental perform multiple processor architecture intel ivy bridge QM intel haswell intel broadwell intel skylake unspecified xeon google intel kaby amd ryzen spectre vulnerability CPUs mode linux processor architecture speculative execution initial qualcomm snapdragon soc qualcomm  cpu samsung exynos octa soc cortex cortex CPUs confirm processor impact speculative execution proceed ahead instruction pointer haswell code appendix IV instruction insert source code statement access array array micro ops reorder buffer processor II implementation appendix proof concept code processor closely description IV unoptimized implementation around KB error rate implementation javascript developed proof concept javascript google chrome version allows website private memory code illustrate listing predictor mistraining index via operation iteration index bound address  variable  ensure operation optimize accord  operation convert integer optimization hint javascript interpreter optimize javascript performs compilation convert javascript machine dummy operation code surround listing  local memory remove cache attack listing disassembly output clflush instruction accessible javascript cache eviction instead access memory location target memory location evict afterwards leak conveyed via cache status  attacker evict cache parameter  javascript code ebp disassembly evict javascript access  instruction chrome intentionally degrades accuracy resolution timer  timing attack performance however web worker feature html thread repeatedly decrement memory location approach yield resolution timer sufficient resolution implementation exploit eBPF exploit conditional developed reliable proof concept leak kernel memory unmodified linux kernel without patch spectre abuse eBPF extend bpf interface eBPF linux kernel interface berkeley packet filter bpf variety purpose filter packet content eBPF permit unprivileged user trigger interpretation jit compilation subsequent execution user kernel verify eBPF bytecode context kernel concept attack concept attack javascript attack eBPF code speculatively execute code native code user acquire covert channel information difference javascript function implement script speculatively access secret dependent location user memory perform speculative bound memory access array kernel memory index user memory access instead proof concept assumes target processor supervisor mode access prevention SMAP however attack without assumption intel xeon haswell default interpret mode non default jit compile mode eBPF highly optimize implementation leak setup amd pro processor non default jit compile mode investigation future eBPF subsystem manages data structure kernel memory user request creation data structure data structure access eBPF bytecode enforce memory safety operation kernel metadata associate data structure performs metadata metadata data structure data structure prevent bound access reference eBPF program load kernel reference eBPF program reference data structure ensure memory belonging data structure release load eBPF program reference increase latency bound eBPF manage array abuse false kernel array reference cache permit attacker cache array onto another physical cpu core modify load discard eBPF program reference eBPF array physical core kernel increment decrement array reference counter physical core attack achieves leakage rate roughly haswell cpu accuracy recover data spectre attack reveal data accuracy error arise discover memory location cached typically timing measurement accuracy limited javascript platform multiple attack iteration reliable determination error array become cached unexpectedly hardware  operating activity access memory array corresponds memory library attacker redo attack array become cached repetition criterion error correction accurate  timing yield error rate approximately intel skylake kaby processor listing exploit speculative execution via javascript listing exploit speculative execution via javascript listing disassembly javascript listing listing disassembly javascript listing predictor  context context predictor prediction basis training data context speculative execution attacker chosen address corresponds location spectre gadget victim address variant poison indirect demonstrate indirect poison attacker misprediction indirect exploit arbitrary memory another context another indirect commonly program across architecture II determination destination address indirect delayed due cache speculative execution location predict previous code execution spectre variant adversary  predictor malicious destination speculative execution location chosen adversary illustrate predictor context applies prediction context specifically adversary misdirect speculative execution location legitimate program execution speculative execution leaf measurable extremely powerful attacker expose victim memory absence exploitable conditional misprediction IV attack attacker seek victim memory register indirect occurs commonly occurs binary function manipulate externally data routinely function register attacker ignore function instead simply onto stack function prologue restore function epilogue attacker spectre gadget code fragment speculative execution transfer victim sensitive information covert channel effective gadget instruction necessarily adjacent  subtracts etc memory location address attacker register onto attacker register instruction access memory address gadget attacker via address leak via leak memory address instruction CPUs gadget reside memory executable victim cpu perform speculative execution however megabyte library mapped attacker ample gadget without victim code numerous attack adversary information sought adversary resides register stack memory etc adversary ability speculative execution instruction sequence available gadget channel leak information speculative operation cryptographic function return secret register become exploitable attacker simply induce speculative execution instruction brings memory address specify register cache likewise although assumes attacker register attacker register stack memory sufficient gadget exploitation return orient program rop correctly software vulnerable gadget limited duration terminate cleanly cpu eventually recognize speculative error gadget exfiltrate data via channel explicitly speculative execution perform complex sequence instruction reading stack perform arithmetic branching multiple reading memory mistraining predictor processor attacker context performs mistraining predictor trick processor speculatively execute gadget victim code attack mimic victim misdirect mistraining requirement CPUs instance haswell approximately prior destination address although hash address amd ryzen approximately prior reverse engineer pseudo code update buffer intel xeon haswell appendix addition mistraining virtual address attacker victim cpu index prediction address mistraining predictor mimic virtual address physical address timing ID prediction influence operation core II mistraining cpu core predictor illegal destination although exception trigger attacker easily signal handler linux structure exception handle previous predictor prediction destination address victim virtual address address gadget resides experimental conditional misprediction IV indirect poison multiple processor architecture intel ivy bridge QM intel haswell intel broadwell intel skylake unspecified xeon google intel kaby amd ryzen processor mode operating hypervisors effectiveness poison implement victim program repeatedly executes fix indirect flush destination address clflush flush reload probe memory location victim program gadget probe location legitimately execute implement attack program repeatedly executes indirect destination victim sequence indirect virtual address victim gadget attack instruction address return haswell processor victim execute iteration per attack successfully poison kaby processor victim execute iteration per poison rate attack execute core spurious cache probe location conclude indirect poison highly effective rate typical victim program perform indirect attacker seek poison indirect poison proof concept proof concept construct target application service compute sha hash input message implementation consist program continuously loop load input file invokes cryptography function compute hash hash whenever input data input file register ebx edi attacker edx content register attacker input criterion spectre gadget described executable memory victim identify byte sequence  dll possibly misalign instruction sequence spectre gadget adc edi  ptr ebx edx  adc byte ptr edi speculative execution gadget attacker ebx edi allows adversary victim memory attacker edi address probe array memory library ebx  edx consequently instruction address onto edi instruction fetch index probe array cache gadget byte wise instruction indirect poison target instruction function location destination destination per reboot due ASLR victim execute gadget speculatively memory location flush cache predictor  speculative execution spectre gadget memory destination mapped  predictor modify attacker function destination gadget address ret instruction mistraining repeatedly jumping gadget address multiple thread code ASLR address combination training sequence victim instruction gadget comprise instruction sbb eax esp ebx stack attack thread  predictor thread core victim via hyperthreading predictor predictor precede prediction mistraining iteration mimic victim prior  although mistraining exactly virtual address instruction victim instead mistraining iteration series ret instruction destination address victim mapped address MB byte executable array ret instruction mimic mistraining thread executes  modify gadget attacker leak memory ebx adjust memory address edi adjust probe array flush reload attacker infers victim listing cache easily infer however significant cache cache distinguishable flush reload attack distinguish address probe array shift byte wise identify threshold access consecutive cache attack attacker arbitrary memory victim unoptimized proof  implementation intel haswell file attacker influence victim register ram overhead backtrack error attempt reverse engineering prediction internals approach  intel haswell predictor internals preparation attack kvm reverse engineering helpful optimize predictor mistraining characterize processor vulnerability although mistraining achieve without understand predictor attack kvm described reverse engineering information available public source intel public documentation contains authoritative information prediction implementation processor  fog describes prediction intel haswell processor finally information prior research reverse engineer predict intel processor structure buffer  logical extension  prediction basis instruction preserve simplicity hash naturally buffer overlap data xor combination simplest data extra backward propagation inside buffer preserve hash precise function predictor predictor collision leveraged  identical code  indirect target hyperthread configure execute target address hyperthread configure execute target address addition code hyperthread target address load cache flush reload cache load hyperthread misprediction rate misprediction rate indicates processor cannot distinguish misprediction rate indicates processor distinguish various flip address apply thread misprediction rate binary oracle reveal influence prediction flip XORed flip misprediction rate flip individually misprediction rate flip combine knowledge yield overview attack kvm implement attack intel xeon haswell linux kernel package linux image amd version  leak host memory inside guest VM attacker access guest operating inside VM multiple mechanism influence prediction indirect conditional phase attack determines information environment hypervisor ASLR location analyze buffer target buffer leak cache association information physical memory location information spectre gadget execute via target injection initialization processor leak hypervisor memory  address execute eBPF interpreter hypervisor memory spectre gadget indirect poison aka target injection target primary prediction mechanism indirect leak byte unreadable VI variation demonstrate attack leverage cache speculative execution future processor exist processor microcode behave differently prevent speculatively execute code modify cache examine potential variant attack speculative execution affect microarchitectural component spectre attack combine microarchitectural attack explore potential combination conclude virtually observable speculatively execute code potentially leak sensitive information although technique processor implement essential understand potential variation evaluate mitigation spectre variant spectre variant speculation load logic processor  load previous exploitation mechanic variant detail evict evict attack timing operation cache technique adapt spectre code false mispredicts array suppose register contains secret speculatively execute memory array cache memory bus initiate quickly array cache longer timing victim thread addition component access memory processor presence activity memory bus memory dram address attack unlike implement speculative execution modify content cache cache affect timing speculatively execute code ultimately becomes visible attacker instruction timing spectre vulnerability necessarily involve cache instruction timing depends operand leak information operand multiplier occupy speculative execution timing multiplier becomes available execution misprediction recognize affected timing multiplication reveal information false mispredicts contention register file suppose cpu register file finite register available checkpoint speculative execution extra speculative execution checkpoint false adversary detect checkpoint speculative execution code  reduce due shortage storage reveals information false mispredicts variation speculative execution code contains conditional potentially risk attacker contains attacker chosen ability determination sufficient cryptographic implementation attacker  predictor interrupt occurs interrupt return mispredicts instruction memory attacker chooses correspond memory address suitable flush reload reveal  instruction serialize intel CPUs processor apply prediction leverage arbitrary observable virtually observable speculatively execute code leveraged covert channel leak sensitive information listing processor speculative cannot modify cache speculative lookup array occurs timing affected cache speculative execution timing affect depth timing subsequent speculative operation manipulate cache prior speculative execution adversary potentially leverage virtually observable speculative execution array array array something detectable speculatively execute observable operation involve virtually channel covert channel contention resource bus arithmetic etc conventional channel emanation electromagnetic radiation consumption array array something observable speculatively execute vii mitigation option countermeasure spectre attack propose address feature attack relies upon discus countermeasure applicability effectiveness prevent speculative execution speculative execution spectre attack ensure instruction execute ascertain prevent speculative execution spectre attack effective countermeasure prevent speculative execution significant degradation performance processor although processor software disable speculative execution mode future processor potentially introduce via microcode alternatively hardware embed switch alternate processor model implement speculative execution unlikely immediate fix alternatively software modify serialize speculation instruction ensure instruction execute speculatively intel amd recommend lfence instruction  slowest approach conditional instruction outcome conditional however amount disable prediction dramatically reduce performance improve approach static analysis reduce speculation instruction code potential leak bound memory contrast microsoft compiler  approach default unprotected code unless static analyzer detects code vulnerable code insert serialize instruction mitigate indirect poison insert lfence instruction indirect ensures pipeline prior resolve quickly reduces instruction execute speculatively poison approach potentially vulnerable software hence protection update software binary library issue legacy software prevent access secret data countermeasure prevent speculatively execute code access secret data google chrome web browser execute web site spectre attack leverage victim permission attack perform javascript IV access data assign website webkit employ strategy limit access secret data speculatively execute code strategy replaces array bound index mask instead array index within bound array webkit applies mask index ensure array mask access outside bound array limit distance bound violation prevent attacker access arbitrary memory strategy protects access pointer xoring pseudo random poison poison protects pointer distinct adversary poison cannot poison pointer although various cache attack leak poison significantly poison ensures mispredictions instruction pointer associate another approach useful jit compiler interpreter protection runtime environment execute code restrict data program access prevent data covert channel future processor potentially data fetch speculative operation prevent data subsequent operation leak processor generally capability however limit data extraction covert channel exfiltrate information transient instruction spectre attack covert communication channel multiple approach mitigate channel attempt mitigation javascript attack browser provider degrade resolution javascript timer potentially jitter patch disable  timing source countermeasure necessitate additional average attack IV protection unclear error source simply reduce rate attacker exfiltrate data furthermore processor lack mechanism covert channel elimination hence approach decrease attack performance guarantee attack prevent poison prevent indirect poison intel amd extend ISA mechanism indirect mechanism consists indirect restrict speculation  prevents indirect privileged code affected privileged code processor enters  mode influence computation outside  mode thread indirect prediction  restricts prediction software execute  core finally indirect predictor barrier  prevents software barrier affect prediction software barrier flush BTB enable microcode patch operating bios performance impact varies percent factor countermeasure employ comprehensively apply limited kernel protection efficiency hardware microcode implementation google suggests alternative mechanism prevent indirect poison  retpoline code sequence replaces indirect return instruction construct contains code return instruction predict benign endless loop return stack buffer actual target destination stack return ret instruction return instruction predict impractical intel issue microcode update processor BTB prediction disable mechanism conclusion fundamental assumption underpin software security technique processor faithfully execute program instruction safety spectre attack leverage speculative execution violates assumption technique demonstrate practical software vulnerability adversary private memory register content security context software security fundamentally depends understand hardware software developer information cpu implementation permit expose computation countermeasure described previous limit practical exploit gap typically formal architectural assurance specific code construction across processor future fundamentally instruction architecture broadly offs security performance vulnerability others arise focus technology maximize performance processor compiler device driver operating numerous critical component evolve compound layer complex optimization introduce security risk insecurity choice revisit alternative implementation optimize security