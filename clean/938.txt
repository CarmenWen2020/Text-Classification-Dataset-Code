verx automate verifier functional ethereum smart contract verx address important contract satisfy custom functional specification verx careful combination technique enable automatically verify temporal infinite smart contract reduction temporal verification reachability symbolic execution ethereum virtual machine precise efficient practical fragment ethereum contract delayed predicate abstraction symbolic execution transaction abstraction transaction boundary extensive experimental evaluation temporal project popular  library demonstrates verx practically effective introduction ensure correctness smart contract program blockchains security concern billion worth USD smart contract couple lose exploit subtle flaw logic program issue exacerbate code becomes immutable blockchain hence bug deployment cannot fix audit mitigate audit smart contract involve code vulnerability generic security error reentrancy overflow typically achieve automate security    mythril deeper custom functional requirement manual effort code inspection requirement sum deposit exceeds contract balance substantial advance security discover generic error progress automate verification deeper challenge functional particularly problematic manually satisfaction deeper requirement involves non trivial increase critical bug production goal formal guarantee smart contract smart contract similarly safety critical controller deployed airplane formally verify deployment observation handful smart contract project  formally verify verification effort conduct heavyweight interactive theorem provers  hol coq non trivial manual effort expertise audit expensive consume limited adoption developer audit community usage verification verx requirement formalize temporal safety contract relevant predicate verification automatically extract fed verx verifies output counterexample indicates additional predicate challenge address enable developer auditor formally certify smart contract without expertise formal verification ideally verifier capable automatically custom functional however building automate verifier challenge smart contract interact external contract via function external contract smart contract verify arbitrary code unknown automate verification presence arbitrary  callback external contract challenge smart contract unbounded transaction therefore smart contract usually loop verifier soundly handle loop contract function execute implicit infinite loop processing transaction iteration verx automate verifier ethereum contract introduce verx automate verifier functional requirement ethereum smart contract aim address challenge decision underpin verx strongly motivate practical challenge arise audit smart contract observation contract defend external callback ensure introduce behavior behavior external callback equivalent another behavior without external callback effectively external callback  contract adapt earlier notion effectively callback contract verx focus verify  contract enjoy important benefit simplify formalization requirement auditor specification without explicitly external callback verifier soundly avoid explore external callback facilitates precise scalable analysis depict perform verx formalize requirement temporal safety specification verx identify temporal particularly capture contract requirement contract sequence transaction temporal specify sequence contract valid adoption syntax solidity widely ethereum contract extend temporal operator enable quantify contract formalization requirement crowdsale contract evaluation illustrate idiom access transition multi contract invariant contract verify verx formalize verx reduces temporal safety verification reachability contract formalize instead contract directly leverage program analysis typically focus reachability verification reduction approach verification effective setting contract verx verification employ combination abstraction symbolic execution effective smart contract refer combination delayed predicate abstraction concretely unbounded transaction contract verx abstract contract arise transaction via abstraction predicate leverage symbolic execution precise analysis within transaction demonstrate later delay abstraction transaction essential invariant transaction moreover precise individual transaction symbolic execution contract function usually bound loop recursion avoid infinite computation blockchain verx automatically infers abstraction predicate contract code immutable variable pointer contract escrow extract atomic predicate sum deposit user typically predicate verx  manner evaluation automatically verify predicate infer verx user additional predicate backward arrow exist symbolic ethereum unsound inefficient introduce precisely model nonstandard feature ethereum virtual machine hash allocation mechanic practical fragment solidity demonstrate effectiveness verx extensive evaluation project relevant temporal verx verify contract contribution contribution delayed predicate abstraction approach combine symbolic execution perform transaction execution abstraction transaction delayed abstraction enable automatic verification temporal safety smart contract verification verx automatically verify functional specification contract verx incorporates delayed abstraction symbolic execution avoids pitfall exist handle ethereum feature extensive experimental evaluation project contract safety verx verify temporal smart contract popular  library II motivate verification challenge decentralize crowdsale scenario relevant requirement formalization discus challenge verify verification verx address issue crowdsale requirement formalization crowdsale contract escrow contract crowdsale crowdsale scenario implement ethereum goal ether within deployment successful ether within beneficiary withdraw fund otherwise crowdsale fail user refund summarize requirement user investor beneficiary transfer fund crowdsale implementation widely  library escrow contract lock fund invest crowdsale contract initial define constructor escrow crowdsale constructor crowdsale contract amount fund goal ether ether wei  deployment plus escrow fund invest individual user mapping deposit challenge specification presence callback formalize requirement crowdsale escrow contract refer bundle contract however nontrivial bundle execute isolation interact external potentially malicious contract interaction external contract illustrate interaction escrow external contract refund investor escrow executes designate fallback function account invest crowdsale invoked fallback function arbitrary behavior scenario  passing address argument  nest  importantly nest modifies escrow escrow balance execution return  claimRefund depends callback initiate external contract specification challenge requirement typically implicitly assume bundle executes without callback requirement stipulates claimRefund escrow balance decrease deposit requirement interpret directly execution callback illustrate multiple escrow claimRefund terminates increase escrow balance via deposit decrease via  approach address discrepancy directly account callback formal requirement unfortunately complicate error prone external contract behave arbitrarily accommodate infinitely additional behavior conceptually challenge analogous specify concurrent interaction escrow external contract rectangle active function dash function external return downward upward arrow return effectively external callback contract address specification challenge mirror establish approach specify concurrent user requirement implicitly assume callback external contract requirement behavior generic impose extra effective external callback freedom  generalizes extra stipulates behavior external callback equivalent behavior without equivalent behavior guaranteed execute function terminate identical behavior equivalent execute claimRefund claimRefund sequentially without external callback  satisfied contract contract defer external contract transaction generic defense unexpected due malicious callback transaction indeed sufficient establish  contract satisfy  infamous dao contract function claimRefund exception switch meaning deposit zero indeed enables adversary drain escrow balance reclaim deposit multiple exist symbolic analyzer verify violation formalize requirement formalization requirement interpret sequence blockchain transaction user transaction deliberately define requirement semantics within transaction capture implementation detail transient computation observable user mention  requirement behavior callback behavior impose requirement equivalent behavior contract function invoked without callback formalizes capture temporal quantifier denote successful execution claimRefund address escrow balance return escrow balance previous escrow balance denote escrow balance minus deposit investor previous refers deposit previous zero execute claimRefund formalizes escrow successful crowdsale sum deposit return sum deposit escrow balance return escrow balance quantifier denote refer contract formalizes function withdraw claimRefund successfully execute contract idiom formalize future contract challenge unbounded verification discus challenge verify precise symbolic execution ethereum global invariant nest temporal quantifier inductive initial blockchain preserve processing transaction contract blockchain establish encode behavior function symbolic execution due limited loop recursion contract discus vii however model ethereum virtual machine EVM precisely efficiently challenge symbolic execution ethereum fail establish invariant verify  precise inefficient evaluation IX address challenge symbolic execution EVM precise efficient practical fragment solidity vii verx contract verx attempt inductive symbolic execution fails performs delayed abstraction predicate extract discover deeper violation sequence transaction violates  goal escrow refund claimRefund address invest ether msg goal  goal escrow withdraw violation due pre function invest prevent crowdsale counter stateful contract beyond exist symbolic execution default depth limit mythril  unroll multiple transaction fail discover violation timeout limit depth limit oyente discovers bug due imprecise model EVM due precise exploration depth false positive verx correctly fails verify output exactly sequence transaction violation evaluation pre verx successfully verifies infer invariant abstraction non inductive verify verx infer invariant reachable contract invariant construct atomic predicate  goal sum deposit predicate function pre verx extract predicate code compute invariant verx delayed abstraction explain shortly abstraction apply transaction boundary delay verify predicate sum deposit violate crowdsale contract standard predicate abstraction fail verify predicate delayed predicate abstraction succeed delayed predicate abstraction explain VI verification verx verification verx illustrate discus address technical challenge input verx consists contract bundle contract temporal safety illustration purpose assume contract function verification reduction verify temporal verx contract quantifier assertion global blockchain convert claimRefund sum deposit goal claimRefund sum deposit goal satisfied contract approach reduce temporal verification reachability successfully prior benefit enables verx leverage exist analysis technique symbolic execution predicate abstraction described verify contract contract verification inductive without abstraction contract function infinite loop iteration corresponds execution transaction construct user decides arbitrary contract function arbitrary argument loop infinite transaction user initiate unknown advance cannot directly apply symbolic execution SE verify contract SE loop bound attempt verify inductively assume invoked pre symbolic argument symbolic user inductive function initial conclude fails however conceptually strengthen ensure overapproximates reachable verification delayed predicate abstraction  reachable verx combination predicate abstraction symbolic execution perform delayed predicate abstraction analyze transaction fully symbolic execution abstract namely transaction boundary abstraction predicate automatically extract contract iterate procedure classic fix iteration loop initialize abstract reachable transaction boundary abstraction concrete initial simply outer loop non deterministically function invoke execute symbolically assume symbolic argument symbolic user compute precise symbolic transaction technically disjunction constraint capture function compute verx abstract abstract abstract symbolic become abstract abstract despite infinite outer loop verx guaranteed fix predicate abstraction domain finite due finite abstract predicate  reachable disjunction abstract fix verify verx fix logically implies desire conclude otherwise verx attempt construct counter succeed output counter fails asks user additional predicate implement standard abstraction refinement technique automate predicate discovery IV model background ethereum blockchain formalize behavior formalize notion bundle behavior verx ethereum overview ethereum blockchain distribute storage account user account contract account user account entry user interact submit transaction contract account simply contract autonomous transaction contract associate program executes incoming transaction private storage persist data across transaction execution sequence external transaction nest internal transaction internal transaction message proceeds sequence command command load data private storage perform local computation affect storage initiate nest internal transaction EVM behavior sequence machine blockchain stack frame per nest internal transaction execution ethereum blockchain sequence external transaction define transaction initiate message defines address recipient sender account ether possibly zero transfer sender recipient account possibly empty data recipient user account data empty transaction transfer ether sender recipient otherwise recipient contract data identifies function contract program argument function upon reception message contract program execute ethereum virtual machine EVM modify contract storage accordingly execution command storage associate fee execution abort accumulate fee exceed contract program message transaction contract transaction behave standard procedure meaning caller callee transactional semantics internal transaction procedure nest nest transactional model abort internal transaction  storage nest internal transaction transaction initiate user nest transaction external transaction finally execution ethereum blockchain sequence external transaction illustrate model account user function crowdsale contract function escrow contract correspond external transaction omit non transaction consists message amount ether message ether transfer processing transaction message amount user processing transaction message escrow ethereum behavior behavior EVM sequence machine EVM execution EVM EVM formalize schematic description machine blockchain stack frame per active nest internal transaction blockchain account data mapping account address account contract account consists contract program storage balance frame contains message activate program fragment execute program counter local scratchpad memory remain available execution EVM operates byte numeric address unsigned integer contract storage frame memory address bundle behavior requirement bundle contract constrain EVM behavior EVM behavior obtain behavior bundle extract sequence transaction recipient bundle blockchain capture II establish approach concurrency extract behavior EVM behavior without external callback without concurrency specification directly constrain EVM behavior transaction isolated external callback remain EVM behavior impose generic correctness criterion bundle definition entry transaction EVM behavior transaction execute contract transaction execute contract EVM behavior transaction escrow claimRefund escrow claimRefund entry transaction external transaction executes contract escrow transaction executes contract escrow transaction execute contract outside bundle escrow crowdsale EVM execution external callback contains entry transaction nest another entry transaction behavior external callback escrow claimRefund nest inside escrow claimRefund msg message initiate blockchain definition bundle behavior correspond external callback EVM execution sequence msg source entry transaction EVM execution transaction behavior transaction message blockchain restrict contract bundle effective external callback freedom criterion impose bundle EVM behavior equivalent external callback execution adapt effective callback freedom criterion internal callback within entry transaction execute sequentially criterion variant conflict serializability brevity actual criterion sufficient standard formalize construct graph digraph capture dependency operation digraph acyclic definition serialization digraph EVM execution vertex entry transaction operation precedes EVM execution modifies blockchain modify intuitively indicates blockchain depends execute earlier entry transaction involve circular dependency logically interrupt callback outside bundle definition bundle effectively external callback EVM execution acyclic serialization digraph specification express bundle behavior linear temporal logic LTL brief introduction detail refer linear temporal logic formula LTL inductively define atomic formula logical temporal connective apply formula  source formula interpret bundle behavior atomic formula directly refer message blockchain formula withdrawn transaction withdraw function formula sum deposit escrow balance  sum deposit mapping balance escrow contract boolean connective interpret standard temporal connective previously evaluates previous exists return false otherwise  connective define useful connective SourceRight click MathML additional feature LTL formula formula connective bundle behavior conversion non temporal formula LTL formula sufficiently expressive capture safety equivalent assertion non temporal formula allows convert assertion reuse standard safety verification technique convert LTL formula non temporal encode semantics connective behavior contract introduce auxiliary variable truth temporal subformulas demonstrate temporal formula claimRefund sum deposit goal SourceRight click MathML additional feature subformula connective temporal subformula sum deposit goal source introduce variable truth update accord semantic finally rewrite non temporal formula sum deposit goal source syntax auditor developer specify extend solidity syntax temporal quantifier denote operator previously prev convenience aggregate function mapping denote sum deposit refer transaction data signature argument solidity syntax logical connective expression user introduce implication VI delayed abstraction verification verify LTL specification bundle contract apply abstract interpretation symbolic domain employ predicate abstraction without conversion boolean program approach flanagan  transformer alternate precise symbolic transformer handle individual command imprecise transformer ensure convergence contrast classic abstraction applies imprecise transformer hence precise imprecise approach delayed abstraction verx receives bundle contract solidity LTL specification behavior bundle convert LTL specification assertion assume assertion verx compiles contract EVM bytecode performs abstract interpretation bytecode compile EVM simpler solidity discussion concise assume bundle described blockchain address contract program  deterministic program initial blockchain behavior bundle  program non deterministically executes transaction bundle compile code verx verify program      source ignore assertion program behavior bundle contract verification amount message behavior recall behavior bundle define IV concrete semantics denote sem goal verify sem source abstract interpretation concrete semantics infeasible compute establish directly restrict abstract interpretation address issue soundly approximate concrete semantics abstract semantics sem verification easy sem source approximation sem message encode abstract semantics extends concrete semantics sem sem SourceRight click MathML additional feature soundness implies compute abstract semantics abstract interpretation mimic concrete semantics compute powerset lattice message behavior bundle reinterpret program bundle concrete transformer   SourceRight click MathML additional feature concrete semantics sem simply fix monotone   source compute sem abstract interpretation replace concrete domain abstract domain concretization function source define abstract transformer instead concrete init source mimic concrete computation equip abstract domain lattice structure operation allows define abstract semantics sem fix init source obtain approximation abstract transformer  init  source summarizes abstract interpretation approach model non determinism precisely powerset domain another domain concretization function source verification via powerset domain delayed abstraction discus abstraction verx apply delayed abstraction elegant delayed abstraction address imprecision invariant broken intermediate program smart contract typically occurs transaction temporarily invariant inside restores execution imprecision delayed abstraction simply delay abstraction transaction employ precise symbolic domain within transaction fix computation precise domain converge transaction switch precise predicate abstraction domain PA PA abstract transformer precise symbolic execution predicate abstraction ase source perform symbolic execution symbolic domain consists formula message model source restriction formula smt solver handle SE formula formula symbolically executes feasible program   processing formula per feasible program postcondition respect SourceRight click MathML additional feature processing formula described intermediate formula delayed abstraction PA cube conjunction literal fix predicate abstraction PA SourceRight click MathML additional feature project formula onto PA SourceRight click MathML additional feature literal processing cube domain important predicate abstraction predicate compute abstract imprecise desire specification typically atomic subformulas specification verification fails increase automatically extract predicate program define predicate extract program sufficient precision realistic IX verification fails user additional predicate principle extend perform standard abstraction refinement automatically discover predicate vii practical solidity fragment effectiveness delayed abstraction relies precise symbolic execution realistic contract building arbitrary solidity contract however challenge due turing completeness define practical fragment solidity contract enables precise scalable symbolic execution summarize restriction explain detail loop recursion symbolic execution fails terminate program contains unbounded loop recursion ethereum however transaction execution costly consume moreover cannot exceed limit imposes bound budget transaction unbounded loop recursion anti fragment solidity contract without recursion loop bound contract finitely fully analyze symbolically extend fragment loop solidity loop packed loop merely multiple independent function transaction purpose verification loop eliminate without semantics bundle transaction invoked multiple args split multiple transaction source verx automatically detects soundly bound loop solidity fragment verx external contract ethereum blockchain permit bundle contract external contract contract bundle contract source external contract potentially unbounded callback bundle deplete infeasible fully analyze symbolic execution address challenge contract satisfy effective external callback freedom define IV implies behavior contract external callback equivalent behavior without external callback define smart contract satisfies exception propagation internal transaction consumes allocate terminates exception undo storage execution resume transaction amount arbitrary behavior implies potential branching omit branching explode program symbolically execute avoid explosion contract propagate exception stack effectively revert bundle transaction transaction blockchain execution ignore storage access mention VI analyze solidity directly EVM bytecode obtain compile solidity code challenge EVM bytecode important information lose compilation challenge compound structure array EVM lack primitive consequently array splice array therefore compound specific hash allocation scheme solidity compiler illustrate scheme array array unique identifier distribute accord sha SourceRight click MathML additional feature array allocate address sha hash identifier span subsequent allocation scheme valid distinct allocate disjoint storage validity model analyze array access precisely sha collision guarantee distinct distinct address sha hash sufficiently apart distinct overlap assume solidity contract however violate contract directly access storage inlined assembly restrict inlined assembly bundle contract unsupported instruction finally fragment ignore contract execute external code context bundle contract instruction callcode delegatecall destroy bundle contract instruction suicide execution external code entail security risk attacker execute arbitrary code gain destination address delegatecall instruction due security risk instruction exclude bytecode proposal aim improve security EVM creation destruction contract omit behavior simplicity verx detail verx symbolic execution predicate extract contract optimization verification symbolic execution verx symbolic execution EVM avoids pitfall exist detailed evaluation IX symbolic execution extends standard technique unique feature solidity allocation solidity hash function contract approximation mechanic model sum array mapping although solidity verify relevant symbolic perform symbolic execution machine symbolic encode precisely vector EVM storage memory encode theory array external contract model  constant effective external callback freedom  contract bundle satisfy  proxy forbids bundle blockchain external contract writes transfer ether storage variable reading bundle blockchain external contract access contract balance storage variable latter allows external contract guarantee callee cannot due limited budget modify bundle blockchain  statement transfer frequently developer transfer ether contract callee exception propagation standard function invocation solidity automatically propagate exception propagate caller propagates exception perform dataflow analysis verify contract reverts fails model allocation mention unique aspect solidity EVM hash allocation scheme location storage apply sha hash function challenge sha complex function model precisely smt constraint cripple symbolic execution interpret sha simpler function ensures assumption mention namely hash collision sufficiently hash approach smart contract verify access memory solidity primitive access raw memory directly ensure memory access forbid inline assembly solidity source encode simpler function function sha SourceRight click MathML additional feature per input sha invocation bytecode encode behavior function extra smt constraint importantly constraint specify function completely assume function verx verification function satisfies weak assumption constraint ensures collision collision principle union function sha impossible domain function codomain ensure injectivity domain instead symbolic execution separately ensure injectivity possibly symbolic argument execution argument apply sha constraint collision within  sha SourceRight click MathML additional feature sha function pseudo inverse function sha collision sufficiently distinct input  sha source address disjoint interval concrete bound apart interval constraint instead  sha sha  linearly union instead quadratic reduce load smt solver significantly constraint ensures hash apart constraint   sourcewhere sufficiently address concrete symbolic concrete execution transfer possibly symbolic ether address bundle contract account model precisely activate contract program frame concrete account external treat user account meaning action beyond transfer mention treatment bundle contract satisfy effective external callback freedom address symbolic execution non deterministically selects address bundle contract treat symbolic address external user account execution proceeds mechanic implement mechanic terminate symbolic execution along infeasible exception guaranteed concretely bound  symbolic cannot precise simply fee operation argument therefore concrete execution symbolic budget  specify message initiate budget unbounded specify user constant initiate transfer callee finally considers   infeasible guaranteed revert due exception sum another feature sum array mapping numeric although sum feature EVM enable specify important sum designate variable sum symbolic sum sum sum SourceRight click MathML additional feature extract predicate delayed abstraction sufficient predicate successfully verify verify contract IX identify important predicate atomic formula atomic formula sum deposit escrow balance encode pointer contract instance motivate extract predicate capture escrow escrow instance owner crowdsale instance enum bool encode boolean enumerate motivate extract predicate encode variable constant encode constant variable motivate extract goal predicate define user verx automatically extract predicate classify constant traverse contract abstract syntax ast detect contract boolean enum contract define predicate capture boolean verx predicate enum verx predicate variable verx predicate contract verx predicate predicate capture serf predicate benchmark instance per contract predicate verx infers instance future extend verx analysis improve precision complex abstraction non linear arithmetic analysis verx abstraction non linear arithmetic non linear arithmetic challenge smt solver unnecessary verx option abstract non linear computation multiplication substitute  function user disable enable abstraction whenever analysis majority IX evaluation verx evaluation verx ethereum project focus safety contract effective verx verify safety smart contract precise symbolic execution verx exist symbolic ethereum server intel cpu core ghz GB memory ubuntu python benchmark report benchmark requirement formalize benchmark available http github com eth sri verx benchmark benchmark benchmark consist overview ethereum project project deployed ethereum solidity code relevant statistic prevalence  token benchmark reflect deployed ethereum contract verify contract significant amount fund worth USD project deployment contract define initial project contract mention project professionally audit expert violation fix fix version verify typical elicit inspect documentation formalize requirement insight requirement classify distinct category II along concrete benchmark user access requirement define user invoke critical function II crowdsale project zeppelin project stipulates primary specific user address invoke function deposit attribute authorization user token function foo define authorization invariant II  project permit function  closing machine requirement define transition contract contract explicit variable involve temporal quantifier II ICO project stipulates contract refund cannot transition finalize vice versa invariant aggregate contract mapping solidity contract iterate mapping contract auxiliary variable aggregate information invariant establish correctness invariant II  contract sum balance token token requirement multi contract invariant finally contract impose invariant bundle contract project II mana project continuous sale owner token crowdsale contract statistic ethereum project verify contract verx report effectiveness verx verify benchmark verx successfully verify split verify inductively abstraction verify average symbolic average execution verify abstraction predicate verify project  verify abstraction report enum bool predicate boolean predicate illustrate important verify inductively average verification inductive non inductive outlier mana  project verify due complex constraint verx implement standard optimization slice program guaranteed abstract predicate truth symbolic demonstrates complexity analysis verx explores abstract verify II encounter audit concrete benchmark II encounter audit concrete benchmark experimental verx verification inductive delayed abstraction experimental verx verification inductive delayed abstraction IV comparison verx symbolic execution symbolic IV comparison verx symbolic execution symbolic finally project custom predicate verify indicates verify extra predicate extract automatically remain project predicate classify predicate crowdsale crowdsale goal sum escrow deposit crowdsale predicate function precondition define statement easily extract automatically importance derive predicate benchmark non inductive therefore additional predicate verify inspect relevance predicate derive automatically verx report finding predicate predicate essential bundle contract effectively external callback  bundle contract storage satisfy impose verx external function invest crowdsale escrow contract without additional predicate variable escrow abstract away meaning address external contract abstraction verx fails verify specification function writes variable avoid false alarm verx automatically predicate crowdsale escrow escrow prof variable escrow escrow bundle contract avoids abort verification boolean enumerate predicate overview verx predicate escrow refund SourceRight click MathML additional feature predicate capture transition escrow without verx analyzes spurious trace violate concretely verx fails escrow cannot transition escrow refund escrow vice versa fails verify verx symbolic execution finally verx symbolic execution oyente mythril  smart contract security project security expert maintain collection vulnerable smart contract benchmark consists assertion arithmetic fail assertion respectively IV report detect TP FN falsely report FP correctly unreported TN violation timeout verx outperforms symbolic execution precision verx false negative false positive verx report FP synthetic remain decrease execution verx approximates mechanic verification related closely related predicate abstraction predicate abstraction successful verify safety slam automatically construct boolean program program verify blast increase precision predicate derive proof infeasible trace  magic murphy java pathfinder predicate abstraction verification mostly program analyze apply refinement abstraction author refinement partition trace inspire approach contrast tailor contract applies abstraction transaction symbolic execution symbolic execution successful violation program mitigate explosion due loop recursive heuristic uncovered code constrain depth fitness function chop function function loop summary reuse repetitive computation concrete input symbolic author symbolic execution prune irrelevant verify regular input independency assumption reduce via subsumption author combine symbolic execution abstraction analyze program manipulate array context contract symbolic ethereum multiple transaction employ heuristic exploration contrast symbolic precise evaluation handle hash collision efficiently analysis temporal analysis temporal author approach violation LTL formula author verification LTL formula uml model verify temporal llvm linear integer arithmetic program  verifies existential CTL formula existentially quantify horn clause counterexample approach clause  enable express usage operation protocol evaluate express  static analysis verification smart contract declarative static analysis datalog identify generic security vulnerability ethereum contract focus data related vulnerability   identify vulnerability abstract syntax contract source code analysis target vulnerability due callback contract contrast approach verification temporal  defines formal model EVM lem formal EVM semantics define define framework  hol approach formal guarantee precise false positive framework non trivial automate contrast target automate verification temporal analysis temporal smart contract author manually encode verify coq contrast automatic approach analyze temporal safety XI conclusion verx verifier automatically temporal safety ethereum smart contract verifier careful combination reduction temporal safety verification reachability efficient symbolic execution compute precise symbolic within transaction delayed abstraction approximates symbolic transaction abstract delayed abstraction allows verifier reduce potentially unbounded concrete contact finite bound representation maintain precision thanks employ precise transaction demonstrate verx practical automatically prof ethereum project verx effective verify custom functional smart contract