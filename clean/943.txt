effective implementation prime probe channel attack cache capacity covert channel attack creates demonstrate core VM attack multiple version GnuPG technique achieves attack resolution without rely weakness OS virtual machine monitor memory attacker victim introduction infrastructure service IaaS compute service virtualized resource user tenant virtual machine VM fundamental economy resource utilization achieve provider host multiple vms hardware  rely underlie virtual machine monitor VMM isolate vms schedule resource virtualization creates illusion strict isolation exclusive resource access reality virtual resource physical resource potential interference host vms malicious VM information data victim VM conduct channel attack cryptographic implementation previously demonstrate channel resolution sufficient cryptanalysis attack cache however data instruction cache denote  private processor core limit practicability attack VMMs likely multiple owner vms core contrast cache llc typically core package constitutes realistic attack vector model multi core processor however llc magnitude access cache drastically reduces temporal resolution observable channel bandwidth publish llc attack unsuitable cryptanalysis exception flush reload attack relies memory achieve resolution virtualization vendor explicitly advise memory vms IaaS provider ignore advice attack fails adaptation prime probe technique practical llc attack exploit hardware feature outside provider inclusive cache controllable generally enable VMM performance mapping beyond assumption host environment attacker victim host processor package specifically contribution demonstrate asynchronous prime probe attack llc core memory attacker victim exploit VMM weakness typical server platform unknown llc hash scheme recent intel processor IV develop technique enable efficient llc prime probe attack algorithm attacker probe exactly cache without virtual address mapping temporal access instead conventional spatial access identify victim security critical access IV achievable bandwidth VM covert timing channel VM channel attack extract secret dependent execution demonstrate modular exponentiation  decryption implementation VI furthermore attack secret dependent data access demonstrate slide modular exponentiation implementation  GnuPG version vii II background virtual address executes private virtual address compose contiguous address typical KiB although processor MiB GiB ubiquitous processor architecture mapped arbitrary frame physical memory virtualized environment address virtualization virtual address guest notion physical address VM emulate physical memory guest physical address physical address processor purpose guest physical address irrelevant virtual address guest virtual address application physical address refer actual host physical address translation virtual physical frame processor cache recently entry translation aside buffer tlb tlb scarce processor resource entry tlb efficiently entry memory performance application memory oracle database performance compute application benefit VMMs VMware  xen  mapping guest physical memory model cache architecture server typically multi core processor multiple processor core chip cache llc memory cache hierarchy access memory processor faster memory cache reduce effective memory access processor processor feature hierarchy cache cache closer processor core faster cache closer memory core typically private cache data instruction LI cache typical LI cache KiB cycle access intel core xeon llc core multicore chip unified cache data instruction llc megabyte access latency cycle processor typically core private unified cache intermediate latency memory access access cache request hierarchy cache access memory LI typically indexed virtual address cache indexed physical address cache access exploit spatial locality cache organize fix allocation transfer cache hierarchy typical byte address offset datum cache cache usually associative organize associative cache cache access index address  consecutive cache remain tag cache cache tag address tag identify cache cache cache index GiB address cache slice contains memory cache memory cache potentially cache contention access cache cache evict cache slot cache fetch cache memory llc cache replacement policy determines evict typical replacement policy approximation recently lru define relationship cache inclusiveness cache cache strict superset content llc intel processor inclusive intel processor sandy bridge microarchitecture complex architecture llc improve performance llc per core slice bus slice access concurrently effectively cache although bus ensures core access llc latency remote slice uniformly distribute memory traffic slice intel carefully undocumented hash function address exclude offset slice within slice access traditional cache cache llc uniquely identify slice index bus architecture slice llc sandy bridge tag compute hash core core address minus offset challenge attack llc attack model target information leakage virtualized environment IaaS assume attacker VM resident victim VM multi core processor victim VM computes confidential data cryptographic assume attacker crypto software victim assume vulnerability VMM specific VMM platform assume attacker victim core memory attacker synchronizes execution victim prime probe llc core VM attack prime probe technique attacker cache access victim VM attacker spy monitor cache usage victim prime cache code data idle pre configure interval executes utilizes cache probe execution load data code prim access cache evict observes increase memory access latency probe phase access cache prime phase subsequent observation overview challenge efficient prime probe attack llc construct efficient prime probe attack llc harder cache identify challenge explain subsection visibility core memory access another core via llc significantly longer probe llc identify cache correspond security critical access victim without probe llc construct eviction occupy exactly cache llc without address mapping probe resolution visibility processor memory activity llc cache satisfy processor memory access llc visibility victim memory activity cache attacker llc victim manipulation llc impact cache victim VM victim access code data llc hidden attacker leverage cache inclusiveness replace victim data cache hierarchy without access victim local cache infeasibility prim probe llc conventionally cache prime probe technique prime probe entire cache machine technique analyze cache footprint identify spatial associate victim memory activity infeasible achieve resolution llc magnitude cache MiB versus KiB overcome challenge pinpoint cache correspond relevant security critical access victim monitor cache prime probe instead monitoring llc identify cache relevant security critical victim code data identify cache relevant victim security critical access however challenge attacker virtual address security critical access victim address virtual address mapped physical address challenge scan llc monitoring cache temporal access cache consistent victim perform security critical access specific temporal access algorithm delay detailed discussion VI vii exponentiation slide exponentiation GnuPG algorithm specific security critical identify eviction occupy exactly cache monitor victim access specific cache pinpoint cache access victim attacker occupy specific cache achieve attacker construct eviction collection memory address specific cache cache contains cache eviction memory evict cache replacement policy replaces recently load lru replacement policy intel processor fifo replacement eviction guarantee prior data evict construct eviction virtually indexed cache trivial attacker virtual address arbitrarily virtual address index contrast llc physically indexed target specific cache attacker partially recover address mapping challenge VMM address mapping accessible attacker slice cache intel processor II complicates attack physical address memory sufficient eviction slice unknown attacker IV discus construct eviction without reverse engineering hash function probe resolution extract grain information cryptographic probe resolution spy asynchronously without preempt victim probe resolution llc victim preemption fundamentally limited attacker perform probe cache llc typically associativity cache versus hence memory access completely prime probe cache probe increase due longer access latency llc factor recent intel processor resident llc attacker perform probe llc cache due associativity furthermore llc cycle latency cache latency cycle consequence probe llc magnitude probe cache characterize probe resolution llc channel capacity llc covert channel IV construct eviction methodology hidden mapping utilize II performance tune application OSes VMMs reduce tlb contention VMM allows guest physical memory frame actual physical memory purpose eliminate virtual address mapping OS VMM MiB index within offset cache index invariant address translation llc effectively virtually indexed reduction tlb interference mapping attacker assumption victim address mapped recent intel CPUs sufficient llc slice memory index llc slice instead attempt reverse engineer likely processor specific hash function construct eviction conflict memory address specifically allocate buffer twice llc buffer potentially conflict memory address index address algorithm eviction algorithm eviction index slice creates conflict contains subset potentially conflict memory slice exactly memory conflict cache conflict effectively union eviction slice eviction contains exactly cache slice algorithm partition conflict individual eviction slice algorithm function probe candidate memory conflict access evicts candidate llc function data candidate ensure cached access memory access reading candidate cached access evict conclude contains cache candidate access eviction candidate algorithm creates conflict iteratively conflict conflict intel hash function distribute potentially conflict evenly across llc slice hence buffer twice llc construct desire conflict listing code probe cache listing code probe cache partition conflict algorithm candidate memory conflict algorithm iterates member conflict remove member candidate conflict conflict remove member remove conflict member cache llc slice candidate iterate member conflict eviction cache candidate slice index core processor index llc slice therefore eviction index straightforward construct eviction index without procedure index otherwise algorithm index implement prime probe attack eviction implement prime probe attack implementation pointer chase technique organize memory eviction link random random permutation prevents hardware prefetching memory eviction listing assembly code probe cache input register pointer link  instruction traverse mov instruction memory eviction pointer memory mov instruction data dependent previous access memory fully serialize upon completion register eax contains lfence instruction instruction completion ensures precede load instruction progress load execution lfence intel recommends  instruction serialization instruction however    instruction emulate VMM suitable purpose timing attack optimization optimization scheme minimize probe variation thrash mention II probe cache implicitly prime subsequent observation however due cache approximate lru replacement policy traversal prime probe stage thrash eviction attacker data victim evicts attacker probe evict evict probe doubly link reverse traversal probe stage minimize eviction access interaction cache attacker data partially cached cache retrieve data cache faster reading llc hence variation content affect cache probe introduce measurement cache timing difference cycle access llc access variation cycle difference llc memory access interaction cache tends associativity llc cache cache portion eviction llc optimization instead probe load eviction approach reduces multiple cache increase probe probe resolution via channel capacity measurement probe resolution effectiveness propose technique willing transmitter construct covert channel characterize channel capacity covert channel protocol algorithm timing cache channel protocol efficient technique IV eviction sender receiver execute concurrently without synchronization return zero RZ encode scheme sender receiver allocate buffer llc arbitrarily chosen cache index preferably without interference non participate memory access sender allocate buffer memory cache index sender continuously access amount tmark similarly sender continuously access tmark RZ encode scheme consecutive amount  monitoring sender receiver algorithm eviction prime probe continuously monitor maximize channel capacity idle interval successive probe zero construct covert channel dell server platform xen VMM HP desktop platform VMware ESXi configuration default configuration VMMs transparently guest physical memory frame host physical memory configuration xen native mode  instruction avoid emulate VMM sample sequence receiver measurement interleave zero transmit clearly peak trough vice versa correspond sequence receiver sample pause duration avoid overlap indicates threshold cycle duration receiver longer tmark sender cycle receiver probe longer cycle algorithm covert channel protocol experimental platform specification covert channel suffers various transmission error loss insertion extra flip conduct pause duration channel capacity error rate sender generates pseudo random sequence  linear feedback shift register LFSR width LFSR exhaust zero therefore maximum consecutive consecutive zero respectively decode signal receiver probe sequence consecutive probe longer threshold cycle server cycle desktop sequence consecutive probe threshold sample sequence receiver access server platform sender transmits sequence tmark  cycle sample sequence receiver access server platform sender transmits sequence tmark  cycle estimate error rate identify  synchronize signal  calculate edit distance  data edit distance calculates insertion deletion substitution operation transform another measurement fix tmark cycle  channel capacity error rate covert channel channel capacity error rate increase pause duration reduces error rate channel capacity pause synchronization lose sequence consequently consecutive loss error  increase error rate server desktop leveling respectively insertion flip error dominate loss error desktop error rate server variance desktop llc associativity interaction cache tends associativity cache counter intuitively channel capacity generally powerful server desktop server llc associativity probe slightly rate takeaway overall bandwidth desktop error rate although probe llc longer cache balance efficiency gain concurrent execution sender receiver bandwidth previously report channel capacity llc covert channel comparison channel width error rate unfortunately error rate mention compatible nevertheless reduce channel bandwidth error rate server platform data transfer rate faster raw transfer rate report longer duration receiver sample per reduce error rate pronounce pause duration pursue VI attack exponentiation algorithm approach leak secret recover secret dependent execution implementation modular exponentiation exponentiation modular exponentiation operation modulo rsa  decryption leak exponent recovery private algorithm computes  scan binary representation exponent binary representation calculates sequence intermediate  formula  algorithm pseudo code implementation trace activity cache highlight trace cache code operation algorithm exponentiation multiplication modulo reduction directly correspond exponent occurrence reduce reduce corresponds occurrence reduce corresponds zero consequently attacker trace execution exponentiation algorithm recover exponent attack algorithm technique developed IV challenge cache relevant victim code channel attack specific detail attack develop attack implementation GnuPG version victim default compiles code optimization leaf debug information binary debug information load affect performance optimize code victim repeatedly executes GnuPG binary decrypt file encrypt  public GnuPG wiener  wiener return GnuPG safety margin technique fairly independent specific hardware platform apply experimental platform processor inclusive cache mapping implementation algorithm algorithm execution depends secret information implement attack core attack monitor operation processing modulo reduction another reduction contrast reduction hence subsequent  recover exponent trace cache activity access trace cache fix slot cycle multiple probe within operation within slot prime cache slot probe cache trace cache trace cache slot shade slot activity detect trace cache demonstrates cache access almost continuously others almost access whereas others access sporadically highlight cache exhibit activity code typical pulse activity span slot pause pulse around slot slot addition variation pulse slot pause slot easily exponent reading pulse interval pulse longer interval identify cache correlate trace cache contains pulse slot activity activity another without activity trace trace potential candidate cache pas candidate user decision trace indeed cache optimization cache leverage information GnuPG binary reduce installation GnuPG binary standard distribution therefore assume secret attacker access binary analyze offset code overlap KiB offset cache index attacker cache index offset victim code reduces factor distribution capture error distribution capture error optimization average execution victim cache code desktop platform llc server platform twice execution access information script parse distribution capture error desktop server platform exponentiation capture desktop platform exponent significantly longer significantly shorter server platform distribution capture error remain desktop server capture exponentiation vii attack slide exponentiation previous recover secret dependent execution attack secret dependent data access implementation slide exponentiation algorithm slide exponentiation exponent slide representation exponent sequence zero non zero slide representation non zero satisfies hence non zero odd algorithm computes exponentiation slide representation exponent algorithm slide exponentiation usage multiplier exponentiation vertical pre computation exponentiation axis multiplication exponentiation algorithm scan exponent significant significant execute whenever significant non zero multiplication perform multiplier  non zero performance algorithm pre computes multiplier  odd unambiguously indexed compute multiplier bmod respectively thwart recovery sequence flush reload attack GnuPG routine calculate unless explicitly mention otherwise multiplication refer execution routine GnuPG implementation slide algorithm performs sequence multiplication operation however leak information statement algorithm pre compute multiplier non zero attacker hence non zero pre compute multiplier sufficient completely recover exponent VI tailor attack specific implementation algorithm version GnuPG victim repeatedly decrypts file encrypt  public multiplier usage core attack monitor pre compute multiplier multiplication operation define multiplier usage multiplier vector operand multiplication operation exponentiation concrete display multiplier usage horizontal usage multiplier multiplication multiplication execute decryption  exponent GnuPG multiplier exponentiation multiplication precomputation phase operation  multiplier occupy cache usage multiplier multiplication pre computation phase regular calculate calculate odd multiplier operand multiplication multiplication operand pre computation phase access precomputation phase capture slot multiplication exponentiation access usage useful identify multiplier usage exponentiation phase irregular however calculate statistical data distance non zero average non zero exponent non zero multiplier   hence multiplier access exponentiation combine usage multiplier recover straightforward multiplication multiplier identify operation remain multiplication operation multiplier identify identify multiplier cache attack identify cache corresponds multiplier attack VI scan cache sequence slot span execution  decryption however significant difference attack VI multiplier multiplication operation naive trace cache activity multiplication operation therefore measurement cache activity align sequence multiplication operation location multiplier unknown execution exponentiation multiplier heap memory dynamically allocate execution exponentiation hence multiplier location information obtain exponentiation cannot multiplier subsequent exponentiation furthermore execution exponentiation monitor cache multiplier multiplier probability depends multiplier cache contrast attack VI location cache code fix execution exponentiation access multiplier sparse irregular VI access cache code regular temporal easily recognize however exponentiation multiplier information temporal access multiplier nutshell strategy trace cache activity multiplication operation simultaneously monitor cache scan cache potentially multiplier cache multiplication code sequence multiplication serf measurement although temporal access multiplier cache correspond multiplier cache activity presence usage multiplier therefore cluster scan cache cache activity multiplication operation multiplier usage precomputation phase regular distinct leverage knowledge identify corresponds multiplier statistical information multiplier exponentiation phase leveraged cluster attack outline cache contains multiplication code cache activity trace cache vii filter trace statistical multiplier access vii cluster trace amplify signal vii analyze cluster recover multiplier usage calculate exponent vii exception attack automate vii attack experimental platform cache activity trace purpose trace cache activity victim multiplication operation trace vector multiplication exponentiation describes cache access multiplication operation absence cache multiplier trace cache usage multiplier however due activity due capture error nevertheless trace cache usage multiplier trace reuse VI identify cache multiplication code scan cache activity cache scan slot cycle scan simultaneously monitor scan cache cache multiplication code within slot prime cache slot probe activity information obtain cache multiplication code identify victim performs exponentiation multiplication operation activity scan cache multiplication construct trace detailed description handle cache multiplication code appendix decryption slot scan slot contains exponentiation therefore sample trace scan refer reader appendix discussion trace filter unexpected trace multiplier llc trace scan correspond cache multiplier reduce amount data phase leverage statistical knowledge multiplier usage filter trace unlikely multiplier vii multiplication operation access twice multiplier access sequence multiplier subsequent exponentiation phase therefore discard trace activity multiplication furthermore remove trace activity within multiplication cluster trace absence trace cache multiplier identical multiplier usage usage cache multiplier identical moderate cannot identical rely similarity trace multiplier thereby converge towards actual usage multiplier multiplication operation attack trace highly likely capture multiple trace multi  trace hierarchical cluster algorithm edit distance trace similarity cluster algorithm quadratic trace demonstrates cluster trace usage multiplier identify correspond multiplier cluster recover usage pre compute multiplier directly expose exponent vii identify cluster usage multiplier fairly straightforward accord statistical information multiplier usage vii easily cluster expectation therefore focus error correction mapping cluster correspond multiplier unlike previous automate manual processing explain capture error sample cluster cluster trace horizontal trace multiplier cache indexed multiplication sequence shade multiplication index scan cache activity solid vertical truth activity usage multiplier obtain victim activity detect due scan cache independent multiplication activity easily identify trace cluster another advance exponentiation trace deviate truth deviation pause victim operation attack interpret multiplication operation multiplication appendix fix evidently perfect error trace align trace cluster access correspond multiplier remove spurious access progress trace lastly assign trace pre compute multiplier multiplication knowledge precomputation phase algorithm cluster trace multiplication operation multiplier occurs index accord sequence multiplication pre computation stage conclude cluster usage multiplier processing cluster technique identify usage pre compute multiplier cluster trace attack platform attack victim VM repeatedly execute GnuPG program decrypt text file attacker continuously another VM activity llc II summarizes II attack slide attack spent online attack observation cache due cache observation server platform filter observation activity multiplier trace pas cluster algorithm offline phase cluster average cluster around trace minimum expert manual processing cluster completely recover actual usage multiplier recover related prime probe technique attack processor cache data cache instruction cache prediction cache cache core private attack exploit hyper thread multiplexing core prime probe implement VM attack   GnuPG version attack relies exploit weakness xen scheduler non zero probability spy victim core attack constant decryption data contrast llc attack vector core trick scheduler processor core faster attack llc covert channel  describes covert channel capacity KiB explain attack recovers address mapping covert channel environment achieve bandwidth extend attack reporting channel capacity focus cache probe cache achieve transfer rate accurately mapping cache attack achieves bandwidth prior llc channel attack due channel capacity llc channel typically leak grain information attack leak information residency traffic rate keystroke timing channel detect non cooperate resident vms attack improves achieve granularity enables leak cryptographic   attacker victim memory library technique achieve efficient VM core llc attack technique scenario attack remove requirement memory powerful recover GnuPG crypto software advanced slide technique modular exponentiation impossible flush reload attack concurrent describes synchronous llc prime probe attack aes IX mitigation fix GnuPG approach fix GnuPG prevent information leak exponent blinding split exponent modular exponentiation perform combine alternative constant implementation conditional statement secret dependent memory reference technique constant implementation explore approach tricky recent demonstrate constant implementation openssl susceptible timing attack architecture reporting vulnerability GnuPG patch exponentiation algorithm fix exponentiation ensures access multiplier exponent constant implementation implementation multiplication modular reduction constant leak information implementation aware micro architectural attack exploit weakness avoid resource contention fix GnuPG clearly desirable address issue maintain isolation prevent information leak multi tenant environment llc attack resource contention effective countermeasure eliminate resource contention achieve granularity avoid residency coarse grain partition resource simply disallow vms tenant host processor package prevents llc attacker victim vms however approach fundamentally odds core motivation compute reduce increase resource utilization steady increase core economics shift cache partition cache partition grain resource partition approach partition cache approach partition cache achieve frame guaranteed cache VMM manage allocation host physical memory vms tenant mapped frame disjoint frame complicates VMM resource management memory wastage due fragmentation incompatible  performance benefit  proposes smarter utilize technology reserve stealth physical core security sensitive code data ensures security sensitive code data cache conflict code data however approach eliminate llc covert channel intel processor cache allocation technology partition cache defines service COS COS allocate subset cache partition llc  architecture presently  sufficient environment research effectiveness countermeasure llc attack grain cache partition dynamically load instruction lock security critical cache cache partition lock cache  propose wang lee however  lock data cache extend lock instruction diversification proposal secure cache randomize memory cache mapping randomizes resource contention attacker cannot extract useful information apply data cache without performance degradation llc investigate date fuzzy approach disrupt timing measurement reduce accuracy drawback impact benign application access resolution timer conclusion implement llc prime probe attack demonstrate llc bandwidth channel exceed approach core VM channel attack leak effectively crypto code secret dependent execution secret dependent data access demonstrate attack implementation  decryption GnuPG attack effective version GnuPG version assumption minimal rely cache inclusiveness utilize mapping attacker assume VMM frame guest physical memory beyond assumption environment victim repeatedly decrypts text memory across vms exploit VMM weakness attack VMMs hardware platform weak assumption attack  practical threat service however attack noisy environment setting environment attack future dependence mapping easy countermeasure disable VMM performance penalty client provider potential target provider likely keen defense adapt attack without although reduce efficiency fix GnuPG defeat specific attack prevent information leak software principle frequently execute secret computation constant vulnerable attack leverage hardware llc partition promising defense mechanism remains