 sensitive vul  code detection novel framework building vulnerability detection model fund leverage advance graph neural network GNNs develop novel graph capture program data dependency unlike prior treat program sequential sequence untyped graph fund learns operates graph representation program source code individual statement statement relational capture program syntax semantics fund code representation downstream software vulnerability detection task sufficient training data effective model combine probabilistic statistical assessment automatically quality training sample source project vulnerable code training sample complement limited vulnerable code sample available standard vulnerability database apply fund identify software vulnerability function program source code evaluate fund datasets program java swift php code vulnerability detection model experimental fund significantly outperforms alternative approach across evaluation setting introduction software vulnerability responsible attack data breach incident machine viable construct model identify software vulnerability training sample latent indicative vulnerable program machine model apply software project identify potentially vulnerable code exhibit vulnerable sample training data ample evidence machine technique exceed expert craft detect code vulnerability bug recent leveraged DL program structure identify potential software vulnerability source code classical machine technique DL advantage expert involvement tune representation program structure manually instead automatically capture determines training sample exist DL approach program model typically recurrent neural network rnns memory lstm variant approach treat source code correspond program structure abstract syntax ast sequence token however lstm sequential sequence ill model structure data program prior lstm capture shallow structure source code text fail capitalize define semantics program structure evaluation exist lstm approach accuracy vulnerability overwhelmingly false positive model complex code structure traditionally graph structure compiler code analysis approach directly graph representation code framework preserve data information capture essential code structure software vulnerability detect vulnerability buffer allocate deallocated across multiple execution introduce fund approach model code structure fund operates graph representation program source code capability aggregate multiple code relationship achieves leverage recently propose gate graph neural network  directly operating graph representation graph neural network GNNs  social network knowledge graph compile binary GNN apply develop practical efficient framework software vulnerability detection trivial standard GNN operates graph representation untyped cannot distinguish data information however information essential capture vulnerable buggy code demonstrate evaluation ignore code relationship recent vanilla GNN marginal improvement lstm alternative code vulnerability detection fund extends GNN capability distinguish model multiple code relationship data operation operand achieve encode code relationship relation graph learnable relation specific function propagate aggregate information across relation graph input program multiple relation graph explicit data syntactic information graph model capture richer intra program relation prior GNN approach richer relationship improves model ability useful program representation performance downstream code vulnerability detection task later employ GGNN model distinguish code relationship approach significantly outperforms alternative graph novel GNN extension potentially powerful capability code representation potential unlocked sufficient training data typical DL algorithm efficient model scarcity vulnerable training sample lack training data limit quality machine detection model sparse training data typical dimensional program prior approach program generation compiler however synthetic program significantly drawback bias grammar template model generate program reflect diverse evolve program hence model synthetic data generalize address scarcity vulnerability  data utilize wealthy historical information source project achieve model predict code commit patch code vulnerability vulnerability relevant commit code revision patch code vulnerability vulnerable source code snippet version patch commit translate practical data collection however trivial quality vulnerable code sample challenge exclude commits irrelevant software vulnerability code commits enhance performance functionality repair vulnerability failure exclude benign code snippet training sample confuse machine algorithm meanwhile impractical developer manually training sample due volume data ensure quality data developer intervention prior vulnerable training sample collection characterize assumption monolithic model vulnerability relevant commits approach fail examine model input another model perform however machine brittle uncertainty situation machine technique probability probability uncertain situation prediction introduce training data deteriorate quality model ensure quality training data approach adopt mixture expert scheme training data source project approach reduces data employ multiple predictive model refer expert prediction expert recommendation confidence model output evaluate confidence certainty recommendation apply conformal prediction statistically valid confidence prediction individual model recommendation confidence ability confidence prediction developer inspect confident prediction truth serf additional training data improve data collection model mixture expert approach improves quality training data perform vulnerability detection model scheme gradually continuously update data collection model minimum developer involvement demonstrate benefit fund apply detect function vulnerability program source code thoroughly evaluate fund datasets code commit vulnerable program java php swift fund SOTA detection software bug vulnerability SOTA automatic vulnerable code sample collection experimental fund consistently outperforms compete across evaluation setting discover code vulnerability false positive rate contribution multi relational gate graph neural network developed vulnerability detection sec IV combine probabilistic statistical assessment develop mixture expert approach address shortage vulnerable training code sample sec exploit transfer vulnerability detection model across program sec vii II background scope fund framework code vulnerability detection apply fund identify vulnerability source code fund predicts function contains potential vulnerability target function invoke standard library user define function intention uncover vulnerability instead detect unseen code contains vulnerable code training dataset therefore fund useful detect repeatedly software vulnerability bug focus detect vulnerability weakness define weakness enumeration cwe database concerned non vulnerable bug performance issue sensitive model data benign code vuldeepecker vuldeepecker SOTA vulnerability detection model upon bidirectional lstm BiLSTM sequence model incorrectly classify code vulnerability false positive sequence model linearize treat code structure sequential sequence token omits divergence consequently regard dynamic buffer attr deallocated freed benign code sample github vuldeepecker vuldeepecker misclassify code vulnerability buffer attr benign code sample github vuldeepecker vuldeepecker misclassify code vulnerability buffer attr data buffer attr rectangle data buffer attr rectangle capture data target program sensitive decision model infer buffer attr deallocated execution hence vulnerability capture syntactic information trading sequential representation graph data code relationship essential downstream processing task fund capability extend recently propose GNN architecture overview approach fund consists component GNN model identify potential software vulnerability source code automatic framework vulnerable code sample source repository github additional training data vulnerability detection model software vulnerability detection vulnerability detection model GNN propose model input source code target function construct program graph combine information extract abstract syntax ast program dependence graph  program structure graph statement identifier immediate graph node relationship data etc node exist multiple relationship node relation graph relationship sec IV node connectivity relation graph encode program graph matrix GNN program matrix initial node representation code representation embeddings vector numerical code embeddings downstream neural network prediction detection model offline training datasets standard software vulnerability database cve sard source repository model applies unseen program unlike prior multi relational GNN capture multiple code relationship significantly accurate detection vulnerability detection model sec IV training data collection vulnerable code sample source repository github develop automatic data collection framework framework aim vulnerable code sample complementary available standard vulnerable database vulnerability exposure cve software assurance reference dataset sard framework predictive model expert independently predicts code commit patch code vulnerability previous version software project identify vulnerability relevant code commits examine patch code previous version likely vulnerability identify code function vulnerable code training automatic data collection framework enables training dataset program commits customize linux kernel host github commit fix null pointer vulnerability commit fix performance issue vulnerability detect vulnerable code code extract commit exclude vulnerable training sample however exist approach incorrectly label revision vulnerability relevant commit commit message contains keywords null avoid mistake apply conformal prediction CP quantify confidence credential expert model prediction recommendation commit prediction trust model outcome CP improve quality data training data collection framework sec github commit github commit roadmap GGNN code vulnerability detection model sec IV training data collection model sec IV detect code vulnerability GGNN code vulnerability detection model overview model sec IV explain model structure sec IV organize program structure graph input model sec IV detailed description training model sec IV sec IV sec IV finally discus model interpretability issue sec IV overview detection model depicts workflow detection model input source code target program function construct ast code standard compiler parser extend ast additional data sequential information token sequence extend ast multiple graph statement code graph node relationship relationship node exist multiple relationship node relation graph relationship relationship node connectivity relation graph encode adjacency matrix code vulnerability detection detection model input ast  target code snippet function code vulnerability detection detection model input ast  target code snippet function GNN model structure building upon recent extend gate graph neural network GGNN model multiple code relationship extract source code GGNN consists stack embed model gate recurrent gru incorporate neighborhood across relation graph adjacency matrix relation graph initial node representation global embed vector standard fully network classification softmax layer graph representation code preprocessing preprocessing compiler parser rewrite variable consistent scheme ensures trivial semantic difference program choice variable affect choice token embeddings sec IV source rewrite apply normalize code extend ast normalize code extend ast program graph program graph construct ast contains syntax node  grammar ast node statement function declaration syntax token terminal identifier constant standard ast encode relationship ast node capture additional syntax data information additional ast described additional data integrate data extract  ast  ast token variable variable enclose guard expression  statement  ast node correspond  useful operand variable dependency  relationship diverge relationship important capture data vulnerability cwe improper resource lock  assignment expr variable token expression expr  capture variable buffer useful detect vulnerability null pointer dereference  standard ast induce syntax node  syntax token successor capture opcode operand statement information useful vulnerability cwe improper resource shutdown release capture api release   variable  capture variable variable statement variable  instance statement link occurrence loop variable buffer relationship identify vulnerability augment ast processing code relation graph relationship augment ast relation graph graph relationship described relation graph graph contains ast node existence relationship node adjacency matrix connection relation graph respective backward transpose adjacency matrix backward propagate information across relation graph graph node representation program graph node stmt token embed vector numerical wordvector network construct vector context source code proximity another vector embed wordvector mapping token construct training code corpus consists node token training program variable function constant arbitrary encode token capture information concatenate embeddings return variable constant function int integer variable ast node representation pas linear layer obtain initial representation node graph multi relational graph adjacency matrix initial node embeddings multi relational GNN generates global dimensional embed feature across relation graph neighborhood aggregation GNNs neighborhood aggregation scheme update node embeddings dimensional embed vector graph node compute embed layer recursively aggregate transform representation vector node node exchange information embed vector message neighbour along node message aggregate update associate node representation embed layer iteration update node fix iteration readout function aggregate node embed vector node embeddings aggregate information across relation graph node initial node embeddings generate wordvec network node embeddings aggregate information across relation graph node initial node embeddings generate wordvec network multi relation model unlike standard GNN model propagates aggregate information across multiple relation graph depict achieve learnable relation specific function compute graph individual relation graph neighborhood aggregation apply gru aggregate update node across relation graph formally propagation update  vertex relation graph obtain gru   SourceRight click MathML additional feature node gru learnable parameter initial node wordvec described sec IV inspire processing highway gate propagation employ layer wise highway gate GGNN sourcewhere input layer obtain sigma sigmoid function wise multiplication matrix bias vector gate respectively readout perform neighborhood aggregation procedure across multiple embed layer obtain another embeddings token entire program readout function concatenate graph representation across neighborhood aggregation iteration embed layer output vector global program representation relation graph concat SourceRight click MathML additional feature neighborhood aggregation iteration individual node embeddings readout function global embed relation graph training GNN GGNN offline training sample standard vulnerability database cve nvd source code data collection framework described sec model apply unseen program GGNN batch training sample batch consists positive negative sample goal minimize distance probability distribution predict actual entropy loss objective function function proven sigmoid softmax activation function GNN minibatch stochastic gradient descent sgd adam algorithm rate training terminates loss maximum training epoch sec vii training overhead vulnerability detection model comparable dnn scheme training perform offline impact user intuition fund machine technique dnns approach model interpretation theoretical analysis mechanism dnn remains outstanding challenge scope GNNs powerful weisfeiler lehman distinguish graph structure depict GNNs neighborhood aggregation strategy aggregate layer combine layer iteratively update representation node aggregate representation code fund learns allocation deallocation variable aggregate ast node malloc learnt information mapped numerical vector readout stage fund operation perform variable across program data graph training data collection quality training data GNN model leverage available data source project building data collection data collection expert model predict code revision vulnerability relevant essence expert committee comprise representative classifier sec expert model input feature II obtain commit message code commits refer predicts target code revision patch vulnerability expert model offline label training sample model apply unseen code commits unseen project sec sec vii mixture expert approach alternative model technique monolithic model II feature label vulnerability related commits II feature label vulnerability related commits mixture expert model depicts model mixture consists classifier vector machine svm random RF knn logistic regression LR gradient boost GB model useful prior model expert committee data label model consists multiple individual classifier prediction composition classifier quantify confidence filter prediction confidence data label model consists multiple individual classifier prediction composition classifier quantify confidence filter prediction confidence unlike prior directly prediction apply CP evaluate credential individual classifier input filter prediction uncertainty majority voting scheme aggregate remain prediction generate outcome expert model supervise training data generation model training model training data expert model code revision training sample training dataset expert model training data construct source contains commit patch report cve national vulnerability database nvd contains commit patch extract source project host github cve nvd already associate vulnerability directly data github ranked project primary program java java popular program however data collection framework generally applicable apply program apply regular expression extend commits likely vulnerability relevant simplify extract vulnerability code sample implementation considers code revision modify source file initial code revision sample manually inspect data identify vulnerability report code commits publish cve identify vulnerability previously report cve cve establish link public cve description otherwise manually extract code contains vulnerability commit issue report manually label code revision vulnerability relevant label sample training data manually label code commits project java primary expert model sec sec VI stress manual inspection perform training model model sample therefore training overhead amortize feature extraction aspect building machine model feature characterize input feature II capture quality source project purpose code commit intuitively commit message describes code revision relevant vulnerability fix vulnerability quality source project rigorous meaningful code commit message likely actively developed project likely regular patch vulnerability commit message modify code statement mapped embeddings vector pre wordvec network generate embeddings feature project quality activity aggregate feature vector expert model training training individual expert model training data optimal hyper parameter expert model training sample consists feature vector numerical label code revision sample fix code vulnerability training simply expert model training data internal supervise algorithm confidence evaluation apply CP capture   label vulnerability relevant input model specific  function estimate  model default specific  function  intuitively unusual feature define expert model  calculate statistical confidence aside model training data calibration expert model compute offline calibration    apply function instance calibration probability model label input calculate conformity  function compute   SourceRight click MathML additional feature bound prediction  outlier upper bound prediction conform prediction configurable significant empirically training overhead training expert model dominate training data collection label github revision sample automatic script largely limited request issue github account per paid annotator manually inspect label code revision training reference commit message code issue report training classifier tune training data ratio negligible multi core server comparison training perform expert model expert model predict code commit patch vulnerability depicts label source code sample github apis automatically crawl obtain code commits ranked project apply sec code commits likely vulnerability relevant label source code sample label source code sample label code commits code revision filter apply offline expert model predict code revision relevant code vulnerability fix feature extractor code commit patch project related information feature vector described sec feature expert predicts code revision relevant vulnerability fix consensus multiple classifier expert apply CP estimate  expert output output  confidence sec consensus majority voting remain output extract code sample code commit filter code previous version patch function extract code function associate label vulnerable expert committee continuous advantage CP evaluate expert confidence sample credibility improve expert model allows continuously improve expert model sec vii demonstrate continuous utilized improve data collection framework VI experimental setup evaluation datasets evaluate fund datasets evaluate vulnerability detection model sec IV code sample source java php swift mixture expert approach sec core data collection code revision project java primary program dataset vulnerability detection detail dataset contains sample function source java php swift sample positive vulnerable code sample restrict scope dangerous software error define cwe buffer overflow bound null pointer dereference construct dataset sard nvd source project host github prior patch version sard nvd negative vulnerable code sample similarly vulnerable sample github apply correspond patch commit obtain vulnerability version sample realistic code sample code information supplementary document supplemental document distribution cwe evaluation dataset evaluate vulnerability detection dataset evaluate vulnerability detection code revision IV dataset vulnerability relevant code revision github sap  datasets vulnerability relevant commits github establish via cve nvd link remain obtain popular project github java primary program latter manually examine label commits establish truth sap  datasets already negative sample randomly chosen vulnerability irrelevant commits project vulnerability relevant code commit apply methodology obtain negative commits github specifically retain code commits filter vulnerability irrelevant manual inspection overall code commit sample vulnerability relevant irrelevant commits IV code revision dataset IV code revision dataset competitive approach vulnerability detection fund relevant vuldeepecker vuldeepecker   devign upon BiLSTM  hash function discover vulnerable code clone  utilizes feedforward neural network bug detection devign standard GNN operating graph representation untyped ast vuldeepecker competitive scheme binary decision predict code contains bug vulnerability data collection fund SOTA data collection    implementation implement GNN vulnerability detection model tensorflow model data collection python scikit package construct ast soot java antlr swift php  approach multi core server core ghz intel xeon cpu nvidia gpu evaluation methodology model evaluation unless otherwise fold validation evaluate approach respective dataset standard methodology evaluates generalization ability predictive model performance report metric accuracy ratio correctly label precision ratio correctly predict sample sample predict specific label metric code revision label vulnerability relevant actually precision indicates false positive rate recall ratio correctly predict sample sample belong metric vulnerable sample actually label vulnerable recall suggests false negative rate harmonic precision recall calculate recall  precision useful data uneven distribution vulnerability report geometric aforementioned evaluation metric across validation fold widely reliable performance metric arithmetic vii experimental highlight evaluation fund delivers average accuracy software vulnerability detection sec vii sec vii fund outperforms compete detect sec vii sec vii vulnerable code detailed analysis mechanism fund sec vii sec vii overall apply fund detect vulnerability function cwe vulnerability evaluate sec vii detection model training sample standard vulnerability database data collection report evaluation metric vulnerability fund successfully identifies vulnerable sample average accuracy precision precision reduces false positive rate important false positive waste developer verification fund recall false negative rate rarely vulnerability fund accuracy cwe cwe cwe due wordvec model initial node embeddings sec IV accurately capture token api misuse future enhance fund powerful model finally fund identify vulnerability sophisticated code compete fail fund delivers average accuracy detect function cwe vulnerability evaluation code apply fund source project evaluate prior software version function vulnerability exclude code project training ensure model unseen program evaluation dataset source project summarizes successfully identify individual vulnerability project successfully discover vulnerability vulnerability identify model vulnerability report nvd cve indicates vulnerability report database silently patch vulnerability vulnerability identify approach source project solid successfully detect vulnerability vulnerability report nvd cve vulnerability report standard database fund successfully detects vulnerability others fund outperforms compete approach identify vulnerability silently patch vulnerability recall operating graph representation devign outperforms sequence model overall accuracy advantage GNN model however devign fails detect vulnerability sequence model succeed sacrifice syntactic semantic relationship trading sequential untyped graph representation fund improves devign identify vulnerability improvement accuracy recall moreover fund identifies vulnerability model fail detect ffmpeg  linux kernel fund fails detect identify others vulnerability misuse api parameter capture wordvec model fund issue tackle embed model future vulnerability detection individual datasets evaluate vulnerability detection model individual datasets validation evaluation standard datasets applies approach function sard nvd sec vii extend evaluation java php swift fund delivers overall performance vulnerability detection   detection accuracy due limitation detection model BiLSTM vuldeepecker vuldeepecker effective vulnerability accuracy cwe cwe cwe false positive precision leverage manually label training data perform compete however BiLSTM model fails detect vulnerable cwe vulnerability successfully discovers vulnerable sample devign overall accuracy translates marginal improvement vuldeepecker outperform devign performance vulnerability cwe cwe model accuracy evaluation standard vulnerability database min max performance across vulnerability evaluation standard vulnerability database min max performance across vulnerability evaluation github sample fund accuracy recall apply transfer detection model program code php code improper resource shutdown vulnerability although program source repository data vulnerability roc curve positive rate tpr false positive rate fpr fund automatic data collection framework individual expert model expert committee curve closer performance roc curve positive rate tpr false positive rate fpr fund automatic data collection framework individual expert model expert committee curve closer performance performance improvement baseline code detection model extra label training sample github min max improvement across cwe vulnerability performance improvement baseline code detection model extra label training sample github min max improvement across cwe vulnerability detection accuracy cwe vulnerability standard vulnerability database majority vulnerability fund outperforms across evaluation metric handful vulnerability fund vulnerable sample detect perform alternative pre wordvec network capture keyword sizeof improve explicitly important keywords network vocabulary wordvec directly model semantics keywords instead token overall fund scheme delivers average accuracy overall performance across evaluation metric evaluation github dataset extend function github sard nvd datasets github dataset report across metric min max variance across vulnerability training data standard database cannot fully vulnerable code sample program accuracy github code sample overall fund delivers performance accuracy recall  precision recall although  false positive rate restrict detect vulnerability vulnerable sample perform alternative model accuracy fund fund achieves balance false negative positive prior domain neural network input task useful commonality observation input abstract layer neural network mostly independent task contrast information learnt layer network specialized towards specific task exploit observation reuse network furthermore model program graph structure information code approach capture vulnerable code structure across program suggests detection model program leverage knowledge vulnerable code another technology achieve transfer network structure transfer achieve copying model built initialize network another model training sample target illustrate graph knowledge reuse across program code vulnerability detection code repository host github code sample improper resource shutdown vulnerability program release file handler effective cycle specifically java function file handler  null php file handler  model subtle program structure vulnerability approach reuse knowledge learnt java training sample model vulnerability php program vice versa baseline model apply transfer baseline model another validation setting java java php swift baseline model target fund utilize prior knowledge detect software vulnerability program deliver performance across setting evaluation metric fund capture agnostic information vulnerable code feature useful library scarce training sample evaluation data collection evaluate data collection framework code revision datasets IV validation alternative data label approach roc curve data collection individual expert model sec roc diagram plot positive rate tpr false positive rate fpr classification threshold positive sample refers vulnerability relevant commit lower classification threshold fpr increase likelihood label sample vulnerability relevant increase false positive fund delivers overall performance meaningful fpr threshold curve closer impact training data evaluate source project sample detection model isolate impact GNN model training sample data collection improve baseline model vuldeepecker vuldeepecker sard training datasets baseline model additional github code sample positive negative split fund training dataset refine model apply baseline refine model sample github sample vulnerable code comparison ensure data cwe training data baseline model report performance improvement data collection approach min max improvement across vulnerability negative suggests decrease performance extra training data github improve baseline model fund delivers consistent improvement across evaluation metric outperform competitive improvement quality training data github sample label vulnerability relevant mixture expert model fund accuracy others accuracy incorrectly label compete model negative impact performance accurate data label model additional quality training fund exactly capability analysis vulnerability detection model predict vulnerability apply fund binary decision predict code contains vulnerability extend fund predict vulnerability fund vuldeepecker multi vulnerability detection model competitive scheme extend GNN variant  devign multi prediction datasets sard nvd github evaluation VI report accuracy metric predict label ranked prediction probability truth sample developer verify potential vulnerability accuracy binary prediction multi prediction however fund remains perform model accuracy VI accuracy predict vulnerability VI accuracy predict vulnerability impact implementation choice fund implementation variant sard dataset isolates impact data collection variant refer vanilla ast operates standard ast without additional describes sec IV variant refer ast operates augment ast data variant refer  operates augment ast additional data fourth variant refer concat learns individual embeddings relation graph concatenates prediction variant refer mlp multilayer perceptron mlp layer aggregate embed individual relation graph without attention highway gate report standard ast inadequate model program structure augment ast data information ast  modestly improves accuracy vanilla ast however ast  alone insufficient accuracy concat performance fund simply combine embeddings relation graph effective reinforces importance utilize aggregate information additional data information operating multiple relation graph mlp perform competitive approach advantage multi relational fund improves mlp employ attention mechanism highway gate minimize diminish gradient issue model dependence implementation variant fund implementation overall performance implementation variant fund implementation overall performance program embed illustrate program representation visualize embed data intuitively effective classifier input distinct decision boundary positive negative drawn BiLSTM devign standard GNN  fund sample function nvd sard github positive negative split onto embed aid clarity apply sne visualization technique project multi dimensional embed dimensional fund effective mapping sample sample binary decision boundary fund effective extract essential program structure vulnerability detection program embed approach fund effective mapping code sample distinctive boundary drawn vulnerable benign code sample model training overhead training overhead achieve accuracy vulnerability detection model training apply approach training dataset consists function sard nvd github described training terminates loss improve within consecutive training epoch accuracy valuation termination criterion publish implementation conduct multi core server desktop nvidia gpu training overhead accuracy min max variance across evaluation setting training overhead accuracy min max variance across evaluation setting model converge within training datasets  incurs training feedforward neural network however  delivers accuracy model inadequate capture complex code structure remain dnn longer training  significantly detection accuracy fund incurs longer training dnn model learns across multiple relational graph however training overhead fund comparable dnn model within yield detection accuracy stress model training perform offline furthermore approach prediction within negligible impact user analysis data collection framework confidence evaluation evaluates CP function sec successfully detects data label prediction apply approach code revision dataset IV CP scheme successfully input expert model prediction false positive CP model classifier rate apply CP improve detection model unoptimized CP detection model prediction vulnerable code continuous truth label prediction flag CP update classifier prediction sec manually code revision obtain truth truth mispredicted sample update classifier data label model achieve data translates improvement initial label model CP confidence measurement practical gradually improve data collection framework impact non conformity threshold  threshold affect performance data label model code commits github sap datasets  threshold reduce false positive rate precision negatively affect recall  threshold overall performance performance data label model non conformity threshold increase sap github datasets performance data label model non conformity threshold increase sap github datasets discussion future fund attempt employ GNNs CP code vulnerability detection naturally future improvement discus model robustness machine model suffer adversarial attack carefully construct data sample bias deviant behavior model however fund susceptible code sample source repository improve coverage diversity training dataset inject adversarial sample ranked actively maintain opensource project without developer user highly unlikely achievable incur significant effort therefore complexity attack secondly data collection framework multiple model launch attack model typically increase complexity attach adversarial tightly couple target model finally CP model useful filter adversarial sample employ threshold analysis effective defend adversarial sample model capability capability GNNs limited depth width model target function vulnerability detection GGNN sufficient program structure however envision model program deeper GGNN neural network typically amount training data data collection framework useful apply neural architecture technique neural network structure future model wordvec initialize node embeddings syntax information sec IV pre wordvec model originally processing tune exploit define structure program important keywords circumvent issue explicitly important keywords network vocabulary workaround manual intervention hence program model model program structure alleviate issue eliminate expert involvement future explore model specifically built model program source code codevec model interpretability machine technique rely theoretical analysis capability boundary dnn currently active research theoretical proof underlie mechanism fund future gain insight model fails desire interpretable model surrogate model linear regressor approximate prediction underlie model IX related upon foundation code vulnerability analysis machine software engineering leverage recent development graph neural network model program graph structure vulnerable code knowledge detect code vulnerability exploit ensemble training sample source project additional data training code vulnerability detection model classical approach software vulnerability detection relies expert craft however trivial construct quality heavily expert involvement symbolic execution sidestep craft exploit symbolic analyze graph program source code program suffer false positive vulnerability detection recent effort DL software vulnerability detection comprehensive review prior treat source code ast sequential ignores structural information program exploit extends GGNN model program multiple relationship sufficient training data recent develop predictive model automatically extract vulnerable code sample code revision inspire recent effort fund combine probabilistic statistical assessment automatically extract vulnerable code sample source project significantly improve quality extract sample graph neural network GNNs promising processing graph data structure task mining social network entity alignment binary similarity detection devign closely related devign approach simultaneously model multiple code relationship accuracy effective GNN extends recent multi relational graph model program structure GNN advance extend ast encode capture additional code relationship information gru gate model longer dependency performance sec vii machine software development increase apply machine technique software development exist approach address variety development task fuzz detect code clone improve static analysis bug funding repair program defect prediction attack detection processing bug report fund foundation quality conclusion fund novel graph approach code vulnerability detection model fund extends standard graph neural network model multiple code relationship essential model program structure vulnerability detection sufficient training data fund combine probabilistic statistical assessment automatically vulnerable code sample source repository apply fund detect source code vulnerability function datasets experimental fund significantly outperforms competitive approach across evaluation metric