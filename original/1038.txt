We give a polynomial-time algorithm to test whether a graph contains an induced cycle with length more
than three and odd.
CCS Concepts: • Mathematics of computing → Graph algorithms;
Additional Key Words and Phrases: Odd holes, perfect graphs, recognition algorithm
1 INTRODUCTION
All graphs in this article are finite and have no loops or parallel edges. A hole of G is an induced
subgraph of G that is a cycle of length at least four. In this article, we give an algorithm to test
whether a graph G has an odd hole, with running time polynomial in |G|. (|G| denotes the number
of vertices of G.)
The study of holes, and particularly odd holes, grew from Claude Berge’s “strong perfect graph
conjecture” [1], that if a graph and its complement both have no odd holes, then its chromatic
number equals its clique number. For many years, this was an open question, as was the question
of finding a polynomial-time algorithm to test if a graph is perfect. (“Perfect” means every induced
subgraph has chromatic number equal to clique number.) Both questions were settled at about the
same time: in the early 2000’s, two of us, with Robertson and Thomas [7], proved Berge’s conjecture, and also, with Cornuéjols et al. [4], gave a polynomial-time algorithm to test if a graph has
an odd hole or odd antihole, thereby testing perfection. (An antihole of G is an induced subgraph
whose complement graph is a hole in the complement graph of G.)
Excluding both odd holes and odd antiholes is a combination that works well, and has “deep”
structural consequences. Just excluding odd holes loses this advantage, and graphs with no odd
holes seem to be much less well-structured than perfect graphs in some vague sense. It was only
recently that two of us [16] proved that if a graph has no odd holes, then its chromatic number
is bounded by a function of its clique number, resolving an old conjecture of Gyárfás [14]. For a
long time, the question of testing for odd holes has remained open: while we could test for the
presence of an odd hole or antihole in polynomial time, we were unable to separate the test for
odd holes from the test for odd antiholes, and the complexity of testing for an odd hole remained
open. Indeed, it seemed quite likely that testing for an odd hole was NP-complete; for instance,
D. Bienstock [2, 3] showed that testing if a graph has an odd hole containing a given vertex is
NP-complete. But, in fact, we can test for odd holes in polynomial time.
The main result of this article is the following:
Theorem 1.1. There is an algorithm with the following specifications:
Input: A graph G.
Output: Determines whether G has an odd hole.
Running time: O(|G|
9).
Remarkably, the algorithm (or, rather, the proof of its correctness) is considerably simpler than
the algorithm of Ref. [4], and so not only solves an open question, but gives a better way to test if a
graph is perfect. Its running time is the same as the old algorithm for testing perfection. (A recent
paper by Lai et al. [15] gives a modification of the algorithm of this article, which would bring the
running time down to O(|G|
8).)
Like the algorithm of Ref. [4] and several other algorithms that test for the presence of an induced subdivision of a fixed subgraph, the new algorithm has three stages. Say we are looking for
an induced subgraph of “type T” in the input graph G.
—The algorithm first tests for certain “easily-detected configurations.” These are configurations that can be efficiently detected and whose presence guarantees that G contains an
induced subgraph of type T.
—The third step is an algorithm that tries to find a subgraph of type T directly; it would not
be expected to work on a general input graph, but it would detect a subgraph of type T if
there happens to be a particularly “nice” one in the input graph. For instance, in Ref. [4], we
were looking for an odd hole, and the method was, try all triples of vertices and join them
by three shortest paths, and see if they form an odd hole. This would normally not work,
but it would work if for some shortest odd hole of the graph, there were no vertices in the
remainder of the graph with more than three neighbours in this hole.
—The second step is to prepare the input for the third step; this step is called “cleaning” and
is where the main challenges lie. In the cleaning step, the algorithm generates a “cleaning
list,” polynomially many subsets X1,...,Xk of the vertex set of the input graph G, with
the property that if G does in fact contain an induced subgraph of type T, then for some
i ∈ {1,..., k}, such a subgraph can be found in G \ Xi using the method of step 3. This
usually means that if G contains an induced subgraph of type T, then there is one, say H,
such that some Xi contains all the vertices of G \ V (H) that have many neighbours in H,
and deleting Xi leaves H intact.
Cleaning was first used by Conforti and Rao [12] to recognize linear balanced matrices, and
subsequently by Conforti et al. [11] to recognize balanced matrices, and by Conforti et al. [10]
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.
Detecting an Odd Hole 5:3
to test for even holes, as well as in Ref. [4]. It then became a standard tool in induced subgraph
detection algorithms [5, 6, 9]. This is the natural approach to try to test for an odd hole, and it
seemed to have been explored thoroughly; but not thoroughly enough, as we shall see. We have
found a novel method of cleaning that works remarkably well, and will have further applications
[8, 13].
In both the old algorithm to check perfection, and the new algorithm of this article, we first test
whether G contains a “pyramid” or “jewel” (easily-detected induced subgraphs that would imply
the presence of an odd hole), and we may assume that it does not. Then, we try to search for an
odd hole directly; to do so, we exploit the properties of an odd hole of minimum length, a so-called
shortest odd hole. (These properties hold in graphs with no pyramid or jewel, but not in general
graphs, which is why we test for pyramids and jewels first.)
Let C be a shortest odd hole. A vertex v ∈ V (G) is C-major if there is no three-vertex path of C
containing all the neighbours of v in V (C) (and, consequently, v  V (C)); and C is clean (in G) if
no vertices of G are C-major. If G has a shortest odd hole that is clean, then it is easy to detect that
G has an odd hole, and this was done in theorem 4.2 of Ref. [4]. More exactly, there is a poly-time
algorithm that either finds an odd hole, or deduces that no shortest odd hole of G is clean. Call
this procedure P. The complicated part of the algorithm in Ref. [4] was generating a cleaning list, a
list of polynomially-many subsets of V (G), such that if G has an odd hole, then there is a shortest
odd hole C and some X in the list such that X ∩V (C) = ∅, and every C-major vertex belongs to X.
Given that, we take the list X1,...,Xk say, and for each of the polynomially-many graphs G \ Xi ,
we run procedure P on it. If it ever finds an odd hole, then G has an odd hole and we are done. If
not, then G has no odd hole and again we are done.
So, the key is generating the cleaning list. For this, Ref. [4] uses
Theorem 1.2. For every graphG not containing any “easily-detected configuration,” ifC is a shortest odd hole in G, and X is an anticonnected set of C-major vertices, then there is an edge uv of C such
that u,v are both X-complete.
(Anticonnected means connected in the complement, and X-complete means adjacent to every
vertex in X.) But to arrange that 1.2 is true, it is necessary to expand the definition of “easilydetected configuration” to include some new configurations. It remains true that if one is present,
then the graph has an odd hole or odd antihole and we can stop; if they are not present, then 1.2
is true. The problem is, if one of these new easily-detected configurations is present, it guarantees
that G contains an odd hole or an odd antihole, but not necessarily an odd hole.
But there is a simpler way. Here is a rough sketch of a new procedure to clean a shortest odd hole
C in a graph G with no pyramid or jewel. Let x be a C-major vertex such that there is a gap in C
between two neighbours of x, as long as possible. (We can assume there is one.) Let the neighbours
of x at the ends of this gap be d1,d2; thus, there is a path D of C between d1,d2 such that every
C-major vertex either has a neighbour in its interior, or is adjacent to both ends. We can assume
that the C-distance between d1,d2 is at least three. Also, we have a theorem that there is an edge
f of C such that every C-major vertex nonadjacent to x is adjacent to one of the ends of f .
For the algorithm, what we do is we guess x,d1,d2, and f (more precisely, we enumerate all
possibilities for them). Eventually, we will guess correctly. We also guess the two vertices neighbouring f inC, sayc1,c4, where f = c2c3 and c1,c2,c3,c4 are in order inC. When we guess correctly,
every C-major vertex either
—is adjacent to both d1,d2; or
—is different from c1,c2,c3,c4 and is adjacent to one of c2,c3; or
—is adjacent to x and has a neighbour in the interior of D.
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020. 
5:4 M. Chudnovsky et al.
Fig. 1. A pyramid. Dashed lines represent paths of indeterminate length.
We can safely delete all common neighbours of d1,d2 except x; deleting these vertices will not
remove any vertices of C. Also, we can safely delete all vertices different from c1,c2,c3,c4 that are
adjacent to one ofc2,c3. So now in the graph that remains after these deletions, sayG
, all C-major
vertices different from x satisfy the third bullet above.
We do not know the path D, and so we cannot immediately identify the set of vertices satisfying
the third bullet. (For this sketch, let us assume that D has length less than half that of C; if it is
longer, there is a slight complication.) But we know (it is a theorem of Ref. [4]) that D is a shortest
path between d1,d2 in the graph obtained from G by deleting all C-major vertices; so, it is also a
shortest path between d1,d2 in the graph G obtained from G by deleting x and all its neighbours
(except d1,d2). The algorithm computes G, and then finds the union of the interiors of the vertex
sets of all shortest paths between d1,d2 inG, say F . It is another theorem of Ref. [4] that no vertex
of C \ V (D) has a neighbour in F ; so it is safe to delete from G all vertices of G except d1,d2 that
are not in F and have a neighbour in F . But then we have deleted all theC-major vertices, and now
we just test for a clean shortest odd hole.
In an earlier version of this paper, we proved the result by a more complicated method that also
seems to us novel and worth recording. It was necessary to first test for two more easily-detected
configurations; but then, instead of constructing the set F above, the algorithm just guesses the
component (F  say) of G that contains the interior of D, and deletes all neighbours of x that have
neighbours in this component except d1,d2. This might delete some of the hole C, but we proved
a theorem that enough of C remains that we can still use it in an algorithm to detect an odd hole.
In particular, there is an odd path P of C of length at least three, with both ends adjacent to x such
that the ends of P both have neighbours in F  and its internal vertices do not; and we can exploit
this to detect the presence of an odd hole.
2 THE EASILY-DETECTED CONFIGURATIONS
Let v0 ∈ V (G), and for i = 1, 2, 3, let Pi be an induced path of G between v0 and vi such that
—P1, P2, P3 are pairwise vertex-disjoint except for v0;
—v1,v2,v3  v0, and at least two of P1, P2, P3 have length at least two;
—v1,v2,v3 are pairwise adjacent; and
— for 1 ≤ i < j ≤ 3, the only edge between V (Pi ) \ {v0} and V (Pj) \ {v0} is the edge vivj .
We call the subgraph induced on V (P1 ∪ P2 ∪ P3) a pyramid, with apex v0 and base {v1,v2,v3}
(See Figure 1). If G has a pyramid, then G has an odd hole (because two of the paths P1, P2, P3 have
the same length modulo two, and they induce an odd hole). It is shown in theorem 2.2 of Ref. [4]
that:
Theorem 2.1. There is an algorithm with the following specifications:
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020. 
Detecting an Odd Hole 5:5
Fig. 2. A jewel. Dotted lines represent possible edges.
Input: A graph G.
Output: Determines whether there is a pyramid in G.
Running time: O(|G|
9).
If X ⊆ V (G), we denote the subgraph of G induced on X by G[X]. If X is a vertex or edge of
G, or a set of vertices or a set of edges of G, we denote by G \ X the graph obtained from G by
deleting X. Thus, for instance, if b1b2 is an edge of a hole C, then C \ {b1,b2} and C \ b1b2 are both
paths, but one contains b1,b2 and the other does not. If P is a path, the interior of P is the set of
vertices of the path P that are not ends of P.
We say that G[V (P) ∪ {v1,...,v5}] is a jewel in G if v1,...,v5 are distinct vertices,
v1v2,v2v3,v3v4,v4v5,v5v1 are edges, v1v3,v2v4,v1v4 are nonedges, and P is a path of G between
v1,v4 such that v2,v3,v5 have no neighbours in the interior of P (See Figure 2). (We do not specify
whether v5 is adjacent to v2,v3, but if it is adjacent to one and not the other, then G also contains
a pyramid.)
Again, if G contains a jewel, then it has an odd hole; and it is shown in theorem 3.1 of Ref. [4]
that:
Theorem 2.2. There is an algorithm with the following specifications:
Input: A graph G.
Output: Determines whether there is a jewel in G.
Running time: O(|G|
6).
It is proved in theorem 4.2 of Ref. [4] that:
Theorem 2.3. There is an algorithm with the following specifications:
Input: A graph G containing no pyramid or jewel.
Output: Determines one of the following:
(1) G contains an odd hole;
(2) there is no clean shortest odd hole in G.
Running time: O(|G|
4).
Let us say a shortest odd hole C is heavy-cleanable if there is an edge uv of C such that every
C-major vertex is adjacent to one of u,v. We deduce:
Theorem 2.4. There is an algorithm with the following specifications:
Input: A graph G containing no pyramid or jewel.
Output: Determines one of the following:
(1) G contains an odd hole;
(2) there is no heavy-cleanable shortest odd hole in G.
Running time: O(|G|
8).
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.
5:6 M. Chudnovsky et al.
Proof. List all the four-vertex induced paths c1-c2-c3-c4 of G. For each one, let X be the set of
all vertices of G different from c1,...,c4 and adjacent to one of c2,c3. We test whether G \ X has
a clean shortest odd hole, by Theorem 2.3. If this never succeeds, output that G has no heavycleanable shortest odd hole.
To see correctness, note that if G has a heavy-cleanable shortest odd hole C, then C is clean in
G \ X for some X that we will test (assuming we have not already detected an odd hole); and when
we do so, Theorem 2.3 will detect an odd hole. If G does not have a heavy-cleanable shortest odd
hole, then two things might happen: either Theorem 2.3 detects an odd hole for some choice of X,
or it never detects one. In either case, the output is correct. This proves Theorem 2.4.
Let us say that a graph G is a candidate if it has no jewel or pyramid, and no heavy-cleanable
shortest odd hole (and consequently no hole of length five). By combining the previous results, we
deduce:
Theorem 2.5. There is an algorithm with the following specifications:
Input: A graph G.
Output: Determines one of the following:
(1) G contains an odd hole;
(2) G is a candidate.
Running time: O(|G|
9).
In view of this, we just need to find a poly-time algorithm to test candidates for odd holes.
3 HEAVY EDGES
Let C be a graph that is a cycle, and let A ⊆ V (C). An A-gap is a subgraph of C composed of a
component X of C \ A, the vertices of A with neighbours in X, and the edges between A and X.
(So if |A| ≥ 2, the A-gaps, if they exist, are the paths of C of length ≥ 2, with both ends in A and
no internal vertex in A.) The length of an A-gap is the number of edges in it (so if A consists just
of two adjacent vertices, the A-gap has length |E(C)| − 1). We say that A is normal in C if every
A-gap is even (and, consequently, if C has odd length, then A  ∅).
The following is proved in theorem 7.6 of Ref. [4]:
Theorem 3.1. Let G be a graph containing no jewel or pyramid, let C be a shortest odd hole in G,
and let X be a stable set of C-major vertices. Then the set of X-complete vertices in C is normal.
Also we have:
Theorem 3.2. If G is a graph containing no pyramid, and C is a shortest odd hole in G, then every
C-major vertex has at least four neighbours in V (C).
Proof. Let v be C-major, and suppose it has at most three neighbours in V (C). Let A be the set
of neighbours of v inC. Every A-gap is even (since adding v gives a hole shorter thanC), and since
C is odd, some edge of C is not in a A-gap, that is, some two neighbours of v in V (C) are adjacent.
Since v is C-major, it has exactly three neighbours in V (C), and they are not all three consecutive;
but then G[V (C) ∪ {v}] is a pyramid, a contradiction. This proves 3.2.
Theorem 3.3. Let G be a graph containing no jewel or pyramid, let C be a shortest odd hole in G,
and let x,y be nonadjacent C-major vertices. Then, every induced path between x,y with interior in
V (C) has even length.
Proof. Let the vertices of C in order be c1,c2,...,cn,c1. By 3.1 applied to {x,y}, some vertex
of C is adjacent to both x,y, say cn. Suppose that there is an odd induced path P between x,y
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.   
Detecting an Odd Hole 5:7
with interior in V (C). Since x has only one neighbour in the interior of P, and x has at least four
neighbours inV (C), not all consecutive (becauseG contains no jewel), it follows that the interior of
P has at most n − 4 vertices, and so P has length at most n − 3. Butcn  V (P), and since adding cn
does not give an odd hole (because such an odd hole would be shorter thanC), it follows thatcn has
a neighbour in the interior of P. Thus, we may assume that the interior of P equals {c1,c2,...,ck }
for some even k ≥ 2. If both x,y have a neighbour in the set {ck+2,...,cn−2}, there is an induced
path Q between x,y with interior in {ck+2,...,cn−2}, and its union with one of x-cn-y, P is an
odd hole of length less than that of C, a contradiction. Thus, one of x,y has no neighbours in
{ck+2,...,cn−2}, say x. By 3.2, x has at least four neighbours in V (C); so, it has exactly four and is
adjacent to both ck+1,cn−1. Hence, the neighbours of x in V (C) are cn−1,cn,ck+1 and exactly one
ofc1,ck . But k is even since P has odd length, so the path ck+1-ck+2-... -cn−1 of C is odd; and since
adding x does not make an odd hole shorter than C, it follows that ck+1,cn−1 are adjacent, and so
k = n − 3. But then the four neighbours of x in C are consecutive, and so the subgraph induced on
V (C) ∪ {x} is a jewel, a contradiction. This proves 3.3.
If X ⊆ V (G), we say an edge uv of G is X-heavy if u,v  X, and every vertex of X is adjacent to
at least one of u,v. We need:
Theorem 3.4. Let G be a graph containing no jewel or pyramid or 5-hole, and let C be a shortest
odd hole in G. Let X be a set of C-major vertices, and let x0 ∈ X be nonadjacent to all other members
of X. Then, there is an X-heavy edge in C.
Proof. We proceed by induction on |X |. If X is stable, then, by 3.1, some vertex of C is
X-complete (because the null set is not normal), and both edges of C incident with it are
X-heavy, as required. We assume then that x1, x2 ∈ X are adjacent. From the inductive hypothesis, some edge uivi of C is (X \ {xi})-heavy, for i = 1, 2; so we may assume that for i = 1, 2, xi
has no neighbour in uivi (because, otherwise, uivi is X-heavy). Consequently, u1v1 and u2v2 are
distinct edges. Since x0, x1 both have neighbours in {u2,v2}, 3.3 implies that they have a common
neighbour in {u2,v2}; so we may assume that x0, x1 are both adjacent tov2, and, similarly, x0, x2 are
both adjacent to v1. Since the subgraph induced on {x0, x1, x2,v1,v2} is not a 5-hole, and v1  v2, it
follows that v1,v2 are adjacent. Since x1 has no neighbour in {u1,v1}, it follows that u1  v2, and,
similarly, u2  v1; so, u1,v1,v2,u2 are in order in C. We claim that v1v2 is X-heavy; for suppose
not. Then there exists x ∈ X nonadjacent to v1,v2; and so x  x0, x1, x2. Since u1v1 is (X \ {x1})-
heavy, it follows that x is adjacent to u1, and, similarly, to u2; but then the subgraph induced on
{x,u1,v1,v2,u2} is a 5-hole, a contradiction. This proves 3.4.
4 THE ODD HOLES ALGORITHM
We can now give the algorithm to detect an odd hole. We first present it in as simple a form as we
can, but its running time will be O(|G|
12). Then, we show that with more care, we can bring the
running time down to O(|G|
9).
Let C be a hole and x ∈ V (G) \ V (C). An x-gap is an induced path of C with length at least two,
with both ends adjacent to x, and with its internal vertices nonadjacent to x. Thus, if P is an x-gap,
then G[V (P) ∪ {v}] is a hole. We need the following theorem 4.1 of Ref. [4]:
Theorem 4.1. Let G be a graph containing no jewel or pyramid, and let C be a clean shortest odd
hole in G. Let u,v ∈ V (C) be distinct and nonadjacent, and let L1, L2 be the two subpaths of C joining
u,v, where |E(L1)| < |E(L2)|. Then:
—L1 is a shortest path in G between u,v, and
— for every shortest path P in G between u,v, P ∪ L2 is a shortest odd hole in G.
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.        
5:8 M. Chudnovsky et al.
Here, then, is a preliminary version of the algorithm. We are given an input graph G. First, we
apply the algorithm of Theorem 2.5, and we may assume it determines that G is a candidate.
Next, we enumerate all induced four-vertex paths c1-c2-c3-c4 of G, and all induced three-vertex
paths d1-x-d2 ofG. (They might overlap.) For each choice ofc1-c2-c3-c4 and d1-x-d2, and each vertex
d3 of G (thus, we are checking all 8-tuples (c1,c2,c3,c4,d1, x,d2,d3)), we do the following:
—Compute the set X1 of all vertices adjacent to both d1 and d2 that are different from x,
and compute the set X2 of all vertices that are adjacent to one of c2,c3 and different from
c1,c2,c3,c4. Check that x ∈ X2, and none of c1,...,c4,d1,d2 belongs to X1 ∪ X2 (and if not,
move on to the next 8-tuple). Let G be the graph obtained from G by deleting X1 ∪ X2.
Compute the set Y of all vertices of G that are different from and nonadjacent to x in G.
—If d3  Y, move on to the next 8-tuple. Otherwise, check that the distances inG[Y ∪ {d1,d2}]
between d1,d3 and between d2,d3 are finite and equal (and if not, move on to the next
8-tuple).
—For each y ∈ Y, compute the distance in G[Y ∪ {d1,d2}] to d1, to d2, and to d3. For i = 1, 2,
let Fi be the set of all y ∈ Y with the sum of the distances to di and to d3 minimum, that is,
the set of interiors of shortest paths in G[Y ∪ {d1,d2}] between d3 and di . Let X3 be the set
of all vertices of G different from d1,d2,d3, x that are not in F1 ∪ F2 and have a neighbour
in F1 ∪ F2 ∪ {d3}.
—Use the algorithm of 2.3 to determine either that G \ (X1 ∪ X2 ∪ X3 ∪ {x}) has an odd hole,
or that it has no clean shortest odd hole. If it finds that there is an odd hole, we output this
fact and stop. If after examining all choices of 8-tuple we have not found that there is an
odd hole, we output that there is none and stop.
Let us see that this algorithm works correctly. (If x is a vertex of G, N[x] denotes the set consisting of x and all its neighbours.) Certainly, if the input graph has no odd hole, then the output
is correct; so we may assume that G is a candidate and C is a shortest odd hole in G. Since C is not
heavy-cleanable, there is a C-major vertex x with an x-gap of length at least three; and so there is
one, x, say, with an x-gap in C of maximum length at least three. Let this x-gap have ends d1,d2;
so d1,d2 are adjacent to x, and there is a path D of C between d1,d2 such that x has no neighbour
in its interior. Since x is C-major, the C-distance between d1,d2 is at least three (because the path
of C joining d1,d2 different from D contains all the neighbours of v in V (C)). From the choice of
x, every other C-major vertex is either adjacent to both d1,d2, or has a neighbour in the interior
of D. Since C is a shortest odd hole, it follows that D has even length; let d3 be its middle vertex.
By 3.4, there is an edge c2c3 of C such that all C-major vertices nonadjacent to x are adjacent
to one of c2,c3. Let c1-c2-c3-c4 be a path of C. As the algorithm examines, in turn, each 8-tuple, it
eventually will examine the 8-tuple (c1,c2,c3,c4,d1, x,d2,d3), and we will show that, in this case,
the algorithm will determine that there is an odd hole.
Thus, suppose that the algorithm is now examining the “correct” 8-tuple. Let X1,X2,G
,Y be as
in the first bullet above. It follows that X1,X2 are disjoint fromV (C), and soC is a shortest odd hole
inG
. LetG = G \ (N[x] \ V (C)). Then Y ⊆ V (G) andC is a clean shortest odd hole inG. Since
d3 is the middle vertex of D, the subpaths of D joining d3 to d1,d2 both have length less than |C|/2;
so, by the first statement of 4.1 applied to G, these two subpaths are shortest paths joining their
ends with interior in Y. Moreover, by the second statement of 4.1 applied to G, for every choice
of a shortest path Li in G
[Y ∪ {d1,d2}] joining d3,di (for i = 1, 2), no vertex of Li \ {di} belongs
to or has a neighbour in V (C) \ V (D); so, the set X3 defined in the third bullet above contains no
vertex in V (C). But X1 ∪ X2 ∪ X3 ∪ {x} contains every C-major vertex, and so C is a clean shortest
odd hole in G \ (X1 ∪ X2 ∪ X3 ∪ {x}); hence, when we apply the algorithm of 2.3 to this subgraph,
it will determine that it (and, hence, G) has an odd hole. This completes the proof of correctness.
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020. 
Detecting an Odd Hole 5:9
For the running time: there are |G|
8 8-tuples to check. For each one, the sequence of steps above
takes time O(|G|
4); so, the total running time is O(|G|
12).
Now, let us do it more carefully to reduce the running time. In order to explain the method, let us
consider more closely a shortest odd hole C in a candidate G. As before, there is a C-major vertex
x with an x-gap of length at least three; and so there is one, x, say, with an x-gap inC of maximum
length at least three. Let this x-gap have ends d1,d2; so d1,d2 are adjacent to x, and there is a path
D of C between d1,d2 such that x has no neighbour in its interior. By Theorem 3.4, there is an edge
c2c3 of C such that both x and all C-major vertices nonadjacent to x are adjacent to one of c2,c3.
Since x is adjacent to one of c2,c3, not both c2,c3 belong to the interior of D; and, since d1,d2 are
nonadjacent, we may assume by exchanging d1,d2 or c2,c3 if necessary that c2,c3,d1, x,d2 are all
distinct except that possibly c2 = d1. Now, there are six possibilities:
(1) c2  d1 (and, hence, c3 does not belong to the interior of D), and D has length less than
|C|/2;
(2) c2  d1 (and, hence, c3 does not belong to the interior of D), and D has length more than
|C|/2;
(3) c2 = d1, and c3 does not belong to the interior of D, and D has length less than |C|/2;
(4) c2 = d1, and c3 does not belong to the interior of D, and D has length more than |C|/2;
(5) c3 belongs to the interior of D (and, hence, c2 = d1), and D has length less than |C|/2; and
(6) c3 belongs to the interior of D (and, hence, c2 = d1), and D has length more than |C|/2.
Let us say C is of type i if it satisfies the the ith statement above, where 1 ≤ i ≤ 6. (Thus, C may
have more than one type.) To minimize running time, it seems best to design separate algorithms
to test for the six types separately. We need the following lemma:
Theorem 4.2. There is an algorithm with the following specifications:
Input: A graph G, and two disjoint subsets A, B of V (G), and a vertex h  A ∪ B with no neighbour in A ∪ B. Also, for each v ∈ A ∪ B, an induced path Rv between v and h, containing no
vertex in A ∪ B except v.
Output: Determines whether there exist a ∈ A and b ∈ B such that Ra ∪ Rb is an induced path.
Running time: O(|G|
3).
Proof. For each a ∈ A, compute the set Sa of all vertices of G \ {h} that either belong to
V (Ra \ {h}) or have a neighbour in this set. (This takes time O(|G|
2) for each a ∈ A.) Now, for each
a ∈ A and each b ∈ B, test whether Sa is disjoint fromV (Rb \ {h}). If so, Ra ∪ Rb is an induced path;
otherwise, it is not. This proves 4.2.
Now to handle the six types of shortest odd hole. We begin with:
Theorem 4.3. There is an algorithm with the following specifications:
Input: A candidate G.
Output: Determines either that G has an odd hole, or that G has no shortest odd hole of type 1.
Running time: O(|G|
9).
Proof. List all 6-tuples (c2,c3,d1, x,d2,d3) of distinct vertices ofG such thatc2c3 is an edge, and
d1-x-d2 is an induced path. Now, we test each such 6-tuple in turn, as follows. Let X1 be the set of
common neighbours of d1,d2 different from x, and let X2 be the set of all vertices different from
x,c2,c3,d1,d2 that are adjacent to one of c2,c3. Let C1 be the set of all vertices of G different from
c2,c3, x that are adjacent to c2 and not to c3, and let C4 be the set that are adjacent to c3 and not to
c2. Let G be the graph obtained from G by deleting X1 ∪ X2 ∪ (N[x] \ {d1,d2}).
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.    
5:10 M. Chudnovsky et al.
Find the distance in G between d1,d2, say t. If t is infinite, move on to the next 6-tuple. If t is
finite, for each v ∈ V (G
), compute the distance between v and di for i = 1, 2 (setting the distance
to be infinite if there is no path), and let Y be the set of v ∈ V (G) different from d1,d2 with the sum
of these two distances equal to t. Let X3 be the set of vertices of G different from x,d1,d2 that are
not in Y and have a neighbour in Y.
Let G = G \ (X1 ∪ X2 ∪ X3 ∪ {x}). For each v ∈ C1 ∪C4, if there is a path of G between v and
d3 such that all its vertices except v belong to V (G), find such a path Rv of minimum length. Let
C
1 be the set of v ∈ C1 such that Rv exists and has even length, and let C
1 be the set of v ∈ C1 such
that Rv exists and has odd length. Define C
4,C
4 similarly. Apply 4.2 to test whether there exist
c1 ∈ C
1 and c4 ∈ C
4 such that the paths Rc1 , Rc4 are both defined and have union an induced path
between c1,c4 with interior in V (G). If so, output that G has an odd hole. Otherwise, apply 4.2
again to test whether there existc1 ∈ C
1 and c4 ∈ C
4 such that the paths Rc1 , Rc4 are both defined
and have union an induced path between c1,c4 with interior in V (G). If so, output that G has an
odd hole. Otherwise, move on to the next 6-tuple. When all 6-tuples have been tested, if no odd
hole is found, return that G has no shortest odd hole of type 1.
To see the correctness, suppose that C is a shortest odd hole of type 1 in G, and let
c2,c3,d1,d2, x,D be as in the definition of type. Let d3 be the vertex ofC that is the middle vertex of
the even pathC \ {c2,c3}. When the algorithm tests the 6-tuple (c2,c3,d1, x,d2,d3), let X1,X2,C1,C4
be as in the description of the algorithm. From the choice of c2,c3, every C-major vertex nonadjacent to x belongs to X2, and so no vertex in V (G
) is C-major in G. Let Z be the set of C-major
vertices in G. Then, V (G
) ∩ Z = ∅. From the first assertion of 4.1, D is a shortest path between
d1,d2 in G \ Z, of length t, say. Since C has type 1, and from the choice of D, it follows that
X1 ∪ X2 ∪ (N[x] \ {d1,d2}) is disjoint from V (D). Since V (D) ⊆ V (G
) ⊆ V (G) \ Z, it follows that
D is a shortest path between d1,d2 in G
. If L is a shortest path between d1,d2 in G
, then L is
also a shortest path between d1,d2 in G \ Z and, thus, by the second assertion of 4.1, no vertex
in V (C) \ V (D) has a neighbour in V (L) \ {d1,d2}; so, X3 ∩V (C) = ∅. Let c1 ∈ C1 and c4 ∈ C4 such
that c1-c2-c3-c4 is a path of C. Thus, C \ {c1,c4} is a subgraph of G. Moreover, the paths Rc1 , Rc4
exist, and by the first assertion of 4.1, they both have length (|V (C)| − 3)/2; and, by the second
assertion of 4.1, the union of Rc1 , Rc4 is an induced path between c1,c4. Then, adding c2,c3 gives an
odd hole, as required. This proves 4.3.
The algorithms for type 3 and type 5 are small modifications of this.
Theorem 4.4. There is an algorithm with the following specifications:
Input: A candidate G.
Output: Determines either that G has an odd hole, or that G has no shortest odd hole of type 3.
Running time: O(|G|
9).
Proof. Enumerate all 7-tuples (c1,c3,c4,d1, x,d2,d3) of distinct vertices such that c1-d1-c3-c4 is
an induced path and d1-x-d2 is an induced path. Set c2 = d1. For each such 7-tuple, let X1 be the
set of common neighbours of d1,d2, and let X2 be the set of vertices different from c1,c2,c3,c4 that
are adjacent to one of c2,c3. Let G be the graph obtained from G by deleting X1 ∪ X2 ∪ (N[x] \
{c1,d2}).
Find the distance in G between c1,d2, say, t. If t is infinite, move on to the next 6-tuple. If t is
finite, for each v ∈ V (G
), compute the distance between v,c1 and between v,d2, and let Y be the
set of v ∈ V (G) different from c1,d2 with the sum of these two distances equal to t. Let X3 be the
set of vertices of G different from x,c1,d2 that are not in Y and have a neighbour in Y.
Let G = G \ (X1 ∪ X2 ∪ X3 ∪ {x}). Find a shortest path between c1,d3 in G and a shortest
path between c4,d3 in G, and test whether their union is an odd induced path between c1,c4. If
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020. 
Detecting an Odd Hole 5:11
so, output that G has an odd hole; otherwise, move on to the next 7-tuple. If no odd hole is found
after testing all 7-tuples, output that G has no odd hole of type 3. The proof of correctness is like
that for 4.3, and we omit it. This proves 4.4.
Similarly we have:
Theorem 4.5. There is an algorithm with the following specifications:
Input: A candidate G.
Output: Determines either that G has an odd hole or that G has no shortest odd hole of type 5.
Running time: O(|G|
9).
Theorem 4.6. There is an algorithm with the following specifications:
Input: A candidate G.
Output: Determines either that G has an odd hole, or that G has no shortest odd hole of type 2.
Running time: O(|G|
9).
Proof. Enumerate all 6-tuples (c2,c3,d1, x,d2,d3) of distinct vertices where c2c3 is an edge and
d1-x-d2 is an induced path. We test each 6-tuple in turn as follows. Let X1 be the set of common
neighbours of d1,d2 different fromx, and letX2 be the set of all vertices different fromx,c2,c3,d1,d2
that are adjacent to one of c2,c3. Let C1 be the set of all vertices of G different from c2,c3, x that
are adjacent to c2 and not to c3,d3, and let C4 be the set that are adjacent to c3 and not to c2,d3.
Let G be the graph obtained from G by deleting X1 ∪ X2 ∪ (N[x] \ {d1,d2}). If d3  V (G
), move
on to the next 6-tuple. Find the distance in G between d1,d3, and between d2,d3, and check that
they are finite and equal (to t, say); if not, move on to the next 6-tuple. For each v ∈ V (G
), find its
distance in G to d1,d2, and d3; let Y1 be the set of v  d1,d2 with the sum of its distances to d1,d3
equal to t, and let Y2 be the set of v  d1,d2 with the sum of its distances to d2,d3 equal to t. (Thus,
d3 ∈ Y1,Y2.) Let X3 be the set of vertices of G different from x,d1,d2 that are not in Y and have a
neighbour in Y.
LetG = G \ (X1 ∪ X2 ∪ X3 ∪ {x}). For eachv ∈ C1, if there is a path ofG betweenv and d1 such
that all its vertices except v belong to V (G), find such a path Rv of minimum length. For each
v ∈ C4, if there is a path of G between v and d2 such that all its vertices except v belong to V (G),
find such a path Rv of minimum length. Let C
1 be the set of v ∈ C1 such that Rv exists and has
even length, and let C
1 be the set of v ∈ C1 such that Rv exists and has odd length. Define C
4,C
4
similarly. Apply 4.2 in the graph obtained from G[C1 ∪C4 ∪V (G)] by identifying d1,d2, to test
whether there exist c1 ∈ C
1 and c4 ∈ C
4 such that the paths Rc1 , Rc4 are both defined, disjoint, and
have no edges joining them. If so, output that G has an odd hole. Otherwise, apply 4.2 again to
test whether there exist c1 ∈ C
1 and c4 ∈ C
4 such that the paths Rc1 , Rc4 are both defined and are
disjoint and have no edges joining them. If so, output that G has an odd hole. Otherwise, move on
to the next 6-tuple. When all 6-tuples have been tested, if no odd hole is found, return that G has
no shortest odd hole of type 2.
To see the correctness, suppose that C is a shortest odd hole of type 2 in G, and let
c2,c3,d1,d2, x,D be as in the definition of type. Let d3 be the vertex of C that is the middle vertex
of the even path D. When the algorithm tests the 6-tuple (c2,c3,d1, x,d2,d3), let X1,X2,C1,C4 be
as in the description of the algorithm; then, it follows from 4.1 as before that the output is correct.
This proves 4.6.
Similar modifications handle the remaining two cases, and we omit them. In summary, we
have:
Journal of the ACM, Vol. 67, No. 1, Article 5. Publication date: January 2020.     
5:12 M. Chudnovsky et al.
Theorem 4.7. There is an algorithm with the following specifications:
Input: A candidate G.
Output: Determines whether G has an odd hole.
Running time: O(|G|
9).
Proof. If G has an odd hole, then it has a shortest odd hole of one of the six types; by running
the algorithms just described, we can detect it.
Our main result, 1.1, follows immediately from this and 2.5. One final remark: we have an algorithm to determine whether G has an odd hole, but what about actually finding an odd hole? One
could obviously do this with an extra factor of |G| in the running time, just by deleting vertices and
running 4.7 repeatedly to find a maximal subset of the vertex set whose deletion does not destroy
all odd holes. But we can do better, and, in fact, it is easy to adapt the current algorithm to find
an odd hole instead of just detecting the existence of one, with running time O(|G|
9). We omit the
details. 