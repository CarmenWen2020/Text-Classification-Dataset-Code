“Mirror, mirror, on the wall, who is the fairest of them all?”
The Evil Queen
What is a fair way to assign rooms to several housemates and divide the rent between them? This is not
just a theoretical question: many people have used the Spliddit website to obtain envy-free solutions to rent
division instances. But envy freeness, in and of itself, is insufficient to guarantee outcomes that people view
as intuitive and acceptable. We therefore focus on solutions that optimize a criterion of social justice, subject
to the envy-freeness constraint, in order to pinpoint the “fairest” solutions. We develop a general algorithmic
framework that enables the computation of such solutions in polynomial time. We then study the relations
between natural optimization objectives and identify the maximin solution, which maximizes the minimum
utility subject to envy freeness, as the most attractive. We demonstrate, in theory and using experiments on
real data from Spliddit, that the maximin solution gives rise to significant gains in terms of our optimization
objectives. Finally, a user study with Spliddit users as subjects demonstrates that people find the maximin
solution to be significantly fairer than arbitrary envy-free solutions; this user study is unprecedented in that
it asks people about their real-world rent division instances. Based on these results, the maximin solution has
been deployed on Spliddit since April 2015.
CCS Concepts: • Applied computing → Economics; • Human-centered computing → User studies; •
Theory of computation → Market equilibria;
Additional Key Words and Phrases: Computational fair division
1 INTRODUCTION
Many a reader may have personally experienced the rent division problem: several housemates
move in together and need to decide who gets which room and at what price. The problem
becomes interesting—and, more often than not, a source of frustration—when the rooms differ in
quality. The challenge is then to achieve “rental harmony” (Su 1999) by assigning the rooms and
dividing the rent fairly.
In more detail, suppose each player i has value vij for room j, such that each player’s values for
the rooms sum up to the total rent. The (quasi-linear) utility of playeri for getting room j at price pj
is vij − pj . A solution (i.e., an assignment of the rooms and division of the rent) is envy free (Foley
1967) if the utility of each player for getting his room at its price is at least as high as getting any
other room at the price of that room. More generally, one can think of this problem as allocating
indivisible goods and splitting a sum of money—but we adopt the rent division terminology, which
grounds the problem and justifies our assumptions.
Envy freeness is undoubtedly a compelling fairness notion. But what makes it truly powerful
in the context of rent division is that an envy-free solution to a rent division problem always
exists (Svensson 1983). Even better, such a solution can be computed in polynomial time (Aragones
1995).
However, envy freeness in and of itself is insufficient to guarantee satisfactory solutions. For
example, consider an apartment with three rooms and total rent of $3. Each player i has value $3
for room i, and value $0 for the two other rooms. Furthermore, consider the solution that assigns
room 1 to player 1 at $3 and, for i ∈ {2, 3}, gives room i to player i for free. This solution is envy
free: players 2 and 3 are obviously overjoyed, while player 1 is indifferent between the three rooms.
However, from an interpersonal perspective, this solution is not fair at all, as the distribution of
prices between players is unequal. An intuitive alternative solution here would be to keep the same
assignment of rooms, but equally split the rent between the different rooms—$1 per room—thereby
equalizing the utilities of the players.
The challenge, therefore, is to choose among many possible envy-free solutions. And, arguably,
the most natural way to do this is to optimize a function of the utilities that meets desirable social
criteria, subject to the envy-freeness constraint (Alkan et al. 1991). In particular, if we were to
maximize the minimum utility of any player subject to envy freeness, or if we were to minimize
the maximum difference in utilities subject to envy freeness, we would obtain the aforementioned
solution in the example. This focus on optimization in rent division motivates us to
design polynomial-time algorithms for optimization under the envy-freeness constraint; understand the relationship between natural optimization objectives; and
measure the theoretical and practical benefits of optimization in rent division.
1.1 Real-World Connections and Implications: The Spliddit Service
The aforementioned challenges are especially pertinent when put in the context of Spliddit
(www.spliddit.org), a not-for-profit fair division website (Goldman and Procaccia 2014). Spliddit
offers “provably fair solutions” for the division of credit, indivisible goods, chores, fare—and, of
course, rent. Since its launch in November 2014, Spliddit has attracted more than 100,000 users,
who, in particular, have created 27,344 rent division instances (as of July 6, 2017).
Until April 2015, Spliddit’s rent division application relied on the algorithm of Abdulkadiroğlu
et al. (2004), which elicits the values of the players for the rooms and computes an envy-free
solution assuming quasi-linear utilities. While many users were satisfied with the results (based
on their reported evaluations1), the algorithm does provide nonintuitive solutions in some cases.
1An example of one of many positive reviews: “This tool helped us a lot. We live in a flat populated by international,
young people, so it’s been almost a revolving door of roommates. [...] With your method we were able to avoid any long
discussions. Thank you.”
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
Which Is the Fairest (Rent Division) of Them All? 39:3
This prompted an investigation of alternative approaches and ultimately led to the deployment of
a new algorithm in April 2015, based entirely on the results presented in this article.
It is important to point out that Spliddit not only motivates our research questions but also helps
answer them. Indeed, while Spliddit’s primary goals are making fair division methods accessible
to people and outreach, a secondary goal is the collection of an unprecedented dataset for fair division research (Goldman and Procaccia 2014). This real-world dataset is exciting because, as noted
by Herreiner and Puppe (2009), fair division is hard to study in the lab: researchers can tell subjects
in the lab what their valuations are for different goods, but these values are not ecologically realistic, in that they do not represent subjects’ actual preferences. To quote Herreiner and Puppe (2009),
“the goods in the lab are not really distributed among participants, but serve as temporary substitutes for money.” By contrast, Spliddit instances are ecologically valid, as they are posed by real
people facing real division problems. Thus, the Spliddit data enables studies at a realistic level and
scale that was not possible before. Even better, we can ask Spliddit users to evaluate different solutions based on the actual instances they participated in. This is exactly what we do in this article.
1.2 Our Results
We start, in Section 3, by constructing a general yet simple algorithmic framework for optimization
under the envy-freeness constraint. Specifically, our algorithm maximizes the minimum of linear
functions of the utilities, subject to envy freeness, in polynomial time. We do this by using the
Second Welfare Theorem to argue that we can employ any welfare-maximizing assignment of
players to rooms and then solve a linear program to compute the optimal envy-free prices.2
Our main goal in Section 4 is to understand the relation between two solution concepts: the
maximin solution (Alkan et al. 1991), which maximizes the minimum utility of any player subject to
envy freeness, and the equitable solution, which minimizes disparity—the maximum difference in
utilities—subject to envy freeness. (Our algorithm can compute either solution in polynomial time.)
Our most significant result in this section is proving that the maximin solution is also equitable,
but not every equitable solution is maximin.
Based on these results, we have implemented the polynomial-time algorithm of Section 3, with
the maximin objective function.3 As noted earlier, it has been deployed on Spliddit since April 2015.
The remainder of the article focuses on demonstrating that the foregoing approach is indeed
effective, via theory and experiments. Here our contribution is twofold. First, we show—in Section 5—that when values are drawn from a uniform Dirichlet distribution, and there are two or
three players (the most common cases on Spliddit), the expected difference between the worst
and best envy-free solutions in terms of disparity is significant. This means that, in theory, there
is scope for significant improvement according to the equitability criterion. But do we also see
an improvement in practice? We answer this question in the positive using Spliddit data. Indeed,
we show that real-world instances give rise to significant differences, according to both the maximin and equitability objectives, between the maximin solution (which optimizes both objectives
2It is interesting to note that, even though the instances on Spliddit are small, computational tractability does play a key role,
as there are many instances and computation incurs a cost (Spliddit uses Amazon Web Services to run all its algorithms). In
other words, if we reduce the computational resources required for each instance by some factor, then we reduce the total
computational resources required across tens of thousands of instances by the same factor, and that leads to significant
savings.
3To be completely precise, the algorithm deployed on Spliddit first tries to maximize the minimum utility, subject to envy
freeness as well as an additional constraint: prices must be nonnegative. If an envy-free solution with nonnegative prices
does not exist (Brams and Kilgour 2001), it removes the nonnegative price constraint (in which case a solution always
exists). Most of our results go through even when prices are assumed to be nonnegative. In any case, real-world instances
where negative prices actually help are extremely rare, so throughout the article prices are unconstrained.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
39:4 Y. (Kobi) Gal et al.
simultaneously) and an arbitrary envy-free solution (which does not attempt to optimize either
objective).
Second, we report results from a user study, which has been a long time in the making. We
contacted Spliddit users and asked them to compare two solutions: the maximin solution and an
arbitrary envy-free solution. Crucially, the two solutions were computed on each user’s actual
Spliddit instance (the values of other tenants were perturbed to preserve privacy). Subjects were
asked to subjectively rate the solutions in terms of fairness to themselves and fairness to others. The results show a significant advantage for the maximin solution in both questions, thereby
demonstrating the added value of optimization and supporting the decision to use the maximin
solution on Spliddit.
1.3 Related Work
The idea of refining envy-free solutions has been explored in several papers (Alkan et al. 1991;
Tadenuma and Thomson 1991, 1995; Velez 2017), typically from an axiomatic viewpoint. We focus
on the work of Alkan et al. (1991), who study the more general problem of allocating goods and
dividing money. They start by proving the existence of envy-free solutions in this setting, but, like
us, they ultimately employ criteria of justice in order to find the “best” envy-free solutions. They
are especially interested in the maximin solution, which they call the value-Rawlsian solution, and
the solution that maximizes the minimum amount of money allocated to any player, subject to
envy freeness, which they call the money-Rawlsian solution. They show that the maximin solution
is unique, as are a number of less attractive solutions (minimize the maximum utility, maximize
the utility of one particular player). Finally, they show that these criteria imply solutions with a
monotonicity property: if the amount of money is increased, the utility of all players is strictly
higher (this property is moot in our setting). Alkan et al. (1991) do not provide algorithmic results.
Aragones (1995) designs a polynomial-time algorithm for computing the money-Rawlsian solution of Alkan et al. (1991). Her combinatorial algorithm does not extend to other criteria. In
contrast, our LP-based framework is significantly more general and, in particular, allows us to
compute the maximin solution (which we view as the most attractive) in polynomial time. Our
algorithmic approach is also much simpler. It is worth noting that Klijn (2000) gives a different
polynomial-time algorithm for computing envy-free solutions, without guaranteeing any additional properties (other than being extreme points of a certain polytope).
There are (at least) three marketlike mechanisms for computing solutions for the rent division
problem assuming quasi-linear utilities, by Brams and Kilgour (2001), Haake et al. (2002), and
Abdulkadiroğlu et al. (2004). All three do not consider optimization criteria; in the case of the
mechanism of Brams and Kilgour (2001), the solution may not be envy free. As mentioned earlier,
the mechanism of Abdulkadiroğlu et al. (2004) was deployed on Spliddit until April 2015.
One fundamentally different approach to rent division that we would like to discuss in more
detail is that of Su (1999). He does not assume quasi-linear utilities; rather, his main assumption
is that a player would always prefer getting a free room to getting another room at a positive
price (the so-called miserly tenants assumption). Under this assumption, Su (1999) designs an algorithm that converges to an (approximately) envy-free solution, by iteratively querying players
about their favorite room at given prices. While eschewing the quasi-linear utilities assumption is
compelling, a (crucial, in our view) disadvantage of this approach is that preference elicitation is
very cumbersome. Interestingly, Su’s method was implemented by the New York Times.
4
Relatively few papers explore fair allocations among people in lab settings, and there is inconclusive evidence about the types of solution criteria that are favored by people. Dupuis-Roy and
4http://goo.gl/Xp3omV. This article also discusses the then-under-construction Spliddit.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
Which Is the Fairest (Rent Division) of Them All? 39:5
Gosselin (2011) report that fair division algorithms were rated less desirable than imperfect allocations that did not employ any fairness criterion, while Schneider and Krämer (2004) find that
subjects preferred envy-free solutions to a divide-and-choose method that does not guarantee
envy freeness. Herreiner and Puppe (2009, 2010) find that envy freeness was a dominant factor
in the allocations favored by subjects, but that it was a secondary criterion to Pareto optimality
or inequality-minimizing allocations. Kohler (2013) proposes an equilibrium strategy for repeated
negotiation that incorporates fairness and envy concerns. In all of these papers, the studies were
conducted in a controlled lab setting in which subjects’ valuations over goods were imposed on
the subjects or the goods to be allocated were chosen by the experimenters themselves.
2 THE MODEL
We are interested in rent division problems involving a set of players [n] = {1,...,n} and a set of
rooms [n]. Each player i has a nonnegative value vij ∈ R+ for each room j. We assume without
loss of generality that the total rent is 1, and also assume (with loss of generality) that for all
i ∈ [n], n
j=1 vij = 1. We can therefore represent an instance of the rent division problem as a right
stochastic (rows sum to 1) matrix V ∈ Mn×n (R+).
An assignment of the rooms is a permutation σ : [n] → [n], where σ (i) is the room assigned to
player i. The division of rent is represented through a vector of (possibly negative) prices p ∈ Rn
such that n
i=1 pi = 1; pj is the price of room j.
Given a solution (σ, p) for a rent division problemV , the quasi-linear utility of playeri is denoted
ui (σ, p) = viσ (i) − pσ (i). A solution is envy free (EF) if the utility of each player for her room is at
least as high as any other room. Formally, (σ, p) is EF if and only if
∀i, j ∈ [n], viσ (i) − pσ (i) ≥ vij − pj . (1)
3 COMPUTATION OF OPTIMAL ENVY-FREE SOLUTIONS
As noted previously, it is possible to compute an envy-free solution to a given rent division problem
in polynomial time (Aragones 1995). We are interested in choosing among envy-free allocations by
optimizing an objective function, subject to the envy-freeness constraint. Our goal in this section
is to show that this can be done in polynomial time, when the objective function is the minimum
of linear functions of the utilities.
Theorem 3.1. Let f1,..., ft : Rn → R be linear functions, where t is polynomial in n. Given a rent
division instance V , a solution (σ, p) that maximizes the minimum of fq (u1 (σ, p),...,un (σ, p)) over
all q ∈ [t] subject to envy freeness can be computed in polynomial time.
Natural examples of objective functions of the form specified in the theorem are maximizing the minimum utility and minimizing the maximum difference in utilities; we discuss these objectives in detail in Section 4. The former objective can be directly captured
by setting t = n, and fi (u1 (σ, p),...,un (σ, p)) = ui (σ, p) for all i ∈ [n]. The latter criterion
is also captured by setting t = n2 and fij (u1 (σ, p),...,un (σ, p)) = ui (σ, p) − uj (σ, p). Indeed,
mini,j ∈[n] fij (u1 (σ, p),...,un (σ, p)) = − maxi,j ∈[n]{ui (σ, p) − uj (σ, p)}, so maximizing the minimum of these linear functions is equivalent to minimizing the maximum difference in utilities.
Our polynomial-time algorithm relies on a connection between envy-free rent division and the
concept of Walrasian equilibrium. To understand this connection, imagine a more general setting
where a set of buyers [n] are interested in purchasing bundles of goods G; here, each buyer i has
a valuation function vi : 2G → R, assigning a value vi (S) to every bundle of goods. A Walrasian
equilibrium is an allocation A = (A1,...,An ) of the goods to buyers (where Ai ⊆ G is the bundle
given to buyer i), coupled with a price vector p that assigns a price to each good, such that each
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.  
39:6 Y. (Kobi) Gal et al.
player receives the best bundle of goods that she can buy for the price p; formally:
∀i ∈ [n], S ⊆ G, vi (Ai ) − p(Ai ) ≥ vi (S) − p(S). (2)
We say that an allocation A is welfare maximizing if it maximizes n
i=1 vi (Ai ). The following properties of Walrasian equilibria are well known; see, for example, the book of Mas-Colell et al. (1995,
Chapter 16).
Theorem 3.2 (1st Welfare Theorem). If (A, p) is a Walrasian equilibrium, then A is a welfaremaximizing allocation.
Theorem 3.3 (2nd Welfare Theorem). If (A, p) is a Walrasian equilibrium and A is a welfaremaximizing allocation, then (A
, p) is a Walrasian equilibrium as well. Furthermore,vi (Ai ) − p(Ai ) =
vi (A
i ) − p(A
i ) for all i ∈ [n].
Now, an EF solution in the rent division setting is a Walrasian equilibrium in the setting where
the goods are the rooms and the valuation function of each player for a subset S ⊆ [n] of rooms is
given by vi (S) = maxj ∈S vij (these are unit demand valuations)—it is easily seen that Equation (1)
coincides with Equation (2) in this case. This means that we can apply the welfare theorems to
EF allocations.5 For example, we can immediately deduce a simple result of Svensson (1983): any
EF solution (σ, p) is Pareto efficient, in the sense that there is no other solution (σ 
, p
) such that
ui (σ 
, p
) ≥ ui (σ, p) for all i ∈ [n], with strict inequality for at least one i ∈ [n]. To see this, note
that σ is welfare maximizing by Theorem 3.2, and the sum of prices is 1 under both p and p
.
We are now ready to present our polynomial-time algorithm for maximizing the minimum of
linear functions f1,..., ft of the utilities, subject to EF; it is given as Algorithm 1.
ALGORITHM 1:
(1) Let σ ∈ argmaxπ {
n
i=1 viπ (i)} be a welfare-maximizing assignment
(2) Compute a price vector p by solving the linear program
max R
s.t.: R ≤ fq (v1σ (1) − pσ (1),...,vnσ (n) − pσ (n)) ∀q ∈ [t]
viσ (i) − pσ (i) ≥ vij − pj ∀i, j ∈ [n]
n
j=1
pj = 1
The algorithm starts by computing a welfare-maximizing assignment σ of players to rooms; this
can be done in polynomial time, as this task reduces to the maximum weight bipartite matching
problem, with players on one side of the graph, rooms on the other, and a weight vij on each edge
(i, j). It then solves (in polynomial time) a linear program, with variables p1,...,pn, which computes optimal envy-free prices with respect to σ. The first constraint sets (in an optimal solution)
the objective R to the minimum of the linear functions fq (·). Envy freeness is enforced by the
second constraint, and the third constraint guarantees that the prices sum to 1.
However, it may not be immediately clear why starting from an arbitrary welfare-maximizing
assignment allows us to compute the optimal solution subject to envy freeness. This is formally
established in the proof that follows.
5In the context of rent division, Theorems 3.2 and 3.3 can also be derived from the results of Alkan et al. (1991) and Svensson
(2009).
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.   
Which Is the Fairest (Rent Division) of Them All? 39:7
Proof of Theorem 3.1. Let (σ∗, p∗) be the solution that maximizes the minimum of
f1 (·),..., ft (·) subject to EF. Furthermore, let σ be the welfare-maximizing allocation computed
in the first step of Algorithm 1. By Theorem 3.3, (σ, p∗) is such that ui (σ, p∗) = ui (σ∗, p∗) for all
i ∈ N. In particular, (σ, p∗) is EF, and
min
q ∈[t]
fq (u1 (σ, p∗),...,un (σ, p∗)) = min
q ∈[t]
fq (u1 (σ∗
, p∗),...,un (σ∗
, p∗)). (3)
Because p∗ is a feasible solution to the linear program, we have that its optimal solution p satisfies
min
q ∈[t]
fq (u1 (σ, p),...,un (σ, p)) ≥ min
q ∈[t]
fq (u1 (σ, p∗),...,un (σ, p∗)). (4)
Putting Equations (3) and (4) together, we see that we must have equality in Equation (4), and that
(σ, p) is an optimal envy-free solution.
4 RELATIONS BETWEEN THE FAIREST SOLUTIONS
Algorithm 1 allows us to maximize the minimum of linear functions of the utilities, subject to
EF, in polynomial time. With the potential computational barrier out of the way, we would like to
understand which optimization objective to use. Specifically, we focus on two natural optimization
objectives and evaluate their properties.
We refer to the first objective as equitability. Let EF (V ) be the set of all EF solutions forV . Given
a solution (σ, p) ∈ EF (V ), we define D(σ, p) as the difference between the utilities of the happiest
player and the worst-off player under the solution (σ, p), that is,
D(σ, p) = max
i,j ∈N
{ui (σ, p) − uj (σ, p)}.
In more general terms, the function D measures the social disparity under the solution (σ, p); we
would like to minimize this quantity. A solution (σ∗, p∗) is called equitable if it minimizes D over
EF (V ), that is,
(σ∗
, p∗) ∈ arg min{D(σ, p) | (σ, p) ∈ EF (V )}.
Herreiner and Puppe (2009) demonstrate via experiments with human subjects that equitability is
of great importance in determining whether an allocation is perceived to be fair by people.
Alternatively, instead of minimizing social disparity, one might be interested in maximizing
the utility of the worst-off player. More formally, given an EF solution (σ, p), we let U (σ, p) =
mini ∈N ui (σ, p); if
(σ∗
, p∗) ∈ arg max{U (σ, p) | (σ, p) ∈ EF (V )}, (5)
then we say that (σ∗, p∗) is a maximin solution.
Alkan et al. (1991) argue that the maximin solution—which they call the value-Rawlsian
solution—is compelling on philosophical grounds. Mathematically, they demonstrate that the maximin solution is associated with a unique vector of utilities, making this solution even more
appealing.
The fact that equitable and maximin allocations are constrained to be EF again allows us to employ the Second Welfare Theorem (Theorem 3.3) to great effect. Indeed, if (σ∗, p∗) is equitable (maximin, respectively), and σ  is a welfare-maximizing assignment, then (σ 
, p∗) is equitable (maximin,
respectively). Therefore, hereinafter we assume without loss of generality that the identity assignment σ (i) = i is welfare maximizing and simply use D(p) orU (p) to refer to these measures under
the identity assignment. In particular, we can talk about equitable or maximin vectors of prices
with respect to the identity assignment.
At first glance, the equitability and maximin criteria seem equally appealing. Which one leads
to fairer solutions? The next theorem shows that we do not have to choose—the maximin solution
is equitable.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017. 
39:8 Y. (Kobi) Gal et al.
Theorem 4.1. If p∗ is a maximin vector of prices, then it is also equitable.
Proof. Given an EF vector of prices p, it will be useful to think of the following graph Γ(p) =
([n], E); the nodes in Γ(p) are the players, and there is a directed edge from i to j if i weakly envies
j—that is, vi i − pi = vij − pj (recall that we are assuming the identity assignment). We say that i
is poor if i has minimum utility under p; similarly, a player i is called rich if i has maximum utility
under p.
We first claim that if p∗ is a maximin rent division, then every nonpoor player i has a path to
a poor player in Γ(p∗). Indeed, assume for contradiction that this is not the case, and let T ∗ be
the set of all players that have no path to poor players under Γ(p∗); by assumption, T ∗  ∅, and
[n] \ T ∗  ∅ as well ([n] \ T ∗ contains, at the very least, the poor players, who have a path of length
0 to themselves). Let us observe the vector of prices q defined as follows:
qi =
pi + ε i ∈ T ∗
pi − |T ∗ |ε
n− |T ∗ | i ∈ [n] \ T ∗ .
Here, ε is a very small constant, which is in particular smaller than min{ui (id, p∗) − uj (id, p∗) |
ui (id, p∗) > uj (id, p∗)}. Let i, j ∈ [n] such that i weakly envies j under p∗. If i, j ∈ T ∗ or i, j ∈
[n] \ T ∗, then i still weakly envies j: their prices changed by the same amount. If i belongs to
T ∗, then j cannot belong to [n] \ T ∗; otherwise, there would be a path from i to some poor player,
a contradiction to the definition of T ∗. If i belongs to [n] \ T ∗ and j belongs to T ∗, then i enjoyed
a decrease in rent, whereas j suffered an increase, so i does not envy j under q. We conclude that
q is envy free, by our choice of ε. However, because [n] \ T ∗ includes all poor players, the minimum utility under q is strictly higher than under p∗, a contradiction to p∗ being a maximin EF rent
division.
Next, let q∗ be an equitable EF price vector. Suppose for contradiction that D(p∗) > D(q∗). If all
players have the same utility under p∗, then D(p∗) = 0 ≤ D(q∗), which is impossible. Hence, there
must be some rich players that are not poor under p∗.
We write ε = U (p∗) − U (q∗); since p∗ is a maximin EF rent division,ε ≥ 0. This means that every
poor player under p∗ could have had their utility decreased by at most ε. In other words, if i is a
poor player under p∗, then q∗
i − p∗
i ≤ ε. Moreover, since D(p∗) > D(q∗) by assumption, it must be
the case that the rich players under p∗ had their utility decreased by strictly more than ε; this is
because if i is a rich player, then
ui (id, p∗) − min
j ∈[n]
uj (id, p∗) > max
j ∈[n]
uj (id, q∗) − min
j ∈[n]
uj (id, q∗),
and therefore ui (id, p∗) > maxj ∈[n] uj (id, q∗) + ε, which implies that ui (id, p∗) > ui (id, q∗) + ε, or,
equivalently, q∗
i − p∗
i > ε.
We know that there is a path from at least one rich player (who is not poor) to at least one poor
player in Γ(p∗). In particular, there must be an edge (i, j) on that path such that q∗
i − p∗
i > q∗
j − p∗
j .
By the definition of Γ(p∗), vi i − p∗
i = vij − p∗
j . It follows that
vi i − q∗
i = vi i − p∗
i + (p∗
i − q∗
i ) < vij − p∗
j + (p∗
j − q∗
j ) = vij − q∗
j ,
contradicting the envy freeness of q∗.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.  
Which Is the Fairest (Rent Division) of Them All? 39:9
By contrast, an equitable solution may not be maximin, as the following example shows.
Example 4.2 (An equitable solution that is not maximin). This example is particularly appealing,
as it is a real-world instance submitted by Spliddit users:



2227 708 0
258 1378 1299
1000 1000 935



.
Note that the total rent is $2,935. The optimal room assignment gives roomi to playeri; the maximin rent division is p∗ = (1813 1
3 , 600 1
3 , 521 1
3 ), with a utility vector ofu1 (id, p∗) = 413 2
3 ,u2 (id, p∗) =
777 2
3 ,u3 (id, p∗) = 413 2
3 . We have D(p∗) = 777 2
3 − 413 2
3 = 364, and by Theorem 4.1, any solution
that has the same disparity is equitable. However, the price vector p = (1570 2
3 , 721 2
3 , 642 2
3 ) is
an EF rent division, resulting in u1 (id, p
) = 656 1
3 ,u2 (id, p
) = 656 1
3 ,u3 (id, p
) = 292 1
3 , and D(p
) =
656 1
3 − 292 1
3 = 364 as well; that is, it is equitable, but the minimum utility is (much) smaller than
that under p∗.
Let us now discuss a third optimization objective, the money-Rawlsian solution, which is mentioned by Alkan et al. (1991) and implemented in polynomial time by Aragones (1995). The latter
author describes the following procedure for finding EF solutions. Begin by finding a welfaremaximizing assignment of rooms (again, assume without loss of generality that room i goes to
player i); next, find a vector q∗ ∈ Rn
+ of nonnegative values such that vi i + q∗
i ≥ vij + q∗
j and Q∗ = n
i=1 q∗
i is minimized. That is, each playeri pays a value of −q∗
i . Next, increase the prices of all players by a quantity α such that nα − Q∗ = 1; that is, the vector (α,..., α) − q∗ is a valid price vector.
While the money-Rawlsian solution is interesting, it may be “maximally unfair” in terms of
disparity, as the following example shows.
Example 4.3 (The money-Rawlsian solution may maximize disparity). We analyze the following
rent division instance:
V =

1 0
1
2
1
2

.
The welfare-maximizing assignment allocates room i to player i, and q∗ = (0,..., 0). A uniform
increase in rent will ensue, resulting in the price vector (1/2, 1/2) and the utility vector (1/2, 0).
Crucially, the money-Rawlsian price vector maximizes disparity among all EF solutions. Note that
the maximin price vector is (3/4, 1/4), which, of course, minimizes disparity.
To conclude, so far we know that the maximin solution, the equitable solution, and the moneyRawlsian solution can be computed in polynomial time. Moreover, Theorem 4.1 shows that the
maximin solution, which by definition maximizes the minimum utility, also minimizes disparity
(among all EF solutions)—so it is a refinement of the equitable solution. In stark contrast, the
money-Rawlsian solution may maximize disparity (among all EF solutions). We therefore view
the maximin solution as the clear choice and focus on analyzing its effectiveness hereinafter.
5 ON THE IMPORTANCE OF BEING EQUITABLE
Our goal in this section is to understand how much better the maximin solution is, in terms of the
maximin and disparity objectives, compared to suboptimal solutions on average. In Section 5.1, we
show that the expected gain in terms of reducing disparity is significant in a formal probabilistic
model. For this theoretical analysis, we focus on the cases of two and three players, which are
the most common on Spliddit. We also focus on the equitability criterion, but the same ideas can
be applied to the maximin criterion. In Section 5.2, we conduct an empirical analysis, showing
significant gains in both of our primary objective functions on real data from Spliddit.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.   
39:10 Y. (Kobi) Gal et al.
5.1 The Benefit Is Significant in Theory
Given an n player rent division problem, let D+(V ) = maxp∈EF (V ) D(p), and D∗ (V ) =
minp∈EF (V ) D(p); that is, D+(V ) is the highest utility difference between the best- and worst-off
players under the disparity-maximizing EF solution, whereas D∗ (V ) is the difference between the
best- and worst-off players under the equitable solution discussed earlier. In order to establish the
potential impact of minimizing disparity, we would like to show that instances where the difference D+(V ) − D∗ (V ) is significant are a common occurrence.
More formally, we are interested in computing EV ∼μ [D+(V ) − D∗ (V )] for rent division instances
sampled from some distribution μ over n player rent division instances. In our theoretical results
that follow, we use the uniform Dirichlet distribution over each player’s values for the n rooms. In
more detail, each i ∈ [n] chooses a valuation profile uniformly at random from the n − 1 dimensional simplex. Such uniform distributions can be generated as follows: let X1,...,Xn−1 ∼ U[0, 1]
be independent uniform random variables on [0, 1], and let X(1) ≤ ··· ≤ X(n−1) be the variables
sorted according to their order statistics; then the vector v = (X1,X(2) − X(1),...,X(n−1) −
X(n−2), 1 − X(n−1)) corresponds to a sample from the uniform Dirichlet distribution.
The Two-Player Case. Let us start with the setting where there are only two players. In that case,
a valuation matrix can be written as

v1 1 −v1
v2 1 −v2

,
where v1,v2 ∈ [0, 1]. To draw a random instance, we simply need to drawv1,v2 ∼ U[0, 1]. We use
two lemmas to exactly calculate EV ∼μ [D+(V ) − D∗ (V )].
Lemma 5.1. Let n = 2. Then there exists an EF price vector p− such that D(p−) = 0.
Proof. We again assume that the identity assignment is welfare maximizing. Given a price
vector (p1,p2), the player utilities are v1 − p1 and 1 −v2 − p2; setting p2 = 1 − p1 and solving for
v1 − p1 = 1 −v2 − p2 yields p1 = v1+v2
2 .
It remains to make sure that this solution is indeed envy free. Under this price vector, we have
that player 1’s utility from room 1 is v1−v2
2 , and her utility from room 2 is 1 −v1 − (1 − v1+v2
2 ) = v2−v1
2 . Now, if player 1 envies player 2, then v1 < v2, in which case allocating room i to player i is
not a welfare-maximizing assignment. To see this, note that
v1 + 1 −v2 ≥ v2 + 1 −v1 ⇐⇒ v1 ≥ v2.
Thus, under this price vector, player 1 does not envy player 2. Now, player 2’s utility from room 2
is v1−v2
2 , and her utility from room 1 is v2 − v1+v2
2 = v2−v1
2 , which is not more than his or her utility
from her own room as previously argued.
To conclude, p− = (
v1+v2
2 , 1 − v1+v2
2 ) is an EF price vector for which D(p−) = 0.
Lemma 5.2. Given a two-player rent division instance
V =

v1 1 −v1
v2 1 −v2

,
it holds that D+(V ) = |v1 −v2 |.
Proof. Suppose that v1 ≥ v2 (the case of v1 < v2 is handled similarly). In this case, we can assume that room i is assigned to player i. A price vector (p1,p2) is EF if and only if v2 ≤ p1 ≤ v1.
Since D(p) is the maximum of linear functions, its maxima occur on vertices of the polyhedron of EF rent divisions. Thus, the maximum difference in player utilities must occur when p1
equals either v1 or v2. Note that u1 (v1, 1 −v1) = 0,u2 (v1, 1 −v1) = v1 −v2, and u1 (v2, 1 −v2) =
v1 −v2,u2 (v2, 1 −v2) = 0. Thus, in either case D+(V ) = v1 −v2.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.  
Which Is the Fairest (Rent Division) of Them All? 39:11
Therefore, in order to estimate E[D+(V ) − D∗ (V )] in the two-player case, we simply need to
calculate E[|v1 −v2 |], which is clearly 1/3. We include the proof for completeness.
Theorem 5.3. Let
V =

v1 1 −v1
v2 1 −v2

be a two-player rent division instance, where v1,v2 ∼ U(0, 1); then E[D+(V ) − D∗ (V )] = 1
3 .
Proof. According to Lemmas 5.1 and 5.2, D+(V ) = |v1 −v2 | and D∗ (V ) = 0. Thus, we need to
calculate
E[D+(V )] = E[|v1 −v2 |] =
 1
0
 1
0
|v1 −v2 | dv2dv1 = 2
 1
0
 v1
0
(v1 −v2) dv2dv1
= 2
 1
0
1
2
(v1)
2 dv1 = 1
3
,
where the third equality follows from symmetry between v1 and v2.
Three Players, and Beyond. We now proceed to tackle the three-player rent division case, in
the foregoing regime. While our results for this case are not nearly as tight as for the case of
two players, we provide an in-depth analysis of an interesting class of three player rent division
instances. This class includes instances where all players mostly agree on the value of one room
but disagree on the values of the other two.
More formally, let C∗ (ε) be the class of three-player rent division instances that satisfy the
following property: there exists some room j for which |vij −vkj | ≤ ε for all i, k ∈ [n], but |vi −
vk | ≥ 2ε for all  ∈ [n] \ {j} and all i ∈ [n], k ∈ [n] \ {i}. The next lemma—whose proof is given in
the appendix—shows that if a rent division instance V is in C∗ (ε), then V allows for an extremely
equitable EF solution, where each player has utility of nearly (

i vi i − 1)/3; however, it also admits
an EF solution where one of the players has utility 0—the worst possible outcome.
Lemma 5.4. If V ∈ C∗ (ε), then there exist EF price vectors p+ and p− such that U (p−) ≥
i vi i−1
3 − 2
3 ε, but U (p+) = 0. Moreover, D∗ (V ) ≤ ε, but D+(V ) ≥ 2ε.
By proving a lower bound on the probability that rent division instances belong to C∗ (ε), we
can establish the following theorem, whose proof appears in the appendix.
Theorem 5.5. Let V be a three-player rent division instance drawn from the uniform Dirichlet
distribution; then, for any ε < 1/5,
Pr[D+(V ) − D∗ (V ) ≥ ε] ≥
15189
5
ε6 − 4560ε5 + 1902ε4 − 312ε3 + 18ε2
.
For example, Theorem 5.5 implies that with probability at least 0.019, D+(V ) − D∗ (V ) ≥ 0.07
(which is 7% of the total rent). With smaller probability of roughly 0.00024, the difference is huge—
almost 20% of the total rent.
By contrast, it is intuitive that as n grows, we cannot expect the difference in disparity to remain
bounded away from zero. The reason is that for any fixed ε > 0, it is likely that all players agree
on the values of all rooms up to ε; that is, |vik −vjk | < ε for all i, j, k ∈ [n] with high probability.
This property guarantees that near equitability holds for all EF rent divisions. Indeed, when all
players agree on all values up to ε, choosing different EF price vectors causes little difference in
players’ utilities; in a sense, there is very little “wiggle room” due to players’ utility vectors being
so similar to one another. Formally:
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.      
39:12 Y. (Kobi) Gal et al.
Lemma 5.6. If V is such that |vik −vjk | < ε for all i, j, k ∈ [n], then D(p) ≤ ε for all EF payment
vectors p.
Proof. Assume again that room i is allocated to player i. If p is EF, then vi i − pi ≥ vij − pj ,
and vjj − pj ≥ vji − pi for all i, j ∈ [n]. Since the values are within ε of each other, we have that
vi i − pi ≥ vjj − pj − ε; similarly, we have that vjj − pj ≥ vi i − pi − ε. Thus, |ui (id, p) − uj (id, p)| ≤
ε.
Now it remains to show that values are indeed likely to be close to each other.
Theorem 5.7. For any ε = ε(n) = 1
o(n) , limn→∞ Pr[D+(V ) < ε] = 1.
Proof. By Lemma 5.6, it is sufficient to prove that
lim
n→∞ Pr[∀i, j, k ∈ [n], |vij −vik | < ε] = 1.
Observe that the probability that player i evaluates room 1 at least at ε is exactly (1 − ε)
n−1. By
symmetry, this is true for any room j ∈ [n]. Taking a union bound over all players and rooms,
we obtain that Pr[∃i, j ∈ [n] s.t. vij ≥ ε] ≤ n2 (1 − ε)
n−1. However, for ε = 1/o(n), we have that
limn→∞ n2 (1 − ε)
n−1 = 0.
5.2 The Benefit Is Significant in Practice
Earlier we analytically established the potential for significantly reducing disparity by using the
maximin solution. In the remainder of the section, we demonstrate the practical benefit of the
maximin solution with respect to real-world instances that were submitted by Spliddit users.
In our empirical results, we compare the maximin solution to an arbitrary EF solution, which
is obtained by solving a feasibility linear program without an optimization objective. By contrast,
the theoretical analysis compares the maximin solution to the worst EF solution. We note that
similar empirical results are obtained when comparing the maximin solution to the algorithm of
Abdulkadiroğlu et al. (2004).
The comparison is in terms of both of our main objectives, D and U (which are simultaneously
optimized by the maximin solution). We expected that D would be significantly lower, and U significantly higher, in the maximin solution compared to an arbitrary EF solution.
We focus our analysis on 1,358 rent division instances involving 3,682 players, which were submitted on Spliddit between January 2015 and December 2015. The number of instances for each
number of players 2, 3, 4, 5, 6, 7, 8, and 9 is 698, 445, 160, 35, 9, 8, 1, and 2, respectively. We only
use instances that include two, three, or four players, for which we have at least 160 instances in
the database and for which obtaining statistical significance was possible. Importantly, note that
this is a small subset of the 13,277 rent division instances created by Spliddit users by the time the
analysis was conducted, in December 2015; this is because we selected instances very conservatively, to ensure the ecological validity of our analysis. For example, Spliddit allows a “live demo”
mode of interaction, and we excluded instances created that way.
To illustrate users’ values for rooms in the Spliddit dataset, we present Figure 1, which visualizes the distribution for two-player instances. The x-axis shows the value of player 1 for room
1, and the y-axis shows the value of player 2 for room 1. The total rent is normalized to $1, so
each player’s value for room 2 is simply the complement of the displayed value; that is, the point
(x,y) corresponds to an instance where the values of player 1 are (x, 1 − x) and those of player
2 are (y, 1 − y). The diagonal from points (0, 0) to (1, 1) represents the points in which players
completely agree on the rooms’ values. We color each instance according to its distance from this
line, using shades of red for shorter distances and shades of blue for longer distances.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.  
Which Is the Fairest (Rent Division) of Them All? 39:13
Fig. 1. The distribution of values for two-player Spliddit instances (normalized to a total rent of $1).
The figure reveals several interesting phenomena. First, there is a significant cluster of instances
that is centered on or close to the (0.5, 0.5) mark, implying that both players are indifferent between
the two rooms. Second, we see a “cross” centered at the (0.5, 0.5) point, in which one of the players
is indifferent, while the other player prefers one of the two rooms. Third, there are some instances
in which one or both of the players are obstinate (i.e., x ∈ {0, 1} or y ∈ {0, 1}); that is, they desire a
specific room at any cost.
Let us now turn to the comparison we promised previously. Given a rent division instance V ,
let p∗ denote the price vector associated with the maximin solution, and pEF denote the price
vector associated with an arbitrary EF solution, as discussed earlier. As before, we let D(p) and
U (p) denote the social disparity and utility of the worst-off player under price vector p (assuming
a welfare-maximizing assignment of players to rooms). The improvement in social disparity D
from using the maximin price vector over the EF vector is defined as D(pEF ) − D(p∗), and the
improvement in the utility of the worst-off player U from using the maximin price vector over the
EF vector is defined as U (p∗) − U (pEF ).
Figure 2 shows the percentage of improvement out of the total rent in D and U . As shown by
the figure, for n = 2, 3, 4, the disparity associated with the maximin outcome is significantly lower
than that of the EF solution (9% of the total rent on average), and the utility of the worst-off player
associated with the maximin solution is significantly higher than that of the EF solution (4% of the
total rent on average). This trend is exhibited with respect to each value of n.
We note the following points. First, the degree of improvement in both D andU becomes smaller
as the number of players grows, which is in the same spirit as the results of Section 5.1. However,
even in cases where the improvement is relatively small, it still makes a qualitative difference, for
example, when the maximin solution achieves zero disparity, and the arbitrary EF solution achieves
strictly positive disparity (we discuss this fact in the next section). In addition, as noted earlier, the
vast majority of Spliddit instances include two or three players, for which the improvement in D
andU is higher than four players. Lastly, although this is not shown in the figure, an improvement
in both D and U occurs in over 90% of the instances, for n ∈ {2, 3, 4}.
6 USER STUDY
In the previous sections, we established, both theoretically and empirically, the benefits of the
maximin approach to computing envy-free solutions for rent division problems. The question
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
39:14 Y. (Kobi) Gal et al.
Fig. 2. Average percentage of improvement (out of the total rent) in social disparityD and utility of the worstoff player U when using the price vector associated with the maximin solution, compared to an arbitrary EF
solution, on Spliddit instances.
addressed by this section is, are people willing to accept such solutions in practice? To answer
this question, we conducted the following user study.
6.1 Study Design
People who used the Spliddit service during the year 2015 were invited (via email) to participate
in a short study to evaluate the new allocation method. We targeted users who participated in rent
division instances on Spliddit that included two, three, or four players. In order to use Spliddit, one
need not supply an email address; users can opt to send out URLs to other users, which is what the
vast majority of users choose to do. We only contacted users who supplied their email address—a
relatively small subset of the users who were involved in rent division instances.
All participants were given a $10 compensation that did not depend on their responses. In total,
the invitation email was sent to 344 Spliddit users, of which 46 users (13%) chose to participate.
The study was approved by the Institutional Review Board (IRB) of Carnegie Mellon University.
The study followed a within-subject design, by which each of the subjects was shown, in random
order, an arbitrary EF solution (as discussed in Section 5.2) and the maximin solution, applied to
their original problem instance.
Importantly, we wished to preserve the privacy of players regarding their evaluations over the
different rooms. Therefore, each player that participated in the study was shown a slightly modified
version of their own rent division problem. Information that was already known to each subject
was identical to the original Spliddit instance, including the total rent, the number of rooms, their
names, the subject’s own values for the different rooms, and the allocation of the rooms to the
players. Information that was perturbed to preserve the privacy of the other players included
their names, which were changed to “Alice,” “Bob,” or “Claire,” depending on whether there were
two, three, or four players, and the other players’ valuations, which were randomly increased or
decreased by a value of up to 15% under the constraint that the total rent is unchanged, and that
player valuations are still valid (nonnegative and sum to the total rent).
Figure 3 shows an example of the arbitrary EF allocation for one of the instances in the study,
from the perspective of a player called Hugo. The allocation of Hugo (room Verde, utility = $21)
is shown in the “window” at the right-hand side of the “house.” The value of this room for each of
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
Which Is the Fairest (Rent Division) of Them All? 39:15
Fig. 3. A visualization of a problem instance in the user study (from the point of view of a tenant named
Hugo).
the players is displayed using a bar graph, with Hugo’s own value highlighted via the green bar.
The price paid by Hugo for room Verde ($2, 382) is visualized as a horizontal line “cutting” through
the value bars of the players. This provides a vivid graphical description of the values and utilities
of the players for this room and makes it easy for participants to reason about fairness properties
relating to the proposed solution. For example, it is easy to see that none of the other players envies
room Verde for the proposed price. The other windows in the house show the allocations of the
players Alice and Bob in a similar way.
The subjects were shown the two solutions—maximin and arbitrary EF—for the instance presented to them. Both solutions include the same room allocation, but possibly differ in the prices
paid by the players. The two solution outcomes were shown in sequence, and in random order. For
example, the maximin solution for the rent division instance shown in Figure 3 provides the same
room assignment as the EF solution, but the utility of all players is $344 (compared to utilities of
$21 for Hugo, $825 for Claire, and $186 for Alice under the arbitrary EF solution). Note that the
disparity under the maximin solution is zero in this example, which was also the case in many of
the other instances included in the study (see later).
The subjects were asked to rate two different aspects of each of the two solutions on a scale
from 1 to 5, with 1 being least satisfied and 5 being most satisfied. The two aspects are the subject’s
individual allocation and the allocations of the other players. The two questions were phrased as
follows (using the rent division instance of Figure 3 for illustration purposes):
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
39:16 Y. (Kobi) Gal et al.
Fig. 4. Results of the user study.
(Individual) “This question relates to your own allocation. In other words, we would like you
to pay attention only to your own benefit. How happy are you with getting the
room called Verde for $2,382?”
(Others) “This question relates to the allocation for everyone else. How fair do you rate the
allocation for Bob and Claire?”
In both questions, players were able to write an argument or justification for their rating. To
cancel order effects, the two questions were presented in random order.
6.2 Results
We hypothesized that players would rate their own allocation under the maximin solution significantly higher than under the EF solution, and similarly for the allocation of the other participants.
Figure 4 shows the results of the user study. For each number of players (two, three, or four), we
show the average satisfaction level reported for the arbitrary EF solution and maximin solution
when relating to each player’s individual outcome (left chart) and others’ outcomes (right chart).
In all cases, the maximin solution is rated significantly higher than the envy-free solution for both
questions, passing a Wilcoxon signed-rank test with p < 0.04.
Anecdotally, based on textual feedback, subjects had a good understanding of the experiment.
As an example, on the instance of Figure 3, the subject identified as Hugo wrote regarding his own
outcome: “It looks like I am overpaying.” And for the allocation of the other players: “They both
get much more benefit.”
Why did players overwhelmingly prefer the prices from the maximin solution over the arbitrary
EF solution? Given the high importance attributed to social disparity when reasoning about fair division (Herreiner and Puppe 2009), we hypothesized that the price vectors of the maximin solution
exhibited significantly lower disparity than the price vectors of the EF solution. This was supported
by many of the textual comments relating to social disparity. Figure 5 shows the cumulative distribution of disparity across all instances that were included in the user study. The x-axis indicates
the disparity as percentage of the total rent. As shown by the figure, the disparity associated with
the maximin solution is indeed significantly lower. In fact, in many instances, the disparity is zero
under the maximin solution. (For the n = 2 case, Lemma 5.1 shows that the minimum disparity is
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
Which Is the Fairest (Rent Division) of Them All? 39:17
Fig. 5. Cumulative distribution over the social disparity across all instances that were included in the user
study. The x-axis indicates the percentage of social disparity out of the total rent price.
zero for any instance.) We believe that this large difference in disparity played a key role in subjects’ preference for the maximin solution, trumping the relatively small improvement in utilities.
7 DISCUSSION
There are two practical questions that inevitably come up when we present our work on rent
division and its deployed application.
The first question is whether participants can achieve a better outcome by misreporting their
values. Indeed, they can, and the reason we do not address such game-theoretic concerns is
twofold. First, envy freeness is inherently incompatible with strategy-proofness (immunity to
strategic manipulation). This follows from the classic result of Green and Laffont (1979) and the
fact that envy freeness implies Pareto efficiency in our setting. More importantly, we believe that,
in rent division, strategic behavior does not play a significant role in practice. In particular, most
Spliddit users do not know how the algorithm works, as we do not attempt to explain the algorithm
itself, only its fairness guarantees. While users can experiment with Spliddit’s demo mode to determine the impact of various reported values on the outcome, doing this effectively would require
an accurate estimate of the values submitted by others, and seems quite unwieldy in general. That
said, being able to give some game-theoretic guarantees would be desirable, of course.
The second question is whether the quasi-linear utility model truly captures people’s preferences. For example, one participant might believe that it is unfair that he is paying more for a
room he values highly, when his housemate values the two rooms equally (this happens under
the maximin solution in Example 4.3); or some participants may have budget constraints—they
simply cannot pay more than a certain price. Clearly, these are valid concerns. However, there is
a tradeoff between expressiveness and ease of elicitation. We believe that quasi-linear utilities hit
a sweet spot between the two, in the sense that they are reasonably expressive, yet very easy to
elicit (each user simply reports a value for each room). Nevertheless, some of us are studying rent
division algorithms that support richer utility functions.
Taking a broader viewpoint, computational fair division is a prime example of how the interaction between computer science and economics can lead to novel applications. We find it particularly exciting that fundamental theoretical questions in this field have direct real-world implications, both on Spliddit (Caragiannis et al. 2016) and beyond (Budish et al. 2017). The current article
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
39:18 Y. (Kobi) Gal et al.
takes the computational fair division agenda a step further, by tying together theory, experiments
on real data, a carefully designed user study, and a deployed application.
APPENDIX
A PROOF OF THEOREM 5.5
We start by restating, and proving, Lemma 5.4.
Lemma 5.4. IfV ∈ C∗ (ε), then there exist EF price vectors p+ and p− such thatU (p−) ≥ OPT−1
3 − 2
3 ε,
but U (p+) = 0. Moreover, D∗ (V ) ≤ ε, but D+(V ) ≥ 2ε.
Proof. Let V be a three-player rent division instance such that vi1 = xi,vi2 = yi − xi,vi3 = 1 −
yi , where xi ≤ yi ∈ [0, 1] for all i ∈ N. We assume w.l.o.g. that
(1) |xi − xj | ≤ ε for all i, j ∈ [n].
(2) y2 ≥ y1 + 2ε,y3 ≤ y1 − 2ε.
First, we claim that the only optimal room allocation in this case is allocating room i to player
i; the total utility from this allocation is
v11 +v22 +v33 ≥x1 + y1 − x1 + ε + 1 − y1 + 2ε = 1 + 3ε.
Having player 1 swap rooms with either player 2 or 3 results in a utility loss of at least 2ε; having
players 2 or 3 swap rooms results in a utility loss of at least 3ε. Finally, v21 +v32 +v13 ≤ 1 − 2ε and
v31 +v12 +v23 ≤ 1 − ε. Thus, the only optimal room allocation is allocating room i to player i; we
again write OPT = n
i=1 vi i .
Next, we claim that the payoff division (x1,y1 − x1, 1 − y1) is EF. Indeed, player 1’s utility from
every room is 0, so she envies no one. Moreover, player 2 receives a utility of at least 2ε from her
room, a negative utility from room 3, and a utility of at most ε from room 1; this similarly holds
for player 3; thus, D+(V ) ≥ max{v22 −v12,v33 −v13} ≥ ε.
Finally, let us set
p−
1 = v11 +
2
3
ε − OPT − 1
3 ,p−
2 = v22 − ε
3 − OPT − 1
3 ,p3 = v33 − ε
3 − OPT − 1
3 .
We have that u1 (id, p−) = OPT−1
3 − 2
3 ε, and u2 (id, p−) = u3 (id, p−) = OPT−1
3 + ε
3 . In particular,
D(p−) = ε. Moreover:
v12 − p−
2 = y1 − x1 − y2 + x2 +
OPT − 1
3
+
ε
3
≤
OPT − 1
3 − 2
3
ε = v11 − p−
1
v13 − p−
3 = 1 − y1 + y3 − 1 +
OPT − 1
3
+
ε
3
< −5
3
ε +
OPT − 1
3
< v11 − p−
1
v21 − p−
1 ≤ x1 + ε − x1 − 2
3
ε +
OPT − 1
3
≤
OPT − 1
3
+
ε
3 = v22 − p−
2
v23 − p−
3 ≤ 1 − y1 − 2ε − (1 − y1 + 2ε) +
OPT − 1
3
<
OPT − 1
3
< v22 − p−
2
v31 − p−
1 ≤ x1 + ε − x1 − 2
3
ε +
OPT − 1
3
< v33 − p−
3
v32 − p−
2 ≤ y1 − x1 − ε − (y1 − x1 + ε) +
OPT − 1
3
< v33 − p−
3 .
Thus, p− is EF, which concludes the proof.
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.  
Which Is the Fairest (Rent Division) of Them All? 39:19
We are now ready to prove the theorem.
Proof of Theorem 5.5. The proof bounds the probability of drawing an instance in C∗ (ε). We
observe that the probability of V ∈ C∗ (ε) with ε agreement on the first room is equal to having
V ∈ C∗ (ε), and having players agree on rooms 2 or 3. Thus, using the notations of the proof of
Lemma 5.4,
Pr[V ∈ C∗ (ε)] = 3 · Pr[V ∈ C∗ (ε) ∧ ∀i, j : |xi − xj | < ε].
Moreover, given a permutation σ : [3] → [3],
Pr[V ∈ C∗ (ε) ∧ ∀i, j : |xi − xj | < ε ∧ yσ (1) > yσ (2) > yσ (3)]
= Pr[V ∈ C∗ (ε) ∧ ∀i, j : |xi − xj | < ε ∧ y2 > y1 > y3],
and thus,
Pr[V ∈ C∗ (ε)] = 18 Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 > y3], (6)
which is exactly the case discussed in Lemma 5.4.
We next claim that for ε < 0.25 and fixed x1 = a,y1 = b such that b ≥ a + 3ε, if a > ε, then
Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε ∧y1 > y3 + 2ε] = 12ε2 (1 − b − 2ε) (b − a − 2ε) , (7)
and if a ≤ ε, then
Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε ∧y1 > y3 + 2ε]
= 2ε(1 − b − 2ε)(2b − a − 5ε)(ε + 2a). (8)
We establish these equations via simple integration over all values of x2, x3,y2,y3 that satisfy the
conditions, multiplying (for each player in {2, 3}) by the joint density for uniform order statistics,
which is 2. For Equation (7), we get that the probability we wish to estimate is
4
 a+ε
x3=a−ε
 b−2ε
y3=x3

x2:|x2−a |, |x2−x3 |<ε
 1
y2=b+2ε
1.
The condition |x2 − a|, |x2 − x3 | < ε is more easily represented if we split the integral into two
paths:
4
 a
x3=a−ε
 b−2ε
y3=x3
 x3+ε
x2=a−ε
 1
y2=b+2ε
1 + 4
 a+ε
x3=a
 b−2ε
y3=x3
 a+ε
x2=x3−ε
 1
y2=b+2ε
1
= 4(1 − b − 2ε)
 a
x3=a−ε
 b−2ε
y3=x3
 x3+ε
x2=a−ε
1 +
 a+ε
x3=a
 b−2ε
y3=x3
 a+ε
x2=x3−ε
1
	
= 4(1 − b − 2ε)
 a
x3=a−ε
 b−2ε
y3=x3
(x3 − a + 2ε) +
 a+ε
x3=a
 b−2ε
y3=x3
(a − x3 + 2ε)
	
= 4(1 − b − 2ε)
 a+ε
x3=a−ε
 b−2ε
y3=x3
2ε +
 a
x3=a−ε
 b−2ε
y3=x3
(x3 − a) +
 a+ε
x3=a
 b−2ε
y3=x3
(a − x3)
	
= 4(1 − b − 2ε)


4ε2 (b − a − 2ε) − 1
6
ε2 (3b − 3a − 4ε) − 1
6
ε2 (3b − 3a − 8ε)

= 12ε2 (1 − b − 2ε) (b − a − 2ε) .
This establishes Equation (7). For Equation (8), we repeat the computation for the case where
a < ε, splitting the integration on x3 to the ranges x3 ∈ [0, a], x3 ∈ [a,ε], x3 ∈ [ε, a + ε]. It holds
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
39:20 Y. (Kobi) Gal et al.
that
4
 a+ε
x3=0
 b−2ε
y3=x3

x2:|x2−a |, |x2−x3 |<ε
 1
y2=b+2ε
1
= 4
 a
x3=0
 b−2ε
y3=x3
 x3+ε
x2=0
 1
y2=b+2ε
1 +
 ε
x3=a
 b−2ε
y3=x3
 a+ε
x2=0
 1
y2=b+2ε
1
+
 a+ε
x3=ε
 b−2ε
y3=x3
 a+ε
x2=x3−ε
 1
y2=b+2ε
1
	
= 4(1 − b − 2ε)
 a
x3=0
 b−2ε
y3=x3
 x3+ε
x2=0
1 +
 ε
x3=a
 b−2ε
y3=x3
 a+ε
x2=0
1 +
 a+ε
x3=ε
 b−2ε
y3=x3
 a+ε
x2=x3−ε
1
	
= 4(1 − b − 2ε)
 a
x3=0
 b−2ε
y3=x3
(x3 + ε) +
 ε
x3=a
 b−2ε
y3=x3
(a + ε) +
 a+ε
x3=ε
 b−2ε
y3=x3
(a − x3 + 2ε)
	
= 4(1 − b − 2ε)
 a
x3=0
(b − 2ε − x3)(x3 + ε) +
 ε
x3=a
(b − 2ε − x3)(a + ε)
+
 a+ε
x3=ε
(b − 2ε − x3)(a − x3 + 2ε)
	
= 4(1 − b − 2ε)
 a
x3=0
(b − 2ε − x3)x3 + ε
 a
x3=0
(b − 2ε − x3) + (a + ε)
 ε
x3=a
(b − 2ε − x3)
+ (a + 2ε)
 a+ε
x3=ε
(b − 2ε − x3) −
 a+ε
x3=ε
(b − 2ε − x3)x3
	
= 4(1 − b − 2ε)
 1
2
(2b − 11a)ε2 − 5
2
ε3 + (2ab − a2)ε
	
= 4(1 − b − 2ε)
1
2
ε


2bε − 11aε − 5ε2 + 4ab − 2a2

= 2ε(1 − b − 2ε)(2b − a − 5ε)(ε + 2a).
This establishes Equation (8).
Next, we claim that if ε < 0.2, then
Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε ∧y1 > y3 + 2ε] ≥
5063
30
ε6 − 760
3
ε5 +
317
3
ε4 − 52
3
ε3 + ε2
. (9)
Indeed, note that for ε < 0.2, we have ε < 1 − 4ε. Using Equations (7) and (8),
Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε ∧y1 > y3 + 2ε]
= Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε ∧y1 > y3 + 2ε ∧ x1 ≤ ε]
+ Pr[∀i, j : |xi − xj | < ε ∧y2 > y1 + 2ε,y1 > y3 + 2ε ∧ x1 > ε]
≥
 ε
a=0
 1−2ε
b=a+3ε
2 · 2ε(1 − b − 2ε)(2b − a − 5ε)(ε + 2a)
+
 1−4ε
a=ε
 1−2ε
b=a+3ε
2 · 12ε2 (1 − b − 2ε)(b − a − 2ε)
= 5063
30
ε6 − 760
3
ε5 +
317
3
ε4 − 52
3
ε3 + ε2
,
which establishes Equation (9)
Journal of the ACM, Vol. 64, No. 6, Article 39. Publication date: November 2017.
Which Is the Fairest (Rent Division) of Them All? 39:21
Fig. 6. The lower bound on the likelihood of V ∈ C∗ (ε), where ε ∈ [0, 0.2] is plotted on the x-axis.
Finally, in order to obtain the lower bound, we simply combine Equation (9) with Equation (6),
that is, multiply the bound of Equation (9) by 18. It follows that for ε < 0.2,
Pr[V ∈ C∗ (ε)] ≥
15189
5
ε6 − 4560ε5 + 1902ε4 − 312ε3 + 18ε2
.
Figure 6 provides a graphical representation of our lower bound on Pr[V ∈ C∗ (ε)] as a function
of ε. 