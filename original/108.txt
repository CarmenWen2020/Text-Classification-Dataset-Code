Wearables and mobile devices see the world through the lens of half a dozen low-power sensors, such as, barometers,
accelerometers, microphones and proximity detectors. But differences between sensors ranging from sampling rates, discrete
and continuous data or even the data type itself make principled approaches to integrating these streams challenging. How,
for example, is barometric pressure best combined with an audio sample to infer if a user is in a car, plane or bike? Critically
for applications, how successfully sensor devices are able to maximize the information contained across these multi-modal
sensor streams often dictates the fidelity at which they can track user behaviors and context changes. This paper studies the
benefits of adopting deep learning algorithms for interpreting user activity and context as captured by multi-sensor systems.
Specifically, we focus on four variations of deep neural networks that are based either on fully-connected Deep Neural Networks
(DNNs) or Convolutional Neural Networks (CNNs). Two of these architectures follow conventional deep models by performing
feature representation learning from a concatenation of sensor types. This classic approach is contrasted with a promising
deep model variant characterized by modality-specific partitions of the architecture to maximize intra-modality learning. Our
exploration represents the first time these architectures have been evaluated for multimodal deep learning under wearable data –
and for convolutional layers within this architecture, it represents a novel architecture entirely. Experiments show these generic
multimodal neural network models compete well with a rich variety of conventional hand-designed shallow methods (including
feature extraction and classifier construction) and task-specific modeling pipelines, across a wide-range of sensor types and
inference tasks (four different datasets). Although the training and inference overhead of these multimodal deep approaches is
in some cases appreciable, we also demonstrate the feasibility of on-device mobile and wearable execution is not a barrier to
adoption. This study is carefully constructed to focus on multimodal aspects of wearable data modeling for deep learning by
providing a wide range of empirical observations, which we expect to have considerable value in the community. We summarize
our observations into a series of practitioner rules-of-thumb and lessons learned that can guide the usage of multimodal deep
learning for activity and context detection.
Additional Key Words and Phrases: Mobile sensing, sensor fusion, multi-modal, deep neural networks, deep learning, context
detection, activity recognition
1 INTRODUCTION
The popularity of wearables, and mobile sensing devices in general, has given rise to a growing interest in complex
sensing applications (e.g. user activity and context recognition), with such tasks already available on commercial
wearables to track jogging [42], sleep [48] and even posture [45]. Common to these recognition tasks is their
reliance on numerous low-energy small form-factor sensors (e.g., light detector, magnetometer, accelerometer,
barometer, heart-rate). With each sensing modality carrying a unique perspective, combinations of multiple such
sensing streams can boost detection quality and exceed their potential in isolation. Taking this approach, the
Microsoft Band [48] determines when a user is asleep by combining heart rate levels with accelerometer data of
wrist motion, while the MSP [13] distinguishes between walking and climbing stairs, which are relatively similar
in acceleration patterns, with extra information from a barometer.
Majority of current multimodal sensing solutions rely on shallow classifiers, (such as Decision Tree, Random
Forest, SVM) operating on independent features extracted from each sensing modality. These features are used
to perform sensor fusion following two strategies: Feature Concatenation (such as in [9, 28]) that treat features
uniformly irrespective of their sensing modality to produce a single feature vector for classification; and Ensemble
Classifiers (applied in [22, 72]) in which outputs of classifiers operating only on features of one modality are
blended together. However, an important challenge for activity and context classification is to integrate seemingly
incompatible sensor types (consider fusing accelerometer data and camera frames). Because sensing modalities
vastly differ by sampling rate, statistical properties and data types, standard approaches for model training struggle
to merge the information available from these diverse sources. The key here is to not only extract discriminative
features from individual sensors, but also to discover features that jointly use separate sensors streams to capture
information neither has in isolation.
Deep learning [2, 14] presents a promising, much unexplored opportunity to combat this sensors fusion challenge.
In an area of rapid innovation, deep learning algorithms have shown to be remarkably successful in unimodal
applications, such as recognition of words [27], objects [35] and faces [66]. One of its defining characteristics is
the ability to learn dense hierarchical networks that transform relatively raw forms of data into inferences (e.g., an
activity class). These networks merge the roles of features extraction and classification stages present in shallow
modeling methods (e.g. SVMs [5]) and replace the need for hand-engineered, task-specific features with layers
of data representations that act as features, automatically learned directly from data. There is already building
evidence suggesting deep methods could overcome current bottlenecks in learning cross-sensor features for routine
detections. New training methods that leverage variation in information [63], multi-view representations [69],
or modified autoencoders [52, 70] are able to fuse highly heterogeneous pairs of data types, such as text mixed
with images [64] and audio linked with video [52, 60]. The resulting bi-modality deep models offer considerable
accuracy gains in tasks like image captioning [63] and emotion recognition [15, 33, 43] (merging facial expressions
with sound).
This paper presents a case study of adopting deep learning algorithms for multimodal human activity and context
recognition, using sensor data collected with mobile devices. We investigate the sensor fusion approaches taken in
both deep and shallow learning, and ask the following questions: (i) how do the studied techniques fare with existing
practices? (ii) under what circumstances (e.g. modeling task, data types) is it beneficial to apply deep learning? (iii)
how the technique may be deployed? These questions are examined under two approaches to multimodal learning.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:3
The first, Feature Concatenation (FC), is attractive in terms of simplicity as a strategy though it is at risk of missing
crucial intra-modality correlations. The second, a novel alternative that we term Modality-Specific Architecture
(MA) is a deep learning specific technique that places emphasis on learning both intra-modality and cross-modality
relations. Our empirical study spans four datasets representative of a wide range of activity and context recognition
tasks in ubiquitous computing. For each dataset, we evaluate: (i) four deep learning techniques based on FC and
MA, with Deep Neural Networks (DNN) and Convolutional Neural Networks (CNNs) as base classifiers; (ii) two
shallow classifier techniques: Decision Tree, Random Forest; (iii) any available task-specific classifier. Our MA
architectures, trained here on mobile sensing data, are adaptations of the architecture first proposed in [52] for
speech detection integrating video and sound modalities.
Our results show that these deep network architectures exceed current machine learning solutions over a range
of mobile sensing tasks (human activity recognition, gait recognition, sleep stage detection and indoor-outdoor
detection). This consistently better performance demonstrates a general-purpose characteristic of deep neural
network architectures across diverse multimodal detection tasks, even matching that of highly-engineered purposebuilt methods designed for a specific detection task. In addition to comparing accuracies, we also investigate the
computational overhead of these techniques, as well as document the various lessons learnt in evaluating our
training framework. Our findings suggest wearable resource limits (such as energy) are not a barrier to the adoption
of explored deep learning methods.
Key contributions of this research are:
• A systematic study of multimodal deep learning techniques applied to a broad range of activity and context
recognition tasks. Our empirical results demonstrate the ability of feature representational learning to produce
accurate results even across highly heterogeneous sensors under different settings.
• We study the Modality-Specific Architecture, a specific type of split-architecture deep learning never previously
applied to wearable modeling tasks. Within this variety of deep learning, we are also the first to test this
architecture in-conjunction with convolutional layers (relative to feed-forward fully-connected DNN layers).
• Summary of experiences into general rules of thumbs and lessons learnt for future adoption of multimodal deep
learning techniques in mobile sensing research.
• A system resource feasibility study of the overhead imposed by multimodal deep architectures. Experiments
with two mobile processors show that memory, battery and computational footprint of these detection algorithms
are not a barrier to their adoption.
• Development of a framework [18] to support training and evaluation of these models on different multimodal
sensing tasks.
2 SHALLOW LEARNING APPROACHES
Shallow methods are commonly used for multimodal activity and context recognition. The term shallow is used to
contrast with alternate deep learning architecutres [2, 14]. We first summarize the challenges of multimodal fusion,
followed by surveying the two commonly adopted multimodal modeling strategies:
(i) Feature Concatenation
(ii) Ensemble Classifiers
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:4 • V. Radu et al.
2.1 Challenges for Multimodal Sensor Fusion
Different sensing modalities carry information with various perspectives, which often complement each other,
allowing for useful information gain. As such, leveraging a diverse set of sensors on mobile devices when available
can only be beneficial to detection accuracy.
However, building appropriate models for multimodal fusion, i.e. models which fully leverage information contained
within and across each sensor, is not trivial. The difficulty is mainly attributed to intrinsic differences between
sensor data. Coming from different input channels with varying data types and sampling rates, each modality is
characterized by distinctive statistical properties, representation and correlation structures. Typical models treat
multimodal data as heterogeneous, resulting in ambiguous features and requiring special detection pipelines to deal
with this multimodal data.
As a result of these differences, it is difficult to systematically recognize useful cross-modality relationships in
addition to uni-modality ones. For instance, human speech can be perceived through three modalities: a stream
of 2D-structured pixels (video), a time-series real-valued acoustic waveform (audio) and a sparse distribution
of words (text). Cross-modality relationships which exist between low-level features across different modalities
are highly non-linear and thus difficult to find. If we only consider video and audio, correlations are still highly
non-linear and difficult to find from a mix of pixels and waveforms even if attempting by hand [52]. More generally,
multi-modality data present even greater challenges since this difficult and time-consuming process needs to be
performed for each sensor pair.
To illustrate this aspect in the context of multimodal sensing with mobile devices, we consider the following
examples. A generic human activity recognition task utilizing the GPS, accelerometer and audio signals (e.g.
indoor-outdoor detection) presents a range of challenges for modality fusion. Obviously, sampling rates differ
substantially between sensor pairs: GPS signals change on time-scales of a minute, while accelerometer signal
streams at sub-second rates (30Hz). This means that a GPS sample must be correlated to thousands of accelerometer
readings; learning from such an imbalance distribution can easily degenerate typical models. Similarly, considering
the GPS and audio signals, these are again very different. Even high sampling rate pairs like accelerometer and
audio still need heavy filtering and preprocessing to align. Another example where these observations hold the same
is the case of context understanding for indoor localization with smartphones. Typical sensing modalities for this
task include inertial sensors (accelerometer and gyroscope) and WiFi scans, which come at different frequencies
and in completely different formats (uniform data streams vs. uneven blobs of wireless environment observations).
Integrating these sensing modalities is often done through heavy-engineered solutions, such as particle filters for
indoor localization [58], but in most cases these are task-specific and constrained to a predetermined environment.
Several challenges exist in preprocessing sensor signals to comply with the input structure expected by a classifier.
Generally, shallow classifiers operate on small size inputs which take advantage of the already distilled information
presented to them in the form of features, specially hand-engineered for specific tasks – which can be an art on its
own. Selecting the appropriate features may not be always intuitive to system designers even for a single modality;
this difficulty is even more stringent with multimodal data as features have to complement each other across sensing
modalities.
Nevertheless, shallow methods consider features as independent knobs, incapable of learning the key interdependent
relations between sensing modalities, e.g. correlation in lip pose and motions between audio and visual data for
speech recognition [52].
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:5
Modality 1 ….
Hand
selected
features
Single
Feature
Vector
Classification
Model
Inference
Modality n
Modality 1 Feature
Vector Inference
Modality n Feature
Vector Inference
…
Ensemble
Classifier
Inference
(a) Feature Concatenation (b) Ensemble Classifier
Fig. 1. Schematic of common approaches to shallow multimodal learning with (a) Feature Concatenation and (b)
Ensemble Classifier models. For Feature Concatenation hand-selected features are extracted from each sensing
modalities and concatenated into a single features vector as input to a classifier, while the Ensemble Classifier
approach performs detections on each sensing modality independently to combine their estimations as final
inference.
2.2 Strategies in Shallow Multimodal Learning
Existing sensor fusion strategies in multimodal activity recognition models can be categorized into two families,
depending on whether sensor fusion occurs at a feature or at a classifier level. We call these (i) Feature Concatenation
(FC), and (ii) Ensemble Classifiers (EC) respectively, schematically represented in Figure 1.
Feature Concatenation with Shallow Classifiers. With this strategy, hand-selected features from each modality
are combined into a single feature vector presented to a classifier for detection across all features.
Various multimodal sensing systems have adopted this approach using different classifiers for diverse recognition
tasks (SVM [9], AdaBoost [28], GMMs [44]). While some classifier types, such as ensemble learners like Random
Forest [5], may do better than others at teasing out relationships between features the degree to which multimodal
information is maximized is dependent on the quality of these hand-crafted uni- and cross-modal features. Often
feature selection in concert with the extraction of a large number of candidate features for each sensing modality is
attempted to automate this process (a technique adopted in systems like MSP [13]), though still bounded by the
quality of selected features. In practice, Feature Concatenation can easily overlook inter-sensor relationships with
the number of explored feature combinations limited by the curse of dimensionality [5].
Ensemble of Shallow Classifiers. On the other hand, the integration of modalities is done after separate classifiers
operating on each sensor (modality) provide their estimation. These estimations provided by each sensing modality
classifier are fused to yield an overall class estimation. A range of classifier fusion methods exists, including
probability-based Bayesian fusion models and majority voting schemes (more details in [30]).
Like FC, variations of EC are also commonly adopted in multimodal activity models [30, 56, 72]. One key attraction
is that available classifiers for each sensor type (tested and verified with other applications) can be readily adopted
to undertake a new task on same sensing modality. In essence, this facilitates the creation of robust sensor-specific
classifier generic to multiple tasks, while merging their results enables the evidence of each modality type to be
considered before a final inference. However, a fundamental weakness of EC is that because fusion takes place so
late a lot of potential information and cross-sensor relationships are already lost.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:6 • V. Radu et al.
3 DEEP LEARNING TECHNIQUES
In this section, we discuss deep learning models used in multimodal activity and context recognition. We begin
with an overview of existing methods, followed by a technical description of two kinds of multimodal deep learning
models: Feature Concatenation (FC) and Modality-Specific Architecture (MA).
3.1 Overview
Deep learning models have been applied successfully to a growing number of detections with a single modality.
Through their ability to learn feature representations directly from raw data (images, voice, text) rather than relying
on domain-specific features and their hierarchical structure, deep models present a viable solution to overcome the
challenges of multimodal sensing exposed above.
The structure of a generic deep learning architecture is presented in Figure 2. This consists of interconnected units
that are grouped together in layers. Information propagates through layers, each performing transformations on
their input as a function of internal feature representations, globally contributing to the final classification result.
The first layer (input layer) accepts data in raw or lightly processed format, while the final layer (output layer)
provides the class (e.g. categories of activity and context) according to the value of associated unit. Layers in
between input and output layers are called hidden layers, because their values are not monitored, although essential
to propagating information based on their layer parameters. Unit parameterization is automatically determined
during training and depends on the layer type (e.g. whether it is convolutional or feed-forward layers) as well as
training methods, pre-training and fine-tuning [14].
Input
layer
Hidden layers Output
layer
Sensor Data Inference
Fig. 2. Typical Deep Neural Network structure with feed-forward fully-connected layers.
Input Layer Representation. Deep architectures embody feature representational learning, with input layer
taking values from raw sensor data, or lightly processed data.
Raw Data. Raw measurements, e.g. sensor readings, can be used as input directly.
Feature Selection. It is common for deep architectures to have a light preprocessing stage to change the dimensionality of the raw input signal (for example very sparse word vectors) in a process resembling features extraction
in traditional classifiers, although this is a light and generic (valid across many tasks) data transformation process.
3.2 Multimodal Deep Learning
Deep learning architectures hold important properties which are advantageous to multimodal recognition tasks.
As mentioned before, due to their feature representation learning, there is no need for a preprocessing phase to
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:7
extract domain-specific features from input data, this having two important consequences for multimodal data.
First, custom layer representations can be trained to combine both uni-modal and cross-modal data from sensors.
Second, the hierarchy in learned representations means that cross-modal relationships can be learned at both lowand high-levels of abstraction, corresponding to raw data and refined aggregated concepts respectively.
The same strategies for combining information from multimodal inputs as discussed for shallow classifiers can be
applied to deep neural networks, based on the level where fusion is achieved: Feature Concatenation (FC) with
concatenated inputs from multiple sensing modalities, and Modality-Specific Architecture (MA), with sensorspecific branches for each modality before fusion is achieved later in the network. We describe these two in more
details below.
Essential to all machine learning classifiers is the training process. Various approaches to achieve training and
tuning of multimodal architectures exist here, commonly built on the back-propagation algorithm. Back-propagation
offers the flexibility of distributing gradients both on the joint section of the network, but also on the split section
on each modalities branches. Flexibility of the network is not limited just to back-propagation, but also manifested
in flexibility over data availability (or quality). As such, training algorithms specific to deep architectures facilitate
robustness to missing modality inputs, which allows it to generate (or reconstruct) missing input modality from
the available input by using the joint representation of relations between modalities. For example, auto-encoder
algorithms, originally designed for uni-modal deep models to improve noise tolerance, are adapted to provide a type
of tolerance to missing modalities [43, 52, 70]; this in turn, is understood to assist in discovering representations that
are less prominent, but still discriminative, in power. One illustrative example of such an architecture is the image
caption generation network, which can have its image representation layers improved (i.e., increased detection
quality) through a training method that requires the model to generate both reasonable text and images when only
an image is provided (with text related input layers set to a default state).
Many implementations of deep learning architectures with multiple modalities have been proposed in literature
including Restricted Boltzmann Machine (RBM), CNN, DNN [51, 52]. We employ DNNs and CNNs under
both sensor fusion strategies FC and MA, constructing 4 different architectures (FC-DNN, FC-CNN, MA-DNN,
MA-CNN), which are described in the following sections.
3.3 Feature Concatenation Deep Learning
We refer to a commonly used approach in multimodal data integration using a deep classifier with concatenated
modalities input as Feature Concatenation (FC).
In this approach, sensor fusion is performed right at the input layer by concatenating raw sensor streams (or lightly
processed data) of multiple modalities, to achieve a single large input space. Data propagation pipeline inside the
network proceeds as earlier described, performing a set of transformations on the concatenated input (Figure 2).
This simple design allows easier training, since the model is less sensitive to hyper-parameter settings.
An important remark here is that feature representations inside the network have access to the whole space of
sensing modalities (cross-modality information). However, previous work [52, 63] have shown that intra-sensor
correlations (within the same modality) are stronger than inter-sensor ones (across multiple modalities). Since
hidden layers in FC architectures are exposed to cross-modality information, it is harder to specialize them during
training to extract the essential intra-sensor relations, so these get easily neglected. In addition, training an FC deep
model is also problematic for an unbalanced mixture of inputs, as the units inside the network are easily dominated
by those few proven modalities.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:8 • V. Radu et al.
Feed-forward Deep Neural Network (FC-DNN). Feed-forward Deep Neural Networks are comprised of
multiple stacked fully-connected layers, with the information passing from the input layer, starting as concatenated
multimodal data and being transformed sequentially by each layer according to their internal feature representations
and activations. Information flows in one direction through the network, which makes it easy to stack several hidden
layers together. Class estimation is provided by the output layer as described before. In essence, modalities fusion
is achieved at the input level by combining sensor streams into a joint input to propagate through the DNN.
Different activation function and regularization methods also bring their contribution to transformations propagated
between hidden layers.
Convolutional Neural Network (FC-CNN). Similar to FC-DNN, sensing modalities are concatenated into a
single input, which is interpreted with a Convolutional Neural Network in this case.
Convolutional Neural Networks have brought major leaps across many research areas [41]. Two layers are specific
to this construction, Convolution layers and Pooling layers. Convolution layers are characterized by shared weights
and biases as stacks of filters, much smaller in size than the input signal being convolved over. A stack of filters is
trained to recognize different patterns (or features) no matter where these are encountered in the input space by
sliding across the whole input. Although these filters are determined automatically in training, a good initialization
strategy can determine non-overlapping behaviors of filters, each specializing in recognizing different patterns.
Convolution layers are typically followed by a Pooling layer, which reduces the size of the new representation
constructed by filter activations. Pooling and Convolution layers can be stacked to produce more complex features,
progressing in composition throughout the network. A common example comes from computer vision where first
Convolution layers detect simple features like lines, points, colors, followed by other Convolution layers that
activate for shapes, corners, edges and so on until by the end they recognize full body-parts or faces.
Last few layers in a CNN are typically fully-connected layers, as the ones found in DNNs (described in previous
section), taking advantage of strong features generated by the previous layers to determine a class estimation.
3.4 Modality-Specific Architecture in Deep Learning
We refer to this construction comprising of two types of hidden layers – hidden layers related to a specific sensor
type and hidden layers that capture unified concepts across sensor types – as Modality-Specific Architecture (MA).
In this construction, separate architectures are built for each modality to first learn sensor-specific information
before their generated concepts are unified through representations that bridge across all the sensors (i.e., shared
modality representations) later in the network (as illustrated in Figure 3). MA is based on the architecture proposed
in [52], although our formulation and experiments represent the first time this solution has been tested on mobile
sensor data.
Deep Neural Networks (MA-DNNs). Formalizing the earlier high-level description of a multimodal deep
learning architecture: the state (AL+1 i ) of each individual DNN layer: (xL+1 i ) of layer (L + 1) is dependent on the
unit weights connecting the j
th node in layer L to the i
th node in layer L + 1. The output is determined by the
activation function, for example for a logistic activation function this can be formulated as:
AL+1 i = 1
1 + exp(−
j wL+1 ij xL
j ) (1)
As shown in Figure 3, separate architectural branches (Mk ) exist for each sensor type without any intra-branch
connections between layers until later unifying cross sensor layers (Ul) in the larger multimodal architecture.
While Mk layers learn representations tied to a single modality (such as the accelerometer), Ul layers seek to
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017. 
Multimodal Deep Learning for Activity and Context Recognition • 157:9
Modality n
Multi-Modal DNN
Modality 1 Modality 2
…
u
v
1 v
2 v
n
h
2
(1)
h
1
(2)
h
1
(1)
h
n
(2)
h
n
(1)
h
2
(2)
Fig. 3. Modality-specific Deep Neural Networks. The network adopts a split architecture: separate branches exist for
each of n modalities, which are then joint in the unifying cross-sensor layers.
learn representations that fuse information between sensors. Collectively, all layers contribute to the learning
of a joint representation of all sensor modalities; in other words, P (vacc ., vдyro., vдps ,... | Θ) where Θ spans all
model parameters. With respect to the architecture, a key hyper-parameter is the depth (i.e., the number of layers)
of every Mk branch and Ul . This changes the complexity and richness of feature representation learned at each
architectural branch. Some sensors are simple (such as a light indicator) requiring little representational power,
others are complex (such as audio data) and benefit from the rich degree of processing to capture the information
they contain. As a result, it is common for Mk to be of variable depth across different branches. The respective
depth of each also impacts, at least conceptually, the type of semantic information that is being attempted to be
fused between each sensor. Depth is also a factor for Ul in terms of controlling the opportunity for representations
that fuse sensors to be discovered, therefore this is impacted by the richness, and sheer number, of the sensors that
fan in. As is standard practice, such hyper-parameters are decided with cross-validation at training time.
Multimodal DNN Learning Algorithm. Conventional deep model training processes, like back-propagation with
supervised training [14], is well suited for this task, due to the flexibility to split gradients onto each modality branch.
In our earlier work [57], we have explored the unsupervised approach as an initial training step with auto-encoders,
followed by traditional back-propagation to fine-tune the network feature representations in a construction called
Restricted Boltzmann Machines. However, the impact of this extra step on accuracy is not significant enough
overall to be deemed important, but the associated increase in training time is a penalty. For that reason we use the
traditional back-propagation for the experiments presented in the evaluation section.
Performing Inferences. Post training, inferences with a multimodal deep model occur similarly as with regular
DNNs. Sensor data of each type is provided as input to the corresponding architectural branch of the MA classifier.
Each branch of the network performs its internal computations independently, same as described for FC before,
producing feature signatures influenced by their internal feature representations. These are then combined in the
joint part of the network, following a typical forward pass from here.
Convolutional Neural Network (MA-CNN). The multimodal construction using CNNs is analogous to that
of MA-DNN. Each sensing modality has its own dedicated CNN to extract preliminary features over several
layers (operating as described for FC-CNN). These produce intra-sensor features which are combined through
fully-connected layers to identify the target class.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:10 • V. Radu et al.
4 EVALUATION
In this section, we empirically compare different techniques for multimodal learning on wearable devices. We
evaluate the performance of feature representational learning methods, with two feature concatenation (FC) deep
classifiers: FC-DNN and FC-CNN, and two Modality-Specific Architecture (MA) deep classifiers: MA-DNN
and MA-CNN, as detailed in Section 3. These are compared against two commonly adopted shallow methods,
Random Forest (RF) or Decision Tree (DT), or any task-specific purpose-built technique where available. To offer
an overview, our key findings are summaries below:
• Feature representational learning works consistently well across a wide range of activity recognition tasks
(recognition of activity, gait, sleep stage and indoor-outdoor), outperforming shallow classifiers throughout
while avoiding reliance on hand-tuned dedicated features.
• MA-CNN gives the best accuracy in 3 out of 4 datasets studied despite the nature of classification tasks being
very different. Energy consumption measurements indicate this is also sustainable on common wearable devices.
This makes MA-CNN a strong candidate as a default classifier for activity recognition and context detection
with wearables and mobile devices.
• MA deep classifiers outperform FC on all four datasets, achieving accuracies that are on average 5% better. The
difference in accuracies between the MA and FC approaches is most obvious in complex classification tasks,
such as activity recognition, where MA outperform by up to 16%. Nevertheless, both MA and FC based deep
classifiers achieve better accuracies than shallow classifiers.
4.1 Methods
This subsection details the datasets and baselines used for evaluation.
Datasets. We consider four publicly available datasets in order to represent custom setups in a wide range of
activity recognition tasks performed on wearable and mobile devices. Table 1 summarises key features of the data.
STISEN Heterogeneity Activity Recognition Dataset, collected and studied by Stisen et al. [65]. This dataset
contains readings of two motion sensors, Accelerometer and Gyroscope, from 9 users performing 6 activities
(‘Biking’, ‘Sitting’, ‘Standing’, ‘Walking’, ‘Stair Up’, ‘Stair Down’). Great device diversity is captured in the
dataset, each participant collecting data with 8 different smartphones and 4 smartwatches.
GAIT A dataset comprising of data from 460 participants, which forms a diverse sample of the population with
distribution across ages (8 to 78 years old) and genders. Previously studied by Ngo et al. [53] with highly engineered
signal-based solutions. Gait recognition is done on 5 classes: walking on flat surface, walking up slope, walking
down slope, descending stairs and ascending stairs. The data was captured with two inertial sensors (accelerometer
and gyroscope), each sampling in triaxial dimension. Remarkable to this dataset is the large population sample and
diversity as mentioned earlier.
Sleep-Stage (SS) The Sleep-EDF Database [19], part of PhysioNet, contains physiological data (two EEG readers,
one EOG and one EMG) collected from 20 people, annotated with 6 sleep stages (‘Awake’, ‘Stage 1’, ‘Stage 2’,
‘Stage 3’, ‘Stage 4’, ‘REM’). All participants in this dataset suffer from sleep disorders, making it substantially
difficult to find simple patterns across all subjects.
Indoor-Outdoor (IO) This dataset [56] contains smartphone sensor readings (light, proximity, magnetic, microphone, cell, battery thermometer), from two different phones and annotated with ‘indoor’ or ‘outdoor’. This was
collected in 3 different environments (university campus, city center, residential areas), which brings high variations
in the signal patterns as previously highlighted in [56].
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:11
Dataset No. of users No. of classes No. of modalities
STISEN 9 6 2
GAIT 460 5 2
Sleep-Stage 20 5 4
Indoor-Outdoor 2 2 7
Table 1. Summary of datasets used in our evaluation. Each dataset is selected based on its intrinsic complexity, such
as the number of users (GAIT), diversity of sensing devices (STISEN), diversity of participants (SS) and number of
sensing modalities (IO).
Baselines and tools. This section introduces the classifiers used for comparison on the four datasets summarized
before (Table 1). We consider the following popular shallow classification techniques as our benchmark:
• Random Forest (RF): shallow-classifier-based feature concatenation, ensemble of decision tree classifiers;
• Decision Tree (DT): shallow-classifier-based feature concatenation; C4.5 is often used in wearable devices due
to the low resource footprint and effectiveness in types of activities with few degrees of freedom (small feature
space), e.g. walking or running.
For each recognition task, we compare the performance of deep classification techniques (FC-DNN, FC-CNN,
MA-DNN, MA-CNN) with shallow techniques (RF and DT). In the case of the GAIT dataset, we also extend the
comparison to five other purpose-built inference models, previously considered in the literature and established as
best-performing for gait recognition [53].
We compare the performance of these classifiers based on the F1-score, defined as the harmonic mean of precision
and recall, 2×precision×recall
precision+recall . This metric is sensitive to misclassifications, and also robust to unbalanced distributions
of samples across classes.
Methodology. Evaluation of shallow classifiers was performed in line with their original works, such as employing
the same features as described in [65], for activity recognition or by extracting ECDF features (which shows good
performance in our evaluation despite its compression effect). In cases where an earlier analysis is not available
(e.g. for SS), training and testing of traditional classifiers are performed with Weka [23].
Datasets are split into training set and test set following the leave-one-outmethod, permuting which instance is left
aside as test data and averaging across all iterations to get the final performance. It is never trivial to train deep
neural networks optimally, so to speed up the training process, we performed a random search to identify the most
appropriate hyperparameters (including depth and number of nodes) for each task, guided by the best F1-score on
the test set.
Deep neural networks are particularly good at extracting their own internal features representation, performing well
directly on raw data. The only intervention on these datasets was to normalize the sampling rate with a low-high
pass filter, this being common practice when using Android devices due to the irregular sampling rate. Sampling
frequency is chosen in alignment with previous analysis on such datasets. Appropriate time window size is another
task-specific parameter as well as the overlapping between signal segments (experimenting with values between
50% and 70%), which control the amount of useful information provided to the classifier as independent inputs and
increase the number of training samples respectively. We consider these the minimal preprocessing requirements
for training with deep neural networks. To highlight the advantages of just minimal preprocessing of data for
training deep neural networks, we perform other common preprocessing transformations like frequency domain (by
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:12 • V. Radu et al.
transforming the time window signal using the Fast Fourier Transform) and the Empirical Cumulative Distribution
Function (ECDF) features at specific interest points, to compare with.
4.2 Comparison of Multimodal Context Recognition Techniques
Here we present the results achieved by the previously described multimodal techniques on the four context
recognition tasks: activity recognition (Stisen dataset), gait recognition (Gait dataset), sleep stage detection (SS
dataset) and indoor vs. outdoor detection (IO dataset).
Figure 4 shows the average F1-scores of selected classifiers. We interpret these results taking the following views:
Deep vs. Shallow Classifier. Deep learning classifiers outperform shallow classifiers across all four datasets,
generalizing across diverse tasks without the pain of features identification as required when working with traditional
shallow classifiers. When comparing deep solutions against common shallow classifiers (DT, RF), the average
accuracy difference is substantial, 27%. CNN-based architectures dominate in all but one dataset (GAIT), where a
task-specific approach [53] performs slightly better.
Deep: Feature Concatenation vs. Modality-Specific Architecture. Table 2 presents the F1 scores for best
performing MA deep classifiers, FC deep classifiers and shallow classifiers across the four datasets. From this we
see that MA consistently outperforms FC deep architectures in terms of accuracy. This is an indicator that early
representations on each sensing modality help to discriminate between classes right from the first few layers of
the network, in contrast to concatenated modalities inputs which mix data representations too early, thus missing
valuable insights within each sensing modality.
Feature Concatenation: Deep vs. Shallow. Considering both shallow and deep classifiers adopting FC, FC-deep
classifiers on average outperform FC-shallow classifiers, by 24% in many cases.
MA- deep FC- deep Best-performing shallow
STISEN 81.6 70.36 74.5 (RF)
GAIT 89.5 88.6 93.22 (NGO2014)
Sleep-Stage 66.4 65.1 55.04 (RF)
Indoor-Outdoor 82.3 80.1 58.92 (RF)
Table 2. Comparison of MA-deep classifier, FC-deep classifier and the best performing shallow classifier for each
dataset. We highlight the best-performing architecture under each task.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:13
MA-DNN
MA-CNN
FC-DNN
FC-CNN
DT
RF
F1 Score
0 25 50 75 100
(a) STISEN dataset
MA-DNN
MA-CNN
FC-DNN
FC-CNN
DT
RF
NGO2014
NGO2012
SIIRTOLA2012
APIWAT2011
BOF2012
F1 Score
0 25 50 75 100
(b) GAIT dataset
MA-DNN
MA-CNN
FC-DNN
FC-CNN
DT
RF
F1 Score
0 25 50 75 100
(c) Sleep-Stage dataset
MA-DNN
MA-CNN
FC-DNN
FC-CNN
DT
RF
F1 Score
0 25 50 75 100
(d) Indoor-Outdoor dataset
Fig. 4. F1 score achieved by different classifiers, (MA- and FC- neural networks based methods, and shallow or
purpose-built methods) on the four datasets. This evaluation is performed with input samples in time domain for
deep learning classifiers and features extracted specifically for each dataset to use in shallow classifiers. Despite the
effort with shallow classifiers to extract the most relevant features for each domain task (based on previous studies
for each dataset), deep learning classifiers still perform better without such requirements.
4.3 Activity recognition with large device diversity: STISEN dataset
The first experiment is conducted on the Stisen dataset, which features data from only 9 users but with large device
diversity. To obtain reliable user-independent results, we perform training with the leave-one-out policy, so that
data from each subject is used in turn once as test data, while data from all other eight subjects is contained in a
training set. In the preprocessing phase, sample rate of sensor data collected with Android devices is normalized to
50Hz, and segmented in time windows of 2 seconds with overlapping of 50%. This is required to guarantee that
inputs to neural networks are always the same size and capture a constant time window.
Results for this experiment averaging over 9 subjects are presented in Figure 4(a), which shows that MA deep
classifiers achieve the best accuracies, with F1-score of 82%, while FC deep classifier and shallow classifiers both
achieving just about 70%-75%. FC deep classifiers are trained with the same hyper-parameters determined for MA
deep classifiers.
A more in-depth perspective is provided in Figure 5, where the accuracy of each deep classifier is presented per
subject. This shows that MA deep classifiers are able to maintain an accuracy above their FC counterparts. It is clear
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:14 • V. Radu et al. F1 Score
0
25
50
75
100
User A User B User C User D User E User F User G User H User I
MA-DNN MA-CNN FC-DNN FC-CNN
Fig. 5. Per-user comparison of the four deep learning methods MA-DNN, MA-CNN, FC-DNN, and FC-CNN on the
activity recognition task using the Stisen dataset.
that FC deep classifiers perform suboptimally for some users, indicating a bad generalization due to not identifying
relevant intra-modality feature representations, while the MA is uniformly better across all users.
Though deep learning methods achieve better performance than shallow classifiers, the complexity of this dataset has
an impact on the accuracy magnitude, with values below 90%. To improve this, we found that incremental training
with the MA-DNN architecture, where less than 5 minutes of labeled data from the same device (customizing the
model to one individual-device pair) is enough to boost performance by about 18%, well into the desirable region.
Feature representation learning. Deep classifiers taking raw data (time domain) as input are found to produce
better results than shallow classifiers, which must rely on adequate features selection. We consider the following
alternative forms of preprocessing transformations on our input data:
• Fast Fourier Transformation (FFT), input data in frequency domain;
• Empirical Cumulative Distribution Function (ECDF) with chosen sample points.
These transformations are akin to features extraction as their role is to filter the raw data stream into a different,
more compact representation.
In Figure 6 we observe that, when compared to raw data inputs, applying these transformations in the data
preprocessing stage lowers the accuracy of MA deep classifiers (also trained with transformed samples), by almost
5%. This decrease in accuracy of MA classifiers after applying feature extraction (data transformations) suggests
that MA deep classifiers are more capable to perform inferences directly from raw data. Access to raw data allows
these classifiers to extract their own unfiltered representation of strong features in sensor signals. F1 Score
0
25
50
75
100
MA-DNN
Raw data FFT EDCF
Fig. 6. Comparison of accuracies achieved by classifiers without features extraction (no data transformation) and
with features extraction (data transformation with FFT and ECDF) on the STISEN dataset.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:15
4.4 Activity recognition with large number of participants: GAIT dataset
This recognition experiment is performed on the GAIT dataset, which joins data from a very large number of
participants (460), with a broad demographic distribution. We split this dataset into two sections, used for training
and test, following the same distribution as presented in [53].
In this experiment, we compare deep classifiers with purpose-built solutions and shallow classifiers. As before, we
evaluate four deep classifiers: FC-DNN, FC-CNN, MA-DNN and MA-CNN. For benchmarking these, we use the
same shallow classifiers (DT and RF) and additionally some earlier purpose-built solutions engineered for this task
and dataset alone as presented in [53]: NGO2014, NGO2012, SIIRTOLA2012, APIWAT2011, and BOF2012.
Figure 4(b) presents the performance of above mentioned models, showing that both representational learning
methods (FC and MA) and the purpose-built shallow classifier, NGO2014, produce very good results. The highest
accuracy was achieved by NGO2014 at 93.2%, followed by MA-DNN and FC-CNN at 89.7%. It is worth noting
here that this gap in accuracy between the highly-engineered purpose-built detector, NGO2014, and the general
purpose deep classifiers is surprisingly narrow. This indicates that general representational learning methods can
closely match the performance of purpose-built methods, potentially limited only by data surplus and training
effort.
Figure 7 presents a per action class comparison of performance across the best-considered models. It is easy to
observe the consistently good performance of deep classifiers across classes. Further, Figure 8 shows a per user
cumulative distribution of the F1 scores achieved by FC and MA deep classifiers. This distribution shows that even
on a per-user level, MA deep classifiers outperform FC deep classifiers, with above 90% accuracy in more than
50% of the cases. F1 Score
0
25
50
75
100
Level Walk Up-Stairs Down-Stairs Up-Slope Down-Slope
MA-DNN MA-CNN FC-DNN FC-CNN NGO2014 NGO2012 SIIRTOLA2012 APIWAT2011 BOF2012
Fig. 7. Per-action class comparison between the performance of all deep learning classifiers and purpose-built
solutions on the GAIT dataset.
FC-DNN
FC-CNN
MA-DNN
MA-CNN
Average F1 Score
Cumulative Probability
Fig. 8. Cumulative distribution of per-user F1 score of deep classifiers on the GAIT dataset.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:16 • V. Radu et al.
Feature representation learning. Here we compare different preprocessing transformations for this dataset,
similar to those presented for the Stisen dataset. As shown in Figure 9, data transformations significantly lower the
accuracy of all deep classifiers (by 11% on average) compared to inference on raw data. This decrease in accuracy
after applying feature extraction confirms earlier observations made on the Stisen dataset, suggesting that deep
classifiers are capable of performing inference directly on raw data much better than when these are interpreted by
various transformations.
F1 Score
0
25
50
75
100
MA-DNN MA-CNN FC-DNN FC-CNN
Raw data FFT EDCF
Fig. 9. Comparison of accuracies achieved by deep classifiers without feature extraction and with features extraction
(data transformation with FFT and EDCF) on the GAIT dataset.
4.5 Sleep Stage Detection
This experiment considers other sensing modalities, different from the accelerometer and gyroscope available in
the previous two datasets, detecting sleep stage from physiological data signals.
The SS dataset has 4 modalities with a sampling frequency of 100Hz. In the preprocessing stage, the sampling
frequency is down-sampled to 10Hz to reduce the size of input to our neural networks (and thus the computational
costs), while also capturing a large enough time window of 10 seconds for each classification instance. We find that
sleep stages 1 and 3 are highly similar, so we group them as a single class. Features for shallow classifiers were
extracted using the ECDF method presented before.
From the results presented in Figure 4(c), we can see that feature representational learning methods achieve
much better accuracies than shallow methods. On average, we find that deep classifiers enable a 29% accuracy
improvement over shallow methods. When looking at a break down of F1-scores per class (Table 3), we find
that this improvement is mainly attributed to an almost doubling of performance on classes ‘Sleep Stage 4’ and
‘REM’, which shallow classifiers find particularly difficult to detect. MA deep classifiers are slightly more accurate
than FC by about 2%, while shallow classifiers are clearly suboptimal for this task. One possible explanation is
the simplicity of chosen features to train shallow classifiers, though it also highlights the difficulty of identifying
relevant features in new and unexplored detection tasks.
Feature representation learning. Figure 10 presents a comparison between time domain signals input (raw data)
and the same two signal transformations as before, FFT and ECDF provided as input to the four deep classifiers.
While the performance of deep classifiers on the raw data is nearly 70%, operating on signal transformations
reduces the accuracy to about 12% on average.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:17
MA-DNN MA-CNN FC-DNN FC-CNN RF J48 (DT)
Wake 66.13 70.94 65.06 69.28 51.28 39.74
Stage1&3 27.59 30.03 25.07 29.50 33.15 33.63
Stage 2 77.08 80.18 76.19 79.65 70.62 60.43
Stage 4 68.40 79.59 68.40 74.20 44.53 31.28
REM 72.48 75.91 70.86 73.94 47.33 37.09
Weighted average 64.50 68.22 63.19 67.01 55.04 46.59
Table 3. F1 scores for all classifiers in each sleep stage detection on the Sleep-Stage dataset. F1 Score
0
25
50
75
100
MA-DNN MA-CNN FC-DNN FC-CNN
Raw data FFT EDCF
Fig. 10. Comparison of accuracies achieved by classifiers without features extraction and with features extraction
(data transformation FFT and ECDF) on the Sleep-Stage dataset.
4.6 Indoor-Outdoor Detection
The IO dataset has its own unique characteristics which make this an interesting exploration – 7 independent and
different sensing modalities. It is a binary classification task, though highly diverse across the three environments
where data was collected from.
‘Indoor’ and ‘outdoor’ areas are sampled from three environments: Campus, City Centre, Residential area, which
we labeled as ‘env1’, ‘env2’ and ‘env3’ respectively. We perform the training with the leave-one-out (environment)
method, so that each environment takes turn in being the test dataset while the other two assist in training the
classifier. Table 4 presents results of each classifier over the three iterations.
Figure 4(d) again confirms that feature representational learning methods are successful, as they achieve much
better accuracy than shallow methods (by 43% on average). This observation still holds on a per-environment level,
as shown in Table 4. It can be observed that deep classifiers perform consistently better across all environments.
Another observation is that all classifiers perform significantly poorer when tested with ‘env2’, suggesting that
it is the hardest environment to detect; this is also true taking a geographical perspective of the areas where data
was collected from, with the university Campus and the Residential environments being in closer geographical
proximity and farther away from the City Centre. We also see that within shallow classifiers, Random Forest
perform better than Decision Tree by 7%.
Feature representational learning. In Figure 11 and as previously observed, classification on raw data with deep
classifiers achieves the best performance, here about 81%. After preprocessing the input data with previously
mentioned transformations (FFT and ECDF), the accuracy of classifiers drops by about 13% on average.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:18 • V. Radu et al.
Training set Test set MA-DNN MA-CNN FC-DNN FC-CNN DT RF
env2 + env3 env1 87.75 87.87 84.5 87.87 77.05 68.45
env1 + env3 env2 65.44 67.38 57.62 67.38 26.6 38.7
env1 + env2 env3 92.64 92.97 90.19 92.97 60.95 69.63
Table 4. F1 scores for cross-environment evaluation on the Indoor-Outdoor dataset. F1 Score
0
25
50
75
100
MA-DNN MA-CNN FC-DNN FC-CNN
Raw data FFT EDCF
Fig. 11. Comparison of accuracies achieved by deep classifiers without feature extraction and with features extraction
(data transformation with FFT and ECDF) on the Indoor-Outdoor dataset.
5 MOBILE HARDWARE FEASIBILITY
Deep architectures exert significant resource challenges on embedded platforms, mainly due to their high demands
of memory, computations and energy. In the following, we present runtime experiments on two embedded platforms,
namely Snapdragon 400 and Snapdragon 800 SoCs, see Figure 12. Feasibility experiments presented in this section
are focused mainly on system resource-usage of the deep architectures. Deployment experiments are performed
with an efficient hand-tuned implementation of all deep models presented earlier in this work.
5.1 Target Mobile Hardware
Qualcomm Snapdragon 400. While targeting wearable devices, this Qualcomm processor offers similar performance to many smartphones. It is found within a range of smartwatches, such as the LG G Watch R [42] and
includes a quad-core 1.4 GHz CPU and 1 GB of RAM. Additional GPU and DSP processors are also available, but
due to a lack of driver support we are forced to use the CPU only for experiments.
Qualcomm Snapdragon 800. As the second embedded platform we use the Snapdragon 800 SoC and run all the
deployment experiments on this platform and measure energy consumption and overall runtimes. As in the case
with Snapdragon 400, we only use the CPU on Snapdragon 800 to execute the deep models.
5.2 Model Runtime Implementation
To assess the resources demanded by the various multimodal DNNs validated in the prior section, a shared runtime
is implemented that executes the inference stage (only) of each model. This prototype is realized through a mix of
modules from the Torch [67] ported individually to each processor, that is supported by a set of custom C/C++
components implemented by the authors. Although Torch introduces a degree of overhead, as it acts as an interpreter
for the high-level Lua language (in which we encode all models and their parameters), it also offers a number of
low-level, highly optimized mathematical operation APIs, which are useful for deep model executions. That said,
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:19
(a) Snapdragon 400 (b) Snapdragon 800
Fig. 12. The development board for profiled wearable-class hardware; processors and measured energy profiles of
the boards are identical to that of processors found in commercial wearables. For example, the Snapdragon 400
(a) is found within smartwatches, such as the LG G Watch R Smartwatch and (b) Snapdragon 800 is found within
Samsung Galaxy 9005 and Nokia Lumia 1520.
certain native Torch operations are replaced with C/C++ extensions to exploit processor-specific opportunities for
execution speedup, and better memory management. Furthermore, additional components (e.g., FFT library) are
used for any conventional feature extraction as needed by the model specification.
Overall, this implementation can be characterized as adopting best practices understood by those who regularly handoptimize deep learning models – either for scalability, or in this case operation in resource-limited environments.
More obvious examples of incorporated optimizations include keeping of minimal model architectures needed
by the inference stage, and the profiling of the data flow of runtime execution to understand memory and cache
bottlenecks; or even changing the power profile of processor components to improve the trade-off between execution
times and energy use.
5.3 System Resource Usage Experiments
For each of the four activity datasets evaluated in the prior section, we examine runtime resource demands, e.g.,
memory, computation and energy, of all deep models studied in this paper. Performance comparisons are drawn
across all models on two embedded platforms.
The memory requirements of different types of deep model architectures trained on individual data sets are
summarized in Table 5. While storing individual model parameters we use 32-bit precision. The largest model
(33.1 MB) was found to be the FC-DNN, trained on the STISEN dataset and the smallest model (0.2 MB) was the
MA-DNN model trained on the Indoor-Outdoor dataset.
Table 6 and 7 respectively illustrates the average running time (in milli-seconds) and energy consumption (in mJ)
of the deep models observed on the Snapdragon 400 platform. We repeated each inference 1000 times and took
the average time and energy to mitigate the effect of inherent variations in OS executions. Similarly in Table 8
and 9 we present the runtime results as observed on the Snapdragon 800 platform, which is heavily impacted by
the Android scheduling system, resulting in poorer performance than Linux based Snapdragon 400. Despite this,
results indicate that the deep models can be executed efficiently on embedded platforms.
Lastly, in Figure 13, we present a variation of CPU load and memory requirement observed on the Snapdragon
400 platform, while executing a MA-CNN model trained on the Gait dataset. The MA-CNN model begins by
executing two convolutional layers in parallel and keeping the CPU load almost 100%. The convolution layers
require small number of parameters and this keep the overall memory demand low. Once the convolution operations
are completed, the CPU load drops to a lower value as the OS becomes occupied in loading the parameters from
memory, making memory demand rise. Once all the parameters are loaded in the memory the CPU load becomes
rises again to obtain the final inference result.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:20 • V. Radu et al.
Fig. 13. CPU load and memory requirement against time.
STISEN (MB) GAIT (MB) Sleep-Stage (MB) Indoor-Outdoor (MB)
MA-DNN 22.1 12.5 1.9 0.2
MA-CNN 8.4 18.6 3.7 0.4
FC-DNN 33.1 2.1 0.3 0.6
FC-CNN 8.4 6.0 0.3 0.6
Table 5. Trained Model sizes (in MBytes) across all data sets under 32-bit precision.
STISEN (ms) GAIT (ms) Sleep-Stage (ms) Indoor-Outdoor (ms)
MA-DNN 2.8 1.9 1.5 1.7
MA-CNN 9.7 3.3 2.5 0.9
FC-DNN 3.5 2.2 0.8 0.5
FC-CNN 6.5 7.7 1.5 0.7
Table 6. Average model execution time (milli-seconds) observed on Snapdragon 400.
STISEN (mJ) GAIT (mJ) Sleep-Stage (mJ) Indoor-Outdoor (mJ)
MA-DNN 5.4 3.7 2.9 3.3
MA-CNN 18.7 6.4 4.8 1.7
FC-DNN 6.7 4.2 1.5 1.0
FC-CNN 12.5 14.8 2.9 1.3
Table 7. Average energy consumption (milli-Joule) due to individual deep models observed on Snapdragon 400.
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:21
STISEN (ms) GAIT (ms) Sleep-Stage (ms) Indoor-Outdoor (ms)
MA-DNN 38.8 26.3 20.8 23.6
MA-CNN 134.4 45.7 34.7 12.5
FC-DNN 48.5 30.5 11.0 6.9
FC-CNN 90.1 106.7 20.8 9.7
Table 8. Average model execution time (milli-seconds) observed on Snapdragon 800.
STISEN (mJ) GAIT (mJ) Sleep-Stage (mJ) Indoor-Outdoor (mJ)
MA-DNN 63.6 43.2 34.1 38.6
MA-CNN 220.5 75.0 56.8 20.5
FC-DNN 79.6 50.0 18.2 11.4
FC-CNN 90.1 106.7 34.1 15.9
Table 9. Average energy consumption (milli-Joule) due to individual deep models observed on Snapdragon 800.
6 DISCUSSION AND LIMITATIONS
This section discusses the practicality of using deep learning for general ubiquitous computing tasks, observed
from our experience, describing the difficulties encountered and choices made in training deep neural networks;
continuing the discussion with current limitations and the opportunity for future work.
Sensor Signal Preprocessing. From the experiments reported in Section 4, it is clear that operating directly on
raw data (i.e., time domain), instead of preprocessing data with FFT or ECDF is not only more computationally
efficient (avoiding data transformations) but also effective in training a more accurate model. Choosing an optimal
time window size is also important and very specific to the detection task. When activity classes are very similar, a
larger time window can help to capture more information – the obvious downside is that a larger input increases
computation cost for the neural network. We find that it is a good practice to start with small time windows (such
as 30 ms) and gradually expand to capture more information.
The Training Process. A good strategy in training is to start with a small network (such as two layers with a small
number of neurons per layer) and gradually expand the size and complexity of the network driven by observations
on a separate set of instances (validation set).
When calibrating the network, we consider the key factors: bias, variance, training data distribution. High bias
occurs when the model is performing poorly on both training and validation datasets; this is usually addressed by
increasing the size of the model or that of the training set. High variance occurs when the classifier overfits training
data with good performance on training set but poor on validation set, in which case reducing the network size
or introducing regularization (discussed below) can help. In situations where datasets are too small, alternative
solutions have proven successful in eliminating this limitation by adopting Active Learning in Bayesian DNNs [16].
In the following we detail some assumptions and decisions made in this exploration:
Learning Rate. In the traditional stochastic gradient descent, this indicates the weights update strength in backpropagation. Careful selection of its value is important: a large value may never converge, while a value too small
may take infinitely long to converge. A typical value is 1e-3, though no two training sets are the same, so variations
need to be considered to achieve a good convergence. In our exploration, values between 1e-1 and 1e-5 were the
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:22 • V. Radu et al.
most effective. Learning rate also works in pair with momentum which encourages updates when gradients are
consistently in the same direction. Adam algorithm for learning rate policy was determined to be very efficient in
many cases.
Number of epochs. The training process executes forward and backward propagations over the entire dataset in one
epoch. It is typical for networks to converge very slowly on a complex dataset, affected by noise in data or high
similarity in classes. In this situation, a higher number of epochs is required to converge, lengthening the training
time. With too many epochs the network may just produce insignificant updates, which should be detected by an
early stop policy when the network has converged. In our implementation, we restricted the number of epochs to a
maximum of 400 with an adaptive learning rate policy.
Network initialization. The simplest approach to initialize the weights between neurons and biases is with random
small values chosen from a mean zero and one variance distribution. Auto-encoders are another solution in
initializing the network before supervised learning. From unlabelled data instances an auto-encoders can extract
features by reproducing the input to the output on sections of the network. However, in our case datasets are already
labeled and networks have only a small number of layers so the impact of auto-encoders is minimal.
Dropout ratio. The dropout layer is a common method for regularization due to its simplicity and efficiency. This
implies randomly dropping connections between neurons during training to avoid reliance on single paths through
the network (dominant neurons). Its disadvantage comes from extending training time due to more combinations
of network connections needing to be reinforced for the network to learn effectively. Training time is affected by
dropout factor and width of the connecting layers.
Batch Normalization. This is another very efficient solution for regularization. With the presence of a Batch
Normalization layer, weights are normalized again after each update, which allows for a larger value for learning
rate to be used – faster training time.
We make our implementation code available as a training framework dedicated to multimodal sensing data for other
researchers to use in their work [18].
Additional Deep Learning Methods. Advances in deep learning continue to proliferate and produce a growing
range of potential avenues with the potential to improving modeling of wearable and mobile sensor data. It
is important to note that in this investigation we concentrated only on performing inferences on static frames,
discarding their temporal connection with other frames. This can be seen as one shot classification, not requiring to
track sensor signals for a long period of time, ideal for applications requiring occasional sensing. However, other
solutions like Recurrent Neural Networks (RNNs) [20] and Long Short-Term Memory (LSTM) can take advantage
of this time correlation to improve performance even further. We leave this as open opportunity for further research.
7 RELATED WORK
Applications of Multimodal Learning. Multimodal learning has a vast application domain. Applications have
been seen in audio-visual speech recognition [52], image captioning [63], machine translation [34], sentiment
analysis [55] and affect recognition [30]. In the space of ubiquitous computing, example applications include
human activity recognition [1], sleep detection [12] and emotion recognition [36]. Many recognition tasks were
previously only primarily performed with unimodal learning, with the availability of low-energy sensors, many
such tasks are recently explored using multimodal learning. For example, authentication models involve both gaze
and touch recognition [32], or eating recognition might involve motion of head, wrist and audio [47].
Multimodal Sensor Fusion. Conceptually, classification models based on multimodal sensor data have a clear
relationship to techniques of sensor fusion. Within sensor networks, and more broadly in fields such as robotics,
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
Multimodal Deep Learning for Activity and Context Recognition • 157:23
fusion methods routinely leverage different sensor types for purposes like localization [6, 10, 54, 61]. However,
the fusion techniques developed are difficult to directly apply to the design of learning algorithms and the feature
representations they operate on. More direct insights and methods are found in the design of classifiers of related
domains, such as: computer vision, scene understanding [21] and affective computing [30] – as well as numerous
examples of existing models of context and activity recognition. In short: the use of, and benefiting from, the input
of multiple sensor types is nothing new. But understanding how to combine significantly different sensor inputs is
still an open problem. Although multimodal models are routinely seen, the tools we have to construct them (ranging
from ensembles of separate classifiers to co-training or simply collapsing data types into single feature vectors)
each have their shortcomings; and even simple questions (such as, at what stage should data types be merged?)
must still be addressed on a case by case basis (e.g., [62]).
Multimodal Deep Learning. A prime example in the general space of multimodal deep learning is audio-visual
speech recognition [50], where much work has been done using neural networks [52]. A number of neural networks
have been proposed to perform multimodal deep learning, including CNN [51], RBM [52] and RNN [46]. The
choice of neural network often depends on the type of recognition involved, as there is currently no consensus
on which network would work best. For instance, in tasks where sequential data is involved (e.g. image sentence
description [46]), multimodal versions of recurrent neural networks have been frequently proposed to handle these
tasks. While there is work comparing a small number of multimodal learning methods, such as [8] which compares
decision tree classifiers with back propagation neural networks, we note that there has not been a comprehensive
case study comparing a greater number of deep and shallow multimodal learning architectures. Finally, we wish to
highlight an early version of this study was presented in poster form [57] – though the work presented here is of
course a significant extension.
Deep Learning in Ubiquitous Computing. Only recently has the exploration into deep learning methods for
mobile sensing scenarios begun (e.g., [24, 39]). But with the diversity of exploration rapidly expanding [3, 7, 16,
17, 25, 31, 40, 49, 71]. To the best of our knowledge, the work presented here is the first time that the detection
of indoor/outdoor context and transportation mode has been attempted with any form of deep learning, even for
single sensor modalities. There is still much to be understood in how such models should be architected, and which
variety of algorithms will be most effective – our work adds to this knowledge, that is still in a nascent stage.
Closely related models to those we propose in this work are found in [52]. However, we use simpler Restricted
Boltzmann Machines rather than the deep version described in [52] (although, both are still forms of deep learning).
Similarly, [33, 64] concern themselves with multimodal models but focus tightly on learning features. None
of these papers consider mobile sensor data types nor the classification objectives we study here. Furthermore,
few consider a mobile platform as the operating environment of their models. In fact, little multimodal study of
this aspect of our work exists, although broad understanding of resource-limited deep learning is accelerating
[4, 11, 26, 29, 37, 38, 59, 68] and we expect many existing results to extend to multimodal formulations, though
this still remains to be verified.
8 CONCLUSION
In this paper, we perform a systematic study of multimodal deep learning architectures to assess how and when
these new techniques satisfy the exigencies of activity and context inferences with mobile devices. We present
experiments with four distinct variants of deep neural networks across very diverse and difficult context detection
datasets, while comparing their performance with common shallow classifiers and hand-crafted task-specific
detectors. Two of these variants are state-of-the-art in deep learning architectures for performing modalities fusion
used in other scenarios (video, voice, text) – here, referring to as MA-DNN and MA-CNN – and are for the first time
used with wearables and mobile sensing devices for activity recognition and context detection. Experiments that
Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, Vol. 1, No. 4, Article 157. Publication date:
December 2017.
157:24 • V. Radu et al.
span a wide range of sensor types, competing multimodal learning algorithms, and activity and context detection
tasks, collectively show our proposed general-purpose deep approach to multimodal sensor fusion modeling is both
broadly applicable and is able to exceed the performance of previous general solutions and even match task-specific
sensor-tuned solutions. This innovation in sensor data modeling is complemented with a practical proof-of-concept
implementation designed to measure the overhead of these techniques on two state-of-the-art mobile/wearable
processors. Results show that devices that adopt the deep modeling approach, emphasized here, are able to maintain
sustainable norms of size, weight and lifetime despite the increased complexity of deep learning methods.