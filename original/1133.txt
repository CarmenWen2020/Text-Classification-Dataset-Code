A spanner H of a weighted undirected graphG is a “sparse” subgraph that approximately preserves distances
between every pair of vertices in G. We refer to H as a δ-spanner of G for some parameter δ ≥ 1 if the
distance in H between every vertex pair is at most a factor δ bigger than in G. In this case, we say that H has
stretch δ. Two main measures of the sparseness of a spanner are the size (number of edges) and the total
weight (the sum of weights of the edges in the spanner).
It is well-known that for any positive integer k, one can efficiently construct a (2k − 1)-spanner of G with
O(n1+1/k ) edges where n is the number of vertices [2]. This size-stretch tradeoff is conjectured to be optimal
based on a girth conjecture of Erdős [17]. However, the current state of the art for the second measure is not
yet optimal.
Recently Elkin, Neiman and Solomon [ICALP 14] presented an improved analysis of the greedy algorithm,
proving that the greedy algorithm admits (2k − 1) · (1 + ϵ ) stretch and total edge weight of Oϵ ((k/ log k) ·
ω(MST (G)) · n1/k ), where ω(MST (G)) is the weight of a MST of G. The previous analysis by Chandra et al.
[SOCG 92] admitted (2k − 1) · (1 + ϵ ) stretch and total edge weight of Oϵ (kω(MST (G))n1/k ). Hence, Elkin
et al. improved the weight of the spanner by a log k factor.
In this article, we completely remove the k factor from the weight, presenting a spanner with (2k − 1) ·
(1 + ϵ ) stretch, Oϵ (ω(MST (G))n1/k ) total weight, and O(n1+1/k ) edges. Up to a (1 + ϵ ) factor in the stretch
this matches the girth conjecture of Erdős [17].
CCS Concepts: • Mathematics of computing → Graph algorithms; • Theory of computation → Sparsification and spanners;
Additional Key Words and Phrases: Light spanner
1 INTRODUCTION
Graph spanners are fundamental graph structures. Roughly speaking, a graph spanner is a sparse
subgraphH of a given connected, undirected, edge-weighted graphG that approximately preserves
all pairwise distances in G. More formally, we say that H is a spanner with stretch k (or k-spanner
for short) ofG if dist(u,v,H) ≤ k · dist(u,v,G) for every u,v ∈ V (G), where dist(s,t,H
) denotes
the distance between vertices s and t in a graph H
. V (H
) (resp. E(H
)) is the set of all vertices
(resp. edges) in H
. Graph spanners were first introduced in the late ’80s [21, 22], and has been
studied extensively since then.
Spanners are used as a key ingredient in many applications (e.g., synchronizers [22], compact
routing [8, 23, 27], broadcasting [18], and distance oracles [10, 11, 28, 32]).
A well known tradeoff between the stretch and the size (i.e., the number of edges) is as follows:
For any graphG and integer parameter k ≥ 1, there exists a (2k − 1)-spanner withO(n1+1/k ) edges
[2]. Moreover, this tradeoff can be achieved by a simple greedy algorithm, hereafter referred to as
the greedy algorithm. It constructs a spanner S as follows: The edge set of S is initialized to be
empty. Then the edges of G are examined in non-decreasing order of weight. The current edge
(u,v) is added to the partially constructed spanner S iff there is not already a uv-path in S of
weight at most (2k − 1)ω(u,v), where ω(u,v) is the weight of (u,v). This size-stretch tradeoff is
conjectured to be optimal based on the girth conjecture of Erdős [17].
Graph spanners have also been studied with a stronger stretch guarantee, namely additive cstretch; here we seek a spanner in which distances are at most an additive term c longer than in
the original graph. For related work on additive spanners see References [1, 4–6, 9, 13, 15, 24, 25,
29–31].
In this article, we focus on the weight of the spanner; that is, the sum of its edge weights.
Even just for maintaining connectivity, the minimum weight one can hope for is the weight of a
minimum spanning tree (MST). However, the stretch of the MST could be huge. The lightness of
a spanner H is the ratio between the weight of the spanner and the weight of the MST; that is, ω(H )
ω(MST ) , where ω(H
) for a graph H is the sum of the edge weights in H
. The girth conjecture of
Erdős [17] also implies a lower bound of Ω(n1/k ) on the lightness of a spanner with 2k − 1 stretch.
To see this, note that for the unweighted case, the weight of the spanner is just the number of
edges in it.
The lightness is a very natural and important measure, perhaps even more adequate in many
applications than the number of edges. For example, in distributed computing for designing efficient broadcast schemes, our goal is to minimize both the total communication cost (measured by
the sum of the weights) and the delay of the messages with respect to the shortest paths (measured
by the stretch).
In Reference [2], it was shown that the lightness of the greedy spanner is O(n/k). This was later
improved by Reference [7], who showed that for any ϵ > 0, the greedy (2k − 1)(1 + ϵ )-spanner
has Oϵ (n1+1/k )
1 edges and lightness Oϵ (k · n1/k ).
Very recently, Elkin et al. [14] broke this 20-year-old tradeof by providing a novel analysis to the
classic greedy algorithm for stretch t = (2k − 1)(1 + ϵ ). They show that the greedy algorithm in
addition to providing a small number of edges of O(n1+1/k ) and small stretch also gives lightness
Oϵ ( k
log k n1/k ). More precisely, Elkin et al. [14] showed the following:
Theorem 1.1 [14]. Consider a weighted undirected graph G = (V, E), let k > 1 be an integer, let
ϵ > 0, and let H be the greedy spanner of G with stretch t = (2k − 1)(1 + ϵ ). For 1 ≤ i ≤ logk n,
let Ei = {e ∈ E(H) \ E(MST (G)) | ω(e) ∈ (ki−1, ki
] · L/n}, where L ≤ 2ω(MST (G)) is the weight of
a tour defined by a preorder traversal of MST (G). Then for each such i,
ω(Ei ) ≤ O(ω(MST (G)) · (n/ki−1)
1/k /ϵ1+1/k ).
Using Theorem 1.1, Elkinet al. gave an improved analysis of the greedy spanner, showing that
its lightness is Oϵ ((k/ log k)n1/k ). Hence, they provided the first evidence that the natural tradeoff
between stretch (2 + ϵ )k and lightness O(k · n1/k ) is not the right one.
1The Oϵ notation suppresses 1/ϵ factors.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.
Near-Optimal Light Spanners 33:3
In this article, we manage to completely remove the factor of k in the lightness by introducing a
novel construction for light spanners. This is an exponential improvement in the dependency on
k compared to the improvement of Elkin et al. [14]. We present almost tight bounds (assuming the
girth conjecture) of (2k − 1) · (1 + ϵ )-stretch, O(n1/k (1/ϵ )
3+2/k ) lightness and O(n1+1/k ) number
of edges. Our dependency on ϵ in the lightness bound is worse than that of Elkin et al., but as in
previous articles, we regard ϵ as a constant.
Our spanner construction is quite involved. As a follow-up work, Filtser and Solomon [19]
showed that the greedy spanner is existentially optimal. Combining this with our result, it follows that our near-tight bounds also hold for the much simpler greedy spanner construction.
Our proof is based on iterative super-clustering techniques. We start with some small diameter
clusters and combine them into larger and larger clusters. On each such level, we use the clusters
to handle edge weights of different scales (we use the small clusters to handle small edge weights
and the bigger ones to handle larger edge weights). This approach of iterative super-clustering
dates back to Reference [3] in distributed network decomposition. This approach was also used in
the context of spanners [15] for unweighted graphs. In this article, we elaborate on this approach
to accommodate spanners for weighted graphs. We do so by using a potential function that counts
the sum of diameters of certain subgraphs induced by the clusters and show that on each level we
can construct a spanner that handles all edges of a certain weight scale and the cost of the spanner
can be bounded using a decrease in the potential function.
Light spanners were also extensively studied in the context of Euclidean and doubling metrics
(see, e.g., References [12, 16, 20, 26]).
2 PRELIMINARIES
In the following, G = (V, E) denotes an undirected connected graph where each edge e has an
associated weight ω(e) and we let n denote the number |V | of vertices. By scaling edge weights if
necessary, we may assume that the smallest edge weight in G is 1. For simplicity, we consider the
case where all edge weights of an MST M of G are 1.
We claim that we can always reduce to this case by only changing the number of vertices and the
weight of M by a constant. To see this, let ωM be the weight of M and let ω = ωM /(n − 1) be the
average weight of an edge of M. Round up the weight of every edge of G to the nearest multiple of
ω
. Divide every edge e of M into edges of weight ω by adding new degree two vertices to e. Now,
all edges in M have weight ω and the number of vertices ofG is changed by only a constant factor.
Divide all the weights in G by ω
. After finding the spanner, we multiply all edge weights by ω
. It
is easy to see that the lightness only changes by a constant factor as a result of this modification.
Furthermore, we can make sure that the stretch of the edges does not change by more than a
factor of (1 + ϵ ). To guarantee this, we do two things. First we add the MST edges to the spanner
(which only changes the lightness by at most an additive term of 1). Second, we compute a greedy
(2k − 1)(1 + ϵ )-spanner H of the subgraph of G (with original edge weights) consisting of edges
of weight at most ω
/ϵ. By the properties of the greedy spanner, the lightness of the spanner H is
O(n1/k /ϵ1+1/k ) (as the number of edges of spanner is O(n1+1/k ), and each edge has weight at most
ω
/ϵ). We add the edges of H to our final spanner. To see now that the stretch of the edges was
not changed by much, first note that the stretch of the MST edges is 1 as these edges are added
to the spanner. In addition, note that the desired stretch of all edges of weight at most ω
/ϵ is
already guaranteed by H
. Finally, note that for the rest of the edges, rounding up their weight to
the nearest multiple of ω may only increase their weight by a (1 + ϵ ) factor and therefore may
only affect their final stretch by this factor. We conclude this simple reduction in the following
theorem.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.
33:4 S. Chechik and C. Wulff-Nilsen
Theorem 2.1 (Unit-Weight-Reduction). If there exists an algorithm for computing a spanner
with stretch k, lightness O(T (n,m)), and number of edges O(N (n)) for an n-vertices, m-edges graph
with minimum edge weight 1 whose MST contains only edges of weight 1 then there exists an algorithm
for computing a spanner with stretch k, lightness O(T (n,m)), and number of edges O(N (n)) for an
n-vertices, m-edges graph with minimum edge weight 1 whose MST has arbitrary edge weights.
We therefore, hereafter, only consider the case of an MST M with all edge weights equal to 1.
In our construction below, we introduce constants д, c, and d. To simplify the analysis, we will
not calculate them explicitly but only require that d ≥ cд and that they can be chosen sufficiently
large. We will also require that k is bounded from below by a sufficiently big constant and that
ϵ > 1/k; this is w.l.o.g. since otherwise we can use the spanner of Elkin et al. [14].
For a subgraph H = (V, E
) of G and a set of vertices C ⊆ V , the diameter diam(C, E
) of
C in H is the maximum distance between any two vertices u,v ∈ C in H, i.e., diam(C, E
) =
maxu,v ∈C dist(u,v,H).
Let μ = logд (k/ϵ ). We assume that μ is an integer; if not, pick a smaller constant value of ϵ to
ensure this. For a subgraph H of G, a distance r, and a vertex v in H, let B(v,r,H) be the set of
vertices at distance at most r from v in H; that is, B(v,r,H) = {u ∈ V | dist(v,u,H) ≤ r}. Denote
by N (v,H) the set of neighbors of v in H.
For a set of vertices U in G, let G[U ] be the subgraph of G induced by U , i.e., the graph (U, E
),
where E is the set of edges of E with both endpoints in U .
We will show a stretch of (2k − 1)(1 + O(ϵ )) rather than (2k − 1)(1 + ϵ ). This can be easily
tweaked to give (2k − 1)(1 + ϵ ) by setting ϵ  = ϵ/c for large enough constant c and invoking
our construction on ϵ  rather than ϵ.
3 HIGH LEVEL IDEAS OF OUR CONSTRUCTION
In this section, we present the high level ideas of our construction. We first show how to handle
edges of weight at most дk for some constant д, which turns out to be the hard case. In Section 7,
we then show how to iteratively invoke our construction to handle all possible weights.
We start by adding the MST edges to our constructed spanner. We then maintain a hierarchy
of clusters with k levels where a cluster is a subset of vertices of G. We keep the diameter of the
clusters in our constructed spanner on each level roughly the same. More specifically, for level i
the diameter of the clusters is roughly kдi
/2. We also ensure that each cluster on this level contains
Ω(kдi ) vertices.
The construction at level i will ensure good stretch for edges with weights in the range [дi
,дi+1].
We consider the graphKi obtained fromG by contracting clusters at leveli − 1 to vertices and keeping only edges of weights in [дi
,дi+1]. We make Ki simple by removing self-loops and retaining
only the shortest edge between each pair of incident vertices.
If we add all edges of Ki to our spanner then one can show that this ensures a good stretch but
not small lightness. To see the bound on the stretch, we claim that all edges (u,v) of weight in
[дi
,дi+1] already have small stretch. This can be shown roughly as follows: Let Cu be the cluster
at level i − 1 that u belongs to and define Cv similarly for v. As we keep Ki simple, the edge (u,v)
might not be in Ki . However, there is another edge (u
,v
) in Ki of weight in [дi
,дi+1] such that
u ∈ Cu and v ∈ Cv . The spanner then contains a uv-path consisting of a subpath from u to u
,
then the edge (u
,v
), and finally a subpath from v to v. This uv-path is cheap since (u
,v
) is no
more expensive than (u,v) and since diameters of Cu and Cv in the spanner are sufficiently small.
Hence, the spanner provides good stretch for edge (u,v).
The downside of this approach, however, is that adding to the spanner all edges in Ki might not
give us the desired lightness. To deal with this issue, we distinguish between high-degree clusters,
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.
Near-Optimal Light Spanners 33:5
which correspond to vertices of degree at least some constant d in Ki , and low-degree clusters
corresponding to vertices of degree less than d in Ki .
We show that for low-degree clusters, we can do as above, i.e., including all their incident edges
to the spanner while still keeping it light. More precisely, observing that the number of vertices in
each cluster at level i is Ω(kдi ), there are no more than O(n/(kдi )) clusters on level i. Therefore if
we add to the spanner a constant number of edges of weight дi+1 for each low-degree cluster, we
increase the spanner weight byO(n/k) for level i. Since we show that we can restrict our attention
to k levels only, we contribute with a total of O(n) weight to the spanner for these edges.
We are therefore left with handling high-degree clusters. To handle high-degree clusters at level
i − 1, we show that we can cluster many of them into one cluster at level i without violating the
diameter constraints. By considering a potential function that represents the sum of the diameters
of all clusters of each level, clustering many clusters at level i − 1 into a low diameter cluster at
level i gives a large reduction in the potential. This reduction pays for buying a greedy spanner
to obtain good stretch also for edges incident to high degree clusters. However, this by itself does
not yet guarantee a good stretch since the diameter of each cluster is roughly kдi−1. This will give
us O(k2) stretch instead of O(k) stretch since the stretch of the greedy spanner gets multiplied by
the stretch incurred by detours inside these clusters.
To get the desired stretch, instead of considering clusters at level i − 1, we go back O(logд k/ϵ )
levels and consider the clusters there since their diameter is smaller by a factor of Θ(k/ϵ ). Unfortunately, this makes the task of showing lightness more tricky as the reduction in the sum of
diameters of clusters now no longer happens between consecutive level pairs but between pairs
differing by Θ(log k/ϵ ) levels. For the analysis to work, the potential function would then need to
be redefined as the sum of diameters of clusters on Θ(log(k/ϵ )) consecutive levels, which increases
lightness by a factor of Θϵ (log k).
We overcome this obstacle by grouping eachO(log k/ϵ ) levels together and constructing a single
greedy spanner for each such group together. Using the recent analysis of Elkin et al. [14] on the
lightness of the greedy spanner algorithm combined with our potential method, this finally gives
us the desired lightness.
4 CONSTRUCTING CLUSTERS AND THE SPANNER
Our spanner construction has an associated hierarchy of subsets of V , called clusters, and the
hierarchy consists of k + 1 levels. On each leveli for 0 ≤ i ≤ k, the algorithm constructs a collection
Ci of clusters, hereafter referred to as i-clusters. The i-clusters constitute a partition of V and for
i ≥ 1, each i-cluster is the union of some (i − 1)-clusters.
In the first phase of the algorithm, the algorithm iteratively constructs the collection of clusters
Ci for 1 ≤ i ≤ k. In addition, while constructing the set of clusters Ci the algorithm also adds some
edges to our partially constructed light spanner, which we denote by Esp .
In the second phase of the algorithm, using the hierarchy of clusters Ci , certain greedy (2k − 1)
(1 + ϵ )-spanners are constructed and added to Esp to form the final light spanner.
4.1 The First Phase
We now describe the first phase the algorithm, i.e., the construction of the cluster collections Ci .
Initially, construct an MST M of G and add all edges of weight M to the partially constructed
spanner, i.e., Esp ← E(M). The construction is iterative, consisting of iterations i = 0,..., k. In
iteration i, i-clusters are formed and some edges are added to Esp .
0-clusters are constructed as follows: Initially, C0 ← ∅. Unmark all vertices in G. As long as
there is an unmarked vertex v ∈ V , such that all vertices in B(v, k/8, M) are unmarked, let C(v) ←
B(v, k/8, M), add C(v) to C0, and mark all vertices of C(v).
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.
33:6 S. Chechik and C. Wulff-Nilsen
Fig. 1. Heavy i-cluster grown from ϕ ∈ Hi . Black resp. white i-clusters belong to Hi resp. Li .
When there is no such vertex v such that all vertices in B(v, k/8, M) are unmarked do the following. For each such unmarked vertex v pick a marked vertex z such that dist(v, z, M) is minimal
(we break ties arbitrarily). Let C ∈ C0 be the cluster such that z ∈ C and add v to C (and update C
in C0).
Now consider iteration i fori ≥ 1. i-clusters are formed from (i − 1)-clusters as follows: Initialize
Ci ← ∅. Let Ki be the graph obtained fromG by contracting (i − 1)-clusters to vertices and keeping
only edges of weights in [дi
,дi+1]. In general, Ki is a multigraph but we make it simple by removing
self-loops and retaining only the shortest edge between each pair of incident vertices. By abuse of
notation, when referring to a vertex in Ki we also refer to the cluster it represents (e.g., for vertices
φ,φ ∈ V (Ki ), φ ∪ φ is the union of the clusters of φ and φ
).
4.1.1 Heavy Clusters. Let Hi be the set of clusters in Ki of degree at least d (d > 0 is some
constant to be specified later). Initially, all vertices of Ki are unmarked. While there exists an
unmarked vertex φ in Hi such that all its neighbors in Ki are unmarked, mark φ and its neighbors
in Ki and cluster them together. That is, C ← φ ∪
φ∈N (φ,Ki ) φ
. Add the edges {(φ,φ
) ∈ E(Ki ) |
φ ∈ N (φ,Ki )} to Esp , namely, all the edges in Ki incident to φ. Add C to Ci .
Next, for every remaining unmarked vertex φ in Hi , mark φ and add it to some cluster C such
that there exists a vertex φ ∈ Ki added to C in the procedure from the preceding paragraph such
that φ ⊆ C, (φ,φ
) ∈ E(Ki ). That is, pick a marked neighbor vertex φ (a vertex that is already
clustered) and add φ to the same cluster of φ
. Add the edge (φ,φ
) to Esp .
The clusters formed above may be further extended as described below. The final clusters are
called heavy i-clusters; see Figure 1.
4.1.2 Light Clusters. Let Li be the set of remaining unmarked vertices of Ki ; every vertex of Li
has degree less than d in Ki . Add to Esp all edges of Ki incident to a vertex in Li .
Next, we cluster the low degree vertices of Li as follows: Let Ei (M) be the (unit-weight)
edges of MST M between distinct vertex pairs in Li and let Fi be a spanning forest of the
graph (Li, Ei (M)). By abuse of notation, for any subset C of (i − 1)-clusters, let diam(C, Esp ) =
diam(

φ ∈V (C) φ, Esp ).
Initialize all (i − 1)-clusters in Li to be unmarked. As long as there is an unmarked (i − 1)-cluster
φ contained in a component Kφ of Fi such that diam(Kφ, Esp ) ≥ 1
c kдi (for some constant c to be
fixed later on) do the following. Pick such an unmarked cluster φ of Li , mark φ, and set C ← φ.
As long as diam(C, Esp ) < 1
c kдi do the following: If C has an incident edge e = (φ1,φ2) in Ei (M)
where φ1 ∈ C, φ2  C, and φ2 is an unmarked cluster then set C ← C ∪ φ2 and mark φ2. Once
diam(C, Esp ) ≥ 1
c kдi or once no such edges e exist, make C an i-cluster, add it to Ci , and remove
the (i − 1)-clusters contained inC from Fi . The whole procedure is then repeated for the remaining
forest Fi .
The i-clusters formed in this way may be further extended as described below, and we refer to
these final i-clusters as light i-clusters.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.   
Near-Optimal Light Spanners 33:7
Fig. 2. Illustration of set Vr . Large black nodes are heavy while large white nodes are light. Black nodes at
level (r − 1)μ belong to Vr . Nodes A, B, and C belong to Hr in the proof of Lemma 5.5.
When the above procedures have finished, we are left with unmarked low-degree (i − 1)-clusters
that could not be clustered into an i-cluster of diameter at least 1
c kдi
. All other clusters (heavy and
light) are marked.
Let T1 be the set of remaining trees T of Fi such that diam(T, Esp ) < 1
c kдi
. For each tree T ∈ T1,
pick a marked (i − 1)-cluster φ such that there is an edge (u,v) ∈ E(M) with u ∈ φ and v ∈ φ for
φ ∈ V (T ). Let C be the i-cluster such that φ ⊆ C and extend C with the (i − 1)-clusters of T (note
that such an edge always exists as M spans the entire set V ).
Finally, it will prove useful for the analysis to have for each i a lower bound of 1
c kдi on diam(C)
for each i-cluster C. After having found these diameters as described above, we ensure this by
artificially increasing diam(C) to 1
c kдi if it violates this lower bound.
This concludes the description of the first phase of the construction.
4.2 The Second Phase
We now describe the second phase of our algorithm. This phase will ensure that our final spanner
has good stretch between vertex pairs contained in heavy clusters.
Recall that μ = logд (k/ϵ ). First, the k levels are partitioned into groups of μ consecutive levels
and for each such group a spanner is constructed and added to Esp as described in the following.
For the first group of levels corresponding to edges of weight at most k/ϵ, we add to Esp the
greedy spanner on the subgraph of G consisting of these edges.
For every r ∈ [1, k/μ], we add a certain set of edges to our spanner, which we describe in the
following. Let Vr be the vertex set obtained by contracting every (r − 1)μ-cluster that belongs to
a heavy i-cluster with i ∈ [r μ, (r + 1)μ − 1]; see Figure 2.
Let K˜
r be the graph with vertex set Vr and the edges of G having weight at most д(r+1)μ and
crossing between two different clusters corresponding to vertices of Vr . Our algorithm constructs
another graph Sr with vertex set Vr as follows: First, add a light spanning forest to Sr , which we
denote by Mr . More precisely, Mr is an MSF (minimum spanning forest) of K˜
r but where each edge
e of weight ω(e) gets the new weight max{kд(r−1)μ /ϵ,ω(e)}.
Next, for each pair of vertices (u,v) of Vr , add to Sr an edge of G of minimum weight in
[дr μ ,д(r+1)μ ] having one endpoint in u and the other in v (if such an edge exists). Construct the
greedy spanner on Sr with stretch (2k − 1)(1 + ϵ ) and add its edges (with their original weights in
E) to our partially constructed spanner Esp . The point of including Mr in Sr is to ensure that the
cost of the greedy spanner added to Sr is low, as we show in Section 5.1.
This concludes the description of our spanner construction.
5 SHOWING LIGHTNESS
In this section, we prove that our spanner Esp has total weight Oϵ (n1+1/k ).
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.  
33:8 S. Chechik and C. Wulff-Nilsen
In the following analysis, it is more convenient to consider the diameter a cluster C had in Esp
when it was constructed rather than in the end of the algorithm. Denote by diam(C) the diameter
of a cluster C in Esp when C was constructed. Note that the diameter of C may decrease as we add
more edges to Esp so at any point in time afterC is constructed we have diam(C) ≥ diam(C, Esp ).
5.1 Bounding the Weight of the Light Spanning Forest
Lemma 5.5 below bounds the weight of light spanning forest Mr of Sr in terms of diameters of
clusters corresponding to vertices of Sr . This will be important in Section 5.2 where we bound the
total weight of the greedy spanner of Sr for r ∈ [1, k/μ] added to Esp . To prove this lemma, we
need Lemma 5.4 below, which can be used to bound the cost of an MST of the restriction of K˜
r to
a single heavy cluster. To show it, we need some additional lemmas. The first of them bounds the
diameters of clusters from above.
Lemma 5.1. The diameter diam(C) of an i-cluster C is at most kдi
/2 for every 0 ≤ i ≤ k.
Proof. We prove the lemma by induction on the level i ≥ 0. For the base case i = 0, recall that
0-clusters are formed by first constructing a maximal set of vertex-disjoint balls B(v, k/8, M) and
then attaching each remaining vertex v to its nearest ball in M. By maximality of the set of balls,
each such remaining vertex has distance in M less than k/8 to a ball. Hence, for any two vertices
belonging to the same 0-cluster C, the distance between them in M[C] is less than 4k/8 = k/2 so
the diameter of C is less than k/2, as desired.
Now assume the claim holds for levels at most i − 1 and consideri-clusters. In the following, we
recall the algorithm for constructing i-clusters to analyze the diameter of the clusters.
Diameter of Heavy Clusters: Let us first consider the diameter of the clusters after all high-degree
vertices Hi are clustered. The algorithm first pick a vertex φ of degree at least d in Ki such that
all its neighbors in Ki are unmarked. It adds to the cluster C(φ) φ and all its neighbors in Ki , and
adds the edges between φ and its neighbors to Esp . By the induction hypothesis, the diameter of
each (i − 1)-cluster is at most kдi−1/2.
We claim that the diameter of C(φ) at this point is at most 3kдi−1/2 + 2дi+1. To see this, consider two vertices u,v ∈ V both belonging to C(φ) and assume w.l.o.g. that u ∈ φ
, v ∈ φ for
(i − 1)-clusters φ
,φ ⊆ C(φ) \ φ. Recall that edges (φ
,φ), (φ,φ) of weights at most дi+1 were
added to Esp . Therefore there is a simple path in Esp from u to v of the form P (u, z1, Esp ) ◦
(z1, z2) ◦ P (z2, z3, Esp ) ◦ (z3, z4) ◦ P (z4,v, Esp ), where z1 ∈ φ
, z2, z3 ∈ φ, z4 ∈ φ, and the edges
(z1, z2) and (z3, z4) are of weight at most дi+1. By the induction hypothesis the paths in P (u, z1, Esp ),
P (z2, z3, Esp ), and P (z4,v, Esp ) are each of length at most kдi−1/2. It follows that the length of the
entire path is at most 3kдi−1/2 + 2дi+1. Hence, the diameter of C(φ) at this stage of the algorithm
is at most 3kдi−1/2 + 2дi+1.
The algorithm then may add to the cluster C(φ) vertices φ in Ki that are neighbors in Ki to
some vertex φ such that φ ⊆ C(φ). The edges (φ,φ) are added to Esp . It is not hard to verify
that after this stage the diameter of C(φ) is at most 5kдi−1/2 + 4дi+1.
Consider a partially constructed heavy cluster C(φ) that was formed as just described. We now
bound the maximum diameter of C(φ) when it is extended to the final heavy cluster.
The algorithm may extend C(φ) further with clusters V (T ) for trees T in T1, whose diameter in
Esp is less than 1
c kдi and such that T has an edge in M ⊆ Esp to C(φ). The diameter of C(φ) after this extension is at most 5kдi−1/2 + 4дi+1 + 2( 1
c kдi − 1) + 2 = 5kдi−1/2 + 4дi+1 + 2
c kдi
. Hence,
diam(C(φ)) ≤ 5kдi−1/2 + 4дi+1 + 2
c kдi ≤ kдi
/2 for big enough k and constants c and д.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.    
Near-Optimal Light Spanners 33:9
Diameter of Light Clusters: It remains to bound the diameter of light clusters. The algorithm
constructs a light i-cluster C by initializing it to an (i − 1)-cluster φ of Li and then iteratively
extending C with (i − 1)-clusters connected to the partially built C with an edge of MST M. This
process stops when the diameter ofC is at least 1
c kдi
. Let φ be the last (i − 1) cluster added toC. By
the induction hypothesis the diameter of φ is at most kдi−1/2. Thus after adding φ to C, we have
diam(C) < 1
c kдi + kдi−1/2 + 1. In addition, we may add to C trees T in T1 of diameter less than 1
c kдi
. It follows that the final diameter of C in Esp is less than 1
c kдi + kдi−1/2 + 1 + 2( 1
c kдi + 1) = 3
c kдi + kдi−1/2 + 3, which is at most kдi
/2 for sufficiently big constants c and д.
We pick constant d ≥ cд to obtain the next lemma, which follows from Lemma 5.1 and from the
fact that the (i − 1) clusters are of diameter at least дi−1
k/c.
Lemma 5.2. Consider a heavy (i + 1)-clusterC and consider the set C ofi-clusters that are contained
in C; that is, C =
C∈C C
. Then (

C∈C diam(C
)) − diam(C) ≥ |C|дi−1k
2c .
Proof. By Lemma 5.1 and our lower bound on cluster diameters, we have



C∈C
diam(C
)

− diam(C)
≥ |C|дi−1
k
c − дi · k/2
= 1/2 ·
|C|дi−1
k
c + 1/2 ·
|C|дi−1
k
c − дi · k/2.
Since d ≥ cд, 1/2 · |C|дi−1k
c ≥ 1/2 · dдi−1k
c ≥ cддi−1k
2c = дi
k/2 and the lemma follows.
The next lemma follows, since a light i-cluster C is formed by merging (i − 1) clusters with
edges of weight 1 connecting them and since diam(C) is not artificially increased if it does not
contain all vertices of G.
Lemma 5.3. Consider a light (i + 1)-cluster C that does not contain all vertices of G and consider
the set C of i-clusters contained in C. Then diam(C) ≤
C∈C diam(C
) + |C| − 1.
Lemma 5.4. Let C be an i-cluster and let C be the set of j-clusters contained in C for a particular
j < i. Consider the graphG that is obtained by taking the induced graphG[C], contracting all clusters
C and keeping only edges of weight at most дi+1. The weight of an MST of G is O(

C∈C diam(C
)).
Proof. The proof follows by the construction and the way C is formed. Recall that in the construction, an (r + 1)-cluster is formed by merging r-clusters such that this set of r-clusters is connected with a set of edges of weight at most дr+2. More precisely, the cluster C is formed from
clusters C as follows: Starting with r = j, for the clusters at level r, the algorithm adds a set of
edges all of weight at most дr+2 (edges of weight at most дr+2 for heavy clusters and of weight 1
for light clusters). This forms a new set of (r + 1)-clusters and the algorithm adds edges of weight
at most дr+3, forming a new set of (r + 2)-clusters, and so on until the cluster C is formed. Let E
be the set of all these edges for all levels until C is formed. Note that this set E forms a spanning
tree of G
. Thus it suffices to show that the total weight of the edges in E is O(

C∈C diam(C
)).
Let r be given where j ≤ r < i, let Cr be the set of r-clusters contained in C, and let E
r be
the subset of edges of E added when forming (r + 1)-clusters. Assume that |Cr | > 1. We have
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.                 
33:10 S. Chechik and C. Wulff-Nilsen
|E
r | = O(|Cr |) and diam(C
) > 1
c kдr for every C ∈ Cr so the total weight of edges in E
r is
O



e ∈E
r
w(e)



= O



e ∈E
r
дr 


= O



C∈Cr
дr 


= O



C∈Cr
diam(C
)/k


.
Since |Cr | > 1, Lemmas 5.2 and 5.3 together imply that

C∈Cr
diam(C
) ≤


C∈C
diam(C
)

+ |C|
= O


C∈C
diam(C
)

so edges of E
r have total weight O(

C∈C diam(C
)/k). As there are at most k choices for r, the
lemma follows.
We are now ready to bound the weight of Mr .
Lemma 5.5. The forest Mr has weight O(

φ ∈Vr diam(φ)/ϵ ).
Proof. Consider the set of heavy i-clusters over all i ∈ [r μ, (r + 1)μ − 1] and let Hr be the subset of maximal (w.r.t. set inclusion) clusters; see Figure 2. Note that every cluster corresponding to
a vertex of Vr is contained in precisely one cluster of Hr .
Let C ∈ Hr and let C˜ ⊆ Vr be the set of (r − 1)μ-clusters contained in C. Consider the graph
GC that is obtained by taking the induced graph G[C], contracting all clusters C˜ and keeping only
edges of weight at most д(r+1)μ . If i is the level of C then an MST of GC cannot have larger weight
than an MST ofGC restricted to edges of weight at most дi+1; this follows sinceC is an i-cluster and
thusG restricted to edges of weight at most дi+1 contains a tree spanningC. Hence, by Lemma 5.4,
an MST of GC has weight O(

C∈C˜ diam(C
)).
Since this holds for every cluster C in Hr , it follows that one can pick a set of edges E of K˜
r
of total weight O(

C∈Vr diam(C
)) such that every cluster in Hr is contained in a connected
component of (Vr, E
).
Since (Vr, E
) contains at most |Hr | connected components, it is possible to add at most |Hr | − 1
edges of K˜
r to E to form a spanning forest of K˜
r . Since K˜
r contains only edges of weight at most
д(r+1)μ , the total weight of the additional edges added to E is less than д(r+1)μ |Hr |.
Note that the diameter of everyC ∈ Hr satisfies diam(C) ≥ дr μk/c = дr μ (k/ϵ )ϵ/c = дr μдμϵ/c =
ϵд(r+1)μ /c. Hence, д(r+1)μ |Hr | = O(

C ∈Hr diam(C)/ϵ ). Moreover, applying Lemmas 5.2 and 5.3
recursively gives diam(C) = O(

C∈C˜ diam(C
)) for each C ∈ Hr with C˜ defined as above. It follows that an MSF Fr of K˜
r has weight O(

φ ∈Vr diam(φ)/ϵ ).
Recall that Mr consists of the edges e of an MSF Fr of K˜
r but with a weight of max{kд(r−1)μ /
ϵ,ω(e)} instead of ω(e). Let Er be the set of edges of Fr of weight less than kд(r−1)μ /ϵ. To show the
lemma, it is now sufficient to prove that |Er |kд(r−1)μ /ϵ = O(

φ ∈Vr diam(φ)/ϵ ). But this follows
since |Er |≤|Vr | − 1 and diam(φ) ≥ д(r−1)μk/c for each φ ∈ Vr .
5.2 Lightness of Greedy Spanners
We now focus on bounding the total weight of greedy spanners added in the second phase. Recall that the greedy spanner for levels [r μ, (r + 1)μ − 1] is formed on a graph Sr containing a light
spanning tree Mr . With the above results, we can bound the total weight of greedy spanners constructed in the second phase of the algorithm.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.                                
Near-Optimal Light Spanners 33:11
Lemma 5.6. The total weight of spanners from the second phase is O(n1+1/k (1/ϵ )
2+1/k ).
Proof. The weight of the greedy spanner constructed for edges of weight at most k/ϵ is
O((n/ϵ )
1+1/k (1 + log(1/ϵ )/ log k)) by applying Theorem 1.1 O(1 + log(1/ϵ )/ log k) times. Recall
however that we assume ϵ > 1/k. Therefore, log(1/ϵ )/ log k < 1. Hence, O(1 + log(1/ϵ )/ log k) =
O(1) and the weight of the greedy spanner constructed for edges of weight at most k/ϵ is
O((n/ϵ )
1+1/k ).
For each level i, recall that Ci is the set of i-clusters and let Di = (

C ∈Ci diam(C)) + |Ci |. Applying Lemmas 5.2 and 5.3 recursively gives D(r+1)μ = D(r−1)μ − Ω(|Vr |д(r−1)μk).
By Lemma 5.5, the cost of forest Mr is at most O(

φ ∈Vr diam(φ)/ϵ ), which by Lemma 5.1 is
O(|Vr |д(r−1)μk/ϵ ).
Note that the weight of the edges that were added to Sr are in the range [дr μ ,д(r+1)μ ] =
[дr μ , k/ϵ · дr μ ]. Also note that the artifical weights of edges of Sr cannot be smaller than their
actual weights in G. By Theorem 1.1 (and by again the fact that log(1/ϵ )/ log k < 1) we thus
have that the total weight (in G) of the edges added to the spanner in the range [дr μ ,д(r+1)μ ]
is O(n1/k |Vr |(1/ϵ )
2+1/kд(r−1)μk).
Let f (r) = D(r−1)μ − D(r+1)μ . Note that the cost of the greedy spanner constructed for Sr and
also the cost of Mr is O(n1/k (1/ϵ )
2+1/k · f (r)). In addition note that as Di = O(n) for any i, we thus
have
r ∈[1, k/μ ] f (r) = O(n). Hence, the total weight of the edges added to the spanner in the
second phase of the algorithm is
r ∈[1, k/μ ] O(n1/k f (r))(1/ϵ )
2+1/k = O(n1+1/k (1/ϵ )
2+1/k ).
5.3 Lightness of Our Spanner
Above we bounded the total cost of edges added to our spanner in the second phase of the algorithm byO(n1+1/k (1/ϵ )
2+1/k ). As we show, we can get the same bound on the weight of edges from
the first phase, thereby proving lightness as stated in Lemma 5.9 below. To prove it, we need the
following result.
Lemma 5.7. The number of vertices |C| in each i-cluster C is at least diam(C) + 1.
Proof. The proof is by induction on i. Fori = 0, recall that every i-clusterC contains all vertices
in B(v, k/8, M) for some v ∈ V . Also recall that each 0-cluster forms a connected component in
the MST M. In addition, M has only edges of weight 1 all of which are included in the spanner. It
follows that |C| ≥ diam(C) + 1.
Now, assume i > 0 and that the claim holds for every j-cluster for all j < i. Consider first a
heavy i-cluster C. Recall that C contains at least d + 1 (i − 1)-clusters. Our diameter lower bounds
give diam(C
) ≥ 1
c kдi−1 for every (i − 1)-cluster C
. The induction hypothesis then gives |C| ≥
(d + 1) 1
c kдi−1 ≥ kдi
/2 + 1 since d ≥ cд. By Lemma 5.1, diam(C) ≤ kдi
/2 so |C| ≥ diam(C) + 1.
Consider now a light i-cluster C. This cluster was formed by merging a set S = {φ1,...,φp } of
(i − 1)-clusters such that when contracting these (i − 1)-clusters, the edges of MST M between
them form a connected component. The lemma is clear if C contains all vertices of G, so assume
otherwise. Then the diameter of C was not artificially increased, so
diam(C) ≤



φ ∈S
diam(φ)



+ p − 1
=



φ ∈S
(diam(φ) + 1



− 1
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.                 
33:12 S. Chechik and C. Wulff-Nilsen
≤



φ ∈S
|φ|



− 1
= |C| − 1,
as desired.
To show the second part of Lemma 5.9, we also need the following result, which bounds the
total number of edges of the greedy spanners added in the second phase.
Lemma 5.8. The total number of edges of the spanners constructed in the second phase isO(n1+1/k ).
Proof. The number of edges of the greedy spanner constructed for edges of weight at most k/ϵ
is O(n1+1/k ). Recall that an i-cluster is of diameter at least 1
c kдi
. Hence, by Lemma 5.7, the number
of i-clusters is O(n/(kдi )). Therefore, for every r ∈ [1, k/μ], we have |Vr | ≤ O(n/(k · д(r−1)
μ)).
It is not hard to see now that the number of edges added for spanning forest Mr and the greedy
spanner constructed on Sr isO(|Vr |
1+1/k ). Therefore, the total number of edges added in the second
phase is
r ∈[1, k/μ ] O((n/(k · д(r−1)
μ)))1+1/k = O(n1+1/k ).
We can now show lightness of our spanner.
Lemma 5.9. The total weight of our spanner Esp isO(n1+1/k (1/ϵ )
2+1/k ). Moreover, the total number
of edges in Esp is O(n1+1/k ).
Proof. We distinguish between four type of edges that were added to Esp . The first type is the
edges of M. The second type is the edges of Ki (see definition in Section 4.1) incident to a vertex
in Li for 1 ≤ i ≤ k. The third type is edges of Ki interconnecting vertices of Ki belonging to heavy
(i + 1)-clusters. The fourth type is edges of the greedy spanners constructed for every Sr .
The first type is easy to bound and the total edge weight of M is n − 1.
Let us now bound the total weight of edges of the second type over all i. Consider an (i −
1)-cluster C corresponding to a vertex φ of Ki . By Lemma 5.7, |C| ≥ diam(C) + 1 > 1
c kдi
. Since
φ has constant degree in Ki , the total weight of edges of Ki incident to φ is O(дi+1), which is
O(дi+1/(kдi )) = O(д/k) = O(1/k) per vertex of G in C. Since there are only k + 1 levels in total,
spanner edges of the second type cost a total of O(1) per vertex of G, which sums to O(n).
Edges of the third type are handled in a similar manner. If a heavy i-cluster C contains p (i − 1)-
clusters, the number of type three edges in C is O(p). Hence, the average degree of these (i − 1)-
clusters is O(1), implying that the total weight of edges of the third type is O(n).
It follows that the total weight for the first three types of edges is O(n). As the minimum edge
weight in G is 1, we get that the total number of edges of the first three types of edges is also O(n).
Finally, the total weight of type four edges is O(n1+1/k (1/ϵ )
2+1/k ); by Lemma 5.6 and by
Lemma 5.8 the number of edges of the fourth type is O(n1+1/k ).
6 BOUNDING STRETCH
Finally, we bound the stretch of our spanner.
Lemma 6.1. The stretch of Esp is (2k − 1)(1 + O(ϵ )).
Proof. Consider an edge e = (u,v) of E of weight w ∈ [дi
,дi+1] ⊆ [дr μ ,д(r+1)μ ]. We may assume that r > 0 since otherwise, the greedy spanner for edges of weight at most k/ϵ gives the
desired stretch between u and v. We consider two cases: e is incident to a light i-cluster and e has
both endpoints in heavy i-clusters.
For the first case, suppose that, say u, is in a light i-cluster Cu and let Cv be the i-cluster containing v. If Cu = Cv then by Lemma 5.1, Esp has a uv-path of length at most kдi
/2.
ACM Transactions on Algorithms, Vol. 14, No. 3, Article 33. Publication date: June 2018.      
Near-Optimal Light Spanners 33:13
Now assume that Cu  Cv . Then Esp has an edge (u
,v
) of weight at most дi+1 from Cu to
Cv and Lemma 5.1 implies that Esp has a uv-path (with no dummy vertices) of weight at most
diam(Cu ) + w(u
,v
) + diam(Cv ) ≤ kдi + дi+1, which is at most (2k − 1)дi for k bigger than a
suitable constant.
For the second case, assume that both u and v are in heavy i-clusters. Let φu resp. φv be the
vertex of Vr corresponding to the (r − 1)μ-cluster containing u resp. v. By construction the (2k −
1)(1 + ϵ )-spanner of Sr contains a path from φu to φv of weight at most (2k − 1)(1 + ϵ )w
. Every
edge weight of Sr is at least kд(r−1)μ /ϵ whereas the diameters in Esp of clusters corresponding to
vertices of Vr are only at most kд(r−1)μ /2 by Lemma 5.1. Hence we get a uv-path in Esp of weight
at most (2k − 1)(1 + ϵ )(1 + ϵ/2)w + w
ϵ/2 = (2k − 1)(1 + O(ϵ ))w
, as desired.
Moreover, it is not hard to verify that all paths considered in this proof do not contain any
dummy vertex and hence also exist in the final spanner Esp .
7 HANDLING ARBITRARY EDGE WEIGHTS
We have described how to build a light spanner for edges of weight up to L = дk . In this section,
we show how to handle larger weights than this. More precisely, we show how to handle the range
[Lr, Lr+1) for each r ∈ N0.
First, cluster V into Θ(n/(ϵLr )) clusters each inducing a subtree of MST M of diameter at most
ϵLr . Let Vr be the vertex set obtained from V by contracting these clusters to vertices. The intercluster edges of M form a spanning tree Mr of Vr . Let Gr = (Vr, Er ) be the graph consisting of
these edges plus edges e ∈ E with ω(e) ∈ [Lr, Lr+1); we define the weight ωr (e) of an edge e ∈ Er
as ω(e)/Lr if e  M and ωr (e) = 1 otherwise.
Note that Mr has weight |Vr | − 1 = Θ(n/(ϵLr )) in Gr and that all edges of Er have weights in
the range [1, L). Hence, we can apply our spanner construction to Gr , yielding a spanner Sr of Gr
of weight O(ω(Mr )(n/(ϵLr ))1/k (1/ϵ )
2+1/k ) = O((1/ϵ )
3+2/kn1+1/k /(дr Lr )). Let Sr
G be the subgraph
of G with the same edge set as Sr . Since weights in Er \ E(Mr ) are scaled down by a factor of Lr
compared to G and since edges of Mr have weight 1 in G, the edges of Sr
G have a total weight in
G of O((1/ϵ )
3+2/kn1+1/k /дr ). The union S of spanners Sr
G over all r has total edge weight bounded
by ∞
r=0 O((1/ϵ )
3+2/kn1+1/k /дr ) = O((1/ϵ )
3+2/kn1+1/k ).
Next, we bound the total number of edges in all spanners of Gr for every r ≥ 0. For r = 0 we
have by Lemma 5.9 that the number of edges in the spanner is O(n1+1/k ). For r ≥ 1, the number
of edges is the spanner constructed for Gr is |Vr |
1+1/k = O((n/(ϵLr ))1+1/k ).
Summing over all r ≥ 1 the number of edges in all spanners is ∞
r=0 O((n/(ϵLr ))1+1/k }).
Recall our assumption ϵ > 1/k > 1/L. Hence we have a geometric series of value
∞
r=0 O((n/(ϵLr ))1+1/k }) = O(n1+1/k ).
It remains to show that S has stretch (2k − 1)(1 + O(ϵ )) in G. Let e = (u,v) be an edge of E and
choose r ∈ N0 such that ω(e) ∈ [Lr, Lr+1). Let φu be the vertex of Vr corresponding to a cluster
Cu containing u and define φv and Cv similarly for v. Since Sr is a spanner of Gr of stretch (1 +
ϵ )(2k − 1), there is a path from φu to φv in Sr of weight at most (1 + ϵ )(2k − 1)ωr (e). Since each
cluster has diameter at most ϵLr in M and since Lr ≤ ω(e), S has a uv-path of weight at most
(1 + ϵ )(2k − 1)(ω(e) + ϵLr ) + ϵLr ≤ (1 + ϵ )
22kω(e), which is (2k − 1)(1 + O(ϵ ))(2k − 1)ω(e) for k
bigger than a suitable constant.        