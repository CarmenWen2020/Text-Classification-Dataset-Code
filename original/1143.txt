We consider the Traveling Salesman Problem with Neighborhoods (TSPN) in doubling metrics. The goal is
to find the shortest tour that visits each of a given collection of subsets (regions or neighborhoods) in the
underlying metric space.
We give a randomized polynomial-time approximation scheme (PTAS) when the regions are fat weakly
disjoint. This notion of regions was first defined when a QPTAS was given for the problem in SODA 2010
(Chan and Elbassioni 2010). The regions are partitioned into a constant number of groups, where in each
group, regions should have a common upper bound on their diameters and each region designates one point
within it such that these points are far away from one another.
We combine the techniques in the previous work, together with the recent PTAS for TSP (STOC 2012:
Bartal, Gottlieb, and Krauthgamer 2012) to achieve a PTAS for TSPN. However, several nontrivial technical
hurdles need to be overcome for applying the PTAS framework to TSPN:
(1) Heuristic to detect sparse instances. In the STOC 2012 paper, a minimum spanning tree heuristic is used
to estimate the portion of an optimal tour within some ball. However, for TSPN, it is not known if an optimal
tour would use points inside the ball to visit regions that intersect the ball.
(2) Partially cut regions in the recursion. After a sparse ball is identified by the heuristic, the PTAS framework for TSP uses dynamic programming to solve the instance restricted to the sparse ball and recurse on
the remaining instance. However, for TSPN, it is an important issue to decide whether each region partially
intersecting the sparse ball should be solved in the sparse instance or considered in the remaining instance.
Surprisingly, we show that both issues can be resolved by conservatively making the ball in question
responsible for all intersecting regions. In particular, a sophisticated charging argument is needed to bound
the cost of combining tours in the recursion.
Moreover, more refined procedures are used to improve the dependence of the running time on the doubling
dimension k from the previous exp[(O(1))k2
] (even for just TSP) to exp[2O (k log k)
].
Categories and Subject Descriptors: G.2.1 [Discrete Mathematics]: Combinatorics—Combinatorial algorithms; G.2.1 [Discrete Mathematics]: Graph Theory—Graph algorithms
General Terms: Algorithms, Theory
Additional Key Words and Phrases: Approximation scheme, doubling dimension, metric space, traveling
salesman problem with neighborhoods
1 INTRODUCTION
We consider the Traveling Salesman Problem with Neighborhoods (TSPN) in a metric space (V,d).
An instance of the problem is given by a collectionW of n subsets {P1, P2,..., Pn } inV . Each subset
Pj ⊂ V is known as a neighborhood or region. The objective is to find a minimum-length tour that
visits at least one point from each region.
This problem generalizes the well-known Traveling Salesman Problem (TSP), which can be seen
as TSPN with singleton Pis. There are polynomial-time approximation schemes (PTASs) for TSP
in low-dimensional Euclidean metrics (Mitchell 1999; Arora 2007; Rao and Smith 1998; Bartal and
Gottlieb 2013). However, for some time, only a quasi-polynomial-time1 approximation scheme
(QPTAS) was known for doubling metrics (Talwar 2004), where a metric space is said to have
doubling dimension (Assouad 1983; Clarkson 1999; Gupta et al. 2003) at most k if every ball in the
space can be covered by at most 2k balls with half its radius. It was only recently that Bartal et al.
(2016) gave a PTAS for TSP in doubling metrics.
The neighborhood version of the problem (TSPN) was first introduced by Arkin and Hassin
(1994), who gave constant approximation for the case when the regions are in the plane and “well
behaved” (e.g., the regions are disks or parallel segments with similar diameters). The general
version of the problem was shown to have an inapproximability threshold of Ω(log2−c n) for any
c > 0 by Halperin and Krauthgamer (2003). On the other hand, there is an O(log N log k logn)-
approximation algorithm that uses the results of Garg et al. (2000) and Fakcharoenphol et al. (2004),
where N is the total number of points inV and k is the maximum number of points in each region.
TSPN in the Euclidean Plane. As in the case for TSP, the special case when (V,d) is a subset of
the Euclidean plane is considered to achieve better approximation ratios for TSPN. However, even
for connected regions (that may be overlapping), the problem remains APX-hard (de Berg et al.
2005; Safra and Schwartz 2006).
In order for the problem to admit a (1 + ϵ )-approximation algorithm, restrictions are placed on
the regions; examples include diameter similarity, fatness, and disjointness. Intuitively, the fatness
of a region measures the ratio between the smallest circumscribing radius and the largest inscribing
radius. For instance, a disk is fat, while a line segment is not.
Different assumptions on the regions in the Euclidean plane are considered, and the following
approximation ratios are achieved:
—O(logn) ratio, for connected polygonal regions (Mata and Mitchell 1995; Gudmundsson and
Levcopoulos 1999).
—O(1) ratio, for disjoint, fat, and convex regions (de Berg et al. 2005); for fat discrete regions (Elbassioni et al. 2005); and for disjoint connected regions of arbitrary shape (Mitchell
2010).
—(1 + ϵ ) ratio (PTAS), for connected, fat, and disjoint regions of similar size (Dumitrescu and
Mitchell 2003) and for fat and almost disjoint regions (Mitchell 2007).
—(1 + ϵ ) ratio (PTAS), for fat, disjoint, and rectilinear regions of almost the same size
(Bodlaender et al. 2009), where it is also claimed that techniques can be generalized to Rk .
1A nonnegative function f (n) is quasi-polynomial in n if there exists a constant c such that f (n) ≤ exp(O (logc n)).
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:3
In the conference version (Bodlaender et al. 2006), it is claimed that the running time is
nk+1 (logn)
O (
√
k/ϵ )
k−1
, whose dependence on the dimension k is exp[2O (k log k)
], which is
similar to our result.
TSPN in Doubling Metrics. Chan and Elbassioni (2011) considered (1 + ϵ )-approximation
for TSPN in doubling metrics. They combined the notions of diameter variation, fatness, and
disjointness for geometric spaces, and defined for regions in general metrics the notion of fat
weak disjointness (Definition 2.3). Intuitively, the regions are partitioned into a small number Δ of
groups, where regions in each group should have similar diameters and each region designates one
point within it such that these points are far away from one another.2 The regions can otherwise
intersect arbitrarily and need not even be convex or connected, where such notions might be inapplicable in the first place. More motivation and examples for fat weakly disjoint regions are given
in Chan and Elbassioni (2011). The assumption that there is only a bounded number Δ of types of
region diameters is necessary though, as they also showed that otherwise TSPN remains APX-hard
for doubling metrics. Hence, we assume Δ is a parameter that may be viewed as a constant.
Using the hierarchical decomposition and dynamic programming techniques by Arora (2007)
and Talwar (2004), they refers to Chan and Elbassioni (2011) gave a QPTAS for fat weakly disjoint
neighborhoods in doubling metrics. It should be noted that a PTAS was not yet known even for
TSP in doubling metrics then.
In our previous unpublished manuscript (Chan and Jiang 2014), we designed a PTAS for TSPN
based on the techniques in Chan and Elbassioni (2011) and Bartal et al. (2016). For any parameter
0 < c < 1, our construction gives a PTAS with running time n 1
c ·(O (1))k
· exp[( Δ
ϵ )
O (k) · (O(α))2k2
·
o(logc n)]. For the special case Δ = α = 1,c = 1
2 , our bound is comparable to the running time
of n(O (1))k
· exp[( 1
ϵ )
O (k) · (O(1))k2
·

logn] for the PTAS for TSP in Bartal et al. (2016). Observe
that the dependence on the doubling dimension k is exp[(O(1))k2
]. In this article, we reduce the
dependence on k to exp[2O (k log k)
]. Since the dependence on k is doubly exponential, our new
scheme offers a significant improvement on the running time in terms of k, when n  exp[2O (k2 )
].
Main Result. We combine the techniques of the dynamic program for TSPN (Chan and Elbassioni
2011) and the PTAS for TSP (Bartal et al. 2016) to give a PTAS for TSPN with improved running
time.
Theorem 1.1. Fix any 0 < c < 1. There is a PTAS that solves the following variation of TSPN.
Suppose in a metric space with doubling dimension at most k, there are n (finite) regions that are
partitioned into Δ groups, each of which is α-fat weakly disjoint.3 Then, for large enough n (depending
on c and ϵ), with constant probability, the algorithm returns a TSPN tour of length at most (1 + ϵ ) ·
OPT in time n 1
c ·(O (1))k
· exp[Δ2+c · ( kα
ϵ )
O (k) · o(logc n)].
Technical Challenges. Our PTAS for TSPN uses the high-level idea of the PTAS framework for
TSP (Bartal et al. 2016), and in the core utilizes the dynamic program for TSPN in Chan and Elbassioni (2011). However, there are a number of technical hurdles, and we briefly explain why novel
ideas are needed to overcome them.
(1) Heuristic to detect critical instances. In Bartal et al. (2016), a minimum spanning tree (MST)
heuristic is computed on the points in some ball B to estimate the weight of the portion within B
of some nearly optimal tour T . In our previous attempt (Chan and Jiang 2014), we define a similar
MST heuristic on representatives of all regionsW  intersecting B. However, an optimal tour might
2Hence, this notion actually allows “skinny” regions of similar diameters, as long as each region contains some representative such that the representatives are far away from one another.
3Fat weakly disjoint is formally defined in Definition 2.3.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018. 
9:4 T.-H. H. Chan and S. H.-C. Jiang
choose to visit regions W  (that partially intersect with B) using points that are far away from
B, and in this case the MST heuristic is inaccurate, which eventually leads to a factor exp[2O (k2 )
]
in the running time. Instead, we define a new heuristic, which itself is an approximation for the
shortest tour visiting regions with small diameters intersecting B. In Lemma 4.2, we show that the
new heuristic relates to an optimal tour better than the previous MST heuristic.
Moreover, the new heuristic is applied in a bottom-up fashion starting with smaller-scale clusters. Hence, it can be used to detect a lowest height critical instance, in which there must be a large
number of regions with small diameters intersecting the ball in question.
(2) Resolving partially cut regions in a sparse instance in the recursion. In Bartal et al. (2016), loosely
speaking, after a critical instance is identified on a subset S1 of points (by the MST heuristic), the
subinstance on S1 is still sparse enough and can be solved with a dynamic program DP similar
to Arora (2007) and Talwar (2004) in polynomial time to give a partial tour, which is combined
with the tour solved recursively in the remaining instance. However, when regions are involved,
it is an important issue to decide whether regions partially intersecting S1 should be solved in
the sparse instance or considered in the remaining instance. Since throughout the recursion the
dynamic program DP might be called nΩ(1) times, we cannot split cases to assign partially intersected regions in each level of recursion, as even two cases per recursion will lead to a running
time of 2nΩ(1)
. Surprisingly, we can conservatively let the sparse instance handle all regions that
have nonempty intersections with S1. Indeed, a technical patching argument is made in the proof
of Lemma 5.2 to ensure that the recursion can be applied as in Bartal et al. (2016).
In order to improve the final running time, we also use a more careful procedure to remove a
critical instance. When a critical instance at distance scale si is discovered, instead of just picking
a random radius O(si ) to cut out a ball (as in Bartal et al. (2016) and Chan and Jiang (2014)), we
first use the TSPN heuristic T to determine a radius ρ with bounded local growth before applying
randomness to cut around ρ. This idea of exploiting local growth is often applied to problems in
doubling metrics. For instance, in the context of light spanners for doubling metrics (Gottlieb 2015,
Lemma 4.1), a certain radius is chosen similarly using local growth rate.
(3) Bounding the number of ambiguous regions in a sparse DP. In the dynamic program for TSPN
in Chan and Elbassioni (2011), the number H of ambiguous regions each cluster needs to keep
track of is poly-logarithmic in n. However, there is a factor 2O (H ) in the running time, which gives
a quasi-polynomial overhead in Chan and Elbassioni (2011). We improve the analysis (Corollary 6.2
and Lemma 6.3) by using the sparsity of the instance to obtain a better bound on H with respect to
both n and k. Hence, the dynamic programs in Chan and Elbassioni (2011) and Bartal et al. (2016)
can be combined together to give a PTAS with improved running time.
2 PRELIMINARIES
We consider a (finite4) metric space M = (V,d). (For basic properties of metric spaces, we refer
the reader to standard texts (Deza and Laurent 2009; Matoušek 2002).) A ball B(x, ρ) is the set
{y ∈ V | d(x,y) ≤ ρ}. The diameter Diam(Z) of a set Z is the maximum distance between points
in Z. A set Z of points is a ρ-packing, if any two distinct points in Z are at a distance more than
ρ away from each other. Given a positive integer m, we denote [m] := {0, 1, 2,...,m − 1}. In this
article, we work with metric spaces with doubling dimension (Assouad 1983; Gupta et al. 2003) at
most k; this means that for all x ∈ V , and for all ρ > 0, every ball B(x, 2ρ) can be covered by the
union of at most 2k balls of the form B(z, ρ), where z ∈ V . For convenience, we sometimes round
the doubling dimension up to the nearest integer k.
4Remark 2.2 explains why the finiteness of the metric space is not a huge restriction.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:5
Fact 2.1 (Packing in Doubling Metrics (Gupta et al. 2003)). Suppose for some nonnegative
integer t, Z is a ρ-packing contained in some ball of radius 2t ρ in a metric space with doubling
dimension at most k. Then, |Z | ≤ 2(t+1)k .
Problem Definition. An instance of the metric TSP with neighborhoods (TSPN) is given by a
metric space M = (V,d) with doubling dimension at most k and a collection of n neighborhoods
or regions W := {Pj | j ∈ [n]}, where each Pj is a finite subset of V , and V = ∪jPj . (We make a
simplifying assumption that at least one region P0 contains a finite number of points.) The objective
is to find a minimum TSP tour that visits at least one point from each region.
A pair (x,y) of adjacent points in a tour is called a transition. For a graph G whose vertex set
is a subset of V , the weight of each of its edges is derived from the metric space M. Moreover, we
use w(G) to denote the sum of the weights of its edges.
Restricting the Tour inside B0. We make the simplifying assumption that region P0 contains only
a finite number of points because we can try each p0 in P0 and consider those TSPN tours that
pass through p0. Therefore, we are actually running the algorithm in Theorem 1.1 for |P0 | times.
We let R be the minimum radius of a ball centered at p0 that intersects all regions. Suppose OPT
is the length of an optimal tour. Then, it follows that 2R ≤ OPT ≤ 2nR. Hence, an optimal tour
must be contained in the ball B0 := B(p0,nR). Therefore, without loss of generality, we only need
to consider the points in B0.
Remark 2.2 (Bound on the Size of V ). Since we consider a PTAS, we fix ϵ > 0 and consider sufficiently large n such that 1
ϵ < n. Suppose an optimal tour visits pj in each Pj . If we replace each pj
by (possibly another) point p
j ∈ Pj such that d(pj ,p
j) ≤ ϵR
n , then we change the length of the tour
by at most ϵOPT. Hence, we can assume that each region has diameter of either 0 or at least ϵR
n .
We can rescale distances such that the minimum interpoint distance among all points is 1 and the
maximum distance is at most n2
ϵ < n3. By Fact 2.1, we can assume that |V | ≤ nO (k)
. For simplicity,
we often argue that the tour returned by the algorithm has an expected length at most 1 + ϵ times
the optimal length; by using a standard repetition argument, one can show this implies that with
constant probability, approximation ratio 1 + ϵ can be obtained.
As in Chan and Elbassioni (2011), the regions are partitioned into Δ groups {Wl}l ∈[Δ], such that
for some α ≥ 1, each group Wl satisfies some α-fat weak disjointness condition as follows.
Definition 2.3 (α-Fat Weakly Disjoint Regions (Chan and Elbassioni 2011)). For α ≥ 1, a group Wl
of regions are α-fat weakly disjoint if for some ρ > 0 the following conditions hold:
(1) For each region P ∈ Wl , there exists some point z(P) ∈ P such that the set {z(P)}P ∈Wl is a
ρ-packing. We say that P has center z(P) and the regions in Wl have core radius ρ.
(2) Every region P in Wl is contained in the ball B(z(P), αρ).
Lemma 2.4 (Lower Bound on Tour Length: Corollary 3.2 in Chan and Elbassioni
(2011)). Suppose Wl is a group of regions as in Definition 2.3 such that |Wl | > (8α)
k . Then, any tour
that visits all regions in Wl must have length at least 1
2(8α )k

P ∈Wl Diam(P).
Corollary 2.5 (Sum of Truncated Diameters). Suppose T is a tour visiting all regions in W ,
which consists of Δ groups of α-fat weakly disjoint regions. Then, for any real D > 0,
P ∈W min{Diam(P),D} ≤ Δ · (8α)
k · max{2w(T ),D}.
Claim 2.6 (Number of Intersecting Regions with Large Diameters). Suppose 0 < δ < 1 ≤ t
and let B be a ball with radiustsi
. Then, the number of regions with diameter at least δsi that intersect
B is at most Δ · (O( t α
δ ))k .
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.  
9:6 T.-H. H. Chan and S. H.-C. Jiang
Proof. Recall that the regions are partitioned into Δ groups of α-fat weakly disjoint regions.
We give the upper bound for each group. Let D be the maximum diameter of all the regions in
some group that intersect the ball B. We consider the case D ≥ δsi
; otherwise, the upper bound is
trivially 0.
By the definition of α-fat weak disjointness, these regions have centers that form a ρ-packing,
where ρ ≥ D
α . Moreover, these centers lie in a ball with radius at most tsi + D. Hence, by the
packing property (Fact 2.1), the number of regions in this group that intersect B is at most
(O(
α (t si+D)
D ))k ≤ (O( α t
δ ))k .
Remark 2.7 (Assumptions on the Partition {Wl}l ∈[Δ]). As in Chan and Elbassioni (2011), we assume
that the partition {Wl}l ∈[Δ] of regions and the parameter α are given to us such that each group
is guaranteed to be α-fat weakly disjoint. Within each group Wl , our algorithm does not need to
know the core radius or how the centers of the regions are assigned in Definition 2.3.
Observe that in general, regions that are fat and disjoint balls with different diameters may require a large number Δ of groups. However, the assumption for bounded Δ is necessary. Otherwise,
the problem remains APX-hard (Chan and Elbassioni 2011), even if the regions are disjoint balls
in doubling metrics.
We let OPT(S,W ) denote an optimal tour using points in S that visits every region in W ; when
the context is clear, we also use OPT(S,W ) (or just OPT) to denote the length of the tour.
Given ρ > 0, recall that a ρ-net for a set U of points is a subset S ⊆ U such that S is a ρ-packing,
and every point in U is within a distance of ρ from some point in S.
Hierarchical Nets. Fix c > 0. As in Bartal et al. (2016), we consider some parameters = (logn)
c
4k ≥
4 (i.e., n ≥ 22Ω(k)
). Set L := O(logs n) = O( k log n
c log log n ). A greedy algorithm can construct NL−1 ⊆ ··· ⊆
N1 ⊆ N0 ⊆ N−1 ⊆ ... = V such that for each i ∈ [L], Ni is an si
-net for V , where we say distance
scale si is of height i. As in Bartal et al. (2016), we use the randomized decomposition scheme
defined in Bartal (1996) and Abraham et al. (2011).
Definition 2.8 (Single-Scale Decomposition (Abraham et al. 2011)). At height i, an arbitrary ordering πi is imposed on the net Ni . Each net-point u ∈ Ni corresponds to a cluster center and
samples random hu from a truncated exponential distribution Expi having density function
t → χ
χ−1 · ln χ
si · e
− t ln χ
si for t ∈ [0,si
], where χ = O(1)
k . Then, the cluster at u has random radius
ru := si + hu .
The clusters induced by Ni and the random radii form a decomposition Πi , where a point p ∈ V
belongs to the cluster with center u ∈ Ni such that u is the first point in πi to satisfy p ∈ B(u,ru ).
We say that the partition Πi cuts a set P if P is not totally contained within a single cluster.
The results in Abraham et al. (2011) imply that the probability that a set P is cut by Πi is at most
β ·Diam(P )
si , where β = O(k).
Definition 2.9 (Hierarchical Decomposition). Given a configuration of random radii for {Ni}i ∈[L],
decompositions {Πi}i ∈[L] are induced as in Definition 2.8. At the top height L − 1, the whole space
is partitioned by ΠL−1 to form height-(L − 1) clusters. Inductively, each cluster at height i + 1 is
partitioned by Πi to form height-i clusters, until height 0 is reached. Observe that a cluster has
K := O(s)
k child clusters.
Hence, a set P is cut at height i if and only if the set P is cut by some partition Πj such that j ≥ i;
this happens with probability at most
j ≥i
β ·Diam(P )
si = O (k)·Diam(P )
si .
Net-Respecting Tour. As defined in Bartal et al. (2016), a tour T is net-respecting with respect
to {Ni}i ∈[L] and ϵ > 0 if for every transition (x,y) in the tour, both x and y belong to Ni , where
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.  
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:7
si ≤ ϵ · d(x,y) < si+1. Given a subset S ⊆ V and a setW of regions, let OPTnr (S,W ) be an optimal
net-respecting tour using points in S that visits every region in W ; when the context is clear, we
also use OPTnr (S,W ) to denote the length of the tour.
It is shown in Bartal et al. (2016, Lemma 1.11) that net-points can be inserted between every
transition of a tour T to make the tour net-respecting, while increasing the length by only a factor
of 1 + O(ϵ ). Hence, we can assume that the optimal TSPN tour is net-respecting, but observe that
the approximation algorithm need not return a net-respecting tour.
Portals. As in Arora (2007), Talwar (2004), and Bartal et al. (2016), each height-i cluster is
equipped with portals, and a tour is portal-respecting if it enters and exits a cluster only through its
portals. As mentioned in Bartal et al. (2016), the portals of a cluster need not be points of the cluster
itself, but are just used as entry or exit points. For a height-i cluster C, its portals are the subset of
net-points in Ni that cover C, where i is the maximum index such that si
≤ max{1, ϵ
4β L · si}.
A transition (x,y) in a tour can be made portal-respecting in the following way. Suppose height
i is the highest scale that separates the pair (x,y), and px and py are the closest height-i portals in
the clusters containing x and y, respectively. Then, the transition (x,y) is replaced by (1) a portalrespecting tour from x to px found recursively, (2) px to py , and (3) a portal-respecting tour from
py to y found recursively.
Fact 2.10 (Portal-Respecting Tour). Any tour T can be converted to a portal-respecting tour
(that visits all the points in T ) whose expected length is at most 1 + ϵ times that of the original tour,
where the randomness is over the hierarchical decomposition.
Since a height-i cluster has diameter O(si ), by Fact 2.1, the cluster has at most m := (O(
βLs
ϵ ))k
portals.
(m,r)-Light Tour. An (m,r)-light tour is a portal-respecting tour that visits each cluster only
through its m portals and crosses each cluster at most r times; a tour crosses a cluster when it
either enters or exits a cluster.
A dynamic program can be used (Talwar 2004; Chan and Elbassioni 2011) to find the best (m,r)-
light tour whose length is at most (1 + ϵ ) times the optimal with r = O(m), which leads to only a
QPTAS. The idea in Bartal et al. (2016) is to exploit some sparsity conditions to reduce r in order
to obtain a PTAS.
3 ALGORITHM DESCRIPTION
We adopt the PTAS framework for TSP in Bartal et al. (2016) and apply it to TSPN.
Dynamic Programming. We use a subroutine DP(S,W ) on an instance defined by S ⊂ V and a set
of regions W , such that the instance (S,W ) is sparse enough according to the heuristic described
below. The subroutine is described in Section 6 and is a dynamic program that returns a tour in S
visiting all regions W . Recall that k is an upper bound on the doubling dimension.
Sparsity Heuristic. In order to estimate the local sparsity, given a net-point u ∈ Ni at height i and
t > 0, we consider the heuristic T(i)
(u,t), which is some constant approximation (say, with ratio
1.000001) of the length of the shortest net-respecting tour contained within B(u, (t + δ ) · si ) that
visits all regions with diameter at most δ · si that intersect B(u,tsi ), where δ := ϵ
1000k . An easy
observation is that if the heuristic is nonzero, then the ball B(u,tsi ) must intersect at least two
regions with diameter at most δ · si
.
Moreover, observe that we only try to compute T(i) after checking that the heuristic T(j) is small
for all j < i. Hence, as we shall see later, we can use DP to compute T(i)
.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.
9:8 T.-H. H. Chan and S. H.-C. Jiang
Definition 3.1. An instance (V,W ) is q0-sparse with respect to the heuristic T if for all i ∈ [L]
and for all u ∈ Ni , T(i)
(u, 4) is at most q0 · si
. Observe that this can be verified with at most L · |V |
number of heuristic computations.
Algorithm Description. We describe our algorithm ALG. Given a set V of points and a set W of
regions in V , the procedure ALG(V,W ) returns a tour in V visiting all regions in W .
(1) Base Case. If |W | = n is smaller than some constant threshold, solve the problem by brute
force, recalling that |V | ≤ (O( n2
ϵ ))k (see Remark 2.2).
(2) Sparse Instance. Check whether the instance (V,W ) is q0-sparse with respect to the
heuristic T, where q0 := Δ · (O( k2α s
ϵ ))k . (The reason for choosingq0 is given in Lemma 5.2.)
If yes, then call the subroutine DP(V,W ) to return a tour, and terminate.
(3) Identify Critical Instance. Otherwise, let i be the smallest height such that there exists
u ∈ Ni with critical T(i)
(u, 4) > q0 · si
; in this case, choose u ∈ Ni such that T(i)
(u, 4) is
maximized.
(4) Remove Critical Instance. Given (u,i) in the previous step, run the decomposition procedure described below to obtain some ball S1 ⊆ V around u and a (random) partition
W := W1∪·W2.
As we shall see, S1 has radius O(ksi ) and W1 are the regions around u at distance scale
si such that (S1,W1) is sparse enough. Moreover, W1 contains at least two regions.
(5) Recursion. Call the subroutine T1 := DP(S1,W1 + {u}), and solve T2 := ALG(V,W2 + {u})
recursively; combine the tours T1 and T2 at the point u to return a tour.
Since |W1 | ≥ 2, the recursion terminates.
To complete the description of the algorithm and prove that it has the desired properties
(approximation ratio and running time), it suffices to supply the following details:
(1) Define DP to handle a “sparse” instance (V,W ). The details of the dynamic program will
be given in Section 4. In particular, it has the following property:
(P1) Suppose ALG is run with the threshold q0 as defined above. Then, each instance (S,W ) passed to DP runs in polynomial time, and with probability at least 1 − 1
nΘ(k)
returns a tour in S visiting all regions in W whose length is at most (1 + ϵ ) times
OPT(S,W ). The precise expression for the running time is given in Corollary 6.5.
(2) Define decomposition procedure to remove critical instance. Suppose i is the smallest height
such that there exists an u for which T(i)
(u, 4) > q0 · si
, where u ∈ Ni is chosen to maximize the heuristic.
In Section 5, we give the precise description of the decomposition procedure that returns
a (deterministic) ball S1 centered at u with radiusO(ksi ) and a (random) ball B ⊂ S1. Then,
we set W1 := {P ∩ S1 : P ∩ B  ∅, P ∈ W }, and W2 := {P ∈ W : P ∩ B = ∅}; observe that if
q0 > 10, then |W1 | ≥ 2. We shall prove that the decomposition has the following property:
(P2) The above randomized procedure produces a sparse enough instance (S1,W1 + {u})
such that E[OPT(S1,W1 + {u})] ≤ 1
1−ϵ · (OPTnr (V,W ) − E[OPTnr (V,W2 + {u})]), where
expectation is over the random radius of B. The precise sparsity of the instance (S1,W1 +
{u}) is given in Corollary 4.3, and this property is proved formally in Lemma 5.2.
The following lemma shows that the running time of ALG depends on that of DP.
Lemma 3.2 (Bounding the Number of Calls to DP). Given an instance (V,W ), the procedure
ALG makes at most O(|W | · L · |V |) = nO (k) calls to the subroutine DP.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018. 
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:9
Proof. Observe that when the instance (V,W ) is decomposed with W := W1 ∪· W2, we have
|W1 | ≥ 2. Hence, it follows that there are at most |W | recursive calls to the procedure ALG.
Moreover, between successive recursive calls to ALG, the subroutine DP is called in the following
ways:
(1) Check that the current instance is q0-sparse with respect to the heuristic T. Since there are
L levels and at most |V | net-points in each level, there are at most |L|·|V | computations of the
heuristic, each of which can be accomplished with one call of DP.
(2) Solve the sparse enough instance (S1,W1 + {u}). This is achieved by one call of DP.
This completes the proof of the lemma.
Proof of Theorem 1.1. We show how (P1) and (P2) imply our main result.
Analysis of Approximation Ratio. We follow the inductive proof as in Bartal et al. (2016) to show
that with constant probability (where the randomness comes from DP), ALG(V,W ) returns a tour
with expected length at most 1+ϵ
1−ϵ · OPTnr (V,W ), where expectation is over the randomness of
decomposing critical instances in (P2).
Observe that in ALG(V,W ), the subroutine DP is called at most nO (k) times (by Lemma 3.2).
Hence, with constant probability, all the tours returned by all instances of DP have appropriate
lengths in (P1).
Suppose T1 and T2 are the tours returned by DP(S1,W1 + {u}) and ALG(V,W2 + {u}), respectively. By (P1), T1 has length at most (1 + ϵ ) · OPT(S1,W1 + {u}), while the induction hypothesis
states that E[w(T2)] ≤ 1+ϵ
1−ϵ · OPTnr (V,W2 + {u}).
By (P2), E[OPT(S1,W1 + {u})] ≤ 1
1−ϵ · (OPTnr (V,W ) − E[OPTnr (V,W2 + {u})]). Hence, it follows that E[w(T1) + w(T2)] ≤ 1+ϵ
1−ϵ · OPTnr (V,W ) = (1 + O(ϵ )) · OPT(V,W ), achieving the desired
ratio.
Analysis of Running Time. Lemma 3.2 shows that the running time of ALG is determined by that
of DP, which is given precisely in Corollary 6.5.
Therefore, in the rest of the article, we shall prove the properties (P1) and (P2).
4 SPARSE HEURISTIC T GIVES SPARSE OPTIMAL TOUR
In this section, we give formal treatments for (P1) in Section 3. A tour T can be interpreted as a set
of edges with end-points in V ; given B ⊆ V , T |B is the set of edges in T such that both end-points
are in B.
Sparse Tour. A tour T is q-sparse with respect to {Ni}i ∈[L] if for all i ∈ [L] such that si ≤ Diam(T )
s ,
and for all u ∈ Ni , the weight w(T |B(u,3si ) ) of the portion of tour T within the ball B(u, 3si ) is at
most q · si
. This notion is first introduced in Bartal et al. (2016) and we use the previous result
in Bartal et al. (2016, Lemma 3.1) paraphrased as follows.
Lemma 4.1 (q-Sparsity Allows (m,r)-Lightness (Bartal et al. 2016)). Suppose a netrespecting T is q-sparse with respect to {Ni}i ∈[L]. Moreover, for each i ∈ [L], and for each u ∈ Ni ,
point u samples O(log |V |) = O(k logn) independent random radii as in Definition 2.8. Then, with
constant probability, there exists a configuration from the sampled radii that defines a hierarchical
decomposition, under which there exists an (m,r)-light tour T  that visits all the points in T and has
weight w(T 
) ≤ (1 + ϵ ) · w(T ), where m := (O(
sk logs n
ϵ ))k and r := O(1)
k · q logs logn + (O( k
ϵ ))k +
(O( s
ϵ ))k .
We next show that the heuristic T(i)
(u,t) (defined in Section 3) can be used to detect sparse tours
visiting regions, which is analogous to Bartal et al. (2016, Lemma 1.12(i)).
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.  
9:10 T.-H. H. Chan and S. H.-C. Jiang
Lemma 4.2 (Heuristic T Gives Sparse Optimal Tours). Suppose T is an optimal net-respecting
tour, for instance, (S,W ). Then, for any height-i net point u and integer 1 ≤ t = O(k) that is independent of n,
w(T |B(u,t si ) ) ≤ T(i)
(u,t + 1) + Δ · (O( kαts
ϵ ))k · si
.
Proof. We denote B := B(u,tsi ) and B := B(u, (t + 1) · si ). The idea of the proof is to delete
edges in T |B and some other edges from T , and add edges corresponding to the heuristic
T(i)
(u,t + 1) and additional edges to construct another net-respecting tour T  that visits all
regions in W . Then, the optimality of T implies that w(T ) ≤ w(T 
), and this gives an upper bound
on the weight of edges in T |B. Define l to be such that sl ≤ ϵ
2 · si < sl+1; for negative l, we use the
convention that Nl := V .
After we delete edges in T |B, the remaining edges in T form path segments. Suppose x and y
are end-points of such a path segment remaining in T , where x,y ∈ B.
We will add additional edges E to make sure all regions are still visited and to patch end-points
(such as x and y) of path segments to form a connected graph. To make sure the connected graph
contains a Euler tour, we use the well-known idea in Christofides’s algorithm (Christofides 1976)
while further increasing the cost by at most w(E
).
For forming a connected graph later, we first add a minimum spanning tree F on Nl ∩ B(u, (t +
2)si ). This has cost (O( st
ϵ ))k · tsi
.
To ensure all regions are still visited, we add edges in the tour corresponding to the heuristic
T(i)
(u,t + 1), which is a tour within B(u, (t + 1 + δ )si ) that visits all regions with diameter at most
δ · si that intersect B = B(u, (t + 1) · si ), where δ = Θ( ϵ
k ). By Claim 2.6, at most (O( kαt
ϵ ))k regions
from each group with diameter at least δ · si can intersect B
. Hence, edges can be added to makes
sure these regions with large diameters are connected to the nearest net-point in Nl with cost
Δ · (O( kαt
ϵ ))k · si
.
We next describe how to patch end-points x and y of a remaining path segment Q in T . Observe
that x and y are in B, and the next point after x on Q escapes B.
—Suppose the whole segment Q lies in B
. Then, all regions that Q might visit have already
been taken care of. Hence, the segment Q can be removed, and no patching is needed.
—Suppose, traversing along Q starting from x, the first node encountered that is outside B
is x , and the previous point x  is still inside B
. We shall remove edges from x to x  and
connect x  to the nearest net-point in Nl . We shall do a charging argument such that this
step does not incur any net extra cost. For the case d(x, x 
) ≤ ϵ
2 · si
, we have d(x 
, x ) ≥ si
2 ,
and hence, x  is already in Nl , because T is net-respecting. On the other hand, for the case
d(x, x 
) > ϵ
2 · si
, the edges removed from x to x  can be used to pay for the cost of the edge
connecting x  to the net-point in Nl .
The same procedure is applied to the other end-point y.
Observe that edges for the tour T(i)
(u,t + 1) are already net-respecting. Other edges can be made
net-respecting by incurring a small multiplicative factor 1 + O(ϵ ).
Hence, we have w(T |B ) ≤ T(i)
(u,t + 1) + Δ · (O( kαts
ϵ ))k · si
.
As we shall see later, we consider the heuristic with t = 3, and set q0 := Δ · (O( k2α s
ϵ ))k .
We have the following corollary.
Corollary 4.3. If ALG in Section 3 is running with threshold q0 := Δ · (O( k2α s
ϵ ))k to determine
critical instances, then all instances passed to DP will have q-sparse net-respecting optimal tours,
where q := 2q0.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018. 
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:11
Proof. For computation of the heuristic T, observe that T (i)
(·) will be computed only if for all
x ∈ Ni−1, T (i−1)
(x, 4) ≤ q0 · si−1.
Moreover, we shall see in Section 5 that when a critical pair (u,i) is found, then some ball of
radius at most O(k)si around u will be used to form a subinstance (S1,W1).
Hence, in both cases, for every j < i, T (j)
(·) ≤ q0 · sj
; observe that in the dynamic program, we
do not need to form clusters at the scale si
. Therefore, Lemma 4.2 gives the required upper bound
on the sparsity.
Lemma 4.1 and Corollary 4.3 ensure the existence of an (m,r)-light TSPN tour that is (1 + ϵ )-
optimal. We describe a dynamic program to compute such a tour in Section 6, which also includes
the analysis of running time.
5 IDENTIFYING AND REMOVING CRITICAL INSTANCES
As mentioned in the description of ALG(V,W ) defined in Section 3, we need to describe exactly
how a critical instance is removed.
Removing Critical Instance. Recall that q0 := Δ · (O( k2α s
ϵ ))k , and i is the smallest height such that
there exists u ∈ Ni with heuristic T(i)
(u, 4) > q0 · si
, where u is chosen to maximize the heuristic.
Recall that the heuristic T(i) itself is an estimate for a sparse instance of TSPN with approximation
ratio slightly larger than 1 (say, 1.000001). For simplicity, we use the notation a  b to mean a ≤
1.00001b.
Choose an integer λ ∈ {0, 1,..., k − 1} such that T(i)
(u, 6 + 2λ) ≤ 30k · T(i)
(u, 4 + 2λ). We claim
that such a λ must exist. Otherwise, we have T(i)
(u, 4 + 2k) > (30k)
k · T(i)
(u, 4). Suppose N is the
set of net-points in Ni ∩ B(u, (5 + 2k)si ). Then, a tour visiting all the regions with diameter at most
δ · si intersecting B(u, 4 + 2k) can be formed from the tours corresponding toT (i)
(v, 4) over v ∈ N
and a minimum spanning tree on N. This has cost at most (4(5 + 2k))k · (T(i)
(u, 4) + (5 + 2k)si ) < 1
10 · (30k)
k · T(i)
(u, 4), from the choice of u and q0.
Define S1 := B(u, (5 + 2λ)si ). Sample h ∈ [0, 1
2 ] uniformly at random (as opposed to using distribution Expi as in Definition 2.8); let B := B(u, (4 + 2λ + h)si ).
We set W1 := {P ∩ S1 : P ∩ B  ∅, P ∈ W }, and W2 := {P ∈ W : P ∩ B = ∅}. Recall that (S1,W1 +
{u}) is passed to DP, while (V,W2 + {u}) is solved recursively by ALG.
Lemma 5.1 (Critical Instance Gives a Lower Bound on Tour Length). Suppose T1 is a tour
that visits all regions in W1 and u. Then, q0 · si < T(i)
(u, 4)  T(i)
(u, 4 + 2λ)  w(T1).
Proof. The first strict inequality follows from the construction that the instance is critical.
The next two approximate inequalities can be proved in the same manner. Both are in the form
T (i)
(u,r)  w(T
).
In both cases, the tour T
 visits all regions with diameter at most δ · si that intersect B(u,rsi ).
Hence, by shortcutting and using the triangle inequality and converting the shortcutting edges to
become net-respecting, we can produce a tour T (with weight w(T ) ≤ (1 + O(ϵ )) · w(T
)) that is
in B(u, (r + δ )si ) and visits all the regions that are also supposed to be visited by the tour corresponding to T(i)
(u,r). However, since T(i)
(u,r) is only an approximation to some corresponding
optimal tour, we have T(i)
(u,r) ≤ 1.000001w(T )  w(T
), as required.
The following result implies (P2) in Section 3; it is an analog of Bartal et al. (2016, Lemma 3.3)
and turns out to be the most technical part to adapt the argument for TSPN.
Lemma 5.2 (Removing Critical Instance). Suppose S1, W1, and W2 are as defined above, and T
is an optimal net-respecting tour in V visiting regions in W . We set q0 := Δ · (O( k2α s
ϵ ))k . Then, for
each random h ∈ [0, 1
2 ], there exist tours T1 and T2 such that the following holds:
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.            
9:12 T.-H. H. Chan and S. H.-C. Jiang
—Tour T1 is in S1 and visits all regions in W1 and u.
—Tour T2 is net-respecting and visits all regions in W2 and u.
—E[w(T1)] ≤ 1
1−ϵ · (w(T ) − E[w(T2)]), where the expectation is over random h ∈ [0, 1
2 ].
Proof. Recall δ = ϵ
1000k , and let η := ϵδ. Let l be the largest height such that sl ≤ max{1, ηsi},
and ρ := 4 + 2λ.
Then, S1 := B(u, (ρ + 1)si ) and B := B(u, (ρ + h)si ), where h is sampled from [0, 1
2 ] uniformly at
random. We also write S0 := B(u, ρsi ) ⊂ B ⊂ S1.
Given some h ∈ [0, 1
2 ], we shall construct tours T1 and T2 using edges in T and adding extra
edges. In the construction, we ensure that (1) each tour visits all the regions that it is supposed to
visit, and (2) the edges added form a connected component such that the corresponding tour can
be formed (by possibly shortcutting edges).
In the cost analysis, some edges are charged to T once. Typically, these edges are path segments
in T , and the intermediate nodes have degree 2. When a tour is being formed finally, it is important that these edges will only be used once. As mentioned above, during the construction, some
edges are added to make a connected component. When a tour is formed, these edges could be
used a multiple number of times (say, at most 10 times), and their cost is charged to ϵ · w(T1) via
Lemma 5.1.
We next describe the construction in stages and state the cost involved in each stage.
Ensuring Connectivity. Define N := Nl ∩ S1 to be the net-points inside S1. For each of T1 and T2,
we add a minimum spanning tree F on N, which has cost (O(
ρs
η ))k · ρsi
. Since u ∈ N, both T1 and
T2 visit u. We remark that as we add edges in the construction, we make sure that only nodes in
N or nodes connected to N (with edges of length at most ηsi
) can have odd degrees. Hence, to
form each of the tours T1 and T2, the standard technique of considering the Euler tour on the tree
F will incur a cost that is a constant factor (say, at most 10 times) of w(F ). By the choice of q0 and
Lemma 5.1, this will account for at most ϵ
4 · w(T1).
We partition the edges inT into three sets: (1) Ein: edges totally within B, (2) Ecr : edges crossing
B, and (3) Eout : edges totally outside B.
Ensuring Regions Visited: Part I. We add edges in Ein to T1 and edges in Eout to T2. Hence, we
have ensured that T2 will visit all the regions that do not intersect B. However, Ein might not be
enough to visit all regions that intersect B. We will take care of this in Part II. For the time being,
we describe how the end-points of edges in Ecr are connected to the spanning tree F in each of T1
and T2.
Suppose e = {x, x 
} ∈ Ecr such that x ∈ B and x   B. If w(e) ≥ δsi
, then both x and x  are in
N because T is net-respecting; in this case, we add e to T2 (by extending the path segment
in T2), and the end-point x is N, which is already spanned by the tree F . Observe that edges
in T (whose cost is charged to w(T )) added to T2 are already net-respecting, and other edges
added to T2 can be made net-respecting by increasing a small factor that can still be charged to
ϵ · w(T1).
Ifw(e) < δsi
, then we add the edge e toT1. We remark that at this point, in our charging scheme,
the part of the cost charged exactly once tow(T ) has been used, and any further cost will be charged
to ϵ · w(T1). Next, we connect x  to the closest net-point in N, which incurs a cost of at most ηsi
.
Observe that we need to charge this to ϵ · w(T1) somehow. We use the randomness due to h and
observe that this cost is charged to e only if the edge e is cut by B, which happens with probability
at most 2w (e )
si . Moreover, e can be charged with nonzero probability only if e ∈ T |S1 . Hence, the
expected cost due to this part is C1 := 2η · w(T |S1 ).
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018. 
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:13
Ensuring Regions Visited: Part II. Observe that T1 is supposed to visit all regions that intersect B.
However, T might visit such a region outside B. We next add edges to make sure such regions that
might be missed by Ein are visited by T1.
By Claim 2.6, at most Δ · (O(
ρα
δ ))k regions with diameter at least δsi can intersect B. Hence,
the cost to connect each one of them to the closest net-point in N is at most ηsi
. Therefore, by the
choice of q0 and Lemma 5.1, the cost of connecting them to N is at most ϵ
4 · w(T1).
We next consider the regions with diameter at most δsi that intersect B. Define B1 := B(u, (ρ +
h + δ )si ) and B2 := B(u, (ρ + h + 3δ )si ). Hence, we have S0 ⊂ B ⊂ B1 ⊂ B2 ⊂ S1. We define the annulus A := B1 \ B and include all path segments in T |A to T1. Observe that we need to include even
the trivial path segments consisting of single nodes. At this point, we have ensured that T1 visits
all regions that intersect B.
We next describe how the end-points of the path segments in T |A are connected. Suppose x 
is an end-point of such a path segment. We try to extend the path segment along the tour T and
consider the following cases.
(1) The next point x is in B. If d(x, x 
) < δsi
, then the edge {x, x 
} has already been added to
T1 in Part I; otherwise, by the net-respecting property of T , x is a point in N.
(2) The next point x is not in B, i.e., x  B1. Here, we start from p = x  and try to extend the
path segment along the tour T that goes outside B1. Whenever we have p ∈ B2 and the
next hop {p,p
} has distance at least δsi
, then we have encountered a net-point p in N,
because T is net-respecting. Otherwise, the tour either returns to the annulus A or exits
the ball B2. If the former happens first, then this tour segment is merged with the next one
in T |A; if the latter happens first, suppose x  is the last node in B2 before the tour leaves
B2.
(3) If d(x 
, x ) ≤ δsi
, then the jump from x  to outside B2 has distance at least δsi
, which
means that x  is in N. Otherwise, if d(x 
, x ) > δsi
, we shall use the edges from x  to x 
along T to pay for the cost of connecting x  to the nearest point in N.
Hence, to summarize, the cost of taking care of the regions with diameter at most δsi intersecting
B can be charged to the edges of T that are totally in the annulus A2 := B2 \ B, whose width is 3δ.
Because of the randomness of h, for any edge e, regardless of its length, the probability that e lies
totally in A2 is at most 6δ (where we do not attempt to optimize the constant). On the other hand,
an edge can be in A2 with nonzero probability only if e ∈ T |S1 . Hence, the expected cost is at most
C2 := 6δ · w(T |S1 ).
Analyzing the Cost E[w(T1) + w(T2)]. In the description above, we state that the expected cost
can be charged tow(T ) or ϵ · w(T1). The charging is straightforward in most cases, but we elaborate
how the expected cost C1 + C2 is charged to ϵ · w(T1).
Observe that C2 ≥ C1. Hence, we analyze w(T |S1 ). It follows from Lemma 4.2 that w(T |S1 ) ≤
T(i)
(u, ρ + 2) + Δ · (O(
kαρs
ϵ ))k · si
.
By the choice of λ, we have T(i)
(u, ρ + 2) = T(i)
(u, 6 + 2λ) ≤ 30k · T(i)
(u, 4 + 2λ)  30k · w(T1),
where the last approximate inequality follows from Lemma 5.1. Therefore, by the choice of q0, we
have w(T |S1 ) ≤ 20k · w(T1). Hence, we have C1 + C2 ≤ 12δ · w(T |S1 ) ≤ ϵ
4 · w(T1).
Hence, in conclusion, the following inequality holds with probability 1: E[w(T1) + w(T2)] ≤
w(T ) + ϵ · w(T1). Taking expectation gives the required result.
6 DYNAMIC PROGRAM FOR TSPN
In Section 4, we see that the heuristic T(i)
(u,t) can ensure that the instance (S,W ) received by
DP defined in Section 3 has a sparse optimal tour, which by Lemma 4.1 implies the existence of
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.   
9:14 T.-H. H. Chan and S. H.-C. Jiang
an (m,r)-light (1 + ϵ )-optimal tour for appropriate values of m and r. In this section, we describe
details of the dynamic program DP(S,W ) that finds such a tour in S visiting all regions in W .
The dynamic program is a combination of the ones in Chan and Elbassioni (2011) and Bartal et al.
(2016), which are themselves extensions of the ones in Arora (2007) and Talwar (2004). We first
review some properties for TSPN as in Chan and Elbassioni (2011).
6.1 Structural Properties of TSPN
Common and Rare Groups. Recall that the setW of regions are grouped into sets {Wl}l ∈[Δ]. We say a
groupWl is common if |Wl | > (8α)
k , and otherwise is rare. LetWc := ∪l:|Wl |>(8α )kWl be the regions
in common groups, and letWr := W \Wc be those in rare groups. By Lemma 2.4,

P ∈Wc Diam(P) ≤
2Δ · (8α)
kOPT, and observe that |Wr | ≤ Δ · (8α)
k .
Configuration of Random Radii. In Lemma 4.1, we see a procedure that samples O(k logn) random radii for each net-point at each height. By a configuration of random radii, we mean picking
some radius for each net-point at each height. Recall that a configuration of random radii induces
a hierarchical decomposition in Definition 2.9.
Given a hierarchical decomposition, the ideas of anchor points and potential sites are used in Chan
and Elbassioni (2011) to give an efficient way to keep track of which clusters are responsible for
which regions. Since later we shall consider different configurations of random radii, we give an
alternative description here. Let 0 < γ < 1 be some parameter associated with the detour made
when a region is visited via an anchor point.
Anchor Points for Making Detours for Common Regions Wc . Consider some tour T that visits all
regions in W . Given a hierarchical decomposition induced by a configuration of random radii, we
show how anchor points are assigned to a region P in a common group. Moreover, we describe
the detour made to T in each case.
Suppose that region P is first divided at height i; i.e., it is totally contained in some height-(i + 1)
cluster.
(1) Suppose Diam(P) ≤ γ si
. Then, we pick an arbitrary point p ∈ P and replace the region
P with the singleton {p}; we emphasize that in this case p is NOT an anchor point for
the region P. Observe that visiting the region via p will cost a detour of length at most
2Diam(P).
(2) Suppose j is the largest height such that sj ≤ max{1,γ si}. For each height-j cluster Cu
(centered at some u ∈ Ni ) that intersects region P, assign u as an anchor point from cluster
Cu for region P. We say that u is the potential site for the cluster Cu . Observe that u might
not be a point inCu ; when the potential site u is activated, point u acts like a special portal
for the cluster Cu to visit regions as follows. If the tour T visits a point p in Cu , then a
detour can be made to visit the activated potential site u, and then to a point in P closest
to u, after which we backtrack to p to finish the detour; since the cluster Cu has radius at
most 2sj
, this detour has length at most 8sj ≤ 8γ si
.
Note that we do not know which point in the region the optimal tour would visit, but we can
ensure that the correct point would have an anchor point within a distance of 2γ si
.
The following lemma gives a slightly better analysis than Chan and Elbassioni (2011, Lemma 3.3).
This simple improvement later removes the dependence of γ on L = O(logs n), which ensures that
the number of regions each cluster needs to keep track of is independent of n.
Lemma 6.1 (Approximate Point Location for Divided Regions). Suppose a hierarchical partition is sampled as in Definition 2.9. Suppose a detour is made to visit a common region P as above.
Then, the expected increase in the length of the tour is at most O(βγ logs 1
γ ) · Diam(P).
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018. 
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:15
Proof. First, observe that the probability that a region P with D := Diam(P) is first divided at
the height i is at most min{1,O(β) · D
si }, as stated in Definition 2.8. We consider different cases
for i:
(1) Case si ≥ D
γ
. We have D ≤ γ si
, and so P is replaced by a singleton, and the detour has
length at most 2D. Suppose l is the smallest height such that sl ≥ D
γ . Then, summation
over i ≥ l gives contribution
i ≥l O(β) · D
si · 2D ≤ O(β) · D
sl · O(D) ≤ O(βγ ) · D.
(2) Case D ≤ si < D
γ . There are logs 1
γ
such is, each of which gives contribution at mostO(β) ·
D
si · γ si = O(βγ ) · D. Summation over i in this range gives contribution O(βγ logs 1
γ ) · D.
(3) Case si < D. In this case, the probability of P cut at height i is at most 1, and the sum of
contributions over such is is at most O(γ ) · D.
Hence, the expected increase in length after the detour is at most O(βγ logs 1
γ ) · Diam(P), as
required.
Combining Lemma 2.4 and Lemma 6.1, we show that γ can be chosen such that the detour will
cause the tour to increase by only ϵ fraction of the optimal tour.
Corollary 6.2 (Low-Cost Detours). Suppose a hierarchical decomposition is sampled as in Definition 2.9 and the portal assignment procedure is carried out to make a detour for each common region
as described above. Then, the expected increase in the tour length is at most Δ · (8α)
k · O(βγ logs 1
γ ) ·
OPT, where β = O(k). In particular, we can choose 1
γ = Δβ ·(O (α ))k
ϵ log Δβ ·(O (α ))k
ϵ (independent of n)
such that this expected increase is at most ϵ · OPT.
Ambiguous Regions for a Cluster. Recall that, ultimately, we want to limit the number of regions
that intersect a cluster that the dynamic program has to consider explicitly. Given a cluster C at
height i, its ambiguous regions are those regions P partially intersecting C that satisfy one of the
following properties:
(1) The region P is in Wr ; i.e., it is in a rare group; observe that no anchor point is assigned
for regions in a rare group.
(2) The cluster C or any of its descendant clusters contain potential sites that can be anchor
points for the region P.
According to Chan and Elbassioni (2011, Lemma 3.5), the number of ambiguous regions a cluster
needs to consider is Δ · (O( α
γ ))k . However, since we have 1
γ = (Ω(1))k , this could lead to a factor
of 22Θ(k2 )
in the final running time. Here, we improve the upper bound on the number of ambiguous
regions using the sparsity of the heuristic.
Lemma 6.3 (Number of Ambiguous Regions). Suppose in an instance, for all but the top height i,
and for allu ∈ Ni , T(i)
(u, 4) ≤ q0 · si
. Then, the number of ambiguous regions for any cluster is at most
H := Δ · (O( α
ϵ ))k · q0
γ .
Proof. Consider a height-i cluster C, whose center is u ∈ Ni and whose diameter is O(si ). The
number of ambiguous regions in rare groups is at most Δ · (O(α))k . We next focus on the common
groups.
If some region P has diameter at most γ si
, then P cannot be ambiguous, because in the approximate point location procedure, an arbitrary point p ∈ P is picked to replace P.
Therefore, it suffices to bound the number of ambiguous regions of diameter at leastγ si
. Observe
that, by α-fat weak disjointness (Claim 2.6), the number of regions of diameter at least ϵsi is at most
Δ · (O( α
ϵ ))k .
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.  
9:16 T.-H. H. Chan and S. H.-C. Jiang
Hence, it remains to bound the number of ambiguous regions of diameter in [γ si
, ϵsi
] that intersect cluster C. DefineW to be the set of these regions. Observe that the regions inW are totally
contained in B(u, 3si ).
By Corollary 2.5,

P ∈W diam(P) ≤ Δ · (O(α))k · T(i)
(u, 4) ≤ Δ · (O(α))k · q0si
. Hence, it follows
that |W | ≤
P∈W diam(P )
γ si ≤ Δ · (O( α
ϵ ))k · q0
γ .
Combining the above cases gives the required result.
6.2 Description of a Dynamic Program for TSPN
Our dynamic program DP is a combination of the dynamic programs in Chan and Elbassioni (2011)
and Bartal et al. (2016). In Bartal et al. (2016), the number of random radii considered by each netpoint at each height is O(k logn). To avoid considering an exponential number of configurations,
a doubling dimension is used to exploit the locality of the hierarchical decomposition. We first
describe the information needed to identify each cluster at each height.
Information to Identify a Cluster. Each cluster is identified by the following information:
(1) Height i and cluster center u ∈ Ni . This has L · O(nk ) combinations, recalling that |Ni | ≤
O(nk ).
(2) For each j ≥ i and v ∈ Nj such that d(u,v) ≤ O(sj
), the random radius chosen by
(v, j). Observe that the space around B(u,O(si )) can be cut by net-points in the same
or higher heights that are nearby with respect to their distance scales. As argued in
Bartal et al. (2016), the number of configurations that are relevant to (u,i) is at most
(O(k logn))L·(O (1))k
= n 1
c ·(O (1))k
, where L = O(logs n) and s = (logn)
c
4k , where c > 0 is
fixed in advance.
(3) For each j > i, which cluster at height j (specified by the cluster center vj ∈ Nj) contains
the current cluster at height i. This has (O(1))L = nO ( k c log logn ) combinations.
Therefore, the whole dynamic program considers at most n 1
c ·(O (1))k
clusters. As in Arora (2007)
and Talwar (2004), the dynamic program looks for the best (m,r)-light tour, where the values of
m and r are determined by Lemma 4.1, Corollary 4.3, and Lemma 5.2 as follows:
m := (O(
sk logs n
ϵ ))k and r := Δ · (O( k2α
ϵ ))k · sk · logs logn.
As in the case of Chan and Elbassioni (2011), we look for a tour that visits every region. We
describe the attributes used to index each entry of a cluster.
Attributes of a Cluster Entry. As in Chan and Elbassioni (2011), each cluster C has a number
of entries, each of which is indexed by the following attributes. Suppose C is at height i and has
center u ∈ Ni :
(1) A collection I of portal entry/exit points. Recall that (m,r)-lightness implies that |I | ≤ r,
and there are at most m2r combinations.
(2) A bit vector of length equal to the number of ambiguous regions that cluster C has. Each
such bit indicates whether the cluster is responsible for the corresponding ambiguous
region.
Observe that the information used to identify the cluster C specifies how the space in
B(u,O(si )) is cut at height j, for j ≥ i. Hence, it is sufficient to determine which are the
ambiguous regions for C. By Lemma 6.3, the number of ambiguous regions for a cluster is
at most
H := Δ · (O( α
ϵ ))k · q0
γ = Δ
γ · (O( kα
ϵ ))2k · sk , and so there are at most 2H combinations.
(3) A bit indicating whether the potential site of cluster C is activated.
ACM Transactions on Algorithms, Vol. 14, No. 1, Article 9. Publication date: January 2018.   
Improved PTAS for TSP with Neighborhoods in Doubling Metrics 9:17
Filling Out Dynamic Program Entries. The dynamic program entries are computed bottom-up
in the fashion described in Chan and Elbassioni (2011, Section 4). Observe that the information
identifying a cluster contains the relevant configuration of random radii that can determine the
cluster’s parent and siblings. The following result is a restatement of Chan and Elbassioni (2011,
Theorem 4.1) that compares the running time of the dynamic program for TSPN with that for TSP.
Theorem 6.4 (Comparing Running Times). With constant probability, the dynamic program
gives an (m,r)-light tour for TSPN of length at most (1 + ϵ )OPT in time TIME(TSP) · 2O (H K)
, where
TIME(TSP) ≤ n 1
c ·O (1)
k
· (mKr)
2K r is the time for approximating TSP with the dynamic program in
Bartal et al. (2016), H is an upper bound on the number of ambiguous regions for each cluster, and
K = (O(s))k is an upper bound on the number of children for each cluster.
We remark that even if we make use of the dynamic program in Bartal et al. (2016), our improved
running time is due to improved values of m and r.
Corollary 6.5 (Running Time of DP(V,W )). Fix any c > 0, and suppose an instance (S1,W1)
with large enough n = |W1 | is passed to DP in Section 3. Then, with probability at least 1 − 1
nΘ(k) ,
the dynamic program DP can return a TSPN tour visiting all regions in W1 with length at most
(1 + ϵ ) · OPT(S1,W1) in time
n 1
c ·(O (1))k
· exp[Δ2+c · ( kα
ϵ )
O (k) · o(logc n)].
Proof. Repeating the algorithm in Theorem 6.4 for O(k logn) times, we can convert constant
success probability to high probability 1 − 1
nΘ(k) . We show our dynamic program runs in polynomial time in n and give the dependence of the running time on the parameters.
Recall that the dynamic program for TSP (Bartal et al. 2016) finds the optimal (m,r)-light tour
in hierarchical decompositions where each cluster has at most K children. The number of clusters
(induced by all relevant configurations of radii) from all heights is at most n 1
c ·O (1)
k
, and the time
to process all entries of a cluster is (mKr)
2K r .
Recall that K = (O(s))k , m := (O(
sk logs n
ϵ ))k = (O(
k log2 n
ϵ ))k , and r := Δ · (O( k2α
ϵ ))k · sk ·
logs logn.
For any c > 0, for sufficiently large n, we can set s := (logn)
c
4k ≥ 4, and the term s2k = (logn)
c
2
can be used to absorb sublogarithmic terms O(log logn). Hence, ln(mKr)
2K r = Δ · ( kα
ϵ )
O (k) ·
o(logc n).
Finally, H := Δ
γ · (O( kα
ϵ ))2k · sk and 1
γ := Δβ ·(O (α ))k
ϵ log Δβ ·(O (α ))k
ϵ . Hence, HK = Δ2+c ·
( kα
ϵ )
O (k) · o(logc n).
Therefore, the total running time is
n 1
c ·(O (1))k
· (mKr)
2K r · 2O (H K) = n 1
c ·(O (1))k
· exp[Δ2+c · ( kα
ϵ )
O (k) · o(logc n)].
7 OPEN QUESTIONS
We summarize a few directions on future research.
Fixed Parameter Tractability. The running time of current PTASs for TSP in doubling metrics
have a term nO (1)
k
. Is there a PTAS that has time complexity of the form f (n) · д(k, ϵ ), where f
and д are functions that do not depend on k or ϵ?
Deterministic Algorithms. Currently, for TSP on doubling metrics, only a randomized PTAS is
known. Is there a deterministic PTAS? 