Abstract
The subtrees and BC-subtrees (subtrees where any two leaves are at even distance apart) have been intensively studied in recent years. Such structures, under special constraints on degrees, have a wide range of applications in many fields. By way of an approach based on generating functions, we present novel recursive algorithms for enumerating various subtrees and BC-subtrees of maximum degree ≤k in trees. The algorithms are explained through detailed examples. We also briefly discuss, in trees, the densities of subtrees (resp. BC-subtrees) with maximum degree ≤k among all subtrees (resp. BC-subtrees). For a tree of order n, the novelly proposed algorithms have multiple advantages. (1) Novel  (resp. ) variable generating functions were introduced to construct the algorithms. (2) The proposed algorithms solved the fast enumerating problem of subtree (resp. BC-subtrees) with maximum degree constraint, and also make the subtree (resp. BC-subtrees) enumerating algorithms proposed by Yan and Yeh [1] (resp. Yang et al. [2]) a special case of ours with . (3) The time complexity of our algorithm for subtree (resp. BC-subtrees) is  (resp. 
), which is much faster than the 
 (resp. 
) time method based on algorithm proposed in [1] (resp. [2]).

Previous
Next 
Keywords
Subtree

BC-subtree

Maximum degree

Generating function

1. Introduction
Let  be a simple graph on n vertices and m edges with vertex set 
 and edge set 
, the subtree number index, denoted by , is defined as the total number of non-empty subtrees of G. Related to subtrees, a BC-subtree is a subtree in which the distances between any two leaves are even. Similar to the subtree number index, we define the BC-subtree number index, denoted by , as the total number of non-empty BC-subtrees of G. Both of these two indices appeared to have applications in the design of reliable communication network [3], bioinformatics [4], and characterizing structural properties of molecular and graphs [5], [6], [7], [8], [9], [2], [10].

By way of generating functions, Yan and Yeh presented the algorithms of enumerating subtrees of trees [1]. Following similar approaches, Yang et al. [2], [11] considered the enumeration of BC-subtrees of trees, unicyclic and edge-disjoint bicyclic graphs. While doing so they introduced two additional distance related variables and weighted cyclic contraction method. Also with generating functions, Chin et al. [12] studied the subtrees of complete graphs, complete bipartite graphs, theta graphs, as well as the ratio of spanning trees to all subtrees in complete graphs.

Along this line, using “deletion and contraction” technique, Yang et al. [10], [13] studied the subtree number and BC-subtree number of spiro and polyphenylene chains, molecular graphs of a class of important polycyclic aromatic hydrocarbons that have broad applications in organic and drug synthesis [14], [15], [16], [17]. They also further confirmed the reverse correlation between the subtree number index and the Wiener index on spiro chains, polyphenylene chains, hexagonal chains and phenylene chains [10], [14], [18], [19]. That is, the chains with the minimum subtree numbers coincide with the ones that attain the maximum Wiener indices, and vice versa.

More recently, Yang et al. [20] presented the explicit formulae for the expected values of subtree number in random spiro chains and polyphenylene chains, and compared the expected values of these two indices. Through “path contraction” carrying weights method, Yang et al. [21] solved the subtree enumerating problem for tricyclic graphs.

Over the years, extremal problems related to the subtree numbers [5], [9], [13], [22], [23], [24], [25], [26], [27] and their relations with other indices such as the Wiener index [10], [18], [28], [29], [30] have been extensively studied.

On the other hand, it is often interesting to consider substructures with certain fixed parameters. Such questions have applications in bioinformatics [31], natural language processing [32], comparison and search of XML data [33], and logistics [34]. In this paper, we will study the numbers of subtrees and BC-subtrees with maximum degree ≤k.

First we introduce the necessary terminologies and definitions, and establish some useful lemmas in Section 2. Theoretical justification is provided in Section 3 and Section 5. We present the algorithms of enumerating various subtrees and BC-subtrees with maximum degree ≤k of trees in Section 4 and Section 5, respectively. Section 6 illustrates the details of the proposed algorithms. We also discuss the proportion of subtrees (resp. BC-subtrees) with maximum degree  in general trees. Lastly, Section 7 concludes the paper and proposes directions of potential future work.

2. Terminology and notations
We first introduce the technical notations and lemmas that will be used in the discussion. For more background information one may check [10], [1], [20].

Let  be a weighted tree with 
 and 
. When the subtree problems are considered, we start with default vertex-weight function 
 and edge-weight function 
, with 
 (here 
 represents the i-th weight of the vertex) and 
 (ℜ is a commutative ring with a unit element 1). Consequently, each vertex weight is a -dimensional vector 
 for any . Here 
 represents the number of subtrees rooted at v with maximum degree ≤k and a constraint that the degree of v is i . Obviously, for integer , 
.

When discussing the BC-subtrees, 
-subtrees and 
-subtrees (to be defined later) of T, we start with its vertex-weight function 
 and edge-weight function 
 with 
 and 
 (where ℜ is a commutative ring with a unit element 1). In this case, each vertex weight is a -dimensional vector 
) for any . Here 
 (resp. 
) represents the number of subtrees rooted at v with all the distance between each pendant vertex and v is odd (resp. even), as well as the maximum degree ≤k, and the degree of v is i . We let 
 and it is easy to see that, for integer , 
.

Here we employ the convention that if 
 is a sequence and , then 
 
 and 
 
. For convenience, we list the necessary notations and terminologies below.

•
: the distance between vertices .

•
: the degree of .

•
“﹨”: the removing operation.

•
: the leaf set of T.

•
: the set of all subtrees with maximum degree ≤k () of T.

•
: the set of subtrees containing 
 with maximum degree ≤k.

•
:
 where , and we call each subtree in 
 the 
-subtree of T.

•
:
 where , and we call each subtree in 
 the 
-subtree of T.

•
, 
: the 
, 
 weight of subtree 
, respectively.

•
: the set of all BC-subtrees with maximum degree ≤k (≥2 is an integer) of T.

•
: the set of BC-subtrees containing 
 with maximum degree ≤k (≥2 is an integer).

•
: the max k degree subtree weight of 
.

•
: the max k degree BC-subtree weight of 
.

•
: the sum of max k degree BC-subtree weight of BC-subtrees in 
.

•
: the number of subtrees in set 
.

•
: the number of BC-subtrees in set 
.

For a given subtree 
, its max k degree subtree weight is defined as
 
 
 

And we define the max k degree subtree generating function of T by
 
 Similarly, the max k degree subtree generating function of G containing 
 are as follows:
 

Given 
 (), let
 and
 Then:

•
the 
 () weight of 
, denoted by 
, is defined as:

–
If 
 is a weighted single vertex v, then 
;

–
otherwise,
 where
 
 
 
﹨
 
 
 
﹨
 
 
 

•
the 
 () weight of 
, denoted by 
, is defined as:

–
If 
 is a weighted single vertex v, then 
;

–
otherwise,
 where
﹨
 
 
 
 
 
 
 
 
 

The 
, 
 subtree generating function of 
 are respectively defined as
 
 
 and
 
 

Similarly, for a given BC-subtree 
, we define
 and
 where 
. The max k degree BC-subtree weight of 
 is(1)
 where

•
 
 
, 
 
 
 
,

•
 
 
 
, 
 
 
 
,

•
 
 
 
, 
 
 
,

•
 .

And the max k degree BC-subtree generating function of T is
 

Similarly,
 
 where 
.

With above notations, it is not difficult to see
 and

3. Theoretical background
Let  be a weighted tree on  vertices, and let u be a leaf vertex and 
 be a pendant edge of T, we define a weighted tree 
 from T with 
﹨, 
﹨
,(2)
 
  for any  and 
, and 
 for any 
.

Theorem 3.1

Given T and 
 are weighted trees as defined above, we have
 

Proof

We can partition the sets 
 and 
 as
 and
 where

•
 consists of subtrees of 
 that contain the vertex v, but not vertex u;

•
 consists of subtrees of 
 that contain the edge 
;

•
 consists of subtrees of 
 that contain neither u nor v;

•
 consists of subtrees of 
 that contain the vertex u, but not v;

•
 consists of subtrees of 
 that contain the vertex v;

•
 consists of subtrees of 
 that do not contain vertex v.

It is easy to see that:

(i)
Both the mapping 
 between 
 and 
 (ignore vertex weight of v); and mapping 
 between 
 and 
 are natural bijections.

(ii)
 where 
 is the tree obtained from 
 by attaching a pendant edge 
 at vertex v of 
.

(iii)
.

Following (i), the mapping 
 is a bijection between 
 and 
. We now have(3)
(4)
 
 
 
 
(5) 
 
 
 
 
 
 
 
 
 
 

From (i)-(iii), we have(6) 
 
 
 
 
 
 
(7) 
 
 
 and(8) 
 
 
 Immediately following Eq. (6), we have(9) 
 
 
 
 
 
 
 
 

Thus by Eqs. (3), (5), (9) and (4)(10) 
 
 
 

Combining Eqs. (7), (8), (10), and the definitions of 
 and 
 we have(11)
 
 
 
 
 
 
 
 

The theorem thus follows.

Through similar analysis, we also obtain the following.

Theorem 3.2

Let  be a weighted tree on  vertices, u is a leaf vertex and 
 is a pendant edge of T. Let 
 be a weighted tree defined as above. Then, for arbitrary vertex 
, we have

Theorem 3.3

Let  be a weighted tree on  vertices, assume u is a leaf vertex and 
 is a pendant edge of T. Let 
 be a weighted tree defined as above. Then, for arbitrary two distinct vertices 
, and 
, we have

4. Our algorithms for subtree
For the sake of facilitating understanding, we include a Table 1 summarizing and providing detailed and intuitive explanations for the main notations in our proposed Algorithms.


Table 1. Explanations for the main notations in Algorithm 1, Algorithm 3, Algorithm 5, Algorithm 7.

Notation	Explanation
NT in Algorithm 1	Variable to store the number of subtrees with maximum degree ≤k of T.

NT in Algorithm 2	Variable to store the number of subtrees containing a fixed vertex vi ∈ V(T) with maximum degree ≤k of T.

NT in Algorithm 3	Variable to store the number of subtrees containing two distinct vertices vi,vj ∈ V(T)(i ≠ j) with maximum degree ≤k of T.

Ttmp in Algorithm 1, Algorithm 2, Algorithm 3, Algorithm 7	An auxiliary tree structure after deleting the selected pendant vertex and edge in each contract operation.

 in Algorithm 5	Variable to store the number of BC-subtrees with maximum degree ≤k of T.

 in Algorithm 6	Variable to store the number of BC-subtrees containing a fixed vertex vt ∈ V(T) with maximum degree ≤k of T.

 in Algorithm 7	Variable to store the number of BC-subtrees containing two distinct vertices vi,vj ∈ V(T)(i ≠ j) with maximum degree ≤k of T.
Similarly, from Theorem 3.2 (resp. Theorem 3.3), we have Algorithm 2 (resp. Algorithm 3) of enumerating the subtrees containing a fixed vertex (resp. two distinct vertices) with maximum degree ≤k of a tree. For a tree of order n, it is easy to see that the time complexities of Algorithm 1, Algorithm 3 are all , which are much faster than the 
 time methods based on algorithms proposed in [1] and tree traversal. Moreover, the subtree enumerating algorithms proposed by Yan and Yeh [1] can be actually viewed as a special case of ours with .

Algorithm 2
Download : Download high-res image (98KB)
Download : Download full-size image
Algorithm 2. Generating function F≤k(T;f,g;vi) for enumerating subtrees containing a fixed vertex vi ∈ V(T) with maximum degree ≤k of weighted tree T = (V(T),E(T);f,g).

Algorithm 3
Download : Download high-res image (139KB)
Download : Download full-size image
Algorithm 3. Generating function F≤k(T;f,g;vi,vj) for enumerating subtrees containing two distinct vertices vi,vj ∈ V(T)(i ≠ j) with maximum degree ≤k of weighted tree T = (V(T),E(T);f,g).

5. Our algorithms for BC-subtree
In order to solve the problem of enumerating BC-subtrees with maximum degree ≤k of weighted tree , we use the following theorem for which we shall give a detailed and somewhat tedious proof in the Appendix A.

Let  be a weighted tree of order  rooted at 
 and let 
 be a pendant vertex of T. Suppose  is the pendant edge of T. We define a weighted tree 
 of order  from T as follows: 
﹨, 
﹨,
 
 
 
  for any  and 
 and 
 for any 
.

Theorem 5.1

With the above notations, we have

From Theorem 5.1, we have the Algorithm 4 of enumerating 
-subtrees (), 
-subtrees () of T, respectively.

Algorithm 4
Download : Download high-res image (128KB)
Download : Download full-size image
Algorithm 4. Generating function 
 (j = 0,1…,k) for a fixed vertex vi.

Following the same conditions and notations, essentially the same argument yields the following theorems:

Theorem 5.2

Given two distinct vertices 
 and 
, say 
, 
, we have

Assume  is an edge of , denote by 
 (resp. 
) the tree of ﹨ that contains u (resp. v), the generating function 
 and 
 follows.

Theorem 5.3

 
 
 
 

Theorem 5.4

 
 
 
 

The following identity will be used in Algorithm 5(12)
 
 
 
 

Algorithm 5
Download : Download high-res image (179KB)
Download : Download full-size image
Algorithm 5. Generating function 
 for enumerating BC-subtrees with maximum degree ≤k of weighted tree T = (V(T),E(T);f,g).

For a tree of order n, it is also easy to see that the time complexity of Algorithm 5 is 
, which is much faster than the 
 time method based on algorithm proposed in [2] and tree traversal. Moreover, the BC-subtree enumerating algorithm proposed by Yang et al. [2] can be actually viewed as a special case of ours with .(13)
 
 
 
 
(14)
 
 
 
 
 
 
 
 
 
 
 
(15)
 
 
 
 
 
 
 
 
 
 
 

Consequently, with Algorithm 1, Algorithm 7, we can obtain the number of various subtrees, BC-subtrees with maximum degree k of trees is just 
 and 
, respectively.

6. Algorithm implementation and data discussion
Example 1

To better understand the Algorithm 1, Algorithm 3, we illustrate the procedures of computing the respective generating functions for a tree T (see Fig. 1), and we initialize each vertex weight  and edge weight z and set .

Fig. 1
Download : Download high-res image (259KB)
Download : Download full-size image
Fig. 1. Illustration of the procedures for computing F≤4(T;(y,0,0,0,0),z), F≤4(T;(y,0,0,0,0),z;A), F≤4(T;(y,0,0,0,0),z;A,H) of a weighted tree T by Algorithm 1, Algorithm 2, Algorithm 3, respectively.

By Algorithm 3 and phase 
 of Fig. 1, we have 
. By Algorithm 2 and phase 
 of Fig. 1, we have 
. By Algorithm 1 and phase 
 of Fig. 1, we have 
. Clearly, the coefficients of 
 represents the number of subtrees on i vertices with maximum degree ≤4 of T. For instance, there are 11, 10, 25, 50, 90 120, 100, 40 subtrees on 1 to 8 vertices with maximum degree ≤4 of T, respectively.

In order to keep the length of the paper to a reasonable limit, the illustrations of the procedures of computing the respective BC-subtree generating functions (Algorithm 4, Algorithm 7) for a tree T were shown in the Appendix A.

Moreover, by substituting  to the above generating functions 
, 
, 
, we have 
, 
, 
. Namely, there are 446 subtrees in total, 406 subtrees that contain vertex A, and 165 subtrees that contain vertices A and H of T, with maximum degree ≤4.

Another interesting question is: what proportion of all the subtrees(resp. BC-subtrees) are subtrees (resp. BC-subtrees) with maximum degree ?

We now define ratio 
 
 (resp. 
 
), where 
 (resp. 
) and 
 (resp. 
) represent the average subtree (resp. BC-subtree) number and average number of subtrees (resp. BC-subtrees) with maximum degree ≤k of T, respectively, here 
 (resp. 
) could be obtained by using the algorithm presented in reference [1] (resp. [2]).

Through randomly generating 3000 trees 
  on 30, 40, 50, 60, 70, 80, 90 vertices, respectively, with Algorithm 1, Algorithm 5, we can obtain the asymptotic ratios of trees on n  vertices, by observing the Fig. 2, we know that the maximum degree of almost all subtrees (resp. BC-subtrees) are not bigger than 8. Namely, most of the subtree are subtrees with small degree (≤8).

Fig. 2
Download : Download high-res image (774KB)
Download : Download full-size image
Fig. 2. Asymptotic proportion rk (resp. 
) of subtrees (resp. BC-subtrees) with maximum degree ≤k to all subtrees (resp. BC-subtrees) of 3000 randomly generated trees on n = 30,40,50,60,70,80,90 vertices.

7. Concluding remarks
In this paper, by way of generating functions, we presented algorithms of enumerating all subtrees, subtrees containing a fixed vertex, subtrees containing two distinct vertices, with maximum degree ≤k of trees in Section 4, and algorithms of enumerating all BC-subtrees, BC-subtrees containing a fixed vertex, BC-subtrees containing two distinct vertices, with maximum degree ≤k of trees in Section 5. Section 6 illustrates the procedures of the proposed enumerating algorithms and briefly discusses the ratios of subtrees (resp. BC-subtrees) with maximum degree  to all subtrees in general tree.

These studies further explored the behavior of subtree numbers and BC-subtree numbers in graphs. In particular, this seems to be the first time that degree constraints were put on BC-subtrees.

For future works, we plan to study the enumeration problem of subtrees and BC-subtrees under other special constraints, such as subtrees and BC-subtrees with diameter  of trees.

