Abstract
The Maximum Vertex Coverage problem (abbreviated as MVC) is to maximum the number of edges covered by a set of vertices of size exactly K on a graph. This problem is the dual of the vertex cover problem and has attracted a lot of interests in the literature of approximation algorithm. So far, the best approximation factor for the MVC problem is 3/4, which is obtained using an LP-rounding method. The main results of this paper are new approximation algorithms for MVC on cubic graphs and 3-bounded graphs (the vertex degrees are at most 3). The approximation factor on cubic graphs is 79/90 (≈0.878), which is tight by analyzing the existence of a feasible solution for a linear programming system. This algorithm can also be extended to 3-bounded graphs and guarantees an approximation factor of 19/24 (≈0.792).

Keywords
Cubic graph
Maximum vertex coverage
Approximation

1. Introduction
Right after Steven Cook built up the NP-completeness theory in 1971 [1], Vertex Cover (and its generalized versions: Dominating Set, Hitting Set and Set Cover) become a small group of widely studied NP-complete problems [2], [3], [4], because of their widely applications in real world [5]. It is well-known that Vertex Cover can be approximated within a factor  [6], but can't be approximated within a factor 1.36 unless P=NP [7]. For graphs with maximum degree of Δ, when , vertex cover is approximable within 7/3 [8], and for general Δ within 
 
 [6].

Given a positive integer K, the maximization variation of Vertex Cover is to find K vertices that cover as many edges as possible, which was formally called the Maximum Vertex Coverage problem (abbreviated as MVC). MVC is 2-approximable [9] and does not admit a PTAS [10]. Khuller, Moss and Naor presented a factor  approximation algorithm for the Maximum Set Coverage problem using a natural greedy method [11]. This ratio also holds for the MVC problem since Maximum Vertex Coverage is obviously a special case of Maximum Set Coverage. To the best of our knowledge, the best approximation factor for MVC is 3/4 by a complicated LP-rounding [12]. Over the last twenty years, there is no improvement (both positive and negative) for the MVC problem on general graphs, but some progress on special graphs. Apollonio and Sebö showed that MVC is polynomially solvable on line graphs [13]. Apollonio and Simeone established the NP-completeness of the MVC problem on bipartite graphs [14] and presented an approximation algorithm of factor 4/5 [15]. This ratio was lately improved to 0.821 [16], and then 8/9 [17].

On the other hand, it is well-known that Vertex Cover and Independent Set are complementary with each other. Though Independent Set is hard to be approximated on general graphs, it admits an approximation of factor 
 
 on cubic graphs [18], and an approximation of factor 
 
 on 3-bounded graphs [8].

In this paper, by exploiting algorithms for computing an approximate independent set, we design approximation algorithms for the MVC problem with a factor of 79/90 on cubic graphs and with a factor of 19/24 on 3-bounded graphs. Moreover, we show that the ratios are tight by analyzing the existence of feasible solutions for a linear programming system, and presenting the worst cases.

2. Preliminaries
Suppose that we are given a simple graph , where 
 is the set of vertices and 
 is the set of edges. If 
, then we say that the two vertices 
 and 
 are adjacent, and 
 is incident with both 
 and 
. If two vertices are not adjacent, we say that they are independent. An independent set of G is a set of vertices which are mutually independent. An independent set, say I, is maximal if, for any vertex , there is a vertex  and . The neighborhood of a vertex 
, denoted by 
, is the set of vertices which are adjacent with 
. The degree of 
, denoted by 
, is the cardinality of its neighborhood. G is called a cubic graph, if each vertex of G is of degree 3, and a 3-bounded graph, if each vertex has a degree not greater than 3. According to Handshaking Theorem, there are exactly  edges in a cubic graph of n vertices.

A vertex, say 
, covers all the edges incident with it, which are denoted by 
. Let 
 be the set of edges covered by all the vertices in 
, i.e., 
. An edge 
 is singly covered by a set of vertices 
, if 
 or 
 but not both. For 
, we use 
 to denote the resulting graph by deleting the vertices in 
 as well as their incident edges from G, and 
 to denote the induced subgraph of G on 
.

Now, we formally define the problems studied in this paper.

Definition 1

The Maximum Vertex Coverage Problem

Input: A simple graph  and a positive integer K.

Output: A subset 
 of exactly K vertices, such that the number of edges covered by vertices of 
 is maximized.

In this paper, we investigate the maximum vertex coverage problem on cubic graphs and 3-bounded graphs. As far as we know, the best approximation algorithm for the MVC problem on these two types of graphs has only a factor of 3/4 [12], which is as good as the factor on arbitrary graphs.
3. An approximation algorithm for MVC on cubic graphs
Given a cubic graph G, our general idea is firstly compute an independent set I, if its size is greater than K, then get rid of some vertices, and if its size is smaller than K, then find some vertices from the graph .

In [18], Berman and Fujito devised approximation algorithms for then maximum independent set problem on cubic graphs by a local search method. We assume that the approximated independent set I computed by Berman and Fujito's algorithm is maximal, since otherwise, iteratively add a vertex, which is not in I and independent with all vertices of I, until I becomes maximal. Then  will be a 2-bounded graph, because any vertex in  is adjacent with at least one vertex of I in G.

In the following, we always use 
 to denote the output vertex set of Algorithm 1. Let 
 () represent the set of vertices which are of degree i in a 2-bounded graph G, and 
 represents its size.

Lemma 1

Given a 2-bounded graph G, 
 is a set of vertices of the maximum size such that each vertex in it singly covers two edges, and 
 
.

Proof

Note that, for a path of p () vertices, there are at most 
 
 vertices which are mutually independent and each of which singly covers two edges. These vertices locate on the even positions of the path. Similarly, for a cycle of p () vertices, there are at most 
 
 vertices, which are mutually independent and each of which singly covers two edges. These vertices appear one vertex away from another on the cycle.

We prove that 
 reaches the upper bound inductively. The lemma holds obviously for a path of three or four vertices. Suppose 
 contains 
 
 vertices for any path of length p. As for a path of length , according to Algorithm 1, the second vertex on this path belongs to 
, then the length decreases to , by the inductive hypothesis, 
 will contain 
 
 vertices from the remaining path, so totally 
 contains 
 
 
 vertices of this path. Also, a cycle of  vertices would turn into a path of length p by deleting some vertex. Then, totally 
 will contain 
 
 
 vertices of this cycle.

As there are  degree-2 vertices on a path of p () vertices, and 
 
 
, and for a cycle of p vertices, it still holds since 
 
 
. Thus, the lemma holds. □

Let 
 be the set of vertices of degree 3 in the input graph G. Note that, when G is a cubic graph, 
 and 
.

3.1. An approximation ratio of 21/25
Given an optimal solution 
⁎
, suppose that 
⁎
 is the maximum independent set of 
⁎
, naturally, each vertex of 
⁎
 covers three edges. Let 
⁎
⁎
 be the maximum set of vertices such that, (1) those vertices in it are of degree three, (2) those vertices in it are mutually independent, and (3) each vertex covers two edges in 
⁎
. As 
⁎
 is maximum, each vertex of 
⁎
 has at most one neighbor in 
⁎
. (Since otherwise, 
⁎
 would be enlarged by substituting a vertex by its neighbors of 
⁎
.) Also, a vertex of 
⁎
 has one and only one neighbor in 
⁎
, because it is of degree three and covers two edges singly. Then the local structures of vertices in 
⁎
 and 
⁎
 have two types, which are shown in Fig. 1 and Fig. 2.

Fig. 1
Download : Download high-res image (52KB)
Download : Download full-size image
Fig. 1. Type-(a) and its four subcases. The center vertices belong to I⁎. The triangles represent vertices of I, and the filled squares represent vertices possibly being in I2.

Fig. 2
Download : Download high-res image (97KB)
Download : Download full-size image
Fig. 2. Type-(b) and its six subcases. The center vertices belong to I⁎ and 
⁎
. The triangles represent vertices of I, and the filled squares represent vertices possibly being in I2.

According to the cases that the vertices of I could overlap a vertex in 
⁎
 or 
⁎
, or be adjacent to some vertices in 
⁎
 and 
⁎
, there are a total of four subcases of a type-(a) structure in 
⁎
, which are shown in Fig. 1. Since the vertices of I are independent, in type-(b), at most one vertex of I can overlap with the two vertices in 
⁎
 and 
⁎
, then as shown in Fig. 2, there are six subcases of a type-(b) structure in 
⁎
.

Let 
 () be the number of vertices of 
⁎
, which are of type a-i, and 
 () be the number of vertices of 
⁎
, which are of type b-j respectively. Then, 
⁎
, and 
⁎
.

Theorem 1

The maximum independent set on cubic graph can be approximated within 
 
. [18]

Note that 
⁎
 is also an independent set of G, straightforwardly,(1)
 
⁎
If 
⁎
, Algorithm 2 guarantees an approximation factor of at least 
 
 
 
. So, in the following context of this section, we assume that 
⁎
. Then,(2)
⁎
⁎
 The value of the optimal solution can be described as 
⁎
⁎
⁎
⁎
⁎
⁎
.

Lemma 2

(3)

Proof

The left part is the number of edges covered by I, while the right part is the number of edges which are covered by I and also in the local structures. The lemma holds because the edges in these local structures must be distinct. □

 is a 2-bounded graph. Observe that the filled squares in these local structures are all candidate for 
, from Lemma 1, we have the following corollary.
Corollary 1

.

Similar to the optimal solution, the value of the solution obtained by Algorithm 2 is 
, together with Corollary 1, we have, 
.

Theorem 2

Algorithm 2 guarantees an approximation of factor 21/25 for the MVC problem on cubic graphs.

Proof

By 
 
 
, we have,(4)
 
 
 
 
 
 
 
 
 
 
 The approximation factor is
 
⁎
⁎
 
 
 
 
⁎
 
⁎
⁎
⁎
 
 It is sufficient to show that 
 
 
⁎
 
⁎
.
 
 
⁎
 
⁎
 
⁎
 
⁎
 
 
 
 
 
 
 
 
 
 
 
⁎
 
⁎
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 The first inequality holds because of (2) and the second inequality holds because of (4). The first equality holds because 
⁎
, and 
⁎
. As all the parameters are nonnegative, the last inequality holds. □

3.2. Improving the approximation ratio to 79/90
Based on a more complicate mathematical analysis, Algorithm 2 can reach an approximation ratio of 79/90. Firstly, note that a cubic graph of n vertices has exact  edges and each vertex of 
⁎
 covers 3 edges singly, then 
⁎
 
. As mentioned above, 
⁎
, and any other vertex of 
⁎
⁎
 covers at most two edges, then 
⁎
⁎
⁎
.

Theorem 3

Algorithm 2 guarantees an approximation of factor 79/90 for the MVC problem on cubic graphs.

Proof

We have two cases depending on whether 
 is empty or not.

(I) 
. Then .  is a 1-bounded graph, which containing  vertices and then at most 
 
 edges. Thus, 
 
 
, equivalently, 
 
. Thus, 
 
 
⁎
 
 
 
⁎
 
. The approximation ratio is,
 
 
 
⁎
 
 
 
 
 
 
 The first inequality holds because 
⁎
, the second inequality holds because 
 
 and 
 
⁎
 
.

(II) 
. Since the vertices of I are mutually independent and I covers none other edge but these missing edges incident with 
, 
 and 
, then, 
 
 
, and 
. Thus, 
, and combine with (1), 
 
⁎
 
, which means,(5)
⁎
 
 
 From Lemma 1, we have,
 
 
 
 
 Finally, the approximation ratio
 
 
 
 
 
 
⁎
 
 
⁎
 
 
 
 
 
 
⁎
 
 
 
 
 
⁎
 
 
 
 
 
 
 
 
 
 
 
 The second inequality holds because of inequality (1) and 
⁎
. The third inequality holds because 
 
. The fourth inequality holds because of inequality (3). This completes the proof. □

To show the above analysis is tight, we put the inequalities together as linear programming. In case 
,
⁎
 
 
⁎
 
⁎
 
⁎
 The value of solution computed by Algorithm 2 is , and the value of the optimal solution is 
⁎
 
. By solving LP-(1)'s dual linear programming, we found that LP-(1) has no feasible solution (while the dual linear programming is unbound) when . Specifically, if , because the constraints (C-1), (C-2), and (C-3) always hold, then the two constraints (C-4) and (C-5) can't both hold, i.t., it always satisfies that 
⁎
 
. So α is surely the approximation factor, which is less than 79/90. As Theorem 3 shows that the approximation factor is exactly 79/90, which reaches the upper bound, then the analysis of Theorem 3 is tight.
In case 
,
⁎
 
 
⁎
 
⁎
 
 
⁎
 LP-(2) has no feasible solution if . By a similar analysis of LP-(1), we can conclude that analysis of Theorem 3 is tight.

4. Extension of the algorithm to 3-bounded graphs
Actually, Algorithm 2 can also solve the MVC problem on 3-bounded graphs. Given a 3-bounded graph G, let 
 be the set of degree 3 vertices, then 
 is also a 3-bounded graph. Algorithm 2 first computes an approximated independent set I of 
 by Berman and Fujito's algorithm in [8], which guarantee an approximation factor of 
 
. If I is not a maximal independent set of 
, we can enlarge it by iteratively adding a vertex which is not in I and independent with all vertices of I. After this process, I will become maximal and the approximation factor surely keeps. Consequently, every degree 3 vertex of G is either in I or adjacent with at least one vertex of I, so  is 2-bounded. Thus, Algorithm 1 can be applied to obtain a maximum set of vertices, each of which singly covers two edges.

Next, we show that Algorithm 2 can approximate the MVC problem on 3-bounded graphs within a factor of 
 
.

Still, we partition the vertices of the optimal solution into three types of local structures. Given an optimal solution 
⁎
, let 
⁎
⁎
 be the set of vertices of degree three in 
⁎
, suppose that 
⁎
 is the maximum independent set of 
⁎
, naturally, each vertex of 
⁎
 covers three edges. Let 
⁎
⁎
 be the maximum set of vertices such that, (1) those vertices in it are of degree three, (2) those vertices in it are mutually independent, and (3) each vertex covers two edges in 
⁎
. Both 
⁎
 and 
⁎
 are the same to what defined on cubic graphs. Let 
⁎
⁎
 be the maximum set of vertices such that, (1) those vertices in it are of degree two, (2) those vertices in it are mutually independent, and (3) each vertex covers two edges in 
⁎
⁎
.

Now, consider the local structure of 
⁎
, 
⁎
 and 
⁎
 in G. The vertices of 
⁎
 and 
⁎
 are all of degree three, then they also have the two local structures shown in Fig. 1 and Fig. 2. Since a vertex of 
⁎
⁎
 can't be adjacent to any vertex of 
⁎
 and 
⁎
, then there are also a new type of local structure shown in Fig. 3, which we call type-(c). According to how the vertices of I appear in these local structures, besides the four subcases of type-(a) in Fig. 1 and the six subcases of type-(b) in Fig. 2, these are also three subcases of type-(c) in Fig. 3.

Fig. 3
Download : Download high-res image (33KB)
Download : Download full-size image
Fig. 3. Type-(c) and its three subcases. The center vertices belong to 
⁎
. The triangles represent vertices of I, and the filled squares represent vertices possibly being in I2.

Let 
 () be the number of vertices of 
⁎
, which are of type c-i. As the vertices of the optimal solution in these subcases are all distinct, then, 
⁎
, 
⁎
, and 
⁎
. Note that 
⁎
 is also an independent set of 
, so it can't be greater than the maximum independent set of 
. Berman and Fujito showed that,

Theorem 4

The maximum independent set on 3-bounded graph can be approximated within 
 
. [8]

Consequently, we have,(6)
 
⁎
 If 
⁎
, Algorithm 2 guarantees an approximation factor of at least 
 
 
 
. Hence, in the following, we assume that 
⁎
. Then we have 
⁎
⁎
⁎
. The value of the optimal solution can be described as 
⁎
⁎
⁎
⁎
⁎
⁎
⁎
⁎
⁎
.
Lemma 3

(7)

Proof

The left part is the number of edges covered by I, and the right part is the number of edges which are covered by I and also in these local structures. The lemma follows since those edges in the local structures must be distinct. □

Similar to Corollary 1, from Lemma 1 we have the following corollary.
Corollary 2

.

The value of the solution by Algorithm 2 is 
, together with Corollary 2, 
.

Theorem 5

Algorithm 2 guarantees an approximation of factor 19/24 for the MVC problem on 3-bounded graphs.

Proof

By 
 
 
, we have,(8)
 
 
 
 
 
 
 
 The approximation factor is
 
⁎
⁎
⁎
 
 
 
 
⁎
 
⁎
 
⁎
⁎
⁎
⁎
 
 It is sufficient to show that 
 
 
⁎
 
⁎
 
⁎
.(9)
 
 
⁎
 
⁎
 
⁎
 
⁎
 
⁎
 
⁎
 
 
 
 
 
 
 
 
⁎
 
⁎
 
⁎
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 The first inequality holds because 
⁎
⁎
⁎
. The second inequality holds because of (8). The first equality holds because 
⁎
, 
⁎
, and 
⁎
. As all the parameters are nonnegative, the last inequality holds. □

Next, we show that our analysis is tight by presenting an instance of 3-bounded graph in Fig. 4.

Fig. 4
Download : Download high-res image (22KB)
Download : Download full-size image
Fig. 4. The 3-bounded graph has five layers from top to bottom. Suppose that K = 9. Vertices of the second and fourth layers constitute the optimal solution, which covers 24 edges. By Algorithm 2, G[V3] is composed of the second layer and third layer, and vertices of third layer is an approximated independent set of it. Besides the vertices of the third layer, Algorithm 2 can also choose four vertices, each of which covers only one edge. Thus, the vertices obtained by Algorithm 2 cover 19 edges.

5. Conclusion
In this paper, we investigate the maximum vertex coverage problem on cubic graphs and 3-bounded graphs. By analyzing the local structures of the optimal solution, we show that the approximation ratio reaches to 21/25 on cubic graphs and 19/24 on 3-bounded graphs. In consideration of the relationship between vertices and edges on cubic graphs, we prove that the approximation is actually 79/90 by calculating a series of inequalities, and this ratio is verified to be tight by solving a linear programming of the inequalities. We think these two ratios are hard to improve unless the maximum independent set on these two kinds of graphs could be approximated better. However, any inapproximability result would still be meaningful.