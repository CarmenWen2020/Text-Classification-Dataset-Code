Abstract
In this paper we consider colorings of oriented graphs, i.e. digraphs without cycles of length 2. Given some oriented graph G=(V,E), an oriented r-coloring for G is a partition of the vertex set V into r independent sets, such that all the arcs between two of these sets have the same direction. The oriented chromatic number of G is the smallest integer r such that G permits an oriented r-coloring. Deciding whether an acyclic digraph has an oriented 4-coloring is NP-hard, which motivates to consider the problem on special graph classes.

In this paper we consider the Oriented Chromatic Number problem on classes of recursively defined oriented graphs. Oriented co-graphs (short for oriented complement reducible graphs) can be recursively defined from the single vertex graph by applying the disjoint union and order composition. This recursive structure allows to compute an optimal oriented coloring and the oriented chromatic number in linear time. We generalize this result using the concept of perfect orderable graphs. Therefore, we show that for acyclic transitive digraphs every greedy coloring along a topological ordering leads to an optimal oriented coloring. Msp-digraphs (short for minimal series-parallel digraphs) can be defined from the single vertex graph by applying the parallel composition and series composition. We prove an upper bound of 7 for the oriented chromatic number for msp-digraphs and we give an example to show that this is bound best possible. We apply this bound and the recursive structure of msp-digraphs to obtain a linear time solution for computing the oriented chromatic number of msp-digraphs.

In order to generalize the results on computing the oriented chromatic number of special graph classes, we consider the parameterized complexity of the Oriented Chromatic Number problem by so-called structural parameters, which are measuring the difficulty of decomposing a graph into a special tree-structure.

Keywords
Oriented graphs
Msp-digraphs
Oriented co-graphs
Oriented coloring
Efficient algorithms
Directed clique-width
Parameterized algorithms

1. Introduction
Given some undirected graph , an r-coloring for G is a partition of the vertex set V into r independent sets. The smallest integer r such that a graph G permits an r-coloring is referred to as the chromatic number of G. Deciding whether a graph has a 3-coloring is NP-complete. However, there are efficient solutions for the Chromatic Number problem on special graph classes, such as co-graphs [11], chordal graphs [41], and comparability graphs [49].

For directed graphs the concept of acyclic coloring introduced by Neumann-Lara [60] received a lot of attention in [60], [58], [2] and also in recent works [56], [59], [66], [37], [39]. Given some directed graph , an acyclic r-coloring for G is a partition of the vertex set V into r acyclic sets.1 The dichromatic number of a directed graph G is the smallest integer r such that G permits an acyclic r-coloring.

In this paper we consider the principle of oriented colorings on oriented graphs, which has been introduced by Courcelle [14]. Given some oriented graph , an oriented r-coloring for G is a partition of the vertex set V into r independent sets, such that all the arcs linking two of these subsets have the same direction. The oriented chromatic number of an oriented graph G, denoted by 
, is the smallest integer r such that G has an oriented r-coloring. Oriented colorings have applications in scheduling models in which incompatibilities are oriented [7].

In the Oriented Chromatic Number problem (OCN for short) there is given an oriented graph G and an integer r and one has to decide whether there is an oriented r-coloring for G. If r is constant, i.e. not part of the input, the corresponding problem is denoted by 
. Even 
 is NP-complete [7].

So far, the definition of oriented coloring is mostly applied to undirected graphs. In this case, the maximum value 
 of all possible orientations 
 of an undirected graph G is considered. For several special undirected graph classes the oriented chromatic number has been bounded. Among these are outerplanar graphs [63], planar graphs [57], and Halin graphs [22]. See [64] for a survey.

Oriented colorings of special classes of oriented graphs seems to be nearly uninvestigated. In this paper, we consider the Oriented Chromatic Number problem restricted to acyclic transitive digraphs, oriented co-graphs, msp-digraphs, and digraphs of bounded directed clique-width.

Oriented complement reducible graphs, oriented co-graphs for short, have been studied by Lawler in [54] and by Corneil et al. in [11] using the notation of transitive series parallel (TSP) digraphs. Oriented co-graphs can be defined from the single vertex graph by applying the disjoint union and the order composition. This recursive structure allows to compute an optimal oriented coloring and the oriented chromatic number in linear time [36]. We generalize this result using the concept of perfect orderable graphs by showing that for acyclic transitive digraphs every greedy coloring along a topological ordering leads to an optimal oriented coloring. In order to obtain an upper bound we show that for acyclic transitive digraphs and thus also for oriented co-graphs the oriented chromatic number is at most the maximum vertex degree plus one.

Minimal series-parallel digraphs, msp-digraphs for short, have been analyzed in [67]. By [4, Section 11.1] these digraphs can be used for modeling flow diagrams and dependency charts and have applications within scheduling under constraints. Msp-digraphs can be defined from the single vertex graph by using the parallel composition and series composition. We prove an upper bound of 7 for the oriented chromatic number for msp-digraphs and we give an example to verify that this is bound best possible. We use this bound and the recursive structure of msp-digraphs to obtain a linear time solution for computing the oriented chromatic number of msp-digraphs. Further, we show an upper bound of 3 for the chromatic number of underlying undirected graphs of msp-digraphs.

We also consider the parameterized complexity of the Oriented Chromatic Number problem parameterized by so-called structural parameters, which are measuring the difficulty of decomposing a graph into a special tree-structure. The existence of an FPT-algorithm2 or an XP-algorithm3 w.r.t. some structural parameter allows an efficient computation of the Oriented Chromatic Number problem on graph classes of bounded parameter values.

As already mentioned in [30], the Oriented Chromatic Number problem is not in XP when parameterized by directed tree-width, directed path-width, Kelly-width, or DAG-width, unless . Better results can be achieved considering the parameter directed clique-width. By extending our solution on msp-digraphs we can show an algorithm for the Oriented Chromatic Number problem on digraphs on n vertices given by a directed clique-width k-expression with running time in 
. This implies that the Oriented Chromatic Number problem is in FPT when parameterized by the directed clique-width and r, which was already known by defineability in monadic second order logic (MSO) [30]. Thus, for every integer r it holds that 
 is in FPT when parameterized by directed clique-width and for every class of graphs of bounded directed clique-width and every integer r the r-Oriented Chromatic Number problem can be solved in polynomial time.

Ganian has shown an FPT-algorithm for OCN w.r.t. the parameter tree-width (of the underlying undirected graph) [28]. Further, he has shown that OCN is DET-hard4 for classes of oriented graphs such that the underlying undirected class has bounded rank-width.

Beside these, we consider the standard parameter, i.e. the threshold value given in the instance, and the parameter “number of vertices”. In Table 1 we summarize the known results for OCN and 
 parameterized by parameters.


Table 1. Complexity of OCN and OCNr parameterized by parameters. The “///” entries indicate that by taking r out of the instance the considered parameter makes no sense and the “?” entries indicate that the parameterized complexity of the problems remain open. We assume that P ≠ NP.

OCN	
directed tree-width	∉XP	Corollary 6.2	∉XP	Corollary 6.2
directed path-width	∉XP	Corollary 6.2	∉XP	Corollary 6.2
DAG-width	∉XP	Corollary 6.2	∉XP	Corollary 6.2
Kelly-width	∉XP	Corollary 6.2	∉XP	Corollary 6.2
tree-width of und(G)	FPT	[28]	FPT	[28]
rank-width of und(G)	DET-h	[28]	?	
directed modular-width	?		FPT	Corollary 6.17
directed clique-width	?		FPT	Corollary 6.12
standard parameter r	∉XP	Corollary 6.1	///	
directed clique-width + r	FPT	Corollary 6.8	///	
number of vertices n	FPT	Corollary 6.20	FPT	Corollary 6.20
2. Preliminaries
We use notations of Bang-Jensen and Gutin [3] for graphs and digraphs.

2.1. Graphs
A graph is a pair , where V is a finite set of vertices and  is a finite set of edges. For a vertex , the set  is called the set of all neighbors of v or neighborhood of v.

We will use the following indexed graphs.

•
By 
, , we denote the path on n vertices.

•
By 
, , we denote the cycle on n vertices.

•
By 
, , we denote the complete graph on n vertices.

•
By 
,  we denote the complete bipartite graph with  vertices.

2.2. Digraphs
A directed graph or digraph is a pair , where V is a finite set of vertices and  is a finite set of ordered pairs of distinct vertices called arcs or directed edges. For a vertex , the sets 
 and 
 are called the set of all successors and the set of all predecessors of v. The set 
 is the set of all neighbors. The outdegree of v,  for short, is the number of successors of v and the indegree of v,  for short, is the number of predecessors of v. The maximum (vertex) degree is defined by 
.

For some given digraph , we define its underlying undirected graph by ignoring the directions of the arcs, i.e. . For some (di)graph class F we define  as the set of all (di)graphs G such that no induced sub(di)graph of G is isomorphic to a member of F.

A digraph 
 is a subdigraph of digraph  if 
 and 
. If every arc of E with both end vertices in 
 is in 
, we say that 
 is an induced subdigraph of G and we write 
.

An oriented graph is a digraph with no loops and no opposite arcs. We will use the following indexed oriented graphs.

•
By 
 
, , we denote the oriented path on n vertices.

•
By 
 
, , we denote the oriented cycle on n vertices.

•
By 
 
,  we denote an oriented complete bipartite digraph with  vertices.

An oriented forest (tree) is an orientation of a forest (tree). An out-rooted-tree (in-rooted-tree) is an orientation of a tree with a distinguished root such that all arcs are directed away from (directed to) the root. A directed acyclic graph (DAG for short) is a digraph without any oriented cycle 
 
, for , as subdigraph. A tournament is a digraph in which there is exactly one edge between every two distinct vertices.
A vertex v is reachable from vertex u in G, if G contains an oriented path 
 
 as a subdigraph having start vertex u and end vertex v. A topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge , vertex u is before vertex v in the ordering. A digraph G is bipartite if  is bipartite and a digraph G is planar if  is planar.

A digraph  is transitive if for every pair  and  of arcs with  the arc  also belongs to E. The transitive closure  of a digraph G has the same vertex set as G and for two distinct vertices  there is an arc  in  if and only if v is reachable from u in G.

2.3. Coloring undirected graphs
Definition 2.1 Graph coloring

An r-coloring of a graph  is a mapping  such that:

•
 for every .5

The chromatic number of G, denoted by , is the smallest integer r such that G has a r-coloring.
We consider the following decision problem.

Name
Chromatic Number (CN)

Instance
A graph  and a positive integer .

Question
Is there a r-coloring for G?

If r is a constant, i.e. not part of the input, the corresponding problem is denoted by r-Chromatic Number (
). Even on 4-regular planar graphs 
 is NP-complete [17].

It is well known that bipartite graphs are exactly the graphs which allow a 2-coloring and that planar graphs are graphs that allow a 4-coloring. On undirected co-graphs, the Chromatic Number problem is easy to solve by the following result proven by Corneil et al.:

Lemma 2.2

[11]
Let 
 and 
 be two vertex-disjoint graphs.

1.

2.

3.

Proposition 2.3

Let G be a co-graph. Then,  can be computed in linear time.

Coloring a graph  can be done by a greedy algorithm. For some given ordering π of V, the vertices are ordered as a sequence in which each vertex is assigned to the minimum possible value that is not forbidden by the colors of its neighbors, see Algorithm 1. Obviously, different orders can lead to different numbers of colors. But there is always an ordering yielding to the minimum number of colors, which is hard to find in general.

Algorithm 1
Download : Download high-res image (47KB)
Download : Download full-size image
Algorithm 1. Greedy Coloring.

The class of perfectly orderable graphs consists of those graphs for which the given greedy algorithm leads to an ordering yielding to an optimal coloring, not only for the graph itself but also for all of its induced subgraphs.

Definition 2.4

Perfectly orderable graph [10]
Let  be a graph. A linear ordering on V is perfect if a greedy coloring algorithm with that ordering optimally colors every induced subgraph of G. A graph G is perfectly orderable if it admits a perfect order.

Theorem 2.5

[10]
A linear ordering π of a graph G is perfect if and only if there is no induced
 in G such that , , and .

Example 2.6

Every co-graph is perfectly orderable, since it does not have any induced 
.

The Chromatic Number problem can be solved by an FPT-algorithm w.r.t. the tree-width of the input graph [44]. In contrast, this is not true for clique-width, since it has been shown in [26], that the Chromatic Number problem is -hard w.r.t. the clique-width of the input graph. That is, under reasonable assumptions an XP-algorithm is the best one can hope for. Such algorithms are known, see [24], [51].

In order to show fixed parameter tractability for r-Chromatic Number w.r.t. the parameter clique-width one can use its defineability within monadic second order logic [12].

2.4. Coloring oriented graphs
Oriented graph coloring has been introduced by Courcelle [14] in 1994. We consider oriented graph coloring on oriented graphs, i.e. digraphs with no loops and no opposite arcs.

Definition 2.7

Oriented graph coloring [14]
An oriented r-coloring of an oriented graph  is a mapping  such that:

•
 for every ,

•
 for every two arcs  and  with .

The oriented chromatic number of G, denoted by 
, is the smallest integer r such that G has an oriented r-coloring. The vertex sets 
, with , divide V into a partition of so called color classes.
For two oriented graphs 
 and 
 a homomorphism from 
 to 
, 
 for short, is a mapping 
 such that 
 implies 
. A homomorphism from 
 to 
 can be regarded as an oriented coloring of 
 that uses the vertices of 
 as colors classes. Therefore, digraph 
 is called the color graph of 
. This leads to equivalent definitions for the oriented coloring and the oriented chromatic number. There is an oriented r-coloring of an oriented graph 
 if and only if there is a homomorphism from 
 to some oriented graph 
 with r vertices. Thus, the oriented chromatic number of 
 is the minimum number of vertices in an oriented graph 
 such that there is a homomorphism from 
 to 
. Obviously, it is possible to choose 
 as a tournament.

Observation 2.8

There is an oriented r-coloring of an oriented graph 
 if and only if there is a homomorphism from 
 to some tournament 
 with r vertices. Further, the oriented chromatic number of 
 is the minimum number of vertices in a tournament 
 such that there is a homomorphism from 
 to 
.

Observation 2.9

Let G be an oriented graph. Then, it holds that 
.

On the other hand it is not possible to bound the oriented chromatic number of an oriented graph G by a function of the (undirected) chromatic number of . This has been shown in [64, Section 3] by an orientation 
 of a 
 satisfying 
 and 
.

Lemma 2.10

Let G be an oriented graph and H be a subdigraph of G. Then, an oriented r-coloring of G leads also an oriented r-coloring for H.

Corollary 2.11

Let G be an oriented graph and H be a subdigraph of G. Then, it holds that 
.

Example 2.12

For oriented paths and oriented cycles we know: 
, 
, 
 
, 
 
.

An oriented graph  is an oriented clique (o-clique) if 
. Thus all graphs given in Example 2.12 are oriented cliques. Further by Observation 2.9 every tournament is an oriented clique. Thus, for DAGs the oriented chromatic number is unbounded.

We consider the following decision problem.

Name
Oriented Chromatic Number (OCN)

Instance
An oriented graph  and a positive integer .

Question
Is there an oriented r-coloring for G?

If r is constant, i.e. not part of the input, the corresponding problem is denoted by r-Oriented Chromatic Number (
). If , then 
 can be decided in polynomial time, while 
 is NP-complete [50]. 
 is even known to be NP-complete for several restricted classes of digraphs, e.g. for bounded degree DAGs [7], bounded degree bipartite oriented graph [7], graphs with K-width 1 and DAG-depth 3 [29], DAGs of K-width 3 and DAG-depth 5 [30], digraphs of DAG-width 2, K-width 1 and DAG-depth 3 [30], and acyclic oriented graphs whose underlying graph is connected, planar, bipartite and has maximum degree 3 [9].

Up to now, the definition of oriented coloring was frequently applied to undirected graphs. For an undirected graph G the maximum value 
 of all possible orientations 
 of G is considered. In this sense, every tree has oriented chromatic number at most 3 and every cycle 
 has oriented chromatic number at most 5. Further, any orientation of a graph with maximum degree three has oriented chromatic number at most 9 and any orientation of a graph with maximum degree four has oriented chromatic number at most 69, see [20]. For several further graph classes there exist bounds on the oriented chromatic number. Among these are outerplanar graphs [63], Halin graphs [22], and planar graphs [57]. See [64] for a survey.

To advance research in this field, we consider oriented graph coloring on recursively defined oriented graph classes.

3. Coloring transitive acyclic digraphs
In this section we will use the concept of perfectly orderable graphs and Theorem 2.5 in order to find oriented colorings of transitive acyclic digraphs.

Theorem 3.1

Let G be a transitive acyclic digraph. Then, every greedy coloring along a topological ordering of G leads to an optimal oriented coloring of G and 
 can be computed in linear time.

Proof

Let G be a transitive acyclic digraph. Since  is acyclic there is a topological ordering t for G. Since G is transitive, it does not contain the following orientation of a 
 as an induced subdigraph. By Theorem 2.5 every linear ordering and thus also t is perfect on the vertex set of graph 
. Let  be a coloring for  obtained by the greedy algorithm (Algorithm 1) for t on V. We show that c is an oriented coloring for G by verifying the two properties of Definition 2.7.

•
Property  holds for every  since  holds for every 
.

•
Property  for every two arcs  and  with  holds by the following argumentation.

Assume there is an arc 
 with 
 in t but 
. Then, when coloring 
 we would have taken 
 if possible, as we always take the minimum possible color value. Since this was not possible there must have been an other vertex 
 which was colored before 
 with 
 and 
. But if 
 and 
, due to transitivity it must also hold that 
 and consequently, 
 is not possible. Thus, the assumption was wrong and for every arc 
 with 
 in t it must hold that 
.

The optimality of oriented coloring c follows since the lower bound of Observation 2.9 is achieved. □
In order to state the next result, let  be the number of vertices in a largest clique in the (undirected) graph G.

Corollary 3.2

Let G be a transitive acyclic digraph. Then, it holds that
 and all three values can be computed in linear time.

For some oriented graph G we denote by  the length of a longest oriented path in G.

Proposition 3.3

Let G be a transitive acyclic digraph. Then, it holds that 
.

Proof

The proof of Theorem 3.1 leads to an optimal oriented coloring using  colors. □

Next, we consider oriented colorings of oriented graphs with bounded vertex degree. For every oriented graph the oriented chromatic number can be bounded (exponentially) by its maximum vertex degree Δ [53]. For small vertex degrees  there are better bounds in [23], [21].

Corollary 3.4

Let G be a transitive acyclic digraph. Then, it holds that 
.

Proof

Let G be a transitive acyclic digraph. By Proposition 3.3 and the fact that the first vertex of a longest path within a transitive digraph G has outdegree at least , it follows that the oriented chromatic number of G can be estimated by 
. □

Proposition 3.5

Let G be an acyclic digraph. Then, it holds that 
.

Proof

Let G be an acyclic digraph and 
 its transitive closure. Using Corollary 2.11 and Proposition 3.3 we know that 
. □

Now, we consider oriented graph coloring on recursively defined oriented graph classes.

4. Coloring oriented co-graphs
We recall operations which have been considered by Bechet et al. in [1]. Let 
 and 
 be two vertex-disjoint digraphs.

•
The disjoint union of 
 and 
, denoted by 
, is the digraph with vertex set 
 and arc set 
.

•
The order composition of 
 and 
, denoted by 
, is defined by their disjoint union plus all possible arcs from vertices of 
 to vertices of 
.

By omitting the series composition within the definition of directed co-graphs in [15], we obtain the class of all oriented co-graphs.

Definition 4.1 Oriented co-graphs

The class of oriented complement reducible graphs, oriented co-graphs for short, is recursively defined as follows.

1.
Every digraph on a single vertex , denoted by v, is an oriented co-graph.

2.
If 
 and 
 are two vertex-disjoint oriented co-graphs, then

(a)
the disjoint union 
, and

(b)
the order composition 
 are oriented co-graphs.

The class of oriented co-graphs is denoted by OC.
Every expression X using the operations of Definition 4.1 is called a di-co-expression. Example 4.2 illustrates these notations.

Example 4.2

Several classes of digraphs are included in the set of all oriented co-graphs.

Proposition 4.3

Every transitive tournament is an oriented co-graph.

Proposition 4.4

Every oriented bipartite graph 
 
 is an oriented co-graph.

The set of all oriented co-graphs is closed under taking induced subdigraphs. Using the notations of [67] we denote the following orientation of a 
 as the N graph. The class of oriented co-graphs can be characterized by excluding the four forbidden induced subdigraphs 
, 
, 
 
, and N, see [40]. The class of oriented co-graphs has already been analyzed by Lawler in [54] and Corneil et al. in [11] using the notation of transitive series-parallel (TSP) digraphs.

For every oriented co-graph we can define a tree structure, denoted as di-co-tree. The leaves of the di-co-tree represent the vertices of the digraph and the inner vertices of the di-co-tree correspond to the operations applied on the subexpressions defined by the subtrees. For every oriented co-graph one can construct a di-co-tree in linear time, see [15]. Oriented co-graphs are a subclass of directed co-graphs [15] and both classes are interesting from an algorithmic point of view since several hard graph problems can be solved in polynomial time by dynamic programming along the tree structure of the input graph, see [61], [5], [46], [42], [35], [36], [32], [38].

Lemma 4.5

[36]
Let 
 and 
 be two vertex-disjoint oriented co-graphs. Then, the following equations hold.

1.

2.

3.

Theorem 4.6

[36]
Let G be an oriented co-graph. Then, an optimal oriented coloring for G and 
 can be computed in linear time.

The result in [36] concerning the oriented coloring on oriented co-graphs is based on a dynamic programming along a di-co-tree for the given oriented co-graph as input. Since every oriented co-graph is transitive and acyclic, Theorem 3.1 leads to the next result, which re-proves Theorem 4.6.

Corollary 4.7

Let G be an oriented co-graph. Then, every greedy coloring along a topological ordering of G leads to an optimal oriented coloring of G and 
 can be computed in linear time.

Theorem 3.1 is more general than Corollary 4.7 since it does not exclude N which is a forbidden induced subdigraph for oriented co-graphs. It holds that
 
 
 and 
 
 is equivalent to the set of all acyclic transitive digraphs.

Since every oriented co-graph is transitive and acyclic, Corollary 3.4 leads to the following bound.

Corollary 4.8

Let G be an oriented co-digraph. Then, it holds that 
.

There are classes of oriented co-graphs, e.g., the class of all 
 
, for which the oriented chromatic number is even bounded by a constant and thus smaller than the shown bound. The set of all transitive tournaments shows that the bound given in Corollary 4.8 is best possible.

5. Coloring msp-digraphs
We recall the definitions from [4] which are based on [67]. First, we introduce two operations for two vertex-disjoint digraphs 
 and 
. Let 
 be the set of vertices of outdegree 0 (set of sinks) in 
 and 
 be the set of vertices of indegree 0 (set of sources) in 
.

•
The parallel composition of 
 and 
, denoted by 
, is the digraph with vertex set 
 and arc set 
.

•
The series composition of 
 and 
, denoted by 
 is the digraph with vertex set 
 and arc set 
.

Definition 5.1 Msp-digraphs

The class of minimal series-parallel digraphs, msp-digraphs for short, is recursively defined as follows.

1.
Every digraph on a single vertex , denoted by v, is a minimal series-parallel digraph.

2.
If 
 and 
 are vertex-disjoint minimal series-parallel digraphs then,

(a)
the parallel composition 
 and

(b)
then series composition 
 are minimal series-parallel digraphs.

The class of minimal series-parallel digraphs is denoted as MSP.
Minimal (vertex) series-parallel digraphs are the line digraphs of edge series-parallel digraphs [67], which are an oriented version of the well known class of series-parallel graphs.

Every expression X using the operations of Definition 5.1 is called an msp-expression. The digraph defined by the expression X is denoted by . We illustrate this by two expressions which we will refer to later.

Example 5.2

By removing vertex 
 from 
 in Example 5.2, we obtain an oriented graph which is no msp-digraph. This implies that the set of all msp-digraphs is not closed under taking induced subdigraphs.

A further remarkable property of msp-digraphs is that the oriented chromatic number of the disjoint union of two msp-digraphs can be larger than the maximum oriented chromatic number of the involved digraphs. This follows by the digraphs defined by expressions 
 and 
 in Example 5.3, which both have oriented chromatic number 4 but their disjoint union leads to a digraph with oriented chromatic number 5.

Example 5.3

In the following two msp-expressions we assume that the series composition × binds more strongly than the parallel composition ∪.

Several classes of digraphs are included in the set of all msp-digraphs.

Proposition 5.4

Every in- and out-rooted tree is an msp-digraph.

Proposition 5.5

Every oriented bipartite graph 
 
 is an msp-digraph.

For every msp-digraph we can define a tree structure T, which is denoted as msp-tree. (In [67], the tree-structure for an msp-digraphs is denoted as binary decomposition tree.) The leaves of an msp-tree represent the vertices of the digraph and the inner vertices of the msp-tree correspond to the operations applied on the subexpressions defined by the subtrees. For every msp-digraph one can construct an msp-tree in linear time, see [67].

Next we want to give an algorithm to compute the oriented chromatic number of an msp-digraph. Considering the solutions of Sections 3 and 4 we conclude that a greedy coloring of  along a topological ordering of G does not work for computing the oriented chromatic number of an msp-digraph G. An oriented path would be colored by only two colors which is not an admitted oriented coloring. Further, a dynamic programming solution using similar formulas to Lemma 4.5 is not possible for computing the oriented chromatic number of msp-digraphs. Example 5.3 implies that the oriented chromatic number of the disjoint union of two msp-digraphs can be larger than the maximum oriented chromatic number of the involved digraphs.

In order to give an algorithm to compute the oriented chromatic number of msp-digraphs, we first show that this value can be bounded by a constant.

The class of undirected series-parallel graphs was considered in [63] by showing that every orientation of a series-parallel graph has oriented chromatic number at most 7. This bound can not be applied to msp-digraphs, since the set of all 
 
 is a subset of msp-digraphs and the underlying graphs are even of unbounded tree-width [6] and thus, no series-parallel graphs.

Nevertheless, we can show that 7 is also an upper bound for the oriented chromatic number of msp-digraphs. Therefore we introduce recursively defined oriented graphs 
.

Lemma 5.6

We recursively define oriented digraphs 
 as follows. 
 is a single vertex graph and for  we define
 Then, every msp-digraph G is a (-n induced) subdigraph of some 
 such that every source in G is a source in 
 and every sink in G is a sink in 
.

Proof

The lemma can be shown by induction over the number of vertices in some msp-digraph G. If G has exactly one vertex, the claim holds true by choosing 
.

Next, assume that G has  vertices. Then, it holds that 
 for some  and 
 and 
 are msp-digraphs with less than k vertices. By the induction hypothesis we conclude that there are two integers 
 and 
 such that digraph 
 is a subdigraph of digraph 
. (If , it is important that every sink in 
 is a sink in 
 and every source in 
 is a source in 
.) Thus, G is a subdigraph of digraph 
. W.l.o.g. we assume that 
. By construction it follows that 
 is a subdigraph of 
. Consequently, G is a subdigraph of digraph 
 and every source in G is a source in 
 and every sink in G is a sink in 
. This completes the proof of the claim. □

Theorem 5.7

Let G be an msp-digraph. Then, it holds that 
.

Proof

By Lemma 2.10 we can show the theorem by coloring the digraphs 
 defined in Lemma 5.6. Further, the first two occurrences of 
 in 
 can be colored in the same way. Thus, we can restrict to oriented graphs 
 which are defined as follows. 
 is a single vertex graph and for  we define

We define an oriented 7-coloring c for 
 as follows. For some vertex v of 
 we define by  the color of v in 
. First, we color 
 by assigning color 0 to the single vertex in 
.6 For  we define the colors for the vertices v in 
 according to the three copies of 
 in 
 (numbered from left to right). Therefore, we use the two functions  and . We define
 

It remains to show that c leads to an oriented coloring for 
. Let 
 with 
 and 
 be the color graph of 
. By the definition of 
 we follow that 
  In order to ensure an oriented coloring of 
, we verify that 
 is an oriented graph. In Fig. 4 the color graph 
 for  is given.

Fig. 4
Download : Download high-res image (32KB)
Download : Download full-size image
Fig. 4. Color graph Ci for i ≥ 5 used in the proof of Theorem 5.7, which is also known as the Paley tournament of order 7.

Every source in 
 is colored by 0 since . Every sink in 
 is colored by 0, 1, or 5 since , , and .

Consequently, the arcs of
 belong to the set For every  we know that(1) which implies  and thus, (1) does not hold for the reverse arcs of . It remains to show that (1) remains true for all arcs  when applying p and q to 
: 
  Since  leads to , the result follows. □

Digraph G on 27 vertices defined by expression X in Example 5.8 satisfies 
, which was found by a computer program.7 This implies that the bound of Theorem 5.7 is best possible.

Example 5.8

In the following msp-expression we assume that the series composition × binds more strongly than the parallel composition ∪. 
 

In oder to compute the oriented chromatic number of an msp-digraph G defined by an msp-expression X, we recursively compute the set  of all triples  such that H is a color graph for G, where L and R are the sets of colors of all sinks and all sources in G with respect to the coloring by H. The number of vertex labeled oriented graphs8 on n vertices is 
. By Theorem 5.7 we can conclude that
 which is independent of the size of G.

For two color graphs 
 and 
 we define 
.

Lemma 5.9

1.
For every  it holds .

2.
For every two msp-expressions 
 and 
 we obtain set 
 from sets 
 and 
 as follows. For every 
 and every 
 such that graph 
 is oriented, we put 
 into 
.

3.
For every two msp-expressions 
 and 
 we obtain set 
 from sets 
 and 
 as follows. For every 
 and every 
 such that graph 
 together with the arcs in 
 is oriented, we put 
 into 
.

Proof

1.
Set  includes obviously all possible solutions to color every vertex on its own with the seven given colors.

2.
Let 
 be any possible solution for coloring 
, which therefore is included in 
, as well as a possible solution 
 for coloring 
 which is included in 
. Let further 
 be an oriented graph. Since the operation ∪ creates no additional edges in 
, the vertices of 
 can still be colored with 
 and the vertices of 
 can still be colored with 
 such that all vertices from 
 are legally colored. Further, all sinks in 
 and 
 are also sinks in 
. The same holds for the sources. For an oriented digraph 
 this leads to 
.

Let 
, then there is an induced subdigraph 
 of the color graph H which colors 
, an induced subdigraph of 
. Since H is oriented, 
 is oriented. Let 
 be the sources with vertices in 
 and 
 be the sinks for vertices in 
. Then, it holds that 
. The same arguments hold for 
, such that 
.

3.
Let 
 be any possible solution for coloring 
, which therefore is included in 
, as well as a possible solution 
 for coloring 
 which is included in 
. Further, let 
 together with edges from 
 be an oriented graph. Then, 
 is an oriented coloring for 
. Since the sinks of 
 are connected with the sources of 
 in  the sources of 
 are the only sources left in  as well as the sinks in 
 are the only sinks left in . This leads to 
.

Let 
, then there is an induced subdigraph 
 of the color graph H which colors 
 which is an induced subdigraph of 
. Since H is oriented, 
 is also oriented. Since all the sources of 
 are in 
 it holds that 
 are also sources of 
. Let 
 be the vertices in 
 which only have out-going neighbors in 
 but not in 
, then 
 are the sinks of 
. Thus, it holds that 
. Simultaneously, there is an induced subdigraph 
 of the color graph H which colors 
 which is an induced subdigraph of 
. Since H is oriented, 
 is also oriented. Since all the sinks of 
 are in 
 it holds that 
 are also sinks of 
. Let 
 be the vertices in 
 which only have in-going neighbors in 
 but not in 
, then 
 are the sources of 
. Thus, it holds that 
.

This shows the statements of the lemma. □
Since every possible coloring of G is part of the set , where X is an msp-expression for G, it is possible to find a minimum coloring for G.

Corollary 5.10

There is an oriented r-coloring for some msp-digraph G which is given by some msp-expression X if and only if there is some  such that color graph H has r vertices. Therefore, 
.

Theorem 5.11

Let G be an msp-digraph. Then, the oriented chromatic number of G can be computed in linear time.

Proof

Let G be an msp-digraph on n vertices and m edges. Further, let T be an msp-tree for G with root r. For some vertex u of T we denote by 
 the subtree rooted at u and 
 the msp-expression defined by 
.

In order to solve the Oriented Chromatic Number problem for some msp-digraph G, we traverse msp-tree T in a bottom-up order. For every vertex u of T we compute 
 following the rules given in Lemma 5.9. By Corollary 5.10 we can solve our problem by 
.

An msp-tree T can be computed in  time from msp-digraph G, see [67]. Our rules given in Lemma 5.9 show the following running times.

•
For every vertex  set  is computable in  time.

•
For every two msp-expressions 
 and 
 set 
 can be computed in  time from 
 and 
.

•
For every two msp-expressions 
 and 
 set 
 can be computed in  time from 
 and 
.

Since we have n leaves and  inner vertices in msp-tree T, the running time is in . □
Due Corollary 3.2 we know that for every oriented co-graph G it holds that 
. This equality does not hold for msp-digraphs by Example 5.8 and the next result.

Proposition 5.12

Let G be an msp-digraph. Then, it holds that .

Proof

We show the result by giving a 3-coloring c of 
 for the oriented graphs 
 defined in Lemma 5.6. For some vertex v of 
 we define by  the color of v in 
. First we color 
 by assigning color 0 to the single vertex in 
. For  we define the colors for the vertices v in 
 according to the three copies of 
 in 
 (numbered from left to right). Therefore, we use the two functions  and . We define
 

In order to show the correctness of the given coloring for 
 by Definition 2.1 it suffices to verify that the end vertices of every edge in 
 are colored differently. This follows since differently labeled endvertices remain labeled differently when applying the permutations by p and q. Further, every edge  in 
 arises from some arc  in 
 defined by the series composition and satisfies  and  or  and . This holds true since before applying the permutations by p and q all sources w are labeled by  and all sinks v are labeled by  or . □

For expression 
 given in Example 5.2 we obtain by 
 a cycle on five vertices 
 of chromatic number 3, which implies that the bound of Proposition 5.12 is sharp. In [34] we introduced the concept of g-oriented r-colorings which generalizes both oriented colorings and colorings of the underlying undirected graph.

6. Parameterized results
A parameterized problem is a pair , where Π is a decision problem,  the set of all instances of Π and  a so-called parameterization. The idea of parameterized algorithms is to restrict the combinatorial explosion to a parameter  that is expected to be small for all inputs .

An algorithm A is an FPT-algorithm with respect to κ, if there is a computable function  such that for every instance  the running time of A on I is at most 
 or equivalently at most 
. If there is an FPT-algorithm with respect to κ that decides Π then Π is called fixed-parameter tractable. FPT is the class of all parameterized problems which can be solved by an FPT-algorithm.

An algorithm A is an XP-algorithm with respect to κ, if there are two computable functions  such that for every instance  the running time of A on I is at most 
. If there is an XP-algorithm with respect to κ which decides Π then Π is called slicewise polynomial. XP is the class of all parameterized problems which can be solved by an XP-algorithm.

In order to show fixed-parameter intractability, it is useful to show the hardness with respect to one of the classes  for some , which were introduced by Downey and Fellows [18] in terms of weighted satisfiability problems on classes of circuits. The relations are called W-hierarchy and all inclusions are assumed to be strict.

In the case of hardness with respect to some parameter κ a natural question is whether the problem remains hard for combined parameters, i.e. parameters 
 that consists of  parts of the input. The given notations can be carried over to combined parameters, e.g. an FPT-algorithm with respect to 
 is an algorithm of running time 
 for some computable function 
 depending only on 
.

For several problems the standard parameter, i.e. the threshold value given in the instance, is very useful. Unfortunately, for the Oriented Chromatic Number problem the standard parameter is the number of necessary colors and does even not allow an XP-algorithm, since 
 is NP-complete [50].

Corollary 6.1

The Oriented Chromatic Number problem is not in XP when parameterized by r, unless .

From an algorithmic point of view so called so-called structural parameters, which are measuring the difficulty of decomposing a graph into a special tree-structure, are interesting.

For undirected graphs the clique-width [13] and tree-width [62] are the most important structural parameters. Clique-width is more general than tree-width since graphs of bounded tree-width have also bounded clique-width [16]. Conversely, the tree-width can only be bounded by the clique-width under certain conditions [47]. A lot of NP-hard graph problems admit polynomial-time solutions when restricted to graphs of bounded tree-width or graphs of bounded clique-width [24].

For directed graphs there are several attempts to generalize tree-width such as directed tree-width, directed path-width, DAG-width, or Kelly-width, which are representative for what people are working on, see the surveys [30], [31]. Unfortunately, none of these attempts allows polynomial-time algorithms for a large class of problems on digraphs of bounded width. This also holds for 
 and OCN by the following section.

6.1. Parameterization by directed tree-width and related parameters
As mentioned above, for  the r-Oriented Chromatic Number problem is hard on DAGs [7]. An XP-algorithm with respect to parameters directed tree-width, directed path-width, Kelly-width, and DAG-width of the input digraph would imply a polynomial time algorithm for every fixed parameter, but even for parameter values 0 or 1 the problems are NP-hard, since DAGs have width 0 or 1 for these parameters.

Corollary 6.2

The Oriented Chromatic Number problem and for every positive integer  the r-Oriented Chromatic Number problem is not in XP when parameterized by directed tree-width, directed path-width, Kelly-width, or DAG-width, unless .

6.2. Parameterization by directed clique-width
By [30], directed clique-width performs much better than directed path-width, directed tree-width, DAG-width, and Kelly-width from the parameterized complexity point of view. Hence, we consider the parameterized complexity of OCN parameterized by directed clique-width. The directed clique-width of digraphs has been defined by Courcelle and Olariu [13] as follows.

Definition 6.3

Directed clique-width [13]
The directed clique-width of a digraph G,  for short, is the minimum number of labels needed to define G using the following four operations:

1.
Creation of a new vertex v with label a (denoted by ).

2.
Disjoint union of two labeled digraphs G and H (denoted by ).

3.
Inserting an arc from every vertex with label a to every vertex with label b (, denoted by 
).

4.
Change label a into label b (denoted by 
).

An expression X built with the operations defined above using k labels is called a directed clique-width k-expression. Let  be the digraph defined by k-expression X.
A class of graphs  has bounded directed clique-width if there is some integer k such that every graph in  has directed clique-width at most k.

Proposition 6.4

Every oriented co-graph has directed clique-width at most 2.

Proof

We next show how to give a directed clique-width 2-expression for some oriented co-graph G given by some di-co-expression. The vertices of G are labeled by a and within an order composition we relabel the vertices of one involved subgraph to b. The following three expressions recursively allow to give a directed clique-width 2-expression X for G.

•
If , then .

•
If 
, such that 
 and 
 are defined by a directed clique-width 2-expression 
 and 
, respectively, then we obtain a directed clique-width 2-expression for G by 
.

•
If 
, such that 
 and 
 are defined by a directed clique-width 2-expression 
 and 
, respectively, then we obtain a directed clique-width 2-expression for G by

This shows the statements of the proposition. □
In [40] the set of oriented co-graphs is characterized by excluding 
 as a proper subset of the set of all graphs of directed clique-width 2, while for the undirected versions both classes are equal [13].

Proposition 6.5

Every msp-digraph has directed clique-width at most 7.

Proof

We next show how to give a directed clique-width 7-expression for some msp-digraph G given by some msp-expression. Therefore we use the following four labels for the vertices of G:

•
All vertices which are source and sink in G are labeled by a.

•
All vertices which are sink (and no source) in G are labeled by b.

•
All vertices which are source (and no sink) in G are labeled by c.

•
All vertices which are no sink and no source in G are labeled by d.

Furthermore, we use three auxiliary labels 
 to distinguish the sinks and sources of the two combined graphs within a series composition.
The following three expressions recursively allow to give a directed clique-width 7-expression X for G.

•
If , then .

•
If 
, such that 
 and 
 are defined by a directed clique-width 7-expression 
 and 
, respectively, then we obtain a directed clique-width 7-expression for G by 
.

•
If 
, such that 
 and 
 are defined by a directed clique-width 7-expression 
 and 
, respectively, then we obtain a directed clique-width 7-expression for G by
 where 
 relabels all sources and sinks in 
 to the corresponding auxiliary labels, 
 relabels all sources and sinks in 
 to the corresponding original labels, and 
 inserts the edges of the series composition between 
 and 
.

This shows the statements of the proposition. □
By the given definition every graph of directed clique-width at most k can be represented by a tree structure, denoted as k-expression-tree. The leaves of the k-expression-tree represent the vertices of the digraph and the inner nodes of the k-expression-tree correspond to the operations applied to the subexpressions defined by the subtrees. Using the k-expression-tree many hard problems have been shown to be solvable in polynomial time when restricted to graphs of bounded directed clique-width [48], [30].

In order to show fixed parameter tractability for 
 w.r.t. the parameter directed clique-width one can use its defineability within monadic second order logic (MSO). We restrict to 
-logic, which allows propositional logic, variables for vertices and vertex sets of digraphs, the predicate  for arcs of digraphs, and quantifications over vertices and vertex sets [8]. For defining optimization problems we use the 
 framework given in [12].

The following theorem is from [30, Theorem 4.2].

Theorem 6.6

[30]
For every integer k and 
 formula ψ, every ψ-
 optimization problem is fixed-parameter tractable on digraphs of directed clique-width k, with the parameters k and .

In [30, Proposition 4.19] the following monadic second order logic formula ψ for 
 is given.

Remark 6.7

Let  be an oriented graph. We can define 
 by the 
 formula
 
 
 where the vertices of set 
 are mapped onto vertex i of an orientation of a complete graph 
.

Since for the length of the given formula ψ it holds  by Theorem 6.6 we obtain the following result.

Corollary 6.8

The Oriented Chromatic Number problem is fixed parameter tractable on digraphs of directed clique-width k, with the parameters k and r.

By Corollary 6.8 we know the existence of an FPT-algorithm for the Oriented Chromatic Number problem w.r.t. the combined parameter of directed clique-width and standard parameter. Next we give such an algorithm and estimate its running time.

In order to compute the oriented chromatic number of some oriented graph G of oriented chromatic number at most r which is defined by some directed k-clique-width expression X we extend our solution given for msp-digraphs in Section 4. Therefore, we recursively compute the set  of all labeled color graphs  on . Every vertex  is labeled by set  consisting of all clique-width labels of the vertices in G with color c. The number of vertex labeled oriented graphs on n vertices is 
. Since for every  there at most 
 label sets L, we can conclude
 which is independent on the size of G.

For two color graphs 
 and 
 we define 
 as follows. Vertex set V is obtained from 
 by merging the label sets of vertices for the same color. Formally, for every  we consider all 
 and replace them by 
. Edge set E is obtained by 
.

Lemma 6.9

1.
For every  it holds .

2.
For every two k-expressions 
 and 
 we obtain set 
 from sets 
 and 
 as follows. For every 
 and every 
 such that graph 
 is oriented we put 
 into 
.

3.
Set 
 can be obtained from  as follows. First we remove from  all color graphs  such that there is some 
 and some 
 such that 
 and 
 and 
. Afterwards we modify every color graph  in  as follows. If there is some 
 and some 
 such that 
 and 
 we insert 
 into E. The resulting set is 
.

4.
It holds that 
. Here we use 
, 
, 
, 
, if  and 
, if , and 
.

Proof

1.
Set  includes obviously all possible solutions to color every vertex on its own with the r given colors.

2.
Similar to (2.) of Lemma 5.9.

3.
Let 
 be the set obtained from  using the modifications given in the lemma. We next show that 
. Let  be some color graph for . The modifications of H given in the lemma either remove H or lead to a color graph for 
. Thus, it holds that 
. Next, let 
 be some color graph for 
. Then we can assume, that there is some 
 and some 
 such that 
 and 
 and 
. Since the edge insertion 
 does not change the vertices or clique-width labels there is some color graph 
 for  such that 
 is a subgraph of H in which the edge 
 can be missing. The modifications of 
 given in the lemma insert the edge 
 into 
 which implies that H is in 
.

4.
The relabeling 
 can change the labels but not the structure of . Thus, for every color graph  in  for every vertex  we have to change the set  of clique-width labels according to the performed relabeling operation 
, which is done by the rules given in the lemma.

This shows the statements of the lemma. □
Since every possible coloring of G is part of the set , where X is a directed k-clique-width expression for G, it is possible to find a minimum coloring for G.

Corollary 6.10

Let  be an oriented graph given by a directed clique-width k-expression X. There is an oriented r-coloring for G if and only if there is some  which has r vertices. Therefore, 
.

Theorem 6.11

The Oriented Chromatic Number problem on digraphs on n vertices given by a directed clique-width k-expression can be solved in 
 time.

Proof

Let  be a digraph of directed clique-width at most k and T be a k-expression-tree for G with root w. For some vertex u of T we denote by 
 the subtree rooted at u and 
 the k-expression defined by 
. In order to solve the Oriented Chromatic Number problem for G, we traverse k-expression-tree T in a bottom-up order. For every vertex u of T we compute 
 following the rules given in Lemma 6.9. By Corollary 6.10 we can solve our problem by 
.

Our rules given Lemma 6.9 show the following running times. For every  and  set  can be computed in . The set  can be computed in time 
 from  and . The sets 
 and 
 can be computed in time 
 from .

In order to bound the number and order of operations within directed clique-width expressions, we can use the normal form for clique-width expressions defined in [25]. The proof of Theorem 4.2 in [25] shows that also for directed clique-width expression X, we can assume that for every subexpression, after a disjoint union operation first there is a sequence of edge insertion operations followed by a sequence of relabeling operations, i.e. between two disjoint union operations there is no relabeling before an edge insertion. Since there are n leaves in T, we have  disjoint union operations, at most  relabeling operations, and at most  edge insertion operations. This leads to an overall running time of 
. □

Up to now there are only very few digraph classes for which we can compute a directed clique-width expression in polynomial time. This holds for directed co-graphs, digraphs of bounded directed modular width, orientations of trees, and directed cactus forests. For such classes we can apply the result of Theorem 6.11. In order to find directed clique-width expressions for general digraphs one can use results on the related parameter bi-rank-width [52]. By [4, Lemma 9.9.12] we can use approximate directed clique-width expressions obtained from rank-decomposition with the drawback of a single-exponential blow-up on the parameter.

If we restrict to some constant value of r the running time of Theorem 6.11 leads to the following result, which reproves a result shown in [30] using Theorem 6.6.

Corollary 6.12

For every integer r the r-Oriented Chromatic Number problem is in FPT when parameterized by directed clique-width.

Corollary 6.13

For every class of graphs of bounded directed clique-width and every positive integer r the r-Oriented Chromatic Number problem can be solved in polynomial time.

By Proposition 6.4, Proposition 6.5 we know that on oriented co-graphs and msp-digraphs for every positive integer r the r-Oriented Chromatic Number problem can be solved in polynomial time. Comparing this to Corollary 4.7 and Theorem 5.11 we have shown more general solutions before.

If we restrict to some constant value of k the running time of Theorem 6.11 leads to the following result.

Corollary 6.14

For every class of graphs of bounded directed clique-width the Oriented Chromatic Number problem is in FPT when parameterized by r.

6.3. Parameterization by directed modular-width
Next, we discuss parameterization of OCN and 
 w.r.t. the parameter directed modular-width (dmw). Directed modular-width was introduced and applied to the Acyclic Chromatic Number problem in [65], [66].

A class of graphs  has bounded directed modular-width if there is some integer k such that every graph in  has directed modular-width at most k.

Proposition 6.15

[66]
Every (directed and thus every) oriented co-graph has directed modular width 2.

The relation of directed clique-width and directed modular width is as follows.

Lemma 6.16

[66]
For every digraph G it holds that .

On the other hand, there exist several classes of digraphs of bounded directed clique-width and unbounded directed modular width, e.g. the set of all oriented paths 
 
, the set of all oriented cycles 
 
, and the set of all msp-digraphs. An advantage of directed modular width is that it can be computed efficiently [65], [66].

Lemma 6.16 and Corollary 6.12 lead to the following result.

Corollary 6.17

For every positive integer r the r-Oriented Chromatic Number problem is fixed parameter tractable w.r.t. the parameter directed modular-width.

Corollary 6.18

For every class of graphs of bounded directed modular-width and every positive integer r the r-Oriented Chromatic Number problem can be solved in polynomial time.

By Proposition 6.15 we conclude that on oriented co-graphs for every positive integer r the r-Oriented Chromatic Number problem can be solved in polynomial time. Comparing this to Corollary 4.7 we have shown a more general solution before.

6.4. Parameterization by the width of the underlying undirected graph
In [28], Ganian has shown an FPT-algorithm for OCN w.r.t. the parameter tree-width (of the underlying undirected graph). Further, he has shown that OCN is DET-hard for classes of oriented graphs, such that the underlying undirected class has bounded rank-width.

6.5. Parameterization by number of vertices
A positive result can be obtained for parameter “number of vertices” n. Since integer linear programming is fixed-parameter tractable for the parameter “number of variables” [55] the following binary integer program for OCN using 
 variables implies an FPT-algorithm for parameter n.

Remark 6.19

To formulate the Oriented Chromatic Number problem for some oriented graph  as a binary integer program, we introduce a binary variable 
, , such that 
 if and only if color j is used. Further we use 
 variables 
, , such that 
 if and only if vertex 
 receives color j. The main idea is to ensure the two conditions of Definition 2.7 within (4) and (5).(2)
 
 subject to(3)
 
(4)
(5)
 
 
(6)
(7)

Equations in (5) are not in propositional logic. In order to reformulate them for binary integer programming, one can use the results of [45].

Corollary 6.20

The Oriented Chromatic Number problem is in FPT when parameterized by the number of vertices n.

7. Conclusions and outlook
In this paper we considered oriented colorings of recursively defined digraphs. We used the concept of perfect orderable graphs in order to show that for acyclic transitive digraphs every greedy coloring along a topological ordering leads to an optimal oriented coloring, which generalizes a known dynamic programming solution for the Oriented Chromatic Number problem on oriented co-graphs in [36].

Further, we showed that every msp-digraph has oriented chromatic number at most 7, which is best possible. We applied this bound together with the recursive structure of msp-digraphs to give a linear time solution for computing the oriented chromatic number of msp-digraphs.

In Fig. 5 we summarize the relation of special graph classes considered in this work. Among these are directed acyclic graphs (DAGs), transitive directed acyclic graphs (transitive DAGs), series-parallel digraphs (SPD), minimal series-parallel digraphs (MSP), series-parallel order graphs (SPO), and oriented co-graphs (OC). The directed edges represent the existing relations between the graph classes, which follow by their definitions. For the relations to further graph classes we refer to [4, Figure 11.1].

Fig. 5
Download : Download high-res image (49KB)
Download : Download full-size image
Fig. 5. The figure shows the inclusions of special graph classes. A directed edge from class A to class B indicates that B ⊆ A. Two classes A and B are incomparable if there is neither a directed path from A to B, nor a directed path from B to A.

Furthermore we considered the parameterized complexity of the Oriented Chromatic Number problem by structural parameters, which are measuring the difficulty of decomposing a graph into a special tree-structure. The parameterized results of Corollary 6.8 and Corollary 6.12 also hold for any parameter which is larger or equal than directed clique-width directed linear clique-width [43]. Furthermore, restricted to semicomplete digraphs the shown parameterized solutions also hold for directed path-width [27, Lemma 2.14].

For future work it could be interesting to extend our solutions to further classes such as edge series-parallel digraphs [67]. The parameterized complexity of OCN w.r.t. the parameter directed clique-width remains open. Since the directed clique-width of a digraph is always greater or equal the undirected clique-width of the corresponding underlying undirected graph [48], the result of Ganian [28] does not imply a hardness result. Furthermore, the parameterized complexity of OCN w.r.t. structural parameter directed modular-width and of 
 w.r.t. parameter rank-width of  remains open (cf. Table 1).