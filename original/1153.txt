The well known Disjoint Paths problem is to decide if a graph contains k pairwise disjoint paths each connecting a different terminal pair from a set of k distinct vertex pairs. We determine with an exception of two cases the complexity of the Disjoint Paths problem for H free graphs. If k is fixed we obtain the k Disjoint Paths problem which is known to be polynomial time solvable on the class of all graphs for every k≥. The latter does no longer hold if we need to connect vertices from terminal sets instead of terminal pairs. We completely classify the complexity of k Disjoint Connected Subgraphs for H free graphs and give the same almost complete classification for Disjoint Connected Subgraphs for H free graphs as for Disjoint Paths. Moreover we give exact algorithms for Disjoint Paths and Disjoint Connected Subgraphs on graphs with n vertices and m edges that have running times of O nnk and O nkm respectively.

Keywords
Disjoint paths
H-free graphC
omplexity dichotomy

1. Introduction
A path from a vertex s to a vertex t in a graph G is an s-t path of G, and s and t are called its terminals. Two pairs 
 and 
 are disjoint if 
. In 1980, Shiloach [20] gave a polynomial-time algorithm for testing if a graph with disjoint terminal pairs 
 and 
 has vertex-disjoint paths 
 and 
 such that each 
 is an 
-
 path. This problem can be generalized as follows.

Image 1
Karp [12] proved that Disjoint Paths is NP-complete. If k is fixed, that is, not part of the input, then we denote the problem as k-Disjoint Paths. For every , Robertson and Seymour proved the following celebrated result.

Theorem 1

[19]
For all , k-Disjoint Paths is polynomial-time solvable.

The running time in Theorem 1 is cubic. This was later improved to quadratic time by Kawarabayashi, Kobayashi and Reed [13].

As Disjoint Paths is NP-complete, it is natural to consider special graph classes. The Disjoint Paths problem is known to be NP-complete even for graph of clique-width at most 6 [8], split graphs [9], interval graphs [16] and line graphs. The latter result can be obtained by a straightforward reduction (see, for example, [8], [9]) from its edge variant, Edge Disjoint Paths, proven to be NP-complete by Even, Itai and Shamir [5]. On the positive side, Disjoint Paths is polynomial-time solvable for cographs, or equivalently, 
-free graphs [8].

We can generalize the Disjoint Paths problem by considering terminal sets 
 instead of terminal pairs 
. We write  for the subgraph of a graph  induced by , where S is connected if  is connected.

Image 2
If k is fixed, then we write k-Disjoint Connected Subgraphs. We refer to Fig. 1 for a simple example of an instance 
 of 2-Disjoint Connected Subgraphs. Robertson and Seymour [19] proved in fact that k-Disjoint Connected Subgraphs is cubic-time solvable as long as 
 is fixed (this result implies Theorem 1). Otherwise, van 't Hof et al. [23] proved that already 2-Disjoint Connected Subgraphs is NP-complete even if 
 (and 
 may have arbitrarily large size). The same authors also proved that 2-Disjoint Connected Subgraphs is NP-complete for split graphs. Afterwards, Gray et al. [7] proved that 2-Disjoint Connected Subgraphs is NP-complete for planar graphs. Hence, Theorem 1 cannot be extended to hold for k-Disjoint Connected Subgraphs.

Fig. 1
Download : Download high-res image (14KB)
Download : Download full-size image
Fig. 1. An example of a yes-instance (G,Z1,Z2) of (2-)Disjoint Connected Subgraphs (left) together with a solution (right).

We note that in recent years a number of exact algorithms were designed for k-Disjoint Connected Subgraphs. Cygan et al. [4] gave an 
⁎
-time algorithm for the case  (see [18], [23] for faster exact algorithms for special graph classes). Telle and Villanger [21] improved this to time 
⁎
. Recently, Agrawal et al. [1] gave an 
⁎
-time algorithm for the case . Moreover, the 2-Disjoint Connected Subgraphs problem plays a crucial role in graph contractibility: a connected graph can be contracted to the 4-vertex path if and only if there exist two vertices u and v such that  is a yes-instance of 2-Disjoint Connected Subgraphs (see, e.g. [15], [23]).

A class of graphs that is closed under vertex deletion is called hereditary. Such a graph class can be characterized by a unique set  of minimal forbidden induced subgraphs. Hereditary graphs enable a systematic study of the complexity of a graph problem under input restrictions: by starting with the case where , we may already obtain more general methodology and a better understanding of the complexity of the problem. If , say  for some graph H, then we obtain the class of H-free graphs, that is, the class of graphs that do not contain H as an induced subgraph (so, an H-free graph cannot be modified to H by vertex deletions only). In this paper, we start such a systematic study for Disjoint Paths and Disjoint Connected Subgraphs, both for the case when k is part of the input and when k is fixed.

Our results
By combining some of the aforementioned known results with a number of new results, we prove the following two theorems in Sections 3 and 4, respectively. In particular, we generalize the polynomial-time result for Disjoint Paths on 
-free graphs to hold even for Disjoint Connected Subgraphs. See Fig. 2 for an example of a graph 
; we refer to Section 2 for undefined terminology.

Fig. 2
Download : Download high-res image (1KB)
Download : Download full-size image
Fig. 2. The graph H = 3P1 + P4.

Theorem 2

Let H be a graph. If 
, then for every , k-Disjoint Connected Subgraphs on H-free graphs is polynomial-time solvable; otherwise even 2-Disjoint Connected Subgraphs is NP-complete.

Theorem 3

Let H be a graph not in 
. If 
, then Disjoint Connected Subgraphs is polynomial-time solvable for H-free graphs; otherwise even Disjoint Paths is NP-complete.

Theorem 2 completely classifies, for every , the complexity of k-Disjoint Connected Subgraphs on H-free graphs. Theorem 3 determines the complexity of Disjoint Paths and Disjoint Connected Subgraphs on H-free graphs for every graph H except if 
. In Section 5 we reduce the number of open cases from six to three by showing some equivalencies.

In Section 6 we complement the above results by giving exact algorithms for both problems based on Held-Karp type dynamic programming techniques [10], [2]. In Section 7 we give some directions for future work. In particular we prove that both problems are polynomial-time solvable for co-bipartite graphs, which form a subclass of the class of 
-free graphs.

2. Preliminaries
We use 
 to indicate that H is an induced subgraph of 
, that is, H can be obtained from 
 by a sequence of vertex deletions. For two graphs 
 and 
 we write 
 for the disjoint union 
. We denote the disjoint union of r copies of a graph G by rG. A graph is said to be a linear forest if it is a disjoint union of paths.

We denote the path and cycle on n vertices by 
 and 
, respectively. The girth of a graph that is not a forest is the number of edges of a smallest induced cycle in it.

The line graph  of a graph G has vertex set  and there exists an edge between two vertices e and f in  if and only if e and f have a common end-vertex in G. The claw 
 is the 4-vertex star. It is readily seen that every line graph is claw-free. Recall that a graph is H-free if it does not contain H as induced subgraph. For a set of graphs 
, we say that a graph G is 
-free if G is 
-free for every .

A clique is a set of pairwise adjacent vertices and an independent set is a set of pairwise non-adjacent vertices. A graph is split if its vertex set can be partitioned into two (possibly empty) sets, one of which is a clique and the other is an independent set. A graph is split if and only if it is 
-free [6]. A graph is a cograph if it can be defined recursively as follows: any single vertex is a cograph, the disjoint union of two cographs is a cograph, and the join of two cographs 
 is a cograph (the join adds all edges between the vertices of 
 and 
). A graph is a cograph if and only if it is 
-free [3].

A graph  is multipartite, or more specifically, r-partite if V can be partitioned into r (possibly empty) sets 
, such that there is an edge between two vertices u and v if and only if 
 and 
 for some  with . If , we also say that G is bipartite. If there exist an edge between every vertex of 
 and every vertex of 
 for every , then the multipartite graph G is complete.

The complement of a graph  is the graph 
 
. The complement of a bipartite graph is a cobipartite graph. A set  is a dominating set of a graph G if every vertex of  has a neighbour in W, or equivalently,  (the closed neighbourhood of W) is equal to V. We say that W is a connected dominating set if W is a dominating set and  is connected.

3. The proof of Theorem 2
We consider k-Disjoint Connected Subgraphs for fixed k. First, we show a polynomial-time algorithm on H-free graphs when 
 for some fixed . Then, we prove the hardness result.

For the algorithm, we need the following lemma for 
-free graphs, or equivalently, cographs. This lemma is well known and follows immediately from the definition of a cograph: in the construction of a connected cograph G, the last operation must be a join, so there exists cographs 
 and 
, such that G obtained from adding an edge between every vertex of 
 and every vertex of 
. Hence, the spanning complete bipartite graph of G has non-empty partition classes 
 and 
.

Lemma 1

Every connected 
-free graph on at least two vertices has a spanning complete bipartite subgraph.

Two instances of a problem Π are equivalent when one of them is a yes-instance of Π if and only if the other one is a yes-instance of Π. We note that if two adjacent vertices will always appear in the same set of every solution 
 for an instance 
, then we may contract the edge between them at the start of any algorithm. This takes linear time. Moreover, H-free graphs are readily seen (see e.g. [15]) to be closed under edge contraction if H is a linear forest. Hence, we can make the following observation.

Lemma 2

For , from every instance of 
 of k-Disjoint Connected Subgraphs we can obtain in polynomial time an equivalent instance 
 such that every 
 is an independent set. Moreover, if G is H-free for some linear forest H, then 
 is also H-free.

We can now prove the following lemma.

Lemma 3

Let H be a graph. If 
, then for every , k-Disjoint Connected Subgraphs on H-free graphs is polynomial-time solvable.

Proof

Let 
 for some . Let 
 be an instance of k-Disjoint Connected Subgraphs, where G is an H-free graph. By Lemma 2, we may assume without loss of generality that G is connected and moreover that 
 are all independent sets.

We first analyze the structure of a solution 
 (if it exists). For , we may assume that 
 is inclusion-wise minimal, meaning there is no 
 that contains 
 and is connected. Consider a graph 
. Either 
 is 
-free or 
 contains an induced 
 for some . We will now show that in both cases, 
 is the (not necessarily disjoint) union of 
 and a connected dominating set of 
 of constant size.

First suppose that 
 is 
-free. As 
 is connected and 
 is independent, we apply Lemma 1 to find that 
 contains a vertex u that is adjacent to every vertex of 
. Hence, by minimality, 
 and  is a connected dominating set of 
 of size 1.

Now suppose that 
 has an induced 
 for some , where we choose r to be maximum. Note that . Let W be the vertex set of the induced 
. Then, as r is maximum, W dominates 
. Note that  has  connected components. Then, as 
 is connected and W is a dominating set of 
 of size , it follows from folklore arguments (see e.g. [22, Prop. 6.3.24]) that 
 has a connected dominating set 
 of size at most . Moreover, by minimality, 
.

Hence, in both cases we find that 
 is the union of 
 and a connected dominating set of 
 of size at most ; note that t is a constant, as s is a constant.

Our algorithm now does as follows. We consider all options of choosing a connected dominating set of each 
, which from the above has size at most t. As soon as one of the guesses makes every 
 connected, we stop and return the solution. The total number of options is 
, which is polynomial as k and t are fixed. Moreover, checking the connectivity condition can be done in polynomial time. Hence, the total running time of the algorithm is polynomial. □

The proof our next result is inspired by the aforementioned NP-completeness result of [23] for instances 
 where 
 but G is a general graph.

Lemma 4

The 2-Disjoint Connected Subgraphs problem is NP-complete even on instances 
 where 
 and G is a line graph.

Proof

Note that the problem is in NP. We reduce from 3-SAT. Let 
 be an instance of 3-SAT with clauses 
. We construct a corresponding graph  as follows. We start with two disjoint paths P and 
 on vertices 
 and 
, respectively, where 
 correspond to the positive and negative literals in ϕ, respectively. To be more precise, we define:
 
 We add the two edges 
. For , we also add edges 
 and 
. We now replace each 
 by vertices 
, where 
 are the indices of the clauses 
 that contain 
. That is, we replace the subpath 
 of P by the path 
. We do the same path replacement operation on 
 with respect to every 
. Finally, we add every clause 
 as a vertex and add an edge between 
 and 
 if and only if 
, and between 
 and 
 if and only if 
. This completes the description of . We refer to Fig. 3 for an illustration of our construction.

Fig. 3
Download : Download high-res image (34KB)
Download : Download full-size image
Fig. 3. The construction described with edges added for the clause 
.

We now focus on the line graph  of G. Let 
 and let 
 consist of all vertices of L that correspond to edges in G that are incident to some 
. Note that 
 and 
 are disjoint. Moreover, each clause 
 corresponds to a clique of size at most 3 in L, which we call the clause clique of 
. We claim that ϕ is satisfiable if and only if the instance 
 of 2-Disjoint Connected Subgraphs is a yes-instance.

First suppose that ϕ is satisfiable. Let τ be a satisfying truth assignment for ϕ. In G, we let 
 denote the unique path whose first edge is e and whose last edge is f and that passes through all 
 if 
 and through all 
 if 
. In L we let 
 consist of all vertices of 
; note that 
 is contained in 
 and that 
 is connected. We let 
 denote the “complementary” path in G whose first edge is e and whose last edge is f but that passes through all 
 if and only if 
 passes through all 
, and conversely (). In L, we put all vertices of 
, except e and f, together with all vertices of 
 in 
. As τ satisfies ϕ, some vertex of each clause clique is adjacent to a vertex of 
. Hence, as 
 is a path, 
 is connected and we found a solution for 
.

Now suppose that 
 is a yes-instance of 2-Disjoint Connected Subgraphs. Then  can be partitioned into two vertex-disjoint connected sets 
 and 
 such that 
 and 
. In particular, 
 contains a path 
 from e to f. In fact, we may assume that 
, as we can move every other vertex of 
 (if they exist) to 
 without disconnecting 
.

Note that 
 corresponds to a connected subgraph that contains the adjacent vertices 
 and 
 as well as the adjacent vertices 
 and 
. Hence, we can modify 
 into a path Q in G that starts in 
 or 
 and that ends in 
 or 
. Note that Q contains no edge incident to a clause vertex 
, as those edges correspond to vertices in L that belong to 
. Hence, by construction, Q “moves from left to right”, that is, Q cannot pass through both some 
 and 
 (as then Q needs to pass through either 
 or 
 again implying that Q is not a path).

Moreover, if Q passes through some 
, then Q must pass through all vertices 
. Similarly, if Q passes through some 
, then Q must pass through all vertices 
. As Q connects the edges 
 and 
, we conclude that Q must pass, for , through either every 
 or through every 
. Thus we may define a truth assignment τ by setting
  We claim that τ satisfies ϕ. For contradiction, assume some clause 
 is not satisfied. Then Q passes through all its literals. However, then in 
, the vertices of 
 that correspond to edges incident to 
 are not connected to other vertices of 
, a contradiction. This completes the proof of the lemma. □

A straightforward modification of the reduction of Lemma 5 gives us Lemma 6. We can also obtain Lemma 6 by subdividing the graph G in the proof of Lemma 4 twice (to get a bipartite graph) or p times (to get a graph of girth at least p).

Lemma 5

[23]
2-Disjoint Connected Subgraphs is NP-complete for split graphs, or equivalently, 
-free graphs.

Lemma 6

2-Disjoint Connected Subgraphs is NP-complete for bipartite graphs and for graphs of girth at least p, for every integer .

We are now ready to prove Theorem 2.

Theorem 2 (restated) Let H be a graph. If 
, then for every , k-Disjoint Connected Subgraphs on H-free graphs is polynomial-time solvable; otherwise even 2-Disjoint Connected Subgraphs is NP-complete.

Proof

If H contains an induced cycle 
 for some , then we apply Lemma 6 by setting . Now assume that H contains no cycle, that is, H is a forest. If H has a vertex of degree at least 3, then H is a superclass of the class of claw-free graphs, which in turn contains all line graphs. Hence, we can apply Lemma 4. In the remaining case H is a linear forest. If H contains an induced 
, we apply Lemma 5. Otherwise H is an induced subgraph of 
 for some  and we apply Lemma 3. □

4. The proof of Theorem 3
We first prove the following result, which generalizes the corresponding result of Disjoint Paths for 
-free graphs due to Gurski and Wanke [8]. We show that we can use the same modification to a matching problem in a bipartite graph.

Lemma 7

Disjoint Connected Subgraphs is polynomial-time solvable for 
-free graphs.

Proof

For some integer , let 
 be an instance of Disjoint Connected Subgraphs where G is a 
-free graph. By Lemma 2 we may assume that every 
 is an independent set. Now suppose that 
 has a solution 
. Then 
 is a connected 
-free graph. Hence, by Lemma 1, 
 has a spanning complete bipartite graph on non-empty partition classes 
 and 
. As every 
 is an independent set, it follows that either 
 or 
. If 
, then every vertex of 
 is adjacent to every vertex of 
. Similarly, if 
, then every vertex of 
 is adjacent to every vertex of 
. We conclude that in every set 
, there exists a vertex 
 such that 
 is connected.

The latter enables us to construct a bipartite graph 
 where X contains vertices 
 corresponding to the set 
 and Y is the set of non-terminal vertices of G. We add an edge between 
 and  if and only if y is adjacent to every vertex of 
. Then 
 is a yes-instance of Disjoint Connected Subgraphs if and only if 
 contains a matching of size k. It remains to observe that we can find a maximum matching in polynomial time, for example, by using the Hopcroft-Karp algorithm for bipartite graphs [11]. □

The first lemma of a series of four is obtained by a straightforward reduction from the Edge Disjoint Paths problem (see, e.g. [8], [9]), which was proven to be NP-complete by Even, Itai and Shamir [5]. The second lemma follows from the observation that an edge subdivision of the graph G in an instance of Disjoint Paths results in an equivalent instance of Disjoint Paths; we apply this operation a sufficiently large number of times to obtain a graph of large girth. The third lemma is due to Heggernes et al. [9]. We modify their construction to prove the fourth lemma.

Lemma 8

Disjoint Paths is NP-complete for line graphs.

Lemma 9

For every , Disjoint Paths is NP-complete for graphs of girth at least g.

Lemma 10

[9]
Disjoint Paths is NP-complete for split graphs, or equivalently, 
-free graphs.

Lemma 11

Disjoint Paths is NP-complete for 
-free graphs.

Proof

We reduce from Disjoint Paths on split graphs, which is NP-complete by Lemma 10. By inspection of this result (see [9, Theorem 3]), we note that the instances 
 have the following property: the split graph G has a split decomposition , where C is a clique, I an independent set, C and I are disjoint, and , such that 
. Now let 
 be obtained from G by, for each terminal 
, adding edges to 
 and 
 for all . Then consider the instance 
.

We note that 
 is still a complete graph, while 
 is a complete graph minus a matching. It is immediate that 
 is 
-free. Moreover, any induced subgraph H of 
 that is isomorphic to 
 must contain at least two vertices of I and at least one vertex of C. If H contains two vertices of C, then as 
 is a clique, H contains two non-adjacent vertices in I. Similarly, if H contains one vertex of C (and thus three vertices of I), then H contains two non-adjacent vertices in I. Since C is a clique in 
 and every (other) vertex of I is adjacent in 
 to any pair of non-adjacent vertices of I, it follows that 
 is 
-free as well.

We claim that 
 is a yes-instance if and only if 
 is a yes-instance. This is because the edges that were added to G to obtain 
 are only between terminal vertices of different pairs. These edges cannot be used by any solution of Disjoint Paths for 
, and thus the feasibility of the instance is not affected by the addition of these edges. □

We are now ready to prove Theorem 3.

Theorem 3 (restated) Let H be a graph not in 
. If 
, then Disjoint Connected Subgraphs is polynomial-time solvable for H-free graphs; otherwise even Disjoint Paths is NP-complete.

Proof

First suppose that H contains a cycle 
 for some . Then Disjoint Paths is NP-complete for the class of H-free graphs, as Disjoint Paths is NP-complete on the subclass consisting of graphs of girth  by Lemma 9. Now suppose that H contains no cycle, that is, H is a forest. If H contains a vertex of degree at least 3, then the class of H-free graphs contains the class of claw-free graphs, which in turn contains the class of line graphs. Hence, we can apply Lemma 8. It remains to consider the case where H is a forest with no vertices of degree at least 3, that is, when H is a linear forest.

If H contains four connected components, then the class of H-free graphs contains the class of 
-free graphs, and we can use Lemma 11. If H contains an induced 
 or two connected components that each have at least one edge, then H contains the class of 
-free graphs, and we can use Lemma 10. If H contains two connected components, one of which has at least four vertices, then H contains the class of 
-free graphs, and we can use Lemma 11 again. As 
, this means that in the remaining case H is an induced subgraph of 
. In that case even Disjoint Connected Subgraphs is polynomial-time solvable on H-free graphs, due to Lemma 7. □

5. Reducing the number of open cases to three
Theorem 3 shows that we have the same three open cases for Disjoint Paths and Disjoint Connected Subgraphs, namely when 
. We show that instead of six open cases, we have in fact only three.

Proposition 1

Disjoint Paths and Disjoint Connected Subgraphs are equivalent for 
-free graphs.

Proof

Every instance of Disjoint Paths is an instance of Disjoint Connected Subgraphs. Let 
 be an instance of Disjoint Connected Subgraphs where G is a 
-free graph. By Lemma 2 we may assume that each 
 is an independent set. Then, as G is 
-free, each 
 has size at most 2. So we obtained an instance of Disjoint Paths. □

Proposition 2

Disjoint Paths on 
-free graphs and Disjoint Connected Subgraphs on 
-free graphs are polynomially equivalent to Disjoint Paths on 
-free graphs.

Proof

We prove that we can solve Disjoint Connected Subgraphs in polynomial time on 
-free graphs if we have a polynomial-time algorithm for Disjoint Paths on 
-free graphs. Showing this suffices to prove the theorem, as Disjoint Paths is a special case of Disjoint Connected Subgraphs and 
-free graphs form a subclass of 
-free graphs.

Let 
 be an instance of Disjoint Connected Subgraphs, where G is a 
-free graph. Olariu [17] proved that every connected 
 
-free graph is either triangle-free or complete multipartite. Hence, the vertex set of G can be partitioned into sets 
 for some  such that

–
every 
 is 
-free or the disjoint union of complete graphs, and

–
for every  with , every vertex of 
 is adjacent to every vertex of 
.

Using this structural characterization, we first argue that we may assume that each 
 has size 2, making the problem an instance of Disjoint Paths. Then we show that we can either solve the instance outright or can alter G to be 
-free.
First, we argue about the size of each 
. By Lemma 2 we may assume that every 
 is an independent set and is thus contained in the same set 
. If 
 is 
-free, then this implies that any 
 that is contained in 
 has size 2. If 
 is a disjoint union of complete graphs, then each vertex of a 
 that is contained in 
 belongs to a different connected component of 
 and 
 is connected for every vertex 
. As at least one vertex 
 is needed to make such a set 
 connected, we may therefore assume that for a solution 
 (if it exists), 
 for some 
. The latter implies that we may assume without loss of generality that every such 
 has size 2 as well.

If , then each connected component of G is 
-free, and we are done. Hence, we assume that . In fact, since any two distinct sets 
 and 
 are complete to each other, the union of any two 
-free graphs induces a 
-free graph. Therefore we may assume without loss of generality that only 
 might be 
-free, whereas 
 are disjoint unions of complete graphs.

Recall that 
 for every  and we search for a solution 
 where each 
 is a path from 
 to 
. First suppose 
 and 
 belong to 
. Then 
 has length 2 or 3 and in the latter case, 
. Now suppose that 
 and 
 belong to 
 for some . Then 
 has length exactly 2, and moreover, the middle (non-terminal) vertex of 
 does not belong to 
.

We will now check if there is a solution 
 such that every 
 has length exactly 2. We call such a solution to be of type 1. In a solution of type 1, every 
 for some non-terminal vertex u of G. If 
 and 
 belong to 
 for some , then 
 for some . If 
 and 
 belong to 
, then 
 for some  but also 
 is possible, namely when u is adjacent to both 
 and 
.

Verifying the existence of a type 1 solution is equivalent to finding a perfect matching in a bipartite graph 
 that is defined as follows. The set A consists of one vertex 
 for each pair 
. The set B consists of all non-terminal vertices u of G. For 
, there exists an edge between u and 
 in 
 if and only if in G it holds that 
 for some  or 
 and u is adjacent to both 
 and 
. For 
 with , there exists an edge between u and 
 in 
 if and only if in G it holds that 
 for some  with . We can find a perfect matching in 
 in polynomial time by using the Hopcroft-Karp algorithm for bipartite graphs [11].

Suppose that we find that 
 has no solution of type 1. As a solution can be assumed to be of type 1 if 
 is the disjoint union of complete graphs, we find that 
 is not of this form. Hence, 
 is 
-free. Recall that 
 is the disjoint union of complete graphs for . It remains to check if there is a solution that is of type 2 meaning a solution 
 in which at least one 
, whose vertices all belong to 
, has length 3.

To find a type 2 solution (if it exists) we construct the following graph 
⁎
. We let 
⁎
, where

–
 consists of all terminal vertices from 
;

–
 consists of all non-terminal vertices from 
;

–
 consists of all terminal vertices from 
; and

–
 consists of all non-terminal vertices from 
.

Note that 
⁎
. To obtain 
⁎
 from  we add some edges (if they do not exist in G already) and also delete some edges (if these existed in G):
(i)
for each 
, add all edges between 
 and vertices of 
, and delete any edges between 
 and vertices of 
;

(ii)
add an edge between every two terminal vertices in 
 that belong to different terminal pairs; and

(iii)
add an edge between every two vertices of 
.

We note that 
⁎
 is the same graph as 
 and thus 
⁎
 is 
-free. Moreover, 
⁎
 is 
-free by part (i) of the construction. Hence, as there exists an edge between every vertex of 
 and every vertex of 
 in G and thus also in 
⁎
, this means that 
⁎
 is 
-free. It remains to prove that 
 and 
⁎
 are equivalent instances.
First suppose that 
 has a solution 
. Assume that the number of paths of length 3 in this solution is minimum over all solutions for 
. We note that 
 is a solution for 
⁎
 unless there exists some 
 that contains an edge of 
⁎
. Suppose this is indeed the case. As 
⁎
 and every edge between a vertex of 
 and a vertex of 
 also exists in 
⁎
, we find that the paths connecting terminals from pairs in 
 are paths in 
⁎
. Hence, 
 and 
 belong to 
 for some  and thus 
 where u is a vertex of 
 for some  with .

As we already found that 
 has no type 1 solution, there is at least one 
 with length 3, so 
 is in 
. However, we can now obtain another solution for 
 by changing 
 into 
 and 
 into 
, a contradiction, as the number of paths of length 3 in 
 was minimum. We conclude that every 
 only contains edges from 
⁎
, and thus 
 is a solution for 
⁎
.

Now suppose that 
⁎
 has a solution 
. Consider a path 
. First suppose that 
 and 
 both belong to 
. Then we may assume without loss of generality that 
 for some 
. As 
 only contains terminals from pairs in 
, the latter implies that 
 is a path in G as well. Now suppose that 
 and 
 both belong to 
. Then we may assume without loss of generality that 
 for some non-terminal vertex of 
⁎
 or 
 for two vertices 
 in 
. Hence, 
 is a path in G as well. We conclude that 
 is a solution for 
. This completes our proof. □

6. Exact algorithms
In this section, we briefly mention exact algorithms. Using Held-Karp type dynamic programming techniques [2], [10], we can obtain exact algorithms for Disjoint Paths and Disjoint Connected Subgraphs running in time 
 and 
, respectively.

Theorem 4

Disjoint Paths can be solved in 
 time.

Proof

We devise a Held-Karp type [10], [2] dynamic programming algorithm. Given a set , a vertex , and an integer , let  be true if and only if S can be partitioned into vertex-disjoint paths 
 such that 
 starts in 
 and ends in v and 
 is an 
-
 path for each . Then we set  to true if and only if S is equal to the vertex set of an 
-v path. The correctness of the base case is immediate from the definition. Beyond the base case, we set 
 and for all 
,  is set to true if and only if there is a neighbour  of v for which  is true. Indeed, if S can be partitioned into vertex-disjoint paths 
 such that 
 starts in 
 and ends in v and 
 is an 
-
 path for each , then

–
if 
, then 
 is a single-vertex path and thus 
 can be partitioned into vertex-disjoint paths 
 such that 
 is an 
-
 path for each , and thus 
 is true;

–
otherwise, let w be the vertex preceding v on 
, and thus  can be partitioned into vertex-disjoint paths 
 such that 
 starts in 
 and ends in w (
 is the part of 
 from 
 to w) and 
 is an 
-
 path for each , and thus  is true.

Conversely, if 
 and 
 is true, then 
 can be partitioned into vertex-disjoint paths 
 such that 
 is an 
-
 path for each , and thus S can be partitioned into vertex-disjoint paths 
 such that 
 starts and ends in 
 and 
 is an 
-
 path for each . Hence, 
 is true. If 
 and there is a neighbour  of v for which  is true, meaning that  can be partitioned into vertex-disjoint paths 
 such that 
 starts in 
 and ends in w and 
 is an 
-
 path for each , then S can be partitioned into vertex-disjoint paths 
 such that 
 starts in 
, follows 
 and ends in v, and 
 is an 
-
 path for each . Hence,  is true.
Finally, the given instance of Disjoint Paths is a yes-instance if and only if there is a set  for which 
 is true. The correctness follows by definition.

It is immediate that the running time of the algorithm is 
, as there are 
 table entries that each require at most  time to fill. □

Theorem 5

Disjoint Connected Subgraphs can be solved in 
 time.

Proof

We propose a similar, but slightly more crude algorithm as the one before. Given a set  and an integer , let  be true if and only if S can be partitioned into vertex-disjoint set 
 such that 
 is connected and 
 for each . We set  to true if and only if 
 and S is connected. Beyond the base case, we set  to true if and only if there is a set 
 for which 
, 
 is connected, and 
 is true. Finally, the given instance of Disjoint Connected Subgraphs is a yes-instance if and only if there is a set  for which  is true. The proof of correctness is similar (but simpler) to the proof of Theorem 4.

It is immediate that the running time is 
. Each table entry  requires 
 time to fill. Hence, the running time to fill all table entries where S has size ℓ is  
 
. This means that the total running time is 
 
, where the latter equality follows from the Binomial Theorem. □

7. Conclusions
We first gave a dichotomy for Disjoint k-Connected Subgraphs in Theorem 2: for every k, the problem is polynomial-time solvable on H-free graphs if 
 for some  and otherwise it is NP-complete even for . Two vertices u and v are a 
-suitable pair if  is a yes-instance of 2-Disjoint Connected Subgraphs. Recall that a graph G can be contracted to 
 if and only if G has a 
-suitable pair. Deciding if a pair  is a suitable pair is polynomial-time solvable for H-free graphs if H is an induced subgraph of 
, 
, 
 or 
 for some ; otherwise it is NP-complete [15]. Hence, we conclude from our new result that the presence of the two vertices u and v that are connected to the sets 
 and 
, respectively, yield exactly three additional polynomial-time solvable cases.

We also classified, in Theorem 3, the complexity of Disjoint Paths and Disjoint Connected Subgraphs for H-free graphs. Due to Proposition 1, Proposition 2, there are three non-equivalent open cases left and we ask the following:

Open Problem 1

Determine the computational complexity of Disjoint Paths on H-free graph for 
 and the computational complexity of Disjoint Connected Subgraphs on H-free graphs for 
.

The three open cases seem challenging. We were able to prove the following positive result for a subclass of 
-free graphs, namely cobipartite graphs, or equivalently, 
 
 
-free graphs.
Theorem 6

Disjoint Paths is polynomial-time solvable for cobipartite graphs.

Proof

Let , with cliques A and B, be the given cobipartite graph. If 
 and 
 are adjacent in G, then use the direct edge between them as the path 
. We can then reduce the instance by removing 
 and 
. We now assume the instance has thus been reduced and (by abuse of notation) all terminal pairs are nonadjacent in G.

We now construct a bipartite graph 
 by removing each edge within the cliques A and B as well as any edge 
 both of whose endpoints are terminals. We then obtain a new graph 
 by deleting each terminal vertex and adding for each terminal pair 
, a new vertex 
 whose neighbourhood is the union of the neighbourhoods of 
 and 
 in 
. We claim that G contains the required k disjoint paths 
 if and only if 
 contains a matching of size at least k. We can check the latter in polynomial time by using the Hopcroft-Karp algorithm for bipartite graphs [11].

We first assume that G contains the disjoint paths 
. Note that, since G is 
-free, we may assume each path has length at most 3. A matching M of size k is obtained as follows. For each , if 
 has length 2 we add the edge 
 to M where 
 is the interior vertex of 
. If 
 has length 3 then we add its interior edge 
 to M.

Next assume 
 contains a matching M of size k. For each edge of M which includes a vertex 
 corresponding to a terminal pair 
 we set 
 to be 
 where 
 is the vertex matched to 
. Note that any edge uv in G which contains no terminal vertex and has one endpoint in each of A and B lies on a path of length 3 between any two terminal vertices. Therefore, for each i such that the vertex 
 is not matched in M, we can choose a distinct edge 
 in M to obtain the path 
 in G. □

Finally, in Section 6 we obtained exact algorithms for Disjoint Paths and Disjoint Connected Subgraphs running in time 
 and 
, respectively. Faster exact algorithms are known for k-Disjoint Connected Subgraphs for  and  [4], [21], [1], but we are unaware if there exist faster algorithms for general graphs.

Open Problem 2

Is there an exact algorithm for Disjoint Paths or Disjoint Connected Subgraphs on general graphs where the exponential factor is 
 or 
, respectively, for some ?