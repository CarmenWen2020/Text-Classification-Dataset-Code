Abstract
In the coalitional game, the agents (nodes) cooperate or compete with each other to maximize their own benefits, thereby creating different coalitions. Designing a fair resource-allocation mechanism can reduce conflicts among agents and enable an all-win scenario. One popular resource-exchange mechanism, the max-min fairness-based coalitional (MMFC) mechanism, achieves fair allocation of resource by finding the max-min resource-exchange rate in a resource exchange network. However, this mechanism cannot ensure envy-free allocation of resource among the agents. To solve this problem, we proposed an envy-free resource-allocation mechanism called the envy-free max-min fairness-based coalitional (EFMMFC) mechanism, in which the resource-exchange rates of all agents constitute a max-min fair vector. EFMMFC mechanism opens new research directions in developing simple and efficient protocol that can produce envy-free allocation subject to the max-min resource exchange rate in coalitional game.

Keywords
Max-min
Coalitional game
Fair allocation
Envy-freeness
Resource exchange

1. Introduction
Exchanging resource in networks can promote efficient use of resource. There are many online platforms providing solutions for exchange of commodities and services among users who have common interests [1]. Resource-exchange and -sharing solutions have also been provided in other realms. For instance, renewable energy sharing solutions in smart grid networks enabled users to share their energy surpluses with each other and thus reduced the waste of energy [2], [3], [4]. In [5], incentive compatibility and efficiency in resource allocation and exchange were studied, based on which the full class of group strategy-proof and Pareto-efficient mechanisms were designed and applied to the allocation and exchange of discrete resources. In [6], the reason why the peer-to-peer indirect exchange services had not been widely adopted as a direct exchange system was discussed, and a technology acceptance model for indirect exchange systems that included generalized trust and ease of coordination was proposed. In [7], a 5G exchange system was created, which removed some obstacles - market segmentation and technological heterogeneity - by enabling the orchestration of networking and service resource in an automated way across technological and administrative domains. However, in a resource-exchange network, a user may determine its exchange strategy selfishly to maximize its own benefits in return, which is defined and studied in economics as competitive networks.

The game theory provides strategies to address the issue of fairness in resource-exchange networks. The game theory has two categories: the non-cooperative game theory [8] and the cooperative game theory [9]. The former explores how to optimize a player's utility or reduce its costs in its interactions with other plays; while unlike the non-cooperative game theory that studies competitive scenarios, the cooperative game theory studies how the agents cooperate to improve their utility. The coalitional game theory, a branch of the cooperative game theory, describes the formation of a cooperating group of players. In the design of a cooperation strategy in a competitive network, how to improve fairness and efficiency remains a challenge, and the coalitional game provides an excellent solution. The coalitional game theory was introduced in [10], which provides an analytical tool to study the behavior of rational players when they cooperate. As a major type of cooperative games, the coalitional mechanism has been widely used in various networks [11], [12], [13], [14].

One coalitional mechanism to guarantee the fairness and efficiency of resource exchange is the max-min fairness-based coalitional (MMFC) mechanism. In the MMFC mechanism, the resource-exchange network is decomposed into sub-networks based on max-min resource allocation, or specifically, it ensures fair allocation of resource by finding a max-min resource exchange rate for each agent. Though the MMFC mechanism tries to seek fair allocation of resource, the agents in a network might selfishly maximize their own benefits and are indifferent to the resource-exchange rate. Therefore, it is important to design a mechanism that satisfies the following two conditions simultaneously: 1) The resource exchange rates of all agents constitute a max-min vector. 2) The resource allocation is envy-free. To achieve this goal, we first introduce the centralized resource allocation problem.

The most popular centralized resource allocation problem is the cake-cutting problem: how to divide a cake (heterogeneous and divisible resource) among a group of self-interested agents who have different preferences in a fair manner. Though seemingly simple, this problem encompasses complex structures and has been extensively studied in resource allocation for many decades [15]. As Procaccia [16] remarked, it is not Child's Play. One of the most popular and widely-studied solution to the cake-cutting problem is envy-free allocation: an allocation is envy-free if all agents are satisfied with the piece(s) of cake they are given; in other words, the satisfied agents will no longer crave for the pieces of cake that have been allocated to others. In [17], it is demonstrated that an envy-free allocation always exists; in [18], an -cut envy-free resource allocation mechanism is proposed. Recently, another pivotal progress has been made: an envy-free algorithm [19] with any number of agents in the bounded running time has been introduced.

The contributions of our study are as follows:

1)
We demonstrate the necessity of introducing a price mechanism in the EFMMFC resource allocation mechanism;

2)
We investigate the key issue in the EFMMFC mechanism - the number of cuts in resource allocation. We find that there must exist a 2-cut welfare-maximizing allocation when the resource is allocated to only two adjacent nodes and a n-cut welfare-maximizing allocation does not exist when the resource is allocated to  nodes;

3)
We confirm the existence of an EFMMFC mechanism without limiting the number of cuts;

4)
We put forward a 2-cut welfare-maximizing allocation algorithm when one node's resource is allocated to two adjacent nodes. With some restrictions imposed on the utility function of adjacent nodes, an 
-cut welfare-maximizing algorithm is put forward.

The rest of the paper is organized as follows: The next section lists some related works on fair allocation of resource in networks. The preliminaries are introduced in Section 3. The main process of the MMFC mechanism is described in Section 4. The EFMMFC mechanism is introduced in Section 5. A polynomial-time algorithm for welfare-maximizing allocation is introduced in Section 6 and numerical examples in Section 7. Finally, the conclusion is presented in Section 8.
2. Related works
Exchange of resource in networks is an extensively-studied topic. In a resource-exchange network, an agent can, by sharing its own resource, receive rewards from its adjacent agents. How to realize fair resource allocation is a major challenge in resource-allocation networks. The proportional fairness mechanism [20] is a fair allocation model, in which each agent gives its neighboring agents resource proportional to what it receives from these neighbors. Another way to achieve proportional fairness is proposed: it maximizes the minimum resource exchange rate and deletes the virtual edges to form different coalitions [21]. Coalition is a popular concept in the game theory, the main idea of which is that self-interested agents in a network might cooperate with others to gain more payoffs. As cooperation emerges as a new communication paradigm, the coalitional game has recently become popular [10]. The cooperative game theory studies the formation of cooperating groups (i.e. coalitions) among agents [9]. While the non-cooperative game theory studies interactions among competing players, each of whom chooses their strategies independently to improve its own utility [8]. The agents in a non-cooperative game will compete with each other to gain larger utility; thus, it is important to design a fair allocation mechanism to avoid conflicts and maximize each agent's utility.

Many existing studies have proposed models to improve exchange of resource and services in networks [21], [22], [23]. Most of these models apply the idea of coalition in different forms among agents. These models assume that when an agent has some idle (available) resource, it can offer the idle resource to other agents in need and expect those that receive the offering return the favor by providing resource it needs in the future. In a decentralized network, each agent tries to maximize its own benefit by allocating its idle resource to adjacent agents from which it expects to receive more resource in return; it is the same case in competitive networks where agents behave selfishly. To achieve an all-win solution and maximize the utilization of resource, it is necessary to design an efficient and fair allocation system. One typical example in this regard is the market equilibrium. In [21], a new model to realize market equilibrium was proposed by finding the lower bound of the maximum resource exchange rate in a network.

Max-min fairness is a simple and well-recognized approach to define fair allocation in competitive networks [24], [25]. It has been widely adopted in economics [26]. Also, it is used in ant colony optimization algorithms for load balancing of cloud systems [27]

Designing a fair resource-allocation mechanism has always been a hot topic for decades. The most popular centralized resource-allocation problem is the cake-cutting problem [16]. One major goal in the cake-cutting problem is to minimize the number of cuts of the cake (i.e. the resource). In [28], the 
-cut and -cut deterministic protocols are given explicitly to ensure that each agent receives no less than 
 
 fraction of the total resource. However, this allocation method is not envy-free. Therefore, in [18], an envy-free allocation method with only  cuts is introduced, but it uses the concept of virtual cutting and whether a finite-step mechanism exists remains unclear. Until recently, a discrete and bounded procedure to find an envy-free allocation was proposed by Aziz [19]. Despite all the aforementioned work, few considered how to design an envy-free resource allocation mechanism based on the max-min resource-exchange rate in the coalitional game. In this paper, we designed an efficient mechanism that would combine fair allocation in the coalitional game with the max-min resource-exchange rate in networks.

3. Preliminaries
3.1. System model
Consider a resource exchange network , where  represents a node with available resource , and E represents the set of edges. Node 
 has preferences over the resource, represented by a utility function 
. Each node allocates its available resource to its neighbors. The set of neighbors of node 
 are denoted as a set 
; 
 is the amount of resource that node 
 allocates to node 
; 
 is the amount of resource that node 
 receives from its neighbors; and 
 is all the resource that node 
 allocates to its neighbors. Apparently,
 
 
 In the network, any node 
 has some idle resource 
. Through the allocation mechanism, all the idle resource is allocated to its neighbors, i.e., 
. The vector 
 refers to “allocation” and 
 
 is the exchange rate vector, where 
 
 represents the exchange rate of node 
. The goal of the coalitional mechanism in competitive networks is to design an allocation mechanism that achieves a fair exchange rate vector. The main notations are shown in Table 1.

Definition 3.1

Resource is divided into n pieces: 
 and allocated to n nodes 
 (resource 
 represents the piece allocated to node 
); 
 represents the utility of the resource piece 
 for node 
; if no node can get more utility by snatching the pieces of resource assigned to other nodes, then the allocation is envy-free, i.e. 
.

Definition 3.2

The Walrasian equilibrium is a fair resource allocation : 
 is the set of bundles allocated among n nodes (
 is the bundle allocated to node i), and the corresponding price is 
; 
 represents the utility of the resource 
 to node i; then all nodes are satisfied with their allocated resource, i.e. 
.


Table 1. List of symbols.

G=(V, E, R(v))	resource exchange network
v	an agent with idle resource R(v)
E	the set of edges
neighbors of node vi
dij	the amount of resource that node vi allocates to node vj
the amount of resource that node vi receives from its adjacent nodes
the amount of resource that node vi allocates to its neighbors
R(vi)	the amount of node vi's resource
the resource allocation vector
 
the resource exchange rate vector
 
the resource exchange rate of node vi
pij	the price of resource node vi allocates to node vj
fik	node vi's utility density function for node vk's resource
according to the amount of resource received from node vk from small to large, the node ranking the ith among vk's adjacent nodes
the number of node vk's neighbors who received its resource
the utility of node 
's resource received from node vk for node vj
the utility of the resource piece α for node 
.
in Algorithm 3, the amount of resource node vk allocated to the node 
 in the ith round of resource allocation
d(α)	the amount of resource piece α
An allocation S is considered as a welfare-maximizing allocation if it maximizes 
 
. The two well-known properties of the Walrasian equilibrium are listed as follows:

Theorem 1 The first welfare theorem

Consider an allocation : allocating the indivisible bundles 
 to n agents such that each agent receives exactly one bundle. If  is a Walrasian equilibrium, then S is a welfare-maximizing allocation.

Theorem 2 The second welfare theorem

Consider an allocation : allocating the indivisible bundles 
 to n agents such that each agent receives exactly one bundle. If  is a Walrasian equilibrium, and 
⁎
 is a welfare-maximizing allocation, then 
⁎
 is a Walrasian equilibrium

An envy-free allocation is a Walrasian equilibrium in the centralized resource-allocation problem involving the price mechanism.

3.2. Introduction of the MMFC mechanism
Max-min fairness is a popular concept in studies of resource-exchange networks [25]. Consider a set 
. The definition of the max-min fair vector [29] with respect to set χ is presented as follows:

Definition 3.3

A vector 
 is a max-min fair vector on set χ if and only if for all 
 such that there exists  satisfying 
, then there exists  such that 
.

To achieve a fair exchange rate vector, the max-min fairness-based coalitional (MMFC) mechanism is proposed in [21]. The intuitive idea is to find a resource allocation in which the generated exchange rate vector is a max-min fair vector. At first, the mechanism finds an allocation that maximizes the minimum resource exchange rate of all nodes; it then identifies these nodes with a minimum resource exchange rate and designs a partial resource allocation for the relevant nodes; finally, the nodes that have been allocated resource to are deleted for network decomposition and a sub-network is constructed. These steps are repeated until all nodes are allocated resource to. By the MMFC mechanism, the network is divided into several sub-networks.

Consider a node set ; 
 denotes the nodes that are adjacent to the nodes in set S but do not belong to set S. For a sub-network 
 (initially 
), the mechanism finds allocation 
, identifies the node set 
 with the lowest exchange rate, designs a partial resource allocation with their neighbors 
, and deletes the nodes that have already received resource to derive the sub-network 
. The partial allocation on set 
 is denoted as 
. The main steps are shown in Fig. 1. Further information is presented in Section 4.

Fig. 1
Download : Download high-res image (67KB)
Download : Download full-size image
Fig. 1. The process of the MMFC mechanism.

4. The MMFC mechanism
In this section, we describe the MMFC mechanism. To guarantee the max-min fairness of the exchange rate vector, the following steps are repeated: identifying nodes with the lowest exchange rate, determining a partial resource allocation, and decomposing the network.

To begin with, the mechanism allocates resource by solving 
 
, where 
 is the k-th network after decomposition; initially, 
. Then, it finds the nodes with the lowest exchange rate 
 to create a set 
.

To design a partial resource allocation, the node set 
 is updated first. Denote 
 as 
 for short. If 
, 
, 
 and 
 with 
, then, delete 
 from the set 
 as 
.

Next, the mechanism determines the neighbors 
 and the exchange rate 
 
; it designs the allocation policy as 
 for any node 
, 
. This is the process for designing partial resource allocation for the nodes with the lowest exchange rate. In this step, a pair of sets 
 is derived.

The last step is to decompose the network by deleting the nodes that have already been allocated with resource. In particular, the sets 
 and 
 are deleted as 
.

After decomposition, the aforementioned steps are repeated until all nodes' resource are allocated. Suppose these steps have been repeated for 
⁎
 times, and consider the last time: 1) when 
, we can get 
⁎
 pairs of sets 
 
 
 from the decomposition (
⁎
); 2) if 
, we can get 
⁎
 pairs of sets 
 
 
 
, where 
⁎
. Therefore, the output of the mechanism can be denoted as pairs:
 
 
 
 
  Next, an example of MMFC mechanism is introduced.

In Fig. 2, A network with 7 vertexes is divided into 3 isolated groups. In the first decomposition, we will get a subgraph 
 and corresponding resource exchange rate: 
 
. The resource allocation in this subgraph is 
. In the second decomposition, we will get a subgraph 
 and corresponding resource exchange rate: 
. The resource allocation in this subgraph is 
. In the third decomposition, we will get a subgraph 
 and corresponding resource exchange rate: 
. The resource allocation in this subgraph is 
. Indeed, the allocation in MMFC mechanism might not be unique, though the subgraphs and resource exchange rate can be uniquely determined. Another feasible allocation in subgraph 
 is 

Fig. 2
Download : Download high-res image (27KB)
Download : Download full-size image
Fig. 2. A network with 7 vertexes is divided into three subgraphs.

5. EFMMFC mechanism
In this section, we introduce the EFMMFC mechanism: an envy-free resource allocation subject to the preliminary allocation determined by the MMFC mechanism.

5.1. The necessity of a price mechanism in the EFMMFC mechanism
In the classic cake-cutting problem, the price mechanism is not necessary: there are so many envy-free allocations that the price of cake does not need considering. In this section, we first prove the necessity of a price mechanism in the EFMMFC mechanism: if no price mechanism is introduced, there does not exist any generalized algorithm to implement the EFMMFC mechanism.

Theorem 3

There does not exist any generalized EFMMFC algorithm without involving the price mechanism.

Proof

To prove the necessity of the price mechanism, we consider the following instance: assume a preliminary resource allocation determined by the MMFC mechanism as follows: The node 
 needs to allocate resource (represented by a range ) to adjacent nodes 
, the amount of three allocated resource pieces are 
, respectively; and the corresponding resource piece is 
; 
 represent the density function of nodes 
 for node 
's resource. The length of the three sub-ranges respectively represents the amount of resource 
 (assuming 
). The range of a node's density function over a sub-range represents the utility of the resource corresponding to the sub-range to the node. We consider a special case: 
, then we derive: 
, 
, 
. The utility of the same resource piece for nodes 
 remains the same. Therefore, if no price mechanism is introduced, no matter how we divide the cake, 
 is always satisfied; node 
 will envy the resource received by node 
. Therefore, there does not exist a generalized envy-free resource allocation algorithm subject to the preliminary resource allocation determined by the MMFC mechanism.

5.2. The process of EFMMFC mechanism
To begin with, the network is decomposed and the amount of resource each node needs to allocate to its neighbors is determined (suppose Node 
 needs to allocate 
 to its neighbor 
). Then, we find a resource division for each node's resource: node 
's resource is divided into 
 pieces: 
 and are allocated to node 
's adjacent nodes 
, respectively, satisfying 
 and 
 
 is a welfare-maximizing allocation; by Lemma 1 and Lemma 2, there must exist a price vector to reach the Walrasian equilibrium. Hence, node 
's resource allocation is envy-free.

5.3. The number of cuts in the welfare-maximizing allocation
Suppose the two end points of the resource are connected ( represents the range of resource of node v, the two end points 0 and  are collected). First, consider this: the MMFC mechanism has determined a kind of allocation, in which node 
 allocates its resource to only two nodes. We can derive:

Lemma 5.1

If node 
 allocates its resource to only two nodes, there must exist a welfare-maximizing allocation with only two cuts of the resource of 
.

Proof

Suppose a resource allocation determined by the MMFC mechanism: the resource of node 
 is divided into two pieces and allocated to the nodes 
 and 
, the number of which are 
 and 
, respectively. One division scheme is as follows: we cut the resource of the node 
 twice to obtain a piece 
 that satisfies 
 and 
; the remaining resource is represented as 
. Since 
, we derive: 
. Further, we derive: 
. Therefore, allocating the resource piece 
 to node 
 and allocating 
 to node 
 is a kind of welfare-maximizing allocation.

By Lemma 5.1, we suppose node 
 allocates its resource to only two adjacent nodes 
 and 
. There must exist an one-cut algorithm to find the welfare-maximizing allocation. The algorithm is presented in Algorithm 2:
Algorithm 2
Download : Download high-res image (43KB)
Download : Download full-size image
Algorithm 2. The Welfare-maximizing Algorithm for Two Adjacent Nodes.

We have found the welfare-maximizing allocation among two nodes in a network with only one cut. Next, we will explore a welfare-maximizing allocation among  nodes with n cuts.

Lemma 5.2

Suppose node 
 allocates its resource to 
 (
) adjacent nodes. There does not exist any welfare-maximizing allocation with only n cuts.

Proof

Let ϵ and σ be two small constants, σ far smaller than ϵ. Suppose that after the preliminary resource allocation (only determining the amount of resource and not considering the density function, that is, different adjacent nodes have different preference for different pieces of resource) determined by the MMFC mechanism, node 
 (the total amount of resource is 100) will allocate its resource pieces 
 to three adjacent nodes 
. The number of 
 are 
, respectively. The density functions of nodes 
 for node 
's resource are defined as follows:
 
 
  Suppose that node 
's resource can be represented by a range , and the three pieces 
 can be represented by the ranges of 
. First, we consider that if part of 
 is within the range  (either 
 or 
). If we cut on the right of the range 
 to obtain 
, that is, 
, thus 
. In this case, when 
, 
 reaches its partial maximum value, that is, 
. Hence, 
. Since when 
 is within the range , 
, then 
. 
. Then, we can obtain 
. Therefore, allocating 
 to node 
 is not a welfare-maximizing allocation. If we cut on the left of the range 
 to get 
, that is, 
, 
 or 
, allocating 
 to node 
 is neither a welfare-maximizing allocation. Next, consider another scenario: 
 is within a range  (
 or 
). First, consider 
: we derive 
 and 
. Therefore, 
. Since 
 and 
, we derive 
. Allocating 
 to nodes 
 maximizes the sum welfare of these three nodes. In this case, allocating 
 to node 
 is not a welfare-maximizing allocation.

Second, when 
, 
. Hence, 
; further, we derive 
 
 or 
 
. Since 
 and 
, we derive 
 
 or 
 
. In this case, allocating 
 to node 
 is also not a welfare-maximizing allocation. Finally, consider 
: 
, 
, 
, 
. Hence, 
. In this case, allocating 
 to node 
 is still not a welfare-maximizing allocation. The demonstration for other ranges yields similar results. Therefore, the lemma holds.

We have proved that with -cuts, for any node v's resource, there does not exist a welfare-maximizing allocation subject to the preliminary allocation determined by the MMFC mechanism.
5.4. Existence of the EFMMFC mechanism
In this section, we confirm that the welfare-maximizing allocation subject to the preliminary allocation determined by the MMFC mechanism must exist. Any node 
 with resource 
 in a network will allocate its resource to adjacent nodes.

Lemma 5.3

Suppose that by the MMFC mechanism, we have determined node 
 allocates 
 resource to its adjacent node 
. Then, there must exist a small ϵ that satisfies 
.

Proof

Suppose node 
 allocates its resource to n adjacent nodes 
, 
. First, consider two adjacent nodes of 
, i.e. 
 and 
. We will prove that there must exist a small ϵ that satisfies 
: We arbitrarily choose one small piece of resource 
 from node 
's resource. If 
, then the proving is completed. If 
, for any node 
's remaining resource 
, 
. Therefore, there must exist a small piece of resource 
 that satisfies 
. Hence, we can find 
 satisfying 
, which means that we can select a smaller piece of resource 
 from 
 and 
 from 
 satisfying 
. Let 
, we derive 
. Similarly, the case for 
 can be proved. Therefore, there exists a small piece ϵ satisfying 
.

Next, we consider the case for 
 adjacent nodes. By the MMFC mechanism, we have determined a preliminary resource allocation: node 
 allocates its resource to n adjacent nodes 
. Suppose that we can find a small piece ϵ satisfying that for adjacent nodes 
, 
. We will demonstrate that we can still find a small piece of resource 
⁎
 satisfying 
⁎
⁎
⁎
: Suppose there exists a small piece ϵ satisfying 
. The small piece ϵ has equal utility value for the adjacent nodes of 
, i.e. 
. We represent it as t. If 
, then the lemma holds; if 
, then 
, 
. Hence, there must exist a small pieces 
 satisfying 
 and 
. (We prove it as follows: suppose that the resource 
 can be divided into several small pieces 
⁎
 satisfying the condition that for any one piece 
⁎
, 
⁎
⁎
⁎
. If 
⁎
⁎
 are satisfied for any one small piece 
⁎
, we derive 
 
⁎
, which makes a contradiction.) Hence, we can find 
 satisfying 
 Then, we can cut a smaller piece 
 from ϵ and 
 from 
 satisfying 
. We combine 
 and 
 into 
. Therefore, 
 satisfies 
, and the proving is completed.

Theorem 4

The EFMMFC mechanism always exists.

Consider a scenario where node 
 in the network allocates its resource to adjacent nodes 
. By Lemma 5.3, we can cut 
's resource into 
 and allocate 
 to node 
 satisfying that 
 and 
. Then, for any other allocation: allocating 
 to node 
⁎
.  
 
 
⁎
. Thus,(1) 
 
 
⁎
 When all the adjacent nodes 
 have the same density function, the equality in Eq. (1) always holds. Suppose there exist two adjacent nodes 
 and 
 that have different density functions for node 
's resource, then there must exist a strict welfare-maximizing allocation. Thus,  
 
 
⁎
. Suppose node 
 and node 
 have different utility density functions. By Lemma 5.3, there must exist a small piece of resource 
 within 
 (suppose 
 represents the piece allocated to node 
) satisfying 
 and for any other node 
, 
. Also, we can cut a small piece of resource 
 from 
 (
 is allocated to node 
) satisfying 
 and 
. Exchange 
 and 
. Then we derive:(2)
 and(3)
 Then, we will show that allocating 
 to node 
, 
 to node 
, 
 to node 
 is a strict welfare-maximizing allocation: Suppose another allocation in which 
 is allocated to node 
⁎
, 
 to node 
⁎
 and 
 to node 
⁎
. Then, we derive:(4) 
 
⁎
⁎
⁎
 
⁎
⁎
 
 Therefore, the theorem holds.
6. Extensions to multiple agents
In this section, we consider the general scenario where each node in a network has an arbitrary number of neighbors. Since the result of the EFMMFC allocation depends on the nodes' utility functions, we consider a special scenario: any node 
 only values the range 
 for some 
. Such scenario may be aptly applied to the wireline network where users have a deadline 
 for data transmission, and they want to maximize their own benefits during the transmission period. Since the benefits a user achieves differs at different time periods, designing a fair and envy-free algorithm is of paramount importance. In order to design an EFMMFC allocation among  nodes, we first design a welfare-maximizing allocation among  adjacent nodes.

Due to the different utility density functions of nodes, the minimum number of cuts required to find the welfare-maximizing allocation is different among instances. For some instances in which the utility density function of a node has specific characteristics, we give a welfare-maximizing allocation algorithm with 
 cuts. In a network a node 
 allocates resource to node 
; we assume that node 
 only considers node 
's resource within the range 
 to be valuable (the utility density function is not zero), we derive:

Theorem 5

if 
 
 (if , then 
), there must exist a 
-cut welfare-maximizing allocation.

We present the 
-cut algorithm in Algorithm 3:
Algorithm 3
Download : Download high-res image (108KB)
Download : Download full-size image
Algorithm 3. A welfare maximization allocation algorithm with O(n2)-cuts.

Theorem 6

The mechanism presented in Algorithm 3 finds the welfare-maximizing allocation subject to the preliminary resource allocation by the MMFC mechanism.

Proof

We first prove that the resource allocation by Algorithm 3 is a welfare-maximizing allocation. In Algorithm 3, the node 
's resource within the range 
 
 
 is divided evenly (by the amount of resource) into 
 pieces and assigned to its neighbor node 
, 
, and each node receives exactly one piece.

Since this step does not allocate any resource to nodes 
, the amount of resource these nodes receive is 0. The nodes might have different utility functions for the pieces of resource, and the utilities of resource pieces for the nodes are shown in the matrix (5). First, we will explain why the 1st to the th lines of the matrix (5) is 0: as shown in Algorithm 3, we allocate node 
's resource within the range 
 
 
 to node 
. However, node 
 only considers that node 
's resource within the range 
 
 has utility. Therefore, the value from the 1st to the th line of the matrix is 0.(5)

At the same time, since the amount of resource allocated to the node 
 is 0, the value from the 1st to the th column of the matrix is 0. Consider another allocation: reallocating the piece that was originally allocated to node 
 to node 
⁎
. Since  
 
 is a welfare-maximizing allocation, we can derive:(6) 
 
 
⁎
 For nodes that have not been allocated resource, we consider that the amount of resource these nodes received is 0. Since 
 and 
, Further, we derive:(7) 
 
 
⁎
 Since each round of allocation in Algorithm 3 is a welfare-maximizing allocation, we derive:(8) 
  
 
(9) 
  
 
⁎
 Therefore, the resource allocation obtained from Algorithm 3 is a welfare-maximizing allocation.

Obviously, the number of cuts in Algorithm 3 is: 
 
, which is 
.
7. Numerical example
As shown in Fig. 3, the network is divided into several sub-networks by the MMFC mechanism. The results are shown in Table 2. The nodes in the sub-network and the edges connecting these nodes form a set pair. According to the EFMMFC mechanism, the preliminary resource allocation is determined (only the number of allocated resource is determined, while the different utility density functions of nodes are not considered). The results are shown in the matrix (10):(10)

Fig. 3
Download : Download high-res image (64KB)
Download : Download full-size image
Fig. 3. A network.


Table 2. The set pair and corresponding resource exchange rates by the MMFC mechanism.

(v1,v3),(v2)	
 
 
(v4,v6,v8,v10,v13),(v5,v7,v9,v12)	
 
2
(v14,v16,v18,v19),(v11,v15,v17)	
 
4
Line i and Column j in the matrix represents the amount of resource allocated by node 
 to node 
. Afterwards, we need to consider how to divide each node's resource and allocate the resource to its neighbors. Take node 
 as an example. After network decomposition by the MMFC mechanism, node 
 is in the set pair 
; For the nodes within the set 
, they have the same resource exchange rate: 
 
. Node 
 allocates resource to its neighbors: 
. One allocation that meets the preliminary resource allocation determined by the MMFC mechanism is: 
. The nodes 
 have different utility density functions for node 
's resource, but the total resource of node 
 has the same total utility for them, i.e. 60; node 
 just considers node 
's resource within the specific range of 
 to be valuable; therefore, as an example of the Algorithm 3, we define: 
, 
, 
, 
. Define 
 as the utility density function of node 
 to node 
. Thus, 
. 
 is shown in Eqn. (11). Each node only considers the part of its neighbors' resource within a certain range to be valuable (this part has non-zero utility for the node).(11)
 
 
 
 
 
 
 
 
 
  According to the Algorithm 3, there are a total of 
 allocations. In each allocation, the resource of node 
 within a specific range is divided evenly into several pieces according to the amount of resource and allocated to adjacent nodes. We define 
 as the number of resource allocated to node 
 in the tth resource allocation of the algorithm. For instance, in the first allocation of node 
's resource, we divide its resource and allocate resource within the sub-range  to node 
, while the nodes 
 will not receive any resource. Thus, 
. The result of the resource allocation is shown in the matrix (12):(12) The values in the matrix represent the utility of resource within a certain range for nodes. For example, the value in the 4th line and the 3rd column of the matrix represents the utility of node 
's resource within the range  to node 
. According to the utility density function of node 
, 
. Therefore, the value in the 3rd line and the 4th column is 0. For node 
, in the second resource allocation, we cut at points 33 and 39, and then allocate the resource within the range  and  to nodes 
 and 
, respectively. The results are shown in the matrix (13):(13) In the third resource allocation, we allocate the resource within the range , ,  to nodes 
, 
, 
, respectively. The results are shown in the matrix (14).(14) In the fourth resource allocation, we allocate the resource within the range , ,  and  to nodes 
, 
, 
 and 
, respectively. The results are shown in the matrix (15).

Since the four resource allocations are all welfare-maximizing allocations, the resource within the ranges  is allocated to node 
, resource within the range  to node 
, those within the range  to node 
, and those within the range  to node 
.(15)(16) The amount of resource allocated to nodes 
 are , respectively, which meets the preliminary allocation determined by the MMFC mechanism. Then, we calculate the price vector 
 (
 represents the price of the piece of resource that node 
 allocates to node 
) satisfying:(17)
 Specifically, it should satisfy:(18)
  Therefore, the price vector that meets the above conditions is not unique. For example: 
 is a group of prices that meet the conditions above, and so is another group of prices 
 
. After the price vector has been determined, the resource allocation from node 
 to its adjacent nodes is envy-free. If we select the price vector 
, the node 
 will not envy others' share of resource allocated by node 
. For example, if node 
 chooses node 
's resource, it will get the benefit (utility minus price): , which is smaller than that it gets from its own resource pieces. Similarly, node 
 cannot get more benefit by choosing the resource allocated to other nodes. Therefore, node 
's resource allocation is envy-free.

8. Conclusion
In this study, we introduced the EFMMFC mechanism, which could ensure envy-free allocation of resource among nodes in a network based on the max-min resource exchange rate vector. We investigated the welfare-maximizing problem and showed that there must exist a 2-cut welfare-maximizing allocation when resource was allocated to only two nodes. However, when resource was allocated among  nodes, a generalized -cut welfare-maximizing algorithm was confirmed to be not available. After that, through theoretical analyses, we demonstrated the inevitable existence of the EFMMFC mechanism. Then, we put forward the 2-cut welfare-maximizing algorithm. Furthermore, by putting some restrictions on nodes' utility function, we introduced an 
-cut welfare-maximizing allocation algorithm. In the future, we aim to study the fair allocation under the max-min resource exchange rate in other special graph structures and investigate fair allocation under other restrictions of the utility function.