Abstract
The shortest augmenting path technique is one of the fundamental ideas used in maximum matching and maximum flow algorithms. Since being introduced by Edmonds and Karp in 1972, it has been widely applied in many different settings. Surprisingly, despite this extensive usage, it is still not well understood even in the simplest case: online bipartite matching problem on trees. In this problem a bipartite tree T=(W⊎B,E) is being revealed online, i.e., in each round one vertex from B with its incident edges arrives. It was conjectured by Chaudhuri et al. [6] that the total length of all shortest augmenting paths found is O(nlog⁡n). In this paper we prove a tight O(nlog⁡n) upper bound for the total length of shortest augmenting paths for trees improving over O(nlog2⁡n) bound [3].

Keywords
Algorithm
Online
Incremental
MatchingTree

1. Introduction
One of the most fundamental techniques used to solve maximum matchings or flow problems is the augmenting path technique. It augments the solution along residual paths until the maximum size matching/flow is found. Intuitively, the work needed for that should be minimized if the shortest paths are chosen each time. In particular, this was the key concept that allowed Edmonds and Karp in 1972 to show the first strongly polynomial time algorithm for the maximum flow problem [8]. Since then it has been widely applied. Surprisingly, despite this effort, it is still not well understood even in the simplest case — online bipartite matching problem on trees. This may be due to the fact that shortest augmenting paths do not seem to have strong enough structure to admit exact analysis. Other methods for choosing augmenting paths are easier to analyze [2], [6]. Our work is meant as a step forward towards understanding the shortest augmenting path method for computing the matching on bipartite graphs.

To be able to analyze this approach we adopt the following model. Let W and B be the bipartition of vertices over which the tree will be formed. The set W (called white vertices) is given upfront to the algorithm, whereas the vertices in B (black vertices) arrive online. We denote by 
 the forest after the t'th black vertex has arrived where  is a disjoint sum of X and Y. The graphs 
 for  are constructed online in the following manner. We start with 
. In turn  a new vertex 
 together with all its incident edges 
 is revealed and 
 is defined as: 
 and 
. In the model we consider, none of the newly added edges is allowed to close the cycle. For simplicity we assume that we add in total  black vertices. The final graph is a tree denoted as 
.

The goal of the online algorithm is to compute for each 
 the maximum size matching 
, possibly making use of 
. In this paper we study one specific algorithm, referred to as the Shortest Augmenting Path algorithm. When 
 arrives, the Shortest Augmenting Path algorithm always chooses the shortest among all available augmenting paths. A natural question that we ask is what is the total length of all paths applied by the Shortest Augmenting Path algorithm. In this paper the unmatched vertices are referred to as free. For a vertex v we denote its neighborhood in 
 as 
. By  we denote a subgraph of F induced by , where .

2. Motivation and related work
The online bipartite matching problem with augmentations has recently received increasing attention [1], [2], [3], [6], [9], [10]. The model we study has been introduced in [9]. As mentioned before, the key point of this model is to focus on bounding the total length of augmenting paths and not the running time of the algorithm. This is motivated as follows. Imagine that the white vertices are servers and the black vertices are clients. The clients arrive online. A typical client may be a portable computing box, trying to connect to a huge network of services with some specific request. The edges of the graph reflect the eligibility of the servers to answer clients requests. The classical online model (as in [4], [7], [12]) does not allow preemption, i.e., the client cannot change the server. In such a setting, one must accept some clients not being served while they could possibly be served with preemption. In that model a famous ranking algorithm gives an optimal -approximation [12]. The authors in [9] wonder if preemption makes sense. It may be beneficial to reallocate clients provided that only a limited number of reallocations is needed. This leads to the question of how many reallocations are needed if one insists on serving every client. In [9] a special case is studied when each client can connect to at most two servers. In such a scenario, the authors prove that the Shortest Augmenting Path algorithm performs  reallocations and that no algorithm can do better than that. Chaudhuri et al. [6] show that the Shortest Augmenting Path algorithm makes a total of  reallocations in the case of a general bipartite graph, provided that the clients arrive in random order. They conjecture, however, that this should be the case also for the worst case arriving order of clients. Until this paper, this conjecture remained open even for trees. In [3] the authors prove a bound of 
 for Shortest Augmenting Path algorithm given that the underlying graph is a tree. In this paper, we take a different approach and prove the conjecture of Chaudhuri et al. for trees. In this restricted case, the authors of [6] proposed a different augmenting path algorithm that achieves total paths' length of . Their algorithm, however, is only applicable to trees. The Shortest Augmenting Path algorithm, on the other hand, applies to any bipartite graph and also is very simple. This is the reason why we feel it is important to study this algorithm. Our ultimate goal is to show the bound of  for general bipartite graphs. We believe that the techniques proposed in this paper are an important step forward on the path to achieve this goal. In parallel work to ours [1] the authors provide a bound of 
 total number of reallocations for the Shortest Augmenting Path algorithm on general bipartite graphs. This recent result has been accepted to SODA 2018 and it nearly closes the conjecture of Chaudhuri et al. We note, however, that their techniques alone do not lead to  even for trees. Before this result, for general graphs, nothing interesting was known for Shortest Augmenting Path algorithm. A different algorithm was proposed achieving much worse  bound on the total length of augmenting paths [2].

Our model is strongly related to dynamic algorithms. There, we are not only interested in constructing short augmenting paths. An efficient way of finding them is the most important aspect. Most papers in this area consider edge updates in a general fully dynamic model which allows for insertions and deletions of edges intermixed with each other. This is a much more difficult scenario in which one cannot do much when constrained by our model. In particular, if edges are added to a bipartite graph, one can show an instance for which any algorithm maintaining a maximum matching performs 
 reallocations. Hence, it is reasonable to stop insisting on matching every client and accept approximate solutions. Here we want to approximate the maximum matching size and not the number of reallocations. One also needs to keep in mind that a trivial greedy algorithm maintaining a maximal matching gives a 1/2-approximation and applies no reallocations at all. A 2/3-approximation algorithm by [13] achieves  update time. Gupta and Peng give a -approximation in 
 time per update [11]. The  barrier was broken by Bernstein and Stein who gave a 
 
-approximation algorithm that achieves 
 update time [5]. Finally,  approximation in 
 total time and with 
 total length of paths was shown in [2] in a model most related to ours, i.e. when vertices are added on one side of the bipartition. There are also randomized algorithms in the dynamic model [14] maintaining the exact size of a maximum matching with 
 update time. They do not imply any bound on the number of changes to the matching as they use algebraic techniques that are not based on augmenting paths.

3. The mini-max game
Our goal in this paper is to prove that the total length of all augmenting paths applied by Shortest Augmenting Path algorithm on a tree is . More formally, we want to prove the following, where by

Image 1
we denote the number of edges on a path π.
Theorem 1

Let 
 be the path applied by Shortest Augmenting Path algorithm in turn t. Then

Image 2
.
The idea is not to study directly the paths applied by Shortest Augmenting Path algorithm, but a collection of other paths that are possibly longer. To be more precise, we model a scenario where in each turn Shortest Augmenting Path algorithm gets the worst possible matching on 
 (i.e., the one maximizing the shortest augmenting path). We then study the worst case augmenting paths rather than the ones given by the matching produced by Shortest Augmenting Path algorithm. Interestingly, these paths can be defined without mentioning any matching. In this section, we provide the appropriate definitions and show that they work as expected.

Let us consider what the worst possible matching could be. Think of a game, where the algorithm chooses a shortest augmenting path, and the adversary chooses a matching where such path is the longest. We are given graph 
 and the newly presented vertex 
. We are interested in a matching where 
 is not matched so that we model the worst case matching before 
 is matched. The game starts in vertex 
, where the algorithm may choose which edge to follow among the unmatched edges incident to 
. Then the algorithm stumbles upon a white vertex where it has to follow the matching edge chosen by the adversary. The game continues until a leaf is reached (either black or white, black meaning that the algorithm did not find a path). It is not hard to see that the algorithm, when it has a choice, wants to minimize the distance to a free white vertex, while the adversary tries to maximize it. This way we obtain a two-person game, where the outcome of the game is the length of the shortest augmenting path. If the path does not exist, we let the outcome be infinite. Throughout the paper, we let  and we write  to indicate that x is simply an integer.

We move on to stating some formal definitions. We start by introducing our game on any rooted tree T whose vertices are either black or white. We then define the outcome of the algorithm player in time t for a specific T closely related to 
. For a rooted tree T we denote the list of children of a vertex v in T as 
 and a parent of v as 
.

Definition 1

Let T be a rooted tree whose vertices are partitioned into two sets: .

1.
For each  we define its revenue as
 

2.
and for each  we define its revenue as
 

3.
We let 
 be the child of v whose revenue determines the minimum or the maximum respectively.1 If v has no children, 
 is undefined.

4.
We define the mini-max path starting in a vertex v as2
 

Definition 1 is illustrated by example in Fig. 1. Based on this definition we can define the first and the second mini-max distance from a given vertex to a white leaf in a specific time moment t. In addition to that, we define the first and second direction, i.e., the vertex one needs to follow to find the first and second mini-max distance.

Fig. 1
Download : Download high-res image (45KB)
Download : Download full-size image
Fig. 1. Example of a rooted mini-max tree with vertex revenues.

Definition 2

Let  and 
. Let T be the connected component of v in 
 rooted in v. Let
 Let now S be a rooted tree, where from T we remove 
 and all its descendants. Let

Observation 2

Fix a vertex . The functions 
 and 
 are non-decreasing with respect to t for the whole range of t where 
.

Proof

We only prove monotonicity of 
 here, the proof of monotonicity of 
 is analogous. Fix . We claim that 
 provided that 
. Let T be a component of v in 
 rooted at v and S be a component of v in 
 rooted at v. Note that S is a subtree of T. By definition it holds that 
 and 
. We prove our claim by a bottom-up induction on T. The inductive hypothesis we prove is that 
 for .

First assume that u is black. The neighborhood of u does not change from  to t, since after u is presented, it never changes its neighborhood. Therefore 
. If u is a leaf of T, then 
. If u has children then by induction hypothesis on children it follows that
 
 

Now assume that u is white. The neighborhood of u can change from  to t, but it can only increase, meaning that 
. If u is a leaf in T, then by the fact that 
 is non-negative it holds that 
. If u has children in T, then by induction hypothesis we infer that
 
 
 
 □

We intuitively explained how the mini-max distances correspond to the augmenting paths of the worst case matching, so the hope is that they bound from above the augmenting paths applied by Shortest Augmenting Path algorithm. The next lemma shows that this intuition is reflected in reality. It states that no matter what matching is given on 
 for some , the path chosen by Shortest Augmenting Path algorithm to match 
 is bounded by 
.

Lemma 3

Let 
 and let 
 be the shortest augmenting path from 
 to a free white vertex according to any given matching M in 
 where 
 is free. It holds that if 
 then 
 exists and

Image 3
.
Proof

Fix 
 and 
. Let T be the connected component of 
 in 
 rooted at 
. We prove our lemma by a bottom-up induction on T.

Before we state the inductive hypothesis, we need to introduce a few more definitions. We denote as 
 the shortest alternating path from v to a free white vertex in the subtree of T rooted at v. Here, an augmenting path is taken with respect to M, and a white vertex is considered free if it is free in the subtree. If there is no such alternating path we write 
 for which length

Image 4
. It is not hard to see that such a path is either a single free white vertex, or it starts with an unmatched edge if v is black and with a matched edge if v is white. When we say that a vertex is unmatched from below, we mean that all its incident edges leading to its children in T are free from matching. Similarly, we say that a vertex is unmatched from above if the edge leading to its parent in T is free from matching.
Our inductive hypothesis states the following. If v is

(a)
black and unmatched from below or

(b)
white and unmatched from above

then
Image 5
.
Let us first assume that v is black. If v is a leaf in T, then 
, so

Image 6
, so the hypothesis is fulfilled. Let us consider the case when v is not a leaf. We consider two sub-cases of this case. First assume that 
. This implies that 
 for all 
. By induction, it holds that
 
 Now assume that 
. Let w be a successor of v on 
 and let 
. Then by the power of induction, we infer that
Let us now assume that v is white. If v is a leaf, then

Image 8
so the hypothesis is fulfilled. If v is not a leaf, we again consider two cases. First assume that 
. In such case there has to be a vertex 
 matched to v, otherwise v is free and the path 
 exists. In such case 
 otherwise there would exist augmenting path also from v. Then by inductive assumption 
. From that it follows that
 
 Now assume that 
. In this case either v is free in its subtree and
Image 9
, or there is a vertex 
 matched to v. But then by the power of induction we infer that
This proves the hypothesis, in particular this proves that

Image 11
. Note that if 
, then
Image 12
, and that by definition implies that 
 exists and
Image 13
. □
4. Dead vertices
In this section, we introduce another concept that is crucial for our result. We define here dead vertices and give some intuition why this makes sense. In fact dead vertices reflect the infinity of some mini-max distance functions. For completeness, in addition to defining dead vertices, we describe the situations when the mini-max distance functions are infinite. We start with the statements.

Definition 3

A vertex 
 breaks Hall's condition in time 
 iff there exists 
 such that

1.
,

2.
, and

3.
X is a minimal set under inclusion satisfying (2).

Lemma 4

Let 
. Then 
 iff 
 breaks Hall's condition in time t.

Proof

“⇐”:. Assume that 
. Then, by Lemma 3, an augmenting path exists from 
 for a maximum matching M where 
 is free. By Hall's theorem this implies that 
 does not break Hall's condition.

“⇒”:. Let T be the connected component of 
 in 
 rooted at 
. Assume 
. We are going to define a subtree S of T such that 
 is precisely the set X that certifies that 
 breaks Hall's condition in time t.

For that we first define a forest F that is a subgraph of T and pick one component of F to be S. Let 
, where 
 are the white vertices of T, 
 are the black vertices of T and 
, where
 Next we let S be the connected component of 
 in F rooted at 
. The construction of S is shown in Fig. 3. Before we proceed, we prove a helpful observation that 
 holds for all . To that end we assume for the sake of contradiction that there is  such that 
 and we pick the closest to the root such vertex. Then 
. We consider two cases. If u is white then 
 is black and thus
 
 This gives a contradiction. If, on the other hand, u is black then 
 is white and hence, due to the way S is constructed, v has only one child u in S. Thus
 
 This also gives a contradiction.

Fig. 3
Download : Download high-res image (106KB)
Download : Download full-size image
Fig. 3. The construction of rooted tree S in the proof of Lemma 4.

Let us denote white vertices of S as 
 and black vertices of S as 
. Now let 
. We prove that conditions (1)-(3) of Definition 3 hold for X. Condition (1) trivially holds. Let us consider condition (2). Since 
 for all 
, every 
 has a child in S and by the way S is constructed this child is unique. On the other hand each black vertex 
 has a unique parent. This gives a one-to-one map 
 (such that 
) and implies 
.

We move on to proving condition (3). Let 
. If 
 then 
. So, we can assume that 
. Then there exists 
 such that 
. Thus
 This proves the minimality of X and ends the proof of the lemma. □

Lemma 4 reveals the following corollary.

Corollary 5

If 
 is infinite, and we are given some maximum matching 
 for 
, then there is no augmenting (with respect to 
) path for 
 in time t.

Proof

Follows directly from Hall's theorem. □

We now move on to defining dead vertices. The definitions may not seem very intuitive, but we provide some intuition shortly after introducing them.

Definition 4

We say that a vertex 
 is dead in turn 
 iff 
.

Definition 4 combined with Lemma 4 implies, that any black vertex that breaks Hall's condition in time t is dead in time t, but not necessarily the other way around.

Definition 5

A white vertex  is dead in time t iff 
.

We say that a vertex is alive iff it is not dead. We denote as 
 the set of vertices of 
 that are alive in turn t and as 
 the set of vertices of 
 that are dead in turn t. If 
, we say that v dies in turn t. Note that due to monotonicity (Observation 2), once a vertex dies, it never comes back alive. The following observations bring some intuition into the picture of dead versus alive vertices. Observation 6 given below follows from Definition 2, Definition 4 and 5.

Observation 6

1.
A black leaf is dead from the moment it arrives.

2.
A black vertex is dead iff it has at most one alive neighbor.

3.
A white vertex is dead iff it has at least one dead neighbor.

The intuition behind dead vertices is that they determine regions of 
 where Hall's condition is either broken or tight. The mini-max paths, in turn, t that correspond to finite mini-max distances do not visit vertices that were dead in turn . Moreover, if a mini-max path in 
 (whose corresponding mini-max distance is finite) enters a vertex that is alive in turn t, it does not visit any more vertices dead in turn t. We state this formally as Lemma 7. This reflects the behavior of augmenting paths. If a maximum matching is maintained, then the augmenting path from turn t does not enter the regions where Hall's condition is tight in 
.

Lemma 7

Let  and 
. Pick any vertex as a root of the connected component of v in 
 and let T be the corresponding rooted tree. Then 
.

Proof

Observe that(1)
 Let 
. We prove that 
 is alive by induction on . Vertex 
 is alive by the assumptions of the lemma. We now assume that 
 is alive and aim to prove that 
 is alive too. If 
 then by Observation 6 we know that all neighbors of 
 are alive. In particular 
. We are left with the case when 
 and 
. We aim to prove that w is alive, i.e. 
. Let S be the connected component of v in 
 rooted in w. For the reference see Fig. 4.

Fig. 4
Download : Download high-res image (120KB)
Download : Download full-size image
Fig. 4. Aliveness of mini-max-patht(v).

Then
 
 So it suffices to prove that 
 for any child 
 of w in S. If 
 then
 where the last inequality holds by aliveness of b. If 
 then the subtree of 
 is identical for T and S and as a consequence
 
 □

In the remainder of this section, we specify precisely which vertices die in turn t. The first lemma does not describe who dies or stays alive, but it is an important complement of the subsequent two lemmas, which cover all the situations when vertices die.

Lemma 8

If 
 does not break Hall's condition in turn t, then 
 has at least one neighbor in 
 which was alive in turn .

Proof

Let T be the component of 
 in 
 rooted at 
. By Lemma 4 we have that
 
 
 Hence, the new vertex 
 has a white neighbor 
 such that 
. By definition 
 is alive in turn . □

So if a black vertex added in turn t does not break Hall's condition, then it has at least one neighbor who was alive in turn . The next two lemmas cover two cases. The first lemma states that if the new black vertex has at least two such neighbors, then no vertices die in turn t. If, however, it has exactly one such neighbor, then some vertices die in turn t and the second lemma describes precisely which ones.

Lemma 9

If 
 has at least two neighbors which are alive in turn  then 
 is alive in turn t and no vertex dies in turn t.

Proof

We first prove that no vertex dies, in turn, t. Let 
 for some  and assume that 
 is as stated in the lemma. Let T be the connected component of u in 
 rooted at u and let S be the component of u in 
 rooted at u. If u is not connected to 
 in 
, then by definition 
 since . Hence, u does not die in turn t.

Otherwise 
 contains a vertex of T, let it be w. For this case, to prove that u does not die in turn t, we show the following:

Let 
 be the graph obtained by removing edge 
 from 
. Let R be the connected component of 
 in 
, rooted at 
. The only difference between T and S is that 
 becomes a child of w in S and R is attached to T via edge 
. This is illustrated in Fig. 5 to the left. Note that the only vertices who change their mini-max revenue are on the path 
 from u to w in T. Also, in the proof of Observation 2 we proved that 
 for . These two observations imply that it suffices to show that 
. Due to the assumption of the lemma, there exists 
 such that 
. Thus
 
 For the reference see Fig. 5 to the right.

Fig. 5
Download : Download high-res image (88KB)
Download : Download full-size image
Fig. 5. The case when bt has at least two neighbors which are alive.

Hence
  To complete the proof it remains to show that 
. Let T be a component of 
 rooted at 
. Note that 
 for 
. Since there exists 
 such that 
 for , we have 
 and 
. □

The last lemma covers the only case when vertices die in turn t. It shows that there is a certain region around 
 where vertices die, and a barrier for that region are special vertices called life portals, defined below. The picture illustrating which region dies in turn t is given in Fig. 6.

Fig. 6
Download : Download high-res image (215KB)
Download : Download full-size image
Fig. 6. The vertices that die in turn t.

Definition 6

A black vertex b is a life portal in turn t iff 
. The set of life portals in turn t is denoted as 
.

Lemma 10

If 
 has exactly one neighbor in 
 which was alive in turn  and there is a path π from 
 to 
 such that

1.
all vertices of π were alive in turn  and

2.
there are no life portals from 
 on π,

then v dies in turn t. Vertices of 
 that cannot be reached from 
 via such path do not die in turn t.
Proof

The illustration for this lemma is provided in Fig. 6. By monotonicity of 
 and 
 functions with respect to t (see Observation 2), the vertices dead in turn  remain dead in turn t. By Definition 2, Definition 4 vertex 
 dies in turn t. By Observation 6 all other vertices on π also die in turn t. What we need to prove is that the remaining vertices stay alive, i.e., do not die in turn t.

For the sake of this proof we introduce notation for a rooted subtree. For a rooted tree T and a vertex  we let 
 denote the subtree of T rooted at u containing u and all its descendants in T. We first observe that 
 due to Observation 6. For 
 let 
. Due to Definition 6, 
. We first prove that life portals remain alive, i.e., 
. Let T be the connected component of 
 rooted in p and let S be the connected component of 
 rooted in p. Observe that 
. There is only on vertex 
, for which 
. Hence, there exist two vertices 
, for whom 
 for . It then holds that for :
 Also, 
 contains either 
 or 
, say it contains 
. Then
 
 Now let 
 such that u was alive in turn . It remains to prove that u does not die in turn t. If u is not connected to 
 in 
, then u obviously stays alive in turn t. Otherwise there is a unique path from u to 
 in 
 and this path contains a life portal, let it be 
. Let now T be a component of u in 
 rooted in u and let S be a component of u in 
 rooted in u.

Let 
 be the graph obtained by removing edge 
 from 
. Let R be the connected component of 
 in 
, rooted at 
. The only difference between T and S is that 
 becomes a child of some vertex 
 and R is attached to T via edge 
. Also, in the proof of Observation 2 we proved that 
 for .

Based on these observations, it suffices to show that 
. For that it suffices to show that 
. Now observe that 
 (one of the vertices in 
 could be p's parent). Let 
. Then there is 
 such that 
. Since 
, it holds that
 This implies that
 
 □

Corollary 11

Lemma 10 shows, that for all t such that 
 does not break Hall's condition and has exactly one neighbor alive in turn , statement 
 in Definition 6 is equivalent to 
.

5. The proof
5.1. The introduction
In the remainder of the paper we present the proof of Theorem 1, which states that if 
 is the path applied by Shortest Augmenting Path algorithm in turn t, then

Image 14
. As we mentioned in Section 3, we do not study
Image 15
directly. Instead, we want to study distance functions 
 introduced in Section 3. By Lemma 3 given in Section 3 we know that 
 bounds
Image 15
from above. Recall that 
 is the mini-max distance from 
 to a white leaf in 
. By definition if 
, then there is a path from 
 to a white leaf which certifies it. We introduce the formal definition of such a path below.
Definition 7

Let  and 
. Let T be a connected component of v in 
 rooted at v. Then 
.

Note that by Definition 1, Definition 2, if 
, then

Image 16
. In addition to that, we define a path that certifies that 
 is finite.
Definition 8

Let  and 
. Let S be a connected component of v in 
 rooted at v, where 
 denotes 
 with edge 
 removed. Then 
.

Again by Definition 1, Definition 2, if 
, then

Image 17
. Instead of proving Theorem 1, in the remainder of this paper we prove that
Image 18
. This is in fact a stronger statement. We claim that even if the adversary picks the worst possible maximum matching in each turn, the Shortest Augmenting Path algorithm still applies paths of total length . Note that if 
, then due to Corollary 5 Shortest Augmenting Path algorithm cannot match the new vertex 
 if the maximum matching is given on the remaining vertices. Our proof of such a simple statement is unfortunately rather complex. Before we move on to it, we give some intuitions on where the actual problem hides. It is enlightening to discover, that with the additional assumption that the black vertices are of degree two or more, the statement above has a very simple proof.
Lemma 12

If each black vertex 
 has degree at least 2, then

Image 19
.
Proof

We start by observing that no vertex ever dies. In turn  the only presented vertices are W, so by definition all vertices are alive in turn . Let  and assume that no vertices died up until turn . Due to Lemma 9 no vertex dies in turn t and 
 is alive in turn t. This implies that 
 and 
. Hence, 
 and 
 are two separate paths, contained in two different components of 
 connected in turn t by 
. Also,

Image 20
. Thus, 
 is at most as long as the size of the smaller of the two components. We pay for 
 by charging 1 token to each vertex in every component but the largest one among the components of 
 connected by 
 in turn t. A vertex v is charged when v's component size increases at least twice, so v cannot be charged more than 
 times. This gives a total charge of at most 
. □
The essence of this proof is that every time a black vertex is added, it connects at least two trees into one. As a consequence, there are at least two alternative mini-max paths starting from the added vertex, each in a separate tree. The length of the shorter of the two can be charged to the vertices of the smaller tree. If we allow black vertices of degree 1, the situation becomes more complicated, because: (1) there is no alternative path, i.e., the path needs to follow the only edge adjacent to the newly added black vertex, and (2) no trees are merged. Nevertheless, the proof of Theorem 1 is a generalization of the proof of Lemma 12. The majority of the remainder of this paper is devoted to addressing issue (2). We define trees that are merged in each turn and allow us to introduce the charging scheme that generalizes the scheme of Lemma 12. We start, though, by addressing issue (1). To that end, we introduce a concept of a dispatching vertex. Even though 
 does not necessarily fork into two alternative mini-max paths, there is another vertex that does. It is the first life portal on 
. We refer to it as the dispatching vertex, in turn, t. To be more formal, we introduce the following definition.

Definition 9

The dispatching vertex at time  is the first black vertex on 
 such that 
. We denote it as 
.

First observe that 
 has two alive neighbors in turn t, so there are two alternative mini-max paths branching from 
. Our next observation is that if 
, then 
: if 
 has two neighbors alive in , then due to Lemma 9 no vertex dies in turn t so 
 has two neighbors alive in turn t and hence 
; otherwise, if 
 has one neighbor alive in turn , then due to Lemma 10 and Corollary 11 it holds that 
 is the first life portal of 
 on 
. Then also 
 is the first vertex on 
 that remains alive. All vertices that follow 
 on 
 remain alive as well. It may happen that 
 contains no life portals, in which case there is no dispatching vertex defined in turn t. This case however is not of concern, since the whole 
 dies in turn t due to Lemma 10. In general, we do not have to worry about vertices that die, and we state this observation as Observation 13 preceded by Definition 10.

Definition 10

Let  be such that 
. We let 
, where 
 is the prefix of 
 that dies (possibly empty) and 
 is the corresponding suffix (also possibly empty).

Note that if 
 is defined then 
 begins with 
. Since the final forest has 2n vertices and each can die only once, we have the following:

Observation 13

Image 21
.
Thus, to bound

Image 22
it suffices to bound
Image 23
. We conclude the list of properties of the dispatching vertex with the following observation.
Observation 14

Let  and 
 and 
 is defined. Then

Image 24
.
Proof

The statement of the observation holds by definition if 
. Otherwise the only possible scenario is the one covered by Lemma 10. Let 
 be the predecessor of 
 on 
. According to Lemma 10 it holds that 
. By Lemma 7 path 
 cannot visit 
. Therefore 
, and this implies the desired claim. □

To proceed further, we introduce the crucial notion in our proof: the notion of a level. The levels are some numbers assigned to vertices: each vertex is assigned its level. The intuitive meaning of the level of a vertex is the following. Consider 
, which is the worst case shortest augmenting path for a black vertex 
 added in turn t. For a vertex v, if 
 crosses v, level in 
 returns the value representing the length of the suffix of 
 starting in v. Formally, the level function is defined in the following way.

Definition 11

For  and  let
 

It may at first seem confusing that the level of a white vertex is the second maximum distance to a leaf. It is defined this way because, surprisingly, in every turn t the path 
 enters its white vertices through the edge determining the maximum distance from the white vertex to a leaf. We illustrate the introduced definitions in Fig. 7. There, we present an example of how the vertices change levels as we run the algorithm in an online scenario. We mark the dispatching vertices in each turn. An important property of the level function is that the levels of vertices drop by at most one along both 
 and 
.

Fig. 7
Download : Download high-res image (235KB)
Download : Download full-size image
Fig. 7. Levels.

Lemma 15

For 
 and 
 it holds that 
.

5.2. The behavior of the levels on a path
This subsection is devoted to proving Lemma 15. The proof requires analyzing many trees rooted at the vertices of the considered mini-max paths. Such an analysis becomes much simpler if we reformulate some of the definitions introduced in the paper. We start by reformulating the definition of the  function.

Definition 12

For , 
 such that 
 the determined mini-max distance is defined as
 
  The vertex 
 which determines the maximum is denoted as 
. If there are more such vertices we choose the first one in some predefined order on the vertices . If 
 is empty then 
 is not defined. The vertex 
 which determines the minimum is denoted as 
. If there are more such vertices we choose the first one in some predefined order on the vertices . If 
 is empty then 
 is not defined.

It is easy to observe that if we take a connected component of a vertex 
 and we indicate v as a root then we obtain a rooted tree T and the following holds
  for all . As a consequence we obtain two observations that follow.

Observation 16

For , 
 the mini-max distance equals
 
  Vertex 
 which determines the minimum equals 
. If there are more such vertices this is the first one in some predefined order on the vertices . If 
 is empty than 
 is not defined. Vertex 
 which determines the maximum equals 
. If there are more such vertices this is the first one in some predefined order on the vertices . If 
 is empty than 
 is not defined.

Observation 17

For , 
 the mini-max distance equals
 
  Vertex 
 which determines the minimum equals 
. If there are more such vertices this is the first one in some predefined order on the vertices . If 
 is empty than 
 is not defined. Vertex 
 which determines the maximum equals 
. If there are more such vertices this is the first one in some predefined order on the vertices . If 
 is empty than 
 is not defined.

The meaning of 
 and 
 functions is given by the following observation which follows from Definition 12 and Observation 16, Observation 17.

Observation 18

For each 
 it holds that

Observation 18 provides a formula for 
 and 
 in terms of 
. If we want to determine 
 by 
 and 
 it is worth noting that 
 almost always equals 
. The only exception is when 
 is determined by u and equals 
.

Observation 19

For any edge 
 the following holds
 

Because  is a min (max) taken over a bigger set than  we have the following.

Observation 20

For  and 
 such that 
 the following holds

The function 
, given an entry edge  to a vertex u, returns one plus the distance of some neighbor 
 of u other than v. This defines a determined mini-max path in a natural recursive way. An undetermined mini-max path can be defined using the notion of a determined mini-max path.

Definition 13

For any  and 
 we define
 

We observe the following.
Observation 21

Let  and 
. Then
 
 

The next observation shows a relation between mini-max functions and the lengths of the corresponding mini-max paths.

Observation 22

For any  and any edge 
 and 
 we have that

We are now ready to prove the following interesting property that says that the level of the  and  can not change by more than ±1.

Lemma 15

For 
 and 
 it holds that 
.

Proof

We present the proof for  and then 
. The case when 
 is symmetric. We split this case into the following four subcases.

First subcase
We assume that 
 and 
. Then

Second subcase
We assume that 
 and 
. Then
 On the other side we have that
 

Third subcase
We assume that 
 and 
. Then
 but it is not possible.

Fourth subcase
The last case describes situation when 
 and 
. Then
 □

5.3. The main proof
We are ready to move on to the proof of Theorem 1. We consider two cases:

1.
the level of a dispatching vertex in turn t grows by at most a factor of β

2.
the level of a dispatching vertex in turn t grows by more than a factor of β

where β is some constant value greater than 1 which we reveal later on. The total length of paths 
 satisfying case (1) is bounded by Lemma 23 while the total length of paths 
 satisfying case (2) is bounded by Lemma 24.
Lemma 23

For cases when 
, 
 is defined and 
 the total length of paths 
 is bounded by 
.

Proof

Let t be such that it satisfies the assumptions of the lemma. First observe that 
, otherwise 
. Due to Lemma 8 and Lemma 9, 
 has precisely one neighbor alive in turn .

To show an appropriate charging scheme, consider the final forest 
. We study the connected components of a subforest 
 of F induced on vertices alive in turn t. Recall that vertices not yet presented are considered alive. In turn t some vertices, in particular 
, die. Due to Lemma 10 vertices that die in turn t form a connected component D of 
. Then the connected component C of 
 in 
 splits into D and components 
 in 
. Let 
 be the largest component among 
. Due to Lemma 10, 
 is contained entirely in one of the components 
, say 
 is contained in 
. If , we can charge the length of 
 by charging 1 token to the vertices of 
. A particular vertex can be charged at most 
 tokens this way, as each time it is charged its component halves the size. It remains to deal with the case when 
 is contained in the largest component 
. For the reference see Fig. 8. Let 
 be the predecessor of 
 on 
. Let T be the connected component of 
 in 
 rooted at 
 and let 
 be the connected component of 
 in 
 rooted at 
. For the reference see Fig. 9. By Observation 14 and our assumptions it holds that The constant cost of β gives a total cost of βn over all turns. What remains to show is how to charge the cost of 
. Since 
 it holds that
 
 
 Thus

Image 27
. We charge the vertices of 
 to pay for the cost given by its length. Due to Lemma 7 it holds that 
 visits only vertices that are alive in turn . By definition 
, so each vertex of 
 either dies in turn t or is contained in 
 for . To pay for that, we charge β tokens to every vertex that dies in turn t and we charge β tokens to each vertex of components 
. The total charge for this case sums up to 
. If we add the charge we needed for other cases, we obtain a total of 
. □
Fig. 8
Download : Download high-res image (187KB)
Download : Download full-size image
Fig. 8. Splitting the component C into C1,…,C5 and D.

Fig. 9
Download : Download high-res image (58KB)
Download : Download full-size image
Fig. 9. The connected component of Ft−1 rooted in 
 and wp.

Lemma 24

For cases when 
, 
 is defined and 
 the sum of the lengths of paths 
 is bounded by 
 
.

Proof

Given the level function, we want to consider the vertices of 
 whose level in turn t is above a certain value l. To be more precise, we need to consider the subforest of F induced by such vertices. This forest changes dynamically as the turns pass by. We describe it more formally below.

Definition 14

For  and  we define 
.

Recall that if 
 then 
. For a subforest 
 of , we denote a connected component of vertex 
 as 
. The family of all connected components is denoted as 
. For a fixed l we observe how 
 changes from turn  to t. Since the level function is monotonic, i.e., it satisfies 
 (see Observation 2), the following hold:

Observation 25

 is a subforest of 
. Also,

We fix a turn t for which 
, 
 is defined, and 
. The idea is the following. We let  
 
 and 
. For the purpose of the proof, we need a function that describes some intermediate level between 
 and 
. We thus extend the level function to rational indices:
  Observe that 
 function is still monotonic in t after the extension. We illustrate these definitions by example in Fig. 10. We observe that on levels l from  
  to 
 the separate components of 
 are merged in 
. It is this merging that allows us to provide the charging scheme. The level defined for fractional indices may be interpreted as an additional fractional turn between  and t.

Fig. 10
Download : Download high-res image (195KB)
Download : Download full-size image
Fig. 10. Fractional levels.

Let us fix a level l. In every turn 
 
 
 a number of δ tokens is assigned to every connected component C in 
 such that , where δ and ρ are constants that we compute later. Smaller components are not assigned any tokens. Note that if l is large, only large components are assigned tokens. We plan to use these tokens to pay for the mini-max paths in each turn. First, however, we describe how we maintain such an assignment on level l.

First we consider moving from turn  to turn . The forest 
 is obtained by adding the set of vertices 
 to 
 (see Observation 25). We want to add some structure to this process. We divide transformation from 
 to 
 into two sub-phases. In the first sub-phase, the vertices of Δ form new singleton components: 
, where  is a graph with only one vertex v and without edges. Together with the set of connected components of 
 (referred to as 
) they form a family 
. In the second sub-phase, components in  merge whenever there is an edge of F connecting them, finally becoming the connected components of 
. Every component 
 can be assigned a set of components 
 that merged into C. There are two possible options:

(a)
there is the component 
 with size 
, so 
 is already assigned δ tokens

(b)
every 
 satisfies 
, so none of them is assigned any tokens.

In case (a), δ assigned to 
, which ceases to exist, is now transferred to C. In case (b), if , every vertex  chips in with a payment of 
 
, so the vertices of C pay in total at least δ. We count the total amount that is paid at the end of the proof.
We now consider the transition from turn  to turn t. There is only one vertex, mainly 
, which changes its level. Its level increases from  
  to 
. Level l is only affected by this transition if  
 
. So, the forest 
 is formed from 
 by adding 
. The only difference between 
 and 
 is that some family of separate components of 
 becomes connected by 
 and forms a new connected component 
. The set of components that merge into 
 is precisely 
. The way of assigning δ to 
 if 
 is the same as in the transition from  to . The difference is that now we want to utilize some of the assigned tokens to pay for the mini-max path in turn t. Thus, we distinguish three cases now:

(i)
exactly one of the components 
 satisfies 
, so 
 is assigned δ tokens,

(ii)
every 
 satisfies  so none of them is assigned tokens,

(iii)
two or more components 
 satisfy 
 and 
, so 
 and 
 are both already assigned δ tokens.

Cases (i) and (ii) are handled in the exactly same manner as in the transition from  to . The difference is that in case (iii) we utilize δ tokens assigned to 
 while δ tokens assigned to 
 transfer to 
.
It remains to prove that the tokens utilized in turn t suffice to pay for

Image 28
. Observation 14 shows that
Image 29
. So we need to pay 
 tokens when moving from turn  to t. Let . By Claim 26, proved later on, case (iii) occurs on at least 
  levels. Since  
 
, we utilize at least 
 
 tokens. Setting  allows paying the desired amount.
Now we count the sum of lengths of 
. Every vertex pays 
 
 at most once per level and the highest level is not greater than 2n, so the total amount paid by a vertex over all the turns is bounded by 
 
 
 
. Hence, the total amount paid by all vertices is at most 
 
. If we plug in the constants  and  into above bound, we obtain that

Image 30
. □
To complete the proof of Lemma 24 we move on to proving the following Claim.

Claim 26

For a fixed  let 
 and 
. For 
 
 and 
 there exist two different vertices 
 such that 
 and 
 are two separate components of 
 and 
.

Proof

Fix 
. By definition 
. Thus, 
 and 
. We show that 
 and 
 satisfy the desired conditions.

First note that 
, because 
 for  due to Lemma 15. Note also that 
 and 
 are two separate components of 
 because the only path connecting 
 and 
 in F is through 
 and 
 because 
.

Due to Lemma 15 the levels of vertices drop by at most one along 
 and 
. Let 
 be the prefix of 
 of length 
 and 
 be the prefix of 
 of length 
, where 
. It holds that if 
 then 
. Because 
 and 
 we have 
. This implies 
 
 
 
 
. Setting  completes the proof of the claim. □

We can now put all the pieces together to prove our main result.

Theorem 27

.

Proof

By Definition 10 we have 
. By Observation 13 it holds that

Image 31
. If 
 is undefined, then 
 is empty so its length is 0. For the cases when 
 is defined and 
 we have
Image 32
. For the cases when 
 is defined and 
 we have
Image 33
. This gives the theorem statement for any . □