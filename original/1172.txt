Abstract
The bribery problem in election has received considerable attention in the literature, upon which various algorithmic and complexity results have been obtained. In this setting, it is natural to ask whether we can protect an election from potential bribery attacks. We consider a scenario where the protector (or defender) can protect a voter at some cost such that a protected voter cannot be bribed (e.g., by isolating the voter from potential bribers). This leads to the following bi-level decision problem: Is it possible for the protector to protect a proper subset of voters such that no briber with a fixed budget for bribery can alter the election result? The goal of this paper is to give a full characterization of the complexity of the associated protection problems. We conduct an extensive study on the protection problem and provide algorithmic and complexity results. When compared with the bribery problems that have been studied in the literature, we observe that the protection problem we study is significantly harder in general. Indeed, it becomes Σ2p-complete even for very restricted special cases, while most bribery problems lie in NP. However, it is not necessarily the case that the protection problem is always harder. Some of the protection problems can still be solved in polynomial time, while some of them remain as hard as the bribery problem with the same setting.

Keywords
Voting
Complexity
NP-hardness
Σ2p-hardness

1. Introduction
Elections (or voting) are widely used in real life which is an important mechanism for collective decision-making in a multi-agent system. Classical applications of an election system include the selection of a president or a leader. Recent advances in technologies also motivate the study of elections in electronic systems like web search engine [1] and blockchain based cryptocurrencies [2].

According to the Heritage Foundation's [3] Election Fraud Database which is based on recent proven instances of election fraud indicates that there are 1322 cases of voter fraud in the United states. It is quite evident that an election may be vulnerable to the attackers who are able to manipulate the input. Bribery is another way of manipulating an election, which changes the election result by altering the preference list of voters. In 2016, CNN [4] published a survey report on the elections that involved African Nations, suggested that 43% of the voters were often offered bribes during elections. There are some African nations (for example, Mali and Senegal) where the voters suggested that more than 50% of the people are offered bribes. The Municipal and EU election of Birmingham, UK, which was held on 2004 is considered one of the most rigged and corrupt elections in the modern world history [5]. We can also consider the small scale elections where bribing the voters is a possibility and works better with our proposed model (i.e., university committee elections, board of directors elections, candidate member approval election). In a nutshell, bribery comes at a cost and there are different ways of modeling the cost involved.

One important motivation of studying the bribery problem is that, by establishing NP-hardness of such problems we may discourage people from bribing. However, it may not be sufficient to fully protect an election, especially as people may still have the incentive to bribe voters when the election result is of great importance to them. Resistance to election manipulation in the broader sense, such as through allocation of limited protection resources, is relatively new and has not received many studies. Very recently, Yin et al. [6] considered the problem of defending an election against an adversary who can delete (groups of) voters.

In an election, there are a set of candidates and a set of voters. Each voter has a preference list of candidates. Given these preference lists, a winner is determined based on some voting rule, examples of which will be elaborated later.

In the context of elections, the bribery problem has received considerable attention (see, for example, [7], [8], [9], [10], [11], [12], [13]). In this problem, there is an attacker who attempts to manipulate the election by bribing some voters, who will then report preference lists of the attacker's choice (rather than the voters' own preference lists). Each voter has a price for being bribed, and the attacker has an attack budget for bribing voters. There are two kinds of attackers: constructive vs. destructive. The research question is: Given an attack budget for bribing, whether or not a (constructive or destructive) attacker can achieve its goal?

In this paper, we initiate the study of a new problem, called the protection problem, which extends the bribery problem as follows. There are also a set of candidates, a set of voters, and a bribery attacker. Each voter also has a preference list of candidates. There is also a voting rule according to which a winner is determined. Going beyond the bribery problem, the protection problem further considers a defender, who aims to protect elections from bribery. More specifically, the defender is given a defense budget and can use the defense budget to award some of the voters so that they cannot be bribed by the attacker anymore. This leads to an interesting problem: Given a defense budget, is it possible to protect an election from an attacker with a given attack budget for bribing voters (i.e., assuring that the attacker cannot achieve its goal)?

Traditional researches aim at providing NP-hardness as a way to discourage bribery. However, it may not fully prevent bribery from happening at all and sometimes defenders do deploy resources to protect an election system. It is thus natural and also important to understand the protection problem, which is essentially the goal of this paper.

There are many (non-trivial) scoring rules, including the popular r-approval, plurality, veto, Borda count and so on. In the case of r-approval,  
 
 
  
 
 
 . In the case of plurality, . In the case of veto, . In Borda count, . It is clear that plurality and veto are special cases of the scoring rule of r-approval.

We study and provide a full picture on the computational complexity of these problems. Comparing our results with that on the bribery problems, we observe that the protection problem is in general significantly harder. Indeed, it becomes 
-hard even for very constructive special cases, while most bribery problems lie in NP. However, it is not necessarily the case that the protection problem is always harder. Some of the protection problems can still be solved in polynomial time, while some of them remain as hard as the bribery problem under the same setting.

Our contributions. We introduce the problem of protecting elections from bribery, namely the protection problem. Given a defense budget for rewarding some of the voters and an attack budget for bribing some of the rest voters, the protection problem asks whether or not the defender can protect the election. We investigate the protection problem against the aforementioned two kinds of bribery attackers: constructive vs. destructive.

We present a characterization on the computational complexity of the protection problem (summarized in Table 1). The characterization is primarily concerning the voting rule of r-approval. At a high level, our results can be summarized as follows. (i) The protection problem is hard and might be much harder than the bribery problem, which asks whether a constructive or destructive attacker can succeed in the absence of the defender mentioned above. For example, the protection problem is 
-complete in most cases, (e.g., the setting of a constructive attacker and 
 and 
), while the bribery problem is in NP under the same settings. (ii) The destructive protection problem (i.e., protecting elections against a destructive attacker) is no harder than the constructive protection problem (i.e., protecting elections against a constructive attacker) in all of the settings we considered. In particular, the destructive protection problem is 
-hard only when the voters are weighted and have arbitrary prices, while the constructive protection problem is 
-hard even when the voters are unweighted and have the unit price. This coincides with many studies on the (iii) Voter weights and prices have completely different effects on the computational complexity of the protection problem. It has been observed in [10] that for the bribery problem, voter weights and prices have essentially the same effect on the complexity – bribery with both weights and prices are NP-hard, and becomes polynomially solvable if either weights or prices are restricted to be unit. However, weights and prices play different roles in the protection problem. For example, the constructive protection problem is coNP-hard for the weighted case, but is in P for the symmetric priced case where the number of candidates is constant.


Table 1. Summary of results for single-winner election under the r-approval scoring rule.

# of candidates	Model parameters	Destructive attacker	Constructive attacker
Constant	Weighted, Priced, Asymmetric	
-complete  (Theorem 1)	
-complete  (Theorem 1)
Weighted, 
P (Theorem 3)	coNP-hard (Theorem 2)
wj = 1, Priced, Asymmetric	-complete  (Theorem 4)	-complete  (Theorem 4)
wj = 1, Priced, Symmetric	P (Theorem 5)	P (Theorem 5)
wj = 1, 
P (Theorem 5)	P (Theorem 5)

Arbitrary	Weighted, Priced, Asymmetric	
-complete  (Theorem 1)	
-complete  (Theorem 1)
Weighted, 
NP-complete (Theorem 7)	
-hard (Theorem 6)
wj = 1, Priced, Asymmetric	-complete (Theorem 7)	
-hard (Theorem 6)
wj = 1, Priced, Symmetric	-complete (Theorem 7)	
-hard (Theorem 6)
wj = 1, 
?	
-hard (Theorem 6)
Summary of results. The characterization of the computational complexity of the protection problem in various settings is summarized in Table 1.

In the Table 1, 
 as the weight of a voter, 
 awarding price and 
 bribing price for each of the voter. A constructive attacker attempts to make its designated candidate win an election. In contrast, a destructive attacker attempts to make its designated candidate lose the election. “Symmetric” means 
 for every j and “asymmetric” means 
 for every j; hardness results that are proved for the case with only two candidates (i.e., ) are marked with a “⋄” (Note that when , the 1-approval rule is the same as the plurality, veto or Borda scoring rule. It can be shown that with a slight modification, the hardness results hold for any non-trivial scoring rule); algorithmic results (marked with a “P”) hold for arbitrary scoring rules; the complexity of the protection problem against a destructive attacker with 
 remains open; for most variants of the protection problem against a constructive attacker, we only provide hardness results and we do not know yet whether or not they belong to the class of coNP-complete or 
-complete problem.

We have shown that for constant number of candidates (where the candidates number is small) protection can be easier under both constructive and destructive model. On the other hand, for more complicated situation, we have identified that protecting of elections becomes much more difficult using the prescribed method, hence, we need to look for alternative solutions for these cases where there are arbitrary many candidates. Typically, the number of presidential candidates in election is small, hence, it is easier to protect those elections in polynomial time.

We observe that in general, the protection problem is very hard. Indeed, it is 
-hard even in a very restricted setting. We also observe that the destructive protection problem is no harder than the constructive protection problem in all of the settings. In particular, the destructive protection problem is 
-hard only when the voters are weighted and have arbitrary prices, but the constructive protection problem is 
-hard even if the voters are unweighted and have unit prices. For example, since different states have different voting powers in the Electoral College, US presidential elections can be considered weighted to some extent and based on our results, the protection is hard.

Related work. The problem of protecting elections from attacks seemingly has not received the due attention. Very recently, election protection problem under different scoring rules has been investigated [6], [14], [15], [16]. Dey et al. [16] considered a parameterized approach to protect elections. Li et al. [14] focused on analyzing the outcomes election protection using minimal resource consumption. Based on the attacker and defender model Elkind et al. [15] have analyzed the strategic game associated with vote recounting. Yin et al. [6] considered the problem of defending elections against an attacker who can delete (groups of) voters. That is, the investigation is in the context of the control problem, where the attacker attempts to manipulate an election by adding or deleting some voters. The control problem has been extensively investigated (see, for example, [6], [17], [18], [19], [20], [21], [22]). Although the control problem is related to the bribery problem, the means used by the attacker in the control problem (i.e., attacker adding or deleting some voters) are different from the means used by the attacker in the bribery problem (i.e., attacker changing the preference lists of the bribed voters).

We investigate the protection problem, which is defined in the context of the bribery problem rather than the control problem. That is, the problem we investigate is different from the problem investigated by Yin et al. [6].

The protection problem we study is inspired by the bribery problem. Faliszewski et al. [10] gave the first characterization on the complexity of the bribery problem, including some dichotomy theorems. In the bribery problem, the attacker can pay a fixed, but voter-dependent, price to arbitrarily manipulate the preference list of a bribed voter. Elkind et al. [23] introduce another model called swap bribery, which assumes a fixed cost of swapping two adjacent candidates in the preference list of a voter. Consequently, a complete change of a preference list is much more costly than a minor modification. A follow up work by Bredereck et al. [8] gives a systematic study on the complexity of swap bribery. It is worth mentioning that there are also other models regarding the price of bribery, e.g. [24]. A combinatorial version of bribery has been studied recently by Bredereck et al. [25]. In their work, Kouteckỳ and Talmon [26] focused on Multi-Party Campaigning where a group of bribers operating with different alternatives in a given election.

The complexity of the bribery problem under the scoring rule of r-approval or r-veto for small values of r was addressed later by Lin [27] and Bredereck and Talmon [28]. There are also studies on measuring the bribery price in different ways (see, e.g., [7], [11], [24], [29], [30], [31]).

Technically, the protection problem is related to the bi-level optimization problem, especially the bi-level knapsack problem ([32], [33], [34], [35]). In the bi-level knapsack problem, there is a leader and a follower. The leader makes a decision first (e.g., packing a subset of items into the knapsack), and then the follower solves an optimization problem given the leader's decision (e.g., finding the most profitable subset of items that have not been packed by the leader). The problem asks for the decision of the leader such that a certain objective function is optimized (e.g., minimizing the profit of the follower). The protection problem we study can be formulated as the bi-level problem by letting the defender award some voters who therefore cannot be bribed by the attacker anymore, and then the attacker bribes some of the remaining voters as an attempt to manipulate the election.

2. Problem definition
Election model. Consider a set of m candidates 
 and a set of n voters 
. Each voter 
 has a preference list of candidates, which is essentially a permutation of candidates, denoted as 
. The preference of 
 is denoted by 
, meaning that 
 prefers candidate 
 to 
, where . Since 
 is a permutation over , we denote by 
 the inverse of 
, meaning that 
 is the position of candidate 
 in vector 
.

Voting rules. In this paper, we focus on different scoring rules (or scoring protocols) that map a preference list to an m-vector 
, where 
 is the score assigned to the i-th candidate on the preference list of voter 
 and 
. Given that 
 is the preference list of 
, candidate 
 receives a score of 
 from 
. The total score of a candidate is the summation of the scores it received from the voters. The winner is the candidate that receives the highest total score. We focus on a single-winner election, meaning that only one winner is selected. In the case of a tie, a arbitrary candidate with the highest total score is selected. However, our results remain valid for all-natural variation of selecting a single winner. By re-indexing all of the candidates, we can set, without loss of generality, 
 as the winner in the absence of bribery.

We say a scoring rule is non-trivial, if 
 (i.e., not all scores are the same). There are many (non-trivial) scoring rules, including the popular r-approval, plurality, veto, Borda count and so on. In the case of r-approval,  
 
 
  
 
 
 . In the case of plurality, . In the case of veto, . It is clear that plurality and veto are special cases of the scoring rule of r-approval.

Weights of voters. Voters can have different weights. Let 
 be the weight of voter 
. In a weighted election, the total score of a candidate is the weighted sum of the scores a candidate receives from the voters. For example, candidate 
 receives a score 
 from voter 
.

Adversarial models. We consider an attacker that does not belong to  but attempts to manipulate the election by bribing some voters. Suppose voter 
 has a bribing price 
, meaning that 
, upon receiving a bribery of amount 
 from the attacker, will change its preference list to the list given by the attacker. The attacker has a total budget B. As in the bribery problem, we also consider two kinds of attackers:

•
Constructive attacker: This attacker attempts to make a designated candidate win the election, meaning that the designated candidate is the only candidate who gets the highest score.

•
Destructive attacker: This attacker attempts to make a designated candidate lose the election, meaning that there is another candidate that gets a strictly higher score than the designated candidate does.

We stress that the two adversarial models are not equivalent. This is because a constructive attacker attempts to make 
 be the only candidate with the highest score, whereas a destructive attacker only needs to make any of the other candidate, say 
, gets a strictly higher score than 
 does (indeed, there may be no deterministic winner at all when, for example, 
 gets the same highest score as another candidate).

We mentioned in the above that our results remain valid when relaxing the single-winner condition somewhat. Specifically, our results remain valid when slightly changing the problem definition as follows: The constructive attacker succeeds if 
 obtains the highest score (i.e., not necessarily the only candidate obtaining the highest score), and the destructive attacker succeeds if another candidate gets the same score as 
 does.

Tie-breaking in bribery. Since a single-winner election uses randomized tie-breaking, with a scoring rule, if some candidate achieves the same score as the original winner after bribery, he/she may or may not replace the original winner, depending on the tie-breaking rules in the election. For simplicity, throughout this paper, we consider strictly higher score than any other candidate. Similarly, if a destructive briber wants the current winner to fail, he/she needs to let some other candidate get a strictly higher score than the original winner. It is worth mentioning that our results remain valid while considering more general settings (e.g., a constructive briber can make a certain candidate win by letting the candidate get a score that is at least as high as the score of any other candidate).

Protection. In the protection problem, voter 
, upon receiving an award of amount 
 (or awarding price) from the defender, will always report its preference list faithfully and cannot be bribed. Note that 
 may have multiple interpretations, such as monetary award, economic incentives or the cost of isolating voters from bribery. We say a voter 
 is awarded if 
 receives an award of 
.

Problem statement. We formalize our problem as follows.


The constructive protection problem (i.e., protecting elections against constructive attackers):

Input: A set  of m candidates. A set  of n voters, each with a weight 
, a preference list 
, an awarding price of 
 and a bribing price of 
. A scoring rule for selecting a single winner. A defender with a defense budget 
. An attacker with an attack budget 
 attempting to make candidate 
 win the election.

Output: Decide whether there exists a 
 such that

•
; and

•
There does not exist any subset 
 with 
, 
 gets a strictly higher score than any other candidate despite the attacker bribing the voters belonging to 
 (i.e., bribing 
).


The destructive protection problem (i.e., protecting elections against destructive attackers):

Input: A set  of m candidates. A set  of n voters, each with a weight 
, a preference list 
, an awarding price of 
 and a bribing price of 
. A scoring rule for selecting a single winner. Suppose 
 is the winner if no voter is bribed. A defender with a defense budget 
. An attacker with an attack budget 
 attempting to make 
 lose the election by making 
 get a strictly higher score than 
 does.

Output: Decide if there exists a 
 such that

•
; and

•
There does not exist any subset 
 such that 
, there exist some candidate 
 can get a strictly higher score than 
 does despite the attacker bribing 
.

Further terminology and notations. We denote by 
 the total score obtained by candidate 
 in the absence of bribery (i.e., no voter is bribed). If the defender can select 
 such that no constructive or destructive attacker can succeed, we say the defender succeeds. We call our problem as the (constructive or destructive) weighted-$-protection problem, where “weighted” indicates that the voters are weighted and “$” indicates that arbitrary awarding and bribing prices are involved. In addition to investigating the general weighted-$-protection problem, we also investigate the following special cases of it:

•
the $-protection problem with 
 for each j (i.e., the voters are not weighted);

•
the weighted-protection problem with 
 for each j (i.e., voters are associated with the unit awarding price and the unit bribing price);

•
the unit-protection problem with 
 for each j (i.e., voters are not weighted, and are associated with the unit awarding price and the unit bribing price).

•
the symmetric protection problem with 
 for each j (i.e., the awarding price and the bribing price are always the same), while noting that different voters may have different prices.

3. Structural observations
Let 
 be the set of permutations over 
. Each element of 
 can be a preference list. Let 
 be the set of voters whose preference list is the h-th element of 
.

For two voters 
 and 
, we say 
 dominates 
 (or 
 is dominated by 
), denoted by 
, if any of the following two conditions hold:

(i) The following holds and at least one of the inequalities is strict:
 (ii) The following holds:
 Note that the domination relation is only defined between the voters who have the same preference. Intuitively, if 
, then 
 is more “important” than 
 because 
 has a greater weight but is “cheaper” to bribe or award (i.e., more valuable to both the attacker and the defender).

In the following we will provide key observations on the structure of the (optimal) solutions to the constructive/destructive protection problems. Towards that, we need an important equivalent formulation of the destructive protection problem.

3.1. An equivalent formulation of the destructive weighted-protection problem
The goal of this section is to show that the destructive weighted-$-bribery-protection problem is equivalent to another problem called minmax vector addition. It is sometimes very useful to take the viewpoint of the minmax vector addition problem, e.g., when we prove Lemma 14.

Recall that we assume 
 to be the winner without bribery. Given 
 as the set of fixed voters, suppose there exists some briber who can succeed in changing the winner, then by bribery this briber makes some 
, , get a higher score than 
. The preference list of any voter 
 bribed by this briber may be changed to an arbitrary list, however, if we further alter it such that 
 is on the top and 
 is at the bottom, then 
 still gets a higher score than 
 (despite the fact that the winner may be different).

Now consider a briber who bribes 
 such that the position of candidate 
 (or 
) in the preference list of 
 changes from 
 to m (or from 
 to 1), then 
 decrease by 
 while 
 increases by 
. We define a single-minded briber i as follows:

Definition 1

A single-minded briber i can pay the price of 
 to bribe such 
 such that:

•
 decrease by 
;

•
 increases by 
;

•
 remains the same for any 

We remark that a single-minded briber may not be a real briber at all. For example, suppose some 
 is the on the top of the preference list of 
, then by moving 
 to the top, the position of 
 is changed and it might be impossible for 
 to remain the same. However, if any real briber can make 
 get a higher score than 
, then a single-minded briber can achieve the same result by bribing the same set of voters. Thus in a destructive weighted-$-bribery-protection problem, an election is protectable if and only if for some 
 the answer is no for the following second-level bribery problem:


The Second-level Bribery Problem: Given 
 as the set of fixed voters. For any 
, a single-minded briber i () can pay the price of 
 to increase the total score of 
 by 
, decrease the score of 
 by 
, while keep the total scores of all other candidates the same. Given a bribery budget of B, does there exist some single-minded briber i who can make the total score of candidate 
 larger than that of 
?

If we only care about the relative difference 
, then it is equivalent to assume that the single-minded briber i can make 
 remain the same, while increase 
 by 
 where 
. Taking this viewpoint, the second-level bribery problem is equivalent as:


The Second-level Lift-Bribery Problem: Given 
 as the set of fixed voters. A single-minded briber i () can pay the price of 
 to increase the total score of 
 by 
 for 
, while the total scores of all other candidates remain the same. Given a bribery budget of B, does there exist some briber i who can increase the total score of candidate 
 to a value larger than 
?

The second-level lift-bribery problem is further equivalent to the following.


The Second-level Multi-Bribery Problem: Given 
 as the set of fixed voters. The briber can pay the price of 
 to increase 
 by 
 for every  where 
. Given a bribery budget of B, is it possible for the adversary to bribe voters such that some 
 is increased to a value larger than 
?

Compared with the second-level lift-bribery problem, the multi-bribery problem pretends that the  single-minded bribers (briber 1 to briber ) are acting simultaneously. However, as the action of a single-minded briber i does not influence 
 for any 
, the multi-bribery problem is equivalent to the lift-bribery problem.

We provide an equivalent formulation of the destructive weighted-protection problem under any scoring rule 
, which will be very useful for several proofs throughout this paper. Taking the viewpoint of the multi-bribery problem, the destructive weighted-$-bribery-protection problem is equivalent to the following.


The minmax vector addition problem:

Input: A vector 
 where 
 is the score of 
 in the absence of bribery. An -vector 
 for each voter 
 where 
. Awarding price 
 and bribing price 
 for voter 
, . Defense budget F and attack budget B.

Output: Decide if there exists a subset 
 such that

•
; and

•
For any subset 
 with 
, it holds that
 
 where 
 is the infinity norm (i.e., the maximal absolute value among the  coordinates).

Lemma 1

The answer to the destructive weighted-$-protection problem is “Yes” if and only if the answer to the corresponding minmax vector addition problem is “Yes”.

Proof

A “Yes” Instance of Minmax Vector Addition → A “Yes” Instance of Destructive Weighted-$-Protection. Suppose the answer to the minmax vector addition problem is “Yes.” Then, there exists some 
⁎
 such that for any 
⁎
 with 
, it holds that(1)
 
 For showing a contradiction, suppose the answer for the destructive weighted-$-protection problem is “No”. In this case, even if the defender awards the voters in 
⁎
, the attacker can still make 
 lose by bribing some subset 
⁎
 of voters. Note that if 
 does not win, there must exist some other candidate, say, 
, who gets a strictly higher score than 
 after the attacker bribes some voters. Let us compare their scores before and after bribing voters. Before bribing voters, the scores of 
 and 
 are 
 and 
, respectively. Recall that a candidate 
 is at the position of 
 on the preference list of 
, therefore any 
⁎
 contributes a score of 
 to 
, and contributes a score of 
 to 
. After bribing voters, the preference list of 
 is changed, but regardless of the change, 
 contributes at least 
 to 
 and at most 
 to 
. Let the scores of 
 and 
 after bribing voters be 
 and 
, respectively. Then, it follows that
⁎
 
⁎
 
 Since 
, we have
⁎
 
⁎
 
 that is,
⁎
 
 which contradicts Eq. (1). Thus, the answer to the destructive weighted-$-protection problem is “Yes”.

A “Yes” Instance of Destructive Weighted-$-Protection → A “Yes” Instance of Minmax Vector Addition. Suppose the answer to the destructive weighted-$-protection problem is “Yes” by awarding the voters in 
⁎
. We show that the answer to the corresponding instance of minmax vector addition problem is “Yes”. Suppose on the contrary the answer is “No.” Then, for 
⁎
 there exists some 
⁎
⁎
 such that
⁎
 
 Consequently, there must exist some  such that 
⁎
. By plugging in 
, we have
⁎
 
⁎
 
 This means that if the defender awards the voters in 
⁎
, then the attacker can bribe the voters in 
⁎
 to change their preference lists such that for any 
⁎
, candidate 
 is on top of the list and 
 is at bottom of the list. By doing this, 
 gets a strictly higher score than 
. This contradicts the fact that the answer to the destructive weighted-$-protection problem is “Yes”. Hence, the answer to the minmax vector addition problem is “Yes”. □

3.2. Structural observations
Now we are ready to present the following structural lemmas.

Lemma 2

Consider the destructive weighted-$-protection problem with 
 being the set of awarded voters. Suppose the attacker can succeed by bribing a subset 
 of voters. If 
, 
 and 
, then the attacker can succeed by bribing 
.

Recall Lemma 1. The following observation follows directly from the definition of 
 which is included in the definition of minmax vector addition.

Observation 1

If 
, then 
 for .

Considering Lemma 1, we can prove Lemma 2 as follows.

Proof of Lemma 2

We prove the lemma by applying an exchange argument to the minmax vector addition problem, which is equivalent to the destructive weighted-$-protection by Lemma 1. Suppose by bribing voters in 
 the destructive attacker can make 
 lose. Then, it follows that 
 and
 
 As 
 dominates 
, 
 and 
. Hence, 
 
 and
 
 That is, the briber can also win by bribing voters in 
. □

Lemma 3

Consider the destructive weighted-$-protection problem. Suppose the defender succeeds by awarding a subset 
 of voters. If 
, 
 and 
, then the defender can succeed by awarding 
.

Proof

We again use an exchange argument to the minmax vector addition problem. Let 
. Suppose on the contrary that the defender cannot win by fixing voters in 
, then there exists some 
 such that 
 and
 
 We argue that the defender cannot win either by fixing voters in 
, which is a contradiction. Suppose the defender fixes voters in 
. There are two possibilities. If 
, then we let the briber bribe voters in 
. It is obvious that the briber can win. Otherwise, 
, then we let the briber bribe voters in 
. Since 
 dominates 
, we have 
 and
 
 Hence, the lemma is true. □

We say 
 is maximal (with respect to ) if for any 
, there is no 
 that can dominate 
. That is, 
 contains the most important voters. The following corollary follows directly from the preceding two lemmas.

Corollary 1

Consider the destructive weighted-$-protection problem. Without loss of generality, we can assume that 
 is maximal with respect to  and 
 is maximal with respect to 
.

Unfortunately, Corollary 1 does not hold for the constructive weighted-$-protection problem, which is significantly different from the destructive version of the protection problem in terms of computational complexity. To see this, let us consider a case where we have  candidates (
, 
 and 
) and 4 voters. Here the rule is 2-approval, so every voter will vote for exactly two candidates.

•
First voter has a weight of 2 and selects the original preference 
 and 
;

•
Second voter has a weight of 3 and selects 
 and 

•
Third voter has a weight of 4 and selects 
 and 

•
Fourth voter has a weight of 2 and selects 
 and 

Based on the weighted votes, 
 receives 9 votes, 
 receives 5 votes and 
 receives 8 votes. Here, the original winner is 
, since he receives the most votes. There is a bribing price and awarding price for each of the voters. Let the bribing price for the third voter and the fourth voter be 1, and let the bribing price for voter one and voter two be 2. Let the total budget for the briber be 1. As a result, the briber can only bribe either the third voter or the fourth voter.

Note that if we compare voter 3 and voter 4, then they have the same original preference but voter 3 has a larger weight. To make 
 win, it appears that voter 3 is always a better choice to bribe, but this is not true. Table 2 and Table 3 display the number of votes received by each of the candidates under different scenario.


Table 2. Summary of votes received by each of the Candidates.

# of cases	Number of voters	Weight of each voters	Original candidate (c1)	Candidate 2 (c2)	Designated candidate (cm)
Case 1	Voter 1	2	0	2	2
Voter 2	3	3	3	0
Voter 3	4	4	0	4
Voter 4	2	2	0	2

Table 3. Summary of votes received by each of the Candidates after bribing voter 4.

# of cases	Number of voters	Weight of each voters	Original candidate (c1)	Candidate 2 (c2)	Designated candidate (cm)
Case 2	Voter 1	2	0	2	2
Voter 2	3	3	3	0
Voter 3	4	4	0	4
Voter 4	2	0	2	2
Nevertheless, we have similar results for the unweighted constructive problem.

Lemma 4

Given 
 as the set of fixed voters in the constructive $-bribery-protection problem, suppose a briber can make 
 win by bribing a subset 
 of voters. If 
, 
 and 
, then the briber can also win by bribing voters in 
.

Proof

Again, we prove by an exchange argument. Suppose by bribing voters in 
 the constructive briber can make 
 win. Now we consider the following procedure: we change the preference list of 
 into the same one as that of 
, and meanwhile, restore the preference list of 
 to the original one. As voters have the same weight, this procedure does not change the total score of every candidate, and 
 is thus still the winner. Furthermore, this procedure is equivalent as we bribe 
. Since 
 dominates 
, the total cost of bribing 
 is no more than that of bribing 
. Hence, the lemma is true. □

Lemma 5

In the constructive $-bribery-protection problem, suppose the defender can win by fixing a subset 
 of voters. If 
, 
 and 
, then the defender can also win by fixing voters in 
.

Proof

Suppose on the contrary that the defender cannot win by fixing voters in 
. Then the constructive briber can win by bribing voters in some subset 
. There are two possibilities. If 
, then even if the defender fixes 
 the briber can still bribe 
 and make 
 win, which is a contradiction. Otherwise 
. If the defender fixes 
, we let the briber bribe 
. According to Lemma 4, if the briber can win by bribing 
, someone can also win by bribing 
, again contradicting the fact that the defender can succeed by awarding 
. □

The above lemmas imply the following.

Corollary 2

Without loss of generality, we can assume that 
 is maximal with respect to , and 
 is maximal with respect to 
 in the constructive $-bribery-protection problem.

4. The case of constant candidates
In this case, we investigate the complexity of the weighted-$-protection problem together with its special cases. Both constructive and destructive attackers are considered.

4.1. The weighted-$-protection problem
The goal of this subsection is to prove the following theorem.

Theorem 1

For any non-trivial scoring rule, both the constructive and the destructive weighted-$-protection problem, are 
-complete.

We first show 
-membership.

Lemma 6

For any non-trivial scoring rule, both the constructive and the destructive weighted-$-protection problems are in 
.

For ease of proof, we use the following definition of 
 from [36] (see Theorem 3 therein).

Definition 2

([36]) Let Γ be a finite set of symbols (alphabet) and 
 be the set of strings of symbols in Γ. Let 
 be a language. 
 if and only if there exist polynomials 
, 
 and a language 
 such that for all 
,
 where 
 denotes

Proof of Lemma 6

Given an instance I of the constructive or destructive weighted-$-protection problem, we want to know if there exists a subset 
 such that 
 and for any subset 
 with 
 and any preference list 
 for 
, the following property 
 is true: By bribing voter in 
 and change the preference list of each 
 to 
, a constructive attacker cannot make candidate 
 win, or a destructive attacker cannot make 
 lose. It is easy to see that the property 
 can be verified in polynomial time, therefore Lemma 6 is proved. □

Now we prove the 
-hardness.
Lemma 7

For any non-trivial scoring rule, the constructive and the destructive weighted-$-protection problems are both 
-hard even if there are only  candidates.

Note that in case of , the destructive weighted-$-bribery-protection is equivalent to constructive weighted-$-bribery-protection. We prove Lemma 7 for the protection problem under plurality. With slight modification the proof works for any non-trivial scoring protocol for two candidates.

We reduce from the De-Negre (DNeg) variant of bi-level knapsack problem, which is proved to be 
-hard by Caprara et al. [32]. Before we describe the bi-level knapsack problem, we first introduce the classical knapsack problem, which is closely related. In the knapsack problem, given in some fixed budget 
 together with a set S of items, each having a price 
 and a weight 
. The goal is to select a subset of items whose total price is no more than the given budget and the total weight is maximized. We denote by 
 the optimal objective value of the knapsack problem.

In the De-Negre (DNeg) variant of bi-level knapsack problem, there is an adversary and a packer. The adversary has a reserving budget 
 and the packer has a packing budget 
. There is a set of n items, each having a price 
 to the adversary, 
 to the packer and a weight 
 (to both the adversary and the packer). The adversary first reserves a subset of items whose total prices is no more than 
. Then the packer solves the knapsack problem with respect to the remaining items that are not reserved, i.e., the packer will select a subset of remaining items whose total price is no more than 
 such that their total weight is maximized. The DNeg variant of the bi-level knapsack problem asks for a proper subset of items reserved by the adversary such that the total weight of items selected by the packer is minimized. More precisely, the problem can be formulated as a bi-level integer programming as follows.


The DNeg variant of bi-level knapsack problem:
 
 
 
 

The decision version of the DNeg variant of bi-level knapsack problem asks whether there exists a feasible solution with the objective value at most W. The following lemma is due to Caprara et al. [32].

Lemma 8

[32]
The decision version of the DNeg variant of bi-level knapsack problem is 
-complete.

Based on the above lemma, we are able to prove Lemma 7.
Proof of Lemma 7

Given an arbitrary instance of the (decision version of) DNeg variant of bi-level knapsack problem, we construct an election instance as follows. There are  candidates. The defense and attack budgets are 
 and 
, respectively. There are  voters:

•
n key voters 
 who vote for 
, each having an awarding price 
, a bribing price 
, and a weight 
.

•
one dummy voter 
 who votes for 
 whose weight is 2W, awarding price is  and bribing price is .

•
one dummy voter 
 who votes for 
 whose weight is 
, awarding price is  and bribing price is .

Obviously 
 is the original winner. We show in the following that for the constructed election instance the answer to the protection problem is “Yes” if and only if the DNeg variant of bi-level knapsack problem admits a feasible solution with an objective value at most W.

Suppose the DNeg variant of bi-level knapsack problem admits a feasible solution with an objective value at most W, and let 
⁎
 be such a solution. As 
⁎
⁎
, we let the defender award all the voters such that 
⁎
, i.e., let 
⁎
. According to the fact that the objective value of the bi-level knapsack problem is at most W, and the fact that the two dummy voters can never be bribed, it follows that the optimal objective value of the following knapsack problem is at most W: 
 
 
 Thus, with a budget of B the briber can never bribe key voters whose total weight is more than W. Note that originally the total weight of voters voting for 
 is 
, and the total weight of voters voting for 
 is 
, the briber cannot succeed and the answer to the protection problem is “Yes”.

Suppose the election is the answer to the protection problem is “Yes”. Then there exists some 
 such that we have 
 and if voters in 
 are fixed then it is not possible for any briber to manipulate the electoral results. Note that the two dummy voters can never be protected nor bribed, therefore 
 does not contain these two dummy voters and hence, 
. Thus, among voters in 
, within a budget of B the briber cannot bribe voters whose total weight is more than W. This is equivalent as saying that by setting 
 for 
 and 
 otherwise, the knapsack problem for 
 does not admit a feasible solution with an objective value more than W. Hence, the objective value of the given DNeg variant of bi-level knapsack problem is at most W. □

4.2. The weighted-protection problem
The Weighted-Protection problem is a special case of the weighted-$-protection problem when 
.

The following theorem used by Faliszewski et al. [10] was originally proved for another problem. In our context,  and thus 
, it is NP-hard to decide if the constructive attacker can succeed or, equivalently, if the defender cannot succeed. Hence, it is coNP-hard to decide if the defender can succeed and Theorem 2 follows.

Theorem 2

(Faliszewski et al. [10]) If m is a constant, the constructive weighted-protection problem is coNP-hard for any scoring rule that 
 are not all equal (i.e., it does not hold that 
).

Notice that this theorem does not apply to Plurality as in Plurality 
. It is, however, not clear if the constructive weighted-protection problem is coNP-complete or even harder (e.g., 
-hard). This is an interesting open problem. On the other hand, the destructive weighted-protection problem that is 
 against a destructive attacker, is much easier. Using the fact that m, the number of candidates, is a constant, we can prove the following Theorem 3 through suitable enumerations.
Theorem 3

If m is a constant, then the destructive weighted-protection problem is in P for any scoring rule.

Proof

The theorem is proved by trying all different possible 
 and check whether the attacker can succeed for each of them. By Corollary 1, for voters having the same preference, 
 contains voters of the largest weights. Hence to determine 
, it suffices to know the number of voters having each preference in 
. There are at most m! different preferences, and consequently at most 
 different kinds of 
, which is polynomial when m is constant. For each possible choice of 
, we check whether the attacker can succeed by trying all possible 
 and all possible ways of changing their preferences. Firstly, by Corollary 1, for voters in 
 that have the same preference list, 
 contains the ones of the largest weights, hence using a similar argument we know there are at most 
 different kinds of 
. Given 
 and 
, it remains to determine how the preference lists of voters in 
 should be changed. Note that we do not need to specify how the preference list is changed for each 
. Instead, we only need to determine the number of voters in 
 that are changed to each preference list, which gives rise to at most 
 possibilities. Therefore, overall there are at most 
 different possibilities regarding 
, 
 and how to alter the preference lists of voters in 
, which can be enumerated efficiently when m is a constant. □

We remark that an argument similar to the one we used to prove Theorem 3 was used by Faliszewski et al. [10].
4.3. The $-protection problem
The $-Protection problem is the special case of the protection problem with 
 for every j. The following two theorems illustrate the significant difference (in terms of complexity) between the general problem and its symmetric special case (i.e., 
).

Theorem 4

For constant m and any non-trivial scoring rule, both the constructive and destructive $-protection problems are NP-complete.

To prove Theorem 4, we first show the problem belongs to NP in Lemma 9 and then show its NP-hardness in Lemma 10.

Lemma 9

For any scoring rule and arbitrary constant m, both the constructive and destructive $-protection problems are in NP.

Proof

Note that to show the membership in NP, it suffices to show that given 
, we can determine in polynomial time whether the constructive/destructive attacker can succeed. Note that among voters of the same preference list in 
, 
 always contains the ones with the smallest bribing prices. Hence, similarly as the proof of Theorem 3, there are at most 
 different kinds of 
. Given 
, a similar argument as that of Theorem 3 shows that there are 
 different ways of altering the preference lists of voters in 
. Hence in 
 time we can determine the whether the constructive/destructive attacker can succeed, which is polynomial if m is a constant. □

Lemma 10

For any non-trivial scoring rule, both the constructive and destructive $-protection problems are NP-hard even if there are only 2 candidates.

Again, in case of two candidates, the constructive and destructive variants are identical and it suffices to prove the theorem under the scoring rule of plurality.

Towards the proof, we need the following intermediate problems.

Balanced Partition: Given a set of positive integers 
 where 
 and an integer q such that 
. Determine whether there exists a subset S of n integers such that 
.

The balanced partition problem is a variant of the partition problem (in which S is not required to contain exactly n integers). The NP-completeness of the balanced partition problem is a folklore result, which follows from a slight modification on NP-completeness proof for the partition problem given by Garey and Johnson [37].

Using the balanced partition problem, we are able to show the NP-hardness of the following problem in Lemma 11.

Modified Balanced Partition: Given a set of positive integers 
 where 
 and an integer q such that 
, 
. Determine whether there exists a subset S of n integers such that 
.

Lemma 11

Modified Balanced Partition: is NP-complete.

Proof

Membership in NP is straightforward. We show modified balanced partition is NP-hard in the following via reduction from balanced partition.

Given an instance of the balanced partition problem where the integers are 
 and 
, we construct an instance of the modified balanced partition problem by adding 4n integers, each of value 3q.

We first show that the constructed instance is a feasible instance. Obviously every additional integer is larger than any 
 where . Let the additional integers be 
. In the constructed instance there are 
 elements, with the summation of all integers being . Let 
. Obviously 
. Thus, the constructed instance is a feasible instance of the modified balanced partition problem.

We show that the constructed instance admits a feasible partition if and only if the given balanced partition instance admits a feasible solution.

If the given balanced partition instance admits a feasible solution, then obviously the constructed modified balanced partition problem admits a feasible solution (by adding 2n of the additional integers to both sides).

Suppose the constructed modified balanced partition instance admits a feasible solution. We claim that among the 4n additional integers, there are exactly 2n of them in S. Otherwise S contains either at most  of them or at least  of them. By symmetry we assume without loss of generality that S contains at most  of them, then all integers in S add up to at most 
, which is a contradiction. Thus, S contains exactly 2n additional integers, implying that the remaining n integers adding up to q, i.e., the given balanced partition instance admits a feasible solution. □

Proof of Lemma 10

We will prove the NP-hardness for an election with only two candidates under plurality. Recall that in this case the constructive and destructive protection problem are the same.

We reduce from the modified balanced partition problem. Given an arbitrary instance of the modified balanced partition problem, we construct an instance of the $-bribery-protection problem such that the answer to the problem is “Yes” if and only if the modified balanced partition instance admits a feasible solution.

We construct the $-bribery-protection instance as follows. There are  candidates. 
 is the designated candidate. Let , . There are  voters, each of unit weight and can be divided into three groups:

•
2n key voters voting for 
, whose awarding prices are 
 and bribing prices are 
, respectively.

•
 dummy voters voting for 
, whose awarding prices are all  and bribing prices are all .

•
2n dummy voters voting for 
, whose awarding and bribing prices are all 1.

Let 
⁎
 be the set of key voters.
Obviously 
 is the original winner. We show that the answer to the constructed $-bribery-protection instance is “Yes” if and only if the modified balanced partition problem admits a feasible solution.

Suppose the given modified balanced partition instance admits a feasible solution S. Now we let the defender fix the n key voters whose awarding price is 
 where 
. It is easy to verify that the total awarding price is , which stays within the defense budget. We argue that, no briber can alter the election result with a budget of B. Let 
 be the set of fixed voters. Suppose on the contrary there is a briber who can make 
 win. Given that the total attack budget is B, the briber can only bribe key voters. Furthermore, the briber has to bribe at least n voters. As 
, the briber has to bribe all voters in 
⁎
. However, 
⁎
 
 which is a contradiction. Thus, the answer to the constructed $-bribery-protection instance is “Yes”.

Suppose the answer to the constructed $-bribery-protection instance is “Yes”. Note that in total there are  voters voting for 
 and 2n voters voting for 
. Thus any briber who wants to alter the election result has to bribe at least n voters who originally vote for 
. Since the  dummy jobs voting for 
 can never be protected nor bribed, we can fix a subset 
⁎
 such that any briber can not bribe n or more voters from 
⁎
 with a budget of B. We have the following claim.

Claim 1

.

Proof of Claim 1

We first show that 
. Suppose on the contrary that 
. Note that any key voter has an awarding price of at least 4q, thus the total awarding price is at least . However, , which is a contradiction.

We now show that 
. Suppose on the contrary that 
. Then there are at least  key voters that can be bribed and we bribe the cheapest n voters. As 
, the total bribing price of the cheapest n voters among any  voters is at most 
, hence the briber can always bribe the cheapest n voters and let 
 win, which contradicts the fact that the answer to the $-bribery-protection instance is “Yes”. So 
. □

Now the following inequalities hold simultaneously:(4a) 
 
(4b) 
⁎
 
 Note that 
⁎
 
 
 
 
 by (4a) we have 
 
 Using the fact that 
, we have 
 
 From (4b), we have 
 
 Thus, 
 
 i.e., the given modified balanced partition instance admits a feasible solution. □

The symmetric $-protection problem (i.e., 
), however, is significantly easier, as shown by Theorem 5.

Theorem 5

For constant m, both destructive and constructive symmetric $-protection problems are in P for any scoring rule.

Proof

The proof idea is the same as that of Theorem 3, namely by trying all different possible 
. For each 
, we try all possible 
's and all possible ways of altering the preference of voters in 
. Note that every voter has the same weight and satisfies that 
. Therefore, a voter with a smaller (awarding and bribing) price always dominates a voter with a larger price. By Corollary 1 and Corollary 2, for the voters having the same preference, 
 contains the voters that have the smallest prices. Therefore, in order to determine 
, it suffices to know the number of voters that have the same preference, implying that there are at most 
 different kinds of 
's. Similarly, given a 
, there are at most 
 different kinds of 
's. Using the same argument as that of Theorem 3, for every 
 and 
, there are at most 
 ways of altering the preferences of the voters in 
. Therefore, there are 
 different possibilities in total, which can be enumerated efficiently when m is a constant. □

5. The case of arbitrarily many candidates
5.1. The case of constructive attacker
The following theorem shows 
-hardness for the most special cases of the constructive weighted-$-protection problem, namely 
 (unit-protection). It thus implies readily the 
-hardness for the more general constructive $-protection and constructive weighted-protection.

Theorem 6

For arbitrary m, the r-approval constructive unit-protection problem is 
-complete.

Membership in 
 follows directly from Lemma 6. To prove Theorem 6, it suffices to show the following.

Lemma 12

For arbitrary m, the r-approval constructive unit-protection problem is 
-hard even if .

Lemma 12 implies that the 
-hardness for the constructive weighted-bribery-protection and constructive $-bribery-protection problem. To prove Lemma 12, we need the ∃∀3 dimensional matching problem. We first describe the classical 3 dimensional matching problem.


3 Dimensional Matching (3DM): Given three disjoint sets of elements W, X, Y of the same cardinality and a set of triples . We say  is a perfect matching if every element of  appears exactly once in T. Does there exist a subset of M which is a perfect matching?

The ∃∀3 dimensional matching problem is a bi-level decision problem that builds upon 3DM.


∃∀3 Dimensional Matching (∃∀3DM): Given three disjoint sets of elements W, X, Y of the same cardinality and two disjoint sets 
 and 
 of . Does there exist a subset 
 such that for any 
, 
 is not a perfect matching?

It is shown by McLoughlin [38] that it is 
-complete to determine the ∀∃3DM problem, which is the complementary problem of ∃∀3DM, i.e., the ∀∃3DM problem asks whether the answer of the ∃∀3DM is no. Therefore, by definition of the class 
 and 
, the following is true.

Lemma 13

[38] Determining whether the ∃∀3 dimensional matching problem admits a feasible solution is 
-complete.

We remark that, to show the 
-completeness, McLoughlin [38] reduces ∀∃3DM to ∀∃3SAT. The reduction is essentially the same as that used to show the NP-completeness of 3DM, i.e., given any instance of ∀∃3SAT, McLoughlin constructs a 3DM instance exactly the same as that constructed in the book of Garey and Johnson [37].

We give a very high level description of the reduction in [37]. Given any 3SAT instance, Garey and Johnson construct a 3DM instance with the set of triples  satisfying the following property: for any variable in the 3SAT instance, there exists a subset of triples in M called truth-value-setting triples (M also contains other triples). Any perfect matching of M, if it exists, contains either all or none of the truth-value-setting triples corresponding to each variable. Using this property, it is possible to show that, for any perfect matching , the 3SAT instance is satisfied by setting variables whose truth-value-setting triples are in T to be true and other variables to be false. Meanwhile, for any truth assignment that makes the 3SAT instance satisfied, choosing all the truth-value-setting triples corresponding to the variables that are true and none of the truth-value-setting triples corresponding to the variables that are false, together with other suitable triples yields a perfect matching.

Using the same reduction, McLoughlin [38] sets 
 to be the set of all the truth-value-setting triples and 
. They are able to show that, if the given 3SAT instance is a satisfiable instance of ∀∃3SAT, then the constructed 3DM instance is also a feasible instance of ∀∃3DM.

We further observe that, in the reduction of McLoughlin [38], every element appears at most once in the set of all truth-value-setting triples, hence the problem remains 
-hard by further restricting 
 to contain each element at most once. Furthermore, we may require that 
 contains exactly k triples and have the following variant (called modified ∃∀3DM).


Modified ∃∀3DM: Given a parameter t, three disjoint sets of elements W, X, Y of the same cardinality, and two disjoint subsets 
 and 
 of  such that 
 contains each element of  at most once. Does there exist a subset 
 such that 
 and for any 
, 
 is not a perfect matching (where a perfect matching is a subset of triples in which every element of  appears exactly once)?

Note that by calling an algorithm that solves modified ∃∀3DM 
 times we can solve ∃∀3DM problem, hence modified ∃∀3DM is also 
-hard.

Now we come to the proof of Lemma 12.

Proof of Lemma 12

Given an arbitrary instance of modified ∃∀3DM, we construct an instance of the constructive unit-protection problem in r-approval election as follows. Recall that  and thus every voter votes for 4 candidates.

Suppose , 
, 
.

There are  key candidates, including:

•
3n key candidates, each corresponding to one distinct element of  and we call them element candidates. The score of every element candidate is ;

•
one key candidate called leading candidate, whose total score is ;

•
one key candidate called designated candidate, whose total score is ξ.

Here ξ is some sufficiently large integer, e.g., we can choose 
. Besides key candidates, there are also many dummy candidates, each of score either 1 or 
. The number of dummy candidates will be determined later.
There are 
 key voters, including:

•
 key voters, each corresponding to a distinct triple in 
 and we call them 
-voters. For each 
, the corresponding voter votes for the 3 candidates corresponding to elements 
, 
, 
 together with the leading candidate;

•
 key voters, each distinct triple in 
 corresponds to exactly 
 voters and we call them 
-voters. For every 
, each of its 
 corresponding voters votes for the 3 candidates corresponding to elements 
, 
, 
 together with one distinct dummy candidate. Since the 
 voters are identical, we can view them as 
 copies, i.e., every 
-voter has 
 copies.

Besides key voters, there are also sufficiently many dummy voters. Each dummy voter votes for exactly one key candidate and 3 distinct dummy candidates. Dummy voters and dummy candidates are used to make sure that the score of key candidates are exactly as we have described. More precisely, if we only count the scores of key candidates contributed by key voters, then the element candidate corresponding to  has a score of 
 where 
 is the number of occurrences of z in the triple set 
 for , and the leading candidate has a score of 
. Hence, there are exactly  dummy voters who vote for the element candidate corresponding to z, and 
 dummy voters who vote for the leading candidate.
Overall, we create 
 dummy voters, and 
 dummy candidates.

As the leading candidate is the current winner, the constructive unit-protection problem asks whether the election can be protected against an attacker attempting to make the designated candidate win. The defense budget is 
 and the attack budget is . In the following we show that the defender succeeds if and only if the given modified ∃∀3DM instance admits a feasible solution 
.

“Yes” Instance of modified ∃∀3DM → “Yes” Instance of Constructive Unit-Protection. Suppose the instance of modified ∃∀3DM admits a feasible solution 
, we show that the answer for constructive unit-protection problem is “Yes”.

Recall that each 
-voter corresponds to a distinct triple 
 in 
 and votes for 4 candidates – the leading candidate and the three candidates corresponding to 
. We do not award 
-voters corresponding to the triples in 
, but award all of the remaining 
-voters. The resulting cost is exactly 
. In what follows we show that after awarding voters this way, the attacker cannot make the designated candidate win.

Suppose on the contrary, the attacker can make the designated candidate win by bribing  voters among the 
-voters, 
 voters among the 
-voters, and γ dummy voters. We claim that the following inequalities hold:(5a)(5b) Inequality (5a) follows from the fact that the attack budget is n and the attacker can bribe at most n voters. Inequality (5b) holds because of the following. Given that a candidate can get at most one score from each voter and that the attacker can bribe at most n voters, bribing voters can make the designated candidate obtain a score at most . Hence, the score of each key candidate other than the designated one should be at most . Recall that without bribery, each of the 3n element candidate has a score of  and the leading candidate has a score of . Hence, the attacker should decrease at least 1 score from each element candidate and t scores from the leading candidate, leading to a total score of . Note that an 
-voter contributes 1 score to 4 key candidates, therefore it contributes in total a score of 4 to the key candidates. Similarly an 
-voter contributes a score of 3, and a dummy voter contributes a score of 1 to the key candidates. Therefore, by bribing (for example) an 
-voter, the total score of all the element candidates and the leading candidate can decrease by at most 4. Thus, inequality (5b) holds.

In the following we derive a contradiction based on Inequalities (5a) and (5b). By plugging  into Inequality (5b), we have . Since , we have . Hence, , and we have  and . Note that the defender has awarded every 
-voter except the ones corresponding to 
, where 
. Hence, every voter corresponding to the triples in 
 is bribed. Furthermore, as Inequality (5b) is tight, bribing voters makes the designated candidate have a score of , while making each of the other key candidates have a score of . This means that the score of each element candidate decreases exactly by 1. Hence, the attacker has selected a subset of 
-voters such that together with the 
-voters corresponding to triples in 
, these voters contribute exactly a score of 1 to every element candidate. Let 
 be the set of triples to which the bribed 
-voters correspond, then 
 forms a 3-dimensional matching, which is a contradiction to the fact that 
 is a feasible solution to the modified ∃∀3DM instance. Thus, the attacker cannot make the designated candidate win and the answer for the constructive unit-protection problem is “Yes”.

“No” Instance of modified ∃∀3DM → “No” Instance of Constructive Unit-Protection. Suppose for any 
, 
 there exists 
 such that 
 is a perfect matching, we show that the answer to the constructive unit-protection problem is “No”. Consider an arbitrary set of voters awarded by the defender. Among the awarded voters, let H be the set of triples that corresponds to the awarded 
-voters. As 
, 
. We select an arbitrary subset 
 such that 
. There exists some 
 such that 
 is a perfect matching, and we let the attacker bribe the set of voters corresponding to triples in 
. Note that this is always possible as every 
-voter has 
 copies, so no matter which 
-voters are awarded the briber can always select one 
-voter corresponding to each triple in 
. It is easy to see that by bribing these voters, the score of every element candidate decreases by 1, and the score of the leading voter decreases by t. Meanwhile, let each bribed voter vote for the designated candidate and three distinct dummy candidates, then the designated candidate has a score of  and becomes a winner, i.e., the answer to the constructive unit-protection problem is “No”. □

Remark

The proof of Lemma 12 can be easily modified to prove the 
-hardness of r-approval constructive unit-protection problem for any fixed . Specifically, we can make the same reduction, and add dummy candidates such that every voter additionally votes for exactly  distinct dummy candidates.

5.2. The case of destructive attacker
Theorem 7

Both r-approval destructive weighted-protection and r-approval (symmetric) $-protection problems are NP-complete.

The proof of Theorem 7 is based on a crucial observation of the equivalence between the destructive weighted-$-protection problem (under an arbitrary scoring rule) and the minmax vector addition problem.
Towards the proof of Theorem 7, we first show the NP-hardness.

Lemma 14

The r-approval destructive weighted-protection problem is NP-hard for any .

Proof

We prove the lemma for . The case of  can be proved by introducing dummy candidates and letting each voter vote for  distinct dummy candidate.

We reduce from a variant of 3-dimensional matching in which every element occurs at most  times in the given triples, which is also known to be NP-hard stated by Kann [39]. Given a 3DM instance with  elements and  triples such that every element appears at most  times in M, we construct an instance of the destructive weighted bribery-protection problem as follows. We assume that . This is without loss of generality. To see why, suppose . In total we have η triples and a perfect matching would contain ζ triples. A brute force algorithm will try all the possible perfect matching. So, all the possibilities of selecting ζ elements out of η is  
 . Notice that  
  =  
  which is bounded by  
  due to that , and we further have  
 
 which is polynomial. To summarize, if there are at most  triples outside a perfect matching, and the existence of a perfect matching can be determined by brute-forcing within 
 time, which is polynomial. Hence we assume  in the following.

For ease of description, we re-index all elements of  arbitrarily as 
.

Let . There are  key candidates, including the following two kinds of candidates (the function f will be defined later):

•
3ζ key candidates 
 to 
, with 
 corresponding to 
 and has a score of 
. We call them element candidates;

•
one key candidate 
 called leading candidate, which is the original winner and has a score of 
.

Besides key candidates, there are also sufficiently many dummy candidates 
 for , each having a score of 1. The number of dummy candidates will be determined later.
There are η key voters 
 to 
, each of weight Q. Each key voter corresponds to a distinct triple in 
, and votes for the three candidates that correspond to 
, respectively.

Besides key voters, there are also sufficiently many dummy voters 
 for . A dummy vote has a unit weight, and votes for one key candidate and two distinct dummy candidates.

Now we determine the number of dummy voters and dummy candidates together with all the parameters. If we only consider key voters of weight Q, then every element candidate corresponding to some 
 gets a score of 
 where 
 is the number of occurrences of z in M. Adopting the viewpoint of the minmax vector addition problem, for every  we have
  Let
 
 
 
 We define
 
 That means, candidate 
,  will get a score of 
 from key voters, and additionally 
 score from dummy voters. Hence, for each 
 we need to create 
 dummy voters.

We define
 Note that 
 as every element appears at most d times in triples, hence 
 for  and 
 is indeed the original winner.

Overall, dummy voters should contribute 
 to each 
,  and 
 to 
. We create in total 
 dummy voters, and 
 dummy candidates.

Let the defense budget be  and the attack budget be .

“Yes” Instance of 3DM → “Yes” Instance of Destructive Weighted-Bribery-Protection. Suppose the given 3DM instance admits a feasible solution, we show that the answer to destructive weighted-bribery-protection problem is “Yes”. Let  be the perfect matching. Then  and we let the defender protect voters corresponding to the triples in T. By taking the viewpoint of the minmax vector addition problem, if the attacker bribes all the key voters, then 
 increases by exactly 
 for . First it is easy to see that no dummy candidate can be a winner as 
 while 
. Meanwhile, for each key candidate 
, , his/her total score becomes exactly 
. As the defender fixes a subset of key voters, we should subtract the contribution of these key voters. As the triple corresponding to these voters form a perfect matching, these voters contribute a score of exactly  to each 
, hence after bribery every key candidate has a score at most 
, implying that the answer to the Destructive Weighted-Bribery-Protection problem is “Yes”.

“No” Instance of 3DM → “No” Instance of Destructive Weighted-Bribery-Protection. Suppose the given 3DM instance does not admit a perfect matching, we show that the answer to the constructed instance of the destructive weighted-bribery-protection problem is “No”. Consider an arbitrary set of voters fixed by the defender and let U be the subset of key voters that are fixed. Obviously . If , we add arbitrary key voters into U such that its cardinality becomes ζ. Let 
 be the set of these ζ key voters and let the attacker bribe the remaining  key voters. Again we take the viewpoint of the minmax vector addition problem. If the attacker bribes every key voter, then the total score of every key candidate 
, , becomes exactly 
. As key voters in U are not bribed, we subtract their contribution from each 
. Note that triples corresponding to voters in U do not form a perfect matching, thus there exists some element which appears at least twice in these triples. Let 
 be such element and we consider 
. It is clear that 
 if 
 votes for 
 and 
 if 
 does not vote for 
 (note that key voters never vote for 
). Hence 
. By subtracting the contribution of voters in U, 
 has a score at least 
, implying that after bribery 
 will get a higher score than 
. Thus, the answer to the Destructive Weighted-Bribery-Protection problem is “No”. □

Note that in the preceding reduction, we only construct voters of two different weights, Q for the key voters and 1 for the dummy voters. Recall that Q is set to be large enough to assure that only the key voters will be considered by the defender or the attacker. Once 
 and 
 are restricted to be subsets of the key voters, the concrete value of Q does not matter. Moreover, we can also prove the NP-hardness of the destructive (symmetric) $-bribery-protection problem by using essentially the same proof, except that we set key voters of price 1 and dummy voters of price exceeding budgets F and B, say, . This leads to the following lemma.

Lemma 15

The r-approval destructive (symmetric) $-bribery-protection problem is NP-hard for any .

Having showed the NP-hardness of the destructive weighted-protection problem, we show the problem is polynomial-time verifiable and is therefore NP-complete.

Lemma 16

The destructive weighted-protection problem can be verified in polynomial time under any scoring rule.

Proof

We leverage the minmax vector addition problem. In the case of unit price, given 
, the decision version of the verification problem becomes: does there exist a subset 
 such that the following is true
 
 To answer this decision problem, it suffices to do the following for every : pick B voters from 
 whose i-th coordinate 
 is the largest, add them to 
, and check if it is greater than 
. □

It is not clear if the destructive $-protection problem is NP-complete for arbitrary scoring rules. However, we show in the following that for any scoring rule which only assigns a constant number of different scores to a preference list, i.e., the 
's only take  distinct values, the $-protection problem can be verified in polynomial-time. As in the case of the r-approval rule, the 
's only take values of 1 or 0, the destructive $-protection problem is NP-complete for the r-approval rule.

Lemma 17

The destructive (symmetric) $-protection problem can be verified in polynomial-time in n under any scoring rule in which the 
's only take a constant number of distinct values.

Proof

Consider the minmax vector addition problem. We observe that in the case of unit weight and that the 
's take  distinct values, 
 only takes  distinct values. For each coordinate i, we can check if it is possible for 
 and 
's to add up to some value strictly greater than 
. Note that by adding every 
, we need to pay a price of 
, hence it is essentially the knapsack problem with items having arbitrary prices but only  distinct weights. Such a knapsack problem can be solved in polynomial-time, e.g., by simply guessing the number of items of the same weight. Among the items of the same weight, the optimal solution should take the ones with the cheapest price. □

6. Conclusion
We introduced the protection problem and characterized its computational complexity. We showed that the problem, in general, is 
-complete, and identified settings in which the problem becomes easier. Moreover, we showed the protection problem in some parameter settings is polynomial-time solvable, suggesting that these parameter settings can be used for real-work election applications.

We remark three natural open problems for future research. One is the complexity of the destructive protection problem with 
. It is not clear whether the problem is in P or is NP-complete. Another is the constructive protection problem with 
 and arbitrary voter weights. We only show its coNP-hardness, it is not clear whether or not this problem is coNP-complete. The third problem is the complexity of r-approval constructive unit-protection problem when  as our hardness proof only holds when .

In addition to the open problems mentioned above, the following are also worth investigating. First, our hardness results would motivate the study of approximation or FPT (fixed parameter tractable) algorithms for the protection problem. Note that even polynomial time approximation schemes can exist for 
-hard problems (see, e.g., By Caparara et al. [32]). It is thus desirable that a similar result can be obtained for some variants of the protection problem. Second, how effective is this approach when applied towards the problem of defending against other types of attackers that can, e.g., add or delete votes? Third, much research remains to be done in extending the protection problem to accommodate other scoring rules such as Borda and Copeland, and considering multi-winner elections.