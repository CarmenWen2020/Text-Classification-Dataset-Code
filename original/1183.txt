Abstract
In the Small Set Vertex Expansion (SSVE) problem, we are given a graph G=(V,E) and a positive integer k≤|V(G)|2, the goal is to return a set S⊂V(G) of k nodes minimizing the vertex expansion ΦV(S)=|N(S)|. The Small Set Vertex Expansion problem has not been as well studied as its edge-based counterpart Small Set Expansion (SSE). SSE, and SSVE to a less extend, have been studied due to their connection to other hard problems including the Unique Games Conjecture and Graph Colouring. The Small Set Vertex Expansion is known to be NP-complete. We enhance our understanding of the problem from the viewpoint of parameterized complexity by showing that (1) the problem is W[1]-hard when parameterized by the solution size, (2) the problem is fixed-parameter tractable (FPT) when parameterized by the neighbourhood diversity of the input graph, (3) it can be solved in polynomial time for graphs of bounded clique-width, and (4) it is fixed-parameter tractable (FPT) when parameterized by treewidth of the input graph.

Keywords
Parameterized complexity
FPT
W[1]-hard
Treewidth
Clique width
Neighbourhood diversity

1. Introduction
The vertex and edge expansion in graphs have been a subject of intense study with applications in almost all branches of theoretical computer science. From an algorithmic standpoint SSVE and SSE are fundamental optimization problems with numerous applications. Even from a purely theoretical standpoint, the phenomenon of vertex and edge expansion – the lack of good vertex and edge separators, has had numerous implications in all branches of theoretical computer science [18]. Yet, the computational complexity of detecting and approximating expansion, or finding good vertex and edge separators in graphs is not very well understood. Throughout this article,  denotes a finite, simple and undirected graph of order . For a vertex , we use  to denote the (open) neighbourhood of vertex v in G, and 
 to denote the closed neighbourhood of v. The degree  of a vertex  is . For a subset , we define its closed neighbourhood as 
 and its open neighbourhood as .

Definition 1

[3] In the Small Set Vertex Expansion (SSVE) problem, we are given a graph  and a positive integer 
 
. The goal is to return a subset  with  minimizing the vertex expansion 
.

The edge expansion of a subset of vertices  in a graph G measures the fraction of edges that leaves S. For simplicity we consider regular graphs in the definition of Small Set Expansion (SSE). In a d-regular graph, the edge expansion  of a subset  is defined as
 
 where  denotes the set of edges with one endpoint in S and other endpoint in .
Definition 2

[3] In the Small Set Expansion (SSE) problem, we are given a d-regular graph  and an integer 
 
. The goal is to return a subset  with  minimizing the edge expansion 
 
.

Among the two notions of expansion, this work will concern with vertex expansion. The decision version of the problem studied in this paper is formalized as follows:

Image 1
The Small Set Vertex Expansion problem has not been as well studied as SSE, but has recently received significant attention [16]. SSE, and SSVE to a less extend, have been studied due to their connection to other hard problems including the Unique Games Conjecture [11]. These problems recently gained interest due to their connection to obtain sub-exponential time, constant factor approximation algorithm for may combinatorial problems like Sparsest Set and Graph Colouring [1].

A problem with input size n and parameter k is said to be fixed-parameter tractable (FPT), if it has an algorithm that runs in time 
, where f is some (usually computable) function, and c is a constant that does not depend on k or n. What makes the theory more interesting is a hierarchy of intractable parameterized problem classes above FPT which helps in distinguishing those problems that are not fixed parameter tractable. For the standard concepts in parameterized complexity, see [5], [6].

Our main results are the following:

•
SSVE is W[1]-hard when parameterized by the solution size.

•
SSVE is fixed-parameter tractable (FPT) when parameterized by neighbourhood diversity of the input graph.

•
SSVE can be solved in polynomial time for graphs of bounded clique-width.

•
SSVE is FPT when parameterized by treewidth of the input graph.

Related Results: Covering problems are very well-studied in theoretical computer science. Given a set of elements  (called the universe) and a collection  of m sets whose union equals the universe, the Set Cover problem is to identify the smallest sub-collection of  whose union equals the universe, and Max k-Cover is the problem of selecting k sets from  such that their union has maximum cardinality. Max k-Cover is known to admit a 
 
-approximation algorithm (which is also known to be tight) [7]. A natural variation of Max k-Cover problem is instead of covering maximum number of elements, the problem is to cover minimum number of elements of the universe by the union of k sets. Minimum k-Union [3], [21] is one of such problems, where we are given a family of sets within a finite universe and an integer k and we are asked to choose k sets from this family in order to minimise the number of elements of universe that are covered. Minimum k-Union has not been studied until recently, when an -approximation algorithm is given by Eden Chlamtác et al. [4], where m is the number of sets in . Given an instance of Minimum k-Union, we can construct the obvious bipartite graph in which the left side represents sets and the right side represents elements and there is an edge between a set node and an element node if the set contains the element. Then Minimum k-Union is clearly equivalent to the problem of choosing k left nodes in order to minimize the size of their neighbours. This is known as the Small Set Bipartite Vertex Expansion (SSBVE) problem [3]. This is the bipartite version of the Small Set Vertex Expansion problem. Despite being a very natural problem, Minimum k-Union/SSBVE has received surprisingly little attention. Chlamtác et al. [4] gave an -approximation algorithm for SSBVE and equivalently -approximation algorithm for Minimum k-Union problem. An  approximation algorithm for SSE was obtained by Leighton and Rao [14]. Recently, in a breakthrough result Arora et al. [2] obtained an  approximation for the problem using semidefinite programming techniques. Louis and Makarychev [16] studied approximation algorithms for hypergraph small set expansion and small set vertex expansion problem. They provided a polylogarithmic approximation when k is very close to n, namely, 
 
. To the best of our knowledge, the parameterized complexity of SSVE and SSE problems has not been studied before. Raghavendra and Steurer [17] have investigated the connection between Graph Expansion and the Unique Games Conjectures. They proved that a simple decision version of the problem of approximating small set expansion reduces to Unique Games.
The paper is structured as follows. Section 2 contains definitions of two structural graph parameters treewidth and clique width. In Section 3, we prove that the Small Set Vertex Expansion problem is W[1]-hard when parameterized by the solution size via a reduction from Clique. Section 4 presents an FPT algorithm parameterized by neighbourhood diversity. In Section 5, we present a polynomial time algorithm for graphs of bounded clique-width. In Section 6, we prove that the problem is fixed parameter tractable parameterized by treewidth of the input graph.

2. Preliminaries
We recall some graph parameters used in this paper. The graph parameters we explicitly use in this paper are treewidth, clique width, and neighbourhood diversity. We now review the concept of a tree decomposition, introduced by Robertson and Seymour in [19]. Treewidth is a measure of how “tree-like” the graph is.

Definition 3

[6] A tree decomposition of a graph  is a tree T together with a collection of subsets 
 (called bags) of V labeled by the vertices t of T such that 
 and (1) and (2) below hold:

1.
For every edge , there is some t such that 
.

2.
(Interpolation Property) If t is a vertex on the unique path in T from 
 to 
, then 
.

Definition 4

[6] The width of a tree decomposition is the maximum value of 
 taken over all the vertices t of the tree T of the decomposition. The treewidth  of a graph G is the minimum width among all possible tree decomposition of G.

Example 1

Definition 5

[5] A tree decomposition is said to be nice tree decomposition if the following conditions are satisfied:

1.
All bags correspond to leaves are empty. One of the leaves is considered as root node r. Thus 
 and 
 for each leaf l.

2.
There are three types of non-leaf nodes:

•
Introduce node: a node t with exactly one child 
 such that 
 for some 
; we say that v is introduced at t.

•
Forget node: a node t with exactly one child 
 such that 
 for some 
; we say that w is forgotten at t.

•
Join node: a node with two children 
 and 
 such that 
.

Note that, by the third property of tree decomposition, a vertex  may be introduced several times, but each vertex is forgotten only once. To control introduction of edges, sometimes one more type of node is considered in nice tree decomposition called introduce edge node. An introduce edge node is a node t, labeled with edge , such that 
 and 
, where 
 is the only child of t. We say that node t introduces edge uv. It is known that if a graph G admits a tree decomposition of width at most tw, then it also admits a nice tree decomposition of width at most tw, that has at most  nodes [5].
The clique-width of a graph G, denoted by , is the minimum number of labels needed to construct G using the following four operations:

1.
Create a new graph with a single vertex v with label i (written ).

2.
Take the disjoint union of two labelled graphs 
 and 
 (written 
).

3.
Add an edge between every vertex with label i and every vertex with label j,  (written 
).

4.
Relabel every vertex with label i to have label j (written 
).

We say that a construction of a graph G with the four operations is a c-expression if it uses at most c labels. Thus the clique-width of G is the minimum c for which G has a c-expression. A c-expression is a rooted binary tree T such that
1.
each leaf has label i for some ,

2.
each non-leaf node with two children has label ∪, and

3.
each non-leaf node with only one child has label 
 or 
 .

Example 2

Consider the graph 
, which is simply a path on n vertices. Note that 
 and 
. Now consider a path on four vertices 
, in that order. Then this path can be constructed using the four operations (using only three labels) as follows:
 This construction can readily be generalized to longer paths for . It is easy to see that 
 for all .

A c-expression represents the graph represented by its root. A c-expression of a n-vertex graph G has  vertices. A c-expression of a graph is irredundant if for each edge , there is exactly one node 
 that adds the edge between u and v. It is known that a c-expression of a graph can be transformed into an irredundant one with  nodes in linear time. Here we use irredundant c-expression only.
Computing the clique-width and a corresponding c-expression of a graph is NP-hard. For , we can compute a c-expression of a graph of clique-width at most c in 
 time, where n and m are the number of vertices and edges, respectively. For fixed , it is not known whether one can compute the clique-width and a corresponding c-expression of a graph in polynomial time. On the other hand, it is known that for any fixed c, one can compute a 
-expression of a graph of clique-width c in 
 time. For more details see [9].

3. W[1]-hardness parameterized by solution size
In this section we show that SSVE is -hard when parameterized by the solution size, via a reduction from Clique.

Theorem 1

The Small Set Vertex Expansion problem is -hard when parameterized by the solution size.

Proof

Let  be an instance of Clique. We construct an instance 
 
 of Small Set Vertex Expansion problem as follows. We construct a graph 
 with vertex sets X and Y, where 
 and 
, the edge set of G. We make 
 adjacent to 
 if and only if 
 is an endpoint of 
. We further add a set 
 of 
 vertices; the vertices in P are adjacent to every element of X and all vertices in P are pairwise non-adjacent.

We claim that there is a set S of 
 
 vertices in 
 with vertex expansion 
 if and only if G contains a clique on k vertices. Suppose first that G contains a clique on k vertices 
; we set S to be the set of edges belonging to this clique, and notice that in G all endpoints of edges in S belong to the set 
. Thus the vertex expansion of S in 
 is exactly 
 and 
, so we have a yes-instance for 
 
.

Conversely, suppose that 
 contains a set S of 
 
 vertices such that 
. As  for every vertex , we cannot include any vertex of X or P in the set S. So we conclude that  is a set of edges in G. All edges in S belong to the subgraph of G induced by , which by assumption has at most k vertices. Since 
 
, this is only possible if  and  in fact induces a clique in G, as required. □

Note that the Small Set Vertex Expansion problem is NP-hard even when restricted to bipartite graphs. This follows from the proof of Theorem 1 as the non-parameterized version of Clique is NP-complete.
4. FPT algorithm parameterized by neighbourhood diversity
In this section, we present an FPT algorithm for the Small Set Vertex Expansion problem parameterized by neighbourhood diversity. We say that two (distinct) vertices u and v have the same neighbourhood type if they share their respective neighbourhoods, that is, when . If this is so we say that u and v are twins. It is possible to distinguish true-twins (those joined by an edge) and false-twins (in which case ).

Definition 6

[13] A graph  has neighbourhood diversity at most k, if there exists a partition of V into at most k sets (we call these sets type classes) such that all the vertices in each set have the same neighbourhood type.

If neighbourhood diversity of a graph is bounded by an integer k, then there exists a partition 
 of  into k type classes. We would like to point out that it is possible to compute the neighbourhood diversity of a graph in linear time using fast modular decomposition algorithms [20]. Notice that each type class could either be a clique or an independent set by definition and two types classes are either joined by a complete bipartite graph or no edge between vertices of the two types is present in G. For algorithmic purpose it is often useful to consider a type graph H of graph G, where each vertex of H is a type class in G, and two vertices 
 and 
 are adjacent iff there is complete bipartite clique between these type classes in G. The key property of graphs of bounded neighbourhood diversity is that their type graphs have bounded size. For example, a graph G with neighbourhood diversity four and its corresponding type graph H is illustrated in Fig. 3. In this section, we prove the following theorem:

Theorem 2

The Small Set Vertex Expansion problem is fixed-parameter tractable when parameterized by the neighbourhood diversity.

Fig. 3
Download : Download high-res image (42KB)
Download : Download full-size image
Fig. 3. A graph G with neighbourhood diversity 4 and its corresponding type graph H.

Given a graph  with neighbourhood diversity , we first find a partition of the vertices into at most w type classes 
. Next we guess a set of type classes 
 for which 
, where S is a set with k vertices such that the vertex expansion 
 is minimum. Let 
 be a collection of type classes for which 
. There are at most 
 candidates for . Finally we reduce the problem of finding a set S of k nodes that minimizes the vertex expansion 
 to 
 integer linear programming (ILP) optimizations with at most w variables in each ILP optimization. Since ILP optimization is fixed parameter tractable when parameterized by the number of variables [8], we conclude that our problem is fixed parameter tractable when parameterized by the neighbourhood diversity w.

ILP formulation: For each 
, we associate a variable 
 that indicates 
. As the vertices in 
 have the same neighbourhood, the variables 
 determine S uniquely, up to isomorphism. We define
  Let  be a subset of  consisting of all type classes which are cliques;  and 
. Given a 
, our goal is to minimize(1)
 
 
 
 under the condition 
 for all 
 and 
 for all 
 and the additional conditions described below. Note that if 
 and it is adjacent to some type class in , then 
 is contained in ; if 
 then 
 vertices of 
 are in ; finally if 
 and it is adjacent to some type class in , then 
 vertices of 
 are in . It is easy to see that minimizing the expansion 
 in Equation (1) is equivalent to maximizing 
. Given a 
, we present ILP formulation of SSVE problem as follows:


Image 2
Solving the ILP: The feasibility version of p-ILP is fixed parameter tractable with running time doubly exponential in p, where p is the number of variables [15]. Later, an algorithm was designed for p-ILP running in time 
 [10]. In our algorithm, we need the optimization version of p-ILP rather than the feasibility version. As presented by Fellows et al. [8], we state the minimization version of p-ILP:

p-Variable Integer Linear Programming Optimization (p-Opt-ILP): Let matrices 
, 
 and 
 be given. We want to find a vector 
 that minimizes the objective function  and satisfies the m inequalities, that is, . The number of variables p is the parameter. Then they showed the following:

Lemma 3

[8] p-Opt-ILP can be solved using 
 arithmetic operations and space polynomial in L. Here L is the number of bits in the input, N is the maximum absolute value any variable can take, and M is an upper bound on the absolute value of the minimum taken by the objective function.

In the formulation for SSVE problem, we have at most w variables. The value of objective function is bounded by n and the value of any variable in the integer linear programming is also bounded by n. The constraints can be represented using 
 bits. Lemma 3 implies that we can solve the problem with the guess  in FPT time. There are at most 
 choices for , and the ILP formula for a guess can be solved in FPT time. Thus Theorem 2 holds.

5. Graphs of bounded clique-width
In this section we prove that the Small Set Vertex Expansion problem can be solved in polynomial time for graphs of bounded clique-width. The algorithm runs in time 
, where c is the clique-width. The small set vertex expansion number ssven(G) of G is the size of minimum expansion  with .

Theorem 4

Given an n-vertex graph G and an irredundant c-expression T of G, the value  with corresponding set can be computed in 
 time.

We only prove that ssven(G) can be computed in time 
. However corresponding minimum set can also be computed in the same running time by remembering a corresponding set S for each table entry in the dynamic programming. For each node t in the c-expression T of G, let 
 be the vertex-labeled graph represented by t. We denote by 
 the vertex set of 
. For each i, we denote the set of i-vertices in 
 by 
.

For each node t in T, we construct a table 
 where  and  are vectors of length c and ,  can take values from the set . We set 
 if and only if there exists a set 
 such that for all 

1.
,

2.
.

That is,  indicates the number of the i-vertices in S, and  indicates the number of the i-vertices in . Let τ be the root of the c-expression T of G. Then  is the minimum s such that there exists  satisfying 
,  and . If all entries 
 are computed in advance, then we can verify above conditions by spending  time for each tuple .
In the following, we compute all entries 
 in a bottom-up manner. There are 
 
 possible tuples . Thus, to prove Theorem 4, it is enough to prove that each entry 
 can be computed in time 
, assuming that the entries for the children of t are already computed.

Lemma 5

For a leaf node t with label 
, 
 can be computed in  time.

Proof

Observe that 
 if and only if either

•
 and  for all j (this corresponds to ), or

•
 for all ,  and  for all j (this corresponds to 
).

These conditions can be checked in  time. □
Lemma 6

For a ∪-node t, 
 can be computed in 
 time.

Proof

Let 
 and 
 be the children of t in T. Then 
 if and only if there exist 
 and 
 such that 
, 
, 
, and 
. The number of possible pairs for 
 is 
 as 
 is uniquely determined by 
. Similarly, the number of possible pairs for 
 is 
 as 
 is uniquely determined by 
. In total, there are 
 candidates. Each candidate can be checked in  time, thus the lemma holds. □

Lemma 7

For a 
-node t, 
 can be computed in  time.

Proof

Let 
 be the child of t in T. Then, 
 if and only if 
 for some 
 with the following conditions:

•
 hold for all 

•
 is set as:  
 

•
 is set as above with i and j interchanged.

The lemma holds as there is only one candidate for each 
 and 
. □
Lemma 8

For a 
-node t, 
 can be computed in 
 time.

Proof

Let 
 be the child of t in T. Then, 
 if and only if there exist 
 such that 
, where:

•
, 
, and 
 if ;

•
, 
, and 
 if .

The number of possible pairs for 
 is  as 
 is uniquely determined by 
; similarly the number of possible pairs for 
 is  as 
 is uniquely determined by 
. In total there are 
 candidates, and each candidate can be checked in  time. Thus the lemma holds. □
6. FPT algorithm parameterized by treewidth
This section presents an FPT algorithm using dynamic programming for the Small Set Vertex Expansion problem parameterized by treewidth. Given a graph , an integer 
 
 and its nice tree decomposition 
 of width at most tw, subproblems will be defined on 
 where 
 is the union of all bags present in subtree of T rooted at t, including 
 and 
 is the set of edges e introduced in the subtree rooted at t. We define a colour function 
 that assigns three different colours to the vertices of 
. The meanings of three different colours are given below:

1 (black vertices): all black vertices are contained in set S whose vertex expansion 
 we wish to calculate in 
.

0 (white vertices): white vertices are adjacent to black vertices, these vertices are in the expansion  in 
.

 (gray vertices): gray vertices are neither in S nor in .

Now we introduce some notations. Let  and consider a colouring 
. For 
 and  a new colouring 
 is defined as follows:
  Let f be a colouring of X, then the notation 
 is used to denote the restriction of f to Y, where .

For a colouring f of 
 and an integer i, a set 
 is said to be compatible for tuple  if

1.
,

2.
 which is the set of vertices of 
 coloured black, and

3.
, which is the set of vertices of 
 coloured white.

We call 
 a minimum compatible set for  if its vertex expansion 
 is minimum. We denote by  the value of minimum vertex expansion for , that is,  equals to 
, where 
 is a minimum compatible set for . If no such S exists, then we put  also . Since each vertex in 
 can be coloured with 3 colours (
), the number of possible colouring f of 
 is 
 and for each colouring f we vary i from 0 to k. The smallest value of vertex expansion 
 for a set S with k nodes will be , where r is the root node of tree decomposition of G as 
 and 
. We only show that 
 can be computed in the claimed running time in Theorem 9. Corresponding set S can be easily computed in the same running time by remembering a corresponding set for each tuple  in the dynamic programming. Now we present the recursive formulae for the values of .

Leaf node: If t is a leaf node, then the corresponding bag 
 is empty. Hence the colour function f on 
 is an empty colouring; the number i of vertices coloured black cannot be greater than zero. Thus we have 
  Introduce node: Suppose t is an introduce node with child 
 such that 
 for some 
. The introduce node introduces the vertex v but does not introduce the edges incident to v in 
. So when v is introduced by node t it is an isolated vertex in 
. Vertex v cannot be coloured white 0; as it is isolated and it cannot be neighbour of any black vertex. Hence if , then . When , v is contained in S. As v is an isolated vertex, it does not contribute towards the size of 
, hence 
. When 
, v does not contribute towards the size of 
. Here the sets compatible for 
 are also compatible for . So, 
. Combining all the cases together, we get
 

Introduce edge node: Let t be an introduce edge node that introduces the edge , let 
 be the child of t. Thus 
; the edge  is not present in 
, but it is there in 
. Let f be a colouring of 
. We consider the following cases:

•
Suppose  and 
. This means  and v is non-adjacent to black vertices in 
. But u and v are adjacent in 
. Thus . The same conclusion can be drawn when v is coloured black and u is coloured gray.

•
Suppose  and . This means  and  in 
. In order to get a solution for , we consider two cases.

Case 1: While considering precomputed solution for 
 we can relax the colour of v from white to gray. Then the minimum vertex expansion for  is one more than the minimum vertex expansion for 
, that is, 
.

Case 2: While considering precomputed solution for 
 we keep the colour of v be white. Then the minimum vertex expansion for  is equal to the minimum vertex expansion for 
, that is, 
.

Combining above two cases we get
 The same conclusion can be drawn when v is coloured black and u is coloured white.

•
Other colour combinations of u and v do not affect the size of  or do not contradict the definition of compatibility. So the compatible sets for 
 are also compatible for  and hence 
.

Combining all the cases together, we get
  Forget node: Let t be a forget node with the child 
 such that 
 for some vertex 
. Here the bag 
 forgets the vertex w. At this stage we decide the final colour of the vertex w. We observe that 
. The compatible sets for 
, 
, 
 are also compatible for . On the other hand compatible sets for  are also compatible for 
 if , for 
 if  or for 
 if . Hence
Join Node: Let t be a join node with children 
 and 
, such that 
. Let f be a colouring of 
. We say that colourings 
 of 
 and 
 of 
 are consistent for colouring f of 
, if the following conditions are true for each 
:

1.
 if and only if 
,

2.
 if and only if 
,

3.
 if and only if 
.

Let f be a colouring of 
; 
 and 
 be two colourings of 
 and 
 respectively consistent with f. Suppose 
 is a compatible set for 
 and 
 is a compatible set for 
, where 
 and 
. Set 
, clearly 
. It is easy to see that S is a compatible set for , where 
. According to Condition 3 in the definition of consistent function, each 
 that is white in f, we make it white either in 
, 
 or in both 
 and 
. Consequently, we have the following recursive formula: 
  
 
 where 
.
We now analyse the running time of the algorithm. We compute all entries  in a bottom-up manner. Clearly, the time needed to process each leaf node, introduce vertex node, introduce edge node or forget node is 
 assuming that the entries for the children of t are already computed. The computation of  for join node takes more time and it can be done as follows. If a pair 
 is consistent with f, then for every 
, we have 
. Hence there are exactly 
 triples of colourings 
 such that 
 and 
 are consistent with f, since for every vertex v, we have 5 possibilities for 
. In order to compute , we iterate through all consistent pairs 
; then for each considered triple 
 we vary 
 and 
 from 0 to k such that 
. As 
, the time needed to process each join node is 
. Since we assume that the number of nodes in a nice tree decomposition is , we have the following theorem.

Theorem 9

Given an n-vertex graph G and its nice tree decomposition of width at most tw, the Small Set Vertex Expansion problem can be solved in 
 time.

7. Conclusion
In this work we proved that the Small Set Vertex Expansion problem is W[1]-hard when parameterized by solution size; it is FPT when parameterized by neighbourhood diversity; and the problem is FPT when parameterized by treewidth of the input graph. We also proved that the problem can be solved in polynomial time for graphs of bounded clique-width. The parameterized complexity of the Small Set Vertex Expansion problem remains unsettle when parameterized by , and when parameterized by other important structural graph parameters like clique-width, modular width and treedepth.