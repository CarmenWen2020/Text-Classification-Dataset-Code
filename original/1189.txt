Abstract
A hypergraph H on n vertices and m edges is said to be nearly-intersecting if every edge of H intersects all but at most polylogarthmically many (in m and n) other edges. Given lists of colors L(v), for each vertex v∈V, H is said to be L-(list) colorable, if each vertex can be assigned a color from its list such that no edge in H is monochromatic. We show that list-colorability for any nearly intersecting hypergraph, and lists drawn from a set of constant size, can be checked in quasi-polynomial time in m and n.

Keywords
Hypergraph coloring
Hypergraph dualization
Exact algorithms
Quasi-polynomial algorithm
List coloring

1. Introduction
Hypergraph k-Coloring is the problem of checking whether the vertex-set of a given hypergraph (family of sets) can be colored with at most k colors such that every edge receives at least two distinct colors. It is a basic problem in theoretical computer science and discrete mathematics which has received considerable attention (see, e.g. [1], [2], [3], [4], [5], [6], [7]). The problem is NP-complete already for , and in fact, it is quasi-NP-hard1 to decide if a 2-colorable hypergraph can be (properly) colored with 
 colors [5]. On the other hand, the best positive results are polynomial time algorithms that can color an -colorable hypergraph with 
 colors, where n is the number of vertices (see, e.g., [8], [9], [10]). Several generalizations of the problem have also been considered, for example, List-Coloring where each vertex can take only a color from a given list of colors [11], [12].

Given the intrinsic difficulty of the problem, it is natural to consider special classes of hypergraphs for which the problem is easier. Some better results exist for special classes, e.g., better approximation algorithms for hypergraphs of low discrepancy and rainbow-colorable hypergraphs [13], polynomial time algorithms for bounded-degree linear hypergraphs [2], [14], for random 3-uniform 2-colorable hypergraphs [15], as well as for some special classes of graphs [16], [17], [18], [19].

In this paper, we consider a special class of hypergraphs in which every edge intersects all but at most c other edges (also considered for  in [20]); we call such hypergraphs c-intersecting2 for any , and nearly intersecting when c is polylogarithmic in the number of vertices and edges (this is in contrast to [2] which considers nearly disjoint hypergraphs). While near-intersection may seem as a strong restriction at a first thought, the problem is still actually highly non-trivial. In fact, the case  and  is equivalent to the well-known Monotone Boolean Duality Testing, which is the problem of checking for a given pair of CNF and DNF formulas if they represent the same monotone Boolean function [21], [20]. Determining the exact complexity of this duality testing problem is an outstanding open question, which has been referenced in a number of complexity theory retrospectives, e.g., [22], [23], and has been the subject of many papers, see, e.g., [24], [25], [26], [27], [21], [28], [29], [30], [31], [32], [33], [34], [35], [36]. Fredman and Khachiyan [31] gave an algorithm for solving this problem with running time 
, where n is the size of the input, thus providing strong evidence that this decision problem is unlikely to be NP-hard.

The reduction from Boolean Duality Testing to checking 2-colorability is essentially obtained by a construction from [20] which reduces the problem to checking if a monotone Boolean function given by its CNF is self-dual. However, almost all known algorithms for solving Boolean duality testing cannot work directly with the self-duality (and hence 2-colorabilty) formulation, due to their recursive nature which results in subproblems that do not involve checking self-duality. The only algorithm we are aware of that works directly on the 2-colorability version is the one given in [33], but it yields weaker bounds 
 than those given in [31]. In this paper, we provide bounds that match closely those given in [31] and show that those can be in fact extended to any constant k, and to the more general class of c-intersecting hypergraphs and further for checking list-colorability.

We remark that, while any 0-intersecting hypergraph is trivially 3-colorable,3 the question becomes non-trivial for . In particular, it is easy to see that any c-intersecting hypergraph is -colorable, and thus the question of k-colorability becomes interesting for any k between 2 and . It is also worth mentioning that 1-intersecting hypergraphs have been considered in [37, Section 2.4.1], where it was shown that if such a hypergraph is 2-colorable then it is also list colorable for any lists of size 2. It is not clear whether such result extends to the cases  or .

Finally, it seems remarkable that the problem becomes NP-hard under other notions of colorability, as can be easily seen, for instance, for the following notion of strong colorability: given a 0-intersecting hypergraph, check if its vertex set can be colored with 3 colors in such a way that any edge  contains  distinct colors.4

2. Basic notation and main result
Let 
 be a hypergraph on a finite set V,  be a positive integer, and 
 be a mapping that assigns to each vertex  a list of admissible colors . An -(list) coloring of  is an assignment  of colors to the vertices of  such that  for all . An -coloring is said to be proper if it results in no monochromatic edges, that is, if , for all , where . We denote by  and , and assume without loss of generality that 
.

For a non-negative integer c, a hypergraph  is said to be c-intersecting if for all ,(1)
 A hypergraph is said to be nearly intersecting if it is c-intersecting for . In this paper, we are interested in the following problem:

Proper--Coloring: Given a hypergraph 
 satisfying (1) and a mapping 
, either find a proper -coloring of , or declare that no such coloring exists.

For a set , let 
 be the subhypergraph of  induced by set S, 
 be the projection (or trace) of  into S (this can be a multi-subhypergraph), and  be the subhypergraph with edges having non-empty intersection with S. We define further 
, and for , 
.

Our main result is that the problem can be solved in quasi-polynomial time5 for nearly intersecting hypergraphs and constant number of colors. In fact, we will prove the following stronger result.

Theorem 1

Problem Proper--Coloring can be solved in  time if  and , with an algorithm whose recursion-tree depth is .

As a corollary, we obtain the following result on the parallel complexity of the problem (in the PRAM model).
Corollary 1

Problem Proper--Coloring can be solved in  parallel time on  number of processors, if  and .

In the following, we will consider partial -colorings  of , where  is used to mean that the vertex v is not assigned any color yet; we say that such coloring is proper if no (fully colored) edge is monochromatic. Given a proper partial -coloring χ of a hypergraph 
, we will use the following notation: 
 and 
 for , and shall simply write 
 and 
 when χ is clear from the context; any extension of χ (obtained by coloring some vertices in 
) will be called proper, if it results in no monochromatic edge (that is, when combined with χ, it yields a proper partial -coloring for );  denotes the hypergraph  after deleting multi-chromatic edges, that is, . For , we write 
. For two (partial) -colorings  and 
, where , we denote by 
 the partial -coloring that assigns 
 for  and 
 for . If there is an  such that , we shall assume that  is not properly -colorable for any 
. Also, by assumption, an empty hypergraph (that is, ) is properly -colorable.

Given a proper partial -coloring χ of , we call 
 a 0-simple (resp., i-simple, for ) assignment if it is obtained by choosing, for each 
 (resp., for each 
), two distinct vertices 
 and two distinct colors  and 
 (resp., a vertex 
 and a color for v among the colors in ). Such an assignment is proper, if the coloring 
 is a proper partial -coloring for . The following claim is straightforward.

Proposition 1

The number of 0-simple (resp., i-simple, for ) assignments is at most 
 (resp., 
).

In the following two sections we give two algorithms for solving the problem. They are inspired by the two corresponding algorithms in [31], for Monotone Boolean Duality Testing, and can be thought of as generalizations. The first algorithm is simpler and exploits the idea of the existence of a large degree vertex in any non-colorable instance. By considering all possible admissible colorings of such a vertex we can remove a large fraction of the edges and recurse on substantially smaller-size problems. Unfortunately, the degree of the high-degree vertex is only large enough to guarantee a bound of 
 (assuming k and c are fixed). The second algorithm is more complicated and considers both scenarios when there is a high-degree vertex and when there are none (where now the threshold for “high” is higher). If there is no high-degree vertex, then we can find a “balanced-set” which induces a constant number of edges. Then a decomposition can be obtained based on this set.

3. Solving Proper--Coloring in quasi-polynomial time
We give two lemmas that show the existence of a large degree vertex, unless the hypergraph is easily colorable.

Lemma 1

Let 
 be a given c-intersecting hypergraph, 
 be a mapping, and  be a proper partial -coloring of  such that 
. Then either

(i)
there is a vertex 
 with 
 
, or

(ii)
an -coloring 
, such that 
 is a proper -coloring of , can be found in 
 time.

Proof

Let 
 be an edge in 
 of minimum size. Assume, without loss of generality, that 
. Pick a random -coloring 
 by assigning, independently for each 
, 
 with probability 
 
. Then, for an edge 
, 
  
 
 
 
 and for 
, , 
 
 
 
 It follows that 
  
 
 
 
 
 
 
 Thus if 
 
, then there is a proper -coloring 
 of , which can be found by the method of conditional expectation in time 
. Let us therefore assume for the rest of this proof that 
.

Let 
 be a vertex maximizing 
 over 
. Then (1) implies that
 
 
 
 Consequently, 
 
 
. □

Lemma 2

Let 
 be a given hypergraph c-intersecting hypergraph, 
 be a mapping, and  be a proper partial -coloring of  such that 
, and for all , either 
 or 
. Then either

(i)
there is a vertex 
 and , , such that 
 
 and 
, or

(ii)
an -coloring 
, such that 
 is a proper -coloring of , can be found in 
 time.

Proof

Let 
 be an edge in 
 of minimum size. Note that (1) implies:(2)
 since 
 for all 
 and 
, for .

If there is an  such that 
 for all  then an -coloring satisfying (ii) can be found by choosing arbitrarily  for 
. Assume therefore that 
 for at least two distinct indices . Pick a random -coloring 
 by assigning, independently for each 
,  with probability 
 
. Then
 
 
 
  
 
 
 
 Thus if 
 
, then there is an -coloring satisfying (ii), which can be found by the method of conditional expectation in time 
. Let us therefore assume for the rest of this proof that 
.

Let j be such that 
, and 
 be a vertex maximizing 
 over 
. Then (2) implies that
 
 
 
 Consequently, 
 
 
 
 
 
 
 from which it follows that 
 
 
 
. □

The algorithm for solving Proper--Coloring is given as Algorithm 1, which is called initially with . The algorithm terminates either with a proper -coloring of , or with a partial -coloring with some unassigned vertices, in which case we conclude that no proper -coloring of  exists.

Algorithm 1
Download : Download high-res image (174KB)
Download : Download full-size image
Algorithm 1. Proper--Coloring-A.

The algorithm proceeds in two phases. As long as the number of edges with no assigned colors is above a certain threshold δ, that is 
, the algorithm is still in phase I; otherwise it proceeds to phase II. While in phase I (resp., phase II), the algorithm picks a vertex v satisfying condition (i) of Lemma 1 (resp., Lemma 2) and iterates over all feasible assignments of colors to v, that result in no monochromatic edges (line 7); if no such v can be found, the algorithm concludes with a proper -coloring obtained by part (ii) of Lemma 1 (resp., Lemma 2). In each iteration, any edge that becomes multi-chromatic is removed and the algorithm recurses on the updated hypergraph. If none of the recursive calls yields a feasible extension of the current proper partial -coloring χ, we unassign vertex v. At the beginning of each recursive call in phase II, we preform a “clean-up” step (lines 12-14) by trying all possible i-simple assignments for hypergraphs 
 with 
 sufficiently small. This allows us to start phase II with 
 and to keep only hypergraphs 
 whose size is above the threshold δ.

To analyze the running time of the algorithm, let us measure the “volume” of a subproblem with input , in phase I by 
, and in phase II by(3)
 
 The recursion stops when 
 (meaning that 
 for all , and hence, the algorithm managed to completely color all vertices), an -coloring satisfying condition (i) of Lemma 1, Lemma 2 is found (in lines 10 or 16), or when no proper extension of the current partial coloring  can be found (no proper assignment exists in lines 6, 13, or 16).

Lemma 3

Algorithm 1 solves problem Proper--Coloring in time 
, where 
.

Proof

Let 
 
, 
 
 and 
. We may assume that 
 
, since otherwise , implying that the algorithm would terminate in 
 time after trying all simple 0-assignments in lines 5-6. Note that this implies that 
 as 
 
.

Consider the recursion tree T of the algorithm. Let 
 (resp., 
) be the subtree (resp., sub-forest) of T belonging to phase I (resp., phase II) of the algorithm. Note that 
 consists of maximal sub-trees of T, each of which is rooted at a leaf in 
. For 
 (resp., 
 and ), let use denote by 
 (resp., 
) be the total number of nodes in 
 (resp., 
) that result from a subproblem of volume 
 (resp., 
 with 
) in phase I (resp., phase II). For each recursive call of the algorithm, we obtain a recurrence on 
 (resp., 
), as explained in the following. Naturally, we assume that 
 (resp., 
) is monotonically increasing in 
 (resp., in both 
 and t). For simplicity and to avoid confusion, we denote by 
 and 
 the hypergraphs, volumes and the number of non-empty hypergraphs, in the current and next recursive calls, respectively. For the sake of the analysis, without loss of generality, we assume throughout that the algorithm does not terminate on a “forced stop” as in line 10.

Claim 1

.

Proof

Let  be the vertex chosen in line 5. Since v is a large-degree vertex (with respect to 
) which receives a color, 
 
. Thus, for a non-leaf node of 
, we have the recurrence:(4)
 At leaves we have 
. It follows that the depth 
 of the recursion subtree of a node (in 
) of volume 
 is at most 
 
, where 
 is the initial volume, and hence the total number 
 of nodes is bounded by 
 
 
 (as  and 
). □

Claim 2

.

Proof

There are two possible locations in which a recursive call can be initiated in phase II:

Line 14: Since 
, as we remove at least one hypergraph 
 by trying all i-simple assignments whose number is at most 
, where 
, we get the recurrence(5)
 Line 16 (the part corresponding to line 7): Let  be the vertex chosen before the recursive call (as in line 5), that is, v satisfies condition (i) of Lemma 2, and let  be such that , 
 
 and 
. There are  recursive calls that will be initiated from this point, corresponding to ; consider the ℓth recursive call. If  then setting  will result in deleting all the edges containing v from 
. Thus, 
 
 if 
 and 
 
, 
 if 
. In both cases, we get 
 (as 
 
 
). On the other hand, if , then at least one edge in 
 will be deleted, yielding 
, or 
 
 and 
, depending on whether 
 or 
. Again in both cases, for 
, wet get 
 (as 
 
 
 
). Consequently, for 
, we get the recurrence:(6)
 By definition, 
, for 
. We will prove by induction on  and 
 that(7)
 where 
 
 and 
. We consider 2 cases:

Case 1. 
: Then 
 for all , and recurrence (5) applies iteratively until we get . By the recurrence, 
, giving the base case (), and by induction on t,
 Case 2. 
: If the recurrence in (5) applies then the same induction proof (on t) in case 1 gives the required bound. Consider, thus, the recurrence in (6) and apply induction on 
:
 
 
 
 
 
 
 
 
 
 □

Using the bounds 
, and
 
 
 
 we get 
 and 
 
 
. Putting Claim 1, Claim 2 together, and noting that at internal nodes the running time is , and that the roots of the maximal sub-trees in 
 are the leaves of 
, the lemma follows. □

4. A more efficient algorithm
When  and , the algorithm presented in the previous section for Proper--Coloring has running time 
. Moreover, the recursion tree can have depth . In this section, we give an algorithm with running time 
 and recursion-tree depth  (for  and ), thus proving Theorem 1. The speedup comes from the fact that the algorithm may assign one color to a complete set of vertices in one time step, rather than to a single vertex as in the previous algorithm. In fact, as we shall see below, the algorithm may “probe” a color assignment on a certain set (the set 
 in Lemma 4, Lemma 5); if such an assignment cannot be completed to a proper coloring for the whole hypergraph, the information gained from such a “failure” turns out to be useful for restricting the set of color assignments the algorithm should try next. In general, such a probing strategy may be expensive, but as we shall see below, we can use a set S satisfying some “balancing” condition (see Lemma 6, Lemma 7) to ensure that the increase in the running time from probing is offset by the amount of information gained.

For a hypergraph 
 and a positive number , denote by  the subset 
 of “high” degree vertices in . Given 
, 
, let us call an 
-balanced set with respect to , any set  such that 
.

Proposition 2

[27]
Let 
 be two given numbers such that, 
 and 
 satisfies 
. Then there exists a 
-balanced set  with respect to . Such a set S can be found in  time.

Proof

Let 
 be an arbitrary order of the vertices of 
 
 and find the index , such that(8)
 The existence of such j is guaranteed by the facts that 
 
. Finally, we let 
. Since 
, it follows from (8) that 
, implying that S is indeed a balanced superset of T. □

Lemma 4

Let 
 be a c-intersecting hypergraph, 
 be a mapping,  be a proper partial -coloring of , and 
 be a given set of vertices such that 
 (equivalently, 
). Fix an arbitrary (proper) coloring 
 and let 
. Then, χ is extendable to a proper -coloring of  if and only if either

(i)
χ is extendable to a proper -coloring 
 for , with 
, or

(ii)
, such that χ is extendable to a proper -coloring 
 for  with 
.

Proof

First note that 
 does not introduce any monochromatic edges as 
. Suppose that χ is extendable to a proper -coloring 
 for . The statement that (i) is not satisfied means that there is an 
, such that (in any proper extension 
 of χ), 
 assigns a single color to all the vertices in , which is exactly the color assigned by 
 to all vertices in , and hence (ii) is satisfied.

Conversely, if (i) or (ii) hold, then trivially, there is an -coloring extension 
 of χ that properly colors . □

Lemma 5

Let 
 be a c-intersecting hypergraph, 
 be a mapping,  be a proper partial -coloring of , and 
 be a given set of vertices such that, for some , 
 (equivalently, 
 for all ). Fix 
 by setting 
 arbitrarily for 
, and let 
. Then χ is extendable to a proper -coloring of  if and only if either

(i)
χ is extendable to a proper -coloring 
 for , with 
, or

(ii)
, such that χ is extendable to a proper -coloring 
 for  with 
.

Proof

First note that 
 does not introduce any monochromatic edges as  for all 
. Suppose that χ is extendable to a proper -coloring 
 for . If (i) is not satisfied then there is an 
 for some , such that 
 assigns a single color to all the vertices in , which is exactly the color assigned by 
 to all vertices in , and hence (ii) is satisfied.

Conversely, if (i) or (ii) hold, then trivially, there is an -coloring extension 
 of χ that properly colors . □

Lemma 6

Let 
 be a c-intersecting hypergraph, 
 be a mapping,  be a proper partial -coloring of  such that 
, 
, and 
 be two given numbers satisfying 
 
. Then there is a 
-balanced set 
 with respect to 
 such that 
.

Proof

We start with a 
-balanced set 
, guaranteed by Proposition 2. Since 
, by (1) we have 
. Let S be the set obtained by appending to 
 a single vertex from each edge (if any) in 
 (that is, vertices are added from 
). Then, since the degree of each appended vertex is no more than 
 (as 
), we get
 □

Lemma 7

Let 
 be a c-intersecting hypergraph, 
 be a mapping,  be a proper partial -coloring of  such that 
 for at least two i's, and 
 
 be two given numbers satisfying 
. Then either (i) there is 
 and  such that 
 and 
, or (ii) there is a 
-balanced set 
 with respect to 
 for some , such that 
 for all .

Proof

For any  such that 
 and 
, let 
 and 
. If 
 then any v in this intersection will satisfy (i). Otherwise, (1) implies that either 
 or 
 (as any 
 and 
 cannot intersect outside 
), in which case a 
-balanced set 
 with respect to 
 or 
, respectively, can be obtained by Proposition 2. Suppose 
 was obtained w.r.t. 
 but there are some edges in 
 that are induced by 
. Let S be the set obtained by appending to 
 a single vertex from each such edge (that is, vertices are added from 
). Then, since the number of such edges is at most c (by (1)) and the degree of each appended vertex is no more than 
 (as 
), we get
 □

Again, the algorithm proceeds in two phases. As long as there is still a good number of edges with no assigned colors, the algorithm is still in phase I; otherwise it proceeds to phase II. While in phase I (resp., phase II), the algorithm tries, in line 5 (resp., line 18), to find a vertex v of large degree in 
 (resp., in 
 and 
 for some ) and iterates over all feasible assignments of colors to v, that result in no monochromatic edges; if no such v can be found then Lemma 6 (resp., Lemma 7) guarantees the existence of a 
-balanced set with respect to 
 (resp., with respect to some 
, ), which is found in line 9 (resp, 21). Lemma 4 (resp., Lemma 5) then reduces the problem in the latter case to checking conditions (i) and (ii) of the lemma, which is done in lines 10-13 (resp., 22-25). If none of the recursive calls yields a feasible extension of the current proper partial -coloring χ, we unassign all the vertices colored in this call. At the beginning of each recursive call in phase II, we preform a “clean-up” step (lines 15-17) by trying all possible i-simple assignments for hypergraphs 
 with 
 sufficiently small. This allows us to start phase II with 
 and to keep only hypergraphs 
 whose size is above the prescribed threshold δ.

As in the previous section, to analyze the running time of the algorithm, we measure the volume of a subproblem in phase I by 
, and in phase II by 
 given by (3). The recursion stops when 
 for all , or no proper extension of the current partial coloring  can be found.

Given a subproblem of volume μ, let 
 
, where  is the unique positive root of the equation:(9)
 
 Note that , and hence , for , and that (for constant k and c) 
 
. We use in the algorithm:(10)
 
 
 

Lemma 8

Proof

Consider the recursion tree T of the algorithm. Let 
 (resp., 
) be the subtree (resp., sub-forest) of T belonging to phase I (resp., phase II) of the algorithm. For 
 (resp., 
 and ), let use denote by 
 (resp., 
) be the total number of nodes in 
 (resp., 
) that result from a subproblem of volume 
 (resp., 
 with 
) in phase I (resp., phase II). For each recursive call of the algorithm, we obtain a recurrence on 
 (resp., 
), as explained in the following. Again, we assume that 
 (resp., 
) is monotonically increasing in 
 (resp., in both 
 and t). Also, as before, we denote by 
 and 
 the hypergraphs, volumes and the number of non-empty hypergraphs, in the current and next recursive calls, respectively.

Claim 3

.

Proof

There are two possible locations in which a recursive call can be initiated in phase I:

Line 7: In this case, there is a vertex 
 such that 
, and we get 
, and consequently the recurrence:(11)
 
 since the recursion in line 7 will exclude all the edges containing v from 
.

Lines 11 and 13: In this case, no large-degree vertex can be found. Then Lemma 6 implies that there is a 
-balanced set S, with respect to 
, which is found in line 9. Then we apply Lemma 4 which reduces the problem to one recursive call on the hypergraph  in line 11, but after fixing the colors of all vertices in 
, and at most 
 recursive calls (in lines 12-13) on the hypergraphs obtained by fixing the color of one set , for some 
. Note that S satisfies: 
. In particular, there is are at least 
 edges 
 such that , and hence all of these edges will be removed from 
 in line 11 giving 
. Moreover, in line 13, we will have 
, as (by (1)) all but at most c edges in 
 have non-empty intersections with the set , in the current iteration of the loop in line 12, all vertices of which are assigned the color 
. Since 
, we get the following recurrence for 
:(12)
 
 
 
 where we used the definitions of 
, 
, and 
 in (10). By the termination condition of phase I (in line 4), we have 
 for 
. We will prove by induction on 
 that 
.

Let us assume that 
 and consider first recurrence (11). Applying induction we get
 
 
 
 
 
 Let us consider next recurrence (12) and apply induction:
 
 
 
 
 
 
 
 
 
 
 
 □

Claim 4

.

Proof

There are three possible locations in which a recursive call can be initiated in phase II:

Line 17: Since 
, as we remove at least one hypergraph 
 by trying all i-simple assignments whose number is at most 
, where 
 for  and 
 for , we get the recurrence(13)
 Line 19: In this case, there are 
 and  such that 
 and 
 then the algorithm proceeds similar to lines 6-7, and we get the recurrence:(14)
 
 since we recurse (in the line similar to line 7) on a hypergraph 
 that excludes either all the edges containing v from 
, if we set the color of v to j, or all those containing v from 
 if we set the color of v to i (or both, if we set the color of v to ). Note that, in both cases, if 
, then 
 
 and hence 
 (as 
 
 
).

Lines 23 and 25: In this case, there is no large-degree vertex. Then Lemma 7 implies that there is a 
-balanced set S, with respect to some 
, which is found in line 22. Then we apply Lemma 5 which reduces the problem to one recursive call on the hypergraph  in line 23, but after fixing the colors of all vertices in 
, and at most 
 recursive calls (in lines 24-25) on the hypergraphs obtained by fixing the color of one set , for some 
 and . Note that S satisfies: 
. In particular, 
. Since, in line 23, we recurse on the hypergraph 
, since any 
 with 
 will receive at least one color different from i, we get 
. Moreover, in line 25, we will have 
, as (by (1)) all but at most c edges in 
 have non-empty intersections with the set , in the current iteration of the loop in line 24, all vertices of which are assigned the color . Since 
, we get the following recurrence for 
:(15)
 
 
 (Note that, if 
, then 
 
 and hence 
 
, as 
 
 
 
.)

By definition, 
, for 
. We will prove by induction on  and 
 that 
, where 
 
 and 
. We consider 2 cases:

Case 1. 
: Then 
 for all , and recurrence (13) applies iteratively until we get . By the recurrence, 
, giving the base case (), and by induction on t,
 Case 2. 
: Let us note first that if the recurrence in (13) applies then the same induction proof (on t) in case 1 gives the required bound. Let us note next that recurrence (14) is identical to (11), but with 
 replaced by 
 and 
 replaced by 
. Thus, essentially, the same inductive proof in Claim 3 gives that 
 in this case (as 
).

Finally, let us consider next recurrence (15) and apply induction (on 
):
 
 
 
 
 
 
 
 
 
 □

Using the bounds 
, 
 
, and 
, we get 
 and 
 
 
 
. Putting these bounds together, and noting that 
 
, where , the lemma follows. □

Lemma 9

The depth of the recursion tree is 
 
, where 
 
 and .

Proof

Let 
 (resp., 
) denote the depth of the recursion subtree (resp., sub-forest) in phase I (resp., phase II), when the volume of the subproblem is 
 (resp., 
 and 
). Then, corresponding to recurrences (11), (12), (13), (14) and (15), we have the following recurrences on the depth:(16)
 
(17)
 
(18)
(19)
 
(20)
 
 Once 
 (resp., 
) drops to  (resp., 
), phase I ends (resp., phase II ends after at most  more recursive calls). Thus, the above recurrences imply that 
 
 (resp., 
 
), where 
 
 
 (resp., 
 
 
). It follows that the overall depth of the recursion tree is 
 
. □

Remark 1

If we do not insist on a recursion tree with polylogarithmic depth, then Algorithm 2 can be simplified by using 
 for a low-degree vertex 
 in lines 9 and 21. It can be seen from the analysis above that a weaker recurrence will be obtained with the first term in (12) and (15) replaced by 
 and 
, respectively. The resulting solution will still be 
 (assuming all other parameters are fixed), but the depth of the recursion tree can be linear in m.