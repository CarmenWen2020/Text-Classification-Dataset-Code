Abstract
The eternal vertex cover (EVC) problem is to compute the minimum number of guards to be placed on the vertices of a graph so that any sequence of attacks on its edges can be defended by dynamically reconfiguring the guards. The problem is NP-hard in general and polynomial time algorithms are unknown even for simple graph classes like cactus graphs and bipartite graphs. A major difficulty is that only few lower bounds, other than the trivial lower bound of vertex cover, is known in general and the known bounds are too weak to yield useful results even for the graph classes mentioned above. We introduce the notion of substructure property in the context of the EVC problem and derive a new lower bounding technique for the problem based on the property. We apply the technique to cactus graphs and chordal graphs and obtain new algorithms for solving the eternal vertex cover problem in linear time for cactus graphs and quadratic time for a family of graphs that includes all chordal graphs and cactus graphs.

Keywords
Eternal vertex cover
ubstructure property
Cactus graphs
Chordal graphs

1. Introduction
Eternal vertex cover (EVC) problem is described by a two player attack-defense game played on a graph G using k guards [1]. Initially, the defender places guards on a vertex cover of G, defining an initial configuration. The positions of guards in any round of the game define a configuration. In each subsequent round, an attacker attacks an edge of her choice. In response, the defender reconfigures guards by moving them in parallel such that: a) each guard is either unmoved or moved to an adjacent vertex b) at least one guard moves across the attacked edge c) the resultant configuration is a vertex cover of G. If the defender is able to do this, then the game proceeds to the next round with this configuration. Otherwise, the game ends with the attacker winning. If the defender can eternally defend any sequence of attacks on G with k guards, then we say that the defender has a winning strategy on G with k guards and the set of all configurations encountered in the game defines an eternal vertex cover class (evc class) of size k for G. The eternal vertex cover number, , is the minimum number k of guards required to eternally defend any arbitrary sequence of attacks. Clearly, , the vertex cover number of G. An evc class of G whose configurations have  guards is called a minimum evc class of G.

There are two variants for the eternal vertex cover problem. The first variant has a constraint that at most one guard can be on any vertex in each configuration. In the second model, multiple guards can be present on a single vertex in each configuration. It is known [2] that the eternal vertex cover number of a graph could be different in these two versions. However, the results of this paper and those cited hold true in both versions.

Fomin et al. [3] showed that computation of  is NP-hard, but is in PSPACE. It is unknown whether the problem is in NP for bipartite graphs [3]. The status of the problem remains open even for graphs of treewidth two. For any graph G,  is at most twice the size of a maximum matching in G [3] and is at most , where  is the minimum cardinality of a connected vertex cover of G [1]. From this, it follows that for a graph G, . Dynamic variants of other classical graph parameters like dominating set [4], [5], [6], [7] and independent set [8], [9] and their relationship with eternal vertex cover number [10], [11] are well known in literature.

Efficient algorithms for computing  were known for elementary classes like trees, cycles, grids [1] and some simple generalized tree structures [12]. Recently, a quadratic time algorithm for chordal graphs was obtained [13]. All the graph classes for which polynomial time algorithms for eternal vertex cover have been obtained so far satisfy 
, where 
 is the minimum cardinality of a vertex cover of G that contains all cut vertices of G. In other words, 
 is a close lower bound for  for these classes.

A cactus is a connected graph in which any two simple cycles have at most one vertex in common. The class of cactus graphs includes trees and cycles, but also contains graphs for which 
. In Section 6, we show an infinite family of cactus graphs for which 
. This shows that known lower bound techniques fail even on simple graph classes like cactus graphs.

We formulate a new lower bounding technique based on the substructure property (Definition 5) using which efficient algorithms are obtained for the EVC problem in some graph classes violating the condition 
. This is achieved by generalizing a recursive procedure for trees by Klostermeyer and Mynhardt [1], to larger graph classes that satisfy the substructure property. The generalization yields a new quadratic time algorithm for computing eternal vertex cover number for a graph class that includes all chordal graphs and cactus graphs. We also obtain an explicit formula for the eternal vertex cover number of cactus graphs and show that eternal vertex cover number of cactus graphs can be computed in linear time.

2. Some basic observations
In this section, we define substructure property and derive a recursive formula for eternal vertex cover number of graphs that satisfy this property. For introducing substructure property, we need some basic definitions and observations.

Definition 1

Let G be a graph and . The minimum cardinality of a vertex cover of G that contains all vertices of S is denoted by 
. The minimum integer k such that there is a defense strategy on G using k guards with all vertices of S being occupied in each configuration is denoted by 
.

When , we use 
 and 
 respectively instead of 
 and 
. From the above definition, it is clear that 
.
Definition 2

Now, we will explore the bounds possible for 
 in terms of . The following result is an easy observation which holds for both the versions of the problem.

Observation 1

.

Proof

Suppose . Let v be the vertex in 
. There is a defense strategy on 
 using  guards, by using k guards to move exactly the same way as they would have been moved for defending attacks on G and an additional 
 guard to protect against attacks on the edge xv. If the edge xv is attacked when x is not occupied, then the additional guard will move from v to x. In the very next round, this guard moves back to v, irrespective of the edge attacked. It is easy to check that using this strategy, any attack on 
 can be defended. â–¡

Now, let us consider lower bounding 
 in terms of .
In the variant of the problem which allows multiple guards on a single vertex in a configuration, it is not difficult to show that 
, as explained below. Let y be the new vertex of 
, not present in G. Consider an eternal vertex cover class  of 
. Two types of configurations are possible in : one with y occupied and the other with y unoccupied. For each configuration  of , a corresponding configuration 
 of G can be defined: the configuration 
 is the same as  with the only difference that the number of guards on x in 
 is equal to the total number of guards on x and y in . Let 
. It can be easily verified that all transitions between the configurations in  can be simulated by transition between the corresponding configurations in 
. Therefore, 
 is an eternal vertex cover class for G of size at most 
 and hence 
.

Now, let us look at the variant of the problem which allows only a single guard on a vertex in a configuration. In this variant, it remains unknown if 
. The previous strategy of defining a corresponding configuration will not work for configurations with both x and y occupied; because the model does not allow multiple guards on x. Further, other than simulating the transitions between configurations in an eternal vertex cover class  of 
 with corresponding transitions in G, there is no other obvious proof strategy. Since 
 has an additional vertex y, it gives the flexibility to place one guard each on x and y simultaneously when required, in which case the position y may be considered as a buffer. If it happens that 
, then it intuitively suggests that the buffer on y helps to reduce the number of guards required to defend future attacks on edges of G.

So far we have not come across any graph G with 
 even in the restricted model. Hence, we have the following conjecture.

Conjecture 1

For any graph G, 
 in the variant of the problem where at most one guard is allowed on a vertex in each configuration.

A subgraph H of a graph G is called an induced subgraph of G if  contains all edges  with .

Definition 3

Let G be a graph and  be an eternal vertex cover configuration of G. For an induced subgraph H of G, 
 denotes the total number of guards on  in configuration C.

Let us consider some graphs G for which Conjecture 1 is true and we examine some observations about the number of guards on  in the eternal vertex cover configurations of 
. Later, we will generalize these observations while defining the substructure property (Definition 5). The examples considered are representatives of two classes: those with 
 and those with 
.
Consider an odd cycle G on vertices 
 and a vertex 
. We will show that 
. Let 
 and 
 (see Fig. 2 for an example). Now, it is easy to see that 
 form an eternal vertex cover class of G of size . Therefore, 
. Consider an eternal vertex cover class  of 
 with y being the new vertex of 
 not present in G. Since there exists a configuration  with y occupied, 
. Moreover, since G should have at least  guards on it in every configuration , 
. Now, let us also examine the value of 
 in any arbitrary configuration  of 
. Consider the odd length path P obtained by deleting x from G. Since , we must have 
.

Fig. 2
Download : Download high-res image (53KB)
Download : Download full-size image
Fig. 2. Cycle on seven vertices and the two configurations of its eternal vertex cover class in which v1 is always occupied. Each shaded square near a vertex depicts a guard on the corresponding vertex. The set of vertices with a shaded square near it forms the configuration.

Consider an even cycle G on vertices 
 and a vertex 
. We will show that 
. The configurations 
 and 
 are the only two minimum vertex covers of G. It is easy to see that 
} form the only eternal vertex cover class of G of size k (see Fig. 3(a) and 3(b) for an example). Therefore, . It is also easy to see that 
. Let 
, if 
 and 
, if 
. Let 
, if 
 and 
, if 
 (see Fig. 3(c) and 3(d) for an example). It can be seen that 
 is an eternal vertex cover class of 
 of size . This implies 
. Consider an eternal vertex cover class  of 
. Since G should have at least  guards on it in every configuration , 
. Now, let us also examine the value of 
 in any arbitrary configuration  of 
. Consider the even length path P obtained by deleting x from G. Since , 
.

Fig. 3
Download : Download high-res image (141KB)
Download : Download full-size image
Fig. 3. Each shaded square near a vertex depicts a guard on the corresponding vertex. The set of vertices with a shaded square near it forms the configuration. Figures (a) and (b) show the two configurations forming an eternal vertex cover class of a cycle G on six vertices. Figures (c) and (d) show the two configurations forming an eternal vertex cover class of 
.

Now, consider a tree T with X being the set of internal vertices of T. Klostermeyer and Mynhardt [1] defined a minimum eternal vertex cover class  of T as follows. For each leaf vertex v of T, let 
 and 
. By this construction, 
. From this result, it follows that for any vertex x of T, 
. It can also be shown that for every eternal vertex cover configuration  of an eternal vertex cover class  of 
, 
 and 
 (this was shown by Fomin et al. [2] in an unpublished manuscript and the proof is not difficult to obtain).

Now, we are ready to generalize the above observations about 
 to a larger class of supergraphs of G.

Definition 4

x-components and x-extensions [13]
Let x be a cut vertex in a connected graph G and H be a connected component of . Let 
 be the induced subgraph of G on the vertex set . Then, 
 is called an x-component of G and G is called an x-extension of 
.

Fig. 4(a) shows a graph G whose x-components namely, 
, 
 and 
 are shown in Fig. 4(b). It is clear that G is an x-extension of each of its x-components. Further, notice that G is an x-component of 
 and 
 is an x-extension of G.
Fig. 4
Download : Download high-res image (61KB)
Download : Download full-size image
Fig. 4. (a) A graph G with xâ€¯âˆˆâ€¯V(G). (b) Graphs G1, G2 and G3 are x-components of G. Graph G is an x-extension of G1, G2 and G3.

Now, we are ready to define the substructure property. Later, we will show that all cactus graphs satisfy this property.

Definition 5 Substructure property

Let x be an arbitrary non-cut vertex of a graph G. The graph G is said to satisfy the substructure property, if one of the following conditions holds for each arbitrary x-extension 
 of G.

â€¢ 
 and every eternal vertex cover 
 of 
 has 
 and 

â€¢ 
 and every eternal vertex cover 
 of 
 has 
 and 
.

In Section 6, we show a family of graphs which do not satisfy the substructure property in the variant of the problem where multiple guards are allowed on a vertex in a configuration. The following observation shows that if a graph satisfies the substructure property, then Conjecture 1 will hold true for the graph. Therefore, proving that substructure property holds for all graphs in the variant of the problem where at most one guard is allowed on a vertex in a configuration, is as hard as proving Conjecture 1.

Observation 2

If a graph G satisfies substructure property and x is a non-cut vertex of G, then 
.

Proof

Suppose G satisfies substructure property and x is a non-cut vertex of G. Let v be the vertex in 
. In any evc class of 
, there must be a configuration  in which there is a guard on v. By substructure property, 
. Hence, 
. Consequently, 
. Further, by Observation 1, it follows that 
. â–¡

The following definition categories graphs that satisfy substructure property into Type 1 and Type 2. It may be noted that though the definition is applicable even to graphs which do not satisfy the substructure property, we concentrate later only on graphs which satisfy this property.
Definition 6

Let G be a graph and x be a vertex of G. Then, G is Type 1 with respect to x if 
 and G is Type 2 with respect to x if 
.

By the discussion earlier, it can be seen that a tree is Type 1 with respect to all its vertices. Similarly, an even cycle is Type 1 with respect to all its vertices and an odd cycle is Type 2 with respect to all its vertices.
Remark 1

By Observation 2, if G satisfies substructure property and x is a non-cut vertex of G, then G is either Type 1 or Type 2 with respect to x.

The following two definitions are introduced for notational convenience in later proofs of the paper.
Definition 7

Let x be a cut vertex of a connected graph G. The set of x-components of G will be denoted as 
. For , we define 
 to be the set of all x-components of G that are Type i with respect to x.

Definition 8

For a cut vertex x of connected graph G, we define 
 
 

For any graph G and a cut vertex , the following lemma gives a recursive formula for computing  and 
.
Lemma 1

Let G be a connected graph and x be a cut-vertex of G such that each x-component of G satisfies the substructure property. If all x-components of G are Type 2 with respect to x, then 
. Otherwise, 
. (See Fig. 5.)

Fig. 5
Download : Download high-res image (123KB)
Download : Download full-size image
Fig. 5. An illustration of Lemma 1. An x-component of G which is Type 1 with respect to x is represented by a shaded structure. In (a), since all x-components of G are Type 2 with respect to x, evc(G)=evcx(G)=Ï‡(G,x). In (b), since an x-component of G is Type 1 with respect to x, evc(G)=evcx(G)=1â€¯+â€¯Ï‡(G,x).

Proof

If all x-components of G are Type 2 with respect to x, then it is easy to see the result from the definition of the substructure property.

Now, suppose some x-components of G are Type 1 with respect to x. By a direct application of the substructure property, it follows that  cannot be less than . Now, for contradiction, suppose . Let  be a minimum evc class G and  be a configuration in . Since 
 and each x-component 
 satisfies the substructure property, it can only be the case that, 
 if 
 is Type 1 with respect to x and 
 if 
 is Type 2 with respect to x. Further, x must also be occupied in .

Suppose H is an x-component of G which is Type 1 with respect to x. From the discussion in the previous paragraph, we know that in every configuration  of , x is occupied. Therefore, to defend repeated attacks on edges of H in some configuration 
 of , 
 must be 
. This contradicts the observation made in the previous paragraph that since 
, we must have 
. Hence, .

It is not difficult to show that 
. In every configuration , we will maintain the following invariants.

â€¢
A guard will be kept on x.

â€¢
For each x-component 
, 
 and the guards on 
 form an eternal vertex cover of 
.

â€¢
In one of the x-components 
 (if exists), 
 and in every other x-component 
, 
. This will be done in such a way that the induced configuration on 
, for each x-component 
 forms an induced configuration of an eternal vertex cover of 
.

To defend an attack on an edge in an x-component 
 maintaining the invariants, it will be enough to move guards only on 
. To defend an attack on an edge in an x-component 
, it will be enough to move guards in at most two x-components. If the edge attacked is in an x-component 
 with 
, then there is another x-component 
 with 
. Since 
 and 
 satisfy substructure property, it is not difficult to rearrange guards in 
 and 
 to a configuration 
 such that 
 and 
 and the invariants are maintained. â–¡
3. Computation of the type with respect to different vertices
Lemma 1 indicates the possibility of a recursive method to compute eternal vertex cover number of graphs whose x-components satisfy the substructure property. However, this makes it necessary to also compute 
 and the type of each x-component of G, with respect to x. Since a cut vertex of G is not a cut-vertex in its x-components, a general method to find the type of a graph with respect to any arbitrary vertex of the graph (including non-cut vertices) is necessary. This section addresses this issue systematically.

The following lemma is useful for deciding the type of a graph with respect to a cut vertex of the graph.

Lemma 2 Type with respect to a cut vertex

Let G be a connected graph and x be a cut-vertex of G such that each x-component of G satisfies the substructure property. Then, G is Type 1 with respect to x if at least one of the x-components of G is Type 1 with respect to x. Otherwise, G is Type 2 with respect to x. (See Fig. 6.)

Fig. 6
Download : Download high-res image (123KB)
Download : Download full-size image
Fig. 6. An x-component of G which is Type 1 with respect to x is represented by a shaded structure. In (a), since the x-component H2 of G is Type 1 with respect to x, G is Type 1 with respect to x. In (b), since all x-components of G are Type 2 with respect to x, G is Type 2 with respect to x.

Proof

By Remark 1, each x-component of G is either Type 1 or Type 2 with respect to x. Note that when a pendent edge xv is added to x, that edge is a Type 1 component with respect to x. Further, 
 of this x-component is 2. Using these facts in the expressions given in Lemma 1 immediately yields the observation. â–¡

Observation 3

Let G be a graph that satisfies substructure property and x be any vertex of G. If 
, then G is Type 1 with respect to x.

Proof

If 
, then by Observation 1, we have 
. By Remark 1 and Lemma 2, G is either Type 1 or Type 2 with respect to x. Therefore, by Definition 6, 
. Hence, 
. From this, the observation follows. â–¡

The following lemma is useful for deciding the type of a graph with respect to a pendent vertex.
Lemma 3 Type with respect to a pendent vertex

Let G be a graph and . Let 
 with v being the vertex in . Suppose each x-component of H satisfies substructure property. Then, H is Type 1 with respect to v if and only if G is Type 1 with respect to x. (See Fig. 7.)

Fig. 7
Download : Download high-res image (95KB)
Download : Download full-size image
Fig. 7. In (a), since H is Type 1 with respect to y, G is Type 1 with respect to x. In (b), since H is Type 2 with respect to y, G is Type 2 with respect to x.

Proof

In any evc class of H with 
 guards in which v is occupied in every configuration,1 x must also be occupied in every configuration (otherwise, an attack on the edge vx cannot be defended maintaining a guard on v). Hence, the induced configurations on G define an evc class of G in which x is occupied in every configuration. It follows that 
. Moreover, from an evc class of G with x always occupied, we can get an evc class of H with v always occupied by placing an additional guard at v. Hence, 
. Thus, 
. Note that, by Observation 1, 
.

First, suppose G is Type 1 with respect to x. Then, 
 and we get 
, which means that H is Type 1 with respect to v.

Now, suppose G is Type 2 with respect to x. Then, 
. Further, by Lemma 2, if x is a cut vertex in G, then all the x-components of G are Type 2 with respect to x. Irrespective of whether x is a cut-vertex of G or not, by Lemma 1, 
. Hence, 
. Thus, if G is Type 2 with respect to x, then H is Type 2 with respect to v. â–¡

Lemma 2 and Lemma 3 specify the rules to decide the type of a graph with respect to a cut vertex and a pendent vertex. Now, we proceed with formulating similar rules for deciding the type with respect to other vertices of the graph. A block of a graph G is a maximal connected subgraph B of G such that B is a graph without cut vertices. We start by extending Definition 7 given in the context of cut vertices to that of blocks and paths.

Definition 9

[13] Let X be the set of cut vertices of a graph G. If B is a block of G, the set of B-components of G is defined as

.

If P is a path in G, then the set of P-components of G is defined as

 with P}.

Definition 10

For a block B (respectively, a path P) of connected graph G, the type of a B-component (respectively, P-component) is its type with respect to the common vertex it has with B (respectively, P). For , we define 
 (respectively, 
) to be the set of all B-components (respectively, P-components) of G that are Type i.

If B is a block (respectively, P is a path) of a connected graph G, such that all B-components (respectively, P-components) of G satisfy substructure property, then we can easily obtain a lower bound on the total number of guards on the union of B-components (respectively, P-components) of G in any eternal vertex cover configuration of G or its extensions. The notation introduced below is to abstract this lower bound.
Definition 11

For a block B of connected graph G, we define 
 
 
 
 

Similarly, for a path P of connected graph G, we define 
 
 
 
 

With the above notation, now we can easily specify a lower bound on the number of guards in the union of B-components (respectively, P-components) of G in each eternal vertex cover configuration of G.
Observation 4

If B is a block (respectively, P is a path) of a connected graph G, such that all B-components (respectively, P-components) of G satisfy substructure property, then in any eternal vertex cover  of G or its extensions, 
 
 (respectively, 
 
.

3.1. Type with respect to a degree-2 vertex
Now, we will turn our attention to the computation of type of a graph with respect to a degree-2 vertex which is in some simple cycle that forms a block in G. Notice that, for cactus graphs, all vertices except pendent vertices and cut vertices fall in this category.

Consider a graph G with a block B which is a cycle. We will first decompose the cycle B into two types of paths namely, eventful paths (Definition 12) and uneventful paths (Definition 13). This decomposition will be done in such a way that every vertex of B is either in an eventful path or in an uneventful path, but not both.

Definition 12 Eventful path

Let G be a connected graph and X be the set of cut vertices of G. A path P in a graph G is an eventful path if (i) P is either an induced path in G or a path obtained by removing an edge from an induced cycle in G (ii) the endpoints of P are in X and (iii) any subpath 
 of P with both endpoints in X has 
 even. (See Fig. 8.)

Fig. 8
Download : Download high-res image (137KB)
Download : Download full-size image
Fig. 8. A graph G with a block B which is a cycle. Any maximal induced path on black vertices shows an eventful path while that on gray vertices shows an uneventful path. For example, the path Q1 between the cut vertices x1 and x3 is an eventful path and the path P1 between the non-cut vertices y1 and y2 is an uneventful path.

Definition 13 Uneventful path

Let G be a connected graph and let X be the set of cut vertices of G. An induced path P in G is a uneventful path in G if (i)  (ii)  is odd and (iii) The vertices outside  which are neighbors of endpoints of P are all in X. (See Fig. 8.)

Definition 14 Vertex bunch of a path

Let P be a path in a connected graph G. The vertex set 
 is the vertex bunch of P in G, denoted by 
.

In Fig. 8, the vertex bunch of 
 consists of the vertices of the path 
 along with vertices of 
, 
 and 
. Similarly, the vertex bunch of 
 consists of the vertices of the path 
 along with vertices of 
, 
 and 
.
To simplify the notation, the number of guards on 
 in a configuration  will be denoted as 
. The following lemma gives a lower bound on the number of guards on the vertex bunch of an eventful path P in any eternal vertex cover configuration of G when each P-component satisfies the substructure property.

Lemma 4

Let G be a connected graph and let P be an eventful path in G. Let X be the set of cut vertices of G. If each P-component in 
 satisfies the substructure property, then in any eternal vertex cover configuration  of G, 
 
. Moreover, if 
 and 
 is exactly equal to the above expression, then at least one of the neighbors of the endpoints of P outside 
 has a guard on it.

Proof

Consider any subpath 
 of P such that both endpoints of 
 are in X and none of its intermediate vertices are from X. Let  be an eternal vertex cover configuration of G. Since P is eventful, 
 is even and in any vertex cover of G, at least 
 
 internal vertices of 
 must be present. Using this along with Observation 4 proves the first part of the lemma.

Now, suppose 
 and 
 is exactly equal to the expression given in the lemma. Now, for contradiction, let us assume that none of the neighbors of the endpoints of P outside 
 has a guard in . Consider an attack on an edge xv, where x is an endpoint of P and v is a neighbor of x outside 
. To defend this attack, a guard must move from x to v. Note that, in the resultant configuration 
, no guards can move to 
 from outside 
. Hence, while defending the attack, 
 decreases at least by one. But, then the new configuration will violate the first part of the lemma. Hence, it must be the case that at least one of the neighbors of the endpoints of P outside 
 has a guard in . â–¡

The next lemma is applicable to any connected graph G that contains a block B which is a cycle such that all B-components satisfy the substructure property. Since each block of a cactus is either a cycle or an edge, this lemma will be useful for computing the eternal vertex cover number of cactus graphs. The proof of the lemma makes use of the fact that B can be partitioned into a collection of edge disjoint paths which are either eventful paths or uneventful paths.

Lemma 5

Let B be a cycle forming a block of a connected graph G and let X be the set of cut vertices of G. Suppose each B-component 
 of G that belongs to 
 satisfies the substructure property. If 
, then 
 
. Otherwise, 
 
.

Proof

First, note that if , then the lemma holds trivially. So, let us assume that . If  has a single vertex x, then we can apply Lemma 1 to compute . In this computation, note that B is Type 1 with respect to x if B is an even cycle and B is Type 2 with respect to x, otherwise. By comparing the expressions of  given by Lemma 1 and Lemma 5, we can see that they are equal. Therefore, we may restrict our attention to the case when .

Let  and . For each B-component 
 of G that belongs to 
, let 
 be the vertex that 
 has in common with B. For each 
, let 
 denote the eternal vertex cover class of 
 of size 
 with 
 always occupied. For each 
, let 
 denote the eternal vertex cover class of 
 of size 
 with 
 always occupied. Let 
 be an evc class of B of size 
 with vertices of  always occupied. Let  be a minimum eternal vertex cover of G. Note that the condition stated in Lemma 4 has to simultaneously hold for all subpaths of the cycle that are eventful in G. Let  be the number of uneventful paths in B. Note that, from Definition 12, it follows that l is odd if and only if  is odd. Let 
 be the uneventful paths in B listed in the cyclic order along B. To protect the edges within each 
, 
 is at least 
 
. If 
 
, the end vertices of 
 are not occupied and alternate vertices in 
 are occupied by guards.

Case 1: 

â€¢
Suppose . Let P be the subpath obtained from B by deleting the edges of 
. It is easy to see that P is an eventful path. If 
 is exactly equal to the lower bound given by the first part of Lemma 4 and if 
 
, then the end vertices of 
 are not occupied by guards and the condition stated in Lemma 4 cannot hold for P. Therefore, 
 
 
.

â€¢
Suppose . If , then since the condition stated in Lemma 4 has to simultaneously hold for all subpaths of B that are eventful in G, a simple counting argument shows that 
 
. Now take . Then, if 
 
 and 
 
 (+ is mod l) and the vertex bunch of the path P between the last vertex of 
 and the first vertex of 
 contains exactly as many guards as mentioned in the first part of Lemma 4, the condition stated in the second part of Lemma 4 cannot hold for P. Since this is true for all , and the condition stated in Lemma 4 has to simultaneously hold for all subpaths of the cycle that are eventful in G, a simple counting argument shows that 
 
.

Thus, we know that  is at least the expression given above. If 
, it is easy to show that these many guards are also sufficient. The guards on  can be maintained in a configuration of 
, while defending attacks on the edges of B. Attacks on edges of B-component 
 can be handled by maintaining in configuration of 
.
Case 2: 
 and  is even

Using similar arguments as in Case 1, we can show that 
 
. Suppose 
 
. Then, it is not difficult to see that in order to satisfy the condition stated in Lemma 4 for all eventful subpaths of the cycle B, the configuration of guards should be such that

â€¢
All cut vertices in B have guards.

â€¢
while going around the cycle B (discarding the cut vertices), non-cut vertices are alternately guarded and unguarded.

â€¢
For each 
, 
.

â€¢
For each 
, 
.

Now, consider a Type 1 B-component 
. By the conditions listed above, 
 must be occupied in every configuration. Hence, there is a sequence of attacks on 
 that would eventually lead to a configuration 
 with 
 to defend the attack. However, one of the conditions listed above will not be satisfied in 
. This contradicts our assumption on the value of 
.
If 
 
, we argue below that it is possible to defend attacks using 
 guards. For this, we can maintain the following invariants in every configuration:

â€¢
All cut vertices in B have guards

â€¢
while going around the cycle B (discarding the cut vertices), non-cut vertices are alternately guarded and unguarded

â€¢
For one B-component 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
 with the vertex of 
 outside 
 unoccupied.

â€¢
For all other 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
 with one guard on the vertex of 
 outside 
.

â€¢
For each 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
.

When there is an attack on an edge of a B-component 
 with 
, we need to reconfigure guards in such a way that in the resultant configuration 
, the B-component 
 with 
 will have 
 and 
. Since 
 and 
 are Type 1, this is always possible by an appropriate shifting of guards through the cycle B. In this way, the invariants stated above can be maintained consistently. Hence,  is as given in the statement of the lemma.
Case 3: 
 and  is odd.

In this case, note that 
 
 
. As noted earlier, l is odd and . Using similar arguments as in Case 1, we can show that 
 
. With these many guards, it is possible to protect G keeping the following invariants in all configurations.

â€¢
All cut vertices in B have guards

â€¢
For at most one 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
 with one guard on the vertex of 
 outside 
.

â€¢
For all other 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
 with one guard on the vertex of 
 outside 
.

â€¢
If there is a B-component 
 with 
, then let 
 and 
 respectively be the clockwise and anticlockwise nearest non-cut vertices to 
 on B. Both 
 and 
 are unoccupied and in the paths between 
 and 
 in B, non-cut vertices are alternately occupied. If there is no B-component 
 with 
, then guards on  are maintained in a configuration of 
.

â€¢
For each 
, 
. This will be done in such a way that the induced configuration on 
 forms an induced configuration of 
.

Hence, in this case also, the lemma holds. â–¡
The following observation is useful for deciding the type of a graph with respect to a degree-2 vertex.

Lemma 6

Let G be any graph and suppose v is a degree-2 vertex in G such that its neighbors 
, 
 are not adjacent. Let 
 be the graph obtained by deleting v and adding an edge between 
 and 
. Then, 
.

Proof

We first give a proof for the version of the problem where at most one guard is allowed on a vertex.

Consider a minimum evc class 
 of 
. Note that, at least one among 
 and 
 is occupied in each configuration of 
. Let 
. It is easy to see that each  is a valid vertex cover of G. If 
, 
 are configurations in 
 obtainable from each other by a single step of valid movement of guards, it is also easy to verify that the corresponding configurations 
 and 
 of G are obtainable from each other by a single step of valid movement of guards. From this, it follows easily that  is an evc class of G with v always occupied. Hence, 
.

The correspondence between configurations of 
 and G works in the reverse direction as well. Let  be an evc class of G in which v is permanently occupied. Let 
. Any configuration  must contain at least one of 
 and 
. Therefore, the corresponding configuration 
 is a vertex cover of 
. Moreover, whenever the guards in G move from a configuration 
 to 
 in  via a reconfiguration of guards which involves moving the guard from v to 
 and 
 to v, we can simulate the behavior in 
 by assuming that the guard on 
 is moving to 
 (similarly while moving from v to 
 and 
 to v). This corresponds to a valid movement of guards in 
 from configuration 
 to 
. From this, it follows easily that 
 is an evc class of 
. Thus, 
.

Now, let us consider the version of the problem where more than one guard is allowed on a vertex. It is easy to modify the first part of the proof and show that 
. In the second part of the proof, if S is a configuration in  such that for each  there are exactly 
 guards on x, then define the corresponding configuration 
 of 
 to have 
 guards on 
 and for each 
, 
 guards on x. This modification is sufficient to prove 
. â–¡

We will end this section with a lemma that gives a method to compute the type of a graph with respect to degree-two vertices in blocks which are cycles. The type of G with respect to such a vertex depends on the type of B-components and the parity of the number of non-cut vertices on B.

Lemma 7

Let B be a cycle of n vertices, forming a block of a connected graph G. Let X be the set of cut vertices of G and let . Suppose each B-component in 
 satisfies the substructure property. Let . The type of G with respect to v can be computed as follows (see Fig. 9).

â€¢
If 
 and  is even, then 
. If 
 and  is odd, then 
. In both cases, G is Type 1 with respect to v.

â€¢
If 
 and  is even, then 
 and G is Type 1 with respect to v. If 
 and  is odd, then 
 and G is Type 2 with respect to v.

Fig. 9
Download : Download high-res image (183KB)
Download : Download full-size image
Fig. 9. A graph G with a block B which is a cycle. The B-components of G are denoted by Hi with uiâ€¯âˆˆâ€¯V(B)âˆ©V(Hi). A B-component Hi of G which is Type 1 with respect to ui is represented by a shaded structure. In (a), since H3 is Type 1 with respect to u3, G is Type 1 with respect to x. In (b), since each Hi is Type 2 with respect to ui and |V(B)âˆ–X| is even, G is Type 1 with respect to x. In (c), since each Hi is Type 2 with respect to ui and |V(B)âˆ–X| is odd, G is Type 2 with respect to x.

Proof

This can be proved using Lemma 5 and Lemma 6. Let 
 be the graph obtained by deleting the two edges incident on v from G and adding an edge between its neighbors. Let 
 be the cycle obtained by deleting the two edges incident on v from B and adding an edge between its neighbors. We have 
 and 
. Further, if 
 is the set of cut vertices of 
, then 
.

â€¢
If 
, then using Lemma 5 for G and 
, we can see that when  is odd, 
 and when  is even, 
. Therefore, by Lemma 6, when  is odd, 
 and when  is even, 
. Further, using Lemma 5 for 
, we can see that when  is odd, 
 and when  is even, 
. Thus, in both cases, 
 and hence, G is Type 1 with respect to v.

â€¢
If 
, then using Lemma 5 for G and 
, we can see that when  is even, 
 and when  is odd, 
. Therefore, by Lemma 6, when  is even, 
 and when  is odd, 
. Further, using Lemma 5 for 
, we can see that when  is even, 
 and when  is odd, then 
. Therefore, when  is even, 
 and when  is odd, 
. Hence, when  is even, G is Type 1 with respect to v and when  is odd, G is Type 2 with respect to v. â–¡

4. Computing eternal vertex cover number of cactus graphs
In the first half of this section, we will derive a linear time algorithm to compute eternal vertex cover of cactus graphs. In the second half of this section, we derive an explicit formula for computing the eternal vertex cover number of a cactus graph.

First, we will show that all cactus graphs satisfy substructure property. To prove this, we use an induction on the number of cut vertices in the cactus. The base case is when G is a simple cycle, an edge or a vertex. In this case, it is easy to see that the property holds. The induction step uses Lemma 1 and lemmas for computing the type of G with respect to cut vertices, pendent vertices and degree-2 vertices, described in Section 3.

Theorem 1

Every cactus graph satisfies substructure property.

Proof

Let G be a cactus graph. The proof is using an induction on the number of cut-vertices in G.

In the base case, G is a cactus without a cut vertex. Then, G is either a single vertex, a single edge or a simple cycle. Consider any non-cut vertex  and a configuration . In all cases,  and 
. Now, it is easy to see that 
 and 
. If G is an odd cycle, 
 and in other cases, 
. Hence, the theorem holds in the base case.

Now, let us assume that the theorem holds for any cactus with at most k cut-vertices. Let G be a cactus with  cut vertices, for  and let X be the set of cut vertices of G. Let v be a non-cut vertex of G and 
 be an arbitrary v-extension of G. We need to show that in any eternal vertex cover configuration 
 of 
, 
 and 
 are as specified by the substructure property. Since v is a non-cut vertex of the cactus G, either it is a degree-one vertex of G or it is a degree-2 vertex of G that is in some block B of G, where B is a cycle. For any arbitrary eternal vertex cover configuration 
 of 
, we will compute a lower bound on 
 and 
.

First, consider the case where v is a degree-one vertex of G. Let w be the neighbor of v in G and let . Since G has at least one cut-vertex, w must be a cut vertex in G.

â€¢
When w is a cut-vertex of H: Consider any w-component 
 of H. 
 is a cactus and the number of its cut vertices is less than that of G. Hence, 
 satisfies the substructure property by induction hypothesis. Further, 
 is a w-extension of 
. If 
, 
 and 
 and if 
, 
 and 
. Therefore, 
.

If v is occupied in 
, then 
. However, by Lemma 1 applied to the cut vertex w, . Therefore, we get 
. If v is not occupied in 
, then to defend an attack on the edge wv, a guard from  must move to v. Hence, in 
, 
 should have been one more than the minimum mentioned earlier. Hence, in this case also, 
. In both the cases, 
.

By Lemma 1, 
. By Lemma 3, the type of G with respect to v is the same as the type of H with respect to w. Hence, if H is Type 1 with respect to w, we have 
. Since we have seen that 
 and 
, we get 
. Since 
 and 
, we get 
. If H is Type 2 with respect to w, then we have 
. Since 
 as noted earlier, in this case we must have 
. Since we have seen that 
 and 
, we get 
. Since 
 and 
, we get 
. Hence, the substructure property holds in both cases.

â€¢
When w is not a cut vertex of H: In this case, 
 is a w-extension of H. Since the number of cut vertices in H is less than that in G, by induction hypothesis, H satisfies substructure property. Therefore, in configuration 
, 
 if H is Type 1 with respect to w and 
 if H is Type 2 with respect to w. First consider the case when v is occupied in 
. Then, 
 if H is Type 1 with respect to w and 
 if H is Type 2 with respect to w. Now, if v is unoccupied in 
, then to defend an attack on the edge vw, a guard must move to v from w. Therefore, to satisfy substructure property in 
, 
 should have been one more than the lower bound mentioned above. Hence, in this case also, 
 if H is Type 1 with respect to w and 
 if H is Type 2 with respect to w.

By Lemma 1 applied at cut vertex w, when H is Type 1 with respect to w, 
 and when H is Type 2 with respect to w, 
. Also, by Lemma 1, we have 
. By Lemma 3, the type of G with respect to v is the same as the type of H with respect to w. Hence, if H is Type 1 with respect to w, we have 
. Then, by observations made in the above paragraph, 
 and 
. If H is Type 2 with respect to w, we have 
. Since 
, in this case we must have 
. Then, by observations made in the above paragraph, 
 and 
. Hence, the substructure property holds in both cases.

Now, consider the case when v is a degree-two vertex of G that is in some block B of G, where B is a cycle. Suppose 
 and 
. As noted earlier, for any arbitrary eternal vertex cover configuration 
 of 
, we have to compute a lower bound for 
 and 
. Let p and q respectively be the clockwise and anticlockwise nearest vertices to v in . Let P be the path in B between p and q that does not contain v. Note that, every B-component of G satisfies substructure property by our induction hypothesis and 
 is an extension for each of them. Hence, we have a lower bound on 
, for each 
. Similarly, in configuration 
, the condition stated in Lemma 4 needs to be satisfied for each eventful subpath 
 of B.
â€¢
If 
: By similar arguments as in the proof of Case 1 of Lemma 5, we can see that 
 
. By Lemma 7, when 
 is even, G is Type 1 with respect to v and 
. Therefore, 
. Similarly, when 
 is odd, G is Type 2 with respect to v and 
 and 
. In both cases, if 
, then by similar arguments, using Lemma 7, it is easy to see that the requirements for substructure property are satisfied. If 
 
, then it can be seen that the conditions stated in Lemma 4 cannot simultaneously hold for all eventful subpaths of B in G. Hence, this case cannot occur.

â€¢
If 
 and 
 is even: By similar arguments as in the proof of Case 2 of Lemma 5, we can see that 
 
. By Lemma 7, G is Type 1 with respect to v and 
. Therefore, 
. If 
, we are done. If 
 
, then as in the previous case, we get a contradiction. Similar to the previous case, we can show that 
.

â€¢
 and 
 is odd: By similar arguments as in the proof of Case 3 of Lemma 5, we can see that 
 
. By Lemma 7, G is Type 1 with respect to v and 
. Therefore, 
. Similar to the previous cases, we can show that 
.

Thus, in all cases, for an arbitrary eternal vertex cover configuration 
 of 
, the lower bound on 
 and 
 satisfies the condition stated in substructure property. Hence, G satisfies substructure property.
Thus, by induction, it follows that every cactus satisfies substructure property. â–¡

Now, we have all ingredients for designing a recursive algorithm for the computation of eternal vertex cover number of a cactus, using Lemma 1. Our algorithm will take a cactus G and a vertex v of G and output , 
 and the type of G with respect to v. If G is a cycle or an edge or a vertex, the answer is trivial and can be computed in linear time.
In other cases, G has at least one cut vertex. If v is a cut vertex, then we call the algorithm recursively on each v-component of G along with vertex v. Then, we can use Lemma 1 to compute  and 
 in constant time from the result of the recursive call. Using the same information from recursive calls, the type of G with respect to v can also be computed using Lemma 2. If v is a pendent vertex and w is its neighbor in G, then we recursively call the algorithm on . By Lemma 3, the type of G with respect to v is the same as the type of  with respect to w. Moreover, from the proof of Lemma 3, we have 
. Further, 
, when G is Type 1 with respect to v and 
, when G is Type 2 with respect to v. Thus, from the results of the recursive call on , the output can be computed in constant time. In the remaining case, v is a vertex that belongs to a cycle B in G. In this case, we recursively call the algorithm for each B-component of G, along with the respective cut vertices it shares with B. Using this information, we can compute  using Lemma 5 in time proportional to the number of B-components. We can also compute 
 and the type of G with respect to v, using Lemma 7 in time proportional to the number of B-components.

Thus, the algorithm works in all cases and runs in time linear in the size of G. Hence, we have the following result.

Theorem 2

Eternal vertex cover number of a cactus G can be computed in time linear in the size of G.

From the upper bound arguments in the proofs discussed in Section 2 and Section 3, we can see that with  guards determining configurations of guards to keep defending attacks on G are straightforward.

In the remaining part of this section, we will derive an explicit formula to compute eternal vertex cover number of cactus graphs. In order to prove this result, we have the following two observations about the computation of type of a cactus graph with respect to different vertices.

Observation 5

Let G be a cactus graph and . Let 
 be an arbitrary x-extension of G. If G is Type 1 with respect to x, then 
 is Type 1 with respect to any 
.

Proof

Note that by Theorem 1, G satisfies substructure property. Suppose G is Type 1 with respect to some . Let H be the induced subgraph of 
 on the vertex set 
. We prove this observation using an induction on the number of blocks of H.

If H has a single block, then there are two possibilities for H. If H is a single edge yx, then, by Lemma 3, it follows that 
 is Type 1 with respect to y. If H is a cycle, then, by Lemma 7, we can see that 
 is Type 1 with respect to any vertex in . Assume that the observation holds if H has k blocks. Suppose H has exactly  blocks with . Consider any vertex . Let B be a block of H that contains u. We know that there is some B-component F of 
 such that . Let . By induction hypothesis, we can assume that F is Type 1 with respect to y. Now, using Lemma 3 or Lemma 7, as in the base case, we can complete the inductive argument and show that 
 is Type 1 with respect to u. â–¡

Observation 6

Let G be a cactus graph, x be a cut vertex of G and H be an x-component of G. If G has neither a cycle with odd number of non-cut vertices nor a pendent vertex, then H is Type 2 with respect to x.

Proof

Note that by Theorem 1, G satisfies substructure property. Consider G, x and H as defined in the observation. Suppose G has neither a cycle with odd number of non-cut vertices nor a pendent vertex. We use induction on the number of blocks of H to prove the observation.

If H has a single block, then H is an odd cycle which is obviously Type 2 with respect to any of its vertices. Assume that the observation holds if H has at most k blocks. If H has exactly k blocks with , consider the block B of H containing x. By induction hypothesis, we know that each B-component of H is Type 2 with respect to the vertex by which it is attached to B. If B is an edge, then by Lemma 3, we know that H is Type 2 with respect to x. If B is a cycle, from our assumption, we know that B has an even number of non-cut vertices in G. Since x is not a cut vertex in H, the cycle B has an odd number of non-cut vertices in H. Therefore, by Lemma 7, it follows that H is Type 2 with respect to x. â–¡

For any cactus graph G,  denotes the set of all cycles in G. The following theorem gives an explicit formula to compute the eternal vertex cover number of a cactus graph.

Theorem 3

Let G be a cactus graph with X being the set of all cut vertices of G. If G has a pendent vertex or a block B with  odd, then 
 
. Otherwise, 
 
.

Proof

We use proof by induction on  to prove the above theorem. In the base case, G is a cactus without any cycles. Then, G is a tree. In this case, we know that 
. Hence, the theorem holds in the base case.

Now, let us assume that the theorem holds for any cactus with . Let G be a cactus with , for . Let X be the set of cut vertices of G and B be a block forming a cycle in G. If G has a cycle with odd number of non-cut vertices, choose B to be one such cycle.

To simplify the expressions that appear in the proof, for each 
 and 
, let us denote 
 as 
. Let 
.

By induction hypothesis, we know that for each 
,(1)
 
 

By Definition 6 and Observation 1, for each 
 and 
, we know that if 
 is Type 1 with respect to 
, then 
 and if 
 is Type 2 with respect to 
 then 
. Therefore, the expression for  given in Definition 11 can be rewritten as follows. 
 
 From Equation (1), we get 
 
  
 
 
 Since  
 
, the above equation can be rewritten as follows.(2) 
 
 
 
 
 

The rest of the proof is divided into the following three cases.

Case 1: B is a cycle with odd number of non-cut vertices in G.

Since  is odd, 
 
 
 
. Therefore, by Lemma 5, we have
 
 Substituting for  from Equation (2), we get
 
 
 
 
 
 Hence, the theorem holds in this case.

Case 2: B is a cycle in G with even number of non-cut vertices; but there exists a pendent vertex y in G.

Recall that, by our choice of B, in this case, G has no cycle with an odd number of non-cut vertices. Let z be the cut vertex in G which is a neighbor of y. Note that the edge yz is Type 1 with respect to z. Hence, by Observation 5, we know that the B-component containing y is Type 1 with respect to the vertex by which it is attached to B. Since,  is even, 
 
 
. Therefore, by Lemma 5,
 
 Similar to the previous case, by substituting for  from Equation (2), we can show that 
 
 

Hence, the theorem holds in this case as well.

Case 3: B is a cycle in G with an even number of non-cut vertices and G has no pendent vertex.

As in Case 2, G has no cycle with an odd number of non-cut vertices. By Observation 6, each B-component 
 is Type 2 with respect to the vertex 
. Therefore, by Lemma 5, we know
 
 Similar to the previous case, by substituting for  from Equation (2), we can show that 
 
 

Hence, the theorem holds in this case as well. â–¡

A defense strategy on a cactus graph G with  guards that keeps the cut vertices occupied in all configurations can be derived easily. We describe the strategy in terms of the invariants maintained in each configuration  in a minimum evc class of G.

â€¢
If G has no pendent vertices and no cycle with an odd number of non-cut vertices, then the invariant is the following: each cycle B in G has 
 
 along with one guard each on all the cut vertices of G in B. Non-cut vertices of B are occupied with guards alternately, if we go along the B ignoring the cut vertices in between.

â€¢
If G has either a pendent vertex or a cycle with an odd number of non-cut vertices, then the invariants are the following.

1.
All the cut vertices in G are occupied.

2.
Each cycle B in G with  even has 
 
. Non-cut vertices of B are occupied with guards alternately, if we go along the B ignoring the cut vertices in between.

3.
The placement of guards on other cycles and pendent vertices satisfies the following conditions.

â€“
Either one of the pendent vertices has a guard and each cycle B with  odd has 
 

â€“
Or, none of the pendent vertices has a guard, one cycle B with  odd has 
 
, and every other cycle B with  odd has 
 
.

â€“
For each cycle B with  odd, let 
 be the B-component of G which contains either a pendent vertex with guard or the cycle B with 
 
 where 
. Let 
 and 
 be the clockwise and anticlockwise nearest non-cut vertices of x in B. There will be no guards on 
 and 
. Moreover, on the path from 
 to 
 in B that does not pass through x, non-cut vertices are occupied with guards alternately, as we go along B ignoring the cut vertices in between.

To defend an attack on an edge incident to a pendent vertex, move to a configuration with a guard on that pendent vertex. Similarly, to defend an attack on an edge inside a cycle B with  odd, move guards in such a way that in the resultant configuration 
, 
 
.
5. Extension to a superclass of chordal graphs and cactus graphs
It may be noticed that most of the intermediate results stated in this paper are generic, though we have stated Lemma 5 and Lemma 7 in a way suitable for handling cactus graphs. In this section, we show how to extend the method used for cactus graphs to a graph class consisting of connected graphs in which each block is a cycle, an edge or a biconnected chordal graph. It may be noted that this class contains all chordal graphs and cactus graphs.

To generalize the proof of Theorem 1 for this class, the base case of the proof needs to be modified to handle biconnected chordal graphs as well. The following observation addresses this requirement.

Observation 7

Every biconnected chordal graph satisfies substructure property.

Proof

Let G be a biconnected chordal graph and . Let 
 be a v-extension of G and  be an eternal vertex cover configuration of a minimum evc class  of 
. If 
, then v is not occupied in . In this configuration, an attack on an edge of G adjacent to v cannot be defended, because when a guard on a vertex of G moves to v, some edge of G will be without guards. Therefore, in any arbitrary eternal vertex cover configuration  of 
, 
. Further, in every configuration irrespective of v is occupied or unoccupied, 
.

By a result in [14], 
 and 
. If 
 and 
, then G is Type 2 with respect to v and 
 and 
. If 
, then G is Type 1 with respect to v and 
 and 
. Hence, the requirements of substructure property are satisfied by G. â–¡

The following lemma is a suitable modification of Lemma 5 and Lemma 7 to handle the new class.
Lemma 8

Let B be a biconnected chordal graph forming a block of a connected graph G and let X be the set of cut vertices of G. Suppose each B-component 
 of G that belongs to 
 satisfies the substructure property. If 
, then 
 and 
 otherwise. Further, if  is known, then for any , the type of G with respect to v can be computed in time quadratic in the size of B.

Proof

First, we will derive lower bounds for . Since B is a biconnected chordal graph, if for every , 
, then 
 and 
 otherwise [14]. Consider any evc class  of G. By substructure property of B-components of G, it follows that in any configuration  of , 
. To cover edges of the induced subgraph of G on , the number of guards required is at least 
. Hence, 
. Further, if there is a vertex  for which 
, then in any configuration 
 of  in which v is occupied, 
. Hence, in all cases, 
. Let us consider two cases to arrive at a precise value of .

a.
When 
: In this case, it is easy to show that 
.

b.
When 
: In this case, by repeated attacks on edges of 
 for some 
, eventually a configuration 
 with 
 
 can be forced. Hence, 
. Since 
, it is not difficult to also show that 
.

In both cases, the value of  is as stated in the lemma.
For deciding the type of G with respect to a vertex , we need to compare 
 and 
. For computing 
, we can use the formula given by the first part of the lemma for the graph 
. Using similar arguments as in the proof of the first part of the lemma, we get the following: if 
, then 
 and 
 otherwise. By computing 
 and 
 for each , 
 and 
 can be computed. Since minimum vertex cover of a chordal graph can be computed in linear time, the total time required for computing 
 and 
 this way is quadratic in the size of B. From the values of 
 and 
, the type of G with respect to v can be inferred. â–¡

Now, similar arguments as in the proof of Theorem 1 and Theorem 2 yields:
Theorem 4

Suppose G is a connected graph in which each block is a cycle, an edge or a biconnected chordal graph. Then, G satisfies substructure property and the eternal vertex cover number of G can be computed in quadratic time.

Note that the above result applies to every chordal graph and cactus graph.
6. Discussion and open problems
Until now, all graph classes with known polynomial time algorithms for eternal vertex cover had 
, where X is the set of all cut vertices of G. It is interesting to note that cactus graphs do not satisfy this condition in general, though their eternal vertex cover number can be computed in polynomial time. An example of such a graph family 
 is shown in Fig. 10. Any graph 
 is a graph on  vertices. Using the formula given by Theorem 3, we can show that the eternal vertex cover number of this graph 
 is . However, 
 is only , thus giving 
. Note that this is true in both versions of the problem.

Fig. 10
Download : Download high-res image (34KB)
Download : Download full-size image
Fig. 10. The graph 
 on 4kâ€¯+â€¯1 vertices with 
 and evc(G)=2(kâ€¯+â€¯1).

We note here that in the version of the problem which allows more than one guard on a vertex, there are graphs for which we know that the substructure property does not hold. An example is described below.

Fig. 11 gives a graph G and its u-extension 
 which connects  copies of G using a common vertex u. It can be seen that in both the versions of the problem, 
 and 
. Therefore, G is Type 2 with respect to u. If G has to satisfy the substructure property, then in every eternal vertex cover configuration 
 of 
, 
. For the version of the problem which allows more than one guard on a vertex, 
 [2]. To show that 
, we can show a defense strategy [2] which initially places one guard each on vertices 
 for  and four guards on u. Let this configuration be . In , for defending attacks on an edge in a u-component H, it is possible to move to a configuration 
 with two guards on u and one guard each on the degree-two vertices of H. It is easy to see that the initial configuration  along with the configurations 
, for each u-component H defines an eternal vertex cover class of 
 of size . It can also be seen that in this evc class, there are many configurations 
 of 
 with 
 which contradicts the substructure property of G. At present, we are not aware of any graphs for which the substructure property does not hold, in the version of the problem that does not allow multiple guards on a vertex.

Fig. 11
Download : Download high-res image (34KB)
Download : Download full-size image
Fig. 11. A graph G and its u-extension Gâ€² such that G does not satisfy the substructure property in the version of the problem which allows multiple guards on a vertex.

Proving Conjecture 1 is an interesting open problem in this context. As mentioned earlier, substructure property will imply Conjecture 1 in the version of the problem that does not allow multiple guards on a vertex. Though the substructure property has been shown here for a family of graphs that include cactus and chordal graphs, we believe that this property or a generalization of it holds for fairly large classes of graphs. It is interesting to characterize graphs that satisfy this property. Deriving a generalization of the substructure property to outerplanar graphs and bounded treewidth graphs is also an interesting direction.