Abstract
Weighted finite automata over the field of rational numbers and unary alphabets are considered. The notion of a characteristic polynomial is introduced for such automata as a means to provide a decidable necessary and sufficient condition, under which a unary weighted automaton admits a deterministic, i.e., sequential equivalent. The sequentiality problem for univariate rational series is thus proved to be decidable both over the rational numbers and over the integers, confirming a conjecture of S. Lombardy and J. Sakarovitch; its decidability over the nonnegative integers is observed as well. The decision algorithm proposed for these tasks is shown to run in polynomial time. A determinisation algorithm for determinisable unary weighted automata over the rational numbers is also described.

Keywords
Deterministic weighted automaton
Sequential weighted automaton
Reduced representation
Characteristic polynomial
Cyclotomic polynomial

1. Introduction
Formal power series in several noncommuting variables form a well-known generalisation of formal languages, allowing one to replace a qualitative property of membership of a word in a language by a quantity taken from a suitable domain such as a semiring. This corresponds on an effective level to a transition from the usual descriptive mechanisms for formal languages – such as automata, grammars, rational expressions, or MSO logics – to their weighted counterparts. Specifically, nondeterministic finite automata recognising rational languages are generalised to weighted finite automata, which realise rational formal power series. The reader is referred to [8], [18], [19], [41] for a general overview of the related theory.

One of the aspects involved in this generalisation is that the classical equivalence of nondeterministic and deterministic finite automata does not lift to the quantitative setting – there are weighted automata admitting no deterministic equivalents [34], [37]. Deterministic weighted automata – also called sequential [34] or subsequential [36] by some authors2 – thus not only form a proper subclass of weighted automata, but the corresponding class of series, called sequential in this article, also forms a proper subclass of the class of rational series. As determinism is often a crucial requirement in practice, the problems of algorithmically deciding determinisability of a weighted automaton, and of actually finding a deterministic equivalent when possible, have both received significant attention in literature – they have been studied, in different forms and often under some additional restrictions, over various classes of semirings [1], [31], [32], [34], [36], [37] (where especially the tropical semirings are of special importance), as well as over strong bimonoids [15], including research pertaining to the theory of weighted tree automata [16], [23].

An interesting and relatively well-understood class of weighted automata is obtained by restricting the weights to be taken from a field, or more generally a division ring. This is in fact the historically first setting in which weighted automata were considered, going back to M.-P. Schützenberger [43]. The theory of weighted automata and rational series over fields is characteristic by its use of linear algebra, which becomes a powerful tool – see [8], [41], [42]. In particular, methods of linear algebra underlie a polynomial-time minimisation algorithm for weighted automata over fields due to A. Cardon and M. Crochemore [12]; see also J. Sakarovitch [42] for an exposition. This minimisation algorithm can also be used, e.g., to decide equivalence of rational series over (effective) fields.

Nevertheless, relatively little is known about deterministic weighted automata and the sequentiality problem for rational series over fields and their subrings. S. Lombardy and J. Sakarovitch have asked about decidability of whether a rational series over the rational numbers or over the integers, given by a weighted automaton, is sequential [34, Problem 1]. In other words, their question was: Is it decidable whether a given weighted automaton over the rationals or over the integers admits a deterministic equivalent? They have conjectured a positive answer, “at least in the case of one letter alphabet” [34].

There has been little progress on this problem. It has been claimed by S. Lombardy and J. Sakarovitch [34] that decidability of the problem for those unary weighted automata over the rationals, whose minimal equivalent automaton consists of at most two states, follows by the results on Fibonacci polynomials obtained by G. Jacob, C. Reutenauer, and J. Sakarovitch [26]. In addition, J. Bell and D. Smertnig [7] have recently proved an interesting characterisation of determinisable weighted automata over fields in terms of what they call a linear hull of the minimal automaton; however, this characterisation is not effective.

We prove decidability of the determinisability problem for unary weighted automata over the rational numbers, the integers, as well as the nonnegative integers – or equivalently, of the sequentiality problem for univariate -rational, -rational, and -rational series. The former two results confirm the “at least” part of the conjecture of S. Lombardy and J. Sakarovitch [34]. In fact, we observe that the problem can be decided in polynomial time – more precisely, with 
 arithmetic operations over  performed, where n is the number of states of the input automaton. We also show that the determinisation of a unary weighted automaton, if possible, can be done algorithmically as well.

To arrive at these results, we first introduce the notion of a characteristic polynomial of a unary weighted automaton over the rationals, defined via the characteristic polynomial of the single matrix of its associated linear representation. We show that the minimisation algorithm of A. Cardon and M. Crochemore [12] always computes a reduced representation whose matrix equals the companion matrix of its characteristic polynomial, which we call the characteristic polynomial of the corresponding series. Next, we observe that, in line with similar results from the theory of linear recurrence synthesis [10, Section 7.2], the characteristic polynomial of an automaton is always divided by the characteristic polynomial of its realised series. We then use this property, along with a special form of characteristic polynomials of deterministic automata, to prove a sequentiality criterion for univariate rational series expressed in terms of their characteristic polynomials. An elementary theory of linear difference equations is crucial for obtaining these results.

We finally take a look at the algorithmic side and show that the aforementioned sequentiality criterion is decidable. The decision procedure relies heavily on the theory of cyclotomic polynomials and employs several known algorithms of computer algebra as subroutines.

When it comes to the determinisation algorithm, which is easily implied by the algorithm deciding determinisability, we show that the size of the deterministic automaton it produces is “almost optimal” at least for some specific input automata. The algorithm thus establishes an “almost tight” upper bound for the state complexity of determinisation of unary weighted automata over the rationals.

2. Preliminaries
We denote by , , , , and , respectively, the sets of nonnegative integers, integers, rational numbers, real numbers, and complex numbers. Given , we write .

Fields are understood to be commutative, although the theory of weighted automata minimisation, reviewed below, generalises to the noncommutative setting of division rings. Alphabets are assumed to be finite and nonempty. The empty word over any alphabet Σ is denoted by ε. For S a set and , we denote by 
 the set of all  matrices over S. The ring of all polynomials in a single variable z, with coefficients from a ring R, is denoted by . The least common multiple of positive integers 
 is denoted by 
 and we write 
 for their greatest common divisor.

2.1. Formal power series and weighted automata
A formal power series in several noncommuting variables from an alphabet Σ with coefficients in a semiring S – or, more briefly, a formal power series over Σ and S – is a mapping 
⁎
. We write  instead of  for the value of r upon 
⁎
 and call this element of S the coefficient of r at w. The series r itself is then written as 
⁎
  The set of all formal power series over Σ and S is denoted by 《
⁎
》.

The sum of power series 《
⁎
》 is the series  such that  for all 
⁎
. The reason for abandoning the terminology and notation of mappings, and using those usual for series instead, is related to the multiplicative operation used: The Cauchy product of series 《
⁎
》 is the series  such that for each 
⁎
, 
⁎
 
  We identify each  with the series 
《
⁎
》 such that 
 and  for all 
, and each 
⁎
 with the series 
《
⁎
》 such that 
 and 
 for all 
⁎
. It is well known [17] that 《
⁎
》 is again a semiring for every semiring S and alphabet Σ.

A family 
 of power series from 《
⁎
》, for an arbitrary index set I, is said to be locally finite if the set 
 is finite for all 
⁎
. One can then define the sum over this family by 
 
 where 《
⁎
》 is a series such that the coefficient  is given, for each 
⁎
, by a finite sum 
 

The left quotient of a formal power series 《
⁎
》 by a word 
⁎
 is a series 
 such that 
 for all 
⁎
.

Here we are mostly interested in the case when the alphabet Σ is unary, e.g., , and the coefficients are taken from some field  or its subring. We obtain the usual univariate formal power series in this case, and the semiring 《
⁎
》 becomes an integral domain customarily denoted by 〚〛.

A weighted finite automaton over a semiring S and alphabet Σ is a quadruple , where Q is a finite set of states,  is a transition weighting function,  is an initial weighting function, and  is a terminal weighting function. A transition of the automaton  is a triple  such that . A run of the automaton  is a word 
⁎
 such that  is a transition for all factors pcq of γ such that  and . Given a run 
 with , 
, and 
, let 
⁎
 denote the label of γ and 
 the value of γ; we also say that γ is a run from 
 to 
. The monomial 《
⁎
》 realised by the run γ can then be defined by
 Let  be the set of all runs of the automaton . Then it is clear that the family of monomials  is locally finite. The behaviour of  can thus be defined by the infinite sum 
  In particular, observe that  in case the set Q is empty. A series 《
⁎
》 is rational over S if  for some weighted finite automaton  over S and Σ. We often only write that 《
⁎
》 is rational, meaning that r is rational over S.

By a weighted automaton, we always understand a weighted finite automaton. In what follows, we confine ourselves to state sets of the form  for some ; this is clearly without loss of generality. Moreover, we write  instead of .

A weighted automaton  is deterministic if there is at most one  such that  and if  together with 
 implies 
 for all 
 and . A series 《
⁎
》 is sequential if  for some deterministic weighted automaton  over S and Σ.

Weighted automata over words admit an alternative interpretation as linear representations. Let S be a semiring and Σ an alphabet. A linear S-representation over Σ is a quadruple , where  is its order, 
 is a vector of initial weights, 
⁎
 is a monoid homomorphism, and 
 is a vector of terminal weights. The series realised by  is then defined by 
⁎
  A series 《
⁎
》 is recognisable if  for some linear S-representation  over Σ.

It is a fundamental result that the sets of recognisable and rational series in 《
⁎
》 coincide [41]. In fact, there is a natural correspondence between weighted automata and linear representations: Given a weighted automaton  over S and Σ, let 
, where , 
 is given for each  by 
 for , and 
. It is clear that this correspondence introduces a bijection between weighted automata3 and linear representations over S and Σ, while 
 for every .

2.2. Minimisation of weighted automata over fields
We now review the basic theory of weighted automata over fields, leading to the Cardon-Crochemore minimisation algorithm [12]. The presentation of this subsection more or less follows J. Sakarovitch [42], where the omitted proofs can be found; see also [8], [30], [41]. References to [42], [8], [41], which would otherwise have been omnipresent, are mostly avoided in what follows.

Let a field  and an alphabet Σ be fixed for the rest of this subsection. The set 《
⁎
》 forms, together with the operations of sum of series and multiplication of a series by a scalar4 from , a vector space over . Given a series 《
⁎
》, let the (left) quotient space of r be the subspace  of 《
⁎
》 generated by the set 
⁎
 of all left quotients of r. This space is related to minimisation of weighted automata by the following classical result.

Theorem 2.1

A series 《
⁎
》 is rational if and only if the vector space  is finite-dimensional. If so, the dimension of  equals the minimum number of states of a weighted automaton  over  and Σ such that .

A weighted automaton  whose number of states equals the dimension of  is thus called minimal, while the corresponding linear representation is usually termed reduced. Note that minimal automata (or, equivalently, reduced representations) are not unique in general.

Two other vector spaces can be associated with each weighted automaton  or with the corresponding linear representation 
. The left vector space of  is the subspace  of 
 generated by the set 
⁎
. Similarly, the right vector space of  is the subspace  of 
 generated by 
⁎
. Moreover, let 《
⁎
》 be a linear mapping given for all 
⁎
 by 
⁎
  The following theorem then gives two conditions equivalent to the minimality of a weighted automaton.

Theorem 2.2

Let  be a weighted automaton over  and Σ. Then the following are equivalent:

(i)
The automaton  is minimal, i.e., the dimension of  is n.

The dimension of both vector spaces  and  is n.

The dimension of  is n and  is injective.

Moreover,  is injective whenever  is of dimension n.
One needs a bit more in order to actually decide if a given weighted automaton  over  and Σ is minimal or not – namely an effective method for computing the dimensions of  and . To this end, let 
 and call 
⁎
 a left subbasic language of  if it is finite, prefix-closed, and if the family of vectors  is linearly independent in . If in addition  forms a basis of , then call 
⁎
 a left basic language of . Right subbasic and basic languages are defined similarly – just replace prefix-closed by suffix-closed, and consider the family  of vectors from  instead.

The most important feature of basic languages is that they actually always exist. In addition, every left (right) subbasic language of  is a subset of some left (right) basic language of . This gives rise to a simple iterative algorithm for computing the basic languages and hence also the dimensions of  and .5

The Cardon-Crochemore minimisation algorithm is based on first transforming a weighted automaton  to its equivalent  whose number of states equals the dimension of . By Theorem 2.2, this also implies that  is injective. Next,  is transformed to its equivalent  whose number of states equals the dimension , while this transformation is conducted in a way that preserves injectivity of  – that is,  is injective as well. The resulting automaton  is thus minimal by the condition  of Theorem 2.2. The details of the construction transforming  into  are summarised in the following lemma; the essentially symmetrical transformation of  into  is not crucial for our purposes.

Lemma 2.3

Let  be a weighted automaton over  and Σ with 
. Let m be the dimension of  and assume that ;6 let 
 with 
 be a left basic language of . Let X be an  matrix with rows 
, which is obviously of full row rank. Let 
 be a right inverse matrix of X.7 Set
 Let  be the weighted automaton over  and Σ with 
. Then  and the dimension of  equals m. Moreover,  is injective whenever  is.

It is in fact possible to prove that the automaton  is conjugate to  by the matrix X – that is, still using the notation from the previous lemma,
 See also [5], [6] for the theory of weighted automata conjugacy.
The Cardon-Crochemore minimisation algorithm [12], which takes upon input a weighted automaton  over  and Σ and outputs its minimal equivalent , consists roughly of the following steps:

1.
Find a right basic language R of . If , output the automaton with no states and halt.

2.
Using a construction similar to that of Lemma 2.3, find an automaton  with k states such that  and  is of dimension k.

3.
Find a left basic language L of . If , output the automaton with no states and halt.

4.
Using the construction from Lemma 2.3, find and output an automaton  with m states such that  and  is of dimension m.

It can be shown that the algorithm always runs in polynomial time 
, measured in the number of scalar operations of the field  performed.
Let 
 be weighted automata over  and Σ with 
 and 
. These automata are termed similar if there exists an invertible matrix 
 such that
 Similarity thus obviously is a stronger – and symmetric – form of conjugacy. See [41, Proposition III.4.10] for the proof of the following proposition.

Proposition 2.4

Let 《
⁎
》 be a rational series with two minimal weighted automata  such that . Then the automata  and  are similar.

The construction of Lemma 2.3 is applied as a final step of the Cardon-Crochemore algorithm unless the realised series is 0. Then 
 represents, for all 
⁎
, the coordinates of  relative to the basis 
 – indeed, utilising conjugacy of the automata  and , it is not hard to prove by induction on the length of w that 
. The following proposition, which we state explicitly for later reference, then follows as an easy corollary.

Proposition 2.5

Let  be a weighted automaton over  and Σ, and  the equivalent automata obtained from  by the Cardon-Crochemore algorithm, the minimal automaton  having at least one state. Let 
 and 
 be the left basic language of  with 
. Then 
, the j-th vector of the standard basis of 
, for . In particular, 
.8

Remark 2.6

Over a unary alphabet , nonempty left basic languages of automata are necessarily of the form 
 for some . For the rest of this article, we assume without loss of generality that the words from L are always numbered in increasing order (with respect to their length) while running the Cardon-Crochemore algorithm: 
. The equality 
 appearing in the preceding proposition thus can be rewritten as 
 in this particular case.

2.3. Systems of difference equations
We now present some basic facts about linear systems of difference equations – i.e., recurrences – that we make use of in what follows. See, e.g., [22], [29] for more information about this topic.

More precisely, we are interested in autonomous and homogeneous systems, which take the form(1)
 where 
 is a matrix and 
 with 
 for all  is the unknown sequence of vectors. In an initial value problem for (1), we are in addition given the vector 
 and the task is to determine the vectors 
 for all . It is easy to see that the unique solution to such initial value problem is always given by 
 for all . By transforming the matrix A into the Jordan normal form, it is not hard to observe that each 
 for  can be expressed as(2)
 
 
 
 where σ denotes the spectrum of A, the algebraic multiplicity of an eigenvalue λ of A is denoted by , and 
 are complex constants for  and . Equivalently,(3)
 
 
 
 
 where 
 for  and  are constants and 
 is the Kronecker delta,
  Note that the spectrum of A consists precisely of the roots of the characteristic polynomial of the matrix A, defined by 
, where 
 is the identity  matrix. In addition, the algebraic multiplicity of an eigenvalue λ is precisely the multiplicity of λ as a root of 
. Thus (3) could be rewritten using just roots of 
 and their multiplicities – we mostly use this viewpoint in this article.

Now, both (2) and (3) express the function 
 as a linear combination of other functions from the vector space 
. It is a fact of fundamental importance that the functions taking place in these linear combinations are linearly independent. More precisely, every finite set of distinct functions of the form(4) 
 
 for some  and  is linearly independent in 
, as well as every finite set of distinct functions of the form(5)
 for some  and . As we need a slightly stronger property than mere linear independence, we briefly sketch the reasoning leading to these observations.

In order to establish linear independence of functions 
, one can utilise the so-called Casorati matrices.9 For each , define the Casorati matrix  of the functions 
 by
 
 It is not hard to see that 
 are linearly independent whenever  is of full rank for some . Now, if 
 are pairwise distinct functions of the form 
 for , then  is a Vandermonde matrix, which is known to have a nonzero determinant – hence  is of full rank, and the said functions are linearly independent. If 
 are functions of the form (4) for  and  for each , then  becomes a generalised Vandermonde matrix, which is also known to have a nonzero determinant [27]. These functions are thus linearly independent as well. Finally, if 
 are, for some , functions of the form 
 for  and , and of the form 
 for  and , then it is easy to see that their Casorati matrix  can be obtained from a generalised Vandermonde matrix via several elementary column operations. Hence,  is of full rank and 
 are linearly independent. The observation that  is of full rank is, in some sense, even more important for our purposes than the actual linear independence of 
. We state this property as a theorem for future reference.

Theorem 2.7

Let  be a finite set and  for each . Let 
 be precisely the functions 
 for  and  together with 
 for  and . Then the Casorati matrix  for 
 is of full rank. As a result, any collection of pairwise distinct functions of the form (5) is linearly independent in 
.

Let us also recall that the companion matrix of a monic polynomial 
 with complex coefficients is defined by
 
 The characteristic polynomial 
 of the matrix 
 is the polynomial  itself. Linear systems of difference equations with matrices of this type can be used to model linear n-th order difference equations.

2.4. Cyclotomic polynomials
Let us finally review the basic theory of cyclotomic polynomials, later used to decide determinisability of unary weighted automata over . See D. S. Dummit and R. M. Foote [21, Section 13.6] for an exposition and missing proofs.

Definition 2.8

Let . The n-th cyclotomic polynomial 
 is then given by
 
 

In other words, 
 is the monic polynomial whose roots are precisely the primitive complex n-th roots of unity. It is a basic fact that actually 
 and that this polynomial is always irreducible over . This means that cyclotomic polynomials are precisely the minimal polynomials of the primitive roots of unity over . The definition also directly implies that the degree of 
 is given by  for all , where φ denotes the Euler's totient function – that is,  is the number of integers from  coprime to n. The following formula, which we present as a theorem for later reference, follows in a straightforward manner from Definition 2.8.

Theorem 2.9

For all ,
 

Hence, every cyclotomic polynomial 
 divides 
 for all p that are multiples of n. Moreover, by utilising the irreducibility of cyclotomic polynomials, we easily arrive at the following observation, again presented as a theorem for later reference.

Theorem 2.10

Let  be a monic polynomial such that all roots of  over  are complex roots of unity. Then  is a product of cyclotomic polynomials. If in addition the roots of  are all simple, then  is a product of pairwise distinct cyclotomic polynomials.

3. The characteristic polynomial of a unary weighted automaton
We now draw our attention to the main objects of our study – that is, to weighted automata over the rational numbers and unary alphabets, and to the corresponding rational series from 《
⁎
》, i.e., 〚〛. Of course, as the set  forms a field with the usual addition and multiplication, the findings reviewed in Subsection 2.1 and 2.2 still remain valid in this setting.

Let us start by defining the characteristic polynomials of unary weighted automata over , which we later use as a key ingredient in our determinisability criteria and corresponding decision algorithms. In what follows, we denote by 
 the  identity matrix over .

Definition 3.1

Let  be a weighted automaton over  and  with 
 and . The characteristic polynomial 
 of  is the characteristic polynomial of the matrix , i.e.,
 where 
 is the  identity matrix.

Remark 3.2

Note that the characteristic polynomial defined in this way is always monic.

Observe that the characteristic polynomial of an automaton does not depend on its initial and final weights, but just on the single matrix  of the associated linear representation, with the characteristic polynomial of which it coincides. Now, if  and  are similar weighted automata over  and  with 
 and 
, then the matrices  and 
 are clearly similar as well. As it is well known that the characteristic polynomials of similar matrices are always equal, we readily arrive at the following observation.

Proposition 3.3

Let  and  be similar unary weighted automata over , both having at least one state. Then 
.

Recall Proposition 2.4, according to which any two minimal automata of some fixed rational series over a field are similar. By combining this with Proposition 3.3, we obtain the following corollary.

Corollary 3.4

Let 《
⁎
》 be a rational series. Then all minimal weighted automata  with  share the same characteristic polynomial.

Characteristic polynomials, defined above for automata, thus can serve as characteristics of rational series as well. This is made explicit by the following definition, in which the notion of a characteristic polynomial is extended to rational series. Correctness of this definition follows by the corollary above.

Definition 3.5

Let 《
⁎
》 be a rational series. The characteristic polynomial 
 of r is the common characteristic polynomial of all minimal automata  such that .

Note that the degree of the characteristic polynomial of a rational series always equals the dimension of the quotient space .

To compute the characteristic polynomial of a rational series 《
⁎
》, it is clearly sufficient to apply the Cardon-Crochemore algorithm in order to obtain a minimal automaton  such that , and to subsequently compute the characteristic polynomial of the single matrix of the associated linear representation 
. However, we now observe that the second step is in fact not necessary, due to a specific form of the automaton obtained via the Cardon-Crochemore algorithm, from which the characteristic polynomial can be “directly read”.

Proposition 3.6

Let 《
⁎
》 be a rational series,  an arbitrary weighted automaton over  and  satisfying , and  the minimal automaton for r obtained by the Cardon-Crochemore algorithm upon input . Let 
. Then  is the companion matrix of the characteristic polynomial 
 of the series r, i.e.,
 

Proof

By the observation made in Remark 2.6,
 
 
  
 
 
  for . Thus 
 and the j-th row of  is given, for , by the vector 
. As a consequence, the first  rows of the matrix  are as described in the statement of the proposition, which means that
 
 for some 
; the minus signs have been introduced just for convenience. The matrix  thus is the companion matrix of its characteristic polynomial 
. Now, 
 and as  is minimal, 
. The matrix  therefore indeed is the companion matrix of the characteristic polynomial of r. □

4. The fundamental property of characteristic polynomials
The characteristic polynomial of a unary weighted automaton may differ from the characteristic polynomial of its realised series in case the automaton is not minimal. Nevertheless, we now prove the following fundamental property of characteristic polynomials of automata, which we later use to obtain a decidable determinisability criterion: Given a unary weighted automaton  over , the characteristic polynomial 
 of the series  divides the characteristic polynomial 
 of the automaton  (if ). In other words, if λ is a root of 
 of multiplicity , then it also is a root of multiplicity at least  for the polynomial 
.

Remark 4.1

The main finding of this section is not fully original, as it can be seen, in its essence, as an alternative formulation of certain results from the theory of linear recurrence synthesis centred around the Berlekamp-Massey algorithm – see, e.g., [10, Section 7.2]. Nevertheless, the viewpoint of this section is more expedient for our purposes.

We need the following two lemmata to arrive at the aforementioned observation.

Lemma 4.2

Let  be a weighted automaton over . Then the minimal weighted automaton over  equivalent to  is the same as the minimal weighted automaton over  equivalent to .

Proof

It is easy to see that the Cardon-Crochemore algorithm, presented with an input automaton  over a field , produces the same result even if  is interpreted as an automaton over some extension  of . □

A unary weighted automaton  over  and  with 
 and  can clearly be interpreted as an initial problem for the first-order linear autonomous system of difference equations
 where the initial conditions are given by 
. The j-th component of the column vector 
 represents, for all  and , the coefficient of 
 in the series realised by an automaton obtained from  by changing the initial weights so that  and  for . Accordingly, the coefficient of 
 in  can be expressed, for all , as
 This implies that if we denote by V the set of all complex roots of 
 – i.e., the spectrum of  – and by  the multiplicity of a root  of 
 – i.e., the algebraic multiplicity of λ as an eigenvalue of  – then there exist uniquely determined 
 for  and  such that
 
 
 
 
 for all . We now prove that the constants 
 are nonzero for all  in case the automaton  is minimal.

Lemma 4.3

Let  be a minimal unary weighted automaton over  and  with 
 and . Let V be the set of all complex roots of 
 and , for each , its multiplicity as a root of 
. Then there exist uniquely determined 
 for  and  such that 
 for every  and(6)
 
 
 
 

Proof

Existence of some uniquely determined constants 
 for  and  satisfying (6) has already been observed above. It remains to prove that 
 is nonzero for each .

Suppose for the purpose of contradiction that 
 for some  and form the polynomial
 
 of degree  with complex coefficients. Let 
 be the companion matrix of  and consider a unary weighted automaton  over  and  such that 
 for 
, 
, and 
. We claim that .

For , let  be the multiplicity of κ as a root of , i.e.,  for  and . Clearly 
, so that there exist uniquely determined constants 
 for  and  such that(7)
 
 
 
 
 for all . The initial value problem corresponding to  takes the form
 with 
. As 
 is a companion matrix and 
, the solution 
 satisfies
 for all . The initial conditions 
 then imply that 
 for . Combining this observation with (6), (7), and the assumption that 
, we obtain the following system of linear equations in  unknowns 
 for  and : For , 
 
 
 
 
 
 
 
 
 or, equivalently, 
 
 
 
 
 The matrix of this system of equations is clearly equal to the Casorati matrix  of the functions 
 for  and  and 
 for  in case . As this matrix is of full rank by Theorem 2.7, we find out that 
 – i.e., 
 – for all  and . Thus indeed  by (6), (7), and the equality 
.

We have thus constructed a unary weighted automaton  over  and  that is smaller than , while . However, we have assumed that  is a minimal weighted automaton over  and  with behaviour  – a contradiction with Lemma 4.2. □

We are now in a position to prove the fundamental property of characteristic polynomials that we have already anticipated at the beginning of this section.

Theorem 4.4

Let  be a unary weighted automaton over  and  with . Then if λ is a (complex) root of 
 of multiplicity , it is also a root of 
 of multiplicity at least .

Proof

As 
 is by definition the characteristic polynomial of any of the minimal automata for  (which is well-defined as ), it follows by Lemma 4.3 that(8)
 
 
 
 
 for all , where V denotes the set of all complex roots of 
, multiplicity of each root  of 
 is denoted by , and 
, for  and , are complex numbers such that 
 for all . By the discussion preceding Lemma 4.3, we also have(9)
 
 
 
 
 for all , where W is the set of all complex roots of 
, multiplicity of each  as a root of 
 is denoted by , and 
, for  and , are some complex constants.

Now, suppose for contradiction that some  is either not a root of 
 – i.e.,  – or it is a root of 
 of multiplicity smaller than  – i.e., . In both cases we observe that the right hand side of (8) contains the term 
  with 
, while no nonzero factor of this term takes place on the right hand side of (9). As any finite set of distinct functions of the form 
 for  and  or 
 for  is linearly independent by Theorem 2.7, the right hand sides of (8) and (9) cannot evaluate to the same value for all . This contradicts the fact that the left hand side is the same both in (8) and in (9). □

Let us end up our preliminary study of characteristic polynomials of automata by restating the preceding theorem in slightly different words.

Corollary 4.5

Let  be a unary weighted automaton over  and  such that . Then the polynomial 
 divides the polynomial 
.

5. Basic observations about deterministic weighted automata over unary alphabets
We now take a look at unary deterministic weighted automata over , which can be assumed to be of a very simple particular form, and identify the characteristic polynomials of such automata.

Call a weighted automaton  accessible if for every , there exists  with  such that there is at least one run γ from p to q.10 It is clear that every weighted automaton  admits an accessible equivalent, which is deterministic whenever  is. As a result, an automaton is determinisable if and only if it admits an accessible deterministic equivalent. We may therefore confine ourselves to accessible deterministic automata in what follows.

Let  be an accessible deterministic unary weighted automaton over  and . If , there has to be precisely one state 
 such that 
. For each , there clearly exists at most one run 
 of  with label 
 from the state 
. Moreover, the automaton always takes the form of a directed path or a “directed path leading to a cycle”11 – in the former case, there are distinct states 
 such that 
 leads to 
 for , while there is no run 
 for ; in the latter case, there are distinct states 
 and an index  such that 
 leads to 
 for  and 
 leads to 
 for all 
 such that 
. The two possibilities are depicted in Fig. 1a and Fig. 1b, respectively.

Fig. 1
Download : Download high-res image (47KB)
Download : Download full-size image
Fig. 1. Two possible forms of an accessible deterministic unary weighted automaton over  with n > 0 states. All transitions are labelled by the same letter c and each is given some nonzero weight. The arrow leading to q0 indicates that q0 is the only state with nonzero initial weight; in addition, every state might or might not have a nonzero terminal weight (this is not shown in the figure).

This observation reflects directly in the possible forms of the matrix  of the linear representation 
 associated to an accessible deterministic unary weighted automaton  over  and  with : There always exists a permutation matrix 
 such that(10)
 
 where , 
 for , and 
, while these elements are in  or  whenever  is an automaton over  or , respectively.12

Characteristic polynomials of matrices taking the form just described can be easily determined – we thus arrive at the following result.

Proposition 5.1

Let  with  be an accessible deterministic unary weighted automaton over  and . Then either
 or
 for some  and . In the latter case,  whenever  is an automaton over , and  whenever  is an automaton over .

Proof

Let 
. Then (10) has to hold for some permutation matrix 
, , 
 for , and 
; if  is over  or , then these elements belong to the same set as well. Clearly(11)
 
 
 If 
, then (11) boils down to 
. Otherwise, set
 
 and ; the equation (11) then rewrites as 
. □

Corollary 5.2

Let  with  be an accessible deterministic unary weighted automaton over  and . Then the roots of the characteristic polynomial 
 can be described as follows:

(i)
Zero can be a possibly multiple root of 
.

If zero is not a root of 
 of multiplicity n, let  if it is not a root of 
 at all, and  if it is a root of multiplicity k. Then there exists  such that the remaining roots of 
 are all simple and given by 
 for  and any  such that 
.

6. Deciding determinisability and determinisation
The aim of this section is to collect our hitherto findings and to proceed to the actual main result of this article – a decidable determinisability criterion for unary weighted automata over  – and to some related points, such as the variant of the main result for automata over  and , or the existence of a determinisation algorithm. Nevertheless, we first need one further auxiliary proposition, which can be viewed as a stronger13 converse of Proposition 5.1 and Corollary 5.2.

Proposition 6.1

Let 《
⁎
》 be a rational series.

(i)
If the characteristic polynomial 
 divides 
 for some , then  for a deterministic unary weighted automaton  over  and  with 
, where ,  is the companion matrix of 
, i.e.,
 
 and 
.

If 
 divides 
 for some , , and  – i.e., the roots of 
 are elements of the set 
 for  and some  such that 
, while all these roots, possibly except zero, are simple – then  for a deterministic unary weighted automaton  over  and  with 
, where ,  is the companion matrix of 
, i.e., and 
.

Proof

The statement (i) is obviously true; let us thus prove . Let
 Moreover, let 
 be the set of actual roots of 
, and 
 the multiplicity of zero as a root of 
 (or 0 if zero is not a root of 
 at all). By the reasoning preceding Lemma 4.3, we obtain
 
 
 for some constants 
 for 
 and 
, and for all . By setting 
 for all 
 and 
, this can be rewritten as(12)
 
 
 for all . Now, as  is the companion matrix of 
, all elements of  are simple roots of 
 and if , zero is a root of multiplicity h. Thus, again by the reasoning preceding Lemma 4.3,(13)
 
 
 for some constants 
 for  and 
, and for all . Moreover, clearly
 Thus, by (12) and (13), 
 
 
 
 
 As the  Casorati matrix  of the functions 
 for  and 
 for  is of full rank by Theorem 2.7, we obtain 
 for all  and 
 for . Hence, 
 for all  – or, in other words, . □

We are now prepared to prove the main theorem of this article providing a determinisability criterion for unary weighted automata over the rationals, which we later show to be decidable in polynomial time. To be more precise, we formulate this criterion in three different, yet obviously equivalent, ways, as conditions  to  of the following theorem. We still assume that the behaviour of the automaton in question is a nonzero series, as otherwise the automaton is trivially determinisable.

Theorem 6.2

Let  with  be a unary weighted automaton over  and . Then the following are equivalent:

(i)
The automaton  is determinisable, i.e., there exists a deterministic weighted automaton  over  and  such that .

The characteristic polynomial 
 of the series realised by the automaton  divides either 
 for some , or 
 for some , , and .

The characteristic polynomial 
 can be written either as
 for some , or as
 where  and  is a monic polynomial of degree  that divides 
 for some  and .

The roots of 
 all belong to the set 
 for some  and  such that 
, while all these roots, possibly except zero, are simple.

Proof

The statement  is clearly equivalent both to  via 
 and , and to  via  if 
 divides some 
, eventually via  and 
 otherwise.

It thus remains to prove the equivalence of, e.g., (i) and . In case the automaton  is determinisable, there exists an accessible deterministic weighted automaton 
 over  and  such that ; as , necessarily . Then either
 or
 for some  and  by Proposition 5.1, and 
 divides 
 by Corollary 4.5.

Conversely, if 
 divides 
 or 
 for some , , and , then  is determinisable by Proposition 6.1. □

Our next aim is to show that the equivalent conditions given by the preceding theorem are decidable, i.e., to describe an algorithm deciding determinisability of unary weighted automata over .

Let  be a unary weighted automaton over  and , determinisability of which is in question. By applying the Cardon-Crochemore minimisation algorithm, it is easy to decide if , as this happens if and only if the equivalent minimal automaton 
 is empty, i.e., if . If so, the automaton  is determinisable. In the opposite case the minimisation algorithm computes, in the sense of Proposition 3.6, the characteristic polynomial 
 of the series . It is then trivial to decide whether 
 for some , in which case  is determinisable by Theorem 6.2.14

We may thus suppose that the characteristic polynomial 
 can be factored as 
 for some  and some monic polynomial  of degree  with nonzero constant coefficient. Deciding whether  is determinisable reduces, by Theorem 6.2, to finding out if  divides 
 for some  and . As 
, we may assume without loss of generality that actually . The condition of  dividing 
 for some  and positive  is equivalent to saying that the roots of  are all simple and contained in the set 
 for some  and positive , where  denotes the positive real p-th root of b.

Let us now write the polynomial  as
 for 
 with 
. Then if the roots of  indeed all take the form 
 for some k, we necessarily get 
, i.e., 
.

Consider the companion matrix C of the polynomial ,
 
 whose eigenvalues are precisely the roots of . If the roots of  are of the form described above, all eigenvalues of the matrix
 
 must be (not necessarily distinct) roots of unity – in other words, applying Theorem 2.10, the characteristic polynomial 
 is a product of (not necessarily distinct) cyclotomic polynomials. Thus, if we find out that this characteristic polynomial is not a product of cyclotomic polynomials, we can conclude that the automaton  is not determinisable.

In case the polynomial 
 is a product of cyclotomic polynomials, write
 
 where 
. Then each 
, for , gives 
 roots of the polynomial 
, which are all of the form 
 for some 
;15 denote the set of all these roots by 
. All roots of 
 are thus of the form 
 for some 
.

Each root 
 for  surely corresponds to exactly one root of ,16 which has to be 
 for some , i.e., 
 times one of the d-th roots of ω. This observation can be used to determine all roots of the polynomial , but there is no need to do so. Instead, as we shortly demonstrate, it suffices find out whether all roots of  are simple. This can be easily done via computing the greatest common divisor of  with its formal derivative 
 – see, for instance, [21, Section 13.5].

In case there are repeated roots of , we may conclude by Theorem 6.2 that  is not determinisable. Otherwise the roots of  are all simple, and we may set 
 and 
. We then find out that all these roots are contained in the set
 Moreover, the number b is necessarily rational, as
 We may thus conclude, again by Theorem 6.2, that the automaton  is determinisable.

Let us now summarise the algorithm for deciding determinisability of unary weighted automata over . We first provide a high-level description, while the details concerning implementation of certain particular steps can be found below.

Algorithm 6.3

Deciding determinisability of unary weighted automata over 
Input:
A unary weighted automaton  over  and .

1.
Find a minimal automaton 
 equivalent to  using the Cardon-Crochemore algorithm.

2.
Check if .

a)
If so, return “ is determinisable” and halt.

b)
Otherwise “read” the characteristic polynomial 
 and continue by the next step.

3.
Check if 
 for some .

a)
If so, return “ is determinisable” and halt.

b)
Otherwise continue by the next step.

4.
Compute the factorisation 
, where  and  is a monic polynomial of degree  with nonzero constant coefficient 
.

5.
Compute the matrix 
, where C is the companion matrix of .

6.
Compute the characteristic polynomial 
 of A.

7.
Check if 
 is a product of (not necessarily distinct) cyclotomic polynomials.

a)
If not, return “ is not determinisable” and halt.

b)
Otherwise continue by the next step.

8.
Check if all roots of  are simple.

a)
If so, return “ is determinisable”.

b)
Otherwise return “ is not determinisable”.

Some comments are in place as to the implementation of certain steps of the above algorithm and their time complexity, measured by the number of arithmetic operations over . Regarding time complexity, our aim is to show that at most 
 such operations are performed during any execution of Algorithm 6.3 upon an input automaton with n states, in case a suitable implementation is used.

Step 1 of Algorithm 6.3 consists of calling the Cardon-Crochemore minimisation algorithm, which runs with 
 arithmetic operations – and, as we show below, it is the least effective step of the algorithm. The way how to “read” the characteristic polynomial 
 in Step 2 from the minimal automaton computed by the Cardon-Crochemore algorithm was explained in Proposition 3.6. The next two steps of the algorithm are trivial and negligible when it comes to time complexity.

The cost of computing the companion matrix C in Step 5 is clearly negligible. The power 
 of the  matrix C can clearly be computed within arithmetic operations, where  is the number of operations needed for multiplication of  matrices. Thus, if the matrix multiplication is realised, e.g., by the Strassen algorithm [44] or by the “fastest” algorithm known up to date [2], the arithmetic complexity of Step 5 goes well below 
. Similarly, the characteristic polynomial of a  matrix can be computed in  operations [28], [20], so we obtain the same bound for Step 6.

Step 7 can be considered the crux of Algorithm 6.3. There is a variety of methods that could be employed in order to check whether a polynomial is or is not a product of cyclotomic polynomials. Let us first describe an elementary approach, for which an 
 upper bound on arithmetic operations is easily established. First observe that since 
 is of degree d, every cyclotomic polynomial dividing 
 has to be of degree at most d. The degree of a cyclotomic polynomial 
 equals . At the same time, it is known that
 
 for all , where γ is the Euler–Mascheroni constant – see [40, Theorem 15] and [4, Theorem 8.8.7]. This implies existence of an effectively computable function 
 with  such that  for all cyclotomic polynomials 
 dividing 
 of degree d. We can then perform trial division of 
 by the cyclotomic polynomials 
, in this order, while attempting division by each polynomial possibly multiple times until a nonzero remainder is obtained. At the end of this process, we surely obtain all cyclotomic factors of the polynomial 
, so that it finally suffices to check whether there is a factor of positive degree remaining or not. The whole procedure thus involves computing the cyclotomic polynomials 
, while it is well known that 
 can be computed using 
 operations – see, e.g., J. von zur Gathen and J. Gerhard [45, Algorithm 14.48]; for other possibilities of computing the cyclotomic polynomials, consult A. Arnold and M. Monagan [3]. The overall number of arithmetic operations needed to compute 
 thus is in
 The division with remainder can be done with  operations [45, Algorithm 9.5]17 for polynomials of degree bounded by d, while the method described performs at most d successful and at most  unsuccessful divisions. In effect, the total number of operations needed to perform the divisions is in
 As a result, we may conclude that at most 
 arithmetic operations over  are needed for Step 7.

However, note that there is a possibly faster approach than the one described above: F. Beukers and C. J. Smyth [9] have described an effective algorithm, based upon similar ideas as the “Graeffe” cyclotomicity test of R. J. Bradford and J. H. Davenport [11], for finding what they call the cyclotomic part of a given polynomial , i.e., the product of all distinct cyclotomic polynomials dividing . Now, it is clear that a polynomial is a product of cyclotomic polynomials if and only if its square-free part is a product of distinct cyclotomic polynomials. Hence, to find out whether 
 is a product of cyclotomic polynomials, it suffices to compute its square-free part – i.e., to divide 
 by the greatest common divisor of 
 and its formal derivative [45, Algorithm 14.19] – and to apply the aforementioned algorithm of F. Beukers and C. J. Smyth [9].

Finally, Step 8 can be realised via computing the greatest common divisor of  and its formal derivative – the roots of  are all simple if and only if the result is of degree zero [21, Section 13.5]. This can be done within
 arithmetic operations over the rational numbers [45, Algorithm 14.19]. We may thus conclude as follows.

Theorem 6.4

Given any input automaton , the Algorithm 6.3 correctly decides whether  is determinisable, while 
 arithmetical operations over  are performed.

Let us now collect some closely related observations. In the first place, let us note that determinisability of unary weighted automata over  and  is decidable as well. We need the following variant of Theorem 6.2 in order to arrive at this observation.

Proposition 6.5

Let  with  be a unary weighted automaton over  and . Then the following are equivalent:

(i)
The automaton  is determinisable over .

The characteristic polynomial 
 of  satisfies either 
 for some , or 
 for  and a monic polynomial  of degree  dividing 
 for some  and .

The characteristic polynomial 
 of  satisfies either 
 for some , or 
 for  and a monic polynomial  of degree  dividing 
 for some  and .

If in addition 《
⁎
》, then the above statements are equivalent to determinisability of  over .
Proof

If  is determinisable, then there exists an accessible deterministic weighted automaton  over  and  such that . Then Proposition 5.1 gives us either 
 for some , or 
 for some , , and , while 
 divides 
 by Corollary 4.5. This proves . Moreover, we have already observed that  implies  by means of 
.

Finally, let us assume  and construct a deterministic weighted automaton  over  and  equivalent to  using Proposition 6.1. Let 
. Then it is clear that the entries of i and  are all in  and that every entry of f is equal to a coefficient of some word in . Thus, 《
⁎
》 implies that the entries of f are in , so that  is an automaton over  and  is determinisable over . Similarly, if 《
⁎
》, then the entries of f have to be in , and  is determinisable over . □

We can now prove a Fatou-like property, which trivially implies that determinisation of unary weighted automata over  and  is decidable. Note that the property for  holds although  is not a Fatou extension of , i.e., there are series with nonnegative integer coefficients that are rational over , but not rational over  [8, Example 7.2.1] – even over a unary alphabet [8, Exercise 8.1.3].

Theorem 6.6

A unary weighted automaton over  (over ) is determinisable over  (over ) if and only if it is determinisable over .

Proof

Let  be a unary weighted automaton over  determinisable over . It is well known that every weighted automaton over  admits an equivalent minimal automaton over  that is at the same time an automaton over  [8, Section 7.1]. This means that 
. At the same time, we have observed in our discussion following Theorem 6.2 that if  with  is determinisable over  and 
 as above, then  has to divide, for some , the polynomial 
, where b is a power of 
 for 
 being the constant coefficient of . Thus  and  is determinisable over  by Proposition 6.5. The same result easily follows when 
 for some . If moreover  is an automaton over , then it is determinisable over , again by Proposition 6.5. □

The following corollary of Theorem 6.4 and Theorem 6.6 summarises our findings using the terminology of rational power series.

Corollary 6.7

The sequentiality problem is decidable for univariate rational series over , , and .

Remark 6.8

Recall that a weighted automaton  is crisp-deterministic [15], [16], [23] if it is deterministic and at the same time, the outputs of the transition weighting function σ and the initial weighting function ι are limited to be contained in .18 It is not hard to see – and essentially already known [15], [34] – that a rational series 《
⁎
》, for some field  and alphabet Σ, is realised by a crisp-deterministic automaton if and only if it is of finite image, i.e., if the set 
⁎
 is finite; see also [15, Theorem 7.4] for a similar result in a more general setting of strong bimonoids. Indeed,  is obviously of finite image for a crisp-deterministic automaton . Conversely, every rational series r with finite image is known to be sequential [34, Proposition 12]. Then, given an accessible deterministic weighted automaton  such that , it is straightforward to prove that the set of values  of runs γ from the unique initial state to q is finite for each state q of . One can thus change all (nonzero) transition weights to 1, while taking account of the original value of a run using a finite number of states, and incorporating these values into terminal weights.

The finite image property of rational series over  is well known to be decidable via reduction to the finiteness problem for matrix semigroups [25], [35]; see also [8, Section 9.1] and [24, Section 5].

Now, using similar reasoning as in the proof of Proposition 6.5, it is easy to show that a unary weighted automaton  over  and  with  admits a crisp-deterministic equivalent if and only if either 
 for some , or 
 for  and a monic polynomial  of degree  dividing 
 for some . The latter happens if and only if  is a product of distinct cyclotomic polynomials, which can be easily checked (see the analysis following Algorithm 6.3). This observation implies a new polynomial-time algorithm for deciding the finite image property of univariate rational series over .

Next, let us observe that Algorithm 6.3 can be easily modified so that a deterministic equivalent of its input automaton  is constructed whenever  is determinisable. Indeed, if it is found out that 
 for some  in Step 3, then a deterministic equivalent can be constructed as in the case (i) of Proposition 6.1. Otherwise, it follows from our analysis of Step 7 that it can be not only decided there whether 
 is a product of cyclotomic polynomials, but the cyclotomic factors 
 of 
 can actually be determined. If  is found to be determinisable, then the analysis of Algorithm 6.3 implies that 
 for  and a monic polynomial  of degree , both found in Step 4, where  divides 
 for 
 and 
 the constant coefficient of . Thus, 
 divides 
 and a deterministic equivalent of  can be constructed as in the case  of Proposition 6.1.

Corollary 6.9

There is an algorithm that, given a determinisable unary weighted automaton  over  and , computes its deterministic equivalent.

Still using the notation from above, the automaton constructed in this way (in the nontrivial latter case) has  states, where p is at most  for the Landau's function g [38] given for all  by
 In other words, the state complexity of determinisation of unary weighted automata over  is bounded from above by
 We now show that this construction cannot be performed significantly better in general, as at least  states are necessary for determinisation of unary weighted automata over  or, in fact, over . Note that  is also a tight upper bound for the state complexity of determinisation of unary nondeterministic finite automata without weights by the well-known result of M. Chrobak [13], [14].

Proposition 6.10

For all , there exists a determinisable unary weighted automaton 
 over  and  with n states such that the number of states of the smallest equivalent deterministic weighted automaton 
 over  and  is at least .

Proof

Given , let  and 
 with 
 be such that 
. Without loss of generality, assume that 
 and that they are pairwise distinct. Let 
. Then, define 
 by its associated linear representation 
, where ,  is the companion matrix of the polynomial 
, and 
. The automaton 
 is minimal, as the left quotients of 
 by 
 are obviously linearly independent. Thus
 Let 
. As 
 is a factor of , it follows that  whenever  divides 
 for some  and . Now, the smallest  such that  divides 
 is 
, by Theorem 2.9 and irreducibility of the cyclotomic polynomials. Thus,  states for 
 are necessary by Corollary 4.5 and Proposition 5.1, while they are also sufficient by Proposition 6.1. □

7. Examples
We now illustrate the algorithms for deciding determinisability and actual determinisation, developed in the previous section, on a few simple examples.

Example 7.1

The polynomial 
 factorises as 
, where  and 
; the polynomial  has degree  and constant coefficient 
. The companion matrix C of  thus is 
  so that
 
 
  For the characteristic polynomial of the matrix A, we find out that(14)
 Moreover, by calculating the greatest common divisor of  and 
, we see that the roots of  are pairwise distinct. These observations imply that the automaton 
 is determinisable.

Let us also construct the deterministic weighted automaton over  equivalent to 
. Using notation from the discussion preceding Algorithm 6.3, it follows by (14) that , which also implies 
. It follows that  divides 
, which can, of course, be directly checked. As a consequence, 
 is equivalent to a deterministic weighted automaton 
 such that
 where 
,
 
 is the companion matrix of 
, i.e.,
 
 and
 Note also that five states would in fact be sufficient; this is a consequence of the fact that we have limited ourselves to the case when . Abandoning this requirement, we find out that  also divides 
, hence an automaton with five states can be constructed as in Proposition 6.1.

Example 7.2

Let us next consider a unary weighted automaton 
 over  and  with the corresponding linear representation given by 
, where 
, 
,
 
 and 
. The minimal automaton 
 equivalent to 
 then has 
, where 
, 
,
 
 and 
. The automaton 
 is depicted in Fig. 3.

Fig. 3
Download : Download high-res image (19KB)
Download : Download full-size image
Fig. 3. The automaton 
.

Hence, we get 
. The companion matrix C of  is given directly by 
, while
 
 
 The characteristic polynomial of A is 
. Moreover,  is easily found out to have all roots simple. The automaton 
 is determinisable as a result. Finally, similarly as in the previous example, it is straightforward to observe that the automaton 
 admits a deterministic equivalent with six states.

Example 7.3

As a final example, consider the unary weighted automaton 
 over  and  depicted in Fig. 4. That is, 
 with 
, 
,
 
 and 
. This automaton is clearly minimal, while 
 is the companion matrix of the characteristic polynomial 
. There is thus no need to perform minimisation.

Fig. 4
Download : Download high-res image (15KB)
Download : Download full-size image
Fig. 4. The automaton 
.

Now, 
 and
 
 Computing the characteristic polynomial of A gives us 
. However, here we find that 
 is not divisible by any cyclotomic polynomial. We may thus conclude that the automaton 
 is not determinisable.

8. Conclusions
We have proved that the determinisability problem for unary weighted automata over , , and  is decidable, thus confirming in part a conjecture of S. Lombardy and J. Sakarovitch [34, Problem 1]. Algorithm 6.3 that we have proposed for this task uses at most 
 arithmetic operations over  in each its run, where n is the number of states of the input automaton. The determinisability problem is thus decidable in polynomial time. Moreover, the algorithm for deciding determinisability can be easily modified so that a deterministic equivalent of the input automaton is produced on output when possible.

Besides the main results summarised above, we have observed that crisp-determinisability of weighted automata over  can be decided using similar ideas as well. This implies an alternative algorithm for deciding the finite image property for univariate rational series over . We have also seen in Proposition 6.10 that the upper bound on the state complexity of determinisation of unary weighted automata over , implied by the determinisation algorithm described, is “almost tight”.

Two obvious problems remain open, namely the remaining part of [34, Problem 1] – i.e., the decidability of determinisability for weighted automata over  and larger than unary alphabets – and the possible extension of the results of this article to other fields. In addition, findings related to Proposition 6.10 suggest the possibility of studying descriptional complexity of weighted automata over fields in greater depth.