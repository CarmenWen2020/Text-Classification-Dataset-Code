Abstract
Tightly secure signature plays a significant role in the research of cryptography and has been studied extensively in the literature. In this paper, we present a generic construction for tightly-secure signatures from the discrete log (DL) assumption in the existential-unforgeability against key only attacks (EUF-KOA) security model, where the adversary is allowed to obtain only the public key, but not any sample signature. Moreover, the generic construction can also be extended into the multi-user setting with corruptions (MU-C) model. Roughly speaking, given any signature scheme, we can efficiently convert it into a signature scheme that features tight security under the DL assumption in the MU-EUF-KOA-C security model with random oracles. Our transformation shows it is easy to construct a DL-equivalent signature in the EUF-KOA security model, although many known DL-based signatures are not equivalent to DL. If the given signature scheme is key-re-randomizable, the transformed scheme is also key-re-randomizable. Hence, our result provides a supplement to Bader et al.'s work (EUROCRYPT 2016).

Previous
Next 
Keywords
Tightly-secure signature

Generic construction

Discrete log

1. Introduction
Digital signature is one of the fundamental primitives in public key cryptography and the security of signatures is depicted via security models. The security model of digital signatures was first defined by Goldwasseret al. [1] for adaptive chosen-message attacks and then extended by Menezes and Smart [2] in multi-user setting and Bader et al. [3] in multi-user setting with adaptive corruptions of secret keys. A security model for digital signatures normally comprises three parts: a statement of public key(s) to be challenged, a description of adversary's ability, and security goals. For the public key(s) to be challenged, we distinguish single user setting, multi-user setting without corruption (MU), and multi-user setting with corruptions (MU-C). The capabilities of adversary can be classified into key-only attacks (KOA) and chosen-message attacks (CMA). Here, the CMA can be further classified into several types depending on who will select messages and how/when messages will be chosen. In the last part, the two most popular security goals are called key unrecovery (KUR) and existential unforgeability (EUF).1 The most acceptable security goal is EUF, as to break a signature scheme, the adversary is only required to forge a valid signature on some message. There exist six security models associated with EUF. In the following,  denotes security model X implies security model Y. The relationship of security models can be illustrated as follows.


EUF-KOA	⟵	MU-EUF-KOA	⟵	MU-EUF-KOA-C
↑		↑		↑
EUF-CMA	⟵	MU-EUF-CMA	⟵	MU-EUF-CMA-C
The security proof for a proposed scheme under the corresponding security model is a convincing evidence of its security. A reduction-based security proof consists in transforming an attack from an adversary on the proposed scheme into the solution of a presumably hard mathematical problem. In a concrete security reduction, if the adversary can 
-break the proposed scheme (i.e. the adversary  can break the proposed scheme with advantage 
, running in time at most 
), we are able to construct a simulator to 
-solve the underlying hard problem. The gap between the advantage 
 and the advantage 
 is called a reduction loss (denoted by L), and the equation 
 holds. A security reduction is called tight if L is constant, in particular independent of parameters such as the number of corrupted public keys and the number of queried signatures. Otherwise, the reduction is called loose. When the reduction is loose, it has been believed [4], [5], [6], [7], [8], [9] that we must increase the security parameter with additional 
-bit security to compensate for the reduction loss. This will, however, decrease computation and communication efficiency.

The most desirable security reduction is the one that can be tightly programmed under a fundamental hardness assumption, such as the discrete log (DL) assumption, which is the hardest problem among all group-based hard problems. Note that if the underlying hardness assumption is stronger than DL assumption, we also need to increase the security parameter to compensate for the security loss. This is done to ensure that the hardness of breaking the proposed scheme is equivalent to the hardness of solving DL problem.

The standard security model of digital signatures is EUF-CMA. However, it has been found that some signature schemes cannot be proven secure with a tight reduction even in the EUF-KOA security model or in the MU-EUF-KOA-C security model. Paillier and Vergnaud [10] at ASIACRYPT 2005 first applied the EUF-KOA security model to study the security of DL-based signatures, including the Schnorr signature [11], ElGamal-type signatures [12], [13], [14], DSA [15], ECDSA [16] and KCDSA [17]. They proved that these signatures cannot be equivalent to DL. That is, these signature schemes cannot be tightly reduced to the DL problem even in the EUF-KOA security model. The bound of the reduction loss and impossibility of tight reduction for DL-based signatures in the EUF-KOA security model was further studied by Garg et al. [18] at CRYPTO 2008, Seurin [19] at EUROCRYPT 2012, and Fleischhacker et al. [20] at ASIACRYPT 2014.

Since no efficient reduction from the DL problem to forge a DL-based signature is currently known (as pointed out in [18]), Seurin in [19] left an open problem to build an efficient signature scheme with a tight reduction under the DL assumption, or to prove a general impossibility result. So far, there is still no provably secure efficient signature scheme (excluding constructions from one-time signatures) whose security can be derived from DL assumption even in the EUF-KOA security model. Bader et al. [8] at EUROCRYPT 2016 studied several optimal security proofs for digital signatures, and one of them is with regard to digital signatures in the multi-user setting with corruptions. They defined key-re-randomizable signatures where, given a key pair , we can efficiently re-randomize the signing key sk into any valid signing key associated with pk from the key space. While in the single-user setting, for each public key pk there exists a unique signing key. They proved that it is impossible to construct a key-re-randomizable signature scheme with a reduction loss less than N in the multi-user setting with corruptions security model, where N is the number of public keys to be challenged.

Our contributions. In this work, we introduce a simple but feasible approach that can be used to construct tightly-secure signatures. We proposed a generic transformation for tightly-secure signatures from the DL assumption. More precisely, given any signature scheme, we can efficiently transform it into a scheme with tight security under the DL assumption in the MU-EUF-KOA-C security model with random oracles, where the adversary cannot make any signing queries or know any sample of signatures. Furthermore, if the given signature scheme is a key-re-randomizable signature, the converted scheme is still a key-re-randomizable signature. Therefore, our result serves as an important supplement to the work [8] in the KOA security model. One limitation is that our technique is restricted in the EUF-KOA security model only. Although the KOA is the weakest security model, it has been well studied in the literature, especially for analyzing negative results. This work exemplifies that the KOA security model is very special.

Technique overview. Note that a signature is valid or not depends on the verification algorithm of the proposed signature scheme. Therefore, if we embed a hard problem in the public key and define that any signature must also attach the solution to the hard problem in the public key in order to be accepted as a valid signature, we immediately obtain an interesting result that any valid forged signature must contain the solution to the embedded hard problem, which can be the DL problem. This is the core of our transformation.

Let  be a key pair generated by a basic scheme to be transformed and 
 be a signature signed with sk on the message m. Let  be a cyclic group of prime order p, where g generates the group  and the DL problem defined in this group is hard. We set
 where 
 and  are randomly chosen during the key generation, 
, and 
. Here, H is a cryptographic hash function that will be set as a random oracle in the proof. Most importantly, the signature verification algorithm accepts the signature 
 of the message m if (1) 
, (2) 
, and (3) 
 is a valid signature under the public key pk of the basic signature scheme.

The security proof for the transformed scheme in the MU-EUF-KOA-C security model is a little complicated and we explain the sketch of the proof as follows. Given as input a DL problem instance 
, the simulator aims to compute the discrete log a. The simulator in this reduction needs to simulate N public keys for the adversary and allow the adversary to adaptively corrupt any  public keys at most. The simulator simulates each public key independently as follows.

•
Randomly choose R from the output space of H.

•
Randomly choose 
 and generate a key pair .

•
Set  and the two group elements 
 as follows. 
 

•
Return the public key 
.

During the interaction between the simulator and the adversary, if the adversary wants to corrupt the public key 
, the simulator adds  into the hash list of the random oracle and returns the signing key . Therefore, there is no abort for the corruption response. The simulation is correct and indistinguishable from the real scheme when the adversary corrupts the public key first and then makes the corresponding hash query y to the random oracle.

In the simulation, we emphasize that the adversary can also make a hash query on one of 
 to the random oracle before corrupting this public key. However, it requires the adversary to solve the DL problem by itself. Furthermore, as θ is randomly chosen, the adversary cannot distinguish which query will help the simulator solve the hard problem. For any adaptive choice, we have the choice made by the adversary is equal to  with probability 1/2. The simulator can then solve the DL problem by computing 
.

Finally, if the adversary did not make a hash query on one of 
 to the random oracle before corrupting its public key, the simulation is indistinguishable from the real scheme. The adversary will forge a valid signature on the uncorrupted public key 
⁎
⁎
⁎
⁎
⁎
. Similarly, the adversary, who is assumed to know 
⁎
⁎
⁎
, can choose either to query one of 
⁎
⁎
 to the random oracle or to adaptively use one of two in the signature forgery. The former case is the same as above: a hash query will help the simulator solve the DL problem with probability 1/2. The latter contains 
⁎
, which is equal to  with probability 1/2. Therefore, regardless how the adversary corrupts the public key, makes hash queries, and forges a valid signature, the simulator can use either the adversary's hash query or the forged signature to solve the DL problem with probability at least 1/2.

A particular case of key-re-randomizable signatures is key-unique where given a public key, there is only one unique signing key from the key space. It is not hard to verify that if the given basic signature scheme is key-unique, the transformed scheme is also key-unique. This is because only one 
 is valid and it is decided by 
. The transformed scheme, therefore, gives an example to show that in the MU-EUF-KOA-C security model, it is possible to construct a key-re-randomizable signature with tight reduction. With our technique, we can easily obtain DL-equivalent signatures in the EUF-KOA security model without random oracles.

Other related work. There has been a significant number of efficient signature schemes, such as [12], [11], [15], [21], [17], [22], [16], [4], [5], [2], [23], [24], [6], [25], [26], [3], [27], [28], proposed in the literature with a cyclic group or a pairing group. However, only a few of them, such as [12], [11], [16], can be proven secure under the DL assumption in the EUF-CMA security model. This is because forging a valid signature in most of signature schemes under the EUF security model is equivalent to solving a hard problem that is easier than the DL problem. It is therefore impossible to prove security for these signatures under the DL assumption. The security reductions for all known DL-based signatures are loose, as they have to use forking lemma [14] in the security proof where the loss factor is linear in the number of hash queries. Therefore, all known DL-based signatures are not equivalent to the DL problem even in the EUF-KOA security model, which is the weakest security model among all security models for EUF.

Menezes and Smart [2] first considered the security of signatures in the multi-user setting where the adversary is not allowed to corrupt any public keys. However, a tightly-secure signature scheme in the multi-user setting with corruptions remains unknown for more than a decade. It is hard to construct such a tightly-secure signature scheme because the simulations of all previous signature schemes were programmed in a way that the signing key is unknown to the simulator. This approach is not suitable for tightly-secure signatures in the multi-user setting with corruptions, as the adversary can adaptively corrupt public keys but the simulator cannot simulate their signing keys.

The first signature scheme with a tight reduction in the multi-user setting with corruptions was proposed by Bader et al. [3] at TCC 2015 with a novel approach, which is different from previous reductions. In Bader et al.'s signature scheme, the public key consists of two basic public keys 
 and the signing key used in the signature generation is 
 only, where  is randomly chosen and also secret. Each signature is encrypted with the help of a zero-knowledge proof, where the real basic signing key 
 is always unknown to all verifiers. Such a signature scheme can be programmed with a tight reduction because the simulation is completed in a way that one of the basic signing keys is known by the simulator and another one is unknown to the simulator. In the simulated scheme, the simulator sets the known one as the signing key 
 and therefore can respond to corruption queries. The adversary, however, does not know which basic signing key (either 
 or 
) is the real signing key in the uncorrupted public key and will adaptively use one of them to forge a signature. With probability 1/2, the forged signature is generated using the unknown basic signing key. Then, the simulator decrypts the signature from the zero-knowledge proof in the forged signature and extracts the solution to the hard problem.

Bader et al. [8] observed that the signature scheme in [3] can be programmed with a tight reduction because a public key has more than one signing key and only part of signing keys are known to the simulator. Intuitively, if the signing keys of a public key are either all known or all unknown to the simulator, it seems impossible to obtain a tight reduction because the adversary can adaptively corrupt this public key or forge a signature under it in the MU-EUF-KOA-C security model. Therefore, the authors in [8] defined key-re-randomizable signatures to capture this “either-or” property and proved the impossibility of tightly-secure key-re-randomizable signatures.

Kiltz et al. [7] studied optimal security proofs for digital signatures from identification schemes. Their analysis was done in small steps via intermediate security notions with an optimal reduction in terms of model assumptions and tightness. They also proved that the reduction loss cannot be avoided even in the KOA security model for identifications. Guo et al. [27] showed how to construct a tightly-secure unique signature scheme with a small reduction loss under the CDH assumption in the EUF-CMA security model, which bypasses the impossibility of tightly-secure unique signatures proved in [29], [30], [8]. The core of their approach is the adoption of computationally inefficient hash queries. The adversary must make computationally inefficient hash queries to the random oracle in order to forge a valid signature and one of them is the solution to the hard problem. Later, this methodology was applied to construct tightly-secure and short unique signatures from RSA by Shacham [31], where n block RSA signatures can be sequentially aggregated without affecting the verification.

Gjøsteen et al. [32] provided the first tightly-secure signature scheme under MU-EUF-CMA-C security model without bilinear maps under the CDH and DDH assumptions. Their scheme utilizes the Fiat-Shamir approach to construct tightly-secure signatures from certain identification schemes. Khalili et al. [33] focused on tightly-secure structure-preserving signatures with bilinear group in the standard model under the SXDH assumption. While their construction does not consider the multi-user setting. Zhang et al. [34] presented a generic construction of tightly-secure signatures in the MU-EUF-CMA security model based on the hardness of some subset membership problems.

2. Digital signatures
In this section, we recall the definition of digital signatures and the corresponding security models in the multi-user setting.

Definition 1 Digital Signatures

A digital signature scheme  consists of the following four algorithms:

•
: On input a security parameter 
, the public parameter generation algorithm outputs the public parameters 
, defining the shared parameters for all users, the message space , signature space , and key space .

•
: On input the public parameter 
, the key generation algorithm outputs a public and signing key pair .

•
: On input the public parameter 
, a signing key SK, and a message , the signing algorithm outputs a signature 
 for the message m.

•
: On input the public parameter 
, a public key PK, a message m, and a signature 
, the verification algorithm accepts or rejects the signature.

Definition 2 Key Check Algorithm

Suppose 
 generates the public parameter 
 of signature scheme , we define an additional deterministic algorithm, named key check algorithm . On input the public parameter 
 and a public and signing key pair , it outputs “1” if the key pair is valid and generated from , i.e. 
. Otherwise, it outputs “0”.

Definition 3 Key-Re-Randomizable Signatures

We say a signature scheme  is key-re-randomizable if there exists a polynomial algorithm  that runs in time at most t, takes as input a valid public and signing key pair , i.e.
 and outputs a signing key 
 uniformly distributed over the key set  defined as

A key-unique signature is a special case of key-re-randomizable signature, where given a public key, there is only one valid signing key from the key space. For example, if 
 is the public key and 
 is the signing key of a signature scheme, we have that this is a key-unique signature scheme because there is only one integer from 
 equal to the signing key.

Security models of digital signatures. Next, we present the security model of digital signatures in the multi-user setting. The multi-user existential unforgeability against key-only attacks with corruptions (MU-EUF-KOA-C) security model of digital signatures is described as a game played between a challenger  who runs the signature scheme and an adversary  who aims to break it.

•
Setup. The challenger  runs 
 to generate the public parameter 
. Next, it runs 
 to generate N public and signing key pairs 
, 
. Finally, it hands the public parameter and all public keys over to the adversary .

•
Corruption Query. The adversary  can adaptively corrupt any public key received from the challenger. On receiving a corruption query on 
, the challenger returns the corresponding signing key 
 to the adversary .

•
Forgery. The adversary  wins the game if it can output a valid signature 
 on a message for an uncorrupted public key. It is worth noting that if the challenge public key has been corrupted, which means the underlying signing key of the forged signature has been queried in Corruption Query phase and returned to the adversary, the adversary will be able to directly compute any signature for 
 with the signing key as a valid user, not an attacker.

We define the advantage ϵ to be the success probability of winning the above game.

Definition 4

MU-EUF-KOA-C Security
We say that a digital signature scheme SIG is -secure in the MU-EUF-KOA-C security model, if no PPT adversary  who runs in time at most t and makes at most  corruption queries can win the above game with advantage greater than ϵ.

Definition 5

MU-EUF-KOA Security
We say that a digital signature scheme SIG is -secure in the MU-EUF-KOA (multi-user existential unforgeability against key-only attacks without corruption) security model, if the scheme is -secure in the MU-EUF-KOA-C security model.

3. Generic transformation
In this section, we show how to transform any signature scheme into a DL-equivalent signature scheme in the MU-EUF-KOA-C security model. The converted scheme is tightly-secure under the DL assumption.

Generic construction. Let 
 be the basic scheme to be transformed, and the scheme after transformation be  . Our transformation requires an additional cyclic group whose DL problem is hard. Let the cyclic group be , where g is a generator of  and p is prime order of the group. The details are described as follows.

: Taking as input a security parameter 
, the public parameter generation algorithm runs algorithm 
 to generate the public parameter Π and chooses a cyclic group . Additionally, it chooses a cryptographic hash function 
⁎
. It returns the public parameter

: Taking as input the public parameter 
, the key generation algorithm runs algorithm  to generate a public key and signing key pair . Then it randomly picks 
 and computes 
. It returns the public and signing key pair as
 As defined above, the public/signing key pair of the converted signature scheme ,  include that of the original signature scheme . It is a natural extension that if the original scheme 
 is a key-re-randomizable signature scheme, the converted signature scheme will also be key-re-randomizable.

: Taking as input 
, and a message m to be signed from the message space defined in the basic scheme, the signing algorithm sets 
 and runs algorithm  to generate the signature 
. It returns the signature 
 as

: Taking as input 
, and a signature 
 to be verified, the verification algorithm accepts the signature 
 if (1) 
, (2) 
, and (3) algorithm 
 accepts 
.

Theorem 1

Suppose H is a random oracle. If the DL assumption is 
-secure, then the proposed signature scheme is -secure in the MU-EUF-KOA-C security model, where

Proof

Suppose there exists an adversary  who can break our proposed signature scheme with  in the MU-EUF-KOA-C security model. We show how to construct a simulator  to solve the DL problem with approximate .  takes a random DL problem instance 
 from the cyclic group  as input and its goal is to compute a. The simulator controls the random oracle H and interacts with the adversary as follows.

Setup. The simulator first runs the  algorithm to generate the public parameter 
. Next, it runs the  algorithm of the basic scheme N times to obtain N public and signing key pairs of the basic scheme 
, 
.

•
Pick a random string 
 and sets 
.

•
Pick random integers 
 and set 
 as follows. 
 

•
Set 
.

The simulator returns the public parameter 
 and N public keys
 to the adversary. Here the hash function H is set as a random oracle controlled by the simulator.
Hash query. The simulator maintains a hash list 
, which is initially empty. On receiving a hash query on w, the simulator first checks whether the hash list already contains a pair . If yes, it responds to this query with z. Otherwise, the simulator works as follows.

•
If 
 for some , then the simulator aborts the simulation and outputs 
 as the solution to the DL problem;

•
If 
 for some , then the simulator aborts;

•
Otherwise, the simulator randomly chooses 
, returns z to the adversary, and adds  into the hash list 
.

Corruption query. The adversary can adaptively query the signing key (at most ) of any public key in the set 
, 
, 
. For the corruption query on 
, the simulator responds with 
 as follows according to the integer 
.

•
If 
, we have 
. The simulator sets 
 and adds
 into the hash list 
. In this case, we have 
 for 
.

•
If 
, we have 
. The simulator sets 
 and adds
 into the hash list 
. In this case, we have 
 for 
.

According to the simulation, the simulator can simulate the responses to corruption queries without an abort.
Forgery. The adversary returns a forged signature 
 of a message that was signed with the uncorrupted public key 
⁎
. We implicitly set the underlying signing key of 
⁎
 to be 
⁎
. Let the public key be 
⁎
⁎
⁎
⁎
⁎
 which was generated with 
⁎
. If the signature is valid and 
⁎
⁎
, the simulator can solve the DL problem by computing 
⁎
 as the solution. Otherwise, the simulator aborts.

This completes the description of the simulation and solution process. Note that the simulator uses a hash query or the forged signature from the adversary to solve the DL problem. Next, we analyze the advantage of the simulator in solving the DL problem.

In the above responses to the hash queries, if the adversary first corrupts a public key 
 to get 
 and then makes a hash query on 
 to the random oracle, the query is already in the hash list (added during the corruption phase) and it is not a new hash query. Otherwise, if the adversary first queries w to the random oracle before corrupting the public key 
 where 
, it is easy to see that the adversary must first break the public key (i.e. solve the discrete log problem 
 to obtain w) and then make the query w to the random oracle.

Before analyzing our proof, we discuss what will happen associated with the public key 
 that has not yet been corrupted, where 
. Note that the signing key is not determined. If the adversary queries 
 to the random oracle, the simulator can immediately solve the DL problem. We call this is a good event. Otherwise, the adversary makes the query on 
. We define it as a bad event. Since θ is randomly chosen from  and it is unknown to the adversary, we have that if either a good or a bad event occurs, the good event occurs with probability 1/2. Note that if the simulator never makes a hash query on w for 
 before the corruption, neither the good event nor the bad event will occur.

Next, we analyze what will happen if neither the good event nor the bad event will occur. In that case, the simulation is indistinguishable from the real scheme. In particular, the adversary cannot distinguish the simulation from the real scheme via 
, which are correctly simulated.

The simulation is now indistinguishable from the real scheme according to the assumption at the beginning of the proof. In this case, the adversary will break the signature scheme with advantage ϵ. That is, the adversary should return a valid forged signature for the uncorrupted public key 
⁎
. The corresponding signing key of 
⁎
 is 
⁎
⁎
⁎
. The forged signature requires the adversary to recover 
⁎
. However, the uncorrupted public key is 
⁎
⁎
⁎
⁎
⁎
 where 
⁎
 is uniformly random. The adversary cannot decide whether 
⁎
 or 
⁎
 should be set as 
 in the forged signature. Suppose the adversary has known 
⁎
⁎
. It has the following two different approaches to forge a valid signature.

1.
The adversary makes hash queries to the random oracle to find either 
⁎
 or 
⁎
 should be set as 
. In this case, without corruption, we have that there is at least a new hash query 
⁎
⁎
 to the random oracle, and hence the good event will occur with success probability 
 
.

2.
The adversary adaptively guesses the signing key 
⁎
⁎
⁎
⁎
⁎
, 
⁎
⁎
 and uses the guessed signing key to generate the forged signature. In this case, we have the forged signature 
 contains 
 which is the discrete log of one of 
⁎
⁎
. Since one of 
⁎
⁎
 is randomly set with exponent equal to 
⁎
 and it is unknown to the adversary, we therefore have 
⁎
 with probability 1/2. The simulator then computes 
⁎
 as the solution to the DL problem.

Therefore, it does not matter how the adversary corrupts the public keys, makes hash queries, and generates the forged signature, the simulator can solve the DL problem with probability at least . The reduction loss, therefore, is 2. This completes the proof of Theorem 1. As analyzed in the generic construction, if the original signature scheme is key-re-randomizable, the converted signature scheme using the proposed generic construction will also be key-re-randomizable. We can, therefore, claim that a key-re-randomizable signature scheme with a reduction loss less than N in the multi-user with corruptions setting is possible under the EUF-KOA security model. □

By converting the original signature scheme 
 to a DL-equivalent signature, our generic construction ,  achieves tight security under the MU-EUF-KOA-C security model with random oracle. The correspondingly added parameters and increased computation costs are analyzed as below.

•
In the public parameter generation algorithm SIG.Setup, there are three additional parameters  and an additional cryptographic hash function 
⁎
, where  is a cyclic group with prime order p and g is a generator of . In many schemes, actually, the public parameter generation algorithm  will contain a cyclic group . In such a case, we only have to add one more cryptographic hash function H which is set as the oracle in our security proof.

•
In the key generation algorithm SIG.KeyGen, there are three additional parameters 
 for public key pk and one more parameter 
 for signing key sk, where 
, 
. This also implies the public key generation needs two more exponential computations 
. Since the key generation only perform once for each user, the additional overhead in this phase is acceptable.

•
In the signing algorithm SIG.Sign, there is only one additional parameter 
 and no additional computation cost.

•
In the verification algorithm SIG.Vfy, there are an additional hash computation 
 and one more exponential computation 
.

As shown above, our generic construction realizes the tight security under the MU-EUF-KOA-C security model by sacrificing relatively few computation efficiency.
4. Conclusion
We demonstrated how to use the feature of key-only attacks in the security model for digital signatures to propose a simple generic transformation for any signature scheme, such that the security of the transformed scheme is equivalent to solving the DL problem in the MU-EUF-KOA-C security model with random oracles. The proposed signature scheme from our transformation is an important supplement to the development of DL-equivalent signatures. Our result shows that the KOA security model has a very unique feature and we can utilize this special feature to construct DL-equivalent signatures in the KOA security model.