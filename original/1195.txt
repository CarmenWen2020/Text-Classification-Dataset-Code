Abstract
Calculating the “distance” between two given objects with respect to a designated “editing” operation is a hot research area in bioinformatics, where the “distance” is always defined as the minimum number of the “editing” operations required to transform one object into the other one. One of the famous problems in the area is the Minimum Common String Partition problem, which is the simplified variant of the Minimum Tree Cut/Paste Distance problem. Within the paper, we consider another simplified variant of the Minimum Tree Cut/Paste Distance problem, named Tree Assembly problem, of which the edge-deletion operations are specified. More specifically, the Tree Assembly problem aims to transform a given forest into a given tree by edge-addition operations only. In our investigations, we present a fixed-parameter algorithm with runtime  for the Tree Assembly problem, where k is the number of trees in the given forest, and n is the number of nodes in the given tree and forest. Additionally, we give a polynomial time algorithm for a restricted variant of the problem.
Keywords
Tree Assembly problem
Fixed-parameter algorithm
Tree editing distance
Subforest isomorphism
1. Introduction
The Subgraph Isomorphism problem is a classical decision problem in the area of theoretical computer science, where its input comprises two graphs H and G, and the goal is to decide whether H is a subgraph of G. As we know, a plenty of well-known NP-hard problems are restricted versions of the problem, such as the k-clique problem, which decides if there exists a complete graph with at least k vertices in G. The Subgraph Isomorphism problem remains NP-hard on many constrained graph classes [2], [3], [4], and even some of them are quite specific, e.g., H is a tree and G is a graph of tree-width two, and at most one node in either of them has degree larger than three [5]. Within the paper, we consider a variant of the Subgraph Isomorphism problem, where H is forest and G is a tree, and they have the same number of nodes. Note that if H is further restricted to a tree, then the problem is actually the Tree Isomorphism problem, which can be solved in linear runtime [6]. However, if H is a forest, then the problem becomes NP-complete even if each tree in H is a path (or star) [7], [8]. Additionally, You et al. [9] showed that when H comprises a collection of paths (or stars), the problem is fixed-parameter tractable by the number of trees in H. A problem is fixed-parameter tractable (FPT) by a parameter k, if it admits an algorithm with runtime 
 for some function f depending on k only [10].

Given a forest F and a tree T, the Tree Assembly (TA) problem studied in the paper asks whether a tree that is isomorphic to T can be obtained by assembling the trees in F together with k edge-addition operations. It is easy to see that k is exactly the number of trees in F minus one; in this sense, the problem is not an optimization problem, but a decision problem. One closely related problem is the Minimum Tree Cut/Paste Distance problem [8], which considers two trees 
 and 
 and aims to use the minimum number of edge-deletion and edge-addition operations to transform 
 into 
. By a quick inspection on the definition, the TA problem is indeed the processed Minimum Tree Cut/Paste Distance problem, of which all edge-deletion operations are specified. You et al. [11] showed that the Minimum Common String Partition problem [12], [13] (its formulation can be found in the next paragraph) is also a restricted variant of the Minimum Tree Cut/Paste Distance problem, which has been shown to be FPT by the partition size [12]. However, whether the Minimum Tree Cut/Paste Distance problem is FPT, is unknown so far. Thus we believe that the research on the TA problem can impel the work on the fixed-parameter tractability of the Minimum Tree Cut/Paste Distance problem.

Regarding the Minimum Common String Partition problem, the input consists of two strings (note that each character has the same number of occurrences in the two input strings), and it asks whether we can use at most 2k “string-cut” operations (at most k operations on each string) to make them become the same collection of substrings. The problem remains NP-hard, even if one of the two strings has already been cut into substrings, which is called the Exact Block Cover problem [14]: Given a string X and a collection of k substrings, it asks whether the k substrings can form a string that is identical with X. Jiang et al. [14] gave a fixed-parameter algorithm with runtime 
⁎
 for the problem. Again, the reduction due to You et al. [11] indicates that the TA problem considered in the paper is a generalization of the Exact Block Cover problem. This inspires us to check whether the dynamic programming algorithm proposed by Jiang et al. [14] for the Exact Block Cover problem can solve the TA problem directly. Observe that their algorithm heavily relies on the fact that the way to joint two substrings is unique if their oder is known. However, it obviously does not hold for two trees even if their parent-child relationship is known (more specifically, the number of ways to connect two trees cannot be upper bounded by a constant as the numbers of nodes in them cannot be upper bounded). Thus their algorithm cannot solve the TA problem. Fortunately, a simple reduction rule that can downsize the scales of the considered trees is observed. Based on this, we successfully give a fixed-parameter algorithm with runtime 
 for the TA problem in the present paper, where k is the number of trees in F, and n is the size of the input (more specifically, the number of nodes in F and T of the considered instance ), showing that the problem is FPT by the number of trees in F.

Baumbach et al. [7] showed that if F consists only of stars, and the number of different stars can be bounded by a constant, then the TA problem is polynomial time solvable. Hence, it is natural to consider whether the TA problem is polynomial time solvable if the types of trees in F are limited. However, this is not easy to answer: Let F consist of a set of paths and T be a spider tree (only one internal node can have degree larger than 2, and the path from each leaf to the internal node has at least one edge), then the problem is a variant of the Bin-packing problem [15], where the number of different volumes can be bounded by a constant. In the present paper, we also consider a restricted variant of the TA problem, named Level-2 -Tree Assembly problem (L2--TA problem), where the forest F of the considered instance  comprises two kinds of trees, called A-tree and B-tree, and F has exactly one A-tree and k B-trees. The problem is to decide whether the k B-trees can be attached to the A-tree by k edge-addition operations such that the obtained tree is isomorphic to T. This variant has many restrictions, however, the algorithm proposed in our paper with polynomial runtime 
 for it is surprisingly tricky, where n is the number of nodes in F and T, and it closely relies on a known algorithm for the Maximum Common Subtree Isomorphism problem.

It is worthy to point out again that our investigation on the TA problem gives a theoretical support to the study of many practical problems arising in the area of engineering, such as the Structured Query Language (SQL) Comparison, which has been extensively used in cost optimization of calculation platforms and in code acceleration. An efficient way to compare two SQL statements is to analyze the structural similarity between their corresponding abstract syntax trees (ASTs) [16], where an AST represents the abstract syntactic structure of an SQL statement. Observe the fact that given two SQL statements, if they compute identical results, then anyone of their corresponding ASTs T can be transformed into the other one 
 by edge-edition operations. Moreover, an SQL statement can be divided into several unit SQL statements (each unit SQL statement is a simplest query consisting of selecting items and a single source table, thus it corresponds to an AST that is a subtree of the AST corresponding to the complete SQL statement). As a result, the task to decide the identity between two SQL statements S and 
 can be transformed to the decision of whether the ASTs for the unit SQL statements of S can be assembled as the AST for 
, which is the same as the formulation of the TA problem. Note that some nodes and edges in AST have specific labels, where the setting is different from that of the forest and the tree considered in the TA problem (more specifically, they have no labels), but our proposed solving method can give a hint to design efficient ways to compare ASTs.

2. Preliminary
A tree T is rooted if there is a unique ancestor-descendant relationship defined in the tree, and with respect to which there is exactly one common ancestor for all its nodes, where the common ancestor is called the root of the tree. More specifically, a node u is an ancestor of a node v (or v is a descendant of u) if u is visited by the path from the root of T to v; in this sense, v is an ancestor (or descendant) of itself. All trees considered in the paper are rooted. Denote by  and  the node set and edge set of T, respectively, where  is the size of T, marked as . An edge e of T is denoted by a node pair , where u and v are the endpoints of e, and u is an ancestor of v. For any subset ,  denotes the induced subforest of T comprising all nodes of U and all edges with both endpoints in U. In particular,  is a subtree of T if  is connected. For a node v in , denote by 
 the number of edges incident to v in T, which is called the degree of v in T; by 
 the set of descendants that are adjacent to v (i.e., the children of v); and by  the pendant subtree rooted at v, which is induced by all descendants of v in T. Denote by  the tree obtained by removing all nodes in  and the incident edges from T. A rooted tree 
 with root 
 is isomorphic to another tree 
 with root 
, denoted by 
, if there is a bijection Φ from 
 to 
 such that 
 is an edge of 
 if and only if 
 is an edge of 
, and 
. All forests considered in the paper are rooted, where a forest is rooted if all its trees are rooted. Similarly, denote by  and  the node set and edge set of F, respectively, by  the number of trees, and by  the number of nodes in F. For two vertex-disjointed forests 
 and 
, 
 denotes the forest consisting of all the trees in 
 and 
. For a forest F and an edge-set E with ,  denotes the graph obtained by adding the edges of E into F. For a forest F and a vertex , let , where T is the tree in F that contains v.

Given two nodes u and v of 
 and 
, respectively, an attach operation on u and v adds a new edge between u and v into the resulting tree. As the resulting tree should be rooted, the additional edge between u and v is required to claim an ancestor-descendant relationship. W.l.o.g., assume that u is an ancestor of v, and then, we say that 
 is attached to 
. Obviously, v should be the root of 
; otherwise, there is no common ancestor in the resulting tree. It is necessary to point out that u can be any node in 
. An attaching approach for some forest F is a set of  edges, with which one can assemble the trees in F as a tree by the corresponding  attach operations. Let 
 be the resulting tree for some attaching approach 
 of F. For any two trees 
 and 
 of F, if the path, from the root of 
 to that of 
, visits the root of 
, then we say that 
 is attached below 
 with respect to 
. Precisely, 
 is attached to 
 if 
 is below 
 and no other root is visited by the path from the root of 
 to that of 
 in 
.

The parameterized version of the Tree Assembly problem considered in the paper is formally given as follows.

Tree Assembly problem (TA problem)

Input: A (rooted) forest F and a (rooted) target tree 
⁎
 with 
⁎
;

Parameter: ;

Output: Return yes if there is an attaching approach 
 making 
⁎
; otherwise, return no.

An attaching approach 
 of F is of level-2, if there is a tree T in F such that all the other trees are attached to it with respect to 
, where T is called the top subtree with respect to 
. Next we define a restricted variant of the TA problem as follows, where the considered forest F consists of two kinds of trees, denoted by A-tree and B-tree (i.e., every tree in F is a copy of the A-tree or B-tree). Note that as the considered forest F is rooted, both the A-tree and B-tree are rooted.

Level-2 -Tree Assembly problem (L2--TA problem)

Input: A (rooted) forest F comprising one copy of the A-tree and k copies of

 the B-tree, and a (rooted) target tree 
⁎
 with 
⁎
;

Output: Return yes if there is a level-2 attaching approach 
 making 
⁎
, where the top subtree

 with respect to 
 is an A-tree; otherwise, return no.

3. An FPT algorithm for the TA problem
Given two (rooted) trees with size n, we have the critical lemma given below (for more details, please refer to pp. 84-85 in [6]). Thus given an instance 
⁎
 of the TA problem, if , then it is easy to derive whether 
⁎
 is yes.

Lemma 3.1

(Aho and Hopcroft [6]) It takes runtime  to decide whether or not two rooted trees with size n are isomorphic.

3.1. Simple observations
In the following discussion, we assume that 
⁎
 is yes and . That is, there is an attaching approach 
 making 
⁎
, which we call a feasible attaching approach for 
⁎
. Meanwhile, the feasible attaching approach 
 implies a bijection Φ from  to 
⁎
 such that if 
 is an edge of F then 
 is an edge of 
⁎
. Remark that in the remaining text, we also simply say that  is the image of v (or v maps to ) with respect to Φ or 
. Conversely, v is the pre-image of  with respect to Φ or 
.

Let v be a node of a tree T in F that maps to 
⁎
⁎
 with respect to Φ. Observe that 
⁎
⁎
; otherwise, we have a contradiction to the assumption that 
⁎
 is yes. For the children of v and 
⁎
, we have the following two propositions.

Proposition 3.2

Each node in 
 maps to one in 
⁎
⁎
 with respect to Φ.

Proof

Assume, for contrary, that a node 
 maps to some 
⁎
⁎
⁎
. Then there is an edge  between v and c, whereas there is no edge 
⁎
 between 
⁎
 and 
, which contradicts the definition of Φ. □

Proposition 3.3

If there are two nodes 
 and 
⁎
⁎
⁎
 satisfying that 
⁎
⁎
, then there is a feasible attaching approach for 
⁎
, with respect to which the nodes in  map to those in 
⁎
⁎
.

Proof

By Proposition 3.2, Φ maps 
 to some node in 
⁎
⁎
. If it is 
⁎
, then the proof is over. Hence in the following discussion, we assume that the image of c with respect to Φ is 
⁎
⁎
⁎
⁎
. Observe that the pre-image 
 of 
⁎
 with respect to Φ may be a node in 
, or the root of a tree 
 in F except T (as 
 may be attached to the root v of T with respect to 
). An illustration for the case that 
 can be found in Fig. 1.

Fig. 1
Download : Download high-res image (40KB)
Download : Download full-size image
Fig. 1. The mapping relation given in the proof of Proposition 3.3 for the case that c1 ∈ CT(v)∖{c}. The left solid box represents the forest F, in which the dashed one represents the tree T. The right solid box represents the target tree T⁎. The solid thick line from c1 to c⁎ represents the bijection from c1 to c⁎ with respect to Φ, which applies to the one from c to 
⁎
. The dashed thick line from c to c⁎ represents the bijection from c to c⁎ with respect to Φ′.

Let 
⁎
 be the set of pre-images of nodes in 
⁎
⁎
, and 
⁎
 be the set of images of nodes in , i.e., 
⁎
⁎
⁎
 and 
⁎
. Observe that 
⁎
 and 
⁎
⁎
⁎
.

Now we verify the existence of the claimed bijection 
⁎
 from  to 
⁎
 as follows, with respect to which the nodes in  are mapped to those of 
⁎
⁎
. Let 
 be an isomorphism from  to 
⁎
⁎
. Firstly, for each node 
⁎
, we set 
⁎
. Secondly, for each node 
⁎
 with 
, where  and 
⁎
⁎
, we set 
⁎
, i.e.,
⁎
 Finally, we set 
⁎
 for each node .

Now we argue that if  is an edge in F (note that x is an ancestor of y), then 
⁎
⁎
 is an edge in 
⁎
. Case (1). Neither x nor y is in 
⁎
. Then 
⁎
⁎
, thus it is an edge in 
⁎
. Case (2). Nodes x and y are in the same tree of 
⁎
. If x and y are in , then 
⁎
⁎
, implying 
⁎
⁎
 is an edge in 
⁎
⁎
. If x and y are in the same tree of 
⁎
, then  is an edge in 
⁎
⁎
, and 
 is an edge in , implying that
⁎
⁎
 is an edge in 
⁎
⁎
. Case (3). Only y is in 
⁎
. Then x has to be v, and y is a child of v. If y is 
 (note that 
 is a node of 
 under this case), then 
⁎
⁎
⁎
⁎
; if y is c, 
⁎
⁎
⁎
⁎
. Remark that if only x is in 
⁎
, then y is not in the same tree with x in F, implying that  is not an edge in F. Thus it is unnecessary to consider the case that only x is in 
⁎
. Summarizing the above analysis gives that 
⁎
⁎
 is always an edge in 
⁎
.

Based on the above conclusion, it is easy to find that 
 is a feasible attaching approach for 
⁎
 with respect to which the nodes in  map to those in 
⁎
⁎
, where 
 contains all the edges 
 such that 
 is not in F but 
⁎
⁎
 is in 
⁎
. The proof is done. □

With respect to the feasible attaching approach 
 for the instance 
⁎
, an auxiliary (rooted) tree  can be constructed, where each node  corresponds to a unique tree in F, which is marked as 
, and  has an edge 
 if and only if 
 contains an edge with endpoints in 
 and 
, respectively. The auxiliary tree  can be regarded as the “skeleton” of 
⁎
, and it specifies the ancestor-descendant relationship among the trees in F with respect to 
.

Lemma 3.4

A set with 
 many trees can be constructed that contains the auxiliary tree  for 
⁎
 with respect to 
.

Proof

Although the feasible attaching approach 
 for the instance 
⁎
 is unknown, we have that the auxiliary rooted tree  with respect to 
 has exactly k nodes (as ). That is,  is certainly in the set S containing all rooted trees with size k, where the cardinality of S can be bounded by 
. □

Suppose that we have found the auxiliary tree  for the instance 
⁎
 with respect to 
. Let γ and 
⁎
 be the roots of  and 
⁎
, respectively, and 
 and 
⁎
⁎
. Let r be the root of 
 (recall that 
 is the tree in F that corresponds to the node γ in ), and 
. Observe that r maps to 
⁎
 with respect to 
, and . Please refer to Fig. 2. By Proposition 3.3, we have the following reduction rule.

Fig. 2
Download : Download high-res image (49KB)
Download : Download full-size image
Fig. 2. The top left solid box represents the forest F, and the top right one represents the target tree T⁎. The tree located at the bottom is the auxiliary tree  with respect to a feasible attaching approach E+ for (F,T⁎). Observe that for the root γ of , the root r of its corresponding tree Bγ in F maps to the root r⁎ of T⁎.

Rule 1

For any 
 of 
 with , if there is a child u of 
⁎
 satisfying that 
⁎
, then remove all nodes of 
 and 
⁎
 from F and 
⁎
, respectively.

Lemma 3.5

If 
⁎
 is yes with respect to , and Rule 1 is not applicable on 
⁎
, then , where 
⁎
⁎
, 
, and .

Proof

By the definition of , r maps to 
⁎
, and the image of each tree in 
 is either 
⁎
 or a subtree of 
⁎
 for some . Suppose that , where h is the number of children of γ in  (i.e., there are h trees of 
 that are attached to 
). Thus 
⁎
 has a child u such that 
⁎
 contains no image of any of the h trees and then no image of the  trees in 
. As a result, r has some child v satisfying that 
 is isomorphic to 
⁎
, which leads to a contradiction to the fact that Rule 1 is not applicable on 
⁎
. □

Now a new reduction rule is given for 
⁎
, on which Rule 1 is assumed to be not applicable.

Rule 2

If 
 and 
⁎
⁎
, then remove the nodes r and 
⁎
 from F and 
⁎
, respectively; if 
 and 
⁎
⁎
, then remove the nodes r, 
⁎
, and γ from F, 
⁎
, and , respectively.

Note that 
 and 
⁎
⁎
 cannot be 0 at the same time, as F was assumed to have at least two trees at the beginning of Subsection 3.1 (by Lemma 3.1).

Lemma 3.6

For the instance 
 and auxiliary tree 
 obtained by an application of Rule 2 on 
⁎
, 
 is yes with respect to 
 if and only if 
⁎
 is yes with respect to .

Proof

Consider the case that both 
 and 
⁎
⁎
 equal 1 firstly. Since r maps to 
⁎
 with respect to Φ, the unique child of r maps to that of 
⁎
 with respect to Φ as well, and the mapping relation between r and 
⁎
 would not be considered anymore in the remaining analysis. Thus r and 
⁎
 can be safely removed to reduce the instance size. Meanwhile, as the tree 
 in F containing r also has some other nodes except r, the removal of r does not eliminate the tree. Therefore, the root γ of the auxiliary tree  corresponding to 
 is not removed.

If 
 and 
⁎
⁎
, then 
 contains only the node r, exactly one of the  trees in 
 is attached to r, and γ has exactly one child β in . It is easy to see that the root of the tree 
 corresponding to β maps to the unique child of 
⁎
 with respect to Φ. Thus we can safely remove the nodes r, 
⁎
, and γ from F, 
⁎
, and , respectively. □

3.2. Constructing sub-instances by orderings
Now we assume that both Rule 1 and Rule 2 are not applicable on the instance 
⁎
. Thus the values of q and p do not meet the cases given in Rule 2, and for each child v of r, there is at least one tree in 
 that is attached to some node of 
 with respect to the feasible attaching approach 
 for 
⁎
. In the following, we present a way to find the trees in 
 that are attached below 
 and the node in 
⁎
⁎
 that is the image of v with respect to 
, based on the orderings of the children of r, 
⁎
, and γ.

We first fix an arbitrary ordering for the children of r, 
, where  by Lemma 3.5. Consider the following notion that is critical for the next lemma. An ordering of the children 
 of 
⁎
 is adjusted if the nodes in 
 are always on the left of 
⁎
⁎
 (recall that Φ is a bijection from  to 
⁎
 specified by 
).

Lemma 3.7

If 
⁎
 is yes, then there exists an adjusted ordering 
 for the children of 
⁎
 and an ordering 
 for the children of γ satisfying the following two properties:

(1)
 for all ;

(2)
A partition 
 for 
 can be found in polynomial time such that for each node 
 of , where w is in 
 (for any ), the images of the nodes in 
 are in 
⁎
 with respect to Φ.

Proof

As 
⁎
 is yes, for the fixed ordering for the children of r, there is an adjusted ordering 
 for the children of 
⁎
 satisfying Property (1). Note that although Φ is unknown so far, the ordering ρ can be found by enumerating all possible orderings of the p children of 
⁎
.

Now we consider Property (2). Combining the definition of  and the fact 
⁎
 is yes, we have that for any child w of γ, the image of 
 is a subtree in some 
⁎
 (). Moreover, for every node 
 in , the image of 
 is as well a subtree in 
⁎
. Additionally, there may be more than one child of γ such that their images are in the same 
⁎
 (as there may be more than one tree in 
 that are attached to the same  for some child v of r). Hence, there is an ordering 
 for the children of γ such that all nodes 
 with the image of 
 in 
⁎
 are consecutive in σ; moreover, these consecutive nodes form a group of the partition , and the ordering of the groups corresponds to that of 
. Now we present a way to find the partition for 
.

By the discussion given above, if 
⁎
 is yes, then there are p disjoint index intervals 
 satisfying that for any  (recall that ),
  
 
⁎
 If , then the proof is done. Otherwise, for any , 
 and 
  
 
⁎
 Note that for , 
 is attached to r, where 
. It is easy to verify that the p index intervals form a partition  for the nodes in σ, and they can be easily found in polynomial time based on the correct orderings of the children of 
⁎
 and γ (recall that we have assumed that the considered auxiliary tree  is correct with respect to the feasible attaching approach 
). □

Assume that we have gotten a partition  for nodes 
 with respect to two “correct” orderings σ and ρ. Now we are ready to divide the instance 
⁎
 into p sub-instances as follows.

(1)
For each , let 
, and 
⁎
⁎
. The auxiliary tree 
 for 
⁎
 can be obtained by attaching every  with 
 to a new root 
, where the tree 
 corresponding to 
 is 
.

(2)
For each , let 
 and 
⁎
⁎
. The auxiliary tree 
 for 
⁎
 is 
, where 
.

By the above construction of the sub-instances, it is not hard to see that the forest 
 of the sub-instance 
⁎
 has at least two trees if ; otherwise (i.e., ), at least one tree. By Lemma 3.7, we have the following lemma.

Lemma 3.8

The instance 
⁎
 is yes with respect to the auxiliary tree  if and only if for all , the sub-instance 
⁎
 is yes with respect to the auxiliary tree 
.

Proof

If 
⁎
 is yes, then by Lemma 3.7, all the p sub-instances constructed above are yes. On the other hand, if all the p sub-instances are yes, then we have p bijections 
. Combining these together, we have a mapping from  to 
⁎
⁎
. As we know, r is mapped to 
⁎
. Therefore, 
⁎
 is yes. □

3.3. Algorithm presentation
Now we show that the TA problem is FPT. More specifically, we first give an algorithm Alg-TA (please refer to Fig. 3) to decide whether the input instance 
⁎
 of the TA problem is yes with respect to the input auxiliary tree  for 
⁎
 (i.e., the input of Alg-TA contains an instance of the TA problem and an auxiliary tree for it) and show its time complexity can be bounded by 
 for some function g depending on k only. Then combining the conclusion with the fact that the correct auxiliary tree for 
⁎
 can be found in runtime 
 if 
⁎
 is yes (by Lemma 3.4), we can derive that the TA problem is FPT.

Fig. 3
Download : Download high-res image (153KB)
Download : Download full-size image
Fig. 3. The algorithm for the TA problem with a given auxiliary tree.

Theorem 3.9

There exists an algorithm with runtime 
 that can decide whether or not a given instance 
⁎
 of the TA problem is yes, where  and n is the number of nodes in F and 
⁎
.

Proof

By Lemma 3.4, if 
⁎
 is yes then we can obtain an auxiliary tree  in 
 runtime with respect to some feasible attaching approach for 
⁎
. Now we use Fig. 3 for illustration. The correctness of Step 1 is obvious. Proposition 3.3 and Lemma 3.6 show the correctness of Steps 2 and 3, respectively. If 
⁎
 is yes, then by Lemma 3.7, there are orderings for 
 and 
 such that one can find a partition for 
 satisfying the properties given in Lemma 3.7 in polynomial time. The correctness of Step 9 is guaranteed by Lemma 3.8. If the algorithm cannot return yes for all orderings, then Step 10 has to return no.

Now we analyze the runtime of the algorithm. Regarding Step 6, observe that in overall over all recursive calls of the algorithm Alg-TA, Step 6 computes an ordering for the whole auxiliary tree : For each recursive call, Step 6 finds an ordering for the children of a distinct node in . Since  contains k nodes, the total number of loops of Step 6 is bounded by 
. In the following, we consider the upper bound on the times of calling the algorithm Alg-TA to get a decision (yes or no) for 
⁎
 with respect to a fixed ordering for the auxiliary tree  (i.e., Step 6 can be ignored at the moment), which is denoted by  (note that  is a non-descending function). If , then , and the algorithm ends at Step 1, i.e., . If , then , implying that Rule 2 is applicable, and . For , we have 
, where 
 is the parameter of the i-th sub-instance created by Step 8, for any . It is necessary to point out that if , then each 
 is at least 2 for all ; otherwise (i.e., ), 
 for all , and 
 for all . Moreover, 
. Let 
. If , then
 
 Otherwise,
 
 Thus we always have 
 and then get the recurrence relationship(1)
 

Observe that  can take different values at different levels of recursion, and that the value of  keeps the same value if . Thus, w.l.o.g., we assume that the value 
 taken by p at the s-th recursion is always not less than 2 for any , where t denotes the depth of the recursion and . Then by recurrence relationship (1) given above and the fact that the instance can be directly solved if , we have 
, i.e., 
. Therefore,
 
 

Combining the upper bound 
 on the total number of loops of Step 6 mentioned above and the fact that Steps 1-4 and 7-8 can be done in polynomial time, the algorithm Alg-TA takes time
 to decide whether the considered instance 
⁎
 is yes with respect to the input auxiliary tree .

Remark that Alg-TA cannot directly solve 
⁎
 as its input requires an auxiliary tree  for 
⁎
, but it is unknown. Thus to solve 
⁎
, Alg-TA has to consider all possible auxiliary trees, where the number can be upper bounded by 
 (obtained by Lemma 3.4). Now we can derive that the instance 
⁎
 of the TA problem can be solved in time 
. Note that the runtime can be bounded by 
 (if ). The proof is done. □

4. A polynomial time algorithm for the L2--TA problem
Consider an instance 
⁎
 of the L2--TA problem, where F comprises one copy of the A-tree, denoted by 
, and k copies of the B-tree. Recall that F, 
⁎
, 
, the A-tree and the B-tree are all rooted. The following proposition can be easily derived.

Proposition 4.1

The instance 
⁎
 of the L2--TA problem is yes if and only if 
⁎
 has a subtree 
 that is isomorphic to the A-tree and has the same root with 
⁎
, such that removing the nodes in 
 from 
⁎
 results in k many B-trees.

In the following, we reduce the problem of finding the subtree 
 defined in Proposition 4.1 to the Maximum Common Subtree Isomorphism (MCSI) problem. Several related notions are given below, which follow the ones given in [17]. Given two trees 
 and 
 that have subtrees 
 and 
, respectively, if 
 and 
 are isomorphic with respect to a bijective function Ψ from 
 to 
, then 
 (or 
) is a common subtree of 
 and 
.

Let f be a weight function defined on 
. Then the weight of Ψ is defined as 
  
  The MCSI problem on 
 and 
 asks for a subtree isomorphism with the maximum weight among all subtree isomorphisms between 
 and 
.

Now an instance 
⁎
 of the MCSI problem can be constructed as follows (note that 
 and 
⁎
 are rooted), where the weight function f is defined on 
⁎
⁎
. Let 
 be the subset of 
 such that 
 is isomorphic to the B-tree for each node 
, and 
 be the set containing the edges between the nodes in 
 and their parents in 
. Note that 
 may be empty. Similarly, let 
⁎
 be the subset of 
⁎
 such that 
⁎
 is isomorphic to the B-tree for each node 
⁎
, 
 be the tree 
⁎
⁎
⁎
, and 
⁎
 be the set containing the edges between the nodes in 
⁎
 and their parents in 
⁎
. Observe that 
⁎
; otherwise, the instance 
⁎
 of the L2--TA problem is obviously no.

Case I

⁎
.

Clearly, if 
⁎
 is yes then each node in 
⁎
 is the image of the root of a different B-tree in F. That is, for any node 
⁎
, there is a distinct B-tree such that all the nodes in 
⁎
 are the images of those in that B-tree. Moreover, we can derive that if 
⁎
 is yes then 
. Now for the other direction, if 
⁎
 and 
, it is easy to derive that 
⁎
 is yes. The weight function f is set with the following approach.

Setting Approach I. For any node 
 and 
⁎
, if 
, then 
; otherwise, 
. For any edge 
 and 
⁎
, 
.

Lemma 4.2

For Case I, 
⁎
 is yes if and only if 
⁎
 has an optimal solution with weight 
.

Proof

We first consider the direction that 
⁎
 is yes. As mentioned above, for any node 
⁎
, there is a distinct B-tree such that the nodes in 
⁎
 are the images of those in that B-tree. Consequently, 
 is isomorphic to 
. By the setting approach of f, an isomorphism between 
 and 
 specifies an optimal solution to the instance 
⁎
 with weight 
.

For the other direction that 
⁎
 has an optimal solution with weight 
, as 
, there is an isomorphism between 
 and 
. Then based on the construction of 
, the conclusion that 
⁎
 is yes can be easily derived. □

Case II

⁎
.

Remark that 
⁎
 indicates 
; otherwise (i.e., 
), 
⁎
 is no. Let 
⁎
, and 
⁎
 be the size of the B-tree. Thus 
⁎
. For this case, the weight function f is set with the following approach.

Setting Approach II. For any node 
 and 
⁎
, if 
, then 
 (recall that n is the number of nodes in F and 
⁎
); otherwise, 
. For any edge 
 and 
⁎
, if 
 and 
⁎
, then 
; otherwise, 
.

Proposition 4.3

Any optimal solution to 
⁎
 cannot have a weight greater than 
⁎
.

Proof

Suppose that there exists an optimal solution Φ to 
⁎
 with a weight greater than 
⁎
. Our first observation is that all the nodes in 
 should be mapped with respect to Φ; otherwise, the weight of Φ is at most
⁎
⁎
 which is less than 
⁎
⁎
, a contradiction. On the other hand, there are 
⁎
 nodes in 
 that cannot map to those in 
 with respect to Φ.

We now show that there cannot be more than c edges in 
 that map to those in 
⁎
 with respect to Φ. Our second observation is that if an edge 
 in 
 maps to one 
 in 
⁎
 with respect to Φ, then the 
⁎
 many nodes in the pendant subtree 
 rooted at 
 map to those in the pendant subtree 
⁎
 rooted at 
 with respect to Φ, i.e., the nodes in the pendant subtree 
 cannot map to those in 
 (as 
⁎
 and 
 are vertex-disjointed). Now we assume that there are 
 edges in 
 that map to those in 
⁎
 with respect to Φ, where 
. Based on our second observation, the 
⁎
 many nodes in the 
 pendant subtrees hanging at the 
 edges cannot map to those in 
 with respect to Φ. Thus the nodes in 
 that map to those in 
 with respect to Φ is less than 
 (recall that 
⁎
⁎
⁎
⁎
⁎
⁎
), contradicting our first observation given above. Consequently, the number of edges in 
 that map to that in 
⁎
 with respect to Φ, cannot be greater than c.

Summarizing the above analysis gives that the solution Φ has a weight at most 
⁎
. □

Lemma 4.4

For Case II, 
⁎
 is yes if and only if 
⁎
 has an optimal solution with weight 
⁎
.

Proof

We first consider the direction that 
⁎
 has an optimal solution Φ with weight 
⁎
. By the setting approach of the weight function f and the analysis given in Proposition 4.3, we have that there are k edges of 
⁎
 that are not mapped with respect to Φ. That is, the k pendant subtrees hanging at the k edges are not mapped with respect to Φ, which are all isomorphic to the B-tree. Based on the conclusion, it is not hard to derive that 
⁎
 is yes.

Now we consider the other direction that 
⁎
 is yes. There exists a subset 
⁎
 of 
⁎
 with k edges such that removing the k-pendant subtrees hanging at the k edges from 
⁎
, results in a tree 
 that is isomorphic to 
. Obviously, the isomorphism between 
 and 
 has a weight 
⁎
. □

Theorem 4.5

Algorithm Alg-L2-TA can solve the L2--TA problem in runtime 
, where n is the number of nodes in F and 
⁎
 of the considered instance 
⁎
.

Proof

The correctness of Steps 1 is obvious. For Steps 4-10, the discussion given in Lemma 4.2, Lemma 4.4 guarantee their correctness. For the runtime of the algorithm, Steps 6 and 9 take runtime 
 [17], and the other steps take runtime . Altogether, we have that the algorithm runs in time 
. □

5. Conclusion
Within the paper, we investigated the Tree Assembly problem, which is a simplified version of the (rooted) Minimum Tree Cut/Paste Distance problem and a generalized version of the Exact Block Cover problem. By the natural parameter, the number of trees in the considered forest, we gave the first fixed-parameter algorithm with runtime 
, indicating that the Tree Assembly problem is FPT. Inspired by the work of Baumbach et al. [7], we also presented a variant of the Tree Assembly problem, named Level-2 -Tree Assembly problem. By transforming it to the Maximum Common Subtree Isomorphism problem, we successfully gave an algorithm with runtime 
 for the Level-2 -Tree Assembly problem.

We considered a restricted version of the Tree Assembly problem, where F contains exactly c kinds of trees (c is a constant). Although Baumbach et al. [7] showed that the problem is polynomial time solvable when F is a set of stars, the case becomes quite complicated if we have no restriction on the structures of the trees in F. Hence, studying the hardness of the Level-2 
-Tree Assembly problem is a stepping stone to answer the problem mentioned above, where the considered F comprises 
 copies of the A-tree and 
 copies of the B-tree, and the aim is to find a level-2 attaching approach such that all the other trees are attached to an A-tree. Additionally, future work on the fixed-parameter tractability for the unrooted version of the Tree Assembly problem would be very interesting.
