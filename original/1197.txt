Abstract
A subclass of finite Petri nets, called BPP nets (acronym of Basic Parallel Processes), was recently equipped with an efficiently decidable, truly concurrent, bisimulation-based, behavioral equivalence, called team bisimilarity. This equivalence is a very intuitive extension of classic bisimulation equivalence (over labeled transition systems) to BPP nets and it is checked in a distributed manner. This paper has three goals. First of all, we provide BPP nets with various causality-based observational semantics, notably a novel semantics, called causal-net bisimilarity. Then, we define a variant semantics, called h-team bisimilarity, coarser than team bisimilarity, for which we adapt the modal logic characterization and the axiomatization of team bisimilarity. Then, we complete the study about team bisimilarity and h-team bisimilarity, by comparing them with the causality-based semantics we have introduced: the main results are that team bisimilarity coincides with causal-net bisimilarity, while h-team bisimilarity with fully-concurrent bisimilarity.

Keywords
Petri nets
BPP process algebra
Fully-concurrent bisimulation
Team bisimulation
Hennessy-Milner modal logic
Axiomatization

1. Introduction
A BPP net is a simple type of finite Place/Transition Petri net [45], [15], [48], [28] whose transitions have singleton pre-set. BPP is the acronym of Basic Parallel Processes [12], a simple CCS [39], [27] fragment (without the restriction operator) whose processes cannot communicate. In [28] a variant of BPP, which requires guarded summation (as in Simple BPP [17], SBPP [20] or BPPg [12]) and also that the body of each process constant is guarded (i.e., guarded recursion), is actually shown to represent all and only the BPP nets, up to net isomorphism, and this explains the name of this class of nets. Hence, we can uniformly compare results achieved on BPP nets or on the BPP subcalculus with guarded summation and guarded recursion. About expressiveness, BPP is the largest CCS fragment for which bisimilarity [39] is decidable [12]; moreover, used as formal language recognizer, BPP is rather powerful as it can represent all the regular languages, many context-free, and some context-dependent ones [27]. However, as models for distributed systems, BPP nets have limited applicability: even if they can represent distributed systems composed of non-communicating sequential processes (that, nonetheless, can spawn, so that the reachable markings can be infinitely many, as for the semi-counter in Example 1), their lack of synchronization (as the transition pre-set is always a singleton) prevents the modeling of many real-life applications.

In a recent paper [29], we proposed a novel behavioral equivalence for BPP nets, based on a suitable generalization of the concept of bisimulation [44], [39], originally defined over labeled transition systems (LTSs, for short) A team bisimulation R over the places of an unmarked BPP net is a relation such that if two places 
 and 
 are related by R, then if (one token in place) 
 performs a and produces the marking 
, then (one token in place) 
 may perform a producing a marking 
 such that 
 and 
 are element-wise, bijectively related by R (and vice versa if 
 moves first). Team bisimilarity is the largest team bisimulation over the places of the unmarked BPP net, and then such a relation is lifted to markings by additive closure: if place 
 is team bisimilar to 
 and the marking 
 is team bisimilar to 
 (the base case relates the empty marking to itself), then also 
 is team bisimilar to 
, where  is the operator of multiset union. Note that to check whether two markings are team bisimilar we need not to construct an LTS, such as the reachability graph [28], describing the global behavior of the whole system, but only to find a suitable, bijective, team bisimilarity-preserving match among the local, sequential states (i.e., the elements of the two markings). In other words, two distributed systems, each composed of a team of sequential, non-cooperating processes (i.e., the tokens in the BPP net), are equivalent if it is possible to match each sequential component of the first system with one team-bisimilar, sequential component of the other system, as in any sports where two competing (distributed) teams have the same number of (sequential) players.

A bit surprisingly, the complexity of checking whether two markings are team bisimilar is very low. First, by adapting the optimal algorithm [46] for standard bisimulation equivalence over LTSs, team bisimulation equivalence over places can be computed in 
 time, where m is the number of net transitions, p is the size of the largest post-set (i.e., p is the least natural such that 
 for all t) and n is the number of places. Then, checking whether two markings of size k are team bisimilar can be done in 
 time. Note also that if we need to check whether other two markings of the same net, say 
 and 
, are team equivalent, we can reuse the already computed team bisimilarity over places, and so such a verification will take only 
 time, if k is the size of 
 and 
. Of course, we proved that team bisimilar markings respect the global behavior; in particular, the token game (actually, we proved that team bisimilarity implies interleaving bisimilarity) and the causal behavior (actually, we proved that team bisimilarity coincides with strong place bisimilarity [3], [4]).

In this paper we complete the comparison between team bisimilarity on markings and the causal semantics of BPP nets. We propose a novel coinductive semantics, called causal-net bisimilarity, inspired by [24], which is essentially a bisimulation semantics over the causal nets (also called occurrence nets) [25], [6], [43] of the BPP net under scrutiny. We prove that team bisimilarity coincides with causal-net bisimilarity, hence proving that our distributed semantics is coherent with the expected causal semantics of BPP nets. Moreover, we define a slight strengthening of fully-concurrent bisimulation [7] (fc-bisimulation, for short), called state-sensitive fc-bisimulation, which requires additionally that, for each pair of related processes, the current markings have the same size. We also prove that causal-net bisimilarity coincides with state-sensitive fc-bisimilarity over BPP nets. These behavioral causal semantics have been provided for BPP nets, but they can be easily adapted for general P/T nets [45], [15], [48], [28].

The other main goal of this paper is to show that fc-bisimilarity can be characterized in a team-style, by means of h-team bisimulation equivalence (the prefix h- is to remind history-preserving bisimilarity [22], an equivalence that inspired fc-bisimilarity). The essential difference between a team bisimulation and an h-team bisimulation is that the former is a relation on the set of places only, while the latter is a relation on the set composed of the places and the empty marking θ. Besides proving that h-team bisimilarity coincides with fc-bisimilarity, in the second part of the paper, we adapt the technical results obtained for team bisimulation equivalence in [29], to h-team bisimulation equivalence. In particular, we show that h-team bisimilarity can be characterized by a simple modal logic, called HTML, which extends conservatively Hennessy-Milner logic (HML) [32], [2]; moreover, we prove that h-team bisimilarity can be axiomatized finitely over the BPP process algebra (with guarded summation and guarded constants).

The paper is organized as follows. Section 2 introduces the basic definitions about BPP nets. Section 3 discusses the causal semantics of BPP nets. First, causal-net bisimulation is introduced, then (strong) fully-concurrent bisimilarity [7], and also the state-sensitive version of this equivalence. Section 4 recalls the main definitions and results about team bisimilarity from [29]; in this section we also prove a novel result: causal-net bisimilarity coincides with team bisimilarity for BPP nets. Section 5 defines h-team bisimulation equivalence and studies its properties; in particular, we first prove that h-team bisimilarity coincides with fc-bisimilarity, then in Section 5.2 we discuss a modal logic characterization of h-team bisimilarity. In Section 6 we describe also a finite, sound and complete, axiomatization of h-team bisimilarity over the process algebra BPP. Finally, Section 7 discusses related literature and some future research.

Statement: The first part of this paper is an extended and revised version of the abstract A study on team bisimulations, in Procs. of Petri Nets 2020, LNCS 12152, 153-175, Springer, 2020.

2. Basic definitions
Definition 1

(Multiset) Let  be the set of natural numbers. Given a finite set S, a multiset over S is a function . The support set  of m is 
. The set of all multisets over S, denoted by , is ranged over by m. We write  if . The multiplicity of s in m is given by the number . The size of m, denoted by , is the number 
, i.e., the total number of its elements. A multiset m such that  is called empty and is denoted by θ. We write 
 if 
 for all . Multiset union  is defined as follows: 
 
. Multiset difference  is defined as follows: 
. The scalar product of a number j with m is the multiset  defined as . By 
 we also denote the multiset with 
 as its only element. Hence, a multiset m over 
 can be represented as 
, where 
 for .  □

Definition 2

(BPP net) A labeled BPP net is a tuple , where

•
S is the finite set of places, ranged over by s (possibly indexed),

•
A is the finite set of labels, ranged over by ℓ (possibly indexed), and

•
 is the finite set of transitions, ranged over by t (possibly indexed).

Given a transition , we use the notation:

•
  to denote its pre-set s (which is a single place) of tokens to be consumed;

•
 for its label ℓ, and

•
 to denote its post-set m (which is a multiset, possibly even empty) of tokens to be produced.

Hence, transition t can be also represented as  
 
. We also define pre-sets and post-sets for places as follows:  
 
 and 
. Note that while the pre-set (post-set) of a transition is, in general, a multiset, the pre-set (post-set) of a place is a set.  □
Graphically, a place is represented by a little circle and a transition by a little box, and these may be connected by directed arcs. These arcs may be labeled with the number representing how many tokens of that type are to be removed from (or produced into) that place; no label on the arc is interpreted as the number one. This numerical label of the arc is called its weight.

Definition 3

(Marking, BPP net system) A multiset over S is called a marking. Given a marking m and a place s, we say that the place s contains  tokens, graphically represented by  bullets inside place s. A BPP net system 
 is a tuple 
, where  is a BPP net and 
 is a marking over S, called the initial marking. We also say that 
 is a marked net.  □

Definition 4

(Enabling, firing sequence, reachable place, dynamically reduced) A transition t is enabled at marking m, denoted by , if  
 . The execution (or firing) of t enabled at m produces the marking 
. This is written 
.

A firing sequence starting at m is defined inductively as follows:

•
 is a firing sequence (where ε denotes an empty sequence of transitions);

•
if 
 is a firing sequence and 
, then 
 is a firing sequence.

The set of reachable markings from m is 
. A BPP net system 
 is safe if each marking m reachable from the initial marking 
 is a set, i.e., 
 for all . The set of reachable places from s is 
. Note that  is always a finite set, even if  is infinite. A BPP net system 
 is dynamically reduced if  there exists 
 and 
 such that 
.  □
Example 1

By using the drawing convention mentioned above, Fig. 1 shows in (a) the simplest BPP net representing a semi-counter, i.e., a counter which cannot test for zero. Note that the number represented by this semi-counter is given by the number of tokens which are present in place 
, i.e., in the place ready to perform dec; hence, Fig. 1(a) represents a semi-counter holding number 0; note also that the number of tokens which can be accumulated in 
 is unbounded. Indeed, the set of reachable markings for a BPP net can be countably infinite. In (b), a variant semi-counter is outlined, which holds number 2 (i.e., two tokens are ready to perform dec).  □

Fig. 1
Download : Download high-res image (35KB)
Download : Download full-size image
Fig. 1. The net representing a semi-counter in (a), and a variant in (b).

Now we recall a popular behavioral equivalence relation: interleaving bisimilarity.

Definition 5

(Interleaving Bisimulation) Let  be a BPP net. An interleaving bisimulation is a relation  such that if 
 then

•
 such that 
, 
 such that 
 with 
 and 
,

•
 such that 
, 
 such that 
 with 
 and 
.

Two markings 
 and 
 are interleaving bisimilar, denoted by 
, if there exists an interleaving bisimulation R such that 
.  □
Interleaving bisimilarity 
, which is defined as the union of all the interleaving bisimulations, is the largest interleaving bisimulation and also an equivalence relation.

Example 2

Continuing Example 1 about Fig. 1, it is easy to realize that relation 
 and 
 and 
 is an interleaving bisimulation. Since 
, we have that 
.  □

Remark 1

(Complexity of 
) The problem of checking whether two markings of a BPP net are interleaving bisimilar is roughly exponential in time; more precisely, this decision problem is PSPACE-complete [33] (w.r.t. the size of the net, where the size of a BPP net is the sum of the number of its places and of its transitions).  □

3. Causality-based semantics
We start with the most concrete equivalence definable over BPP nets: isomorphism.

Definition 6

(Isomorphism) Given two BPP nets 
 and 
, we say that 
 and 
 are isomorphic via f if there exists a type-preserving bijection 
 (i.e., a bijection such that 
 and 
), satisfying the following condition:
 
 
 where f is homomorphically extended to markings:  and 
 (i.e., f is applied element-wise to each element of the marking).

Two BPP net systems 
 and 
 are rooted isomorphic if the isomorphism f ensures, additionally, that 
.  □

In order to define our approach to causality-based semantics for BPP nets, we need some auxiliary definitions, adapting those in, e.g., [42], [25], [6], [7], [43], [24].

Definition 7

(Acyclic net) A BPP net  is acyclic if there exists no sequence 
 such that , 
 for , 
, 
 and 
 for , i.e., the arcs of the net do not form any cycle.  □

The concurrent semantics of a marked P/T net is defined by a class of particular acyclic safe nets, where places are not branched (hence they are essentially deterministic) and all arcs have weight 1. This kind of net is called causal net. We use the name C (possibly indexed) to denote a causal net, the set B to denote its places (called conditions), the set E to denote its transitions (called events), and L to denote its labels.

Definition 8

(Causal net) A causal net is a marked BPP net 
 satisfying the following conditions:

1.
C is acyclic;

2.
 (i.e., the places are not branched);

3.
 
 

4.
 for all  (i.e., all the arcs have weight 1).

We denote by  the set 
, and by  the set 
.  □
Note that a BPP causal net, being a BPP net, is finite; since it is acyclic, it represents a finite computation. Note also that any reachable marking of a BPP causal net is a set, i.e., this net is safe; in fact, the initial marking is a set and, assuming by induction that a reachable marking  is a set and enables t, i.e., 
, then also 
 is a set, because the net is acyclic and because of the condition on the shape of the post-set of t (weights can only be 1).

As the initial marking of a causal net is fixed by its shape (according to item 3 of Definition 8), in the following, in order to make the notation lighter, we often omit the indication of the initial marking, so that 
 is simply denoted by C.

Definition 9

(Moves of a causal net) Given two BPP causal nets 
 and 
, we say that C moves in one step to 
 through e, denoted by 
, if  
 , 
 and 
.  □

Definition 10

(Folding and Process) A folding from a BPP causal net 
 into a BPP net system 
 is a function , which is type-preserving, i.e., such that  and , satisfying the following:

•
 and  for all ;

•
, i.e., 
;

•
 
, i.e.,  
 
 for all ;

•
, i.e., 
 for all .

A pair , where C is a BPP causal net and ρ a folding from C to a BPP net system 
, is a process of 
, written also as π.  □
Definition 11

(Isomorphic processes) Given a BPP net system 
, two of its processes 
 and 
 are isomorphic via f if 
 and 
 are rooted isomorphic via bijection f (see Definition 6) and 
.  □

Definition 12

(Moves of a process) Let 
 be a net system and let 
, for , be two processes of 
. We say that 
 moves in one step to 
 through e, denoted by 
, if 
 and 
.

If 
 and 
 and 
, we also denote the move as 
, where 
.  □

Definition 13

(Partial orders of events from a process) From a causal net , we can extract the partial order of its events 
, where 
 iff there exists a sequence 
 such that , 
 for , 
, and 
 for ; in other words, 
 if there is a path from 
 to 
. Two partial orders 
 and 
 are isomorphic if there is a label-preserving, order-preserving bijection 
, i.e., a bijection such that 
 and 
 if and only if 
. We also say that g is an event isomorphism between the causal nets 
 and 
 if it is an isomorphism between their associated partial orders of events 
 and 
.  □

We now define two well-known linear-time causality-based equivalences for BPP nets. The first one, known in the literature as causal equivalence [43], is named causal-trace equivalence and equates two markings of a net from which the same causal nets originate. The latter is more abstract as it forgets about the places of the causal nets and keeps only the partial order of events, yielding partial-order-trace equivalence.

Definition 14

(Causal-trace equivalence) Let  be a BPP net. For a marking m, let 
 is a process of  be the set of causal nets for the BPP net system . Two markings 
 and 
 are causal-trace equivalent, denoted by 
, if 
.  □

Definition 15

(Partial-order-trace equivalence) Let  be a BPP net. For a marking m, let 
 is a process of  be the set of partial orders for the BPP net system . Two markings 
 and 
 are partial-order-trace equivalent, denoted by 
, if 
, i.e., if 
 such that 
 and 
 are isomorphic, and vice versa, 
 such that 
 and 
 are isomorphic.  □

Proposition 1

(Causal-trace equivalence is finer than partial-order-trace equivalence) Given a BPP net , for each 
, if 
 then 
.

Proof

If 
, then 
. So, 
, i.e., 
. □

3.1. Causal-net bisimulation
We want to define a bisimulation-based equivalence which is coarser than the very concrete, branching-time semantics of occurrence net equivalence [21] (where two nets are occurrence net equivalent if and only if they have isomorphic unfoldings [41], [16]), and finer than the linear-time semantics of causal-trace equivalence. The proposed novel behavioral equivalence is the following causal-net bisimulation, inspired by [24].

Definition 16

(Causal-net bisimulation) Let  be a BPP net. A causal-net bisimulation is a relation R, composed of triples of the form 
, where, for , 
 is a process of 
 for some 
, such that if 
 then

i)
 such that 
 with 
, there exist 
 such that 
, with 
, and 
;

and symmetrically, 
 such that 
 with 
, there exist 
 such that 
, with 
, and 
.

Two markings 
 and 
 of N are cn-bisimilar (or cn-bisimulation equivalent), denoted by 
, if there exists a causal-net bisimulation R containing a triple 
, where 
 contains no events and 
 for .  □

Let us denote by 
. Of course, cn-bisimilarity 
 can be seen as 
, where 
 is the largest causal-net bisimulation by item 3 of the following obvious proposition.

Proposition 2

For each BPP net , the following hold:

1.
the identity relation 
 is a causal-net bisimulation;

2.
the inverse relation 
 of a causal-net bisimulation R is a causal-net bisimulation;

3.
the union 
 of causal-net bisimulations 
 is a causal-net bisimulation. □

More problematic is to define the relational composition 
 of two causal-net bisimulations 
 and 
. One trivial possibility is to state that
 but this definition would prevent the composition of cn-bisimulations that differ only for the actual choice of the causal net C; in other words, 
 may be using a causal net 
 
 which is simply isomorphic to C. Hence, the more generous definition of composition we are proposing is the following. Given a BPP net , the composition, up to net isomorphism, of two causal-net bisimulations 
 and 
 is the relation
 
 
 Note that this definition is intuitively correct because we are requiring that 
 and 
 
 are isomorphic processes via f (cf. Definition 11), so that they are related to the same initial marking. The following proposition shows that 
 is a causal-net bisimulation, indeed.

Proposition 3

For each BPP net , the relational composition, up to net isomorphism, 
 
 such that 
 and 
 
 are isomorphic processes via f 
 of two causal-net bisimulations 
 and 
 is a causal-net bisimulation.

Proof

Assume that 
 and that 
 with 
. Since 
 is a causal-net bisimulation and 
, we have that there exist 
 such that 
, with 
, and 
. Since 
 and 
 
 are isomorphic via f, it follows that 
 
 
, with 
, where 
 and 
 
 are isomorphic via 
, where 
 extends f in the obvious way (i.e., by mapping event e to 
).

As 
 
 and 
 is a causal-net bisimulation, for 
 
 
, with 
, there exist 
 such that 
 
 
, with 
, and 
 
.

As 
, it follows that 
 and 
 
 are isomorphic via f. Therefore, 
 is derivable, too, where 
 and 
, so that 
 and 
 
 are isomorphic via 
.

Summing up, if 
 and 
, with 
, then 
 such that 
, with 
, and 

The symmetric case when 
 moves first is analogous, hence omitted. Therefore, 
 is a causal-net bisimulation, indeed. □

Proposition 4

For each BPP net , relation 
 is an equivalence relation.

Proof

Reflexivity is easy: the identity relation 
 is a process of  is a causal-net bisimulation by Proposition 2(1). Hence, 
 for all m.

Symmetry derives from the following argument. For any 
, there exists a causal-net bisimulation R containing a triple 
, where 
 contains no transitions and 
 for . By Proposition 2(2), relation 
 is a causal-net bisimulation containing the triple 
, and so 
.

Transitivity also holds for 
. Assume 
 and 
; hence, there exist two causal-net bisimulations 
 and 
 such that 
 has a triple 
, where 
 has no transitions and 
 for , and 
 contains a triple 
 
, where 
 
 has no transition and 
 
 for . Therefore, 
 and 
 
 are isomorphic via some bijection f and 
. By Proposition 3, relation 
 is a causal-net bisimulation containing the triple 
; hence, 
. □

Example 3

Consider the nets in Fig. 1. Clearly the net in a) with initial marking 
 and the net in b) with initial marking 
 are not isomorphic; however, it is possible to prove that they have isomorphic unfoldings [41], [21], [16]; moreover, it is clear that 
, even if a causal-net bisimulation proving this is not easy to define and would contain infinitely many triples.  □

Example 4

Proposition 5

(Causal-net bisimilarity is finer than causal-trace equivalence) Given a BPP net , for each 
, if 
 then 
.

Proof

If 
, then for each 
, there must be a triple 
 such that 
 and 
. This means that 
 and so 
. By a symmetric argument, we can prove 
, so that we conclude that 
, i.e., 
. □

The implication above is strict, as illustrated in the following example.

Example 5

Let us consider the nets in Fig. 3. Of course, 
, even if they generate the same causal nets, i.e. 
. In fact, transition 
 might be matched by 
 either with 
 or with 
, so that it is necessary that 
 or 
; but this is impossible, because only 
 can perform both b and c. Moreover, 
 because they do not generate the same causal nets, i.e., 
.  □

Fig. 3
Download : Download high-res image (38KB)
Download : Download full-size image
Fig. 3. Some non-cn-bisimilar BPP nets.

3.2. (State-sensitive) fully-concurrent bisimulation
In the theory of equivalences for distributed systems, only the events performed are usually considered as the relevant part of the behavior of a system. Hence, causal-net bisimulation, which also observes the structure of the distributed state, may be considered too concrete as an equivalence. We disagree with this view, as the structure of the distributed state is not less observable than the events this distributed state can perform. However, some equivalences have been proposed with this weaker assumption, the most prominent being fully-concurrent bisimulation (fc-bisimulation, for short) [7], whose definition was inspired by previous equivalences on other models of concurrency: history-preserving bisimulation, originally defined in [47] under the name of behavior-structure bisimulation, and then elaborated on in [22] (who called it by this name) and [14] (who called it by mixed ordering bisimulation). Besides fc-bisimulation equivalence, we define also a novel, slightly stronger version, called state-sensitive fc-bisimulation equivalence, that we prove to coincide with causal-net bisimilarity.

Definition 17

(Fully-concurrent bisimulation) Let  be a BPP net. A (strong) fc-bisimulation is a relation R, composed of triples of the form 
, where, for , 
 is a process of 
 for some 
 and g is an event isomorphism between 
 and 
, such that if 
 then

i)
 such that 
 with 
, 
 such that

1.
 with 
;

2.
, and finally,

3.
;

and symmetrically, if 
 moves first.

Two markings 
 and 
 are fc-bisimilar, denoted by 
, if there exists an fc-bisimulation R containing a triple 
, where 
 contains no transitions, 
 is empty and 
 
 for .  □

Let us denote by 
. Of course, 
 is a fully-concurrent bisimulation
, where relation 
 is a fully-concurrent bisimulation} is the largest fully-concurrent bisimulation by item 4 of the following proposition.

Proposition 6

For each BPP net , the following hold:

1.
the identity relation 
 is a process of  and id is the identity event isomorphism on C} is an fc-bisimulation;

2.
the inverse relation 
 of an fc-bisimulation R is an fc-bisimulation;

3.
the relational composition, up to isomorphism, 
 
, 
 
 
 and 
 
 are isomorphic processes via 
 of two fc-bisimu-lations 
 and 
 is an fc-bisimulation;

4.
the union 
 of a family of fc-bisimulations 
 is an fc-bisimulation.

Proof

The proof of cases 1, 2, and 4 is trivial. The proof for case 3 is similar to the proof of Proposition 3, and so omitted. □

Proposition 7

For each BPP net , relation 
 is an equivalence relation.

Proof

Similar to the proof of Proposition 4 and so omitted. □

Proposition 8

(Fc-bisimilarity implies partial-order-trace equivalence) Given a BPP net , for each 
, if 
 then 
.

Proof

If 
, then for each 
, there must be a triple 
, 
 such that, for , 
, 
 is the partial order of 
 and g is an isomorphism between 
 and 
. So 
. Hence, 
, 
 such that the two partial orders are isomorphic. By a symmetric argument, we can prove that 
, 
 such that the two partial orders are isomorphic. Hence, we conclude that 
, i.e., 
. □

Proposition 9

(Cn-bisimilarity is finer than fc-bisimilarity) For each BPP net , for each 
, if 
, then 
.

Proof

If 
, then a cn-bisimulation R exists, containing a triple 
, where 
 contains no events and 
 for . Relation 
, 
, where id is the identity event isomorphism on C, is an fc-bisimulation. As 
 contains 
, it follows that 
. □

The above implications are strict, as illustrated by the following example.

Example 6

Consider the net in Fig. 3. In Example 5 we argued that 
; however, 
, because, even if they do not generate the same causal net, still they generate isomorphic partial orders of events. On the contrary, 
 because, even if they generate isomorphic partial orders (and so 
), the two markings have a different branching structure, as discussed in Example 5. Note that the deadlock place 
 and the empty marking θ are fc-bisimilar, so also partial-order trace equivalent; however, 
 and θ are not causal-net bisimilar, and not even causal-trace equivalent.  □

Definition 18

(State-sensitive fully-concurrent bisimulation) An fc-bisimulation R is state-sensitive if for each triple 
, the maximal markings have equal size, i.e., 
. Two markings 
 and 
 of N are sfc-bisimilar, denoted by 
, if there exists a state-sensitive fc-bisimulation R containing a triple 
, where 
 contains no transitions, 
 is empty and 
 for .  □

Of course, also the above definition is defined coinductively; as we can prove an analogous of Proposition 6, it follows that 
 is an equivalence relation, too.

Now we prove that for BPP nets 
 coincides with causal-net bisimilarity 
.

Theorem 1

(Cn-bisimilarity and sfc-bisimilarity coincide) For each BPP net , 
 if and only if 
.

Proof

⇒) If 
, then there exists a causal-net bisimulation R such that it contains a triple 
, where 
 contains no transitions and 
 for . Relation 
, where id is the identity event isomorphism on C, is a state-sensitive fc-bisimulation. Since  contains the triple 
, it follows that 
.

⇐) (Sketch) If 
, then there exists a state-sensitive fc-bisimulation  containing a triple 
, where 
 contains no transitions, 
 is empty and 
 for , with 
. Hence, 
 and 
 are isomorphic, where the isomorphism function 
 is a suitably chosen bijection from 
 to 
.1

We build the candidate causal-net bisimulation R inductively, by first including the triple 
; hence, if R is a causal-net bisimulation, then 
.

Since 
 and  is a state-sensitive fc-bisimulation, if 
 with 
, then 
, with 
, and 
, where 
, and also with 
.

It is necessary that the isomorphism bijection 
 has been chosen in such a way that 
  
 
. Since 
 and also 
 
, it is necessary that transitions 
 and 
 have the same post-set size; hence, 
 and 
 are isomorphic and the bijection 
 can be extended to bijection f with the pair 
 and also with a suitably chosen bijection between the post-sets of these two transitions. Hence, we include into R also the triple 
. Symmetrically, if 
 moves first.

By iterating this procedure, we add (possibly unboundedly many) triples to R. It is an easy observation to realize that R is a causal-net bisimulation. □

Remark 2

In general, for P/T nets 
 is finer than 
. E.g., consider the nets 
 and 
. Of course, 
, but 
.  □

3.3. Deadlock-free BPP nets and fully-concurrent bisimilarity
In this section, we first define a cleaning-up operation on a BPP net N, yielding a net  where all the deadlock places of N are removed. Then, we show that two markings 
 and 
 of N are fully-concurrent bisimilar if and only if the markings 
 and 
, obtained by removing all the deadlock places in 
 and 
 respectively, are state-sensitive fc-bisimilar in .

Definition 19

(Deadlock-free BPP net) For each BPP net , we define its associated deadlock-free net  as the tuple  where

•
;

•
, where  
 
 and  is the marking obtained from  by removing all its deadlock places.

A BPP net  is deadlock-free if all of its places are not a deadlock, i.e.,  and so .  □
Formally, given a marking , we define  as the marking 
 

For instance, let us consider the net in Fig. 3(c). Then, 
, or 
. Of course,  is a multiset on .

The nets in Fig. 1, Fig. 2 are deadlock-free. However, note that a deadlock-free net can terminate its computations, but only by reaching the successful termination θ. E.g., the net in Fig. 3(a) is deadlock-free. On the contrary, the net in Fig. 3(c) is not deadlock-free because of the presence of the deadlock place 
, and its associated deadlock-free net is 
.

Proposition 10

(Fc-bisimilarity and sfc-bisimilarity coincide on deadlock-free nets) For each deadlock-free BPP net , 
 if and only if 
.

Proof

⇐) Of course, a state-sensitive fc- bisimulation is also a fc-bisimulation.

⇒) If there are no deadlock places, an fc-bisimulation must be state sensitive. In fact, if two related markings have a different size, then, since no place is a deadlock and the BPP net transitions have singleton pre-set, they would originate different partial orders of events. □

Proposition 11

Given a BPP net  and its associated deadlock-free net , two markings 
 and 
 of N are fc-bisimilar if and only if 
 and 
 in  are sfc-bisimilar.

Proof

⇒) If 
, then there exists an fc-bisimulation  on N containing a triple 
, where 
 contains no transitions, 
 is empty and, moreover, 
 for .

Relation 
, such that 
 is the restriction of 
 on the places of 
, for , and 
 is such that 
 implies 
 is an fc-bisimulation on . By Proposition 10, R is actually a state-sensitive fully-concurrent bisimulation on . Note that R contains the triple 
 such that 
 for , and so 
.

⇐) If 
, then there exists an sfc-bisimulation R on  containing a triple 
 
 
, where 
 
 contains no transitions, 
 is empty and 
 
 
 for .

Relation 
 is a process of 
 for some 
, for , g is an event isomorphism between 
 and 
, 
, 
, such that 
 is the restriction of 
 on the places of 
, for , and 
 implies 
 is an fc-bisimulation on N. Note that relation  contains the triple 
 such that, for , 
 
, 
, 
, and therefore 
. □

4. Team bisimulation equivalence
In this section, we recall the main definitions and results about team bisimulation equivalence, outlined in [29]. We also include one novel, main result: causal-net bisimilarity coincides with team bisimilarity.

4.1. Additive closure and its properties
Definition 20

(Additive closure) Given a BPP net  and a place relation , we define a marking relation 
, called the additive closure of R, as the least relation induced by the following axiom and rule.
 
 

Two markings are related by 
 only if they have the same size; in fact, the axiom states that the empty marking is related to itself, while the rule, assuming by induction that 
 and 
 have the same size, ensures that 
 and 
 have the same size.

Proposition 12

For any BPP net  and any place relation , if 
, then 
.

An alternative way to define that two markings 
 and 
 are related by 
 is to state that 
 can be represented as 
, 
 can be represented as 
 and 
 for .

Proposition 13

For any BPP net  and any place relation , the following hold:

1.
If R is an equivalence relation, then 
 is an equivalence.

2.
If 
, then 
, i.e., the additive closure is monotone.

3.
If 
 and 
, then 
, i.e., the additive closure is additive.

4.
If R is an equivalence relation, 
 and 
, then 
, i.e., the additive closure is subtractive. □

Example 7

The requirement that R is an equivalence relation is strictly necessary for Proposition 13(4). As a counterexample, consider 
, 
. We have that 
 and 
, but 
.  □

Remark 3

(Complexity of additive closure) Given an equivalence place relation R, the algorithm in [29] checks whether two markings 
 and 
 are related by the additive closure of R in 
 time, where k is the size of the markings. In fact, if R is implemented as an adjacency matrix, then the complexity of checking if two markings 
 and 
 (represented as an array of places with multiplicities) are related by 
 is 
, because the problem is essentially that of finding for each element 
 of 
 a matching, R-related element 
 of 
. Note that the algorithm in [29] (as well as the similar Algorithm 1 outlined in Section 5) is correct only if R is an equivalence relation, so that 
 is subtractive. In fact, assuming that 
, when we match one place, say 
, in 
 with one place, say 
, in 
 such that 
, then we need that also 
 (cf. Example 7).  □

Algorithm 1
Download : Download high-res image (182KB)
Download : Download full-size image
Algorithm 1. Checking the H-additive Closure of an Equivalence Place Relation.

Now we list some useful, and less obvious, properties of additively closed place relations (proof in [29]).

Proposition 14

For any BPP net  and any family of place relations 
, the following hold:

1.
, i.e., the additive closure of the empty place relation is a singleton marking relation, relating the empty marking to itself.

2.
, i.e., the additive closure of the identity relation on places 
 is the identity relation on markings 
.

3.
, i.e., the inverse of an additively closed relation R is the additive closure of its inverse 
.

4.
, i.e., the additive closure of the composition of two place relations is the compositions of their additive closures.

5.
, i.e., the union of additively closed relations is included into the additive closure of their union. □

4.2. Team bisimulation on places
Definition 21

(Team bisimulation) Let  be a BPP net. A team bisimulation is a place relation  such that if 
 then for all 

•
 such that 
, 
 such that 
 and 
,

•
 such that 
, 
 such that 
 and 
.

Two places s and 
 are team bisimilar (or team bisimulation equivalent), denoted 
, if there exists a team bisimulation R such that 
.  □
Example 8

Continuing Example 1 about the semi-counters in Fig. 1, it is easy to see that relation 
 is a team bisimulation. In fact, the pair 
 is a team bisimulation pair because, to transition 
, 
 can respond with 
, and 
; symmetrically, if 
 moves first. Also the pair 
 is a team bisimulation pair because, to transition 
, 
 can respond with 
, and 
; symmetrically, if 
 moves first. Also the pair 
 is a team bisimulation pair: to transition 
, 
 responds with 
, and 
. Similarly for the pair 
. Therefore, relation R is a team bisimulation, indeed. This example shows that ∼ is compatible with the notion of net unfolding, as the net (b) can be seen as a sort of partial unfolding of the net (a).

The team bisimulation R above is a very simple, finite relation, proving that 
 and 
 are team bisimulation equivalent. In Example 2, in order to show that 
 and 
 are interleaving bisimilar, we had to introduce a complex relation, with infinitely many pairs. In Example 3 we argued that 
, even if we did not provide any causal-net bisimulation relation (which would be composed of infinitely many triples).  □

Example 9

Let us consider the nets in Fig. 2. Of course, 
 because
 is a team bisimulation. Actually, all the places are pairwise team bisimilar. In Example 4 we argued that 
, but the justifying causal-net bisimulation would contain infinitely many triples.  □

Example 10

Consider the nets in Fig. 4. It is easy to see that 
, 
, 
 is a team bisimulation. This example shows that team bisimulation is compatible with duplication of behavior and fusion of places.  □

Fig. 4
Download : Download high-res image (56KB)
Download : Download full-size image
Fig. 4. Two team bisimilar BPP nets.

We now list some useful properties of team bisimulation relations.

Proposition 15

For any BPP net , the following hold:

1.
The identity relation 
 is a team bisimulation;

2.
the inverse relation 
 of a team bisimulation R is a team bisimulation;

3.
the relational composition 
 of two team bisimulations 
 and 
 is a team bisimulation;

4.
the union 
 of team bisimulations 
 is a team bisimulation.

Proof

Standard, by exploiting Proposition 14; details in [29]. □

Remember that 
 if there exists a team bisimulation containing the pair 
. This means that ∼ is the union of all team bisimulations, i.e.,
 By Proposition 15(4), ∼ is also a team bisimulation, hence the largest such relation.

Proposition 16

For any BPP net , relation  is the largest team bisimulation relation. □

Proposition 17

For any BPP net , relation  is an equivalence relation.

Proof

By Proposition 15; details in [29]. □

Remark 4

(Complexity of ∼) It is well-known that the optimal algorithm for computing bisimulation equivalence over a finite-state LTS with n states and m transitions has  time complexity [46]. This very same partition refinement algorithm can be easily adapted also for team bisimilarity over BPP nets: it is enough to consider the empty marking θ as an additional, special place which is team bisimilar to itself only (i.e., the initial partition is composed of two blocks: S and ), and to consider the little additional cost due to the fact that the reached markings are to be related by the additive closure of the current partition over places; this extra cost is related to the size of the post-set of the net transitions; if p is the size of the largest post-set of the net transitions (i.e., p is the least number such that 
, for all ), then the time complexity is 
, where m is the number of the net transitions and n is the number of the net places.  □

4.3. Team bisimilarity over markings
Starting from team bisimulation equivalence ∼, which has been computed over the places of an unmarked BPP net N, we can lift it over the markings of N in a distributed way: 
 is team bisimulation equivalent to 
 if these two markings are related by the additive closure of ∼, i.e., if 
, usually denoted by 
.

Proposition 18

For any BPP net , if 
, then 
.

Proof

By Proposition 12. □

Proposition 19

For any BPP net , relation 
 is an equivalence relation.

Proof

By Proposition 13: since ∼ is an equivalence relation (Proposition 17), its additive closure 
 is also an equivalence relation (Proposition 13(1)). □

Remark 5

(Complexity of 
) Once the place relation ∼ has been computed for the given net (in 
 time), by using the algorithm in [29] we can check whether two markings 
 and 
 are team bisimulation equivalent in 
 time, where k is the size of the markings, as discussed in Remark 3. Moreover, if we want to check whether other two markings of the same net are team bisimilar, we can reuse the already computed ∼ relation, so that the time complexity is again quadratic on the size of the two markings. However, note that the time spent in creating the adjacency matrix for ∼ has not been considered: since n is the number of places, 
 time is needed to implement this matrix, so that the time spent for the first check is 
, while for subsequent checks it is only 
, where k is the size of the markings.

The algorithm in [29] is not optimal. As a matter of fact, since the partition refinement algorithm does compute the equivalence classes of ∼, we can take advantage of this fact for checking whether 
. The algorithm in [37] simply scans these equivalence classes and, for each class, it checks whether the number of tokens in the places of 
 belonging to this class equals the number of tokens in the places of 
 in the same class; if this holds for all the equivalence classes, then 
. Of course, the complexity of this algorithm is , even for the first check; hence, this algorithm is usually more performant, even if, from the second check onwards, it may be slower when applied to small markings; in fact, in case the number n of places is greater than 
, then the original algorithm is better. This more performant algorithm can be used in computing ∼ when it is necessary to check that the reached markings are to be related by the additive closure of the current partition over places. In such a case, the complexity of ∼ is .  □

Example 11

Continuing Example 8 about the semi-counters, the marking 
 is team bisimilar to the following markings of the net in (b): 
, or 
, or 
, or 
, or 
, or 
.  □

Of course, two markings 
 and 
 are not team bisimilar if there is no bijective, team-bisimilar-preserving mapping between them; this is the case when 
 and 
 have different size, or if the algorithm in [29] ends with b holding false, i.e., by singling out a place 
 in (the residual of) 
 which has no matching team bisimilar place in (the residual of) 
.

The following theorem provides a characterization of team bisimulation equivalence 
 as a suitable bisimulation-like relation over markings. It is interesting to observe that this characterization gives a dynamic interpretation of team bisimulation equivalence, while Definition 20 gives a structural definition of team bisimulation equivalence 
 as the additive closure of ∼. The proof is outlined in [29].

Theorem 2

Let  be a BPP net. Two markings 
 and 
 are team bisimulation equivalent, 
, if and only if 
 and

•
 such that 
, 
 such that  
  
 
, 
, 
, 
 and 
, and symmetrically,

•
 such that 
, 
 such that  
  
 
, 
, 
, 
 and 
. □

By the theorem above, it is clear that 
 is an interleaving bisimulation.

Corollary 1

(Team bisimilarity is finer than interleaving bisimilarity) Let  be a BPP net. If 
, then 
.  □

4.4. Team bisimilarity and causal-net bisimilarity coincide
Now we want to prove an original result: team bisimilarity coincides with cn-bisimilarity (see Definition 16), hence proving that team bisimilarity does respect also the causal semantics of BPP nets.

Theorem 3

(Team bisimilarity implies cn-bisimilarity) Let  be a BPP net. If 
, then 
.

Proof

Let 
 is a process of 
 and 
 is a process of 
 such that 
, for all . We want to prove that R is a causal-net bisimulation.

First, consider a triple of the form 
, where 
 is a BPP causal net with no transitions, 
 
 (for ) and 
, for all 
. Then 
 must belong to R, because 
 is a process of 
, for  and, by hypothesis, 
. Note also that if the relation R is a causal-net bisimulation, then this triple ensures that 
.

Now assume 
. In order to be a causal-net bisimulation triple, it is necessary that

i)
 such that 
, with 
, there exist 
 such that 
, with 
, and 
;

symmetrically, if 
 moves first.

Let 
 be a transition such that 
, with 
, and let 
. As by hypothesis we have that 
, for all , if 
, then there exists 
 such that 
. Hence, 
 exists such that 
, 
, 
, so that, by Theorem 2, 
 and 
. Hence, it is really possible to extend the causal net C to the causal net 
 through a suitable transition e such that  
 
, as required above, and to extend 
 and 
 to 
 and 
, respectively, in such a way that 
, 
, and 
, for all 
 because 
. Finally, we have that 
 because 
, for all 
, as required. Symmetrically, if 
 moves first. □

Theorem 4

(Cn-bisimilarity implies team bisimilarity) Let  be a BPP net. If 
 then 
.

Proof

If 
, then there exists a causal-net bisimulation R containing a triple 
, where 
 is a BPP causal net which has no transitions and 
 
 for . Let us consider 
. If we prove that  is a team bisimulation, then, since 
 for each 
, it follows that 
. As , we also get 
. Let us consider a pair 
. Hence, there exist a triple 
 and a place  such that 
 and 
. If 
 moves, e.g., 
, then 
 
, where 
 
. Hence, also 
, with 
, for some 
.

Since R is a causal-net bisimulation, there exist 
 such that 
, with 
, and 
.

Note that event e is such that  
 , and so  
  
 
. This means that 
 
, where 
; in other words, 
. Note also that 
 extends 
 by mapping e to 
 and, similarly, 
 extends 
 by mapping e to 
; in this way, 
 and 
. Since 
, it follows that the set 
 is a subset of , so that 
.

Summing up, for each pair 
, if 
, then 
 such that 
; symmetrically, if 
 moves first. So,  is a team bisimulation. □

Corollary 2

(Team bisimilarity and cn-bisimilarity coincide) Let  be a BPP net. Then, 
 if and only if 
.

Proof

By Theorem 3, Theorem 4, we get the thesis. □

Corollary 3

(Team bisimilarity and sfc-bisimilarity coincide) Let  be a BPP net. Then, 
 if and only if 
.

Proof

By Corollary 2 and Theorem 1, we get the thesis. □

Therefore, our characterization of cn-bisimilarity and sfc-bisimilarity, which are, in our opinion, the intuitively correct (strong) causal semantics for BPP nets, is quite appealing because it is based on the very simple technical definition of team bisimulation on the places of the unmarked net, and, moreover, offers a very efficient algorithm to check if two markings are cn-bisimilar (see Remark 5).

5. H-team bisimulation
In order to provide the definition of h-team bisimulation on places for unmarked BPP nets, adapting the definition of team bisimulation on places (cf. Definition 21), we need first to extend the domain of a place relation: the empty marking θ is considered as an additional place, so that a place relation is defined not on S, rather on . Therefore, the symbols 
 and 
 that occur in the following definitions, can only denote either the empty marking θ or a single place s.

First of all, we extend the idea of additive closure to these more general place relations, yielding h-additive closure.

Definition 22

(H-additive closure) Given a BPP net  and a place relation , we define a marking relation 
, called the h-additive closure of R, as the least relation induced by the following axiom and rule.
 
 

Note that if two markings are related by 
 (i.e., by the h-additive closure of R), then they may have different size; in fact, even if the axiom relates the empty marking to itself (so two markings with the same size), as , it may be the case that , so that, assuming 
 with 
, we get 
, as θ is the identity for the operator of multiset union. Hence, Proposition 12, which is valid for place relations defined over S, is not valid for place relations defined over . However, the properties in Proposition 13, Proposition 14 hold also for these more general place relations. In particular, if  is an equivalence relation, then 
 is also an equivalence relation.

Proposition 20

(H-additivity/H-subtractivity) Given a BPP net  and a place relation , the following hold:

1.
If 
 and 
, then 
.

2.
If R is an equivalence relation, 
 and 
, then 
.

Proof

By induction on the size of 
. This easy inductive proof is very similar to the analogous one in [29] for Proposition 13 and so omitted. □

Remark 6

(Complexity of h-additive closure) Given an equivalence place relation , the complexity of checking if two markings 
 and 
 are related by 
 is 
, where k is the size of the largest marking, since the problem is essentially that of finding for each element 
 (not R-related to θ) of 
 a matching, R-related element 
 of 
 (and then checking that all the remaining elements of 
 and 
 are R-related to θ), as described by Algorithm 1. Note that this algorithm returns false in case 
 and 
 are not related by 
, otherwise it returns the set P of matched pairs (of places, or composed of a place and the empty marking θ) which are necessary to prove that 
 and 
 are related by 
. Moreover, note that this algorithm is correct only if R is an equivalence relation, so that 
 is h-subtractive (cf. Remark 3).  □

Now we are ready to define h-team bisimulation, where the symbols 
 and 
 can only denote either the empty marking θ or a single place, because of the shape of BPP net transitions.

Definition 23

(H-team bisimulation) Let  be a BPP net. An h-team bisimulation is a place relation  such that if 
 then for all 

•
 such that 
, 
 such that 
 and 
,

•
 such that 
, 
 such that 
 and 
.

 and 
 are h-team bisimilar (or h-team bisimulation equivalent), denoted 
, if there exists an h-team bisimulation R such that 
.  □
Since a team bisimulation is also an h-team bisimulation, we have that ∼ implies 
. This implication is strict as illustrated in the following examples.

Example 12

Consider the nets in Fig. 3. It is not difficult to realize that 
 and 
 are h-team bisimilar because 
 is a h-team bisimulation. In fact, 
 can reach 
 by performing a, and 
 can reply by reaching the empty marking θ, and 
. In Example 6 we argued that 
 and in fact we will prove that h-team bisimilarity coincides with fc-bisimilarity. This example shows that h-team bisimulation equivalence is not sensitive to the kind of termination of a process: even if 
 is stuck place, denoting a deadlock situation, it is equivalent to the empty marking θ, i.e., the marking denoting a properly terminated process. This is in contrast with the definition of team bisimulation on place, which is sensitive to the kind of termination. In fact, 
, because 
, as discussed in Example 5.  □

Remark 7

(Only deadlock places can be related to θ) It is interesting to observe that an h-team bisimulation can relate θ only to deadlock places, i.e., places with empty post-set. This is indeed the case because a place s of a BPP net such that 
 can perform some transition (as net transitions of a BPP net have singleton pre-set), while θ can do nothing; hence,  cannot be an h-team bisimulation pair.  □

We now list some useful properties which can be proved similarly to Proposition 15 (whose proof is in [29]).

Proposition 21

For any BPP net , the following hold:

1.
The identity relation 
 is an h-team bisimulation;

2.
the inverse relation 
 of an h-team bisimulation R is an h-team bisimulation;

3.
the relational composition 
 of two h-team bisimulations 
 and 
 is an h-team bisimulation;

4.
the union 
 of h-team bisimulations 
 is an h-team bisimulation. □

Relation 
 is the union of all h-team bisimulations, i.e.,
 By Proposition 21(4), 
 is also an h-team bisimulation, hence the largest such relation.

Proposition 22

For any BPP net , relation 
 is an equivalence relation.

Proof

Standard, by Proposition 21. □

Moreover, h-team bisimulation on places enjoys the same properties of bisimulation on LTSs, i.e., it is coinductive and equipped with a fixed-point characterization. H-team bisimulation equivalence can be used in order to minimize the net in the style of [29]. In particular, the minimized net 
 w.r.t. 
 of a BPP net N is the deadlock-free net 
, where 
 is the minimized net w.r.t. ∼, as described in [29].

Starting from h-team bisimulation equivalence 
, which has been computed over the places (and the empty marking) of an unmarked BPP net N, we can lift it over the markings of N in a distributed way: 
 is h-team bisimulation equivalent to 
 if these two markings are related by the h-additive closure of 
, i.e., if 
, usually denoted by 
.

Proposition 23

For any BPP net , relation 
 is an equivalence relation.

Proof

By (the analogous of) Proposition 13 (for h-additive closure): since 
 is an equivalence relation (Proposition 22), its h-additive closure 
 is also an equivalence relation. □

Remark 8

(Complexity of 
) Computing 
 is not more difficult than computing ∼ (cf. Remark 5). The partition refinement algorithm in [46] can be adapted also to this case. It is enough to consider the empty marking θ as an additional, special place which is h-team bisimilar to each deadlock place. Hence, the initial partition considers two sets: one composed of all the deadlock places and θ, the other one with all the non-deadlock places. Therefore, the time complexity is also in this case 
, where m is the number of the net transitions, n is the number of the net places and p the size of the largest post-set of the net transitions.

Once the equivalence place relation 
 has been computed once and for all for the given net, by using the Algorithm 1 we can check whether two markings 
 and 
 are h-team bisimulation equivalent in 
 time, where k is the size of the largest marking, as discussed in Remark 6.

Since the partition refinement algorithm does compute the equivalence classes of 
, an alternative algorithm [37] for checking whether 
 simply scans these equivalence classes and, for each class (except for the class of θ), it checks whether the number of tokens in the places of 
 belonging to this class equals the number of tokens in the places of 
 in the same class; if this holds for all the equivalence classes, then 
. Of course, the complexity of this algorithm is . Again, this more performant algorithm can be used in computing 
 so that the complexity of 
 in this case becomes  time.  □

5.1. H-team bisimilarity and fully-concurrent bisimilarity coincide
In this section, we first show that h-team bisimilarity over a BPP net N coincides with team-bisimilarity over its associated deadlock-free net . A consequence of this result is that h-team bisimilarity coincides with fc-bisimilarity on BPP nets.

Proposition 24

Given a BPP net  and its associated deadlock-free net , two markings 
 and 
 of N are h-team bisimilar if and only if 
 and 
 in  are team bisimilar.

Proof

⇒) If 
, then there exists an h-team bisimulation 
 on N such that 
. If we take relation 
, then it is easy to see that 
 is a team bisimulation on , so that 
, hence 
.

⇐) If 
, then there exists a team bisimulation 
 on  such that 
. Now, take relation 
, where the set 
 is 
. It is easy to observe that 
 is an h-team bisimulation on N, so that 
, hence 
. □

Theorem 5

(Fully concurrent bisimilarity and h-team bisimilarity coincide) Given a BPP net , 
 if and only if 
.

Proof

By Proposition 11, 
 in N if and only if 
 in the associated deadlock-free net . By Corollary 3, 
 if and only if 
 in . By Proposition 24, 
 in  if and only if 
 in N. The thesis then follows by transitivity. □

5.2. Modal logic characterization
In this section we extend Hennessy-Milner Logic (HML) [32], [2] with an operator ⊗ of parallel composition of formulae. The resulting modal logic, called HTML (H-Team Modal Logic), is a simplification of the modal logic TML (Team Modal Logic), proposed in [29] in order to characterize team bisimulation equivalence for BPP nets. We will prove that HTML model checking is coherent with h-team equivalence checking: two markings are h-team bisimilar if and only if they satisfy the same HTML formulae.

The HTML formulae are generated from the finite set A of actions by the following abstract syntax: where a is any action in A, ttand ffare two atomic proposition (for true and false, respectively), ∧ is the operator of logical conjunction, ∨ is disjunction,  denotes possibility (it is possible to do a and then reach a marking where F holds),  denotes necessity (by doing a, only markings where F holds can be reached), ¬ is logical negation and, finally, ⊗ is the operator of parallel composition of formulae.

We denote by 
 the set of all HTML formulae, built from the actions in A. We sometimes use some useful abbreviations: if 
, , then  stands for 
, and  stands for 
.

Given a BPP net , the semantics of F is a set of markings on S. Formally, let 〚〛
 be the denotational semantics function, defined in Table 1.


Table 1. Denotational semantics.

〚〛		〚〛		
〚
〛〚
〛〚
〛		〚
〛〚
〛〚
〛		〚〛〚〛
 
〚〛		
〚〛
〚〛		
〚〛
 
〚
〛		〚
〛〚
〛
 
The semantics of tt is : every marking belongs to 〚〛. The semantics of ff is ∅: no marking belongs to 〚〛. The logical operator of conjunction  is interpreted as intersection , while, symmetrically, disjunction  is interpreted as set union . The semantics of ¬F is the set of all the markings that do not belong to 〚〛, i.e., the complement of 〚〛 w.r.t. the universe .

The semantics of  is the set of all the places that can perform a and, in doing so, reach a marking m such that 〚〛, where  is the marking obtained from m by removing all the deadlock places. For instance, the semantics of the formula  is the set of places able to perform a. The semantics of  is the set of all the places (always including also the empty marking θ) that, by performing a, can only reach markings satisfying F. Note that a place s, which is unable to perform a altogether, is in the semantics of , for any F, because the universal quantification in the definition of its semantic is vacuously satisfied; for this reason, the empty marking is in the semantics of  for any F. For instance, the semantics of the formula  is the set (including θ) of all the places that cannot perform a. The semantics of 
 is the set of markings of the form 
 such that 
〚
〛 and 
〚
〛.

Definition 24

(HTML satisfaction relation) Given a BPP net , we say that a marking  satisfies formula F, written , if 〚〛.  □

Of course, this means that m and  satisfy the same HTML formulae, because . In particular, note that a deadlock place s satisfies the same formulae as θ because .

Example 13

Let us consider the BPP net in Fig. 4 and the formula 
, where 
 and 
. The marking 
 is in the semantics of 
 because 
〚
〛 and 
〚
〛. Indeed, the semantics of 
 is given by 
: these are all the markings satisfying 
, because there are no deadlock places.  □

Example 14

Let us consider the BPP net in Fig. 3(c) and the formula . The semantics of  is given by 
. However the set of markings satisfying  is infinite: for instance, any marking of the form 
 satisfies that formula, for each .  □

We are now ready to prove the coherence theorem: two markings are h-team bisimilar if and only if they satisfy the same HTML formulae.

Proposition 25

Let  be a BPP net. If 
, then 
 and 
 satisfy the same HTML formulae, i.e., 
.

Proof

Let us assume that 
. We will prove that, for any 
, if 
 then also 
. This is enough because, as 
 is symmetric, this justifies that if 
 then also 
, and so 
 and 
 satisfy the same HTML formulae.

The proof is by induction on the structure of F, where the first two cases are the base cases of the induction.

•
: if 
, then 
〚〛. Since also 
〚〛, we get 
, too.

•
: since no marking satisfies false, 
 and also 
.

•
: since 
, it follows that 
 and 
; by induction, we can assume that also 
 and 
; hence, also 
, as required.

•
: similar to the above.

•
: if 
, then 
 such that 
〚〛; hence, there exists a marking 
 such that 
 and 
. As 
, it follows that 
 such that 
. Therefore, by definition of 
, there exists a marking 
 such that 
 and 
. Since 
 and 
, we can apply induction (because G is a subformula) and conclude that also 
; hence, 
〚〛, and so 
, as required.

•
: if 
, then 
 such that 
〚〛; hence, for all 
 such that 
, it follows that 
. As 
, it follows that 
 such that 
. Since 
, for each 
 such that 
, there exists 
 such that 
 such that 
. Now, since 
 and 
, by induction, it follows also that 
. Hence, for all 
 such that 
, we have that 
; therefore, 
〚〛, and so 
, as required.

•
: since 
, it follows that 
. By induction, as 
 is a subformula, if 
 does not satisfy 
, then also 
 does not satisfy 
, and so 
, as required.

•
: 
 only if there exists 
 and 
 such that 
, 
 and 
. As 
, there exists 
 and 
 such that 
 and 
 and 
. By induction, 
 and 
; therefore, also 
, as required.  □

Lemma 1

Let  be a BPP net. Let 
. If 
 and 
 satisfy the same HTML formulae, i.e., 
, then 
.

Proof

We want to prove that 
 and 
 satisfy the same HTML formulae} is an h-team bisimulation, hence proving that two places (or one place and the empty marking) that satisfy the same formulae are h-team bisimilar.

Assume 
 and 
. We will prove that there exists some 
 such that 
 and 
. Since R is symmetric, this is enough for proving that R is an h-team bisimulation.

Assume, towards a contradiction, that there exists no 
 such that 
 and 
. Since the net is finite, the set 
 is finite; let us denote such a set with 
, with . By assumption, for , none of the 
 is such that 
. Therefore, by looking at Algorithm 1 (which is applicable as R is an equivalence relation), one of the following two cases is possible:

(a)
there is a place 
 in the residual of 
 that has no R-match in the residual of 
; or, vice versa,

(b)
there is a 
 in the residual of 
 that has no R-match in the residual of 
.

In case (a), assume that 
 has 
 non-deadlock places which are not R-related to 
, namely 
. Hence, for each 
, for 
, there is an HTML formula 
 such that 
 and 
. Let 
 be the marking composed of all the elements s in 
 such that 
; to be precise, any 
 is such that 
, and any 
 is such that 
. Then,
 
 
  where 
 and 
. By Definition 24, also 
, where 
 and 
 is the shorthand for a formula of the form 
, for suitably chosen 
.2 On the contrary, 
 because in 
 there are less than 
 elements which are R-related to 
 and any other 
 is such that 
 and so 
.

In case (b), assume that 
 has  non-deadlock places which are not R-related to 
, namely 
. Hence, for each 
, for , there is an HTML formula 
 such that 
 and 
. Let 
 be the marking composed of all the elements s in 
 such that 
; to be precise, any 
 is such that 
, and any 
 is such that 
. Then,
 
 
  where 
 and 
. By Definition 24, also 
, where 
. On the contrary, 
 because in 
 there are less than 
 elements which are R-related to 
 and any other 
 is such that 
 and so 
.

Finally, take the formula 
, where, for ,

•
the formula 
 is 
, if case (a) applies; or

•
the formula 
 is 
, if case (b) applies.

It is easy to see that 
, because 
 for ; on the contrary, 
, because, for , 
, hence contradicting the previous assumption that 
 and 
 satisfy the same formulae. (In case , .) □
Proposition 26

Let  be a BPP net. If 
 and 
 satisfy the same HTML formulae, i.e., 
, then 
.

Proof

We actually prove the contranominal: if two markings are not related by 
, then they do not satisfy the same HTML formulae. Two markings 
 and 
 are not h-team bisimilar if, after removing all the deadlock places occurring in 
 and 
, the resulting markings 
 and 
 are such that there is no h-team bisimulation-preserving bijection among the elements of these two markings. This may happen because either 
 and 
 have not the same size or, w.l.o.g., there is an element 
 in (the residual of) 
 that has not h-bisimilar match in (the residual of) 
.

In the former case, assume that 
 for some . Let us assume that 
; since 
 is not a deadlock, 
 for some action 
. Then, the HTML formula
 is such that 
, while 
 because 
 has  non-deadlock places, and so 
 and 
 do not satisfy the same HTML formulae.

In the latter case, let s be the element of the residual of 
 that has no h-team bisimilar match in the residual of 
. Assume that 
 has  places which are not h-team bisimilar to s, namely 
. Hence, by (the contranominal of) Lemma 1, for each 
, there is an HTML formula 
 such that 
 and 
, for . Let 
 be the marking composed of all the elements 
 in 
 such that 
; to be precise, any 
 is such that 
, and any 
 is such that 
. Then,
 
 
  where 
 and 
. By Definition 24, also 
, where 
 and 
 is the shorthand for a formula of the form 
, for suitably chosen 
. On the contrary, 
 because in 
 there are less than h elements which are h-team bisimilar to s and any other 
 is such that 
 and so 
. In conclusion, since 
 satisfies the same formulae as 
 and 
 satisfies the same formulae as 
, we get that 
 and 
 do not satisfy the same HTML formulae. □

Theorem 6

(Coherence) Let  be a BPP net. It holds that 
 if and only if 
.

Proof

Direct consequence of Proposition 25, Proposition 26. □

6. Axiomatizing H-team bisimilarity
Now we want to show that h-team bisimilarity can be axiomatized. This can be done because BPP nets can be “alphabetized” by means of the process algebra BPP (where BPP is the acronym of Basic Parallel Processes) and was originally studied in [12]. BPP is a simple CCS [39], [27] subcalculus (without the restriction operator) whose processes cannot communicate. We actually study the variant BPP in [28] which requires guarded summation (as in SBPP [17], [20] or BPPg [12]) and also guarded recursion.

6.1. The BPP process algebra
Its syntax is defined as follows. Let Act be a finite set of actions, ranged over by μ, and let  be a finite set of constants, disjoint from Act, ranged over by . The size of the sets Act and  is not important: we assume that they can be chosen are as large as needed. The BPP terms are generated from actions and constants by the following abstract syntax (using three syntactic categories): 
  where 0 is the empty process,  is a process where action  prefixes the residual p ( is the action prefixing operator), 
 denotes the alternative composition of 
 and 
 ( is the choice operator), 
 denotes the asynchronous parallel composition of 
 and 
 and C is a constant. A constant C may be equipped with a definition, but this must be a guarded process, i.e., in the syntactic category s: . A term p is a BPP process if each constant in Const(p) (the set of constants used by p; see [28] for details) is equipped with a defining equation (in syntactic category s). The set of BPP processes is denoted by 
, the set of its sequential processes, i.e., of the processes in syntactic category q, by 
, while the set of its guarded processes, i.e., of the processes in syntactic category s, by 
,

The net semantics for the process algebra BPP, originally outlined in [28], is such that the set of places 
 is the set of the sequential BPP processes, without 0, i.e., 
. The decomposition function 
, mapping process terms to markings, is defined in Table 2. An easy induction proves that for any 
,  is a finite multiset of sequential processes. Note that, if , then ; moreover, note that , which is a deadlock place.


Table 2. Decomposition function.

 

Now we provide a construction of the net system 〚〛
 associated with process p, which is compositional and denotational in style. The details of the construction are outlined in Table 3. The mapping is parametrized by a set of constants that have already been found while scanning p; such a set is initially empty and it is used to avoid looping on recursive constants. The definition is syntax driven and also the places of the constructed net are syntactic objects, i.e., BPP sequential process terms. For instance, the net system 〚〛
 is a net composed of one single marked place, namely process , and one single transition . A bit of care is needed in the rule for choice: in order to include only strictly necessary places and transitions, the initial place 
 (or 
) of the subnet 〚
〛
 (or 〚
〛
) is to be kept in the net for 
 only if there exists a transition reaching place 
 (or 
) in 〚
〛
 (or 〚
〛
), otherwise 
 (or 
) can be safely removed in the new net. Similarly, for the rule for constants.


Table 3. Denotational net semantics.

〚〛
〚〛
〚〛
〚
〛
〚
〛
 
 
 
〚〛
〚〛
〚〛
 
 	
 
〚
〛
〚
〛
 

Example 15

Consider the BPP process SC for a semi-counter, whose definition is We have that〚〛
〚〛
 Therefore, the net 〚〛
 is The net 〚〛
 is Finally, the net 〚〛
 is which is (isomorphic to) the net in Fig. 1(a), where 
 is SC and 
 is .  □

The net semantics for BPP is such that:

•
the semantics of a BPP process term p is a BPP net system 〚〛
, whose initial marking is ; moreover,

•
for any BPP net system 
 (which is dynamically reduced), there exists a BPP process term 
 such that its semantics 〚
〛
 is a net isomorphic to 
 (Representability Theorem).

Therefore, thanks to these results (proved in [28]), we can conclude that the BPP process algebra truly represents the class of BPP nets. Hence, we can transpose the definition of h-team bisimilarity from BPP nets to BPP process terms in a simple way.
Definition 25

Two BPP processes p and q are h-team bisimilar, denoted 
, if, by taking the (union of the) nets 〚〛
 and 〚〛
, we have that 
.  □

Of course, for sequential BPP processes, h-team bisimulation equivalence 
 coincides with h-team bisimilarity on places 
.

Thanks to Definition 25, we can now perform the usual process algebraic study of a behavioral equivalence: to prove that it is a congruence for the operators of the BPP process algebra, to study its algebraic properties and, finally, to define a (possibly finite) sound and complete, axiomatization for it. These will be the subject of the next subsections.

6.2. Congruence
Now we show that team equivalence is a congruence for all the BPP operators.

Proposition 27

(Congruence)

1)
For each 
, if 
, then 
.

2)
For each 
, if 
, then 
 for all .

3)
For every 
, if 
, then 
.

Proof

1) Assume R is an h-team bisimulation such that .3 It is very easy to check that, for each 
, the relation 
 is an h-team bisimulation, where 
.

2) Assume R is an h-team bisimulation such that 
. Consider, for each , relation 
. It is very easy to check that 
 is an h-team bisimulation on places.

3) By induction on the size of . If , then ; as 
, it follows that 
. Hence, the thesis follows trivially:

.

If  for some , then there exist 
 and 
 such that 
. If 
, then 
; as 
 and 
, by induction, we have that 
. Then, the thesis follows trivially:
 Otherwise, if 
, by Definition 22, there exist 
 such that 
, 
 and 
. Since 
 and 
, by induction, we have that 
. As 
, by Definition 22, we have

. So, 
. □

Still there is one construct missing: recursion, defined over guarded terms only. Consider an extension of BPP where terms can be constructed using variables, such as : this defines an “open” BPP. We use the notation 
 to state that term p is open on the tuple of variables 
. For instance, 
 and 
 are open guarded BPP terms.

Definition 26

(Open BPP) Let  be a finite set of variables. The BPP open terms are generated from actions, constants and variables by the following abstract syntax (using three syntactic categories): 
  where x is any variable taken from Var. The open net semantics for open BPP extends the net semantics in Table 3 with 〚〛
, so that, e.g., the semantics of  is the net , .  □

H-team bisimulation equivalence can be extended to open terms as follows. An open term 
 can be closed by means of a substitution:
 with the effect that each occurrence of the variable 
 (within p and the body of each constant in ) is replaced by the closed BPP sequential process 
, for . For instance, 
.

A natural extension of h-team bisimilarity 
 over open guarded terms is as follows: 
 if for all tuples of (closed) BPP sequential terms 
, 
 
 
. E.g., it is easy to see that 
. As a matter of fact, for all r,
 which can be easily proved by means of the algebraic properties (discussed in the next subsection) and the congruence ones of 
.

For simplicity's sake, let us now restrict our attention to open guarded terms using a single undefined variable. We can recursively close an open term  by means of a recursively defined constant. For instance, . The resulting process constant A is a closed BPP sequential process. By saying that h-team bisimilarity is a congruence for recursion we mean what is stated in the following theorem.

Theorem 7

Let p and q be two open guarded BPP terms, with one variable x at most. Let ,  and 
. Then 
.

Proof

Consider 
. Note that when r is x, we get . The proof that R is an h-team bisimulation up to 
 [29] is not difficult. By symmetry, it is enough to prove that if 
, then 
 such that 
. The proof proceeds by induction on the definition of the net for .

•
. In this case, 
. Similarly,  
 
, and 
.

•
, with . So,  and . If 
, then this is possible only if 
. Since s is guarded, 
 is possible only if 
 with 
. Therefore, also 
 is derivable, and also 
, with 
.

•
. In this case, 
. A transition from , e.g., 
, is derivable only if 
 for some . Without loss of generality, assume the transition is due to 
. Since 
 is guarded, transition 
 is derivable because 
, with 
. Therefore, also 
 is derivable, as well 
 
, with 
.

•
. We have  and . We prove that for each 
, there exists 
 such that 
 with 
. By hypothesis, , hence also 
 is a transition in the net for ; since p is guarded, 
 is possible only if 
 with 
. Therefore, also 
 is derivable. But we also have that 
, so 
 can be matched by 
 with 
. Hence, 
 is derivable with 
. Since , also 
 is a transition with 
, as required. □

The extension to the case of open terms with multiple undefined constants, e.g., 
 can be obtained in a standard way [39], [27].

6.3. Algebraic laws
Now we list the algebraic properties of h-team bisimulation equivalence. On sequential processes we have the following algebraic laws.

Proposition 28

(Laws of the choice op.) For each 
, the following hold: 
 

Proof

For each law, it is enough to exhibit a suitable h-team bisimulation relation on places, where each place is actually a process term, according to the net semantics. For instance, for idempotency, for each p () in syntactic category s, take the relation 
 where 
 is the identity relation. It is an easy exercise to check that 
 is an h-team bisimulation on the places of 〚〛
 and 〚〛
. In fact, if 
, then (according to the semantics for ) also 
 and 
, and so 
. Symmetrically, if 
, then (according to the semantics for ) this is possible only if 
 is derivable and the condition 
 is trivially satisfied. (Instead, if , then  is an h-team bisimulation proving 
.) □

Proposition 29

(Laws of the constant) For each 
, and each , the following hold: 
  where, in the second law, p is actually open on x (while q is closed).

Proof

The required h-team bisimulation on places proving the unfolding property (in case ) is 
, where 
 is the identity relation. (If , then the required h-team bisimulation is .) In fact, if 
, then (according to the net semantics for ) this means that also 
, with 
, and so 
 as required. Symmetrically if p moves first.

For the folding property, note that this is implied by the following: if 
 and 
 then 
. In fact, if we choose 
, then 
  (which holds by hypothesis, due to the unfolding property) and, moreover, 
, which is the thesis. This statement can be easily proven by showing that the relation 
 is an h-team bisimulation up to 
 [29]. Clearly, when , we have that 
. So, it remains to prove the h-team bisimulation (up to) conditions. If 
, this can be due to one of the following:

•
 and so 
, where the substitution is applied element-wise to each place in m. In this case, also 
 is derivable such that 
.

•
 and 
, and so 
. As 
 and p is guarded, there exists m such that 
 and 
 with 
. Therefore, 
 is derivable, too. Since 
, it follows that there exists a marking 
 such that 
 with 
. Summing up, if 
, then 
 such that 
, 
 and, moreover, 
, as required by the h-team bisimulation up to condition.

Symmetrically, if 
 moves first. Hence, R is an h-team bisimulation up to 
. □
Proposition 30

(Laws of the parallel operator) For each 
, the following hold: 
 

Proof

To prove that each law is sound, it is enough to observe that the net for the process in the left-hand-side is exactly the same as the net for the process in the right-hand-side. For instance, 〚〛
〚〛
. In fact,  and the resulting net is obtained by simply joining the net for p with the net for q. Therefore, the identity relation on places, which is an h-team bisimulation, is enough to prove that 
. □

6.4. Axiomatization
In this section we provide a sound and complete, finite axiomatization of h-team bisimulation equivalence over BPP. For simplicity's sake, the syntactic definition of open BPP (cf. Definition 26) is assumed here flattened, with only one syntactic category, but we require that each ground instantiation of an axiom must respect the syntactic definition of (closed) BPP given in Section 6.1. This means that we can write the axiom  (these terms cannot be written in open BPP according to Definition 26), but it is invalid to instantiate it to  because these are not legal BPP processes (the constant C and the parallel process  cannot be used as summands).

The set of axioms are outlined in Table 4. We call E the set of axioms . By the notation  we mean that there exists an equational deduction proof of the equality , by using the axioms in E. Besides the usual equational deduction rules of reflexivity, symmetry, transitivity, substitutivity and instantiation (see, e.g., [27]), in order to deal with constants we need also the following recursion congruence rule:
 


Table 4. Axioms for h-team bisimulation equivalence.

 
 
 
The axioms A1-A4 are the usual axioms for choice [38]. The conditional axioms R1-R2 are about process constants. Note that these conditional axioms are actually a finite collection of axioms, one for each constant definition: since the set  of process constants is finite, the instances of R1-R2 are finitely many. Finally, we have axioms P1-P3 for parallel composition.

Theorem 8

(Soundness) For every 
, if , then 
.

Proof

By induction on the proof of . The thesis follows by the fact that all the axioms in E are sound by Proposition 28, Proposition 29, Proposition 30 and 
 is a congruence. □

Proposition 31

(Unique solution) Let 
 be a tuple of variables and let 
 be a tuple of open guarded BPP terms (in syntactic category s), using the variables in 
. Then, there exists a tuple 
 of closed sequential BPP terms such that 
 for . Moreover, if the same property holds for 
, then

Proof

By induction on n. We assume that there exists a tuple of constants 
, 
 that do not occur in 
.

For , we choose 
, and we close this constant with the definition 
, and so the result follows immediately using axiom R1. This solution is unique: if 
, since 
, by axiom R2 we get 
.

Now assume a tuple 
 and the term 
, so that they are all open on 
 and the additional 
. Assume, w.l.o.g., that 
 occurs in 
. First, define 
, so that the new constant 
 is now open on 
. Therefore, also for , each 
 is now open on 
. Thus, we are now able to use induction on 
 and 
, to conclude that there exists a tuple 
 of closed sequential BPP terms such that
 Note that above by 
 we have implicitly closed the definition of 
 as
 so that 
 can be chosen as 
. By axiom R1, 
.

Unicity of the tuple 
 can be proved by using axiom R2. Assume to have another solution tuple 
. This means that
 By induction, we can assume that 
, for .

Since 
 by axiom R1, by substitutivity we get 
. Let F be a constant defined as follows: 
. Then, by axiom R2, 
. Hence, since
 by axiom R2, we get 
; so the thesis 
 by transitivity. □

Lemma 2

For each 
, if 
, then .

Proof

By induction on the structure of p. The base case is  and the thesis follows trivially. If 
, then 
, so that by induction 
 for . Hence,  by substitutivity and axiom A3. If  with , then also 
, so that, by induction, . Since by axiom R1 we have , the thesis follows by transitivity. Finally, if 
, then 
 and 
, so that, by induction, we can derive that 
 and 
; the thesis  follows by substitutivity and axiom P3. □

Proposition 32

(Equational characterization) If 
 is such that 
, then there exists a set 
, 
 such that , 
 and, for , 
, where 
 is of the form 
 (with ) such that 
.

Proof

The proof is by induction on the structure of p, with the proviso to use a set I of already scanned constants, in order to avoid looping on recursively defined constants, where I is initially empty. For inducing on the structure of the pair , we need to introduce an auxiliary definition: with  we mean that this equality is derivable by the axioms in E when each  is defined as .

We prove that for  there exists a set 
, 
 such that , 
 and, for , 
, where 
 can be 0 (when ) or a sumform 
 (with ) such that 
. The thesis then follows by considering . In all the cases, except for the case of process constants, the parameter I is omitted for the sake of simplicity.

If , then let 
. If  (i.e., there is not even one non-deadlock place in ), then  by Lemma 2, and the thesis follows trivially by choosing 
. Otherwise, by induction, for each  there exist 
 such that 
, 
 for 
, where 
 is either 0 or a sumform 
 such that 
. We choose 
, where t is a term such that 
; indeed, 
 via axioms P1-P3 (for reordering the sequential subterms and absorbing 0's), and axioms R1 and A1-A3 (for transforming deadlock places into 0's) and by substitutivity. Moreover, the set of sequential processes is 
. Since for each 
 there is already a suitable 
, it remains to define 
, which is 
.

If 
, then the case 
 is impossible, as in such a case 
. In case 
, then, by induction, there exist 
 such that 
, and, for 
, 
, where 
 is either 0 or a sumform 
 such that 
. We can take 
, 
 for 
, with 
 by substitutivity and axioms A2-A3 (in fact, 
, by Lemma 2), and 
 by inductive assumption. Symmetrically in case 
. Otherwise (i.e., when 
), by induction there exist 
 and 
, such that 
, 
, and (for ) 
, where 
 is either 0 or a sumform 
 such that 
. We can take 
 so that the set is 
. Since for each 
 there is already a suitable 
, it remains to define 
.

In case , we have to consider the second parameter I: if  is such that , then 
 and 
. In fact,  follows by axiom R1. If  and , then we have to distinguish two subcases:

(i) If 
, then this case is not possible because 
 (excluded by hypothesis).

 If 
, then, by induction on , we know that for r there exist  and 
 such that 
 and for , 
 where 
 is either 0 or a sumform 
 such that 
. Note that, by construction it follows that not only 
 but also 
. Moreover, for each i such that 
, we have that not only 
, but also 
. Therefore, since, by axiom R1, , we have 
 by transitivity, where 
. Hence, we can choose 
 and, for , 
 and, moreover, 
 and 
 if 
, while 
 otherwise. Note that 
 (as both are C) and also that 
 for . Finally, note that for each 
, we have turned 
 from 0 to 
, so that 
 is 0 only when 
; therefore, we can conclude that, when , all the 
's are non-empty sumforms. □

Example 16

To illustrate how induction works in the proof of the proposition above, take the constant . We have to start with , whose solution requires to consider , in turn requiring to consider  and . As , we have that for  the required terms are 
 and 
, while for  we get 
. Now we can compute the terms associated with , which are: 
, 
, 
, 
. So, now we can compute the terms for  which are: 
, 
, 
 
, 
, 
. Summing up, after removing the duplicates, the required terms for C are 
, with associated terms 
, 
 and 
.

As a further tiny example, consider the term  with  and . We have to start with , whose solution requires to consider  and . Since , we have that 
. Since , we have to induce on , and so on . This latter originates the terms 
, 
, 
 and 
, so that, for , we get 
, 
, 
, 
, 
 and 
 (of course, 
 is redundant and so omitted in the following). So, for  we get the terms 
, 
, 
, 
, 
. Finally, for , we get 
, 
, 
, 
, 
, 
.  □

Proposition 33

(Completeness for sequential terms) For each 
, if 
, then 
.

Proof

If 
, then the thesis follows by Lemma 2.

Otherwise, by Proposition 32, we have that there exists a set 
 of sequential processes such that 
, and there exist 
 such that, for , 
 and 
 is a sumform 
 (with ) such that 
. This means that each 
 is a non-deadlock place.

Similarly, there exists a set 
 of sequential processes such that 
, and there exist 
 such that, for , 
 and 
 is a sumform 
 (with 
) such that 
. So, each 
 is a non-deadlock place.

By Theorem 8, we have that 
 and 
; as by hypothesis 
, by transitivity we have that 
 and 
. Let 
 and 
. We want to prove that 
 so that the thesis 
 follows by transitivity.

Now, let 
 
. Clearly, . As 
 and 
 are h-team bisimilar when 
, the following hold: for each 
, there exists a total surjective relation 
 between  and 
 given by 
, where 
 if

•
 such that 
 for ;

•
, such that 
 for ; and

•
 for . (If , then 
).

Now, for each 
, let us consider the variables 
 and the open term
 
 where, if 
 then 
, while in case , the open parallel process
 is actually 0. By Proposition 31, for each 
, there exists 
 such that 
, where 
 denotes the tuple of terms of the form 
 for each 
, and 
 denotes the tuple of variables 
 for each 
.
If we close each 
 by replacing each 
 with 
, we get 
 
 which is equal, up to axioms P1-P3 (for reordering the sequential subterms and absorbing 0's) and axioms R1 and A1-A3 (for transforming deadlock places into 0's), to 
, in turn equal, via axioms A1-A4, to 
: in fact, 
 is surjective so that the two summations differ only for possible repeated summands. Since 
 for , we get
 
 Therefore, we note that 
 is such that 
 and so, by Proposition 31, we have that 
. Since , we have that 
.

Similarly, if we close each 
 by replacing each 
 with 
, we get 
 
 which is equal, up to axioms P1-P3 (for reordering the sequential subterms and absorbing 0's) and axioms R1 and A1-A3 (for transforming deadlock places into 0's), to 
, in turn equal, via axioms A1-A4, to 
: in fact, 
 is surjective so that the two summations differ only for possible repeated summands. Since 
 for , we get
 
 Thus, we note that 
 is such that 
 and so, by Proposition 31, we have that 
. Since , we have that 
; by transitivity, it follows that 
, and so that 
. □

Theorem 9

(Completeness) For every 
, if 
, then .

Proof

The proof is by induction on the sum of the sizes of  and . If , then . By observing the definition of the decomposition function in Table 2, this is possible only if p and q are either 0 or a parallel composition of 0's, e.g., ; hence,  and , possibly using axioms P1-P3; hence, by transitivity we get .

If , then we can assume, w.l.o.g., that , so that there exist 
 and 
 such that 
, so that 
 by axioms P1-P3.

If 
, then 
 and, by Lemma 2, we get 
. Hence, 
 by substitutivity and axiom P3. Since 
, by transitivity we get 
, so that, by induction, we get 
. Thus, the thesis  follows by transitivity.

Otherwise, if 
, then 
 exist such that 
, 
 and 
. By the definition of the decomposition function and by axioms P1-P3, this means that 
 and 
. By Proposition 33 we have that 
. By induction, we have that 
. By substitutivity we get 
 and so the thesis follows by transitivity. □

7. Conclusion, related literature and future research
Team bisimulation equivalence is a truly concurrent equivalence which is the most natural, intuitive and simple extension of LTS bisimulation equivalence to BPP nets. It also has a very low complexity: indeed, ∼ can be computed in 
 time, where m is the number of net transitions, p is the size of the largest post-set (i.e., p is the least natural such that 
 for all t) and n is the number of places (or in , cf. Remark 5). After having computed ∼, checking whether two markings of size k are team bisimilar can be done in 
 (or in , cf. Remark 5). On the contrary, interleaving bisimilarity over BPP nets is PSPACE-complete [33]. As, in order to perform team bisimulation equivalence checking, there is no need to compute the LTSs of the global behavior of the systems under scrutiny, our proposal seems a natural solution to solving the state-space explosion problem for BPP nets.

Team bisimulation equivalence coincides with causal-net bisimilarity and state-sensitive fully-concurrent bisimilarity (Corollary 2, Corollary 3), hence it corresponds to the intuitively correct bisimulation-based causal semantics for BPP nets. Moreover, it also coincides (as proved in [29]) with strong place bisimilarity [3], [4] and with structure-preserving bisimilarity, because our causal-net bisimilarity is similar to the process-oriented characterization of that equivalence in [24]. From a technical point of view, team bisimulation seems a sort of egg of Columbus: a simple (actually, a bit surprising in its simplicity) solution for a presumedly hard problem.

This paper is not only an addition to [29], where team bisimilarity was originally introduced, but also an extension to a team-style characterization of fully-concurrent bisimilarity, namely h-team bisimilarity. For this variant team bisimulation equivalence, we have described a modal logic characterization and a finite, sound and complete, axiomatization; therefore, we have characterized fully-concurrent bisimilarity for BPP nets logically and axiomatically.

The complexity results we have obtained for fully-concurrent bisimilarity (cf. Remark 8), by means of its characterization in terms of h-team bisimilarity, seem roughly comparable with those in [20], where, by using an event structure [49] semantics, Fröschle et al. show that history-preserving bisimilarity is decidable for the BPP process algebra with guarded summation in 
 time, where n is the size of the involved BPP terms; however, this value n – defined as “the total number of occurrences of symbols (including parentheses)” [20] – is much larger than the size of the corresponding BPP net, and so our complexity result seems better.

We think that causal-net bisimilarity and state-sensitive fc-bisimilarity (hence, also team bisimilarity) are more accurate than fc-bisimilarity (hence, h-team bisimilarity) because they are resource-aware. In the implementation of a system, a token is an instance of a sequential process, so that a processor is needed to execute it. If two markings have different size, then a different number of processors is necessary. Hence, a semantics such as causal-net bisimilarity, which relates only markings of the same size, is more accurate as it equates distributed systems only if they require the same amount of execution resources. Paper [31] offers, in the area of information flow security, further arguments in favor of these concrete equivalences. Moreover, [24] argues that the resource-aware structure-preserving bisimilarity (which coincides with team bisimilarity on BPP nets) is the coarsest semantics respecting inevitability [40], i.e., if two systems are equivalent, and in one the occurrence of a certain action is inevitable, then so is it in the other one.

The modal logic HTML extends HML [32], [2] with an operator ⊗ of parallel composition of formulae, in the style of Caires' and Cardelli's spatial logic [9]. In order to characterize team bisimilarity, we proposed in [29] a slightly more discriminating modal logic, called TML, which is sensitive to the kind of termination. To this aim, TML exploits two atomic propositions nnand vv, such that nnis satisfied by all the places, while vvis satisfied by θ only. Therefore, the empty marking and a deadlock place are distinguished by this logic. On the contrary, the semantic definition of HTML (as well as of HML) is insensitive to the kind of termination: a deadlock place and the empty marking satisfy the same HTML formulae. This difference between the semantics of TML and that of HTML is the essence of the difference between team bisimulation equivalence and h-team bisimulation equivalence. Hence, the modal logic HTML proposed here provides an extremely simple modal logic characterization of h-team equivalence (and so also of fully-concurrent bisimilarity) over BPP nets. More complex modal logics characterizing some non-interleaving equivalences on larger classes of distributed systems have been proposed in, e.g., [8], [5]. A possible future work is to extend HTML to become a temporal logic, with least and greatest fixpoint operators, as in Kozen's modal mu-calculus [35].

Since BPP (with guarded sum) is the process algebra representing, up to net isomorphism, all the possible BPP nets [28], it is interesting to compare team (and h-team) bisimulation equivalence with other non-interleaving equivalences proposed on process algebras, such as causal bisimilarity [13], distributed bisimilarity [10], location bisimilarity [11] or performance bisimilarity [26]. On BPP (with guarded sum) all these non-interleaving equivalences do coincide [1], [18], [36] with history-preserving bisimilarity [47], [22], [14]. As discussed above, team bisimulation equivalence coincides with causal-net bisimilarity, and so it is slightly finer than history-preserving bisimilarity, which coincides with fully-concurrent bisimilarity (hence with h-team bisimilarity). For instance, let C be a process constant with empty body, ; then the two BPP process terms  and  are history-preserving bisimilar, but they generate two markings of different size, and so they are not related by team bisimulation equivalence.

The axiomatization we have provided here for h-team bisimulation equivalence is an adaptation of the axiomatization for team bisimulation equivalence outlined in [29]. The main difference is that in [29] axioms A3-A4 have the side condition  and that axiom R1 has the side condition  (and so there is one extra axiom handling the case when : in such a case ). These side-conditions are necessary as the net semantics for 0 is the empty marking θ, while the net semantics for  (as well as of ) is a deadlock place, which is not team bisimilar to θ.

Our axiomatization, and the proof techniques we adopted to prove its completeness, are based on [38], where Milner provided a finite axiomatization of interleaving bisimilarity for finite-state CCS. Nonetheless, our technical treatment, based on constants defined over guarded processes (e.g., ) rather than on the recursive operator (with possible unguarded variables; e.g. ), is a bit simpler than that. In fact, the axiomatization in [38] uses one further axiom for handling unguardedness: .

In the literature there is a sort of dichotomy between the use of process constants or of the fixpoint operator for expressing recursive behavior. Indeed, recursion by constants is considered more useful for applications (see, e.g., [39], page 56), but for theoretical studies the fixpoint operator is considered more convenient. To confirm this view, Milner wrote ([39] on page 165):

“For formal studies such as proof of completeness it is preferable not to admit Constants with defining equations, but to stick to the pure  expressions introduced in Section 2.9 - even though they are not very pleasant to use in applications.”

Actually, we disproved his statement by showing that recursion by process constants can be treated technically in a very satisfactory manner also for axiomatizations. Moreover, the use of process constant allowed us to define, in a very simple way, a denotational net semantics for BPP (cf. Table 3); on the contrary, a denotational net semantics for the BPP variant with the fixpoint operator is not immediate.
To the best of our knowledge, in the literature there are only other two examples of finite axiomatizations for truly-concurrent equivalences on BPP. In [12] distributed bisimilarity [10] is axiomatized for BPP with guarded summation, and in [19] hereditary history-preserving bisimilarity [34] is axiomatized for full BPP with a sequent-based approach. These two finite axiomatizations are actually sound and complete also for history-preserving bisimilarity (hpb, for short), as on BPP with guarded summation these two behavioral equivalences coincide with hpb [1], [18]. Our axiomatization is an alternative finite axiomatization of hpb for BPP (with guarded summation and guarded recursion).

Interestingly, the modal characterization (i.e., HTML) and the axiomatization of h-team bisimilarity (cf. Table 4) for BPP are conservative extensions of the corresponding modal (i.e. HML) and axiomatic (i.e., axioms A1-A4 and R1-R2) characterizations of interleaving bisimulation on finite-state CCS [38], [32], [39]. Indeed, we think that our contribution sheds light on the fact that BPP h-team bisimilarity seems the most natural conservative extension of finite-state CCS interleaving bisimulation to the distributed setting where systems are composed of a collection of sequential (but that can fork, so that this collection can grow unboundedly), non-cooperating processes.

The linear-time variants of history-preserving bisimilarity and causal-net bisimilarity are partial-order-trace equivalence (Definition 15) and causal-trace equivalence (Definition 14), respectively. On the BPP process algebra, we have that, e.g.,  generates the same causal nets as , i.e., 
, and also that 
 generates isomorphic partial orders to those of q, i.e., 
. We conjecture that these linear-time equivalences can be axiomatized for BPP, by simply adding the distributivity axiom to the axiomatization of h-team bisimilarity in Table 4 and the corresponding axiom table for team bisimilarity in [29].

As future research, we plan to investigate weak team/h-team bisimilarity and branching team/h-team bisimilarity for BPP nets, following the intuition of weak bisimilarity [39] and branching bisimilarity [23] on LTSs. A first step in this direction is [30].