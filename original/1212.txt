Abstract
This work is devoted to the study of the Balanced Connected Subgraph Problem (BCS) from a complexity, inapproximability and approximation point of view. The input is a graph G=(V,E), with each vertex having been colored, “red” or “blue”; the goal is to find a maximum connected subgraph G′=(V′,E′) from G that is color-balanced (having exactly |V′|/2 red vertices and |V′|/2 blue vertices). This problem is known to be NP-complete in general but polynomial in paths and trees. We propose a polynomial-time algorithm for block graph. We propose some complexity results for bounded-degree or bounded-diameter graphs, and also for bipartite graphs. We also propose inapproximability results for some graph classes, including chordal, planar, or subcubic graphs.

Keywords
Complexity
Approximation
Color-balanced subgraph

1. Introduction
In this paper, we consider the combinatorial optimization problem Balanced Connected Subgraph. Given a connected bichromatic graph  - a graph having its vertices colored with two colors blue or red, not necessary proper -, the goal is to determine a maximum subset 
 such that 
 is balanced - with the same number of blue and red vertices - and subgraph induced by 
 is connected.

Image 1
1.1. Related work
Many well-studied combinatorial optimization problems consist in finding induced subgraphs with a given property. For instance, finding a maximum clique or a maximum independent set are one of the 21 -complete problems classified by [12]. [9] describe a general version of these problems (GT21-22): maximum induced (connected) subgraph with property Π. If Π is hereditary and non-trivial then the problem is -complete and some approximability results hold.

In this article, we investigate the Balanced Connected Subgraph problem (BCS) as introduced by [3]. Given a 2-colored graph (using colors red and blue), find the largest connected subgraph containing as many vertices of each color. Notice that the property of being color-balanced is far from being hereditary, hence the need for an ad-hoc study.

BCS remains -complete in bipartite graphs, chordal graphs and planar graphs [3]. They also gave polynomial algorithms solving BCS in quadratic time for splits, graphs of diameter two and properly colored bipartite graphs, and in time 
 for trees. The research on this problem remains very active; recently two recent articles related to balanced connected subgraph were proposed [2], [5]: they design polynomial-time algorithms for the BCS problem on interval 
, circular-arc 
 and permutation graphs 
. The problem remains hard even for unit-disk graphs.

In [13], the authors show that BCS can be solved in 
-time for trees (improving the complexity given in [3]) and in 
-time for interval graphs. The former result can be extended to bounded treewidth graphs. They also consider a weighted version of BCS (WBCS). They prove that this variant is weakly -hard even on star graphs and strongly -hard even on split graphs and properly colored bipartite graphs, whereas the unweighted counterpart is tractable on those graph classes. Finally, they propose a exact exponential-time algorithm for general graphs with time complexity 
. Their algorithm is based on a variant of Dreyfus-Wagner algorithm for the Steiner Tree problem.

As they point out, BCS is strongly related to the Maximum Weight Connected Subgraph (MWCS) problem mentioned by [11]. Note that BCS is neither a special case nor a generalization of MWCS. In MWCS, the goal is to find a connected subgraph of maximum weight. If BCS were to be formulated as a MWCS with weights say +1 for red vertices and −1 for blue vertices, we would search for the largest subgraph of weight exactly 0.

BCS is also related to Steiner Tree problem. In fact, assume that you are given a graph G along with a 2-coloration (using colors red and blue) of its vertices (less red vertices than blue vertices). Asking whether there exists a BCS in G containing all the red vertices can be seen as a special case of Steiner Tree: the red vertices are the terminals, and we search for a Steiner Tree of size r twice the number of terminals. In that case, one can determine the existence of a BCS containing all the red vertices by using efficient exact algorithms for Steiner. If in Steiner tree there is more red than blue vertices, we can always complete with blue vertices (the neighboring vertices of the Steiner tree are blue) to obtain a BCS.

The Graph Motif (GM) problem is tied to BCS as well. GM consists, given a colored graph G and a multiset of colors M, in finding a connected subgraph such that the multiset of colors assigned to its vertices is exactly M. Finding a balanced connected subgraph of size at least 2k can be reduced to a polynomial number of motif searches in a 2-colored graph: all one has to do is to search for the motif {red,…,red, blue,…, blue} with k occurrences of red and blue, then  occurrences of each, and so on, upon either finding a balanced connected subgraph or having proved that none exists.

GM was first introduced by [15] in the context of metabolic networks. They showed that GM is -complete even if the input graph is restricted to be a tree. Fellows et al. [7], [8] further proved that GM remains -complete in trees of maximum degree 3, and even if the input graph is a 2-colored bipartite graph of maximum degree four. As a positive result, they gave an  algorithm for GM parameterized by the size of the motif in the general case. Since BCS can be solved by solving a polynomial number of instances of GM, using their  algorithm to do so would result in an  algorithm for BCS parameterized by the size of the solution.

Consider an optimization variant of GM: find the largest connected sub-graph which multi-set of colors is included in the given motif [6]. Moreover we proved this variant to be -hard in trees of maximum degree three.

A rather comprehensive list of applications for MWCS can be found in [3]. While we do not motivate BCS with further practical applications, we believe it may prove to be useful in network design applications (where the colors represent roles assigned to the vertices), social data-mining (colors represent classes of individuals), or even electoral applications (see [1] for a study of gerrymandering as a graph partitioning problem with a red-blue colored graph as input).

On the other hand, BCS appears of interest in a purely theoretical point of view. The problem is quite hard complexity-wise, and can be generalized in a lot of different ways. For instance, one can loosen the “balanced” constraint and ask for a connected subgraph minimizing the ratio between the number of red vertices and blue vertices. Other generalizations would be increasing the number of colors in the input coloration, enforcing the subgraph being looked for to have additional properties (being a path, tree, 2-connected …), or coloring the edges instead of the vertices.

1.2. Our contributions
The contributions of this paper are summarized by Table 1.


Table 1. Complexity and inapproximability results discussed in this paper for BCS according to structural parameter and/or graph topology.

Topology or parameter	Complexity	Approximation results
Block graph	 - O(n5) - Theorem 1	-

D = 3	 Theorem 4	
Bipartite D = 4	 Theorem 2	

Planar Δ ≤ 4	 [3]	No- Theorem 8
Bipartite Δ ≤ 4	 Theorem 7	No- Corollary 2
Bipartite Δ ≤ 3	 Theorem 6	

Chordal	 [3] and Theorem 9	No- Corollary 5
We study the computational complexity of BCS for bichromatic graph, in some restricted cases, namely bipartite graphs of diameter four, graphs of diameter three, bipartite sub-cubic graphs … In each case, we establish the -completeness of BCS by polynomial-time reduction from well-known problems and we propose some inapproximability results according to some topologies. We propose a approximation with non constant ratio. We extend the hardness for 3-colored graph even if the diameter is two.

Organization of the paper
In the next section, we propose a polynomial time algorithm for block graph. Section 3 is dedicated to -completeness and non-approximation proofs in bounded-diameter graphs: bipartite graphs of diameter four, and graph of diameter three. Complexity results are extended to the case of three colors and diameter two is also presented. Section 4 focuses on bipartite (sub)cubic graphs, on planar graph with bounded degree in complexity and inapproximation viewpoint.

2. Polynomial time algorithm for block graph
A block graph is a graph where all the biconnected components are cliques. Recall that block graphs are a particular case of chordal graphs. In this part, we give a polynomial-time algorithm for the BCS problem on block graphs. We focus on this graph class since for trees the problem admits a polynomial-time algorithm while it is -complete for chordal graphs [3].

Let  be a block graph with 
. We begin by observing that, at least one articulation point of G belongs to one of optimal solutions for each instance. Indeed, if optimal solution has no articulation point, it is part of only one clique. Then this clique contains vertices of the solution of both colors. So we can exchange one of the articulation points without changing the size of the solution. Thus if at least one vertex of a clique is in the optimal solution then there is also at least one articulation point in it.

Let Q be the set of all blue articulation points, and let 
 be the graph G induced by 
. Clearly, we have 
. Without loss of generality, we suppose that 
 (otherwise there is a trivial optimal solution containing 
 and 
 random vertices from  
 ).

Lemma 1

For each optimal solution on a graph G, there exists a solution on G of same size which is included into graph 
.

Proof

Let S be an optimal solution on graph G, we note 
 (resp. 
) the red vertices (resp. blue vertices) from S.

Recall that 
, and 
, implying that 
. If there exists a blue vertex 
 then , and can be replaced in S by any other vertex y from 
. Note y always exists as 
. Thus one obtains a solution 
⁎
 included in 
. □

As a consequence of Lemma 1, it is sufficient to compute a optimal solution on 
 instead of on G.

Observation 1

Let us consider an optimal solution S of 
. Let us construct a breadth-first search tree in 
 restricted to vertices from S and starting from an articulation point x of 
. This tree is contained in the breadth-first search tree starting in G' starting from the same articulation point x but not restricted to vertices from S.

Let  be a spanning tree of G computed by following a breadth-first search from x. Finally,  is the optimal solution obtained on T using algorithm [3].

Theorem 1

Let G be a connected bichromatic block graph. Then one can compute a BCS of G in 
 time.

Proof

First note that Bhore's improved algorithm proposed in [3], Lemma 5, produces all possible balanced subtrees rooted at a root t in 
 time complexity for trees.

We suppose G contains at least one articulation point - otherwise the solution is trivial as G is a clique.

It is not difficult to see that for each articulation point x, all vertex sets that contain x and induce a connected subgraph of G also induce a connected subgraph of T, thus all solutions containing x are considered by our algorithm. Since there exists an optimal solution that contains an articulation point, this proves the correctness of our algorithm.

For each articulation point x we construct a BFS-spanning tree rooted on x (at most n trees) and run Bhore's improved algorithm on it.

There will necessarily be at least a spanning tree that contains the optimal solution for G.

The overall time complexity is 
. □

Corollary 1

In a recent result proposed in [14], BCS can be solved in 
 time for trees. Using this result we can improve the time complexity of our algorithm to 
.

3. Bounded-diameter graphs
3.1. Bipartite graphs of diameter four
In the following, we prove that BCS remains -complete in graphs of diameter four. The reduction is based on Dominating Set in graphs of diameter two, which is -complete [16]. The following construction transforms any graph of diameter two into a 2-colored bipartite graph of diameter four.

Image 2
Construction 1

Let  be a graph on n vertices and . We build 
 an instance of BCS as follows:

–
add 2n blue vertices 
 and 
;

–
add  red vertices 
 and 
;

–
for all , add the edge 
;

–
for all , for all  add the edge 
;

–
for all , for all  add the edge 
.

Construction 1 is clearly done in polynomial time and illustrated by Fig. 1. If the base graph G has diameter two, then the graph 
 obtained after transformation has diameter four. Indeed, each couple 
 or 
 can be connected by a path of length two between x and y. It follows that each couple 
 can be connected by a path of length at most three. Finally, since all the red vertices have a neighbor in 
 or 
, and 
 is a complete bipartite graph, any pair of red vertices can be connected by a path of length at most four.

Fig. 1
Download : Download high-res image (64KB)
Download : Download full-size image
Fig. 1. Building an instance of BCS of diameter 4 from a graph of diameter 2.

Theorem 2

Balanced Connected Subgraph remains -complete on bipartite graphs of diameter four.

Proof

Let G be a graph of diameter two and 
⁎
. Let 
 be the graph obtained from G using 1. Let us prove that G contains a dominating set of size k if and only if 
 has a BCS of size .

⇒
if G contains a dominating set D of size k, then let 
 be the vertices of 
 in 
 corresponding to D. 
 contains  red vertices and  blue vertices. Since D is a dominating set in G, every vertex in 
 is connected to a vertex of 
. 
 is thus connected and balanced.

⇐
if 
 has a BCS S of size , then it has to include all the red vertices. For the pendant red vertices to be connected in S, S must include 
. Since 
 is of size n, S contains exactly k other blue vertices, and those vertices belong to 
. Moreover, 
 being an independent set and S being connected, every vertex of 
 must be connected to at least one vertex in 
. The vertices of G corresponding to 
 in 
 thus form a dominating set of size k.

Since DM is -complete in graphs of diameter two [16], and BCS being in , the discussion above proves the theorem. □

We propose to extend previous complexity result to derive a lower bound for Exact Algorithms. Assuming , there is no 
 time algorithm for DM [17] and since Construction 1 leads a linear transformation we obtain the following Theorem.

Theorem 3

Assuming , there is no 
 time algorithm for Balanced Connected Subgraph in presence of bipartite graphs of diameter four.

3.2. Graphs of diameter three
To prove that BCS remains -hard in graphs of diameter three, we design a reduction from Colorful Connected Subgraph which is stated as follows.

Image 3
To the best of our knowledge, the complexity of CCS – as stated above – is not clearly established. To show that CCS is -complete, we use a result given by [7] on the Graph Motif problem. Recall that GM consists, given a colored graph  and a multiset of colors , in finding a connected subgraph of G which multiset of colors is exactly .

[7] show in their Theorem 1 that GM remains -hard even if the motif  is colorful, that is each color appears at most once in . In their reduction, the instance of GM they obtain is such that the motif  is exactly the set of all colors. Therefore, GM remains -complete even if  is the set containing each color once. Now, one can observe that CCS is -hard because in case p is equal to k, then CCS is equivalent to GM in the aforementioned case. The following lemma holds, since CCS is clearly in .

Lemma 2

Colorful Connected Subgraph is -complete.

We now reduce CCS to BCS in graphs of diameter three. The idea of the construction is to create a clique containing one red vertex and “a lot” of blue ones for each color. The cliques are then interconnected, making sure that any pair of cliques is connected by at least one edge.
Construction 2

Let  be a graph and  a p-coloring of its vertices. We build 
 a 2-colored graph in the following way (refer to Fig. 2).

–
 with 
.

•
For all , 
 is connected as a clique, and each one of its vertices, except 
, is blue.

–
For all , add the corresponding edge to 
.

–
For all 
 such that there is no edge between 
 and 
, add a blue vertex 
 to 
 (connected to every vertex in 
) and a blue vertex 
 to 
 (connected to every vertex in 
), as well as the edge 
.

Fig. 2
Download : Download high-res image (65KB)
Download : Download full-size image
Fig. 2. Applying Construction 2 to a 3-colored graph. The clique C1 corresponds the green vertices c,d and e, the clique C2 to the pink vertices a and b, and the clique C3 to the orange vertex f. Vertices 
 and 
 originate from the absence of a yellow-pink edge and ensure r2 and r3 are connected by a path of length three.

Construction 2 can be applied in polynomial time. The resulting graph has diameter three since it is composed of pairwise connected cliques. Fig. 2 gives a example.

Theorem 4

Balanced Connected Subgraph is -complete in graphs of diameter three.

Proof

Let  be a graph and  a p-coloring of its vertices. Let 
 be the 2-colored graph obtained by applying Construction 2 to G. Let , . We claim that G has a CCS of size at least k if and only if 
 has a BCS of size at least 2k.

⇒ If G has a CCS, S, of size at least k, then the corresponding vertices in 
 are blue and induce a connected subgraph intersecting each clique at most once. For each clique that S intersects, just add said clique's red vertex to S. Doing so, we build a balanced connected subgraph in 
 of size at least 2k.

⇐ If 
 has a BCS, S, of size at least 2k then its contains at least k red vertices belonging to at least k different cliques. Since the neighborhoods of red vertices are pairwise disjoint, each red vertex must have exactly one blue neighbor (in its clique) belonging to S. Assume that a vertex 
 belongs to S, then it is the sole neighbor of 
. In order to connect 
 to other red vertices, 
 has to belong to S. Now since 
 is assumed to belong to S, 
 cannot have any other blue neighbor in S. Under those assumptions, S cannot be of size greater than four which absurd because we assumed . Therefore, vertices of type 
 cannot belong to S, and every blue vertex in S corresponds to a vertex in G. Since the red vertices have degree 1 in S, removing them from S does not break the connectivity and thus the set of blue vertices in S corresponds to a connected subgraph in G. Since S contains at most one blue vertex per clique, the set of blue vertices of S is a CCS of size at least k in G.

The previous discussion concludes the polynomial-time reduction from CCS to BCS. Since the instance of BCS obtained through Construction 2 has diameter three, the theorem holds. □

3.3. Three colors and diameter two
In this section we extend the model by considering a 3-colored graph instead of bichromatic. In such context we present a -complete result for graph admitting a diameter two. Recall that for two colors and diameter two the problem admits a polynomial-time algorithm [3]. Clearly, for diameter one the problem is trivial.

Construction 3

Let I be an instance of CCS with k-colors, we will construct an instance 
 of BCS with three colors in the following way:

Let G an input graph and let 
 be the set of vertices with color i in an instance I of CCS.

–
We add 2k vertices 
 and 
 to the graph G.

–
A edge from 
-vertex (resp. 
-vertex) to 
-vertices is added.

–
We add  vertices 
.

–
For each 
-vertex we add edge from 
 to 
 (resp. 
) and add a complete graph between 
 and 
 (resp. 
).

–
The X-vertices (resp. Y-vertices) are colored in blue (resp. red). All remaining vertices are colored in white.

Lemma 3

The graph H obtained by Construction 3 admits a diameter two.

Proof

–
Since vertex 
 are neighbors of vertices 
 so in two steps the sets  and Z are visited.

–
Each vertex 
 is neighbor of vertices 
 (going through 
), 
 (by 
) and 
 (by 
), 
 (by 
), 
 (by 
).

–
From 
-vertex to 
-vertex going through 
 if  by 
 otherwise. □

Theorem 5

Balanced Connected Subgraph is -complete for three colors even if the diameter is two.

Proof

Let  be a graph and  a p-coloring of its vertices. Let 
 be the 3-colored graph obtained by applying Construction 3 to G.

BCS with three colors is in . Assume that  and .

We claim that G has a CCS of size at least k if and only if H has a BCS of size at least 3k. Let 
⁎
 be the set of the BCS-vertices.

⇒ If G has a CCS denoted S, of size at least k, we obtain a BCS of size at least 3k by taking the X-set (resp. Y-set) and the k vertices in graph G solution of CCS.

⇐ If H has a BCS denoted S of size at least 3k. Let 
 be the set of white vertices in the solution S.

All X-vertices and Y-vertices are in S. Each white vertex from  admits two neighbors in . Since there are only k white-vertices, the white neighborhoods 
 are disjointed.

1.
Assume that 
. Therefore, the following vertices cannot be in S: none vertex from 
 (resp. 
), none vertex 
, (resp. 
).

So the graph H cannot be connected.

2.
So, the solution 
. The X-vertices and Y-vertices admit a degree one.

The subgraph induced by 
⁎
 contains a unique vertex in each 
 and remains connected. □

4. Bounded-degree graphs
4.1. Cubic bipartite
We prove BCS to be -complete in cubic bipartite graphs by reduction from Exact Cover by 3-Sets-3 [10].

Image 4
The construction consists in encoding each set by a blue subgraph (a set-gadget) and the elements by red vertices. The graph is then completed by making sure there are less red vertices than blue vertices. In the end, the starting X3C3 instance is positive if and only if there is a BCS containing all the red vertices in the constructed graph.

Construction 4

Let  be an instance of X3C3, 
 and 
, with q even. Let  be an instance of BCS obtained from  as follows (see Fig. 4).

–
For each 
 add a vertex 
 (an element-vertex);

–
for each 
, 
:

•
add a blue gadget 
 on 14 vertices. Denote 
, 
 and 
 (resp. 
, 
 and 
) the vertices of degree 2 at the top (resp. bottom) of 
;

•
add the edges 
, 
 and 
;

•
add 6 red vertices partitioned into 
 and 
. Add the edges 
, 
, 
 
, 
, 
 and 
;

•
add 2 (if 
 
) or 3 (elsewise) 2-regular bipartite graphs on 6 blue vertices connected by matchings. Connect the first of these graphs to 
 by a matching. Enforce 3-regularity by adding a red terminal vertex 
 connected to the remaining 3 vertices of degree 2;

–
for each , add the edges 
 and 
;

–
add the edges 
 and 
.

Fig. 4
Download : Download high-res image (155KB)
Download : Download full-size image
Fig. 4. Encoding an instance of X3C3 into an instance of BCS (bipartite cubic). From bottom to top – 3q red element-vertices; 3q blue set-gadgets on 14 vertices; 3q red connectivity-gadgets on 6 vertices connected as an accordion; 3q chains of 2 to 3 blue 2-regular bipartite graphs on 6 vertices; and 3q red terminal vertices.

Observe that the graph G obtained through Construction 4 is bipartite: in Fig. 4 bipartiteness is depicted by the shape of the vertices, edges all have one square-shaped endpoint and one circle-shaped endpoint. G is also cubic. It contains 24q red vertices and 93q blue vertices. The construction is done in polynomial time. The following lemma proves that in order to connect all the red terminal vertices (
) to the red vertices 
, “a lot” of blue vertices are mandatory.

Lemma 4

Let  be an instance of X3C3, 
 and . Let  be an instance of BCS obtained from  through Construction 4. Let S be a BCS of G of size 48q. Then S contains at most 7q blue vertices belonging to set-gadgets.

Proof

Since , S contains all the red vertices. In particular S contains 
. Since  is connected, each 
 must be connected to 
. Denote 
 the number of internal vertices in a shortest path from 
 to 
 in . Observe that 
 is at least 4 if 
 
, and at least 6 otherwise. The number of vertices required to connect 
 to the rest of S is:(1)
 
 
 
 
 
(2)
 
 
(3)

Since S contains 24q blue vertices and at least 17q form paths connecting 
 to 
, the number of vertices belonging to set-gadgets cannot exceed 7q thus the lemma holds. □

We now prove the existence and unicity of a solution to an integer linear program that will describe how “expensive” (in the number of blue vertices) it is to connect all the element-vertices to the other red vertices.

Lemma 5

Let  and (L) be the following integer linear program: 
 

 and 
 is the unique optimal solution to (L).

Proof

Let 
 be an optimal solution to (L).

–
If 
, then 
 because if 
 then 
 has better cost which is absurd). Assuming 
, the constraint (1) becomes 
 which implies 
 since 
. Now 
 has lower cost, this is absurd therefore  
 
 .

–
Assume 
. With 
, the constraint (1) becomes 
 which implies 
. Now 
 has lower cost, this is absurd therefore  
 
 .

We now have 
 and necessarily 
 to satisfy (1) and the lemma holds. □

Theorem 6

Balanced Connected Subgraphis -complete in bipartite (sub)cubic graphs.

Proof

Let  be an instance of X3C3 and  the graph obtained from  through Construction 4. Let us prove that  is positive if and only if G contains a BCS of size 48q.

⇐ If G contains a BCS, S, of size 48q we claim that S contains exactly q paths of length 7, spread across q distinct set gadgets. To prove this, we reason on how the set-gadgets are used to connect elements. Denote  the set of red vertices in G, and 
 the red vertices that are not element-vertices.

Since , S contains all the red vertices. In particular, S contains all the element-vertices. For an element x to be connected to 
, S must contain a path from x to 
 and that path goes through vertices of set-gadgets. Either the vertices of this path belong to a unique set-gadget, or they belong to several. In case the path spreads across several set-gadgets, it must go through other element-vertices, one of them being connected to 
 by a path belonging to a unique set-gadget.

Now, see Fig. 5. We classify the gadgets in three types, depending on how they connect elements in S. We abuse notation by saying that S contains a gadget when we actually mean that S contains some vertices of said gadget.

–
Type-1 gadgets connect three elements to 
. At least seven vertices of those gadgets must belong to S.

–
Type-2 gadgets connect two elements. Here, we have three cases:

•
the two elements are connected to 
 by a structure reaching one of the top vertices of the gadget (see Fig. 5b and Fig. 5d);

•
one of them directly to the top and the other to another element (Fig. 5e)

•
the two elements are connected to another element (Fig. 5c)

In all cases, S contains at least five vertices per type-2 gadget.
–
Type-3 gadgets connect 1 element. Either directly to 
 or to another element somehow connected. In both cases, S contains at least 3 vertices per type-2 gadget.

Fig. 5
Download : Download high-res image (94KB)
Download : Download full-size image
Fig. 5. Different types of gadget usage in a BCS. Type-1 gadgets connect 3 element to the top using at least 7 vertices. Type-2 gadgets connect 2 elements to the top using at least 5 vertices. Type-3 gadgets connect 1 element to the top using at least 3 vertices.

Denote 
 the number of type-1 gadgets in S, 
 the number of type-2 gadgets and 
 the number of type-3 gadgets. By construction, 
. In addition, the number of blue vertices in S belonging to set-gadgets is at least 
. 
 is thus a solution to the linear program (L) described in Lemma 5 and 
 is the objective function of (L). Since (L) has a unique optimal solution costing 7q, 
 must be optimal because otherwise 
 which is absurd by Lemma 4. We thus have 
 and 
 i.e. S contains exactly q type-1 gadgets, and for each of those gadgets, exactly 7 blue vertices belong to S. Since each type-1 gadget connects 3 red vertices, the set of type-1 gadgets in S corresponds to an exact cover in , therefore if G contains a BCS of size 48q then  is positive.

⇒ If  is positive, then there exists q sets in C covering X exactly. Take all the red vertices in G, and for each set in the exact cover pick a path of length 7 in the corresponding set gadget (see Fig. 5a). Connect the red accordion to the sinks 
 using exactly 17q blue vertices. The structure thus obtained is a BCS of size 48q in G.

BCS belonging to , and X3C3 being -complete, the discussion above proves the -completeness in cubic bipartite graphs. Observe that some edges incident to the terminal vertices 
 can be removed, and these deletions do not impact the reduction, therefore the problem remains -complete on subcubic graphs, the theorem holds. □

Inapproximability bipartite with bounded degree
In this section, we show that BCS is not approximable within any constant ratio, even if restricted to bipartite graphs of maximum degree four. We reuse the construction given in [3], when the authors prove that finding a BCS containing a specific vertex is -complete. The reduction is based on X3C problem which is -complete [10].

Image 5
The idea is to encode an X3C instance into a bipartite graph (the classical graph representation of an X3C instance) plus a “long” path, and connect all the vertices encoding sets to one extremity of the path. The X3C instance is then positive if and only if there is a BCS containing the whole path. We then use this construction in a gap reduction by making copies of the obtained graph. For the sake of clarity, Theorem 7 states inaproximability in bipartite graphs, we then give clues to the reader as to why the result holds for bipartite graphs of maximum degree four.

Construction 5

Let  be an instance of X3C, 
, 
. We build  an instance of BCS as follows:

–
for all 
, add a red vertex 
 to G (element-vertex);

–
for all 
, add a blue vertex 
 to G (set-vertex), and for all 
, add the edge 
 to G;

–
add a blue vertex y to G along with the edges 
 for all 
;

–
add a blue path of length 2q starting at y and call x the last vertex of the path.

G contains  vertices and  edges.
The transformation is done in polynomial time, and illustrated by Fig. 6.

Fig. 6
Download : Download high-res image (36KB)
Download : Download full-size image
Fig. 6. Construction of an instance of BCS from an instance of X3C. Here C = ({1,3,5},{2,3,6},{2,4,9},{6,7,8}), X = {1,…,9}.

Lemma 6 uses the construction above to reduce X3C to BCS with a compulsory vertex (à la [3]).

Lemma 6

Let  be an instance of X3C and  the graph obtained through Construction 5. There is a BCS containing x (of size 6q) in G if and only if  is a positive instance.

Proof

⇒
Let X be a BCS containing x. x being balanced and connected, it contains the path from x to y, then some blue set-vertices and finally some red element-vertices. Let l be the number of set-vertices contained in X. X contains  blue-vertices. For it to be balanced it has to contain  red vertices and therefore at least 
 
 set-vertices (because sets contain three elements). We thus have 
 
 giving .

On the other hand, X contains  red vertices but there are only 3q of them, we thus have .

In the end,  and X contains exactly q set-vertices and all the element-vertices, the corresponding sets thus form a solution to .

⇐
Trivial. □

Construction 6

Let  be an instance of X3C and  the graph obtained from  through Construction 5. We build an instance 
 of BCS using ρ copies of G, (
), and adding a path connecting all the copies by their x-vertex. Each x-vertex for each copy of 
, i.e. the last vertex of a path beginning by y in Construction 5 will be denoted by 
 in the following.

Theorem 7

BCS in bipartite graphs is not approximable within any constant ratio unless  =.

Proof

Assume that there exists 
 and a polynomial-time running ρ-approximation algorithm  for BCS i.e. for any instance of BCS, if we denote K the size of the solution returned by  and 
⁎
 the size of an optimal one then we have 
⁎
 
.

Let  the number of G-copies.

Now run  on 
 and denote K the size of solution it returns. Let 
⁎
 be the size of an optimal solution. Using Lemma 6, we have that either 
⁎
 and  is a yes-instance, or 
⁎
 and  is a no-instance. Indeed, if 
⁎
 then this solution contains red vertices taken from at least two copies of G: 
 and 
. For the solution to be connected, it must contain 
 and 
. Observe that, by construction, a connected subgraph of G containing x contains necessarily more blue vertices than red vertices. Now, using Lemma 6, since 
 belongs to the solution,  is positive. Conversely if 
⁎
, it means that there is no BCS in G reaching the x vertex and therefore  is a no-instance.

–
If  then 
⁎
 because A is . In this case we can conclude that  is a no-instance.

–
If  then 
⁎
 and  is a yes-instance.

In both cases,  solves X3C in polynomial time. That is absurd unless . Moreover, the graph 
 is bipartite by construction, the theorem thus holds. □
Construction 5 can be adapted to obtain a bipartite graph of maximum degree four. Instead of an instance of X3C, start with an instance of X3C3. After the transformation, add some dummy sets and elements to ensure that the number of sets is a power of two. Add a full binary tree rooted at y which leaves are the set-vertices. Add pendant red vertices to all the internal nodes of the tree. Under those assumptions, Lemma 6 still holds and so does Theorem 7.

Corollary 2

Balanced Connected Subgraph in bipartite graphs of maximum degree four is not approximable within any constant ratio unless .

Inapproximability for planar graph with bounded degree
In this part we consider the BCS problem in planar graph with bounded degree. We show that there is no hope to find an efficient approximation algorithm with a constant ratio. The proof is based on the Steiner Tree problem [12].

Image 6
ST problem remains -complete even for subcubic planar graph [4].

Construction 7

Let 
 be an instance of ST with 
, ,  and . We generate  an instance of BCS as follows:

–
Let G be a copy of 
 in which all vertices are blue.

–
For each blue-vertex 
, add a red vertex 
 and the edge 
.

–
For each vertex 
, take a path of n red vertices starting at 
 ending by 
.

–
Create a path of red vertex of size  beginning at 
 and ending at 
.

–
Add an edge 
.

–
Add a path of blue vertex of size mn beginning at 
 and ending at 
.

–
Add an edge 
.

 contains  vertices.
Lemma 7

Let 
 be a instance of ST and  the graph obtained by Construction 7. There is a connected balanced subgraph H containing 
 of size  if and only if 
 is a yes-instance.

Proof

Assume that there is a connected balanced subgraph H, of size  containing 
. Since H is balanced, connected and has  vertices including 
, it must contain all the path from 
 to 
, all the red vertices from G, the m vertices of X and l vertices from V\X. Thus H contains exactly  vertices from V\X, which corresponds to a positive solution for 
.

Assume that S is yes-instance of 
. The subgraph H is composed of the path from 
 to 
, all the red vertices and the vertices corresponding to S. It is connected, balanced and has a size of . □

Construction 8

Let 
 be a instance of ST. We consider the graph , obtained by  copies of G (the graph G is the graph obtained using Construction 7) and the path between the 
-vertex of all copies. As the same as previously, each 
-vertex for each copy of 
, will be denoted by 
 in the following.

Theorem 8

Balanced Connected Subgraph problem cannot be approximated by any constant factor for planar graphs with an obligatory vertex unless .

Proof

Assume that there is 
 and an ρ-approximate algorithm A in polynomial-time for the BCS in planar graphs. Let . Let K be the size of the solution obtained by A on  and 
⁎
 the size of the optimal solution. Thanks to Lemma 7 we have either 
⁎
 and 
 is a yes-instance, or 
⁎
 and 
 is a no-instance.

Thus if 
⁎
, like 
⁎
 
, then . In contrast if 
⁎
 then .

So, using the ρ-approximation algorithm A we can distinguish between yes- and no-instances, thus solving the ST problem. □

The prescription vertex condition for 
 can be replaced by a blue vertex 
, a red vertex 
 and the edges 
, 
. Thus the search for a balanced graph of size  containing 
 becomes a search for a balanced graph of size . We now have the following corollary.

Corollary 3

Balanced Connected Subgraph problem cannot be approximated by any constant factor for planar graphs unless .

The ST problem is still -complete for subcubic planar graphs [4], so we can state the following corollary.

Corollary 4

Balanced Connected Subgraph problem cannot be approximated by any constant factor for planar graphs with maximum degree four unless .

4.2. Inapproximability results for chordal graph
In this section, we show that BCS problem cannot be approximated by any constant factor unless  for chordal graph. Recall first that BCS remains -complete even for chordal graph [3].

Construction 9

Let  be an instance of X3C, with 
 and 
. We generate an instance  of BCS from the instance  of X3C as follows:

–
, create a red vertex 
 (vertex-element), and 
, create a blue vertex 
 (vertex-collection).

–
, take the edge 
, and 
, add the edge 
.

–
Create a blue vertex y and the edges 
 
.

–
Add a blue path of size , beginning at 
 and 
.

–
Create a red vertex 
 and the edge 
.

G contains  vertices within  red vertices.
Lemma 8

Let  be an instance of X3C and  the graph obtained by Construction 9. There is a BCS denoted H of size  in G if and only if  admits yes-instance solution.

Proof

Assume that there is a connected balanced subgraph H of size  in G. Since H is balanced, connected and has  vertices, it must contain the vertex z, the path from y to x, l blue vertex-collections and all the 3q red vertex-elements. Since , H contains exactly q vertex-collections and all the vertex-elements, we can trivially obtain a positive solution for .

On the other hand, assume that instance  admits a positive solution S. The subgraph H composed of the path from 
 to 
, all the vertex-elements and the vertex-collections corresponding to the collections in S is a BCS of G of size . □

Recall that the following Theorem was proposed first by [3] (see Lemma 3 of Section 2.3.). The construction of an instance BCS will be used in Construction 9.

Theorem 9

There exists a feasible solution containing z for BCS in chordal graph iff X3C admits a positive solution and this solution is equal to 6q.

Proof

Consider Construction 9 in which the vertices 
 and 
 are omitted. Assume that z is in a solution S of size strictly less than 6q. The size of S is  with . So there are  blue (resp. red) vertices in S. Since the path between z and 
 must be in the solution, there are at most  vertices among vertices-collection in S. Therefore at most  red-vertices is covered by the previous vertices, impossible. □

Construction 10

Let  be a instance of X3C and  the graph obtained by Construction 9 in which vertices 
 and 
 are omitted. We generated an instance 
 of BCS with ρ copies of G (
) and a path between the z-vertex of all copies.

Corollary 5

Balanced Connected Subgraph problem cannot be approximated by any constant factor for chordal graphs unless .

Proof

Based on Construction 10, clearly we have the two following cases:

–
if there exists positive solution on a graph 
, for a fixed i, the value of a solution is 6q with z in the solution, and the value on graph 
 is obvious .

–
whereas in the negative case the value is at most or equal 6q but the vertex z cannot be in this solution, and the value of the solution on graph 
 is also 6q.

Thus the gap between yes/no-instance is ρ, which proves the inapproximability of BCS even if the input graph is a chordal graph. □

5. Conclusion
In this article we pursued the classification of the BCS problem related to graph classes.

A further interesting question leads to the study of parameterized complexity for these problems. The parameter could be the difference between the number of red vertices and blue vertices. In this paper, we improved the complexity results for BCS. We gave a proof of -completeness in bipartite cubic graphs, graphs of diameter three and bipartite graphs of diameter four. Our results nicely complement the ones of [3]. Indeed, they proved BCS to be polynomially solvable in graphs of diameter two and in graphs of maximum degree two.

Despite remaining computationally difficult in restrictive settings, BCS parameterized by the size of the solution belongs to . Indeed, as we stated in the introduction, BCS can be Turing-reduced to the graph motif problem. Since this problem parameterized by the size of the motif is , it implies that BCS parameterized by the size of the solution is  as well. On the negative side, our results in graphs of bounded degree and bounded diameter imply that BCS parameterized by the diameter or the maximum degree of the input graph is in fact not .