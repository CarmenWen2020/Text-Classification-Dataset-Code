Abstract
We study Random 2-SAT problem, in which 2-CNFs are sampled from a wide range of non-uniform distributions, including heavy-tailed using random model that is quite different from the standard uniform Random 2-SAT.

This model of random SAT is the so-called configuration model, given by a distribution ξ for the degree (or the number of occurrences) of each variable. To generate a formula the degree of each variable is sampled from ξ, generating several clones of the variable. Then 2-clauses are created by choosing a random partitioning into 2-element sets on the set of clones and assigning the polarity of literals at random.

Here we consider the random 2-SAT problem in the configuration model for power-law-like distributions ξ. More precisely, we assume that ξ is such that its right tail  satisfies the conditions  for some constants . The main goal is to study the satisfiability threshold phenomenon, and we show that the threshold exists and is determined by a simple relation between the first and second moments of ξ.


Keywords
Satisfiability
Power law
Phase transition

DOI: 10.1016/j.tcs.2021.07.028, Show Details
1. Introduction
The Random Satisfiability problem (Random SAT) and its special cases Random k-SAT as a model of ‘typical case’ instances of SAT has been intensively studied for decades. Apart from algorithmic questions related to the Random SAT, much attention has been paid to such problems as satisfiability thresholds and the structure of the solution space. The most widely studied model of the Random k-SAT is the uniform one parametrized by the (expected) density or clause-to-variable ratio ϱ of input formulas. Friedgut in [26] proved that depending on the parameter ϱ (and possibly the number of variables) Random k-SAT exhibits a sharp satisfiability threshold: a formula of density less than a certain value 
 (or possibly 
) is satisfiable with high probability, and if the density is greater than 
, it is unsatisfiable with high probability. Moreover, a recent work of Friedrich and Rothenberger [28], which may be regarded as an extension of Fridgut's result to non-uniform random SAT instances, shows that if a distribution of variable's occurrence in random formulas satisfies some criteria, then such formulas must undergo a sharp satisfiability threshold.

Hence, an impressive line of research aims at locating the satisfiability threshold for each random generating model. This includes more and more sophisticated methods of algorithms analysis [1], [17], [18], [22] and applications of the second moment method [2] to find lower bounds, and a variety of probabilistic and proof complexity tools to obtain upper bounds [23], [33], [24]. In the case of sufficiently large k the exact location of the satisfiability threshold was identified by Ding, Sly and Sun [22]. The satisfiability threshold and the structure of random k-CNFs received special attention for small values of k, see [15], [40], [30] for , and [21], [31], [33] for .

The satisfiability threshold phenomenon turned out to be closely connected to algorithmic properties of the Random SAT, as well as to the structure of its solution space. Experimental and theoretical results [39], [19] demonstrate that finding a solution or proving unsatisfiability is hardest around the satisfiability threshold. The geometry of the solution space also exhibits phase transitions not far from the satisfiability threshold, related to various clustering properties [35]. This phenomenon has been exploited by applications of methods from statistical physics that resulted in some of the most efficient algorithms for Random SAT with densities around the satisfiability threshold [36], [14].

Random k-SAT can be formulated using one of the three models whose statistical properties are very similar. In the model with fixed density ϱ, one fixes n distinct propositional variables 
 and then chooses ϱn k-clauses uniformly at random [25], [39]. Alternatively, for selected variables every possible k-clause is included with probability tuned up so that the expected number of clauses equals ϱn. Finally, Kim [32] showed that one can also use the configuration model, which he called Poisson Cloning model. In this model for each variable 
 we first select a positive integer 
 accordingly to the Poisson distribution with expectation kϱ, the degree of the variable. Then we create 
 clones of variable 
, and choose 
 random k-element subsets of the set of clones, then converting them into clauses randomly. The three models are largely equivalent and can be used whichever suits better to the task at hand.

The configuration model opens up a possibility for a wide range of different distributions of k-CNFs arising from different degree distributions. Starting with any random variable ξ with support on positive integers, one obtains a distribution  on k-CNFs as above using ξ in place of the Poisson distribution. Note that ξ may depend on n, the number of variables, and even be different for different variables. One case of such a distribution is Poisson Cloning described above. Another case is studied by Cooper, Frieze, and Sorkin [20]. In their paper each variable of a 2-SAT instance has a prescribed degree, which can be viewed as assigning a degree to every variable according to a random variable that only takes one value. We will be often returning to that paper, as our criterion for a satisfiability threshold is a generalization of that in [20]. Boufkhad et al. [13] considered another case of this kind — regular Random k-SAT.

In this paper we consider Random 2-SAT in the configuration model given by distribution , where ξ is distributed according to the power law distribution in the following sense. Let 
 denote the tail function of a positive integer valued random variable ξ. We say that ξ is distributed according to the power law with parameter α if there exist constants  such that(1)

Power law type distributions have received much attention. They have been widely observed in natural phenomena [37], [16], as well as in more artificial structures such as networks of various kinds [10]. Apart from the configuration model, graphs (and therefore 2-CNFs) whose degree sequences are distributed accordingly to a power law of some kind can also be generated in a number of ways. These include preferential attachment [3], [10], [12], [11], hyperbolic geometry [34], and others [5], [6]. Although the graphs resulting from all such processes satisfy the power law distributions of their degrees, other properties can be very different. We will encounter the same phenomenon in this paper.

The approach most closely related to this paper was suggested by Ansotegui et al. [5], [6]. Given the number of variables n, the number of clauses m, and a parameter β, the first step in their construction is to create m k-clauses without naming the variables. Then for every variable-place X in every clause, X is assigned to be one of the variables 
 according to the distribution
 
 Ansotegui et al. argue that this model often well matches the experimental results on industrial instances, see also [4], [29], [8]. Interesting to note that although the model studied in these papers differ from the configuration model, it exhibits the same criterion of unsatisfiability 
, where ξ is the r.v. that governs the number of times a variable appears in 2-SAT formula ϕ [7].

The satisfiability threshold of the model of Ansotegui et al. has been analytically studied by Friedrich et al. in [27]. Since the model has two parameters, β and , the resulting picture is complicated. Friedrich et al. proved that a random CNF is unsatisfiable with high probability if r is large enough (although constant), and if 
 
. If 
 
, the formula is satisfiable with high probability provided r is smaller than a certain constant. The unsatisfiability results in [27] are mostly proved using the local structure of a formula.

In this paper we aim at a similar result for Random 2-SAT in the configuration model. Although the configuration model has only one parameter, the overall picture is somewhat more intricate, because there are more reasons for unsatisfiability than just the local structure of a formula. We show that for 2-SAT the parameter α from the tail condition (1) is what decides the satisfiability of such CNF. The main result of this paper is a satisfiability threshold for random 2-CNF in the configuration model, in which the underlying degree random variable is distributed according to the power law. A formal statement of the result is given by Theorem 1 in Section 2.4.

We show that ϕ is unsatisfiable with high probability, when , due to very local structure of the formula, such as the existence of variables of sufficiently high degree. Moreover, same structures persist with high probability in k-CNF formulas for any  obtained from the configuration model, when 
 
.

However, when , then ξ has the first and second moments, and we show that the satisfiability of ϕ in this regime depends on the relation between the two moments. We then apply the approach of Cooper, Frieze, and Sorkin [20]. It makes use of the structural characterization of unsatisfiable 2-CNFs: a 2-CNF is unsatisfiable if and only if it contains so-called contradictory paths. If 
 we prove that w.h.p. formula ϕ does not have long paths, and contradictory paths are unlikely to form. If 
, we use the analysis of the dynamics of the growth of ϕ to show that contradictory paths appear w.h.p. However, the original method by Cooper et al. only works with strong restrictions on the maximal degree of variables that are not affordable in our case, and so it requires substantial modifications.

2. Notation and preliminaries
We use the standard terminology and notation of variables, positive and negative literals, clauses and 2-CNFs, and degrees of variables. The degree of variable v will be denoted by , or when our CNF contains only variables 
, we use 
. By  we denote the set of clauses in ϕ, while by  and  we denote the sets of variables and literals of ϕ respectively. Let 
 denote the number of occurrences of 
 as a positive literal (or the number of the literal 
), and let 
 denote the number of occurrences of the literal 
.

2.1. Configuration model
We describe the configuration model for k-CNFs, but will only use it for , see also [32]. In the configuration model of k-CNFs with n variables 
 we are given a positive integer-valued random variable (r.v.) ξ from which we sample independently n integers 
. Then 
 is the degree of 
, that is, the number of occurrences of 
 in the resulting formula ϕ. Each occurrence of 
 in ϕ we call a clone of 
. Hence, 
 is the number of clones of 
. Then we sample k-element sets of clones from the set of all clones without replacement. Finally, every such subset is converted into a clause by choosing the polarity of every clone in it uniformly at random. If the total number of clones is not a multiple of k, we discard the set and repeat the procedure. Algorithm 1 gives a more precise description of the process. We will sometimes say that a clone p is associated with variable v if p is a clone of v. In a similar sense we will say a clone is associated with a literal if we need to emphasize the polarity of the clone.

Algorithm 1
Download : Download high-res image (91KB)
Download : Download full-size image
Algorithm 1. Configuration Model 
.

We will denote a random formula ϕ obtained from 
 by 
. By 
 we also denote the probability distribution implied by the Algorithm 1.

2.2. Power law distributions
We focus our attention on the configuration model 
, in which every variable is an i.i.d. copy of the random variable ξ having power-law distribution. In this paper we define such distributions through the properties of their tail functions. If ξ is an integer-valued r.v., its tail function is defined to be 
, where .

Definition 1

An integer-valued positive r.v. ξ has power-law probability distribution, if 
, where . We denote this fact as .

Clearly, if , then there exist constants , such that 
, for every .

The existence of the moments of  depends only on α.

Lemma 1

Let . Then 
 iff .

Proof

From the definition of m-th moment of a strictly positive r.v. ξ, we have
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 However, since , then for any 
 Therefore,
 
 
 
 
 
 
 which is finite iff , and the result follows. □

We will write 
 when the m-th moment of some r.v. ξ is not finite or does not exist. We will have to deal with cases when the second or even first moment of ξ does not exist.

Nevertheless, we can obtain good bounds on useful quantities formed from such variables with a good level of confidence, despite the absence of expectation or variance. One such quantity is the sum of independent variables drawn from : 
, where 
's are independent copies of a r.v. .

The next two theorems provide bounds on the values of 
, depending on α in a slightly more general case of r.vs. admitting negative values.

Lemma 2

Corollary 1 from [38]
Let 
, where 
's are independent integer-valued random variables, with
 where  and  are constants. Then w.h.p. 
 
.

As for the second theorem, we deal with a similar sum of random variables, but each variable's tail can be majorized with a power-law function with exponent . Then, as it follows from Lemma 1, such variables have finite expectation, and due to the linearity of expectation, the sum itself has well defined mean value.

Lemma 3

Corollary 5 from [38]
Let 
, where 
's are independent integer-valued random variables, with
 where  and  are constants. Then w.h.p. 
.

Hence, as the theorem states, when 
's are independent r.vs. with power-law boundable tails with tail exponent , then the sum of such variables does not deviate much from its expected value.

Note that from now on we will deal with strictly positive power-law r.vs. 
's, hence, their expectation (given that it exists) is a positive constant. Then when , we have 
.

Another important quantity we need is the maximum, Δ, of the sequence of n independent random variables (or the maximum degree of a CNF in our case).

Lemma 4

Let 
, where 
's are independent copies of a r.v.  with . Then w.h.p. 
.

Proof

Simple calculation shows that
 
 

Since , then 
. Hence,
 Then if 
 for any , we obtain
 hence, we do not expect to see variables with such large degrees. Thus, we conclude that 
 holds w.h.p., and the lemma follows. □

We will also need some bounds on the number of pairs of complementary clones of a variable 
, that is, the value 
. By the definition of the configuration model
 where  is the Binomial distribution with n trials and success probability p.

Lemma 5

Let ξ be some positive integer-valued r.v., and let 
, while 
. Then

Proof

Observe that the event 
 implies , therefore, 
, and as a result
 Finally, since 
 (by 
 we denote the fact that the two r.vs. 
 and 
 have identical distributions), the first result follows. As for the number of pairs of complementary clones, we have(2)

We have already established that 
. As for the second probability in (2), it is bounded in a similar manner. Since the event 
 implies 
, it follows
 Hence, after combining the two probabilities together, we obtain
 and the lemma follows. □

Hence, for , we have

Corollary 1

Let , where , be some positive integer-valued r.v., and let 
, while 
. Then(3)
(4)

The expectations of 
 and 
 are easy to find: 
 
. However, the expected value of 
 requires a little more effort.

Lemma 6

Let ξ be some positive integer-valued r.v., and let 
, while 
. Then 
 
.

Proof

From the definition of the expected value, and the way quantities 
 and 
 are calculated, it follows that
 
 
 
 
 
 
 
 
 
 
 
 

Next, we apply two well-known relations
 
 
 
 
 to get
 
 
 
 
 
 
 
 
 
 and the proof is finished. □

We use 
 to denote the total number of pairs of complementary clones, i.e. the sum of unordered pairs of complementary clones over all n variables.

Note, that when , the r.v. 
 has finite expectation due to Lemma 1. Then by Lemma 3 w.h.p. it holds 
.

We finish this subsection with our version of the Azuma-like inequality first appeared in [20], which will be used in the proofs. Intuitively, our version states that a discrete-time random walk 
 with initial value 
 and positive drift, consisting of not necessarily independent steps, each having a right tail, which can be bounded by a power function with exponent at least 1, is very unlikely to drop much below the expected level, given n is large enough. Although, the original proof was relying on a rather artificial step of introducing a sequence of uniformly distributed random numbers, we figured out that the same result can be obtained by exploiting the tower property of expectation. Moreover, we exploit the tail inequality of each step in the random walk in order to overcome the rather restrictive bounds on the maximal variable degree in the original paper.

Lemma 7 Azuma-like inequality

Let 
 be some random walk, such that 
 is constant initial value of the process, 
, where  is constant, are bounded from below random variables, not necessary independent, and such that 
 (μ is constant) and 
 for every  and constants , . Then for any 
 
, the following inequality holds
 
 

Proof

First, let us introduce “truncated” at  versions of the variables 
, i.e.
𝟙
 Then the conditional expectation for the new variables is
𝟙
𝟙
𝟙
 since 
. Let us denote by 
, where A is some event, the following function
 Then
𝟙
 
 
 
 
 Now recall that 
. Hence,
 
 
 where  is constant.

Since  and , we obtain
 

Next, notice that the above lower bound of the conditional expectation does not depend on realizations of the r.vs. 
. Thus, for any trajectory of the random walk 
, where 
 is an element from the domain of r.v. 
, 
 
. Hence, since domain of the r.v. 
 is a subset of the domain of r.v. 
, it follows that(5)
 
 As for the second moment, since 
, we have an obvious upper bound(6)

Now, using the truncated variables, we introduce an auxiliary random process
 

Then the probability that the original random walk X will drop below the ϵtμ level, where , is at most
 

Next, we apply the tower property of expectation, that is for any two random variables A and B defined over the same probability space and , the following holds (subscript indicates over which variable calculation of expectation is performed)
 Thus, we have
 
 

Consider the innermost expectation. Since we condition it over variables 
, we consider such variables as given (or constant). Hence,(7)
 
 

Now, since 
 just like the original variables 
's, we can upper bound the inner expectation by applying the well-known inequality
 which is valid for every . Hence, by restricting , we have(8)
 
 since 
 
 by (5) and 
 by (6). Therefore, we obtain
 
 

Thus, the probability in (7) is upper bounded as
 
 
 
 Repeating the same process of isolation of conditional expectation of each step 
 and bounding it with (8) for another  times, we obtain
 
 
 

Fix 
 
 
. Note, that when  and , then . Hence, we have
 
 
 
 And the lemma follows. □

2.3. Contradictory paths and bicycles
Unlike k-CNFs for larger values of k, 2-CNFs have a clear structural feature that indicates whether or not the formula is satisfiable. Let ϕ be a 2-CNF on variables 
. A sequence of clauses 
 is said to be a path from literal 
 to literal 
. As is easily seen, if there are variables  in ϕ such that there are paths from u to v and 
, and from 
 to w and 
, then ϕ is unsatisfiable, see also [9]. Such a collection of paths is sometimes called contradictory paths.

On the other hand, if ϕ is unsatisfiable, it has to contain a bicycle, see [15]. A bicycle of length s is a path 
, where the variables associated with literals 
 are distinct, and 
.

2.4. The main result
Now we are ready to state our main result.

Theorem 1

Let 
, where . Then for 
 

A proof of this theorem constitutes the rest of the paper. We consider each case separately, and the first case is proved in Proposition 1, while the other two cases are examined in Proposition 2, Proposition 3.

3. Satisfiability of 
, when  and 
This case is the easiest to analyze. Moreover, we show that the same result holds for any 
, where , when 
 
. Hence, the case  for unsatisfiable 2-CNFs follows. In other words, if 
 
, then any k-CNF formulas from 
 will be unsatisfiable w.h.p.

What happens here, is that we expect many variables with degree 
. Let us fix k such variables. Then, as it is shown in the proof, the formula ϕ contains 
 clauses that are formed only from literals of these k variables. However, one of the possible subformulas, which is formed from only k variables, that renders the whole k-CNF formula unsatisfiable consists of only 
 clauses.

The next proposition establishes a lower bound of satisfiability threshold for any power-law distributed k-CNF from the configuration model.

Proposition 1

Let 
, where ,  and 
 
. Then w.h.p. ϕ is unsatisfiable.

Proof

First, recall quantity 
 that denotes as the total number of clones
 
 Since each 
 is an independent realization of the r.v. ξ in 
, it follows that 
.

Next, let us estimate how many variables 
's in ϕ have degree at least 
:
 
𝟙
 
𝟙

However, since , then 
 for some  and all , hence,(9)
 
𝟙
 Prior to moving to the next steps of the proof, we note that the actual number of variables with degrees at least 
 is distributed according to Binomial distribution, hence, it is concentrated around its mean.

Next, we consider 2 cases. The first one is when , and the second case is when 
 
. Hence, for the first case, by Lemma 2, w.h.p. 
. Therefore,
 
𝟙

Hence, we expect polynomially many variables to have large degrees. The same holds in the case, when 
 
. Then 
 w.h.p. by Lemma 3, and so the expected number of variables with degree at least 
 is:
 
𝟙

And so in both cases we note that we expect many variables to have degree at least 
. Let us fix k such variables 
 such that 
 for all . Next we introduce indicator r.v. 
, which is equal to 1 iff clause  consists solely of clones of variables 
. Then 
 
 is the total number of clauses formed only from clones of variables 
.

It is easy to show that H is the sum of weakly correlated binary r.vs., since the covariance of 
 and 
 for some fixed clauses 
 is

Therefore, due to Chebyshev's inequality, it follows that H is concentrated around its expectation, i.e. the expected value  serves as a good approximation to the actual value of the r.v. H.

Finally, the expected number of clauses formed only from clones of variables 
 is 
 
 
 
 
 
 
 
 
 
 
 
 since 
 
. Hence, from the facts that w.h.p.  and 
, it follows that the number of clauses formed solely of clones of the fixed k variables grows together with n. However, as it was pointed earlier, we need only a 
 clauses subformula to make ϕ unsatisfiable. Thus, ϕ is UNSAT w.h.p. when 
 
. □

After proving the above proposition, result for 2-CNF from 
 naturally follows.

Corollary 2

Let 
, where , such that . Then w.h.p. ϕ is unsatisfiable.

4. Satisfiability of 
, when  and  or 
4.1. The inequality 
Analysis of this and subsequent cases mainly follows the approach suggested in [20], where they deal with random 2-SAT instances having prescribed literal degrees. In other words, the assumption in [20] is that the degree sequences 
 and 
 are fixed, and a random 2-CNF is generated as in the configuration model. Then two quantities play a very important role. The first one is the sum of all degrees 
 (we use our notation) and the second one is the number of pairs of complementary clones 
. It is then proved that a 2-CNF with a given degree sequence is satisfiable w.h.p. if and only if 
 for some . We will quickly show that the conditions  and 
 imply the inequality 
 w.h.p., see Lemma 8, and therefore a random 2-CNF in this case should be unsatisfiable w.h.p. The problem however is that Cooper et al. only prove their result under a significant restrictions on the maximal degree of literals, 
. By Lemma 4 the maximal degree of literals in our case tends to be much higher, and we cannot directly utilize the result from [20]. Therefore we follow the main steps of the argument in [20] changing parameters, calculations, and in a number of cases giving a completely new proofs.

Lemma 8

Let 
, where  and  or 
. Let also 
. Then w.h.p. 
.

Proof

Let us first consider the case, when  and 
. Then by Lemma 1 and Lemma 3, it holds that w.h.p.
 
 
 since 
. Likewise, since , then w.h.p.
 
 
 
 where the last equality follows from Lemma 6.

Hence, when 
, then
 
 
 
 
 holds w.h.p.

Now we consider the case . Unfortunately, then 
 for any , and so we cannot claim that 
 is concentrated around its mean. Nevertheless, the quantity 
 
 is still greater than 1 in this case.

Since , there are constants  such that 
. We construct auxiliary random variables 
 for . Later we will argue that ε can be chosen such that 
. Specifically, let 
 be such that 
 and 
 for .

Let 
 be the number of pairs of complementary clones in formula 
. Since 
 for any , we notice that(10)
 due to the stochastic dominance of the r.v. 
 over 
. As is easily seen, for sufficiently small ε we have 
. Therefore, by the first part of the proof 
 w.h.p. The result follows.

Thus, in either case we observe that for some  it holds w.h.p. 
 
. □

In what follows, we will always assume that .

4.2. TSPAN
The process of generating a random 2-CNF in the configuration model can be viewed as follows. After creating a pool of clones, we assign each clone a polarity, making it a clone of a positive or negative literal. Then we choose a random partitioning of the set of clones into 2-element sets. The important point here is that in the process of random matching we pair clones up one after another, and it does not matter in which order a clone to match is selected, as long as it is paired with a random unpaired clone.

Our goal is to show that our random 2-CNF ϕ contains contradictory paths. In order to achieve this we exploit the property above as follows. Starting from a random literal p we will grow a set  of literals reachable from p in the sense of paths introduced in Section 2.3. This is done by trying to iteratively extend  by pairing one of the unpaired clones of the negation of a literal from . The details of the process will be described later. The hope is that at some point  contains a pair of literals of the form 
, and therefore ϕ contains a part of the required contradictory paths. To obtain the remaining part we run the same process starting from 
.

To show that this approach works we need to prove three key facts:

– that  grows to a certain size with reasonable probability (Lemma 15),

– that if  has grown to the required size, it contains a pair 
 w.h.p. (Lemma 17), and

– that the processes initiated at p and 
 do not interact too much w.h.p. (Lemma 12).

Since the probability that  grows to the required size is not very high, most likely this process will have to be repeated multiple times. It is therefore important that the probabilities above are estimated when some clones are already paired up, and that all the quantities involved are carefully chosen.

We now fill in some details. The basic “growing” algorithm is TSPAN (short for truncated span), see Algorithm 2 and [20]. Take a literal and pick a clone p associated with it. Then partition the set  of all clones into 3 subsets: the set  of “live” clones from which we can grow the span, the set  of paired (or “connected”) clones, and the set  of “untouched” yet clones. We start with , , and empty set .

Algorithm 2
Download : Download high-res image (77KB)
Download : Download full-size image
Algorithm 2. Procedure TSPAN.

TSPAN works as follows: while the set of live clones is not empty, pick u.a.r. clone 
 from the live set, and pair it u.a.r. with any non-paired clone 
. Since clones 
 and 
 are paired now, we move them into the set of paired clones , while removing them from both sets  and  to preserve the property that the sets , and  form a partition of .

Next, we identify the literal l which clone 
 is associated with, and we move all the complementary clones of 
 from the set of untouched clones  into . The idea of this step is, when we add an edge 
, where 
 is one of the l's clones, to grow the span further we will need to add another directed edge 
, where 
 is one of the clones belonging to 
. Hence, we make all clones of 
 live, making them available to pick as a starting point during next iterations of TSPAN. This way we can grow a span, starting from the clone p, and then the set contains all the clones, which are reachable from the clone p (or literal that is associated with p) at a certain iteration of TSPAN. We call this set a p-span.

The version of TSPAN given in Algorithm 2 takes as input sets  (which therefore do not have to be empty in the beginning of execution of the procedure), a maximal number of iterations τ, and a maximal size σ of the set of live clones. It starts by using the given sets, , stops after at most τ iterations or when  reaches size σ.

4.3. Searching for contradictory paths
The procedure TSPAN is used to find contradictory paths as follows:

Step 1. Pick a variable and a pair of its complementary clones .

Step 2. Run TSPAN starting from p for at most 
 
 steps. If  becomes empty during the process, or if q gets included into , or if in the end 
 (μ is determined by the value 
, see Lemma 9), declare failure.

Step 3. Run TSPAN starting from q and the current set  of paired clones for at most 
 
 steps. If  becomes empty during the process, or if in the end , declare failure.

Step 4. Run TSPAN starting from  and the current set  of paired clones for at most 
 
 steps. If  becomes empty during the process, declare failure.

Step 5. Similarly, run TSPAN starting from  and the current set  of paired clones for at most 
 
 steps. If  becomes empty during the process, declare failure.

If a failure is declared at any step, we abandon the current pair  and pick another pair of complementary clones keeping the current set  of paired clones that will be used in the next round. Also, even if all the Steps are successful, but the constructed span does not contain contradictory paths, we also declare a failure. It is important that the set  never grows too large, that is, it remains of size . We will show later that the probability of failure in Steps 4,5 is very low, and therefore we are mainly concern with restarts occurring during Steps 2,3. This implies that the number of restarts does not exceed 
 
.

The next lemma shows how we exploit the value of μ, since it acts as an approximation to the number of newly added live clone into the set of live clones when 
 
. However, first, we need to introduce several variables. Let 
, 
, and 
 are the live, untouched, and connected sets respectively after the i-th iteration of some execution of TSPAN. Additionally we have 
. Also let 
 indicate the change in the number of live clones after performing the ith iteration, i.e. 
.

Lemma 9

Let 
 
, where . Then for any , we have

Before proving Lemma 9 we prove three useful auxiliary results regarding 
's and 
's:

Lemma 10

There exists constant , such that for any  and (11)

Proof

Notice that 
 indicates that at the i-th iteration, the TSPAN picked a clone 
 to pair with from the set of untouched clones 
. Assume that 
 is associated with literal 
. Then 
 (according to the TSPAN algorithm, 
 always loses one clone and gets 
 new clones).

Hence, for the live set to gain d clones, 
 must be one of the clones associated with literals whose complements have exactly  clones. Thus,(12)
 
 𝟙
 
 𝟙
 In the above estimate of the probability we claim that the total number of clones of the literals with degree at least  is well-approximated by its mean. To see why this is true, note that the tail function of the r.v. 𝟙
 is upper bounded by the right tail function of the r.v. 
. Hence, for , we expect that 
 𝟙
 𝟙
 due to Lemma 3.

Now, let us fix some specific literal l and let v be its corresponding variable. Then𝟙
 
 
 
 
 
 
 
 
 

Next, we apply summation by parts𝟙
 
 
 

Recall that 
, while ; hence, for a fixed l𝟙
 
 for some constant 
.

Therefore, (12) can be further simplified
 
 𝟙
 
 
 
 since . Recall that w.h.p. 
. Then for  we obtain
 
 
 since . Finally, denote by 
, and the lemma follows with
 □

Next, we show that 
 as long as i is not too large. However, instead of showing this result directly, we will prove a somewhat more general statement from which the desired property naturally follows.

Lemma 11

Let the sequence 
, where  is constant, contains cn independent copies of the r.v. ξ, which has the right tail for any 
 with  and . Let 
 be any subset of size 
. Then w.h.p. 
 
 

Proof

Let us call a variable 
 “heavy”, if 
 
. Then the expected sum of “heavy” variables in the original sequence 
 is 
 
𝟙
 
 
  
 
  
 
  
 
 
 
 
 
 
 
 
 
 
 Next, recall that 
 
. Then 
 
𝟙
 
 
 
 
 
 

Since the right tail functions of the r.vs. 
𝟙
 
 is upper bounded by the right tail function of the original non-truncated variable ξ, the sum of “heavy” variables is concentrated around its mean. Therefore, even if A contained only the “heavy” variables, the resulting sum would be at most 
 
. However, if we pick “non-heavy” variables, meaning the ones that have degree at most 
 
, then again the sum would be at most 
 
. And so no matter what variables the set A includes, the sum of its elements is 
 
 w.h.p. □

However, our concern was to bound the size of the live set 
. And the next corollary shows that we expect 
 as long as i is not too large.

Corollary 3

When , then 
 holds w.h.p.

Proof

Proof is pretty straightforward now, given Lemma 11. We have at most 2n literals (it is not exactly 2n, since some variables may produce only one literal). And the right tail function of the literals is 
, due to (3). Since , and after applying Lemma 11 we obtain 
 holds w.h.p. □

Now we are in a position to prove Lemma 9.

Proof of Lemma 9

Assume that at the t-th iteration of TSPAN procedure we paired clones 
. Clearly, according to the algorithm, 
, thus, 
 loses at least one clone, and, with probability 
 
, 
 can be also from 
, making the live set to lose another clone.

Next let us call variable 
 undisturbed, if none of its clones were paired or made live. Then, if p is paired with a positive clone of the undisturbed variable 
 (and we can do so in 
 ways with uniform probability 
 
), then the live set will gain 
 new clones. Similarly, when p is paired with a negative clone of 
 (which can be done in 
 ways with uniform probability 
 
), then the live set gains 
 new clones.

Note, it may happen that p is paired with clones of a “disturbed” variable, which may add some clones into 
, but since we are looking for a lower bound, we can ignore this case. Therefore,
 
 
 
 
 
 
 
 Recall that 
, and w.h.p. 
 
. Then
 
 
 
 
 
 
 

The sum  
 
 is the sum of at most  random variables 
. Note, though, that these variables 
 are not independent, nor identically distributed in the aforementioned sum, since during the first iterations the TSPAN procedure favours products of complementary literals having larger numbers of clones. Now, every element 
 has the right tail function 
 by Corollary 1 for some  and every . Thus, since , and according to Lemma 11, we obtain 
 
 As for the 
 term, we know from Corollary 3 that it remains  as well.

Hence,
 
 
 
 
 
 □

Next, we bound the probability of failure in each of Steps 2–5. We start with Step 2 assuming that the number of paired clones is .

Lemma 12

Step 2
(1) Let 
 
. If TSPAN starts with a live set containing only a single point 
, time bound 
, the live set size bound 
, and the number of already paired clones , then with probability at least 
 
 TSPAN terminates with the live set of size at least σ.

(2) For any fixed clone q, the probability it will be paired in 
 
 steps of the algorithm, is at most 
 
.

Proof

(1) The TSPAN procedure may terminate at the moment  due to one of two reasons: first, when 
 hits 0, and second, when 
. To simplify analysis of the lemma, instead of dealing with conditional probabilities that the live set has not paired all its clones, we suggest to use a slightly modified version of TSPAN, which always runs for τ steps.

The modified version works exactly as the original TSPAN procedure when the live set has at least one clone. But if at some moment, the live set has no clones to pick, we perform a “restart”: we restore the sets , and  to the states they had been before the first iteration of TSPAN procedure occurred. After that we continue the normal pairing process. Although during restarts we reset the values of the sets, the counter that tracks the number of iterations the TSPAN has performed is never reset, and keeps increasing with every iteration until the procedure has performed pairings τ times, or the live set was able to grow up to size σ, and only then the TSPAN terminates.

Now, let 
 represents a “successful” restart that started at i iteration, meaning during this restart the live set accumulated σ clones, while 
 means there was no restart or the live set became empty. What we are looking for is 
, since this probability is identical to the probability that the original TSPAN was able to grow the live set to the desired size. Next, we can have at most τ restarts, and, since the very first restart has the most time and we expect the live set to grow in the long run, it follows that it stochastically dominates over other 
's. Thus,
 
 
 from which we obtain the probability that the TSPAN terminates with large enough live set from the very first try:(13)
 

Now what is left is to obtain bounds on the right-hand side probability. We have a random process
 
 
 which consists of steps 
, each having the right tail (Lemma 10)
 and positive expectation (Lemma 9)
 

Therefore, according to Azuma-like inequality (Lemma 7), we obtain
 
 
 
 
 Fixing 
 
, we have for some constant 
 
 
 Thus, from (13) it follows that 
 
 
, which proves the first part of the lemma.

(2) To pair clone q, we must select it uniformly among  non-paired clones. Hence, due to Union bound, we have
 
 
 
 
 
 
 
 □

Note that in Lemma 12(1) the size of  can be slightly greater than σ, as it may increase by more than 1 in the last iteration. Also, in Lemma 12(2) the bound on the probability is only useful when 
 is sufficiently large.

The probability that both runs of TSPAN for p and q are successful is given by the following

Lemma 13

Step 3
The probability that two specific clones p and q accumulate 
 clones in their corresponding live sets  during the execution of Steps 2,3, such that the span from clone p does not include q nor make it live, is at least 
 
.

However, before proving this result, we start with an auxiliary lemma after which we provide the proof of Lemma 13.

Lemma 14

The TSPAN procedure will pair at most 
 clones from the set of live clones , while constructing the span from q, when .

Proof

Since the TSPAN from p and q runs for at most 
 steps, and  w.h.p. due to Corollary 3, it follows that the expected number of paired clones, which belong to the set  is at most
 
𝟙
 
 
 
 
 
 where the last step follows from 
 w.h.p. Hence,
 
𝟙
 
 

Moreover, since the process 
𝟙
 forms a binomial trial, it follows that the actual number of paired clones does not deviate much from its expectation, and hence, w.h.p. 
𝟙
. □

Thus, after growing span from clone p, there is a good probability that q is not paired. So we can run the same TSPAN algorithm for clone q now (Step 2), and Lemma 12 suggests that we will be able to construct the second span of size 
 with probability at least 
 
.

However, we need to make sure that while the TSPAN process constructs span from q, it does not pair too many clones that were marked as “live” and placed into . But since 
 w.h.p. for , this “bad” event is unlikely to happen.

Proof of Lemma 13

Let 
 and 
 be the state of the sets of live clones  and  respectively after finishing Step 2 and Step 3, while 
 be the state of the set  after finishing Step 2. Then the probability that Step 2 and Step 3 do not fail is at least
 
 
 since 
 
 by Lemma 12. Next recall that
 
 from Lemma 12.2, and so it follows that
 
 
 
 
 
 
 and the lemma follows. □

Next, we show that we can grow the spans for another 
 steps, while keeping sizes of the respective live sets of order at least 
.

Lemma 15

Steps 4,5
Assume that p- and q-spans were both able to accumulate at least 
 live clones after 
 
 steps, and q is not in the p-span. Then with probability , TSPAN will be able to perform another 
 
 iterations, while maintaining the sizes of the sets  and  at the level of at least 
 live clones at each iteration.

We start by showing that TSPAN in Step 4 does not decimate .

Lemma 16

Let Steps 2,3 succeed. Then the number of clones from  that will be paired after finishing Step 4 is at most 
 w.h.p.

Proof

Let  and  be the sets of live clones right after finishing Step 2 and Step 3. Then 
 and 
 by Lemma 13. Hence, the expected number of clones in , which get also marked as “live” clones in  by TSPAN, while it expands the p-span for another 
 iterations, is
 
𝟙
 
 
 
 
 
 since 
 w.h.p. Now recall that  is the sum of at most 
 r.vs. 
, where each 
 represents the number of clones of literals being added into . Therefore, 
 is the subset of the multi-set of degrees of all literals in ϕ, i.e. 
, where  and . However, each element in D is a realization of a r.v. with the right tail function 
 by Corollary 1.

Then, according to Lemma 11, w.h.p.
 
 
 
 
 Thus, we obtain
 
𝟙
 
 
 
 
 
 
 And since 
𝟙
 forms a binomial trial, it follows that the actual number of clones from  that get paired by the p-span is concentrated around its expectation. Hence, we do not expect more than 
 clones from  to be paired, while expanding the span from p. □

Therefore, we conclude that after finishing Steps 2,3 and given that the Step 4 succeeds, the size of the live set  is at least 
.

However, now we need to show that Steps 4,5 succeed w.h.p., assuming that Steps 1,2 did not fail.

Proof of Lemma 15

When we start from a live set with size of order at least 
, to be able to grow the span for another 
 steps, we need to make sure that the size of the live set never drops to zero. First, recall that 
, where 
 
 is the maximal number of tries to pick complementary clones from which TSPAN grows spans. Thus, according to Lemma 9, for any 
 and for any 
 Hence
 
 
 
 
 
 
 which, after applying the Azuma-like inequality (Lemma 7), leads to an upper bound
 
 
 
 
 
 
 
 
 
 

Recall that 
 
 and 
 
. Hence, we obtain
 
 
 
 
 
 for specific 
 and for some constant . Then the probability that the live set will drop below the 
 level during any of the 
 steps is, by Union bound,
 
 
 
 
 
 
 □

Therefore, by Lemma 16, after the TSPAN finishes constructing the p-span in Step 4, the size of the “live” set of q-span is at least
 
 To keep our calculations as simple as possible, we will assume that both  and  are at least 
 
 during the execution of Steps 4,5.

Finally, we show that w.h.p. the spans produced in Steps 1–5, provided no failure occurred, contain contradictory paths. In other words, we are looking for the probability that spans do not contain complement clones after growing them for 
 steps, i.e. at each step TSPAN was choosing only untouched clones from the set .

Lemma 17 Contradictory paths

If for a pair of complementary clones  Steps 1–5 are completed successfully, the probability that  or  contains no 2 complementary clones is less than 
 
.

Proof

Let B (“bad”) be the event that after performing 
 steps, there are no two complementary clones ever paired. This means, as was mentioned previously, that at each step TSPAN was choosing u.a.r. only untouched clones  among  clones.

Recall that sets , and  form a partition of the set  of all clones. Then at any moment of time i we have 
. Hence,
 
 
 
 
 
 
 Next, Lemma 15 implies, that 
 for 
, so
 
 
 
 
 
 Having 
 
, 
 
, and 
 w.h.p., we obtain
 
 
 which proves the lemma. □

This completes the proof in the case  or 
, and the next proposition summarizes the result.

Proposition 2

Let 
, where  and  or 
. Then w.h.p. ϕ is unsatisfiable.

Proof

Recall that our algorithm grows spans for a sequence of pairs of complementary clones waiting for the first success, that is, contradictory paths. First, we estimate the probability of finding contradictory paths for some pair of complementary clones in this sequence. Suppose that at some point we picked clones p and q, and let 
, 
, and 
 be the events from Lemma 13. Then by Lemma 13 with probability at least 
 
 we will be able to accumulate in each of the live sets at least 
 elements, while constructing spans from the complementary clones p and q. Thus,
 

Next, Lemma 15 implies that if event 
 happens, then with probability at least  we will be able to grow both spans for another 
 iterations, such that sizes of the live sets never drop below 
 clones, i.e.
 
 

If the events 
 and 
 happen, then by Lemma 17 with probability at least  the corresponding span contains 2 complementary clones. Let us denote by  the event that there exist 2 complementary clones in the span originating at p.

Then, the probability of event  that a pair of fixed complementary clones p and q, after completing Steps 1–5 form contradictory paths is at least
 
 
 
 
 when . In other words, 
 is a lower bound of the probability that 2 specific complementary clones p and q form contradictory paths. However, recall that we have 
 different pairs of complementary clones, and, moreover, w.h.p. 
 
, when . Since we repeat the TSPAN procedure for at most 
 
 different pair of clones, the probability that none of the picked pairs form a contradiction path is at most
 
 
 
 
 
 
 
 
 
 
 
 
 when . Thus, we've obtained that when 
, then w.h.p. we expect that some pair of clones will form contradictory paths, witnessing unsatisfiability of the formula ϕ. And so the proposition follows. □

5. Satisfiability of 
, when  and 
Chvátal and Reed [15] argue that if 2-SAT formula ϕ is unsatisfiable, then it contains a bicycle, see Section 2.3. Thus, the absence of bicycles may serve as a convenient witness of formula's satisfiability. The general idea of this section is to show that w.h.p. there are no bicycles in 
, when  and 
.

Intuitively, when 
, then we expect 
 
, where 
 is some small number. As it was shown in Lemma 9, the latter quantity approximates the number of newly added live clones, when running the TSPAN procedure. Since TSPAN always performs at least one iteration of growing the span, it may add at most Δ clones into the live set after constructing the very first span from the root. After that each subsequent iteration adds on average 
 
 new live clones. So after running the TSPAN for j iterations, where , when , we expect the live set to contain around
⁎
 
 clones. Therefore, after  iterations, the live set becomes empty, and TSPAN terminates. Thus, we expect paths of length at most , which is not enough for bicycles to occur.

More formally we first show that in the case 
 
 a random formula is unlikely to contain long paths.

Lemma 18

If 
 
, then paths in ϕ are of length , w.h.p.

Proof

Let 
 
, while 
 denotes the event that there exists a path (see section 2.3 for the definition) from literal 
 to 
. Additionally, let 
 be the number of paths of length k in ϕ. Also recall that by  we denote the set of all literals in ϕ, while , where l is some literal, denotes the total number of clones associated with the literal l. Then
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Since w.h.p. 
, and 
 
, we have
 
 
 
 where the last inequality follows from the fact that  for any r.v. . Next, given large enough n, we can assume that 
 
. Hence,
 
 
 
 Next, since , then 
 (see Lemma 4). However, then
 
 and so w.h.p. there are no paths of length greater than 
 in 
. □

Next we give a straightforward estimation of the number of “short” bicycles.

Lemma 19

If 
 
, then for any k the expected number of bicycles of length k is at most 
 
.

Proof

Let 
 be the number of bicycles of length k. Then simple calculation verifies that
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 and the result follows. □

Hence, the above two lemmas imply that ϕ contains no bicycles.

Corollary 4

If 
 
, then ϕ contains no bicycles, w.h.p.

Proof

Let B be the number of all bicycles in ϕ, while 
 is the number of bicycles of length k. Due to Lemma 18, we expect no paths longer than 
 
, which means there are no bicycles longer than 
. Hence, 
. Then by Markov's inequality
 
 
 
 Given large enough n, we can assume that 
 
. Then
 
 
 
 
 
 
 
 Since , we have 
 and 
 w.h.p. Then
 
 Hence, w.h.p. we do not expect short bicycles in ϕ, and, since there are no long paths, it follows that w.h.p. ϕ does not have bicycles at all. □

It remains to argue that the inequality 
 
 holds w.h.p.

Proposition 3

Let 
, where  and 
. Then w.h.p. ϕ is satisfiable.

Proof

Since 
 and  are both finite, we conclude that , and so from Lemma 1 and Lemma 3, it follows that w.h.p.
 
 
 and
 
 
 since 
 
. Hence, as 
, it holds
 
 
 
 
 Therefore, we can assume that
 
 where 
. By Lemma 18 there are no long paths in ϕ, when 
.

Thus, it follows that there should be no long bicycles, and by Corollary 4 there are no bicycles in ϕ at all. Therefore, ϕ is satisfiable, which proves the proposition. □