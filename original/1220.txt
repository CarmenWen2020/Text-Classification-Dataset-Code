Abstract
LPN (learning parity with noise) problem is a good candidate for post-quantum cryptography which enjoys simplicity and suitability for weak-power devices. Döttling et al. (ASIACRYPT 2012) initiated the first secure public key encryption (PKE) under the low-noise LPN assumption. Kiltz et al. (PKC 2014) proposed a simpler and more efficient scheme using double-trapdoor technique from the same assumption. Both schemes abide the decoding failure rate (DFR) 2−Θ(k) (k is the security parameter) and there exists CPA/CCA2-secure PKE with squared-exponential DFR 2−Θ(k2) from constant-noise LPN (Yu and Zhang, CRYPTO 2016). In this work, we give a positive answer with squared-exponential DFR in the low-noise setting.

More precisely, we first introduce a variant (VxLPN) of the low-noise Exact LPN (xLPN, proposed by Jain et al. at ASIACRYPT 2012 and used as building block in commitments and zero-knowledge proofs), where the coefficient matrix A follows the uniform distribution over {0,1}q×n (n=Θ(k2),q=Θ(n)), the secret x is sampled from Bμn (Bμ is the Bernoulli distribution with noise rate μ=Θ(1q)), and the noise e follows a column vector distribution uniform over {z∈{0,1}q:|z|=qμ}. A series of reductions show that VxLPN is at least as hard as the standard LPN for the same noise rate μ. We then construct from the VxLPN CPA/CCA2 secure PKE schemes with squared-exponential DFR 2−Θ(k2) which share the common structure extrinsically with Kiltz et al. and Yu-Zhang schemes. The secret key(s) in our schemes are simply sampled from the Bernoulli distribution, and comparatively, the secret key(s) in Yu-Zhang schemes must be chosen from a tailored version of Bernoulli distribution (along with the coefficient matrix A that follows a distribution Dλn×n=Un×λ⋅Uλ×n induced by multiplying two random matrices in the public key, λ=Θ(log2⁡n)) in order to guarantee the correctness of their schemes. Consider the performance on 128-bit security level, our CCA2-secure scheme only holds 117.79 MB public keys, 67.31 MB secret keys and 10.15 KB ciphertexts, and thus is more efficient than the schemes of Döttling et al. and Kiltz et al. ((14.53 GB, 14.48 GB, 14.06 KB) and (161.78 MB, 92.45 MB, 13.60 KB) respectively).

Keywords
Post quantum cryptography
Learning parity with noise
Low noise
Decoding failure rate
Squared-exponential

1. Introduction
The learning parity with noise (LPN) problem is believed a good candidate for post-quantum cryptography [1]. The computational version of LPN assumption with secret size  and noise rate 
 
 postulates that given any  (number of queries) it is computationally infeasible for any probabilistic polynomial-time (PPT) algorithm to recover the random secret 
 given , where 
 is chosen uniformly at random, 
 is distributed to 
 (the concatenation of q independent copies of 
), 
 denotes the Bernoulli distribution with parameter μ (i.e., 
), ‘.’ denotes matrix vector multiplication over  and ‘+’ denotes the XOR operation. The decisional version of LPN simply assumes that  is pseudorandom. The two versions of LPN have been pointed out to be polynomially equivalent in [2], [6], [18], [25]. LPN enjoys simplicity and suitability for weak-power devices (e.g., RFID tags) than other quantum-secure candidates such as Learning with Errors (LWE) [26]. The first cryptographic application of LPN is lightweight authentication [7], [15], [16].

LPN Hardness. LPN has also been extensively studied in learning theory [4], [10], [12]. Under a constant noise rate, the most famous algorithms [15], [21] for solving LPN problem require 
 time and samples. If one is restricted to  samples, then the most famous attack [27] requires 
 time. The best known solvers [22] for solving LPN problem need to use only 
 LPN samples when needed only 
 time. Under a low noise rate 
 
, if one is restricted to  samples, then the best attack has exponential complexity 
 [3], [5], [18], [20].

PKE with CCA2 security. Döttling et al. [12] constructed the first CCA2-secure PKE scheme (of high complexity) from low-noise LPN by using the correlated products approach of [24]. Kiltz et al. [19] constructed a simpler and more efficient CCA2-secure scheme with the techniques from LWE-based encryption in [23] and some technical changes. Specifically, they used a double trapdoor mechanism in order to answer the decryption queries in game simulation, together with a trapdoor switching lemma base on a computational variant of the leftover hash lemma. Both schemes abide the decoding failure rate (DFR) 
 (k is the security parameter). In [27], Yu and Zhang showed the CCA2-secure scheme with auxiliary input from constant-noise LPN, which supports squared-exponential DFR 
.

1.1. Our contribution
For the same DFR level, the low-noise constructions of Döttling et al. [12] and Kiltz et al. [19] require higher security parameters which further lead to higher sizes of public/secret keys and ciphertexts than Yu-Zhang schemes [27]. In this work, we give a positive answer with squared-exponential DFR in the low-noise setting.

We first introduce a variant (VxLPN) of Learning Parity with Noise where the coefficient matrix A follows the uniform distribution over 
 (
), the secret x follows 
 (
 denotes the Bernoulli distribution with parameter 
 
), and the noise e is sampled uniformly at random from an error distribution, i.e., a column vector distribution uniform over 
. In other words, the Hamming weight of the noise e is exactly μq. A series of reductions show that VxLPN is at least as hard as the standard LPN for the same noise rate μ.

We then construct from the VxLPN CPA/CCA2 secure PKE schemes with squared-exponential DFR 
 which share the common structure extrinsically with Kiltz et al. and Yu-Zhang schemes. Whereas, one can readily see the separation of Yu-Zhang schemes and ours in spite of the squared-exponential DFR.

–
The secret key(s) in our schemes are simply sampled from the Bernoulli distribution. Comparatively, the secret key(s) in Yu-Zhang schemes must be chosen from a tailored version of Bernoulli distribution with a noise rate  (along with the coefficient matrix A that follows a distribution 
 induced by multiplying two random matrices in the public key, 
) in order to guarantee the correctness of their schemes.

–
Note that it is mandatory for Yu-Zhang CPA (or CCA2, resp.) construction to assume efficiently decodable code: for constant 
, the code can correct at least a 
-fraction (or 
, resp.) of bit flipping errors which exists for the block length 
 (or 
, resp.), e.g. [13]. In contrast, the schemes of Kiltz et al. and ours plainly use a binary linear error-correcting code 
 which corrects up to αm errors (α is a constant, e.g., 1/4).

Consider the performance on 128-bit security level, our CCA2-secure scheme only holds 117.79 MB public keys, 67.31 MB secret keys and 10.15 KB ciphertexts, which is more efficient than the schemes of Döttling et al. and Kiltz et al. ((14.53 GB, 14.48 GB, 14.06 KB) and (161.78 MB, 92.45 MB, 13.60 KB) respectively).

The rest of the paper is organized as follows. Section 2 recall related complexity assumptions and PKE definitions. Section 3 presents a variant of low noise LPN, its security, and a technical lemma that will be used in constructing our schemes. CPA-secure PKE and its analysis of correctness and security are described in section 4. Section 5 gives the CCA2-secure PKE and related analysis. Section 6 compares the DFR and performance among existing CCA2-secure constructions from low-noise LPN.

2. Preliminaries
We denote column vectors by bold lowercase letters (e.g., s), and view row vectors as the transpose of column vectors (e.g., 
.  refers to the Hamming weight of the column vector s. Matrices are represented by bold capital letters (e.g., A). We use 
 to denote the Bernoulli distribution with parameter μ (i.e., 
), while 
 denotes the concatenation of q independent copies of 
. 
 denotes a column vector distribution uniform over 
 (as slight abuse of notion, qμ might be referring to  when specifying the Hamming weight of a vector) and 
 denotes a matrix distribution whose every column is i.i.d. to 
. 
 refers to sample x from distribution χ uniformly at random, and  means sampling x according to distribution χ. We use 
 (and 
) to denote a uniform distribution over 
 (and 
 respectively). Let  be a negligible function in n.

2.1. Learning parity with noise
Definition 1 Learning Parity with Noise

For 
 
, the decisional -LPN problem is hard if for every PPT algorithm  we have(1)
 where 
 and 
. The computational -LPN problem with the same n and μ is hard if for every PPT algorithm  we have(2) where 
 and 
. In some scenarios such as PKE, the problems further put a constraint on the number of samples, q, and thus might be written as -LPN problems.

Concrete hardness. For , we say that the decisional/computational -LPN is T-hard if every probabilistic adversary of running time T the distinguishing (resp., inverting) advantage in (1) (resp., (2)) is upper bounded by . For -LPN problem (whose q is unspecified), an implicit constraint is .

Definition 2 VLPN

For 
 
, the decisional -VLPN problem is hard if for every PPT algorithm  we have
 where 
 and 
. The computational -VLPN problem with the same n and μ is hard if for every PPT algorithm  we have where 
 and 
.

The decisional -VLPN problem to decisional -LPN problem reduction can be referenced to [12].
Definition 3 Exact Learning Parity with Noise (xLPN)

For 
 
, the decisional -xLPN problem is hard if for every PPT algorithm  we have
 where 
 and 
. The computational -xLPN problem with the same n and μ is hard if for every PPT algorithm  we have where 
 and 
.

The decisional -xLPN problem to decisional -LPN problem reduction can be referenced to [15].
Lemma 1

Chernoff bound [12]
If 
 and , it holds that
 

2.2. Public key encryption
A public key encryption =(KeyGen, Enc, Dec) with message-space  consists of three PPT algorithms. On input the security parameter k, the key generation algorithm outputs a pair of public key pk and secret key sk:  KeyGen
. On input a public key pk and a plaintext , the encryption algorithm outputs a ciphertext Enc. On input a ciphertext C and a secret key sk, the decryption algorithm returns Dec (or a failure symbol ⊥). We say that  is correct, if for all plaintexts , it holds that
 Next we recall the standard IND-CPA and security notions for PKE. Let  denote a PPT adversary.

Definition 4 IND-CPA PKE

A PKE scheme  is IND-CPA secure, if for any PPT adversary , the advantage of  is negligible in the experiment defined as below:

1.
The challenger  generates a pair of keys KeyGen
. The public key pk is given to .

2.
The adversary  outputs a pair 
. The challenger  samples a challenge bit 
⁎
 at random and generates a challenge ciphertext 
⁎
⁎
.  gets 
⁎
.

3.
Finally,  outputs a guessing bit 
. The advantage of  is defined as 
⁎
.

Definition 5 IND-CCA2 PKE

A PKE scheme  is IND-CCA2 secure, if for any PPT adversary , the advantage of  is negligible in the experiment defined as below:

1.
The challenger  generates a pair of keys KeyGen
.  is given pk and can make decryption queries to the oracle Dec
.

2.
The adversary  outputs a pair 
. The challenger  samples a challenge bit 
⁎
 at random and generates a challenge ciphertext 
⁎
⁎
. The adversary  gets 
⁎
. The adversary  can continue its access to the decryption-oracle (except on the challenge ciphertext).

3.
Finally,  outputs a guessing bit 
. The advantage of  is defined as 
⁎
.

3. A variant of exact learning parity with noise
Now we define formally VxLPN, a variant of Exact Learning Parity with Noise problem.

Definition 6 VxLPN

For 
 
, the decisional -VxLPN problem is hard if for every PPT algorithm  we have
 where 
 and 
. The computational -VxLPN problem with the same n and μ is hard if for every PPT algorithm  we have where 
 and 
.

3.1. Security of VxLPN
Abhishek et al. [15] demonstrated that the decisional -xLPN problem is polynomially equivalent to the computational -LPN problem. For the security of VxLPN, we have the following reductions: In particular, we show in Lemma 3 that the decisional -VxLPN problem is as hard as the computational -VxLPN problem by using the sample-preserving reduction. We state in Lemma 2 below that VxLPN is at least as hard as VLPN.

Lemma 2

Any algorithm  that breaks the computational -VxLPN problem with advantage ϵ implies another algorithm 
 that breaks the computational -VLPN problem with advantage .

Proof

Observing that 
 is a convex combination of uniform distributions of different weights (i.e., 
), we only keep one of these distributions which is 
. If 
, the probability of the event  is . The question is exactly VxLPN. Thus, the computational -VxLPN problem is intractable if the computational -VLPN problem is intractable.

It is tricky to show the equivalence of decisional -VxLPN and computational -VxLPN version. The classical search to reduction for the decisional -LPN problem in [6] does not work for the decisional -VxLPN problem, but we can do reduction by the Goldreich-Levin theorem [14]. □

Lemma 3

The hardness of the decisional -VxLPN problem is polynomially equivalent to the hardness of the computational -VxLPN problem.

Proof

We prove it (see Appendix A) by using the sample preserving reduction from [2]. With a standard hybrid argument technique, we have that a matrix-version of the decisional -VxLPN problem is also hard. We use the decisional -VxLPN assumption and the matrix-version of the decisional -VxLPN assumption to prove the securities of our schemes. □

3.2. A technical lemma
The following technical lemma will be used in proving the correctness of our CPA/CCA2-secure schemes.

Lemma 4

For constants 
 
 and , let 
, 
 and 
, we have

1)
 
 and

2)
 
.

Proof

We analyze the inner product 
, where . It's obvious that a necessary condition for 
 is that  for at least one of the i's where . We use this in the second step (eq. (4)), and the union bound in the fourth step (eq. (6)). So it holds that(3)
(4)(5) 
 (6)
 
 Let 
 
, we have (note that 
 
 
)
 
 by using the Chernoff bound.

Next, 
 
 
 and 
 
 are lower bounded by constants and therefore
 
 We define matrix E as  
 . We note that 
 
. So we can also prove that 
 
 in a similar way (note that 
 
). We omit these details. □

4. CPA secure PKE from VxLPN
Our PKE scheme uses the following parameters and building blocks. Let k be a security parameter, let c and α be constants with 
 
 and , let m and n be positive integers with 
 and , and let  be a noise rate. A generator matrix 
 can correct up to 
 
 bit errors in the codeword [19]. We present the construction of our PKE scheme  as follows.

Gen(
): On input a security parameter k, it samples 
, 
 and 
, and then computes . The output is .

Enc(): On input the public key  and a plaintext 
, it chooses matrices 
 and 
. Then, it outputs 
 as ciphertext, where

Dec(): On input the secret key  and a ciphertext 
, it computes
 and uses the error correction property of G to reconstruct p. If 
 
 is true, it outputs p, otherwise outputs .

Theorem 1 Correctness

Our  is correct.

Proof

The correctness of the  requires the following:

1.
 
.

2.
.

For 
, it holds that As C is a properly generated ciphertext, it holds by using Lemma 4 that
 
 
 with overwhelming probability 
, where 
 and 
. Then we can decode the correct p from 
 (since the error term satisfies 
 
) by using the error correction property of the code G. The decoding failure rate is 
. □
Theorem 2 Security

Under the decisional -VxLPN assumption, our  is IND-CPA secure.

Proof

Suppose that  is a PPT adversary against the IND-CPA security of the . We prove that the advantage 
 is negligible, by defining a sequence of games and showing adjacent games indistinguishable. We use 
 to denote the probability of a particular event that the adversary  wins in Game i.

Game 0. This is the IND-CPA security experiment for . Then by definition, we have 
 
.

Game 1. It is the same as Game 0, except that, b contained in the public key  is uniformly chosen from 
. Under the decisional -VxLPN assumption, 
 in Game 1 is computationally indistinguishable from  in Game 0. For this reason, 
.

Game 2. It is the same as Game 1, except that, the challenge ciphertext 
⁎
⁎
⁎
 is chosen from 
. Under the matrix-version of the decisional -VxLPN assumption, we have that 
⁎
 in Game 1 is computationally indistinguishable from 
⁎
 in Game 2. By using the Goldreich-Levin theorem, we have that 
⁎
⁎
⁎
⁎
 in Game 1 is computationally indistinguishable from 
⁎
⁎
⁎
 in Game 2. Therefore, it holds that 
.

In Game 2, the challenge ciphertext is uniformly distributed. The challenge bit b is completely hidden to . Then, it holds that 
 
. In summary, we have that 
 
. Thus, the proposed  is IND-CPA secure.

5. CCA2 secure PKE from VxLPN
In this section, we construct secure PKE from VxLPN. Our construction is a tag-based PKE secure against selective tag and chosen ciphertext attacks under VxLPN assumption, which can be transformed into a standard secure PKE by using known techniques [9], [19], [27].

5.1. Tag-based encryption
A tag-based encryption (TBE) scheme with tag-space  and message space  consists of three PPT algorithms (KeyGen, Enc, Dec). On input the security parameter k, the key generation algorithm outputs a public key pk and a secret key sk:  KeyGen
. On input a public key pk, a tag , and a plaintext , the encryption algorithm outputs a ciphertext C:  Enc. On input sk and C, the deterministic algorithm outputs a plaintext p or a special symbol ⊥:  Dec. For correctness, we require that the equation Dec holds with overwhelming probability for all  KeyGen
, any tag , any plaintext  and any  Enc. For the security of , we consider the following game between a challenger  and an adversary .

Init. On input the security parameter k, the adversary  outputs a target tag 
⁎
 to the challenger .

KeyGen. The challenger  computes  KeyGen
, and keeps the secret key sk to itself. The public key pk is given to the adversary .

Phase 1. The adversary  can make decryption queries for any pair , with a restriction that 
⁎
, and the challenger  outputs  Dec to  accordingly.

Challenge. The adversary  outputs two equal length plaintexts 
. The challenger  randomly chooses a bit 
⁎
. The challenge ciphertext 
⁎
 Enc
⁎
⁎
 is output by the challenger  and given to the adversary .

Phase 2. The adversary  can make more decryption queries as in Phase 1.

Guess. Finally,  outputs a guess 
.

Advantage. The advantage of the adversary  is defined as
⁎
 

Definition 7 IND-sTag-CCA2

The TBE scheme  is IND-sTag-CCA2 secure if it holds that 
 for any PPT adversary .

5.2. Our construction
Our construction follows the common structure of previous works in [19], [26], [27]. Let k be the security parameter, let 
 be any constants, let c and α be constants, and 
 
, . Let 
 
 denote the noise rate. Let 
 be the generator matrices which can correct up to αm and μl errors respectively (we refer to [17], [19], [25], [27] for details). Let the tag-space 
. Let 
 denote a matrix representation for finite field elements 
 [8], [11] such that 
 and 
 is invertible for any . We show the construction of our TBE scheme  as follows.

KeyGen(
): On input a security parameter k, it uniformly chooses matrices 
, and computes 
. The output is 
, 
.

Enc(): On input the public key 
, a tag  and a plaintext 
, it samples matrices 
 and 
. Then, it outputs 
 as ciphertext, where

Dec(): On input the secret key 
, a tag  and a ciphertext 
, it computes
 Then, it reconstructs 
 (from the error 
) by using the error correction property of G and computes 
. If it holds that(7) 
 
 
  
 
 
 
 
 
 
 
 
 then uses the error correction property of 
 to reconstruct p (from the error 
), else let . Finally, the output is p.

Remark 1

As one can see, the matrix 
 in the secret key 
 can also be used to decrypt the ciphertext. We can use the error correction property of G to reconstruct 
 (from the error 
). Similarly, if the eq. (7) holds, then it reconstructs p (by 
) from the error 
, else let . The output is p.

Theorem 3 Correctness

Our  is correct.

Proof

The correctness of the  requires the following:

1.
 
 
.

2.
 (to reconstruct 
 by using the error correction property of G).

3.
 (to reconstruct p by using the error correction property of 
).

For 
 and 
, it holds that
 As C is a properly generated ciphertext, it holds that
 
 
 
 
 with overwhelming probability 
 by using Lemma 4, where , 
 and 
. For , we can decode the correct 
 from 
 by using the error correction property of G, where the error term satisfies 
. Then, we compute 
. We recall that 
. Finally, we can decode the correct p from 
 by using the error correction property of 
, where the error term satisfies 
. The decoding failure rate is 
. □
Theorem 4 Security

Under the decisional -VxLPN assumption, our  is IND-sTag-CCA2 secure.

Proof

Suppose that  is a PPT adversary against the IND-sTag-CCA2 security of our scheme. We prove that the advantage 
 of  is negligible in n, by defining a sequence of games and showing adjacent games indistinguishable. We use 
 to denote the probability of a particular event that the adversary  wins in Game i.

Game 0. This is the IND-sTag-CCA2 security experiment for the . The challenger  honestly runs the adversary  with the security parameter k, and obtains a target tag 
⁎
 from . The challenger  simulates the IND-sTag-CCA2 security game for  as follows:

KeyGen. The challenger  uniformly chooses matrices 
, and computes 
. The challenger  sends 
 to , and keeps 
 for itself.

Phase 1. If the adversary makes a decryption query 
 with 
⁎
, the challenger  sends ⊥ to the adversary . Otherwise, it computes
 and uses the error correction property of G to reconstruct 
. The challenger  computes 
. If it holds that
 
 
 then uses the error correction property of 
 to reconstruct p from the error 
, else let . Finally, the challenger  sends p to the adversary .

Challenge. When the adversary  sends two equal length plaintexts 
 to , the challenger  chooses matrices 
 and 
, and chooses a bit 
⁎
 at random. Then,  sends challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 to the adversary , where
⁎
⁎
⁎
⁎
⁎
⁎
⁎

Phase 2. The adversary  can make more decryption queries, and the challenger  responds as in Phase 1.

Guess. Finally, the adversary  outputs a guess 
.

Lemma 5

 
.

Proof

The challenger  honestly runs the adversary , so the advantage of  is 
 
. □

Game 1. It is the same as Game 0, except that, the challenger  changes the key generation phase as follows:

KeyGen. The challenger  uniformly chooses matrices 
, 
 and 
, and computes 
. The challenger  returns 
 to the adversary , and keeps 
 for itself.

Lemma 6

.

Proof

The only difference between Game 0 and Game 1 is that the challenger  replaces 
 in public key in Game 0 with 
 in public key in Game 1. Under the matrix-version of the decisional -VxLPN assumption, 
 in Game 0 is computationally indistinguishable from 
 in Game 1. Consequently, we have that 
. □

Game 2. It is the same as game 1, except that, the challenger  changes the key generation phase and challenge phase as follows:

KeyGen. The challenger  uniformly chooses matrices 
 and 
, and computes 
⁎
. The challenger  sends 
 to the PPT adversary , and keeps 
 for itself.

Challenge. When the adversary  sets two equal length plaintexts 
 to , the challenger  chooses 
 and 
, and samples a bit 
⁎
 at random. Finally, the challenger  returns challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 to the adversary , where
⁎
⁎
⁎
⁎
⁎
⁎
⁎

Lemma 7

.

Proof

It is different that the challenger  replaces 
 in public key in Game 1 with 
⁎
 in public key in Game 2. If 
 is uniformly distribution, we have that 
⁎
 is also uniformly distribution. In addition, 
 and 
 in the key generation phase are sampled from the same distribution as 
 and 
 in the challenge phase respectively. Noted that 
 is not included in the public key, so the adversary has not obtained any information about 
 and 
 before the challenge phase. The challenge ciphertext in Game 1 has the same distribution as the challenge ciphertext in Game 2. In all, Game 1 and Game 2 are identical from the adversary's view. So, we have that 
.

Game 3. It is the same as Game 2, except that, the challenger  changes the key generation phase as follows:

KeyGen. The challenger  uniformly chooses matrices 
 and 
, and computes 
⁎
. The challenger  sends 
 to the adversary , and keeps 
 for itself.

Lemma 8

.

Proof

The only difference between Game 3 and Game 2 is that the challenger  replaces 
⁎
 in public key in Game 2 with 
⁎
 in public key in Game 3, where 
 and 
. Under the matrix-version of the decisional -VxLPN assumption, 
 in Game 2 is computationally indistinguishable from 
 in Game 3. So, we have that 
.

Note that 
⁎
 in challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 is equal to 
⁎
.
Game 4. It is the same as Game 3, except that, the challenger  answers decryption queries for any 
 by using 
 instead of 
.

Lemma 9

.

Proof

As one can see, 
 and 
 have equivalent decryption ability except with negligible probability. □

Game 5. It is the same as Game 4, except that, the challenger  changes the key generation phase and the challenge phase as follows:

KeyGen. The challenger  uniformly chooses matrices 
 and 
, and computes 
⁎
⁎
. The challenger returns 
 to the adversary , and keeps 
 for itself.

Challenge. When the adversary  sets two equal length plaintexts 
 to , the challenger  chooses 
 and 
. The challenger chooses a bit 
⁎
 at random. Then, it returns challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 to the adversary , where
⁎
⁎
⁎
⁎
⁎
⁎
⁎
⁎
⁎

Lemma 10

.

Proof

We prove this Lemma by using similar proofs from Lemma 6 to Lemma 9. We omit these details. □

Game 6. It is the same as Game 5, except that, the challenger  changes the challenge phase as follows:

Challenge. When the adversary  sets two equal length plaintexts 
 to , the challenger  chooses 
 and 
, and randomly samples a bit 
⁎
. Then, the challenger  returns challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 to the adversary , where
⁎
⁎
⁎
⁎
⁎

Lemma 11

Under the decisional -VxLPN assumption, we have that 
.

Proof

The only difference between Game 6 and Game 5 is that the challenger  replaces 
⁎
 and 
⁎
⁎
 in Game 6 with 
⁎
 and 
⁎
⁎
 in Game 5, where 
. Under the decisional -VxLPN assumption, the challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 in Game 6 is computationally indistinguishable from the challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 in Game 5. So, we have that 
. □

Lemma 12

 
.

Proof

Note that the challenge ciphertext 
⁎
⁎
⁎
⁎
⁎
 in Game 6 perfectly hides the information of 
⁎
. □

In all, we prove that our  is IND-sTag-CCA2 secure by using Lemma 6 - Lemma 12. In other words, we have that 
 
.

6. Decoding failure rate and specific parameters
From low-noise LPN, Döttling et al. [12] and Kiltz et al. [19] constructed two secure PKE schemes (i.e., TBE). In Table 1, we compare the probabilities that the decryption algorithms fail to decode (i.e., decoding failure rate). In our , DMN [12], and KMP [19], we let 
. In DMN, we let 
. Obviously, the decoding failure rate of our  is much smaller than those of DMN and KMP. In our , DMN and KMP, the probability that the decryption algorithms can successfully reconstruct the plaintext p is 
, 
, 
, respectively. Take n=100 for example, the decoding failure rate of our  scheme is 
, which is 
 for DMN and 
 for KMP. To get a suitable DFR, DMN and KMP might make larger n which would in turn hit the performance (e.g., the sizes of keys and ciphertexts) of the schemes. We mention that Yu and Zhang [27] presented CCA2 secure PKE with squared-exponential DFR from constant-noise LPN by using some specific building blocks such as tailored version of Bernoulli distribution, a distribution induced by multiplying two random matrices, and efficiently decodable code that can correct next to 1/2-fraction of bit flipping errors (see section 1.1).


Table 1. Decoding failure rate.

n	DMN [12]	KMP [19]	Ours
100	2−Θ(10)	2−Θ(14.14)	2−Θ(200)
1600	2−Θ(40)	2−Θ(56.57)	2−Θ(3200)
6400	2−Θ(80)	2−Θ(113.14)	2−Θ(12800)
11881	2−Θ(109)	2−Θ(154.15)	2−Θ(23762)
13924	2−Θ(118)	2−Θ(166.88)	2−Θ(27848)
14400	2−Θ(120)	2−Θ(169.71)	2−Θ(28800)
Next, we provide specific parameters for our  based on the (matrix version) VxLPN assumption. We know from the reduction games that, if the decisional -LPN problem can be solved in time 
, then the decisional -VxLPN problem can be solved in time about 
 and our  (from matrix version VxLPN) has security 
. Let 
 
, our  achieves about 128-bit security. For 128-bit security of KMP scheme, we set 
 
 [19]. For 128-bit security of DMN scheme, we set 
 [12]. We also let  in our  and KMP, and let 
 and 
 for 
-ary code in DMN. Table 2 shows that our  scheme is more efficient than DMN and KMP in terms of key sizes and ciphertext overhead on 128-bit security.


Table 2. Specific parameters on 128-bit security.

Scheme	|Public key|	|Secret key|	|Ciphertext|
DMN [12]	14.53 GB	14.48 GB	14.06 KB
KMP [19]	161.78 MB	92.45 MB	13.60 KB
Ours	117.79 MB	67.31 MB	10.15 KB
