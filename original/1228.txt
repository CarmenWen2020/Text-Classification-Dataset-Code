Abstract
Modelling of chromosomes with permutations has triggered the research of sorting permutations using global rearrangement operations in computational molecular biology. One such rearrangement is transposition which swaps two adjacent substrings. If one of the substrings is restricted to be the prefix of the permutation then that operation is called a prefix transposition. The symmetric prefix transposition distance between two permutations is defined to be the minimum number of prefix transpositions required to transform one into another. Group theory dictates that an upper bound for prefix transposition distance between any pair of permutations in the symmetric group Sn is equivalent to the upper bound for sorting any permutation with prefix transpositions. In this paper, we improve the upper bound for sorting permutations with prefix transpositions to n−log2⁡n.

Keywords
Permutations
Sorting
Transpositions
Prefix transpositions
Upper bound

1. Introduction
The genome rearrangement problem in computational biology was proposed to estimate the evolutionary distance between two different species. The problem is to transform one genome into another in a minimum number of rearrangements or elementary operations. Apart from the study of evolutionary distances, they are used in medicinal and agricultural research where the functional effect of these rearrangements on the organisms is studied. The mathematical formulation of this problem is to represent a genome using a permutation (signed or unsigned). The most common and widely studied genome rearrangements are reversals [1] and transpositions [2]. A reversal reverses a segment of the genome while a transposition moves a segment to another position in the genome. If the orientation of the genes is considered, we use signed permutations to represent the genome. In this case, the reversal changes the sign of the gene while reversing the order. For transpositions, since the rearrangement does not flip a segment, the sign of a permutation is insignificant. By assuming one of the genomes as the identity permutation, the genome rearrangement problem can be considered as the problem of sorting a given permutation in the smallest number of rearrangements. Signed permutations can be sorted using reversals in polynomial time [3], whereas the problem of sorting unsigned permutations is NP-hard [4]. Lima et al. [5] provided an expression for the average reversal distance for signed permutations in terms of probabilities. We see that even though these operations are simple, obtaining concrete formulae for sorting them is very complex. Sorting by unsigned transpositions has also been proved to be NP-hard [6]. The best known algorithms with a factor of 1.375 have been proposed for reversals and transpositions by Berman, Hannenhalli, and Karpinski [7] and Elias and Hartman [8] respectively. Another variant of operation that allows combinations and weights for reversal and transpositions have also been proven to be NP-hard [9], [10]

Of the several variants of these problems, the ‘prefix’ constraint, where operations act on a prefix of the permutation, is the most common. Other than genome rearrangements, it finds practical applications in interconnection network design where the restriction to use a prefix of permutation reduces the size of the generated network while maintaining a low value for its diameter, thereby guaranteeing a low maximum communication delay [11]. Prefix reversals [12], [13] and prefix transpositions [14] have been studied extensively. Recently Labarre [15] studied sorting of prefix block-interchanges and provided a 2- approximation algorithm for the problem.

A permutation 
 over set  with n symbols, is a sequence that contains every element of the set exactly once. The set of all permutations on S forms the symmetric group 
. A transposition  is an operation on 
 that transforms π into another permutation by moving the symbols 
 to the position between 
 and 
. A prefix transposition is a special case of transposition when  and hence can be denoted as , where the sublist (substring) from 
 up to 
 is moved to the position between 
 and 
 in π. For example, the prefix transposition  transforms the permutation  to . The prefix transposition distance between two permutations 
 and 
 in 
 is the minimum number of prefix transpositions that are needed to transform 
 into 
. Transforming one permutation into another by the minimum number of generators is equivalent to sorting another permutation by the same generator sequence [16], [11]. Thus, an upper bound for the prefix transposition distance over all permutations in 
 can be obtained by finding the upper bound to sort any permutation 
 by prefix transpositions.

Two consecutive symbols 
 and 
 in π are said to form an adjacency if 
. The sorted permutation 
 has  adjacencies where as the reverse permutation 
 does not have a single adjacency. A permutation without any adjacency is called an irreducible or reduced permutation. Any permutation 
 that is not irreducible can be reduced to 
, by replacing a sublist of  adjacent symbols in 
 by the smallest symbol (say 
) in the sublist and replacing the symbols 
 by 
 whenever 
. For example, the permutation 
 can be reduced to 
, where the sublist  is replaced by 1. Also, 
 can be reduced to 
. Due to Christe [17], it can be shown that sorting the permutation 
 with k adjacencies by prefix transpositions is equivalent to sorting the corresponding reduced permutation 
.

We call a prefix transposition on a permutation a move. A move can create or destroy zero, one, or two adjacencies. While sorting a permutation, we do not break any adjacencies and so will only consider moves that create adjacencies. A move that creates zero adjacencies is called a blank. Moves that make one and two adjacencies are called single and double respectively. Dias and Meidanis [14] in 2002 proposed the problem of determining bounds to sort a permutation by prefix transpositions. They provided lower and upper bounds of 
 
 and , respectively, using a 2-approximation algorithm. They sorted 
 in  moves and the proof of correctness for the same is given by Fortuna [18]. Further, they conjectured that the maximum prefix transposition distance among permutations with n symbols is . In 2008, Chitturi and Sudborough [19] improved the lower bound to 
 
. Subsequently, the lower bound was improved to  by [20]. [19] employed SequenceLength algorithm to improve the upper bound to 
. The upper bound was further improved to 
 
 in [21].

The SequenceLength algorithm is a greedy method defined on irreducible permutations, that employs a sequence of singles culminating in a double. This method is greedy because an optimum sequence may contain blanks. The distance between two symbols 
 and 
 of a permutation 
 is defined as 
 [21]. Note that 
 and hence this measure of distance is not symmetric. The symbols 
, 
 and 
 are denoted by 
, x and y respectively. Now we traverse through the symbols of the permutation and find symbols 
 such that 
 for each . The symbols 
 are called visited symbols of the permutation and  is the last visited symbol. All the symbols in π other than x, y and visited symbols are called skipped or unvisited symbols. The sublist 
 of π is called the 
 interval of the permutation. The last skipped symbol in the 
 interval, if it exits, is denoted by 
. Note that 
 is the second interval of π. The construction of SequenceLength algorithm guarantees that 
 and every skipped symbol in the 
 interval is greater than 
. The 
 regular greedy move of the SequenceLength algorithm moves the sublist 
 to a position immediately after 
. We shall denote this prefix transposition as
⁎
 where the symbols in square brackets are moved to the position denoted by an asterisk. Note that 
 can be the next visited symbol 
 or a skipped symbol after 
. These moves are executed until  becomes the first symbol. In the next move we get a double.⁎

In the SequenceLength algorithm, the symbols in π that have been carried forward as the result of previous moves will not occur in the first position of any subsequent permutation, which is a justification for the names visited and skipped symbols. A detailed description of the SequenceLength algorithm is present in [19]. To illustrate the SequenceLength algorithm, we consider a permutation 
. Here  and . The visited symbols are 
 and the regular greedy moves are⁎⁎⁎⁎

Dias and Meidanis [14] designed an algorithm to sort permutation 
 in 
 
 prefix transpositions. This algorithm sorts 
 in six moves as shown below:⁎⁎⁎⁎⁎⁎

Further 
 can make seven adjacencies in six moves using the algorithm in [14]. Chitturi and Sudborough [19] proved that the maximum number of moves to obtain a double in SequenceLength algorithm is 
 
 and the number of visited symbols in an irreducible permutation without any skipped symbol in between them is at most seven. In [19], if the permutation is in the form of 
, the algorithm by Dias and Meidanis [14] is executed, else the regular moves of SequenceLength algorithm are executed until a double is encountered.

In 2015, Chitturi [22] improved the upper bound to 
 
. Then the upper bound was improved to 
 in [23], [24]. This is the best known upper bound. In this paper we shall improve the current best upper bound 
 in [24] to 
. The rest of the article is organised as follows. In section 2, after proving some preliminary lemmas and observations we define a block. We discovered that the presence of blocks in a permutation facilitates the sorting of the permutation. Blocks play a fundamental role in our proof. In Lemma 4, Lemma 5 we show that, if the permutation has a block that contains the first symbol and this block is followed by a skipped symbol or a visited symbol respectively, then we get an upper bound of 
. If the only block containing the first symbol is the entire permutation, then an upper bound of 
 is proved in Lemma 6. Then in Theorem 1, we use all these lemmas and prove the upper bound of 
. Section 3 contains the conclusions.

2. Proposed algorithm
Definition 1

A prefix transposition is called an alternate move if it is not a regular greedy move of the SequenceLength algorithm and increases the number of adjacencies by at least one.

For example, in permutation , which is used to illustrate the SequenceLength algorithm in the introduction section, an alternate move is given by⁎
The basic principle used in the SequenceLength algorithm is to obtain a double preceded by singles in at most 
 
 moves and thus sorting the permutation faster. Suppose that, in a sequence of greedy moves of the SequenceLength algorithm, αn symbols are visited and  are skipped until a double is encountered (), then Chitturi [22] has shown that the upper bound for sorting such a permutation is 
 
. If x is the number of visited symbols and y is the number of skipped symbols, then  and .(1)
 
 
 
 
 
 Hence the base of the logarithm is the ratio of the number of symbols moved by the number of skipped symbols. In our algorithm, which is a modified version of the SequenceLength algorithm, we shall introduce some alternate moves along with the regular moves to get a double faster. For a permutation 
, with visited and skipped symbols, the sublist 
 of π is called the 
 interval. Here we shall assume that the 
 interval is the first interval in π to have a skipped symbol. Also, due to Chitturi [19], we assume that .

Observation 1

Let 
 be a permutation with at least  skipped symbols in the 
 interval, then an upper bound to sort the permutation by prefix transpositions is 
.

Proof

Suppose π has at least  skipped symbols in the 
 interval. Then in  regular greedy moves of the SequenceLength algorithm, we move at least  symbols among which  are skipped. Hence by (1), the upper bound is given by 
 
. □

Lemma 1

Let 
 be a permutation that contains a skipped symbol in every interval then an upper bound for sorting π by prefix transposition is 
.

Proof

We repeatedly execute the regular greedy move of the form shown below where each move we skip a symbol. Thus, by (1) 
 is an upper bound.

⁎
 □

To establish an upper bound of 
 to sort permutations by prefix transpositions, due to Observation 1, Lemma 1 and the algorithm to sort 
 [14], it suffices to prove that 
 holds when the number of skipped symbols in the 
 interval is at most , where . In the remainder of this section, we shall assume that the 
 interval contains at most  skipped symbols and .

Observation 2

Let 
 be a permutation with exactly  skipped symbols in the 
 interval. If the 
 interval has more than one skipped symbol, then an upper bound to sort the permutation by prefix transpositions is 
.

Proof

Suppose π has  skipped symbols in the 
 interval and at least two skipped symbols in the 
 interval. Then in j regular greedy moves of the SequenceLength algorithm, we move at least  symbols among which j are skipped. Hence by (1), the upper bound is given by 
 
. □

Lemma 2

Let s be any skipped symbol in the 
 interval of permutation π. If  lies to the right of 
, then 
 is an upper bound for sorting π.

Proof

Consider 
. The alternate move
⁎
 moves at least m symbols of which  are skipped. Let 
 interval have j skipped symbols, note that  (Otherwise Observation 1 gives a bound of 
) and each of these skipped symbols is greater than 
. Let 
 be the first symbol in the 
 interval after the first move. We repeat applicable alternate moves of the forms shown below depending on whether 
 is to the left or right of 
. Thus we move all the symbols that are to the left of 
 to its right in at most  moves.

1: 
⁎

2: 
⁎ 

Thus, in j moves,  symbols are moved of which  are skipped. This produces an upper bound of 
 
 which maximises to 
 
 
 when . Hence the upper bound in this case is less than 
. □

Definition 2

A sublist, say S of 
 with  elements is a block, if S is composed of k consecutive integers, that is when S is sorted then it is just k consecutive integers.

For example, consider the permutation  with nine symbols. Here  is a block of π with 2 symbols,  and  are blocks with three symbols,  is a block containing five symbols and  is a block with eight symbols. Note that a permutation 
 is a block with n symbols.
Lemma 3

Let C be a block of permutation π and , if C has some visited symbols then the last visited symbol in C will be the smallest element in C, say 
. C has all the elements in the closed interval 
 where 
 is the greatest element in C.

Proof

Let 
 and 
 be the last visited symbol in C, say 
. By the construction of SequenceLength algorithm, 
 for every skipped symbols c in the 
 interval and all symbols that lie to the left of 
 in π are greater than 
. Since 
 is the last visited symbol in C, all the symbols in C that lie to the right of 
 are skipped symbols in the 
 interval. Hence 
 is the minimum element in C. The second part of the lemma follows from the definition of a block. □

Lemma 4

Let π be a permutation with n symbols, C be a block in π with k symbols, where . If 
 belongs to C, a skipped symbol 
 succeeds C in π and there is at least one interval in π after C that contains a skipped symbol, then an upper bound for sorting the permutation with prefix transpositions is 
.

Proof

Suppose that 
 is a proper sublist of π that forms a block with 
 being the last visited symbol in C, note that by Lemma 3, 
 is the smallest number in C. Then permutation π takes the form 
, where 
 are skipped symbols in the 
 interval. Let 
. If each 
 lies to the left of 
 in π for , then 
 lies in the block. This is be possible only if 
 is the smallest number 
 in the block by Lemma 3. Then by the SequenceLength algorithm, 
 is a visited symbol in π, a contradiction. So, there is at least one 
 such that 
 lies to the right of 
. Hence, by Lemma 2, 
 is an upper bound. □

Lemma 5

Let π be a permutation with n symbols and C be a block in π with 
 symbols, where 
. If 
 belongs to the block C, a visited symbol succeeds C in π and there is at least one interval in π after C that contains a skipped symbol, then an upper bound for sorting the permutation with prefix transpositions is 
.

Proof

Let 
 be a block with 
 being the last visited symbol in C. Then 
. By definition, a block has at least 2 elements. Thus, if  then π has a skipped symbol in the second interval. So, by Lemma 1, 
 is an upper bound. We assume that .

If 
, then we consider the new block including 
 and restart the proof again if the element after the new block is visited. Note that this can happen only up to eight times, otherwise 
 is present. If the element after the new block is a skipped symbol, then by Lemma 4, 
 is an upper bound.

Suppose 
, then 
, for some . Further, the symbols 
 and 
 are not in C and hence they lie to the right of 
. Let β be the symbol next to 
 in π. Clearly 
 because this would form an adjacency in π, which is not possible as the permutation we consider is reduced. Hence 
.

Case 5.1: If β is a visited symbol (
), then the move
⁎
 moves at least  symbols of which (j) are skipped. This produces an upper bound of 
 
 which maximises the base of the logarithm to 
 
 since .

Case 5.2: If β is a skipped symbol (say 
), then the permutation is given by 
 where 
 are skipped symbols in the 
 interval. If 
 lies to the right of 
 for at least one , then by Lemma 2, 
 is an upper bound.

Suppose that 
 lies to the left of 
 for all . By SequenceLength algorithm, every skipped symbol in the 
 interval is greater than 
. Let 
. Then 
 is an element in C and by Lemma 3, 
. Further, for all the other skipped symbols 
, except for , 
 lies in the 
 interval by Lemma 3. Hence all the skipped symbols are necessarily consecutive symbols from 
 to 
.

Statement 1: 
, where 
 are consecutive symbols from 
 to 
. Note that 
 is a visited symbol and 
 for  as they are skipped elements. So 
 which gives us . Here we shall consider two cases: (1)  and (2) 

Case 5.2.1: Suppose that , then 
 and 
 lies to the right of 
. Note that 
 if . Here 
, where the symbols 
 are a rearrangement of 
. Further by Observation 1, we need to only consider the case when the number of skipped symbols in the 
 interval is at most j, hence .

(i) Let . Consider the following sequence of alternate moves. The first move moves at least  symbols of which (j) are skipped.
⁎
 Next, we make the following move repeatedly until 
 becomes the first symbol of π. Note that this is possible by Statement 1 in  moves.
⁎
 The last move in the sequence is
⁎
 Here at least  symbols are moved in at most  moves of which j are skipped. This produces an upper bound of 
 
 by (1).

(ii) Let . By Observation 2, the 
 interval has at most one skipped symbol (say c). Then 
. If 
 lies to the right of 
, then in the following two moves we move  symbols of which  are skipped. So, by (1), an upper bound is given by 
 
 
 which is less than 
 since .
⁎
⁎

If 
 lies to the left of 
, then 
. Here the permutation becomes 
. Consider the position of 
 in π. In π, note that as shown in the beginning of this case 
 should lie to the right of 
.

If 
, 
. In the following three moves we move  symbols of which  are skipped. So, by (1), an upper bound is given by 
 
 
 which is less than 
 since . Note that if the skipped symbol c does not exist then we will execute the first two alternate moves mentioned above and we would have moved  elements in two moves, giving us a bound of 
 
 
 which is less than 
 since .
⁎
⁎
⁎

If 
 and , then 
 lies to the right of 
 and 
. We shall consider the following sequence of alternate moves. The first move
⁎
 moves at least  symbols of which (j) are skipped. Next we make the following move
⁎
 repeatedly until 
 becomes the first symbol in π, note that this is possible due to Statement 1. This can be attained in  moves. The last move in the sequence is
⁎
 Here at least  symbols are moved in at most  moves of which  are skipped. This produces an upper bound of 
 
 
 by (1).

If 
 and , then 
 and 
. Further all the symbols before 
 in π form a block with least element 
, here we use Statement 1. We will call this block 
. Here we shall consider two cases:

Case (a): If the initial block 
 contains skipped symbols, then C has at least  symbols. Here we shall execute the sequence of moves as in the previous case where 
 and , until 
 becomes the first symbol in π. The next couple of moves are
⁎
⁎
 Here at least  symbols are moved in at most  moves of which  are skipped. This produces an upper bound of 
 
 by (1).

Case (b): Suppose that there are no skipped symbols in block C. Then we shall consider the block 
, instead of block C, mentioned above, note that the block 
 has skipped symbols 
. Further the visited symbol 
 follows 
 and hence either of the Cases 5.1 or 5.2.1 - (except case (b)) or 5.2.2- (except case(b)) applies giving us the required upper bound. We will prove Case 5.2.2 below.

Case 5.2.2: Suppose . Then 
, where 
 is a skipped symbol in the 
 interval due to Statement 1. Also by Lemma 3 and Statement 1, all the symbols to the left of 
 form a block with least symbol 
.

If , consider the following sequence of alternate moves. The first move
⁎
 moves at least  symbols of which j are skipped. Next we make the following move
⁎
 repeatedly until 
 becomes the first symbol in π, note that these moves are possible by Statement 1. This can be attained in  moves as 
 would not be the first symbol in any of these moves. The next two moves in the sequence are
⁎
⁎
 Here at least  symbols are moved in at most  moves of which j are skipped. This produces an upper bound of 
 
 by (1). Note that the same moves work even if 
.

If , then there are j skipped symbols in the 
 interval. Hence by Observation 2, the 
 interval has at most one skipped symbol (say c). Then 
.

If 
 lies to the right of 
, then in the following two moves
⁎
⁎
 we move  symbols of which  are skipped. So, by (1), an upper bound is given by 
 
 
 which is less than 
 since . Note that if c does not exist, then the first alternate move mentioned above should suffice giving us a bound of 
 
 
 which is less than 
 since .

If 
 lies to the left of 
, then 
 and hence 
 is a block, by Statement 1 using the fact that . We will call this block 
. Here we shall consider two cases:

Case (a): If the initial block 
 contains skipped symbols, then C has at least  symbols. Here, we consider the following sequence of alternate moves where the first move
⁎
 moves at least  symbols of which  are skipped. Next we make the following move
⁎
 repeatedly until 
 becomes the first symbol in π, note that these moves are possible by Statement 1. This can be attained in at most  moves as 
 would not be the first symbol in any of these moves. The next two moves in the sequence are
⁎
⁎
 Here at least  symbols are moved in at most  moves of which  are skipped. This produces an upper bound of 
 
 by (1).

Case (b): Suppose that there are no skipped symbols in block C. Then we shall consider the block 
, instead of block C, mentioned above, note that the block 
 has skipped symbols 
. If a skipped element follows 
 in π then we get 
 bound by Lemma 4. If a visited element follows 
 then either of the Cases 5.1 or 5.2.1 (except case (b)) or 5.2.2 (except case (b)) applies giving us the required upper bound. □

Lemma 6

Let π be a permutation with n symbols, in which 
 is not a block and the only block containing the first symbol is whole of π. Then the upper bound for sorting π using prefix transpositions is 
.

Proof

Suppose that π is a permutation in which 
 is not contained in a block with less than n symbols. Then 
. If the second symbol in π is a skipped symbol, then by Lemma 1, 
 is an upper bound. Hence we assume that 
 where . Here we shall consider the third symbol α in π.

If α is a visited symbol (
) then 
 being a skipped symbol lies to the right of 
. Here 
 and in one move
⁎
 two symbols are moved and one skipped. Hence the upper bound for sorting π is 
.

If α is a skipped symbol (
), then by Observation 1, it is the only skipped symbol in the third interval. By the SequenceLength algorithm, 
 for some . If 
 lies to the right of 
, then by Lemma 2, the upper bound is less than 
. Hence we shall only consider the case when 
, where . Let β be the symbol that follows 
 in π.

Case 6.1: When β is a visited symbol (
, then 
 lies to the right of 
. In the following two alternate moves
⁎
⁎
 four symbols are moved of which two are skipped. Hence the upper bound in this case is 
.

Case 6.2: When β is a skipped symbol then, by Observation 2, 
 is the only skipped symbol in the fourth interval. Then permutation 
. If 
 lies to the right of 
, by Lemma 2, the upper bound is less than 
.

If 
 lies to the right of 
, then the following two moves
⁎
⁎
 will move five symbols of which three are skipped. Hence the upper bound in this case is 
 
.

Now we shall consider the case when 
 and 
 lies to the left of 
. This is possible only when 
 and 
 in π. Then 
. Here we repeat Cases 6.1 and 6.2 in the lemma by assuming β to be the symbol that follows 
 in π. Using similar alternate moves we shall obtain an upper bound of 
 for all cases except when 
. Repeating the same argument l times for increasing values of i, the subscript of 
, we get the following.

Statement 2 If π be a permutation in which 
 is not a block, then we obtain an upper bound of 
 unless
 Note that the elements from 
 upto 
 form a block, say 
, in the first case, with 
 the smallest element and 
 the largest element. In the second case, elements from 
 upto 
 form a block, say 
, with 
 the smallest element and 
 the largest element. Since the smallest block containing 
 is the entire permutation π, we get 
 or 
. We shall consider these two cases below:

Case (i): If 
. Then π contains  symbols. We relabel the symbols in odd positions as visited and the symbols in even position as skipped. Then we do the regular greedy moves of the SequenceLength algorithm until 
 becomes the first symbol. This would be accomplished in  moves since every alternate symbol starting from first symbol 
 is in consecutive decreasing order and we skip exactly one symbol in each move. The first two moves are given below
⁎
⁎
 When 
 becomes the first symbol in π, we execute the move
⁎
 which is a double. In the following sequence of moves we create l adjacencies in  moves and skip l symbols. Hence, an upper bound in this case is less than 
.

Case (ii): If 
, we proceed as in Case (i) until 
 becomes the first symbol in π, the next move is given by
⁎
 which is a double as it creates an adjacency and places 
, the largest element in π in the last position (creating another adjacency). So, the sequence of moves shown above forms l adjacencies in  moves and skips l symbols yielding an upper bound of less than 
. □

Theorem 1

An upper bound for sorting permutations with n symbols using prefix transposition is 
.

Proof

Let 
 be a permutation with n symbols. If 
 forms a block in π, then by Lemma 4, Lemma 5, an upper bound of 
 holds. Consider the case when 
 is not a block, then by Statement 2, we get an upper bound of 
 unless 
 or 
. We know that 
 is a block in the first case and 
 is a block in the second case. Let C be 
 or 
 depending on whether π is of the first or the second case. If there is at least one interval in π after C, that contains a skipped symbol, then by Lemma 4, Lemma 5, 
 is an upper bound to sort π using prefix transpositions. Now we shall consider the remaining case where there is no interval after C that contains a skipped symbol. This case can be partitioned into two sub-cases.

Sub-case 1: If π forms a single block, that is π is either 
 or 
 then Lemma 6 establishes the upper bound.

Sub-case 2: Either 
 or 
. That is, 
 or 
. C denotes either 
 or 
 depending on the context. Here all the symbols between C and y are visited symbols, with no skipped symbols in between them. Thus, the elements between C and y will be decreasing elements of the form . Let C contain 
 symbols and let 
, then 
, where 
 is the reverse permutation with 
 elements. C is a permutation, a sub-permutation of π with 
 symbols which satisfies the conditions in Lemma 6 and hence can be sorted in at most 
 moves. After sorting C, π reduces to 
. This resultant permutation can be sorted with Dias and Meidanis sequence [14] in at most 
 
 moves. Thus, an upper bound to sort π is 
 
 
 
. Thus, the theorem follows. □

3. Conclusion
The existing upper bound of 
 [23] to sort any 
 with prefix transpositions has been improved to 
. The best theoretical upper bound that can be achieved using the SequenceLength algorithm [19] and the alternate moves would be 
, where ϵ is a small positive real number.