Abstract
The structure of nondeterministic computations is extremely complicated. C-graphs are abstract representations of the branching structure of nondeterministic computations. The paper investigates the structure of finite state nondeterministic computations by showing that the complexity of the structure increases non-elementarily while the number of computation steps increases. This is achieved by establishing a recursive equation relating the number of C-graphs of a certain height to the number of C-graphs of smaller height.

Keywords
Branching bisimulation
Nondeterminism
Divergence

1. Introduction
Computations can be studied in many different models. In computation theory a computation model, say the Turing machine model [27], the λ-calculus model [2], the recursive function model [12], defines a closed system in which programs, machine configurations, closed λ-terms, recursive functions, do not interact. Input and output actions stay at meta level. The equality relation for computation in all these models is the extensional equality = defined as follows:  if and only if for every x, either  whenever one side is defined, or both  and  are undefined. If one program delivers a result upon an input and another program never stops computing on the input, the two programs are deemed unequal. Evidently divergence plays a central role in the computation theory. It should also play a central role in concurrency theory, which is meant to be an interactive extension of the computation theory [18].

As the foundation of the computation theory Church-Turing Thesis [16] is valid at the operational level [4]. There must be a translation 
 from the computational objects of the form M to closed λ-terms. The map 
 essentially defines a binary relation  that satisfies the following property whenever , where M is a machine configuration and L is a closed λ-term: (i) If 
 then 
⁎
 such that 
; and (ii) if 
 then 
⁎
 such that 
. This is actually the idea of bisimulation [18], [23], or more precisely that of barbed bisimulation [20]. The relation  satisfies an additional property. If 
 and there is an infinite computation sequence 
, then there is an infinite computation sequence from 
. It is impossible that 
 for some 
 such that 
 cannot do any computation because a terminating computation is never equal to a divergent computation according to the definition of extensional equality. In other words  must be divergence sensitive.

The classic Turing machines have been extended to nondeterministic Turing machines for various purposes. The best framework to study nondeterministic computations is offered by concurrency theory. In this theory a model defines the operational semantics of processes whose primary task is to interact with each other [15], [18]. Computation is seen as a cooperation between two interacting processes. When interactions are explicit, the idea of observations as tests for equality becomes natural. Bisimulation then comes out as the finest characterization of the branching structure of nondeterminism caused by interaction, extending the input-output criterion of the extensional equality. It turns out that a minimal formulation of bisimulation gives rise to an equality, the barbed equality, which applies to all concurrent models. Such a model independent theory was initiated by Milner and Sangiorgi [20] and followed by the work carried out in [22], [13], [8]. A systematic study of the model independent theory of interaction is carried out in [6], [7]. With this theory it can be argued that there is a unique equality for both computation and interaction.

There have been many studies on the qualitative aspect of processes [15], [14], [18], [19], [25], [21]. Algebraic theory of observation forms a considerable portion of process theory. There has been however little research on the quantitative aspect of processes. Given for example an n-state CCS process that may interact at three channels , how many unequal processes are there? Questions of this kind are interesting because they help to see the complexity of nondeterminism. In this paper we carry out a quantitative study of nondeterministic computational objects. By computational objects we mean processes that cannot interact with any other processes. We may think of them as processes that pick up some input at the beginning of computation and output a particular value by the end of the computation. The reason that we focus on these objects is twofold. Firstly the simplification allows us to study the branching structure caused solely by the internal actions of processes. External actions would complicate the investigation. Quantitative theory of general processes should begin with a study of the nondeterministic computational objects. Secondly as is pointed out in [5] these objects already demonstrate nice and rich structures that we understood very little before. Methodologies for the study of the nondeterministic computational objects could hopefully be applied to the quantitative investigations of interactive processes.

We consider the finite state computational objects defined by a variant 
 of CCS that admits only τ actions. Like in [5] we will focus on an abstract representation of the computational objects called C-graphs. In this paper we classify computational objects by the worst case branching time complexity; equivalently we classify C-graphs according to graph height. The main contributions of the paper are as follows:

•
A recursive equality for the number 
 of C-graphs of height n is derived. Additionally it is shown that the growth rate of 
 is non-elementary. These are reported in Section 3.

•
Similar results are derived for k-regular C-graphs. This is done in Section 4.

•
The relationship between the number of C-graphs counted by graph height and the number of C-graphs counted by graph size is characterized by a set of inequalities, giving both upper and lower bounds for one in terms of the other. This is described in Section 5.

A few comments are made in the final section.
2. C-graph
Nondeterminism is an intrinsic phenomenon of concurrency. Nondeterministic computation is best demonstrated in a process model. Consider 
 defined in the syntax of process model CCS, where 
. In a process model a computation step is formalized by a τ transition. Observe that 
, meaning that A may terminate after one step computation. Also 
 and 
 are one step computations. The process  is not equivalent to A since in the former the ability to synchronize in channel a is persistent, which is not the case for A. The process 
 is not equivalent to A either because 
 can synchronize at channel a again and again, whereas A may preempt any synchronization at a from happening. Moreover  and 
 are not equivalent due to the preemptive power of A. Let's slightly modify this example. Define 
, where 
. The only action this process can do is computation. After one computation step it either evolves to the null process 0, or to the divergent process 
, or to itself. One may argue that these three processes are not equivalent to each other from the point of view of resource consuming. The null process 0 does not consume any energy. The divergent process 
 always consumes more and more energy. The process 
 may terminate after consuming some energy. The equality to be introduced in a moment is consistent with this resource consuming viewpoint.

We shall introduce two formalisms for nondeterministic computational objects. Firstly we introduce these objects using the familiar process notation [5]. Consider a variant 
 of CCS that admits only τ actions. The finite state terms are generated from the following BNF: In the above X is a term variable, S is a nondeterministic term, and  is a recursive term in which X is bound. The term  either behaves as T or evolves to itself. A finite state computational object is a term that does not contain any free term variables. We write  for finite state computational objects. The operational semantics of 
 is defined by the following rules. The transition 
 is called a self-loop. The simplest terminating computational object is 0, and the simplest divergent computational object is . In the rest of the paper we write 
 (⟹) for the (reflexive and) transitive closure of 
.

We now motivate the equality of the paper. From the point of computation a terminating computation is never equal to a divergent one. An equality on nondeterministic computation objects has to be divergence respectful. There are a number of ways to define divergence respectful relations [28], [1], [17], [11], [8], [6], [10]. We formulate the dichotomy between termination and divergence using an idea of Priese [24]. In what follows we write 
 for the reverse relation of .

Definition 1

A binary relation  is codivergent if the following statements are valid:

•
If 
, then 
 for some 
 and some .

•
If 
, then 
 for some 
 and some .

The codivergence property has been used to define process equality, see for example [6], [10]. The two processes  for example are weakly bisimilar. They are not however related by any codivergent relation. The reason that Definition 1 is the right formulation in our case is that it goes with the notion of bisimulation hand in hand. Bisimulation equality [18], [23] is the standard equality for nondeterministic processes that takes into account of the branching structure. We shall use a refinement of the weak bisimulation introduced by van Glabbeek and Weijland [9].
Definition 2

A binary relation  is a bisimulation if the following statements are valid:

•
If 
 then one of the following statements is valid:

–
 for some 
 such that 
 and 
.

–
 for some 
 such that 
 for some 
.

•
If 
 then one of the following statements is valid:

–
 for some 
 such that 
 and 
.

–
 for some 
 such that 
 for some 
.

By the standard approach in concurrency theory we can define the equality between the nondeterministic computational objects as follows: P and Q are equal, notation , if  is in a codivergent bisimulation.
There are infinitely many finite state computational objects. In [5] the author defined ϒ
, ϒ
, ϒ
, and introduced the inductive definitionϒ
ϒ
ϒ
ϒ
 It is clear that ϒ
 diverges whereas ϒ
 does not, and ϒ
 may terminate but ϒ
 cannot. To help the reader get a glimpse of the complexity of C-graphs we repeat the argument that the infinite sequence ϒ
ϒ
ϒ
 are pairwise unequal. Suppose ϒ
ϒ
 and ϒ
ϒ
. For any even number k smaller than , ϒ
ϒ
 because ϒ
 loops while ϒ
 does not, and ϒ
ϒ
 by induction. If k is an odd number smaller than , then ϒ
ϒ
 by induction, and ϒ
ϒ
 because ϒ
 cannot be matched by any computation sequence from ϒ
. For more examples of computational objects consult [5].

It is worth remarking that the so-called weak bisimilarity [18] cannot be used to study the branching structure of computational objects. It would identify all the finite state computational objects definable in 
.

A one step computation 
 can be depicted as a directed edge with the two nodes labeled by P and 
 respectively. A one step computation 
 is then a self-loop with the node labeled by P. The set of all computation paths from P form a rooted graph. If we remove the labels from the nodes of the graph, we get a graph that is an abstract representation of a nondeterministic computation structure. It is called a D-graph in [5].

Definition 3

A directed graph  is a D-graph if the following hold:

•
There is precisely one node, the root, that does not have any incoming edge.

•
There is at most one edge from a node to another. There is at most one edge from a node to itself.

•
Every node is reachable from the root.

A self-loop is an edge from a node to itself. The out-degree of a node is the number of out-going edges of the node, including the self-loop. If there is an edge from a node to a different node, the latter is a child of the former. If there is a path from a node to a different node, the latter is a descendant of the former. For ease of reference we shall often label a node of a D-graph by a small case letter. We label the trivial single node D-graph by 
 and the trivial single self-loop node by 
. Evidently every D-graph contains at least one of the two trivial D-graphs as subgraph. By D being an (induced) subgraph of 
 we mean that whenever the two nodes of an edge of 
 are in D then the edge is in D. An internal node has at least one out-going edge to a different node.
We denote a D-graph by , where G is a directed graph and c is the root. A D-graph is a syntax free representation of a finite state computational object. Consider the two D-graphs presented in Fig. 1, in which the bullets are the roots. The left is an abstract representation of the operational behavior of  and the right an abstract representation of . For ease of reference the nodes of the left are labeled. Every node in the D-graph represents a computational object. The computational object  is represented by the root labeled a. The object  is represented by b. The one step computation 
 is represented by the edge from a to b. It is clear that the equality ≃ can be applied to the nodes of D-graphs. It equates the nodes labeled 
 and c because the relation 
 is a codivergent bisimulation. In an abstract representation of computational object there is no point in introducing equal nodes. Hence the following.

Fig. 1
Download : Download high-res image (21KB)
Download : Download full-size image
Fig. 1. The left is a D-Graph but not a C-graph. The right is a C-graph.

Definition 4

A C-graph  is a D-graph in which no two nodes are equal.

The right D-graph in Fig. 1 is a C-graph. When no confusion may arise a C-graph will be referred to by the label of its root.
Consider another example. Two C-graphs are defined in Fig. 2. In the left one the root is not equal to the node above the root. This is because the former can reach 
 whereas the latter cannot reach 
 without passing an unequal node. In the right diagram the root is not equal to the node above it either because the former can loop while the latter cannot. It is easy to see from this example how to construct a C-graph of n nodes whose height is . The notion of C-graph height will be formalized in the next section.

Fig. 2
Download : Download high-res image (16KB)
Download : Download full-size image
Fig. 2. Height Versus Size of a C-Graph.

We will call the single node C-graphs 
 and 
 the trivial C-graphs. Almost all C-graphs contain both 
 and 
 as leaves. It is easy to verify that if a C-graph does not contain 
, it is nothing but 
. If a C-graph does not contain 
, it is either 
 or the two node C-graph whose root can loop.

3. Counting C-graphs
From the complexity theoretical viewpoint we are mostly interested in the maximal number of steps a computational object may engage. C-graphs are computational objects. It is therefore natural to classify them by the length of the longest admitted paths. Here self-loops are ignored when counting the length of a path. So we are counting the number of computational steps that change states. In other words C-graphs are classified by the worst case branching time complexity. Suppose  are distinct nodes in a C-graph . The distance  is the length of the longest path from u to v that contains no self-loops. If there is no path from u to v, let  be for instance −1. We define the height  of u as follows:
 We define the height  of the C-graph  by the height of the root. The height of 
 and 
 is 0. Here the subscript 0 indicates the height, and the superscripts  are used to differentiate the two nodes. There are three C-graphs of height 1, whose roots are denoted respectively by 
, 
 and 
, see Fig. 3, where three C-graphs of height 2, rooted respectively at 
, 
, 
, are also given.

Fig. 3
Download : Download high-res image (53KB)
Download : Download full-size image
Fig. 3. Examples of C-graph Classified by Height.

A C-graph is of height  because the children of its root are of height no more than i and at least one child is of height i. This observation allows us to visualize the class of the finite C-graphs as forming a connected infinite directed graph without any root. The layout of the infinite graph is such that the root of a graph of height i stays at the i-th level. The picture is given in Fig. 4. The nodes 
, 
 of Fig. 3 are at the 0-th level in the infinite C-graph of Fig. 4. The roots 
, 
 and 
 are at the first level, and the roots 
, 
, 
 are at the second level. Inductively a node, say 
, at the n-th level of the infinite graph is the root of a finite C-graph of height n. This finite C-graph consists of all the nodes reachable from 
. In this way we can talk about the number of the finite C-graphs at the n-th level. We further clarify the picture in Fig. 4 by the following observations.

•
Nodes at the same level are disconnected. If a and b are distinct nodes at the n-th level and there is an edge from a to b, then either one of the nodes is in the wrong level or the graph rooted at a is not a C-graph because .

•
Apart from self-loops, all out-going edges of a node a at the n-th level point to nodes at lower levels. There is at least one out-going edge that points to a node at the -th level, otherwise a would not be in the n-th level.

•
Let  be the set of the children of a node a at the n-th level. Let  be 1 if a has a self-loop and be 0 otherwise. Suppose that b is a node at the n-th level that is distinct from a. Then either  or . This is because if  and , then  is a codivergent bisimulation, and consequently , contradicting to the assumption.

•
Suppose a is a node at the n-th level and 
 is a node at the -th level. Then either 
 or  and 
. Otherwise 
 would be a codivergent bisimulation.

In the n-th level the nodes without self-loops can be classified into two groups. The node 
 in Fig. 4 is connected to exactly one node, say 
, in the -th level. In this case 
 must connect to at least one node below the -th level that is not a child of 
. The node 
 in Fig. 4 is connected to at least two nodes in the -th level. It may or may not connect to any node in lower levels.
Fig. 4
Download : Download high-res image (167KB)
Download : Download full-size image
Fig. 4. Finite C-Graphs Arranged in Levels.

Before counting the number of C-graphs classified by levels, let's introduce some notations. We write 
 for the set of all C-graphs in the n-th level, and 
 for the size of 
. To find out the relationship between 
 and 
 we need to look at subclasses of 
 induced by the degree of roots. The notation 
⥀
 stands for the subset of 
 containing those C-graphs whose roots have self-loop and have out-degree j. Similarly 
 denotes the subset of 
 containing root without self-loop and with out-degree j. Let 
⥀
⥀
 and 
. The set of all the C-graphs that stay at or below the n-th level is 
. Let 
. The following equalities hold by definition.(1)
⥀
 
 In (1) we have taken into account the self loop of the root. Notice that 
⥀
. We will derive an equality for 
 that guarantees 
 and 
.

The main result of this section is stated next.

Theorem 3.1

The following recursive equality holds for .
 
 

The theorem enables one to calculate 
 in an inductive manner and to compute 
 by the equality 
. We will prove Theorem 3.1 in Section 3.1 through Section 3.4.
3.1. Node with a single next level child
The standard notation for the number of combinations of choosing k items from a total of n items is  
 . We shall allow n to be smaller than k. Thus 
  
 
  Recall that . To simplify the combinatorial argument, we even allow n to take the negative value −1. The following combinatorial equations will be useful in present paper.(2) 
  
  
 (3)
 
  
  
 (4)
 
 

Given a C-graph 
 in the -th level, we construct a C-graph at the n-th level by introducing a new root 
, divergent or not, and connecting it to 
. We assume that the new node does not connect to any other node in the -th level. Unless 
 is divergent and 
 is not divergent, the new root must connect to at least one node in 
 for otherwise the new root 
 would be equal to the old root 
. Let 
⥀
 be the subset of 
⥀
 containing all the C-graphs with precisely one child in the -th level, and let 
⥀
⥀
. Similarly we define 
 and 
. The next lemma explains how to calculate 
⥀
 and 
.

Lemma 3.2

The following equalities are valid.

1.
⥀
 
⥀
  
 .

2.
  
 
⥀
  
 .

Proof

We prove the first equality. The proof for the second one is similar. Fix . There are two cases.

•
The root 
 of a C-graph in 
⥀
 connects to a root 
 in 
. Since 
 has a self-loop and 
 does not, 
 is already not equal to 
. This means that we can choose the rest of the  nodes from 
 in any way we want. This explains the summand 
 .

•
The root 
 of a C-graph in 
⥀
 connects to a root 
 in 
⥀
. The root 
 should connect to at least one root in 
; otherwise 
 would be equal to 
. For  the root 
 may connect to any  nodes among the  children of 
, disregarding the self-loop, and to any t nodes among the other 
 nodes in 
. This explains the summand 
⥀
  
 .

We remark that  
  for example is equal to 0 when 
. □
3.2. Node with more than one next level child
Next we consider the situation in which the root 
 of a C-graph at the n-th level is connected to more than one node in the -th level. The notations 
⥀
, 
, 
⥀
 and 
 are defined in similar fashion. A node that connects to two distinct nodes in 
 must stay at the n-th level. If 
 connects to t nodes in the -th level, it may connect to any  or  nodes in 
, depending on if 
 has a self-loop. Hence the following.(5)
⥀
 
  
 
 
  
 

3.3. The proof of Theorem 3.1
We now calculate 
 using Lemma 3.2 and the equalities in (5).
⥀
 
 
 
⥀
  
 
 
 
  
 
⥀
  
  Fix i. In the above expression the coefficient of 
 is 
 
 
  
 
  
  
 
  
  and the coefficient of 
⥀
 is
 
  
 
 
  
 
  
  
  
 
  
  The two coefficients are the same. Thus
⥀
 
  
 
 
 
  The above equality can be justified by a combinatorial argument. The number 
⥀
 can be calculated in the following manner: Fix a new root with i children. For each -th level child, there are  
  
  
  different D-graphs. Thus there are 
  D-graphs altogether. Let's calculate the number of those D-graphs that are not C-graphs. For that purpose we only have to look at the situations where the root is actually equal to the -th level node. There are two cases.

•
Suppose the -th level node does not have a self-loop and its out degree is i. The new root is equal to the -th level node if and only if the other  children of the new root are also the children of the -th level node. There are 
  such D-graphs.

•
Suppose the -th level node has a self-loop and its out degree is i. The new root is equal to the -th level node if and only if either of the following happens: (i) The new root has a self-loop and the  children are also the children of the -th level node. There are 
⥀
  such D-graphs. (ii) The new root does not have a self-loop and the  children of the new root are also the children of the -th level node. There are 
⥀
  such D-graphs. Altogether there are 
⥀
  such D-graphs.

By summing up the above two expressions one gets 
 . We have effectively given two proofs for the equality 
⥀
 
 .
Next we count the number of the C-graphs of height n with more than two -th level nodes. It follows from (5) and the equality 
 that(6)
⥀
 
  
 
 
  
 
 
  
  
 
  
 
  
 
  The expression in (6) can also be argued in a combinatorial fashion. To construct a C-graph of height n in 
, we let the n-th level root connect to any j nodes in lower levels or add a self-loop and connect to any  nodes in lower levels. There are  
  
  
  different constructions. These constructions do not necessarily produce C-graphs in 
. We must remove those that are not in 
. There are two bad cases.

•
If the j neighbors of the root are either in 
 or is the root itself, the graph is not in 
. There are  
  such C-graphs.

•
The graph that connects to only one next level child is not in 
. There are 
  such C-graphs.

This completes the combinatorial argument. We can now calculate 
.(7)
⥀
⥀
⥀
  
 
 
  We calculate 
 by summing up over j and simplify the expression by making use of (4).(8)
 
 
  
 
 
 
 
 
 
 
 
 
 (9)
 
 
 
 
 The right hand side of (8), which is equal to 
, is unfolded to the expression 
 in (9). The alert reader might wonder if the unfolding can be done inductively. This is indeed the case.
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 The equality can be manipulated into the following form:(10)
 
 
 
 It is clear from Fig. 3 that 
, 
, 
, 
 and 
. By repeatedly applying (10) we get the following sequence of equality.(11)
 
 
 
 
 
 
 
 
 
 
 We are now in a position to calculate 
.
 
 
 
 
 
 Notice that
 
 
 
 
 
 
 
 
 Therefore(12)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 We still need to remove the second summation operator in (12).
3.4. Closed formula for 
Let the alternating factorial function  be defined by
 
 There is a closed formula for . It turns out however that we only need the following recursive equality.(13) Let A stand for the summation 
. We can rewrite A with the help of the alternating factorial function.
 
 
 
 
 
 
 
 
 
 
 The proof of Theorem 3.1 is completed.

3.5. Growth rate of 
It should now become clear that 
 is bounded by the number of subsets of 
 of size at least 2. In other words 
. The inequality immediately implies that the growth rate of 
 is not elementary [3], meaning that 
 cannot be bounded by any function of the form 
. In this subsection we show that 
 can be approximated by 
, that is 
.

Corollary 3.3

 and 
 satisfy the following inequalities for all .

Proof

It is easily checked that the inequalities hold for . Suppose . By using the inequality 
, which follows from (11), and the equality 
 we derive the following.
 
 To establish the other inequality consider the quotient of 
 over 
.
 
 
 
 
 
 Now 
 follows from 
. Thus
 
 
 
 
 
 using the inequalities 
. □

4. Regular C-graph
From the viewpoint of implementation, fixed-degree branching computational objects are much more manageable than the finite branching computational objects. We consider a subclass of C-graphs where the out-degrees of nodes are bounded by a constant. Recall that an internal node is a node that has at least one out-going edge to another node.

Definition 5

A C-graph is k-regular if the out-degree of every internal node is at most k.

The simplest regular C-graphs are 2-regular. Let 
 be the set of all 2-regular C-graphs in the n-th level and set 
. The set of all the 2-regular C-graphs that stay at or below the n-th level is 
. Let 
. It is not difficult to convince oneself that the derivation for (7) can be modified to establish the following equality that is valid for .
  
 
 The right hand side of the equality can be rewritten as follows: 
  
 
 
 
 
 
 It is now clear that 
 
 and also 
 
. So 
 
 
. Hence
Corollary 4.1

The following recursive equality holds for .
 
 
 

Notice that 
, 
 and 
. Thus 
 
 
 for . Also notice that 
 and 
 
 
 for . Therefore 
 for all . It follows that 
 
 
 
 for all . Hence the following.
Corollary 4.2

 
 for all .

We conclude that 
 is bounded by a double exponential function of n.
Now consider the general k-regular C-graphs. Let 
 be the set of all k-regular C-graphs in the n-th level and set 
. Let 
 be the set of all k-regular C-graphs with the out-degree of the root being i and set 
. Let 
 and 
. Similar to the 2-regular case, the derivation of (7) can be repeated to show that(14)
 
 
 
 
 
 for all . Notice that(15)
 
 
 Using (14) and (15) we have(16)
 
 
 
 
 The following inequality follows immediately from (14) and (16).(17)
 
 
 
 
 
 
 
  By summing up the inequalities in (17) and bearing in mind that 
, one obtains(18)
 
 
 
  It follows from (18) and the following well-known bound
 
 
 
 that(19)
 
 
 
 
 
 
 The next theorem is an immediate consequence of (19).

Theorem 4.3

For k-regular C-graphs and all , 
 for some positive constants 
 that depend on k.

For fixed k the function 
, and 
 as well is bounded by a double exponential function of n.
5. Remark on counting by graph size
Theorem 3.1 provides a nice and useful recursive equality for calculating the number of C-graphs counted level by level in terms of graph height. An obvious question is if there is a closed formula for 
 and 
 as well. Theory of enumerative combinatorics [26] might offer help in this regard. Since the focus of this paper is computational, we leave the issue for future investigation. In enumerative combinatorics, the usual approach is to count C-graphs according to the number of nodes. How many C-graphs of n nodes are there? The following theorem reveals the relationship between the height and the size of C-graph. Recall that 
⁎
 is the minimal k such that 
⋰
.

Theorem 5.1

The following statements are valid.

1.
For , the height 
 of an n-node C-graph 
 renders true the following.(20)
⁎

2.
The size 
 of a non-trivial C-graph 
 of height h renders true the following.(21)

Proof

It is not difficult to see that the C-graphs in Fig. 2 can be generalized to a C-graph of n nodes that is of height . So the upper bound of (20) and the lower bound of (21) are tight. For the other inequality in (21) observe that an h-height C-graph may have all the nodes in the 
-th level for 
. Thus 
. We now establish the lower bound in (20). It is easy to see that the inequality holds when , and the lower bound is tight. For , the height of an n-node C-graph is at least h if 
 since a C-graph of height  has at most 
 nodes. Next notice that we have the following bounds for 
.(22)
 The second inequality in (22) follows immediately from (11). For the first inequality, observe that
 
 
 Using (11) again we conclude that 
. It suffices to prove that 
 when 
⁎
. This is because 
 by (22), which implies 
. To establish the inequality 
, we prove that the following is valid for all .(23)
⋰
 
⋰
 The first inequality is due to Corollary 3.3. One has 
. We are done by natural induction, bearing in mind that 
. The second inequality is derived from Corollary 3.3 and induction:
 
⋰
 
⋰
 where the last step is correct because 
 
 
 for  and 
. The base of the induction is 
 
. It follows from (23) and definition that 
⋰
 with 
⁎
. We are done. □

Theorem 5.1 reveals that the difference between counting by size and counting by height is dramatic. Our initial investigation seems to suggest that the former is a lot trickier than the latter.

6. Comment
By casting computations in the framework of process theory, we are able to study the branching structure of nondeterministic computations in an abstract form. Our definition of the branching time complexity of a C-graph enables us to count the number of C-graphs. In a C-graph the root is the point an input is picked up, and the trivial node without loop is the point an output is released. In all other states the capability to engage in any interaction is absent at the point. This way of seeing the C-graphs helps explain the equality relation for them.