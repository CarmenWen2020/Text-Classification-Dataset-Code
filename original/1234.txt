Abstract
This paper is a ‚Äòspiritual child‚Äô of the 2005 lecture notes Kindergarten Quantum Mechanics Coecke (2005) [24], which showed how a simple, pictorial extension of Dirac notation allowed several quantum features to be easily expressed and derived, using language even a kindergartner can understand. Central to that approach was the use of pictures and pictorial transformation rules to understand and derive features of quantum theory and computation. However, this approach left many wondering ‚Äòwhere's the beef?‚Äô In other words, was this new approach capable of producing new results, or was it simply an aesthetically pleasing way to restate stuff we already know?

The aim of this sequel paper is to say ‚Äòhere's the beef!‚Äô, and highlight some of the major results of the approach advocated in Kindergarten Quantum Mechanics, and how they are being applied to tackle practical problems on real quantum computers. Toward that end, we will focus mainly on what has become the Swiss army knife of the pictorial formalism: the ZX-calculus, a graphical tool for representing and manipulating complex linear maps on 
 dimensional space. First we look at some of the ideas behind the ZX-calculus, comparing and contrasting it with the usual quantum circuit formalism. We then survey results from the past few years falling into three categories: (1) completeness of the rules of the ZX-calculus, (2) state-of-the-art quantum circuit optimisation results in commercial and open-source quantum compilers relying on ZX, and (3) the use of ZX in translating real-world stuff like natural language into quantum circuits that can be run on today's (very limited) quantum hardware.

We also take the title literally, and outline an ongoing experiment aiming to show that ZX-calculus enables children to do cutting-edge quantum computing stuff. If anything, this would truly confirm that ‚Äòkindergarten quantum mechanics‚Äô wasn't just a joke.

Previous
Next 
Keywords
Quantum computing

Quantum hardware (NISQ)

Quantum picturalism

Rewriting

Mathematics education

1. Introduction
A bit over 15 years ago, some people (including some of us) started using a nice trick. Take plain old Dirac ‚Äòbra-ket‚Äô notation, the typical go-to language for calculation in quantum computing, and write it in 2D, where matrix multiplication looks like ‚Äòplugging boxes together‚Äô and tensor product looks like ‚Äòputting boxes side by side‚Äô, for example: So far, things don't look so different from quantum circuits. However, if we write the maximally entangled state and its adjoint as bent pieces of wire:(1) then the following equation (which happens to be the main trick behind quantum teleportation):ùüôùüôùüô becomes something visually very intuitive: Hence, kindergarten quantum mechanics was born. Now, these sorts of tricks weren't entirely new: a certain Nobel Prize winner named Roger Penrose got so fed up in the 1970's with staring at indices in the tensor notation of relativity and invented exactly the same kinds of pictures. So we were in pretty good company.

This was a good start, but how much mileage can you get out of these sorts of tricks? Well, as it turns out, a lot: one can teach an entire quantum computing and quantum foundations course in these terms.1 How much is really new? That is, can drawing pictures of quantum processes allow us to do things we couldn't do before? Or is it just an art project?

This is where the ZX-calculus comes in. The ZX-calculus is a graphical language for expressing quantum computations, mainly over qubits. While it's been around since 2008, things have only really started booming around 2018, with the appearance of several major results:

(1)
The ZX-calculus has been ‚Äòcompleted‚Äô, which means all equations concerning quantum processes involving qubits that can be derived using linear algebra can also be obtained using a handful of graphical rules [73], [118]. This consolidates the promises made in the early days of kindergarten quantum mechanics, that graphical reasoning should not merely be seen as a helpful gadget, but as a genuine alternative to the Hilbert space formalism.

(2)
For certain quantum circuit optimisation problems, ZX-based methods now outperform the state of the art, e.g. [48] showed T-counts that were up to 50% better than known techniques at the time of publication. These simplifications are important for making the problems fit on existing quantum computers, and has played an important role in the design of commercial quantum compilers such as Cambridge Quantum Computing's  [112].

(3)
ZX-calculus recently enabled a team to convert grammar-aware natural language processing [45] into variational quantum circuits [29] suitable for running on existing, small-scale quantum hardware, resulting in the first implementation of quantum natural language processing on a quantum computer [94].

This paper is not intended to be a tutorial, but is an easy-going introduction and a survey of some recent successes. If you are in need of a more detailed manual on how to use ZX-calculus, several other resources are already available. For example, the book [41] gives an extensive introduction to the broad subject of pictorial quantum reasoning, leading up to a detailed presentation of ZX-calculus. While this is a pretty hefty tome (850 pages), it's full of pictures and has been taught multiple times (at Oxford, Nijmegen and Peking) in about 20 hours of lecture time. A much shorter introductory ZX-tutorial is [33], and an extensive, up-to-date introduction with many practical worked examples is [116]. There is moreover a forthcoming secondary school book [39] that we discuss in Section 8.

2. ZX: LEGO for quantum computing
We will introduce ZX-calculus by comparing it to standard quantum circuit language, and in particular, by explaining the manner in which ZX-calculus (quite literally) stretches beyond how we can manipulate and reason with quantum circuits.

ZX-language. Typical primitives of quantum circuit language include the CNOT gate and certain single qubit gates like Z-phase gates and the Hadamard gate. We denote these here as follows:(2) While Z-phase gates are typically taken to be diagonal in the standard (or ‚ÄòZ‚Äô) basis, we can conjugate by the Hadamard gate to get X-phase gates, which are diagonal in the Hadamard (or ‚ÄòX‚Äô) basis: These two kinds of phase gates can now be used to build other things, for example, the Hadamard gate itself now arises, up to a scalar factor (which we ignore), to its Euler decomposition in terms of phase gates:

Rather than just using the standard phase gates as building blocks for other gates, ZX-calculus uses generalisations thereof, allowing one to vary the number of incoming and outgoing wires of these phase gates. More specifically, we can generalise the phase gates to ‚Äòspiders‚Äô:(3) Without resorting to bra-ket notation, a Z-spider with m legs in and n legs out is a 
 matrix with exactly 2 non-zero elements: and an X-spider can be made from a Z-spider much like we did with phase gates:

Putting no Œ± means , e.g. It then follows that the cups and caps of (1), as well as many basic quantum states and effects, are special cases of spiders:


Download : Download high-res image (28KB)
Download : Download full-size image
where , , and we have ignored some normalisation factors.
Everything in the ZX-calculus arises and compositions of spiders. Much like with quantum circuits, we can compose these generators in sequence with matrix multiplication and in parallel with the tensor product of matrices. Interpreting ‚Äòblank‚Äô pieces of wire as identity matrices and crossing wires as SWAP gates: we get a recipe for computing the matrix associated with any picture in the ZX-calculus. For example, we can build the CNOT gate (up to a factor of 
 
) from spiders as follows:(4)

Note that, with the exception of certain tasks such as computing concrete probabilities, we can often ignore non-zero scalar factors on quantum states and maps (e.g. by renormalising later). Hence, this calculation above motivates the notation we introduced for CNOT gates at the beginning of this section:

In particular, the CNOT gate doesn't have to be treated as a primitive anymore, but breaks down in two smaller pieces. Once we have phase gates and the CNOT gate, we know that we can reproduce any quantum circuit made up of any gates. This implies that we can produce any unitary map on n qubits. In fact, once we can produce any unitary map, it is an easy exercise to show that adding a few more spiders can get us any (possibly non-unitary) linear map as well (see e.g. [116], section 3.7).

Why is this better than using standard circuits? The true power of ZX-calculus arises from the fact that these smaller pieces in (4) are very easy to work with, in the sense that the rules that govern them are easy to figure out, remember, and do calculations with. Also, there aren't many of them. In contrast, coming up with all the rules that govern fixed sets of quantum gates is really hard, and little is known beyond the case of limited gate sets [2] or small fixed numbers of qubits.

For example, it was shown in [109] that there does exist a set of quantum circuit equations rules that suffices to prove all true equations for 2-qubit circuits built from these gates: However, some of the rules are huge and difficult to work with. They can be found in their entirety in [46], but to give a feel for their scale, here is the lefthand side of one of the rules, which is too big to fit on the page:(5)

We expect this situation to become worse as we go to more qubits. For example, it is hard to imagine that a 3-qubit rule such as the following:(6) could ever be proven using just the 2-qubit rules from [46], [109], or any 2-qubit rules for that matter. Doing so seems to require decomposing at least one of the CNOT gates into single-qubit gates, which is impossible. Of course, the devil is in the details, so we'll leave the following as a conjecture for now:

Conjecture 2.1

No set of rules involving only two qubit circuits can be complete for circuits with more than 2 qubits.

Taking this farther, one can also imagine cooking up families n-qubit rules that are true because of some global property, but could not be proven using quantum gate rules only involving  qubits.2 If this works out, we could say something stronger about the limitations of ‚Äògate level‚Äô rules:

Conjecture 2.2

For the universal set of quantum gates (2), there exists no complete set of rules involving at most n qubits for any fixed n.

On the other hand, we'll see in the completeness section 4 that it is possible to fit on one side of A4 all the ZX-rules needed to prove all the equations that are true for all ZX-pictures, including circuits made from any gates with any number of qubits.

These much simpler ZX-rules reflect the fact that the ZX-language is in some way or another more fundamental than circuits.

Consider an analogy using LEGO. The basic LEGO brick has been designed for its versatility, but if you were crazy enough to glue all of your LEGO together into some fixed ‚Äòcomposite‚Äô blocks, that famous versatility goes away. Just for fun, let's take this a bit farther and suppose there were indeed LEGO analogues for ZX-pictures:


Download : Download high-res image (109KB)
Download : Download full-size image
Standard LEGO allows for a wealth of creations: while the composite block only allows for a restricted spectrum of ‚Äòart‚Äô: In particular, circuit gates have unitarity imposed upon them, while the ZX-components have been liberated from the unitary constraint.

If we want to actually run a computation on a quantum computer, it could be the case that we only really care about unitary quantum circuits in the end. In that case, it is natural to ask: is this extra freedom actually a good thing? We would contend that it is, and that we have a situation that is somewhat analogous to complex analysis. In the case of complex analysis, leaving real numbers behind (sometimes temporarily), gives us much more power and elegance, even when proving things about real numbers. We will see this same phenomenon happening for ZX-pictures in Section 5, where we discuss how to optimise quantum circuits by temporarily leaving the circuit world, then coming back.

It was explained in [113] that the algebraic structures underlying the ZX-calculus are not just normal LEGO, but ‚Äòmagic LEGO‚Äô, which are very bendy and enable all sorts of wild creations. This is thanks to the flexibility of the graphical language, which we'll discuss in the next section. By only considering ‚Äòglued-together‚Äô LEGO, i.e. quantum gates, we miss out on this whole story. So the moral is: Stop gluing your LEGO together!

3. Basic ZX-rules
Spider fusion rules. Concretely, there are three kinds of rules governing the ZX spiders (3). The first kind concerns how spiders of the same colour interact, and they are very simple: spiders of the same colour ‚Äòfuse‚Äô together and their phases add up:(7)

One way to think of spiders is as ‚Äòhyper-wires‚Äô, in that while ordinary wires have two ends, hyper-wires can have multiple ends. The following hyper-wires then happen to be ordinary wires: Now, what characterises a wire is that it connects its two ends, and if you connect two wires together you again get a (now longer) wire. The same is true for hyper-wires, and (7) just says that if you connect two hyper-wires, then you get another hyper-wire.

There also is no real difference between a spider-input-leg and a spider-output-leg, as spider-fusion allows these roles to be easily exchanged: More generally, this implies that in ZX-calculus: only connectivity matters and that we can think of ZX-pictures as graphs, that is, something that is specified by nodes and edges connecting these. The loose legs then make it an ‚Äòopen‚Äô graph [51]. This flexibility is something that makes no sense for ordinary circuits, where each gate must have well-defined inputs and outputs.

Strong complementarity rules. The second kind of rules concerns the interaction between spiders of different colours. They can either be stated as these two rules:(8) together with this third one:(9) or, as this single rule:(10) The rules (8) tell us that single leg spiders (a.k.a. states/effects), are copied by a spider of the opposite colour. The rule (9) is slightly harder to interpret, and let's not get started about (10). But they all follow a clear pattern, namely, the distinct colours can move through each other. Taking these rules, together with spider-fusion, one can derive this one [32]:(11) Let's stress again that it is essential to have spider-fusion to derive this rule. Without it (10) and (11) are independent. In fact, in mathematics, rule (10) defines a bialgebra, and having (11) makes it a Hopf algebra (with trivial antipode) [23]. We will say something more about the mathematical familiarity of these specific rules in Sec. 9.

Rule (11) has a very intuitive reading, namely, that two wires between spiders of opposite colour always vanish. In other words, a 2-cycle involving spiders of different colours always vanishes: We can also give such an interpretation to (9), namely, that we can also eliminate all alternating red and green 4-cycles:

Rule (11) also has a very clear conceptual interpretation, namely, complementarity, or in modern terminology, unbiasedness. One can show that spiders, when defined as linear maps that obey spider-fusion are always uniquely fixed by a choice of orthonormal basis [44]. Then (11) tells us that these two ONBs must be mutually unbiased [32], [41]. Mutually unbiased bases crop up all the time in quantum computing and quantum information theory. For example, a lot of quantum cryptography, including the famous BB84 quantum key distribution protocol [12], depends on mutually unbiased bases.

So the rule (11) defines pairs of mutually unbiased ONBs. Because, assuming spider-fusion, the rule (10) is stronger than (11), we call is ‚Äòstrong complementarity‚Äô. A funny thing about this novel notion of strong complementarity is that we actually know more about it than about ordinary complementarity. We know that mutual strong complementarity is monogamous, so it can only come in pairs [41, Thm. 9.66], and all of these pairs have been fully classified for finite dimensional Hilbert spaces, in terms of the finite Abelian groups [34].

In terms of circuits, rule (11) tells us that CNOT gates are equal to their own inverse: If instead of having the CNOT gates acting on the same wire with the same colours, we do the opposite, we get a circuit interpretation for (9): Together these two circuit equations yield:

A more extensive discussion of strong complementarity is in [41].

4. A complete calculus
Neither the rules (7) or (10) are specific to qubits, but generalise straightforwardly to all dimensions, and even beyond Hilbert space quantum theory. Indeed, they provide a canvas for studying theories more general than quantum theory, and they have for example enabled a crisp pictorial presentation of Spekkens' toy theory [7], [37], [38]. Notably, this kind of presentation enables one to pinpoint exactly where quantum theory and interesting ‚Äòquantum-like‚Äô theories depart. In this case, it has to do with the difference in the two finite groups 
 and 
. An extensive discussion of all of this is in [41], Chapter 11.

Other papers on generalised theories based on strong complementarity include [34], [35], [63], [64], [67], [68]. All of this is part of the ‚Äòprocess theories‚Äô approach to quantum foundations, where quantum-like theories are defined using a symmetric monoidal category, a.k.a. a process theory, and their features are studied abstractly (see e.g. [26], [27], [65], [66], [80], [90], [101], [102], [107], [108]).

However, if we come back down to earth, we can look at which rules actually are specific to quantum computation with qubits. As we will see, we don't need to go too far before we have enough rules to prove every true equation between pictures.

Qubit related rule(s). Turning our attention to Hilbert space again, and qubits specifically, another rule that was part of the ZX-calculus early on, although in a very different form, is the following one:(12) The form in which it appeared initially was the 1st one of these rules [31]:(13) which is a pretty one, with the 2nd one added a bit later [54], which is slightly less pretty. Together these two rules involving the yellow box are equivalent to (12). So what is (12) telling us?

We already told you about X spiders and Z spiders, but you might be wondering ‚Äòwhat happened to Y?‚Äô Did we put our brains in the oven and cook our Y's?

No! In fact, we didn't define Y-spiders, because they can already be defined in two different ways: in terms of an X-spider or in terms of a Z-spider. Equation (12) relates those two different ways.

This rule comes from the geometry of the Bloch sphere, a common way to visualise qubit operations as sphere rotations, in order to rotate X/Z into Y. Alternatively, you can slightly modify this rule as follows: which really is: And hence-ish the equivalence with rules (13). See [41] for a proper proof, without the ‚Äòish‚Äô. :)

A complete set of rules So what can we prove with the rules we now have? That is:(14) We already pointed out in Section 2 that with ZX-calculus we can go all the way and prove every equation that one can prove using linear algebra. It was shown in [105] that these rules are not enough just yet.

However, Backens [3] showed that they do enable us to prove every equation that holds for stabilizer quantum theory, i.e. ZX-pictures with phases restricted to multiples of .

This is surely not an unimportant fragment of quantum theory, as, for example, it suffices to prove that quantum theory is non-local [34]. On the other hand, stabiliser quantum circuits can be efficiently simulated classically [69].

In practice, even though the ZX-rules above cannot prove all equations involving circuits beyond stabiliser quantum theory, they seem pretty capable for many practical tasks such as circuit optimisation, as we'll see in the next section.

Of course, we do really want to understand which extra rules are needed in order to be able to prove all equations. These were established for the first time by Ng and Wang in [96], building further on Hadzihasanovic's result on a graphical calculus related to the ZX-calculus [72], [73]. Along the way, a result by Jeandel, Perdrix and Vilmart established derivability of all equations for the ‚ÄòClifford+T‚Äô ZX-pictures, which generalise stabilisers by allowing multiples of  rather than only  [76].

Theorems like these are called completeness theorems, in the sense that the rules form a complete set with respect to derivability. There are now several different complete sets of rules for the full family of ZX-pictures [96], [118], as well as the various different special cases [76], [77], [78], [117]. The most succinct one currently around adds a single rule to the 4 rules above, which allows for exchanging the colours of the phases in triples [118]:(15) where each of the phases 
 are trigonometric functions of the phases on the left-hand side.

This rule was first introduced for the case of two-qubit circuits [46], with two of the authors of the present paper failing to realise that it would yield full-blown completeness as well. This seems to show us that the four basic rules (14) already capture all of the complex interactions of multiple qubits, up to some ‚Äòlocal‚Äô single qubit equations, which are all subsumed by (15). Hence, when we use the ‚Äòlittle‚Äô versions of the strong complementarity rule ‚Äì equations (8) and (9) ‚Äì we can capture all of the true equations between matrices using less than ten rules, each involving at most 4 spiders on each side.

So, if we have a complete set of rules for all ZX-pictures, we should be happy right? Wrong! Completeness should be seen as the beginning and not the end for the ZX-calculus, and there is much to be gained by finding better rules.

For example, the succinctness obtained from the introduction of the colour-exchanging rule (15) comes at the price of introducing complicated, trigonometric functions of phases whenever it is applied. In fact, these are ugly enough that we didn't even bother to write them here. If we are working with phases numerically on a computer, this isn't a big problem, but for symbolic manipulation this quickly becomes impractical.

One way around this problem is to shift to the algebraic ZX-calculus, which replaces the phases  ‚Äì which become 
 in the definition of a spider (3) ‚Äì with plain ol' complex numbers : Our previous notion of spiders is still around, just by setting 
, but the extra generality buys us several nice features such as a more direct encoding of complex-valued matrices as well as straightforward generalisations from 2D to all finite dimensions [120] and from complex numbers to any commutative semi-ring [119].

5. Automated circuit optimisation
If a circuit is given, can ZX-calculus help with simplifying it? Of course it can, and it seems to be better at it than anything else. Here's an example of how that works. Suppose we want to simplify the following circuit made up of multiple gates, and we need to measure the last two qubits : There are a lot of 4-cycles here, and we've just learned that ZX-calculus is good at getting rid of 4-cycles. The 4-cycles are here: Well, technically these are 5-cycles, but after some spider (un)fusion, we indeed get some alternating 4-cycles to which we can apply the strong complementarity rule: and now we can eliminate that square, and then re-arrange a bit: We can do the same for the other 4-cycles: What we get has been called a ‚Äòphase gadget‚Äô [83]. By using the trick for eliminating 4-cycles again, one also finds that phase gadgets with opposite angles cancel out:

Hey ho let's go. We first bring in phase gadgets and then fuse: We get a 2-cycle which as we know vanishes, and then the two qubits on the left completely disentangle from those on the right. Since we are only measuring the 2 qubits on the right, we can now forget about the junk on the left: In the end, we see that this pretty complicated looking circuit actually doesn't do anything that affects the outputs we care about. Hence, we can replace it with the (typically much cheaper!) ‚Äòdo nothing‚Äô circuit, and we've optimised the computation.

Of course this is a small (and admittedly pretty contrived) example, which was easy to do by hand. However, with the help of some machine automation, we can apply the same kinds of techniques to real circuits coming from quantum algorithms, sometimes involving thousands or millions of quantum gates. A standard method for automating calculations like the one above is to replace equations (which can be applied in either direction), with rewrite rules (which can only be applied in one direction). For example:(16) As long as rewrite rules decrease the complexity of the ZX-picture (as measured e.g. by the number of spiders), applying them blindly until they don't apply any more will always terminate. In rewrite theory lingo, this means we can automate simplification of ZX-pictures by using a terminating rewrite system, based on a subset of the ZX-calculus rules.

This rewriting can be formalised in such a way that ZX-pictures can be represented and transformed by software tools using a method called double-pushout graph rewriting [58]. The basic theory for representing ZX-pictures as graphs and rewriting them was presented in [51], and recently extended in [15]. This forms the basis of a diagrammatic ‚Äòproof assistant‚Äô called Quantomatic [84].

By ‚Äòbreaking open‚Äô the gates in a quantum circuit, we can find simplifications in the ZX-calculus that would be hidden at the gate level. However, we may end up with something that doesn't look at all like a circuit any more. Hence, an important problem for ZX-based optimisation techniques is circuit extraction, that is efficiently recovering a gate-decomposition from a simplified ZX-picture. This simplify-and-extract technique for ZX was introduced in [53], generalised to a broader family of diagrams in [6], and forms the basis of the quantum circuit optimisation tool PyZX [82] (Fig. 1).

Fig. 1
Download : Download high-res image (95KB)
Download : Download full-size image
Fig. 1. PyZX is a Python library and circuit optimisation tool using the ZX-calculus. See github.com/Quantomatic/pyzx.

ZX-picture rewriting also forms the basis of a special-purpose circuit simplification tool STOMP [48], which reduces an important cost metric called the T-count of a quantum circuit using so-called ‚Äòspider-nest‚Äô identities.

6. Quantum natural language processing
ZX-calculus grew out of a more general pictorial approach to quantum foundations and quantum computation, called categorical quantum mechanics (CQM) [1], [24]. In fact, what CQM does is propose an alternative formalism to Hilbert space, which puts the emphasis on how systems compose, rather than in which space systems are described. Thanks to the successes of ZX-calculus it is fair to say the this alternative has genuine practical advantages.

On the other hand, the graphical structures employed by CQM (and in many cases originating there) stretch well beyond quantum theory. For example they have been applied in computability theory [98], models of concurrency [114], control theory [10], [20], the study of electrical [11] and digital [61] circuits, game theory [60], broader cognitive features [14], natural language processing [45], [104], and even consciousness research [111], [115]!

As aspects of ZX-calculus are essential to some of these areas, one may argue that to some extent they are ‚Äòquantum-like‚Äô. While this may only be taken as a rough analogy in some cases, in the particular area of natural language processing (NLP), it seems to be useful to take this quantum connection seriously. In the approach to NLP put forward in [45], vector space models for word meaning were combined with grammatical structure to produce compositional models of sentence meaning. This model makes crucial use of this tensor product of vector spaces, which gives exponential space requirements on a classical computer. On the other hand, forming tensor products on a quantum computer is cheap, as this is just what happens when you put two pieces of quantum data next to each other. This realisation led to the proposal of a quantum algorithm for natural language processing [122]. For various reasons, this first proposal was not very practical to run on quantum computers of today or the near future.

More recently, this proposal was adjusted and refined in order to fit on currently existing quantum hardware [29], [93], and implemented on IBM's quantum devices [94]. This provided an example of a ‚Äòquantum native‚Äô solution to a classical problem. That is, while the problem has nothing to do with quantum systems, its structure still naturally lives on a quantum computer.

An important refinement from the original algorithm to the one recently implemented on a real quantum computer was the use of the ZX-calculus to turn a picture representing a natural language sentence into a runnable quantum circuit that computes something about the sentence's meaning within the NLP model. Here is an example of a sentence and its interpretation as a picture:

The manner in which we obtain this diagram goes in two steps, first establishing the grammatical structure, and secondly assigning meanings to words. A pregroup [87], [88] has a set of ‚Äòbasic types‚Äô  each of which admit left and right inverses  
  and 
. Each grammatical type is assigned a string of these, e.g. a noun gets n, and a transitive verb (in English) gets:
 The inverses ‚Äòcancel out‚Äô from one direction:(17) 
 
 A sentence is grammatical if when taking the string of all of its grammatical types, the inverses cancel to leave a special, ‚Äòfinal‚Äô, basic type s (for sentence), like here for : 
 
 This calculation can be represented diagrammatically:(18) where: (1) the boxes are the types we start from, (2) the ‚Äòcups‚Äô represent the cancellations (17), (3) the straight wire corresponds to types that aren't cancelled, and (4) the associativity step (assoc.) and elimination of the unit step (unit) become trivial when using diagrams.

Now we want to think of the boxes in this diagram as actual vectors representing word meanings. In the case of verbs, following [28], [43], [70], [79], we refine these meanings using spiders, all together yielding:

To ‚Äòrun‚Äô this sentence on a quantum computer, we first interpret the black spider as the green ZX-spider. We can now use ZX-calculus to turn it into circuit-form: We may then use ZX-calculus rules to massage this diagram into a different shape (whose meaning is equivalent):(19) and replace the word-meanings by some pieces of ZX-picture with free parameters, : These parameters are ‚Äòtrained‚Äô over the course of many runs of such circuits using machine learning techniques. The finished product is a quantum circuit capable in principle of comparing sentence meanings, answering questions, and doing many more linguistic tasks.

This very simple sentence only uses a dash of ZX-calculus, but it already becomes clear that the ‚Äòelasticity‚Äô of ZX is helpful for such tasks. There are many equivalent ways to compute the sentence meaning, and some fit better on a quantum computer than others, hence the ‚Äòmassaging‚Äô in equation (19). This really starts to pay off when one starts to consider more complex sentences like this one: This can be seen as a compilation process, but one that doesn't take a program language as input, but natural language, and turns it into quantum machine code using the ZX-calculus to handle everything in between. The end result is a physics-first: the use of quantum systems to process natural language, with the help of the ZX-calculus.

Quantum machine learning plays a central role in quantum natural language processing. Recently, the ZX-calculus has started to play a role in enhancing our understanding of quantum machine learning itself: first in picturing quantum ans√§tze [121], and then in analysing important problems within the approach like the barren plateu phenomenon [123].

7. MBQC and fault-tolerance
Measurement-based quantum computing (MBQC) is an alternative model of computation to the circuit model, where measurements, rather than quantum gates, are the main things driving the computation. The most well-studied MBQC setup is called the quantum one-way model [103] In this setup, many qubits are prepared in a certain fixed state, called a graph state, then single-qubit measurements are prepared in a particular order.

Notably, the choice of the kind of measurement performed can depend on past measurement outcomes, a principle referred to as feed-forward. Even though each individual measurement outcome is non-deterministic, a clever application of feed-forward can produce deterministic quantum computations.

For example, in the one-way model, measurements are defined by angles . When they are performed, one of two things happens, non-deterministically: Suppose we actually wanted the first outcome for our computation, then the ZX-calculus tells us how to ‚Äòpush‚Äô the unwanted œÄ forward in time, changing future measurement angles:


Download : Download high-res image (43KB)
Download : Download full-size image
In fact, making these kinds of computations in the one-way model easier was one of the original motivations for the ZX-calculus. ZX was used, for example, to teach the one-way model in a fully-graphical way [41], give the first technique for translating MBQC computations into circuits that didn't require extra qubits or (non-physical) feedback loops [55], and produce an alternative model for MBQC based on Pauli-ZZ interactions [81], which are the native 2-qubit gate for most types of quantum hardware.

Another popular family of measurement-based models of quantum computation are various forms of fault-tolerant computations based on the surface code, a type of quantum error correcting code. Quantum error correction, and fault-tolerance is a huge subject, and way too huge to cover here. However, the basic idea is that many low-level ‚Äòphysical‚Äô qubits correspond to a few ‚Äòlogical‚Äô qubits. When doing computation in this way, it is useful to abstract away individual operations on the physical qubit to certain high-level logical transformations. A particularly nice instance of this is lattice surgery [75], which was co-developed by one of the authors of this survey. In lattice surgery, the main logical operations are ‚ÄòZ-split‚Äô, ‚ÄòX-split‚Äô, ‚ÄòZ-merge‚Äô, and ‚ÄòX-merge‚Äô. You might notice that I just said ‚ÄòZX‚Äô twice, so maybe this is a job for the ZX-calculus!

Indeed, in [50], the authors showed that ZX is a natural language for lattice surgery computations. For one thing, the basic operations are exactly what they sound like:


Download : Download high-res image (20KB)
Download : Download full-size image
Since these are just spiders, we already know how to use lattice surgery operations to build, for example, a CNOT gate:(20) While splits can be done deterministically, merges might introduce a œÄ error. However, much like in the one-way model, these errors can often be fed-forward using ZX-rules and accounted for by later operations: This ZX language for lattice surgery was given a formal foundation in [49] and variations have been used by groups at Google [62] and NII Toyko [74] for optimising various aspects of fault-tolerant computations.

While originally envisioned as a model based on the new primitives of split and merge, subsequent work has focused mainly on using lattice surgery as a tool for building CNOT gates as in equation (20) (with a few notable exceptions, e.g. [91]). Interestingly, in 2020 we saw the first experimental demonstration of logical qubit entanglement using lattice surgery [59, Nature], where the authors noted that it was much more efficient to use the primitive split and merge operations to prepare an entangled state. They did it like this:


Download : Download high-res image (8KB)
Download : Download full-size image
8. Kindergarten quantum mechanics: the experiment
In the abstract, we claimed that this paper is a spiritual child of the 2005 lecture notes Kindergarten Quantum Mechanics [24], but in fact, it is rather a spiritual grandchild. The middle generation was a paper called Quantum Picturalism [25], which contained among other things a vague proposal for testing the effectiveness of the pictorial formalism. It was claimed that, given the proper learning materials, high-school students could outperform their teachers in quantum theory, if the students used the pictorial formalism while the teachers used the Hilbert space formalism.

Now, ten years later, we have the materials in place for a far more ambitious goal: getting high-school students to do state-of-the-art quantum computing, on par with the abilities of Oxford post-graduate students. First of all, this required a book specifically targeted at high-schoolers, and a set of tasks to set both the high-schoolers and the postgrads, and some other interesting groups (like art students!). The book [39] and the tasks are written, but still under-wraps until the experiment is done. Without giving too much away, this should give some idea of the tone of the book: The experiments have already begun, with a pilot program having recently concluded. Watch this space!

9. How we got here: a brief history of the ZX-calculus
Conception. ZX-calculus was ‚Äòborn‚Äô in a rejected conference abstract [30] (QIP 2007), written in the mountains north of Tehran. The referee reports said things like: ‚ÄòLooks cute, so what?‚Äô

The basic idea at the time was to expand categorical quantum mechanics to complementary quantum observables, with the now-stated aim to make it directly applicable to practical quantum computing, but the deeper goal was to do something the program of Birkhoff-von Neumann quantum logic [13] failed to do: produce from first principles a full-fledged alternative to Hilbert space quantum theory. Strong complementarity was reverse-engineered by looking at ‚Äògeneralised flow‚Äô for MBQC [55], and phases just followed from general abstract nonsense, a.k.a. category theory.

ZX-calculus was ‚Äòofficially‚Äô introduced in the accepted conference paper [31, ICALP, 2008]. A slightly unfortunate statement in [31] concerns the relative status of complementarity (11) and strong complementarity (10): it was shown (in Theorem 3) that under a ‚Äòmild assumption‚Äô these are equivalent. Later, in the 85 page corrected and substantially expanded journal version [32, NJP, 2011] that ‚Äòmild assumption‚Äô was in Thm. 9.24 shown to be essentially equivalent to strong complementarity. A proper treatment of the (huge!) difference between complementarity and strong complementarity appeared in [34], by establishing a connection with non-locality, and fully classifying strongly complementary bases. (The full classification of complementarity bases is still completely open, and has swallowed several careers whole.)

Early rule fuzz. One of the early goals of the ZX-calculus was to fully understand MBQC using pictures. In doing so, it quickly became clear that the Euler decomposition rule on the right of equation (13) was needed in addition to rules that were already established [54]. This then settled the core of ZX-calculus, as it still is now.

After that, we attempted to move ZX-calculus beyond bog-standard quantum gates and MBQC to describe W-states. In quantum entanglement theory, there is ‚Äòessentially‚Äô only one two-qubit entangled state, up to equivalence by so-called stochastic local operations, but for 3 qubits there are two [57]. One is called a GHZ-state, and is just a 3-legged spider, and the other is called a W-state.

At first, a lot of time and energy was spent trying to cram W-states into the ZX-calculus. Along the way we got a useful new ZX-rule (supplementarity [36]), but we didn't get much closer to being able to work with W-states. This early defeat made some of us consider an alternative to the ZX calculus which is now called the...

ZW-calculus. The completeness of ZX-calculus was initially proven using completeness of another calculus: the ZW-calculus, a.k.a. the GHZ/W calculus [40]. The key idea was to slightly vary the rules governing spiders as follows: These spiders were called W-spiders, as the W-state was an instance of them. While this seemed like a relatively minor tweak to the notion of spiders, it turned out that, unlike the ZX-calculus, it was relatively straightforward to find a complete set of rules [71], owing in part to the fact that the ZW-calculus more directly encodes the rules of arithmetic [42].

The first completeness theorems for the ZX-calculus were proven using a somewhat roundabout technique that encoded ZX-pictures as ZW-pictures and showed (painstakingly) that each of the ZW-rules was derivable in ZX. This proved an important step in the progress of ZX theory, but the original raison d'etre for ZW remains open:

Open problem

Provide a classification of many-qubit entanglement (which is still poorly understood beyond three qubits) using the ZW-calculus.

A dead end: the ‚ÄòXYZ-calculus‚Äô. An early variation on ZX-calculus was the trichromatic calculus of [89], where a third colour (i.e. the Y-observable) was added. As one cannot have the cups for all three observables coincide, for the sake of symmetry, none did. This resulted in a substantially more complex rule-set and the calculus was never really used. The reason it shouldn't be used, probably, is because of monogamy of strong complementarity [41]. That is, at most two colours of spiders can satisfy the strong complementarity rules described in section 4 with each other, so to accommodate more colours, you have to put some sort of ‚Äòawkward twist‚Äô.

(In)completeness and presentations. The rules of ZX-calculus as firstly introduced in [32] without much consideration for scalar factors. These tended to be ignored when it was convenient, which causes problems e.g. for computing probabilities of quantum measurement outcomes. Scalars were seriously considered in the rules for the stabilizer fragment of ZX-calculus [5]. Minimality (whether a rule is non-derivable from other rules) of ZX rules was initially considered in [8] for stabilizer ZX-calculus, then it was further investigated for Clifford+T ZX-calculus in [110].

As mentioned in section 4, the first breakthrough for completeness of ZX-calculus was made by Backens [3] for the stabilizer fragment. The completeness of the real stabilizer ZX-calculus then followed in [56]. Furthermore, Backens proved that the scalar version of stabilizer ZX-calculus and the single-qubit Clifford+T fragment of ZX are complete [4], [5]. At the same time, Schr√∂der de Witt and Zamdzhiev showed by a counter-example that ZX-calculus can't be universally complete if it is just equipped with stabiliser-style rules [106]. They also conjectured that completeness could be achieved by adding a rule of form (15). Later on, Perdrix and Wang proved that the stabiliser-style ZX even can't be complete for the multi-qubit Clifford+T fragment, and the supplementarity rule is necessary [100].

At some point, some people (including at least one of the authors of this paper) started to believe there would be no finite set of rules which would be complete for any substantial extension of stabiliser quantum theory.

Fortunately, the aforementioned author didn't put money on it, as 2017-18 saw a veritable frenzy of completeness results for ZX. First Jeandel, Perdrix, and Vilmart (a.k.a. ‚Äòteam Nancy‚Äô) proved the completeness of multi-qubit Clifford+T ZX-calculus with a translation from ZW-calculus [76]. Very soon after, Ng and Wang finished the first complete axiomatisation for universal qubit ZX-calculus using a similar approach to the Nancy team and by introducing some new generators to the theory [96]. They were also able to give a (different) complete axiomatisation for the multi-qubit Clifford+T fragment [73], [97]. Inspired by Ng and Wang's results, the Nancy team gave another complete axiomatisation for universal qubit ZX-calculus in terms of original ZX spiders [77]. Furthermore, they proposed a normal form for ZX diagrams based on which universal completeness was still obtained without any resort to translation from ZW-calculus [78]. At last, as we mentioned in section 4, Vilmart successfully proved Schr√∂der de Witt and Zamdzhiev's conjecture with the explicit expression of (15) [118].

Precursors and successors. The kind of pictorial reasoning used in this paper was initiated by Penrose as a more intuitive alternative for ordinary tensor notation [99]. In fact, even though Penrose had reportedly been using the notation since he was an undergrad, he didn't think too highly of its prospects, mainly due to typesetting issues. In his 1984 text Spinors and Spacetime, he notes:

The notation has been found very useful in practice as it greatly simplifies the appearance of complicated tensor or spinor equations, the various interrelations expressed being discernible at a glance. Unfortunately the notation seems to be of value mainly for private calculations because it cannot be printed in the normal way.

Of course a lot can change in 20 years. In 2004, this notation was adopted to the specific needs of (finite-dimensional) quantum theory in CQM [1], which started the compositional axiomatization of quantum theory.

Spiders, in their algebraic incarnation as certain Frobenius algebras, first appeared in the category-theory literature [22], [85]. Hopf algebras, which in ZX-calculus terms correspond to the strong complementarity rules in absence of the spider-rules, have been around in their current concrete form since 1956 [23], when Cartier generalised earlier definitions based on structure theorems on the cohomology of compact Lie groups by Hopf, Samelson, Borel and others in the 1940s. Hopf algebras and their representations are now studied extensively under the moniker of quantum group theory (see e.g. [92]).

The idea of depicting (classical boolean) circuits as pictures of more basic components, and the pictorial depiction of the Hopf algebra (a.k.a. strong complementarity) laws, goes back to Lafont [86]. However, to capture the full richness of quantum circuits, one needs not just a single Hopf algebra, but a pair of them which interact in a special way (namely via the Frobenius, a.k.a. spider fusion laws). This structure was first made explicit, to the best of our knowledge, as part of the ZX-calculus.

Following the LEGO analogy, one might be tempted to ask if the spiders of the ZX-calculus are the ‚Äúmost fundamental‚Äù generators of quantum processes. This question doesn't have a clear answer. For example, several other ‚ÄúZ‚Äù calculi (ZW, ZH [9], and ZQ [95]) have 2-way encodings with ZX spiders and are also complete with respect to qubit quantum computation. So, in some sense, they are all just as fundamental as each other. However, they all share a similar core: a structure that contains non-trivial algebraic parts (i.e. those with operations taking many inputs) and non-trivial co-algebraic parts (i.e. those with operations producing multiple outputs), which interact with each other. This novel mathematical structure is interesting in its own right, and has since been studied using category theory [17], [19], [21], [52] and found a multitude of applications e.g. in the study of signal-flow graphs [18], electrical circuits [11], [17], the phase space of classical mechanics [47], and concurrent systems [16].

The future. New papers on ZX-calculus are appearing all the time. To keep up to date, there is a regularly updated list of papers on ZX-calculus available here: https://zxcalculus.com/publications.html