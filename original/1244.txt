Abstract
Ripple Effect is a logic puzzle where the player has to fill numbers into empty cells in a rectangular grid. The grid is divided into rooms, and each room must contain consecutive integers starting from 1 to its size. Also, if two cells in the same row or column contain the same number x, there must be a space of at least x cells separating the two cells. In this paper, we develop a physical zero-knowledge proof for the Ripple Effect puzzle using a deck of cards, which allows a prover to convince a verifier that he/she knows a solution without revealing it. In particular, given a secret number x and a list of numbers, our protocol can physically verify that x does not appear among the first x numbers in the list without revealing x or any number in the list.

Keywords
Zero-knowledge proof
Card-based cryptography
Ripple effect
Puzzle

1. Introduction
Ripple Effect (also known as Hakyu, Hakyukoka, or Seismic) is a logic puzzle created by a Japanese company Nikoli, the developer of many famous logic puzzles including Sudoku, Numberlink, and Bridges. A Ripple Effect puzzle consists of a rectangular grid, which is divided into polyominoes called rooms. Some cells in the grid comes with a number already in them; we call these cells fixed cells and other cells empty cells. The objective of this puzzle is to fill a number into each empty cell according to the two following conditions [14].

1.
Room condition: Each room must contain consecutive integers starting from 1 to its size (the number of cells in the room).

2.
Patricia, an expert in Ripple Effect, created a difficult Ripple Effect puzzle and challenged her friend Victor to solve it. After a while, Victor could not solve her puzzle and started to doubt whether the puzzle has a solution. Patricia needs to convince him that her puzzle indeed has a solution without showing it (which would render the whole challenge pointless). In this situation, Patricia needs a zero-knowledge proof (ZKP) to convince Victor.

1.1. Zero-knowledge proof
A ZKP is an interactive protocol between a prover P and a verifier V. Both P and V are given a computational problem x, but only P knows a solution w of x. A ZKP enables P to convince V that he/she knows w without revealing any information about it. A ZKP must satisfy the following three properties.

1.
Completeness: If P knows w, then V accepts with high probability. (Here we consider the perfect completeness property where the probability of acceptance is one.)

2.
Soundness: If P does not know w, then V accepts with low probability. (Here we consider the perfect soundness property where the probability of acceptance is zero.)

3.
Zero-knowledge: During the verification, V gets no extra information about w. Formally, there exists a probabilistic polynomial time algorithm S (called a simulator), without an access to P but with a black-box access to V, such that the outputs of S follow the same probability distribution as the outputs of the actual protocol.

Goldwasser et al. [6] was the first one to introduce the concept of a ZKP, and Goldreich et al. [5] later proved that a computational ZKP exists for every NP problem. As Ripple Effect has been proved to be NP-complete [23], one can construct a computational ZKP for it. However, such construction is not intuitive or practical as it requires cryptographic primitives.

Instead, many previous results focused on constructing physical ZKPs using a deck of cards. These protocols have benefits that they use only portable objects without requiring computers and also allow external observers to check that the prover truthfully executes the protocol (which is often a challenging task for digital protocols). They also have a great didactic value.

1.2. Related work
Development of card-based ZKPs for logic puzzles began in 2009 with a ZKP for Sudoku of Gradwohl et al. [7]. However, each of several variants of their protocol either requires special tools or has a nonzero soundness error. Later, Sasaki et al. [21] improved the ZKP for Sudoku to achieve perfect soundness property without using special tools. Recently, Ruangwises [17] also developed another ZKP for Sudoku using a deck of all different cards. Besides Sudoku, ZKPs for other (mostly Nikoli) logic puzzles have also been developed, including Akari [1], Bridges [20], Hitori [15], Juosan [12], Kakuro [1], [13], KenKen [1], Makaro [2], Nonogram [3], Norinori [4], Numberlink [18], Nurikabe [15], Slitherlink [11], Suguru [16], and Takuzu [1], [12].

The underlying techniques employed by these protocols can physically verify specific number-related functions. For example, a subprotocol in [2] verifies that two given numbers are different without revealing their values, and a subprotocol in [7] verifies that a given list is a permutation of all given numbers in some order without revealing their order.

1.3. Our contribution
In this paper, we develop a physical ZKP with perfect completeness and perfect soundness properties for Ripple Effect puzzle using a deck of cards. More importantly, we extend the set of functions that are known to be physically verifiable. In particular, we develop a physical protocol that, given a secret number x and a list of numbers, verifies that x does not appear among the first x numbers in the list without revealing x or any number in the list.

Unlike the functions verified by many protocols in previous work (see the full analysis in Section 5), the function our protocol has to verify uses cardinal numbers as private information; it uses the secret value x to determine how many elements in the list the condition is imposed on. Therefore, this function is significantly harder to verify without revealing x, and thus requires novel techniques not used before in other protocols. We consider this result to be an important step in card-based cryptography.

2. Preliminaries
2.1. Cards
Each card used in our protocol has either ♣ or ♡ on the front side. All cards have indistinguishable back sides.

For , define  to be a sequence of consecutive y cards arranged horizontally, with all of them being

Image 1
except the x-th card from the left being
Image 2
, e.g.  is
Image 1
Image 1
Image 2
and  is
Image 1
Image 2
Image 1
Image 1
. We use  to encode a number x in a situation where the maximum possible number is at most y. This encoding rule was first considered by Shinagawa et al. [22] in the context of using a regular y-gon card to encode each integer in . Also, we define  to be a sequence of consecutive y cards, all of them being
Image 1
. We use  to encode a number 0.
Normally, the cards in  are arranged horizontally as defined above unless stated otherwise. In some situations, however, we may arrange the cards vertically, where the leftmost card will become the topmost card and the rightmost card will become the bottommost card.

2.2. Matrix
2.3. Pile-shifting shuffle
The pile-shifting shuffle was developed by Shinagawa et al. [22]. One can perform this protocol in real world by putting the cards in each column into an envelope and then applying a Hindu cut, a basic shuffling operation commonly used in card games [24], to the sequence of envelopes.

2.4. Rearrangement protocol
The sole purpose of a rearrangement protocol is to revert columns of a matrix back to their original positions (after we perform pile-shifting shuffles) so that we can reuse all cards in the matrix without revealing them. Slightly different variants of this protocol were used in some previous card-based protocols [2], [8], [9], [18], [21].

Note that throughout our main protocol, we always put  in Row 1 when constructing a new matrix, hence we want to ensure that a

Image 2
in Row 1 moves back to Column 1. We apply the rearrangement protocol on an  matrix by publicly performing the following steps.
1.
Apply the pile-shifting shuffle to the matrix.

2.
Turn over all cards in Row 1. Locate the position of a

Image 2
. Suppose it is at Column j. Turn over all face-up cards.
3.
Shift the columns of the matrix to the left by  columns, i.e. move every Column ℓ to Column  (where Column  means Column  for ).

2.5. Uniqueness verification protocol
Suppose we have sequences , each consisting of b cards.  encodes a positive number, while  encode nonnegative numbers. Our objective is to verify that none of the sequences  encodes the same number as  without revealing any encoded number. This protocol is a special case of a protocol developed by Ruangwises and Itoh [18] to count the number of indices i such that  encodes the same number as . We apply the uniqueness verification protocol by publicly performing the following steps.

1.
Construct an  matrix with Row 1 consisting of a sequence  and each Row  () consisting of the sequence .

2.
Apply the pile-shifting shuffle to the matrix.

3.
Turn over all cards in Row 2. Locate the position of a

Image 2
. Suppose it is at Column j.1
4.
Turn over all cards in Column j from Row 3 to Row . If there is no

Image 2
among them, then the protocol continues. Otherwise, V rejects and the protocol terminates.
5.
Turn over all face-up cards.

2.6. Pile-scramble shuffle
The pile-scramble shuffle was developed by Ishikawa et al. [10]. One can perform this protocol in real world by putting the cards in each column into an envelope and then scrambling all envelopes together completely randomly.

3. Main protocol
Let  be the size of the Ripple Effect grid, and let k be the size of the biggest room. For each fixed cell with a number x, the prover P publicly puts a sequence of face-down cards  on it. Then, for each empty cell with a number x in P's solution, P secretly puts a sequence of face-down cards  on it. P will first verify the distance condition, and then the room condition.

3.1. Verification phase for distance condition
The most challenging part of our protocol is to verify the distance condition, which is equivalent to the following statement: for each cell c with a number x, the first x cells to the right and to the bottom of c cannot have a number x.

First, we will show a protocol to verify that there is no number x among the first x cells to the right of c. Then, we apply the same protocol analogously in the direction to the bottom of c as well.

Suppose that cell c has a number x. Let  be the sequence of cards on c. For each , let  be the sequence of cards on the i-th cell to the right of c, i.e.  is on a cell right next to the right of c,  is on a second cell to the right of c, and so on (if there are only  cells to the right of c, we publicly put  in place of  for every ).

3.1.1. Intuition
The intuition of this protocol is that we will first place the sequences ,  (each of them arranged vertically) in this order from left to right. Then, we will construct  sequences , all being  and arranged vertically, and place them between  and  (without revealing x). Finally, we will pick k consecutive sequences  and use the uniqueness verification protocol introduced in Section 2.5 to verify that none of them encodes the same number as . Since  are all , they do not affect the result of the uniqueness verification protocol.

3.1.2. Formal steps
P publicly performs the following steps.

1.
Construct a  matrix M by the following procedures. See Fig. 5.

•
In Row 1, place a sequence .

•
In Row 2, place the sequence  (which is ).

•
In Row 3, place a sequence .

•
In Row 4, place a sequence .

•
In each Column j (), place the sequence  arranged vertically from Row 5 to Row .

Fig. 5
Download : Download high-res image (42KB)
Download : Download full-size image
Fig. 5. A (k + 4)×k matrix M constructed in Step 1.

2.
Apply the pile-shifting shuffle to M.

3.
Turn over all cards in Row 2 of M. Locate the position of a

Image 2
. Suppose it is at Column . Turn over all face-up cards.
4.
Shift the columns of M to the right by  columns, i.e. move every Column ℓ to Column  (where Column  means Column  for ). Observe that after this step,  will locate at the rightmost column.

5.
Divide M into a  matrix  and a  matrix .  consists of the topmost two rows of M, while  consists of everything below . Each cell  () of M will become a cell  of a new matrix .

6.
Apply the rearrangement protocol to . Observe that we now have  in Row 1 and  in Row 2 of . From now on, we will perform operations only on  while  will be left unchanged.

7.
Append  columns to the right of the matrix  by the following procedures, making  become a  matrix. See Fig. 6.

•
In Row 1, place a sequence  from Column  to Column .

•
In Row 2, place a sequence  from Column  to Column .

•
In each Column  (), place a sequence  arranged vertically from Row 3 to Row . We call this sequence .

Fig. 6
Download : Download high-res image (61KB)
Download : Download full-size image
Fig. 6. (k + 2)×(2k − 1) matrix M2 after the modification in Step 7.

8.
Apply the pile-shifting shuffle to .

9.
Turn over all cards in Row 1 of . Locate the position of a

Image 2
. Suppose it is at Column . Turn over all face-up cards.
10.
For each , let  denote a sequence of card arranged vertically at Column  (where Column  means Column  for ) from Row 3 to Row  of . Observe that . Then, construct a  matrix N with Row 1 consisting of a sequence  taken from Row 1 of , Row 2 consisting of the sequence  taken from Row 2 of , and each Row  () consisting of the sequence  taken from .

11.
Apply the uniqueness verification protocol on N. The intuition of this step is to verify that none of the sequences  encodes the same number as  (while  are all ).

12.
Apply the rearrangement protocol on N, put  back onto c, and put  back to their corresponding columns in .

13.
Apply the pile-shifting shuffle to .

14.
Turn over all cards in Row 2 of . Locate the position of a

Image 2
. Suppose it is at Column . Turn over all face-up cards.
15.
Shift the columns of  to the right by  columns, i.e. move every Column ℓ to Column  (where Column  means Column  for ). Then, remove Columns  from , making  become a  matrix again. Observe that the columns we just removed are exactly the same  columns we previously appended to .

16.
Apply the rearrangement protocol on  and put the sequences  back onto their corresponding cells on the Ripple Effect grid.

P performs these steps analogously in the direction to the right and bottom of every cell in the grid. If every cell passes the verification, P continues to the verification phase for room condition.

3.2. Verification phase for room condition
The room condition of Ripple Effect is exactly the same as that of Makaro, and hence can be verified by a subprotocol in [2]. Since this is the final step of our protocol, after we finish verifying each room, we do not have to rearrange cards back to their original positions or put them back onto their cells.

P will verify each room separately. For a room R with size s, let  be the sequences of cards on the cells in R in any order. To verify room R, P publicly performs the following steps.

1.
Construct a  matrix M by the following procedures: in each Column j (), place the sequence  arranged vertically from Row 1 to Row k.

2.
Apply the pile-scramble shuffle to M.

3.
Turn over all cards in M. If all columns of M are a permutation of ,  arranged vertically, then the protocol continues. Otherwise, V rejects and the protocol terminates.

P performs these steps for every room. If every room passes the verification, then V accepts.

In total, our protocol uses  cards.

4. Proof of security
We will prove the perfect completeness, perfect soundness, and zero-knowledge properties of our protocol. We omit the proofs of the verification phase for room condition as they have been shown in [2].

Lemma 1 Perfect Completeness

If P knows a solution of the Ripple Effect puzzle, then V always accepts.

Proof

First, we will show that the uniqueness verification protocol will pass if none of  encodes the same number as . Suppose that  encodes a number . A

Image 2
in Row 2 will locate at Column z. Since none of  encodes the number z, all cards below Row 2 in the same column as that
Image 2
will be all
Image 1
s. This remains true after we rearrange the columns in Step 2. Therefore, the verification in Step 4 will pass.
Now consider the main protocol. Suppose that P knows a solution of the puzzle and places cards on each cell according to his/her solution. The verification phase for room condition will pass [2].

Consider the verification phase for distance condition. In Step 1, a

Image 2
in Row 2 is at the same column as , and will always be. Therefore, in Step 4, the column containing  will move to the rightmost column.
In Step 7, the order of the sequences (which are arranged vertically from Row 3 to Row ) from the leftmost column to the rightmost column is . Also, a

Image 2
in Row 1 is at the same column as , and a
Image 2
in Row 3 is at the same column as , and they will always be.
In Step 10, since  locates at Column j, the sequences  will be exactly  in this order. Therefore, in Step 11, the uniqueness verification protocol will pass because none of the sequences  encodes the number x, and  all encode 0.

Since this is true for every cell and every direction (to the right, left, top, and bottom), the verification phase for distance condition will pass, hence V will always accept. □

Lemma 2 Perfect Soundness

If P does not know a solution of the Ripple Effect puzzle, then V always rejects.

Proof

First, we will show that the uniqueness verification protocol will fail if at least one of  encodes the same number as . Suppose that  and  () both encode a number . A

Image 2
in Row 2 will locate at Column z. Since  also encodes the number z, a card in Row d in the same column as that
Image 2
will be a
Image 2
. This remains true after we rearrange the columns in Step 2. Therefore, the verification in Step 4 will fail.
Now consider the main protocol. Suppose that P does not know a solution of the puzzle.2 If the cards on some cell are not in a correct format ( for some integer ), then the uniqueness verification protocol for that cell will fail in Step 3. So, we assume that the cards on every cell are in a correct format and thus correspond to some number. Since P does not know the solution, these numbers must violate either the room condition or the distance condition. If they violate the room condition, the verification phase for room condition will fail [2].

Suppose that the numbers in the grid violate the distance condition. There must be two cells c and  in the same row or column having the same number x, where  locates on the right or the bottom of c with  cells of space between them.

Consider when P performs the verification phase for distance condition for c in the direction towards . The sequence on the cell  will be  By the same reason as in the proof of Lemma 1, in Step 10, the sequences  will be exactly  in this order and thus include . Therefore, in Step 11, the uniqueness verification protocol will fail because  encodes the number x, hence V will always reject. □

Lemma 3 Zero-Knowledge

During the verification phase, V gets no extra information about P's solution of the Ripple Effect puzzle.

Proof

To prove the zero-knowledge property, it is sufficient to prove that all distributions of the values that appear when P turns over cards can be simulated by a simulator S without knowing P's solution.

•
In the rearrangement protocol:

–
Consider Step 2 where we turn over all cards in Row 1. This occurs right after we applied the pile-shifting shuffle to the matrix. Therefore, a

Image 2
has an equal probability to appear at each of the b columns, hence this step can be simulated by S without knowing P's solution.
•
In the uniqueness verification protocol:

–
Consider Step 3 where we turn over all cards in Row 2. This occurs right after we applied the pile-shifting shuffle to the matrix. Therefore, a

Image 2
has an equal probability to appear at each of the b columns, hence this step can be simulated by S without knowing P's solution.
–
Consider Step 4 where we turn over all cards in Column j from Row 3 to Row . If the verification passes, the cards we turn over must be all

Image 1
s, hence this step can be simulated by S without knowing P's solution.
•
In the verification phase for room condition:

–
Consider Step 3 where we turn over all cards in Row 2 of M. This occurs right after we applied the pile-shifting shuffle to M. Therefore, a

Image 2
has an equal probability to appear at each of the k columns, hence this step can be simulated by S without knowing P's solution.
–
Consider Step 9 where we turn over all cards in Row 1 of . This occurs right after we applied the pile-shifting shuffle to . Therefore, a

Image 2
has an equal probability to appear at each of the  columns, hence this step can be simulated by S without knowing P's solution.
–
Consider Step 14 where we turn over all cards in Row 2 of . This occurs right after we applied the pile-shifting shuffle to . Therefore, a

Image 2
has an equal probability to appear at each of the  columns, hence this step can be simulated by S without knowing P's solution.
Therefore, we can conclude that V gets no extra information about P's solution. □

5. Analysis of Nikoli puzzles and related functions
In this section, we classify Nikoli logic puzzles into different types in order to highlight the significance of our protocol. See Table 1.


Table 1. Examples of Nikoli logic puzzles in each type.

Type of Puzzle	Type A: Numbers as public information	Type B: Numbers as private information
Type 0: No number	Norinori, Masyu, LITS, Mid-loop, etc.
Type 1: Nominal numbers	Numberlink, Hitori, etc.	Sudoku, Nansuke, etc.
Type 2: Ordinal numbers		Makaro
Type 3: Cardinal numbers	Akari, Juosan, Shikaku, Slitherlink, Nurikabe, etc.	Kakuro, Ripple Effect
Several Nikoli puzzles, including Norinori, Masyu, LITS, and Mid-loop, do not involve numbers at all. We call these puzzle Type 0. Verifying a solution of a Type 0 puzzle can be done by only verifying functions of nominal numbers, e.g. a subprotocol in a ZKP for Norinori [4] verifies that a given number appears in a given list without revealing its position in the list.

Some Nikoli puzzles, such as Sudoku, Numberlink, Hitori, and Nansuke, do involve numbers, but only as nominal data, i.e. numbers are treated as labels or symbols. We call these puzzle Type 1. For puzzles in this type, if we replace every number x by  for any function , the conditions will remain exactly the same. Like Type 0 puzzles, verifying a solution of a Type 1 puzzle can be done by only verifying functions of nominal numbers, e.g. a subprotocol in a ZKP for Sudoku [7] verifies that a given list is a permutation of all given numbers in some order without revealing their order.

We further divide Type 1 puzzles into two subtypes, 1A and 1B. For Type 1A puzzles, numbers appear only as public information, i.e. already given in the puzzle but not as parts of a solution. Numberlink and Hitori are Type 1A puzzles. For Type 1B puzzles, numbers also appear as private information, i.e. as parts of a solution. Sudoku and Nansuke are Type 1B puzzles. The difference of these two subtypes is that when verifying a solution of a Type 1B puzzle, we cannot reveal any number, which makes developing ZKPs for Type 1B puzzles generally harder.

The next type of Nikoli puzzles is Type 2, which consists of puzzles involving numbers as ordinal data, i.e. numbers are comparable. For puzzles in this type, if we replace every number x by  for any increasing function , the conditions will remain exactly the same. We find Makaro as the only Nikoli puzzle classified into this type. In Makaro, numbers are parts of a solution and thus are private information, so we put Makaro into Type 2B. Verifying a solution of a Type 2 puzzle needs to verify functions of ordinal numbers, e.g. a subprotocol in a ZKP for Makaro [2] verifies that a given number in a list is the largest one in that list without revealing any number in the list.

Type 3 puzzles are the ones involving cardinal numbers, i.e. using the mathematical meaning of numbers. Most of Nikoli puzzles, including Akari, Juosan, Shikaku, Slitherlink, and Nurikabe, use cardinal numbers only as public information and hence are classified into Type 3A. Verifying a solution of a Type 3A puzzle needs to verify functions of cardinal numbers, e.g. a subprotocol in ZKP for Nurikabe [15] verifies the existence of k connected white cells in a grid, given a number k. Note that during the verification, all numbers are public information and can be revealed, making the verification easier than that of Type 3B puzzles.

Lastly, Type 3B puzzles use cardinal numbers as parts of a solution, and thus as private information. We find Kakuro and Ripple Effect as the only two Nikoli puzzles in this type. However, the special property of Kakuro, which differs from other Type 3 Nikoli puzzles, is that numbers are never actually used in the sense of cardinality (such as counting the numbers of cells) but are only used for addition. Observe that in Kakuro, if we replace every number x by  for any linear function , the conditions will remain exactly the same. (This property is not true for all other Type 3 Nikoli puzzles.) In particular, a subprotocol in a ZKP for Kakuro [13] verifies that the sum of all numbers in a list is equal to a given number. This leaves Ripple Effect as the only Nikoli puzzle that actually uses cardinal number as private information.

As a result, we consider verifying a solution of Ripple Effect to be harder than that of other puzzles, and the techniques used in the ZKP for Kakuro cannot be applied to our protocol. In particular, given a secret number x and a list of numbers, our protocol verifies that x does not appear among the first x numbers in the list without revealing x or any number in the list. This function is significantly harder to verify without revealing x, and thus requires novel techniques not used before in other protocols.

6. Future work
We developed a physical protocol of ZKP for the Ripple Effect puzzle using  cards. A possible future work is to develop a protocol for this puzzle that requires asymptotically fewer number of cards, or the one that can be performed using a deck of all different cards.

Another challenging future work is to find other Type 3B (non-Nikoli) logic puzzles and develop a ZKP for such puzzles, which may involve physical verification of more complicated number-related functions.