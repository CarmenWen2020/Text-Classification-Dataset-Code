Abstract
The problem of computing the meet over all paths (MOP) solution in a monotone data flow framework over an infinite meet semilattice is generally undecidable [1]. Hence, the maximum fixed point (MFP) solution, which is polynomial time computable on semi-lattices of finite height, is generally used in practice for program analysis questions in monotone data flow frameworks. However, we show that if the semi-lattice is finite, computing MOP solution is -complete with respect to log space reductions, which implies parallelizability and polynomial time computability. It is also shown that the problem of computing the maximum fixed point (MFP) solution is -complete with respect to log space reductions, and hence not efficiently parallelizable, even when the flow graph is directed acyclic and the semilattice has just four elements. These results appear in contrast with the fact that when the semilattice is not finite, solving the MOP problem is significantly harder than MFP.

Keywords
Data flow framework
Computational complexity
Maximum fixed point solution
Meet over all paths solution-complete-complete

1. Introduction
The problem of data flow analysis over monotone data flow frameworks with a bounded meet semilattice has been well studied in the context of static program analysis and machine independent compiler optimizations [2, Sec. 9.2, 9.3], [3]. Although the meet over all paths (MOP) solution is desirable, its computation is undecidable in general [1]. Iterative fixed point methods as in [4] are commonly used to find the maximum fixed point (MFP) solution, as a conservative approximation to the MOP solution [1]. Several important problems like reaching definitions analysis, live variable analysis and available expressions analysis [2, Sec. 9.2.4–9.2.6] are essentially data flow analysis problems.

In this paper, the computational complexity of the MFP and the MOP data flow analysis problems over monotone data flow frameworks with a finite bounded meet semilattice (which is essentially a finite lattice - see Section 2.2) is investigated. We show that computing the MFP solution is -complete with respect to log space reductions (see [5, Def. 3.5.1 on p. 55] for definition) even when the flow graph is directed acyclic. We further show that the problem of finding MOP solution is -complete with respect to log space reductions (see [6, Def. 8.22 on p. 324] for definition). In fact the proof in Section 5 shows that MOP is -complete even if the data flow framework is non-monotone. The former result indicates that the MFP problem is unlikely to be in the complexity class  (see [6, Def. 10.38 on p. 402] for definition) and hence fast parallel algorithms are unlikely to exist for the problem [5, Chap. 5]. The  complexity of MOP problem yields 
 depth, polynomial sized circuit for the problem [7, Thm. 16.1 on p. 395]. This further leads to the somewhat surprising observation that although MOP computation is harder than MFP computation in general, computing the former appears theoretically simpler over finite bounded semilattices. It follows from these observations that the undecidability of MOP computation in the general case is not a hindrance to its computation when the lattice is not infinite.

The complexity of inter procedural data flow analysis (i.e. the case when the program has more than one procedure) is considered in [8]. In case of inter procedural data flow analysis, meet over all valid paths (MVP) solution is defined instead of the MOP solution [9]. It is shown in [8] that the problem of finding the MVP solution to inter procedural data flow analysis over distributive data flow frameworks with the power set semilattice of an infinite (resp. finite) set is -hard (resp. -complete). However, this result cannot be extended to the MOP solution for data flow analysis as the proof uses procedure calls. In [8], [10], the special case of MOP computation for distributive data flow frameworks with the semilattice being the power set of a finite set is reduced to graph reachability problem. Based on the reduction, the authors show that the problem belongs to the class 
. This result shows that the above case admits fast parallel algorithms. The -completeness result for MOP presented in our paper extends the result for this special case to all finite bounded meet semilattices.

The following is an outline for the rest of the paper. In Section 2, we define the MFP and MOP problems. In Section 3, we show that MFP is -complete by a log space reduction from Monotone Circuit Value (MCV) problem. In Section 4, we define Graph Meet Reachability (GMR) problem and give an  algorithm for it. In Section 5, we prove that MOP is log space reducible to GMR thereby showing that MOP is in . Completeness of MOP w.r.t. the class  follows easily by a log space reduction from Graph Reachability (GR) problem to MOP. We note that all the completness results of this paper are with respect to log space reductions.

2. Background
Let  be a partially ordered set (see [11, p. 2] for definition). Let ⋁ and ⋀ respectively denote the join and meet operations on L (see [11, p. 39] for definition). A partially ordered set  is a meet semilattice, denoted by , if  exists for all  [12, Exercise 1.35 on p. 18]. A meet semilattice  is a bounded meet semilattice, denoted by , if there exists an element  satisfying  for all . A finite bounded meet semilattice contains an element  and will be denoted by . A meet semilattice  is a lattice, denoted by , if  exists for all  [11, Def. 2.4 on p. 34]. A lattice  is a bounded lattice, denoted by , if there exist elements  satisfying  and  for all  [11, Def. 2.12 on p. 41]. A lattice is a complete lattice if ⋁S and ⋀S exist for all  where  and  [11, Def. 2.4 on p. 34]. It is known that a bounded finite semi-lattice is a complete lattice [11, Corollary 2.25 on p. 46].

Let 
 be a finite semilattice. Let 
. The tuple 
 will be denoted by 
 or simply by 
 when there is no ambiguity about the index set. Let 
 denote the jth element of 
. For all 
, 
. [11, Sec. 2.15 on p. 42]

Let A and B be partially ordered sets. A function  is monotone if for all ,  implies  [11, Def. 1.34 on p. 23]. Let  be a directed graph. Let 
 and 
 respectively denote the indegree and outdegree of vertex v. The function 
 is defined by .

Definition 1

Let L be a meet semilattice and let . An element  is called a fixed point of f if  [11, p. 50]. An element  is called the maximum fixed point of f if it is a fixed point of f; and for every 
 whenever 
 is a fixed point of f then 
.

2.1. Data Flow Analysis (DFA)
Definition 2

A control flow graph is a finite directed graph 
 where 
 is the set of vertices; E is the set of edges; 
 (called entry) is a designated vertex satisfying 
; and 
 (called exit) is a designated vertex satisfying 
. We assume that 
. [2, Sec. 8.4]

Definition 3

A (finite) monotone data flow framework [1] is a triple  where

•
 is a finite bounded meet semilattice and 
 with 
 and 
; and

•
F is a collection of monotone functions from L to L.

Definition 4

A (finite) Data Flow Analysis (DFA) system α is a 5-tuple 
 where

•
 is a control flow graph;

•
 is a (finite) monotone data flow framework;

•
 assigns a function 
 to the vertex 
 of G; and

•
, 
.

2.2. Maximum fixed point (MFP) problem
Let 
 be a DFA system with 
 and . Let 
 is defined as follows
 
 
 More compactly, using the notation defined earlier(1)
 
 Here we assume that  when . With this convention, it is easy to see that 
 is well defined and monotone in 
.

Theorem 1

Knaster–Tarski fixed point theorem [13]
Let  be a complete lattice and let  be a monotone function. Then the maximum fixed point of f exists.

A finite bounded meet semilattice  is essentially a finite lattice where join operation is defined as follows: For all 
, 
. Since every finite lattice is complete, it is clear from Theorem 1 that the maximum fixed point of 
 exists.
Suppose 
 is the maximum fixed point of the function 
 defined above, then we use the notation 
 for the element 
.

Definition 5

Maximum Fixed Point (MFP) problem: Given a DFA system 
, decide whether 
.

2.3. Meet over all paths (MOP) problem
A path p from vertex 
 to vertex 
 in a graph G (called a 
-
 path) is a non-empty sequence 
 of vertices such that 
 for all . It may be noted that vertices and edges on a path need not be distinct. The length of path p is denoted by . Let 
 be the function associated with the vertex 
. Then 
 will be called the path function associated with the path p. Let 
 denote the set of all paths from vertex 
 to vertex 
 in G.

Definition 6

Given a DFA system 
, the meet over all paths solution, denoted MOP, is defined by 
 
.

Since 
 is finite and hence complete, though there could be infinitely many 
-
 paths, 
 is well defined by taking the infimum of all path functions. Note that there is no significance for the “starting” value 0 in the above definition and the result presented in the paper can be easily seen to be true for any starting value.
Definition 7

Meet Over all Paths (MOP) problem: Given a DFA system 
, decide whether 
.

3. MFP is P-complete
We first define the Monotone Circuit Value (MCV) problem which is a well known -complete problem. It will be reduced to the MFP problem, hence showing that MFP is -complete.

3.1. Monotone circuit value (MCV) problem
Definition 8

A monotone Boolean circuit [5, p. 27, 122] is a 4-tuple 
 where

•
 is a finite directed acyclic graph with 
, and for all 
, 
 is either 0 or 2;

•
 is the set of input vertices;

•
, called output, is the unique vertex in G with 
; and

•
 assigns either the Boolean AND operator (denoted by ⊙) or the Boolean OR operator (denoted by +) to each non-input vertex.

Let 
 be the ith input vertex of a Boolean circuit 
 and let 
 be the input to the circuit. The input value assignment is a function  defined by 
 for all 
.
The function  can be extended to the function , called the value of a node, as follows
  It is easy to see that ν is well defined when G is a directed acyclic graph.

Definition 9

An instance α of Monotone Circuit Value (MCV) problem is a pair  where 
 is a monotone Boolean circuit and  is an input value assignment.

Definition 10

Monotone Circuit Value (MCV) problem: Given an instance  of MCV with 
, decide whether 
 [5, p. 122].

3.2. A reduction from MCV to MFP
The basic idea behind this reduction is that corresponding to the boolean AND and OR operations, we can define monotones function on the lattice 
, and the action of any sequence of boolean AND and OR operations can be simulated by the action of a corresponding sequence of monotone functions, along with the (monotone) swap operator that takes a pair 
 and returns .

Given an instance  of MCV with 
 and , construct a DFA system 
 as follows:

•
 where

–
.

–
 is defined as follows

*
For each input vertex 
, add the edge 
 to 
.

*
For each vertex 
, add the edge 
 to 
.

*
For each vertex 
 with predecessors 
 and 
 with , add the edges 
 and 
 to 
. Note that each 
 has a unique predecessor in 
.

•
 is defined as follows

–
.

–
⋀ is the bit wise ⊙ (AND) operation in .

–
 where

*
 is the identity function.

*
 is defined as 
 for all 
.

*
 is defined as 
 for all 
.

*
Swap function 
 is defined as 
 for all 
.

*
 is defined as 
 for all 
.

*
 is defined as 
 for all 
.

It is easy to see that all functions in F are monotone.
•
Let 
 and 
 denote the functions associated with vertices 
 and 
 respectively. Then, 
 is defined as follows
  More compactly 
 if 
.
 

Fig. 1 shows an instance of MCV with 
 and input value assignment 
, 
 and 
; and the corresponding control flow graph constructed using the above reduction.
Fig. 1
Download : Download high-res image (75KB)
Download : Download full-size image
Fig. 1. An instance of MCV and the corresponding control flow graph.

3.3. Proof of correctness
Let 
 be a Boolean circuit with . Let  be defined as follows
 
  It is easy to see that the  function is well defined.

Lemma 1

Let  be an instance of MCV with 
 and . Let 
 be the DFA system as constructed in Section 3.2. Then the function 
, defined in Section 2.2, has a unique fixed point. Moreover, for all 
, 
 and for all 
, if 
 is the predecessor of 
 in 
, then 
.

Proof

The maximum fixed point of 
 exists by Theorem 1 and the paragraph following it. Therefore, 
 has at least one fixed point. Let 
 be an arbitrary fixed point of 
. Let 
 and 
 denote the elements of 
 corresponding to vertices 
 and 
 respectively. We first show that all 
 and 
 are uniquely defined.

Since 
 is a fixed point of 
, we have 
. Therefore, by Equation (1), 
 
. Hence,(2)
 
 Since , 
 is uniquely defined. Let 
 be an arbitrary vertex of V. We prove the uniqueness of 
 by induction on 
.

Base case: 
 i.e. 
. By definition, 
 and 
 for all 
. From Equation (2), 
 is uniquely defined.

Inductive step: Let 
 be the predecessors of 
 in G. By definition of  function, 
 and 
. By induction hypothesis, 
 and 
. From Equation (2), 
 is uniquely defined. Let 
. From Equation (2), 
 is uniquely defined. The case 
 is proved similarly.

Since all 
 and 
 are uniquely defined, 
 is unique and hence 
 is the maximum fixed point of 
. So, for all 
, 
 and for all 
, if 
 is the predecessor of 
 in 
, then 
. □

Corollary 1

Let  be an instance of MCV with 
 and . Let 
 be the DFA system as constructed in Section 3.2. Then, 
 if and only if 
.

Theorem 2

MFP is -complete.

Proof

Consider a log space transducer with a read-only input tape, write-once output tape and log space work tape [6, Def. 8.21 on p. 324] that takes as input an instance of MCV and constructs an instance of MFP, described above. The transducer first lists the vertex set of 
. This requires only listing two additional vertices other than the vertices of the input graph, and requires no larger than logarithmic space to iterate over all the vertices of the input graph. To construct a description of 
, the transducer goes over the input vertices of G, using logarithmic space to index, and lists the edges 
, then it goes over non-input vertices of G again, using logarithmic space to index, and lists out edges 
 to the output tape. In a second round, the transducer goes over the edges of G, using logarithmic space to index, and lists out edges 
 and 
 into the output tape.

Next, the transducer writes a description of the semilattice  and F on the output tape. Since the size of the semilattice and F is independent of the input, this step requires only constant space. Next, the transducer lists down the functions in M associated with each vertex in 
. Since each function in M belongs to set F, the transducer just needs to write down the index of the function within set F. Since set F is of constant size, the index of each function will require only constant space. So the transducer can go over all the vertices, using logarithmic space, and write down the index (within F) of the function associated with each vertex. Thus, we conclude that the reduction is log space computable.

A polynomial time algorithm for MFP is given in [4]. MCV is shown -complete in [14]. We have shown that the above reduction is log space computable. Hence MFP is -complete. □

Corollary 2

MFP is -complete even when the control flow graph is directed acyclic and the semilattice is of constant size.

Proof

The control flow graph constructed in Section 3.2 is directed acyclic and the semilattice contains only four elements. □

A semilattice can be represented as a poset  [11, p. 33], as a covering relation of a poset  [11, p. 11] or as an algebraic structure  [11, p. 39]. Since by Corollary 2 the P-completeness of MFP holds even for constant sized semilattices and constant sized lattices can be transformed from one representation to another using constant space, the -completeness result for MFP is independent of the particular representation of the semilattice.

4. Graph meet reachability (GMR) problem
In this section, we define the Graph Meet Reachability (GMR) problem which will be used as an intermediate problem in Section 5 for showing that MOP is -complete.

Definition 11

Let 
 be a finite set and let  be a finite bounded meet semilattice with 
. A directed graph  is said to be a product graph of A and L if 
 is the set of vertices and  is the set of directed edges.

Definition 12

An instance of Graph Meet Reachability (GMR) problem is a 7-tuple 
 where

•
A is a non-empty finite set;

•
 is a finite bounded meet semilattice where 
 with 
 and 
;

•
 is a product graph of A and L;

•
 where 
 and 
; and

•
; and 
.

Let 
.

Definition 13

Graph Meet Reachability (GMR) problem: Given an instance 
 of GMR, decide whether  
 
.

Note: In the following, we assume that the relation ⋀ on L is presented as a collection of triples 
. In Appendix A, we will show that the results of the paper do not depend on the particular representation of the lattice. A function  is assumed to be represented as a set of tuples of the form .
Definition 14

An instance α of Graph Reachability (GR) (respectively, Graph Unreachability (GNR)) problem is a triple 
 where  is a finite directed graph and 
.

Definition 15

Graph Reachability (GR) problem: Given an instance 
 of GR, decide whether 
 is reachable from 
. Graph Unreachability (GNR) problem: Given an instance 
 of GNR, decide whether 
 is unreachable from 
.

Fact 1

GR and GNR are -complete [7, Thm. 16.2 on p. 398, Thm. 7.6 on p. 151].

Lemma 2

GMR is in .

Proof

Let 
 be an instance of GMR. Let 
 and let 
. Since GR and GNR are in , there exist deterministic Turing machines M and 
, each having an additional read-once certificate input tape, and polynomials 
 such that for each , 
 such that 
 and 
 such that 
. [15, Def. 4.19 on p. 81]. Here, 
 is to be presented on the input tape for both M and 
 and 
 (respectively 
) is to presented on the special read-once tape of M (respectively, 
). Both M and 
 use at most 
 space on its read-write tapes for each 
.

We can combine the operation of M and 
 for all j, re-using space, to construct a Turing machine N for GMR that operates as follows. The input instance α is presented to N on the input tape. The read-once certificate input tape is presented with an input 
. For each j in order, N picks the candidate certificates 
 and 
 and simulate M and 
 to determine whether 
 or 
 (reusing space for each reachability/unreachability verification). If for some j, both M and 
 rejects, then N rejects. Otherwise N keeps accumulating the meet of the lattice elements corresponding to vertices in T found so far. If this value is equal to 
 in the end, then N accepts. Otherwise N rejects. The workspace required by machine N is only logarithmic in the size of the input. □

5. MOP is NL-complete
5.1. A reduction from MOP to GMR1
The intutive idea behind this reduction is that when the size of the underlying lattice L on which computation of a data flow graph is performed is finite, we can construct a product graph in which each vertex in the original graph has  copies, with each new vertex encoding a  pair. MOP computation on the original flow graph can then be transformed to the problem of checking whether a certain  pair is reachable from the source node of the product graph. Moreover, it can be seen that the construction of the product graph requires no more than logarithmic space on the size of the original problem instance. The technical details are given below.

Suppose that a DFA system 
, where 
,  and 
 with 
 and 
 is given. Construct an instance of GMR 
 as follows

•
.

•
 where

–
.

–
 is defined as follows

*
For each 
, if 
, add the edge 
 to 
.

*
For each 
, add the edge 
 to 
.

Note that the vertex 
 of the product graph 
 has been constructed from the element 
 of A and the lattice element 
.
Example 1

, 
,

, 
,

 and 
.

M associate function 
 with vertex 
 of V. The right diagram in Fig. 2 shows the corresponding product graph constructed using the above reduction.

5.2. Proof of correctness
Lemma 3

Let 
 be a DFA system where 
,  and 
 with 
 and 
. Let 
 be the instance of GMR as constructed in Section 5.1. Then for any 
, there exists a 
-
 path p in G such that 
 if and only if 
 is reachable from 
 in 
.

Proof

Only if part: Let 
 be an arbitrary vertex of V. Let p be a 
-
 path in G and let 
 for some 
. We prove the only if part by induction on .

Base case: Let  i.e. 
. Then 
 and hence, by construction of 
, 
. So, 
 is reachable from 
 in 
.

Inductive step: Let 
 for some 
. Let 
 be the path p with 
 excluded i.e. 
 where ⋅ operator concatenates two paths. Therefore, 
 is a path from 
 with length less than that of p. Since 
, there exists some 
 such that 
 and 
. By induction hypothesis, 
 is reachable from 
 in 
. By construction of 
, 
. So, 
 is reachable from 
 in 
. Hence, the only if part is true.

If part: Let 
 be reachable from 
 in 
. Let p be a path in 
 from 
 to 
. It is easy to see that length of p must be odd. So, we prove the if part by induction on  where  is odd.

Base case: Let  i.e. 
. By construction of 
, 
 and 
. So, there exists trivial 
-
 path q in G, the path having only one node 
, such that 
.

Inductive step: Let 
 for some 
. (Note that the reduction permits only paths of this form). Let 
 be the path p with 
 and 
 excluded i.e. 
 where ⋅ operator concatenates two paths. It is clear that length of 
 is less than that of p. By induction hypothesis, there exists a 
-
 path q in G such that 
. By construction of 
, 
 and 
. So, there exists a 
-
 path 
 in G such that 
. Thus, the if part is true. This completes the proof. □

Corollary 3

Let 
 be a DFA system with 
,  and 
 with 
 and 
. Let 
 be the instance of GMR as constructed in Section 5.1. Let 
. Then 
 if and only if  
 
.

Lemma 4

MOP is in .

Proof

We show that the reduction in Section 5.1 is logarithmic space computable. Consider a log space transducer computing the reduction. The non-trivial part in the reduction is to construct the graph 
 in logarithmic space. Listing all vertices 
 and 
 requires keeping track of indices in the set V and the set L, requiring  space. To generate a description of 
, the transducer goes over each edge 
 and 
 in  space, and each such pair, uses  space to index into F to find 
 to determine the value of k such that the edge 
 has to be added to 
. Further, for 
, adding the edge 
 to 
 require another round of going over all edges E, keeping track of indices L for each edge 
, and hence requires only  work-tape space. Thus, the total space required for the whole reduction is . Hence, we conclude that the reduction is computable in log space.

Thus, MOP is log space reducible to GMR. By Lemma 2, GMR is in . Therefore MOP is in . □

5.3. A reduction from GR to MOP
Let 
 be a given instance of GR. Without loss of generality, we assume that 
. We also assume that 
 and 
 (if not, we add new vertices 
 and 
, and add edges 
 and 
 to G. Call this new graph 
. We then use the instance 
).

Construct a DFA system 
 as follows

•
 where

–
.

–

•
 where

–
 is the Boolean semilattice where ⋀ is the AND operator, with possibly multiple arguments.

–
F contains the following two functions: the constant function 
 that outputs 1 for all input values, and the identity function 
.

•
M assigns 
 to 
 and 
 to all other vertices.

For simplicity, in the definition above, the semilattice is defined with ⋀ as the multi-argument AND operator. Since a k-argument ⋀ operator can be simulated by  two-argument ⋀ operators, the space complexity results presented in this section will not be affected.
5.4. Proof of correctness
Lemma 5

Let 
 be an instance of GR with . Let 
 be the DFA system as constructed in Section 5.3. Then 
 is reachable from 
 in G if and only if 
 in 
.

Proof

Let 
 (respectively, 
) denote the set of all 
 paths in G (respectively, 
). Let q denote the path 
 in 
. Then, 
. Similarly, for each 
. By construction of 
, 
. Hence, in 
, 
 
 and we have 
 if and only if 
. □

Theorem 3

MOP is -complete.

Proof

MOP is in  by Lemma 4. We argue that the reduction in Section 5.3 is log space computable.

Consider a log space transducer with a read-only input tape, write-once output tape and log space work tape [6, Def. 8.21 on p. 324] that takes as input an instance of GR and constructs an instance of MOP. The transducer first lists the vertex set of 
. This requires only listing an additional vertex other than the vertices of the input graph, and requires no larger than logarithmic space to iterate over all the vertices of the input graph. Similarly, to list edges of 
 includes only two additional edges than those in G, and the transducer can iterate over the edges of G, using logarithmic space.

Next, the transducer writes a description of the semilattice  and F on the output tape. Since the size of the semilattice and F are independent of the input, this step requires only constant space. Next, the transducer lists down the functions in M associated with each vertex in 
. Since each function in M belongs to the set F, the transducer just needs to write down the index of the function within set F. Since set F is of constant size, the index of each function will require constant space. So the transducer can go over all the vertices, using logarithmic space, and write down the index (within F) of the function associated with each vertex. Thus, we conclude that the reduction is log space computable.

Hence, MOP is -complete. □

Corollary 4

MOP is -complete even when the data flow framework is non-monotone and the flow graphs contains no directed cycles.

Proof

The reduction in Section 5.1 does not assume monotonicity of the data flow framework. Hence MOP is in  for non-monotone data flow frameworks as well. Since GR is -complete even for directed acyclic graphs ([7, see proof of Thm. 16.3 on p. 398]), and the reduction of Section 5.3 transforms an instance of GR without directed cycles into a flow graph without directed cycles, -completeness follows. □