Abstract
Although it has been claimed in two different papers that the maximum cardinality cut problem is polynomial-time solvable for proper interval graphs, both of them turned out to be erroneous. In this work we consider the parameterized complexity of this problem. We show that the maximum cardinality cut problem in proper/unit interval graphs is FPT when parameterized by the maximum number of non-empty bubbles in a column of its bubble model. We then generalize this result to a more general graph class by defining new parameters related to the well-known clique-width parameter.

Specifically, we define an (α,β,δ)-clique-width decomposition of a graph as a clique-width decomposition in which at each step the following invariant is preserved: after discarding at most δ labels, a) every label consists of at most β sets of twin vertices, and b) all the labels together induce a graph with independence number at most α. We show that for every two constants α,δ>0 the problem is FPT when parameterized by β plus the smallest width of an (α,β,δ)-clique-width decomposition.

Keywords
Maximum cut
Proper interval graph
Clique decomposition
Clique-width
Bubble model

1. Introduction
Maximum Cardinality Cut: A cut of a graph  is a partition of  into two subsets 
 where 
. The cut-set of 
 is the set of edges of G having exactly one endpoint in S. The maximum cardinality cut problem (

Image 1
) is to find a cut with a maximum size cut-set, of a given graph.
Image 1
remains
Image 2
when restricted to the following graph classes: chordal graphs, undirected path graphs, split graphs, tripartite graphs, co-bipartite graphs [2], unit disk graphs [7] and total graphs [15]. On the positive side, it was shown that
Image 1
can be solved in polynomial-time in planar graphs [16], in line graphs [15], in graphs with bounded clique-width [12], and the class of graphs factorable to bounded treewidth graphs [2]. None of these results applies to proper interval graphs. As for the parameterized complexity of the problem in general graphs,
Image 1
when parameterized by the clique-width of the input graph is not in  unless the Exponential Time Hypothesis () collapses [12].
Maximum Cardinality Cut in Proper Interval Graphs: Polynomial-time algorithms for some subclasses of proper interval graphs (also known as indifference graphs) are proposed in [1] and in [11], for split indifference graphs and co-bipartite chain graphs (a.k.a. co-chain graphs), respectively. A polynomial-time algorithm for proper interval graphs is proposed in [3]. However, as pointed out in [1] this algorithm contains a flaw and may return sub-optimal solutions. A polynomial-time algorithm for proper interval graphs was also proposed by the authors of this work [5]. However, this algorithm too, is flawed as explained in detail in [18]. Consequently, the question of whether

Image 1
can be solved in polynomial time for proper interval graphs is open.
Bubble Model and Clique-width: In [17] the authors introduce the bubble model of proper interval graphs which is a partition of the vertices into a rectangular array of bubbles. Recently the bubble model is generalized to mixed unit interval graphs and a sub-exponential exact algorithm is given for this graph class [18].

Proper interval graphs have unbounded clique-width. Specifically, the authors of [14] show that the clique-width of a specific interval graph 
 whose bubble model has n rows and n columns is at least n. On the other hand, the clique-width of a mixed unit interval graph (and therefore of a unit interval graph) is upper bounded by the number of rows and also by the number of columns of its bubble model (up to a small constant term) [17], [18]. An upper bound of 
 is proven in [19] for 
-free proper interval graphs. The work [20] considers proper interval graphs with specific bubble models and presents an efficient algorithm to compute the clique-width of proper interval graphs of this type.

Our Contribution: In this work we consider the parameterized complexity of

Image 1
when the parameter is the width of a clique-width decomposition of the input graph, having certain properties. Since, as mentioned before, the problem is unlikely to be in  in general [12], in order to find  algorithms, we confine ourselves to clique-width decompositions having certain properties. The bubble model of proper interval graphs and the extended bubble model of mixed unit interval graphs lead to such clique-width decompositions for these families of graphs.
We introduce new parameters of clique-width decompositions. Specifically, we define a -clique-width decomposition of a graph as a clique-width decomposition in which at each step the following invariant is preserved: after discarding at most δ labels, a) every label consists of at most β sets of twin vertices, and b) all the labels together induce a graph with independence number at most α.

We present  algorithms for

Image 1
when parameterized by the width of the decomposition in which these parameters are bounded by a constant. Since mixed unit interval graphs have decompositions in which these parameters are bounded by constants and the width of these decompositions are equal (up to a small constant term) to the number of non-empty rows in a column, this result implies an  algorithm for
Image 1
in mixed unit interval graphs when the parameter is the number of non-empty rows in a column of the bubble model. This parameter is in turn equal to (again, up to a small constant term) to the clique size of the corresponding twin-free graph [17], [18].
In Section 3 we introduce the notion of bubble partitions. We characterize bubble partitions by two parameters, namely their independence number α and their width. This notion generalizes the two dimensional bubble model of proper interval and mixed unit interval graphs. The parts of the bubble partition of a mixed unit interval graph correspond to the columns of its two dimensional bubble model. Since every column in the bubble model is a clique, a mixed unit interval graph has a bubble partition with independence number 1. Moreover, such a partition can be found in polynomial time [17], [18]. We show in Theorem 4 that for every fixed α there is an algorithm that computes a maximum cardinality cut of a graph G given with an α-bubble partition, (i.e., a bubble partition with independence number α). This algorithm runs in  time when the parameter is the width of the bubble decomposition. This implies an  algorithm for mixed unit interval graphs where the parameter is the number of non-empty bubbles in a column of its two dimensional bubble model.

In Section 4, we extend the scope of this  algorithm to a wider domain. In Theorem 6, we show that the  algorithm for

Image 1
when parameterized by clique-width presented in [12] runs in  time when parameterized by the smallest width of an -clique-width decomposition, denoted by 
 plus β. We also show (in Lemma 1) that a bubble partition with independence number α can be used to find an -clique-width decomposition of similar width. Therefore, in some sense, the main result of Section 4 generalizes the main result of Section 3. This result implies that a mixed unit interval graph has a clique-width decomposition in which at every step, discarding the vertices labeled zero, the graph has independence number two and every label consists of a set of twins. In our terminology, this is a -clique-width decomposition implying that the result applies to mixed unit interval graphs.
Denoting by 
 the class of graphs having a bubble partition with independence number α, we present structural results relating 
 to the classes of interval, mixed unit interval, chordal, co-bipartite and split graphs.

We conclude in Section 5 with several open questions about  algorithms for MaxCut and related parameters introduced in this paper, both in general and in specific graph classes.

2. Preliminaries
Graph notations and terms: Given a simple graph (i.e., with no loops or parallel edges)  and a vertex v of G, 
 denotes the set of neighbors of v in G. Two adjacent (resp. non-adjacent) vertices  of G are twins (resp. false twins) if 
. For a graph G and , we denote by  the subgraph of G induced by U, and 
. For a singleton  and a set Y, 
 and 
. We use  to denote the set of positive integers less than or equal to n. A vertex set  is a clique (resp. independent set) (of G) if every pair of vertices in U is adjacent (resp. non-adjacent). We denote by  the maximum size of an independent set of a graph G. We refer the reader to [8] for general notation and terminology regarding graphs.

Some graph classes: A graph is chordal if it does not contain holes, i.e., induced cycles of four or more vertices. It is known that a graph G is chordal if and only if it is the vertex-intersection graph of subtrees of a tree, i.e., there exists a tree T and subtrees 
 of it such that 
 and 
 are adjacent in G if and only if 
 and 
 have a common vertex [13]. A graph G is interval if it is the intersection graph of intervals on a straight line. The subtree intersection characterization of chordal graphs implies that interval graphs are chordal. An interval graph is proper (resp. unit) if it has an interval representation such that no interval properly contains another (resp. every interval has unit length). It is known that the class of proper interval graphs is equivalent to the class of unit interval graphs [4]. However, if one is allowed to use a mixture of open and closed unit intervals in the representation, richer families of graphs are obtained. This can be easily demonstrated by the set  of unit intervals that represent a claw which is not a proper interval graph. The most general such family is the family of mixed unit interval graphs of the intersection graphs of unit intervals where each interval can be open, closed, or open at one end and closed at the other.

Cuts: We denote a cut of a graph G by one of the subsets of the partition. 
 denotes the cut-set of S, i.e. the set of the edges of G with exactly one endpoint in S, and 
 is termed the cut size of S. A maximum cut of G is one having the biggest cut size among all cuts of G. We refer to this size as the maximum cut size of G. Clearly, S and 
 are dual; we thus can replace S by 
 and 
 by S everywhere. In particular, 
, and 
.

Parameterized Complexity: A parameterized problem is a decision problem each instance of which is a pair  where k is a number that is termed the parameter of the instance. An algorithm that decides a parameterized problem Π is an  (resp. ) algorithm if its running time is bounded by 
 (resp. 
) for some computable functions  and some constant c. The class FPT (resp. XP) is the class of all parameterized problems for which an FPT (resp. XP) algorithm exists. Clearly, . A parameterized problem that is in FPT is termed fixed-parameter tractable. The notation 
⁎
 is used to omit polynomial factors. For instance, for an  algorithm of time complexity 
 for some constant c, we omit the polynomial factor of 
 and say that the time complexity of the algorithm is 
⁎
. We refer the reader to [10], [6] for basic background on parameterized complexity.

Bubble models: A 2-dimensional bubbles model  for a finite non-empty set A is a 2-dimensional arrangement of bubbles 
 for some positive integers 
, such that  is a near-partition of A. That is,  and the sets 
 are pairwise disjoint, allowing for the possibility of 
 for arbitrarily many pairs . For an element  we denote by  and  the unique indices such that 
. Given a bubble model , the graph  has  as its vertex set. Two vertices  are adjacent (in ) if and only if  or,  and . We say that  is a bubble model for . Observe that every bubble  is a set of twins. A compact representation for a bubble model is an array of columns each of which contains a list of non-empty bubbles given by their row numbers and their vertices.

Theorem 1

[17] A graph is proper interval if and only if it has a bubble model. Moreover, a compact representation of a bubble model for a proper interval graph can be computed in linear time.

Recently the bubble model is extended to a model for mixed unit interval graphs [18]. An extended bubble model corresponds to a bubble model of a proper interval graph. In this model the bubbles are arranged in a rectangular grid. At every point of the grid, instead of one bubble there are four bubbles 
 termed quadrants where i and j are the row and column numbers, respectively. Every quadrant contains interval of one type (open at both ends, closed at both ends, and so on). Let G be a mixed-unit interval graph given with an extended bubble model. Consider the bubble model obtained by combining every set of quadrants into a bubble. Let 
 be the unit interval graph defined by this bubble model. Two vertices  are adjacent in G if and only if they are either adjacent in 
 or they are in adjacent columns and same row ( and ) and they belong to the appropriate quadrants, i.e., u is in one of the left-closed quadrants and v is in one of the right-closed quadrants. In other words, 
 is the intersection graph of the same set of unit intervals except that all endpoints are open.

Theorem 2

[18] A graph is mixed unit interval if and only if it has an extended bubble model. Moreover, a compact representation of an extended bubble model for a mixed unit interval graph can be computed in linear time.

We denote by  the maximum number of non-empty bubbles in a column of the bubble model (resp. extended bubble model)  of a proper (resp. mixed unit) interval graph G.

In this work, we use the term bubble as a maximal set of twins and extend the scope of this definition to general graphs, not restricted to proper interval or mixed unit interval graphs. Whenever an ambiguity arises, we use the adjective 2-dimensional for the bubble model of a proper interval graph.

Clique-width: The clique-width of a graph G is the minimum number of labels needed to construct G by using the following four operations defined on vertex-labeled graphs:

1.
The operation  returns a graph with one vertex v labeled ℓ.

2.
The disjoint union 
 of two vertex-disjoint labeled graphs G and 
 is the graph 
 and every vertex in 
 preserves its original label.

3.
The graph 
 is obtained from the graph G by connecting all the vertices labeled i with all the vertices labeled j.

4.
The graph 
 is obtained from the graph G by replacing all labels i with j.

A clique-width decomposition of a graph is a rooted binary tree that represents an expression involving the above four operations. The graph 
 corresponding to a node t of T is the value of the expression represented by the subtree of T rooted at t. Let  be the set of labels used by T. The width  of a decomposition T is the number  of labels it uses. The clique-width  of an (unlabeled) graph G is the smallest width of an expression whose value is G (with some labeling function). For a label , we denote by 
 the set of vertices labeled ℓ and by 
 the set of vertices of 
 labeled ℓ. We denote by 
 the partition 
 of 
.

Decomposition by clique separators: The concept of decomposition by clique separators is introduced by Tarjan [21]. If G is a connected graph and K a clique of G such that  is disconnected with connected components 
 then we decompose G into k subgraphs 
. By continuing recursively for every subgraph until a subgraph does not contain a clique separator, we obtain a decomposition of G. This decomposition can be modeled by a tree T where an internal node of T represents a clique of G and the leaves of T represent subgraphs of G termed atoms that do not contain clique separators. Given any graph, such a decomposition can be found in polynomial-time.

3. Bubble partitions
Following the definition of 2-dimensional bubble representations of proper interval graphs, we term bubble a maximal set of twins. Given a graph G, we denote by 
 the graph obtained by contracting every bubble of G to a single vertex. Two bubbles of G are adjacent (resp. non-adjacent) if the corresponding vertices in 
 are adjacent (resp. non-adjacent).

A bubble partition of a graph G is a partition 
 of  such that every 
 is a union of bubbles and the graph obtained from G by contracting every set 
 to a single vertex is a tree . Note that a bubble partition 
 of G corresponds to a partition 
 of 
.

A bubble partition always exists, since  is a partition whose contraction results in a (trivial) tree. The independence number  of a bubble partition  is 
, and the width  of  is 
, the largest number of bubbles in a set of . A bubble partition  with  is termed an α-bubble partition. The α-bubble width 
 of G is the smallest width of an α-bubble partition (and ∞ if no such partition exists).

Given a cut S, a set U of (false or true) twin vertices and an integer  we denote by  the cut obtained by adding ℓ vertices of U to S if  and by removing  vertices of U from S otherwise.

Observation 1

Let U be an independent set of pairwise (false) twin vertices of a graph G, and S a cut of G. Then where 
 is the marginal contribution of U to S (see Fig. 1).

Fig. 1
Download : Download high-res image (67KB)
Download : Download full-size image
Fig. 1. The cut S contains a vertices of U and c vertices of N(U). The number of edges of G[N(U)] separated by S is x. Then the number of edges of G[N[U]] separated by S is a ⋅ d + b ⋅ c + x. The cut S′ on the right side is obtained from S by adding ℓ vertices of U. The number of edges of G[N[U]] separated by S′ is (a + ℓ)⋅d + (b − ℓ)⋅c + x. Then cs(S′)−cs(S)=ℓ(d − c).

Given two adjacent bubbles 
 and a cut S of a graph G, we denote by 
 the cut obtained from S by adding to it ℓ vertices of  and removing from it ℓ vertices of 
, provided that 
. Note that 
 is a clique. Since the number of edges of 
 in this clique is not affected by this operation, applying Observation 1 twice, we get the following.

Observation 2


Two sets A and B are crossing (or A crosses B and vice versa) if their intersection is non-empty and none of them is a subset of the other. A cut S of a graph G is tight if the set of bubbles of G crossed by S corresponds to an independent set of 
. Note that (since a singleton cannot be crossed) if G is twin-free then every cut is of G is tight.

Theorem 3

Every graph has a maximum cut that is also tight.

Proof

Suppose that the statement does not hold. Let S be a maximum cut of G that is not tight, such that the number of bubbles that S crosses is smallest possible. Then S crosses at least two adjacent bubbles 
 of G. We recall that each bubble consists of twin vertices. Therefore, 
 is a clique of G. By Observation 2, at least one of 
 and 
 is non-negative for every feasible . In the sequel we assume that 
 with the other case being symmetric. Let 
, and note that . Then 
 is a maximum cut that does not cross at least one of B and 
. Since the intersection of S with other bubbles is not affected, the number of bubbles that S crosses is reduced by one, contradicting the way S is chosen. □

Consult Fig. 2 for this definition. Let U be a union of bubbles. A configuration of U for some tight cut S is an encoding  of , defined as follows.  is a triple 
 where  is a (possibly empty) independent set of 
 that indicates the set of bubbles of U that S crosses, s is a vector of (non-negative) integers indexed by the elements of  and 
 is a subset of 
. For a bubble  corresponding to a vertex of , the number 
 indicates the number of vertices of B in S. The set 
 indicates the set of bubbles that are completely in S. Therefore, in the sequel we denote  also as , interchangeably. We also denote .

Fig. 2
Download : Download high-res image (64KB)
Download : Download full-size image
Fig. 2. A tight cut S and a set U of bubbles. The white parts of the bubbles depict the set of vertices in S and the black parts depict the set of vertices not in S. The set  is the set of bubbles of U crossed by S. The corresponding configuration is 
 where S contains five positive integers each of which corresponds to a bubble in  and denotes the number of vertices of S in the corresponding bubble (i.e., the size of the white part of the bubble). The last part of the configuration, i.e., 
 is the set of white bubbles on the right side, i.e., the set of bubbles of that are completely contained in S.

The first entry of  can be chosen in at most 
 
 different ways. The second entry can be chosen in at most 
 different ways, and the last entry can be chosen in at most 
 ways. Therefore,

Theorem 4

Given a bubble partition  of a graph G, a maximum cut of G can be computed in time 
⁎
.

Proof

Consider the tree  of the bubble partition  with an arbitrarily chosen root r. We denote by  the set of children of a node t in T, and 
 is the set of  from the contraction of which t is obtained. Let 
 be the subtree of T induced by t and all of its descendants. Accordingly, 
 denotes the subgraph of G induced by all the vertices of G represented by the nodes of 
. We process the nodes of T from the bottom to the top and compute a set of best cuts of 
, namely one cut for each possible configuration of 
. We terminate after the root r is processed, and choose a configuration in 
 leading to a maximum cut of G.

For a node t of T and a configuration 
, we denote by 
 the maximum size of a (tight) cut 
 of 
 such that 
 encodes 
, i.e.,
 By Theorem 3, the maximum cut size of G is 
. In the sequel we show how to compute the values 
 from the values 
 of the children 
 of t.

Let 
 be a tight cut of 
, and for 
, let 
 denote the cut induced by 
 on 
. Denote by 
 the set of edges between 
 and 
 that are separated by 
, i.e. 
. Since the vertices of 
 are adjacent (in 
) only to vertices of 
, we have
 
 We fix a node t of T and a configuration 
. By definition, we have
 
 
 We now observe that the terms of the summation corresponding to two children 
 and 
 of t depend only on the cuts 
 and 
 induced by 
 and on 
 which is fixed. Therefore, the individual terms can be maximized independently, i.e.,(1)
 
 For every 
 we partition the set of cuts according to the configurations of 
 to get 
 
  
 
 
  
 
 
 
 
 
 
 and substitute in (1)
  
 
 Clearly, 
 can be computed in time  and 
 can be computed in time
⁎
 
⁎
 
⁎
 For every node t, we compute 
⁎
 values 
. Therefore, the running time of the algorithm is 
⁎
. □

Denoting by 
 the class of graphs G such that 
, we formulate the following corollary of Theorem 4.

Corollary 1

For every , there is an  algorithm for

Image 3
for 
 when parameterized by 
 provided that a bubble partition  of width 
 can be found in time 
⁎
 for some computable function f.
Recall that  denotes the maximum number of non-empty bubbles in a column of the 2-dimensional bubble model  of a proper (or mixed unit) interval graph G.

Corollary 2

There is an  algorithm for

Image 3
in mixed unit interval graphs when parameterized by . Moreover, 
 whenever G is a mixed unit interval graph.
Proof

Let G be a mixed unit interval graph. The 2-dimensional bubble-representation  of G can be computed in polynomial time [18]. Let 
 be a column of , i.e., 
, and consider the partition 
. Every set 
 is a clique and also a union of bubbles. Moreover, the graph obtained from the contraction of every 
 to a single vertex is a path. Therefore,  is a bubble partition with  and . By Theorem 4, there is an algorithm for

Image 1
that runs in time 
⁎
⁎
. □
We conclude this section by relating 
 to some known graph classes. By the proof of Corollary 2, 
 contains the class of mixed unit interval graphs. It is easy to see that 
 contains also the classes of split graphs and co-bipartite graphs. Therefore, we have the following.

Observation 3

.

Clearly, 
 if and only if G has a bubble partition where each set is a clique. At first glance, such a bubble partition seems to be a special case of decomposition by clique separators. A result of Dirac [9] implies that a graph is chordal if and only if it has a decomposition by clique separators the atoms of which are cliques. Given these facts it is natural to investigate the relationship between the class 
 and the class of chordal graphs.

Theorem 5

 crosses both classes of chordal and interval graphs.

Proof

Since every clique is both chordal, interval and 
, the intersection of these classes is non-empty. Moreover, a 
 (being co-bipartite) is in 
 but not chordal. It is now sufficient to show that there is an interval graph which is not 
.

Consider the graph G on 8 vertices obtained by adding a universal vertex 
 to a path P on 7 vertices 
 where the vertices are numbered according to their order on P. It is trivial to construct an interval representation for G. We claim that 
. Assume for a contradiction that 
, and let 
 be a bubble partition of G such that 
 for , i.e., every 
 is a clique. Note that each bubble consists of a single vertex as G is twin-free. Assume without loss of generality that 
. Then, the node 0 of  corresponding to 
 is adjacent to every other node. In other words,  is a star with center 0 and leaves . Since every 
 is a clique, 
 contains at most two vertices of P (in addition to 
). Then 
 has at least 5 vertices and at most two connected components, implying that 
 has a connected component with at least three vertices. This yields two adjacent nodes in , contradicting that  is a star with center 0. □

4. Clique-width decompositions
It is shown in [12] that a)

Image 1
problem can be solved in polynomial time for graphs with bounded clique-width, and b) an  algorithm for
Image 1
when parameterized by the clique-width of the input graph is impossible under the . In this section, we consider clique-width decompositions with special properties, and the behavior of the
Image 1
algorithm under such decompositions. We show that these decompositions in some sense extend bubble partitions. Specifically, we construct a clique-width decomposition the width of which is a constant factor away of the width of a given bubble partition.
We start with properties of clique-width decompositions that we will assume without loss of generality. Let r be the root of a clique-width decomposition T of G (i.e., 
), t be a node of T with parent 
.

•
If 
 is a union node then 
 is an induced subgraph of G. Indeed, if this is not the case, there are pairs of sets 
 such that the vertices of 
 and 
 are adjacent in G but not adjacent in 
. Then, we can insert an 
 node between t and 
 for every such pair 
. This modification does not affect the width of the decomposition.

•
If two vertices  are twins in G and 
, then 
. Moreover, u and v have the same label ℓ in 
. If this is not the case, we can remove from T the node 
 (and every parent node with one child), and replace the expression  by the expression 
. Therefore,

•
 are non-crossing sets, and for every t and ℓ, 
 is a partition of 
 each set of which does not cross bubbles.

•
 are twins in G if and only if they are twins in 
 and they have the same label in 
.

•
If a cut S is tight then the cut 
 that S induces on 
 is tight.

A clique-width decomposition T is an -clique-width decomposition if for every node t of T, there exists a set 
 of at most δ labels such that

•
the independence number of 
 is at most α, and

•
the number of bubbles 
 of 
 is at most β whenever 
.

We now analyze the running time of the algorithm in [12] that solves

Image 1
when provided with an -clique-width decomposition T of the input graph G. The algorithm presented in [12] is based on the following observation. For every graph 
 and every label ℓ the vertices of 
 are identical with respect to vertices not in 
, i.e., every vertex of 
 is either adjacent to every vertex of 
 or not adjacent to any of them. Therefore, two cuts S and 
 of G that differ only on the vertices of 
 and 
 for every label ℓ have the same number of edges in 
. For every node t of T and every vector 
 such that 
 for every  the algorithm computes the maximum cut size among all cuts S such that 
. The running time of the algorithm is dominated by the computation at union nodes in which, in order to compute the result for a vector 
 of a parent node 
, the algorithm considers all the vectors of s of one of the children and for each such vector, the vector 
 for the other child. Since the number of vectors s is bounded by 
 it follows that the running time of the algorithm is 
.
We now improve this upper bound using the above observations. Let S be a tight maximum cut of G. Then the cut 
 that S induces on 
 is also tight, for every node t of T. Therefore, it suffices to consider only cuts that are tight in 
. More precisely, it is sufficient to compute the results only for vectors that result from a tight cut.

To guess a tight cut 
 we first guess an independent set  of 
 in one of the at most 
 ways. Then, for every bubble B that intersects , we guess the number of vertices in 
. This can be done in at most 
 different ways. For every bubble that is a) not labeled with a label from 
, and b) does not intersect  we guess whether or not it is contained in 
. This can be done in at most 
 ways. Finally, we guess the number of vertices of 
 for every label 
. This can be done in at most 
 ways. We conclude that the number of vectors s to consider is at most

Let 
 be the smallest width of an -clique-width decomposition of G (and ∞ if no such decomposition exists). We conclude that for every two constants  the running time of the algorithm is 
⁎
.

Theorem 6

The

Image 3
problem when parameterized by 
 is in  for every two constants .
We now note that bubbles can be computed efficiently using, for instance, modular decomposition. As already observed, clique-width decompositions can be modified so that twins appear together all the way in the decomposition. Moreover, such a modification does not affect the width of the decomposition. Therefore, for any given clique-width decomposition, the modified algorithm performs at least as good as the original algorithm presented in [12]. When the graph is twin-free or it contains only a small number of twins, both algorithms coincide and their performance depends only on the given clique-width decomposition.

By definition, we have 
. The inequality being in the “wrong” direction, it does not allow to deduce an  algorithm for MaxCut when parameterized by the clique-width of the graph, what would contradict the impossibility result of [12]. Furthermore, this impossibility result forbids the existence of a computable function f such that 
 for every graph G. On the positive size, our result implies an  algorithm when the parameter is the clique-width exists for every graph class that admits such a function. Indeed, assume that some graph class  admits such a function 
 for two constants . Then, by Theorem 6, there is an algorithm that solves the problem in time 
⁎
⁎
 for every .

We now present the following lemma which implies that Theorem 6 in fact extends Theorem 4.

Lemma 1

Given a bubble partition  of a graph G, one can find an -clique-width decomposition of G of width  in polynomial time. In particular,

Proof

We present an algorithm to construct a -clique-width decomposition from a given a bubble decomposition . In this proof we refer to the constructed clique-width decomposition and its parts as expressions. Therefore, whenever trees and nodes are mentioned they refer to the bubble decomposition tree and its nodes. We process the tree of the bubble decomposition  in a bottom-up manner and for every node of the bubble decomposition we construct a clique-width decomposition of the subgraph of G induced by the vertices of the subtree rooted at that node. During this processing, we use a new set of labels for the bubbles of the current node (one label per bubble) and process one child node at a time. For every child we construct the edges connecting it to its parent node and labeled all its vertices with a special label 0 that is never used to construct edges. This leads to a clique-decomposition that uses at most  labels and the independence number of which is at most twice the independence number of .

We now proceed with notation used in the formal description of the process. Let  rooted at an arbitrary node r, , . For every node t of T, let 
 be the subgraph of G induced by the set of vertices that are in the subtree of T rooted at t. Let 
, 
 two disjoint label sets. For every node t of T, we construct an expression that satisfies the following conditions:

•
it uses only labels from 
,

•
its value is 
 labeled with labels from ,

•
 for every label 
 (in other words, for every label except the special label 0), and

•
.

These conditions imply that the expression for 
 (and in particular for 
) is an  clique-width decomposition of G of width at most 
.
Let  be the expression 
 whose value is a k-clique with every vertex labeled by ℓ. For a set X of pairs of labels, we denote by 
 a path consisting of nodes 
, one for every pair 
. If  for two disjoint sets  we denote by 
 a path of 
 nodes, one for every pair . Note that 
 operations are commutative and the operations 
, 
 are commutative if 
, i.e. the above definitions are non-ambiguous. In particular, we denote by 
 the operation of relabeling all nodes labeled 
 with 
 for every  and by 
 the operation of relabeling all nodes labeled 
 with 0 for every .

We now describe the construction of the expression for the node t. If t is a leaf of T the graph 
 is the subgraph of G induced by the vertices of 
. We have 
 and 
, i.e. 
 is a union of at most w bubbles. Let 
 be the number of vertices in bubble i. Let 
 be the edge set of 
. Then the value of 
 is 
 and it satisfies all the conditions above.

If t is an internal node of T with children 
, let 
 be the expressions for 
 each of which satisfies the conditions. We first construct an expression for 
 in the same way as it is done for a leaf. Then we iterate over all the children of t and for every child 
 of t we

•
relabel all the labels  of 
 by 
,

•
take the disjoint union with 
,

•
add the edges between 
 and 
, and

•
relabel all the labels 
 by 0.

Again, it is an easy task to check that all the conditions above are satisfied.
We finish our proof by giving a formal description of the expression corresponding to an internal node t. For 
 we construct an expression 
 whose value is the subgraph of 
 induced by the vertices 
 and all the vertices in the subtrees of 
 where vertices of 
 are labeled with labels from  and the rest are labeled 0. Then, the expression 
 is an expression for 
. The expression 
 is 
 where 
 is the number of vertices in bubble i of 
. For 
, let 
 be such that 
 if and only if there is an edge between vertices labeled i in 
 and vertices labeled j in 
. Then 
. □

Combining Lemma 1 with Corollary 2 we get the following corollary.

Corollary 3

A -clique-width decomposition of width  can be computed in polynomial-time whenever G is a mixed unit interval graph.

We note that result in Corollary 3 is not optimal. Using the nested neighborhood structure of the adjacent columns, one can construct a -clique-width decomposition of width  of an interval graph or mixed-unit interval graph [17], [18].

5. Conclusion and future work
Discussion of the results: In this work, we introduced bubble partitions of graphs and new parameters for clique-width decompositions that we denote by  and δ. Our results imply that the existing  algorithm for

Image 1
parameterized by clique-width presented in [12] can be modified to run in  time for the parameter  for every two constants . We have shown that bubble partitions with bounded width and independence number can be used to find a clique-width decomposition with bounded values of  and δ. It is known that for mixed unit interval graphs such bubble partitions can be found in polynomial time [17], [18].
Our results make use of the concept of tight cuts. We show that tight cuts have the following property: any set of distinct representatives of the sets of twins that are crossed by such a cut constitutes an independent set. Moreover, every graph has a maximum cut that is also tight. Since a singleton cannot be crossed, the above mentioned independent set is empty whenever the graph is twin-free. For the same reason, i.e., since a cut cannot cross a singleton, the part of our algorithm that guesses an independent set can be modified to discard vertices without twins. In other words, the modified algorithm will exhaustively search independent sets of non-singleton bubbles. In the extreme case where the graph is twin-free, there is no need to guess an independent set because the only relevant independent set is the empty set.

Possible Extensions and Open Problems: Our work can be extended in the following directions. The dynamic programming algorithm for bubble partitions can be extended to cases where the partition induces a graph with small tree-width instead of a tree. One can extend the “look-ahead” for bubbles, to structures that can be decomposed into a small number of modules. One can study the time complexity of constructing a bubble partition  having particular  parameters. Such a study may also be confined to specific graph classes. It would be also interesting to use such partitions when dealing with problems other than

Image 1
.
A bubble partition with independence number 1 for unit interval graphs and mixed unit interval graphs easily follows from [17] and [18]. The complexity of computing 
 in general, or for specific graph classes is a research problem that was out of the scope of this work.

It is known that an  algorithm for

Image 1
when parameterized by clique-width is unlikely for general graphs [12]. The existence of such an algorithm for proper interval graphs is an open question. Though, our algorithm is such one for a subclass of proper interval graphs. Namely, this is the family of graphs 
 whose two dimensional bubble model has more columns than rows and does not contain empty bubbles. Indeed, if 
 and , we have  where the last inequality is by [14].
There seems to be a close relation between bubble partitions with independence number 1 and decomposition by clique separators whose atoms are cliques. The latter is known to coincide with the class of chordal graphs. On the other hand, we have shown that the former class neither includes nor is included in the class of chordal graphs. The characterization of chordal graphs (and interval graphs) that admit a bubble partition with independence number 1 is an interesting research question too.