Abstract
Scorpion is a puzzle game that falls under the category of Solitaires. The problem of determining whether a starting configuration of a Solitaire game (generalized to contain an arbitrary number of cards) can lead to a winning configuration has been studied from the perspective of Computational Complexity for some of the most popular Solitaires, namely Free Cell [1], Klondike [2] and Spider [3], all resulting in hardness proofs. Scorpion, though, has a unique twist compared to the aforementioned ones: each card can be moved to cover only one other card. This property narrows the set of possible moves and makes a worthwhile issue investigating whether the same problem proved NP-complete for Free Cell, Klondike and Spider falls in P as far as Scorpion is considered. In this paper we prove that the problem of deciding whether an n-card s-suits initial configuration of Scorpion allows for a winning sequence of moves is NP-complete for any , and it remains so also when the initial configuration contains no face down (locked) cards and under a constant ratio constraint between deck size and tableau size. As a side effect of our results, we have also succeeded in negatively answering a question posed in [2], in that we prove that it is NP-complete to decide whether an n-card one red suit-one black suit configuration of the Klondike Solitaire allows for a winning sequence of moves.

Keywords
Card solitaires
Computational complexity

1. Introduction
Solitaire games are one-player games, or puzzles, which employ a deck of cards and a tableau of possible positions for the cards. The goal of the game is to achieve a winning configuration of the cards on the tableau by applying legitimate moves to an initial configuration. The possible decks, tableaus, moves, initial and winning configurations are determined by the rules of the particular type of Solitaire one intends to play. According to [5], solitaire games came into existence when fortune-telling with cards gained popularity in the eighteenth century. Many variations of solitaire exist today, among which we remind Klondike, Free Cell, Spider, and Scorpion.

In this paper, we consider the Scorpion Solitaire that we now introduce in its traditionally played version. The deck is composed of 52 cards, partitioned into 4 suits of 13 cards each (♡, ⋄, ♣ or ♠), ranging from rank 1 (Ace) to 13 (King). The setting consists of a tableau and a stock, with the tableau, in turn, consisting of 7 columns each of which may contain a stack of cards, and the stock being a special reserve set of cards. At the start of the game an initial layout is supplied, with 3 face down cards placed in the stock and 7 stacks of cards dealt in the tableau: the first 4 stacks contain 2 face down cards at the bottom and 5 face up cards on top, while the last 3 stacks consist of 7 face up cards (see Fig. 1). The goal of the game is to build 4 stacks of cards on the tableau, each of them containing 13 cards of the same suit arranged in descending order, with the King (rank 13) at the bottom and the Ace (rank 1) on top of each stack. The goal is pursued by performing a sequence of moves: a face up card x is allowed to be moved from the stack containing it to cover card y only if y is the top card of a different stack,  and . Hence, any non-King card x is allowed to perform one single move within the game, and has no choice about which move to perform. When a card x is moved, all the cards covering x are moved together as a unit, preserving their relative order (see Fig. 2). A face up King and all the cards covering it can be moved to any empty column slot on the tableau, which appears after a card located at the bottom of its own stack is moved. A face down card is turned up when it becomes the top card of its stack. At any point in the game, the player can deal the 3 cards in the stock on top of the stacks located in the 3 leftmost column slots on the tableau.

Fig. 1
Download : Download high-res image (101KB)
Download : Download full-size image
Fig. 1. Example of an initial Scorpion layout.

Fig. 2
Download : Download high-res image (76KB)
Download : Download full-size image
Fig. 2. Example of move of a non-King card.

We study the computational complexity of deciding, given an initial layout, if a sequence of moves exists achieving the goal. Needless to say, we shall consider generalized layouts, that is, layouts dealing with a deck of s suits with n cards each, with a tableau composed of k columns of arbitrary size in the initial arrangement and a stock with d cards in the initial arrangement (with ). Differently from the original game, we deal with a complete information game, that is, we have no face down cards. Instead, we may have face up locked cards: a locked card cannot be moved until it is unlocked by moving the card covering it; in particular, all cards in the stock will be considered locked. Our choice of dealing with complete information games is shared with the literature on this topic [1], [2], [3], [4].

The study of Solitaire card games from a computational complexity perspective is not a novel topic, where (as we remarked a few lines above) whenever we talk about a complexity result for a Solitaire game we implicitly refer to generalized versions employing decks of arbitrarily large size. The first major result about computational complexity in Solitaire games comes from a paper about Automated Planning domains used in AI planning competitions [1]. Among several results, the paper proves that planning a winning strategy for a Free Cell game is a hard problem; more precisely, the author shows, by a reduction from 3SAT, that it is NP-Complete to decide whether a winning strategy for Free Cell exists. The NP-Completeness proof in [3] for Spider also follows from a reduction from 3SAT.

The hardness proofs for the Scorpion Solitaire we present in this paper are also reductions from 3SAT. However, they require a substantially different approach to model the non deterministic nature of the choice of a truth assignment to the variables in a boolean formula: indeed, while a non deterministic behavior is intrinsic in the Free Cell (or Spider) playing rules, in that each (let's say, black) card may be covered by two (let's say, red) cards (for instance card  may be covered by both  and ), the Scorpion playing rules state that any (non-ace) card may be covered by exactly one other card (that is, card  may be covered only by ).

In [2] Klondike, one of the most popular Solitaires games (partly because of its presence in Microsoft Windows pre-installed games), gets thoroughly analyzed from a Computational Complexity perspective. The problem of solving the classical 4-suits version of the game is proved to be NP-Complete, again by a reduction from 3SAT (notice that Klondike rules share with Free Cell the “multiple coverings” feature). The paper then turns to analyze the complexity of many restricted versions of Klondike, achieving membership/hardness proofs to/for a variety of complexity classes. In particular, the one-black one-red suits version, is considered in [2] and proved to be in NP and at least NL-hard. The presence of just one red suit and just one black suit weakens the, let's say, intrinsic non deterministic behavior of the Solitaire playing rules: as noticed by the same authors in [2], the “cases of a red suit and a black suit are especially puzzling. We strongly suspect these cases to be in P, but could they possibly be hard for P? Are they in NL?”. Actually, In this paper, exploiting its similarities with Scorpion (in its forbidding the “multiple coverings” feature), we prove that such one-black one-red suits version of Klondike is NP-complete, so strengthening the result in [2] and negatively answering the question posed therein.

After having provided the needed formal definitions in Section 2, in Section 3 we prove the NP-completeness of deciding if a winning strategy for a 4-suits Scorpion game exists even when the initial setting has an empty stock. In Section 4, we strengthen our result by proving that the problem remains NP-complete for 1-suit games with the initial setting not containing locked cards. Then, in Section 6, we exploit the results in Section 4 to prove the NP-completeness of the one-black one-red suits version of Klondike.

We observe that the Scorpion solitaire definition (as well as that of most of the card solitaires) relies on a large number of, let's say, parameters: the size of the stock, the number of locked cards, the number of suits, the size of the deck (that is, the number of cards per suit) and the number of columns in the tableau. However, throughout Sections 3 and 4 we have shown that most of such parameters play no role as to the hardness of the problem, which in fact seems to depend on the sizes of the (1-suit) deck and of the tableau only (besides, needless to say, on the arrangement of the cards in the tableau). In Section 5 we move a further step towards the understanding of the ultimate characteristic making the Scorpion solitaire a hard problem. Indeed, we prove that it remains NP-complete even when each column contains at most a constant number of cards (specifically, when each column contains 8 cards) and, hence, the size of the tableau is the parameter that really matters as to the hardness of the problem.

The content of Section 5 is the starting point of a discussion that, in Section 7, will allow us to introduce some related open problems, while drawing our conclusions.

2. Preliminaries
Let  and ; a deck of cards is a set .1 A Scorpion layout 
 for a deck of cards D is an arrangement of the cards in D into k columns 
 and a stock S. The stock is a sequence 
 of  cards. Each column consists of a pair of (possibly empty) stacks: the locked cards stack and the unlocked cards stack. Let 
 be the (non-empty) unlocked cards stack in some column:

•
for any  such that , the sequence of cards 
 is called a subcolumn starting at 
 and ending at 
 (notice that a subcolumn may also contain a single card); in particular, if , 
 is called an uppermost subcolumn starting at 
,

•
card 
 is the base of the column,

•
card 
 is the top of the column,

•
and, for , card 
 covers card 
.

A Scorpion game is a sequence 
 of Scorpion layouts such that, for any , the transition from 
 to 
 occurs according to one of the (mutually exclusive) rules described in the following.

1)
 has a non-empty stock and 
 is derived from 
 by moving all cards in the stock: for , the hth card in the stock in 
 becomes the (unlocked) top card of column h in 
 and the stock of 
 is empty.

2)
In 
 card  is the top card of column ℓ,  is unlocked and contained in column 
, and 
 is derived from 
 by moving card  to cover card : the whole uppermost subcolumn starting at  is moved to column ℓ so that the top card of column 
 in 
 is the top card of column ℓ in 
. If  covers card 
 in 
, then 
 is the top card of column 
 in 
 while, if  is the base card of column 
 in 
, column 
 is empty in 
.

3)
In 
 column ℓ is empty and an unlocked card  is contained in column 
, and 
 is derived from 
 by moving to column ℓ the uppermost subcolumn starting at  of column 
: in 
 the base of column ℓ is , the top card of column ℓ is the top card of column 
 in 
, and similarly as in the previous case as to the top of column 
.

A winning Scorpion layout is a Scorpion layout L such that in L exactly s columns are non empty, the base of each of them is a (different) card , with , and, for any  and , card  covers card .

A winning Scorpion game starting at 
 is a Scorpion game 
 such that 
 is a winning Scorpion layout.

Given a deck D of cards and a Scorpion layout 
, the Scorpion Winning Game problem (in short, SWG) consists in deciding if there exists a winning Scorpion game starting at 
.

Since most of the proofs provided in this paper come from reductions from the 3SAT problem, we shortly recall it here. An instance of 3SAT is a pair  such that 
 is a set of boolean variables and 
 is a set of clauses over X each containing exactly three literals (each literal, in turn, being a variable in X or its negation). We write 
 for the ith literal in 
 (), and, with a slight abuse of notation, we write 
 (
) if 
 (respectively, 
) is a literal in 
.

3. Computational complexity of the classical Scorpion Solitaire
Our first step to the study of the computational complexity of SWG is the proof of its membership to NP. To this aim, we claim that, for any Scorpion layout 
, if there exists a winning Scorpion game starting at 
 then there also exists a winning Scorpion game 
 
 
 with . Indeed, since any card  such that  may be moved at most once (that is, once it covers card  it can be no longer moved), then a winning Scorpion game consists of at most one transition occurring according to rule 1), at most  transitions occurring according to rule 2), at most s transitions occurring according to rule 3) each of which places a different card  as the base of a column (for any ), and a set of transitions still occurring according to rule 3) each of which moves some card  from the base of a column to another. At most  moves in the last set are meaningful as to compose a winning game: they are those pairs of moves such that one move frees one of the first  columns and the other move possibly shifts to it another column having as its base some  and as its top an appropriate card to be covered by a card in the stock.

Hence, a certificate for an instance 
 of SWG is a sequence 
 of  Scorpion layouts. Since verifying if 
 is actually a Scorpion winning game requires polynomial time, this proves that SWG is in NP.

We now turn to proving the NP-completeness of SWG. We explicitly notice that next theorem is a weaker version of Theorem 2 in Section 4. We have decided to provide its proof for two reasons: firstly, since it deals with the well known 4-suits version of the game, it may have some interest in itself; the second and main reason for showing its proof is that it may help the reader in facing with the (quite more intricate) proof of Theorem 2.

Theorem 1

SWG is NP-Complete even when restricted to set of instances such that D is a deck on four suits and the stock in the initial layout is empty.

Proof

To prove the assertion, we provide a reduction from 3SAT. Let  be an instance of 3SAT, with 
 and 
. Without loss of generality, in what follows we shall assume that .

The description of the instance 
 of SWG corresponding to an instance  of 3SAT is rather intricate and the reader may refer to Fig. 3 to get some intuition about how the gadgets are structured.

Fig. 3
Download : Download high-res image (134KB)
Download : Download full-size image
Fig. 3. Example of the instance of SWG corresponding to the 3SAT formula f = {c1,c2,c3} with c1 = {x1,x2,x3}, c2 = {x1,x2,¬x3}, c3 = {x1,¬x2,¬x3}, over the set X = {x1,x2,x3}.

The deck of cards D consists of 4 suits of  cards each. In order to make the proof closer to the language of card players, in what follows we shall denote the four suits as ♡, ♣, ⋄ and ♠ (instead of  as defined in Section 2).

For any , we define the base variable value of 
 as 
 and, for any , we define the base clause value of 
 as 
 and the base clubs clause value of 
 as 
.

The columns of 
 are partitioned into three sets: a set of variable gadgets columns, a set of clause gadgets columns, and a set consisting of one critical columns and four suit columns.

Variable gadgets columns. Each variable 
 is associated to a pair of columns denoted as 
 and 
:

1.
column 
 contains the unlocked cards 
 and 
, 
 being the top of column 
 and covering card 
;

2.
column 
 contains the unlocked cards 
 and 
, 
 being the top of column 
 and covering card 
.

Clause gadgets columns. Each clause 
 is associated to the four columns 
, 
, 
 and 
:
1.
, 
 and 
 contain a single unlocked card each (being their, respective, top card): 
 contains 
, 
 contains 
 and 
 contains 
;

2.
finally, 
 contains the following stack of unlocked cards:
 with 
 at its top.

We can now model a variable (or its negation) being contained in a clause. Starting with , and up to , we repeat the following steps: for any ,

•
if 
 then we add card 
 as a locked card at the bottom of column 
, while if 
 then we add card 
 as a locked card at the bottom of column 
;

•
if 
 then we add card 
 as a locked card at the bottom of column 
, while if 
 then we add card 
 as a locked card at the bottom of column 
;

•
if 
 then we add card 
 as a locked card at the bottom of column 
, while if 
 then we add card 
 as a locked card at the bottom of column 
.

Critical column: the critical column consists of the single unlocked card 
, which is both base and top of the critical column and covers the following stack of locked cards: 
 

Suit columns: all cards contained in the four suit columns, namely, the hearts column, the spades column, the diamonds column and the clubs column, are unlocked; they are defined as follows

•
the hearts column consists of the stack with  as its top;

•
the remaining three suit columns have a similar structure, that is, 
 

The description of 
 is now complete. Needless to say, deriving 
 from  requires polynomial time.

It remains to show that there exists a winning Scorpion game starting at 
 if and only if there exists a truth assignment for X satisfying all clauses in f.

Assume there is a truth assignment  satisfying f. We now derive from a a winning Scorpion game starting at 
; for the sake of readability, in what follows we shall describe the sequence of card moves yielding the Scorpion layouts by which the winning game is composed.

For any , the following steps are repeated.

•
If 
, the subcolumn 
 is moved from column 
 to column 
 so that card 
 covers card 
. In this way, cards in the locked stack of column 
 get unlocked one after the other and can be moved to become the top cards of some clause gadget column: if, for some , card 
 (or 
 or 
) has become the top card of column 
 then it gets unlocked and it is moved to cover card 
 in column 
 (respectively, card 
 in column 
 or card 
 in column 
). This makes another card in the locked stack unlocked, and so on.

•
If 
, the subcolumn 
 is moved from column 
 to column 
 so that card 
 covers 
. In this way, just as in the previous case, cards in the locked stack of column 
 get unlocked one after the other and are moved to become top cards of some clause gadget column.

Since a satisfies all clauses in f then, for each , at least one column out of 
, 
 or 
 has its top card changed into, respectively, 
, 
 and 
; we can therefore move at least one of the three cards 
, 
, or 
 from 
 to cover the new top card in 
, 
 or 
. After this, the top card of either 
, 
 or 
 has become 
: we can then move 
 from 
 to cover 
. By doing so, card 
 has become the top card of column 
.

We have, thus, derived a Scorpion Layout such that, for any , card 
 is the top card of column 
 (and, actually, its only card). At this point, we move 
 from the critical column to cover 
 on top of column 
, so unlocking 
 in the critical column. This last card, in turn, can be moved to cover card 
 on top of column 
, and so on. At the end of this procedure, card  has been unlocked and has become the top card of the critical column: we move it to cover the top card in the hearts column, then we cover it by card 
 from column 
 or 
. Continuing, we move all the ♡ cards onto the hearts pile.

Now, card  is the top card of the critical column and, hence, unlocked. It can, thus, be moved on top of the diamonds column and, then, be covered by card  that is, by the subcolumn , that moves from column 
, followed by  from the critical column. Proceeding this way, we bring all the ⋄ cards in the diamonds column.

Similarly, all ♠ cards are moved to the spades column and all ♣ cards are moved to the clubs column.

We have thus derived from a a winning Scorpion game starting at 
.

Conversely, assume there exists a winning Scorpion game 
. This means that there exists  such that the critical column in 
 does not contain any ⋄. In 
, the critical column contains a single unlocked card, that is, 
, and such card has to be moved in order to unlock the card it covers (
). Before card 
 can be moved, card 
 (that, in 
, covers card 
 in column 
) has to be moved and this is possible only after 
 has been moved to a different column. This is possible either by directly moving 
 to cover 
 or by moving any of the ♣ cards lying in 
 beneath 
 (so moving the whole subcolumn). The former case cannot happen, since 
 is locked in the critical column and can become unlocked only after all ⋄ cards above it are moved. Hence, in order to move card 
, some card out of 
, 
, 
 (the cards lying on 
 beneath 
) are to be moved first. All such ♣ cards are locked in some variable gadget column and they become unlocked only after the ♡ segment at its top is moved, that is,

a)
after the subcolumn 
 is moved to cover card 
 (in column 
), for some 
 containing 
, or 
, or 
,

b)
or after the subcolumn 
 is moved to cover card 
 (in column 
), for some 
 containing 
, or 
, or 
.

Summarizing, card 
 is moved only after 
 has been moved to cover 
 or 
 has been moved to cover 
. Notice that these last two moves are mutually exclusive, that is, the occurrence of one of them forbids the occurrence of the other; hence, we may set
  Since, by construction, case a) occurs when 
 and case b) occurs when 
, the truth assignment above to variable 
 satisfies clause 
.
The above reasoning can be repeated for card 
 and, hence, clause 
, and so on down to card 
 and, hence, clause 
. This proves that the so built truth assignment a satisfies all clauses in f. □

4. Reducing the number of suits
It turns out that SWG is NP-complete even for sets of instances satisfying stronger restrictions than those considered in Theorem 1, that is, when the game is played with a single suit deck of cards (), and the initial layout has an empty stock and no locked cards.

Before proving the main result of this section, we need an intermediate step, expressed in the next lemma. Both theorem and lemma rely on reductions from 3SAT.

Lemma 1

SWG remains NP-Complete when restricted to instances such that D is a deck on four suits and in the initial layout the stock is empty and no card is locked.

Proof

We now show how to transform an instance  of 3SAT, with 
 and 
, into a Scorpion layout 
 for a deck of cards D consisting in 4 suits of  cards each such that in 
 no card is locked and the stock is empty. In what follows, refer to Fig. 4.

Fig. 4
Download : Download high-res image (122KB)
Download : Download full-size image
Fig. 4. 
 corresponding to the 3SAT formula f = {c1,c2,c3} with c1 = {x1,x2,x3}, c2 = {x1,x2,¬x3}, c3 = {x1,¬x2,¬x3}, over the set X = {x1,x2,x3}.

For any , we define

•
the occurrence value of the literal 
 as 
 and the occurrence value of the literal 
 
 as 
 
;

•
the base hearts variable value of 
 as 
 and the base spades variable value of 
 as 
 
;

•
finally, for any , we define the base diamonds clause value of 
 as 
 and finally the base clubs clause value of 
 as 
.

The layout construction follows, which is similar to that in Theorem 1. The top of any column is always the last card listed.
Variable gadgets columns: each variable 
 is associated to the pair of columns 
 and 
:

1.
column 
: 
;

2.
column 
: 
;

Clause gadgets columns: each clause 
 is associated to the four columns 
, 
, 
 and 
:
1.
, 
 and 
 start with a single ♣ card each, respectively: 
, 
 and 
;

2.
 consists of the following stack of cards: 
);

We can now model that a variable (or its negation) is contained in a clause. For , we repeat the following steps:

•
Let 
 be the smallest value in  such that 
 and let 
 be the hth literal in 
 (for some ); we add the stack 
 on top of column 
, where we have set 
;

•
Inductively, for , let 
 be the smallest value in 
 (if any) such that 
 and let 
 be the hth literal in 
 (for some ); we add the stack 
 on top of column 
, where we have set 
.

Notice that, at the end of the above steps we have placed 
 on top of the column corresponding to the last occurrence of 
. Then, for , we repeat the above steps by considering negated variables: if 
 is the rth clause containing 
 and 
 is the hth literal in 
 (for some ), then we add the stack 
 on top of column 
, where we have set 
. At the end of these steps, we have placed 
 on top of the column corresponding to the last occurrence of 
.
Critical column: the critical column is now the following stack of cards:

As to the remaining cards:

•
we add the stack  underneath the critical column (with  as its base);

•
We add the stack  underneath 
 (with  as its base);

•
finally, we add  underneath 
 (with  as its base).

The description of 
 is now complete. Before proceeding to formally prove it actually yields a reduction from 3SAT, we briefly discuss the differences with the proof of Theorem 1. In the proof of Theorem 1, locked cards allowed us to force a whole stack of cards to be played in the order we planned. We used this characteristic for two main goals: to let all the clause gadgets related to a certain literal be “triggered” by making the right choice in the variable gadget columns (that is, moving either 
 or 
), and to hide in the critical column all the cards that, when set free, would allow to reach a winning configuration, until our conditions are met. To recreate this scenario, it has been necessary to design a new structure to replace that (somehow automatic) mechanism. Unfortunately, we have not found a, let's say, self-contained “locked-card-gadget”; instead, we have detected a way to bind a set of cards to the behavior of only one card: a chain of pairs of cards, of the form “ covering ”, each pair bound to the next one and with each involved card being unable to move until the “head” of the chain is set free by moving the card covering it. An example of this mechanism is depicted in Fig. 5.

Fig. 5
Download : Download high-res image (100KB)
Download : Download full-size image
Fig. 5. Example of chain of dependencies between clause gadgets and variable column.

We are now ready to show that there exists a winning Scorpion game starting at 
 if and only if there exists a truth assignment for X satisfying all clauses in f.

Assume there exists a truth assignment  satisfying f. We now derive from a a winning Scorpion game starting at 
.

For any , the following steps are repeated.

•
If 
, the subcolumn 
 is moved from column 
 to column 
 so that card 
 covers card 
. In this way, 
 becomes the top card of column 
, and, if 
 appears in at least one clause, 
 can be moved to column 
. This will in turn allow 
 to be moved on column 
, and the process is repeated for all the cards down to 
.

•
If 
, the subcolumn 
 is moved from column 
 to column 
 so that card 
 covers 
. In this way, just as in the previous case, 
 becomes the top card of column 
 uncovered, and, if 
 appears in at least one clause, 
 can be moved to column 
. This will in turn allow 
 to be moved on column 
, and the process is repeated for all the cards down to 
.

Since a satisfies all clauses in f then, for each , at least one column out of 
, 
 or 
 has its top card changed into, respectively, 
, 
 and 
; we can therefore move at least one of the three cards 
, 
, or 
 from 
 to cover the new top card in 
, 
 or 
. After this, the top card of either 
, 
 or 
 has become 
: we can then move 
 from 
 to cover 
. By doing so, card 
 has become the top card of column 
.

We have, thus, derived a Scorpion Layout such that, for any , card 
 is the top card of column 
 (and, actually, its only card, except for 
 which holds all the “excess” diamonds cards).

We can now move card  from the top of the critical column onto column 
, the stack  onto column 
, …, the stack 
 onto column 
, …, up until we move the stack 
 onto column 
. After this, we will move  onto column 
,  onto column 
, …, 
 onto column 
, …, and finally 
 onto column 
.

This sequence of moves brought us to a configuration where  is the top card of the critical column; we can now sequentially move all ♡ cards onto the critical column, starting from , then either  or  (depending on which one of the two cards was not moved in the variable truth assignment phase), then  and so on.

Similarly, we bring all the ♠ cards in column 
, then all ⋄ cards in column 
 and finally all ♣ cards in column 
. We have thus derived from a a winning Scorpion game starting at 
.

Conversely, assume there exists a winning Scorpion game 
. This means that there exists  such that in 
 card  is the top card of the critical column so that all the ♡ cards can be moved to that column. To make  the top card of the critical column, it is necessary to move 
 which is initially prevented from moving because of two reasons: (1) 
 is located in the same column and, (2) 
 is covered by 
. To make possible moving 
, we therefore need to move both 
 (for reason (1)) and 
 (reason (2)). To move 
 we need to make 
 the top card of column 
 and this (just like in the reduction in Theorem 1) requires one of the three ♣ cards over it to be moved, so that 
 can be moved onto 
. Notice that the only other way to make 
 become uncovered without moving one of the three clubs cards over it would be by moving 
 itself, but to do this 
 should have become uncovered, which requires 
 to be moved first, which completes a circular sequence of dependencies making this alternative way impossible. In conclusion: to have 
 and 
 in two different column (point (1)), it is necessary to move one of the three ♣ cards over 
, that is, it is necessary to trigger the gadget of clause 
. As to point (2), in order to make 
 uncovered (so that 
 can be moved), we need to move 
, which is in turn prevented to be moved by the same two reasons which locked 
; this time, we need to move 
 and 
. To move 
, by the same argument we just went through for 
, we need to trigger the gadget of clause 
; to move 
 the already described double blocking situation occurs once again. This chain of dependencies goes down to , which this time has only one requirement to be moved: moving . This means triggering clause 
. The chain of “triggering dependencies” is depicted in Fig. 6.

Fig. 6
Download : Download high-res image (27KB)
Download : Download full-size image
Fig. 6. Example of chain of dependencies in the critical column.

Summarizing: we just argued that before  can become uncovered, each of the clause gadgets 
, for , must be triggered; this means that, for , at least one of the three clubs cards in column 
 must be moved: the three acceptors of these cards (that is, the cards they can be moved on) belong to columns 
, 
 and 
. This time, each one of these columns consists of 3 cards: two ♠ cards on top and the ♣ acceptor of the card in 
 as the base card. Now, consider clause 
 and assume that 
 (the case 
 being similar): hence, to make the base card of column 
 (that is, ) uncovered it is necessary to move card 
 whose acceptor 
 just covers it. Hence, 
 has to be moved first and this requires a sequence of moves depending on each other (as discussed above) which ends at the base card 
 of column 
 (see Fig. 5). This means that, to trigger all the clauses, for each clause 
, the ♠ base card of at least one of the variable columns corresponding to some literal 
 (with ) must become uncovered.

We are almost done. It only remains to argue that this can only happen if there is a satisfying truth assignment for the 3SAT formula f. This works quite similarly as in the proof of Theorem 1. Now, the acceptor of , located in column 
, belongs to column 
, and, in general, for any , the acceptor of 
, located in column 
, belongs to column 
. This last chain of dependencies ends in card , the card in the critical column we started with. As a consequence, the only way to make  uncovered and reach a winning configuration is by choosing the mutually exclusive moves in the variable gadgets in such a way that all the clause gadgets get triggered, and, by construction, this corresponds to a satisfying assignment for f, hence completing our proof. □

We are now ready to prove the main result of this section, that is,

Theorem 2

SWG is NP-Complete even when restricted to set of instances such that D is a deck on just one suit, and the initial layout contains an empty stock and no locked cards.

We explicitly observe that, by simple generalization, from Theorem 2 it follows that SWG is NP-complete for any (fixed) number of suits.
Proof

Again, we provide a reduction from 3SAT an instance of which being , with 
 and 
. However, we shall build over the reduction in the proof of Lemma 1, that is, we derive a Scorpion layout 
 over a 1 suit deck of cards starting from the layout 
 corresponding to f described in the proof of Lemma 1.

Let D,  and 
 be, respectively, the 4 suits deck of cards, the number of cards per suit, and the Scorpion layout corresponding to f as constructed in Lemma 1. The 1 suit of cards 
 we are going to derive contains 
 cards and in what follows we shall denote a card in 
 simply as (i), with 
. We derive 
 from 
 by a sequence of card replacements (see Fig. 7):

•
first, we replace all clubs cards with their suitless counterpart, so  is replaced by (1),  is replaced by (2) and so on, up to  which is replaced by (δ);

•
next, we replace all diamonds cards:  is replaced by ,  is replaced by , …, up to  which is replaced by ;

•
then, spades:  is replaced by , …, up to  which is replaced by ;

•
and, finally, hearts:  is replaced by , …, up to  with  (or 
).

Fig. 7
Download : Download high-res image (145KB)
Download : Download full-size image
Fig. 7. 
 corresponding to the 3SAT formula f = {c1,c2,c3} with c1 = {x3,x2,x1}, c2 = {x1,x2,¬x3}, c1 = {x1,¬x2,¬x3}, over the set X = {x1,x2,x3}. The arrow highlights the card 85 in the critical column (corresponding to (4n + 1,♡) in the proof of Lemma 1), playing a crucial role in the proof.

It remains to prove that there exists a winning Scorpion game starting at 
 if and only if there exists a truth assignment a satisfying f.

Suppose there exists a truth assignment a satisfying f. Hence, by Lemma 1, there exists a Scorpion game 
 on the 4 suits deck such that in 

•
only the critical column and columns 
, 
 and 
 are non empty,

•
the base of the critical column is , the base of 
 is , the base of 
 is  and the base of 
 is , and

•
for any  and , card  covers card .

For any , denote as 
 the 1 suit deck Scorpion layout derived from 
 by the same card replacement rules described above to derive 
 from 
. We claim that 
 is a (1 suit) Scorpion game: indeed, since in the (4 suits) Scorpion game 
 the maximum rank cards , ,  and  are never moved (to an empty column), all moves occurring in 
 are also legal Scorpion moves in a 1 suit deck of cards. Then: from 
 we derive 
 by moving the stack in column in 
 to cover card  in the critical column (so that card  becomes the top card of the critical column), from 
 we derive 
 by moving the stack in column in 
 to cover card  in the critical column (so that card  becomes the top card of the critical column), and, finally, from 
 we derive 
 by moving the stack in column in 
 to cover card  in the critical column (so that card (1) becomes the top card of the critical column). Hence, 
 is a (1 suit) winning Scorpion game.
Suppose now there exists a winning Scorpion game 
 starting at 
. Since in 
 cards (δ),  and  are base cards of the columns they belong to, without loss of generality we may assume they are moved only in the last three moves of the game (since moving a base card of a column does not make uncovered any other card). Hence, in 
 cards (δ),  and  are never moved. Hence, if 
 denotes the 4 suits Scorpion layout obtained by applying to 
 the reverse replacement of that outlined above, for , it follows that 
 is a (4 suits) Scorpion winning game. By the proof of Lemma 1, this proves that f is satisfiable. □

5. A constant number of cards in each column
In this section, we move a further step towards understanding the role played by the several parameters concurring to the definition of the SWG problem to its hardness. In the previous sections, we have proved that SWG is NP-complete independently of the size of the stock, the number of locked cards and the number of suits in the deck. After that, it is clear that the hardness of SWG relies on just two parameters, that is, the number of cards in the (1-suit) deck and the number of columns in the layout. The following theorem states that SWG remains NP-complete when one of them is bounded by a linear function of the other. More specifically,

Theorem 3

SWG is NP-complete even when restricted to set of instances such that D is a 1-suit deck of cards, the initial layout contains an empty stock and no locked cards, and each column contains at most 8 cards.

The proof of Theorem 3 consists, basically, in a simulation of a Scorpion game starting at a layout with a “small” number of columns (and, hence, a “large” number of cards in each column) by a Scorpion game starting at a layout with a “large” number of columns with at most 8 cards in each column. Since it is quite long, we have deferred it to the Appendix.

6. Klondike
The foundations are initially empty, but, as the game progresses, the foundations will be built up by suit. The tableau consists of seven stacks of cards: at the beginning, all cards in each stack are face down except for the top card which is left face up. Goal of a Klondike game is to place all the cards into the foundations: when a foundation is empty, as soon as an Ace appears as the top card of any stack in the tableau, it can be removed from the tableau to become the top card of that foundation; when the top card of a foundation is card i of suit x, with  and , as soon as card  of suit x appears as the top card of any stack in the tableau, it can be removed from the tableau to become the top card of that foundation. Hence, the last card moved to a foundation is a King.

The tableau is used to organize cards until it becomes possible to place them in the foundations. Cards can be moved among the stacks in the tableau by alternating color: if the top card of a stack in the tableau is card i of a red suit (♡ or ⋄) and card  of a black suit (♣ or ♠) is a face up card in a different stack, then card  can be moved to cover card i (and similarly with opposite colors). Similarly to Scorpion Solitaire, whenever a card is moved from a source stack to a destination stack in the tableau, all (face up) cards on the source stack lying above the moved card must be moved as well, in their order, to the destination stack. Only a king can be placed onto an empty stack. If a face down card is on the top of a stack, it becomes face up.

Klondike also allows to move back cards from the foundations to the stacks: if card i of a red (black) suit is the top card of the corresponding foundation and card  of a black (red) suit is the top card of a stack, then i can be moved over .

The stock is a stack-like set of face down cards: when the player clicks on the stock, 3 cards are dealt face up to the waste. Only the top most card in the waste is playable (once it has been played, the card immediately below it becomes playable, and so on): more precisely, it can be moved to cover a face up card in some stack in the tableau in decreasing order and alternating color (that is, a red suit card i may cover a black suit card  and a black suit card i may cover a red suit card ).

We again consider complete information games (called thoughtful solitaires in [2]), that is, all cards will be face up, although some of them will be locked till the cards covering them are removed. Needless to say, our decks contain arbitrary amounts of cards, and the tableau arbitrary amount of stacks. Furthermore, even though it isn't expressly mentioned in [2], we are assuming that the starting configuration allows for stacks in the tableau with possibly more than one face up card on their top.

Among the other results, [2] proves it is NL-hard to decide if there exists a winning Klondike game starting at a given layout also when the deck of cards is restricted to have only one black suit and one red suit, the initial layout has empty stock and waste and generalized kings (namely, maximum rank cards) are not allowed to be moved to an empty stack in the tableau. In [2], such restricted version of the Klondike related decision problem is named FLAT-SOLIT(1,1).

Before proceeding, we want to remark the similarities occurring between SWG restricted to 2 suits decks and empty stock and FLAT-SOLIT(1,1): indeed, in both problems, for every card c (other than maximum rank cards) there exists a unique card 
 such that c may be moved to cover 
 in the tableau and, conversely, for every card c (other than aces) there exists a unique card 
 such that 
 may be moved to cover c in the tableau. However, there is also a noticeable difference between the two games: according to the Klondike rules, foundations are filled by cards of the same suit, in decreasing order, and by moving one card after the other. No similar structure exists in the Scorpion Solitaire, and this is the reason why it does not seem so easy to directly design a reduction from SWG to FLAT-SOLIT(1,1).

Anyway, by building over the reductions described in the proofs of Lemma 1 and Theorem 2 we have strengthened the result in [2], as stated in the following theorem.

Theorem 4

FLAT-SOLIT(1,1) is NP-Complete.

Proof

The reduction is again from 3SAT and, as already noticed, we shall build it over the reduction in the proofs of Lemma 1 and Theorem 2. We recall that 
 is the 1 suit Scorpion layout associated to an instance  of 3SAT in the proof of Theorem 2 and that the 1 suit deck contains 
 cards.

We start the process of transforming 
 into a Klondike layout by replacing the cards in 
 by cards of a 2 suits deck: for any card (i), with 
, we set 
  We notice that 
 contains only even ♣ cards, only odd ♡ cards, and it does not contain any of the two Aces (needless to say, 
 denotes the layout obtained by replacing the cards in 
 according to τ).

Hence, we insert the two Aces  and  (in no particular order) in the critical column between cards 
 
 and 
 
 (the cards that, in the proof of Lemma 1, were, respectively,  and 
), where  if 
 
 is even,  otherwise. We set as locked cards the two Aces and all the cards beneath them in the critical column.

Then, we add to 
 a new column, that we shall call Klondike column, filled by odd ♣ cards and even ♡ cards; in detail, the Klondike column is

The construction of the Klondike layout 
 corresponding to f is done (see Fig. 9): an empty stock and waste, a tableau consisting of 
 plus the Klondike column, and, finally, the two empty foundations (one for each suit).

Fig. 9
Download : Download high-res image (141KB)
Download : Download full-size image
Fig. 9. 
 corresponding to the 3SAT formula f = {c1,c2,c3} with c1 = {x3,x2,x1}, c2 = {x1,x2,¬x3}, c3 = {x1,¬x2,¬x3}, over the set X = {x1,x2,x3}.

It remains to prove that there is a truth assignment satisfying f if and only if there is a Klondike winning game2 starting at 
.

Before proceeding, it is worthwhile to observe what follows. In a 2 suits Klondike game, any card may perform only two moves: a card  may be moved either to cover card , if this last card is in some stack in the tableau, or to cover card  if this last card is contained in the Foundation and  is the top card of some column in the tableau. Hence, due to the structure of the Klondike column, no one of the cards it contains can be moved until  and  are moved to their foundations, that is, since the two Aces are locked, until card 
 
 is moved from the critical column (where  if 
 
 is even,  otherwise).

Suppose there exists a truth assignment satisfying f and, hence, by Theorem 2, there exists a Scorpion winning game 
 (recall that 
 is never moved during the game). Let  be such that 
 is derived from 
 by moving card 
 
. Notice that, by the definition of τ, if (i) is the card moved in 
 to get 
, then card  can be moved in 
 as well: indeed, in order to move (i), in 
 card  is the top card of a column other than the one containing (i); hence,  is the top card of a different column of that containing  and, moreover,  and  are of different suits. This means that, if we denote as 
 the Klondike layout obtained from 
 the same way as we obtained 
 from 
, 
 is a Klondike game. The reasoning can be generalized to get that 
 is a Klondike game.

At this point, we move the two Aces to the Foundations, getting layouts 
 and 
, and then, we continue by executing the moves corresponding to those of the remaining of the Scorpion winning game, that is, we get the following Klondike game:
 In 
 only two columns in the tableau are not empty: the critical column (containing even ♣ cards and odd ♡ cards, alternating each other) and the Klondike column (containing odd ♣ cards and even ♡ cards, alternating each other). Hence, from 
 we can move, one after the other, all cards in the Foundations. We have so derived a Klondike winning game starting at 
.

Conversely, suppose there exists a Klondike winning game starting at 
. Similarly as in the other reductions in this paper, this means that, at some point in the game, the Aces became uncovered so that they could be moved to the Foundations. Before this happens, card 
 
 has to be moved in order to make (one of the two) Aces uncovered (as usual,  if 
 
 is even,  otherwise). Since the Aces (and all cards beneath them) in the critical column are locked, and since the remaining cards behave in the same way as their Scorpion counterparts (as already discussed, and considering that there cannot be any moves to and from the foundations until the aces are free), by the same arguments in Lemma 1 and Theorem 2, moving 
 
 requires a sequence of moves to be performed on the variable gadgets such that all the clause gadgets can be “triggered” so that the unlocked portion of the critical column can be moved. As we have already discussed in the proofs of Lemma 1 and Theorem 2, this means that there exists a truth assignment satisfying f. □

7. Conclusions and open problems
In this paper we have studied the computational complexity of deciding if a winning strategy exists for a Scorpion Solitaire game, and we have proved that the problem is NP-complete even for one suit games and no face down (locked) cards. We have also negatively answered a question posed in [2] by proving that it is NP-complete to decide whether a one red suit-one black suit configuration of the Klondike Solitaire allows for a winning sequence of moves.

A Scorpion game depends on several parameters: number of suits, of cards per suit and of locked cards, stock size, number of columns. Theorem 2 has made clear that the complexity of the problem is not influenced by number of suits, number of locked cards and stock size.

Instead, the role played as to the complexity of the problem by the number of columns and by the relation between number of cards and number of columns still looks intriguing. Actually, Theorem 3 shows that 8 cards on each column (that is, a constant number of cards per column) are sufficient for the problem to remain a hard one, that is, a single parameter (the number of columns) is, let's say, “accountable” for the hardness of the problem. However, two main related questions remain open.

On one hand, Theorem 3 proves that with a “big” number of columns each of which containing a “small” number of cards the problem remains NP-complete, but what about having a “small” number of columns each of which containing a “big” number of cards? In fact, the problem is trivially in P when the tableau contains only one column, but it seems a quite hard issue to understand what happens for a constant number of columns even when such a constant is equal to 2.

On the other hand, it is still unclear how “small” the number of cards can be made in each of the “very many” columns in order for the problem to remain hard. Actually, the problem is trivially in P when each column contains (at most) one card. But the issue is no longer so easy when the number of cards per column increases.

As a final remark, we observe that we can look at the relation between number of cards and number of columns from another perspective, that is, instead of considering the amount of cards in each column, we can study the complexity of SWG with respect to the ratio between number of cards and number of columns. In this respect, we notice that we can transform the layout 
 
 described in the proof of Theorem 3 (in the Appendix) into a layout 
 containing, besides a “shifted copy” of the columns in 
 
, an arbitrary number of columns constituted by two cards each: if we want to get m new columns with 2 cards each, we first shift by 2m the cards in 
 
 (that is, for each , in 
 we replace x by ), then we set as  the ith new column, for . It's quite an easy exercise to prove that there exists a Scorpion winning game starting at 
 
 if and only if there exists a Scorpion winning game starting at 
. Since m can be chosen as an arbitrarily large function of the number n of columns in 
 
 (for instance, we can set 
), this shows that, for any , SWG remains NP-complete when the ratio between number of cards and number of columns is .

Appendix. Proof of Theorem 3
For the sake of lightening the (very heavy) notation, from now on we shall denote card (i) simply by i (so dropping the parenthesis).

Let  be any Scorpion game starting at some Scorpion layout L.3 In what follows, we shall describe such a game as 
 as well, where, for , 
 is the ith card moved, that is,  is obtained by moving card 
 in .

Let L be a Scorpion layout L over a 1-suit deck of δ cards with an empty stock and no locked cards. Throughout this section, we shall denote as 
 the i-th column of L. Without loss of generality, we may assume that L is defined over a set of at least two columns and that each column contains at least two cards.4 We now show how to transform L into a new Scorpion layout 
 
 such that

•
each column in 
 
 contains at most 8 cards

•
a winning Scorpion game starting at 
 
 exists if and only if a winning Scorpion game starting at L exists.

We first define an intermediate layout 
 over a 1 suit deck of 2δ cards with an empty stock and no locked cards. Let 
 be the columns in L, with 
 (that is, 
 and 
) for . 
 still consists of k columns, with its i-th column being 
. Notice that in 
 odd cards are already at their place and, hence, they are not to be moved. As a consequence, only even cards can be moved in a Scorpion game starting at 
 and, in turn, this means that there is a one-to-one correspondence between Scorpion games starting at L and Scorpion games starting at 
.

We now derive from 
 the final layout 
 
 over the deck 
 
 consisting of δ columns each containing at most 8 cards. We start by performing a shift of the cards in 
, that is, for each card  contained in any column in 
, we replace j by . This results in column 
 being constituted of cards 
, for . Notice that all cards now belong to the set 
. For the sake of readability, for any  and for any 
, we set 
 and 
: we recall that for any  and for any 
, card 
 has to be placed over card 
 (whenever not yet in such position).

We now split each column into a set of columns, while adding to them some of the still unused cards in : the i-th column in 
, namely 
, is transformed into the set of columns 
 we are going to describe. To this aim, for , we define
  Then, for ,
  and, for 
 and, finally,
  For , let 
 and let 
. We observe that, for any , all cards in 
 but cards 
 are contained in columns 
 while 
 are contained in 
.

In Fig. 10 an example of transformation of a Scorpion layout L with arbitrary size columns into a Scorpion layout 
 
 with columns of size at most 8 is shown. We remark that, since all columns in L contain less than 8 cards, this example is not quite meaningful in itself: its goal is just to provide a picture of the reduction, in view of the fact that starting from a layout L with larger columns would have resulted in a huge layout 
 
.

Fig. 10
Download : Download high-res image (366KB)
Download : Download full-size image
Fig. 10. An example of transformation of a Scorpion layout L with arbitrary size columns into a Scorpion layout 
 
 with columns of size at most 8: in this case, D0 = {53,…,72}. Cards in D1, D2 and D3 are, respectively, blue, fuchsia and green, and cards 7,8,…,2i + 5,2i + 6,…,2k + 5 are red. (For interpretation of the colors in the figure(s), the reader is referred to the web version of this article.)

For , we denote as 
 the following sequence of moves, that may occur if and only if card 
 is the top card of column 
:

•
starting with  and iterating while 
 (incrementing h by 1 at each iteration)

–
card 
 moves from 
 to 
 and, after such move,

–
card 
 (which is now in 
) moves back to 
 (to cover card 
)

•
then, card 
 moves from 
 to 
 and, after such move,

•
if , card 
 first and card 
 immediately after move from 
 to 
 (to cover card 
).

Notice that, for any , after sequence 
 has occurred all cards in 
 are contained in columns 
 and that, for any , 
 is the only card in 
 that is allowed to move after the occurrence of 
 and before the occurrence of 
. Fig. 11 shows the content of columns 
 after sequence 
 has occurred, for any , and Fig. 12 shows the content of columns 
 after sequence 
 has occurred.

Fig. 11
Download : Download high-res image (193KB)
Download : Download full-size image
Fig. 11. Columns 
, for some 1 ≤ i < k, after the occurrence of 
: cards in D0 are black, cards in Di − {λi + 5,λi + 2,λi + 3} are blue, and cards 2i + 5,2i + 6 are red. Finally, the two possible placements of the subcolumn based at λi + 5 are both shown, depicted in grey.

Fig. 12
Download : Download high-res image (170KB)
Download : Download full-size image
Fig. 12. Columns 
 after the occurrence of 
: cards in D0 are black, cards in Dk are blue, and card 2k + 5 = λk + 8 is red.

The sequences 
 are our starting tool to prove that a winning Scorpion game starting at 
 
 exists if and only if a winning Scorpion game starting at 
 exists.

Lemma 2

If there exists a winning Scorpion game starting at 
 then there exists a winning Scorpion game starting at 
 
.

Proof

Let 
 be a winning Scorpion game starting at 
. Accordingly, we now describe a winning Scorpion game starting at 
 
 as a sequence of moves 
 partitioned into four phases.

Phase 1: preparing the simulation. For any , for increasing values of i, moves in 
 are performed. More precisely, the sequence 
 is the sequence of the first 
 moves of 
 
, where, for any , 
 stands for the number of moves in 
 and by ⊕ we denote the concatenation of two sequences of moves.

Since 
 is the top card of column 
 in 
 
, sequence 
 may occur starting al 
 
. Furthermore, by denoting as 
 
 the layout of a game starting at 
 
 after moves in 
 are occurred (for ), since 
 is the top card of column 
 in 
 
, sequence 
 may occur starting al 
 
.

At the end of Phase 1, that is, in 
 
 it holds that, for any ,
 and
 Furthermore, for any  and for any 
,
 Finally, for any , 
, and 
.

Phase 2: cleaning up the top of columns 
, for . For any , we set 
; Phase 2 consists of the sequence of moves 
.

The sequence of moves may take place (see the description of the layout at the end of Phase 1).

At the end of Phase 2, only columns 
 and 
 (for ) have been modified since end of Phase 1, so that, for any , 
 is the top card of column 
, 
 for , and, for any , 
.

Let 
 be the number of moves occurring in Phase 2, and let 
 
 be the Scorpion layout at the end of Phase 2.

Phase 3: simulation. Moves corresponding to 
 are performed interleaved with moves emptying columns 
 for some . More precisely, let 
 be the smallest index such that 
 for some : then, for any 
, 
. Afterwards, a sequence of moves emptying columns 
 takes place (deriving such a sequence is quite an easy task and is not detailed here). After that, cards 
 are moved, where 
 is the smallest index greater than 
 such that 
 for some  with . Such alternating sequence of “simulation moves” and “emptying moves” continues until all cards in 
 are contained in a single column, sorted in decreasing order.

Notice that, at any step of Phase 3, until card 2δ has not yet moved (to an empty column) in the game starting at 
, for any  such that card 
 has not yet moved in the game starting at 
, the uppermost subcolumn of 
 (the one containing only cards in 
) is a shifted copy (by the additive value ) of 
, and for any  such that card 
 has already moved in the game starting at 
 (so emptying column 
), column 
 does not contain any card in 
: hence, in such hypothesis, all moves occurring in the game starting at 
 may be “simulated” in the game starting at 
 
.

When card 2δ moves in the game starting at 
, it must move to some empty column 
: hence, card 
 had moved earlier and, correspondingly, in the game starting at 
 
 the “simulation move” of 
 had occurred which had been followed by the “emptying moves” of columns 
. This implies that card  is allowed to move in the game starting at 
 
.

Phase 4: finishing the game. Once all cards in 
 are contained in a single column, sorted in decreasing order all the remaining cards are finally sorted, eventually after card  has moved to an empty column (if not yet done) and starting from card 
 (in column 
 before Phase 4 begins). □

Let 
 
 
 
 
 
 be a winning Scorpion game starting at 
 
, where  and 
 
 is a winning Scorpion layout.

We notice that any Scorpion game starting at 
 
 necessarily begins with the sequence 
 of moves. After that, either card 
 moves (from column 
 to column 
) or card 
 moves from 
 to 
. However, until card 8 is not moved, moving card 
 does not forbid any move that was possible before its moving and does not make possible any move that was not possible before its moving. In fact, at this point, the sequence 
 has to take place in the game, eventually interleaved at any point with the moving of 
.

After that, either card 
 moves (from column 
 to column 
) or card 
 moves from 
 to 
 or, finally, card 
 moves (from column 
 to column 
) if such move has not occurred yet. By the same arguments as before (with card 10 playing the role of card 8 as far as the moving of 
 is regarded), we conclude that, now, the sequence 
 has to take place in the game, eventually interleaved at any point with the moving of 
 and/or 
.

By iterating the reasoning, we get that, for any , after the sequence 
 has occurred, the sequence 
 has to occur, eventually interleaved at any point with the moving of 
 and/or 
, …, 
 (with card  playing the role of card 8 as far as the moving of 
 is regarded). Notice that, at the end of sequence 
, for any , column 
 contains a shifted copy of column 
, that is, 
 is a subcolumn of 
.

Let us denote as 
 the smallest index  such that in 
 
, for any , column 
 contains a shifted copy of column 
. That is,

Fact 1

In 
 
, for any , column 
 contains the subcolumn 
 and, for any 
, column 
 does not contain cards in 
.

We explicitly notice that in 
 
, for any  and for any 
, card 
 covers card 
 so that it has not to be moved, likewise odd cards in 
.

Since the moving of cards 
 is somehow arbitrary within the game, in Fig. 11, Fig. 12 layout 
 
 (that, we remark, occurs after the sequences of moves 
) is shown with the two possible placements of the subcolumn 
 depicted in grey.

Lemma 3

For any 
, if there exists  such that 
 for every , then
 In particular, for any 
, if 
 for some  and for every , then, for any 
, column 
 is not empty in layout 
 
.

Proof

For any , if card 
 covers card 
, card 
 (in column 
 in layout 
 
) cannot have previously moved and, hence, it still covers card 
, so forbidding card 
 to move so that 
 keeps on covering 
. In turn, this implies that card 
 (in column 
 both in layout 
 
 and in layout 
 
) cannot move.

By iterating the reasoning, it can be easily verified that, for any 
, card 
 (in column 
 both in layout 
 
 and in layout 
 
) cannot move and this results in card 
 keeping on covering 
 and this has two consequences:

- on one side, card 
 cannot move (since 
 covers it), so blocking 
 that, in turn, blocks 
 (base card of 
);

- on the other side, since 
, card 
 cannot move so that 
 continues covering 
 (in column 
 in layout 
 
) and, thus, 
 and 
 (in column 
 in layout 
 
) remain blocked.

Finally, since 
 cannot move and, hence, it continues covering 
, 
 cannot move either.

Case  is proved similarly, with only some changes in the cards numbering. □

A subcolumn 
, with , is a 
-maximal subcolumn in a layout 
 if 
 for  and

•
if 
 covers a card y in 
 then 
,

•
if a card z covers 
 in 
 then 
.

Lemma 4

For any 
 and for any 
-maximal subcolumn 
 in 
 
, if 
 then

•
 (that is, 
 is the King), and

•
 is the base card of some column 
, and

•
no 
-maximal subcolumn 
 exists in 
 
 such that 
.

Proof

By Fact 1, in 
 
, for any 
-maximal subcolumn 
 in 
 
 there exists  such that 
. Let us assume that, for any 
, any 
-maximal subcolumn 
 in 
 
 is such that either there exists  such that 
 or 
 and let layout 
 
 be derived from 
 
 by moving card 
.

If 
 then moving 
 does not change any 
-maximal subcolumn; hence, the assertion holding in 
 
 is a direct consequence of its holding in 
 
.

If 
, then 
 belongs to a 
-maximal subcolumn 
 in 
 
, that is, 
, for some . Moving 
 breaks A into two subcolumns: the eventually empty subcolumn 
 and subcolumn 
: trivially, if 
 is not empty (that is, ) then 
 is a 
-maximal subcolumn in 
 
 with 
, for some , or 
 as it is in 
 
. As to 
, the following cases may occur.

a)
If 
 then 
 moves to cover 
 which has to be the top card of a column in 
 
; but, since 
, it has to be the top card of a 
-maximal subcolumn 
 in 
 
 too and, by the inductive hypothesis, 
, for some , or 
. Since moving 
 results in transforming B into the 
-maximal subcolumn 
, this proves the assertion.

b)
If 
 then it moves to a column 
 (for some  and 
) that is empty in 
 
; hence, in 
 
, 
 is a 
-maximal subcolumn and  is the base card of 
. Finally, since 
 is empty in 
 
, then, by Lemma 3, there exists  such that 
 and, by case a) above and since any card may move at most once, this implies that no 
-maximal subcolumn 
 exists in 
 
 such that 
. □

As a byproduct of Lemma 4, for any 
, it is possible to uniquely associate an integer value  to any 
-maximal subcolumn 
 in 
 
. More specifically, we set 
 

Lemma 5

For any 
 and for any pair of distinct 
-maximal subcolumns, M and 
 in 
 
, 
.

Proof

Let 
 and 
 be two distinct 
-maximal subcolumns in 
 
; hence, for any  and for any , 
.

As a consequence, if there exist  such that 
 and 
 then 
.

Instead, if 
 and, for every , 
 then, by Lemma 4, 
 is the base card of some column 
 and 
. This means that 
. □

Let 
 be a layout belonging to a Scorpion game starting at 
 and let 
; we say that 
 and 
 
 are homologous if

•
for any 
-maximal subcolumn 
 in 
 
, if  then the ith column 
 in 
 is 
 with 
, for any , and

•
if 
 in 
 is not empty and it is 
, then there exists a 
-maximal subcolumn 
 in 
 
 such that  and, for any , 
.

By Lemma 5, 
 and 
 
 are homologous if and only if there is a one-to-one correspondence between columns in 
 and 
-maximal subcolumns in 
 
 (defined by α) such that cards in the same positions in a pair of corresponding (sub)columns are equal up to a shift of .
Similarly, we say that a move 
 occurring in a Scorpion game starting at 
 is homologous to a move m occurring in a Scorpion game starting at 
 
 if 
.

Lemma 6

If there exists a winning Scorpion game starting at 
 
 then there exists a winning Scorpion game starting at 
.

Proof

Let 
 
 
 
 
 be a winning Scorpion game starting at 
 
.

Let 
 be a layout belonging to a Scorpion game starting at 
 and let 
 such that 
 and 
 
 are homologous. We now prove that if 
 then move 
 may occur in 
 and that its occurrence yields a layout 
 homologous to 
 
.

If 
 then either 
 or 
. Denote as 
 the 
-maximal subcolumn in 
 
 containing 
 and let 
.

-
If 
 then 
 is the top card both of a 
-maximal subcolumn 
 and of the column containing 
 in 
 
. Let 
. Since 
 and 
 
 are homologous, then in 
 card 
 is contained in 
, 
 is contained in 
, and 
 is the top card of column 
: hence, 
 may move in 
.

Finally, it is trivial to verify that 
 is homologous to 
 
. As far as this last claim is concerned, we only remark that if 
 then moving 
 in 
 makes column 
 empty in 
.

-
If 
 then it moves to an empty column 
 (
). By Lemma 3, this implies that 
 for some . Since moving 
 in 
 
 results in that the number of 
-maximal subcolumns in 
 
 is equal to the number of 
-maximal subcolumns in 
 
 minus one and since 
 for any , then 
 
 contains at most  
-maximal subcolumns. More precisely, for any  and for any 
-maximal subcolumn M contained in 
 
, it holds that 
. Hence, since 
 
 and 
 are homologous, in 
 column 
 is empty.

This implies that in 
 card  (the King of deck 
) can move to 
.

Again, verifying that 
 is homologous to 
 
 is a trivial task.

The assertion follows by noticing that 
 and 
 
 are homologous and that, since 
 
 
 
 
 is a winning Scorpion game, then there exists  such that in 
 
 there is exactly one 
-maximal sucolumn and it contains . □

Theorem 3 thus follows from Lemma 2 and Lemma 6.