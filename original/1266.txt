Abstract
Research in the area of secure multi-party computation using a deck of playing cards, often called card-based cryptography, started from the introduction of the five-card trick protocol to compute the logical AND function by den Boer in 1989. Since then, many card-based protocols to compute various functions have been developed. In this paper, we propose two new protocols that securely compute the n-variable equality function (determining whether all inputs are equal)  using 2n cards. The first protocol can be generalized to compute any doubly symmetric function  using 2n cards, and any symmetric function  using  cards. The second protocol can be generalized to compute the k-candidate n-variable equality function  using  cards.

Keywords
Card-based cryptography
Secure multi-party computation
Equality function
Symmetric function
Doubly symmetric function

1. Introduction
During a presidential election between two candidates, a group of n friends wants to know whether they all support the same candidate so that they can talk about politics only if that is the case. However, each person in the group does not want to reveal his/her preference to the others (unless it is known that everyone supports the same candidate). They need a method to find out whether their preferences all coincide without leaking any other information such as the preference of any individual (not even probabilistic information).

Theoretically, this situation is equivalent to each i-th person having a bit 
 of either 0 or 1, indicating the candidate he/she prefers. Define the equality function 
 if 
, and 
 otherwise. Our goal is to develop a protocol that announces only the value of 
 without leaking any other information.

This situation is an example of secure multi-party computation, which studies about how multiple parties can jointly compare their private information without revealing it. It is one of the most actively studied areas in cryptography. Many previous results focused on secure multi-party computation using physical objects found in everyday life such as coins [8], combination locks [10], and printed transparencies [3], but the most used object is a deck of playing cards. Hence, this research area is often called card-based cryptography. These simple protocols have an advantage that they do not require computers, and also have a great didactic value since they are easy to understand and verify the correctness and security, even for non-experts in cryptography like high school students.

1.1. Related work
1.1.1. Five-card trick protocol
The first research in card-based cryptography dates back to 1989 when den Boer [4] developed a protocol called the five-card trick that can compute the logical AND function of two players' bits p and q.

The five-card trick protocol uses three identical

Image 1
s and two identical
Image 2
s, with all cards having indistinguishable back sides. At the beginning, each player is given a
Image 1
and a
Image 2
, while another
Image 1
is placed face-down on a table.
Throughout this paper, we always encode a bit 0 by a commitment

Image 1
Image 2
(by arranging two cards in this order), and a bit 1 by a commitment
Image 2
Image 1
. First, the first player places a commitment of p face-down to the left of the
Image 1
on the table. Then, the second player places a commitment of q face-down to the right of it. Finally, publicly swap the two cards in the commitment of q, resulting in the following four possible sequences.

Download : Download high-res image (53KB)
Download : Download full-size image
Observe that there are only two possible sequences in a cyclic rotation of the sequence:

Image 2
Image 1
Image 2
Image 1
Image 1
and
Image 2
Image 2
Image 1
Image 1
Image 1
, with the latter occurring if and only if . Before turning over all cards, we apply a random cut (see Section 2.2) to shift the sequence into a uniformly random cyclic shift, i.e. a permutation uniformly chosen at random from 
 where . By doing this, we can hide the initial positions of the cards and thus can determine whether  without leaking any other information.
1.1.2. Subsequent protocols
After the introduction of the five-card trick protocol, many other AND function protocols [1], [2], [5], [7], [11], [12], [14], [17], [21] were subsequently developed. These protocols either reduced the number of required cards or improved properties of the protocol involving output format, type of shuffles, running time, etc.

Apart from the AND function protocol, protocols to compute other functions have been developed as well, such as the XOR function protocol [2], [12], [13], the copy protocol [12] (duplicating a commitment), the voting protocol [9] (adding bits one by one and storing the sum in binary representation), the ranking protocol [22] (ranking several integers without revealing them), the 3-variable majority function protocol [16] (deciding whether there are more 1 s than 0 s in the input bits), and the 3-variable equality function protocol [19].

Nishida et al. [15] proved that any n-variable Boolean function can be computed using  cards, and any such function that is symmetric can be computed using  cards.

1.1.3. Six-card trick protocol
For the equality function, the case  is trivial since it is simply a negation of the XOR function and thus can be computed using four cards [12]. For the case , Shinagawa and Mizuki [19] developed a protocol called the six-card trick to compute the function  of three players' bits p, q, and r using six cards: three

Image 1
s and three
Image 2
s.
In the six-card trick protocol, each player is given a

Image 1
and a
Image 2
. First, the players place commitments of p, q, and r face-down on a table in this order from left to right. Then, we rearrange the sequence of cards into a (2 4 6) permutation, resulting in the following eight possible sequences.

Download : Download high-res image (122KB)
Download : Download full-size image
Observe that there are only two possible sequences in a cyclic rotation of the sequence:

Image 1
Image 1
Image 1
Image 2
Image 2
Image 2
and
Image 1
Image 2
Image 1
Image 2
Image 1
Image 2
, with the latter occurring if and only if . Like in the five-card trick protocol, we apply a random cut to the sequence before turning over all cards to hide the initial positions of the cards. Therefore, we can determine the value of  without leaking any other information.
The six-card trick protocol uses only one random cut shuffle. However, the technique used in the protocol heavily relies on the symmetric nature of the special case , suggesting that there might not be an equivalent protocol using 2n cards for a general n. In fact, the authors [19] ran a program and found that in the case , a protocol that uses eight cards and only one random cut does not exist.

While the five-card trick and the six-card trick protocols are both useful, they have a drawback that they are not committed-format. We call a protocol committed-format if the output is encoded in the same format as the input (here

Image 1
Image 2
for 0 and
Image 2
Image 1
for 1). Committed-format protocols have a benefit in the case that we do not want to reveal the output right after the computation, but instead use it as an input to another function.
1.2. Our contribution
In this paper, we propose two new card-based protocols that can securely compute the n-variable equality function, both using 2n cards.

The first protocol is not committed-format, but it can be generalized to compute any doubly symmetric function (see the definition in Section 4.1) 
 using 2n cards, and any symmetric function 
 using  cards.

The second protocol is committed-format, and it can be generalized to compute the k-candidate n-variable equality function 
 (where there are k candidates in the election instead of two) using  cards. See Table 1 for comparison.


Table 1. Properties and number of required cards of each developed protocol.

Protocol	Function	Committed-format?	#Cards	#Shuffles
The six-card trick [19]	equality function
E:{0,1}3 → {0,1}	no	6	1

Nishida et al. [15]	symmetric function
f:{0,1}n → {0,1}	yes	2n + 2	
any function
f:{0,1}n → {0,1}	yes	2n + 6	O(n ⋅ 2n)
any function
yes		

Our first protocol (§3,§4)	equality function
E:{0,1}n → {0,1}	no	2n	n
doubly symmetric function
no	2n	n + 1 + |Im f|
symmetric function
no	2n + 2	n + 1 + |Im f|

Our second protocol (§5,§6)	equality function
E:{0,1}n → {0,1}	yes	2n	n − 1
equality function
yes		
The major difference from the conference version of this paper [18] is the addition of our second protocol and its generalization.

2. Preliminaries
2.1. Notations
Given a sequence X of k cards, we use the following notations to denote operations on X.

•
(perm, σ) denotes rearranging the deck into a permutation σ, where each number i represents the i-th leftmost card. For example, if 
, 
, then (perm, (1 6 4)(2 5)) results in 
.

•
(shuffle, Π) denotes a uniformly random shuffle of X unknown to all parties on the set Π of permutations. For example, shuffle, {id, (1 2 3)}) means either doing nothing or applying (perm, (1 2 3)) on X, each with probability 1/2.

•
(left_shift, r) denotes shifting X to the left by r positions in a cyclic manner, i.e. applying (perm, (1 k  ... 2)r) to X.

•
(right_shift, r) denotes shifting X to the right by r positions in a cyclic manner, i.e. applying (perm, (1 2 ... k)r) to X.

2.2. Random cut
Given a sequence X of k cards, a random cut or random cyclic shift applies (left_shift, r) to X, where r is a uniformly random integer in  unknown to all parties.

2.2.1. Implementation
One of the ways to implement a random cut in real world is to repeatedly apply Hindu cuts (taking several cards from the bottom of the deck and putting them on the top) [23]. Ideally, in each cut, observers should be able to verify that the shuffler only makes a cyclic shift (and not any other permutation), but cannot tell the exact positions of the cards.1 Therefore, as suggested in [4], if we let all players take turn to cut the cards for long enough, every player should not be able to track of the state of the deck. Moreover, the state of the deck defined by a Markov chain rapidly converges to an almost uniform distribution.

Therefore, from now on we will treat a random cut as an oracle that shifts the deck into a uniformly random cyclic shift unknown to all parties. This is a sufficient assumption for the implementation of all protocols to work correctly since all the randomness in our protocols is generated from random cuts.

2.3. Random k-section cut
Given a sequence X of km cards, a random k-section cut applies (left_shift, rm) to X, where r is a uniformly random integer in  unknown to all parties. It is equivalent to a pile-shifting shuffle developed by Shinagawa et al. [20], and is a generalization of a random bisection cut developed by Mizuki and Sone [12].

2.3.1. Implementation
The most intuitive implementation of the random k-section cut, as suggested in [12], is to first divide the cards into k blocks, with each block consisting of m consecutive cards. Then, put each block into an envelope, apply the random cut to the sequence of envelopes, and take all cards out without changing order. (Alternatively, one may instead use rubber bands or paper clips to tie the cards in each block together.)


Download : Download high-res image (15KB)
Download : Download full-size image
Recently, Koch and Walzer [6] proposed an alternative way to implement the random k-section cut without requiring extra tools by using additional cards instead.

2.4. Random bit XOR protocol
Given a sequence of k bits 
, with each 
 encoded by a commitment 
, we want to securely XOR every input bit with the same uniformly random bit  unknown to all parties, resulting in the sequence 
. Theoretically, this is equivalent to applying (shuffle, {id, (1 2)(3 4)...( 2k)}) to the sequence of cards 
.

2.4.1. Implementation
Note that directly applying (shuffle, {id, (1 2)(3 4)...( 2k)}) requires a trusted third party to first select a random bit r and then apply the shuffle. Instead, the following implementation employs a random 2-section cut to achieve an equivalent result without requiring a trusted third party.

The implementation uses the same idea as the copy protocol developed by Mizuki and Sone [12]. First, arrange the cards as 
. Then, apply a random 2-section cut to X. Finally, for each , take the i-th and the ()-th cards from X in this order as the commitment of the i-th output bit.


Download : Download high-res image (71KB)
Download : Download full-size image
After applying the random 2-section cut, X will become either 
, 
 or 
, each with probability 1/2. In the former case, the commitment of every i-th output bit will be 
, which encodes 
; in the latter case, the commitment of every i-th output bit will be 
, which encodes 
. This verifies the correctness of the protocol.

2.5. Addition protocol for two integers in 
For , we introduce two encoding schemes of integers in  called ♣-scheme and ♡-scheme.

In the ♣-scheme, an integer a in  is encoded by a sequence of k consecutive face-down cards, all of them being

Image 2
except the ()-th card from the left being
Image 1
. This sequence is called 
, e.g. 
 is
Image 2
Image 1
Image 2
, which encodes 1 in .
Conversely, in the ♡-scheme, an integer a in  is encoded by a sequence of k consecutive face-down cards, all of them being

Image 1
except the ()-th card from the left being
Image 2
. This sequence is called 
, e.g. 
 is
Image 1
Image 1
Image 2
Image 1
, which encodes 2 in .
Given integers a and b in , with a encoded in ♡-scheme by a sequence 
, and b encoded in ♣-scheme by a sequence 
, we want to securely compute the sum  (mod k) and have the output encoded in ♡-scheme without using any additional card.

The idea of this protocol is that we first apply (right_shift, r) and (left_ shift, r) to X and Y, respectively, for a uniformly random  unknown to all parties, transforming a and b into  and . Then, turn over all cards in Y to reveal , and finally apply (left_shift, ) to X in order to make it encode . This technique was first used by Shinagawa et al. [20] in the context of using a regular k-gon card to encode each integer in .

2.5.1. Implementation
Like in the random bit XOR protocol, directly applying (right_shift, r) and (left_shift, r) to X and Y with the same r requires a trusted third party to first select a random integer r and then apply the shifts. Instead, the following implementation employs a random k-section cut to achieve an equivalent result without requiring a trusted third party.

First, take the cards from X and Y in the following order: the leftmost card of X, the rightmost card of Y, the second leftmost card of X, the second rightmost card of Y, and so on, and place them on a single row from left to right. The cards now form a new sequence 
.


Download : Download high-res image (22KB)
Download : Download full-size image
Apply a random k-section cut to Z, transforming the sequence into 
, 
, 
 for a uniformly random , where the indices are taken modulo k.


Download : Download high-res image (22KB)
Download : Download full-size image
Take the cards in Z from left to right and place them at these positions in X and Y in the following order: the leftmost position of X, the rightmost position of Y, the second leftmost position of X, the second rightmost position of Y, and so on. We now have sequences 
 and 
, which encode  (mod k) and  (mod k), respectively.


Download : Download high-res image (26KB)
Download : Download full-size image
Turn over all cards in Y to reveal . Note that this revelation does not leak any information about b because  has an equal probability to be any integer in  no matter what b is (see Appendix A.1 for a formal proof). Finally, we apply (left_shift, s) to X, transforming it into 
.


Download : Download high-res image (13KB)
Download : Download full-size image
Therefore, we now have a sequence X encoding  (mod k) in ♡-scheme as desired.

3. Our first protocol
We get back to the main problem of computing the equality function 
, 
. For each , let 
 (the sum in , not in ). Observe that the value of 
 depends only on 
. Therefore, we will instead develop a protocol to compute 
.2 The idea of this protocol is that for each , we inductively compute 
 in . Since 
 is at most k, its value in  does not change from its actual value in .

3.1. Summation of the first k bits
We will show that given two additional cards, one

Image 1
and one
Image 2
, we can compute 
 for every .
First, swap the two cards in the commitment of 
 and place an additional

Image 1
face-down to the right of them. The resulting sequence, called 
, is 
.

Download : Download high-res image (19KB)
Download : Download full-size image
Then, place an additional

Image 2
face-down to the right of the commitment of 
. The resulting sequence, called 
, is 
.

Download : Download high-res image (15KB)
Download : Download full-size image
Apply the addition protocol in Section 2.5 to compute the sum 
 and have the output stored in 
, which is now 
. We also have one

Image 1
and two
Image 2
s from 
 after we turned them over. These cards are called free cards and are available for us to use later in this protocol.

Download : Download high-res image (13KB)
Download : Download full-size image
Inductively, for each , after we finish computing 
, we now have a sequence 
 being 
. We also have one free

Image 1
and  free
Image 2
s from 
 after we turned them over. Append the free
Image 1
face-down to the right of 
, making the sequence become 
. Also, place the  free
Image 2
s face-down to the right of the commitment of 
. The resulting sequence, called 
, is now 
.

Download : Download high-res image (34KB)
Download : Download full-size image
Then, apply the addition protocol to compute the sum 
 and have the output stored in 
, which is now 
 as desired.


Download : Download high-res image (13KB)
Download : Download full-size image
Therefore, starting with one additional

Image 1
and one additional
Image 2
, we can compute the sum 
 for every .
For example, if 
, 
, and 
, at first we will have 
 encoding 
 and 
 encoding 
. After applying the addition protocol for the first time, we will have 
 encoding 
. After appending free cards, we will have 
 encoding 
 and 
 encoding 
. After applying the addition protocol for the second time, we will have 
 encoding 
 as desired.

3.2. The complete protocol
The protocol in Section 3.1 requires two additional cards to compute any 
. However, we can compute the equality function without using any additional card by the following protocol.

First, apply the random bit XOR protocol in Section 2.4 to transform the input sequence into 
 for a uniformly random bit . Then, turn over the two cards encoding 
 to reveal 
. Note that this revelation does not leak any information about 
 because 
 has an equal probability to be 0 or 1 no matter what 
 is (see Appendix A.2 for a formal proof).

If 
, then 
 if and only if 
 for every , which is equivalent to 
. Note that we now have one free

Image 1
and one free
Image 2
from the cards encoding 
 we just turned over. With these two additional cards, we can apply the protocol in Section 3.1 to compute the sum 
 as desired.
If 
, then 
 if and only if 
 for every , which is equivalent to 
 
. Therefore, we can swap the two cards encoding every bit so that each i-th bit becomes 
 
, and apply the same protocol to compute the sum 
 
.

Note that the final sum s of  bits is encoded in ♡-scheme by a row of n cards, and we have 
 if and only if s is zero, i.e. the

Image 2
card is located at the leftmost position. However, we do not want to reveal any information about s except whether it is zero or not. Therefore, we apply a final random cut to the sequence of  rightmost cards (all cards in the row except the leftmost one) to make all the cases where s is not zero indistinguishable (see Appendix A.3 for a formal proof). Finally, turn over all cards and locate the position of the
Image 2
. If it is at the leftmost position, then 
; otherwise, 
.
Throughout this protocol, we use one random 2-section cut in the random bit XOR protocol,  random k-section cuts to compute the sum of  bits, and one final random cut. Therefore, this protocol uses 2n cards and n shuffles.

4. Generalization of our first protocol
4.1. Computing other symmetric functions
A function 
 is symmetric if
 for any 
 and any permutation 
 of . A symmetric function f is doubly symmetric if
 
 
 
 for any 
. For example, the equality function is doubly symmetric, while the majority function is symmetric but not doubly symmetric. Other examples of doubly symmetric functions include 
 for an even n, and a function 
 defined to be the difference of the number of 0 s and 1 s in the input bits.

For any symmetric function 
, observe that any two n-tuples of input bits with the same number of 1 s always yield the same output (because we can rearrange the order of bits in one n-tuple to become another one). Hence, the value of 
 depends only on the sum 
 (the sum in ), so f can be written as
 
 for some function . Also, if f is doubly symmetric, we have  for every .

The technique used in our first protocol can be applied to compute any doubly symmetric function. Let 
 be any doubly symmetric function, and let  be a function such that
 
 Like in our first protocol, we apply the random bit XOR protocol in Section 2.4 to transform the input sequence into 
 for a uniformly random bit . Then, turn over the two cards encoding 
 to reveal 
. This does not leak any information about 
 because 
 has an equal probability to be 0 or 1 no matter what 
 is (see Appendix A.2 for a formal proof).

Since f is doubly symmetric, if 
, then
 
 
 
 Therefore, we can apply the protocol in Section 3.1 to compute the sum 
 as desired.

If 
, then we have 
 
 and
 
 
 
 
 
 
 
 
 
 Therefore, we can swap the two cards encoding every bit so that each i-th bit becomes 
 
, and apply the same protocol to compute the sum 
 
.

For each , let 
. Like in our first protocol, the final sum s of  bits is encoded in ♡-scheme by a row of n cards. Recall that in ♡-scheme, s is encoded by 
 where the only

Image 2
is located at the ()-th leftmost position. Therefore, we take the ()-th leftmost cards from the row for all 
, apply a random cut to them, and put them back into the row at their original positions. We perform this in order to make all the cases where the sum is in 
 indistinguishable. For example, if 
, we take the 2nd, 5th, and 7th leftmost cards from the row, apply a random cut to the sequence of these three cards, and put them back at the 2nd, 5th, and 7th leftmost position in the row (where the original 2nd card may now end up at the 2nd, 5th, or 7th position with equal probability).
We separately apply the above random cut for every  such that 
. These random cuts ensure that turning over the cards does not reveal any information about s except the value of  (see Appendix A.3 for a formal proof). Finally, we turn over all cards. Suppose the shown sequence is 
 for some integer t, then 
.

Throughout this protocol, we use one random 2-section cut in the random bit XOR protocol,  random k-section cuts to compute the sum of  bits, and at most  final random cuts. Therefore, this protocol uses 2n cards and at most  shuffles.

For a function f that is symmetric but not doubly symmetric, we directly apply the protocol in Section 3.1 to compute the sum 
 and apply the final random cuts the same way as above. It requires two additional cards, one

Image 1
and one
Image 2
, at the beginning. Therefore, this protocol uses  cards and at most  shuffles.
4.2. Comparison with other protocols
There is a voting protocol developed by Mizuki et al. [9] that can compute the sum of n input bits using only  cards. However, their protocol restricts the order of submission of the inputs in order to reuse cards encoding each input bit. Any protocol that the inputs are submitted simultaneously requires at least 2n cards as we need at least two cards to encode each input bit. Hence, our protocol is the optimal one for computing any doubly symmetric function, improving the previous protocol of Nishida et al. [15] which requires  cards.

For computing symmetric functions that are not doubly symmetric, the protocol of [15] also uses  cards to compute any symmetric function 
, but it uses as much as  shuffles due to the construction of every term of Shannon expansion. Their protocol has an advantage that it is committed-format. However, our protocol uses much fewer number of shuffles and also has an advantage that the output is not restricted to be binary, thus supporting functions with more than two possible outputs. (An example of such function is the majority function that supports the case of a tie for an even n, which has three possible outputs.)

5. Our second protocol
In this section, we will introduce a second protocol to compute the equality function 
.

5.1. AND function protocol
First, we will explain a protocol developed by Mizuki and Sone [12] that can compute the AND function of two bits using two additional cards, one

Image 1
and one
Image 2
.
Suppose we have commitments 
 and 
 of bits a and b, respectively. We place the two additional cards face-down as

Image 1
Image 2
, called 
, to form a commitment of 0.
Arrange the cards as 
, which encodes a sequence of bits . Then, apply (perm, (2 4 3)), apply a random 2-section cut, and apply (perm, (2 4 3)) to X. Note that these steps are theoretically equivalent to applying (shuffle, {id, (1 2)(3 5)(4 6)}) to X.


Download : Download high-res image (75KB)
Download : Download full-size image
After these operations, X now becomes either 
 or 
, 
, each with probability 1/2. The former encodes , and the latter encodes 
.

We turn over the two leftmost cards to reveal the first bit. This does not leak any information about a because the first bit has an equal probability to be 0 or 1 no matter what a is. If the first bit is 0, then the third bit is the output of the AND function; if the first bit is 1, then the second bit is the output of the AND function. This is true because
 

This protocol is committed-format, so we can use the output as an input to another function. Therefore, we can compute 
 by computing 
 in this order. Moreover, the two additional cards can be reused in each computation, so only two additional cards are sufficient for any k.

5.2. The complete protocol
To compute the equality function, we start in the same way as our first protocol by applying the random bit XOR protocol to transform the input sequence into 
 for a uniformly random bit . Then, turn over the two cards encoding 
 to reveal 
.

If 
, then 
 if and only if 
 for every , which is equivalent to 
. Therefore, 
, which can be computed by applying the AND function protocol in section 5.1 using two free cards from the cards encoding 
 we just turned over.

If 
, then 
 if and only if 
 for every , which is equivalent to 
 
 
 
. Therefore, 
 
 
 
, which can be computed by swapping the two cards encoding each bit and applying the same protocol.

Throughout this protocol, we use one random 2-section cut in the random bit XOR protocol and  random 2-section cuts to compute the AND function of  bits. Therefore, this protocol uses 2n cards and  shuffles, one less shuffle than our first protocol, and also has an advantage that it is committed-format.

6. Generalization of our second protocol
The technique used in our second protocol relies on the unique property of the equality function, so it cannot be applied to compute other symmetric functions. However, we can use a similar technique to compute the k-candidate n-variable equality function 
 (where there are k candidates in the election instead of two) using  cards for any .

6.1. Computing the k-candidate n-variable equality function
Analogously to the Boolean equality function, for 
, define 
 if 
, and 
 otherwise.

Let . Each player is given 2ℓ cards, ℓ

Image 1
s and ℓ
Image 2
s. An i-th player has an integer 
, indicating the candidate he/she prefers. We write 
 in a binary representation 
, where 
 for every . The i-th player then uses two cards to form a commitment of a bit 
 for each .
We have 
 if and only if 
 for every . Therefore, we can use our second protocol to compute 
 for each . Then, we have 
 as desired.

We use  shuffles to compute each bit 
, and  shuffles to compute the AND function of ℓ bits. Therefore, this protocol uses  cards and  shuffles, and it is also committed-format.

6.2. Comparison with other protocols
As we use ℓ bits to represent each integer 
, the k-candidate n-variable equality function can be viewed as a Boolean ℓn-variable function. Hence, we can directly apply the protocol of Nishida et al. [15] to compute this function (which is not symmetric), which requires  cards and as much as 
 shuffles. Therefore, our protocol uses fewer number of cards and much fewer number of shuffles than their protocol.

7. Future work
For computing the Boolean equality function, our second protocol is already optimal in terms of number of cards as it matches a trivial lower bound of 2n, and it is also committed-format. For computing other doubly symmetric functions, our first protocol is optimal in terms of number of cards but is not committed-format. This leaves an open problem to find a committed-format protocol to compute such doubly symmetric functions using 2n cards.

For computing symmetric functions that are not doubly symmetric, there is still a gap between our  and the trivial lower bound of 2n in terms of number of cards. This leaves an open problem to find a protocol that requires less than  cards, or to prove the lower bound of the number of required cards, both for a committed-format protocol and for any protocol.