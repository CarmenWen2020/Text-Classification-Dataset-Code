Abstract
The evaluation of randomness in pseudorandom numbers generators is of great importance in cryptography. For such an endeavor, there are numerous randomness testing tests. Many have been designed based on important laws of randomness, such as the central limit theorem and the law of large numbers. Recently, a novel test with three variants was proposed by Yongee Wang, based on the law of the iterated logarithm for the evaluation of pseudorandom numbers generators. Wang found severe vulnerabilities in known PRNG utilizing this test's application, which can be of great importance in evaluating cryptographic algorithms and random numbers generators. In this work, a simplification of the expressions given by Wang is presented to calculate the theoretical probabilities applied in the test to allow more efficient implementations for its three variants.

Keywords
PRNG
LIL test
Randomness statistical test
Law of the iterated logarithm
Cryptography

1. Introduction
Random numbers [1] are of great importance due to their vast applications in different branches of science, such as in statistics [2], computer science [3], [4], [5], [6], modeling [7], simulation [8], cryptography [9], [10], [11], [12] and other applications [13]. Random numbers can be generated from a physical device [14], a chaotic source [15] or a quantum processes [16], [17], [18], called a True Random Number Generator (TRNG) [15], [19]. But more often, they are usually generated from some computer program called Pseudo Random Number Generator (PRNG) [20] which, given an initial seed value, produces a sequence of deterministic numbers that must have a statistical distribution corresponding to an independent and equally distributed random variable [21], [22].

A PRNG design is a highly complex task since it must ensure that most of the properties required for a truly random sequence are met [21]. Thus, the evaluation of number generators using statistical tests [23], [24], [25], [26], [27] is of great importance in order to detect possible vulnerabilities in the security of cryptographic systems [28]. The best-known statistical test packages in the public domain are TestU01, the statistical test package implemented by the National Institute of Standard and Technology NIST SP800-22, and DIEHARD [29], [30]. But, depending on the environment, other tests that trace the non-randomness of sequences that are not traceable by other randomness tests, such as those proposed in [26], [27], should also be considered.

Wang, in [31], [32], [33], pointed out that NIST800-22 does not cover some of the essential laws of randomness. There are two fundamental limit theorems on random binary sequences: the central limit theorem and the law of the iterated logarithm (LIL). Numerous NIST SP800-22 tests cover the central limit theorem, while none of them check the LIL, same as the other batteries aforementioned. Thus, there is currently an increasing interest in finding new methods to check the LIL in random successions, as can be seen in [34]. Wang proposed statistical techniques based on LIL and statistical distance tests on pseudo-random generators to reduce Type II errors in the NIST SP800-22 test package [31], [32], [33]. He also performed three LIL test designs to evaluate PRNGs: weak, weak II, and strong, of which only the weak variant applies (see [31], [32], [33], [35]).

This paper proposes a more simplified form than the one given by Wang in [33] to calculate the theoretical probabilities used in the three variants of the LIL test. This simplification allows for a better implementation of the test in terms of efficiency and possibility of parallelization because, in the case of the weak-LIL test, independence between the way 
 and 
 is calculated, was obtained for ℵ formed by the union of two sets. In other words, Wang proposed a formula for calculating 
 depending on the previous calculation of 
. In this work, two new formulas are proposed to independently calculate these probabilities, advantageous for more efficient implementations in this test's specific case. In the weak-LIL II test, a simplification was obtained, and the results achieved by the weak-LIL test were applied in the weak-LIL II test because it was dependent on the former. For the strong-LIL test, there is also a more efficient way of obtaining the theoretical probabilities.

2. The law of the iterated logarithm
The law of the iterated logarithm was first presented by Khintchine (see [36]), and gave an optimal upper bound  for the fluctuations of a random walk. In what follows, we define  and the shorthand notation . Thus, the aforementioned upper bound is . Feller also described this law in [37], while Wang in [38] showed that the LIL also applied for p-random sequences (random in polynomial time). The LIL describes the scales of fluctuations of 
⁎
. For a non-empty chain 
⁎
, let(1)
 
 and(2)
⁎
 
 where  denotes the number of 1s in δ and 
⁎
 denotes the reduced number of 1s in δ. 
⁎
 measure the deviations of  from 
 
 in units of 
 
. The law of large numbers says that, for a pseudo random sequence ξ, the limit of 
 
 is 
 
, which corresponds to the frequency test in NIST SP800-22 [29]. But it says nothing about the reduced deviation 
⁎
. It is intuitively clear that, for a pseudo random sequence, ξ, 
⁎
 can take arbitrarily large values. Consider the following two theorems by Wang [33].

Theorem 1

For a sequence 
, where 
 is the set of infinite binary sequences, let(3)
 
 Then, for each p-random sequence 
, the following limits hold(4) 
 
 and(5) 
 

Proof

See Wang [33]. □

Theorem 2

For fixed 
, we have(6) 
 
⁎
 where Φ is the distribution Normal function.

Proof

See Wang [33]. □

The following Lemma from Wang [33] helps interpret 
⁎
 based approximation results into 
 based approximation. It is obtained by the fact that 
⁎
.

Lemma 1

For any 
, we have(7)
⁎

Proof

See Wang [33]. □

3. Description of the LIL test
In this section, the three variants of the LIL test are presented, the steps for evaluating pseudo-random generators, and some considerations applying technical distances given by Wang in [33], where the calculation of the theoretical probabilities is used.

3.1. Weak-LIL test design
Theorem 1 shows that a pseudo-random sequence should satisfy the LIL. In [33], the following test was proposed:

Definition 1 Weak LIL Test

Let  and . We say that a sequence ξ does not pass the weak -LIL test if 
, for all .

By definition, a sequence ξ passes the weak -LIL test if 
 reaches either  or  at some points in ℵ. In practice, it is important to choose appropriate points in the set ℵ for the test and calculate the probability that a random sequence ξ passes the weak -LIL test. In what follows, we present the calculation of the probabilities so that a sequence passes the weak -LIL test with the following choices of ℵ:
 for 
 and t given. Specifically, we will consider the cases for  and 
.

The probability 
 of a random sequence passing the weak 
-LIL test is given by the following expression, obtained from Theorem 2 and Lemma 1.(8)
 Now, for the probability 
 that a sequence randomly passes the weak -LIL test with ℵ as the union of two 
, the following Theorem from Wang [33] is given.

Theorem 3

For fixed  and , let , , 
, 
. We have(9)
 
 
 
 
 
 Alternatively, we have:(10)
 
 
 
 
 

Proof

See Wang [33]. □

The following algorithm is deduced from the expression (8) and Theorem 3 for the 
 computation.

Where the function  is the function that calculates the corresponding integral using the numerical method.

3.2. Weak-LIL II test design
At this point, it is considered the design of the weak-LIL II -test introduced by Wang in [33] with ℵ formed by three points.

Theorem 4

For fixed  and 
, 
, let , 
, and 
. Then we have(11)
 
  
  
 
 
 
 where(12)
(13)
(14)
 
 

Proof

See Wang [33]. □

3.3. Strong-LIL test design
In this subsection, the design of the strong LIL test given by Wang in [33] is presented.

Definition 2 Strong LIL Test

Let  and 
. We say that a sequence ξ passes the strong 
-LIL test if there exists 
 and 
 such that(15)
 and(16)

Alternatively, we say that a sequence ξ passes the strong 
-LIL test if there exist 
 such that (15) and (16) holds. We also have the following
Theorem 5

For fixed  and , let , 
 and 
. We have(17)
 
 
 
 
 
 where 
 and 
 denote the probability that a random sequence passes the strong 
-LIL test and strong 
-LIL test, respectively.

Proof

See Wang [33]. □

3.4. Evaluating pseudo-random number generators applying LIL test
To evaluate the quality of a pseudo-random number generator G, Wang in [33] proposed the following methodology, firstly a sequence of fixed length n is selected, a value  and the different subsets 
 in . Then, for some sets 
 one follows the next steps.

1.
Let 
 
, .

2.
Use G to construct a set of  binary sequences of length n.

3.
For each ℵ, calculate the probability 
 that these sequences pass the weak 
-LIL test with 
 (respectively, 
 for 
).

4.
Calculate the average of the distance of the absolute probability(18)
 
 
 and the root-mean-square deviation(19)
 
 where(20)
 and(21)

5.
Decision criteria: the smaller the 
 and 
, the better the generator G.

3.5. Some considerations about the LIL test and random generator evaluation
The distribution induced by the function 
 defines a probability measure on the real line . Let 
 be a set of m sequences with a standard probability definition, i.e., for each 
, 
. Then each set 
, induces a probability measure 
 on R given by(22)
 For 
, we use 
 to denote the corresponding probability measure induced by the uniform distribution, where 
 is the set of a binary string of length n. By definition, if ℜ is the set of all length n sequences generated by a pseudo-random number generator, then the difference between 
 and 
 is negligible.

By Theorem 2, the distribution induced by the function 
⁎
 of the sequence ξ uniformly chosen could be approximated by a Normal distribution of mean 0 and variance 1. Then, the measure 
 can be calculated as(23)
 
 where ϕ is the Normal density function. Then, to evaluate a pseudo random number generator G, first choose a list of testing points 
 (e.g., 
). Then, use G to generate a set 
 of m sequences. Finally, compare the distances between the two probability measures 
 and 
 for 
.

A generator G is considered “good”, if for sufficiently large m (e.g., ), the distances between 
 and 
 are negligible (or smaller than a given threshold). There are various definitions of statistical distances for probability measures, as the following: Total variation distance(24)
 Hellinger distance(25)
 
 
 and the root-mean-square deviation(26)
 
 where B is a partition of the real straight line  that is defined as . In [31], [32], [33], [35] the evaluations of different PRNGs are presented by means of the use of these distances.

4. Theoretical probabilities calculation of the LIL test
This section presents the improvement of the calculation of the theoretical probabilities that must be expected for sequences considered random to be applied in the test. As seen in the previous section, Wang proved some Theorems for calculating these probabilities. Still, in practice, the computations could be slow when analyzing samples of different sizes as described in subsection 3.4. Thus, the Corollaries that simplify the expressions given by Wang are given in this section. With these results, more optimized algorithms can be obtained to calculate these probabilities in each of the variants of the test described here.

4.1. Improvement of the weak-LIL test
This subsection presents the results obtained from a simplification of the theoretical probabilities of the weak-LIL test. From the results obtained by Wang [33], in equation (8) and Theorem 3, the following Corollary can be stated for the improvement of the calculation of the theoretical probabilities of the weak-LIL test, where we let 
⁎
 
 and similarly 
⁎
⁎
.

Corollary 1

For fixed , let  and 
. We have(27)
⁎

Proof

By equation (8), we have the probability represented in terms of the Normal distribution, and now we proceed to represent it in terms of the error function, as follows.(28)
 
 
 
 where,(29)
 
 
 
 
⁎
 Substituting the result of expression (29) in (28) and simplifying, we obtain 
⁎
⁎
. □

Corollary 2

For fixed  and , let , , we have(30)
 
 
 
⁎
 
 Alternatively we have(31)
 
 
 
 
⁎
 

Proof

i) From the expression (9) in Theorem 3 we have that:(32)
 
 
 
 
 
 
 
(33)
 
 
⁎
 
 hence:(34)
 
 
 
 
 
(35)
 
 
 
⁎
 
(36)
 
 
 
⁎
 
 
 
 
 where,(37)
 
 
 
 
 
 
⁎
 taking into account that(38)
 
 
(39)
 
 
 are the error function and complementary error function, respectively. Therefore, substituting this result, and the expression (27), in (9), we obtain (30).

ii) Similar from Theorem 3 the alternative expression (31) can be proved since:(40)
 
 
 
⁎
 
(41)
 
 
 
⁎
 
 
 
 
 where(42)
 
 
 
 
 
 
⁎
 simplifying we get that(43)
 
 
 
 
 
⁎
 
⁎
 With this result and substituting appropriately, equation (31) is obtained. □

As can be seen, the formula obtained in (30) does not depend on 
 hence the probability 
 can be calculated independently. Taking advantage of the reduction obtained for the computation of 
 and 
 by means of the following sequential algorithm, a better calculation efficiency is obtained, see Fig. 1.

Fig. 1
Download : Download high-res image (62KB)
Download : Download full-size image
Fig. 1. Comparison of times of the implementation of the Algorithm 1, Algorithm 2, Algorithm 3, Algorithm 4.

For the obtained independence the following algorithms are given for the parallel calculation of these probabilities.

4.2. Improvement of the weak-LIL II test
The Theorem 4 provides a way to compute the probability 
 where ℵ contains three points. By recursion and applying the method explained in [33], we can obtain the probability 
 when ℵ contains more than three points, but this is a work more difficult and possibly less useful in practice. The next corollary provides a more simplified expression than the Theorem 4, for better implementations.

Corollary 3

For fixed  and 
, 
, let , 
. We have(44)
 
 
 
 
 
 
 where
⁎
 
⁎
 
⁎
 
⁎
 

Proof

Starting from the triple integral on the equation (11) of Theorem 4, which will be denoted by , we have(45)
 
  
  
 
 
 
 Integrating  first with respect δ and then with respect to λ we have to 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(46)
 
 
 
 
 
 Integrating the last expression respect to λ we have(47)
 
 
 
 
 
 
 
 where
 
 
 
 
 
 
 
 
 
 
(48)
 
⁎
 
⁎
 
 
 
 substituting equation (48) in (47) and simplifying we have(49)
 
 
⁎
 
⁎
 
⁎
 
 
 
 Substituting now in the equation (11) the expressions given in (49) and (30), and simplifying, the expression (44) is obtained and the proof is finished. □

4.3. Improvement of the strong-LIL test
A simplification for the calculation of 
 is given in the following corollary.

Corollary 4

For fixed  and , let , 
 and 
, we have to(50)
 
 
 
 

Proof

Starting from the double integral given in eq. (17), applying properties and integrating with respect to δ we have
 
 
 
 
 
 
 
(51)
 
 
 
 
 
 
 
 
 Substituting expression (51) in (17) we have (50) and the poof is concluded. □

5. Experimental results
In this section, we present the experimental results of implementing the algorithms proposed for calculating the theoretical probabilities of the LIL test. From the point of view of implementation, Algorithm 2 is of greater efficiency concerning Algorithm 1, and taking advantage of the independence between the computation of the probabilities 
 and 
. Algorithm 3, Algorithm 4 could be implemented in parallel by decreasing the time of their computations, as illustrated by the results in Fig. 1.

Algorithm 1
Download : Download high-res image (84KB)
Download : Download full-size image
Algorithm 1. Computation of 
.

The first bar of the graph, corresponding to Algorithm 1, indicates that it takes just under 3 seconds for the computation 
 and 
 with 
, and the time increases as shown by the other bars when the value of n is increased to 
 which takes little more than 8 seconds, taking as initial value 
. In the case of Algorithm 2 for the sequential calculation, and 3 and 4 for its parallel implementation, given here, the computation time decreases considerably to centimes of seconds, as illustrates in Fig. 1, with 
. Table 1 shows the calculated probabilities 
 and 
 with 

Algorithm 2
Download : Download high-res image (79KB)
Download : Download full-size image
Algorithm 2. Computation of 
.

Algorithm 3
Download : Download high-res image (32KB)
Download : Download full-size image
Algorithm 3. Computation of 
.

Algorithm 4
Download : Download high-res image (58KB)
Download : Download full-size image
Algorithm 4. Compute of P(α,ℵ).


Table 1. Probability of the weak LIL-(0.1,ℵ) test.

α= 0.1	ℵ0(226)	ℵ1(227)	ℵ2(228)	ℵ3(229)	ℵ4(230)	ℵ5(231)	ℵ6(232)	ℵ7(233)	ℵ8(234)
ℵ0(226)	0.03044	0.05085	0.05441	0.05540	0.05544	0.05507	0.05453	0.05394	0.05334
ℵ1(227)		0.02938	0.04918	0.05263	0.05361	0.05365	0.05331	0.05281	0.05226
ℵ2(228)			0.02838	0.04762	0.05097	0.05193	0.05199	0.05168	0.05121
ℵ3(229)				0.02746	0.04616	0.04942	0.05036	0.05043	0.05014
ℵ4(230)					0.02661	0.04479	0.04797	0.04888	0.04897
ℵ5(231)						0.02580	0.04351	0.04660	0.04750
ℵ6(232)							0.02505	0.04230	0.04531
ℵ7(233)								0.02434	0.04116
ℵ8(234)									0.02367
From these results, it is possible to carry out more extensive experiments to evaluate PRNG with the LIL test. Take different n values means the analysis of samples with these sizes in a run of the LIL-weak test.

The following is an example of the evaluation results using the methodology seen in the previous section, applying for the comparison of computation time Algorithm 1, Algorithm 2. For the experiments, a file was taken as a sample encrypted with the AES algorithm in Counter (CTR) mode [39], and 1000 sequences were analyzed in the set 
 (see Fig. 2). Experiments were performed on an Intel (R) Core (TM) i3 CPU: 3.10 GHz with 2G of RAM.

Fig. 2
Download : Download high-res image (141KB)
Download : Download full-size image
Fig. 2. The distributions 
, with n = 212,…,220.

6. Conclusions
In this paper, the LIL test design was revised in its three variants (weak-LIL, weak-LIL II, and strong-LIL), introduced in recent works to evaluate the quality of pseudorandom number generators. A simplification of the formulas given in [33] was made to calculate the theoretical probabilities that a sequence must follow to pass the test based on the law of the iterated logarithm. The expressions obtained in the weak-LIL test and weak-LIL II test cases allow the parallelization and a considerable improvement of efficiency in its implementations by the independence reached in its calculation. In the strong-LIL test case, a better simplification was obtained, which guarantees more efficient implementations of this test variant. In this way, more extensive and demanding PRNG evaluations of the sample sizes used by Wang, which used sample sizes of up to 234 bits, could be performed.