Abstract
We show that the CNF satisfiability problem can be solved in O⁎(1.2226m) time, where m is the number of clauses in the formula, improving the known upper bounds O⁎(1.234m) given by Yamamoto 15 years ago and O⁎(1.239m) given by Hirsch 22 years ago. By using an amortized technique and careful case analysis, we successfully avoid the bottlenecks in previous algorithms and get the improvement.

Keywords
SAT
Exact algorithms
Parameterized algorithms
Amortized analysis

1. Introduction
The problem of testing the satisfiability of a propositional formula in conjunctive normal form (CNF), denoted by SAT, is one of the most fundamental problems in computer science. It is the first problem proved to be NP-complete [2] and plays an important role in computational complexity and artificial intelligence [9]. To make the problem tractable, a large number of papers studied it from the view of heuristic algorithms, approximation algorithms, randomized algorithms, and exact algorithms. In this paper, we study exact algorithms for SAT with guaranteed theoretical running time bounds.

1.1. Related works
To evaluate the running time bound, there are three frequently used measures: the number of variables n, the number of clauses m, and the length of the whole input L, i.e., the sum of the lengths of all clauses. The trivial algorithm to check all possible assignments runs in 
⁎
 time.1 A nontrivial bound better than 
⁎
 was obtained in [5], which is 
⁎
. Later better upper bounds were introduced in [6] and [21]. However, no algorithm with running time bound 
⁎
 for some constant  was found, despite decades of hard work. Strong Exponential Time Hypothesis (SETH) [14], a well-known conjecture, conjectures the non-existence of such algorithms. On the other hand, for a restricted version, the k-SAT problem (where each clause in the CNF-formula contains at most k literals), a series of significant results have been developed. A branch-and-bound technique was introduced in [16] and [3], which can solve k-SAT in 
⁎
 time where 
 is the largest root of the function 
. After this, a series of improvements on the upper bounds for k-SAT have been made. Most of them are based on randomized algorithms, such as the 
⁎
 bound in [19] and the 
⁎
 bound in [4]. Recently a new randomized algorithm for k-SAT with a better running time bound was introduced [11]. However, the running time bound became complicated to present.

When the length of the input L is taken as the measure, from the first algorithm with running time bound 
⁎
 by Gelder [10], the result was improved frequently. Let us quote the bound 
⁎
 by Kullmann and Luckhardt [15], 
⁎
 by Hirsch [12], 
⁎
 by Hirsch [13], and 
⁎
 by Wahlström [22]. Currently, the best known bound was 
⁎
 obtained by Chen and Liu [1].

Another important measure is the number of clauses m. Monien, Speckenmeyer, and Vornberger [17] gave an 
⁎
-time algorithm in 1981, which was improved to 
⁎
 by Hirsch [12] in 1998. Then it took seven years for Yamamoto to slightly improve Hirsch's bound to 
⁎
 [23]. In this paper, we will significantly improve Yamamoto's bound obtained 15 years ago. Previous and our results are listed in Table 1.


Table 1. Previous and our upper bounds for SAT.

Running Times	References
O⁎(1.260m)	[17]
O⁎(1.239m)	[12]
O⁎(1.234m)	[23]
O⁎(1.2226m)	This paper
1.2. The techniques
All algorithms in Table 1 are branch-and-search algorithms. The branch-and-search idea is simple and practical: we iteratively branch on a literal into two branches by letting it be 1 or 0. Consider an -literal (a literal such that itself appears in a clauses and the negation of it appears in b clauses). In the branching where the literal is assigned 1, we can reduce a clauses; in the branching where the literal is assigned 0, we can reduce b clauses. We hope that the values of a and b are larger so that we can reduce the instance to a greater extent. There are several techniques to deal with -literals with small values of a and b, say one of them is at most 2. Thus the worst case will become to branch on a -literal, in which we can only get a branching vector of  and a branching factor 1.2600. We get the bound of 
⁎
 [17]. It seems that branching on -literals is unavoidable. Hirsch [12] showed that after branching on a -literal we can always branch with a branching vector at least  or  subsequently. Combining the bad branching vector  with the good branching vector  or , he got a better worst-case and then improved the running time bound to 
⁎
. Yamamoto [23] further showed that the worst cases in Hirsch's algorithm would not always happen: we can further branch with  or  at the third level, i.e., after branching with  or  after branching with . Yamamoto considered more levels of branching but could only slightly improve the bound to 
⁎
. The improvement is very slow, and we seem to have reached a bottleneck.

Our algorithm is still a branch-and-search algorithm, following the main framework in the previous algorithms. We still can not avoid branching on -literals, otherwise, the worst case would be to branch on -literals or -literals, and the bound would be improved to 
⁎
. We also show that after branching on a -literal we can further branch with better branching vectors. However, the traditional analysis to combine several levels of branchings into a big branching is somewhat complicated and limited. To exhibit the relations among good and bad branchings in our algorithm and also to use as many good branchings as possible to even out the bad ones, we will use an amortized technique to analyze the running time bound. To get the claimed result, we also need to use some new reduction and branching rules and deep analysis of the structure.

2. Preliminaries
Let 
 denote a set of n Boolean variables. For each variable 
 , a literal is either 
 or the negation of it 
 
 (we use 
 to denote the negation of a literal x, and then 
). A clause on V is a set of literals on V without a negation of any literal in it, which means x and 
 cannot be contained simultaneously in a clause for any variable . A CNF-formula on V is a set of clauses 
. We will use 
 to denote the number of clauses in . An assignment for V is a map . A clause 
 on V is satisfied by A if and only if there exists a literal x in 
 such that . A CNF-formula is satisfied by an assignment A if and only if each clause in it is satisfied by A. An assignment A that makes a CNF-formula  satisfied is called a satisfying assignment for . Given a CNF-formula  on a set of variables V, the SAT problem is to check the existence of a satisfying assignment for .

The degree of a literal x in  is the number of clauses in  containing it. The total degree of a literal x is the degree of x plus the degree of 
. If the degree of x is a (resp., at least a or at most a) and the degree of 
 is b, we say x is an -literal (resp., an 
-literal or an 
-literal). Similarly, we can define 
-literal, 
-literal, 
-literal, 
-literal and so on. Note that a literal x is an -literal if and only if 
 is a -literal. A clause containing exactly c literals is called a c-clause. A pair of literals x and y is called a coincident pair if there are at least two clauses containing them simultaneously.

Our algorithm will first apply reduction rules to reduce the instance and then apply branching rules to search for a solution when the instance cannot be further reduced. Next, we introduce the reduction rules.

3. Reduction rules
We have five reduction rules. The correctness of the first two is easy to show and used in the literature [7].

R-Rule 1 Elimination of 1-clauses and pure literals

If the CNF-formula contains a 1-clause  or an -literal x with , assign .

R-Rule 2 Elimination of subsumptions

If the CNF-formula contains two clauses C and 
 such that 
, then delete 
.

The following proposition is known as the resolution technique in the literature, which was first proved in [20], and then used in many SAT algorithms.

Definition 1 Resolution on a variable

Let  be a CNF-formula containing a variable x. Let 
 be the clauses containing x and let 
 be the clauses containing 
. Resolving on variable x is to construct a new CNF-formula 
 by the following method: for each  and , add the clause 
 to the formula if it does not contain both a literal and the negation of it; delete 
 () and 
 () from the formula.

We may always use 
 to denote the CNF-formula after resolving a variable x in .
Proposition 1

[20] Let  be a CNF-formula containing a variable x and 
 be the CNF-formula after resolving on variable x. Then  has a satisfying assignment if and only if 
 does.

R-Rule 3 Resolving on some variables

If there is an -literal x such that  and  or  and , then resolve x in , i.e., replace  with 
.

We also use a simple but powerful concept called autarkic set, based on which we can design several reduction rules.

Definition 2 Autarkic sets

A set X of literals is called an autarkic set if each clause containing a negation of a literal in X also contains a literal in X.

The following lemma is folklore.

Lemma 1

If a CNF-formula  has a satisfying assignment, then for any autarkic set of it there is a satisfying assignment with all literals in the autarkic set being assigned 1.

Proof

If we assign 1 to all literals in an autarkic set X, then any clause containing either a literal in X or a negation of a literal in X is satisfied, since each clause containing a negation of a literal in X also contains a literal in X. Any other assignment of literals in X can only satisfy a subset of these clauses. So we can simply assign 1 to all literals in X. □

The following reduction rule was firstly used in [12]. It is an application of a special autarkic set.

R-Rule 4

[12] If each clause containing a 
-literal also contains a 
-literal, assign 1 to each 
-literal.

Our algorithm also needs to eliminate another kind of autarkic sets.

R-Rule 5

Let X be the set of -literals x such that there is a clause containing both x and a 
-literal. If each clause containing a negation of a literal in X also contains a -literal, assign 1 to each literal in X.

Each clause containing a negation of a literal  also contains a -literal y. Since 
 is a -literal, we know that y is also in X. Thus X is an autarkic set. In this reduction rule, the requirement of ‘a clause containing both x and a 
-literal’ plays no role in establishing X to be an autarkic set. This requirement is used to identify a particular subset of -literals, which will be useful in our analysis.

Lemma 2

After applying any of the above reduction rules, the satisfiability of the formula does not change. Except for the application of R-Rule 3 on a -literal where the number of clauses does not increase, each application of other reduction rules decreases the clause number by at least 1.

Definition 3 Reduced formulas

A formula is called reduced if none of the five reduction rules can be applied to the formula.

For an instance , we will use  to denote the resulting reduced formula after iteratively applying the reduction rules on .

Lemma 3

Given a formula, we can apply the five reduction rules in polynomial time to change it to a reduced formula.

Proof

It is easy to see that each reduction rule can be applied in polynomial time. Since each reduction rule either assigns a literal to 1 or resolves a variable, we know that we can apply at most n times of reduction rules. Thus, the total running time is bounded by a polynomial. □

Lemma 4

Let  be a reduced formula. Then there is no 1-clause, -literal or 
-literal with  in . Furthermore, the total degree of any literal in  is at least 5.

Proof

If there is a -literal, then R-Rule 1 would be applicable. If there is a -literal, then R-Rule 3 would be applicable. If there is a -literal, then R-Rule 3 would be applicable. If there is a 1-clause, then R-Rule 1 would be applicable. All these contradict the fact that  is reduced.

If a literal has a total degree at most 4, then it must be a  or 
 or 
-literal. For the last case, the negation of the literal is a 
-literal. □

4. Branch-and-search paradigms
Our algorithm will first apply our reduction rules to reduce the instance. When no reduction rule can be applied anymore, we will branch to search for a solution. Our branching rule is simple. We take a literal x and branch on it into two sub-instances. In one sub-instance we assign  and in the other one we assign , i.e., we get two sub instances 
 and 
. Selecting different literals to branch will lead to different algorithms. We want to select ‘good’ literals to branch on such that the size of the sub instances can be reduced fast.

We use the number m of clauses to evaluate the size of the formula. Assume the number of clauses of the current instance is m. If a branching operation branches into l sub-branches such that the number of clauses in the i-th sub-instance decreases by at least 
, we say this operation branches with a branching vector 
. The largest root of the function 
 is called the branching factor. If γ is the maximum branching factor among all branching factors in an algorithm, then the running time of the algorithm is bounded by 
⁎
. More details about the analysis and how to solve recurrences can be found in the monograph [8]. The following property is frequently used in the paper: for two branching vectors 
 and 
, if it holds that 
 for each i, then we say B covers C. The corresponding branching factor of a branching vector C is not greater than the corresponding branching factor of a branching vector that covers C.

4.1. Good formulas & bad formulas
Similar to the technique used by Niedermeier and Rossmanith to solve the 3-hitting set problem [18], we also classify formulas in our algorithm into two classes: good formulas and bad formulas. For good formulas, we may be able to branch with good branching vectors. For bad formulas, we may only be able to get bad branching vectors. We will show that bad formulas will not appear frequently. Then we can use an amortized analysis to get better branching vectors. To make the amortized analysis easy to follow, we will use the substitution method to prove our bounds. The precise definitions of good and bad formulas are given below.

Definition 4 Good formulas & bad formulas

A formula  is a bad formula if and only if the following four conditions are satisfied

(1)
 only contains -literals, -literals and -literals.

(2)
There is no coincident pair.

(3)
There is no 2-clause.

(4)
There is no clause containing a -literal and a 
-literal simultaneously.

A formula is good if it is not a bad formula.
4.2. The algorithm and its analysis
Recall that, for an instance ,  is the resulting reduced instance after applying the reduction rules on , and 
 is the number of clauses in . We have the following important lemmas, which are the base for us to establish the running time bound.

Lemma 5

Let  be a CNF-formula. It holds that 
. Furthermore, if  is good, then either  is good or 
.

Proof

By Lemma 2, we have that 
. Next, we assume that  is good.

If , obviously  is good. So we assume that some R-Rules are applied. By Lemma 2, we know that if 
 then only R-Rule 3 is applied on -literals. For any 
 with a -literal x in it, we show that after applying R-Rule 3 on x the resulting instance 
 is good. Let the two clauses containing x in 
 be 
 and 
, the two clauses containing 
 be 
 and 
. If 
, then all 
 for each  are in 
. If one of 
, 
, 
 and 
 contains at least three literals, then we will get some coincident pair. Otherwise, each 
 is a 2-clause. For any case, 
 is good. □

Lemma 6

If the formula  is reduced and bad, then our algorithm can branch with either a branching vector covered by  or , or a branching vector  such that the formula in each branch is good.

Lemma 7

If the formula to branch is reduced and good, then our algorithm can branch with either a branching vector covered by one of , , and , or a branching vector  or  such that the formula in each branch is good.

The proof of Lemma 6 and Lemma 7 are given in Sections 6.1 and 6.2, respectively. Next, we prove the running time bound of the algorithm based on Lemma 5, Lemma 6, and Lemma 7.

Theorem 1

SAT can be solved in 
⁎
 time.

Proof

We use  to denote the size of the search tree (number of nodes in the tree) generated by the algorithm running on an instance . We only need to prove that 
. To prove the theorem, we will show that there are two constants 
 and 
 such that(1)
 and(2)

First of all, we show that we can assume  is a reduced instance without loss of generality. If the current instance  with m clauses is not a reduced one, our algorithm will apply reduction rules on it to get a reduced instance 
⁎
 with 
⁎
 clauses. To prove that (1) and (2) hold for , we only need to prove that (1) and (2) hold for 
⁎
. The reason is based on the following observations. If both of  and 
⁎
 are good, then it holds that 
⁎
 since 
⁎
 by Lemma 5. If both of  and 
⁎
 are bad, the inequality holds too. If  is bad and 
⁎
 is good, then it holds that 
⁎
. If  is good and 
⁎
 is bad, then it still holds that 
⁎
 because now we have 
⁎
 by Lemma 5 and then 
.

Next, we simply assume that the instance  is reduced and use 
 and 
 to denote the two sub instances generated by our branching operations. We use the substitution method to prove (1) and (2).

Assume that 
 (where 
 if  is good and 
 if  is bad) holds for all instances  with less than m clauses. We show that it also holds for instances with m clauses.

First, we consider the case where  is bad. According to Lemma 6, there are two cases. For the first case of branching with a vector  or , we have that
 For the second case of branching with a vector , the two sub instances are good, we have that

Second, we consider the case where  is good. According to Lemma 7, there are two cases.

In the first case, the branching vector is  or  or . If it is  or , we have that
 where 
. If the branching vector is , we have that
 where 
.

For the second case of branching with a vector  or  such that the two sub instances are good, we have that

We have proved that (1) and (2) hold for . Thus, it holds that 
, no matter whether  is good or bad. □

5. Some properties
Before giving the detailed steps of the branching operations, we give some properties that will be used to simplify our presentation and analysis.

In a branching operation, we need to analyze the branching vector, i.e., the number of clauses decreased in each branching. Sometimes we can get a branching vector good enough for our analysis, such as branching vectors , , and . Sometimes the branching vector is not good enough and we still need to prove the remaining formulas are good, which will allow us to use amortization. Usually, we will fall into one of the following two cases:

1.
Some variables are assigned values (including applying R-Rule 1) and then some clauses are deleted because some literals in them are assigned 1. We need to prove that the remaining formula is good.

2.
R-Rule 3 is applied and we need to prove that the remaining formula is good.

We will use the following two lemmas to help us handle these two cases.

Lemma 8

Let  be a formula containing a 
 or 
-literal y. Assume the total degree of y is . If we delete from  at most  clauses and some literals other than y and 
, where at least one deleted clause contains y, then the resulting formula is good.

Proof

Since the total degree of y is a, at least one clause containing y or 
 will not be deleted. Then y or 
 will be a 
-literal in the remaining formula. Thus the formula is good. □

Corollary 1

Let  be a reduced formula containing only 
, 
 and 
-literals. For any literal x in it with degree at most 4, the formula 
 is good.

Proof

By Lemma 4, we know that the total degree of any literal in  is at least 5 and  does not contain any 1-clauses. Note that 
 is obtained from  by deleting all clauses containing x and deleting the literal 
. Any literal different from x in a clause containing x will be the literal y in Lemma 8. By Lemma 8, we know that the corollary holds. □

Lemma 9

Let  be a formula containing a 
-literal x and at least two different 
-literals other than x and 
. It holds that either 
 and 
 is a good formula or 
.

Proof

Let the unique clause containing x be C and the clauses containing 
 be 
. Let y and z be two different 
-literals other than x and 
, where y and z can be each other's negation.

It is easy to see that resolving on x will decrease the number of clauses by at least 1. We assume that the number of clauses decreases by exactly 1 after resolving on x and show for this case the formula 
 must be good. For this case, the  clauses 
 are deleted and all the l clauses 
  are added in 
.

Case 1. x is a -literal: after resolving on x, the degree of any literal does not increase and no literal other than x and 
 disappears. So y and z are still 
-literals, witnessing the goodness of 
.

Case 2. x is a 
-literal: We further distinguish two cases:  and . If , then any pair of literals in  will be a coincident pair in 
. Thus, 
 is good. If , then at most one literal the degree of who will increase after resolving on x, since only the degree of literals in  will increase. So one of y and z will be remained as a 
-literal in 
. Thus, 
 is good. □

6. Detailed branching operations
In this section, we show the detailed branching operations in Algorithm 1. Recall that we only branch on reduced formulas. The detailed branching steps for bad and good formulas are given in Sec. 6.1 and 6.2, respectively. For a bad formula, if there exist  or -literals, then deal with them. Else we deal with -literals. For a good formula, we first deal with 
 or 
-literals; second deal with -literals (and also -literals); third deal with 
-literals (and also 
-literals); last there are only -literals and we deal with them.

The main results of these steps are summarized in the following two tables (Table 2, Table 3), where the number with ‘⁎’ in the ‘Vectors’ column means the corresponding branch will leave a good formula. From the two tables, we can see that direct analysis will get a bound of 
⁎
 since the largest branching factor is 1.2600. This does not use amortization. Our deep analysis in the proof of Theorem 1 shows that we can improve the bound to 
⁎
.


Table 2. Branching for Bad Formulas.

Cases	Literals	Vectors	Factors
Case 1	(3,4)-literals	(3,4)	1.2208
Case 2	(3,3)-literals	(3⁎,3⁎)	1.2600

Table 3. Branching for Good Formulas.

Cases	Literals	Vectors	Factors
Case 1	(3,5+)-literals	(3,5)	1.1939
Case 1	(4+,4+)-literals	(4,4)	1.1893
Case 2	(3,4)-literals	(4,4)	1.1893
(3,5) or (5,3)	1.1939
(3⁎,4⁎) or (4⁎,3⁎)	1.2208
Case 3	(2,3+)-literals	(4,4)	1.1893
(3,5) or (5,3)	1.1939
(3⁎,4⁎) or (4⁎,3⁎)	1.2208
Case 4	(3,3)-literals	(4,4)	1.1893
(3,5) or (5,3)	1.1939
(3⁎,4⁎) or (4⁎,3⁎)	1.2208
6.1.  is a bad formula
Case 1.  contains a -literal x: We branch on x into two branchings 
 and 
. The branching vector is .

Case 2.  only contains -literals: We branch on an arbitrary literal x into two branchings 
 and 
. The branching vector is . However, the two sub-instances in the two branchings are good formulas by Corollary 1.

6.2.  is a good formula
Case 1.  contains a 
 or 
-literal x: Branch on x into two branchings 
 and 
. The branching vector will be at least  or .

Case 2.  contains a -literal (but no 
 or 
-literal): We further distinguish several cases to analyze the branching vector.

Case 2.1.  also contains a 
-literal y: We first branch on an arbitrary -literal x into two branchings 
 and 
. If there is a clause containing both x and y, then in the branching 
, the degree of y is at most 1. Thus y will become a 
-literal or 
-literal in 
 and we will further apply R-Rule 1 or 3 on y to decrease the number of clauses by at least 1. We can get a branching vector at least .

If there is a clause containing both 
 and y, then in the branching 
, the degree of y is at most 1. We apply R-Rule 1 or 3 on y to further decrease the number of clauses by at least 1. We can get a branching vector at least .

The remaining case is that the clauses containing x or 
 does not contain y. For this case, we can only get a branching vector . However, in each branching of 
 and 
, the new instance is a good formula, because there is at least one 
-literal y in them.

Case 2.2.  contains only -literals, -literals and -literals: Let Y be the set of -literals 
 such that there is a clause containing both 
 and a 
-literal.

Case 2.2.1. : There is a literal  and a clause containing 
 which does not contain any -literals, otherwise R-Rule 5 could be applied and  would not be a reduced instance. Thus the clause containing 
 will contain some 
-literals. We branch on x with a branching vector . By Lemma 8, we know that both branchings 
 and 
 are good formulas.

Case 2.2.2. : For this case, -literals appear in clauses containing only -literals. Now Conditions (1) and (4) in the definition of bad formulas hold. Since  is a good formula now, we know either Condition (2) or Condition (3) will not hold. Thus there is either a 2-clause or a coincident pair.

First, we assume that  contains a coincident pair . If x is a -literal, then y must be a 
-literal. For this case, we branch on x into two branchings 
 and 
. In the branching 
, literal y becomes a 
-literal or a 
-literal and we can reduce the number of clauses by 1 by applying R-Rule 3 or R-Rule 1 on y. We get a branching vector . If both of x and y are -literals, we branch on an arbitrary -literal with a branching vector . Furthermore, in each branching, the instance is a good formula because there is either a coincident pair  or one of x and y becomes a literal of degree at most 2. The remaining case is that both of x and y are -literals. For this case, we branch on x into two branchings 
 and 
 with a branching vector . The formula 
 is good because literal y becomes a 
-literal. The formula 
 is good by Lemma 8. Notice that for this case in  the clauses containing 
 cannot contain any -literal and then each of them must contain another 
-literal.

Second, we assume that  does not contain any coincident pair and there is a 2-clause . We branch on x into two branchings 
 and 
. In the branching 
, we get a 1-clause containing only y. Furthermore, 
 has at least two clauses containing y because y and 
 do not form a coincident pair in . We apply R-Rule 1 on y and can further decrease the number of clauses by at least 2. We get a branching vector at least .

Case 3.  contains a 
-literal (but no 
 or 
-literal): Now  contains only 
-literals, 
-literals and -literals. We consider the following subcases.

Case 3.1. There is a 2-clause  containing a 
-literal x: We do a deeper analysis by considering different cases.

Case 3.1.1. Each clause containing 
 is a 2-clause: We branch on x. In the branching of 
, we will get at least two 1-clauses. By applying R-Rule 1 on them, we can further reduce 2 clauses. In the branching of 
, we get at least one 1-clause. By applying R-Rule 1 on it, we can further reduce 1 clause. So we can get a branching vector  at least.

Next, we can assume that there is a literal 
 appearing in a clause containing 
.

Case 3.1.2. At least one of x and y is a -literal: We assume that x is a -literal. We branch on x. In the branching of 
, there is a 1-clause  and we can reduce at least one clause by applying R-Rule 1 on it. Because z exists, by Lemma 8 we know that if only four clauses are removed in total, the remaining instance will be a good formula. In the branching of 
, three clauses are deleted and the remaining instance is also a good formula by Corollary 1. We can branch with a branching vector  with a good formula in each remaining branching or branch with a branching vector at least .

Case 3.1.3. Both of x and y are 
-literals: We further consider two subcases.

If each clause containing 
 also contains y, then we branch on y. In the branching of 
, literal x will become a 
-literal. We can reduce two more clauses by applying R-Rule 1 on x. In the branching of 
, we will have a 1-clause . We can reduce at least one clause by applying R-Rule 1 on . Then we can get a branching vector  at least.

Otherwise, at most one clause containing 
 contains y. For this case, we branch on x. In the branching of 
, we will have a 1-clause . We can reduce at least two clauses by applying R-Rule 1 on . As z exists, by Lemma 8 we know if just 4 clauses are removed in total, the remaining instance is a good formula. For the branching of 
, three clauses are deleted and we can apply Corollary 1. The remaining instance is also a good formula. So we get a branching vector  with a good formula in each remaining branching or a branching vector covered by .

Case 3.1.4. Literal x is a 
-literal, y is a 
-literal, and no clause contains both of y and 
: We branch on x. In the branching of 
, literal y will become a 
-literal. We can reduce at least one clause by applying R-Rule 1 or R-Rule 3 on y. In the branching of 
, we will have a 1-clause  and can reduce at least two clauses by applying R-Rule 1. Thus, we can get a branching vector of .

Case 3.1.5. Literal x is a 
-literal, y is a 
-literal, and a clause contains both of y and 
: We branch on x.

Assume that there is a 2-clause other than C containing x. In the branching of 
, we can further decrease the number of clauses by at least 1 by applying R-Rule 3 on y. In the branching of 
, we will get at least two 1-clauses and can further decrease the number of clauses by at least 2 by applying R-Rule 1. We can get a branching vector covered by .

Otherwise, the other two clauses containing x, denoted by 
 and 
, are both 
-clauses. We can simply assume that 
 does not contain  or both a literal and its negation, since for this case we can simply delete 
 without branching. Thus 
 will contain at least two different literals 
 and 
 that are also different from 
 and 
. If x is a 
-literal, in the branching of 
, we reduce at least four clauses directly and leave a 
-literal y. By applying R-Rule 1 or R-Rule 3 on y, we can further reduce at least one clause. So we can reduce at least five clauses for this case. Next, we assume that x is a -literal. For this case, in 
, literal y will become a 
-literal, and literals 
 and 
 will become two different 
-literals (also different from y and 
). By Lemma 9, we know that after resolving y in 
, we can reduce one clause with the resulting formula being good or reduce at least two clauses directly. So in the branching of 
, we can either reduce four clauses leaving a good formula or reduce at least five clauses. In the other branching of 
, we get a 1-clause , after applying R-Rule 1 on it we can further reduce one clause. If only three clauses are reduced in this branching, then the remaining formula is good. The reason is as below. In Case 3,  contains only 
-literals, 
-literals and -literals. There is a literal 
 appears in a clause containing 
 (after Case 3.1.1). For this case, z will be a 
-literal or 
-literal in the remaining formula and then the remaining formula is good. We can branch with a branching vector  leaving a good formula in each branching or a branching vector covered by  or .

Case 3.2. There is a 2-clause  containing two 
-literals: We consider two subcases.

Case 3.2.1. There is no clause containing both of y and 
: We branch on x. In the branching of 
, literal y will become a 
-literal. We can reduce one more clause by applying R-Rule 3 on y. In the branching of 
, a 1-clause  is created and there are two clauses containing y. We can reduce two more clauses by applying R-Rule 1 on y. We get a branching vector of .

Case 3.2.2. There is a clause D containing both of y and 
: If D is also a 2-clause, then there are two 2-clauses  and 
. We simply assign  without branching. Next, we assume that D is a 
-clause.

If D is a 3-clause, we branch on y. In the branching of 
, literal x will become a 
-literal. We can reduce one more clause by applying R-Rule 3 on x. In the branching of 
, we will get two 1-clauses  and , where z is the third literal in D. By applying R-Rule 1 on  and , we can reduce two more clauses. We get a branching vector of .

Else D is a 
-clause, and we branch on x. In the branching of 
, literal y will become a 
-literal. After applying R-Rule 3 on y, we reduce one more clause leaving a good formula, because D contains at least two literals other than y and 
 and then there is a coincident pair after applying R-Rule 3 on y. In the branching of 
, we will get a 1-clause . We can reduce one more clause by applying R-Rule 1 on it. Same as before, if just 4 clauses are removed, the remaining instance is good. Thus, we can either get a branching vector  with a good formula in each remaining branching or a branching vector covered by .

Next, we assume that there is no 2-clause.

Case 3.3. There is a clause in  containing both a -literal x and a 
-literal y: Let 
, 
 and 
 be the three clauses containing x, where we assume that 
 also contains y. Let 
 be the other clause containing y. We first branch on x with a branching vector . We may decrease the number of clauses more by applying reduction rules for different cases.

Case 3.3.1. 
 or 
: This means  is a coincident pair. In the branching 
, the literal y becomes a 
-literal. We can further remove at least two clauses by applying R-Rule 1 on y. We get a branching vector . Next, we assume that 
 or 
.

Case 3.3.2. 
 and 
: Notice that 
 and 
 are 
-clauses and each of them will contain a literal different from 
. In 
, there is a 
-literal y and two different 
-literals different from 
. So it satisfies the condition in Lemma 9. After resolving y in 
, we can further either reduce one clause leaving a good formula or reduce at least two clauses. In the branching of 
, we reduce three clauses directly and the remaining formula is good according to Corollary 1. So the branching vector is either  with a good formula in each branching or a vector covered by .

Lemma 10

For a reduced instance  without 
-literals, if there is no 2-clause and no clause contains both a 
-literal and a -literal, then either there is no 
-literal or there is a clause containing at least three 
-literals.

Proof

Since  is a reduced instance, we know that the degree of any literal is at least 2 and there is no -literal. Note that there is also no 
-literal. Thus, the formula contains only 
-literals, 
-literals and -literals. We assume that there is at least one 
-literal otherwise the lemma trivially holds. It is impossible that each clause containing a 
-literal also contains a 
-literal because this case would be reduced by R-Rule 4. So there is a clause containing only 
-literals. Since there is no 2-clause. We know that the clause contains at least three 
-literals. □

By Lemma 10, we know that the remaining case is that

Case 3.4. There is a 
-clause C containing at least three 
-literals 
: Let 
 be the other clause containing 
 (), where it is possible two of 
, 
 and 
 are the same.

Case 3.4.1. Two literals in 
, say 
 and 
, form a coincident pair: We branch on 
 with a branching vector  first. In the branching of 
, literal 
 will become a 
-literal and we reduce three clauses by applying R-Rule 1 on 
. So we can get a branching vector of .

Case 3.4.2. At least one of 
 and 
 contains a negation of 
 or 
: Without loss of generality we assume that 
 contains a negation of 
. We first branch on 
 with a branching vector . In the branching of 
, each of 
 and 
 will become a 
-literal. We can further reduce the number of clauses by at least 2 by applying R-Rule 3 on 
 and 
 one by one. In the branching of 
, after deleting the three clauses containing 
 (including 
), the degree of 
 is at most 1. We can reduce one more clause by applying reduction rules on 
. Thus, we can branch with a branching vector .

Case 3.4.3. None of Case 3.4.1 and Case 3.4.2 happens: We first branch on 
 with a branching vector . In the branching of 
, each of 
 and 
 will become a 
-literal. We can reduce two more clauses by applying R-Rule 3 on 
 and 
 one by one. Furthermore, the remaining instance is a good formula, because applying R-Rule 3 will create coincident pairs in this case. In the branching 
, the formula is a good formula by Corollary 1. We get a branching vector  with a good formula in each branching.

Case 4.  contains only -literals: Since  is a good formula, we know that there is either a coincident pair or a 2-clause.

Case 4.1.  contains a coincident pair : We branch on x into two branchings 
 and 
, and distinguish two subcases to analyze the branching operation.

Case 4.1.1. Three clauses contain x and y simultaneously: In the branching of 
, the literal y will become a -literal and we can further decrease the number of clauses by at least 3 by applying R-Rule 1. So we can get a branching vector  at least.

Case 4.1.2. Only two clauses contain x and y simultaneously: we assume without loss of generality that no pair of literals appear in more than two clauses simultaneously now.

Assume that one of the clauses containing x is a 2-clause , where w can be y. In the branching of 
, we can apply R-Rule 3 on y to further reduce 1 clause. In the branching of 
, we apply R-Rule 1 on w to further reduce 1 clause. The branching vector will be covered by .

Next, we assume that any of the three clauses containing x also contains a literal other than y and 
. At least two of the three literals are different because no pair of literals appear in three clauses as assumed. Let 
 and 
 be the two different literals. In 
, literal y will become a 
-literal and 
 and 
 will become 
-literals. The condition in Lemma 9 holds. After resolving y in 
, we can either reduce 1 clause leaving a good formula or reduce at least 2 clauses. In the branching of 
, we reduce three clauses directly and the leaving formula is good according to Corollary 1. The branching vector is either  with a good formula in each branching or a vector covered by .

Case 4.2.  does not contain a coincident pair but contains a 2-clause : We branch on x with a branching vector . In the branching 
, we will get a 1-clause that only contains y. Furthermore, since  does not contain a coincident pair, we know that there are at least two clauses containing y in 
. We can apply R-Rule 1 on y in 
 to further reduce 2 clauses. Thus, we can get a branching vector covered by .

7. Conclusion
SAT is one of the most widely studied NP-complete problems. There is a large number of references in history, whether from the perspective of experimental algorithms or theoretical algorithms. Many fast solvers have been developed and they can solve medium to large sized instances within a reasonable running time bound. However, theoretical research is relatively backward. It took us decades to improve the running time bound to 
⁎
. We still cannot totally avoid dealing -literals. It seems a challenging task to achieve the running time bound 
⁎
 with the worst branching vector  or . Maybe we need to explore new problem natures and use some new algorithmic techniques to make a breakthrough.