Abstract
We study the Steiner k-eccentricity on trees, which generalizes the previous one in the paper [On the average Steiner 3-eccentricity of trees, arXiv:2005.10319]. We achieve much stronger properties for the Steiner k-ecc tree than that in the previous paper. Based on this, a linear time algorithm is devised to calculate the Steiner k-eccentricity of a vertex in a tree. On the other hand, lower and upper bounds of the average Steiner k-eccentricity index of a tree on order n are established based on a novel technique which is quite different and also much easier to follow than the earlier one.

Keywords
Steiner distance
Steiner tree
Steiner eccentricity
Graph algorithms

1. Introduction
In this paper we consider connected, simple, undirected graphs . For basic graph notation and terminology we follow the book of West [29], while for algorithmic and computational terminology we use [4], [9].

The standard distance  between vertices u and v in graph G is the length of a shortest path between u and v in G. If , , then the Steiner distance  is the minimum size among all connected subgraphs of G containing S, that is, Note that if , then . If , then the Steiner k-eccentricity of a vertex v in graph G is Note that, by definition, .  is a Steiner k-ecc v-set if , , and . A corresponding minimum Steiner tree T is called a Steiner k-ecc v-tree (corresponding to the k-set S). We will also shorty say that T is a . The average Steiner k-eccentricity of a graph G is the mean value of all vertices' Steiner k-eccentricities in G, that is, which is an extension of the average eccentricity of a graph [7], [8].

The Steiner tree problem is NP-hard on general graphs [9], [16], but it can be solved in polynomial time on trees [2]. The Steiner distance on some special graph classes such as trees, joins, Corona products, threshold and product graphs, has been studied in [1], [3], [11], [24], [27]. The average Steiner k-distance is closely related to the k-th Steiner Wiener index. Both of them were studied on trees, complete graphs, paths, cycles and complete bipartite graphs [6], [12]. The average Steiner distance and the Steiner Wiener index were investigated in [5], [19], [21], while for some work on the Steiner diameter see [24], [27]. The Steiner k-diameter was compared with the Steiner k-radius in [15], [25]. Closely related invariants were also studied, for instance Steiner Gutman index [22], Steiner degree distance [13], Steiner hyper-Wiener index [26], multi-center Wiener indices [14], and Steiner (revised) Szeged index [10]. We especially point to the substantial survey [23] on the Steiner distance and related results and to the recent investigation of isometric subgraphs for Steiner distance [28].

Very recently, the Steiner 3-eccentricity of trees was investigated in [20], where among other results, lower and upper bounds for the average Steiner 3-eccentricity index on trees were derived. Based on some of the results from [20], Aleksandar Ilić devised a linear-time algorithm to calculate the average Steiner 3-eccentricity of a tree [18]. In this paper we extend results from [20] to arbitrary . In the next section we propose a linear algorithm to calculate the Steiner k-eccentricity of a vertex in a tree. In Section 3 we establish lower and upper bounds of the average Steiner k-eccentricity on trees. We conclude this paper by presenting some possibilities for future work.

2. Steiner k-eccentricity of vertices in trees
The techniques from [20] that enabled to calculate the Steiner 3-eccentricity in a tree are not suitable for calculating the Steiner k-eccentricity of a vertex in a tree for arbitrary . In this section we establish new, stronger structural properties for the Steiner k-ecc v-tree for a vertex v in a tree, and then apply them to devise a linear time algorithm to calculate the Steiner k-eccentricity of a vertex in a tree.

2.1. Two key structural properties
Before stating the two properties, let us introduce some notation and terminology on trees. A vertex of a tree of degree at least 3 is a branching vertex. Let  denote the set of pendent vertices (leaves) of a tree T. If u and v are vertices of a tree T, then we will denote the (unique) path between u and v in T by . Given a vertex  and a leaf , let w be the nearest branching vertex to u on . If there is no branching vertex on , we set . Then we say that the subpath  of  is a quasi-pendent path (with respect to u and v).

In the rest we will use the following earlier lemma, also without explicitly mentioning it.

Lemma 2.1

[20, Lemmas 2.4, 2.5] If T is a tree and , then the following holds.

(i) If , then every k-ecc v-set contains all the leaves of T. The same conclusion holds if v is a leaf and .

(ii) If  and S is a k-ecc v-set, then every vertex from  is a leaf of T.

For our first structural result, we need one more lemma.

Lemma 2.2

Let , let v be a vertex of a tree T, let  be a Steiner k-ecc v-tree, and let  be a Steiner -ecc v-tree. Then there exists a leaf  such that the quasi-pendent path  has no common edge with .

Proof

If , then  is a tree on a single vertex v, hence the conclusion is clear. Assume in the rest that  and suppose on the contrary that every leaf  satisfies that the quasi-pendant path  has common edges with . Then to every leaf  we can associate its private leaf of . Hence the number of leaves in  is not less than that in . This contradicts the fact (by Lemma 2.1) that the Steiner -ecc v-set corresponding to 
 has one less element than the Steiner k-ecc v-set corresponding to 
. □

Theorem 2.3

Let , and let v be a vertex of a tree T. Then every Steiner k-ecc v-tree contains some Steiner -ecc v-tree.

Proof

The case  is trivial, hence assume in the rest that . Let 
 be a Steiner k-ecc v-tree and suppose on the contrary that it contains no Steiner -ecc v-tree. If 
 is an arbitrary Steiner -ecc v-tree, then, by Lemma 2.2, we may select a leaf u from 
 such that the quasi-pendant path 
 does not have common edges with 
.

Let 
 be the Steiner k-ecc v-set corresponding to 
 and set 
. Then 
 is a ()-set containing the vertex v. Moreover, the tree 
 is a 
. By the assumption, the size of 
 is strictly less than that of 
, that is,(1)

Let 
, where 
 is the Steiner ()-ecc v-set corresponding to the tree 
. Then 
 is a k-set which contains the vertex v. Let 
 be a 
. In the following we are going to show that the size of 
 is larger than that of 
.

Since the quasi-pendant path 
 does not share any edge with 
 and must be a subpath of the quasi-pendant path in 
 with respect to u and v, the size of 
 satisfies(2)
 Combining (1) and (2) we obtain that(3)
 Hence 
. Since 
 is a minimum Steiner tree on a k-set containing v, (3) contradicts the fact that 
 is a Steiner k-ecc v-tree. □

Theorem 2.3 thus asserts that a Steiner k-ecc v-tree contains some Steiner -ecc v-tree. The question now is, how to determine such a Steiner -ecc v-tree. The message of the next result is that for our purposes, any Steiner -ecc v-tree will do it. Before stating the theorem, we need some more notation. If H is a subgraph of a graph G, and , then the distance from v to H is 
. The eccentricity of H in G is 
.

Theorem 2.4

Let , and let v be a vertex of a tree T. If 
 and 
 are Steiner k-ecc v-trees of T, then 
.

Proof

There is nothing to be proved if 
. Hence assume in the rest that 
 and 
 are different Steiner k-ecc v-trees of T. If , then a (unique) Steiner 1-ecc v-tree is induced by the vertex v itself. Since all longest paths starting from v have the same length, the assertion of the theorem is clear for . Hence we may also assume in the rest of the proof that .

Let 
 and 
 be longest paths from vertices of  to trees 
 and 
, respectively. Let 
 and 
 be the two endpoints of 
 with 
, and let 
 and 
 be the two endpoints of 
 with 
. Set 
. To prove the theorem it suffices to prove that 
 and 
. By symmetry, it suffices to prove the first assertion, that is, 
.

Suppose on the contrary that 
. Let s be a leaf of 
 such that 
 is on the path 
. Then there must be a vertex 
 and a leaf t of 
 such that 
, see Fig. 1. Note that 
 may be the vertex v.

Fig. 1
Download : Download high-res image (16KB)
Download : Download full-size image
Fig. 1. The configuration of the vertices w0, u1, u2, w1, w2, s and t.

We claim that 
. Otherwise, let 
. Then the path 
, since 
. So the two paths 
 and 
 form a cycle in the original graph T. This contradicts to the fact that T is a tree. In the same way, we obtain that 
.

Since 
 and 
, we have(4)
 Moreover, since we have assumed that 
, we infer that 
. Together with (4) this yields(5)

Now we pay attention to the tree 
. Let S be the Steiner k-ecc v-set corresponding to the tree 
. Let 
. Then 
 is a k-set containing the vertex v. In the following, we will establish a contradiction that the tree 
 has more edges than the tree 
. Recall that 
 is a Steiner k-ecc v-tree.

Let 
 be the quasi-pendant path with respect to v in 
 and distinguish the following cases.

Case 1: 
.

In this case the tree 
 can be represented as 
. Since the path 
 is a subpath of 
, 
 holds. Combining this fact with (5) we have:

Case 2: 
.

Now the tree 
 can be represented as 
. Recall that the path 
 is composed of two subpaths which are 
 and 
 respectively. And 
 is also composed of two subpaths which are 
 and 
. By (5) we can estimate as follows:
 In both cases we have thus proved that 
, a contradiction to the fact that 
 is a Steiner k-ecc v-tree. □

2.2. A linear time algorithm
To explain Steps 1-3 of Algorithm 1, we state the following lemma.

Lemma 2.5

Let  and let v be a vertex of a tree T. If , then the Steiner k-ecc v-tree is the entire tree T.

Proof

The cardinality of the set  is at most k, since . Moreover, the  is the entire tree T. Hence the Steiner k-ecc v-tree is the entire T. □

Steps 4-12 form the recursive reduction which consists of finding  times a longest path starting at a vertex. In Step 7 we use the depth-first search (DFS) algorithm [4] to find a longest path starting at a given vertex, the details are present in Algorithm 2. It is quite likely that such an auxiliary algorithm has been already derived elsewhere, but we could not find a reference and hence include it here to be reasonably self-contained. Step 9 shrinks the path obtained in Step 7 into a single vertex for the purpose of the next loop, the details are presented in Algorithm 3. For the statement of these algorithms we recall that if v is a vertex of a graph G, then the set of its neighbors is denoted by 
.

Algorithm 2
Download : Download high-res image (64KB)
Download : Download full-size image
Algorithm 2. Longest_Path(v, T, path).

Algorithm 3
Download : Download high-res image (61KB)
Download : Download full-size image
Algorithm 3. Path_Shrinking(v, T, path).

Theorem 2.6

Algorithm 1 computes the Steiner k-eccentricity of a vertex in a tree and can be implemented to run in  time, where n is the order of the tree.

Proof

The correctness of Algorithm 1 is ensured by Theorem 2.3, Theorem 2.4.

By Lemma 2.5, the Steiner k-eccentricity of a vertex in a tree is equal to the size of the tree if its number of leaves is less than k. There is a linear-time algorithm to find all leaves of a tree by the depth-first search (DFS) algorithm [4]. Hence Steps 1-3 can be implemented in  time, where m is the size of the tree. Similarly, each loop in Steps 6-9 can be implemented in  time, thus all loops require  time. □

To conclude the section we point out that the results from [20] only support the calculation of the Steiner 3-eccentricity. Hence we needed to develop a new approach that works for general k.

3. Upper and lower bounds
In this section we establish an upper and a lower bound on the average Steiner k-eccentricity index of a tree for . These bounds were earlier proved in [20] in the special case . It is appealing that to obtain the bound for the general case, the proof idea is quite different and significantly simpler that the one in [20]. For the new approach, the following construction is essential which comes from an idea of [20], but it is more general than the earlier one.

π-transformation: Let T be a tree and let  be a path with at least one edge, such that every internal vertex of P is of degree 2 in T. Let X be the maximal subtree containing u in the tree , and Y be the maximal subtree containing v in the graph . We may without loss of generality assume that 
. Then the π-transformation  of T is defined as 
. The inverse transformation is 
. See Fig. 2.

Fig. 2
Download : Download high-res image (20KB)
Download : Download full-size image
Fig. 2. T′ = π(T) and T = π−1(T′).

Lemma 3.1

Let T, P, u, v, X, Y, and 
 be as in the definition of the π-transformation. If , then in 
 there exists a Steiner k-ecc w-set S such that .

Proof

Let 
 be a Steiner k-ecc w-set in 
 such that , and set 
. Since , the cardinality of Q is at least two. Let 
 such that the distance between v and 
 is 
. Consider the following two cases.

Case 1: .

In this case the vertices of Q are all in P. Let 
 be the nearest vertex to v. Construct a new vertex set 
.

Case 2: .

Let 
. Construct a new vertex set 
.

In each of the two cases, the size of 
 is not less than the size of 
, hence the assertion. □

Lemma 3.2

Under the notation of Lemma 3.1, 
.

Proof

If w is a vertex in , then for any Steiner k-ecc w-set 
 in 
, the size of a minimum Steiner tree on 
 in graph T is not less than that in 
. So the Steiner k-eccentricity of every vertex  in T is not less than that in 
.

If w is a vertex in , then by Lemma 3.1, there exists a Steiner k-ecc w-set 
 in 
, such that 
. The size of a minimum Steiner tree on 
 in T is not less than that in 
. Therefore the Steiner k-eccentricity of every vertex  in T is not less than that in 
.

In any case, the Steiner k-eccentricity of every vertex 
 is not larger than that in T. As the average Steiner k-eccentricity index is the mean value of all vertices' Steiner k-eccentricities, the average Steiner k-eccentricity of 
 is not large than that of T. □

If the order of a tree T is not larger than k, then a Steiner k-ecc v-set contains all vertices of T for every . Then every Steiner k-ecc v-tree is the entire tree T for every vertex v. So for a given , we just consider the trees where the order of each is more than k.

Theorem 3.3

If  is an integer, and T a tree on order , then
 
 Moreover, the star 
 attains the lower bound, and the path 
 attains the upper bound.

Proof

Repeatedly applying the π-transformation on T until it is possible, we obtain the star 
. On the other hand, repeatedly applying the 
 transformation on T until it is possible, we obtain the path 
. By Lemma 3.2, the π-transformation does not increase the average Steiner k-eccentricity of T. Hence the star 
 attains the minimum Steiner k-eccentricity, and the path 
 attains the maximum Steiner k-eccentricity. Finally, we obtain 
 
 and 
 by straightforward computation. □

In Fig. 3 an example is given in which the process of constructing extremal graphs, that is, a start and a path, by means of the π-transformation and the 
-transformation.

Fig. 3
Download : Download high-res image (32KB)
Download : Download full-size image
Fig. 3. Constructing extremal graphs using the π transformation and the π−1 transformation. Bold edges denote the paths defined in the transformations.

In [17] the average Steiner 2-eccentricity of trees was investigated. For the sake of our final result, we recall the following result.

Lemma 3.4

([17]) Let T be a tree of order n. Then 
. The left equality holds if and only if 
, while the right equality holds if and only if 
.

Combining Theorem 3.3 with Lemma 3.4, we have the following result.

Corollary 3.5

If  is an integer, then 
 (resp. 
) attains the minimum (resp. the maximum) average Steiner k-eccentricity in the class of trees.

4. Conclusion
In this paper we have derived a linear-time algorithm to calculate the Steiner k-eccentricity of a vertex in a tree, and established lower and upper bounds for the average Steiner k-eccentricity of a tree. These results extend those from [20] for the case . It remains open to determine the extremal graphs for the average Steiner k-eccentricity index on trees for . Moreover, (algorithmic aspects of) the Steiner k-eccentricity on arbitrary graphs is widely open.