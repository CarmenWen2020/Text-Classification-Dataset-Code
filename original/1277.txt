Abstract
With the rapid development of wireless networks, the burden on data transmission is becoming much higher, so are the requirements for bandwidth and load balancing. To cope with these changing requirements, we investigate a novel problem of finding maximum disjoint paths with different colors (MDPDC). In MDPDC, transmission frequencies in a network are modeled as different colors on network nodes. The aim is to find a maximum number of color-constrained node-disjoint paths where nodes must share the same color within any disjoint path, and differ in color among different disjoint paths. For this proposed problem, we first prove MDPDC is -complete in both directed and undirected graphs. Then we provide two practical linear programming based solutions with theoretical justifications of their correctness and time complexity. Extensive computer experiments are also carried out with several compared baseline methods to demonstrate the effectiveness of proposed algorithms both in running time and solution quality.

Keywords
Wireless networks
Maximum disjoint paths with different colors-completeness
Linear programming

1. Introduction
In the past few decades, there have been tremendous changes to the Internet, telecommunication, data and service networks, brought by wireless communication technology. For instance, along with the development of ubiquitous computing, users are generating rich communication content besides text, which includes photos, videos, other forms of large multimedia files etc. Consequently, data traffic has explosively increased on the network infrastructure, inevitably leading to problems of network congestion and packet loss. Further with conventional allocation schemes of network resources, it eventually brings in unsatisfactory user experience.

Single routing protocol directs data packets to travel along a single shortest path from source to destination. In contrast, multi-path routing that schedules data transmissions over multiple shortest paths within a network is considered as an effective routing strategy. With this strategy, one can hope for better performance, connection stability, and potential security guarantee than single shortest path schemes such as the IEEE 802.1D protocols [1]. On the other hand, disjoint paths routing that uses multiple disjoint paths, is known to provide better load balancing and bandwidth. However, in the context of wireless networks, two nodes transmitting data at the same frequency (such as 5180 MHz in 5G channels) can interfere with each other. For example, the target node may suffer the issues of data packet loss or even connection failure when receiving same-frequency signals from both nodes at the same time. Therefore, the end-to-end data transmission of disjoint paths at different frequencies can be modeled for the purpose of reducing interference. We assume each frequency band is represented by a color. The following definition states our maximum disjoint paths with different colors (MDPDC) problem.

Definition 1

Maximum disjoint paths with different colors, MDPDC
Given a network graph  and a pair of distinct vertices . Each 
 is assigned with a set of colors 
 that represents different frequency bands. The MDPDC problem is to find a maximum number of vertex-disjoint st-paths 
, such that for each path 
: (1) Every vertex 
 shares the color 
; (2) For any 
, 
.

The main result of this paper is the following complexity theorem. Its proof will be given in a later section. Due to the problem hardness, we then propose practical LP-based algorithms for finding near-optimal solutions to MDPDC.

Theorem 2

MDPDC is -hard in both directed and undirected graphs.

1.1. Related work
A closely related work to ours is the k-disjoint paths with different colors (k-DPDC) problem introduced by Zhang et al. [20]. In this problem, wireless network channels are modeled as colors. The work has also investigated the restricted MinSum k-DPDC and restricted MinMax k-DPDC problems in a directed acyclic graph (DAG). Another closely related problem is the Maximum Colored Disjoint Path (Max CDP) problem studied by Wu [18]. The problem models an edge-colored graph consisting a node set and edge sets with different colors. The goal similar to ours is to maximize the number of uni-color paths which are mutually internally disjoint. Wu [18] has proved the problem's NP-hardness and shown its inapproximability. The authors have also presented both approximation and exact algorithms for solving this problem. Following this line of research, Bonizzoni et al. [2] has shown an inapproximability result that for any constant , where c is the number of different colors, the Max CDP problem is not approximable within the factor of 
. Later on, Dondi et al. [7] introduced a vertex-disjoint variant of Max CDP, called Max CDDP, aiming to find the maximum number of vertex-disjoint uni-color paths. Moreover, the authors proposed a parameterized approximation algorithm with a factor of 
 
.

The classical disjoint paths (DP) problem in fact has an abundant history. DP is known to be -complete on directed graphs for both vertex-disjoint path and edge-disjoint path versions, even for finding only two paths [8]. In contrast, DP on undirected graphs was shown polynomially solvable when . In 1980, Shiloach [15] solved the problem by presenting an  algorithm. Later in [16], Torsten improved the runtime to  with α as the inverse of the Ackermann function. For some special graphs, DP is solvable with general k. For instance, Frank [9] showed that it is able to find k edge-disjoint paths in a planar graph with a runtime 
. Schrijver [14] used a method based on cohomology over free groups to show that the k disjoint paths problem is solvable in polynomial time on directed planar graphs. In the context of wireless networks, reliability of the network is a main concern. Recently, variants of DP have received renewed interests due to the advantages in reliability assurance and network congestion avoidance. Challal et al. presented an intrusion-fault tolerant routing method that allows high reliability through secure multipath routing [3]. Moreover, Lin et al. proposed a fast heuristic algorithm called Two Disjoint Paths by Shortest Path (2DP-SP) [13] taking into account the energy usage minimization of networks that use disjoint paths. In addition, to support big data transfer, Hou et al. [11] formulated a problem of Bandwidth Scheduling called Two Node-Disjoint Paths (BS-2NDP). Another more complicated problem is the δV-kPESP that aims to find k edge-disjoint paths sharing at most δ common vertices. Started with , the problem can be optimally solved within a time complexity 
, due to the work of [19]. The running time was later improved to  by Guo et al. [10]. On the other hand, Deng et al. [6] presented the edge version of δV-kPESP that computes k partial edge-disjoint paths sharing at most δ common edges. It was shown to be solvable within a runtime 
 for .

When the given graph includes only one color, our MDPDC problem is related to the classical network flow problem. Flow and disjoint paths problems are related and have been extensively due to their importance in field of combinational optimization and their wide applications in networking. Without the integral flow constrains on paths, the all-or-nothing multicommodity flow problem was first introduced in [4]. Later, both edge and node capacitated versions were studied by Chekuri et al. [5]. For the node-capacitated all-or-nothing flow problem, the authors achieved a ratio of 
 on general graph, and 
 on planar graphs. For the edge capacitated all-or-nothing flow problem, they obtained 
 and  approximation respectively on general and planar graphs. Moreover, an -approximation algorithm was given by Kawarabayashi et al. [12] for the all-or-nothing multicommodity flow problem in planar graphs. The authors also showed the integrality gap of .

1.2. Our results
The following lists the main results of our work:

•
A novel MDPDC problem is introduced in the context of wireless networks and big data, to cope with data transmission burden on networks such as significantly increased packet loss due to many signal interferences and network congestion from low utilization of network paths.

•
We settle the problem computational complexity by first proving MDPDC in directed graphs is -complete. The proof is basically a simple reduction from the directed Disjoint Path (DP) problem. However, on the undirected graph, DP can be solved in polynomial time. In this more complicated case, we resort to the well-known NP-complete problem  and construct a reduction from this fundamental problem.

•
To actually solve this -complete problem, two linear programing (LP) models are constructed first for MDPDC. Then, based on these formulations, two LP-rounding algorithms are proposed with theoretical justifications of solution correctness and time complexity.

Our conducted computer experiments empirically demonstrate the practical gain of LP-based algorithms by comparing their runtime and (approximate) solution quality with exact solution baselines. We also discover that at a relatively high probability, the LP-based algorithms output integral solutions.

2. Proof of Theorem 2
A main result of the paper is Theorem 2 and this section shows its full proof. First, we show the -completeness of the problem (2DPDC) that is a simpler case of MDPDC looking for exactly two disjoint paths with different color. Second, we show the existence of at least two disjoint paths of different color. It is then apparent that the -completeness of 2DPDC implies that of MDPDC. To begin with, we prove 2DPDC is -complete in directed graphs via a simple reduction from the -complete (DP) problem.

2.1. The -completeness proof for 2DPDC in digraphs
Clearly, 2DPDC is in , as we can check whether 
 holds or not in polynomial time for any given disjoint paths pair 
. Next, it will be apparent that 2DPDC in a directed graph is -complete by having a reduction from the -complete Disjoint Path (DP) Problem [8].

The construction starts by assuming an instance of DP, that is, a directed graph  with four distinct vertices 
, 
, 
 and 
. From a polynomial-time reduction, a directed graph 
 is created, where 
, s and t denote the source and destination vertices of the 2DPDC problem respectively, and 
. Fig. 1a illustrates this constructed auxiliary graph 
. The -completeness proof then completes with the following lemma.

Fig. 1
Download : Download high-res image (392KB)
Download : Download full-size image
Fig. 1. The auxiliary graph. (For interpretation of the colors in the figures, the reader is referred to the web version of this article.)

Lemma 3

An instance of 2DPDC is feasible iff the corresponding DP instance is feasible.

Proof

Suppose there exists a pair of disjoint paths 
 with different colors connecting s to t in 
 for the instance of 2DPDC. By the construction, we have vertices 
 and 
 both in red, while vertices 
 and 
 in blue. Then 
 and 
 are two disjoint paths with colors red and blue, respectively. Thus, we immediately obtain a feasible solution to DP consisting of 
 and 
. Conversely, suppose 
, 
 compose a solution to DP. Then we can cover every vertex on 
 as red while 
 as blue. Consequently we have 
 and 
 as a solution to 2DPDC. □

The above -completeness proof will not hold for the undirected case, as DP in undirected graph becomes polynomial-time solvable. Therefore, we present an alternative proof below to show the -completeness of MDPDC in undirected graphs.
2.2. -completeness of 2DPDC in undirected graphs
Lemma 4

The 2DPDC problem is -complete in undirected graphs.

The proof of Lemma 4 is based on reducing from a renowned NP-complete problem called . In an instance of , we are given n variables 
 and m clauses 
, where each variable 
 gives rise to literals 
 or 
 while each clause consists of a 3-subset of literals. Assume that 
 is the true assignment function. Then 
 is satisfied under τ if and only if 
 contains a literal 
 with 
, or a literal 
 with 
. The aim of  is to answer whether there exists an assignment satisfying all the m clauses.
For a given instance of , we will construct an auxiliary graph G, such that G contains two different disjoint paths 
 and 
 with 
 if and only if the instance of  is satisfiable. The construction can be described within the following three main parts:

Variables:
For each 
 we add a vertex 
 with color blue and construct a lobe 
 as in Fig. 1b. Assume 
 has 
 occurrences of 
 and 
 occurrences of 
 in the clauses, then the lobe contains two paths from 
 to 
 as below:
 where b is a dummy vertex of color blue to blockade the possibly red path on purpose.

Clauses:
Then, for each 
, we add two vertices 
 and 
, as well as edge 
, . The colors of the added vertices are identically red.

Relationship:
Lastly, for the relationship between the variables and the clauses, say variable 
 appearing in clause 
, we add four edges 
, 
, 
, 
 for connecting the lobes and the vertices that are representing the variables and clauses, respectively. That is, add two edges 
, 
 if 
 contains 
; while add two edges 
, 
 if 
 contains 
.

In Fig. 1c, we demonstrate an example of constructing graph G for the instance 
, 
, 
.

Then we immediately obtain the correctness of Lemma 4 from the following lemma, since 2DPDC is clearly in :

Lemma 5

An instance of 3SAT is satisfiable if and only if in its corresponding auxiliary graph G there exist two disjoint paths 
 and 
 with different colors that 
.

Proof

Suppose there exist 
 and 
 with 
 that are two different disjoint paths in G. Then we define τ as a true assignment for the  instance according to 
 and 
: Set 
 if T goes through 
; Set 
 for otherwise. It remains to show such an assignment satisfies all the clauses. Firstly, we show that one of the paths must go through all vertices of 
. Since 
 and 
 are two disjoint paths in different color and s has only two out-going edge 
 and 
, 
 and 
 have to go through 
 and 
, respectively. By the rule of constructing G, between two lobes on 
, there must exist at least an edge of 
, since 
 has only one out-going edge 
 while every edge leaving a lobe must enter a vertex of 
. So 
 has to go through all the  edges of 
, and hence through all vertices of 
. Secondly, assume 
 and 
 are two vertices of 
, such that 
. Again, because there must be at least an edge of 
 between two lobes, there must be a 
 (or 
) appearing on 
. Then because if we remove two vertices 
 and 
 in a lobe, there do not exist any paths between s and t. That is, a path can only go through a lobe once. According to the construction of graph G, 
 (or 
) appears in 
, and hence 
 satisfies 
. Therefore, the  instance is feasible as it can be satisfied by τ.

Conversely, assume that there is a true assignment  satisfying the instance of . Then for each clause 
, there must exist a literal, say 
 with 
. If 
 is an occurrence of 
, then set the corresponding subpath as 
; otherwise set 
. The two different color disjoint paths 
 and 
 can be constructed as follows. Then clearly, 
 exactly composes a path from s to t. Besides, since 
 must be either true or false, there exist other paths that has no common edge with 
 and is in different color. This completes the proof. □

In summary, 2DPDC is -complete both in directed and undirected graphs, following the results of Lemma 3, Lemma 4. Then this implies the correctness of Theorem 2 such that MDPDC is -hard in general.
3. LP-based algorithms for MDPDC
In the section, we shall first propose a transformation of the vertex colored MDPDC problem into an equivalent edge colored problem. For the transformed problem, we will then construct a linear program (LP) relaxation on which the maximum uni-color disjoint paths will be computed. Lastly, two algorithms are proposed by employing techniques of flow decomposition and LP rounding.

3.1. Transformation into edge-colored instance
We convert a vertex-colored graph  into edge-colored via assigning the edges with vertex colors. For an edge 
, let 
 represent the color set of the edge 
. Fig. 2 shows an example of such transformation where the original vertex-colored graph is shown as Fig. 2a and the corresponding edge-colored graph as Fig. 2b. In this example, r, g, b are the choices of colors for both vertices and edges and ∅ means no color is assigned.

Fig. 2
Download : Download high-res image (197KB)
Download : Download full-size image
Fig. 2. An example for the transformation.

3.2. LP formulation for modeling MDPDC
In the formulation, 
 is denoted as the total value of flow along the paths of color  and 
 the flow of color r on edge e. If an edge e is used entirely for a flow of color r then 
, otherwise 
. As for constraints, Inequality (1) restricts that each color-edge must only have one occurrence and (2) ensures each edge is with at most in one color and (4) constrains that each vertex can be used at most once except the source and destination.

From above, we can represent the integer linear programming (ILP) formulation for MDPDC as below ILP(1):(1) 
 
 
 
﹨ 
 
(2) 
 
(3) 
 
(4) 
  
 
 where the sets of edges leaving and entering vertex v are denoted by 
 and 
, respectively.

Lemma 6

ILP(1) models the MDPDC problem correctly.

Proof

We shall show that a corresponding solution to MDPDC can be constructed regarding a given solution of ILP(1) and vice versa. Assume that 
 is an optimum solution for ILP(1). Then first, Y contains an st-flow, since each vertex of  is with degree 0. Then because Inequality (1) guarantees that a feasible solution of ILP(1) contains at most one edge leaving s for each color. That is, each edge leaving s has a different color with any other edges. Moreover, each edge in G can only be assigned with one color (i.e., Inequality (2)). That is, there is no shared edge in the solution. Besides, Inequality (4) indicates that each vertex except s and t in G can be selected for only once. In other word, Inequality (4) ensures the vertex-disjointness. Thus, provided that s and t respectively with a degree g and −g, Y is an st-flow of value g, and is a set of disjoint paths with different colors in G because each edge in Y is integral. Lastly, Inequality (3) guarantees that 
 represents the value of the flow with color r. Therefore, Y is indeed an optimum solution to MDPDC as it maximizes the sum of 
. □

From above, it is clear that an optimum solution to ILP(1) is exactly corresponding to an optimum solution to MDPDC. We then denote by LP(1) the corresponding LP relaxation of ILP(1), with variables 
 and 
 both relaxed to the range of real numbers between 0 and 1. Next, we present algorithms on rounding fractional solutions.

3.3. An iterative rounding algorithm
The algorithm runs in iterations and each iteration selects and rounds a maximum path-flow from an optimal fractional solution to LP(1). After rounding in each iteration, the rounded path is removed and the remaining graph is returned for the next iteration. The goal of this iterative process is to maximize the finding of possible remained paths.

Algorithm 1 details the steps of the heuristic/approximate rounding algorithm. Initially, the algorithm solves LP(1) on the original graph to a fractional st-flow. Then, the flow is decomposed into a set of flow paths Q using the Algorithm 2 to be detailed later. The algorithm basically decomposes the st-flow into a set of flow-paths and repeatedly peels off a flow-path with the minimum value. Finally, a flow-path 
 with the maximum flow value is selected and rounded. For the next iteration, these rounded edges on the selected paths are removed and the remaining subgraph is returned. The algorithm terminates when the rounded solution is fully integral.

Algorithm 1
Download : Download high-res image (120KB)
Download : Download full-size image
Algorithm 1. An iterative rounding algorithm for MDPDC.

Algorithm 2
Download : Download high-res image (75KB)
Download : Download full-size image
Algorithm 2. The edge-peeling algorithm.

Algorithm 2 displays the aforementioned edge-peeling algorithm for flow decomposition. The algorithm first receives an st flow from optimally solving LP(1) before as the input; Second, it decomposes the fractional flow into a collection of subflows 
 such that 
 denotes the flow with color i; The remaining steps go through each subflow and repeatedly peel a portion of the flow until the remaining subflow's value becomes zero. Each iteration finds an st-path 
 that exactly accommodates the subflow and then reduces the flow value of each edge on 
 by the minimum edge flow value Δ on 
. For the time complexity and correctness of the algorithm, we have:

Lemma 7

Algorithm 2 runs in  time and decomposes the whole different-color flow into a set of path-flows, such that edges on each path-flow are with an identical color and a uniform fractional flow value.

Proof

For the time complexity, Step 2 of the algorithm apparently takes  time to decompose the whole different-color flow to a collection of single-color sets of flows. Then, the for-loop will repeat for at most  times, since the number of different color flows is bounded by . In each iteration of the while-loop, the algorithm takes  time to find a path regarding a set of single-color flows; and each while-loop repeats at most  time, since in each time running while-loop at least an edge's flow value is decreased to zero and is removed from the set of single-color flows. Thus, each for-loop consumes  time. Therefore, Algorithm 2 consumes  time in total.

The correctness of the algorithm immediately follows from the fact that after each time we peel a path-flow from 
, the flow 
 remains a feasible flow and the number of edges in the flow decreases at least one. □

From the above lemma, we have the correctness and time complexity of Algorithm 1 as in the following:

Lemma 8

Algorithm 1 runs in 
 time and finds a feasible solution to MDPDC, where m, n and  are respectively the numbers of edges, vertices and colors, and L is the number of input bits (a.k.a. input length).

Proof

For the runtime, Algorithm 1 takes 
 time to solve LP(1) by employing the algorithm in [17], where  indicates the number of constraints in LP(1). Thus, 
 time for solving the LP. Other steps of the algorithm (including calling Algorithm 2) need trivial time comparing to solving LP(1). Therefore, Algorithm 1 needs at most 
 time, since there are at most  paths as a feasible solution to MDPDC and Step 2 iterates for at most  times.

The correctness of the algorithm is obvious, since in each iteration the algorithm rounds a single-color path-flow to an integral path of the color, and the algorithm goes to the next iteration after removing both the edges and the colors of the path. Thus, the path found afterwards will not share any edge and color with any already-found path. This completes the proof. □

3.4. LP-rounding based on a second ILP
From the analysis, Algorithm 1 bears a relatively high running time from an iterative algorithmic process. However, we were able to reduce the runtime with another algorithm (the Algorithm 3) that rounds the fractional solution in only one iteration. The main idea is to employ another ILP formulation (the ILP(2)) that directly selects the decomposed flow-paths to form the final approximate solution. In this second ILP, 
 is denoted as the total value of flow accommodated by the paths of color , and 
 denotes the j-th flow in 
. In terms of constraints in ILP(2), the first restricts each edge to be selected at most once; the second ensures that each flow value of each color can not exceed 1; the third constrains for each color at most one path can be selected; while the last guarantees each vertex is assigned a single color. 
 
 
 
 
 

Algorithm 3
Download : Download high-res image (76KB)
Download : Download full-size image
Algorithm 3. A rounding algorithm based on another LP.

With the above ILP, the rounding process can then be simplified in a few steps as in Algorithm 3. First, LP(1) is optimally solved for an st-flow and then the flow is decomposed into the set  by the edge peeling Algorithm 2; Second, the smaller ILP(2) against the path-flow  
 is optimally solved that directly outputs an integral solution 
. So we have the following lemma:

Lemma 9

Algorithm 3 runs in 
 time and produces a feasible solution to MDPDC, where  is the time complexity for solving ILP(2).

Proof

For the time complexity, again we need 
 time to solve LP(1). Then it takes  time to run Algorithm 2, which is relatively trivial comparing to the time of solving LP(1). Lastly, it actually takes exponential runtime to solve ILP(2) in worst case in theory.

On the other hand, the correctness of Algorithm 3 follows from the correctness of ILP(2) as aforementioned. □

Note that although the above lemma indicates that Algorithm 3 theoretically has an exponential worst-case runtime, the algorithm is in fact practically more efficient as shown later in experiments. There could be possibly two reasons: the first is because the number of the constraints of ILP(2) is , which is smaller than that of LP(1)  and LP(1) gets invoked  times in Algorithm 1 whereas Algorithm 3 solves ILP(2) only once; The second is that as will be demonstrated later, a solution of the relaxation of ILP(2) is already often mostly integral then ILP(2) would require a relatively low runtime to obtain an indeed integral solution.

4. Experimental results
In this section, we shall first evaluate the practical performance of Algorithm 1 (the iterative LP rounding algorithm, denoted as IterRA) and Algorithm 3 (the double ILP rounding algorithm, denoted by DouILP) by comparing their runtime and solution quality with two baselines: an exact algorithm via solving the integer linear program (ILP) formulation and another algorithm that computes only fractional solutions via solving the linear program (LP) we designed for MDPDC. In addition, we report the integral rate of the solutions to LPs, which indicates how many (fractional) solution values of LP are immediately (integer) solutions to MDPDC. The algorithms are implemented in Java 1.8 (the code is available upon request), on a PC with Intel® Celeron® CPU G1820 processor and 8 GB memory. Our implementation adopts the JgraphT library to construct and process graphs, and the GLPK library for ILP and LP solvers.

4.1. Runtime analysis
In the experiment, we evaluated the runtime of algorithms by simulation experiments, in which the test bed is a random graph generated via the class DefaultDirectedWeightedGraph in Jgraph. The random graph can be configured with given m edges and n vertices, where each vertex possesses a set of no more than 10 different colors randomly generated in . For each given size of the graph, the simulation first randomly generates 1000 different random graphs and then respectively benchmarks the algorithms against each graph given a randomly chosen source and destination node pair. This essentially means each algorithm runs for  times and average results are reported.

Fig. 3 illustrates simulation results comparing runtimes of IterRA, DouILP, ILP and LP in milliseconds. As illustrated in Fig. 3a, the runtimes of LP, ILP and DouILP are close to each other and in particular LP and DouILP almost have the same runtime and IterRA runs slower than others as expected. We have also evaluated more practical runtimes of our algorithms on sparse graphs at a ratio of 
 
. As depicted in Fig. 3b, at node size , the runtimes of IterRA and ILP are very close. However, as the graph size becomes larger, the runtime of ILP significantly exceeds that of IterRA. This result agrees with the theoretical observation that ILP is with an exponential runtime while IterRA is with polynomial runtime in the worst case. Notably, the runtime of DouILP (that finds integer solutions) again overlaps with that of LP (that only finds fractional solutions), which shows the practical advantage of DouILP in the algorithm pool.

Fig. 3
Download : Download high-res image (377KB)
Download : Download full-size image
Fig. 3. Runtime comparison.

Moreover, we run our algorithms against smaller graphs ranging from being sparse to being dense. For the instance, 
 
 decreases from 15 to 3 while  is fixed. As depicted in Fig. 3c, when n is small (i.e. ), IterRA consumes more time than others regardless the graph density. Together with the result from Fig. 3b, this tells that IterRA suits better for the practical large-scale sparse graphs. In addition, the runtime of DouILP stays stable with ILP.

4.2. Solution quality analysis
In this subsection, we shall evaluate the practical approximation ratio of our algorithms defined as follows.
 
 Note that an optimal solution to the LP has an objective value no less than an optimal solution to MDPDC, so what we computed is actually a convincing practical average approximation ratio of IterRA or DouILP. Further, to better evaluate the solution quality optimum solutions are also computed by solving the ILP via using the MIP solver from GLPK.

The simulation results on the average ratio are depicted in Fig. 4, in which we consider the solution performance of the algorithms similarly in dense graphs (
 
), sparse graphs (
 
), and a set of graphs from sparse to dense (
 
 decreases from 15 to 3). In particular, Fig. 4a compares the average ratios of IterRA, DouILP and ILP against LP in dense graphs, where n is set from 20 to 200. As illustrated in the figure, the average ratios of IterRA and DouILP are both in , while the ratio of DouILP is always better than that of IterRA. The average ratios of both algorithms gradually increase, when the graph size grows under the same density. Moreover, ILP has the best performance, i.e. its solutions contain the most paths, which is expected as in theory it produces optimum solutions. Notably, the gap between DouILP (and also IterRA) and ILP is smaller than 0.1, while the gap diminishes as the graph size grows. In contrast, the performances of our algorithms for sparse graphs are as illustrated in Fig. 4b, where n is set from 220 to 320 for a fixed density 
 
. As shown in the figure, along with the increase of the graph size , the average ratios of both DouILP and IterRA against an optimal fractional solution of LP(1) are slightly decreasing. However, the ratios remain above 0.9 and in particular the practical approximation ratio of DouILP is roughly at 0.97 (when ). In Fig. 4c, we consider the case that 
 
 decreases from 15 to 3 for a constant  and m increases from 240 to 1200. The result shows when the number of edges increases from 240 to 720, the ratio of IterRA attains the minimum of 0.94 among all algorithms. Notably, when m increases from 720 to 1200, the ratio of IterRA picks up and also the gaps among IterRA, ILP and DouILP diminishes. In contrast to IterRA, DouILP has a better stability with its ratios remaining above 0.97 for all instances. Overall, the above runtime and solution quality experiments have validated a praised performance of our proposed algorithms, and in particular, a superior and consistent performance of DouILP in both runtime and solution quality (the number of valid paths found).

Fig. 4
Download : Download high-res image (342KB)
Download : Download full-size image
Fig. 4. Comparison of solution performance guarantee.

4.3. Observing features of LP solutions
The integral rate for the result of LP is evaluated in this subsection. The simulation is first conducted over instances of MDPDC with varying sizes  where  and m increases from 240 to 1200 with a step size of 60. We survey the integral rate result of the LP over 100 runs and obtain the smooth curve through interpolation. As shown in Fig. 5a, the actual integral rate of LP is always within the range of . For a fixed constant node size, when m grows from 240 to 660, the average integral ratio drop to about 0.435; while it has a 0.299 rise, when m grows from 660 to 1200. This finding shows that the integral rate of LP solutions is somewhat correlates with the graph edge size.

Fig. 5
Download : Download high-res image (247KB)
Download : Download full-size image
Fig. 5. Integrality rate of solutions.

Moreover, we investigate how many edge solutions (
's) are fractional among all edges in the solution of LP. In the experiment, we randomly generate some new instances of a given size . Similarly, the node number n remains a fixed constant of 60, and the edge number m grows from 240 to 1200 with a step size 60. We run LP against the instance and pick out the example whose LP-solution is fractional. Then, we calculate the ratio of fractional colored edges (that consist the path-flows) in the solution for each instance and display it in Fig. 5b. With respect to the constant node number, the ratio shows a clear downward tendency along with the raise of the edge number. Together with what Fig. 5a depicts, we could reason that the number of edges does significantly impact on the integrality of the LP-solution.

5. Conclusion
In this paper, we studied the MDPDC problem and proved it is NP-complete in both directed and undirected graphs via separate reductions from the directed disjoint paths and 3SAT problems. Then, we proposed an integer linear program (ILP) for modeling MDPDC and based on its LP relaxation, we developed two effective LP rounding algorithms for rounding the initial fractional solutions of the relaxation. Finally, through extensive numerical experiments, the performance of algorithms is demonstrated by benchmarking with several exact solutions from common ILP and LP solvers.