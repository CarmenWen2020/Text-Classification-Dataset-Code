Abstract
The skyline of a set of two-dimensional points is the subset of points not dominated by any other point. In this paper, we consider a set of two-dimensional points (in rank space) that are assigned an additional category, or color. The goal is to preprocess these points so that given a three-sided region of the form [a,b]×[τ,∞] we can return the set of distinct colors on the skyline of the queried region. We approach this problem in the external memory model and present an I/O-optimal data structure that answers a query using O(1+kB) I/Os and requires O(nlog⁎⁡n) words of space, where n is the number of points, k is the size of the solution, and B is the block size. Additionally, we provide a space-time trade-off by presenting a data structure that answers a query using O((log⁎⁡n)2+kB) I/Os and requires O(n) words of space.

Keywords
Skyline queries
Range queries
Categorical queries
External memory data structures

Skyline queries ask the following: given a set of points P, what are the points in P that are not dominated by any other point? In two dimensions a point 
 dominates a point 
 if 
 and 
 or 
 and 
. That is, 
 is at least the value of 
 in one dimension and larger than 
 in the other dimension. This paper deals with a variation on this problem called categorical range skyline queries. We begin with a set of two-dimensional points P, where every point in P has been assigned to a category, which we synonymously call a color. We would like to build a data structure that, by preprocessing P, can efficiently return the distinct colors on the skyline of a queried region . See Fig. 1 for an example.

Fig. 1
Download : Download high-res image (27KB)
Download : Download full-size image
Fig. 1. Given the query region  the distinct colors on the skyline need to be reported. Notice blue (circle) is only reported once. (For interpretation of the colors in the figure(s), the reader is referred to the web version of this article.)

There are numerous applications where being able to answer such queries is of value. The skyline of a data set often consists of the most important or interesting points. For instance, in engineering and economics, computing the skyline is a way of finding the Pareto frontier for a set of resource distributions. Here, the Pareto frontier represents all possible resource distributions where it is impossible to allocate any more resources to one dimension without negatively impacting another. To be more concrete and to illustrate the type of queries we wish to address, let us consider an example with a set of hotels as data points. These hotels have three aspects: cost, distance from the beach, and brand. A user may wish to know which hotel brands have hotels that are 5 to 10 miles from the beach, priced starting at $100 per night, and where being closer to the beach will necessarily cost them more. The skyline then consists of the individual hotels which fit these criteria, whereas the set of colors would be the distinct hotel brands contained on the skyline.

Note that in this case, answering this query by first finding which hotels are on the skyline, then locating their brands is sub-optimal. This is since examining every hotel on the skyline may involve considering the same brand multiple times, resulting in a sub-optimal number of I/Os. We present a solution here that avoids this inefficiency.

1. Results
The problem we wish to solve is defined formally as follows:

The Categorical Range Skyline Problem

Given a set of points P of the form , preprocess the points so that given a query region  the query response is the distinct values of  present on the skyline of the region .

This paper provides two solutions to this problem. We state these solutions in the form of the following two theorems. The proofs of these theorems are given in Sections 5 and 6 respectively.

Theorem 1

Under the external memory model of computation, categorical range skyline queries can be answered in the optimal number of I/Os using a near-linear space index. Specifically, there exists an 
 
-I/O and 
⁎
-space index, where n is the number of points in P, B is the block size used in the model, k is the size of the solution, and 
⁎
 is the iterated logarithm.1

The next theorem shows that a time-space trade-off is possible. Instead of the data structure behind Theorem 1, one can obtain a data structure requiring linear space that answers queries with an increased number of I/Os.

Theorem 2

Under the external memory model of computation, there exists an  space index that can answer categorical range skyline queries using 
⁎
 
 I/Os, where n is the number of points in P, B is the block size used in the model, and k is the size of the solution.

2. Related work
The proposal to incorporate the skyline operator into database systems initially came from Börzsönyi et al. in 2001 [1]. Since then, there have been several notable results on skyline queries. These include an I/O-optimal solution [2] and an online algorithm that efficiently finds points on the skyline and then allows the user to search the skyline [3]. In the higher dimensional setting, Rahul and Janardan [4] considered points in d-dimensions, where each point has t additional real-valued attributes called features. They showed how to answer skyline queries using 
 space and 
 I/Os, where n is the number of points in the dataset and occ is the number of points on the skyline. As a hardness result, they showed that if the dimension is at least two and the number of additional features at least three, then reporting the number of points on the skyline is at least as hard as the set-intersection problem. Other works on skylines include finding the skyline in uncertain databases [5], finding k-dominant skylines [6], computing categorical skylines in streaming data [7], and data structures for the dynamic setting [8]. See [9] for a catalog of problems related to skyline computation.

The colored (or categorical) range reporting problem has also received significant attention [10], [11], [12], [13], [14], [15], [16], [17], [18]. Other variants, such as top-k color reporting [19], [20], have also been studied. The problem of approximate range counting has also been approached in [21]. In the external memory model, one-dimensional color reporting has seen a series of improvements [22], [23], [24], culminating in the I/O-optimal index of Nekrich and Vitter [18]. For answering two-dimensional and three-sided categorical range queries, Larsen and Walderveen [25] presented an 
 
 I/O index that occupies  words of space, where 
⁎
. This allows for a trade-off between space and memory. For example, one can obtain either a linear space solution requiring 
 
 I/Os per query, or a 
⁎
 space solution requiring 
 
 I/Os per query. To answer four-sided queries, standard techniques lead to an index with a  multiplicative factor in space that retains the query time. Patil et al. [26] propose a solution for Categorical Range Maxima Queries with a similar space-time trade-off.

Several of the techniques used in this work are inspired by those used in [26] for categorical range maxima queries. First is the double chaining technique. To account for the differences between skylines and range maxima, the double chaining technique requires modifications in how a ‘chain’ is defined. Also, like in [26], bootstrapping is used here for obtaining the desired number of I/Os. The difference here is the number of intervals that we decompose a queried region into and the order in which we process these intervals. We create more intervals in our decomposition for skylines than for range maxima. The order in which these intervals are processed for skyline queries is specific, whereas any order is valid for range maxima.

Finally, we point out that the positive results presented here for three-sided queries contrast recent hardness results for the case of four-sided (non-categorical) skyline queries, where query regions are of the form . Results by Kejlberg-Rasmussen et al. in [8] demonstrate that in the indexability model, where a word stores exactly one indivisible coordinate, any index using  space will require 
 
 
 I/Os for some constant . These results suggest that it is unlikely that we can extend our techniques to the four-sided case.

3. Preliminaries
External Memory Model: Given its applicability to large data sets, it makes sense to analyze algorithms and data structures for problems like the one considered here in the external memory model. The external memory model has a two-level memory structure. It effectively models a system where the main memory is fast but is bounded in size, and the external memory (disk) is much slower but is unlimited in size. Arithmetic operations can be done on the data stored in the main memory. Operations done on data in main memory are considered free and the algorithm complexity is measured in terms of the number of I/O operations between the external memory and the main memory. One I/O operation can read a contiguous block of B words from the disk into the main memory or write a block of B words from the main memory into the external disk. This model of computation is most appropriate in cases where the transfer of data between external memory and the processor dominates the computation time.

Rank Space: Throughout this paper we assume the data set's n points, each of the form , have their i and  components mapped onto rank space. That is, each i and  value on the  grid belongs to exactly one point. The points can be mapped to rank space in preprocessing. Moreover, given a query  we can efficiently map a, b, and τ to their corresponding values in the  grid [27]. See Fig. 2.

Fig. 2
Download : Download high-res image (19KB)
Download : Download full-size image
Fig. 2. An example of points mapped onto rank space.

Our solution requires the ability to perform the following types of queries.

Three-dimensional Dominance Reporting: Given a set of three-dimensional points P, we can build a data structure such that for any query point 
 all points dominating q are reported. Here, these are the points 
 where 
, 
, and 
. This can be done in linear space and 
 
 I/Os per query [28].

Three-sided Orthogonal Range Reporting: Given a set of two-dimensional points P in rank space, we can build a data structure such that for any query region  we can report the points in . This can be done in linear space with an optimal 
 
 I/Os per query [29].

We are now ready to begin describing the data structures necessary to prove Theorem 1, Theorem 2.

4. Base-level data structure
In this section we provide a solution that uses linear space and requires 
 
 
 I/Os per query. Although sub-optimal in terms of the number of I/Os, it will provide us with the essential building block to arrive at the desired results (via bootstrapping techniques discussed later). The overall idea is to augment every point with a pair of intervals. We then build three-dimensional dominance reporting structures over particular subsets of the points.

We begin by describing the pair of intervals corresponding to each point. At query time, we will check whether one of the intervals is stabbed by the value a and the other by the value b. Finding all candidate pairs of intervals that meet this criterion can be done using nested interval trees. We will evaluate any remaining inequalities using three-dimensional dominance reporting structures.

4.1. Double chaining – creating the intervals for each point
Gupta et al. introduced a chaining technique similar to the one used here in [30]. It was later expanded on in [26]. We present a variation on their ideas. For each point  we define: See Fig. 3 for an illustration.

Fig. 3
Download : Download high-res image (31KB)
Download : Download full-size image
Fig. 3. An example of double chaining. Note that the prev pointer for pi points to the leftmost triangle rather than the nearest previous one. On the other hand, the closest dominating point is pointed to by next.

The following lemma establishes the role of  in solving the problem. Its proof can be easily seen by recognizing that  gives the first component of the next point to the right that dominates .

Lemma 1

A point  in the region  is on the skyline of  iff .

Proof

If  is on the skyline of  then it is not dominated by any other point in . Hence, the next dominating point for p in P, if it exists, has its first component value greater than b. If it doesn't exist, then p's  value, ∞, is greater than b also. Conversely, if , then p is not dominated by any point in  and so is on 's skyline. □

In other words, the  value allows us to check which points are on the skyline. The exact role of the  values is established by the next lemma.

Lemma 2

A point  on the skyline of the region  is the highest point (largest  value) with the color  on the skyline iff .

Proof

If , then  is also on the skyline of , has a higher  value than p, and has the same color as p. Thus, p cannot be the highest point on that skyline with the color .

Conversely, if , then the closest preceding point with the same color that could be on the same skyline as p is not in . Thus, p is the highest point in  with the color . □

To indicate the connection between these interval pairs and the original point  we use the five tuple . Combining Lemma 1, Lemma 2, we see that a point  is the highest instance of color  on the skyline of region  iff  and . Incorporating the remaining constraint that , the points which have the colors we would like to report will be the points that satisfy the five conditions in Lemma 3.

Lemma 3

Necessary and sufficient conditions for a point  to be in the solution set for a query  are: (1) , (2) , (3) , (4) , and (5) .

Crucially, two of the constraints can be phrased in terms of interval stabbing. The backward interval  must be ‘stabbed’ by a (by saying  being stabbed by h, we mean that ). Similarly, the forward interval  must be stabbed by b.

For categorical range skyline queries in the Word-RAM model, optimal solutions for five-sided rectangle stabbing in three-dimensions can be adapted to this problem [31]. In the pointer machine model, we can adapt near-optimal solutions for five-sided rectangle stabbing from [32]. However, we study this problem in the external memory model, resulting in the techniques used here being more similar to the ones used in [26].

4.2. First-level interval tree
We first describe how to construct an interval tree that allows us to find all candidate points where  is stabbed by the value a in 
 
 I/Os. We start with a balance binary search tree with n nodes that uses the right end points of the intervals  for  as keys. For every node 
, , we assign a set of intervals:

Although simple, we establish the following fact because it allows us to later truncate the trees while maintaining linear space.

Lemma 4

Every interval ,  is included in exactly one node's interval set.

Proof

The interval  is included in  unless  was stabbed by the key of some ancestor, hence  is contained in some set. Once  appears in  by definition it cannot appear in any of 
 ancestor's sets. But suppose instead  appears in  where 
 is not one of 
 ancestors. Without loss of generality, we assume . There must exist some key value ℓ for a least common ancestor 
 such that . But since h and j stab , we have ℓ must stab  as well, a contradiction. □

To obtain all intervals that are potentially stabbed by a, we can traverse the tree from the root until we find the vertex 
 where i is the predecessor of a in the set of first component values of P. Any interval stabbed by a must belong to an interval set along the path from the root to 
. Therefore, identifying interval sets that need further examination requires  I/Os.

Remembering that the target number of I/Os in this section is in fact 
 
, we now modify the tree slightly. Let  denote the number of nodes in a vertex v's subtree. We next identify the nodes, 
, where 
 and the size of 
's parent is greater than B. Using  to denote the keys belonging to the nodes of the subtree rooted at 
, we then set 
. The height of each subtree removed was . It follows that, after this modification, identifying interval sets that need further examination now requires 
 
 I/Os.

4.3. Second-level interval tree
For each node 
 we now have a set of intervals . Each backward interval,  has a corresponding forward interval . For this set of forward intervals corresponding to intervals in , we now construct an interval tree keyed off of the left end point of the forward intervals. For each of these intervals  we create a node 
 in a balanced binary search tree. We define an interval set for the node 
 in the second-level tree as:

Exactly as was done for the first-level interval tree, we reduce the height of the tree by unioning the interval sets in subtrees of nodes where their size is less than B. This again makes the height of the tree 
 
 and the number of interval sets that need to be inspected on a path in a second-level interval tree 
 
.

To get nodes whose interval sets potentially contain intervals where the backward and the forward intervals are stabbed by a and b respectively, we traverse the interval tree described in section 4.2, gather up 
 
 nodes on the first-level. Then for each of these first-level nodes, 
, we traverse their interval tree, gathering 
 
 nodes with corresponding interval sets . Based on the heights of the trees, the total number of I/Os needed for this is 
 
. In terms of space, by Lemma 4 every backward interval appears in only one node's interval set in the first-level interval tree. By the same argument, this paired forward interval appears only once in its second-level interval tree. Therefore, a forward and backward interval pair is only stored once in the entire structure and the total space used by this data structure remains linear.

By the time we have finished traversing the nested interval trees, we have gathered a set of points such that any point in our solution set is in this set as well. We need additional data structures to check which of these points satisfy all of the inequalities listed in Lemma 3.

4.4. Applying dominance queries to obtain a final set of points
Let  be one of our candidate interval sets obtained after traversing the nested interval tree. We want to find the points represented in  that satisfy all of the conditions listed in Lemma 3. Depending on i, j, a, and b, one of the following cases applies:

Case 1.
: We need  where , , and .

Case 2.
: We need  where , , and .

Case 3.
: We need  where ,  and .

Case 4.
: We need  where , , and .

Although we can not know before seeing a and b which of these four cases will apply, we do have the values k, , ,  at our disposal for preprocessing. We can therefore preprocess each interval set 's corresponding points for answering four separate types of three-dimensional dominance queries. These four queries correspond to the four cases above. We build the data structures for answering:

Query type 1.
Preprocess points  such that give query point  we can find all points dominating q.

Query type 2.
Preprocess points  such that give query point  we can find all points dominating q.

Query type 3.
Preprocess points  such that give query point  we can find all points dominating q.

Query type 4.
Preprocess points  such that give query point  we can find all points dominating q.

Using the data structure discussed in Section 2, we can build each of the needed dominance reporting structures in linear space. Hence, the overall space remains linear. The I/Os used by a query on one of these dominance reporting structures is 
 
 
 
, where 
 is the number of solutions present in . It follows that the total number of I/Os for a query on our structure is 
 
 
 
 
.

4.5. Summary of the base-level data structure
In summary, the base data structure consists of an interval tree containing a nested interval tree for each node. The first-level interval tree is for the backward intervals, where each node is assigned a subset of intervals. The second-level interval tree for node 
 is for the backward intervals of points whose forward intervals are in 
's interval set. Three-dimensional dominance structures are created for every second-level node. This consists of four three-dimensional dominance reporting structures per second-level node, each to answer one of four distinct query types. The total space remains linear.

Querying is done by traversing the first-level interval tree until the predecessor of a is reached. All nodes along this path have their second-level interval tree searched in the same way, identifying for each second-level interval tree a set of candidate nodes. Then all nodes along these second-level interval tree paths have three-dimensional queries applied to them, the type of query depending on which of the four cases above apply. The number of I/Os per query is 
 
 
. We report the colors returned to us from these three-dimensional dominance queries as our response to the input query.

5. 
⁎
-space solution with optimal 
 
 query I/Os
We next apply bootstrapping to convert our linear space, 
 
 
 I/O-solution to a solution with 
⁎
 words of space and a query cost of 
 
 I/Os. The essence of the approach is to store answers to sub-problems in such a way that they can be efficiently recombined into the correct solution. Notice that we only have to be concerned with the case where the 
 
 term dominates. Hence, throughout this section we assume 
 
.

5.1. Data structure
We will decompose the interval  into a constant number (seven) subintervals. On the subintervals which are not on the boundary (i.e., not containing the points a or b) we will use precomputed solutions, whereas on the subintervals on the boundaries we will use the data structure described in Section 4. Define 
 
 and 
 
 for 
⁎
 
, and 
. Without loss of generality we assume that all 
 values are a multiple of 2. The boot-strapping is designed as follows:

•
Base-level structures: For 
⁎
, we partition  into disjoint intervals of size 
 (disjoint with respect to the same value of j). For each of these intervals we build the data structure described in Section 4. The space for storing the internal structures is linear. Therefore, summing over j from 0 to 
⁎
, the total space required is 
⁎
.

•
Type 1 precomputed solutions: For each interval 
, where 
 
 and 
⁎
, we consider the intervals starting from i of lengths 
, 
, 
, 
, …, and continuing in powers of two until the first interval who's rightmost boundary crosses a boundary of an interval of length 
 created in the previous step (see Fig. 4). For each of these intervals we store 
 points from the solution on that interval's skyline. This is done in a left-to-right order (highest  value to lowest  value).

Fig. 4
Download : Download high-res image (25KB)
Download : Download full-size image
Fig. 4. The kj precomputed solutions are stored for intervals of lengths that are powers of two times Δj until the interval crosses the next Δj−1 boundary.

Consider a fixed j. The number of solutions we will have to store is at most 
 where 
. This implies 
 
, and for a fixed j the total space is
 
 
 
 
 
 which is . Summing over j from 
⁎
 gives us that the total space overall precomputed type 1 solutions is 
⁎
.

We next add one more type of precomputed solution.

•
Type 2 precomputed solutions: For 
⁎
, for each interval 
 above, and for all : we store the top 
 solutions for the interval starting from 
 and ending at the next boundary of an interval of size 
. Similarly, for 
⁎
, for each interval 
 above, and for all : we store the top 
 solutions for the interval starting at rightmost boundary of the preceding interval with size 
 and ending at i. For an illustration of the concept see Fig. 5, Fig. 6. As before, these solutions are stored in an order such that the values of  are descending.

Fig. 5
Download : Download high-res image (17KB)
Download : Download full-size image
Fig. 5. Here h1,h2 < j. There are kj precomputed solutions stored from the right boundary of an interval of length Δj to the first boundary of an interval of length 
. The kj solutions are stored to the first boundary of an interval of length 
. The discussed intervals are shown in grey.

Fig. 6
Download : Download high-res image (14KB)
Download : Download full-size image
Fig. 6. Here h1,h2 < j. There are kj precomputed solutions stored from the right boundary of an interval of length 
 to the first left boundary of an interval of length Δj. The kj solutions are stored for the interval starting at the right boundary of an interval of length 
. The discussed intervals are shown in grey.

For each of the 
 
-intervals of size 
, we have to store 
 solutions  times. That is, for a fixed j the space is 
. We get the total space by summing over all values of j,
⁎
 
 
 
⁎
 
 
 
 
⁎
 
⁎
 
 
 
 
 which one can check is 
⁎
. Next, we show how to perform a query.

5.2. Interval decomposition and querying
We are given as input a query region . We assume for now that the output size of the solution is k and we know π such that 
 (we will show how to deal with not knowing the output size in Section 7). Let 
 be the longest span of intervals of length 
 inside , j the smallest value such that 
 completely contains a 
 interval, and m the number of intervals of length 
 inside 
. For some index 
, this maximal span of m intervals of lengths 
 goes from the index 
 to the index 
. Observe that the interval 
 can be covered by two overlapping intervals of length 
 and 
 for some 
, which can be found in constant time.

We decompose the interval  into six subintervals:

•

•

•

•

•

•
.

See Fig. 7 for an illustration.
Fig. 7
Download : Download high-res image (20KB)
Download : Download full-size image
Fig. 7. The six subintervals in the decomposition of [a,b]. Intervals R1 and R6 are solved with the base-level structure, intervals R2 and R5 with type 2 precomputed solutions, and intervals R3 and R4 with type 1 precomputed solutions.

We process the subintervals in the right to left order 
, 
, …, 
. The skylines of each of these subintervals are scanned from the highest  value to the lowest, i.e., from left to right. There are two important rules regarding how points on the skylines of subintervals are to be processed.

1.
While processing points we keep track of the highest  value seen so far. That value gets set as the τ value for the next subinterval to be processed.

2.
For every point on the skyline of a subinterval, we report that point's color only if its  value is less than a.

The first rule is important to ensure that we do not output the colors of points that are not on the skyline of the entire queried region . The second rule ensures that we report each color only once. See Fig. 8 for an illustration. Because there are only seven subintervals in our decomposition, we only decide not to report a color at most six times.

Fig. 8
Download : Download high-res image (19KB)
Download : Download full-size image
Fig. 8. When processing R6 and R5, we first take the highest A[⋅] value of R6, in this case the A[⋅] value of p1, and set it as the lower bound of the next range. This is necessary otherwise points p2 and p3 might be consider for the solution. The point p1 is not consider in the final solution since its prev value is greater than a.

Processing 
.  For the subinterval 
, the solutions are obtained from the base-level data structure from Section 4. The particular base-level structure used is the one for subinterval 
 (recall the definition of 
 is such that it defines a span of 
 length intervals, so we know a new 
 length interval starts at 
). Since the solutions are stored from right to left, we can stop processing points, , once . The number of I/Os required is 
 
 
. Which, by substituting in the definition of 
, one can also see is 
 
.

Processing 
.  Here we use type 2 precomputed solutions, which extend from the left boundary of intervals of 
 length intervals to the right boundary of a 
 length interval as in Fig. 6. These are, as before, processed from left to right following processing rules 1 and 2 given above.

Processing 
 and 
.  The subinterval 
's solutions can be obtained from type 1 precomputed solutions, namely the precomputed solutions for the intervals of length 
 starting from the left boundary of the 
 interval 
. Note that at most one boundary of a 
 interval exists inside 
, and if there is one we can take the left boundary of 
 to be that boundary. Once processing points from 
 is completed, we begin processing points from 
. Here we can stop once if i values exceed the left boundary of 
.

Processing 
.  The subinterval 
 is processed in the same way as 
, using type 2 precomputed solutions. Here the precomputed solutions begin from the right boundary of a 
 length interval and are read until the left boundary of a 
 length interval as in Fig. 5.

Processing 
.  The final subinterval is processed in the same way as 
 using a base-level data structure. Note that in this subinterval all solutions reported by the data structure will have  values less than a, and so will have their colors reported.

Summary.  The reason for decomposing the interval as described above is twofold. First, base-level data structures from Section 4 can be used on the subintervals at the boundaries of . Second, a constant number of subintervals with type 1 and type 2 precomputed solutions can be used inside the interval 
. Having a constant number of subintervals implies that the number of times a color that is not in the solution will be seen is constant as well. As a result, the total number of I/Os is 
 
.

6. -space solution with 
⁎
 
 query I/Os
Some modifications have to be made to the above solution to achieve the improved space bounds. The first is that we have to modify which points are being maintained in the base-level structures. This works to decrease the total required space. The next is the addition of a three-sided orthogonal range reporting structure. Finally, we modify which precomputed type 2 solutions are maintained.

6.1. Modifying the base-level structure
In Section 5 we used the base structures described in Section 4 to store all points  where i falls inside the interval. We showed that this resulted in 
⁎
 space being used. To make the space linear, we will instead store only a subset of these points. To this end, we will classify each point. Moving forward, we refer to the disjoint intervals described in Section 5 of length 
 as 
-intervals.

Definition 1

A point  is a type j point if j is the smallest value such that both intervals  and  are stabbed by boundaries of a 
-interval, and at least one is not stabbed by a 
-interval.

For each 
-interval we store within its base-level structure all points of type  and . By including only these points in each base-level structure, the space remains linear. This holds since each point has exactly one type, causing it to be included in at most two base-level structures.

6.2. Addition of three-sided orthogonal range reporting structure
Using the structure outlined in Section 2, we can build a three-sided orthogonal range reporting structure for each type of point (
⁎
 
). In a range reporting structure created for type j points we add the two-dimensional points . These structures can then answer queries of the form  and . They require linear space, and can report all points which satisfy these criteria with an optimal 
 
 I/Os. Again, since each point is of one type the overall space remains linear.

6.3. Modifying type 2 precomputed solutions
In Section 5, the precomputed solutions of type 2 occupied 
⁎
 space. Now we are looking to store less. Let ϕ be the value such that 
 
⁎
 
 
. Then for 
⁎
 
 we have 
⁎
 
. We store the following:

•
Type 2 precomputed solutions: For each interval of length 
 where , we do the same as was done previously. That is, we store the top 
 solutions on the skyline for the interval starting on the right boundary of the 
-interval to the first left boundary of an interval of length 
 where . Also, for this 
-interval we store the top 
 solutions on the skyline from the interval starting at the rightmost boundary of the preceding 
-interval of length , and ending at the leftmost boundary of the 
-interval.

However, for every interval of size 
 we now store less than was done in Section 5. We only store solutions up to the boundaries of 
-intervals. Specifically, we store the top 
 solutions on the skyline for the interval starting on the right boundary of the 
-interval to the first boundary of a interval of length 
. Also, for this 
-interval, we store the top 
 solutions on the skyline for the interval starting at the rightmost boundary of the preceding 
-interval and ending at the leftmost boundary of the 
-interval.

The space required for the solutions where  is
 
 
 
 
 
 
 
⁎
 
 
 
 This is  for our choice of ϕ. At the same time, the space required for type 2 solutions from -intervals is
 
 
 
 which is .
6.4. Querying
Again we assume 
, and delay showing how to handle not knowing k to Section 7. The querying strategy is similar to that presented in Section 5. We decompose the queried interval in the same fashion as before. We work from right to left, modifying the τ value with the highest  value from the previous interval. We also check whether  to see if the point is to be included in the final solution. The major difference comes from a case-based procedure we have to use for all but 
 and 
 when processing the subintervals. The procedure for the subintervals 
 and 
 is unaltered from the procedure given in Section 5.

6.5. Modifications to processing 
 and 
We show how to modify the processing of 
. The modifications for 
 are similar. We query the internal structure for the interval 
. The number of I/Os required for this is again 
 
, but it now only returns a subset of the desired points, in particular those of type  and type .

For , we next query the three-sided orthogonal range reporting structure for type h with the query 
. This returns all points of type h where  and  cross the boundaries 
 and 
 respectively, and . This is since each type of point  implicitly crosses these boundaries 
 and 
. Each of these queries is I/O-optimal in the number of solutions of type h. Suppose there 
 solutions return from three-sided orthogonal range query for h. Then, for a given h, the range reporting requires 
 
 I/Os. Since this has to be performed 
⁎
 times, the overall number of I/Os is 
⁎
 
.

For , we consider the intervals 
 and 
. If , a point can only be a valid solution if it lies within this interval, so this is all that is necessary. In 
 
 I/Os we get all points with p in these intervals and check whether the conditions given in Lemma 3 hold. This requires 
 
 I/Os and hence 
 
 I/Os.

6.6. Modifications to processing 
 and 
We show how to modify the processing of 
. The modifications for 
 are similar. We have three cases dependent on the relationship between π and ϕ.

Case 1.

Use the type 2 precomputed solutions exactly as was done in Section 5. Since , we have the proper number of precomputed skyline points at our disposal.

Case 2.

Use the precomputed solutions of type 2 from the boundary of the 
 interval, 
, to the right boundary of the first 
-interval preceding 
, say index ℓ. The remaining interval within 
, which is 
, then falls into Case 1 above since ℓ is the boundary of 
 interval.

Case 3.

Let 
 be the first boundary of a 
-interval preceding 
. Apply the base-level structure for the interval 
 using the procedure given for processing 
 above. This gives us the skyline points on this subinterval of 
 using 
⁎
 
 I/Os. For the remainder of 
 which is 
, because 
 is the boundary of a -interval, we can then apply the procedure from Case 2.

6.7. Summary
Most of the features from the solution in Section 5 remain intact here. Importantly, there are still only a constant number of subintervals processed. Hence, colors that belong in the solution get processed only a constant number of times. The increase in the number of I/Os stems from a decrease in the number of points that are stored in the base-level structure, and an increase in the number of points that are found through techniques like querying the three-sided orthogonal range reporting structure or using direct comparison with the conditions from Lemma 3.

7. Computing output size
Applying the algorithms described in Sections 5 and 6 requires knowing the size of the solution set k. Of course, we do not know the value of k in advance. However, the solution to this problem is relatively simple. For both the optimal I/O and the optimal space case we presented data structures for answering queries with solution size k where 
 and 
⁎
 
. Therefore, we can apply the following procedure to obtain the solution.



Download : Download high-res image (39KB)
Download : Download full-size image
For the I/O-optimal algorithm, the number of I/Os used while running this procedure is
⁎
 
 
⁎
 
 
 

Notice that the constant is only added once since we stop when no more solutions are found. Since the term 
 
 dominates this is also 
 
 I/Os.

For the linear space algorithm, the number of I/Os used running this procedure is
⁎
⁎
 
 
⁎
⁎
 
 
⁎
 
 Again, the term 
 
 dominates the other fractional terms. The 
⁎
 term can be repeated up to 
⁎
 times putting the number of I/Os at 
⁎
 
.

8. Summary and open problems
We have provided two solutions to the categorical range skyline reporting problem in the external memory model. The first requires 
⁎
 words of space and outputs the categories and their corresponding points in optimal 
 
 I/Os. The other requires linear space and outputs the categories and their corresponding points in 
⁎
 
 I/Os. Both are built off of a nested interval tree structure which answers the queries in suboptimal I/Os for 
 
. Bootstrapping techniques are then applied to give the desired results.

These results suggest several interesting open problems:

•
Is it possible to obtain an I/O-optimal solution that requires only linear space?

•
What space and I/O bounds are possible for a variation of this problem where in addition to reporting the distinct colors on the skyline we also have to report their frequencies?

•
What space and I/O bounds are possible for the problem of reporting the top-k most frequent colors on the skyline of a three or four-sided region?