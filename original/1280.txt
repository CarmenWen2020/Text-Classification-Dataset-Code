Abstract
Functional encryption (FE), which provides fine-grained access control on encrypted data, is becoming a new hot spot in the field of cryptography. Recent applications, such as outsourcing computation, searchable encryption and so on, suggest that FE has unlimited possibilities. It especially shows great feasibility to construct indistinguishability obfuscation and reuseable garbled circuits. Furthermore, bounded collusion functional encryption is an extension of FE which is against more than one key query and protects the security of messages under more than one function keys. In this paper, we proposed a bounded collusion FE for cubic polynomials, which follows from Agrawal and Rosen's work on TCC 2017. Our construction only invokes the Regev public key encryption and a linear FE scheme which avoids complex encodings defined recursively. What's more, we proposes an FE scheme for all circuit with FULL-SIM security. Finally, we also implement these schemes and do some analyses on parameters' size, time and space performance.

Keywords
Functional encryption
Cubic polynomial
Randomized encodings
FULL-SIM security
Implementation

1. Introduction
The traditional public-key encryption decrypts a ciphertext with a secret key to get a plaintext or nothing. Sometimes, the decryptor only is interested in a characteristic of the plaintext not the plaintext itself in some practical scenarios such as medical diagnosis, data classification and searchable encryption. It would be better if he/she got only the characteristic that he/she interest in and still unknew about the plaintext itself. Functional encryption [1] provides the fine-grained access control on encrypted data.

Developed from the attribute-based encryption [2], functional encryption has received a mounting number of attentions. For any function , the function holder applies for a function key 
 and obtains the result  with a ciphertext 
 and a function key 
. In addition to access control, scholars have found that it plays a significant role in the construction of indistinguishability obfuscation (i) [3], [4], [5]. The efficient general construction of i will solve many unsolved problems in cryptography such as deniable encryption [8], multi-party computation [9], self-bilinear map [10] and so on. But constructing these FE schemes are limited by multilinear maps, fully homomorphic encryption [6], and even i [7]. Thus, how to construct a secure and efficient functional encryption scheme is still an urgent issue.

Bounded collusion functional encryption [11] is an extension of FE with special security requirements. General FE requires the indistinguishability among ciphertexts under one function key 
 while Q-bounded FE resists Q function keys 
. The notion of Q-bounded FE is appealing to prove the security under an assumption that not too many parties are dishonest. A small number of dishonest parties are widely accepted as reasonable in a protocol design. It provides more options for different security requirements as the underlying tool. For example, an encrypted document can be used under multiple departments' function keys without encrypting this document by each department's key.

Dodis et al. [13] proposed a Q-bounded identity-based encryption (IBE) in 2002 while Goldwasser et al. [14] improved it with the smaller size of public parameters. In CRYPTO 2017, Dottling and Garg [15] showed how to bootstrap any bounded collusion IBE scheme into a fully collusion-resistant IBE scheme. Developing from collusion-resistant IBE, Gorbunov et al. [11] proposed a Q-bounded FE scheme for 
 circuits from any public-key encryption scheme. And Waters et al. [16] achieved a private-key Q-bounded FE scheme in 2018. Bounded collusion FE scheme is still on a long road.

Technical Overview. Gorbunov et al. [11] developed a single key FE scheme [12] to a Q-bounded scheme for 
 circuits. And its ciphertext size grows multiplicatively with 
. Recently, [18] reported their work on the Q-bounded FE scheme where its ciphertext size grows additively with 
. And they also presented how to generate an FE for all circuits by using a randomized encoding scheme [17] and a Q-bounded FE scheme for 
 circuits.

The FE scheme for 
 circuits in [18] is based on a single-key FE for linear function [19] and a “Regev encoding” [20] which is like a leveled homomorphic encryption scheme. The Regev encoding considers circuits of depth d, consisting of alternate addition and multiplication layers. Each layer i corresponds to a prime 
. Considering a cubic polynomial 
, Regev encoding needs four levels and these encodings in each level i belong to 
. Please refer to [18] for details.

If we begin with the FE scheme for quadratic polynomials, the situation will be very different. Every ciphertext is like as  where . Here, s is a symmetric key and μ is an R-LWE error. Then a quadratic form is like as
 where N is the input length and the symbol ‘-0-’ refers to serial zeros in these positions. It is easy to use the trick to a cubic form such as
 where 
 and 
, 
. Using a linear functional encryption scheme , we have got our FE scheme for cubic polynomials.

Then we proceed it to an FE scheme for all circuits by invoking randomized encodings. Applebaum et al. proposed a randomized encoding scheme for all mod-2 branching programs where the encoding consists of a set of degree-3 randomized polynomials [17]. We can regard these polynomials as function queries in our FE scheme for cubic polynomials and boost it to FE for all circuits. This method is proposed in [11] and [18]. We only follow them and prove our FE for all circuits satisfying FULL-SIM security.

Our Results. Following Agrawal and Rosen's work [18] on TCC 2017, we proposed our bounded collusion FE scheme for cubic polynomials and boosted it to all circuits. Here are our main contributions.

•
We proposed a Q-bounded functional encryption for cubic polynomials. Different from the functional encryption for 
 circuits in [18], our scheme only relied on any linear function encryption with FULL-SIM secure and the Regev public key encryption with semantically secure abandoned the complex Regev Encoding.

•
We show how to boost to the functional encryption scheme for all circuits from our FE for cubic polynomials and AIK's randomized encodings. The scheme provides FULL-SIM security with a strict proof while the scheme in [18] is only secure vaguely.

•
We implement the FE schemes for cubic polynomials and all circuits by C++ language and NTL library [21]. Meanwhile, we do some analyses about our parameters, time and space performance.

Organization. This paper is divided into six parts and the remainder of it is organized as follows. Section two lays out some formal definitions and security assumptions. Next, the constructions and security proofs of our FE schemes for cubic polynomials and all circuits are discussed in Section 3 and 4. It will be going on to show the parameter analysis, comparison and time performance in Section 5. And the final part is a conclusion.

2. Preliminaries
Before proceeding to discuss these functional encryptions, it is necessary to recall some notations and formal definitions used in this paper. This section consists of functional encryption, randomized encoding, some related secure definitions and the security assumption.

2.1. Notations
The security parameter is λ. The term  is the negligible function that is (asymptotically) smaller than any inverse polynomial. We use boldface to denote vector, such as u, v, and the uppercase to denote matrix. Let 
 denote that the i-th element in the vector u. If u is an n-length vector and v is an m-length vector, we denote  an -length vector formed by concatenating u and v.

Let  denote the set . For any integer , let 
 denote the ring of integers modulo q. If S is a set,  denotes that we sample s uniformly. We pick μ from a gaussian distribution 
 with a parameter σ denoted by 
.

2.2. Functional encryption
Functional encryption, started with the notion of attribute-based encryption (ABE), was proposed by Sahai and Waters's work in [1]. It consists of four algorithms – initialization algorithm , key generation algorithm , encryption algorithm  and decryption algorithm . A functional encryption scheme decrypts a ciphertext with a function key, which are generated from an encryption algorithm and key generation algorithm, respectively. The output of the decryption is the value of a function while classic public-key encryption scheme decrypts it and gets the whole message itself. Here is the formal definition.

Let 
 and 
 denote ensembles where each 
 and 
 is a finite set. Let 
 denote an ensemble where each 
 is a finite collection of circuits, and each circuit 
 takes as input a string 
 and outputs 
. A functional encryption scheme  is defined in Definition 1.

Definition 1

Functional Encryption [1]
A functional encryption scheme  for  consists of four algorithms   is defined as follows.

•
 is a probabilistic polynomial-time algorithm that takes as input the unary representation of the security parameter and outputs the master public and secret keys .

•
 is a probabilistic polynomial-time algorithm that takes as input the master secret key  and a circuit 
 and outputs a corresponding function key 
.

•
 is a probabilistic polynomial-time algorithm that takes as input the master public key  and an input message 
 and outputs a ciphertext 
.

•
 is a deterministic algorithm that takes as input a secret key 
 and a ciphertext 
 and outputs .

A functional encryption scheme  is correct if for all 
 and all 
, 
  where the probability is taken over the coins of ,  and . The security of an FE scheme is defined by indistinguishability and simulation. In this paper, we use the security of the later one. The  security of an FE scheme is defined as follows.

Definition 2

 Security [18]
Let  be a functional encryption scheme for a Boolean circuit family . For a probabilistic polynomial-time adversary  and a probabilistic polynomial-time simulator , consider the following two experiments:

 

1. 
1. 
2. 
2. 
3. 
3. 
4. 
4. 
5. 
5. 
, 
6. 
6. 
7. Output (x,α)	7. Output (x,α)
The functional encryption scheme  is then said to be  secure if there is an admissible probabilistic polynomial-time simulator  such that for every probabilistic polynomial-time adversary , the following two distributions are computationally indistinguishable.

The Definition 2 is a single-key secure definition. As we said above, bounded collusion functional encryption scheme is an extension of traditional FE. In the bounded collusion variant of the above definition, the adversary is permitted a priori fixed Q queries in Step 2, and Q is an input to the  algorithm.

2.3. Randomized encodings
Ishai and Kushilevitz proposed randomizing polynomials [22], to apply them in secure multi-party computation. Any function  with independent random inputs x is mapped into a vector of outputs, whose distribution depends only on the value of . Here is the formal definition as follows.

Definition 3

Randomized encoding scheme for circuits [23]
A randomized encoding scheme  consists of two probabilistic polynomial-time algorithms,

•
: On input a security parameter 
, circuit C, and input x,  generates an encoding 
.

•
: On input 
 produced by ,  outputs y.

Correctness: The two algorithms  and  satisfy the following correctness condition: For all security parameters , circuit C, input x, it holds that,

μ-Simulation Security: There exists a probabilistic polynomial-time algorithm , such that, for every ensemble 
 where 
, 
, the following ensembles are μ-indistinguishable for all .
 where 
 and 
.

A perfect randomized encoding is a randomized encoding that is perfectly correct, perfectly private, balanced, and stretch-preserving, where the perfect private is the same as the definition of μ-Simulation Security.

One perfect randomized encoding scheme, proposed in [17], maps a mod-2 branching programs to some degree-3 randomized polynomials. A branching program (BP) is defined by a tuple , where  is a directed acyclic graph, ϕ is a labeling function assigning each edge either a positive literal 
, a negative literal 
 or the constant 1, and s, t are two distinguished nodes of G. The mod-2 BP means that all operations are in 
. And the size ℓ of BP is the number of nodes in G.

Considering a Boolean circuit 
, whose mod-2 branching program 
 is shown in Fig. 1. We denote  is the edge from node i to node j. The directed acyclic graph G consists of 5 vertexes  and 6 edges , . The labeling function 
 or 
 such as 
 and S, T are nodes 1 and 5. Given an input 
, there is a path from node S to node T with edges , , . However there is no path if the input is 010.

Fig. 1
Download : Download high-res image (16KB)
Download : Download full-size image
Fig. 1. An example of function 
.

Informally, Applebaum et al. transformed the mod-2 branching program to a matrix where the determinant of it is equal the output of the mod-2 BP. And then, those elements of the matrix after embed in some random values are randomized polynomials. The formal definition is shown as follows.

Definition 4

AIK scheme [17]
Let 
 be a mod-2 branching program computing a Boolean function 
. Define a degree-3 function 
, 
 whose outputs contain the  
  entries on or above the main diagonal of the matrix 
. Then, 
 is a perfect randomized encoding of C.

One mod-2 branching program 
 is mapped to a set of degree-3 functions 
, which is the output of 
. And the  algorithm only output the determinant of the upper triangular matrix built from the output of function 
. The length of 
 is  
  while the length of 
 is . The AIK scheme is proven that it is a perfect randomized encodings under the simulator as follows.

Definition 5 AIK Simulator

The simulator 
 outputs the  
  entries on and above the main diagonal of the matrix 
 
, where 
, 
 are randomly chosen, and 
 is a  matrix that contains −1's in its second diagonal, y in its top-right, and 0's elsewhere.

The perfect AIK scheme means that the following two ensembles are indistinguishable.

2.4. Ring LWE assumption
The ring-LWE assumption is an algebraic variant of the LWE assumption. Let 
 where 
, n is a power of 2 and q is a large prime satisfying . It denotes χ as a probability distribution on 
. For 
, let 
 be the probability distribution on 
 obtained by choosing an element 
 uniformly at random, choosing  and outputting .

Definition 6

Decision Ring-LWE problem - 
 [24]
The decision 
 problem is: for 
 given a  number of samples that are either (all) from 
 or (all) uniformly random in 
, output 0 if the former holds and 1 if the latter holds.

We also use a lemma about the bound on the length of vectors sampled from a discrete Gaussian.

Lemma 1

([25]) Let . For any real , and any 
, 

3. Bounded collusion functional encryption for cubic polynomials
The next chapter describes a more detailed account of the bounded collusion functional encryption for cubic polynomials including its construction, correctness and security.

3.1. Optimization of the original scheme
Our bounded collusion functional encryption 
 for cubic polynomials invokes a linear functional encryption scheme LinFE which has been constructed by [26], [19]. A linear functional encryption scheme  includes four algorithms , ,  and , which have the similar definitions as general functional encryption. The algorithm  on input a vector y outputs a function key 
. Using the function key, the decryption algorithm  on input a encrypted vector 
 outputs an inner product .

A cubic polynomial family is defined as
 
 over 
 and its input length is N. The functional encryption scheme 
 is based on R-LWE assumption with two prime moduli 
 and two discrete Gaussian distributions 
 with width 
 and 
 with width 
. The constraints on parameters are given in Section 5. Based on the above, the scheme 
. 
 for cubic polynomial family 
 is given in Algorithm 1.

Algorithm 1
Download : Download high-res image (122KB)
Download : Download full-size image
Algorithm 1. 
. 
.

As discussed in Section 1, a cubic monomial is transformed into
 Thus, a cubic polynomial 
 implies that
 
 
 
 
 where
 Let 
 and 
 be defined as in Algorithm 1. It is easy to know that 

The lengths of vector 
 and 
 are  
 . The  algorithm initializes the linear function encryption with the vector length  
  where Q is the times of function keys query. One vector 
 is encoded to a function key 
 from the algorithm . The other vector 
 is encrypted to a ciphertext b from the algorithm . Then the  algorithm only need to compute 
 and the decrypt algorithm  to get 
.

3.2. Security analysis
Let us now turn to considering its correctness. For any , we have
 from 
. We multiple them each side and get
 where 
 and 
 are defined as above.

Let us assume the cubic polynomial  is the q-th key constructed by 
 where . Under the correctness of the linear scheme , we have that 
 
 
 
 
 
 
 
 as desired.

Next we will prove the construction in section 3.1 satisfies  secure described in Definition 2. The security relies on a linear functional encryption scheme with  security, It means that there is a probabilistic polynomial-time simulator  which inputs a security parameter λ, the length  of a vector, a vector y, its function key 
, and an inner product . The simulator outputs an indistinguishable ciphertext 
 from the output of the algorithm . Given this, the following is the formal proof.

Theorem 2

Given a FULL-SIM secure linear functional encryption scheme  and the Regev's public-key encryption with semantically secure, the functional encryption 
 for cubic polynomial family 
 constructed in Section 3.1 satisfies  security against bounded collusion.

Proof

First of all, we describe the simulator as follows:

Simulator 
:

Upon input the security parameter λ, the length of function's input x, cubic polynomials 
 where 
, function keys 
 and these polynomials' results 
, the simulator do:

1.
Pick 
 uniformly.

2.
Sample the error 
 uniformly.

3.
Compute 
.

4.
Invoke the Q-key LinFE's simulator with input 
 and get the output b by LinFE simulator.

5.
Output 
.

Then, we will prove the output of the simulator is distinguishability from the real one of the algorithm 
. Consider the following hybrids.

•
Hybrid 0: This is the real experiment, namely 
.

•
Hybrid 1: Same as hybrid 0, except that b is computed by LinFE simulator. In detail, it is 
 
 where
 

•
Hybrid 2: Same as hybrid 1, except that
 

•
Hybrid 3: Same as hybrid 2, except that sample c at random. This is the simulated experiment, namely 
.

Finally, we will establish these hybrids are indistinguishable.
Hybrid 0 ⇒ Hybrid 1: In Hybrid 0, it uses LinFE.Enc to encrypt the message 
 and gets
 
 
 In Hybrid 1, 
 where the LinFE simulator is invoked with the above value. Hence, Hybrid 0 and Hybrid 1 are indistinguishable by FULL-SIM security of LinFE scheme.

Hybrid 1 ⇒ Hybrid 2: This follows by the choice of parameters satisfying Lemma 1, it has 
 
 where 
.

Hybrid 2 ⇒ Hybrid 3: Recall that by semantic security of Regev's public key encryption, we have that the ciphertext 
 is indistinguishable from random, where u is part of the public key and 
 is suitably chosen noise.

Given an adversary  who distinguishes between Hybrid 2 and Hybrid 3, we build an adversary  who breaks the semantic security of Regev's public key encryption. The adversary  receives  upon which, it simulates the view  as follows:

•
Run  to obtain  and . Return  to .

•
When  requests a key , construct it honestly as in Hybrid 0.

•
When  outputs challenge x,  outputs the same.

•
 receives c where 
 or random.

•
 samples e as in Hybrid 2 and computes 
.

•
It invokes LinFE.Sim and receives LinFE ciphertext b. It returns  to .

•
Finally, when  outputs a guess bit b,  outputs the same.

 can see the distribution of Hybrid 2 by , otherwise, it will see the distribution of Hybrid 3.
Thus far, the experiments 
 and 
 are indistinguishable. It means that the functional encryption 
 constructed in Section 3.1 satisfies FULL-SIM security against bounded collusion. □

4. Functional encryption for all circuits
The following section describes how to boost the FE for the cubic polynomial family to an FE for all circuits.

4.1. Construction
Considering the circuit family 
, each circuit 
 with input length ω is represented as a mod-2 branching program 
 with size ℓ. Then it begins with an 
 scheme with input length  
  and the number of keys supported  
 .

As discussed in Section 2.3, a degree-3 function 
 with output length  
  is a perfect randomized polynomial generated from  
. We split it into  
  functions 
 
 where each 
 denotes a degree-3 function with the i-th output bit. Thus the number of keys supported Q is  
 . Because a cubic polynomial is represented by 
 for 
 scheme, the cubic function 
 is modified to 
 (the monomials 
 and 
 can be viewed as 
 and 
). Then the input length of each cubic polynomial is  
  where 
  and 
.

4.2. Security analysis
Correctness. For each  
 , we have 
. Based on the correctness of the scheme 
, it implies that 
. The determinant of the matrix 
 is equivalent to the output of 
. Thus, it satisfies 
 under the correctness of the randomized encoding scheme.

Now we will prove the construction in section 4.1 satisfies FULL-SIM secure described in Definition 2.

Theorem 3

Given the FULL-SIM secure functional encryption for cubic polynomials and the perfect randomized encoding scheme constructed by [17], the functional encryption  constructed in Section 4.1 satisfies FULL-SIM security.

Proof

We construct the simulator as follows:

Simulator 
:

Upon input the security parameter λ, the length of BP's input x, the 
 branching program 
, the secret function key 
 and it's output 
, the simulator do:

1.
Get the encoding 
 from the simulator 
 of the AIK randomized encoding scheme.

2.
Split 
 into  
  bit 
 
.

3.
Random pick 
 
 and 
.

4.
Invoke the 
 simulator with input 
, 
 
 and get the output
 

5.
Output 
.

Then, we will establish the real experiment 
 and the simulated experiment 
 are indistinguishable.

Let the real experiment 
 denote the Hybrid 0 and the simulated experiment 
 denote the Hybrid 2. The Hybrid 1 is same as Hybrid 0, except that the randomized polynomial 
 is generated from 
. The Hybrid 2 is same as Hybrid 1, except that the ciphertext 
 is generated from the 
 simulator. Thus the indistinguishability between Hybrid 0 and Hybrid 1 is based on the simulation security of AIK randomized encoding scheme. The indistinguishable between Hybrid 1 and Hybrid 2 is reduced to the SIM-FULL security of the scheme 
. In summary, it implies that the real experiment 
 and the simulated experiment 
 are indistinguishable. □

5. Implementation and analysis
In this section, we will discuss how to choose those parameters which are used in the functional encryption for cubic polynomials and all circuits. And then, it will continue to compare our construction and the Agrawal and Rosen's work. The last part is the time performance and space performance of our schemes.

5.1. Parameters selection
Let us discuss the parameters organized in Table 1 which are used in schemes 
 and .


Table 1. The Parameters used in 
 and .

Notation	Example parameter	Definition
λ	128	256	512	Security Parameter
ω	3	3	3	A  with input length ω
ℓ	5	5	5	A  with size ℓ
N	13	13	13	Input length of the cubic polynomial
Q	10	10	10	The times of function key query
p0	2	2	2	The message space of 
p1	3329	7681	12289	The message space of 
σ0	3.44	4.51	4.86	A discrete Gaussian distribution 
 with width σ0
σ1	10.85	22.78	29.04	A discrete Gaussian distribution 
 with width σ1
We start with an example function 
, whose branching program 
 is shown in Fig. 1. The branching program 
 with input length  and size  is put as one function key query of the scheme  and it obtains some cubic randomized polynomials 
 
. There are  
  polynomials and the input length of each polynomial is  
 . (See Appendix A for the specific of these randomized polynomials.)

Then we consider the functional encryption scheme 
 with two primes 
 and two discrete Gaussian distributions 
 with width 
 and 
 with width 
. Let 
 because the randomized polynomials are defined over 
. The prime 
 and width 
 is related to the Regev's public-key encryptions. Each ciphertext is defined as 
 where 
. Thus we learn the R-LWE parameters from [27] under security parameter . The parameter 
 is constrained to 
 
 from Lemma 1 where . It is similar with the parameter chosen in [18].

5.2. Comparison
Having discussed how to pick parameters, the rest part is the comparison between our functional encryption for all circuits and it in [18]. We denote the former as 
 and the latter as 
.

Let us skim through Agrawal and Rosen's construction. Their scheme 
 is built by a bounded collusion FE for 
 circuits and the AIK randomized encoding scheme. Different from directly using the cubic randomized polynomials as the input of the scheme 
, 
 need to express an sequence of degree 3 polynomials to such circuits with depth d, consisting of alternate addition and multiplication layers. Then they proposed a set of encodings 
 for  which is defined recursively (Shown in Theorem 4.2 in [18]). We denote it by Regev encodings because it is a extension of Regev public-key encryption scheme. In my understanding, each cubic polynomial needs to be expressed as such a circuit of depth . And 
, 
 and 
. That means the functional encryption 
 needs four-level encodings in Regev encodings.

Compaired to 
, our scheme 
 invokes the functional encryption 
 for each cubic polynomial which is generated from AIK randomized encodings. Each cubic polynomial will be put in the algorithm  as an input, and it has the similar operation as 
. Differently, the input x will be encoded as 
 and 
 (
 is the output of the algorithm ) where 
 and 
 . All these encodings are limit to level 2 although the 
 scheme products more encodings than that in 
 when N is enough large. Thus, our construction is more concise than Agrawal and Rosen's.

5.3. Time and space performance
In this section, we will present the benchmark results for our functional encryption schemes. All of our implementations were done on a MacBook Pro with 2.3 GHz Intel Core i5 and 8 GB 2133 MHz LPPDR3. The compiler is Xcode 11.4.1 and the NTL library is 11.4.3 version.2

In this part, the Q-bounded FE scheme 
 of cubic polynomials and the FE scheme  for all circuits are discussed on its time and space performance.

The runtime performance is shown in Fig. 2, which consists of the impacts of the input length N and the times of function key query Q. The left subgraph shows that as N grows, so does the runtime of algorithms ,  and . For each N, it invokes a linear functional encryption with input length 
 and a Regev ciphertext with length N. Thus, the increase in time is closely related to the size of N. The algorithm  needs to build the vector 
 from a cubic polynomial  and the algorithm  consists of the calculation on 
. That implies the runtime of them is higher than the others. The algorithm  only need to calculate the ciphertext under Regev public-key encryption and  which is efficient. Thus, the growth of runtime in  is not obvious.

Fig. 2
Download : Download high-res image (359KB)
Download : Download full-size image
Fig. 2. The runtime performance of the functional encryption for cubic polynomials.

Turning to the right subgraph, the increase in runtime is very insignificant. With the growth of Q, the runtime of each algorithm is around a fixed time. It is a result that the queries Q only impact the input length of the linear functional encryption , which is  
 . It is basically in line with the facts. Generally, our functional encryption for cubic polynomials shows measurable results in time performance.

Besides, we also give the time and space performance of our functional encryption for all circuits(Table 2). We use the branching program 
 where 
, 
 as its inputs. The  algorithm and  algorithm run as fast as those algorithms in 
 scheme. But the  algorithm will be slower because it also needs an AIK encoding computation, and the  algorithm also need a calculation of matrix determinant over 
.


Table 2. Benchmarks of the functional encryption for the circuit 
.

λ	Benchmarks				
128	Time (/ms)	3.28	35.32	24.49	227.46
Space (/KB)	66	33	65	-
256	Time (/ms)	4.86	62.06	43.52	941.52
Space (/KB)	117	48	117	-
512	Time (/ms)	6.81	119.59	80.52	2823.64
Space (/KB)	234	78	234	-
6. Conclusion
Functional encryption is an integral part of modern cryptography. Agrawal and Rosen's proposed a pioneering construction of functional encryption from fully homomorphic encryption. In this work, we follow that and give an improvement and implementation in bounded collusion functional encryption scheme for cubic polynomials. As a supplement, we modify the original AIK's randomized encoding scheme to a scheme with three algorithms and prove the FE scheme for all circuits satisfying FULL-SIM security which is blurry in the previous work. These schemes are also implemented by C language and NTL library under appropriate parameters.

On EUROCRYPT 2019, Agrawal proposed a new study about how to construct indistinguishability obfuscation without multilinear maps. In this paper, the i scheme is constructed by an FE scheme for 
 circuits. And the technology of FE scheme for 
 circuits is similar with [18]. It replaces the FE scheme for the linear function by a noisy linear FE scheme. We hope that this work can devote itself to the effective construction of indistinguishability obfuscation.

Appendix A. An example of the AIK randomized encodings
We will show the details of how to implement a functional encryption for the circuit 
. The input length is  and the size of its mod-2 branching program is .

A branching program (BP) is defined by a tuple , where  is a directed acyclic graph, ϕ is a labeling function assigning each edge either a positive literal 
, a negative literal 
 or the constant 1, and s, t are two distinguished nodes of G. The mod-2 BP means that all operations are in 
. As shown in Fig. 1, the mod-2 branching program 
 consists of , ϕ described in Table A.3, points s and t.


Table A.3. The labeling function ϕ.

(i,j)	(1,2)	(1,3)	(2,4)	(2,5)	(3,5)	(4,5)
ϕ(i,j)	x1	
x2	
x3
Now we show how to generate the encoding 
 of the branching program 
. Let  be the  adjacency matrix of G viewed as a formal matrix whose entries are degree-1 polynomials in the input variables x. Define  as the submatrix of  obtained by deleting the first column s and the last row t. Then, it has , where the determinant is computed over 
. The matrixes  and  of the branching program 
 are shown in Fig. A.3.

Fig. A.3
Download : Download high-res image (27KB)
Download : Download full-size image
Fig. A.3. The matrixes A(x) and L(x) of the branching program 
.

Let 
 and 
 be vectors over 
 of length 
  and , respectively. Let 
 be an  matrix with 1's on the main diagonal, 0's below it, and 
's elements in the remaining  
  entries above the diagonal. Let 
 be an  matrix with 1's on the main diagonal, 
's elements in the right-most column, and 0's in each of the remaining entries. There exists 
 and 
 such that 
 if and only if  (such as in Fig. A.4).

Fig. A.4
Download : Download high-res image (31KB)
Download : Download full-size image
Fig. A.4. The matrix M = R1(r(1))L(x)R2(r(2)).

Then the encoding 
 
 is like as

Appendix B. An example of the functional encryption
The functional encryption scheme for the circuit 
 is shown below.3

•
(
): We have  and . Invoke 
 
, it returns a public key  and a master secret key  of the  scheme for vector's length 102, a vector 
.

•
(,
): We have these degree-3 polynomials 
, 
, …, 
 from the AIK randomized encoding scheme. For each polynomial 
, it invokes 
 algorithm. For an example of 
, 
, we have the vector 
 with 0 elements except that the second element is 1 and the fifth element is −1. Then the vector 
 equals
 and 
. Finally, it invokes  with the input 
.

•
(): It picks 
 and 
 uniformly. Let 
 as the input of 
 algorithm. For details, it computes the encoding 
 with 
 and 
. Finally, it invokes  with the input 
.

•
FE.Dec(PK,SK,CT): Firstly, it gets 
 from 
 algorithm for each  
 . We have 
 and build the matrix
 
 and get 
. Then we have .