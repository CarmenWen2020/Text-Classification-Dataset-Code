Abstract
Given a graph G and an integer k, the paw-free completion problem asks whether it is possible to add at most k edges to G to make it paw-free. The paw-free edge deletion problem is defined analogously. Sandeep and Sivadasan (IPEC 2015) asked whether these problems admit polynomial kernels. We answer both questions affirmatively by presenting, respectively, -vertex and -vertex kernels for them. This is part of an ongoing program that aims at understanding the compressibility of H-free edge modification problems for general H.

Keywords
Kernelization
Paw-free graphGraph modification problem

1. Introduction
A graph modification problem asks whether one can apply at most k modifications to a graph to make it satisfy certain properties. By modifications we usually mean additions and/or deletions, and they can be applied to vertices or edges. Although other modifications are also considered, most results in literature are on vertex deletion and the following three edge modifications: edge deletion, completion (edge addition), and edge editing (both addition and deletion).

Compared to the general dichotomy results on vertex deletion problems [5], [1], the picture for edge modification problems is far murkier. Embarrassingly, this remains true for the simplest case, namely, H-free graphs for fixed graphs H. This paper is a sequel to [2], and we are aiming at understanding for which H, the H-free edge modification problems admit polynomial kernels. Our current focus is on the four-vertex graphs; see Fig. 1 (some four-vertex graphs are omitted because they are complement of ones presented here) and Table 1. We refer the reader to [2] for background of this research and related work.

Fig. 1
Download : Download high-res image (29KB)
Download : Download full-size image
Fig. 1. Graphs on four vertices (their complements are omitted).


Table 1. The compressibility results of H-free edge modification problems for H being four-vertex graphs, where the kernels are measured by the number of vertices. Note that the results for the complement of H are implied; e.g., the answers are also no when H is 2K2, the complement of C4.

H	Completion	Deletion	Editing
K4	trivial	O(k3)	O(k3) [8]
P4	O(k3)	O(k3)	O(k3) [4]
diamond	trivial	O(k3)	O(k8) [2]
paw	O(k) (this paper)	O(k4) (this paper)	O(k6) [3]

claw	unknown	unknown	unknown

C4	no	no	no [4]
In this paper, we show polynomial kernels for both completion and edge deletion problems when H is the paw; see Fig. 1(e). They answer open problems posed by Sandeep and Sivadasan [7].

Theorem 1.1

The paw-free completion problem has a 38k-vertex kernel.

Theorem 1.2

The paw-free edge deletion problem has an 
-vertex kernel.

It is easy to see that each component of a paw-free graph is either triangle-free or a complete multipartite graph with at least three parts [6]. This simple observation motivates us to take the modulator approach. Here we need to use a 2-modulator, by which we mean a set M of vertices that intersects every paw of the input graph by at least two vertices. We then study the interaction between M and the components of , which are triangle-free or complete multipartite. To achieve linear-vertex kernel for the completion problem, we need to use a slightly stronger modulator.

Independent of our work, Eiben et al. [3] also obtained polynomial kernels for these problems. They also developed a polynomial kernel for the more general editing problem to paw-free graphs. For the completion problem, our approaches are very different from theirs. The key observation of us is that if a component of the input graph contains a paw, then we have to add edges to make it complete multipartite. As a result, if there is an edge uv and a vertex w in the same component adjacent to neither u nor v, then uw or vw, or both of them, have to be added. To achieve linear bound on the kernel size, we show that after reductions, the minimum number of edges we need to add to each component is proportional to its order. Tools from graph matchings play an important role in our reduction rules for the completion problem.

Our approach for the edge deletion problem is similar to that of Eiben et al. [3]. Both use the same 2-modulator M and deal with the triangle-free components and complete multipartite components of  separately. The main difference lies in the ways of handling triangle-free components. We further separate them into two types, and bound them with two simple rules, while the rules and arguments in Eiben et al. [3], which are applicable to the more general editing problem, are more complicated.

2. Paw-free graphs
All graphs discussed in this paper are undirected and simple. A graph G is given by its vertex set  and edge set . For a set  of vertices, we denote by  the subgraph induced by U, whose vertex set is U and whose edge set comprises all edges of G with both ends in U. We use , where , as a shorthand for , which is further shortened as  when . The two ends of an edge are neighbors of each other. The set of neighbors of a vertex v is denoted by , and . For a vertex set , we define 
 and . For a set 
 of edges, we denote by 
 the graph obtained by adding edges in 
 to G—its vertex set is still  and its edge set becomes 
. The graph 
 is defined analogously. A paw, as shown in Fig. 1(e), is the four-vertex graph with one degree-three vertex and two degree-two vertices.


Download : Download high-res image (87KB)
Download : Download full-size image

Download : Download high-res image (88KB)
Download : Download full-size image
An independent set of a graph is a set of pairwise nonadjacent vertices. For a positive integer k, a k-partite graph is a graph whose vertices can be partitioned into k different independent sets, called parts, and a k-partite graph is complete if all the possible edges are present, i.e., there is an edge between every pair of vertices from different parts. A complete multipartite graph is a graph that is complete k-partite for some . Note that here we exclude complete bipartite graphs for convenience.

Proposition 2.1

[6] A graph G is paw-free if and only if every component of G is triangle-free or complete multipartite.

In other words, if a connected paw-free graph contains a triangle, then it is necessarily a complete multipartite graph. A set  of vertices is a 2-modulator of a graph G if every paw in G intersects M by at least two vertices. A 2-modulator can be obtained by greedily adding paws that have at most one vertex in it. Note that  is paw-free for any . The following three propositions characterize the interaction between a 2-modulator M and the components of .

Proposition 2.2

Let M be a 2-modulator of G. If a vertex  forms a triangle with two vertices in a component C of , then .

Proof

Suppose that uvw is a triangle with . If v is also adjacent to a vertex x in a different component 
 of , then  induces a paw with only one vertex in M, contradicting the definition of the 2-modulator. □

In other words, if a vertex v in M forms a triangle with two vertices from a component of , then v is a “private” neighbor of this component. As we will see, these components (forming triangles with a single vertex from M) are the focus of our algorithms.
Proposition 2.3

Let G be a graph and M a 2-modulator of G. If a vertex  forms a triangle with an edge in a triangle-free component C of , then (i) v is adjacent to all the vertices of C; and (ii) C is complete bipartite.

Proof

By the definition of 2-modulators,  induces a paw-free subgraph. Since this subgraph contains a triangle, it is complete multipartite. Since C is triangle-free, the subgraph has precisely three parts, one of which is . Both assertions follow from this fact. □

We say that a triangle-free component of  is of type i if it contains two vertices that form a triangle with a vertex in M, or type ii otherwise. By Proposition 2.3, for each type-i triangle-free component, all its vertices have a common neighbor in M. A component is trivial if it consists of a single vertex. Note that all trivial components of  are type-ii triangle-free components.

Proposition 2.4

Let M be a 2-modulator of a graph G, and C a complete multipartite component of . For any vertex  that has a neighbor in C, the set  is either empty or precisely one part of C.

Proof

By the definition of 2-modulators,  induces a paw-free subgraph. Since this subgraph contains a triangle, it is complete multipartite. If v makes a separate part by itself, then v is adjacent to all the vertices in C. Otherwise, the non-neighbors of v are precisely one part of C. □

A false twin class of a graph G is a vertex set in which every vertex has the same set of neighbors. It is necessarily an independent set. The following is immediate from Proposition 2.4.

Corollary 2.5

Let M be a 2-modulator of a graph G, and C a complete multipartite component of . Each part of C is a false twin class of G.

Proof

Let X be a part of C. By definition, each vertex in  is adjacent to all vertices in X. On the other hand, for each vertex , by Proposition 2.4, . Noting that , we can conclude that X is a false twin class of G. □

The preservation of false twins by all minimum paw-free completions may be of independent interest.

Lemma 2.6

Let G be a graph and let 
 be a minimum set of edges such that 
 is paw-free. Any false twin class of G remains a false twin class of 
.

Proof

Let I be a false twin class of G. If I consists of the isolated vertices, then they remain isolated in 
 because 
 is minimum. Hence it remains a false twin class. In the rest we may assume that G is connected; otherwise we consider the component of G that contains I. Moreover, if G is paw-free, then 
 is empty and the claim holds vacuously. Now that G is connected and contains a paw, by Proposition 2.1, 
 is complete multipartite. It suffices to show that vertices in I are in the same part of 
. Suppose for contradiction that  are in different parts of 
; let 
 and 
 be the parts of 
 that contain u and v respectively, and assume without loss of generality that 
.

Observe that every vertex in 
 is nonadjacent to u in 
, hence nonadjacent to u in G, which further implies that it is nonadjacent to v in G because u and v are false twins. Then 
, where 
 and 
, is also paw-free: Parts 
 and 
 are replaced by 
 and 
, while the others remain unchanged. Since 
, this contradicts that 
 is minimum. This concludes the proof. □

Since all of our reduction rules are very simple and obviously doable in polynomial time, we omit the analysis of their running time.
3. Paw-free completion
The safeness of our first rule for the paw-free completion problem is straightforward.

Rule 1

If a component of the input graph G contains no paw, delete it.

Behind our kernelization algorithm for the paw-free completion problem is the following simple and crucial observation. After Rule 1 is applied, each remaining component of G contains a paw, hence a triangle, and by Proposition 2.1, we need to make it complete multipartite. We say that a vertex v and an edge xy dominate each other if at least one of x and y is adjacent to v. Note that an edge dominates, and is dominated by, both ends of this edge. We say that a vertex v is major if v dominates all the edges in the component containing v; note that we always mean the component of the input graph. In a complete multipartite graph, every vertex is major and every edge dominates all its vertices, and hence in a yes-instance, every edge “almost” dominates all the vertices in the component.

Proposition 3.1

Let G be a connected graph containing a paw. For any edge uv and a vertex w that does not dominate uv in G, we need to add at least one of uw and vw to G to make it paw-free.

Proof

Let 
 be a set of edges such that 
 is paw-free. By Proposition 2.1, 
 is a complete multipartite graph. Since , vertices u and v belong to different parts of 
. Thus, at least one of them is not in the same part as w, and the edge between it and w is in 
. □

In other words, for each edge uv, the number of edges we need to add to u and v is at least the number of vertices uv does not dominate. As hinted by Proposition 3.1, the way we bound the kernel size for the paw-free completion problem is to show that, after applying some reductions, the minimum number of edges we need to add to G to make it paw-free is linear in . We need to tweak the modulator for this problem: We also take the degree-one vertices of all paws in G, and the purpose is to simplify the disposal of triangle-free components of . As a result of Proposition 3.1, if there are more than 2k non-major vertices, then we know  is a no-instance. Hence, we focus on major vertices, for which we consider the components 
 of G one by one. If too many isolated vertices in 
 are major, then we can remove most of them (Rule 2). No vertex in 
 can be major if there are two or more nontrivial components in 
. In the rest, there is precisely one type-i triangle-free component or precisely one complete multipartite component, but not both, in 
. In this case, no isolated vertex in 
 can be major (Proposition 3.3), and hence we are concerned with the only nontrivial component of 
. For a type-i triangle-free component C of 
, we show that if C satisfies any of the six simple conditions stipulated in Lemma 3.7, then we need to add at least  edges to 
. Otherwise, we can apply Rule 3 to reduce 
. The disposal of a complete multipartite component is very similar (Lemma 3.9 and Rule 4). We summarize the algorithm in Fig. 2 and use it to prove Theorem 1.1.

Fig. 2
Download : Download high-res image (188KB)
Download : Download full-size image
Fig. 2. The kernelization algorithm for the paw-free completion problem.

Formally, the 2-modulator M for the completion problem is constructed as follows. Starting from an empty set, we greedily add paws that have at most one vertex in it. After that, we add the degree-one vertices of all the other paws.

Lemma 3.2

For each component 
 of G, we need to add at least 
 edges to 
 to make it paw-free. Moreover, if  is a yes-instance, then M contains at most 4k vertices.

Proof

Let A be the set of vertices of those paws in 
 we greedily added to M, and B the set of degree-one vertices of all other paws in 
; thus, 
. For each paw F added to A, at least one of its missing edges needs to be added to 
 to make it paw-free. This edge is not in any previous selected paw, as otherwise we should not have added F to A. Therefore, we need to add at least  edges to  to make it paw-free. On the other hand, each vertex v in B is the degree-one vertex of some paw F, (it is possible that all other three vertices of F are in A) and therefore we need to add at least one edge incident to v. Therefore, we need to add at least  edges incident to vertices in B to 
 to make it paw-free. Note that these two sets of edges we need to add are disjoint. The total number of edges we need to add to 
 to make it paw-free is at least
 
 
 
 

For the second assertion, assume that 
 is a solution to . Let 
 be the components of G, and for , let 
 be those edges in 
. Then
 
 
 □

We proceed only when . Recall that a vertex v is major if v dominates all the edges in the component containing v. By Proposition 3.1, for each non-major vertex v, we need to add at least one edge incident to v to make the graph paw-free. Therefore, after the application of Rule 1, the total number of non-major vertices in a yes-instance is at most 2k. It remains to deal with major vertices in , for which we consider the components 
 of G one by one; let 
.
Proposition 3.3

The following hold for major vertices of 
.

(i)
No vertex in a nontrivial type-ii triangle-free component of 
 can be major.

(ii)
If two components in 
 are nontrivial, then no vertex in 
 is major.

(iii)
If there is an isolated vertex in 
 that is major, then all vertices in 
 are isolated.

Proof

(i) Let C be a nontrivial type-ii triangle-free component of 
. Since 
 contains a paw, there must be a triangle in 
; let it be uvw. If a vertex x in C is major, then x is adjacent to at least two of , and w; assume without loss of generality, . Since C is a nontrivial component, we can find a neighbor y of x. Since C is a type-ii triangle-free component, y is adjacent to neither of u and v. Then y is a degree-one vertex of the paw induced by , and should be in 
. This contradicts to the construction of M, and thus (i) holds.

(ii) Let 
 and 
 be two nontrivial components of 
. No vertex in 
 can be adjacent to both 
 and 
.

(iii) Suppose that an isolated vertex v in 
 is major. By definition, every edge in 
 has one end adjacent to v, and this end must be in 
. □

By Proposition 3.3(ii), we may assume that there is at most one nontrivial component in 
. The next two propositions are on independent sets I of 
. The first is about the cost of separating vertices in I into more than one part; it also means that a sufficiently large independent set cannot be separated.

Proposition 3.4

Let 
 be a connected graph containing a paw, and let I be an independent set of 
. If we do not add all the missing edges between I and , then we need to add at least  edges among I to 
 to make it paw-free.

Proof

Let 
 be a set of edges such that 
 is paw-free. Since 
 contains a paw, 
 is a complete multipartite graph by Proposition 2.1. If all vertices in I are in the same part of 
, then all the missing edges between I and  are in 
 and we are done. Otherwise, vertices in I are in at least two parts of 
, and the number of edges among them in 
 is at least  (when one part has one vertex and the rest are in another part). □

Let I be an independent set of 
 such that every vertex in I is adjacent to all vertices not in I. If 
 is also an independent set, then 
 is complete bipartite and paw-free. Hence, we assume that 
 contains a triangle, and we need to make it complete multipartite. Clearly, the set I has to form a separate part by itself. If 
 is connected and contains a triangle, then any solution to 
 is a solution to 
, and thus we can remove I. Otherwise, we need to keep one vertex in I to make sure the component contains a triangle. The second assertion of the following proposition is not used in the current paper.

Proposition 3.5

Let I be an independent set in a component 
 of a graph G. If every vertex in I is adjacent to every vertex in 
, then  is a yes-instance if and only if  is a yes-instance for any . Moreover, if  is connected and contains a triangle, then  is a yes-instance if and only if  is a yes-instance.

Proof

It suffices to show the if directions of the statements. Both are vacuously true when G is paw-free, and henceforth we assume otherwise. For the first assertion, suppose that 
 is a solution to 
, where 
. Note that 
 is connected because every other vertex is adjacent to v. By Proposition 2.1, 
 is a complete multipartite graph; let 
 be its parts. Since v is adjacent to every other vertex, it is in a size-one part; without loss of generality, let it be 
. On the other hand, I remains an independent set and adjacent to every vertex in 
 in 
. Therefore, 
 is a complete multipartite graph with parts 
, I, hence paw-free. For the if direction of the second assertion, since 
 is a component that contains a triangle, any solution makes its complete multipartite. It is also complete multipartite together with I. □

We are now ready for our reduction rules. We start from type-ii triangle-free components of 
. If there is a nontrivial type-ii triangle-free component in 
, then by Proposition 3.3(i, iii), no vertex in 
 can be major. Now suppose that all vertices in 
 are isolated and some of them are major. We observe that if too many of them are major, then any optimal solution puts the major ones of them and their non-neighbors in the same part. Thus, by Proposition 3.5, we can remove all but one of these vertices, after adding certain edges.

Rule 2

Let I be the set of isolated vertices in 
 that are major. If 
, then add all the missing edges between 
 and ; decrease k accordingly; and remove all but one vertex in 
 from 
.

Lemma 3.6

Rule 2 is safe.

Proof

We argue first that I is a false twin class of G; i.e., 
 for any pair of vertices 
. Note that 
 and 
 are not adjacent. For any vertex 
, we must have 
 as well because 
 dominates the edge 
. Therefore, 
. For the same reason, 
, and then 
.

Since each vertex in I is major, 
 is an independent set. Then 
, which is 
, is also an independent set. We argue that any optimal solution 
 of 
 contains all the missing edges between 
 and . By Lemma 2.6, the set I remains an independent set in 
, which is complete multipartite. Suppose that some vertices in 
 are not in the same part as I; let X be the set of all such vertices. We consider another solution 
 obtained from 
 as follows: removing all edges incident to X and all edges incident to I, and then adding all missing edges between X and . Since 
 for each  (the last one holds because 
 is connected and vertices in I are major), 
. This contradicts that 
 is optimal.

After adding all the missing edges between 
 and , every vertex in 
 is adjacent to every vertex in , and the correctness of removing all but one vertex in 
 from G follows from Proposition 3.5. □

Henceforth, 
 has precisely one type-i triangle-free component or one complete multipartite component, but not both (by Proposition 3.3). Each part of such a component is an independent set (recall that a type-i triangle-free component is complete bipartite by Proposition 2.3). We try to relate the order of this component to 
 or the number of major vertices in 
.

Lemma 3.7

Let  be a type-i triangle-free component of 
 and let  be the bipartition of  with . If any of the following conditions is satisfied, then we need to add at least  edges to 
 to make it paw-free.

(i)
;

(ii)
there is an edge in 
;

(iii)
 and ;

(iv)
there are  or more missing edges between L and ;

(v)
 and 
 has an edge; or

(vi)
 and there are  or more missing edges between R and .

Proof

(i) If 
, then 
, and it follows from Lemma 3.2. (ii) By Proposition 3.1, we need to add at least  edges. (iii) Since  is complete bipartite and , we can find a matching of size  between L and R. By Proposition 3.1, for each vertex 
, the number of edges between v and U we need to add is at least . (iv) By Proposition 3.4, we need to add at least  edges.

In the rest, (v) and (vi), 
. We may assume none of the previous conditions is satisfied. Therefore, 
, which means . Also note that the proofs for these two conditions are almost the same as conditions (ii) and (iv) respectively. (v) By Proposition 3.1, we need to add at least  edges. (vi) By Proposition 3.4, we need to add at least  edges. □

We say that a type-i triangle-free component C of 
 is reducible if none of the conditions in Lemma 3.7 holds true.

Rule 3

Let C be a type-i triangle-free component of 
 and let  be the bipartition of C with . If C is reducible, then add all the missing edges between 
 and ; decrease k accordingly; and remove all but one vertex in 
 from 
.

Lemma 3.8

Rule 3 is safe.

Proof

Let 
 and 
; note that 
 is an independent set of 
 because condition (ii) of Lemma 3.7 is not true. Suppose that 
 is a set of edges such that 
 is paw-free. Let 
 consist of the set of edges in 
 among vertices in , together with all the missing edges between 
 and . We show that 
 is also paw-free, and 
. By Proposition 2.1, 
 is a complete multipartite graph, then the subgraph of 
 induced by  is complete bipartite or complete multipartite. By the construction of 
, the set  induces the same subgraph in 
 and 
. Therefore, 
 is a complete multipartite graph, where 
 forms a single part. Since 
 and 
 have the same set of edges among , to show 
 we may focus on their edges incident to 
.

Case 1, 
. If 
 contains all the missing edges between L and , then 
 and 
 have the same set of edges between L and . Otherwise, by Proposition 3.4, 
 contains at least  edges among L; since condition (iv) of Lemma 3.7 is not true, this is strictly more than the number of edges in 
 between L and . It suffices to show that the number of edges incident to X in 
 is at least 
, the number of edges incident to X in 
. Note that 
, and hence 
. We claim that there is a matching from  to L of size ; otherwise there exists a vertex set  with  by Hall's theorem, but then the missing edges between L and  is at least , and condition (iv) of Lemma 3.7 would be true. For each vertex , we can find from the matching at least  edges that are not dominated by x. Since these edges do not share any end, by Proposition 3.1, at least  edges in 
 are incident to x. Thus, the number of edges in 
 incident to X is at least 
.

Case 2, 
. Since C is reducible, none of the conditions in Lemma 3.7 is satisfied. In particular, 
 (condition i), which means 
 and . We must have 
 (condition iii). Moreover, by conditions (ii) and (v), both 
 and 
 are independent sets, and by conditions (iv) and (vi), the number of missing edges between L and  and the number of missing edges between R and  are smaller than  and , respectively.

If  for every part P in 
, then every vertex 
 is incident to more than  edges in 
. The total number of edges in 
 that are incident to 
 is more than 
 
. On the other hand, the total number of edges in 
 that are incident to 
 is at most the sum of the number of missing edges between L and , the number of missing edges between R and , and the number of missing edges between X and 
, which is at most 
. Thus, 
.

Now suppose that there is a part P in 
 with . If 
, then 
 and we are done. In the rest 
. Since  and there are less than  missing edges between  and L by condition (iv) of Lemma 3.7, no vertex in  can be in P. Therefore 
, and 
. If there is precisely one vertex v in 
, then all the 
 edges between v and P are in 
. But the number of missing edges between v and 
 (in 
) is less than
 Otherwise, suppose that 
, then at least 
 edges among 
 are in 
. But the number of missing edges between 
 and 
 (in 
) is less than 
.

We have thus proved that it is safe to add all the missing edges between 
 and . After that, every vertex in 
 is adjacent to every vertex in 
, and the correctness of removing all but one vertex in 
 from 
 follows from Proposition 3.5. □

In the last we consider the complete multipartite components of 
.

Lemma 3.9

Let  be a complete multipartite component of 
, and let 
⁎
 be a largest part of . If any of the following conditions is satisfied, then we need to add at least  edges to 
 to make it paw-free.

(i)
;

(ii)
there is an edge in 
;

(iii)
⁎
 and 
⁎
 has an edge;

(iv)
⁎
 and 
; or

(v)
⁎
 and 
, and for every part P of U,

•
 contains an edge, or

•
there are at least  missing edges between 
 and .

Proof

(i) If 
, then it follows from Lemma 3.2. (ii) By Proposition 3.1, we need to add at least  edges. (iii) By Proposition 3.1, we need to add at least 
⁎
 edges. (iv) Let 
 be a minimum set of edges such that 
 is paw-free. By Corollary 2.5 and Lemma 2.6, the vertices in any part of  remain in the same part in 
. Since 
, there is a vertex 
, and the missing edges between v and all but one part of  are in 
. Since 
⁎
 is a largest part and 
⁎
, we need to add at least  edges.

For (v), we show that we need to add at least  edges incident to 
. By Proposition 2.4 and the fact 
, the sets 
 for different parts are disjoint. As a result, each edge is counted at most twice, and the total number of edges we need to add is . If there is an edge in 
, then it follows from Proposition 3.1. Now there is no edge in 
 and there are more than  missing edges between 
 and . Let 
, and let 
 be a minimum set of edges such that 
 is paw-free. By Corollary 2.5 and Lemma 2.6, the vertices in any part of  remain in the same part in 
. If all vertices in X are in the same part as P in 
, then all the missing edges between X and  are in 
. Otherwise, there is a vertex x in X that is not in the same part as P in 
, and all edges between x and P are in 
. In either case, we need to add at least  edges incident to . This concludes the proof. □

We say that a complete multipartite component of 
 is reducible if none of the conditions in Lemma 3.9 holds true.

Rule 4

Let  be a reducible complete multipartite component of 
 and 
⁎
 a largest part of .

(1)
If 
⁎
, then add all the missing edges between 
⁎
 and 
⁎
; decrease k accordingly; and remove all but one vertex in 
⁎
 from 
.

(2)
Otherwise, find a part P such that 
 is an independent set and there are less than  missing edges between 
 and . Add all the missing edges between 
 and ; decrease k accordingly; and remove all but one vertex in 
 from 
.

Lemma 3.10

Rule 4 is safe.

Proof

Let 
 be a minimum set of edges such that 
 is paw-free. By Proposition 2.1, 
 is a complete multipartite graph. By Corollary 2.5 and Lemma 2.6, vertices in the same part of  remain in the same part in 
.

Case 1: 
⁎
. Let 
⁎
. Since  is reducible, none of conditions in Lemma 3.9 is satisfied. In particular, 
 (condition i) and X is an independent set (condition iii). For each vertex , if it is not in the same part of 
 as 
⁎
, then all the 
⁎
 missing edges between x and 
⁎
 are in 
. Since
⁎
⁎
⁎
⁎
 putting x to the same part as 
⁎
 minimizes the number of edges incident to it. After adding all the missing edges between X and 
⁎
, every vertex in the independent set 
⁎
 is adjacent to every vertex in 
⁎
⁎
. It is thus safe to remove all but one vertex in 
⁎
 from G by Proposition 3.5.

Case 2: 
⁎
. Since  is reducible, none of conditions in Lemma 3.9 is satisfied. In particular, we have 
 (condition iv) and we can find a part P of U such that 
 is an independent set and the number of missing edges between 
 and  is less than  (condition v). Let 
. For each vertex , if it is not in the same part of 
 as P, then all the  missing edges between x and P are in 
. This is more than the total number of missing edges between X and . Hence, putting  in the same part minimizes the number of edges incident to it. After adding all the missing edges between X and , all vertices in the independent set  are adjacent to every vertex in 
. It is thus safe to remove all but one vertex in  from G by Proposition 3.5. □

We summarize our kernelization algorithm for the paw-free completion problem in Fig. 2 and use it to prove our main result of this section.

Proof of Theorem 1.1

We use the algorithm described in Fig. 2. The correctness of steps 0 and 1 follows from the definition of the problem and Rule 1 respectively. Steps 2 and 3 are justified by Lemma 3.2. Step 4 is correct because of Proposition 3.1, and after that step 5 deals with the components of G separately. The cost of a component 
 of G is the minimum number of edges we need to add to 
 to make it paw-free. We show that the cost of 
 is at least 1/32 of the number of major vertices in 
.

If there are two or more nontrivial components in 
, then by Proposition 3.3(ii) and Proposition 3.1, the cost of 
 is at least 
, and thus 
 can be skipped in step 5.2. Let r be the number of isolated vertices in 
 that are major. If 
, then step 5.3 calls Rule 2 to remove most of these vertices, and the correctness is given in Lemma 3.6. If 
, then by Proposition 3.3(iii), every component of 
 is trivial, and the cost of 
 is at least 
. Henceforth, 
 has precisely one type-i triangle-free component or one complete multipartite component, while no isolated vertex in 
 is major. The algorithm enters step 5.4 if there is a type-i triangle-free component C in 
. If C is reducible, the correctness of Rule 3 is given in Lemma 3.8; otherwise, the cost of 
 is at least  by Lemma 3.7. The algorithm enters step 5.5 if there is a complete multipartite component C in 
. If C is reducible, the correctness of Rule 4 is given in Lemma 3.10; otherwise, the cost of 
 is at least  by Lemma 3.9.

When the algorithm reaches step 6, none of Rule 2, Rule 3, Rule 4 is applicable. There are at most 4k vertices in M, at most 2k non-major vertices. On the other hand, for each other vertex, there is an amortized cost of at least 1/32. Therefore, if  is a yes-instance, then the number of vertices in G is at most 38k, and this justifies steps 6 and 7.

We now analyze the running time of this algorithm. When each time the algorithm calls itself in step 5.3, 5.4, or 5.5, it removes at least one vertex from the graph. Therefore, the recursive calls can be made at most n times. On the other hand, each step clearly takes polynomial time. Therefore, the algorithm returns in polynomial time. □

We spare little effort in getting a better kernel size and more efficient implementation. For the running time, e.g., we do not need to call the algorithm after each reduction (application of Rule 3, Rule 4). We believe that, with more careful analysis, one may show that our kernel is between 12k and 16k vertices. However, to find a kernel of less than 10k vertices for the problem or to implement it in linear time is quite a challenge.

4. Paw-free edge deletion
The 2-modulator M for the paw-free edge deletion problem is constructed as follows. Starting from an empty set, we greedily add paws that have at most one vertex in it. We can terminate the algorithm by returning a trivial no-instance if we have added more than k paws. In the rest, .

By definition, each complete multipartite component C of  has at least three parts, each being a false twin class according to Corollary 2.5. By Proposition 2.4, if a vertex  has neighbors in C, then v forms a triangle with two vertices in C. Then by Proposition 2.2, there can be only one such component for v. Recall that one may assume that every component of G contains a paw. These observations give an upper bound of  on the number of complete multipartite components of . We show that in each complete multipartite component, it suffices to keep  parts, and  vertices for each part. Therefore, the order of each complete multipartite component is 
, and the total number vertices in all complete multipartite components is 
.

Likewise, Proposition 2.2 implies an  upper bound on the number of type-i triangle-free components of : Note that each type-i triangle-free component of  forms a triangle with some vertex in M. We mark 
 vertices in them (Rule 8) and show that they encode all the paws involving vertices in all the type-i triangle-free components of . We are left with type-ii triangle-free components of , and it turns out that the main challenge is to bound the number of isolated vertices in . Again, we mark 
 vertices from them and remove all others (Rule 9).

The safeness of the following rule is straightforward: If we do not delete this edge, we have to delete a distinct one from each of the paws, hence at least .

Rule 5

Let uv be an edge of G. If there exist  paws such that for any pair of them, the only common edge is uv, then delete uv from G and decrease k by 1.

In the rest of this section, we assume that Rule 5 is not applicable. Proposition 2.2, Proposition 2.4 imply an upper bound on the number of parts of a complete multipartite component C that are adjacent to a proper subset of . Hence, it suffices to consider the other parts. We introduce two reduction rules to deal with complete multipartite components of , one bounding the number of parts and the other bounding the size of each part.

Rule 6

Let C be a complete multipartite component of . Delete all but  parts of C that are adjacent to all neighbors of C.

Lemma 4.1

Rule 6 is safe.

Proof

Let 
 be the parts of C that are adjacent to all neighbors of C. We have nothing to show if . Now suppose . It suffices to show that  is a yes-instance if and only if 
 is a yes-instance. The only if direction is trivial. For the other direction, suppose that 
 is a solution to 
, but there exists a paw F in 
. Clearly, F intersects 
. By Corollary 2.5, 
 is a false twin class of G, and it remains a false twin class of 
 since no edge in 
 is incident to 
. Thus, F contains precisely one vertex from 
. Note that any 
 and 
 have the same adjacency to all the vertices in 
. Of the parts 
 of C, at least  parts are disjoint from F. Since 
, vertices in at least one of these parts have the same adjacency to the three vertices in 
 as vertices in 
. Thus, there is a paw in 
, a contradiction. This concludes the proof. □

Rule 7

Let C be a complete multipartite component of . From each part of C, delete all but  vertices.

Lemma 4.2

Rule 7 is safe.

Proof

Suppose that some part P of C contains more than  vertices. It suffices to show that  is a yes-instance if and only if  is a yes-instance for any vertex v in P. The only if direction is trivial. For the other direction, we show that any solution 
 to  is a solution to . Suppose for contradiction that there exists a paw F in 
; clearly, F contains v. By Corollary 2.5, P is a false twin class of G, hence an independent set in both G and 
. Thus, there can be at most two vertices in .

Suppose first that v is the only vertex in . Since 
 and , there exists at least one vertex 
 that has the same adjacency to all the three vertices in  as v in 
. But then 
 induces a paw in 
, a contradiction. In the rest, F contains another vertex . Since v and u are not adjacent, one of them has degree one in F and the other degree two. Moreover, noting that u and v are false twins in G, and no edge in 
 is incident to v, we can conclude that u is the degree-one vertex of F, and it is incident to at least one edge in 
. Since  and 
, of which one is incident to u, there must be some vertex 
 not incident to any edge in 
. But then 
 induces a paw in 
, a contradiction. This concludes the proof. □

The bound in the following lemma can be improved to 
 with little efforts. We leave 
 here for a slightly simpler argument.

Lemma 4.3

After Rule 6, Rule 7 are applied, there are at most 
 vertices in the complete multipartite components of .

Proof

Let C be a complete multipartite component of . By Proposition 2.4, for each vertex , at most one part of C is nonadjacent to v. Therefore, if C has more than  parts, then Rule 6 is applicable. Therefore, it has at most  parts. On the other hand, since Rule 7 is not applicable, the number of vertices in each part is at most . Therefore, . By Proposition 2.4, Proposition 2.2, a vertex in M can be adjacent to at most one complete multipartite component of . Therefore, the total number of complete multipartite components of  is 4k. The lemma follows. □

We mark some vertices from each of the triangle-free components that should be preserved, and then remove all the unmarked vertices. Recall that a triangle-free component of  is of type i or type ii depending on whether it forms a triangle with some vertex in M. By Proposition 2.3, a type-i triangle-free component C of  is complete bipartite.

Rule 8

Let U be the set of vertices in all the type-i triangle-free components of .

(i)
For each triple S of vertices in M and each 
, mark  vertices from 
.

(ii)
For each type-i triangle-free component C of , and for each pair S of vertices in M and each 
, mark  vertices from 
 and  vertices from 
, where  is the bipartition of C.

Delete all the unmarked vertices from U.
Lemma 4.4

Rule 8 is safe.

Proof

Let 
 be the graph obtained after applying Rule 8. If  is a yes-instance, then 
 is a yes-instance. For the other direction, suppose that 
 is a yes-instance, with a solution 
. We prove by contradiction that 
 is paw-free as well. A paw F in 
 contains at least one deleted vertex, because 
 is paw-free. On the other hand, F contains at most two deleted vertices, as otherwise F is a paw of G with three or all the vertices in , contradicting that M is a 2-modulator.

Consider first that F contains only one deleted vertex x. Let C be the type-i triangle-free component of  containing x. If all the other three vertices in F are from M, then in step (i) we have marked  vertices in U that have the same adjacency to  as x in G. Since 
, the adjacency between  and at least one of these marked vertices is unchanged. This vertex forms a paw with ﹨ in 
, a contradiction. Now at most two vertices of F are from M. We may assume without loss of generality that , where  is the bipartition of C. In step (ii) we have marked  vertices in L that have the same adjacency to  as x; let them be 
. By Proposition 2.3, every vertex in 
 is adjacent to all vertices in R; on the other hand, no vertex in 
 is adjacent to any vertex in another component of  different from C. Therefore, all vertices in 
 have the same adjacency to  in G. Since 
, the adjacency between  and at least one vertex in 
 is unchanged (noting that 
). This vertex forms a paw with ﹨ in 
, a contradiction.

In the rest, F contains two deleted vertices x and y. If x and y are adjacent, then they are from the different parts of some component . Without loss of generality, we assume that  and . Since , by step (ii), we have marked two set 
 and 
 that have the same adjacency to  as x and y respectively. Note that 
 and 
. Each vertex in 
 has the same adjacency to . The situation is similar for 
 and . Since 
 and since both 
 and 
 are at most two, the adjacency between  and at least one vertex in 
 is unchanged, and the adjacency between  and at least one vertex in 
 is unchanged. These two vertices form a paw with ﹨ in 
, a contradiction (because 
 is complete bipartite). Now that x and y are not adjacent, they are in the same part of a component or in different components. Then one of x and y is the degree-one vertex of F and the other is a degree-two vertex of F, and we can get that the adjacencies of x and y to  are different. By Proposition 2.3, the component(s) containing x and y are complete bipartite. In step (ii) we have marked a set 
 of  vertices in the part containing x that have the same adjacency to  as x, and a set 
 of  vertices in the part containing y that have the same adjacency to  as y. Note that 
 and 
 are disjoint, even when they are in the same part of the same component of . Since 
, and both 
 and 
 are at most two, the adjacencies between  and at least one vertex 
 and at least one vertex 
 are unchanged. But then ﹨
 induces a paw in 
, a contradiction. □

Lemma 4.5

After Rule 8 is applied, there are at most 
 vertices in all the type-i triangle-free components of .

Proof

The number of vertices marked in step (i) of Rule 8 is at most 
. For each type-i triangle-free component of , the number of vertices marked in step (ii) is at most 
. By definition, each type-i triangle-free component of  forms a triangle with some vertex in M. Thus, by Proposition 2.2, the number of type-i triangle-free components of  is . Thus, the total number of vertices marked in step (ii) is also 
. □

Finally, we deal with type-ii triangle-free components of .

Rule 9

Let U be the set of vertices in all the type-ii triangle-free components of .

(i)
For each triple S of vertices in M and each 
, mark  vertices from 
.

(ii)
In every nontrivial type-ii triangle-free component C, mark all the vertices that form a triangle with M, and for each of them, mark  of its neighbors in U.

Delete all the unmarked vertices from U.
Lemma 4.6

Rule 9 is safe.

Proof

Let 
 be the graph obtained after applying Rule 9. If  is a yes-instance, then 
 is a yes-instance. For the other direction, suppose that 
 is a yes-instance, with a solution 
. We prove by contradiction that 
 is paw-free as well. A paw F in 
 contains at least one deleted vertex since 
 is paw-free. By the definition of type-ii triangle-free components, no triangle can contain an edge in type-ii triangle-free components of . Thus, F contains at most two vertices from U. If F contains a single vertex v from U, then there exists a vertex 
 marked in step (i) that has the same adjacency to  as v in 
. But then 
 induces a paw in 
, a contradiction.

In the rest,  has precisely two vertices; let them be x and y. Exactly one of x and y is in the triangle of F; without loss of generality, we assume that x is in the triangle of F. Then x has been marked in step (ii). If , then there are  vertices in  marked in step (ii); let them be Q. Since no triangle in G contains an edge from a type-ii triangle-free component of , no vertex in Q can be adjacent to any vertex in . Thus, every vertex in Q forms a paw with  in 
. Since 
, there must be some vertex 
 that forms a paw with  in 
, a contradiction. Now that , there are  vertices marked in step (i) that have the same adjacency to  as y; let them be denoted as 
. Again, no vertex in 
 can be adjacent to x. Thus, every vertex in 
 forms a paw with  in 
. Since 
, there is a vertex 
 in 
 forms a paw with  in 
, a contradiction. This concludes the proof. □

Lemma 4.7

After Rule 9 is applied, there are at most 
 vertices in all the type-ii triangle-free components of .

Proof

The number of vertices marked in step (i) of Rule 9 is at most 
. To bound the number of vertices marked in step (ii), we consider that how many vertices in nontrivial type-ii triangle-free components can form triangles with vertices in M. Let u and v be a pair of adjacent vertices in M. For each common neighbor x of u and v in a nontrivial type-ii triangle-free component of , we can find a paw as follows. Since the component is nontrivial, we can find a neighbor y of x in it. By the definition of the type-ii triangle-free components, y is adjacent to neither u nor v. Thus,  induces a paw. We may use the same y for different x, but the paws found as such share only the edge uv. Note that Rule 5 would be applicable should u and v have more than k common neighbors in nontrivial type-ii triangle-free components of . Therefore, the number of vertices marked in step (ii) is 
. This concludes the proof. □

We are now ready to prove Theorem 1.2.

Proof of Theorem 1.2

Let  be the input instance. We build a 2-modulator M, and return a trivial no-instance if . If any of Rule 5, Rule 9 is applicable to the instance, we apply it. Now that none of the rules is applicable, the number of vertices in the complete multipartite components of  is 
 by Lemma 4.3, and the number of vertices in the triangle-free components of  is 
 by Lemma 4.5, Lemma 4.7. Thus, the total number of vertices in G is 
, and this concludes the proof. □