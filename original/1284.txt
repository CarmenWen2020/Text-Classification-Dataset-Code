Abstract
Motivated by (continuous) facility location, we study the problem of dispersing and grouping points on a set of segments (of streets) in the plane. In the former problem, given a set of n disjoint line segments in the plane, we investigate the problem of computing a point on each of the n segments such that the minimum Euclidean distance between any two of these points is maximized. We prove that this 2D dispersion problem is NP-hard, in fact, it is NP-hard even if all the segments are parallel and are of unit length. This is in contrast to the polynomial solvability of the corresponding 1D problem by Li and Wang (2016), where the intervals are in 1D and are all disjoint. With this result, we also show that the Independent Set problem on Colored Linear Unit Disk Graph (meaning the convex hulls of points with the same color form disjoint line segments) remains NP-hard, and the parameterized version of it is in W[2]. In the latter problem, given a set of n disjoint line segments in the plane we study the problem of computing a point on each of the n segments such that the maximum Euclidean distance between any two of these points is minimized. We present a factor-1.1547 approximation algorithm which runs in  time. Our results can be generalized to the Manhattan distance.

Keywords
Dispersion problem
NP-hardness
FPT
Manhattan distance
Geometric optimization

1. Introduction
Dispersion problems belong to the classic facility location problem and have been extensively studied. The goal of such a problem is to build facilities so that they are as far as possible. A typical example is to build a chain of convenience stores such that they should be far from each other to cover more customers. As a matter of fact, a series of research has been done, either over a point set or over a weighted graph [2], [6], [7], [10], [18], [19], [20].

In [12], [13], Li and Wang studied an interesting variation of the problem, where one is given a set of disjoint intervals in 1D and the objective is to put one point on each interval such that the minimum distance between any two of these computed points is maximized. Assuming the intervals are sorted, an optimal linear time greedy algorithm was given (but the analysis is non-trivial). The scenario corresponding to this problem can be considered as constructing resting areas along a highway, where each interval is some section suitable for constructing a resting area.

A natural question arises: what if we are given some disjoint (rectilinear) segments (where each segment is part of a street)? (Here the objective function is the same while the distance could be either Euclidean () or Manhattan ().) We show that this problem is NP-hard; in fact, NP-hard even when all the segments are parallel (i.e., along one direction) and are of a unit length. It turns out that this is related to the Independent Set (IS) problem on a unit disk graph (UDG) [15], [4]; in fact, our NP-hardness proof implies that the problem remains NP-hard even when the unit disk graph is colored and linear (meaning the convex hulls of points of the same color form disjoint line segments). We suspect that the parameterized version remains to be W[1]-hard, though we are only able to show that it is in W[2] at this point.

The symmetric problem of grouping points on a set of disjoint segments in the plane, i.e., selecting one point on each segment such that the maximum distance between the selected points is minimized, is motivated by constructing commodity distribution centers within a road network. These centers should be close to each other to reduce the distribution or transportation costs. It is not known whether the problem is NP-hard yet, though we are able to show that this problem admits a factor-1.1547 approximation running in  time.

This paper is organized as follows. In Section 2, we give the preliminaries. In Section 3, we prove that the 2D dispersion problem is NP-hard. In Section 4, we consider briefly the independent set problem on colored linear unit disk graphs and prove its W[2] membership. In Section 5, we give a simple polynomial time approximation algorithm for the 2D grouping problem. We conclude the paper in Section 6.

2. Preliminaries
2.1. Definitions
Given two points  in the plane (2D), the Euclidean or  distance  is defined as . The Manhattan or  distance  is defined as . A line segment with endpoints a and b is denoted as  or .

Finally, a planar unit disk graph is one where each vertex corresponds to a given point of an input set of planar points, two vertices  share an edge if two disks of radii R centered at  intersect each other. (Note that the standard unit disk graph definitions require that , in our definition R could be more general as long as its value is fixed.) It is known that while most NP-hard problems on general graphs remain NP-hard on unit disk graphs [5], [8], there are exceptions (e.g., the maximum clique problem is polynomially solvable [8]). Notably, the parameterized version of the independent set problem on unit disk graphs, parameterized by the size of the solution, is known to be W[1]-hard [15]. The more restricted colored version, parameterized by the number of colors, remains to be W[1]-hard [4].

2.2. Problems
The problems studied in this paper are defined as follows:

2D Dispersion Problem: Given a set of disjoint line segments , , the goal is to find n points  on the n line segments respectively such that the minimum value of the distances between any two selected points in V are maximized, i.e., 
  
 

2D Grouping Problem: Given a set of disjoint line segments , , the goal is to find n points  on the n line segments respectively such that the maximum distance among two points in V is minimized, i.e., 
  
 

We show in the next section that the 2D dispersion problem is NP-hard.

3. NP-hardness for the 2D dispersion problem
We reduce the NP-complete planar rectilinear monotone 3-SAT problem to the 2D Dispersion problem. The planar 3-SAT problem is a special case of 3-SAT where the input is a conjunction of a set of disjunctive clauses, each with three literals. Knuth and Raghunathan showed that the planar rectilinear 3-SAT, where all the clauses can be embedded in a rectilinear way below a line, is NP-complete [14]. More recently, de Berg and Khosravi showed that even the planar rectilinear monotone 3-SAT, where all clauses contain either all positive or all negated literals, is NP-complete [3]. In this case, the 3-SAT instance can be embedded onto a rectilinear grid (with no edge crossing) such that all the variables can be embedded on a horizontal line L. The clauses with all literals positive can be embedded as a three-legged grid point below L, connecting to the corresponding variable; symmetrically, the clauses with all literals negated can be embedded as a three-legged grid point above L, connecting to the negated variables. For example, we show in Fig. 1 a layout of 5 clauses over 5 variables, e.g., 
 and .

Fig. 1
Download : Download high-res image (20KB)
Download : Download full-size image
Fig. 1. The rectilinear planar graph G(ϕ) for the planar rectilinear monotone 3-SAT instance ϕ with 5 clauses over 5 variables.

When we reduce planar rectilinear monotone 3-SAT to the 2D Dispersion problem, all the constructed segments in a set U are of unit length and are horizontal.

Theorem 1

The 2D Dispersion Problem is NP-hard.

Proof

First, we embed the planar rectilinear monotone 3-SAT graph  onto a rectilinear grid. For the ease of calculation, each grid has a horizontal/vertical length of 1, e.g., in Fig. 2,  and . Each variable v on the line L is represented as a sequence of segment pairs (e.g.,  and ), placed at every other grid (Fig. 2). In Fig. 2, we label the grids horizontally with red integers and vertically with blue integers. If v appears in some clause C positively, we connect a leg of segment pairs from v starting at an oddly numbered grid (e.g., the one starting at grid 5 in Fig. 2); and symmetrically, if v appears in some clause C negatively, we connect a leg of segment pairs from v starting at an evenly numbered grid (e.g., the one starting at grid 10 in Fig. 2). The white points are selected for segments corresponding to v if v is assigned ‘True’; otherwise, black points are selected.

Fig. 2
Download : Download high-res image (69KB)
Download : Download full-size image
Fig. 2. The variable gadget. For convenience, we use red numbers to label the grids horizontally and for vertical labeling we use blue numbers. Clearly, the leg of v starts at an odd horizontal grid (e.g., 5), while 
 starts at an even horizontal grid (e.g., 10). (For interpretation of the colors in the figure(s), the reader is referred to the web version of this article.)

We now describe the clause gadget in detail. We first illustrate a logical construction in Fig. 3, where clause C is composed of three literals u, v and w, and v connects C from L vertically while the other two horizontally through some bending. The core of the clause is a horizontal segment  of length 1, with a midpoint o. (Note that o is at a grid point while p and q are not. Note also that the dashed segments in this gadget are only for illustration purpose. In fact, they are only used to illustrate the distance between the points.) The length of the dashed segments  and  is . The black points  are selected for the ‘False’ assignment of these literals. Clearly, in this case no matter what point r we select for the segment pq, the minimum distance of  and  would be less than . On the other hand, if at least one of  is not selected, then such an r can be easily selected. For example, if only b is selected (instead of a) for segment ab then we could select  such that the minimum distance of  and  would be .

Fig. 3
Download : Download high-res image (24KB)
Download : Download full-size image
Fig. 3. The (logical) clause gadget C = (u∨v∨w). In this figure, we have  and H2 = 1.

However, it is clear that the clause we depict in Fig. 3 is not yet a valid planar embedding. This is firstly because the vertical distance between ab and pq, , is not an integral multiple of the unit grid length 1; moreover, since  we cannot lead u or w directly from the corresponding variable gadgets. It turns out that the latter can be easily fixed with a (local) horizontal adjustment on w, as shown in Fig. 4. On the other hand, the vertical adjustment on v, sketched also in Fig. 4, needs more details which is shown in Fig. 5.

Fig. 4
Download : Download high-res image (167KB)
Download : Download full-size image
Fig. 4. The clause gadget C = (u∨v∨w) with a horizontal adjustment on w and a vertical adjustment on v. Note that . Again, we use red numbers to label the grids horizontally and we use blue numbers for vertical labeling. Clearly, the legs of u,v and w all start at odd horizontal grids (e.g., 5, 11 and 17 respectively).

Fig. 5
Download : Download high-res image (18KB)
Download : Download full-size image
Fig. 5. A (local) vertical adjustment on variable v.

Note that, from Fig. 4, the vertical distance between cd and pq is . In other words, . In Fig. 5, we show how such a value of H can be implemented. We put a point t on cd with . Recall that . Then , and . Therefore, with 8 segments which are not on any grid line we successfully implement the (local) vertical adjustment for variable v on clause C, with all exterior segments around C on the grids. Note that when we select c for segment cd, it is possible that any point on segment  within distance 0.2041 from  could be selected; on the other hand, when d is selected for segment cd then  must be selected for segment .

Now we have finished showing a complete example of the construction for the clause  in Fig. 4 and Fig. 5. Note that all the segments connecting the variable and clause gadgets are horizontal and are of a unit length. A clause 
 can be constructed symmetrically above the line L. Due to the structure in Fig. 1, once  is given we could construct the corresponding rectilinear embedding clause by clause, starting from the innermost one from L, where the innermost clause is simply defined as the one whose vertical distance to the line L is minimum. (For example, for the clauses below L,  in Fig. 1 would be constructed first, then , and finally .) The total number of segments is proportional to the size of , i.e., the construction can be done in linear time.

Finally, we claim that the planar rectilinear monotone 3-SAT instance ϕ has a valid truth assignment if and only if in the converted 2D Dispersion instance the minimum distance of any two chosen points is equal to .

‘If’ part: If the planar rectilinear monotone 3-SAT instance ϕ has a truth assignment, then either all black points or all white points in all the variable gadgets would be selected. The closest distance of two chosen points in the variable gadgets is equal to ℓ. In the clause gadget, at least one variable needs to be assigned ‘True’ (or, white points need to be selected) for the clause. Hence, at least one black point  is not selected in the corresponding clause gadget. The minimum distance of any two chosen points in the clause gadget is ℓ (except possibly the points in the vertical adjustment gadget for variable v in Fig. 4). Therefore, in the converted instance for 2D Dispersion, the minimum distance of any two selected points is ℓ.

‘Only if’ part: Suppose that the converted instance for 2D Dispersion has a minimum distance of ℓ between two selected points. Firstly, we note that in all the variable gadgets, if we want to maximize the minimum distance of any two selected points, then either all white points or all black points must be chosen. At this point the minimum distance of any two such selected points is exactly ℓ. In the clause gadget, if the maximum of the minimum distance of any two chosen points is at least ℓ, then at least one white point  needs to be selected. This implies that in the corresponding clause, the corresponding variable  is assigned ‘True’ if the clause contains all positive literals; or, the corresponding literal 
 is assigned ‘False’ if the clause contains all negative literals. This implies that the corresponding clause is evaluated ‘True’ for either cases. Therefore, if in the converted 2D dispersion instance the minimum distance of any two chosen points is at least ℓ, the corresponding planar rectilinear monotone 3-SAT instance ϕ is satisfied. □

Since the problem is NP-hard even when all the input segments are horizontal and are of unit length, the general version of this problem is also NP-hard. We comment that the NP-hardness holds even when the  (or Manhattan) distance is used, with  and minor modification on the local vertical adjustment gadget.

4. Hardness for IS on colored linear unit disk graphs
The NP-hardness result in the previous section has a direct implication on the Independent Set (IS) problem on Colored Linear Unit Disk Graph, which is a unit disk graph such that the convex hull of the points in the same color form a line segment, no two such segments intersect and the problem is to select one node (disk) in each color such that they form an independent set. We briefly go through the implication in this section.

Before doing that, we note that finding k-multicolored clique or independent set was initially motivated in proving the W[1]-hardness of some graph problems [9]. For geometric intersection graphs (specifically, unit disk graphs) Marx showed the Independent Set problem is W[1]-hard, which implies it is not possible to obtain an FPT (fixed-parameter tractable) algorithm unless FPT=W[1] [15]. Moreover, the W[1]-hardness of the problem implies that it is not possible to obtain an EPTAS (efficient PTAS, namely the running time is , where n is the input size). Consequently the PTAS by Hunt et al. (with running time ) [11] cannot be further improved to have an EPTAS. Bereg et al. investigated the k-multicolored independent set problem on unit disk graphs and proved its W[1]-hardness and with that, they proved that the Largest Closest Pair Color-Spanning Set problem is W[1]-hard [4]. We now briefly sketch our results.

Theorem 2

The Independent Set problem on Colored Linear Unit Disk Graph is NP-hard, even when all the segments are parallel and are of a unit length.

Proof

We just use the reduction for Theorem 1. The two changes are: (1) put  points evenly on each segment, (2) the corresponding unit disk graph is formed by drawing an open disk centered at each point of each segment with a radii ; moreover, all the disks centered at the same segment have the same color. Let U be the set of unit-length segments. Calling the resulting unit disk graph , we clearly still have the following statement: the planar rectilinear monotone 3-SAT instance ϕ is satisfiable if and only if  has an independent set of size . The details are standard and omitted. □

An immediate question is the FPT tractability of the parameterized version of the problem, where the parameter k is the number of segments, or the number of colors. Note that the general version, where the points of the same color could be arbitrarily distributed, is W[1]-hard [4]. However, in the current version the unit disk graph is more restricted. Nevertheless we show below that it is in W[2].

Theorem 3

The Independent Set problem on Colored Linear Unit Disk Graph, parameterized by the number of colors (e.g. segments), is in W[2].

Proof

Let the number of segments be k and let the set of linear points on segment  be ordered as . We need to decide whether a value R exists such that the set S of points selected, one for each segment (color), has the property that the closest pair has distance at least R (or, equivalently, the unit disk graph with radii  on all these points has a colorful independent set, i.e., one for each color).

We construct a circuit C as follows: the inputs are variables corresponding to all the points (for convenience, we still use 's as variables, with a boolean value 1 assigned to  meaning that point is selected). For all the points on the same segment , we construct a large OR (∨) gate. Here, 'large' means the input to the OR gate could be greater than 2; and to make the OR gate output a true value, one of these points must be selected.

For two points on two segments  and , if their distance is shorter than R then we cannot select both of them. This can be interpreted as . In fact, as the distance function from point  to all (sorted) points on  (i.e., ) is unimodal, we could construct these nested ¬ and ∧ gates in one pass when  and  are fixed.

Finally, we connect all these OR (∨)gates and NOT (¬) gates to a large AND (∧) gate, which is the output of this circuit. It is easy to see that the IS problem on Colored Linear Unit Disk Graph (with radii ) has a solution if and only if k variables are selected to have a ‘True’ output. As from any input gate to the final output we have at most two wefts (large gates), the W[2] membership is hence shown (Fig. 6). □

Fig. 6
Download : Download high-res image (59KB)
Download : Download full-size image
Fig. 6. The circuit for the IS problem on Colored Linear Unit Disk Graph.

We comment that this proof is similar to the one given for the Minimum Diameter Color-Spanning Set problem by Pruente [17]. However, it is tantalizingly open whether this version of the IS problem on unit disk graphs is W[1]-hard. We comment that the unimodality property between  and  might be used either to show its W[1]-hardness or its membership in FPT.

5. Approximation for the 2D grouping problem
In this section, we design a factor-1.1547 polynomial-time approximation algorithm for the 2D grouping problem. It turns out that this problem is also related to unit disk graph. Recall that the input to the problem is a set of disjoint line segments . Assuming that we have an optimal solution ⁎ where each  is selected from  and the maximum distance between  is ⁎. Let  be a closed disk centered at  with radius r. Then, using the so-called intersection model for a unit disk graph, if we draw a disk ⁎ at each , these disks would have a common intersection. We prove this property formally as follows.

Property 1

Using the so-called intersection model for a unit disk graph, the disks ⁎ centered at every ⁎ respectively, where ⁎ is the maximum distance between ⁎, would have a common intersection.

Proof

By definition, for any two points ⁎, the distance ⁎. Hence, there must exist a circle ⁎ centered at some place which contains all the points in ⁎ — the extreme case occurs when the convex hull of ⁎ forms a regular triangle of edge length ⁎. Therefore, if we draw the circles ⁎ at each ⁎, these circles have a common intersection. □

5.1. The minimum intersecting disk problem
Based on this property, we define a related Minimum Intersecting Disk problem:

Minimum Intersecting Disk (MID) Problem: Given a set of disjoint line segments , compute a disk  with center c and radius r such that all 's intersect  and r is minimized (at ).

We present a polynomial-time algorithm to solve the MID problem in this subsection. We first obtain a simple decision procedure  which decides whether a disk of radius r exists that intersect all segments in L. Note that a segment completely in  is also considered being intersected by .


Algorithm 1
Download : Download high-res image (45KB)
Download : Download full-size image
Algorithm 1. Decide(r): decides if there is a disk of radius r intersecting L.

Note that all  are convex, so their common intersection can be computed using a standard method in computational geometry, e.g., the incremental construction method (i.e., maintain the current common intersection, insert the next one, and update to have the new common intersection). Due to convexity, each update takes  time. Hence,  can be computed in  time.

To compute  by applying the above decision procedure  using binary search, we first need to compute all possible values of .

Claim 1

All possible values of  can be computed in  time.

Proof

We first notice that each possible value is decided by either two or three segments, i.e., as long as the circle  intersects these two or three segments it would intersect all the segments in L: (1) In the former case the circle  touches two segments, each on a single point exactly, and thus,  is half of the distance between the two closet points on these two segments. (2) In the latter case  is the radius of the circle tangent to three segments. With the above analysis, all possible values of  can be obtained by computing all such distances. For the former case we compute the distance between the two closest points on every pair of segments in L, respective, and the combination of two distinct segments is . For the latter case we compute the radius of the inscribed circle formed by three segments in L, and the combination of three distinct segments is . All in all, the total time to compute all possible values of  is . □

We can then obtain the following algorithm.


Algorithm 2
Download : Download high-res image (42KB)
Download : Download full-size image
Algorithm 2. Solution for MID.

We comment that binary search would find the optimal solution as its value must be contained in . Regarding the time complexity, we note that , hence  can be constructed and then sorted in  time. Using the binary search, with  as a subroutine, the cost is . The total cost is therefore . Note that this algorithm, though easy to implement, might be too slow when n is large.

We could in fact use the farthest Voronoi diagram for line segments [1], [16] to improve this time bound. The definition of the farthest line segment Voronoi diagram is as follows.

Definition 1

Given n line segments  in the plane, the farthest Voronoi region of a line segment  is , where  is the distance between a point x with the closet point on , and the collection of all farthest Voronoi regions, together with their bounding edges and vertices, constitute the farthest line segment Voronoi diagram of the n segments.

Then, we claim that computing such a farthest line segment Voronoi diagram, the center of MID must lie either on a Voronoi edge or at a Voronoi vertex.

Claim 2

The center of the minimum intersecting disk of n line segments  lie either on a bounding edge or a bounding vertex of the farthest line segment Voronoi diagram of the n line segments.

Proof

As stated in the proof of Claim 1, the radius of the MID is decided by two or three segments, respectively. Thus, we assume w.l.o.g. that the MID  touches segments  and  exactly on one point, e.g.,  and  respectively. Then, , and any other point on  or  is of a farther distance to the center c; hence, . On the other hand, for any segment  that is distinct from  and , the MID intersects  on at least one point, assumed as , and ; hence, . Therefore, the center c lies on the bounding edge of the Voronoi regions of segments  and . Similarly, for the case where the MID is decided by three segments, we can also show that the center c lies on the common vertex of the Voronoi regions of these three segments. □

With Claim 2, a candidate intersecting disk can be computed in  time no matter when the center lies on a bounding vertex or a bounding edge. We thus have the following theorem.

Theorem 4

The Minimum Intersecting Disk problem can be solved in  time.

Proof

The farthest line-segment Voronoi diagram can be computed in  time with n input segments [1], [16]. Moreover, such a diagram has a linear size (i.e.,  number of edges and vertices). Hence, with a linear search we could identify  candidate intersecting disks and return the smallest one. Therefore, the MID problem can be solved in  time. □

5.2. Approximation factor analysis
Our approximation algorithm for the 2D Grouping problem is to compute the minimum intersecting disk  for L, and return the maximum distance  between the two or three points defining this disk .

Let ⁎ be the minimum radius disk, with radius ⁎, enclosing all the selected points of L in an optimal solution for the 2D grouping problem on L. Let ⁎ be the maximum distance between the two or three points defining ⁎. Let Opt be the maximum distance between the selected points in the optimal 2D grouping problem.

We have the following lemma.

Lemma 1

⁎
⁎
 
.

Proof

When ⁎ is defined by two points, apparently we have ⁎
⁎
 
.

When ⁎ is defined by three points, we have ⁎
⁎
 
. This α is minimized when the three defining points for ⁎ form a regular triangle, where we have . □

Since Opt is the maximum distance between the selected points on L (which are inside the circle ⁎) and ⁎ is the maximum distance between the two or three points defining ⁎, we have ⁎. Let App be the solution of the approximation solution. We then combine all the arguments together as follows.⁎
 
⁎
 

Therefore, we have the following theorem.

Theorem 5

There is a factor-1.1547 approximation algorithm for the 2D grouping problem which runs in  time.

We comment that the algorithm would still work if  or Manhattan distance is used, with the approximation factor increased by an additional  factor.
6. Concluding remarks
We study a general version of the 2D dispersing problem, whose 1D counterpart was recently studied by Li and Wang [12], [13]. We prove that the 2D dispersion problem is NP-hard, in fact, NP-hard even when all segments are parallel and are of unit length. The proof can be applied to show the maximum independent set problem on colored linear unit disk graph remains to be NP-hard. We also consider the symmetric problem of grouping a set of n points, one on each input segment, such that the maximum distance between any two selected ones is minimized. For the latter problem, we give a factor-1.1547 approximation which runs in  time.

We have several open problems related to this paper:

1.
Does the 2D dispersion problem admit a constant factor approximation?

2.
Is the Independent Set problem on Colored Linear Unit Disk Graph W[1]-hard?

3.
Is the 2D grouping problem polynomial-time solvable?