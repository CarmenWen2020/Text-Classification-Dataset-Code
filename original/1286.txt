Abstract
We study the computational complexity of two well-known graph transversal problems, namely Subset Feedback Vertex Set and Subset Odd Cycle Transversal, by restricting the input to H-free graphs, that is, to graphs that do not contain some fixed graph H as an induced subgraph. By combining known and new results, we determine the computational complexity of both problems on H-free graphs for every graph H except when H=sP1+P4 for some s≥1. As part of our approach, we introduce the Subset Vertex Cover problem and prove that it is polynomial-time solvable for (sP1+P4)-free graphs for every s≥1.

Keywords
Feedback vertex
Odd cycle transversal
Hereditary graph class
H-free
Complexity dichotomy

1. Introduction
The central question in Graph Modification is whether or not a graph G can be modified into a graph from a prescribed class  via at most k graph operations from a prescribed set S of permitted operations such as vertex or edge deletion. The transversal problems Vertex Cover, Feedback Vertex Set and Odd Cycle Transversal are classical problems of this kind. For example, the Vertex Cover problem is equivalent to asking if one can delete at most k vertices to turn G into a member of the class of edgeless graphs. The problems Feedback Vertex Set and Odd Cycle Transversal ask if a graph G can be turned into, respectively, a forest or a bipartite graph by deleting vertices.

We can relax the condition on belonging to a prescribed class to obtain some related subset transversal problems. We state these formally after some definitions. For a graph  and a set , a T-cycle is a (not necessarily induced) cycle of G that intersects T. A T-cycle is odd if it has an odd number of vertices. A set 
 is a T-vertex cover of G if 
 contains at least one of the two end-vertices for every edge incident to a vertex of T. A set 
 is a T-feedback vertex set or an odd T-cycle transversal of G if 
 contains at least one vertex of every T-cycle, or every odd T-cycle, respectively. For example, let G be a star with center vertex c, whose leaves form the set T. Then, both  and T are T-vertex covers of G but the first is considerably smaller than the second. See Fig. 1, Fig. 2 for some more examples.

Fig. 1
Download : Download high-res image (5KB)
Download : Download full-size image
Fig. 1. The house in which we let T consist of the square vertex. The empty set is not an odd T-cycle transversal, as there exists a non-induced odd cycle (containing all the vertices of the graph) passing through the square vertex. Hence, the size of a minimum odd T-cycle transversal is 1, and in particular, this example shows that looking for a minimum odd T-cycle transversal (the problem we consider) or a minimum odd induced T-cycle transversal are two different problems.

Fig. 2
Download : Download high-res image (46KB)
Download : Download full-size image
Fig. 2. In both examples, the square vertices of the Petersen graph form a set T and the black vertices form an odd T-cycle transversal ST, which is also a T-feedback vertex set. In the left example, ST ∩ (V ∖ T)≠∅, and in the right example, ST ⊆ T.



Download : Download high-res image (35KB)
Download : Download full-size image


Download : Download high-res image (37KB)
Download : Download full-size image


Download : Download high-res image (38KB)
Download : Download full-size image
The Subset Feedback Vertex Set and Subset Odd Cycle Transversal problems are well known. The Subset Vertex Cover problem is introduced in this paper, and we are not aware of past work on this problem (see Section 6 for open problems). On general graphs, Subset Vertex Cover is polynomially equivalent to Vertex Cover: to solve Subset Vertex Cover remove edges in the input graph that are not incident to any vertex of T to yield an equivalent instance of Vertex Cover. However, this equivalence no longer holds for graph classes that are not closed under edge deletion.

As the three problems are NP-complete, we consider the restriction of the input to special graph classes in order to better understand which graph properties cause the computational hardness. Instead of classes closed under edge deletion, we focus on classes of graphs closed under vertex deletion. Such classes are called hereditary. The reasons for this choice are threefold. First, hereditary graph classes capture many well-studied graph classes. Second, every hereditary graph class  can be characterized by a (possibly infinite) set 
 of forbidden induced subgraphs. This enables us to initiate a systematic study, starting from the case where 
. Third, we aim to extend and strengthen existing complexity results (that are for hereditary graph classes). If 
 for some graph H, then  is monogenic, and every  is H-free. Our research question is:

How does the structure of a graph H influence the computational complexity of a subset transversal problem for input graphs that are H-free?

As a general strategy one might first try to prove that the restriction to H-free graphs is NP-complete if H contains a cycle or an induced claw (the 4-vertex star). This is usually done by showing, respectively, that the problem is NP-complete on graphs of arbitrarily large girth (the length of a shortest cycle) and on line graphs, which form a subclass of claw-free graphs. If this is the case, then it remains to consider the case where H has no cycle, and has no claw either. So H is a linear forest, that is, the disjoint union of one or more paths.

Existing Results. As NP-completeness results for transversal problems carry over to subset transversal problems, we first discuss results on Feedback Vertex Set and Odd Cycle Transversal for H-free graphs. By Poljak's construction [37], Feedback Vertex Set is NP-complete for graphs of girth at least g for every integer . The same holds for Odd Cycle Transversal [11]. Moreover, Feedback Vertex Set [34] and Odd Cycle Transversal [11] are NP-complete for line graphs and thus for claw-free graphs. Hence, both problems are NP-complete for H-free graphs if H has a cycle or claw. Both problems are polynomial-time solvable for 
-free graphs [6], for 
-free graphs for every  [11] and for 
-free graphs for every  [16]. In addition, Odd Cycle Transversal is NP-complete for 
-free graphs [16]. Very recently, Abrishami et al. showed that Feedback Vertex Set is polynomial-time solvable for 
-free graphs [1]. We summarize as follows (
 means that F is an induced subgraph of G; see Section 2 for the other notation used).

Theorem 1

For a graph H, Feedback Vertex Set on H-free graphs is polynomial-time solvable if 
, 
 or 
 for some , and is NP-complete if 
 for some  or 
.

Theorem 2

For a graph H, Odd Cycle Transversal on H-free graphs is polynomial-time solvable if 
, 
 or 
 for some , and is NP-complete if 
 for some , 
, 
 or 
.

We note that no integer r is known such that Feedback Vertex Set is NP-complete for 
-free graphs. This situation changes for Subset Feedback Vertex Set which is, unlike Feedback Vertex Set, NP-complete for split graphs (that is, 
-free graphs), as shown by Fomin et al. [19]. Papadopoulos and Tzimas [35], [36] proved that Subset Feedback Vertex Set is polynomial-time solvable for 
-free graphs for any , co-bipartite graphs, interval graphs and permutation graphs, and thus 
-free graphs. Some of these results were generalized by Bergougnoux et al. [3], who solved an open problem of Jaffke et al. [25] by giving an 
-time algorithm for Subset Feedback Vertex Set given a graph and a decomposition of this graph of mim-width w. This does not lead to new results for H-free graphs: a class of H-free graphs has bounded mim-width if and only if 
 [8].

We are not aware of any results on Subset Odd Cycle Transversal for H-free graphs, but note that this problem generalizes Odd Multiway Cut, just as Subset Feedback Vertex Set generalizes Node Multiway Cut, another well-studied problem. We refer to a large body of literature [2], [12], [15], [19], [20], [22], [24], [27], [28], [29], [30] for further details, in particular for parameterized and exact algorithms for Subset Feedback Vertex Set and Subset Odd Cycle Transversal. These algorithms are beyond the scope of this paper.

Theorem 3

Let H be a graph with 
 for all . Then Subset Feedback Vertex Set on H-free graphs is polynomial-time solvable if 
 or 
 for some , and is NP-complete otherwise.

Theorem 4

Let H be a graph with 
 for all . Then Subset Odd Cycle Transversal on H-free graphs is polynomial-time solvable if 
 or 
 for some  and NP-complete otherwise.

Though the proved complexities of Subset Feedback Vertex Set and Subset Odd Cycle Transversal are the same on H-free graphs, the algorithm that we present for Subset Odd Cycle Transversal on 
-free graphs is more technical compared to the algorithm for Subset Feedback Vertex Set, and considerably generalizes the transversal algorithms for 
-free graphs of [16]. There is further evidence that Subset Odd Cycle Transversal is a more challenging problem than Subset Feedback Vertex Set. For example, the best-known parameterized algorithm for Subset Feedback Vertex Set runs in 
⁎
 time [24], but the best-known run-time for Subset Odd Cycle Transversal is 
⁎
 [30]. Moreover, it is not known if there is an XP algorithm for Subset Odd Cycle Transversal in terms of mim-width in contrast to the known XP algorithm for Subset Feedback Vertex Set [3].

In Section 2 we introduce our terminology. In Section 3 we present some results for Subset Vertex Cover: the first result shows that Subset Vertex Cover is polynomial-time solvable for 
-free graphs for every , and we later use this as a subroutine to obtain a polynomial-time algorithm for Subset Odd Cycle Transversal on 
-free graphs. We present our results on Subset Feedback Vertex Set and Subset Odd Cycle Transversal in Sections 4 and 5, respectively. In Section 6 on future work we discuss Subset Vertex Cover in more detail.

2. Preliminaries
We consider undirected, finite graphs with no self-loops and no multiple edges. Let  be a graph, and let . The graph  is the subgraph of G induced by S. We write  to denote the graph . Recall that for a graph F, we write 
 if F is an induced subgraph of G. The cycle and path on r vertices are denoted 
 and 
, respectively. We say that S is independent if  is edgeless, and that S is a clique if  is complete, that is, contains every possible edge between two vertices. We let 
 denote the complete graph on r vertices, and 
 denote the graph whose vertices form an independent set of size s. A (connected) component of G is a maximal connected subgraph of G. The graph 
 
 is the complement of G. The neighbourhood of a vertex  is the set 
. For , we let 
. The closed neighbourhoods of u and U are denoted by 
 and 
, respectively. We omit subscripts when there is no ambiguity.

Let  be such that . Then S is complete to T if every vertex of S is adjacent to every vertex of T, and S is anti-complete to T if there are no edges between S and T. In the first case, S is also said to be complete to , and in the second case we say it is anti-complete to .

We say that G is a forest if it has no cycles, and, furthermore, that G is a linear forest if it is the disjoint union of one or more paths. The graph G is bipartite if V can be partitioned into at most two independent sets. A graph is complete bipartite if its vertex set can be partitioned into two independent sets X and Y such that X is complete to Y. We denote such a graph by 
. If X or Y has size 1, the complete bipartite graph is a star; recall that 
 is also called a claw. A graph G is a split graph if it has a bipartition 
 such that 
 is a clique and 
 is an independent set. A graph is split if and only if it is 
-free [18].

Let 
 and 
 be two vertex-disjoint graphs. The union operation + creates the disjoint union 
 of 
 and 
 (recall that 
 is the graph with vertex set 
 and edge set 
). The join operation adds an edge between every vertex of 
 and every vertex of 
. The graph G is a cograph if G can be generated from 
 by a sequence of join and union operations. A graph is a cograph if and only if it is 
-free (see, for example, [7]). It is also well known [13] that a graph G is a cograph if and only if G allows a unique tree decomposition called the cotree 
 of G, which has the following properties:

1.
The root r of 
 corresponds to the graph 
.

2.
Each leaf x of 
 corresponds to exactly one vertex of G, and vice versa. Hence x corresponds to a unique single-vertex graph 
.

3.
Each internal node x of 
 has at least two children, is labelled ⊕ or ⊗, and corresponds to an induced subgraph 
 of G defined as follows:

•
if x is a ⊕-node, then 
 is the disjoint union of all graphs 
 where y is a child of x;

•
if x is a ⊗-node, then 
 is the join of all graphs 
 where y is a child of x.

4.
Labels of internal nodes on the (unique) path from any leaf to r alternate between ⊕ and ⊗.

Note that 
 has  vertices. We modify 
 into a modified cotree 
 in which each internal node has exactly two children by applying the following well-known procedure (see for example [4]). If an internal node x of 
 has more than two children 
 and 
, remove the edges 
 and 
 and add a new vertex 
 with edges 
, 
 and 
. If x is a ⊕-node, then 
 is a ⊕-node. If x is a ⊗-node, then 
 is a ⊗-node. Applying this rule exhaustively yields 
. As 
 has  vertices, constructing 
 from 
 takes linear time. This leads to the following result, due to Corneil, Perl and Stewart, who proved it for cotrees.
Lemma 1

[14]
Let G be a graph with n vertices and m edges. Then deciding whether or not G is a cograph, and constructing a modified cotree 
 (if it exists) takes time .

We also consider optimization versions of subset transversal problems, in which case we have instances  (instead of instances ). We say that a set  is a solution for an instance  if S is a T-transversal (of whichever kind we are concerned with). A solution S is smaller than a solution 
 if 
, and a solution S is minimum if  does not have a solution smaller than S, and it is maximum if there is no larger solution. We will use the following general lemma, which was implicitly used in [36].

Lemma 2

Let S be a minimum solution for an instance  of a subset transversal problem. Then .

Proof

Let  be a vertex subset of a graph . Recall that a cycle is a T-cycle if it contains a vertex of T. A subgraph of G is a T-forest if it has no T-cycles. Recall also that a cycle is odd if it has an odd number of edges. A subgraph of G is T-bipartite if it has no odd T-cycles. We recall that a set 
 is a T-vertex cover of G if 
 has at least one vertex of every edge incident to a vertex of T. We also recall that a set 
 is a T-feedback vertex set or an odd T-cycle transversal of G if 
 has at least one vertex of every T-cycle or every odd T-cycle, respectively. Note that 
 is a T-feedback vertex set if and only if 
 is a T-forest, and 
 is an odd T-cycle transversal if and only if 
 is T-bipartite. A T-path is a path that contains a vertex of T. A T-path is odd (or even) if the number of edges in the path is odd (or even, respectively).

We will use the following easy lemma, which proves that T-forests and T-bipartite graphs can be recognized in polynomial time. It combines results claimed but not proved in [30], [36].

Lemma 3

Let  be a graph and . Then deciding whether or not G is a T-forest or T-bipartite takes  time.

Proof

A block of G is a maximal 2-connected subgraph of G and is non-trivial if it contains a cycle, or, equivalently, at least three vertices. Suppose that we have a block decomposition of G; it is well known that this can be found in  time (see for example [23]). It is clear that G is a T-forest if and only if no non-trivial block contains a vertex of T. We claim that G is T-bipartite if and only if no non-bipartite block contains a vertex of T. To see this note first that the sufficiency is obvious. We will show that if a vertex t of T belongs to a block B that contains an odd cycle C, then t belongs to an odd cycle. If t is in C, we are done. Otherwise find two paths P and 
 from t to, respectively, distinct vertices u and 
 in C. We can assume that the paths contain no other vertex of C (else we truncate them) and that, as B is 2-connected, they contain no common vertex other than t. We can form two cycles that contain t by adding to 
 each of the two paths between u and 
 in C. As C is an odd cycle, the lengths of these two paths, and therefore the lengths of the two cycles, have distinct parity. Thus t belongs to an odd cycle. Finally we note that the checks of the block decomposition needed to decide whether or not G is a T-forest or T-bipartite can be done in  time. □

3. Subset vertex cover
In this section we present some results on Subset Vertex Cover, some of which we will need later on.

Lemma 4

Subset Vertex Cover can be solved in polynomial time for 
-free graphs.

Proof

Let G be a cograph with n vertices and m edges. First construct a modified cotree 
 and then consider each node of 
 starting at the leaves of 
 and ending at the root r. Let x be a node of 
. We let 
 denote a minimum 
-vertex cover of 
.

If x is a leaf, then 
 is a 1-vertex graph. Hence, we can let 
. Now suppose that x is a ⊕-node. Let y and z be the two children of x. Then, as 
 is the disjoint union of 
 and 
, we can let 
. Finally suppose that x is a ⊗-node. Let y and z be the two children of x. As 
 is the join of 
 and 
 we observe the following: if 
 contains a vertex of 
, then 
. Similarly, if 
 contains a vertex of 
, then 
. Hence, we let 
 be the smallest set of 
, 
 and 
.

Constructing 
 takes  time by Lemma 1. As 
 has  nodes and processing a node takes  time, the total running time is . □

The following lemma generalizes a corresponding well-known observation for Vertex Cover.
Lemma 5

Let H be a graph. If Subset Vertex Cover is polynomial-time solvable for H-free graphs, then it is for 
-free graphs as well.

Proof

Let  be a 
-free graph and let . Let 
 be a minimum T-vertex cover of G. For each vertex  we consider the option that u belongs to 
. If so, then  belongs to 
. Let 
 and let 
. As 
 is H-free, we find a minimum 
-vertex cover 
 of 
 in polynomial time. We remember the smallest set 
 and compare it with the size of T to find 
 (or some other minimum solution for ). □

Lemma 4, combined with s applications of Lemma 5, yields the following result.
Theorem 5

For every integer , Subset Vertex Cover can be solved in polynomial time for 
-free graphs.

4. Subset feedback vertex set
In this section we prove Theorem 3. Our contribution is Theorem 6, which is the case where 
. In the next section, we present an analogous result for Subset Odd Cycle Transversal. The proofs are similar in outline, but the latter requires additional insights.

We require two lemmas. In the first lemma, note that the bound of  is not necessarily tight, but is sufficient for our needs.

Lemma 6

Let s be a non-negative integer, and let R be an 
-free tree. Then either

(i)
, or

(ii)
R has precisely one vertex r of degree more than 2 and at most  vertices of degree 2, each adjacent to r; moreover, r has at least  neighbours.

Proof

If R has no vertices of degree more than 2, then R is a path, so , otherwise R has an induced 
 subgraph. Now let r be a vertex of degree more than 2, and let x, y and z be distinct neighbours of r. We view r as the root of the tree, and for  we use 
 to denote the subtree rooted at v.

Suppose that 
 has a vertex of degree at least 2. Then 
 has an induced 
, so 
 is 
-free. As a tree is bipartite, this means that this subtree consists of at most  vertices. Likewise, 
, so 
 is 
-free, and hence consists of at most  vertices. Thus .

We may now assume that for each , the subtree 
 has no vertices of degree at least 2; that is, either 
 or 
. It remains to show that when (i) does not hold, at most  of the 
 subgraphs are isomorphic to 
. Towards a contradiction, suppose that R has s vertices at distance 2 from r, and . Since  for any non-negative integer s, the vertex r has at least  neighbours. Without loss of generality, label the neighbours of r as 
 such that 
 for each . Then 
, and 
 for each ; a contradiction.

Finally, 
, so 
. □

Recall that for a graph  and a set , we let  denote the graph . We can extend “partial” solutions to full solutions in polynomial time as follows.

Lemma 7

Let  be a graph with a set . Let 
 and 
 such that 
 is a T-feedback vertex set of 
, and let 
. Suppose that  is 
-free, and 
. Then there is a polynomial-time algorithm that finds a minimum T-feedback vertex set 
 of G such that 
 and 
.

Proof

Since  is 
-free, it is a disjoint union of complete graphs. Let 
. Suppose that C is a T-cycle in 
. Then C contains at least one vertex of Z. If 
, then C is contained in a component of . On the other hand, if 
, say, then y is a cutvertex of 
, so there exists a component  of  such that C is contained in . Hence, we can consider each component of  independently: for each component  it suffices to find the maximum subset 
 of U such that 
 contains no T-cycles. Then 
 and 
, where 
. So, 
 will be the union of 
 and the vertex sets 
, for every component  of . Hence, it remains to prove how to find the sets 
 in polynomial time; we show this below.

Let  such that  is a component of . Either 
, or 
 for some . First, consider the case where 
. We find a set 
 that is a maximum subset of U such that 
 has no T-cycles. Clearly if , then we can set 
. If 
, then, since 
 is a clique, 
. Thus, if , then we set 
. So it remains to consider when  but . If there is some  that is anti-complete to 
, then we can set 
 to be any 2-element subset of U containing u. Otherwise 
 and y is complete to U. In this case, for any , we set 
.

Now we may assume that 
 and . Again, we find a set 
 that is a maximum subset of U such that 
 has no T-cycles. Partition U into 
 where 
 if and only if u is a neighbour of y. Since 
, observe that 
 contains at most one vertex of 
, otherwise 
 has a T-cycle. Since 
 is a clique, if 
 then 
. So if 
 and there is an element 
, then we can set 
. If 
 but 
, then we can set 
. So we may now assume that 
. If 
 and , then we set 
 to any 2-element subset of U containing some 
. Clearly if , then we can set 
. So it remains to consider when 
 and 
. In this case, we set 
 for an arbitrary 
. □

We now prove the main result of this section.

Theorem 6

For every integer , Subset Feedback Vertex Set can be solved in polynomial time for 
-free graphs.

Proof

Let  be an 
-free graph for some , and let . We describe a polynomial-time algorithm for the optimization version of the problem on input . Let 
 such that 
 is a minimum T-feedback vertex set of G, and let 
, so 
 is a maximum T-forest. Note that 
 is a forest. We consider three cases: either

1.
 has at least 2s components;

2.
 has fewer than 2s components, and each of these components consists of at most  vertices; or

3.
 has fewer than 2s components, one of which consists of at least  vertices.

We describe polynomial-time subroutines that find a set 
 such that 
 is a maximum T-forest in each of these three cases, giving a minimum solution 
 in each case. We obtain an optimal solution by running each of these subroutines in turn: of the (at most) three potential solutions, we output the one with minimum size.
Case 1: 
 has at least 2s components.

We begin by proving a sequence of claims that describe properties of a maximum T-forest 
, when in Case 1. Since G is 
-free, 
 induces a 
-free forest, so 
 is a disjoint union of graphs isomorphic to 
 or 
. Let 
 such that  consists of precisely 2s components. Note that . We also let 
, and partition Y into 
 where 
 if y has only one neighbour in A, whereas 
 if y has at least two neighbours in A.

Claim 1: 
.

Proof of Claim 1. Let 
. Then v has neighbours in at least  of the components of , otherwise  contains an induced 
. Note also that v has at most one neighbour in each component of , otherwise 
 has a T-cycle. Now suppose that 
 contains distinct vertices 
 and 
. Then, of the 2s components of , the vertices 
 and 
 each have some neighbour in  of these components. So there are at least two components of  containing both a vertex adjacent to 
, and a vertex adjacent to 
. Let 
 and 
 be the vertex sets of two such components. Then 
, but 
 has a T-cycle; a contradiction.  ⋄

Claim 2: .

Proof of Claim 2. By Claim 1, it suffices to prove that 
. We argue that each component of  has at most one neighbour in 
, implying that 
. Indeed, suppose that there is a component 
 of  having two neighbours in 
, say 
 and 
. Then 
 contains an induced 
 that is anti-complete to 
, contradicting that G is 
-free.  ⋄

Claim 3: 
 is independent, and no component of  of size 2 has a neighbour in 
.

Proof of Claim 3. Suppose that there are adjacent vertices 
 and 
 in 
. Let 
 be the unique neighbour of 
 in A for . Note that 
, for otherwise 
 has a T-cycle. Then 
 induces a 
, so 
 contains an induced 
, which is a contradiction. We deduce that 
 is independent.

Now let 
 such that 
 is a component of , and suppose that 
 is adjacent to 
. Then 
 is the unique neighbour of 
 in A, so 
. Thus 
 contains an induced 
, which is a contradiction.  ⋄

Claim 4: Let . Then 
.

Proof of Claim 4. Suppose that there exists 
 that is adjacent to a vertex . Let a be the unique neighbour of y in A. Then  contains an induced 
, which is a contradiction. So 
 is anti-complete to Z. Now, if  is adjacent to a vertex in 
, then c is adjacent to 
 where 
.  ⋄

We now describe the subroutine that finds an optimal solution in Case 1. In this case, for any maximum forest 
, there exists some set  of size at most 4s such that 
, and  consists of exactly 2s components, each isomorphic to either 
 or 
. Since  consists of components of 
, there is such an A for which 
. Thus we guess a set 
 in 
 time, discarding those sets that do not induce a forest with exactly 2s components, and those that induce a component consisting of more than two vertices.

For any such 
 and 
, the set 
 has size at most , by Claim 2. Thus, in 
 time, we guess 
 with 
, and assume that 
 whereas 
. Let 
 be the subset of 
 that contains vertices that have at least two neighbours in 
. We discard any sets 
 that do not satisfy Claims 1 or 3, or those sets for which 
 has a T-cycle on three vertices, one of which is the unique vertex of 
.

Let 
 (for example, see Fig. 6). Since 
 contains an induced 
, the subgraph  is 
-free. Now 
 by Claim 4, where 
 by Claim 1. Thus, by Lemma 7, we can extend a partial solution 
 of 
 to a solution 
 of G, in polynomial time.

Case 2: 
 has at most  components, each of size at most .

We guess sets  and  such that 
 and 
. Since F has size at most  vertices, there are 
 possibilities for F. By Lemma 2, we may assume that 
. So for each guessed F, there are at most 
 possibilities for S. For each S and F, we set 
 and check, in -time by Lemma 3, if 
 is a T-forest. In this way we exhaustively find all solutions satisfying Case 2, in 
 time; we output the one of minimum size.

Case 3: 
 has at most  components, one of which has size at least .

We guess a set 
 such that 
. We also guess a set 
 such that 
. Let 
. We check that 
 has the following properties:

–
 is a tree,

–
 has a unique vertex 
 of degree more than 2, with 
,

–
 has at most  vertices with distance 2 from 
, and each of these vertices has degree 1, and

–
each vertex 
 has degree 1 in 
, and distance 2 from 
.

We assume that 
 induces a subtree of the large component , where 
, and 
 contains r, all neighbours of r with degree 2 in , and all vertices at distance 2 from r. In other words, 
 can be obtained from  by deleting some subset of the leaves of  that are adjacent to r. In particular, 
. We also assume that 
 is the set of all vertices of  that have distance 2 from r.

It follows from these assumptions that 
. Let 
, and observe that each  has at most one neighbour in 
 (if it has such a neighbour, this neighbour is r). So 
.

In order to apply Lemma 7, it remains to show that  is 
-free. Let 
. As r has at least  neighbours in 
, by Lemma 6, 
 contains an induced 
. Moreover, 
. Since G is 
-free,  is 
-free. Thus, by Lemma 7, we can extend a partial solution 
 of 
 to a solution 
 of G, in polynomial time. □

We are now ready to prove Theorem 3.

Theorem 3 (restated). Let H be a graph with 
 for all . Then Subset Feedback Vertex Set on H-free graphs is polynomial-time solvable if 
 or 
 for some , and is NP-complete otherwise.

Proof

If H has a cycle or claw, we use Theorem 1. The cases 
 and 
 follow from the corresponding results for permutation graphs [35] and split graphs [19]. The remaining case 
 follows from Theorem 6. □

5. Subset odd cycle transversal
At the end of this section we prove Theorem 4. We need three new results to combine with existing knowledge. Our first result uses the reduction of [35] which proved the analogous result for Subset Feedback Vertex Set.

Theorem 7

Subset Odd Cycle Transversal is NP-complete for the class of split graphs (or equivalently, 
-free graphs).

Proof

We observe that the problem belongs to NP by Lemma 3. To show NP-hardness, we reduce from Vertex Cover. Let a graph  and a positive integer k be an instance of Vertex Cover. From G, we construct a graph 
 as follows. Let 
. Add an edge between  and  in 
 if and only if v is an end-vertex of e in G. Add edges so that V induces a clique of 
. Hence, 
 is a split graph with independent set E and clique V. For example, when 
, see Fig. 7. Let . We show that G has a vertex cover of size at most k if and only if 
 has an odd T-cycle transversal of size at most k.

Fig. 7
Download : Download high-res image (21KB)
Download : Download full-size image
Fig. 7. The graph 
: an example of the construction in the proof of Theorem 7.

First suppose that G has a vertex cover S of size at most k. Then S is an odd T-cycle transversal of 
. Now suppose that 
 has an odd T-cycle transversal 
 of size at most k. As every vertex of E in 
 has degree 2, we can replace every vertex of E that belongs to 
 by one of its neighbours to obtain an odd T-cycle transversal of the same size as 
. Hence we may assume, without loss of generality, that 
. As a vertex of E and its two neighbours in V form a triangle, this means that 
 contains at least one neighbour of every . Hence, 
 is a vertex cover of G. □

Theorem 8

Subset Odd Cycle Transversal can be solved in polynomial time for 
-free graphs.

Proof

Let G be a cograph with n vertices and m edges, and let . First construct the modified cotree 
 and then consider each node of 
 starting at the leaves of 
 and ending in its root r. Let x be a node of 
. We let 
 denote a minimum odd 
-cycle transversal of 
.

If x is a leaf, then 
 is a 1-vertex graph. Hence, we can let 
. Now suppose that x is a ⊕-node. Let y and z be the two children of x. Then, as 
 is the disjoint union of 
 and 
, we let 
.

Finally suppose that x is a ⊗-node. Let y and z be the two children of x. Let 
 and 
. Let 
. As 
 is the join of 
 and 
 we observe the following. If 
 contains two adjacent vertices, at least one of which belongs to 
, then 
 (as otherwise 
 has a triangle containing a vertex of T) and thus 
. In this case we may assume that 
. Similarly, if 
 contains two adjacent vertices, at least one of which belongs to 
, then 
 and thus 
. In this case we may assume that 
. From the two sets 
 and 
 we remember the smallest one.

It remains to examine the case where 
 and 
 induce subgraphs of G in which the vertices of 
 and 
, respectively, are singleton components.

First suppose that 
 and 
 are both non-empty. Then 
 and 
 are both independent sets, as otherwise 
 would contain a T-triangle. We examine this situation by computing a largest independent set 
 in 
 and a largest independent set 
 in 
; it is well-known that this can be done in polynomial time (for example, it follows from Lemma 4). We remember 
. Since the union of two independent sets induces a bipartite graph, this is an odd T-cycle transversal.

Now suppose that 
 is non-empty, but 
 is empty. Then 
 must be an independent set, as otherwise we obtain a T-triangle by taking a vertex of 
 and two adjacent vertices of 
. First assume that 
 has size at least 2. We observe that 
 is also an independent set; otherwise two adjacent vertices of 
, two vertices of 
 and one vertex of 
 would form a T-cycle on five vertices. Hence, both 
 and 
 are independent sets, and we already dealt with this case above.

Now assume that 
 has size at most 1. In this case 
 is a minimum 
-vertex cover of 
. We can compute a minimum 
-vertex cover S of 
 in polynomial time by Lemma 4. We remember 
 where 
 is an arbitrary vertex of 
 if the latter set is non-empty; otherwise we just remember 
.

We deal with the case where 
 is non-empty, but 
 is empty in the same way and remember the output. We also consider the possible situation where 
, in which case we remember 
. Finally, we take as set 
 a set of minimum size over the sets that we remembered.

Constructing 
 takes  time by Lemma 1. As 
 has  nodes and processing a node takes  time (due to the application of Lemma 4), the total running time is 
. □

The following result is the main result of this section. Its proof uses the same approach as the proof of Theorem 6 but we need more advanced arguments.

Theorem 9

For every integer , Subset Odd Cycle Transversal can be solved in polynomial time for 
-free graphs.

Proof

Let  be an 
-free graph and let . Note that it suffices to prove the result for , since for every 
, the class of 
-free graphs is contained in the class of 
-free graphs. We describe a polynomial-time algorithm to solve the optimization problem on input . That is, we describe how to find a smallest odd T-cycle transversal 
. In fact, we will solve the equivalent problem of finding a maximum size set 
 such that 
 is T-bipartite; so, of course, 
 is the complement of a smallest odd T-cycle transversal, that is 
. We separate into two cases that separately seek to find T-bipartite subgraphs with complementary constraints on the size of the intersection of this subgraph with T. The largest one found overall is the desired output.

Case 1: Compute a largest T-bipartite subgraph 
 such that 
.

Note that 
⁎
 is a candidate solution. We must see if we can find something larger. Consider each set 
 of size at most , discarding any set that does not induce a bipartite graph. There are 
 possible sets. For each choice of 
, consider all sets  of size less than 
. Then 
 is a candidate solution if it induces a T-bipartite subgraph, which is checked in -time by Lemma 3. For each 
, there are 
 possible choices of S to consider. Note that we do not need to examine larger sets S since then 
 is no larger than 
⁎
.

Case 2: Compute a largest T-bipartite subgraph 
 such that 
.

Note that 
 might not exist in which case the output of Case 1 is our result. We make some observations about the subgraph 
 that we seek. As 
 is a bipartite graph on at least  vertices, it contains an independent set A of size . Let 
 and consider a partition 
 of Y where y is in 
 if y has precisely one neighbour in A, and otherwise y is in 
.

Claim 1: 
 is an independent set, no two vertices of 
 have a common neighbour in A and 
.

Proof of Claim 1. Suppose that there are adjacent vertices 
, and let a be the unique neighbour of y in A. Then, according to whether or not 
 is adjacent to a, either 
 induces an odd T-cycle, or 
 contains an induced 
 (recall that ). Both are contradictions. If there are two (non-adjacent) vertices 
 that have the same neighbour a in A, then, again, 
 contains an induced 
, a contradiction. It follows that no two vertices of 
 have a common neighbour in A, and hence 
.  ⋄

Claim 2: 
 is an independent set, each 
 has at least s neighbours in A and any two vertices of 
 share at least one neighbour in A.

Proof of Claim 2. Let y and 
 be two distinct vertices in 
. By definition, y and 
 each have at least two neighbours in A. Since  is 
-free, y is non-adjacent to at most  vertices of A. So y has at least  neighbours in A. Similarly, 
 has at least s neighbours in A. As , this means that y and 
 have a common neighbour . If y and 
 are adjacent, then 
 would induce an odd T-cycle, a contradiction.  ⋄

Armed with these definitions and claims, we show how to find 
 in polynomial time. We have two subcases.

Case 2a: Compute a largest T-bipartite subgraph 
 such that 
 and for some choice of A, we have .

Consider each set  of size  such that A is an independent set. There are 
 choices for A. For each A, we consider each set 
 of vertices that each have a single neighbour in A such that 
 satisfies Claim 1. As we require that 
, there are 
 choices for 
. Then consider each set  of size at most 3s such that 
 and 
 is a set of vertices that each have at least two neighbours in A and satisfies Claim 2. We also require that  does not induce any odd T-cycles, which is checked in -time by Lemma 3. There are 
 choices for Y.

Note that  is bipartite since  can contain only even cycles as 
 and 
 are independent sets, and any odd cycle in  must thus contain a vertex of A and so is an odd T-cycle, since . By Claim 2, vertices of 
 all belong to the same component of  and, as, by definition and Claim 1, each vertex in 
 has degree at most 1, we deduce that every vertex of degree at least 2 in  belongs to the same component. We denote this component by , or we let D be the empty set if there is no such component (which only occurs when 
). See Fig. 8 for an illustration.

Fig. 8
Download : Download high-res image (24KB)
Download : Download full-size image
Fig. 8. An example of G[A ∪ Y] in Case 2a when s = 3.

We now let .

Claim 3: 
.

Proof of Claim 3. By definition, 
. Suppose that  is adjacent to a vertex 
. Let a be the unique neighbour of y in A. Since  as , it follows that  contains an induced 
, a contradiction. So 
 is anti-complete to Z, and the claim follows.  ⋄

The aim in the remainder of this subcase is to find the largest possible set 
 that induces a T-bipartite subgraph and that contains  and a subset of Z. Since  contains an induced 
 subgraph,  is 
-free, and so is a disjoint union of complete graphs. From Claim 3, it follows that  (which is a subset of 
) is anti-complete to 
. Therefore, we only need to consider odd T-cycles in  from now on.

For a component  of , let 
 be the subset of U that consists of each vertex u of U such that  does not contain an odd T-cycle through u, which is checked in -time by Lemma 3. Clearly for each component  in , any vertex that might be in 
 must belong to 
. We shall see later that we can consider each component of  independently and that it suffices to find for each the maximum size subset of 
 that can be added to 
. We note that by Claim 3, the neighbours of 
 in  belong to 
 and, as 
, these neighbours therefore also belong to D. We first investigate the possible edges between 
 and D.

Claim 4: Either 
 or 
.

Proof of Claim 4. We can assume that there are two distinct vertices 
 of 
 that have a different neighbour in D else the claim follows immediately. Let 
 be a neighbour of 
 in D and 
 be a neighbour of 
 in D with 
. By Claim 2, 
 and 
 have a common neighbour a in A. Thus we have a path 
. Recall that  is a disjoint union of complete graphs. Hence, 
 is a clique, which means that the 5-vertex path 
 can be extended to a cycle by the edge 
, but, as , this is an odd T-cycle, a contradiction.  ⋄

Claim 5: For each component  of , let 
 be a subset of 
; and let 
 be the union of each 
 over all components  of . If 
 contains an odd T-cycle, then 
 contains an odd T-cycle for some component  of .

Proof of Claim 5. Suppose that C is an odd T-cycle of 
. First we show that C contains two vertices of some 
. Towards a contradiction, suppose C is a subgraph of 
⁎
, where 
⁎
 is a subset of 
 with at most one vertex from each component of . Recall that D is a bipartite graph that (if non-empty) is a component of . By Claim 3, all neighbours of 
⁎
 are contained in 
, which, in turn, is contained in one side of the bipartition of D. Hence 
⁎
 is bipartite and has no odd T-cycles and, in particular, C is not an odd T-cycle. From this contradiction we deduce that there is some component  of  such that C contains two vertices of 
.

We can assume that C is not contained in 
 else the claim follows immediately. Then there are distinct vertices 
 and 
 and distinct vertices 
 and 
. By Claim 2, 
 and 
 have a common neighbour . Then, as U, and thus 
, is a clique, 
 is an odd T-cycle contained in 
, a contradiction.  ⋄

By Claim 5, to extend  to the largest possible T-bipartite graph, for each component  of , we must find in polynomial time a maximum subset 
 of 
 such that 
 has no odd T-cycle.

We find a set 
 as follows. We first suppose that for the set we seek 
. Note that in this case we have 
, since 
 is a clique. Partition 
 into 
 where 
 if 
 has no neighbours in D, 
 if u has exactly one neighbour in D, and otherwise 
. If 
 is not empty, then let 
, for some . We partition 
 into classes 
 such that 
 if 
. Using Claim 4, either 
 or 
. Moreover, when 
, then 
 for some ; and when 
, then 
. So, if there exists some 
, then we choose an i with 
 that maximises 
, and set 
. If 
 but 
 for all , then set 
 for an arbitrarily chosen 
. Now suppose 
 is empty, and recall that in this case 
. If 
 is non-empty, then set 
 for some arbitrarily chosen 
. Finally, if 
 is also empty, then set 
. This process finds a maximum 
 of size at least 3 if such a set exists. We note that 
 does not contain an odd T-cycle since either the only neighbour of 
 in  is some 
, or the only vertex in 
 adjacent to  does not belong to T.

Now consider the case where 
. We exhaustively check all pairs of vertices in 
, of which there are 
. Let 
 be such a pair of distinct vertices. We check that 
 is T-bipartite; if it is, then we set 
. Recall that this check runs in polynomial time, by Lemma 3. If no pair is found, we set 
 to be the singleton set consisting of any arbitrarily chosen vertex of 
. If 
 is empty, then we set 
. We observe that in all cases we obtained 
 in polynomial time, as needed.

Case 2b: Compute a largest T-bipartite subgraph 
 such that 
 and for some choice of A, we have .

Note that as A has size  and 
, we have that 
. Let 
 be a subset of 
 with 
. Let 
. By Claim 2 it follows that 
. As 
, we also find that 
.

Claim 6: Let y and 
 be distinct vertices of 
. Then there is an even T-path in 
 between y and 
.

Proof of Claim 6. Assume that y and 
 have no common neighbour in 
 else the claim is immediate. First let us assume at least one of y and 
 is in 
. Without loss of generality, 
. Then 
 by the assumption that y and 
 have no common neighbour and Claim 2. Let 
 be a neighbour of 
. By definition, 
 has a neighbour 
 in 
 and 
 else 
 is a common neighbour of y and 
. By Claim 2 again, y and 
 have a common neighbour 
. Thus 
 is an even T-path in 
 (in particular, note that 
 and 
 belong to T, as 
 belongs to T).

Now we consider the case where 
. Let 
⁎
 be a vertex of 
. By the previous case there are even T-paths in 
⁎
 between y and 
⁎
 and between 
 and 
⁎
. Consider the subgraph induced by the vertices of these two paths. After removing the edge 
 (if it exists) this subgraph is bipartite, since 
 is bipartite and the neighbours of y and 
 are both in 
. We then discard edges from (even) cycles until a path between y and 
 is obtained. This path is even, and moreover passes through 
. Hence, it is an even T-path between y and 
 in 
. ⋄

Claim 7: 
, or equivalently, 
.

Proof of Claim 7. For contradiction, assume there is a vertex 
. By assumption there are vertices 
 and 
. By definition of 
, there is a vertex 
. If 
 then  induces an odd T-cycle, a contradiction. Suppose now that 
. Then by Claim 6 there is an even T-path P in 
 
 between y and 
. As 
 is an independent set by Claim 2 and 
 is independent by definition, v does not belong to 
 and hence, v is not on P. If a does not belong to P, then the cycle formed by P and 
 is an odd T-cycle of 
. If a does belong to P, then we can divide P into a path 
 from y to a and a path 
 from 
 to a. As 
 and 
 must have the same parity, one of the two cycles formed by 
 and avy and by 
 and 
 is an odd T-cycle of 
. In either case, we have a contradiction.  ⋄

By Claim 7, 
. We let 
. Note that 
 and 
. Hence, 
. Note that 
 contains no neighbours of 
 by definition. Moreover, 
, and 
 is an independent set by Claim 2. It follows that the vertices of 
 are isolated in 
. Finally, as 
, we observe that 
 is a disjoint union of complete graphs; see also Fig. 9.

Fig. 9
Download : Download high-res image (116KB)
Download : Download full-size image
Fig. 9. The decomposition of G in Case 2b excluding the set 
 (as this set will belong to ST). Recall that 
 and 
 are independent sets with s ≤ |A0| ≤ 2s − 1 and 
. Moreover, 
, so 
 is anti-complete to 
. The graphs 
 and G[Z] are disjoint unions of complete graphs (in particular, the vertices of 
 are isolated in 
). Finally, A0 is anti-complete to Z = V ∖ N[A0] by definition.

Let 
; see also Fig. 9. Recall that 
 is a subset of A of size at least s and that A is an independent set. Hence, 
 has an induced 
. Consequently,  is 
-free, so  is a disjoint union of complete graphs. Let  be a component of ; note that U is a clique. Partition the vertices of U into 
, where 
 if u has no neighbours in 
, whereas 
 if all neighbours of u in 
 are in one component of 
, and otherwise 
 (that is, when u has neighbours in distinct components of 
).

Claim 8: If 
, then u has at least two neighbours in 
.

Proof of Claim 8. Suppose that 
. By definition, u has neighbours x and y in distinct components of 
. By definition, 
 contains no neighbours of 
. Recall that the vertices of 
 are isolated in 
. Hence, 
 is independent. As G is 
-free and 
, the claim follows.  ⋄

Claim 9: Either 
 or 
. Moreover, if 
, then 
 is a clique.

Proof of Claim 9. For contradiction, assume that 
 and 
 are both non-empty. Let 
, 
 and 
. Recall that U is a clique, so 
 and 
 are adjacent and thus 
 induces a 
. Recall also that 
 contains no neighbours of 
 and that the vertices of 
 form an independent set of size  in 
. Then 
 contains an induced 
; a contradiction.

Now let 
 and 
 be two distinct vertices in 
. Let 
 and 
. If 
 is not adjacent to 
, then 
 induces a 
. Then, by the same reason as above, 
 contains an induced 
. Hence, 
 is adjacent to 
, and by the same arguments, 
 is adjacent to 
. If 
 and 
 and 
 are not adjacent, then 
 induces a 
 and thus 
 contains an induced 
; a contradiction. We conclude that 
 is a clique.  ⋄

Claim 10: 
.

Proof of Claim 10. For contradiction, assume there exist vertices 
 with 
. By Claim 8, we find that u and 
 each have at least two neighbours in 
. Hence, there exist vertices 
 such that , 
 and 
. By Claim 6, there is an even T-path P in 
 
 between y and 
. By using the path 
, we can extend P to an odd T-cycle; a contradiction.  ⋄

Claim 11: Suppose that 
 for some 
 and 
. Let y be a vertex in 
, which is a clique. Then 
 and 
.

Proof of Claim 11. By Claim 8, we find that 
 has at least two neighbours in 
. Hence, 
 has a neighbour 
 such that 
. By Claim 6, there is an even T-path P in 
 between y and 
. As, by Claim 9, 
 is a clique, y and 
 are adjacent. As U is a clique, 
 and 
 are adjacent. By using the path 
, we can extend P to an odd T-cycle. Since 
 and 
, this implies that 
 and thus 
.  ⋄

Claim 12: 
 contains at most one vertex of each component of 
.

Proof of Claim 12. Recall that 
 is the disjoint union of complete graphs. For contradiction, assume that y and 
 are vertices in 
 that belong to the same complete graph. By Claim 6, there is an even T-path between y and 
 that uses only vertices of 
. This can be extended to an odd T-cycle by adding the edge between y and 
, a contradiction.  ⋄

Claim 13: If the graph 
 contains an odd T-cycle C, then there is a component  of  such that the graph 
 contains an odd T-cycle 
.

Proof of Claim 13. Recall that 
 is a subset of 
. Let C be an odd T-cycle in 
. We can assume that C contains vertices from at least two components of  else we are done. Since 
, and Z is anti-complete to 
, the cycle C is the concatenation of a number of the following two types of paths on at least two vertices: a path is of type 1 if it starts and ends in 
 and is contained in 
; a path is of type 2 if it starts and ends in 
 and all its internal vertices are contained in a component of . Since 
 and, by Claim 12, 
 are independent sets, the graph 
 is bipartite and all the subpaths of C of type 1 are even. Moreover, since C is an odd cycle, there is a subpath P of C of type 2 that is odd. Let y and 
 be the two end-vertices of P, so y and 
 both belong to 
, which is a subset of 
. By Claim 6, there exists an even T-path Q in 
, which is an induced subgraph of 
 as 
. Let  be the component of  that contains the internal vertices of P. Joining P and Q yields the desired odd T-cycle 
 in 
.  ⋄

Let us now describe how we find the largest possible 
. Our approach is to first guess a constant number of vertices to be in 
. To be more precise, we consider each possible pair of sets 
, with 
, and 
, of size , that conform with the definitions of this subcase and Claim 6; note that the latter can be verified in polynomial time as the graph 
 with 
 has constant size. The total number of choices is 
. For each choice of these two sets we want to find the largest possible 
 that contains 
. Recall again that 
 by Claim 7. Thus we want to include in 
 as many vertices as possible from the set of vertices that we have not yet assigned to 
 or 
, that is, from the set 
.

So our goal is to find a subset 
 and subsets 
 for each component  of  to add to 
. We will first find each 
 and then X. In each case, we will choose the largest possible subset such that the vertices added to 
 so far do not induce an odd T-cycle. We must ask whether this greedy approach will lead us to find the largest possible 
 (given the initial choice of 
 and 
); that is, does the choice of some 
 not affect the later choice of another 
, or of X?

By Claim 13, we may consider the components of  independently. Hence, we must just show when we choose a subset 
 that this does not affect our later choice of X in a way that will prevent us claiming we have found a maximum size 
. We will see that sometimes as we choose the largest possible 
, this forces us to put some vertices from 
 into 
 (to avoid 
 containing an odd T-cycle); that is, we remove the possibility that such vertices can later be chosen to be in X. However, when this happens, we will show that in choosing 
, all the vertices of 
 forced into 
 belong to the same component of 
. By Claim 12, any choice of X will contain at most one vertex from this component. Hence, the cost of our choice of 
 is that X might contain one fewer vertex x than is otherwise possible. We can allow this as long as putting x in 
 prevents us from putting more than one vertex of U in 
, and we show that this will always be the case.

Before we show how to find 
, let us make one more comment. When 
 is found, we must check that, for any choice of X, it holds that 
 does not contain an odd T-cycle. First suppose that 
; say 
 contains a vertex 
. By Claim 10, we have that 
 contains no other vertex of 
. By Claim 11, no vertex of 
 has neighbours in 
. Thus u is a cutvertex of 
. Hence, we need only check that each of 
 and 
 contains no odd T-cycle. As the former is bipartite, all that we need to confirm is that 
 does not contain an odd T-cycle, or, equivalently, since 
 is a clique, that 
 or 
.

Now suppose that 
. Then 
 is a subset of either 
 or 
, as at most one of the latter two sets is non-empty by Claim 9. First suppose that 
. Then there are no edges from 
 to the rest of 
. So, again, we need only check that 
 or 
. Now suppose that 
. Then the vertices of 
 might have neighbours in 
. These neighbours must lie in 
, and, by Claim 9, they must form a clique so, by Claim 12, there can only be one such neighbour which we denote y. Thus y is a cutvertex so we need only check that the complete graph 
 contains no odd T-cycle, or, equivalently, that either 
 contains only two vertices or no vertex of T.

We now show how to find 
 by distinguishing three cases; note that we can check in polynomial time which case applies. We use again that 
 by Claim 10 and at most one of 
 and 
 is non-empty by Claim 9. When we have found 
, we must make the checks outlined above.

Case 2bi. 
.

We build 
 by first letting it contain all vertices of 
 and, if 
 is non-empty, one arbitrary vertex from the set 
. If 
 now has at least two vertices, then we are done since the only other vertices we could add are in T, but then 
 would induce an odd T-cycle. If, however, 
 has fewer than two vertices, then we add up to two vertices from  subject to the constraints that 
 can only contain one vertex of 
 and cannot contain more than two vertices (else, again, we obtain an odd T-cycle). In this way we have made 
 as large as possible. As 
, we need only note that 
 contains no vertex of T, or has at most two vertices, to confirm that 
 will contain no odd T-cycle using a vertex of 
.

Case 2bii. 
 and 
 is a subset of 
.

By Claim 9, 
 is a clique. Hence, in this case, all the vertices of 
 belong to the same component of 
. As the components of 
 are isolated vertices, we have that 
 for some 
. As 
, we cannot, by Claim 11, add vertices from both 
 and 
 to 
. As we can only ever add one vertex from 
, we will instead add only vertices from 
. If  or 
, then we must let 
 contain only one vertex of 
 else 
 will induce an odd T-cycle. Otherwise, we let 
 contain all vertices of 
; there is at least one and so we cannot also add any vertex of 
 without 
 inducing an odd T-cycle. We note that we have made 
 as large as possible and that 
 either contains no vertex of T or contains only two vertices.

Case 2biii. 
 and 
 is not a subset of 
.

Again, by Claim 9, 
 is a clique. Hence, in this case, all the vertices of 
 belong to the same component of 
. We build 
 by first letting it contain all vertices of 
 and, if it is non-empty, one vertex from the set 
. If 
 now has at least two vertices, then we are done since we cannot add vertices of T. If 
 has fewer than two vertices, then we add vertices from  noting again that 
 can only contain one vertex of 
 and cannot now contain more than two vertices. When we add these vertices, we give preference to vertices from 
 and so only add a vertex from 
 if 
.

Again we have made 
 as large as possible. If 
 contains vertices from each of 
 and 
, then note that, by Claim 11, X will contain no vertices from 
. Thus these vertices are added to 
 and we will never add one of them to X. Similarly, suppose that 
 and 
: then X can contain no vertex from 
 that is in T and, moreover, can contain none at all from 
 if one of the vertices of 
 is in T. Again we add vertices to 
 as needed. Note that, considering how 
 was built, we cannot avoid this without choosing a smaller 
: if it was possible to find a 
 of the same size without using a vertex of 
 or in T we would have done so. As at most one of the vertices we move to 
 could ever have been added to 
, there is no cost to this.

It only remains to note that if 
 contains a vertex of 
, then it contains no vertex of T unless it contains only two vertices, and that if 
, then, for each neighbour 
 of 
 that has not been placed in 
, the set 
 contains no vertex of T unless it has only two vertices.

We have completed the choice of each 
. It now only remains to note that we can build X by choosing one arbitrary vertex from each component of 
 excluding, of course, those vertices that we moved to 
 in the process of finding each 
 (recall that we cannot add two vertices from a component of 
 due to Claim 12).

This completes our proof. We conclude that we found a largest T-bipartite subgraph 
 in polynomial time. Hence, 
 is a smallest odd T-cycle transversal of G. □

We are now ready to prove our almost-complete classification.

Theorem 4 (restated). Let H be a graph with 
 for all . Then Subset Odd Cycle Transversal on H-free graphs is polynomial-time solvable if 
 or 
 for some , and is NP-complete otherwise.

Proof

If H has a cycle or claw, we use Theorem 2. The cases 
 and 
 follow from Theorem 7, Theorem 8, respectively. The remaining case, where 
, follows from Theorem 9. □

6. Conclusions
We gave almost-complete classifications of the complexity of Subset Feedback Vertex Set and Subset Odd Cycle Transversal for H-free graphs. The only open case in each classification is when 
 for some , which is also open for Feedback Vertex Set and Odd Cycle Transversal for H-free graphs. Our proof techniques for 
 do not carry over and new structural insights are needed in order to solve the missing cases.

Open Problem 1

Determine the complexity of (Subset) Feedback Vertex Set and (Subset) Odd Cycle Transversal for 
-free graphs, when .

One of the main obstacles to solving Open Problem 1 is the case where there is a solution S such that  is a forest that contains (many) arbitrarily large stars. In particular, Lemma 6 no longer holds.

The vertex-weighted version of Subset Feedback Vertex Set has also been studied for H-free graphs. Papadopoulos and Tzimas [36] proved that Weighted Subset Feedback Vertex Set is polynomial-time solvable for 
-free graphs but NP-complete for 
-free graphs (in contrast to the unweighted version). Bergougnoux et al. [3] recently proved that Weighted Subset Feedback Vertex Set is polynomial-time solvable for every class of bounded mim-width and thus for 
-free graphs. Combining these results with Theorem 3 and two recent results, polynomial-time solvable cases when 
 [10], leaves three gaps (see also [10]).

Open Problem 2

Determine the complexity of Weighted Subset Feedback Vertex Set for H-free graphs when 
.

For the weighted variant, a vertex in T may have a large weight that prevents it from being deleted in any solution; in particular, Lemma 2, which plays a crucial role in our proofs, no longer holds.

As shown in [10], the NP-completeness proof given by Papadopoulos and Tzimas for Weighted Subset Feedback Vertex Set on 
-free graphs [36] can also be used to show that the weighted version of Subset Odd Cycle Transversal is NP-complete for 
-free graphs. In the same paper [10] it is proven that Weighted Subset Odd Cycle Transversal is polynomial-time solvable for H-free graphs if 
. Combining these results with Theorem 4 leads to the same three open cases as listed in Open Problem 2.

Open Problem 3

Determine the complexity of Weighted Subset Odd Cycle Transversal for H-free graphs when 
.

As previously mentioned, Bergougnoux et al. [3] gave an XP algorithm for Weighted Subset Feedback Vertex Set parameterized by mim-width.

Open Problem 4

Does there exist an XP algorithm for Subset Odd Cycle Transversal and Weighted Subset Odd Cycle Transversal parameterized by mim-width?

We also introduced the Subset Vertex Cover problem and showed that this problem is polynomial-time solvable on 
-free graphs for every . Lokshtanov et al. [31] proved that Vertex Cover is polynomial-time solvable for 
-free graphs. Grzesik et al. [21] extended this result to 
-free graphs.

Open Problem 5

Determine the complexity of Subset Vertex Cover for 
-free graphs.

Open Problem 6

Determine whether there exists an integer  such that Subset Vertex Cover is NP-complete for 
-free graphs.

By Poljak's construction [37], Vertex Cover is NP-complete for H-free graphs if H has a cycle. However, Vertex Cover becomes polynomial-time solvable on 
-free graphs [32], [38]. We did not research the complexity of Subset Vertex Cover on 
-free graphs and also leave this as an open problem for future work.

Open Problem 7

Determine the complexity of Subset Vertex Cover for 
-free graphs.

Finally, several related transversal problems have been studied but not yet for H-free graphs. For example, the parameterized complexity of Even Cycle Transversal and Subset Even Cycle Transversal has been addressed in [33] and [27], respectively. Moreover, several variants for transversal problems have been studied for H-free graphs, but not the subset version: for example, Connected Vertex Cover, Connected Feedback Vertex Set and Connected Odd Cycle Transversal, and also for Independent Feedback Vertex Set and Independent Odd Cycle Transversal; see [5], [11], [17], [26] for a number of recent results. It would be interesting to solve the subset versions of these transversal problems for H-free graphs and to determine the connections amongst all these problems in a more general framework.