Abstract
Sorting permutations with various operations has applications in macro rearrangement of genes in a genome and the design of computer interconnection networks. Block-interchange is a powerful operation that swaps two substrings that are called as blocks in literature, in a given permutation. When the blocks are restricted to be adjacent then one obtains a well studied operation: transposition. We call either a prefix or a suffix as an extreme. Restricting one of the swapped blocks to be an extreme in block-interchange operation yields a prefix or a suffix block-interchange respectively, the two types of extreme block-interchanges. For prefix block-interchange operation over permutations we design: (i) an optimum algorithm to sort reverse permutation, Rn, in n/2 moves, (ii) a simple 2-approximation algorithm, and (iii) for permutations with O(1) cycles, a 4/3 approximation algorithm. Due to symmetry, these results apply to suffix block-interchange operation also.

Keywords
Block-interchange
Prefix block-interchange
Permutation cycle graph
Approximation algorithms

1. Introduction
Sorting permutations with various operations has applications in genetics and interconnection networks [1], [2]. A substring 
 is a block of the permutation π. Block-interchange is an operation that swaps two blocks in a given permutation. If the blocks are restricted to be adjacent then one obtains the transposition operation. Various operations were studied under the biological model of parsimony, i.e. the principle which states that a genome α that has been transformed into another genome β using an operation ψ does so with a generator sequence of ψ with the minimum cardinality. This problem corresponds to transforming a permutation π into another permutation γ with minimum length generator sequence of ψ. When the number of generators of ψ exceeds one then this problem is intractable in general [3], [4]. We call either a prefix or a suffix as an extreme. Block-interchange operation can restrict one of the swapped block to be an extreme, i.e. either a prefix or a suffix, yielding a prefix or a suffix block-interchange respectively. We call these operations as extreme block-interchanges.

The hardness of transforming permutations into one another in the minimum number of moves under various operations has been studied. Some of these problems remain open. For most of the operations, the corresponding problems on strings are shown to be NP-Complete [9]. Christie showed that the block-interchange distance problem for permutations can be computed in polynomial time [5]. It is shown to be NP-Complete [9] for strings even if the strings are defined on as few as three symbols, the problem was called as TLP. Chou et al. showed that the prefix block-interchange distance on strings is NP-complete [7]. Feng and Zhu designed faster algorithms for sorting by block interchanges [13]. Bona and Flynn [15] studied the average number of block interchanges needed to sort a permutation in 
.

Prefix reversals and prefix transpositions are also well studied. The best known upper bound of prefix reversals on permutations is  [8]. The upper bound of 
 [10] for sorting permutations with prefix transpositions is recently improved to 
 [12]. Recently, Labarre designed a 2 approximation algorithm to sort permutations with prefix block-interchanges [14]. Our algorithm for the same is simpler. Further, for a class of permutations, we give a 4/3 approximation algorithm to sort permutations with prefix block-interchanges which has a worst case approximation ratio of two for any permutation.

Following are our results for sorting a permutation with a prefix block-interchanges: (i) a 2-approximation algorithm, (ii) a 4/3 approximation algorithm for permutations with  cycles; for a general permutation this algorithm has a worst case approximation ratio of 2, and (iii) an exact algorithm to sort the reverse permutation 
. Due to symmetry, these results apply to the suffix block-interchange operation.

2. Preliminaries
We define permutations over the alphabet ; 
 is the symmetric group denoting all permutations over the alphabet. 
 is the identity permutation, and 
 is the reverse permutation. A prefix block-interchange denoted by  acting on a permutation 
 exchanges two intervals in π defined by the positions  and . The resultant permutation created by β is 
. Sorting by prefix block-interchange problem is to find the shortest sequence of prefix block-interchanges that transforms any given permutation into 
. Cycle graph [16] of a permutation π, denoted by , is a powerful graph model of permutations that has been used to produce various results for several rearrangement operations. In this article, the cycle graph is used to design algorithms. A review of cycle graph is given in section 2.1.

2.1. The cycle graph
The cycle graph , of a permutation is a directed, edge coloured graph. For a given permutation 
,  is constructed from its linear extension (by adding imaginary 
 and 
). For each element 
, a vertex labelled 
 is added to the cycle graph. The vertices are connected by two types of directed edges. For all  a black edge connects 
 to 
. Likewise, for all  a grey edge connects 
 to 
. Fig. 1 shows an example. In the figure, the black edges are shown as horizontal edges and grey edges are shown as arcs.

Fig. 1
Download : Download high-res image (14KB)
Download : Download full-size image
Fig. 1. Cycle graph, G(π) of the permutation π = (3,2,5,4,1).

A path in  that starts from a given edge (WLOG, say a black edge) and proceeds by alternatively selecting grey and black edges, forms a unique cycle called an alternating cycle, or simply a cycle.  can be uniquely decomposed into multiple alternating cycles. Each cycle is represented by cycle notation  [6]. For labeling cycles, the black edges in  are labelled with positive integers in the increasing order from left to right. Then the cycles of  are represented using the labels of the edges in it. The cycle notation  of a cycle c starts with any black edge in the cycle and includes the edges in the order in which they are visited in the cycle. The canonical cycle notation,  is the cycle notation that starts with smallest black edge in . For example, the canonical cycle notation of the two cycles in Fig. 2 are 
 and 
. The cycle graphs in Fig. 1 and Fig. 2 are same. The permutation elements are hidden in Fig. 2 to emphasise the labeling of black edges and to improve the readability. Also, since the direction of the black edges is always fixed (from right to left), cycle graph diagrams typically do not show the directions of either black or grey edges.

Fig. 2
Download : Download high-res image (13KB)
Download : Download full-size image
Fig. 2. G(π) of the permutation π = (3,2,5,4,1) with black edges labelled.

The cycle that contains the black edge 1 is called the prefix cycle. In Fig. 2, the cycle 
 is the prefix cycle. The number of black edges in a cycle c defines its length, denoted by κ. A cycle with  is called a unit cycle and a cycle  is called a non-unit cycle. The odd/even parity of the κ defines the parity of the cycle.

A grey edge directed from left to right is called an oriented grey edge, and a grey edge directed from right to left is called an unoriented grey edge. The first grey edge in the  is always oriented and the last grey edge is always unoriented, provided . A cycle containing at least two oriented grey edges is called an oriented cycle and a cycle containing only one oriented grey edge (i.e. the first grey edge) is called an unoriented cycle. In the Fig. 2, the cycle 
 is unoriented and the cycle 
 is oriented. For the problem of sorting permutations by transpositions, Christie called an odd cycle as super oriented if it admits a 2-transposition and at least one of the resultant cycle also admits a 2-transposition [5]. Recently [11] characterized super oriented cycles in permutations.

Let  denote the number of cycles in the cycle graph . A prefix block-interchange operation β either increases or decreases the number of cycles in . The change in the number of cycles due to β is denoted by . The only permutation with  cycles in 
 is the identity permutation. So, in terms of the cycles, sorting a permutation π by prefix block-interchange is to increase the number of cycles in  to  from .

Lemma 1

[5] It is impossible to increase  by more than 2 with a single block-interchange.

A prefix block-interchange (a move henceforth) that increases the number of cycles by 2 is called a 2-move and a move that does not change the number of cycles is a 0-move. A move  can act on the edges of either 1, or 2, or 3, or 4 cycles in . If β acts on the four edges  and l of a single prefix cycle 
, then β either splits c into three cycles () or it does not split the cycle c at all (). A move β acting on two cycles either creates 4 new cycles () or it creates 2 new cycles (). A move β acting on three cycles either creates 3 new cycles () or it creates 1 new cycle ().
Lemma 2

[14] 

The prefix block-interchange distance of a given permutation π, i.e.  has been lower bounded as per the following inequality.
Theorem 1

[14] 
 

In the following section we identify the conditions for a move β to be a 2-move or a 0-move.
Lemma 3

A prefix block-interchange  acting on four edges  and l of the prefix cycle c is a 2-move if and only if the sequence [i j k l] is a subsequence of  and, either

1.

2.

3.

4.

Proof

Lemma 4

A prefix block-interchange  acting on three edges  and l of the prefix cycle c is a 2-move if and only if the sequence [i j l] is a subsequence of  and .

Corollary 1

An oriented cycle at prefix admits a 2-move.

Two pairs of edges  and  intersect if . Two cycles intersect if they have at least one pair of intersecting edges.
Lemma 5

A prefix block-interchange  acting on two cycles 
 and 
 such that 
 and 
, is a 2-move if and only if  and  intersects.

Corollary 2

An unoriented cycle at prefix admits a 2-move.

Corollary 3

There exits no 2-move that acts on a unit cycle and another cycle.

Lemma 6

[14] An even cycle at prefix admits a 2-move.

Proof

If the even cycle is oriented, then a 2-transposition is possible due to Lemma 4. Otherwise the cycle is unoriented and it must be intersected. Then a 2-move is possible due to Lemma 5. □

Lemma 7

If a unit cycle exists at prefix of an unsorted permutation, then a non-unit cycle can be created at the prefix using a 0-move.

Proof

Consider a unit cycle  at prefix. If π is not sorted, then there exists a non-unit cycle 
 in . The edges j and k are the first two edges in 
 that are joined by an oriented grey edge. The move  creates a non-unit cycle 
 at prefix and a unit cycle k at some other location. See the figure below.



Download : Download high-res image (12KB)
Download : Download full-size image
 □
2.2. A simple 2-approximation algorithm
Theorem 2

Proof

If the prefix cycle has an even length, then Lemma 6 guarantees a 2-move. If the prefix cycle has a odd length , then Corollary 1, Corollary 2 guarantee a 2-move. If the prefix cycle is a unit cycle, then a non-unit cycle can be created at the prefix using a 0-move (Lemma 7). Thus, it is clear that in the worst case there exists a sequence of two moves, in which first move is a 0-move and the second move is a 2-move. Hence the algorithm is a 2-approximation algorithm. □

2.3. An exact algorithm for sorting 
Recall that 
. Let  be the labels of black edges in 

Theorem 3

Proof

Consider the 
. The move 
 on π fixes the elements 
 and 
 creating two unit cycles at the end. The resultant permutation is 
. The sub permutation  is the reverse permutation of 
, and is formed at prefix. We can apply a move 
 that fixes the elements 
 and 
. In a similar way, the move 
 fixes the elements  and , where . Thus, each move fixes two elements in the permutation and hence the permutation will be sorted in  moves. The algorithm is optimal since each of the moves 
 to 
 creates two additional cycles and hence they are 2-moves. □

3. A 4/3 approximation algorithm
A cycle c is said to be  if its length  and  otherwise. The number of 2-moves depends on the structure and length of the cycle. A cycle with length  can have  2-moves. There are permutations with  cycles that can be sorted solely with 2-moves. However, the optimum sorting sequence starts with a particular 2-move. No method in P (polynomial time) is known to choose this particular 2-move. Thus, no method is known for sorting permutations with  cycles in polynomial time. In this section we design a 4/3 approximation algorithm for permutations with  cycles. For a general permutation, the approximation ratio is better than or equal to two.

Lemma 8

A long cycle at prefix admits a sequence of two 2-moves.

We define oriented and unoriented intervals in a cycle. Let  be an interval of edges that start with x and ends with y in the cycle notation . If  then there is at least one oriented grey edge in the interval and hence it is an oriented interval and otherwise it is an unoriented interval.
Proof of Lemma 8

A long even cycle will have at least 4 edges. Let  be the long even cycle at prefix. Consider an oriented interval  in c such that x starts after the second edge in . If there exists such an interval then  is a 2-move that doesn't create a unit cycle at prefix. Also, the move  creates either an even cycle, or an oriented cycle, or an unoriented cycle at prefix. In all these cases, the second 2-move is possible due to Lemma 6, or Corollary 1, or Corollary 2, respectively. Out of the six orderings of the three edges  and l, three don't have such an interval. They are,

1.

2.

3.

In each of these cases, we show that a 2-move that creates a non-unit cycle at prefix exists.
Case 1

. In this case the move  creates a non-unit cycle at prefix. The cycle created at prefix can be either an even cycle, or an oriented cycle, or an unoriented cycle. In all these cases, the second 2-move is possible due to lemma 6, or corollary 1, or corollary 2, respectively.

Case 2

. Here, the interval  is unoriented and it must be intersected. Let x be the black edge that intersects . We need to consider two sub cases. (1) x is an edge from the same cycle, and (2) x is an edge from another cycle.

Subcase 2.1. The unoriented interval  is intersected by an edge x from the same cycle. The edge x either belong to the path (1)  or (2)  or (3)  or (4) . In (1), the transposition  is a 2-move that form a cycle at prefix with atleast 2 edges x and j. Similarly in (2), the transposition  is a 2-move that form a cycle at prefix with at least 2 edges x and j. In (3), the transposition  is a 2-move that creates a prefix cycle with at least three edges  and k. In (4), in addition to x, the path  must contain another edge y such that . Otherwise the unoriented interval  is not intersected. Then, the transposition  is a 2-move that creates a cycle with at least three edges  and k. Thus, in all cases a non-unit cycle can be formed and this guarantees the second 2-move.

Subcase 2.2. The unoriented interval  is intersected by a pair  from another cycle. WLOG, assume that the edge x is between l and i. That is, . The following diagrams show the first 2-move for all possible positions of y. Also, it can be observed that the prefix cycle created by the first 2-move is a non-unit cycle in each case, and hence the second 2-move is guaranteed.


Download : Download high-res image (52KB)
Download : Download full-size image
Case 3

. There are three unoriented intervals and all of them must be intersected. We consider the left most unoriented interval  and show that there exists a 2-move that creates a non-unit cycle at prefix if (1)  is intersected by an edge from same cycle or (2)  is intersected by an edge from another cycle.

Subcase 3.1. Similar to the subcase 2.1, we assume that the unoriented interval  is intersected by an edge x from the same cycle. The edge x either belong to the path (1).  or (2).  or (3)  or (4) . In (1) the subcase 2.1 applies. In (2) and (3) the transposition  is a 2-move that creates a non-unit cycle at prefix. In (4), the path  must contain one more edge y such that , otherwise  is not intersected. Then, the transposition  is a 2-move that creates a cycle with atleast 3 edges  and k.

Subcase 3.2.


Download : Download high-res image (54KB)
Download : Download full-size image
 □
Lemma 8 proves the existence of two consecutive 2-moves for a long cycle at prefix. However, it doesn't have any control on the length of cycles formed except for first 2-move where it creates a non-unit cycle at prefix. This result can be strengthened by controlling the length of the cycles formed. The following Lemma proves that a long cycle with length κ always admits a 2-move such that a cycle of length at least  is formed at the prefix.

Lemma 9

A long κ-cycle at prefix admits a 2-move that creates a -cycle at prefix, where .

Proof

Let  be the cycle notation of a long κ-cycle at prefix such that i and j are the first two black edges and, k and l are last two black edges. Since any long cycle has atleast four edges, such a selection is always possible. The black edge pairs ,  and  are connected by single grey edges respectively. For all six relative positions of the three edges  and l in , we show that c admits a 2-move that creates a -cycle at the prefix in the worst case. In the following diagrams, a dotted arc represents a path and a solid arc represents a single grey edge. For generality, letters are used instead of integers as the alphabet of the permutations where  etc.

Case 1

. The cycle c admits a 2-transposition  that creates a non-unit cycle at prefix and two unit cycles in . Since no other cycles are involved in the 2-move, the length of the prefix cycle is .


Download : Download high-res image (19KB)
Download : Download full-size image
Case 2

. In this case, the pattern formed by the four edges is shown below.


Download : Download high-res image (8KB)
Download : Download full-size image
The grey edge  is unoriented and hence it must be intersected. There are two cases to consider. (1).  is intersected by a grey edge  from the same cycle, and (2).  is intersected by a grey edge  from another cycle.
Subcase 2.1. The grey edge  is intersected by a grey edge  from the same cycle. Because of the way we selected the four edges , the black edges x and y belongs to the path from j to k. Including x and y, the cycle notation is . Note that the edges x and j can be same but y and k cannot be same, because if  there is no intersection. Thus, the position of y in  is such that  and that of x is such that,  or  or . The 2-move in each case is depicted below.


Download : Download high-res image (87KB)
Download : Download full-size image
In (a), (b), and (c) the 2-move creates a prefix cycle with length  and in (d) the 2-move creates a prefix cycle with length . Note that in all these cases,  since we need at least one additional edge to intersect . So even if case (d) applies, the length of prefix cycle formed will be at least 2.
Subcase 2.2. The grey edge  is intersected by a grey edge  from another cycle. WLOG, assume that  and the position of x in  can be such that , or , or . The 2-move in each case is shown below.


Download : Download high-res image (79KB)
Download : Download full-size image
Assume that the edges x and y belongs to a cycle 
 with length 
. In all of the above cases the 2-move splits 
 into one unit-cycle and one 
cycle. In (b) and (c), the 2-move splits the prefix cycle into a cycle (formed at the prefix) and a unit-cycle. In (a), the 2-move splits the prefix cycle into a cycle (formed at the prefix) and a unit cycle.
Case 3

. The cycle c admits a 2-transposition  that creates a non-unit cycle at prefix and two unit cycles in . Since no other cycles are involved, the length of the prefix cycle is .


Download : Download high-res image (21KB)
Download : Download full-size image
Case 4

. The cycle c admits a 2-transposition  that creates a non-unit cycle at prefix and two unit cycles in . Since no other cycles are involved, the length of the prefix cycle is .


Download : Download high-res image (21KB)
Download : Download full-size image
Case 5

. In this case, the pattern formed by the four edges is shown below.


Download : Download high-res image (8KB)
Download : Download full-size image
In this case the grey edge  is unoriented and hence it must be intersected. There are two cases to consider. (1).  is intersected by a grey edge  from the same cycle, and (2).  is intersected by a grey edge  from another cycle.
Subcase 5.1.  is intersected by a grey edge  from the same cycle. The two black edges x and y must be in the path form j to k. So, the cycle notation of c is . WLOG, assume that the position of y in  is such that , then the position of x is such that,  or  or . The 2-move in each case is depicted below.


Download : Download high-res image (91KB)
Download : Download full-size image
In all cases the 2-move creates a prefix cycle with length , and two unit cycles.
Subcase 5.2.  is intersected by a grey edge  from another cycle. WLOG, assume that  and the position of x in  can be such that , or , or . The 2-move in each case is shown below.


Download : Download high-res image (57KB)
Download : Download full-size image
In all cases the 2-move created a cycle of length  at the prefix. Let 
 be the length of the intersecting cycle. The 2-move also creates a cycle with length 
.
Case 6

. In this case the pattern formed by the four edges is shown below.


Download : Download high-res image (7KB)
Download : Download full-size image
In this case the grey edge  is unoriented and hence it must be intersected. There are two cases to consider. (1).  is intersected by a grey edge  from the same cycle, and (2).  is intersected by a grey edge  from another cycle.
Subcase 6.1.  is intersected by a grey edge  from the same cycle. The two black edges x and y must be in the path form j to k. So, the cycle notation of c is . WLOG, assume that the position of y in  is such that , then the position of x is such that,  or  or . The 2-move in each case is depicted below.


Download : Download high-res image (74KB)
Download : Download full-size image
In all cases the 2-move has created a cycle of length  at the prefix, and two unit cycles.
Subcase 6.2.  is intersected by a grey edge  from another cycle. WLOG, assume that  and the position of x in  can be such that , or , or . The 2-move in each case is shown below.


Download : Download high-res image (56KB)
Download : Download full-size image
In all cases the 2-move created a cycle of length  at the prefix. Let 
 be the length of the intersecting cycle. The 2-move also creates a cycle with length 
. □
3.1. 4/3 approximation algorithm
Theorem 4

Proof

Lemma 9 guarantees 2-moves while the prefix cycle has a length greater than one. Further, each move reduces the length of the resultant prefix cycle by at most 3. Let the length of the prefix cycle say C be k. Thus, we are guaranteed at least  2-moves before the prefix cycle is of unit length. Resulting in  cycles. In order to completely sort C we must create  more cycles. By employing Algorithm 1 (which is the bottom part of Algorithm 3) this can be accomplished in at most  moves, that is, we can increase the number cycles by at least two in two moves. Thus, in total we require  moves whereas the minimum number of moves in theory is  because one can increase the number of cycles by at most two per move. This yields an approximation ratio of . Clearly, this applies to each of the long cycles that exist at prefix. We process the cycles in a sequential manner. That is, after the first cycle is completely processed, we execute a 0-move to bring the subsequent cycle of non-unit length to prefix and so on. Thus, if the permutation consists of only O(1) cycles in total then  moves suffice to sort it. Thus, the approximation ratio is 4/3. □

Let the number of cycles in 
 be k. The length of the largest cycle say C is at least . Thus, the maximum number of moves required to sort C is  which is a 4/3 approximation. The rest of the permutation can be sorted with our 2 Approximation algorithm. Hence, overall we are guarantee an approximation ratio of two.

4. Conclusions
We design a simple 2-approximation algorithm for sorting a permutation with prefix block-interchanges. We design a 4/3 approximation algorithm for permutation with  cycles, which yields an approximation ratio of two or better for a permutation without restrictions. We design an optimum algorithm to sort 
 in n/2 moves. Due to symmetry, these results apply to suffix block-interchange also.