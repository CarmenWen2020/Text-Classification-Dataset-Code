We study the problem #INDSUB(𝛷) of counting all induced subgraphs of size k in a graph G that satisfy the property 𝛷. It is shown that, given any graph property 𝛷 that distinguishes independent sets from bicliques, #INDSUB(𝛷) is hard for the class #𝖶[𝟣], i.e., the parameterized counting equivalent of 𝖭𝖯. Under additional suitable density conditions on 𝛷, satisfied e.g. by non-trivial monotone properties on bipartite graphs, we strengthen #𝖶[𝟣]-hardness by establishing that #INDSUB(𝛷) cannot be solved in time 𝑓(𝑘)⋅𝑛𝑜(𝑘) for any computable function f, unless the Exponential Time Hypothesis fails. Finally, we observe that our results remain true even if the input graph G is restricted to be bipartite and counting is done modulo a fixed prime.

Introduction
The study of the computational complexity of counting problems was initiated by Valiant’s seminal work about the complexity of computing the permanent [24]. In contrast to a decision problem which requires to verify the existence of a solution, a counting problem asks to compute the number of solutions. Counting complexity theory is particularly interesting for problems whose decision versions are solvable efficiently but whose counting versions are intractable. One such example is the problem of finding/counting perfect matchings, whose decision version is solvable in polynomial time [10] and whose counting version is at least as hard as every problem in the Polynomial Hierarchy 𝖯𝖧 with respect to polynomial-time Turing reductions [23, 24]. In this work, we consider the following problem which was first introduced by Jerrum and Meeks [13]: Fix a graph property 𝛷, given a graph G and a positive integer k, compute the number of all induced subgraphs of G with k vertices that satisfy 𝛷. We denote this problem by #INDSUB(𝛷) and remark that, strictly speaking, #INDSUB(𝛷) is the unlabeled version of the problem 𝑝-#INDUCEDSUBGRAPHWITHPROPERTY(𝛷) as defined in [15, Section 1.3.1]. In particular, our properties only depend on the isomorphism type of a graph and not on any labeling of the vertices.

We study the parameterized complexity of #INDSUB(𝛷) depending on the property 𝛷. The underlying framework, known as parameterized counting complexity theory, was introduced independently by Flum and Grohe [11] and McCartin [18], and constitutes a hybrid of (classical) computational counting and parameterized complexity theory. Here, the method of parameterization allows us to perform a multivariate analysis of the complexity of #INDSUB(𝛷): Instead of the distinction between polynomial-time solvable and 𝖭𝖯-hard cases, we search for properties 𝛷 for which the problem is solvable in time 𝑓(𝑘)⋅𝑛𝑂(1), where n is the number of vertices of the graph and f can be any computable function. If this is the case, the problem is called fixed-parameter tractable. Unfortunately, the only known cases of 𝛷 for which #INDSUB(𝛷) is fixed-parameter tractable are trivial in the sense that there are only finitely many k such that 𝛷 is neither true nor false on the set of all graphs with k vertices. On the contrary, it is easy to see that #INDSUB(𝛷) is most likely not fixed-parameter tractable if 𝛷 encodes a problem whose decision version is already known to be hard. An example of the latter is the property of being a complete graph. In this case, the problem #INDSUB(𝛷) is identical to the problem of counting cliques of size k, for which even the decision version, that is, finding a clique of size k in a graph with n vertices, cannot be done in time 𝑓(𝑘)⋅𝑛𝑜(𝑘), unless the Exponential Time Hypothesis fails [5, 6].

The first non-trivial hardness result of #INDSUB(𝛷) was given by Jerrum and Meeks for 𝛷 the property of being connected [13]. Note that, in this case, the decision version of the problem can be solved efficiently as, on input G and k, one only has to decide whether there exists a connected component of G of size at least k. This result initiated a line of research in which Jerrum and Meeks proved fixed-parameter tractability of #INDSUB(𝛷) to be unlikely for the property of having an even (or odd) number of edges [15], for properties that induce low edge densities [14] and for properties that are closed under the addition of edges and whose (edge-)minimal elements have large treewidth [19]. More precisely, all of those results established hardness for the parameterized complexity class #𝖶[𝟣], which can be seen as the parameterized counting equivalent of 𝖭𝖯. In a recent breakthrough result [8], Curticapean, Dell and Marx have shown, that for every graph property 𝛷, the problem #INDSUB(𝛷) is either fixed-parameter tractable or hard for #𝖶[𝟣], that is, there are no cases of intermediate difficulty. On the downside, they did not provide an explicit criterion for #𝖶[𝟣]-hardness that allows to pin down the complexity of #INDSUB(𝛷), given a concrete property 𝛷.

However, combining the framework of [8] with tools from the “topological approach to evasiveness” by Kahn, Saks and Sturtevant [16], two of the authors of the current paper established #𝖶[𝟣]-hardness for a wide range of properties, including, for example, all non-trivial properties that are closed under the removal of edges and false on odd cycles [22]. Taken together, the above results suggest the following conjecture.

Conjecture 1
Let 𝛷 be a computable graph property satisfying that there are infinitely many positive integers k such that 𝛷 is neither true nor false on all graphs with k vertices. Then #INDSUB(𝛷) is #𝖶[𝟣]-hard.

Unfortunately, a proof of this conjecture seems to be a long way off. In this work however, building up on [8, 22], we introduce an algebraic approach that allows us to resolve the above conjecture in case of all non-trivial monotone properties on bipartite graphs. In particular, we obtain a matching lower bound under the Exponential Time Hypothesis.

Results and techniques  We call a graph property monotone if it closed under the removal of vertices and edges and edge-monotone if it is closed under the removal of edges only. Furthermore, we write 𝖨𝖲𝑘 for the graph consisting of k isolated vertices and 𝐾𝑡,𝑡 for the complete bipartite graph with t vertices on each side. Our main theorems read as follows.

Theorem 1
Let 𝛷 be a computable graph property and let  be the set of all prime powers t such that 𝛷(𝖨𝖲2𝑡)≠𝛷(𝐾𝑡,𝑡). If  is infinite then #INDSUB(𝛷) is #𝖶[𝟣] hard. If additionally  is dense then it cannot be solved in time 𝑓(𝑘)⋅𝑛𝑜(𝑘) for any computable function f unless ETH fails. This holds true even if the input graphs to #INDSUB(𝛷) are restricted to be bipartite.

In the previous theorem, a set  is dense if there exists a constant c such that for every 𝑚∈ℕ, there exists a 𝑘∈ such that 𝑚≤𝑘≤𝑐𝑚. While the hypotheses of Theorem 1 sound technical, the theorem applies in many situations. In particular, it is applicable to properties that are neither (edge-) monotone nor the complement thereof: Let 𝛷 be the property of being Eulerian. The graph 𝐾𝑡,𝑡 contains an Eulerian cycle if 𝑡=2𝑠 for 𝑠≥1. Hence we can apply Theorem 1 with ={2𝑠 | 𝑠≥1}, which is infinite and dense.

Corollary 1
Let 𝛷 be the property of being Eulerian. Then #INDSUB(𝛷) is #𝖶[𝟣]-hard and cannot be solved in time 𝑓(𝑘)⋅𝑛𝑜(𝑘) for any computable function f unless the ETH fails. This holds true even if the input graphs to #INDSUB(𝛷) are restricted to be bipartite.

In case 𝛷 is monotone, that is, closed under the removal of vertices and edges, a short argument implies that the set  from Theorem 1 is infinite if and only if 𝛷 and ¬𝛷 hold on infinitely many bipartite graphs. Thus we can state the criterion for hardness more concisely as follows.

Theorem 2
Let 𝛷 be a computable monotone graph property such that 𝛷 and ¬𝛷 hold on infinitely many bipartite graphs. Then #INDSUB(𝛷) is #𝖶[𝟣]-hard and cannot be solved in time 𝑓(𝑘)⋅𝑛𝑜(𝑘) for any computable function f unless the Exponential Time Hypothesis fails. This holds true even if the input graphs to #INDSUB(𝛷) are restricted to be bipartite.

Let us illustrate further consequences of the previous theorems with respect to (edge-) monotone properties. First of all, most of the prior hardness results [13,14,15, 19, 22] are shown to hold in the restricted case of bipartite graphs. We provide three examples:

Corollary 2
The problem #INDSUB(𝛷), restricted to bipartite input graphs, is #𝖶[𝟣]-hard and cannot be solved in time 𝑓(𝑘)⋅|𝑉(𝐺)|𝑜(𝑘) for any computable function f unless ETH fails, if 𝛷 is one of the properties of being disconnected, planar or non-hamiltonian.

One example of a monotone property 𝛷 for which the complexity of #INDSUB(𝛷) was unknown, even for general graphs, is given by the following corollary of Theorem 2.

Corollary 3
Let F be a fixed bipartite graph with at least one edge and define 𝛷(𝐺)=1 if G does not contain a subgraph isomorphic to F. Then #INDSUB(𝛷) is #𝖶[𝟣]-hard and cannot be solved in time 𝑓(𝑘)⋅|𝑉(𝐺)|𝑜(𝑘) for any computable function f unless ETH fails. This holds true even if the input graphs of #INDSUB(𝛷) are restricted to be bipartite.

As the number of induced subgraphs of size k that satisfy 𝛷 equals (|𝑉(𝐺)|𝑘) minus the number of induced subgraphs of size k that satisfy ¬𝛷, all of the previous result remain true for the complementary properties ¬𝛷.

In proving the previous theorems we build up on the approach in [8, 22], where it was shown that, given a graph property 𝛷 and a positive integer k, the number of induced subgraphs of size k in a graph G that satisfy 𝛷 can equivalently be expressed as the following sum over all (isomorphism types of) graphs H:

∑𝐻𝑎𝛷(𝐻)⋅#𝖧𝗈𝗆(𝐻→𝐺),
(1)
where 𝑎𝛷 is a function from graphs to integers with finite support and, furthermore, #𝖧𝗈𝗆(𝐻→𝐺) is the number of graph homomorphisms from H to G. It is known that computing a linear combination of homomorphism numbers, as in the above expression, is precisely as hard as computing its hardest term with a non-zero coefficient ( [8], also implicitly proved in [4]). We refer to this property as complexity monotonicity. In [22] two of the authors of the current paper used a topological approach to analyze the coefficient 𝑎𝛷(𝐾𝑘) of the complete graph on k vertices. If this coefficient is non-zero then complexity monotonicity implies that computing the number of induced subgraphs of size k in a graph G that satisfy 𝛷 is at least as hard as computing the number #𝖧𝗈𝗆(𝐾𝑘→𝐺). This, in turn, is equivalent to computing the number of cliques of size k in G, the canonical #𝖶[𝟣]-complete problem [11]. While this approach led to hardness proofs for a wide range of properties 𝛷, it seems that resolving Conjecture 1, even restricted to monotone properties, requires a significant number of new ideas. Without going too much into the detailsFootnote1 of [22], our analysis of 𝑎𝛷(𝐾𝑘) is complicated by the fact that the number of edges of the complete graph on 𝑘≥4 vertices is not a prime power. In this work, we hence focus on the coefficient of 𝑎𝛷(𝐻) for graphs H that have a prime power number of edges and for which computing #𝖧𝗈𝗆(𝐻→𝐺) is hard. One example of such graphs is the biclique 𝐾𝑡,𝑡 for some prime power t. Here a biclique 𝐾𝑡,𝑡, also called a complete bipartite graph, has t vertices on each side and contains every edge from a vertex on the left side to a vertex to the right side. Hence the number of edges is 𝑡2 which is a prime power if t is.

In analyzing the coefficient 𝑎𝛷(𝐾𝑡,𝑡) of the complete bipartite graph, we invoke the results of Rivest and Vuillemin [21] who considered transitive boolean functions over a domain of prime power cardinality to resolve the asymptotic version of what is known as Karp’s evasiveness conjecture (we recommend Miller’s survey [20] for an excellent overview).

Given a property 𝛷 and a graph H, the alternating enumerator of 𝛷 and H is defined to be

𝜒̂ (𝛷,𝐻):=∑𝑆⊆𝐸(𝐻)𝛷(𝐻[𝑆])⋅(−1)#𝑆,
where H[S] is the graph with vertices V(H) and edges S. Roughly speaking, it will turn out that the value of 𝑎𝛷(𝐻) is closely related to 𝜒̂ (𝛷,𝐻). We furthermore point out that, in case 𝛷 is closed under the removal of edges, the alternating enumerator 𝜒̂ (𝛷,𝐻) equals what is called the reduced Euler characteristic of the simplicial complex on E(H) associated to 𝛷 [20, 22]. In Sect. 3 we study the alternating enumerator in case of edge-transitive graphs, that is, graphs whose automorphism groups act transitively on the set of edges. We give a self-contained proof of the following fact, which implicitly follows from [21].

Lemma 1
Let 𝛷 be a graph property and let H be an edge-transitive graph with 𝑝ℓ edges such that p is a prime and 𝛷(𝐻[∅])≠𝛷(𝐻). Then it holds that 𝜒̂ (𝛷,𝐻)=(±1)mod𝑝.

Observe that Lemma 1 provides a strong motivation for the study of edge-transitive graphs with a prime power number of edges: Following the aforementioned strategy, we will be able to show that counting the number of induced subgraphs of size k in a graph G that satisfy 𝛷 is at least as hard as counting homomorphisms from any edge-transitive graph H with k vertices and a prime-power number of edges that satisfies 𝛷(𝐻[∅])≠𝛷(𝐻). Ultimately, we will then obtain intractability of #INDSUB(𝛷) by relying on the complexity classification for counting homomorphisms due to Dalmau and Jonsson [9].

In the second part of Sect. 3, we will thus fully classify those graphs as subgraphs of bipartite graphs or vertex-transitive subgraphs of wreath graphs; consult Sect. 3 for the formal definitions. The proof of the following theorem, which might be of independent interest, relies on a non-trivial application of Sylow’s theorems.

Theorem 3
Let G be a connected edge-transitive graph with 𝑝𝑡 edges for some prime p and positive integer t. Then either G is bipartite or G is vertex-transitive and can be obtained from the wreath graph 𝑊𝑝𝑘 for 𝑘≥1 by removing edges (or both).

With the analysis of 𝜒̂  and edge-transitive graphs completed, we turn to the reduction from counting homomorphisms in Sect. 4. More precisely, given a class  of edge-transitive graphs with a prime power number of edges and a graph property 𝛷 such that for every 𝐻∈ we have that 𝛷(𝐻[∅])≠𝛷(𝐻), we construct a parameterized Turing reduction from #HOM() to #INDSUB(𝛷). Here, the problem #HOM() is defined as follows: Given as input a graph 𝐻∈ and a graph G, compute the number of homomorphisms from H to G. For technical reasons, we cannot immediately transform the number of induced subgraphs that satisfy 𝛷 to a linear combination of homomorphism numbers as in Eq. (1). We solve this technical issue by introducing color-prescribed variants of those problems in an intermediate step. In this context we consider H-colored graphs. Recall that a graph G is H-colored if it comes with a homomorphism c from G to H. A homomorphism from H to G is then called color-prescribed if it maps every vertex v of H to a vertex u of G satisfying that 𝑐(𝑢)=𝑣. We demonstrate that, given an H-colored graph G and oracle access to #INDSUB(𝛷), the following linear combination can be computed in time 𝑓(|𝑉(𝐻)|)⋅|𝑉(𝐺)|𝑂(1).

∑𝑆⊆𝐸(𝐻)𝑎̂ 𝛷(𝑆)⋅#𝖼𝗉-𝖧𝗈𝗆(𝐻[𝑆]→𝐻𝐺).
(2)
Here 𝖼𝗉-𝖧𝗈𝗆(𝐻[𝑆]→𝐻𝐺) denotes the set of color-prescribed homomorphisms from H[S] to G and 𝑎̂ 𝛷 is a function of finite support only depending in 𝛷. In particular, 𝑎̂ 𝛷(𝐸(𝐻)) and 𝜒̂ (𝛷,𝐻) are proved to agree up to a factor of −1. Finally, we establish complexity monotonicity for linear combinations of color-prescribed homomorphisms as in Eq. (2), which in combination with Lemma 1 yields the desired reduction.

Combining the previous results, we invoke the reduction on graph properties that are non-trivial on bipartite graphs and prove Theorems 1 and 2, in Sect. 5. Furthermore, we illustrate in the Sect. 6 that our algebraic approach readily extends to modular counting by proving that both, Theorems 1 and 2 remain true in case counting is done modulo a fixed prime.

Preliminaries
Given a positive integer k, we write [k] for the set {1,…,𝑘} and given a set A we write (𝐴𝑘) for the set of all subsets of size k of A. Furthermore, assuming that A is finite, we write #𝐴 or |A| for its cardinality. Given a function 𝑔:𝐴×𝐵→𝐶 and an element 𝑎∈𝐴, we write 𝑔(𝑎,⋆) for the function which maps 𝑏∈𝐵 to g(a, b).

Graph Theory
Graphs in this work are considered simple, undirected and without self-loops. More precisely, a graph G is a pair of a finite set V(G) of vertices and a symmetric and irreflexive relation 𝐸(𝐺)⊆𝑉(𝐺)2. If a graph H is obtained from G by deleting a set of edges and a set of vertices of G, including incident edges, then H is called a subgraph of G. Given a subset 𝑉̂  of V(G) we write 𝐺[𝑉̂ ] for the graph with vertices 𝑉̂  and edges 𝐸∩𝑉̂ 2. The resulting graph is called an induced subgraph of G. An edge-subgraph of a graph H is a graph obtained from H by deleting edges. Given a set 𝑆⊆𝐸(𝐻) we write H[S] for the edge-subgraph (V(H), S) of H.

Homomorphisms and embeddings A homomorphism from a graph H to a graph G is a mapping ℎ:𝑉(𝐻)→𝑉(𝐺) that preserves adjacencies. In other words, for every edge {𝑢,𝑣}∈𝐸(𝐻) it holds that {ℎ(𝑢),ℎ(𝑣)}∈𝐸(𝐺). We write 𝖧𝗈𝗆(𝐻→𝐺) for the set of all homomorphisms from H to G. A homomorphism inducing a bijection of vertices and satisfying {𝑢,𝑣}∈𝐸(𝐻) if and only if {𝑓(𝑢),𝑓(𝑣)}∈𝐸(𝐺) is called an isomorphism and we say that two graphs H and 𝐻̂  are isomorphic if there exists an isomorphism from H to 𝐻̂ . We write 𝖲𝗎𝖻(𝐻→𝐺) and 𝖨𝗇𝖽𝖲𝗎𝖻(𝐻→𝐺) for the sets of all subgraphs and induced subgraphs of G, respectively, that are isomorphic to H.

An isomorphism from a graph to itself is called an automorphism. The set of automorphisms of a graph, together with the operation of functional composition constitutes a group, called the automorphism group of a graph. Slightly abusing notation, we will write 𝖠𝗎𝗍(𝐻) for both the set of automorphisms of a graph H as well as for the automorphism group of H.

An embedding is an injective homomorphism and we write 𝖤𝗆𝖻(𝐻→𝐺) for the set of embeddings from H to G. If an embedding h from H to G additionally satisfies that {ℎ(𝑢),ℎ(𝑣)}∈𝐸(𝐺) implies {𝑢,𝑣}∈𝐸(𝐻), we call it a strong embedding. We write 𝖲𝗍𝗋𝖤𝗆𝖻(𝐻→𝐺) for the set of strong embeddings from H to G. Observe that the images of embeddings and strong embeddings from H to G are precisely the subgraphs and induced subgraphs of G that are isomorphic to H.

Colored variants Given graphs G and H, we say that G is H-colored if G comes with a homomorphism c from G to H, called an H-coloring. Note that, in particular, every edge-subgraph of H can be H-colored by the identity function on V(H), which is assumed to be the given coloring whenever we consider H-colored edge-subgraphs of H in this paper. Given an edge-subgraph F of H and a homomorphism h from F to a H-colored graph G, we say that h is color-prescribed if for all 𝑣∈𝑉(𝐹)=𝑉(𝐻) it holds that 𝑐(ℎ(𝑣))=𝑣. We write 𝖼𝗉-𝖧𝗈𝗆(𝐹→𝐻𝐺) for the set of all color-prescribed homomorphisms from F to G. 𝖼𝗉-𝖲𝗍𝗋𝖤𝗆𝖻(𝐹→𝐻𝐺) is defined similarly for color-prescribed strong embeddings. We point out that a definition of 𝖼𝗉-𝖤𝗆𝖻 is obsolete as every color-prescribed homomorphism is injective by definition and hence an embedding. Furthermore, we write 𝖼𝗉-𝖲𝗎𝖻(𝐹→𝐻𝐺) and 𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝐹→𝐻𝐺) for the sets of images of color-prescribed embeddings and strong embeddings from F to G, respectively. Elements of 𝖼𝗉-𝖲𝗎𝖻(𝐹→𝐻𝐺) and 𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝐹→𝐻𝐺) are referred to as color-prescribed subgraphs and induced subgraphs.Footnote2

Graph properties and the Alternating Enumerator  A graph property is defined to be a function 𝛷 from graphs to {0,1} such that for any pair of isomorphic graphs H and 𝐻̂  we have that 𝛷(𝐻)=𝛷(𝐻̂ ). Adapting the notation of Rivest and Vuillemin [21], we define the alternating enumerator of a property 𝛷 and a graph H to be the function

𝜒̂ (𝛷,𝐻):=∑𝑆⊆𝐸(𝐻)𝛷(𝐻[𝑆])⋅(−1)#𝑆.
A graph property 𝛷 is called edge-monotone if it is closed under the removal of edges. It is called monotone if it is closed under the removal of edges as well as vertices.Footnote3 Given a graph property 𝛷, a positive integer k and a graph G, we write 𝖨𝗇𝖽𝖲𝗎𝖻(𝛷,𝑘→𝐺) for the set of all induced subgraphs of size k of G that satisfy 𝛷. Furthermore, given a graph property 𝛷 and an H-colored graph G, we write 𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝛷→𝐻𝐺) for the set of all color-prescribed induced subgraphs of size |V(H)| in G that satisfy 𝛷. Observe that 𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝛷→𝐻𝐺) can be expressed as a (disjoint) union over edge-subgraphs of H satisfying 𝛷:

𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝛷→𝐻𝐺)=⋃˙𝑆∈𝐸(𝐻)𝛷(𝐻[𝑆])=1𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝐻[𝑆]→𝐻𝐺).
Parameterized Counting Complexity
The field of parameterized counting was introduced independently by McCartin [18] and Flum and Grohe [11] and constitutes a hybrid of classical computational counting and parameterized complexity theory. A parameterized counting problem is a pair of a function 𝑃:𝛴∗→ℕ and a computable parameterization 𝜅:𝛴∗→ℕ. It is called fixed-parameter tractable (FPT) if there exists a computable function f and a deterministic algorithm that computes P(x) in time 𝑓(𝜅(𝑥))⋅|𝑥|𝑂(1) for every 𝑥∈𝛴∗. A parameterized Turing reduction from (𝑃,𝜅) to (𝑃̂ ,𝜅̂ ) is a deterministic FPT algorithm with respect to 𝜅 that is given oracle access to 𝑃̂  and that on input x computes P(x) with the additional restriction that there exists a computable function g such that for any oracle query y it holds that 𝜅̂ (𝑦)≤𝑔(𝜅(𝑥)). We write (𝑃,𝜅)≤fptT(𝑃̂ ,𝜅̂ ) if a parameterized Turing reduction exists.

Given a graph G and a positive integer k, the parameterized counting problem #CLIQUE asks to compute the number of complete subgraphs of size k in G and is parameterized by k, that is 𝜅(𝐺,𝑘):=𝑘. It is complete for the class #𝖶[𝟣], which can be seen as a parameterized counting equivalent of 𝖭𝖯 [11]. Evidence for the fixed-parameter intractability of #𝖶[𝟣]-hard problems is given by the Exponential Time Hypothesis (ETH), which asserts that 3-SAT cannot be solvedFootnote4 in time 𝖾𝗑𝗉(𝑜(𝑚)) where m is the number of clauses of the input formula. Assuming ETH, #CLIQUE cannot be solved in time 𝑓(𝑘)⋅𝑛𝑜(𝑘) for any function f [5, 6] and hence #𝖶[𝟣]-hard problems are not fixed-parameter tractable.

Given a recursively enumerable class of graphs , the problem #HOM() asks, on input a graph 𝐻∈ and an arbitrary graph G, to compute the number #𝖧𝗈𝗆(𝐻→𝐺). Its parameterization is given by 𝜅(𝐻,𝐺):=|𝑉(𝐻)|. The problems #CP−HOM() and #CP−INDSUB() are defined similarly. Further, we define #CP−INDSUB(𝛷) to be the problem of, given a graph G that is H-colored for some graph H, computing #𝖼𝗉-𝖨𝗇𝖽𝖲𝗎𝖻(𝛷→𝐻𝐺) and parameterize it by 𝜅(𝐺):=|𝑉(𝐻)|—note that the H-coloring of G is part of the input and hence 𝜅 is well-defined. Finally, the problem #INDSUB(𝛷) asks, given a graph G and a positive integer k, to compute #𝖨𝗇𝖽𝖲𝗎𝖻(𝛷,𝑘→𝐺) and the parameterization is given by 𝜅(𝐺,𝑘):=𝑘.

Alternating Enumerators and p-edge-Transitive Graphs
In this part of the paper we will provide a rough exposition of the work of Rivest and Vuillemin [21] who studied transitive boolean functions to resolve the asymptotic version of Karp’s evasiveness conjecture. We will then apply their result to graphs H that are both edge-transitive and have 𝑝ℓ many edges for some prime p. This will enable us to conclude that the alternating enumerator of 𝛷 and H is (±1) modulo p whenever 𝛷(𝐻[∅])≠𝛷(𝐻). We start by introducing some required notions from algebraic graph theory.

The automorphism group of a graph H induces a group action on the edges of H, given by ℎ{𝑢,𝑣}:={ℎ(𝑢),ℎ(𝑣)}. A group action is transitive if there exists only one orbit and a graph H is called edge-transitive if the automorphism group action on the edges is transitive, that is, if for every pair of edges {𝑢,𝑣} and {𝑢̂ ,𝑣̂ } there exists an automorphism ℎ∈𝖠𝗎𝗍(𝐻) such that ℎ{𝑢,𝑣}={𝑢̂ ,𝑣̂ }. If additionally the number of edges of an edge-transitive graph is a prime power 𝑝ℓ we call the graph p-edge-transitive.

Lemma 1
Let 𝛷 be a graph property and let H be an edge-transitive graph with 𝑝ℓ edges such that p is a prime and 𝛷(𝐻[∅])≠𝛷(𝐻). Then it holds that 𝜒̂ (𝛷,𝐻)=(±1)mod𝑝.

Lemma 1 is implicitly proven in [21, Theorem 4.3], but for completeness we will include a short and self-contained proof, demonstrating a first application of the machinery of Sylow subgroups that we will need later.

For the proofs in this section, let us recall some key results from group theory. Given a prime number p, a finite group 𝛤′ is called a p-group if the order #𝛤′ is a power of p. The following is a well-known and central result from the theory of finite groups.

Theorem 4
(Sylow theorems) Let 𝛤 be a finite group of order #𝛤=𝑝𝑘𝑚 for a prime p and an integer 𝑚≥1 coprime to p. Then 𝛤 contains a subgroup 𝛤′ of order 𝑝𝑘. Moreover, every other subgroup 𝛤″ of 𝛤 of order 𝑝𝑘 is conjugate to 𝛤′, that is there exists 𝑔∈𝛤 with 𝛤″=𝑔𝛤′𝑔−1. In particular, the groups 𝛤′,𝛤″ are isomorphic (via the conjugation by g).

Finally, every subgroup 𝛤̃ ⊆𝛤 which is a p-group is actually contained in some conjugate 𝑔𝛤′𝑔−1 of the group 𝛤′.

A subgroup 𝛤′⊆𝛤 as above is called a p-Sylow subgroup of 𝛤.

The following result is a first important application of the Sylow theorems. It can be found as Exercise (E28) in [1]; we include a proof for completeness.

Lemma 2
Let 𝛤 be a finite group acting transitively on a set T such that #𝑇=𝑝ℓ for some ℓ≥0. Then the induced action of any p-Sylow subgroup 𝛤′⊆𝛤 on T is still transitive.

Proof
Let 𝑡0∈𝑇 be any element, then T is the orbit of 𝑡0 under 𝛤. Let Stab𝛤(𝑡0)={𝑔∈𝛤:𝑔𝑡0=𝑡0} be the stabilizer of 𝑡0 under the action of 𝛤. Then by the Orbit-Stabilizer theorem, we have

#𝛤=(#𝛤𝑡0)⋅(#Stab𝛤(𝑡0))=(#𝑇)⋅(#Stab𝛤(𝑡0)).
(3)
As in the Sylow theorems, let k, m be the unique nonnegative integers such that #𝛤=𝑝𝑘𝑚 with m not divisible by p and let 𝛤′⊆𝛤 be a p-Sylow subgroup of 𝛤, which is of order 𝑝𝑘. The stabilizer of 𝑡0 under the induced action of the subgroup 𝛤′⊆𝛤 is given by

Stab𝛤′(𝑡0)={𝑔∈𝛤′:𝑔𝑡0=𝑡0}=Stab𝛤(𝑡0)∩𝛤′.
Clearly this is a subgroup of the group 𝛤′ and by Lagrange’s theorem, the order of Stab𝛤′(𝑡0) divides the order 𝑝𝑘 of 𝛤′. Thus it is itself a power of p, say #Stab𝛤′(𝑡0)=𝑝𝑛.

On the other hand, Stab𝛤′(𝑡0) is also a subgroup of Stab𝛤(𝑡0). Inserting the order of 𝛤 and the size of T in Eq. (3) we obtain

𝑝𝑘𝑚=𝑝ℓ⋅(#Stab𝛤(𝑡0)),
(4)
and thus #Stab𝛤(𝑡0) can at most contain a factor of 𝑝𝑘−ℓ. Again, by Lagrange’s theorem, the order 𝑝𝑛 of the subgroup Stab𝛤′(𝑡0) divides the order of Stab𝛤(𝑡0) and thus 𝑛≤𝑘−ℓ. Finally, by the Orbit-Stabilizer theorem applied to the action of 𝛤′ on 𝑡0, we have

𝑝𝑘=#𝛤′=(#𝛤′𝑡0)⋅(#Stab𝛤′(𝑡0))=(#𝛤′𝑡0)⋅𝑝𝑛.
(5)
Thus, on the one hand we obtain #𝛤′𝑡0=𝑝𝑘−𝑛≥𝑝𝑘−(𝑘−ℓ)=𝑝ℓ. On the other hand we obtain 𝛤′𝑡0⊆𝑇 and thus #𝛤′𝑡0≤#𝑇=𝑝ℓ. Hence we have the equality #𝛤′𝑡0=𝑝ℓ=#𝑇 and thus 𝛤′𝑡0=𝑇. In other words, the action of 𝛤′ on T is transitive, finishing the proof. ◻

This result allows us to give a short proof of Lemma 1 above.

Proof of Lemma 1
Let 𝛤=𝖠𝗎𝗍(𝐻) be the automorphism group of the graph H, then by the assumption that H is edge-transitive, the action of 𝛤 on on the set E(H) of edges of H is transitive. Since #𝐸(𝐻)=𝑝ℓ for some ℓ≥0, we see that by Lemma 2 any p-Sylow subgroup 𝛤′⊆𝛤 still acts transitively on E(H). Now consider the sum

𝜒̂ (𝛷,𝐻)=∑𝑆⊆𝐸(𝐻)𝛷(𝐻[𝑆])⋅(−1)#𝑆.
The action of 𝛤′ on E(H) induces an action of 𝛤′ on the set of subsets (𝐸(𝐻)):={𝑆⊆𝐸(𝐻)} of E(H). Indeed, for 𝑆⊂𝐸(𝐻) and 𝑔∈𝛤′ we define 𝑔𝑆={𝑔𝑠:𝑠∈𝑆}. For this action, the set (𝐸(𝐻)) can be written as a disjoint union of the orbits 𝛤′𝑆0 of a set ⊆(𝐸(𝐻)) of representatives 𝑆0. (Recall that for a group action two orbits are either disjoint or equal.) This allows us to write the sum above as

𝜒̂ (𝛷,𝐻)=∑𝑆0∈∑𝑆∈𝛤′𝑆0𝛷(𝐻[𝑆])⋅(−1)#𝑆.
Until now we have just reordered the summands above, combining all summands for S in the same 𝛤′ orbit.

Now since all elements 𝑔∈𝛤′⊆𝖠𝗎𝗍(𝐻) act by graph automorphisms on H, we have that the graphs 𝐻[𝑔𝑆0] and 𝐻[𝑆0] are isomorphic, so in particular 𝛷(𝐻[𝑔𝑆0])=𝛷(𝐻[𝑆0]). Applying this to the formula for 𝜒̂ (𝛷,𝐻) above, we get

𝜒̂ (𝛷,𝐻)=∑𝑆0∈(#𝛤′𝑆0)⋅𝛷(𝐻[𝑆0])⋅(−1)#𝑆0.
(6)
Now by the Orbit-Stabilizer theorem, the size #𝛤′𝑆0 of the orbit of 𝑆0 divides the order 𝑝𝑘 of 𝛤′, so #𝛤′𝑆0 is itself a power of p. Further, unless 𝑆0⊆𝐸(𝐻) is invariant under 𝛤′, the size of its orbit #𝛤′𝑆0 is a positive power of p and thus congruent to 0 mod p. However, the only two sets 𝑆0⊆𝐸(𝐻) invariant under 𝛤′ are 𝑆0=∅ and 𝑆0=𝐸(𝐻): Indeed, assume that 𝑆0 is invariant under 𝛤′ and nonempty. Then 𝑆0 contains an element 𝑒0, and since 𝑆0 is 𝛤′-invariant, 𝑆0 also contains the entire orbit of 𝑒0 under 𝛤′. But since 𝛤′ acted transitively on E(H), 𝑆0 must equal the whole set E(H).

To summarize, when computing 𝜒̂ (𝛷,𝐻) modulo p all but two summands in the sum in Eq. (6) are congruent to 0. Hence, we can simplify Eq. (6) to

𝜒̂ (𝛷,𝐻)=𝛷(𝐻[∅])+𝛷(𝐻[𝐸(𝐻)])⋅(−1)#𝐸(𝐻)=𝛷(𝐻[∅])−𝛷(𝐻)mod𝑝.
Note that we use the fact that for 𝑝>2 we have that #𝐸(𝐻) is odd since it is a prime power and for 𝑝=2 we have −1=1 modulo p. Now, the condition 𝛷(𝐻[∅])≠𝛷(𝐻) exactly gives us 𝛷(𝐻[∅])−𝛷(𝐻)=±1mod𝑝. ◻

There are two main examples for p-edge-transitive graphs. The first one is the class of the complete, bipartite graphs 𝐾𝑝ℓ,𝑝𝑚 with ℓ,𝑚≥0. The graph 𝐾𝑝ℓ,𝑝𝑚 has 𝑝ℓ+𝑚 edges and the automorphism group clearly acts transitively on the edges of that graph. The second example is the class of wreath graphs 𝑊𝑝𝑘 for 𝑘≥1. The graph 𝑊𝑝𝑘 has 𝑝𝑘 vertices that can be decomposed in disjoint sets 𝑉0,…,𝑉𝑝−1 of order 𝑝𝑘−1 each, and edges {𝑣𝑖,𝑣𝑖+1} for each 𝑖=0,…,𝑝−1 and vertices 𝑣𝑖∈𝑉𝑖,𝑣𝑖+1∈𝑉𝑖+1 (where it is understood that 𝑉𝑝=𝑉0). Thus in total, 𝑊𝑝𝑘 has 𝑝2𝑘−1 edges, except for 𝑝=2 where it has 22𝑘−2 edges. The graph 𝑊𝑝𝑘 can be seen as the lexicographical product of a p-cycle with a graph consisting of 𝑝𝑘−1 disjoint vertices. For 𝑘=1 we exactly obtain the p-cycle. To see that 𝑊𝑝𝑘 is edge-transitive, we observe that on the one hand, for fixed i we can apply an arbitrary permutation on 𝑉𝑖 leaving the graph invariant. On the other hand, there exists a “rotational action” sending 𝑉𝑗 to 𝑉𝑗+1 for 𝑗=0,…,𝑝−1, which also leaves the graph invariant. Using these two types of automorphisms, we can map every edge to every other edge. Consider Fig. 1 for a visualization of the two main examples of p-edge-transitive graphs.

Fig. 1
figure 1
The two main examples for p-edge-transitive graphs: Complete bipartite graphs 𝐾𝑝ℓ,𝑝𝑚 with ℓ,𝑚≥0 (left) and wreath graphs 𝑊𝑝𝑘 for 𝑘≥1 (right)

Full size image
A graph G is called vertex-transitive if its automorphism group 𝖠𝗎𝗍(𝐺) acts transitively on its set of vertices V(G). The following result tells us that in a certain sense 𝐾𝑝𝑙,𝑝𝑚 and 𝑊𝑝𝑘 are the maximal p-edge-transitive graphs: note that a bipartite graph is a subgraph of a graph of the form 𝐾𝑝𝑙,𝑝𝑚 for some 𝑙,𝑚≥0.

Theorem 3
Let G be a connected edge-transitive graph with 𝑝𝑡 edges for some prime p and positive integer t. Then either G is bipartite or G is vertex-transitive and can be obtained from the wreath graph 𝑊𝑝𝑘 for 𝑘≥1 by removing edges (or both).

For the proof of Theorem 3, we will use the following well-known result about the relation between edge and vertex-transitivity [2, Proposition 15.1].

Lemma 3
Let G be a connected graph and let 𝛤⊆𝖠𝗎𝗍(𝐺) be a subgroup acting transitively on the set of edges E(G). Then either 𝛤 acts transitively on the set of vertices V(G) (and thus G is vertex-transitive) or G is bipartite (or both).

The proof from [2] carries over verbatim to the setting of the previous lemma, by replacing the full group 𝖠𝗎𝗍(𝐺) with the subgroup 𝛤.

Finally, before beginning the proof of Theorem 3 we recall some facts about the semidirect product of groups, since such products appear below. Given groups 𝛤1,𝛤2 and a group homomorphism 𝜎:𝛤2→𝖠𝗎𝗍(𝛤1), the semidirect product 𝛤1⋊𝛤2 is defined as the group on the underlying set 𝛤1×𝛤2 with group law

(𝑔1,ℎ1)⋅(𝑔2,ℎ2)=(𝑔1𝜎(ℎ1)(𝑔2),ℎ1ℎ2) for (𝑔1,ℎ1),(𝑔2,ℎ2)∈𝛤1×𝛤2.
The group 𝛤1⋊𝛤2 naturally contains 𝛤1,𝛤2 as the subgroups 𝛤1×{𝑒𝛤2} and {𝑒𝛤1}×𝛤2. Moreover, given a set X and actions of 𝛤1,𝛤2 on X such that

ℎ⋅(𝑔⋅𝑥)=𝜎(ℎ)(𝑔)⋅(ℎ⋅𝑥) for 𝑔∈𝛤1,ℎ∈𝛤2,𝑥∈𝑋
there is a well-defined action of 𝛤1⋊𝛤2 on X given by (𝑔,ℎ)⋅𝑥=𝑔⋅(ℎ⋅𝑥).

Proof of Theorem 3
Let G be a p-edge-transitive, non-bipartite graph. Then by Lemma 2 any p-Sylow subgroup 𝛤⊆𝖠𝗎𝗍(𝐺) still acts transitively on the edges E(G) of G. By Lemma 3, since G is not bipartite, the group 𝛤 acts transitively on the set of vertices V(G) (and thus G is also vertex-transitive).

We observe that in this case, by the Orbit-Stabilizer theorem, we have #𝑉(𝐺)=𝑝𝑘 for some 𝑘≥1. We claim that, in this case, G is an edge subgraph of 𝑊𝑝𝑘.

To see this, let us reformulate our situation slightly: We identify the vertex set V(G) with the set [𝑝𝑘]={1,…,𝑝𝑘}. Then we can canonically identify 𝖠𝗎𝗍(𝐺) as a subgroup of 𝑆𝑝𝑘, the symmetric group on [𝑝𝑘] (this is because a graph automorphism is uniquely determined by its action on the vertices of a graph). Inside 𝖠𝗎𝗍(𝐺) we have the subgroup 𝛤, which is a p-group. By the Sylow theorem, there exists a p-Sylow subgroup 𝛤′⊆𝑆𝑝𝑘 containing 𝛤.Footnote5 Since the action of 𝛤 is transitive on the set of edges E(G), we can obtain E(G) by starting with some edge 𝑒0={𝑣1,𝑣2}∈𝐸(𝐺) with 𝑣1,𝑣2∈[𝑝𝑘] and taking its orbit {{𝑔𝑣1,𝑔𝑣2}:𝑔∈𝛤}=𝐸(𝐺). But note that by instead taking the orbit of 𝑒0 under 𝛤′⊆𝑆𝑝𝑘 we get at least this set of edges and maybe more. Denote by 𝐺′ the graph with vertices [𝑝𝑘] and edges {{𝑔𝑣1,𝑔𝑣2}:𝑔∈𝛤′}. We claim that 𝐺′≅𝑊𝑝𝑘.

To show this we will explicitly identify the p-Sylow subgroup 𝛤′⊆𝑆𝑝𝑘 (recall that by the Sylow theorem it is unique up to conjugation, that is reordering of the elements of [𝑝𝑘]).

First note that 𝑆𝑝𝑘 has (𝑝𝑘)! elements. Inductively one sees that the highest power of p appearing in this number is 𝑝𝑒(𝑘) for 𝑒(𝑘)=𝑝𝑘−1+𝑝𝑘−2+…+𝑝+1. We will inductively construct a subgroup 𝛤(𝑝,𝑘) of 𝑆𝑝𝑘 with 𝑝𝑒(𝑘) elements, which then is a p-Sylow subgroup. We note that a description of such a p-Sylow subgroup is given in [25].

For 𝑘=1 we have 𝑒(𝑘)=1 and a p-Sylow subgroup 𝛤(𝑝,1)⊆𝑆𝑝 is generated by a cyclic permutation 1↦2,2↦3,…,𝑝↦1 of the elements of [p]. The group 𝛤(𝑝,1) is isomorphic to the cyclic group ℤ/𝑝ℤ.

Now assume we constructed 𝛤(𝑝,𝑘−1) for some 𝑘≥2, then we first note that a product of p copies ∏𝑝−1𝑖=0𝛤(𝑝,𝑘−1) of 𝛤(𝑝,𝑘−1) acts on [𝑝𝑘] where the i-th factor acts by permutations on the elements

𝑖𝑝𝑘−1+1,𝑖𝑝𝑘−1+2,…,𝑖𝑝𝑘−1+𝑝𝑘−1=(𝑖+1)𝑝𝑘−1.
All of these actions commute, so we can see the product ∏𝑝−1𝑖=0𝛤(𝑝,𝑘−1) as a subgroup of 𝑆𝑝𝑘. However, there is a further action of ℤ/𝑝ℤ on [𝑝𝑘] sending j to 𝑗+𝑝𝑘−1 (modulo 𝑝𝑘). This action cyclically permutes the p blocks of 𝑝𝑘−1 elements in [𝑝𝑘] on which the p factors of ∏𝑝−1𝑖=0𝛤(𝑝,𝑘−1) act. Thus these two actions do not commute, but indeed they induce an action of the semidirect product

𝛤(𝑝,𝑘)=(∏𝑖=0𝑝−1𝛤(𝑝,𝑘−1))⋊ℤ/𝑝ℤ,
where ℤ/𝑝ℤ maps to the automorphism group of ∏𝑝−1𝑖=0𝛤(𝑝,𝑘−1) by permuting the factors of the product. We claim that 𝛤(𝑝,𝑘) is the desired p-Sylow subgroup of 𝑆𝑝𝑘.

Indeed, as the underlying set of the semidirect product is simply the product of the two underlying sets of the groups, the number of elements of the semidirect product is

#𝛤(𝑝,𝑘)=(#𝛤(𝑝,𝑘−1))𝑝⋅𝑝=(𝑝𝑒(𝑘−1))𝑝⋅𝑝=𝑝𝑝𝑒(𝑘−1)+1=𝑝𝑒(𝑘),
so it has the correct number of elements and is indeed a subgroup of 𝑆𝑝𝑘.

Now recall what we want to show: for a pair {𝑣1,𝑣2} of vertices forming an edge of our original graph G, we want to show that the graph 𝐺′ with edges {{𝑔𝑣1,𝑔𝑣2}:𝑔∈𝛤′≅𝛤(𝑝,𝑘)} is isomorphic to the wreath graph 𝑊𝑝𝑘. By relabeling the vertices (that is performing a conjugation in 𝑆𝑝𝑘) we may assume that 𝛤′=𝛤(𝑝,𝑘). Furthermore, by a translation in the group 𝛤(𝑝,𝑘), which acts transitively on the elements of [𝑝𝑘], we may assume that 𝑣1=1. Now if 𝑣2 were in the first block [𝑝𝑘−1] of vertices, on which the first factor 𝛤(𝑝,𝑘−1) operates, then it is easy to see that the resulting graph 𝐺′ would not be connected: the first factor \varGamma (p,k-1) would send the edge \{1,v_2\} only to edges within the first block [p^{k-1}] and then the cyclic permutation by the factor {\mathbb {Z}}/p{\mathbb {Z}} would send this pattern of edges to the p-1 other blocks, giving us a disjoint union of p graphs. This is not possible, since our original graph G is a subgraph of G' and also was assumed to be connected.

Thus we may assume that v_2 is in one of the other blocks

\begin{aligned} P(a)=[p^{k-1}]+ip^{k-1}\text { for }a=1, \ldots , p-1\,. \end{aligned}
Now we want to argue that we can reorder these blocks, sending P(a) to P(1) and leaving P(0) invariant, such that the group action of \varGamma (p,k) is respected. And indeed, let b \in {\mathbb {Z}}/p{\mathbb {Z}} be the multiplicative inverse of a (such that ab = 1 \mod p), then there is a permutation of [p^k] sending the block P(i) to the block P(i\cdot b \mod p) (where the block is just translated as a whole, not permuting the elements inside). And indeed, we see that P(a) is sent to P(1). The reason why this permutation respects the form of the actionFootnote6 of \varGamma (p,k) is that multiplication by b induces a group isomorphism {\mathbb {Z}}/p{\mathbb {Z}} \rightarrow {\mathbb {Z}}/p{\mathbb {Z}} on the factor {\mathbb {Z}}/p{\mathbb {Z}} of \varGamma (p,k).

To summarize, we can assume without loss of generality that we start with an edge \{1,v_2\} with v_2 in the second block of vertices. But then it is easy to see that the graph G' obtained by taking the orbit of \{1,v_2\} under \varGamma (p,k) is indeed the wreath graph W_{p^k}. Indeed, the group \varGamma (p,k) acts transitively within each of the p blocks of vertices (since the i-th factor \varGamma (p,k-1) above acts transitively there), so every edge from the first to the second block is in the orbit of \{1,v_2\}. Then finally the cyclic permutation action of {\mathbb {Z}}/p{\mathbb {Z}} sends these edges to the set of all edges between blocks i and i+1, which exactly gives the set of edges of the wreath graph. This finishes the proof.

\square

The Main Reduction: From Homomorphisms to Induced Subgraphs
In what follows we will construct a sequence of reductions, starting from \#\textsc {Hom}({\mathcal {H}}) and ending in \#\textsc {IndSub}(\varPhi ). Here, {\mathcal {H}} is a recursively enumerable set of p-edge-transitive graphs and \varPhi is a graph property such that for every graph H \in {\mathcal {H}} we have that \varPhi (H[\emptyset ]) \ne \varPhi (H).

More precisely, we will prove that

\begin{aligned} \#\textsc {Hom}({\mathcal {H}}) {\mathop {\le ^{\mathrm {fpt}}_{\mathrm {T}}}\limits ^{\text {Lemma 4}}} \#\textsc {cp-Hom}({\mathcal {H}}) {\mathop {\le ^{\mathrm {fpt}}_{\mathrm {T}}}\limits ^{\text {Lemma 9}}} \#\textsc {cp-IndSub}(\varPhi ) {\mathop {\le ^{\mathrm {fpt}}_{\mathrm {T}}}\limits ^{\text {Lemma 10}}} \#\textsc {IndSub}(\varPhi ) \end{aligned}	(7)
In particular, all of those reductions will be tight in the sense that conditional lower bounds on the fine-grained complexity of \#\textsc {Hom}({\mathcal {H}}) immediately transfer to \#\textsc {IndSub}(\varPhi ). For the hardness results we rely on a result of Dalmau and Jonsson [9] stating that the problem \#\textsc {Hom}({\mathcal {H}}) is known to be \#\mathsf {W[1]}-hard whenever {\mathcal {H}} is recursively enumerable and of unbounded treewidth.Footnote7 Here a class of graphs is said to have unbounded treewidth if for every b \in {\mathbb {N}} there exists a graph in the class with treewidth at least b.

Reducing Homomorphisms to Color-Prescribed Homomorphisms
In the first reduction we are given graphs H and G and the goal is to compute \#{\mathsf {Hom}(H \rightarrow G)} using an oracle for \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} \star ). This can be done by taking precisely |V(H)| copies of the vertices of G, that is, one for each vertex in H and then adding an edge between two vertices u and v if they are copies of adjacent vertices in G and the vertices of H corresponding to the copies of V(G) that contain u and v are adjacent in H as well; this construction is also known as the Tensor product of H and G. The construction is formalized in the proof of the following lemma. In particular it is shown that the resulting graph {\hat{G}} is H-colored.

Lemma 4
Let H be a graph. There exists an algorithm {\mathbb {A}} that is given a graph G as input and has oracle access to the function \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} \star ) and computes \#{\mathsf {Hom}(H \rightarrow G)} in time f(|V(H)|)\cdot |V(G)| where f is a computable function. Further, every oracle query {\hat{G}} satisfies |V({\hat{G}})| \le f(|V(H)|) \cdot |V(G)|.

Proof
Let k = |V(H)|. It will be convenient to assume that V(H)=[k]. Given a graph G, we construct a graph {\hat{G}} as follows. The vertex set of {\hat{G}} is defined to be

\begin{aligned} V({\hat{G}}) = \bigcup _{i=1}^{k} V_i \,, \end{aligned}
where V_i = \{v_i ~|~ v \in V(G)\} is a copy of V(G) identified with vertex i \in V(H). We add an edge \{u_i,v_j\} to {\hat{G}} if and only if \{i,j\} \in E(H) and \{u,v\} \in E(G). Now it can easily be verified that the function c: V({\hat{G}}) \rightarrow V(H) given by c(v_i) := i is an H-coloring of {\hat{G}}. Furthermore it is easy to see that

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} {\hat{G}}) = \#{\mathsf {Hom}(H \rightarrow G)}\,, \end{aligned}
which concludes the proof. \square

Reducing Color-prescribed Homomorphisms to Color-prescribed Induced Subgraphs
The reduction from color-prescribed homomorphisms to color-prescribed induced subgraphs requires the introduction of an H-colored variant of the framework of graph motif parameters, which was explicitly introduced in [8] and implicitly used in [4]. More precisely, given an H-colored graph G and a property \varPhi , we will express \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) as a linear combination of color-prescribed homomorphisms counts, that is, terms of the form \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G). In a first step, we show complexity monotonicity for linear combinations of color-prescribed homomorphisms. While this property allows a quite simple proof, a second step, in which we study the coefficient of \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} G) requires a thorough understanding of the alternating enumerator of \varPhi and H. In case of p-edge-transitive graphs, the latter is provided by Lemma 1.

We start by introducing a colored variant of the tensor product of graphs (see e.g. Chapter 5.4.2 in [17]). Given two H-colored graphs G and {\hat{G}} with colorings c and {\hat{c}} we define their color-prescribed tensor product G\times _H{\hat{G}} as the graph with vertices V=\{(v,{\hat{v}})\in V(G)\times V({\hat{G}}) ~|~c(v)={\hat{c}}({\hat{v}})\} and edges between (v,{\hat{v}}) and (u,{\hat{u}}) if and only if \{v,u\} \in E(G) and \{{\hat{v}},{\hat{u}}\} \in E({\hat{G}}). The next lemma states that \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom} is linear with respect to \times _H.

Lemma 5
Let H be a graph, let F be an edge-subgraph of H, and let G and {\hat{G}} be H-colored. Then we have that

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} G \times _H{\hat{G}}) = \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} G) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} {\hat{G}})\,. \end{aligned}
Proof
It can easily be verified that the function b(h,{\hat{h}})(v) := (h(v),{\hat{h}}(v)) that assigns elements in {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} G) \times {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} {\hat{G}}) to elements in {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(F \rightarrow _{H} G \times _H{\hat{G}}) is a well-defined bijection. \square

The proof of the complexity monotonicity property for color-prescribed homomorphisms (Lemma 7) will require to solve a system of linear equations. The following lemma proves that the corresponding matrix is non-singular.

Lemma 6
Let H be a graph (which we consider H-coloured by the identity mapping) and let M be a square matrix of size 2^{|E(H)|} such that the rows and columns are identified by the subsets of edges of H. Furthermore assume that the entries of M are given by

\begin{aligned} M(S,T) := \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} H[T])\,. \end{aligned}
Then M is non-singular. This holds true even if M is considered as a matrix over {\mathbb {Z}}_p, that is, the field with p elements. In the latter case, the entries are taken modulo p.

Proof
We fix any linear extension \lesssim of the subset inclusion relation on E(H) and order the columns and rows of M accordingly. We claim that M is triangular. To see this we first observe that M(S,S)= 1 for every S, given by the identity homomorphism from H[S] to H[S] which is, of course, color-prescribed. Now consider M(S, T) for some T\ne S with T \lesssim S. It follows that there exists an edge \{u,v\} in S\setminus T since \lesssim linearly extends subset inclusion. Now assume that there exists a color-prescribed homomorphism h from H[S] to H[T]. By color-prescribedness we have that h(u)=u and h(v)=v, contradicting the fact that h is a homomorphism and \{u,v\} \notin T. Hence M(S,T) = 0 and, consequently, M is upper-triangular. \square

We are now prepared to prove the color-prescribed variant of complexity monotonicity.

Lemma 7
(Complexity monotonicity) Let H be a graph and let a be a computable function from edge-subgraphs of H to rationals. There exists an algorithm {\mathbb {A}} that is given an H-colored graph G as input and has oracle access to the function

\begin{aligned} \sum _{S \subseteq E(H)} a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} \star )\,, \end{aligned}
and computes \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G) for all S such that a(H[S])\ne 0 in time f(|H|)\cdot |V(G)| where f is a computable function. Furthermore, every oracle query {\hat{G}} satisfies |V({\hat{G}})| \le f(|H|)\cdot |V(G)|.

Proof
Using Lemma 5 we have that for every H-colored graph F it holds that

\begin{aligned}&\sum _{S \subseteq E(H)} a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} (G\times _HF)) \end{aligned}
(8)
\begin{aligned}&\quad =\sum _{S \subseteq E(H)} a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G)\cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} F)\,, \end{aligned}
(9)
which we can evaluate for F=H[\emptyset ],\dots ,H[E(H)]. This induces a system of linear equations; for each of the aforementioned F we obtain an equation

\begin{aligned} b_F = \sum _{S \subseteq E(H)} a_{F,S}\cdot x_S \,, \end{aligned}
such that b_F = \sum _{S \subseteq E(H)} a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} (G\times _HF)), and a_{F,S} = \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} F), and x_S = a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G). Now observe that we can compute b_F using the oracle, and that we can compute a_{F,S} in time only depending in H (since F is an edge-subgraph of H and S\subseteq E(H)). Furthermore, for our choices of F, the corresponding matrix is non-singular by Lemma 6. Consequently, the numbers a(H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G) are uniquely determined and can be computed by solving the system using Gaussian elimination. Finally, we obtain the numbers \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S] \rightarrow _{H} G) by multiplying with a(H[S])^{-1} whenever a(H[S]) \ne 0. \square

It remains to express the number of color-prescribed induced subgraphs that satisfy a property \varPhi as a linear combination of color-prescribed homomorphisms.

Lemma 8
Let H be a graph, let \varPhi be a graph property and let G be an H-colored graph. Then it holds that

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) = \sum _{S \in E(H)} \varPhi (H[S]) \sum _{J \subseteq E(H)\setminus S} (-1)^{\#J} \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S \cup J] \rightarrow _{H} G) \,. \end{aligned}
Moreover, the absolute values of the coefficient of \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} G) and {\hat{\chi }}(\varPhi ,H) are equal.

Proof
We start by establishing the following claim.

Claim 1
Let H be graph, let S\subseteq E(H) and let G be an H-colored graph. Then

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(H[S] \rightarrow _{H} G) = \sum _{J\subseteq E(H)\setminus S} (-1)^{\#J} \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S\cup J] \rightarrow _{H} G)\,. \end{aligned}
Proof of claim
It holds that

\begin{aligned}&{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(H[S] \rightarrow _{H} G)\nonumber \\&\quad = {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S] \rightarrow _{H} G) \setminus \left( \bigcup _{e \in E(H)\setminus S} {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S\cup \{e\}] \rightarrow _{H} G) \right) ,\qquad \end{aligned}
(10)
and hence, by inclusion-exclusion, \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(H[S] \rightarrow _{H} G) is equal to

\begin{aligned}&\#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S] \rightarrow _{H} G) - \sum _{\emptyset \subsetneq J \subseteq E(H)\setminus S} (-1)^{\#J-1}\cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S\cup J] \rightarrow _{H} G) \end{aligned}
(11)
\begin{aligned}&\quad =\sum _{J\subseteq E(H)\setminus S} (-1)^{\#J} \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S\cup J] \rightarrow _{H} G)\,, \end{aligned}
(12)
which concludes the proof of the claim.

Now we have that

\begin{aligned}&\#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) \end{aligned}
(13)
\begin{aligned}&\quad = \sum _{S \in E(H)} \varPhi (H[S]) \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(H[S] \rightarrow _{H} G)\end{aligned}
(14)
\begin{aligned}&\quad = \sum _{S \in E(H)} \varPhi (H[S]) \sum _{J\subseteq E(H)\setminus S} (-1)^{\#J} \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Sub}(H[S\cup J] \rightarrow _{H} G)\end{aligned}
(15)
\begin{aligned}&\quad = \sum _{S \in E(H)} \varPhi (H[S]) \sum _{J\subseteq E(H)\setminus S} (-1)^{\#J} \cdot \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H[S\cup J] \rightarrow _{H} G) \end{aligned}
(16)
where (14) follows from the definition of {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G), (15) is Claim 1 and (16) holds as color-prescribed homomorphisms are injective and a color-prescribed embedding is uniquely identified by its image. Collecting for the coefficient of \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} G) yields

\begin{aligned} \sum _{S \in E(H)} \varPhi (H[S])\cdot (-1)^{\#E(H)-\#S} = (-1)^{\#E(H)}\cdot {\hat{\chi }}(\varPhi ,H) \,. \end{aligned}
(17)
\square

The application of the complexity monotonicity property for color-prescribed homomorphisms (Lemma 7) requires non-zero coefficients. However, this can be guaranteed for the coefficient of interest in case of p-edge-transitive graphs as shown in Sect. 3. Formally, the reduction is constructed as follows.

Lemma 9
Let \varPhi be a computable graph property and let H be a p-edge-transitive graph such that \varPhi (H[\emptyset ]) \ne \varPhi (H). There exists an algorithm {\mathbb {A}} that is given an H-colored graph G as input and has oracle access to the function

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} \star )\,, \end{aligned}
and computes \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} G) in time f(|H|)\cdot |V(G)| where f is a computable function. Furthermore, every oracle query {\hat{G}} is H-colored as well and satisfies |V({\hat{G}})| \le f(|H|)\cdot |V(G)|.

Proof
Using Lemma 8 we can express \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} \star ) as a linear combination of color-prescribed homomorphisms. In particular, the coefficient of \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} \star ) is (\pm 1) \cdot {\hat{\chi }}(\varPhi ,H) and by Lemma 1 we have that this number is non-zero whenever H is p-edge-transitive and \varPhi (H[\emptyset ]) \ne \varPhi (H). Hence we can use the algorithm from Lemma 7 to compute \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(H \rightarrow _{H} G) in the desired running time. \square

Reducing Color-Prescribed Induced Subgraphs to Uncolored Induced Subgraphs
The last part of the reduction sequence allows us to get rid of the colors. More precisely, we will reduce the problem of counting color-prescribed induced subgraphs of an H-colored graph to the problem of counting uncolored induced subgraphs of size |V(H)| in a graph, both with respect to some property \varPhi . The proof is a straightforward application of the inclusion-exclusion principle, which is standard for reducing from the colored to the uncolored version of a parameterized counting problem (see for instance [7, Section 1.4.1]). We include a proof only for completeness.

Lemma 10
Let \varPhi be a graph property and let H be a graph with k vertices. There exists an algorithm {\mathbb {A}} that is given an H-colored graph G as input and has oracle access to the function \#{\mathsf {IndSub}(\varPhi ,k \rightarrow \star )} and computes \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) in time f(k)\cdot |V(G)| where f is a computable function. Furthermore, every oracle query {\hat{G}} satisfies |V({\hat{G}})| \le |V(G)| and, in particular, {\hat{G}} allows an H-coloring as well.

Proof
It will be convenient to assume that V(H)=[k]. We first check whether the H-coloring c of G is surjective. If this is not the case then there exists some vertex i\in V(H) such that i \notin {{\mathsf {i}}}{{\mathsf {m}}}(c) and hence there is no color-prescribed induced subgraph of G, so {\mathbb {A}} can just output 0. Otherwise, the H-coloring of G induces a partition of V(G) in k many non-empty and pairwise disjoint subsets, each associated with some “color” i \in V(H). This allows us to equivalently express {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) in terms of vertex-colorful induced subgraphs:

\begin{aligned} {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) = \left\{ S \subseteq \left( {\begin{array}{c}V(G)\\ k\end{array}}\right) ~\Bigg |~c(S)=[k] ~\wedge ~ \varPhi (G[S]) = 1\right\} \end{aligned}
(18)
By the principle of inclusion and exclusion we obtain that

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G)=\sum _{J\subseteq [k]} (-1)^{\#J}\cdot \#{\mathsf {IndSub}(\varPhi ,k \rightarrow G_J)}\,, \end{aligned}
(19)
where G_J is the graph obtained from G by deleting all vertices that are colored with some color in J. Hence we can compute \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {IndSub}(\varPhi \rightarrow _{H} G) using 2^k oracle calls. Finally, we observe that H-colored graphs are closed under the removal of vertices and therefore every oracle query G_J allows an H-coloring. \square

Non-trivial Monotone Properties on Bipartite Graphs
In what follows, we apply the algebraic approach which was laid out in the preceding sections to bipartite graph properties. This will allow us to prove our main result. To this end, we say that a set {\mathcal {K}}\subseteq {\mathbb {N}} is dense if there exists a constant c such that for every k'\in {\mathbb {N}} there exists k \in {\mathcal {K}} such that k' \le k \le ck'. Furthermore, we write {{\mathsf {I}}}{{\mathsf {S}}}_k for the graph with k isolated vertices. The following theorem is obtained by invoking the reduction sequence (7) to complete bipartite graphs K_{t,t} for prime powers t=p^k, which are p-edge-transitive (see Sect. 3). The extension to modular counting is presented in the next section.

Theorem 1
Let \varPhi be a computable graph property and let {\mathcal {K}} be the set of all prime powers t such that \varPhi ({{\mathsf {I}}}{{\mathsf {S}}}_{2t}) \ne \varPhi (K_{t,t}). If {\mathcal {K}} is infinite then \#\textsc {IndSub}(\varPhi ) is \#\mathsf {W[1]} hard. If additionally {\mathcal {K}} is dense then it cannot be solved in time f(k)\cdot n^{o(k)} for any computable function f unless ETH fails. This holds true even if the input graphs to \#\textsc {IndSub}(\varPhi ) are restricted to be bipartite.

While \#\mathsf {W[1]}-hardness will follow by the classification of Dalmau and Jonsson [9], hardness under ETH requires a tight reduction from counting cliques, which we will present first. In particular we use a trick inspired by Lemma 1.11 in [7] to make the reduction parsimonious which is required for the extension to modular counting in the subsequent section.

Lemma 11
There exists an algorithm that, given a positive integer \ell >1 and a graph G with n vertices, computes in time O(\ell n) a K_{\ell ,\ell }-colored graph G' with at most O(\ell n) vertices such that the number of cliques of size \ell in G equals \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(K_{\ell ,\ell } \rightarrow _{K_{\ell ,\ell }} G').

Proof
Let the vertex set of G be \{v_i \mid 1 \le i \le n\} and let that of K_{\ell , \ell } be \{a_i, b_i \mid 1 \le i \le \ell \}. We now construct the graph G' on the vertex set \{u_{i,j}, w_{i,j} \mid 1 \le i \le \ell , 1 \le j \le n\} with a K_{\ell , \ell }-coloring given by c(u_{i,j}) = a_i and c(w_{i, j}) = b_i. We add an edge between u_{i,j} and w_{i',j'} if and only if

either (i, j) = (i', j'),

or i < i', j < j' and the vertices v_j and v_{j'} are adjacent,

or i > i', j > j' and the vertices v_j and v_{j'} are adjacent.

Let \{v_{j_1}, \ldots v_{j_{\ell }}\} be an \ell -clique in G. Assume w.l.o.g. that j_k < j_{k'} for k < k'. Then the set \{u_{1,j_1}, \ldots u_{\ell , j_\ell }, w_{1,j_1}, \ldots w_{\ell , j_\ell }\} forms a colorful biclique in G', so it gives rise to a color-prescribed homomorphism h\in {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(K_{\ell , \ell } \rightarrow _{K_{\ell ,\ell }} G'). Now let h'\in {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(K_{\ell , \ell } \rightarrow _{K_{\ell ,\ell }} G') be a color-prescribed homomorphism. Then there has to be the following colorful biclique in G':

\begin{aligned} \{u_{1,\alpha _1}, \ldots u_{\ell , \alpha _\ell }, w_{1,\beta _1}, \ldots w_{\ell , \beta _\ell }\}\,. \end{aligned}
We first see that for every i we have \alpha _i = \beta _i since there has to be an edge between u_{i, \alpha _i} and w_{i, \beta _i}. All other edges now directly imply that \{v_{\alpha _1}, \ldots , v_{\alpha _\ell }\} is a clique of size \ell in G. Furthermore the edges enforce \alpha _i < \beta _{i'} = \alpha _i for every i < i', i.e. that the \alpha _i are sorted in increasing order and thus there is a one-to-one correspondence between homomorphisms in {{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(K_{\ell ,\ell } \rightarrow _{K_{\ell ,\ell }} G') and \ell -cliques in G. \square

Proof of Theorem 1
Let \varPhi and {\mathcal {K}} be as given in Theorem 1. We define a class of graphs {\mathcal {H}} as follows:

\begin{aligned} {\mathcal {H}} = \{K_{t,t}~|~t \in {\mathcal {K}}\} \,. \end{aligned}
By the reductions sequence (7), given by Lemmas 4, 9 and 10, we obtain that \#\textsc {Hom}({\mathcal {H}})\le ^{\mathrm {fpt}}_{\mathrm {T}}\#\textsc {IndSub}(\varPhi ). As \varPhi is computable, {\mathcal {H}} is recursively enumerable. Furthermore, as {\mathcal {K}} is infinite, we have that there are arbitrary large bicliques in {\mathcal {H}} and, in particular, the treewidth of {\mathcal {H}} is unbounded. Therefore \#\textsc {Hom}({\mathcal {H}}), and hence \#\textsc {IndSub}(\varPhi ), are \#\mathsf {W[1]}-hard by the classification of counting homomorphisms due to Dalmau and Jonsson [9]. For the tight bound under ETH, we reduce from the decision problem \textsc {Clique} which asks, given G and k, to decide whether G contains a clique of size k and which cannot be solved in time f(k)\cdot n^{o(k)} for any computable function f, unless ETH fails [5, 6]. Now assume that {\mathcal {K}} is dense and let (G, k) be an instance of \textsc {Clique}. By density of {\mathcal {K}}, there exists \ell \in {\mathcal {K}} such that k \le \ell \le ck for some overall constant c independent of k. We construct the graph {\hat{G}} from G by adding \ell -k further vertices and adding edges between all new vertices as well as between every pair of an old and a new vertex. It can then easily be verified that G contains a clique of size k if and only if {\hat{G}} contains a clique of size \ell .

Next we apply Lemma 11 to {\hat{G}} and \ell , and obtain an K_{\ell ,\ell }-colored graph G' satisfying that the number of \ell -cliques in {\hat{G}} is equal to

\begin{aligned} \#{{\mathsf {c}}}{{\mathsf {p}}}\text {-}\mathsf {Hom}(K_{\ell ,\ell } \rightarrow _{K_{\ell ,\ell }} G')\,. \end{aligned}
Now we invoke Lemmas 9 and 10 to conclude the reduction. In particular, all reductions are tight in the sense that every oracle call for \#\textsc {IndSub}(\varPhi ) in the final part of the reduction is a pair ({\tilde{G}},2\ell ) where the number of vertices of {\tilde{G}} is bounded by O(\ell \cdot |V(G)|). As \ell \le ck we conclude that every algorithm that solves \#\textsc {IndSub}(\varPhi ) in time f(k)\cdot n^{o(k)} can be used to solve \textsc {Clique} in time f(k)\cdot n^{o(k)}—just check in the end whether the output is a number greater than zero.

Finally, we point out that for both (\#\mathsf {W[1]} and ETH) hardness results, the last part of the reduction, that is, Lemma 10 only queries for graphs that are K_{t,t}-colorable and hence bipartite. \square

Note that, in case \varPhi or its complement is edge-monotone, we only have to find infinitely many prime powers t for which \varPhi is neither true nor false on the set of all edge-subgraphs of K_{t,t}, which is the case for all natural, non-trivial properties that do not rely on the number of vertices in some way.Footnote8 If \varPhi (or its complement) is monotone, that is, not only closed under the removal of edges, but also under the removal of vertices, then such artificial properties do not exist and we can state the result more clearly as follows.

Theorem 2
Let \varPhi be a computable monotone graph property such that \varPhi and \lnot \varPhi hold on infinitely many bipartite graphs. Then \#\textsc {IndSub}(\varPhi ) is \#\mathsf {W[1]}-hard and cannot be solved in time f(k)\cdot n^{o(k)} for any computable function f unless the Exponential Time Hypothesis fails. This holds true even if the input graphs to \#\textsc {IndSub}(\varPhi ) are restricted to be bipartite.

Proof
Since \varPhi holds for infinitely many (bipartite) graphs, we have that for each positive integer k, there exists a graph H with at least k vertices such that \varPhi (H)=1. Since \varPhi is monotone, that is, closed under removal of vertices and edges, and since {{\mathsf {I}}}{{\mathsf {S}}}_k is a subgraph of H, we have that \varPhi ({{\mathsf {I}}}{{\mathsf {S}}}_k)=1.

Next, we claim that \varPhi (K_{t,t})=0 for all but finitely many t. Assume for contradiction that the latter is false, that is, for each t there exists a t'\ge t such that \varPhi (K_{t',t'})=1. However, this implies that for every bipartite graph H, the property \varPhi is true for a supergraph of H. Since \varPhi is monotone, we conclude that \varPhi (H)=1, contradicting the fact that \lnot \varPhi holds for infinitely many bipartite graphs.

Consequently, we have shown that \varPhi ({{\mathsf {I}}}{{\mathsf {S}}}_k)=1 for all positive integers k and \varPhi (K_{t,t})=0 for all but finitely many t. Hence we can apply Theorem 1 and, in particular, the set {\mathcal {K}} will contain all but finitely many prime powers and is therefore dense. \square

Extension to Modular Counting
In the last part of the paper, we show that our main result (Theorem 1) can easily be extended to counting modulo a fixed prime:

Theorem 5
Let p be a prime number, let \varPhi be a computable graph property and let {\mathcal {K}} be the set of all prime powers t=p^k such that \varPhi ({{\mathsf {I}}}{{\mathsf {S}}}_{2t}) \ne \varPhi (K_{t,t}). If {\mathcal {K}} is infinite then \mathsf {Mod}_p\textsc {IndSub}(\varPhi ) is \mathsf {Mod}_p\mathsf {W[1]} hard. If additionally {\mathcal {K}} is dense, then it cannot be solved in time f(k)\cdot n^{o(k)} for any computable function f unless ETH fails. This holds true even if the input graphs to \mathsf {Mod}_p\textsc {IndSub}(\varPhi ) are restricted to be bipartite.

Here \mathsf {Mod}_p\textsc {IndSub}(\varPhi ) asks, given G and k, to compute the number of induced subgraphs with k vertices in G that satisfy \varPhi modulo p. The parameterized complexity class \mathsf {Mod}_p\mathsf {W[1]} is defined by the problem of, given G and k, deciding whether the number of k-cliques in G is 0 modulo p, which is complete for the class (see [3] for p=2 and Chapter 1.2.2 in [7] for the general case).

First of all, we point out that the modular counting version of Theorem 2 follows as corollary from the above theorem in the same way Theorem 2 follows from Theorem 1. For the proof of Theorem 5 we rely on the following fact stating that all required reductions in Sect. 4 work as well in the case of counting modular a prime number.

Fact 1
Let p be a fixed prime. Then Lemmas 9 and 10 remain true when counting is done modulo p if the graph H is restricted to be K_{t,t} for some prime power t=p^k.

The only two non-trivial observations required to verify Fact 1 are, first, that {\hat{\chi }}(\varPhi ,K_{t,t}) \ne 0 \mod p whenever \varPhi (K_{t,t}[\emptyset ]) \ne \varPhi (K_{t,t}) (Lemma 1) and, second, that complexity monotonicity (Lemma 7) holds for computation modulo p as well, since non-singularity of the matrix M in the proof is given by Lemma 6 even in case the entries of M are considered to be elements of {\mathbb {Z}}_p. The last ingredient for the proof of Theorem 5, in particular for hardness under ETH, requires a method of isolating cliques that works in the parameterized setting. This is given by the following result of Williams et al.

Lemma 12
(Lemma 2.1 in [26]) Let p \ge 2 be an integer, G, H be undirected graphs. Let G' be a random induced subgraph of G such that each vertex is taken with probability 1/2, independently. If there is at least one induced H in G, the number of induced H in G' is not a multiple of p with probability at least 2^{-|H|}.

Proof of Theorem 5
The proof is most similar to the proof of the tight lower bound under ETH in Theorem 1. We start our reduction from the problem of finding a clique of size k. In case {\mathcal {K}} is dense and we aim to establish the ETH hardness result, we perform the following two initial steps before the main reduction:

1.
Given G and k, we construct a graph {\hat{G}} such that G contains a clique of size k if and only if {\hat{G}} contains a clique of size \ell where k\le \ell \le ck for some overall constant c. The details of the construction are given in the proof of Theorem 1.

2.
We use Lemma 12 to isolate an \ell -clique in {\hat{G}}, assuming there is any, with high probability.

For the main part of the reduction we then first apply the reduction from counting cliques to counting color-prescribed homomorphisms from the biclique as given by Lemma 11. In particular, this reduction is parsimonious. Finally, we proceed from this point on precisely as in the proof of Theorem 1, the correctness of which follows by Fact 1.

We conclude by pointing out that, in case the randomized construction of Lemma 12 was used, we can perform probability amplification by repeating the final algorithm 2^k times to end up in a constant success probability. \square

Conclusion
We have established hardness for \#\textsc {IndSub}(\varPhi ) for any (edge-)monotone property \varPhi that is non-trivial on bipartite graphs. In particular, this holds true even if we count modulo a prime and restrict the input graphs to be bipartite as well. Hence, we did not only significantly extend the set of graph properties \varPhi for which the (parameterized) complexity of \#\textsc {IndSub}(\varPhi ) is understood, but we also generalized many of the prior results, such as [13, 19] and parts of [22] to the cases of bipartite input graphs and modular counting.

As a next step towards a proof of Conjecture 1, we suggest the study of properties that are defined by forbidden induced subgraphs, for which the complexity of \#\textsc {IndSub}(\varPhi ) is only partially resolved at this point.

