A graph 𝐺=(𝑉,𝐸) is a double-threshold graph if there exist a vertex-weight function 𝑤:𝑉→ℝ and two real numbers 𝚕𝚋,𝚞𝚋∈ℝ such that 𝑢𝑣∈𝐸 if and only if 𝚕𝚋≤𝚠(𝑢)+𝚠(𝑣)≤𝚞𝚋. In the literature, those graphs are studied also as the pairwise compatibility graphs that have stars as their underlying trees. We give a new characterization of double-threshold graphs that relates them to bipartite permutation graphs. Using the new characterization, we present a linear-time algorithm for recognizing double-threshold graphs. Prior to our work, the fastest known algorithm by Xiao and Nagamochi [Algorithmica 2020] ran in 𝑂(𝑛3𝑚) time, where n and m are the numbers of vertices and edges, respectively.

Introduction
A graph is a threshold graph if there exist a vertex-weight function and a real number called a weight lower bound such that two vertices are adjacent in the graph if and only if the associated vertex weight sum is at least the weight lower bound. Threshold graphs and their generalizations are well studied because of their beautiful structures and applications in many areas [6, 15]. In particular, the edge-intersections of two threshold graphs, and their complements (i.e., the union of two threshold graphs) have attracted several researchers in the past, and recognition algorithms with running time 𝑂(𝑛5) by Ma [14], 𝑂(𝑛4) by Raschle and Simon [19], and 𝑂(𝑛3) by Sterbini and Raschle [24] have been developed, where n is the number of vertices.

In this paper, we study the class of double-threshold graphs, which is a proper generalization of threshold graphs and a proper specialization of the graphs that are edge-intersections of two threshold graphs [11]. A graph is a double-threshold graph if there exist a vertex-weight function and two real numbers called weight lower and upper bounds such that two vertices are adjacent if and only if the sum of their weights is at least the lower bound and at most the upper bound. Our main result in this paper is a linear-time recognition algorithm for double-threshold graphs based on a new characterization.

As described below, there are at least two different lines of recent studies that led to this class of graphs: one is on multithreshold graphs and the other is on pairwise compatibility graphs.

Multithreshold graphs Jamison and Sprague [12] introduced multithreshold graphs as a generalization of threshold graphs. The threshold number of a graph 𝐺=(𝑉,𝐸) is the minimum positive integer k such that there are k distinct thresholds 𝜃1,…,𝜃𝑘 and a weight function 𝚠:𝑉→ℝ such that 𝑢𝑣∈𝐸 if and only if the number of thresholds 𝜃𝑖 satisfying 𝜃𝑖≤𝚠(𝑢)+𝚠(𝑣) is odd. Intuitively, the thresholds break the real line into “yes” and “no” regions such that two vertices are adjacent if and only if the sum of their weights belongs to a yes region. Clearly, a graph has threshold number 1 if and only if it is a threshold graph and has threshold number at most 2 if and only if it is a double-threshold graph. They showed that every graph has threshold number, and asked some questions including the complexity for recognizing double-threshold graphs. Puleo [18] showed that there is no single choice of three thresholds that can represent all graphs of threshold number at most 3. Jamison and Sprague [11] later focused on double-threshold graphs and showed that all double-threshold graphs are permutation graphs and that the bipartite double-threshold graphs are exactly the bipartite permutation graphs. Our new characterization is closely related to these facts and our algorithm uses them.

Pairwise compatibility graphs Motivated by uniform sampling from phylogenetic trees in bioinformatics, Kearney, Munro, and Phillips [13] defined pairwise compatibility graphs. A graph 𝐺=(𝑉,𝐸) is a pairwise compatibility graph if there exists a quadruple (T, 𝚠, 𝚕𝚋, 𝚞𝚋), where T is a tree, 𝚠:𝐸(𝑇)→ℝ, and 𝚕𝚋,𝚞𝚋∈ℝ, such that the set of leaves in T coincides with V and 𝑢𝑣∈𝐸 if and only if the (weighted) distance 𝑑𝑇(𝑢,𝑣) between u and v in T satisfies 𝚕𝚋≤𝑑𝑇(𝑢,𝑣)≤𝚞𝚋. Since its introduction, several authors have studied properties of pairwise compatibility graphs, but the existence of a polynomial-time recognition algorithm for that graph class has been open. The survey article by Calamoneri and Sinaimeri [4] proposed to look at the class of pairwise compatibility graphs defined on stars (i.e., star pairwise compatibility graphs), and asked for a characterization of star pairwise compatibility graphs. As we will see later, the star pairwise compatibility graphs are precisely the double-threshold graphs (see Observation 2.2).

Polynomial-time recognition of double-threshold graphs Xiao and Nagamochi [26] solved the open problem of Calamoneri and Sinaimeri [4] by giving a vertex-ordering characterization and an 𝑂(𝑛3𝑚)-time recognition algorithm for star pairwise compatibility graphs, where n an m are the numbers of vertices and edges, respectively. Their result also answered the question by Jamison and Sprague [12] about the recognition of double-threshold graphs by the equivalence of the graph classes. In this paper, we further improve the running time to 𝑂(𝑚+𝑛).

Other generalizations of threshold graphs There are many other generalizations of threshold graphs such as bithreshold graphs [8], threshold signed graphs [3], threshold tolerance graphs [17], quasi-threshold graphs (also known as trivially perfect graphs) [27], weakly threshold graphs [1], paired threshold graphs [20], and mock threshold graphs [2]. We omit the definitions of these graph classes and only note that some small graphs show that these classes are incomparable to the class of double-threshold graphs (e.g., 3𝐾2 and the bull for bithreshold graphs, 3𝐾2 and the bull for threshold signed graphs, 2𝐾2 and the bull for threshold tolerance graphs, 𝐶4 and 2𝐾3 for quasi-threshold graphs, 2𝐾2 and the bull for weakly threshold graphs, 𝐶4 and the bull for paired threshold graphs, 𝐾3∪𝐶4 and the bull for mock threshold graphsFootnote1).

Note that the concept of double-threshold digraphs [7] is concerned with directed acyclic graphs defined from a generalization of semiorders involving two thresholds and not related to threshold graphs or double-threshold graphs.

Organization of the paper We first review in Sect. 2 some known relationships between double-threshold graphs and permutation graphs, and then show that connected bipartite permutation graphs admit representations with some restrictions that we use in subsequent sections. In Sect. 3, which is the main body of this paper, we give a new characterization of double-threshold graphs. Using the characterization, we present in Sect. 4 a simple linear-time algorithm for recognizing double-threshold graphs.

Graph classes In Fig. 1, we summarize the inclusion relations among some of the graph classes mentioned so far. We can see that the class of double-threshold graphs connects several other graph classes studied before.

Fig. 1
figure 1
The hierarchy of graph classes mentioned in the introduction. The class of the edge-intersections of two threshold graphs is abbreviated as threshold∩threshold. A line segment between two classes indicates that the one below is a subclass of the one above

Full size image
Preliminaries
All graphs in this paper are undirected, simple, and finite. A graph G is given by the pair of its vertex set V and its edge set E as 𝐺=(𝑉,𝐸). The vertex set and the edge set of G are often denoted by V(G) and E(G), respectively. For a vertex v in a graph 𝐺=(𝑉,𝐸), its neighborhood is the set of vertices that are adjacent to v, and denoted by 𝑁𝐺(𝑣)={𝑢∣𝑢𝑣∈𝐸}. When the graph G is clear from the context, we often omit the subscript. A linear ordering ≺ on a set S with |𝑆|=𝑛 can be represented by a sequence ⟨𝑠1,𝑠2,…,𝑠𝑛⟩ of the elements in S, in which 𝑠𝑖≺𝑠𝑗 if and only if 𝑖<𝑗. With abuse of notation, we sometimes write ≺=⟨𝑠1,𝑠2,…,𝑠𝑛⟩.

Double-Threshold Graphs
A graph 𝐺=(𝑉,𝐸) is a threshold graph if there exist a vertex-weight function 𝚠:𝑉→ℝ and a real number 𝚕𝚋∈ℝ with the following property:

𝑢𝑣∈𝐸⟺𝚕𝚋≤𝚠(𝑢)+𝚠(𝑣).
A graph 𝐺=(𝑉,𝐸) is a double-threshold graph if there exist a vertex-weight function 𝚠:𝑉→ℝ and two real numbers 𝚕𝚋,𝚞𝚋∈ℝ with the following property:

𝑢𝑣∈𝐸⟺𝚕𝚋≤𝚠(𝑢)+𝚠(𝑣)≤𝚞𝚋.
Then, we say that the double-threshold graph G is defined by 𝚠, 𝚕𝚋 and 𝚞𝚋.

Jamison and Sprague [12] showed that we can use any values as 𝚕𝚋 and 𝚞𝚋 for defining a double-threshold graph and that we do not have to consider degenerated cases, where some vertices have the same weight or some weight sum equals to the lower or upper bound.

Lemma 2.1
[12] Let 𝐺=(𝑉,𝐸) be a double-threshold graph. For every pair 𝚕𝚋,𝚞𝚋∈ℝ with 𝚕𝚋<𝚞𝚋, there exists 𝚠:𝑉→ℝ defining G with 𝚕𝚋 and 𝚞𝚋 such that 𝚠(𝑢)≠𝚠(𝑣) if 𝑢≠𝑣, and 𝚠(𝑢)+𝚠(𝑣)∉{𝚕𝚋,𝚞𝚋} for all (𝑢,𝑣)∈𝑉2.

Every threshold graph is a double-threshold graph as one can set a dummy upper bound 𝚞𝚋>max{𝚠(𝑢)+𝚠(𝑣)∣𝑢,𝑣∈𝑉}. From the definition of double-threshold graphs, we can easily see that they coincide with the star pairwise compatibility graphs.

Observation 2.2
A graph is a double-threshold graph if and only if it is a star pairwise compatibility graph.

Proof
Let 𝐺=(𝑉,𝐸) be a double-threshold graph defined by 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ. We construct an edge-weighted star S with the center c and the leaf set V such that the weight 𝚠′(𝑣𝑐) of each edge 𝑣𝑐∈𝐸(𝑆) is 𝚠(𝑣). Then, G is the star pairwise compatibility graph defined by (𝑆,𝚠′,𝚕𝚋,𝚞𝚋).

Let 𝐺=(𝑉,𝐸) be a star pairwise compatibility graph defined by (𝑆,𝚠,𝚕𝚋,𝚞𝚋), where the star S has c as its center. For each 𝑣∈𝑉, we set 𝚠′(𝑣)=𝚠(𝑣𝑐). Then, G is the double-threshold graph defined by 𝚠′, 𝚕𝚋, and 𝚞𝚋. ◻

Observation 2.2 allows us to state the following useful property shown by Xiao and Nagamochi [26] in terms of double-threshold graphs.

Lemma 2.3
[26] A graph is a double-threshold graph if and only if it contains at most one non-bipartite component and all components are double-threshold graphs.

The following simple observation is useful when we conduct a detailed analysis on a specific triple 𝚠, 𝚕𝚋, 𝚞𝚋 defining a double-threshold graph.

Observation 2.4
Let 𝐺=(𝑉,𝐸) be a double-threshold graph defined by 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ. If 𝚠(𝑥)≤𝚠(𝑦)≤𝚠(𝑧) and 𝑥𝑦,𝑦𝑧∈𝐸 hold for distinct vertices 𝑥,𝑦,𝑧∈𝑉, then 𝑥𝑧∈𝐸.

Proof
Since 𝚕𝚋≤𝚠(𝑥)+𝚠(𝑦)≤𝚠(𝑥)+𝚠(𝑧)≤𝚠(𝑦)+𝚠(𝑧)≤𝚞𝚋, we have 𝑥𝑧∈𝐸.

◻

The definition of double-threshold graphs can be understood visually in the plane, by its so called slab representation. See Fig. 2 for an example. In the xy-plane, we consider the slab defined by {(𝑥,𝑦)∣𝚕𝚋≤𝑥+𝑦≤𝚞𝚋} that is illustrated in gray. Then, two vertices 𝑢,𝑣∈𝑉 are joined by an edge if and only if the point (𝚠(𝑢),𝚠(𝑣)) lies in the slab.

Fig. 2
figure 2
(Left) A double-threshold graph. The weight of each vertex is given as 𝚠(𝑎)=1, 𝚠(𝑏)=3, 𝚠(𝑐)=5, and 𝚠(𝑑)=7; the lower bound is 𝚕𝚋=4 and the upper bound is 𝚞𝚋=8. (Right) The slab representation of the graph. A white dot represents the point (𝚠(𝑢),𝚠(𝑣)) for distinct vertices u, v, and a cross represents the point (𝚠(𝑣),𝚠(𝑣)) for a vertex v. Two distinct vertices u and v are joined by an edge if and only if the corresponding white dot lies in the gray slab

Full size image
Permutation Graphs
A graph 𝐺=(𝑉,𝐸) is a permutation graph if there exist linear orderings ≺1 and ≺2 on V with the following property:

𝑢𝑣∈𝐸⟺(𝑢≺1𝑣 and 𝑣≺2𝑢) or (𝑢≺2𝑣 and 𝑣≺1𝑢).
(1)
A graph is a bipartite permutation graph if it is a bipartite graph and a permutation graph. It is known that every permutation graph admits a transitive orientation [6], which gives a direction to each edge in such a way that the existence of directed edges from x to y and from y to z implies a directed edge from x to z as well.

Jamison and Sprague [11] showed that permutation graphs and bipartite permutation graphs have strong connections to double-threshold graphs as follows.

Lemma 2.5
[11] Every double-threshold graph is a permutation graph.

Lemma 2.6
[11] The bipartite double-threshold graphs are exactly the bipartite permutation graphs.

We say that the orderings ≺1 and ≺2 in (1) define the permutation graph G. We call ≺1 a permutation ordering of G if there exists a linear ordering ≺2 satisfying the condition above. Since ≺1 and ≺2 play a symmetric role in the definition, ≺2 is also a permutation ordering of G. Note that for a graph G and a permutation ordering ≺1 of G, the other ordering ≺2 that defines G together with ≺1 is uniquely determined. Also note that if ≺1 and ≺2 define G, then ≺R1 and ≺R2 also define G, where ≺R𝑖 denotes the reversed ordering of ≺𝑖.

We often represent a permutation graph with a permutation diagram, which is drawn as follows (see Fig. 3 for an illustration). Imagine two horizontal parallel lines ℓ1 and ℓ2 on the plane. Then, we place the vertices in V on ℓ1 from left to right according to the permutation ordering ≺1 as distinct points, and similarly place the vertices in V on ℓ2 from left to right according to ≺2 as distinct points. The positions of 𝑣∈𝑉 can be represented by x-coordinates on ℓ1 and ℓ2, which are denoted by 𝚡1(𝑣) and 𝚡2(𝑣), respectively. We connect the two points representing the same vertex with a line segment. The process results in a diagram (called a permutation diagram) with |V| line segments. By definition, 𝑢𝑣∈𝐸 if and only if the line segments representing u and v cross in the permutation diagram, which is equivalent to the inequality (𝚡1(𝑢)−𝚡1(𝑣))(𝚡2(𝑢)−𝚡2(𝑣))<0.

Fig. 3
figure 3
An example of a permutation diagram. (Left) A permutation graph G. (Right) A permutation diagram that represents G

Full size image
Conversely, from a permutation diagram of G, we can extract linear orderings ≺1 and ≺2 as

𝚡1(𝑢)<𝚡1(𝑣)𝚡2(𝑢)<𝚡2(𝑣)⟺𝑢≺1𝑣,⟺𝑢≺2𝑣.
When those conditions are satisfied, we say that the orderings of the x-coordinates on ℓ1 and ℓ2 are consistent with the linear orderings ≺1 and ≺2, respectively.

Although a permutation graph may have an exponential number of permutation orderings, it is essentially unique for a connected bipartite permutation graph in the sense of Lemma 2.7 below. For a graph 𝐺=(𝑉,𝐸), linear orderings ⟨𝑣1,…,𝑣𝑛⟩ and ⟨𝑣′1,…,𝑣′𝑛⟩ on V are neighborhood-equivalent if 𝑁(𝑣𝑖)=𝑁(𝑣′𝑖) for all i.

Lemma 2.7
[9] Let G be a connected bipartite permutation graph defined by ≺1 and ≺2. Then, every permutation ordering of G is neighborhood-equivalent to ≺1, ≺2, ≺R1, or ≺R2.

A bipartite graph (X, Y; E) is a unit interval bigraph if there is a set of unit intervals {𝐼𝑣=[𝑙𝑣,𝑙𝑣+1]∣𝑣∈𝑋∪𝑌} such that 𝑥𝑦∈𝐸 if and only if 𝐼𝑥∩𝐼𝑦≠∅ for 𝑥∈𝑋 and 𝑦∈𝑌. The class of unit interval bigraphs is known to be equal to the class of bipartite permutation graphs.

Proposition 2.8
[10, 21, 25] A graph is a bipartite permutation graph if and only if it is a unit interval bigraph.

The following lemma shows that a bipartite permutation graph can be represented by a permutation diagram with the special property that the segments representing vertices of the same set of the bipartition are parallel. An illustration is given in Fig. 4.

Fig. 4
figure 4
An illustration of Lemma 2.9. (Left) A permutation diagram of a bipartite permutation graph 𝐺=(𝑋,𝑌;𝐸). The vertices in X are represented by blue segments, and the vertices in Y are represented by red segments. (Right) A permutation diagram that represents G obtained by Lemma 2.9

Full size image
Lemma 2.9
Let 𝐺=(𝑋,𝑌;𝐸) be a bipartite permutation graph. Then, G can be represented by a permutation diagram in which 𝚡2(𝑥)=𝚡1(𝑥)+1 for 𝑥∈𝑋 and 𝚡2(𝑦)=𝚡1(𝑦)−1 for 𝑦∈𝑌.

Proof
By Proposition 2.8, there is a set of unit intervals {𝐼𝑣=[𝑙𝑣,𝑙𝑣+1]∣𝑣∈𝑋∪𝑌} such that for 𝑥∈𝑋 and 𝑦∈𝑌, 𝑥𝑦∈𝐸 if and only if 𝐼𝑥∩𝐼𝑦≠∅. We can assume that all endpoints of the intervals are distinct; that is, 𝑙𝑢∉{𝑙𝑣,𝑙𝑣+1} for all 𝑢,𝑣∈𝑋∪𝑌 with 𝑢≠𝑣 [25]. For each 𝑥∈𝑋, we set 𝚡1(𝑥)=𝑙𝑥 and 𝚡2(𝑥)=𝑙𝑥+1. For each 𝑦∈𝑌, we set 𝚡1(𝑦)=𝑙𝑦+1 and 𝚡2(𝑦)=𝑙𝑦. It suffices to show that this permutation diagram represents G. Observe that line segments corresponding to vertices from the same set, X or Y, are parallel and thus do not cross. For 𝑥∈𝑋 and 𝑦∈𝑌, we have

𝐼𝑥∩𝐼𝑦≠∅⟺|𝑙𝑥−𝑙𝑦|<1⟺𝑙𝑥<𝑙𝑦+1 and 𝑙𝑦<𝑙𝑥+1⟺𝚡1(𝑥)<𝚡1(𝑦) and 𝚡2(𝑦)<𝚡2(𝑥)⟺(𝚡1(𝑥)−𝚡1(𝑦))(𝚡2(𝑥)−𝚡2(𝑦))<0.(∵ all endpoints are distinct)(∵𝑥∈𝑋, 𝑦∈𝑌)
The ⇐ direction of the last equivalence holds since 𝚡1(𝑥)<𝚡2(𝑥) and 𝚡1(𝑦)>𝚡2(𝑦). Therefore, we conclude that the diagram represents G. ◻

We can show that for every permutation ordering of a connected bipartite permutation graph, there exists a permutation diagram consistent with the ordering that satisfies the conditions in Lemma 2.9.

Corollary 2.10
Let 𝐺=(𝑋,𝑌;𝐸) be a connected bipartite permutation graph defined by permutation orderings ≺1 and ≺2. If the first vertex in ≺1 belongs to X, then G can be represented by a permutation diagram such that the orderings of the x-coordinates on ℓ1 and ℓ2 are consistent with ≺1 and ≺2, respectively, and that 𝚡2(𝑥)=𝚡1(𝑥)+1 for every 𝑥∈𝑋 and 𝚡2(𝑦)=𝚡1(𝑦)−1 for every 𝑦∈𝑌.

Proof
Since G is connected, the last vertex in ≺1 belongs to Y, the first vertex in ≺2 belongs to Y, and the last vertex in ≺2 belongs to X.

By Lemma 2.9, G can be represented by a permutation diagram 𝐷′ in which 𝚡2(𝑥)=𝚡1(𝑥)+1 for 𝑥∈𝑋 and 𝚡2(𝑦)=𝚡1(𝑦)−1 for 𝑦∈𝑌. Let ≺′1 and ≺′2 be the permutation orderings corresponding to ℓ1 and ℓ2, respectively, in this diagram 𝐷′. Lemma 2.7 and the assumption on the first vertex in ≺1 imply that ≺1 is neighborhood-equivalent to ≺′1 or (≺′2)𝑅. We may assume that ≺1 is neighborhood-equivalent to ≺′1 since otherwise we can rotate the diagram 𝐷′ by 180 degrees and get a permutation diagram of G in which the ordering on ℓ1 is ≺1, 𝚡2(𝑥)=𝚡1(𝑥)+1 for 𝑥∈𝑋, and 𝚡2(𝑦)=𝚡1(𝑦)−1 for 𝑦∈𝑌.

Now we can construct a desired permutation diagram of G using ≺1 and 𝐷′ by appropriately giving a mapping between segments and vertices. That is, for each 𝑖∈{1,…,|𝑋∪𝑌|}, we assign the ith vertex in ≺1 to the segment in 𝐷′ with the ith smallest x-coordinate on ℓ1. This new diagram is a permutation diagram of G since ≺1 is neighborhood-equivalent to ≺′1. Since G and ≺1 uniquely determine the ordering on ℓ2, the x-coordinates 𝚡2 on ℓ2 are consistent with ≺2. ◻

New Characterization
In this section, we present a new characterization of double-threshold graphs (Theorem 3.1). This is one of our main results and a key ingredient of the linear-time algorithm given in the next section. Recall that Lemma 2.6 characterizes the bipartite double-threshold graphs as the bipartite permutation graphs, which can be recognized in linear time [22, 23]. Thus, we are going to focus on non-bipartite graphs in this section.

Let 𝐺=(𝑉,𝐸) be a graph. From G and a vertex subset 𝑀⊆𝑉, we construct an auxiliary bipartite graph 𝐺′𝑀=(𝑉′,𝐸′) defined as follows (see Fig. 5):

𝑉′={𝑣,𝑣⎯⎯⎯∣𝑣∈𝑉},𝐸′={𝑢𝑣⎯⎯⎯∣𝑢𝑣∈𝐸}∪{𝑣𝑣⎯⎯⎯∣𝑣∈𝑀}.
Note that (𝑉,{𝑣⎯⎯⎯∣𝑣∈𝑉}) is a bipartition of 𝐺′𝑀 no matter what M is.

Fig. 5
figure 5
An example of an auxiliary bipartite graph. (Left) A graph G and 𝑀={𝑒,𝑓}. (Right) The auxiliary bipartite graph 𝐺′𝑀

Full size image
An efficient maximum clique K of a graph G is a maximum clique (i.e., a clique of the maximum size) that minimizes the degree sum ∑𝑣∈𝐾deg𝐺(𝑣). See Fig. 6.

Fig. 6
figure 6
An example of an efficient maximum clique. (Left) A slab representation of a double-threshold graph G. (Right) The vertices of G are ordered in the increasing order of their weights. The graph G has two maximum cliques 𝑄1={𝑐,𝑒,𝑓,𝑔} and 𝑄2={𝑑,𝑒,𝑓,𝑔}. The degree sums are ∑𝑣∈𝑄1deg𝐺(𝑣)=5+4+4+4=17, and ∑𝑣∈𝑄2deg𝐺(𝑣)=4+4+4+4=16. Therefore, 𝑄2 is the only efficient maximum clique of G

Full size image
Using these terms, we present a characterization of non-bipartite double-threshold graphs as follows.

Theorem 3.1
For a non-bipartite graph G, the following are equivalent.

1.
G is a double-threshold graph.

2.
For every efficient maximum clique M of G, the graph 𝐺′𝑀 is a bipartite permutation graph.

3.
For some efficient maximum clique M of G, the graph 𝐺′𝑀 is a bipartite permutation graph.

The rest of this section is devoted to a proof of Theorem 3.1. The following is a quick overview of the proof steps (some terms will be defined later).

1.
We first prove the key lemma (Lemma 3.3) ensuring that a graph is a double-threshold graph if and only if 𝐺′𝑀 is a permutation graph with a “symmetric” permutation diagram, where 𝑀⊆𝑉 is the set of “mid-weight” vertices.

2.
We then show that every efficient maximum clique can be the set of mid-weight vertices by proving a couple of lemmas (Lemmas 3.4 and 3.6).

3.
Next, we show that the symmetry required in the key lemma follows for free if M is a clique (Lemma 3.10), which is true when we set M to be the set of mid-weight vertices.

4.
Finally, we complete the proof of Theorem 3.1 by putting everything together.

We start with the following simple but useful fact.

Lemma 3.2
For a connected non-bipartite graph 𝐺=(𝑉,𝐸) and a vertex subset 𝑀⊆𝑉, 𝐺′𝑀 is connected.

Proof
For any 𝑢,𝑣∈𝑉, since G is connected and non-bipartite, G contains both an odd walk and an even walk from u to v. This shows that 𝐺′𝑀 contains walks from u to v, from u to 𝑣¯, from 𝑢¯ to v, and from 𝑢¯ to 𝑣¯. Hence, 𝐺′𝑀 is connected. ◻

For the auxiliary graph 𝐺′𝑀=(𝑉′,𝐸′) of 𝐺=(𝑉,𝐸), a linear ordering on 𝑉′ represented by ⟨𝑤1,𝑤2,…,𝑤2𝑛⟩ is symmetric if 𝑤𝑖=𝑣 implies 𝑤2𝑛−𝑖+1=𝑣¯ for any 𝑣∈𝑉 and any 𝑖∈{1,2,…,2𝑛}.

Lemma 3.3
Let 𝐺=(𝑉,𝐸) be a non-bipartite graph and 𝑀⊆𝑉. The following are equivalent.

1.
G is a double-threshold graph defined by 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ such that 𝑀={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2}.

2.
The auxiliary graph 𝐺′𝑀=(𝑉′,𝐸′) can be represented by a permutation diagram in which both orderings ≺1 and ≺2 are symmetric.

Proof
(1 ⟹ 2) An illustration is given in Fig. 7. Let G be a double-threshold graph defined by 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ such that 𝑀={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2}. By Lemma 2.1, we can assume that 𝚕𝚋=0 and 𝚞𝚋=2, that 𝚠(𝑢)+𝚠(𝑣)∉{0,2} for every (𝑢,𝑣)∈𝑉2, and that 𝚠(𝑢)≠𝚠(𝑣) if 𝑢≠𝑣. We construct a permutation diagram of 𝐺′𝑀 as follows. Let ℓ1 and ℓ2 be two horizontal parallel lines. For each vertex 𝑤∈𝑉′, we set the x-coordinates 𝚡1(𝑤) and 𝚡2(𝑤) on ℓ1 and ℓ2 as follows: for any 𝑣∈𝑉,

𝚡1(𝑣)𝚡2(𝑣)=𝚠(𝑣)−1,=𝚠(𝑣),𝚡1(𝑣¯)𝚡2(𝑣¯)=1−𝚠(𝑣),=−𝚠(𝑣).
Since 𝚠(𝑢)+𝚠(𝑣)∉{0,2} for every (𝑢,𝑣)∈𝑉2 and 𝚠(𝑢)≠𝚠(𝑣) if 𝑢≠𝑣, the x-coordinates are distinct on ℓ1 and on ℓ2. By connecting 𝚡1(𝑤) and 𝚡2(𝑤) with a line segment for each 𝑤∈𝑉′, we get a permutation diagram. The line segments corresponding to the vertices in V have negative slopes, and the ones corresponding to the vertices in 𝑉′∖𝑉 have positive slopes. Thus, for any two vertices 𝑢,𝑣∈𝑉, the line segments corresponding to u and 𝑣¯ cross if and only if both 𝚡1(𝑢)≤𝚡1(𝑣¯) and 𝚡2(𝑢)≥𝚡2(𝑣¯) hold, which is equivalent to 0≤𝚠(𝑢)+𝚠(𝑣)≤2, and thus to 𝑢𝑣¯∈𝐸′. Similarly, the line segments corresponding to v and 𝑣¯ cross if and only if 0≤2𝚠(𝑣)≤2, i.e., 𝑣∈𝑀. This shows that the obtained permutation diagram represents 𝐺′𝑀. Let ≺1 be the ordering on 𝑉′ defined by 𝚡1. Since 𝚡1(𝑣)=−𝚡1(𝑣¯) for each 𝑣∈𝑉, ≺1 is symmetric. Similarly, the ordering ≺2 defined by 𝚡2 is symmetric.

(2 ⟹ 1) Suppose we are given a permutation diagram of 𝐺′𝑀 in which both ≺1 and ≺2 are symmetric. We may assume by symmetry that the first vertex in ≺1 belongs to V. Since 𝐺′𝑀 is connected by Lemma 3.2, Corollary 2.10 shows that we can represent 𝐺′𝑀 by a permutation diagram in which the x-coordinates 𝚡1 and 𝚡2 on ℓ1 and ℓ2 satisfy that

𝚡2(𝑣)=𝚡1(𝑣)+1 and 𝚡2(𝑣¯)=𝚡1(𝑣¯)−1(𝑣∈𝑉)
(2)
and that the orderings of the x-coordinates on ℓ1 and ℓ2 are consistent with ≺1 and ≺2, respectively. Since ≺1 is symmetric, if 𝑢,𝑣∈𝑉 are the ith and the jth vertices in ≺1, then 𝑢¯,𝑣¯ are the (2𝑛−𝑖+1)st and the (2𝑛−𝑗+1)st vertices in ≺1. Since 𝑖<2𝑛−𝑗+1 is equivalent to 𝑗<2𝑛−𝑖+1, we have that 𝑢≺1𝑣¯ if and only if 𝑣≺1𝑢¯. As 𝚡1 is consistent with ≺1, it holds for 𝑢,𝑣∈𝑉 that 𝚡1(𝑢)≤𝚡1(𝑣¯) if and only if 𝚡1(𝑣)≤𝚡1(𝑢¯), and hence

𝚡1(𝑢)≤𝚡1(𝑣¯)⟺𝚡1(𝑢)+𝚡1(𝑣)≤𝚡1(𝑣¯)+𝚡1(𝑢¯).
Similarly, we can show that for 𝑢,𝑣∈𝑉,

𝚡2(𝑢)≥𝚡2(𝑣¯)⟺𝚡2(𝑢)+𝚡2(𝑣)≥𝚡2(𝑣¯)+𝚡2(𝑢¯).
Thus, for any two distinct vertices 𝑢,𝑣∈𝑉, it holds that

𝑢𝑣∈𝐸⟺𝑢𝑣¯∈𝐸′⟺𝚡1(𝑢)≤𝚡1(𝑣¯) and 𝚡2(𝑢)≥𝚡2(𝑣¯)⟺𝚡1(𝑢)+𝚡1(𝑣)≤𝚡1(𝑣¯)+𝚡1(𝑢¯) and 𝚡2(𝑢)+𝚡2(𝑣)≥𝚡2(𝑣¯)+𝚡2(𝑢¯).
(3)
For each 𝑣∈𝑉, define

𝚠(𝑣)=𝚡2(𝑣)−𝚡2(𝑣¯)2.
By (2), we can see that (3) is equivalent to

0≤𝚠(𝑢)+𝚠(𝑣)≤2,
which shows that 𝚠, 𝚕𝚋=0, and 𝚞𝚋=2 define G. Furthermore, for any 𝑣∈𝑉,

𝑣∈𝑀⟺𝑣𝑣¯∈𝐸′⟺𝚡1(𝑣)≤𝚡1(𝑣¯) and 𝚡2(𝑣)≥𝚡2(𝑣¯)⟺0≤𝚠(𝑣)≤1,
which shows that 𝑀={𝑣∈𝑉∣0≤𝚠(𝑣)≤1}. ◻

Fig. 7
figure 7
An illustration of (1 ⟹ 2) in Lemma 3.3. (Top left) A double-threshold graph G with 𝑀={𝑑,𝑒}. The auxiliary bipartite graph 𝐺′𝑀 is also depicted. (Top right) A slab representation of G. (Bottom) A permutation diagram of 𝐺′𝑀 as given in the proof

Full size image
To utilize Lemma 3.3, we need to find the set M of mid-weight vertices; that is, the vertices with weights in the range [𝚕𝚋/2,𝚞𝚋/2]. The first observation is that M has to be a clique as the weight sum of any two vertices in M is in the range [𝚕𝚋,𝚞𝚋]. In the following, we show that an efficient maximum clique can be chosen as M. To this end, we first prove that we only need to consider (inclusion-wise) maximal cliques.

Lemma 3.4
For a connected non-bipartite double-threshold graph 𝐺=(𝑉,𝐸), there exist 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ defining G such that {𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2} is a maximal clique of G.

Proof
Let G be a non-bipartite double-threshold graph 𝐺=(𝑉,𝐸) defined by 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ. Let 𝑀={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2}. We choose 𝚠, 𝚕𝚋, and 𝚞𝚋 in such a way that for any 𝚠′:𝑉→ℝ and 𝚕𝚋′,𝚞𝚋′∈ℝ defining G, M is not a proper subset of {𝑣∈𝑉∣𝚕𝚋′/2≤𝚠′(𝑣)≤𝚞𝚋′/2}. Suppose to the contrary that M is not a maximal clique of G. Observe that if 𝑀=∅, then V can be partitioned into two independent sets {𝑣∈𝑉∣𝚠(𝑣)<𝚕𝚋/2} and {𝑣∈𝑉∣𝚠(𝑣)>𝚞𝚋/2}, which is a contradiction to the non-bipartiteness of G. Hence, M is non-empty.

Let 𝐺′𝑀 be the auxiliary graph constructed from G and M as before. By Lemma 3.3, 𝐺′𝑀 has a permutation diagram in which both ≺1=⟨𝑤1,…,𝑤2𝑛⟩ and ≺2=⟨𝑤′1,…,𝑤′2𝑛⟩ are symmetric. Let 𝑀⎯⎯⎯⎯⎯⎯={𝑣¯∣𝑣∈𝑀}. By the definition of 𝐺′𝑀, 𝑀∪𝑀⎯⎯⎯⎯⎯⎯ induces a complete bipartite graph in 𝐺′𝑀. By symmetry, we may assume that 𝑀≺1𝑀⎯⎯⎯⎯⎯⎯ and 𝑀⎯⎯⎯⎯⎯⎯≺2𝑀. That is, in ≺1 all vertices in M appear before any vertex in 𝑀⎯⎯⎯⎯⎯⎯ appears, and in ≺2 all vertices in 𝑀⎯⎯⎯⎯⎯⎯ appear before any vertex in M appears. Note that these assumptions imply that for each edge 𝑥𝑦¯∈𝐸(𝐺′𝑀), 𝑥≺1𝑦¯ and 𝑦¯≺2𝑥 hold since 𝐺′𝑀 is connected by Lemma 3.2 (see Fig. 8 (Left)).

As M is not a maximal clique in G, there is a vertex 𝑣∉𝑀 such that 𝑀⊆𝑁𝐺(𝑣). If 𝑣¯≺1𝑣, then we have

𝑀≺1𝑣¯≺1𝑣≺1𝑀⎯⎯⎯⎯⎯⎯ and 𝑣¯≺2𝑀⎯⎯⎯⎯⎯⎯≺2𝑀≺2𝑣
(4)
since 𝑣𝑣¯∉𝐸(𝐺′𝑀), 𝑀⎯⎯⎯⎯⎯⎯⊆𝑁𝐺′𝑀(𝑣), and 𝑀⊆𝑁𝐺′𝑀(𝑣¯). Similarly, if 𝑣≺1𝑣¯, then we have

𝑣≺1𝑀≺1𝑀⎯⎯⎯⎯⎯⎯≺1𝑣¯ and 𝑀⎯⎯⎯⎯⎯⎯≺2𝑣≺2𝑣¯≺2𝑀,
or equivalently,

𝑀≺𝑅2𝑣¯≺𝑅2𝑣≺𝑅2𝑀⎯⎯⎯⎯⎯⎯ and 𝑣¯≺𝑅1𝑀⎯⎯⎯⎯⎯⎯≺𝑅1𝑀≺𝑅1𝑣.
Thus, by replacing ≺1 with ≺𝑅2 and ≺2 with ≺𝑅1 if necessary, we may assume that (4) holds (see Fig. 8 (Left)). We further assume that v has the smallest position in ≺1 under these conditions. ◻

Claim 3.5
𝑤𝑛+1=𝑣 (and thus 𝑤𝑛=𝑣¯).

Proof
(Claim 3.5) By the symmetry of ⟨𝑤1,…,𝑤2𝑛⟩, it suffices to show that there is no vertex 𝑥∈𝑉 such that 𝑣¯≺1𝑥≺1𝑣. Suppose that such a vertex x exists. In 𝐺′𝑀, x is not adjacent to 𝑣¯. This implies that 𝑥𝑣∉𝐸, and hence 𝑥∉𝑀. On the other hand, in 𝐺′𝑀, x is adjacent to all vertices in 𝑀⎯⎯⎯⎯⎯⎯. Thus, we have 𝑀⊆𝑁𝐺(𝑥). This contradicts that v has the smallest position in ≺1 under those conditions. ◻

Now we obtain ≺′1 from ≺1 by swapping v and 𝑣¯ (see Fig. 8 (Right)). By Claim 3.5, this new ordering ≺′1 gives (together with ≺2) the graph obtained from 𝐺′𝑀 by adding the edge 𝑣𝑣¯. Observe that this new graph can be expressed as 𝐺′𝑀∪{𝑣}. Since ≺′1 and ≺2 are symmetric, Lemma 3.3 implies that there are 𝚠′:𝑉→ℝ and 𝚕𝚋′,𝚞𝚋′∈ℝ defining G such that {𝑢∈𝑉∣𝚕𝚋′/2≤𝚠′(𝑢)≤𝚞𝚋′/2}=𝑀∪{𝑣}. This contradicts the choice of 𝚠, 𝚕𝚋, and 𝚞𝚋.

Fig. 8
figure 8
(Left) Relative positions of v, 𝑣¯, M, and 𝑀⎯⎯⎯⎯⎯⎯. (Right) ≺′1 is obtained from ≺1 by swapping v and 𝑣¯

Full size image
We show that every efficient maximum clique can be the set of mid-weight vertices, given an appropriate choice of 𝚠, 𝚕𝚋, and 𝚞𝚋.

Lemma 3.6
Let G be a non-bipartite double-threshold graph. For every efficient maximum clique K of G, there exist 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ defining G such that 𝐾={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2}.

Proof
Let K be an efficient maximum clique of G. By Lemma 2.5, G is a permutation graph, and thus cannot contain an induced odd cycle of length 5 or more [6]. As G is non-bipartite, G contains 𝐾3. This implies that |𝐾|≥3.

By Lemma 3.4, there exist 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ defining G such that 𝑀:={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2} is a maximal clique of G. Assume that 𝚠, 𝚕𝚋, and 𝚞𝚋 are chosen so that the size of the symmetric difference |𝑀▵𝐾|=|𝑀∖𝐾|+|𝐾∖𝑀| is minimized. Assume that 𝐾≠𝑀 since otherwise we are done. This implies that 𝐾⊈𝑀 and 𝐾⊉𝑀 as both K and M are maximal cliques. Observe that 𝐺−𝑀 is bipartite. This implies that |𝐾∖𝑀|∈{1,2} and that 𝐾∩𝑀≠∅ as |𝐾|≥3. Since K is a maximum clique, |𝑀∖𝐾|≤|𝐾∖𝑀| holds.

Let 𝑢∈𝐾∖𝑀. By symmetry, we may assume that 𝚠(𝑢)<𝚕𝚋/2. Note that no other vertex in K has weight less than 𝚕𝚋/2 as K is a clique. Let 𝑣∈𝑀 be a non-neighbor of u that has the minimum weight among such vertices. Such a vertex exists since M is a maximal clique. Note that 𝑣∈𝑀∖𝐾.

We now observe that v has the minimum weight in M. If 𝑤∈𝑀 is a non-neighbor of u, then 𝚠(𝑣)≤𝚠(𝑤) follows from the definition of v. If 𝑤∈𝑀 is a neighbor of u, then 𝚠(𝑣)<𝚠(𝑤) holds, since otherwise 𝚠(𝑢)<𝚕𝚋/2≤𝚠(𝑤)≤𝚠(𝑣) and 𝑢𝑤,𝑤𝑣∈𝐸 imply that 𝑢𝑣∈𝐸 by Observation 2.4.

We are going to show that 𝑁(𝑣)=𝑁(𝑢). ◻

Claim 3.7
𝑁(𝑢)∩{𝑥∣𝚠(𝑥)<𝚕𝚋/2}=𝑁(𝑣)∩{𝑥∣𝚠(𝑥)<𝚕𝚋/2}=∅.

Proof
(Claim 3.7) Since 𝚠(𝑢)<𝚕𝚋/2, 𝑁(𝑢)∩{𝑥∣𝚠(𝑥)<𝚕𝚋/2}=∅. Suppose to the contrary that v has a neighbor x with 𝚠(𝑥)<𝚕𝚋/2. The maximality of M implies that x has a non-neighbor 𝑦∈𝑀. Since 𝑦∈𝑀, 𝚠(𝑣)≤𝚠(𝑦) holds. However, 𝚠(𝑥)<𝚕𝚋/2≤𝚠(𝑣)≤𝚠(𝑦) and 𝑥𝑣,𝑣𝑦∈𝐸 imply 𝑥𝑦∈𝐸 by Observation 2.4. ◻

Claim 3.8
𝑁(𝑢)∩𝑀=𝑁(𝑣)∩𝑀=𝑀∖{𝑣}.

Proof
(Claim 3.8) Since M is a clique and 𝑣∈𝑀, we have 𝑁(𝑣)∩𝑀=𝑀∖{𝑣}. Thus, the claim is equivalent to 𝑀∖{𝑣}⊆𝑁(𝑢). This holds if 𝑀∖𝐾={𝑣}. Assume that 𝑀∖𝐾={𝑣,𝑣′} for some 𝑣′≠𝑣. To show the claim, it suffices to show that 𝑢𝑣′∈𝐸.

Since |𝑀∖𝐾|≤|𝐾∖𝑀|≤2, we have 𝐾∖𝑀={𝑢,𝑢′} for some 𝑢′≠𝑢. Since 𝚠(𝑢)<𝚕𝚋/2 and 𝑢𝑢′∈𝐸, we have 𝚠(𝑢′)≥𝚕𝚋/2. Moreover since 𝑢′∉𝑀, we have 𝚠(𝑢′)>𝚞𝚋/2. Let 𝑤∈𝑀∩𝐾. If 𝚠(𝑤)>𝚠(𝑣′), then, by Observation 2.4, we have 𝑢′𝑣,𝑢′𝑣′∈𝐸 since 𝚠(𝑣)≤𝚠(𝑣′)<𝚠(𝑤)≤𝚠(𝑢′) and 𝑣𝑤,𝑣′𝑤,𝑤𝑢′∈𝐸. This implies that 𝑀⊆𝑁(𝑢′), which contradicts the maximality of M. Hence, 𝚠(𝑤)≤𝚠(𝑣′) holds. This implies by Observation 2.4 that 𝑢𝑣′∈𝐸 as 𝚠(𝑢)≤𝚠(𝑤)≤𝚠(𝑣′) and 𝑢𝑤,𝑤𝑣′∈𝐸. ◻

Claim 3.9
𝑁(𝑢)∩{𝑥∣𝚠(𝑥)>𝚞𝚋/2}⊇𝑁(𝑣)∩{𝑥∣𝚠(𝑥)>𝚞𝚋/2}.

Proof
(Claim 3.9) Let 𝑤∈𝐾∩𝑀. For 𝑧∈𝑁(𝑣) with 𝚠(𝑧)>𝚞𝚋/2, we have

𝚕𝚋≤𝚠(𝑢)+𝚠(𝑤)≤𝚠(𝑢)+𝚞𝚋/2<𝚠(𝑢)+𝚠(𝑧)<𝚕𝚋/2+𝚠(𝑧)<𝚠(𝑣)+𝚠(𝑧)≤𝚞𝚋,
and thus 𝑧∈𝑁(𝑢) holds. ◻

Claims 3.7, 3.8, and 3.9 imply that 𝑁(𝑣)⊆𝑁(𝑢). To show that 𝑁(𝑣)=𝑁(𝑢), suppose to the contrary that N(v) is a proper subset of N(u). We show that K cannot be an efficient maximum clique in this case. Let 𝐾′=𝐾∖{𝑢}∪{𝑣}. We first argue that 𝐾′ is a maximum clique. To this end, it suffices to show that 𝐾′ is a clique as |𝐾′|=|𝐾|. If 𝐾∖𝑀={𝑢}, then 𝐾′=𝑀 is a clique. Assume that 𝐾∖𝑀={𝑢,𝑢′} for some 𝑢′≠𝑢. Since 𝚠(𝑢)<𝚕𝚋/2 and 𝑢′∈𝐾∖𝑀, we have 𝚠(𝑢′)>𝚞𝚋/2 as before. Let 𝑤∈𝐾∩𝑀. Then, 𝑣𝑤,𝑤𝑢′∈𝐸. Since 𝚠(𝑣)≤𝚠(𝑤)≤𝚞𝚋/2<𝚠(𝑢′), we have 𝑣𝑢′∈𝐸 by Observation 2.4. Thus, 𝐾′ is a clique. The assumption 𝑁(𝑣)⊊𝑁(𝑢) implies that deg𝐺(𝑣)<deg𝐺(𝑢), and thus,

∑𝑤∈𝐾′deg𝐺(𝑤)=(∑𝑤∈𝐾deg𝐺(𝑤))−deg𝐺(𝑢)+deg𝐺(𝑣)<∑𝑤∈𝐾deg𝐺(𝑤).
This contradicts that K is efficient. Therefore, we conclude that 𝑁(𝑣)=𝑁(𝑢).

Now, we define a weight function 𝚠′:𝑉→ℝ by setting 𝚠′(𝑢)=𝚠(𝑣), 𝚠′(𝑣)=𝚠(𝑢), and 𝚠′(𝑥)=𝚠(𝑥) for all 𝑥∈𝑉∖{𝑢,𝑣}. Then, 𝚠′, 𝚕𝚋, and 𝚞𝚋 define G and 𝑀′:={𝑤∈𝑉∣𝚕𝚋/2≤𝚠′(𝑤)≤𝚞𝚋/2}=𝑀∪{𝑢}∖{𝑣} as 𝑁(𝑢)=𝑁(𝑣). This contradicts the choice of 𝚠 as |𝑀′▵𝐾|<|𝑀▵𝐾|.

Next, we show that the symmetry required in Lemma 3.3 follows for free when M is a clique.

Lemma 3.10
Let 𝐺=(𝑉,𝐸) be a connected non-bipartite graph and M be a clique of G. Then, 𝐺′𝑀 is a permutation graph if and only if 𝐺′𝑀 can be represented by a permutation diagram in which both orderings ≺1 and ≺2 are symmetric.

Proof
The if part is trivial. To prove the only-if part, we assume that 𝐺′𝑀 is a permutation graph.

First we observe that we only need to deal with the twin-free case. Assume that 𝑁𝐺′𝑀(𝑢)=𝑁𝐺′𝑀(𝑣) (or equivalently 𝑁𝐺′𝑀(𝑢¯)=𝑁𝐺′𝑀(𝑣¯)) for some 𝑢,𝑣∈𝑉, i.e., u, v are twins in 𝐺′𝑀. If 𝐺′𝑀−{𝑣,𝑣¯} has a permutation diagram in which both permutation orderings ≺1 and ≺2 are symmetric, then we can obtain symmetric permutation orderings ≺′1 and ≺′2 of 𝐺′𝑀 by inserting v right after u, and 𝑣¯ right before 𝑢¯ in both ≺1 and ≺2. Thus, it suffices to show that 𝐺′𝑀−{𝑣,𝑣¯}=(𝐺−𝑣)′𝑀∖{𝑣} has a permutation diagram in which both permutation orderings ≺1 and ≺2 are symmetric.

Observe that 𝐺−𝑣 might be bipartite, but (𝐺−𝑣)′𝑀∖{𝑣} is still connected. Hence, we can assume in the following that no pair of vertices in 𝐺′𝑀 have the same neighborhood and that 𝐺′𝑀 is connected (but G might be bipartite). We also assume that |𝑉|≥2 since otherwise the statement is trivially true.

Let ≺1 and ≺2 be the permutation orderings corresponding to a permutation diagram of 𝐺′𝑀. By Lemma 2.7, the assumption of having no twins implies that ≺1, ≺2, ≺R1, and ≺R2 are all the permutation orderings of 𝐺′𝑀. Since 𝐺′𝑀 is connected, we may assume that the first vertex in ≺1 belongs to V, the last in ≺1 belongs to 𝑉′∖𝑉, the first in ≺2 belongs to 𝑉′∖𝑉, and the last vertex in ≺2 belongs to V. Let ⟨𝑤1,…,𝑤2𝑛⟩ be the ordering defined by ≺1.

Let 𝜑:𝑉′→𝑉′ be a map such that 𝜑(𝑣)=𝑣¯ and 𝜑(𝑣¯)=𝑣 for each 𝑣∈𝑉. This map 𝜑 is an automorphism of 𝐺′𝑀. Thus, ⟨𝜑(𝑤1),…,𝜑(𝑤2𝑛)⟩ is also a permutation ordering of 𝐺′𝑀. Let ≺′=⟨𝜑(𝑤1),…,𝜑(𝑤2𝑛)⟩ denote this ordering. Then,

≺′∈{≺1,≺2,≺R1,≺R2}.
We claim that ≺′=≺R1. First, observe that ≺′∉{≺1,≺R2} as the first vertex of ≺′ belongs to 𝑉′∖𝑉 but the first vertices of ≺1 and ≺R2 belong to V.

Suppose to the contrary that ≺′=≺2. Then, for each 𝑤∈𝑉′, the positions of w in ≺1 and 𝜑(𝑤) in ≺2 (=≺′) are the same. Thus, 𝑤𝑖≺1𝜑(𝑤𝑖) implies 𝜑(𝑤𝑖)≺2𝜑(𝜑(𝑤𝑖))=𝑤𝑖. Hence, we have 𝑣𝑣¯∈𝐸(𝐺′𝑀) for all 𝑣∈𝑉, and thus 𝑀=𝑉. As M is a clique, 𝑀=𝑉 implies that G is a complete graph 𝐾|𝑉| and that 𝐺′𝑀 is a complete bipartite graph 𝐾|𝑉|,|𝑉|. This contradicts the assumption that 𝐺′𝑀 has no twins as |𝑉|≥2. Therefore, we conclude that ≺′=≺R1, and in particular that 𝜑(𝑤𝑖)=𝑤2𝑛−𝑖+1 for each i. This means that 𝑤𝑖=𝑣 implies 𝑤2𝑛−𝑖+1=𝑣¯ for all 𝑣∈𝑉 and 𝑖∈{1,…,2𝑛}. Hence, ≺1 is symmetric. ◻

Now we can prove Theorem 3.1 restated below.

Theorem
3.1 For a non-bipartite graph G, the following are equivalent.

1.
G is a double-threshold graph.

2.
For every efficient maximum clique M of G, the graph 𝐺′𝑀 is a bipartite permutation graph.

3.
For some efficient maximum clique M of G, the graph 𝐺′𝑀 is a bipartite permutation graph.

Proof
To show that 1 ⟹ 2, assume that G is a non-bipartite double-threshold graph. Let M be an efficient maximum clique of G. By Lemma 3.6, there exist 𝚠:𝑉→ℝ and 𝚕𝚋,𝚞𝚋∈ℝ defining G such that 𝑀={𝑣∈𝑉∣𝚕𝚋/2≤𝚠(𝑣)≤𝚞𝚋/2}. Now by Lemma 3.3, 𝐺′𝑀 is a bipartite permutation graph.

The implication 2 ⟹ 3 is trivial.

We now show that 3 ⟹ 1. Assume that for an efficient maximum clique M of a non-bipartite graph G, the graph 𝐺′𝑀 is a bipartite permutation graph.

Let H be a non-bipartite component of G. Then, H contains an induced odd cycle of length 𝑘≥3. This means that, if H does not contain M, then 𝐺′𝑀 contains an induced cycle of length 2𝑘≥6. However, this is a contradiction as a permutation graph cannot contain an induced cycle of length at least 5 [5]. Thus, H contains M. Also, there is no other non-bipartite component in G as it does not intersect M. Since H contains M, 𝐻′𝑀 is a component of 𝐺′𝑀. By Lemma 3.10, 𝐻′𝑀 can be represented by a permutation diagram in which both ≺1 and ≺2 are symmetric, and thus H is a double-threshold graph by Lemma 3.3.

Let B be a bipartite component of G (if one exists). Since B does not intersect M, 𝐺′𝑀 contains two isomorphic copies of B as components. Since 𝐺′𝑀 is a permutation graph, B is a permutation graph too. By Lemma 2.6, B is a double-threshold graph.

Now we know that all components of G are double-threshold graphs and exactly one of them is non-bipartite. By Lemma 2.3, G is a double-threshold graph. ◻

Linear-Time Recognition Algorithm
We now present a linear-time recognition algorithm for double-threshold graphs.

Theorem 4.1
There is an 𝑂(𝑚+𝑛)-time algorithm that accepts a given graph 𝐺=(𝑉,𝐸) if and only if the graph is a double-threshold graph, where 𝑛=|𝑉| and 𝑚=|𝐸|.

Proof
Given a graph G, we accept G if and only if

G is a bipartite permutation graph, or

G is a non-bipartite permutation graph and 𝐺′𝑀 is a permutation graph, where M is an efficient maximum clique of G.

By Lemma 2.6 and Theorem 3.1, this algorithm is correct. Thus, it suffices to present a linear-time implementation of this algorithm.

We first test whether G is a permutation graph in 𝑂(𝑚+𝑛) time [16]. If G is not a permutation graph, we can reject it by Lemma 2.5. Otherwise, we check in linear time whether G is bipartite. If so, we can accept G by Lemma 2.6.

In the remaining case, G is a non-bipartite permutation graph. Assume for now that we already have an efficient maximum clique M of G. Since |𝑉(𝐺′𝑀)|=2𝑛 and |𝐸(𝐺′𝑀)|=2𝑚+|𝑀|, we can construct 𝐺′𝑀 and test whether it is a permutation graph in 𝑂(𝑚+𝑛) time. Hence, by Theorem 3.1, it suffices to show that M can be found in 𝑂(𝑚+𝑛) time.

To find an efficient maximum clique of G, we set to each vertex 𝑣∈𝑉 the weight 𝑓(𝑣)=𝑛2−deg𝐺(𝑣), and then find a maximum-weight clique of G with respect to f. It is known that a transitive orientation of a permutation graph can be computed in 𝑂(𝑚+𝑛) time [16], and then using the orientation, we can find a maximum-weight clique M in 𝑂(𝑚+𝑛) time [6, pp. 133–134]. We show that M is an efficient maximum clique of G. Let K be an efficient maximum clique of G. Since ∑𝑣∈𝐾𝑓(𝑣)≤∑𝑣∈𝑀𝑓(𝑣), we have

|𝐾|⋅𝑛2−∑𝑣∈𝐾deg𝐺(𝑣)≤|𝑀|⋅𝑛2−∑𝑣∈𝑀deg𝐺(𝑣).
(5)
Since 0≤∑𝑣∈𝑆deg𝐺(𝑣)<𝑛2 for any 𝑆⊆𝑉, it holds that |𝐾|⋅𝑛2−𝑛2<|𝑀|⋅𝑛2. This implies that |𝐾|=|𝑀| as |𝐾|≥|𝑀|. It follows from (5) that ∑𝑣∈𝐾deg𝐺(𝑣)≥∑𝑣∈𝑀deg𝐺(𝑣). Therefore, M is an efficient maximum clique. ◻