We introduce and study level-planar straight-line drawings with a fixed number 𝜆 of slopes. For proper level graphs (all edges connect vertices of adjacent levels), we give an 𝑂(𝑛log2𝑛/loglog𝑛)-time algorithm that either finds such a drawing or determines that no such drawing exists. Moreover, we consider the partial drawing extension problem, where we seek to extend an immutable drawing of a subgraph to a drawing of the whole graph, and the simultaneous drawing problem, which asks about the existence of drawings of two graphs whose restrictions to their shared subgraph coincide. We present 𝑂(𝑛4/3log𝑛)-time and 𝑂(𝜆𝑛10/3log𝑛)-time algorithms for these respective problems on proper level-planar graphs. We complement these positive results by showing that testing whether non-proper level graphs admit level-planar drawings with 𝜆 slopes is NP-hard even in restricted cases.

Introduction
Directed graphs explaining hierarchy naturally appear in multiple industrial and academic applications. Some examples include PERT diagrams, UML component diagrams, text edition networks [1], text variant graphs [26], phylogenetic and neural networks. In these, and many other applications, it is essential to visualize the implied directed graph so that the viewer can perceive the hierarchical structure it contains. By far the most popular way to achieve this is to apply the Sugiyama framework—a generic network visualization algorithm that results in a drawing where each vertex lies on a horizontal line, called layer, and each edge is directed from a lower layer to a higher layer [21].

The Sugiyama framework consists of several steps: elimination of directed cycles in the initial graph, assignment of vertices to layers, vertex ordering and coordinate assignment. During each of these steps several criteria are optimized, by leading to more readable visualizations, see e.g. [21]. In this paper we concentrate on the last step of the framework, namely coordinate assignment. Thus, the subject of our study are level graphs defined as follows. Let 𝐺=(𝑉,𝐸) be a directed graph. A k-level assignment of G is a function ℓ:𝑉→{1,2,…,𝑘} that assigns each vertex of G to one of k levels. We refer to G together with ℓ as to a k-level graph (or level graph for short). The length of an edge (u, v) is defined as ℓ(𝑣)−ℓ(𝑢). We say that G is proper if all edges have length one. The level graph shown in Fig. 1a is proper, whereas the one shown in (b) is not. For a non-proper level graph G there exists a proper subdivision obtained by subdividing all edges with length greater than one which result in a proper graph.

A level drawing 𝛤 of a level graph G maps each vertex 𝑣∈𝑉 to a point on the horizontal line with y-coordinate ℓ(𝑣) and a real x-coordinate 𝛤(𝑣), and each edge to a y-monotone curve between its endpoints. In particular, the levels are equispaced apart. A level drawing is called level-planar if no two edges intersect except in common endpoints. It is straight-line if the edges are straight-line segments. A level drawing of a proper (subdivision of a) level graph G induces a total left-to-right order on the vertices of a level. We say that two drawings are equivalent if they induce the same order on every level. An equivalence class of this equivalence relation is an embedding of G. We refer to G together with an embedding to as embedded level graph . The third step of Sugiyama framework, vertex ordering, results in an embedded level graph.

The general goal of the coordinate assignment step is to produce a final visualization while further improving its readability. The criteria of readability that have been considered in the literature for this step include straightness and steepness of the edges [21]. Here we study the problem of coordinate assignment step with bounded number of slopes. The slope of an edge (u, v) in 𝛤 is defined as (𝛤(𝑣)−𝛤(𝑢))/(ℓ(𝑣)−ℓ(𝑢)). For proper level graphs it is ℓ(𝑣)−ℓ(𝑢)=1, the slope of (u, v) is then simply 𝛤(𝑣)−𝛤(𝑢). We restrict our study to drawings in which all slopes are non-negative; such drawings can be transformed into drawings with negative slopes by shearing; see Fig. 1.

Fig. 1
figure 1
Shearing drawings to change the slopes. In (a), the left drawing with slopes 0 and 1 is transformed into the right orthogonal drawing, i.e., one with slopes −1 and 1. In (b), the left drawing with slopes 0, 1 and 2 is transformed into a drawing with slopes −1,0 and 1

Full size image
A level drawing 𝛤 is a 𝜆-slope drawing if all slopes in 𝛤 appear in the set {0,1,…,𝜆−1}.

We study embedding-preserving straight-line level-planar 𝜆-slope drawings, or 𝜆-drawings for short and refer to the problem of finding these drawings as 𝜆-DRAWABILITY. Since the possible edge slopes in a 𝜆-drawing are integers all vertices lie on the integer grid.

Related Work The number of slopes used for the edges in a graph drawing can be seen as an indication of the simplicity of the drawing. For instance, the measure edge orthogonality, which specifies how close a drawing is to an orthogonal drawing, where edges are polylines consisting of horizontal and vertical segments only, has been proposed as a measure of aesthetic quality of a graph drawing [40]. In a similar spirit, Kindermann et al. studied the effect reducing the segment complexity on the aesthetics preference of graph drawings and observed that in some cases people prefer drawings using lower segment complexity [29]. More generally, the use of few slopes for a graph drawing may contribute to the formation of “Prägnanz” (“good figure” in German) of the visualization, that accordingly to the Gestalt law of Prägnanz, or law of simplicity, contributes to the perceived quality of the visualizations. This design principle often guides the visualization of metro maps. See [37] for a survey of the existing approaches, most of which generate octilinear layouts of metro maps, and [36] for a recent model for drawing more general k-linear metro maps.

Level-planar drawing with few slopes have not been considered in the literature but drawings of undirected graphs with few slopes have been extensively studied. The planar slope number of a planar graph G is the smallest number s so that G has a planar straight-line drawing with edges of at most s distinct slopes. Special attention has been given to proving bounds on the (planar) slope number of undirected graph classes [4, 13, 14, 16, 17, 27, 28, 31, 32, 38]. Determining the planar slope number is hard in the existential theory of reals [23]. The slope number has also been studied for upward planar drawings, that is, drawings of directed graphs where each edge is drawn as a y-monotone curve (but, unlike with level planarity, the y-coordinate of the vertices is not prescribed) [5, 15].

Several graph visualization problems have been considered in the partial and simultaneous settings. In the partial drawing extension problem, one is presented with a graph and an immutable drawing of some subgraph thereof. The task is to determine whether the given drawing of the subgraph can be completed to a drawing of the entire graph. The problem has been studied for the planar setting [33, 39] and also the level-planar setting [10]. In the simultaneous drawing problem, one is presented with two graphs that may share some subgraph. The task is to draw both graphs so that the restrictions of both drawings to the shared subgraph are identical. We refer the reader to [6] for an older literature overview. The problem has been considered for orthogonal drawings [2] and level-planar drawings [3]. Up to our knowledge, neither partial nor simultaneous drawings have been considered in the restricted slope setting.

Contribution We introduce and study the 𝜆-DRAWABILITY problem. To solve this problem for proper level graphs, we introduce two models. In Sect. 3 we describe the first model, which uses a classic integer-circulation-based approach. This model allows us to solve the 𝜆-DRAWABILITY in 𝑂(𝑛log3𝑛) time and obtain a 𝜆-drawing within the same running time if one exists. In Sect. 4, we describe the second distance-based model. It uses the duality between flows in the primal graph and distances in the dual graph and allows us to solve the 𝜆-DRAWABILITY in 𝑂(𝑛log2𝑛/loglog𝑛) time.

We also address the partial and simultaneous settings. The classic integer-circulation-based approach can be used to extend connected partial 𝜆-drawings in 𝑂(𝑛log3𝑛) time. In Sect. 5, we build on the distance-based model to extend not-necessarily-connected partial 𝜆-drawings in 𝑂(𝑛4/3log𝑛) time, and to obtain simultaneous 𝜆-drawings in 𝑂(𝜆𝑛10/3log𝑛) time if they exist.

We complement these algorithmic results in Sect. 6 with a proof that 2-DRAWABILITY is NP-hard even for biconnected graphs where all edges have length one or two, and then finish with some concluding remarks in Sect. 7.

Preliminaries
Let 𝛤 be a level-planar drawing of an embedded level-planar graph . The width of 𝛤 is defined as max𝑣∈𝑉𝛤(𝑣)−min𝑣∈𝑉𝛤(𝑣). An integer 𝑥¯ is a gap in 𝛤 if it is 𝛤(𝑣)≠𝑥¯ for all 𝑣∈𝑉, 𝛤(𝑣1)<𝑥¯ and 𝛤(𝑣2)>𝑥¯ for some 𝑣1,𝑣2∈𝑉, and 𝛤(𝑢)<𝑥¯<𝛤(𝑣) for no edge (𝑢,𝑣)∈𝐸. For example, 2 is a gap in the left drawing in Fig. 1a. A drawing 𝛤 is compact if it has no gap, e.g., the left drawing in Fig. 1b. Note that a 𝜆-drawing of a connected level-planar graph is inherently compact. In a 𝜆-drawing of a non-connected level-planar graph every gap can be eliminated by a horizontal shift. The fact that we only need to consider compact 𝜆-drawings helps us to limit the drawing width. In particular, a compact 𝜆-drawing has width at most (𝜆−1)(𝑛−1).

Let u and v be two vertices on the same level i. With [𝑢,𝑣] (or [u, v] when  is clear from the context) we denote the set of vertices that contains u, v and all vertices in between u and v on level i in . We say that two vertices u and v are consecutive in  when [𝑢,𝑣]={𝑢,𝑣}. Two edges 𝑒=(𝑢,𝑤),𝑒′=(𝑣,𝑥) are consecutive in  when the only edges with one endpoint in [𝑢,𝑣] and the other endpoint in [𝑤,𝑥] are e and 𝑒′. For example, in Fig. 2b, the vertices u and v are consecutive, the vertices x and w are consecutive, and the edges (u, w) and (v, x) are consecutive; and in Fig. 2c, the vertices 𝑣left and 𝑣right are not consecutive.

A flow network 𝐹=(𝑁,𝐴) consists of a set of nodes N connected by a set of directed arcs A. A node is a source if it has no incoming arcs and it is a sink if it has no outgoing arcs. A flow network is an st-graph if it has exactly one source and exactly one sink. Each arc has a demand specified by a function 𝑑:𝐴→ℕ0 and a capacity specified by a function 𝑐:𝐴→ℕ∪{∞} where ∞ means unlimited capacity. A circulation in F is a function 𝜑:𝐴→ℕ0 that assigns an integral flow to each arc of F and satisifies the two following conditions. First, the circulation has to respect the demands and capacities of the arcs, i.e., for each arc 𝑎∈𝐴 it is 𝑑(𝑎)≤𝜑(𝑎)≤𝑐(𝑎). Second, the circulation has to respect flow conservation, i.e., for each node 𝑣∈𝑁 it is ∑(𝑢,𝑣)∈𝐴𝜑(𝑢,𝑣)=∑(𝑣,𝑢)∈𝐴𝜑(𝑣,𝑢). Depending on the flow network no circulation may exist.

Flow Model
In this section, we model the 𝜆-DRAWABILITY as a problem of finding a circulation in a flow network. Let  be an embedded proper k-level graph. As a first step, we add two directed paths 𝑝left and 𝑝right that consist of one vertex on each level from 1 to k to . Insert 𝑝left and 𝑝right into  to the left and right of all other vertices as the left and right boundary, respectively. See Fig. 2a and c.

Fig. 2
figure 2
An embedded level graph  (a). The definition of the arcs of the flow network (b). The graph  together with the paths 𝑝left and 𝑝right in black (c). The resulting flow network 𝐹𝜆 consists of the blue slope arcs and the red space arcs, its nodes are formed by merging the nodes in the gray areas. The red space arcs have a demand of 1 and a capacity of (𝜆−1)(𝑛−1) and the blue slope arcs have a demand of zero and a capacity of 𝜆−1 (Color figure online)

Full size image
From now on, we assume that  contains the left and right boundary.

The flow network 𝐹𝜆 consists of nodes and arcs and is similar to a directed dual of  with the difference that it takes the levels of  into account. In particular, for every edge e of , 𝐹𝜆 contains two nodes 𝑒left and 𝑒right, in the left and the right faces incident to e, and a dual slope arc 𝑒⋆=(𝑒right,𝑒left) with demand 0 and capacity 𝜆−1; see the blue arcs in Fig. 2b and c. The flow across 𝑒⋆ determines the slope of e. Additionally, for every pair of consecutive vertices u, v we add two nodes [𝑢,𝑣]low and [𝑢,𝑣]high to 𝐹𝜆 and connect them by a space arc [𝑢,𝑣]⋆; see the red arcs in Fig. 2b and c. The flow across [𝑢,𝑣]⋆ determines the space between u and v. The space between u and v needs to be at least one to prevent u and v from colliding and can be at most (𝜆−1)(𝑛−1) due to the restriction to compact drawings. So, assign to [𝑢,𝑣]⋆ a demand of one and a capacity of (𝜆−1)(𝑛−1). To obtain the final flow network we merge certain nodes. Let 𝑒=(𝑢,𝑤) and 𝑒′=(𝑣,𝑥) be consecutive edges. Merge the nodes 𝑒right,𝑒′left, the nodes {{𝑢′,𝑣′}high:∀𝑢′,𝑣′~consecutive in~[𝑢,𝑣]} and the nodes {{𝑤′,𝑥′}low:∀𝑤′,𝑥′~consecutive in~[𝑤,𝑥]} into a single node. Next, merge all remaining source and sink nodes into one source node s and one sink node t, respectively. See Fig. 2c, where the gray areas touch nodes that are merged into a single node. Observe that flow network is a connected st-graph. Clearly s is a source and t is a sink. Each remaining node v corresponds to two consecutive edges of , so by construction it has exactly one incoming and one outgoing slope arc, so v is neither a source nor a sink. This also implies that there exists a directed path of slope arcs from s to v, and a directed path of slope arcs from v to t, so the flow network is connected. Finally, to admit non-trivial circulations, insert an arc from t to s with capacity ∞. Observe that 𝐹𝜆 is planar by its construction based on the planar embedding of .

The network 𝐹𝜆 is designed in such a way that the circulations in 𝐹𝜆 correspond bijectively to the 𝜆-drawings of . Let 𝛤 be a drawing of  and let x be the function that assigns to each vertex of  its x-coordinate in 𝛤. We define a dual circulation 𝑥⋆ as follows. Recall that each arc a of 𝐹𝜆−(𝑠,𝑡) is a slope arc or a space arc. If a is a slope arc it is dual to an edge (u, w) of . Then define 𝑥⋆(𝑎):=𝑥(𝑤)−𝑥(𝑢). If a is a space arc it is dual to consecutive vertices u, v of , where u appears left of v. Then define 𝑥⋆(𝑎):=𝑥(𝑣)−𝑥(𝑢). We remark the following, although we defer the proof to the next section.

Lemma 1
Let  be an embedded proper level-planar graph together with a 𝜆-drawing 𝛤. The dual 𝑥⋆ of the function x that assigns to each vertex of  its x-coordinate in 𝛤 is a circulation in 𝐹𝜆.

In the reverse direction, given a circulation 𝜑 in 𝐹𝜆 we define a dual function 𝜑⋆ that, when interpreted as assigning an x-coordinate to the vertices of , defines a 𝜆-drawing of . Refer to the level-1-vertex of 𝑝right as 𝑣right. Start by setting 𝜑⋆(𝑣right)=0, i.e., the x-coordinate of 𝑣right is 0. Process the remaining vertices of the right boundary in ascending order with respect to their levels. Let (u, v) be an edge of the right boundary so that u has already been processed and v has not been processed yet. Then set 𝜑⋆(𝑣)=𝜑⋆(𝑢)+𝜑((𝑢,𝑣)⋆), where (𝑢,𝑣)⋆ is the slope arc dual to (u, v). Let w, x be a pair of consecutive vertices so that x has already been processed and w has not yet been processed yet. Then set 𝜑⋆(𝑤)=𝜑⋆(𝑥)−𝜑([𝑤,𝑥]⋆), where [𝑤,𝑥]⋆ is a space arc. It turns out that 𝜑⋆ defines a 𝜆-drawing of .

Lemma 2
Let  be an embedded proper level-planar graph, let 𝜆∈ℕ and let 𝜑 be a circulation in 𝐹𝜆. Then the dual 𝜑⋆, when interpreted as assigning an x-coordinate to the vertices of , defines a 𝜆-drawing of .

While both Lemmas 1 and  2 can be proven directly, we defer their proofs to Sect. 4 where we introduce the distance model and prove Lemmas 3 and  4, the stronger versions of Lemmas 1 and  2, respectively. Combining Lemmas 1 and  2 we obtain the following.

Theorem 1
Let  be an embedded proper level-planar graph and let 𝜆∈ℕ. The circulations in 𝐹𝜆 correspond bijectively to the 𝜆-drawings of .

Theorem 1 implies that a 𝜆-drawing can be found by applying existing flow algorithms to 𝐹𝜆. For that, first transform our flow network with arc demands to the standard single-source single-sink maximum flow setting without arc demands using the construction due to Kleinberg and Tardos [30, Chapter 7.7]. This construction adds one new “super-source” 𝑠∗ and one new “super-sink” 𝑡∗ to 𝐹𝜆, and connects them with arcs to the other nodes in 𝐹𝜆. In particular, the size of the resulting flow network is linear in the size of 𝐹𝜆. Subdivide the arcs incident to 𝑠∗,𝑡∗ and then remove 𝑠∗,𝑡∗ from the flow network, obtaining an instance of the multiple-source multiple-sink maximum flow problem. Note that this network is planar. Use the 𝑂(𝑛log3𝑛)-time multiple-source multiple-sink maximum flow algorithm due to Borradaile et al. [8] to find a circulation in 𝐹𝜆, or to determine that no circulation exists.

Corollary 1
Let  be an embedded proper level-planar graph and let 𝜆∈ℕ. It can be tested in 𝑂(𝑛log3𝑛) time whether a 𝜆-drawing of  exists, and if so, such a drawing can be found within the same running time.

Connected Partial Drawings
Recall that a partial 𝜆-drawing is a tuple (,,𝛱), where  is an embedded level-planar graph,  is an embedded subgraph of  and 𝛱 is a 𝜆-drawing of . We say that (,,𝛱) is 𝜆-extendable if  admits a 𝜆-drawing 𝛤 whose restriction to  is 𝛱. Here 𝛤 is referred to as a 𝜆-extension of (,,𝛱).

In this section we show that in case  is connected, we can use the flow model to decide whether (,,𝛱) is 𝜆-extendable. Observe that when  is connected 𝛱 is completely defined by the slopes of the edges in  up to horizontal translation. Let 𝐹𝜆 be the flow network corresponding to . In order to fix the slopes of an edge e of  to a value ℓ, we fix the flow across the dual slope arc 𝑒⋆ in  to ℓ. Checking whether a circulation in the resulting flow network exists can be reduced to a multiple-source multiple-sink maximum flow problem, which once again can be solved by the algorithm due to Borradaile et al. [8].

Corollary 2
Let (,,𝛱) be a partial 𝜆-drawing where  is connected. It can be tested in 𝑂(𝑛log3𝑛) time whether (,,𝛱) is 𝜆-extendable, and if so, a corresponding 𝜆-extension can be constructed within the same running time.

Dual Distance Model
A minimum cut (and, equivalently, the value of the maximum flow) of an st-planar graph G can be determined by computing a shortest (𝑠⋆,𝑡⋆)-path in a dual of G [24, 25]. Hassin showed that to construct a flow, it is sufficient to compute the distances from 𝑠⋆ to all other vertices in the dual graph [20]. To the best of our knowledge, this duality has been exploited only for flow networks with arc capacities, but not with arc demands. In this section, we extend this duality to arcs with demands.

The resulting dual distance model improves the running time for the 𝜆-DRAWABILITY, lets us test the existence of 𝜆-extensions of partial 𝜆-drawings for non-connected subgraphs, and allows us to develop an efficient algorithm for testing the existence of simultaneous 𝜆-drawings.

We define 𝐷𝜆 to be the weighted directed dual of 𝐹𝜆 as follows. Let a be an arc of 𝐹𝜆 with demand d(a) and capacity c(a). Further, let 𝑓left and 𝑓right denote the left and the right faces of a in 𝐹𝜆, respectively. The dual 𝐷𝜆 contains 𝑓left and 𝑓right as vertices connected by the directed edge (𝑓left,𝑓right) with weight c(a) and the directed edge (𝑓right,𝑓left) with weight −𝑑(𝑎); see Fig. 3. Equivalently, 𝐷𝜆 is obtained directly from  as follows. Recall that if a is a slope arc, it is 𝑑(𝑎)=0,𝑐(𝑎)=𝜆−1 and 𝑓left,𝑓right correspond to vertices u, w connected by the edge (u, w) in G. So, create for each directed edge (u, w) of  the weighted directed edges (u, w) with weight 𝜆−1 and (w, u) with weight 0 in 𝐷𝜆; see Fig. 3a. If a is not a slope arc then a is a space arc and it is 𝑑(𝑎)=1,𝑐(𝑎)=(𝜆−1)(𝑛−1) and 𝑓left,𝑓right correspond to consecutive vertices u, v in , where u appears to the left of v. So, create for each pair of consecutive vertices u, v in  where u appears to the left of v the weighted directed edges (u, v) with weight (𝜆−1)(𝑛−1) and (v, u) with weight −1 in 𝐷𝜆; see Fig. 3b. Observe that 𝐷𝜆 has the vertex set V of  and a superset of its edges. Figure 4 shows the distance network obtained from the flow network shown in Fig. 2c.

Fig. 3
figure 3
Definition of the dual edges for a flow network arc 𝑎=(𝑢,𝑣) with demand d(a) and capacity c(a). Let 𝑓left and 𝑓right denote the vertices corresponding to the faces to the left and right of a in 𝐹𝜆. Then add the edge (𝑓left,𝑓right) with weight c(a) and the reverse edge (𝑓right,𝑓left) with weight −𝑑(𝑎). The edge weights depend on whether a is a slope arc (a) or a space arc (b)

Full size image
Fig. 4
figure 4
The distance network 𝐷2 obtained from the flow network 𝐹2 shown in Fig. 2c. The x-coordinate of every vertex is its distance from 𝑣right in 𝐷2. Red arcs pointing right have weight (𝜆−1)(𝑛−1)=19, red arcs pointing left have weight −1. Blue arcs pointing up have weight 𝜆−1=1 and blue arcs pointing down have weight 0 (Color figure online)

Full size image
A distance labeling is a function 𝑥:𝑉→ℤ that for every edge (u, v) of 𝐷𝜆 with weight l satisfies 𝑥(𝑣)≤𝑥(𝑢)+𝑙. We also say that (u, v) imposes the distance constraint 𝑥(𝑣)≤𝑥(𝑢)+𝑙. A distance labeling for 𝐷𝜆 is the x-coordinate assignment for a 𝜆-drawing: For an edge (u, v) of 𝐷𝜆 where u, v are consecutive vertices in , the distance labeling guarantees 𝑥(𝑣)≤𝑥(𝑢)−1, i.e., the consecutive vertices are in the correct order and do not overlap. If an edge (u, v) between layers has weight 𝜆−1, then the distance labeling ensures 𝑥(𝑣)≤𝑥(𝑢)+𝜆−1, i.e., (u, v) has a slope in {0,…,𝜆−1}. Computing the shortest distances from 𝑣right in 𝐷𝜆 to every vertex (if they are well-defined) gives a distance labeling that we refer to as the shortest distance labeling. A distance labeling of 𝐷𝜆 does not necessarily exist. This is the case when 𝐷𝜆 contains a negative cycle, e.g., when the in- or out-degree of a vertex in  is strictly larger than 𝜆. For a distance labeling x of 𝐷𝜆 we define a dual circulation 𝑥⋆ as follows. Recall that each arc a of 𝐹𝜆−(𝑡,𝑠) is a slope arc or a space arc. If a is a slope arc it is dual to an edge (u, w) of . Recall that u, w are vertices of 𝐷𝜆 and define 𝑥⋆(𝑎):=𝑥(𝑤)−𝑥(𝑢). If a is a space arc it is dual to consecutive vertices u, v of . Again, u, v are vertices of 𝐷𝜆, define 𝑥⋆(𝑎):=𝑥(𝑣)−𝑥(𝑢).

Lemma 3
Let  be an embedded level-planar graph and 𝛤 be a 𝜆-drawing of . The function x that assigns to each vertex of  its x-coordinate in 𝛤 is a distance labeling of 𝐷𝜆 and its dual 𝑥⋆ is a circulation in 𝐹𝜆.

Proof
Since 𝛤 preserves the embedding of , for each consecutive vertices v,  u, with v preceding u in  it holds that 𝛤(𝑣)<𝛤(𝑢). Because 𝛤 is a grid drawing 𝛤(𝑣)≤𝛤(𝑢)−1, which implies 𝑥(𝑣)≤𝑥(𝑢)+𝑙, where 𝑙=−1 is the weight of (u, v). Since 𝛤 is a 𝜆-drawing, i.e., every edge (u, v) between the two levels has a slope in {0,…𝜆−1}, it holds that 𝛤(𝑢)≤𝛤(𝑣)≤𝛤(𝑢)+𝜆−1, which implies 𝑥(𝑢)≤𝑥(𝑣)+0, for the edge (v, u) of 𝐷𝜆 with weight zero and 𝑥(𝑣)≤𝑥(𝑢)+𝜆−1 for the edge (u, v) of 𝐷𝜆 with weight 𝜆−1. Hence, x is a distance labeling of 𝐷𝜆.

We now show that 𝑥⋆ is a circulation in 𝐹𝜆. Let 𝑓1,𝑓2,…,𝑓𝑡,𝑓𝑡+1=𝑓1 be the faces incident to some node v of 𝐹𝜆 in counter-clockwise order. Let a be the arc incident to v and dual to the edge between 𝑓𝑖 and 𝑓𝑖+1 with 1≤𝑖≤𝑡. If a is an incoming arc, it adds a flow of 𝑥(𝑓𝑖+1)−𝑥(𝑓𝑖) to v. If a is an outgoing arc, it removes a flow of 𝑥(𝑓𝑖)−𝑥(𝑓𝑖+1) from v, or, equivalently, it adds a flow of 𝑥(𝑓𝑖+1)−𝑥(𝑓𝑖) to v. Therefore, the flow through v is ∑𝑖(𝑥(𝑓𝑖+1)−𝑥(𝑓𝑖)). This sum cancels to zero, i.e., the flow is preserved at v.

Now consider an arc a of 𝐹𝜆−(𝑡,𝑠).

If a is a slope arc it is dual to an edge (u, w) of . Then 𝐷𝜆 contains the edge (u, w) with weight c(a), which ensures 𝑥(𝑤)≤𝑥(𝑢)+𝑐(𝑎), so 𝑥⋆(𝑎)≤𝑐(𝑎). It also contains the edge (w, u) with weight −𝑑(𝑎), which ensures 𝑥(𝑢)≤𝑥(𝑤)−𝑑(𝑎), so 𝑥⋆(𝑎)≥𝑑(𝑎).

If a is a space arc it is dual to consecutive vertices u, v of . Then 𝐷𝜆 contains the edge (u, v) with weight c(a), which ensures 𝑥(𝑣)≤𝑥(𝑢)+𝑐(𝑎), so 𝑥⋆(𝑎)≤𝑐(𝑎). It also contains the edge (v, u) with weight −𝑑(𝑎), which ensures 𝑥(𝑢)≤𝑥(𝑣)−𝑑(𝑎), so 𝑥⋆(𝑎)≥𝑑(𝑎).

Finally, the arc (t, s) has demand 0 and capacity ∞, so its demand is satisfied and its capacity is not exceeded.

Hence, 𝑥⋆ is indeed a circulation in 𝐹𝜆. ◻

Recall from Sect. 3 that for a circulation 𝜑 in 𝐹𝜆 we define a dual drawing 𝜑⋆ by setting the x-coordinates of the vertices of  as follows. For the lowest vertex of the right boundary set 𝜑⋆(𝑣right)=0. Process the remaining vertices of the right boundary in ascending order with respect to their levels. Let (u, v) be an edge of the right boundary so that u has already been processed and v has not been processed yet. Then set 𝜑⋆(𝑣)=𝜑⋆(𝑢)+𝜑((𝑢,𝑣)⋆), where (𝑢,𝑣)⋆ is the slope arc dual to (u, v). Let w, x be a pair of consecutive vertices so that x has already been processed and w has not yet been processed yet. Then set 𝜑⋆(𝑤)=𝜑⋆(𝑥)−𝜑([𝑤,𝑥]⋆), where [𝑤,𝑥]⋆ is a space arc. It turns out that 𝜑⋆ is a distance labeling of 𝐷𝜆 and a 𝜆-drawing of .

Lemma 4
Let  be an embedded level-planar graph, let 𝜆∈ℕ, and let 𝜑 be a circulation in 𝐹𝜆. The dual 𝜑⋆ is a distance labeling of 𝐷𝜆 and, when interpreted as assigning an x-coordinate to the vertices of , defines a 𝜆-drawing of .

Proof
We show that 𝜑⋆ is a distance labeling in 𝐷𝜆. The algorithm described above assigns a value to every vertex of 𝐷𝜆. We now show that 𝜑⋆ is indeed a distance labeling by showing that every edge satisfies a distance constraint.

Observe that the distance constraints imposed by edges dual to the space arcs are satisfied by construction. To show that the distance constraints imposed by edges dual to the slope arcs are also satisfied, we prove that for every edge (u, v), it holds that 𝜑⋆(𝑣)=𝜑⋆(𝑢)+𝜑((𝑢,𝑣)⋆). We refer to this as condition  for short. Since 𝜑((𝑢,𝑣)⋆)≤𝜆−1 and the weight l of (u, v) is 𝑙=𝜆−1 we obtain 𝜑⋆(𝑣)=𝜑⋆(𝑢)+ℓ, which implies that 𝜑⋆ is a distance labeling of 𝐷𝜆.

Fig. 5
figure 5
Proof of Lemma 4. Sets A and B contain the incoming and outgoing red flow network arcs incident to the gray oval, respectively (Color figure online)

Full size image
The proof is by induction based on the bottom to top and right to left order among the edges of 𝐷𝜆. We say that (a, b) precedes (c, d) if either ℓ(𝑎)<ℓ(𝑐), or ℓ(𝑎)=ℓ(𝑐) and a is to the right of c, or ℓ(𝑎)=ℓ(𝑐) and b is to the right of d (in case 𝑎=𝑐). For the base case observe that the edges with both end-vertices on the first level and the edges of 𝑝right satisfy condition  by the definition of 𝜑⋆. Now let (u, v) be an edge not addressed in the base case and assume that for every edge (𝑢′,𝑣′) preceding edge (u, v) condition  holds. For the inductive step we show that condition  also holds for (u, v). Let (𝑢′,𝑣′) denote the edge to the right of (u, v) so that (u, v) and (𝑢′,𝑣′) are consecutive; see Fig. 5. Because v is not the rightmost vertex on its level this edge exists. Let A denote the set of space arcs [𝑢1,𝑢2]⋆ in 𝐹𝜆 with 𝑢1,𝑢2∈[𝑢′,𝑢]. Analogously, let B denote the set of space arcs [𝑣1,𝑣2]⋆ in 𝐹𝜆 with 𝑣1,𝑣2∈[𝑣′,𝑣]. It is 𝜑⋆(𝑣)=𝜑⋆(𝑣′)−∑𝑏∈𝐵𝜑(𝑏) by definition of 𝜑⋆. Further, by induction hypothesis and since (𝑢′,𝑣′) precedes (u, v) it is 𝜑⋆(𝑣′)=𝜑⋆(𝑢′)+𝜑((𝑢′,𝑣′)⋆). Inserting the latter into the former equation, we obtain

𝜑⋆(𝑣)=𝜑⋆(𝑢′)+𝜑((𝑢′,𝑣′)⋆)−∑𝑏∈𝐵𝜑(𝑏).
(1)
Again, by definition of 𝜑⋆, it is 𝜑⋆(𝑢)=𝜑⋆(𝑢′)−∑𝑎∈𝐴𝜑(𝑎). Solving for 𝜑⋆(𝑢′) and inserting into (1) we obtain

𝜑⋆(𝑣)=𝜑⋆(𝑢)+∑𝑎∈𝐴𝜑(𝑎)+𝜑((𝑢′,𝑣′)⋆)−∑𝑏∈𝐵𝜑(𝑏).
(2)
Flow conservation on the vertex of 𝐹𝜆 to which edges of A and B are incident gives

𝜑((𝑢′,𝑣′)⋆)+∑𝑎∈𝐴𝜑(𝑎)=𝜑((𝑢,𝑣)⋆)+∑𝑏∈𝐵𝜑(𝑏).
(3)
Solving Eq. (3) for 𝜑((𝑢′,𝑣′)⋆) and then inserting it into Eq. (2) yields 𝜑⋆(𝑣)=𝜑⋆(𝑢)+𝜑((𝑢,𝑣)⋆), i.e., condition  holds for (u, v). Therefore 𝜑⋆ is a distance labeling, which we have shown to define a 𝜆-drawing of . ◻

Because 𝐷𝜆 is planar we can use the 𝑂(𝑛log2𝑛/loglog𝑛)-time shortest path algorithm due to Mozes and Wulff-Nilsen [35] to compute the shortest distance labeling. This improves our 𝑂(𝑛log3𝑛)-time algorithm from Sect. 3.

Theorem 2
Let  be an embedded proper level-planar graph. The distance labelings of 𝐷𝑘 correspond bijectively to the 𝜆-drawings of . If such a drawing exists, it can be found in 𝑂(𝑛log2𝑛/loglog𝑛) time.

Partial and Simultaneous Drawings
In this section we use the distance model from Sect. 4 to construct partial and simultaneous 𝜆-drawings. We start with introducing a useful kind of drawing. Let 𝛤 be a 𝜆-drawing of . We call 𝛤 a 𝜆-rightmost drawing when there exists no 𝜆-drawing 𝛤′ with 𝛤(𝑣)<𝛤′(𝑣) for some 𝑣∈𝑉. In this definition, we assume 𝑥(𝛤(𝑣right))=𝑥(𝛤′(𝑣right))=0 to exclude trivial horizontal translations. Hence, a drawing is rightmost when every vertex is at its rightmost position across all level-planar 𝜆-slope grid drawings of . It is not trivial that a 𝜆-rightmost drawing exists, but it follows directly from the definition that if such a drawing exists, it is unique. The following lemma establishes the relationship between 𝜆-rightmost drawings and shortest distance labelings of 𝐷𝜆.

Lemma 5
Let  be an embedded proper level-planar graph. If 𝐷𝜆 has a shortest distance labeling it describes the 𝜆-rightmost drawing of .

Proof
The shortest distance labeling of 𝐷𝜆 is maximal in the sense that for any vertex v there exists a vertex u and an edge (u, v) with weight l so that it is 𝑥(𝑣)=𝑥(𝑢)+𝑙. Recall that the definition of distance labelings only requires 𝑥(𝑣)≤𝑥(𝑢)+𝑙. The claim then follows by induction over V in ascending order with respect to the shortest distance labeling. ◻

Partial Drawings
Let (,,𝛱) be a partial 𝜆-drawing. In Sect. 3.1 we have shown that the flow model can be adapted to check whether (,,𝛱) has a 𝜆-extension, in case  is connected. In this section, we show how to adapt the distance model to extend partial 𝜆-drawings, including the case  is disconnected. Recall that the distance label of a vertex v is its x-coordinate. A partial 𝜆-drawing fixes the x-coordinates of the vertices of . The idea is to express this with additional constraints in 𝐷𝜆. Let 𝑣ref be a vertex of . In a 𝜆-extension of (,,𝛱), the relative distance along the x-axis between a vertex v of  and vertex 𝑣ref should be 𝑑𝑣=𝛱(𝑣ref)−𝛱(𝑣). This can be achieved by adding an edge (𝑣,𝑣ref) with weight 𝑑𝑣 and an edge (𝑣ref,𝑣) with weight −𝑑𝑣. The first edge ensures that it is 𝑥(𝑣ref)≤𝑥(𝑣)+𝑑𝑣, i.e., 𝑥(𝑣)≥𝑥(𝑣ref)−𝑑𝑣 and the second edge ensures 𝑥(𝑣)≤𝑥(𝑣ref)−𝑑. Together, this gives 𝑥(𝑣)=𝑥(𝑣ref)−𝑑𝑣. Let 𝐷𝜆,𝛱 be 𝐷𝜆 augmented by the edges {(𝑣,𝑣ref),(𝑣ref,𝑣):∀𝑣∈} with weights as described above.

To decide existence of 𝜆-extension and in affirmative construct the corresponding drawing we compute the shortest distance labeling in 𝐷𝜆,𝛱. Observe that this network can contain negative cycles and therefore no shortest distance labeling. Unfortunately, 𝐷𝜆,𝛱 is not planar, and thus we cannot use the embedding-based algorithm of Mozes and Wulff-Nilsen. However, since all newly introduced edges have 𝑣ref as one endpoint, 𝑣ref is an apex of 𝐷𝜆, i.e., removing 𝑣ref from 𝐷𝜆,𝛱 makes it planar. Therefore 𝐷𝜆,𝛱 can be recursively separated by separators of size 𝑂(𝑛√). The 𝑂(𝑛4/3log𝑛)-time shortest-path algorithm by Henzinger et al. [22] relies not on planarity but only on 𝑂(𝑛√)-sized separators [19, page 869]. So, run this algorithm to compute the shortest distance labeling of 𝐷𝜆,𝛱.

Theorem 3
Let (,,𝛱) be a partial 𝜆-drawing. In 𝑂(𝑛4/3log𝑛) time it can be determined whether (,,𝛱) has a 𝜆-extension and in the affirmative the corresponding drawing can be computed within the same running time.

Simultaneous Drawings
In the simultaneous 𝜆-drawing problem, we are given a tuple (1,2) of two embedded level-planar graphs that share a common subgraph 1∩2=1∩2. We assume w.l.o.g. that 𝐺1 and 𝐺2 share the same right boundary and that the embeddings of 1 and 2 coincide on 1∩2. The task is to determine whether there exist 𝜆-drawings 𝛤1,𝛤2 of 1,2, respectively, so that 𝛤1 and 𝛤2 coincide on the shared graph 1∩2. The approach is the following. Start by computing the 𝜆-rightmost drawings of 1 and 2. Then, as long as these drawings do not coincide on 1∩2 add necessary constraints to 𝐷𝜆1 and 𝐷𝜆2. This process terminates after a polynomial number of iterations, either by finding a simultaneous 𝜆-drawing, or by determining that no such drawing exist.

Finding the necessary constraints works as follows. Suppose that 𝛤1,𝛤2 are the 𝜆-rightmost drawings of 1,2, respectively. Because both 1 and 2 have the same right boundary they both contain vertex 𝑣right. We define the coordinates in the distance labelings of 𝐷𝜆1 and 𝐷𝜆2 in terms of this reference vertex.

Now suppose that for some vertex v of 1∩2 the x-coordinates in 𝛤1 and 𝛤2 differ, i.e., it is 𝛤1(𝑣)≠𝛤2(𝑣). Assume 𝛤1(𝑣)<𝛤2(𝑣) without loss of generality. Because 𝛤1 is a rightmost drawing, there exists no drawing of 1 where v has an x-coordinate greater than 𝛤1(𝑣). In particular, there exist no simultaneous drawings where v has an x-coordinate greater than 𝛤1(𝑣). Therefore, we must search for a simultaneous drawing where 𝛤2(𝑣)≤𝛤1(𝑣). We can enforce this constraint by adding an edge (𝑣right,𝑣) with weight 𝛤1(𝑣) into 𝐷𝜆2. We then attempt to compute the drawing 𝛤2 of 2 defined by the shortest distance labeling in 𝐷𝜆2. This attempt produces one of two possible outcomes. The first possibility is that there now exists a negative cycle in 𝐷𝜆2. This means that there exists no drawing 𝛤2 of 𝐺2 with 𝛤2(𝑣)≤𝛤(𝑣). Because 𝛤1 is a rightmost drawing, this means that no simultaneous drawings of 1 and 2 exist. The algorithm then terminates and rejects this instance. The second possibility is that we obtain a new drawing 𝛤2. This drawing is rightmost among all drawings that satisfy the added constraint 𝛤2(𝑣)≤𝛤1(𝑣). In this case there are again two possibilities. Either we have 𝛤1(𝑣)=𝛤2(𝑣) for each vertex v in 1∩2. In this case 𝛤1 and 𝛤2 are simultaneous drawings and the algorithm terminates. Otherwise there exists at least one vertex w in 1∩2 with 𝛤1(𝑤)≠𝛤2(𝑤). We then repeat the procedure just described for adding a new constraint.

We repeat this procedure of adding other constraints. To bound the number of iterations, recall that we only consider compact drawings, i.e., drawings whose width is at most (𝜆−1)(𝑛−1). In each iteration the x-coordinate of at least one vertex is decreased by at least one. Therefore, each vertex is responsible for at most (𝜆−1)(𝑛−1) iterations. The total number of iterations is therefore bounded by 𝑛(𝜆−1)(𝑛−1)∈𝑂(𝜆𝑛2).

Note that due to the added constraints 𝐷𝜆1 and 𝐷𝜆2 are generally not planar. However, all newly inserted arcs are incident to 𝑣right, so 𝑣right is an apex of 𝐷𝜆𝑖 for 𝑖=1,2. As in the previous section, we apply the 𝑂(𝑛4/3log𝑛)-time shortest-path algorithm by Henzinger et al. to compute the shortest distance labelings. This gives the following.

Theorem 4
Let 1,2 be embedded level-planar graphs that share a common subgraph 1∩2. In 𝑂(𝜆𝑛10/3log𝑛) time it can be determined whether 1,2 admit simultaneous 𝜆-drawings and if so, such drawings can be computed within the same running time.

Complexity of the General Case
So far, we have considered 𝜆-DRAWABILITY problem for proper level graphs, i.e., level graphs where all edges have length one. In this section, we consider the general case, where edges may have arbitrary lengths. We say that an edge with length two or more is long. One approach would be to try to adapt the flow model from Sect. 3 to this more general case. By subdividing long edges, any level graph G can be transformed into a proper level graph 𝐺′. Observe that two edges in 𝐺′ created by subdividing the same long edge must have the same slope in order to yield a fixed-slope drawing of G. In the context of our flow model, this means that the amount of flow across the corresponding slope arcs must be the same. Our problem then becomes an instance of the integer equal flow problem. In this problem, we are given a flow network along with disjoint sets 𝑅1,𝑅2,…,𝑅𝑡 of arcs. The task is to find the maximum flow from s to t such that the amount of flow across arcs in the same set 𝑅𝑖 is the same. This problem was introduced and shown to be NP-hard by Sahni [41]. The problem remains NP-hard in special cases [18, 42] and the integrality gap of the fractional LP can be arbitrarily large [34].

In this section we show that 𝜆-DRAWABILITY NP-complete even for 𝜆=2, biconnected graphs where all edges have length one or two. To this end, we present a reduction from rectilinear planar monotone 3-SAT [12]. An instance of this problem consists of a set of variables X and a set of clauses C. A clause is positive (negative) when it consists of only positive (negative) literals. We say that the instance is monotone when each clause is either positive or negative. The corresponding variable-clause graph consists of the vertices 𝑋∪𝐶 and each undirected edge {𝑥,𝑐} where 𝑥∈𝑋 is a variable that appears in clause 𝑐∈𝐶. The variable-clause graph admits a planar drawing such that (i) the variables are aligned along a virtual horizontal line ℓ𝑋, (ii) positive clauses are drawn as vertices above ℓ𝑋, and symmetrically (iii)negative clauses are drawn as vertices below ℓ𝑋. See Fig. 6.

Fig. 6
figure 6
An instance of planar monotone 3-SAT

Full size image
Our reduction works by first replacing every vertex that corresponds to a variable by a variable gadget and every vertex that corresponds to a positive (negative) clause by a positive (negative) clause gadget. All three gadgets consist of fixed and movable parts. The fixed parts only admit one level-planar two-slope drawing, whereas the movable parts admit two or more drawings depending on the choice of slope for some edges. Second, the gadgets are connected by a common fixed frame. All fixed parts of the gadgets are connected to the common frame in order to provide a common point of reference. The movable parts of the gadgets then interact in such a way that any level-planar two-slope drawing induces a solution to the underlying planar monotone 3-SAT instance.

Fig. 7
figure 7
The variable gadget drawn in the “true” configuration (a) and the “false” configuration (b)

Full size image
The variable gadget consists of a number of connectors arranged around a fixed horizontal line that connects all variable gadgets along the virtual line of variables ℓ𝑋. See Fig. 7, where the fixed structure is shaded in gray. Vertices drawn as squares are fixed, i.e., they cannot change their position relative to other vertices drawn as squares. Vertices drawn as circles are movable, i.e., they can change their position relative to vertices drawn as squares. The line of variables ℓ𝑋 extends from the the square vertices on the left and right boundaries of the drawing. Every connector consists of two pins: the movable assignment pin and the fixed reference pin. The variable gadget in Fig. 7 features four connectors: two above the horizontal line and two below the horizontal line. Assignment pins are shaded in yellow and reference pins are shaded in gray. The relative position of the assignment pin and the reference pin of one connector encodes the truth assignment of the underlying variable. Moreover, the reference pin allows the fixed parts of the clause gadgets to be connected to the variable gadgets and thereby to the common frame. Comparing Fig. 7a and b, observe how the relative position of the two pins of each connector changes depending on the truth assignment of the underlying variable. The key structure of the variable gadget is that the position of the assignment pins of one variable gadget are coordinated by long edges. In Fig. 7, long edges are drawn as thick lines. Changing the slope of these long edges moves all assignment pins above the horizontal line in one direction and all assignment pins below the horizontal line in the reverse direction. In this way, all connectors encode the same truth assignment of the underlying variable. Note that we can introduce as many connectors as needed for any one variable.

The positive clause gadget consists of a fixed boundary, a movable wiggle and three assignment pin endings. See Fig. 8, where the fixed boundary is shaded in gray, the wiggle is highlighted in blue and the assignment pin endings are highlighted in yellow.

Fig. 8
figure 8
The positive clause gadget when the drawing when at least one variable is assigned to true (a–c). No planar drawing exists when all variables are assigned to false (d), because this leads to intersections, e.g., at the vertices marked in red

Full size image
Fig. 9
figure 9
The negative clause gadget when at least one variable is assigned to false (a–c). No drawing exists when all variables are assigned to true (d), because this leads to intersections, e.g., at the vertices marked in red. Note the symmetry to the positive clause gadget in Fig. 8

Full size image
The fixed boundary is connected to the reference pin of the variable gadget that is rightmost among the connected variable gadgets. Because the variable gadgets are fixed to the common frame, the boundary of the positive clause gadget is also connected to the common frame. The assignment pin endings are connected to assignment pins of connectors of the corresponding variable gadgets. The idea of the positive clause gadget is that the wiggle has to wiggle through the space bounded by the assignment pin endings on the left and the fixed boundary on the right. Recall that the assignment pins change their horizontal position depending on the truth assignment of their underlying variables. The positive clause gadget is designed so that the wiggle can always be drawn, except for the case when all variables are assigned to false. See Fig. 8a–c, which shows the three possible situations when exactly one variable is assigned to true. In any case where at least one variable is assigned to true the wiggle can be drawn in one of the three ways shown. However, as shown in Fig. 8d, the wiggle cannot be drawn in the case where all variables are assigned to false. The reason for this is that the the assignment pin endings get so close to the fixed boundary that they leave too little space for the wiggle to be drawn. This means that some vertices must intersect, for example those shown in red in Fig. 8d.

The negative clause gadgets works very similarly. It is drawn below the horizontal line of variables and it forces at least one of the incident variable gadgets to be configured as false. See Fig. 9 which shows admissible drawings (a–c) and that the case when all incident variables are configured as true cannot occur (d). Note that this uses the design of the variable gadget that the assignment and reference pins below the horizontal line are closer when the variable is assigned to true (i.e., the inverse situation compared to the situation above the horizontal line).

It is evident that any level-planar two-slope drawing of the resulting graph induces a solution of the underlying planar monotone 3-SAT problem and vice versa. Note that the variable gadgets become biconnected when embedded into the common frame and that the clause gadgets are biconnected by design. Furthermore, all long edges have length two. We therefore conclude the following.

Theorem 5
𝜆-DRAWABILITY is NP-complete even for 𝜆=2 and biconnected graphs where all edges have length one or two.

Conclusion
In this paper we studied 𝜆-drawings, i.e., level-planar drawings with 𝜆 slopes. We model 𝜆-drawings of proper level-planar graphs as integer flow networks. This lets us compute 𝜆-drawings and extend connected partial 𝜆-drawings in 𝑂(𝑛log3𝑛) time. We extend the duality between integer flows in a primal graph and shortest distances in its dual to obtain a more powerful distance model. This distance model lets us find 𝜆-drawings in 𝑂(𝑛log2𝑛/loglog𝑛) time, extend not-necessarily-connected partial 𝜆-drawings in 𝑂(𝑛4/3log𝑛) time and find simultaneous 𝜆-drawings in 𝑂(𝜆𝑛10/3log𝑛) time.

In the non proper case, testing the existence of a 2-drawing becomes NP-hard, even for biconnected graphs with maximum edge length two. This leaves little room to extend our polynomial-time algorithms for more general classes of level-planar graphs with fixed embedding.

An interesting problem that remains open is that of finding 𝜆-drawings when the embedding is not fixed. For orthogonal drawings, the SPQR-tree played a key role in going from optimizing a given fixed embedding [43] to optimizing across all possible embeddings of a graph [7]. A recent SPQR-tree-like embedding representation for level planarity [11] might enable a similar leap for 𝜆-drawings.