A bipartite graph 𝐺=(𝑈,𝑉,𝐸) is convex if the vertices in V can be linearly ordered such that for each vertex 𝑢∈𝑈, the neighbors of u are consecutive in the ordering of V. An induced matching H of G is a matching for which no edge of E connects endpoints of two different edges of H. We show that in a convex bipartite graph with n vertices and m weighted edges, an induced matching of maximum total weight can be computed in 𝑂(𝑛+𝑚) time. An unweighted convex bipartite graph has a representation of size O(n) that records for each vertex 𝑢∈𝑈 the first and last neighbor in the ordering of V. Given such a compact representation, we compute an induced matching of maximum cardinality in O(n) time. In convex bipartite graphs, maximum-cardinality induced matchings are dual to minimum chain covers. A chain cover is a covering of the edge set by chain subgraphs, that is, subgraphs that do not contain induced matchings of more than one edge. Given a compact representation, we compute a representation of a minimum chain cover in O(n) time. If no compact representation is given, the cover can be computed in 𝑂(𝑛+𝑚) time. All of our algorithms achieve optimal linear running time for the respective problem and model, and they improve and generalize the previous results in several ways: The best algorithms for the unweighted problem versions had a running time of 𝑂(𝑛2) (Brandstädt et al. in Theor. Comput. Sci. 381(1–3):260–265, 2007. https://doi-org.ezproxy.auckland.ac.nz/10.1016/j.tcs.2007.04.006). The weighted case has not been considered before.

Introduction
A bipartite graph 𝐺=(𝑈,𝑉,𝐸) is convex if the vertices in V can be numbered as 1,2,…,𝑛𝑉 so that the neighbors of every vertex 𝑖∈𝑈 form an interval {𝐿𝑖,𝐿𝑖+1,𝐿𝑖+2,…,𝑅𝑖}⊆{1,2,…,𝑛𝑉}, which we denote by [𝐿𝑖,𝑅𝑖], see Fig. 1a. For such graphs, we consider the problem of computing an induced matching (a) of maximum cardinality or (b) of maximum total weight, for graphs with edge weights.

Fig. 1
figure 1
a A convex bipartite graph 𝐺=(𝑈,𝑉,𝐸) containing an induced matching H of size 3, highlighted in red. Since we use natural numbers as elements of U and V, we will explicitly indicate whether we regard a number x as a vertex of U or of V. There is no induced matching with more than 3 edges: vertex 3∈𝑈 is adjacent to all vertices of V except 1∈𝑉. Thus, if we match 3∈𝑈, this can only lead to induced matchings of size at most 2. Furthermore, we cannot simultaneously match 1∈𝑈 and 2∈𝑈 since every neighbor of 2∈𝑈 is also adjacent to 1∈𝑈. b A minimum chain cover of G with 3 chain subgraphs 𝑍1,𝑍2,𝑍3 (in different colors and dash styles), providing an independent proof that H is optimal. Here, 𝑍1,𝑍2,𝑍3 have disjoint edge sets, which is not necessarily the case in general. c The compact representation of G

Full size image
An induced matching 𝐻⊆𝐸 is a matching such that the subgraph of G induced by the matched vertices has H as its edge set. This amounts to requiring that no edge of E connects endpoints of two different edges of H, see Fig. 1a. More formally, a set 𝐻⊆𝐸 is an induced matching in G if for any two distinct edges (𝑎,𝑏),(𝑎′,𝑏′)∈𝐻, the four vertices 𝑎,𝑏,𝑎′,𝑏′ are pairwise distinct, and none of the edges 𝑎𝑎′,𝑎𝑏′,𝑏𝑎′,𝑏𝑏′ is present in E.

In terms of the line graph, an induced matching is an independent set in the square of the line graph. The square of a graph connects every pair of nodes whose distance is one or two. Accordingly, we call two edges of E independent if they can appear together in an induced matching, or in other words, if their endpoints induce a 2𝐾2 (a disjoint union of two edges) in G. Otherwise, they are called dependent.

In convex bipartite graphs, maximum-cardinality induced matchings are dual to minimum chain covers. A chain graph Z is a bipartite graph that contains no induced matching of more than one edge, i. e., it contains no pair of independent edges. (Chain graphs are also called difference graphs [13] or non-separable bipartite graphs [8].) A chain cover of a graph G with edge set E is a set of (not necessarily induced) chain subgraphs 𝑍1,𝑍2,…,𝑍𝑘 of G such that the union of the edge sets of 𝑍1,𝑍2,…,𝑍𝑘 is E, see Fig. 1b. A chain cover with k chain subgraphs provides an obvious certificate that the graph cannot contain an induced matching with more than k edges. We will elaborate on this aspect of a chain cover as a certificate of optimality in Sect. 5. A minimum chain cover of G is a chain cover with the smallest possible number k of chain subgraphs. In a convex bipartite graph, we have the following strong duality statement, which is due to Yu et al. [27]: the maximum size of an induced matching is equal to the minimum number of chain subgraphs of a chain cover, see Theorem 3.

We denote the number of vertices by 𝑛𝑈=|𝑈|, 𝑛𝑉=|𝑉|, 𝑛=𝑛𝑈+𝑛𝑉, and the number of edges by 𝑚=|𝐸|. If a convex graph is given as an ordinary bipartite graph without the proper numbering of V, it can be transformed into this form in linear time 𝑂(𝑛+𝑚) [2]. (In terms of the bipartite adjacency matrix, convexity is the well-known consecutive-ones property.) Unweighted convex bipartite graphs have a natural implicit representation [24] of size O(n), which is often called a compact representation [14, 23]: every interval {𝐿𝑖,𝐿𝑖+1,…,𝑅𝑖} is specified by its endpoints 𝐿𝑖 and 𝑅𝑖, see Fig. 1c. Since the numbering of V can be computed in 𝑂(𝑛+𝑚) time, it is easy to obtain a compact representation in total time 𝑂(𝑛+𝑚) [23, 25]. The chain covers that we construct will consist of convex bipartite subgraphs with the same ordering of V as the original graph. Thus, we will be able to use the same representation for the chain graphs of a chain cover.

Related Work and Motivation The problem of finding an induced matching of maximum size was first considered by Stockmeyer and Vazirani [26] as the “risk-free marriage problem” with applications in interference-free network communication. The decision version of the problem is known to be NP-complete in many restricted graph classes [5, 16, 17], in particular bipartite graphs [5, 17] that are 𝐶4-free [17] or have maximum degree 3 [17]. On the other hand, it can be solved in linear time in chordal graphs [4], and in polynomial time in weakly chordal graphs [6], trapezoid graphs, k-interval-dimension graphs and co-comparability graphs [12], amongst others. For a more exhaustive survey we refer to [9].

The class of convex bipartite graphs was introduced by Fred Glover [11], who motivates the computation of matchings in these graphs with industrial manufacturing applications. Items that can be matched when some quantity fits up to a certain tolerance naturally lead to convex bipartite graphs. The computation of matchings in convex bipartite graphs also corresponds to a scheduling problem of tasks of discrete length on a single disjunctive resource [15]. The problem of finding a (classic, not induced) matching of maximum cardinality in convex bipartite graphs has been studied extensively [10, 11, 25] culminating in an O(n) algorithm when a compact representation of the graph is given [25]. Several other combinatorial problems have been studied in convex bipartite graphs. While some problems have been shown to be NP-complete even if restricted to this graph class [1], many problems that are NP-hard in general can be solved efficiently in convex bipartite graphs. For example, a maximum independent set can be found in O(n) time (assuming a compact representation) [23] and the existence of Hamiltonian cycles can be decided in 𝑂(𝑛2) time [19]. For a comprehensive summary we refer to [14].

One of the applications given by Stockmeyer and Vazirani [26] for the induced matching problem can be stated as follows. We want to test (or use) a maximum number of connections between receiver-sender pairs in a network. However, testing a particular connection produces noise so that no other node in reach may be tested simultaneously. We remark that this type of motivation extends very naturally to convex bipartite graphs when we consider wireless networks in which nodes broadcast or receive messages in specific frequency ranges. Further, weighted edges can model the importance of connections.

Recently, Panda et al. [20] have built on our results to obtain polynomial algorithms for finding maximum-weight induced matchings in circular-convex and triad-convex bipartite graphs. These graph classes generalize convex bipartite graphs. Their algorithms use Theorem 1 of our paper as a subroutine.

Previous Work Yu et al. [27] describe an algorithm that finds both a maximum-cardinality induced matching and a minimum chain cover in a convex bipartite graph in runtime 𝑂(𝑚2). Their procedure is improved by Brandstädt et al. [3], resulting in a runtime of 𝑂(𝑛2). Chang [7] computes maximum-cardinality induced matchings and minimum chain covers in 𝑂(𝑛+𝑚) time in bipartite permutation graphs, which form a proper subclass of convex bipartite graphs.

Our Contribution We improve and generalize the previous results in several ways.

In Sect. 2 we give an algorithm for finding a maximum-weight induced matching in a convex bipartite graph in 𝑂(𝑛+𝑚) time. The previous best algorithm [3] had a runtime of 𝑂(𝑛2) and was restricted to the unweighted case.

In Sect. 3 we show that for the unweighted case, a further speed-up is possible if a compact representation of the graph is given: we specialize our algorithm from Sect. 2 to find induced matchings of maximum cardinality in O(n) runtime.

In Sect. 4 we extend the approach from Sect. 3 to obtain in O(n) time a compact representation of a minimum chain cover. If the input graph is not given in compact form, our algorithm can be adapted to produce a minimum chain cover (in standard representation) in 𝑂(𝑛+𝑚) time. This improves the previous best algorithm [3], which had a runtime of 𝑂(𝑛2).

All of our algorithms achieve optimal running time for the respective problem and model. Our results for finding a maximum-cardinality induced matching also improve the running times of the algorithms of Pandey et al. [21] for the circular-convex and triad-convex case, as they use the convex case as a building block.

An induced matching together with a chain cover of the same cardinality constitute a certificate of optimality, of linear size. In Sect. 5, we show how to check this certificate for validity with very simple linear time algorithms. Thus, our algorithms for the unweighted case are certifying algorithms, see [18] for a survey about this concept.

Strong duality suggests that there should be a weighted chain cover with the same weight as the maximum weight of an induced matching in a convex bipartite graph. We discuss this aspect in Sect. 6 and leave it as an open problem to extend our maximum-weight matching algorithm to an efficient algorithm that also finds a minimum-weight chain cover.

Maximum-Weight Induced Matchings
In this section, we compute a maximum-weight induced matching of a given edge-weighted convex bipartite graph 𝐺=(𝑈,𝑉,𝐸) in time 𝑂(𝑛+𝑚). We generally write indices 𝑖∈𝑈 as superscripts and indices 𝑗∈𝑉 as subscripts. We consider E as a subset of 𝑈×𝑉. We assume that 𝑉={1,…,𝑛𝑉} is numbered as described in Sect. 1 and the interval {𝐿𝑖,𝐿𝑖+1,…,𝑅𝑖}⊆𝑉 of each vertex 𝑖∈𝑈 is given by the left endpoint 𝐿𝑖 and right endpoint 𝑅𝑖. Each edge (𝑖,𝑗)∈𝐸 has a weight 𝐶𝑖𝑗.

Our dynamic-programming approach considers the following subproblems: For an edge (𝑖,𝑗)∈𝐸, we define 𝑊𝑖𝑗 as the cost of the maximum-weight induced matching that uses the edge (i, j) and contains only edges in 𝑈×{1,…,𝑗}. As we will see, the following dynamic-programming recursion computes 𝑊𝑖𝑗:

𝑊𝑖𝑗=𝐶𝑖𝑗+max({𝑊𝑖′𝑗′∣𝑅𝑖′<𝑗, 𝑗′<𝐿𝑖}∪{0})
(1)
The range over which the maximum is taken is illustrated in Fig. 2. In this recursion, we build the induced matching H of weight 𝑊𝑖𝑗 by adding the edge (i, j) to some induced matching 𝐻′ of weight 𝑊𝑖′𝑗′. We want H to be an induced matching: By construction, the edge (𝑖′,𝑗′) is independent of (i, j), but it remains to show that the other edges of 𝐻′ are also independent of (i, j). In order to prove this (Lemma 2), we use some sort of transitivity of the independence relation for edge pairs (Lemma 1). First we state an observation:

Fig. 2
figure 2
The table entries that enter in the computation of 𝑊𝑖𝑗 are shaded: They lie in rows that end to the left of 𝑊𝑖𝑗 (marked by arrows), and only the entries to the left of 𝐿𝑖 are considered

Full size image
Proposition 1
Two edges (i, j) and (𝑖′,𝑗′) are independent if and only if 𝑗′∉[𝐿𝑖,𝑅𝑖] and 𝑗∉[𝐿𝑖′,𝑅𝑖′]. ◻

We emphasize that the independence of (i, j) and (𝑖′,𝑗′) does not require that the intervals [𝐿𝑖,𝑅𝑖] and [𝐿𝑖′,𝑅𝑖′] are disjoint, see, e.g., edges (4,6) and (5,9) in Fig. 1a.

Lemma 1
Let (𝑖″,𝑗″),(𝑖′,𝑗′),(𝑖,𝑗)∈𝐸 with 𝑗″<𝑗′<𝑗. Assume that (𝑖″,𝑗″) and (𝑖′,𝑗′) are independent, and (𝑖′,𝑗′) and (i, j) are independent. Then (𝑖″,𝑗″) and (i, j) are independent.

Proof
By Proposition 1, we have 𝑗″≤𝑅𝑖″<𝑗′≤𝑅𝑖′<𝑗 and 𝑗″<𝐿𝑖′≤𝑗′<𝐿𝑖≤𝑗. Thus, 𝑗∉[𝐿𝑖″,𝑅𝑖″] and 𝑗″∉[𝐿𝑖,𝑅𝑖]. ◻

Lemma 2
The recursion (1) is correct.

Proof
By Proposition 1, any edge (𝑖′,𝑗′) with 𝑗′<𝑗 that is independent of (i, j) satisfies 𝑅𝑖′<𝑗 and 𝑗′<𝐿𝑖. By Lemma 1, all other edges (𝑖″,𝑗″) used to obtain the matching value 𝑊𝑖′𝑗′ are also independent of (i, j). ◻

We create a table in which we record the entries 𝑊𝑖𝑗. We assume that the intervals are sorted in nondecreasing order by 𝐿𝑖, that is, 𝐿𝑖≤𝐿ℎ for 𝑖<ℎ. The values 𝑊𝑖𝐿𝑖,…,𝑊𝑖𝑅𝑖 form the ith row of the table. We fill the table row by row proceeding from 𝑖=1 to 𝑖=𝑛𝑈. Each row i is processed from left to right. This ensures that the values on the right side of the recursion (1) have already been computed when they are needed, see Fig. 2. The only challenge in evaluating (1) is the maximum-expression, for which we introduce the following notation.

𝑀𝑖𝑗=max({𝑊𝑖′𝑗′∣𝑅𝑖′<𝑗, 𝑗′<𝐿𝑖}∪{0})
(2)
Each row starts with the computation of the leftmost entry 𝑊𝑖𝐿𝑖, which we discuss later. When we proceed from 𝑊𝑖𝑗 to 𝑊𝑖𝑗+1 we want to go incrementally from 𝑀𝑖𝑗 to 𝑀𝑖𝑗+1. Direct comparison of the respective defining sets leads to

𝑀𝑖𝑗+1=max({𝑀𝑖𝑗}∪{𝑊𝑖′𝑗′∣𝑅𝑖′=𝑗, 𝑗′<𝐿𝑖})
(3)
In order to evaluate the maximum of the second set in (3) efficiently, we group intervals 𝑖′ with a common right endpoint 𝑅𝑖′=𝑗 together. Let 𝑆𝑗 be the earliest startpoint of an interval with endpoint j. If there are no intervals with endpoint j, we set 𝑆𝑗:=𝑗. (It would be more logical to set 𝑆𝑗:=𝑗+1 in this case, but this choice makes the algorithm simpler.) We maintain an array 𝑃𝑗[ℓ] for 𝑆𝑗≤ℓ≤𝑗 that is defined as follows:

𝑃𝑗[ℓ]:=max({𝑊𝑖′𝑗′∣∣𝑅𝑖′=𝑗; row 𝑖′ has already been processed; 𝑗′≤ℓ}∪{0})
(4)
In a sense, 𝑃𝑗[ℓ] is a provisional version of the expression max{𝑊𝑖′𝑗′∣𝑅𝑖′=𝑗, 𝑗′≤ℓ}, which takes into account only the already processed rows. For (3), we need the entry 𝑃𝑗[𝐿𝑖−1], and we will show that all relevant entries have already been computed whenever we access this entry:

Lemma 3
When entry 𝑊𝑖𝑗+1 is processed, 𝑀𝑖𝑗+1 can be computed by the formula

𝑀𝑖𝑗+1={max{𝑀𝑖𝑗,𝑃𝑗[𝐿𝑖−1]},𝑀𝑖𝑗,if 𝐿𝑖−1≥𝑆𝑗otherwise
(5)
Figure 3 illustrates the role of the arrays 𝑃𝑗 when processing a row.

Fig. 3
figure 3
Example. We are in the process of filling row 30 from left to right. All rows with smaller index i have been processed and are filled with the entries 𝑊𝑖𝑗. Unprocessed entries are marked as “–”. The figure does not show the rows in the order in which they are processed, but intervals with the same right endpoint 𝑅𝑖=𝑟 are grouped together. The bold entries collect the provisional maxima 𝑃𝑟 in each group. By way of example, the encircled entry 𝑃27[20]=54 is the maximum among the shaded entries of the intervals that end at 𝑅𝑖=27, ignoring the yet unprocessed entries. As we proceed from 𝑗=27 to 𝑗=28 in row 30, the intervals with 𝑅𝑖=27 become relevant. The maximum usable entry from these intervals is found in position 17 of this array, because 17=𝐿30−1. The entry 𝑃27[17]=44 is marked by an arrow. The next entry 𝑊3028 is equal to 𝐶3028+max{𝑃27[17],𝑃26[17],…,𝑃17[17]} according to (2), by the interpretation of the entries 𝑃𝑗[ℓ]. (Some of these entries might not exist.) The maximum in this expression is 𝑀3028, and in the algorithm it is computed incrementally by formula (5) from 𝑃27[17] and the term 𝑀3027=max{𝑃26[17],…,𝑃17[17]}, which has been used for calculating 𝑊3027. We can confirm that the minimum over which 𝑃27[17] is defined involves no unprocessed entries at this time (Lemma 3). Later, when the next row 𝑖=34 in the group with 𝑅𝑖=27 is filled, the array 𝑃27 will updated

Full size image
Before proving that (5) defines indeed the same quantity as (3), we first discuss that the expression (5) does not access the array 𝑃𝑗 beyond its boundaries: The condition 𝐿𝑖−1≥𝑆𝑗 ensures that the array index 𝐿𝑖−1 does not exceed the left boundary of the array 𝑃𝑗. Also, the index 𝐿𝑖−1 never exceeds the right boundary j of the array 𝑃𝑗, since 𝐿𝑖<𝑗+1≤𝑅𝑖, and therefore 𝐿𝑖−1≤𝑗. Thus, 𝑃𝑗[𝐿𝑖−1] is always defined when it is accessed.

Proof
(of Lemma 3) We distinguish three cases.

Case 1 No interval ends at j, and accordingly, 𝑆𝑗=𝑗.

In this case 𝑀𝑖𝑗+1=𝑀𝑖𝑗 in (3) since its rightmost set is empty. Since 𝐿𝑖<𝑗+1≤𝑅𝑖, we have 𝐿𝑖−1<𝑆𝑗=𝑗 and, thus, the right side of (5) evaluates also to 𝑀𝑖𝑗.

Case 2 There exists an interval ending at j, and 𝐿𝑖−1<𝑆𝑗. The right side of (5) evaluates to 𝑀𝑖𝑗. In (3), intervals 𝑖′ that end at 𝑅𝑖′=𝑗 have 𝐿𝑖′≥𝑆𝑗>𝐿𝑖−1. Thus, an edge (𝑖′,𝑗′) with 𝑗′<𝐿𝑖 and 𝑅𝑖′=𝑗 does not exist, and the second set in (3) is empty. Therefore, (3) evaluates to 𝑀𝑖𝑗+1=𝑀𝑖𝑗.

Case 3 There exists an interval ending at j, and 𝐿𝑖−1≥𝑆𝑗. In this case, 𝑃𝑗[𝐿𝑖−1] is defined:

𝑃𝑗[𝐿𝑖−1]=max{𝑊𝑖′𝑗′∣𝑅𝑖′=𝑗, 𝑗′≤𝐿𝑖−1, row i' already processed}
(6)
For each entry 𝑊𝑖′𝑗′ with 𝑗′<𝐿𝑖, we conclude that 𝐿𝑖′≤𝑗′<𝐿𝑖 and, thus, row 𝑖′ has already been processed. This means that the condition that row 𝑖′ has been processed is redundant, and (6) coincides with maximum of the right set in (3). ◻

figure a
After processing row i with startpoint ℓ=𝐿𝑖 and endpoint 𝑟=𝑅𝑖, we have to update the values in 𝑃𝑟[𝑗]. This is straightforward.

It remains to discuss the computation of the first value 𝑊𝑖ℓ of the row. An edge (𝑖′,𝑗′),𝑗′<ℓ and edge (𝑖,ℓ) are independent if and only if the interval 𝑖′ ends before ℓ, that is 𝑅𝑖′<ℓ. Since we process the intervals in nondecreasing order by their startpoints, it suffices to maintain a value F with the maximum 𝑊𝑖′𝑗′ in all finished intervals: those intervals 𝑖′ that end before ℓ. In other words 𝐹=max{𝑃1[1],𝑃2[2],…,𝑃ℓ−1[ℓ−1]}. This value is easily maintained by updating F as ℓ increases. The full details are stated as Algorithm 1.

The update of the array 𝑃𝑟[𝑗] in the second loop can be integrated with the computation of 𝑊𝑖𝑗 in the first loop. When this is done, the values 𝑊𝑖𝑗 need not be stored at all because they are not used.

As stated earlier, when no interval ends at a point 𝑟∈𝑉, we set 𝑆𝑟=𝑟. The array 𝑃𝑟 consists of a single dummy entry 𝑃𝑟[𝑟]=0. In this way, this case needs no special treatment in the algorithm.

We have described the computation of the value of the optimal matching. It is straightforward to augment the program so that the optimal matching itself can be recovered by backtracking how the optimal value was obtained, but this would clutter the program.

Theorem 1
A maximum-weight induced matching of an edge-weighted convex bipartite graph can be computed in 𝑂(𝑛+𝑚) time. ◻

Maximum-Cardinality Induced Matchings
For the unweighted version of the problem, we assume a compact representation of a convex bipartite graph 𝐺=(𝑈,𝑉,𝐸), that is, for each 𝑖∈𝑈 we are given the startpoint 𝐿𝑖 and endpoint 𝑅𝑖 of its interval {𝐿𝑖,𝐿𝑖+1,…,𝑅𝑖}. This makes it possible to obtain a linear runtime of O(n).

The recursion (1) can be specialized to the unweighted case by setting 𝐶𝑖𝑗≡1.

𝑊𝑖𝑗=1+max({𝑊𝑖′𝑗′∣𝑅𝑖′<𝑗, 𝑗′<𝐿𝑖}∪{0})
(7)
This recursion is related to the previous algorithms [3, 27] for computing maximum-cardinality induced matchings (and minimum chain covers) in convex bipartite graphs: Yu et al. describe a greedy procedure that colors the edges of the bipartite adjacency matrix with integer values 𝑊̂ 𝑖𝑗  [27, Greedy Decomposition Algorithm]. This procedure is later also used by Brandstädt et al. [3, Procedure: Greedy Coloring]. It assigns to each edge (i, j) the smallest possible color 𝑊̂ 𝑖𝑗 such that independent edges receive different colors. Figure 4 below shows an example of such a coloring. Formally, we can express this approach as a recursion:

𝑊̂ 𝑖𝑗=min({1,2,…,𝑚}∖{𝑊̂ 𝑖′𝑗′∣𝑅𝑖′<𝑗, 𝑗′<𝐿𝑖})
(8)
Our assignment (7), by contrast, picks the next color after the largest color of an independent edge. By Lemma 1 it can be derived that the choices (7) and (8) agree, i.e. 𝑊𝑖𝑗=𝑊̂ 𝑖𝑗 for every edge (i, j). Thus, our explicit dynamic programming approach produces the same coloring as the algorithm of Yu et al. and it gives a new interpretation and a different explanation of the assigned colors.

Fig. 4
figure 4
An example showing a section of the computation of 𝑊𝑖𝑗 by Algorithm 4. The threshold values 𝑡6 and 𝑡7 are shown as they change with the rows that are successively considered. The shaded entries form the chain subgraph 𝑍7 that is used for the chain cover

Full size image
The original implementation given in [27] runs in time 𝑂(𝑚2). Brandstädt et al. [3] give an improved implementation which obtains the colors 𝑊̂ 𝑖𝑗 in 𝑂(𝑛2) time. Our Algorithm 1 from Sect. 2 improves on these results as it obtains the values 𝑊𝑖𝑗=𝑊̂ 𝑖𝑗 in total time 𝑂(𝑛+𝑚).

Given a compact representation, a further speed-up to O(n) time is possible: we exploit some straightforward structural properties of the filled dynamic-programming table:

Lemma 4
[27, Lemma 5] The values 𝑊𝑖𝑗 are nondecreasing in each row.

Proof
In (7), the maximum is taken over a set which is increasing with j. ◻

Lemma 5
[3, Lemma 3.3, Lemma 3.4] Each row contains at most two consecutive values.

Proof
Let 𝑊𝑖𝑗 be the largest value in some row i. Then, if we take a corresponding matching of size 𝑊𝑖𝑗, it is easy to see that we can remove the last two edges and replace them by an arbitrary edge (i, k). This proves that 𝑊𝑖𝑘≥𝑊𝑖𝑗−1.

More formally, we can argue by the recursion (7): Assume there are values 𝑊𝑖𝑘≤𝑊𝑖𝑗−2 in row i. By Lemma 4 we can assume 𝑘<𝑗. By (7), 𝑊𝑖𝑗=1+𝑊𝑖′𝑗′=2+𝑊𝑖″𝑗″ with 𝑅𝑖″<𝑗′<𝐿𝑖 for some 𝑖″<𝑖′<𝑖. Thus, 𝑗″≤𝑅𝑖″<𝑗′<𝐿𝑖≤𝑘 and by definition of 𝑊𝑖𝑘 according to (7) we have 𝑊𝑖𝑗−2=𝑊𝑖″𝑗″<𝑊𝑖𝑘≤𝑊𝑖𝑗−2, which is a contradiction. ◻

figure b
figure c
Specializing Algorithm 1 to the unweighted case leads to a solution with 𝑂(𝑛+𝑚) running time. Our O(n)-time algorithm will follow the general scheme of Algorithm 1, with the following modifications.

(I) In view of Lemmas 4 and 5, we will not fill each row individually, but we will just determine the leftmost value w and the position where the entries switch from w to 𝑤+1 (if any).

(II) The computation of the leftmost entry is exactly as in Algorithm 1.

(III) The position where the entries of row i switch from w to 𝑤+1 can be determined from (7): If there is a row 𝑖′ containing an entry w left of 𝐿𝑖, then 𝑊𝑖𝑗 must be 𝑤+1 as soon as 𝑗>𝑅𝑖′. The algorithm determines the threshold position 𝑡𝑤 as the smallest right endpoint 𝑅𝑖′ under these constraints. Then the entries 𝑤+1 in row i start at 𝑗=𝑡𝑤+1 if these entries are still part of the row.

(IV) We do not maintain the whole array 𝑃𝑟 for each r, but only its last entry 𝑃𝑟[𝑟]; this is sufficient for updating F and thus for computing the leftmost entries in the rows. We call this value 𝑄𝑟.

This leads to Algorithm 2.

We will improve Algorithm 2 by maintaining the values 𝑡𝑤 instead of computing them from scratch. We use the fact that the smallest value w in the row is known, and hence we can associate 𝑡𝑤 with the value w instead of the row index i, as is already apparent from our chosen notation. We update 𝑡𝑤 whenever ℓ increases. The details are shown in Algorithm 3. The differences to Algorithm 2 are marked by △.

This still does not achieve O(n) running time. The final improvement comes from realizing that it is sufficient to update 𝑡𝑤 when 𝑊𝑖′𝑙 is the leftmost entry w in row 𝑖′. The time when such an update occurs can be predicted when a row is generated. To this end, we maintain a list 𝑗 for 𝑗=1,…,𝑛𝑉 that records the updates that are due when ℓ becomes j. This final version is Algorithm 4.

figure d
The runtime of Algorithm 4 is 𝑂(𝑛𝑈+𝑛𝑉): Processing each interval i takes constant time and adds at most two pairs to the lists . Thus, processing the lists  for updating the 𝑡𝑤 array takes also only 𝑂(𝑛𝑈) time.

Some simplifications are possible: The addition of (𝑤,𝑅𝑖) to the list ℓ in the case of two values can actually be omitted, as it leads to no decrease in 𝑡𝑤: 𝑡𝑤 is already <𝑅𝑖. The algorithm could be further streamlined by observing that at most two consecutive values of 𝑡𝑤 need to be remembered at any time. Again, it is easy to modify the algorithm to return a maximum induced matching in addition to its size.

Theorem 2
Given a compact representation, a maximum-cardinality induced matching of a convex bipartite graph can be computed in O(n) time. ◻

Minimum Chain Covers
For convex bipartite graphs, we have the following important duality result of Yu et al. [27], see also [3]:

Theorem 3
In a convex bipartite graph, the size of a maximum-cardinality induced matching equals the number of chain subgraphs of a minimum chain cover.

Along the lines of this duality relation, we are going to extend Algorithm 4 to obtain a minimum chain cover of a convex bipartite graph 𝐺=(𝑈,𝑉,𝐸).

Let 𝑊∗ be the cardinality of a maximum induced matching of G. Accordingly, the values 𝑊𝑖𝑗 cover the range {1,…,𝑊∗}. We create 𝑊∗ chain subgraphs 𝑍1,…,𝑍𝑊∗ of G. The edges (i, j) with 𝑊𝑖𝑗=𝑤 will be part of the chain subgraph 𝑍𝑤. As already observed in [27], the edges with a fixed value of 𝑊𝑖𝑗 may contain independent edges and, thus, do not necessarily constitute a chain graph. Yu et al. [27] describe a strategy to extend the edge set for each value of 𝑊𝑖𝑗=𝑤 to a chain graph 𝑍𝑤. Their original implementation runs in time 𝑂(𝑚2). Brandstädt et al. [3] give an improved implementation with runtime 𝑂(𝑛2). We improve on these previous results, by implementing the extension strategy in 𝑂(𝑛+𝑚) time; and even in O(n) time if a compact representation of the input graph is given.

The correctness of this approach was already shown in [27], thus establishing Theorem 3. We give a new independent proof.

The following characterization is often used as an alternative definition of chain graphs:

Lemma 6
A bipartite graph (𝑈¯,𝑉¯,𝐸¯) is a chain graph if and only if the sets of neighbors 𝑉¯(𝑖):={𝑗∈𝑉¯∣(𝑖,𝑗)∈𝐸¯} of the vertices 𝑖∈𝑈¯ form a chain in the inclusion order. (Equal sets are allowed.) In other words, among any two sets 𝑉¯(𝑖) and 𝑉¯(𝑖′), one must be contained in the other.

Proof
This is a direct consequence of the fact that edges (i, j) and (𝑖′,𝑗′) are independent if and only if 𝑗′∉𝑉¯(𝑖) and 𝑗∉𝑉¯(𝑖′). ◻

The condition that the neighborhoods must form a chain is apparently the reason for calling these graphs chain graphs, however, we did not find a reference for this.

We use 𝑈𝑤 to denote the set of rows that contain entries 𝑊𝑖𝑗=𝑤. For every row 𝑖∈𝑈𝑤, we determine the beginning and ending points 𝐵𝑖𝑤,𝐸𝑖𝑤 with this color, that is, 𝑊𝑖𝑗=𝑤⟺𝐵𝑖𝑤≤𝑗≤𝐸𝑖𝑤. We extend every such interval [𝐵𝑖𝑤,𝐸𝑖𝑤] to the left by choosing a new starting point 𝐵̂ 𝑖𝑤 according to the formula

𝐵̂ 𝑖𝑤:=min({𝐵𝑖𝑤}∪{𝐵𝑖′𝑤∣𝑖′∈𝑈𝑤, 𝐸𝑖′𝑤<𝐸𝑖𝑤})
(9)
=min({𝐵𝑖𝑤}∪{𝐵̂ 𝑖′𝑤∣𝑖′∈𝑈𝑤, 𝐸𝑖′𝑤<𝐸𝑖𝑤})
(10)
The second expression uses the new values 𝐵̂  on the right-hand side. It is easy to see that the two expressions are equivalent: Using (9) for the definition of 𝐵̂ 𝑖′𝑤, the expression (10) becomes

min ({𝐵𝑖𝑤}∪{𝐵𝑖′𝑤∣𝑖′∈𝑈𝑤, 𝐸𝑖′𝑤<𝐸𝑖𝑤}∪{𝐵𝑖″𝑤∣𝑖″∈𝑈𝑤,𝐸𝑖″𝑤<𝐸𝑖′𝑤<𝐸𝑖𝑤,𝑖′∈𝑈𝑤}).
(11)
The third set is contained in the second set, and thus, (11) is equal to 𝐵̂ 𝑖𝑤 according to (9).

We construct the chain graph 𝑍𝑤 as the graph with the extended intervals [𝐵̂ 𝑖𝑤,𝐸𝑖𝑤]. Figure 4 shows an example. It is obvious by construction that these intervals satisfy the conditions of a chain graph: By Lemma 6, we have to show that there are no two intervals [𝐵̂ 𝑖𝑤,𝐸𝑖𝑤], [𝐵̂ 𝑖′𝑤,𝐸𝑖′𝑤] with 𝐵̂ 𝑖′𝑤<𝐵̂ 𝑖𝑤 and 𝐸𝑖′𝑤<𝐸𝑖𝑤. But if the last condition holds, (10) ensures that 𝐵̂ 𝑖𝑤≤𝐵̂ 𝑖′𝑤. The only thing that could go wrong is that 𝐵̂ 𝑖𝑤 becomes too small so that the chain graph is not a subgraph of G. The following lemma shows that this is not the case.

Lemma 7
𝐵̂ 𝑖𝑤≥𝐿𝑖 for every 𝑖∈𝑈𝑤.

Proof
For the sake of contradiction, assume 𝐵̂ 𝑖𝑤<𝐿𝑖. By (9), there is a row 𝑖′∈𝑈𝑤 such that 𝐵𝑖′𝑤<𝐿𝑖 and 𝐸𝑖′𝑤<𝐸𝑖𝑤. Setting 𝑗=𝐸𝑖𝑤 and 𝑗′=𝐵𝑖′𝑤 in the recursion (7), we conclude that 𝐸𝑖𝑤≤𝑅𝑖′, because otherwise, (7) would imply 𝑤=𝑊𝑖𝐸𝑖𝑤≥1+𝑊𝑖′𝐵𝑖′𝑤=1+𝑤. Thus, (𝑖′,𝐸𝑖𝑤) is an edge of G. By Lemma 5, 𝑊𝑖′𝐸𝑖𝑤=𝑤+1. By (7), there is an edge (𝑖″,𝑗″) with 𝑊𝑖″𝑗″=𝑤, 𝑅𝑖″<𝐸𝑖𝑤 and 𝑗″<𝐿𝑖′<𝐿𝑖. Again by (7), such an edge (𝑖″,𝑗″) would imply that 𝑊𝑖𝐸𝑖𝑤≥𝑤+1, a contradiction. ◻

figure e
Algorithm 5 carries out the computation of (9). It processes the triplets (𝐵𝑖𝑤,𝐸𝑖𝑤,𝑤) in increasing order of the endpoints 𝐸𝑖𝑤=𝑟. This can be done in linear time, by first sorting the 𝑂(𝑛𝑈) triples (𝐵𝑖𝑤,𝐸𝑖𝑤,𝑤) into 𝑛𝑉 buckets according to the value of 𝐸𝑖𝑤. Thus, Algorithm 5 takes linear time O(n). By Lemma 6, the result is a chain cover, which by duality is minimum. Each row belongs to at most two chain subgraphs, and thus the chain cover consists of at most 2𝑛𝑈 such row intervals in total. It is straightforward to extend Algorithm 4 to compute the sets 𝑈𝑤 and the quantities 𝐵𝑖𝑤,𝐸𝑖𝑤, and thus the cover can be constructed in O(n) time in compressed form.

Theorem 4
Given a compact representation of a convex bipartite graph, a compact representation of a minimum chain cover can be computed in O(n) time. ◻

Given a compact representation of a minimum chain cover, we can list all the edges of its chain subgraphs in 𝑂(𝑛+𝑚) time since every edge is contained in at most two chain subgraphs. A compact representation of a convex bipartite graph can be computed in 𝑂(𝑛+𝑚) time [2, 23, 25]. Thus, Algorithm 4 and Algorithm 5 can also be used to obtain:

Theorem 5
A minimum chain cover of a convex bipartite graph can be computed in 𝑂(𝑛+𝑚) time. ◻

Certification of Optimality
An induced matching H together with a chain cover of the same cardinality provides a certificate of optimality, of size O(n). As we will establish in the following discussion, it is easy to check this certificate for validity in linear time. This is easier than constructing the largest induced matching with our algorithm. Thus, it is possible to establish correctness of the result beyond doubt, for each particular instance of the problem, without having to trust the correctness of our algorithms and their implementations, see [18] for a survey about this concept.

It is trivial to check whether the matching H is contained in the graph. To test whether it forms an induced matching, we sort the edges (i, j) by j. This takes O(n) time with bucket-sort. Then, by Lemma 1, it is sufficient to test consecutive edges for independence, and each such test takes only constant time according to Proposition 1.

To establish the validity of a chain cover {𝑍1,…,𝑍𝑊∗}, we need to check that the edges of G are covered and each 𝑍𝑤 is a chain subgraph. The chain subgraphs 𝑍𝑤={(𝑖,𝑗)∣𝑖∈𝑈𝑤,𝐵̂ 𝑖𝑤≤𝑗≤𝐸𝑖𝑤}, for 1≤𝑤≤𝑊∗ are compactly represented by a set of at most 2𝑛𝑈 quadruples (𝑤,𝑖,𝐵̂ 𝑖𝑤,𝐸𝑖𝑤). The following checking procedure works in linear time for any chain cover as long as it consists of convex bipartite subgraphs. It does not use any special properties of the cover produced by our algorithm.

We sort the quadruples (𝑤,𝐵̂ 𝑖𝑤,−𝐸𝑖𝑤,𝑖) lexicographically. Then it is easy to check the chain graph property using the characterization of Lemma 6: The intervals [𝐵̂ 𝑖𝑤,𝐸𝑖𝑤] that belong to a fixed chain graph 𝑍𝑤 (these are consecutive in the list) ought to be nested. Since the starting points 𝐵̂ 𝑖𝑤 are weakly increasing, this amounts to checking that the endpoints 𝐸𝑖𝑤 decrease weakly.

To check that the chain graphs are contained in G and they collectively cover G, we sort the quadruples (𝑖,𝐵̂ 𝑖𝑤,𝐸𝑖𝑤,𝑤). The union of the intervals [𝐵̂ 𝑖𝑤,𝐸𝑖𝑤] that are the neighbors of a fixed vertex 𝑖∈𝑈 (these are consecutive in the list) can be incrementally formed, and the resulting interval is compared against [𝐿𝑖,𝑅𝑖]. As soon as a gap would form in this union, we can abort the test, since the intervals are sorted by left endpoint and it is then impossible to form a connected interval [𝐿𝑖,𝑅𝑖].

The required lexicographic sorting operations can be carried out in O(n) time by repeated bucket-sort (radix-sort).

Outlook: Duality
The existence of a maximum induced matching and a smallest chain cover with the same size is a manifestation of strong duality between independent sets and clique covers in perfect graphs. We mentioned in the introduction that our maximum induced matching problem is an instance of a maximum independent set problem in the square of a line graph, and the chain cover is a covering by cliques. Yu et al. [27] established that the square of the line graph of a convex bipartite graph is a co-comparability graph. Therefore, it is also a perfect graph. It follows that the linear program for maximizing the size of an induced matching in a convex bipartite graph is totally dual integral, see [22, Corollary 65.2f]. As a corollary of this fact, we recover our strong duality result: the existence of a primal optimal solution (maximum induced matching) and a dual optimal solution (smallest chain cover) with matching objective function values, see [22, Corollary 65.2d].

This duality relation for perfect graphs extends to the weighted version. Thus, there should also be a weighted chain cover with the same weight as the maximum weight of an induced matching. A weighted chain cover of a weighted graph consists of chain subgraphs together with a positive real weight for each chain subgraph, such that for every edge (i, j), the total weight of all chain subgraphs covering the edge (i, j) is at least the weight 𝐶𝑖𝑗 of this edge. The weight of a weighted chain cover is the sum of all weights. It is an open problem to extend our primal Algorithm 1 in weighted graphs to a fast combinatorial algorithm for finding minimum-weight chain covers, as Algorithm 5 does for the unweighted version.