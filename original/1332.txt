The Non-Uniform k-center (NUkC) problem has recently been formulated by Chakrabarty et al. [ICALP, 2016; ACM Trans Algorithms 16(4):46:1–46:19, 2020] as a generalization of the classical k-center clustering problem. In NUkC, given a set of n points P in a metric space and non-negative numbers 𝑟1,𝑟2,…,𝑟𝑘, the goal is to find the minimum dilation 𝛼 and to choose k balls centered at the points of P with radius 𝛼⋅𝑟𝑖 for 1≤𝑖≤𝑘, such that all points of P are contained in the union of the chosen balls. They showed that the problem is 𝖭𝖯-hard to approximate within any factor even in tree metrics. On the other hand, they designed a “bi-criteria” constant approximation algorithm that uses a constant times k balls. Surprisingly, no true approximation is known even in the special case when the 𝑟𝑖’s belong to a fixed set of size 3. In this paper, we study the NUkC problem under perturbation resilience, which was introduced by Bilu and Linial (Comb Probab Comput 21(5):643–660, 2012). We show that the problem under 2-perturbation resilience is polynomial time solvable when the 𝑟𝑖’s belong to a constant-sized set. However, we show that perturbation resilience does not help in the general case. In particular, our findings imply that even with perturbation resilience one cannot hope to find any “good” approximation for the problem.

Introduction
Stability is a popular notion, which has been used in literature in the context of beyond worst case analysis. The general idea is to impose extra constraints on the inputs such that the (stable) instances that satisfy those constraints can capture the instances that appear in real life applications. In other words, we would like to exclude the “unrealistic” instances from consideration and obtain optimistic bounds for algorithms on the remaining inputs. For example, a major collection of work along this line have focused on designing polynomial time algorithms for 𝖭𝖯-complete problems under different stability conditions. Bilu and Linial [10] introduced a notion of stability, which they termed as 𝜓-perturbation resilience for some 𝜓>1. Informally, an instance is called 𝜓-perturbation-resilient if the optimal solution remains same even after the instance is perturbed by a factor of 𝜓.

Recently, researchers have shown a great interest in studying geometric clustering problems under perturbation resilience. An instance of a clustering problem is 𝜓-perturbation-resilient if the optimal clustering is unique and remains unchanged under 𝜓-factor perturbation of the input distances. Awasthi et al. [6] showed that the standard center based clustering problems (e.g. k-center, k-median) can be solved in polynomial time under 𝜓-perturbation-resilience for 𝜓≥3. In any such center based clustering problem, the clustering is obtained by assigning a point to its nearest center. In other words, the clustering is induced by the Voronoi partition of the points w.r.t. the chosen centers. Subsequently, Balcan and Liang [8] designed a polynomial time algorithm for these clustering problems under 𝜓-perturbation-resilience for 𝜓≥1+2‾√, improving the bound of Awasthi et al. [6]. Later, Balcan et al. [7] improved the bound for k-center to 2. On the other hand, they showed that k-center under 𝜓-perturbation-resilience cannot be solved in polynomial time for 𝜓<2, unless 𝖭𝖯=𝖱𝖯. They also considered the more general asymmetric k-center problem, where the distances are not necessarily symmetric (but satisfy triangle inequality). The problem is known to not admit a constant approximation unless 𝖭𝖯⊆𝖣𝖳𝖨𝖬𝖤(𝑛loglog𝑛), where n is the input size [15]. Surprisingly, Balcan et al. [7] showed that asymmetric k-center under 2-perturbation-resilience can be solved in polynomial time. Angelidakis et al. [4] gave a generic polynomial time algorithm for clustering problems with center based objectives (e.g. k-center, k-median, and k-means) under 2-perturbation-resilience. Recently, Cohen-Addad and Schwiegelshohn [16] proved that a simple local search scheme yields optimal solutions for problems like k-median and k-means, under 𝜓-perturbation-resilience for 𝜓>3. Chekuri and Gupta [14] showed that an LP relaxation of k-center under 2-perturbation-resilience admits an integral solution. They also proved the same result for k-center with outliers. Balcan and Liang [8] introduced a weaker stability assumption called (𝜓,𝜖)-perturbation-resilience, where the optimal solution under 𝜓-perturbation can differ in at most 𝜖 fraction of the points from the original optimal clustering (see Preliminaries for the formal definition). Assuming that each cluster contains more than 2𝜖𝑛 points, Balcan et al. [7] showed that k-center under (3,𝜖)-perturbation-resilience can be solved in polynomial time, where n is the number of input points.

The increasing interest in studying perturbation resilient clustering has given rise to several open directions. One such interesting direction is to study clustering problems, where the clustering is not necessarily induced by Voronoi partition. One such clustering problem is Non-Uniform k-center (NUkC). In NUkC, we are given a set of n points P in a metric space, non-negative integers 𝑟1,𝑟2,…,𝑟𝑘, and the goal is to find the minimum dilation 𝛼 and to choose k balls centered at the points of P with radius 𝛼⋅𝑟𝑖 for 1≤𝑖≤𝑘, such that all points of P are contained in the union of the chosen balls. We refer to any feasible solution of this problem composed of the chosen balls as a feasible placement. From a feasible placement, a clustering is retrieved in the following way – each point is assigned to a fixed ball that contains the point, and then for each ball, the points that are assigned to that ball form a cluster. Figure 1 shows that, the optimal clustering for an instance of NUkC is not the same as the Voronoi partition w.r.t. the centers of the balls in the optimal placement. The NUkC problem was formulated by Chakrabarty et al. [13] as a generalization of the well-studied k-center clustering problem, where all 𝑟𝑖’s are equal. Apart from clustering, NUkC has several applications in vehicle routing, sensor placement, and so on. For example, in vehicle routing, we need to find k depot locations corresponding to k vehicles having different speeds, such that any customer can be served by some vehicle as quickly as possible.

Fig. 1
figure 1
The optimal clusters are contained in the two disks in the Euclidean plane. The centers of balls are shown by boxes. The Voronoi partition w.r.t. the centers contains two subsets of points lying on the different sides of the vertical bisector line

Full size image
As mentioned before, k-center is a special case of NUkC where all the input radii are equal. We call this version of the problem as NUkC with one radius class. In general, all the radii might not be equal. But, we can consider only distinct radii from the input and associate a multiplicity parameter 𝑘𝑖, with each such radius 𝑟𝑖, which denotes the number of balls of radius 𝑟𝑖 that can be chosen. Then the problem can be formulated equivalently in the following way.

Definition 1
(NUkC with t radii classes) Given a set of n points P in a metric space, 𝑡≤𝑘 distinct radii 𝑟1>𝑟2>⋯>𝑟𝑡 and non-negative integers 𝑘1,…,𝑘𝑡 such that ∑𝑡𝑖=1𝑘𝑖=𝑘, the goal is to find the minimum dilation 𝛼 and to choose 𝑘𝑖 balls centered at the points of P with radius 𝛼⋅𝑟𝑖 for all 1≤𝑖≤𝑡, such that the union of the chosen balls contains all the input points.

We note that k-center with outliers is a special case of NUkC with 2 radii classes where the radius 𝑟2=0. Using a reduction from the Firefighters problem [1], Chakrabarty et al. [13] proved that NUkC is 𝖭𝖯-hard to approximate within any 𝛾≪2𝗉𝗈𝗅𝗒(𝑛) factor even in tree metrics. On the other hand, they designed a (𝑐1,𝑐2) bi-criteria approximation for the problem for large constants 𝑐1 and 𝑐2, i.e., if the algorithm is allowed to use 𝑐1⋅𝑘𝑖 balls of type i (thus 𝑐1⋅𝑘 in total), it can produce a solution with dilation at most 𝑐2 times the optimal dilation. They also gave a (1+5‾√)-approximation for NUkC with two radii classes. For k-center with outliers, they gave an improved 2-approximation. However, even when the number of distinct radii is 3, no true approximation is known.

The motivation behind the study of NUkC under perturbation resilience is that, in many applications, the distance function is heuristic. In fact, when the points represent structures like images, proteins, documents, etc., it is very hard to find the true distance function, and various standard distance/ dissimilarity measures are used. If one solves a clustering problem with such a heuristic distance function and expects good results, then they implicitly assume that the optimal solution of the problem is not sensitive to small perturbations of the distance function. The perturbation resilience condition is a natural way to make this implicit assumption precise. Additionally, the separation between the clusters forces an optimal clustering to be unique.

Our Results In this paper, we obtain the following results.

1.
Polynomial time exact algorithm for NUkC with a constant number of radii classes under “2-perturbation-resilience” and “(3,𝜖)-perturbation-resilience when each cluster contains more than 𝜖𝑛+1points”. Our algorithm reduces the NUkC problem to a version of Firefighters problem on trees (formally defined in Sect. 4). Under the stability assumptions, we can show that a feasible solution of NUkC maps to a feasible solution of Firefighters problem and vice versa. Here, in particular, we use the “well-separated” structure of the clusters in the optimal clustering that follows due to stability. The reduction has the property that if NUkC has t distinct radii classes, then the height of the constructed tree instance is 𝑡+1. Then we show that using a dynamic programming based scheme, the Firefighters problem can be solved in polynomial time for constant height tree instances. Thus we also obtain a polynomial time algorithm for NUkC under perturbation resilience with a constant number of radii classes. We note that the algorithms for center based clustering problems in [4, 8, 14] are also based on tree computation and dynamic programming. However, the structure of the tree we compute is very different. We also note that our result under 2-perturbation-resilience is tight, as even for k-center it is unlikely to obtain a polynomial time algorithm under 𝜓-perturbation-resilience for 𝜓<2. To prove the result for (3,𝜖)-perturbation-resilience, we assume that each cluster contains more than 𝜖𝑛+1 points. We note that such a lower bound is necessary, as in its absence even k-center is 𝖭𝖯-hard [7] under (𝜓,𝜖)-perturbation-resilience for all 𝜓≥1 and 𝜖>0.

2.
Inapproximability of NUkC within a factor of 𝛾 under 𝜓-perturbation-resilience for any 2𝗉𝗈𝗅𝗒(𝑛)≫𝛾≥1and 𝜓≤𝛾, unless 𝖭𝖯=𝖱𝖯. Our result implies that, for any 2𝗉𝗈𝗅𝗒(𝑛)≫𝜓,𝛾≥1, even with 𝜓-perturbation-resilience one cannot hope to find a 𝛾-approximation for the problem. This shows that the complexity of NUkC remains unchanged under perturbation-resilience. Our result should be contrasted with the polynomial time algorithm for asymmetric k-center under 2-perturbation-resilience, as asymmetric k-center is another candidate problem which is hard to approximate within a constant factor. To prove the result, we use a chain of reductions starting from the satisfiability problem to the NUkC problem in tree metrics under perturbation resilience assumption. The last reduction in the chain is from a version of the Firefighters problem which shows that NUkC is hard to approximate within a factor of 𝛾 in tree metrics for any 𝛾. Our reduction is similar to the reduction in [13]. Then, we argue that the constructed tree instances of NUkC are 𝛾-perturbation-resilient, and hence the similar hardness follows even for NUkC under 𝛾-perturbation-resilience. We also extend this hardness result to Euclidean metric of dimension d for 𝑑≥1 using a classical tree embedding result of Gupta [21].

The main contribution of this paper is twofold. The first one is to be able to establish an exact connection between NUkC under perturbation resilience and the Firefighters problem on trees. To establish this connection, we need to prove that perturbation resilience implies that the optimal clusters are “well-separated”. Similar properties have been proved in the context of other problems (e.g., k-center). Our contribution is to be able to extend these proofs for NUkC as well. However, the extension is non-trivial, and one need sufficiently good amount of extra work, as here we need to deal with non-uniform radii. We note that Chakrabarty et al. [13] also showed a reduction from NUkC to Firefighters. However, their Linear Programming based reduction is very different. Our second contribution is the tight hardness result for the problem. This result along with the polynomial time algorithm gives the complete picture for NUkC under perturbation resilience. To prove this result we are faced with the following challenges. In any such hardness construction, one needs to show that the instances of NUkC to which we map, are perturbation resilient. Thus, we need to show that these instances have unique optimal solution and the optimal solution does not change with some perturbation of the distances. Chakrabarty et al. [13] showed a reduction from Firefighers to NUkC. However, using their distance function it is not straightforward to show that the constructed instances are insensitive to the perturbation of distances. Nevertheless, we consider a similar distance function and show the reduction works out well with this modification. To prove the uniqueness of the optimal solutions, we reduce a “unique” version of 3SAT to a “unique” version of Firefighters using a chain of reductions.

Related Work and Open Questions Other optimization problems have also been studied under stability assumptions [4, 17, 19, 25, 26]. Also different stability assumptions have been introduced and well-studied in the literature [5, 24, 27]. Most of the clustering problems mentioned here are 𝖭𝖯-hard, but admit some constant approximations, e.g., see [3, 12, 20, 22] and the references therein. It would be interesting to see if one can obtain a constant approximation for NUkC with a constant number of radii classes without any perturbation resilience assumptions. Also, one can study similar hard clustering problems (e.g., k-clustering [9]) under perturbation resilience.

Organization In Sect. 2, we define some notations that we use throughout the paper, and make a few observations that will be useful later. In Sect. 3, we list some properties implied due to perturbation resilience of the input instances. Then in Sect. 4, we discuss the algorithm for NUkC with any constant number of classes and prove its correctness by using the properties proved in the previous section. Lastly, in Sect. 5, we prove the hardness results for the general problem.

Preliminaries
We denote an instance of NUkC with t radii classes on metric d by (P, d, t). Note that the radii (𝑟𝑖) and multiplicity (𝑘𝑗) parameters remain implicit in this notation. But, references to these parameters will become clear from the context. A ball with center 𝑝∈𝑃 and radius r, denoted by B(p, r), is the set of points {𝑞∈𝑃∣𝑑(𝑝,𝑞)≤𝑟}. A set of balls covers a set of points if the union of the balls contains all the points. Recall that a feasible placement is a feasible solution of the problem composed of the chosen balls that cover all the input points. A feasible NUkC clustering  of the input set of points P is a partition {𝐶1,…,𝐶𝑘}, such that there is a feasible placement Π with the property that for all i, 𝐶𝑖 is a subset of a ball in the placement. We say that the clustering  is induced by the placement Π. The radius of a cluster C w.r.t. any distance function d, denoted by c-radius(C, d), is min𝑝∈𝑃max𝑞∈𝐶𝑑(𝑝,𝑞). Note that no ball centered at a point 𝑝∈𝑃 of radius smaller than c-radius(C, d) can cover all the points of C. For a placement with dilation 𝛼, a ball with radius 𝛼𝑟𝑖 (resp. <𝛼𝑟𝑖 and ≥𝛼𝑟𝑖) is called an 𝑟𝑖 (resp. <𝑟𝑖 and ≥𝑟𝑖) -ball.

Consider a metric space P with metric 𝑑:𝑃×𝑃→ℝ≥0. A metric 𝑑1 is called a 𝜓-perturbation of d if for any 𝑝,𝑞∈𝑃, 𝑑(𝑝,𝑞)/𝜓≤𝑑1(𝑝,𝑞)≤𝑑(𝑝,𝑞).Footnote1 In this paper, all perturbations we consider satisfy the metric properties.

Definition 2
An instance =(𝑃,𝑑,𝑡) of NUkC is called 𝜓-perturbation-resilient (𝜓-PR) if for any metric 𝜓-perturbation 𝑑1 of d, the unique optimal NUkC clustering of ′=(𝑃,𝑑1,𝑡) is identical to the unique optimal clustering of .

Fig. 2
figure 2
Examples demonstrating the definition of perturbation resilience. The top-right (resp. bottom-right) instance is a 2-perturbed instance of the top-left (resp. bottom-left) instance. The points in same optimal cluster are shown by same shape and color (Color figure online)

Full size image
Note that in general, optimal clustering of NUkC might not be unique. We refer to the instance ′ as a 𝜓-perturbed instance of . For more clarity, we describe the notion of 𝜓-perturbation-resilience in the context of NUkC using two examples in Fig. 2 (top-left and bottom-left). In all our examples, the number of clusters 𝑘=2 and the number of radii classes 𝑡=1. For the instance shown at the top-left figure, let 𝑟1=10. We claim that this instance is 2-perturbation-resilient. To see this note that here the optimal dilation is 1, and the optimal clusters are {𝑎,𝑐} and {𝑏,𝑑}. Moreover, even if all the distances are perturbed by a factor of 2, the distance between a and c (resp. b and d) can be at most 10. Hence, the dilation of the previous clustering for the perturbed instance would be at most 1. But, as all the distances between a and b, a and d, c and b, and c and d are 50, in any 2-perturbation of the distances, the distance between the two points in any of these four pairs would be at least 25. Thus if both of the points in such a pair remain in same cluster, the dilation must be at least 2.5. As there is a clustering of dilation at most 1, in optimal clustering, both of these points cannot lie in the same cluster. Hence, the optimal clustering is unique and same as the one before. The top-right figure shows a 2-perturbed instance with the same optimal clustering. Now, consider the instance in the bottom-left figure. Let 𝑟1=15. We claim that this instance is not 2-perturbation-resilient. To prove this we show a 2-perturbed instance where the optimal clustering is different. Note that in the original instance, the optimal dilation is 1, and the optimal clusters are {𝑎,𝑐} and {𝑏,𝑑}. The 2-perturbed instance we consider is shown in the bottom-right figure. Note that in the perturbed instance the optimal clustering is {{𝑎,𝑏},{𝑐,𝑑}} with dilation 10/15=2/3. This is because any other clustering has a dilation at least 1.

We also consider another notion of perturbation resilience introduced by Balcan and Liang [8], where the optimal clustering is allowed to be different by a few points when the distances are perturbed. Here we rewrite this notion in terms of NUkC. Two clusterings ={𝐶1,…,𝐶𝑘} and ′={𝐶′1,…,𝐶′𝑘} are called 𝜖-close if at most 𝜖𝑛 points are clustered differently in the two clusterings, i.e., the minimum value of ∑𝑘𝑖=1|𝐶𝑖∖𝐶′𝑓(𝑖)| over all permutations f of {1,2,…,𝑘} is at most 𝜖𝑛.

Definition 3
An instance =(𝑃,𝑑,𝑡) of NUkC is called (𝜓,𝜖)-perturbation-resilient ((𝜓,𝜖)-PR) if for any metric 𝜓-perturbation 𝑑1 of d, any optimal NUkC clustering of ′=(𝑃,𝑑1,𝑡) is 𝜖-close to any optimal clustering of .

This is again a well-studied stability criterion [2]. Note that when 𝜖=0, any optimal NUkC clustering of ′ must be same as any optimal clustering of . This implies that optimal clustering of  and ′ are unique and we obtain the definition of 𝜓-PR. Thus, if an instance of NUkC is 𝜓-PR, then it is also (𝜓,0)-PR, and hence any hardness result for NUkC under 𝜓-PR trivially follows for NUkC under (𝜓,𝜖)-PR. Now, we have the following simple observation, which will be useful later in proving the properties of the PR instances.

Observation 1
Consider an NUkC instance =(𝑃,𝑑,𝑡) that admits a unique optimal clustering . Let C be any cluster in . Also, consider an optimal placement Π where C is covered by a ball B. Then, the following two properties hold.

The center p of the ball B must belong to C.

For any two points u, v that lie in two different clusters of , both of u, v cannot be contained in B.

Proof
Suppose p belongs to the cluster 𝐶′ such that 𝐶≠𝐶′. Construct another clustering ′ by selecting all the clusters in  except C and 𝐶′, and the clusters 𝐶∪{𝑝} and 𝐶′∖{𝑝}. It is not hard to see that ′ is also a feasible clustering induced by Π. As Π is an optimal placement, ′ is also an optimal clustering, which contradicts the uniqueness of the optimal clustering of . Hence, the statement follows.

Suppose B contains both u and v. We construct a new clustering ′, which is identical to  except, in ′, we move the points u, v to the cluster C. Note that the clustering ′ can be induced by the placement Π, as the ball B that covers 𝐶∈ also contains u, v. Hence, ′ is an optimal clustering for  different than , which is a contradiction, and thus the statement follows.

◻

WLOG we can assume that the optimal dilation of a 𝜓-PR or a (𝜓,𝜖)-PR instance of NUkC is 1. Like in the general case without perturbation resilience, in this case also the assumption can be introduced by scaling 𝑟𝑖 values by a guessed value of the optimal dilation 𝛼.

Lemma 1
Suppose there is a polynomial time algorithm  for the NUkC problem with t radii classes under 𝜓-PR (resp. (𝜓,𝜖)-PR) with the properties that (i) for an instance which admits a feasible placement of balls with dilation 1,  returns “yes” and a feasible clustering, and (ii) for an instance which does not admit a feasible placement of balls with dilation 1,  returns “no”. Then, the NUkC problem with t radii classes under 𝜓-PR (resp. (𝜓,𝜖)-PR) can be solved in polynomial time.

Proof
Consider any instance =(𝑃,𝑑,𝑡) of the NUkC problem with t radii classes under 𝜓-PR (resp. (𝜓,𝜖)-PR). Let 𝛼 be the optimal dilation. Note that we do not know the value of 𝛼. However, as the input metric is finite, there are only polynomial number of guesses for 𝛼. We use the following procedure to obtain the optimal clustering for . In each step, we guess a value 𝛼′ for the optimal dilation in the increasing order of the values. We construct a new instance ′ from  by only changing the radius 𝑟𝑖 to 𝛼′⋅𝑟𝑖 for all i. Then, we apply the algorithm  on the constructed instance. If  returns “no”, we repeat the process with a different guess. Otherwise, the procedure terminates. We return the same clustering returned by  as the solution for the instance .

Now, we argue about the correctness of the procedure. First, we claim that ′ is a 𝜓-PR (resp. (𝜓,𝜖)-PR) instance. Before proving this claim we discuss its consequences. Note that if there is no feasible solution for  with dilation 𝛼′, then with 𝑘𝑖 balls of radius 𝛼′⋅𝑟𝑖 for all i it is not possible to cover the input points. Hence, in this case, for the constructed instance, there is no feasible solution with dilation 1. Thus, the algorithm correctly returns “no” assuming ′ is a 𝜓-PR (resp. (𝜓,𝜖)-PR) instance. If there is a feasible solution for  with dilation 𝛼′, then with 𝑘𝑖 balls of radius 𝛼′⋅𝑟𝑖 for all i one can cover the input points. Thus, in that case, for the constructed instance, there is a feasible solution with dilation 1. Hence,  correctly returns “yes” assuming ′ is 𝜓-PR (resp. (𝜓,𝜖)-PR). Thus, when 𝛼′=𝛼,  returns “yes” and the returned clustering is optimal for . Now, we prove the claim.

Claim
′ is a 𝜓-PR (resp. (𝜓,𝜖)-PR) instance.

Proof
First, we show that the optimal clustering of ′ is unique. Note that the optimal dilation of ′ is 𝛼/𝛼′. Suppose optimal clustering of ′ is not unique. Then, there are two different clusterings where the points can be covered using 𝑘𝑖 balls of radius (𝛼/𝛼′)⋅𝛼′⋅𝑟𝑖=𝛼⋅𝑟𝑖 from each class i. It follows that there are two different optimal clusterings for . But, this is a contradiction, and thus the optimal clustering of ′ is unique. Note that the optimal clusterings of  and ′ are identical. Let  be that clustering. Now, consider any 𝜓-perturbation 𝑑1 of the input metric d and the 𝜓 perturbed instance ′1 of ′. Let 1=(𝑃,𝑑1,𝑡) be the corresponding 𝜓 perturbed instance of . Also, let ′1 be the optimal clustering of ′1 with dilation 𝛼′1. For the sake of contradiction, suppose ′1 is not identical (resp. 𝜖-close) to . We argue that ′1 is also an optimal clustering of 1. But, this is a contradiction, as 1 is a 𝜓 perturbed instance of  and  is a 𝜓-PR (resp. (𝜓,𝜖)-PR) instance. Now, note that a placement that induces the clustering ′1 of ′1 uses 𝑘𝑖 balls of radius 𝛼′1⋅𝛼′⋅𝑟𝑖 from each class i. Thus, ′1 is a clustering for 1 with dilation 𝛼′1⋅𝛼′. It is sufficient to argue that this dilation is optimal for 1. Suppose the optimal dilation is <𝛼′1⋅𝛼′. Then, using 𝑘𝑖 balls of radius <𝛼′1⋅𝛼′⋅𝑟𝑖 from each class i all the points can be covered. Hence, there is a clustering for ′1 with dilation <𝛼′1, which is a contradiction, and hence the claim follows. ◻

Finally, as the number of guesses for 𝛼 is a polynomial, the procedure terminates in polynomial time. ◻

Properties of Perturbation Resilience
In this section, we show that perturbation resilience imposes useful structure on the optimal solution. First, we consider the instances under (𝜓,𝜖)-perturbation resilience with 𝜓=3 and prove an interesting property of the optimal clustering.

Lemma 2
Consider any optimal placement Π for a (3,𝜖)-PR NUkC instance =(𝑃,𝑑,𝑡) with optimal dilation 1 where the size of each optimal cluster is >𝜖𝑛+1. Let 𝐶1 and 𝐶2 be two clusters induced by two balls of Π with radii 𝑟𝑖 and 𝑟𝑗, respectively with 𝑟𝑖≥𝑟𝑗. Then, for any 𝑝∈𝐶1 and 𝑞∈𝐶2, 𝑑(𝑝,𝑞)>𝑟𝑖.

Proof
Let  be an optimal clustering of  that is induced by Π and contains 𝐶1,𝐶2 as clusters. For the sake of contradiction, suppose there are two points 𝑝∈𝐶1 and 𝑞∈𝐶2 such that 𝑑(𝑝,𝑞)≤𝑟𝑖. Then, we show that there is a 3-perturbation 𝑑′ of d such that an optimal clustering of ′=(𝑃,𝑑′,𝑡) is not 𝜖-close to . But, this gives a contradiction to the assumption that  is a (3,𝜖)-PR instance, and hence the lemma follows.

To construct the 3-perturbation 𝑑′ of d, we at first construct another metric 𝑑1. Later we will scale 𝑑1 to construct 𝑑′. Let 𝐵1=𝐵(𝑐1,𝑟𝑖) and 𝐵2=𝐵(𝑐2,𝑟𝑗) be the balls in Π that induce 𝐶1 and 𝐶2, respectively. Then, for any 𝑠∈𝐶2, 𝑑(𝑝,𝑠)≤𝑑(𝑝,𝑞)+𝑑(𝑞,𝑠)≤𝑟𝑖+2𝑟𝑗≤3𝑟𝑖. Also, for any 𝑤∈𝐶1, 𝑑(𝑝,𝑤)≤2𝑟𝑖. First, we construct a complete graph G with vertex set equal to P, and for any edge (u, v), its length is defined by the function l as follows.

𝑙(𝑢,𝑣)={3𝑟𝑖3⋅𝑑(𝑢,𝑣)if 𝑢=𝑝,𝑣∈(𝐶1∪𝐶2)∖{𝑐1} and 𝑑(𝑢,𝑣)≥𝑟𝑖otherwise
The distance 𝑑1 is the shortest path metric on G. Note that, as mentioned before, for any 𝑣∈(𝐶1∪𝐶2)∖{𝑐1}, 𝑑(𝑝,𝑣)≤3𝑟𝑖. Thus, it is not hard to see that, for any 𝑢,𝑣∈𝑃, 𝑑(𝑢,𝑣)≤𝑑1(𝑢,𝑣)≤3⋅𝑑(𝑢,𝑣). Now, let us define the metric 𝑑′. For any two points u, v, 𝑑′(𝑢,𝑣)=𝑑1(𝑢,𝑣)/3. Hence, for any 𝑢,𝑣∈𝑃, 𝑑(𝑢,𝑣)/3≤𝑑′(𝑢,𝑣)≤𝑑(𝑢,𝑣). It follows that 𝑑′ is a metric 3-perturbation of d, and thus the optimal clustering of ′ is 𝜖-close to .

Now, let 1=(𝑃,𝑑1,𝑡) and 1 be an optimal clustering of 1. As scaling does not change optimality of a clustering (for a formal proof see the proof of Lemma 1), 1 is also an optimal clustering of the instance ′=(𝑃,𝑑′,𝑡). Thus 1 is 𝜖-close to . Next, we prove the following claim.

Claim
The optimal dilation of 1 is 3.

Proof
As for any 𝑢,𝑣∈𝑉, 𝑑1(𝑢,𝑣)≤3⋅𝑑(𝑢,𝑣), the optimal dilation of 1 is at most 3. We prove that this dilation is at least 3. Suppose the dilation is less than 3.

Let Π′ be any placement with dilation less than 3 that induces the optimal clustering 1 of 1. Then, we show that 1 is also a feasible clustering of  with dilation less than 1. But, this is a contradiction, and hence the claim follows. Next, given Π′, we show the existence of a placement for  with dilation less than 1 that induces 1.

Consider any cluster 𝐶′∈1, and suppose it gets covered by an 𝑟𝑙-ball 𝐵=𝐵(𝑤,𝑟) in Π′. Let x be any point in 𝐶′. Now, consider the distance 𝑑1. Let 𝜋 be any shortest path between w and x. We claim that 𝜋 cannot contain the edge (p, v) for any 𝑣∈(𝐶1∪𝐶2)∖{𝑐1} with 𝑑(𝑝,𝑣)≥𝑟𝑖. For the sake of contradiction, say 𝜋 contains (p, v). Note that 𝑑1(𝑝,𝑣)=3𝑟𝑖. As 𝜋 contains (p, v), 𝑑1(𝑤,𝑝)≤𝑟−3𝑟𝑖. Now, consider any point 𝑢∈(𝐶1∪𝐶2)∖{𝑐1}. If 𝑑(𝑝,𝑢)≥𝑟𝑖, 𝑑1(𝑝,𝑢)=3𝑟𝑖. Otherwise, 𝑑(𝑝,𝑢)<𝑟𝑖, and thus 𝑑1(𝑝,𝑢)=3⋅𝑑(𝑝,𝑢)<3𝑟𝑖. Thus, 𝑑1(𝑤,𝑢)≤𝑑1(𝑤,𝑝)+𝑑1(𝑝,𝑢)≤𝑟. Hence, all the points of (𝐶1∪𝐶2)∖{𝑐1} are in B. But, as 𝐶1,𝐶2 contain more than 𝜖𝑛+1 points, it follows that there is an optimal clustering of 1 that is not 𝜖-close to . Thus, we get a contradiction. Hence, 𝜋 does not contain (p, v), and thus from the definition of the metric 𝑑1, it follows that 𝑑1(𝑤,𝑥)=3⋅𝑑(𝑤,𝑥). Thus, a ball centered at w and having radius r/3 can cover the points of 𝐶′ in . Now, note that 𝑟<3𝑟𝑙, and thus 𝑟/3<𝑟𝑙. Hence, it is sufficient to use an 𝑟𝑙-ball with less than 1 factor expansion to cover the points of 𝐶′ in . In our new placement for , we use the 𝑟𝑙-ball B(w, r/3) corresponding to each such cluster 𝐶′. Clearly, the dilation of the new placement is less than 1. ◻

Now, we show a clustering 2 of 1 that contains exactly k clusters, has dilation 3 and is not 𝜖-close to . 2 contains all the clusters in  except 𝐶1 and 𝐶2, and the clusters (𝐶1∪𝐶2)∖{𝑐1},{𝑐1}. Note that for any 𝑠∈(𝐶1∪𝐶2)∖{𝑐1}, 𝑑(𝑝,𝑠)≤3𝑟𝑖. Thus, (𝐶1∪𝐶2)∖{𝑐1} can be covered by a ball of radius 3𝑟𝑖. It follows that the dilation of 2 is at most 3 and hence it is an optimal clustering. Clearly, the two clusterings  and 2 differ in >𝜖𝑛 points, as |𝐶1|>𝜖𝑛+1 and |𝐶2|>𝜖𝑛+1. Now, for the same reason mentioned before, 2 is also an optimal clustering of the instance ′=(𝑃,𝑑′,𝑡). Hence, 𝑑′ is the desired 3-perturbation. This completes the proof of the lemma. ◻

In the proof of the above lemma, one could have defined 𝑑′ directly without going via 𝑑1. However, for simplicity of exposition, we have followed this approach. Indeed, this approach shows that if one defines 𝜓-perturbation by increasing the (instead of decreasing) distances, the lemma still holds. A proof can directly use the 3-perturbation 𝑑1 in that case.

Note that, as a 3-PR instance is also a (3, 0)-PR instance, the above lemma trivially follows for 3-PR instances. In the following, we will show that the above mentioned property of the optimal clustering follows even for any 2-PR instance.

Lemma 3
Consider any optimal placement Π for a 2-PR NUkC instance =(𝑃,𝑑,𝑡) with optimal dilation 1. Let 𝐶1 and 𝐶2 be two clusters induced by two balls of Π with radius 𝑟𝑖 and 𝑟𝑗, respectively, where 𝑟𝑖≥𝑟𝑗. Then, for any 𝑝∈𝐶1 and 𝑞∈𝐶2, 𝑑(𝑝,𝑞)>𝑟𝑖.

Proof
Let  be the optimal clustering induced by the placement Π. Also, let 𝐵1 and 𝐵2 be the balls that induce the clusters 𝐶1 and 𝐶2, respectively. For the sake of contradiction, suppose there exist two points 𝑝∈𝐶1, 𝑞∈𝐶2 such that 𝑑(𝑝,𝑞)≤𝑟𝑖. The idea is to show that there is a metric 𝑑1 that is a 2-perturbation of d such that ′=(𝑃,𝑑1,𝑡) has different optimal clustering than . But, this is a contradiction, and thus the lemma follows.

Let 𝑐𝑡 be the center of the ball 𝐵𝑡 for 𝑡∈{1,2}. Then, 𝑑(𝑐1,𝑞)≤𝑑(𝑐1,𝑝)+𝑑(𝑝,𝑞)≤2𝑟𝑖. We define the distance function 𝑑1 in the following way. First, we construct the complete graph with vertex set equal to P, and for any edge (u, v), its length is defined by the function l.

𝑙(𝑢,𝑣)={min{𝑑(𝑢,𝑣),𝑟𝑖}𝑑(𝑢,𝑣)if 𝑢=𝑐1 and 𝑣=𝑞otherwise
We note that, for any u, v, 𝑑(𝑢,𝑣)/2≤𝑙(𝑢,𝑣)≤𝑑(𝑢,𝑣). The distance function 𝑑1 is defined by the shortest path distance between any pair of vertices. It is not hard to verify the following observation.

Observation 2
𝑑1 is a metric 2-perturbation of d.

Hence, the instance ′=(𝑃,𝑑1,𝑡) has the same optimal clustering . Next, we prove a claim that the optimal dilation of ′ is also 1.

Claim
The optimal dilation of ′ is 1.

Proof
As for any 𝑢,𝑣∈𝑉, 𝑑1(𝑢,𝑣)≤𝑑(𝑢,𝑣), the optimal dilation of ′ is at most 1. We prove that this dilation is at least 1. Suppose the dilation is less than 1.

Let Π′ be any placement with dilation less than 1 that induces the clustering  of ′. Then, we show that there is a placement for  with dilation less than 1. But, this is a contradiction, and hence the claim follows. Consider any cluster 𝐶∈ that gets covered by an 𝑟𝑡-ball 𝐵=𝐵(𝑤,𝑟) in Π′. Let x be any point in C. Now, consider the distance 𝑑1. Let 𝜋 be any shortest path between w and x. We claim that 𝜋 cannot contain the edge (𝑐1,𝑞). For the sake of contradiction, say 𝜋 contains (𝑐1,𝑞). But, this implies 𝑑1(𝑤,𝑐1)≤𝑑1(𝑤,𝑥)≤𝑟 and 𝑑1(𝑤,𝑞)≤𝑑1(𝑤,𝑥)≤𝑟. Thus, B contains both 𝑐1 and q. Now, by the first property of Observation 1, 𝑐1 belongs to 𝐶1. Thus, by the second property of Observation 1, we obtain a contradiction, as 𝑞∈𝐶2. Hence, 𝜋 does not contain (𝑐1,𝑞). It follows that 𝑑1(𝑤,𝑥)≥𝑑(𝑤,𝑥). Thus, the radius of the ball needed to cover the points of C in  is at most r. Hence, it is sufficient to use an 𝑟𝑡-ball with at most 𝑟/𝑟𝑡<1 factor expansion to cover the points of C in . Now, we construct a placement for  by selecting the same balls to cover the clusters that are used in Π′. Clearly, the dilation of this placement is less than 1. ◻

Next, we show that there is a different clustering ′ of ′ with exactly k clusters that achieves the optimal dilation. This gives rise to a contradiction, and thus 𝑑(𝑝,𝑞)>𝑟𝑖. Now, there are two cases. In the first case, q is the only point in 𝐶2, and thus 𝐶2∖{𝑞} is empty. In this case, we pick a non-singleton cluster C from ∖{𝐶1} and choose a point 𝑠∈𝐶. Such a cluster exists WLOG. Then, we define ′ to be the set of clusters in  except 𝐶,𝐶1 and 𝐶2, and the clusters 𝐶1∪{𝑞},{𝑠} and 𝐶∖{𝑠}. In the second case, q is not the only point in 𝐶2, and thus 𝐶2∖{𝑞} is not empty. In this case, ′ is defined to be the set of clusters in  except 𝐶1 and 𝐶2, and the clusters 𝐶1∪{𝑞},𝐶2∖{𝑞}. It is not hard to see that 𝐶1∪{𝑞} can be covered by the ball 𝐵(𝑐1,𝑟𝑖). Also, if 𝐶2∖{𝑞} is not empty, then 𝐵(𝑐2,𝑟𝑗) covers the points in 𝐶2∖{𝑞}. Hence, in all the cases, it is trivial to verify that the dilation of the new clustering is 1. ◻

Note that, in the above proof, to show that ′ has dilation 1, we argue that there is a placement with dilation 1. The balls in the placement might not be disjoint (both 𝐵(𝑐1,𝑟𝑖) and 𝐵(𝑐2,𝑟𝑗) cover q). But, for the sake of just showing the optimality of the clustering, it is sufficient to show the existence of such a placement.

NUkC with a Constant Number of Radii Classes
In this section, we show a polynomial time reduction from NUkC to the Constrained Resource Minimization for Fire Containment on Trees problem.

Definition 4
(Constrained Resource Minimization for Fire Containment on Trees (CRMFC-T)). Given a rooted tree 𝑇=(𝑉,𝐸) with height 𝑡+1, a set of forbidden nodes 𝐹⊆𝑉, and integers 𝑘1,…,𝑘𝑡, the goal is to decide if there is a collection of non-root nodes 𝑈⊆(𝑉∖𝐹) such that (a) for every leaf-root path 𝜋, U contains at least one node from 𝜋, and (b) |𝑈∩𝐿𝑖|≤𝑘𝑖 for 1≤𝑖≤𝑡, where 𝐿𝑖 is the layer i nodes of T, i.e., the nodes at distance exactly i from the root.

Given any instance =(𝑃,𝑑,𝑡) of NUkC under 2-PR or (3,𝜖)-PR (the size of each optimal cluster is more than 𝜖𝑛+1), we will show how to construct an instance ′ of CRMFC-T such that  has a feasible placement with dilation 1 iff ′ has a feasible solution. Also, from a feasible solution for ′, a feasible solution for  can be computed in polynomial time. In the constructed instance ′, the height of the tree is one more than the number of radii classes in NUkC. We show that CRMFC-T can be solved in polynomial time if the height of the input tree is a constant. From Lemma 1, it follows that the perturbation resilient version of NUkC can be solved in polynomial time if the number of classes is a constant. Thus, we obtain the following theorem.

Theorem 1
NUkC under 2-PR (or (3,𝜖)-PR, where the size of each optimal cluster is more than 𝜖𝑛+1) can be solved in polynomial time if the number of radii classes is a constant.

Tree Construction
Let G be the complete graph that defines the distances between the input points. Note that we are also given the input radii 𝑟1>𝑟2>⋯>𝑟𝑡. We construct the tree T in t rounds that contains t levels other than the root level. We denote the nodes at level i by 𝐿𝑖 for 𝑖∈{0,…,𝑡}. 𝐿0 contains a singleton node—the root of the tree. For 𝑖≥1, in i th round, we construct the nodes 𝐿𝑖 and connect them with the nodes in 𝐿𝑖−1. Each node v in T corresponds to a connected subgraph 𝐺𝑣 of G. The root corresponds to G itself. Also, each node is marked with either yes or no denoting if the node can be selected or it is in the forbidden set.

For each index 𝑖∈{1,…,𝑡}, in i th round, we consider all the nodes 𝑣∈𝐿𝑖−1 and the subgraph 𝐺𝑣 corresponding to v. We remove all the edges with weight more than 𝑟𝑖 from 𝐺𝑣. Let 𝐺1𝑣,…,𝐺𝑙𝑣 be the connected components formed from 𝐺𝑣 due to the removal of these edges. We add l children of v to 𝐿𝑖 corresponding to these connected l subgraphs. For each such child u, if there is a node w in 𝐺𝑢, such that for all node x in 𝐺𝑢, 𝑑(𝑤,𝑥)≤𝑟𝑖, we label u with yes. Otherwise, we label u with no (forbidden). Lastly, for each level 𝑖≥1, the number of nodes that can be chosen from 𝐿𝑖 in CRMFC-T is set to 𝑘𝑖. The following lemma establishes the connection between the two instances  and ′.

Lemma 4
 has a feasible placement with dilation 1 iff ′ has a feasible solution to CRMFC-T.

Proof
First, suppose there is a feasible solution to ′. For each chosen node v, v must be a yes node. Let i be the integer such that 𝑣∈𝐿𝑖. Then, the points in 𝐺𝑣 can be covered by an 𝑟𝑖 ball centered at some point in 𝐺𝑣. We choose this ball in our placement. Note that we select at most 𝑘𝑖 balls of radius 𝑟𝑖 for all i. We prove that each point is covered in the constructed placement. Consider any point p. The way we construct the tree, each point can lie in the connected subgraph 𝐺𝑣 of exactly one node v of 𝐿𝑗 for all j. Let 𝜋 be the root-leaf path in T, such that for any 𝑣∈𝜋, p is in 𝐺𝑣. Now, there must be a node along 𝜋 that is chosen in the solution of CRMFC-T. Let u be such a node. As we place a ball of radius 𝑟𝑖 that covers all the points of 𝐺𝑢, p gets covered. Thus,  has a feasible placement with dilation 1.

Now, suppose  has a feasible placement with dilation 1. Let  be the clustering induced by the placement. Now, consider any cluster 𝐶∈, which is covered by a ball of radius 𝑟𝑗. Thus, c-radius(𝐶,𝑑)≤𝑟𝑗. The way the tree T is constructed it follows that all the points in C remain in the same connected subgraph 𝐺𝑣 corresponding to a unique vertex 𝑣∈𝐿𝑖 for each 𝑖≤𝑗. Let 𝐺𝑢 be the subgraph corresponding to level 𝑗−1. As  is a 2-PR (resp. (3,𝜖)-PR) instance, from Lemma 3 (resp. Lemma 2), we know that, for any 𝑝∈𝐶 and 𝑞∈𝑃∖𝐶, 𝑑(𝑝,𝑞)>𝑟𝑗. Thus, when the edges with weight more than 𝑟𝑗 are removed from 𝐺𝑢, p and q cannot remain in the same component. But, as c-radius(𝐶,𝑑)≤𝑟𝑗 all the points of C remain in the same component. Also, by the first property of Observation 1, the center of the 𝑟𝑗-ball that covers C must lie in C. It follows that there is a yes node 𝐶(𝑣)∈𝐿𝑗 such that 𝐺𝐶(𝑣) contains only the points of C as vertices. For each cluster 𝐶∈, we select the yes node C(v) in the solution to CRMFC-T. It is not hard to see that we choose at most 𝑘𝑗 nodes from 𝐿𝑗. Now, consider any root-leaf path 𝜋 in T corresponding to a leaf l. Let p be a point in 𝐺𝑙. Also, let p be a point in the cluster 𝐶∈. Then, there must be a yes node C(v) in 𝜋 such that 𝐺𝐶(𝑣) contains only the points of C. As we choose v in our solution, we have at least one node from the path 𝜋. Hence, the constructed solution is feasible. ◻

The Algorithm for CRMFC-T
In this section, we design a dynamic programming based algorithm that decides the feasibility of any instance of CRMFC-T. The algorithm runs in polynomial time when the height of the tree is a constant. Let T be the input tree having height t, i.e., T has 𝑡+1 levels 𝐿0,…,𝐿𝑡. 𝐿0 contains only the root of T. Let 𝑛𝑖=|𝐿𝑖|. We also assume that the nodes of 𝐿𝑖 are ordered for all 𝑖≥1, i.e., 𝐿𝑖={𝑣𝑖1,…,𝑣𝑖𝑛𝑖}. For 𝑗≤𝑙, let F(i, j, l) be the union of the induced subtrees of T rooted at the vertices 𝑣𝑖𝑗,…,𝑣𝑖𝑙. We construct the tree T(i, j, l) from F(i, j, l) by connecting the roots of the subtrees to a common root.

Let feasible(𝑇(𝑖,𝑗,𝑙),𝑙𝑖,𝑙𝑖+1,…,𝑙𝑡) be the function that decides if there is a feasible solution to CRMFC-T for the tree T(i, j, l) by selecting at most 𝑙𝑚 nodes from level m, where 𝑖≤𝑚≤𝑡. Note that computing the function feasible(𝑇=𝑇(1,1,𝑛1),𝑘1,…,𝑘𝑡) solves the CRMFC-T problem. We consider the following recursive definition of feasible(). In the base case, if 𝑖=𝑡−1, the function can be computed in polynomial time. Otherwise, if 𝑙𝑖 is 0, let 𝑗′ be the minimum index such that 𝑣𝑖+1,𝑗′ is a child of 𝑣𝑖𝑗 and 𝑙′ be the maximum index such that 𝑣𝑖+1,𝑙′ is a child of 𝑣𝑖𝑙. In this case, feasible(𝑇(𝑖,𝑗,𝑙),𝑙𝑖,𝑙𝑖+1,…,𝑙𝑡)=feasible(𝑇(𝑖+1,𝑗′,𝑙′),𝑙𝑖+1,…,𝑙𝑡). Otherwise, there must be a minimum index 𝑗≤𝑗1≤𝑙 such that a yes node 𝑣𝑖𝑗1 is selected to be in the solution. For such a fixed 𝑗<𝑗1<𝑙, let 𝑗′ be the minimum index such that 𝑣𝑖+1,𝑗′ is a child of 𝑣𝑖𝑗 and 𝑙′ be the maximum index such that 𝑣𝑖+1,𝑙′ is a child of 𝑣𝑖,𝑗1−1. In this case, if there are values 𝑙1𝑖+1,…,𝑙1𝑡,𝑙2𝑖,𝑙2𝑖+1,…,𝑙2𝑡 such that 𝑙2𝑖=𝑙𝑖−1, 𝑙𝑚=𝑙1𝑚+𝑙2𝑚 for all 𝑖+1≤𝑚≤𝑡, and both feasible(𝑇(𝑖+1,𝑗′,𝑙′),𝑙1𝑖+1,…,𝑙1𝑡) and feasible(𝑇(𝑖,𝑗1+1,𝑙),𝑙2𝑖,𝑙2𝑖+1,…,𝑙2𝑡) return yes, then feasible(𝑇(𝑖,𝑗,𝑙),𝑙𝑖,𝑙𝑖+1,…,𝑙𝑡) also returns yes. Otherwise if for all 𝑗1 there are no such values, feasible(𝑇(𝑖,𝑗,𝑙),𝑙𝑖,𝑙𝑖+1,…,𝑙𝑡) returns no. The corner cases when 𝑗1=𝑗 or 𝑗1=𝑙 can be handled similarly.

It is not hard to verify that feasible(𝑇(𝑖,𝑗,𝑙),𝑙𝑖,𝑙𝑖+1,…,𝑙𝑡) correctly decides whether there is a feasible solution or not for T(i, j, l). To compute the feasible() function for all possible values one can use a simple dynamic programming based technique. In particular, one can store the values of the function for all possible parameters in a table. The table is filled up in a bottom-up manner, where the values corresponding to a level j subtree is computed before computations of the values corresponding to a level i subtree for 𝑖<𝑗. It is not hard to see that the procedure would take polynomial time and space for a constant t.

Hardness of Approximation
In this section, we will prove the following theorem.

Theorem 2
For any constant c and any 𝛾≤𝑐𝑛𝑐, NUkC under 𝛾-PR is hard to approximate in polynomial time within a factor of 𝛾, unless 𝖭𝖯=𝖱𝖯.

To prove this theorem, we use a chain of reductions that involves the following problems.

1-in-3SAT [28]

INSTANCE: An ordered pair (B, C) consisting of a set B of Boolean variables and a set C of clauses over B having three literals each in conjunctive normal form.

QUESTION: Is there a truth assignment for B such that every clause in C contains exactly one true literal?

RESOURCE MINIMIZATION FOR FIRE CONTAINMENT oN TREES (RMFC-T) [18, 23]

INSTANCE: A rooted tree T and an integer m.

QUESTION: Is there a set N of non-root nodes such that every root-leaf path contains a node from N and for any integer 𝑗≥1, |𝑁∩𝐿𝑗|≤𝑚, where 𝐿𝑗 is the set of nodes at distance exactly j from the root?

The chain of reductions that we use consists of the following reductions: (1) 3SAT to 1-in-3SAT, (2) 1-in-3SAT to RMFC-T, and (3) RMFC-T to NUkC. Note that NUkC under PR has a unique optimal solution. As we would like to show hardness for the PR version of NUkC, we will consider “Unambiguous” version of all these problems. For “Unambiguous” version of 3SAT and 1-in-3SAT, if an instance has a feasible solution, the solution is unique. For “Unambiguous” version of RMFC-T, if an instance has a feasible solution, the solution has a specific structure that we will define shortly. For the reduction from 3SAT to 1-in-3SAT, we ensure that the reduction preserves the number of solutions. Such a reduction is called a parsimonious reduction. To refer to the Unambiguous version of a problem we add a prefix ‘U-’ to the problem name. Next, we discuss the details of the reductions.

In a celebrated work, Valiant and Vazirani [29] showed that U-3SAT is hard, unless 𝖭𝖯=𝖱𝖯. Schaefer [28] showed a reduction from 3SAT to 1-in-3SAT to prove the 𝖭𝖯-hardness of the latter problem. As noted in [11] the reduction is parsimonious. We use the same reduction (now from U-3SAT to U-1-in-3SAT) to prove the hardness of U-1-in-3SAT, unless 𝖭𝖯=𝖱𝖯.

Next, we discuss the reduction from 1-in-3SAT to RMFC-T. First, we define the Unambiguous version of RMFC-T. For a vertex v of a rooted tree T, let leaves(𝑇𝑣) be the set of leaves at the subtree rooted at v. For any two feasible solutions 𝑆1 and 𝑆2 of RMFC-T, 𝑆1 and 𝑆2 are called equivalent, if the two sets ∪𝑣∈𝑆1 { leaves(𝑇𝑣)} and ∪𝑣∈𝑆2 { leaves(𝑇𝑣)} are identical. U-RMFC-T is same as RMFC-T except if the input instance has more than one feasible solutions, then all the feasible solutions are pairwise equivalent. The reduction from U-1-in-3SAT to U-RMFC-T appears towards the end of this section. The reduction is a non-trivial adaptation of the reduction due to Finbow et al. [18] from a version of 3SAT (RESTRICTED NAE 3-SAT) to the RMFC-T problem. We summarize our finding in the following lemma.

Lemma 5
Given a tree T, it is not possible to distinguish between the following two cases in polynomial time, unless 𝖭𝖯=𝖱𝖯.

YES: There is a solution to the U-RMFC-T instance with 𝑚=1.

NO: There is no solution to the U-RMFC-T instance with 𝑚=1.

To complete the chain of reductions, now we discuss the last reduction. In particular, we show a reduction from RMFC-T to NUkC that proves the following theorem.

Theorem 3
For any constant c and any 𝛾≤𝑐𝑛𝑐, NUkC is 𝖭𝖯-hard to approximate within a factor of 𝛾 in tree metrics.

Note that this theorem has already been proved in [13]. However, it is not straightforward to show that the instances of NUkC they construct are perturbation resilient. Using a similar construction, we will argue that the instances of NUkC to which the instances of RMFC-T map are perturbation resilient. However, to ensure that the constructed instance of NUkC has a unique optimal solution, we will consider the Unambiguous version of RMFC-T.

Proof of Theorem 3
To prove the theorem we show a reduction from U-RMFC-T. As mentioned before, the reduction is similar to the reduction used by Chakrabarty et al. [13]. The construction is as follows. Let h be the height of the tree. We set P to be the leaves of the given tree T, i.e., 𝑃=𝐿ℎ. For any edge (u, v) of T such that 𝑢∈𝐿ℎ and 𝑣∈𝐿ℎ−1, assign a weight (𝛾+1)/2 to (u, v). For any edge (u, v) of T such that 𝑢∈𝐿𝑖 and 𝑣∈𝐿𝑖−1 for 𝑖≤ℎ−1, assign a weight ((𝛾+1)ℎ−𝑖+1−(𝛾+1)ℎ−𝑖)/2 to (u, v). Then the distance function d is the shortest-path metric on P induced by the weights of T. We set 𝑡=ℎ, 𝑟𝑡=0 and for any 1≤𝑗<𝑡, 𝑟𝑗=(𝛾+1)𝑡−𝑗. Also 𝑘1=…=𝑘𝑡=1. Now we have the following observation.

Observation 3
For any two leaves 𝑢,𝑢′ with a common ancestor 𝑣∈𝐿𝑗, 𝑑(𝑢,𝑢′)≤𝑟𝑗.

Proof
𝑑(𝑢,𝑢′)≤𝑑(𝑢,𝑣)+𝑑(𝑣,𝑢′)=((𝛾+1)/2+((𝛾+1)2−(𝛾+1))/2+…+((𝛾+1)ℎ−𝑗−(𝛾+1)ℎ−𝑗−1)/2)+((𝛾+1)/2+((𝛾+1)2−(𝛾+1))/2+…+((𝛾+1)ℎ−𝑗−(𝛾+1)ℎ−𝑗−1)/2)=𝑟𝑗.
◻

We note that the weight of any edge is bounded by (𝛾+1)ℎ−1=𝑐𝑂(𝑛𝑐ℎ) and thus can be represented using 𝑂(𝑛𝑐ℎ) number of bits. It follows that the construction can be done in polynomial-time. We denote the constructed instance of NUkC by I. For simplicity, we use the terms point and leaf interchangeably. The following lemma completes the proof of Theorem 3 which follows from the construction and the fact that the feasible solutions for T are pairwise equivalent.

Lemma 6
If T is the “YES” case of Lemma 5, then the optimum dilation of I is 1. If T is the “NO” case of Lemma 5, then the optimum dilation of I is more than 𝛾. Moreover, I has a unique optimal clustering.

Proof
Let T be a “YES” instance and N be a solution for T. We construct a solution for I from N as follows. For any 𝑣∈𝑁, let j be the integer such that 𝑣∈𝐿𝑗. We select a leaf u from the subtree rooted at v and place a ball of radius 𝑟𝑗. We note that at most 1 ball of radius 𝑟𝑖 is selected for all i, as |𝑁∩𝐿𝑖|≤1. Now consider any point 𝑤∈𝑃. Then there must be a node v in N along the path between w and the root. Let 𝑣∈𝐿𝑗. Now the way we place the balls there must be a leaf u in the subtree rooted at v such that a ball of radius 𝑟𝑗 is opened at u. As v is a common ancestor of u and w, from Observation 3, it follows that 𝑑(𝑢,𝑤)≤𝑟𝑗. Hence the ball 𝐵(𝑢,𝑟𝑗) covers w.

Now let T be a “NO” instance and the optimum dilation of I be at most 𝛾. Consider such a solution S corresponding to the instance I. We construct a solution N for U-RMFC-T on T using S as follows. For any 1≤𝑗≤𝑡, let u be the point where the ball (of radius at most 𝛾𝑟𝑗) corresponding to 𝑟𝑗 is placed. Let v be the ancestor of u that is in 𝐿𝑗. We add v to N. Note that, as S contains only one ball corresponding to the value 𝑟𝑖, |𝑁∩𝐿𝑖|≤1 for all i. Now consider any leaf w. We show that N contains a node along the w-root path. Let B be a ball in S that covers w. Also let B be corresponding to the value 𝑟𝑗 and is centered at the point u. Suppose v is the ancestor of u that is in 𝐿𝑗. As the radius of the ball at u is at most 𝛾𝑟𝑗<𝑟𝑗−1, a point that is not contained in the subtree rooted at v cannot be covered by B. Hence w must be contained in the subtree rooted at v and thus w-root path contains 𝑣∈𝑁. But this implies that N is a solution for T corresponding to the “YES” case and thus T must be a “YES” instance. But this is a contradiction and thus the optimum dilation of I must be more than 𝛾.

As the feasible solutions for T are pairwise equivalent, it follows due to argument above that these feasible solutions get mapped to a unique optimal clustering of dilation 1. Similarly, the unique optimal clustering of dilation 1 gets mapped to a feasible solution of T. It follows that I has a unique optimal clustering. ◻

Hardness of Perturbation Resilient Version of NUkC
To show the hardness of the 𝛾-perturbation-resilient version of NUkC, we prove that the constructed instances of U-NUkC in the reduction from U-RMFC-T to U-NUkC in tree metrics are 𝛾-PR. First, we remind the reader of the tree metric 𝑑∗ we used there. We are given a parameter 𝛾 and a tree 𝑇𝛾 with height h whose leaves are at the same distance from the root. The points in the metric space correspond to all the leaves of 𝑇𝛾. Let n be the number of leaves. Also, let 𝐿𝑖 be the nodes of 𝑇𝛾 at level i for 1≤𝑖≤ℎ. For an edge (u, v) of T such that 𝑢∈𝐿ℎ and 𝑣∈𝐿ℎ−1, we assign a weight 𝑙(𝑢,𝑣)=(𝛾+1)/2 to (u, v). For each 𝑢∈𝐿𝑖, 𝑣∈𝐿𝑖−1 for 𝑖≤ℎ−1 such that (u, v) is an edge in 𝑇𝛾, we assign a weight 𝑙(𝑢,𝑣)=((𝛾+1)ℎ−𝑖+1−(𝛾+1)ℎ−𝑖)/2. For any two leaves 𝑤,𝑤′, 𝑑∗(𝑤,𝑤′) is the length of the shortest path between w and 𝑤′, i.e., if the least common ancestor of 𝑤,𝑤′ is in 𝐿𝑗, then 𝑑∗(𝑤,𝑤′)=(𝛾+1)ℎ−𝑗. We set 𝑡=ℎ, 𝑟𝑡=0 and for any 1≤𝑗<𝑡, 𝑟𝑗=(𝛾+1)𝑡−𝑗. Also, 𝑘1=…=𝑘𝑡=1. Let 𝐿(𝛾) be the set of leaves of 𝑇𝛾. As the distance between any two points and the 𝑟𝑗’s are of the form (𝛾+1)𝑖 for some i, we have the following observation.

Observation 4
The optimal dilation of the instance ={𝐿(𝛾),𝑑∗,𝑡} is (𝛾+1)𝑖 for some integer 𝑖≥0.

As we have shown before, for any constant c and any 𝛾≤𝑐𝑛𝑐, U-NUkC is hard to approximate within a factor of 𝛾 for the metric space (𝑇𝛾,𝑑∗), unless 𝖭𝖯=𝖱𝖯. Next, we prove the following lemma.

Lemma 7
The instance ={𝐿(𝛾),𝑑∗,𝑡} is 𝛾-PR.

Proof
Let  be the optimal clustering of  and 𝛼 be its dilation. Consider any 𝛾-perturbation 𝑑′ of 𝑑∗. We prove that the optimal clustering ′ of the instance ′={𝐿(𝛾),𝑑′,𝑡} is same as . Suppose for the sake of contradiction that ′ is not same as . As 𝑑′ is a 𝛾-perturbation (the distances are non-increasing), the dilation of ′ is at most 𝛼. We show that ′ is also a feasible clustering for  with dilation at most 𝛼.

Consider any non-singleton cluster 𝐶∈′ with center 𝑐1 that is covered by an 𝑟𝑗-ball for 𝑗<𝑡. Then, for all pairs of points 𝑝,𝑞∈𝐶, 𝑑′(𝑝,𝑞)≤𝛼𝑟𝑗. This is true, as all the points are leaves of the tree. From Observation 4, it follows that 𝛼𝑟𝑗=(𝛾+1)𝑖 for some i. As 𝑑′ is a 𝛾-perturbation of 𝑑∗, 𝑑∗(𝑝,𝑞)≤𝛾⋅𝑑′(𝑝,𝑞)<(𝛾+1)𝑖+1. Now, the way 𝑇𝛾 is constructed, there is no distance values strictly between (𝛾+1)𝑖 and (𝛾+1)𝑖+1. Hence, 𝑑∗(𝑝,𝑞)≤(𝛾+1)𝑖=𝛼𝑟𝑗, and the ball 𝐵(𝑐1,𝛼𝑟𝑗) covers the points of the cluster C w.r.t. 𝑑∗. It follows that ′ is also a feasible clustering for  with dilation at most 𝛼. But, as per our assumption  and ′ are different, and thus the optimal clustering of  is not unique. This is a contradiction, and hence  and ′ must be same. ◻

Hardness in the Euclidean Metric
For Euclidean metric, we prove the following theorem.

Theorem 4
For any constant 𝜅 and any 𝛽≤𝜅𝑛𝜅, NUkC under 𝛽-PR is hard to approximate within a factor of 𝛽 in the Euclidean metric of dimension d for any 𝑑≥1, unless 𝖭𝖯=𝖱𝖯.

This result is in turn based on the following theorem due to Gupta [21].

Theorem 5
[21] Any weighted tree T with L leaves can be embedded in polynomial -time into d-dimensional Euclidean space with 𝑂(𝑑𝐿1/(𝑑−1)min{log𝐿, 𝑑}1/2) distortion.

The idea is to show that if there is a polynomial-time 𝛽-approximation for NUkC under 𝛽-PR in the Euclidean metric for any constant 𝜅 and any 𝛽≤𝜅𝑛𝜅, then there is also a polynomial-time 𝛾-approximation for NUkC under 𝛾-PR in tree metrics for any 𝛾≤𝑐𝑛𝑐, where c is a constant. But, by Theorem 2 this is a contradiction, and hence the proof of the theorem follows. To obtain the 𝛾-approximation in tree metrics we embed the tree metric into Euclidean metric of dimension d using the algorithm of Theorem 5. Then, we use the algorithm for Euclidean metric to obtain a solution for the embedded instance. Lastly, we map this solution back to the tree metric with sufficient expansion of the balls. For a suitable choice of 𝛽, one can show that the constructed solution is a 𝛾-approximation.

Let X and Y be two finite metric spaces with metrics d and 𝑑′, respectively. Let 𝑓:𝑋→𝑌 be a map. Then, the contraction of f is defined as,

𝐷𝑐(𝑓)=max𝑥,𝑦∈𝑋𝑑(𝑥,𝑦)𝑑′(𝑓(𝑥),𝑓(𝑦)).
The expansion of f is similarly defined as,

𝐷𝑒(𝑓)=max𝑥,𝑦∈𝑋𝑑′(𝑓(𝑥),𝑓(𝑦))𝑑(𝑥,𝑦).
The distortion of f, 𝐷(𝑓)=𝐷𝑐(𝑓)⋅𝐷𝑒(𝑓). We need Theorem 5 due to Gupta [21] for proving the hardness result. Next, we prove Theorem 4.

Proof
Suppose there is a polynomial-time 𝛽-approximation for NUkC under 𝛽-PR in the Euclidean metric for any constant 𝜅 and any 𝛽≤𝜅𝑛𝜅. Then, we show that there is a polynomial-time 𝛾-approximation for NUkC under 𝛾-PR in tree metrics for any 𝛾≤𝑐𝑛𝑐, where c is a constant. But, by Theorem 2 this is a contradiction, and hence the proof of the theorem follows.

Now, consider a constant c and any 𝛾≤𝑐𝑛𝑐. Also, consider any instance of NUkC under 𝛾-PR in the tree metric induced by the weighted tree T. We show how to get a 𝛾-approximate solution for T using the approximation algorithm for the Euclidean metric. Let Δ=𝑂(𝑑𝑛1/(𝑑−1)log𝑛). First, we embed the tree T into d-dimensional Euclidean space ℝ𝑑 using the algorithm of Theorem 5. Let 𝑓:𝑇→ℝ𝑑 be the embedding. Also, let d and 𝑑𝑓 denote the tree and the Euclidean metric, respectively. We fix 𝛽 such that 𝛽≤𝛾/Δ, and compute a 𝛽-approximate solution S of NUkC under 𝛽-PR for the Euclidean instance. Thereafter, we construct a solution 𝑆′ for the problem on T from the solution S in the following way. For any node x of T, if S contains a ball centered at f(x) with radius r, then we add the ball at x of radius 𝐷𝑐(𝑓)⋅𝑟 to 𝑆′, where 𝐷𝑐(𝑓) is the contraction of f. First, we show that the solution 𝑆′ constructed in this way covers all the nodes of T. Consider any node x of T. Then, there is a ball in S centered at some point f(y) that covers f(x). Let r be the radius of this ball. It follows that 𝑆′ contains the ball B centered at y having radius 𝐷𝑐(𝑓)⋅𝑟. Now,

𝑑(𝑥,𝑦)≤𝐷𝑐(𝑓)⋅𝑑𝑓(𝑓(𝑥),𝑓(𝑦))≤𝐷𝑐(𝑓)⋅𝑟.
Hence, the ball B contains x, and thus 𝑆′ is a feasible solution. Now, we show that the dilation 𝛼(𝑆′) of the balls in 𝑆′ is at most 𝛾 times the optimum dilation. To this end, let OPT and 𝑂𝑃𝑇𝑓 be the optimum dilation for the tree and the Euclidean instance, respectively. Then, the dilation 𝛼(𝑆′) is at most 𝛽⋅𝑂𝑃𝑇𝑓⋅𝐷𝑐(𝑓). Now, as the distances between the points can get expanded by a factor of at most 𝐷𝑒(𝑓) due to the embedding, 𝑂𝑃𝑇𝑓≤𝐷𝑒(𝑓)⋅𝑂𝑃𝑇. Here 𝐷𝑒(𝑓) is the expansion of f. Hence,

𝛼(𝑆′)≤𝛽⋅𝐷𝑒(𝑓)⋅𝑂𝑃𝑇⋅𝐷𝑐(𝑓)=𝛽⋅𝐷(𝑓)⋅𝑂𝑃𝑇≤𝛽⋅Δ⋅𝑂𝑃𝑇≤𝛾⋅𝑂𝑃𝑇.
This completes the proof of the theorem. ◻

Reduction from U-1-in-3SAT to U-RMFC-T
Finbow et al. [18] showed a reduction from Restricted NAE 3-SAT to RMFC-T. As per the definition of Restricted NAE 3-SAT, if the input instance has a feasible assignment, then it must at least have two. Thus, it cannot have a unique feasible solution. This is the reason behind our selection of the problem 1-in-3SAT, which can have a unique feasible solution. However, the reduction is motivated by the one in [18]. For consistency, we borrow some of their notations.

Given an instance I of U-1-in-3SAT, we construct a rooted tree T with root r in multiple steps. Also, we choose the parameter 𝑚=1. Before discussing the reduction, we have a few definitions to set up the stage. Throughout this discussion, we will use the operation root a copy of a rooted tree (T, r) at a vertex x of a graph G. This means we construct a new graph from the disjoint union of G and T by identifying x and r. A vertex v of a tree is said to be defended by a vertex u if the root to v path contains u. For any path, we assume that its root is one of the degree one vertices. Also, the length of a path is defined as the number of edges contained in it.

A ladder tree ℒ𝑇(𝑛) is a path having 2𝑛+1 vertices such that the middle vertex of the path is identified as the root of the tree. See Fig. 3(i). Thus, the root of ℒ𝑇(𝑛) has two branches each being a path of length n. A bell tree ℬ𝑇(𝑛,𝑚) is formed by rooting a ladder tree ℒ𝑇(𝑛−𝑚) at an endpoint of a path having m edges. The other endpoint of the path becomes the root of the bell tree. See Fig. 3(ii). Thus, in the figure, the distance (in terms of edges) between a and b is m and the distance between a and a leaf is n. A snake tree 𝒮𝑇(𝑛,𝑚) is formed by rooting an 𝑚−1 length path at the root of a bell tree ℬ𝑇(𝑛,𝑚+1). The root of the bell tree (or the path) becomes the root of the snake tree. Note that a snake tree has exactly one degree 3 vertex. See Fig. 3(iii). Thus, in the figure, the distance between a and b is m, and the length of the path between a and a leaf such that the path contains b is n. A rooted tree T is called full if all leaves occur at the same level. A rooted tree T is called complete if every internal vertex has exactly two children. One simple observation is that a complete and full binary tree of height ℎ≥0 has 2ℎ+1−1 vertices, and among those 2ℎ are leaves.

Fig. 3
figure 3
(i) A ladder tree. (ii) A bell tree. (iii) A snake tree. Dashed segments denote paths

Full size image
Now, we describe the construction. We are given the U-1-in-3SAT instance I=(B, C) with the set of variables 𝐵={𝑏1,…,𝑏𝑏} and the set of clauses 𝐶={𝐶1,…,𝐶𝑛}. Let 𝑝=⌈log𝑛⌉+2. Thus, 2𝑝≥4𝑛. We are going to construct a tree T which is initialized to the root vertex r. For each 1≤𝑖≤𝑏, root two paths of length i at the root r of T. Call the degree one vertices of these two paths 𝑏𝑖 and 𝑏𝑖⎯⎯⎯⎯⎯. Root a complete and full binary tree of height p at 𝑏𝑖 and 𝑏𝑖⎯⎯⎯⎯⎯ for each i. From each leaf of these trees root a path of length 𝑏−𝑖. Call the leaves of these paths 𝑡𝑏𝑖,1,…,𝑡𝑏𝑖,2𝑝 and 𝑡𝑏𝑖⎯⎯⎯⎯⎯,1,…,𝑡𝑏𝑖⎯⎯⎯⎯⎯,2𝑝. Note that all the leaf nodes are now at a distance 𝑏+𝑝 from r. Root two paths of length 𝑏+1 at r, and call the degree one vertices of these paths 𝑏0 and 𝑏0⎯⎯⎯⎯⎯. So far the construction is exactly the same as the one in [18]. In the following, we modify their construction to adapt it for our setting. From 𝑏0 and 𝑏0⎯⎯⎯⎯⎯ root a complete and full binary tree of height p and 𝑝+1, respectively, and call their leaves 𝑡𝑏0,1,…,𝑡𝑏0,2𝑝 and 𝑡𝑏0⎯⎯⎯⎯⎯⎯,1,…,𝑡𝑏0⎯⎯⎯⎯⎯⎯,2𝑝+1. This completes the first phase of the construction (see Fig. 4).

Fig. 4
figure 4
Figure showing the constructed tree after the first phase

Full size image
In the second phase, we add clause gadgets by rooting special tree structures at the leaves of T constructed so far. For each 1≤𝑗≤𝑛, and for each literal l of 𝐶𝑗, root the snake tree 𝒮𝑇(4𝑛+3,4𝑗−2) at 𝑡𝑙⎯⎯,𝑗. For 1≤𝜏≤3, let q be the 𝜏𝑡ℎ literal of 𝐶𝑗. Root 𝒮𝑇(4𝑛+3,4𝑗−2+𝜏) at 𝑡𝑞,𝑗. Also, root the bell tree ℬ𝑇(4𝑛+3,4𝑗+1) at r for each 1≤𝑗≤𝑛. For 1≤𝑖≤2𝑝, add two children 𝑥𝑖 and 𝑦𝑖 of 𝑡𝑏0,𝑖. In each such added child, root the ladder tree ℒ𝑇(4𝑛+1). For 1≤𝑖≤2𝑝+1, add two children 𝑥𝑖⎯⎯⎯⎯⎯ and 𝑦𝑖⎯⎯⎯⎯⎯ of 𝑡𝑏0⎯⎯⎯⎯⎯⎯,𝑖. In each such added child, root the ladder ℒ𝑇(4𝑛). At each remaining leaf of T (as mentioned before) where no tree structure has been rooted so far, root ℒ𝑇(4𝑛+3). This completes the construction.

Now, let us give an intuitive description of the clause gadgets. Note that our main goal is to defend all the leaves. Consider the clause 𝐶𝑗=(𝑏1∨𝑏2∨𝑏3). In a feasible solution, exactly one literal of 𝐶𝑗 must be true, say 𝑏1. Now suppose in the solution of U-RMFC-T we select the vertices corresponding to true literals, i.e., 𝑏1, 𝑏2⎯⎯⎯⎯⎯ and 𝑏3⎯⎯⎯⎯⎯. Note that we have added one snake tree corresponding to each complemented literal of 𝐶𝑗. Thus, all the vertices in the snake trees corresponding to 𝑏2⎯⎯⎯⎯⎯ and 𝑏3⎯⎯⎯⎯⎯ are already defended. In this case, we can defend the degree three vertex (and all of its descendants) of the snake tree corresponding to 𝑏1⎯⎯⎯⎯⎯ by choosing the degree three vertex itself. If more than one literal are true, then we need to defend vertices of at least two snake trees instead for which we would have to pick more than one vertices from a level. Now, we have also added three other snake trees one for each literal of 𝐶𝑗. As the snake tree corresponding to 𝑏1 is already defended by 𝑏1, we just need to defend the leaves of the remaining two. We can defend them by selecting the parent of the degree three vertex from the corresponding snake tree. In this way, we can also defend the last added bell tree by selecting its degree three vertex (see Fig. 5). The alignments of these degree three vertices and their parents help us pick them in different levels. Note that if none of the literals are true, then we would need to defend the leaves of the three snake trees corresponding to the literals and in that case it is not possible to defend the leaves of the bell tree corresponding to 𝐶𝑗.

Fig. 5
figure 5
Figure showing parts of the three snake trees and the bell tree corresponding to the literals of 𝐶𝑗. The circled vertices are selected in the solution

Full size image
The argument behind the correctness of the reduction is similar to the one in [18]. The forward direction is simple. First, defend the vertices corresponding to true literals, i.e., if 𝑏𝑖 (resp. 𝑏𝑖⎯⎯⎯⎯⎯) is true, defend 𝑏𝑖 (resp. 𝑏𝑖⎯⎯⎯⎯⎯) at time i for 1≤𝑖≤𝑏. At time 𝑏+1, defend 𝑏0⎯⎯⎯⎯⎯. From time 𝑏+2 to 𝑏+𝑝+1, defend the unprotected descendant of 𝑏0 which is not on the path from r to 𝑥1. At time 𝑏+𝑝+2, defend 𝑥1. From time 𝑏+𝑝+3 to 𝑏+𝑝+4𝑛+3, defend the tree greedily by picking a vertex at each level that contains the maximum number of nodes in the subtree rooted at it. The other direction is nontrivial, but similar counting arguments as in [18] should be used for the proof. It follows that the U-1-in-3SAT formula is satisfiable if and only if all the leaves of T can be defended by selecting exactly one vertex from each level.

Finally, we show that all the feasible solutions are pairwise equivalent as claimed. This actually follows from the construction. Fix the unique feasible assignment to the U-1-in-3SAT formula. Then, while finding a feasible solution for U-RMFC-T from the assignment in the above, in all the steps one need to select a unique vertex except when one needs to choose the parent of the degree three vertices of 𝒮𝑇(4𝑛+3,4𝑗+1) and ℬ𝑇(4𝑛+3,4𝑗+1) both of which lie at the same level. However, irrespective of the selection, the set of leaves remains same. Thus, even though the solutions are different, the corresponding sets of leaves are same, and hence the solutions are pairwise equivalent.