In a reconfiguration version of a decision problem  the input is an instance of  and two feasible solutions S and T. The objective is to determine whether there exists a step-by-step transformation between S and T such that all intermediate steps also constitute feasible solutions. In this work, we study the parameterized complexity of the CONNECTED DOMINATING SET RECONFIGURATION problem (CDS-R). It was shown in previous work that the DOMINATING SET RECONFIGURATION problem (DS-R) parameterized by k, the maximum allowed size of a dominating set in a reconfiguration sequence, is fixed-parameter tractable on all graphs that exclude a biclique 𝐾𝑑,𝑑 as a subgraph, for some constant 𝑑≥1. We show that the additional connectivity constraint makes the problem much harder, namely, that CDS-R is W[1]-hard parameterized by 𝑘+ℓ, the maximum allowed size of a dominating set plus the length of the reconfiguration sequence, already on 5-degenerate graphs. On the positive side, we show that CDS-R parameterized by k is fixed-parameter tractable, and in fact admits a polynomial kernel on planar graphs.

Access provided by University of Auckland Library

Introduction
In a decision problem , we are usually asked to determine the existence of a feasible solution for an instance  of . In a reconfiguration version of , we are instead given a source feasible solution S and a target feasible solution T and we are asked to determine whether it is possible to transform S into T by a sequence of step-by-step transformations such that after each intermediate step we also maintain feasible solutions. Formally, we consider a graph, called the reconfiguration graph, that has one vertex for each feasible solution and where two vertices are connected by an edge if we allow the transformation between the two corresponding solutions. We are then asked to determine whether S and T are connected in the reconfiguration graph, or even to compute a shortest path between them. Historically, the study of reconfiguration questions predates the field of computer science, as many classic one-player games can be formulated as such reachability questions [21, 23], e.g., the 15-puzzle and Rubik’s cube. More recently, reconfiguration problems have emerged from computational problems in different areas such as graph theory [2, 19, 20], constraint satisfaction [13, 28] and computational geometry [6, 22, 26], and even quantum complexity theory [12]. Reconfiguration problems have been receiving considerable attention in recent literature, we refer the reader to [18, 27, 31] for an extensive overview.

In this work, we consider the CONNECTED DOMINATING SET RECONFIGURATION problem (CDS-R) in undirected graphs. A dominating set in a graph G is a set 𝐷⊆𝑉(𝐺) such that every vertex of G lies either in D or is adjacent to a vertex in D. A dominating set D is a connected dominating set if the graph induced by D is connected. The DOMINATING SET problem and its connected variant have many applications, including the modeling of facility location problems, routing problems, and many more [1, 15, 35].

We study CDS-R under the Token Addition/Removal model (TAR model). Suppose we are given a connected dominating set D of a graph G, and imagine that a token is placed on each vertex in D. The TAR rule allows either the addition or removal of a single token at a time from D, if this results in a connected dominating set of size at most a given bound 𝑘≥1. A sequence 𝐷1,…,𝐷ℓ of connected dominating sets of a graph G is called a reconfiguration sequence between 𝐷1 and 𝐷ℓ under TAR if the change from 𝐷𝑖 to 𝐷𝑖+1 respects the TAR rule, for 1≤𝑖<ℓ. The length of the reconfiguration sequence is ℓ−1.

The (CONNECTED) DOMINATING SET RECONFIGURATION problem for TAR gets as input a graph G, two (connected) dominating sets S and T and an integer 𝑘≥1, and the task is to decide whether there exists a reconfiguration sequence between S and T under TAR using at most k tokens.

Structural properties of the reconfiguration graph for k-dominating sets were studied in [16, 34]. The DOMINATING SET RECONFIGURATION problem was shown to be PSPACE-complete in [17], even on split graphs, bipartite graphs, planar graphs and graphs of bounded bandwidth. Both the pathwidth and the treewidth of a graph are bounded by its bandwidth, hence the DOMINATING SET RECONFIGURATION problem is PSPACE-complete on graphs of bounded pathwidth and treewidth. These hardness results motivated the study of the parameterized complexity of the problem. It was shown in [29] that the DOMINATING SET RECONFIGURATION problem is 𝖶[2]-hard when parameterized by 𝑘+ℓ, where k is the bound on the number of tokens and ℓ is the length of the reconfiguration sequence. However, the problem becomes fixed-parameter tractable (when parameterized by k) on graphs that exclude a fixed complete bipartite graph 𝐾𝑑,𝑑 as a subgraph, as shown in [25]. Such so-called biclique-free classes are very general sparse graph classes, including in particular the planar graphs, which are 𝐾3,3-free.

Fig. 1
figure 1
A graph G with a minimum dominating set of size 𝑘=2 marked in dark blue and the graph H obtained in the standard reduction from DOMINATING SET to CONNECTED DOMINATING SET. G has a dominating set of size k if and only if H has a connected dominating set of size 𝑘+1. If p is equal to the pathwidth of G then the pathwidth of H is bounded by 2𝑝+1

Full size image
In this work we study the complexity of CDS-R. The standard reduction from DOMINATING SET to CONNECTED DOMINATING SET shows that CDS-R is also PSPACE-complete, even on graphs of bounded pathwidth (Fig. 1). We hence turn our attention to the parameterized complexity of the problem.Footnote1 We first show that the additional connectivity constraint makes the problem much harder, namely, that CDS-R parameterized by 𝑘+ℓ is W[1]-hard already on 5-degenerate graphs. As 5-degenerate graphs exclude the biclique 𝐾6,6 as a subgraph, DOMINATING SET RECONFIGURATION is fixed-parameter tractable on much more general graph classes than its connected variant. To prove hardness we first introduce an auxiliary problem that we believe is of independent interest. In the COLORED CONNECTED SUBGRAPH problem we are given a graph G, an integer k, and a (not necessarily proper) coloring 𝑐:𝑉(𝐺)→𝐶, for some color set C with |𝐶|≤𝑘. The question is whether G contains a vertex subset H on at most k vertices such that G[H] is connected and H contains at least one vertex of every color in C (i.e., 𝑐(𝐻)=𝐶). The reconfiguration variant COLORED CONNECTED SUBGRAPH RECONFIGURATION (CCS-R) is defined as expected. We first prove that CCS-R reduces to CDS-R by a parameter preserving reduction (where 𝑘+ℓ is the parameter) and the degeneracy of the reduced to graph is at most the degeneracy of the input graph plus one. We then prove that the known 𝖶[1]-hard problem MULTICOLORED CLIQUE (see [4] for definitions) reduces to CCS-R on 4-degenerate graphs. The last reduction has the additional property that for an input (G, c, k) of MULTICOLORED CLIQUE the resulting instance of CCS-R admits either a reconfiguration sequence of length (𝑘3), or no reconfiguration sequence at all. Hence, we derive that both CDS-R and CCS-R are 𝖶[1]-hard parameterized by 𝑘+ℓ on 5-degenerate and 4-degenerate graphs, respectively.

The existence of a reconfiguration sequence of length at most ℓ with connected dominating sets of size at most k can be expressed by a first-order formula of length depending only on k and ℓ. It follows from [14] that the problem is fixed-parameter tractable parameterized by 𝑘+ℓ on every nowhere dense graph class and the same is implied by [3] for every class of bounded cliquewidth. Nowhere dense graph classes are very general classes of uniformly sparse graphs, in particular the class of planar graphs is nowhere dense. Nowhere dense classes are themselves biclique-free, but are not necessarily degenerate. Hence, our hardness result on degenerate graphs essentially settles the question of fixed-parameter tractability for the parameter 𝑘+ℓ on sparse graph classes. It remains an interesting open problem to find dense graph classes beyond classes of bounded cliquewidth on which the problem is fixed-parameter tractable.

We then turn our attention to the smaller parameter k alone. We show that CDS-R parameterized by k is fixed-parameter tractable on the class of planar graphs. Our approach is as follows. We first compute a small domination core for G, a set of vertices that captures exactly the domination properties of G for dominating sets of sizes not larger than k. The notion of a domination core was introduced in the study of the DISTANCE-r DOMINATING SET problem on nowhere dense graph classes [5]. While the classification of interactions with the domination core would suffice to solve DOMINATING SET RECONFIGURATION on nowhere dense classes, additional difficulties arise for the connected variant. In a second step we use planarity to identify large subgraphs that have very simple interactions with the domination core and prove that they can be replaced by constant size gadgets such that the reconfiguration properties of G are preserved.

Observe that CDS-R parameterized by k is trivially fixed-parameter tractable on every class of bounded degree. The existence of a connected dominating set of size k implies that the diameter of G is bounded by 𝑘+2, which in every bounded degree class implies a bound on the size of the graph depending only on the degree and k. We conjecture that CDS-R is fixed-parameter tractable parameterized by k on every nowhere dense graph class. However, resolving this conjecture remains open for future work (see Fig. 2).

Fig. 2
figure 2
The map of tractability for CONNECTED DOMINATING SET RECONFIGURATION. The classes colored in dark green admit an FPT algorithm with parameter k, the classes colored in light green admit an FPT algorithm with parameter 𝑘+ℓ. On the classes colored in red the problem is 𝖶[1]-hard with respect to the parameter 𝑘+ℓ

Full size image
The rest of the paper is organized as follows. We give background on graph theory and fix our notation in Sect. 2. We show hardness of CDS-R on degenerate graphs in Sect. 3 and show how to handle the planar case in Sect. 4.

Preliminaries
We denote the set of natural numbers by ℕ. For 𝑛∈ℕ, we let [𝑛]={1,2,…,𝑛}. We assume that each graph G is finite, simple, and undirected. We let V(G) and E(G) denote the vertex set and edge set of G, respectively. An edge between two vertices u and v in a graph is denoted by {𝑢,𝑣} or uv. The open neighborhood of a vertex v is denoted by 𝑁𝐺(𝑣)={𝑢∣{𝑢,𝑣}∈𝐸(𝐺)} and the closed neighborhood by 𝑁𝐺[𝑣]=𝑁𝐺(𝑣)∪{𝑣}. The degree of a vertex v, denoted by 𝑑𝐺(𝑣), is |𝑁𝐺(𝑣)|. For a set of vertices 𝑆⊆𝑉(𝐺), we define 𝑁𝐺(𝑆)={𝑣∉𝑆∣{𝑢,𝑣}∈𝐸(𝐺),𝑢∈𝑆} and 𝑁𝐺[𝑆]=𝑁𝐺(𝑆)∪𝑆. The subgraph of G induced by S is denoted by G[S], where G[S] has vertex set S and edge set {{𝑢,𝑣}∈𝐸(𝐺)∣𝑢,𝑣∈𝑆}. We let 𝐺−𝑆=𝐺[𝑉(𝐺)∖𝑆]. A graph G is d-degenerate if every subgraph 𝐻⊆𝐺 has a vertex of degree at most d. For a set C, we use K[C] to denote the complete graph on vertex set C. For an integer 𝑟∈ℕ, an r-independent set in a graph G is a subset 𝑈⊆𝑉(𝐺) such that for any two distinct vertices 𝑢,𝑣∈𝑈, the distance between u and v in G is more than r. An independent set in a graph is a 1-independent set. A subset of vertices U in G is called a separator in G if 𝐺−𝑈 has more than one connected component. For 𝑠,𝑡∈𝑉(𝐺), we say U is an (s, t)-separator in G if there is no path from s to t in 𝐺−𝑈.

Hardness on Degenerate Graphs
In this section we prove that CDS-R and CCS-R are W[1]-hard when parameterized by 𝑘+ℓ even on 5-degenerate and 4-degenerate graphs, respectively. Towards that, we first give a polynomial-time reduction from the 𝖶[1]-hard MULTICOLORED CLIQUE problem to CCS-R on 4-degenerate graphs with the property that for an input (G, c, k) of MULTICOLORED CLIQUE the resulting instance of CCS-R admits either a reconfiguration sequence of length (𝑘3) or no reconfiguration sequence at all. As a result, we conclude that CCS-R is W[1]-hard when parameterized by 𝑘+ℓ on 4-degenerate graphs. Then, we give a parameter-preserving polynomial-time reduction from CCS-R to CDS-R.

Let us first formally define the CCS and CCS-R problems.

figure a
figure b
Reduction from Multicolored Clique to CCS-R
We now present the reduction from MULTICOLORED CLIQUE to CCS-R, which we believe to be of independent interest. We can assume, without loss of generality, that for an input (G, c, k) of MULTICOLORED CLIQUE, G is connected and c is a proper vertex-coloring, i.e., for any two distinct vertices 𝑢,𝑣∈𝑉(𝐺) with 𝑐(𝑢)=𝑐(𝑣) we have {𝑢,𝑣}∉𝐸(𝐺). Before we proceed let us define a graph operation.

Definition 1
Let G be a graph and let 𝑐:𝑉(𝐺)→{1,…,𝑘} be a proper vertex coloring of V(G). Let H be a graph on the vertex set {1,…,𝑘}. We define the graph 𝐺↾𝑐𝐻 as follows. We remove all edges {𝑢,𝑣}∈𝐸(𝐺) such that 𝑐(𝑢)=𝑖 and 𝑐(𝑣)=𝑗 and {𝑖,𝑗}∉𝐸(𝐻). We subdivide every remaining edge, i.e., for every remaining edge {𝑢,𝑣} we introduce a new vertex 𝑠𝑢𝑣, remove the edge {𝑢,𝑣} and introduce instead the two edges {𝑢,𝑠𝑢𝑣} and {𝑣,𝑠𝑢𝑣}. We write 𝑊(𝐺↾𝑐𝐻) for the set of all subdivision vertices 𝑠𝑢𝑣 (see Fig. 3).

That is, to construct 𝐺↾𝑐𝐻, we first make a subgraph of G by deleting the edges between different color classes if there are no edges between the “corresponding” vertices in H, and then subdivide the remaining edges. Let (G, c, k) be the input instance of MULTICOLORED CLIQUE, where G is a connected graph and c is a proper k-vertex-coloring of G. We construct an instance (𝐻,𝑐ˆ:𝑉(𝐻)↦[𝑘+1],𝑄𝑠,𝑄𝑡,2𝑘) of CCS-R (𝑄𝑠 and 𝑄𝑡 are the source and target sets that we describe later). Note that the bound on the sizes of the solutions in the reconfiguration sequence is at most 2k.

Fig. 3
figure 3
Construction of 𝐺↾𝑐𝐻

Full size image
We first construct a routing gadget. For 1≤𝑖≤𝑘, let 𝑇𝑖 be the star with vertex set {1,…,𝑘} having vertex i as the center. For any 1≤𝑖≤𝑘 and 1≤𝑟≤20𝑘, we let 𝐻(𝑖,𝑟) be a copy of the graph 𝐺↾𝑐𝑇𝑖. We let 𝑐(𝑖,𝑟) be the the partial vertex-coloring of 𝐻(𝑖,𝑟) that is naturally inherited from G. For an illustration, consider the input instance (G, c, k) of MULTICOLORED CLIQUE depicted in Fig. 3a. Then, 𝑇2 is identical to the graph H in Fig. 3b and c represents 𝐻(2,𝑟)=𝐺↾𝑐𝑇2, for any 1≤𝑟≤20𝑘. Now, for 1≤𝑖≤𝑘 we define a graph 𝐻𝑖 as follows. We use 𝑊(𝐻(𝑖,𝑟)) to denote the set of subdivision vertices in 𝐻(𝑖,𝑟). For 1≤𝑟<20𝑘 and all vertices u, v in 𝑉(𝐻(𝑖,𝑟))∖𝑊(𝐻(𝑖,𝑟)), we connect the copy of the subdivision vertex 𝑠𝑢𝑣 in 𝐻(𝑖,𝑟) (if it exists) with the copies of the vertices u and v in 𝐻(𝑖,𝑟+1) (see Fig. 4 for an illustration of a portion of 𝐻1 and Fig. 5 for an illustration of a portion of 𝐻2). We use 𝑊(𝐻𝑖) to denote the set of subdivision vertices ⋃𝑟∈[20𝑘]𝑊(𝐻(𝑖,𝑟)).

Fig. 4
figure 4
Construction of 𝐻1 from the instance (G, c, k) depicted in Fig. 3a. The red edges are some of the “crossing” edges but not all of them

Full size image
Fig. 5
figure 5
Construction of 𝐻2 from the instance (G, c, k) depicted in Fig. 3a. The red edges are some of the “crossing” edges but not all of them

Full size image
For each 1≤𝑖≤𝑘, we use 𝑐𝑖 to denote a coloring on 𝑉(𝐻𝑖) that is the union of 𝑐(𝑖,1),𝑐(𝑖,2),…,𝑐(𝑖,20𝑘) and we color all the copies of the subdivision vertices using a new color 𝑘+1. In other words, we know that for each 𝑢∈𝑉(𝐻𝑖) we have 𝑢∈𝑉(𝐻(𝑖,𝑟)), for some 𝑟∈{1,…,20𝑘}. Hence, if 𝑢∈𝑉(𝐻(𝑖,𝑟))∖𝑊(𝐻(𝑖,𝑟)) then we set 𝑐𝑖(𝑢)=𝑐(𝑖,𝑟)(𝑢). For all 𝑠𝑢𝑣∈𝑊(𝐻𝑖), we set 𝑐𝑖(𝑠𝑢𝑣)=𝑘+1.

Now, define a graph R, which is supergraph of 𝐻1∪⋯∪𝐻𝑘, as follows. For 1≤𝑖<𝑘 and all vertices u and v, we connect the copy of the subdivision vertex 𝑠𝑢𝑣 in 𝐻(𝑖,20𝑘) (if it exists) with the copies of the vertices u and v in 𝐻(𝑖+1,1) (see Fig. 6 for an illustration).

Fig. 6
figure 6
Illustration of the subgraph of R induced on 𝑉(𝐻(2,20𝑘))∪𝑉(𝐻3,1) constructed from the instance (G, c, k) depicted in Fig. 3a. The red edges are some of the “crossing edges”

Full size image
We additionally introduce two subgraphs 𝐻0 and 𝐻𝑘+1. The graph 𝐻0 is obtained by subdividing each edge of a star on vertex set {𝑣1,…,𝑣𝑘} centered at 𝑣1. Here we use 𝑤2,…,𝑤𝑘 to denote the subdivision vertices. Similarly, the graph 𝐻𝑘+1 is obtained by subdividing each edge of star on {𝑥1,…,𝑥𝑘} centered at 𝑥𝑘. Here 𝑦1,…,𝑦𝑘−1 denote the subdivision vertices. Let 𝑐0 and 𝑐𝑘+1 be the colorings on {𝑣1,…,𝑣𝑘,𝑤2,…,𝑤𝑘} and {𝑥1,…,𝑥𝑘,𝑦1,…,𝑦𝑘−1}, respectively, defined as follows. For all 1≤𝑖≤𝑘, 𝑐0(𝑣𝑖)=𝑖 and 𝑐𝑘+1(𝑥𝑖)=𝑖. For all 2≤𝑖≤𝑘, 𝑐0(𝑤𝑖)=𝑘+1 and for all 1≤𝑖≤𝑘−1, 𝑐𝑘+1(𝑦𝑖)=𝑘+1. Observe that we may interpret 𝐻0 as 𝐾[{𝑣1,…,𝑣𝑘}]↾𝑐0𝑇0 and 𝐻𝑘+1 as 𝐾[{𝑥1,…,𝑥𝑘}]↾𝑐𝑘+1𝑇𝑘, where 𝑇0 and 𝑇𝑘 are two stars on vertex set {1,…,𝑘}, with 𝐸(𝑇0)={{1,𝑖}:2≤𝑖≤𝑘} and 𝐸(𝑇𝑘)={{𝑘,𝑖}:1≤𝑖≤𝑘−1} (as previously defined).

Finally, for each 2≤𝑖≤𝑘, we connect the “subdivision vertex” 𝑤𝑖 (adjacent to 𝑣1 and 𝑣𝑖) to all vertices 𝑣∈𝑉(𝐻(1,1)) colored 1 or i, i.e., with 𝑐(1,1)(𝑣)∈{1,𝑖}. For each subdivision vertex 𝑠𝑎𝑏∈𝑊(𝐻(𝑘,20𝑘)), we connect 𝑠𝑎𝑏 to 𝑥𝑘 and 𝑥𝑖, where 𝑘=𝑐𝑘(𝑎)=𝑐(𝑘,20𝑘)(𝑎) and 𝑖=𝑐𝑘(𝑏)=𝑐(𝑘,20𝑘)(𝑏). Recall that 𝑠𝑎𝑏 is adjacent to a vertex of color k and a vertex of color i, for some 𝑖<𝑘. This completes the construction of H (see Fig. 7). We define 𝑐ˆ:𝑉(𝐻)↦[𝑘+1] to be the union of 𝑐0,…,𝑐𝑘+1. We define the starting configuration 𝑄𝑠 as the set {𝑣1,…,𝑣𝑘,𝑤2,…,𝑤𝑘} and the target configuration 𝑄𝑡 as the set {𝑥1,…,𝑥𝑘, 𝑦1,…,𝑦𝑘−1}.

Fig. 7
figure 7
Illustration of connections between 𝐻0 and R, and 𝐻𝑘+1 and R from the instance (G, c, k) depicted in Fig. 3a. The red edges are some of the “crossing edges” between 𝐻0 and 𝐻1, and 𝐻𝑘 and 𝐻𝑘+1

Full size image
Proposition 1
The sets 𝑄𝑠 and 𝑄𝑡 are solutions of size 2𝑘−1 of the CCS instance (𝐻,𝑐ˆ,2𝑘).

We now consider the instance (𝐻,𝑐ˆ,𝑄𝑠,𝑄𝑡,2𝑘) of the CCS-R problem. Let us give some high-level intuition about the construction before proceeding to formal proofs. Assuming that (G, c, k) is a yes-instance of MULTICOLORED CLIQUE, we show how to construct a reconfiguration sequence from 𝑄𝑠 to 𝑄𝑡 as follows. Our goal is to shift the connected vertices of 𝑄𝑠 through the subgraphs 𝐻1,…,𝐻𝑘 (in that order) while maintaining connectivity and eventually reaching 𝑄𝑡. To do so, we use the corresponding vertices of the clique in each 𝐻𝑖,𝑗 to maintain colorful sets and we use the vertices corresponding to subdivided edges to maintain connectivity. In the reverse direction, we shall show that in any reconfiguration sequence, each part of the constructed graph, i.e., each 𝐻𝑖, will allow us to guarantee that there exists a vertex colored i that is connected to vertices of every other color (while maintaining the choice of vertices along the way).

Before we analyze the reconfiguration properties of H, let us first verify that H is 4-degenerate.

Lemma 1
The graph H is 4-degenerate.

Proof
We iteratively remove minimum degree vertices and show that we can always remove a vertex of degree at most 4 in each step.

Every subdivision vertex 𝑤∈𝑊(𝐻𝑖) for 1≤𝑖≤𝑘 has degree at most 4; it has 4 neighbors in 𝑉(𝐻𝑖)∪𝑉(𝐻𝑖+1).

After removal of all subdivision vertices the degree of the remaining vertices of each 𝐻𝑖 is at most one. That is, a vertex in 𝐻(1,1) may have a neighbor in {𝑤2,…,𝑤𝑘}.

After the removal of 𝑉(𝐻1)∪…𝑉(𝐻𝑘), the degree of all vertices except 𝑣1 and 𝑥𝑘 is at most 2.

Finally we remove 𝑣1 and 𝑥𝑘.

This completes the proof. ◻

Lemma 2
Let 𝑇1,𝑇2 be two trees on vertex set {1,…,𝑘} and let 𝑓1,…𝑓𝑘−1 be an ordering of the edges in 𝑇2. Then, in polynomial time, we can find an ordering 𝑒1,…,𝑒𝑘−1 of the edges in 𝑇1 such that the following holds. In the sequence of graphs 𝑇′0,𝑇′1,…,𝑇′𝑘−1 on vertex set {1,…,𝑘}, where for each 0≤𝑖≤𝑘−2, 𝑇′𝑖+1=𝑇′𝑖+𝑓𝑖−𝑒𝑖 and 𝑇′0=𝑇1, we have that 𝑇′𝑖 is a tree, for all 𝑖∈[𝑘−1], and 𝑇′𝑘−1=𝑇2.

Proof
We proceed by induction on ℓ=|𝐸(𝑇1)∖𝐸(𝑇2)|. In the base case, we have ℓ=0 and 𝐸(𝑇1)=𝐸(𝑇2). In this case 𝑓1,…𝑓𝑘−1 is also the required ordering of the edges in 𝑇1 (note that the sequence of graphs consists of only 𝑇1=𝑇2 in this case).

Now consider the induction step, ℓ>1. Let j be the first index in {1,…,𝑘−1} such that 𝑓𝑗∉𝐸(𝑇1). We add 𝑓𝑗 to 𝑇1 and this creates a cycle in 𝑇1. Hence, there exists an edge 𝑒𝑗∈𝐸(𝑇1)∖𝐸(𝑇2) whose removal results in a tree. That is, 𝑇′1=𝑇1+𝑓𝑗−𝑒𝑗 is a tree. Notice that |𝐸(𝑇′1)∖𝐸(𝑇2)|=ℓ−1. By the induction hypothesis, there is a sequence 𝑔1,…,𝑔𝑘−1 of edges in 𝐸(𝑇′1) such that for the sequence of graphs 𝑇′1=𝑇″0,𝑇″1,…,𝑇″𝑘−1 on vertex set {1,…,𝑘}, we have 𝑇″𝑖+1=𝑇″𝑖+𝑓𝑖−𝑔𝑖, each 𝑇″𝑖 is a tree, and 𝑇2=𝑇″𝑘−1, 0≤𝑖<𝑘. Since j is the first index in {1,…,𝑘−1} such that 𝑓𝑗∉𝐸(𝑇1), 𝑇′1=𝑇1+𝑓𝑗−𝑒𝑗, and 𝑇″0,𝑇″1,…,𝑇″𝑘−1 are trees, we have that 𝑔𝑖=𝑓𝑖 for all 𝑖<𝑗. Notice that 𝑓𝑗∈𝐸(𝑇′1) and 𝐸(𝑇1)=(𝐸(𝑇′1)∖{𝑓𝑗})∪{𝑒𝑗}.

We claim that 𝑒1,…,𝑒𝑗−1,𝑒𝑗,𝑒𝑗+1,…,𝑒𝑘−1, where 𝑒𝑖=𝑔𝑖 for all 𝑖<𝑗, is the required sequence of edges in 𝑇1. Let 𝑇′0,𝑇′1,…,𝑇′𝑘−1 be the sequence where, for each 0≤𝑖≤𝑘−2, 𝑇′𝑖+1=𝑇′𝑖+𝑓𝑖−𝑒𝑖 and 𝑇′0=𝑇1. Since 𝑔𝑖=𝑓𝑖=𝑒𝑖 for all 𝑖<𝑗, we have that 𝑇1=𝑇′0=𝑇′1=⋯=𝑇′𝑗−1. Moreover, 𝑇′𝑗=𝑇1+{𝑓1,…,𝑓𝑗}−{𝑒1,…,𝑒𝑗}=𝑇1+{𝑓1,…,𝑓𝑗}−{𝑔1,…,𝑔𝑗}=𝑇″𝑗 because 𝐸(𝑇1)=(𝐸(𝑇′1)∖{𝑓𝑗})∪{𝑒𝑗} and 𝑒𝑖=𝑔𝑖 for all 𝑖<𝑗. Then, the sequence 𝑇′𝑗,…,𝑇′𝑘−1 is the same as the sequence 𝑇″𝑗,…,𝑇″𝑘−1. Therefore, the sequence 𝑒1,…,𝑒𝑗−1,𝑒𝑗,𝑒𝑗+1,…,𝑒𝑘−1 of edges in 𝑇1 satisfies the conditions of the lemma.

◻

Lemma 3
If there exists a k-colored clique in G then there is reconfiguration sequence of length (𝑘3) from 𝑄𝑠 to 𝑄𝑡 in (𝐻,𝑐ˆ,2𝑘).

Proof
We aim to shift the connected vertices of 𝑄𝑠 through the subgraphs 𝐻1,…,𝐻𝑘 (in that order) to maintain connectivity and eventually shift to 𝑄𝑡. For each 𝑢𝑖∈𝑉(𝐺), 1≤𝑗≤𝑘 and 1≤𝑟≤20𝑘, we use 𝑢(𝑗,𝑟)𝑖 to denote the copy of 𝑢𝑖 in 𝐻(𝑗,𝑟).

Let 𝐶={𝑢1,…,𝑢𝑘} be a k-colored clique in G such that 𝑐(𝑢𝑖)=𝑖, for all 1≤𝑖≤𝑘. To prove the lemma, we need to define a reconfiguration sequence starting from 𝑄𝑠 and ending at 𝑄𝑡 such that the cardinality of any solution in the sequence is at most 2k. First we define k “colored” trees 𝑇ˆ1,…,𝑇ˆ𝑘 each on 2𝑘−1 vertices, and then prove that there are reconfiguration sequences from 𝑄𝑠 to 𝑉(𝑇ˆ1), 𝑉(𝑇ˆ𝑖) to 𝑉(𝑇ˆ𝑖+1) for all 1≤𝑖<𝑘, and 𝑉(𝑇ˆ𝑘) to 𝑄𝑡.

We start by defining 𝑇ˆ1,…,𝑇ˆ𝑘. For each 1≤𝑖≤𝑘, 𝐶𝑖={𝑢(𝑖,1)1,…,𝑢(𝑖,1)𝑘} and 𝑆𝑖={𝑧∈𝑉(𝐻(𝑖,1)):|𝑁𝐻(𝑖,1)(𝑧)∩𝐶𝑖|=2}. That is, for each 1≤𝑗≤𝑘 and 𝑗≠𝑖, 𝑠𝑢(𝑖,1)𝑖𝑢(𝑖,1)𝑗∈𝑆𝑖 (the subdivision vertex on the edge 𝑢(𝑖,1)𝑖𝑢(𝑖,1)𝑗 is in 𝑆𝑖), and |𝑆𝑖|=𝑘−1. In other words, 𝐶𝑖 contains the copies of the vertices of the clique C in 𝐻(𝑖,1) and 𝑆𝑖 contains subdivision vertices corresponding to 𝑘−1 edges in the clique incident on the ith colored vertex of the clique, such that 𝐻[𝐶𝑖∪𝑆𝑖] is a tree. Now, define 𝑇ˆ𝑖=𝐻[𝐶𝑖∪𝑆𝑖]. It is easy to verify that 𝑐ˆ(𝐶𝑖∪𝑆𝑖)={1,…,𝑘+1} and hence 𝐶𝑖∪𝑆𝑖=𝑉(𝑇ˆ𝑖) is a solution to the CCS instance (𝐻,𝑐ˆ,2𝑘). Let 𝑇𝑠=𝐻[𝑄𝑠] and 𝑇𝑡=𝐻[𝑄𝑡]. Note that 𝑇𝑠 and 𝑇𝑡 are trees on 2𝑘−1 vertices each.

Case 1 Reconfiguration from 𝑄𝑄𝑠𝑠 to 𝑉𝑉(𝑇𝑇ˆ11) . Informally, we move to 𝑇ˆ1 by adding a token on 𝑢(1,1)𝑖 and then removing a token from 𝑣𝑖 for i in the order 2,…,𝑘,1 (for a total of 2k token additions/removals). Finally, we move the tokens from {𝑤2,…,𝑤𝑘−1} to 𝑆1 in 2(𝑘−1) steps. The length of the reconfiguration sequence is 2𝑘+2(𝑘−1)=4𝑘−2.

Formally, we define 𝑍0=𝑄𝑠 and for each 1≤𝑗≤𝑘−1, 𝑍2𝑗−1=𝑍2𝑗−2∪{𝑢(1,1)𝑗+1} and 𝑍2𝑗=𝑍2𝑗−1∖{𝑣𝑗+1}. That is, for each 1≤𝑗≤𝑘−1,

𝑍2𝑗−1=𝑍2𝑗={𝑢(1,1)2,…,𝑢(1,1)𝑗+1}∪{𝑣𝑗+1…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}, and {𝑢(1,1)2,…,𝑢(1,1)𝑗+1}∪{𝑣𝑗+2…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}.
Next, we define 𝑍2𝑘−1 and 𝑍2𝑘 as

𝑍2𝑘−1=𝑍2𝑘={𝑢(1,1)2,…,𝑢(1,1)𝑘,𝑢(1,1)1}∪{𝑣1}∪{𝑤1,…,𝑤𝑘−1}, and {𝑢(1,1)2,…,𝑢(1,1)𝑘,𝑢(1,1)1}∪{𝑤1,…,𝑤𝑘−1}.
In other words, the first five sets in the reconfiguration sequence look as follows:

𝑍0=𝑍1=𝑍2=𝑍3=𝑍4=𝑍5={𝑣2,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}{𝑢(1,1)2}∪{𝑣2,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}{𝑢(1,1)2}∪{𝑣3,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}{𝑢(1,1)2,𝑢(1,1)3}∪{𝑣3,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}{𝑢(1,1)2,𝑢(1,1)3}∪{𝑣4,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}{𝑢(1,1)2,𝑢(1,1)3,𝑢(1,1)4}∪{𝑣4,…,𝑣𝑘,𝑣1}∪{𝑤1,…,𝑤𝑘−1}.
It is easy to verify that 𝑍1,…𝑍2𝑘 are solutions to the CCS instance (𝐻,𝑐ˆ,2𝑘). Thus, we now have a reconfiguration sequence 𝑍0,𝑍1,…,𝑍2𝑘, where 𝑍0=𝑄𝑠.

Next, we explain how to get a reconfiguration sequence from 𝑍2𝑘 to 𝑉(𝑇ˆ1). Recall that 𝑍2𝑘=𝐶1∪{𝑤1,…,𝑤𝑘−1} and 𝑉(𝑇ˆ1)=𝐶1∪𝑆1. Let 𝑠𝑗=𝑠𝑢(1,1)1𝑢(1,1)𝑗, for all 2≤𝑗≤𝑘. Notice that 𝑆1={𝑠2,…,𝑠𝑘}. To obtain a reconfiguration sequence from 𝑍2𝑘 to 𝑉(𝑇ˆ1), we add 𝑠𝑗 and then remove 𝑤𝑗 for j in the order 2,…,𝑘. Since 𝑤𝑗 and 𝑠𝑗 connect the same two vertices from 𝐶1, this reconfiguration sequence will maintain connectivity. Moreover, it is easy to verify that each set in the reconfiguration sequence uses all the colors {1,…,𝑘+1}. Therefore, there exists a reconfiguration sequence of length 4𝑘−2 from 𝑄𝑠 to 𝑉(𝑇ˆ1).

Case 2 Reconfiguration from 𝑉𝑉(𝑇𝑇ˆ𝑖𝑖) to 𝑉𝑉(𝑇𝑇ˆ𝑖+1𝑖+1) . First we define 20k trees 𝑃1,…𝑃20𝑘, each on 2𝑘−1 vertices such that for all 1≤𝑟≤20𝑘, (i) 𝑉(𝑃𝑟)⊆𝑉(𝐻(𝑖,𝑟)), and (ii) 𝑇ˆ𝑖=𝑃1. Then we give a reconfiguration sequence from 𝑉(𝑃𝑟) to 𝑉(𝑃𝑟+1) for all 𝑟∈[20𝑘−1] and a reconfiguration sequence from 𝑉(𝑃20𝑘) to 𝑉(𝑇ˆ𝑖+1).

Recall that 𝐶={𝑢1,…,𝑢𝑘} is a k-colored clique in G such that 𝑐(𝑢𝑖)=𝑖 for all 1≤𝑖≤𝑘. For each 1≤𝑟≤20𝑘, let 𝐶𝑟𝑖={𝑢(𝑖,𝑟)1,…,𝑢(𝑖,𝑟)𝑘} and 𝑆𝑟𝑖={𝑧∈𝑉(𝐻(𝑖,𝑟)):𝑁𝐻(𝑖,𝑟)(𝑧)∩𝐶𝑟𝑖=2}. That is, for each 1≤𝑗≤𝑘 and 𝑗≠𝑖, 𝑠𝑢(𝑖,𝑟)𝑖𝑢(𝑖,𝑟)𝑗∈𝑆𝑟𝑖 (i.e, the subdivision vertex on the edge 𝑢(𝑖,𝑟)𝑖𝑢(𝑖,𝑟)𝑗 is in 𝑆𝑟𝑖) and |𝑆𝑟𝑖|=𝑘−1. Let 𝑃𝑟=𝐻[𝐶𝑟𝑖∪𝑆𝑟𝑖]. Notice that for all 𝑟∈[20𝑘], 𝑃𝑟 is a tree on 2𝑘−1 vertices. Moreover, for each 1≤𝑟≤20𝑘, 𝑉(𝑃𝑟) is a solution to the CCS instance (𝐻,𝑐ˆ,2𝑘).

Case 2(a) Reconfiguration from 𝑉𝑉(𝑃𝑃𝑟𝑟) to 𝑉𝑉(𝑃𝑃𝑟+1𝑟+1). By arguments similar to those given for Case 1, one can prove that there is a reconfiguration sequence of length 4𝑘−2 from 𝑉(𝑃𝑟) to 𝑉(𝑃𝑟+1), for all 1≤𝑟<20𝑘. For completeness we give the details here. Fix an integer 1≤𝑟<20𝑘. Let 𝑠𝑗=𝑠𝑢𝑖,𝑟𝑖𝑢(𝑖,𝑟)𝑗 and 𝑠′𝑗=𝑠𝑢(𝑖,𝑟+1)𝑖𝑢(𝑖,𝑟+1)𝑗 for all 𝑗∈{1,…,𝑘}∖{𝑖}. Notice that 𝑆𝑟𝑖={𝑠𝑗:𝑗∈{1,…,𝑘}∖{𝑖}} and 𝑆𝑟+1𝑖={𝑠′𝑗:𝑗∈{1,…,𝑘}∖{𝑖}}. Now we define 𝑍0=𝑉(𝑃𝑟)=𝐶𝑟𝑖∪𝑆𝑟𝑖 and for each 1≤𝑗≤𝑖−1, 𝑍2𝑗−1=𝑍2𝑗−2∪{𝑢(𝑖,𝑟+1)𝑗} and 𝑍2𝑗=𝑍2𝑗−1∖{𝑢(𝑖,𝑟)𝑗}. That is, for each 1≤𝑗≤𝑖−1,

𝑍2𝑗−1=𝑍2𝑗={𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑗}∪{𝑢(𝑖,𝑟)𝑗…,𝑢(𝑖,𝑟)𝑘}∪𝑆𝑟𝑖, and {𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑗}∪{𝑢(𝑖,𝑟)𝑗+1…,𝑢(𝑖,𝑟)𝑘}∪𝑆𝑟𝑖.
For each 𝑖≤𝑗≤𝑘−1, 𝑍2𝑗−1=𝑍2𝑗−2∪{𝑢(𝑖,𝑟+1)𝑗+1} and 𝑍2𝑗=𝑍2𝑗−1∖{𝑢(𝑖,𝑟)𝑗+1}. That is, for each 𝑖≤𝑗≤𝑘−1,

𝑍2𝑗−1={𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑖−1,𝑢(𝑖,𝑟+1)𝑖+1,…,𝑢(𝑖,𝑟+1)𝑗+1}∪{𝑢(𝑖,𝑟)𝑗+1…,𝑢(𝑖,𝑟)𝑘,𝑢(𝑖,𝑟)𝑖}∪𝑆𝑟𝑖
and

𝑍2𝑗={𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑖−1,𝑢(𝑖,𝑟+1)𝑖+1,…,𝑢(𝑖,𝑟+1)𝑗+1}∪{𝑢(𝑖,𝑟)𝑗+2…,𝑢(𝑖,𝑟)𝑘,𝑢(𝑖,𝑟)𝑖}∪𝑆𝑟𝑖.
Next, we define 𝑍2𝑘−1 and 𝑍2𝑘 as

𝑍2𝑘−1=𝑍2𝑘={𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑘}∪{𝑢(𝑖,𝑟)𝑖}∪𝑆𝑟𝑖, and {𝑢(𝑖,𝑟+1)1,…,𝑢(𝑖,𝑟+1)𝑘}∪𝑆𝑟𝑖.
Next, for each 1≤𝑗≤𝑘−1, let 𝑍2𝑘+2𝑗−1=𝑍2𝑘+2𝑗−2∪{𝑠′𝑗} and 𝑍2𝑘+2𝑗=𝑍2𝑘+2𝑗−1∖{𝑠𝑗}. It is easy to verify that 𝑍1,…𝑍4𝑘−2 are solutions to the CCS instance (𝐻,𝑐ˆ,2𝑘) and 𝑍0,…,𝑍4𝑘−2 is a reconfiguration sequence where 𝑍0=𝑉(𝑃𝑟) and 𝑍4𝑘−2=𝑉(𝑃𝑟+1).

Case 2(b) Reconfiguration from 𝑉𝑉(𝑃𝑃20𝑘20𝑘) to 𝑉𝑉(𝑇𝑇ˆ𝑖+1𝑖+1) . Next, we explain how to get a reconfiguration sequence from 𝑉(𝑃20𝑘) to 𝑉(𝑇ˆ𝑖+1) using Lemma 2. Recall that we have

𝐶20𝑘𝑖=𝑆20𝑘𝑖={𝑢(𝑖,20𝑘)1,…,𝑢(𝑖,20𝑘)𝑘} and {𝑧∈𝑉(𝐻(𝑖,20𝑘)):|𝑁𝐻(𝑖,20𝑘)(𝑧)∩𝐶20𝑘𝑖|=2}.
Let 𝐶𝑖+1={𝑢(𝑖+1,11,…,𝑢(𝑖+1,1)𝑘} and 𝑆𝑖+1={𝑧∈𝑉(𝐻(𝑖+1,1)): 𝑁𝐻(𝑖+1,1)(𝑧)∩𝐶𝑖+1=2}. For ease of presentation, let 𝑠𝑗=𝑠𝑢(𝑖,20𝑘)𝑖𝑢(𝑖,20𝑘)𝑗 for all 𝑗∈{1,…,𝑘}∖{𝑖}. Also, let 𝑠′𝑗=𝑠𝑢(𝑖+1,1)𝑖𝑢(𝑖+1,1)𝑗 for all 𝑗∈{1,…,𝑘}∖{𝑖+1}. That is, 𝑆20𝑘𝑖={𝑠𝑗:𝑗∈{1,…,𝑘}∖{𝑖}} and 𝑆𝑖+1={𝑠′𝑗:𝑗∈{1,…,𝑘}∖{𝑖+1}}. Notice that 𝑉(𝑃20𝑘)=𝐶20𝑘𝑖∪𝑆20𝑘𝑖 and 𝑉(𝑇ˆ𝑖+1)=𝐶𝑖+1∪𝑆𝑖+1.

Towards proving the required reconfiguration sequence, we give a reconfiguration sequence from 𝐶20𝑘𝑖∪𝑆20𝑘𝑖 to 𝐶𝑖+1∪𝑆20𝑘𝑖 and then from 𝐶𝑖+1∪𝑆20𝑘𝑖 to 𝐶𝑖+1∪𝑆𝑖+1. The reconfiguration sequence from 𝐶20𝑘𝑖∪𝑆20𝑘𝑖 to 𝐶𝑖+1∪𝑆20𝑘𝑖 is similar to the one in Case 1. That is, we add 𝑢(𝑖+1,1)𝑗 and delete 𝑢(𝑖,20𝑘)𝑗 for j in the order 1,…,𝑖−1,𝑖+1,…,𝑘,𝑖. This gives a reconfiguration sequence from 𝐶20𝑘𝑖∪𝑆20𝑘𝑖 to 𝑍=𝐶𝑖+1∪𝑆20𝑘𝑖 of length 2k.

Next we explain how to get a reconfiguration sequence from 𝑍=𝐶𝑖+1∪𝑆20𝑘𝑖 to 𝐶𝑖+1∪𝑆𝑖+1. Notice that H[Z] and 𝑇ˆ𝑖+1=𝐻[𝐶𝑖+1∪𝑆𝑖+1] are trees. Recall that 𝑇𝑖 is the star on {1,…,𝑘} with vertex i being the center, and 𝑇𝑖+1 is is the star on {1,…,𝑘} with vertex i being the center. Also, 𝑐𝑗 is a coloring on 𝐻𝑗 which is inherited from the coloring c of G. That is, 𝑐𝑖+1(𝑢(𝑖+1,1)𝑗)=𝑗 for all 1≤𝑗≤𝑘. Then, 𝐻[𝑍]=𝐾[𝐶𝑖+1]↾𝑐𝑖+1𝑇𝑖 and 𝑇ˆ𝑖+1=𝐻[𝐶𝑖+1∪𝑆𝑖+1]=𝐾[𝐶𝑖+1]↾𝑐𝑖+1𝑇𝑖+1.

Let 𝑒𝑖+11,…,𝑒𝑖+1𝑘−1 be an arbitrary ordering of the the edges in 𝑇𝑖+1. By Lemma 2, we have a sequence 𝑒𝑖1,…,𝑒𝑖𝑘−1 of edges in 𝑇𝑖 such that for the sequence 𝑇𝑖0,𝑇𝑖1,…,𝑇𝑖𝑘−1 on vertex set {1,…,𝑘}, where for each 0≤𝑗≤𝑘−2, 𝑇𝑖𝑗+1=𝑇𝑖𝑗+𝑒𝑖+1𝑗−𝑒𝑖𝑗 and 𝑇𝑖0=𝑇𝑖, the following holds.

(i)
𝑇𝑖𝑗 is a tree for all 0≤𝑗≤𝑘−1, and

(ii)
𝑇𝑖𝑘−1=𝑇𝑖+1.

This implies that, from the sequences 𝑒𝑖1,…,𝑒𝑖𝑘−1 and 𝑒𝑖+11,…,𝑒𝑖+1𝑘−1, we get a sequence 𝑓1,…,𝑓′𝑘−1 on 𝑆20𝑘𝑖 and a sequence 𝑓′1,…,𝑓′𝑘−1 on 𝑆𝑖+1 such that the for the sequence L_0,\ldots , L_{2(k-1)}, where L_0=C_{i+1}\cup \{f_1,\ldots ,f_{k-1}\} and for all 1\le j\le k-1 L_{2j-1}=(L_{2j-2} \cup \{f'_i\}), L_{2j}=L_{2j-1}{\setminus } \{f_i\} the following holds.

(1)
H[L_{i}] is connected for all 0\le i\le k-1, and

(2)
L_{k-1}=S_{i+1}\cup C_{i+1}.

Here, conditions (1) and (2) follow from conditions (i) and (ii), respectively. Moreover, {\widehat{c}}(L_i)=[k+1] for all 0\le i\le 2(k-1) and L_0=Z. Thus, L_0,\ldots , L_{2(k-1)} is a valid reconfiguration sequence from Z to V({\widehat{T}}_{i+1}). Note that the ordering on the edges implies an ordering by which we can move the subdivision vertices from S_{i} to S_{i+1} without violating connectivity. This implies that there is a reconfiguration sequence from V(P_{20k}) to V({\widehat{T}}_{i+1}), of length 4k-2. Therefore, we have a reconfiguration sequence from V({\widehat{T}}_i) to V({\widehat{T}}_{i+1}) of length \mathcal {O}(k^2).

Case 3 Reconfiguration from {\varvec{V}}({\widehat{{\varvec{T}}}}_{\varvec{k}}) to {\varvec{V}}({{\varvec{T}}}_{\varvec{t}}) . The arguments for this case are similar to those given in Case 1, we therefore omit the details. By summing up the lengths of reconfiguration sequences, we get that if (G, c, k) is a yes-instance of MULTICOLORED CLIQUE then there is a reconfiguration sequence from Q_s to Q_t, of length \mathcal {O}(k^3). \square

Lemma 4
If there is a reconfiguration sequence from Q_s to Q_t then there is a k-colored clique in G.

Proof
For each 1\le i\le k+1, let R_i be the set of vertices colored by the color i. That is, R_i={\widehat{c}}^{-1}(i). First, we prove some auxiliary claims. The proofs of the following two claims follow from the construction of H and the definition of {\widehat{c}}.

Claim 1
(i) R_1\cup \ldots \cup R_k is an independent set in H, and (ii) every vertex in R_{k+1} is connected to vertices of at most two distinct colors.

Claim 2
Let v,w\in V(H){\setminus } (V(H^0)\cup V(H^{k+1})) be two distinct vertices such that {\widehat{c}}(v)={\widehat{c}}(w) and {\widehat{c}}(v)\in \{1,\ldots ,k\}. If v and w have a common neighbor in V(H){\setminus } V(H^0), then v and w are copies of same vertex z\in V(G).

Claim 3
Let Y\subseteq V(H) be a vertex subset such that {\widehat{c}}(Y)=\{1,\ldots ,k+1\} and H[Y] is connected. Then, \vert Y\vert \ge 2k-1.

Proof
Let B=Y{\setminus } {\widehat{c}}^{-1}(k+1)=Y\cap (R_1\cup \ldots \cup R_k). Since {\widehat{c}}(Y)=\{1,\ldots ,k+1\}, \vert B\vert \ge k and by Claim 1(i), B is an independent set in H. By Claim 1(ii), each vertex in R_{i+1} is connected to vertices of at most two distinct colors. Thus, since H[Y] is connected, the claim follows. \square

Suppose (H,{\widehat{c}},Q_s,Q_t,2k) is a yes-instance of CCS-R. Then, there is a reconfiguration sequence D_1,\ldots ,D_{\ell } for \ell \in {{\mathbb {N}}}, where D_1=Q_s and D_{\ell }=Q_t. Without loss of generality, we assume that the sequence D_1,\ldots , D_{\ell } is a minimal reconfiguration sequence. Then, by Claim 3, for each i\in [\ell ], 2k-1\le \vert D_i\vert \le 2k.

Moreover, since \vert D_1\vert =\vert D_{\ell }\vert =2k-1, we have that for each even i, D_i is obtained from D_{i-1} by a token addition, and for each odd i, D_i is obtained from D_{i-1} by a token removal. This also implies that for each even i, \vert D_i\vert =2k, for each odd i, \vert D_i\vert =2k-1, and \ell is odd.

Claim 4
Let i\in [\ell ] and \vert D_i\vert =2k-1. Then, for all 1\le j\le k, \vert D_i\cap R_j\vert =1, and \vert D_i\cap R_{k+1}\vert =k-1. Moreover, each vertex in D_i\cap R_{k+1} will be adjacent to exactly two vertices in H[D_i] and these vertices will be of different colors from \{1,\ldots ,k\}.

Proof
By Claim 1, R_1\cup \ldots \cup R_{k} is independent and every vertex of R_{k+1} is adjacent to vertices of at most two different color classes. Hence, we need at least k-1 vertices from R_{k+1} that make the connections between the vertices of D_i colored with \{1,\ldots ,k\}. The above statement along with the assumption \vert D_i\vert =2k-1 imply the claim. \square

Claim 5
Let i\in \{2,\ldots \ell -1\}. Let v\in D_i and w\in D_{i+1} such that v,w\notin V(H^0)\cup V(H^{k+1}), at most one vertex in \{v,w\} is in V(H^{(1,1)}), and {\widehat{c}}(v)={\widehat{c}}(w)\in \{1,\ldots ,k\}. Then, v and w are copies of the same vertex in G. Moreover, v,w\in V(H^j)\cup V(H^{j+1}) for some j\in [k-1].

Proof
Suppose v and w are not copies of the same vertex z\in V(G). We know that \vert D_i\vert =2k-1 or \vert D_i\vert =2k.

Case 1 \vert {\varvec{D}}_{\varvec{i}}\vert ={\varvec{2k-1}}. Since D_i is a solution, D_i induces a connected subgraph in H. By Claim 4, \vert D_i\cap R_j\vert =1 for all j\in \{1,\ldots ,k\} and \vert D_i\cap R_{k+1}\vert =k-1. Also, by Claim 1, (i) R_1\cup \ldots \cup R_k is an independent set in H, and (ii) every vertex in R_{k+1} is connected to vertices of at most two distinct colors. Statements (i) and (ii), and the fact that \vert D_i\vert =2k-1 imply that (iii) H[D_i] is a tree and each vertex in D_i\cap R_{k+1} is incident to exactly two vertices in D_i. Since \vert D_{i+1}\vert = \vert D_i\vert +1, in reconfiguration step i+1, we add a vertex to obtain D_{i+1}. We know that v\in D_i. Since, for any color q\in [k], there is exactly one vertex in D_i of color q (i.e., \vert D_i\cap R_q\vert =1), we have that D_{i+1}=D_{i} \cup \{w\}. Moreover, in step i+2, the vertex removed from D_{i+1} will be from \{v,w\} and that vertex will be v (because of the minimality assumption of the length of the reconfiguration sequence). That is, D_{i+2}=(D_{i}\cup \{w\}){\setminus } \{v\}. Notice that \vert D_i\vert =\vert D_{i+2}\vert =2k-1. Let b a vertex in D_{i+2} which is adjacent to w in H[D_{i+2}]. Since R_{k+1}\cap D_i=R_{k+1}\cap D_{i+2} and \vert D_i\vert =\vert D_{i+2}\vert =2k-1, by Claim 1, the neighbors of b in H[D_i] and H[D_{i+2}] are of the same color. This implies that b is adjacent to v in H[D_i]. Thus, we proved that \{b,w\},\{b,v\}\in E(H). If b \in V(H^0), then v,w\in V(H^{(1,1)}) which is a contradiction to the assumption. Otherwise, by Claim 2, we conclude that v and w are copies of same vertex.

Case 2 \vert {\varvec{D}}_{\varvec{i}}\vert {\varvec{=2k}}. In this case D_{i+1} is obtained by removing a vertex from D_{i}. Moreover, i\ge 3, because we have two vertices in D_i from V(H){\setminus } D_1. Since \vert D_{i+1}\vert =2k-1, because of Claim 4, D_{i+1} is obtained by removing the vertex v from D_i. That is, D_{i+1}=D_i{\setminus } \{v\} and v,w\in D_{i}. Then, again by Claim 4, there is v'\in \{v,w\} such that D_{i-1}\uplus \{v'\}=D_{i}. Let w'=\{v,w\}{\setminus } \{v'\}. Since i\ge 3, we now apply Case 1 with respect to w'\in D_{i-1} and v'\in D_i to complete the proof. \square

Claim 6
For any index j\in \{1,\ldots ,k\} and color q\in \{1,\ldots ,k\}, there exist an odd i\in \{3,\ldots ,\ell \} and r\in \{5k,\ldots ,15k\} such that D_i contains a vertex of color q from V(H^{j,r}).

Proof
Without loss of generality, assume that k\ge 2. Moreover, for any odd i\in [\ell -2], there is a vertex common in D_i and D_{i+2} (since k\ge 2). This implies that H[D_1\cup D_3\ldots D_{\ell }] is a connected subgraph of H. Notice that for any j\in \{1,\ldots , k\} and r\in [20k], V(H^{(j,r)}) is a (v_1,x_1)-separator in H. Therefore, since H[D_1\cup D_3\ldots D_{\ell }] is connected and v_1,x_1\in D_1\cup D_{\ell }, (i) for any j\in [k] and r\in [20k], there is an odd i\in [\ell ] such that D_i contains a vertex from V(H^{(j,r)}). Now fix an index j\in \{1,\ldots ,k\} and a color q\in \{1,\ldots ,k\}. By statement (i), there is an odd i\in \{1,\ldots ,\ell \} such that D_i contains a vertex from V(H^{(j,10k)}). Since H[D_i] is connected, \vert D_i\vert =2k-1, D_i\cap V(H^{(j,10k)})\ne \emptyset , and any vertex in V(H){\setminus } \bigcup _{r=5k}^{15k}V(H^{(j,r)}) is at distance more that 5k (by the construction of H), we have that all the vertices in D_i belong to \bigcup _{r=5k}^{15k}V(H^{(j,r)}). Moreover, by Claim 4, D_i contains a vertex colored q and that will also be present in \bigcup _{r=5k}^{15k}V(H^{(j,r)}). This completes the proof of the claim. \square

Claim 7
For any color q\in \{1,\ldots ,k\}, the vertices of color q from \bigcup _{i=2}^k V(H^i) used in the reconfiguration sequence D_1,\ldots ,D_{\ell } are copies of the same vertex z\in V(G). Moreover, exactly one vertex from V(H^j) of color q is used in the reconfiguration for all 2\le j\le k.

Proof
Fix a color q\in \{1,\ldots ,k\}. By Claim 6, there are vertices of color q from V(H^j) for all j is used in the reconfiguration sequence. By Claim 5, all these vertices are copies of the same vertex z\in V(G). \square

Now we define a k-size vertex subset C\subseteq V(G) and prove that C is a clique in G. We let C=\{a_i\in V(G) :1\le i\le k, c(a_i)=i, and the copy of a_i in V(H^2) is used in D_1,\ldots ,D_{\ell }\}. Because of Claim 7, we have that \vert C\vert =k and C contains a vertex of each color in c. C=\{a_1,\ldots ,a_k\}\subseteq V(G) and for each q\in [k], c(a_q)=q. We now prove that C is indeed a clique in G. Towards that, we need to prove that for each 1\le q<j \le k, \{a_q,a_j\}\in E(G).

Claim 8
Let 1\le q<j\le k. Then, \{a_q, a_j\}\in E(G).

Proof
By Claim 6, we know that there exist an odd i\in [\ell ] and r\in \{5k,\ldots ,15k\} such that D_i contains a vertex of color q in V(H^{(j,r)}). Thus, by Claim 7, a copy of a_j and a copy of a_q are present in D_i. Let u_j and u_q be the vertices in D_i colored with j and q, respectively. By Claim 7, u_j is a copy of a_j and u_q is a copy of a_q. Any vertex b in V(H^j) colored k+1 is adjacent to vertices of exactly two colors, out of which one color is j. Moreover, by the construction of H, (a) if b is adjacent to x and y in V(H^j), and x and y are copies of x' and y' in G, respectively, then \{x',y'\}\in E(G). We know that H[D_i] is connected, \vert R_s\cap D_i\vert =1 for all 1\le s\le k, D_i{\setminus } R_{k+1} is an independent set in H, and each vertex in D_i colored with k+1 is adjacent to exactly two vertices in D_i{\setminus } R_{k+1} with one of them being u_j (see Claims 1 and 4). This implies that there is common neighbor b for u_q and u_j and hence \{a_q,a_j\}\in E(G), by statement (a) above. This completes the proof of the claim. \square

This completes the proof of the lemma. \square

Theorem 1
CCS-R parameterized by k+\ell is {\mathsf {W}}[1]-hard on 4-degenerate graphs.

Reduction from CCS-R to CDS-R
We give a polynomial-time parameter-preserving reduction from CCS-R to CDS-R that is fairly straightforward. Let (G,c,Q_s,Q_t,k) be an instance of CCS-R. Let c :V(G)\mapsto \{1,\ldots ,k'\}, where k'\le k. We construct a graph H as follows. For each 1\le i\le k', we add a vertex d_i and connect d_i to all the vertices in c^{-1}(i). Next, for each 1\le i\le k', we add a pendant vertex x_i (i.e., \{d_i,x_i\} is an edge). Let D=\{d_1,\ldots ,d_{k'}\}. We output (H,Q_s\cup D, Q_t\cup D,k+k') as the new CDS-R instance.

Lemma 5
If G is a d-degenerate graph then H is a (d+1)-degenerate graph.

Proof
For each vertex v\in V(G), d_H(v)=d_{G}(v)+1. Thus, after removing V(G) and \{x_{i}:1\le i\le k'\}, the remaining graph is edgeless. \square

It is easy to verify that for any reconfiguration sequence Q_s=R_1,\ldots , R_{\ell }=Q_t of the instance (G,c,Q_s,Q_t,k) of CCS-R, Q_s\cup D=R_1\cup D,\ldots , R_{\ell }\cup D=Q_t\cup D is a reconfiguration sequence of the instance (H,Q_s\cup D, Q_t\cup D,k+k') of CDS-R. Now we prove the reverse direction.

Lemma 6
If (H,Q_s\cup D, Q_t\cup D,k+k') is a yes-instance then (G,c,Q_s,Q_t,k) is a yes-instance.

Proof
Notice that the set D is contained in any connected dominating set of H. Moreover for any minimal connected dominating set Z in H, Z\cap \{x_{i}:1\le i\le k'\}=\emptyset , H[Z{\setminus } D] is connected, and Z{\setminus } D contains a vertex from c^{-1}(i) for all 1\le i\le k' (recall that G is a subgraph of H). Therefore, by deleting D from each set in a reconfiguration sequence of (H,Q_s\cup D, Q_t\cup D,k+k'), we get a valid reconfiguration sequence of (G,c,Q_s,Q_t,k). This completes the proof. \square

Thus, by Theorem 1, we have the following theorem.

Theorem 2
CDS-R parameterized by k+\ell is {\mathsf {W}}[1]-hard on 5-degenerate graphs.

Fixed-Parameter Tractability on Planar Graphs
This section is devoted to proving that CDS-R under TAR parameterized by k is fixed-parameter tractable on planar graphs. In fact, we show that the problem admits a polynomial kernel. Recall that a kernel for a parameterized problem \mathcal {Q} is a polynomial-time algorithm that computes for each instance (I, k) of \mathcal {Q} an equivalent instance (I',k') with |I'|+k'\le f(k) for some computable function f. The kernel is polynomial if the function f is polynomial. We prove that for every instance (G, S, T, k) of CDS-R, with G planar, we can compute in polynomial time an instance (G',S,T,k) where |V(G')|\le h(k) for some polynomial h, G' planar, and where there exists a reconfiguration sequence under TAR from S to T in G (using at most k tokens) if and only if such a sequence exists in G'.

Our approach is as follows. We first compute a small domination core for G, that is, a set of vertices that captures exactly the domination properties of G for dominating sets of sizes not larger than k. While the classification of interactions with the domination core would suffice to solve DOMINATING SET RECONFIGURATION, additional difficulties arise for the connected variant. In a second step we use planarity to identify large subgraphs that have very simple interactions with the domination core and prove that they can be replaced by constant size gadgets such that the reconfiguration properties of G are preserved.

Domination Cores
Definition 2
Let G be a graph and let k\ge 1 be an integer. A k-domination core is a subset C\subseteq V(G) of vertices such that every set X\subseteq V(G) of size at most k that dominates C also dominates G.

It is not difficult to see that DOMINATING SET is fixed-parameter tractable on all graphs that admit a k-domination core of size at most f(k) that is computable in time g(k)\cdot n^c, for any computable functions f, g and constant c. This approach was first used (implicitly) in [5] to solve DISTANCE-r DOMINATING SET on nowhere dense graph classes. In case k is the size of a minimum (distance-r) dominating set, one can establish the existence of a linear size k-domination core on classes of bounded expansion [7] (including the class of planar graphs) and a polynomial size (in fact an almost linear size) k-domination core on nowhere dense graph classes [9, 24]. If k is not minimum, there exist classes of bounded expansion such that a k-domination core must have at least quadratic size [8]. The most general graph classes that admit k-domination cores are given in [10]. Moreover, DOMINATING SET RECONFIGURATION and DISTANCE-r DOMINATING SET RECONFIGURATION are fixed-parameter tractable on all graphs that admit small (distance-r) k-domination cores [25, 33].

Lemma 7
There exists a polynomial h such that for all k\ge 1, every planar graph G admits a polynomial-time computable k-domination core of size at most h(k).

The lemma is implied by Theorem 1.6 of [24] by the fact that planar graphs are nowhere dense. We want to stress again that the polynomial size of the k-domination core results from the fact that k may not be the size of a minimum dominating set, if k is minimum we can find a linear size core. Explicit bounds on the degree of the polynomial can be derived from [30, 32], but we refrain from doing so to not disturb the flow of ideas.

The following lemma is immediate from the definition of a k-domination core.

Lemma 8
If C is a k-domination core and D is a dominating set of size at most k that contains a vertex set W \subset D such that N[D]\cap C= N[D {\setminus } W]\cap C=C, then D {\setminus } W is also a dominating set.

Definition 3
Let G be a graph and let A\subseteq V(G). The projection of a vertex v\in V(G){\setminus } A into A is the set N(v)\cap A. If two vertices u, v have the same projection into A we write u\sim _A v.

Obviously, the relation \sim _A is an equivalence relation. The following lemma is folklore, one possible reference is [11].

Lemma 9
Let G be a planar graph and let A\subseteq V(G). Then there exists a constant c such that there are at most c\cdot |A| different projections to A, that is, the equivalence relation \sim _A has at most c\cdot |A| equivalence classes.

Reduction Rules
Let G be an embedded planar graph. We say that a vertex v touches a face f if v is drawn inside f or belongs to the boundary of f or is adjacent to a vertex on the boundary of f. We fix two connected dominating sets S and T of size at most k. We will present a sequence of lemmas, each of which implies a polynomial-time computable reduction rule that allows us to transform G to a planar graph G' that inherits its embedding from G, with S,T\subseteq V(G') and that has the same reconfiguration properties with respect to S and T as G. To not overload notation, after stating a lemma with a reduction rule, we assume that the reduction rule is applied until this is no longer possible and call the resulting graph again G. We also assume that whenever one or more of our reduction rules are applicable, then they are applied in the order presented. We will guarantee that S and T will always be connected dominating sets of size at most k, hence, after each application of a reduction rule, we can recompute a k-domination core in polynomial time. This yields only polynomial overhead and allows us to assume that we always have marked a k-domination core C of size at most h(k) as described in Lemma 7. This allows us to state the lemmas as if G and C are fixed. Without loss of generality we assume that C contains S and T.

Definition 4
A set W of vertices or edges is irrelevant if there is a reconfiguration sequence from S to T in G if and only if there is a reconfiguration sequence from S to T in G - W.

Definition 5
Let u,v\in V(G) be distinct vertices. We call the set D(u,v):=(N(u)\cap N(v))\cup \{u,v\} the diamond induced by u and v. We call |N(u)\cap N(v)| the thickness of D(u, v).

Lemma 10
If G contains a diamond D(u, v) of thickness greater than 3k, then at least one of u or v must be occupied by a token in every step of every reconfiguration sequence from S to T.

Proof
Assume S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T and u,v\not \in S_i for some 1\le i\le t.

Fig. 8
figure 8
A vertex s\in S_i can dominate at most 3 vertices of N(u)\cap N(v)

Full size image
Then every s\in S_i can dominate at most 3 vertices of N(u)\cap N(v): otherwise u, v, s together with 3 vertices of N(u)\cap N(v) different from u, v and s would form a complete bipartite graph K_{3,3} (Fig. 8). \square

Lemma 11
If G contains a diamond D(u, v) of thickness greater than 3k, then we can remove all internal edges in D(u, v), i.e., edges with both endpoints in N(u) \cap N(v).

Proof
Assume S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T. According to Lemma 10, for each 1\le i\le t, S_i\cap \{u,v\}\ne \emptyset . Hence all vertices of N(u) \cap N(v) are always dominated by at least one of u or v, say by u. Moreover, having tokens on more than one vertex of N(u) \cap N(v) will never create connectivity via internal edges that is not already there via edges incident on u. In other words, for any connected dominating set S of G, if an edge yz is used for connectivity, where y,z \in N(u) \cap N(v), then the edge can be replaced by the path yuz or the path yvz (depending on which of u or v is in S). \square

As described earlier, we now apply the reduction rule of Lemma 11 until this is no longer possible, and name the resulting graph again G. As we did not make use of the properties of a k-domination core in the lemma, it is sufficient to recompute a k-domination core C after applying the reduction rule exhaustively. In the following it may be necessary to recompute it after each application of a reduction rule. We will not mention these steps explicitly in the following.

Lemma 12
If G contains a diamond D(u, v) of thickness greater than 4|C| + 3k + 1 then G contains an irrelevant vertex.

Proof
Let H be the subgraph of G induced by D(u, v). We enumerate the vertices of N(u)\cap N(v) consecutively as x_1,\ldots , x_t for some t> 4|C| + 3k + 1. We let X = \{x_1,\ldots , x_t\}. Note that since we have t vertex-disjoint paths between u and v in H, these paths define the boundaries of t faces in the plane embedding of H (after applying the reduction rule of Lemma 11, H has all the edges \{u,x\} and \{v,x\} for x\in N(u)\cap N(v) and no other edges). Each vertex in C{\setminus }\{u,v\} can be adjacent in H to at most two vertices in X, hence each vertex in C{\setminus }\{u,v\} can touch at most 3 consecutive faces of H (Fig. 9).

Fig. 9
figure 9
Every vertex of C{\setminus }\{u,v\} can touch at most 3 consecutive faces of H. In the figure we assume the vertices c_1 and c_2 are in C{\setminus }\{u,v\}. The faces that are touched by c_1 or c_2 are colored in blue. The uncolored faces f and g are not touched by vertices of C{\setminus }\{u,v\}

Full size image
This leaves |C| + 3k + 1 faces of H that are not touched by a vertex of C{\setminus }\{u,v\}. By the pigeonhole principle we can find 2 adjacent faces f and g of H that are not touched by a vertex of C{\setminus } \{u,v\}.

We let x_1 and x_2 denote the two vertices on the boundary of face f different from u and v and we let x_2 and x_3 denote the two vertices on the boundary of face g different from u and v. Recall that, due to Lemma 11, we know that there are no edges between those three vertices. Let W denote the set of all vertices contained in the face of the cycle u,x_1,v,x_3,u. In particular, W contains x_2. We claim that the vertices of W can be removed from G without changing the reconfiguration properties of G, i.e., W is a set of irrelevant vertices. Let G'=G-W. First observe that, since S,T \subseteq C, W\cap (S\cup T)=\emptyset , hence S,T\subseteq V(G'). We show that reconfiguration from S to T is possible in G if and only if reconfiguration from S to T is possible in G'.

Assume S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T in G. Let S_1', \ldots ,S_t', where for 1\le i\le t, S_i':=S_i if S_i does not contain a vertex of W and S_i':=(S_i{\setminus } W)\cup \{x_1\} otherwise. Note that this modification leaves S and T unchanged, hence, S_1'=S_1 and S_t'=S_t. We claim that S_1', \ldots ,S_t' is a reconfiguration sequence from S to T in G'.

Claim 9
For 1\le i\le t, S_i' is a dominating set of G, and hence also of G'.

Proof
No vertex of W is adjacent to a vertex of C{\setminus }\{u,v\} and W \cap C = \emptyset by construction. Hence, the only vertices of C that are possibly adjacent to a vertex of W are the vertices u and v. Whenever S_i contains a vertex of W, we have x_1\in S_i', which dominates both u and v. Hence, S_i' dominates at least the vertices of C that S_i dominates. We use Lemma 8 to conclude that S_i' is a dominating set of G. \square

Claim 10
For 1\le i\le t, S_i' is connected.

Proof
Let s_1,s_2\in S_i{\setminus } W and let P be a shortest path between s_1 and s_2 in G[S_i]. We have to show that there exists a path between s_1 and s_2 in G[S_i']. If P does not use a vertex of W, then there is nothing to show. Hence, assume P uses a vertex of W. By definition of W, both s_1 and s_2 lie outside or on the boundary of the face h of the cycle u,x_1,v,x_3 that contains x_2. Hence, P must enter and leave the face h, and as P is a shortest path, it must enter and leave via opposite vertices, i.e., via u and v, or via x_1 and x_3 (as all other pairs are linked by an edge and we could find a shorter path). If P contains u and v, then we can replace the vertices of W on P by x_1 and we are done.

Hence, assume P uses x_1 and x_3. As D(u, v) is a diamond of thickness greater than 4|C| + 3k + 1>3k, according to Lemma 10 at least one of the vertices u and v, say u, is contained in S_i, and by definition also in S_i'. Then we can replace the vertices of W on P by u and we are again done. \square

Finally, the following claim is immediate from the definition of each S_i'. Combining Claims 9, 10, and 11 , we conclude that S_1',\ldots , S_t' is a reconfiguration sequence from S to T in G'.

Claim 11
S_{i+1}' is obtained from S_i' by the addition or removal of a single token for all 1\le i<t.

To prove the opposite direction, assume S=S_1',\ldots , S_t'=T is a reconfiguration sequence from S to T in G'. We claim that this is also a reconfiguration sequence from S to T in G. All we have to show is that S_i' is a dominating set of G for all 1\le i\le t. This follows immediately from the fact that S_i' is a dominating set of G', and hence, as W is not adjacent to C{\setminus }\{u,v\} and W \cap C = \emptyset , also a dominating set of C in G. Then according to Lemma 8, S_i' also dominates G. We conclude that there is a reconfiguration sequence from S to T in G if and only if there is a reconfiguration sequence from S to T in G'=G-W. \square

We may in the following assume that G does not contain diamonds of thickness greater than 4|C| + 3k + 1.

Corollary 1
If a vertex v \in V(G) has degree greater than (4|C| + 3k + 1)\cdot k, then the token on v is never lifted throughout a reconfiguration sequence.

Proof
Assume S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T in G and assume there is S_i with v\not \in S_i. The dominating set S_i has at most k vertices and must dominate N(v). Hence, there must be one vertex u\in S_i that dominates at least a 1/k fraction of N(v), which is larger than 4|C| + 3k + 1. Then there is a diamond D(u, v) of thickness greater than 4|C| + 3k + 1, which does not exist after application of the reduction rule of Lemma 12. \square

According to Corollary 1, the only vertices that can have high degree after applying the reduction rules are vertices that are never lifted throughout a reconfiguration sequence. This gives rise to another reduction rule that is similar to the rule of Lemma 11.

Lemma 13
Assume v is a vertex of degree greater than (4|C| + 3k + 1)\cdot k. Then we may remove all edges with both endpoints in N(v).

Proof
Let G' be the graph obtained from G by removing all edges with both endpoints in N(v). We claim that reconfiguration between S and T is possible in G if and only if it is possible in G'. The fact that S and T are in fact connected dominating sets in G' is implied by the argument below.

Assume S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T in G. We claim that the same sequence is a reconfiguration sequence in G'. According to Corollary 1, v\in S_i for all 1\le i\le t. This implies that S_i is connected in G' for all 1\le i\le t, as all x,y\in S_i that are no longer connected by an edge in G' but were connected in G are connected via a path of length 2 using the vertex v. It is also easy to see that S_i is a dominating set in G', as all vertices that are no longer dominated by s\in S_i in G are still dominated by v. Observe that this in particular implies that S and T are connected dominating sets in G'. Vice versa, if S=S_1,\ldots , S_t=T is a reconfiguration sequence from S to T in G', this is trivially also a reconfiguration sequence in G. \square

The following reduction rule is obvious.

Lemma 14
If a vertex v has more than k + 1 pendant neighbors, i.e., neighbors of degree exactly one, then it suffices to retain exactly k + 1 of them in the graph.

Lemma 15
There are at most c|C| \cdot (4|C|+3k+1) vertices of V(G){\setminus } C that have 2 neighbors in C, where c is the constant of Lemma 9.

Proof
According to Lemma 9 there are at most c|C| different projections to C. Each projection class that has at least 3 representatives has size at most 2, as otherwise we would find a K_{3,3} as a subgraph, contradicting the planarity of G. Consider a class with a projection of size 2 into C. Denote these two vertices of C by u and v. If this class has more than 4|C|+3k+1 representatives, then D(u, v) is a diamond of thickness greater than 4|C|+3k+1, which cannot exist after exhaustive application of the reduction rule of Lemma 12. \square

We now come to the description of our final reduction rule. Let D denote the set of vertices containing both C and all vertices of V(G) {\setminus } C having at least two neighbors in C. In other words, V(G){\setminus } D contains all those vertices in V(G) {\setminus } C that have exactly one neighbor in C. According to Lemma 15 at most c|C|\cdot (4|C|+3k+1) vertices have two neighbors in C, hence |D|\le c|C|\cdot (4|C|+3k+1)+|C|=:p.

Lemma 16
Assume there are two vertices u and v with degree greater than 4p+ (4|C| + 3k + 1)\cdot k + 1. Let \mathcal {P} be a maximum set of vertex-disjoint paths of length at least 2 that run between u and v using only vertices in V(G) {\setminus } D. If |{\mathcal {P}}| > 4p + (4|C| + 3k + 1)\cdot k + 1, then there is G' such that the instances (G, S, T, k) and (G',S,T,k) are equivalent, G' is planar, and |V(G')|< |V(G)|.

Proof
We first show that we can essentially establish the situation depicted in Fig. 10. We may assume that the paths of {\mathcal {P}} are induced paths, otherwise we may replace them by induced paths. Let H be the graph induced on u, v and the vertices of {\mathcal {P}}. In the figure, the paths of \mathcal {P} are depicted by thick edges, while the diagonal edges do not belong to the paths. This situation is similar to the situation in the proof of Lemma 12. Just as in the proof of Lemma 12, we find two adjacent faces f, g of H that do not touch a vertex of D{\setminus } \{u,v\}.

Fig. 10
figure 10
An exemplary situation handled by Lemma 16

Full size image
Claim 12
The paths bounding f and g have length 3, i.e., they have exactly two inner vertices.

Proof
First observe that P\in \mathcal {P} cannot have length exactly 2, as then P contains a vertex adjacent to both u and v. However, the vertices with this property lie in D, and hence by construction not on P.

Assume there is P\in \mathcal {P} of length greater than 3. Let M(u) denote the neighbors of u that are in V(G) {\setminus } D and are only adjacent to u and to no other vertex of C. Similarly, let M(v) denote the neighbors of v that are in V(G) {\setminus } D and are only adjacent to v and to no other vertex of C. By construction, the faces f and g do not contain vertices of D {\setminus } \{u,v\}. Furthermore, P contains exactly one vertex of M(u) and exactly one vertex of M(v). It cannot contain two vertices of one of these sets, as otherwise P is not an induced path. Hence, assume that P contains another vertex x that is not in M(u)\cup M(v). Then x must be dominated by a vertex different from u and from v. However, by construction, the faces f and g do not touch a vertex of D {\setminus } \{u,v\} \supseteq (S \cup T) {\setminus } \{u,v\}, a contradiction. \square

Denote by x_f,y_f the two vertices that lie on the boundary of f and not on the boundary of g and by x_g,y_g the two vertices that lie on the boundary of g and not on the boundary of f. Assume that x_f,x_g\in M(u) and y_f,y_g\in M(v). Denote by z_u,z_v the vertices shared by f and g different from u and v that are adjacent to u and v, respectively. Denote by W the set of all vertices that lie inside the face h of the cycle u,x_f,y_f,v,y_g,x_g,u that contains the vertices z_u and z_v. Hence W contains at least the vertices z_u and z_v. By Corollary 1, we know that u,v\in S_i, for all 1\le i\le t (both u and v can never be lifted). Consequently, by Lemma 13, we know that there are no edges with both endpoints in N(v) nor edges with both endpoints in N(u). Combining the previous fact with the fact that all vertices of W are adjacent to either u or v (but not both) and to no other vertex of C \supseteq S \cup T, we conclude that W consists of exactly the two vertices z_u and z_v and that there are no edges between z_u and x_g,x_f and no edges between z_v and y_g,y_f. Note that we can safely assume that none of the degree-one neighbors of u or v are inside W. We claim that the vertices z_u and z_v are irrelevant and can be removed after possibly introducing an additional edge to the graph. Recall that S and T do not contain the vertices z_u and z_v. We define G' as follows.

If \{u,v\} \not \in E(G) and (\{x_f,z_v\}\in E(G) or \{y_f,z_u\}\in E(G)) and (\{x_g,z_v\}\in E(G) or \{y_g,z_u\}\in E(G)) then G' is obtained from G by deleting z_u and z_v and introducing the edge \{x_f, y_g\}.

Otherwise, G' is obtained from G by simply deleting z_u and z_v.

We claim that (G, S, T, k) and (G',S,T,k) are equivalent instances of CDS-R. Assume first that there exists a reconfiguration sequence S=S_1,\ldots , S_t=T in G. We distinguish two cases. First assume that \{u,v\}\in E(G). Hence, G' is obtained from G by simply deleting z_u and z_v. Let S_1', \ldots ,S_t', where for 1\le i\le t, S_i'=S_i{\setminus } \{z_u,z_v\}. We claim that S_1', \ldots ,S_t' is a reconfiguration sequence from S to T in G'.

Claim 13
For 1\le i\le t, S_i' is a dominating set of G, and hence also of G'.

Proof
The vertices z_u and z_v are not adjacent to a vertex of C{\setminus }\{u,v\} and \{z_u, z_v\} \cap C = \emptyset . Hence, the only vertices of C that are possibly adjacent to z_u or z_v are the vertices u and v. According to Lemma 1, u,v\in S_i, and moreover u,v\in S_i', for all 1\le i\le t. Hence, S_i' dominates at least the vertices of C that S_i dominates. We use Lemma 8 to conclude that S_i' is a dominating set of G. \square

Claim 14
For 1\le i\le t, S_i' is connected.

Proof
Let s_1,s_2\in S_i{\setminus } \{z_u,z_v\} and let P be a shortest path between s_1 and s_2 in G[S_i]. We have to show that there exists a path between s_1 and s_2 in G[S_i']. If P does not use z_u nor z_v then there is nothing to prove. Hence, assume P uses z_u or z_v (or both). By definition of W, both s_1 and s_2 lie outside the face h of the cycle u,x_f,y_f,v,y_g,x_g,u that contains z_u,z_v. Hence, P must enter and leave the face h, say it enters at u and leaves at y_f. All other possibilities are handled analogously. Then we can avoid the vertices z_u and z_v by walking to v first, then u (or x_f), and then to y_f. \square

The next claim follows from the definition of S_i' and the fact that we can remove any duplicate consecutive sets in a reconfiguration sequence.

Claim 15
S_{i+1}' is obtained from S_i' by the addition or removal of a single token for all 1\le i<t.

This finishes the proof in case \{u,v\}\in E(G). Hence, we assume now that \{u,v\}\not \in E(G) and (\{x_f,z_v\}\in E(G) or \{y_f,z_u\}\in E(G)) and (\{x_g,z_v\}\in E(G) or \{y_g,z_u\}\in E(G)). That is, G' is obtained from G by deleting z_u and z_v and introducing the edge \{x_f, y_g\}. We now obtain S_i' from S_i, for 1\le i\le t, by replacing

z_u by x_f and z_v by y_g if S_i\cap \{z_u,z_v\}=\{z_u,z_v\},

z_u by x_f if S_i\cap \{z_u,z_v\}=\{z_u\}, and

z_v by y_g if S_i\cap \{z_u,z_v\}=\{z_v\}.

We claim that S_1', \ldots , S_t' is a reconfiguration sequence from S to T in G'. We need no new arguments to prove that each S_i' is a dominating set of G and hence of G' and that each S_{i+1}' is obtained from S_i' by adding or removing one token. It remains to show that each S_i' is connected in G'.

Claim 16
For 1\le i\le t, S_i' is connected in G'.

Proof
According to Lemma 1, u,v\in S_i, and also u,v\in S_i', for all 1\le i\le t. If S_i{\setminus } \{z_u,z_v\} is connected, S_i' is also connected, hence assume S_i{\setminus } \{z_u,z_v\} is not connected. As X=\{u, x_f, z_u, x_g\} is connected via u and Y=\{v, y_f, z_v,y_g\} is connected via v, it suffices to show that our vertex exchange creates a connection in G' between any vertex of X and any vertex of Y. If S_i\cap \{z_u,z_v\}=\{z_u,z_v\} this is clear, as we shift the tokens to x_f and y_g and in G' we have introduced the edge \{x_f,y_g\}. If S_i\cap \{z_u,z_v\}=\{z_u\}, then \{z_u,y_g\}\in E(G) and y_g\in S_i, or \{z_u,y_f\}\in E(G) and y_f\in S_i. We move the token z_u to x_f. In the first case we have connectivity via the new edge \{x_f,y_g\}\in E(G'), and in the second case we have connectivity via the edge \{x_f,y_f\}\in E(G). The case S_i\cap \{z_u,z_v\}=\{z_v\} is symmetric. \square

This finishes the proof that if (G, S, T, k) is a positive instance then (G',S,T,k) is a positive instance. Now assume that there exists a reconfiguration sequence S=S_1',\ldots , S_t'=T in G'. In case we do not introduce the new edge to obtain G' from G, we do not need new arguments to see that S_1',\ldots , S_t' is a reconfiguration sequence also in G. Moreover, if G''[S_i'] is connected for all i, where G'' is obtained from G' by removing the edge \{x_f, y_g\}, then again there is nothing to prove as G' is a subgraph of G and therefore S=S_1',\ldots , S_t'=T is a reconfiguration sequence in G. Hence, assume that there exists at least one contiguous subsequence \sigma starting at index s and ending at index f (with possibly s = f) such that G''[S_s'], G''[S_{s+1}'], \ldots , G''[S_f'] are not connected. In other words, there exists a subsequence of length one or more that uses the edge \{x_f, y_g\} for connectivity. Moreover, we assume, without loss of generality (the other case is symmetric), that S_s' is obtained from S_{s-1}' by adding a token on vertex y_g, i.e., S_s' = S_{s-1}' \cup \{y_g\}, and S_{f+1}' is obtained from S_f' by removing the token on vertex x_f, i.e., S_{f+1}' = S_{f}' {\setminus } \{x_f\}. We also assume that E(G) contains the edges \{x_f,z_v\} and \{z_u,y_g\} (the remaining cases are handled identically). It remains to show how to modify \sigma so that it does not use the edge \{x_f, y_g\} for connectivity and remains a valid reconfiguration sequence in G. By applying the same arguments for any such subsequence we obtain the required reconfiguration sequence in G. We modify \sigma as follows. We let S_i'' = (S_i' {\setminus } \{y_g\}) \cup \{z_v\}, for s \le i \le f. Then we replace S_{f+1}' by four new sets A_1, A_2, A_3, and A_4, where A_1 = S_{f}' {\setminus } \{x_f\}, A_2 = A_1 \cup \{z_u\}, A_3 = A_2 {\setminus } \{z_v\}, A_3 = A_3 \cup \{y_g\}, and A_4 = A_3 {\setminus } \{z_u\}. Using the fact that the vertices x_f,y_f,x_g,y_g are not adjacent to vertices of D {\setminus } \{u,v\}, it is easy to see that this yields a valid reconfiguration sequence, as both domination and connectivity are preserved. This completes the proof of the lemma. \square

We are ready to state the final result.

Theorem 3
CDS-R under TAR parameterized by k admits a polynomial kernel on planar graphs.

Proof
Our kernelization algorithm starts by computing (in polynomial time) a k-domination core C of size at most h(k) as described in Lemma 7. Without loss of generality we assume that C contains S and T. After each application of a reduction rule, we recompute the core, giving a polynomial blow-up of the running time. We are left to prove that each reduction rule can be implemented in polynomial time and that we end up with a polynomial number of vertices. It is clear that the reduction rules of Lemmas 12, 13 and 14 can easily be implemented in polynomial time. The reduction rule of Lemma 16 is slightly more involved, however, we can use a standard maximum-flow algorithm to compute in polynomial time a maximum set of vertex-disjoint paths in a subgraph of G. It remains to bound the size of G. Recall that we call D the set of all vertices C and of all vertices of V(G){\setminus } C that have at least 2 neighbors in C. It follows from Lemma 15 that D has size at most c|C| \cdot (4|C|+3k+1)+ |C| =:p, where c is the constant of Lemma 9. We are left to bound the number of vertices in V(G){\setminus } C having exactly one neighbor in C (recall that each vertex in V(G) {\setminus } C has at least one neighbor in S \cup T \subseteq C).

Let p' = (4p+(4|C|+3k+1)\cdot k+1)\cdot (4|C|+3k+1)\cdot k+k+1, which is still a polynomial in k. Towards a contradiction, assume that there exists an equivalence class Q in \sim _C with a projection of size one containing more than p' vertices. Let u\in C denote the projection of the aforementioned class. Due to Lemma 14, we know that at most k + 1 of the vertices in Q are pendant, i.e., adjacent to only u in G. Since we cannot apply the reduction rule of Lemma 13 any more, we know that there are no edges with both endpoints in Q. Hence, all but k + 1 vertices of Q must be adjacent to at least one other vertex in V(G) {\setminus } C. Let R = N_G(Q) {\setminus } \{u\} denote this set of neighbors. No vertex in R can be adjacent to more than 4|C|+3k+1 vertices of Q, as we cannot apply the reduction rule of Lemma 12. The vertices of R must be dominated by S, and cannot be dominated by u, as otherwise two neighbors of u would be connected. Hence, there is v\in S different from u that dominates at least a 1/k fraction of R. This implies the existence of at least 4p + (4|C| + 3k + 1)\cdot k + 1 vertex-disjoint paths of length at least 2 that run between u and v. But in this case, the reduction rule of Lemma 16 is applicable. Therefore, we conclude that Q cannot exist, obtaining a bound on the size of all equivalence classes of \sim _C, as needed. \square

Conclusion
We have shown that the CDS-R problem parameterized by k is fixed-parameter tractable for planar graphs and (trivially) for graphs of bounded degree. Moreover, a simple observation shows that the problem is fixed-parameter tractable parameterized by k+\ell on every nowhere dense graph class and the same holds for every class of bounded cliquewidth. On the negative side, our reduction shows that CDS-R parameterized by k+\ell is {\mathsf {W}}[1]-hard on 5-degenerate graphs. It remains open to determine where exactly the boundary between tractable and intractable lies for CDS-R parameterized by k. We conjecture that CDS-R is fixed-parameter tractable parameterized by k on every nowhere dense graph class. However, resolving this conjecture remains open for future work (see Fig. 2). Towards proving that conjecture, we believe that the classes of graphs of bounded pathwidth or treewidth are the obvious next classes to study.