Given a fixed graph H, the H-free editing problem asks whether we can edit at most k edges to make a graph contain no induced copy of H. We obtain a polynomial kernel for this problem when H is a diamond. The incompressibility dichotomy for H being a 3-connected graph and the classical complexity dichotomy suggest that except for H being a complete/empty graph, H-free editing problems admit polynomial kernels only for a few small graphs H. Therefore, we believe that our result is an essential step toward a complete dichotomy on the compressibility of H-free editing. Additionally, we give a cubic-vertex kernel for the diamond-free edge deletion problem, which is far simpler than the previous kernel of the same size for the problem.

Access provided by University of Auckland Library

Introduction
A graph modification problem asks whether one can apply at most k modifications to a graph to make it satisfy certain properties. By modifications we usually mean additions and/or deletions, and they can be applied to vertices or edges. Although other modifications are also considered, most results in literature are on vertex deletion and the following three edge modifications: edge deletion, edge completion, and edge editing (deletion/completion).

As usual, we use n to denote the number of vertices of the input graph. For each graph modification problem, one may ask three questions: (1) Is it NP-complete? (2) Can it be solved in time 𝑓(𝑘)⋅𝑛𝑂(1) for some function f, and if yes, what is the (asymptotically) best f? (3) Does it have a polynomial kernel? The first question concerns classic complexity, while the other two are about parameterized complexity [7, 11]. With parameter k, a problem is fixed-parameter tractable (FPT) if it can be solved in time 𝑓(𝑘)⋅𝑛𝑂(1) for some function f. On the other hand, given an instance (G, k), a kernelization algorithm produces in polynomial time an equivalent instance (𝐺′,𝑘′)—(G, k) is a yes-instance if and only if (𝐺′,𝑘′) is a yes-instance—such that 𝑘′≤𝑘. It is a polynomial kernel if the size of 𝐺′ is bounded from above by a polynomial function of k.

For hereditary properties, a classic result of Lewis and Yannakakis [15] states that all the vertex deletion problems are either NP-hard or trivial. In contrast, the picture for edge modification problems is far murkier. Earlier efforts for edge deletion problems [9, 17], though having produced fruitful concrete results, shed little light on a systematic answer, and it was noted that such a generalization is difficult to obtain.

A basic and ostensibly simple case of graph modification problems is to make the graph H-free, where H is a fixed graph on at least two vertices. (We say that a graph is H-free if it does not contain H as an induced subgraph.) For this special case, all the three questions have been satisfactorily answered for vertex deletion problems, at least in the asymptotic sense. All of them are NP-complete and FPT—indeed, H-free vertex deletion problems admit simple |𝑉(𝐻)|𝑘⋅𝑛𝑂(1)-time algorithms [4]. On the other hand, the reduction of Lewis and Yannakakis [15] excludes subexponential-time algorithms (2𝑜(𝑘)⋅𝑛𝑂(1)-time algorithms) assuming the exponential time hypothesis (ETH) [13]. Further, as observed by Flum and Grohe [11], the sunflower lemma of Erdős and Rado [10] can be used to produce polynomial kernels for H-free vertex deletion problems.

Even restricted to this very simple case, edge modification problems remain elusive. Significant efforts have been devoted to an ongoing program that tries to answer these questions in a systematic way, and promising progress has been reported in literature. Recently, Aravind et al. [2] gave a complete answer to the first question: The H-free editing problem is NP-complete if and only if H contains at least three vertices. They also excluded subexponential-time algorithms for the NP-complete H-free edge modification problems, assuming ETH. Noting that H-free edge modification problems can always be solved in 2𝑂(𝑘)⋅𝑛𝑂(1) time [4], we are left with the third question, the existence of polynomial kernels.

Some of the H-free graph classes are important for their own structural reasons, e.g., most notably, cluster graphs and cographs, which are 𝑃3-free graphs and 𝑃4-free graphs respectively; hence the edge modification problems toward them have been well-studied [6, 12]. (Note that edge modification problems to 𝑃2-free graphs, i.e., independent sets, are trivial.) Given the simplicity of H-free edge modification problems, and the naive FPT algorithms for them, it may sound shocking that many of them do not admit polynomial kernels. Indeed, the earliest incompressibility results of graph modification problems, by Kratsch and Wahlström [14], are on H-free edge modification problems. Guillemot et al. [12] excluded polynomial kernels for H-free edge deletion problems when H is a path of length at least seven or a cycle of length at least four. An influential result of Cai and Cai [5] furnishes a dichotomy on the compressibility of H-free edge modification problems when H is a path, a cycle, or a 3-connected graph.

We tend to believe that H-free edge modification problems admitting polynomial kernels are the exceptions. Our exploration suggests that graphs on four vertices play the pivotal roles if we want to fully map the territory. Let 𝐻⎯⎯⎯⎯⎯⎯ be the complement graph of H. Then the H-free edge deletion problem is equivalent to the 𝐻⎯⎯⎯⎯⎯⎯-free edge completion problem, while the edge editing problems are the same for H-free and 𝐻⎯⎯⎯⎯⎯⎯-free graphs. We are thus focused on the four-vertex graphs (Fig. 1); see Table 1 for a summary of compressibility results of H-free edge modification problems when H is one of them. We conjecture that claw-free edge modification problems admit polynomial kernels.

Fig. 1
figure 1
Graphs on four vertices (their complements are omitted)

Full size image
Table 1 The compressibility results of H-free edge modification problems for H being four-vertex graphs
Full size table
We show a polynomial kernel for the diamond-free editing problem. Our observations also lead to a cubic-vertex kernel for the diamond-free edge deletion problem, which is far simpler than the previous kernel of the same size [16]. Formally, these two problems are defined as following.

Diamond-free editing problem: Given an input graph G, can we edit (add/delete) at most k edges to make it diamond-free?

Diamond-free edge deletion problem: Given an input graph G, can we delete at most k edges to make it diamond-free?

On the other hand, the completion problem to diamond-free graphs is trivial: For each diamond, there is no choice but adding the only missing edge.

Our key observations are on maximal cliques. A graph G is diamond-free if and only if every two maximal cliques of G share at most one vertex. We say that a maximal clique is of type I if it shares an edge with another maximal clique, or type II otherwise. It is not hard to see that to make a graph diamond-free, we should never delete edges from a sufficiently large clique. We thus put the maximal cliques of G into three categories, small type I, big type I, and type II. It turns out that a vertex participates in a diamond if and only if it is in a maximal clique of type I, and the small type-I maximal cliques are crucial for the problem.

The first phase of our algorithm comprises two routine reduction rules for edge editing problems. If a (non-)edge participates in 𝑘+1 or more diamonds that pairwise share only this (non-)edge, then it has to be in a solution of size at most k. (This is exactly the reason why no edge is deleted from a “large” clique.) If there exists such an edge/non-edge, we delete/add it. We may henceforth assume that these two simple rules have been exhaustively applied. We are able to show that the ends of an edge added by a minimum solution must be from some small maximal cliques of type I. The situation for deleted edges is slightly more complex. The two ends of a deleted edge are either in a small maximal clique of type I, or in a maximal clique of type II. In the second case, the maximal clique has to intersect some small maximal clique of type I.

The second phase of our algorithm uses three nontrivial reduction rules to delete irrelevant vertices. To analyze the size of the kernel, we bound the number of vertices that are (a) in small type-I maximal cliques only, (b) in big type-I maximal cliques but not in any small type-I maximal clique, and (c) only in type-II maximal cliques. First, we show an upper bound on the number of type-I maximal cliques. This immediately bounds the number of vertices in part (a), because each small type-I maximal clique has a bounded size. For part (b), the focus now is to bound the sizes of big maximal cliques of type I. We introduce another reduction rule to delete certain “private vertices” from them. On the other hand, the pattern of vertices shared by big maximal cliques is very limited. We are thus able to bound the number of vertices in part (b), and we are left with part (c). We correlate a maximal clique K of type II with small maximal cliques of type I: we would touch K only because it had become type I after some operation, and this operation has to be an edge addition. Recall that an edge can only be added between two vertices in part (a). For each pair of them, we can build a blocker of 𝑂(𝑘2) vertices from part (c). One more reduction rule is introduced to remove all vertices behind the blockers. Together with the bound of vertices in part (a), this bounds the number of vertices in part (c).

Putting everything together, we obtain the main result of this paper.

Theorem 1
The diamond-free editing problem has a kernel of 𝑂(𝑘8) vertices.

In passing we would like to mention that the reduction rules in the second phase of our algorithm only delete vertices, and none of the deleted vertices is from a small maximal clique of type I. Hence, the main structure of the graph will not change, and this allows us to run them only once, and more importantly, we do not need to re-run the reduction rules in the first phase.

Before we conclude this section, let us have some remarks on future work. The main purpose of this paper is to take a step toward a complete dichotomy on the compressibility of H-free edge modification problems. Although our kernel for the diamond-free editing problem does not seem to be tight, we do not consider obtaining a smaller kernel a pressing issue. Instead, we would ask for the existence of polynomial kernels for the H-free editing problem in general, and for claw-free editing in particular.

Another question one may ask for graph modification problems is: (4) Does it admit a constant-ratio approximation algorithm? Again, the answer is simply yes for H-free vertex deletion problems. Once an induced copy of H is found, we delete all its vertices, which achieves ratio |V(H)|. However, this simple algorithm breaks down for edge modification problems: An edge added or deleted to fix an erstwhile H may introduce new one(s). This kind of propagations are the core difficulty of these problems [3, 5]. Hence, both the approximability and the compressibility seem to hinge on whether the propagations can be tamed, though maybe in different senses.

Outline of the Paper. After two simple reduction rules, Section 2 studies maximal cliques in the graph on which these two rules are not applicable, and how a minimum solution may impact them. Section 3 presents the main reduction rules, and establishes the bounds on the numbers of vertices in different categories, thereby proving the main theorem of the paper. Using the properties established in previous sections, the last section presents a very simple kernelization algorithm for the diamond-free edge deletion problem.

Maximal Cliques
All graphs discussed in this paper are undirected and simple. A graph G is given by its vertex set V(G) and edge set E(G). The neighborhood of a vertex v in a graph G, denoted by 𝑁𝐺(𝑣), consists of all the vertices adjacent to v in G. We extend this to a set 𝑆⊆𝑉(𝐺) of vertices by defining the neighborhood 𝑁𝐺(𝑆) of S as (⋃𝑣∈𝑆𝑁𝐺(𝑣))∖𝑆. For a set 𝑈⊆𝑉(𝐺) of vertices, we denote by G[U] the subgraph induced by U, whose vertex set is U and whose edge set comprises all edges of G with both ends in U. We use 𝐺−𝑣, where v is a vertex of G, as a shorthand for 𝐺[𝑉(𝐺)∖{𝑣}]. In a diamond, we refer to the edge between the two degree-three vertices as the cross edge, and the only non-edge the missing edge.

For a set 𝐸+ of edges, we denoted by 𝐺+𝐸+ the graph obtained by adding edges in 𝐸+ to G,—its vertex set is still V(G) and its edge set becomes 𝐸(𝐺)∪𝐸+. The graph 𝐺−𝐸− is defined analogously. Throughout the paper we always tacitly assume 𝐸+∩𝐸(𝐺)=∅ and 𝐸−⊆𝐸(𝐺); hence 𝐸+ and 𝐸− are disjoint. A solution of an instance (G, k) consists of a set 𝐸+ of added edges and a set 𝐸− of deleted edges such that 𝐺+𝐸+−𝐸− is diamond-free and |𝐸+∪𝐸−|≤𝑘. We use 𝐸± as a shorthand for 𝐸+∪𝐸−, and there should be no ambiguities: 𝐸+=𝐸±∖𝐸(𝐺) and 𝐸−=𝐸±∩𝐸(𝐺). We also use 𝐺△𝐸± as a shorthand for 𝐺+𝐸+−𝐸−.

We start from a routine step for edge editing problems. If a (non-)edge uv participates in 𝑘+1 or more diamonds that pairwise share only this (non)-edge, then it has to be in any solution of size at most k. The following two reduction rules, taking care of the cases uv being the missing edge and being the cross edge respectively, would suffice for our purpose. The correctness of them is straightforward: If we do not add/delete uv, then we have to delete/add at least 𝑘+1 edges.

Rule 1
If there exist a non-edge uv and 2𝑘+2 distinct vertices 𝑥1,𝑦1,…,𝑥𝑘+1,𝑦𝑘+1 in 𝑁(𝑢)∩𝑁(𝑣) such that 𝑥𝑖𝑦𝑖∈𝐸(𝐺) for all 1≤𝑖≤𝑘+1, then add uv and decrease k by one.

Rule 2
If there exist an edge uv and 2𝑘+2 distinct vertices 𝑥1,𝑦1,…,𝑥𝑘+1,𝑦𝑘+1 in 𝑁(𝑢)∩𝑁(𝑣) such that 𝑥𝑖𝑦𝑖∉𝐸(𝐺) for all 1≤𝑖≤𝑘+1, then delete uv and decrease k by one.

For a non-edge uv, whether Rule 1 is applicable to uv can be decided by finding a maximum matching in 𝐺[𝑁(𝑢)∩𝑁(𝑣)]. Likewise, for 𝑢𝑣∈𝐸(𝐺), we can find a maximum matching in the complement graph of 𝐺[𝑁(𝑢)∩𝑁(𝑣)]. Therefore, Rules 1 and 2 can be applied in polynomial time. We call an instance (G, k) reduced if neither Rule 1 nor 2 is applicable to it. In the rest, we will focus on reduced instances. A similar idea as the two rules enables us to exclude some (non-)edges from consideration.

Proposition 2
Let 𝐸± be a solution to a yes-instance (G, k). A (non-)edge uv cannot be in 𝐸± if

(i)
𝑢𝑣∈𝐸(𝐺) and there are 𝑘+1 pairwise adjacent vertices in 𝑁(𝑢)∩𝑁(𝑣); or

(ii)
𝑢𝑣∉𝐸(𝐺) and there are 𝑘+1 pairwise nonadjacent vertices in 𝑁(𝑢)∩𝑁(𝑣).

Proof
Suppose for contradiction to assertion (i) that 𝑢𝑣∈𝐸−. Let K be a set of 𝑘+1 pairwise adjacent vertices in 𝑁(𝑢)∩𝑁(𝑣), and let 𝑋⊆𝐾 be the set of vertices x with xu or xv in 𝐸−. Vertices in 𝐾∖𝑋 remain adjacent to both u and v in 𝐺−𝐸−. Since the final graph is diamond-free, 𝐸− must contain all edges among 𝐾∖𝑋. Therefore,

|𝐸−|≥1+|𝑋|+(|𝐾∖𝑋|−1)=𝑘+1,
which is impossible because 𝐸± is a solution to (G, k).

The argument for assertion (ii) is similar and hence omitted. ◻

Proposition 3
Let (G, k) be a reduced yes-instance. For any (non-)edge uv in a solution of (G, k), the cardinality of 𝑁(𝑢)∩𝑁(𝑣) is at most 3k.

Proof
We consider only 𝑢𝑣∈𝐸−, and the argument for 𝑢𝑣∈𝐸+ is similar and omitted.

Let 𝑊=𝑁(𝑢)∩𝑁(𝑣); we find a maximum matching in the complement graph of G[W], and let 𝑊′ be the ends of the edges in the matching. Since Rule 2 is not applicable (to uv), |𝑊′|≤2𝑘. There cannot be non-edges between vertices in 𝑊∖𝑊′; then by Proposition 2(i), the size of 𝑊∖𝑊′ is at most k. Therefore, |𝑊|≤3𝑘. ◻

Our algorithm will be mostly concerned with maximal cliques. According to Proposition 2(i), a maximal clique on 𝑘+3 or more vertices cannot be touched by a minimum solution “from inside,” but it may be touched “from outside”. We call a maximal clique big if it contains at least 3𝑘+2 vertices, and small otherwise.

Lemma 4
Let (G, k) be a reduced instance.

(i)
Two big maximal cliques of G share at most one vertex.

(ii)
If (G, k) is a yes-instance, then a big maximal clique of G remains a maximal clique after applying a solution to (G, k).

Proof
Let 𝐾1 and 𝐾2 be two big maximal cliques of G. Suppose first that some vertex 𝑢∈𝐾1∖𝐾2 is adjacent to more than 2𝑘+1 vertices in 𝐾2. Since 𝐾2 is a maximal clique, we can find 𝑣∈𝐾2∖𝐾1 nonadjacent to u, but then Rule 1 would be applicable (to uv). Hence, every vertex in 𝐾1∖𝐾2 has at most 2𝑘+1 neighbors in 𝐾2, which implies |𝐾1∩𝐾2|≤2𝑘+1. By assumption, |𝐾1|≥3𝑘+2 and |𝐾2|≥3𝑘+2. For each vertex in 𝐾1∖𝐾2, we can find 𝑘+1 non-neighbors in 𝐾2∖𝐾1. Therefore, we can greedily find 𝑘+1 pairs of distinct vertices {𝑥1,𝑦1}, …, {𝑥𝑘+1,𝑦𝑘+1} such that for all 1≤𝑖≤𝑘+1, (a) 𝑥𝑖∈𝐾1∖𝐾2 and 𝑦𝑖∈𝐾2∖𝐾1; and (b) 𝑥𝑖𝑦𝑖∉𝐸(𝐺). Rule 2 would be applicable (to any edge in 𝐺[𝐾1∩𝐾2]) if |𝐾1∩𝐾2|≥2. Therefore, |𝐾1∩𝐾2|≤1, and this concludes the proof for assertion (i).

Let 𝐸± be a solution to (G, k) and 𝐺∗=𝐺△𝐸±. By Proposition 2(i), a big maximal clique K in G remains a clique in 𝐺∗. Let 𝑣∈𝑉(𝐺)∖𝐾 and let 𝑢∈𝐾∖𝑁𝐺(𝑣). Since Rule 1 is not applicable to uv, there are at most 2𝑘+1 neighbors of v in K. Since |𝐾|≥3𝑘+2, at least one vertex in K remains nonadjacent to v in 𝐺∗ because |𝐸+|≤𝑘. Therefore, K is a maximal clique in 𝐺∗ as well. ◻

It is well known that a graph G is diamond-free if and only if every pair of adjacent vertices is contained in exactly one maximal clique of G. (Proposition 5 implies this fact.) This characterization turns out to be fundamental for the results in this paper. We say that a maximal clique of G is of type I if it shares two or more vertices with some other maximal clique, and type II otherwise (its intersection with any other maximal clique is either 0 or 1 vertex). We can then rephrase the first sentence of this paragraph as: A graph is diamond-free if and only if it has no maximal clique of type I.

We use 𝑏(𝐺), 𝑠(𝐺), and 2(𝐺) to denote, respectively, the set of big maximal cliques of type I, the set of small maximal cliques of type I, and the set of maximal cliques of type II, of G. A maximal clique in G is in precisely one of them. The next proposition characterizes maximal cliques of type I and vertices in them.

Proposition 5
(i) A maximal clique is of type I if and only if it contains both ends of the cross edge of a diamond. (ii) A vertex is in a maximal clique of type I if and only if it is contained in an induced diamond.

Proof
The following argument proves assert (i), and it also works for assert (ii).

Let u, v, x, y be four vertices inducing a diamond in G with cross edge uv. We can find two maximal cliques 𝐾1,𝐾2 containing u, v, x and u, v, y respectively. For any maximal clique K containing u, v, at least one of 𝐾1,𝐾2 is different from K, hence K is of type I.

We now consider the “only if” direction. Let 𝐾1 be a maximal clique of type I; by definition, there is another maximal clique 𝐾2 such that |𝐾1∩𝐾2|≥2. For any vertex 𝑥∈𝐾1∖𝐾2 and any vertex 𝑢∈𝐾1∩𝐾2, we can find another vertex 𝑣∈𝐾1∩𝐾2 different from u and a vertex 𝑦∈𝐾2∖𝐾1 not adjacent to x (because 𝐾2 is maximal). Clearly, these four vertices induce a diamond with cross edge uv. ◻

The following two statements help us understand edges added by a minimum solution.

Proposition 6
Let G be a diamond-free graph, and let 𝑈⊆𝑉(𝐺) such that every vertex in 𝑉(𝐺)∖𝑈 is adjacent to at most one vertex of U. If 𝐺[𝑈]△𝐸± is diamond-free for a set 𝐸+ of non-edges in G[U] and a set 𝐸− of edges in G[U], then so is 𝐺△𝐸±.

Proof
Suppose for contradiction that 𝐺∗=𝐺△𝐸± contains a diamond; let D be a set of vertices inducing a diamond in 𝐺∗. Since G[D] is not a diamond, at least one (non-)edge of this diamond belongs to 𝐸±, and is between vertices of U. On the other hand, 𝐺[𝑈]△𝐸± remains diamond-free, hence 𝐷⊈𝑈. Therefore, |𝐷∩𝑈| is either two or three, but then a vertex in 𝐷∖𝑈 is adjacent to at least two vertices of 𝐷∩𝑈 in G, a contradiction. ◻

Lemma 7
Let 𝐸± be a minimum solution to a reduced yes-instance (G, k). Every vertex incident to some edge in 𝐸+ is contained in some small maximal clique of type I in G.

Proof
Let 𝐺∗=𝐺△𝐸±, where uv is an edge in 𝐸+, and let U be a maximal clique of 𝐺∗ containing u, v. We argue first that v is in some induced diamond in G[U].

Suppose for contradiction that v participates in no diamond in G[U]. Let 𝑋=𝑁𝐺(𝑣)∩𝑈. The subgraph G[X] is a disjoint union of cliques: An induced path of length two would make a diamond with v. Let {𝐴1,…,𝐴𝑝} be those nontrivial cliques (containing more than one vertex) in G[X]; let B be the other vertices of X; and let 𝐶=𝑈∖𝑁𝐺[𝑣]. Then {𝐴1,…,𝐴𝑝,𝐵,𝐶} is a partition of the set 𝑈∖{𝑣}. Note that p or |B| may be 0, but |𝐶|>0 because 𝑢∈𝐶.

To arrive at a contradiction, we will construct a solution 𝐸′± for G[U] whose size is smaller than the number of non-edges in G[U]. Assume such an 𝐸′± exists and let 𝐺′ be the graph obtained from 𝐺∗ by replacing 𝐺∗[𝑈] with 𝐺[𝑈]△𝐸′±. Since U is a type-II maximal clique of 𝐺∗, for each 𝑥∈𝑉(𝐺)∖𝑈 we have |𝑁𝐺∗(𝑥)∩𝑈|≤1. By Proposition 6, 𝐺′ is diamond-free. This would however imply a strictly smaller solution than 𝐸±, contradicting that 𝐸± is a minimum solution of (G, k). Now we show how to construct 𝐸′±.

Case 1, |𝐵|≥|𝐶|. We set 𝐸′+=∅ and 𝐸′− the set of edges in G[C]. No edge in 𝐸′− is incident to v or N(v), and hence 𝑁(𝑣)∩𝑈 is still a disjoint union of cliques in 𝐺′. On the other hand, no vertex 𝑥∈𝐶 is in any diamond in 𝐺′[𝑈] because 𝑁𝐺′(𝑥)∩𝑈 is an independent set. Thus, 𝐺′[𝑈] is diamond-free. Since B is an independent set of G, and v is nonadjacent to C, we have

|𝐸+∩𝑈2|≥(|𝐵|2)+|𝐶|≥(|𝐶|2)+|𝐶|>|𝐸′−|=|𝐸′+∪𝐸′−|.
Case 2, |𝐵|<|𝐶|. We set 𝐸′+ to be the set of non-edges in 𝐺[𝐵∪𝐶], and 𝐸′− the set of edges between 𝐵∪𝐶 and 𝑈∖(𝐵∪𝐶). To see that 𝐺′[𝑈] is diamond-free, note that its maximal cliques are 𝐵∪𝐶 and {𝑣}∪𝐴𝑖 for 1≤𝑖≤𝑝, whose intersection is either {𝑣} or empty. We then calculate the cardinality of 𝐸+∩𝑈2, which comprises three parts, those among 𝐵∪𝐶, which is exactly 𝐸′+, those between C and v, and those between C and 𝐴𝑖’s. Since v does not belong to any diamond in G[U], each vertex in C is adjacent to at most one vertex of 𝐴𝑖,1≤𝑖≤𝑝. In other words, for each 𝑥∈𝐶 and each 1≤𝑖≤𝑝, the number of non-edges between x and 𝐴𝑖 is at least one. Therefore

|𝐸+∩𝑈2|≥|𝐸′+|+|𝐶|+|𝐶|×𝑝>|𝐸′+|+|𝐵|+|𝐶|×𝑝≥|𝐸′+|+|𝐸′−|.
Now that v is in some induced diamond in G[U], we can find a maximal clique K of G containing v and another two vertices of this diamond. Since U is not a clique in G, we have 𝐾≠𝑈. And |𝐾∩𝑈|≥3 implies that K cannot induce a maximal clique of 𝐺∗. Hence by Lemma 4(ii), it is small. This concludes the proof of the lemma. ◻

After delimiting the ends of the edges added by a minimum solution, we now turn to the ends of those edges deleted by a minimum solution. The next lemma states that some maximal cliques in G remain maximal cliques after applying the solution, that is, none of the edges inside those cliques are deleted.

Lemma 8
Let 𝐸± be a minimum solution to an instance (G, k), and let K be a maximal clique of type II in G. If 𝐸+ contains neither (i) an edge between 𝑢∈𝐾 and 𝑣∈𝑁(𝐾), nor (ii) two edges between vertices of K and the same vertex in 𝑉(𝐺)∖𝐾, then K remains a maximal clique (of type II) in 𝐺△𝐸±.

Proof
Let 𝐺∗=𝐺△𝐸±. Since K is a type-II maximal clique of G, each vertex 𝑣∈𝑉(𝐺)∖𝐾 has at most one neighbor in K. By the assumption that 𝐸+ contains neither (i) nor (ii), this remains true in 𝐺+𝐸+ and 𝐺∗.

On the other hand, 𝐸− cannot contain edges of G[K]; otherwise, by Proposition 6, 𝐺∗ remains diamond-free after replacing 𝐺∗[𝐾] by G[K], which implies a strictly smaller solution than 𝐸±. Therefore, K is a maximal clique in 𝐺∗. ◻

The next corollary follows from Lemmas 7 and 8.

Corollary 9
Let 𝐸± be a minimum solution to a reduced yes-instance (G, k), and let K be a maximal clique of G containing both ends of an edge in 𝐸−. Then either 𝐾∈𝑠(𝐺), or 𝐾∈2(𝐺) and K intersects one clique in 𝑠(𝐺).

Fig. 2
figure 2
An example with 𝑘=4, of which a minimum solution is {+𝑢2𝑣2,−𝑢1𝑣2,−𝑣0𝑣1,−𝑢3𝑣9}. (Note that 𝑢1𝑣2 and 𝑣0𝑣1 are not in any diamond of G.) It has six maximal cliques, 𝐾1={𝑣0,𝑣1,𝑣2,𝑢1}, 𝐾2={𝑣2,𝑣3,𝑣4,𝑣5,𝑣6}, 𝐾3={𝑢2,𝑣3,𝑣4,𝑣5,𝑣6}, 𝐾4={𝑢3,𝑣7,𝑣8}, 𝐾5={𝑢3,𝑢4,𝑣9}, while 𝐾6 comprises of 𝑢1,𝑢2,𝑢3,𝑢4 and other ten unlabeled vertices. Four of these maximal cliques, 𝐾2, 𝐾3, 𝐾5, and 𝐾6, are of type I, of which only 𝐾6 is big, the other two of type II. All 14 labeled vertices are vulnerable, and the other 8 unlabeled vertices are guarded

Full size image
Lemma 7 and Corollary 9 motivate the following definition. We say that a vertex v is vulnerable in graph G if (1) there exists some 𝐾∈𝑠(𝐺) containing v; or (2) there are intersecting maximal cliques 𝐾1∈𝑠(𝐺) and 𝐾2∈2(𝐺) such that 𝑣∈𝐾2. A vertex is guarded if it is not vulnerable. Lemma 7 and Corollary 9 can be summarized as: No (non-)edge in a minimum solution can be incident to a guarded vertex. See Fig. 2 for an illustration.

The Kernel
We partition the vertex set of a reduced graph into five parts, and deal with them separately.

(i)
Vertices in small maximal cliques of type I (all of them are vulnerable);

(ii)
Vulnerable vertices in big maximal cliques of type I but not in the previous part;

(iii)
Other vulnerable vertices (not in any maximal cliques of type I);

(iv)
Guarded vertices in (big) maximal cliques of type I; and

(v)
Other guarded vertices (not in any maximal cliques of type I).

Note that for this purpose we do not need to enumerate the maximal cliques. The key observation is that we can easily find the cross edges of all diamonds by enumeration, from which we can identify all vertices and edges in maximal cliques of type I. We use the procedure partition presented in Fig. 3, which computes this partition in three steps: It first finds all vertices in a maximal clique of type I, from which it identifies those in a small maximal clique of type I, and finally it uses them to get all vulnerable vertices.

Fig. 3
figure 3
The procedure partition

Full size image
It is easy to check that procedure partition runs in polynomial time. We now show its correctness.

Lemma 10
Procedure partition is correct.

Proof
An edge 𝑢𝑣∈𝐸(𝐺) is a cross edge if and only if 𝑁(𝑢)∩𝑁(𝑣) does not induce a clique; this justifies step 1.1. Steps 1.2 and 1.3 follow from Proposition 5(i).

Step 2 considers all vertices in maximal cliques of type I. If some component of G[N(v)] is not a clique, we can find a path xyz of length two. There are two different maximal cliques containing v, x, y and v, y, z respectively. Both are of type I, and hence by Lemma 4(i), at least one of them is small. Step 2.2 also follows from Proposition 5(i). If a vertex v is not marked in step 2, then every maximal clique containing v is either big or of type II. Therefore, all vertices in small maximal cliques of type I have been correctly identified in step 2.

Step 3 finds other vulnerable vertices. By definition, such a vertex is in some maximal clique of type II. If a type-II maximal clique consists of an isolated vertex, it is guarded and not marked in step 3. We may hence consider only nontrivial maximal cliques. All edges in a type-II maximal clique remain unmarked. Note that any two vertices of a type-II maximal clique determines this clique: It is the only maximal clique that contains these two vertices. Vertices in the clique are vulnerable if and only if it contains a vertex marked “small.” We only need to check the clique K once, so we mark them to avoid unnecessary repetition in step 3.3. After step 3, all type-II maximal cliques have been checked, and the algorithm is complete. ◻

Maximal Cliques of Type I
We start from the vertices that are in some small type-I maximal cliques of G; let them be denoted by S(G), i.e., 𝑆(𝐺)=⋃𝐾∈𝑠(𝐺)𝐾. Noting that the final graph has no small type-I maximal cliques, we can bound the size of S(G) by relating vertices in it to edges in a minimum solution.

Lemma 11
If (G, k) is a reduced yes-instance, then |𝑆(𝐺)|≤18𝑘3+2𝑘.

Proof
Let 𝐸± be a minimum solution of (G, k). Let 𝑋=⋃𝑥𝑦∈𝐸±{𝑥,𝑦} and 𝑌=⋃𝑥𝑦∈𝐸±𝑁𝐺(𝑥)∩𝑁𝐺(𝑦), i.e., all vertices incident to a (non-)edge in the solution and respectively, all vertices that is a common neighbor of the two ends of a (non-)edge in the solution. Note that |𝑋|≤2𝑘, and by Proposition 3, |𝑌|≤3𝑘⋅|𝐸±|≤3𝑘2.

Since

|𝑆(𝐺)∩(𝑋∪𝑌)|≤|𝑋∪𝑌|≤3𝑘2+2𝑘,
it suffices to bound 𝑆(𝐺)∖(𝑋∪𝑌). A vertex 𝑣∈𝑆(𝐺)∖(𝑋∪𝑌) cannot be contained in two type-I maximal cliques of G if they share more than one vertex: Otherwise, there is a diamond (as in Proposition 5(ii)) in 𝑁𝐺[𝑣], but then v has to be in 𝑋∪𝑌, a contradiction.

Let us now consider the set of small type-I maximal cliques of G that contain vertices from 𝑆(𝐺)∖(𝑋∪𝑌), which we denote by ′. We argue by contradiction that any pair of cliques in ′ shares at most one vertex. Suppose otherwise, there are two maximal cliques 𝐾1,𝐾2∈′ with |𝐾1∩𝐾2|≥2. We have seen that 𝐾1∩𝐾2 is disjoint from 𝑆(𝐺)∖(𝑋∪𝑌). Now let 𝑢∈𝐾1∖𝐾2 and 𝑣∈𝐾2∖𝐾1 be two vertices in 𝑆(𝐺)∖(𝑋∪𝑌). Then there is a diamond with u and two vertices in 𝐾1∩𝐾2 and one vertex in 𝐾2∖𝐾1. But by the assumption 𝑢∉𝑋∪𝑌, we cannot add or delete any edge incident to u; on the other hand, 𝑣∉𝑋∪𝑌 forbids the deletion of other three edges, a contradiction.

Let 𝑣∈𝑆(𝐺)∖(𝑋∪𝑌), and let K be a clique in ′ containing v. By definition, there exists a diamond in which (1) v is a degree-two vertex; (2) the two degree-three vertices are in K; and (3) the other degree-two vertex is not in K. Since v is not in 𝑋∩𝑌, one of the two edges of this diamond that are incident to the other degree-two vertex has to be in 𝐸−. In other words, K contains for some edge 𝑥𝑦∈𝐸−, one in {𝑥,𝑦} and a common neighbor of x, y. By Proposition 3, for each edge 𝑥𝑦∈𝐸−, there are at most 3k vertices in 𝑁𝐺(𝑥)∩𝑁𝐺(𝑦); for each 𝑧∈𝑁𝐺(𝑥)∩𝑁𝐺(𝑦), there can be at most one clique in ′ containing x, z and at most one clique in ′ containing y, z. Therefore, there can be at most 3𝑘⋅2⋅|𝐸−|≤6𝑘2 cliques in ′. By definition, each clique in it is small and has at most 3𝑘+1 vertices, of which at least two are not in 𝑆(𝐺)∖(𝑋∪𝑌). Hence

|𝑆(𝐺)∖(𝑋∪𝑌)|≤(3𝑘−1)⋅6𝑘2=18𝑘3−6𝑘2.
Putting the two parts together, we have |𝑆(𝐺)|≤18𝑘3+2𝑘. ◻

Next, we consider the big maximal cliques of type I. By Lemma 4(ii), a clique in 𝑏(𝐺) remains a maximal clique after a minimum solution is applied to G. We bound first the number of big type-I maximal cliques.

Lemma 12
If (G, k) is a reduced yes-instance, then |𝑏(𝐺)|≤6𝑘2.

Proof
By Lemma 4, the only way to transform a big maximal clique of type I into one of type II is deleting edges incident to it. For an edge 𝑒=𝑢𝑣∈𝐸−, denote by 𝑒 the set of big type-I maximal cliques containing one in {𝑢,𝑣}, and one vertex in 𝑁(𝑢)∩𝑁(𝑣). Note that 𝑏(𝐺)=⋃𝑒∈𝐸−𝑒. By Proposition 3, 𝑒 has at most 6k maximal cliques. Then |𝑏(𝐺)|≤6𝑘⋅|𝐸−|=6𝑘2. ◻

To bound the number of vertices in big type-I maximal cliques, it suffices to bound their sizes, for which we introduce another reduction rule.

Rule 3
Let 𝐾∈𝑏(𝐺) with |𝐾|≥3𝑘+3. If K contains a guarded vertex x that does not occur in any other type-I maximal clique of G, delete it.

Lemma 13
Rule 3 is safe: A reduced instance (G, k) is a yes-instance if and only if (𝐺−𝑥,𝑘) is a yes-instance.

Proof
It is easy to see that (𝐺−𝑥,𝑘) is a reduced instance, and every solution of (G, k) confined to 𝐺−𝑥 is a solution of (𝐺−𝑥,𝑘). For the “if” direction, let 𝐸± be a minimum solution of (𝐺−𝑥,𝑘), and let 𝐺∗=𝐺△𝐸±. Note that (𝐺−𝑥)△𝐸±=𝐺∗−𝑥, and it is diamond-free. No edge in 𝐸± is incident to x, and hence 𝑁𝐺(𝑥)=𝑁𝐺∗(𝑥), which we simply denote by N(x). By Proposition 5(ii), it suffices to prove that each maximal clique of 𝐺∗ containing x is of type II. For this purpose, we show that each component of G[N(x)] is either a single vertex or a type-II maximal clique in 𝐺∗−𝑥.

Note that 𝐾∖{𝑥} is a big maximal clique in 𝐺−𝑥: It is a clique of size at least 3𝑘+2, and its maximality follows from Lemma 4(i). Hence, by Lemma 4(ii), 𝐾∖{𝑥} is a maximal clique (of type II) in 𝐺∗−𝑥. Since x is a guarded vertex that does not occur in any other type-I maximal clique, every other maximal clique 𝐾′ containing x in G is of type II, and it cannot intersect any small type-I maximal clique. Therefore, by Lemma 7, no edge added by 𝐸+ can be incident to any vertex in N(x). From Lemma 8 we can conclude that 𝐾′∖{𝑥} either contains only a vertex or is a maximal clique (of type II) in 𝐺∗−𝑥.

Since no edge added by 𝐸+ is between two vertices in N(x) and since x is a guarded vertex, each component of G[N(x)] is either 𝐾∖{𝑥} or 𝐾′∖{𝑥}, hence is either a single vertex or a type-II maximal clique in 𝐺∗−𝑥. This concludes the proof. ◻

Remark that Rule 3 only deletes one vertex and does not change the number k. Hence, after applications of Rule 3, the reduced instance remains reduced.

Lemma 14
Let (G, k) be a reduced yes-instance. If Rule 3 is not applicable, then for each 𝐾∈𝑏(𝐺), we have that |𝐾|=𝑂(𝑘3).

Proof
Without loss of generality, assume that |𝐾|≥3𝑘+3. Since Rule 3 is not applicable, every vertex in K is either a vulnerable vertex, or a guarded vertex in more than one big type-I maximal clique. Let 𝑈1 and 𝑈2 be the set of vulnerable vertices in 𝐾∩𝑆(𝐺) and 𝐾∖𝑆(𝐺) respectively. By the definition, each vertex in 𝑈2 is adjacent to some vertex in 𝑆(𝐺)∖𝑈1 by an edge of type-II maximal clique. For each vertex 𝑣∈𝑆(𝐺)∖𝑈1, the cardinality of 𝑈2∩𝑁(𝑣) is at most one; otherwise, there is a type-I maximal clique containing 𝑈2∩𝑁(𝑣) and v which by Lemma 4(i) is small, contradicting to 𝑈2⊆𝐾∖𝑆(𝐺). Therefore, |𝑈2|≤|𝑆(𝐺)∖𝑈1|, and by Lemma 11, K contains at most 18𝑘3+2𝑘 vulnerable vertices. By Lemma 4(i), every pair of big type-I maximal cliques shares at most one vertex. Hence, by Lemma 12, K contains at most 6𝑘2 guarded vertices that appear in some other big maximal cliques of type I. Putting them together we get |𝐾|≤18𝑘3+2𝑘+6𝑘2. ◻

The next corollary follows immediately from Lemmas 12 and 14 .

Corollary 15
Let (G, k) be a reduced yes-instance. If Rule 3 is not applicable, then the number of vertices that are contained in some cliques in 𝑏(𝐺) is 𝑂(𝑘5).

Maximal Cliques of Type II
We have bounded the number of vertices in all maximal cliques of type I, and it remains to bound the number of vertices that occur only in maximal cliques of type II. Let T(G) denote these vertices, i.e., 𝑇(𝐺)=𝑉(𝐺)∖⋃𝐾∈𝑠(𝐺)∪𝑏(𝐺)𝐾. It may not be surprising that we can delete all the guarded vertices in them.

Rule 4
If there is a guarded vertex x not in any type-I maximal clique of G, delete it.

Lemma 16
Rule 4 is safe: A reduced instance (G, k) is a yes-instance if and only if (𝐺−𝑥,𝑘) is a yes-instance.

Proof
It is easy to see that (𝐺−𝑥,𝑘) is a reduced instance, and every solution of (G, k) confined to 𝐺−𝑥 is a solution of (𝐺−𝑥,𝑘). For the other direction, let 𝐸± be a minimum solution of (𝐺−𝑥,𝑘), and it is sufficient to show that x is not part of any diamond in 𝐺∗=𝐺△𝐸±. Note that x is a vertex which is part of only type-II maximal cliques in G and not adjacent to any vertex in small type-I maximal cliques in G. Therefore, by Lemma 7, none of the vertices in N(x) is incident to any edges of 𝐸+. If x is part of a diamond in 𝐺∗, then it is formed by a deletion of an edge in G[N[x]] by 𝐸−. But this is not possible by Corollary 9, as none of the edges in G[N[x]] is part of any type-II maximal clique which intersects with a small type-I maximal clique in 𝐺−𝑥. ◻

If Rule 4 is not applicable, then all vertices in T(G) are vulnerable. As demonstrated in Fig. 2, an edge may be deleted from a maximal clique of type II. In that example, neither end of the deleted edge 𝑣0𝑣1 is in any maximal clique of type I. This can happen only after some modification happens in the neighborhood of this vertex—𝑢2𝑣2 added in the example. Indeed, we may consider the added/deleted edges stepwise, then there is an order such that each edge is added/deleted only if it is in some diamond. One modification may introduce new diamond(s) not in the original graph. For example, neither 𝑣0𝑣1 nor 𝑢1𝑣2 is in a diamond of G, but the addition of 𝑢2𝑣2 jeopardizes 𝑢1𝑣2, whose deletion consequently brings 𝑣0𝑣1 down.

This example is actually exemplary: The only way to bring an edge in a maximal clique K of type II to a diamond is through adding edge(s) between K and other vertices. According to Proposition 2, however, this would not happen when |𝐾|≥𝑘+3. In other words, to make sure a large clique in 2(𝐺) is immutable to future modifications, it suffices to keep 𝑘+3 of its vertices. This motivates the following reduction rule, whose statement is however more complex than previous ones. The main trouble here is that we are not allowed to delete all but 𝑘+3 guarded vertices from a clique in 2(𝐺), because it may be required for another clique in 2(𝐺).

For a pair of vertices u, v, we denote by N(u, v) the set of common neighbors of u and v not in S(G), i.e., 𝑁(𝑢,𝑣)=(𝑁(𝑢)∩𝑁(𝑣))∖𝑆(𝐺).

Proposition 17
Let u, v be two vertices in G. If 𝑢𝑣∉𝐸(𝐺), then N(u, v) form an independent set. Moreover, if 𝑢𝑣∈𝐸+ for a solution 𝐸± of (G, k), then |𝑁(𝑢,𝑣)|≤𝑘.

Proof
If G[N(u, v)] has an edge, say xy, then {𝑢,𝑣,𝑥,𝑦} forms a diamond. There are two type-I maximal cliques containing {𝑥,𝑦,𝑢} and {𝑥,𝑦,𝑣} respectively. By Lemma 4(i), at least one of them is small, contradicting to 𝑥,𝑦∉𝑆(𝐺). The second claim follows from Proposition 2. ◻

Our last rule would keep at most 𝑘+1 from such sets. To avoid unnecessary clutters, we simply say we mark 𝑘+1 vertices in N(u, v), even if its size is smaller than 𝑘+1; in which case, we mark all of them.

Rule 5
For each pair of vertices 𝑢,𝑣∈𝑆(𝐺), arbitrarily mark 𝑘+1 vertices in N(u, v). If |𝑁(𝑢,𝑣)|≤𝑘, then for each vertex 𝑤∈𝑁(𝑢,𝑣), arbitrarily mark 𝑘+1 vertices in N(u, w) and 𝑘+1 vertices in N(v, w). If there is an unmarked vertex x in T(G), delete it.

Lemma 18
Rule 5 is safe: A reduced instance (G, k) is a yes-instance if and only if (𝐺−𝑥,𝑘) is a yes-instance.

Proof
It is easy to see that (𝐺−𝑥,𝑘) is a reduced instance, and every solution of (G, k) confined to 𝐺−𝑥 is a solution of (𝐺−𝑥,𝑘). For the “if” direction, let 𝐸± be a minimum solution of (𝐺−𝑥,𝑘), and let 𝐺∗=𝐺△𝐸±. We show that each maximal clique of 𝐺∗ containing x is a maximal clique of G and is of type II in 𝐺∗. Since Proposition 5(ii) implies that deleting a vertex not in any type-I maximal clique does not alter type-I maximal cliques, we have 𝑆(𝐺′)=𝑆(𝐺).

Let K be a maximal clique of G containing x; note that K is a maximal clique of type II in G, as 𝑥∈𝑇(𝐺). We argue that |𝑁𝐺∗(𝑦)∩𝐾|≤1 for every 𝑦∈𝑉(𝐺)∖𝐾. Since K is a maximal clique of type II in G, we have (1) |𝑁𝐺(𝑦)∩𝐾| is either 0 or 1; and (2) for every pair of vertices 𝑢,𝑣∈𝐾,

𝑁(𝑢,𝑣)⊆𝑁𝐺(𝑢)∩𝑁𝐺(𝑣)=𝐾.
Suppose first that there are at least two edges between y and K in 𝐸+. Let 𝑢,𝑣∈𝐾 be two vertices such that 𝑦𝑢,𝑦𝑣∈𝐸+. Then by Lemma 7, 𝑢,𝑣∈𝑆(𝐺′), and hence 𝑢,𝑣∈𝑆(𝐺). Clearly, 𝑥≠𝑢, 𝑥≠𝑣 and x is an unmarked vertex in N(u, v). Further, there are 𝑘+1 marked vertices in N(u, v). It follows that |𝐾∖{𝑥}|≥𝑘+3, and 𝐸− does not have any edge in 𝐺′[𝐾∖{𝑥}] by Proposition 2(i). Therefore, for each marked vertex 𝑧∈𝑁(𝑢,𝑣) that is not adjacent to y, the set {𝑢,𝑣,𝑦,𝑧} induces a diamond in 𝐺′+{𝑦𝑢,𝑦𝑣}. The only edge we can edit is yz, but |𝑁𝐺(𝑦)∩𝐾|≤1, and there are at least 𝑘+2 edges between y and K, which is impossible.

Hence, at most one edge can be added between y and K by 𝐸+. If |𝑁𝐺(𝑦)∩𝐾|=0, or |𝑁𝐺(𝑦)∩𝐾|=1 but the only edge between y and K is deleted, then it is trivial that y is adjacent to at most one vertex of K in 𝐺∗. Suppose that 𝑁𝐺∗(𝑦)∩𝐾={𝑢,𝑣} while only u is in 𝑁𝐺(𝑦); note that 𝑦𝑢∉𝐸− and 𝑦𝑣∈𝐸+. By Lemma 7, 𝑦,𝑣∈𝑆(𝐺′), and hence in S(G). According to Proposition 17, there are at most k vertices in N(v, y) in 𝐺′. If 𝑢∉𝑆(𝐺), then it has been marked; hence 𝑥≠𝑢. Also, 𝑥≠𝑣 as 𝑥∈𝑇(𝐺). By the rule, no matter whether u is in S(G) or not, we should have marked vertices in N(u, v). Since 𝑥∈𝑁(𝑢,𝑣) but is not marked, we have |𝑁(𝑢,𝑣)|>𝑘+1. Let z be any marked vertex in N(u, v); it is not in 𝑁𝐺(𝑦) by assumption. But then {𝑢,𝑣,𝑦,𝑧} induces a diamond in 𝐺′+𝑦𝑣, in which we have to add the missing edge yz, which requires |𝐸+|>𝑘, a contradiction.

We have thus concluded |𝑁𝐺∗(𝑦)∩𝐾|≤1 for each vertex y in 𝑉(𝐺)∖𝐾. By Proposition 6, 𝐾∖{𝑥} remains a clique in 𝐺∗−𝑥, otherwise we can find a strictly smaller solution. Then K is a maximal clique of type II in 𝐺∗. On the other hand, according to Proposition 17, no edge is added between two vertices of 𝑁𝐺(𝑥). Therefore, N(x) induces exactly the same subgraph in G and 𝐺∗. Hence, any maximal clique of 𝐺∗ containing x is a maximal clique of G as well, hence of type II in 𝐺∗. This concludes the proof of the lemma. ◻

Now Theorem 1 follows by counting numbers of different kinds of vertices.

Proof of Theorem 1
We show first that Rules 3–5 can be applied in polynomial time. For a guarded vertex x, N(x) induces a cluster graph and each maximal clique in the cluster graph together with x forms the maximal cliques of G containing x. Recall that a maximal clique is of type I if and only if it contains both ends of a cross edge. Since the procedure partition finds all guarded vertices (no mark) and cross edges, we can find for each guarded vertex all type-I maximal cliques and type-II maximal cliques containing it in polynomial time. Therefore, both Rules 3 and Rule 4 can be applied in polynomial time. Moreover, the procedure partition finds all vertices in S(G) (mark “small”) and T(G) (no mark “type I”), and hence Rule 5 can be applied in polynomial time.

We claim that if none of Rules 3–5 is applicable to a reduced yes-instance (G, k), then |𝑉(𝐺)|=𝑂(𝑘8). By Lemma 11, the number of vertices in small type-I maximal cliques is |𝑆(𝐺)|=𝑂(𝑘3). By Corollary 15, we have 𝑂(𝑘5) vertices in big type-I maximal cliques. For each pair of vertices u, v in S(G), we mark at most 𝑘+1 common neighbors of them. And for each common neighbor w of u, v, we mark at most 2𝑘+2 vertices: 𝑘+1 vertices in N(u, w) and 𝑘+1 vertices in N(v, w). Hence |𝑇(𝐺)|=𝑂(𝑘8), and |𝑉(𝐺)|=𝑂(𝑘3)+𝑂(𝑘5)+𝑂(𝑘8)=𝑂(𝑘8). ◻

A Cubic Kernel for Diamond-Free Edge Deletion
We now present a cubic-vertex kernel for the diamond-free edge deletion problem. Note that if 𝐺−𝐸− is diamond-free, then 𝐸− can be viewed as a solution to the diamond-free editing problem as well, where 𝐸+=∅. Therefore, most statements, except those on minimum solutions, also hold for 𝐸−. We will need Rule 2 from page 5; for the sake of completeness, we include it here.

Rule 1
If there exist an edge uv and 2𝑘+2 distinct vertices 𝑥1,𝑦1,…,𝑥𝑘+1,𝑦𝑘+1 in 𝑁(𝑢)∩𝑁(𝑣) such that 𝑥𝑖𝑦𝑖∉𝐸(𝐺) for all 1≤𝑖≤𝑘+1, then delete uv and decrease k by one.

The correctness of the following rule is also straightforward.

Rule 2
Mark an edge uv “permanent” if there are 2𝑘+2 distinct vertices 𝑥1,𝑦1,…,𝑥𝑘+1,𝑦𝑘+1 in 𝑁(𝑢)∩𝑁(𝑣) such that 𝑥𝑖𝑦𝑖∈𝐸(𝐺) for all 1≤𝑖≤𝑘+1. If there exists a diamond consisting of only permanent edges, return a trivial no-instance.

An instance of the diamond-free edge deletion problem is reduced if neither Rule 1 nor 2 is applicable. Henceforth we are concerned exclusively with reduced instances.

Proposition 19
Two big maximal cliques of a reduced instance (G, k) share at most one vertex.

Proof
Each edge in a maximal clique would be marked permanent by Rule 2. Therefore, if two big maximal cliques share more than one vertex, there is a diamond in them, consisting of only permanent edges. ◻

Rule 3
If there is a vertex x not in any small maximal clique, delete it.

Lemma 20
Rule 3 is safe: A reduced instance (G, k) is a yes-instance if and only if (𝐺−𝑥,𝑘) is a yes-instance.

Proof
Let 𝐸− be a minimum solution of (𝐺−𝑥,𝑘). We show that 𝐺∗=𝐺−𝐸− is also diamond-free. Suppose for contradiction that there are maximal cliques 𝐾1 and 𝐾2 in 𝐺∗ such that |𝐾1∩𝐾2|≥2. At least one of them contains x; assume without loss of generality 𝑥∈𝐾1. Let K be a maximal clique of G containing 𝐾1. By the assumption (x is not in any small maximal clique), K is big. By Proposition 2(i), no edge in the clique 𝐾∖{𝑥} can be deleted by 𝐸−. Hence 𝐾=𝐾1 and 𝐾2⊈𝐾. By Proposition 19, 𝐾2 is small, and 𝑥∉𝐾2. We can find a pair of nonadjacent vertices 𝑥′∈𝐾∖{{𝑥}∪𝐾2} and 𝑦∈𝐾2∖𝐾. If no such pair of vertices exists, then 𝐾2 contains all vertices in 𝐾∖{𝑥} and is big, a contradiction. Let u, v be two vertices in 𝐾∩𝐾2. Then {𝑥′,𝑢,𝑣,𝑦} induces a diamond in 𝐺−𝑥 and one of uy, vy has to be deleted by 𝐸−, contradicting that 𝐾2 is a maximal clique of 𝐺∗. This concludes the proof of this lemma. ◻

Again, given any minimal solution 𝐸−, we can view the edges as deleted in a sequence, such that each edge is in a diamond when it is deleted. Likewise to Lemma 8, a type-II maximal clique would remain so during the course. If a vertex is not in any type-I maximal clique of G, then no edge incident to it will be deleted. These vertices and edges are thus irrelevant to the problem; we can actually delete them from the graph.

Rule 4
Delete all edges and vertices not in any maximal clique of type I.

Lemma 21
Rule 4 is safe.

Proof
Let 𝐺′ be the graph obtained by deleting all edges in type-II maximal cliques. Note that a vertex is not in any type-I maximal clique of G if and only if it is isolated in 𝐺′. Therefore, to show the safeness of Rule 4, it suffices to prove that (G, k) is a yes-instance if and only if (𝐺′,𝑘) is a yes-instance. Note that we do not require that (G, k) is reduced.

Let 𝐸− be a minimum solution of (G, k), and let 𝐸′−=𝐸−∩𝐸(𝐺′). We claim that 𝐺′−𝐸′− is diamond-free. Suppose for contradiction that 𝐺′−𝐸′− contains a diamond on {𝑥,𝑢,𝑣,𝑦} with cross edge uv. Then 𝑥𝑦∈𝐸(𝐺)∖𝐸(𝐺′), and {𝑥,𝑢,𝑣,𝑦} is a clique in 𝐺−𝐸−, also in G. The edge xy is not in any type-I maximal clique of G, and hence {𝑥,𝑢,𝑣,𝑦} is part of a type-II maximal clique of G. Hence all edges of this diamond are in 𝐸(𝐺)∖𝐸(𝐺′), a contradiction.

For the other direction, let 𝐸′− be a minimum solution of (𝐺′,𝑘). We claim that 𝐺−𝐸′− is diamond-free. Suppose for contradiction that 𝐺−𝐸′− contains a diamond on {𝑥,𝑢,𝑣,𝑦} with cross edge uv. Then at least one of the five edges of the diamond, i.e., {𝑢𝑥,𝑣𝑥,𝑢𝑣,𝑢𝑦,𝑣𝑦}, is in 𝐸(𝐺)∖𝐸(𝐺′). Assume without loss of generality that one edge in the triangle on {𝑢,𝑣,𝑥} belongs to 𝐸(𝐺)∖𝐸(𝐺′). Then the maximal clique K of G containing u, v, x is of type II. Now y is adjacent to at least two vertices of K in G, hence y must be in K as well. But then xy would be in 𝐸(𝐺)∖𝐸(𝐺′), and hence not in 𝐸′−; in other words, xy is an edge in 𝐺−𝐸′−, a contradiction. This concludes the proof. ◻

It is clear that all the four rules can be applied in polynomial time. Indeed, a simplified version of procedure partition would suffice.

Lemma 22
Let (G, k) be a yes-instance of the diamond-free edge deletion problem. If none of Rules 1–4 is applicable, then |𝑉(𝐺)|=𝑂(𝑘3).

Proof
We claim that if neither Rule 3 nor 4 is applicable to a reduced yes-instance (G, k), then |𝑉(𝐺)|=𝑂(𝑘3). By Lemma 11, there are at most 𝑂(𝑘3) vertices in small type-I maximal cliques in G. After the exhaustive application of Rule 3 and 4 , every vertex is in some small type-I maximal clique. Therefore, graph G contains 𝑂(𝑘3) vertices. ◻