Given a graph G, we define 𝐛𝐜𝐠(𝐺) as the minimum k for which G can be contracted to the uniformly triangulated grid Γ𝑘. A graph class  has the SQGC property if every graph 𝐺∈ has treewidth (𝐛𝐜𝐠(𝐺)𝑐) for some 1≤𝑐<2. The SQGC property is important for algorithm design as it defines the applicability horizon of a series of meta-algorithmic results, in the framework of bidimensionality theory, related to fast parameterized algorithms, kernelization, and approximation schemes. These results apply to a wide family of problems, namely problems that are contraction-bidimensional. Our main combinatorial result reveals a wide family of graph classes that satisfy the SQGC property. This family includes, in particular, bounded-degree string graphs. This considerably extends the applicability of bidimensionality theory for contraction bidimensional problems.

Access provided by University of Auckland Library

Introduction
Treewidth is one of most well-studied parameters in graph algorithms. It serves as a measure of how close a graph is to the topological structure of a tree (see Sect. 2 for the formal definition). Gavril is the first to introduce the concept in [30] but it obtained its name in the second paper of the Graph Minors series of Robertson and Seymour in [38]. Treewidth has extensively used in graph algorithm design due to the fact that a wide class of intractable problems in graphs becomes tractable when restricted on graphs of bounded treewidth [1, 5, 6]. Before we present some key combinatorial properties of treewidth, we need some definitions.

Graph contractions and minors. Our first aim is to define two parameterized versions of the contraction relation on graphs.

Definition 1
(Contractions) Given a non-negative integer c, two graphs H and G, and a surjection 𝜎:𝑉(𝐺)→𝑉(𝐻) we write 𝐻≤𝑐𝜎𝐺 if

for every 𝑥∈𝑉(𝐻), the graph 𝐺[𝜎−1(𝑥)] is a non-empty graph (i.e., a graph with at least one vertex) of diameter at most c and

for every 𝑥,𝑦∈𝑉(𝐻), {𝑥,𝑦}∈𝐸(𝐻)⟺𝐺[𝜎−1(𝑥)∪𝜎−1(𝑦)] is connected.

We say that H is a c-diameter contraction of G if there exists a surjection 𝜎:𝑉(𝐺)→𝑉(𝐻) such that 𝐻≤𝑐𝜎𝐺 and we write this 𝐻≤𝑐𝐺. Moreover, if 𝜎 is such that for every 𝑥∈𝑉(𝐻), |𝜎−1(𝑥)|≤𝑐′, then we say that H is a 𝑐′-size contraction of G, and we write 𝐻≤(𝑐′)𝐺. Given two graphs G and H, if there exists an integer c such that 𝐻≤𝑐𝐺, then we say that H is a contraction of G, and we write 𝐻≤𝐺. Moreover, if there exists a subgraph 𝐺′ of G such that 𝐻≤𝐺′, we say that H is a minor of G and we write this 𝐻⪯𝐺. Given a graph H, we denote by 𝖾𝗑𝖼𝗅(𝐻) the class of graphs that exclude H as a minor.

Combinatorics of Treewidth
One of the most celebrated structural results on treewidth is the following:

Proposition 2
There is a function 𝑓:ℕ→ℕ such that every graph excluding a (𝑘×𝑘)-grid as a minor has treewidth at most f(k).

A proof of Proposition 2 appeared for the first time by Robertson and Seymour in [39]. Other proofs, with better bounds to the function f, appeared in [40] and later in [17] (see also [33, 35]). Currently, the best bound for f is due to Chuzhoy, who recently proved in [4] that 𝑓(𝑘)=𝑘9⋅log(1)𝑘. On the other hand, it is possible to show that Proposition 2 is not correct when 𝑓(𝑘)=(𝑘2⋅log𝑘) (see [43]).

The potential of Proposition 2 on graph algorithms has been capitalized by the theory of bidimensionality that was introduced in [10] and has been further developed in [9, 13, 14, 16, 21,22,23, 26, 29, 32]. This theory offered general techniques for designing efficient fixed-parameter algorithms and approximation schemes for NP-hard graph problems in broad classes of graphs (see [8, 11, 12, 15, 20]). In order to present the result of this paper we first give a brief presentation of this theory and of its applicability.

Optimization parameters and bidimensionality. A graph parameter is a function 𝐩 mapping graphs to non-negative integers. We say that p is a minimization graph parameter if 𝐩(𝐺)=min{𝑘∣∃𝑆⊆𝑉(𝐺):|𝑆|≤𝑘 and 𝜙(𝐺,𝑆)=𝚝𝚛𝚞𝚎}, where 𝜙 is a some predicate on G and S. Similarly, we say that p is a maximization graph parameter if in the above definition we we replace min and ≤ by max and ≥ respectivelly. Minimization or maximization parameters are briefly called optimization parameters.

Definition 3
(Bidimensionality) Given two real functions f and g, we use the term 𝑓≳𝑔 to denote that 𝑓(𝑥)≥𝑔(𝑥)−𝑜(𝑔(𝑥)). A graph parameter p is minor-closed (resp. contraction-closed) when 𝐻⪯𝐺⇒𝐩(𝐻)≤𝐩(𝐺) (resp. 𝐻≤𝐺⇒𝐩(𝐻)≤𝐩(𝐺)). We can now give the two following definitions:

p is minor-bidimensional if          p is contraction-bidimensional if

∙ 𝐩 is minor-closed, and          ∙ 𝐩 is contraction-closed,

∙ 𝐩(⊞𝑘)≳𝛿⋅𝑘2.          ∙ 𝐩(Γ𝑘)≳𝛿⋅𝑘2.

for some 𝛿>0. In the above definitions, we use ⊞𝑘 for the (𝑘×𝑘)-grid and Γ𝑘 for the uniformly triangulated (𝑘×𝑘)-grid (see Fig. 1). If 𝐩 is a minimization (resp. maximization) graph parameter, we denote by Π𝐩 the problem that, given a graph G and a non-negative integer k, asks whether 𝐩(𝐺)≤𝑘 (resp. 𝐩(𝐺)≥𝑘). We say that a problem is minor/contraction-bidimensional if it is Π𝐩 for some bidimensional optimization parameter 𝐩.

Fig. 1
figure 1
The graph Γ9

Full size image
A (non exhaustive) list of minor-bidimensional problems is: VERTEX COVER, FEEDBACK VERTEX SET, LONGEST CYCLE, LONGEST PATH, CYCLE PACKING, PATH PACKING, DIAMOND HITTING SET, MINIMUM MAXIMAL MATCHING, FACE COVER, and MAX BOUNDED DEGREE CONNECTED SUBGRAPH. Some problems that are contraction-bidimensional (but not minor-bidimensional) are CONNECTED VERTEX COVER , DOMINATING SET , CONNECTED DOMINATING SET , CONNECTED FEEDBACK VERTEX SET , INDUCED MATCHING , INDUCED CYCLE PACKING , CYCLE DOMINATION , CONNECTED CYCLE DOMINATION , d -SCATTERED SET , INDUCED PATH PACKING , r -CENTER , CONNECTED r -CENTER , CONNECTED DIAMOND HITTING SET , UNWEIGHTED TSP TOUR (see [14, 20, 44]).

Subquadratic grid minor/contraction property. In order to present the meta-algorithmic potential of bidimensionality theory we need to define some property on graph classes that defines the horizon of its applicability.

Definition 4
(SQGC and SQGC) Let  be a graph class. We say that  has the subquadratic grid minor property (SQGM property for short) if there exist a constant 1≤𝑐<2 such that every graph 𝐺∈ which excludes ⊞𝑡 as a minor, for some integer t, has treewidth (𝑡𝑐). In other words, this property holds for  if Proposition 2 can be proven for a sub-quadratic f on the graphs of .

Similarly, we say that  has the subquadratic grid contraction property (SQGC property for short) if there exist a constant 1≤𝑐<2 such that every graph 𝐺∈ which excludes Γ𝑡 as a contraction, for some integer t, has treewidth (𝑡𝑐). For brevity we say that ∈𝚂𝚀𝙶𝐌(𝑐) (resp. ∈𝚂𝚀𝙶𝐂(𝑐)) if  has the SQGM (resp SQGC) property for c. Notice that 𝚂𝚀𝙶𝐂(𝑐)⊆𝚂𝚀𝙶𝐌(𝑐) for every 1≤𝑐<2.

Algorithmic Implications
The meta-algorithmic consequences of bidimensionality theory are summarised as follows. Let ∈𝚂𝚀𝙶𝐌(𝑐), for 1≤𝑐<2, and let p be a minor-bidimensional-optimization parameter.

[A]:
As it was observed in [10], the problem Π𝐩 can be solved in 2𝑜(𝑘)⋅𝑛(1) steps on , given that the computation of 𝐩 can be done in 2(𝐭𝐰(𝐺))⋅𝑛(1) steps (here 𝐭𝐰(𝐺) is the treewidth of the input graph G). This last condition can be implied by a purely meta-algorithmic condition that is based on some variant of Modal Logic [37]. There is a wealth of results that yield the last condition for various optimization problems either in classes satisfying the SQGM propety [18, 18, 19, 41, 42] or to general graphs [3, 7, 24].

[B]:
As it was shown in [26] (see also [27]), when the predicate 𝜙 can be expressed in Counting Monadic Second Order Logic (CMSOL) and 𝐩 satisfies some additional combinatorial property called separability, then the problem Π𝐩 admits a linear kernel, that is a polynomial-time algorithm that transforms (G, k) to an equivalent instance (𝐺′,𝑘′) of Π𝐩 where 𝐺′ has size (𝑘) and 𝑘′≤𝑘.

[C]:
It was proved in [22] (see also [25] and [28]), that the problem of computing 𝐩(𝐺) for 𝐺∈ admits a Efficient Polynomial Approximation Scheme (EPTAS) — that is an 𝜖-approximation algorithm running in 𝑓(1𝜖)⋅𝑛(1) steps — given that  is hereditary and 𝐩 satisfies the separability property and some reducibility property (related to CMSOL expresibility).

Fig. 2
figure 2
The applicability of bidimensionality theory. The green lines correspond the consequences [32] while the red lines correspond to the result of this paper (Color figure online)

Full size image
All above results have their counterparts for contraction-bidimensional problems with the difference that one should instead demand that ∈𝚂𝚀𝙶𝐂(𝑐). Clearly, the applicability of all above results is delimited by the SQGM/SQGC property. This is schematically depicted in Fig. 2, where the green triangles triangles indicate the applicability of minor-bidimensionality and the red triangle indicate the applicability of contraction-bidimensionality. The aforementioned Ω(𝑘2⋅log𝑘) lower bound to the function f of Proposition 2, indicates that 𝚂𝚀𝙶𝐌(𝑐) does not contain all graphs (given that 𝑐<2).

As an example we mention the well known d-Domination Set problem (for some 𝑑≥1), asking whether a graph G has a set S of at most k vertices such that every vertex in G is within distance at most d from some vertex of S. d-Domination Set is contraction bidimensional problem that satisfies the additional meta-algorithmic conditions in [A], [B], and [C]. This implies that it can be solved in 2𝑂(𝑘√)⋅𝑛 time, it admits a linear kernel, and its optimization version admits an EPTAS on every graph class that has the SQGC property.

The emerging direction of research is to detect the most general classes in 𝚂𝚀𝙶𝐌(𝑐) and 𝚂𝚀𝙶𝐂(𝑐). Concerning the SQGM property, the following result was proven in [15].

Proposition 5
For every graph H, 𝖾𝗑𝖼𝗅(𝐻)∈𝚂𝚀𝙶𝐌(1).

A graph H is an apex graph if it contains a vertex whose removal from H results to a planar graph. For the SQGC property, the following counterpart of Proposition 5 was proven in [21].

Proposition 6
For every apex graph H, 𝖾𝗑𝖼𝗅(𝐻)∈𝚂𝚀𝙶𝐂(1).

Notice that both above results concern graph classes that are defined by excluding some graph as a minor. For such graphs, Proposition 6 is indeed optimal. To see this, consider 𝐾ℎ-minor free graphs where ℎ≥6 (these graphs are not apex graphs). Such classes do not satisfy the SQGC property: take Γ𝑘, add a new vertex, and make it adjacent, with all its vertices. The resulting graph excludes Γ𝑘 as a contraction and has treewidth >𝑘.

String Graphs
An important step extending the applicability of bidimensionality theory further than H-minor free graphs, was done in [23] (see also [25]).

Definition 7
(String graphs, map graphs, and unit disk graphs) Unit disk graphs are intersections graphs of unit disks in the plane and map graphs are intersection graphs of face boundaries of planar graph embeddings. We denote by 𝑑 the set of unit disk graphs (resp. of 𝑑 map graphs) of maximum degree d.

The following was proved in [23, 25].

Proposition 8
For every positive integer d, 𝑑∈𝚂𝚀𝙶𝐌(1) and 𝑑∈𝚂𝚀𝙶𝐌(1).

Proposition 8 was further extended for intersection graphs of more general geometric objects (in 2 dimensions) in [32]. To explain the results of [32] we need to define a more general model of intersection graphs.

Definition 9
(String graphs) Let ={𝐿1,…,𝐿𝑘} be a collection of lines in the plane. We say that  is normal if there is no point belonging to more than two lines. The intersection graph 𝐺 of , is the graph whose vertex set is  and where, for each i, j where 1≤𝑖<𝑗≤𝑘, the edge {𝐿𝑖,𝐿𝑗} has multiplicity |𝐿1∩𝐿2|. We denote by 𝑑 the set containing every graph 𝐺 where  is a normal collection of lines in the plane and where each vertex of 𝐺 has edge-degree at most d. i.e., is incident to at most d edges. We call 𝑑 string graphs with edge-degree bounded by d.

It is easy to observe that 𝑑∪𝑑⊆𝑓(𝑑) for some quadratic function f. Indeed, given a graph G in 𝑑, for each unit disk of its representation in the plane, we can create a string that corresponds to the perimeter of the disk. As all the disks are of the same size, the intersection graph of the strings is homeomorphic to G. The same applies for map graphs by considering the boundaries of the faces and creating a string for each of them. Moreover, apart from the classes considered in [23], 𝑑 includes a much wider variety of classes of intersection graphs [32]. As an example, consider 𝑑,𝛼 as the class of all graphs that are intersection graphs of 𝛼-convex bodiesFootnote1 in the plane and have edge-degree at most d. In [32], it was proven that 𝑑,𝛼⊆𝑐 where c depends (polynomially) on d and 𝛼. Another interesting class from [32] is 𝐻,𝛼 containing all H-subgraph free intersection graphs of 𝛼-fatFootnote2 families of convex bodies. Notice 𝑑 can be seen as a special case of both 𝑑,𝛼 and 𝐻,𝛼. (See [36] for other examples of classes included in 𝑑.)

Fig. 3
figure 3
A graphical representation of the definition of (𝑐1,𝑐2)

Full size image
Our Contribution
Graph class extensions.

Definition 10
((𝑐1,𝑐2)-extension) Given a class of graph  and two integers 𝑐1 and 𝑐2, we define the (𝑐1,𝑐2)-extension of , denoted by (𝑐1,𝑐2), as the set containing every graph H such that there exist a graph 𝐺∈ and a graph J that satisfy 𝐺≤(𝑐1)𝐽 and 𝐻≤𝑐2𝐽 (see Fig. 3 for a visualization of this construction). Keep in mind that (𝑐1,𝑐2) and (𝑐2,𝑐1) are two different graph classes. We also denote by  the class of all planar graphs.

Using the above notation, the two combinatorial results in [32] can be rewritten as follows:

Proposition 11
Let 𝑐1≥1 and 𝑐2≥0 be two integers. If ∈𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2, then (𝑐1,𝑐2)∈𝚂𝚀𝙶𝐌(𝑐).

Proposition 12
For every 𝑑∈ℕ, 𝑑⊆(1,𝑑).

We visualise the idea of the proof of Proposition 12 by some example, depicted in Fig. 4. In Lemma 25 we use the same idea for a more general result. Fig. 4 motivates the definition of the (𝑐1,𝑐2)-extension of a graph class. Intuitively, the fact that 𝐻∈(𝑐1,𝑐2) expresses the fact that H can be seen as a “bounded” distortion of a graph in  (after a fixed number of “de-contractions” and contractions).

Fig. 4
figure 4
An example of the proof of Proposition 12. In the leftmost figure we we a collection of lines in the plane ={𝐿1,…,𝐿𝑘} whose intersection graph 𝐺 is depicted in the rightmost figure and has maximum edge degree 9 because of line c that meets other lines in 9 points, therefore 𝐺∈9. To see why 𝐺∈(1,9), one may see the leftmost figure are a planar graph 𝑃∈ where vertices of degree 1 are discarded. The vertices of this planar graph can be seen as the result of the contraction of the red edges (seen as subgraphs of diameter 1) in the graph J in the middle, i.e., 𝑃≤(1)𝐽. Finally, the intersection graph 𝐺 can be seen as a result of the contraction in J of each one of the paths, on at most 9 vertices, to a single vertex. Therefore 𝐺≤9𝐽, hence 𝐺 belongs in the (1, 9)-extension of planar graphs

Full size image
Proposition 6, combined with Proposition 11, provided the wider, so far, framework on the applicability of minor-bidimensionality: 𝚂𝚀𝙶𝐌(1) contains 𝖾𝗑𝖼𝗅(𝐻)(𝑐1,𝑐2) for every apex graph H and positive integers 𝑐1,𝑐2. As, by Proposition 6, ∈𝚂𝚀𝙶𝐂(1), Proposition 11 and Proposition 12 directly classifies in 𝚂𝚀𝙶𝐌(1) the graph class 𝑑, and therefore a large family of bounded degree intersection graphs (including 𝑑 and 𝑑). As a result of this, the applicability of bidimensionality theory for minor-bidimensional problems has been extended to much wider families (not necessarily minor-closed) of graph classes of geometric nature [32].

Our Main Result.

Definition 13
(Intersection graphs) Given a graph G and a set 𝑆⊆𝑉(𝐺) we say that S is a connected set of G if G[S] is a connected graph. We also define by (𝐺) the set of all connected subsets of V(G). Given a ⊆(𝐺), we define the intersection graph of  in G, denoted by 𝐼𝐺(), as the graph whose vertex set is , where two vertices 𝐶1 and 𝐶2 of 𝐼𝐺() are connected by an edge if 𝐶1∩𝐶2≠∅, and, moreover, the multiplicity of the edge {𝐶1,𝐶2} is equal to |𝑉(𝐶1∩𝐶2)|. Given a graph class  we define the following class of graphs

𝗂𝗇𝗍𝖾𝗋()=⋃𝐺∈{𝐼𝐺()∣⊆(𝐺)}.
In other words, 𝗂𝗇𝗍𝖾𝗋() contains all the intersection graphs of the connected vertex subsets of each of the graphs in . Given a 𝑑∈ℕ, we define 𝗂𝗇𝗍𝖾𝗋𝑑() as the set of graphs in 𝗂𝗇𝗍𝖾𝗋() that have edge-degree at most d.

However, also the degree bound is maintained, as indicated by the following easy lemma.

Lemma 14
For every 𝑑∈ℕ, 𝑑⊆𝗂𝗇𝗍𝖾𝗋𝑑()⊆𝑑′, for some 𝑑′=𝑂(𝑑2).

Proof
(Proof (sketch).) We deal with the less trivial statement that 𝗂𝗇𝗍𝖾𝗋𝑑()⊆𝑂(𝑑2). For this, let 𝐻∈𝗂𝗇𝗍𝖾𝗋𝑑() such that 𝐻=𝐼𝐺() for some collection  of connected subsets of V(G), for some 𝐺∈. We choose the planar graph G so that |𝑉(𝐺)|+|𝐸(𝐺)| is minimized. This means that for every 𝐶∈, G[C] is a tree on at most 2d vertices. If we now replace each tree G[C] by a string “surrounding” it is easy to observe that two such string cannot have more than 𝑂(𝑑2) points in common. ◻

Observe that Proposition 11 exhibits some apparent “lack of symmetry” as the assumption is “qualitatively stronger” than the conclusion. This does not permit the application of bidimensionality for contraction-bidimensional parameters on classes further than those of apex-minor free graphs. In other words, the results in [32] covered, for the case of 𝑑, the green triangles in Fig. 2 but left the red triangles open. The main result of this paper is to fill this gap by proving the following extension of Proposition 11. The main result of this paper is the following.

Theorem 15
Let 𝑐1 and 𝑐2 be two positive integers. If ∈𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2, then (𝑐1,𝑐2)∈𝚂𝚀𝙶𝐂(𝑐).

Consequences. We call a graph class monotone if it is closed under taking of subgraphs, i.e., every subgraph of a graph in  is also a graph in . A powerful consequence of Theorem 15 is the following (the proof is postponed in Sect. 3).

Theorem 16
If  is a monotone graph class, where ∈𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2, and 𝑑∈ℕ, then 𝗂𝗇𝗍𝖾𝗋𝑑()∈𝚂𝚀𝙶𝐂(𝑐).

Fig. 5
figure 5
The hierarchy of graph classes where Proposition 11 applies. 𝑑 and 𝑑 are the bounded-degree unit-disk and map graphs respectively (where the results of [23, 25] apply). 𝑑 are the bounded-degree string graphs, while 𝗂𝗇𝗍𝖾𝗋𝑑(𝖾𝗑𝖼𝗅(𝐻)) are the bounded-degree intersection graphs of connected sets of H-minor free graphs, where H is an apex graph

Full size image
Combining Proposition 6 and Theorem 16 we obtain that 𝚂𝚀𝙶𝐂(1) contains 𝗂𝗇𝗍𝖾𝗋𝑑(𝖾𝗑𝖼𝗅(𝐻)) for every apex graph H. This extends the applicability horizon of contraction-bidimensionality further than apex-minor free graphs (see Fig. 5). As a (very) special case of this, we have that 𝑑∈𝚂𝚀𝙶𝐂(1). Therefore, on 𝑑, the results described in Sect. 1.2 apply for contraction-bidimensional problems as well.

This paper is organized as follows. In Sect. 2, we give the necessary definitions and some preliminary results. We prove Theorem 16 in Sect. 3 while Sect. 4 is dedicated to the proof of Theorem 15. We should stress that this proof is quite different than the one of Proposition 11 in [32]. Finally, Sect. 5 contains some discussion and open problems.

Definitions and Preliminaries
We denote by ℕ the set of all non-negative integers. Given 𝑟,𝑞∈ℕ, we define [𝑟,𝑞]={𝑟,…,𝑞} and [𝑟]=[1,𝑟].

All graphs in this paper are undirected, loop-less, and may have multiple edges. If a graph has no multiple edges, we call it simple. Given a graph G, we denote by V(G) its vertex set and by E(G) its edge set. Let x be a vertex or an edge of a graph G and likewise for y; their distance in G, denoted by 𝐝𝐢𝐬𝐭𝐺(𝑥,𝑦), is the smallest number of vertices of a path in G that contains them both. Moreover if G is a graph and 𝑥∈𝑉(𝐺), we denote by 𝑁𝑐𝐺(𝑥), for each 𝑐∈ℕ, the set {𝑦∣𝑦∈𝑉(𝐺), 𝐝𝐢𝐬𝐭𝐺(𝑥,𝑦)≤𝑐+1}. For any set of vertices 𝑆⊆𝑉(𝐺), we denote by G[S] the subgraph of G induced by the vertices from S. If G[S] is connected, then we say that S is a connected vertex set of G. We define the diameter of a connected subset S as the maximum pairwise distance between any two vertices of S. The edge-degree of a vertex 𝑣∈𝑉(𝐺) is the number of edges that are incident to it (multi-edges contribute with their multiplicity to this number).

Fig. 6
figure 6
The graph Γ̂ 9

Full size image
Definition 17
(Grids) The (𝑘×𝑘)-grid, denoted by ⊞𝑘, is the graph whose vertex set is [0,𝑘−1]2 and two vertices (i, j) and (𝑖′,𝑗′) are adjacent if |𝑖−𝑖′|+|𝑗−𝑗′|=1. For 𝑘≥3, the graph Γ𝑘 (resp. Γ̂ 𝑘), is defined if we add in ⊞𝑘 all the edges in {{(𝑖+1,𝑗),(𝑖,𝑗+1)}∣(𝑖,𝑗)∈[0,𝑘−2]2} as well as all the edges between (𝑘−1,𝑘−1) (resp. a new vertex a) and the vertices in {(𝑖,𝑗)∣[0,𝑘−1]2∖[1,𝑘−2]2} that have not been added already. For an example of Γ𝑘 (resp. Γ̂ 𝑘), see Fig. 1 (resp. Fig. 6). Notice that Γ𝑘 is a triangulation of ⊞𝑘. In each of these graphs we denote the vertices of the underlying grid by their coordinates (𝑖,𝑗)∈[0,𝑘−1]2 agreeing that the upper-left corner (i.e., the unique vertex of degree 3) is the vertex (0, 0). Γ̂ 𝑘 has two vertices of degree 3, the top left and the bottom right of the grid part. We call Γ𝑘 the uniformly triangulated grid and Γ̂ 𝑘 the extended uniformly triangulated grid.

Definition 18
(Treewidth) A tree-decomposition of a graph G, is a pair (𝑇,), where T is a tree and ={𝑋𝑡: 𝑡∈𝑉(𝑇)} is a family of subsets of V(G), called bags, such that the following three properties are satisfied:

∙ ⋃𝑡∈𝑉(𝑇)𝑋𝑡=𝑉(𝐺),

∙ for every edge 𝑒∈𝐸(𝐺) there exists 𝑡∈𝑉(𝑇) such that 𝑒⊆𝑋𝑡, and

∙ ∀𝑣∈𝑉(𝐺), the set 𝑇𝑣={𝑡∈𝑉(𝑇)∣𝑣∈𝑋𝑡} is a connected vertex set of T.

The width of a tree-decomposition is the cardinality of the maximum size bag minus 1 and the treewidth of a graph G is the minimum width over all the tree-decompositions of G. We denote the treewidth of G by 𝗍𝗐(𝐺).

Lemma 19
Let G be a graph and let H be a c-size contraction of G. Then 𝗍𝗐(𝐺)≤(𝑐+1)⋅(𝗍𝗐(𝐻)+1)−1.

Proof
By definition, since H is a c-size contraction of G, there is a mapping between each vertex of H and a connected set of at most c edges in G, so that by contracting these edge sets we obtain H from G. The endpoints of these edges form disjoint connected sets in G, implying a partition of the vertices of G into connected sets {𝑉𝑥∣𝑥∈𝑉(𝐻)}, where |𝑉𝑥|≤𝑐+1 for any vertex 𝑥∈𝑉(𝐻).

Consider now a tree decomposition (𝑇,) of H. We claim that the pair (𝑇,′), where 𝑋′𝑡:=⋃𝑥∈𝑋𝑡𝑉𝑥 for 𝑡∈𝑇 is a tree decomposition of G. Clearly all vertices of G are included in some bag, since all vertices of H did. Every edge of G with both endpoints in the same part of the partition is in a bag, as each of these vertex sets is placed as a whole in the same bag. If e is an edge of G with endpoints in different parts of the partition, say 𝑉𝑥 and 𝑉𝑦, then this implies that {𝑥,𝑦}∈𝐸(𝐻). Thus, there is a node t of T for which 𝑥,𝑦∈𝑋𝑡 and therefore 𝑒⊆𝑋′𝑡. Moreover, the continuity property remains unaffected, since for any vertex 𝑥∈𝑉(𝐻) each vertex in 𝑉𝑥 induces the same subtree in T that x did. ◻

In Table 1 we present all the notation that we use in this paper.

Table 1 Graphs, graph classes, and functions of the paper
Full size table
Proof of Theorem 16
We start with the following useful property of the contraction relation. We use 𝛿(𝐺) for the minimum number of edges that are incident to a vertex of the graph G. Given a vertex v in G incident to exactly two edges 𝑒1={𝑣,𝑥} and 𝑒2={𝑣,𝑦}, the dissolution of v in G is the operation of removing 𝑒1 and 𝑒2 from G and then we add the edge {𝑥,𝑦}. If the graph H occurs from G after applying some (possibly empty) sequence of vertex dissolutions, then we say that H is a dissolution of G. We also say that H is a topological minor of G if H the dissolution of some subgraph of G.

Lemma 20
Let Q be a graph where 𝛿(𝑄)≥3 and let H, G be graphs where H is a dissolution of G. If 𝑄≤𝐺, then 𝑄≤𝐻.

Proof
As 𝑄≤𝐺 then there exist 𝜎:𝑉(𝐺)→𝑉(𝑄) such that for all 𝑥∈𝑉(𝑄), 𝐺[𝜎−1(𝑥)] is a non-empty graph and for every 𝑥,𝑦∈𝑉(𝑄), {𝑥,𝑦}∈𝐸(𝑄)⟺𝐺[𝜎−1(𝑥)∪𝜎−1(𝑦)] is connected.

Let v be a vertex in G incident to exactly two edges 𝑒1={𝑣,𝑣′} and 𝑒2={𝑣,𝑣″}, and let 𝐺′ be the graph obtained from G after the dissolution of v. Let 𝜎′:𝑉(𝐺′)→𝑉(𝑄) such that for all 𝑧∈𝑉(𝐺′), 𝜎′(𝑧)=𝜎(𝑧). As the dissolution maintains connectivity, we have that for every 𝑥,𝑦∈𝑉(𝑄), {𝑥,𝑦}∈𝐸(𝑄)⟺𝐺[𝜎′−1(𝑥)∪𝜎′−1(𝑦)] is connected. Moreover, as 𝛿(𝑄)≥3, we know that for each 𝑥∈𝑉(𝑄), there exists 𝑧∈𝜎−1(𝑥) such that z has edge degree at least 3. In particular we know that z is different from v. So we have that 𝐺[𝜎′−1(𝑥)] is a non-empty graph. Thus 𝑄≤𝐺′. The lemma follows by iterating this argument. ◻

Definition 21
(The function bcg) Given a graph G, we define 𝐛𝐜𝐠(𝐺) as the maximum k for which G can be contracted to the uniformly triangulated grid Γ𝑘.

Notice that 𝐛𝐜𝐠 is a contraction-closed parameter, i.e., if 𝐻≤𝐺, then 𝐛𝐜𝐠(𝐻)≤𝐛𝐜𝐠(𝐺).

Lemma 22
Let H and G be two graphs. If H is a dissolution of G, then 𝐛𝐜𝐠(𝐻)=𝐛𝐜𝐠(𝐺).

Proof
The fact that 𝐛𝐜𝐠(𝐻)≤𝐛𝐜𝐠(𝐺) follows from the fact that H is also a contraction of G and taking into account the contraction-closedness of 𝐛𝐜𝐠. The fact that 𝐛𝐜𝐠(𝐺)≤𝐛𝐜𝐠(𝐻) follows by taking into account that 𝛿(Γ𝑘)≥3 and applying inductively Lemma 20 to the vertices of degee 2 in G that need to be dissolved in order to transform G to H. ◻

Definition 23
Given a graph class , we define the dissolution closure of  as the graph class 𝖽𝗂𝗌𝗌() containing all the dissolutions of the graphs in .

We observe the following.

Lemma 24
If ∈𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2, then 𝖽𝗂𝗌𝗌()∈𝚂𝚀𝙶𝐂(𝑐).

Proof
Suppose that ∈𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2, wich implies that

∀𝐺∈ 𝗍𝗐(𝐺)≤𝜆⋅(𝐛𝐜𝐠(𝐺))𝑐.
(1)
Let 𝐻∈𝖽𝗂𝗌𝗌() and let 𝐺∈ such that H is a dissolution of G. By Lemma 22, 𝐛𝐜𝐠(𝐻)=𝐛𝐜𝐠(𝐺) and from (1), 𝗍𝗐(𝐺)≤𝜆(𝐛𝐜𝐠(𝐻))𝑐. As H is a minor of G, we have that 𝗍𝗐(𝐻)≤𝜆(𝐛𝐜𝐠(𝐻))𝑐 and the lemma follows.

The next lemma uses as a departure point the same idea as the one of proof of Proposition 12, visualized by the example of Fig. 4.

Lemma 25
If  is a graph class that is topological minor closed, then 𝗂𝗇𝗍𝖾𝗋𝑑()⊆(𝑑+1,𝑑−1).

Proof
Let H be a graph on h vertices in 𝗂𝗇𝗍𝖾𝗋𝑑(), for some 𝑑∈ℕ. This means that there is a graph G in  such that we can see the vertices of H as a set ={𝐶1,…,𝐶ℎ} of connected subsets of G and each multi-edge 𝑒={𝐶𝑖,𝐶𝑗} of H corresponds to two mutually intersecting subsets of  and the multiplicity of e is |𝐶𝑖∩𝐶𝑗|. For every {𝑖,𝑗}∈(ℎ2), we set 𝑉𝑖,𝑗=𝐶𝑖∩𝐶𝑗, 𝑚𝑖,𝑗=|𝐶𝑖∩𝐶𝑗|, and we assume that 𝑒𝑖,𝑗={𝐶𝑖,𝐶𝑗} is a multi-edge of H of multiplicity 𝑚𝑖,𝑗 (if this edge does not exists in H, then the multiplicity of 𝑒𝑖,𝑗 is 0).

We define 𝑉𝑖=⋃𝑗∈[ℎ]𝑉𝑖,𝑗, for every 𝑖∈[ℎ] and also set 𝑉=⋃𝑖∈[ℎ]𝑉𝑖. Notice that, for each 𝑖∈[ℎ], |𝑉𝑖| is upper bounded by the edge-degree, in H, of the vertex 𝐶𝑖, therefore, |𝑉𝑖|≤𝑑 for each 𝑖∈[ℎ]. Also, a vertex in V cannot belong in more that 𝑑+1 distinct 𝐶𝑖’s as, otherwise H would contain a clique with at least 𝑑+2 vertices. As 𝐻∈𝗂𝗇𝗍𝖾𝗋𝑑(), this is not possible.

Recall that, for each 𝑖∈[ℎ], 𝑉𝑖 is a subset of 𝐶𝑖 and let 𝑇𝑖 be a minimum-size tree of 𝐺[𝐶𝑖] containing the vertices of 𝑉𝑖. We partition the set of vertices of 𝑇𝑖 into three sets 𝑉𝑖,𝑉⎯⎯⎯⎯⎯𝑖,𝐷𝑖 where among the vertices in 𝑉(𝑇𝑖)∖𝑉𝑖, 𝐷𝑖 are the vertices of degree 2 and 𝑉⎯⎯⎯⎯⎯𝑖 are the rest. By minimality, the leaves of 𝑇𝑖 belong in 𝑉𝑖. Moreover, there is no vertex in 𝑉⎯⎯⎯⎯⎯𝑖 that belongs to some other 𝑉⎯⎯⎯⎯⎯𝑖′, 𝑖∈[ℎ]∖{𝑖}. We denote by 𝑇̂ 𝑖 the tree obtained from 𝑇𝑖 if we dissolve in 𝑇𝑖 all vertices of 𝐷𝑖. That way we can still partition the vertices of each 𝑇̂ 𝑖, 𝑖∈[ℎ], into 𝑉𝑖 and 𝑉⎯⎯⎯⎯⎯𝑖. Also, it is easy to see that 𝑇̂ 𝑖 has diameter at most |𝑉𝑖|−1≤𝑑−1.

We define the graph 𝐺′:=⋃𝑖∈[ℎ]𝑇̂ 𝑖. Notice that 𝐺′ is obtained from ⋃𝑖∈[ℎ]𝑇𝑖 (that is a subgraph of G) after we dissolve all vertices in ⋃𝑖∈[ℎ]𝐷𝑖. Therefore 𝐺′ is a topological minor of G, thus 𝐺′∈. We consider the collection ={𝑇̂ 1,…,𝑇̂ ℎ} of connected subgraphs of 𝐺′.

We define the graph J to be the disjoint union of the h trees in  in which, for each 𝑥∈𝑉, we add a clique between all the copies of x. Notice that each added clique has size at least 2 and at most 𝑑+1.

Observe now that 𝐺′≤(𝑑+1)𝐽, as 𝐺′ is obtained after contracting in J the aforementioned pairwise disjoint cliques. Moreover, 𝐻≤𝑑−1𝐽 as H is obtained after we contract in J each 𝑇̂ 𝑖 (of diameter ≤𝑑−1) to a single vertex. As 𝐺′∈, we conclude that 𝐻∈(𝑑+1,𝑑−1) as required. ◻

We are now ready to prove Theorem 16.

Proof of Theorem 16
Let  be a monotone graph class in 𝚂𝚀𝙶𝐂(𝑐) for some 1≤𝑐<2 and let =𝖽𝗂𝗌𝗌(). From Lemma 24, ∈𝚂𝚀𝙶𝐂(𝑐) and by the monotonicity of , we have that 𝖽𝗂𝗌𝗌() is closed under taking of topological minors. Therefore, from Lemma 25, 𝗂𝗇𝗍𝖾𝗋𝑑()⊆(𝑑+1,𝑑−1) and from Theorem 15, 𝗂𝗇𝗍𝖾𝗋𝑑()∈𝚂𝚀𝙶𝐂(𝑐). The result follows because ⊆, as this implies that 𝗂𝗇𝗍𝖾𝗋𝑑()⊆𝗂𝗇𝗍𝖾𝗋𝑑(). ◻

Proof of Theorem 15
Let H and G be graphs and c be a non-negative integer. If 𝐻≤𝑐𝜎𝐺, then we say that H is a 𝜎-contraction of G, and denote this by 𝐻≤𝜎𝐺.

Before we proceed the the proof of Theorem 15 we make first the following three observations. (In all statements, we assume that G and H are two graphs and 𝜎:𝑉(𝐺)→𝑉(𝐻) such that H is a 𝜎-contraction of G.)

Observation 26
Let S be a connected subset of V(H). Then the set ⋃𝑥∈𝑆𝜎−1(𝑥) is connected in G.

Observation 27
Let 𝑆1⊆𝑆2⊆𝑉(𝐻). Then 𝜎−1(𝑆1)⊆𝜎−1(𝑆2)⊆𝑉(𝐺).

Observation 28
Let S be a connected subset of V(G). Then the diameter of 𝜎(𝑆) in H is at most the diameter of S in G.

Given a graph G and 𝑆1,𝑆2⊆𝑉(𝐺) we say that 𝑆1 and 𝑆2 touch if either 𝑆1∩𝑆2≠∅ or there is an edge of G with one endpoint in 𝑆1 and the other in 𝑆2.

We say that a collection  of paths of a graph is internally disjoint if none of the internal vertices, i.e., none of the vertex of degree 2, of some path in  is a vertex of some other path in . Let  be a collection of subsets of V(G). We say that  is a connected packing of G if its elements are connected and pairwise disjoint. If additionally  is a partition of V(G), then we say that  is a connected partition of G and if, additionally, all its elements have diameter bounded by some integer c, then we say that  is a c-diameter partition of G.

Λ-State Configurations
Definition 29
(Λ-state configurations) Let G be a graph. Let Λ=(,) be a graph whose vertex set is a connected packing of G, i.e., its vertices are connected subsets of V(G). A Λ-state configuration of a graph G is a quadruple =(,𝛼,,𝛽) where

1.
 is a connected packing of G,

2.
𝛼 is a bijection from  to  such that for every 𝑊∈, 𝑊⊆𝛼(𝑊),

3.
 is a collection of internally disjoint paths of G, and

4.
𝛽 is a bijection from  to  such that if {𝑊1,𝑊2}∈ then the endpoints of 𝛽({𝑊1,𝑊2}) are in 𝑊1 and 𝑊2 and 𝑉(𝛽({𝑊1,𝑊2}))⊆𝛼(𝑊1)∪𝛼(𝑊2).

Definition 30
(States, freeways, clouds, and coverage) A Λ-state configuration =(,𝛼,,𝛽) of G is complete if  is a partition of V(G). We refer to the elements of  as the states of  and to the elements of  as the freeways of . We define 𝗂𝗇𝖽𝖾𝗉()=𝑉(𝐺)∖⋃𝑋∈𝑋. Note that if  is a Λ-state configuration of G,  is complete if and only if 𝗂𝗇𝖽𝖾𝗉()=∅.

Let  be a c-diameter partition of G. We refer to the sets of  as the -clouds of G. We define 𝖿𝗋𝗈𝗇𝗍() as the set of all -clouds of G that are not subsets of some 𝑋∈. Given a -cloud C and a state X of  we say that C shadows X if 𝐶∩𝑋≠∅. The coverage 𝖼𝗈𝗏(𝐶) of an -cloud C of G is the number of states of  that are shadowed by C. A Λ-state configuration =(,𝛼,,𝛽) of G is -normal if its satisfies the following conditions:

(A)
If a -cloud C intersects some 𝑊∈, then 𝐶⊆𝛼(𝑊).

(B)
If a -cloud over  intersects the vertex set of at least two freeways of , then it shadows at most one state of .

We define 𝖼𝗈𝗌𝗍()=∑𝐶∈𝖿𝗋𝗈𝗇𝗍()𝖼𝗈𝗏(𝐶). Given 𝑆1⊆𝑆2⊆𝑉(𝐺) where 𝑆1 is connected, we define 𝖼𝖼𝐺(𝑆2,𝑆1) as the (unique) connected component of 𝐺[𝑆2] that contains 𝑆1.

Triangulated Grids Inside Triangulated Grids
The next lemma is the main combinatorial engine of our results. We assume that 𝐻≤𝑐𝐺 and Γ𝑘≤𝐺. Here H should be seen as the result of a “shrink” of G in the sense that G can be contracted to H so that each vertex of H is created after a bounded number of contractions. The lemma states that if G can be contracted to a uniformly triangulated grid, then H, as a “shrunk version” of G, can also be contracted to a uniformly triangulated grid that is no less than linearly smaller.

The proof strategy views the graph G as being contracted into a uniformly triangulated grid Γ𝑘 (see Fig. 7), we choose a scattered set of “capitals” in it (the black vertices in Fig. 7). Then we set up a “conquest” procedure where each capital is trying to expand to a country. This procedure has three phases. The first phase is the expansion face where each country tries to incorporate unconquested territories around it (the limits of this expansion is depicted by the red cycles in Fig. 7). The second phase is the clash face, where different countries are fighting for disputed territories. Finally, the third phase is the annex phase, where each country naturally incorporates remaining enclaves. The end of this war creates a set of countries occupying the whole G that, when contracted, give rise to a uniformly triangulated grid Γ𝑘′, where 𝑘′=Ω(𝑘).

Lemma 31
Let G and H be graphs and c, k be non-negative integers such that 𝐻≤𝑐𝐺 and Γ𝑘≤𝐺. Then Γ𝑘′≤𝐻 where 𝑘′=⌊𝑘−12𝑐+1⌋−1.

Proof
Let 𝑘∗=1+(2𝑐+1)⋅(𝑘′+1) and observe that 𝑘∗≤𝑘, therefore Γ𝑘∗≤Γ𝑘≤𝐺. For simplicity we use Γ=Γ𝑘∗. Let 𝜙:𝑉(𝐺)→𝑉(𝐻) such that 𝐻≤𝑐𝜙𝐺 and let 𝜎:𝑉(𝐺)→𝑉(Γ) such that Γ≤𝜎𝐺. We define ={𝜙−1(𝑎)∣𝑎∈𝑉(𝐻)}. Notice that  is a c-diameter partition of G.

For each (𝑖,𝑗)∈[[0,𝑘′+1]]2, we define 𝑏𝑖,𝑗 to be the vertex of Γ with coordinate (𝑖(2𝑐+1),𝑗(2𝑐+1)). We set 𝑄in={𝑏𝑖,𝑗∣(𝑖,𝑗)∈[[1,𝑘′]]2} and 𝑄out={𝑏𝑖,𝑗∣(𝑖,𝑗)∈[[0,𝑘′+1]]2}∖𝑄in. Let also 𝑄=𝑄in∪{𝑏out} were 𝑏out is a new element that does not belong in 𝑄in. Here 𝑏out can be seen as a vertex that “represents” all vertices in 𝑄out.

Let q, p be two different elements of Q. We say that q and p are linked if they both belong in 𝑄in and their distance in Γ is 2𝑐+1 or one of them is 𝑏out and the other is 𝑏𝑖,𝑗 where 𝑖∈{1,𝑘′} or 𝑗∈{1,𝑘′}. ◻

Fig. 7
figure 7
A visualization of the proof of Lemma 31. In this whole graph Γ𝑘, we initialize our reaserch of Γ̂ 𝑘′ such that every internal red hexagon will become a vertex of Γ̂ 𝑘′ and correspond to a state and the border, also circle by a red line will become the vertex 𝑏out. The blue edges correspond to the freeways. Red cycles correspond to the boundaries of the starting countries. Blue paths between big-black vertices are the freeways. Big-black vertices are the capitals (Color figure online)

Full size image
For each 𝑞∈𝑄in, we define 𝑊𝑞=𝜎−1(𝑞). 𝑊𝑞 is connected by the definition of 𝜎. In case 𝑞=𝑏out we define 𝑊𝑞=⋃𝑞′∈𝑄out𝜎−1(𝑞′). Note that as 𝑄out is a connected set of Γ, then, by Observation 26, 𝑊𝑏out is connected in G. We also define ={𝑊𝑞∣𝑞∈𝑄}. Given some 𝑞∈𝑄 we call 𝑊𝑞 the q-capital of G and a subset S of V(G) is a capital of G if it is the q-capital for some 𝑞∈𝑄. Notice that  is a connected packing of V(G).

Let 𝑞∈𝑄. If 𝑞∈𝑄in then we set 𝑁𝑞=𝑁𝑐Γ(𝑞). If 𝑞=𝑏out, then we set 𝑁𝑞=⋃𝑞′∈𝑄out𝑁𝑐Γ(𝑞′). Note that for every 𝑞∈𝑄, 𝑁𝑞⊆𝑉(Γ). For every 𝑞∈𝑄, we define 𝑋𝑞=𝜎−1(𝑁𝑞). Note that 𝑋𝑞⊆𝑉(𝐺). We also set ={𝑋𝑞∣𝑞∈𝑄}. Let q and p we two linked elements of Q. If both q and p belong to 𝑄in, and therefore are vertices of Γ, then we define 𝑍𝑝,𝑞 as the unique shortest path between them in Γ. If 𝑝=𝑏out and 𝑞∈𝑄in, then we know that 𝑞=𝑏𝑖,𝑗 where 𝑖∈{1,𝑘′} or 𝑗∈{1,𝑘′}. In this case we define 𝑍𝑝,𝑞 as any shortest path in Γ between 𝑏𝑖,𝑗 and the vertices in 𝑄out. In both cases, we define 𝑃𝑝,𝑞 by picking some path between 𝑊𝑝 and 𝑊𝑞 in 𝐺[𝜎−1(𝑉(𝑍𝑝,𝑞))] such that |𝑉(𝑃𝑝,𝑞)∩𝑊𝑞|=1 and |𝑉(𝑃𝑝,𝑞)∩𝑊𝑝|=1.

Let ={{𝑊𝑝,𝑊𝑞}∣ p and q are linked} and let Λ=(,). Notice that Λ is isomorphic to Γ̂ 𝑘′ and consider the isomorphism that correspond each vertex 𝑞=𝑏𝑖,𝑗, 𝑖,𝑗∈[[1,𝑘′]]2 to the vertex with coordinates (i, j). Moreover 𝑏out corresponds to the apex vertex of Γ̂ 𝑘′.

Let 𝛼:→ such that for every 𝑞∈𝑄, 𝛼(𝑊𝑞)=𝑋𝑞. Let also ={𝑃𝑝,𝑞∣𝑝,𝑞∈𝑄, p and q are linked}. We define 𝛽:→ such that if q and p are linked, then 𝛽(𝑊𝑞,𝑊𝑝)=𝑃𝑝,𝑞. We use notation =(,𝛼,,𝛽).

Claim 32
 is an -normal Λ-state configuration of G.

Proof of Claim 32
We first see that  is a Λ-state configuration of G. Condition 1 follows by the definition of 𝑋𝑞 and Observation 26. Condition 2 follows directly by the definitions of 𝑊𝑞 and 𝑋𝑞. For Condition 3, we first observe that, by the construction of Γ and the definition of 𝑍𝑝,𝑞, for any two pairs p, q and 𝑝′,𝑞′ of pairwise linked elements of Q, the paths 𝑍𝑝,𝑞 and 𝑍𝑝′,𝑞′ are internally vertex disjoined paths of Γ. It implies that 𝑃𝑝,𝑞 and 𝑃𝑝′,𝑞′ can intersect each other only on the vertices of 𝑊𝑝∪𝑊𝑞∪𝑊𝑝′∪𝑊𝑞′. But 𝑃𝑝,𝑞 (resp. 𝑃𝑝′,𝑞′), by construction contains only two vertices of 𝑊𝑝∪𝑊𝑞∪𝑊𝑝′∪𝑊𝑞′ that are the extremities of 𝑃𝑝,𝑞, (resp. 𝑃𝑝′,𝑞′). So 𝑃𝑝,𝑞 and 𝑃𝑝′,𝑞′ are internally vertex disjoined, as required. For Condition 4, assume that {𝑊𝑝,𝑊𝑞}∈. The fact that the endpoints of 𝛽({𝑊𝑝,𝑊𝑞}) are in 𝑊𝑝 and 𝑊𝑞 follows directly by the definition of 𝛽({𝑊𝑝,𝑊𝑞})=𝑃𝑝,𝑞. It remains to prove that 𝑉(𝛽({𝑊𝑝,𝑊𝑞}))⊆𝛼(𝑊𝑝)∪𝛼(𝑊𝑞) or equivalently, that 𝑉(𝑃𝑝,𝑞)⊆𝑋𝑝∪𝑋𝑞. Observe that, if both 𝑝,𝑞∈𝑄in, then every vertex in the shortest path 𝑍𝑝,𝑞 should be within distance c from either p or q. Similarly, if 𝑝∈𝑄in and 𝑞=𝑏out, then every vertex in the shortest path 𝑍𝑝,𝑞 should be within distance c from either p or some vertex in 𝑄out. So for every 𝑝,𝑞∈𝑄, with 𝑝≠𝑞, 𝑍𝑝,𝑞⊆𝑁𝑝∪𝑁𝑞. By Observation 27, every vertex in 𝜎−1(𝑉(𝑍𝑝,𝑞)) belongs to 𝑋𝑝∪𝑋𝑞 and the required follows as 𝑉(𝑃𝑝,𝑞)⊆𝜎−1(𝑉(𝑍𝑝,𝑞)). This completes the proof that  is a Λ-state configuration of G.

We now prove that  is -normal. Recall that  be a c-diameter partition of G. Let C be a -cloud and let 𝐶′=𝜎(𝐶) be a subset of 𝑉(Γ). As C is of diameter at most c, then, from Observation 28, 𝐶′ is also of diameter at most c. Notice that if C intersects some member W of , then 𝐶′=𝜎(𝐶) also intersects 𝜎(𝑊), therefore 𝐶′ intersects some element of 𝑄in∪𝑄out. Assume 𝐶′ contains 𝑝∈𝑄in∪𝑄out, then 𝐶′⊆𝑁𝑝. From Observation 26, 𝐶⊆𝑋𝑝=𝛼(𝑊𝑝), therefore C satisfies Condition (A).

By construction, the distance in Γ between two elements of 𝑄in is either 2𝑐+1 or at least 4𝑐+2. The distance in Γ between on elements of 𝑄in and any element of 𝑄out is a multiple of 2𝑐+1. This implies that if 𝑝,𝑞∈𝑄, 𝑝≠𝑞, 𝑁𝑝∩𝐶′≠∅, and 𝑁𝑞∩𝐶′≠∅, then p and q are linked.

By construction, if p and q are linked, then for every 𝑟∈𝑄 and every 𝑢∈𝑍𝑝,𝑞, 𝐝𝐢𝐬𝐭Γ(𝑟,𝑢)≥min(𝐝𝐢𝐬𝐭Γ(𝑟,𝑝),𝐝𝐢𝐬𝐭𝐺(𝑟,𝑞)), where for every 𝑥∈𝑄in, the quantity 𝐝𝐢𝐬𝐭Γ(𝑥,𝑏out) is interpreted as min{𝐝𝐢𝐬𝐭Γ(𝑥,𝑞′)∣𝑞′∈𝑄out}. This implies that if 𝐶′ intersects 𝑍𝑝,𝑞 for some 𝑝,𝑞∈𝑄, then for every 𝑟∈𝑄∖{𝑝,𝑞}, then 𝐶′ does not intersect 𝑁𝑟. We will use this fact in the next paragraph towards completing the proof of Condition (B).

We now claim that if 𝐶′ intersects two distinct paths in {𝑍𝑝,𝑞∣(𝑝,𝑞)∈𝑄2,𝑝≠𝑞}, then 𝐶′ intersects at most one of the sets in {𝑁𝑞′∣𝑞′∈𝑄}. Let 𝑍𝑝,𝑞 and 𝑍𝑝′,𝑞′ be two distinct paths intersected by 𝐶′. We argue first that 𝑝,𝑞,𝑝′,𝑞′ cannot be all different. Indeed, if this is the case, as 𝐶′ intersects 𝑍𝑝,𝑞 then 𝐶′ cannot intersect 𝑁𝑝′ or 𝑁𝑞′ as 𝑝′,𝑞′∉{𝑝,𝑞}. As 𝑍𝑝′,𝑞′⊆𝑁𝑞′∪𝑁𝑝′, we have a contradiction. Assume now that 𝑝=𝑝′ and 𝑞≠𝑞′. As 𝐶′ intersects 𝑍𝑝,𝑞, then it does not intersect 𝑁𝑟 for any 𝑟∈𝑄∖{𝑝,𝑞}, and as it intersects 𝑍𝑝,𝑞′, then it does not intersect 𝑁𝑟 for any 𝑟∈𝑄∖{𝑝,𝑞′}. We obtain that 𝐶′ intersects at most one of the sets in {𝑁𝑟∣𝑟∈𝑄} that is 𝑁𝑝. By definition of the states, we obtain that C shadows at most one state that is 𝑋𝑝. That completes the proof of condition (B). ◻

We define bellow three ways to transform a Λ-state configuration of G. In each of them, =(,𝛼,,𝛽) is an -normal Λ-state configuration of G and C is an -cloud in 𝖿𝗋𝗈𝗇𝗍().

1.
The expansion procedure applies when C intersects at least two freeways of . Let X be the state of  shadowed by C (this state is unique because of property (B) of -normality). We define (′,𝛼′,′,𝛽′)=𝖾𝗑𝗉𝖺𝗇𝖽(,𝐶) such that

′=∖{𝑋}∪{𝑋∪𝐶},

for each 𝑊∈, 𝛼′(𝑊)=𝑋′ where 𝑋′ is the unique set of ′ such that 𝑊⊆𝑋′,

′=, and 𝛽′=𝛽.

2.
The clash procedure applies when C intersects exactly one freeway P of . Let 𝑋1,𝑋2 be the two states of  that intersect this freeway. Notice that 𝑃=𝛽(𝛼−1(𝑋1),𝛼−1(𝑋2)), as it is the only freeway with vertices in 𝑋1 and 𝑋2. Assume that (𝐶∩𝑉(𝑃))∩𝑋1≠∅ (if, not, then swap the roles of 𝑋1 and 𝑋2). We define (′,𝛼′,′,𝛽′)=𝖼𝗅𝖺𝗌𝗁(,𝐶) as follows:

′={𝑋1∪𝐶}∪⋃𝑋∈∖{𝑋1}{𝖼𝖼𝐺(𝑋∖𝐶,𝛼−1(𝑋))} (notice that 𝛼−1(𝑋)⊆𝑋∖𝐶, for every 𝑋∈, because of property (A) of -normality),

for each 𝑊∈, 𝛼′(𝑊)=𝑋′ where 𝑋′ is the unique set of ′ such that 𝑊⊆𝑋′,

′=∖{𝑃}∪{𝑃′}, where 𝑃′=𝑃1∪𝑃∗∪𝑃2 is defined as follows: let 𝑠𝑖 be the first vertex of C that we meet while traversing P when starting from its endpoint that belongs in 𝑊𝑖 and let 𝑃𝑖 the subpath of P that we traversed that way, for 𝑖∈{1,2}. We define 𝑃∗ by taking any path between 𝑠1 and 𝑠2 inside G[C], and

𝛽′=𝛽∖{({𝑊1,𝑊2},𝑃)}∪{{𝑊1,𝑊2},𝑃′}.

3:
The annex procedure applies when C intersects no freeway of  and touches some country 𝑋∈. We define (′,𝛼′,′,𝛽′)=𝖺𝗇𝖾𝗑(,𝐶) such that

′={𝑋1∪𝐶}∪⋃𝑋∈∖{𝑋1}{𝖼𝖼𝐺(𝑋∖𝐶,𝛼−1(𝑋))} (notice that 𝛼−1(𝑋)⊆𝑋∖𝐶, for every 𝑋∈, because of property (A) of -normality),

for each 𝑊∈, 𝛼′(𝑊)=𝑋′ where 𝑋′ is the unique set of ′ such that 𝑊⊆𝑋′,

′=, and 𝛽′=𝛽.

Claim 33
Let =(,𝛼,,𝛽) be an -normal Λ-state configuration of G, and 𝐶∈𝖿𝗋𝗈𝗇𝗍(). Let ′=𝖺𝖼𝗍𝗂𝗈𝗇(,𝐶) where 𝖺𝖼𝗍𝗂𝗈𝗇∈{𝖾𝗑𝗉𝖺𝗇𝖽,𝖼𝗅𝖺𝗌𝗁,𝖺𝗇𝖾𝗑}. Then ′ is an -normal Λ-state configuration of G where 𝖼𝗈𝗌𝗍(′,)≤𝖼𝗈𝗌𝗍(,). Moreover, if 𝖼𝗈𝗏(𝐶)≥1, then 𝖼𝗈𝗌𝗍(′,)<𝖼𝗈𝗌𝗍(,) and if 𝖼𝗈𝗏(𝐶)=0 (which may be the case only when 𝖺𝖼𝗍𝗂𝗈𝗇=𝖺𝗇𝖾𝗑), then |𝗂𝗇𝖽𝖾𝗉(′)|<|𝗂𝗇𝖽𝖾𝗉()|.

Proof of Claim 33
We first show that ′ is an -normal Λ-state configuration of G. In each case, the construction of ′ makes sure that ′ is a connected packing of G and that the countries are updated in a way that their capitals remain inside them. Moreover, the highways are updated so to remain internally disjoint and inside the corresponding updated countries. We next prove that ′ is -normal. Condition (A) is invariant as the cloud we take into consideration cannot intersect any 𝑊∈ and a cloud intersecting some capital 𝑊∈ cannot be disconnected from W. It now remains to prove condition (B). Because of Condition 4 of the definition of a Λ-state configuration, if a cloud C intersects a freeway, then it shadows at least one state. Now assume that a cloud C intersects two freeways in ′, then by construction of ′, it also intersects at least the two same freeways in . This along with the fact that  satisfies Condition (B), implies that ′ satisfies condition (B) as well, as required.

Notice that, for any cloud 𝐶∗∈∖{𝐶}, if 𝐶∗ does not intersect a state X in , then the corresponding state 𝑋′ in ′, i.e., the state 𝑋′=𝛼′(𝛼−1(𝑋)), also does not intersect 𝐶∗. This means that 𝖼𝗈𝗌𝗍(′,)≤𝖼𝗈𝗌𝗍(,).

Notice now that by the construction of ′, C is not in 𝖿𝗋𝗈𝗇𝗍(′). In the case where 𝖼𝗈𝗏(𝐶)≥1 we have that 𝖼𝗈𝗌𝗍(′,)<𝖼𝗈𝗌𝗍(,).

Notice that the case where 𝖼𝗈𝗏(𝐶)=0 happens only when 𝖺𝖼𝗍𝗂𝗈𝗇=𝖺𝗇𝖾𝗑 and there is an edge with one endpoint in C and one in some country 𝑋∗ of  that does not intersect C. Moreover 𝖼𝖼𝐺(𝑋∖𝐶,𝛼−1(𝑋))=𝑋, for every state X of . This implies that 𝗂𝗇𝖽𝖾𝗉(′)⊆𝗂𝗇𝖽𝖾𝗉(). As 𝐶⊆𝗂𝗇𝖽𝖾𝗉() and 𝐶∩𝗂𝗇𝖽𝖾𝗉(′)=∅, we conclude that |𝗂𝗇𝖽𝖾𝗉(′)|<|𝗂𝗇𝖽𝖾𝗉()| as required. ◻

To continue with the proof of Lemma 31 we explain how to transform the -normal Λ-state configuration  of G to a complete one. This is done in two phases. First, as long as there is an -cloud 𝐶∈𝖿𝗋𝗈𝗇𝗍() where 𝖼𝗈𝗏(𝐶)≥1, we apply one of the above three procedures depending on the number of freeways intersected by C. We again use  to denote the -normal Λ-state configuration of G that is created in the end of this first phase. Notice that, as there is no -cloud with 𝖼𝗈𝗏(𝐶)≥1, then 𝖼𝗈𝗌𝗍()=0. The second phase is the application of 𝖺𝗇𝖾𝗑(,𝐶), as long as some 𝐶∈𝖿𝗋𝗈𝗇𝗍() is touching some of the countries of . We claim that this procedure will be applied as long as there are vertices in 𝗂𝗇𝖽𝖾𝗉(). Indeed, if this is the case, the set 𝖿𝗋𝗈𝗇𝗍() is non-empty and by the connectivity of G, there is always a 𝐶∈𝖿𝗋𝗈𝗇𝗍() that is touching some country of . Therefore, as 𝖼𝗈𝗌𝗍()=0 (by Claim 33), procedure 𝖺𝗇𝖾𝗑(,𝐶) will be applied again.

By Claim 33, |𝗂𝗇𝖽𝖾𝗉()| is strictly decreasing during the second phase. We again use  for the final outcome of this second phase. We have that 𝗂𝗇𝖽𝖾𝗉()=∅ and we conclude that  is a complete -normal Λ-state configuration of G such that |𝖿𝗋𝗈𝗇𝗍()|=0.

We are now going to create a graph isomorphic to Λ only by doing contractions in G. For this we use , a complete -normal Λ-state configuration of G such that |𝖿𝗋𝗈𝗇𝗍()|=0, obtained as describe before. We contract in G every country of  into a unique vertex. This can be done because the countries of  are connected. Let 𝐺′ be the resulting graph. By construction of , 𝐺′ is a contraction of H. Because of Condition 4 of Λ-state configuration, every freeway of  becomes an edge in 𝐺′. This implies that there is a graph isomorphic to Λ that is a subgraph of 𝐺′. So Γ̂ 𝑘′ is isomorphic to a subgraph of 𝐺′ with the same number of vertices. Let see Γ̂ 𝑘′ as a subgraph of 𝐺′ and let e be an edge of 𝐺′ that is not an edge of Γ̂ 𝑘′. As e is an edge of 𝐺′, this implies that in G, there is two states of  such that there is no freeway between them but still an edge. This is not possible by construction of . We deduce that 𝐺′ is isomorphic to Γ̂ 𝑘′. Moreover, as |𝖿𝗋𝗈𝗇𝗍()|=0, then every cloud is a subset of a country. This implies that 𝐺′ is also a contraction of H. By contracting in 𝐺′ the edge corresponding to {𝑎,(𝑘′−1,𝑘′−1)} in Γ̂ 𝑘′, we obtain that Γ𝑘′ is a contraction of H. Lemma 31 follows.

Proof of Theorem 15
Let 𝜆, c, 𝑐1, and 𝑐2 be integers. It is enough to prove that there exists an integer 𝜆′=(𝜆⋅𝑐1⋅(𝑐2)𝑐) such that for every graph class ∈𝚂𝚀𝙶𝐂(𝑐),

∀𝐺∈&𝗍𝗐(𝐺)≤𝜆⋅(𝐛𝐜𝐠(𝐺))𝑐∀𝐹∈(𝑐1,𝑐2)&𝗍𝗐(𝐹)≤𝜆′⋅(𝐛𝐜𝐠(𝐹))𝑐.⇒
Let ∈𝚂𝚀𝙶𝐂(𝑐) be a class of graph such that ∀𝐺∈  𝗍𝗐(𝐺)≤𝜆⋅(𝐛𝐜𝐠(𝐺))𝑐. Let 𝐻∈(𝑐1,𝑐2) and let G and J be two graphs such that 𝐺∈, 𝐺≤(𝑐1)𝐽, and 𝐻≤𝑐2𝐽. G and J exist by definition of (𝑐1,𝑐2).

By definition of H and J, 𝗍𝗐(𝐻)≤𝗍𝗐(𝐽).

By Lemma 19, 𝗍𝗐(𝐽)≤(𝑐1+1)(𝗍𝗐(𝐺)+1)−1.

By definition of , 𝗍𝗐(𝐺)≤𝜆⋅𝐛𝐜𝐠(𝐺)𝑐.

By Lemma 31, 𝐛𝐜𝐠(𝐺)≤(2𝑐2+1)(𝐛𝐜𝐠(𝐻)+2)+1.

If we combine these four statements, we obtain that

𝗍𝗐(𝐻)≤(𝑐1+1)(𝜆⋅[(2𝑐2+1)(𝐛𝐜𝐠(𝐻)+2)+1]𝑐+1)−1.
As the formula is independent of the graph class, the Theorem 15 follows. ◻

Conclusions, Extensions, and Open Problems
The main combinatorial result of this paper is that, for every d and every apex-minor-free graph class , the intersection class 𝗂𝗇𝗍𝖾𝗋𝑑() has the SQGC property for 𝑐=1. Certainly, the main general question is to detect even wider graph classes with the SQGM/SQGC property. In this direction, some insisting open issues are the following:

Is the bound on the (multi-)degree necessary? Are there classes of intersection graphs with unbounded or “almost bounded” maximum degree that have the SQGM/SQGC property?

All so far known results classify graph classes in SQGM(1) or SQGC(1). Are there (interesting) graph classes in 𝚂𝚀𝙶𝐌(𝑐) or 𝚂𝚀𝙶𝐂(𝑐) for some 1<𝑐<2 that do not belong in 𝚂𝚀𝙶𝐌(1) or 𝚂𝚀𝙶𝐂(1) respectively? An easy (but trivial) example of such a class is the class 𝑑 of the q-dimensional grids, i.e., the cartesian products of 𝑞≥2 equal length paths. It is easy to see that the maximum k for which an n-vertex graph 𝐺∈𝑞 contains a (𝑘×𝑘)-grid as a minor is 𝑘=Θ(𝑛12). On the other size, it can also be proven that 𝗍𝗐(𝐺)=Θ(𝑛𝑞−1𝑞). These two facts together imply that 𝑞∈𝚂𝚀𝙶𝐌(2−2𝑞) while 𝑞∉𝚂𝚀𝙶𝐌(2−2𝑞−𝜖) for every 𝜖>0.

Usually the graph classes in 𝚂𝚀𝙶𝐂(1) are characterised by some “flatness” property. For instance, see the results in [31, 34, 34] for H-minor free graphs, where H is an apex graph. Can 𝚂𝚀𝙶𝐂(1) be useful as an intuitive definition of the “flatness” concept? Does this have some geometric interpretation?

