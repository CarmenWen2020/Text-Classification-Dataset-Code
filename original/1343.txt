Given a connected graph 𝐺=(𝑉,𝐸), we seek to partition the vertex set V into k non-empty parts such that the subgraph induced by each part is connected, and the partition is maximally balanced in the way that the maximum cardinality of these k parts is minimized. We refer this problem to as min-max balanced connected graph partition into k parts and denote it as k -BGP. The vertex-weighted version of this problem on trees has been studied since about four decades ago, which admits a linear time exact algorithm. The vertex-weighted 2-BGP and 3-BGP admit a 5/4-approximation and a 3/2-approximation, respectively. When 𝑘≥4, no approximability result exists for k -BGP, i.e., the vertex unweighted variant, except a trivial k-approximation. In this paper, we present another 3/2-approximation for the 3-BGP and then extend it to become a k/2-approximation for k -BGP, for any fixed 𝑘≥3. Furthermore, for 4-BGP, we propose an improved 24/13-approximation. To these purposes, we have designed several local improvement operations, which could find more applications in related graph partition problems.

Access provided by University of Auckland Library

Introduction
We study the following graph partition problem: Given a connected graph 𝐺=(𝑉,𝐸), we want to partition the vertex set V into k non-empty parts denoted as 𝑉1,𝑉2, …, 𝑉𝑘 such that the subgraph 𝐺[𝑉𝑖] induced by each part 𝑉𝑖 is connected, and the cardinalities of these k parts, |𝑉1|,|𝑉2|,…,|𝑉𝑘|, are maximally balanced in the way that the maximum cardinality among these k parts is minimized.Footnote1

We call this problem min–max balanced connected graph k-partition and denote it as k -BGP for short. This problem and several closely related problems with various applications (in image processing [10, 15], clustering [12, 13], computational topology [9, 11], network analysis and information processing [12, 14], to name a few) have been investigated in the literature.

The NP-hardness of k -BGP was first proven by Dyer and Frieze [6], on bipartite graphs and for any fixed 𝑘≥2. When the objective is switched to maximizing the minimum cardinality, we denote the problem as MAX-MIN k -BGP. Chlebíková [4] proved the NP-hardness of k -BGP on bipartite graphs (again), and proved that for any 𝜖>0 it is NP-hard to approximate MAX-MIN k -BGP within an absolute error guarantee of |𝑉|1−𝜖.

In the more general version of k -BGP, the input is a graph in which the vertices are non-negatively weighted, and the problem is denoted as vertex-weighted k -BGP. (We reserve k -BGP to denote the problem on the vertex unweighted graphs, i.e., the cardinality version.) In this case, the weight of a part is the weight of all vertices inside the part, and the objective of vertex-weighted k -BGP (vertex-weighted MAX-MIN k -BGP, respectively) becomes to minimize the maximum (maximize the minimum, respectively) weight among the k parts. The vertex-weighted k -BGP problem is also called the minimum spanning k-forest problem in the literature [11]. Given a vertex-weighted connected graph 𝐺=(𝑉,𝐸), a spanning k-forest is a collection of k trees 𝑇1,𝑇2,…,𝑇𝑘, such that each tree is a subgraph of G and every vertex of V appears in exactly one tree. The weight of the spanning k-forest {𝑇1,𝑇2,…,𝑇𝑘} is defined as the maximum weight among the k trees, and the weight of a tree is the weight of all vertices in the tree. The goal is to find a minimum weight spanning k-forest of G. The equivalence between these two problems is seen by the fact that a subgraph is connected if and only if it has a spanning tree.

The vertex-weighted k -BGP problem (or equivalently the minimum spanning k-forest problem) was studied mostly on trees, prior the work [3], and it can be solved in O(|V|) time [1, 7, 8, 13].

Chataigner et al. [2] proved the strong NP-hardness for vertex-weighted MAX-MIN k -BGP on k-connected graphs, for any fixed 𝑘≥2. They also showed that, unless P = NP, there is no (1+𝜖)-approximation algorithm for vertex-weighted MAX-MIN 2-BGP problem, where 𝜖≤1/|𝑉|2. Furthermore, they showed that when k is part of the input, the problem is APX-hard and cannot be approximated within 6/5 unless P = NP.

Table 1 Summary of hardness results and approximation algorithms for k -BGP and the related problems
Full size table
There are several known positive results from the approximation algorithms perspective. In [4], Chlebíková gave a tight 4/3-approximation algorithm for the vertex-weighted MAX-MIN 2-BGP problem. Chataigner et al. [2] proposed a 2-approximation algorithm for both the vertex-weighted MAX-MIN 3-BGP on 3-connected graphs, and the vertex-weighted MAX-MIN 4-BGPs on 4-connected graphs, respectively. Approximation algorithms for the vertex-weighted MAX-MIN k -BGP problem on some special classes of graphs can be found in [17,18,19] (see rows 12, 14, 16 in Table 1 for details). Recently, Chen et al. [3] showed that the algorithm by Chlebíková [4] is also a 5/4-approximation algorithm for the vertex-weighted 2-BGP problem; and they presented a 3/2-approximation algorithm for the vertex-weighted 3-BGP problem and a 5/3-approximation algorithm for the vertex-weighted MAX-MIN 3-BGP problem (the latter of which supersedes the 2-approximation algorithm for 3-connected graphs by Chataigner et al. [2]).

Motivated by an expensive topology computation application [9], Madkour et al. [11] introduced the edge-weighted variant of the k -BGP problem, denoted as k-eBGP. Given an edge non-negatively weighted connected graph 𝐺=(𝑉,𝐸), the weight of a tree subgraph T of G is measured as the weight of all edges in T. The weight of a spanning k-forest {𝑇1,𝑇2,…,𝑇𝑘} is defined as the maximum weight among the k trees. Madkour et al. [11] showed that the k-eBGP problem is NP-hard for any fixed 𝑘≥2, and proposed two k-approximation algorithms. Vaishali et al. [16] presented an 𝑂(𝑘|𝑉|3)-time exact algorithm when the input graph is a tree, and proved that the k -EBGP problem remains NP-hard on edge uniformly weighted (i.e., unweighted) graphs. It follows that the k -BGP problem is NP-hard (once again), for any fixed 𝑘≥2. The two k-approximation algorithms for k -EBGP trivially work for the k -BGP problem by treating the edges uniformly weighted, but their worst-case performance ratios remain at k [11].

We summarize the above mentioned hardness results and approximation algorithms in Table 1. There are works more distantly related to ours, some of which are reviewed in an earlier work [3].

This paper focuses on designing approximation algorithms for the cardinality (i.e., vertex uniformly weighted, or vertex unweighted) k -BGP problem for a fixed 𝑘≥4. One can probably easily see a trivial k-approximation algorithm, since the maximum cardinality among the k parts is always at least one k-th of the order of the input graph. We remark that the 3/2-approximation algorithm for the vertex-weighted 3-BGP problem by Chen et al. [3] could not be extended trivially for k -BGP for 𝑘≥4. After some preliminaries introduced in Sect. 2, we present in Sect. 3 another 3/2-approximation algorithm for 3-BGP based on two simple intuitive local improvement operations, and extend it to become a k/2-approximation algorithm for k -BGP, for any fixed 𝑘≥4 (the fourth row in Table 1). In Sect. 4, we introduce several complex yet still intuitive local improvement operations for 4-BGP, and use them to design a 24/13-approximation algorithm (the third row in Table 1). We conclude the paper in Sect. 5.

Preliminaries
We use common notions from graph theory [5]. Given a graph 𝐺=(𝑉,𝐸), for a vertex subset 𝑈⊆𝑉, the induced subgraph G[U] is the graph in which the vertex set is U and the edge set is {(𝑢,𝑣)∈𝐸∣𝑢,𝑣∈𝑈}.

Recall that the k -BGP problem seeks for a partition of the vertex set V of a given connected graph 𝐺=(𝑉,𝐸) into k non-empty subsets 𝑉1,𝑉2,…,𝑉𝑘 such that 𝐺[𝑉𝑖] is connected for every 𝑖=1,2,…,𝑘, and max1≤𝑖≤𝑘|𝑉𝑖| is minimized. For convenience, we call {𝑉1,𝑉2,…,𝑉𝑘} a k-partition of V (or, of the graph 𝐺=(𝑉,𝐸), used interchangeably) and max1≤𝑖≤𝑘|𝑉𝑖| the size of the partition. In the rest of the paper, when we know all these cardinalities, we always assume that |𝑉1|≤|𝑉2|≤…≤|𝑉𝑘|, and thus the size of the partition is |𝑉𝑘|.

For two k-partitions {𝑉1,𝑉2,…,𝑉𝑘} and {𝑉′1,𝑉′2,…,𝑉′𝑘}, if their sizes |𝑉′𝑘|<|𝑉𝑘|, or if |𝑉′𝑘|=|𝑉𝑘| and |𝑉′𝑘−1|<|𝑉𝑘−1|, then we say the partition {𝑉′1,𝑉′2,…,𝑉′𝑘} is better than the partition {𝑉1,𝑉2,…,𝑉𝑘}.

For any two disjoint vertex subsets 𝑉1,𝑉2⊂𝑉, 𝐸(𝑉1,𝑉2)⊆𝐸 denotes the set of edges with one endpoint in 𝑉1 and the other in 𝑉2. If 𝐸(𝑉1,𝑉2)≠∅, then we say 𝑉1 and 𝑉2 are adjacent. If additionally both 𝐺[𝑉1] and 𝐺[𝑉2] are connected, then we also say 𝐺[𝑉1] and 𝐺[𝑉2] are adjacent.Footnote2

We note that obtaining an initial k-partition of V can be done trivially in 𝑂(|𝑉|+|𝐸|) time, as follows: One first constructs a spanning tree T of G, then arbitrarily removes 𝑘−1 edges from T to produce a forest of k trees 𝑇1,𝑇2,…,𝑇𝑘, and lastly sets 𝑉𝑖 to be the vertex set of 𝑇𝑖. The following approximation algorithms all start with an initial k-partition and iteratively apply certain local improvement operations to improve it. For 𝑘=3, there are only two intuitive local improvement operations and the performance analysis is relatively simple. For 𝑘=4, several more local improvement operations are introduced, and the performance analysis is more involved, though the key ideas in the design and analysis remain intuitive.

Given a connected (“connected” is skipped for the input graph in the sequel) graph 𝐺=(𝑉,𝐸), let 𝑛=|𝑉| denote its order. Let 𝑂𝑃𝑇 denote the size of an optimal k-partition of the vertex set V to the k -BGP problem. The following lower bound on 𝑂𝑃𝑇 is trivial, and thus the k -BGP problem admits a trivial k-approximation (the sixth row in Table 1).

Lemma 1
Given a graph G of order n, an optimal k-partition to the k -BGP problem has size 𝑂𝑃𝑇≥1𝑘𝑛.

A k/2-approximation for k -BGP, for a fixed 𝑘≥3
We consider first 𝑘=3, and let {𝑉1,𝑉2,𝑉3} denote an initial 3-partition (with |𝑉1|≤|𝑉2|≤|𝑉3|). Our goal is to reduce the cardinality of 𝑉3 to be no larger than 12𝑛. It will then follow from Lemma 1 that the achieved 3-partition is within 32 of the optimum.

Recently, Chen et al. [3] presented a 3/2-approximation algorithm for the vertex-weighted 3-BGP problem, by noticing that a 3-partition “cuts” the input graph into at most two blocks (each is a maximal 2-connected component in the input graph). It is surely a 3/2-approximation algorithm for our (unweighted) 3-BGP problem too, but no better analysis can be achieved since the algorithm re-assigns weights to the cut vertices. Furthermore, it is noted by the authors that the algorithm cannot be extended trivially for k -BGP for any 𝑘≥4, where one has to deal non-trivially with vertex-weighted graphs having exactly three blocks [3].

Our new 3/2-approximation algorithm for 3-BGP, denoted as APPROX-3 and detailed in the following, does not deal with blocks, and it can be extended to become a k/2-approximation for k -BGP for any fixed 𝑘≥4.

Clearly, during the execution of the algorithm APPROX-3, if the size of the current 3-partition is no greater than 12𝑛, then we may terminate and return the 3-partition. Otherwise, we will execute one of the two local improvement operations called Merge and Pull, defined below, whenever applicable.

Let G be a graph and {𝑉1,𝑉2,𝑉3} be a 3-partition of G.

Definition 1
Operation Merge(𝑉1,𝑉2):

precondition: |𝑉3|>12𝑛; 𝑉1 and 𝑉2 are adjacent;

effect: the operation produces a new 3-partition {𝑉1∪𝑉2,𝑉31,𝑉32}, where {𝑉31,𝑉32} is an arbitrary 2-partition of 𝑉3.

Lemma 2
Given a graph 𝐺=(𝑉,𝐸) and a 3-partition {𝑉1,𝑉2,𝑉3}, if the operation Merge(𝑉1,𝑉2) is applicable, then the partition achieved by this operation is better than {𝑉1,𝑉2,𝑉3}.

Proof
Note from the precondition of the operation Merge(𝑉1,𝑉2) that the size of the new part 𝑉1∪𝑉2 is |𝑉1|+|𝑉2|<12𝑛<|𝑉3|. The sizes of the other two new parts 𝑉31 and 𝑉32 partitioned from 𝑉3 are clearly strictly less than |𝑉3|. This proves the lemma. ◻

Since the input graph G is connected, 𝑉3 is adjacent to at least one of 𝑉1 and 𝑉2. The following Pull operation uses this fact.

Definition 2
Operation Pull(𝑈⊂𝑉3,𝑉𝑖), where 𝑖∈{1,2},

precondition: |𝑉3|>12𝑛; both G[U] and 𝐺[𝑉3∖𝑈] are connected, U is adjacent to 𝑉𝑖, and |𝑉𝑖|+|𝑈|<|𝑉3|;

effect: the operation produces a new 3-partition {𝑉3∖𝑈,𝑉𝑖∪𝑈,𝑉3−𝑖} (see Fig. 1 for an illustration).

Fig. 1
figure 1
An illustration of the operation Pull(𝑈⊂𝑉3,𝑉𝑖) that transforms the 3-partition {𝑉1,𝑉2,𝑉3} to a better 3-partition {𝑉3∖𝑈,𝑉𝑖∪𝑈,𝑉3−𝑖}

Full size image
Lemma 3
Given a graph 𝐺=(𝑉,𝐸) and a 3-partition {𝑉1,𝑉2,𝑉3}, if an operation Pull(𝑈⊂𝑉3,𝑉𝑖) is applicable, then the partition achieved by this operation is better than {𝑉1,𝑉2,𝑉3}.

Proof
From the precondition of the operation Pull(𝑈⊂𝑉3,𝑉𝑖) we conclude that the achieved new 3-partition {𝑉3∖𝑈,𝑉𝑖∪𝑈,𝑉3−𝑖} is feasible. Since |𝑉𝑖|+|𝑈|<|𝑉3| and |𝑉3−𝑖|<12𝑛<|𝑉3|, its size is strictly less than |𝑉3|. This proves the lemma. ◻

Lemma 4
Given a graph 𝐺=(𝑉,𝐸), when none of the Merge and Pull operations is applicable to the 3-partition {𝑉1,𝑉2,𝑉3} with |𝑉3|>12𝑛, the following is true:

(1)
let (𝑢,𝑣)∈𝐸(𝑉3,𝑉1); then 𝐺[𝑉3∖{𝑢}] is disconnected; suppose 𝐺[𝑉𝑢31],𝐺[𝑉𝑢32], …,𝐺[𝑉𝑢3ℓ] are the components in 𝐺[𝑉3∖{𝑢}], then for every i, |𝑉𝑢3𝑖|≤|𝑉1|, and 𝑉𝑢3𝑖 and 𝑉1 are not adjacent;

(2)
no vertex of 𝑉1∪𝑉2 is adjacent to any vertex of 𝑉3 other than u.

Proof
See Fig. 2 for an illustration of the to-be-proven connectivity configuration.

Fig. 2
figure 2
An illustration of the connectivity configuration of the graph 𝐺=(𝑉,𝐸), with respect to the 3-partition {𝑉1,𝑉2,𝑉3} and |𝑉3|>12𝑛, on which no Merge or Pull operation is applicable

Full size image
From |𝑉3|>12𝑛, we know |𝑉1|+|𝑉2|<12𝑛 and thus |𝑉1|<14𝑛. Because the Merge operation is not applicable, 𝑉1 and 𝑉2 are not adjacent and consequently they both are adjacent to 𝑉3.

Item (1) can be proven similarly as Lemma 3. First notice the existence of the edge (𝑢,𝑣)∈𝐸(𝑉3,𝑉1). If 𝐺[𝑉3∖{𝑢}] were connected, then it would enable the operation Pull({𝑢}⊂𝑉3,𝑉1), assuming non-trivially 𝑛≥5. Secondly, if |𝑉𝑢3𝑖|>|𝑉1| for some i, then it would enable the operation Pull(𝑉3∖𝑉𝑢3𝑖⊂𝑉3,𝑉1), since |𝑉3∖𝑉𝑢3𝑖|+|𝑉1|<|𝑉3|. Lastly, if 𝑉𝑢3𝑖 and 𝑉1 were adjacent for some i, then it would enable the operation Pull(𝑉𝑢3𝑖⊂𝑉3,𝑉1), since |𝑉𝑢3𝑖|+|𝑉1|≤2|𝑉1|<12𝑛<|𝑉3|. This proves the item.

For Item (2), the above Item 1) says that u is the only vertex of 𝑉3 to which a vertex of 𝑉1 can possibly be adjacent. Recall that 𝑉2 and 𝑉3 are adjacent. We want to prove that for every i, 𝑉𝑢3𝑖 and 𝑉2 are not adjacent. Assume 𝑉2 is adjacent to 𝑉𝑢3𝑖 for some i. Then, due to |𝑉𝑢3𝑖|≤|𝑉1|, we have |𝑉𝑢3𝑖|+|𝑉2|≤|𝑉1|+|𝑉2|<12𝑛<|𝑉3|, implying an operation Pull(𝑉𝑢3𝑖⊂𝑉3,𝑉2) is applicable, a contradiction. That is, u is the only vertex of 𝑉3 to which a vertex of 𝑉2 can possibly be adjacent.

This finishes the proof. ◻

From Lemmas 2–4, we can design an algorithm, denoted as APPROX-3, to first compute in 𝑂(|𝑉|+|𝐸|) time an initial 3-partition of the vertex set V to the 3-BGP problem; we then apply the operations Merge and Pull to iteratively reduce the size of the 3-partition, until either this size is no larger than 12𝑛 or none of the two operations is applicable. We note that the order in which the Merge/Pull operations are applied makes no difference to the performance analysis, though different orders might give rise to different final 3-partitions. One such final achieved 3-partition is returned as the solution. See Fig. 3 for a high-level description of the algorithm APPROX-3. We thus conclude with Theorem 1.

Fig. 3
figure 3
A high-level description of the algorithm APPROX-3 for 3-BGP

Full size image
Theorem 1
The algorithm APPROX-3 is an O(|V||E|)-time 32-approximation for the 3-BGP problem, and the ratio 32 is tight.

Proof
Note that in order to apply a Pull operation, one can execute a graph traversal on 𝐺[𝑉3∖{𝑢}] to determine whether it is connected, and if not, to explore all its connected components. Such a graph traversal can be done in 𝑂(|𝑉|+|𝐸|) time. A Merge operation is also done in 𝑂(|𝑉|+|𝐸|) time. The total number of Merge and Pull operations executed in the algorithm is O(|V|). Therefore, the total running time of the algorithm APPROX-3 is O(|V| |E|).

At termination, if |𝑉3|≤12𝑛, then by Lemma 1 we have |𝑉3|𝑂𝑃𝑇≤32.

If |𝑉3|>12𝑛, then |𝑉1|+|𝑉2|<12𝑛 and thus |𝑉1|<14𝑛, implying by Lemma 2 that 𝑉1 and 𝑉2 are not adjacent. Therefore, both 𝑉1 and 𝑉2 are adjacent to 𝑉3. By Lemma 4, let u denote the unique vertex of 𝑉3 to which the vertices of 𝑉1∪𝑉2 can be adjacent. We conclude from Lemma 4 that 𝐺[𝑉3∖{𝑢}] is disconnected, there are at least two components in 𝐺[𝑉3∖{𝑢}] denoted as 𝐺[𝑉𝑢31],𝐺[𝑉𝑢32],…,𝐺[𝑉𝑢3ℓ] (ℓ≥2), and for each i, 𝑉𝑢3𝑖 is not adjacent to 𝑉1 or 𝑉2 and |𝑉𝑢3𝑖|≤|𝑉1|. That is, 𝐺=(𝑉,𝐸) has a very special “star”-like structure, in that these ℓ+2 vertex subsets 𝑉1,𝑉2,𝑉𝑢31,𝑉𝑢32,…,𝑉𝑢3ℓ are pairwise non-adjacent to each other, but they all are adjacent to the vertex u (see Fig. 2 for an illustration). Clearly, in an optimal 3-partition, the part containing the vertex u has its size at least |𝑉3|, implying the optimality of the achieved partition {𝑉1,𝑉2,𝑉3}.

For the tightness, one can consider a path of order 12: 𝑣1-𝑣2-𝑣3-⋯-𝑣11-𝑣12, on which the algorithm APPROX-3 may terminate at a 3-partition of size 6, while an optimal 3-partition has size 4. This proves the theorem. ◻

Theorem 2
The k -BGP problem admits an O(|V| |E|)-time 𝑘2-approximation, for any fixed 𝑘≥3.

Proof
Notice that we may apply the algorithm APPROX-3 on the input graph 𝐺=(𝑉,𝐸) to obtain a 3-partition {𝑉1,𝑉2,𝑉3} of the vertex set V, with |𝑉1|≤|𝑉2|≤|𝑉3|.

If |𝑉3|≤12𝑛, then we may continue on to arbitrarily partition 𝐺[𝑉3] into 𝑘−2 parts, resulting in a k-partition in which the size of the largest part is no larger than 12𝑛 (strictly less than 12𝑛 when 𝑘≥4).

If |𝑉3|>12𝑛, then let u be the only vertex of 𝑉3 to which the vertices of 𝑉1∪𝑉2 can be adjacent; that is, 𝐺[𝑉∖{𝑢}] is disconnected, there are ℓ≥4 connected components in 𝐺[𝑉∖{𝑢}] (see Fig. 2 for an illustration), each is adjacent to u and the largest (which is 𝐺[𝑉2]) has size strictly less than 12𝑛 (all the other components have sizes strictly less than 14𝑛). When 𝑘≤ℓ, we can achieve a k-partition by setting the 𝑘−1 largest components to be the 𝑘−1 parts, and all the other components together with u to be the last part. Such a partition has size no greater than max{|𝑉2|,𝑂𝑃𝑇}, since in an optimal k-partition the part containing the vertex u is no smaller than the last constructed part. When 𝑘>ℓ, we can start with the ℓ-partition obtained as in the above to arbitrarily partition the largest part into 𝑘−(ℓ−1) parts, resulting in a k-partition in which the size of the largest part is strictly less than 12𝑛.

In summary, we either achieve an optimal k-partition or achieve a k-partition in which the size of the largest part is no greater than 12𝑛. Using the lower bound in Lemma 1, this is a 𝑘2-approximation.

Running APPROX-3 takes O(|V| |E|) time; the subsequent arbitrary (𝑘−2)-partition or (𝑘−ℓ+1)-partition needs only O(|E|) time. Therefore, the total running time is O(|V| |E|).

Lastly, we remark that in the above proof, when 𝑘≥4, if the achieved k-partition is not optimal, then its size is strictly less than 12𝑛. That is, when 𝑘≥4, the ratio 𝑘2 is not tight. ◻

A 24/13-approximation for 4-BGP
Theorem 2 states that the 4-BGP problem admits a 2-approximation. In this section, we design a 2413-approximation, which uses three more local improvement operations besides the similarly defined Merge and Pull operations. Basically, each of these three new operations finds a subset of the largest two parts, respectively, to merge them into a new part.

Let {𝑉1,𝑉2,𝑉3,𝑉4} denote an initial 4-partition (see Preliminaries for its construction in linear time), with |𝑉1|≤|𝑉2|≤|𝑉3|≤|𝑉4|. Note that these four parts must satisfy some adjacency constraints due to G being connected. We try to reduce the size of 𝑉4 to be no larger than 25𝑛, whenever possible; or otherwise we will show that the achieved 4-partition is a 2413-approximation. We point out a major difference from 3-BGP, that the two largest parts 𝑉3 and 𝑉4 in the 4-partition can both be larger than the desired bound of 25𝑛. Therefore, we need new local improvement operations.

In the following algorithm denoted as APPROX-4, if |𝑉4|≤25𝑛, then we can terminate and return the achieved 4-partition. It follows from Lemma 1 that the achieved 4-partition is within 85 of the optimum. Otherwise, the algorithm will execute one of the following local improvement operations whenever applicable.

The first local improvement operation is similar to the Merge operation designed for APPROX-3, except that it now deals with more cases.

Definition 3
Operation Merge(𝑉𝑖,𝑉𝑗), for some 𝑖,𝑗∈{1,2,3}:

precondition: |𝑉4|>25𝑛; 𝑉𝑖 and 𝑉𝑗 are adjacent, and |𝑉𝑖|+|𝑉𝑗|<|𝑉4|;

effect: the operation produces a new 4-partition {𝑉𝑖∪𝑉𝑗,𝑉6−𝑖−𝑗,𝑉41,𝑉42}, where {𝑉41,𝑉42} is an arbitrary 2-partition of 𝑉4.

Lemma 5
Given a graph 𝐺=(𝑉,𝐸) and a 4-partition {𝑉1,𝑉2,𝑉3,𝑉4}, if an operation Merge(𝑉𝑖,𝑉𝑗) is applicable, then the partition achieved by this operation is better than {𝑉1,𝑉2,𝑉3,𝑉4}.

Proof
The proof is similar to the proof of Lemma 2.

Note from the precondition of the operation Merge(𝑉𝑖,𝑉𝑗) that the size of the new part 𝑉𝑖∪𝑉𝑗 is |𝑉𝑖|+|𝑉𝑗|<|𝑉4|; the sizes of the other two new parts 𝑉41 and 𝑉42 partitioned from 𝑉4 are clearly strictly less than |𝑉4|. Let ℎ=6−𝑖−𝑗. If |𝑉ℎ|=|𝑉4| (which implies ℎ=3), then the size of the largest part is unchanged but the size of the second largest part reduces by at least 1. If |𝑉ℎ|<|𝑉4|, then the size of the largest part reduces by at least 1. Therefore, the new 4-partition is better. This proves the lemma. ◻

The next local improvement operation is very similar to the Pull operation designed for APPROX-3, except that it now deals with more cases. See Fig. 1 for an illustration, with 𝑉3 replaced by 𝑉𝑗.

Definition 4
Operation Pull(𝑈⊂𝑉𝑗,𝑉𝑖), for some pair (𝑖,𝑗)∈{(1,3),(1,4), (2,3),(2,4),(3,4)},

precondition: |𝑉4|>25𝑛 and no Merge operation is applicable; both G[U] and 𝐺[𝑉𝑗∖𝑈] are connected, U is adjacent to 𝑉𝑖, and |𝑉𝑖|+|𝑈|<|𝑉𝑗|;

effect: the operation produces a new 4-partition {𝑉𝑗∖𝑈,𝑉𝑖∪𝑈,𝑉𝑎,𝑉𝑏}, where 𝑎,𝑏∈{1,2,3,4}∖{𝑖,𝑗}.

Lemma 6
Given a graph 𝐺=(𝑉,𝐸) and a 4-partition {𝑉1,𝑉2,𝑉3,𝑉4}, if an operation Pull(𝑈⊂𝑉𝑗,𝑉𝑖) is applicable, then the partition achieved by this operation is better than {𝑉1,𝑉2,𝑉3,𝑉4}.

Proof
Note from the precondition that |𝑉4|>25𝑛. Thus, |𝑉1|+|𝑉2|+|𝑉3|<35𝑛, and further more |𝑉1|+|𝑉2|<25𝑛. Since no Merge operation is applicable at the moment, 𝑉1 and 𝑉2 are not adjacent. The new 4-partition is feasible since 𝐺[𝑉𝑗∖𝑈] and 𝐺[𝑉𝑖∪𝑈] are connected.

The sizes of the two new parts 𝑉𝑗∖𝑈 and 𝑉𝑖∪𝑈 are less than |𝑉𝑗|; the sizes of the other two parts 𝑉𝑎 and 𝑉𝑏 are unchanged. If |𝑉3|=|𝑉4| (implying (𝑖,𝑗)≠(3,4), and thus 𝑖∈{1,2}), then the size of the largest part is unchanged but due to |𝑉2|<|𝑉3| the size of the second largest part reduces by at least 1. If |𝑉3|<|𝑉4| and 𝑗=4, then the size of the largest part reduces by at least 1. If |𝑉3|<|𝑉4| and 𝑗=3, then |𝑉2|<|𝑉3| and the size of the largest part is unchanged but the size of the second largest part reduces by at least 1. Therefore, the new 4-partition is better. This proves the lemma. ◻

Lemma 7
(Structural Properties) Given a graph 𝐺=(𝑉,𝐸), when none of the Merge and Pull operations is applicable to the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} with |𝑉4|>25𝑛, the following is true:

(1)
|𝑉1|<15𝑛, |𝑉2|<310𝑛, |𝑉1|+|𝑉2|<25𝑛, and 𝑉1 and 𝑉2 are not adjacent;

(2)
if 𝑉𝑖 and 𝑉3 are adjacent, for some 𝑖∈{1,2}, then |𝑉𝑖|+|𝑉3|≥|𝑉4|;

(3)
if there is an edge (𝑢,𝑣)∈𝐸(𝑉4,𝑉𝑖) for some 𝑖∈{1,2}, then 𝐺[𝑉4∖{𝑢}] is disconnected, and for every component 𝐺[𝑉𝑢4ℓ] in 𝐺[𝑉4∖{𝑢}], its order |𝑉𝑢4ℓ|≤|𝑉𝑖|, 𝑉𝑢4ℓ and 𝑉𝑖 are not adjacent, and if 𝑉𝑢4ℓ and 𝑉3 are adjacent then |𝑉𝑢4ℓ∪𝑉3|≥|𝑉4|;

(4)
if there is an edge (𝑣,𝑢)∈𝐸(𝑉3,𝑉𝑖) for some 𝑖∈{1,2} and |𝑉𝑖|<13|𝑉4|, then 𝐺[𝑉3∖{𝑣}] is disconnected, and for every component 𝐺[𝑉𝑣3ℓ] in 𝐺[𝑉3∖{𝑣}], its order |𝑉𝑣3ℓ|≤|𝑉𝑖|, and 𝑉𝑣3ℓ and 𝑉𝑖 are not adjacent;

(5)
if |𝑉2|≥16|𝑉4|, then the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is a 2413-approximation; otherwise, we have

⎧⎩⎨⎪⎪⎪⎪|𝑉2|+|𝑉3||𝑉4||𝑉1|≤|𝑉2||𝑉3|≥<<>|𝑉4|,12𝑛,16|𝑉4|<112𝑛,13𝑛;
(1)
(6)
if both 𝑉1 and 𝑉2 are adjacent to 𝑉𝑗 for some 𝑗∈{3,4}, then the vertices of 𝑉1∪𝑉2 can be adjacent to only one vertex of 𝑉𝑗.

Fig. 4
figure 4
An illustration of the connectivity configuration of the graph 𝐺=(𝑉,𝐸), with respect to the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} and |𝑉4|>25𝑛, on which no Merge or Pull operation is applicable

Full size image
Proof
See Fig. 4 for an illustration of the to-be-proven connectivity configuration.

Using |𝑉1|≤|𝑉2|≤|𝑉3|≤|𝑉4| and |𝑉4|>25𝑛, we have |𝑉1|+|𝑉2|+|𝑉3|<35𝑛, and consequently |𝑉1|<15𝑛, |𝑉2|<310𝑛, |𝑉1|+|𝑉2|<25𝑛.

Items 1) and 2) hold because a Merge operation is not applicable (Definition 3).

If 𝑖=1, item 3) can be proven similarly as Lemmas 3 and 4, as follows. Using |𝑉1|<15𝑛 and |𝑉4|>25𝑛, if 𝐺[𝑉4∖{𝑢}] were connected, then it would enable the Pull({𝑢}⊂𝑉4,𝑉1) operation (Definition 4, assuming non-trivially 𝑛≥5). If a component 𝐺[𝑉𝑢4ℓ] of 𝐺[𝑉4∖{𝑢}] had its order |𝑉𝑢4ℓ|>|𝑉1|, then it would enable the Pull(𝑉4∖𝑉𝑢4ℓ⊂𝑉4,𝑉1) operation. If 𝑉𝑢4ℓ and 𝑉1 were adjacent, then it would enable the Pull(𝑉𝑢4ℓ⊂𝑉4,𝑉1) operation.

If 𝑖=2 and 𝐺[𝑉4∖{𝑢}] were connected, then it would enable the Pull({𝑢}⊂𝑉4,𝑉2) operation since |𝑉2|+1<310𝑛+1≤25𝑛<|𝑉4| (assuming non-trivially 𝑛≥10). For a component 𝐺[𝑉𝑢4ℓ] of 𝐺[𝑉4∖{𝑢}], similarly we have |𝑉𝑢4ℓ|≤|𝑉2|. If 𝑉𝑢4ℓ and 𝑉2 are adjacent, then |𝑉𝑢4ℓ|+|𝑉2|≥|𝑉4| since otherwise the Pull(𝑉𝑢4ℓ⊂𝑉4,𝑉2) operation would be applicable. Also, for the same reason, in this case 𝑉1 cannot be adjacent to 𝑉4, and thus 𝑉1 has to be adjacent to 𝑉3. In summary, we have 2|𝑉2|≥|𝑉𝑢4ℓ|+|𝑉2|≥|𝑉4| and |𝑉1|+|𝑉3|≥|𝑉4|, implying |𝑉4|≤25𝑛, a contradiction. This contradiction proves that 𝑉𝑢4ℓ and 𝑉2 are not adjacent. A similar contradiction using a Pull operation shows that if 𝑉𝑢4ℓ and 𝑉3 are adjacent, then |𝑉𝑢4ℓ∪𝑉3|≥|𝑉4|. The third item is thus proved.

Item 4) can be proven similarly, as follows. We first claim that |𝑉3|≥|𝑉𝑖|+2. To prove this claim, we see that |𝑉3|≤|𝑉𝑖|+1 implies |𝑉𝑖|+|𝑉3|≤2|𝑉𝑖|+1<|𝑉4|, contradicting item 2). It follows from this claim that 𝐺[𝑉3∖{𝑣}] is disconnected since the Pull({𝑣}⊂𝑉3,𝑉𝑖) operation is not applicable. For a component 𝐺[𝑉𝑣3ℓ] of 𝐺[𝑉3∖{𝑣}], similarly we have |𝑉𝑣3ℓ|≤|𝑉𝑖|. If |𝑉𝑣3ℓ|+|𝑉𝑖|≥|𝑉3|, then 2|𝑉𝑖|≥|𝑉3|; from |𝑉𝑖|+|𝑉3|≥|𝑉4| we have |𝑉𝑖|≥13|𝑉4|, a contradiction to the presumption that |𝑉𝑖|<13|𝑉4|. Therefore, |𝑉𝑣3ℓ|+|𝑉𝑖|<|𝑉3| holds. Next, if 𝑉𝑣3ℓ and 𝑉𝑖 were adjacent, then the Pull(𝑉𝑣3ℓ⊂𝑉3,𝑉𝑖) operation would be applicable; that is, 𝑉𝑣3ℓ and 𝑉𝑖 are not adjacent. This proves item 4).

To prove item 5), if 𝑉1 and 𝑉2 are both adjacent to 𝑉4, but not to 𝑉3, then by item 2) we know that the vertices of 𝑉1∪𝑉2 can be adjacent to only one vertex of 𝑉4, say u (otherwise, a Merge operation would be applicable). Note that 𝑉3 must also be adjacent to 𝑉4. If 𝑉3 is adjacent to a component 𝐺[𝑉𝑢4ℓ] of 𝐺[𝑉4∖{𝑢}], then |𝑉1|+|𝑉3|≥|𝑉𝑢4ℓ|+|𝑉3|≥|𝑉4|. Therefore, |𝑉2|≥16|𝑉4| implies |𝑉4|≤613𝑛, implying that the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is a 2413-approximation by Lemma 1. If the vertices of 𝑉3 are adjacent to only the vertex 𝑢∈𝑉4, then consider an optimal 4-partition {𝑉∗1,𝑉∗2,𝑉∗3,𝑉∗4}, and assume the vertex u is in 𝑉∗𝑗; clearly, |𝑉∗𝑗|≥|𝑉4|, implying that the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is also optimal.

We next discuss the case where at least one of 𝑉1 and 𝑉2, say 𝑉𝑖, is adjacent to 𝑉3. If 𝑖=1, or if |𝑉1|≥16|𝑉4|, then we again have |𝑉4|≤613𝑛, implying that the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is a 2413-approximation by Lemma 1. In the other case, |𝑉1|<16|𝑉4| and 𝑉1 is not adjacent to 𝑉3 but to 𝑉4, and by item 3) suppose 𝑉1 is adjacent to the vertex 𝑢∈𝑉4. We further conclude for the same reason that each component 𝐺[𝑉𝑢4ℓ] of 𝐺[𝑉4∖{𝑢}] cannot be adjacent to either 𝑉2 or 𝑉3 (otherwise, either a Merge operation would be applicable, or we again have |𝑉1|+|𝑉3|≥|𝑉𝑢4ℓ|+|𝑉3|≥|𝑉4|), and consequently 𝑉2 and 𝑉3 are adjacent. Consider next an optimal 4-partition {𝑉∗1,𝑉∗2,𝑉∗3,𝑉∗4}, and assume the vertex u is in 𝑉∗𝑗. If all but one of the components of 𝐺[(𝑉4∪𝑉1)∖{𝑢}] are in 𝑉∗𝑗, then |𝑉∗𝑗|≥|𝑉4|, implying that the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is also optimal; otherwise, |𝑉∗1|≤|𝑉∗2|≤|𝑉1| and thus from |𝑉2|+|𝑉3|≥|𝑉4| we have |𝑉∗4|≥12(2−16)|𝑉4|=1112|𝑉4|, implying that the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is a 1211-approximation.

In summary, if |𝑉2|≥16|𝑉4|, then the 4-partition {𝑉1,𝑉2,𝑉3,𝑉4} is a 2413-approximation. Otherwise, we have |𝑉2|<16|𝑉4|. Furthermore, if one of 𝑉1 and 𝑉2, say 𝑉𝑖, is adjacent to 𝑉3, then |𝑉2|+|𝑉3|≥|𝑉𝑖|+|𝑉3|≥|𝑉4|; if none of 𝑉1 and 𝑉2 is adjacent to 𝑉3, then the same proof earlier shows that 𝑉3 is adjacent to a component 𝐺[𝑉𝑢4ℓ] of 𝐺[𝑉4∖{𝑢}], implying |𝑉1|+|𝑉3|≥|𝑉𝑢4ℓ|+|𝑉3|≥|𝑉4|. It follows that, either way we have |𝑉2|+|𝑉3|≥|𝑉4| and thus n = |V_1| + |V_2| + |V_3| + |V_4| > 2 |V_4|. This completes the proof of item 5).

The last item 6) can be proven by a simple contradiction by setting a proper U \subset V_j to enable the Pull(U \subset V_j, V_2) operation. \square

Proposition 1
In the following, we distinguish three cases for the 4-partition \{V_1, V_2, V_3, V_4\} with |V_4| > \frac{2}{5} n, to which none of the Merge and Pull operations is applicable, and Eq. (1) holds:

Case 1::
none of V_1 and V_2 is adjacent to V_3 (i.e., both V_1 and V_2 are adjacent to V_4 only and at the vertex u \in V_4 only; see an illustration in Figs. 5 and 6, to be handled in Theorems 3 and 4);

Case 2::
none of V_1 and V_2 is adjacent to V_4 (i.e., both V_1 and V_2 are adjacent to V_3 only and at the vertex v \in V_3 only; see an illustration in Fig. 7, to be handled in Theorems 5 and 6);

Case 3::
one of V_1 and V_2 is adjacent to V_3 and the other is adjacent to V_4 (see an illustration in Fig. 8, to be handled in Theorems 7 and 8).

The final conclusion is presented as Theorem 9.

Lemma 7 states several structural properties of the graph G = (V, E) with respect to the 4-partition, which is yet unknown to be a \frac{24}{13}-approximation or not. For each of the three cases listed in Proposition 1, Lemma 7 leads to a further conclusion, stated separately in Theorems 3, 5, and 7.

Case 1 of Proposition 1
Theorem 3
In Case 1 of Proposition 1, let V'_4 denote the union of the vertex sets of all the components of G[V_4 \setminus \{u\}] that are adjacent to V_3. If |V'_4| \le |V_1| + |V_2| + \frac{11}{24} |V_4|, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation.

Proof
From Lemma 7, we assume without loss of generality that some component of G[V_4 \setminus \{u\}] is adjacent to V_3, as otherwise the 4-partition \{V_1, V_2, V_3, V_4\} is already optimal. It follows that |V_1| + |V_3| \ge |V_4|.

If |V'_4| \le |V_1| + |V_2| + \frac{11}{24} |V_4| (< \frac{19}{24} |V_4| by Eq. (1)), then denote the components of G[V_4 \setminus \{u\}] not adjacent to V_3 as G[V^u_{4i}], i = 1, 2, \ldots \ell , with \ell \ge 2. In an optimal 4-partition denoted as \{V^*_1, V^*_2, V^*_3, V^*_4\}, assume u \in V^*_j. If V^*_j contains all these \ell + 2 subsets, V_1, V_2, V^u_{4i}, i = 1, 2, \ldots \ell , then |V^*_j| = |V_1| + |V_2| + |V_4| - |V'_4| \ge \frac{13}{24} |V_4|. In the other case, at least one of these \ell + 2 subsets becomes a separate part in \{V^*_1, V^*_2, V^*_3, V^*_4\}, of which the size is at most |V_2|, and thus we have |V^*_4| \ge \frac{1}{3} (|V_1| + |V_3| + |V_4|) \ge \frac{2}{3} |V_4|. Therefore, we always have |V^*_4| \ge \frac{13}{24} |V_4|, and thus the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation. \square

Fig. 5
figure 5
An illustration of the connectivity configuration of the graph G = (V, E), with respect to the 4-partition \{V_1, V_2, V_3, V_4\} in Case 1 of Proposition 1

Full size image
We have seen that G[V_4] exhibits a nice star-like configuration (Fig. 5), due to V_4 being adjacent to both V_1 and V_2. Since none of V_1 and V_2 is adjacent to V_3 in Case 1, the connectivity configuration of G[V_3] is unclear. We next bipartition V_3 as evenly as possible (for example, by calling the \frac{5}{4}-approximation [3]), and let \{V_{31}, V_{32}\} denote the achieved 2-partition with |V_{31}| \le |V_{32}|. If |V_{32}| \le \frac{2}{3} |V_3|, and assuming there are multiple components of G[V_4 \setminus \{u\}] adjacent to V_{3i} (for some i \in \{1, 2\}) with their total size greater than |V_1|, then we find a minimal sub-collection of these components of G[V_4 \setminus \{u\}] adjacent to V_{3i} with their total size exceeding |V_1|. Denote by V'_4 the union of their vertex sets. Subsequently, create three new parts V_4 \cup V_1 \setminus V'_4, V'_4 \cup V_{3i}, and V_{3,3-i}, while keeping V_2 unchanged. One sees that this new 4-partition is better, since |V'_4| + |V_{3i}| \le 2 |V_1| + |V_{3i}| < \frac{1}{3} |V_4| + \frac{2}{3} |V_3| \le |V_4|.

In the other case where |V_{32}| > \frac{2}{3} |V_3|, by Lemma 3, G[V_3] also exhibits a nice star-like configuration centering at some vertex v, such that G[V_3 \setminus \{v\}] is disconnected and each component of G[V_3 \setminus \{v\}] has size less than \frac{1}{3} |V_3|. See an illustration in Fig. 6.

Fig. 6
figure 6
An illustration of the “bi-star”-like configuration of the graph G = (V, E), with respect to the 4-partition \{V_1, V_2, V_3, V_4\} in Case 1 of Proposition 1

Full size image
The following Bridge-1 operation aims to find a subset V'_3 \subset V_3 and a subset V'_4 \subset V_4 to form a new part that is larger than V_1, possibly cutting off another subset V''_4 from V_4 and merging it into V_3, and merging the old part V_1 into V_4. This way, a better 4-partition is achieved. We will prove later that when such a bridging operation is not applicable, each component in the residual graph by deleting the two star centers u and v has size at most 2|V_1| + |V_2|, and subsequently the 4-partition can be shown to be a \frac{12}{7}-approximation.

Definition 5
Operation Bridge-1(V_3, V_4):

precondition: In Case 1 of Proposition 1, there are multiple components of G[V_4 \setminus \{u\}] adjacent to V_3 with their total size greater than |V_1| + |V_2| + \frac{11}{24} |V_4|, and there is a vertex v \in V_3 such that G[V_3 \setminus \{v\}] is disconnected and each component has size less than \frac{1}{3} |V_3|.

effect: Find a component G[V^u_{4x}] of G[V_4 \setminus \{u\}], if exists, that is adjacent to a component G[V^v_{3y}] of G[V_3 \setminus \{v\}]; initialize V'_4 to be V^u_{4x} and V'_3 to be V^v_{3y}; iteratively,

let {{{\mathcal {C}}}}_3 denote the collection of the components of G[V_3 \setminus \{v\}] that are adjacent to V'_4, excluding V'_3;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 exceeds 2 |V_1| - |V'_3|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_3 with their total size exceeding 2 |V_1| - |V'_3|, adds their vertex sets to V'_3, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 is less than 2 |V_1| - |V'_3|, then the operation adds the vertex sets of all these components to V'_3;

let {{{\mathcal {C}}}}_4 denote the collection of the components of G[V_4 \setminus \{u\}] that are adjacent to V'_3, excluding V'_4;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 exceeds |V_1| - |V'_4|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_4 with their total size exceeding |V_1| - |V'_4|, adds their vertex sets to V'_4, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 is less than |V_1| - |V'_4|, then the operation adds the vertex sets of all these components to V'_4;

if both {{{\mathcal {C}}}}_3 and {{{\mathcal {C}}}}_4 are empty, then the operation terminates without updating the partition.

At termination, exactly one of |V'_3| > 2 |V_1| and |V'_4| > |V_1| holds.

When |V'_3| > 2 |V_1|, we have |V'_4| \le |V_1| and |V'_3| < 2 |V_1| + \frac{1}{3} |V_3|;

^{*} if the collection of the components of G[V_4 \setminus \{u\}] that are adjacent to V'_3, excluding V'_4, exceeds |V_1| - |V'_4|, then the operation greedily finds a minimal sub-collection of these components with their total size exceeding |V_1| - |V'_4|, and denotes by V''_4 the union of their vertex sets; subsequently, the operation creates three new parts V_4 \cup V_1 \setminus (V'_4 \cup V''_4), (V'_4 \cup V''_4) \cup V'_3, and V_3 \setminus V'_3;

^{*} otherwise, the operation greedily finds a minimal sub-collection of the components of G[V_4 \setminus \{u\}] that are not adjacent to V'_3 with their total size exceeding |V_1| - |V'_4|, and denotes by V''_4 the union of their vertex sets; subsequently, the operation creates three new parts V_4 \cup V_1 \setminus (V'_4 \cup V''_4), V'_4 \cup V'_3, and (V_3 \setminus V'_3) \cup V''_4.

When |V'_4| > |V_1|, we have |V'_4| \le 2 |V_1| and |V'_3| \le 2 |V_1|; the operation creates three new parts V_4 \cup V_1 \setminus V'_4, V'_4 \cup V'_3, and V_3 \setminus V'_3.

In all the above three cases of updating, the part V_2 is kept unchanged.

Lemma 8
When there are multiple components of G[V_4 \setminus \{u\}] adjacent to V_3 with their total size greater than |V_1| + |V_2| + \frac{11}{24} |V_4| in Case 1 of Proposition 1, and an operation Bridge-1(V_3, V_4) is applicable, then the 4-partition achieved by this operation is better than \{V_1, V_2, V_3, V_4\}.

Proof
Recall that there are three cases of updating the 4-partition.

In the first two cases, the operation achieves a subset V'_3 of size |V'_3| > 2 |V_1|, and by the sub-collection minimality and each component of G[V_3 \setminus \{v\}] being smaller than \frac{1}{3} |V_3|, |V'_3| < 2 |V_1| + \frac{1}{3} |V_3|. In the first case, V''_4 can be located and again by sub-collection minimality we have |V_1| < |V'_4| + |V''_4| \le 2 |V_1|. Therefore, for the three new parts, |V_4 \cup V_1 \setminus (V'_4 \cup V''_4)| < |V_4|, |(V'_4 \cup V''_4) \cup V'_3|< 4 |V_1| + \frac{1}{3} |V_3| < |V_4|, and |V_3 \setminus V'_3| < |V_3|, implying a better 4-partition.

In the second case, the components of G[V_4 \setminus \{u\}] that are not adjacent to V'_3 have their total size exceeding |V_2| + \frac{11}{24} |V_4|, and thus V''_4 can be located and again by sub-collection minimality we have |V_1| < |V'_4| + |V''_4| \le 2 |V_1|. Therefore, for the three new parts, |V_4 \cup V_1 \setminus (V'_4 \cup V''_4)| < |V_4|, |V'_4 \cup V'_3|< 3|V_1| + \frac{1}{3} |V_3| < |V_4|, and |(V_3 \setminus V'_3) \cup V''_4| < |V_3|, implying a better 4-partition.

The third case is similar to the first case. In this case, the operation achieves a subset V'_4 of size |V'_4| > |V_1|, and by the sub-collection minimality and each component of G[V_4 \setminus \{u\}] being no larger than |V_1|, |V'_4| \le 2 |V_1|. Therefore, for the three new parts, |V_4 \cup V_1 \setminus V'_4| < |V_4|, |V'_4 \cup V'_3| \le 4 |V_1| < |V_4|, and |V_3 \setminus V'_3| < |V_3|, implying a better 4-partition.

This proves the lemma. \square

Lemma 9
When there are multiple components of G[V_4 \setminus \{u\}] adjacent to V_3 with their total size greater than |V_1| + |V_2| + \frac{11}{24} |V_4| in Case 1 of Proposition 1, and no Bridge-1 operation is applicable, every connected component of G[V \setminus \{u, v\}] has size at most \max \{3 |V_1|, |V_2|\} \le 2 |V_1| + |V_2|.

Proof
From the definition of the Bridge-1 operation, when it starts with a component V'_4 of G[V_4 \setminus \{u\}] (or starts with a component V'_3 of G[V_3 \setminus \{v\}], respectively), at the end it achieves |V'_4| \le |V_1| and |V'_3| \le 2 |V_1| without updating the partition. Clearly, G[V'_4 \cup V'_3] is a connected component of G[V \setminus \{u, v\}]. One also sees that V_2 is also a connected component of G[V \setminus \{u, v\}]. Therefore, every connected component of G[V \setminus \{u, v\}] has size at most \max \{|V_1| + 2 |V_1|, |V_2|\} \le 2 |V_1| + |V_2|, using |V_1| \le |V_2| in the last inequality. \square

In the remaining case of Case 1 where the 4-partition \{V_1, V_2, V_3, V_4\} is yet unknown to be a \frac{24}{13}-approximation, by Lemma 9 we know that the graph G = (V, E) exhibits a “bi-star”-like configuration. That is, with respect to the 4-partition, there is a vertex u \in V_4 (v \in V_3, respectively) such that G[V_4 \setminus \{u\}] (G[V_3 \setminus \{v\}], respectively) is disconnected, and every connected component of G[V \setminus \{u, v\}] has size at most 2 |V_1| + |V_2|. In an optimal 4-partition denoted as \{V^*_1, V^*_2, V^*_3, V^*_4\}, at least two parts contain none of the two center vertices u and v, and thus their sizes are at most 2 |V_1| + |V_2|. Consequently |V^*_4| \ge \frac{1}{2} (|V| - 2 \times (2 |V_1| + |V_2|)) \ge \frac{7}{12} |V_4|. That is, the current 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{12}{7}-approximation. We conclude with the following theorem for Case 1:

Theorem 4
In Case 1 of Proposition 1, if there are multiple components of G[V_4 \setminus \{u\}] adjacent to V_3 with their total size greater than |V_1| + |V_2| + \frac{11}{24} |V_4| and no Bridge-1 operation is applicable, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{12}{7}-approximation.

Case 2 of Proposition 1
In Case 2 of Proposition 1, none of V_1 and V_2 is adjacent to V_4 (i.e., both V_1 and V_2 are adjacent to V_3 only and at the vertex v \in V_3 only). One sees that Case 2 is almost symmetric to Case 1, by switching V_3 with V_4; however, since V_3 might be strictly smaller than V_4, the argument differs slightly.

(One should forget about the entire Subsection 4.1 to read the following arguments.) We have seen that G[V_3] exhibits a nice star-like configuration (Lemma 7), but the connectivity configuration of G[V_4] is unclear. We next bipartition V_4 into \{V_{41}, V_{42}\} as evenly as possible with |V_{41}| \le |V_{42}| (for example, by calling the \frac{5}{4}-approximation [3]). If |V_{42}| \le \frac{2}{3} |V_4|, and assuming there are multiple components of G[V_3 \setminus \{v\}] adjacent to V_{4i} (for some i \in \{1, 2\}) with their total size greater than |V_1|, then we find a minimal sub-collection of these components of G[V_3 \setminus \{v\}] adjacent to V_{4i} with their total size exceeding |V_1|. Denote by V'_3 the union of their vertex sets, and subsequently create three new parts V_3 \cup V_1 \setminus V'_3, V'_3 \cup V_{4i}, and V_{4,3-i}, while keeping V_2 unchanged. One sees that this new 4-partition is better than \{V_1, V_2, V_3, V_4\}, since |V'_3| \le 2 |V_1| < \frac{1}{3} |V_4|.

In the other case where |V_{42}| > \frac{2}{3} |V_4|, by Lemma 3, G[V_4] also exhibits a nice star-like configuration centering at some vertex u, such that G[V_4 \setminus \{u\}] is disconnected and each component of G[V_4 \setminus \{u\}] has size less than \frac{1}{3} |V_4|. See an illustration in Fig. 7.

Fig. 7
figure 7
An illustration of the “bi-star”-like configuration of the graph G = (V, E), with respect to the 4-partition \{V_1, V_2, V_3, V_4\} in Case 2 of Proposition 1

Full size image
Furthermore, if the vertices of V_3 are not adjacent to any vertex of V_4 other than u, then the graph G = (V, E) exhibits a “bi-star”-like configuration. That is, with respect to the 4-partition, there is a vertex u \in V_4 (v \in V_3, respectively) such that G[V_4 \setminus \{u\}] (G[V_3 \setminus \{v\}], respectively) is disconnected, and every connected component of G[V \setminus \{u, v\}] has size less than \frac{1}{3} |V_4|. Using the fact that at least two parts in an optimal 4-partition do not contain any of the two center vertices u and v, one sees that the current 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{3}{2}-approximation (similar to, but much easier than, the following proof of Theorem 5).

In the remaining case of Case 2 of Proposition 1, there are vertices of V_3 adjacent to some vertices of V_4 \setminus \{u\}, and we design the following Bridge-2 operation almost identical to Bridge-1, but the roles of V_3 and V_4 are swapped.

Theorem 5
In Case 2 of Proposition 1, let V'_3 denote the union of the vertex sets of all the components of G[V_3 \setminus \{v\}] that are adjacent to V_4; if |V'_3| \le |V_2| + \frac{11}{24} |V_4|, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation.

Proof
See an illustration in Fig. 7. We note that the theorem statement is almost the same as Theorem 3, but the quantity |V_1| disappears since it is combined with |V_3| to replace |V_4|. The following proof thus is almost the same as the proof for Theorem 3.

If |V'_3| \le |V_2| + \frac{11}{24} |V_4| < \frac{9}{24} |V_4| (using Eq. (1) we have |V_3| > \frac{20}{24} |V_4|), then denote the components of G[V_3 \setminus \{v\}] not adjacent to V_4 as G[V^v_{3i}], i = 1, 2, \ldots \ell , with \ell \ge 3. Recall that |V_1| + |V_3| \ge |V_4| and |V^v_{3i}| \le |V_1|, for each i = 1, 2, \ldots \ell . In an optimal 4-partition denoted as \{V^*_1, V^*_2, V^*_3, V^*_4\}, assume v \in V^*_j. If V^*_j contains all these \ell + 2 subsets, V_1, V_2, V^v_{3i}, i = 1, 2, \ldots \ell , then |V^*_j| = |V_1| + |V_2| + |V_3| - |V'_3| \ge \frac{13}{24} |V_4|. In the other case, at least one of these \ell + 2 subsets becomes a separate part in \{V^*_1, V^*_2, V^*_3, V^*_4\}, of which the size is at most |V_2|, and thus by item 3) of Lemma 7 we have |V^*_4| \ge \frac{1}{3} (|V_1| + |V_3| + |V_4|) \ge \frac{2}{3} |V_4|. Therefore, we always have |V^*_4| \ge \frac{13}{24} |V_4|, and thus the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation. \square

Definition 6
Operation Bridge-2(V_3, V_4):

precondition: In Case 2 of Proposition 1, there are multiple components of G[V_3 \setminus \{v\}] adjacent to V_4 with their total size greater than |V_2| + \frac{11}{24} |V_4|, and there is a vertex u \in V_4 such that G[V_4 \setminus \{u\}] is disconnected and each component has size less than \frac{1}{3} |V_4|.

effect: Find a component G[V^u_{4x}] of G[V_4 \setminus \{u\}] (could be empty) that is adjacent to a component G[V^v_{3y}] of G[V_3 \setminus \{v\}]; initialize V'_4 to be V^u_{4x} and V'_3 to be V^v_{3y}; iteratively,

let {{{\mathcal {C}}}}_3 denote the collection of the components of G[V_3 \setminus \{v\}] that are adjacent to V'_4, excluding V'_3;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 exceeds |V_1| - |V'_3|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_3 with their total size exceeding |V_1| - |V'_3|, adds their vertex sets to V'_3, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 is less than |V_1| - |V'_3|, then the operation adds the vertex sets of all these components to V'_3;

let {{{\mathcal {C}}}}_4 denote the collection of the components of G[V_4 \setminus \{u\}] that are adjacent to V'_3, excluding V'_4;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 exceeds 2 |V_1| - |V'_4|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_4 with their total size exceeding 2 |V_1| - |V'_4|, adds their vertex sets to V'_4, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 is less than 2 |V_1| - |V'_4|, then the operation adds the vertex sets of all these components to V'_4;

if both {{{\mathcal {C}}}}_3 and {{{\mathcal {C}}}}_4 are empty, then the operation terminates without updating the partition.

At termination, exactly one of |V'_4| > 2 |V_1| and |V'_3| > |V_1| holds.

When |V'_4| > 2 |V_1|, we have |V'_3| \le |V_1| and |V'_4| < 2 |V_1| + \frac{1}{3} |V_4|;

^{*} if the collection of the components of G[V_3 \setminus \{v\}] that are adjacent to V'_4, excluding V'_3, exceeds |V_1| - |V'_3|, then the operation greedily finds a minimal sub-collection of these components with their total size exceeding |V_1| - |V'_3|, and denotes by V''_3 the union of their vertex sets; subsequently, the operation creates three new parts V_3 \cup V_1 \setminus (V'_3 \cup V''_3), (V'_3 \cup V''_3) \cup V'_4, and V_4 \setminus V'_4;

^{*} otherwise, the operation greedily finds a minimal sub-collection of the components of G[V_3 \setminus \{v\}] that are not adjacent to V'_4 with their total size exceeding |V_1| - |V'_3|, and denotes by V''_3 the union of their vertex sets; subsequently, the operation creates three new parts V_3 \cup V_1 \setminus (V'_3 \cup V''_3), V'_3 \cup V'_4, and (V_4 \setminus V'_4) \cup V''_3.

When |V'_3| > |V_1|, we have |V'_3| \le 2 |V_1| and |V'_4| \le 2 |V_1|; the operation creates three new parts V_3 \cup V_1 \setminus V'_3, V'_3 \cup V'_4, and V_4 \setminus V'_4.

In all the above three cases of updating, the part V_2 is kept unchanged.

Lemma 10
When there are multiple components of G[V_3 \setminus \{v\}] adjacent to V_4 with their total size greater than |V_2| + \frac{11}{24} |V_4| in Case 2 of Proposition 1, and the operation Bridge-2(V_3, V_4) is applicable, then the 4-partition achieved by this operation is better than \{V_1, V_2, V_3, V_4\}.

Proof
The proof is almost identical to the proof of Lemma 8, by using 4 |V_1| < \frac{2}{3} |V_4|. \square

The following lemma states the same property as in Lemma 9, and we conclude with Theorem 6 for Case 2 of Proposition 1.

Lemma 11
When there are multiple components of G[V_3 \setminus \{v\}] adjacent to V_4 with their total size greater than |V_2| + \frac{11}{24} |V_4| in Case 2 of Proposition 1, and no Bridge-2 operation is applicable, every connected component of G[V_4 \cup V_3 \setminus \{u, v\}] has size at most \max \{3 |V_1|, |V_2|\} \le 2 |V_1| + |V_2|.

Theorem 6
In Case 2 of Proposition 1, if there are multiple components of G[V_3 \setminus \{v\}] adjacent to a vertex u \in V_4 with their total size greater than |V_2| + \frac{11}{24} |V_4| and no Bridge-2 operation is applicable, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{12}{7}-approximation.

Case 3 of Proposition 1
Case 3 of Proposition 1 is different from the above two cases, as one of V_1 and V_2 is adjacent to V_3 while the other adjacent to V_4. In fact, by Lemma 7, the graph G = (V, E) already exhibits a “bi-star”-like configuration. That is, with respect to the 4-partition, there is a vertex u \in V_4 (v \in V_3, respectively) such that G[V_4 \setminus \{u\}] (G[V_3 \setminus \{v\}], respectively) is disconnected, and every connected component of G[V \setminus \{u, v\}] has size at most |V_2|. See an illustration in Fig. 8. The argument thus can be made slightly simpler.

Theorem 7
In Case 3 of Proposition 1, assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4.

Let V'_3 denote the union of the vertex sets of all the components of G[(V_3 \cup V_i) \setminus \{v\}] that are adjacent to V_4; if |V'_3| \le |V_i| + \frac{7}{24} |V_4|, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation.

Let V'_4 denote the union of the vertex sets of all the components of G[(V_4 \cup V_j) \setminus \{u\}] that are adjacent to V_3; if |V'_4| \le |V_j| + \frac{11}{24} |V_4|, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation.

Proof
From Lemma 7 and Eq. (1) we know that |V_i| < \frac{1}{6} |V_4| and thus |V_3| > \frac{5}{6} |V_4|. For ease of presentation, using Lemma 7 we regard G[V_i] as a component of G[(V_3 \cup V_i) \setminus \{v\}], treated the same as the components of G[V_3 \setminus \{v\}].

If |V'_3| \le |V_i| + \frac{7}{24} |V_4| < \frac{11}{24} |V_4|, then denote the components of G[(V_3 \cup V_i) \setminus \{v\}] that are not adjacent to V_4 as G[V^v_{3x}], x = 1, 2, \ldots \ell , with \ell \ge 3. Recall that |V^v_{3x}| \le |V_i|, for each x = 1, 2, \ldots \ell . In an optimal 4-partition denoted as \{V^*_1, V^*_2, V^*_3, V^*_4\}, assume v \in V^*_y. If V^*_y contains all these \ell subsets, then |V^*_y| = |V_i| + |V_3| - |V'_3| > \frac{13}{24} |V_4|. In the other case, at least one of these \ell subsets becomes a separate part in \{V^*_1, V^*_2, V^*_3, V^*_4\}, of which the size is at most |V_i|, and thus we have |V^*_4| \ge \frac{1}{3} (|V_j| + |V_3| + |V_4|) \ge \frac{11}{18} |V_4|. Therefore, we always have |V^*_4| \ge \frac{13}{24} |V_4|, and thus the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation.

Also from Eq. (1) we have |V_j| < \frac{1}{6} |V_4|. Similarly, for ease of presentation, using Lemma 7 we regard G[V_j] as a component of G[(V_4 \cup V_j) \setminus \{u\}], treated the same as the components of G[V_4 \setminus \{u\}].

If |V'_4| \le |V_j| + \frac{11}{24} |V_4| < \frac{15}{24} |V_4|, then there are components of G[(V_4 \cup V_j) \setminus \{u\}] not adjacent to V_3, denoted as G[V^u_{4x}], x = 1, 2, \ldots \ell , with \ell \ge 3. Recall that |V^u_{4x}| \le |V_j|, for each x = 1, 2, \ldots \ell . In an optimal 4-partition denoted as \{V^*_1, V^*_2, V^*_3, V^*_4\}, assume u \in V^*_y. If V^*_y contains all these \ell subsets, then |V^*_y| = |V_j| + |V_4| - |V'_4| \ge \frac{13}{24} |V_4|. In the other case, at least one of these \ell subsets becomes a separate part in \{V^*_1, V^*_2, V^*_3, V^*_4\}, of which the size is at most |V_j|, and thus by Item 3) of Lemma 7 we have |V^*_4| \ge \frac{1}{3} (|V_i| + |V_3| + |V_4|) \ge \frac{2}{3} |V_4|. Therefore, we always have |V^*_4| \ge \frac{13}{24} |V_4|, and thus the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{24}{13}-approximation. \square

Corollary 1
In Case 3 of Proposition 1, assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4. If the 4-partition \{V_1, V_2, V_3, V_4\} is not yet a \frac{24}{13}-approximation, then |V_3 \cup V_1| \ge |V_4| (which is slightly stronger than |V_3 \cup V_i| \ge |V_4| stated in Lemma 7).

Proof
When i = 1, from Lemma 7 we have |V_3 \cup V_1| \ge |V_4|.

When i = 2, then j = 1 and thus from Lemma 7 every component of G[V_4 \setminus \{u\}] has size at most |V_1|. Theorem 7 says that some component of G[V_4 \setminus \{u\}], say G[V^u_{4x}], is adjacent to V_3. Since Pull(V^u_{4x} \subset V_4, V_3) is not applicable, we conclude that |V_3 \cup V_1| \ge |V_3 \cup V^u_{4x}| \ge |V_4|. Therefore, we always have |V_3 \cup V_1| \ge |V_4|. This proves the corollary. \square

We assume that V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4 in Case 3 of Proposition 1. Recall from Item 6) of Lemma 7 that if V_i (V_j, respectively) is also adjacent to V_4 (V_3, respectively), then it is adjacent to the vertex u (v, respectively). See an illustration in Fig. 8. The following operation Bridge-3(V_3, V_4) is again almost identical to Bridge-1 and Bridge-2 operations, but slightly simpler.

Fig. 8
figure 8
An illustration of the “bi-star”-like configuration of the graph G = (V, E), with respect to the 4-partition \{V_1, V_2, V_3, V_4\} in Case 3 of Proposition 1, where V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 and V_j (j = 3-i) is adjacent to the vertex u \in V_4

Full size image
Definition 7
Operation Bridge-3(V_3, V_4):

precondition: In Case 3 of Proposition 1, assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4, there are multiple components of G[(V_3 \cup V_i) \setminus \{v\}] adjacent to V_4 with their total size greater than |V_i| + \frac{7}{24} |V_4|, and there are multiple components of G[(V_4 \cup V_j) \setminus \{u\}] adjacent to V_3 with their total size greater than |V_j| + \frac{11}{24} |V_4|;

effect: Find a component G[V^u_{4x}] of G[V_4 \setminus \{u\}] (could be empty) that is adjacent to a component G[V^v_{3y}] of G[V_3 \setminus \{v\}]; initialize V'_4 to be V^u_{4x} and V'_3 to be V^v_{3y}; iteratively,

let {{{\mathcal {C}}}}_3 denote the collection of the components of G[V_3 \setminus \{v\}] that are adjacent to V'_4, excluding V'_3;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 exceeds |V_i| - |V'_3|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_3 with their total size exceeding |V_i| - |V'_3|, adds their vertex sets to V'_3, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_3 is less than |V_i| - |V'_3|, then the operation adds the vertex sets of all these components to V'_3;

let {{{\mathcal {C}}}}_4 denote the collection of the components of G[V_4 \setminus \{u\}] that are adjacent to V'_3, excluding V'_4;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 exceeds |V_j| - |V'_4|, then the operation greedily finds a minimal sub-collection of these components of {{{\mathcal {C}}}}_4 with their total size exceeding |V_j| - |V'_4|, adds their vertex sets to V'_4, and proceeds to termination;

^{*} if the total size of components in {{{\mathcal {C}}}}_4 is less than |V_j| - |V'_4|, then the operation adds the vertex sets of all these components to V'_4;

if both {{{\mathcal {C}}}}_3 and {{{\mathcal {C}}}}_4 are empty, then the operation proceeds to termination.

At termination, exactly one of |V'_3| > |V_i| and |V'_4| > |V_j| holds.

When |V'_3| > |V_i|, we have |V'_4| \le |V_j| and |V'_3| \le 2 |V_i|; the operation creates three new parts V'_4 \cup V'_3, V_4 \setminus V'_4, and (V_3 \setminus V'_3) \cup V_i, while keeping the part V_j unchanged.

When |V'_4| > |V_j|, we have |V'_3| \le |V_i| and |V'_4| \le 2 |V_j|; the operation creates three new parts V'_4 \cup V'_3, (V_4 \setminus V'_4) \cup V_j, and V_3 \setminus V'_3, while keeping the part V_i unchanged.

Lemma 12
In Case 3 of Proposition 1, assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4. If there are multiple components of G[(V_3 \cup V_i) \setminus \{v\}] adjacent to V_4 with their total size greater than |V_i| + \frac{7}{24} |V_4|, there are multiple components of G[(V_4 \cup V_j) \setminus \{u\}] adjacent to V_3 with their total size greater than |V_j| + \frac{11}{24} |V_4|, and a Bridge-3(V_3, V_4) operation is applicable, then the 4-partition achieved by this operation is better than \{V_1, V_2, V_3, V_4\}.

Proof
Recall from Eq. (1) that |V_1| \le |V_2| < \frac{1}{6} |V_4|. When the Bridge-3(V_3, V_4) operation achieves a pair (V'_3, V'_4), by the minimality of the sub-collections we know that |V'_3| \le 2 |V_i| and |V'_4| \le 2 |V_j|, implying |V'_3 \cup V'_4| < 3 \times \frac{1}{6} |V_4| = \frac{1}{2} |V_4|. Also, if |V'_3| > |V_i|, then for the other two new parts, |V_4 \setminus V'_4| < |V_4|, and |(V_3 \setminus V'_3) \cup V_i| < |V_3|; if |V'_4| > |V_j|, then for the other two new parts, |(V_4 \setminus V'_4) \cup V_j| < |V_4|, and |V_3 \setminus V'_3| < |V_3|. That is, the size of its largest part is reduced by at least 1. This proves the lemma. \square

The following lemma states the same property as in Lemmas 9 and 11, and we conclude with Theorem 8 for Case 3 of Proposition 1.

Lemma 13
Assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4 in Case 3 of Proposition 1. When there are multiple components of G[(V_3 \cup V_i) \setminus \{v\}] adjacent to V_4 with their total size greater than |V_i| + \frac{7}{24} |V_4|, there are multiple components of G[(V_4 \cup V_j) \setminus \{u\}] adjacent to V_3 with their total size greater than |V_j| + \frac{11}{24} |V_4|, and no Bridge-3 operation is applicable, every connected component of G[V_4 \cup V_3 \setminus \{u, v\}] has size at most |V_1| + |V_2|.

Theorem 8
In Case 3 of Proposition 1, assume V_i \in \{V_1, V_2\} is adjacent to V_3 at the vertex v \in V_3 while V_j (j = 3-i) is adjacent to the vertex u \in V_4, and no Bridge-3 operation is applicable, then the 4-partition \{V_1, V_2, V_3, V_4\} is a \frac{4}{3}-approximation.

Combining all the three cases of Proposition 1, we can design the following algorithm APPROX-4 as depicted in Fig. 9 for the 4-BGP problem, which is iterative in nature and in every iteration it applies one of the Merge, the Pull, and the three Bridge operations. And we have the following final conclusion for the 4-BGP problem:

Fig. 9
figure 9
A high-level description of the algorithm APPROX-4 for 4-BGP

Full size image
Theorem 9
The algorithm APPROX-4 is an O(|V|^2 |E|)-time \frac{24}{13}-approximation for the 4-BGP problem.

Proof
Note that every local improvement operation can be executed in O(|V|+|E|) time, via a graph traversal. Since each operation achieves a better 4-partition, that is, either the size of the largest part is reduced by at least 1, or the largest part is unchanged by the second largest part is reduced by at least 1, the total number of executed operations is O(|V|^2). We conclude that the running time of the algorithm APPROX-4 is O(|V|^2 |E|). The performance ratio is taken as the maximum (i.e., the worst) among \{\frac{24}{13}, \frac{12}{7}, \frac{3}{2}, \frac{4}{3}\}, which is \frac{24}{13}. \square

Conclusions
We studied the k -BGP problem to partition the vertex set of a given connected graph G = (V, E) into k parts, such that the subgraph induced by each part is connected and the maximum cardinality among these k parts is minimized. The problem is NP-hard for any fixed k \ge 2 [6]. Prior approximation algorithms were proposed for only k = 2, 3 (but for the more general vertex-weighted graphs) [3]. Our focus is k \ge 4. The main contributions are a k/2-approximation algorithm for k -BGP, for any fixed k \ge 3, and a 24/13-approximation for 4-BGP. Along the way to these algorithms, we have designed several intuitive and interesting local improvement operations.

There is no proven non-trivial lower bound on the approximation ratio yet for the k -BGP problem. We feel that it could be challenging to design an approximation algorithm for 3-BGP with a ratio better than 3/2; but for 4-BGP we believe the parameters in the three proposed Bridge operations can be adjusted better, though non-trivially, leading to an 8/5-approximation. We leave it open on whether or not k -BGP admits an o(k)-approximation.

There are constant ratio approximation algorithms for the vertex-weighted MAX-MIN k -BGP problem for k = 2, 3 [3, 4] (see Table 1). It would be interesting to design the first non-trivial approximation algorithms for cardinality MAX-MIN k -BGP for any fixed k \ge 4.