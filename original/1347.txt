Abstract
Biró et al. (Discrete. Math 100(1–3):267–279, 1992) introduced the concept of H-graphs, intersection graphs of connected subgraphs of a subdivision of a graph H. They are related to and generalize many important classes of geometric intersection graphs, e.g., interval graphs, circular-arc graphs, split graphs, and chordal graphs. Our paper starts a new line of research in the area of geometric intersection graphs by studying several classical computational problems on H-graphs: recognition, graph isomorphism, dominating set, clique, and colorability. We negatively answer the 25-year-old question of Biró, Hujter, and Tuza which asks whether H-graphs can be recognized in polynomial time, for a fixed graph H. We prove that it is -complete if H contains the diamond graph as a minor. On the positive side, we provide a polynomial-time algorithm recognizing T-graphs, for each fixed tree T. For the special case when T is a star 
 of degree d, we have an 
-time algorithm. We give - and -time algorithms solving the minimum dominating set problem on 
-graphs and H-graphs, parametrized by d and the size of H, respectively. The algorithm for H-graphs adapts to an -time algorithm for the independent set and the independent dominating set problems on H-graphs. If H contains the double-triangle as a minor, we prove that the graph isomorphism problem is GI-complete and that the clique problem is APX-hard. On the positive side, we show that the clique problem can be solved in polynomial time if H is a cactus graph. Also, when a graph has a Helly H-representation, the clique problem is polynomial-time solvable. Further, we show that both the k-clique and the list k-coloring problems are solvable in FPT-time on H-graphs, parameterized by k and the treewidth of H. In fact, these results apply to classes of graphs with treewidth bounded by a function of the clique number. We observe that H-graphs have at most 
 minimal separators which allows us to apply the meta-algorithmic framework of Fomin, Todinca, and Villanger (2015) to show that for each fixed t, finding a maximum induced subgraph of treewidth t can be done in polynomial time. In the case when H is a cactus, we improve the bound to 
.

Introduction
An intersection representation  of a graph G is a collection of sets 
 such that 
 if and only if . Many important classes of graphs arise from restricting the sets 
 to geometric objects (e.g., intervals, circular-arcs, convex sets, planar curves). The study of these geometric representations has been motivated through various application domains. For example, intersection graphs of planar curves relate to circuit layout problems [7, 46], interval graphs relate to scheduling problems [43] and can be used to model biological problems (see, e.g., [36]), and intersection representations of convex sets relate to the study of wireless networks [32].

We study H-graphs, intersection graphs of connected subgraphs of a subdivision of a fixed graph H, introduced by Biró, Hujter, and Tuza [3]. We answer their open question concerning the problem of recognition of H-graphs and further start a new line of research in the area of geometric intersection graphs, by studying H-graphs from the point of view of fundamental computational problems of theoretical computer science: recognition, graph isomorphism, dominating set, clique, and colorability. We begin by discussing several closely related graph classes.

Interval graphs () form one of the most studied and well-understood classes of intersection graphs. In an interval representation, each set 
 is a closed interval of the real line; see Fig. 1a. A primary motivation for studying interval graphs (and related classes) is the fact that many important computational problems can be solved in linear time on them; see for example [5, 13, 40].

Fig. 1
figure 1
a An interval graph and one of its interval representations. b A chordal graph and one of its representations as an intersection graph of subtrees of a tree

Full size image

Chordal graphs () were originally defined as the graphs without induced cycles of length greater than three. Equivalently, as shown by Gavril [26], a graph is chordal if and only if it can be represented as an intersection graph of subtrees of some tree; see Fig. 1b. This immediately implies that  is a subclass of the chordal graphs.

The recognition problem can be solved in linear time for  [45], and such algorithms can be used to generate an intersection representation by subtrees of a tree. However, asking for special host trees can be more difficult. For example, when the desired tree T is a part of the input, deciding whether G is a T-graph is NP-complete [38]. Additionally, some other important computational problems, for example the dominating set [4] and graph isomorphism [40], are harder on chordal graphs than on interval graphs.

One can ask related questions about having “nice” tree representations of a given chordal graph. For example, for a given graph G, if one would like to find a tree T with the fewest leaves such that G is a T-graph, it can be done in polynomial time [33], this is known as the leafage problem. However, for any fixed , if one would like to find a tree T where G is a T-graph and, for each vertex v, the subtree representing v has at most d leaves, the problem again becomes NP-complete [15], this is known as the d-vertex leafage problem. The minimum vertex leafage problem can be solved in 
-time via a somewhat elaborate enumeration of minimalFootnote 1 tree representations of G with exactly  leaves where  is the leafage of G [15].

Split graphs (SPLIT) form an important subclass of chordal graphs. These are the graphs that can be partitioned into a clique and an independent set. Note that every split graph can be represented as an intersection graph of subtrees of a star 
, where 
 is the complete bipartite graph 
.

Circular-arc graphs () naturally generalize interval graphs. Here, each set 
 corresponds to an arc of a circle. The Helly circular-arc graphs form an important subclass of circular-arc graphs. A graph G is a Helly circular-arc graph if the collection of circular-arcs 
 satisfies the Helly property, i.e., in each sub-collection of  whose sets pairwise intersect, the common intersection is non-empty. Interestingly, it is NP-hard to compute a minimum coloring for Helly circular-arc graphs [27].

H-Graphs
Biró, Hujter, and Tuza [3] introduced H-graphs. Let H be a fixed graph. A graph G is an intersection graph of H if it is an intersection graph of connected subgraphs of H, i.e., the assigned subgraphs 
 and 
 of H share a vertex if and only if .

A subdivision 
 of a graph H is obtained when the edges of H are replaced by internally disjoint paths of arbitrary lengths. A graph G is a topological intersection graph of H if G is an intersection graph of a subdivision 
 of H. We say that G is an H-graph and the collection 
 of connected subgraphs of 
 is an H-representation of G. The class of all H-graphs is denoted by . Alternatively, we can view H-graphs geometrically as intersection graphs of connected subregions of a one-dimensional simplicial complex (this is a topological definition of a graph). We have the following relations:


 
 
 

Motivation. It is easy to see that every graph G is an H-graph for an appropriate choice of H (e.g., by taking ). In this sense, the families of H-graphs provide a parameterized view through which we can study all graphs. We also mentioned that several important computational problems are polynomial on interval (the most basic class of H-graphs), but are hard on chordal graphs. This inspires the question of when we can use this parameterization to provide a refined understanding of computational problems. Of course, to approach this problem, we first need to observe some relations among the classes of H-graphs and related well-studied graph classes.

For any pair of (multi-)graphs 
 and 
, if 
 is a minor of 
, then 
. Moreover, if 
 is a subdivision of 
, then 
. Specifically, we have an infinite hierarchy of graph classes between interval and chordal graphs since for every tree T with at least one edge, . This motivates the study of the above mentioned problems on T-graphs, for a fixed tree T.

We note a dichotomy regarding computing a minimum coloring on H-GRAPH. Namely, if H contains a cycle, then computing a minimum coloring on  is already NP-hard even for the subclass of Helly H-graphs [27]. On the other hand, when H is acyclic, a minimum coloring can be computed in linear time since  is a subclass of .

Biró, Hujter, and Tuza originally introduced H-graphs in the context of the (p, k) pre-coloring extension problem (PrColExt()). In this problem, the input is a graph G together with a p-coloring of , and the goal is to find a proper k-coloring of G extending this pre-coloring. Biró, Hujter, and Tuza [3] provide an  (in k and ) algorithm to solve PrColExt() on H-graphs. Biró, Hujter, and Tuza asked the following question which we answer negatively.

[Biró, Hujter, and Tuza [3], 1992] Let H be an arbitrary fixed graph. Is there a polynomial algorithm testing whether a given graph G is an H-graph?

Our Results
We give a comprehensive study of H-graphs from the point of view of several important problems of theoretical computer science: recognition, graph isomorphism, dominating set, clique, and colorability. We focus on five collections of classes of graphs. In particular, 
, , , Helly , and , where 
 is the star of degree d, T is a tree, C is a cactus, and H is an arbitrary graph. Our results are displayed in Table 1. The following list provides a summary of our results and should help the reader to navigate through the paper:

Recognition. In Sect. 3 we negatively answer the question of Biró, Hujter, and Tuza. We prove that recognizing H-graphs is -complete if H is not a cactus (Theorem 1). Equivalently this means that H contains the diamond graph as a minor. We do this by a reduction from the problem of testing whether the interval dimension of a partial order of height 2 is at most 3. On the positive side, in Sect. 4, we give an 
-time algorithm for recognizing 
-graphs (Theorem 3), and we give a polynomial-time algorithm for recognizing T-graphs (Theorem 4), for a fixed tree T.

Dominating set. In Sect. 5, we solve the problem of finding a minimum dominating set for 
-graphs in time 
 (Theorem 5) and for H-graphs in 
-time (Theorem 6). The latter algorithm can be easily adapted to solve the maximum independent set problem and minimum independent dominating set problem in 
-time for H-graphs (Corollary 7).

Clique. In Sect. 6, we study the clique problem. We show that if H contains the double-triangle 
 (see Fig. 5a) as a minor, then the clique problem is APX-hard for H-graphs (Theorem 8). On the positive side, we solve the clique problem in polynomial time for Helly H-graphs (Theorem 9), and in the case when H is a cactus (Theorem 10).

Graph isomorphism. Theorem 8 also gives that if H contains the double-triangle 
 (see Fig. 5a) as a minor, then graph isomorphism problem is -complete for H-graphs.

k-coloring and k-clique. In Sect. 7, we use treewidth based methods to provide an -time algorithm for finding a k-clique in an H-graphs (Theorem 11) and an -time algorithm for k-coloring of H-graphs (Theorem 12). In fact, these results apply to more general graph classes formalized via the concept of a clique-treewidth property (which is defined as in the parameter-treewidth properties of bidimensionality theory; see, e.g., [18]) and may be of independent interest.

Minimal Separators. Finally, in Sect. 8, we show that each H-graph has 
 minimal separators (Theorem 13) and, when H is a cactus, we improve this bound to 
 (Theorem 15). Thus, by the algorithmic framework of Fomin, Todinca, and Villanger [23], on H-graphs, we obtain a large class of problems (including, e.g., feedback vertex set) which can be solved in XP-time (parameterized by ) and polynomial time (in both  and the size of the input graph) when H is a cactus.

Table 1 The table of the complexity of different problems for the four considered classes. Our contributions are highlighted. Note:  denotes that A is a minor of B, and 
 denotes the double-triangle (see Fig. 5)
Full size table

Open problems. Since all the sections are mostly self-contained, instead of including a separate section for open problems and conclusions, we decided to include the open problems and possible future research directions in the corresponding sections.

Recent developments. After the publication of the two conference articles [16, 17] (which this paper includes and extends), there have already been further developments regarding H-graphs [22, 35]. The results contained in these articles complement and build on our work regarding combinatorial optimization problems. For instance, to complement our XP-time algorithms for minimum dominating set and maximum independent set, Fomin, Golovach, and Raymond [22] show that these problems are W[1]-hard, when parameterized by  and the desired solution size. They additionally tighten our result regarding the fixed parameter tractability of the k-Clique problem on H-graphs by showing that this problem admits a polynomial size kernel in terms of both  and the solution size. Jaffke, Kwon, and Telle [35] adapt the W[1]-hardness proof from [22] for maximum independent set to additionally show that feedback vertex set is also W[1]-hard. Only recently, the problem of testing isomorphism of 
 graphs was solved in FPT time [1].

Preliminaries
We assume that the reader is familiar with the following standard and parameterized computational complexity classes: NP, XP, and FPT (see, e.g., [12] for further details).

Let G be an H-graph. For a subdivision 
 certifying , we use 
 to denote the subgraph of 
 corresponding to . The vertices of H and 
 are called nodes. By  we denote the size of H, i.e., .

We refer to the degree one nodes of H as leaves and the nodes degree at least three as branching points. Note that, while we sometimes speak of degree two nodes in H, they are actually redundant since their presence or absence does not change . As such, by thinking of H as a multi-graph with loops one can nearly always avoid the need for any nodes of degree two (by contracting edges where one end point has degree two). The exception here is the case of H being a cycle which leads to the true H simply being a single vertex with one loop, i.e., this vertex has degree two. Of course, when H is a tree, this works without the need for H to be a multi-graph.

We have some special notation for the case when H is a tree. Let a, b be two nodes of 
. By 
 we denote the path from a to b. Further, we define 
, and 
, 
 analogously.

Let . Then G[S] is the subgraph of G induced by S, and  is the graph obtained from G by deleting the vertices in S (together with the incident edges). For a graph G, we assume G has n vertices and m edges.

In 1965, Fulkerson and Gross proved the following fundamental characterization of interval graphs by orderings of maximal cliques. It is used implicitly in several proofs.

Lemma 2.1
(Fulkerson and Gross [20]) A graph G is an interval graph if and only if there exists a linear ordering  of the maximal cliques of G such that for every  the maximal cliques containing u appear consecutively in .

A remark on the size of subdivisions and membership in NP. As membership in  is certified through the existence of an appropriate subdivision of H, one might wonder just how large subdivision 
 is necessary to ensure that any n-vertex H-graph G has a representation by connected subgraphs of 
. Note that as long as the size of this subdivision is bounded by a polynomial in n, H-graph recognition does indeed belong to NP. We observe that it suffices to subdivide every edge of H 2n times to accommodate an n-vertex H-graph, i.e., without loss of generality the size of 
 is at most .

To see this, we consider an edge ab of H, and its corresponding path 
 in 
. Observe that, for each vertex , 
 has at most two leaves on this path. Thus, if , there must be a 
 which does not contain any leaf of any 
. In particular, this 
 can be contracted into its neighbour on the path while preserving the representation of G. Therefore, it suffices to consider subdivisions of size  and, in particular, for every H, recognition of H-graphs is in .

Recognition Is Hard If H Is not a Cactus
In this section, we negatively answer a question posed by Biró, Hujter, and Tuza [3, Problem 6.3]. Namely, we prove that testing whether a graph is an H-graph is NP-complete when the diamond graphFootnote 2D is a minor of H. Note that this sharply contrasts the polynomial time solvability of the recognition problem for circular-arc graphs (i.e., when H is a cycle). Before getting to the hardness proof itself, we first establish a technical (though rather straightforward to prove) lemma regarding the essentially unique (up to automorphism) H-representability of the 3-subdivision 
 of H as an H-graph. Namely, 
 is obtained from H by subdividing each edge exactly 3 times, that is, in 
 we have one vertex 
 for each vertex v of H, and for each edge  of H we have the path 
.

Lemma 3.1
Let H be any multi-graph without vertices of degree 2, and let 
 be the 3-subdivision of H. The graph 
 is an H-graph and, for every subdivision 
 certifying 
 (via the representation 
, we have:

For each non-leaf vertex v of H, the representation 
 of the corresponding vertex 
 in 
 contains exactly one branching point p of H where the degree of v (and 
) and p coincide.

For each edge  of H and the corresponding path 
 in 
, the representation 
 of 
 is strictly contained within the subdivision of a single edge 
 of H such that for distinct edges e, f of H with corresponding “middle” vertices 
 in 
, 
 and 
 are contained within subdivisions of distinct edges of H.

Moreover, each H-representation of 
 defines an automorphism of H.

Proof
We first note that this holds trivially for the case when H is 
 or 
.

We now observe that 
 is indeed an H-graph. Let 
 be the 4-subdivision of H, that is, in 
 the edge  of H becomes the path 
. For each vertex v of H with incident edges 
, we represent 
 by the star 
. For each edge uv of H, we represent:

 by 
 the edge 
,

 by 
 the edge 
, and

 by 
 the edge 
.

It is easy to see that this collection of subgraphs of 
 is indeed H-representation of 
.

So, we now consider an arbitrary H-representation 
 of 
, where 
 is the subdivision of H and establish the claimed properties.

Suppose that there is a vertex v of H where v has degree at least three (with incident edges 
) and 
 does not contain a branching point, i.e., all nodes in 
 have degree at most two. Now, since the neighborhood 
 of 
 is an independent set (and ), this implies that (without loss of generality), 
 is contained within 
. However, this now makes it impossible to represent 
 since 
 should intersect 
 but should not intersect 
. Thus, for each vertex v of H with degree at least three, 
 contains a branching point. Note that no branching point can occur in two such 
 and 
, thus, the vertices of degree at least three are bijectively mapped to the branching points. Finally, since we now know that 
 contains exactly one branching point, we remark that the degree of this branching point must match be at least the degree of 
 as otherwise some 
 would be contained in 
 contradicting the H-representation at hand. Thus, indeed the degree of this branching point must coincide with the degree of 
 (and v).

Now consider any edge  of H. Observe that 
 cannot contain any branching points since each branching point is contained in a representation 
 where 
 is not a neighbor of 
. Thus, 
 is indeed contained within the subdivision of an edge pq of H, and in particular when p (q) is a branching point, then without loss of generality 
 (
) contains u (p). Observe that, when u has degree at least three, 
 consists of a subpath of the subdivision of pq in 
 that includes p and as such, for any edge f distinct from e, 
 must be contained within the subdivision of a different edge of H. Moreover, this means that for each edge  connecting two vertices of degree at least three, 
 is indeed represented on the subdivision of an edge connecting the corresponding branching points. Also, when one of u or v, say v has degree one (i.e., v is a leaf of H and u has degree at least three), then 
 is contained in the subdivision of an edge pq incident to the branching point p contained in 
 where q has degree one in H. In particular, here we also have that 
 is contained in the subdivision of pq.

Finally, based on these properties, we indeed have an automorphism of H as required. 

Our hardness proof stems from the NP-hardness of testing whether a partial order (poset) with height one has interval dimension at most three; shown by Yannakakis [49]. We denote this problem by IntDim(1,3). Note that having height one means that every element of the poset is either minimal or maximal.

Consider a collection I of closed intervals on the real line. A poset 
 can be defined on I by considering intervals  and setting  if and only if the right endpoint of x is strictly to the left of the left endpoint of y. A partial order  is called an interval order when there is an I such that 
. The interval dimension of a poset , is the minimum number of interval orders whose intersection is , i.e., for elements ,  if and only if x is before y in all of the interval orders. Finally, the incomparability graph 
 of a poset  is the graph with  and 
 if and only if u and v are not comparable in .

Note that if  has height one, then 
 is the complement of a bipartite graph. The vertices 
 naturally partition into two cliques 
 and 
, containing the maximal and the minimal elements of , respectively. An example depicting a D-representation of a specific  is provided in Fig. 2, where D is the diamond graph. With these definitions and the prior lemma in place, we now prove the theorem of this section.

Fig. 2
figure 2
a A partially ordered set  of height 1, interval dimension 3, but not 2. We define the following interval orders: 
, 
, and 
, where 
 represents an interval corresponding to . Note that 
. b An illustration of part of the D-representation. Here, 
 and 
 indicate the subgraphs representing the elements a and b

Full size image

Theorem 1
Testing if G is an H -graph is NP -complete if the diamond graph D is a minor of H.

Proof
The proof is split into two parts. In the Part 1, we prove the essential case which shows that testing whether G is an D-graph is NP-hard. This argument is generalized in Part 2 to the case when H contains D as a minor.

Part 1: H is the diamond. First, we summarize the idea behind our proof. As stated above, we will encode an instance  of IntDim(1,3) as an instance of membership testing in D-GRAPH. For a given height 1 poset , we construct its incomparability graph 
, slightly augment 
 to get a graph G, and show that G is in D-GRAPH if and only if the interval dimension of  is at most 3. In particular, a “middle” part of the three paths connecting the two degree 3 vertices in D will encode the three interval orders whose intersection is .

Note that, we consider H as the multi-graph consisting of three parallel edges 
 between two nodes 
 and 
 To construct G, we use the graph 
 which the 3-subdivision of H. Namely, 
 has two vertices 
 and 
 of degree three and nine vertices 
 
 
 of degree two where 
 is a path for each . Note that, by Lemma 3.1, without loss of generality, 
 is an H-graph where in every H-representation of 
, say on a subdivision 
 of H, we have:

 contains 
 and 
 contains 
,

For each , 
 is contained in the subdivision of 
.

It is within these 
 paths that we will see the interval orders.

We are now ready to construct our graph G from 
 and the graph 
 of a given height one poset , recall that 
 and 
 denote cliques on the minima and maxima of  respectively. Let 
 and let 
. The graph G is the union of 
 and 
 where, additionally, each vertex of 
 is adjacent to each vertex of 
 and each vertex of 
 is adjacent to each vertex of 
.

Claim 3.1
 has interval dimension at most 3 if and only if G is a H-graph.

Proof
For the reverse direction, consider an H-representation of G on a subdivision 
 of H. As remarked above, by Lemma 3.1, 
 contains the node 
 and 
 contains the node 
. The minimal elements of  are not adjacent to the vertices of 
. Therefore, for each 
, 
 cannot contain 
, i.e., 
 is a subtree of 
. In particular, for each of the three 
 paths A, B, C in 
, 
 defines one (possibly empty) subpath/interval (originating in 
). Similarly, for each 
, 
 cannot contain 
 and as such 
 defines, for each of A, B, C, one subpath (originating in 
). It is easy to see that these intervals provide the interval orders 
, 
, and 
 such that 
.

For the forward direction, let 
, 
, 
 be sets of intervals such that 
. We assume that each interval in 
 is labelled according to the corresponding element of . Further, we assume that the intervals corresponding to the minimal elements have their left endpoints at 0 and their right endpoints are integers in the range . Similarly, we assume that the intervals corresponding to the maximal elements have their right endpoints at n and their left endpoints are integers in the range [1, n]. With this in mind, for each minimal element x and each , we use 
 to denote the right endpoint of its interval in 
, and for each maximal element y and each , we use 
 to denote the left endpoint of its interval in 
.

Let 
 be the subdivision of H obtained by subdividing the three 
 edges  times. We label the three 
-paths in 
 as follows:

,

, and

.

We are now ready to describe an H-representation of G on 
. Each minimal element x is represented by the minimal subtree of 
 which includes the nodes 
. Similarly, each maximal element y is represented by the minimal subtree of 
 which includes the nodes 
. We can now see that the comparable elements of  are represented by disjoint subgraphs of 
 and that the incomparable elements map to intersecting subgraphs. Finally, the vertices of 
 are represented as follows:

 is represented by the subtree induced by 
, 
. 
, and 
; analogously, 
 is represented by the subtree induced by 
, 
, 
, and 

, 
, and 
 are represented by the edges 
, 
, and 
, respectively; analogously, 
, 
, and 
 are represented by the edges 
, 
, and 
, respectively, and

 is represented by the path 
, and

 is represented by the path 
, and

 is represented by the path 
.

Clearly, in this construction, the graph 
 is correctly represented. Moreover, the subtree corresponding to every minimal element includes all of the nodes 
 
 
 
 
 
 
, but none of the opposite -nodes. Thus, each minimal element is universal to 
 and non-adjacent to the vertices of 
, as needed. Symmetrically, each maximal element is universal to 
 and non-adjacent to the vertices of 
. It follows that G is an H-graph.

This completes the first part of the proof.

Part 2: H contains the diamond graph D as a minor. The argument here follows very similarly to the proof shown in Part 1. We again use the 3-subdivision 
 of H which, by Lemma 3.1, canonically “covers” H. Again, 
 will be used as part of the graph G we will construct from 
 so that  if and only if  has interval dimension at most 3. Importantly, 
 also allows us to, with a careful choice of 
 and 
, appropriately restrict the representations of the minima and maxima to only use a chosen diamond minor of H (up to automorphism of course) as before.

Observe that, since H contains D as a minor (and the maximum degree of D is three), a subdivision of D (or D itself) is a subgraph of H. Let 
 be a subgraph of H that is a subdivision of D. In particular, 
 consists of two nodes 
 and 
 of degree 3 and three 
-paths A, B, C that are edge disjoint and whose internal vertices are of degree 2. Let 
, 
, and 
 denote the three edges incident to the node 
 in 
. These three edges will be used equivalently to the three 
 edges as in Part 1, i.e., they will the “location” in H where we will see the three intervals certifying that our original poset has interval dimension 3.

Now, let 
 be the subgraph of 
 corresponding to 
 (
 is also a subdivision of D). Let 
 be the vertices in 
 corresponding (via the subdivision of H to 
) to 
 in 
 respectively, and further:

let 
 be the path in 
 corresponding to the subdivision of the edge  of 
, and

let 
 be the path in 
 corresponding to the subdivision of the edge  of 
, and

let 
 be the path in 
 corresponding to the subdivision of the edge  of 
.

We are now ready to construct our graph G from 
 and the graph 
 of a given height one poset  so that  if and only if  has interval dimension three. Recall that 
 and 
 denote cliques on the minima and maxima of  respectively. As in Part 1, we let 
. Similarly to Part 1, we let 
 be the vertex set of the minimal subgraph of 
 containing 
. In other words 
. Now, as in Part 1, the graph G is the union of 
 and 
 where, additionally, each vertex of 
 is adjacent to each vertex of 
 and each vertex of 
 is adjacent to each vertex of 
.

The completion of the proof now follows nearly identically to the proof of the claim in Part 1. Namely, by Lemma 3.1, 
 has a unique up to automorphism H-representation, and the vertices of 
 and 
 can essentially only be represented on the 
 part of H (due to their adjacency with the vertices of 
)Footnote 3. Moreover, within the three edges , there will be the representations of 
 and within these representations we will indeed have the (at most) 3 interval models. 

The next section gives a positive answer for the following problem in the case when H is a tree. Also, recall that when H is a single cycle,  is the class of circular-arc graphs and as such can be recognized in linear time. This leaves the following problem.

Problem 1
For a non-tree fixed cactus graph H (other than a single cycle), is there a polynomial-time time algorithm testing whether G is an H-graph?

Polynomial-Time Recognition Algorithms
We present an 
-time algorithm recognizing 
-graphs and an -time algorithm recognizing T-graphs (parametrized by the size of the tree T). We begin with a lemma that motivates our approach. It implies that if G is a T-graph, then there exists a representation of G such that every branching point is “contained” in some maximal clique of G.

Lemma 4.1
For any T-graph G and T-representation  of G,  can be modified such that for every branch node 
, we have 
, for some maximal clique C of G.

Proof
For every node x of the subdivision 
, let 
 be the set of vertices of G corresponding to the subtrees passing through x. Let b be a branching point such that 
 is not a maximal clique.

We pick a maximal clique C with 
. Since  satisfies the Helly property, there is a node 
. Note that for every node x of 
, we have 
. Let x be the node of 
 closest to b such that 
. Then, for each 
, we update 
 to be 
. Thus, we obtain a correct representation of G with 
.

We repeat the process described in the previous paragraph until 
 is a maximal clique. 

Remark on subdivisions. For convenience, we assume throughout the whole section that we already have a sufficiently large subdivision 
 of T. At the end, it will be clear that a subdivision 
 of T with 
, for some constant c, suffices. In fact, it suffices to have .

General idea. It is well-known that chordal graphs, and therefore also T-graphs, have at most n maximal cliques and that they can be listed in linear time. Let  be the set of branching points of T and let  be the set of all maximal cliques of G. The main part of our algorithm attempts, for a given , to construct a T-representation satisfying 
, for every , where 
. By Lemma 4.1, there always exists such a representation.

To this end, we try find interval representations of the connected components of 
 on the paths 
 such that the following conditions hold:

(i)
If interval representations of the connected components 
 are on a path 
, where  and l is a leaf of 
, then the induced subgraph 
 has an interval representation on 
 in which f(b) is the leftmost clique.

(ii)
If interval representations of the connected components 
 are on a path 
, where 
, then the induced subgraph 
 has an interval representation on 
 in which f(b) and 
 are the rightmost and leftmost cliques, respectively.

Recognition of 
-Graphs
In the case when 
, we have  and 
. The number of mappings  is exactly the same as the number of maximal cliques of G, which is at most n (otherwise it is not an 
-graph). For every maximal clique C of G, we try to construct a T-representation  such that 
.

Assume that G has such an 
-representation, for some maximal clique C. Then the connected components of  are interval graphs and each connected component can be represented on one of the paths 
, which is a subdivision of the edge 
; see Fig. 3a, c. However, some pairs of connected components of  cannot be placed on the same path 
, since their “neighborhoods” in C are not “compatible”. The idea is to define a partial order  on the components of  such that for every linear chain 
, the induced subgraph 
 can be represented on some path 
; see Fig. 3b.

We define 
 and 
 to be the neighbourhoods of the vertex u in C and of the components X in C, respectively. Formally,


 

Note that, if we have two components X and 
 on the same branch where 
 for every , then X must be closer to C than 
 if they are represented on the same path 
.

We say that components X and 
 are equivalent, 
, if there is a subset 
 of C such that 
 for every  and 
 for every 
. Note that equivalent components X and 
 can be represented in an interval representation of 
 in an arbitrary order and they can be treated as one component. We denote the set of the equivalence classes  by . For 
, we put:


 

(1)

Lemma 4.2
The relation  is a partial ordering on .

Proof
The relation  is reflexive by definition. Suppose that 
 and 
. For every  and 
, we have


 

Therefore, 
 for every  and 
 and X and 
 are equivalent. We assume that  contains only non-equivalent components. So, 
 and the relation  is asymmetric. It can be easily checked that  is also transitive. 

Fig. 3
figure 3
a An example of an 
-graph G with a maximal clique . b The partial ordering  on the connected components of  with chain cover of size 3: 
, 
, and 
. c The connected components placed on the paths 
, 
, and 
, according to the chain cover of . d The subtrees 
 corresponding to the vertices of the maximal clique C give an 
-representation of G with 

Full size image

Lemma 4.3
Let 
. Then the induced subgraph 
 has an interval representation with C being the leftmost clique if and only if 
 and each 
 has an interval representation with C being the leftmost clique.

Proof
Suppose that there is an interval representation  of 
 with C being the leftmost maximal clique. Since each 
 is a connected components of , their representations in  cannot overlap. Without loss of generality, we assume that the components 
 are ordered such that  if and only if 
 is placed closer to C in  than 
. Let 
 and 
. The vertex v is adjacent to at least one vertex of 
. Therefore, the representation of v covers the whole component 
 in , i.e., we have 
 and 
.

For the converse, we assume that 
 form a chain in  and every 
 has an interval representation 
 with C being the leftmost clique. Since 
, for , every vertex in 
 is adjacent to every vertex of 
. We now construct an interval representation of 
. We first place the interval representations of all 
’s (i.e., we use 
 restricted to the intervals of 
) on the real line according to , with 
 being the leftmost. Let 
 be the points of the real line such that 
 is represented on the interval 
.

It remains to construct a representation for every vertex . Let


 
 

Let 
 be a point left of 
. All the vertices in 
 are represented by the interval 
, for some 
. The intervals representing vertices in 
 are constructed inductively, for . For , we assume that we constructed the representations of vertices in 
. Note, if 
, then for every 
, we have 
. Therefore, every vertex in 
 is represented by an interval of the form 
, where 
 is a suitable point given by the representation 
 of 
. 

The following theorem gives a characterization of 
-graphs. It generalizes the characterization of interval graphs due to Fulkerson and Gross; see Lemma 2.1.

Theorem 2
(Characterization of 
-graphs) A graph G is an 
-graph if an only if there is a maximal clique C of G such that the following hold:

(i)
For every connected component X of , the induced subgraph G[C, X] has an interval representation with C being the leftmost clique.

(ii)
The partial order  on  has a chain cover of size at most d.

Proof
Suppose that G is an 
-graph with a representation satisfying 
; such a representation always exists by Lemma 4.1. The representation of a connected component  can not pass through the node b since otherwise C would not be a maximal clique. Clearly, the conditions (i) is satisfied. The representations of every two components in  have to be placed on non-overlapping parts of the subdivided 
. By Lemma 4.3, we have that the components placed on some path 
 of the subdivided 
 form a linear chain in . Therefore, the partial order  has a chain cover of size at most d and the condition (ii) is satisfied; see Fig. 3b.

Suppose that the conditions (i) and (ii) are satisfied. We put the components in  on the paths 
 according to the chain cover of the partial order  which has size at most d, i.e, every chain of  is placed on one 
. By Lemma 4.3, for every chain 
 in , we can find an interval representation of the graph 
 with C being the leftmost maximal clique. 

Algorithm. By combining Lemmas 4.3 and Theorem 2 we obtain an algorithm for recognizing 
-graphs. For a given graph G and its maximal clique C, we do the following:

1.
We delete the maximal clique C and construct the partial order  on the set of non-equivalent connected components .

2.
We test whether the partial order  can be covered by at most d chains.

3.
For each linear chain 
, , we construct an interval representation 
 of the induced subgraph 
, with C being the leftmost maximal clique, on one of the paths of the subdivided 
.

4.
We complete the whole representation by placing each 
 on the path 
 so that 
.

Theorem 3
Recognition of 
 -graphs can be solved in 
 time.

Proof
Every chordal graph has at most n maximal cliques, where n is the number of vertices, and they can be listed in linear time [45]. For every clique C, our algorithm tries to find an 
-representation with 
. The partial order  can be constructed in time 
. By forgetting the orientation in the partial order , we get a comparability graph, and every clique in the comparability graph induces a linear chain in . A relatively simple algorithm finds a minimum clique-cover of a comparability graph in time 
 [29]. An algorithm that runs in time 
 can by obtained by a combination of [24] and [31]. Testing whether 
 has an interval representation with C being the leftmost maximal clique can be done in linear time. Thus, the overall time complexity of our algorithm is 
. 

Problem 2
Can we recognize 
-graphs in time 
? In particular, can we find the clique that can be placed in the center of 
 efficiently?

Recognition of T-Graphs
The algorithm for recognizing T-graphs is a generalization of the algorithm for recognizing 
-graphs described above. Let  be an fixed assignment of cliques.

Assumption (connectedness of 
). Suppose that G is disconnected. Then it can be written as a disjoint union of some X and 
, where X is a connected component of G. Let 
 and 
 be the maximal cliques of X and 
, respectively. The sets 
 and 
 induce subtrees 
 and 
 of T separated by the branch ab, where 
 and 
 (otherwise f is invalid). We subdivide the branch ab by nodes 
 and 
. Then we try to find a representation of X on the tree 
 and a representation of 
 on 
. Therefore, we may assume that G is connected.

Assumption (injectiveness of 
). Suppose that f is not injective, i.e., 
. Then for every branching point 
 which lies on the path from b to 
, we must have 
 (otherwise f is invalid). For , the branching points in 
, together with the paths connecting them, have to form a subtree 
 of T. In this case the whole subtree 
 can be contracted into a single node a. Note that if there is a component X of 
 where every vertex of X adjacent to every vertex of C, then X can be represented on any branch incident to a by subdividing it appropriately. Thus, we may assume that f is injective.

Step 1 (components between branching points). The first step of our algorithm is to find for 
, which components have to be represented on the path 
 of 
.

Lemma 4.4
Let X be a connected component of 
 and 
. If the sets


 

then X has to be represented on 
 of 
.

Proof
Let 
 and 
. Since 
, we have 
. Similarly we have 
. Putting it together, we have that 
 and 
, and 
 and 
. Since X is adjacent to both u and v, the only possible path where X can be represented is 
; see Fig. 4a and 4b. 

We do the following for each 
 such that 
. Let 
 be the disjoint union of the components satisfying the conditions of Lemma 4.4. If the induced interval subgraph 
 has a representation such that the cliques C and 
 are the leftmost and the rightmost, respectively, then we can represent 
 in the middle of the path 
. If no such representation exists, then G does not have T-representation for this particular . This means that the representation of 
 is constructed on a proper subpath of 
 – recall that we are assuming that the subdivision 
 is sufficiently large.

Next, we do the following for every . Let 
 and 
 be the leaves of T and the branching points of T, respectively, such that 
, for every , and 
, for every . Let 
 and 
 be the points of the paths 
, respectively, such that 
 is represented on the subpath 
. We define S(b) to be the subdivided star consisting of the paths 
. Note that if a vertex 
 is adjacent to a vertex v in f(b), then the representation of 
 of v contains the whole subpath 
. This means that a component X, which does not satisfy the condition of Lemma 4.4, can be represented on 
 only if 
. We remove the subpaths 
 (together with the representations of 
) and we are left with disjoint subdivided stars with restrictions; see Fig 4c.

Fig. 4
figure 4
a A T-graph G, where T is the tree shown on the right. We have 
 and 
. b Component 
 with 
 and 
. In this case, 
. c A segment of the star corresponding to the clique is labeled by 
. A component X can be represented on this segment only if 

Full size image

Step 2 (disjoint stars with restrictions). We reduced the problem of recognizing T-graphs to the following problem. Let H be a fixed graph formed by the disjoint union of k stars 
 with branching points 
. On the input we have a graph G, an injective mapping 
, and for every edge of 
 a subset of 
, called restrictions. We want to find a representation of G on H such that 
, and for every connected component X of 
, the vertices V(X) have to be adjacent to every vertex in the restrictions corresponding to the path on which X is represented.

To solve this problem, we define a partial ordering on the connected components of , where 
. The notions 
 and 
 are defined as in the same way as in the algorithm for recognizing 
-graphs. We get a partial ordering  on the set of non-equivalent connected components  of . Moreover, to each component , we assign a list of colors L(X) which correspond to the subpaths from a branching point to a leaf in the stars 
, on which they can be represented. Each list L(X) has size at most 
, where 
 is the degree of 
.

Suppose that there exists a chain cover of  of size d such that for every chain 
 in this cover we can pick a color belonging to every 
 such that no two chains get the same color. In that case a representation of G satisfying the restrictions can be constructed analogously as in the proof of Lemma 4.3 and 2.

The partial ordering  on the components  defines a comparability graph P with a list of colors L(v) assigned to every vertex . If we find a list coloring c of its complement 
 
, i.e., a coloring that for every vertex v uses only colors from its list L(v), then the vertices of the same color in 
 
 correspond to a chain (clique) in P. Therefore, we have reduced our problem to list coloring co-comparability graphs with lists of bounded size.

Step 3 (bounded list coloring of co-comparability graphs). We showed that to solve the problem of recognizing T-graphs we need to solve the -list coloring problem for co-comparability graphs where . In particular, given a co-comparability graph G, a set of colors S such that , and a set  for each vertex v, we want to find a proper coloring  such that for every vertex v, we have .

In [6], the authors consider the capacitated coloring problem for co-comparability graphs. Namely, given a graph G, an integer  of colors, and positive integers 
, a capacitated s-coloring c of G is a proper s-coloring such that the number of vertices assigned color i is bounded by 
, i.e., 
. The authors prove that the capacitated coloring of co-comparability graphs can be solved in polynomial time for fixed s. In the next section, we modify their approach to solve the s-list coloring problem on co-comparability graphs in 
 time. This provides the following theorem.

Theorem 4
Recognition of T-graphs can be solved in 
.

Problem 3
Is there an FPT algorithm for recognizing T-graphs?

Bounded List Coloring of Co-comparability Graphs
Here, we provide a polynomial time algorithm for the problem of bounded list coloring of co-comparability graphs. Our result can be seen as a generalization of the polynomial time algorithm of Enright, Stewart, and Tardos [19] for bounded list coloring on a class which includes both interval graphs and permutation graphs. However, they [19] explicitly state that their approach does not extend to co-comparability graphs. To prove this also for co-comparability graphs, we slightly modify the approach in [6].

In [6], the problem of capacitated coloring is solved for a more general class of graphs, so called k-thin graphs. A graph G is k-thin if there exists an ordering 
 of V(G) and a partition of V(G) into k classes 
 such that, for each triple p, q, r with , if 
 belong to the same class and 
, then 
. Such ordering and partition are called consistent. The minimum k such that G is k-thin is called the thinness of G. Graphs with bounded thinness were introduced in [41] as a generalization of interval graphs. Note that interval graphs are exactly the 1-thin graphs.

Recall that a graph G is a comparability graph if there exits an ordering 
 of V(G) such that, for each triple p, q, r with , if 
 and 
 are edges of G, then so is 
. Such an ordering is a comparability ordering.

Lemma 4.5
(Theorem 8, [6]) Let G be a co-comparability graph. Then the thinness of G is at most , where  is the chromatic number. Moreover, any vertex partition given by a coloring of G and any comparability ordering for its complement are consistent.

Let G be k-thin graph, and let 
 and 
 be an ordering and a partition of V(G) which are consistent. Note that the ordering induces an order on each class 
. For each vertex 
 and class 
, let 
 be the set of neighbors of 
 in 
 that are smaller than 
, i.e., 
. For each class 
 let 
 be the maximum size of 
 over all vertices 
. The following lemma gives an alternative definition of k-thin graphs.

Lemma 4.6
(Fact 7, [6]) For each vertex 
and each , the set 
 is such that:

the vertices in 
 are consecutive, with respect to the order induced on 
.

if 
, then it includes the vertex with largest index in 
.

Bounded List Coloring On k-thin Graphs. In [6], the problem of capacitated coloring is reduced to a reachability problem on an auxiliary acyclic digraph.Footnote 4 We obtain an algorithm for bounded list coloring on k-thin graphs by slightly modifying the algorithm for capacitated coloring in [6]. The only difference is that we do not have a restriction on how many times we can use a particular color and for every vertex we can only use the colors from the list assigned to it. Otherwise, everything is the same as in [6]. We include it here for the sake of completeness.

Let G be a k-thin graph with an ordering 
 and a partition 
 of V(G). Let S be a set of colors, , and  be a function that assigns a list of allowed colors to a vertex. Consider an instance (G, L) of list coloring. We reduce the problem to a reachability problem on an auxiliary acyclic digraph D(N, A). We will refer to the elements of N and A as nodes and arcs while the elements of V(G) and E(G) will be referred to as vertices and edges (as we did so far).

The digraph D will be layered, i.e., the set N is the disjoint union of subsets (layers) 
 and all arcs in A have the form (u, w) with 
 and 
, for some . Note for each vertex 
, there is a layer 
 with . We denote by j(r) the class index q such that 
.

We first describe the set of nodes in each layer. The first layer consists of colors which can be assigned to the first vertex, i.e., 
. For the layers 
, there is a one-to-one correspondence between nodes at layer 
 and -tuples 
 with 
, for each i, j. The last layer 
 has only one node t corresponding to the tuple .

We associate with each node 
 a suitable list coloring problem with additional constraints, that we call the constrained sub-problem associated with u. As we show in the following, u is reachable from a node 
 if and only if this constrained sub-problem has a solution. Namely, we will show that the following property holds:

:
a node 
 is reachable from a node 
 if and only if the induced subgraph 
 admits a list coloring with the lists given by L and with additional constraint that, for each  and , color i is forbidden for the last 
 vertices in 
.

In this case, G admits a list coloring if and only if the node t is reachable from a node 
.

Property  will follow from the definition of the set of arcs A given as follows. Let 
. Note that the problem associated with u has a solution where the vertex 
 gets color i only if 
. Let 
. We will make exactly |C(u)| arcs entering into u, and give each such arc a color  (exactly one color from C(u) per arc). Each arc 
, with 
 and , will then have the following meaning: if the constrained sub-problem associated with 
 has a solution, i.e., a coloring 
, then we can extend 
 into a solution  to the constrained sub-problem associated with u by giving color i to vertex 
.

We now give the formal definition of the set A. We start with the arcs from 
 to 
. Let 
. There is an arc from 
 (where ), to u if and only if ; moreover, the color of its arc is i. We now deal with the arcs from 
 to 
, with . Let 
. As we discussed above, for each 
, there will be an arc from a node 
 to u, with color 
. Namely, 
, where:


 
 

(2)

Note that 
 is indeed a node of 
, as the -tuple 
 is such that 
, for each i, j (in fact, 
, since u is a node of 
).

Lemma 4.7
G admits an L list coloring if and only if D contains a directed path from a node 
 to t. Moreover, if such a path exists, then a list coloring of G can be obtained by assigning each node 
  the color of the arc of the path entering into layer 
.

Proof
The proof is analogous to the proof of Lemma 10 in [6] and we omit it here. 

Lemma 4.8
Suppose that for a (k-thin) graph G with n vertices we are given an ordering and a partition of V(G) into k classes that are consistent. Further consider an instance (G, L) of the list coloring problem. Let 
. Then (G, L) can be solved in 
-time, i.e., 
-time.

Proof
By definition, for , 
. Note that each node of D has at most s incoming arcs, and each arc can be built in -time. Therefore, D can be built in 
-time. Since D is acyclic, the reachability problem on D can be solved in linear time. Therefore the list coloring problem on G can be solved in 
-time, that is 
-time. 

Lemma 4.9
Let G be a co-comparability graph and (G, L) an instance of the list coloring problem with the total number of colors . Then (G, L) can be solved in 
-time, i.e., polynomial time when s is fixed.

Proof
By Lemma 4.5, the graph G is k-thin. It can be tested in 
 time whether G is s-colorable [29]. If it is s-colorable, then by Lemma 4.5 we get a comparability ordering and a k-partition of V(G). Moreover, by Lemma 4.5 we know that . Thus, by Lemma 4.8, we can solve the problem in time 
. 

Minimum Dominating Set
In this section, we discuss the minimum dominating set problem on . The basic idea behind our algorithms is to reduce the minimum dominating set problem for H-graphs to several minimum dominating set problems on interval graphs, obtained as induced subgraphs of the original graph.

We start with a useful tool (Lemma 5.1) which states that that one can compute a dominating set of an interval graph G which is minimum subject to including one or two of certain special vertices of G. This lemma is an essential tool for both of our dominating set algorithms presented in the subsequent subsections.

Lemma 5.1
Let  be an interval graph and let 
 be the left-to-right ordering of the maximal cliques in an interval representation of G.

1.
For every 
, a dominating set of G which is minimum subject to including x can be found in linear time.

2.
For every 
 and 
, a dominating set of G which is minimum subject to including both x and y can be found in linear time.

Proof
We provide the proof for the part 1 (the proof of the part 2 follows analogously). We construct a new graph 
 where 
 and 
. Clearly, 
 is an interval graph as certified by the following linear order of its maximal cliques 
. Furthermore, to dominate both u and 
 without using x, we would need to include both u and 
. Thus, every minimum dominating set of 
 includes x, i.e., we can find such a dominating set in linear time using the standard greedy algorithm [30]. 

Dominating Sets in 
-Graphs
Here, we solve the minimum dominating set problem on 
 in -time, parameterized by d.

Theorem 5
For an 
 -graph G , a minimum dominating set of G can be found in 
 time when an 
 -representation is given. (If such a representation is not given, we can compute one in 
 time by Theorem  3 .)

Proof
Let G be an 
-graph and let 
 be a subdivision of the star 
 such that G has an 
-representation. Let b be the central branching point of 
 and let 
 be the leaves of 
. Recall that, by Lemma 4.1, we may assume 
, for some maximal clique C of G. Let 
 be the maximal cliques of G as they appear on the branch 
, for .

For each 
, we use an interval graph greedy algorithm [30] to find the size 
 of a minimum dominating set in 
. Let 
 be the set of vertices of C that can appear in a minimum dominating set of 
. By Lemma 5.1, a minimum dominating set 
 containing a vertex  can be found in linear time. Note that 
 if and only if 
. Therefore, every 
 can be found in  time. Let 
.

If 
 is empty, then no minimum dominating set of 
 contains a vertex from C. So for 
, we pick an arbitrary minimum dominating set 
. Note that 
 dominates 
 regardless of the choice of 
. Thus, if 
 dominates C, then it is a minimum dominating set of G. Otherwise, 
 is a minimum dominating set of G where x is an arbitrary vertex of C.

Let us assume now that the 
’s are nonempty (every branch with an empty 
 can be simply ignored). Let H be a subset of C such that 
 is not empty, for every , and |H| is smallest possible. For every branch 
, we pick a minimum dominating set 
 of 
 containing an arbitrary vertex 
. Now, the union 
 is a minimum dominating set of G. It remains to show how to find the set H in time depending only on d.

Finding the set H can be seen as a set cover problem where  is the ground set. Namely, we have one set for each vertex x in C where the set of x is simply its subset of , and our goal is to cover . Note, if two vertices cover the same subset of  it suffices to keep just one of them for our set cover instance, i.e., giving us at most 
 sets over a ground set of size d. Such a set cover instance can be solved in 
 time (see Theorem 6.1 [12]).

Thus, we spend 
 time in total. 

Dominating Sets in H-Graphs
We turn to , for general fixed H. There we solve the problem in -time, parameterized by . This latter result can be easily adapted to also obtain -time algorithms to find a maximum independent set and minimum independent dominating set on  (these algorithms are also parameterized by ); see Corollary 7.

Theorem 6
For an H -graph G the minimum dominating set problem can be solved in 
 time when an H -representation is given as part of the input.

Proof
Recall that, when H is a cycle, , i.e., minimum dominating sets can be found efficiently [13]. Thus, we assume H is not a cycle.

To introduce our main idea, we need some notation. Consider  and let 
 be a subdivision of H such that G has an 
-representation 
. We distinguish two important types of nodes in 
; namely, 
 is called high degree when it has at least three neighbors and x is low degree otherwise. As usual, the high degree nodes play a key role. In particular, if we know the sub-solution which dominates the high degree nodes of 
, then the remaining part of the solution must be strictly contained in the low degree part of 
. Moreover, since H is not a cycle, the subgraph 
 of 
 induced by its low degree nodes is a collection of paths. In particular, the vertices v of G where 
 only contains low degree nodes, induce an interval graph 
 and, as such, we can efficiently find minimum dominating sets on them. Thus, the general idea here is to first enumerate the possible sub-solutions on the high degree nodes, then efficiently (and optimally) extend each sub-solution to a complete solution. In particular, one can show that in any minimum dominating set these sub-solutions consist of at most  vertices (as in Claim 5.1 below), and from this property it is not difficult to produce the claimed 
-time algorithm. These ideas are formalized as follows.

We observe that the size of these sub-solutions is “small”. Let  be a minimum dominating set of G. For each node x of 
, let 
 and 
. We further let 
. We now bound the size of 
 in terms of H.

Claim 5.1
If D is a minimum dominating set in an H-graph G, then 
.

Proof
Consider a high degree node x of H such that 
. For each edge 
 in H, let 
 be the corresponding path in 
. We assign a single vertex a in D to the ordered pair 
 such that 
 contains the longest subpath of 
 including 
. Notice that each ordered pair receives precisely one element of D. However, if some element v of 
 was not assigned to an ordered pair, then it is easy to see that D is not a minimum dominating set (since all adjacencies achieved by this element are already achieved by the elements we have charged to ordered pairs).□

By Claim 5.1, there are at most 
 possible sets 
. We now fix one such 
 and describe how to compute a minimum dominating set of G containing it. Notice that, there can be some difficult decisions we might need to make in this process. In particular, suppose there is a high degree node x of 
 where no vertex from 
 is in 
. It is not clear how we might be able to efficiently choose from “nearby” x to dominate these vertices. To get around this case, we simply enumerate more vertices. Specifically, for each path 
 in 
 where x and y are high degree nodes (or where x is high degree and y is a leaf), and the 
’s are low degree, we will pick a “first” and “last” vertex among the vertices v of G where 
 is contained in the subpath 
 of 
. That is, for a given 
 we enumerate all possible subsets of size  from among the vertices of 
 to act as the “first” and “last” vertices of each path 
. Clearly, there are at most 
 such subsets. We fix one such subset 
.

We now have our candidate sub-solutions 
. There are just some simple sanity checks we must make on 
 to test if it is a good candidate to be extended to a dominating set. First, by the definition of 
, it must already dominate every vertex of 
. Second, if there is some path 
 where 
 contains fewer than two vertices from 
, then 
 must already dominate every vertex contained in this path. And finally, for every path 
, for every v with 
 contained strictly between x and the “left-end” of the “first” chosen vertex, then v must be dominated by 
. If one of these conditions is violated, we discard this candidate 
 and go to the next one.

Finally, what remains to be dominated consists of a collection of disjoint interval graphs where possibly some sequence of “left-most” and “right-most” maximal cliques have already been dominated by 
. Observe that the partially constructed dominating set will consist of one vertex which reaches the farthest in from the right and one which does the same from the left. Namely, we can apply Lemma 5.1, to construct a minimum dominating set for each such interval graph subject to the inclusion of these two special vertices and as such compute a minimum dominating set of G which contains our candidate partial dominating set.

This completes the description of the algorithm. From the discussion, we can see that the algorithm is correct and that the total running time is dominated by the enumeration of the possible sets 
 plus some additional polynomial factors. In particular, the algorithm runs in 
 time. 

We further remark that the above approach can also be applied to solve the maximum independent set and minimum independent dominating set problems in 
 time. This approach is successful since these problem can be solved efficiently on interval graphs.

Corollary 7
For an H -graph G , the maximum independent set problem and minimum independent dominating set problem can both be solved in 
 time.

Finally, as we have stated in Sect. 1.2, in a recent manuscript [22], W[1]-hardness has been shown for both the minimum dominating set problem and the maximum independent set problem. Moreover, both of these results concern parameterization by both  and the solution size. Thus, this classifies the computational complexity for both of these problems. It would be interesting to also have W[1]-hardness for the minimum independent dominating set problem. Additionally, one could make a more fine-grained examination of the running time and look for lower bounds via ETH.

Problem 4
Is the minimum independent dominating set problem W[1]-hard on H-graphs (parametrized by  and the solution size)?

Problem 5
Can we obtain some interesting lower bounds using ETH?

Finding Cliques in H-Graphs
We discuss computational aspects of the maximum clique problem for H-graphs, parametrized by . Let 
 be the double-triangle (see Fig. 5a). First, we show that the maximum clique problem is APX-hard for H-graphs if H contains 
 as a minor (Theorem 8). In other words, the maximum clique problem is para-NP-hard when parameterized only by . As a consequence of our reduction, we also show that if 
, then  is -complete (the graph isomorphism on  is as hard as the general graph isomorphism problem). We then turn to cases where the clique problem can be solved efficiently. Namely, we consider two cases: one where we have a “nice” representation but H is arbitrary, and the other where we restrict H to be a cactus.

Clique (and Isomorphism) Hardness Results
To obtain our hardness results we show that there are graphs H such that the complement of a 2-subdivision of every graph is an H-graph. The 2-subdivision 
 of a graph G is the result of subdividing every edge of G exactly two times. The complement of a graph G is denoted by 
 
. We define


 
 
 

In other words, 
 
 is the class of complements of 2-subdivisions of all graphs.

This seemingly esoteric family of graphs is interesting for two reasons. Firstly, the isomorphism relation on graphs is closed under k-subdivision and complement operations. This implies that  if and only if 
 
 
. So, the class 
 
 is -complete. Secondly, the clique problem is -hard on 
 
. More specifically, Chlebík and Chlebíková [9] proved that the maximum independent set problem is APX-hard on the class of 2k-subdivisions of 3-regular graphs for any fixed integer ; in particular, for 2-subdivisions. Thus, showing that 
 
, for a fixed H, implies that the maximum clique problem is -hard on  and that  is -complete.

Theorem 8
If 
, then the maximum clique problem is -hard for H-graphs and  is -complete.

Proof
As already mentioned, we prove the theorem by showing 
 
. Since 
, the graph H can be partitioned into three connected subgraphs 
, 
, 
 such that there are at least two edges connecting 
 and 
, for each . For every graph G, we show that the complement of its 2-subdivision has an H-representation.

The construction proceeds similarly to the constructions used by Francis et al. [21], and we borrow their convenient notation. Let G be a graph with vertex set 
 and edge set 
. If 
 and 
 where , we define  and  (as if 
 and 
 were respectively the left and right ends of 
). In the 2-subdivision 
 of G, the edge 
 of G is replaced by the path 
; see Fig. 5a, b.

Fig. 5
figure 5
a The double-triangle graph. b A graph G. c The 2-subdivision 
 of G. A three-clique cover of 
 
 is indicated by colors. d The 4-wheel graph (which contains the double-triangle as a minor) and a sketch of our H-representation of 
 
. For example, the edges between the green clique and the blue clique are represented where the green and blue regions intersect

Full size image

Note that 
 
 can be covered by three cliques, i.e., 
, 
, and 
. We now describe a subdivision 
 of H which admits an H-representation 
 
 of 
 
. We obtain 
 by subdividing the six edges connecting 
, 
, and 
. Specifically:

We n-subdivide the edges connecting 
 to 
 to obtain two paths 
 
, 
 where 
 and 
.

We n-subdivide the edges connecting 
 to 
 to obtain two paths 
 
, 
 where 
 and 
.

We m-subdivide the edges connecting 
 and 
 to obtain two paths 
 
, 
 where 
.

We now describe each 
, 
 and 
. The idea is that 
 will contain 
 and extend from the “start” of 
 up to the position i, and from the “start” of 
 up to position . From the other side, each 
 will contain 
 and extend from the “end” of 
 down to position , and from the end of 
 down to position ; an example is sketched in Fig. 5d. In this way, we ensure that 
 does not intersect 
 while 
 does intersect every 
 for . The other pairs proceed similarly, and we describe the subgraphs 
 for each  and  as follows:

.

.


Some interesting cases remain concerning the maximum clique problem. In the next subsection we will prove Theorem 10 which states that, for any cactus C, the clique problem can be solved polynomial time on any C-graph. Thus, the open cases which remain are when H is not a cactus (i.e., H contains a diamond as a minor), but H does not satisfy the conditions of Theorem 8 (i.e., H does not contain the double-triangle as a minor).

Problem 6
What is the complexity of the maximum clique problem on H-graphs in the case when H is not a cactus and 
?

On the other hand, while the isomorphism problem can be solved in linear time on interval graphs and Helly circular-arc graphs [14], split graphs [40] are -complete.

Problem 7
Let H be a fixed graph such that 
. What is the complexity of the graph isomorphism problem on H-graphs?

Tractable Cases
Here, we consider two restrictions which allow polynomial-time algorithms for the maximum clique problem. First, we discuss the case when the H-representation satisfies the Helly property. This is followed by a discussion of the case when H is a cactus. In both situations, we obtain polynomial-time algorithms.

Helly H-graphs. A Helly H-graph G has an H-representation 
 such that the collection 
 satisfies the Helly property, i.e., for each sub-collection of  whose sets pairwise intersect, their common intersection is non-empty. Notice that, when H is a tree, every H-representation satisfies the Helly property. When a graph G has a Helly H-representation, we obtain the following relationship between the size of H and the number of maximal cliques in G.

Lemma 6.1
Each Helly H -graph G has at most  maximal cliques.

Proof
Let 
 be a subdivision of H such that G has a Helly H-representation 
. Note that, for each maximal clique C of G, 
, i.e., C corresponds to a node 
 of 
.

For every edge , we consider the path 
 in 
. Let 
 be the subgraph of G formed by the union of the maximal cliques C of G such that 
.

Claim 6.1
The graph 
 is a Helly circular-arc graph.

Proof
Note that if a restriction of 
, for 
, to P is disconnected, then it is a disjoint union of two paths containing the end-vertices x and y, respectively. Let C by cycle obtained from P by adding the edge xy. We construct a C-representation of 
. If the restriction of 
 to P is a subpath of P, then we let 
 to be this subpath. Otherwise, we let 
 to be the restriction of 
 to P together with the edge xy. Clearly, this is a Helly C-representation. 

Now, since Helly circular-arc graphs have at most linearly many maximal cliques [25], G has at most  maximal cliques. 

We can now use Lemma 6.1 to find the largest clique in G in polynomial time. In fact, we can do this without needing to compute a representation of G. In particular, the maximal cliques of a graph can be enumerated with polynomial delay [42]. Thus, since G has at most linearly many maximal cliques, we can simply list them all in polynomial time and report the largest, i.e., if the enumeration process produces too many maximal cliques, we know that G has no Helly H-representation. This provides the following theorem.

Theorem 9
The clique problem is solvable in polynomial time on Helly H -graphs.

Note that some co-bipartite circular-arc graphs have exponentially many maximal cliques and these graphs are not contained in Helly , for any fixed H. However, the clique problem is solvable for circular-arc graphs in polynomial time [34].

Cactus-graphs. The clique problem is efficiently solvable on chordal graphs [30] and circular-arc graphs [34]. In particular, when H is either a tree or a cycle, the clique problem can be solved in polynomial-time, independent of . In Theorem 10, we observe that these results easily generalize to the case when G is a C-graph, for some cactus graph C. We define,


 
 

To prove the result we will use the clique-cutset decomposition, which is defined as follows. A clique-cutset of a graph G is a clique K in G such that  has more connected components than G. An atom is a graph without a clique-cutset. An atom of a graph G is a maximal induced subgraph A of G which is an atom. A clique-cutset decomposition of G is a set 
 of atoms of G such that 
 and for every i, j, 
 is either empty, or induces a clique in G. Algorithmic aspects of clique-cutset decompositions were studied by Whitesides [48] and Tarjan [47]. In particular, if , then for any graph G a clique-cutset decomposition 
 of G can be computed in 
 [47]. Additionally, to solve the clique problem on a graph G it suffices to solve it for each atom of G from a clique-cutset decomposition [47, 48]. Theorem 10 now follows from the following easy lemma and the fact that the clique problem can be solved in polynomial time for circular-arc graphs [34].

Lemma 6.2
Let C be cactus and let . Then each atom A of G is a circular-arc graph.

Proof
Consider an C-representation 
 of G. Now, let 
. Clearly, if 
 is a path or a cycle, then we are done. Otherwise, 
 must contain a cut-node x. Let 
 be the components of 
, and let S be the vertices of A whose representations contain x. Note that S is a clique in A. Moreover, since A is an atom, S is not a clique-cutset. Thus, there is a component 
 such that the subgraph 
 of C induced by 
 provides a representation of A. In particular, if 
 is either a cycle, or a path we are again done. Moreover, when 
 is neither a path, nor a cycle, repeating this argument on 
 provides a smaller subgraph of C, on which A can be represented, i.e., this eventually produces either a path, or cycle. 

Theorem 10
The clique problem can be solved in polynomial time on .

FPT Results Via Clique-Treewidth Graph Classes
The concept of treewidth was introduced by Robertson and Seymour [44]. A tree decomposition of a graph G is a pair (X, T), where T is a tree and 
 is a family of subsets of V(G), called bags, such that (1) for all , the set of nodes 
 induces a non-empty connected subtree of T, and (2) for each edge  there exists  such that both u and v are in 
. The maximum of 
, , is called the width of the tree decomposition. The treewidth, , of a graph G is the minimum width over all tree decompositions of G.

An easy lower bound on the treewidth of a graph G is the size of the largest clique in G, i.e., its clique number . This follows from the fact that each edge of G belongs to some bag of T and that a collection of pairwise intersecting subtrees of a tree must have a common intersection (i.e., they satisfy the Helly property). With this in mind, we say that a graph class  has the clique-treewidth propertyFootnote 5 if there is a function  such that for every , . This concept generalizes the idea of  being -bounded, namely, that the chromatic number  of every graph  is bounded by a function of the clique number of G. In particular, the chromatic number of a graph G is bounded by its treewidth since a tree decomposition (X, T) of G is a T-representation of a chordal supergraph 
 of G where 
, i.e., 
 since chordal graphs are perfect. It was recently shown that the graphs which do not contain even holes (i.e., cycles of length 2k for any ) and pans (i.e., cycles with a single pendent vertex attached) as induced subgraphs have their treewidth bounded by  [10]. For a function , we use 
 to denote the class of graphs G where . Each class H-GRAPH is known to be a subclass of 
 for certain linear functions f, as in the following lemma.

Lemma 7.1
(Biró, Hujter, and Tuza [3]) For every , , i.e.,  is a subclass of 
, where 
.

We leverage any clique-treewidth-property (e.g., as in Lemma 7.1) together with some existing algorithms to to classify the k-coloring and k-clique problems as FPT on the 
 classes (e.g., on  classes as well). We first consider the k-clique problem.

Theorem 11
For any monotone computable function , the k-clique problem can be solved in 
 time for 
. Thus, for , the k-clique problem can be solved in 
 time.

Proof
To test if G contains a k-clique, we first try to generate a tree decomposition of G with width roughly f(k) via a recent algorithm [2], which, for any given graph G and number t, provides a tree decomposition of width at most  or states that the treewidth of G is larger than t. This algorithm runs in 
 time. If this algorithm does not produce a tree decomposition, then G must contain a k-clique, and we are done. Otherwise, we obtain a tree decomposition (X, T) of G of width . Note that, an easy property of tree decompositions is that, for every clique K, there is a bag which contains the vertices of K. In particular, to check if G has a k-clique it suffices to check whether each the subgraph induced by a bag of G contains a k-clique. This can obviously be done in 
 time by brute-force. Thus, we have 
 time in total as needed. 

For each fixed , it is known that testing (k, k)-pre-colouring extension (see Sect. 1.1 for a definition) for  can be done in XP time [3]. The authors combine Lemma 7.1 together with a simple argument to obtain the result. We use a similar argument together with a more recent result regarding bounded treewidth graphs to observe that an even more general problem, list k-coloring (where each list is a subset of ), is FPT on graph class satisfying the clique-treewidth property, and therefore, also on H-GRAPH.

Theorem 12
For any monotone computable function , the list-k-coloring problem can be solved in 
 time for 
. Thus, for , the list-k-coloring problem can be solved in 
time.

Proof
For fixed k, clearly, if G contains a clique of size  then G has no k-coloring, i.e., no list-k-coloring, regardless of the lists. We use Theorem 11 to test for such a clique, and reject if one is found. Otherwise, we have a -width tree decomposition, and this time we use it to solve the list-k-coloring problem via the known 
-time algorithm when given a width t tree decomposition [37]. Thus, list-k-coloring can be solved in 
 time on 
. 

Some further natural open questions remain regarding these results. For example, what other problems can be approached on graph classes with the clique-treewidth property? Can we obtain polynomial-size kernels for the k-clique or list-k-coloring problems on  or more generally on graph classes with the clique-treewidth property? The kernelization question has already been partially answered for the k-clique problem. Namely, on H-graphs, it was recently shown [22] that the k-clique admits a polynomial kernel in terms of  and k, but the kernelization requires an H-representation to be given as part of the input. In contrast, our  algorithm for k-clique (while also parameterized by both  and k) does not need an H-representation.

Problem 8
Can the kernelization for k-clique be done without an H-representation a part of the input?

Problem 9
Can we obtain polynomial-size kernel for the list-k-coloring problem on H-graphs?

Minimal Separators
For a connected graph G, a subset S of V(G) is a minimal separator when G has vertices u and v belonging to distinct components of  such that no proper subset of S disconnects u and v – here, we say that S is minimal (u, v)-separator. We denote the set of all minimal separators in G by . Minimal separators are a commonly studied aspect of many graph classes [8, 28, 30, 39]. Two particularly relevant cases include the fact that chordal graphs have at most n minimal separators [30], and that circular-arc graphs have at most 
 minimal separators [39].

Recently, several algorithmic results have been developed, where the runtime depends on the number of minimal separators in the input graph. The main result in this direction is the one by Fomin, Todinca, and Villanger [23], which is phrased in terms of potential maximal cliques, but can also be phrased in terms of minimal separators since the number of potential maximal cliques in a graph G is bounded by 
 (see Proposition 2.8 in [23]). Roughly, in [23] the authors show that a large class of problems can be solved in time polynomial in the number of minimal separators of the input graph. These problems include several standard combinatorial optimization problems, e.g., maximum independent set and maximum induced forestFootnote 6.

The class of problems considered in [23] is formalized as follows. Consider a fixed integer , and a formula  expressed in counting extended monadic second order logic (CMSO)Footnote 7. For an input graph G, the goal is to find a maximum size subset  satisfying: there is  such that , the subgraph G[F] has treewidth at most t, and the structure (G[F], X) models . The graph G[X] is called maximum induced subgraph of treewidth  satisfying . The main result of [23] is that this problem can be solved in time 
 where f is a computable function.

Now, we prove that each H-graph has 
 minimal separators; see Theorem 13. We obtain Corollary 14 by applying the meta-algorithmic result of Fomin, Todinca, and Villanger. Subsequently, we consider the case of H-graphs when H is a cactus and observe a much smaller bound on the number of minimal separators, in particular, 
; see Theorem 15. Similarly, by applying the meta-algorithmic result we obtain Corollary 16: for cactus-graphs, the maximum induced subgraph of treewidth t modelling  can be solved in polynomial time.

Theorem 13
Let G be a connected H -graph. Then G has 
 minimal separators. Footnote 8

Proof
We show that each minimal separator arises from vertices of G such that their representations contain a small number of edges of the subdivision 
. Then we count all such subsets of edges of 
.

Let 
 be a subdivision of H certifying that G is an H-graph. Let 
 be the subgraph of 
 formed by the union of the representations of the vertices of G, i.e.,

Observe that, since G is connected, 
 must be also connected. Moreover, for any minimal (u, v)-separator S, the graph 
 is not connected. Now, since S is an (u, v)-separator, there are distinct components 
 and 
 of 
 such that 
 is a subgraph of 
 and 
 is a subgraph of 
.

Observe that, since S is minimal, then if , then the representation 
 contains an edge ab of 
 such that either 
 and 
, or 
 and 
. Namely, there is a set 
 of edges of 
 such that S is precisely the set of vertices x of G where 
 contains an edge of 
. Moreover, for each edge of H, at most two edges from its path in 
 occur in 
.

To bound the number of all possible minimal separators in G, it suffices to enumerate all possible subsets E of 
 where, for each edge of H, we pick at most two edges from its path in 
. Here, the candidate separator S would simply be all vertices x of G for which 
 contains an edge of E. Thus, since each edge of H will be subdivided at most  times (since 2n nodes are sufficient to accommodate any circular-arc representation), we obtain that the number of minimal separators in G is at most


  
  
 
 


Corollary 14
Let H be a fixed graph. For every H-graph G, , and every CMSO formula , a maximum induced subgraph of treewidth  modelling  can be found in time 
, where c is a constant and f is a computable function.

Theorem 15
Let G be a connected C -graph, where C is a cactus graph. Then G has at most 
 minimal separators.

Proof
The reasoning here follows similarly to the proof of Theorem 13. Namely, if we consider a minimal (u, v)-separator, we again find the components 
 and 
 in the subdivision 
. However, since 
 is a cactus, we can now look more closely at the edges which are incident to 
 and 
 but contained in neither. In particular, it is easy to see that among all such edges incident to 
, there are at most two edges 
 which are actually important to ensure that there is no path from 
 from 
. In other words, our set 
 consists of at most two edges of 
. Moreover, these two edges must belong to the same cycle of 
. Finally, since each cycle of 
 forms a circular-arc graph, it never needs to contain more than 2n nodes, i.e., also 2n edges. Thus, since H contains at most |E(H)| cycles, the number of minimal separators in G is at most  
  
 
. 

Corollary 16
Let C be a cactus. For every ,  and every CMSO formula , a maximum induced subgraph of treewidth  modelling  can be found in time 
, where f is a computable function.

As we have mentioned, two recent manuscripts [22, 35] have obtained W[1]-hardness results for both the maximum independent set problem and the minimum feedback vertex set problem (respectively) when parameterized by  and the solution size. In both results, the graphs H which are used have progressively larger clique minors. These indicate that the XP-time results of Corollary 14 are extremely unlikely to be improved to -time, even when adding the solution size as an additional parameter. On the other hand, as in Corollary 16, when H is a cactus (i.e., diamond-minor free), these problems (and many more) can be solved in polynomial time in both  and the size of the input graph.

Problem 10
For which classes  (besides the cacti), can one similarly bound the number of minimal separators by a polynomial in terms of  and  where  and G is an H-graph?