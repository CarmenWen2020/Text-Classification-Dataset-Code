
We study the complexity of graph modification problems with respect to homomorphism-based colouring properties of edge-coloured graphs. A homomorphism from an edge-coloured graph G to an edge-coloured graph H is a vertex-mapping from G to H that preserves adjacencies and edge-colours. We consider the property of having a homomorphism to a fixed edge-coloured graph H, which generalises the classic vertex-colourability property. The question we are interested in is the following: given an edge-coloured graph G, can we perform k graph operations so that the resulting graph admits a homomorphism to H? The operations we consider are vertex-deletion, edge-deletion and switching (an operation that permutes the colours of the edges incident to a given vertex). Switching plays an important role in the theory of signed graphs, that are 2-edge-coloured graphs whose colours are the signs  and −. We denote the corresponding problems (parameterized by k) by VD-H -Colouring, ED-H-Colouring and SW-H-Colouring. These problems generalise the extensively studied H-Colouring problem (where one has to decide if an input graph admits a homomorphism to a fixed target H). For 2-edge-coloured H, it is known that H-Colouring already captures the complexity of all fixed-target Constraint Satisfaction Problems. Our main focus is on the case where H is an edge-coloured graph with at most two vertices, a case that is already interesting since it includes standard problems such as Vertex Cover, Odd Cycle Transversal and Edge Bipartization. For such a graph H, we give a P/NP-complete complexity dichotomy for all three VD-H -Colouring, ED-H-Colouring and SW-H-Colouring problems. Then, we address their parameterized complexity. We show that all VD-H -Colouring and ED-H-Colouring problems for such H are FPT. This is in contrast with the fact that already for some H of order 3, unless P = NP, none of the three considered problems is in XP, since 3- Colouring is NP-complete. We show that the situation is different for SW-H-Colouring: there are three 2-edge-coloured graphs H of order 2 for which SW-H-Colouring is W[1]-hard, and assuming the ETH, admits no algorithm in time 
 for inputs of size n and for any computable function f. For the other cases, SW-H-Colouring is FPT.

Introduction
Graph colouring problems such as k-Colouring are among the most fundamental problems in algorithmic graph theory. The problem of H-Colouring is a homomorphism-based generalisation of k-Colouring that is extensively studied [10, 20, 25, 33]. Considering a fixed graph H, in H-Colouring one asks whether an input graph G admits a homomorphism (an edge-preserving vertex-mapping) to H. Observe that k- Colouring is the same problem as 
-Colouring, where 
 is the complete graph of order k (the order of a graph is its number of vertices).

We will consider parameterized variants of H- Colouring where H is an edge-coloured graph. We say that a graph is t-edge-coloured if its edges are coloured with at most t colours. In this paper, all (edge-coloured) graphs may have loops and multiple edges, but multiple edges of the same colour are irrelevant. (Thus by graph we effectively mean multigraph.) We sometimes give actual colour names to the colours: red, blue, green. For 2-edge-coloured graphs, we will use red and blue as the two edge colours. A standard uncoloured graph can be seen as 1-edge-coloured. For two edge-coloured graphs G and H, a homomorphism from G to H is a vertex-mapping  such that, if xy is an edge of colour i in G, then  is an edge of colour i in H. Whenever such a  exists, we say that G maps to H, and we write 
.

The H- Colouring problems are well-studied, see for example [1, 3,4,5,6]. They are special cases of Constraint Satisfaction Problems (CSPs). A large set of CSPs can be modeled by homomorphisms of general relational structures to a fixed relational structure H [20]. The corresponding decision problem is noted as H-CSP. When H has only binary relations, H can be seen as an edge-coloured graph (a relation corresponds to the set of edges of a given colour) and H- CSP is exactly H-Colouring. The complexity of H-CSP has been the subject of intensive research in the last decades, since Feder and Vardi conjectured in [20] that H-CSP is either in P or is NP-complete — a statement that became known as the Dichotomy Conjecture. The latter conjecture was solved in 2017 in [8, 42] independently; the criterion for H-CSP to be in P is based on certain algebraic properties of H. Nevertheless, determining whether a structure H satisfies this criterion is not an easy task (even for targets as simple as oriented trees [10]). Thus, the study of more simple and elegant complexity classifications for relevant special cases is of high importance

The complexity of H-Colouring when H is uncoloured is well-understood: it is in P if H contains a loop or is bipartite; otherwise it is NP-complete [25]. This was one of the early dichotomy results in the area. On the other hand, when H is a 2-edge-coloured graph, it was proved that the class of H-Colouring problems captures the difficulty of the whole class of H-CSP problems [6], and thus the dichotomy classification for this class of problems is expected to be much more intricate.

Our goal is to study generalisations of H-Colouring problems for edge-coloured graphs by enhancing them as modification problems. In this setting, given a graph property  and a graph operation , the graph modification problem for  and  asks whether an input graph G can be made to satisfy property  after applying operation  a given number k of times. This is a classic setting studied extensively both in the realms of classical and parameterized complexity, see for example [11, 15, 31, 32, 39]. In this context, the most studied graph operations are vertex-deletion and edge-deletion, see the seminal papers [32, 39].

For a fixed graph H, let  denote the property of admitting a homomorphism to H. Certain standard computational problems can be stated as graph modification problems to . For example, Vertex Cover is the graph modification problem for property 
 and operation vertex-deletion. Similarly, Odd Cycle Transversal and Edge Bipartization are the graph modification problems for 
 and vertex-deletion, and 
 and edge-deletion, respectively.

When considering edge-coloured graphs with only two edge-colours, another operation of interest is switching: to switch at a vertex v is to change the colour of all edges incident with v. (Note that a loop does not change its colour under switching.) This operation is of prime importance in the context of signed graphs. A signed graph is a 2-edge-coloured graph in which the two colours are denoted by signs ( and −). A graph is called balanced if it can be switched to be all-positive. The concepts of signed graphs, balance and switching, were introduced and developed in [24, 40] and have many interesting applications, in particular in social networks and biological dynamical systems (see [26] and the references therein).

The switching operation plays an important role in the study of homomorphisms of signed graphs, a concept defined in [34] which has many connections to deep questions in structural graph theory. In their definition, before mapping the vertices, one may perform any number of switchings. (Note that when switching at a set S of vertices of a signed graph G, the order does not matter: ultimately, only the edges between S and its complement  change their sign.) The algorithmic complexity of this problem was studied in [6, 7, 18, 23]. Herein, we will consider edge-coloured graph modification problems for property  (for fixed edge-coloured graphs H) and for graph operations vertex-deletion, edge-deletion and switching.

A parameterized problem is a decision problem where in addition to the input, a parameter is also considered (the parameter is an integer function of the input). Such a problem is fixed parameter tractable (FPT) if for any input I with parameter value k, it can be solved in time 
 for a computable function f and integer c. It is in the class XP if it can be solved in time 
 for a computable function g. It is W[1]-hard if all problems in the class W[1] can be reduced in FPT time to it. For more details, see the books [16, 17].

Let us now formally define the problems of interest to us, where H is a fixed edge-coloured graph (the parameter is always k).

figure a
figure b
figure c
In the study of the three above problems, one may assume that H is a core (that is, H does not have a homomorphism to a proper subgraph of itself). Indeed, it is well-known that for any subgraph 
 of H with 
, we have 
 if and only if 
 [4].

Of course, whenever H-Colouring is NP-complete, all three above problems are NP-complete, even when , and so they are not in XP (unless ). This is for example the case when H is a monochromatic triangle: then this is the problem 3-Colouring. Thus, from the point of view of parameterized complexity, it is of primary interest to consider these problems for edge-coloured graphs H such that H-Colouring is in P. In that case a simple brute-force algorithm iterating over all k-subsets of vertices of G implies that the three problems are in XP and hence the interesting question is whether these problems are FPT or not. For undirected graphs, the only cores H for which H-Colouring is in P are the three connected graphs with at most one edge [24] (a single vertex with no edge, a single vertex with a loop, two vertices joined by an edge), so in that case the interest of these problems is limited. However, for many interesting families of edge-coloured graphs H, the problem H-Colouring is in P, and the class of such graphs H is not very well-understood, see [3,4,5]. Even when H is a 2-edge-coloured cycle, tree or complete graph, there are infinitely many H with H-Colouring NP-complete and infinitely many H where it is in P [3].

Recall that when H is a single vertex with no loop, VD-H -Colouring is exactly Vertex Cover. If H has a single edge, VD-H -Colouring and ED-H-Colouring are Odd Cycle Transversal and Edge Bipartization, respectively. For H consisting of a single (blue) loop, SW-H-Colouring for  consists in checking whether the given 2-edge-coloured graph G is balanced (a problem that is in P [6]). More generally, SW-H-Colouring for 2-edge-coloured graphs H and  (that is, the number of switchings is unrestricted) is exactly the problem Signed H-Colouring studied in [6, 7, 23].

Related Work Several works address the parameterized complexity of graph colouring problems. Graph colouring problems parameterized by structural parameters are considered in [28]. In [12], the vertex-deletion variant of H-List-Colouring is studied. Graph modification problems for Colouring in specific graph classes and for operations vertex-deletion and edge-deletion are considered, for example in [14] (bipartite graphs, split graphs) and [38] (comparability graphs).

Every problem VD-H-Colouring can be encoded as a special weighted homomorphism problem 
-Weighted-Colouring, as considered in [35]. In that setting, the target 
 is a graph with integer weights, and the goal is to find a homomorphism of some input graph G whose weight (i.e. the sum of weights of the images of the vertices of G) is at most some given integer k. In our setting, we could generalize this problem to edge-coloured graphs and build 
 from H by setting all weights to 0 and adding a new vertex x adjacent to all vertices of H with weight 1. Now finding a weighted homomorphism of G to H with weight as most k is the same as having a positive solution to VD-H -Colouring (vertices mapped to x represent the deleted vertices in S). A similar notion was studied for general CSPs in [9]. In that setting, only one “free” target vertex has weight 0 and all the others, weight 1, and the goal is to find a homomorphism of weight at most a given integer k. The Boolean CSP version where there are only two target values, 0 and 1, and we wish to minimize the number of variables set to 1, is called the Min Ones problem [30].

Algorithmic problems relative to the operation of Seidel switching, similar to our switching, have been considered. Given a (simple) graph G, the Seidel switching operation performed at a vertex exchanges all adjacencies and non-adjacencies of v. This can be seen as performing a switching operation in a 2-edge-coloured complete graph, where blue edges are the actual edges of G, and red edges are its non-edges. In [19, 29], the complexity of graph modification problems with respect to the Seidel switching operation and the property of being a member of certain graph classes has been studied. Our work on SW-H-Colouring problems can be seen as a variation of these problems, generalised to arbitrary 2-edge-coloured graphs.

A related switching problem is as follows: given a signed graph G and a positive integer k, can it be switched so that there are at most k negative edges? This is shown to be NP-complete in [26].

Our Results We study the classical and parameterized complexities of the three problems VD-H -Colouring, ED-H-Colouring and SW-H-Colouring. Our focus is on t-edge-coloured graphs H of order at most 2 with t an integer ( for SW-H-Colouring). Despite having just two vertices, H-Colouring for such H is interesting and nontrivial; it is proved to be in P by two different nontrivial methods, see [1, 5]. Thus, the three considered problems are in XP for such H. (Recall that for suitable 1-edge-coloured graphs H of order 1 or 2, VD-H -Colouring and ED-H-Colouring include Vertex Cover and Odd Cycle Transversal.)

We completely classify the classical complexity of VD-H -Colouring when H is a t-edge-coloured graph of arbitrary order: it is either trivially in P or NP-complete. It turns out that all VD-H -Colouring problems are FPT when H has order at most 2. To prove this, we extend a method from [5] and reduce the problem to an FPT variant of 2-Sat.

For ED-H-Colouring, a classical complexity dichotomy seems more difficult to obtain, as there are nontrivial P cases. We perform such a classification when H is a t-edge-coloured graph of order at most 2. Similar 2-Sat-based arguments as for VD-H -Colouring give a FPT algorithm for ED-H-Colouring when H has order at most 2.

For SW-H-Colouring when H is a 2-edge-coloured graph, the classical dichotomy is again more difficult to obtain. We perform such a classification by using some characteristics of the switch operation and by giving some reductions to well-known NP-complete problems. In contrast to the two previous cases for the parameterized complexity, we show that for three graphs H of order 2, SW-H-Colouring is already W[1]-hard (and cannot be solved in time 
 for any computable function f, assuming the ETHFootnote 1). For all other 2-edge-coloured graphs of order 2, we prove that SW-H-Colouring is FPT.

Table 1 presents a brief overview of our results, and Table 2 lists the classical and parameterized complexities of the three considered problems for all 2-edge-coloured graphs of order at most 2.

Table 1 Overview of our main results, sorted by problem and by type of classification
Full size table

Table 2 Our results for target graphs H of order at most 2 (up to inversion of edge-colours, there are twelve such graphs, see Sect. 3)
Full size table

Our paper is structured as follows. In Sect. 2, we state some definitions and make some preliminary observations in relation with the literature. In Sect. 3, we study the classical complexity of the three considered problems. We address their parameterized complexity in Sect. 4. Finally, we conclude in Sect. 5.

Preliminaries and Known Results
Some Known Complexity Dichotomies
Recall that whenever H-Colouring is NP-complete, VD-H -Colouring, ED-H-Colouring and SW-H-Colouring are NP-complete (even for ), and thus are not in XP, unless P = NP. For example, this is the case when H is a monochromatic triangle. When Signed H-Colouring (this is SW-H-Colouring for , see [6]) is NP-complete, then SW-H-Colouring is NP-complete (but could still be in XP or FPT).

On the other hand, when H-Colouring is in P, all three problems are in XP for parameter k (by a brute-force algorithm iterating over all k-subsets of vertices of G, performing the operation on these k vertices, and then solving H-Colouring):

Proposition 1
Let H be an edge-coloured graph such that H-Colouring is in P. Then, VD-H -Colouring, ED-H-Colouring and SW-H-Colouring can be solved in time 
.

When  and H is 1-coloured, we have the following classic theorem.

Theorem 2
(Hell and Nešetřil [25]) Let H be a 1-edge-coloured graph. H-Colouring is in P if the core of H has at most one edge (H is bipartite or has a loop), and NP-complete otherwise.

There is no analogue of Theorem 2 for edge-coloured graphs. In fact, it is proved in [6, Sect. 3] that a dichotomy classification for H-Colouring restricted to 2-edge-coloured H would imply a dichotomy for all fixed-target CSP problems. Thus, no simple combinatorial classification is expected to exist. Even for trees, cycles or complete graphs, such classifications are far from trivial, see the PhD thesis [3] for an overview of some partial results highlighting the difficulty of the problem. Some classifications exist for certain classes of graphs H, such as those of order at most 2 (see [1, Sect. 3] and [5, Sect. 2.1]) or paths [4, Sects. 2 and 3].

For SW-H-Colouring with , (that is, Signed H-Colouring), we have the following (where the switching core of a 2-edge-coloured graph is a notion of core where an arbitrary number of switchings can be performed before the self-mapping).

Theorem 3
(Brewster et al. [6, 7]) Let H be a signed graph. Signed H-Colouring is in P if the switching core of H has at most two edges, and NP-complete otherwise.

Note that 2-edge-coloured graphs where the switching core has at most two edges either have one vertex (with zero loop, one loop or two loops of different colours), or two vertices (with either one edge or two parallel edges of different colours joining them) [6]. If there are two vertices joined by one edge and a loop at one of the vertices, we can switch at the non-loop vertex if necessary to obtain one edge-colour, and then retract the whole graph to the loop-vertex, so this is not a core.

Homomorphism Dualities and FPT Time
For a t-edge-coloured graph H, we say that H has the duality property if there is a set  of t-edge-coloured graphs such that, for any t-edge-coloured graph G, 
 if and only if no graph F of  satisfies 
. If  is finite, we say that H has the finite duality property. If checking whether any graph F in  satisfies 
 (for an input edge-coloured graph G) is in P, we say that H has the polynomial duality property. This is in particular the case when  is finite. For such H, H-Colouring is in P. This topic is explored in detail for edge-coloured graphs in [1]. By a simple bounded search tree argument, we get the following:

Proposition 4
Let H be an edge-coloured graph with the finite duality property. Let . The problems VD-H -Colouring and SW-H-Colouring can be solved in time 
 for some computable function f. The problem ED-H-Colouring can be solved in time 
 for some computable function f.

Proof
First, we search for all appearances of homomorphic images of graphs in  (there are at most  such images for some exponential function f), which we call obstructions. This takes time at most 
, where . Then, we need to get rid of each obstruction. For VD-H -Colouring (resp. ED-H-Colouring), we need to delete at least one vertex (resp. edge) in each obstruction, thus we can branch on all c (resp. 
) possibilities. For SW-H-Colouring, we need to switch at least one of the vertices of the obstruction (but then update the list of obstructions, as we may have created a new one). In all cases, this gives a search tree of height k and degree bounded by a function of , which is FPT. 

Some dualities have been obtained for small edge-coloured graphs. The following theorem from [1, Sect. 3] is crucial for our techniques.

Theorem 5
(Brewster et al. [1, Sect. 3]) Let H be an edge-coloured graph of order at most 2. Then, H has the polynomial duality property. If H has order 1, then H has the finite duality property.

We next describe the duality sets for some special cases that will be used in our proofs.

Lemma 6
(Brewster et al. [1, Proposition 3.3]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of cycles with an odd number of blue edges.

We present a brief proof of their result. Note that homomorphic images of paths are walks and that homomorphic images of cycles are closed walks.

Proof
Let G be a 2-edge-coloured graph which admits a homomorphism  to 
. Suppose that G contains a homomorphic image of some cycle with an odd number of blue edges, that is to say G contains a closed walk W with an odd number of blue edges. Note that if uv is a blue edge, then  and if uv is a red edge, then . By going around the closed walk, we obtain  for any vertex u of W, a contradiction.

Let G be a 2-edge-coloured graph which contains no homomorphic image of cycles with an odd number of blue edges. We identify every connected red components of G. The graph that we obtain has red loops but no other red edges, moreover the graph induced by the blue components is bipartite (otherwise there would be a cycle with an odd number of blue edges in G). Hence by identifying the vertices of each part in the bipartition, we obtain 
. Hence 
. 

Lemma 7
(Brewster et al. [1, Proposition 3.4]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of a red-blue-red 4-vertex path.

Proof
Let u be the vertex of 
 with a red loop, and v the vertex with a blue loop. Given a 2-edge-coloured graph G, map all the vertices incident with a red edge to u, and map all others to v. This is a homomorphism unless two vertices mapped to u are joined by a blue edge. But in this case, we can find a homomorphic image of a red-blue-red walk in G. Conversely, note that a red-blue-red path has no homomorphism to 
. 

Lemma 8
(Brewster et al. [1, Theorem 3.5]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of a path of the form 
 (where R is a red edge, B a blue edge and  is an integer) or of cycles with an odd number of blue edges.

Proof
(Proof (sketch)) First note that none of the two obstructions admit a homomorphism to 
. If a 2-edge-coloured graph G has none of these homomorphic images then by identifying every vertex incident with a red edge of G, we obtain a bipartite graph on the blue edges for which one of the two parts contains every vertex incident with a red loop. By mapping this part to the vertex of 
 with the red loop and the other part to the other vertex, we obtain our homomorphism. 

Lemma 9
(Brewster et al. [1, Theorem 3.7]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of an all-blue odd cycle.

Proof
(Proof (sketch)) The idea is to note that the graph induced by the blue edges is bipartite and that the red edges do not create any constraints. 

The proof of the following results are more complicated, hence we refer the reader to [1] for the details. In a 2-edge-coloured graph, a closed walk 
 is alternating if for every , 
 and 
 do not have the same colour. An odd figure eight is a closed walk of the form 
, 
, ..., 
, 
, 
, ..., 
, 
, i.e. two odd cycles which share a vertex 
.

Lemma 10
(Brewster et al. [1, Theorem 3.7]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of an odd figure eight 
, 
, ..., 
, 
, 
, ..., 
, 
 for which all edges 
 are blue.

Lemma 11
(Brewster et al. [1, Theorem 3.7]) A 2-edge-coloured graph has a homomorphism to 
 if and only if it contains no homomorphic image of alternating odd figure eight, that is, an alternating closed walk 
, 
, ..., 
, 
, 
, ..., 
, 
.

P/NP-Complete Complexity Dichotomies
In this section, we prove some results about the classical complexity of VD-H -Colouring, ED-H-Colouring and SW-H-Colouring. We first adapt a general method from [32] to show that VD-H -Colouring is either trivial, or NP-complete in Sect. 3.1.

For ED-H-Colouring and SW-H-Colouring, we cannot use this technique (in fact there exist nontrivial P cases). Thus, we turn our attention to edge-coloured graphs of order 2 (note that for every edge-coloured graph H of order at most 2,H-Colouring is in P [1, 5]). Recall that SW-H-Colouring is defined only on 2-edge-coloured graphs, so our focus is on this case (but for ED-H-Colouring our results hold for any number of colours). In Sect. 3.2, we prove a dichotomy result for graphs of order at most 2 for the ED-H-Colouring problem. The SW-H-Colouring problem is treated in Sect. 3.3, where we also prove a dichotomy result.

The twelve 2-edge-coloured graphs of order at most 2 that are cores (up to symmetries of the colours) are depicted in Fig. 1. The two colours are red (dashed edges) and blue (solid edges). We use the terminology of [1]: for , the 2-edge-coloured graph 
 is the graph of order 1 with no loop, a red loop, a blue loop, and both kinds of loops, respectively. Similarly, for  and , the graph 
 denotes the graph of order 2 with vertex set . The string  indicates the presence of an edge between 0 and 1: no edge, a red edge, a blue edge and both edges for −, r, b and rb, respectively. Similarly,  and  denote the presence of a loop at vertices 0 and 1, respectively (− for no loop, r for a red loop, b for a blue loop).

Fig. 1
figure 1
The twelve 2-edge-coloured cores of order at most 2 considered in this paper

Full size image

Dichotomy for VD-H -Colouring for All H
Graph modification problems for operations vertex-deletion and edge-deletion have been studied extensively. For a graph property , we denote by Vertex Deletion- the graph modification problem for property  and operation vertex-deletion. A property is hereditary if  implies  for all induced subgraphs H of G. Lewis and Yannakakis [32] defined a non-trivial property  on graphs as a property true for infinitely many graphs and false for infinitely many graphs. These definitions can be extended to edge-coloured graphs. They showed the following general result.

Theorem 12
(Lewis and Yannakakis [32]) The Vertex Deletion- problem for non-trivial graph-properties  that are hereditary is NP-hard.

By modifying the proof of Theorem 12, we can prove the two following results.

Theorem 13
Let  be a non-trivial property of t-edge-coloured graphs that is hereditary and true for all empty graphs. Then, Vertex Deletion- is NP-hard.

The proof of this theorem follows the proof of Theorem 12 from [32]. The only difference is that we work with t-edge-coloured graphs instead of undirected graphs.

Proof
Let G be a t-edge-coloured graph. We denote by CC(G) the set of connected components of G. These components are also t-edge-coloured graphs. For x and v two vertices of G, let 
 be the set of vertices connected to x in . For any vertex , let 
 be the set of connected subgraphs of G induced by the sets of vertices of the form 
 for . In other words, 
 is the set of connected components of  where we added the vertex v. In particular, if v is not a cut-vertex, then 
.

For a connected t-edge-coloured graph G and , let 
 such that 
 and the multi-sets 
 and 
 are equal. In other words, 
 is the ordered sequence of the orders of the t-edge-coloured graphs in 
. Let  be the smallest sequence (for the lexicographic order) 
 over all possible vertices .

For a t-edge-coloured graph G, let 
 such that 
 (where 
 is the lexicographical order) and 
. In other words,  is the ordered sequence of -sequences of the connected components of G.

Recall that  is non-trivial. In particular,  has counter-examples. For an integer p and a t-edge-coloured graph G, we denote by pG, the t-edge-coloured graph composed of p disjoint copies of G. Let J be a t-edge-coloured graph such there exists some  for which  is false, and which has the minimum -sequence among the t-edge-coloured graphs verifying this property. Let  such that  is false and  is true. Suppose that 
 where 
. Let x be a vertex of 
 for which 
 and let 
 be the connected t-edge-coloured graph of 
 with the greatest number of vertices. Since all empty graphs verify , J contains at least one edge. This implies that 
 and 
 contain at least one edge. In particular, 
 contains at least two vertices. Let y be a vertex of 
 which is different from x. Let 
 (resp. 
) be the t-edge-coloured graph obtained from 
 (resp. J) by removing the vertices of 
. See Fig. 2 for an example.

Fig. 2
figure 2
An example of a 4-edge-coloured graph J and its induced subgraphs 
, 
, 
, 
 and 

Full size image

Each induced subgraph of J that we defined will be useful to show that Vertex Deletion- is NP-hard. We reduce Vertex Cover to Vertex Deletion-. (Note that it may be complicated to find the t-edge-coloured graph J, but this is a constant graph that depends only on  and this fact only makes the reduction non-constructive.) Let  be an instance of Vertex Cover where G is an undirected graph of order p and  is an integer.

We construct the t-edge-coloured graph H from G as follows. For each vertex , we add a copy 
 of 
 to H.

For each edge , we add a copy 
 of 
 to H. We identify the copy 
 (resp. 
) of x in 
 (resp. 
) with the copy 
 (resp. 
) of x (resp. y) in 
. This concludes the construction of H. See Fig. 3 for an example. We construct the t-edge-coloured graph 
 by taking pk disjoint copies of H.

Fig. 3
figure 3
An example of the graph H when J is the 3-edge-coloured graph of Fig. 2 and G is just an edge uv. Here, we chose to identify 
 with 
 and 
 with 
. Note that if no vertex is removed from H, then H contains J as an induced subgraph

Full size image

We claim that  is a positive instance of Vertex Cover if and only if 
 is a positive instance of Vertex Deletion-.

Suppose that there is a subset S of vertices of G of size at most  that is a vertex cover of G. We construct 
 as follows. For every copy of H in 
 and every vertex , we add the copy of the vertex 
 of 
 to 
. Note that 
. We claim that 
 verifies . Let  be the set of t-edge-coloured graphs that can be constructed as follows. Take a copy of 
 and at most  copies of 
. For each copy of 
, delete one of x or y and identify the other vertex with the copy 
 of x in the copy of 
. The set  contains at most 
 t-edge-coloured graphs,  contains all possible maximal connected induced subgraphs of H connected to a vertex 
 when every 
 for  has been removed in H.

A connected component C of 
 can be of four types.

1.
The connected component C belongs to 
.

2.
The connected component C belongs to .

3.
The connected component C is isomorphic to a connected induced subgraph of 
 where the vertex x has been removed.

4.
The connected component C is isomorphic to a connected induced subgraph of 
 where the vertices x and y have been removed.

Let 
 be the t-edge-coloured graph composed of disjoint copies of the vertices of  and disjoint copies of 
 and 
. Note that every connected component of 
 is an induced subgraph of 
. Let , note that 
 where 
 is the copy of x in 
. Note that 
 where X is the set corresponding to the copies of 
 in C with one of x or y removed. The connected multigraphs of X have order 
, hence 
. Note that 
 since for every , 
.

By minimality of J, any number of disjoint copies of 
 must verify , hence 
 verifies  and 
 is a positive instance of Vertex Deletion-.

Suppose that there is a subset 
 of vertices of 
 of size at most  such that 
 holds. Note that 
 can contain at most  copies of the t-edge-coloured graph J by definition of J. In particular 
 has at least  copies of H for which after removing the vertices of 
, the t-edge-coloured graph does not contain a copy of J.

Suppose that for one of the copies 
 of H, 
. In this case, we construct  as follows. If 
, then add u to S. If 
, then add arbitrarily one of u or v to S. Note that . Suppose that there is an edge , such that . Our copy of H contains 
, 
 and 
 and these t-edge-coloured graphs do not contain vertices from S. The vertex 
 has been identified with one of 
 or 
, say 
. The t-edge-coloured graph composed of 
 and 
 with 
 and 
 identified is exactly the t-edge-coloured graph J. Hence if 
 does not contain J, the set S is a vertex cover of G of size at most . l Suppose, by contradiction, that for every copy of H either 
 contains J or verifies 
. In this case, 
 has at least  vertices. Moreover, as  (otherwise the instance of Vertex Cover is trivial), , a contradiction.

Hence G has a vertex cover of size at most . 

For a t-edge-coloured graph, the only case where the property of mapping to H is trivial (in this case, always true) is when H has a vertex with all t kinds of loops attached (in which case the core of H is the subgraph induced by that vertex). Thus we obtain the following dichotomy.

Corollary 14
Let H be a t-edge-coloured graph. VD-H -Colouring is in P if H contains a vertex having a loop of each edge-colour, and NP-complete otherwise.

Proof
For every edge-coloured graph H, VD-H -Colouring is in NP. H-colouring is a hereditary property and is verified by all independent sets, thus if it has infinitely many NO-instances (on loopless t-edge-coloured graphs); it is nontrivial, and thus NP-hard by Theorem 13. Let us see when this is the case.

We can observe that the problem is actually trivial if H contains a vertex with all t-coloured loops, indeed every t-edge-coloured graph can be mapped to this vertex (in this case, we return YES). Moreover, if not, then the complete graph 
 with all t-coloured edges between each pair of vertices does not map to H. Indeed by the pigeonhole principle, two vertices u and v of our input t-edge-coloured graph must have the same image vertex w in H. As there is an edge coloured i between u and v, there must be a loop coloured i on w. Thus w should have all t-coloured loops, a contradiction. Thus, in all such cases, the property is nontrivial on loopless t-edge-coloured graphs and hence the problem is NP-complete. 

Dichotomy for ED-H-Colouring When H Has Order 2
No analogue of Theorem 12 for operation edge-deletion exists nor is expected to exist [39]. We thus restrict our attention to the case of edge-coloured graphs H of order at most 2. For this case we classify the complexity of ED-H-Colouring. Since multiple edges of the same colour are irrelevant, if H has order 2, for each edge-colour there are three possible edges.

Theorem 15
Let H be an edge-coloured core of order at most 2. If each colour class of the edges of H contains only loops or contains all three possible edges, then ED-H-Colouring is in P; otherwise it is NP-complete.

We separate the proof of this theorem into several lemmas.

Lemma 16
Let H be an edge-coloured core of order at most 2. If each colour class of the edges of H contains only loops or contains all three possible edges, then ED-H-Colouring is in P.

Proof
First note that if colour i has all three possible edges in H, we can simply ignore this colour by removing it from H and G without decreasing the parameter, as it does not provide any constraint on the homomorphisms.

We can therefore suppose that H contains only loops. If two colours induce the same subgraph of H, then we can identify these two colours in both G and H as they give the same constraints.

If G has colours that H does not have, then remove each edge with this colour and decrease the parameter for each removed edge. If it goes below zero then we reject.

We can now assume that H has only loops and G has the same colours as H. We are left with only a few cases, as H is a core (there is no vertex whose set of loops is included in the set of loops of the other).

H has a single loop. Then, 
 as G has the same colours as H.

H contains two non-incident loops with different colours and two non-incident loops of a third colour. Up to symmetry, suppose that H has one blue loop and one green loop on the first vertex and has one red loop and one green loop on the second vertex. We will reduce to the problem where we have removed the green loops. Let p be the number of green edges of G. We construct 
 from G by replacing each green edge by a blue edge and a red edge (we can end up with multiple blue or red edges that way). We claim that ED-H-Colouring with parameter k and input G is true if and only if ED-
-Colouring with parameter  on input 
 is true. If the first problem has a solution S, then remove the corresponding edges from 
 (if the corresponding edge of G is green remove the two new edges in 
). Each vertex of  is set to one component, in particular each green edge is set to a vertex with a blue edge or a red edge. If a green edge uv of G is sent to the first vertex, we remove the edge of 
 corresponding to uv which is red. We can check that after removing those edges, 
 admits a homomorphism to 
. We removed at most k edges in the first step plus the number of green edges in S and removed one edge for each green edge left in the second step. Thus, we removed less than  edges in 
. If the second problem has a solution S, then remove from G all blue and red edges of S. Remove the green edges of G only if both were removed in 
. Note that S contains at least one edge in 
 for each green edge of G. Thus we removed less than k edges in G. Moreover, 
 by taking the same homomorphism as in 
. Indeed, the blue and red edges are sent to one of the two loops while each green connected component is sent to one vertex. Using this method we can reduce the problem to ED-
-Colouring, which is our last case.

H contains two non-incident loops with different colours; then 
. Indeed if there were any other kind of loop, then we would be in the previous case or we could identify two colours. Note that a 2-edge-coloured graph maps to 
 if and only if it has no red edge incident to a blue edge. Thus, solving ED-
-Colouring amounts to splitting G into disconnecting red and blue connected components. This can be done by constructing the following bipartite graph: put a vertex for each edge of G; two vertices are adjacent if the corresponding edges in G are adjacent and of different colours. Solving ED-
-Colouring is the same as solving Vertex Cover on this bipartite graph, which is in P.

There is no other case as otherwise the set of loops of one vertex would be included in the set of loops of the other. 

The NP-completeness proofs are by reductions from Vertex Cover, based on vertex- and edge-gadgets constructed using obstructions to the corresponding homomorphisms from [1] presented in Sect. 2.2.

We start with proving the NP-hardness of two special cases, and then we will show that we can always reduce the problem from these two cases.

Lemma 17
The problem ED-
-Colouring is NP-hard.

Proof
We reduce from Vertex Cover. Given an input graph G of Vertex Cover, we construct a 2-edge-coloured graph 
 from G as follows. Take G and colour all edges blue, then add a pending red edge 
 to each vertex v of G (see Fig. ). By Lemma , a 2-edge-coloured graph maps to 
 if and only if it does not contain a homomorphic image of a red-blue-red 3-edge-path [1].

Assume that G has a vertex cover C of size at most k. When removing these vertices in 
, the resulting graph is a collection of independent red edges and thus maps to 
.

Conversely, assume that we have a set S of k edges of 
 such that 
. In particular, for every blue edge uv of G, we must have one of 
 or 
 in S. Thus we can obtain a vertex cover of G of size k from S: for a vertex v, if 
 belongs to S, we add v to that vertex cover. If , we add randomly u or v to the vertex cover.

We thus have a polynomial-time reduction from Vertex Cover to ED-
-Colouring. Therefore this problem is NP-hard. 

Fig. 4
figure 4
Reduction from Vertex Cover to ED-
-Colouring

Full size image

Lemma 18
The problem ED-
-Colouring is NP-hard.

Proof
We again reduce from Vertex Cover. For an input graph G of Vertex Cover, we construct a 2-edge-coloured graph 
 from G as follows. We start with a red copy of G, then we add a pending blue edge 
 for each . Finally, for each edge , we create three new vertices 
 such that 
 are red and 
 are blue (see Fig. ).

We then recall Lemma  proved in [1], stating that a 2-edge-coloured graph maps to 
 if and only if it does not contain an alternating odd figure eight, that is, an alternating closed walk 
, 
, ..., 
, 
, 
, ..., 
, 
. Note that our construction creates such a pattern for each edge of G.

Fig. 5
figure 5
Reduction from Vertex Cover to ED-
-Colouring

Full size image

Assume that G has a vertex cover C of size at most k. Then for each , we delete 
 from 
. We prove that the resulting graph 
 contains no alternating odd figure eight. First observe that in the graph obtained from 
 by removing all edges from G, all the alternating walks have length at most 7, hence it contains no odd figure eight. Thus, if 
 contains an alternating odd figure eight, then it uses an edge uv from G. Since C is a vertex cover, either 
 or 
 is not present in 
. Then, either u or v has no incident blue edge. This implies that 
 has no alternating odd figure eight, and hence maps to 
.

Conversely, assume that we can remove a set S of k edges from 
 so that 
. We construct a set  as follows: if 
, then we add . If 
 or 
 lie in S, then we add randomly u or v to C. Note that, in each case, . Moreover, we claim that C is a vertex cover of G. Assume not, and consider an edge uv in G such that . By construction, this means that none of the edges 
 lies in S. These vertices form an alternating odd figure eight, contradicting that 
.

Therefore, ED-
-Colouring is NP-hard. 

Lemma 19
For H an edge-coloured core of order at most 2, if there exists a colour of H which contains a non-loop and does not contain all three possible edges, then ED-H-Colouring is NP-complete.

Proof
Take such a graph H. If one colour, say blue, contains only one edge from the first vertex to the second, then for graphs G which are all blue, the problem is equivalent to Edge Bipartization, which is NP-complete.

Now, if H contains no such edge, then by assumption it must contain a colour, say blue, with a loop and an edge from the first vertex to the second (and no other edge of this colour). Let u be the vertex with the loop and v be the other vertex. Since H is a core, H does not map to its subgraph induced by u. If for every colour of H there was a loop of this colour on u, then H would not be a core. Hence there exists a colour, say red, such that there is a red edge in H and u has no loop coloured red. Hence, the graph obtained by removing all edges which are neither blue nor red, is either 
 or 
 up to symmetry.

Thus, by the previous two Lemmas 17 and 18, the problem is NP-complete using the same reductions (the edges of H that are neither blue nor red can be ignored). 

Dichotomy for SW-H-Colouring When H Has Order 2
We now turn our attention to the switching operation.

Theorem 20
Let H be a 2-edge-coloured graph from Fig. 1. If H is one of 
, 
, 
, 
 or 
, then SW-H-Colouring is NP-complete. Otherwise, it is in P.

Proof
We begin with the P cases.

Every 2-edge-coloured graph maps to 
, thus SW-
-Colouring is trivially in P.

No graph with an edge can be mapped to 
 (regardless of switchings).

For 
, we need to test if the graph can be switched to an all-blue graph in less than k switchings. There are only two sets of switchings that achieve this signature (one is the complement of the other). It is in P to test if the graph can be switched to an all-blue graph (see [6, Proposition 2.1]). Doing that also gives us one of the two switching sets; we then need to check if its size is at most k or at least . So, SW-
-Colouring is in P.

For 
, we just apply the algorithm for 
 and 
 to each connected component, one of the two must accept for each of them.

For 
, a graph G is a YES-instance if and only if G (without considering edge-colours) is bipartite, which is polynomially testable.

For 
 a graph G is a YES-instance if and only if it is bipartite and maps to 
. We just need to check the two properties, which are both in P.

For 
, a graph G maps to 
 if and only if it has no cycles with an odd number of blue edges (see Lemma , proved in [1]). This property is preserved under the switching operation. Thus, switching the graph does not impact the nature of the instance. It is thus in P (we can test with ) since 
-Colouring is in P [1, 5].

We now consider the NP-complete cases. For every H, SW-H-Colouring clearly lies in NP. NP-hardness follows from the above-stated Theorem 3 (proved in [6, 7]) in all but one case: indeed, 
, 
, 
 and 
 are their own switching cores and have at least three edges, thus when H is one of these, SW-H-Colouring is NP-complete (even with ).

The last case is 
. We give a reduction from Vertex Cover to SW-
-Colouring. Given instance G of Vertex Cover, we construct an all-red copy 
 of G, and we attach to each vertex v of G a blue edge 
, with a red loop on 
 (see Fig. ).

Denote by x the vertex of 
 with a loop, and by y the other one. Assume that G has a vertex cover C of size at most k. Denote by 
 the graph obtained from 
 by switching at the vertices of C. We map every vertex 
 to x, every vertex of C to x and the remaining ones to y. Since C is a vertex cover, each red edge of 
 is either a loop on some vertex 
, an edge 
 with  or an edge uv with . In each case, both endpoints are mapped on x. The blue edges of 
 are then either 
 with  or uv with  and . In both cases, the two endpoints are mapped to different vertices of 
; thus, 
.

Conversely, assume that we can switch 
 at vertices from a set S such that the resulting graph 
 maps to 
. Let C be the set of vertices v of G such that v or 
 lies in S. Note that C has size at most |S|. We claim that C is a vertex cover of G. Assume that there is an edge uv in G with . By construction, 
, so 
 are blue in 
, and uv is red. Thus, u, v have to be mapped to x, and 
 to y, a contradiction since 
 has a incident red loop in 
. Therefore C is a vertex cover of G. 

Fig. 6
figure 6
Reduction from Vertex Cover to SW-
-Colouring

Full size image

VD-H -Colouring and ED-H-Colouring
For many edge-coloured graphs H of order at most 2, we can show that VD-H -Colouring and ED-H-Colouring are FPT by giving ad-hoc reductions to Vertex Cover, Odd Cycle Transversal or a combination of both. However, a more powerful method is to generalise a technique from [5] used to prove that H-Colouring is in P by reduction to 2-Sat (see also [3]):

Theorem 21
(Brewster et al. [5]) Let H be an edge-coloured graph of order at most 2. Then, for each instance G of H-Colouring, there exists a polynomially computable 2-Sat formula F(G) that is satisfiable if and only if 
. Thus, H-Colouring is in P.

Proof
(Proof (sketch)) The formula F(G) from Theorem 21 contains a variable 
 for each vertex v of G, and for each edge uv, a set of clauses that depends on H, as described in Table 3 (reproduced from [5]). The idea is to see the two vertices of H as “true” (1) and “false” (0), and for each edge uv of a certain colour, to express the possible valid assignments of 
 and 
 based on the edges of that colour that are present in H. For example, if H has, for colour i, a loop at vertex 0 and an edge 01, but no other edge of colour i, for each edge uv of G of colour i, we add the clause 
 
 
 to F(G), indeed the constraint for edge uv is satisfied if at least one of u, v is mapped to 0. 

Table 3 Clauses appearing in the 2-Sat formula F(G) of Theorem 21 proved in [5], for each edge uv of G coloured i. The clauses depend on the edge set of H in colour i, described in the rows (where )
Full size table

We will show how to generalise this idea to VD-H -Colouring and ED-H-Colouring. We will need the following parameterized variant of 2-Sat:

figure p
Variable Deletion Almost 2-Sat and another similar variant, Clause Deletion Almost 2-Sat (where instead of k variables, k clauses may be deleted), are known to be FPT (see [16, Chapter 3.4] and [37]). We need to introduce a more general variant, that we call Group Deletion Almost 2-Sat, defined as follows.

figure q
By a generalisation of [16, Exercise 3.21] for Clause Deletion Almost 2-Sat, we obtain the following complexity result for Group Deletion Almost 2-Sat.

Proposition 22
Group Deletion Almost 2-Sat is FPT.

Proof
We will reduce the problem Group Deletion Almost 2-Sat to the problem Variable Deletion Almost 2-Sat.

Take an instance  of Group Deletion Almost 2-Sat with groups 
. We construct an instance  of Variable Deletion Almost 2-Sat as follows. For , we replace each occurrence of variable x in the clauses of group 
 by a new variable 
. Moreover, for each variable x and for each i, j, such that , we add the two clauses 
 
 and 
 
 to  (i.e. 
). The parameter for  remains k.

Suppose that  is a positive instance, i.e. that after removing up to k variables, the resulting set of clauses 
 is satisfied by a truth assignment v. For each removed variable 
, we remove the group of clauses 
 in . Note that at most k groups are removed since we removed at most k variables in . We have to show that the new set of clauses 
 is satisfiable.

Note that if 
 and 
 are not removed, then v satisfies 
 
 and 
 
, which ensures that 
. Thus, defining the truth value of x by the value of 
 (for some non-removed 
) is well-defined. Take a clause  of 
, then 
 is a satisfied clause of 
 for some . By definition of our truth assignment,  is satisfied, so 
 is satisfiable. Therefore,  is a positive instance.

Conversely, suppose that we can remove k groups from  such that the resulting set of clauses 
 is satisfied by v. If we removed the group 
 in the solution, then we remove 
 in  where 
 is a variable of 
 that appears in each of its clauses. Such a variable exists by definition of . This removes all the clauses corresponding to the clauses of the group 
 in . Thus, taking the truth assignment that assigns to each 
 the value v(x) satisfies the instance . 

We are now able to prove the following theorem.

Theorem 23
For every edge-coloured graph H of order at most 2, VD-H -Colouring and ED-H-Colouring are FPT.

Proof
For an instance G, k of VD-H -Colouring or ED-H-Colouring, we consider the formula F(G) from Theorem 21 (see Table 3). In F(G), to each vertex of G corresponds a variable 
. Deleting v from G when mapping G to H has the same effect as deleting 
 when satisfying F(G). Thus, this is an FPT reduction from VD-H -Colouring to Variable Deletion Almost 2-Sat.

Moreover, each edge uv of G corresponds to one or two clauses of F(G). This naturally defines the groups of Group Deletion Almost 2-Sat by grouping the clauses corresponding to the same edge. Removing an edge is equivalent to removing its corresponding group. To finish, we have to make sure that we can have one variable common to all the clauses of each group. This is the case in the reduction in [5] for every case except when 
 (the set of edges of colour i in H) is just a loop. Assume without loss of generality that the loop is on vertex 1 (the other loop can be treated the same way). Suppose uv has colour i in G; then uv must be mapped to the loop on vertex 1. The original reduction added the clauses 
; we modify this part and add instead the clauses 
 where c is a new variable. This is now a valid and equivalent instance of Group Deletion Almost 2-Sat, which is FPT by Proposition 22. 

SW-H-Colouring: FPT Cases
We now consider the parameterized complexity of SW-H-Colouring. By Theorem 20, there are five 2-edge-coloured graphs H of order at most 2 with SW-H-Colouring NP-complete. We first show that two of them are FPT:

Theorem 24
SW-
-Colouring and SW-
-Colouring are FPT.

Proof
The graph 
 has the finite duality property by [1], see Lemma : 
 if and only if G does not contain a walk abcd where ab and cd are red edges and bc is a blue edge. This implies FPT time for SW-
-Colouring by a simple bounded search tree algorithm (Proposition 4).

For the graph 
, as mentioned in Lemma , the duality set  discovered in [1] is composed of walks of the form 
 (where R is a red edge, B a blue edge and  is an integer) and of closed walks with an odd number of blue edges. As seen before, if the graph G has such a cycle then switching will not remove it, thus we can reject.

If the graph has a 
 walk and is a positive instance, then we claim that we need to switch one of the four vertices incident with the red edges. Indeed, if we switch only at the vertices inside the blue walk (those not incident with one of the red edges) then the parity of the number of blue edges will not change and we will still have some maximal odd blue subwalk, the two edges next to the extremities being red. Thus we would still have a 
 path.

Thus, since we need to switch at one of these four vertices, we branch on this configuration using the classic bounded search tree technique. This is an FPT algorithm. 

SW-H-Colouring: W[1]-Hard Cases
The remaining cases, 
, 
 and 
, yield W[1]-hard SW-H-Colouring problems, even for input graphs of large girth (the girth of a graph is the smallest length of one of its cycles, and by the girth of an edge-coloured graph we mean the girth of its underlying uncoloured graph):

Theorem 25
Let . Then for any integer , the problem SW-
-Colouring is -hard, even for graphs 
 with girth at least g and that would map to 
 if the number of switchings was unbounded. Under the same conditions, SW-
-Colouring cannot be solved in time 
 for any computable function f, assuming the ETH.

We will prove Theorem 25 by three reductions from Multicoloured Independent Set, which is W[1]-complete [36] and defined as follows.

figure r
Our three reductions (one for each possible choice of x) follow the same pattern. In Sect. 4.3.1, we describe this idea, together with the required properties of the gadgets. In Sects. 4.3.2, 4.3.3 and 4.3.4, we show how to construct the gadgets. Since the reduction preserves the parameter and is actually polynomial, the ETH-based lower bound follows from [13].

Generic Reduction
Let (G, k) be an instance of Multicoloured Independent Set, and denote by 
 the partition of G. We begin by replacing each 
 by a partition gadget 
. This gadget must have 
 special vertices 
, in order to associate a vertex of 
 to each vertex of 
. Moreover, 
 must satisfy the following:

(P1):
We do not have 
.

(P2):
If we switch 
 at exactly one vertex v, then the obtained graph maps to 
 (without switching) if and only if v is one of the special vertices of 
.

(P3):
 has girth at least g.

(P4):
 has two reset vertices x and y that are different from the 
’s and such that 
 switched at x and y maps to 
 (without further switching).

Let uv be an edge of G. Recall that u and v can be seen as vertices of 
. We then add an edge gadget 
 between u and v. This gadget must satisfy the following:

(E1):
Let H be the graph obtained from 
 by switching at a subset S of . Then, 
 if .

(E2):
Assume that 
 and 
 and let H be the graph obtained from 
 by switching u and v. Then, we do not have 
.

(E3):
 has girth at least g.

(E4):
In 
, u and v are at distance at least g.

Let 
 be the graph obtained from G by replacing each 
 by a partition gadget 
, and each edge uv by an edge gadget 
 such that for every 
 and v such that uv is an edge, we identify the special vertex u in 
 with the special vertex u in 
. (Note in particular that every vertex of G is present in 
.)

We say that a set S of vertices of G is valid if, when seen in 
, it contains at most one special vertex in each edge gadget. We need a last condition about 
:

(SP):
If, after switching a valid set in 
, the obtained graph does not map to 
, then this is because a partition gadget or an edge gadget does not map to 
 (that is, each minimal obstruction is entirely contained in an edge gadget or a partition gadget).

With this Property (SP), we can prove that 
 is a valid reduction.

Proposition 26
 is a positive instance of SW-
-Colouring if and only if (G, k) is a positive instance of Multicoloured Independent Set.

Proof
Assume we can switch at most k vertices of 
 such that the obtained graph maps to 
. Let S be the set of those vertices. We claim that S is a valid set of 
. First note that, due to (P1), S must contain at least one vertex in each 
. This enforces , thus S contains exactly one vertex 
 in each 
. By (P2), each of these 
 has to be one of the special vertices of 
. This means that S contains only vertices that are present in G.

We claim that S induces an independent set in G. Assume by contradiction that there is an edge uv in G with . Then, by construction, there is an edge gadget whose special vertices are u and v, such that the edge gadget and the two partition gadgets associated with u and v map to 
 when we switch only at u and v, contradicting (E2). (Note that S does not contain any other vertex of the edge gadget nor any other vertex of the partition gadgets.) Therefore, G has an independent set of size k containing exactly one vertex in each set 
.

Conversely, assume that G has an independent set S intersecting each 
 at one vertex. Then, we denote by H the graph obtained by switching all vertices of S in 
. By construction, this is a valid set, hence by (SP) every obstruction for mapping to 
 in H is actually contained in some gadget. However, it cannot be contained in a partition gadget due to (P2), nor in an edge gadget due to (E1). Therefore, we have 
. 

Observe moreover that, due to (P3), (E3) and (E4), 
 has girth at least g. Moreover, let S be the set of all reset vertices of 
. Let H be the 2-coloured graph obtained by switching every vertex of S. By (P4), no partition gadget in H contains an obstruction. Furthermore, no edge gadget contains an obstruction by (E1). Therefore, using (SP), we obtain that H does not contain any obstruction, hence 
. Thus to prove Theorem 25 it suffices to construct the gadgets.

Gadgets for 
We now describe the gadgets for SW-
-Colouring. As mentioned in Lemma , for every 2-edge-coloured graph G, we have 
 if and only if it does not contain an all-blue odd cycle.

The partition gadget 
 is an all-blue cycle of length 2g if g and 
 have the same parity (resp.  is they do not have the same parity) with a chord of order 
 between two antipodal vertices. The special vertices are those on the chord (see Fig. 7a). The reset vertices are defined as any two vertices on the initial cycle, one on each side of the chord.

Property (P3) directly follows from the construction. Moreover, since 
 contains an all-blue odd cycle, we have (P1). If we switch 
 at exactly one vertex, then either this vertex is a special vertex and the obtained graph does not have any all-blue odd cycle (and thus maps to 
), or it is not a special vertex and there is still an all-blue odd cycle. Therefore, property (P2) also holds.

Finally, if we switch at the two reset vertices, then there is no more all-blue odd cycle, thus (P4) also holds.

We now consider the edge gadget. It is formed by an all-blue odd cycle of length  where two vertices u, v at distance g have been switched (see Fig. 7b). These vertices are the special vertices of the gadget. By construction, properties (E3) and (E4) hold. Moreover, consider a set . The only way for switching the vertices of S to yield a graph containing an all-blue odd cycle is to switch both u and v. This proves (E1). If we switch at both special vertices then we do not have 
, which implies (E2).

It remains to prove Property (SP). Let S be a valid set, and let H be the graph obtained from 
 when switching all vertices of S. Assume that H contains an all-blue odd cycle. Since S is valid set, at most one vertex has been switched in each edge gadget. Therefore, no all-blue odd cycle of H can contain an edge from an edge gadget. It is thus contained in some partition gadget, ensuring that (SP) holds.

Fig. 7
figure 7
Partition and edge gadgets in the 
-reduction when 

Full size image

Fig. 8
figure 8
The edge gadget for uv in the 
-reduction when 

Full size image

Gadgets for 
We now describe the gadgets for SW-
-Colouring. As mentioned in lemma , for every 2-edge-coloured graph G, we have 
 if and only if it does not contain a bad walk, i.e. an odd figure eight 
, 
, ..., 
, 
, 
, ..., 
, 
 such that all edges 
 are blue [1].

The partition gadget 
 is the same as in the previous case (see Fig. 7a).

The edge gadget is an odd path of length at least g, whose edges are all blue except for the two first and two last ones (see Fig. 8).

Since the partition gadget 
 is the same as for 
, Property (P3) still holds. Moreover, since all-blue odd-cycles still are obstructions, we have (P1).

Observe that if a graph H contains an obstruction, then so does its subgraph obtained by removing recursively its leaves. Note that switching exactly one vertex v in 
 makes its neighborhood all-red. Therefore, v cannot be contained in a bad walk anymore. In this case, the obstruction is contained in a possibly empty cycle 
 (obtained by removing from 
 the vertex v and the leaves of 
 recursively).

If we switch 
 at exactly one vertex, then either this vertex is a special vertex and 
 is empty or an all-blue even cycle (and thus maps to 
), or it is not a special vertex and 
 is still an all-blue odd cycle. Therefore, property (P2) also holds.

Finally, if we switch at the two reset vertices u, v, then 
 is a tree, thus 
 does not contain any obstruction, hence (P4) also holds.

By construction, properties (E3) and (E4) hold. Moreover, observe that the edge gadget does not contain a bad walk since it is a path. Thus (E1) holds. If H is the graph defined in property (E2) then there is a bad walk starting from u, then turning around one odd cycle in the partition gadget containing u, crossing the edge gadget to v, taking a similar turn around an odd cycle of the partition gadget containing v and then going back to u by the edge gadget. So (E2) holds.

It remains to prove (SP). Let S be a valid set, and H be the graph obtained from 
 by switching S. Observe that no bad walk contains to consecutive red edges. Moreover, in H, every edge gadget contains two such edges (since its two endpoints cannot be both in S). Therefore, no bad walk crosses an edge gadget 
, which implies that no bad walk contains edges in 
. Hence, every bad walk is contained in some partition gadget, thus ensuring that (SP) holds.

Fig. 9
figure 9
Partition and edge gadgets in the 
-reduction when 

Full size image

Gadgets for 
We now describe the gadgets for SW-
-Colouring. As mentioned in Lemma , for every 2-edge-coloured graph G, we have 
 if and only if it does not contain alternating odd figure eight, that is, an alternating closed walk 
, 
, ..., 
, 
, 
, ..., 
, 
 for some integers j and p [1].

The partition gadget 
 is defined by gluing two obstructions with large girth along a path of length 
 (see Fig. 9a). More precisely, consider an alternating odd cycle C of size 
 (or 
). Note that C contains a vertex u adjacent to two red edges. We attach an alternating odd cycle 
 of length g (or ) to u, such that the edges of 
 adjacent to u are blue. To obtain 
, we take two copies of this obstruction, and glue their respective largest cycle along a path of length 
. The vertices of this path are the special vertices of 
, and the two copies of u are the reset vertices of 
.

The edge gadget is formed by identifying the vertices with monochromatic neighbourhood of two alternating odd cycles of length , in such a way that the common vertex has two blue edges in one cycle and two red edges in the other one. To obtain the edge gadget, we switch this graph at two vertices u, v in the same cycle, at distance g from each other (see Fig. 9b).

Observe that 
 has girth at least g, hence Property (P3) holds. Moreover, by construction, 
 contains an obstruction, hence (P1) holds. Note that there are exactly two (minimal) obstructions in 
, the ones used to construct it. Therefore, if we switch 
 at a non-distinguished vertex, one of the these obstructions is unchanged, and the obtained graph does not map to 
. Conversely, assume that we switch 
 at a distinguished vertex u and there remains an obstruction. Note that all the paths of length two starting from u are now monochromatic, hence no alternating odd figure eight can go through u. This implies that every alternating odd figure eight in this graph does not use the internal vertices of the chord. When removing these vertices from G, the former endpoints of the chord have monochromatic neighborhood, hence they cannot be contained in an alternating odd figure eight. Removing the whole chord and (recursively) the leaves of 
 gives two disjoint alternating odd cycles, which do not contain any alternating odd figure eight. Thus we have (P2).

Finally, if we switch the two reset vertices of 
, all the paths of length 2 starting at these vertices are monochromatic, hence no alternating odd figure eight goes through them. Removing the reset vertices, and recursively the obtained leaves gives the empty graph. Therefore, there is no alternating odd figure eight in 
, it thus maps to 
, and (P4) holds.

The construction of the edge gadget ensures that (E3) and (E4) are satisfied. Moreover, if we switch at u and v, we obtain an obstruction, ensuring that (E2) holds. Finally, let H be the graph obtained from 
 by possibly switching v. Then every path of length two starting at u is monochromatic, hence no alternating odd figure eight in H contains u. Removing u and leaves of H yields an alternating odd cycle, which does not contain any alternating odd figure eight. Therefore, H maps to 
, and by exchanging u with v, we obtain (E1).

It remains to prove (SP). Let S be a valid set and H be the graph obtained from 
 by switching at every vertex of S. Consider an alternating odd figure eight containing an edge from an edge gadget and an edge from a partition gadget. This walk goes through a vertex 
 such that the edge before u in the walk lies in 
 and the other one lies in some 
. If , the paths of length 2 starting from u in 
 are monochromatic. Conversely, if , the paths of length 2 starting at u in 
 are monochromatic. In both cases we reach a contradiction with the existence of an alternating odd figure eight going through v. Therefore, every alternating odd figure eight of H is contained either in an edge gadget or in a partition gadget.

Conclusion and Perspectives
We have introduced VD-H -Colouring, ED-H-Colouring and SW-H-Colouring and characterised their complexity for some small edge-coloured graphs H. The full complexity landscape still needs to be determined. We have fully classified the classic complexity of VD-H -Colouring problems. It remains to do the same for ED-H-Colouring and SW-H-Colouring.

We proved that both VD-H -Colouring and ED-H-Colouring are FPT when H has order at most 2. However, if H has order 3, for example if H is a monochromatic triangle, we obtain 3-Colouring, which is not even in XP. SW-H-Colouring seems particularly interesting, since we obtained an FPT/W[1]-hard dichotomy when H has order at most 2 (in which case the problem is always in XP). But again for some H of order 3, SW-H-Colouring is not in XP. It would be very interesting to obtain FPT/W[1]/XP trichotomies for VD-H -Colouring, ED-H-Colouring and SW-H-Colouring, as least for some interesting classes of targets H such as, for example, trees or cycles.

One may also study restricted classes of inputs, such as planar graphs (studied in the context of switching homomorphisms in [18]). For example, do the W[1]-hard cases of SW-H-Colouring become FPT (or even polynomial) when the input is planar?

Another variation that seems of interest, recently studied in [2] for signed graphs and 2-edge-coloured graphs, is the one when lists are involved (the input is given with a list function that assigns to each vertex, an allowed set of vertices from the target graph H). What are the complexities of list versions of VD-H -Colouring, ED-H-Colouring and SW-H-Colouring for 2-edge-coloured graphs H?

One could also study VD or ED versions of Signed H-Colouring. For example, in [26], the authors proved that ED Balanced Subgraph, the problem of deciding whether a given signed graph becomes balanced after k edge-deletions, is FPT for parameter k. (Note that the minimum number of edge/vertex-deletions required to make a signed graph balanced is studied under the name of frustration index/number of that signed graph [41].) This problem is equivalent to the ED-version of Signed 
-Colouring.

Finally, we note that it could be interesting to study analogues of VD-H -Colouring and ED-H-Colouring for arbitrary fixed-template CSP problems, not just when H is an edge-colored graph. To the best of our knowledge, this has not been done.