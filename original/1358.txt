The 1–2–3 Conjecture, raised by Karoński, Łuczak and Thomason, states that almost every graph G admits a proper 3-labelling, i.e., a labelling of the edges with 1, 2, 3 such that no two adjacent vertices are incident to the same sum of labels. Another interpretation of this conjecture, that may be attributed to Chartrand et al., is that almost every graph G can be turned into a locally irregular multigraph M, i.e., with no two adjacent vertices having the same degree, by replacing each of its edges by at most three parallel edges. In other words, for almost every graph G there should be a locally irregular multigraph M with the same adjacencies and having a relatively small number of edges. The 1–2–3 Conjecture, if true, would indeed imply that there is such an M with |𝐸(𝑀)|≤3|𝐸(𝐺)|. In this work, we study proper labellings of graphs with the extra requirement that the sum of assigned labels must be as small as possible. In other words, given a graph G, we are looking for a locally irregular multigraph 𝑀∗ with the smallest number of edges possible that can be obtained from G by multiplying edges. This problem is actually quite different from the 1–2–3 Conjecture, as we prove that there is no absolute constant k such that 𝑀∗ can always be obtained from G by replacing each edge with at most k parallel edges. We investigate several aspects of this problem, covering algorithmic and combinatorial aspects. In particular, we prove that the problem of designing proper labellings with minimum label sum is -hard in general, but solvable in polynomial time for graphs with bounded treewidth. We also conjecture that for almost every connected graph G there should be a proper labelling with label sum at most 2|E(G)|, which we verify for several classes of graphs.

Introduction
In this work we study properties of some distinguishing labellings of graphs. We begin by giving some useful definitions and notations. Let 𝐺=(𝑉,𝐸) be a graph. Throughout this work, most of the time we denote by V and E the vertex set and edge set of a given graph. In a few cases where ambiguities are possible, we instead denote these sets by V(G) and E(G). For a vertex 𝑣∈𝑉 of G, we denote by d(v) the degree of v, that is the number of edges that are incident to v. We say that G is regular if for each 𝑢,𝑣∈𝑉, we have 𝑑(𝑢)=𝑑(𝑣). It is well known that there exists no non-trivial simple graph that is totally irregular, meaning a simple graph for which all vertices have different degrees. This however is not true for multigraphs, where multiple edges between two adjacent vertices are allowed. A graph G is called locally irregular if for each 𝑢𝑣∈𝐸, we have 𝑑(𝑢)≠𝑑(𝑣). For any additional notation on graph theory not defined here, we refer the reader to [11].

A function ℓ:𝐸↦{1,…,𝑘} is called a k-labelling of G. By a distinguishing labelling we mean a labelling ℓ that allows us to distinguish the vertices of G accord to some vertex parameter computed from ℓ. Note that this can equivalently be seen through the scope of graph colouring. In this work, we are more particularly interested in proper labellings, which are defined as follows. For any 𝑣∈𝑉, let us denote by 𝑐ℓ(𝑣) the colour of v that is induced by ℓ, being the sum of labels assigned to the edges incident to v. That is,


𝑐ℓ(𝑣)=∑𝑢∈𝑁(𝑣)ℓ(𝑣𝑢),

where 𝑁(𝑣)={𝑢∈𝑉:𝑢𝑣∈𝐸} is the neighbourhood of v. We say that ℓ is proper if the resulting 𝑐ℓ is a proper vertex-colouring of G, i.e., for every edge 𝑢𝑣∈𝐸 we have 𝑐ℓ(𝑢)≠𝑐ℓ(𝑣). Note that a graph admits a proper labelling if and only if it has no 𝐾2 as a component [14]. Therefore, we here focus only on nice graphs, i.e., graphs without any component isomorphic to 𝐾2. It is clear that for every (not necessarily proper) labelling ℓ of G and for every 𝑣∈𝑉, we have 𝑐ℓ(𝑣)≥𝑑(𝑣) with 𝑐ℓ(𝑣)=𝑑(𝑣) if and only if all edges incident to v are assigned label 1. It follows that G admits a proper 1-labelling if and only if G is locally irregular.

The connection between the labellings of a graph G and its “regularity” has been explored by several authors, in particular through the notion of irregularity strength of graphs, introduced by Chartrand et al. [10]. The irregularity strength s(G) of G is defined as the smallest k such that G admits a k-labelling ℓ with the property that for every two 𝑢,𝑣∈𝑉 (not necessarily adjacent), we have 𝑐ℓ(𝑢)≠𝑐ℓ(𝑣). The main point for studying such labellings ℓ, is that if, from G, we replace each edge e by ℓ(𝑒) parallel edges, then we get a multigraph M that is totally irregular. Note that building M in this way preserves the adjacencies of G, that is M has the same structure as G. As stated earlier, no non-trivial simple graph G is totally irregular; it is thus legitimate to wonder how to build a corresponding totally irregular multigraph M in the fashion above. In their work, Chartrand et al. regard edge multiplications as an expensive operation and, as such, they want to limit it as much as possible. This results in the following optimisation problem: for a given graph G, what is the smallest k such that G can be turned into a totally irregular multigraph M by replacing each edge with at most k parallel edges? From the labelling point of view, this smallest k is precisely s(G).

Since the notion of total irregularity does not fit with simple graphs, as 𝐾1 is the only totally irregular simple graph, it is legitimate to consider that this notion is too strong for simple graphs, and instead consider weaker notions of irregularity. A few such notions have been explored in the literature, such as the notions of highly irregular graphs [9] or locally irregular graphs [2], which we introduced earlier. With respect to Chartrand et al.’s point of view, we note that there is again a straight connection between proper labellings and locally irregular graphs. Namely, given a proper labelling ℓ of a graph G, by replacing each edge e with ℓ(𝑒) parallel edges, we get a locally irregular multigraph M with the same structure as G. As in the previous problem, one can again ask about the smallest k such that G admits proper k-labellings. This smallest k (if any) is denoted 𝜒Σ(𝐺).

This parameter 𝜒Σ is precisely at the heart of one of the most famous conjectures concerning proper labellings of graphs, the so-called 1–2–3 Conjecture, introduced by Karoński, Łuczak and Thomason in 2004 [14]. This conjecture states that for every nice graph G, we have 𝜒Σ(𝐺)≤3. It is worth noting that there exist nice graphs G that verify 𝜒Σ(𝐺)=3 (for example every nice complete graph 𝐾𝑛 has 𝜒Σ(𝐾𝑛)=3 as shown in [8]) and thus it is meaningless to try to show that 𝜒Σ(𝐺)≤2 holds for all graphs G. There are many results supporting the 1–2–3 Conjecture, the most famous of which belonging to Kalkowski, Karoński and Pfender [13], stating that for any nice graph G, we have 𝜒Σ(𝐺)≤5. Another important result shown in [14] states that the 1–2–3 Conjecture holds for nice 3-colourable graphs. However, unless a graph G is locally irregular (in which case 𝜒Σ(𝐺)=1), it is not easy in general to characterise which graphs G have 𝜒Σ(𝐺)=2 (see [12]). Nevertheless, a “good” characterisation of nice bipartite graphs G with 𝜒Σ(𝐺)=3, was provided quite recently in [20].

Minimising, however, the maximum label that is used to create a proper labelling of a graph G, does not always guarantee that we have actually minimised the cost that corresponds to the edge multiplications described above. For example, a 2-labelling ℓ that assigns label 2 to three edges of G and label 1 to the rest is more expensive (in terms of how many edges the corresponding multigraphs have) than a 3-labelling ℓ′ that assigns label 3 to only one edge of G and label 1 to the rest. The 1–2–3 Conjecture, if true, would imply that every nice graph G admits a proper labelling where the sum of assigned labels is at most 3|E|; but it might be that, using labels with value larger than 3, we can design better (with respect to the concerns above) proper labellings of G. This motivates us to introduce and study a new problem, namely the problem of finding proper labellings that minimise the sum of the assigned labels.

Formally, for a labelling ℓ of a graph G, we denote by 𝜎(ℓ) the sum of labels assigned to the edges of G by ℓ. That is,

For any 𝑘≥1, we denote by mE𝑘(𝐺) the minimum value of 𝜎(ℓ) over all k-labellings ℓ of G (if any). That is,


mE𝑘(𝐺)=min{𝜎(ℓ):ℓ is a 𝑘- labelling of 𝐺}.

We set mE(𝐺)=min{mE𝑘(𝐺):𝑘≥𝜒Σ(𝐺)}.

The study of the parameter mE(𝐺) takes place in a recent series of works dedicated to better understanding the connection between proper labellings and proper vertex-colourings of graphs. In [1], the authors studied proper vertex-colourings of graphs that minimise the number of distinct resulting colours. In other words, the authors are interested by proper labellings by which the number of distinct resulting vertex colours is as close as possible to the chromatic number. Noticing that this minimum number of distinct colours by a proper labelling is bounded above by the minimum maximum vertex colour that can be achieved by a proper labelling, in [5] the authors studied proper labellings where the maximum resulting vertex colour is as small as possible. In these two works, the authors mainly showed that finding an “optimal” proper labelling is hard in general but easy in particular graph classes, and provided results towards conjectures they have raised on their modified notions of proper labellings.

An important point for mentioning the existence of [1] and [5] is that determining mE(𝐺) for a given graph G is also related to finding a proper labelling of G where the resulting vertex colours satisfy some properties. More precisely, by a straight equivalence between edge labels and vertex colours, see upcoming Observation 2.2, it can be established that determining mE(𝐺) is equivalent to finding a proper labelling of G that minimises the sum of resulting vertex colours. Thus, at least at first glance, one could think that determining mE(𝐺) is somewhat related to the investigations in [1] and [5]. In Sect. 4.1, we actually show that this is not the case, in the sense that proper labellings that are good for our concerns might be arbitrarily bad for those in [1] and [5], and vice versa.

Our contributions
In Sect. 2 we provide some observations that will be used throughout this work.Footnote 1As a warm up, we also provide the exact value of mE(𝐺) for easy classes of graphs G, namely complete bipartite graphs, complete graphs and cycles.

In Sect. 3 we deal with the algorithmic aspects of the problem. We show that for 𝑘∈ℕ, determining mE𝑘(𝐺) is -complete when G is a planar bipartite graph. Then we provide an algorithm that, given two integers s and k, decides in polynomial time if mE𝑘(𝐺)≤𝑠 when G belongs to the family of graphs that have bounded treewidth.

In Sect. 4 we answer two different questions that deal with the particular nature of our problem. First, in Sect. 4.1, we show that in general a proper k-labelling that minimises the maximum induced colour does not minimise the sum of the labels used, and vice versa. Then, in Sect. 4.2, we provide an infinite family of graphs G for which mE𝑘(𝐺), for every 𝑘≥2, can be arbitrarily larger than mE𝑘+1(𝐺). As mentioned earlier, this property justifies the study of our problem, as it shows that just finding a proper k-labelling of G for 𝑘=𝜒Σ(𝐺) is not enough.

Finally, in Sect. 5 we study more general aspects of the problem. In particular we propose Conjecture 5.2 stating that for every nice connected graph G, we should have mE(𝐺)≤2|𝐸|. We then proceed by providing upper bounds for some families of graphs, namely bipartite graphs and trees, as well as graphs with large chromatic number, that further strengthen our belief that Conjecture 5.2 should hold true.

First Observations and Classes of Graphs
In this warm-up section, we give some first insight into the problem of determining the parameters mE(𝐺) and mE𝑘(𝐺) for a given graph G. This is done through first observations on the problem, and by then focusing on easy classes of graphs.

First Observations and Remarks
The following observation provides trivial bounds on 𝜎(ℓ) for a k-labelling ℓ.

Observation 2.1
Let G be a graph and ℓ be a k-labelling of G. Then

Consequently, for any 𝑘≥𝜒Σ(𝐺), we have

The following provides an obvious way for relating edge labels and vertex colours by a labelling of a graph G, that, in general, is a convenient tool for establishing lower bounds on mE(𝐺).

Observation 2.2
Let G be a graph and ℓ be a labelling of G. Then


∑𝑒∈𝐸2ℓ(𝑒)=∑𝑣∈𝑉𝑐ℓ(𝑣).

In particular, by any labelling ℓ, the sum ∑𝑣∈𝑉𝑐ℓ(𝑣) must be an even number.

In several contexts, we will make use of the following property of proper labellings in graphs having some particular sparse structure (adjacent degree-2 vertices):

Observation 2.3
Let G be a graph with a path (𝑣1,𝑣2,𝑣3,𝑣4) such that 𝑑(𝑣2)=𝑑(𝑣3)=2. Then, by any proper labelling ℓ of G, we have ℓ(𝑣1𝑣2)≠ℓ(𝑣3𝑣4).

Proof
This is because 𝑐ℓ(𝑣2)=ℓ(𝑣1𝑣2)+ℓ(𝑣2𝑣3) and 𝑐ℓ(𝑣3)=ℓ(𝑣2𝑣3)+ℓ(𝑣3𝑣4). This implies we must have ℓ(𝑣1𝑣2)≠ℓ(𝑣3𝑣4) so that 𝑐ℓ(𝑣2)≠𝑐ℓ(𝑣3). ◻

Easy Classes of Graphs
In this section, we determine the value of mE(𝐺) when G is any nice complete bipartite graph, complete graph, or cycle. Let us recall that, for any nice complete bipartite graph 𝐾𝑛,𝑚, we have 𝜒Σ(𝐾𝑛,𝑚)=1 if 𝑛≠𝑚>1, and 𝜒Σ(𝐾𝑛,𝑚)=2 otherwise. For every nice complete graph 𝐾𝑛, we have 𝜒Σ(𝐾𝑛)=3. For every nice cycle 𝐶𝑛, we have 𝜒Σ(𝐶𝑛)=3 whenever 𝑛≥3 is odd or 𝑛≡2mod4, while we have 𝜒Σ(𝐶𝑛)=2 otherwise, i.e., when 𝑛≡0mod4. Simple proofs for these statements can be found e.g. in [8].

Note that in all the results obtained in this section, constructing a proper labelling ℓ of a graph G achieving 𝜎(ℓ)=mE(𝐺) does not require the use of a label larger than 𝜒Σ(𝐺). That is, we here always have mE𝑘(𝐺)=mE(𝐺) for 𝑘=𝜒Σ(𝐺). It is important to point out however that this behaviour is not true in general (see Sect. 4.2).

Theorem 2.4
Let 𝐺=(𝐴,𝐵,𝐸)=𝐾𝑛,𝑚 be a complete bipartite graph with 𝑛+𝑚>2. Then:

If 𝑛≠𝑚, then mE(𝐺)=mE1(𝐺)=𝑛𝑚=|𝐸|;

Otherwise, i.e., 𝑛=𝑚, we have mE(𝐺)=mE2(𝐺)=𝑛(𝑚+1)=|𝐸|+|𝐸|‾‾‾√.

Proof
If 𝑛≠𝑚, then G is locally irregular, in which case we get a proper 1-labelling when assigning label 1 to all edges. This is best possible due to Observation 2.1. If 𝑛=𝑚, then G is not locally irregular, which implies that a proper labelling of G must assign a label different from 1 to some edges. Moreover, if a labelling assigns a label different than 1 to less than n edges, then there would necessarily be, in both A and B, vertices incident only to edges labelled 1, thus with colour n. In that case, ℓ would not be proper as some adjacent vertices would have the same colour.

This means that if 𝑛=𝑚, a proper labelling ℓ of G must assign a label different from 1 to at least n edges. This implies that mE𝑘(𝐺)≥|𝐸|+𝑛. We claim there is a proper 2-labelling ℓ achieving this lower bound, hence best possible. To obtain ℓ, let a be any vertex of A. Assign label 2 to all the n edges incident to a, and assign label 1 to all other edges. This labelling is proper. Indeed 𝑐ℓ(𝑎)=2𝑛, 𝑐ℓ(𝑎′)=𝑛 for every 𝑎′∈𝐴∖{𝑎}, and 𝑐ℓ(𝑏)=𝑛+1 for every 𝑏∈𝐵. Furthermore, 𝜎(ℓ)=|𝐸|+𝑛=|𝐸|+|𝐸|‾‾‾√. ◻

Theorem 2.5
Let 𝐾𝑛 be a complete graph with 𝑛≥3. Then:

If 𝑛=3, then mE(𝐾3)=mE3(𝐾3)=6=2|𝐸|;

If 𝑛≡0mod4 or 𝑛≡1mod4, then mE(𝐾𝑛)=mE3(𝐾𝑛)=12(𝑛2+(𝑛−2)(𝑛−1)2−1)=32|𝐸|;

If 𝑛≡2mod4 or 𝑛≡3mod4, then mE(𝐾𝑛)=mE3(𝐾𝑛)=12(𝑛2+(𝑛−2)(𝑛−1)2)=⌈32|𝐸|⌉.

Proof
Throughout this proof, for any 𝑛≥3, let 𝑉={𝑣1,…,𝑣𝑛}.

Regarding the first item, Observation 2.3 implies that a proper 3-labelling of 𝐾3 must assign three distinct labels to the edges, and thus having {ℓ(𝑣1𝑣2),ℓ(𝑣1𝑣3),ℓ(𝑣2𝑣3)}={1,2,3} is optimal, in which case 𝜎(ℓ)=6.

Let us now focus on the second and third items. Following Observation 2.2, finding a proper 3-labelling of 𝐾𝑛 achieving mE3(𝐾𝑛) is equivalent to finding a proper 3-labelling minimising the sum of vertex colours. Since, in 𝐾𝑛, all vertices have degree 𝑛−1, and all vertex colours must be different by a proper 3-labelling, any proper 3-labelling producing distinct vertex colours in 𝑆1={𝑛−1,𝑛,𝑛+1,…,2𝑛−2} would be optimal. Note, however, that when n is congruent to 2 or 3 modulo 4, such a proper 3-labelling cannot exist as, in such cases, the sum 𝑛−1+𝑛+(𝑛+1)+⋯+(2𝑛−2) of the values in 𝑆1 is odd, which cannot be achieved by a labelling (recall the last statement of Observation 2.2). In these cases, however, any proper labelling producing distinct vertex colours in 𝑆2={𝑛−1,𝑛,𝑛+1,…,2𝑛−3,2𝑛−1} would be optimal.

Now consider the following 3-labelling ℓ of 𝐾𝑛 (𝑛≥4), already introduced in [5], to establish what the value of mS3(𝐾𝑛) is (where mS3(𝐺) denotes the smallest maximum color over the vertices by a proper 3-labelling of G). We label the edges of 𝐾𝑛 through three steps. Firstly, we assign label 1 to every edge. Secondly, we change the labels of the edges in {𝑣𝑖𝑣𝑗 : 1≤𝑖,𝑗≤𝑛,𝑖+𝑗≥𝑛+2} to 2. Then 𝑣1 is incident to no edge labelled 2, vertex 𝑣2 is incident to one edge labelled 2, vertex 𝑣𝑖 for 3≤𝑖≤⌊(𝑛−1)/2⌋+1 is incident to 𝑖−1 edges labelled 2, and 𝑣𝑖 for ⌊(𝑛−1)/2⌋+2≤𝑖≤𝑛 is incident to 𝑖−2 edges labelled 2. Let 𝑗=⌊(𝑛−1)/2⌋+1. Note that for every 𝑖∈{2,3,…,𝑗,𝑗+2,…,𝑛}, 𝑣𝑖 is adjacent to one more edge labelled 2 than 𝑣𝑖−1; and that 𝑣𝑗 and 𝑣𝑗+1 are both adjacent to 𝑗−1 edges labelled 2 (and 𝑛−𝑗 edges labelled 1). So 𝑐𝑙(𝑣1)<𝑐𝑙(𝑣2)<⋯<𝑐𝑙(𝑣𝑗)=𝑐𝑙(𝑣𝑗+1)<𝑐𝑙(𝑣𝑗+2)<⋯<𝑐𝑙(𝑣𝑛) and 𝑐𝑙(𝑣𝑖+1)≤𝑐𝑙(𝑣𝑖)+1 for 1≤𝑖≤𝑛, i.e., all vertices have different colours except 𝑣𝑗 and 𝑣𝑗+1. Finally, to avoid the conflict between 𝑣𝑗 and 𝑣𝑗+1, let us increase the label of 𝑣𝑗+1𝑣𝑗+2 from 2 to 3. This change induces a new conflict between 𝑣𝑗+2 and 𝑣𝑗+3. Then we need to increase the label of 𝑣𝑗+3𝑣𝑗+4 from 2 to 3 to get rid of this conflict, which creates a new conflict, and so on. Formally, we change the labels of the edges in {𝑣𝑗+1𝑣𝑗+2,𝑣𝑗+3𝑣𝑗+4,…,𝑣𝑛−1𝑣𝑛} to 3 if 𝑛−𝑗 is even, i.e., if 𝑛≡0mod4 or 𝑛≡1mod4. Otherwise, if 𝑛−𝑗 is odd and 𝑛≡2mod4 or 𝑛≡3mod4, then we change the labels of the edges in {𝑣𝑗+1𝑣𝑗+2,𝑣𝑗+3𝑣𝑗+4,…,𝑣𝑛−4𝑣𝑛−3,𝑣𝑛−2𝑣𝑛,𝑣𝑛−1𝑣𝑛} to 3.

It can be checked that the resulting 3-labelling ℓ is proper, and achieves vertex colours in 𝑆1 when n is congruent to 0 or 1 modulo 4, or vertex colours in 𝑆2 when n is congruent to 2 or 3 modulo 4. As discussed above, this is best possible. Furthermore, it can easily be checked that the elements in 𝑆1 sum up to the value claimed in the second item, and similarly for the elements in 𝑆2 and the value claimed in the third item. This concludes the proof. ◻

Theorem 2.6
Let 𝑛≥3, and 𝐶𝑛 be the cycle of length n. Then:

If 𝑛≡0mod4, then mE(𝐶𝑛)=mE2(𝐶𝑛)=32|𝐸|;

If 𝑛≡1mod4 or 𝑛≡3mod4, then mE(𝐶𝑛)=mE3(𝐶𝑛)=⌈32|𝐸|⌉+1;

If 𝑛≡2mod4, then mE(𝐶𝑛)=mE3(𝐶𝑛)=32|𝐸|+3.

Proof
Let us order the edges of 𝐶𝑛 following a “clockwise direction” and define 𝐸={𝑒1,…,𝑒𝑛} and 𝑉={𝑣1,…,𝑣𝑛} such that for 𝑖<𝑛, 𝑒𝑖=𝑣𝑖𝑣𝑖+1 and 𝑒𝑛=𝑣𝑛𝑣1. Thus, for 𝑖>0, 𝑁(𝑣𝑖)={𝑣𝑖−1,𝑣𝑖+1} and 𝑁(𝑣1)={𝑣2,𝑣𝑛}. Recall that 𝜒Σ(𝐶𝑛)=2 for the first item and that 𝜒Σ(𝐶𝑛)=3 for the second and third items.

Claim 2.7
Let 𝑙≤𝑘 and ℓ be a k-labelling of 𝐶𝑛 that assigns label l to at least one edge. If ℓ is proper, then it assigns label l to at most  edges if n is odd, while it assigns label l to at most 12|𝐸|−1 edges if 𝑛≡2mod4, and it assigns label l to at most 12|𝐸| edges if 𝑛≡0mod4.

Proof of the claim Let ={𝑒∈𝐸:ℓ(𝑒)=𝑙} and 𝐺=(𝑉′,𝐸′) be the graph that has 𝑉′={𝑣𝑖:𝑒𝑖∈𝐸} and, for 𝑖≠𝑗, 𝑣𝑖𝑣𝑗∈𝐸′ if the corresponding edges 𝑒𝑖,𝑒𝑗 are at distance exactly 2 in 𝐶𝑛. Obviously |𝐸|=|𝑉′|. It follows from Observation 2.3 that if ℓ is a proper labelling of 𝐶𝑛 that maximises ||, then ||=|𝑆|, where S is an independent set of G. For n odd, G is a copy of the graph 𝐶𝑛. Since G is a cycle, . For 𝑛≡2mod4, let m be such that 𝑛=4𝑚+2. It is clear that G contains two connected components, each one being a copy of the 𝐶𝑛2 cycle. Thus, . Similarly, if 𝑛=4𝑚, it is clear that G contains two connected components, each one being a copy of the 𝐶𝑛2 cycle. Thus, ||=|𝑆|=2𝑚=12|𝐸|. ⋄

We are now ready to deal with the four values of n (modulo 4) separately:

For the first item let ℓ be the following 2-labelling: ℓ(𝑒1)=1,ℓ(𝑒2)=1,ℓ(𝑒3)=2,ℓ(𝑒4)=2,ℓ(𝑒5)=1,…,ℓ(𝑒𝑛)=2. Let us assume that this ℓ is not proper. Then there would exist at least two adjacent vertices 𝑣𝑖,𝑣𝑖+1 such that 𝑐ℓ(𝑣𝑖)=𝑐ℓ(𝑣𝑖+1). It follows that ℓ(𝑣𝑖−1)=ℓ(𝑣𝑖+2) (if 𝑖=1 then 𝑣𝑖−1=𝑣𝑛 and if 𝑖=𝑛 then 𝑣𝑖+1=𝑣1) which is a contradiction. Furthermore, since 𝑛≡0mod4, label 2 is used on exactly half the edges of 𝐶𝑛 and thus 𝜎(ℓ)=|𝐸|+12|𝐸|=32|𝐸|. Moreover, this value is optimal. Indeed, assume it is not. Then, there would exist a proper labelling ℓ′ such that more than 12|𝐸| edges are labelled 1 by ℓ′, a contradiction by Claim 2.7.

Let 𝐶𝑛 be a cycle with 𝑛≡1mod4. We will show that . Let ℓ be a proper labelling of 𝐶𝑛 that assigns label 3 to only one edge. It follows from Claim 2.7 that at most  edges of 𝐶𝑛 are labelled 1. Actually, there are exactly  edges labelled 1: if this was not the case, then, since only one edge of 𝐶𝑛 is labelled 3, there would be more than  edges labelled 2, contradicting Claim 2.7. The same holds true for the edges labelled 2. Since 𝑛≡1mod4 implies that there exists an m verifying 𝑛=4𝑚+1, then, using this, one can easily show that . Furthermore, let ℓ′ be a proper labelling of 𝐶𝑛 that assigns label 3 to more than one edge. It is clear that if ℓ′ is proper, then 𝜎(ℓ)<𝜎(ℓ′). Thus, 𝜎(ℓ)=mE(𝐶𝑛). The following is a proper labelling ℓ that achieves this optimal value: ℓ(𝑒1)=1,ℓ(𝑒2)=1,ℓ(𝑒3)=2,ℓ(𝑒4)=2,ℓ(𝑒5)=1,…,ℓ(𝑒𝑛−1)=2,ℓ(𝑒𝑛)=3.

Let 𝐶𝑛 be a cycle with 𝑛≡3mod4. Similarly to before, . The following is a proper labelling ℓ that achieves this optimal value: ℓ(𝑒1)=1,ℓ(𝑒2)=1,ℓ(𝑒3)=2,ℓ(𝑒4)=2,ℓ(𝑒5)=1,…,ℓ(𝑒𝑛−3)=2,ℓ(𝑒𝑛−2)=1,ℓ(𝑒𝑛−1)=3,ℓ(𝑒𝑛)=2.

Let 𝐶𝑛 be a cycle with 𝑛≡2mod4 (𝑛≥6). We will show that mE(𝐶𝑛)=32|𝐸|+3. Indeed, let ℓ be a proper labelling of 𝐶𝑛 that assigns label 3 to only one edge. Since ℓ is proper, it is obliged to assign label 1 to at most 12|𝐸|−1 edges of 𝐶𝑛 and label 2 to the rest. This however would lead to ℓ assigning label 2 on at least 12|𝐸| edges, which is a contradiction to Claim 2.7. Thus, ℓ must assign label 3 on at least two edges. Similarly to before, a labelling that assigns label 3 to exactly two edges, label 1 to at most 12|𝐸|−1 edges, and label 2 to the rest of the edges, would achieve the optimal value. The following ℓ is one such proper labelling: ℓ(𝑒1)=1,ℓ(𝑒2)=1,ℓ(𝑒3)=2,ℓ(𝑒4)=2,ℓ(𝑒5)=1,…,ℓ(𝑒𝑛−3)=2,ℓ(𝑒𝑛−2)=2,ℓ(𝑒𝑛−1)=3,ℓ(𝑒𝑛)=3.

◻

Complexity Aspects
In this section, we establish both a negative and a positive result on the complexity of computing the parameter mE𝑘(𝐺) for some input integer k and nice graph G. More precisely:

We first prove that determining mE2(𝐺) is -complete, even when G is restricted to a planar bipartite graph. Recall that this is contrasting with the complexity of determining whether 𝜒Σ(𝐺)≤2 holds for a given bipartite graph G, which is a problem that can be solved in polynomial time due to a result of Thomassen, Wu and Zhang [20].

We then prove that determining mE𝑘(𝐺) can be done in polynomial time whenever k is fixed and G is a graph with bounded treewidth.

A Negative Result for Bipartite Graphs
In this section, we prove, in Theorem 3.2 below, that the problem of determining mE𝑘(𝐺) is -complete in planar bipartite graphs G.

Let us first introduce the k-gadget, for 𝑘≥2, which will be useful for proving Theorem 3.2. To build this gadget, let us start with 𝑘−1 stars, each having a center 𝑠𝑖 with 𝑑(𝑠𝑖)=𝑘+1 for every 𝑖∈{1,…,𝑘−1}. For each star, pick an arbitrary edge 𝑠𝑖𝑦𝑖 and identify all the 𝑦𝑖’s into a single vertex y, which is called the representative of the gadget. Finally add another vertex u, called the root of the gadget, and join it to y via an edge. It is clear that 𝑑(𝑢)=1 and 𝑑(𝑦)=𝑘. Each k-gadget is a tree with (𝑘2) edges. Let v be a vertex of a graph G, and H be a k-gadget. The operation of adding H to G and identifying the root u of H with v is called attaching H to v.

Claim 3.1
Let G(V, C, E) be a bipartite graph and ℓ be any proper 2-labelling of G such that 𝜎(ℓ)≤|𝐸|+𝑐, for 𝑐=|𝐶|. Let H be any p-gadget attached to G, where 𝑝−1>𝑐, forming the graph 𝐺′. Let y be the representative of H. Let ℓ′ be a labelling of 𝐺′ such that for all edges 𝑒∈𝐸(𝐺), we have ℓ′(𝑒)=ℓ(𝑒). If at least one edge e of H incident to y is labelled 2 by ℓ′, then there are at least two edges of H that are labelled 2 by ℓ′.

Proof of the claim Let us suppose that at least one of the edges of H incident to y is labelled 2. Let 𝑧∈𝑉∪𝐶 be the vertex of 𝐺′ to which H has been attached.

Let us first assume that the edge zy is labelled 2. If y is incident to only a single edge labelled 2 (i.e., zy), then its colour is 𝑐ℓ(𝑦)=𝑝+1. Since all its 𝑝−1 neighbours (different from z) have degree 𝑝+1, each of them must be incident to at least one edge labelled 2 as otherwise it would have the same colour as y. This leads to at least 𝑝>𝑐 edges labelled 2, which is a contradiction (observe that since 𝜎(ℓ)≤|𝐸|+𝑐, there are at most c edges labelled 2). Otherwise, if y has exactly one other incident edge (different from yz) labelled 2, say the edge yw, then we are done.

Then, let us assume that ℓ(𝑦𝑧)=1. Moreover, let us assume that some edge incident to y, say 𝑦𝑤1 different from yz, is labelled 2. Then 𝑐ℓ(𝑦)≥𝑝+1 with 𝑐ℓ(𝑦)=𝑝+1 if 𝑦𝑤1 is the unique edge incident to y labelled 2. In this case, each one of the 𝑝−2 neighbours of y (different from z and 𝑤1) must be incident to at least one edge labelled 2, leading to at least 𝑝−1>𝑐 edges labelled 2, which is a contradiction. Thus 𝑐ℓ(𝑦)>𝑝+1, which means there is at least one more edge 𝑦𝑤2 incident to y labelled 2. ⋄

We are now ready for proving our result.

Theorem 3.2
Let G be a nice planar bipartite graph, 𝑘≥2 and 𝑞∈ℕ. The problem of deciding if mE𝑘(𝐺)≤𝑞 is -complete.

Proof
The problem is clearly in . We focus on showing it is also -hard. The proof is done by reduction from Planar Monotone 1-in-3 SAT, which was shown to be -complete in [17]. In this problem, a 3CNF formula F is given as input, which has clauses with exactly three distinct variables all of which appear only positively. We say that a bipartite graph 𝐺′=(𝑉,𝐶,𝐸) corresponds to F if it is constructed from F in the following way: for each variable 𝑥𝑖 of F add a variable vertex 𝑣𝑖 in V and for each clause 𝐶𝑗 of F add a clause vertex 𝑐𝑗 in C. Then the edge 𝑣𝑖𝑐𝑗 is added if variable 𝑥𝑖 appears in clause 𝐶𝑗. Furthermore, F is valid as input to the Planar Monotone 1-in-3 SAT problem if the graph 𝐺′ that corresponds to F is planar. The question is whether there exists a 1-in-3 truth assignment of F; that is a truth assignment to the variables of F such that each clause has exactly one variable with the value true.

Observe now that we may assume that each variable appears in at least two clauses. If there exists a variable, say 𝑥𝑖, that belongs to a single clause 𝐶=(𝑥𝑖∨𝑥𝑗∨𝑥𝑘), let us add another clause 𝐶′ identical to C. Clearly, the obtained formula 𝐹′ is 1-in-3 satisfiable if and only if F is. Moreover, the graph corresponding to 𝐹′ is planar. Indeed, consider a planar embedding of the graph 𝐺′∖{𝑣𝑖} (where 𝑣𝑖 is the vertex of 𝐺′ corresponding to 𝑥𝑖). Clearly, 𝑣𝑗 and 𝑣𝑘 are in a same face (since their common neighbour, corresponding to C, has degree 2 in 𝐺′∖{𝑣𝑖}). The graph obtained by adding a vertex 𝑣𝑖 (adjacent to the vertex corresponding to C) and a vertex corresponding to 𝐶′ (adjacent to 𝑣𝑖,𝑣𝑗 and 𝑣𝑘) in this face is planar.

Let us prove the statement for 𝑘=2. Let F be a 3CNF formula with c clauses that is given as input to the Planar Monotone 1-in-3 SAT problem. Our goal is to construct a planar bipartite graph G such that F is 1-in-3 satisfied if and only if mE2(𝐺)≤|𝐸(𝐺)|+𝑐.

Start from 𝐺′=(𝑉,𝐶,𝐸) being the planar bipartite graph that corresponds to F, with V being the set of the variable vertices 𝑣𝑖 and C being the set of the clause vertices 𝑐𝑗. Note that in F, each clause has exactly three variables but there is no bound on how many times a variable appears in F. Thus for each 𝑣𝑖∈𝑉, we have 𝑑(𝑣𝑖)≥2 and for each 𝑐𝑗∈𝐶, we have 𝑑(𝑐𝑗)=3. It follows that |𝐶|=𝑐 and |𝑉|≤3𝑐.

Proceed by modifying 𝐺′ by adding the gadgets described earlier. For each variable vertex 𝑣𝑖 , let 𝑑𝑖 be the initial degree of 𝑣𝑖 in 𝐺′. Let 𝑑𝑣,𝑖=(𝑑𝑖−1)(𝑐+1)+𝑑𝑖 and 𝑑𝑐=3(𝑐+1)+3. For each variable vertex 𝑣𝑖, for all 1≤𝑗<𝑑𝑖, attach 𝑐+1 copies of the (𝑑𝑣,𝑖+𝑗)-gadget. On each clause vertex 𝑐𝑗, attach 𝑐+1 copies of the 𝑑𝑐-gadget, 𝑐+1 copies of the (𝑑𝑐+2)-gadget and 𝑐+1 copies of the (𝑑𝑐+3)-gadget. Name the resulting graph G and observe that the degree of each 𝑣𝑖 in G becomes equal to 𝑑𝑣,𝑖 and the degree of each 𝑐𝑗 in G becomes equal to 𝑑𝑐. Clearly, the construction of G is achieved in polynomial time. Finally observe that since 𝐺′ is planar and the attached gadgets are actually trees, G is also planar.

Let ℓ be a proper 2-labelling of G such that 𝜎(ℓ)≤|𝐸(𝐺)|+𝑐, i.e., there are at most c edges of G labelled 2 by ℓ. Observe that G contains p-gadgets for 𝑝∈{𝑑𝑣,𝑖+1,𝑑𝑣,𝑖+2,…,𝑑𝑣,𝑖+𝑑𝑖−1,𝑑𝑐,𝑑𝑐+2,𝑑𝑐+3} and 𝑑𝑣,𝑖−1,𝑑𝑐−1>𝑐. Thus Claim 3.1 holds for each gadget attached to G.

Claim 3.3
For any proper 2-labelling ℓ of G such that 𝜎(ℓ)≤|𝐸(𝐺)|+𝑐, we have that:

𝑐ℓ(𝑣𝑖)∉{𝑑𝑣,𝑖+1,𝑑𝑣,𝑖+2,…,𝑑𝑣,𝑖+𝑑𝑖−1} for each variable vertex 𝑣𝑖∈𝑉;

𝑐ℓ(𝑐𝑗)∉{𝑑𝑐,𝑑𝑐+2,𝑑𝑐+3} for each clause vertex 𝑐𝑗∈𝐶.

Proof of the claim. Indeed, each variable vertex 𝑣𝑖 is adjacent to 𝑐+1 copies of the (𝑑𝑣,𝑖+1)-gadget and at most c edges are labelled 2 by ℓ. Thus, at least one of the (𝑑𝑣,𝑖+1)-gadgets, let us call it H, that is attached to 𝑣𝑖, has all of its edges labelled 1. Moreover, 𝑣𝑖 is adjacent to the representative y of H which has degree 𝑑(𝑦)=𝑑𝑣,𝑖+1. Since all the edges of H are labelled 1, the colour 𝑐ℓ(𝑦) of y is 𝑑𝑣,𝑖+1 and thus this colour is forbidden for 𝑣𝑖, i.e., 𝑐ℓ(𝑣𝑖)≠𝑑𝑣,𝑖+1.

By repeating the same arguments for the (𝑑𝑣,𝑖+2)-gadgets attached to 𝑣𝑖, we deduce that 𝑐ℓ(𝑣𝑖)≠𝑑𝑣,𝑖+2. Similarly, by considering the 𝑑𝑐-gadgets (resp., the (𝑑𝑐+2)- and (𝑑𝑐+3)-gadgets) attached to any clause vertex 𝑐𝑗, we get that 𝑐ℓ(𝑐𝑗)∉{𝑑𝑐,𝑑𝑐+2,𝑑𝑐+3}. ⋄

Claim 3.4
Let ℓ be any proper 2-labelling of G such that 𝜎(ℓ)≤|𝐸(𝐺)|+𝑐. Then all edges of the attached gadgets must be labelled 1.

Proof of the claim. Observe that for each clause vertex 𝑧∈𝐶, at least one of its incident edges must be labelled 2. If this were not the case, then 𝑐ℓ(𝑧)=𝑑𝑐, and this is not allowed due to Claim 3.3.

Let H be a gadget attached to z, and y be the representative of H. Suppose ℓ(𝑦𝑧)=2. It follows from Claim 3.1 that there are at least two edges of H labelled 2. Recall that the number of edges of G that can be labelled 2 is at most c. Thus, the number of edges of G, that do not belong to H and can be labelled 2, is at most 𝑐−2. Furthermore, there are 𝑐−1 clause vertices in G that are different from z. It follows that there exists a clause vertex that has all of its incident edges labelled 1, a contradiction. Thus, each 𝑧∈𝐶 must be incident to an edge wz with ℓ(𝑤𝑧)=2 and w cannot belong to a gadget attached to z. It follows that there must be |𝐶|=𝑐 edges of 𝐺′ labelled 2 and since 𝜎(ℓ)≤|𝐸(𝐺)|+𝑐, all the edges of the attached gadgets are labelled 1. ⋄

It follows from Claim 3.4, that the only possible colours induced on the vertices of 𝐺′ by a proper 2-labelling ℓ of G are:

𝑐ℓ(𝑣𝑖)∈{𝑑𝑣,𝑖,𝑑𝑣,𝑖+1,𝑑𝑣,𝑖+2,…,𝑑𝑣,𝑖+𝑑𝑖−1,𝑑𝑣,𝑖+𝑑𝑖} for each variable vertex 𝑣𝑖∈𝑉,

𝑐ℓ(𝑐𝑗)∈{𝑑𝑐,𝑑𝑐+1,𝑑𝑐+2,𝑑𝑐+3} for each clause vertex 𝑐𝑗∈𝐶.

The following hold due to Claim 3.3:

For every variable vertex 𝑣𝑖, we have 𝑐ℓ(𝑣𝑖)∈{𝑑𝑣,𝑖,𝑑𝑣,𝑖+𝑑𝑖}. Observe that 𝑐ℓ(𝑣𝑖)=𝑑𝑣,𝑖 if all edges of 𝐺′ adjacent to 𝑣𝑖 are labelled 1, and 𝑐ℓ(𝑣𝑖)=𝑑𝑣,𝑖+𝑑𝑖 if all edges of 𝐺′ adjacent to 𝑣𝑖 are labelled 2.

For every clause vertex 𝑐𝑗, we have 𝑐ℓ(𝑐𝑗)=𝑑𝑐+1, which corresponds to two edges of 𝐺′ adjacent to 𝑐𝑗 labelled 1 and only one edge labelled 2.

We are now ready to show the equivalence between finding a 1-in-3 truth assignment 𝜙 of F and finding a proper 2-labelling ℓ of G such that 𝜎(ℓ)=mE2(𝐺)≤|𝐸(𝐺)|+𝑐. An edge 𝑣𝑖𝑐𝑗 of 𝐺′ labelled 2 (respectively 1) by ℓ corresponds to variable 𝑥𝑖 bringing truth value true (respectively false) to clause 𝐶𝑗 by 𝜙. Also, we know that in 𝐺′, every variable vertex 𝑣𝑖 is incident to 𝑛≥1 edges, all having the same label (either 1 or 2). Accordingly, the corresponding variable 𝑥𝑖 brings, by 𝜙, the same truth value to the n clauses of F that contain it. Finally, in 𝐺′, every clause vertex 𝑐𝑗 is incident to two edges labelled 1 and one edge labelled 2. This corresponds to the clause 𝐶𝑗 being regarded as satisfied by 𝜙 only when it has exactly one true variable. ◻

A Positive Result for Graphs with Bounded Treewidth
Given a graph 𝐺=(𝑉,𝐸), a tree-decomposition of G is a pair (𝑇,) such that 𝑇=(𝑉(𝑇),𝐸(𝑇)) is a tree and ={𝑋𝑡⊆𝑉∣𝑡∈𝑉(𝑇)} is a familly of subsets (called bags) of vertices of G such that:

𝑉=⋃𝑡∈𝑉(𝑇)𝑋𝑡;

For every 𝑢𝑣∈𝐸, there exists 𝑡∈𝑉(𝑇) with 𝑢,𝑣∈𝑋𝑡; and

For every 𝑣∈𝑉, the subset {𝑡∈𝑉(𝑇)∣𝑣∈𝑋𝑡} induces a subtree of T.

The width of (𝑇,) is equal to max𝑡∈𝑉(𝑇)|𝑋𝑡|−1 and the tree-width tw(𝐺) is the minimum width of a tree-decomposition of G.

A tree-decomposition (𝑇,) is nice [7] if T is rooted in 𝑟∈𝑉(𝑇) and every node 𝑡∈𝑉(𝑇) is exactly of one of the following four types:

1.
Leaf t is a leaf of T and |𝑋𝑡|=1.

2.
Introduce t has a unique child 𝑡′ and there exists 𝑣∈𝑉 such that 𝑋𝑡=𝑋𝑡′∪{𝑣}.

3.
Forget t has a unique child 𝑡′ and there exists 𝑣∈𝑉 such that 𝑋𝑡′=𝑋𝑡∪{𝑣}.

4.
Join t has exactly two children 𝑡′,𝑡″ and 𝑋𝑡=𝑋𝑡′=𝑋𝑡″.

It is well known that every graph 𝐺=(𝑉,𝐸) admits a nice tree-decomposition (𝑇,) rooted in 𝑟∈𝑉(𝑇), that has width equal to tw(𝐺), |𝑉(𝑇)|=(|𝑉|) and 𝑋𝑟={∅} [7].

Let (𝑇,) be a rooted tree-decomposition (with root r) of G and 𝑡∈𝑉(𝑇). A subtree of T induced by t and its descendants is denoted as 𝑇𝑡 and the corresponding subgraph of G, i.e., the graph induced by ∪𝑡′∈𝑉(𝑇𝑡)𝑋𝑡′, is denoted by 𝐺𝑡 (clearly, 𝐺𝑟=𝐺). For every 𝑣∈𝑉(𝐺𝑡), let 𝑁𝑡(𝑣) denote the neighbourhood of v in 𝐺𝑡, that is 𝑁𝑡(𝑣)={𝑢∈𝑉(𝐺𝑡):𝑢𝑣∈𝐸(𝐺𝑡)}. A quasi k-labelling of 𝐺𝑡 consists of a pair of functions (ℓ,𝑐), with ℓ:𝐸(𝐺𝑡)→{1,…,𝑘} and 𝑐:𝑉(𝐺𝑡)→ℕ, such that c is a proper vertex-colouring of 𝐺𝑡, for every 𝑣∈𝑉(𝐺𝑡)∖𝑋𝑡 we have 𝑐(𝑣)=𝑐ℓ(𝑣), and for every 𝑣∈𝑉(𝑋𝑡) we have 𝑐(𝑣)≥𝑐ℓ(𝑣). Intuitively, the notion of quasi k-labelling is a generalisation of proper k-labellings that allows us to further modify the labels (and thus the induced colours) of the edges of 𝑋𝑡 if this is needed in order to extend a proper k-labelling of 𝐺𝑡 into a proper k-labelling of 𝐺𝑡′, where 𝑡′ is the parent of t in T. Finally, let 𝑠𝑡(ℓ)=∑𝑒∈𝐸(𝐺𝑡)ℓ(𝑒).

Observe that every proper k-labelling ℓ′ of G induces a quasi k-labelling of 𝐺𝑡. For every 𝑒∈𝐸(𝐺𝑡) and 𝑣∈𝑉(𝐺𝑡), let ℓ(𝑒)=ℓ′(𝑒) and 𝑐(𝑣)=𝑐ℓ′(𝑣). The pair (ℓ,𝑐) is a quasi k-labelling of 𝐺𝑡. Indeed, since (𝑇,) is a tree-decomposition of G, for every internal node t of T, 𝑋𝑡 is a separator between 𝐺𝑡−𝑋𝑡 and 𝐺−𝑉(𝐺𝑡). Put differently, there are no edges between vertices of 𝐺𝑡−𝑋𝑡 and 𝐺−𝑉(𝐺𝑡). Furthermore, if r is such that 𝑋𝑟=∅, then a quasi k-labelling of 𝐺𝑟 is a proper k-labelling of G. Indeed, it is true (by definition) that a quasi k-labelling of 𝐺𝑟 differs from a proper k-labelling only on the vertices of 𝑋𝑟 and since 𝑋𝑟=∅ and 𝐺𝑟=𝐺 the observation follows.

Theorem 3.5
Let 𝑘≥2 and tw≥1 be two fixed integers. Given a nice graph 𝐺=(𝑉,𝐸) with |𝑉|=𝑛 and an integer s, the problem of deciding whether mE𝑘(𝐺)≤𝑠 holds can be solved in polynomial time if G belongs to the family of graphs that have width at most tw (and in linear time if G is additionally of bounded maximum degree).

Proof
Let us start by giving some definitions. Let Δ=Δ(𝐺) denote the maximum degree of G. For every 𝑡∈𝑉(𝑇), let |𝑋𝑡|=𝑤𝑡, |𝐸(𝐺[𝑋𝑡])|=𝑞𝑡, 𝑋𝑡={𝑣1,…,𝑣𝑤𝑡} and 𝐸(𝐺[𝑋𝑡])={𝑒1,…,𝑒𝑞𝑡} (to simplify the notation, we will simply denote 𝑞𝑡 and 𝑤𝑡 by q and w respectively). Let 𝑡={1,…,𝑘}𝑞×{1,…,𝑘Δ}𝑤×{0,…,𝑘Δ}𝑤 and (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡, where 𝐿={𝑙1,…,𝑙𝑞}, 𝐹𝐶={𝑓1,…,𝑓𝑤} and 𝐶𝐵={𝑏1,…,𝑏𝑤}. The labels we “intent” to assign to the edges of 𝑋𝑡 are in L, the “final colours” induced by these labels on the vertices of 𝑋𝑡 are in FC, and in CB we can find the contribution to these colours that come “from below” (meaning the part of these final colours that are due to edges between 𝑋𝑡 and 𝐺𝑡−𝑋𝑡). Furthermore, for 𝑋′𝑡⊆𝑋𝑡 with 𝑋′𝑡={𝑢1,…,𝑢𝑤′} (where 𝑤′≤𝑤), let 𝐹𝐶|𝑋′𝑡={𝑓′1,…,𝑓′𝑤′} be defined by setting, for each 𝑗∈{1,…,𝑤′}, 𝑓′𝑗=𝑓𝑖𝑗 where 𝑢𝑗=𝑣𝑖𝑗 (𝐿|𝑋′𝑡 and 𝐶𝐵|𝑋′𝑡 are defined similarly).

Moreover, a quasi labelling (ℓ,𝑐) of 𝐺𝑡 is said compatible with (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡 if, for each 𝑖∈{1,…,𝑞} and 𝑗∈{1,…,𝑤}, we have that ℓ(𝑒𝑖)=𝑙𝑖,𝑐(𝑣𝑗)=𝑓𝑗, and 𝑏𝑗=∑𝑥∈𝑁𝑡(𝑣𝑗)∖𝑋𝑡ℓ(𝑣𝑗𝑥). This implies that, for all 𝑖∈{1,…,𝑞} and 𝑗∈{1,…,𝑤},


∑𝑧∈𝑁𝑡(𝑣𝑗)ℓ(𝑧𝑣𝑗)=𝑏𝑗+∑𝑧∈𝑁(𝑣𝑗)∩𝑋𝑡,𝑒𝑖=𝑣𝑗𝑧𝑙𝑖≤𝑐(𝑣𝑗)=𝑓𝑗.

Among all quasi labellings compatible with (L, FC, CB), let us denote as (ℓ∗,𝑐∗) one such compatible labelling that minimises the sum of the labels assigned by ℓ∗. That is, for any 𝑡∈𝑉(𝑡), we have 𝑠𝑡(ℓ∗)≤𝑠𝑡(ℓ) for every quasi labelling ℓ compatible with (L, FC, CB). Let 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=𝑠𝑡(ℓ∗). In essence, for each possible (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡, we have that 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵) is equal to the sum of the labels of an optimal (in terms of sum of labels) quasi labelling (ℓ∗,𝑐∗) of 𝐺𝑡 that is compatible with (L, FC, CB). Note that not all (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡 admit compatible quasi labellings. If (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡 has no compatible quasi labelling, then we set 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=∞.

Finally, let us set


Table(𝑡)=((𝐿,𝐹𝐶,𝐶𝐵,𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)))(𝐿,𝐹𝐶,𝐶𝐵)∈𝑡

being the table associated to each 𝑡∈𝑉(𝑇). Note that


|Table(𝑡)|=(𝑘𝑞(𝑘Δ+1)2𝑤)=(𝑘(tw(𝐺)+1)2(𝑘Δ+1)2tw(𝐺)+2),

since 𝑞≤(tw(𝐺)+12)=((tw(𝐺)+1)2) and 𝑤≤tw(𝐺)+1. Furthermore, since r is such that 𝑋𝑟=∅, then 𝛼𝑟=𝛼𝑟(∅,∅,∅) is equal to the sum of an optimal proper k-labelling of 𝐺𝑟 and thus Table(𝑟)=((∅,∅,∅,𝛼𝑟)), where 𝛼𝑟=mE𝑘(𝐺). All that remains to be done is to compute this Table(𝑡) for every 𝑡∈𝑉(𝑡). We present a dynamic-programming algorithm that performs this computation bottoms up; that is, starting from the leaves of T and progressing towards r. The computation depends on the type of t.

Let t be a leaf node. Recall that |𝑋𝑡|=1 and thus there are no edges in 𝑋𝑡. For every 𝑦∈{1,…,𝑘Δ} and (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡, the 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵) entry of Table(𝑡) is defined as:


𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)={0,∞,if (𝐿,𝐹𝐶,𝐶𝐵)=(∅,{𝑦},{0});otherwise.

Let t be an introduce node and 𝑡′ be its unique child. Set 𝑤=|𝑋𝑡′|, and let v be such that 𝑋𝑡=𝑋𝑡′∪{𝑣}={𝑣1,…,𝑣𝑤,𝑣𝑤+1=𝑣}. Moreover, let 𝐸(𝑋𝑡)={𝑒1,…,𝑒𝑞,𝑒𝑞+1,…,𝑒𝑞+ℎ}, where 𝐸(𝑋𝑡′)={𝑒1,…,𝑒𝑞}. Essentially, the set {𝑒𝑞+1,…,𝑒𝑞+ℎ} contains the edges between v and the other vertices of 𝑋𝑡. By induction, we can assume that Table(𝑡′) is already computed. Let us show how to compute Table(𝑡). Let


(𝐿=(𝑙1,…,𝑙𝑞+ℎ),𝐹𝐶=(𝑓1,…,𝑓𝑤+1),𝐶𝐵=(𝑏1,…,𝑏𝑤+1))∈𝑡.

There is a quasi labelling of 𝐺𝑡 compatible with (L, FC, CB) only if the following three (easily computable) conditions are satisfied:

The final colour 𝑓𝑤+1 that corresponds to v is not in conflict with the final colours that correspond to the neighbours of v in 𝑋𝑡. That is, for each 𝑗∈{1,…,𝑤} such that 𝑣𝑗∈𝑁𝑡(𝑣)∩𝑋𝑡, we have 𝑓𝑤+1≠𝑓𝑗.

Since v is introduced in 𝑋𝑡, we have 𝑁𝑡(𝑣)∖𝑋𝑡=∅ and, as a consequence, c(v) cannot have any contribution coming from 𝐺𝑡∖𝑋𝑡. That is 𝑏𝑤+1=0.

The colour of each vertex in 𝐺𝑡 cannot exceed the final colour that corresponds to it. That is, for every 𝑣𝑖∈𝑋𝑡, we must have


𝑏𝑖+∑𝑗=1𝑞+ℎ𝑙𝑗𝕀𝑖,𝑗≤𝑓𝑖,

where 𝕀𝑖,𝑗={1,0,if there is 𝑤∈𝑁(𝑣𝑖)∩𝑋𝑡 such that 𝑤𝑣𝑖=𝑒𝑗;otherwise.

If one of these three conditions is not satisfied, then 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=∞. Otherwise, let us set


𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=𝛼𝑡′(𝐿|𝑋𝑡′,𝐹𝐶|𝑋𝑡′,𝐶𝐵|𝑋𝑡′)+∑𝑗=𝑞+1𝑞+ℎ𝑙𝑗.

Following the above process, the element ((𝐿,𝐹𝐶,𝐶𝐵),𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)) is added to Table(𝑡) for every (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡.

Let t be a forget node and 𝑡′ be its unique child. Set 𝑤=|𝑋𝑡|, and let v be such that 𝑋𝑡′=𝑋𝑡∪{𝑣}={𝑣1,…,𝑣𝑤,𝑣𝑤+1=𝑣}. Moreover, let 𝐸(𝑋𝑡′)={𝑒1,…,𝑒𝑞,𝑒𝑞+1,…,𝑒𝑞+ℎ}, where 𝐸(𝑋𝑡)={𝑒1,…,𝑒𝑞}. By induction, we can assume that Table(𝑡′) is already computed. Let us show how to compute Table(𝑡).

Let (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡. Let Γ𝑡′ be the subset of 𝑡′ that consists of all (𝐿′,𝐹𝐶′,𝐶𝐵′)∈𝑡′ such that (𝐿,𝐹𝐶,𝐶𝐵)=(𝐿′|𝑋𝑡,𝐹𝐶′|𝑋𝑡,𝐶𝐵′|𝑋𝑡) (i.e., (L, FC, CB) must be the restriction to 𝑋𝑡 of some (𝐿′,𝐹𝐶′,𝐶𝐵′)∈𝑡′) and such that 𝑓′𝑤+1=𝑏′𝑤+1+∑𝑞+1≤𝑗≤𝑞+ℎ𝑙′𝑗. The latter condition allows to respect the property of quasi labellings. Since 𝑣∈𝐺𝑡−𝑋𝑡, the “colour" that it received so far (with a contribution of 𝑏′𝑤+1 from the vertices in 𝐺𝑡′−𝑋𝑡′) plus the labels 𝑙′𝑞+1,…,𝑙′𝑞+ℎ of its incident edges in 𝑋𝑡′ must equal its “final" colour 𝑓′𝑤+1. Finally, let


𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=min𝛾∈Γ𝑡′𝛼𝑡′(𝛾).

Following the above process, the element ((𝐿,𝐹𝐶,𝐶𝐵),𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)) is added to Table(𝑡) for every (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡.

Let t be a join node, 𝑡′ and 𝑡″ be its two children, with 𝑋𝑡=𝑋𝑡′=𝑋𝑡″={𝑣1,…,𝑣𝑤} and 𝐸(𝑋𝑡)=𝐸(𝑋𝑡′)=𝐸(𝑋𝑡″)={𝑒1,…,𝑒𝑞}. By induction, we can assume that Table(𝑡′) and Table(𝑡″) have already been computed. Let us show how to compute Table(𝑡).

Let (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡. Let Γ𝑡 be the set of pairs ((𝐿,𝐹𝐶,𝐶𝐵′),(𝐿,𝐹𝐶,𝐶𝐵″)) such that (𝐿,𝐹𝐶,𝐶𝐵′)∈𝑡′ and (𝐿,𝐹𝐶,𝐶𝐵″)∈𝑡″ such that 𝐶𝐵=𝐶𝐵′+𝐶𝐵″ (meaning that for each 𝑗∈{1,…,𝑤} we have 𝑏𝑗=𝑏′𝑗+𝑏″𝑗, where 𝑏𝑗∈𝐶𝐵, 𝑏′𝑗∈𝐶𝐵′ and 𝑏″𝑗∈𝐶𝐵″). Then, let


𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)=min((𝐿,𝐹𝐶,𝐶𝐵′),(𝐿,𝐹𝐶,𝐶𝐵″))∈Γ𝑡𝛼𝑡′(𝐿,𝐹𝐶,𝐶𝐵′)+𝛼𝑡″(𝐿,𝐹𝐶,𝐶𝐵″)−∑𝑖=1𝑞𝑙𝑖.

Following the above process, the element ((𝐿,𝐹𝐶,𝐶𝐵),𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)) is added to Table(𝑡) for every (𝐿,𝐹𝐶,𝐶𝐵)∈𝑡.

In all cases, it can be shown by induction that 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)≠∞ if and only if there is a quasi labelling of 𝐺𝑡 compatible with (L, FC, CB), and, moreover, that if 𝛼𝑡(𝐿,𝐹𝐶,𝐶𝐵)≠∞, then it is the minimum sum of the edge labels among all quasi labellings of 𝐺𝑡 compatible with (L, FC, CB). ◻

Particular Behaviours of the Problem
In this section, we study some behaviours of the problem of determining mE𝑘(𝐺) for some integer k and nice graph G. We start by establishing that there is no systematic relationship between the proper labellings we are interested in and those considered in [1] and [5]. We then prove that, in general, using large labels might be needed for designing proper labellings ℓ verifying 𝜎(ℓ)=mE(𝐺). This actually remains true in cases where G is a tree.

Minimising the Maximum Colour Versus Minimising the Sum of Labels
As described in the introductory section, quite recently the authors of [5] investigated proper labellings that minimise the maximum resulting vertex colour. The formal definitions are as follows. For a given graph G and a labelling ℓ of G, let mS(𝐺,ℓ) denote the maximum vertex colour 𝑐ℓ(𝑣) induced by ℓ over all vertices v of G. For a given 𝑘≥𝜒Σ(𝐺), let mS𝑘(𝐺) denote the smallest value of mS(𝐺,ℓ) over all proper k-labellings of G. Now, the main parameter of interest is mS(𝐺), which is defined as the minimum value of mS𝑘(𝐺) over all values of 𝑘≥𝜒Σ(𝐺).

As established in Observation 2.2 determining mE(𝐺) for a nice graph G can equivalently be seen as finding a proper labelling of G that minimises the sum of resulting vertex colours. Thus, one could think that maybe mE(𝐺) is a good approximation of mS(𝐺), or vice-versa. In this section, we show that this is actually not the case.

The next result shows that, when constructing a proper labelling ℓ of a graph G with mS(𝐺,ℓ)=mS(𝐺), we might have 𝜎(ℓ) being arbitrarily far from mE(𝐺). In other words, minimising the maximum colour does not imply minimising the sum of labels. This actually remains true for trees.

Theorem 4.1
There exist nice trees T with arbitrarily large maximum degree Δ≥2 for which, for any proper labelling ℓ achieving mS(𝑇,ℓ)=mS(𝑇), we have mE(𝑇,ℓ)=mE(𝑇)+Δ−2.

Proof
Consider the following tree T with maximum degree Δ≥2. We start from a vertex v with Δ neighbours 𝑢1,…,𝑢Δ, each of which is adjacent to Δ−1 leaves. In other words, all neighbours of v have degree Δ, and all other vertices are leaves at distance exactly 2 from v.

Now consider a proper labelling ℓ of T that minimises the maximum colour, i.e., mS(𝑇,ℓ)=mS(𝑇). Since T has adjacent vertices with degree Δ, we have mS(𝑇,ℓ)≥Δ+1. One possible way to attain mS(𝑇,ℓ)=Δ+1 is to have all edges incident to v being labelled 1, and, for each 𝑢𝑖, to have exactly one incident edge going to a leaf being labelled 2 and all other Δ−2 incident edges being labelled 1. Indeed, we get 𝑐ℓ(𝑣)=Δ≠Δ+1=𝑐ℓ(𝑢𝑖) for every 𝑖∈{1,…,Δ}. Actually, this is the only way to have mS(𝑇,ℓ)=Δ+1, because if we label the edges incident to v so that 𝑐ℓ(𝑣)=Δ+1, then it is easy to see that the vertex 𝑢𝑖 such that ℓ(𝑣𝑢𝑖)=2 would get 𝑐ℓ(𝑢𝑖)≥Δ+2 to avoid a colour conflict between v and 𝑢𝑖. Therefore, there is only one general way to label (actually 2-label) T so that mS(𝑇,ℓ)=mS(𝑇)=Δ+1, and we note that the number of edges labelled 2 by ℓ is exactly Δ (one for each 𝑢𝑖). Thus mE(𝑇,ℓ)=|𝐸|+Δ.

Observe now that regardless of the value of Δ, the 2-labelling ℓ∗ of T where ℓ∗(𝑣𝑢1)=ℓ∗(𝑣𝑢2)=2 and all other edges are labelled 1 is proper. This is because we get 𝑐ℓ∗(𝑣)=Δ+2, 𝑐ℓ∗(𝑢1)=𝑐ℓ∗(𝑢2)=Δ+1 and 𝑐ℓ∗(𝑢𝑖)=Δ, for 𝑖∈{3,…,Δ}. Thus, mE(𝑇)≤mE2(𝑇)≤mE(𝑇,ℓ∗)=|𝐸|+2 and the difference between 𝜎(ℓ) and 𝜎(ℓ∗) then gets arbitrarily large as Δ grows larger. ◻

Fig. 1
figure 1
The only proper 2-labellings ℓ1 (left) and ℓ2 (right) of the 𝑇2 gadget, used in the construction illustrated in Fig. 2. The induced colours for each labelling are represented as integers in the corresponding vertices. Vertex 𝑢1 is called the root of the gadget. Wiggly edges are edges that could be labelled either 1 or 2

Full size image

Fig. 2
figure 2
The only proper 2-labellings of the spreading gadget 𝐺⋏. A triangle marked as “𝑇2” indicates that a copy of the 𝑇2 gadget (depicted in Fig. 1) is attached via its root vertex. That is, 𝑢5 (resp., 𝑢6 and 𝑢7) is identified to the root of one copy of 𝑇2. The induced colours for each labelling are represented as integers in the corresponding vertices. Wiggly edges are edges that could be labelled either 1 or 2

Full size image

The next result shows that the converse is also true: a proper labelling that minimises the sum of labels does not necessarily minimise the maximum colour as well.

Theorem 4.2
There exist nice graphs G with arbitrarily large maximum degree Δ≥12 for which, for any proper 2-labelling ℓ achieving 𝜎(ℓ)=mE2(𝐺), we have mS(𝐺,ℓ)=mS(𝐺)+Δ.

Proof
In [5] is exhibited a spreading gadget 𝐺⋏ (a slight modification of the graph depicted in Fig. 2) with one input (the edge 𝑢1𝑢2) and two outputs (the edges 𝑢9𝑢10 and 𝑢12𝑢13), that are pending edges that must all be assigned the same label (which can be either 1 or 2) by any proper 2-labelling (see Section 4.4 in [5] for details). Having a closer look at 𝐺⋏, we note that, regarding our minimisation problem, it has the following property:

Claim 4.3
Let ℓ be a proper 2-labelling of 𝐺⋏ achieving 𝜎(ℓ)=mE2(𝐺⋏). Then ℓ assigns label 2 to the input and two outputs of 𝐺⋏.

Proof of the claim. As mentioned above, the proper 2-labellings of 𝐺⋏ are of two kinds: those ℓ1 assigning label 1 to the input and two outputs, and those ℓ2 assigning label 2 to the input and two outputs. Such labellings ℓ1 and ℓ2 are as described in Fig. 2a, b, respectively (see [5]). In particular, it is important to mention that the solid edges in the figures must be labelled as illustrated (up to symmetry), while the only sources of freedom we have are the labels assigned to the wiggly edges, which can each freely be chosen to be 1 or 2.

Let us now determine the minimum sum of labels assigned by these proper labellings:

For a proper 2-labelling ℓ1 of 𝐺⋏ assigning label 1 to the input and two outputs, we note, as illustrated in Fig. 2a, that 𝑢5 and 𝑢6 must get colour 10, which is possible only if the two copies of 𝑇2 attached to 𝑢5 and 𝑢6 are labelled as in Fig. 1a. Indeed, assuming that one of these copies of 𝑇2, say the one attached to 𝑢5, is labelled as in Fig. 1b, would mean that 𝑐ℓ1(𝑢5)=𝑐ℓ1(𝑢3)=10, and thus ℓ1 would not be a proper labelling. The vertex 𝑢7 must get colour 11, which is not prevented by any of the two ways of labelling the copy of 𝑇2 attached to it. Thus, for ℓ1 to minimise the sum of labels, the copies of 𝑇2 attached to 𝑢5 and 𝑢6 must be labelled as in Fig. 1a, and the copy of 𝑇2 attached to 𝑢7 must be labelled as in Fig. 1a as well (as the sum of labels in the labelling of Fig. 1b is larger). All wiggly edges should be assigned label 1. In total, a minimum ℓ1 assigns label 1 to 40 edges and label 2 to 25 edges, and thus 𝜎(ℓ1)=90.

By similar arguments, we deduce that, by a proper 2-labelling ℓ2 of 𝐺⋏ assigning label 2 to the input and two outputs, the copies of 𝑇2 attached to 𝑢5 and 𝑢6 should be labelled as depicted in Fig. 1b, while the copy of 𝑇2 attached to 𝑢7 should be labelled as depicted in Fig. 1a (in particular, the two labellings of 𝑇2 depicted in Fig. 1 comply with 𝑢7 having colour 7). Again, the wiggly edges should be labelled 1. In total, a minimum ℓ2 assigns label 1 to 42 edges and label 2 to 23 edges, and thus 𝜎(ℓ2)=88.

Thus, a proper 2-labelling ℓ of 𝐺⋏ achieving 𝜎(ℓ)=mE2(𝐺⋏) must assign label 2 to the input and two outputs. ⋄

Now consider the graph operation consisting in taking two copies 𝐺1 and 𝐺2 of 𝐺⋏, and identifying the input of 𝐺1 and one output of 𝐺2 (so that the two degree-1 vertices do not get identified together). Thus, if 𝑢1𝑖 and 𝑢2𝑖 (for 1≤𝑖≤13) denote the vertices of 𝐺1 and 𝐺2 respectively, in 𝐺⋏ we can either have 𝑢19𝑢110=𝑢21𝑢22 or 𝑢112𝑢113=𝑢21𝑢22. As described in [5], this results in a graph G with one input and three outputs such that, for every proper 2-labelling, the input and three outputs must all be assigned the same label (which can be either 1 or 2). By repeating this operation with more and more copies of 𝐺⋏, we can come up with a graph 𝐺1/2 with one input and arbitrarily many outputs that must all be assigned the same label (either 1 or 2) by a proper 2-labelling. So there are, essentially, two groups of proper 2-labellings of 𝐺1/2: those ℓ1 assigning label 1 to the input and all outputs, and those ℓ2 assigning label 2 to the input and all outputs. Clearly, a proper 2-labelling ℓ of 𝐺1/2 verifying 𝜎(ℓ)=mE2(𝐺1/2), when restricted to any constituting copy of 𝐺⋏ in 𝐺1/2, should also be minimum in terms of sum of assigned labels. From Claim 4.3, we thus deduce that a proper 2-labelling ℓ of 𝐺1/2 achieving 𝜎(ℓ)=mE2(𝐺1/2) must assign label 2 to the input and all outputs, i.e., must belong to the ℓ2 group mentioned above. In particular, the difference between the sum of labels of a minimum ℓ1 and the sum of labels of a minimum ℓ2 gets larger as the number of copies involved in the construction of 𝐺1/2 gets larger.

Now let G be the graph obtained as follows. Consider the graph 𝐺1/2 with Δ outputs (for any Δ≥12), and identify the degree-1 vertices of these Δ outputs to a single vertex 𝑜∗ (with maximum degree Δ, as it can be checked from Figs. 1 and 2 that all other vertices of 𝐺1/2 have degree at most 6). Note that a proper 2-labelling of G is also proper for 𝐺1/2, since vertices of degree 1 cannot be involved in conflicts. Also, a proper 2-labelling of 𝐺1/2 must be proper in G as well, since 𝑜∗ has degree at least 12 while all its neighbours have degree 2. By these arguments, a proper 2-labelling ℓ of G verifying 𝜎(ℓ)=mE2(𝐺) must thus be one of these proper 2-labellings ℓ2 assigning label 2 to the input and all outputs. Such an ℓ2 verifies 𝑐ℓ2(𝑜∗)=2Δ. On the other hand, a proper 2-labelling ℓ1 assigning label 1 to all outputs verifies 𝑐ℓ1(𝑜∗)=Δ. Thus, a proper 2-labelling ℓ of G verifying 𝜎(ℓ)=mE2(𝐺) will make 𝑜∗ get colour 2Δ, while there are proper 2-labellings by which 𝑜∗ gets colour Δ. Note in particular that by our choice of Δ, vertex 𝑜∗ must indeed be the vertex with the largest colour, as its degree is at least 12, all other vertices have degree at most 6, and we are only assigning labels 1 and 2. ◻

Using Larger Labels can be Arbitrarily Better
In this section, we present, for any 𝑘≥3, a construction for a tree 𝑇𝑘 such that mE2(𝑇𝑘)=mE3(𝑇𝑘)=mE4(𝑇𝑘)=⋯=mE𝑘(𝑇𝑘) and mE𝑘+1(𝑇𝑘)<mE𝑘(𝑇𝑘). In other words, for these trees 𝑇𝑘 we need to consider larger labels to design a proper labelling ℓ achieving mE(𝑇𝑘,ℓ)=mE(𝑇𝑘).

Let us first introduce the auxiliary graph 𝐴(𝛼,𝛽) (for 𝛼≥2 and 𝛽≥0), which will serve as the building block for 𝑇𝑘. This auxiliary graph is a tree and is built recursively as follows: for any 𝛼∗∈ℕ, define 𝐴(𝛼∗,0) as a leaf. For any 𝛽>0, 𝐴(𝛼,𝛽) is a tree of height 𝛽, rooted in a vertex r that has 𝛼 children. For each 1≤𝑖≤𝛼, let 𝑐𝑖 be the corresponding child of r; each 𝑐𝑖 is the root of a 𝐴(𝛼+𝑖,𝛽−1) tree and thus 𝑑(𝑐𝑖)=𝛼+𝑖+1 (since each 𝑐𝑖 has 𝛼+𝑖 children of its own as well as an edge connecting him with his parent). Note that 𝑑(𝑐𝑖)∈𝐷(𝛼)={𝛼+2,…,2𝛼+1} and that, for 𝑖≠𝑗, we have 𝑑(𝑐𝑖)≠𝑑(𝑐𝑗) (and thus all the values of 𝐷(𝛼) are used exactly once). Finally, we say that 𝐴(𝛼,𝛽) is represented by r. The auxiliary graph A(2, 2) is illustrated in Fig. 3.

Fig. 3
figure 3
The auxiliary graph A(2, 2)

Full size image

Let us also define the pending auxiliary graph that corresponds to 𝐴(𝛼,𝛽) as 𝑃(𝛼,𝛽)=(𝑉,𝐸), where 𝑉=𝑉(𝐴(𝛼,𝛽))∪{𝑣} and 𝐸=𝐸(𝐴(𝛼,𝛽))∪𝑣𝑟; in essence 𝑃(𝛼,𝛽) is 𝐴(𝛼,𝛽) with an extra vertex v connected to r. We say that 𝑃(𝛼,𝛽) is pending from v. Observe that 𝑃(𝛼,𝛽) is locally irregular and thus the labelling ℓ that assigns label 1 to every one of its edges is proper and verifies mE(𝑃(𝛼,𝛽),ℓ)=|𝐸|.

Lemma 4.4
Let 𝛽∈ℕ∗ and 𝛼≥2. Let ℓ be a proper 𝛼-labelling of the pending auxiliary graph 𝑃(𝛼,2𝛽) pending from v. Let 𝑢,𝑤∈𝑉(𝑃(𝛼,2𝛽)) such that 1≤dist(𝑢,𝑣)≤2 and w is the parent of u. If ℓ(𝑢𝑤)>1, then mE(𝑃(𝛼,2𝛽),ℓ)≥|𝐸|+𝛽.

Proof
Let us prove the claim for the case where dist(𝑢,𝑣)=2 and u is the root of the 𝐴(𝛼+1,2𝛽−1) subtree and 𝑤=𝑟 (similar arguments hold for the other cases) and let us first assume that uw is the only edge of 𝑃(𝛼,𝛽) that has label more than 1, say ℓ(𝑢𝑤)=𝛼′ where 2≤𝛼′≤𝛼. It follows that 𝑐ℓ(𝑢)=𝛼+𝛼′+1 and that 𝛼+3≤𝑐ℓ(𝑢)≤2𝛼+1. Since all edges of 𝑃(𝛼,2𝛽) except uw are labelled 1, each child y of u has 𝑐ℓ(𝑦)=𝑑(𝑦). Moreover, since u is the root of the 𝐴(𝛼+1,2𝛽−1) tree, each one of the 𝛼+1 children of u has a unique degree in the set 𝐷(𝛼+1). But 𝐷(𝛼+1)={𝛼+3,…,2𝛼+2} and 𝑐ℓ(𝑢)∈𝐷(𝛼+1). It follows that there exists a child of u that has, by ℓ, the same colour as u. Thus ℓ must assign a label different from 1 to at least one more edge of 𝑃(𝛼,𝛽), and the argument can be repeated at least 𝛽 times (since the height of 𝑇(𝛼,2𝛽) is 2𝛽+1), leading to ℓ having to assign a label different than 1 to at least 𝛽 edges. The exact value of mE(𝑃(𝛼,2𝛽),ℓ)=|𝐸|+𝛽 is reached if each time the argument is repeated, 𝛼′=2 and the next edge that gets assigned label 2 is at distance 2 from the previous ones. ◻

Theorem 4.5
For every 𝑘≥2, there exists a nice graph 𝑇𝑘 such that mE𝑘+1(𝑇𝑘)<mE𝑘(𝑇𝑘).

Proof
Let 𝑘≥2 and let us describe the construction of 𝑇𝑘=(𝑉,𝐸). For 0≤𝑗≤𝑘−1, let 𝑃(𝑘+𝑗,2(𝑘+1)) be the auxiliary graph pending from 𝑣𝑗 that corresponds to an auxiliary graph 𝐴(𝑘+𝑗,2(𝑘+1)) (represented by a vertex 𝑟𝑗) and let u, v be two vertices connected by the edge uv. The tree 𝑇𝑘 is the graph that is produced by identifying v with each one of the 𝑣𝑗. Observe that since 𝑟𝑗 represents 𝐴(𝑘+𝑗,2(𝑘+1)), each 𝑟𝑗 has d(r_j)=k+j+1𝑑(𝑟𝑗)=𝑘+𝑗+1 in T_k𝑇𝑘 and that the height of T_k𝑇𝑘 is 2(k+1)+12(𝑘+1)+1. Also observe that in T_k𝑇𝑘, since N(v)=\{r_0,\ldots ,r_{k-1},u\}𝑁(𝑣)={𝑟0,…,𝑟𝑘−1,𝑢}, we have d(v)=k+1=d(r_0)𝑑(𝑣)=𝑘+1=𝑑(𝑟0).

Claim 4.6
There exists a proper (k+1)(𝑘+1)-labelling \ell ℓ of T_k𝑇𝑘 such that \sigma (\ell )=|E|+k𝜎(ℓ)=|𝐸|+𝑘.

Proof of the claim. Note that T_k𝑇𝑘 is almost locally irregular. Indeed, let w be a non-leaf vertex of T_k𝑇𝑘 different from r_1, v𝑟1,𝑣 and u, and let x be its parent. If d(w)=d+1𝑑(𝑤)=𝑑+1, then d+1>d(x)𝑑+1>𝑑(𝑥) (by construction) and w has d children, each one having degree at least d+2𝑑+2. In fact, the only adjacent vertices that have the same degree are v and r_0𝑟0.

Let \ell ℓ be the (k+1)(𝑘+1)-labelling of T_k𝑇𝑘 that assigns label k+1𝑘+1 to the edge uv and label 1 to the remaining edges of T_k𝑇𝑘. Then c_\ell (v)=2k+1𝑐ℓ(𝑣)=2𝑘+1 and, for each 0\le i\le k-10≤𝑖≤𝑘−1, we have d(r_j)\in [k+1,2k]𝑑(𝑟𝑗)∈[𝑘+1,2𝑘] and thus there is no conflict between the colour of v and that of its children. It follows that \ell ℓ is a proper (k+1)(𝑘+1)-labelling for T_k𝑇𝑘 and \sigma (\ell )=|E|+k𝜎(ℓ)=|𝐸|+𝑘. \diamond ⋄

Let \ell 'ℓ′ be any proper k-labelling of T_k𝑇𝑘. It suffices to show that \sigma (\ell ')>|E|+k𝜎(ℓ′)>|𝐸|+𝑘. Note that, since d(v) = d(r_0) = k+1𝑑(𝑣)=𝑑(𝑟0)=𝑘+1 and \ell 'ℓ′ is proper, there must exist vertices w, y, with w\in N(r_0)\setminus \{v\}𝑤∈𝑁(𝑟0)∖{𝑣} and y\in N(v)\setminus \{u,r_0\}𝑦∈𝑁(𝑣)∖{𝑢,𝑟0}, such that at least one of the edges uv, r_0w𝑟0𝑤 or vy has to have a label different from 1. Let \ell '(uv)=lℓ′(𝑢𝑣)=𝑙 with 2\le l\le k2≤𝑙≤𝑘 and assume that this is the only edge of T_k𝑇𝑘 that has a label different from 1. Then c_{\ell '}(v)=k+l𝑐ℓ′(𝑣)=𝑘+𝑙 and k+l\in \{k+2,\ldots ,2k\}𝑘+𝑙∈{𝑘+2,…,2𝑘}. Recall that for every 0\le j\le k-10≤𝑗≤𝑘−1, vertex r_j𝑟𝑗 has d(r_j)=k+j+1𝑑(𝑟𝑗)=𝑘+𝑗+1 and thus d(r_j)\in \{k+1,\ldots ,2k\}𝑑(𝑟𝑗)∈{𝑘+1,…,2𝑘}. Besides, since uv is the only edge with a label different from 1, we have c_{\ell '}(r_j)=d(r_j)𝑐ℓ′(𝑟𝑗)=𝑑(𝑟𝑗). It follows that there exists a j\in \{0,\ldots ,k-1\}𝑗∈{0,…,𝑘−1}, such that c_{\ell '}(r_j)=c_{\ell '}(v)𝑐ℓ′(𝑟𝑗)=𝑐ℓ′(𝑣) leading to \ell 'ℓ′ not being proper. Thus, there must exist another edge u'v'𝑢′𝑣′ (with, say, u'𝑢′ being the parent of v'𝑣′) that is assigned a label different from 1 by \ell 'ℓ′. Note that u'𝑢′ is either r_j𝑟𝑗 or v. This edge, however, belongs to P(q,2(k+1))𝑃(𝑞,2(𝑘+1)) (for some q\in \{k,\ldots ,2k-1\}𝑞∈{𝑘,…,2𝑘−1}) and we have that 1\le \mathrm{dist}(v',v)\le 21≤dist(𝑣′,𝑣)≤2. It follows from Lemma 4.4 that \mathrm{mE}(T_k)\ge |E|+k+1mE(𝑇𝑘)≥|𝐸|+𝑘+1. The cases where r_0w𝑟0𝑤 or vy are assigned a label different from 1 follow by applying directly Lemma 4.4.

\square ◻

Observe that the height of T_k𝑇𝑘 can be controlled by changing the \beta 𝛽 value of the pending auxiliary graphs that form it. Furthermore, for \alpha \ge 2𝛼≥2 and \beta ,\beta ' \in {\mathbb {N}}^*𝛽,𝛽′∈ℕ∗ with \beta <\beta '𝛽<𝛽′, it follows from Lemma 4.4 that \mathrm{mE}(T(\alpha ,2\beta ))<\mathrm{mE}(T(\alpha ,2\beta '))mE(𝑇(𝛼,2𝛽))<mE(𝑇(𝛼,2𝛽′)), where T(\alpha ,2\beta )𝑇(𝛼,2𝛽) denotes the graph T_k𝑇𝑘 formed by \alpha 𝛼 pending auxiliary graphs of height 2\beta 2𝛽. This proves the following corollary:

Corollary 4.7
For every k\ge 2𝑘≥2, there exists a graph T_k𝑇𝑘 such that \mathrm{mE}_{k+1}(T_k)mE𝑘+1(𝑇𝑘) is arbitrarily smaller than \mathrm{mE}_k(T_k)mE𝑘(𝑇𝑘).

Bounds
Observation 2.1 establishes that, for any nice graph G, in general \mathrm{mE}(G)mE(𝐺) should be expressed as a function of |E|. To date, the best result towards the 1–2–3 Conjecture, due to Kalkowski, Karoński and Pfender [13], states that \chi _\Sigma (G) \le 5𝜒Σ(𝐺)≤5 holds for every nice graph G. It implies the following:

Theorem 5.1
[13] For every nice graph G, we have \mathrm{mE}(G) \le \mathrm{mE}_5(G) \le 5|E|mE(𝐺)≤mE5(𝐺)≤5|𝐸|.

Of course, the upper bound in Theorem 5.1 is immediately improved for every nice graph G for which we can beat the upper bound of Kalkowski, Karoński and Pfender. In particular, let us recall that \chi _\Sigma (G) \le 3𝜒Σ(𝐺)≤3 whenever \chi (G) \le 3𝜒(𝐺)≤3 (see [14]), which implies that \mathrm{mE}(G) \le \mathrm{mE}_3(G) \le 3|E|mE(𝐺)≤mE3(𝐺)≤3|𝐸| holds here. Recently, Przybyło proved in [18] that \chi _\Sigma (G) \le 4𝜒Σ(𝐺)≤4 whenever G is regular, which implies that \mathrm{mE}(G) \le \mathrm{mE}_4(G) \le 4|E|mE(𝐺)≤mE4(𝐺)≤4|𝐸| holds. More results of this sort can be found e.g. in the survey [19] by Seamone.

More generally, the 1–2–3 Conjecture, if true, would imply that, for every nice graph G, we even have \mathrm{mE}(G) \le \mathrm{mE}_3(G) \le 3|E|mE(𝐺)≤mE3(𝐺)≤3|𝐸|. A natural question to wonder is whether there exist graphs G for which \mathrm{mE}(G)mE(𝐺) is close to this theoretical upper bound 3|E|. Recall that, already, we have \mathrm{mE}(G) \le \mathrm{mE}_2(G) \le 2|E|mE(𝐺)≤mE2(𝐺)≤2|𝐸| whenever \chi _\Sigma (G) \le 2𝜒Σ(𝐺)≤2. The fact that we are not aware of graphs G with \chi _\Sigma (G)=3𝜒Σ(𝐺)=3 needing a lot of 3’s in all proper 3-labellings leads us to suspect that even the following conjecture might be true.

Conjecture 5.2
For every nice graph G, we have \mathrm{mE}(G) \le 2|E|mE(𝐺)≤2|𝐸|.

Conjecture 5.2 holds true for all graphs G with \chi _\Sigma (G) \le 2𝜒Σ(𝐺)≤2, recall Observation 2.1. Experimentation via computer programs led us to observe that, actually, it might even be true that the equality \mathrm{mE}(G)=2|E|mE(𝐺)=2|𝐸| holds if and only if G is K_3𝐾3 or C_6𝐶6, recall Theorems 2.5 and 2.6. However, these cases are very peculiar, due to the small number of edges these two graphs have.

Throughout this section, we provide weaker results towards Conjecture 5.2 for graphs with given chromatic number, we verify Conjecture 5.2 for bipartite graphs, and we prove a stronger result in the particular case of trees.

Graphs with Large Chromatic Number
Towards Conjecture 5.2, we provide a general bound on \mathrm{mE}(G)mE(𝐺) being a function of the chromatic number \chi (G)𝜒(𝐺). In particular, the bound we get is better than that in Theorem 5.1, and even better than the conjectured one in Conjecture 5.2, for dense enough graphs.

In the upcoming proofs, we make use of arguments that are fairly common in this field (see e.g. [1, 6, 8, 14,15,16, 20]), based on label modifications along walks with certain parity length. Recall that a walk in a graph is a path in which vertices and/or edges might be repeated. A walk is said closed if it starts and ends at a same vertex. We say a path is even (odd, respectively) if it is of even length (odd length, respectively).

The next results are for graphs that are not bipartite. Results dedicated to bipartite graphs will be provided in the next section.

Theorem 5.3
Let G=(V,E)𝐺=(𝑉,𝐸) be a nice connected graph with chromatic number k=\chi (G)𝑘=𝜒(𝐺) at least 3. Then, we have \mathrm{mE}(G) \le \mathrm{mE}_{k+1}(G) \le |E|+k|V|mE(𝐺)≤mE𝑘+1(𝐺)≤|𝐸|+𝑘|𝑉|.

Proof
Since k\ge 3𝑘≥3, we have that G is not a bipartite graph. It follows that there exists an odd cycle C in G. Let H be the subgraph of G constructed according the following procedure: start by H=C𝐻=𝐶. Then, iteratively, for each vertex v\in V\setminus V(H)𝑣∈𝑉∖𝑉(𝐻) such that there exists a vertex h\in V(H)ℎ∈𝑉(𝐻) with vh\in E𝑣ℎ∈𝐸, add v to V(H) and vh to E(H). Repeat this process until V(H)=V𝑉(𝐻)=𝑉. In the end, H will contain only one cycle, the cycle C, and simple paths that lead to all the vertices of G that do not belong to C. Observe that for each e\in E(C)𝑒∈𝐸(𝐶), the subgraph H-e𝐻−𝑒 is a spanning tree of G. Thus |E(H)|=|V(G)||𝐸(𝐻)|=|𝑉(𝐺)|.

Let G'=G\cup S_0𝐺′=𝐺∪𝑆0, where S_0=\emptyset 𝑆0=∅, and S_i\subseteq V(G')𝑆𝑖⊆𝑉(𝐺′), for 1\le i\le k1≤𝑖≤𝑘, be the k stable sets induced by a proper vertex-colouring c of G'𝐺′ (i.e. if v\in S_i𝑣∈𝑆𝑖 then c(v)=i𝑐(𝑣)=𝑖). We are going to construct a (k+1)(𝑘+1)-labelling \ell ℓ on the edges of G'𝐺′ such that \sigma (\ell )\le |E(G')|+k|V(G')|𝜎(ℓ)≤|𝐸(𝐺′)|+𝑘|𝑉(𝐺′)|. Let us start by having \ell ℓ assigning label 1 to all edges of G'𝐺′. At this point, the colour of every vertex is exactly its degree. For each 0\le i\le k0≤𝑖≤𝑘, let S_i^*=\{v\in S_i|c_\ell (v)=i\bmod {k+1}\}𝑆∗𝑖={𝑣∈𝑆𝑖|𝑐ℓ(𝑣)=𝑖mod𝑘+1} (obviously S_0^*=\emptyset 𝑆∗0=∅). Our goal is to modify \ell ℓ so that for each i, we have S_i^*=S_i𝑆∗𝑖=𝑆𝑖, from which it follows that c_\ell 𝑐ℓ is a proper vertex-colouring of G'𝐺′. Aiming at reaching that conclusion, note that, modulo k+1𝑘+1, we can equivalently have \ell ℓ assigning labels 0,\ldots ,k0,…,𝑘 instead.

Let v^*\in V(G')𝑣∗∈𝑉(𝐺′) such that d(v)=d\bmod {k+1}𝑑(𝑣)=𝑑mod𝑘+1. Since c_\ell (v^*)=d(v^*)𝑐ℓ(𝑣∗)=𝑑(𝑣∗), it follows that v^*\in S_d^*𝑣∗∈𝑆∗𝑑. Free to relabel the stable sets induced by c, we may assume that d is such that S_{d-1}=\emptyset 𝑆𝑑−1=∅. For each v\in S_i\setminus S_i^*𝑣∈𝑆𝑖∖𝑆∗𝑖, we define P_o(v)=(v^*,h^o_1,\ldots ,h^o_n,v)𝑃𝑜(𝑣)=(𝑣∗,ℎ𝑜1,…,ℎ𝑜𝑛,𝑣) and P_e(v)=(v^*,h^e_1,\ldots ,h^e_m,v)𝑃𝑒(𝑣)=(𝑣∗,ℎ𝑒1,…,ℎ𝑒𝑚,𝑣) to be an odd and an even walk, respectively, following the edges of H, that connect v^*𝑣∗ and v (thus n is an even number and m is an odd number). These walks are sure to exist because H contains the odd cycle C. We modify \ell ℓ to a labelling \ell 'ℓ′ as follows. We traverse P_o(v)𝑃𝑜(𝑣) from one end to the other, and, as going along, alternate between removing 1\bmod {k+1}1mod𝑘+1 and adding 1\bmod {k+1}1mod𝑘+1 from the labels of the traversed edges. Thus \ell '(v^*h_1^o)=\ell (v^*h_1^o)-1 \bmod {k+1}, \ell '(h_1^oh_2^o)=\ell (h_1^oh_2^o)+1\bmod {k+1}, \dots ,\ell '(h_n^ov)=\ell (h_n^ov)-1\bmod {k+1}ℓ′(𝑣∗ℎ𝑜1)=ℓ(𝑣∗ℎ𝑜1)−1mod𝑘+1,ℓ′(ℎ𝑜1ℎ𝑜2)=ℓ(ℎ𝑜1ℎ𝑜2)+1mod𝑘+1,…,ℓ′(ℎ𝑜𝑛𝑣)=ℓ(ℎ𝑜𝑛𝑣)−1mod𝑘+1. We perform similar modifications as traversing P_e(v)𝑃𝑒(𝑣) from one end to the other. Thus \ell '(v^*h_1^e)=\ell (v^*h_1^e)+1\bmod {k+1}, \ell '(h_1^eh_2^e) =\ell (h_1^eh_2^e)-1\bmod {k+1},\ldots ,\ell '(h_m^ev)=\ell (h_m^ev) -1\bmod {k+1}ℓ′(𝑣∗ℎ𝑒1)=ℓ(𝑣∗ℎ𝑒1)+1mod𝑘+1,ℓ′(ℎ𝑒1ℎ𝑒2)=ℓ(ℎ𝑒1ℎ𝑒2)−1mod𝑘+1,…,ℓ′(ℎ𝑒𝑚𝑣)=ℓ(ℎ𝑒𝑚𝑣)−1mod𝑘+1. These modifications do not affect the colours of the internal vertices of P_o(v)𝑃𝑜(𝑣) and P_e(v)𝑃𝑒(𝑣). We perform these modifications one after the other. That is, if we start by modifying P_o(v)𝑃𝑜(𝑣), then we continue by modifying P_e(v)𝑃𝑒(𝑣), next with modifying P_o(v)𝑃𝑜(𝑣), and so on. Each time we modify P_o(v)𝑃𝑜(𝑣) or P_e(v)𝑃𝑒(𝑣), the colour of v is reduced by 1\bmod {k+1}1mod𝑘+1 and if we alternate between modifying P_o(v)𝑃𝑜(𝑣) and P_e(v)𝑃𝑒(𝑣), then the colour of v^*𝑣∗ stays the same.

Let v\in S_i\setminus S_i^*𝑣∈𝑆𝑖∖𝑆∗𝑖. We alternate between modifying P_o(v)𝑃𝑜(𝑣) and P_e(v)𝑃𝑒(𝑣) until c_{\ell '}(v)=i\bmod {k+1}𝑐ℓ′(𝑣)=𝑖mod𝑘+1. Then me move on to modifying another vertex v'\in S_{i'}\setminus S_{i'}^*𝑣′∈𝑆𝑖′∖𝑆∗𝑖′ (i is not necessarily different from i'𝑖′). If the last modification for v was on P_o(v)𝑃𝑜(𝑣), then we start with modifying P_e(v')𝑃𝑒(𝑣′) and once more we proceed by alternating between modification on P_e(v')𝑃𝑒(𝑣′) and P_o(v')𝑃𝑜(𝑣′) and vice versa.

It is clear that once the above process is finished, for each v\ne v^*𝑣≠𝑣∗ and i, we have v\in S_i𝑣∈𝑆𝑖 if and only if c_{\ell '}(v)=i\bmod {k+1}𝑐ℓ′(𝑣)=𝑖mod𝑘+1. Also, if the total number w of modifications done is even, then c_{\ell '}(v^*)=d\bmod {k+1}𝑐ℓ′(𝑣∗)=𝑑mod𝑘+1 and if w is odd, then c_{\ell '}(v^*)=d-1\bmod {k+1}𝑐ℓ′(𝑣∗)=𝑑−1mod𝑘+1. In any case, and since before the modifications we had S_{d-1}=\emptyset 𝑆𝑑−1=∅, the vertex-colouring c_{\ell '}𝑐ℓ′ of G is proper. Note that this remains true when turning all labels 0 into k+1𝑘+1, so that \ell 'ℓ′ is a proper (k+1)(𝑘+1)-labelling as desired. Recall also that the modifications are done on the edges of H and |E(H)|=|V(G)||𝐸(𝐻)|=|𝑉(𝐺)|. In the worst case, all the edges of H are labelled k+1𝑘+1 by \ell 'ℓ′ and thus \mathrm{mE}(G,\ell ')\le |E|+k|V|mE(𝐺,ℓ′)≤|𝐸|+𝑘|𝑉|. \square ◻

In most proof contexts making use of the walk-switching procedure described in the proof of Theorem 5.3, there are favourable situations in which the bound can be further reduced. The next result illustrates that fact.

Theorem 5.4
Let G=(V,E)𝐺=(𝑉,𝐸) be a nice connected graph with odd chromatic number k=\chi (G)𝑘=𝜒(𝐺) at least 3. Then, we have \mathrm{mE}(G) \le \mathrm{mE}_{k}(G)\le |E|+(k-1)|V|mE(𝐺)≤mE𝑘(𝐺)≤|𝐸|+(𝑘−1)|𝑉|.

Proof
Let H be the subgraph of G as it was defined in the proof of Theorem 5.3 and S_i𝑆𝑖 be the stable sets induced by a proper vertex-colouring c of G. Our goal is to reach, by \ell ℓ, the desired colours modulo k. Under that assumption, we can here assign labels 0, \dots , k-10,…,𝑘−1 instead. Once more, we start with \ell ℓ assigning label 1 to all edges of G. For each 1\le i\le k1≤𝑖≤𝑘, let S_i^*=\{v\in S_i \mid c_\ell (v)=i\bmod {k}\}𝑆∗𝑖={𝑣∈𝑆𝑖∣𝑐ℓ(𝑣)=𝑖mod𝑘}.

For each v\in S_i\setminus S_i^*𝑣∈𝑆𝑖∖𝑆∗𝑖, let P_v𝑃𝑣 be an odd-length closed walk of H that contains v. Again the existence of P_v𝑃𝑣 is guaranteed because of C. We proceed by modifying the labels of P_v𝑃𝑣: we alternate between adding 1 (modulo k) and removing 1 (modulo k) from the labels of consecutive edges of P_v𝑃𝑣. Since P_v𝑃𝑣 is a closed walk of odd length, exactly two consecutive edges (not necessarily distinct) will have to be altered in the same way (i.e., either they are both incremented by 1 or reduced by 1 modulo k). The modification is done so that these two edges have v as a common vertex. Let \ell 'ℓ′ be the modified \ell ℓ and let us assume that the labels of the edges of H that are adjacent to v are both incremented by 1 modulo k (symmetric arguments hold for the other case). Clearly c_{\ell '}(v)=c_{\ell }(v)+2\bmod {k}𝑐ℓ′(𝑣)=𝑐ℓ(𝑣)+2mod𝑘 and since k is odd, by repeating this process the desired value c_{\ell '}(v)=i\bmod {k}𝑐ℓ′(𝑣)=𝑖mod𝑘 is eventually reached.

Eventually turn all 0’s into k’s. In the worst case, \ell 'ℓ′ assigns label k on each one of the |V| edges of H. Thus \mathrm{mE}(G,\ell ')\le |E|+(k-1)|V|mE(𝐺,ℓ′)≤|𝐸|+(𝑘−1)|𝑉|. \square ◻

Bipartite Graphs
In this section, we prove Conjecture 5.2 for nice bipartite graphs. It turns out, however, that we are not aware of many bipartite graphs G for which \mathrm{mE}_3(G)mE3(𝐺) reaches exactly 2|E|. To go further, we both improve the upper bound in particular contexts, and exhibit constructions of connected bipartite graphs G with large value of \mathrm{mE}_2(G)mE2(𝐺), that are legitimate candidates for having \mathrm{mE}(G)mE(𝐺) large. Throughout this section, it is worth keeping in mind that determining \mathrm{mE}_2(G)mE2(𝐺) for a given bipartite graph G is {\mathcal {N}}{\mathcal {P}}-complete by Theorem 3.2.

Conjecture 5.2 for Nice Bipartite Graphs
Since, according to [14], nice bipartite graphs G verify the 1–2–3 Conjecture and some of them even verify \chi _\Sigma (G)=3𝜒Σ(𝐺)=3, they can be classified into three classes {\mathcal {B}}_11, {\mathcal {B}}_22 and {\mathcal {B}}_33 where, for each i \in \{1,2,3\}𝑖∈{1,2,3}, the set {\mathcal {B}}_i𝑖 contains exactly the connected bipartite graphs G with \chi _{\Sigma }(G)=i𝜒Σ(𝐺)=𝑖. Note that {\mathcal {B}}_11 contains the locally irregular bipartite graphs G, each one of which verifies \mathrm{mE}_1(G) = |E|mE1(𝐺)=|𝐸|. The graphs G of {\mathcal {B}}_22 admit proper 2-labellings, and, for these, by Observation 2.1 we have \mathrm{mE}_2(G) \le 2 |E|mE2(𝐺)≤2|𝐸|. So, in order to prove Conjecture 5.2 for nice bipartite graphs, we only need to focus on the graphs of {\mathcal {B}}_33.

Fig. 4
figure 4
Constructing an odd multi-cactus through several steps, from the red-green C_6𝐶6 (a). Red-green paths with length at least 5 congruent to 1 modulo 4 are being repeatedly attached onto green edges through steps (b–d). Solid edges are red edges. Wiggly edges are green edges (Color figure online)

Full size image

The graphs of {\mathcal {B}}_33 were characterized by Thomassen, Wu and Zhang in [20], who proved that these graphs are exactly the so-called odd multi-cacti, which are the graphs that can be obtained at any step of the following procedure (see Fig. 4 for an illustration):

Start from a cycle with length at least 6 congruent to 2 modulo 4 whose edges are properly coloured with red and green (i.e., no two adjacent edges have the same colour).

Consider a green edge uv and join u and v via a new path of length at least 5 congruent to 1 modulo 4 whose edges are properly coloured with red and green, where both the edge incident to u and the edge incident to v are red.

It is worth mentioning that odd multi-cacti are 2-degenerate and 2-connected. Also, they are bipartite, and both of their parts have odd size. It can also be noted that for every green edge uv, we have d(u)=d(v)𝑑(𝑢)=𝑑(𝑣), and no two green edges share ends. In [8], it was actually shown that any nice bipartite graph with a part of even size does not belong to {\mathcal {B}}_33:

Lemma 5.5
[8] Let G=(U,V,E)𝐺=(𝑈,𝑉,𝐸) be a connected bipartite graph. If |U| is even, then \chi _{\Sigma }(G) \le 2𝜒Σ(𝐺)≤2. Furthermore, G admits proper 2-labellings where all vertices of U have odd colour while all vertices of V have even colour.

We are now ready to prove our main result in this section.

Theorem 5.6
For every nice connected bipartite graph G, we have \mathrm{mE}(G) \le \mathrm{mE}_3(G) \le 2|E|mE(𝐺)≤mE3(𝐺)≤2|𝐸|.

Proof
Since the statement holds for G\in {\mathcal {B}}_1\cup {\mathcal {B}}_2𝐺∈1∪2, as explained earlier, we can assume G \in {\mathcal {B}}_3𝐺∈3, i.e., G is an odd multi-cactus with bipartition (U, V) (where both |U| and |V| are odd). If G is a cycle with length at least 6 congruent to 2 modulo 4, then the result follows from Theorem 2.6. Thus, we may assume that \Delta (G) \ge 3Δ(𝐺)≥3, i.e., some path attachments were made to build G starting from an original cycle.

Let us consider the last green edge xy to which a path P=(x,v_1,\ldots ,v_{4k},y)𝑃=(𝑥,𝑣1,…,𝑣4𝑘,𝑦) was attached in the construction of G, where k \ge 1𝑘≥1. Recall that d(x)=d(y) \ge 3𝑑(𝑥)=𝑑(𝑦)≥3 by construction. Consider G'=G-\{v_1,v_2,v_3\}𝐺′=𝐺−{𝑣1,𝑣2,𝑣3}. Assuming v_1,v_3 \in U𝑣1,𝑣3∈𝑈 and v_2 \in V𝑣2∈𝑉, the bipartition of G'𝐺′ is (U',V')=(U \setminus \{v_1,v_3\}, V \setminus \{v_2\})(𝑈′,𝑉′)=(𝑈∖{𝑣1,𝑣3},𝑉∖{𝑣2}). This means that |V'||𝑉′| is even. By Lemma 5.5, there is a proper 2-labelling \ell 'ℓ′ of G'𝐺′ such that all vertices of U'𝑈′ have even colour while all vertices of V'𝑉′ have odd colour. Since x \in V'𝑥∈𝑉′, the colour c_{\ell '}(x)𝑐ℓ′(𝑥) is odd, and thus at least 3 since d_{G'}(x) \ge 2𝑑𝐺′(𝑥)≥2. Similarly, v_4 \in V'𝑣4∈𝑉′, so the colour c_{\ell '}(v_4)𝑐ℓ′(𝑣4) is odd, and it is precisely 1 since d_{G'}(v_4)=1𝑑𝐺′(𝑣4)=1.

We now extend \ell 'ℓ′ to a proper 3-labelling \ell ℓ of G, by assigning label 1 to v_1v_2𝑣1𝑣2, label 2 to xv_1𝑥𝑣1 and v_3v_4𝑣3𝑣4, and label 3 to v_2v_3𝑣2𝑣3. This way:

c_\ell (x)𝑐ℓ(𝑥) and c_\ell (v_4)𝑐ℓ(𝑣4) remain odd;

c_\ell (v_1)=3<5\le c_\ell (x)𝑐ℓ(𝑣1)=3<5≤𝑐ℓ(𝑥);

c_\ell (v_3)=5>3=c_\ell (v_4)𝑐ℓ(𝑣3)=5>3=𝑐ℓ(𝑣4);

c_\ell (v_2)=4 \not \in \{c_\ell (v_1),c_\ell (v_3)\}=\{3,5\}𝑐ℓ(𝑣2)=4∉{𝑐ℓ(𝑣1),𝑐ℓ(𝑣3)}={3,5}.

For these reasons, it should be clear that \ell ℓ is indeed proper. We additionally note that label 3 is actually assigned only once by \ell ℓ, to v_2v_3𝑣2𝑣3. Furthermore, \ell ℓ assigns label 1 at least once, e.g. to v_1v_2𝑣1𝑣2. From this, it follows that \sigma (\ell ) \le 2 |E|𝜎(ℓ)≤2|𝐸|. \square ◻

As mentioned earlier, the only connected bipartite graph G verifying \mathrm{mE}(G)=2|E|mE(𝐺)=2|𝐸| we are aware of, is C_6𝐶6. Due to the small number of edges of C_6𝐶6, this case looks quite pathological. In particular, it is natural to wonder whether Theorem 5.6 can be improved in general, when excluding C_6𝐶6. We investigate this concern in what follows.

Lower Bounds for Some Bipartite Graphs
Our main result in this section is that, in general, for a nice connected bipartite graph G it is not possible to lower \mathrm{mE}_2(G)mE2(𝐺) below the \frac{3}{2}|E|32|𝐸| barrier. Put differently, there exist connected bipartite graphs for which label 2 must be assigned to at least half of the edges by any proper 2-labelling. This is a consequence of the following more general result, which is of independent interest.

Theorem 5.7
Let G be any nice connected graph, and let H be a graph obtained from G by subdividing every edge e exactly n_e𝑛𝑒 times, where n_e=4k_e+3𝑛𝑒=4𝑘𝑒+3 for some k_e \ge 0𝑘𝑒≥0. Then \chi _{\Sigma }(H)=2𝜒Σ(𝐻)=2. Furthermore, \mathrm{mE}_2(H)=\frac{3}{2}|E(H)|mE2(𝐻)=32|𝐸(𝐻)|.

Proof
For every edge e=uv𝑒=𝑢𝑣 of G, let us denote by P_e𝑃𝑒 the corresponding path of length 4(k_e+1)4(𝑘𝑒+1) in H. Note that H has many adjacent 2-vertices, so \chi _\Sigma (H)>1𝜒Σ(𝐻)>1. Also, H is bipartite with bipartition (X, Y), where w.l.o.g. X contains all vertices of G. Now let \ell ℓ be the 2-labelling of H obtained by considering every edge e=uv𝑒=𝑢𝑣 of G, and assigning labels 2,1,1,2,2,1,1,\ldots ,1,1,22,1,1,2,2,1,1,…,1,1,2 to the consecutive edges of P_e𝑃𝑒 as going from u to v. Then \ell ℓ is proper since all vertices in X have even colour, while all vertices in Y have odd colour. The last part of the claim follows from the fact that for every edge e of G, in any labelling \ell ℓ of H every two edges of P_e𝑃𝑒 being at distance 2 apart must receive distinct labels (recall Observation 2.3). Due to the length of P_e𝑃𝑒, this implies that the sum of the labels assigned to its edges is at least \frac{3}{2}|E(P_e)|32|𝐸(𝑃𝑒)|. Thus, \sigma (\ell ) \ge \frac{3}{2}|E(H)|𝜎(ℓ)≥32|𝐸(𝐻)|. \square ◻

Corollary 5.8
There exist infinitely many connected bipartite graphs G \in {\mathcal {B}}_2𝐺∈2 with various structure verifying \mathrm{mE}_2(G) =\frac{3}{2}|E|mE2(𝐺)=32|𝐸|. This remains true for trees.

Proof
This follows from Theorem 5.7. The last part of the statement is because any subdivision of a tree is clearly a tree itself. \square ◻

In particular through experimentation via computer programs, we also managed to come up with the following construction yielding connected bipartite graphs G for which \mathrm{mE}_2(G)mE2(𝐺) slightly exceeds \frac{3}{2}|E|32|𝐸|. These graphs can be constructed as follows. Let x,y \ge 4𝑥,𝑦≥4 be any two integers congruent to 0 modulo 4. The graph H(x, y) is the graph obtained by starting from the disjoint union of a cycle C with length x and a cycle C'𝐶′ with length y, by adding an edge joining any vertex of C and any vertex of C'𝐶′. Note that H(x, y) has odd size.

Theorem 5.9
Let x, y be any two integers congruent to 0 modulo 4, with x,y \ge 4𝑥,𝑦≥4. Then, we have \mathrm{mE}_2(H(x,y))=\left\lceil \frac{3}{2} |E(H(x,y))|\right\rceil mE2(𝐻(𝑥,𝑦))=⌈32|𝐸(𝐻(𝑥,𝑦))|⌉.

Proof
We begin by showing the following claim:

Claim 5.10
Let G be obtained from a cycle C with length x at least 4 congruent to 0 modulo 4 by adding an edge from any vertex v of C to a new pending vertex u. Then, by any proper 2-labelling \ell ℓ of G, exactly half of the edges of G must be labelled 2. Furthermore, either:

\ell (vu)=1ℓ(𝑣𝑢)=1 and c_\ell (v)=5𝑐ℓ(𝑣)=5, or

\ell (vu)=2ℓ(𝑣𝑢)=2 and c_\ell (v)𝑐ℓ(𝑣) can be either of 4, 5, 6.

Proof of the claim. Let us denote by v_0,\ldots ,v_{x-1}𝑣0,…,𝑣𝑥−1 the successive vertices of C, where v_0=v𝑣0=𝑣. Because d(v_i)=2𝑑(𝑣𝑖)=2 for every i \in \{1,\ldots ,x-1\}𝑖∈{1,…,𝑥−1}, recall, according to Observation 2.3, that, by any proper 2-labelling \ell ℓ of G, we must have \ell (v_0v_1) \ne \ell (v_2v_3) \ne \ell (v_4v_5) \ne \dots \ne \ell (v_{x-2}v_{x-1})ℓ(𝑣0𝑣1)≠ℓ(𝑣2𝑣3)≠ℓ(𝑣4𝑣5)≠⋯≠ℓ(𝑣𝑥−2𝑣𝑥−1) (and thus, by the length of x, we have \ell (v_0v_1) \ne \ell (v_{x-2}v_{x-1})ℓ(𝑣0𝑣1)≠ℓ(𝑣𝑥−2𝑣𝑥−1)), and similarly \ell (v_1v_2) \ne \ell (v_3v_4) \ne \ell (v_5v_6) \ne \dots \ne \ell (v_{x-1}v_0)ℓ(𝑣1𝑣2)≠ℓ(𝑣3𝑣4)≠ℓ(𝑣5𝑣6)≠⋯≠ℓ(𝑣𝑥−1𝑣0) (and thus \ell (v_1v_2) \ne \ell (v_{x-1}v_0)ℓ(𝑣1𝑣2)≠ℓ(𝑣𝑥−1𝑣0)). So there are essentially three ways for \ell ℓ to be designed:

If \ell (v_0v_1)=\ell (v_0v_{x-1})=1ℓ(𝑣0𝑣1)=ℓ(𝑣0𝑣𝑥−1)=1, then \ell (v_1v_2)=\ell (v_{x-1}v_{x-2})=2ℓ(𝑣1𝑣2)=ℓ(𝑣𝑥−1𝑣𝑥−2)=2, and c_\ell (v_1)=c_\ell (v_{x-1})=3𝑐ℓ(𝑣1)=𝑐ℓ(𝑣𝑥−1)=3. In that case, so that c_\ell (v_0) \ne 3𝑐ℓ(𝑣0)≠3, we must have \ell (v_0u)=2ℓ(𝑣0𝑢)=2 in which case c_\ell (v_0)=4𝑐ℓ(𝑣0)=4.

If \ell (v_0v_1)=\ell (v_0v_{x-1})=2ℓ(𝑣0𝑣1)=ℓ(𝑣0𝑣𝑥−1)=2, then \ell (v_1v_2)=\ell (v_{x-1}v_{x-2})=1, and c_\ell (v_1)=c_\ell (v_{x-1})=3. In that case, we can either have \ell (v_0u)=1 in which case c_\ell (v_0)=5, or \ell (v_0u)=2 in which case c_\ell (v_0)=6.

If \ell (v_0v_1)=1 and \ell (v_0v_{x-1})=2, then \ell (v_1v_2)=1 and \ell (v_{x-1}v_{x-2})=2, and c_\ell (v_1)=2 and c_\ell (v_{x-1})=4. In that case, so that c_\ell (v_0) \ne 4, we must have \ell (v_0u)=2 in which case c_\ell (v_0)=5.

This concludes the proof. \diamond

Let G=H(x,y), and \ell be a proper 2-labelling of G. Let H_1,H_2 be the two connected components resulting from the removal of the unique bridge uv of G, and G_1 and G_2 be the subgraphs H_1+uv and H_2+uv, respectively, of G (where, say, G_1 contains the cycle C_1 with length x, and G_2 contains the cycle C_2 with length y). Applying Claim 5.10 onto G_1 and G_2 and the restriction of \ell to these graphs, we deduce that we cannot have \ell (uv)=1 as otherwise we would have c_\ell (u)=c_\ell (v)=5, a contradiction. So we must have \ell (uv)=2. Furthermore, still by Claim 5.10, exactly half of the edges of C_1 must be labelled 2 by \ell , and similarly exactly half of the edges of C_2 must be labelled 2. It yields that . Note that \ell does exist, since G is not an odd multi-cactus (due to the presence of the bridge uv). In particular, the edges of C_1 and C_2 can be 2-labelled in such a way that c_\ell (u) and c_\ell (v) are two distinct values in \{4,5,6\}. \square

Improved Upper Bounds
As shown previously, it seems that, in general, for nice connected bipartite graphs the bound in Theorem 5.6 might not be optimal. Following our investigations in the previous section, we believe that perhaps the following could be the right direction to investigate:

Conjecture 5.11
There is an absolute constant c \ge 1 such that, for every nice connected bipartite graph G \in {\mathcal {B}}_2, we have \mathrm{mE}_2(G) \le \frac{3}{2}|E|+c.

It is worth pointing out that a proper 2-labelling \ell of a graph G where \sigma (\ell ) is about \frac{3}{2} |E| is actually a 2-labelling where the number of assigned 1’s is about the same as the number of assigned 2’s. Thus, Conjecture 5.11 can be sort of related to the notion of equitable proper labellings of graphs, which were introduced in [3] and are proper labellings where, for every two assigned labels i, j, the number of edges assigned label i differs by at most 1 from the number of edges assigned label j. Regarding Conjecture 5.11, it can be observed that \mathrm{mE}_2(G) \le \frac{3}{2} |E|+1 holds for every graph G admitting an equitable proper 2-labelling. The additive c term is naturally reduced from 1 to 0 when G has even size. Among other results, the authors in [3] proved that nice bipartite complete graphs and forests admit equitable proper 2-labellings.

Towards Conjecture 5.11, in this section our aim is to improve Theorem 5.6 further for the bipartite graphs of {\mathcal {B}}_2. First off, we point out that the theoretical upper bound in Theorem 5.6 cannot be reached for a bipartite graph in {\mathcal {B}}_2.

Observation 5.12
For every graph G \in {\mathcal {B}}_2, we have \mathrm{mE}_2(G)<2|E|

Proof
By definition of {\mathcal {B}}_1, {\mathcal {B}}_2 and {\mathcal {B}}_3, since G \not \in {\mathcal {B}}_1 the graph G is not locally irregular. Now, if \mathrm{mE}_2(G)=2 |E|, then the only proper 2-labelling of G is the one assigning label 2 to all edges. For such a labelling to be proper, G must have no two adjacent vertices having the same degree. So G must be locally irregular, a contradiction. \square

In particular contexts, better bounds can be obtained by adapting the arguments from the proof of Theorem 5.3 in a particular way.

Theorem 5.13
Let G=(U,V,E) be a nice connected bipartite graph where |U| is even. Then, we have \mathrm{mE}_2(G) \le |E| + |V| -1.

Proof
Let us denote by U_e (U_o, respectively) the set of vertices of U having even (odd, respectively) degree in G, and similarly by V_e (V_o, respectively) the set of vertices of V having even (odd, respectively) degree in G. Note that either |U_e| and |V_o| must have the same parity, or |U_o| and |V_e| must have the same parity. This is because, otherwise, since |U| is even and |U|=|U_e|+|U_o|, the sizes |U_e| and |U_o| must have the same parity, we would get that also |V_e| and |V_o| have the same parity. From this, we would deduce that \sum _{u \in U} d(u) \not \equiv \sum _{v \in V} d(v) \bmod 2, which is not possible.

Without loss of generality, we may assume that U_e and V_o have the same parity, thus that |U_e|+|V_o| is even. Our aim now, is to design a 2-labelling of G where all vertices in U get odd colour while all vertices in V get even colour. Such a labelling will obviously be proper. To that aim, we proceed as follows. Let us start with assigning label 1 to all edges of G. This way, at this point the colour of every vertex is exactly its degree; so all vertices in U_o and V_e verify the desired colour property, while all vertices in U_e and V_o do not. To fix these vertices, we consider any spanning tree T of G. We now repeatedly apply the following fixing procedure: we consider any two vertices x and y of U_e \cup V_o that remain to be fixed, and flip (i.e., turn the 1’s into 2’s, and vice versa) the labels of all edges on the unique path in T from x to y. This way, note that only the colours of x and y are altered modulo 2. Since |U_e|+|V_o| is even, there are an even number of vertices to fix, and, by flipping labels along paths of T, we can fix the colour of all vertices in U_e \cup V_o. This results in a 2-labelling \ell of G, with the desired properties, which is thus proper.

Note now that \ell assigns label 2 only to a subset of the edges of T. Since T has |V(G)|-1 edges, the result follows. \square

Note for instance that, for a graph G, we have |E|+|V|-1 \le \frac{3}{2} |E| as soon as |E| \ge 2 |V|-2. As notable consequences, this implies that a connected bipartite graph G \in {\mathcal {B}}_2 with a part of even size verifies \mathrm{mE}_2(G) \le \frac{3}{2} |E| as soon as G has minimum degree at least 4, or more generally when the graph is dense enough.

The same result also holds when G is bipartite and cubic (in which case \chi _\Sigma (G)=2, by definition of odd multi-cacti), from a more general argument:

Observation 5.14
Let G be a connected regular graph with \chi _\Sigma (G)=2. Then, we have \mathrm{mE}(G) \le \mathrm{mE}_2(G) \le \frac{3}{2} |E|.

Proof
Let \ell be a proper 2-labelling of G. Since G is regular, the edges labelled 1 by \ell , and similarly the edges labelled 2, must induce a locally irregular subgraph of G. Then the 2-labelling \ell ' of G obtained by turning all 1’s into 2’s, and vice versa, is also proper. Now there is one of \ell and \ell ' that assigns label 2 to at most half of the edges, and the conclusion follows. \square

Slight modifications of the proof of Theorem 5.13 also yield the desired result for certain bipartite graphs that are Hamiltonian.

Observation 5.15
Let G=(U,V,E) be a Hamiltonian bipartite graph where |U| is even. Then, we have \mathrm{mE}(G) \le \mathrm{mE}_2(G) \le \frac{3}{2}|E|.

Proof
Just mimic the proof of Theorem 5.13, but repair pairs of defective vertices of G along a Hamiltonian cycle C=(v_0, \dots , v_{n-1},v_0), matching each of them, say, with the next defective vertex in the ordering of C. If this fixing process turns more than half of the edges to 2, then, instead, repair pairs of vertices around C matching each of them with the previous defective vertex in the ordering (which is equivalent to flipping the labels along C). \square

Trees
Our main result here is that for every nice tree T, we have \mathrm{mE}_2(T) \le \frac{3}{2} |E|, which cannot be lowered in general, due to Corollary 5.8. Still, it confirms Conjecture 5.11 for nice trees. Let us recall that it was proved in [3] that nice forests admit equitable proper 2-labelling. This directly implies our result below for trees with even size, while it does not for trees with odd size (as a 2-labelling where the number of assigned 2’s is one more than the number of assigned 1’s does not fulfil our claim).

Theorem 5.16
For every nice tree T, we have \mathrm{mE}_2(T) \le \frac{3}{2} |E|.

Proof
The proof is by induction on the number of branching vertices of T, where by branching vertex we mean any vertex of degree at least 3. The base case is when T has no branching vertex, i.e., when \Delta (T) \le 2. In that case, T is a path. Let us here consider the 2-labelling \ell of T obtained by assigning labels 1,1,2,2,1,1,2,2,\ldots as traversing the edges from an end-vertex to the second one. It is easy to see that \ell is proper. Indeed, recall first that degree-1 vertices cannot be involved in a colour conflict. Furthermore, for two adjacent 2-vertices u, v to have the same colour, the edge incident to u different from uv must be assigned the same label as the edge incident to v different from uv (recall Observation 2.3). Since, by \ell , no two edges at distance 2 get assigned the same label, this implies that no colour conflict arises. Lastly, since 1’s and 2’s are assigned by pairs starting from a pair of 1’s, it should be clear that \ell assigns more 1’s than 2’s. Thus, \mathrm{mE}_2(T) \le \sigma (\ell ) \le \frac{3}{2} |E|.

We now focus on the general case. That is, we now assume that T has branching vertices, and every nice tree with fewer branching vertices verifies the claim. Let us root T at some degree-1 vertex r. In the usual way, this defines a (virtual) orientation of T, where every vertex v of T but r has a unique parent (unique neighbour of v that is closer to r), all vertices v but the leaves have children (neighbours of v that are farther from r), and more generally all vertices v but the leaves have descendants (vertices where their unique shortest path to r passes through v). By a deepest branching vertex of T, we refer to a branching vertex whose all descendants are not branching vertices, i.e., they have degree at most 2.

Let us consider a deepest branching vertex v of T. Then v is adjacent to its parent w and there are k \ge 2 hanging paths P_1,\ldots ,P_k attached to v. Note that some of the P_i’s may be of length 1 in case some of the children of T are leaves. Let T' be the tree obtained from T by removing the edges of P_1,\ldots ,P_k (i.e., all their vertices different from v). If T' is just an edge, then T is actually a subdivided star. If T is a star with at least two leaves, then it is locally irregular and we can assign label 1 to all edges. Otherwise, when T is a subdivided star different from a star, then, without loss of generality, P_1 has length at least 2. We then change the root r to be the degree-1 vertex of P_1 so that, now, we can assume that T' indeed is not an edge.

Thus, we can assume that T' is not just an edge. Since T' has less branching vertices than T, by the induction hypothesis there is a proper 2-labelling \ell ' of T' verifying \mathrm{mE}(T',\ell ') \le \frac{3}{2} |E(T')|. We wish to extend \ell ' to the edges of P_1,\ldots ,P_k, thus to a 2-labelling \ell of T. To that aim, we consider the following two extension schemes for extending \ell ' to the edges of one P_x of the P_i’s:

1-extension: We assign labels 1,1,2,2,1,1,2,2,\ldots to the consecutive edges of P_x, as they are traversed going from v to the degree-1 vertex of P_x.

2-extension: We assign labels 2,1,1,2,2,1,1,2,2,\ldots to the consecutive edges of P_x, as they are traversed going from v to the degree-1 vertex of P_x.

Note that whenever P_x has length not congruent to 1 modulo 4, the number of assigned 1’s is always at least the number of assigned 2’s by both 1-extensions and 2-extensions. More precisely, if P_x has length congruent to 1 modulo 4, then the number of 2’s by a 2-extension is one more than the number of 1’s, and vice versa by a 1-extension. Recall also that 1-vertices cannot be involved in colour conflicts. Furthermore, for two adjacent 2-vertices x, y to have the same colour, the edge incident to x different from xy must be labelled the same way as the edge incident to y different from xy. From this, we deduce that when extending \ell ' to the edges of the P_i’s via 1-extensions and 2-extensions, we must just make sure that (1) the colour of v does not get equal to the colour of its parent w, and (2) the colour of v does not get equal to the colour of one of its children.

We note that the second type of colour conflict cannot actually occur. Indeed, note that by a 1-extension of P_x, the neighbour of v in P_x, unless it has degree 1 (in which case it cannot be in conflict with v), gets colour 2, while, by a 2-extension, it gets colour 3. Since v is a branching vertex with k \ge 2 children, thus of degree k+1, when performing 1-extensions and 2-extensions to the P_i’s, vertex v gets colour precisely k+1 \ge 3 if only 1-extensions are performed, and colour at least k+2 \ge 4 if at least one 2-extension is performed.

Thus, we just need to find a combination of 1-extensions and 2-extensions to the P_i’s so that no colour conflict involving v and its parent w arises. Also, we need to make sure that the number of assigned 1’s is at least the number of assigned 2’s. If one of the P_i’s has length not congruent to 1 modulo 4, then we choose it as P_1. Otherwise, if they all have length congruent to 1 modulo 4, then we choose any P_i as P_1.

We first perform 1-extensions only, i.e., to all P_i’s. If the colour of v gets different from that of w, then we are done. Otherwise, when performing a 2-extension to P_1 and a 1-extension to all other P_i’s, the colour of v gets bigger, thus getting different from the colour of w. This results in the desired extension \ell to all edges of T.

Let us conclude by noting that the number of 1’s assigned by \ell is at least the number of assigned 2’s. This is because \mathrm{mE}_2(T',\ell ') \le \frac{3}{2} |E(T')|, and, as mentioned earlier, by 1-extensions to the P_i’s the number of assigned 1’s is at least the number of assigned 2’s. By 2-extensions, this is true when performed on paths of length not congruent to 1 modulo 4. By our choice of P_1, if P_1 has length congruent to 1 modulo 4, then so do all P_i’s. In that precise case, the number of 2’s assigned to the edges of P_1 is one bigger than the number of assigned 1’s, but this is compensated by the fact that, in P_2, the number of assigned 1’s is one bigger than the number of assigned 2’s. Thus we additionally have \sigma (\ell ) \le \frac{3}{2} |E(T)|, as desired. \square

Conclusion
In this work, we have studied proper labellings of graphs with the additional requirement that we want the sum of assigned labels to be as small as possible. Our interests were guided by both straight questions, such as determining \mathrm{mE}(G) for a given graph G, as well as more fundamental ones, such as the difference, in general, between \mathrm{mE}_k(G) and \mathrm{mE}_{k'}(G) for k \ne k'. We have also investigated the complexity of finding “optimal” labellings.

We quickly ran into Conjecture 5.2, which seems rather natural when knowing that the 1–2–3 Conjecture seems to be a more than plausible conjecture and that graphs, in general, seem to need only a few 3’s to design proper 3-labellings. We believe it would be interesting to further study this point in the future, as Conjecture 5.2 stands as the main open problem regarding our investigations in the current paper. It would also be interesting to progress towards its refinement for bipartite graphs, Conjecture 5.11. A way to progress towards answering both questions could be to exhibit families of connected (possibly bipartite) graphs G for which \mathrm{mE}(G) is “large”, i.e. larger than the quantity in Theorem 5.9.

Regarding our algorithmic results in Sect. 3, we note that they all deal, for a given graph G, with the parameter \mathrm{mE}_k(G) (for some k), and not with the more general parameter \mathrm{mE}(G). This is mainly because, as indicated by Theorem 4.5, in general there is no absolute constant that bounds, for all graphs G, the smallest k such that \mathrm{mE}(G)=\mathrm{mE}_k(G). In particular, even for a graph G of bounded treewidth, although we can determine \mathrm{mE}_k(G) in polynomial time for any k (due to our algorithm in Theorem 3.5), running multiple iterations of our algorithm to determine \mathrm{mE}(G) is not feasible in polynomial time. Thus, we leave the following problem open even for the seemingly simplest case:

