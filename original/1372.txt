Video game development has its own specific nature and problems that differentiate it from general software development. We investigated the influence of these factors in a survey and found a distinct lack of systematic management of technical debt.
Video game development focuses on delivering gaming software that will entertain its users. The goal of making each player’s experience enjoyable and the necessary collaboration between technical and creative specialists make game development a distinct type of software development.1 In this work, our aim was to investigate technical debt management in video game development and how it is shaped by the specific nature of the process.

Our research was based on two steps: a questionnaire comparing the various influences on technical debt in gaming and nongaming groups as well as interviews with game development specialists. Our investigation revealed that, while awareness of the issue of technical debt was high, the systematic management of technical debt, especially paying off the accumulated debt, is a rare practice in the video game industry.

Background
The notion of technical debt denotes a situation in which a particular construct (architectural, design, code, and so on) is beneficial in the short term but makes future changes more expensive or even unworkable.2 The common sources of technical debt have been studied and include bad architectural choices, time pressure, inadequate testing, and requirements shortfall.3

Existing studies indicate the following specific characteristics of video game development:

the creative nature of such projects4

the ever-changing, perpetually emerging requirements that affect gaming projects more often than in nongaming settings,1,5 which then result in constant changes and additions to a game’s features6

an interdisciplinary character, meaning that game development requires the collaboration of specialists in a wide range of diverse disciplines, such as graphic artists, storytellers, and software developers1

the limited application of test automation due to the difficulties and costs of implementing and maintaining such tests.7

There are currently no mature process models for game development.8 Although the use of Agile is widespread in the industry,1 it is often misapplied in gaming projects.8

Research Method
We based our research on a two-step survey. First, we gathered information using a questionnaire to obtain data from two groups: 12 participants from the video game industry and a control group consisting of 14 individuals representing general software development.

The interviews show that, despite technical debt awareness among game developers, systematic approaches are not present at any stage of the development project.
The topics covered by the questionnaire included aspects and factors identified in the related research as specific for game development.1,6,9 Participants were asked whether they were familiar with the concept of technical debt, if particular factors occurred in their projects (in most cases, on a scale of 1–5), and how often this caused technical debt (on a scale of 1–5).

A factor was assumed as specific for the gaming industry if the difference between the median answer from each group was greater than 10% of the range of assessments. We also filtered out topics on which opinions were strongly divided by excluding factors in which the standard deviation of the answers was bigger than 20% of the range of assessments.

Subsequently, the selected topics were included in the interview questions. We held six semistructured interviews with game development practitioners. We transcribed the interviews and coded them independently. Then, we discussed the coding and iteratively corrected it until we attained unanimity using the negotiated agreement approach.10

Participants
Participants for the study were found by using our private network. We shared the questionnaire on social media. The third author also sent 20 private messages to his personal contacts from the gaming industry to encourage participation from a wider range of specialties and companies. Interviewees were recruited from questionnaire participants who had agreed to a follow-up interview. Figure 1 contains information about the survey participants.

Figure 1. - The survey participants by (a) age, (b) years of professional experience in software development, (c) gender, (d) role, (e) education level, and (f) company size (number of employees).
Figure 1.
The survey participants by (a) age, (b) years of professional experience in software development, (c) gender, (d) role, (e) education level, and (f) company size (number of employees).

Show All

Questionnaire Results
Out of our 12 questionnaire participants from the video game industry, only one was not familiar with the notion of technical debt. This means that awareness of technical debt was significantly higher compared to the control group, in which five out of 14 people did not know what technical debt was. Additionally, all of our six interviewees knew and had reflected on the problem of technical debt and at least attempted to include it within the scope of their activities. The findings from our questionnaire were as follows:

Staff rotation: The rate of staff rotation was lower in game development, though this had more impact on technical debt.

Learning new technologies: Game development participants stated that they needed to learn new technologies less often.

Testing: This focuses mainly on manual testing. The declared average coverage of unit tests was only 15% (compared to 60% in the control group). However, the time planned for testing was less often reduced.

Embracing change: In game development, more emphasis was placed on creativity than technical consistency. Functional requirements were reported to change more frequently.

Planning: An unrealistic initial project scope, unattainable deadlines, and budget overruns were more frequently observed by the gaming group.

Project failure: Despite all of these problems, the questionnaire showed that projects in game development were less frequently unprofitable.

Interview Results
The interviews show that, despite technical debt awareness among game developers, systematic approaches are not present at any stage of the development project. If any, debt management activities are undertaken by individual developers, who add debt items to the project backlog and perform refactoring. One of our interviewees admitted that he does “refactoring in secret because he cannot convince his superiors that paying off the debt is important.” This is a result of a specific development approach and motivation structure that generally does not encourage systematic technical debt treatment.

Although the video game industry has existed for more than four decades, there is little literature that addresses the issues specific to the development of video games.
The Causes of Technical Debt
Our interviews demonstrated that large amounts of technical debt are accrued during video game development. We studied the factors that contribute to this situation.

The Drive for Entertainment
The primary driver of any video game development is to deliver entertainment to the players. This is an intangible quality, as one cannot a priori establish which set of features will make a game enjoyable. It is also impossible to determine the game’s “entertainment factor” without human involvement.

As requirements cannot be established in advance, the scope of a game’s features is discovered by rapid prototyping and evaluation. In contrast to other software domains, new features, often conflicting with earlier developed ones, may emerge at any time. One of our participants illustrated this in the following way: “You may start a game that features knights fighting goblins, and then you realize that hitting lightning orbs is its best feature. Ultimately, you end up developing a soccer game in a fantasy setting.”

Most of these prototypes are abandoned and not included in the final game product. Therefore, developers do not put too much effort into their quality. As a result, feature prototypes contain a great amount of potential technical debt,2 which turns into actual technical debt when the prototype features are developed further or a new feature is created on the basis of them. The latter is a potentially good moment to pay off the debt before it accumulates.

One of our interviewees, a manager, indicated that the moment of planning new features is exactly the moment when their team considers repaying technical debt. However, refactoring was performed only when the amount of technical debt severely hindered the development of new features.

The Specific Nature of Clients’ Expectations
Video game fans are rather insensitive to the quality of the software they use as long as it does not disrupt their playing experience. As one of our participants stated, “If Excel made even the smallest of errors during calculations, it would be a disaster. If 1% of the hits made using a sword are not registered, you will not feel much of a difference.”

The industry has many tools to predict its future sales or even gain profit before the game’s official release—through preorders, early access games, and users’ wish lists in digital distribution platforms. This makes it possible to deliberately take on additional technical debt, knowing that the game will be profitable anyway.

Testing
Game development relies heavily on manual tests. This differs from the common practice of test automation in general software development. It occurs since automatic testing cannot assess the “fun factor” of games, and developing short-lived tests for prototype features would be a superfluous expense. Still, the interviewees confirmed that there are many aspects that could be automatically tested (such as networking functionality), and these tests are neglected due to the overall approach that dominates in the industry.

Planning
Because of the ever-changing scope of projects, game development endeavors are extremely difficult to plan, organize, and estimate. This increases the time pressure exerted on the developers, which has a domino effect on the amount of technical debt.

Staff
A game developer often works as a lone warrior. Due to constant pressure to deliver more features, knowledge sharing and writing documentation are not common practices. This leads to the well-known syndrome of knowledge vaporization, making gaming projects even more dependent on a single developer. This creates a cycle in which technical debt (notably documentation debt), fueled by a developer’s decision to leave the team, results in the creation of even more debt by other developers.

Lack of Dedicated Methodologies for Game Development
All our participants agreed that “nobody actually knows how to make games properly.” Although the video game industry has existed for more than four decades, there is little literature that addresses the issues specific to the development of video games.4

Awakening of Dormant Technical Debt
The gaming industry has recently seen a surge in popularity of older games. These old pieces of software suddenly had to be revamped and released on modern platforms—known as remasters. One of our interviewees participated in this kind of project and reported that these old games often lack key artifacts. In one case, his company even had to develop its own compiler to run the legacy code.

Factors That Neutralize Part of the Debt
Stable Technologies
Game developers are usually more experienced in the tools that they use simply because those tools rarely change. The dominant programming language is still C++, and the prevalent game engines (Unreal Engine and Unity) are a standard in the industry. This makes game developers less susceptible to acquiring inadvertent debt due to their lack of knowledge.

The Time for Testing Is Rarely Reduced
Although most testing is manual, the importance of tests is recognized by the industry. Despite the limited use of automatic testing, specialized teams of testers make a significant contribution toward software quality, eliminating some of the technical debt taken on earlier.

Discussion and Limitations
So far, no research on technical debt in video game development has been performed. Thus, our findings can only be compared to general findings about technical debt. The sources of technical debt in game development are not different from those in general software development.3 However, the primary factor behind the occurrence of technical debt in game development is the ever-changing and emergent scope of features1 discovered through prototyping. This strengthens the influence of other common technical debt causes, like unstable requirement instability, insufficient test automation, and time pressure.3

The consequences of technical debt differ significantly depending on the game’s type. Single-player experiences, when additional expansions packs are not in development, require only occasional fixes and patches. Unless plans to create a “remastered edition” are made, the accumulated technical debt has only a limited influence on the current maintenance. However, multiplayer online games, which are sold as a service and have to constantly provide new experiences to players, can be impacted more severely by technical debt.

Our research confirms that, in game development, technical debt usually accumulates as long as it does not severely hinder further feature development. The amount of debt will vary depending on how strongly it may hamper achieving the business goals connected with the given game.

Most of this debt is taken on deliberately, and there is simply little business motivation to prevent or repay it, especially in the case of small, single-player games. This demonstrates that research on business-driven technical debt prioritization11 is critical.

Our research, as with any empirical study, has its limitations. One of them is the rather small number of study participants. Although we endeavored to make this group as diverse as possible, research on the topic will need to be expanded in the future. Furthermore, since the data were acquired through a reflective survey, participants may have relayed information blurred by their flawed memory of past events.

Technical debt is taken on intensively throughout game development, largely because rapid feature prototyping and validation through manual testing are the common requirements engineering approach. Features may emerge, change, or even vanish during development. Short-lived “candidate” features, combined with a satisficing development approach and clients’ insensitivity to small defects, sporadically deliver enough motivation to pay off technical debt.

In practice, technical excellence usually gives way to other concerns. It is an important challenge for researchers and practitioners to find ways in which technical debt management could be aligned with organizations’ business goals.