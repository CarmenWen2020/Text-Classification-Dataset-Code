Software design is about making decisions. The quality of design decisions influences the quality of software design. This article describes nine decision-making principles to give software designers a systematic approach for decision making.
Making decisions, particularly where the decision space is complex, is hard. Few people are innately good at it, and learning how to make good decisions often takes a lifetime of hard-won experience from making mistakes and suboptimal decisions. In this article, we propose a systematic approach to software design decision making (DM). We break DM down into nine principles that can be taught, learned, and practiced. Each principle addresses one DM aspect that focuses on a specific type of information used in making and evaluating decisions.

From the Editor
Our own decisions are perfectly rational, but this article has great advice for our teammates, who are not as lucky. Still, it might not hurt us to glance at it first, you know, so we can help them be more rational.—George Fairbanks

DM is a process to determine a course of action; the resulting judgment could be reached by a jolt of intuition, conscious reasoning, or something in between. Good DM is hard to teach and—as evidenced by the ever-growing mountains of technical debt and failures in software—difficult to achieve in practice.

One reason for these challenges is that software is created in greatly varying environments. There are differences in the types of requirements, organizations, stakeholders, technologies, quality requirements, contexts, time and budget pressures, and so on. Facing a plethora of information that includes unknowns (and, often, unknown unknowns), designers must make decisions, even in cases where their experience and knowledge do not offer obvious solutions. The process of DM is, therefore, often unsystematic, and designers are left to make decisions solely based on their experience, intuition, or gut feeling.

Imagine that we give a set of requirements to two developers and ask them to create a system. Is it likely that they will produce identical solutions? Almost certainly not. Will one of the solutions be better than the other? Quite possibly. The decisions made and resulting solutions created by these two developers may be different, and those variations may have important ramifications for system quality. Both developers likely believe that they made good choices and would champion their own design. Should we believe them?

Our judgments are often subject to cognitive biases1 and limitations (or bounded rationality2). As humans, our brain’s processing is not always logical; we are subject to influences, such as anchoring bias, attention bias, sunk-cost fallacy, satisficing, confirmation bias, and the Dunning–Kruger effect. These biases affect the quality of our decisions, often in negative ways. We need ways to train ourselves to think logically and systematically when making decisions to counter biases.

Software Design DM Principles
How can we tell if a design decision is well made? Rather than trying to answer this question directly, we approach this problem by examining decision considerations and reasoning. We outline nine DM principles (the “9Ps”) and describe what they mean, how they work, and what we can do to check them. Designers can learn the principles and ask each other reflective questions (RQs) to check their design reasoning. There is evidence to suggest that asking RQs during design helps designers improve design dialogue and reason better.3,4

P1: Use Facts
Facts and evidence are the foundations of logical decisions. Incorrect information and unknown facts (or incomplete truths) lead to invalid conclusions. Hearsay can play a part in requirement gathering and technology design. Business analysts may guess instead of verifying user requirements; designers may hear praise for a new technology instead of testing it themselves.

For example, a colleague of ours chose a NoSQL database in a key portion of the reservations system he was designing because he felt it was a good fit; he had not done any prototyping or analysis but made this decision based on hearsay, experience, and gut feelings. Was this the right choice? Time will tell. To check facts, he could have asked, “What evidence supports that NoSQL would satisfy the lifecycle of the system?”

There are simple generic RQs to ask: “Do we have all of the facts?” “What evidence do we have to support this information?” “Are the information sources trustworthy?” When we cannot have all of the facts, we make assumptions.

P2: Check Assumptions
In the absence of facts, we make assumptions to continue with design. For instance, we may not know if a technology can perform adequately until we prototype the software. In making assumptions, we judge the chance, or probability if we want precision, that the assumptions would hold. This is an example of an explicit assumption that is made knowingly.

Explicit assumptions can sometimes be checked and validated to improve certainties and even establish facts through prototyping, pilot testing, or sensitivity analysis. Implicit assumptions, on the other hand, are made unconsciously. For example, if we build our application as a set of microservices with node.js using the existing three-tier client–server architecture (which contains a monolithic database tier) without considering compatibility, then this implicit assumption would not be checked, which can create risks. RQs can be used to check assumptions: “Is this an assumption or a fact?” “Have we made or missed any assumptions?” “How certain are we about this assumption?”

P3: Explore Contexts
Contexts are conditions that influence software decisions. There are many contextual factors, such as development resources, financial pressures, legal obligations, industry norms, user expectations, and past decisions. For example, we want to implement a scalable and highly reliable database system, but our budget is limited. The budget is not a system requirement, but it affects our decision on database license procurement.

Some contexts will end up being constraints on design. Design contexts shape our decisions implicitly, and they are often diverse external factors that are not necessarily technology related. Exploring contextual factors can broaden our design considerations. To check that we have considered contexts, we may ask the following: “What are the contexts that could influence X?” “Have I missed any contexts?” “Does the team have experience in implementing X?”

P4: Anticipate Risks
A risk is the possibility of an undesirable outcome. A documented risk contains an estimate of the size and probability of the loss. There are many risks that a designer needs to estimate, such as extreme spikes of demand and security attacks. Anticipating and quantifying risks is the process of exploring the unknowns and estimating the possibility of risks occurring as well as, if they occur, their impacts.

This is challenging, but designers may use techniques such as the spiral model or risk- and cost-driven architecture to decide what is acceptable and how risks can be mitigated. RQs can help designers identify risks: “What are the potential undesirable outcomes?” “Is there a chance that X would not work?”

Imagine that we give a set of requirements to two developers and ask them to create a system. Is it likely that they will produce identical solutions? Almost certainly not.
P5: Assign Priorities
Priorities quantify the relative importance of choices, such as which requirement to implement or solution to use. If we can afford to implement only one of the two requirements, which one is more important? Prioritization is required when the things that we desire are competing for the same limited resource, such as time, money, developer skills, CPU, memory, or network bandwidth.

Some of these are contextual factors that add constraints. To sort out our priorities, we can ask the following: “Which requirement is more important?” “What can we do without?” “What should we use this resource for?”

P6: Define the Time Horizon
The time horizon defines the time period relevant to a decision and its effects. Risks, benefits, costs, needs, and impacts can change over time, and we want to anticipate how they evolve. For example, we might estimate that the system processing load will reach 85% capacity in three years. Defining the time horizon allows designers to explicitly state and evaluate the pros and cons of actions (and nonactions) in terms of their short- and long-term impacts.

Without explicitly considering the time horizon and reasoning with it, long-term implications may be undermined, or short-term needs may be ignored. RQs can be asked about the time horizon: “What would be affected in the short and long term if I decide on X?” “What needs to be considered in different time horizons for X?”

P7: Generate Multiple Solution Options
Some designers accept the first solution they find without considering further options. If the architect is experienced, and the problem is well understood and low risk, this may be ideal. However, in more challenging contexts, a single solution may be risky; the first solution is not necessarily the best, especially when a designer is inexperienced or facing an unfamiliar situation.

This behavior may be due to anchoring bias—a refusal to let go of the first idea. Generating multiple solution options helps a designer broaden choices and stimulate creativity. RQs can help to broaden solution ideas: “Are there other solutions to this problem?” “Can I find a better solution than X?”

P8: Design Around Constraints
Constraints are limitations that set the boundaries of what a solution cannot do. They may come from requirements, contexts, technologies, or the existing design. For instance, a CPU can compute only W instructions per second, the budget of the project is $X, the number of concurrent users supported by a software license is Y, platform Z doesn’t support a certain protocol, developers have no experience with some technology, and so forth.

In software development, we often find connected sets of constraints: if we choose component A, we must also use component B. When there are no apparent solutions, designers must work around constraints and introduce novel solutions, relax parameters, or manipulate the context. A designer can check constraints by asking the following: “If I choose X, how would it affect the solution?” “Are there any constraints that could impede this solution?”

P9: Weigh Pros and Cons
Pros and cons represent the arguments for and against each of the choices in a selection. Weighing pros and cons is a tradeoff evaluation5 that takes place when there is more than one choice to consider. The evaluation of the pros and cons, quantitatively or qualitatively, allows designers to decide what to take and give up. A quantitative evaluation can be based on measurable elements, such as costs, benefits, priorities, immediacy (i.e., the time horizon), and risks.

However, some pros and cons cannot be easily quantified. Consider the navigation menu design of a mobile app: how can one quantify the pros and cons of a hamburger menu versus a set of tabs? In this case, qualitative arguments, such as the ease of access and learning as well as the effort to implement, can be marshalled. Weighing pros and cons offers designers the chance to think about relative benefits and drawbacks and whom they affect. To check tradeoffs, one can ask these RQs: “Are there more relative benefits in solution X than Y?” “Is the tradeoffs evaluation reasonable?”

Example of DM Principles in Practice
An equipment manufacturer wants to bring a new model to market. A new sensor and sensor software have not been fully tested (P1), and the design is not according to the industry standard (P4). The rush is due to the time to market and competition (P3). Designers have the choice to redesign and delay delivery (P6) or compromise system safety (P2).

With several solution options (P7), the DM considerations revolve around the evaluation of P4—the probability and negative impacts of the software failing. The time to (P6) and contractual obligation of (P1, P3, and P8) delivery creates the tradeoffs (P9) between meeting the deadline and hoping that the chosen solution is good enough (P2) versus missing the deadline and performing thorough testing to increase confidence in the quality (P5).

Let us apply this example to two different equipment manufacturers: an aircraft company making a safety-critical system (P3) and a coffee machine maker developing a sensor for warming coffee (P3). The risks (P4), priority (P5), time horizon (P6), options (P7), constraints (P8), and considerations for the sensor software would be totally different. The DM considerations and responsibilities of the software teams would also be vastly different, and so would the outcome.

Applying DM Principles
The application of the 9Ps can be incorporated into everyday software development practices, such as Scrum meetings and architecture evaluation. For instance, during Scrum retrospectives and architecture evaluations, designers can focus on the relevant principles and use RQs to check them: “What assumptions have been considered?” “Are they factual and realistic?” “What are the contexts for this requirement?” “What constraints were imposed by the contexts?”

These RQs can help to tease out different aspects and the reasoning of decisions. If a designer is fixated on an idea without giving good reasons, it might be a symptom of anchoring bias. Asking DM principle-based RQs can help to clarify the thinking, and this may rectify such a bias.

DM principles provide the basic perspectives for logical reasoning. For example, Swift code compiles on iOS but not Android (P1 and P8). If we want portability over both platforms (P1 and P3), we will not choose Swift. This is deductive reasoning. Reasoning can help to avoid biases and fallacies, such as the appeal to force (the authority says so), appeal to people (emotional arguments), or accident fallacy (applying general rules to specific cases).

Designers can also use inductive reasoning, such as analogies, to make decisions. Someone who is familiar with one solution may decide that it can be applied to another system (P2). Such analogical reasoning can be problematic if the contexts (P3) of the two systems are significantly different, as in the example presented, falling into the trap of the fallacy of weak induction and hasty generalization.6

Good designers are made, not born. Learning to use DM principles is like learning martial arts. Karate and Taekwondo students repeatedly practice the basic stances and patterns until mastery is achieved and those motions become natural. Similarly, DM principles can be used to train basic DM skills, like learning the techniques of martial arts.

This learning, however, should not be confused with what one might do in reality. In a real fight, reactions and responses must be fluid. In a real design exercise, a designer needs to quickly choose the appropriate principles to use and reason with them.

Design is context dependent. There is no prescribed, optimal order for which DM principle to use. By practicing these principles, in software development and everyday decisions, DM will become more intuitive. Master Yoda would say, “Your facts, contexts, and assumptions gather; your time, priority, and constraints measure; your risks and tradeoffs control.” May the force be with your designs.

We have introduced the 9Ps to help designers make better and more predictable decisions. Cognitive biases and limitations are difficult to overcome, but training developers to use DM principles can create good reasoning habits. DM principles are not a panacea; they complement but cannot replace the other important attributes that software developers need to possess: domain and technical knowledge, creativity, foresight to imagine possible futures, logical thinking, openness to new information and a willingness to correct mistakes, and a quality mindset to achieve the best outcomes.