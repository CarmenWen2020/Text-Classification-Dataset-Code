On the basis of 13 agile transformation cases over 15 years, we identify nine challenges associated with implementing Scaled Agile Framework, Scrum at Scale, Spotify, Large-Scale Scrum, Nexus, and other mixed or customized large-scale agile frameworks. These challenges should be considered by organizations aspiring to pursue a large-scale agile strategy. We also provide recommendations for practitioners and agile researchers.
Large-scale agile framework implementation is increasingly prevalent in contemporary software development organizations. While there are many potential benefits, large-scale transformations are fraught with challenges, such as communication issues, a lack of flexibility, and coordination challenges.

To address these issues, many have turned to large-scale agile development frameworks, such as the Scaled Agile Framework (SAFe),1 Large-Scale Scrum (LeSS),2,3 Spotify,4 Nexus,5 and Scrum at Scale.6 Each incorporates predefined workflow patterns and routines and is supported by an ever-increasing set of tools. However, empirical evidence regarding the adoption of such frameworks (Figure 1), their use, effectiveness, and challenges is still very much in its infancy (See “Related Work on Large-Scale Agile Frameworks”). This article aims to address this.

Figure 1. - The adoption of large-scale agile frameworks.
Figure 1.
The adoption of large-scale agile frameworks.

Show All

A 15-Year Retrospective
We draw on 15 years of research collaboration experience with global companies, in particular those listed in Table 1. We have witnessed these organizations go through all parts of adopting frameworks (Figure 1) from the first tentative steps on their agile journey, through to the selecting, implementing, and sustaining of a large-scale agile framework, combination of frameworks, or their own custom-built framework. In some cases, the adoption has been a huge success (Framework 1 in Figure 1), establishing some organizations as global thought and practice leaders in large-scale development. In others, the framework was not as successful, as they tried follow-up alternative frameworks (Framework 2 in Figure 1) or abandoned the framework completely, We have developed challenges and recommendations based on in-depth and long-term observation, interviews, and on-going access to data, documentation, and tools.

Table 1. Cases studied.
Table 1.- Cases studied.
Challenges of Large-Scale Agile Frameworks
On the basis of our industry research collaboration across 13 large-scale agile implementation projects, we identified nine of the most impactful challenges and a set of recommendations (Table 2) to mitigate each. Challenges and recommendations were only included where there was clear substantiated evidence to support their inclusion, and these were identified in at least two case studies. However, to protect anonymity, the specific cases underpinning each challenge and recommendation are not listed.

Table 2. Summary of challenges and recommendations.
Table 2.- Summary of challenges and recommendations.
Defining Concepts and Terms
Publications that launched frameworks, such as SAFe and Spotify, explain the basics very well, but once one applies them outside of their intended context of a specific framework, guidance quickly runs out. Many developers talked about misunderstanding the concepts and routines of a framework and about large-scale inconsistencies in the way that the framework was interpreted and applied in each case. Some showed that when “abstract terminology is used” and there is a lack of thorough explanation, then subtle social and cultural nuances of agile frameworks are lost. This makes it extremely challenging for organizations examining key terminology, e.g., in LeSS or Scrum at Scale, and their potential suitability for organizational-specific requirements. Some even question if certain frameworks, such as Spotify and SAFe, really have enough substance to be considered a framework or method. There were many cases where inconsistent meanings and interpretations were problematic. Team-level inconsistencies can be ironed out quickly, but differences across a large swath of teams “get ingrained and the differences grow and fester.” Also, as one transformation consultant suggested, “In the absence of something clear and definitive, people just continue to do the same thing they always did.”

All of our research participants agreed that there was a problem in defining large-scale agile. However, defining large-scale was of less priority to some practitioners because more emphasis was placed on the value that a framework could deliver. As one stated, “It doesn’t matter what you call it—as long as the practices are adding value and reducing delivery times—it is good.”

Comparing and Contrasting Frameworks
Choosing between SAFe, LeSS, or Scrum at Scale was problematic for many organizations. Many noted the lack of any assessment model for conducting such a comparison to guide critical decisions on adopting specific large-scale agile frameworks. Some transformation leaders were required to justify their choice of framework. Therefore, the absence of a comparison model was highly problematic and, in some cases, stalled the agile transformation. As one agile champion noted, “I’m not sure management care whether we use LeSS, Scrum at Scale, or anything else, but they do need to know we reflected, evaluated options, and justified our choice before they fund us.”

Framework selection was often ad hoc, wherein one or two read a book or attended a talk, and then made a decision. Sometimes the decision could not even be traced to a source. One developer captured this sentiment: “One day we were doing Spotify…. but tight regulation and compliance mean we’re not like them. We are not a music company. We should have thought about Large-Scale Scrum, SAFe, agile portfolio management, or something else.”

Related Work on Large-Scale Agile Frameworks
There are various publications describing available frameworks, e.g., Scaled Agile Framework, Large-Scale Scrum, Spotify, Nexus, and Scrum at Scale. However, there is very little empirical research examining the common challenges associated across the range of large-scale agile frameworks.

Dikert et al.S1 present a systematic literature review on large-scale agile transformations outlining challenges and success factors. Their results also describe various agile frameworks but demonstrate the lack of scientific studies that focus directly on the transformation process.

Studies, such as PowerS2 and Rolland et al.,S3 show the lack of consensus and evidence underpinning any particular agile framework, and that the entire organization does not need to become agile.

Within the literature, there are many discrepancies in defining both agile and large-scale transformationsS4 and distinctions between agile approaches and organizational agility.S2

Previous research has explored specific challenges of large-scale agile development, such as team coordination,S5 and the threat to self-organization as agile is scaled.S6 In addition, researchers have presented some success factors and recommendations for large-scale agile development. However, all call for more empirical evidence on agile within large-scale settings.

References
K. Dikert , M. Paasivaara , and C. Lassenius , “Challenges and success factors for large-scale agile transformations: A systematic literature review,” J. Syst. Softw., vol. 119, pp. 87–108, Sept. 2016. K. Power , “A model for understanding when scaling agile is appropriate in large organizations,” in Int. Conf. on Agile Software Development. New York: Springer, 2014, pp. 83–92. K. H. Rolland , B. Fitzgerald , T. Dingsoyr , and K.-J. Stol , “Problematizing agile in the large: Alternative assumptions for large-scale agile development,” in Proc. Int. Conf. Information Systems, Dublin, Ireland, 2016, pp. 1–21. M. Kalenda , P. Hyna , and B. Rossi , “Scaling agile in large organizations: Practices, challenges, and success factors,” J. Softw.: Evolution Process, vol. 30, no. 10, pp. 1–25, 2018. M. Paasivaara , C. Lassenius , and V. T. Heikkilä , “Inter-team coordination in large-scale globally distributed scrum: Do scrum-of-scrums really work?” in Proc. ACM-IEEE Int. Symp. Empirical Software Engineering and Measurement, 2012, pp. 235–238. N. B. Moe , D. Šmite , A. Šablis , A.-L. Börjesson , and P. Andréasson . “Networking in a large-scale distributed agile project,” in Proc. 8th ACM/IEEE Int. Symp. Empirical Software Engineering and Measurement, 2014, p. 12.
Readiness and Appetite for Change
Agile transformation requires staff and structures to be ready and willing to transform. However, staff can be ready for a change in software practices but not necessarily ready and willing to adopt a particular framework. For example, some organizations we worked with have undergone multiple framework changes. One set of teams over a three-year period went from being organized by service lines, to a set of Scrum teams in a Scrum of Scrums structure, to a full-blown SAFe implementation, and now to Spotify tribes and chapters. There was evidence that as frameworks were implemented, particularly multiple times, then either development teams got frustrated and perhaps opposed framework adoption, or more commonly, they just took a passive approach and did not do things any differently.

Also, explanations of large-scale frameworks, such as SAFe and Scrum at Scale, tend to describe their associated structures and processes but provide little guidance on how organizations can assess their overall readiness or appetite to undertake a large-scale agile transformation process. Executives may sense a lack of readiness among some developers or groups, but don’t have any mechanism to clearly identify these issues.

Balancing Organizational Structure and Frameworks
Incorporating a one-size-fits-all framework within an existing organizational structure is challenging for two reasons. First, frameworks come with predefined structures, routines, and tools of their own, as opposed to a general custom approach. Second, these organizational structures are in constant flux in response to their external competitive or heavily regulated environments. Agile at a local level allows teams to fit into small, flexible, and dynamic teams and allows organizations to adopt to such structures in a flexible manner. Large-scale frameworks, such as SAFe, are much more dominant and small realignments can cause significant disruption across units of an organization. Implementing and then maintaining a large-scale agile framework with an evolving organizational structure can be difficult when dealing with industry, e.g., organization-wide compliance processes or regulatory changes. In addition, large-scale frameworks often require changing organizational structures, which can be very challenging.

Top-Down Versus Bottom-Up Implementation
Many implementations were driven completely from either the bottom up or from the top down, rather than a mix. While bottom-up implementation is well known to be most effective for small Scrum implementation, it is not that clear in large-scale frameworks, such as SAFe, where senior management support and involvement is needed to ensure success. This was often absent in bottom-up implementations, and what resulted was often mass confusion as each tribe or team drove different variants of the parent model, creating a fragmented mess of practices and expectations of other teams. Top-down implementations also had mixed success with many members feeling that this was yet another framework imposed by those who didn’t understand the implications or problems to be solved and who didn’t provide a clear path to implementation. As one person stated, “The very people imposing it still require the old reports and five-year plans that SAFe is supposed to eliminate.”

This is exacerbated by a lack of high-quality training courses and coaching specific to large-scale agile frameworks, particularly at the executive and project portfolio level: “There are Scrum coaches everywhere. But it is hard to find quality executive-level SAFe coaching. Mostly, we get people that, while good, are venturing into the world of SAFe for the first time.”

Overemphasis on 100% Framework Adherence Over Value
When a formal framework, such as SAFe, Scrum at Scale, or Spotify, is used, there is a tendency to measure agile transformation by adherence to that framework, rather than the value it provides. For example, progress was often described in terms of the number of tribes established or the number of teams participating in Scrum of Scrums. Ironically, quite a few noted that management places more emphasis on adherence to agile frameworks, rather than the impact on key performance metrics, primarily because of

the ability to immediately and tangibly measure the former

difficulties in defining exactly how much a metric change was due to the framework versus other factors.

In almost all cases, the final 5–20% of development activity is where the large-scale framework floundered or caused significant problems, and very often, 80% of the stress and effort expended went into achieving the last 5%. It was clear that such an endless pursuit toward a 100% transformation just didn’t make sense. For example, one particular company required U.S. Food and Drug Administration compliance certificates that took two to three years to approve. However, managers have little guidance on how to find the optimal degree of transformation.

Lack of Evidence-Based Use
While foundation papers to SAFe, Scrum, LeSS, and Scrum at Scale exist, there is a lack of empirical case studies that subsequently apply those frameworks in the wild. There were many examples of brick walls across organizations—instances where staff claimed there was a particularly difficult problem or contextual issue for which the original framework papers had no guidance. These included heavily regulated industries or products, software that required more research-intensive work than development, and one case involving a small number of very niche, specialized developers who had to split their time across 450 projects. Participants were particularly frustrated at a lack of a cumulative tradition of empirical studies that do not build on the original framework papers, but rather focus on next-generation application of large-scale agile developments and revised ways of doing agile.

Maintaining Developer Autonomy
Today’s developers expect and often demand autonomy in how they work. Remote working, flexible hours, bring your own devices, devolving work to crowd platforms, various instant messaging and media platforms, and a plethora of niche tools and applications were common across most of the cases studied. Also, autonomy to tailor and improvise how developers work was always facilitated by traditional agile methods.

It is already known that autonomy becomes increasingly difficult at scale. However, large-scale agile frameworks exacerbate this problem and impose even more restrictions and rigidity. There were many instances where developers’ requests to implement processes and tools were no longer accepted because they were not viewed as compliant with the new SAFe implementation. Some referred to Spotify’s tribes structure “even dictating where we are allowed to sit.” As one participant stated, “Autonomy and flexibility is what agile is all about. But when employees want so many different things, and we allow them all, then the SAFe carcass gets slivered away to such a degree there is nothing recognizable left.”

Misalignment Between Customer Processes and Frameworks
Organizations are now expected to include customers into their process design and in many cases are encouraged to completely align with customer processes in a seamless manner. However large-scale agile frameworks were more challenging because their predefined practices and structures are harder to hide and subtly relabel. Customers struggle with some terminology. In fact, to some who are not familiar, the term SAFe invokes connotations of heavyweight regulatory and compliance processes rather than something light and nimble. This means that most organizations had to drop the framework for that piece of work or else blend them in some way. This becomes incredibly challenging for some of the studied organizations, e.g., those with hundreds of clients ranging from small to big enterprises, small to big revenue, and massive diversity in terms of development and reporting frameworks. In some cases, organizations needed to form agreements on how to work around a specific framework to collaborate on and deliver software products at certain points through increased customer involvement.

Drawing on 15 years of experience across 13 cases, this article identifies nine challenges associated with the implementation of large-scale agile frameworks. Organizations considering, planning or in the midst of agile transformation can use our study to identify and preempt challenges they may be particularly susceptible to. Such an exercise can be insightful, given that many problems are subtle and can exist under the radar. We would particularly encourage organizations to take a multilayered approach across different employee and stakeholder groups. In terms of limitations, while reflection can expose challenges, their complete removal may be difficult. Also, it may not be feasible to implement all recommendations because of restrictions, such as cost, culture, structure, and span of control.