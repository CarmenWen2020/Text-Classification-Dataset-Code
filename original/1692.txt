Abstract
Scrum, recognized today as the most popular agile development methodology, has been used in a wide range of settings and for varying purposes, in- and outside of the traditional software development context. The use of Scrum in non-traditional settings and for different needs led to a considerable corpus of academic literature that investigates, presents, and discusses modifications to the original method, aimed to make it fit such novel forms of application. Based on a large-scale review of extant literature, this study systematically analyses why and how Scrum was reportedly modified in different instances and contributes with a synthesis that can serve as a basis for a more systematic approach to future research and practice. We explicate nine common modification objectives for change (e.g., attaining high performance, non-standard contexts, distributed development) mapped against seven generic modification strategies (e.g., method guidance, new procedures, or artifacts). Building on our extensive literature analysis we highlight research gaps and identify promising areas for future research.

Previous
Next 
Keywords
Scrum

Agile development

Systematic literature review

Information systems development

1. Introduction
Two decades after the publication of the Manifesto of Agile Software development (Beck et al., 2001b), agile methodologies have gained widespread acceptance (Dingsør et al., 2012), and Scrum has emerged as the most popular method from the agile family (VersionOne, 2020). The original design of Scrum best accommodates small, co-located groups of developers with diverse skills, working on software for a client that is actively involved in the development process (Schwaber, 1995). Despite that, due to “its perceived simplicity and ‘lightweight’ approach” (Masood et al., 2020, p. 1), Scrum has today been adopted by a range of institutions in a variety of contexts, ranging from management outside of software engineering to managing entire companies (Cloke, 2007, Greening, 2010). Many of those circumstances require adaptations or augmentations of different aspects of the method, which led to a substantial and growing body of research studies discussing modifications to Scrum (Diebold et al., 2015, Forbes Insights, & Scrum Alliance, 2018).

While this widespread attraction of Scrum to different contexts outside the software engineering domain can be considered a success and confirmation for the developers of the method, it also led to a vast variety of different adaptations (Fitzgerald et al., 2002a, Fitzgerald et al., 2002b). Method customization and tailoring are commonplace and well-recognized phenomenon within the software engineering domain since the complexity and contingencies of different real-world contexts can hardly be reflected in a unified methodological approach (Goldkuhl and Karlsson, 2020). Yet, some Scrum evangelists strongly advocate following the outlined practices “by the book” to avoid introducing the same inefficiencies and dysfunctional elements that one set out to eliminate by introducing Scrum in the first place (Schwaber, 2007).

The motivation to adapt a method to a specific context is arguably even more accentuated when moving outside its originally intended discipline, i.e., outside the software engineering domain. However, to the detriment of cumulative knowledge building, such modifications have largely been reported in a fragmented manner with a focus on individual empirical case studies. Many research results are presented in regional conferences and have not been effectively assimilated towards a unified body of knowledge. Subsets of this literature, typically corresponding to a specific aspect (i.e., distributed development), have been reviewed in earlier studies (Kitchenham et al., 2010). However, a comprehensive mapping of the literature on the adaptation of Scrum that would map the reasons for why it is being modified against how it has been modified, has not been conducted. This comes at the expense of future researchers, seeking to build on prior findings rather than repeating what others already studied and practitioners who would benefit from informed guidance to support their context-specific needs. Bringing together the Why and How of context-specific method adaptations is thus important to enable both effective learning from past results and a systematic approach towards future research.

This study aims to address this research gap through by synthesizing extant research on modifications proposed to Scrum. We conducted a large-scale, systematic literature review (SLR) of documented cases in the academic literature to accomplish that. Our study is guided and structured by the following research question: Why and how is Scrum adapted to different contexts?

The paper first discusses related works before briefly introducing the reader to the basic properties of the original Scrum method. After outlining the research methodology in Section 4, we discuss the results of our literature review and present the descriptive results outlining the overall shape of the literature in Section 5. In Section 6, we synthesize extant knowledge by extracting and mapping seven modification strategies against nine modification objectives reported in the academic literature. The paper concludes with an interpretation and discussion of the findings with emphasis on potential future research areas as well as implications for practitioners.

2. Related works
The primary literature mapping adjustments to agile methods has been regularly summarized by a number of systematic reviews. So much so that a review of those reviews is available (Hoda et al., 2017). Some reviews document the spread of the paradigm itself (Dingsør et al., 2012) or various uses ranging from global software engineering (Dreesen et al., 2016) to the adaptation of agile methods to conform to standards like CMMI (Palomino et al., 2017). This paper contributes to the literature on agile development and Scrum by providing an exhaustive overview of the reported adaptations with emphasis on the methodological approach used.

Our work differs from other recent reviews on agile software development through two main aspects. We focus on a specific methodology (Scrum) instead of agile methods as a whole, and we aimed to inclusively evaluate and review all potentially relevant studies, including both empirical and conceptual/theoretical study designs, instead of using hard cut-off criteria in our search strategy. Concerning the focus on a single method, it can be observed that most reviews single out a specific development situation and then survey the whole range of agile development methods on this topic. Recent examples include global systems engineering (Hossain et al., 2009, Jalali and Wohlin, 2010) or user-centered practices (Duechting et al., 2007). We pursued the opposite approach: we focused on a specific method and the explored circumstances to which it been introduced, and how. Pertaining to our filter and search strategy, we find that while research questions similar to ours have been addressed by prior studies (Ashraf and Aftab, 2017, Diebold et al., 2015), their methodologies differ markedly from our study in terms of relying on a non-systematic sampling of literature or generalizing from a small sample of practitioners. Related works are found in industry reports (Forbes Insights, & Scrum Alliance, 2018, VersionOne, 2020). While those reports typically provide data on individual methods, they are not methodologically transparent and lack detail in their results.

This paper expands on a previous conference paper discussing preliminary results of the same research project (Hron and Obwegeser, 2018). We engaged in a broader literature search and filter process, including more academic databases (three instead of one) and no filtering based on citation count or year of publication. Consequently, our sample increased from 31 to 925 studies, supporting a substantially deeper analysis and discussion of the phenomenon of Scrum adaptations.

3. A brief review of scrum
Scrum was originally proposed by Schwaber (1995) as a simple development methodology that embodies iterative and incremental development principles. It comprises so-called ceremonies (also referred to as rituals or procedures), artifacts, and roles. As an actively used methodology, it has been regularly updated by its creators. The most recent version of the official Scrum Guide was released in November 2020 (Schwaber and Sutherland, 2020). The Scrum Primer provides a concise alternative overview of the method (Deemer et al., 2012).

Development under Scrum is split into so-called sprints, which are typically between two and four weeks long. Sprint planning occurs at the beginning of each sprint and is used to define what can be delivered in the next sprint and what needs to be done to achieve that. At the end of each sprint, a sprint retrospective is held to support continuous learning and improvement in the team. In addition, a sprint review is conducted to demonstrate the outcome of the sprint to the customer and gather feedback and relevant information for the next working increment. Scrum places weight on developer autonomy but not at the expense of discipline. Developers start their working days with stand-up meetings to update each other on progress and tasks ahead. In the spirit of self-organization, instead of being led by a project manager, a Scrum team is facilitated by a Scrum Master. The main point of contact is the product owner, who also manages the backlog of work to be done. In successful Scrum development, the customer regularly participates by contributing ideas for new features (that are recorded as user stories and maintained in a backlog) and by signing off on completed features at the end of each sprint. Lastly, Scrum offers tools to track the productivity of the team by measuring task velocity that can be plotted on a so-called burn-down chart. The team estimates how time-consuming particular development tasks will be (expressed in story points) and self-assigns work for a given sprint. The number of backlog items, expressed in story-points, realized over time gives us a measure of team productivity or “velocity” in Scrum parlance. Measuring velocity not only motivates teams by seeing their productivity and progress on the burn-down chart, but it also helps in planning future work.

Scrum was developed for small, co-located teams of diverse specializations (Schwaber, 1995) and – like many other agile development methods – is built on certain assumptions (Ramesh et al., 2017, Turk et al., 2005). This includes, for example, the assumption of availability of the customer for frequent interactions, which can be difficult to achieve in practice.

4. Research method
The objective of this study to understand why and how Scrum was modified, as reported in the academic literature. Agile development with Scrum has been the subject of a growing number of academic studies, and therefore, a systematic review that allows identification, systematization, and evaluation of extant contributions is in order (Kitchenham, 2007).

Due to the variety of applications of Scrum inside and outside of software engineering, the research questions call for an inherently transdisciplinary review that spans across various literature streams, e.g., software engineering, computer science, information systems, management (Besson and Rowe, 2012).

To ensure transparency and replicability of our search, filter, and analysis process, we opted to follow a systematic approach to scope and review the existing literature (Paré et al., 2015, Webster and Watson, 2002) in conjunction with specific recommendations for conducting systematic literature reviews (SLRs) in the software engineering domain (Kitchenham, 2007). Fig. 1 gives an overview of our research design comprising literature search, filter, coding, and analysis.

4.1. Database queries
The literature sample was collected using a structured query from three major academic databases. Due to the interdisciplinary nature of our study, we opted to search for relevant literature both in broad databases that cover a wide range of different disciplines, and specific databases that focus on software engineering research. To this end, Scopus and Web of Science databases were selected as general-purpose databases with wide coverage. Additionally, IEEE Explore was consulted as a domain-specific database that also provides higher coverage of conferences.

The query was developed over multiple iterations of exploring different search strategies and subsequent discussion among the authors. The final query string specifies the method in question (Scrum) and a set of terms that operationalize our focus on changes to the Scrum method. We opted to include a thesaurus of words to specify the change aspect, which can be represented by either positive (e.g., improve, enhance), negative (e.g., limit, drawback), or neutral (e.g., modify, change) terms. Lastly, we used an exclusion clause for sports literature using the same terms (i.e., Scrum as a part of the Rugby gameplay). Consequently, our Scopus search string was given as follows: TITLE-ABS-KEY (“Scrum”) AND ALL (“software” AND “agile”) AND ALL ([positive terms] OR [negative terms] OR [neutral terms]) AND NOT ALL (“rugby” AND “sport”). Wherever possible, we used the placeholder “*” to allow for word variations. Analogical queries were developed for the other two databases. A complete list of our search terms and thesaurus can be found in Table 1.

The query executed in mid-August 2020 returned 3145 papers since 2002, which formed the basis for our three-step screening and filter process.


Table 1. Structured search query.

Positive terms	Negative terms	Neutral terms	Topic specifiers
exten*
accommodat*
improve*
adapt*
widen*
focus*
enhance*
expand*	limit*
drawback*
shortcoming*
issue
challeng*
downside*
reduc*	demand*
requirement*
need*
suit*
modif*
alter*
fit*
revis*
chang*, tailor*, scop*	Scrum,
software,
agile,
excluding Rugby, excluding sport
We merged the results from the three databases first by matching on the title and then by manual checking. Scopus provided the largest number of articles, so we checked for duplicates against the results of the Scopus query. With each of the remaining articles, we performed manual checking for duplicates. Even though the same organization might have been studied more than once, multiple studies reported on different subsets of the organization. For example, Yahoo! was used as a case in a study on integrating process framework (Scotland and Boutin, 2008) and how to approached distributed development (Lee and Yong, 2010).

Conversely, we treated studies reporting on multiple cases as one record, as we were focused on what the authors considered the most significant alteration to Scrum. This is a lesser concern as only 8% of our sample presented multiple cases. The initial sample after elimination of duplicates consisted of 2209 articles which were subsequently subject to title and abstract screening.

4.2. Filtering
To conduct the screening process, we defined a clear set of criteria to be applied in the process. We first screened all articles for titles that indicated modifications of Scrum and only removed those that focused on other topics. If in doubt, the article was included for later abstract screening.

4.2.1. Title screening
We engaged in a check-coding process, where both authors screened the titles of the same 100 papers separately to strengthen the reliability of the coding process (Knudsen, 1975). The degree of inter-reviewer reliability was measured using Cohen’s kappa (ϰ) (Spitzer et al., 1967), resulting in ϰ, which indicates a high degree of agreement among the authors. Cohen’s kappa was calculated as follows:

Kappa coefficient

(1)ϰ
 
 
Pr(a) is the relative observed agreement among the researchers, and Pr(e) is the hypothetical probability of chance agreement.

After establishing clarity and agreement concerning the selection criteria, we split the remaining papers between both authors and continued to screen the titles for relevance separately. Out of the initial 2209 articles, we found 1423 as potentially relevant based on titles alone.

4.2.2. Abstract screening
We separately screened the remaining papers’ abstracts (after exchanging the sets of articles to review) according to the same criteria. This reduced our sample to 1054. Some papers were eliminated in full-text screening (including previous literature reviews), resulting in the final sample of 925 publications. Papers were included if they fulfilled two mandatory conditions:

Condition 1: the paper introduces a modification or extension of the Scrum methodology

Condition 2: the paper states a reason or motivation for introducing such a change

While the body of this article presents a wealth of papers in the final sample, the inclusion criteria are best explained by presenting examples that were excluded. For example, the first condition was not met by a survey that aims to study the effects of Scrum on productivity without modifying it (Hanslo et al., 2020). The second condition was not fulfilled, for example, by a case study by Moe and Aurum (2008), which derives several pieces of advice for decision making in Scrum, but it is driven by an objective to understand decision making in Scrum teams and not by a desire to modify Scrum motivated by an explicit objective.

In line with the mandatory conditions for inclusion described above, we generally excluded papers about learning how to use Scrum (i.e., the process of adopting the method) as well as papers that investigated how to teach Scrum at universities, if they did not also describe modifications to the method (e.g., Santos et al., 2015). We also disregarded papers on the (psychological or sociological) dynamics of Scrum teams, which offered academic descriptions of phenomena like team maturity but little prescriptive potential for actual modifications of the method (e.g., Hasnain and Hall, 2009).

4.3. Coding and analysis
Considering our research questions, the main goal of our coding efforts was to extract categories along two major dimensions from each paper in the final sample: why a modification was intended, i.e., the modification objective, and how Scrum was to be modified, i.e., the modification strategy. To ensure a systematic approach, our coding and analysis efforts took inspiration from relevant method literature on the synthesis of prior literature (Cruzes and Dybå, 2011). The coding process was performed by both authors in a similar fashion as the screening and filter process. First, we coded a set of the same 50 articles separately, inductively developing and extracting coding categories. For example, several papers motivated their method adaptation by emphasizing the need for managerial control and embedding the software development process in the organization’s overall strategy, which we coded as “Managerial Extension”. Similarly, in terms of modification strategies, we found that many papers focused on explicating how to properly use and apply the Scrum method; thus we created the modification strategy “Method Guidance”.

After the initial coding, we compared and consolidated the coding categories until an agreement was reached. Thereafter, we coded another set of 50 articles separately, keeping in mind the preliminary codes already established but also adding new codes when necessary. For example, a category for “Documentation” was used initially, but it was subsequently merged into “Performance” or “Managerial Extensions” as the number of papers dedicated to practices of documenting software did not saturate a category on par with the other clusters. Subsequently, we again compared and consolidated our codes before splitting the remaining articles between the authors and coded separately. Lastly, we compared and discussed our full set of codes to reach an agreement on the final categorization scheme. The full coding table is available as an online Appendix.


Table 2. Coding categories.

Coding category	Range of values
Primary Motivation	Inductive
Secondary Motivation
Primary Solution	Inductive
Empirical	Binary: yes or no
Method	Single case study, multiple case study, experiment,
conceptual proposal, simulation, survey-based
Theoretical framing	Theory or model applied to frame research
Citation count	Citations from Google Scholar
Quality appraisal	Evaluation of quality (range from 1 to 5)
As our main analytical dimensions, we coded for modification objective (primary and secondary) and modification strategy (primary and secondary). The primary objective refers to the main goal stated in the study that triggered the method adaptation, while secondary objectives were also coded for when mentioned. For example, Vlietland and Van Vliet (2015) motivate their study by the need to scale Scrum to multiple teams in enterprise settings, and address the managerial extensions necessary to govern the collaboration across teams. Similarly, primary modification strategy refers to the main adaptation approach used, which was in some cases accompanied by a secondary strategy. For example, De Melo et al. (2019) propose an adaptation of Scrum for small companies that build on the introduction of a new artifact (a point-based heuristic) but also describe new tools (based on the Balanced Scorecard technique). We also coded for several descriptive elements in our sample (see Table 2). To categorize the methodological approach of papers in our sample, we distinguished between case studies (single, multiple) experiments, conceptual proposals (i.e., theoretical developments with either none or limited empirical validation), simulations, and survey-based studies. Inspired by Dikert et al. (2016), we also evaluated and coded for the quality of the papers on a scale from 1–5, with the lowest score applied for studies with unclear research objectives, apparent flaws, or in transparent methodological section and the highest score for papers that are well anchored in prior literature, identifying a clear research gap and objective, applying a systematic and rigorous method and critically reflecting on their findings. However, we decided not to use the quality dimension as a cut-off or filter criterion to ensure our sample represents the full breadth of the current research landscape.

5. Results
In our sample period, we observed a steadily rising volume of academic output, suggesting growing interest in the topic. Fig. 2 visualizes the growth of the relevant academic research since 2002, indicating both the number of studies per year as well as the accumulated growth of overall citations in the sampling period. Due to the differences in citation count across the various databases, we opted to use a single source for citations – Google Scholar – regardless of which database the paper was originally found in. Google Scholar reportedly provides more accurate citation results than Scopus or Web of Science, especially for Social Sciences, Arts and Humanities, and Engineering due it is better coverage of books, conference proceedings, and a wider range of journals (Harzing and van der Wal, 2008).

In terms of publication outlets, we observed that, on average, about 80% of the papers were presented at conferences, further evidencing the pragmatism of the field. The majority of studies reside in the long tail of the distribution: over 200 papers were published in the proceedings of conferences, colloquia, or workshops, where each event generated one or two papers in our sample. Among the most frequently used outlets are conference proceeding series like Springer’s Lecture Notes in Computer Science (46) and Lecture Notes in Business Information Processing (44), as well as journals like Information and Software Technology (11) and the Journal of Systems and Software (11).


Download : Download high-res image (209KB)
Download : Download full-size image
Fig. 2. Publications and citations over time.

From a methodological perspective, the largest part of our sample followed a single case study design (477). Apart from that, we also counted experiments (36), multiple case studies (86), experiments (36 studies), conceptual proposals (227), simulations (11), and survey-based studies (88).


Table 3. Methods, quality appraisals, and examples.

Method	Experiment	Multiple case	Conceptual proposal	Simulation	Single case	Survey
Empirical	1	1	0	0	1	1
Quality
mean (St. dev)	3.00
(1.01)	3.15
(0.89)	2.51
(1.17)	2.85
(1.46)	2.58
(1.01)	2.66
(2.20)
Example	Harvie and Agah (2016)	Kettunen (2009)	Rahman et al. (2018)	Griffith et al. (2014)	Gary et al. (2011)	Lehnen et al. (2016)
Count	36	86	227	11	477	88
Regardless of their methodological approach, we found that less than 10 percent of studies in our sample contain an explicit theoretical underpinning; that is, they have a dedicated description of a theoretical lens or embed their research into related studies and theories. The Manifesto for Agile Software Development principles, the CMMI framework, or the 4  1 Software Safety principles (Doss and Kelly, 2016a), are sometimes referred to, in place of a fully developed theory (Conboy, 2009, Lee and Xia, 2010). Notable exceptions to the “theory-light” majority of studies in our sample include, for example, a study exploring agility as organizational learning (Lyytinen and Rose, 2006) or another one discussing the “base patterns” of agile approaches (Greening, 2016). Table 3 accompanies the analysis with information on empirics, quality appraisal ranging from one (worst) to five (best), and examples (Table 3).

Relying on Google Scholar as a standardized source of citations across databases, we calculated average citations per year for each paper. That means that for a paper from 2010, we divided the total number of citations by ten because it was published ten years ago. This adjustment allows for comparing old and new papers.

We uncovered that the average paper garners just 2.51 citations per year with a standard deviation 4.50. Minor variations can be found across the different methodological approaches (see Fig. 3). Conference publications are cited less (1.96 citations per year, St. dev  2.93) than journal publications (4.36 citations per year, St. dev  7.40).

6. Modification objectives and strategies
Our research identified nine generic modification objectives and seven common modification strategies. Before discussing each modification objective and associated strategies in detail here, we briefly introduce the main categories to guide the reader through our findings.

In response to the question: Why is Scrum being modified? Our review identified nine generic modification objectives. The most common was a simple desire to attain high Performance, typically in line with the project management triad (higher quality, lower cost, reduced time). The second most common was the objective of accommodating a specific Context. Other papers addressed the need to combine Scrum with another framework. We labeled such modification objectives Juxtaposition. Architecting refers to studies where the stated objective was to specify high-level development outcomes in release plans, technical specifications, or similar. Distributed development subsumes all efforts aimed at using Scrum in non-collocated but geographically distributed setups. The objective of User Experience captures those efforts that specifically emphasized the role of user experience when motivating their method adaptations. Managerial extensions refer to the linkage of the software development process to the business strategy of the organizations. Studies that focused on making Scrum work for large-scale projects that would exceed the traditional setting of Scrum are captured in the category Size scaling. Finally, some studies motivate their adaptations to Scrum through increased demand for Security, i.e., regulatory or industry-specific constraints or demands.

In response to the question: How is Scrum being modified? We have derived seven common modification strategies from our sample. Method Guidance includes appeals to “by the book applications” of the selected method, or reminders of the Manifesto for Agile Software Development principles. For example, Eloranta et al. (2016) identify a set of harmful Scrum practices and propose mitigating strategies. Specific advice may concern the daily stand-up meeting (Dick, 2016, Stray et al., 2013) or distributed teams (Lous et al., 2017). Procedures refer to introducing novel activities into the method that can be re-occurring (e.g. testing; Tuomikoski and Tervonen, 2009) or conducted on a one-off basis (e.g. during hand-over; Anwar et al., 2014). Infusion describes an in-depth reconsideration of multiple elements of Scrum, which either has a basis on other existing processes/methods such as CMMI (Jakobsen and Johnson, 2008, Sutherland et al., 2007), Lean (Sikamani and Raj Dharmapal, 2016, Wang et al., 2012) or is done to address new contexts, such as new product development (Cooper and Sommer, 2016b, Lehnen et al., 2016). Tools refer to proposals of tools that do not directly modify Scrum but help accomplish a certain task. Such tools can often be seen as a form of “plug-ins” to the original method that may be applied without directly changing the method in its working. New metrics are typical examples of this category, as they are small additions that can enrich Scrum without significantly changing the method (Greening, 2015, Padmini et al., 2015). Artifacts include the presentation of new or altered artifacts for Scrum, e.g., the use of digital displays for co-located teams (Schwarzer et al., 2016) or distributed settings (Esbensen et al., 2015). Pre-development refers to introducing additional processes, artifacts, and sometimes roles that specifically deal with tasks such as the definition of technical architecture, articulating a product vision, or creating milestones for development, before the development itself is initiated. Multiple perspectives can be adopted in formulating pre-development modifications. Designers sometimes call for personas to understand the task at hand (Sedeño et al., 2017); management can be concerned with release planning (Heikkila et al., 2015a, Heikkilä et al., 2015b). Technical requirements may need to be included, which are often difficult to address under the agile paradigm (Bourimi and Tesoriero, 2014). Multiplicity describes the multiplication of an artifact, a role, or the entire team. This was only coded when it was explicitly introduced as a novel amendment. The multiplicity of the team is inevitably present under circumstances of distributed or large-scale developments (Paasivaara and Lassenius, 2011). Teams may be multiplied according to specialization: e.g., design team and a development team (Ferreira et al., 2011). The multiplication of artifacts can refer to a separate backlog, dedicated only to testing (Aamir and Khan, 2017).

Table 4 provides a complete overview of modification objectives (rows) mapped against modification strategies (columns), including the number of papers in which the given modification strategies were invoked in response to which modification objective. The shading of each cell corresponds to the number it displays, i.e., darker shadings indicate a higher number of studies for a specific combination of objective and strategy. In the following subsections, we will present each modification objective following a structured approach. We will first describe the category pertaining to our research context and then discuss the most common modification strategies and common examples as given in the summary tables at the beginning of each subsection. Finally, we will point to dedicated literature or reviews that focus on this particular aspect of Scrum or related agile software development practices.


Table 4. Number of papers for modification objectives and modification strategy.



Table 5. Primary and secondary modification strategies for Performance.

Modification	Primary	Secondary	Example of
strategy	use	use	primary use
Method Guidance	65	43	Eloranta et al. (2016)
Procedures	86	33	Tuomikoski and Tervonen (2009)
Infusion	7	2	Alqudah and Razali (2018)
Tools	60	20	Kayes et al. (2016)
Artifacts	17	5	Rubart and Freykamp (2009)
Pre-development	2	2	Ali et al. (2016)
Multiplicity	0	2	
6.1. Performance
The most frequent objective for the modification of Scrum is to attain high performance under standard development circumstances (co-located, with a small team) or with limited deviation from such a setting. The objective is to deliver results in line with the logic of the project management triad (time, quality, cost). Performance is a broad category that houses numerous, typically practice-derived, approaches that do not necessarily result in deep, structural changes to the method. Rather, these papers frequently codify minor alterations and additions, often found through usage and experimentation (see Table 5). .

The most common modification strategies are proposals of new procedures, which are often paired with Method Guidance as a secondary modification strategy. Papers also propose the development of tools with procedures as secondary modification strategies and method guidance. For example, one paper proposes a novel process for testing (Tuomikoski and Tervonen, 2009). Other studies develop metrics for prioritizing backlog elements (Kayes et al., 2016) or tools for alternative progress measurements (Miranda and Bourque, 2010). A typical example of using method guidance as a strategy for improved performance is Eloranta et al. (2016), in which the authors identify 14 anti-patterns and provide guidance on how to address them. Artifacts are less common to achieve general performance enhancements, but an example of a “flexible cooperative task board” to enhance daily meetings illustrates how they can be used (Rubart and Freykamp, 2009). In some cases, performance boosts are sought by large-scale rethinking of Scrum (Alqudah and Razali, 2018). Some recurrent pre-development procedures are proposed, for instance, to prevent risks.

The most frequent secondary modification objectives to Performance are found in the Managerial extensions and related Architecting category. This hints at the desire of practitioners to imbue Scrum with more rigidity for increased performance.

The attention given to this category speaks highly of the quality of the original Scrum method. It is robust enough to fit a variety of contexts and designed to address an enduring problem. The prevalence of method guidance reports is indicative of the practitioner-grounded nature of the field.


Table 6. Primary and secondary modification strategies for Context.

Modification	Primary	Secondary	Example of
strategy	use	use	primary use
Method Guidance	60	50	Heeager and Rose (2015)
Procedures	35	19	Wagner (2014)
Infusion	68	8	Cooper and Sommer (2016a)
Tools	2	1	Mendonça et al. (2014)
Artifacts	5	8	Streule et al. (2016)
Pre-development	1	2	Hanschke et al. (2015)
Multiplicity	2	2	Aamir and Khan (2017)
6.2. Context
The second most common modification objective to modify Scrum is connected to specific development contexts that Scrum is introduced into. Scrum offers a notably simple approach to working, and it can be transposed to a number of different settings. Some of the encountered contexts include regulated environments (Cawley et al., 2010), maintenance operations (Heeager and Rose, 2015), and data warehousing projects (Goede, 2011). Outside of the software development domain, Scrum is seen as a promising method for innovation management (Cooper and Sommer, 2016a). It is also reported to be used in the construction industry (Streule et al., 2016) or animated film production (Sharma and Wherry, 2009) (see Table 6).

The contexts listed include software development but also applications far outside of the context of software altogether. The context can motivate changes, but it can inspire how those changes should be implemented. While it is widely recognized that contextualization plays a major role in the practice of agile methods (Fitzgerald et al., 2002a, Fitzgerald et al., 2002b, MacCormack and Verganti, 2003), the objective of papers in this group is not really to recognize the fungibility of the method as much as it is to document a catalogue of ready-made modifications that fit particular circumstances such as those listed above.

The generic modification strategy Infusion is used here to denote markedly altered Scrum with novel elements, and Scrum imbued with elements from specific contexts (Cooper and Sommer, 2016a). Method guidance is frequently invoked to address practical considerations stemming from the transposition of Scrum to a new environment (Heeager and Rose, 2015). It is also offered as a secondary modification strategy accompanying Infusion or Procedures. Smaller-scale alterations to Scrum most commonly add Procedures (Wagner, 2014). New artifacts are rare (Streule et al., 2016) as are Tools (Mendonça et al., 2014).

Many of the contexts Scrum is introduced into already have their codified methods and processes. Hence, we observe Juxtaposition as the most frequent co-occurring modification objective. Less commonly, we noted explicit mentions of modification objectives to boost the overall development performance with the Performance category.


Table 7. Primary and secondary modification strategies for Architecting.

Modification strategy	Primary use	Secondary use	Example of primary use
Method Guidance	15	20	Angelov et al. (2016)
Procedures	37	36	Gayer et al. (2016)
Infusion	8	3	Harvie and Agah (2016)
Tools	18	8	Farid (2012)
Artifacts	11	13	Alperowitz et al. (2017)
Pre-development	25	2	Pastrana et al. (2017)
Multiplicity	1	1	Griffith et al. (2014)
6.3. Architecting
The Architecting category aggregates the common desire to specify the outcome of the development process, at least on a high level. To that aim, studies commonly invoke modification strategies around new artifacts, accompanied by procedures as a secondary modification strategy. Specific pre-development activities are sometimes highlighted with artifacts accompanying them as a secondary modification strategy. While Scrum originally suggests that high-level​ planning and software architecture are conducted in a sprint that precedes actual development (Schwaber, 1995), many practitioners see a need to attend to those processes more carefully (see Table 7).

Because technical architects are not specified in the original Scrum, their role is not always clear (Angelov et al., 2016). Further complicating matters, the task of “Architecting” can be articulated in different ways depending on the chosen background. A technically-minded team member may call for “traceability procedures” (Gayer et al., 2016) or a better approach to the pre-development phase and improving requirements elicitation (Pastrana et al., 2017) which can be supported with tools (Farid, 2012). Particularly, non-functional requirements seem to pose a challenge (Farid, 2012). A User-Experience specialist may address this modification objective by proposing artifacts such as “visual backlogs” (Alperowitz et al., 2017). A business-minded member of the team may be concerned with release planning (Li et al., 2010) on top of requirements elicitation. The results of a simulation study advise maintaining a parallel backlog for technical debt issues, therefore calling for multiplicity (Griffith et al., 2014). Despite the fragmentation by domains, high-level reconsiderations (Infusion) of Scrum to achieve greater architectural discipline have been proposed (Harvie and Agah, 2016). Taken together, these suggestions have a commonality and address the unease resulting from the agile principle of “responding to change” (Beck et al., 2001a) and give rise to a tension between emergence and control.

Architecting modifications are often introduced with a secondary modification objective of increasing the performance of the development process. The multitude of perspectives on what we define as the “architecting task” is reflected in the variety of other co-occurring modification objectives. Managerial extensions reflect the business perspective. The usability perspective is reflected in the User Experience category.

Outside the scope of our literature sample, further reading on the intersection of Scrum with Architecting in our cross-domain view can be found in the conceptual work by Madison (2010), as well as in reviews concerning specific domain-centered facets of architecting, most notably requirements engineering (Heikkila et al., 2015a, Heikkilä et al., 2015b).


Table 8. Primary and secondary modification strategies for Juxtaposition.

Modification	Primary	Secondary	Example of
strategy	use	use	primary use
Method Guidance	15	23	Schar et al. (2016)
Procedures	2	8	McMahon (2016)
Infusion	69	3	Sutherland et al. (2007)
Tools	1	1	Ionica et al. (2017)
Artifacts	2	3	Santos et al. (2016a)
Pre-development	0	2	
Multiplicity	1	0	Stålhane et al. (2012)
6.4. Juxtaposition
The fourth most frequent modification objective occurs when Scrum is required to coexist with other codified frameworks, such as lean development (Wang et al., 2012) or CMMI (Sutherland et al., 2007). This juxtaposition of two codified standards can either be due to institutional requirements, motivated by the desire to reap benefits of both standards, or purely exploratory. Often, the juxtaposition of two methods is driven by the desire to signal quality. The result of such juxtaposition is usually a substantial rework or infusion of the original Scrum method with one or more other methods. Such rework is often accompanied with practical advice, or Method Guidance, as a secondary modification strategy (see Table 8).

By institutional requirements, we mean both top-down mandates, such as the Swiss standard Hermes (Schar et al., 2016), but also standards voluntarily adopted processes for quality assurance and signaling purposes, such as CMMI (McMahon, 2016) or industry standards (Stålhane et al., 2012). Some papers explore combinations of different methodologies, such as the Rational Unified Process (Silva et al., 2017). The primary literature also gives attention to the coexistence of agile and traditional methodologies. For example, the combination of the linear (waterfall) approach with the iterative approach of Scrum has deserved the name “Water-Scrum-fall” (Schlauderer and Overhage, 2015). Scrum can also be juxtaposed with techniques that provide tools like Quality Function Deployment (Ionica et al., 2017) or artifacts like UML models (Santos et al., 2016b).

A large share of papers in this category lack empirical insights (35 of 90). It is, however, interesting to note the order in which the different methods are adopted. In a common scenario, Scrum is introduced to an environment governed by a different standard. In that case, Scrum is reported to accelerate the speed of the development process and increase customer and developer satisfaction (Morales Trujillo et al., 2011). In another scenario, an organization already using Scrum chooses to combine it with a second method. In that case, Scrum is reported to imbue the development process with robustness and control, equipping developers with procedures for architecting.

Concerning co-occurring modification objectives, Juxtaposition was most commonly accompanied with Context because Scrum is often juxtaposed with a standard that originates in a particular setting. The combined methods often enable Scrum to perform better along traditional product management dimensions (on time, on budget, meeting requirements). Hence, Performance has been identified as a co-occurring modification objective. Lastly, because elements of other methods infused into Scrum often provide the method with additional rigidity and a more systematic approach, we note Architecting and Managerial Extensions as co-occurring modification objectives.


Table 9. Primary and secondary modification strategies for Distributed development.

Modification	Primary	Secondary	Example of
strategy	use	use	primary use
Method Guidance	50	17	Paasivaara et al. (2009)
Procedures	14	13	Szoke (2010)
Infusion	5	2	Banijamali et al. (2017)
Tools	7	1	Sungkur and Ramasawmy (2014)
Artifacts	4	2	Esbensen et al. (2015)
Pre-development	0	0	
Multiplicity	7	6	Lee and Yong (2010)
6.5. Distributed development
When development is not co-located, the development process must be amended to support distributed settings. Distributed teams do not necessarily have to be separated by several time zones; they can be distributed within a single country. However, offshoring and (partial) outsourcing are common reasons for why many development teams today are distributed. In addition to reduced communication bandwidth, difficulties can emanate from scheduling across time zones, language barriers, and cross-cultural communication issues. As a result, Method Guidance is the dominant modification strategy to overcome these challenges. Interestingly, specific Procedures are more often mentioned as a secondary modification strategy, accompanying Method Guidance. Numerous studies discuss how new procedures or particular forms of multiplicity can support Scrum in a distributed environment. Overall, most studies recommend the multiplication of teams and sometimes procedures, while the main artifacts of Scrum (such as the backlog) are generally advised to be shared across teams (see Table 9).

For example, Paasivaara et al. (2009) offer a list of concrete supporting activities to facilitate distributed Scrum, such as reducing the independence of the sites and synchronization of work hours across sites. The communication challenge can be countered by artifacts such as a digital Scrum board (Esbensen et al., 2015) or knowledge management tools (Sungkur and Ramasawmy, 2014). Lee and Yong (2010) present a more comprehensive modification using the case of Yahoo!, including a multiplicity of procedures, new roles, and artifacts. In distributed environments, procedures for distributing work across teams are proposed (Szoke, 2010). Juxtapositions of methods can also be employed for distributed settings (Banijamali et al., 2017).

Papers addressing distributed development form a relatively mature and coherent body of work; therefore, only a few secondary modification objectives could be extracted. Most commonly, “performance”, particularly in studies that go beyond the fundamental problem of establishing a distributed team but attempt to “fine-tune” work performance in distributed settings.

Outside the scope of our research and sample, dedicated literature reviews are available about distributed development, focusing, for example, on agile practices in global software development (Hossain et al., 2009, Vallon et al., 2018) or global software engineering (Jalali and Wohlin, 2010).


Table 10. Primary and secondary modification strategies for Managerial extensions.

Modification strategy	Primary use	Secondary use	Example of primary use
Method Guidance	10	18	Heikkila et al. (2013)
Procedures	23	8	Barton (2009)
Infusion	7	0	Haidar et al. (2017)
Tools	17	6	Greening (2015)
Artifacts	5	7	Duraisamy and Atan (2013)
Pre-development	0	2	
Multiplicity	4	0	Hoda and Murugesan (2016)
6.6. Managerial extensions
The “Managerial Extensions” objective can be split into two sub-parts: the addition of higher levels of software product management (such as road mapping and establishing a connection to a firm’s overall strategy) on the one hand, and the other hand the integration of managerial tools for coordination, reporting, documentation, etc. Those modifications do not aim to close the gap between development and the strategic processes of the enterprise but rather equip the development process with more accountability and possibly an oversight. Modifications generally stay within the confines of the development process and improve aspects of coordination. Managerial Extensions are most frequently addressed by new procedures (Barton, 2009) with Method Guidance as a secondary strategy. Sometimes, Artifacts and accompanying procedures, as a secondary strategy, are offered to the existing roles to accomplish new managerial tasks. Method guidance is the third most common solution category (see Table 10).

In the first group, we find studies like one by Heikkilä et al. (2017), who demonstrate how the requirements flow from strategy to release in large-scale agile developments calls for various Scrum extensions, such as specialist roles, to manage the significant coordination effort. Other studies describe the need for managerial extensions in small business settings (Suwanya and Kurutach, 2009). In the second group, we find proposals for handling documentation (Duraisamy and Atan, 2013), tools like metrics (Greening, 2015).

Managerial Extensions are often accompanied by the introduction of Scrum to a new context. Besides the management function is a context of its own, we noted contexts such as a “services organization” (Barton and Campbell, 2007) or innovation management (Barton, 2009). The secondary modification objective Performance acknowledges explicit goals to improve the performance of the Scrum development, for instance, by overcoming the short-term focus (Dinakar, 2009) inherent in agile development. Co-occurrence of architecting is manifested in papers that modify Scrum by pre-development activities or procedures for documentation.


Table 11. Primary and secondary modification strategies for User experience.

Modification strategy	Primary use	Secondary use	Example of primary use
Method Guidance	12	16	Hodgetts (2005)
Procedures	24	13	Cavichi de Freitas et al. (2016)
Infusion	10	3	de Carvalho et al. (2016)
Tools	2	3	Peixoto (2009)
Artifacts	4	5	Wautelet et al. (2016).
Pre-development	9	1	Higuchi and Nakano (2017)
Multiplicity	4	1	Budwig et al. (2009)
6.7. User experience
User experience is a critical factor for the acceptance of many software products today. Agile development methods, and Scrum, in particular, aim to accomplish high levels of usability by involving the user in the development process, as well as specifying user acceptance as the final condition that needs to be passed for a backlog item to be considered “done” (James, 2010). Nevertheless, practitioners concerned with the practical design and usability of software offer their work practices that can be absorbed into Scrum. Such practices most commonly take the form of procedures or experience-derived method guidance (Hodgetts, 2005). Sometimes, a codified framework addressing usability or formalized approach from the user experience field is juxtaposed with Scrum, resulting in a significant overhaul of Scrum or infusion (de Carvalho et al., 2016). In those cases, Method Guidance often accompanies the presentation of a radically overhauled Scrum specification. User Experience professionals are often involved at the beginning of the development process (Higuchi and Nakano, 2017), facilitating requirements elicitation (categorized as pre-development). Tools are also offered, albeit rarely (Peixoto, 2009). As a notable tension, some authors advocate for multiplying the development team and introducing multiplicity in the form of a separate team for designers (Budwig et al., 2009), while others claim that developers should be taught UX tasks (Øvad et al., 2015) (see Table 11).

The cluster of disciplines that includes User Experience, Usability, and Human–Computer​ Interactions, has developed a collection of field-specific methods and standards. In our sample, we can often see such techniques being juxtaposed with codified software development methods. Since the UX field is chiefly concerned with working towards a high level of fit between users and the developed product, these modifications often fall into the Architecting category (e.g., persona development, requirements elicitation).

Outside the scope of our research and sample, a recent systematic review summarizes approaches to incorporating UX in Scrum (Kikitamara and Noviyanti, 2018).


Table 12. Primary and secondary modification strategies for Size scaling.

Modification strategy	Primary use	Secondary
use	Example of primary use
Method Guidance	21	16	Heikkila et al. (2013)
Procedures	15	9	Hofman et al. (2012)
Infusion	5	3	Tanveer (2016)
Tools	0	1	
Artifacts	1	3	Bass (2016)
Pre-development	0	2	
Multiplicity	11	3	Sutherland (2005)
6.8. Size scaling
Today, Scrum is often applied in development efforts that outgrow the capability of a single, typical Scrum team (3–6 people; Schwaber, 1997, p. 16). In industrial projects to develop large software artifacts (e.g., Operating Systems), many teams usually contribute to developing the overall product. Increasing the size of the development team puts a strain on coordination, which calls for method guidance. Therefore, a common strategy is to split the developers into several Scrum teams (i.e., utilizing multiplicity). These teams are then arranged in structures such as “Scrum of Scrums” (Sutherland, 2005), which requires additional supporting infrastructure in the form of new procedures and roles. A tension then emerges with the core agile principle of self-organization (Beck et al., 2001a). The communication challenges are among those for which Method Guidance is provided as a secondary modification. In other cases, advice is offered as a primary strategy with procedures supporting it as a secondary strategy. Product line engineering can provide a mechanism of attaining control of the constellation of Scrum teams (Hofman et al., 2012). Size scaling can also be achieved by infusion with a different method such as the Rational Unified Process (Tanveer, 2016) (see Table 12).

As an example for method guidance in this context, Heikkila et al. (2013) present a decision framework for choosing between agile, hybrid, and plan-driven methods in large organizations. Other authors propose governance frameworks for multiple Scrum teams (Paasivaara et al., 2012, Vlietland et al., 2016). In addition to new roles and associated procedures, new artifacts can also prove useful to assist large-scale development (Bass, 2016).

Naturally, size scaling is often addressed jointly with distributed development settings (Bass, 2016). As teams grow in size, the supporting managerial infrastructure is sometimes extended to account for effective coordination among teams and to address alignment between the development work and strategic direction; hence we found “Managerial Extensions” as co-occurring motivation (Hofman et al., 2012). Agile development methodologies are sometimes forced to co-exist with plan-based methods in enterprise settings, resulting in juxtaposition as a co-occurring motivation.

Outside the scope of our research and sample, a recent literature review addressed scaling agile practices to large organizations (Kalenda et al., 2018).


Table 13. Primary and secondary modification strategies for Security.

Modification strategy	Primary use	Secondary use	Example of primary use
Method Guidance	12	6	Doss and Kelly (2016b)
Procedures	12	8	Wang and Wagner (2016)
Infusion	6	4	Maier et al. (2017)
Tools	5	0	Ali and Ben Othmane (2016)
Artifacts	2	3	Wang et al. (2017)
Pre-development	0	0	
Multiplicity	2	0	Koc et al. (2019)
6.9. Security
Scrum is not explicitly concerned with the safety of the resulting software. It does not include procedures or roles for running tests and does not adhere to a specific standard of safety. However, there are numerous applications in which safety is of utmost importance. Papers in this category enable systematic ways of addressing security in Scrum (see Table 13).

Thirty-nine of the reviewed papers were primarily motivated by ensuring or improving safety-related aspects, and eight other papers mentioned security as a secondary driver for modifying Scrum. Software security presents a challenge because “established secure software development methodologies are mostly based on linear models… making them unsuitable for an agile environment” (Maier et al., 2017). In this limited sample, the most common modification strategies were introductions of new procedures like those for recurring safety analysis (Wang and Wagner, 2016) and Method Guidance, for example, in the form of principles (Doss and Kelly, 2016b). In our sample, explicit solutions to security were often connected with a specific context. In two instances, We noted that security practices from other formalized frameworks (i.e., juxtaposition) were introduced (Maier et al., 2017). Technical tools can help make testing more efficient (Ali and Ben Othmane, 2016), but even disciplined development of documentation, as additional artifacts, can be helpful (Wang et al., 2017). It is even possible to employ a multiplicity of procedures and dedicate a sprint specifically to security assurance (Koc et al., 2019). Secondary motivations largely mirror the primary ones.

The Security category is recognized as the smallest but still sufficiently distinctive. The growing number of papers that come from later years of the selection (earliest from 2013) may be a sign of an emerging research topic.

7. Discussion
Our study shows that Scrum is an incredibly versatile method used far beyond its original setting and purpose. As a result of its popularity, Scrum is used as a platform for adaptations to countless different contexts and objectives or as a building block for other methods. All this versatility has been documented in a rich corpus of literature. However, this highly dynamic research field has not been comprehensively integrated with a method-centric approach which stands in the way of cumulative knowledge generation. Such situation is common in emerging and highly active research areas (Keen, 1980). The strong practitioner interest acts as a further driver to the dissemination – and consequently adaptation – of the Scrum method to different contexts (Dybå, 2013, VersionOne, 2018). To this end, we hope that our review can help towards more systematic future research designs.

Our research is – to the best of our knowledge – thefirst that provides a structured overview of the modification objectives and adaptations to Scrum. Some modification objectives, such as Performance or adaptation to Context, attract much interest, while others like Security may see increased interest with the ongoing digitalization of our society and businesses. We use this discussion to first provide more details on our findings’ empirical validity, before turning to implications and strategies for future research. Before concluding, we also acknowledge the limitations of our study.

7.1. Methodological diversity
For researchers and especially for practitioners, the validity of our findings is heavily dependent on the extent of their empirical grounding. It matters whether the reported proposals are just ideas or have been empirically tested in a case company. To inform our readers about the empirical grounding of each combination of modification objective and strategy (e.g., objective: Juxtaposition, strategy: Infusion), we investigated two specific questions for each combination: (i) what is the proportion of empirical studies vs. conceptual studies and (ii) how varied are the empirical approaches employed (e.g., single case studies, surveys) in any given combination. Table 14 gives an overview of our results.

For each combination of modification objective and strategy, the cell holds three lines of information. The first line addresses two proportions of empirical papers (i). Lines two and three address the methodological diversity (ii).


Table 14. Methodological pluralism across modification objectives and strategies.

Method guidance	Procedures	Infusion	Tools	Artifacts	Pre-development	Multiplicity
Performance	58 (65)
Gini: 0.48
diverse	64 (86)
Gini: 0.53
diverse	4 (7)
Gini: 0.5
diverse	38 (61)
Gini: 0.81
single case	13 (17)
Gini: 0.59
diverse	2 (2)
Gini: 0.67
diverse	0 (0)
Context	54 (60)
Gini: 0.86
single case	22 (35)
Gini: 0.70
diverse	48 (68)
Gini: 0.90
single case	1 (2)
Gini: 1.00
single case	5 (5) 
Gini: 0.87
single case	1 (1)
Gini: 1.00
survey	2 (2)
Gini: 0.67
diverse
Architecting	8 (15)
Gini: 0.50
diverse	30 (37)
Gini: 0.53
diverse	5 (8)
Gini: 0.87
single case	11 (18)
Gini: 0.45
diverse	7 (11)
Gini: 0.71
single case	17 (25)
Gini: 0.8
single case	0 (1)
Juxtaposition	7 (15)
Gini: 0.71
single case	2 (2)
Gini: 0.67
diverse	43 (69)
Gini: 0.75
single case	1 (1)
Gini: 1.00
single case	2 (2)
Gini: 1.00
single case	0 (0)	0 (1)
Distributed	43 (56)
Gini: 0.72
single case	12 (15)
Gini: 0.78
single case	4 (5)
Gini: 1.00
single case	5 (7)
Gini: 0.60
diverse	4 (4)
Gini: 0.50
diverse	0 (0)	7 (7)
Gini: 1.00
single case
Managerial extensions	8 (10)
Gini: 0.50
diverse	16 (23)
Gini: 0.42
diverse	7 (7)
Gini: 0.90
single case	6 (17)
Gini: 0.67
diverse	4 (5)
Gini: 0.67
diverse	0 (0)	3 (4)
Gini: 0.78
single case
User experience	12 (12)
Gini: 0.61
diverse	16 (24)
Gini: 0.67
diverse	8 (10)
Gini: 0.67
diverse	1 (2)
Gini: 1.00
multi. case	3 (4)
Gini: 1.00
single case	9 (9)
Gini: 0.48
diverse	4 (4)
Gini: 1.00
single case
Size scaling	20 (21)
Gini: 0.57
diverse	14 (15)
Gini: 0.95
single case	4 (5)
Gini: 0.83
single case	0 (0)	1 (1)
Gini: 1.00
survey	0 (0)	10 (11)
Gini: 0.80
single case
Security	6 (12)
Gini: 0.78
single case	6 (12)
Gini: 0.89
single case	4 (6)
Gini: 1.00
single case	1 (4)
Gini: 1.00
single case	2 (2)
Gini: 1.00
single case	0 (0)	2 (2)
Gini: 0.67
diverse
The number of empirical cases is given in the first line, followed by the absolute number of studies in brackets. For example, 43 (76) means that we found 43 empirical studies out of 76 total studies for this combination. These numbers on the first line of each cell already enable evaluating the empirical strength of a certain combination. While we are not imposing our scale or evaluation principle by categorizing papers (e.g., into low or strong empirics), we hope to support readers in their assessment by providing this overview.

Beyond empirical strengths, we employed the Gini coefficient as a measure for methodological pluralism, i.e., the concentration or dispersion or variety of different types of empirical approaches that have been used to study a certain combination (Roth, 2019). Again, we do not argue that one empirical design, e.g., a survey, may be more valuable than a single case study. On the contrary, there is common agreement among scholars that methodological pluralism is particularly beneficial to fields that study contemporary and complex phenomena, as it may offset the limitations of one method by the strength of another (Chamberlain et al., 2011, Frost et al., 2014). In the words of (Barnes et al., 2014), methodological plurality “produces more complex, richer understandings of the topic under investigation”. (p. 35).

In each cell’s second line, we show a measure of the concentration of empirical approaches for each combination, differentiating between single case studies, multiple case studies, survey designs, and experiments. To calculate the concentration, we relied on the widely accepted Gini coefficient for measuring statistical concentration (Gini, 1912). Specifically, we provide a normalized form of the Gini coefficient, which gives values from zero to one and enables easy interpretation. The highest values of the normalized Gini coefficient mean that all empirical studies in the cell are conducted using a single method. Zero denotes equal distribution across all methods. The calculation of the Gini coefficient was conducted using the R software package REAT from Wieland (2019, p. R4).

In the third line of each cell, we report the single most used – or dominant – empirical research design applied for this combination. If the Gini coefficient scores below 0.7, it indicates that a multitude of various empirical approaches has been applied with no single dominant design, in which case we noted the combination to be methodologically “diverse”.

7.2. Implications for research and practice
As highlighted in Table 4, Table 14, the insights provided in this study, have direct implications for the advancement of the field in research and practice. For practitioners, our research helps to easily identify relevant studies that can guide situations where similar modification objectives arise and avoid unnecessary and costly trial and error experimentation.

For academics, our findings serve to reveal areas for promising future research activities. We show the relevance of certain combinations, as indicated by the number of studies that are pursuing method adaptations for a certain purpose, as well as strengths or weaknesses in terms of rigor, as indicated through the share of empirical studies and the breadth of empirical methods applied.

For example, practitioners may find it reassuring that “method guidance” as a means for the objective of “Managerial Extensions” has been studied empirically in eight out of ten studies, and that these studies applied a wide range of empirical approaches to look at this phenomenon (Gini  0.50). On the other hand, when looking at the use of “Tools” for achieving increased “Security”, only a single empirical study has been conducted out of five total studies, indicating a lack of information regarding the practical applicability of this modification approach.

The overwhelming focus on single case studies as a dominant empirical method without theoretical framing leads to the current state of “Dustbowl empiricism” (APA Dictionary of Psychology, 2018). More and more proposals addressing similar situations are being added to the corpus of literature. Our analysis shows that the literature lacks a cumulative research tradition, failing to link findings to previous research or benefit from relevant literature reviews. About 78% of the reviewed papers were presented at conferences, where the shorter format does not typically allow for an extended review of related literature. References to published literature reviews could be used in place of dedicated reviews in papers, but not a common practice. The current situation seemingly satisfies earlier calls for contextualized research in the software engineering domain (Clarke and O’Connor, 2012) which urges for “research to operate in clearly defined contexts, enabling us to identify realistic working assumptions and identify important, well-defined problems, as well as create opportunities for realistic evaluations” (Briand et al., 2017). However, throughout the literature, similar modifications introduced in response to near-identical modification objectives are reported repeatedly, and new publications motivated by previously addressed problems ignore previous literature. Such approach to research is concerning as it stands in the way of cumulative knowledge generation and risks the ongoing “reinvention of the wheel” (Hassan and Mathiassen, 2018, Keen, 1980).

For example, integrating User Experience professionals in Scrum, both proposals for integrating designers in the development team (Øvad et al., 2015) and keeping them separate (Singh, 2008) are documented as functional. Cross-comparison of those approaches, ideally with backing, in theory, would be interesting and highly relevant to the advancement of the field.

7.3. Strategies for future research
Based on our findings, we see two broad strategies that can help to substantially improve the systematic advancement of the field: improving cross-citation and theoretical framing.

Cross-citation requires future researchers to build on prior studies, and thus, to easily access and situate their research endeavor within the existent body of knowledge. The systematization offered in this paper is a step intended towards encouraging and enabling such efforts. Authors of future empirical work may use the presented synthesis of modification objectives and strategies to categorize their research plans against similar research and further follow the listed references to identify relevant prior studies easily. A variety of narrower, focused reviews is available, which have been referenced throughout this manuscript. This way, a systematic approach to assess the novelty of the intended or proposed activities is supported which may support the emergence of a more cumulative research tradition.

The second broad strategy to overcome the apparent lack of cumulative tradition is anchoring empirical research studies in theoretical framings. Without explicitly linking novel modifications to the underlying principles of agile approaches, it is difficult to assess which modifications will undermine it and which will enforce it. The lack of theoretical underpinning becomes particularly acute as the ideas of agile approaches have traveled from software development to generic project management and even to fields like organizational design (Gerster et al., 2020). Without theoretical consolidation and synthesis of key characteristics and mechanisms of the phenomenon, the literature stream is at risk of being reduced to a set of techniques and methodologies without facilitating real understanding (Cram and Newell, 2016). This concern echoes earlier calls for “the need for a better understanding of what constitutes ‘agility”’ (Abrahamsson et al., 2009, Conboy, 2009).

7.4. Limitations
We acknowledge that this study has certain limitations. We consistently aimed for the highest level of rigor and transparency in the literature search and filter process, yet there remains a risk of researcher bias resulting in having overlooked relevant studies that did not match our keyword thesaurus (Feldt and Magazinius, 2010). This risk was mitigated by ongoing discussion between researchers to design as comprehensive a filter as possible.

Many studies in the literature are written from the standpoint of advocating agile development and, hence the sample is skewed towards presenting positive results. This is accentuated by the fact that many of the publications are experience reports where the authors participated in the development. The reliance on experience reports further potential for bias in the sample. We, however, circumvented the absence of negative results by constructing our review around the effort of systematizing particular contexts and strategies where Scrum is reported to be successfully adopted.

Our coding process could have been affected by subjective bias. We attempted to counter this threat to validity by the ongoing discussion of the coding process and supplying supporting literature for our claims in the manuscript itself. Although alternative views of the data could be reached by different analysts (as is always the case when working with qualitative data), both authors agreed on the categorization scheme as robust and leading to the insightful discussion. We further addressed this potential limitation by discussing working versions of the manuscript with knowledgeable colleagues.

Our coding process was also limited concerning assessing validity threats and mitigation strategies (Feldt and Magazinius, 2010). Lacking a detailed analysis of validity for each study in our sample, we instead opted for a less granular quality assessment to evaluate primary literature, as described in Section 4.3.

Moreover, we limited our literature search to academic journal publications and conference proceedings but did not include relevant practitioner literature on the topic—often published in online blogs or non-indexed industry magazines. While the large sample size of our review and the repeated occurrence of topics across studies in our sample provide ample evidence for our findings, we encourage future research to expand our insights, e.g., through the inclusion of or comparison with practitioner outlets.

8. Conclusion
We conducted a large-scale systematic literature review investigating why and how Scrum is being modified in practice. By reviewing a final sample of 925 studies, we developed nine categories of modification objectives connected to seven generic modification strategies. Our review confirms the applicability of Scrum to a variety of contexts (from standard small, co-located teams to large-scale distributed development) but also highlights the need for good practices to ensure that the benefits of using an agile method remain in place. The main contribution of this work is the synthesis of a fragmented body of literature that lacks a cumulative tradition. Through this synthesis, this study provides an exhaustive overview and discussion of extant knowledge, which at the same time can serve as a blueprint for future research.