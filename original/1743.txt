Approximate computing is an attractive design methodology to achieve low power, high performance (low delay) and reduced circuit complexity by relaxing the requirement of accuracy. In this paper, approximate Booth multipliers are designed based on approximate radix-4 modified Booth encoding (MBE) algorithms and a regular partial product array that employs an approximate Wallace tree. Two approximate Booth encoders are proposed and analyzed for error-tolerant computing. The error characteristics are analyzed with respect to the so-called approximation factor that is related to the inexact bit width of the Booth multipliers. Simulation results at 45 nm feature size in CMOS for delay, area and power consumption are also provided. The results show that the proposed 16-bit approximate radix-4 Booth multipliers with approximate factors of 12 and 14 are more accurate than existing approximate Booth multipliers with moderate power consumption. The proposed R4ABM2 multiplier with an approximation factor of 14 is the most efficient design when considering both power-delay product and the error metric NMED. Case studies for image processing show the validity of the proposed approximate radix-4 Booth multipliers.
SECTION 1Introduction
Multipliers are widely used in arithmetic units of microprocessors, multimedia and digital signal processors; moreover, high performance and low power multipliers are in high demand for embedded systems. It is becoming extremely difficult to further improve performance and reduce the power consumption of multipliers under the requirement of full accuracy; however, the requirements of high precision and exactness are not so strict for many applications related to human perception, such as multimedia signal processing and machine learning. High precision and exactness in the operations of digital logic circuits are related to the generally accepted requirement of correctness of information processing; numerous error-tolerant applications can be found in computing and by relaxing the requirement of strict accuracy, performance and power consumption can be substantially improved [1]. This design principle is generally known as approximate or inexact computing [2].

As the basic operations of an arithmetic processor, addition and multiplication are very important for achieving high performance. Addition has been extensively studied for approximate computing for reduction in power consumption and delay [3], [4], [5]. New metrics including error distance (ED), mean error distance (MED) and normalized error distance (NED) have been proposed for evaluating the designs of approximate adders [6].

Approximate multiplication has not been extensively studied despite its importance for arithmetic processing and systems; multiplication is more complex compared with addition, because it requires the accumulation of partial product rows. The most widely used high performance multiplier consists of a modified Booth encoding (MBE) to reduce the number of partial product rows by half as the first step [7], [8].

The current designs for an approximate multiplier can be categorized as truncation and non-truncation schemes. A truncation-based design relies on a simple approximation in which either the lower part of the partial products is removed, or the least significant partial products are estimated by a constant (so referred to as fixed-width multiplier design [9]); however, the error generated by the truncated partial product rows can be rather large. Therefore, error compensation strategies have been proposed to increase the accuracy of truncated multipliers; an inexact array multiplier has been proposed by ignoring some of the least significant columns of the partial products and considering them as a constant [3]. In [10], the truncated multiplier utilizes a correction constant selected according to both the reduction and rounding errors. However, this truncated multiplier incurs a very large error if the partial products in the least significant columns are all ones or all zeros; therefore, a truncated multiplier with variable correction has been also proposed in [11]. Recently, a few error compensation strategies have been proposed to further improve the accuracy of fixed-width Booth multipliers [9], [12], [13], [14], [15]. An error is compensated with the outputs of the Booth encoders in [9]; the error compensation circuit proposed in [12] mainly uses a simplified sorting network. An adaptive conditional-probability estimator has been proposed in [15] to compensate the quantization error of a fixed-width Booth multiplier. These truncated Booth multipliers use error compensation circuits to improve the accuracy. However, the extra compensation circuits require additional hardware; approximate computing can be employed to reduce such overhead.

A non-truncation scheme utilizes approximate circuits to assemble an approximate multiplier. An approximate 2×2 multiplier has been proposed in [16] by simplifying its logic expression using a Karnaugh-Map (K-map); this circuit is then used as a basic block for larger size multipliers. Compressors or counters are widely used to accelerate the accumulation of partial products in the design of a high-speed multiplier [17], [18]; an inexact 4:2 counter has been used to design an approximate 4×4 Wallace multiplier for assembling larger size multipliers [17]. Two approximate 4-2 compressors are proposed in [18] and used in a Dadda tree of 8×8 array multipliers. An 8×8 multiplier using approximate adders that ignore carry propagation between partial products, has been proposed in [19]. Hybrid Approximate Multiplier (HAM) schemes are proposed by exploring perforation, logic approximation and voltage over-scaling techniques in [20]. It is found that higher power savings for the same error values can be achieved by applying hybrid approximation techniques than using only single design techniques. A dynamic range unbiased multiplier (DRUM) with a dynamic range selection scheme is proposed in [21]; this scheme based on approximation in operands has an unbiased error distribution. In [22], approximate radix-8 Booth multipliers are proposed by using an approximate 2-bit adder for generating the odd multiples (×3) of the multiplicand.

However, there is little study in the technical literature on the approximate design of a radix-4 Booth multiplier as one of the most popular schemes for signed multiplication. In the first step of a radix-4 Booth multiplier, a radix-4 modified Booth encoding (MBE) is used to generate the partial products [23] ; a radix-4 MBE can reduce the number of partial products by a factor of two. The implementation of the MBE significantly affects the area, delay and power consumption of Booth multipliers [24]; in the traditional MBE algorithm, an extra partial product bit is generated at the least significant bit (LSB) position of each partial product row due to the negative encoding. This leads to an irregular partial product array as requiring a complex reduction tree.

In this paper, two approximate radix-4 MBE algorithms are proposed and analyzed. Booth multipliers are designed based on the proposed radix-4 MBEs, in which a regular partial product array is achieved by using the proposed approximate Wallace tree structure. The error characteristics are analyzed with an approximation factor that is related to the inexact bit width of the Booth multipliers. Simulation results at 45 nm CMOS technology on delay, area, power consumption are also provided. Case studies for image processing are presented to show the validity of the proposed approximate radix-4 Booth multipliers.

This paper is an extension of our previous work presented in [25]; the main differences and novel contributions are summarized as follows:

A more efficient approximate radix-4 Booth encoder is proposed in this paper. The designs of both approximate radix-4 Booth encoders are presented and extensively analyzed.

Approximate Booth multipliers are proposed using approximate Booth encoders, in which the features of an approximate regular tree structure are illustrated in detail.

An approximation factor is proposed to assist in the design of the approximate Booth multipliers and facilitate its error analysis.

The proposed approximate Booth multipliers are comprehensively evaluated with respect to both hardware implementation and error analysis.

The proposed approximate Booth multipliers are applied in image processing.

The paper is organized as follows. Section 2 presents the design of approximate radix-4 Booth multipliers based on two approximate Booth encoders and an approximate Wallace tree, which are also discussed in detail in this section. Section 3 presents the error analysis and the simulation results on area, delay and power consumption. The application of the proposed approximate Booth multipliers to image processing is presented in Section 4. Conclusion is provided in Section 5.

SECTION 2Approximate Radix-4 Booth Multipliers
A Booth multiplier consists of three parts: partial product generation using a Booth encoder, partial product accumulation using compressors and final product generation using a fast adder. The approximate design of radix-4 Booth encoding is studied in this section. A more efficient approximate radix-4 Booth encoding method is proposed in this section by carefully considering the error characteristics. Furthermore, an approximate partial product array produced by the Booth encoding is also designed to make it regular, such that a reduction stage is saved. Approximate Booth multipliers are designed based on the approximate Booth encoder and the regular approximate partial product array.

2.1 Review of Radix-4 Booth Multiplication
Booth encoding has been proposed for improving the performance of multiplication of two's complement binary numbers [7]; it has been further improved by the MBE or radix-4 Booth encoding [8]. The Booth encoder plays an important role in the Booth multiplier, which reduces the number of partial product rows by half.

Consider the multiplication of two N-bit integers, i.e., a multiplicand A and a multiplier B in two's complement; this is given as follows:
A=−aN−12N−1+∑i=0N−2ai2i,(1)
View SourceRight-click on figure for MathML and additional features.
B=−bN−12N−1+∑i=0N−2bi2i.(2)
View SourceRight-click on figure for MathML and additional features.

In a Booth encoder, each group is decoded by selecting the partial products as −2A, − A, 0, A, or 2A. The negation operation is performed by inverting each bit of A and adding a ‘1’ (defined as Neg) to the LSB [23], [24].

The circuit diagrams of the radix-4 Booth encoder and decoder are provided in [23] . The output (i.e., the partial product, ppij ) of the Booth encoder is given as follows:
ppij=(b2i⊕b2i−1)(b2i+1⊕aj)+(b2i⊕b2i−1)¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯(b2i+1⊕b2i)(b2i+1⊕aj−1).(3)(4)
View SourceRight-click on figure for MathML and additional features.

2.2 Approximate Radix-4 Booth Encoding Method 1
The K-map of the first approximate radix-4 Booth encoding (R4ABE1) method is shown in Table 1, where ◯0 denotes an entry in which a ‘1’ is replaced by a ‘0’. Only four entries are modified to simplify the Booth encoding; the strategy for the first approximate design is to make the truth table as symmetrical as possible and introduce a small error. Thus, the advantage of the R4ABE1 design is that a very small error occurs, as only four entries are modified; however, all modifications change a ‘1’ to a ‘0’, so the absolute value of approximate product is always smaller than its exact counterpart.

TABLE 1 K-Map of R4ABE1

The modified truth table shows two XOR functions; therefore, the output of R4ABE1 is given as follows:
ppij=ajb2i+1b2i¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯b2i−1+ajb2i+1¯¯¯¯¯¯¯¯¯¯b2ib2i−1¯¯¯¯¯¯¯¯¯¯  +aj¯¯¯¯¯b2i+1b2ib2i−1¯¯¯¯¯¯¯¯¯¯+aj¯¯¯¯¯b2i+1b2i¯¯¯¯¯¯b2i−1=(b2i⊕b2i−1)(b2i+1⊕aj)(5)(6)(7)
View Source

Compared with the exact MBE (Eq. (3)), R4ABE1 can significantly reduce both the complexity and the critical path delay of Booth encoding. The error rate (defined as the probability that at least a bit differs from the exact result, given a uniform distribution of inputs), denoted by Pe, is given by:
Pe=4/32=12.5%.(8)
View Source

The gate level structure of R4ABE1 is shown in Fig. 1a; the conventional design of MBE [23] consists of four XNOR-2 gates, one XOR-2 gate, one OR-3 gate, one OR-2 gate and one NAND-2 gate. The R4ABE1 design only requires two XOR-2 gates and one AND-2 gate. If the 2-input XOR and XNOR gates are implemented using transmission gates and the other gates are implemented as a complex gate, the transistor count of the MBE for a full CMOS implementation is 34 [23] , while the transistor count of the proposed R4ABE1 is only 12, i.e., a reduction of over 64% in terms of circuit complexity is achieved.


Fig. 1.
The gate-level circuit of: (a) R4ABE1 and (b) R4ABE2.

Show All

By using a normalized gate delay model of [23] ( Table 2), the conventional MBE has a normalized delay of 2.5; therefore, its critical path delay is reduced to 1.7 unit delay in the R4ABE1 design, i.e. an improvement of 32 percent in delay.

TABLE 2 Normalized Gate Delay [23]

2.3 Approximate Radix-4 Booth Encoding Method 2
The truth table of the second approximate radix-4 Booth encoding (R4ABE2) method is shown in Table 3, where ◯1 denotes a ‘0’ entry that has been replaced by a ‘1’; eight entries in the K-map are modified to simplify the logic of the Booth encoding. The strategy for R4ABE2 is that in addition to having a symmetric truth table at a small error, the number of prime implicants (identified by rectangle) should be as small as possible too. Although the error introduced by R4ABE2 is nearly doubled compared with R4ABE1, the modification is achieved by not only changing a ‘1’ to a ‘0’, but also changing a ‘0’ to a ‘1’. Thus, the approximate product can be either larger or smaller than the exact product and errors can complement each other in the partial product reduction process. Therefore, when using R4ABE2 in a Booth multiplier, the error may not be larger than for a Booth multiplier with R4ABE1. This is further discussed in Section 3.2.

TABLE 3 K-Map of R4ABE2

The modified truth table contains only two prime implicant rectangle; therefore, the output of R4ABE2 is given as follows:
ppij=ajb2i+1¯¯¯¯¯¯¯¯¯¯+aj¯¯¯¯¯b2i+1=b2i+1⊕aj.(9)
View Source

R4ABE2 further reduces the complexity and critical path delay compared with R4ABE1 ( Eq. (4)). The error rate is now given by:
Pe=8/32=25%.(10)
View Source

The gate-level circuit of R4ABE2 is shown in Fig. 1b. R4ABE2 only requires one XOR-2 gate by using transmission gates, so the transistor count of R4ABE2 is 4. R4ABE2 reduces the complexity of the Booth encoder by over 88 percent compared with MBE. By using the normalized gate delay model in Table 2 [23], the critical path delay of R4ABE2 is 1.0; so, it improves the delay by 60 percent compared with MBE.

2.4 Approximate Regular Partial Product Array
For a more regular partial product array (requiring a smaller reduction stage), the Neg term in the (N/2+1)th row of the approximate design of a Booth multiplier can be ignored (shown as △ in Fig. 2a). For an N-bit radix-4 Booth multiplier when N is a power of 2, removing the extra Neg term significantly reduces the critical path, area and power when the 4-2 compressor is used for the partial product accumulation. In the approximate partial product array ( Fig. 2b), one reduction stage is saved; this significantly reduces the complexity and critical path delay. The error rate of the approximate partial product array with the ignored Neg bit is 37.5 percent and its logic function is given by:
NegN/2−1=b2N+1b2N¯¯¯¯¯¯¯+b2N+1b2N−1¯¯¯¯¯¯¯¯¯¯¯¯=b2N+1b2Nb2N−1¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯.(11)
View Source


Fig. 2.
The 8×8 Booth multiplier using: (a) exact irregular partial product array, (b) approximate regular partial product array by ignoring the Neg term in the 5th partial product row. (The exact partial product term is represented by •, while the approximate partial product term is represented by ▪. ○ and ◯∘ represent the sign extension bit and the Neg term.)

Show All

2.5 Design of Approximate Booth Multipliers
R4ABE1 and R4ABE2 are applied to a Booth multiplier design. In the approximate Booth multiplier, the proposed approximate Booth encoders, i.e. R4ABE1 and R4ABE2, are used in the first part to generate the inexact partial products. The approximate Booth encoders can then be used in all or only part of the partial product generation process; therefore, an approximation factor p(p=1,2,…,2N) is defined as the number of least significant partial product columns that are generated by the approximate Booth encoders. The approximate partial products are accumulated with the exact 4-2 compressor. The last part uses an exact carry-lookahead adder (CLA) to compute the final product result.

Two types of approximate Booth multipliers are proposed:

The first approximate radix-4 Booth multiplier (R4ABM1) uses R4ABE1 (to generate the p least significant partial product columns) and the regular approximate partial product array. The exact MBE is used for generating the 2N-p most significant partial product columns. The exact 4-2 compressors are used to accumulate both approximate and exact partial products.

Similar as R4ABM1, the second approximate radix-4 Booth multiplier (R4ABM2) uses R4ABE2 (to generate the p least significant partial product columns), the regular approximate partial product array and the exact 4-2 compressors.

As the error is controlled by the approximation factor p, a reasonable accuracy can be achieved for different applications; Fig. 2b shows an approximate 8×8 Booth multiplier using either R4ABE1, or R4ABE2 with p=8.

For p<7 of any word length, the delay of an approximate Booth multiplier is only improved by the approximate regular partial product array, since the critical path starts from p=7. For p>6, the delay of the entire multiplier can be further reduced due to the approximate Booth encoder. However, for both cases, the approximate design of a Booth encoder can significantly reduce the area and power consumption.

SECTION 3Evaluation and Analysis
3.1 Encoder Design Evaluation
The proposed two approximate Booth encoders, i.e. R4ABE1 and R4ABE2, are described at gate-level in Verilog HDL and verified by Synopsys VCS. Both designs are then synthesized by the Synopsys Design Compiler using the NanGate 45 nm Open Cell Library. In the simulation of each design, a supply voltage of 1.25 V and room temperature are assumed. Standard buffers of a 2X strength are used for both the input driver and the output load; the average power consumption is found using the Synopsys Power Compiler with a back annotated switching activity file generated from the random input vectors.

Table 4 summarizes the power, delay, area, power-delay product (PDP) and error rates of the exact and approximate Booth encoders.

TABLE 4 Comparison Between Exact and Approximate Booth Encoders to Generate One Partial Product Bit
Table 4- 
Comparison Between Exact and Approximate Booth Encoders to Generate One Partial Product Bit
The approximate Booth encoders significantly reduce the PDP; R4ABE2 reduces the PDP by over an order of magnitude compared with MBE, as the best performing Booth encoder. However, the error rate introduced by R4ABE2 is also the largest; R4ABE1 generates half of the error of R4ABE2 and reduces the PDP by up to 59 percent compared with MBE. The error characteristics of approximate multipliers using these approximate Booth encoders are studied next.

3.2 Error Analysis and Evaluation
Although the error rate of each approximate circuit (or module) has been presented, the error characteristics of the entire approximate Booth multiplier must be also considered. For approximate designs, several metrics have been proposed to measure the error of approximate adders and multipliers including the mean error distance (MED), the relative error distance (RED) and the normalization of MED (NMED) [6], [22]. Several error metrics are used to fairly compare different approximate designs of various sizes:

The NMED is defined as the normalized MED by the maximum output of the accurate design.

RED is defined as the ED over the absolute accurate result. Mean RED (MRED) and PRED are usually used to evaluate the error distribution of approximate multipliers, where PRED is the probability of obtaining a RED smaller than a specific percentage value that is assumed to be 2 percent throughout the paper.

The error metrics of the proposed approximate multipliers are provided in Table 5 for 8-bit and 16-bit designs; Table 5 shows that with an increase of p, the accuracy of both approximate multipliers decreases. MRED increases with an increase of p and the MRED of R4ABM2 is generally larger than that of R4ABM1. PRED (the probability of getting a RED smaller than 2 percent) of both the 8-bit R4ABM1 and R4ABM2 decrease rapidly when 4 < p < 12. PRED of the 16-bit designs is larger than 90 percent when p < 16. The error rates for 8-bit and 16-bit approximate Booth multipliers are also shown in Table 5; the error rate is increased by increasing p. The error rate of R4ABM1 is smaller than for R4ABM2 at the same value of p because the error rate of R4ABE-1 (12.5 percent) is significantly smaller than for R4ABE2 (25 percent). However, for error analysis, the most important error metric is in this case the difference between the exact and the approximate values, so related to the error distance (i.e. NMED).

TABLE 5 Error of Proposed 8-bit and 16-bit Approximate Multipliers at Different Approximation Factors (ER: Error Rate)

Consider next the NMED; although the error rate of R4ABM1 is smaller than for R4AMB2, the NMED of R4ABM1 is larger than for R4ABM2 when 2 < p <10 for 8-bit and when 6 < p < 28 for 16-bit. This occurs because there are only positive errors in R4ABE1, while both positive and negative errors are introduced in R4ABE2. Hence, they can complement each other, such that smaller errors are generated overall when using R4ABE2 in an approximate multiplier. This is further demonstrated with the peak signal-noise ratio (PSNR) results for the image application in Section 4. An 8-bit approximate Booth multiplier design with a value of p not larger than 8 is a good choice for an error-tolerant application; for a 16-bit approximate Booth multiplier design, p should not be larger than 20 for a reasonable tradeoff between accuracy and low power.

3.3 Approximate Multiplier Hardware Evaluation
Evaluation by simulation is pursued for the proposed approximate multipliers under the same conditions as in Section 3.1. The critical path delay, area, power consumption and PDP are reported in Tables 6 and 7 for 8-bit, 16-bit and 32-bit exact radix-4 Booth multipliers (R4EBM), R4ABM1 and R4ABM2 at different values of the approximation factor. With an increase of the approximation factor p, the power consumption and PDP decrease significantly. The PDPs of both R4ABM1 and R4ABM2 are significantly lower than for R4EBM; the critical path delay is also reduced, leading to an overall better performance. R4ABM2 is better than R4ABM1 in terms of power, delay, area and PDP; this is consistent with the comparison results for R4ABE1 and R4ABE2. Not surprisingly, the use of a simpler approximate Booth encoder in R4ABM2 leads to a high-performance and power-efficient approximate design.

TABLE 6 Designs (45 nm Technology) of 8-bit and 16-bit Approximate Multipliers at Different Approximation Factors

TABLE 7 Designs (45 nm Technology) of 32-bit Approximate Multipliers at Different Approximation Factors
Table 7- 
Designs (45 nm Technology) of 32-bit Approximate Multipliers at Different Approximation Factors
3.4 Comparison of Approximate Booth Multipliers
The proposed designs at large p values have large NMEDs, but small PDPs; moreover, the proposed 16-bit R4ABM1 and R4AMB2 with p < 20 show a good tradeoff between PDP and NMED. Therefore, both proposed 16-bit designs with p=12, 14, 16 and 18 are compared with previous approximate 16-bit Booth multipliers that have been proposed in [9] (R4BM04), [12] (R4ABM11), [15] (R4ABM12), and [22] (R8ABM1, R8ABM2-C9 and R8ABM2-C15). R8ABM1, R8ABM2-C9 and R8ABM2-C15 are all radix-8 approximate Booth multipliers with no truncation, 9-bit truncation and 15-bit truncation, respectively. R8ABM2-C9 and R8ABM2-C15 are also designed with the compensation circuits. Also in these cases, all designs are described in Verilog as combinational multipliers and synthesized by the Synopsys Design Compiler using the NanGate 45 nm Open Cell Library.

The power consumption, delay, area, PDP, NMED and error rate are reported in Table 8. The proposed R4ABM1 and R4ABM2 can reduce the power consumption significantly (in a range of 25∼31 percent) compared with the accurate design, i.e., R4EBM. The area of the proposed designs is also much smaller (up to 32 percent) than that of their exact counterpart. The delay of the proposed approximate designs can be improved by up to 12 percent when p=18. Therefore, the PDPs of both R4ABM1 and R4ABM2 are significantly smaller than R4EBM (up to 39 percent).

TABLE 8 Comparative Performance of Approximate Booth Multipliers

Although the approximate radix-8 designs show good performance in terms of power consumption and PDP, their delay is generally higher than the proposed designs. The power and PDP results of R8ABM2-C15 are the best among all approximate Booth multipliers; however, it also has a large NMED and error rate. The most accurate approximate radix-8 design is R8ABM1; and its accuracy cannot be further increased. This is also the drawback of the fixed-width Booth multipliers, i.e., R4ABM04, R4ABM11, and R4ABM12, where accuracy is not adjustable and their NMED and ER are significantly larger than the proposed designs when p<16. However, the accuracy of our proposed designs can be changed along with PDP to meet various application requirements.

Among all approximate Booth multipliers, only the proposed designs with p=12 and p=14 have NMEDs that are smaller than 10−5; and their accuracy can be further improved by applying a smaller p. This is achieved with no error compensation or recovery. The choice of p is dependent on different specific applications that are error-tolerant; for applications that can tolerant more error, the proposed approximate Booth multipliers with larger p can be used to further reduce the power and delay.

The approximate Booth multipliers are further compared in terms of both PDP and NMED. Fig. 3 shows that the proposed R4ABM2 (p=14) is the most efficient design when considering both PDP and NMED. Both R4ABM1 and R4ABM2 with p=12 show better NMED but larger PDP, while R4ABM11 and R4ABM12 have better PDP but larger NMED. Although an approximate radix-8 design, especially R8ABM2-C15, has a small PDP, its large NMED makes it less attractive when considering both power consumption and accuracy. These results confirm that both proposed designs with p=12 and p=14 are more accurate than previous approximate Booth multipliers with moderate power consumption.


Fig. 3.
PDP versus NMED for approximate Booth multipliers.

Show All

SECTION 4Case Study: Image Processing
In this section, 8-bit R4ABM1 and R4ABM2 with various p are applied to image processing; two images are multiplied on a pixel-by-pixel basis to blend them into a single output image. As Booth multipliers perform signed multiplication, the pixel values have been shifted from 0∼255 to −128∼127. The approximate designs are modeled in C that is called by Matlab for image processing. The peak signal-to-noise ratio (PSNR) is used to assess the quality of the output image.

As shown in Figs. 4 and 5, the quality of the processed image deteriorates with an increase of p. The output image is still viable when p is smaller than 12, thus confirming the error analysis presented previously. The PSNRs of all subfigures shown in Figs. 4 and 5 are provided in Table 9; the PSNR drops significantly when p is larger than 10. The PSNR of the output images processed by R4ABM2 is larger compared with R4ABM1; this finding is again consistent with the previously presented error analysis in Section 3.2. Both R4ABM1 and R4ABM2 with p<10 can be used in image processing applications with no significant loss of quality.

Fig. 4. - 
Image multiplication using R4ABM1 with different p: (a) ${{p\,= \,0}}$
, (b) 
${{p\,= \,2}}$
, (c) 
${{p\,= \,4}}$
, (d) ${{p\,= \,6}}$
, (e) 
${{p\,= \,8}}$
, (f) ${{p\,= \,10}}$
, (g) 
${{p\,= \,12}}$
, and (h) ${{p\,= \,14}}$
.
Fig. 4.
Image multiplication using R4ABM1 with different p: (a) p=0 , (b) p=2, (c) p=4, (d) p=6, (e) p=8, (f) p=10, (g) p=12, and (h) p=14.

Show All

Fig. 5. - 
Image multiplication using R4ABM2 with different p: (a) ${{p\,= \,0}}$
, (b) 
${{p\,= \,2}}$
, (c) 
${{p\,= \,4}}$
, (d) ${{p\,= \,6}}$
, (e) 
${{p\,= \,8}}$
, (f) ${{p\,= \,10}}$
, (g) 
${{p\,= \,12}}$
, and (h) ${{p\,= \,14}}$
.
Fig. 5.
Image multiplication using R4ABM2 with different p: (a) p=0 , (b) p=2, (c) p=4, (d) p=6, (e) p=8, (f) p=10, (g) p=12, and (h) p=14.

Show All

TABLE 9 PSNR of Processed Images Using Approximate Booth Multipliers at Different Approximation Factors
Table 9- 
PSNR of Processed Images Using Approximate Booth Multipliers at Different Approximation Factors
SECTION 5Conclusion
Designs of approximate radix-4 Booth multipliers have been studied in this paper. Two approximate Booth encoders have been proposed to reduce the complexity of MBE by introducing incorrect terms in the truth table, resulting in a reduction of the PDP by up to 59 percent. An approximation factor has been proposed to indicate the inexact bit width of the Booth multiplier and facilitate the error analysis of proposed designs. Based on the two proposed approximate Booth encoders, i.e., R4ABE1 and R4ABE2, two approximate Booth multipliers have been designed with different approximation factors. An approximate Wallace tree structure has been designed for use in the partial product accumulation array. The power, delay and PDP of the proposed designs have been evaluated at 45nm CMOS technology.

The error characteristics of the proposed designs have been studied at different values of the approximation factor (p) to establish a suitable balance between various figures of merit such as PDP and NMED. The proposed designs have been compared with previous approximate Booth multipliers; results presented in this paper have shown that the proposed R4ABM2 with p=14 is the most efficient design when considering both PDP and NMED. Both proposed designs with p=12 and p=14 are more accurate than previous approximate Booth multipliers with moderate power consumption. The proposed designs have also been applied to image processing, resulting in a very small loss of accuracy.