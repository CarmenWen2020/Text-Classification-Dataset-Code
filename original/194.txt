We present GyroPen, a method to reconstruct the motion path for pen-like interaction from standard built-in sensors in modern smartphones. The key idea is to reconstruct a representation of the trajectory of the phone's corner that is touching a writing or drawing surface from the measurements obtained from the phone's gyroscopes and accelerometers. We propose to directly use the angular trajectory for this reconstruction, which removes the necessity for accurate absolute 3-D position estimation, a task that can be difficult using low-cost accelerometers. We connect GyroPen to a handwriting recognition system and perform two proof-of-concept experiments to demonstrate that the reconstruction accuracy of GyroPen is accurate enough to be a promising approach to text entry. In a first experiment, the average novice participant (n=10) was able to write the first word only 37 s after the starting to use GyroPen for the first time. In a second experiment, experienced users (n=2) were able to write at the speed of 3-4 s for one English word and with a character error rate of 18%.

Page(s): 263 - 271

Date of Publication: 04 December 2014

INSPEC Accession Number: 14983189

Publisher: IEEE

Small (touch)screen areas on mobile devices often limit their capabilities for user interaction. In this paper, we present GyroPen, a method that brings an experience similar to “drawing with a pen” to mobile devices without using a stylus and without the space restrictions typically imposed by a small form factor. The user can hold the mobile phone like a pen and “write” on any surface (see Fig. 1 ). The trajectory of the phone's “writing corner” is reconstructed from the phone's sensors: its gyroscopes and accelerometers. Because the proposed method does not require to use a touchscreen, it is appealing for small form factor devices or for devices lacking a screen.


Fig. 1.

GyroPen provides a similar experience for writing with a phone as writing with a pen.

Show All

A promising application of GyroPen's capabilities is as a method for text entry. Text entry on mobile devices is a topic of interest as mobile devices are getting more popular: Entering text on mobile devices is still considered inconvenient by many, although a large variety of input methods have been proposed since the first mobile phones. Twelve-button phones with predictive text-entry methods (see, e.g., [1]) have mostly been replaced by touchscreen devices with soft keyboards. These devices, however, suffer from the “fat finger problem,” i.e., the fact that a human finger is thicker than a typical key on the virtual keyboard [2], and thus, methods for automatic prediction and correction were added, e.g., in the form of gesture-based systems for keyboard entry, e.g., SHARK [3] , ShapeWriter [4], and SwiftKey [5]. One of the alternative means of text entry is handwriting, which works naturally with GyroPen input.

The idea to use inertial sensors for interaction with mobile devices and for text entry in particular has been discussed in the literature before. One of the first reports is [6] in which a pen device with two accelerometers constructed for the task is combined with a specifically developed writer-dependent HMM recognizer to recognize one of a fixed set of seven words. Zhang et al. [7] discuss a similar setup to distinguish ten numerals.

The TiltText approach [8] uses movements of the cell phone to disambiguate among multiple text candidates when entering text on a 12-button keypad using a low-cost tilt sensor. Similarly, Shrimp [9] aims at easing text entry, but instead of relying on a tilt sensor, it uses the phone's camera to estimate its motion using computer vision. Shrimp improves on the text prediction to allow entry of out-of-vocabulary words more easily.

WalkType [10] helps users to type on a touchscreen while walking. It uses accelerometer data to predict and account for misplaced touch events and corrects the user input with a language model and a model of common typing errors.

Gómez et al. [11] propose a Dasher-like [12] system for text entry controlled by accelerometers.

Approaches that are closely related to ours are PhonePoint-Pen [13] and Airwriting [14]. These systems allow a user to write in the air similar to the process of writing on a blackboard, which requires the user to make fairly large writing gestures in contrast with the small movements required in our approach. Both PhonePoint-Pen and Airwriting use dedicated handwriting recognition systems built for motion-based input. In contrast, our system uses an “off-the-shelf” handwriting recognition system leveraging the efforts of the handwriting recognition community over several decades without further modifications. This is possible because the reconstructed writing paths of our system match how users write with a pen on paper. Recognition can easily be extended to more languages, scripts, and symbols by replacing the recognition backend.

PhonePoint-Pen uses only the accelerometers of a mobile phone, and the recognizer is comprised of a manually engineered decision tree and language-model-based correction to disambiguate likely character confusions. PhonePoint-Pen does not distinguish letter case but supports three editing gestures and numerals. Average character writing times between 3.0 and 4.3 s are reported (n=10) and a character error rate (CER) of 8.1% for trained users (n=4) and single character input (with the note that “recognition degrades with increasing word-length”). Agrawal et al. [13] also include a more in-depth discussion of further related work in this area.

In Airwriting, a specialized motion-sensing device with gyroscopes and accelerometers is attached to the user's wrist. An HMM-based system is trained on raw sensor data, i.e., the motion path is not reconstructed. A user-independent word error rate of 11% for a fixed vocabulary of 8K words is reported (n=9) [14] for this specific data. The task-dependent training of the Airwriting system requires a sufficient amount of annotated motion data. In contrast, our approach can directly benefit from improvements in normal handwriting systems and thus is easy to extend to new languages.

Miyagawa et al. [15] present a basic system that uses both accelerometers and gyroscopes attached to a pen to reconstruct short writing paths in 3-D, but do not evaluate the results quantitatively or specifically for text entry.

An approach similar to ours is the Magic Wand system [16], [17]. The device in [16] uses both accelerometers and gyroscopes and is specifically constructed to allow 3-D trajectory reconstruction. In contrast with our approach, the gyroscopes are mainly used to compensate for gravity and attitude (compare Section IV), not directly for the estimation of the writing path (our approach to do so is described in Section V). The writing plane is estimated from the 3-D motion of the device, and the trajectory is projected onto that plane. In contrast, GyroPen supports the use of angular movement only, as it occurs when writing with a pen while resting the palm on a surface. In [16], no recognition is performed, but 26 + 10 Graffiti-style symbols can be distinguished by a human observer from the reconstructed paths. Cho et al. [17] describe an extension in form factor and a direct integration into a specifically designed gesture recognition system. On a set of 13 gestures designed for easy discrimination by the system, error rates of below 1% are reported (n=15).

The ImuPen [18] similarly estimates motion by double integration of acceleration information with elaborate additional signal processing stages. For writing on a surface, an error rate of 9.6% for a ten-class digit recognition problem is reported in comparison with 2.8% when a digitizer tablet is used. This error rate dropped to 5.4% for writing on an unrestricted surface.

Regarding mobile handwriting recognition in general, it was already available on the Apple Newton [19] but did not become popular until the simplified writing system Graffiti on Palm Pilots [20] and its extensions [21] , [22] were available. In modern smart phones and tablets, several handwriting input methods exist [23]– [25].

Modern cellphones typically contain three types of motion and orientation sensors: accelerometers, gyroscopes, and a magnetometer. The accelerometer measures the acceleration of the phone in three dimensions (or, equivalently, the forces acting on the phone). One main component of the measured acceleration is caused by gravitational forces. Additionally, the accelerometer measures any force applied to the phone that results in acceleration. Accelerometers have been built into smart phones for several years, e.g., the first Android phone and the original iPhone already had accelerometers. Most accelerometers built into current devices use the piezoelectric effect. The measurements of an accelerometer are given in m/s2.

The gyroscope measures rotation about its own three axes. Gyroscopes only became popular in smart phones around the year 2010, e.g., the Nexus S and the iPhone 4 have built-in gyroscopes. Most gyroscopes built into current smart phones use an oscillator to measure the Coriolis effect. The gyroscope measures angular velocity in rad/s.

The magnetometer can be considered a 3-D compass that measures the direction of the magnetic field at the current location. Magnetometers have also been built into mobile phones since the first generation of smart phones. Most magnetometers in cell phones directly measure the magnetic field using the Hall effect. Unfortunately (for the use in low-latency applications), magnetometers are often slow. The measurements of a magnetometer are given in μT.

In our approaches described below, we generally poll the measurements of all sensors with a frequency of about 150 Hz, which we found to be sufficient to capture writing movements while balancing the tradeoff for low energy consumption.

SECTION IV.

Accelerometer-Based Approach
The first approach to reconstructing the motion of a mobile phone that comes to mind uses the accelerometers and (double) integrates over their measurements.

The accelerometer measures the acceleration of the phone in three dimensions a=(ax,ay,az). When the phone is held still with respect to the user in static conditions, the accelerometers only measure gravity g=(gx,gy,gz), which is typically |g|=9.81m/s2. Once the gravity is estimated, the vector a can be rotated into a vector a′=(a′x,a′y,a′z), where the z-axis points in the opposite direction of the gravity, and thus, the directions of ax and ay are parallel to the desired horizontal writing plane. Thus, discarding the z component after rotation effectively eliminates g , which is usually the strongest force in the accelerometer measurements.

With these rotated observations, we start from a hypothetical starting point (x0,y0) and compute the position (xN,yN) of the phone after N sensor readings as

(xN,yN)=(x0,y0)+∑n=1NΔtn(vnx,vny)(1)

View Sourcewith
(vnx,vny)=(0,0)+∑i=1nΔti(a′ix,a′iy)(2)

View Sourcewhere Δtn is the time that passed between measurements n−1 and n. While this approach is appealing in theory, it turns out that, in practice, the double integral (or sum) is very sensitive to noise, and the sensors built into current phones are often too noisy to give sufficiently precise readings for accurate estimation of a writing path. Airwriting [14] avoids this problem by 1) not reconstructing the writing path explicitly but training the handwriting recognizer on sensor data directly and 2) using a high-accuracy sensor unit, which is more expensive than the manufacturing price of current smartphones.
SECTION V.

GyroPen: Gyroscope-Based Approach
GyroPen allows for writing with the phone like a user normally would write with a pen.1 Most movements of a pen while writing are performed without actually moving the entire hand. Instead, the writing motion of the pen tip results from moving the pen using mostly finger and wrist movements. This motion consists in large part of rotations. Then, the entire hand is moved by a few centimeters, e.g., to start a new word or line.

GyroPen uses the phone's gyroscopes to estimate the motion of the writing point. The gyroscopes directly measure angular velocity about three axes r=(rx,ry,rz), and thus, a single integration will be sufficient to determine how far the phone was rotated. Starting from an initial attitude of the phone o0=(o0x,o0y,o0z), which is initialized from a gravity estimate while the phone is held still, we update the attitude estimate by rotating it according to the gyroscope measurements.

The motion of the phone's writing point W is approximated by assuming that the overall motion consists of a rotation around a fixed virtual center point C and a translation of the pen along the line C-W such that W continuously touches the surface (see Fig. 2). For different users, the point C may be at different locations depending on how they hold the phone. Considering the 2-D case in Fig. 2(b), the user rotates the phone such that the writing point W moves from W0 to Wt and continuously shifts the phone such that W touches the writing surface. Under these assumptions, the phone's attitude (as determined from the gyroscopes) is sufficient to determine the writing motion trajectory from W0 to Wt. During writing, the C's position may vary, but for smooth motion there is no large distortions.


Fig. 2.

Writing with the phone. (a) Hand is holding the phone like a pen. To determine which words the user writes, we measure the rotation around point C and estimate at which point W the phone touches the writing surface. (b) Simplified to two dimensions, the writing point W moves as the phone rotates and translates.

Show All

g is the direction of gravity, and we assume the distance between points B and C (the distance of C from the writing surface) to be approximately 5 cm. Note that the exact distance between these points does not influence the nature of the recorded handwriting but only changes a fixed scaling factor that is applied to the reconstructed trajectory. The handwriting system may later apply an extra size normalization (we do not pass on any writing area sizes), and thus, the recognition accuracy is invariant with respect to the writing size (Section V-F).

Note that this approach can be extended to larger movements typical for say writing with a laser pointer (see Section V-E). It also works well when restricting the writing to a very small area: Restricting the writing area to a band of height 5 mm was found to be unproblematic for recognition.

A. Initialization
For initialization, we determine the initial attitude o0 of the phone, while it is not moving using the accelerometer. We estimate gravity g from N accelerometer measurements, while the phone is not moving, which gives us a reliable estimate of our initial attitude o0 (up to a rotation about the vertical axis). During the implementation of the system, we experimented with different values for N and found that N=10 is a suitable choice. This means that the initialization only takes a fraction of a second, and it is a good compromise between a stable estimate for gravity and waiting for the initialization.

B. Tracking Movements
To update the phone's attitude as it rotates, we use the gyroscope measurements. From the sequence of phone attitudes, we compute the trajectory of the phone's writing point W on the writing surface.

We use quaternions as a convenient way to describe and work with rotations in 3-D space. When we say that we update an attitude o1 using an angular velocity r, we first determine the angle Q(Δt⋅r) by which the phone was rotated from r and the time Δt corresponding to this measurement. Then, we compute the updated attitude o2 by rotating o1 by that angle

o2=o1∗Q(Δt⋅r)(3)

View Sourcewhere ∗ is the quaternion multiplication that corresponds to rotating o1 by the angle Δt⋅r .
This is performed for every measured angular velocity rt successively. Then, we compute the location at which point W touches the writing surface for every time step t, assuming the writing surface is orthogonal to the gravity vector g and cutting it at point B.

Fig. 3 shows the output of the gyroscope sensor, while different writing movements are performed. It can clearly be seen that writing into different directions creates distinct gyroscope measurements. However, it is also clearly visible that raising the writing point W above the writing surface [see Fig. 3(f)] has a very similar pattern to a “right to left” movement [see Fig. 3(b)]. In both cases, the rx value goes up strongly and stays high for the entire movement; the ry and rz values show a wave pattern. The biggest difference between these two movements in our plots is the magnitude of the measurements, which is not intrinsic to the movement direction but only depends on the movement speed. Therefore, we decided not to handle “pen up” movements explicitly but trace the movements over the entire time and handle the “pen up” strokes (i.e., the reconstructed strokes not intentionally written) at a later stage.


Fig. 3.

Measurements from the gyroscope while performing different writing strokes in rads over time. (a) “Left to right.” (b) “Right to left.” (c) “Bottom up.” (d) “Top down.” (e) “Circle.” (f) “Pen up.”

Show All

Fig. 4 shows examples of reconstructed writing paths for the two words “hello” and “it,” both of which are legible to humans. In the path for “it,” the pen-up problem is clearly visible: The delayed strokes (i.e., the t-stroke and the i-dot) are connected to the previously written strokes.


Fig. 4.

Examples of writing the words “hello” and “it.” (Left) Gyroscope measurements (cp. Fig. 3). (Right) Reconstructed writing path.

Show All

C. New-Word Heuristic
With the method described above, it is possible to write in an area of about 7 × 5 cm without moving the hand on the writing surface. This area is sufficiently large to allow for writing sizes similar to results of writing with a pen on paper. When writing with a pen, a user occasionally moves their hand forward to be able to keep writing in a line. Here, moving the hand forward is not necessary. Instead, the hand can remain at the same spot while writing multiple words (or word-parts) on top of each other: When the end of a word is reached, the user lifts the writing corner, moves it to the left, and then writes the next word “over” the previous one.

To detect this restart gesture, we apply a straightforward decision rule based on the measurement rx of the gyroscope of rotation around the phone's x-axis, where the combined signals for “pen up” [see Fig. 3(f)] and “right to left” [see Fig. 3(b)] leads to a characteristic pattern (see Fig. 5), which allows detection of the restarts and segmentation of the writing into three parts: wi the first word, ξi the restart gesture which is discarded, and wi+1 the second word.


Fig. 5.

Sensor output of the gyroscope rx when writing the word “google,” then moving the phone back to the beginning, and then writing “apple” at the same location and the reconstructed writing path. The colors encode the recognized words: w1 in red, the restart gesture ξ1 in green, and w2 in blue. In gray, the gyroscope reading for ry and rz.

Show All

wi contains all sensor measurements from the beginning (or from the end of ξi−1) until rx exceeds a threshold θu. Starting from there, all observations that exceed a threshold θl are considered to be part of the restart gesture ξi, and once the rx drops below threshold θl, the next word wi+1 starts. The thresholds were chosen to be θu=0.6 and θl=0.2 from analyzing multiple graphs similar to Fig. 5 during the initial implementation of this method and ahead of any of our user studies.

D. Postprocessing
After the writing path has been reconstructed, we perform several postprocessing steps to make the recovered writing paths more similar to normal handwriting and to reduce differences between the writing styles of different users.

1) Start/Stop Detection
Our system requires the phone to be held still while the gravity vector is estimated, but holding the pen stationary is unusual in handwriting data. Similarly, the end of the input is signaled by holding the phone still for half a second. Removing these pauses in the phone motion improves handwriting recognition because it makes the output of GyroPen more like normal handwriting input for which the handwriting recognition system was optimized.

For start detection, we drop all observations until the distance between two consecutive points exceeds a threshold θs. For the stop detection, we wait until the phone has been still for half a second by detecting that no two consecutive points have a distance exceeding the threshold θs=0.04 for 500 ms.

While the difference is not visually apparent [see Fig. 6(a) and (b)], the start–stop detection removes between 10 and 50 similar points on most samples at the beginning and end.


Fig. 6.

Postprocessing steps. Writing paths from two different users going through the postprocessing pipeline. (a) Reconstructed writing path. (b) After start–stop detection. (c) After slope correction. (d) After slant correction.

Show All

2) Slope Correction
Due to different users holding the phone at different angles, the recovered writing paths have different slopes [see Fig. 6(b)].

To improve recognition, we normalize the slope by measuring the angle ϕw between the first and the last point of each written word w, averaging over the written words, and rotating the words toward the horizontal by this angle [see Fig. 6(c)]. This heuristic is very simple, and more elaborate techniques may improve the accuracy of the overall system (see Fig. 11).

3) Slant Correction
After the slope correction, we apply a slant correction to normalize the writing paths. In normal handwriting of Latin-script languages, the most common directions are vertical (or near-vertical) strokes, such as the letter “I” or the first and the last part of the letter “M.” Also here, different users tend to write with different slants [see Fig. 6(c)]. In order to normalize for slant, we compute a histogram of directions for each stroke by computing the deltas between every pair of points between pen-down and pen-up events, determine the dominant direction, and then apply a shear transform to align it to the vertical [see Fig. 6(d)].

E. Laser Pointer Mode
One further advantage of the gyroscope-based approach is that it easily transfers to a “laser pointer”-like writing mode where we assume the writing point W to be on the extension of the phone's longer dimension [see Fig. 7(a)]. In this case, the hypothetical distance between the points C and the point W determines the scale factor of the trajectory.


Fig. 7.

(a) Laser pointer mode and (b) examples of uppercase letters written using the laser pointer mode.

Show All

This mode turns out to be useful for interaction with home cinema systems, similar to the touch pad on recent Sony settop boxes [26], and the phone motion can either be used to control a cursor or to handwrite characters. Handwriting can be activated by pressing and holding a button (physical or on the touchscreen), similar to the interaction model of a laser pointer. Fig. 7 (b) shows one example of each of the 26 English uppercase letters written using the laser pointer mode.

F. Handwriting Recognition
To recognize the written items, we use an online handwriting recognition system similar to the one used in the Apple Newton [19] but using an extended feature set similar to the NPen++ recognizer [27]. In online handwriting recognition, the input to the system is a trajectory of (x,y) coordinates over time t. The handwriting recognition engine used was built for normal online handwriting data aiming to recognize stylus input and writing with a finger on a touchscreen. Its recognition accuracy is comparable with other state-of-the-art online handwriting recognition systems. Note that in contrast with other systems (e.g., 8000 words in [14], 13 gestures in [17]), the handwriting recognition system is an open vocabulary recognizer that can recognize any word that can be written with its alphabet independently of whether it is a proper word and whether the system has ever seen it in the past. To evaluate this, we tried to write the authors’ last names and found this to be easily possible.

Above we mentioned that GyroPen does not handle pen-up movements explicitly but considers them to be part of the writing motion. To handle such strokes, the online handwriting recognition literature has been using pen-up strokes as part of the observation [27]. Pen-up strokes also have been used as a means to make models for Chinese handwriting recognition invariant to printed and cursive writing styles [28].

The handwriting recognition system performs size and writing-speed normalization, and therefore, the writing size and speed of a particular item have no impact on the recognition.

G. Calibration
As every sensor (even of the same type) behaves slightly differently, we perform a phone-specific calibration. This has to be performed once per phone and only takes a few minutes. With this calibration, we aim to account for sensor-specific noise and scale so that we can compute calibrated sensor readings sc from the raw sensor readings sr and offset O as sc=S⋅sr+O.

For both the gyroscopes and the accelerometers, we want to compute the calibrated 3-D vectors as

⎛⎝⎜scxscyscz⎞⎠⎟=⎛⎝⎜Sx000Sy000Sz⎞⎠⎟⋅⎛⎝⎜srxsrysrz⎞⎠⎟+⎛⎝⎜OxOyOz⎞⎠⎟(4)

View Source
In the following, we describe how the parameters S and O are determined for the accelerometers and gyroscopes.

1) Accelerometers
For the accelerometers, we can estimate the offset and the scale jointly. To estimate the offset and the scale, we record a total of I accelerometer measurements a1,…,aI in at least three different positions, while the phone is not moving. Using the assumption that the phone should measure an acceleration of g=9.81m/s2 while the phone is still and given our error model [see (4)], we can compute the parameters S and O using a system of 3⋅I linear equations

[aci=Sari+O]Ii=1(5)

View Sourcewhere we approximate the calibrated measurement as ac=9.81⋅ar/||ar||.
Note that this assumes that the scale for each dimension is the same and that the offset is small. In practice, this is not always true, but we validated the assumption by estimating the scale of the axes when the entire gravity components was on a single axis, which suggested that the approximation is appropriate.

Then, we solve this system for the entries of the diagonal matrix S and the offset vector O using the pseudoinverse of the expanded equation system.

For the accelerometers of our experiment phones, we found the scale to be in the range between 0.9 and 1.1 and the offset to be between −0.1 and 0.1  m/s2.

2) Gyroscopes
To estimate the scale S and the offset O for the gyroscope, we apply a two-step procedure: First, we estimate O, then S. For convenience, we change the error model of the gyroscope to rc=S(rr+O), which is equivalent to (4) but simplifies notation.

An ideal gyroscope will measure no angular velocity when not in motion. To estimate the offsets (Ox,Oy,Oz), we record M gyroscope measurements while holding the phone still. Then, we compute the average over these and set the offset to be

(Ox,Oy,Oz)=−1M∑m=1M(rx,ry,rz).(6)

View Source
To compute the scale of the gyroscopes, we would ideally know the gyroscope output, while the phone performs a rotation for which we know the ideal output for every step. We approximate this by asking the user to move the phone in a series of rotations about each axis in turn, starting and stopping at the same spot. Then, we record the timestamp pairs for which the phone has the same attitude as detected using the phone's 3-D compass.

We record a sequence of I gyroscope r and compass m measurements (r1,m1),…(ri,mi). Then, we detect pairs (i,j) with i<j, where mi=mj for a pair of time indices. These pairs represent points where the user has completed a rotation and is holding the phone still. We know that at these two time steps, pairs (oi,oj) should be identical. oj can be estimated as [compare with (3)]

oj=oi∗n=ijQ(Δt⋅rn).(7)

View Source
This allows us to assess how much our estimated attitudes oj differ from their expected attitudes oi on average:

∑(oi,oj)d(oi,oj)(8)

View Sourcewhere d(oi,oj) measures the angle between oi and oj.
Then, we use the Downhill–Simplex method [29] to minimize (8) starting with an initial identity matrix for Sr.

For the gyroscopes of our experiment phones, we found the scale to be in the range between 0.9 and 1.1 and the offset to be between −0.01 and 0.01  rad/s.

3) Evaluating the Calibration Parameters
We evaluate our calibration methods by computing the calibration criterion for two different sets of calibration measurements. For the accelerometer calibration, the criterion is the sum of squared error of the system of linear equations [see (5)]; for the gyroscopes calibration, the criterion is given in (8).

We recorded two calibration measurements for the accelerometer and the gyroscope on different days. Then, we estimated the calibration parameters S and O independently for the two measurements and evaluated the criterion on the respective other.

The experiments show that the calibration procedure works for both accelerometers and gyroscopes (see Table I). The estimated calibration parameters for both sequences are significantly better (lower) than using no calibration at all (top row).

TABLE I Quantitative Evaluation of the Criterion


For the experiments, we used two different devices: a Samsung Galaxy Nexus and a Samsung Nexus S. These contain an Invensense MPU-3050 motion sensing unit and an EM-Tech EME1511AFRC module including a motion sensor, respectively. Both are low-powered motion-sensing units and during the experiments for the paper, we did not observe any additional power drain on the batteries of the used devices. Additionally, we performed informal experiments with four other popular Android smartphones (LG Nexus 4, Samsung Galaxy S3, Sony Experia LT26i, HTC One X) to verify that the proposed methods are not overoptimized for the test devices. On each of these devices, the GyroPen prototype worked without any changes.

A. Evaluation of Reconstruction Accuracy
To evaluate writing path reconstruction accuracy, we performed experiments recording the reconstructed writing path and the actual writing path of the phone's writing point simultaneously. To record the actual writing path, we used a Wacom Bamboo Pen & Touch graphic tablet and fixed its stylus to the phone using sticky tape. With this setup, we recorded a dataset of 13 words and drawings2 and compared the reconstructed paths from GyroPen with the ground-truth paths from the tablet.

To measure the reconstruction error, we aligned both paths using a dynamic programming algorithm similar to the one used for stereo reconstruction [30] and measured the error between the reconstructed and the recorded path. The experiments showed an average deviation between our reconstruction and the ground truth of less than 4% relative (5% standard deviation) to the length of the path. The highest error was observed for one of our small drawings where slant correction went wrong (15%).

Four examples comparing the reconstructed paths are shown in Fig. 8. For the first three examples, the paths were aligned very well. In the bottom-right example, the slant correction built into GyroPen failed because it was designed with handwriting in mind, and thus, the stickfigure drawn with GyroPen is strongly slanted to the left. Thus, when using GyroPen for drawing, it is advisable to disable the slant correction.


Fig. 8.

Comparison of the reconstructed writing paths and the aligned ground-truth paths. Red: the reconstructed path from GyroPen, Green: the ground-truth path from the graphic tablet.

Show All

B. User Study: Learning to Use GyroPen
We assessed how quickly a novice user of GyroPen is able to use it for writing a few simple words in a proof-of-concept experiment. We conducted a small user study with ten volunteers who had never used the GyroPen prototype before and had no insight into how it works. The participants, all employed at the same company as the authors of this paper at the time of the study, were aged between 20 and 40 years; nine were males and one was female. There were two left-handed and eight right-handed participants. The study was conducted using the following script and lasted about 15 min per participant. The prototype was running on a Samsung Nexus S phone.

Introduction: We gave a short introduction how GyroPen can be used and demonstrated writing a few words.

Writing: We asked the users to try to write three strings of increasing length and difficulty: 1) “and,” 2) “hello,” and 3) “banana.” To get an objective measurement of the entire system's performance, we asked the participants to continue trying to write these strings until the system recognized the string. We limited the number of tries to ten times and recorded the number of tries and the time it took each participant.

Questions: We asked the participants a series of fixed questions, starting by having them rate the experience with respect to “interestingness and novelty” on a scale from 1–10. Then, we asked them for positive and negative adjectives, whether they would install a GyroPen app, and if they saw specific circumstances in which the method could be particularly useful.

1) Quantitative Evaluation
Fig. 9 shows the distribution of writing times and number of tries necessary for the study participants to write each word. The variation in these measurements is very large. This shows that different users have a varying degree of difficulty adapting their natural writing movements.


Fig. 9.

Distribution of (a) writing times (in seconds) and (b) number of tries necessary until success as box-and-whisker plots. The bold line gives the median values, the lower and upper boundaries of the box mark the 25% and 75% quantiles. The whiskers give the minimal and maximal measured values and the circles mark outliers.

Show All

The average participant could write the first short word after half a minute, a longer one after about the same time, and about 1 min to write the six-letter word “banana.” (The median times are 36.5, 35.5, and 58.0 s, respectively.)

The median number of tries for each test word were 3.5, 2, and 4, respectively. This suggests that the participants learned this new way of writing quickly and could write the second word with few attempts, but then needed more attempts for the third longer (and likely harder to recognize) word.

Note that these times are measured up to the point that the trajectory could be interpreted correctly by the handwriting recognition system—the reconstructed and visualized text was readable for a human typically much earlier. The median number of tries until a human could read the test words was 1.5, 1.0, and 2.5 (compared with 3.5, 2.0, and 4.0, which we report for machine recognition, Fig. 9). This means that when used for the purpose of just taking a note in a graphical format (just storing the sketch, not requiring recognition), the approach could deliver results much faster than the values above suggest (compare also the study in Section VI-C, which shows that experienced users need 3–4 s to write a word).

The outliers toward the longer times and number of tries show that this input method may not be the method of choice for fast text entry for everybody, but similar restrictions apply for other input methods, e.g., speech input or handwriting using a stylus.

On the other hand, some participants were able to input the desired word very quickly and with only few attempts. This is despite the fact that most of the participants started the study with stating that they had a “terrible handwriting.”

In summary, we consider the results of this experiment to be very promising since they indicate that new users will be able to use GyroPen quickly and without much help. For more reliable results, it would be necessary to perform a large study with more users and more words.

2) Qualitative Evaluation
The participants rated the interestingness and novelty of the approach on average with a score of 8 out of 10. The source of participants makes it likely that there is some bias in these results, but we feel that they are an interesting summary of the voiced opinions.

Prompted for positive impressions, the participants responded with these and similar assessments: surprised it works and recognized my handwriting, amazing, awesome, new, interesting, cool idea, intuitive, interesting, has potential, cool and fun, innovative, natural, wonderful idea, much better than handwriting on a touchscreen, definitely better than voice recognition.

Prompted for negative impressions, the participants responded with these and similar assessments: smartphone is bulky/clunky/big, maybe as a standalone pen it could work better, need to improve moving the hand, needs a surface, awkward to hold the phone like this, difficult for long words, cannot beat speed of other input methods for me, there's a learning curve, quality needs to be improved, a bit difficult.

When asked about situations in which this input method could be particularly useful, the answers included: taking of digital notes quickly (with and without handwriting recognition), e.g., in school or for a quick note; when too noisy for speech recognition; when using the touchscreen is difficult (wet or sticky fingers); for storing sketches; just on a pen that is paired with a smart-phone; recording signatures; kids’ drawings.

While the absolute writing area of the GyroPen approach is about the same size as a phone screen, the thickness of fingers makes it difficult to write as small as with GyroPen. Therefore, users had the impression that with GyroPen there is more space. The high accuracy of GyroPen easily allows writing with a letter height of about 5 mm. This is smaller than most people can write with their fingertip on a touchscreen.

In summary, while there is room for improvement, most participants viewed GyroPen as interesting and promising.

C. User Study: Writing the Full Alphabet
To evaluate more parameters of the proposed input method, we performed a second experiment with two users who had used the GyroPen system in the past and had a good understanding of how it works.

In this experiment, the task was to write 26 common English words,3 one starting with each letter of the English alphabet, both starting in lower- and uppercase. The users were asked to write each of the 52 words ten times in sequence with GyroPen. During this experiment, we measured the CER (see Fig. 10) and writing speed. For comparison, we also asked the users to write each word once with a finger on a touchscreen for normal handwriting recognition.


Fig. 10.

Average CER for the ten trials of writing the 52 words for the second user study.

Show All

Both users improved their writing skills: When writing a word for the first time, the users had about 40% CER. The CER dropped to about 28% in the second trial, and after ten trials, the users averaged at about 18% CER. For comparison, the same users obtained between 5% and 7% CER when using normal handwriting. This suggests that some of the errors that users make are due to an imperfect recognition system but that a certain amount of errors are introduced through using GyroPen. As the handwriting recognition system was trained on conventional handwriting input, we suspect that this gap could be closed further by 1) adding GyroPen training data to the recognition system or 2) adjusting the GyroPen reconstruction to let the output resemble conventional handwriting even more, or both.

Regarding writing speed, user 1 needed an average of 3.6 s to write each word, and user 2's average was 3.1 s. In comparison, using normal handwriting input both users needed slightly more than 1 s to write the words on average. The measurements show no significant change in writing speed during the ten trials.

We also analyzed a potential dependence between the error rate and the writing speed by measuring the correlation between normalized writing speed (per word per user) and CER and found a correlation coefficient of 0.07, which indicates that the dependence is very small if there is a dependence at all. The same result is obtained when comparing the average CER on words that were written faster than the median speed (per word per user), which is the same as the CER on words that were written slower up to the third significant digit. Note, however, that these experiments have been performed with just two users, and thus, the results may not hold in a large user study.

Fig. 11 shows a comparison of normal writing styles of the two users with their writing styles using GyroPen for selected words. It is interesting to observe that some of the characteristics of the users’ handwriting styles are preserved, e.g., the characteristic shapes of the loops in “g” and “y” seem to differ more between writers than between recording methods.


Fig. 11.

Writing styles of two users using normal handwriting on a mobile phone touchscreen and using GyroPen. The recognition result of the handwriting recognition system is shown under the samples.

Show All

Further, the examples show how the handwriting recognition system makes some mistakes on GyroPen samples that are clearly legible for a human. We suspect the difference to be due to increased slant and slope of the recorded samples and also partially due to a missing reference frame.

D. Non-Latin Script Input
To evaluate if the GyroPen approach is applicable to other scripts, we performed the following experiment: We switched the handwriting recognizer language to Chinese and tried to write a few Chinese characters. Recognizing these characters worked surprisingly well using a cursive writing style. We did not need to apply any additional tuning except disabling the slope correction. Examples of writing trajectories and recognized characters are shown in Fig. 12.


Fig. 12.

Writing Chinese characters. Reconstructed writing paths (top) and recognition results of the Chinese handwriting recognition engine (bottom).

Show All

SECTION VII.

Conclusion and Outlook
We have presented GyroPen, a method that reconstructs a user's writing path from the inertial sensors of a phone, and have shown that this is a promising approach toward handwriting with the phone. We describe the approaches used for high-accuracy writing-path reconstruction and show that the reconstructed writing paths are accurate enough to be recognized by an off-the-shelf handwriting recognition engine without the need for special tuning. In a first proof-of-concept experiment, the majority of the participants reacted positively to the approach and could use it after a learning period of just a few minutes. In a second experiment, we observed that the method can be used to write all letters with acceptable accuracy after some practice. We have shown that the system is an interesting prototype aiming to enable handwriting with the phone rather than on the phone for an intuitive experience for text entry into mobile phones, which will open unique applications in the future.

GyroPen could be improved by explicitly handling pen-up strokes, for instance, using a sensor-fusion approach of gyroscopes and accelerometers or by training a handwriting recognition system that is fully invariant to pen-up strokes.

The proposed method has the advantage that it works on smartphones without any modification to the hardware. If it was possible to add additional sensors to the phones, a similar user experience could be obtained, e.g., by building a small trackball or an optical mouse sensor into the phones writing corner. Another alternative to using the inertial sensors would be to use computer vision techniques with the built-in camera to reconstruct the phone movements similar to TinyMotion [31]. This would also work without additional sensors but might be problematic if the writing surface is very homogeneous, and thus, there would be no features to track.