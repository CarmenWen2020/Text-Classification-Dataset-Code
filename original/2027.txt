Abstract
Creating high quality application-specific accelerators requires us
to make iterative changes to both algorithm behavior and microarchitecture, and this is a tedious and error-prone process. High-Level
Synthesis (HLS) tools [5, 10] generate RTL for application accelerators from annotated software. Unfortunately, the generated RTL is
challenging to change and optimize. The primary limitation of HLS
is that the functionality and microarchitecture are conflated together
in a single language (such as C++). Making changes to the accelerator design may require code restructuring, and microarchitecture
optimizations are tied with program correctness.
We propose a generalized intermediate representation for describing accelerator microarchitecture, µIR, and an associated pass framework, µopt. µIR represents the accelerator as a concurrent structural
graph in which the components roughly correspond to microarchitecture level hardware blocks (e.g., function units, network, memory
banks). There are two important benefits i) it decouples microarchitecture optimizations from algorithm/program optimizations. ii)
it decouples microarchitecture optimizations from the RTL generation. Computer architects express their ideas as a set of iterative
transformations of the µIR graph that successively refine the accelerator architecture. The µIR graph is then translated to Chisel, while
maintaining the execution model and cycle-level performance characteristics. In this paper, we study three broad classes of optimizations:
Timing (e.g., Pipeline re-timing), Spatial (e.g., Compute tiling), and
Higher-order Ops (e.g., Tensor function units) that deliver between
1.5 — 8× improvement in performance; overall 5—20× speedup
compared to an ARM A9 1Ghz. We evaluate the quality of the autogenerated accelerators on an Arria 10 FPGA and under ASIC UMC
28nm technology

1 Introduction
Current High-Level Synthesis (HLS) tools [5, 8, 10, 15, 43] translate a program, typically specified in C-like language, to synthesizable
RTL. The RTL is verbose, is hard to modify and optimize, and supports a limited execution model (timing-linked operation schedule).
Hence, many HLS tools [37] lift hardware description to the input
C program and rely on ad-hoc compiler optimizations as proxies for
microarchitecture optimization e.g., loop unrolling to create parallel function units [14, 18]. HLS tools expect designers to sprinkle
ad-hoc annotations in the C program to side-step limitations in the
compiler and ensure the quality of the final RTL output e.g., Xilinx’s
stream<T> in a C++ program translate to FIFO queues in RTL.
Like HLS, Hardware construction languages (HCLs) are also motivated to raise the design abstraction [7, 35]. HCLs require the designer
to specify a structural hardware description (as opposed to C-level
behavior specification). While this enables the designer to precisely
explore the hardware tradeoffs, it leaves unanswered the question
of how to derive a good quality hardware description from software.
Domain-specific HLS tools have sought to provide a software-feel
to hardware construction by introducing higher order hardware controllers (e.g., for loops) [8, 22, 28, 31]. Unfortunately, they restrict the
control and data patterns, and only target fixed hardware templates.
Our insight is that perhaps the limiting factor in prior work is
their use of a single representation to capture both the behavior of
the accelerator (i.e., the operational specification) and its microarchitecture (i.e., the structural specification). HLS toolchains require
both to be specified in C variants, while HCLs require both to be
specified in a hardware-oriented language. This conflating of microarchitecture and behavior limits the scope of accelerator to loop-based
program behaviors [26, 55]. The hardware description generated by
prior toolchains also tend to correspond to low-level RTL that only permit a limited set of transformations. We propose an alternative —-
decouple the representation used for accelerator microarchitecture and hardware optimizations from the functional behavior
specification. We develop µIR, a new intermediate representation for
the back-end representation of the accelerator microarchitecture. We
are motivated by software compilers that have long recognized the
importance of an intermediate-layer for enabling optimizations prior
to binary creation [51].
µIR is a structural graph that explicitly specifies the accelerator’s microarchitecture components and orchestrates data movement
between the different components. The higher-level representation
(compared to RTL) makes it easier for both localized and global transformations to optimize the accelerator microarchitecture. Figure 1
provides the end-to-end view of our multi-stage framework that generates the RTL for a high-performance accelerator from a program.
The multi-stage approach encourages a clear demarcation of behavior
optimizations (e.g., loop unrolling), microarchitecture optimizations
(e.g., memory banking), and RTL optimizations (e.g., FPGA-specific
SRAMs).
These are the primary novelties of µIR, i) Optimizability: µIR
represents hardware at a higher microarchitecture level of abstraction. In comparison to hardware languages (such as FIRRTL [24]
and Verilog), µIR enables computer architects to concisely express