We introduce a deep appearance model for rendering the human face. Inspired by Active Appearance Models, we develop a data-driven rendering
pipeline that learns a joint representation of facial geometry and appearance
from a multiview capture setup. Vertex positions and view-specific textures
are modeled using a deep variational autoencoder that captures complex nonlinear effects while producing a smooth and compact latent representation.
View-specific texture enables the modeling of view-dependent effects such as
specularity. In addition, it can also correct for imperfect geometry stemming
from biased or low resolution estimates. This is a significant departure from
the traditional graphics pipeline, which requires highly accurate geometry
as well as all elements of the shading model to achieve realism through
physically-inspired light transport. Acquiring such a high level of accuracy
is difficult in practice, especially for complex and intricate parts of the face,
such as eyelashes and the oral cavity. These are handled naturally by our
approach, which does not rely on precise estimates of geometry. Instead, the
shading model accommodates deficiencies in geometry though the flexibility
afforded by the neural network employed. At inference time, we condition
the decoding network on the viewpoint of the camera in order to generate
the appropriate texture for rendering. The resulting system can be implemented simply using existing rendering engines through dynamic textures
with flat lighting. This representation, together with a novel unsupervised
technique for mapping images to facial states, results in a system that is
naturally suited to real-time interactive settings such as Virtual Reality (VR).
CCS Concepts: • Computing methodologies → Image-based rendering; Neural networks; Virtual reality; Mesh models;
Additional Key Words and Phrases: Appearance Models, Image-based Rendering, Deep Appearance Models, Face Rendering
1 INTRODUCTION
With the advent of modern Virtual Reality (VR) headsets, there
is a need for improved real-time computer graphics models for
enhanced immersion. Traditional computer graphics techniques are
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 2018.
68:2 • Lombardi et al.
capable of creating highly realistic renders of static scenes but at
high computational cost. These models also depend on physically
accurate estimates of geometry and shading model components.
When high precision estimates are difficult to acquire, degradation
in perceptual quality can be pronounced and difficult to control and
anticipate. Finally, photo-realistic rendering of dynamic scenes in
real time remains a challenge.
Rendering the human face is particularly challenging. Humans
are social animals that have evolved to express and read emotions in
each other’s faces [Ekman 1980]. As a result, humans are extremely
sensitive to rendering artifacts, which gives rise to the well-known
uncanny valley in photo-realistic facial rendering and animation.
The source of these artifacts can be attributed to deficiencies, both
in the rendering model as well as its parameters. This problem is
exacerbated in real-time applications, such as in VR, where limited
compute budget necessitates approximations in the light-transport
models used to render the face. Common examples here include:
material properties of the face that are complex and time-consuming
to simulate; fine geometric structures, such as eyelashes, pores, and
vellus hair that are difficult to model; and subtle dynamics from
motion, particularly during speech. Although compelling synthetic
renderings of faces have been demonstrated in the movie industry,
these models require significant manual cleanup [Lewis et al. 2014],
and often a frame-by-frame adjustment is employed to alleviate
deficiencies of the underlying model. This manual process makes
them unsuitable for real-time applications.
The primary challenge posed by the traditional graphics pipeline
stems form its physics-inspired model of light transport. For a specific known object class, like a human face, it is possible to circumvent this generic representation, and instead directly address the
problem of generating images of the object using image statistics
from a set of examples. This is the approach taken in Active Appearance Models (AAMs) [Cootes et al. 2001], which synthesize
images of the face by employing a joint linear model of both texture
and geometry (typically a small set of 2D points), learned from a
collection of face images. Through a process coined analysis-bysynthesis, AAMs were originally designed to infer the underlying
geometry of the face in unseen images by optimizing the parameters
of the linear model so that the synthesized result best matches the
target image. Thus, the most important property of AAMs is their
ability to accurately synthesize face images while being sufficiently
constrained to only generate plausible faces. Although AAMs have
been largely supplanted by direct regression methods for geometry registration problems [Kazemi and Sullivan 2014; Xiong and
la Torre Frade 2013], their synthesis capabilities are of interest due
to two factors. First, they can generate highly realistic face images
from sparse 2D geometry. This is in contrast to physics-inspired
face rendering that requires accurate, high-resolution geometry and
material properties. Second, the perceptual quality of AAM synthesis degrades gracefully. This factor is instrumental in a number
of perceptual experiments that rely on the uncanny-valley being
overcome [Boker et al. 2011; Cassidy et al. 2016].
Inspired by the AAM, in this work we develop a data-driven
representation of the face that jointly models variations in sparse
3D geometry and view-dependent texture. Departing from the linear
models employed in AAMs, we use a deep conditional variational
autoencoder [Kingma and Welling 2013] (CVAE) to learn the latent
embedding of facial states and decode them into rendering elements
(geometry and texture). A key component of our approach is the
view-dependent texture synthesis, which can account for limitations
posed by sparse geometry as well as complex nonlinear shading
effects such as specularity. We explicitly factor out viewpoint from
the latent representation, as it is extrinsic to the facial performance,
and instead condition the decoder on the direction from which the
model is viewed. To learn a deep appearance model of the face, we
constructed a multiview capture apparatus with 40 cameras pointed
at the front hemisphere of the face. A coarse geometric template
is registered to all frames in a performance and it, along with the
unwarped textures of each camera, constitute the data used to train
the CVAE. We investigated the role of geometric precision and
viewpoint granularity and found that, although direct deep image
generation techniques such as those of Radford et al. [2015], Hou
et al. [2017], or Kulkarni et al. [2015] can faithfully reconstruct data,
extrapolation to novel viewpoints is greatly enhanced by separating
the coarse graphics warp (via a triangle mesh) from appearance,
confirming the basic premise of the parameterization.
Our proposed approach is well suited for visualizing faces in
VR since; a) sparse geometry and dynamic texture are basic building blocks of modern real-time rendering engines, and b) modern
VR hardware necessarily estimates viewing directions in real-time.
However, in order to enable interaction using deep appearance
models in VR, the user’s facial state needs to be estimated from a
collection of sensors that typically have extreme and incomplete
views of the face. An example of this is shown in the bottom left
of Figure 1. This problem is further complicated in cases where the
sensors measure a modality that differs from that used to build the
model. A common example is the use of IR cameras, which defeats
naive matching with images captured in the visible spectrum due to
pronounced sub-surface scattering in IR. To address this problem, we
leverage the property of CVAE, where weight sharing across similar
modalities tends to preserve semantics. Specifically, we found that
learning a common CVAE over headset images and re-rendered versions of the multiview capture images allows us to correspond the
two modalities through their common latent representation. This,
in turn, implies correspondence from headset images to latent codes
of the deep appearance model, over which we can learn a regression.
Coupled with the deep appearance model, this approach allows
the creation of a completely personalized end-to-end system where
a person’s facial state is encoded with the tracking VAE encoder
and decoded with the rendering VAE decoder without the need for
manually defined correspondences between the two domains.
This paper makes two major contributions to the problem of
real-time facial rendering and animation:
• A formulation of deep appearance models that can generate
highly realistic renderings of the human face. The approach
does not rely on high-precision rendering elements, can be
built completely automatically without requiring any manual
cleanup, and is well suited to real-time interactive settings
such as VR.
• A semi-supervised approach for relating the deep appearance
model latent codes to images captured using sensors with
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 2018.
Deep Appearance Models for Face Rendering • 68:3
drastically differing viewpoint and modality. The approach
does not rely on any manually defined correspondence between the two modalities but can learn a direct mapping from
images to latent codes that can be evaluated in real-time.
In §2 we cover related work, and describe our capture apparatus and
data preparation in §3. The method for building the deep appearance
models is described in §4, and the technique for driving it from headset mounted sensors in §5. Qualitative and quantitative results from
investigating various design choices in our approach are presented
in §6. We conclude in §7 with a discussion and directions of future
work.
2 RELATED WORK
Active Appearance Models (AAMs) [Cootes et al. 2001; Edwards
et al. 1998; Matthews and Baker 2004; Tzimiropoulos et al. 2013]
and 3D morphable models (3DMM) [Blanz and Vetter 1999; Knothe
et al. 2011] have been used as an effective way to register faces
in images through analysis-by-synthesis using a low dimensional
linear subspace of both shape and appearance. Our deep appearance
model can be a seen as a re-purposing of the generator component
of these statistical models for rendering highly realistic faces. To
perform this task effectively, there are two major modifications that
were necessary over the classical AAM and 3DMM approaches; the
use of deep neural networks in-place of linear generative functions,
and a system for view-conditioning to specialize the generated
image to the viewpoint of the camera.
Recently, there has been a great deal of work using deep networks to model human faces in images. Radford et al. [2015] use
Generative Adversarial Networks (GANs) to learn representations
of the face and learn how movements in this latent space can change
attributes of the output image (e.g., wearing eyeglasses or not). Hou
et al. [2017] use a variational autoencoder to perform a similar task.
Kulkarni et al. [2015] attempt to separate semantically meaningful
characteristics (e.g., pose, lighting, shape) from a database of rendered faces semi-automatically. All these methods operate only in
the image domain and are restricted to small image sizes (256×256
or less). By contrast, we learn to generate view-specific texture
maps of how the face changes due to facial expression and viewing
direction. This greatly simplifies the learning problem, achieving
high-resolution realistic output as a result.
There has also been work on automatically creating image-based
avatars using a geometric facial model [Hu et al. 2017; Ichim et al.
2015; Thies et al. 2018]. Cao et al. [2016] propose an image-based
avatar from 32 images captured from a webcam. To render the face,
they construct a specially crafted function that blends the set of
captured images based on the current facial expression and surface
normals, which captures the dependence of both expression and
viewpoint on facial appearance. Casas et al. [2016] propose a method
for rapidly creating blendshapes from RGB-D data, where the face
is later rendered by taking a linear combination of the input texture maps. Although both methods take an image-based approach,
our method learns how appearance changes due to expression and
view rather than prescribing it. Most importantly, these approaches
are geared towards data-limited scenarios and, as a result, do not
scale well in cases where data is more abundant. Our approach is
designed specifically to leverage large quantities of high quality
data to achieve the compelling depiction of human faces.
Because our method is concerned with view-dependent facial
appearance, our work has a connection to others that have studied
the view- and light-dependent appearance of materials and objects.
One way to view this work is as a compression of the “8D reflectance
function that encapsulates the complex light interactions inside an
imaginary manifold via the boundary conditions on the surface of
the manifold” [Klehm et al. 2015]. That is, we are capturing the
lightfield at a manifold on which the cameras lie and compressing the appearance via a deconstruction of texture and geometry.
Image-based rendering methods [Gortler et al. 1996; Kang et al.
2000] represent the light field non-parametrically and attempt to
use a large number of samples to reconstruct novel views. The
Bidirectional Texture Function [Dana et al. 1999] is a method to
model both spatially-varying and view-varying appearance. These
approaches have served as inspiration for this work.
To drive our model we develop a technique for learning a direct end-to-end mapping from images to deep appearance model
codes. Although state of the art techniques for face registration also
employ regression methods [Kazemi and Sullivan 2014; Xiong and
la Torre Frade 2013], most approaches assume a complete view of
the face where correspondences are easily defined through facial
landmarks. An approach closest to our work is that of Olszewski
et al. [2016], which employ direct regression from images to blendshape coefficients. The main difference to our work is in how corresponding expressions are found between the two domains. Whereas
in Olszewski et al.’s work, correspondences are defined semantically
through peak expressions and auditory aligned features of speech
sequences, our approach does not require any human defined correspondence, or even that the data contains the same sequence
of facial motions. Since we leverage unsupervised domain adaptation techniques, the only requirement of our method is that the
distribution of expressions in both domains are comparable.
There have recently been a number of works that perform unsupervised domain adaptation using deep networks [Bousmalis et al.
2017; Kim et al. 2017; Liu et al. 2017; Zhu et al. 2017]. Many of
these methods rely on Generative Adversarial Networks (GANs) to
translate between two or more domains, sometimes with additional
losses to ensure semantic consistency. Some works also use VAE in
conjunction with other components to learn a common latent space
between domains [Hsu et al. 2017; Liu et al. 2017]. Our approach
differs from these works in that we leverage the pre-trained rendering VAE to help constrain the structure of the common latent
space, resulting in semantics that are well matched between the
modalities.
3 CAPTURING FACIAL DATA
To learn to render faces, we need to collect a large amount of facial
data. For this purpose, we have constructed a large multi-camera
capture apparatus with synchronized high-resolution video focused
on the face. The device contains 40 machine vision cameras capable
of synchronously capturing 5120×3840 images at 30 frames per
second. All cameras lie on the frontal hemisphere of the face and are
placed at a distance of about one meter from it. We use zoomed in
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 2018.
68:4 • Lombardi et al.
UNWRAP
Inference
Input
AVERAGE
TRACKING
View-specific Texture Average Texture View-specific Texture RENDER
Input Image
Rendered Image
Mesh Vertices Mesh Vertices
E zt D
Fig. 2. Pipeline of our method. Our method begins with input images from the multi-camera capture setup. Given a tracked mesh, we can unwrap these
images into view-specific texture maps. We average these texture maps over all cameras for each frame and input it and the mesh to a variational autoencoder.
The autoencoder learns to reconstruct a mesh and view-specific texture because the network is conditioned on the output viewpoint. At inference time, we
learn to encode a separate signal into the latent parameters z which can be decoded into mesh and texture and rendered to the screen.
50mm lenses, capturing pore-level detail, where each pixel observes
about 50µm on the face.
We preprocess the raw video data by performing multiview stereo
reconstruction. In order to achieve the best results, we evenly place
200 directional LED point lights directed at the face to promote
uniform illumination.
To keep the distribution of facial expressions consistent across
identities, we have each subject make a predefined set of 122 facial expressions. Each subject also recites a set of 50 phoneticallybalanced sentences. The meta-data regarding the semantic content
of the recordings is not utilized in this work, but its inclusion as
additional constraints in our system is straightforward and is a
potential direction for future work.
As input to our deep appearance model learning framework, we
take the original captured images as well as a tracked facial mesh.
To generate this data, we build personalized blendshape models
of the face from the captured expression performances, similar
to Laine et al. [2017], and use it to track the face through the captured
speech performances by matching the images and the dense 3D
reconstructions.
4 BUILDING A DATA-DRIVEN AVATAR
Our primary goal is to create extremely high-fidelity facial models
that can be built automatically from a multi-camera capture setup
and rendered and driven in real time in VR (90Hz). In achieving this
goal, we avoid using hand-crafted models or priors, and instead rely
on the rich data we acquired from our multiview capture apparatus.
We unify the concepts of 3D morphable models, image-based
rendering, and variational autoencoders to create a real-time facial
rendering model that can be learned from a multi-camera capture
rig. The idea is to construct a variational autoencoder that jointly encodes geometry and appearance. In our model, the decoder outputs
view-dependent textures—that is, a texture map that is “unwrapped”
from a single camera image. It is view-specific and therefore contains view-dependent effects such as specularities, distortions due
to imperfect geometry estimates, and missing data in areas of the
face that are occluded.
The critical piece of the proposed method is that we use a conditional variational autoencoder to condition on the viewpoint of
the viewer (at training time, the viewer is the camera from which
the texture was unwrapped; at test time, the viewpoint we want
to render from; in both cases the direction is composed with the
inverse of the global head-pose in the scene), allowing us to output
the correct view-specific texture. At test time, we can execute the
decoder network in real-time to regress from latent encoding to
geometry and texture and finally render using rasterization.
Figure 2 visualizes the training and inference pipeline of our algorithm. For this work, we assume that coarse facial geometry has
been tracked and we use it as input to our algorithm with the original camera images. After geometry is tracked, we “unwrap” texture
maps for each camera and for every frame of capture. Unwrapping
is performed by tracing a ray from the camera to each texel of the
texture map and copying the image pixel value into the texel if
the ray is not occluded. These view-specific texture maps are what
we want to generate at test time: reproducing them will cause the
rendered image to match the ground truth image after rendering.
To learn how to generate them efficiently, we use a conditional variational autoencoder (CVAE) [Kingma and Welling 2013]. Because
we jointly model geometry and appearance, our autoencoder has
two branches: an RGB texture map and a vector of mesh vertex
positions.
Let I
v
t
be an image from the multi-camera capture rig at time
instant t from camera v (for a total of V = 40 cameras). In this work,
we assume that the viewpoint vector is relative to the rigid head
orientation that is estimated from the tracking algorithm. At each
time instant we also have a 3D mesh Mt
(7306 vertices × 3 = 21918-
dimensional vector) with a consistent topology across time. Using
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 2018.
Deep Appearance Models for Face Rendering • 68:5
Encoder Decoder
3
16 16 32 32 64 64 128 128
21918
2048 256
256
512
Convolutions (stride=2) Transposed Convolutions (stride=2)
3
16 16 32 32 64 64 128 128
21918
2048
32
256
288
Fully connected Fully connected
128
128
3
128
Fig. 3. Architecture of the Encoder and Decoder. The textures T
µ
t
and T
v
t
are 3-channel 1024 × 1024 images. Each convolutional layer has stride 2 and the
number of channels doubles after the first convolution every two layers. We combine the texture and mesh subencodings via concatenation. The decoder runs
these steps in reverse: we split the network into two branches and use transposed convolutions of stride 2 to double the image resolution at every step. This
decoder network executes in less than 5 milliseconds on an NVIDIA GeForce GTX 1080 GPU.
the image and mesh we can “unwrap” a view-specific texture map
T
v
t
by casting rays through each pixel of the geometry and assigning
the intersected texture coordinate to the color of the image pixel.
During training, the conditional VAE takes the tuple (T
µ
t
, Mt ) as
input and (T
v
t
, Mt ) as the target. Here,
T
µ
t
=
ÍV
v=1
w
v
t ⊙ T
v
t
ÍV
v=1
w
v
t
, (1)
is the average texture, where w
v
t
is a factor indicating whether
each texel is occluded (0) or unoccluded (1) from camera v and ⊙
represents an element-wise product. The primary reason for this
asymmetry is to prevent the latent space from containing view information and to enforce a canonical latent state over all viewpoints
for each time instant. The effects of this is discussed below.
The cornerstone of our method is the conditional variational
autoencoder that learns to jointly compress and reconstruct the texture T
v
t
and mesh vertices Mt
. This autoencoder can be viewed as a
generalization of Principal Component Analysis (PCA) in conventional AAMs. The autoencoder consists of two halves: the encoder
Eϕ and the decoder Dϕ. The encoder takes as input the mesh vertices and texture intensities and outputs parameters of a Gaussian
distribution of the latent space,
µ
z
t
, log σ
z
t ← Eϕ(T
µ
t
, Mt ), (2)
where the function Eϕ is parameterized using a deep neural network
with parameters ϕ. At training time, we sample from the distribution,
zt ∼ N(µ
z
t
, σ
z
t
), (3)
and pass it into the decoder Dϕ and compute the reconstruction loss.
This process approximates the expectation over the distribution defined by the encoder. The vector zt
is a data-driven low-dimensional
representation of the subject’s facial state. It encodes all aspects of
the face, from eye gaze direction, to mouth pose, to tongue expression.
The decoder takes two inputs: the latent facial code zt and the
view vector, represented as the vector pointing from the center of
the head to the camera vt
(relative to the head orientation that is
estimated from the tracking algorithm). The decoder transforms the
latent code and view vector into reconstructed mesh vertices and
texture,
Tˆv
t
, Mˆ
t ← Dϕ(zt
, v
v
t
), (4)
where Tˆv
t
is the reconstructed texture and Mˆ
t
is the reconstructed
mesh. After decoding, the texture, mesh, and camera pose information can be used to render the final reconstructed image ˆI
v
t
.
Figure 3 shows the architecture of the encoder and decoder. Conditioning is performed by concatenating the conditioning variable
to the latent code z after each are transformed by a single fully connected layer. Since the mesh should be independent of viewpoint, it
is only a function of the latent code. The texture decoder subnetwork
consists of a series of strided transposed convolutions to increase
the output resolution. In each layer, reparameterize the weight tensor using Weight Normalization [Salimans and Kingma 2016]. We
use leaky ReLU activations between layers with 0.2 leakiness. The
decoder network must execute in less than 11.1 milliseconds to
achieve 90Hz rendering for real-time VR systems. We are able to
achieve this using transposed strided convolutions even with a final
texture size of 1024 × 1024. This is a major departure from most
previous work for generating facial imagery that has been limited
to significantly smaller output sizes.
Texture maps have non-stationary statistics that we can exploit
in our network design. For example, DeepFace [Taigman et al. 2014]
utilizes “locally-connected layers”, a generalization of convolution
where each pixel location has a unique convolution kernel. We
utilize a similar but simpler approach: each convolutional layer has
a bias that varies with both channel and the spatial dimensions.
We find that this greatly improves reconstruction error and visual
fidelity.
To train our system, we minimize the L2-distance between the
input texture and geometry and the reconstructed texture and geometry plus the KL-divergence between the prior distribution (an
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 2018.
68:6 • Lombardi et al.
isotropic Gaussian) and the distribution of the latent space:
ℓ(ϕ) =
Õ
v,t
λT





w
v
t ⊙

T
v
t − Tˆv
t






2
+ λM






Mt − Mˆ
t






2
+
λZ KL
N

µ
z
t
, σ
z
t
 


 N

0, I


,
(5)
where w
v
t
is a weighting term to ensure the loss does not penalize
missing data (i.e., areas of the face that are not seen by the camera)
and λ∗ are weights for each term (in all experiments we set these
values to λT =1.0, λM =1.0, λZ =0.01). We use the Adam algorithm
[Kingma and Welling 2013] to optimize this loss. Before training,
we standardize the texture and geometry so that they have zero
mean and unit variance. For each subject, our dataset consists of
around 5,000 frames of capture under 40 cameras per frame. Training
typically takes around one day for 200,000 training iterations with
a mini-batch size of 16 on an NVIDIA Tesla M40.
During test time, we execute the decoder half to transform facial
encodings z and viewpoint v into geometry and texture. Using the
architecture shown in Figure 3, this takes approximately 5 milliseconds on an NVIDIA GeForce GTX 1080 graphics card; well within
our target of 11.1 milliseconds. In practice, we find that in VR it
is desirable to decode twice, creating one texture for each eye to
induce parallax also in the generated texture. Our network is able
to generalize in viewpoint enough that the small difference in viewpoint between the two eyes improves the experience by giving an
impression of depth in regions that are poorly approximated by the
sparse geometry (e.g., the oral cavity).
For our viewpoint conditioning to work, the decoder network
Dϕ must rely on the viewpoint conditioning vector to supply all the
information about the viewpoint. In other words, the latent code
z should contain no information about the viewpoint of the input
texture. This should be true for all types of variables that we may
want to condition on at test time. The use of variational autoencoders
[Kingma and Welling 2013] does promote these properties in the
learned representation (as we will discuss in section 4.1). However,
for the special case of viewpoint, we can explicitly enforce this
factorization by supplying input T
µ
t
as the input texture, that is
averaged across all cameras for a particular time instant t. This
allows us to easily enforce a viewpoint-independent encoding of
facial expression and gives us a canonical per-frame latent encoding.
4.1 Conditioned Autoencoding
A critical piece of our model is the ability to condition the output of the network on some property we want to control at test
time. For our base model to work properly, we must condition on
the viewpoint of the virtual camera. The idea of conditioning on
some information we want to control at test time can be extended
to include illumination, gaze direction, and even identity. We can
broadly divide conditioning variables into two categories: extrinsic
variables (e.g., viewpoint, illumination, etc.) and intrinsic variables
(e.g., speech, identity, gaze, etc.).
4.1.1 Viewpoint Conditioning. The main variable that must be
conditioned on is the virtual camera viewpoint. We condition on
viewpoint so that at test time we will generate the appropriate texture from that viewer’s point of view (relative to the avatars position
and orientation). For this to work properly, the latent encoding z
must not encode any view-specific information.
A viewpoint-independent expression representation can be achieved
by using a variational autoencoder [Kingma and Welling 2013],
which encourages the latent encoding z to come from a zero-mean
unit-variance Gaussian distribution. It has been observed that variational autoencoders tend to learn a minimal encoding of the data
because of the regularization of the latent space [Chen et al. 2016].
Because of this, the network is encouraged to use the conditioning variable (in this case, viewpoint) as much as possible in order to minimize the number of dimensions used in the encoding.
Rather than rely only on this mechanism, we input a texture map
averaged over all viewpoints to the encoder network to ensure a
viewpoint-independent latent encoding z. We will, however, exploit
this mechanism for other conditioning variables.
4.1.2 Identity Conditioning. Avatars built with this system are
person-specific. We would like to have a single encoder/decoder that
models multiple people through an identity conditioning variable.
With enough data, we may be able to learn to map single images
to identity conditioning vectors, allowing us to dynamically create
new avatars without needing a multi-camera capture rig.
Interestingly, with this identity conditioning scheme, we notice
that the network learns an identity-independent representation of
facial expression in z despite not imposing any correspondence
of facial expression between different people. This is because the
variational autoencoder (VAE) is encouraged to learn a common
representation of all identities through its prior. Semantics tend to
be preserved probably because the network can reuse convolutional
features throughout the network.
5 DRIVING A DATA-DRIVEN AVATAR
Now that we are able to train the decoder to map latent encodings
to texture and geometry, we can render animated faces in real-time.
We would like the ability to drive our avatars with live or recorded
performance rather than only playing back data from the original
capture. In this section, we detail how to animate our avatar by
controlling the latent facial code z with an unsupervised imagebased tracking method. Because our focus is on creating the highest
possible quality avatars and facial animation, we limit our scope to
person-specific models (i.e., a person can drive only his or her own
avatar).
The primary challenge for driving performance with these avatars
is obtaining correspondence between frames in our multi-camera
capture system and frames in our headset. Note that this is a unique
problem for virtual reality avatars because one cannot wear the
headset during the multi-camera capture to allow us to capture
both sets of data simultaneously, as the headset would occlude the
face. We address this problem by utilizing unsupervised domain
adaptation.
5.1 Video-driven Animation
Our approach centers around image-based rendering on the rich
multi-camera data to simulate headset images. The first step is
to compute approximate intrinsic and extrinsic headset camera
parameters in the multi-camera coordinate system (we do this by
ACM Transactions on Graphics, Vol. 37, No. 4, Article 68. Publication date: August 201