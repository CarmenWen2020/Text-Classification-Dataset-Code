Registration maps or warps form a key element in Shape-from-Template (SfT). They relate the template with the input image, which contains the projection of the deformed surface. Recently, it was shown that isometric SfT can be solved analytically if the warp and its first-order derivatives are known. In practice, the warp is recovered by interpolating a set of discrete template-to-image point correspondences. This process relies on smoothness priors but ignores the 3D geometry. This may produce errors in the warp and poor reconstructions. In contrast, we propose to create a 3D consistent warp, which technically is a very challenging task, as the 3D shape variables must be eliminated from the isometric SfT equations to find differential constraints for the warp only. Integrating these constraints in warp estimation yields the isowarp, a warp 3D consistent with isometric SfT. Experimental results show that incorporating the isowarp in the SfT pipeline allows the analytic solution to outperform non-convex 3D shape refinement methods and the recent DNN-based SfT methods. The isowarp can be properly initialized with convex methods and its hyperparameters can be automatically obtained with cross-validation. The isowarp is resistant to 3D ambiguities and less computationally expensive than existing 3D shape refinement methods. The isowarp is thus a theoretical and practical breakthrough in SfT.

Access provided by University of Auckland Library

Introduction
This paper is about the Shape-from-Template (SfT) problem, also known as template-based non-rigid 3D reconstruction. The object of interest in SfT is a surface that deforms and from which we take a single image with a calibrated camera. The known template is a reference shape of the surface (one of its possible deformations) and a texture map that describes its appearance. Solving SfT means recovering the deformed surface seen in the image as a one-to-one embedding from the template. Importantly, SfT requires a deformation prior. Isometry is a widely applicable prior, which forces geodesic distances to be preserved, and is a good approximation for the deformation undergone by many common materials such as clothing, tissue or paper. Isometry is a differential concept that involves the embedding function and its derivatives. It has been thoroughly studied in SfT (Salzmann and Fua 2011; Perriollat et al. 2011; Bartoli et al. 2015; Ngo et al. 2016; Chhatkuli et al. 2017) whose specific instance we refer to as isometric SfT. Early isometric SfT methods (Salzmann and Fua 2011; Perriollat et al. 2011) use approximations of isometry, namely the inextensibility constraint and the Maximum Depth Heuristic (MDH). The theoretical properties of these models is not fully understood and their results are inaccurate. Very recently, isometric SfT has been described exactly using the differential geometry of surfaces, image projections and isometric deformations, leading to the differential SfT methods. The elements involved in differential SfT (the template domain, deformed surface, image plane) are connected with functions. Their relationship is revealed in a commutative graph shown in Fig. 1. Two important functions contain the unknowns in SfT. i) The reconstruction embedding 𝑋𝑖, usually described with a scalar depth function 𝜌, embeds the template domain to form the deformed surface and is the sought solution to SfT. ii) The warp 𝜂, which represents the registration between the template and the input image. While 𝑋𝑖 is not directly measurable, we can take discrete measurements of 𝜂 by extracting point correspondences between the template’s texture map and the input image.

Fig. 1
figure 1
Differential SfT diagram. Arrows represent locally differentiable functions. The template is represented as a 2D texture map endowed with a local metric 𝑈𝑡, i.e. the first fundamental form of the template’s surface. The projection function Π𝑝 represents the perspective camera. The embedding 𝑋𝑖 has the same parametrization domain as the template. By following the composition rule, where ∘ denotes function composition, the reprojection equation for the warp is given as 𝜂=Π𝑝∘𝑋𝑖. Given that 𝐽𝑋𝑖 is the Jacobian matrix of 𝑋𝑖, the isometry equation comes from the fact that isometries preserve the local metric and thus 𝐽⊤𝑋𝑖𝐽𝑋𝑖=𝑈𝑡. The resulting PDE system is called the isometric SfT system

Full size image
A recent breakthrough in SfT showed that there exists a direct analytic expression that transforms 𝜂 and its first order derivatives into 𝑋𝑖 (Bartoli et al. 2015). This expression is exact given that 𝜂 is error free and shows that isometric SfT is well-posed given 𝜂. It also means that obtaining 𝜂 is equivalent to solving isometric SfT. Logically, thus current methods first estimate the warp 𝜂 and then use the analytic solution for 𝑋𝑖. However, estimating the warp is a difficult regression problem that has been overlooked in the literature. Firstly, the warp is sampled at zeroth-order, by means of point correspondences, which requires interpolation to obtain its derivatives. Secondly, there are no known geometric constraints to make the warp 3D consistent in isometric SfT. This leaves the warp estimation largely disconnected from the 3D geometry, only relying on weaker smoothness priors.

We challenge the current SfT paradigm: we raise the possibility of incorporating 3D geometry directly at warp estimation. This difficult problem has so far remained open. It raises three main fundamental unanswered questions. Q1) What are the equations to guarantee the 3D geometry consistency of a warp? Q2) Can we transform these equations in a prior to be used in warp estimation? Q3) To which extent this new prior improves the quality of the warp and ultimately of the 3D reconstruction?

Fig. 2
figure 2
Results of isometric SfT for different warp models and reconstruction methods on a real example of a cushion. a–c are the warps obtained with BS-warp, BS-Schwarp and BS-Isowarp respectively; and e–j show the 3D reconstruction results of BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17, Salzmann11 and BS-warp+Ref respectively, whose names are defined later in the paper. The reconstruction ground truth is obtained using dense SfM from multiple images (Agisoft Photoscan 1.0.4 2014). The experiment uses a 3D template and the warps are computed using 100 SURF point correspondences (Bay et al. 2006). We give an isometry factor, computed for a set of points W in the template. We give 2D and 3D generalization errors over a set of 1200 correspondences, different from those used in estimation. In registration, we find seemingly very similar results for the different warps. In reconstruction however, our isowarp leads to the best results, outperforming the rest of warp-based methods, the MDH and even 3D refinement. The reason is that, even if the isowarp does not achieve a drastic improvement in registration, it intrinsically enforces geometric constraints, giving structural coherence to the derivatives, directly leading to outperforming 3D reconstruction results without 3D refinement

Full size image
This paper brings answers to these questions. Our main contributions are then threefold. (i) We show that the warp in isometric SfT, hereinafter the isometric warp or simply the isowarp, is the solution of a non-linear system of second-order PDEs that depend on the template’s known first fundamental form. This represents a breakthrough in our theoretical understanding of SfT that reveals the mathematical properties of the warp independently of the surface shape. (ii) We propose a method to compute the isowarp from point correspondences using unconstrained iterative optimization. We show how to initialize the solution and automatically select the hyperparameters. (iii) We show that given an isowarp, which is exactly compatible with the SfT equations, the analytic reconstruction is also exact, producing isometric solutions. Beyond the theoretical advances, the isowarp has important practical advantages: (1) it allows the analytic solution (Bartoli et al. 2015) to achieve a higher reconstruction quality than existing nonlinear refinement methods, clearly outperforming warps based on smoothing priors, namely the bending energy (Bookstein 1989) or the Schwarzian derivatives (Pizarro et al. 2016), see Fig. 2, (2) it is resistant to 3D ambiguities, (3) it involves fewer variables and has a fast convergence and (4) its hyperparameters can be optimally obtained with cross-validation, which is not possible with the existing shape refinement methods.

The isowarp was first published for the weak-perspective camera (Pizarro et al. 2013). For this particular camera model it is formulated as a simple linear equation system. In contrast, we find the isowarp for the perspective camera, which is tremendously more challenging owing to its nonlinear nature, and considerably more important in terms of practical use.

We recall that the isowarp is a fundamental contribution, in the sense that it establishes a fundamental new multiple image model in computer vision. While multiple image models are very well understood for rigid objects (they are, in particular, the inter-image homography for a planar scene and the fundamental matrix for a non-planar scene Hartley and Zisserman 2003), they are still largely unknown for deformable objects. Some deformable objects can extend while they deform and this creates a complex and largely underconstrained image geometry. However, many objects deform closely to isometries, preserving their geodesics. While modeling this property using differential equations has been largely exploited and understood in the recent years by combining a perspective camera and a representation of the 3D surface (Bartoli et al. 2015; Chhatkuli et al. 2017), it is far from trivial to create the mathematical object which establishes the relationship between images independently of the actual 3D surface. This object is the isowarp and is shown to be governed by a differential equation, given for the first time in this paper, as Eq. (11).

The paper is organized as follows. Section 2 presents the state-of-the-art in SfT. Section 3 describes the geometric model of isometric SfT. Section 4 derives the isowarp equations. Section 5 gives the isowarp algorithm. Section 6 gives experimental results. Finally, Sect. 7 concludes.

Previous Work
We review the state-of-the-art in SfT with special attention to differential isometric SfT methods and the techniques they use to compute the warp. We also review the contributions of the paper with respect to the existing methods.

General SfT Methods
The general landscape of SfT methods is pictured in Fig. 3. We first distinguish between iterative-refinement and initialization-free methods. Iterative-refinement methods are based on non-convex optimization and they require accurate initialization to avoid falling into incorrect local minima. We have refinement methods based on particles (Özgür and Bartoli 2017) and those directly optimizing a cost function with local descent methods (Haouchine et al. 2014; Brunet et al. 2014; Yu et al. 2015), such as the popular Levenberg-Marquardt. These methods are accurate if they converge to the correct local minimum. Initialization-free methods do not require an initial guess of the solution. In this category we distinguish between local and global methods. Local methods are based on differential (Bartoli et al. 2015; Chhatkuli et al. 2017) or piece-wise (Fayad et al. 2011) models of the surface, recovering point-wise depth, surface normals, or planes (Fayad et al. 2011). Usually these methods count with analytic solutions that do not require optimization albeit a last step of surface integration and/or stitching, which is usually a Linear Least-Squares (LLS) problem. Global methods recover the surface in a single step (in this sense all the aforementioned iterative-refinement methods are global). In this category we find differential boundary conditioned problems (Casillas-Perez et al. 2018) and methods based on convex optimization, such as the MDH (Salzmann and Fua 2011; Perriollat et al. 2011), methods based on 𝑙1 optimization (Malti and Herzet 2017) and methods based on LLS (Malti et al. 2015).

In terms of deformation priors we distinguish between isometric and non-isometric methods. The isometric model has been extensively studied (Salzmann and Fua 2011; Perriollat et al. 2011; Bartoli et al. 2015; Chhatkuli et al. 2017; Brunet et al. 2014) and counts with methods in all previous categories. Other popular models that are non-isometric are based on conformity (Bartoli et al. 2015), Laplacian smoothness (Ngo et al. 2016), linear (Malti et al. 2015; Malti and Herzet 2017) and non-linear elasticity (Haouchine et al. 2014; Agudo et al. 2016) and statistical learning, such as the low-rank shape model (Agudo et al. 2014; Yu et al. 2015). In isometric SfT, the state-of-the-art strategy is to use local methods, in particular differential SfT solutions (Bartoli et al. 2015; Chhatkuli et al. 2017), to initialize iterative-refinement methods (Brunet et al. 2014).

Fig. 3
figure 3
Classification of SfT methods. The classification is made by the deformation priors and between initialization-free and iterative-refinement methods

Full size image
In the recent years, DNN-based SfT methods have appeared (Pumarola et al. 2018; Golyanik et al. 2018; Shimada et al. 2019; Fuentes-Jiménez et al. 2018). These methods learn the function that maps the input image to the template and to the object depth from a training dataset. They solve both registration and reconstruction in a single step, which is a strong advantage against the classical methods based on a pre-computed registration. However, DNN-based methods require a large amount of data with multiple deformations to be trained and are computationally demanding. Their 3D results over a test set strongly depend on the similarity of deformations used during the training, a disadvantage not present in non-DNN methods. Most DNN-based SfT methods are object-specific (Pumarola et al. 2018; Golyanik et al. 2018; Fuentes-Jiménez et al. 2018), which means their networks are trained for reconstructing a specific template (with a specific texture). Hence, they need to be retrained for each new object. In contrast, the object-generic DNN-based SfT method (Shimada et al. 2019) works even if the texture of the object was not present in the training dataset. However, object-specific methods are more accurate. DNN-based SfT methods are not scalable in the sense that they have fixed output sizes, both in terms of the output meshes in Pumarola et al. (2018); Golyanik et al. (2018); Shimada et al. (2019) and dense maps Fuentes-Jiménez et al. (2018).

Warp Estimation
Warp functions are defined with different function representations. We find linear basis expansions, such as the thin-plate spline (Bookstein 1989), the tensor-product B-spline (Rueckert et al. 1999), finite elements (Pilet et al. 2008) or finite differences as in optical flow methods (Horn and Schunck 1981). In SfT (Bartoli et al. 2015; Chhatkuli et al. 2017; Pizarro et al. 2016), the warp is estimated from point correspondences extracted with either keypoint detection methods (Lowe 2004; Bay et al. 2006) or optical flow methods (Sundaram et al. 2010). The false correspondences are removed using specific robust deformable registration methods (Pizarro and Bartoli 2012; Pilet et al. 2008). The measurements are thus discrete and scattered in the image, especially in wide-baseline conditions. Fitting a warp function under these conditions requires priors. Existing methods rely on a smoother, which is a prior that penalizes high frequencies. The smoother plays an important role as it directly controls how the warp interpolates data and how its derivatives are shaped. The most common smoother is based on penalizing the norm of the second-order derivatives of the warp and is known as the bending energy (Bookstein 1989; Horn and Schunck 1981; Zach et al. 2007). The main problem of the bending energy is that it makes the warp locally affine (Bookstein 1989), obliterating local perspective effects which contain crucial information for the reconstruction (Pizarro et al. 2016). In fact, in the limit where the bending energy is exactly enforced the warp is a mere affine function (see the magenta warp in Fig. 10d) for an illustration).

Another smoother, which has been recently proposed, is based on the Schwarzian derivatives (Ovsienko and Tabachnikov 2009), which are projective differential invariants preserved by planes. When used to compute a warp, called the schwarp, it helps preserving local perspective effects. However, the schwarp also distorts the local structure of the warp by assuming that the surface is locally flat. When imposed exactly, the schwarp becomes a homographic function.

There also exist rational warp representations that capture the local projective structure. For instance we find the generalized TPS warps (Bartoli et al. 2010) and the NURBS warp (Brunet et al. 2009). They use a 3D form of bending energy expressed in homogeneous coordinates. They tend to be unstable due to their rational structure (Pizarro et al. 2016).

None of the previous warp estimation methods includes constraints to make the warp consistent with the 3D geometry. A warp resulting from these methods is likely to produce non-isometric and unstable reconstructions, as exemplified by Fig. 2.

Differential Isometric SfT Methods
Fig. 4
figure 4
Differential methods for isometric SfT. We show 4 main strategies represented by numbered arrows in the figure. Arrows 1 and 2 represent the methods Bartoli et al. (2015) and Chhatkuli et al. (2017) which use the analytic expression for the depth 𝜌 and its derivatives 𝜌𝑢 and 𝜌𝑣 respectively. Arrow 3 represents the schwarp method Pizarro et al. (2016), which expands the effort to obtain a quality warp in a 2D refinement step to improve the 3D reconstruction. Arrow 4 represents our isowarp method, which imposes the isowarp equations to obtain a warp fully compatible with isometry

Full size image
Differential SfT methods study solutions to the isometric SfT system, a system of non-linear first-order PDEs (Bartoli et al. 2015), see Fig. 1. These equations depend on the unknown reconstruction embedding 𝑋𝑖, uniquely defined with the depth function 𝜌, and the warp 𝜂. These methods find analytic solutions for 𝜌, and its derivatives ∇𝜌=(𝜌𝑢,𝜌𝑣)⊤, in terms of 𝜂, 𝜂𝑢 and 𝜂𝑣 and the template’s known local metric 𝑈𝑡. Using these analytic solutions, there exist several strategies depending on how the warp is computed. Figure 4 shows the three main existing strategies based on the SfT analytic solutions and the one we propose, strategy 4. We describe them next in detail. They are also mentioned in Fig. 2.

Strategy 1. Direct depth solution from any warp.

This strategy was first proposed in Bartoli et al. (2015) along with the first analytic solution and well-posedness properties of isometric SfT. This solution assumes that 𝜌 and its derivatives ∇𝜌 are independent algebraic variables in the isometric SfT system, not related via differentiation, leading to the non-holonomic solution. This solution is applied in Bartoli et al. (2015) to warps computed from point correspondences with the bending energy as smoother.

Strategy 2. Depth’s gradient integration from any warp.

The next step in differential SfT methods was proposed in Chhatkuli et al. (2017), where the non-holonomic depth’s gradient was used to recover the surface via integration. This strategy is significantly more stable against the amount of perspective and more accurate than strategy 1. Strategies 1 and 2 use the same solution to the isometric SfT system. They differ if the warp has errors. The recovered surface is not exactly isometric to the template. If the warp is error free, the two strategies converge to the same exact solution.

Strategy 3. Direct depth solution from a locally projective warp.

In this strategy a schwarp is first obtained to apply the analytic solution. This warp better captures the local perspective effects than the usual warps. This strategy involves non-convex optimization to retrieve the warp. In practice, the improvement of schwarps in 3D reconstruction is however limited and degrades with increasing surface curvature.

Proposed strategy 4. Direct depth solution from the isowarp.

We propose a new reconstruction strategy and method in isometric SfT. We derive a set of warp constraints from the 3D isometry equations. We then derive a new method that forces any warp representation, such as the B-spline, to comply with the isowarp equations. We show that using the isowarp followed by the analytic depth solution achieves 3D refinement quality reconstructions. This has many practical advantages in terms of accuracy and computational complexity since the isowarp does not suffer the possible ambiguities arising from the 3D to 2D projection characteristic of the 3D refinement methods and involves less unknown variables.

Final 3D refinement. Strategies 1 and 2 are usually used as initialization in a final 3D refinement step based on non-convex optimization to achieve state-of-the-art reconstruction quality. It appears as a final step in Bartoli et al. (2015); Chhatkuli et al. (2017), where strategies 1 and 2 are first proposed, for stabilizing the results and achieving competitive reconstruction accuracy. The 3D refinement method converges well to the sought solution from strategies 1 and 2. Indeed, both refined solutions are similar. However, 3D refinement falls into a local minimum with lesser quality initialization and is computationally costly. Besides, the non-convex cost function involves several terms, including the isometry constraint, the reprojection term and a smoother, and combines them using unknown hyperparameters. Obtaining these hyperparameters with cross-validation represents an open problem without the access to 3D ground-truth. This is mainly because the 2D metrics that can be used without ground-truth data, such as the 2D reprojection error, do not completely constrain all the degrees-of-freedom of the surface solution, leading to suboptimal sets of hyperparameters. As a consequence, the hyperparameters in refinement methods cannot be adjusted automatically and must thus be manually tuned or kept fixed to predefined suboptimal values. In contrast, the hyperparameters for the isowarp can be obtained automatically by cross-validation, and we give an algorithm that implements this step.

Problem Formulation
Notation
We use script upper-case characters such as  to denote regular surfaces in ℝ3 and subsets of the usual topology of ℝ2, such as  which represents the surface parametrization domain. Surface parametrizations are represented by pairs (,𝑋𝑡), where  is the domain set of the function and 𝑋𝑡:→ℝ3 is the parametrization function of the surface, represented by an upper-case letter with a single subscript. The subscript signals the associated surface. We use greek upper-case characters for maps between surfaces, e.g. the isometric map Ψ, and greek lower-case characters for maps between subsets of ℝ2, e.g. the warp 𝜂. Mapping composition is represented by the ∘ symbol. The operators ‖⋅‖ and ⟨⋅,⋅⟩ refer to the Euclidean norm and the dot product, respectively. Along the paper, we consider row vectors of the Euclidean vector space ℝ3 and we represent them with tuples as (x, y, z). Cases where a column vector is required will be indicated through the transpose operator using the superscript (⋅)⊤. Image points are denoted by the coordinate vectors (u, v). A canonical basis is used in both cases. Operators tr() and det() are the trace and the determinant of a square matrix respectively. Operators and functionals are defined with upper-case letters and square brackets. For instance 𝐷[𝜂] denotes an error metric over the function 𝜂. We use ≜ to denote equality definitions.

Geometric Setup
The geometric model of isometric SfT is illustrated in Fig. 5.

Fig. 5
figure 5
The diagram shows the differential geometric model we use to study isometric SfT. The known template  is transformed by an isometric map Ψ into the unknown surface , which is then projected with a perspective camera Π𝑝 to create the image . In this diagram one can find identities by following different paths that connect the domains. The arrows represent functions and we can thus follow them by function composition (for instance we have 𝑋𝑖=𝑋¯𝑖∘𝜂). See Sect. 3.2 for details

Full size image
Let the subset ⊂ℝ3 be a regular parametric surface known as the template surface or simply the template, and let (,𝑋𝑡) be one of its parametrizations. The template and its parametrization are known. The subset ⊂ℝ3 is the regular parametric surface that results from composing the template with an unknown isometric map Ψ. We review isometric maps and their properties in Sect. 3.4.

The observed image of surface  is represented by ⊂ℝ2 and captured by a perspective camera. We assume that the restriction of perspective projection map Π𝑝| to  is bijective with image . This assumption ensures the surface is not self-occluded and thus that a point is uniquely projected into image .

The warp is represented by 𝜂=(𝜂1,𝜂2)⊤∈𝐶2(,) in Fig. 5. It is a two-diffemorphism between the open sets ,⊂ℝ2, the parametric domain of the template and the image respectively. A two-diffeomorphism is a twice continuously differentiable map with differentiable inverse map too. The diffeomorphic character of the warp ensures that the parametrizations (,𝑋𝑖) and (,𝑋¯𝑖) of  are compatible. We derive constraints that 𝜂 has to fulfill to become an isowarp in Sect. 4.

Camera Model and Image Embedding
We assume that the image plane is at 𝑧=1 in camera coordinates, which is achieved by working in standardized retinal coordinates. The perspective projection of a point (x, y, z) is then given by:

Π𝑝:ℝ3∖{(𝑥,𝑦,𝑧)∈ℝ3|𝑧=0}(𝑥,𝑦,𝑧)⊤→ℝ2↦(𝑥𝑧,𝑦𝑧)⊤.
(1)
The bijective projection assumption permits the unknown surface  to be parametrized from the image domain using a scalar depth function. It is called the image embbeding of the surface (,𝑋¯𝑖). The image domain  however may be brought to the template domain  using the warp 𝜂, which maps between them in a one to one manner. This way, we construct a surface embedding whose domain is the template’s. In other words, this function maps a template point to its corresponding 3D point on the deformed surface  directly in camera coordinates. This is visualized in Fig. 5 and follows the usual geometric setup of SfT, as described in Bartoli et al. (2015); Casillas-Perez et al. (2018) for instance. As a result, the deformed surface  can be expressed in terms of a depth function 𝜌:⊂ℝ2→ℝ as:

𝑋𝑖=𝑋¯𝑖∘𝜂=𝜌𝜁∘𝜂(𝜂⊤,1)⊤,
(2)
where 𝜁(𝑢′,𝑣′)=1+𝑢′2+𝑣′2‾‾‾‾‾‾‾‾‾‾‾‾√. Appendix 1 shows the detailed derivation of this image embedding which was first used in Bartoli et al. (2015).

As will be seen, working with the parametrization (,𝑋𝑖) of  has two principal advantages. First, it allows us to compute the first fundamental form, also known as the metric tensor, over the same parametrization domain as the template, which is essential to obtain the isowarp equations. Second, it greatly simplifies the form of these equations.

Isometric Maps
An isometric map between two surfaces Ψ:1→2 is a diffeomorphism that preserves the intrinsic distance (the geodesic distance) and, consequently, the angles and the areas. Formally, isometries are defined in terms of the pushforward function.

Definition 1
(Isometric map) A diffeomorphism Ψ:𝑆1→𝑆2 between surfaces in ℝ3 is an isometric map (also called isometry) if for each point 𝐩∈𝑆1, the pushforward function 𝑑Ψ𝐩:𝑇𝐩𝑆1→𝑇Ψ(𝐩)𝑆2 of Ψ is a linear isometric function. It means that:

⟨𝐰,𝐡⟩=⟨𝑑Ψ𝐩(𝐰),𝑑Ψ𝐩(𝐡)⟩,
(3)
where 𝐰,𝐡∈𝑇𝐩𝑆1 are any two vectors of the tangent plane of 𝑆1 at 𝐩. Two regular surfaces 1 and 2 are isometric to one another if there exists an isometric map between them.

Isometric maps can also be characterized in terms of differential geometry. The next theorem shows that it is possible to find parametrizations of isometric surfaces with common domain that preserve the coefficients of the first fundamental form.

Theorem 1
A diffeomorphism Ψ:𝑆1→𝑆2 between two surfaces 𝑆1 and 𝑆2 in ℝ3 with parametrizations (,𝑋1) and (,𝑋2) respectively, is an isometric map if and only if it preserves the coefficients of the first fundamental form computed from these parametrizations.

The proof of the theorem is a well known result that can be found in Do Carmos’s book (Do Carmo 2016). It is important to emphasize that the coefficients of the first fundamental form computed from both parametrizations (1,𝑋1) and (2,𝑋2) of 1 and 2 respectively, are not necessarily equal even if they are isometric surfaces. A common domain 1=2= is required to apply Theorem 1. This is one of the reasons why we use the parametrization (2) of surface .

The Isowarp
We review how to obtain the depth and depth’s gradient non-holonomic solutions, as was first shown in Bartoli et al. (2015). We then impose the differential consistency to those solutions by differentiating the non-holonomic depth expression and substituting it back into the SfT equations. This allows us to find the isowarp equations which will characterize the isowarp. As a preliminary, we formally define the isowarp.

Definition 2
(Isowarp) A warp 𝜂∈𝐶2(1,2) between the domains 1,2⊂ℝ2 of two surfaces 1 and 2 with a generic parametrization (1,𝑋1) and a perspective parametrization (2,𝑋¯2)

respectively (see Fig. 5), is an isowarp if and only if the surfaces are related by an isometric map.

Note that using the identity 𝑋2=𝑋¯2∘𝜂 the surface  can be expressed through the parametrization (1,𝑋2) (2) which shares the domain with 1. In terms of isometric SfT and according to the definition, the template  can be defined by any generic parametrization (,𝑋𝑡), but the deformed surface  must be projected by the perspective projection (1). Consequently, there exist a parametrization referred from the template domain as (,𝑋𝑖=𝑋¯𝑖∘𝜂) (2).

The Non-holonomic Solution
Theorem 1 ensures that the coefficients of the first fundamental form of two isometric surfaces are equal when they are computed from parametrizations that share a common domain. Fig. 5 shows that  is the common domain of the parametrizations (,𝑋𝑡) and (,𝑋𝑖) of surfaces  and  respectively. Consequently, denoting the first fundamental form of these parametrizations as 𝑈𝑡 and 𝑈𝑖, we obtain the following matrix PDE:

𝑈𝑡=(𝐸𝑡𝐹𝑡𝐹𝑡𝐺𝑡)=(𝐸𝑖𝐹𝑖𝐹𝑖𝐺𝑖)=𝑈𝑖,
(4)
where 𝐸𝑡, 𝐹𝑡 and 𝐺𝑡 are the known coefficients of the first fundamental form of the template . The matrix expression (4) represents the isometry equation for a generic parametrization (,𝑋𝑖) of surface . Calculating the coefficients 𝐸𝑖=⟨∂𝑋𝑖∂𝑢,∂𝑋𝑖∂𝑢⟩, 𝐹𝑖=⟨∂𝑋𝑖∂𝑢,∂𝑋𝑖∂𝑣⟩ and 𝐺𝑖=⟨∂𝑋𝑖∂𝑣,∂𝑋𝑖∂𝑣⟩ from the perspective parametrization (,𝑋𝑖) (2), and reordering terms we achieve the following system of PDEs:

∇𝜌∇𝜌⊤+𝜌2𝐻[𝜂]=𝑈𝑡,
(5)
where ∇𝜌 is the gradient vector of the depth function 𝜌 and 𝐻[𝜂] is the following first-order differential operator:

𝐻[𝜂]=1‖𝜔‖2(𝐽⊤𝜂𝐽𝜂−1‖𝜔‖2(𝐽⊤𝜂𝜂𝜂⊤𝐽𝜂)),
(6)
where 𝐽𝜂 is the full rank Jacobian matrix of the warp 𝜂, and 𝜔:→ℝ3 is 𝜔⊤=(𝜂⊤,1). Note that 𝐻[𝜂] depends only on the warp function 𝜂 and its derivatives 𝐽𝜂. Evaluated at any point of the warp domain, 𝐻[𝜂](𝑢,𝑣) is a symmetric positive-definite matrix. Expression (5) shows the isometry equations customized for the perspective parametrization. The left-hand side of the equation is composed by a sum of two matrices, ∇𝜌∇𝜌⊤ and 𝜌2𝐻, whose ranks are 1 and 2 respectively. Following Bartoli et al. (2015), there exists an analytic closed-form expression 𝜌̂ [𝜂] for the depth function 𝜌:

𝜌̂ [𝜂]=tr(𝑈𝑡𝐻−1[𝜂])2−(tr(𝑈𝑡𝐻−1[𝜂]))24−det(𝑈𝑡𝐻−1[𝜂])‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾⎷.
(7)
Using 𝜌[𝜂]^ in a reconstruction algorithm does not guarantee that the resulting surface is isometric, unless 𝜂 would be noise-free, which is never the case in practice.

The Isowarp Equations
Equation (7) constitutes the non-holonomic depth solution. Observe that 𝜌̂ [𝜂] only depends on the warp 𝜂 via 𝐻[𝜂] and the coefficients of the first fundamental form 𝑈𝑡 of the template. The non-holonomic depth 𝜌̂ [𝜂] is a differentiable operator and we can thus compute its derivatives:

𝜌̂ 𝑢[𝜂]≜∂𝜌̂ [𝜂]∂𝑢,𝜌̂ 𝑣[𝜂]≜∂𝜌̂ [𝜂]∂𝑣,
(8)
where the new differential operators 𝜌̂ 𝑢[𝜂], 𝜌̂ 𝑣[𝜂] depend on the second-order derivatives of 𝜂.

We rewrite Eq. (5) to find the following PDE system:

∇𝜌∇𝜌⊤=(𝜌2𝑢𝜌𝑢𝜌𝑣𝜌𝑢𝜌𝑣𝜌2𝑣)=𝑈𝑡−𝜌2𝐻[𝜂].
(9)
Substituting equations (7) and (8) with 𝜌̂ [𝜂] and its derivatives 𝜌̂ 𝑢[𝜂], 𝜌̂ 𝑣[𝜂] in Eq. (9) we obtain the isowarp equations. They are three PDEs that relate the warp 𝜂 and its partial derivatives up to second-order 𝜂𝑢, 𝜂𝑣, 𝜂𝑢𝑢, 𝜂𝑢𝑣, 𝜂𝑣𝑣. Moving all terms in Eq. (9) to the left-hand side we obtain their matrix form:

(𝜌̂ 2𝑢[𝜂]𝜌̂ 𝑢[𝜂]𝜌̂ 𝑣[𝜂]𝜌̂ 𝑢[𝜂]𝜌̂ 𝑣[𝜂]𝜌̂ 2𝑣[𝜂])−𝑈𝑡+𝜌̂ 2[𝜂]𝐻[𝜂]=(0000).
(10)
As a result and due to symmetry we obtain the following PDE system:

	(11)
where 𝐻𝑖𝑗[𝜂] denotes the (i, j)th entry of H. The PDE system (11) represents the isowarp equations, a set of 3 non-linear second-order PDEs 𝐼1[𝜂], 𝐼2[𝜂] and 𝐼3[𝜂] in 12 variables: (𝜂1,𝜂1𝑢,𝜂1𝑣,𝜂1𝑢𝑢,𝜂1𝑢𝑣,𝜂1𝑣𝑣) and (𝜂2,𝜂2𝑢,𝜂2𝑣,𝜂2𝑢𝑢,𝜂2𝑢𝑣,𝜂2𝑣𝑣). Appendix 2 gives code to derive the isowarp equations using Matlab’s symbolic engine. The following theorem formally characterizes the isowarp from system (11).

Theorem 2
A warp function 𝜂∈𝐶2(1,2) between the domains 1,2⊂ℝ2 of two surfaces 1 and 2 with a generic parametrization (1,𝑋1) and a perspective parametrization (2,𝑋2) (2) respectively, is an isowarp if and only if it satisfies the system of isowarp equations (11).

Proof
It is a consequence of the isowarp Definition 2 and of the development followed to derive the isowarp equations in Sects. 4.1 and 4.2. ◻

Importantly, the isowarp equations only have 𝜂 as free variable: the other variables are known from the template, as we managed to eliminate the unknown 3D surface. Obviously, the system of isowarp equations (11) does not uniquely determine the isowarp. It represents constraints the warp must verify to be an isowarp. In other words, the system (11) characterizes the set of image warps which feasibly represent the projection of any isometric deformation of a known surface. The isowarp algorithm described next shows how to combine these equations to a data term to actually estimate a warp.

Isowarp Algorithm
We propose a method to compute the isowarp from a set of N point correspondences 𝐶={(𝑝𝑖,𝑞𝑖)∈×|1≤𝑖≤𝑁} between the template’s domain defining  and an input image . It is based on a 2D refinement process which enforces the isowarp equations. An iterative estimation algorithm is proposed to automatically select the hyperparameters by cross-validation.

Fig. 6
figure 6
Overview of the BS-Isowarp Algorithm. Dotted squares separate the isowarp estimation steps from the reconstruction block. The BS-Isowarp Algorithm has three main steps. Firstly, a convex problem is solved to retrieves the BS-warp 𝜂0 (magenta box), which includes automatic hyperparameter selection (blue box), see Sect. 5.2. The BS-warp serves as an initialization to the BS-Isowarp-Base algorithm (yellow box), which establishes a variational problem that enforces the isowarp equations, see Sect. 5.3. This Algorithm repeatedly calls the BS-Isowarp-Hyperparameters Algorithm (grey box), which implements a cross-validation mechanism to select the hyperparameters, see Sect. 5.4 (Color figure online)

Full size image
Originally, the isowarp algorithm assumes that no self-occlusion occurs, hence, that a diffeomorphic map exists between the image and the sought reconstruction. However, this is not a hard assumption, as we can still use the isowarp strategy when the warp is piecewise diffeomorphic, excluding self-occluded areas from the reconstruction. The method developed in Pizarro and Bartoli (2012) which estimates piecewise smooth warps by deactivating the smoothing terms in self-occluded areas, can be used with the isowarps. The method also removes the possible mismatches.

Overview of the BS-Isowarp Algorithm
Figure 6 shows an overview of the complete BS-Isowarp Algorithm. We estimate the isowarp following 3 steps using a B-spline representation, leading to the BS-Isowarp. We first compute a BS-warp as initialization, as this warp has a convex solution, for which we give a full-fledged algorithm including automatic hyperparameter selection in Sect. 5.2, along with a short description of the original variational problem. Interestingly, this BS-warp algorithm serves as a gentle introduction to the BS-Isowarp algorithm, whose layout we give in Algorithm 1. This algorithm first calls the BS-warp algorithm, then selects the BS-Isowarp hyperparameters and finalizes the isowarp. These last two steps depend on two essential algorithms, BS-Isowarp-Hyperparameters and BS-Isowarp-Base. The BS-Isowarp-Base algorithm is given first, in Sect. 5.3, along with the variational problem. Specifically, this algorithm estimates the BS-Isowarp given the hyperparameters. The BS-Isowarp-Hyperparameters algorithm is then given in Sect. 5.4, as it depends on the BS-Isowarp-Base algorithm. It implements a cross-validation mechanism to select the hyperparameters.

figure a
Convex Initialization by the BS-warp Algorithm
We obtain the initial estimate 𝜂0 by solving the following classical variational problem:

argmin𝜂0𝜀0[𝜂0] with 𝜀0[𝜂0]=𝜆d0𝜀d[𝜂0]+𝜆b0𝜀b[𝜂0].
(12)
The functional 𝜀d[𝜂] is the data term, given by the mean square transfer error of the point correspondences:

𝜀d[𝜂]=1𝑁∑𝑖=1𝑁‖𝜂(𝑝𝑖)−𝑞𝑖‖2.
(13)
The functional 𝜀b[𝜂] is the bending energy which penalizes the warp second-order derivatives, given by:

𝜀b[𝜂]=1|𝑃|∑𝑝∈𝑃‖‖‖∂2𝜂∂(𝑢,𝑣)2(𝑝)‖‖‖2.
(14)
Given the hyperparameters (𝜆d0,𝜆b0), the estimation problem (12) is convex and solved with LLS. We represent 𝜂 using a B-spline model. This converts the variational problem (12) into a linear least-squares problem depending on a set 𝑤0 of control points. Optimal values for the hyperparameters 𝜆d0 and 𝜆b0 are chosen by applying Monte Carlo cross-validation (Dubitzky et al. 2007). We fix the number of splits to 𝐾=10 and choose 90% of random correspondences to create each warp proposal. The remaining 10% correspondences are used as validation set. As validation metric we measure the mean square transfer error over the validation set. We vary 𝜆b0 in the range [10−3,106], which we determined experimentally, and fix 𝜆d0 to 1 as only their ratio matters. Thanks to the convexity of problem (12), we can evaluate a large number of values 𝑛b0=256. The BS-warp algorithm is given in Algorithm 2.

figure b
Variational Problem and Base Solution by the BS-Isowarp-Base Algorithm
The isowarp algorithm relies on the following variational problem:

argmin𝜂𝜀[𝜂] with 𝜀[𝜂]=𝜆d𝜀d[𝜂]+𝜆i𝜀i[𝜂]+𝜆s𝜀s[𝜂].
(15)
Compared with the classical formulation (12), it has an extra functional 𝜀i[𝜂]. This functional models the isowarp constraint measured at a dense regular grid of points 𝑃⊂ with |P| points in the template domain:

𝜀i[𝜂]=1|𝑃|∑𝑝∈𝑃∑𝑘=13(𝐼𝑘[𝜂](𝑝))2,
(16)
where 𝐼𝑘[𝜂] is an isowarp Eq. (11). While 𝜀i[𝜂] imposes that the warp is an isowarp, it does not impose it to be smooth. This makes sense as the isometric surface deformation it captures is not necessarily smooth. We thus use a smoother 𝜀s[𝜂], which we choose as the schwarp (Pizarro et al. 2016),

𝜀s[𝜂]=1|𝑃|∑𝑝∈𝑃∑𝑘=14(𝑆𝑘[𝜂](𝑝))2,
(17)
where the Schwarzian equations (Pizarro et al. 2016) are:

⎧⎩⎨⎪⎪⎪⎪𝑆1[𝜂]=𝜂1𝑢𝑢𝜂2𝑢−𝜂2𝑢𝑢𝜂1𝑢𝑆2[𝜂]=𝜂1𝑣𝑣𝜂2𝑣−𝜂2𝑣𝑣𝜂1𝑣𝑆3[𝜂]=𝜂1𝑢𝑢𝜂2𝑣−𝜂2𝑢𝑢𝜂1𝑣+2(𝜂1𝑢𝑣𝜂2𝑢−𝜂2𝑢𝑣𝜂1𝑢)𝑆4[𝜂]=𝜂1𝑣𝑣𝜂2𝑢−𝜂2𝑣𝑣𝜂1𝑢+2(𝜂1𝑢𝑣𝜂2𝑣−𝜂2𝑢𝑣𝜂1𝑣).
(18)
The hyperparameters 𝜆d, 𝜆i and 𝜆s are scalars that control the importance of each functional.

Assuming known hyperparameters, the BS-Isowarp-Base algorithm estimates 𝜂 by solving the variational problem (15) given an initial estimation 𝜂0. Similarly to the BS-warp algorithm, we use a B-spline representation and estimate its control points denoted w. The problem is however non-convex. We use the Levenberg-Marquardt which finishes if a minimum is reached with a fixed tolerance of 10−8 or a maximum number of iterations 𝑛f=64 has passed. The BS-Isowarp-Base algorithm is given in Algorithm 3.

figure c
Hyperparameter Selection by the BS-Isowarp-Hyperparameters Algorithm
The estimation of the optimal hyperparameters (𝜆d,𝜆i,𝜆s) also relies on Monte Carlo cross-validation in this case, with the same data split and validation metric as for the BS-warp. Obviously, only 2 out of 3 are independent hyperparameters and we thus fix 𝜆d to 1. However, for obvious computational efficiency reasons, we cannot try all possible combinations for the two remaining free hyperparameters. We thus estimate each one in turn, keeping the other one fixed. We propose a heuristic but very effective way to conduct this two-round process. We start with 𝜆s and end with 𝜆i. We first vary 𝜆s in the range [100,104], while nullifying 𝜆i and call the base warp algorithm for each value. We fix the number of values to 𝑛s=32. We then vary 𝜆i in the range [100,104] sampled by 𝑛i=32 values while fixing 𝜆s to 10% of the obtained value. This two-round process may lead to a suboptimal local minimum. Intuitively, since the Schwarzian equations (18) tend to oversmooth warps, reducing or even vanishing their second-order derivatives, they artificially diminish the value of the isowarp functional. Our strategy is to decrease the hyperparameter 𝜆s to a fixed ratio with respect to its initial optimum. We choose 10% as a heuristic ratio with very good results in practice. Remark that the Schwarzian derivatives (18) (Pizarro et al. 2016) form a smoother, not a constraint which should be fulfilled. We provide an experimental investigation on hyperparameter sensitivity in Sect. 6.2.3 and justify the chosen ranges numerically. We give our BS-Isowarp-Hyperparameters algorithm in Algorithm 4.

figure d
The Complete Isowarp Reconstruction Algorithm
Surface reconstruction is achieved in a final step by evaluating the non-holonomic depth Eq. (7) using the obtained isowarp and the template. The importance of this algorithm is that it is able to automatically adjust its hyperparameters. We show in the experiments of Sect. 6 that this strategy is consistently better than 3D refinement methods: the strategy reaches 3D refinement quality reconstruction but involves fewer variables and does not suffer from ambiguities derived from the 3D to 2D projection that can affect the convergence of iterative methods. The reprojection error may not be used to select the hyperparameters related to the depth, as explained in Sect. 2.3.

In other words, cross-validation cannot be implemented with 3D refinement methods to select hyperparameters as there is no sensible validation metric independent of the ground-truth. In practice the hyperparameters of 3D refinement methods are thus chosen manually.

Experimental Results
We present experimental results to compare the isowarp against state-of-the-art in registration and 3D reconstruction.

Compared Methods and Error Metrics
We use BS or TPS at the beginning of each method’s name to indicate whether the warp and depth functions are represented using the B-spline or the Thin-Plate Spline. In terms of registration we compare our method, called BS-Isowarp, with two different state-of-the-art warp estimation methods: BS-warp (Rueckert et al. 1999) and BS-Schwarp (Pizarro et al. 2016). Table 1 summarizes the main characteristics of all evaluated warp estimation methods.

We provide the 2D error metric wrpgen (19), computing the transfer error over a set of correspondences Q, the test set, which is different from the set of correspondences used to estimate the warp 𝜂̃ :

wrpgen[𝜂̃ ]=1|𝑄|∑(𝑝,𝑞)∈𝑄‖𝜂̃ (𝑝)−𝑞‖2‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√.
(19)
The 2D error metric (19) allows us to evaluate overfitting and warp quality. In synthetic experiments, where ground truth is available, we also provide 2D error measures of first (20) and second-order (21) derivatives with respect to the ground truth warp 𝜂. We use a dense set of points W chosen to cover the template domain to compute the relative metrics:

wrpgen′[𝜂,𝜂̃ ]=1|𝑊|∑𝑝∈𝑊𝐷[𝜂−𝜂̃ ](𝑝)𝐷[𝜂](𝑝)‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√
(20)
wrpgen″[𝜂,𝜂̃ ]=1|𝑊|∑𝑝∈𝑊𝐷2[𝜂−𝜂̃ ](𝑝)𝐷2[𝜂](𝑝)‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√,
(21)
where:

𝐷[𝜂](𝑝)=‖‖‖∂𝜂∂(𝑢,𝑣)(𝑝)‖‖‖2
(22)
𝐷2[𝜂](𝑝)=‖‖‖∂2𝜂∂(𝑢,𝑣)2(𝑝)‖‖‖2.
(23)
We also evaluate the influence of warp quality in 3D reconstruction. We compare the four different reconstruction strategies described in Fig. 4. For simplicity, we keep the same acronyms used in warp estimation for the reconstruction methods based on the direct depth solution (7). Otherwise a different name is given to the reconstruction method. We use BS-warp and BS-warp+Ref for methods using strategy 1. The latter uses non-linear shape refinement (Brunet et al. 2014) initialized with the former. TPS-Chhatkuli17 uses the original implementation (Chhatkuli et al. 2017) of strategy 2 based on TPS warps. We omit refinement in strategy 2 as it consistently gives very similar reconstruction results to BS-warp+Ref in all our experiments. BS-Schwarp represents strategy 3 and BS-Isowarp the proposed strategy 4. Besides, we compare the four strategies with the MDH method (Salzmann and Fua 2011), named Salzmann11. The original method (Salzmann and Fua 2011) reconstructs the given correspondences. We added a final step of surface fitting with a TPS in order to compute 3D error metric. Table 2 summarizes the principal properties of all the evaluated isometric SfT methods.

Table 1 Characteristics of the evaluated warp methods
Full size table
Table 2 Characteristic of the evaluated isometric SfT methods
Full size table
We provide the 3D error metric 3Dgen (24) of the reconstruction for all evaluated methods:

3Dgen[𝑋̃ ]=1|𝑅|∑(𝑝,𝑄)∈𝑅‖‖𝑋̃ (𝑝)−𝑄‖‖2‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√,
(24)
where R is a set of pairs of points with p in the template domain and Q its corresponding ground truth 3D point, different from the ones used to reconstruct.

We use Monte Carlo cross-validation to choose the best hyperparameter in the BS-warp, BS-Schwarp and BS-Isowarp methods as explained in Sect. 5. The hyperparameters of TPS-Chhatkuli17, Salzmann11 and BS-warp+Ref are manually adjusted by varying them in intervals around the values recommended by the authors in their published codes, using the average reconstruction error as a metric to find a suitable value.

Synthetic Data Experiments
We test the registration and reconstruction methods using synthetically generated surfaces and their image projections. We describe next the simulation conditions and the experimental setup. Besides, we present the results of the BS-Isowarp in a hyperrealistic synthetic experiment with a shoe, in Sect. 6.2.6.

Fig. 7
figure 7
Experiments with synthetic data. a and b show a planar template transformed rigidly. c and d show the deformable case where the template is isometrically transformed into a cylinder. The red circles show the ground-truth correspondences and the green circles show the noisy correspondences (Color figure online)

Full size image
Fig. 8
figure 8
Registration results in the rigid case. a–c show the warps obtained with BS-warp, BS-Schwarp and BS-Isowarp respectively. d shows a comparison of the behaviour of each method in the top left hand corner. e–g represent a heat map for each warp that shows the 2D error in pixels at each point, see Sect. 6.2.2 for more details

Full size image
Fig. 9
figure 9
Reconstruction results in the rigid case. a–f show the 3D reconstruction results of BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17, BS-warp+Ref and Salzmann11 respectively. g–l show a heat map for each warp that shows the 3D error at each point, see Sect. 6.2.2 for more details

Full size image
Simulation Setup
We generate a set of 100 images from rigid and deformable surfaces. We simulate an A4 paper sheet as a planar template. In the rigid case, we rotate and translate the template to emulate rigid transformations. In the deformable case, the template is isometrically transformed into part of a cylinder and is then rotated and translated. We emulate a pin-hole camera with a resolution of 640×480 pixels and a focal length of 500 pixels. We randomly generate 100 point correspondences between the images for warp estimation. The test set we use to compute the error metrics from equations (19), (20), (21) and (24) consists of 1500 randomly generated correspondences. We fix the number of B-spline control points to 12. We add noise, independently to each image coordinate, with a Gaussian distribution with a 5 pixel standard deviation. We measure an average error by repeating each experimental condition 100 times.

Examples
We show registration and reconstruction results for a rigid and a deformable, synthetically generated examples. Figure 7 illustrates the planar template, the point correspondences and the images for both experiments. Figures 8 and 9 show the registration and reconstruction results we obtain for the rigid case. We observe that the quality of all warps is very high in the rigid case. Table 3 gives the 2D error and the first and second-order derivative errors. There are no significant differences between the methods in 2D error and first-order derivative error. However we can notice that BS-Isowarp overcomes BS-Schwarp and BS-warp in second-order derivative error.

Observe that BS-warp produces a non-uniform error pattern in the warp in contrast to BS-Schwarp and BS-Isowarp. In terms of reconstruction Table 4 gives the 3D error for this rigid example. BS-Isowarp obtains the best 3D reconstructions in the rigid case closely followed by BS-Schwarp. BS-warp does not achieve an accurate 3D reconstruction and produces high frequency reconstruction errors. TPS-Chhatkuli17 does not perform as well as expected in this case. The multiple hyperparameters to choose explain this result. BS-warp+Ref achieves accurate reconstruction, though inferior to BS-Isowarp. Salzmann11 obtains the worst reconstruction due to its sensitivity to noise in the correspondences.

In the deformable case, Figs. 10 and 11 illustrate the registration and reconstruction results respectively. BS-Isowarp produces better registration results than BS-warp and BS-Schwarp. This is clearly visible in the upper right corner where the surface curvature is pronounced (see Fig. 10d. Table 5 gives the 2D error and the first and second-order derivative errors for this experiment. Figure 11 shows the reconstruction results of all evaluated methods. BS-Isowarp achieves the best reconstruction results followed by BS-warp+Ref. The other reconstruction methods behave similarly and are not able to produce accurate reconstructions.

The performance of the evaluated reconstruction methods in our synthetic experiments may at first sight look worse than what the original paper reported (Chhatkuli et al. 2017). However, bear in mind that our experiments use few point correspondences with high noise to test the interpolation capabilities of the different warp methods. In our experiments smooth registration warps fail to accurately recover the first-order derivatives, which leads to poor results in the BS-warp and TPS-Chhatkuli17 methods.

Hyperparameter Sensitivity
We measure the sensitivity of the hyperparameters used in BS-warp, BS-Schwarp and BS-Isowarp. Table 6 describes the main hyperparameter for each evaluated method. We use the synthetic deformation from the previous section. For each warp estimation method, BS-warp, BS-Isowarp and BS-Schwarp, we vary the hyperparameter in the range [100,104] for BS-Isowarp and BS-Schwarp and [10−3,106] for BS-warp. For each hyperparameter value we compute the warp. The first row of Fig. 12 shows the 2D error in function of the hyperparameter for all methods. The second row of Fig. 12 shows the same experiment by overlaying the results with different noise standard deviations in the interval from 1 to 5 pixels.

We observe that all the evaluated methods present a large basin, of at least two orders of magnitude the hyperparameter value, where the 2D error measurements are similar. This means that hyperparameter selection is feasible and meaningful.

The Effect of Noise
We evaluate the behavior of the different algorithms against measurement noise. We vary the noise standard deviation linearly between 0 and 5 pixels in 10 steps.

Figure 13a shows the results for the rigid case. BS-Schwarp achieves the best performance in both 2D error and first and second-order derivative error, followed by BS-Isowarp. Note that in this case, the surface is planar and thus the BS-Schwarp is an exact model. However, in terms of reconstruction error BS-Isowarp obtains slightly better results than BS-Schwarp. This example shows that the isowarp is able to properly integrate the 3D geometry, which leads to better reconstructions even if it does not achieve the best registration results. BS-warp is consistently worse than the other methods in both registration and reconstruction. BS-warp+Ref achieves good results closed to BS-Isowarp and BS-Schwarp. TPS-Chhatkuli17 outperforms BS-warp but is not on par with the other methods.

Table 3 2D error and relative first and second-order derivative error for all evaluated warp methods in the rigid case
Full size table
Table 4 3D error for all evaluated methods in the rigid and deformable cases. The errors are given in millimeters
Full size table
Fig. 10
figure 10
Registration results in the deformable case. a–c are the warps obtained with BS-warp, BS-Schwarp and BS-Isowarp respectively. d shows a comparison of the behaviour of each method in a corner. e–g represent a 2D error heat map for each warp. See Sect. 6.2.2 for more details

Full size image
Figure 13b shows the results for the deformable case. BS-Isowarp clearly outperforms BS-Schwarp and BS-warp in terms of registration. It reduces by at least half the 2D error. BS-Isowarp also produces the best reconstructions, closely followed by BS-warp+Ref. It achieves strikingly better reconstruction results than the other non-refinement methods, reducing by about 20 times the 3D error, even when no noise is added to the correspondences. TPS-Chhatkuli17 obtains worse results than BS-warp. This is caused by the factors explained in Sect. 6.2.2. Finally, BS-Schwarp obtains the worst results in 3D reconstruction. This is probably due to the overly constraining local planarity assumption.

The Effect of Curvature
We evaluate the effect of surface curvature on warp estimation. We proceed by increasing the radius of the cylinder between 1m to 16m. The higher the radius the lower the curvature. We add Gaussian noise with 5 pixels standard deviation. Figure 14 shows the behavior of the evaluated methods with the amount of curvature.

Fig. 11
figure 11
Reconstructions achieved in the deformable case. a–f show the 3D reconstruction results of BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17, BS-warp+Ref and Salzmann11 respectively. g–l show a heat map for each warp that shows the 3D error at each point, see Sect. 6.2.2 for more details

Full size image
As expected, BS-Schwarp obtains better registration results with lower curvature. BS-Isowarp achieves similar registration results than BS-Schwarp and BS-warp obtains the worst results in all cases.

In 3D reconstruction, BS-warp, BS-Schwarp and TPS-Chhatkuli17 are very sensitive to curvature, showing worse results with higher curvature. BS-Isowarp and BS-warp+Ref show resistance against curvature variation. Besides, BS-Isowarp has better reconstruction results than the refinement method BS-warp+Ref. This shows that our isowarp equations are exact irrespective of the surface curvature.

Shoe Experiment
We tested the BS-Isowarp with a hyperrealistic recreation of a shoe, the Shoe dataset, from a volumic template introduced in Fuentes-Jiménez et al. (2018). The shoe template was built with a triangular mesh (around 5200 mesh faces) using dense SfM (Agisoft Photoscan Agisoft Photoscan 1.0.4 2014). The Shoe dataset is composed of random quasi-isometric deformations simulated by Blender (1994), together with the corresponding rendered images with a resolution of 960×540 pixels and a focal length of 530pixels. Approximately 5000 point correspondences are drawn between the template and the input image.

For the shoe experiment, we choose 850 point correspondences to build warps. The other available correspondences are used to compute 2D and 3D errors. Figure 15 shows the results of isometric SfT for different warp models and reconstruction methods.

All the evaluated methods present similar behavior in terms of 2D error. In reconstruction, BS-Isowarp achieves the best results, see Fig. 15g. It fits the surface shape better than any other evaluated methods. TPS-Chhatkuli17 and the 3D refinement method BS-warp+Ref achieve good results in 3D reconstruction but still far from BS-Isowarp, see Fig. 15h, j. The refinement method gets stuck in a local minimum, which prevents it from providing a better surface reconstruction. BS-warp, Salzmann11 and BS-Schwarp give worse reconstructions (see Fig. 15e, i and f). The BS-warp and BS-Schwarp solutions present strong ripples while Salzmann11 obtains a smooth surfaces but far from the ground truth.

Real Data Experiments
We propose experiments with three real datasets.

The Zooming dataset (Chhatkuli et al. 2017) consists of several deformations of a folded A4 piece of paper from different viewpoints and focal lengths. Specifically, the focal length varies between 1348 and 3937 pixels in 9 different values. The image resolution is 1728×1552 pixels. The dataset provides between 7 to 10 different images for each zoom level. Feature correspondences between the template and the image are computed using SIFT (Lowe 2004), eliminating possible mismatches with (Pizarro and Bartoli 2012). We obtain around 1200 point correspondences for each view. The template and groundtruth shapes are computed using dense Structure-from-Motion (SfM) (Agisoft Photoscan 1.0.4 2014).

The Cushion dataset (Chhatkuli et al. 2017) uses a non-developable template that deforms isometrically. Image resolution is 3456×2304 pixels and feature correspondences are extracted using SURF (Bay et al. 2006) eliminating possible mismatches with (Pizarro and Bartoli 2012). We obtain around 1800 point correspondences for each view in this experiment. The camera focal length is 2700 pixels. As in the previous dataset, templates and reconstruction ground truth are obtained with dense SfM (Agisoft Photoscan 1.0.4 2014).

The Can dataset (Chhatkuli et al. 2017) also uses a non-developable template, a can made of cardboard deforming isometrically. In this experiment, a 3D template model is thus considered. The image resolution is 4800×3200 pixels with a focal length of 11000 pixels. Keypoint correspondences are extracted by combining SIFT and KAZE, giving around 7000 correspondences. The template and reconstruction ground truth were obtained with dense SfM (Agisoft Photoscan 1.0.4 2014).

Zooming Experiment
We select one image from each zoom level of the dataset with a similar viewpoint. We choose 100 point correspondences from each image to compute the warp. The other correspondences are used as the test set to compute the 2D error and 3D error.

Figure 16 shows the warps computed from each selected frame. We show the original image, and the results obtained with BS-warp, BS-Schwarp and BS-Isowarp. We include the 2D error in pixels. All methods achieve similar results in terms of 2D error, which is consistent with the experiments using synthetic data. Figure 17 shows the reconstruction results. Our BS-Isowarp achieves the best results followed by the 3D refinement method BS-warp+Ref. TPS-Chhatkuli17 is third in reconstruction quality and the obtained error is coherent with the results given in Chhatkuli et al. (2017). BS-Schwarp obtains worse reconstruction results than BS-warp.

We point out that BS-warp, TPS-Chhatkuli17 and BS-warp+Ref obtain similar 3D error results than the ones reported in Chhatkuli et al. (2017). However, as explained in Sect. 6, we report generalization 2D and 3D errors by using a set of point correspondences different from the one used to compute the warp (similarly to the training and test sets used in machine learning). On the contrary, the results in Chhatkuli et al. (2017) (TPS-Chhatkuli17) use all the available correspondences for computing the warps and report reconstruction errors at those same correspondences (in the analogy with machine learning, they use the exact same training and test sets). This can lead to discrepancies between our results and theirs. Nevertheless, despite these methodological differences, our results do not differ that much from the reported values in the literature. In some reconstructions, such as Zooms 8 and 9, there might be noticeable qualitative differences between the reconstructed surface and the provided 3D error, especially in corners (see BS-warp+Ref). Although qualitative assessments are highly debatable, we have observed that TPS-Chhatkuli17 often misreconstructs the corners of the surface and generally oversmoothes the reconstruction. Although it might look good at first glance, it does not fit the ground-truth surface properly. Concerning 3D refinement results, we have observed that it has offset errors, which are visible in the last two rows, and fails to recover the surface curvature well. The BS-Isowarp looks slightly less smooth in the last two cases. Still, it does not suffer offset errors and correctly estimates the curvature, especially in the problematic corners. This explains why the BS-Isowarp obtains better reconstruction error than the other methods.

Table 5 2D error and relative first and second-order derivative error for all evaluated warp methods in the deformable case
Full size table
Table 6 Principal hyperparameter for each evaluated warp
Full size table
Fig. 12
figure 12
Sensitivity of the evaluated warps to their main hyperparameter, see Table 6. The first row shows 2D error mean and standard deviation against hyperparameter value for a 1 pixel noise. The second row shows 2D error for a noise from 1 to 5 pixels with a 1 pixel step. See Sect. 6.2.3 for details

Full size image
Figure 18 presents the results of 2D and 3D error averaged over the set of all different viewpoints provided by the Zooming dataset. All methods obtain good results in 2D error, which is under 1.2 pixels. In 3D reconstruction, BS-Isowarp achieves the best results followed by BS-warp+Ref. TPS-Chhatkuli17 is consistently better than BS-warp, Salzmann11 and BS-Schwarp. Salzmann11 overestimates the depth due to the inextensibility relaxation of isometry.

Fig. 13
figure 13
Effect of noise. The registration and reconstruction results are given for the rigid case (first row) and the deformable case (second row). The first three columns show the 2D error, including 1st and 2nd derivatives error. The last column shows the reconstruction 3D error

Full size image
Cushion Experiment
We choose 100 point correspondences to build warps. The other available correspondences from the database are used to compute the 2D error and 3D error. Figure 2 presents the results achieved in this dataset. All evaluated methods present similar behavior in terms of 2D error, the same behavior than in the previous experiments. In reconstruction, BS-Isowarp achieves the best results, see Fig. 2g followed by the 3D refinement method BS-warp+Ref presented in Fig. 2j. TPS-Chhatkuli17 achieves good results in 3D reconstruction but is still far from BS-Isowarp or BS-warp+Ref, see Fig. 2h. Both BS-warp, Salzmann11 and BS-Schwarp give worse reconstructions (see Fig. 2e, i and f).

Can Experiment
In this experiment, we use 850 point correspondences to build the warps. The other available correspondences are used to compute the 2D error and 3D error. Figure 19 shows the results achieved in this dataset. As in the Cushion or Zooming dataset experiments, all the evaluated methods present similar behavior in terms of 2D error. In reconstruction, BS-Isowarp achieves the best results, see Fig. 19h, closely followed by the 3D refinement method BS-warp+Ref presented in Fig. 19k. TPS-Chhatkuli17 achieves very good results in 3D reconstruction but with a larger error than BS-Isowarp and BS-warp+Ref, especially in the top corners, see Fig. 19i. Their reconstructions deteriorate in the edges and corners. Both BS-warp, Salzmann11 and BS-Schwarp give worse reconstructions (see Fig. 19f,j and g). Salzmann11 especially suffers the non-developable template of this experiment.

We also test the BS-Isowarp against occlusions using the Can dataset. The simulated occlusion consists of a circular object placed at the image center. We increase its radius from 100 to 1000 pixels removing the correspondences in the occlusion area. Table 7 shows the number of feature correspondences and the 3D error obtained by our method. Fig. 20 shows specific 3D reconstructions corresponding to the occlusion with radius 300, 600 and 900 pixels.

We observe that BS-Isowarp is robust against occlusions when the occlusion radius varies between 100 and 700 pixels. The 3D error increases but the reconstructed shape does not substantially changes. The smoothing term and the remaining sparse correspondences are enough to obtain a suitable warp, which results in a good reconstruction. However, with more severe occlusions, the isowarp degenerates and BS-Isowarp fails to correctly reconstruct the surface.

Comparison with DNN-based Methods
We compare BS-Isowarp with recent DNN-based SfT methods: DeformNet (Pumarola et al. 2018), DeepSfT (Fuentes-Jiménez et al. 2018), and IsMo-GAN (Shimada et al. 2019). DeformNet and DeepSfT are object-specific SfT methods, meaning that they are trained to reconstruct a specific template, both in shape and in texture map. In contrast, IsMo-GAN is an object-generic method trained with a dataset of thin-shell deformable objects with varying texture. In terms of object representation, DeformNet and IsMo-GAN use a regular mesh to represent the object’s shape, and DeepSfT recovers a pixel-based depth map.

We compare these methods using the publicly available Kinect paper dataset (Varol et al. 2012), commonly used as a baseline in SfT methods. Briefly, the dataset comprises 191 images of a deforming paper acquired with the Kinect sensor. It provides ground-truth for both registration and reconstruction with point correspondences and their 3D coordinates. The implementation of DeformNet (Pumarola et al. 2018) is not publicly available, but it provides error metrics in this dataset. We reproduced the same training conditions as reported in DeformNet, where 15% of the frames were used to fine tune the neural network, to adapt DeepSfT and DeformNet to this dataset. Although IsMo-GAN does not need in principle to be retrained, we fine-tuned it with the same training set to produce a fair comparison between all DNN-based SfT methods. We use 250 correspondences in our BS-Isowarp and BS-warp+Ref methods and leave the rest as ground truth to compute 3D errors. Importantly, DeformNet (Pumarola et al. 2018) uses a Procrustes step, which computes the best 3D similarity transformation, to align the reconstruction with the ground-truth shape. This step should not be necessary for isometric SfT since it recovers the surface without ambiguities in the camera reference frame. In our understanding, this reveals some DNN methods’ inability to precisely recover the scale, rotation, and translation of the object. Nevertheless, we have included the Procrustes step in our experiments to give a fair comparison with their reported results on this dataset.

Table 8 summarizes the obtained 3D error for each method.

BS-Isowarp obtains the best result with 1.78mm of 3D error closely followed by the refinement method BS-warp+Ref 1.79mm. Both methods retrieve quite similar reconstruction surfaces. DeformNet is the DNN-based SfT method with the best result 4.79 mm, far from the previous ones. The object-generic method IsMo-GAN obtains the worst result. Without the final Procrustes step, our BS-Isowarp obtains a 3D error of 5.48mm which is still comparable with the results reported by DeformNet. Unfortunately, the authors of DeformNet do not report the 3D error without the Procrustes step, which will naturally increase this 3D error. We point out that retrieving the scale and distance to the image plane to the surface is not an ambiguous problem with isometric deformations and a perspective camera model (Bartoli et al. 2015), hence, it should not be necessary to use the Procrustes step.

Fig. 14
figure 14
Sensitivity to curvature. a–c show 2D error and relative first and second-order derivatives errors respectively. d shows 3D error

Full size image
Figure 21 shows the reconstruction of two different frames (frames 140 and 155 specifically) of the Kinect paper dataset, which presents strong deformation. BS-Isowarp and BS-warp+Ref obtains similar 3D errors, see Fig. 21c, d, g and h. DeepSfT and IsMo-GAN obtain worse reconstructions compared with the previous one. IsMo-GAN struggles in corners and edges of the reconstruction, see Fig. 21a, f. DeepSfT suffers from high-frequency noise which is a known problem in dense methods, see Fig. 21b and d.

Fig. 15
figure 15
Results of isometric SfT for different warp models and reconstruction methods on the shoe dataset. a–c are the warps obtained with BS-warp, BS-Schwarp and BS-Isowarp respectively; e–j show the 3D reconstruction results of BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17, Salzmann11 and BS-warp+Ref. The reconstruction ground truth in k is obtained using dense SfM from multiple images (Agisoft Photoscan 1.0.4 2014)

Full size image
Fig. 16
figure 16
Registration results for the Zooming experiment. BS-warp, BS-Schwarp and BS-Isowarp are evaluated. Each row show one view from the dataset with different values of focal length. The 2D error is given under each warp in pixels

Full size image
Fig. 17
figure 17
3D reconstruction results from all evaluated methods in the Zooming experiment. Salzmann11, BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17 and BS-warp-Ref are compared with nine images from the Zooming dataset with different values of focal length. Ground truth and reconstructed point correspondences are also shown. The 3D error is given under each 3D reconstruction in millimeters

Full size image
Overall, our BS-Isowarp method outperforms the aforementioned DNN-based methods in the Kinect paper dataset, without requiring training. A critical assessment of these results however leads to the observation that a direct comparison between classical and DNN-based methods is not entirely fair for two opposite reason. The first reason is that DNN-based methods use all the image data, whereas many classical methods, including the BS-Isowarp, depend on the quality and quantity of the point correspondences they use as input. In that regard, our results with the so-called classical methods could be improved with better point correspondences or registration strategy. The second reason is that DNN-based methods strongly depend on the amount and type of training data. Yet, it is important to realise that there does not exist a universal DNN-based SfT method that can operate without fine-tuning on frames extracted from the test dataset, which currently represents a major issue.

Conclusion
We have studied the theoretical properties of warps in isometric SfT, finding differential constraints they must fulfill. This is a theoretical breakthrough in our understanding of the problem. On the practical side, this allows us to find a warp, called the isowarp, that is 3D consistent with the physics of the problem. This is a change of paradigm in isometric SfT as we have shown that with the isowarp, one outperforms the best existing reconstruction methods by using the analytic direct depth solution (Bartoli et al. 2015). Besides, computing the isowarp has several practical advantages over the other reconstruction methods based on iterative refinement, namely lower complexity, higher accuracy, convex initialization, and automatic hyperparameter tuning. Isowarp initiates a new line of reconstruction methods which imposes 3D geometric constraints on the warps. We expect the isowarp to be an essential component in future SfT methods.

Fig. 18
figure 18
Zooming dataset average registration and reconstruction errors. a average 2D error for each zoom level. b 3D error average for each zoom level. See Sect. 6.3.1 for more details

Full size image
Fig. 19
figure 19
Results of isometric SfT for different warp models and reconstruction methods on a real example of a can. b–d are the warps obtained with BS-warp, BS-Schwarp and BS-Isowarp respectively; and f–k show the 3D reconstruction results of BS-warp, BS-Schwarp, BS-Isowarp, TPS-Chhatkuli17, Salzmann11 and BS-warp+Ref. The reconstruction ground truth in l is obtained using dense SfM from multiple images (Agisoft Photoscan 1.0.4 2014)

Full size image
Table 7 3D error obtained by BS-Isowarp for the occlusion experiment in the Can dataset
Full size table
Fig. 20
figure 20
Robustness of BS-Isowarp against occlusions for the Can dataset. b–d show the simulated circular occlusion (black hole) corresponding to the radii 300, 600 and 900 pixels. The used features correspondences are shown in blue and the removed ones in red. f–h show the 3D reconstruction result of BS-Isowarp. The reconstruction ground truth is shown in (e) (Color figure online)

Full size image
Table 8 Comparison of DNN-based SfT method with BS-Isowarp in the Kinect paper dataset
Full size table
Fig. 21
figure 21
Frame reconstructed from the Kinect paper dataset. The 3D error is given under each 3D reconstruction in millimeters