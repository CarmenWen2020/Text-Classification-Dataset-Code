Recent advances in bandit tools and techniques for sequential learning are steadily
enabling new applications and are promising the resolution of a range of challenging related problems. We study the game tree search problem, where the goal is to
quickly identify the optimal move in a given game tree by sequentially sampling its
stochastic payoffs. We develop new algorithms for trees of arbitrary depth, that operate by summarizing all deeper levels of the tree into confidence intervals at depth
one, and applying a best arm identification procedure at the root. We prove new
sample complexity guarantees with a refined dependence on the problem instance.
We show experimentally that our algorithms outperform existing elimination-based
algorithms and match previous special-purpose methods for depth-two trees.
1 Introduction
We consider two-player zero-sum turn-based interactions, in which the sequence of possible successive moves is represented by a maximin game tree T . This tree models the possible actions sequences
by a collection of MAX nodes, that correspond to states in the game in which player A should take
action, MIN nodes, for states in the game in which player B should take action, and leaves which
specify the payoff for player A. The goal is to determine the best action at the root for player A. For
deterministic payoffs this search problem is primarily algorithmic, with several powerful pruning
strategies available [20]. We look at problems with stochastic payoffs, which in addition present a
major statistical challenge.
Sequential identification questions in game trees with stochastic payoffs arise naturally as robust
versions of bandit problems. They are also a core component of Monte Carlo tree search (MCTS)
approaches for solving intractably large deterministic tree search problems, where an entire sub-tree
is represented by a stochastic leaf in which randomized play-out and/or evaluations are performed [4].
A play-out consists in finishing the game with some simple, typically random, policy and observing
the outcome for player A.
For example, MCTS is used within the AlphaGo system [21], and the evaluation of a leaf position
combines supervised learning and (smart) play-outs. While MCTS algorithms for Go have now
reached expert human level, such algorithms remain very costly, in that many (expensive) leaf
evaluations or play-outs are necessary to output the next action to be taken by the player. In this
paper, we focus on the sample complexity of Monte-Carlo Tree Search methods, about which very
little is known. For this purpose, we work under a simplified model for MCTS already studied by
[22], and that generalizes the depth-two framework of [10].
31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.
1.1 A simple model for Monte-Carlo Tree Search
We start by fixing a game tree T , in which the root is a MAX node. Letting L be the set of leaves
of this tree, for each ` ∈ L we introduce a stochastic oracle O` that represents the leaf evaluation or
play-out performed when this leaf is reached by an MCTS algorithm. In this model, we do not try
to optimize the evaluation or play-out strategy, but we rather assume that the oracle O` produces
i.i.d. samples from an unknown distribution whose mean µ` is the value of the position `. To ease the
presentation, we focus on binary oracles (indicating the win or loss of a play-out), in which the oracle
O` is a Bernoulli distribution with unknown mean µ` (the probability of player A winning the game
in the corresponding state). Our algorithms can be used without modification in case the oracle is a
distribution bounded in [0, 1].
For each node s in the tree, we denote by C(s) the set of its children and by P(s) its parent. The root
is denoted by s0. The value (for player A) of any node s is recursively defined by V` = µ` if ` ∈ L and
Vs = {
maxc∈C(s) Vc if s is a MAX node,
minc∈C(s) Vc if s is a MIN node.
The best move is the action at the root with highest value,
s
∗
= argmax
s∈C(s0)
Vs.
To identify s
∗
(or an -close move), an MCTS algorithm sequentially selects paths in the game tree
and calls the corresponding leaf oracle. At round t, a leaf Lt ∈ L is chosen by this adaptive sampling
rule, after which a sample Xt ∼ OLt
is collected. We consider here the same PAC learning framework
as [22, 10], in which the strategy also requires a stopping rule, after which leaves are no longer
evaluated, and a recommendation rule that outputs upon stopping a guess sˆτ ∈ C(s0) for the best
move of player A.
Given a risk level δ and some accuracy parameter  ≥ 0 our goal is have a recommendation sˆτ ∈ C(s0)
whose value is within  of the value of the best move, with probability larger than 1 − δ, that is
P(V (s0) − V (sˆτ ) ≤ ) ≥ 1 − δ.
An algorithm satisfying this property is called (, δ)-correct. The main challenge is to design
(, δ)-correct algorithms that use as few leaf evaluations τ as possible.
Related work The model we introduce for Monte-Carlo Tree Search is very reminiscent of a
stochastic bandit model. In those, an agent repeatedly selects one out of several probability distributions, called arms, and draws a sample from the chosen distribution. Bandits models have been
studied since the 1930s [23], mostly with a focus on regret minimization, where the agent aims to
maximize the sum of the samples collected, which are viewed as rewards [18]. In the context of
MCTS, a sample corresponds to a win or a loss in one play-out, and maximizing the number of
successful play-outs (that correspond to simulated games) may be at odds with identifying quickly
the next best action to take at the root. In that, our best action identification problem is closer to a
so-called Best Arm Identification (BAI) problem.
The goal in the standard BAI problem is to find quickly and accurately the arm with highest mean.
The BAI problem in the fixed-confidence setting [7] is the special case of our simple model for a tree
of depth one. For deeper trees, rather than finding the best arm (i.e. leaf), we are interested in finding
the best action at the root. As the best root action is a function of the means of all leaves, this is a
more structured problem.
Bandit algorithms, and more recently BAI algorithms have been successfully adapted to tree search.
Building on the UCB algorithm [2], a regret minimizing algorithm, variants of the UCT algorithm
[17] have been used for MCTS in growing trees, leading to successful AIs for games. However, there
are only very weak theoretical guarantees for UCT. Moreover, observing that maximizing the number
of successful play-outs is not the target, recent work rather tried to leverage tools from the BAI
literature. In [19, 6] Sequential Halving [14] is used for exploring game trees. The latter algorithm is
a state-of-the-art algorithm for the fixed-budget BAI problem [1], in which the goal is to identify the
best arm with the smallest probability of error based on a given budget of draws. The proposed SHOT
(Sequential Halving applied tO Trees) algorithm [6] is compared empirically to the UCT approach
of [17], showing improvements in some cases. A hybrid approach mixing SHOT and UCT is also
studied [19], still without sample complexity guarantees.
2
In the fixed-confidence setting, [22] develop the first sample complexity guarantees in the model we
consider. The proposed algorithm, FindTopWinner is based on uniform sampling and eliminations,
an approach that may be related to the Successive Eliminations algorithm [7] for fixed-confidence
BAI in bandit models. FindTopWinner proceeds in rounds, in which the leaves that have not been
eliminated are sampled repeatedly until the precision of their estimates doubled. Then the tree is
pruned of every node whose estimated value differs significantly from the estimated value of its
parent, which leads to the possible elimination of several leaves. For depth-two trees, [10] propose
an elimination procedure that is not round-based. In this simpler setting, an algorithm that exploits
confidence intervals is also developed, inspired by the LUCB algorithm for fixed-confidence BAI
[13]. Some variants of the proposed M-LUCB algorithm appear to perform better in simulations than
elimination based algorithms. We now investigate this trend further in deeper trees, both in theory
and in practice.
Our Contribution. In this paper, we propose a generic architecture, called BAI-MCTS, that builds
on a Best Arm Identification (BAI) algorithm and on confidence intervals on the node values in order
to solve the best action identification problem in a tree of arbitrary depth. In particular, we study two
specific instances, UGapE-MCTS and LUCB-MCTS, that rely on confidence-based BAI algorithms
[8, 13]. We prove that these are (, δ)-correct and give a high-probability upper bound on their
sample complexity. Both our theoretical and empirical results improve over the elimination-based
state-of-the-art algorithm, FindTopWinner [22].
2 BAI-MCTS algorithms
We present a generic class of algorithms, called BAI-MCTS, that combines a BAI algorithm with
an exploration of the tree based on confidence intervals on the node values. Before introducing the
algorithm and two particular instances, we first explain how to build such confidence intervals, and
also introduce the central notion of representative child and representative leaf.
2.1 Confidence intervals and representative nodes
For each leaf ` ∈ L, using the past observations from this leaf we may build a confidence interval
I`(t) = [L`(t),U`(t)],
where U`(t) (resp. L`(t)) is an Upper Confidence Bound (resp. a Lower Confidence Bound) on the
value V (`) = µ`. The specific confidence interval we shall use will be discussed later.
These confidence intervals are then propagated upwards in the tree using the following construction. For each internal node s, we recursively define Is(t) = [Ls(t),Us(t)] with
Ls(t) = {
maxc∈C(s) Lc(t) for a MAX node s,
minc∈C(s) Lc(t) for a MIN node s,
Us(t) = {
maxc∈C(s) Uc(t) for a MAX node s,
minc∈C(s) Uc(t) for a MIN node s.
Note that these intervals are the tightest possible on the parent under the sole assumption that the
child confidence intervals are all valid. A similar construction was used in the OMS algorithm of [3]
in a different context. It is easy to convince oneself (or prove by induction, see Appendix B.1) that
the accuracy of the confidence intervals is preserved under this construction, as stated below.
Proposition 1. Let t ∈ N. One has ⋂`∈L (µ` ∈ I`(t)) ⇒ ⋂s∈T (Vs ∈ Is(t)).
We now define the representative child cs(t) of an internal node s as
cs(t) = {
argmaxc∈C(s) Uc(t) if s is a MAX node,
argminc∈C(s) Lc(t) if s is a MIN node,
and the representative leaf `s(t) of a node s ∈ T , which is the leaf obtained when going down the
tree by always selecting the representative child:
`s(t) = s if s ∈ L, `s(t) = `cs(t)(t) otherwise.
The confidence intervals in the tree represent the statistically plausible values in each node, hence the
representative child can be interpreted as an “optimistic move” in a MAX node and a “pessimistic
move” in a MIN node (assuming we play against the best possible adversary). This is reminiscent of
the behavior of the UCT algorithm [17]. The construction of the confidence intervals and associated
representative children are illustrated in Figure 1.
3
(a) Children (b) Parent
Figure 1: Construction of confidence interval and representative child (in red)
for a MAX node.
Input: a BAI algorithm
Initialization: t = 0.
while not BAIStop ({s ∈ C(s0)}) do
Rt+1 = BAIStep ({s ∈ C(s0)})
Sample the representative leaf
Lt+1 = `Rt+1
(t)
Update the information about the arms.
t = t + 1.
end
Output: BAIReco ({s ∈ C(s0)})
Figure 2: The BAI-MCTS architecture
2.2 The BAI-MCTS architecture
In this section we present the generic BAI-MCTS algorithm, whose sampling rule combines two
ingredients: a best arm identification step which selects an action at the root, followed by a confidence
based exploration step, that goes down the tree starting from this depth-one node in order to select
the representative leaf for evaluation.
The structure of a BAI-MCTS algorithm is presented in Figure 2. The algorithm depends on a Best
Arm Identification (BAI) algorithm, and uses the three components of this algorithm:
• the sampling rule BAIStep(S) selects an arm in the set S
• the stopping rule BAIStop(S) returns True if the algorithm decides to stop
• the recommendation rule BAIReco(S) selects an arm as a candidate for the best arm
In BAI-MCTS, the arms are the depth-one nodes, hence the information needed by the BAI algorithm
to make a decision (e.g. BAIStep for choosing an arm, or BAIStop for stopping) is information
about depth-one nodes, that has to be updated at the end of each round (last line in the while loop).
Different BAI algorithms may require different information, and we now present two instances that
rely on confidence intervals (and empirical estimates) for the value of the depth-one nodes.
2.3 UGapE-MCTS and LUCB-MCTS
Several Best Arm Identification algorithms may be used within BAI-MCTS, and we now present
two variants, that are respectively based on the UGapE [8] and the LUCB [13] algorithms. These
two algorithms are very similar in that they exploit confidence intervals and use the same stopping
rule, however the LUCB algorithm additionally uses the empirical means of the arms, which within
BAI-MCTS requires defining an estimate Vˆ
s(t) of the value of the depth-one nodes.
The generic structure of the two algorithms is similar. At round t + 1 two promising depth-one nodes
are computed, that we denote by bt
and ct
. Among these two candidates, the node whose confidence
interval is the largest (that is, the most uncertain node) is selected:
Rt+1 = argmax
i∈{bt
,ct
}
[Ui(t) − Li(t)].
Then, following the BAI-MCTS architecture, the representative leaf of Rt+1 (computed by going
down the tree) is sampled: Lt+1 = `Rt+1
(t). The algorithm stops whenever the confidence intervals
of the two promising arms overlap by less than :
τ = inf {t ∈ N ∶ Uct
(t) − Lbt
(t) < } ,
and it recommends sˆτ = bτ
.
In both algorithms that we detail below bt
represents a guess for the best depth-one node, while ct
is
an “optimistic” challenger, that has the maximal possible value among the other depth-one nodes.
Both nodes need to be explored enough in order to discover the best depth-one action quickly.
4
UGapE-MCTS. In UGapE-MCTS, introducing for each depth-one node the index
Bs(t) = max
s
′∈C(s0)/{s}
Us
′(t) − Ls(t),
the promising depth-one nodes are defined as
bt
= argmin
a∈C(s0)
Ba(t) and ct
= argmax
b∈C(s0)/{bt
}
Ub(t).
LUCB-MCTS. In LUCB-MCTS, the promising depth-one nodes are defined as
bt
= argmax
a∈C(s0)
Vˆ
a(t) and ct
= argmax
b∈C(s0)/{bt
}
Ub(t),
where Vˆ
s(t) = µˆ`s(t)(t) is the empirical mean of the reprentative leaf of node s. Note that several
alternative definitions of Vˆ
s(t) may be proposed (such as the middle of the confidence interval Is(t),
or maxa∈C(s) Vˆ
a(t)), but our choice is crucial for the analysis of LUCB-MCTS, given in Appendix C.
3 Analysis of UGapE-MCTS
In this section we first prove that UGapE-MCTS and LUCB-MCTS are both (, δ)-correct. Then we
give in Theorem 3 a high-probability upper bound on the number of samples used by UGapE-MCTS.
A similar upper bound is obtained for LUCB-MCTS in Theorem 9, stated in Appendix C.
3.1 Choosing the Confidence Intervals
From now on, we assume that the confidence intervals on the leaves are of the form
L`(t) = µˆ`(t) −
¿ÁÁÀ
β(N`(t), δ)
2N`(t)
and U`(t) = µˆ`(t) +
¿ÁÁÀ
β(N`(t), δ)
2N`(t)
. (1)
β(s, δ) is some exploration function, that can be tuned to have a δ-PAC algorithm, as expressed in
the following lemma, whose proof can be found in Appendix B.2
Lemma 2. If δ ≤ max(0.1∣L∣, 1), for the choice
β(s, δ) = ln(∣L∣/δ) + 3 ln ln(∣L∣/δ) + (3/2) ln(ln s + 1) (2)
both UGapE-MCTS and LUCB-MCTS satisfy P(V (s
∗
) − V (sˆτ ) ≤ ) ≥ 1 − δ.
An interesting practical feature of these confidence intervals is that they only depend on the local
number of draws N`(t), whereas most of the BAI algorithms use exploration functions that depend
on the number of rounds t. Hence the only confidence intervals that need to be updated at round t are
those of the ancestors of the selected leaf, which can be done recursively.
Moreover, β(s, δ) scales with ln(ln(s)), and not ln(s), leveraging some tools recently introduced to
obtain tighter confidence intervals [12, 15]. The union bound over L (that may be an artifact of our
current analysis) however makes the exploration function of Lemma 2 still a bit over-conservative
and in practice, we recommend the use of β(s, δ) = ln (ln(es)/δ).
Finally, similar correctness results (with slightly larger exploration functions) may be obtained for
confidence intervals based on the Kullback-Leibler divergence (see [5]), which are known to lead to
better performance in standard best arm identification problems [16] and also depth-two tree search
problems [10]. However, the sample complexity analysis is much more intricate, hence we stick to
the above Hoeffding-based confidence intervals for the next section.
3.2 Complexity term and sample complexity guarantees
We first introduce some notation. Recall that s
∗
is the optimal action at the root, identified with
the depth-one node satisfying V (s
∗
) = V (s0), and define the second-best depth-one node as s
∗
2 =
5
argmaxs∈C(s0)/{s
∗} Vs. Recall P(s) denotes the parent of a node s different from the root. Introducing
furthermore the set Anc(s) of all the ancestors of a node s, we define the complexity term by
H
∗

(µ) ∶= ∑
`∈L
1
∆2
`
∨ ∆2
∗ ∨ 
2
, where ∆∗ ∶= V (s
∗
) − V (s
∗
2
)
∆` ∶= maxs∈Anc(`)/{s0} ∣Vs − V (P(s))∣ (3)
The intuition behind these squared terms in the denominator is the following. We will sample a leaf `
until we either prune it (by determining that it or one of its ancestors is a bad move), prune everyone
else (this happens for leaves below the optimal arm) or reach the required precision .
Theorem 3. Let δ ≤ min(1, 0.1∣L∣). UGapE-MCTS using the exploration function (2) is such that,
with probability larger than 1 − δ, (V (s
∗
) − V (sˆτ ) < ) and, letting ∆`, = ∆` ∨ ∆∗ ∨ ,
τ ≤ 8H
∗

(µ) ln ∣L∣
δ
+ ∑
`
16
∆
2
`,
ln ln 1
∆
2
`,
+ 8H
∗

(µ) [3 ln ln ∣L∣
δ
+ 2 ln ln (8e ln ∣L∣
δ
+ 24e ln ln ∣L∣
δ
)] + 1.
Remark 4. If β(Na(t), δ) is changed to β(t, δ), one can still prove (, δ) correctness and furthermore upper bound the expectation of τ . However the algorithm becomes less efficient to implement,
since after each leaf observation, ALL the confidence intervals have to be updated. In practice, this
change lowers the probability of error but does not effect significantly the number of play-outs used.
3.3 Comparison with previous work
To the best of our knowledge1
, the FindTopWinner algorithm [22] is the only algorithm from the
literature designed to solve the best action identification problem in any-depth trees. The number of
play-outs of this algorithm is upper bounded with high probability by
∑
`∶∆`>2
(
32
∆2
`
ln 16∣L∣
∆`δ
+ 1) + ∑
`∶∆`≤2
(
8

2
ln 8∣L∣
δ
+ 1)
One can first note the improvement in the constant in front of the leading term in ln(1/δ), as well as
the presence of the ln ln(1/∆`,2 ) second order, that is unavoidable in a regime in which the gaps are
small [12]. The most interesting improvement is in the control of the number of draws of 2-optimal
leaves (such that ∆` ≤ 2). In UGapE-MCTS, the number of draws of such leaves is at most of order
( ∨ ∆2
∗
)
−1
ln(1/δ), which may be significantly smaller than 
−1
ln(1/δ) if there is a gap in the best
and second best value. Moreover, unlike FindTopWinner and M-LUCB [10] in the depth two case,
UGapE-MCTS can also be used when  = 0, with provable guarantees.
Regarding the algorithms themselves, one can note that M-LUCB, an extension of LUCB suited for
depth-two tree, does not belong to the class of BAI-MCTS algorithms. Indeed, it has a “reversed”
structure, first computing the representative leaf for each depth-one node: ∀s ∈ C(s0), Rs,t = `s(t)
and then performing a BAI step over the representative leaves: L˜
t+1 = BAIStep(Rs,t, s ∈ C(s0)).
This alternative architecture can also be generalized to deeper trees, and was found to have empirical
performance similar to BAI-MCTS. M-LUCB, which will be used as a benchmark in Section 4, also
distinguish itself from LUCB-MCTS by the fact that it uses an exploration rate that depends on the
global time β(t, δ) and that bt
is the empirical maximin arm (which can be different from the arm
maximizing Vˆ
s). This alternative choice is not yet supported by theoretical guarantees in deeper trees.
Finally, the exploration step of BAI-MCTS algorithm bears some similarity with the UCT algorithm
[17], as it goes down the tree choosing alternatively the move that yields the highest UCB or the
lowest LCB. However, the behavior of BAI-MCTS is very different at the root, where the first move is
selected using a BAI algorithm. Another key difference is that BAI-MCTS relies on exact confidence
1
In a recent paper, [11] independently proposed the LUCBMinMax algorithm, that differs from UGapEMCTS and LUCB-MCTS only by the way the best guess bt
is picked. The analysis is very similar to ours,
but features some refined complexity measure, in which ∆` (that is the maximal distance between consecutive
ancestors of the leaf, see (3)) is replaced by the maximal distance between any ancestors of that leaf. Similar
results could be obtained for our two algorithms following the same lines.
6
intervals: each interval Is(t) is shown to contain with high probability the corresponding value Vs,
whereas UCT uses more heuristic confidence intervals, based on the number of visits of the parent
node, and aggregating all the samples from descendant nodes. Using UCT in our setting is not obvious
as it would require to define a suitable stopping rule, hence we don’t include a comparison with this
algorithm in Section 4. A hybrid comparison between UCT and FindTopWinner is proposed in
[22], providing UCT with the random number of samples used by the the fixed-confidence algorithm.
It is shown that FindTopWinner has the advantage for hard trees that require many samples. Our
experiments show that our algorithms in turn always dominate FindTopWinner.
3.4 Proof of Theorem 3.
Letting Et = ⋂`∈L (µ` ∈ I`(t)) and E = ⋂t∈N Et, we upper bound τ assuming the event E holds,
using the following key result, which is proved in Appendix D.
Lemma 5. Let t ∈ N. Et ∩ (τ > t) ∩ (Lt+1 = `) ⇒ N`(t) ≤
8β(N`(t),δ)
∆2
`
∨∆2
∗∨
2
.
An intuition behind this result is the following. First, using that the selected leaf ` is a representative
leaf, it can be seen that the confidence intervals from sD = ` to s0 are nested (Lemma 11). Hence if
Et holds, V (sk) ∈ I`(t) for all k = 1, . . . , D, which permits to lower bound the width of this interval
(and thus upper bound N`(t)) as a function of the V (sk) (Lemma 12). Then Lemma 13 exploits the
mechanism of UGapE to further relate this width to ∆∗ and .
Another useful tool is the following lemma, that will allow to leverage the particular form of the
exploration function β to obtain an explicit upper bound on N`(τ ).
Lemma 6. Let β(s) = C +
3
2
ln(1 + ln(s)) and define S = sup{s ≥ 1 ∶ aβ(s) ≥ s}. Then
S ≤ aC + 2a ln(1 + ln(aC)).
This result is a consequence of Theorem 16 stated in Appendix F, that uses the fact that for C ≥
−ln(0.1) and a ≥ 8, it holds that
3
2
C(1 + ln(aC))
C (1 + ln(aC)) −
3
2
≤ 1.7995564 ≤ 2.
On the event E, letting τ` be the last instant before τ at which the leaf ` has been played before
stopping, one has N`(τ − 1) = N`(τ`) that satisfies by Lemma 5
N`(τ`) ≤
8β(N`(τ`), δ)
∆2
`
∨ ∆2
∗ ∨ 
2
.
Applying Lemma 6 with a = a` =
8
∆2
`
∨∆2
∗∨
2 and C = ln ∣L∣
δ
+ 3 ln ln ∣L∣
δ
leads to
N`(τ − 1) ≤ a` (C + 2 ln(1 + ln(a`C))) .
Letting ∆`, = ∆` ∨ ∆∗ ∨  and summing over arms, we find
τ = 1 + ∑
`
N`(τ − 1)
≤ 1 + ∑
`
8
∆
2
`,
⎛
⎜
⎝
ln ∣L∣
δ
+ 3 ln ln ∣L∣
δ
+ 2 ln ln
⎛
⎜
⎝
8e
ln ∣L∣
δ
+ 3 ln ln ∣L∣
δ
∆
2
`,
⎞
⎟
⎠
⎞
⎟
⎠
= 1 + ∑
`
8
∆
2
`,
⎛
⎜
⎝
ln ∣L∣
δ
+ 2 ln ln 1
∆
2
`,
⎞
⎟
⎠
+ 8H
∗

(µ) [3 ln ln ∣L∣
δ
+ 2 ln ln (8e ln ∣L∣
δ
+ 24e ln ln ∣L∣
δ
)] .
To conclude the proof, we remark that from the proof of Lemma 2 (see Appendix B.2) it follows that
on E, V (s
∗
) − V (sˆτ ) <  and that E holds with probability larger than 1 − δ.
7
4 Experimental Validation
In this section we evaluate the performance of our algorithms in three experiments. We evaluate
on the depth-two benchmark tree from [10], a new depth-three tree and the random tree ensemble
from [22]. We compare to the FindTopWinner algorithm from [22] in all experiments, and in the
depth-two experiment we include the M-LUCB algorithm from [10]. Its relation to BAI-MCTS is
discussed in Section 3.3. For our BAI-MCTS algorithms and for M-LUCB we use the exploration
rate β(s, δ) = ln ∣L∣
δ
+ ln(ln(s) + 1) (a stylized version of Lemma 2 that works well in practice), and
we use the KL refinement of the confidence intervals (1). To replicate the experiment from [22], we
supply all algorithms with δ = 0.1 and  = 0.01. For comparing with [10] we run all algorithms with
 = 0 and δ = 0.1∣L∣ (undoing the conservative union bound over leaves. This excessive choice, which
might even exceed one, does not cause a problem, as the algorithms depend on δ
∣L∣
= 0.1). In none of
our experiments the observed error rate exceeds 0.1.
Figure 3 shows the benchmark tree from [10, Section 5] and the performance of four algorithms on it.
We see that the special-purpose depth-two M-LUCB performs best, very closely followed by both
our new arbitrary-depth LUCB-MCTS and UGapE-MCTS methods. All three use significantly fewer
samples than FindTopWinner. Figure 4 (displayed in Appendix A for the sake of readability) shows
a full 3-way tree of depth 3 with leafs drawn uniformly from [0, 1]. Again our algorithms outperform
the previous state of the art by an order of magnitude. Finally, we replicate the experiment from
[22, Section 4]. To make the comparison as fair as possible, we use the proven exploration rate from
(2). On 10K full 10-ary trees of depth 3 with Bernoulli leaf parameters drawn uniformly at random
from [0, 1] the average numbers of samples are: LUCB-MCTS 141811, UGapE-MCTS 142953 and
FindTopWinner 2254560. To closely follow the original experiment, we do apply the union bound
over leaves to all algorithms, which are run with  = 0.01 and δ = 0.1. We did not observe any error
from any algorithm (even though we allow 10%). Our BAI-MCTS algorithms deliver an impressive
15-fold reduction in samples.
0.45
0.45 0.35 0.30
0.45 0.50 0.55
905
875
2941
798
199
200
2931
212
81
82
2498
92
0.35 0.40 0.60
629
630
2932
752
287
279
2930
248
17
17
418
22
0.30 0.47 0.52
197
193
1140
210
123
123
739
44
20
20
566
21
Figure 3: The 3 × 3 tree of depth 2 that is the benchmark in [10]. Shown below the leaves are the
average numbers of pulls for 4 algorithms: LUCB-MCTS (0.89% errors, 2460 samples), UGapEMCTS (0.94%, 2419), FindTopWinner (0%, 17097) and M-LUCB (0.14%, 2399). All counts are
averages over 10K repetitions with  = 0 and δ = 0.1 ⋅ 9.
5 Lower bounds and discussion
Given a tree T , a MCTS model is parameterized by the leaf values, µ ∶= (µ`)`∈L, which determine the
best root action: s
∗ = s
∗
(µ). For µ ∈ [0, 1]
∣L∣
, We define Alt(µ) = {λ ∈ [0, 1]
∣L∣
∶ s
∗
(λ) ≠ s
∗
(µ)}.
Using the same technique as [9] for the classic best arm identification problem, one can establish the
following (non explicit) lower bound. The proof is given in Appendix E.
8
Theorem 7. Assume  = 0. Any δ-correct algorithm satisfies
Eµ[τ ] ≥ T
∗
(µ)d(δ, 1 − δ), where T
∗
(µ)
−1
∶= sup
w∈Σ∣L∣
inf
λ∈Alt(µ)
∑
`∈L
w`d (µ`, λ`) (4)
with Σk = {w ∈ [0, 1]
i
∶ ∑
k
i=1 wi = 1} and d(x, y) = x ln(x/y) + (1 − x) ln((1 − x)/(1 − y)) is the
binary Kullback-Leibler divergence.
This result is however not directly amenable for comparison with our upper bounds, as the optimization problem defined in Lemma 7 is not easy to solve. Note that d(δ, 1 − δ) ≥ ln(1/(2.4δ)) [15], thus
our upper bounds have the right dependency in δ. For depth-two trees with K (resp. M) actions for
player A (resp. B), we can moreover prove the following result, that suggests an intriguing behavior.
Lemma 8. Assume  = 0 and consider a tree of depth two with µ = (µi,j )1≤i≤K,1≤j≤M such that
∀(i, j), µ1,1 > µi,1, µi,1 < µi,j . The supremum in the definition of T
∗
(µ)
−1
can be restricted to
Σ˜K,M ∶= {w ∈ ΣK×M ∶ wi,j = 0 if i ≥ 2 and j ≥ 2}
and
T
∗
(µ)
−1
= max
w∈Σ˜K,M
min
i=2,...,K
a=1,...,M
[w1,ad (µ1,a,
w1,aµ1,a + wi,1µi,1
w1,a + wi,1
)+wi,1d (µi,1,
w1,aµ1,a + wi,1µi,1
w1,a + wi,1
)] .
It can be extracted from the proof of Theorem 7 (see Appendix E) that the vector w∗
(µ) that attains
the supremum in (4) represents the average proportions of selections of leaves by any algorithm
matching the lower bound. Hence, the sparsity pattern of Lemma 8 suggests that matching algorithms
should draw many of the leaves much less than O(ln(1/δ)) times. This hints at the exciting prospect
of optimal stochastic pruning, at least in the asymptotic regime δ → 0.
As an example, we numerically solve the lower bound optimization problem (which is a concave
maximization problem) for µ corresponding to the benchmark tree displayed in Figure 3 to obtain
T
∗
(µ) = 259.9 and w
∗
= (0.3633, 0.1057, 0.0532), (0.3738, 0, 0), (0.1040, 0, 0).
With δ = 0.1 we find kl(δ, 1 − δ) = 1.76 and the lower bound is Eµ[τ ] ≥ 456.9. We see that there is a
potential improvement of at least a factor 4.
Future directions An (asymptotically) optimal algorithm for BAI called Track-and-Stop was
developed by [9]. It maintains the empirical proportions of draws close to w∗
(µˆ), adding forced
exploration to ensure µˆ → µ. We believe that developing this line of ideas for MCTS would result in
a major advance in the quality of tree search algorithms. The main challenge is developing efficient
solvers for the general optimization problem (4). For now, even the sparsity pattern revealed by
Lemma 8 for depth two does not give rise to efficient solvers. We also do not know how this sparsity
pattern evolves for deeper trees, let alone how to compute w∗
(µ).