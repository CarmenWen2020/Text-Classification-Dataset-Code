Advances in the field of inverse reinforcement learning (IRL) have led to sophisticated
inference frameworks that relax the original modeling assumption of observing an agent
behavior that reflects only a single intention. Instead of learning a global behavioral model,
recent IRL methods divide the demonstration data into parts, to account for the fact that
different trajectories may correspond to different intentions, e.g., because they were generated by different domain experts. In this work, we go one step further: using the intuitive
concept of subgoals, we build upon the premise that even a single trajectory can be explained more efficiently locally within a certain context than globally, enabling a more
compact representation of the observed behavior. Based on this assumption, we build
an implicit intentional model of the agent’s goals to forecast its behavior in unobserved
situations. The result is an integrated Bayesian prediction framework that significantly
outperforms existing IRL solutions and provides smooth policy estimates consistent with
the expert’s plan. Most notably, our framework naturally handles situations where the
intentions of the agent change over time and classical IRL algorithms fail. In addition, due
to its probabilistic nature, the model can be straightforwardly applied in active learning
scenarios to guide the demonstration process of the expert.
Keywords: Learning from Demonstration, Inverse Reinforcement Learning, Bayesian
Nonparametric Modeling, Subgoal Inference, Graphical Models, Gibbs Sampling

1. Introduction
Inverse reinforcement learning (IRL) refers to the problem of inferring the intention of an
agent, called the expert, from observed behavior. Under the Markov decision process (MDP)
formalism (Sutton and Barto, 1998), that intention is encoded in the form of a reward function, which provides the agent with instantaneous feedback for each situation encountered
during the decision-making process. Classical IRL methods (Ng and Russell, 2000; Abbeel
and Ng, 2004; Ziebart et al., 2008; Ramachandran and Amir, 2007; Levine et al., 2011)
assume there exists a single global reward model that explains the entire set of demonstrations provided by the expert. In order to relax this rather restrictive modeling assumption,
recent IRL methods allow that the agent’s intention can change over time (Nguyen et al.,
2015), or they presume that the demonstration data set is inherently composed of several
parts (Dimitrakakis and Rothkopf, 2011), where different trajectories reflect the intentions
of different domain experts.
In this work, we go a step further and start from the premise that— even in the case of
a single expert or trajectory— the demonstrated behavior can be explained more efficiently
locally (i.e., within a certain context) than by a global reward model. As an illustrative
example, we may consider the task shown in Figure 1a, where the expert approaches a set of
intermediate target positions before finally heading toward a global goal state. Similarly, in
Figure 1b, the agent eventually returns to its initial position, from where the cyclic process
repeats. Despite the simplicity of these tasks, the encoding of such behaviors in a global
intention model requires a reward structure that comprises a comparably large number
of redundant state-action-based rewards. Alternative modeling strategies rely on taskdependent expansions of the agent’s state representation, e.g., to memorize the last visited
goal (Krishnan et al., 2016), or they resort to more general decision-making frameworks like
semi-MDPs/options (Bradtke and Duff, 1994; Sutton et al., 1999) in order to achieve the
necessary level of task abstraction.
In this paper, we present a substantially simpler modeling framework that requires only
minimal adaptations to the standard MDP formalism but comes with a hypothesis space
of behavioral models that is sufficiently large to cover a broad class of expert policies.
The key insight that motivates our approach is that many tasks, like those in Figure 1,
can be decomposed into smaller subtasks that require considerably less modeling effort.
The resulting low-level task descriptions can then be used as building blocks to synthesize
arbitrarily complex behavioral strategies through a suitable sequencing of subtasks. This
offers the possibility to learn comparably simple task representations using the intuitive
concept of subgoals, which is achieved by efficiently encoding the expert behavior using
task-adapted partitionings of the system state space/the expert data.
The proposed framework builds upon the method of Bayesian nonparametric inverse
reinforcement learning (BNIRL, Michini and How, 2012), which can be used to build a
subgoal representation of a task based on demonstration data— however, without learning
the underlying subgoal relationships or providing a policy model that can generalize the
strategy of the demonstrator. In order to address this limitation, we generalize the BNIRL
model using insights from our previous works on nonparametric subgoal modeling (Soˇsi´c ˇ
et al., 2018a) and policy recognition (Soˇsi´c et al., 2018b), building a compact intentional ˇ
model of the expert’s behavior that explicitly describes the local dependencies between the
2
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
(a) sequenced target positions
(Michini and How, 2012)
(b) cyclic behavior
Figure 1: Two simple behavior examples that motivate the subgoal principle. The setting
is based on the grid world dynamics described in Section 5.1. In both cases,
a task description based on a global reward function is inefficient as it requires
many state-action-based rewards to explain the observed trajectory structures.
However, the data can be described efficiently through subgoal-based encodings.
Both scenarios are analyzed in detail in Section 5.
demonstrations and the underlying subgoal structure. The result is an integrated Bayesian
prediction framework that exploits the spatio-temporal context of the demonstrations and
is capable of producing smooth policy estimates that are consistent with the expert’s plan.
Furthermore, capturing the full posterior information of the data set enables us to apply
the proposed approach in an active learning setting, where the data acquisition process is
controlled by the posterior predictive distribution of our model.
In our experimental study, we compare the proposed approach with common baseline
methods on a variety of benchmark tasks and real-world scenarios. The results reveal that
our approach performs significantly better than the original BNIRL model and alternative
IRL solutions on all considered tasks. Interestingly enough, our algorithm outperforms the
baselines even when the expert’s true reward structure is dense and the underlying subgoal
assumption is violated.
1.1 Related Work
The idea of decomposing complex behavior into smaller parts has been around for long and
researchers have approached the problem in many different ways. While the overall field of
methods is too large to be covered here, most existing approaches can be clearly categorized
according to certain criteria. Often, two approaches differ in their exact problem formulation, i.e., we can distinguish between active methods, where the learning algorithm can
interact freely with the environment (e.g., hierarchical reinforcement learning, Botvinick,
2012; Al-Emran, 2015), and passive methods, where the behavioral model is trained solely
through observation (learning from demonstration, Argall et al., 2009). Furthermore, we
3
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
can discriminate between methods that build an explicit intentional model of the underlying task (IRL and option-based models, Choi and Kim, 2012; Sutton et al., 1999), and
such that work directly on the control/trajectory level (skill learning, movement primitives,
Konidaris et al., 2012; Schaal et al., 2005). The latter distinction is sometimes also referred
to as intentional/subintentional approaches (Albrecht and Stone, 2017; Panella and Gmytrasiewicz, 2017). In order to give a concise summary of the work that is most relevant to
ours, we restrict ourselves to passive approaches, with a focus on intentional methods, the
field of which is considerably smaller. For an overview of active approaches, we refer to
existing literature, e.g., the work by Daniel et al. (2016a).
First, there is the class of methods that pursue a decomposition of the observed behavior on the global level, using trajectory-based IRL approaches. For example, Dimitrakakis
and Rothkopf (2011) proposed a hierarchical prior over reward functions to account for the
fact that different trajectories in a data set could reflect different behavioral intentions,
e.g., because they were generated by different domain experts. Similarly, Babe¸s-Vroman
et al. (2011) follow an expectation-maximization-based clustering approach to group individual trajectories according to their underlying reward functions. Choi and Kim (2012)
generalized this idea by proposing a nonparametric Bayesian model in which the number of
intentions is a priori unbounded.
While the above methods consider the expert data at a global scale, our work is concerned with the problem of subgoal modeling, which is often conducted in the form of
option-based reasoning (Sutton et al., 1999). For instance, Tamassia et al. (2015) proposed
a clustering approach based on state distances to find a minimal set of options that can explain the expert behavior. While the method provides a simple alternative to handcrafting
options, it does not allow any probabilistic treatment of the data and involves many ad-hoc
design choices. Going in the same direction, Daniel et al. (2016a) presented a more principled, probabilistic option framework based on expectation-maximization. Not only is the
framework capable of inferring sub-policies automatically, it can be also used in a reinforcement learning context for intra-option learning. However, the resulting behavioral model
is based on point estimates of the policy parameters, and the number of sub-policies needs
to be specified manually. The latter problem was solved by Krishnan et al. (2016), who
proposed a hierarchical nonparametric IRL framework to learn a sequential representation
of the demonstrated task, based on a set of transition regions that are defined through local
changes in linearity of the observed behavior. However, in contrast to the work by Daniel
et al. (2016a), inference is not performed jointly but in several isolated stages where, again,
each stage only propagates a point estimate of the associated model parameters. Moreover,
the temporal relationship of the demonstration data, used to identify the local linearity
changes, is considered only in an ad-hoc fashion with the help of a windowing function.
Another general class of models, which explicitly addresses this issue, employs a hidden
Markov model (HMM) structure to establish a temporal relationship between the demonstrations. For instance, the work presented by Nguyen et al. (2015) can be regarded as a
generalization of the model by Babe¸s-Vroman et al. (2011), which extends the expectationmaximization framework by imposing a Markov structure on the reward model. Similarly,
Niekum et al. (2012) use an extended HMM to segment the demonstrations into vector autoregressive models, in order to learn a suitable set of movement primitives. However, the
learning of those primitives is done in a post-processing step, meaning that the quality of
4
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
the final representation crucially depends on the success of the initial segmentation stage.
In contrast, the method by Rueckert et al. (2013) automatically learns the position and
timing of subgoals in the form of via-points, but the number of via-points is assumed to be
known and the system objective gets finally encoded in form of a global cost function. Recently, Lioutikov et al. (2017) presented a related approach based on probabilistic movement
primitives that jointly solves the segmentation and learning step for an unknown number of
primitives, using an expectation-maximization framework. Yet, the model operates purely
on the trajectory level and cannot reveal the latent intentions of the demonstrator. Another
variant of the approach by Niekum et al. (2012) that explicitly addresses this problem was
proposed by Surana and Srivastava (2014). In their paper, the authors propose to replace
the HMM emission model with an MDP model, in order to infer a policy model from the
segmented trajectories instead of recognizing changes in the dynamics. The model was later
extended by Ranchod et al. (2015), who augmented the HMM representation with a beta
process model to facilitate skill sharing across trajectories. While the resulting model formulation is highly flexible, its major drawback is that inference becomes computationally
expensive as it involves multiple IRL iterations per Gibbs step.
In contrast to the HMM-based solutions, which by their sequential nature focus on the
temporal relationship of subtasks, the approach presented in this paper establishes a more
general correlation structure between demonstrations by employing non-exchangeable prior
distributions over subgoal assignments, i.e., without committing to purely temporal factorizations of subgoals. This results in a compact model representation (e.g., it avoids the need
of estimating latent subgoal transition probabilities required in an HMM structure) and adds
the flexibility to capture both, the temporal and the spatial dependencies between subtasks.
1.2 Paper Outline
The organization of the paper is as follows: in Section 2, we briefly revisit the BNIRL model
and discuss its limitations, which forms the basis for our work. Section 3 then introduces a
new intentional subgoal framework, which addresses the shortcomings of BNIRL discussed
in Section 2. In Section 4, we derive a sampling-based inference scheme for our model and
explain how the new framework can be used for subgoal extraction and action prediction.
Experimental results on both synthetic and real-world data are presented in Section 5 before
we finally conclude our work in Section 6.
2. Bayesian Nonparametric Inverse Reinforcement Learning
The purpose of this section is to recapitulate the principle of Bayesian nonparametric inverse
reinforcement learning. After briefly discussing all building blocks of the model, we focus
on the limitations of the framework, which motivates the need for an extended model
formulation and finally leads to a new inference approach, presented afterwards in Section 3.
2.1 Revisiting the BNIRL Framework
Following the common IRL paradigm (Ng and Russell, 2000; Zhifei and Joo, 2012), the goal
of BNIRL is to infer the intentions of an agent based on demonstration data. Starting from
a standard MDP model, the problem is formalized on a finite state space S, assuming a
5
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
time-invariant state transition model T : S ×S ×A → [0, 1], where A is a finite set of actions
available to the agent at each state. For notational convenience, we represent the states
in S by the integer values {1, . . . , |S|}, where |S| denotes the cardinality of the state space.
In BNIRL, it is assumed that we can observe a number of expert demonstrations provided in the form of state-action pairs, D := {(sd, ad)}
D
d=1, where each pair (sd, ad) ∈ S × A
consists of a state sd visited by the agent and the corresponding action ad taken. Herein, D
denotes the size of the demonstration set. Throughout the rest of this paper, we will use the
shorthand notations s := {sd}
D
d=1 and a := {ad}
D
d=1 to access the collections of expert states
and actions individually. Note that the BNIRL model makes no assumptions about the
temporal ordering of the demonstrations, i.e., each state-action pair is considered to have
arisen from a specific but arbitrary time instant of the agent’s decision-making process. We
will come back to this point later in Sections 2.2 and 3.3.
In contrast to the classical MDP formalism and most other IRL frameworks, BNIRL
does not presuppose that the observed expert behavior necessarily originates from a single
underlying reward function. Instead, it introduces the concept of subgoals (and corresponding subgoal assignments) with the underlying assumption that, at each decision instant, the
expert selects a particular subgoal to plan the next action. Each subgoal is herein represented by a certain reward function defined on the system state space; in the simplest case,
it corresponds to a single reward mass placed at a particular goal state in S, which we
identify with a reward function Rg : S → {0, C} of the form
Rg(s) :=
(
C if g = s,
0 otherwise,
(1)
where g ∈ {1, . . . , |S|} indicates the subgoal location and C ∈ (0, ∞) is some positive
constant (compare S¸im¸sek et al., 2005; Stolle and Precup, 2002; Tamassia et al., 2015).
Although in principle it is legitimate to associate each subgoal with an arbitrary reward
structure to encode more complex forms of goal-oriented behavior (see, for example, Ranchod et al., 2015), the restriction to the reward function class in Equation (1) is sufficient
in the sense that the same behavioral complexity can be synthesized through a combination
of subgoals. This is made possible by the nonparametric nature of BNIRL, i.e., because
the number of possible subgoals is assumed to be unbounded. The use of the reward model
in Equation (1) has the advantage, however, that posterior inference about the expert’s
subgoals becomes computationally tractable, as will be explained in Section 4.5. In the following, we therefore focus on the above reward model and summarize the infinite collection
of subgoals in the multiset G := {gk}∞
k=1 ∈×
∞
k=1 S, where we adopt the assumption that
p(G | s) = Q∞
k=1 pg(gk | s).1
The subgoal assignment in BNIRL is achieved using a set of indicator variables ˜z :=
{z˜d ∈ N}
D
d=1, which annotate each demonstration pair (sd, ad) with its unique subgoal index.
The prior distribution p(˜z) is modeled by a Chinese restaurant process (CRP, Aldous, 1985),
1. Notice that the subgoal prior distribution in the original BNIRL formulation does not take the state
variable s as an argument. Nonetheless, the authors of BNIRL suggest to restrict the support of the
distribution to the set of visited states, which indeed implies a conditioning on s.
6
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
which assigns the event that indicator ˜zd points to the jth subgoal the prior probability
p(˜zd = j |˜z\d
) ∝
(
nj if j ∈ {1, . . . , K},
α if j = K + 1,
where ˜z\d
:= {z˜d} \ z˜d is a shorthand notation for the collection of all indicator variables
except ˜zd. Further, nj denotes the number of assignments to the jth subgoal in ˜z\d
, K
represents the number of distinct entries in ˜z\d
, and α ∈ [0, ∞) is a parameter controlling
the diversity of assignments.
Having targeted a particular subgoal gz˜d while being at some state sd, the expert is
assumed to choose the next action ad according to a softmax decision rule, π : A × S × S →
[0, 1], which weighs the expected returns of all actions against one another,
π(ad | sd, gz˜d
) :=
exp 
βQ∗
(sd, ad | gz˜d
)
	
P
a∈A exp 
βQ∗(sd, a | gz˜d
)
	. (2)
Herein, Q∗
(s, a | g) denotes the state-action value (or Q-value, Sutton and Barto, 1998) of
action a at state s under an optimal policy for the subgoal reward function Rg,
Q
∗
(s, a | g) := max
π¯
E
"X∞
n=0
γ
nRg(st=n)



st=0 = s, at=0 = a, π¯
#
, (3)
where the expectation is with respect to the stochastic state-action sequence induced by the
fixed policy ¯π : S → A, with initial action a executed at the starting state s. The explicit
notation st=n and at=n is used to disambiguate the temporal index of the decision-making
process from the demonstration index of the state-action pairs {(sd, ad)}.
The softmax policy π models the expert’s (in-)ability to maximize the future expected
return in view of the targeted subgoal, while the coefficient β ∈ [0, ∞) is used to express
the expert’s level of confidence in the optimal action. Combined with the subgoal prior
distribution pg and the partitioning model p(˜z), we obtain the joint distribution of all
demonstrated actions a, subgoals G, and subgoal assignments ˜z as
p(a,˜z, G | s) = p(˜z)
Y∞
k=1
pg(gk | s)
Y
D
d=1
π(ad | sd, gz˜d
). (4)
The structure of this distribution is visualized in form of a Bayesian network in Figure 2a.
It is worth emphasizing that π— although referred to as the likelihood model for the stateaction pairs in the original BNIRL paper— is really just a model for the actions conditional
on the states. In contrast to what is stated in the original paper, the distribution in Equation (4) therefore takes the form of a conditional distribution (i.e., conditional on s), which
does not provide any generative model for the state variables.
Posterior inference in BNIRL refers to the (approximate) computation of the conditional distribution p(˜z, G | D), which allows to identify potential subgoal locations and the
corresponding subgoal assignments based on the available demonstration data. For further
details, the reader is referred to the original paper (Michini and How, 2012).
7
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
˜z z˜d
ad
sd
gk
D ∞
(a) BNIRL model
z
zi
sd
ad gk
|S| D ∞
(b) intermediate model
ci
zi
sd
ad gk
|S| D
|S|
∞
(c) ddBNIRL-S model
cd
td
zd
ad
sd
gk
D D ∞
(d) ddBNIRL-T model
Figure 2: Relationships between all discussed subgoal models, illustrated in the form of
Bayesian networks. Shaded nodes represent observed variables; deterministic
dependencies are highlighted using double strokes.
2.2 Limitations of BNIRL
Subgoal-based inference is a well-motivated approach to IRL and the BNIRL framework has
shown promising results in a variety of real-world scenarios. Yet, the model formulation by
Michini and How (2012) comes with a number of significant conceptual limitations, which
we explain in detail in the following paragraphs.
Limitation 1: Subgoal Exchangeability and Posterior Predictive Policy
The central limitation of BNIRL is that the framework is restricted to pure subgoal extraction and does not inherently provide a reasonable mechanism to generalize the expert
behavior based on the inferred subgoals. The reason lies in the particular design of the
framework, which, at its heart, treats the subgoal assignments ˜z as exchangeable random
variables (Aldous, 1985). By implication, the induced partitioning model p(˜z) is agnostic about the covariate information contained in the data set and the resulting behavioral
model is unable to propagate the expert knowledge to new situations.
To illustrate the problem, let us investigate the predictive action distribution that arises
from the original BNIRL formulation. For simplicity and without loss of generality, we may
assume that we have perfectly inferred all subgoals G and corresponding subgoal assignments ˜z from the demonstration set D. Denoting by a
∗ ∈ A the predicted action at some
8
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
new state s
∗ ∈ S, the BNIRL model yields
p(a
∗
| s
∗
, D,˜z, G) = X
z˜
∗∈N
p(a
∗
, z˜
∗
| s
∗
, D,˜z, G)
=
X
z˜
∗∈N
p(a
∗
| z˜
∗
, s∗
, D,˜z, G)p(˜z
∗
| s
∗
, D,˜z, G)
(?)
=
X
z˜
∗∈N
p(a
∗
| z˜
∗
, s∗
, gz˜
∗ )p(˜z
∗
|˜z), (5)
where ˜z
∗ ∈ N is the latent subgoal index belonging to s
∗
. Note that p(a
∗
| z˜
∗
, s∗
, gz˜
∗ ) can
either represent the softmax decision rule π(a
∗
| s
∗
, gz˜
∗ ) from Equation (2) or an optimal
(deterministic) policy for subgoal gz˜
∗ , depending on whether we aspire to describe the noisy
expert behavior at s
∗ or want to determine an optimal action according to the inferred reward
model. The last equality in Equation (5), indicated by (?), follows from the conditional
independence properties implied by Equation (4), which can be easily verified using dseparation (Koller and Friedman, 2009) on the graphical model in Figure 2a.
As Equation (5) reveals, the predictive model is characterized by the posterior distribution p(˜z
∗
| s
∗
, D,˜z, G) of the latent subgoal assignment ˜z
∗ of state s
∗ — the intuition
being that, in order to generalize the expert’s plan to a new situation, we need to take
into account the gathered information about what would be a likely subgoal targeted by
the expert at s
∗
. However, in BNIRL, the distribution p(˜z
∗
| s
∗
, D,˜z, G) is modeled without
consideration of the query state s
∗
, or any other observed variable. By conditional independence (Equation 4), the distribution effectively reduces (?) to the CRP prior p(˜z
∗
|˜z),
which, due to its intrinsic exchangeability property, only considers the subgoal frequencies
of the readily inferred assignments ˜z. Clearly, a subgoal assignment mechanism based solely
on frequency information is of little use when it comes to predicting the expert behavior as
it will inevitably ignore the structural information contained in the demonstration set and
always return the same subgoal probabilities at all query states, regardless of the agent’s
actual situation. By contrast, a reasonable assignment mechanism should inherently take
into account the context of the agent’s current state s
∗ when deciding about the next action.
While the authors of BNIRL discuss the action selection problem in their paper and propose an assignment strategy for new states based on action marginalization, their approach
does not provide a satisfactory solution to the problem because the alleged conditioning on
the query state (see Equation 19 in the original paper, Michini and How, 2012) has no effect
on the involved subgoal indicator variable, as shown by Equation (5) above. The only way
to remedy the problem without modifying the model is to use an external post-processing
scheme like the waypoint method, discussed in the next section.
Limitation 2: Spatial and Temporal Context
The waypoint method, described at full length in a follow-up paper by Michini et al. (2015),
is a post-processing routine to convert the subgoals identified through BNIRL into a valid
option model (Sutton et al., 1999). The obtained model reconstructs the high-level plan
of the demonstrator by sequencing the inferred subgoals in a way that complies with the
spatio-temporal relationships of the expert’s decisions as observed during the demonstration
phase. To this end, the required initiation and termination sets of the option-policies are
9
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
imperfect demonstrations bag-of-words clustering noisy trajectory labeling
Figure 3: A diagram to illustrate the implications of the exchangeability assumption
in BNIRL. Similar to a bag-of-words model (Blei et al., 2003; Yang et al., 2007),
the BNIRL partitioning mechanism ignores the spatio-temporal context of the
data, which makes it difficult to discriminate demonstration noise from a real
change of the agent’s intentions. Note that the diagram illustrates the partitioning process in a simplified way as it only shows the effect of the prior p(˜z) but
neglects the impact of the likelihood model π. While the latter does indeed consider the state context of the actions, it cannot account for spatial or temporal
patterns in the data as it processes all state-action pairs separately.
constructed by considering the state distances to the identified subgoals as well as their
temporal ordering prescribed by the expert.
When combined with BNIRL, this method allows to synthesize a behavioral model
that mimics the observed expert behavior. However, the strategy comes with a number of
significant drawbacks:
(i) Using the waypoint method, the spatio-temporal relationships between the individual demonstrations are explored only in a post-hoc fashion and are largely ignored
during the actual inference procedure (the state information enters via the likelihood
model π but is not considered by the partitioning model p(˜z), as explained in Limitation 1). This lack of context-awareness makes the inference mechanism overly prone
to demonstration noise (see Figure 3 and results in Section 5).
(ii) Measuring proximities to subgoals in order to determine the right visitation order
requires some form of distance metric defined on the state space. If the system states
correspond to physical locations, constructing such a metric is usually straightforward.
However, in the general case where states encode arbitrary abstract information (see
example in Section 5.2), it can become difficult to design that metric by hand. Unfortunately, the BNIRL framework does not provide any solution to this problem.
(iii) The waypoint method cannot be applied to multiple unaligned trajectories (e.g., obtained from different experts) or in cases where the data set does not carry any
temporal information. This situation occurs, for instance, when the expert data is
provided as separate state-action pairs with unknown timestamps and not given in
form of coherent trajectories (see again example in Section 5.2).
10
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
(iv) Assigning a particular visitation order to the inferred subgoals is meaningful only if
the expert eventually reaches those subgoals during the demonstration phase (or if,
at least, the subgoals lie “close” to the visited states in terms of the aforementioned
distance metric). Finding subgoals with such properties can be guaranteed by constraining the support of the subgoal prior distribution pg to states that are near to
the expert data (see footnote on page 6) but this reduces the flexibility of the model
and potentially disables compact encodings of the task (Figure 4).
Limitation 3: Inconsistency under Time-Invariance
Reasoning about the intentions of an agent, there are two basic types of behavior one may
encounter:
• either the agent follows a static strategy to optimize a fixed objective (as assumed in
the standard MDP formalism, Sutton and Barto, 1998), or
• the intentions of the agent change over time.
The latter is clearly the more general case but also poses a more difficult inference problem
in that it requires us both, to identify the intentions of the agent and to understand their
temporal relationship. The static scenario, in contrast, implies that there exists an optimal
policy for the task in form of a simple state-to-action mapping π : S → A (Puterman, 1994),
which from the very beginning imprints a specific structure on the inference problem.
The BNIRL model generally falls into the second category since it freely allocates its
subgoals per decision instant and not per state, allowing a flexible change of the agent’s
objective. Yet, it is important to understand that the model does not actually distinguish
between the two described scenarios. As explained in Limitation 2, the temporal aspect
of the data is not explicitly modeled by the BNIRL framework, even though the waypoint
method subsequently tries to capture the overall chronological order of events. As a consequence, the model is not tailored to either of the two scenarios: on the one hand, it ignores
the valuable temporal context that is needed in the time-varying case to reliably discriminate demonstration noise from a real change of the agent’s intention. On the other hand,
the model is agnostic about the predefined time-invariant nature of the optimal policy in
the static scenario. This lack of structure not only makes the inference problem harder than
necessary in both cases; it also allows the model to learn inconsistent data representations
in the static case since the same state can be potentially assigned to more than one subgoal,
violating the above-mentioned state-to-action rule (Figure 5).
Limitation 4: Subgoal Likelihood Model
Apart from the discussed limitations of the BNIRL partitioning model, it turns out there
are two problematic issues concerning the softmax likelihood model in Equation (2). On the
following pages, we demonstrate that the specific form of the model encodes a number of
properties that are indeed contradictory to our intuitive understanding of subgoals. While
these properties are less critical for the final prediction of the expert behavior, it turns
out they drastically affect the localization of subgoals. Since the cause of these effects is
somewhat hidden in the model equation, we defer the detailed explanation to Section 3.1.
11
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
demonstrations local search global search
trajectory subgoals global goal
Figure 4: Difference between local (constrained) and global (unconstrained) subgoal
search. The top and the bottom row depict two different sets of demonstration
data (solid lines), together with potential goal/subgoal locations (crosses/circles)
that explain the observed behavior. Color indicates the corresponding subgoal
assignment of each trajectory segment. Top: two trajectories approaching the
same goal. Bottom: the agent is heading toward a global goal, gets temporarily
distracted, and then follows up on its original plan. Left: observed trajectories.
Center: example partitioning under the assumption that the expert reached
all subgoals during the demonstration. Right: example partitioning without
restriction on the subgoal locations, yielding a more compact encoding of the task.
(a) time-varying intentions (b) time-invariant intentions
Figure 5: Schematic comparison of the two basic behavior types, illustrated using two different agent trajectories. Color indicates the temporal progress. (a) Time-varying
intentions may cause the agent to perform a different action when revisiting a
state (dotted circle). (b) By contrast, time-invariant intentions imply a simple
state-to-action policy: the agent has no incentive to perform a different action
at an already visited state since— by definition— the underlying objective has
remained unchained. Diverging actions, as observed at the crossing point in the
left subfigure, can therefore only be explained as a result of suboptimal behavior.
12
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
Limitation 5: State-Action Demonstrations
Lastly, a minor problem of the original BNIRL framework is that the inference algorithm expects the demonstration data to be provided in the form of state-action pairs, which requires
full access to the expert’s action record. This assumption is restrictive from a practical point
of view as it confines the application of the model to settings with laboratory-like conditions
that allow a complete monitoring of the expert. For this reason, it is important to note that
an estimate of the expert’s action sequence can be recovered through BNIRL with the help
of an additional sampling stage (omitted in the original paper), provided that we know the
successor state reached by the expert after each decision. For the marginalized inference
scheme described in this paper, we present the corresponding sampling stage in Section 4.4.
3. Nonparametric Spatio-Temporal Subgoal Modeling
In this section, we introduce a redesigned inference framework, which, in analogy to BNIRL,
we refer to as distance-dependent Bayesian nonparametric IRL (ddBNIRL). We derive the
model by making a series of modifications to the original BNIRL framework that address
the previously described shortcomings on the conceptual level. Rethinking each part of
the original framework, we begin with a discussion of the commonly used softmax action
selection strategy (Equation 2) in the context of subgoal inference, which finally leads to a
redesign of the subgoal likelihood model (Limitation 4). Next, we focus on the subgoal allocation mechanism itself and introduce two closely related model formulations, each targeting
one of the basic behavior types described in Figure 5, thereby addressing Limitations 1, 2
and 3. For the time-invariant case, we begin with an intermediate model that introduces a
subtle yet important structural modification to the BNIRL framework. In a second step,
we generalize that new model to account for the spatial structure of the control problem,
which finally allows us to extrapolate the expert behavior to unseen situations. As part of
this generalization, we present a new state space metric that arises naturally in the context
of subgoal inference (see Limitation 2, second point). Lastly, we tackle the time-varying
case and present a variant of the model that explicitly considers the temporal aspect of the
subgoal problem. A solution to Limitation 5 is discussed later in Section 4.
In contrast to BNIRL, both presented models can be used likewise for subgoal extraction
and action prediction. Moreover, sticking with the Bayesian methodology, the presented
approach provides complete posterior information at all levels.
3.1 The Subgoal Likelihood Model
Like many other approaches found in the (I)RL literature, BNIRL exploits a softmax weighting (Equation 2) to transform the Q-values of an optimal policy into a valid subgoal likelihood model. The softmax action rule has its origin in RL where it is known as the Boltzmann exploration strategy (Cesa-Bianchi et al., 2017; Sutton and Barto, 1998), which is
commonly applied to cope with the exploration-exploitation dilemma (Ghavamzadeh et al.,
2015). In recent years, however, it has also become the de facto standard for describing the
(imperfect) decision-making strategy of an observed demonstrator (see, for example, Dimitrakakis and Rothkopf, 2011; Ramachandran and Amir, 2007; Rothkopf and Dimitrakakis,
2011; Choi and Kim, 2012; Neu and Szepesv´ari, 2007; Babe¸s-Vroman et al., 2011).
13
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
In the following paragraphs, we focus on the implications of this model on the subgoal
extraction problem and show that it contradicts our intuitive understanding of what characteristics a reasonable subgoal model should have. In particular, we argue that the subgoal
posterior distribution arising from the BNIRL softmax model is of limited use for inferring
the latent intention of the agent, due to subgoal artifacts caused by the system dynamics
that cannot be reconciled with the evidence provided by the demonstrations. Based on
these insights, we propose an alternative transformation scheme that is more consistent
with the subgoal principle.
3.1.1 Scale of the Reward Function
The first implication of the softmax likelihood model concerns the choice of the uncertainty
coefficient β. To explain the problem, we consider the thought experiment of an agent
located at some state s targeting a particular subgoal g. The likelihood π(a | s, g) in Equation (2) quantifies the probability that the agent decides for a specific action a, based on the
corresponding state-action values Q(·, s | g). Since those values are linear in the underlying
reward function Rg (Equation 3), the softmax likelihood model implies that the expert’s
ability to maximize the long-term reward, reflected by the spread of the probability mass
in π(· | s, g), rises with the magnitude C of the assumed subgoal reward (more concentrated
probability mass signifies a higher confidence in the action choice). In other words, assuming
a higher goal reward virtually increases our level of confidence in the expert, even though
the difficulty of the underlying task and the optimal policy remain unchanged. Nonetheless,
the BNIRL model requires us to readjust the uncertainty coefficient β in order to keep both
models consistent. However, as the model provides no reference level for the expert’s uncertainty across different scenarios, the choice of β becomes nontrivial. Yet, the parameter
has a significant impact on the granularity of the learned subgoal model as it trades off
purposeful goal-oriented behavior against random decisions.
Note that the described effect is not specific to the subgoal reward model in Equation (1)
but is really a consequence of the softmax transformation in Equation (2). In fact, the same
problem occurs when the model is applied in a regular MDP environment with arbitrary
reward function, for example, when the agent is provided an additional constant reward
at all states. Clearly, such a constant reward provides no further information about the
underlying task and should hence not affect the agent’s belief about the optimal choice of
actions (compare discussion on constant reward functions and transformations of rewards,
Ng and Russell, 2000; Ng et al., 1999). Based on these two observations, our intuition tells
us that we seek for a rationality model that is invariant to affine transformations of the
reward signal, meaning that any two reward functions R : S → R and R¯ := xR + y with
x ∈ (0, ∞), y ∈ R, should give rise to the same intentional representation. As we shall see
in Section 3.1.3, this can be achieved by modeling the behavior of an agent based on the
relative advantages of actions rather than on their absolute expected returns.
3.1.2 Impact of the Transition Dynamics
The second implication of the softmax likelihood model is less immediate and inherently
tied to the dynamics of the system. To explain the problem, we consider a scenario where
we have a precise idea about the potential goals of the expert. For our example, we adopt
14
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
the grid world dynamics described in Section 5.1 and consider a simple upward-directed
trajectory of state-action pairs, which we aspire to explain using a single (sub-)goal. The
complete setting is depicted in Figure 6.
Intuitively, the shown demonstration set should lead to goals that are located in the
upper region of the state space and concentrated around the vertical center line. Moreover,
as we move away from that center line, we expect to observe a smooth decrease in the
subgoal likelihood, while the rate of the decay should reflect our assumed level of confidence
in the expert. As it turns out, the induced BNIRL subgoal posterior distribution, shown
in the top row for different values of β, contradicts this intuition. In particular, we observe
that the model yields unreasonably high posterior values at the upper border states and
corners of the state space, which, according to our intuitive understanding of the problem,
cannot be justified by the given demonstration set.
To pin down the cause of this effect, we recall from Equation (2) that the likelihood of
an action grows with the corresponding Q-value. Hence, we need to ask what causes the
Q-values of the demonstrated actions to be large when the subgoal is assumed to be located
at one of the upper corner/border states of the space. Using Bellman’s principle, we can
express the optimal Q-function for any subgoal g as
Q
∗
(s, a | g) = Rg(s) + γ ET

V
∗
(s
0
| g)| s, a
= Rg(s) + γ ET

Eρ
πg [Rg(s
00)| s
0
] | s, a
(6)
= Rg(s) + γ ET

Cρπg
(g | s
0
)| s, a
,
where V
∗
(s | g) := maxa∈A Q∗
(s, a | g), πg(s) := arg maxa∈A Q∗
(s, a | g) is the optimal policy for subgoal g, and C is the subgoal reward from Equation (1). Lastly, ρ
πg (s
0
P
| s) :=
∞
t=0 γ
tpt(s
0
| s, πg) denotes the (improper) discounted state distribution generated by executing policy πg from the considered initial state s, where pt(s
0
| s, πg) refers to the probability of reaching state s
0
from state s under policy πg after exactly t steps, which is defined
implicitly via the transition model T.
The outer expectation in Equation (6) accounts for the stochastic transition to the
successor state s
0
, while the inner expectation evaluates the expected cumulative reward over
all states s
00 that are reachable from s
0
. It is important to note that— by the construction
of the Q-function— only the first move of the agent to state s
0 depends on the choice of
action a whereas all remaining moves (i.e., the argument of the expectation in the last line)
are purely determined by the system dynamics and the subgoal policy πg. Focusing on
that inner part, we conclude that, regardless of the chosen action a, the Q-values will be
large whenever the assumed subgoal induces a high state visitation frequency ρ
πg at its own
location g. The latter is fulfilled if
(i) the chance of reaching the goal in a small number of steps is high so that the effect
of discounting is small and/or
(ii) the controlled transition dynamics T(s
0
| s, πg(s)) that are induced by the subgoal lead
to a high chance of hitting the goal frequently.
Note that the first condition implies that the model generally prefers subgoals that are close
to the demonstration set— a property that cannot be justified in all cases. For example,
the recording of the demonstrations could have simply ended before the expert was able to
15      
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
reach the goal (Figure 5). Yet, if desired, this proximity property should be more naturally
attributed to the subgoal prior model pg(g | s).
Moreover, we observe that the second condition depends primarily on the system dynamics T, which can be more or less strongly influenced by the actions of the agent, depending
on the scenario. In fact, in a pathological example, T could be even independent of the
agent’s decisions, meaning that the agent has no control over its state. An example illustrating this extreme case would be a scenario where the agent gets always driven to the same
terminal state, regardless of the executed policy. Although it is somewhat pointless speak
of “subgoals” in this context, that terminal state would exhibit a high subgoal likelihood
according to the softmax model because the corresponding visitation frequency would be
inevitably large. A softened variant of this condition can occur at corner/border states (i.e.,
states in which the agent experiences fewer degrees of freedom and which are hence more
difficult to leave than others) and transition states (i.e., states that must be passed in order
to get from certain regions of the space to others), which naturally exhibit an increased
visitation frequency due to the characteristics of the environment.
In our example in Figure 6, we can observe the symptoms of both described conditions
clearly. In particular, for an upward-directed policy as it is implied by the shown demonstration set, the induced state visitation distribution exhibits increased values at exactly
the aforementioned border and corner states (due to the reflections occurring to the agent
when hitting the state space boundary) as well as close to the trajectory ending (caused by
the proximity condition).
3.1.3 The Normalized Likelihood Model
To address these problems, we modify the likelihood model using a rescaling of the involved
Q-values. Let Q∧(s | g) and Q∨(s | g) denote the maximum and minimum Q-values at state s
for subgoal g, i.e., Q∧(s | g) := maxa∈A Q∗
(s, a | g) and Q∨(s | g) := mina∈A Q∗
(s, a | g). We
then define the normalized state-action value function Q•
: S × A × S → [0, 1] as
Q
•
(s, a | g) :=
( Q∗(s,a | g)−Q∨(s | g)
Q∧(s | g)−Q∨(s | g)
if Q∧(s | g) 6= Q∨(s | g),
 otherwise,
(7)
where  ∈ (0, 1] is an arbitrary constant that is canceled out in Equation (8). In contrast
to the Bellman state-action value function Q∗
, which quantifies the expected return of
an action, the normalized function Q• assesses the return of that action in relation to the
returns of all other actions. This concept is similar to that of the advantage function (Baird,
1993) with the important difference that the values returned by Q• are normalized to the
range [0, 1] and thus serve as an indicator for the relative quality of actions. Accordingly,
the values can be interpreted as relative advantages (i.e., relative to the maximum possible
advantage among all actions). The normalized subgoal likelihood model is then constructed
analogously to the BNIRL likelihood model,
π
•
(ad | sd, gz˜d
) ∝ exp 
βQ•
(sd, ad | gz˜d
)
	
. (8)
The key property of this model is that it is invariant to affine transformations of the reward
function, as summarized by the following proposition.
16
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
β = 0.1 β = 1 β = 10
BNIRL model
β = 0.1 β = 1 β = 10
normalized model
← low probability high probability →
β = 0.1 β = 0.1
BNIRL model normalized model
Figure 6: Comparison of the subgoal posterior distributions induced by the original BNIRL
likelihood model and by the proposed normalized model, based on the grid world
dynamics described in Section 5.1 and a uniform subgoal prior distribution pg.
The range of the shown color scheme is to be understood per subfigure. Black
squares indicate wall states. The BNIRL likelihood model yields unreasonably
high subgoal posterior mass at the border states and corners of the state space
(due to locally increased state visitation probabilities arising from wall reflections)
as well as at trajectory endings (caused by the implicit proximity property of the
model)— see Section 3.1.2 for details. Both effects are mitigated by the proposed
normalized likelihood model, which describes the action-selection process of the
agent using relative advantages of actions instead of absolute returns.
17
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
Proposition 1 (Affine Invariance) Consider an MDP with reward function R : S → R
and let Q∗
(s, a | R) denote the corresponding optimal state-action value function. For the
corresponding normalized function Q•
it holds that Q•
(s, a | R) = Q•
(s, a | xR + y) ∀x ∈
(0, ∞), y ∈ R, s ∈ S, a ∈ A. Hence, the subgoal likelihood model in Equation (8) is invariant
to affine transformations of R.
Proof Due to the linear dependence of Q∗ on the reward function R (Equation 3) it holds
that Q∗
(s, a | xR + y) = xQ∗
(s, a | R) + y
1−γ
. Using this relationship in Equation (7), it
follows immediately that Q•
(s, a | R) = Q•
(s, a | xR + y).
Using the proposed likelihood model offers several advantages. First of all, it enables a
more generic choice of the uncertainty coefficient β (Section 3.1.1). This is because the
returned Q•
-values lie in the fixed range [0,1], where 0 always indicates the lowest and 1
indicates the highest confidence. For example, setting β = log(β
0
) for some β
0 ∈ (0, ∞)
always corresponds to the assumption that the expert chooses the optimal action with a
probability that is β
0
times higher than the probability of choosing the least favorable action,
irrespective of the underlying system model.
Moreover, as the results in Figure 6 reveal, the induced subgoal posterior distribution
is notably closer to our expectation. The reason for this is twofold: first, a likelihood
computation based on relative advantages mitigates the influence of the transition dynamics
discussed in Section 3.1.2. This is because the described cumulation effect of the state
visitation distribution ρ
πg (Equation 6) is present in the returns of all actions and is thus
reduced through the proposed normalization. For instance, if the agent in our grid world
follows a policy that is all upward directed (as shown in the example), the induced state
visitation distribution exhibits increased values at the upper border states of the world, even
if we manipulated the first action of the agent (as considered in the Bellman Q-function).
Accordingly, the original model would indicate an increased subgoal likelihood at those
states. The normalized model, by contrast, is less affected as it constructs the likelihood by
considering the increased visitation frequencies relative to each other.
Second, since the normalization diminishes the effect of the discounting, the subgoal
posterior distribution is less concentrated around the trajectory ending and shows significant
mass along the extrapolated path of the agent. This property allows us to identify far
located states as potential goal locations, which adds more flexibility to the inferred subgoal
constellation (compare Figure 4). As an illustrating example, consider the scenario shown in
the bottom part of Figure 6. We observe that the normalized model assigns high posterior
mass to all states in the right three corridors since any subgoal located in those corridors
explains the demonstration set equally well. Here, the difference between the two models is
even more pronounced because the transition dynamics have a strong impact on the agent
behavior due to the added wall states. For further details, we refer to Section 5.1, where
we provide additional insights into the subgoal inference mechanism.
3.2 Modeling Time-Invariant Intentions
With our redesigned likelihood model, we now focus on the partitioning structure of the
model. Herein, we first consider the case where the intentions of the agent are constant with
18
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
respect to time. As explained in Limitation 3, this setting is consistent with the standard
MDP formalism in the sense that the optimal policy for the considered task can be described
in the form of a state-to-action mapping.
As a first step, to account for this relation, we establish a link between the model partitioning structure and the underlying system state space by replacing the demonstrationbased indicators ˜z = {z˜d ∈ N}
D
d=1 with a new set of variables z := {zi ∈ N}
|S|
i=1. Unlike ˜z,
these new indicators do not operate directly on the data but are instead tied to the elements
in S. Although they formally represent a new type of variable, we can still imagine that
their distribution follows a CRP. This yields an intermediate model of the form
p(a, z, G | s) = p(z)
Y∞
k=1
pg(gk | s)
Y
D
d=1
π
•
(ad | sd, gzsd
),
whose structure is illustrated in Figure 2b. To see the difference to Equation (4), notice the
way the subgoals are indexed in this model.
The intermediate model makes it possible to reason about the policy (or, more suggestively, the underlying state-to-action rule approximated by the expert) at visited parts
of the state space. Yet, the model is unable to extrapolate the gathered information to
unvisited states, for the reasons explained in Section 2.2. This problem can be solved by
replacing the exchangeable prior distribution over subgoal assignments induced by the CRP
with a non-exchangeable one, in order to account explicitly for the covariate state information contained in the demonstration set. Based on our insights from Bayesian policy
recognition (Soˇsi´c et al., 2018b), we use the distance-dependent Chinese restaurant process ˇ
(ddCRP, Blei and Frazier, 2011) for this purpose, which allows a very intuitive handling of
the state context, as explained below. For alternatives, we point to the survey paper by
Foti and Williamson (2015).
In contrast to the CRP, which assigns states to partitions, the ddCRP assigns states to
other states, based on their pairwise distances. These “to-state” assignments are described
by a set of indicators c := {ci ∈ S}|S|
i=1 with prior distribution p(c) = Q|S|
i=1 p(ci),
p(ci = j) = (
ν if i = j,
f(∆i,j ) otherwise,
(9)
for i, j ∈ S. Herein, ν ∈ [0, ∞) is called the self-link parameter of the process, ∆i,j denotes
the distance from state i to state j, and f : [0, ∞) → [0, ∞) is a monotone decreasing
score function. Note that the distances {∆i,j} can be obtained via a suitable metric defined
on the state space, which may be furthermore used for calibrating the score function f
(see subsequent section). The state partitioning structure itself is then determined by the
connected components of the induced ddCRP graph (Figure 7). Our joint distribution,
visualized in Figure 2c, thus reads as
p(a, c, G | s) = p(c)
Y∞
k=1
pg(gk | s)
Y
D
d=1
π
•
(ad | sd, gz(c)|sd
), (10)
where z(c)|s denotes the subgoal label of state s arising from the considered indicator set c.
In order to highlight the state dependence of the underlying subgoal mechanism, we refer
to this model as ddBNIRL-S.
19
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
3.2.1 The Canonical State Metric for Spatial Subgoal Modeling
The use of the ddCRP as a prior model for the state partitioning in Equation (10) inevitably
requires some notion of distance between any two states of the system, in order to compute
the involved function scores {f(∆i,j )}. When no such distances are provided by the problem
setting (see Limitation 2, second point), a suitable (quasi-)metric can be derived from the
transition dynamics of the system, which turns out to be the canonical choice for the
ddBNIRL-S model. Consider the Markov chain governing the state process {st=n}∞
n=1 of
an agent for some specific policy π. For any ordered pair of states (i, j), the chain naturally
induces a value T
π
i→j
, called a hitting time (Taylor and Karlin, 1984; Tewari and Bartlett,
2008), which represents the expected number of steps required until the state process,
initialized at i, eventually reaches state j for the first time,
T
π
i→j
:= E

min{n ∈ N : st=n = j} | s0 = i, π
.
In the context of our subgoal problem, the natural quasi-metric to measure the directed
distance between two states i and j is thus given by the time it takes to reach the goal
state j from the starting state i under the corresponding optimal subgoal policy πj (s) =
arg maxa∈A Q∗
(s, a | j), i.e., ∆i,j := T
πj
i→j
. For ddBNIRL-S (as well as for the waypoint
method in BNIRL), this choice is particularly appealing since the subgoal policies {πj} are
already available within the inference procedure after the state-action values have been computed for the likelihood model (more on this in Section 4.5). The corresponding distances
{∆i,j} can be obtained efficiently in a single policy evaluation step since ∆i,j corresponds to
the optimal (negative) expected return at the starting state i for the special setting where
the respective target state j is made absorbing with zero reward while all other states are
assigned a reward of −1.
3.2.2 Choice of the Score Function
From Equation (9) it is evident that the ddCRP model favors partitioning structures that
result from the connection of nearby states. In the context of the subgoal problem, this
property translates to the prior assumption that, most likely, each subgoal is approached
by the expert from only one specific localized region in the system state space. While this
assumption may be reasonable for some tasks, other tasks require that certain target states
be approached more than one time, from different regions in the system state space. In
such cases, it is beneficial if the model can reuse the same subgoal in various contexts, in
order to obtain a more efficient task encoding (Figure 4).
From a mathematical point of view, the prerequisite for learning such encodings is that
the score function f does not shrink to zero at large distance values, so that there remains
a non-zero probability of connecting states that are far apart from each other. This can be
achieved, for example, by representing f as a convex combination of a monotone decreasing
zero-approaching function ¯f : [0, ∞) → [0, ∞) and some constant offset κ ∈ (0, 1],
f(∆) = (1 − κ)
¯f(∆) + κ,
where ¯f is chosen, e.g., as a radial basis function (Soˇsi´c et al., 2018b). Note that, in order ˇ
to implement a desired degree of locality in the model, the scale of the decay function f (or
¯f, respectively) can be further calibrated based on the quantiles of the distribution of the
given distances {∆i,j}.
20  
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
3.3 Modeling Time-Varying Intentions
For the case of changing expert intentions, we need to keep the flexibility of BNIRL to
select a new subgoal at each decision instant, instead of restricting our policy to target
a unique subgoal per state (Figure 5). Hence, we retain the basic BNIRL structure in
this case and define the subgoal allocation mechanism using a set of data-related indicator
variables. However, in contrast to BNIRL, which makes no assumptions about the temporal
relationship of the subgoals and thus allows arbitrary changes of the expert’s intentions
(Section 2.1), we design our joint distribution in a way that favors smooth action plans in
which the expert persistently follows a subgoal over an extended period of time. Again, we
can make use of the ddCRP properties to encode the underlying smoothness assumption,
but this time using a score function defined on the temporal distance between demonstration
pairs. For this purpose, we require an additional piece of information, namely the unique
timestamp of each demonstration example. Accordingly, we need to assume that our data
set is of the form De := {(sd, ad, td)}
D
d=1, where td denotes the recording time of the dth
demonstration pair (sd, ad).2
The prior distribution over data partitionings can then be written as p(˜c) = QD
d=1 p(˜cd),
p(˜cd = d
0
) ∝
(
ν if d = d
0
,
f(∆e
d,d0) otherwise,
where the indices d, d0 ∈ {1, . . . , D} range over the size of the demonstration set. Herein,
∆e
d,d0 := |td − td
0| denotes the temporal distance between the data points d and d
0
. As
before, we use the “∼”-notation to distinguish the data-related partitioning variables ˜c, ˜z
and distances {∆e
d,d0} from their state-space-related counterparts c, z and {∆i,j} used in
ddBNIRL-S. Note, however, that the score function f is independent of the underlying
model type and may be chosen as described in Section 3.2.1, with a scale calibrated to the
duration of the demonstrated task.
With that, we obtain our temporal subgoal model as
p(a,˜c, G | s) = p(˜c)
Y∞
k=1
pg(gk | s)
Y
D
d=1
π
•
(ad | sd, g˜z(˜c)|d
), (11)
where ˜z(˜c)|d refers to the subgoal label of the dth demonstration pair induced by the
given assignment ˜c. Analogous to our spatial subgoal model, we refer to this model as
ddBNIRL-T. The structural differences between all models can be seen from Figure 2.
3.3.1 Relationship to BNIRL
Since the distance-dependent CRP contains the classical CRP as a special case for a specific choice of distance metric and score function (Blei and Frazier, 2011), the ddBNIRL-T
model can be considered a strict generalization of the original BNIRL framework (neglecting the likelihood normalization in Section 3.1). In the same way, ddBNIRL-S generalizes
2. Note that the timestamps {td} are naturally available if the demonstrations are recorded in trajectory
form, where we observe several consecutive state-action pairs. In fact, the temporal information of the
data is also required for the waypoint method to work (Limitation 2), even though the authors of BNIRL
formally assume to have access to the reduced data set of state-action pairs only.
21
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
the intermediate model presented in Section 3.2 (Figure 2). However, although the BNIRL
model can be recovered from ddBNIRL, it is important to note that the sampling mechanisms of both frameworks are fundamentally different. Whereas in BNIRL the subgoal
assignments are sampled directly, the clustering structure in ddBNIRL is defined implicitly
via the assignment variables c and ˜c, respectively. As explained by Blei and Frazier (2011),
this has the effect that the Markov chain governing the Gibbs sampler mixes significantly
faster because several cluster assignments can be altered in a single step, which effectively
realizes a blocked Gibbs sampler (Roberts and Sahu, 1997).
3.4 Static versus Dynamic Subgoal Allocation
With the model structures described in Sections 3.2 and 3.3, we have presented two alternative views on the subgoal problem. Naturally, the question arises which of the two
approaches is better suited for a particular application scenario. As explained in the previous paragraphs, the main difference between the two models lies in their structure, i.e., in
the way subgoals are allocated. While ddBNIRL-S relies on a static assignment mechanism
that consistently links the individual states of a system to their corresponding subgoals,
ddBNIRL-T allocates its subgoals per demonstration pair. The latter means that different
state-action pairs observed at the same state can be explained using different intentional
settings (Figure 5). To answer the above question, we hence need to ask under which conditions an observed decision-making process can be described via a static assignment rule
that uniquely characterizes each system state, and in which situations we require a more
flexible model that allows to take into account additional side information.
From decision-making theory, we know that the optimal solutions for time-invariant
MDPs can be formulated as a deterministic time-invariant Markov policies (Puterman,
1994), the class of which is fully covered by the static ddBNIRL-S framework.3 Therefore,
assuming that the transition dynamics of our system are constant with respect to time
and that the agent acts rationally while having complete knowledge of the environment,
there exist only two plausible reasons why we would potentially observe the agent execute
a time-variant policy:
• either, the reward model of the agent changes over time,
• or, the observed decision-making process is not Markovian with respect to the assumed
state space model (i.e., the agent’s decisions depend on additional context information
that is not explicitly captured in our state representation).
Accordingly, if we assume that the Markov property holds (meaning that the chosen state
representation is sufficiently rich to capture the decision-making strategy of the agent), the
only theoretical justification to prefer a dynamic subgoal model like ddBNIRL-T over a
static one such as ddBNIRL-T would be if we assume that the intentions of the agent are
truly time-dependent.
Practically speaking, however, there can be several reasons why a given state representation might not fulfill the Markov requirement. One obvious explanation would be that
the actual state space of the demonstrator is not perfectly known. This situation occurs, for
3. While we omit a rigorous proof here, this can be seen intuitively by noticing that any state-to-action
rule that is optimal for a given MDP reward function can be synthesized via ddBNIRL-S by assuming
an individual subgoal for each state in the extreme case.
22
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
example, if not all state context available to the agent is observable by the modeler. Another
potential situation is when the strategy of the agent depends on information that is independent of the system dynamics and hence deliberately excluded from the state variable (i.e.,
parameters that are unaffected by the actions of the agent, such as the preselection of a
specific high-level strategy). A generic framework for such settings is described by Daniel
et al. (2016b), where the agent learns multiple sub-policies that are triggered depending on
context information that is treated separately from the state.
To an external observer who is unaware of that context information, the resulting policy
of the agent would potentially appear time-dependent, in which case the only chance to
disentangle the individual sub-policies would be to resort to a dynamic subgoal encoding,
such as provided by ddBNIRL-T. However, if the context is known (like the temporal information in Section 3.3 as a particular example), both approaches can be used equivalently
and will only differ in the resulting state representation. More specifically, we can either
fall back on the static ddBNIRL-S model by augmenting the state variable with the context information accordingly, or we can resort to the dynamic subgoal allocation scheme
of ddBNIRL-T, using a distance metric that accounts for the context. Conversely, when
considered in a purely time-invariant setting (where the context is described by some other
known quantity), ddBNIRL-S and ddBNIRL-T can be regarded as two sides of the same
coin, i.e., both can be used to describe the time-invariant policy of an observed demonstrator
but they differ in the way the side information is represented.
4. Prediction and Inference
Having introduced the ddBNIRL framework, we now explain how it can be used to generalize
a given expert behavior. To this end, we first focus on the task of action prediction at a given
query state, and then explain in a second step how to extract the necessary information from
the demonstration data. Along the way, we also give insights into the implicit intentional
model learned through the framework.
Note: In order to keep the level of redundancy at a minimum, the following considerations
are based on the ddBNIRL-S model. The results for ddBNIRL-T follow straightforwardly;
the only change in the equations is the way the subgoals are referenced. To obtain the
corresponding expressions, we simply replace the assignment variables c with ˜c and change
the cluster definition in Equation (16) to Ck := {d ∈ {1, . . . , D} : ˜z(˜c)|d = k}. Accordingly,
all occurrences of z(c)|s
∗ change to ˜z(˜c)|d
∗ , z(c)|sd
becomes ˜z(˜c)|d, and sd ∈ Ck is replaced
with d ∈ Ck.
4.1 Action Prediction
Similar to the work by Abbeel and Ng (2004), we consider the task of predicting an action
a
∗ ∈ A at some query state s
∗ ∈ S that is optimal with respect to the expert’s unknown
reward model. However, in contrast to most existing IRL methods, our approach is not
based on point estimates of the expert’s reward function but takes into account the entire
hypothesis space of reward models. This allows us to obtain the full posterior predictive
policy from the expert data. Mathematically, the task is formulated as computing the predictive action distribution p(a
∗
| s
∗
, D), which captures the full information about the expert
23
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
behavior contained in the demonstration set D. We start by expanding that distribution
with the help of the latent state assignments c,
p(a
∗
| s
∗
, D) = X
c∈S|S|
p(a
∗
| s
∗
, D, c)p(c | D).
The conditional distribution p(a
∗
| s
∗
, D, c) can be expressed in terms of the posterior distribution of the subgoal targeted at the query state s
∗
,
p(a
∗
| s
∗
, D) = X
c∈S|S|
p(c | D)
X
i∈S
p(a
∗
| s
∗
, c, gz(c)|s∗ = i)p(gz(c)|s∗ = i| D, c),
where we used the fact that the prediction a
∗
is conditionally independent of the demonstration set D given the state partitioning structure and the corresponding subgoal assigned
to s
∗
(that is, given c and gz(c)|s∗
). From the joint distribution in Equation (10), it follows
that
p(gk | D, c) = 1
Zk(D, c)
pg(gk | s)
Y
d:z(c)|sd=k
π(ad | sd, gk), (12)
where Zk(D, c) is the corresponding normalizing constant,
Zk(D, c) :=
X
i∈supp(pg)
pg(gk = i| s)
Y
d:z(c)|sd=k
π(ad | sd, gk = i). (13)
Using this relationship, we get
p(a
∗
| s
∗
, D) = X
c∈S|S|
1
Zk(D, c)
p(c | D)
X
i∈supp(pg)
pg(gz(c)|s∗ = i| s) . . .
. . . ×
Y
d:z(c)|sd=z(c)|s∗
π(ad | sd, gz(c)|s∗ = i)p(a
∗
| s
∗
, c, gz(c)|s∗ = i).
In contrast to the summation over subgoal locations i, whose computational complexity is
determined by the support of the subgoal prior distribution pg and which grows at most
linearly with the size of S, the marginalization with respect to the indicator variables c
involves the summation of |S||S| terms and becomes quickly intractable even for small state
spaces. Therefore, we approximate this operation via Monte Carlo integration, which yields
p(a
∗
| s
∗
, D) ≈
1
N
X
N
n=1
X
i∈supp(pg)
p(gz(c
{n})|s∗ = i| D, c
{n}
)p(a
∗
| s
∗
, c
{n}
, gz(c
{n})|s∗ = i),
where c
{n} ∼ p(c | D). The final prediction step can then be performed, for example, via
the maximum a posteriori (MAP) policy estimate,
πˆ(s
∗
) := arg max
a
∗∈A
p(a
∗
| s
∗
, D). (14)
The inference task, hence, reduces to the computation of the posterior samples {c
{n}},
which is described in the next section.
24
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
4.2 Partition Inference
Based on the joint model in Equation (10), we obtain the posterior distribution p(c | D) in
factorized form as
p(c | D) = p(c)
Y∞
k=1
X
gk∈supp(pg)
pg(gk | s)
Y
D
d=1
π(ad | sd, gz(c)|sd
)
= p(c)
|zY
(c)|
k=1
X
gk∈supp(pg)
pg(gk | s)
Y
d:sd∈Ck
π(ad | sd, gk), (15)
where Ck denotes the kth state cluster induced by the assignment c,
Ck := {s ∈ S : z(c)|s = k}, (16)
and |z(c)| is the total number of clusters defined by c. As explained by Blei and Frazier
(2011), the indicator samples {c
{n}} can be efficiently generated using a fast-mixing Gibbs
chain. Starting from a given ddCRP graph defined by the subset of indicators c\i
:= {cj}\ci
,
the insertion of an additional edge ci will result in one of three possible outcomes, as
illustrated in Figure 7: in the case of adding a self-loop (ci = i), the underlying partitioning
structure stays unaffected. Setting ci 6= i either leaves the structure unchanged (if the target
state is already in the same cluster as state i) or creates a new link between two clusters.
In the latter case, the involved clusters are merged, which corresponds to a merging of
the associated sums in Equation (15). According to these three cases, the conditional
distribution for the Gibbs procedure is obtained as
p(ci = j | c\i
, D) ∝



ν if i = j,
f(di,j ) if no clusters are merged,
f(di,j )
L(Czi
∪ Czj
)
L(Czi
)·L(Czj
)
if clusters Czi
and Czj
are merged.
(17)
Herein, L(C) denotes the marginal action likelihood of all demonstrations accumulated in
cluster C,
L(C) = X
g∈supp(pg)
pg(g | s)
Y
d:sd∈C
π(ad | sd, g), (18)
which further represents the normalizing constant for the posterior distribution of the cluster
subgoal (Equation 13). Accordingly, the fraction in Equation (17) can be interpreted as the
likelihood ratio of the partitioning defined by c\i and the merged structure after inserting
the new edge ci
.
4.3 Subgoal Inference
It is important to note that the inference method described in Sections 4.1 and 4.2 is based
on a collapsed sampling scheme where all subgoals of our model are marginalized out.
In fact, the ddBNIRL framework differs from BNIRL and other IRL methods in that the
reward model of the expert is never made explicit for predicting new actions. Nonetheless, if
desired (e.g., for the purpose of analyzing the expert’s intentions), an estimate of the subgoal
locations can be obtained in a post-hoc fashion from the subgoal posterior distribution in
Equation (12) for any given assignment c. Examples are provided in Figure 8.
25
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
(b)
(a) (c)
Figure 7: Insertion of an edge (dashed arrow) to the ddCRP graph. Colors indicate the
cluster memberships of the nodes, which are defined implicitly via the connected
components of the graph. (a) Adding a self-loop or (b) inserting an edge between
two already connected nodes does not alter the clustering structure. (c) Adding
an edge between two unconnected components merges the associated clusters.
4.4 Action Inference
As mentioned in Section 2.2, the original BNIRL algorithm requires complete knowledge of
the expert’s action record a, which limits the range of potential application scenarios. For
this reason, we generalize our inference scheme to the case where we have access to state
information only, provided in the form of an alternative data set D := {(sd, s¯d)}
D
d=1, where
s¯d refers to the state visited by the expert immediately after sd. In this setting, inference
can be performed by extending the Gibbs procedure with an additional collapsed sampling
stage,
p(ad | a\d
, D, c) ∝ T(¯sd | sd, ad)
X
i∈supp(pg)
pg(gz(c)|sd
= i)
Y
d
0
:z(c)|s
d0 =z(c)|sd
π(ad
0 | sd
0, gz(c)|sd
= i), (19)
which, for a fixed assignment c, recovers an estimate of the latent action set a from the
observed state transitions. Note that knowledge of the transition model T is required for
this step as it provides the necessary link between the expert’s actions and the observed
successor states. The same extension is possible for the ddBNIRL-T model, provided that
the transition timestamps {td} are known (Section 3.3).
4.5 Computational Complexity
As a last point in this section, we would like to discuss the computational complexity of
our approach. For this purpose, here a quick reminder on the used notation: we write |S|
and |A| for the cardinalities of the state and action space, respectively, and use the letter D
for the size of the demonstration set. Further, we write Ck to refer to the kth state cluster
(ddBNIRL-S) or data cluster (ddBNIRL-T). In the subsequent paragraphs, we additionally
use the notation ND(Ck) to access the number of demonstration data points associated with
26
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
cluster Ck, K to indicate the number of clusters in the current iteration, Ng
:= |supp(pg)|
as a shorthand for the size of the support of the subgoal prior distribution, and Nc for the
number of indicator variables, i.e., Nc
:= |S| for ddBNIRL-S and Nc
:= D for ddBNIRL-T.
Initialization Phase: Common to all discussed models (including BNIRL) is that they
depend on a preceding planning phase, where we compute, potentially in parallel, the
state-action value functions (Equation 3) for all Ng considered subgoals, which allows us
to construct the subgoal likelihood model (Equation 2 or 8). The overall computational
complexity of this procedure is of order O(NgCMDP(|S|, |A|)), where CMDP(x, y) denotes
the complexity of the used planning routine to (approximately) solve an MDP of size x
with a total number of y actions. Using a value iteration algorithm, for instance, this can
be achieved in O(CMDP(|S|, |A|)) = O(|S|2
|A|) steps (Littman et al., 1995). If we assume
that the expert reaches all subgoals during the demonstration phase (Michini and How,
2012), we can restrict the support of the subgoal prior to the visited states, so that Ng is
upper-bounded by min(|S|, D). Note that there exist approximation techniques that make
the computation tractable in large/continuous state spaces (see discussion in Section 6).
Before we start the sampling procedure, we compute all single-cluster likelihoods {L(Ck)}
and pairwise likelihoods {L(Ck ∪ Ck
0)} according to Equation (18), based on some (random)
initial cluster structure. The likelihood computation for the kth cluster Ck involves a product over ND(Ck) data points, which needs to be calculated for each of the Ng subgoals
before taking their weighted average. This step has to be executed (potentially in parallel)
for all clusters. However, because each demonstration is associated with exactly one cluster
(either directly as in ddBNIRL-T or via the corresponding state variable as in ddBNIRL-S)
and hence P
k ND(Ck) = D, the total complexity for computing all single-cluster likelihoods
is of order O(NgD), irrespective of the actual cluster structure. A similar line of reasoning
applies to the computation of the pairwise likelihoods, yielding the same complexity order.
Yet, for the latter we need to consider all possible cluster combinations. Assuming an initial
number of K clusters, there are in total K(K − 1)/2 pairwise likelihoods to be computed.
Hence, the overall complexity of the initialization phase can be summarized as O(NgDK2
).
Partition Inference: For the partition inference, the bulk of the computation lies in the
repeated construction of the likelihood term in Equation (17), which needs to be updated
whenever the cluster structure changes. To analyze the complexity, we consider the sampling
step of an individual assignment variable ci (or likewise ˜ci). In the worst case, removing
the edge that belongs to ci from the ddCRP graph divides the associated cluster into two
parts (Figure 7), so that two new single-cluster likelihoods need to be computed. With the
upper bound D on the number of data points associated with the cluster before the division,
this operation is of worst-case complexity O(NgD) (see initialization phase). Irrespective
of whether a division occurs, we then need to compute all pairwise cluster likelihoods with
the (new) cluster connected via ci
. For a total of K − 1 possible choices, this is done in
O(NgDK) operations (see initialization phase). After assigning the indicator, we move on
to the next variable where the process repeats. If we assume, for simplicity, that the number of clusters stays constant during a full Gibbs cycle, the total complexity of updating
all cluster assignments is hence of order O(NgDKNc). A (pessimistic) upper bound for the
general case can be obtained by assuming that each data point defines its own cluster, in
27
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
which case the complexity increases to O(NgD2Nc). Note that, in order to identify the new
cluster structure after changing an assignment, we additionally need to track the connected
components of the underlying ddCRP graph. As explained by Kapron et al. (2013), this
can be done in polylogarithmic worst-case time.
Action Sampling: In order compute the conditional probability distribution of a particular
action ad, we need to evaluate a product involving all actions that belong to the same cluster
as action ad (Equation 19). First, we can compute the product over all actions except ad
itself, where the number of involved terms is again upper-bounded by D. Appending the
term that belongs to ad for all possible action choices requires another |A| operations.
These two steps need to be repeated for all possible subgoals, yielding an upper bound on
the complexity of order O(Ng(D +|A|)). For a full Gibbs cycle, which involves sampling all
D action variables, the overall (worst-case) complexity is hence of order O(Ng(D + |A|)D).
5. Experimental Results
In this section, we present experimental results for our framework. The evaluation is separated into four parts:
(i) a proof of concept and conceptual comparison to BNIRL (Section 5.1),
(ii) a performance comparison with related algorithms (Section 5.2),
(iii) a real data experiment conducted on a KUKA robot (Section 5.3) and
(iv) an active learning task (Section 5.4).
5.1 Proof of Concept
To illustrate the conceptual differences to BNIRL and provide additional insights into the
latent intentional model learned through our framework, we begin with the motivating data
set from Figure 1a, which had been originally presented by Michini and How (2012). The
considered system environment, defined by |S| = 20 × 20 = 400 grid positions, is again
shown in the top left corner of Figure 8. Nine of those positions correspond to inaccessible
wall states, marked by the horizontal black bar. At the valid states, the expert can choose
from an action set comprising a total of eight actions, each initiating a noisy state transition
toward one of the (inter-)cardinal directions. The observed state-action pairs are depicted
in the form of arrows, whose colors indicate the MAP partitioning learned through BNIRL.
The remaining subfigures show the results of the ddBNIRL framework, which were obtained
from a posterior sample returned by the respective algorithm (ddBNIRL-S/T) at a low
temperature in a simulated annealing schedule (Kirkpatrick et al., 1983).
Comparing the obtained results, we observe the following main differences to the original
approach:
(i) Unlike BNIRL, the proposed framework allows to choose between a spatial and a
temporal encoding of the observed task, providing the possibility to account explicitly
for the type of demonstrated behavior (static/dynamic). As explained in Section 3.3.1,
the context-unaware (yet in principle dynamic) vanilla BNIRL inference scheme is still
included as a special case.
28
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
subgoal posteriors
sample partitionings
predictive policies
BNIRL ddBNIRL-S ddBNIRL-T
spatial policy phase 1: green subgoal phase 2: yellow subgoal phase 3: red subgoal
(all subgoals combined)
temporal policy
Figure 8: Results on the BNIRL data set (Michini and How, 2012). Top row: demonstration data and sample partitionings generated by the different inference algorithms. Center row: subgoal posterior distributions associated with the partitions found by ddBNIRL-S and ddBNIRL-T. For a clearer overview, the corresponding BNIRL distributions are omitted (see Figure 6 for a comparison). Bottom row: time-invariant ddBNIRL-S policy model synthesized from all three detected subgoals (left) and temporal phases identified by ddBNIRL-T (right). The
background colors have no particular meaning and were added only to highlight
the structures of the policies. Because of its missing generalization mechanism,
BNIRL does not itself provide a reasonable predictive policy model (Limitation 1).
29
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
(ii) Exploiting the spatial/temporal context of the data, the ddBNIRL solution is inherently robust to demonstration noise, giving rise to notably smoother partitioning
structures (top row). This effect is particularly pronounced in the case of real data,
as we shall see later in Section 5.3.2.
(iii) For each state partition or trajectory segment, we obtain an implicit representation
of the associated subgoal in the form of a posterior distribution, without the need of
assigning point estimates (center row). It is striking that the posterior distribution
corresponding to the green state partition has a comparably large spread on the upper
side of the wall. This can be explained intuitively by the fact that any subgoal located
in this high posterior region could have potentially caused the green state sequence,
which circumvents the wall from the right. At the same time, the green area of high
posterior values exhibits a sharp boundary on the left side since a subgoal located in
the upper left region of the state space would have more likely resulted in a trajectory
approaching from the left.
(iv) In contrast to BNIRL, which has no built-in generalization mechanism (Limitation 1),
our method returns a predictive policy model comprising the full posterior action information at all states. Note that we only show the resulting MAP policy estimates
here (bottom row), computed according to Equation (14). Additional results concerning the posterior uncertainty are provided in Sections 5.3 and 5.4.
The example illustrates how the synthesis of the predictive policy differs between ddBNIRL-S
(bottom left) and ddBNIRL-T (bottom row, rightmost three subfigures). While ddBNIRL-T
uses a set of (conditionally) independent policy models to describe the different identified behavioral phases, ddBNIRL-S maps the entire subgoal schedule onto a single timeinvariant policy representation. Looking closer at the learned models, we recognize that the
ddBNIRL-S solution in fact realizes a spatial combination of the three temporal ddBNIRL-T
components, where each component is activated in the corresponding cluster region of the
state space. This gives us two alternative interpretations of the same behavior.
5.2 Random MDP Scenario
Our next experiment is designed to provide insights into the generalization abilities of the
framework. For this purpose, we consider a class of randomly generated MDPs similar to the
Garnet problems (Bhatnagar et al., 2009). The transition dynamics {T(· | s, a)} are sampled
independently from a symmetric Dirichlet distribution with a concentration parameter of
0.01, where we choose |S| = 100 and |A| = 10. For each repetition of the experiment, NR
states are selected uniformly at random and assigned rewards that are, in turn, sampled
uniformly from the interval [0, 1]. All other states contain zero reward. Next, we compute
an optimal deterministic MDP policy π
∗ with respect to a discount factor of γ = 0.9 and
generate a number of expert trajectories of length 10. Herein, we let the expert select the
optimal action with probability 0.9 and a random, suboptimal action with probability 0.1.
The obtained state sequences are passed to the algorithms and we compute the normalized
value loss of the reconstructed policies according to
L(π
∗
, πˆ) :=
kV∗ − Vπˆk2
kV∗k2
, (20)
30
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
100
101
102
0
0.2
0.4
0.6
0.8
1
(a) NR = 1 (=b |S|/100)
100
101
102
0
0.2
0.4
0.6
0.8
(b) NR = 10 (=b |S|/10)
100
101
102
0
0.1
0.2
0.3
0.4
0.5
0.6
(c) NR = 50 (=b |S|/2)
100
101
102
0
0.1
0.2
0.3
0.4
(d) NR = 100 (=b |S|)
Figure 9: Comparison of all inference methods in the random MDP scenario for different
reward densities. Shown are the empirical mean values and standard deviations
of the resulting value losses, obtained from 100 Monte Carlo runs. The graphs
show a clear difference between BNIRL, BNIRL-EXT and ddBNIRL-S, which illustrates the importance of considering the spatial context for subgoal extraction.
where V∗ and Vπˆ
represent, respectively, the vectorized value functions of the optimal
policy π
∗ and the reconstruction ˆπ.
Since the considered system belongs to the class of time-invariant MDPs, ddBNIRL-S
lends itself as the natural choice to model the expert behavior. As baseline methods, we
adopt our subintentional Bayesian policy recognition framework (BPR, Soˇsi´c et al., 2018b), ˇ
as well as maximum-margin IRL (Abbeel and Ng, 2004), maximum-entropy IRL (Ziebart
et al., 2008), and vanilla BNIRL. Due to the missing generalization abilities of BNIRL
(Limitation 1) and because the waypoint method (Section 2.2) does not straightforwardly
apply to the considered scenario of multiple unaligned trajectories, we further compare our
algorithm to an extension of BNIRL, which we refer to as BNIRL-EXT. Mimicking the
ddBNIRL-S principle, the method accounts for the spatial context of the demonstrations
31
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
by assigning each state to the BNIRL subgoal that is targeted by the closest (see metric in
Section 3.2.1) state-action pair— however, these assignments are made after the actual subgoal inference. When compared to ddBNIRL-S, this provides a reference of how much can
be gained by considering the spatial relationship of the data during the inference. For the
experiment, both ddBNIRL-S and BNIRL(-EXT) are augmented with their corresponding
action sampling stages (Section 4.4) since the action sequences of the expert are discarded
from the data set, in order to enable a fair comparison to the remaining algorithms.
Figure 9 shows the value loss over the size of the demonstration set for different reward settings. For small NR, both BNIRL(-EXT) and ddBNIRL-S significantly outperform
the reference methods. This is because the sparse reward structure allows for an efficient
subgoal-based encoding of the expert behavior, which enables the algorithms to reconstruct
the policy even from minimal amounts of demonstration data. However, the BNIRL(-EXT)
solutions drastically deteriorate for denser reward structures. In particular, we observe a
clear difference in performance between the cases where
(i) we do not account for the spatial information in the partitioning model (BNIRL),
(ii) include it in a post-processing step (BNIRL-EXT), and
(iii) exploit it during the inference itself (ddBNIRL-S),
which demonstrates the importance of processing the context information. Most tellingly,
ddBNIRL-S outperforms the baseline methods even in the dense reward regimes, although
the subgoal-based encoding loses its efficiency here. In fact, the results reveal that the
proposed approach combines the merits of both model types, i.e., the sample efficiency of
the intentional models (max-margin/max-entropy) required for small data set sizes, as well
as the asymptotic accuracy and fully probabilistic nature of the subintentional Bayesian
framework (BPR).4
5.3 Robot Experiment
In the next experiment, we test the ddBNIRL framework on various real data sets, which we
recorded on a KUKA lightweight robotic arm (Figure 10) via kinesthetic teaching. Videos
of all demonstrated tasks can be found at http://www.spg.tu-darmstadt.de/jmlr2018.
The system has seven degrees of freedom, corresponding to the seven joints of the arm.
Each joint is equipped with a torque sensor and an angle encoder, providing recordings
of joint angles, velocities and accelerations. For our experiments, we only consider the
xy-Cartesian coordinates spanning the transverse plane, which we computed from the raw
measurements using a forward kinematic model. The data was recorded at a sampling rate
of 50 Hz and further downsampled by a factor of 10, yielding an effective sample rate of
5 Hz, which provided a sufficient temporal resolution for the considered scenario.
The goal of the experiment is to learn a set of high-level intentional models for the
recorded behavior types by partitioning the data sets into meaningful parts that can be used
to predict the desired motion direction of the expert. For simplicity and to demonstrate the
4. The comparably large loss of BPR for small data set sizes can be explained by the fact that the framework
is based on a more general policy model in which the expert behavior is assumed to be inherently
stochastic, in contrast to the here considered setting where stochasticity arises merely a consequence of
suboptimal decision-making.
32
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
Figure 10: KUKA lightweight robotic arm.
algorithm’s robustness to modeling errors, we adopt the simplistic transition model from
Section 5.1 with the same action set containing the eight (inter-)cardinal motion directions.
The high measurement accuracy of the end-effector position allows us to extract these highlevel actions directly from the raw data, i.e., by selecting the directions with the smallest
angular deviations from the ground truth (see example in Figure 11a). The underlying state
space is obtained by discretizing the part of the coordinate range that is covered by the
measurements into blocks of predefined size (see next sections for details). Apart from this
discretization step and the aforementioned data downsampling, no preprocessing is applied.
5.3.1 Spatial Partitioning
First, we consider a case where the expert behavior can be described using a time-invariant
policy model, which we aspire to capture via ddBNIRL-S. For our example, we consider the
“Cycle” task shown in the video and in Figure 14. The same setting is analyzed using the
time-variant ddBNIRL-T model in Section 5.3.2, which allows a direct comparison of the
two approaches. The task consists in approaching a number of target positions, indicated
by a set of markers (see video), before eventually returning to the initial state. The setting
can be regarded as a real-world version of the “Loop” problem described by Michini and
How (2012). As explained in their paper, classical IRL algorithms that rely on a global
state-based reward model (such as max-margin IRL and max-entropy IRL) completely fail
on this problem, due to the periodic nature of the task.
Figure 11a shows the downsampled and discretized data set (black arrows) obtained
from four expert trajectories (white lines). For visualization purposes, the discretization
block size is chosen as 2 cm×2 cm, giving rise to a total of 18 × 24 = 432 states. As in
the top row of Figure 8 (ddBNIRL-S), the coloring of the background indicates the learned
partitioning structure, computed from a low-temperature posterior sample. We observe
that the found state clusters clearly reveal the modular structure of the task, providing an
intuitive and interpretable explanation of the data. However, although the induced policy
33
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
(a) expert data & sample partitioning (b) MAP policy estimate
(c) uncertainty estimate (d) final predictive model
Figure 11: Results of ddBNIRL-S on the “Cycle” task. (a) Raw measurements (white
lines) and discretized demonstration data (black arrows). The coloring of the
background indicates a partitioning structure obtained from a low-temperature
posterior sample. (b) Maximum a posteriori policy estimate. (c) Visualization
of the model’s prediction uncertainty at all system states, represented by the
entropies of the corresponding posterior predictive action distributions. Dark
background indicates high uncertainty. (d) Illustration of the final predictive
model, comprising both the action information and the prediction uncertainty.
model (Figure 11b) smoothly captures the cyclic nature of the task, we cannot expect to
obtain trustworthy predictions in the center region of the state space, due to the lack of
additional demonstration data that would be required to unveil the expert’s true intention
in that region. Clearly, a point estimate such as the shown MAP policy cannot reflect this
prediction uncertainty since it does not carry any confidence information. Yet, following
a Bayesian approach, we can naturally quantify the prediction uncertainty at any query
state s
∗ based on the shape of the corresponding posterior predictive action distribution
p(a
∗
| s
∗
, D). A straightforward option is, for example, to consider the prediction entropy,
34
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
defined as
H(s
∗
) :=
X
a
∗∈A
p(a
∗
| s
∗
, D) log p(a
∗
| s
∗
, D).
In order to obtain an unbiased approximation of the true non-tempered predictive distribution p(a
∗
| s
∗
, D), we run a second Gibbs chain with unaltered temperature in parallel to the
tempered chain. The resulting entropy estimates are summarized in an uncertainty map
(Figure 11c), which we overlaid on the original prediction result to produce the final figure
shown at the bottom right. Note that the obtained posterior uncertainty information of the
model can be further used in an active learning setting, as demonstrated in Section 5.4.
5.3.2 Temporal Partitioning
Next, we turn our attention to the ddBNIRL-T model, which we test against the vanilla
BNIRL approach. For this purpose, we consider the full collection of tasks shown in the
supplementary video, which comprises different time-dependent expert behaviors of varying
complexity. In order to obtain a quantitative performance measure for our evaluation, we
conducted a manual segmentation of all recorded trajectories, thereby creating a set of
ground truth subgoal labels for all observed decision times. The result of this segmentation
step is depicted in the appendix (Figure 14, center column). Note that the ground truth
subgoals are assumed immediately at the ends of the corresponding segments.
The left and right column of Figure 14 show, respectively, the partitioning structures
found by BNIRL and ddBNIRL-T, based on a uniform subgoal prior distribution with
support at the visited states. The underlying state discretization block size is chosen as
1 cm×1 cm, as indicated by the regular grid in the background. A simple visual comparison
of the learned structures reveals the clear superiority of ddBNIRL-T over vanilla BNIRL
on this problem set.
For our quantitative comparison, we consider the instantaneous subgoal localization
errors of the two models over the entire course of a demonstration (Figure 12). Herein,
the instantaneous localization error for a given state-action pair is measured in terms of
the Euclidean distance between the grid location of the ground truth subgoal associated
with the pair and the corresponding subgoal location predicted by the model. Note that the
predictions of both models are based on the entire trajectory data of an experiment, considering the full posterior information after completing the demonstration. For ddBNIRL-T,
which does not directly return a subgoal location estimate but instead provides access to the
full subgoal posterior distribution, the error is computed with respect to the MAP subgoal
locations {gˆk},
gˆk := arg max
gk∈supp(pg)
p(gk | D,˜c),
using the ddBNIRL-T version of Equation (12)— see note at the beginning of Section 4.
The black dots in the figure indicate the time instants where the ground truth annotations change. At those time instants, we observe significantly increased localization errors
for both models, which can be explained by the fact that the ground truth annotation is
somewhat subjective around the switching points (see labeling in Figure 14). Also, we
notice a comparably high error at the beginning and the end of some trajectories, which
stems from the imperfect synchronization between the recording interval and the execution
35
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
0
10
20
30
40
50
Figure 12: Instantaneous subgoal localization errors of ddBNIRL-T (upper rows) and
BNIRL (lower rows) for the eight recorded data sets. The black dots indicate
the subgoal switching times in the corresponding ground truth subgoal annotation, depicted in the center column of Figure 14. On average, the localization
error of ddBNIRL-T is significantly lower compared to the BNIRL approach, as
indicated by the median values shown on the left. For a qualitative comparison
of the underlying partitioning structures, see Appendix A.
of the task (recall that we skipped the corresponding data preprocessing step). Hence, to
capture the accuracy in a single figure of performance, we consider the median localization
error of each time series, as it masks out these outliers and provides a more realistic error
quantification than the sample mean. The obtained values are shown next to the error
plots in Figure 12, indicating that the ddBNIRL-T localization error is in the range of the
discretization interval in most cases. Compared to BNIRL, the proposed method yields an
error reduction of more than 70% on average.
5.4 Active Learning
In Section 5.3, we saw that the posterior predictive action distribution p(a
∗
| s
∗
, D) provides
a natural way to quantify the prediction uncertainty of our model at any given query state s
∗
.
This offers the opportunity to apply the framework in an active learning setting, since the
36
IRL via Nonparametric Spatio-Temporal Subgoal Modeling
0 200 400 600 800 1000
10-4
10-3
10-2
10-1
100
Figure 13: Comparison between random data acquisition and active learning in the random
MDP scenario. Shown are the empirical mean value losses of the obtained policy
models over the number of data queries, obtained from 200 Monte Carlo runs.
induced uncertainty map (see example in Figure 11c) indicates in which parts of the state
space the trained model can process further instructions from the expert most effectively.
To demonstrate the basic procedure, we reconsider the random MDP problem from
Section 5.2 in an active learning context, where we compare different active strategies with
the previously used random data acquisition scheme. As an initialization for the learning
procedure, we request a single state-action pair (s1, a1) from the demonstrator, which we
store in the initial data set D1 := {(s1, a1)}. Herein, the state s1 is drawn uniformly at
random from S and the action a1 ∼ πE(a | s1) is generated according to the noisy expert
policy πE : A × S → [0, 1] described in Section 5.2. Continuing from this point, each of
the considered active learning algorithms requests a series of subsequent demonstrations
((s2, a2),(s3, a3), . . .), inducing a sequence of data sets (D1, D2, D3, . . .), where the next
query state sd+1 is chosen according to the specific data acquisition criterion facq of the
algorithm evaluated on the current predictive model,
Dd+1 = Dd ∪ {(sd+1, ad+1)}
sd+1 = arg max
s
∗∈S
facq
p(a
∗
| s
∗
, Dd)

ad+1 ∼ πE(a | sd+1).
The purpose of the acquisition criterion is to assess the uncertainty of the model at all possible query states, so that the next demonstration can be requested in the high uncertainty
region of the state space (see uncertainty sampling, Settles, 2010). For our experiment, we
consider the following three common choices,
• highest entropy: facq(p) := −
P
a∈A
p(a) log p(a),
• least confidence: facq(p) := 1 − max
a∈A
p(a),
• smallest margin: facq(p) := p(ˆa2) − p(ˆa1),
37  
Soˇ ˇsic, Rueckert, Peters, Zoubir and Koeppl ´
where ˆa1 and ˆa2 denote, respectively, the most likely and second most likely action according
to the considered distribution p, i.e., ˆa1 := arg maxa∈A p(a) and ˆa2 := arg maxa∈A\aˆ1
p(a).
At each iteration, we compute the value losses (Equation 20) of the induced policy models
and compare them with the corresponding loss obtained from random data acquisition. The
resulting curves are delineated in Figure 13. As expected, the learning speed of the model
is significantly improved under all active acquisition schemes, which reduces the number of
expert demonstrations required to successfully learn the observed task.
6. Conclusion
Building upon the principle of Bayesian nonparametric inverse reinforcement learning, we
proposed a new framework for data-efficient IRL that leverages the context information of
the demonstration set to learn a predictive model of the expert behavior from small amounts
of training data. Central to our framework are two model architectures, one designed for
learning spatial subgoal plans, the other to capture time-varying intentions. In contrast to
the original BNIRL model, both architectures explicitly consider the covariate information
contained in the demonstration set, giving rise to predictive models that are inherently
robust to demonstration noise. While the original BNIRL model can be recovered as a
special case of our framework, the conducted experiments show a drastic improvement over
the vanilla BNIRL approach in terms of the achieved subgoal localization accuracy, which
stems from both an improved likelihood model and a context-aware clustering of the data.
Most notably, our framework outperforms all tested reference methods in the analyzed
benchmark scenarios while it additionally captures the full posterior information about
the learned subgoal representation. The resulting prediction uncertainty about the expert
behavior, reflected by the posterior predictive action distribution, provides a natural basis
to apply our method in an active learning setting where the learning system can request
additional demonstration data from the expert.
The current limitation of our approach is that both presented architectures require an
MDP model with discrete state and action space. While the subgoal principle carries over
straightforwardly to continuous metric spaces, the construction of the likelihood model
becomes difficult in these environments as it requires knowledge of the optimal state-action
value functions for all potential subgoal locations. However, for BNIRL, there exist several
ways to approximate the likelihood in these cases (Michini et al., 2013) and the same
concepts apply equally to ddBNIRL. Thus, an interesting future study would be to compare
the efficacy of both model types on larger problems involving continuous spaces, where it
appears even more natural to follow a distance-based approach.
