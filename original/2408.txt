As an emerging research topic, online class imbalance learning often combines the challenges of both class imbalance and concept drift. It deals with data streams having very skewed class distributions, where concept drift may occur. It has recently received increased research attention; however, very little work addresses the combined problem where both class imbalance and concept drift coexist. As the first systematic study of handling concept drift in class-imbalanced data streams, this paper first provides a comprehensive review of current research progress in this field, including current research focuses and open challenges. Then, an in-depth experimental study is performed, with the goal of understanding how to best overcome concept drift in online learning with class imbalance.

SECTION I.Introduction
With the wide application of machine learning algorithms to the real world, class imbalance and concept drift have become crucial learning issues. Applications in various domains such as risk management [1], anomaly detection [2], software engineering [3], and social media mining [4] are affected by both class imbalance and concept drift. Class imbalance happens when the data categories are not equally represented, i.e., at least one category is minority compared with other categories [5]. It can cause learning bias toward the majority class and poor generalization. Concept drift is a change in the underlying distribution of the problem, and is a significant issue specially when learning from data streams [6]. It requires learners to be adaptive to dynamic changes.

Class imbalance and concept drift can significantly hinder predictive performance, and the problem becomes particularly challenging when they occur simultaneously. This challenge arises from the fact that one problem can affect the treatment of the other. For example, drift detection algorithms based on the traditional classification error may be sensitive to the imbalanced degree and become less effective, and class imbalance techniques need to be adaptive to changing imbalance rates; otherwise, the class receiving the preferential treatment may not be the correct minority class at the current moment.

Although there have been papers studying data streams with an imbalanced distribution and data streams with concept drift, respectively, very little work discusses the cases when both class imbalance and concept drift exist. Hoens et al. [7] gave the first overview on the combined issue, but only some chunk-based learning techniques were introduced. Our paper aims to provide a more systematic study of handling concept drift in class-imbalanced data streams using experimental studies. We focus on online (i.e., one-by-one) learning, because it is a more difficult case than chunk-based learning, considering that only a single instance is available at a time. Besides, online learning approaches can be applied to problems where data arrive in chunks, but chunk-based learning approaches cannot be applied to online problems where high speed and memory constraints are present. Online learning approaches are particularly useful for applications that produce high-speed data streams, such as robotic systems and sensor networks [3].

We first give a comprehensive review of current research progress in this field, including problem definitions, problem and approach categorization, performance evaluation, and up-to-date approaches. It reveals new challenges and research gaps. Most existing work focuses on the concept drift in posterior probabilities [i.e., real concept drift [8] and changes in P(y|x) ]. The challenges in other types of concept drifts have not been fully discussed and addressed. Especially, the change in prior probabilities P(y) is closely related to class imbalance and has been overlooked by most existing work. Most proposed concept drift detection approaches are designed for and tested on balanced data streams. Very few approaches aim to tackle class imbalance and concept drift simultaneously. Among limited solutions, it is still unclear which approach is better and when. It is also unknown whether and how applying class imbalance techniques (e.g., resampling methods) affects concept drift detection and online prediction.

To fill in the research gaps, we then provide an experimental insight into how to best overcome concept drift in online learning with class imbalance, by focusing on three research questions.

What are the challenges in detecting each type of concept drift when the data stream is imbalanced?

Among the proposed methods designed for online class imbalance learning with concept drift, which one performs better for which type of concept drift?

Would applying class imbalance techniques (e.g., resampling methods) facilitate concept drift detection and online prediction?

Six recent approaches, drift detection method for online class imbalance (DDM-OCI) [9], linear four-rate (LFR) [10], prequential area under the ROC curve Page–Hinkley (PAUC-PH) [11], [12], OOB [13], RLSACP [14], and ESOS-ELM [15], are compared and analyzed in depth under each of the three fundamental types of concept drifts [i.e., changes in prior probability P(y) , class-conditional probability density function (pdf) p(x|y) , and posterior probability P(y|x) ] in artificial data streams, as well as real-world data sets. To the best of our knowledge, they are the very few methods that are explicitly designed for online learning problems with class imbalance and concept drift so far.

Finally, based on the review and experimental results, we propose several important issues that need to be considered for developing an effective algorithm for learning from imbalanced data streams with concept drift. We stress the importance of studying the mutual effect of class imbalance and concept drift.

The major contributions of this paper include: 1) this is the first comprehensive study that looks into concept drift detection in class-imbalanced data streams; 2) data problems are categorized into different types of concept drifts and class imbalances with illustrative applications; 3) existing approaches are compared and analyzed systematically in each type; 4) pros and cons of each approach are investigated; 5) the results provide guidance for choosing the appropriate technique and developing better algorithms for future learning tasks; and 6) this is also the first work exploring the role of class imbalance techniques in concept drift detection, which sheds light on whether and how to tackle class imbalance and concept drift simultaneously.

The rest of this paper is organized as follows. Section II formulates the learning problem, including a learning framework and detailed problem descriptions and introduction of class imbalance and concept drift individually. Section III reviews the combined issue of class imbalance and concept drift, including example applications and existing solutions. Section IV carries out the experimental study, aiming to find out the answers to the three research questions. Section V draws the conclusions and points out potential future directions.

SECTION II.Online Learning Framework With Class Imbalance and Concept Drift
In data stream applications, data arrive over time in streams of examples or batches of examples. The information up to a specific time step t is used to build/update predictive models, which then predict the new example(s) arriving at time step t+1 . Learning under such conditions needs chunk-based learning or online learning algorithms, depending on the number of training examples available at each time step. According to the most agreed definitions [6], [16], chunk-based learning algorithms process a batch of data examples at each time step, such as the case of daily Internet usage from a set of users; online learning algorithms process examples one by one and the predictive model is updated after receiving each example [17], such as the case of sensor readings at every second in engineering systems. The term “incremental learning” is also frequently used under this scenario. It is usually referred to as any algorithm that can process data streams with certain criteria met [18].

On the one hand, online learning can be viewed as a special case of chunk-based learning. Online learning algorithms can be used to deal with data coming in batches. They both build and continuously update a learning model to accommodate newly available data, and simultaneously maintain its performance on old data, giving rise to the stability-plasticity dilemma [19]. On the other hand, the way of designing online and chunk-based learning algorithms can be very different [6]. Most chunk-based learning algorithms are unsuitable for online learning tasks, because batch learners process a chunk of data each time, possibly using an offline learning algorithm for each chunk. Online learning requires the model being adapted immediately upon seeing the new example, and the example is then immediately discarded, which allows to process high-speed data streams. From this point of view, designing online learning algorithm can be more challenging but so far has received much less attention than the other.

First, the online learner needs to learn from a single data example, so it needs a more sophisticated training mechanism. Second, data streams are often nonstationary (concept drift). The limited availability of training examples at the current moment in online learning hinders the detection of such changes and the application of techniques to overcome the change. Third, it is often seen that data are s class imbalanced in many classification tasks, such as the fault detection task in an engineering system, where the fault is always the minority. Class imbalance aggravates the learning difficulty [5]. This difficulty can be further complicated by a dynamically changing imbalanced distribution [20]. However, there is a severe lack of research addressing the combined issue of class imbalance and concept drift in online learning.

To fill in this research gap, this paper aims at a comprehensive review of the work done to overcome class imbalance and concept drift, a systematic study of learning challenges, and an in-depth analysis of the performance of current approaches. We begin by formalizing the learning problem in this section.

A. Learning Procedure
In supervised online classification, suppose a data generating process provides a sequence of examples (xt,yt) arriving one at a time from an unknown probability distribution pt(x,y) . xt is the input vector belonging to an input space X , and yt is the corresponding class label belonging to the label set Y={c1,…,cN} . We build an online classifier F that receives the new input xt at time step t and then makes a prediction. The predicted class label is denoted by y^t . After some time, the classifier receives the true label yt , used to evaluate the predictive performance and further train the classifier. This whole process will be repeated at the following time steps. It is worth pointing out that we do not assume new training examples always arrive at regular and predefined intervals here. In other words, the actual time interval between time step t and t+1 may be different from the actual time interval between t+1 and t+2 .

One challenge arises when data are class imbalanced. Class imbalance is an important data feature, commonly seen in applications such as spam filtering [21] and fault diagnosis [2], [3]. It is the phenomenon when some classes of data are highly under-represented (i.e., minority) compared with other classes (i.e., majority). For example, if prior probabilities of the classes P(ci)≪P(cj) , then cj is a majority class and ci is a minority class. The difficulty in learning from imbalanced data is that the relatively or absolutely underrepresented class cannot draw equal attention to the learning algorithm, which often leads to very specific classification rules or missing rules for this class without much generalization ability for future prediction. It has been well studied in offline learning [22], and has attracted growing attention in data stream learning in recent years [7].

In many applications, such as energy forecasting and climate data analysis [23], the data generator operates in nonstationary environments. It gives rise to another challenge, called “concept drift.” It means that the pdf of the data generating process is changing over time. For such cases, the fundamental assumption of traditional data mining—the training and testing data are sampled from the same static and unknown distribution—does not hold anymore. Therefore, it is crucial to monitor the underlying changes, and adapt the model to accommodate the changes accordingly.

When both issues exist, the online learner needs to be carefully designed for effectiveness, efficiency, and adaptivity. An online class imbalance learning framework was proposed in [20] as a guide for algorithm design. The framework breaks down the learning procedure into three modules—a class imbalance detector, a concept drift detector, and an adaptive online learner, as illustrated in Fig. 1.


Fig. 1.
Learning framework for online class imbalance learning [20].

Show All

The class imbalance detector reports the current class imbalance status of data streams. The concept drift detector captures concept drifts involving changes in classification boundaries. Based on the information provided by the first two modules, the adaptive online learner determines when and how to respond to the detected class imbalance and concept drift, in order to maintain its performance. The learning objective of an online class imbalance algorithm can be described as “recognizing minority-class data effectively, adaptively, and timely without sacrificing the performance on the majority class” [20].

B. Problem Descriptions
A more detailed introduction about class imbalance and concept drift is given here individually, including the terminology, research focuses, and state-of-the-art approaches. The purpose of this section is to understand the fundamental issues that we need to take extra care of in online class imbalance learning. We also aim at understanding whether and how the current research in class imbalance learning and concept drift detection are individually related to their combined issue elaborated later in Section III, rather than to provide an exhaustive list of approaches in the literature. Among others, we will answer the following questions.

Can existing class imbalance techniques process data streams?

Would existing concept drift detectors be able to handle imbalanced data streams?

1) Class Imbalance:
In class imbalance problems, the minority class is usually much more difficult or expensive to be collected than the majority class, such as the spam class in spam filtering and the fraud class in credit card application. Thus, misclassifying a minority-class example is more costly. Unfortunately, the performance of most conventional machine learning algorithms is significantly compromised by class imbalance, because they assume or expect balanced class distributions or equal misclassification costs. Their training procedure with the aim of maximizing overall accuracy often leads to a high probability of the induced classifier predicting an example as the majority class, and a low recognition rate on the minority class. In reality, it is common to see that the majority class has accuracy close to 100% and the minority class has very low accuracy between 0% and 10% [24]. The negative effect of class imbalance on classifiers, such as decision trees [22], neural networks [25], k-nearest neighbor [26]–[27][28], and SVM [29], [30], has been studied. A classifier that provides a balanced degree of predictive performance for all classes is required. The major research questions in this area are summarized and answered as follows.

a) How do we define the imbalanced degree of data?
It seems to be a trivial question. However, there is no consensus on the definition in the literature. To describe how imbalanced the data are, researchers choose to use the percentage of the minority class in the data set [31], the size ratio between classes [32], or simply a list of the number of examples in each class [33]. The coefficient of variance is used in [34], which is less straightforward. The description of imbalance status may not be a crucial issue in offline learning, but becomes more important in online learning, because there is no static data set in online scenarios. It is necessary to have some measurement automatically describing the up-to-date imbalanced degree and techniques monitoring the changes in class imbalance status. This will help the online learner to decide when and how to tackle class imbalance. The issue of changes in class imbalance status is relevant to concept drift, which will be further discussed in the next section.

To define the imbalanced degree suitable for online learning, a real-time indicator was proposed—time-decayed class size [20], expressing the size percentage of each class in the data stream. It is updated incrementally at each time step using a time decay (forgetting) factor, which emphasizes the current status of data and weakens the effect of old data. Based on this, a class imbalance detector was proposed to determine which classes should be regarded as the minority/majority and how imbalanced the current data stream is, and then used for designing better online classifiers [3], [13]. The merit of this indicator is that it is suitable for data with arbitrary number of classes.

b) When does class imbalance matter?
It has been shown that class imbalance is not the only problem responsible for the performance reduction of classifiers. Classifiers’ sensitivity to class imbalance also depends on the complexity and overall size of the data set. Data complexity comprises issues such as overlapping [35], [36] and small disjuncts [37]. The degree of overlapping between classes and how the minority class examples distribute in data space aggravate the negative effect of class imbalance. The small disjunct problem is associated with the within-class imbalance [38]. Regarding the size of the training data, a very large domain has a good chance that the minority class is represented by a reasonable number of examples, and thus may be less affected by imbalance than a small domain containing very few minority class examples. In other words, the rarity of the minority class can be in a relative or absolute sense in terms of the number of available examples [5].

In particular, Napierala and Stefanowski [39], [40] distinguished and analyzed four types of data distributions in the minority class—safe, borderline, outliers, and rare examples. Safe examples are located in the homogenous regions populated by the examples from one class only; borderline examples are scattered in the boundary regions between classes, where the examples from both classes overlap; rare examples and outliers are singular examples located deeper in the regions dominated by the majority class. Borderline, rare, and outlier data sets were found to be the real source of difficulties in learning imbalanced data sets offline, which have also been shown to be the harder cases in online applications [13]. Therefore, for any developed algorithms dealing with imbalanced data online, it is worth discussing their performance on data with different types of distributions.

c) How can we tackle class imbalance effectively (state-of-the-art solutions)?
A number of algorithms have been proposed to tackle class imbalance at the data and algorithm levels. Data-level algorithms include a variety of resampling techniques, manipulating training data to rectify the skewed class distributions. They oversample minority-class examples (i.e., expanding the minority class), undersample majority-class examples (i.e., shrinking the majority class), or combine both, until the data set is relatively balanced. Random oversampling and random undersampling are the simplest and most popular resampling techniques, where examples are randomly chosen to be added or removed. There are also smart resampling techniques (a.k.a guided resampling). For example, SMOTE [33] is a widely used oversampling method, which generates new minority-class data points based on the similarities between original minority-class examples in the feature space. Other smart oversampling techniques include Borderline-SMOTE [41], ADASYN [42], and MWMOTE [43], to name but a few. Smart undersampling techniques include Tomek links [44], one-sided selection [45], and neighborhood cleaning rule [46]. The effectiveness of resampling techniques has been proved in real-world applications [47]. They work independently of classifiers, and are thus more versatile than algorithm-level methods. The key is to choose an appropriate sampling rate [48], which is relatively easy for two-class data sets, but becomes more complicated for multiclass data sets [49]. Empirical studies have been carried out to compare different resampling methods [31]. Particularly, it is shown that smart resampling techniques are not necessarily superior to random oversampling and undersampling; besides, they cannot be applied to online scenarios directly, because they work on a static data set for the relation among the training examples. Some initial effort has been made recently, to extend smart resampling techniques to online learning [50].

Algorithm-level methods address class imbalance by modifying their training mechanism with the direct goal of better accuracy on the minority class, including one-class learning [51], cost-sensitive learning [52], and threshold methods [53]. They require different treatments for specific kinds of learning algorithms. In other words, they are algorithm dependent, so they are not as widely used as data-level methods. Some online cost-sensitive methods have been proposed, such as CSOGD [54] and RLSACP [14]. They are restricted to the perceptron-based classifiers, and require predefined misclassification costs of classes that may or may not be updated during the online learning.

Finally, ensemble learning (also known as multiple classifier systems) [55] has become a major category of approaches to handling class imbalance [56]. It combines multiple classifiers as base learners and aims to outperform every one of them. It can be easily adapted for emphasizing the minority class by integrating different resampling techniques [57]–[58][59][60] or by making base classifiers cost-sensitive [61]–[62][63][64]. A few ensemble methods are available for online class imbalance learning, such as OOB and UOB [13] applying random oversampling and undersampling in Online Bagging (OB) [65], and WOS-ELM [66] training a set of cost-sensitive online extreme learning machines.

It is worth pointing out that the aforementioned online learning algorithms designed for imbalanced data are unsuitable for nonstationary data streams. They do not involve any mechanism handling drifts that affect classification boundaries, although OOB and UOB can detect and react to class imbalance changes.

d) How do we evaluate the performance of class imbalance learning algorithms?
Traditionally, overall accuracy and error rate are the most frequently used metrics of performance evaluation. However, they are strongly biased toward the majority class when data are imbalanced. Therefore, other performance measures have been adopted. Most studies concentrate on two-class problems. By convention, the minority class is treated to be the positive, and the majority class is treated to be the negative. Table I illustrates the confusion matrix of a two-class problem, producing four numbers on testing data.

TABLE I Confusion Matrix for a Two-Class Problem

From the confusion matrix, we can derive the expressions for recall and precision
recall=precision=TPTP+FN,TPTP+FP.(1)(2)
View Source

Recall (i.e., TP rate) is a measure of completeness—the proportion of positive class examples that are classified correctly to all positive class examples. Precision is a measure of exactness—the proportion of positive class examples that are classified correctly to the examples predicted as positive by the classifier. The learning objective of class imbalance learning is to improve recall without hurting precision. However, improving recall and precision can be conflicting. Thus, F-measure is defined to show the tradeoff between them
Fm=(1+β2)⋅recall⋅precisionβ2⋅precision+recall(3)
View Sourcewhere β corresponds to the relative importance of recall and precision. It is usually set to one. Kubat et al. [45] proposed to use G-mean to replace overall accuracy
Gm=TPTP+FN×TNTN+FP−−−−−−−−−−−−−−−−−−√.(4)
View Source

It is the geometric mean of positive accuracy (i.e., TP rate) and negative accuracy (i.e., TN rate). A good classifier should have high accuracies on both classes and, thus, a high G-mean.

According to [5], any metric that uses values from both rows of the confusion matrix for addition (or subtraction) will be inherently sensitive to class imbalance. In other words, the performance measure will change as class distribution changes, even though the underlying performance of the classifier does not. This performance inconsistency can cause problems when we compare different algorithms over different data sets. Precision and F-measure, unfortunately, are sensitive to the class distribution. Therefore, recall and G-mean are better options.

To compare classifiers over a range of sample distributions, the area under the ROC curve (AUC) is the best choice. An ROC curve depicts all possible tradeoffs between TP rate and FP rate, where FPrate = FP/(TN + FP). TP rate and FP rate can be understood as the benefits and costs of classification with respect to data distributions. Each point on the curve corresponds to a single tradeoff. A better classifier should produce an ROC curve closer to the top-left corner. AUC represents an ROC curve as a single scalar value by estimating the area under the curve, varying in [0, 1]. It is insensitive to the class distribution, because both TP rate and FP rate use values from only one row of the confusion matrix. AUC is usually generated by varying the classification decision threshold for separating positive and negative classes in the testing data set [67], [68]. In other words, calculating AUC requires a set of confusion matrices. Therefore, unlike other measures based on a single confusion matrix, AUC cannot be used as an evaluation metric in online learning without memorizing data. Although a recent study has modified AUC for evaluating online classifiers [11], it still needs to collect recently received examples.

The properties of the above measures are summarized in Table II. They are defined under the two-class context. They cannot be used to evaluate multiclass data directly, except for recall. Their multiclass versions have been developed [69]–[70][71]. The “multiclass” and “online” columns in Table II show whether the corresponding measure can be used directly without modification in multiclass and online data scenarios.

TABLE II Performance Evaluation Measures for Class Imbalance Problems

2) Concept Drift:
Concept drift is said to occur when the joint probability P(x,y) changes [8], [72], [73]. The key research topics in this area include the following.

a) How many types of concept drifts are there?
Which type is more challenging? Concept drift can manifest three fundamental forms of changes corresponding to the three major variables in Bayes’ theorem [74]: 1) a change in prior probability P(y) ; 2) a change in class-conditional pdf p(x|y) ; and 3) a change in posterior probability P(y|x) . The three types of concept drifts are illustrated in Fig. 2, comparing with the original data distribution shown in Fig. 2(a).


Fig. 2.
Illustration of three concept drift types. (a) Original distribution. (b) P(y) drift. (c) p(x|y) drift. (d) P(y|x) drift.

Show All

Fig. 2(b) shows the P(y) type of concept drift without affecting p(x|y) and P(y|x) . The decision boundary remains unaffected. The prior probability of the circle class is reduced in this example. Such change can lead to class imbalance. A well-learnt discrimination function may drift away from the true decision boundary, due to the imbalanced class distribution.

Fig. 2(c) shows the p(x|y) type of concept drift without affecting P(y) and P(y|x) . The true decision boundary remains unaffected. Elwell and Polikar [75] claimed that this type of drift is the result of an incomplete representation of the true distribution in current data, which simply requires providing supplemental data information to the learning model.

Fig. 2(d) shows the P(y|x) type of concept drift. The true boundary between classes changes after the drift, so that the previously learnt discrimination function does not apply any more. In other words, the old function becomes unsuitable or partially unsuitable, and the learning model needs to be adapted to the new knowledge.

The posterior distribution change clearly indicates the most fundamental change in the data generating function. This is classified as real concept drift. The other two types belong to virtual concept drift [7], which does not change the decision (class) boundaries. In practice, one type of concept drift may appear in combination with other types.

Existing studies primarily focus on the development of drift detection methods and techniques to overcome the real drift. There is a significant lack of research on virtual drift, which can also deteriorate classification performance. As illustrated in Fig. 2(b), even though these types of drifts do not affect the true decision boundaries, they can cause a well-learnt decision boundary to become unsuitable. Unfortunately, the current techniques for handling real drift may not be suitable for virtual drift, because they present very different learning difficulties and require different solutions. For instance, the methods for handling real drift often choose to reset and retrain the classifier, in order to forget the old concept and better learn the new concept. This is not an appropriate strategy for data with virtual drift, because the examples from previous time steps may still remain valid and help the current classification in virtual drift cases. It would be more effective and efficient to calibrate the existing classifier than retraining it. Besides, techniques for handling real drift typically rely on feedback about the performance of the classifier, while techniques for handling virtual drift can operate without such feedback [8]. From our point of view, all three types are equally important. Particularly, the two virtual types require more research effort than currently dedicated work by our community. A systematic study of the challenges in each type will be given in Section IV.

Concept drift has further been characterized by its speed, severity, cyclical nature, etc. A detailed and mutually exclusive categorization can be found in [73]. For example, according to speed, concept drift can be either abrupt, when the generating function is changed suddenly (usually within one time step), or gradual, when the distribution evolves slowly over time. They are the most commonly discussed types in the literature, because the effectiveness of drift detection methods can vary with the drifting speed. While most methods are quite successful in detecting abrupt drifts, as future data are no longer related to old data [76], gradual drifts are often more difficult, because the slow change can delay or hide the hint left by the drift. We can see some drift detection methods specifically designed for gradual concept drift, such as early drift detection method [77].

b) How can we tackle concept drift effectively (state-of-the-art solutions)?
There is a wide range of algorithms for learning in nonstationary environments. Most of them assume and specialize in some specific types of concept drifts, although real-world data often contain multiple types. They are commonly categorized into two major groups: active versus passive approaches, depending on whether an explicit drift detection mechanism is employed. Active approaches (also known as trigger-based approaches) determine whether and when a drift has occurred before taking any actions. They operate based on two mechanisms—a change detector aiming to sense the drift accurately and timely, and an adaptation mechanism aiming to maintain the performance of the classifier by reacting to the detected drift. Passive approaches (also known as adaptive classifiers) evolve the classifier continuously without an explicit trigger reporting the drift. A comprehensive review of up-to-date techniques tackling concept drift is given by Ditzler et al. [16]. They further organize these techniques based on their core mechanisms, summarized in Table III. Table III will help us to understand how online class imbalance algorithms are designed, which will be introduced in detail in Section III. There exist other ways to classify the proposed algorithms, such as Gama et al.’s taxonomy [8] based on the four modules of an adaptive learning system and Webb et al.’s quantitative characterization [78]. This paper adopts the one proposed in [16] for its simplicity.

TABLE III Categorization of Concept Drift Techniques (See [16] for the Full List of Techniques Under Each Category)

The best algorithm varies with the intended applications. A general observation is that, while active approaches are quite effective in detecting abrupt drift, passive approaches are very good at overcoming gradual drift [16], [75]. It is worth noting that most algorithms do not consider class imbalance. It is unclear whether they will remain effective if data become imbalanced. For example, some algorithms determine concept drift based on the change in the classification error, including OLIN [79], DDM [80], and PERM [81]. As we have explained in Section II-B1), the classification error is sensitive to the imbalance degree of data, and does not reflect the performance of the classifier very well when there is class imbalance. Therefore, these algorithms may not perform well when concept drift and class imbalance occur simultaneously. Some recent papers tried to tackle this issue using other performance metrics that are more robust to the imbalance degree. More details will be given in Section III. Some other algorithms are specifically designed for data streams coming in batches, such as AUE [82] and the Learn++ family [75]. These algorithms cannot be applied to online cases directly.

c) How do we evaluate the performance of concept drift detectors and online classifiers?
To fully test the performance of drift detection approaches (especially an active detector), it is necessary to discuss both data with artificial concept drifts and real-world data with unknown drifts. Using data with artificial concept drifts allows us to easily manipulate the type and timing of concept drifts, so as to obtain an in-depth understanding of the performance of approaches under various conditions. Testing on data from real-world problems helps us to understand their effectiveness from the practical point of view, but the information about when and how concept drift occurs is unknown in most cases. The following aspects are usually considered to assess the accuracy of active drift detectors. Their measurement is based on data with artificial concept drifts where drifts are known.

True Detection Rate (TDR): It is the possibility of detecting the true concept drift. It shows the accuracy of the detection approach.

False Alarm (FA) Rate: It is the possibility of reporting a concept drift that does not exist (false-positive rate). It characterizes the costs and reliability of the detection approach.

Delay of Detection (DoD): It is an estimate of how many time steps are required on average to detect a drift after the actual occurrence. It reflects how much time would be taken before the drift is detected.

Wang and Abraham [10] use a histogram to visualize the distribution of detection points from the drift detection approach over multiple runs. It reflects all the three aspects above in one plot. It is worth nothing that there are tradeoffs between these measures. For example, an approach with a high TDR may produce a high FA rate. A very recent algorithm, hierarchical change-detection tests, was proposed to explicitly deal with the tradeoff [83].

After the performance of drift detection approaches is better understood, we need to quantify the effect of those detections on the performance of predictive models. All the performance metrics introduced in the previous section of “class imbalance” can be used. The key question here is how to calculate them in the streaming settings with evolving data. The performance of the classifier may get better or worse every now and then. There are two common ways to depict such performance over time—holdout and prequential evaluation [8].

Holdout evaluation is mostly used when the testing data set (holdout set) is available in advance. At each time step or every few time steps, the performance measures are calculated based on the valid testing set, which must represent the same data concept as the training data at that moment. However, this is a very rigorous requirement for data from real-world applications.

In prequential evaluation, data received at each time step are used for testing before they are used for training. From this, the performance measures can be incrementally updated for evaluation and comparison. This strategy does not require a holdout set, and the model is always tested on unseen data.

When the data stream is stationary, the prequential performance measures can be computed based on the accumulated sum of a loss function from the beginning of the training. However, if the data stream is evolving, the accumulated measure can mask the fluctuation in performance and the adaptation ability of the classifier. For example, consider that an online classifier correctly predicts 90 out of 100 examples received so far (90% accuracy on data with the original concept). Then, an abrupt concept drift occurs at time step 101, which makes the classifier only correctly predict 3 out of 10 examples from the new concept (30% accuracy on data with the new concept). If we use the accumulated measure based on all the historical data, the overall accuracy will be 93/110, which seems to be high but does not reflect the true performance on the new data concept. This problem can be solved using a sliding window or a time-based fading factor that weighs observations [84].

SECTION III.Overcoming Class Imbalance and Concept Drift Simultaneously
Following the review of class imbalance and concept drift in Section II, this section reviews the combined issue, including example applications and existing solutions. When both exist, one problem affects the treatment of the other. For example, the drift detection algorithms based on the traditional classification error may be sensitive to imbalanced degree and become less effective; the class imbalance techniques need to be adaptive to changing P(y) ; otherwise, the class receiving the preferential treatment may not be the correct minority class at the current moment. Therefore, their mutual effect should be considered during the algorithm design.

A. Illustrative Applications
The combined problems of concept drift and class imbalance have been found in many real-world applications. Three examples are given here, to help us understand each type of concept drift.

1) Environment Monitoring With P(y) Drift:
Environment monitoring systems usually consist of various sensors generating streaming data in high speed. Real-time prediction is required. For example, a smart building has sensors deployed to monitor hazardous events. Any sensor fault can cause catastrophic failures. Machine learning algorithms can be used to build models based on the sensor information, aiming to predict faults in sensors accurately and timely [3]. First, the data are characterized by class imbalance, because obtaining a fault in such systems can be very expensive. Examples representing faults are the minority. Second, the number of faults varies with the faulty condition. If the damage gets worse over time, the faults will occur more and more frequently. It implies a prior probability change, a type of virtual concept drift.

2) Spam Filtering With p (x|y ) Drift:
Spam filtering is a typical classification problem involving class imbalance and concept drift [85]. First of all, the spam class is the minority and suffers from a higher misclassification cost. Second, the spammers are actively working on how to break through the filter. It means that the adversary actions are adaptive. For example, one of the spamming behaviors is to change email content and presentation in disguise, implying a possible class-conditional pdf ((px|y )) change [8].

3) Social Media Analysis With P (y|x ) Drift:
In social media (e.g., Twitter and Facebook), consider the example where a company would like to make relevant product recommendations to people who have shown some type of interest in their tweets. Machine learning algorithms can be used to discover who is interested in the product based on the tweets [86]. The number of users who have shown the interest is always very small. Thus, this is a minority class. Meanwhile, users’ interest changes from time to time. Users may lose their interest in the current trendy product very quickly, causing posterior probability ((Py|x )) changes.

Although the above examples are associated with only one type of concept drift, different types often coexist in real-world problems, which are hard to know in advance. For the example of spam filtering, which email belongs to spam also depends on users’ interpretation. Users may relabel a particular category of normal emails as spam, which indicates a posterior probability change.

B. Approaches to Tackling Both Class Imbalance
and Concept Drift Some research efforts have been made to address the joint problem of concept drift and class imbalance, due to the rising need from practical problems [1], [87]. Uncorrelated Bagging is one of the earliest algorithms, which builds an ensemble of classifiers trained on a more balanced set of data through resampling and overcomes concept drift passively by weighing the base classifier based on their discriminative power [88]–[89][90]. Selectively recursive approaches SERA [91] and REA [92] use similar ideas to Uncorrelated Bagging of building an ensemble of weighted classifiers, but with a “smarter” oversampling technique. Learn++.CDS and Learn++.NIE are more recent algorithms, which tackle class imbalance through the oversampling technique SMOTE [33] or a subensemble technique, and overcome concept drift through a dynamic weighting strategy [76]. HUWRS.IP [93] improves HUWRS [94] to deal with imbalanced data streams by introducing an instance propagation scheme based on a Naïve–Bayes classifier, and using Hellinger distance as a weighting measure for concept drift detection. The Hellinger weight for drift detection is calculated as the average of the minority-class and majority-class Hellinger distance between the two feature distributions. It guarantees equal weight to the Hellinger distance between the minority-class and majority-class distributions. The instance propagation scheme selects old minority-class examples that are relevant to the current data concept. It avoids the problem of using misleading examples from the old data concept. However, relevant examples may not exist in some rapid drifting cases. Thus, Hellinger distance decision tree was proposed to use Hellinger distance as the decision tree splitting criteria that is imbalance-insensitive [95]. All these approaches belong to chunk-based learning algorithms. Their core techniques work when a batch of data is received at each time step, i.e., they are unsuitable for online processing. Developing a true online algorithm for concept drift is very challenging because of the difficulties in measuring minority-class statistics using only one example at a time [16].

To detect concept drift in an online imbalanced scenario, a few methods have been proposed recently. DDM-OCI [9] is one of the very first algorithms detecting concept drift actively in imbalanced data streams online. It monitors the reduction in minority-class recall (i.e., true positive rate). If there is a significant drop, a drift will be reported. It was shown to be effective in cases when minority-class recall is affected by the concept drift, but not when the majority class is mainly affected. An LFR approach was then proposed to improve DDM-OCI, which monitors four rates from the confusion matrix—minority-class recall and precision and majority-class recall and precision, with statistically supported bounds for drift detection [10]. If any of the four rates exceeds the bound, a drift will be confirmed. Instead of tracking several performance rates for each class, PAUC [11], [12] was proposed as an overall performance measure for online scenarios, and was used as the concept drift indicator in PH test [97]. However, it needs access to historical data. DDM-OCI, LFR, and PAUC-based PH test are active drift detectors designed for imbalanced data streams, and are independent of classification algorithms. They aim at concept drift with classification boundary changes by default. Therefore, if a concept drift is reported, they will reset and retrain the online model. Although these drift detectors are designed for imbalanced data, they themselves do not involve any class imbalance techniques, such as resampling, to adjust the decision boundary of the online model. It is still unclear how they perform when working with class imbalance techniques.

Besides the above active approaches, the perceptron-based algorithms RLSACP [14], ONN [96], and ESOS-ELM [15] adapt the classification model to nonstationary environments passively, and involve mechanisms to overcome class imbalance. RLSACP and ONN are single-model approaches with the same general idea. Their error function for updating the perceptron weights is modified, including a forgetting function for model adaptation and an error weighting strategy as the class imbalance treatment. The forgetting function has a predefined form, allowing the old data concept to be forgotten gradually. The error weights in RLSACP are incrementally updated based either on the classification performance or the imbalance rate from recently received data. It was shown that weight updating based on the imbalance rate leads to better performance.

ESOS-ELM is an ensemble approach, maintaining a set of online sequential extreme learning machines (OS-ELM) [98]. For tackling class imbalance, resampling is applied in a way that each OS-ELM is trained with approximately equal number of minority- and majority-class examples. For tackling concept drift, voting weights of base classifiers are updated according to their performance G-mean on a separate validation data set from the same environment as the current training data. In addition to the passive drift detection technique, ESOS-ELM includes an independent module—ELM-store, to handle recurring concept drift. ELM-store maintains a pool of weighted extreme learning machines (WELM) [66] to retain old information. It adopts a threshold-based technique and hypothesis testing to detect abrupt and gradual concept drift actively. If a concept drift is reported, a new WELM will be built and kept in ELM-store. If any stored model performs better than the current OS-ELM ensemble, indicating a possible recurring concept, it will be introduced in the ensemble. ESOS-ELM assumes the imbalance rate is known in advance and fixed. It needs a separate data set for initializing OS-ELMs and WELMs, which must include examples from all classes. It is also necessary to have validation data sets reflecting every data concept for concept drift detection, which can be a quite restrictive requirement for real-world data.

With a different goal of concept drift detection from the above, a class imbalance detection (CID) approach was proposed, aiming at P(y) changes [20]. It reports the current imbalance status and provides information of which classes belong to the minority and which classes belong to the majority. Particularly, a key indicator is the real-time class size w(t)k , the percentage of class ck at time step t . When a new example xt arrives, w(t)k is incrementally updated by the following equation [20]:
w(t)k=θw(t−1)k+(1−θ)[(xt,ck)],(k=1,…,N)(5)
View Source

where [(xt,ck)]=1 if the true class label of xt is ck , and 0 otherwise. θ (0<θ<1) is a predefined time decay (forgetting) factor, which reduces the contribution of older data to the calculation of class sizes along with time. It is independent of learning algorithms, so it can be used with any type of online classifiers. For example, it has been used in OOB and UOB [13] for deciding the resampling rate adaptively and overcoming class imbalance effectively over time. OOB and UOB integrate oversampling and undersampling, respectively, into ensemble algorithm OB [65]. Oversampling and undersampling are one of the simplest and most effective techniques of tackling class imbalance [31].

The properties of the above online approaches are summarized in Table IV, answering the following six questions in order.

How do they handle concept drift (the type based on the categorization in Table III)?

Do they involve any class imbalance technique to improve the predictive performance of online models, in addition to concept drift detection?

Do they need access to previously received data?

Do they need additional data sets for initialization or validation?

Can they handle data streams with more than two classes (multiclass data)?

Which type of concept drift can it deal with?

TABLE IV Online Approaches to Tackling Concept Drift and Class Imbalance, and Their Properties

SECTION IV.Performance Analysis
With a complete review of online class imbalance learning, we aim at a deep understanding of concept drift detection in imbalanced data streams and the performance of existing approaches introduced in Section III-B. Three research questions will be looked into through experimental analysis. First, what are the difficulties in detecting each type of concept drift? Little work has given separate discussions on the three fundamental types of concept drifts, especially the P(y) drift. It is important to understand their differences, so that the most suitable approaches can be used for the best performance. Second, among existing approaches designed for imbalanced data streams with concept drift, which approach is better and when? Although a few approaches have been proposed for the purpose of overcoming concept drift and class imbalance, it is still unclear how well they perform for each type of concept drift. Third, whether and how do class imbalance techniques affect concept drift detection and online prediction? No study has looked into the mutual effect of applying class imbalance techniques and concept drift detection methods. Understanding the role of class imbalance techniques will help us to develop more effective concept drift detection methods for imbalanced data.

A. Data Sets
For an accurate analysis and comparable results, we choose two most commonly used artificial data generators, SINE1 [80] and SEA [99], to produce imbalanced data streams containing three simulated types of concept drifts. In SINE1, each generated point has two attributes (x1,x2) , uniformly distributed in [0, 1]. The concept is decided by where the point is located (above the sin function or not). In SEA, each sample has three attributes x1 , x2 , and x3 with values between 0 and 10. Only the first two attributes are relevant. The class label is determined by a threshold.

This is one of the very few studies that individually discuss P(y) , p(x|y) , and P(y|x) types of concept drifts in depth. In addition, each generator produces two data streams with a different drifting speed—abrupt and gradual drifts. The drifting speed is defined as the inverse of the time taken for a new concept to completely replace the old one [73]. According to speed, drifts can be either abrupt, when the generating function is changed completely in only one time step, or gradual, otherwise. The data streams with a gradual concept drift are denoted by ‘g’ in the following experiment, i.e., SINE1g [77] and SEAg. Every data stream has 3000 time steps, with one concept drift starting at time step 1501. The new concept in SINE1 and SEA fully takes over the data stream from time step 1501; the concept drift in SINE1g and SEAg takes 500 time steps to complete, which means that the new concept fully replaces the old one from time step 2001. The detailed settings for generating each type of concept drift are included in the individual sections.

After the detailed analysis of the three types of concept drifts, three real-world data sets are included in our experiment with unknown concept drift, which are PAKDD 2009 credit card data (PAKDD) [100], Weather data [76], and UDI TweeterCrawl data [86]. Data in PAKDD are collected from the private label credit card operation of a Brazilian retail chain. The task of this problem is to identify whether the client has a good or bad credit. The “bad” credit is the minority class, taking 19.75% of the provided modelling data. Because the data have been collected from a time interval in the past, gradual market change occurs. The Weather data set aims to predict whether rain precipitation was observed on each day, with inherent seasonal changes. The class of “rain” is the minority, taking 31% of the data set. The original Tweet data include 50 million tweets posted mainly from 2008 to 2011. The task is to predict the tweet topic. We choose a time interval, containing 8774 examples and covering seven tweet topics [101]. Then, we further reduce it to two-class data using only two out of seven topics for our experiment. These real-world data will help us to understand the effectiveness of existing concept drift and class imbalance approaches in practical scenarios, which usually have more complex data distributions and concept drift.

B. Experimental and Evaluation Settings
The approaches listed in Table IV, which are explicitly designed for the combined problem of class imbalance and concept drift, are discussed in our experiment. For the three active drift detection methods—DDM-OCI, LFR and PAUC-PH, they need to work with online learning algorithms for classification. We choose two approaches to build the online model, the traditional OB [65] and OOB with CID [13], to build the online model. Because OOB applies oversampling to overcome class imbalance and OB does not, it can help us to observe the role of class imbalance techniques (oversampling in our experiment) in concept drift detection. UOB is not chosen, for the consideration that undersampling may cause unstable performance, which may indirectly affect our observation [13]. Between RLSACP and ONN, due to their similarity and the more theoretical support in RLSACP, only RLSACP is included in our experiment.

Considering RLSACP and ESOS-ELM are perceptron-based methods, we use the multilayer perceptron (MLP) classifier as the base learner of OB and OOB. The number of neurons in the hidden layer of MLPs is set to the average of the number of attributes and classes in data, which is also the number of perceptrons in RLSACP and in the base learner of ESOS-ELM. All ensemble methods maintain 15 base learners. For ESOS-ELM, we disable the “ELM-Store,” which is designed for recurring concept drift; we allow that its ensemble size can grow to 20. In addition, ESOS-ELM requires an initialization data set to initialize ELMs, and validation data sets to adjust misclassification costs. When dealing with artificial data, we use the first 100 examples to initialize ESOS-ELM, and generate a separate validation data set for each concept stage. We track the performance of all the methods from time step 101.

In summary, 10 algorithms join the comparison from Table IV: OB, OOB, DDM-OCI+OB/OOB, PAUC-PH+OB/OOB, LFR+OB/OOB, RLSACP, and ESOS-ELM. OB is the baseline without involving any class imbalance and concept drift techniques.

To evaluate the effectiveness of concept drift detection methods and online learners, we adopt prequential test (as described in Section II) for its simplicity and popularity. Prequential recall of each class [defined in (1)] and prequential G-mean [defined in (4)] are tracked over time for comparison, because they are insensitive to imbalance rates. When discussing the generated artificial data sets with ground truth known, we also compare the true detection rate (TDR), total number of FAs, and DoD (as defined in Section II) among methods using any of the three active drift detectors (i.e., DDM-OCI, LFR, and PAUC-PH). The calculation of TDR, FA, and DoD is the same for both of the abrupt and the gradual drifting cases, based on the following understanding: before a real concept drift occurs (before time step 1500 in our cases), all the reported alarms are considered as FAs; after a real concept drift starts (after time step 1500 in our cases), the first detection is seen as the true drift detection; after that and before the next new real concept drift, the consequent detections are considered as FAs.

Furthermore, because we are particularly interested in how the learner performs on the new data concept in the artificial data sets, we calculate the average recall and G-mean over all the time steps after the concept drift completely ends (time step 1500 for the abrupt drifting cases and time step 2000 for the gradual drifting cases). It is worth noting that the recall and G-mean values are reset to zero when the drift starts and ends for an accurate analysis. We use the Wilcoxon Sign Rank test at the confidence level of 95% as our significance test in this paper.

C. Comparative Study on Artificial Data
1) P (y ) Concept Drift:
This section focuses on the P(y) type of concept drift, without P(x|y) and P(y|x) changes. Data streams SINE1 and SINE1g have a severe class imbalance change, in which the minority (majority) class during the first half of data streams becomes the majority (minority) during the latter half. SEA and SEAg have a less severe change, in which the data stream presented to be balanced during the first half becomes imbalanced during the latter half. P(y) is changed linearly during the concept transition period (time step 1501 to time step 2000) in the gradual drifting cases. The concrete setting for each data stream is summarized in Table V.

TABLE V Artificial Data Streams With P(y) Concept Drift

Table VI compares the detection performance of the three active concept drift detectors, in terms of TDR, FA, and DoD. We can see that DDM-OCI and LFR are sensitive to class imbalance changes in data. They present very high TDR; especially, LFR has 100% TDR in all cases regardless of whether resampling is used to tackle class imbalance. PAUC-PH does not report any concept drift, showing 0% TDR in all cases. This is because DDM-OCI and LFR use time-decayed metrics as the indicator of concept drift, which have higher sensitivity to performance change in general than the PAUC used by PAUC-PH. LFR shows even higher TDR than DDM-OCI, because it tracks four rates in the confusion matrix instead of one. For the same reason, DDM-OCI and LFR have a higher chance of issuing FAs than PAUC-PH. For DDM-OCI, oversampling in OOB increases the probability of reporting a concept drift by observing TDR in SEA and SEAg, compared with OB. This is because more examples are used for training in OOB, which improves the performance on the minority class for concept drift detection.

TABLE VI Performance of the Three Active Concept Drift Detectors on Artificial Data With P(y) Changes: TDR, FA, and DoD. The ‘-’ Symbol Indicates That No Concept Drift is Detected

Table VII compares recall and G-mean of all models over the new data concept, i.e., performance over time steps 1501-3000 for data streams with an abrupt change and performance over time steps 2001–3000 for data streams with a gradual change, showing whether and how well the drift detector can help with learning after concept drift is completed. In SINE1 and SINE1g, the negative class presents to be the minority after the change; in SEA and SEAg, the positive class presents to be the minority after the change.

TABLE VII Performance of Online Learners on Artificial Data With P(y) Changes: Means and Standard Deviations of Average Recall of Each Class and Average G-Mean Over the New Data Concept. The Significantly Best Values Among All Methods are Shown in Bold Italics

In terms of minority-class recall, we can see that ESOS-ELM performs the significantly best, but ESOS-ELM sacrifices majority-class recall, especially in SINE1 and SINE1g. In terms of G-mean, OOB and OOB using PAUC-PH perform the significantly best, which shows they can best balance the performance between classes. It is worth noting that PAUC-PH is the drift detection method with 0% TDR based on Table VI. It means that OOB plays the main role in learning. It also explains that OOB and OOB using PAUC-PH have very close performance. None of the other OB and OOB models show competitive recall and G-mean. Especially for those using DDM-OCI and LFR, their G-mean is significantly lower than PAUC-PH with OOB models, due to their high FA. The high number of FAs causes too much resetting and performance loss. OOB can increase the chance of producing an FA, based on the observation that it led to a higher FA than OB models, because more minority-class examples join the training. This explains why G-mean from DDM-OCI and LFR is even lower in OOB models than in OB models, for the case of SINE1.

Therefore, we conclude that, for P(y) type of concept drift, it is not necessary to apply any drift detection techniques that are not specifically designed for class imbalance changes; the use of these drift detectors could be even detrimental to the predictive performance due to FAs and performance resetting; the adaptive resampling in OOB is sufficient to deal with the change and maintain the predictive performance; when using OOB with other active concept drift detectors, the number of FAs and performance resetting need to be carefully considered.

2) p (x |y ) Concept Drift:
The data streams in this section involve only p(x|y) type of concept drift, without P(y) and P(y|x) changes. The class imbalance ratio is fixed to 1:9 and we let the positive class be the minority, so that the data stream is constantly imbalanced. The concept drift in each data stream is controlled by p(x) of the negative class, as shown in Table VIII. P(x1) is changed linearly during the concept transition period in the gradual drifting cases.

TABLE VIII Artificial Data Streams With p(x|y) Concept Drift

Table IX compares the detection performance of the three active concept drift detectors. Similar to our previous results, DDM-OCI and LFR are more sensitive to P(x|y) changes than PAUC-PH. When DDM-OCI and LFR work with OOB, their TDR shows 100%; and LFR has higher FA and shorter DOD than DDM-OCI, due to more indicators it monitors. PAUC-PH shows 0% TDR in most cases of working with both OB and OOB. Different from P(y) changes, when DDM-OCI and LFR work with OB, their TDR is rather low, which suggests that their sensitivity is dependent on the class imbalance techniques. To explain this, we observe OB’s recall of each class over time. Unlike the cases with class imbalance changes, where it is possible for the minority-class examples to become more frequent, the data streams generated in this section have a fixed minority class with a constantly small prior probability. The minority-class recall remains low (e.g., 0 in SINE1 and SINE1g cases) due to the imbalanced distribution. These detectors cannot detect any concept drift, because the classification performance they monitored does not change significantly. In other words, the classification difficulty indirectly affects the detection sensitivity of DDM-OCI and LFR. When oversampling is applied, which introduces more training examples for the minority class, the performance metrics (G-mean, recall, and precision) monitored by DDM-OCI and LFR can be substantially improved. It also increases the possibility of reporting a concept drift. This explains the low detection rate of DDM-OCI and LFR when working with OB and their high detection rate when working with OOB.

TABLE IX Performance of the Three Active Concept Drift Detectors on Artificial Data With p(x|y) Changes: TDR, FA, and DoD. The ‘-’ Symbol Indicates That No Concept Drift is Detected

Table X compares recall and G-mean of all models over the new data concept. As we expected, almost all OB models show significantly worse minority-class recall and G-mean. On SINE1 and SINE1g data, minority-class recall of OB models is as low as zero, which may hinder the detection of any concept drift (as we observed in Table IX). Among the OOB models, those using DDM-OCI and LFR perform significantly worse than OOB using PAUC-PH and OOB itself, and the latter two show very close performance. This is because DDM-OCI and LFR trigger concept drift with FAs, and cause model resetting multiple times. Along with the resetting, the useful and valid information learnt in the past is forgotten at the same time. For the two passive models, RLSACP and ESOS-ELM did not perform very well compared with OOB, showing significantly lower minority-class recall and G-mean in Table X. Generally speaking, for imbalanced data streams with p(x|y) changes, class imbalance seems to be a more important issue than concept drift, considering that the learning model without triggering any concept drift detection achieves the best performance. Besides, while the adopted class imbalance technique can improve the final prediction, it can also improve the performance of active concept drift detection methods, depending on their working mechanism.

TABLE X Performance of Online Learners on Artificial Data With p(x|y) Changes: Means and Standard Deviations of Average Recall of Each Class and Average G-Mean Over the New Data Concept. The Significantly Best Values Among All Methods are Shown in Bold Italics

3) P (y |x ) Concept Drift:
The data streams in this section involve only P(y|x) type of concept drift, without P(y) and p(x|y) changes. Following the settings in Section IV-C2, we fix the class imbalance ratio to 1:9 and let the positive class be the minority, so that the data stream is constantly imbalanced. As shown in Table XI, the data distribution in SINE1 and SINE1g involves a concept swap, and this change occurs probabilistically in SINE1g; the data distribution in SEA and SEAg has a concept threshold moving, and this change occurs continuously in SEAg. The change in SEA and SEAg is less severe than the change in SINE1 and SINE1g, because some of the examples from the old concept are still valid under the new concept after the threshold moves completely. The concept drift discussed in this section belongs to the real concept drift category, which affects the classification boundary and is expected to be captured by all concept drift detectors.

TABLE XI Artificial Data Streams With P(y|x) Concept Drift

According to Table XII, we can see that DDM-OCI and LFR have difficulty in detecting the concept drift when working with OB, because of the poor recall and G-mean produced by OB, which is also observed and explained in Section IV-C2. When DDM-OCI and LFR work with OOB, their detection rate TDR is greatly improved (above 90% in most cases). This is because the improved performance metrics facilitate the detection. LFR is more sensitive to the change, which produces higher FA and shorter DoD. Different from previous observations in terms of concept drift detection performance, PAUC-PH working with OB produces 100% TDR and low FA on data streams SINE1 and SINE1g, but PAUC-PH does not work well with OOB on the same data. It is interesting to see that oversampling does not always play a positive role in drift detection. One possible reason is that oversampling sometimes lessens the performance reduction caused by the real concept drift, while it tries to maintain or improve the overall predictive performance, especially for AUC type of metric in our case. There is evidence, showing that AUC is a more stable metric than G-mean [102], as it is computed by altering a threshold value for labeling data samples [103]. When classification is significantly improved by oversampling, we observe in the experiment that PAUC in PAUC-PH is less affected by the concept drift than the monitored indicators in DDM-OCI and LFR, thus leading to a smaller TDR. On data streams SEA and SEAg, PAUC-PH does not report any concept drift, probably due to the less severe concept drift.

TABLE XII Performance of the Three Active Concept Drift Detectors on Artificial Data With P(y|x) Changes: TDR, FA, and DoD. The ‘-’ Symbol Indicates That No Concept Drift is Detected

The recall and G-mean over the new data concept in Table XIII further confirm the above analysis. The OB models produce very low minority-class recall and thus low G-mean. RLSACP and ESOS-ELM did not perform well on the new data concept either. By comparing the models that capture concept drifts (DDM-OCI+OOB, LFR+OOB, and PAUC-PH+OB) and the models without reporting any concept drift (PAUC-PH+OOB and OOB), it seems that class imbalance causes a more difficult learning issue than the real concept drift in our cases. The models solely tackling class imbalance produce the significantly best recall and G-mean. The rather low imbalance ratio (i.e., 1:9) could be a reason. A further discussion on various imbalance levels is given in Section IV-C4. By comparing the results in Tables VII, X, and XIII, the P(y|x) type of concept drift indeed leads to the most performance reduction. It is consistent with our understanding that the real concept drift is the most radical type of change in data. However, existing approaches do not seem to tackle it well when data streams are very imbalanced. To develop better concept drift detection methods, the key issues here include how to best have them and class imbalance techniques work together and how to tackle the performance loss brought by FAs.

TABLE XIII Performance of Online Learners on Artificial Data With P(y|x) Changes: Means and Standard Deviations of Average Recall of Each Class and Average G-Mean Over the New Data Concept. The Significantly Best Values Among All Methods are Shown in Bold Italics

4) Analysis Under Different Imbalance Ratios:
The results so far have shown that the imbalance ratio is a crucial factor affecting concept drift detection and final classification performance. When discussing p(x|y) and P(y|x) types of concept drifts, we fixed the imbalance ratio to 1:9. To generalize our observations, we vary the imbalance levels in this section. We aim to find out whether and how the role of class imbalance changes and when it is worthwhile considering concept drift in imbalanced data streams. We compare DDM-OCI and PAUC-PH working with OB and OOB on SINE1 data with a different imbalance ratio (IR = 1:9, 2:8, and 3:7). Their drift detection performance (TDR, FA, and DoD) and classification performance (G-mean) in the cases of IR equal to 2:8 and 3:7 are shown in Table XIV. For clarity purposes, the results in the case of IR equal to 1:9 from Tables IX, X, XII, and XIII are also included in Table XIV.

TABLE XIV Drift Detection Performance and G-Mean of DDM-OCI and PAUC-PH Working With OB and OOB on SINE1 Data With p(x|y) and P(y|x) Drift. The ‘-’ Symbol Indicates That No Concept Drift is Detected

By comparing the results from the three data streams with a p(x|y) drift at different imbalance levels, we can see that drift detection gets easier (i.e., a higher TDR) as the data stream becomes less imbalanced for the OB models using DDM-OCI. It confirms our previous conclusion that the imbalance ratio affects the drift detection sensitivity. Meanwhile, FA is increased as more minority-class examples join the learning process. The TDR of PAUC-PH remains zero, regardless of the imbalance ratio. This is because of the insensitivity of AUC type of metric to the class distribution, as explained in Section II-B1. Similar to the results in Section IV-C2, oversampling facilitates the drift detection of DDM-OCI, and improves G-mean on the new data concept of both DDM-OCI and PAUC-PH. The model resetting from DDM-OCI causes performance loss, so that PAUC-PH working with OOB performs the best.

For the cases with a P(y|x) drift, we obtain similar observations in Table XIV compared with the results in Section IV-C3: oversampling and a less imbalanced distribution improve TDR of DDM-OCI, but also increase its FA; PAUC-PH works better with OB than with OOB in terms of the drift detection performance, which further confirms our previous analysis; the OOB model using PAUC-PH presents the best G-mean.

D. Comparative Study on Real-World Data
After the detailed analysis of the three types of concept drifts, we now look into the performance of the above learning models on the three real-world data sets (PAKDD [100], Weather [76], and Tweet [86]) described in Section IV-A. Based on the experimental results on the artificial data, we focus on the best active (PAUC+OOB) and the best passive concept drift detection methods (ESOS-ELM) here for a clear observation, in comparison with OOB. The three methods use the same parameter settings as before. The initialization and validation data required by ESOS-ELM are the first 2% examples of each data set.

Without knowing the true concept drifts in real-world data, we calculate and track the time-decayed G-mean by setting the decay factor to 0.995, which means that the old performance is forgotten at the rate of 0.5%. All the compared metrics are the average of 100 runs in Fig. 3.


Fig. 3.
Time-decayed G-mean curves (decay factor = 0.995) from OOB, PAUC-PH+OOB, and ESOS-ELM on real-world data.

Show All

Fig. 3 presents the time-decayed G-mean curves from OOB, PAUC-PH+OOB, and ESOS-ELM on the three real-world data sets. The average number of reported drifts by PAUC-PH is one, three, and one on Weather, PAKDD, and Tweet data, respectively. Compared with the artificial cases, we obtain some similar results: the passive approach ESOS-ELM does not perform as well as the other two methods; OOB and PAUC-PH show very close G-mean over time on Weather and PAKDD data, which suggests the importance of tackling class imbalance adaptively.

In the PAKDD plot, we can see that the G-mean level is relatively stable without significant drop; differently, G-mean in the Tweet plot is reducing. It may suggest that the concept drift in PAKDD is less significant or influential than that in Tweet. Compared with the gradual market and environment change in PAKDD, the tweet topic change can be much faster and more notable. Therefore, although PAUC-PH detects three concept drifts in PAKDD, the two methods, OOB and PAUC-PH+OOB, do not show much difference. In tweet, PAUC-PH+OOB presents better G-mean than using OOB alone, suggesting the positive effect of the active concept drift detector in fast changing data streams.

E. Further Discussion
In this section, we summarize and further discuss the results in the above comparative study on the artificial and real-world data. We also answer the research questions proposed at the beginning of this paper. When dealing with imbalanced data streams with concept drift, we have obtained the following.

When both class imbalance and concept drift exist, class imbalance status and class imbalance changes [i.e., P(y) changes] are shown to be more crucial issues than the traditional concept drift [i.e., p(x|y) and P(y|x) changes] in terms of the online prediction performance. It is necessary to adopt adaptive class imbalance techniques (e.g., OOB discussed in our experiment), in addition to using concept drift detection methods alone (e.g., DDM-OCI and LFR). Most existing papers that proposed new concept drift detection methods for imbalanced data so far did not consider the effect of class imbalance techniques on final prediction and concept drift detection.

P(y|x) concept drift (i.e., real concept drift) is the most severe type of change in data, compared with p(x|y) and P(y) concept drift. This is based on the observation on the final prediction performance. For all three types of concept drifts, existing concept drift approaches do not show much benefit in performance improvement. Concept drift is hard to be detected when no class imbalance technique is applied. Their drift detection performance is affected by the class imbalance technique, depending on their detection mechanism.

For P(y) concept drift, it is not necessary to apply any concept drift detection methods that are not designed for class imbalance changes, due to their FAs and model resetting. It is crucial to detect and handle the class imbalance change in time.

From an intrinsic perspective, P(y) and p(x|y) types of concept drifts do not change decision boundaries, which means that the online model is still valid or partially valid. Using an appropriate class imbalance technique alone is thus expected to improve final performance effectively. P(y|x) concept drift, on the other hand, affects the true decision boundary of the problem. Although those active drift detectors are designed for this type of changes, the presence of class imbalance causes poor classification performance and increases the difficulty in detecting the drift. The application of class imbalance techniques can improve the prediction performance and indirectly facilitate drift detection.

From the results on real-world data, we see that the effectiveness of traditional concept drift detectors (e.g., PAUC-PH) depends on the type of concept drift. For fast and significant concept drift, applying PAUC-PH seems to be more beneficial to the prediction performance.

Among existing methods designed for imbalanced data with concept drift (four active methods and two passive methods), the passive methods (i.e., ESOS-ELM and RLSACP) do not perform well in general. Although they contain both class imbalance and concept drift techniques, first, their class imbalance technique is not effectively adaptive to class imbalance changes, so that wrong imbalance status could be used during learning, leading to poor performance in the cases with P(y) concept drift. Second, they are restricted to the use of certain perceptron-based classifiers, so that the disadvantages of the classifiers are also inherited by the online model. For example, OS-ELM in ESOS-ELM requires initialization and validation data sets for training, and the weighted OS-ELM was found to overemphasize the minority class and present large performance variance sometimes in earlier studies [13]. Third, RLSACP is a single-model approach, which might be less accurate than ensemble approaches with multiple models [55].

Among the three active methods discussed in this paper, which are DDM-OCI, LFR, and PAUC-PH, DDM-OCI and LFR are more sensitive to concept drift than PAUC-PH, with a higher detection rate but also higher FAs. In addition, the detection performance of DDM-OCI and LFR can be greatly improved by OOB. The explanation can be found in the previous analysis.

For the three active drift detectors, model resetting is triggered if a drift alert is issued. However, this is not the most appropriate technique for P(y) and p(x|y) types of concept drifts, because the decision boundary is not affected, and the old data concept is still useful. Other ways to handle P(y) and p(x|y) types of concept drifts should be investigated. Moreover, if the detector suffers from a high number of FAs, the performance of the online model can be greatly reduced further. It can be observed in Tables VII and X. Therefore, it is important to control the number of FAs and/or to adopt techniques to mitigate their negative effects.

All the drift detectors discussed in this section detect concept drift based on classification performance. This might explain why their drift detection performance depends greatly on the class imbalance technique and the online learner. It is worth developing other types of drift detection methods and exploring how they work with class imbalance techniques for better classification in the future.

Overall, all these results suggest us that class imbalance and concept drift need to be studied simultaneously, when we design an algorithm to deal with imbalanced data with concept drift. Their mutual effect must be taken into consideration. Hence, we propose the following key issues to be considered for an effective algorithm.

Is the class imbalance technique effective in predicting minority-class examples?

Is the class imbalance technique adaptive to class imbalance changes?

Is the concept drift technique effective in detecting different types of concept drifts, in terms of detection rate, FAs, and detection promptness? Which type of concept drift is it designed for? Which type of concept drift does it perform better?

Is the detection performance of the concept drift technique affected by the class imbalance technique? And how?

How can we have the class imbalance technique and concept drift technique work together, to achieve better detection rate, fewer FAs, less detection delay, or better online prediction?

SECTION V.Conclusion
This paper gives the first systematic study of handling concept drift in class-imbalanced data streams. In the context of online learning, we provide a thorough review and an experimental study of this problem.

First, a comprehensive review is given, including the problem description and definitions, the individual learning issues and solutions in class imbalance and concept drift, the combined challenges and existing solutions in online class imbalance learning with concept drift, and example applications. The review reveals research gaps in the field of online class imbalance learning with concept drift.

Second, to fill in these research gaps, we carry out a thorough empirical study by looking into the following research questions.

What are the challenges in detecting each type of concept drift when the data stream is imbalanced?

Among the proposed methods designed for online class imbalance learning with concept drift, which one performs better for which type of concept drift?

Would applying class imbalance techniques facilitate the concept drift detection and online prediction?

For the first research question, a P(y) change can be easily tackled by an adaptive class imbalance technique (e.g., OOB used in this paper). The traditional concept drift detectors, such as LFR, DDM-OCI, and PAUC-PH, do not perform well in detecting a p(x|y) change. The prediction performance on an imbalanced data stream with p(x|y) changes can be effectively improved by solely using an adaptive class imbalance technique. A P(y|x) change is the most challenging case for learning, where the traditional active and passive concept drift detection methods do not bring much performance improvement. Class imbalance is shown to be a more crucial issue in terms of final prediction performance.

For the second research question, the two passive methods, RLSACP and ESOS-ELM, do not perform well in general. DDM-OCI and LFR are sensitive to different types of concept drifts, with a high detection rate but also high FAs. PAUC-PH is more conservative in terms of drift detection. Based on the observation on minority-class recall and G-mean, the combination of PAUC-PH and OOB was shown to be the best approach among all.

For the third research question, it is necessary to apply adaptive class imbalance techniques when learning from imbalanced data streams with concept drift—they bring the most prediction performance improvement. In our experiment, OOB facilitates the concept drift detection of DDM-OCI and LFR.

Finally, this paper points out several important issues for future algorithm design. There are still many challenges and learning issues in this field that are worth of ongoing research, such as more effective concept drift detection methods for imbalanced data streams, studying the mutual effect of class imbalance and concept drift, and more real-world applications with different types of class imbalances and concept drifts.