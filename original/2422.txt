The resourcefulness of crowdsourcing can be used to handle a wide range of complex macro-tasks, such as travel planning, translation, and software development. Multi-phase tasks are a type of macro-task that consists of several subtasks distributed across multiple sequential phases. Due to the recent work’s disregard for the task’s sequential correlation, it is difficult for them to handle multi-stage tasks effectively. This work bridges this gap. We call this novel approach Hint, which incorporates task design, pre hoc worker coordination, and post hoc crowd work coordination. Starting with the task interface design, Hint makes workers aware of the relationship between phases in order to improve their processing abilities. Second, pre hoc coordination of workers is to organize the workers to do the tasks to lower the monetary costs required to meet a specific quality standard. Third, post hoc coordination of crowd work is through a decision tree-based coordination strategy. Extensive tests are carried out on real-world datasets to validate the desirable qualities of the suggested mechanism.

Introduction
As a paradigm for eliciting the wisdom of crowds for handling challenging tasks, crowdsourcing [1,2,3,4] has gained increasing popularity recently. It places an emphasis on human–machine teamwork to help better handle tasks. The success of crowdsourcing has been witnessed in various applications, ranging from micro-tasks, e.g., image labeling [5], character recognition  [6] to macro ones such as text editing [7], software development [8], and crowdsourcing disaster events [9]. To enhance the quality of task handling for micro-tasks, the researchers of the AI community handle the same micro-tasks with redundancy policy [10,11,12] concerning the post hoc handling of the feedbacks from crowd workers through machine-based avenue. From the perspective of data processing, this method uses the aggregation operation to handle noisy data feedback from the crowds to obtain high-quality aggregated outcomes, including majority voting [13], weighted majority voting [14, 15], Naive Bayes [16], neural networks [17], etc.

While the tasks are macro, the heterogeneity of the task structure aggravates the difficulty of data aggregation. Noisy feedback from the crowds limits the quality of the aggregated data. It is possible to increase the quality of task handling by coordinating a crowd. Proper coordination of the crowds entails considering the constraints among the subtasks of the macro-tasks [18, 19]. Targeting at enabling the crowd to jointly complete macro-tasks, many studies have started to design a certain level of interactions between the crowds of human workers. In this regard, various workflows [20,21,22,23,24,25] are developed for coordinating the crowds to work on different subtasks contained in the macro-tasks and interact with each other through the pre-defined input–output handoffs. In short, for macro-tasks, existing work mainly concerns the process of the coordinative handling of tasks. For instance, software development is a type of macro-task that is usually divided into multiple components according to the High Cohesion and Low Coupling principle [26]. After establishing a course of action, developers are required to coordinate their activities with regard to the components they are accountable for in order to execute the entire macro-workflow. After that, they followed through and adjusted their approach based on their results. With specific requirements, this process not only contains the synchronous coordination of the different components but also involves the asynchronous coordination of the same components among developers. Moreover, as in the peer production platform such as Wikipedia, it supports loosely coupled work in a free and open-source approach, which offers many benefits. It has produced notable successes in yielding the encyclopedia containing a large number of entries.

There is a special category of macro-tasks, referred to as multi-phase task MPT, e.g., travel planning [27, 28], micro-writing [7, 25, 29] and translation [30]. For example, the text processing system FFV target a three-phase task of “find,” “fix,” and “verification.” There is a certain constraint relationship between each task [31].

It is challenging to get high-quality outputs via distributed processing of MPTs because the task order imposes limitations on the handling of subtasks. In any process that involves subtasks, the outcomes of processing each subtask will have an impact on the results of handling the remaining subtasks. Existing coordination approaches [32,33,34] cannot be applied to resolve MPTs. In particular, the coordination approach of software development cannot be used for MPTs. The reason is that a developer is usually responsible for the individual component. Although different developers can interact with each other, their work for an individual component is mainly done by the developer who is usually responsible for it. However, with regard to MPT, crowdsourcing workforce from the internet creates more noise, which necessitates the coordination of the crowd workers. For MPTs, the coordination approach of the wiki also does not work. This is because, if this coordination approach is applied to MPTs, it is hard to complete them within a predetermined time. Even if the tasks are completed, the costs of human labor are rather large [35, 36]. Besides these two typical kinds of coordination approaches, there are also other coordination-based workflows designed for certain tasks with a specific structure of which is relatively simple. For instance, handwritten tasks can be handled with the iterative workflow. As discussed previously, handling MPTs are non-trivial. Workflows created in this way also cannot be associated with MPT. In summary, existing coordination approaches are ineffective for MPTs. For handling MPTs, there are mainly three human–computer interaction questions that remain to be answered.

Question 1
Do workers produce higher work quality in individual subtasks while being aware of the constraints among these subtasks? Multiple phases are a component of an MPT, and the phases are constrained by one another. As a result, getting top-notch results is difficult to accomplish by having the workers work on the MPT all at once. So, an MPT must always be handled at multiple phase levels and divided into subtasks of multiple phases. In crowdsourcing, the quality of task processing is closely related to the Human–Computer Interaction approach. If the answer is “Yes,” how to design friendly human–computer interface to enhance individual workers’ performance on individual tasks?

Question 2
Facing the quality-cost tradeoff, how to coordinate multiple workers for handling the same subtasks? During the processing of MPT, the way of coordinating workers also affects the costs of acquiring a certain quality of aggregation results. Due to the unknown abilities of workers, it is difficult to accurately determine the number of workers required to provide a certain level quality of answer aggregation. When using more employees, you incur additional costs, while the aggregate outcome could be subpar if you only use a small number of workers. Consequently, how to coordinate multiple workers to achieve the high-quality outcome of the individual subtasks together with less cost?

Question 3
To enhance the global quality of the outcome of an MPT, how to coordinate multiple workers for handling the different subtasks? The MPTs are macro, and executing them correctly is difficult. Thus, an MPT should be divided into multiple phase-level subtasks, and there is a need to coordinate the efforts of the members between different phases. Since the workers in the processing of the tasks in different phases are independent, it is difficult for the workers who handle the tasks of different phases to interact with one another, which lowers the quality of task handling. Thus, how to enable the coordination of workers in different phases thereby improving the overall quality of MPT processing?

In this work, we attempt to answer these three questions. In particular, as for Question 1, we design two treatments to understand the effects of exhibiting the correlations among phases on the quality of task processing. Based on the result of empirical analysis and theoretical evaluation, we design the correlation-aware task interface.

Regarding Question 2, we design a cost-effective approach to asynchronously coordinating workers during task processing. In this situation, if the results of the aggregation are of sufficient quality, no more workers will be needed and the result will be delivered to the requester. To aggregate answers from these workers, we use a probabilistic method. Through the application of rigorous testing, we have discovered that the proposed method produces high-quality results with fewer costs.

Aiming at Question 3, we propose a quality-aware method with a decision tree to control the dynamic generation of subtasks and coordination of multiple workers for handling different subtasks. Additionally, we have proven that the proposed method reduces the total number of tasks generated in each phase, and that these tasks can be combined to generate a high-quality outcome for an MPT.

The remainder of this paper is organized as follows. Section  2 introduces the task type we are concerned with. Section  3 introduces Hint and analyzes its performance on handling the MPTs. Section 4 discusses related work. Conclusions are made in Sect. 5.

Multi-phase task
The MPTs are rather common in crowdsourcing. The MPTs possesses the characteristics as follows. (1), Complex. They are much more complex and creative than the work typically performed on Mechanical Turk, they are challenging to execute well so that there is added benefit to working with one another, and there is a need to coordinate the efforts of the members containing human and machines. (2), Not breakable into independent subtasks. A MPTs can be divided into multiple phase-level subtasks. Between the subtasks of different phases, tight constraints exist. Thus, properly handling an MPT entails sequential processing. Moreover, the result of the preceding phase affects the task generation of the current phase. And the result of the current phase affects the task generation of the next phase. If the tasks are distributed to workers in parallel and the workers perform the tasks independently as in traditional parallel computing, the constraints will be lost in this process. (3), Involved with elements of uncertainty. The constraints among subtasks are not static. It varies with time. So that the coordination cannot be pre-defined which lacks flexibility.

MPTs are published by the requester. MPT tasks such as planning travel tasks and refining text incorporate the characteristics of MPT. First, they embrace complex structures. If we submit the task to one worker for task handling, the quality of task processing can hardly meet the requirement of the requester. For instance, in travel planning, a worker can hardly yield a satisfying result, due to the limited experience of individuals. Moreover, in the text refining task, if a task usually completed with FFV workflow is submitted to a worker, In the “Find” phase, crowdsourcing is used to locate the wrong place in the document. In the “fix” stage, crowdsourcing is mainly used to correct the errors found in the “Find” stage, which relies on the “Find” stage. In the “verify” phase, the corrected errors are checked. So, there is a correlation among the subtasks of these three stages. This worker can hardly submit a good outcome. The reason is that the result is rather subjective which is only yielded from the point of view of an individual worker.

Second, on the one hand, there exists a sequential correlation among the phase-level subtasks. In the text refining tasks, a task can be divided into three phase-level tasks, namely find, fix and verify. There exists a sequential correlation among different subtasks between different phases. And the order of processing the subtask of different phases cannot be exchangeable. For instance, if the find tasks are not completed, the fix tasks cannot be further performed. Similarly, for travel planning tasks, a task that targets generating a travel route is divided into multi-phase subtasks. In each subtask, a recommended scenic spot is generated. In each phase-level subtask, there exist sequential correlations as well as the traffic constraint. Obviously, the subtasks should be handled according to the sequential order of the phases. On the other hand, the result of the preceding phase affects the task generation of the current phase. In the text refining tasks, the result of the subtask in find phase (i.e., the errors workers have found) can affect the task generated in fix phase (i.e., the errors needed to be fixed). Furthermore, in the travel planning tasks, the travel route needed to be generated in the current phase is based on the partial travel route yielded in the previous phase.

Third, the constraint in each phase is not static and certain. And it may change over time. For instance, the traffic constraint involved in each phase is influenced by the traffic condition. In particular, at the peak, there is a possibility of traffic jams. In this case, the traffic costs will be incurred due to a long time waiting on the road to traffic congestion. Thus, a workflow designed for the travel planning task could not be pre-defined. It ought to be adapted according to the constraint which may change over time and can be perceived with the data collection from the crowds.

Basing on the aforementioned analysis of the characteristics MPTs embrace, we introduce Hint, an approach to handling the MPTs by harnessing the wisdom of crowds.

Fig. 1
figure 1
Overview of Hint for processing MPTs

Full size image
Method and analysis
Overview of Hint for processing MPTs
In this section, as shown in Fig. 1, we describe Hint, an approach for coordinating the crowds for effectively handling the MPTs in crowdsourcing. Similar to other macro-tasks, handling MPTs involves two steps: the task design and the coordinative handling of tasks. In particular, coordinative handling of tasks involves the pre hoc coordination of crowds for same subtask and the post hoc coordination of crowd work of different subtasks.

Step 1:
Task design. Considering the real-time influence of external factors on the inner correlations of the MPTs Hint provides a phase-level task design approach based on the result of pre-stage phase correlation, which improves the quality that individual worker exhibits when handling an individual task. For example, in a travel planning task, the selection of scenic spots is set as a subtask. The subsequent scenic spots associated with the traffic route are used as candidate scenic spots in the current phase. The traffic congestion and the characteristic attributes of the scenic spots are used as the relationship between the current phase tasks and the previous tasks. The degree of traffic congestion can be obtained directly through crowdsourced maps. Therefore, the planning of the tourist route is transformed into the coordinated processing of tasks at various phases.

Step 2:
Pre hoc coordination of crowds for handling same subtask. In each phase, while introducing coordination among workers leads to a significant improvement in work quality for individual micro-tasks, such improvement comes with extra costs, such as the financial payment incurred to recruit more workers. Considering balancing the quality and cost, Hint contains a cost-effective method to control the cost of collaboratively processing subtasks in each phase. For example, in tourism route planning, the task at the second phase is to select a scenic spot from two candidate scenic spots A and B as the next tourist spot. Six workers are required to participate in the selection. At this time, if it is issued according to direct redundancy, the selection results are: A, A, B, A, A, A. It will consume the cost of hiring six workers. If you choose according to the serial asynchronous form, when the result is A, A, B, A, you can know that the answer is A. At this time, the processing of the task is stopped, and the cost is only the wages of four workers. Therefore, at this phase, we focus on the asynchronous collaborative mode of subtasks to control the task cost.

Step 3:
Post hoc coordination of crowd work of different subtasks. Due to the independence of the workers in the processing the tasks in different phases, it is difficult for the workers who handle the tasks of different phases to interact with one another. This will decrease the quality of task handling. Aiming at this problem, Hint involves an approach that enables the asynchronous coordination of workers in different phases. This method can enable the real-time perception concerning the quality of the crowd work, thereby improving the overall quality of processing the MPTs. In tourism planning, the starting point of the tour is generally given, and then the planned route of the tour is required. In this system, we can use this scenic spot as the root node of the decision tree. The selected scenic spots directly related to the traffic route are used as the sub-nodes of the root node. At the same time, we set the congestion degree of each route as the weight of each edge. Then, the problem of tourism planning can be transformed into a problem of searching for a path starting from the root node to the leaf node. Next, according to the three steps of Hint (corresponding to adopted strategies in task design, pre hoc coordination of crowds for handling same subtask, and post hoc coordination of crowd work of different subtasks.), we empirically analyzed the influence of the correlation among subtasks of MPT on the quality of final outcome to illustrate the effectiveness of Hint in processing MPTs.

Table 1 Strategies adopted in three session of the experimental treatments
Full size table
Fig. 2
figure 2
Experimental treatments. b In session 1, treatments NSN and CSN are designed to evaluate step 1 (i.e., task design) of Hint. c In session 2, treatments CSN and CAN are designed to evaluate step 2 (i.e., pre hoc coordination of crowds) of Hint. d In session 3, treatments CAC and CAN are designed to evaluate step 3 (i.e., post hoc coordination of crowd work) of Hint

Full size image
We consider a couple of treatments as shown in Table 1, and for each treatment, we consider three sessions. The three sessions are, respectively, corresponding to the three steps of handling MPTs, namely task design, the pre-coordination of workers, and the post-coordination of crowd work.

In Session 1, there are two task design strategies which may involve the correlation among subtasks or not as shown in Fig 2b.

Correlation-aware task design (C). In the task design strategy with CCS, we implement the proposed correlation-aware task design method. Therefore, we have designed a context-aware task design mode, which allows workers to perceive the correlation between the task of previous phase and the task of current phase well.

No exhibiting correlation in task design (N). In this task design strategy w/o CCS, the correlation among subtasks is not exhibited to workers. In this case, the workers handle the task without being aware of the correlation among phase-level subtasks. When dealing with open-ended tasks, most of the recent works [37, 38] adopt the task design approach which ignores the impact of correlation among phase-level tasks on the performance of participating workers.

In this session, strategy C is corresponding to the strategy adopted in step 1 of Hint for task design.

In Session 2, the pre-coordination strategies of workers can be synchronous or asynchronous as shown in Fig 2c.

Asynchronous (A). When it is in terms of an asynchronous strategy, we implement the proposed cost-effective method to coordinate workers for handling the same individual subtasks in the phase. Using this mode, we can perceive the quality of aggregated result in real-time to decide whether to continue to assign the tasks to workers and thus the cost can be better controlled.

Synchronous (S). When it is in terms of synchronous strategy, each task is synchronously submitted to workers. Most of recent work [39, 40] adopt this synchronous strategy for the coordination of workers.

In this session, strategy A is corresponding to the strategy adopted in step 2 of Hint for pre-coordination of workers.

In Session 3, the post-coordination strategies of crowd work can be incorporated into the correlation among subtasks or not as shown in Fig 2d.

Correlation-aware post-coordination of crowd work (C). If this part, corresponding to the strategy with CCS, we implement the post-coordination strategy as the quality-aware method for post-handling the crowd work of subtasks of different phases. In this mode, we can use the correlation among tasks to control the generation strategy of tasks in multiple phases, which further improves the quality of task processing and control costs.

No considering the correlation among subtasks in different phases (N). In this strategy w/o CCS, the correlation among subtasks in different phases is not considered during the post-coordination of crowd work of different subtasks in different subtasks. Some recent works [37, 41] adopt this mode, when they try to handle some complex tasks, such as handwriting recognition and entry editing in Wikipedia. They ignore the correlation among tasks in different phases: They divide the task into subtasks and assign them to workers who independently handle them.

In this session, strategy C is corresponding to the strategy adopted in step 3 of Hint for post-coordination of crowd work.

Obviously, Hint is run in the experimental treatments CAC. We also list the other three experimental treatments as shown in Table 1. Specifically, the experimental treatment NSN runs a vanilla version of Hint, which is defined as the lack of consideration given to task interdependence during a task design session and the post-coordination of crowd work coordination session. Also, in order to ensure pre-coordination among the workers, the synchronous strategy is employed. In addition to Hint, we also list CSN and CAN, the other two degraded versions of Hint. Specifically, the correlation among subtasks is taken into account when a treatment CSN treatment task design is performed, but not when the task of post-coordination of crowd work is performed. In particular, in a treatment CSN, the correlation among subtasks is considered in a task design step but not in the step of post-coordination of crowd work. Also, in order to ensure pre-coordination among the workers, the synchronous strategy is employed. Treatment CAN uses correlation in task design, but it does not take correlation into account when executing the step of organizing crowds work. Pre-coordination is attained by employing an asynchronous strategy.

To analyze the performance of Hint in real life, we chose a set of real-world MPTs, namely travel planning for a one-day tour in Beijing concerning the popular scenic spots, which embraces the typical characteristics of MPTs. Each travel planning task consists of a set of subtasks and the traffic constraints among subtasks are critical for obtaining high-quality results from the crowd. We use the WeChat applet to inject users into Hint and design the experiments in a way that each treatment consists of the same number of tasks (5 in each treatments), so neither treatment appears to be obviously more time-consuming or enjoyable. In the pre hoc handling of same subtasks in a phase, if the synchronous coordination strategy is implemented for coordinating workers, the redundancy of workers is set to 5. If the asynchronous coordination strategy is implemented for coordinating workers, the redundancy of workers is set according to specific quality requirements. In general, on popular crowdsourcing platforms like Appen, each hired worker’s income is determined by the number of tasks performed, and the incentive for completing each subtask is predetermined. Each recruited worker receives 0.5 yuan per subtask completed in the experiment, with the more jobs completed, the higher the incentive. The workers are anonymous, as are other crowdsourcing services, in order to preserve their privacy. Importantly, we did not inform workers about the strategies used in the various treatments, which helped us to reduce biases. Because the two treatments appeared to be identical to the workers.

In next step, in Sect. 3.2, we can answer Question 1 mentioned in Sect. 1 by comparing the work quality produced between the two treatments (i.e., NSN and CSN as shown in Fig 2b) which involve different task design strategies in session 1. In Sect. 3.3.1, a comparison of costs between the two treatments (i.e., CAN and CSN which has different strategies in session 2 as shown in Fig 2c) would allow us to answer Question 2 mentioned in Sect. 1. In Sect. 3.3.2, treatment CAN and CAC (which involve different strategies in session 3 as shown in Fig 2d) are used to answer Question 3 mentioned in Sect. 1. In order to further evaluate the performance of the proposed system Hint by analyzing the experiment treatments, we add additional empirical analysis of them in the supplementary materials.

Fig. 3
figure 3
RStrategies implemented in session 1 of treatments NSN and CSN for evaluating the task design step (i.e., step 1) of Hint

Full size image
Task design
The phases have corresponding subtasks. Moreover, the current phase’s tasks and results are linked to the outcomes of the previous phase. As with handling the phase-level subtasks, the main goal of task design is to facilitate the workers to better comprehend and utilize the correlations in their tasks, thus enhancing the quality of crowd work. Therefore, for the design of subtasks, we use two experimental treatments as shown in Fig 2b to explore the effect of correlation on the quality of crowd work during handling subtasks.

Treatment NSN. In this treatment, the correlation among subtasks are not exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks synchronously in Session 2, and the post-coordination of crowd work of workers does not involve the correlation of subtasks in Session 3. This task design method mainly divides the task into multiple subtask, and then directly distributes the subtasks. If there are no correlations between the subtasks. This method can be adopted. Otherwise, the stories are more complex. This task design mode is widely adopted in recent works, especially the methods for handling open-ended tasks [38] and complex tasks (e.g., handwriting recognition[37]). However, these method ignores the correlation of the results of the previous phase on the results of task of current phase; while these correlation can be used to improve the performance of workers.

With the task interface of treatment NSN as shown in Fig 3a, workers are asked to select the best one from multiple scenic spots in each phase instead of recommending a complete travel path. In this approach, workers will process the task without being aware of the correlations among phases such as traffic constraints, which will yield impractical results. For instance, for recommending the travel route of the one-day cultural trip, assume that the scenic spot Beijing University has been recommended. However, the workers are not aware of the scenic which has been recommended in the previous phase with this task interface. It is possible that she will recommend the scenic spot of the same categories such as Renmin University of China. Even, a ridiculous travel route of universities in Beijing will be recommended to requesters.

Treatment CSN. In this treatment, the correlation among subtasks are exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks synchronously in Session 2, and the post-coordination of crowd work of workers does not involve the correlation of subtasks in Session 3. At first, the task is divided into multiple phase-level subtasks. Then, in order to show the correlations, the preceding subtasks are processed in order and the results of the previous phase are presented to the worker. Then, the result of the previous phases is combined with each alternative in this phase into a sequence that will be exhibited in the task interface of this phase. When handling the tasks, workers are asked to verify which sequence is the best among them.

Figure 3b plots the task interface of treatment CSN in which workers are aware of both correlation among phases and it is easier to distinguish the difference of next paths for them. For instance, with reference to the current path Olympic Park, Bird’s Nest, the worker is asked to select the next path she believes the best to meet the requirement, which not only takes into account the constraints among phases but also will lower the query cost.

As for treatment NSN, workers are asked to choose the best scenic spot in each phase without exhibiting the result of the previous phase, which is a free-choice style. When undertaking this kind of task, workers can analyze differences between attractions. However, workers will not know about the interdependencies among task phases. For example, with tourism planning, achieving the full diversity of tourist attractions is often difficult because of the lack of attention to the outcomes of prior phases. Because of this, visitors to the region will spend all their time sightseeing at the similar spots. For example, if Peking University was already included in the sequence of attractions in the previous phase, and then workers selected the Palace Museum and Renmin University’s attractions, they still chose Renmin University. But both Peking University and Renmin University are college attractions. The Palace Museum that can enrich the cultural tour has been neglected.

The second scheme treatment CSN not only makes the user aware of the correlation between the task handling of the next phase and the result of current phases but also makes them pay attention to the similarity between the alternative sequences in the next phase. So that the workers can pre-compare these alternatives, thereby improving the quality of crowd work. For example, in the tourism planning, the current phase sequence is Olympic Park, Bird’s Nest, and the current candidates are Olympic Park, Bird’s Nest, Palace Museum, Olympic Park, Bird’s Nest, Water Cube, and Olympic Park, Bird’s Nest, Happy Valley. It is very likely that all three attractions can improve the current phase results, and the user can compare the three alternatives to clearly express the practical degree of worker’s preference.

Empirical evaluation of task design methods in the first session of two treatments
As discussed previously, the experimental design would include two treatments, i.e., treatment NSN and treatment CSN. In treatment NSN, in each phase, the answer sequence yielded in previous phases is not exhibited to each worker so that she/he completes tasks with being aware of the correlation among the current phase and previous phases. In treatment CSN, in each phase, the answer sequence yielded in previous phases is exhibited to each worker so that she/he completes tasks without being aware of the correlation among the current phase and preceding phases.

Fig. 4
figure 4
Result of empirical analysis of treatment NSN and treatment CSN for evaluating step 1 in Hint

Full size image
In order to analyze Hint’s practical performance, we chose a set of real-world scenarios, one of which is selecting a one-day tour of popular scenic locations in Beijing. It embraces the typical characteristics of MPTs, where each task is composed of a set of subtasks, and constrained relationships among subtasks are critical for obtaining high-quality results from the crowd. There are five MPTs, and each of them contains five phases. the suggested system’s workforce pool was made up of 40 university students, who supplied the ground truth. For the two treatments, according to the answers of 40 workers, the statistical results of their answers are given. And the corresponding information entropy is calculated according to the frequency of the answers in the statistics.

Empirical result of information entropy. The experimental results concerning different subtasks are shown in Fig 4a. In the beginning, the information entropy of treatment CSN and treatment NSN is the same as each other. This is because, in this case, there is no previous sequence that can be exhibited to workers in treatment CSN and treatment CSN degrade as treatment NSN. When the value of task ID increases, the information entropy of the treatment CSN is increasing smaller than treatment NSN. This is because the task ID corresponds to the phase number. When processing the task with a large number, the workers observe a longer sequence of more results yielded in previous phases in treatment CSN. It is easier for workers to be aware of the stronger correlations among subtasks and filtering out some alternatives irrelated with the sequence of previous phases. As shown in Fig 4b, CSN, a task design method with correlation awareness, has lower information entropy than NSN, a task design method without correlation awareness. This shows that the perception of relationships can improve the ability of workers to handle tasks.

Empirical result of worker ability. For the two treatments, based on the answers solicited from 40 workers, we learn the ability of the workers with homogenous Dawid-Skene (HDS) model [14, 42, 43]-based EM algorithm [42,43,44]. The results are shown in Fig 4a. We can observe that on the first subtasks, the ability workers obtained with these two treatments by learning are rather similar. Because, treatment CSN and treatment NSN are identical at first, and no previous phase exists and there is no result sequence that could be exhibited in treatment CSN. For CSN, the number of phases increases, and the constraints between phases are gradually increased. And, the result sequences in the pre-phases showed to workers become longer in treatment CSN; thus, workers exhibit a better performance with the increasing phases. Hence, worker ability becomes larger in the higher phase. As shown in Fig 4a, in the task design phase, CSN considers the correlation among tasks. Therefore, the task design scheme allows workers to have higher performance, and the corresponding task processing quality is further improved.

Consequently, we can learn that when workers are aware of the correlation among subtasks, their abilities are improved. Moreover, considering the correlation among subtasks in task design can help to yield a better outcome with low uncertainty. In order to find a theoretical guarantee of the empirical analysis, we implement the theoretical analysis in the next section.

Fig. 5
figure 5
Cost complexity varying with the expectation of worker performance in treatment NSN and treatment CSN for evaluating step 1 in Hint

Full size image
Theoretical analysis of task design schemes in different treatments
In this section, we theoretically analyze the two task design schemes with cost complexity [45] of crowdsourcing. Cost complexity mainly describes the relationship between cost, quality and the distribution of workers’ ability parameters. In this section, in the face of different task design methods, workers also have certain differences in their understanding of tasks. This will lead to a certain difference in the performance of workers. Therefore, in order to analyze the quality of task design methods, we use the relationship between complexity and worker performance (workers’ ability to handle tasks) to analyze the pros and cons of task design methods.

Task design is an important step in the crowdsourcing process which also affects the quality of crowd work. Cost complexity is a common method to evaluate the crowdsourcing process. When the worker distribution over ability and the post hoc handling method is fixed, the quality of the crowdsourcing process is directly affected by the step of task design. In this case, the task design methods can be evaluated by cost complexity [45] of the crowdsourcing process. Aiming at the two task design schemes, we leverage the HDS model-based EM algorithms [14, 42,43,44] to aggregate the answers to be a high-quality one in each phase. Here, we assume that 𝜂 is the maximum ability a worker can exhibit and 𝑤𝑖 is the ability worker exhibit.

Cost complexity of treatment CSN. In treatment CSN, workers are asked to select one answer from multiple alternative answers with the awareness of the constraint relationship. Correspondingly, the result inference method is to aggregate answers to be high-quality ones. Let 𝑤𝑖 denote the performance of worker i under the task design strategy treatment CSN. Then, we can obtain 𝑤𝑖=𝜇(𝑑(𝑄𝑘)) and we can get that 𝑃{𝑥𝑖=𝑘′|𝑦𝑖=𝑘}=1−𝑤𝑖𝐿−1.

In this paper, we analyze the cost complexity of majority voting which is a typical result inference method. Given the variance and expectation of worker distribution respectively denoted by 𝔻𝑤𝑖 and 𝔼𝑤𝑖, the cost complexity of crowdsourcing [45] under the error rate bound 𝜂 of aggregated result can be obtained as (−2(𝐿−1)2ln𝜂𝐿−1 −𝐿𝔻𝑤𝑖)/(𝐿𝔼𝑤𝑖−1)2, where the cost complexity is affected by 𝔼𝑤𝑖. If 𝔼𝑤𝑖 is large, the cost complexity will be of a large value and a small set of workers will be needed to guarantee that the error rate bound of the aggregated result is at most 𝜂.

Cost complexity of treatment NSN. Different from treatment CSN, treatment NSN does not involve the correlations between phases. Here, we define the performance of worker i under treatment NSN as 𝑤′𝑖. Then, we can get that 𝑃{𝑥𝑖=𝑘′|𝑦𝑖=𝑘}=1−𝑤′𝑖𝐿−1. Since treatment NSN does not take into consideration the constrained relationship among phases, the expectation of worker performance under treatment NSN is apparently lower than treatment CSN. Hence, the expectation of worker performance under treatment NSN is denoted by 𝑤𝑖−𝛿. Similarly, we can obtain that the cost complexity of treatment NSN is (−2(𝐿−1)2ln𝜂𝐿−1−𝐿𝔻𝑤𝑖−𝛿)/(𝐿𝔼𝑤𝑖−𝛿−1)2.

According to Fig. 5, it can be seen that when the expectation of the worker’s ability to process the task is greater, the cost complexity of the task processing under the same redundancy is lower. This means that the ability of workers directly affects the cost of task processing. At the same time, with the changes in worker ability expectations, the complexity of CSN is always lower than that of NSN. This shows that the correlation-based task design method (CSN) is significantly better than the task processing method of NSN.

Comparison of treatment NSN and treatment CSN. We present the comparison of the results of theoretical analysis concerning treatment NSN and treatment CSN. Here, under treatment NSN (treatment CSN), 𝛿 is set to 0.1(0.2). Figure 5 plots the cost complexity under these two methods which vary with the expectation of worker performance of the different number of alternative answers ranging from 3 to 7.

As shown in all these figures, the cost complexity decreases with the increase in the expectation of worker ability. Among the three methods, treatment CSN performs the best. This is because under treatment CSN, the constraint relationship is exhibited to workers, and workers in treatment CSN can perform most excellently among these two methods.

Coordinative handling of tasks
Pre hoc coordination of crowds for handling same individual task
Fig. 6
figure 6
Strategies implemented in session 2 of treatments CSN and CAN for evaluating the pre hoc coordination step (i.e., step 2) of Hint

Full size image
In this section, we give the answer to the aforementioned Question 1, namely how to coordinate multiple workers for handling the same micro-tasks in a phase with facing the quality-cost tradeoff. When doing crowdsourcing, one try to ensure that each task’s final outcome is of an exceptionally high quality by following the way: contributors work cooperatively in processing each task’s sub-steps and then all of the crowd work is post-processed to produce the final result. Recent research shows that the additional workers who collaborate in task coordination will yield better results, but these employees will cost more to hire. In this case, the strategy of coordinating crowd workers matters. A straightforward method is that workers synchronously handle the tasks they received. In this method, it is hard for us to get the number of workers required to obtain a satisfactory aggregated outcome. Thus, the costs in this method cannot be well-controlled to guarantee the quality of the final outcome. Hence, this synchronized coordination policy is ineffective for handling MPT. Assume that a classification task involving two categories is handled by five workers. If we distribute these tasks using redundant synchronization methods, assuming the task is simple, all five workers provide correct responses. We must pay for the hiring of five workers. When the third worker is completed in an iterative asynchronous manner, the task result can be determined using the iterative decision-making method. We can save the wages of two employees. If the task is difficult, it may be possible to set the answers given by five workers as two correct answers and three incorrect answers after they have completed it. Then, we use the voting method to figure out which answer is incorrect. It demonstrates that five workers are insufficient to meet the task’s processing requirements, and that the cost of hiring workers for processing must be increased. As a result, using asynchronous redundant iterative processing methods can help to reduce the cost of task handling while also improving task quality. To this end, we introduce a new approach to coordinating the crowds for handling MPTs, which involves the coordination of crowds for handling Individual task. At first, we use two experimental treatments as shown in Fig 2c to explore the effect of approaches to coordinating the crowds for handling MPTs on the costs incurred.

Treatment CSN. In this treatment, the correlation among subtasks are exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks synchronously in Session 2, and the post-coordination of crowd work of workers does not involve the correlation of subtasks in Session 3. In Session 2, the method of pre hoc handling the tasks is usually used to handle various crowdsourcing tasks in recent works [39, 40]. We are starting with analyzing synchronous coordination policy in the second session of treatment CSN which offers some insights into understanding its flaws so as to further design a more proper worker coordination approach to handling the same individual subtasks of MPT. As shown in Fig. 6a, when the task generation is finished, tasks will be submitted to multiple workers who will perform them independently. Then, result aggregation methods will be employed to aggregate returned answers to be high-quality ones. As shown in Fig. 6a, the task has been submitted to two workers. In this instance, if the skill of one of their workers is higher and the solution they have already found already satisfies the requirement, it is unnecessary to spend money on the other worker. There will be no additional workers to process the tasks though these two workers’ abilities are so low. The aggregated result is insufficiently accurate to meet the requirement. Because of the differences in workers’ abilities, obtaining the times of redundancy accurately is difficult to achieve a certain quality of aggregated results. The reason for this is that in existing work, each task is treated equally, despite the fact that the tasks range from simple to difficult. In fact, more difficult tasks necessitate a larger workforce. To address the drawbacks of such an existing approach, we develop a cost-effective approach that employs a coordinated crowd workforce to work on multiple subtasks at the same time in order to achieve high-quality results while staying within budget constraints.

Treatment CAN. In this treatment, the correlation among subtasks are exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks asynchronously in Session 2, and the post-coordination of crowd work of workers does not involve the correlation of subtasks in Session 3. In this part, we introduce the cost-effective coordination approach contained in Hint in the second session of treatment CAN. As shown in Fig. 6b, each task will be performed by workers in a sequential process that contains multiple different steps. In this method, the worker in the current step is independent of the previous step. In particular, with the control of the proposed asynchronous coordination policy in treatment CAN, the process will terminate until the quality of the aggregated result is enough high.

In this process, we propose a new measure, the improvement ratio for the tasks which helps us to determine the costs a task need so as to control the coordination of workers. First, we give some assumptions: (1) each worker is diligent, that is, every worker tries his/her best to complete all tasks. Actually, he/she may still make mistakes and show low ability, so it is important to model the error rate; (2) each worker performs independently. In the process of pre hoc handling the individual phase-level subtasks, we characterize the ability of workers according to [14, 42, 43]. Given a subtask, we use L to denote the number of alternative answers. When processing this subtask, the ability exhibited by worker i is 𝑤𝑖, namely the probability that this worker gives the correct answer to this task. Similarly, the probability that she gives the incorrect answer to this task is 1−𝑤𝑖𝐿−1. In the process of asynchronously handling the subtasks, we use M to denote the number of workers in the current processing subtask. Given the redundant answers given by m workers, we can resolve the model with the Bayesian inference method [46] and then use the EM algorithm [42, 43] to infer the quality of each candidate answer q, namely 𝑞=𝑝(Candidate answer 𝑧|workers′ answers 𝑋,workers′ ability 𝑊). Using Bayesian inference, q can be calculated by 𝑝(candidate answer 𝑧𝑗 𝑖𝑠 ground truth)×Π𝑖<𝑀𝑃(worker′s answer|ground truth, worker′s ability 𝑤𝑖, where 𝑝(worker′s  answer | ground  truth,  worker′s ability 𝑤𝑖) can be calculated from the worker’s ability 𝑤𝑖. By calculating the probability of each alternative answer being the true answer, the information entropy of answers can be computed. Let 𝜖 be the threshold value. When the entropy calculated after the returned answer to the questioned worker is less than 𝜖, it will stop asking more workers. In this way, the real-time-aware asynchronous workflow control can be achieved. After obtaining q of various candidate answers, the expected E(q) of the quality q can be further computed. And the expected 𝐸(𝑞′) corresponding to 𝑞′=1−𝑞. Finally, we can derive that imp(𝑞,𝑞′)=𝐸(𝑞)𝐸(𝑞′).

This process of iterative processing of the tasks with workers can be viewed as a partially observable Markov decision process (POMDP) [47, 48]. Continue to add the redundancy of workers to handling tasks and stop adding workers to handling tasks are two actions in the POMDP process. Thus, we employ a POMDP-based approach to controlling the process of asynchronous worker coordination of handling tasks so as to achieve the maximum quality of crowd work with the costs as little as possible.

Empirical analysis of cost-effectiveness with different worker coordination modes in two treatments. In the two task handling modes based on synchronous worker coordination of the treatment CSN and asynchronous worker coordination of treatment CAN, we analyze the quality of crowd work on individual tasks with increasing worker redundancy. We performed a statistical analysis of the handling result of individual subtasks in phases 2, 3, 4, 5, and 6. In Fig. 7, we analyze a subtask in a second phase. We start out by showing the initial results of the study’s findings on worker redundancy on the path to asynchronous coordination in treatment CAN. As the number of workers involved in processing a single task increases, the quality of crowd work on handling tasks improves. When the worker redundancy times reach 7, in task handling based on the asynchronous cooperative mode in treatment CAN, the collaborative processing is terminated. The quality of individual task processing is at this point near the maximum possible. For the time being, individual task processing has almost reached its highest quality. Increasing the number of workers’ redundancy simply cannot improve the task processing. At this time, the increase in the number of worker redundancy has become a waste. With this in mind, the asynchronous collaborative method of treatment CAN can utilize the POMDP [47, 48] process to effectively control the number of worker redundancy to balance the quality and cost. Moreover, in the synchronous processing method of the second session in treatment CSN, we also analyzed the processing quality of each subtask from the change of worker redundancy from 1 to 10. In this kind of collaborative processing, when the worker redundancy reaches 7, the quality of the task processing cannot be further improved by adding more redundancy. But in this method, the number of redundancy is also continuously increased, resulting in additional costs. Similarly, in Fig. 7a, b, c, d, e, we exhibit the result of the subtask handling of the third, fourth, fifth, sixth and seventh phases and obtain similar results. Both methods can achieve higher accuracy. Among them, CAN has lower redundancy in tasks at different phases. Especially in Fig. 7f, this result is clearly shown, indicating that the asynchronous redundant processing method can dynamically control the processing cost of a single subtask. In general, in the second session of CAN, the asynchronous collaborative method of workers for handling individual tasks in each phase can effectively control the costs incurred to recruiting more workers by real-time sensing the achieved quality of crowd work on the handling tasks.

Fig. 7
figure 7
Empirical analysis of cost-effectiveness in different worker coordination modes in two treatments CSN and CAN for evaluating the step 2 of Hint

Full size image
In addition, for multiple tasks, we further study the impact of the way workers work together on the cost-effectiveness of handling single subtasks in each phase of an MPT. In this set of experiments, we show the probability distribution of the difference in redundancy consumed by the two synergistic methods over 40 subtasks. As shown in Fig 7f, among the 40 tasks, there are 26 tasks that can achieve optimal quality under the same worker redundancy by using three worker coordination methods. This situation accounts for 65%. In the two worker cooperation modes, the difference of the worker redundancy consumed by achieving the highest quality in eight tasks is 1, accounting for 20% of all the 40 tasks; when handling four tasks which accounting for 7.5% of all the tasks, the difference of worker redundancy needed to reach the highest quality in four tasks is 2 in the two modes. The worker redundancy needed to reach the highest quality in four tasks is 2. As for 2 tasks that account for 5%, the difference of the worker redundancy needed to reach the highest quality of handling three tasks in the two modes is 3. Only in one task accounting for 2.5%, the difference of the worker redundancy needed to reach the highest quality in the two modes is 6. In all cases, when the optimal handling quality is achieved, the asynchronous cooperative mode in treatment CAN have fewer worker redundancy than that the synchronous collaborative consumes in the treatment CSN. This indicates that asynchronous coordination of treatment CAN is more cost-effective than synchronous worker coordination of treatment CSN on handling subtasks in each phase. Based on the above analysis, Hint incorporate the synchronous worker collaborative approach to handling the single subtasks in each phase of an MPT.

This section discusses two coordination policies, i.e., synchronous coordination policy in the second session of CSN and asynchronous coordination policy in the second session of CAN. In particular, we incorporate the asynchronous coordination policy into Hint and based on it we employ a POMDP-based approach to controlling the costs of a task needed to acquire satisfactory aggregated result in the asynchronous coordination policy in the second session of CAN.

Post hoc coordination of crowd work of different subtasks
Fig. 8
figure 8
Strategies implemented in session 2 of treatments CAN and CAC for evaluating the post hoc coordination step (i.e., step 3) of Hint

Full size image
The correlation between subtasks is an important factor in MPTsprocessing. In the task design phase, we proposed a correlation-aware task design method to improve the performance of each worker on handling individual subtasks in a phase. Regarding the pre-processing of the individual subtasks of the same phase with the coordination of workers, we have also designed cost-effective methods to achieve higher processing quality with fewer costs. These two parts all concern how to properly pre-handle the micro-tasks in a certain phase. On a more macro-axis, the outcome quality of a whole MPT can be further improved through the post-coordination of crowd work between the subtasks in different phases. In this section, we are concerned with how to further improve the outcome quality of an MPT. And, we propose a quality-aware method with a decision tree to control the post-coordination of multiple crowd work of subtasks in different phases. First, in order to explore the importance of correlation among different subtasks for getting a high-quality outcome of a whole MPT, we design two treatments as shown in Fig 2d, i.e., treatment CAC in which the post-coordination of crowd work of the third session is with considering the correlation and treatment CAN in which the post-coordination of crowd work of the third session is w/o considering the correlation.

Treatment CAN. In this treatment, the correlation among subtasks are exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks asynchronously in Session 2, and the post-coordination of crowd work of workers does not involve the correlation of subtasks in Session 3. In the third session of treatment CAN, as shown in Fig. 8a, in this way, the subtasks are handled according to the order of phases where they are located. This post-coordination method for dealing with various compound tasks,which is widely adopted in recent works [41, 49]. In the process of pre hoc handling of individual tasks in each phase, the correlation has been considered in the task design, that is, the worker performs the task in a correlation-aware task design interface. After completing the individual subtasks of each phase, multiple results are directly aggregated with HDS [14, 42, 43] into a more reliable one at each phase. The aggregated result will be then connected to the result sequence of the previous phase to form a new result sequence. This result sequence will then be displayed in the task interface of the next phase, and the task handling of the next phase will continue until the whole MPT is finally completed.

Because task design involves subtask correlation in pre hoc handling of subtasks, workers can perform better for individual subtasks in each phase. However, in order to achieve a high-quality end result, post hoc handling of subtasks after the task is completed is also required, in order to ensure a holistic process of crowd task collaboration. Though it is acknowledged that a certain level of crowd work is performed after subtask coordination, this method does not include post-coordination crowd work of different phase-level subtasks, making it difficult to produce high-quality results across the entire MPT.

Take tourism planning tasks of cultural trips as an example. The result sequence has been obtained: Tiananmen-Olympic Park-Peking University, and the current candidates are Tsinghua University, Yuanmingyuan, and Great Wall. According to the handling result of the workers, the distribution of the answers is 3 votes for Tsinghua University, 2 votes for Yuanmingyuan, and 2 votes for the Great Wall. It can be known that the final result is Tiananmen-Olympic Park-Peking University-Tsinghua University. In fact, by submitting different result sequences to crowdsourcing for voting, we found that the line Tiananmen-Olympic-Peking University-Tsinghua University was praised by 10 people as the best travel route. And the result sequence Tiananmen-Olympic Park-Peking University-Yuanmingyuan was praised by 12 people as the best travel route. In general, it is still difficult to directly obtain the best results through the result aggregation in treatment CAN.

Treatment CAC. In this treatment, the correlation among subtasks are exhibited to workers in task design of Session 1, the workers cooperatively pre hoc handling the tasks asynchronously in Session 2, and the post-coordination of crowd work of workers involve the correlation of subtasks in Session 3. When dealing with multi-phase tasks in the third session of treatment CAC, as shown in Fig 8b, the tasks are designed into subtask sequences and processed according to the sequential order of each phase. By using crowd intelligence perception, the correlation of multiple subtasks is calculated. A method for automatic task handling that is based on the correlation between tasks in the previous phases has been supplied, in order to obtain the optimal results of the current phase and previous phases, and to construct the optimal result sequence. In addition to coordinating work in each phase, this approach also addresses the issue of coordination of multiple workers’ work after the processing is completed. In this approach, we also use the correlation-aware task design method to investigate the effect of crowd work post-coordination on MPT final outcome quality.

Following the aforementioned example, if we consider the constraints between the traffic between Tiananmen-Olympic Park-Peking University and Yuanmingyuan (which can be obtained through group intelligence perception) as well as the subject of a cultural journey, we can obtain that If Peking University was already selected, Yuanmingyuan can better reflect the characteristics of the cultural journey. According to the correlation among subtasks, Yuanmingyuan can be count more. As a result, we obtain a better Tiananmen-Olympic Park-Peking University-Yuanmingyuan path compared to the first case in which the correlation among different subtasks is not taken into account.

Fig. 9
figure 9
Decision tree involving candidate scenic spots

Full size image
We provide a detailed process of the automatic method that employs a decision tree for post-coordination of crowd work with consideration of correlation. The specific method can be broken down into two steps: capturing subtask correlations and controlling crowd work post-coordination.

Capturing correlations among subtasks. When handling tasks, in addition to the internal constraint relationships between phases, the matching relationship between answers of the tasks in each phase must also be considered. For example, in tourism planning, you can consider the transportation relationship of various attractions as the inherent correlation relationship between the various phases. And for the recommended spots from the workers, the probability obtained through statistics is regarded as the user’s satisfaction with the sequence of attractions reflected in the answers between the phases, that is, the correlation between the answers. And according to the constraint relationship between phases and the matching relationship of answers, comprehensive consideration is made to control the workflow and give the best answer sequence. The process of post-coordination of crowd work is divided into the acquisition of the relationship between tasks and the control of collaborative workflow. For example, through the control of tourist attractions routes, the best results are given.

The correlation among phases is mainly divided into the constraint relationship between the various phases and the answer matching relationship between the tasks of the phases. Corresponding to these two types of correlations, the quantification process can be performed by the following two methods:

1.
Intrinsic constraint relationship between different subtasks two adjacent phases. In this paper, 𝑡𝑟𝑎𝑇(𝑎,𝑏) is used to represent the constraint relationship between the different tasks in two adjacent phases. This relationship can be obtained through analysis between the various phases, using automated methods or crowd intelligence perception methods. For example, in handwriting recognition, it can be automatically obtained through a corpus; for example, in tourism planning, we can characterize it by the time required for traffic between two attractions, which is mainly quantified by traffic distance and traffic congestion. The traffic distance can be obtained directly from the crowdsourcing map [50], and the congestion status can be obtained by referring to the form of a crowdsourcing map and using the method of group intelligence perception. So the correlation between two adjacent phases=traffic distance×traffic congestion.

2.
Matching degree of the crowd work of different subtasks in two adjacent phases The matching degree between the alternatives in the current phase and the result sequence in previous phases is mainly expressed by imp. In the task design of each phase, we mainly ask multiple workers which candidate matches the previous result sequence most according to the task design method. Then, we use statistical analysis to obtain the results of worker processing tasks to quantify the constraint relationship. Assuming that the worker’s accuracy is w, we can use the EM algorithm to obtain the probability that each candidate answer matches and the result sequence of the previous phase according to the HDS model [14, 42, 43]. The candidate answers with the highest probability are used as the answer that best matches the result sequence of the previous phase. We can quantify the degree of matching between the crowd work of different subtasks by using the probability that the best matching answer matches the result sequence of the previous phase.

According to the degree of matching between the constraint relationship and the answer, a decision tree based on each constraint relationship can be easily established. For tourism planning, as shown in Fig. 9, in tourism planning, we often specify starting spots, and then ask for tourist route planning. We take the starting scenic spot as the root node, and determine the candidate scenic spot for the next phase according to the traffic route. And we use it as the son node of the root node. At the same time, its traffic congestion and user preferences are used as the weight of its edges. Similarly, we keep adding son nodes, and we get a tourism decision tree model rooted at the starting point. It is easy to generate a decision tree for tourism planning, and each path is a candidate answer path.

Controlling the post-coordination of crowd work. With the correlation obtained above, this paper develops a decision tree-based method to control the post-coordination of crowd work in the different subtasks of adjacent phases, which comprehensively considers the matching relationship between the crowd work of the different subtasks in phases and the constraint relationship between different subtasks in phases of a result sequence.

First of all, we compute the former type of correlation among phases of a result sequence. The matching degree between the crowd work of the different subtasks in phases is computed as follows. If the result sequence in previous phases contains only the root node, the matching degree sat(𝛼) is 1; Otherwise, if result sequence 𝛼′ is generated by combing a spot with result sequence 𝛼, the matching degree sat𝑇(𝛼′) is imp⋅sat𝑇(𝛼). Here, imp denotes the matching degree between the newly added spot and the result sequence 𝛼.

Second, according to the obtained correlation between multiple pairs of adjacent phases, the correlation between the entire result sequence 𝛼 is computed as follows. tra𝑇(𝛼)=𝛽×∑𝑘=1𝑛=0tra𝑇(𝑢𝑛,𝑢𝑛+1). Here, 𝛽 is the normalization factor, and tra𝑇(𝑢𝑛,𝑢𝑛+1) denotes the correlation among the different subtasks in two phases.

Consequently, with the computed intrinsic constraint relationship tra𝑇(𝛼) and matching degree sat𝑇(𝛼′) of a sequence 𝛼, we can compute the final comprehensive scoring (C-score) score𝑇(𝛼) of result sequences containing multiple phases. Formally, score𝑇(𝛼)=sat𝑇(𝛼)−tra𝑇(𝛼) For instance, as in Fig. 9, if we want to calculate the comprehensive scoring (C-score) score𝑇(𝛼) of the seq ={Tiananmen, Olympic Park,   Bird′s Nest, Water Cube}. First, we can calculate sat𝑇(seq)=0.4×0.5×0.3=0.006 and tra𝑇(seq)=(0.3+0.4+0.4)𝛽=1.2𝛽. Then, score𝑇(seq)=0.06−1.2𝛽 is obtained.

Note: In order to prevent the decision tree from obtaining local optimal results, we use a top-k method to select K sequences for each decision. When k is larger, the cost is larger, but the final decision tree output results are closer to the global optimal theoretical value. When k is smaller, the cost is smaller, but the final decision tree output result is farther away from the global optimal theoretical value. We will study the specific value of k in experiments.

Fig. 10
figure 10
Performance of different treatments for evaluating the step 3 of Hint

Full size image
Empirical analysis. By considering correlation in task design and processing single-phase task processing through quality perception, in MPTs processing, we compared the two methods respectively. In the result processing, we use a top K approach to controlling the number of results selected in each phase. Here, we consider the cases of K = 1 and K = 2, respectively. And we conducted real experiments for a one-day tour in Beijing starting from Tiananmen. We mark the cases of K = 1 in the method considering the correlation as CAC1. And we mark the cases of K = 2 in the method considering the correlation as CAC2. We further mark the condition in which the correlation is not considered namely, the greedy algorithm as CAN. First, we make a statistical analysis of costs incurred to recruit workers to complete the tasks. The analysis results are shown in Fig. 10a. Second, we evaluate the result sequence in an approach of crowdsourcing by inviting 40 students in Universities of Beijing. The statistical results are shown in Fig. 10. In Fig. 10a, it is shown that the costs of the greedy algorithm and TOP K = 1 case of the quality-aware collaborative method of CAC1 are the same. The reason is that the greedy method of CAN and TOP K = 1 case of the quality-aware collaborative method of CAC1 is designed to pick up the best result at each phase. In both methods, there is a need to complete the same number of tasks as the number of phases. Compared with the greedy algorithm and top K = 1 case of the quality-aware collaborative method of CAC1, the costs incurred in the top K = 2 case of the quality-aware collaborative method of CAC2 is the most. This is because, in the top K= 2 case of the quality-aware collaborative method of CAC2, there is a need to select two optimal results in each phase. Therefore, it entails inquiring more workers, resulting in additional costs. In particular, 31 tasks need to be completed top K = 2 case of the quality-aware collaborative method of CAC2.

Figure 10b plots the evaluation result concerning the quality of the result sequences obtained in different methods. We can observe that the final result quality in the TOP K= 1 case of the quality-aware collaborative method of CAC1 is the best. And the quality of the greedy algorithm of CAN is the worst. The reason is that the greedy algorithm and the TOP K = 1 case of the quality-aware collaborative method of CAC1 just target to derive the optimal ones from the alternatives at each phase. From a more macro-axis, it is easy to fall into a locally optimal. However, in the top K = 2 case of the quality-aware collaborative method of CAC2, the correlation between phases is considered, so the results obtained are closer to the theoretical global optimum. In summary, when handling MPTs, obtaining better result quality entails considering the correlations among subtasks.

Note: In order to further evaluate the performance of the proposed system Hint by analyzing the experiment treatments, we add more empirical analysis of them in the supplementary materials.

Related work
Crowdsourcing tasks
In terms of structural characteristics, crowdsourcing tasks [51] can be roughly put into two categories: micro-tasks [52, 53] and macro-tasks [54, 55]. Micro-tasks cannot be split into more fine-grained subtasks and their handled outcome cannot be further divided. Examples are image labeling [56], peer grading [57], and sentiment analysis [58]. Literature [29] sets micro-writing as a multi-phase optimization task from the perspective of human–computer collaboration, which plays a certain role in the improvement of text in a specific field. Macro-tasks (e.g., handwriting recognition, video recognition [59]) can be any kind of grouping of micro-tasks [60]. According to the structural constraint relationship between micro-tasks [60], macro-tasks can be directly divided into multiple micro-tasks (also referred to as subtasks), and each task is processed by crowd workers in a distributed manner. According to the constraint relationship among the micro-task contained in the macro-task, the results are reasonably combined to obtain the final result of the entire macro-task. This divide and conquer avenue for handling macro-tasks has been widely used and has achieved great success.

In crowdsourcing, there is a common class of macro-tasks, referred to as MPTs [61]. Lots of crowdsourcing tasks fall into this camp, e.g., travel planning  [28], micro-writing [25, 29, 62] and translation [63] et al. Literature [64] proposes a multi-phase programming task for the google developer competition, which provides a high-performance collaborative processing method for competition tasks. The micro-tasks contained in MPTs are inherently constrained by the sequential relationship. The micro-tasks in the current phase are constrained by the micro-tasks in previous phases so that the processing of MPT entails sequential handling.[64, 65] Literature cite3418569 sets micro-writing as a multi-phase optimization task from the perspective of human–computer collaboration, which plays a certain role in the improvement of text in a specific field. However, existing methods [16, 66] for handling macro-tasks do not consider the sequential relationship between the subtasks of MPTs. Thus, the MPTs cannot be solved by existing coordinative methods [32,33,34] for handling macro-tasks.

Pre hoc coordinative handling of tasks
To improve the quality of task processing, previous works used to design various coordinative approaches to organizing the crowds for handling various tasks [67] (i.e., micro-tasks and macro-tasks).

For the micro-tasks, in crowdsourcing, a common method for coordinating workers is worker redundancy [21]. In this regard, several efforts [68,69,70,71,72] have been made on worker coordination under budget constraints. Most of the existing work [68,69,70,71,72,73] targets at how to set the reward for workers according to the difficulty of tasks and the abilities of workers to lower the costs based on the worker redundancy policy. Most works adopt the task processing with workers in synchronous coordination mode: the redundancy of workers is set beforehand, and the task is processed with workers according to the fixed redundancy afterwards [39, 40]. Literature [74] developed an asynchronous collaborative mode to process text data, which optimized and controlled the cost of task processing. Few works have been proposed to control the budget from the perspective of reducing the number of workers employed to process tasks by refining the approach to coordinating the crowds.

For handling the macro-tasks, the method for coordinating the crowds can be divided into two categories: the distributed coordination [75, 76] and iterative coordination [22, 77]. All of them can serve to process the macro-tasks [76]. In distributed coordination avenue, a macro-task is split into several subtasks and each of them is processed by the general workflow [73]. Finally, the answers are combined into a whole result and submitted to the requester. The iterative coordination of crowds is responsible for processing macro-tasks, which need multi-round processing [78].

Different from previous studies, we focus on the coordination of the crowds for handling MPTs. Although a few special cases of MPTs can be successfully handled in previous work, e.g. FFV [31, 79] in an attempt to correct and shorten text in three phases: find, fix, verify, it still calls for a general avenue of coordinating the crowds to process them. In this regard, we propose a novel coordination approach of the crowds to process MPTs.

Post hoc coordinative handling of crowd work
No matter the tasks are micro or macro, existing approaches to post hoc coordinative handling of crowd work mainly use machine-based algorithms to integrate/aggregate the feedback of the crowds. For micro-tasks, the feedback from crowds can be directly handled with a machine-based approach such as the majority voting and probabilistic model-based method. [80,81,82,83,84]. When dealing with micro-tasks, due to the independent nature of all micro-tasks, using the data aggregation method to implement the post hoc coordinative handling of crowd work can achieve high-quality outcomes. For macro-tasks, as discussed previously, it is hard to be directly handled with machine-based algorithms. Thus, researchers [80,81,82,83,84] usually approach these tasks with the coordination of the crowd intelligence from humans and machines. As for the entity description tasks for images, since the feedback from the crowds is complex, heterogeneous, and full of noise, Peng Dai [77] introduced an approach that elicits the wisdom of crowds for tackling the outcomes from other crowds and proposed to employ the voting-based method to handle the result and select high-quality results. Regarding the micro-writing tasks, since writing is an open-ended task, the feedback from the crowds is in subjective form. Since there are certain constraints between different subtasks, it is difficult to use machine-based algorithms to collaboratively process the results of various subtasks contained in a macro-task. At present, for effectively handling this kind of task, coordination of the crowds is also inevitable. When multiple results of writing are completed by crowd workers, the task will be handed over to the crowds for further collaborative confirmation to pick up the outstanding crowd work. Due to the diversity, complexity, heterogeneity, and multi-noise characteristic of the software development tasks, the automated method can hardly select the program components in demand analysis with the guarantee of meeting the software requirements or pick up the worker feedback with high-quality codes during the software development. Thus, the literature [8] introduced a crowd coordination-based method which solicits the wisdom of crowds to determine the software requirements of the user and comprehensively evaluate the quality of software components during software development. Through case analysis, such as handwriting recognition [37], Wikipedia [41], they [8] also pointed out that it is difficult to achieve high-quality software systems for software development in the form of crowdsourcing since the coupling between software modules is ignored. In short, during using crowdsourcing to process macro-tasks, if the correlation between subtasks is ignored, it is difficult to obtain high-quality results of macro-tasks.

To this end, in order to improve the quality of processing multi-phase macro-task, we will give a human–machine coordination method based on the temporal sequential relationship between the subtasks of each phase in the MPT.

Discussion
In crowdsourcing, there are multiple types of tasks. Among them, macro-tasks are rather general. The macro-tasks embrace complex task structures and each of them contains multiple subtasks. The quality of the outcome and the corresponding costs incurred are affected by the mixing of multiple factors. In this regard, the community of human–computer interaction analyzes and studies the influencing factors that affect the cost and quality of handling macro-tasks. MPTs are a typical type of macro-tasks. The process of handling MPTs can be divided into three steps, namely task design, pre-coordination of crowd workers for handling subtasks in the same phase, and post-coordination of the crowd work of the subtasks of different phases. We first give a discussion from these three phases and then we discuss the how crowdsourcing can assist agile software development as well providing a comparison of using crowdsourcing in traditional and agile development.

Task design: In the task design session, we aim to explore the effect of the correlation among the subtasks of MPT on the performance of workers. To this end, we observed abilities exhibited by workers and the information entropy of the task handling results. The experiments showed that the correlation among the same subtasks in a phase leads to a reduction of the information entropy of the task handling results by about 1.24 and the growth of the ability by about 0.3. This all shows that in complex MPTs, the correlation among the subtasks of MPT plays a vital role. However, in the task design of some macro-tasks, the correlation among the subtasks of MPT does not affect the quality of the task handling. For example, for the recognition of the scanned document, if we ignore the correlation among the subtasks of MPT and use a processing mechanism such as reCaptcha, the high quality of task handling can be achieved. This process shows if the handling of subtasks of a kind of complex task is so simple that the high-accuracy answer of it based on human cognitive ability can be directly given, the complex can be well handled by dividing it into multiple subtasks and submit them to workers. When dealing with other macro-tasks, such as handwriting, translation, software programming, etc., due to the difficulty of handling each subtask, the tasks cannot be well-handled with workers without being aware of the correlation among the subtasks of MPT. In this case, the impact of the correlation among the subtasks of MPT should be fully considered in the task design, so that the quality of handling the tasks can be improved.

Pre-coordination of crowd workers: In the phase of pre-coordination of crowd workers for handling the subtasks among a phase of MPT, redundancy of workers is an important factor affecting the cost of recruiting workers. To analyze the impact of different handling flows on the costs, this paper conduct experiments with two modes: synchronous and asynchronous. The experimental results show that the asynchronous coordination model can greatly reduce the worker redundancy on each task while ensuring quality. On the whole, each subtask can reduce five redundancy on average compared to the synchronous coordination mode. This result shows that when pre hoc handling MPTs, the asynchronous coordination mode can effectively reduce the costs incurred. It can be seen that when the worker redundancy is low, the corresponding costs is small, but its quality is also low. Redundancy causes increased cost, so dynamic redundancy control is extremely important. However, when the redundancy reaches a certain amount, its quality enters a slowly increasing process. Therefore, many pieces of literature have researched the problem of the balance between redundancy and quality, and have given a series of cooperative modes. However, in the process of handling MPTs, when the multi-phase subtasks are in different phases, the difficulty varies greatly through different subtasks. In this case, it is hard to set the work redundancy with the specific quality requirement beforehand. Thus, it entails the asynchronous coordination mode in which the costs can be well-controlled due to its real-time quality perception property.

Post hoc handling the crowd work: In the phase of post hoc handling the crowd work, we explore the effect of correlation among subtasks in different phases on the quality of post-coordination of crowd work on these subtasks of MPTs. The experimental result illustrates that when correlation among subtasks in different phases is considered in the post-coordination of crowd work on these subtasks of MPTs, the quality of the final outcome can be highly improved. This verifies the importance of the consideration of the correlation among subtasks in different phases when designing the post-coordination mode of crowd work. Besides MPTs, there are also some other macro-tasks, whose subtasks can be easy to be handled. When the subtasks are rather easy, such as nutrition analysis, each worker can provide higher quality and the correlation among subtasks in different phases can be ignored when post hoc handling of the crowd work. The crowd work can be regarded as independent components and stitched into a whole.

Agile software development with crowdsourcing: Each developer on platforms such as Amazon Mechanical Turk (AMT) is available at unforeseen times and frequently handles jobs on-demand in agile software development with crowdsourcing. These crowd teams on AMT have an ever-changing roster of individuals, making quality control in software development challenging. For example, software development is a sort of macro-job that is typically separated into several components using the high cohesion and low coupling concept. Then, to complete the entire macro-job, developers must collaborate: a course of action is iteratively developed based on the components for which they are accountable. They then carried it out and revised it based on their progress. With certain needs, this procedure includes not only synchronous coordination of various components, but also asynchronous coordination of the same components among developers. As a result, the synchronous and asynchronous coordination elements of software development are handled by the pre-coordination and post hoc coordination steps in the proposed approach Hint, respectively.

In traditional software development, the developers work offline in a defined team to achieve real-time communication. Traditional software development, like agile software development with crowdsourcing, has four phases: requirement analysis, software design, program coding, and software testing. Furthermore, these two software development methodologies differ in the following ways: (1) The cost of development: traditional software development employs fixed workers for long periods of time, incurring more expenses than agile software development, in which workers complete the necessary modules on demand and then terminate the employment connection. (2) The test phase: traditional software testing primarily involves internal or third-party testing, resulting in a smaller test coverage than agile software development with crowdsourcing, in which the workers responsible for software testing are from all over the world and have a wide range of skills.

Conclusions
In crowdsourcing, the quality of MPTs has always been a challenging problem. Due to the sequential constraints between subtasks in phases, it is still difficult to achieve the satisfying quality of handling MPTs even using the state-of-the-art answer aggregation methods. To improve the quality of handling the MPTs, we analyzed the main characteristics of MPTs, namely the existence of sequential constraints between subtasks in each phase. The influence of sequential constraints on the quality of processing tasks is analyzed in the three main steps, namely the task design, the pre hoc coordination of crowds for handling same subtasks, and the post hoc coordination of crowd work of different subtasks. Based on these three steps, a coordinative task processing system with being aware of the sequential relationship among subtasks, Hint system, was established. Based on Hint, we analyzed the process of handling the tasks in each step as well as its final output, illustrating that it can improve the performance of workers, and ultimately improve the quality of task processing.

In the future work, for MPTs, on the one hand, we will further study the model of a rapid grouping of workers to speed up the process of task handling, with the consideration of how to balance the trade-off between quality and efficiency. On the other hand, it is hard to be used to handle complex tasks whose internal structure is non-sequential, so we will further optimize the proposed system to effectively handle various complex tasks.