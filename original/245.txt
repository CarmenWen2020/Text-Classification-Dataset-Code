Traditionally, the non-rendezvous points transmit data towards Rendezvous Points (RPs), and Mobile Sink (MS) visits RPs to collect data. The existing body of research mitigates the problem of data acquisition latency, load on RPs, and energy consumption by regulating the number of RPs. Fewer RPs benefit the data acquisition latency, whereas increased RPs benefit the multi-hop forwarding and load on RPs. This paper takes up these issues and models as multi-objective optimization problem attempting to minimize data collection latency, data load among RPs, and the number of RPs. Particle Swarm Optimization (PSO) is the widely used meta-heuristic method to solve a multi-objective optimization problem with better convergence and minimum overhead. This paper introduces a Multi-Objective Particle Swarm Optimization based RPs Selection (MOPSO-RPS) method for energy and delay efficient data collection. MOPSO-RPS applies a new encoding scheme to generate variable dimension particles that represent each possible set of RPs. Additionally, a new inertia weight tuner is also referred to enhance the convergence speed of multi-objective PSO towards the optimal solution. However, it might happen that after updating the location and velocity in each iteration, the particles become invalid due to the violation of the search space boundary. Thus it adopts a valid particle generator to create valid particles. Moreover, an improved ant colony optimization is also applied to construct the trajectory of MS with fast convergence speed towards the optimal solution. Simulation results depict that the proposed MOPSO-RPS result in 18.61%, 21.11%, and 10.71% average improvement in energy consumption, data load among RPs, and data acquisition latency, respectively, for different number of sensor nodes when compared with the state-of-the-art methods.

Previous
Keywords
Wireless sensor networks

Rendezvous points

Mobile sink

Meta-heuristics

Multi-objective optimization

Particle swarm optimization

1. Introduction
Being as an essential component of today’s cyber–physical systems, the Wireless Sensor Networks (WSNs) (Jain et al., 2019) have earned the attention from both the research and industrial communities. WSN has a wild list of application areas such as environmental monitoring (Kumar et al., 2020), smart agriculture (Sapna et al., 2020), smart cities and homes (Marrero et al., 2019), and so on. One of the vital concerns of WSN is to acquire data from sensor nodes. Two types of methods are used to collect data from WSN. In the first, the sensor nodes forward data towards the base station in a multi-hop fashion (Mehto et al., 2019). Although it is simple and easy to implement, however, suffers from the hot-spot or energy-hole problem near the base station (Mehto et al., 2020c). To overcome this issue, the second method uses Mobile Sink (MS) to collect data from each sensor node in a single-hop manner (Shah et al., 2003). However, it poses data acquisition latency problem due to the long trajectory length of MS (Raj et al., 2020). In this situation, a set of designated sensor nodes is considered as Rendezvous Points (RPs), and non-RPs forward their data to the closest RP (Xing et al., 2008, Wang and Chen, 2018). MS visits these RPs to gather the cached data.

If the number of RPs are more, then it reduces the energy consumption caused during the multi-hop transmission of data towards RPs, (see Fig. 1(a)). This also reduces the data load among RPs. However, visiting too many RPs during data gathering causes a long trajectory length problem and increases data acquisition latency. If the number of RPs is less, then MS has a short trajectory, decreasing the data gathering latency. However, it causes a large amount of energy expenditure due to multi-hop data forwarding towards RPs. Moreover, multi-hop forwarding also increases the data load of RPs and causes unreasonable data load sharing among RPs, as shown in Fig. 1(b). Therefore, a trade-off between the data acquisition latency of MS, the data load balancing among RPs, and the number of RPs is required during the selection of RPs, which constitutes a multi-objective optimization problem (He et al., 2019).


Download : Download high-res image (691KB)
Download : Download full-size image
Fig. 1. RPs based data collection by MS.

In the previous researches, authors have applied many classic meta-heuristics (i.e., Ant Colony Optimization (ACO), Artificial Bee Colony (ABC), Particle Swarm Optimization (PSO)) based approaches to solve single-objective RPs selection problems such as network lifetime maximization problem (Kumar et al., 2018), optimized trajectory length problem (Lu et al., 2019) and minimization of data acquisition latency (Wang et al., 2017). Due to the issues arrived during RPs selection, such as the trade-off between energy consumption, data acquisition latency, and balancing of RPs data load, multi-objective optimization comes into practice. The various qualities such as relative simplicity (Ünal and Kayakutlu, 2020), fewer designing parameters, quick convergence, encoding the solutions using real numbers, and less dependency on initial population lead PSO over other methods to solve different types of combinatorial optimization problems (Liu et al., 2018).

Motivated by the above, this paper proposes a Multi-Objective Particle Swarm Optimization-based RPs Selection (MOPSO-RPS) method that provides delay efficient trajectory formation and load balancing of RPs for the delay and energy-efficient data collection. The proposed approach has three phases, namely, the bootstrapping phase, the RPs selection phase, and MS’s trajectory formation for the data collection phase. In the first phase, the MOPSO-RPS method constructs a Direct Spanning Tree (DST) (refer Section 4.1) to calculate the forwarding load and forwarding node of each sensor node. The set of selected forwarding nodes is considered as probable candidates of RPs in the second phase. The RP’s selection phase chooses a set of optimal RPs using the Multi-Objective Particle Swarm Optimization (MOPSO) method by following three objective functions (i.e., minimization data acquisition latency, the data load of RPs and the number of RPs) (see Section 4.2). As the MOPSO suffers from false Pareto front due to the high speed of convergence, the proposed MOPSO-RPS applies a new Inertia Weight (IW) tuner to select a set of optimal RPs. Moreover, during particle updation, some particles (i.e., a set of RPs) may go beyond the boundary of search space; hence a Valid Particle Generator (VPG) operator is also adopted from Chaudhry et al. (2018) to convert invalid particles into valid particles. In the last phase, the trajectory is formed by applying an improved ACO in terms of convergence rate. Then, the MS periodically visits the constructed trajectory for data collection from the WSN (see Section 4.3). Extensive simulation of the proposed method is carried out by considering two scenarios (i.e., different number of sensor nodes, and various transmission range of sensor nodes) of WSN. Simulation experiment results are compared with three state-of-the-art methods; namely, Ant Colony Optimization-based Mobile Sink Path Determination (ACO-MSPD) (Kumar et al., 2018), Particle Swarm Optimization Based Selection (PSOBS) (Tabibi and Ghaffari, 2019), and Energy-efficient Trajectory formation of MS using Multi-Objective Particle Swarm Optimization (ETMS-MOPSO) (Kaswan et al., 2018). The results depict that the proposed MOPSO-RPS outperforms these three methods in terms of energy consumption, network lifetime, data load among RPs, data gathering ratio, and data acquisition latency.

The remaining part of this paper is presented as follows. Section 2 shows the related work in the field of RPs selection and trajectory formation of MS. Section 3 discusses the system model and problem formulation for the proposed MOPSO-RPS method. Section 4 presents the details of the proposed MOPSO-RPS method. Section 5 shows the simulation results and discussion of the results. Finally, Section 6 concludes this paper.

2. Related work
Data collection via MS has gained interest in the last few decades to solve the energy-hole problem. Fig. 2 shows the taxonomy of the MS-based data acquisition methods. Based on how the MS goes around to collect data from the network, the MS-based data collection methods can be broadly classified into direct and rendezvous based data collection (Mehto et al., 2020b). In the direct data collection, MS visits each sensor node to acquire data directly via one-hop communication (Shah et al., 2003, Sugihara and Gupta, 2009).


Download : Download high-res image (229KB)
Download : Download full-size image
Fig. 2. Taxonomy of mobile sink based data acquisition methods.

In the case of rendezvous based data acquisition (Shin et al., 2005, Hamida and Chelius, 2008, Salarian et al., 2014), some designated sensor nodes take part in the process of data acquisition and are used to store the sensory data or the current location information of the MS. During data gathering process, upon receiving the query, the source nodes forward data towards MS via the designated nodes or in some cases, the MS visits these designated nodes for data collection. Thus, the selection of designated sensor nodes is a critical task, as it requires a trade-off between energy consumption and data acquisition latency. On the basic of the selection of designated nodes, the rendezvous based data acquisition can be categorized into rendezvous area-based and RP based data gathering methods.

Rendezvous area-based methods (Shin et al., 2005, Hamida and Chelius, 2008) store sensory data, or current location information of MS inside a virtual rendezvous area. If data are kept inside the rendezvous area, then the MS acquires data directly from it. Different from this, some times the source node obtains the current location information of MS from the rendezvous area and then forwards its sensory data towards MS. In RP based methods a set of designated sensor nodes are assumed as RPs and the non-RP nodes forwards data towards them. Subsequently, the MS visits these RP for data gathering.

The RPs-based data collection further grouped into classical methods (Salarian et al., 2014, Almi’ani et al., 2010, Alnuaimi et al., 2015) and meta-heuristic based methods (Wang et al., 2017, Kumar et al., 2018) for their selection. The first category applies conventional methods like clustering, tree, and grid for RPs selection. Thus, in this category, the RPs selection is carried in three ways: 1. cluster-based (Almi’ani et al., 2010), 2. tree-based (Salarian et al., 2014), and 3. grid-based (Alnuaimi et al., 2015).

The second category chooses a set of optimal RPs by considering objective function(s) under different constraints for energy and delay efficient data collection.

This section presents the most prominent data collection methods, which adopt the meta-heuristics techniques for RPs selection, and the data gathering.

Wang et al. (2017) proposed a Variable Dimension Particle Swarm Optimization (VD-PSO) method for efficient data acquisition under the non-uniform distribution of sensor nodes. In VD-PSO, each possible path is considered as a particle having a dimension equal to the number of RPs, and the minimum distance path is selected as the trajectory of the MS. Although it provides the best route between sensor nodes and reduces data acquisition latency for small scale WSN, however, for large-size networks, it incurs the data acquisition latency problem as the MS visits a large number of RPs. Furthermore, consideration of data load among RPs during their selection for energy-efficient data collection is also needed.

Ant Colony Optimization-based Mobile Sink Path Determination (ACO-MSPD) Kumar et al. (2018) is proposed that creates a directed spanning tree to identify the forwarding node for each sensor node under non-uniform data generation constraint. The ACO-MSPD applies the ant colony optimization algorithm to find a near-optimal set of RPs and the MS trajectory to maximize the network lifetime and minimize the data collection latency. However, it does not examine the minimization of data load among RPs and the number of RPs which lead to the early death of RPs. Furthermore, it does not provide any solution towards a slow convergence rate during trajectory formation and can easily be trapped into the ACO algorithm’s local optima property.

The work in Ren et al. (2019) proposed a reliable data gathering method using Improved Artificial Bee Colony (IABC) optimization which considers the maximize data collection, and the formation of the shortest trajectory of MS is an optimization problem. The IABC dynamically selects the cluster head as RPs. Then it takes into account the transmission path between non-RP and RPs for maximizing the data collection and get the shortest trajectory of MS using improved bee colony optimization. The improved method overcomes the shortcoming of the bee colony method in terms of low ability to search in slow evolution and premature convergence. However, for both the energy and delay efficient data collection, multi-objective (i.e., minimization of data acquisition latency, data load among RPs, and number of RPs) based RPs selection is required.

Kaswan et al. (2018) proposed an Energy-efficient Trajectory formation of MS using Multi-Objective Particle Swarm Optimization (ETMS-MOPSO) algorithm to find RPs. This method uses particles to find RPs, and the dimension of each particle is equal to the number of RPs. The number of RPs are considered as 10% of the total number of sensor nodes. ETMS-MOPSO considers two objective functions for RPs selection. The first objective function minimizes the maximum average transmission distance of RPs, and the second objective function minimizes the maximum number of total hop count at RP. In this manner, ETMS-MOPSO provides a trade-off between trajectory length and energy consumption of sensor nodes for efficient data acquisition. However, convergence towards optimal solution with minimum overhead is still needed. In addition to this, improvement in trajectory planning algorithm is still needed.

Zhang et al. in (Zhang et al., 2019) proposed a method of Data Collection using Ant Colony Optimization with MS (DS-ACOMS) for industrial WSN. This method reduces the number of RPs based on the entropy weight method to minimize data acquisition latency. The entropy weight method jointly considers the density of sensor nodes, relative residual energy, and the degree of uniformity of sensor node distribution to select RPs. Furthermore, the ACO method is used to obtain the trajectory of MS from the selected RPs. However, DS-ACOMS gets RPs without considering the data load balancing among RPs, causing degradation in network lifetime. Furthermore, it does not provide any solution to re-select RPs if the energy-hole problem going to occur around them.

Particle Swarm Optimization Based Selection (PSOBS) is suggested in Tabibi and Ghaffari (2019), which chooses a near-optimal set of RPs for efficient utilization of network resources. Each sensor node calculates a weight value by collectively considering the number of data packets a sensor node is received from other nodes and then apply the PSO method to divide the network into RPs. At last, the PSO algorithm is also used to form a near-optimal trajectory of MS for data collection. However, it does not provide any solution to re-select RPs if the energy-hole problem going to occur around them. Moreover, a solution is still required to keep the particles inside the search space if they go beyond the boundaries of the search space.

In Mehto et al. (2020a) authors have proposed Particle Swarm Optimization-based Rendezvous Point Selection (PSO-RPS) to choose optimal RPs for delay efficient data gathering from WSN. The PSO-RPS selects RPs using the PSO algorithm under the data delivery delay and traffic rate constraints of sensor nodes. After that the Christofides heuristic is applied to form the trajectory of MS for data collection. The PSO-RPS method collects data with minimum data acquisition latency, however the fair balancing of data load is still required to provide equal energy consumption at each RP. Furthermore, it does not provide any solution to maintain the particles within search space in case they go beyond their boundaries.

Upon analysing the existing RP based data collections methods, the following research questions arise:

•
How to maintain a trade-off between data acquisition latency, and energy consumption of sensor nodes while providing equal data load sharing among RPs ?

•
How to define the relationship between a set of RPs and the dimension of the particles ?

•
How to provide better convergence towards optimal solution with minimum overhead ?

•
How to plan the delay optimal trajectory of MS ?

•
How to rotate the role of RPs among sensor nodes to eliminate the energy-hole problem ?

The research questions lead to the design of a novel energy and delay-efficient data acquisition method which chooses a set of optimal RPs using an improved MOPSO approach.

2.1. Contributions
The major contributions of this article are:

•
A multi-objective (i.e., minimization of data acquisition latency, minimization of RPs data load, and minimization of the number of RPs) based RPs selection to provide energy and delay-efficient data collection.

•
An efficient encoding scheme to generate variable dimensional particles that represent a set of optimal RPs for energy and delay-efficient data collection.

•
An adaptive tuning of Inertia Weight (IW) to improve the convergence speed towards the optimal solution and hence reduces the energy consumption of MOPSO-RPS.

•
An improved ACO method for trajectory formation considering minimum distance as heuristic information to increase global search capability and convergence rate, and to avoid trapping in local minima.

•
On-demand re-selection of RPs to avoid energy-hole problem for efficient data acquisition.

3. System model and problem formulation
This section starts with the description of the system model and then the problem formulation is presented.


Table 1. Notations.

Notations	Description
Base station
Set of sensor nodes
Number of sensor nodes
Set of RPs
Number of RPs
Set of forwarding nodes
Speed of MS
Distance between RPs 
 and 
Data acquisition latency
Data load among RPs
Set of non-RP sensor nodes of a RP 
ɛ
Data load of an RP 
 ()
ɛ
Average data load among RP
If RP 
 is visited then 
, else 
Negative value of number of RPs
The buffer size of a sensor node 
 () (in packets)
A set of neighbouring sensor nodes of a sensor node 
Transmission range of sensor nodes
New IW tuner
3.1. Network model
For the network model, a WSN with MS constitutes a set of  number of static sensor nodes 
 and a base station 
. The network area is obstacle free. Sensor nodes are uniformly distributed inside a  sensor field. The network does not have any isolated sensor nodes. Each sensor node has a unique IDentification number (IDn) and has location-aware capability using the localization method (Han et al., 2013). The IDn and location information of sensor nodes are gathered during the deployment of the network.

The MS moves inside the sensory field to acquire data. MS knows the geographical locations of sensor nodes. Sensor nodes are homogeneous, and wireless channels are bidirectional. Sensor nodes have equal buffer storage (i.e., stores B data packets) and transmission range. Transmission link exists between two sensor nodes 
 and 
 iff 
 lies in the transmission range 
 of the sensor node 
. Each sensor node sense the environment and generate data unevenly based on the events occurred in its vicinity. Sensor nodes are resource-constrained and have limited battery power. MS is a resource-rich device in terms of energy and storage capacity.

Consider a set of RPs 
 and . An RP stores data forwarded by all its corresponding non-RP nodes. MS visits these RPs to collect data in each data gathering round and then delivers them to the base station 
. Data gathering time that an MS spend at each RP is negligible as compared to the travelling time. For simplicity purpose the speed  of MS is constant. Lastly, all the non-RPs nodes forward data towards RPs before MS’s visit, so the MS does not wait to receive data.

Table 1 shows a list of notations that will be referred throughout this paper.

3.2. Energy model
The energy model has been adopted from (Heinzelman et al., 2000) to calculate the energy consumption of the system.

3.3. Problem formulation
Consider a set of optimal RPs , where 
, and . RPs store data forwarded by their associated non-RPs nodes. In each data collection round, let MS starts with the base station and moves one by one to each of the selected RPs for data collection with a speed of  and eventually returns to the base station. As the data transmission speed of any RP is much faster than the MS speed, the data acquisition latency only depends on the trajectory length of MS. Therefore to minimize the data acquisition latency, the reduction in the trajectory length is required. The reduction in the trajectory length shows that the MS visits less number of RPs. It indicates that the non-RP nodes forward data towards RPs in a multi-hop manner, increasing the energy consumption of these nodes. In order to reduce the energy consumption caused by the multi-hop transmission of non-RPs towards RPs, the selection of the optimal number of RPs is needed. In other words, the maximum is the number of RPs, and the minimum is the multi-hop transmission towards RPs. The data load of an RP also influences the energy consumption of the network. The minimum the data load an RP is received from its child node, the lower the data load ɛ it will bear. Lower data load reduces the amount of energy dissipated in data transmission towards MS by an RP. Therefore, a reduction in the standard deviation of the data load will also reduce the energy consumption and increase the network lifetime.

From the above discussion, it is clear that RPs selection for energy and delay efficient data collection is a multi-objective optimization problem, which requires minimization of three objective functions: data acquisition latency, number of RPs, and data load of RPs.

The multi-objective optimization problem requires the minimization of fitness function based on the various objectives. The details of multi-objective for RPs selection is presented as follows:

•
Data acquisition latency :- The data acquisition latency is closely related to the length  of the constructed trajectory. Therefore, to reduce the data acquisition latency , Eq. (1) sets the first objective function.

•
Number of RPs :- The maximum is the number of RPs, the minimum is the multi-hop transmission from non-RP nodes towards RPs. Therefore, Eq. (2) sets the second objective to select optimal number of RPs. Here, minus sign is added to convert maximization problem into minimization problem.

•
Data load of RPs  :- To minimize the network’s energy dissipation, the data load of RPs  is also needed to be minimum. In other words, the standard deviation of the data load among RPs is minimized. Eq. (3) sets the third objective function. (1)
 
 (2)
 (3)
 
ɛ
ɛ
Subjected to: (4)
ɛ
 (5)
 (6)
where Constraint (4) assures that the buffer capacity of RPs does not overflow. Constraint (5) make sure that every sensor node 
, which is in the transmission range of any RP, must be delivered data towards them within one-hop. Constraint (6) ensure that if a sensor nodes 
 is not in the transmission range of any RP 
 but it is in the transmission range of any sensor node 
 which is attached to any RP 
, then sensor node 
 is also belongs to that RP 
.

The functions mentioned above are examined simultaneously during the selection of a set of optimal RPs. Here the task is to minimize all the objectives. Typically any multi-objective optimization problem consists of a set of Pareto optimal solutions (Coello et al., 2007) during the examination of all the objective functions. Hence, for  (where ) objective functions, a multi-objective optimization problem can be obtained as follows: 
where 
 is an -dimensional decision vector that satisfies  number of constraints, 
. Moreover the decision vector  influences each objective. The decision vector  is said to Pareto-optimal corresponding to , if there does not exist any vector 
 which dominates . All the sets of Pareto-optimal solutions in the decision vector and its corresponding objective vector set (i.e., Pareto-optimal front) make a Pareto-optimal set (Zhang et al., 2020).

4. The MOPSO-RPS method
This section presents the proposed MOPSO-RPS method for energy and delay-efficient data gathering. The proposed method works in three phases: (1) Bootstrapping (2) RP’s selection, and (3) MS’s trajectory formation for data acquisition.

The bootstrapping phase finds the forwarding node of each sensor node. The set of forwarding nodes forms a DST and acts as the probable candidates of RPs in the next phase (see Section 4.1). In the second phase, the proposed MOPSO-RPS method find RPs from the set of probable candidates, which was found in the bootstrapping phase (see Section 4.2). In the last phase, the selected RPs are used to construct the trajectory of MS to collect the data from WSN (see Section 4.3).

Algorithm 1 shows the working process of the proposed MOPSO-RPS method. In line number 2, the selection of forwarding sensor nodes occurs (refer Section 4.1). Line number 3 to 23 describes the process of a set of optimal RPs selection.


Download : Download high-res image (619KB)
Download : Download full-size image
The complete process is illustrated as follows. Line number 3 generates the initial population in the multi-dimensional search space as described in Section 4.2.1. Line number 4 calculates the fitness of each particle using Eqs. (1), (2), (3), and then the empty archive Arch is initialized (see line number 5). In line number 6,  of each particle of the population is initialized, and then the non-dominated particles are placed into the archive (see line 7). , , velocity, position, SPV, VPG, and Arch updated repeatedly until the termination criteria is not satisfied (see line number 8 to 23). In line number 12,  of each particle is selected from the archive by applying the roulette wheel (Deb et al., 2000) leader selection approach. Particles velocity and position is updated in line number 13 and 14, respectively. Line number 15 and 16 shows the process of SPV and VPG, respectively. Subsequently, line number 17 calculates the fitness of each particle using Eqs. (1), (2), (3). Line number 18 to 20 updates the value of  of each particle with the current position value if the particle’s fitness value is greater than the . Line number 22 updates the Archive. In line number 24, one of the Pareto optimal solutions is selected by a decision-maker from the archive Arch. At last, an improved ACO based TSP solver takes a set of RPs as input to find the path of MS for data collection (refer line number 25).
4.1. Bootstrapping
In this phase, each sensor node is assigned with a unique Identification Number (IDn). After that, sensor nodes use CSMA/CA MAC layer protocol for the broadcasting of their IDn inside the network. In this way, a sensor node knows the sensor nodes’ IDns in its transmission range. Afterwards, this phase forms a DST  from the graph , where  is the set of  sensor nodes and 
 is the set of edges between sensor nodes. The formation of DST provides a clear understanding of the data forwarding path among sensor nodes and helps to select a set of optimal RPs in the next phase. The DST formation process starts with calculating the data load of each sensor node. Each sensor node 
 manages a set 
, such that 
 to store IDs of all its neighbour node along with their data load. Suppose ɛ
 indicates the data load of a sensor node 
. The data load is calculated as: (7)ɛ
ɛ
 where 
 shows the number of data packets generated by the sensor node 
, and ɛ
 indicates the data forwarded by all its neighbouring nodes.

Algorithm 2 shows process of forwarding node selection for each sensor node. This algorithm first calculates forwarding weight of each sensor node (line number 2 to 4). Then each sensor node  selects its forwarding node by applying two cases: Case:1 (line number 6 to 9) if ɛ
ɛ
,    then neighbouring sensor node 
 with maximum weight become the forwarding node of 
. Case:2 (line number 10 to 12) if ɛ
ɛ
,    then the neighbouring sensor nodes 
 of node 
 with maximum weight from the  become the forwarding node of 
. The nodes in the selected set of forwarding nodes  are considered as the probable candidates for RPs in the next phase. The selected forwarding nodes are organized in a DST for further processing.


Download : Download high-res image (404KB)
Download : Download full-size image
4.2. RP’s selection
This phase applies the MOPSO algorithm to select a set of optimal RPs from the set of forwarding nodes. Defining a relationship between a set of RPs and the dimension of a particle is a pivotal question to solve the RPs selection problem. In other words, a particle represents a set of RPs as a possible solution, and the number of RPs depicts the dimension of that particle.

The proposed MOPSO-RPS uses variable dimension particles to represent one possible set of RPs, and the dimension of that particle is equal to the number of RPs. The dimension of each particle might be variable because each particle represents a set of RPs under some constraints (as specified in Eqs. (4), (5), and (6)).

This phase consists of eight sub-phases: Encoding, SPV, new IW tuner, VPG, Fitness measure, Archive management and selection of  and , Updating rules, and Termination condition.

4.2.1. Encoding
Initially, the particles having population  (i.e.  is the total number of particles) are generated in the multi-dimensional search space to discover a set of RPs i.e., . As each particle shows a set of RPs hence length of each particle can be variable in the form of position and velocity. The dimension of each particle represents the total number of RPs that the MS visits its trajectory during data gathering. Each particle share the location information with each other that will help them to update their respective location and velocity in the direction of the optimal solution. Each particle has two elements, namely: position and velocity. The position and velocity of th particle can be presented using the vectors 
 and 
 (where ), respectively. Eq. (8) initializes position vector of a particle corresponding to 
 dimension at 0th iteration as follows: (8)
where  is a uniformly distributed random number in the range of 0 and 1. The velocity vector is initialized as: (9)
where the value of 
 and 
 are defined in the limit of [0.0, 4.0] and [-4.0, 4.0], respectively. During a simulation, the maximum and minimum value of position and velocity of particles are used to form a boundary over the search space.

Algorithm 3 shows the process of particle encoding. First, the population is initialized to an empty set (line number 2). Line number 4 through 27, the encoding process repeatedly runs for the total size of  (i.e., the population). For each forwarding node, the RP node’s buffer capacity constraint and the hop distance constraint between RP and non-RP nodes (same as Eqs. (4), (5), and (6)) are checked to choose RP (line number 7 to 22). After that, each particle’s position and velocity vectors are initialized (line number 23 to 26).

To show the working of the encoding process, a network with 25 randomly placed sensor nodes is considered. After applying the encoding process, particle one is shown for iteration number zero in the form of position 
 and velocity 
 vectors in Table 2 (refer row 2). It shows that particle one has seven sensor nodes, i.e., 2, 8, 11, 16, 19, 20, and 25 as RPs at iteration zero. Thus the dimension of this particle is seven. Similarly, particle two is shown for iteration number zero in the form of position 
 and velocity 
 vectors in Table 3. It shows that particle two has six sensor nodes, i.e., 3, 6, 10, 12, 17, and 22 as RPs at iteration zero. Thus the dimension of this particle is six.


Download : Download high-res image (469KB)
Download : Download full-size image

Download : Download high-res image (184KB)
Download : Download full-size image

Table 2. Output of Encoding for particle one.

Output	Q	2	16	25	11	19	8	20
Encoding	
2.1	1.6	2.5	3.8	0.7	2.3	4.0
1.47	−1.6	−2	3.5	2.7	2.3	1.9

Table 3. Output of Encoding for particle two.

Output	Q	12	6	11	19	22	3
Encoding	
3.1	3.6	1.5	2.4	1.78	2.6
−1.2	1.25	3.4	0.14	−2.8	1.7

Table 4. Output of SPV for particle one.

Output	Q	2	16	25	11	19	8	20
Encoding	
2.1	1.6	2.5	3.8	0.7	2.3	4.0
1.47	−1.6	−2	3.5	2.7	2.3	1.9
SPV	
19	16	2	8	25	11	20

Table 5. Output of SPV for particle two.

Output	Q	12	6	11	19	22	3
Encoding	
3.1	3.6	1.5	2.4	1.78	2.6
−1.2	1.25	3.4	0.14	−2.8	1.7
SPV	
11	22	19	3	12	6
4.2.2. Sequence position vector (SPV) method
Initial encoding generates the solution or particles using continuous position vector. However, a set of RPs requires values in the discrete position vector, because a set of RPs is presented by a node IDn. Node Id must be a discrete value; hence, conversion from continuous to discrete position vector is needed. SPV (Tasgetiren et al., 2004) is an extensively utilized heuristic method in this regard.

Algorithm 4 shows the working process of SPV. It first sorts the value of position vector  in ascending order in each iteration (line no. 2). Then it chooses the respective old index (dimension) value of those position vectors as the discrete value vector  for a particle for all dimensions in each iteration (line no. 3). Following the example of Section 4.2.1, the output of SPV is presented in Table 4, Table 5 for particles one and two, respectively (refer row number 3).

4.2.3. New inertia weight (IW) tuner
The IW  is an essential factor that influences the convergence rate of the particles towards the optimal solution. According to the study in Kumar and Vidyarthi (2016), a higher value of  (i.e., between 0.9 and 1) allows the PSO method to explore the solution in the high global search space. However, the lower value of  drags the PSO to search in the local search space. In this situation, the concept of adaptively tuned IW  is taken into account to provide a trade-off between the exploitation and exploration process. To achieve the adaptive tuning of  in each iteration of the MOPSO-RPS method, three essential factors can be considered (Kumar and Vidyarthi, 2018). First, the normalized fitness value (NFV) of the swarm at th iteration, value of  in the previous iteration (i.e., ) and maximum number of iterations 
. Along with this, the logarithmic reduction of IW efficiently controls the proposed method’s convergence towards the optimal solution. In this way, the new IW tuner  at th iteration can be presented as: (10)
 
 
 
where  and  provides weightage to the NFV and  respectively. Experimentally, the values of  and  are set to 0.6 and 0.2, respectively to achieve adequate convergence. The proposed MOPSO-RPS method significantly improves the performance by adapting the tuned IW function with the objectives as discussed in the Eqs. (1), (2), and (3).

4.2.4. Valid particle generator (VPG)
In the traditional MOPSO, the particles are generated randomly in a multi-dimensional search space. The particles also update their position and velocity using the IW in each iteration of the MOPSO (Chaudhry et al., 2018). In this situation, there is a high probability that some particles may go beyond the boundary of the search space and raises the generation of some invalid particles. In other words, there is a high probability that the consequent node (i.e., RPs) sequence (generated after the SPV) of a particle may not follow the communication constraints between RPs and non-RPs nodes as assumed in the real WSN scenario (refer constraints (5), and (6)). The auto-conversion of these invalid particles into a valid one is difficult, as they require a lot of computational time and energy. The VPG (Chaudhry et al., 2018) is used to mitigate this problem, which converts the invalid particle into valid particles. The VPG first identifies the suspicious sensor nodes of particles that might generate invalid particles. After that, it changes the wrong direction to convert them into a valid particle. Algorithm 5 depicts the working of the VPG. The output vector of SPV (i.e., 
) and its related 
, and 
 (i.e., position and velocity vectors) are the inputs for the VPG.


Download : Download high-res image (474KB)
Download : Download full-size image
The VPG first stores the in-degree and out-degree of each particle in  and  variables, respectively. Sensor nodes of a particle having different out-degree are replaced with a random node from the set of sensor nodes with zero in-degree. This procedure is iterated till the verification of all the particle, and lastly, the updated sequence vector 
, position vector 
, and velocity vector 
 are returned.


Table 6. Output of VPG for particle one.

Output	Q	2	16	25	11	19	8	20
Encoding	
2.1	1.6	2.5	3.8	0.7	2.3	4.0
1.47	−1.6	−2	3.5	2.7	2.3	1.9
SPV	
19	16	2	8	25	11	20
VPG	
19	8	11	25	2	NIL	NIL

Table 7. Output of VPG for particle two.

Output	Q	12	6	11	19	22	3
Encoding	
3.1	3.6	1.5	2.4	1.78	2.6
−1.2	1.25	3.4	0.14	−2.8	1.7
SPV	
11	22	19	3	12	6
VPG	
3	11	19	22	NIL	NIL
Following the example of Section 4.2.1, the output of VPG is presented in Table 6, Table 7 for particles one and two, respectively (refer row number 4).

4.2.5. Fitness measure
Fitness function is used to measure the quality of each generated valid particle (i.e., a set of RPs) in the search of an optimal solution. Here the problem is a multi-objective optimization problem; hence a particle is tested for every objective function. Three objectives are considered to select the optimal RPs. The definitions of these objectives are given in Eqs. (1), (2), and (3).

4.2.6. Archive management and selection of  and 
Archive management.
As the selection of a set of optimal RPs is a multi-objective optimization problem, hence the proposed MOPSO-RPS method creates a repository or archive of Pareto-optimal solutions in each iteration. The archive contains all the non-dominated particles or solutions. At the end of each iteration, the newly created non-dominated solutions are placed within the archive and the old solutions which are dominated by the new solutions are removed from it. Once the termination condition is reached, one of the Pareto optimal solution is selected from the archive.

Selection of  and .
•
: If the current fitness value of the particle is better than the previous fitness value of the , then the  is updated with the current position value of the particle.

•
: The roulette wheel (Deb et al., 2000) leader selection approach is used to choose  from the non-dominated solutions of the updated archive.

4.2.7. Updating rules
Using the value of , and  all the particles update their position and velocity using Eqs. (11), (12) respectively in each consecutive iterations. (11)
 (12)
where 
 and 
 is the velocity and position vector of th particle in q-dimensional search space at the iteration number  respectively.  represents the IW. 
 and 
 are two randomly generated coefficients in [0 1] range. 
 and 
 denotes acceleration coefficients.

4.2.8. Termination condition
The termination condition is used to decide when the iterative process of PSO is stopped. The two conditions to decide the termination condition for the proposed MOPSO-RPS are: (1) the maximum number of iterations of PSO, and (2) when all the particles will get the same position.

4.3. Ms’s trajectory formation for data acquisition
In this phase, the set of RPs obtained from the previous “RP selection” phase is utilized to form the trajectory of MS. The MS starts from the base station and visits the selected RPs one by one and then returns to the base station for data offloading. Thus, the trajectory formation problem is the travelling salesman problem (TSP) which is an NP-hard problem. Hence, an improved ACO method is applied to construct MS’s trajectory for data acquisition from the network.

ACO is an iterative process, in which the ants update the pheromone value in each iteration during its visit from city or node  to . Eq. (13) presents the pheromone value 
 updated by an ant : (13)
where the coefficient  is the pheromone decay parameter which show the evaporation of the pheromone from the visited edges, and .  is the number of ants. 
 is the quantity of the pheromone laid between the cities  and  and its value can be calculated as: (14)
 
 where  presents a constant value, and 
 shows the total length of the trajectory created by an ant . The probability function 
 (Dorigo et al., 1996) is applied to visit the next RP node during the formation of the MS trajectory and can be presented as: (15)
 
 where  and  parameters control the relative value of the path pheromone 
 and heuristic information 
, respectively. 
 is the heuristic value of moving from an RP node  to another RP , 
 is the visited city set of ant .

The conventional ACO method is suffered from slow convergence rate and can be easily trapped into local optimal solution. Therefore, the distance heuristic factor is again considered to increase the affect on the starting point i.e., the base station. 
, is improved by considering the minimum sum of the distance from current selected RP to the next RP and in this way to the base station (because the collected data is finally uploaded to the base station). Consideration of the minimum distance as heuristic information increases the capability of global search, avoids trapping in local minima, and enhances the rate of convergence. Thus: (16)
 
where  is the distance from current RP  to the next RP  and 
 is the distance from next RP  to the base station 
. (17)
 
 
 
 

Thus, the improved ACO, as shown by Eqs. (13), (14), (17) is used by the MS to visits the RPs for collection of data. In this way, data acquisition latency is reduced.

4.4. RPs reselection
In the proposed MOPSO-RPs, RPs re-selection occurs in two ways, which are given as:

•
The data load of the forwarding sensor nodes changes whenever the nodes inside the network generate data non-uniformly. In this situation, the selected RPs are assumed as obsolete because the data load of sensor nodes has been changed, and it may affect the energy efficiency of the network. Thus, there is a need to re-select some RPs to enhance energy-efficient data collection.

•
RPs are also responsible for forwarding the data of non-RPs towards MS. Hence they are more prone to exhaust their energy quickly and create energy-hole, which significantly influences the network lifetime. RPs’ re-selection is the solution to deal with the energy-hole problem. Therefore, to perform the re-selection of RPs, after each data acquisition round RPs compare their residual energy with a predefined threshold value. If the remaining energy is less than the threshold value, the RP sends an RP re-selection request to the base station. After receiving the request, the base station initiates all the three phases of MOPSO-RPS for reliable and energy-efficient data collection. This type of on-demand re-selection of RPs reduces the re-construction overhead of the bootstrapping phase after each data collection round.

4.5. Analysis of time complexity
Lemma

Time complexity of MOPSO-RPS method is 
.

Proof

MOPSO-RPS method mainly consists of three phases, bootstrapping, RP’s selection, and MS’s trajectory formation for data collection. In the bootstrapping phase, formation of DST takes  time complexity, where  is the number of sensor nodes in WSN. In the RP’s selection phase, the MOPSO method is used to select RPs. According to study (Zhang et al., 2011), in MOPSO the archive updation takes longer time and has a time complexity of 
, where  is the capacity of the archive and  defines number of particles. In the last phase, an improved ACO method is applied to find the trajectory of MS. The approach for calculating the time complexity of improved ACO is adopted from Attiratanasunthron and Fakcharoenphol (2008). The evaporation rate  significantly affects the time complexity. The time complexity is , where  is the number of ants, and  is the number of RPs. In this way, the time complexity of MOPSO-RPS is 
. Thus the overall time complexity of MOPSO-RPS is depends on the number of particles  and size of the archive .

The time complexity of ACO-MSPD is ,  is the evaporation rate of the pheromone.  is the number of ants, and  is the number of sensor nodes. The time complexity of PSOBS is 
.  denotes the population size or number of particles,  is the dimension and  is the number of sensor nodes. The time complexity of ETMS-MOPSO is 
.  is the number of sensor nodes.

The ACO-MPD applies single-objective optimization to choose RP for data collection; hence its time complexity is slightly better than the proposed MOPSO-RPS. However, the proposed MOPSO-RPS selects RPs for data collection by considering three objective functions; thus, it determines RPs more efficiently in terms of energy consumption and network lifetime than ACO-MSPD. Unlike this, the proposed MOPSO-RPS outperforms the PSOBS and ETMS-MOPSO in terms of time complexity.

5. Results and discussion
The Network Simulator-2.35 (NS-2.35) is utilized to carry out the simulation, and the simulation results are used to evaluate the performance of the proposed MOPSO-RPS method.

5.1. Performance metrics
The efficiency of the proposed MOPSO-RPS method is evaluated based on the total energy consumption, network lifetime, data load among RPs, data gathering ratio, and data acquisition latency.

•
Total energy consumption — Total energy consumed by all the sensor nodes during each data acquisition round.

•
Network lifetime — Various definitions of the network lifetime for WSN are available in the literature (Yetgin et al., 2017). It is measured in terms of total data acquisition round. An RP is an energy-critical element of the sensor field as it consumes an enormous amount of energy during transmission and reception of data packets. Therefore, the more an RP is alive, it can defend an equal energy share among sensor nodes. In other words, an increase in the total number of data acquisition rounds until the first RP completely exhausts its energy shows that the energy consumption is equally shared among sensor nodes or not. Hence, first, the network lifetime can be defined as the total number of data acquisition rounds since the establishment of the network until the first RP’s death. Second, network lifetime can be defined as the total number of data collection rounds since the establishment of the network until the last sensor node dies (Kumar et al., 2018).

•
Data load among RPs — It can be defined as the standard deviation of the total data load among RPs. Eq. (3) defines the data load of RPs (see Section 3.3).

•
Data gathering ratio — The ratio of data gathered by MS over the total data produced by all the sensor nodes in a data acquisition round.

•
Data acquisition latency — It is defined as the time taken by MS to follow the constructed trajectory for data acquisition and deliver them to the base station.

The following sub-sections discuss the simulation scenario, results, and comparative performance evaluation of MOPSO-RPS.


Table 8. MOPSO-RPS parameters for MOPSO.

Parameters	Values
Size of population	40
Maximum iteration	250
Range of particles’ position vector	
2
 and 

Table 9. Parameters for simulation.

Parameters	Values
Deployment area	 m
Initial energy of sensor nodes	 Joule
Number of sensor nodes	
Transmission range	 m
Data packet generation rate	 per second
Data packet size	 bits
Control packet size	 bits
Speed of MS	 m/sec
Simulation time	 sec
 nJ/bit
 pJ/bit/m
 pJ/bit/m
5.2. Simulation scenarios and parameters
Simulations are performed for different number of sensor nodes and varying transmission range of sensor nodes to study the effect of the proposed MOPSO-RPS method on the total energy consumption, network lifetime, data load among RPs, data gathering ratio, and data acquisition latency. All the relevant parameters used in MOPSO and other simulation parameters are shown in Table 8, Table 9, respectively. The simulation parameter setting for ACO-MSPD, PSOBS, and ETMS-MOPSO are the same as in Table 9. The maximum number of iterations till that the proposed MOPSO-RPS can be executed is 250. To conquer the stochastic behaviour of simulation runs, all the methods were executed 25 times, and the outputs are plotted by taking the average of the observed results.

To verify the effectiveness of the proposed MOPSO-RPS method, the set of Pareto optimal solutions among objective functions are generated under constraints (4)–(6). Fig. 3 shows Pareto Optimal solutions generated by proposed MOPSO-RPS. These Pareto optimal solutions work as decision-makers and choose near-optimal solutions among prime objectives. The choice of a near-optimal solution depends on the priority or constraints of the multi-objective optimization problem.

In the proposed MOPSO-RPS method, if the data acquisition latency requires to be decreased, then decision-makers must choose a solution having the shortest data acquisition latency. However, the shortest data acquisition latency increases the problem of energy consumption (as multi-hop data forwarding increases) in the network and reduces network lifetime. Along with this, shortest data acquisition latency also raises the problem of less number of RPs on the trajectory. Less number of RPs fails to manage an equal data load sharing among RPs, and it increases buffer overflow problem of RPs (because of packet drop) (Mehto et al., 2021).


Table 10. Each objective function with its optimal solution.

Solution	 (ms)			
 (mJ)	Packet drop
298	−4	90.12	14	15
998	−2	2.5	10	7
1150	−27	8.23	6.5	4

Table 11. Optimal solution with different data load.

Range	 (ms)			
 (mJ)	Packet drop
70–60	512	65.36	−5	11.24	16
60–50	745	57.41	−7	10.76	15
50–40	789	44.87	−9	9.65	14
40–30	810	35.12	−10	6.61	9
30–20	880	22.31	−11	4.32	7
20–10	935	15.54	−13	3.64	5
10–0	950	8.23	−14	3.41	4
Table 10 shows each objective functions with their optimal solution. Table 10, shows that the minimum value of  reduces energy consumption and buffer overflow problem in a better way. However, its corresponding data acquisition latency  is the highest. Table 11 shows further analysis of the effect of data acquisition latency on remaining two objective function (i.e., , and ), energy consumption, and buffer overflow (i.e., buffer overflow is related to constraint (4) and energy consumption related to constraint (5), (6)). The fewer number of RPs and higher data load causes an increase in the energy consumption and buffer overflow problem of RPs (because of packet drop). This is because a fewer number of RPs increases multi-hop data forwarding between RPs and non-RPs, and hence, RPs get more data packets.

When the data load among RPs less than , the energy consumption and buffer overflow problem shows a rapid decrease, as is depicted in Fig. 4(a) and Fig. 4(b), respectively.

To sufficiently reduce energy consumption and buffer overflow of RPs an optimal solution with a data load of less than  is selected. This optimal solution not only decreases energy consumption and buffer overflow of RPs (i.e., packet drops) but also the data acquisition latency is not too high. Selection of an optimal solution can also determine the optimal set of RPs, data load and data acquisition latency.

5.2.1. Total energy consumption
In this section, the total energy consumption of the proposed MOPSO-RPS is compared with the PSOBS, ACO-MSPD, and ETMS-MOPSO under two different network scenarios, namely, different numbers of sensor nodes and varying transmission range of sensor nodes.

1. Impact of the different number of sensor nodes .
As shown in Fig. 5(a), the total energy consumption is increased for all four methods with an increase in the total number of sensor nodes. The reason behind this is, an increase in sensor nodes also produces more data packets, and transmission and reception of these data packets also increases the total energy consumption of the network. However, the proposed MOPSO-RPS proves its superiority and shows low energy consumption compared to PSOBS, ACO-MSPD, and ETMS-MOPSO methods. In MOPSO-RPS, the third objective function provides minimization of data load at each RPs, and hence it also maintains equal sharing of data load among RPs. Equal sharing of data load also reduces the amount of energy consumption of an RP during data transmission towards MS. Additionally, data forwarding constraints, as described in Eq. (5), and (6), also reduce energy dissipation during data forwarding. Moreover, the used VPG mechanism also conserves energy during the conversion of an invalid into a valid particle compared to automatic conversion.

In ACO-MSPD, consideration of data load during RPs selection and dynamic re-selection of RPs shows less energy consumption than PSOBS and ETMS-MOPSO. The PSOBS prefers single-hop forwarding from non-RPs to their corresponding RPs, and it performs better than the ETMS-MOPSO in terms of energy expenditure. However, ETMS-MOPSO does not provide load balancing during RPs selection, and it has more multi-hop data forwarding than single-hop forwarding. Therefore, it performs the worst among all the four methods.

2. Impact of different transmission range .
Fig. 5(b) represents that the total energy consumption of all the four methods decreases with an increase in the transmission ranges of sensor nodes. The reason behind this is, a rise in transmission range decreases multi-hop data forwarding among sensor nodes and ultimately reduces the energy consumption of the network. The obtained results in Fig. 5(b) clearly shows that the MOPSO-RPS is better in terms of energy consumption over ACO-MSPD, PSOBS, and ETMS-MOPSO, though the further away sensor node can now directly forward data towards RPs instead of multi-top data forwarding (as describe in constraint Eq. (6)). Along with this, tuned IW value and VPG further reduces the energy consumption of MOPSO-RPS. The ACO-MSPD experiences an improvement in energy expenditure compared to PSOBS and ETMS-MOPSO at lower values (i.e., 30–40 m.) of transmission range. This is because of the load-balanced RPs selection. However, at a higher value of transmission range, the PSOBS methods depict almost the same energy depletion as ACO-MSPD. This happens because of the single-hop data forwarding strategy of PSOBS, which consumes less energy as compared to ETMS-MOPSO. However, the limited number of RPs in ETMS-MOPSO (i.e., 10% of the sensor nodes are considered RPs) does not reduce hop count between RPs and non-RPs. As a consequence, it performs the worst among all the methods.

5.2.2. Network lifetime
1. Impact of different number of sensor nodes .
This paper considers two definitions for network lifetime; therefore, Fig. 6, Fig. 6 show the results for network lifetime till the death of the first RP and till the death of the last sensor node, respectively. Fig. 6(a) shows that the network lifetime of MOPSO-RPS, ACO-MSPD, PSOBS, and ETMS-MOPSO is decreased gradually as the number of sensor nodes increase. It is due to the rise in the average data load of RPs, which ultimately imbalanced the energy consumption of RPs and causes early death. However, the proposed MOPSO-RPS enhances network lifetime over ACO-MSPD, PSOBS, and ETMS-MOPSO because of its third objective function that provides minimization of RPs data load. Consequently, a reduction in the energy consumption of RPs takes place, which also decreases the probability of early death of first RPs and prolongs the network lifetime. Along with this, the re-selection mechanism reduces the chance of the premature death of RPs and improves the network lifetime.

In ACO-MSPD, the fair sharing of data packets and dynamic re-selection of RPs decrease the quick death of the first RP and improves network lifetime. Therefore, the ACO-MSPD shows a more extended network lifetime than in the PSOBS and ETMS-MOPSO. In PSOBS, the single-hop communication between non-RPs and RP balances the data load and decreases the quick death of the first RP and improves network lifetime than ETMS-MOPSO. However, it does not has any re-selection mechanism hence performs less than ACO-MSPD. The ETMS-MOPSO assumes only 10% of the total number of sensor nodes as RPs; thus, it does not properly balance the data load among RPs and causes premature death of RPs. Therefore, the ETMS-MOPSO performs the worst as compared to both PSOBS and ACO-MSPD.

Fig. 6(b) depicts the simulation results for the network lifetime until the death of the last sensor node. The proposed MOPSO-RPS further proves its superiority over the three state-of-the-art methods. This is because the second objective ensures the maximization of the number of RPs, which reduces the multi-hop data transmission by non-RPs towards RPs and decreases the probability of early death of the last sensor node.

2. Impact of different transmission ranges.
As shown in Fig. 7(a), an increase in transmission range also increases the network lifetime for all the four methods. This is because of the reduction in the depletion of sensor nodes energy. It is observed from the results that the MOPSO-RPS performs well compared to other methods since an increase in transmission range fairly share non-RP sensor nodes among RPs and hence reduces data load at RPs. This situation decreases the early demise of any RP and enhances the network lifetime. The re-selection process also adds improvement in network lifetime. The ACO-MSPD converts most of the multi-hop data forwarding into single-hop between RPs and non-RPs and prolongs the network lifetime as compared to PSOBS, and ETMS-MOPSO. In the PSOBS, the single-hop data forwarding also reduces the energy consumption of non-RPs and does almost equal with ACO-MSPD for network lifetime. However, the network lifetime of both the ACO-MSPD, and PSOBS is less than the MOPSO-RPS. In ETMS-MOPSO, an increase in transmission range can provide uniformly sharing of non-RP nodes; however, the availability of a limited number of RPs does not allow the fair sharing and hence performs the poorest among all the methods.

Fig. 7(b) shows the network lifetime results until the last sensor node dies w.r.t. varying transmission range of sensor nodes. The proposed MOPSO-RPS gives a higher network lifetime than the other three methods. This is because more data forwarding paths are now available. This condition decreases the probability of the farther sensor node’s death because it can deliver data towards RP within one-hop and has less energy consumption. Along with this, VPG saves energy than auto conversion, as in the case of PSOBS, ACO-MSPD, and ETMS-MOPSO.

The ACO-MSPD performs well in terms of network lifetime compared to PSOBS and ETMS-MOPSO at lower values (i.e., 30–40 m) of transmission range. The reason behind this is, an increase in transmission range also provides more number of forwarding paths among non-RPs and RPs and hence reduces the energy consumption of non-RP nodes and increases the network lifetime. However, at a higher value of transmission range (i.e., above 40 m), the PSOBS and ETMS-MOPSO methods show almost an equal network lifetime as ACO-MSPD. The reason behind this is, at higher transmission ranges, the data forwarding path or hop-counts between non-RPs and RPs is of single-hop and hence reduces energy depletion of non-RPs.

5.2.3. Data load among RPs
Fig. 8, Fig. 8 depict the data load among RPs for all the four methods w.r.t. different number of sensor nodes and varying transmission range of sensor nodes, respectively.

1. Impact of different number of sensor nodes .
Fig. 8(a) depicts that data load among RPs increases in accordance with the number of senor nodes for all the four methods. As the number of nodes increases, more data are forwarded towards RPs. Although, the MOPSO-RPS has smaller data load among RPs compared to ACO-MSPD, PSOBS, and ETMS-MOPSO. The reason behind this is, the second objective function (i.e., maximization of number of RPs) and third objective function (i.e., minimization of the standard deviation of data load among RPs), provides a fair data load balancing among RPs.

Although the ACO-MSPD considers the forwarding load of each sensor node during RPs selection; however, it does not assume maximization of the number of RPs hence it performs worse than MOPSO-RPS. However, the ACO-MSPD serves better than PSOBS and ETMS-MOPSO. The PSOBS does not consider the forwarding load of sensor nodes during the selection of RPs. However, it uses single-hop communication between non-RPs and RPs, and hence its performance better than ETMS-MOPSO. Unlike ACO-MSPD and PSOBS, the limited number of RPs in ETMS-MOPSO does not balance the data load and performs worst among all the methods.

2. Impact of different transmission ranges .
5.2.4. Number of RPs
Along with data load among RPs, the number of RPs also affects the total energy expenditure of the network. Therefore, more RPs provide an advantage in reducing energy consumption as they decrease multi-hop data forwarding towards RPs. Fig. 9, Fig. 9 show the number of RPs with the different number of sensor nodes and varying transmission ranges of sensor nodes for MOPSO-RPS, ACO-MSPD, PSOBS, and ETMS-MOPSO.

1. Impact of different number of sensor nodes .
In Fig. 9(a), to serve the increased number of sensor nodes, the number of RPs also increases with them. Fig. 9(a) also shows that the proposed MOPSO-RPS has more RPs than the other three methods. In this way, the MOPSO-RPS balances the load among RPs, hence reduces the energy consumption of the network and prolongs network lifetime.

2. Impact of different transmission ranges .
Fig. 9(b) depicts that the number of RPs increases as the transmission range increases. This is since an increase in transmission range equally shares non-RP nodes among RPs.

5.2.5. Data gathering ratio
In this section, the data gathering ratio of all the four methods, namely: MOPSO-RPS, ACO-MSPD, PSOBS, and ETMS-MOPSO, are analysed to check the effectiveness of the proposed MOPSO-RPS method.

1. Impact of different number of sensor nodes .
From Fig. 10(a), it can be observed that the data gathering ratio decreases for a rise in the number of sensor nodes. This is because the buffers of RPs do not accommodate all the data packets of sensor nodes when the number of sensor nodes increases. Results depict that the MOPSO-RPS has better performance in terms of data gathering ratio than ACO-MSPD, PSOBS, and ETMS-MOPSO. This is because the constraint on the buffer capacity of sensor nodes chooses RPs according to the data packet generation. In this way, the MS can efficiently collect data and decrease packet drops at RPs, enhancing the data gathering ratio of MOPSO-RPS.

The ACO-MSPD only considers data load during the selection of RPs but does not provide any constraint on the buffer capacity, and hence it only performs well than PSOBS and ETMS-MOPSO. In PSOBS, the single-hop data forwarding from non-RPs to RPs increases the number of RPs and thus have low data load and reduces data packet drop at RPs, but it does not provide any constraint on buffer capacity hence drop more packets than ACO-MSPD. The performance of ETMS-MOPSO is worst among all the four methods as it does not have buffer constraints during RPs selection and does not choose RPs according to data load among RPs.

2. Impact of different transmission ranges .
Fig. 10(b) depicts that as the transmission ranges of sensor nodes increase, the data gathering ratio presents an increasing trend for the four methods. This is because an increase in the transmission range of sensor nodes encourages further sensor nodes to transmit data towards an RP. It reduces the dropping of data packets that is occurred in the case of the short transmission range of farther sensor nodes. From Fig. 10(b), it can be noticed that the data gathering ratio of MOPSO-RPS is better among the four methods. This is because the consideration of constraint on buffer capacity provides a reduction in the data packet drops at RPs. Moreover, a rise in transmission range also motivates farther sensor nodes to deliver data towards RPs.


Table 12. Performance comparison of MOPSO-RPS with ACO-MSPD, PSOBS, and ETMS-MOPSO.

Evaluation scenarios	Performance metrics	As compared to ACO-MSPD	As compared to PSOBS	As compared to ETMS-MOPSO
Impact of number of nodes	Energy consumption	Decreased by 11.11%	Decreased by 19.49%	Decreased by 25.25%
Network lifetime till the death of first RP	Increased by 7.40%	Increased by 18.5%	Increased by 29.3%
Network lifetime till the death of last sensor node	Increased by 4.60%	Increased by 10.80%	Increased by 15.80%
Data load among RPs	Decreased by 12.44%	Decreased by 21.84%	Decreased by 29.06%
Data gathering ratio	Increased by 11.80%	Increased by 23.60%	Increased by 29.0%
Data acquisition latency	Decreased by 7.30%	Decreased by 10.50%	Decreased by 14.26%
Impact of transmission ranges	Energy consumption	Decreased by 12.49%	Decreased by 20.01%	Decreased by 27.03%
Network lifetime till the death of first RP	Increased by 7.80%	Increased by 9.01%	Increased by 22.17%
Network lifetime till the death of last sensor node	Increased by 4.73%	Increased by 7.45%	Increased by 10.94%
Data load among RPs	Decreased by 11.92%	Decreased by 17.70%	Decreased by 25.16%
Data gathering ratio	Increased by 10.09%	Increased by 24.48%	Increased by 29.40%
Data acquisition latency	Decreased by 9.30%	Decreased by 14.55%	Decreased by 19.06%
5.2.6. Data acquisition latency
The four methods have been simulated to calculate the data acquisition latency in both scenarios.

1. Impact of different number of sensor nodes .
Fig. 11(a) shows results for data acquisition latency concerning the different number of sensor nodes. Data acquisition latency increases following the rise in the number of sensor nodes in all the four methods. This is because the number of RPs also increases to serve more sensor nodes. However, the proposed MOPSO-RPS method shows superiority against ACO-MSPD, PSOBS, and ETMS-MOPSO as the first objective function minimizes the data acquisition latency of MS. Additionally, the improved distance heuristic factor of the ACO algorithm further minimizes the data acquisition latency.

The ACO-MSPD is performed better than PSOBS and ETMS-MOPSO because it finds a set of optimal RPs to minimize the data acquisition latency. However, it does not improve the heuristic factor of the ACO algorithm and hence degrades performance than MOPSO-RPS. The performance of ETMS-MOPSO is better than PSOBS. This is because the number of RPs is less in ETMS-MOPSO. However, single-hop communication between non-RPs and RPs increases the number of RPs. PSOBS does not consider any objective function for minimization of data acquisition latency and hence degrades its performance than other methods.

2. Impact of different transmission ranges .
The performance of MOPSO-RPS concerning data acquisition latency under different transmission ranges is presented in Fig. 11(b) and compared with ACO-MSPD, PSOBS, and ETMS-MOPSO. The data acquisition latency decreases with respect to the rise in the transmission ranges of sensor nodes for all the four methods. This is since an increase in transmission ranges of sensor nodes reduces the total hop counts between non-RPs and RPs. This situation can attach more sensor nodes to an RP, hence reduces the number of RPs to improve data acquisition latency. Moreover, the proposed MOPSO-RPS has better results than ACO-MSPD, and PSOBS, ETMS-MOPSO, because of its first objective function in terms of data acquisition latency.

Performance comparison of MOPSO-RPS with ACO-MSPD, PSOBS, and ETMS-MOPSO for all the evaluated performance parameters in both scenarios are summarized in Table 12.

6. Conclusion
This paper introduces a MOPSO-RPS method to choose a set of optimal RPs to minimize data acquisition latency, data load among RPs, and the number of RPs for the delay and energy-efficient data collection. This method consists of three phases, namely: bootstrapping, RP’s selection, and MS’s trajectory formation for data acquisition. In the bootstrapping phase, a DST is formed to calculate the data load and forwarding node of each sensor node. The set of forwarding nodes acts as the probable candidates of RPs in the next phase. In the second phase, the MOPSO algorithm is used along with some improvement, such as adaptive IW and VPG, to select the optimal RPs. In the last phase, a improved ACO algorithm is applied to form the trajectory of MS using the selected RPs for data collection. The MOPSO-RPS also provides a mechanism for the re-selection of RPs to balance the data load among RPs and energy expenditure of sensor nodes.

Performance metrics of WSN are defined and evaluated on varying number of sensor nodes, transmission range of sensor nodes. Simulation results show that the proposed MOPSO-RPS outperforms compared to existing state-of-the-art methods ACO-MSPD, PSOBS, and ETMS-MOPSO. The MOPSO-RPS considerably reduces energy consumption and data acquisition latency. Moreover, it provides a balanced data load among RPs and increases network lifetime and data gathering ratio.

In the future, the authors would like to develop a new data collection method for large networks using multiple MS.

