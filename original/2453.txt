The double-row layout problem (DRLP) was previously investigated as an unconstrained optimisation problem without enforcing any limits on the arrangement of the machines. However, in reality, a DRLP is required to respect certain facility constraints imposed on the arrangement of its machines. To address these limits in the scientific literature, we originally proposed a constrained DRLP (cDRLP). A mixed-integer linear programming model with three types of constraints: positioning, ordering, and relation, is constructed for the cDRLP. We decompose the cDRLP into two subproblems: a combinatorial optimisation problem and a continuous optimization problem. To further deal with larger instances, a two-phase methodology is designed to solve the cDRLP. In our algorithm, the differential evolution with a novel discrete framework is applied to seek local and global feasible solutions. Finally, a series of benchmark instances obtained from the literature are added to meet the constraint requirements of our developed cDRLP, and these 40 test instances with different sizes (n = 9 ~ 42) are employed to assess the performance of our proposed methodology. The results of computational experiments tested clearly demonstrate that our proposed two-phase optimisation methodology is effective for handling the problem considered and also help in producing good quality solutions.

Introduction
Facility layout problems (FLPs) are a widespread and complex category of operations research problems which seeks to achieve the most profitable physical allocation of a preset number of non-overlapping indivisible facilities (e.g. service areas, machines, workstations) to satisfy one or more objectives in a given space. In smart manufacturing systems, the configuration of facility layouts is particularly relevant for reducing material handling costs, increasing productivity, making more efficient use of existing space, adapting plants to future changes, and providing a healthy, convenient, and safe environment for workers [1,2,3,4]. Researchers have been intrigued by these ideas, and considerable research effort has been concentrated on the definition and classification of FLPs and their related solving methods in the past half-century. While considering every kind of placement in the layout area, based on the layout configuration, researchers defined three distinct terms to categorise the contents of layout design problems: row FLP (e.g. single, double, and multi-row layouts) [5], loop layout, and open-field layout [6].

The double-row layout problem (DRLP) is non-deterministic polynomial-time (NP)-hard problem that attempts to assign a given number of machines or other such entities on the two sides along a corridor to achieve objectives such as minimising total material handling cost. Automated guided vehicles (AGVs) are generally utilised as the delivery devices in this physical configuration to move resources from one work area to another, as shown in Fig. 1. In this paper, machines are considered to be arranged in horizontal rows along the sides of the path of the AGVs to optimise the total material handling costs between machines. From a real-world perspective, the DRLP arises in many other practical applications, such as the layout of AGVs in flexible manufacturing systems [7, 8], the arrangement of toolsets in a fabrication line of liquid crystal displays, placement of machines in semiconductor manufacturing [9], and microchip integrated circuit board layouts.

Fig. 1
figure 1
Representation of DRLP

Full size image
In DRLP, the rectangular machines can be located anywhere on both sides of a common corridor by default without other restrictions. Nevertheless, in practical applications, certain limitations on the placement of certain machines in random locations may be encountered. Therefore, there can be requirements to arrange a machine in a predetermined fixed position or to arrange a pair of particular machines in a given order, allowing or not allowing the arrangement of other machines in between them. There are many other models (e.g. assembly lines, disassembly lines [10] that focus on such restrictions, but no published literature about the DRLP has studied this so far.

As the study on constrained FLPs is still in its initial stages, there is considerable potential for further research with respect to new constraint variants, models, and solutions for improvement. While considering practical situations, the DRLP exists in real-world applications in contexts such as arranging the given machines under certain constraints subject to the condition that certain designated positions are assigned to certain machines and specific relationships are enforced among the machines. Based on this, we put forward an innovative plant layout problem in a manufacturing system which is an extension of the DRLP, named as constrained DRLP (cDRLP), where the planning process considers additional real assumptions. The cDRLP is discussed in our work mainly considering positioning, ordering, and relation constraints on the placement of certain specific machines.

Unlike the single-row FLP (SRFLP), the DRLP incorporates both combinatorial and continuous characteristics, which demands the determination of the sequence (relative placement) of machines in each row and the accurate position (absolute placement) of each machine. Additionally, certain types of constraints proposed in this study (positioning, ordering, and relation constraints) are added in the DRLP; consequently, the cDRLP is considerably more realistic than the DRLPs in previous literature. Accordingly, a two-phase optimisation methodology was designed according to our multi-constraint DRLP model and combined with the discrete differential evolution (dDE) to seek high-quality solutions for the cDRLP efficiently.

From the computational perspective, the combinatorial subproblem and the continuous subproblem are embodied in the DRLP. Thus, the methodology for solving our cDRLP is divided into two distinct phases, which differ fundamentally with respect to applied algorithms and their implementations. In the first phase, we designed an encoding strategy to uniquely define all binary variables in our linear model by generating feasible layout solutions for the DRLP. The second phase attempts to determine an exact location within the manufacturing system layout. In this phase, a simplified model is executed and addressed using the CPLEX 12.8.0 optimisation software. The procedure for the cDRLP iterates between the above two phases until the optimal layout configuration is acquired.

The main contributions of our work are three-fold:

A constrained double-row layout model is originally formulated for the practical facility layout problem, which involves the arrangement of predefined machines considered positioning, ordering, and relation constraints. We constructed a mixed-integer linear programming (MILP) model that can employ the CPLEX solver to optimise small-sized instances with 9 ≤ n ≤ 13 within a given limited time.

Based on the intrinsic difficulty and combinatorial nature of the proposed problem, an innovative discrete differential evolution algorithm with an embedded two-phase method is developed to address the cDRLP. In our algorithm, the solution encoding, the evaluation of fitness function, the generation of the initial population, the selection of mutation and crossover operators and the setting of elite preserving mechanism are all customised for solving the cDRLP. Besides, an ideal parameter combination for our constrained memetic algorithm is determined through a Taguchi experimental design.

Three parts of the computational experiments were executed to solve the cDRLP and assess the performance of the optimisation methodology. In the first part, we compared the experimental results for small-sized instances obtained using two-phase methodology with those obtained by the exact method using CPLEX. To better evaluate the performance of the discrete differential evolution, a comparative analysis between the two-phase methodology and an existing algorithm is shown for the classical DRLP. Additionally, the effectiveness of the two-phase methodology is evaluated for different types of constraints for cDRLP instances of 15 machines. The third part presented the cDRLP instances with the same types of constraints but different numbers of machines.

The remainder of the research is organised in the following manner. In Sect. 2, a review of the related literature is arranged. Then, more details regarding the cDRLP are explained, and the construction of the mathematical formulation for the cDRLP with three different types of constraints is presented in Sect. 3. In Sect. 4, a dDE with decomposition phases is presented as the solution method for the cDRLP. Next, Sect. 5 reports and analyses the computational results for evaluating the performance of the devised algorithm in certain cDRLP instances. Finally, Sect. 6 summarises the principal understandings, limitations, and future studies.

Literature review
Double-row layout problem
The DRLP, where machines, departments and facilities are arranged in two parallel rows along the central passageway, was first discussed by Heragu, Kusiak [11]. An original mixed-integer programming (MIP) model for the DRLP was derived by Chung, Tanchoco [12], which involved more constraints and variables than existing formulations of the SRFLP. By considering the differences in strategies while selecting a machine to be assigned to a specific available position, five constructive heuristics were designed for its solution. The minimum clearance between certain adjacent machines was ignored in the model proposed by Chung and Tanchoco. Thus, a modification of MIP formulation for that model was presented in Zhang, Murray [13], and it was applied in subsequent research involving explicit clearance restrictions. Zuo et al. [14] provided an extended DRLP (EDRLP), which aims to find the precise positions of two rows of machines to minimise simultaneously material flow cost and layout area when the corridor width is nonzero. Amaral [15] introduced a MIP formulation into the variant of DRLP where there is no minimum gap between adjacent machines. Murray et al. [16] presented the DRLP of asymmetric logistics between machines. Moreover, an effective local search algorithm based on linear programming (LP) was developed for tackling it. Subsequently, a new approach combining multi-objective tabu search with LP was suggested by Zuo et al. [17] for the EDRLP where material flows are asymmetric. In another work, Zuo et al. [18] further presented a DRLP in which the gaps between machines are shared, and they stated that both material handling cost and layout area had been decreased by about 7–10% by sharing certain gaps.

While considering a dynamic environment, Wang et al. [19] extended the DRLP, where the two objectives of minimising material flow cost and rearrangement cost of those machines to be replaced are optimised. Then, Tang et al. [20] raised an innovative multi-objective evolutionary algorithm based on decomposition methodology to deal with the robust DRLP that takes the layout area and material handling cost as the minimisation objective. A dynamic DRLP was presented by Wang et al. [21] with the same objectives as the robust DRLP, and the authors devised a simulated annealing algorithm combined with a mathematical formulation to handle it.

Apart from the above-mentioned studies, a new MIP model was established for the DRLP by Amaral [22] in which a symmetry-breaking constraint and certain valid inequalities were considered. The experimental results demonstrated that this model outperformed the MIP model proposed by Chung, Tanchoco [12]. Besides, Secchin, Amaral [23] investigated a tighter model of the DRLP that was improved on the model proposed by Amaral [15]. A later paper [24] introduced a DRLP with multiple machine types. In that model, the arrangement of machines and optimal divisions of product flow among machines were considered simultaneously. Fischer et al. [25] provided a new formulation for the parallel row ordering problem (PROP) and a slightly modified model with an enumeration scheme iterating to solve space-free DRLP and DRLP instances.

Recently, Chae, Regan [26] further provided a MIP model which was modified based on Secchin, Amaral [23] but introduced tighter constraints. They showed that this innovative model has better performance than earlier ones in dealing with medium and large-scale problems. Furthermore, a decomposition-based algorithm was developed for the DRLP by Guan et al. [27], which addressed the DRLP through an improvement-based local search and particle swarm optimisation. The computational results show that this algorithm has strong competitiveness. More recently, four variants of the new two-stage approach were presented and their efficiency was illustrated through experimental tests in many literatures with sizes ranging up to 50 machines [28]. The summary of the reviewed literature pertaining to the DRLP is listed in Table 1.

Table 1 Summary of the works on DRLP
Full size table
Other works were published under the umbrella of a ‘DRLP’, such as the corridor allocation problem (CAP) [29,30,31,32] and PROP [33, 34]. Although they have certain similar characteristics with the DRLP, i.e. displaying facilities or machines along two rows, the DRLP is also required to balance more tasks, such as the gap between each pair of adjacent machines, the sequence and specific location of each row of machines. These layout problems mentioned above are generally encountered in practice scenarios, but they have received limited attention in the past literature. We have sorted out the publication of these problems since 2010, as shown in Fig. 2.

Fig. 2
figure 2
Publication distribution by problems

Full size image
Constrained facility layout problem
The facility layout is not only directly affected by manufacturing system specifications, but also influenced by several types of physical configuration designed based on practical constraints. Accordingly, we should analyse the constraints in the layout and structure of the layout according to these constraints. One can refer to the following constraints: area, orientation, aisle, non-overlapping, clearance between facilities, budget, and pick-up/drop-off points, etc. [35, 36].

Area-constrained FLPs is a variant of the classical FLPs that additionally accounts for the area requirements of facilities. The researches on FLP with area constraints are divided into two broad classes: equal-area [37, 38] and unequal-area (UA)-FLPs [39,40,41] as well as rectangular and irregular-shaped areas [42]. In practical implementations of these layouts, the shape and area of facilities are not always consistent, which increases the complexity of the layout problem, primarily because the unequal-area layout and irregular-shaped areas layout will inevitably add more restrictions to the problem [43].

Since layout placement and replacement require a significantly large budget, strictly respecting budget constraints is one of the practical aspects of modelling and solving such activities. Therefore, budgetary limitations can be applied to the design of the layout [44, 45].

Conversely, the placement of facilities in certain fixed locations, their allocation in specific orders, or the arrangement of sequencing facilities in adjacent location were often neglected in prior research. Kalita, Datta [46, 47] stated that the SRFLP was investigated as an unconstrained optimisation problem allocating preset departments or facilities along a straight line without any restriction; however, in practice, the constraints of placing certain departments in designated fixed locations and/or orders may exist. Therefore, they first provided a constrained SRFLP (cSRFLP), where certain facilities are restricted to have positioning and ordering constraints. They also designed a constrained permutation-based genetic algorithm (GA) for determining the feasible space in the cSRFLP. Thereafter, five MIP models for cSRFLP were established by Liu et al. [48]. In that work, we designed a constrained firework algorithm to address the considered cSRFLP. Our experimental result showed that the developed method was able to identify optimal solutions in significantly less time when compared to the constrained GA. Two years later, Kalita, Datta [49] presented a constrained bi-objective CAP model where fixed, same, and opposite row constraints are considered for certain facilities. Liu et al. [50] proposed a constrained CAP (cCAP) considering positioning, sequencing, and adjacency constraints. Following this idea, we [51] further focused on the double-floor CAP (DFCAP) which covers seven types of facility constraints.

Staged approaches
It can be noted from our literature review that the traditional methods are not applicable for seeking optimal results or even feasible solutions in reasonable time on account of the challenges in certain FLPs. Therefore, a series of staged approaches were suggested by researchers to achieve the composite optimisation of FLPs. In this regard, Salum [55] developed a two-stage solution approach to shrink both material handling costs as well as manufacturing lead time. In the same year, an integrated approach to layout design was proposed by Bazargan-Lari et al. [56], which can be extended to handle three stages of manufacturing cells design. Subsequently, Diego-Mas et al. [57] presented a two-phase GA that can address FLPs, while the geometric constraints imposed on the activities are strictly observed. Xiao et al. [58] focused on the layout design of unequal-sized departments with input/output points and given shapes. As the MIP model is unavailable to large-sized instances, a two-phase heuristic methodology was employed for feasible solutions globally. Thereafter, Paes et al. [59] employed two methods (a basic GA and GA with quadrant restrictions and decomposition phases) to solve the UA-FLP. Guan et al. [60] provided a multi-objective particle swarm optimisation algorithm incorporated with a two-phase optimisation algorithm for a multi-workshop FLP. The staged approaches adopted for the DRLP mentioned in Sect. 2.1 will not be repeated here.

Problem description and mathematical formulation
Problem description
This paper considers a particular case of the DRLP, where the given n machines are arranged along two sides of a straight row with three types of constraints by minimising the overall material handling cost. Particularly, certain machines to be positioned at fixed positions, certain machine pairs to be positioned in a specified order, and allow or disallow any other machines between ordered pairs. The three types of constraints are named positioning, ordering, and relation constraints and are defined below.

Positioning constraints (P-constraints): If machines have fixed assignments to mated locations, this is indicated by the positioning constraints. For example, for shipping goods in time, it is preferred that the delivery area be located at the exit. In this case, certain machines do not have the flexibility and the locations are predetermined.

Ordering constraints (O-constraints): If certain preset pairs of machines are required to be allocated in predetermined orders, it indicates that there exists a priority relationship between machines i and j. Machines with these constraints have to be located in designed orders, which can be arranged more reasonably.

Relation constraints (R-constraints): These are normally applied in facility layouts to limit the occurrence of certain special cases. They can prevent the production process relationship from being damaged by considering the minimum material handling cost between machines. For example, in flexibility-based manufacturing systems, two workstations may be set by the decision-maker as a situation in which they are forced to be placed together and have priority in the process. Hence, machines with these constraints should be located in pairs. Note that pairs of machines with relation constraints are positioned without allowing the placement of other machines in between them. Thus, the ordering constraints are a precondition for the occurrence of the relation constraints.

An example of the constrained double-row layout while taking into account the aforementioned constraints is illustrated in Fig. 3, in which the sequence of the machines is given by 𝜋𝜋 = {2, 6, 5, 1, 3, 4, 7} and the location of the machines is presented by K = {1, 2, 3, 4, 5, 6, 7}. Here, position 1 corresponds to the position of machine 3 and position 2 means the position of machine 2, etc. In this example, the third position is forced to be allocated to machine 4. For demonstrating the ordering constraints, machines 2, 5, 6, and 7 with ordering constraints are arranged in the following order: machine 2 is required to be placed before machine 7, and machine 6 is required to be placed before machine 5. Furthermore, machines 6 and 5 have a relation constraint, which indicates that machines 6 and 5 must be positioned next to each other. Thus, the coordinate positions of machines 6 and 5 on the x-axis satisfy two restrictions simultaneously, i.e. first, machine 6 is placed before machine 5; second, the location numbers of machines 6 and 5 must be adjacent.

Fig. 3
figure 3
Constraints imposed on the illustrative constrained DRLP (cDRLP) instance

Full size image
Assumptions
In modelling the proposed problem, the following seven items are accounted for:

All machines are considered to be rectangular and their shapes are fixed.

The plant area is larger than or equal to the sum of all machine areas.

All machines are required to be situated within a given factory building and cannot overlap each other.

The corridor is located on the x-axis, and its width is negligible.

The interaction point of each machine is placed on the side facing the aisle.

The material flow is from a centre of one machine to that of another.

The restriction schemes of three types of constraints in the model are determined by the decision-maker before the implementation of the scheme.

Parameters and indices
To mathematically model cDRLP, different parameters and indices are utilised, which are listed in Table 2.

Table 2 Description of parameters and indices
Full size table
Decision variables
Two continuous and three binary variables are employed to establish the mathematical model.

Continuous variables:𝑥𝑖𝑘 : Interaction centre of machine i is in the abscissa of row k; if machine i is not assigned to row k, then 𝑥𝑖𝑘=0.

𝑑𝑖𝑗: Distance between machines i and j is calculated as the x-distance between their material flow interaction centre.

Binary variables:

𝑦𝑖𝑘={1,0,if machine 𝑖 is arranged to row 𝑘;otherwise.
𝑧𝑘𝑖𝑗=⎧⎩⎨⎪⎪1,0,if machine 𝑖 is assigned to the left of machine 𝑗in row 𝑘;otherwise.
𝛽𝑖𝑗=⎧⎩⎨⎪⎪1,0,if the logistic interaction point of machine 𝑖 is to the left of machine 𝑗;otherwise.
Proposed model
The cDRLP mathematical model is on the grounds of the mixed-integer formulation of Zhang, Murray [13]. In the cDRLP formulation, the above restrictions are expressed to design the activities in the space constructed based on positioning, ordering, and relation constraints, without violating overlaps between the activities. Hence, the cDRLP model with three types of constraints considered simultaneously can be viewed as a comprehensive DRLP model. In our model, the objective function aims at minimising the overall material handling cost between machines in the shop floor. According to the above notations, the objective function is presented in Eq. 1:

min∑𝑖=1𝑛−1∑𝑗=𝑖+1𝑛𝑐𝑖𝑗𝑑𝑖𝑗
(1)
Furthermore, the constraints include the following:

The first set of constraints in Eq. 2 is used to ensure that the model allocates each machine to only one row, while the second set in Eq. 3 ensures that if machine i is not arranged in row k, then 𝑥𝑖𝑘=0.

∑𝑘∈𝐾𝑦𝑖𝑘=1,∀𝑖∈𝐼𝐼
(2)
𝑥𝑖𝑘≤M⋅yik,∀i∈II,k∈KK
(3)
The constraints have to be considered for avoiding the overlap between two adjacent machines in the layout, which are indicated in Eqs. 4 and 5.

𝑙𝑖𝑦𝑖𝑘+𝑙𝑗𝑦𝑗𝑘2+𝑎𝑖𝑗𝑧𝑘𝑗𝑖≤𝑥𝑖𝑘−𝑥𝑗𝑘+M⋅(1−zkji)∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼};∀𝑘∈𝐾𝐾
(4)
𝑙𝑖𝑦𝑖𝑘+𝑙𝑗𝑦𝑗𝑘2+𝑎𝑖𝑗𝑧𝑘𝑖𝑗≤𝑥𝑗𝑘−𝑥𝑖𝑘+M⋅(1−zkij)∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼};∀𝑘∈𝐾𝐾
(5)
As ∑𝑘∈𝐾𝐾𝑥𝑖𝑘 represents the centre point of machine i; the constraints according to Eqs. 6 and 7 are used to measure the exact distance between machines i and j.

𝑑𝑖𝑗≥∑𝑘∈𝐾𝐾𝑥𝑖𝑘−∑𝑘∈𝐾𝐾𝑥𝑗𝑘,∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼}
(6)
𝑑𝑖𝑗≥∑𝑘∈𝐾𝐾𝑥𝑗𝑘−∑𝑘∈𝐾𝐾𝑥𝑖𝑘,∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼}
(7)
The constraints specified in Eqs. 8 and 9 must be accounted for guaranteeing consistency between the variables 𝑦𝑖𝑘 and 𝑧𝑘𝑖𝑗; both equations impose variables 𝑧𝑘𝑖𝑗 or 𝑧𝑘𝑗𝑖 to be equal to 1, only when machines i and j are arranged in row k at the same time.

𝑧𝑘𝑖𝑗+𝑧𝑘𝑗𝑖≤12(𝑦𝑖𝑘+𝑦𝑗𝑘),∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼};∀𝑘∈𝐾𝐾
(8)
𝑧𝑘𝑖𝑗+𝑧𝑘𝑗𝑖+1≥𝑦𝑖𝑘+𝑦𝑗𝑘,∀𝑖,𝑗∈{𝑖<𝑗|𝐼𝐼};∀𝑘∈𝐾𝐾
(9)
The variable conditions for variables 𝑥𝑖𝑘, 𝑦𝑖𝑘, and 𝑧𝑘𝑖𝑗 are as presented in Eqs. 10–12.

𝑥𝑖𝑘≥0,∀𝑖∈𝐼𝐼;𝑘∈𝐾𝐾
(10)
𝑦𝑖𝑘∈{0,1},∀𝑖∈𝐈;𝑘∈𝐾𝐾
(11)
𝑧𝑘𝑖𝑗∈{0,1},∀𝑖,𝑗∈𝐈;𝑖≠𝑗;𝑘∈𝐾𝐾
(12)
To develop the positioning constraints, a new variable 𝛽𝑖𝑗 is introduced to establish the model in which specific locations is supposed to occupy by specific machines. The relationship between the two variables 𝑥𝑖𝑘 and 𝛽𝑖𝑗 is determined by the constraints obtained through Eqs. 13–15. Here, ∑𝑘∈𝐾𝐾𝑥𝑖𝑘 represents the absolute coordinate position of machine i in the X direction. If machine i is located on the right side of machine j, then ∑𝑘∈𝐾𝐾𝑥𝑖𝑘>∑𝑘∈𝐾𝐾𝑥𝑗𝑘, 𝛽𝑖𝑗=0. The inequality M⋅𝛽𝑖𝑗+∑𝑘∈𝐾𝐾𝑥𝑖𝑘≥∑𝑘∈𝐾𝐾𝑥𝑗𝑘 is true. In addition, as 𝛽𝑖𝑗+𝛽𝑗𝑖=1, 𝛽𝑗𝑖=1. If machine i is located on the left side of machine j, then ∑𝑘∈𝐾𝐾𝑥𝑖𝑘<∑𝑘∈𝐾𝐾𝑥𝑗𝑘 and 𝛽𝑖𝑗=1. As M is a sufficiently large number, the inequality M⋅𝛽𝑖𝑗+∑𝑘∈𝐾𝐾𝑥𝑖𝑘≥∑𝑘∈𝐾𝐾𝑥𝑗𝑘 is still true. Then, the constraint specified in Eq. 14 is applied to enforce the condition that if 𝛽𝑖𝑗+𝛽𝑗𝑖=1, then 𝛽𝑖𝑗 must be 0. The constraints obtained using Eq. 15 define that 𝛽𝑖𝑗 is a binary decision variable. In Eq. 16, the term ∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖 denotes the number of machines on the left of the interaction point of machine i, and (∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖+1) is exactly equal to the current location 𝑝𝑖 of machine i.

𝑀⋅𝛽𝑖𝑗+∑𝑘∈𝐾𝑥𝑖𝑘≥∑𝑘∈𝐾𝑥𝑗𝑘,∀𝑖,𝑗∈𝐼𝐼;𝑖≠𝑗
(13)
𝛽𝑖𝑗+𝛽𝑗𝑖=1,∀𝑖,𝑗∈𝐼𝐼;𝑖≠𝑗
(14)
𝛽𝑖𝑗∈{0,1},∀𝑖,𝑗∈𝐼𝐼;𝑖≠𝑗
(15)
∑𝑘=1,𝑘≠𝑖𝑛𝛽𝑘𝑖+1=𝑝𝑖,∀𝑖∈𝐼𝐼;𝑝𝑖≠0
(16)
For the definition of the mathematical expression of precedence relationship between machines i and j (ordering constraints), (∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖+1) and (∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗+1) designed in the model are presented in Eq. 17. Here, the location of machine i is indicated by the term (∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖+1); similarly, the location of machine j is indicated by the term (∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗+1). If 𝑜𝑖𝑗=1, then machine i has to precede machine j in the layout, i.e. the logistic interaction point of machine i is located on the left side of machine j; then, (∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗+1)−(∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖+1)≥1, which is further simplified to ∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗−∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖≥1.

∑𝑘=1,𝑘≠𝑗𝑛𝛽𝑘𝑗−∑𝑘=1,𝑘≠𝑖𝑛𝛽𝑘𝑖≥1,∀𝑖,𝑗∈𝐈;𝑖≠𝑗;𝑜𝑖𝑗=1
(17)
The relation constraints described by Eq. 18 enforce that machines i and j must be positioned in pairs, which implies that certain machines are placed in pairs with no other machines between them and definite order(s) is required to be respected simultaneously.

The constraints specified using Eq. 18 impose that the interaction point of machine i is on the left side of machine j and the difference in the locations of the two machines is just one. This is designated as, (∑𝑛𝑘=1,≠𝑗𝛽𝑘𝑗+1)−(∑𝑛𝑘=1,≠𝑖𝛽𝑘𝑖+1) must be 1 if both 𝑜𝑖𝑗 and 𝑟𝑖𝑗 are 1. Then, (∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗+1)−(∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖+1)=1 is further simplified as ∑𝑛𝑘=1,𝑘≠𝑗𝛽𝑘𝑗−∑𝑛𝑘=1,𝑘≠𝑖𝛽𝑘𝑖=1.

∑𝑘=1,𝑘≠𝑗𝑛𝛽𝑘𝑗−∑𝑘=1,𝑘≠𝑖𝑛𝛽𝑘𝑖=1,∀𝑖,𝑗∈𝐼;𝑖≠𝑗;𝑜𝑖𝑗=1;𝑟𝑖𝑗=1
(18)
In the next section, a two-phase optimisation methodology will be designed for the cDRLP. In our methodology, an encoding measure is employed to generate DRLP layout solutions; then, all binary variables in the developed model can be uniquely identified using the dDE in the first phase. Next, a simplified linear model from this section is executed via CPLEX solver.

Proposed methodology
Motivation
As previously mentioned, the DRLP is characterised by combining two aspects: combination and continuity. One critical matter is to determine the optimal abscissa of the arrangement of machines on each row after the machines are assigned to each row. Considering the cDRLP proposed in this study, some of these machines are also required to have three sets of requirements, i.e. positioning, ordering, and relation constraints. This renders it harder to deal with this problem through precise approaches on account of the explosion of distribution combinations.

Based on the above considerations, a new discrete two-phase framework is presented for the cDRLP, in which mathematical programming techniques are employed to determine a wide variety of high-quality solutions with the lowest possible cost and within a short amount of time. The idea of this methodology is that, for each sequence of machines, the constrains of machines are predetermined and then the values of the binary variables 𝑦𝑖𝑘, 𝑧𝑘𝑖𝑗, and 𝛽𝑖𝑗 are obtained so as to search the relative locations of machines in the first phase; in the next phase, the formulation mentioned in Sect. 3.5 can be addressed to determine the exact coordinates.

Differential evolution
The DE algorithm, which was devised by Storn, Price [61], is well appreciated as a simple yet versatile population-based algorithm, designed for continuous optimisation problems. Because of its simplicity and easy implementation, some success [62, 63] was achieved using the DE algorithm for handling different types of optimisation problems [64], such as constrained optimisation [65], multi-objective optimisation [66], and dynamic optimisation [67]. In the past few decades, the DE algorithm was mainly used to tackle continuous-based optimisation problems because it was considered to be unsuitable for solving several permutation-based practical combinatorial issues. Nevertheless, several efforts for designing an efficient discrete version [68] of the DE algorithm have occurred in recent years.

The DE was originally put forward for the unconstrained numerical optimisation problem; its primary operation is briefly described below.

(1) Initialisation: In the feasible solution space of the optimisation problem, N number of individuals represented as X are randomly produced to create the initial population. Here, 𝑋𝑋𝑖(0) represents the ith individual in the 0th population, and rand() is a random real number, uniformly distributed in (0, 1).

𝑋𝑋𝑖(0)=𝑋𝑋𝐿𝑖+rand()⋅(𝑋𝑋𝑈𝑖−𝑋𝑋𝐿𝑖),𝑖=1,2,...,𝑁
(19)
(2) Mutation: The basic mutation operation of the DE algorithm indicates the difference vector of the parent generation. Each difference vector corresponds to the difference of two different individuals in the parent population. Here, 𝑉𝑉𝑖(𝑡+1) is the mutant vector corresponding to the target vector 𝑋𝑋𝑖(𝑡). Moreover, 𝑟1,𝑟2,𝑟3∈{1,2,...,𝑁𝑃} are mutually distinct, randomly generated positive integers, which indicate the index of different individuals in the parent population. The diversification and intensification abilities of the algorithm can be balanced by means of the mutation scale factor 𝐹∈(0,1+).

𝑉𝑉𝑖(𝑡+1)=𝑋𝑋𝑟3(𝑡)+𝐹⋅(𝑋𝑋𝑟1(𝑡)−𝑋𝑋𝑟2(𝑡))
(20)
(3) Crossover: After mutation, DE utilises the crossover operator to generate the trial vector 𝑢𝑢𝑖(𝑡+1) between 𝑥𝑥𝑖(𝑡) and 𝑣𝑣𝑖(𝑡+1) to diversify the current population. The traditional crossover technology is to perform a binomial or uniform crossover on each component. Its operation is shown in Eq. (21). A uniformly distributed random number in [0, 1] is provided by 𝑟𝑎𝑛𝑑(𝑗) and 𝐶𝑅 is the crossover rate factor within [0,1][0,1]. In the remaining cases, all variables in this operation are inherited from the target vector.

𝑢𝑢𝑖𝑗(𝑡+1)={𝑣𝑣𝑖𝑗(𝑡+1),𝑥𝑥𝑖𝑗(𝑡),if 𝑟𝑎𝑛𝑑(𝑗)≤𝐶𝑅𝑜𝑟𝑗==𝑘otherwise
(21)
(4) Selection: In the selection operation, the objective function of the trial individual 𝑈𝑈𝑖(𝑡+1) and target individual 𝑋𝑋𝑖(𝑡) are evaluated, and then the more dominant individual will be selected to enter the next generation.

𝑋𝑋𝑖(𝑡+1)={𝑈𝑈𝑖(𝑡+1),𝑋𝑋𝑖(𝑡),𝑓(𝑈𝑈𝑖(𝑡+1))<𝑓(𝑋𝑋𝑖(𝑡))𝑓(𝑈𝑈𝑖(𝑡+1))≥𝑓(𝑋𝑋𝑖(𝑡))
(22)
Framework of the discrete two-phase optimisation methodology
Initialisation
For the cDRLP, which is both combinatorially and continuously optimised, an extended permutation expression with two lists of machine symbols and separators is usually used: {{𝑚1,𝑚2,𝑚3,...,𝑚𝑛},𝑛𝑢}. Integer-valued n elements are considered as the number of machines. 𝑚𝑖 is the machine symbol which represents the machine number at position j. The sequence 𝜋𝜋 = {𝑚1,𝑚2,𝑚3,...,𝑚𝑛} represents all possible permutations of the machine, and parameter nu is the cut point of the permutation 𝜋𝜋.

A random initialisation technique was adopted here to generate different permutations randomly to ensure the variety of the population of the proposed algorithm. In particular, each permutation allocating n machines on both sides of a centre aisle indicates a layout of machines. Practice shows that the solution is always feasible and also has a cost value that refers to the affinity value of the solution. Besides, we devised a decoding strategy to determine all feasible approximate placements exhaustively, and then the optimal coordinate for each machine can be obtained by addressing a formulation in the second phase.

As depicted in Fig. 4, the layout (solution) has nine machines, where the placing sequence is 𝜋𝜋 = {4, 9, 1, 6, 2, 5, 7, 3, 8}. The three types of constraints imposed on the machines in this example are predefined, as shown below. We can obtain the relative positions of these machines according to the decoding strategy. For the permutation sol = {{4, 9, 1, 6, 2, 5, 7, 3, 8}, 5}, the machines will be split into two parts to represent the upper row and lower row separately. In particular, 4, 9, 1, 6, and 2 are allocated on the upper row of the layout. Therefore, the remaining machines, 5, 7, 3, and 8, are placed on the lower row of the layout, and arranged in sequence close to the previous one, and their mutual relative locations are fixed simultaneously.

Fig. 4
figure 4
Example of cDRLP individual representation

Full size image
Different from many integer-valued problems, the random initialisation technique of individuals applied in this proposed problem is likely to generate unfeasible solutions, while omitting some others. In general, a specific procedure is utilised to guarantee the feasibility of the solution before calculating the fitness value of the solution. In our work, there is no specific procedure in the first phase to check whether the solution satisfies the constraints of the problem. However, the feasibility of the solution can be guaranteed by checking the feedback value exitflag of the second stage result. If exitflag = 1, this solution is feasible and the objective function value is returned. Otherwise, the solution is infeasible and the fitness of the solution is infinite.

Crossover and mutation operation
For the dDE, the crossover and mutation operators are vital as there are two key operators to generate new individuals to broaden the search space. Additionally, we adapt the partially mapped crossover (PMX) to product trial variables. The PMX [69] can be seen as a modification of the two-point crossover, which is considered to be one of the most prevailing crossovers to tackle the FLPs. Its working principle is to select a substring from a permutation and map it to a new one to form a new feasible permutation, thereby inheriting certain characteristics from two parent solutions. Conversely, a variable neighbourhood search (VNS) strategy is utilised to perfect the local search ability, which can adaptively transform between deep- and broad-searching strategies. In this technique, the 2-opt search method is applied as the search operator in the deep-searching strategy, which only swaps two points of the permutation. More specifically, this implies that we should select two random elements from the permutation of an individual first and then interchange their places. Furthermore, a threshold value thre for the search depth is set to induce a proper balance between diversification and the efficient operation of this procedure. We speculate that this implies that the neighbourhood space has been searched or no better solution could be obtained in this neighbourhood when the current optimal solution remains unchanged for successive thre times. Then, the broad-searching strategy is executed to get rid of local optima and to jump to the completely new neighbourhood space using mutation operation. The detailed procedure of the mutation operator and the pseudocode of the VNS technique are shown in Fig. 5 and Algorithm 1, respectively.

Fig. 5
figure 5
Detailed process of the mutation operator

Full size image
figure a
Elite preserving mechanism
To prevent the loss of the best feasible solution, in this search process, the greedy selection strategy is employed to compare the fitness value of the new solution with the current optimal solution, and the solution with lower cost compared with the current solution is accepted. The best individuals in the current population are saved to an elite feasible solution group, and it participates in the process of individual updation to guarantee that the feasible solution of the population is invariably optimal.

Linear programming
For the layout chosen in the first phase, the overall material handling cost is minimised in the second phase by calculating the flow quantities in the network and by adjusting the distance between adjacent machines. Specifically, decision variables 𝑦𝑖𝑘, 𝑧𝑘𝑖𝑗, and 𝛽𝑖𝑗 mentioned in our MILP model can be acquired adopting the dDE algorithm introduced above. Additionally, the approximate locations of machines can be fixed, and the formulation related to the optimal coordinates can be simplified to a LP model. The goal is to minimise the overall material handling cost of the layout, which is determined as the product of the flow quantity and distance. The second-phase LP model of our algorithm is shown by Eqs. 1, 3–7, 10, and 13 and solved in a CPLEX solver.

Framework of methodology
Based on the aforementioned operators, our proposed dDE algorithm includes solution encoding, evaluation of fitness function, generation of the initial population, and choice of the mutation and crossover operators, while setting the elite preserving mechanism. The entire framework of the two-phase methodology is illustrated in Algorithm 2. Where, the parameter Max_gen indicates the maximum number of iterations. The machine information set Dat mentioned below contains five types of information, including the width of the machines, material flow between machines, and positioning, ordering, and relation constraints on predetermined machine constraint information.

figure b
Computational experiments
To handle the problems developed in this work, three parts of the computational experiments were implemented to assess the performance of the optimisation methodology. In the first part, we compared the experimental results for nine small-sized instances obtained using the designed algorithm with those obtained by the exact method using CPLEX. To better evaluate the performance of the dDE, a comparative analysis between the two-phase methodology and the heuristic is shown comparing the instances of the unconstrained DRLP. Later, the parameters of our proposed algorithm were tuned and the comparison experiments considering different types of constraints for cDRLP instances of 15 machines were introduced. The third part considered the cDRLP instances with the same types of constraints but different numbers of machines.

The proposed two-phase methodology was compiled in MATLAB 2016b software, and all instances were implemented on a computer configured with Intel ® Core (TM) i5-8400 CPU (2.81 GHz) and 8 GB memory, running the Windows 10 operating system. A single thread was applied for all the trials. All experiments were executed 20 times independently to avoid random effects.

For the newly defined problem, there is currently no research regarding cDRLP. The lack of datasets for satisfying the requirements of our case led us to identify benchmark instances from the SRFLP, which can be adopted and supplemented with certain parameter modifications for testing the cDRLP. It should be noted that the clearances of all the examples trailed here have been contained in the lengths of the machines. All the modified data in our work can be found at https://www.researchgate.net/publication/346032080_cDRLP_data.

Comparison of the discrete differential evolution with the exact method and heuristic
In this subsection, two comparisons of the designed two-phase methodology with the exact method and heuristic are presented using the subsequently mentioned nine small-sized instances. We used several classic datasets previously utilised by other researchers [29, 70, 71], and a modified version of the data for experimenting with our model. All the constraints forced on the machines in the cDRLP model in these datasets were predefined as follows.

For easy recognition, Table 3 lists the representation of different types of constraints, where ‘ → ’, ‘ ← ’, and ‘↑’ indicate the positioning, ordering, and relation constraints, respectively. For example, ‘3 → 4’ represents that machine 3 must be placed at location 4; ‘9 ← 2’ and ‘6 ← 5’ indicate that machine 9 must be allocated before machine 2 and machine 6 must be placed prior to machine 5, respectively; ‘6↑5’ implies that machines 6 and 5 are ordered in pairs and the allocation of other machines between them is not permitted. Here, taking S9 as an example, its constraint matrices P, O and R, are shown below.

𝑃𝑃=(004000000)𝐎=⎛⎝⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜000000000000000001000000000000000000000001000000000000000000000000000000000000000⎞⎠⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟𝐑=⎛⎝⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜000000000000000000000000000000000000000001000000000000000000000000000000000000000⎞⎠⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟
Table 3 Constraints forced on the illustrative constrained DRLP of small-sized machines
Full size table
As cDRLP is a novel problem developed in this work, we have not observed any previously reported methods pertaining to this problem. Several trials with n in the range of 9 – 15 were performed to measure the effectiveness of our algorithm. First, we test the CPLEX (OFV) results reported in Table 4 are calculated according to the formulation given in Eqs. (1)–(18). All trials mentioned above were conducted using IBM ILOG CPLEX V12.8 optimisation software employing the pre-processing values. Next, the two-phase methodology was implemented to solve the same nine instances of the cDRLP. The comparison of the computational results of the two-phase methodology with that of the exact method based on the instance sets of Simmons and Amaral was derived and is listed in Table 4. In this comparison, we set Max_gen = 40, noP = 7, dep = 6 * n, and thre = 80.

Table 4 Comparison of results between the two-phase methodology and CPLEX for instances where 9 ≤ n ≤ 15
Full size table
In Table 4, the columns titled ‘Reference’, ‘Instance’, ‘n’, ‘Two-phase methodology’, and ‘CPLEX’ indicate the source of literature, name of the instance, number of machines, and results obtained by corresponding methods, respectively. Moreover, the columns ‘Min.’, ‘Max.’, ‘Avg.’, and ‘SD’ under the ‘OFV’ (which indicates the objective function value) column and ‘Avg.’ under the ‘Time (s)’ column of the ‘Two-phase methodology’ indicate the minimum, maximum, average, and standard deviation of cost values, as well as the average running time over 20 independent executions, respectively. The last column represents the optimal layout for each instance. Here, the best-known fitness values are shown by the numbers in bold font and the preferable computational times are denoted by the underlined values for convenient of observation. Besides, the symbol ‘/’ serves as the boundary between the upper and lower rows of machines in the layout.

From Table 4, the minimum objective values of the instances in the range of [9, 15] solved by our examined algorithm are consistent with those reported using the exact method. For instances (S9, S9h, and S10), the CPLEX solver has a certain advantage over our algorithm in terms of computational times. However, when compared to the exact method, for the instances where n ≥ 11, the proposed two-phase methodology can be processed in a significantly shorter time while searching for optimal solutions. We determined that the execution time of CPLEX increases sharply with the size of the benchmark instances. For problem instances with 13 machines, our algorithm takes approximately 580 s, while CPLEX requires more than 7500 s for each instance. For the instance of n = 15, the operation time is set to 15 h, but the result is still not available after 15 h, as shown in ‘—’.

To verify the convergence of the two-stage algorithm, we chose the Am15 instance to observe the solution process of the algorithm. The population iteration process is shown in Fig. 6, where the red line indicates the convergence process of the current global optimum and the ‘●’ symbol denotes the current objective values of each individual in the search process.

Fig. 6
figure 6
Population iterative process of two-phase methodology

Full size image
This makes it impossible to tackle the proposed cDRLP in an acceptable time applying a deterministic optimisation method. Clearly, for solving the cDRLP, the performance of the CPLEX solver is moderately poor for larger problem sizes. This proves the superior performance of our algorithm in comparison with the exact method. Therefore, in such situations, the application of our two-phase methodology is strongly recommended to deal with these instances to solve the cDRLP more effectively.

To assess the behaviour of the two-phase methodology objectively, the small-sized instances of the classical DRLP are solved using our two-phase methodology and compared with the results obtained by heuristic3 (Z.Q. Zhang and Cheng 2014). In that study, Zhang et al. proposed three heuristics and compared them. The results showed that heuristic3 was more performant than heuristic1 and heuristic2. We reproduced heuristic3 on our computer, and the running configuration of the two algorithms is consistent.

The computational results of the two-phase methodology and heuristic3 are listed in Table 5. The parameter settings of the optimisation methodology are the same as above. As summarised in Table 5, it can be concluded that the two-phase methodology performs well in solving quality. The overall ‘Min.’, ‘Max.’, ‘Avg.’, and ‘SD’ values acquired by our methodology are consistently better than those yielded by the heuristic3.

Table 5 Comparison of results between the two-phase methodology and heuristic3 for classical DRLP
Full size table
Parameter tuning for comparison experiments with different constraints
In general, the performance of meta-heuristic algorithm is highly relied on its parameters. In this work, we chose the Taguchi design experiment to tune the best combination of parameters. By testing Taguchi design, we can determine which parameter has a more important influence on the performance of the cDRLP, which can help us to tune the algorithm parameters in all instances of different sizes.

Additionally, in this subsection, to assess the effect of different types of constraints on the DRLP, we added a series of versions for the cDRLP. Specifically, we added 15 versions with different restrictions to each instance of n = 15, which were primarily divided into four categories, i.e. unconstrained, positioning, ordering, and relation groups.

The proposed two-phase optimisation methodology for the cDRLP in our work has four main parameters: Max_gen, noP, dep, and thre. The Taguchi L16 (44) design that combines four levels for each parameter was employed to identify the best combination of these parameters, as listed in Table 6.

Table 6 Parameters and their levels
Full size table
We have carried out the cDRLP with each combination of parameters on four tuning experiments (15, 15-P3, 15-O3, 15-R3) based on the orthogonal array. The relative percentage deviation (RPD) of the fitness is obtained according to Eq. (23). Here, 𝑛𝑟 represents the number of times the experiment is repeated. Furthermore, 𝑓𝑖𝑗 is the fitness acquired in the jth replication for instance i, and 𝐿𝐵𝑖 is the minimum fitness acquired for instance i.

𝑅𝑃𝐷𝑖=1𝑛𝑟∑𝑗=11(𝑓𝑖𝑗−𝐿𝐵𝑖𝐿𝐵𝑖)
(23)
The independent replications 𝑛𝑟 = 10 were conducted for each instance. The result of each experiment reported the RPD of the fitness as listed in Table 7. The delta of the response value of each parameter was determined to analyse the key rank of each parameter as listed in Table 8. RPD1, RPD2, RPD3, and RPD4 represent the results of the test instances 15, 15-P3, 15-O3, and 15-R3, respectively.

Table 7 Orthogonal array and results of the experiment
Full size table
Table 8 Response values
Full size table
From Table 8, it can be seen that the parameter thre has the largest delta, which shows that it has the most important influence on the performance of the cDRLP. What is more, parameter Max_gen ranks second, which indicates that it performed a critical part in our algorithm. The delta is less for parameters noP and dep, thereby implying that the importance of these two parameters is weaker than the first two parameters. In addition, the primary effects for the mean values of the factor levels were plotted to illustrate the factor level trend of the cDRLP, as shown in Fig. 7. In the light of the experimental results obtained, Fig. 7 shows that the cDRLP instances n = 15 are supposed to have a greater performance according to the theory of orthogonal experiment when the parameters are finally determined as follows: Max_gen = 50 (Level 4), noP = 7 (Level 4), dep = 5 * n (Level 3), and thre = 40 (Level 4).

Fig. 7
figure 7
Factor level trend of the cDRLP

Full size image
After obtaining the algorithm parameters for instance n = 15, we further executed 16 different tests to analyse the results of the instances under different facility constraints.

The results of these versions added in this section, which were obtained using our algorithm, are listed in Table 9. Table 9 lists the instance name, constraint group, objective function value, average time, and the best-known permutation for each problem instance. Moreover, the second column indicates the various groups of constraints that are set for each instance. The meaning of the symbols of different constraints is presented in Sect. 5.1. For example, 15-P3 involves 15 machines and has three positioning constraints.

Table 9 Performance of different constraints on instances of size n = 15
Full size table
We included the unconstrained DRLP with 15 machines in the comparison (refer to Amaral [22] for details). While checking the results listed in Table 9, we observed that the fitness values of the cDRLP experiments are slightly inferior to the unconstrained DRLP instance, which is obviously because of the positioning, ordering, and relation constraints considered in the cDRLP model. Besides, the results demonstrate that our designed constrained dDE is significantly effective at solving the considered problem.

Figure 8 compares the average time of three different types of cDRLP with five constraints on the machines, based on the unconstrained DRLP with 15 machines. For the instances with only positioning constraints, the running times decreased when we added the positioning constraints. Nevertheless, the results clearly suggest that for instances of the cDRLP with ordering constraints the execution times required for the proposed optimisation methodology depend on the number of constraints, which yields a significant increase.

Fig. 8
figure 8
Average time of three different types of cDRLP with five constraints on the machines

Full size image
Comparison experiments with different constraints of the constrained DRLP instances
To observe the implementation of the developed methodology on the cDRLP instances when more machines are provided, we conducted a series of experiment. For our final set of instances, we considered the other 15 available benchmark instances for the cDRLP applying the data from selected instances (provided by Anjos, Yen [72]) having between 30 to 42 machines.

The predetermined constraints in these experiments were imposed on the same machines in all instances. Machine 13 was subjected to the positioning constraint, which required it to be positioned at the fifth position. Moreover, machines 20 and 10 as well as machines 8 and 15 were subjected to ordering constraints, where machine 20 had to be positioned prior to machine 10 and machine 8 has to be positioned prior to machine 15. Further, it should be noted that the pair of machines 8 and 15 were subjected to relation constraints; consequently, they had to be arranged without allowing the placement of other machines between them.

As it is previously known, the performance of stochastic optimisers (e.g. DE) may be significantly affected by the parameter values of the selected algorithm, especially in the situation of combinatorial optimisation problems including the FLP. To obtain a set of suitable algorithm parameter values, certain transition rules-based experiments were conducted for effectively tackling this problem. Therefore, researchers often conducted experiments based on conversion rules to obtain a set of appropriate algorithm parameter values to solve this problem effectively. In our final experiments, to balance the quality and efficiency of the solution, the parameter combinations are given as follows: Max_gen = 50, noP = 8, dep = 6 * n, and thre = 180.

The results obtained after solving the cDRLP instances are listed in Tables 10. The number of machines is encoded in the instance names listed in the second column. The third column of Table 10 lists the best-known values for these benchmark instances. The fourth column lists the average computational times of solution values obtained using our algorithm. The last column lists the best-known permutation of the cDRLP instances. The results show that the two-phase optimisation methodology is significantly effective for tackling the problem under consideration.

Table 10 Results of the cDRLP instances using the two-phase methodology for n = 30, 36, and 42
Full size table
Managerial implications
From a managerial perspective of managerial, the configuration of the cDRLP in manufacturing systems is typically relevant for reducing material handling costs, and lead times, rising productivity, adapting systems to future changes, and offering a healthy, comfortable, and safe environment for workers. However, how to efficiently arrange machines is a challenging mission.

The combination of the cDRLP and comprehensive facility constraints has greatly improved the operational impact of facilities related to actual constraints on the actual production site. We designed two-phase optimisation to support decision-makers the possibility to acquire a high-quality scheme in a reasonable time. Additionally, our work provides an insight into which factors have a crucial influence on layout-related material handling costs, giving the decision-maker the possibility to consider reasonable restrictions according to his or her own strategy.

Conclusion and future worK
Previous research works related to double-row layout problem focused on the unconstrained optimisation problem for minimising the overall material handling cost among a given number of machines, where the machines can be allocated freely at any position. However, while handling a practical DRLP, different types of constraints that are forced on the arrangement of machines must be satisfied. Particularly, positioning, ordering, and relation constraints on the placement of certain machines may be encountered, such as positioning a machine at a fixed position, placing a machine prior to another, and ordering two machines together as a pair, respectively.

To the best of our knowledge, this work is the first to present a constrained DRLP, which can be regarded as a novel extension of the traditional facility layout problem, with considerable practical potential. The cDRLP arranges machines at different positions, considering transportation costs and operational constraints between machines. To be more realistic, the model considers three types of constraints (positioning, ordering, and relation constraints), giving the decision-maker the possibility to consider reasonable restrictions according to his own strategy.

A MILP formulation model for the cDRLP was presented, and nine benchmark instances were employed to test it using the CPLEX solver. However, it is difficult to deal with the larger-sized cases via the exact method. Thus, a two-phase methodology was devised in combination with the discrete differential evolution to efficiently obtain high-quality solutions for the cDRLP. In our proposed algorithm, many efficient techniques, including population initialisation strategy, discrete differential evolution mechanism, VNS technique, and elite preserving mechanism, were designed and employed to handle the cDRLP in a more effectively way. We applied a Taguchi method to set more reasonable algorithm parameters based on the results of small, medium, and large size instances.

In addition to this, extensive tests are performed to demonstrate the performance of our two-phase methodology. The experimental results showed that, when compared to the exact method (CPLEX), the proposed method could typically identify the optimal solution for small-sized instances in a shorter time. Besides, a series of experiments were conducted to assess the performance of the discrete differential evolution. In numerical experimentation, the two-phase methodology was determined to be capable of obtaining highly preferable solutions, even for several large-sized instances.

The following are suggestions for future research:

More restrictions of the cDRLP from practical industrial conditions should be determined and optimised.

The mathematical models of the cDRLP can be further improved based on the best standard DRLP model.

To efficiently solve instances with larger sizes, efficient methods must be analysed to advance the solution quality and efficiency of the solving problem.

Further, more objectives can be introduced into the cDRLP model.

Keywords
Double-row layout problem
Differential evolution
Combinatorial optimisation
Staged approach
Facilities planning and design