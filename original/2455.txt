The development of universal and high-efficiency optimization algorithms is a very important research direction of neural networks. Stochastic Gradient Decent Momentum(SGDM) is one of the most successful optimization algorithms, and easily fall into local extremes minimum. Inspired by the prominent success of Fractional-order Calculus in automatic control, we proposed a method based on Fractional-Order named Fractional-Order Momentum(FracM). As a natural extension of integral calculus, fractional order calculus inherits almost all the characteristics of integral calculus, and have some memorization and nonlocality. FracM performs fractional-order difference of momentum and gradient in SGDM algorithm. FracM can partially solve the problem of traps in the local minimum point and accelerated the train process. The proposed FracM optimization method can compare with the most advanced SGDM and Adam and other advanced optimization algorithm in terms of classification accuracy. The experiments show that FracM outperforms other optimizers on CIFAR10/100 and textual datasets IMDB with transformer-based models.

Introduction
Compared with the ability of humans to process information, the performance of traditional machine learning technology is far from satisfactory. Inspired by human information processing capabilities, the concept of deep learning was introduced at the end of the 20th century. Since Hinton [18] proposed a novel deep learning framework named deep belief network (DBN) in 2006, and a lot of breakthroughs have been made in the field of deep learning. In the past ten years, deep learning technology has developed rapidly, and significant progress has been made in signal and information processing. Compared with traditional machine learning and artificial intelligence methods, deep learning technology has made great progress recently, successfully applied to speech recognition, natural language processing (NLP), information retrieval, computational vision and image analysis [25, 35, 50]. DNN have many different structural changes to adapt to different tasks. For image classification problems, convolutional neural networks (CNN) have better performance in extracting features. CNN can be seen as a feature extraction layer behind the input layer, and finally classified by multi-layer perception (MLP). In recent years, based on CNN many different network structures are derived, such as AlexNet, InceptionNet [15], VGGNet [47], GoogleNet and ResNets [45]. For data timing problem recurrent neural network (RNN) is used to extract time series information and put it after the feature extraction layer. Long short-term Memory network(LSTM) [33, 48] is a special RNN, which is mainly used to solve the problem of gradient disappearance and gradient explosion during Long sequence training. In short, LSTM performs better in longer sequences than normal RNN [2, 13].

Since the development of deep learning technology, computers can design algorithms to improve their ability of learn from data and make decisions or predictions based on data. In the past few decades, deep learning has brought a huge impact on our daily lives, including efficient Internet search, autonomous driving systems, computer vision, and optical character recognition. In addition, through the use of deep learning technology, the ability of artificial intelligence (AI) has also been further improved [26, 40, 54].

Deep learning technology overcomes the shortcomings of traditional algorithms that rely too much on manual design features and has aroused growing research interests. Experimental results show that deep learning fits well with big data analysis. The reason why deep learning can be widely popular in the training process is that DNN can partially solve the overfitting problem with the development of big data analysis technology, and obtain a better local minimum, and a faster convergence speed.

The idea of deep neural network is derived from artificial neural network. The neural network uses the corrected gradient information to continuously update the network parameters through back propagation. Since the update process relies on the local gradient information of the random initial point, it is easy to fall into the local extremum. In addition, if the size of the training data is not large enough, the neural network will face the problem of overfitting. Many high-efficiency training techniques have been proposed to solve the above problem and improve the efficiency and accuracy of deep learning. The training of DNN has long been affected by gradient explosion and gradient disappearance, while parameter initialization [12, 44] and ReLU activation function [19] have alleviated this problem. Dropout technology is used to avoid over fitting [20] and has achieved obvious practical results. The batch normalization technology proposed later further improves the robustness of training to hyperparameters. Simonyan [42] analyzes the impact of convolutional network depth on accuracy in large-scale image recognition problems.

This work was mainly focus on optimization method on DNN. DNN have the characteristics of nonlinear, non-convex, multilayer hidden structure, feature vectorization, and massive model parameters, therefore, the optimization problem of deep learning is quite complicated. The goal of supervised learning is to find a function that improves the accuracy on the training data set and has good generalization ability. The research of optimization problem can be divided into three steps. The first is to make the algorithm run and converge to a reasonable solution, such as a saddle point. The second is to make the algorithm converge as fast as possible. The third step is to ensure that the algorithm converges to a solution with a low Loss value (e.g., the global minimum).

When DNN is used to complete classification and recognition tasks, its performance mainly depends on the model structure and optimization algorithm. Therefore, a good optimization algorithm can improve the accuracy and speed of the deep neural network to complete the task. The current optimization algorithms can be roughly divided into first-order methods and second-order methods. The second-order method uses the Hessian matrix approximation to a certain extent. The first-order method and the second-order method are interchangeable, depending on the amount of second-order information used [43]. In the past ten years, due to the shortcomings of the second-order optimization algorithm, such as large memory usage, the first-order optimization algorithm has been the main optimization algorithm, so this article mainly studies the first-order method. Botou and Bousquet [6] provided some theories to prove why first-order methods are sufficient for large-scale machine learning problems. Some researchers now believe that the second-order method may be overfitting and cannot be compared with the first-order method. SGD is the most basic method to find a suitable solution [4] in deep neural network optimization. It has a certain implicit regularization effect and can obtain good test performance. However, recent second-order optimization methods have also achieved some results. Osawa [36] has achieved good test performance on ImageNet using K-FAC (only 35 epochs can reach 75% on ImageNet top-1 Accuracy). Whether the second-order method can be resurrected in future is an interesting thing.

The second-order optimization algorithm calculates the second-order partial derivative of the loss function. In Newton‚Äôs method, the simplest second-order optimization algorithm, the goal is to find the critical point of the function. At the critical point, the loss function can get the maximum or minimum value, or the saddle point. However, the saddle point is not desirable, and only the smallest point is the optimization goal. In other words, when the Hessian matrix is positive, Newton‚Äôs method can find the minimum value of the optimization objective, and it is likely to stop near the saddle point or the local minimum point. In actual high-dimensional data sets, second-order optimization algorithms consume a lot of memory and are often not feasible.

The rest of this article is arranged as follows: Sect. 2 introduced relevant popular methods in optimization field; Sect. 3 detailed introduction our proposes optimization method; Sect. 4 conducts the convergence problem analysis based on the previous problem analysis; Sect. 5 introduces the data set and basic parameter settings used in the experiment and Sect. 6 introduces the comparative analysis of the experimental results; Sect. 7 summarizes the full text.

Related work
In recent years, many improved optimization algorithms have been proposed on the basis of traditional adaptive optimization algorithms. Below we will introduce commonly used optimization algorithms and the latest improved algorithms. For SGD, in the iterative process, all parameters are updated at the same learning rate ùúÇ in Eq. (1), where Óà∏ùë°‚àí1,ùúÉ is a loss functione, ùëît,i is the computed gradient, ùúÉ is the model parameter.

ùëîùë°‚àí1,ùëñ=‚àÇ(Óà∏ùë°‚àí1,ùúÉ)‚àÇ(ùúÉùë°‚àí1,ùëñ)ùúÉùë°,ùëñ=ùúÉùë°‚àí1,ùëñ‚àíùúÇ‚àóùëîùë°‚àí1,ùëñ
(1)
The gradient-based first-order optimization algorithm has core significance in the field of deep learning. SGD is the most widely used optimization algorithm, which solves many practical problems [5]. SGD calculates the gradient of the current parameter according to the defined loss function and labeled samples, and the parameter is updated in the opposite direction of the calculated gradient until convergence or reach a fixed number of iterations. The negative gradient direction help loss function reduces fastest. According to the number of samples in each batch, gradient descent is divided into stochastic gradient descent, mini-batch gradient descent, and batch gradient descent.

(1)
SGD uses the same learning rate for all dimension parameters in the iterative process, which easily leads to slow optimization or model parameter oscillation [46].

(2)
If the loss function has a local minimum or saddle point (see Figs. 1, 2) [7], SGD is easily stuck in this area, since the gradient is zero.

(3)
The gradient calculation is usually in small batches; therefore, the calculated gradient is noisy.

Due to the shortcomings of SGD, many scholars have proposed some improved optimization algorithms to solve the problem of SGD. The SGD with momentum (SGDM) algorithm [37] borrows the concept of momentum in physics. It simulates the inertia of moving objects. When it is updated, it will keep the previously updated direction within a reasonable range and use the current gradient to fine-tune the final update direction. Compared with traditional methods, the biggest advantage is that it can effectively avoid oscillation.

Another major improvement of the Nesterov Accelerated Gradient (NAG) algorithm. Compared with SGDM, the direction of the gradient is no longer calculated from the current position, but calculated from the ‚Äúexpected position‚Äù after moving in the direction of the first item. Intuitively speaking, the direction of the gradient corrected by this method can ‚Äúpredict‚Äù the updated result. In fact, in some cases, Nesterov acceleration gradient does accelerate convergence.

Adagrad introduces the sum of squares of historical gradients as the attenuation factor. The adaptive learning rate for different parameters makes the loss function converge faster. The learning rate decreases with the increase in the gradient, that is, the larger the gradient, the smaller the learning rate, and the smaller the gradient, the greater the learning rate, which avoids the problem of constant learning rate in the SGD method. The algorithm still has some shortcomings. You need to manually specify the initial learning rate. As the denominator continues to accumulate historical gradients, the learning rate will gradually drop to 0. Moreover, if the initial gradient is very large, the initial learning rate of the entire training process will be very small, which leads to a longer training time.

Adadelta is an improvement of the Adagrad algorithm, reducing the radical aspect of Adagrad monotonically reducing the learning rate [56]. Adagrad accumulates all past gradients, while Adadelta limits the accumulation of past gradients and controls the infinite accumulation of gradients in the form of a time window. Changing the accumulated gradient information from the total historical gradient to the accumulation of the window period before the current time is equivalent to the accumulation of historical gradient information multiplied by the attenuation coefficient. Solve the problem that the learning rate drops due to the accumulation of historical gradients.

Adam [23, 34] is the most popular adaptive learning rate algorithm, which uses the online learning framework proposed in [60]. Adam keeps the exponential decay average of past gradients ùëöt, similar to SGDM. In addition to these, Adam also stores the exponential decay average of the past squared gradient ùë£t, which is the same as Adadelta and RMSprop. Adam also has its own problems, the fluctuation of the second-order moment causes the fluctuation of the learning rate. AMSGrad [38] solves this problem, it constantly refreshes the maximum value of the second-order moment in the past. AMSGrad uses the maximum value of the second moment to optimize the iterative direction of the parameters. AMSGrad adopts the idea and bias-corrected method basically similar to Adam algorithm. AMsGrad uses the value of ùë£ÃÇ maxt,i instead of just the value of ùë£ÃÇ t,i , is defined in Eq. (2):

Fig. 1
figure 1
Saddle point in deep neural network

Full size image
Fig. 2
figure 2
Local min point in deep neural network

Full size image
ùëöt=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëît,iùë£t=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)(ùëît,i)2ùëöÃÇ t=ùëöt/(1‚àíùõΩt1)ùë£ÃÇ t=ùë£t/(1‚àíùõΩt2)ùë£ÃÇ maxt,i=max(ùë£ÃÇ maxùë°‚àí1,i,ùë£ÃÇ t,i) 
(2)
ùë£ÃÇ maxùë°‚àí1,i=0 for ùë°=1. The parameter updates are performed using the rules, as Eq. (3):

ùúÉùë°+1,ùëñ=ùúÉùë°,ùëñ‚àíùúÇùë°√óùëöÃÇ ùë°,ùëñùë£ÃÇ ùë°,ùëñ‚Äæ‚Äæ‚Äæ‚àö+ùúñ
(3)
At present, almost all deep neural networks use two methods to improve optimization efficiency and accuracy, the first one is adjusting the learning rate, the second one is a new neural network structure. This paper mainly discusses the optimizer.

Adaptive and Momental Bound (AdaMod) [8] was an optimizer skilled in the control of learning rate bounds, which regulate the learning rate not too big than the historical calculating data, guarantee a proper convergence, and make the optimization process of the entire model more stable. Thus, the parameter update in AdaMod is defined in Eq. (4):

ùëöùë°=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëîùë°,ùëñùë£ùë°=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)(ùëîùë°,ùëñ)2ùëöÃÇ ùë°=ùëöùë°/(1‚àíùõΩùë°1)ùë£ÃÇ ùë°=ùë£ùë°/(1‚àíùõΩùë°2)ùúÇùë°=ùõº/(ùë£ÃÇ ùë°‚Äæ‚Äæ‚àö+ùúñ)ùë†ùë°=ùõΩ3ùë†ùë°‚àí1+(1‚àíùõΩ3)ùúÇùë°ùúÇÃÇ ùë°=min(ùúÇùë°,ùë†ùë°)ùúÉùë°,ùëñ=ùúÉùë°‚àí1,ùëñ‚àíùúÇÃÇ ùë°ùëöÃÇ ùë°
(4)
AdamP [17] algorithm modifies the radial component of the gradient to achieve limiting the gradient norm to be too large and achieve a better result. This technique can be easily applied to other optimization algorithms, the parameter update in AdamP is defined in Algorithms 1 and 2:

figure a
figure b
DiffGrad [10] is a novel optimizer which adjust the learning rate according to the local change in gradients. Thus, the parameter update in DiffGrad is defined in Eq. (5):

ùëöùë°=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëîùë°,ùëñùë£ùë°=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)(ùëîùë°,ùëñ)2ùëöÃÇ ùë°=ùëöùë°/(1‚àíùõΩùë°1)ùë£ÃÇ ùë°=ùë£ùë°/(1‚àíùõΩùë°2)ùúâùë°,ùëñ=ùê¥ùëèùë†Sig(ùõ•ùëîùë°,ùëñ)ùê¥ùëèùë†Sig(ùë•)=11+ùëí‚àí|ùë•|ùõ•ùëîùë°,ùëñ=ùëîùë°‚àí1,ùëñ‚àíùëîùë°,ùëñùúÉùë°+1,ùëñ=ùúÉùë°,ùëñ‚àíùúÇùë°√óùúâùë°,ùëñ√óùëöÃÇ ùë°,ùëñùë£ÃÇ ùë°,ùëñ‚Äæ‚Äæ‚Äæ‚àö+ùúñ
(5)
LamB [53] was an optimizer through control the learning rate in large batch settings to accelerate optimization procedure. the learning rate is scaled by some designed function, which is similar to the normalization. Thus, the parameter update in LamB is defined in Eq. (6), where ùúô(ùëß)=min{max{ùëß,ùõæùëô},ùõæùë¢}. ùõæùëô,ùõæùë¢ was Upper and lower bound.

ùëöùë°=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëîùë°,ùëñùë£ùë°=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)ùëî2ùë°,ùëñùëöÃÇ ùë°=ùëöùë°/(1‚àíùõΩùë°1)ùë£ÃÇ ùë°=ùë£ùë°/(1‚àíùõΩùë°2) rùë°,ùëñ=ùëöùë°^ùë£ùë°^‚Äæ‚Äæ‚àö+ùúñùë•ùë°+1,ùëñ=ùë•ùë°,ùëñ‚àíùúÇùë°ùúô(‚Äñ‚Äñùë•ùë°,ùëñ‚Äñ‚Äñ)‚Äñ‚Äñùëüùë°,ùëñ+ùúÜùë•ùë°,ùëñ‚Äñ‚Äñ(ùëüùë°,ùëñ+ùúÜùë•ùë°,ùëñ)
(6)
Lookahead [57] select a better optimization direction help smooth out the oscillations through the parameter interpolation, the better optimization direction was generated by another optimizer with fast weights updates along the low curvature directions. the Lookahead algorithm can improve optimizer stability, also promote a faster convergence. Thus, the parameter update in Lookahead is defined in Eq. (7), where A applying the fast weights updated.

 Synchronize  parameters ùúÉùë°,0‚Üêùúôùë°‚àí1 for ùëñ=1,2,‚Ä¶,ùëò do  sample  minibatch  of  data ùëë‚àºÓà∞ùúÉùë°,ùëñ‚ÜêùúÉùë°,ùëñ‚àí1+ùê¥(ùêø,ùúÉùë°,ùëñ‚àí1,ùëë) end  for ùúôùë°‚Üêùúôùë°‚àí1+ùúÇ(ùúÉùë°,ùëò‚àíùúôùë°‚àí1)
(7)
NovoGrad [11] was an adaptive SGD method, which mainly focus on gradients normalization and 2ùëõùëë moment with each layers. Thus, the parameter update in NovoGrad is defined in Eq. (8):

ùëîùëîùëôùë°‚Üê‚àáùëôÓà∏ùë°,ùúÉùë£ùëôùë°‚ÜêùõΩ2‚ãÖùë£ùëôùë°‚àí1+(1‚àíùõΩ2)‚ãÖ‚Äñ‚Äñùëîùëîùëôùë°‚Äñ‚Äñ2ùëöùëôùë°‚ÜêùõΩ1‚ãÖùëöùëöùëôùë°‚àí1+(ùëîùëîùëôùë°ùë£ùëôùë°‚Äæ‚Äæ‚àö+ùúñ+ùëë‚ãÖùúÉùúÉùëôùë°,ùëñ)ùúÉùúÉùëôùë°+1,ùëñ‚ÜêùúÉùúÉùëôùë°,ùëñ‚àíùúÇùë°‚ãÖùëöùëöùëôùë°
(8)
PID [1] first reveal the relationship between traditional PID and SGD with Momentum. the optimization algorithm imitate the PID algorithm layout [1]. the optimization algorithm is defined in Eq. (9):

SGD is a P Controller

ùúÉùë°+1=ùúÉùë°‚àíùëü‚àÇùêøùë°/‚àÇùúÉùë°
(9)
SGD wth momentum optimization is a PI Controller, and defined in Eq. (10)

ùëâùë°+1=ùúÇùëâùë°‚àíùëüùëîùë°‚àí1,ùëñùúÉùë°+1,ùëñ=ùúÉùë°,ùëñ+ùëâùë°+1
(10)
SGD is a PI Controller, and defined in Eq. (11)

ùëâùë°+1=ùúÇùëâùë°‚àíùëüùëîùë°‚àí1,ùëñùê∑ùë°+1=ùúÇùê∑ùë°+(1‚àíùúÇ)(ùëîùë°,ùëñ‚àíùëîùë°‚àí1,ùëñ)ùúÉùë°+1,ùëñ=ùúÉùë°,ùëñ+ùëâùë°+1+ùêæùëëùê∑ùë°+1
(11)
The quasi-hyperbolic momentum algorithm (QHM) [31] and quasi-hyperbolic Adam (QHAdam) [31] can recovers numerous than other optimization algorithms in an efficient and stable manner. Through introduce a hyperparameter ùõΩ, QHM can recover many optimizer. Thus, the parameter update in QHM is defined in Eq. (12):

parameterized byùõº,ùúñ‚â•0,ùõΩ1,ùõΩ2‚àà[0,1), and ùë£1,ùë£2‚ààùëÖ, uses  the  update  rule: ùëîùë°+1,ùëñ‚ÜêùõΩ‚ãÖùëîùë°,ùëñ+(1‚àíùõΩ)‚ãÖ‚àáÓà∏ùë°,ùúÉùëî‚Ä≤ùë°+1‚Üê(1‚àíùõΩùë°+11)‚àí1‚ãÖùëîùë°+1ùë†‚Ä≤ùë°+1‚Üê(1‚àíùõΩùë°+12)‚àí1‚ãÖùë†ùë°+1ùúÉùë°+1,ùëñ‚ÜêùúÉùë°,ùëñ‚àíùúÇ‚é°‚é£‚é¢‚é¢‚é¢(1‚àíùúà1)‚ãÖ‚àáÓà∏ùë°,ùúÉ+ùúà1‚ãÖùëöÃÇ ùë°+1(1‚àíùúà2)(‚àáÓà∏ùë°,ùúÉ)2+ùúà2‚ãÖùë£ÃÇ ùë°+1‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àö+ùúñ‚é§‚é¶‚é•‚é•‚é•
(12)
Shampoo [14] produce a new structure-aware preconditioning algorithm for stochastic optimization over tensor spaces. Shampoo through maintains a set of preconditioning matrices, each of which only operates on a single dimension. Thus, the parameter update in Shampoo is defined in Eq. (13), where ùêø0=0:

ùëîùë°,ùëñ=‚àáÓà∏ùë°,ùúÉ{ùê∫ùë°‚àà‚Ñùùëö√óùëõ}ùêøùë°=ùêøùë°‚àí1+ùëîùë°,ùëñùëî‚ä§ùë°,ùëñùëÖùë°=ùëÖùë°‚àí1+ùëî‚ä§ùë°,ùëñùëîùë°,ùëñùúÉùë°+1,ùëñ=ùúÉùë°,ùëñ‚àíùúÇùêø‚àí1/4ùë°ùëîùë°,ùëñùëÖ‚àí1/4ùë°
(13)
Yogi [55] was a optimizer, through the control of effective larning rate, which can obtain a better convergence and accuracy. Thus, the parameter update in Yogi is defined in Eq.(14), where Set ùëö0=0, ùë£0=0

ùëöùë°=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëîùë°ùë£ùë°=ùë£ùë°‚àí1‚àí(1‚àíùõΩ2)sign(ùë£ùë°‚àí1‚àíùëî2ùë°,ùëñ)ùëî2ùë°,ùëñùë•ùë°+1=ùë•ùë°‚àíùúÇùë°ùëöùë°/(ùë£ùë°‚Äæ‚Äæ‚àö+ùúñ)
(14)
AdaBound [30] and AmsBound [30] was a new variant of ADAM and AmsGrad respectively, which adaptive adjustive learning rate between upper bound and lower bound, which converge to a constant value. At the very beginning, AdaBound was an Adam optimizer, and gradually convert to SGD in the end. Thus, the parameter update in AdaBound is defined in Eq. (15), where clips the learning rate element-wisely such that the output is constrained to be in [ùúÇùëô,ùúÇùë¢]

ùëîùë°,ùëñ=‚àáÓà∏ùë°,ùúÉùëöùë°=ùõΩ1ùë°ùëöùë°‚àí1+(1‚àíùõΩ1ùë°)ùëîùë°,ùëñùë£ùë°=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)ùëî2ùë°,ùëñ and ùëâùë°=diag(ùë£ùë°)ùúÇÃÇ ùë°=Clip(ùúÇ/ùëâùë°‚Äæ‚Äæ‚àö,ùúÇùëô(ùë°),ùúÇùë¢(ùë°))ùúÇùë°=ùúÇÃÇ ùë°/ùë°‚àöùúÉùë°+1,ùëñ=‚àèÓà≤,diag(ùúÇ‚àí1ùë°)(ùúÉùë°,ùëñ‚àíùúÇùë°‚äôùëöùë°)
(15)
Rectified Adam (RAdam) [27] improves the accuracy of optimization by modifying the variance of the learning rate, and can combine training techniques such as gradient clipping and learning rate smooth with RAdam to achieve a better result. Thus, the parameter update in RAdam is defined in Eq. (16):

ùëöùë°=ùõΩ1ùëöùë°‚àí1+(1‚àíùõΩ1)ùëîùë°,ùëñùë£ùë°=ùõΩ2ùë£ùë°‚àí1+(1‚àíùõΩ2)(ùëîùë°,ùëñ)2ùëöÃÇ ùë°=ùëöùë°/(1‚àíùõΩùë°1)ùúåùë°‚Üêùúå‚àû‚àí2ùë°ùõΩùë°2/(1‚àíùõΩùë°2)if the variance is tractable, i.e.,ùúåùë°>4,thenùëôùë°‚Üê(1‚àíùõΩùë°2)/ùë£ùë°‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àöùëüùë°‚Üê(ùúåùë°‚àí4)(ùúåùë°‚àí2)ùúå‚àû(ùúå‚àû‚àí4)(ùúå‚àû‚àí2)ùúåùë°‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àöùúÉùë°,ùëñ‚ÜêùúÉùë°‚àí1,ùëñ‚àíùõºùë°ùëüùë°ùëöÀÜùë°ùëôùë°ùëíùëôùë†ùëíùúÉùë°,ùëñ‚ÜêùúÉùë°‚àí1,ùëñ‚àíùúÇùëöùë°ÀÜ
(16)
SgdW and AdamW [28] analyzes the difference between L2 regularization and weight decay regularization. For adaptive optimization algorithms, the two are not equivalent. The author can restore the original L2 regularization by decoupling the weight attenuation in the loss function. Thus, the parameter update in SgdW and AdamW is defined in Eq. (17):

ùúÉùúÉùë°‚ÜêùúÉùúÉùë°‚àí1‚àíùëöùë°‚àíùúÇùë°ùúÜùúÉùúÉùë°‚àí1ùúÉùúÉùë°,ùëñ‚ÜêùúÉùúÉùë°‚àí1,ùëñ‚àíùúÇùë°(ùõºùëöÃÇ ùë°/(ùë£ÃÇ ùë°‚Äæ‚Äæ‚àö+ùúñ)+ùúÜùúÉùúÉùë°‚àí1,ùëñ)
(17)
AdaBelief [59] use the exponential moving average to estimate the gradient, if the difference between the observed gradient and prediction gradient was greater than the threshold, then distrust the current observation and take a small step; if the difference between the observed gradient and prediction gradient was less than the threshold, then trust it and take a large step. Thus, the parameter update in AdaBelief is defined in Eq. (18):

ùëöùë°,ùëñ=ùõΩ1ùëöùë°‚àí1,ùëñ+(1‚àíùõΩ1)ùëîùë°,ùëñùë†ùë°,ùëñ=ùõΩ2ùë†ùë°‚àí1,ùëñ+(1‚àíùõΩ2)(ùëîùë°,ùëñ‚àíùëöùë°,ùëñ)2ùëöÃÇ ùë°=ùëöùë°,ùëñ(1‚àíùõΩùë°1)ùë†ÃÇ ùë°=ùë†ùë°,ùëñ(1‚àíùõΩùë°2)ùúÉùë°‚Üê‚àèÓà≤,ùë†ùë°‚àö(ùúÉùë°‚àí1‚àíùúÇùëöÀÜùë°ùë†ùë°‚Äæ‚Äæ‚àö+ùúñ)
(18)
Apollo [32] dynamically incorporates the curvature of the loss function by approximating the Hessian via a diagonal matrix. This paper main contribution is the storage of approximation Hessianas diagonal matrix efficient as first-order optimization methods with linear complexity of time and memory. Thus, the parameter update in Apollo is defined in Eq. (19), where ùê∑ùë°=rectify(ùêµùë°,ùúé)=max(|ùêµùë°|,ùúé).

ùëö0,ùëë0,ùêµ0‚Üê0,0,0ùëöùë°+1‚ÜêùõΩ(1‚àíùõΩùë°)1‚àíùõΩùë°+1ùëöùë°+1‚àíùõΩ1‚àíùõΩùë°+1ùëîùë°+1,ùëñùõº‚Üêùëëùëáùë°(ùëöùë°+1‚àíùëöùë°)+ùëëùëáùë°ùêµùë°ùëëùë°(‚Äñùëëùë°‚Äñ4+ùúñ)4ùêµùë°+1‚Üêùêµùë°‚àíùõº‚ãÖDiag(ùëë2ùë°)ùê∑ùë°+1‚Üêrectify(ùêµùë°+1,1)ùëëùë°+1‚Üêùê∑‚àí1ùë°+1ùëöùë°+1ùúÉùë°+1‚ÜêùúÉùë°‚àíùúÇùë°+1ùëëùë°+1
(19)
AdaHessian [52] through spatial averaging and momentum to precondition the gradient vector, then construct the diagonals of the Hessian matrix. The precondition gradient vector lead to a better descent directions. This paper main contribution is the combination of spatial averaging for Hessian diagonal, which reduce the highly misleading caused by the noisy local Hessian information. Thus, the parameter update in AdaHessian is defined in Eq. (20)

ùëîùë°,ùëñ=‚àáÓà∏ùë°,ùúÉùêá=1ùëÅùêµ‚àëùëñ=1ùëÅùêµ‚àÇ2Óà∏ùë°,ùúÉ‚àÇùúÉ2ùê∑ùê∑=diag(ùêá)ùê∑ùê∑(ùë†)[ùëñùëè+ùëó]=‚àëùëèùëò=1ùê∑ùê∑[ùëñùëè+ùëò]ùëè, for 1‚â§ùëó‚â§ùëè,0‚â§ùëñ‚â§ùëëùëè‚àí1ùê∑ùê∑‚éØ‚éØ‚éØ‚éØ‚éØùë°=(1‚àíùõΩ2)‚àëùë°ùëñ=1ùõΩùë°‚àíùëñ2ùê∑ùê∑(ùë†)ùëñùê∑ùê∑(ùë†)ùëñ1‚àíùõΩùë°2‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àöùëöùë°=(1‚àíùõΩ1)‚àëùë°ùëñ=1ùõΩùë°‚àíùëñ1ùê†ùë°,ùëñ1‚àíùõΩùë°1ùë£ùë°=(ùê∑ùê∑‚éØ‚éØ‚éØ‚éØ‚éØùë°)ùëò=((1‚àíùõΩ2)‚àëùë°ùëñ=1ùõΩùë°‚àíùëñ2ùê∑ùê∑(ùë†)ùëñùê∑ùê∑(ùë†)ùëñ1‚àíùõΩùë°2‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àö)ùëòùúÉùë°=ùúÉùë°‚àí1‚àíùúÇùëöùë°/ùë£ùë°
(20)
Adafactor [41] did not modified the first moment of Adam, but modify the second moment with factored and accumulators. Thus, the parameter update in Adafactor is defined in Eq. (21), where ùúñ1=10‚àí30, ùúñ2=10‚àí3, ùúåùë°=min(10‚àí2,1ùë°‚àö), ùëë=1, ùõΩÃÇ 2ùë°=1‚àíùë°‚àí0.8.

ùõºùë°=max(ùúñ2,RMS(ùëãùë°‚àí1))ùúåùë°ùëîùë°,ùëñ=‚àáÓà∏ùë°,ùúÉùë£ÃÇ ùë°=ùõΩÃÇ 2ùë£ÃÇ ùë°‚àí1+(1‚àíùõΩÃÇ 2ùë°)(ùëî2ùë°,ùëñ+ùúñ11ùëõ)ùëàùë°=ùëîùë°,ùëñ/ùë£ÃÇ ùë°‚Äæ‚Äæ‚àöùëàÃÇ ùë°=ùëàùë°/max(1,RMS(ùëàùë°)/ùëë)ùúÉùë°=ùúÉùë°‚àí1‚àíùúÇùë°ùëàÃÇ ùë°
(21)
Aggregated Momentum (AggMo) [29] significantly dampens oscillations caused by the aggressive ùõΩ. This paper main contribution is improve stability even with aggressive ùõΩ, through modify the gradient descent algorithm and calculate a more stable update velocity. The update velocity average the previous velocity vectors at each optimization step, and used to update the model parameters. Thus, the parameter update in AggMo is defined in Eq. (22), where ùõº=0.1, ùõΩ(ùëñ)=1‚àíùëéùëñ‚àí1.

ùë£(ùëñ)ùë°=ùõΩ(ùëñ)ùë£(ùëñ)ùë°‚àí1‚àí‚àáùúÉùëì(ùúÉùúÉùë°‚àí1)ùúÉùúÉùë°=ùúÉùúÉùë°‚àí1+ùúÇùë°ùêæ‚àëùëñ=1ùêæùë£(ùëñ)ùë°
(22)
Recently, some novel articles apply fractional order to neural networks. Bao [3] advance a BP neural network with fractional-order, which was determine convergence and avoid overfitting. Kaslik [22] determine the critical value of the fractional order. The global stability analysis of the fractional-order neural network based on LMI conditions is given by Zhang [58]. Yang [51] analyzes the stability of the fractional neural network in the case of no delay and with delay is analyzed. Ding [9] studied global projective synchronization of non-identical fractional neural networks with sliding mode control.

Fractional-order stochastic classical momentum (FOSCM [21]) detailed formula derivation is carried out for the application of fractional order in the optimization. Where ùõΩ, and ùõΩ1, ùõΩ2 is the moment for SGDM and Adam respective, ùõæ is the fractional order, and ùõΩ<1. the parameter update is defined in Eqs. (23), (24):

ùëöùë°,ùëñ=(ùõΩ‚àí1+ùõæ)ùëöùë°‚àí1,ùëñ+‚àëùëû=2ùëò(‚àí1)ùëû+1(ùõæùëû)ùëöùë°‚àíùëû,ùëñ‚àíùúÇùëîùë°,ùëñ
(23)
Adam algorithm with fractional-order momentum, the parameter update is defined as:

ùëöùë°,ùëñ=(ùõΩ1‚àí1+ùõæ)ùëöùë°‚àí1,ùëñ+‚àëùëû=2ùëò(‚àí1)ùëû+1(ùõæùëû)ùëöùë°‚àíùëû,ùëñ+(1‚àíùõΩ1)ùëîùë°,ùëñùë£ùë°,ùëñ=(ùõΩ2‚àí1+ùõæ)ùë£ùë°‚àí1,ùëñ+‚àëùëû=2ùëò(‚àí1)ùëû+1(ùõæùëû)ùë£ùë°‚àíùëû,ùëñ+(1‚àíùõΩ2)(ùëîùë°,ùëñ)2
(24)
In this paper, a gradient-based optimizer is proposed to improve the well-known SGD optimizer. In the iterative process, the gradient is used to improve the iteration direction. The main work of this paper is as follows:

A new method of deep neural network optimization is proposed based on the fractional order and gradient descent method, which improves the performance of the algorithm using fractional order to approximate simulation the current update vector, the coefficient of the past gradient was calculated by fractional order.

We showed how to use fractional order to approximate the update vector direction of the optimization algorithm.

Due to the exponential moving average, Adam has a convergence problem. The gradient may experience large changes, so the update vector may fluctuate instead of monotonically changing.

This method resolves saddle points and oscillations by adjusting the optimization direction in fractional order.

We conducted experimental research on the proposed FracM and observed its improved performance in image classification tasks using ResNet-based CNN architecture. For the sake of comparison, we also conducted experiments on other optimization methods.

Algorithm
According to the discussions in Section II, some existing classic optimization algorithms, such as Adam and other algorithm use exponential moving averages of squared past gradients to modify the iteration direction and update network parameters suffers from the problem of convergence. The exponential moving averages is the accumulation of past gradient within a fixed time window using a decay rate. With the change of the time window, the gradients may encounter great changes, so that momentum may fluctuate, rather than monotonically changing. This may cause a shock of learning rate in the later stage of training, resulting in the failure of convergence of the model. In this section, this paper propose a new method combine Fractional-Order and gradient to avoid the problem of convergence and reflect gradient changes in time named FracM. The proposed Fractional-Order Momentum optimization Algorithm using fractional order to approximate calculate current update vector, the coefficient of the past update vector was calculated by fractional order, the proportion of past update vector has become smaller.

Fractional order [3] has a long history of development. In the following part, we will introduce some preliminary knowledge about discrete fractional calculus(continuous fractional calculus does not apply to this article), which will lay the foundation for the discussion in the following chapters. Starting from the definition of classical calculus, the concept of fractional calculus is intuitively understood. For a continuous function ùë¶=ùëì(ùë•), the classical integer order derivative formula can be defined as:

ùëì‚Ä≤(ùë°)=ùëëùëìùëëùë°=lim‚Ñé‚Üí0ùëì(ùë°)‚àíùëì(ùë°‚àí‚Ñé)‚Ñé
(25)
Its physical meaning can be understood as the rate of change of the above functions, while the second derivative can be expressed as:

ùëì‚Ä≤‚Ä≤(ùë°)=ùëë2ùëìùëëùë°2=lim‚Ñé‚Üí0ùëì‚Ä≤(ùë°)‚àíùëì‚Ä≤(ùë°‚àí‚Ñé)‚Ñé=lim‚Ñé‚Üí0ùëì(ùë°)‚àí2ùëì(ùë°‚àí‚Ñé)+ùëì(ùë°‚àí2‚Ñé)‚Ñé2
(26)
Its physical meaning can be understood as the curvature of the curve or the acceleration of a physical quantity. It can be known that the third derivative of F(x) is:

ùëì‚Ä≤‚Ä≤‚Ä≤(ùë°)=ùëë3ùëìùëëùë°3=lim‚Ñé‚Üí0ùëì(ùë°)‚àí3ùëì(ùë°‚àí‚Ñé)+3ùëì(ùë°‚àí2‚Ñé)‚àíùëì(ùë°‚àí3‚Ñé)‚Ñé3
(27)
According to the mathematical induction, the derivative of f(x) should have the following form:

ùëì(ùëõ)(ùë°)=ùëëùëõùëìùëëùë°ùëõ=lim‚Ñé‚Üí01‚Ñéùëõ‚àëùëü=0ùëõ(‚àí1)ùëü(ùëõùëü)ùëì(ùë°‚àíùëü‚Ñé)(ùëõùëü)=ùëõ(ùëõ‚àí1)(ùëõ‚àí2)‚ãØ(ùëõ‚àíùëü+1)ùëü!
(28)
Fractional order system can be regarded as the generalized form of integral order calculus, we have the following Gr√ºnwald-Letnikov (abbreviated G-L) definition:

ùê∫ùêøùê∑ùõºùë°ùëì(ùë°)=lim‚Ñé‚Üí01‚Ñéùõº‚àëùëó=0ùëò(‚àí1)ùëó(ùõºùëó)ùëì(ùë°‚àíùëó‚Ñé)
(29)
By using the properties of the Gamma function ùõ§(), the generalized binomial coefficient equation can be simplified as follows:

(ùõºùëó)={ùõ§(ùõº+1)ùõ§(ùëó+1)ùõ§(ùõº‚àíùëó+1)1ùëó‚â•1ùëû=0
(30)
If the order n can be extended to any rational number, then a definition of fractional derivative is obtained. For SGD, theo update vector is as follows:

ùê∫ùêøùê∑ùëõùë°ùëì(ùë°)=ùëì(ùë°)+1‚Ñéùõº‚àëùëó=1ùëò(‚àí1)ùëó(ùõºùëó)ùëì(ùë°‚àíùëó‚Ñé)=ùëì(ùë°)+ùõº1ùëì(ùë°‚àí‚Ñé)+ùõº1ùëì(ùë°‚àí2‚Ñé)+ùõº1ùëì(ùë°‚àí3‚Ñé)
(31)
ùëöùë°+1,ùëñ=ùõΩ‚àóùëöùë°,ùëñ+ùëîùë°+1,ùëñrun fractional orderùê∫ùêøùê∑ùõºùë°ùëöùë°+1,ùëñ=ùõΩ‚àóùê∫ùêøùê∑ùõºùë°ùëöùë°,ùëñ+ùê∫ùêøùê∑ùõºùë°ùëîùë°+1,ùëñ=ùõΩ(ùëöùë°,ùëñ+ùõº1ùëöùë°‚àí2,ùëñ+ùõº2ùëöùë°‚àí4,ùëñ+ùõº3ùëöùë°‚àí6,ùëñ)+(ùëîùë°+1,ùëñ+ùõº1ùëîùë°‚àí1,ùëñ+ùõº2ùëîùë°‚àí3,ùëñ+ùõº3ùëîùë°‚àí5,ùëñ)=(ùëîùë°+1,ùëñ+ùõΩùëîùë°,ùëñ+(ùõΩ2+ùõº1)ùëîùë°‚àí1,ùëñ+(ùõΩ3+ùõΩùõº1)ùëîùë°‚àí2,ùëñ+(ùõΩ4+ùõΩ2ùõº1+ùõº2)ùëîùë°‚àí3,ùëñ+(ùõΩ5+ùõΩ3ùõº1+ùõΩùõº2)ùëîùë°‚àí4,ùëñ+(ùõΩ6+ùõΩ4ùõº1+ùõΩ2ùõº2+ùõº3)ùëîùë°‚àí5,ùëñ+(ùõΩ7+ùõΩ5ùõº1+ùõΩ3ùõº2+ùõΩùõº3)ùëîùë°‚àí6,ùëñ+(ùõΩ8+ùõΩ6ùõº1+ùõΩ4ùõº2+ùõΩ2ùõº3)ùëîùë°‚àí7,ùëñ+...)
(32)
FracM by adding a fractional order coefficient of the update vector of the past time step to the current update vector.

when ùõº>0, it is a fractional differential operation, and when ùõº<0, it is a fractional integral operation. It can be seen from the above definition that the GL definition can actually be regarded as a limit form, and with the rapid development of computer technology, we can also replace it with a numerical approximation, which means that the GL definition can actually be seen as a discrete form of definition. By a simple function ùë¶=1/2‚àóùë•2, fractional derivative of a basic power function with ùõº=3/2, the analytical solution was ùë¶=3.386‚àóùë•1/2, and the original function and second derivative and first derivative are compared in Fig. 3, it intuitively explains the relationship between derivative and fractional order.

Fractional-Order Momentum optimization Algorithm can help avoid trap into local minimum. Compare the Eq. (32) with SGDM, the coefficient of the gradient not only depends on ùõΩ, but also on ùõº. When the optimization falls into a local minimum, the current gradient approaches 0, past gradient also close to 0 due to the coefficient with high power, therefore, it is hard to optimization. When the current gradient is close to 0, the past gradient in FracM is not close to 0 because of the fractional order coefficient.

The coefficient of the past gradient and moment was calculated by fractional order, while not through experience, Fractional coefficients speed up the optimization process and can get better results. Open-source implementation available at https://github.com/yzlicloud/FracM.

Fig. 3
figure 3
A comparison of fractional calculus and second derivative and first derivative and the original function

Full size image
figure c
Convergence analysis
Supervised learning is to find suitable neural network parameters to approximate the data of the training set. The research of optimization problem can be divided into three steps: The first is to make the algorithm run and converge to a reasonable solution, such as a saddle point. The second is to make the algorithm converge as fast as possible. The third step is to ensure that the algorithm converges to a solution ùúÉùë° with a low Loss value (e.g., the global minimum). The regret bound was the sum of ùëìùë°ùúÉùë°‚àíùëìùë°(ùúÉ‚àó) with different t, where ùëìùë°(ùúÉ‚àó) was the best parameter from a feasible set ùúí. Mathematically, the regret bound is given as:

ùëÖ(ùëá)=‚àëùë°=1ùëá[ùëìùë°(ùúÉùë°)‚àíùëìùë°(ùúÉ‚àó)]
where ùúÉ‚àó=argminùúÉ‚ààùúí‚àëùëáùë°=1ùëìùë°(ùúÉ). We observe that the regret bound FracM was ùëÇ(1/ùë°)+ùëÇ(ùúÇ). The regret bound of FracM can compare with general convex online learning methods. The definition of parameters in the FracM was same as we defined above. The proof process is as follows:

A well-known conclusion in the field of deep learning is that need Lipschitz smoothing gradients. During the iterative process, the iterations are bounded, then an appropriate learning rate SGD will definitely converge. Gradient with Lipschitz constant boundary will produce a gradually decreasing sequence during the optimization process, which will converge stably, but the convergence rate cannot be guaranteed. Even if gradient with Lipschitz constant boundary, its convergence rate may be exponential.

Theorem 1
The convex cost functions ùëì(ùúÉ) is ùúá‚àíùë†ùë°ùëüùëúùëõùëîùëôùë¶ convex, and L-smooth, ùúÉùë°,ùëñ is an unbiased estimate of‚àáùëì(ùúÉùúÉùë°) with input.

Corollary 1
This article hypothesis that the two norm of gradient is bounded ‚Äñ‚Äñùëîùë°,ùúÉ‚Äñ‚Äñ2‚â§ùúé2. Bring the previous update vector into the following formula, the update vector satisfies Lipschitz continuity with a value of ùõΩ, and the deep neural network is called ùõΩ smoothing.

For all ùúÉ, the expectations of gradient is bounded, as follow:

ùîº[‚Äñùëîùë°,ùëñ‚Äñ22]‚â§ùúé2
(33)
According to the Algorithm 3, the update vector of AdaFM can be derived from the equation above, and combine the past time update vector and current, here we set ‚Ñé=2. The absolute value of fractional order parameter is getting smaller and smaller, means |ùõº1| > |ùõº2| > |ùõº3|, the other parameter is getting smaller and smaller, so it is omitted, and the update vector of the proposed algorithm can be summarized as:

ùê∫ùêøùê∑ùõºùë°ùëöùë°+1,ùëñ=(ùëîùë°+1,ùëñ+ùõΩùëîùë°,ùëñ+(ùõΩ2+ùõº1)ùëîùë°‚àí1,ùëñ+(ùõΩ3+ùõΩùõº1)ùëîùë°‚àí2,ùëñ+(ùõΩ4+ùõΩ2ùõº1+ùõº2)ùëîùë°‚àí3,ùëñ+(ùõΩ5+ùõΩ3ùõº1+ùõΩùõº2)ùëîùë°‚àí4,ùëñ+(ùõΩ6+ùõΩ4ùõº1+ùõΩ2ùõº2+ùõº3)ùëîùë°‚àí5,ùëñ+(ùõΩ7+ùõΩ5ùõº1+ùõΩ3ùõº2+ùõΩùõº3)ùëîùë°‚àí6,ùëñ+(ùõΩ8+ùõΩ6ùõº1+ùõΩ4ùõº2+ùõΩ2ùõº3)ùëîùë°‚àí7,ùëñ+...)
(34)
Using the SGD update rule, we have:

‚Äñ‚ÄñùúÉùúÉùë°+1,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22=‚Äñ‚ÄñùúÉùúÉùë°,ùëñ‚àíùúÇùê∫ùêøùê∑ùõºùë°ùëöùë°,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22=‚Äñ‚ÄñùúÉùúÉùë°,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22‚àí2ùúÇ(ùúÉùúÉùë°,ùëñ‚àíùúÉùúÉ‚àó)‚ä§ùê∫ùêøùê∑ùõºùë°ùëöùë°,ùëñ+ùúÇ2‚Äñ‚Äñùê∫ùêøùê∑ùõºùë°ùëöùë°,ùëñ‚Äñ‚Äñ22
(35)
Furthermore, strong convexity gives:

ùúá‚Äñ‚ÄñùúÉùúÉùë°,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22‚â§ùëîùëáùë°,ùëñ(ùúÉùë°,ùëñ‚àíùúÉ‚àó)
(36)
Combine Eqs. (31), (32), (33) and (34) to obtain:

ùîº[‚Äñ‚ÄñùúÉùúÉùë°+1,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]‚â§(1‚àí2ùúáùúÇ((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6)))‚àóùîº[‚Äñ‚ÄñùúÉùúÉùë°,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]+ùúÇ2((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6))2ùúé2
(37)
By convexity of f, we have:

ùîº[ùëìùë°(ùúÉùë°)‚àíùëìùë°(ùúÉ‚àó)]‚â§ùîº[ùëîùëáùë°,ùëñ(ùúÉùë°,ùëñ‚àíùúÉ‚àó)]
(38)
This together with Eq. (33) implies:

2ùúÇ((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6))ùîº[ùëìùë°(ùúÉùúÉùë°)‚àíùëìùë°(ùúÉùúÉ‚àó)]‚â§ùîº[‚Äñ‚ÄñùúÉùúÉùë°,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]‚àíùîº[‚Äñ‚ÄñùúÉùúÉùë°+1,ùëñ‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]+ùúÇ2((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6))2ùúé2
(39)
Sum over ùëò=0,...,ùë° to obtain:

‚àëùëò=0ùë°2ùúÇ((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6))‚àóùîº[ùëì(ùúÉùúÉùë°)‚àíùëì(ùúÉùúÉ‚àó)]‚â§ùîº[‚Äñ‚ÄñùúÉùúÉ0‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]‚àíùîº[‚Äñ‚ÄñùúÉùúÉùë°+1‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]+ùúé2‚àëùëò=0ùë°ùúÇ2‚â§ùîº[‚Äñ‚ÄñùúÉùúÉ0‚àíùúÉùúÉ‚àó‚Äñ‚Äñ22]+((1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6))2ùúé2‚àëùëò=0ùë°ùúÇ2
(40)
the proposed FracM optimizer shows the follwing guarantee, where ùëò=(1+ùõΩ)(1+ùõº2+ùõº3)+(ùõº1ùõΩ4+ùõº2ùõΩ2)(1+ùõΩ+ùõΩ2)+ùõº3ùõΩ2+ùõΩ2(2+2ùõΩ+ùõΩ2+ùõΩ3+ùõΩ4+ùõΩ5+ùõΩ6):

ùîº[ùëì(ùúÉùúÉùë°)‚àíùëì(ùúÉùúÉ‚àó)]‚â§ùîº[‚ÄñùúÉùúÉ0‚àíùúÉùúÉ‚àó‚Äñ22]2ùëò+ùëòùúé2‚àëùë°ùëò=0ùúÇ22‚àëùë°ùëò=0ùúÇ
(41)
Corollary 1
If ùúé2 = 0, then we could use a constant step-size and would get a O(1/t) rate. Same as regular gradient descent. But due to stochasticity, convergence rate is determined by ‚àëùëòùúÇ2/ùúÇ. convergence rate O(1/t) with diminishing stepsize ùúÇùë°‚âà1/ùë°. This article uses constant step-sizes: set ùúÇùëò=ùúÇ for some ùúÇ. Gives ‚àëùëòùúÇ=ùëòùúÇ and ‚àëùëòùúÇ2=ùëòùúÇ2, so the regert bound at t is ùëÇ(1/ùë°)+ùëÇ(ùúÇ)

The parameter update of FracM algorithm was same as mini-batch SGD in essential. The proposed FracM just a little more processing on the gradient and moment during the optimization. Thus, the time complexity of FracM is consistent with mini-batch SGD. The comparison of time complexity among classical optimization algorithm SGDM, Adam and proposed FracM is shown in Table 5.

Table 1 The comparison results in terms of the ‚ÄòTest Classification Accuracy‚Äô over the CIFAR10 databases among classical first order optimization algorithm SGDM, AdaGrad, RMSProp, Adam, RAdam, DiffGrad, Adabelief and proposed FracM optimization methods
Full size table
Table 2 The comparison results in terms of the ‚ÄòTest Classification Accuracy‚Äô over the CIFAR100 databases among classical first order optimization algorithm SGDM, RMSProp, Adam, RAdam, DiffGrad, Adabelief and proposed FracM optimization methods
Full size table
Table 3 The comparison results in terms transformer-based models with Natural language processing textual datasets among classical first order optimization algorithm SGDM, Adam and proposed FracM optimization methods
Full size table
Table 4 The video memory occupation in terms of the CIFAR10/100 databases among classical first order optimization algorithm SGDM, Adam, Radam, Adabelief and proposed FracM optimization methods
Full size table
Table 5 The comparison of Time Complexity among classical first-order optimization algorithm SGDM, Adam and proposed FracM optimization methods
Full size table
Experiments
The purpose of this section is to test our proposed algorithm and compare with existing optimization methods. First introduced the network architecture, then the hyperparameter settings, and introduced the data set used.

Deep architecture used
As a part of the field of artificial intelligence research, deep neural network is currently the most popular one is deep convolutional neural network. At present, cnn-based models have achieved great success in many research fields, although the problems faced by these fields are very different. The reason for the success of these tasks is that cnn can automatically learn features from (usually large-scale) data, and can predict well when faced with the same type of unknown data. At present, the combination of CNN and Resnet is the most popular network structure [16], and has achieved good results in many image recognition competitions [39]. The residual block inside the residual network uses jump connection to alleviate the problem of the gradient disappearance caused by the increase in depth in the deep neural network. The experiment in this article uses a residual network, and the depth of the residual network is set to 50 and 110.

Sequence-to-sequence model is a variant of recurrent neural network, including Encoder and Decoder. Seq2Seq is an important model in natural language processing, which can be utilized in machine translation, dialogue systems, and automatic summarization. Transformer [49] was a sequence-to-sequence model in essence, where an encoder on the left reads the input and a decoder on the right gets the output. The core of transformer is attention, and using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder.

Hyper-parameter setting
In this article, no matter the optimization algorithm, data processing, network structure, etc., we use the default parameter settings. Since no other techniques are used to improve the accuracy, the training results are not as high as other literatures. The results are all comparative experiments under the same conditions, so the proposed algorithm is meaningful in terms of stability and performance.

The batch size of the experiment mainly includes 32,64,128. The learning rate for the first 60 epochs is ùúÇ=0.2, the learning rate for the next 20 epochs is ùúÇ=0.02, and the learning rate for the last 20 epochs is ùúÇ=0.002. The hyperparameters of the comparison experiment adopt the default parameters, and adopts the same learning rate decay strategy as FracM optimization.

Fig. 4
figure 4
The classification accuracy comparison between the proposed FracM algorithm and some classical algorithm and some recently proposed algorithms about cifar10 dataset

Full size image
Fig. 5
figure 5
The classification loss comparison between the proposed FracM algorithm and some classical algorithm and some recently proposed algorithms about cifar10 dataset

Full size image
Fig. 6
figure 6
The classification accuracy comparison between the proposed FracM algorithm and some classical algorithm and some recently proposed algorithms about cifar100 dataset

Full size image
Fig. 7
figure 7
The classification loss comparison between the proposed FracM algorithm and some classical algorithm and some recently proposed algorithms about cifar100 dataset

Full size image
Fig. 8
figure 8
The classification accuracy comparison between the proposed FracM algorithm and variations of the algorithm (with different parameter ùõΩ) about cifar10 dataset

Full size image
Fig. 9
figure 9
The classification loss comparison between the proposed FracM algorithm and variations of the algorithm(with different parameter ùõΩ) about cifar10 dataset

Full size image
Fig. 10
figure 10
The classification accuracy comparison between the proposed FracM algorithm and variations of the algorithm (with different parameter ùõΩ) about cifar100 dataset

Full size image
Fig. 11
figure 11
The classification loss comparison between the proposed FracM algorithm and variations of the algorithm (with different parameter ùõΩ) about cifar100 dataset

Full size image
Fig. 12
figure 12
The classification accuracy comparison between the proposed FracM algorithm and variations of the algorithm (with different fractional order parameter ùõº) about cifar10 dataset

Full size image
Fig. 13
figure 13
The classification loss comparison between the proposed FracM algorithm and variations of the algorithm (with different fractional order parameter ùõº) about cifar10 dataset

Full size image
Fig. 14
figure 14
The classification accuracy comparison between the proposed FracM algorithm and variations of the algorithm (with different fractional order parameter ùõº) about cifar100 dataset

Full size image
Fig. 15
figure 15
The classification loss comparison between the proposed FracM algorithm and variations of the algorithm (with different fractional order parameter ùõº) about cifar100 dataset

Full size image
Dataset used
This article uses two classic data sets CIFAR10 and CIFAR100 [24], as the data sets for the verification algorithm. As a test data set for many innovative algorithms, which is used to verify the training speed and training accuracy of the algorithm. In the CIFAR10 data set, all images are divided into 10 categories, while the CIFAR100 data set, all images are divided into 100 categories. The size of all images is 32√É‚Äî32√É‚Äî3. All images are normalized, which means the mean value of the three RGB channels is zero, and the variance is the unit standard deviation. The image is simply flipped and cropped, and only randomly flipped horizontally with the default probability.

The IMDB Dataset consist of 25,000 movies reviews, which was labeled by sentiment (positive/negative), and each review is encoded as a sequence of word indexes(integers). For convenience, words are indexed by overall frequency in the dataset, integer ‚Äú3‚Äù represents the third most frequently used word in the encoded data. This allows for quick filtering operations such as:‚Äúonly consider the top 10000 most common words, but eliminate the top 20 most common words‚Äù. As a convention,‚Äú0‚Äù does not stand for a specific word. but instead is used to encode any unknown word.

GloVe(glove.42B.300d) is a word representation tool based on count-based and overall statistics. It can express a word as a vector composed of real numbers. These vectors capture some semantic features between words, such as similarity, analogy, etc. It can calculate the semantic similarity between two IMDB dataset words through operations on vectors, such as Euclidean distance or cosine similarity.

Experiments and analysis
The image classification experimental results are shown in Tables 1 and 2. Table 1 describes the classification accuracy of different optimization algorithms on the test set. The experimental results are based on the CIFAR10 dataset based on the 50-layer deep residual network model. Among several optimization algorithms, the best results are shown in bold. It can be seen from Table 1 that the test batch sizes are 32, 64 and 128, respectively. The performance of the FracM optimization algorithm proposed in this paper is significantly better than other optimization algorithms.

Figures 4 and 5 show the detailed validation statistics by the FracM and some classical methods on CIFAR10 with RseNet50. One can see that FracM optimizer converges faster than classical methods with lower loss and higher accuracy.

Table 2 describes the classification accuracy of different optimization algorithms on the CIFAR100 dataset based on the 110-layer deep residual network model. The basic parameters are consistent with Table 1. Our proposed algorithm can reduce the influence of the exponential moving average of the gradient square. Our FracM method can effectively prevent the network from generating noise and oscillation near the minimum. Compared with other optimization algorithms, our algorithm can get more accurate results (Tables 3, 4, 5).

Figures 6 and 7 show the detailed validation statistics by the FracM and some classical methods on CIFAR100 with RseNet50. One can see that FracM optimizer converges faster than classical methods with lower loss and higher accuracy.

Figures 8 and 10 show the detailed validation accuracy by the FracM and variations of the algorithm with different ùõΩ about CIFAR10/100 with RseNet50. Figures 9 and 11 show the detailed validation loss by the FracM and variations of the algorithm with different ùõΩ about CIFAR10/100 with RseNet50. FracM1 stands for ùõΩ=0.5, FracM2 stands for ùõΩ=0.6, FracM3 stands for ùõΩ=3, FracM4 stands for ùõΩ=5. It can be noticed from this result that the original FracM performs better over CIFAR10/100 dataset. When the parameter beta gradually increase, validation accuracy will gradually decrease and oscillate. It is clear that original FracM as well as its different fractional coefficients based variants show the promising performance.

Figures 12 and 14 show the detailed validation accuracy by the FracM and variations of the algorithm with different fractional order parameter ùõº about CIFAR10/100 with RseNet50. Figures 13 and 15 show the detailed validation loss by the FracM and variations of the algorithm with different ùõº about CIFAR10/100 with RseNet50. FracM1 stands for ùõº=0.2, FracM2 stands for ùõº=0.5, FracM3 stands for ùõº=2.5, FracM4 stands for ùõº=4.2. It can be noticed from this result that the original FracM performs better over CIFAR10/100 dataset. When the fractional order parameter ùõº gradually increase, validation accuracy will gradually increase then stabilize. When the parameter ùõº large, it is easy to oscillate. It is clear that original FracM as well as its different fractional coefficients based variants show the promising performance.

The defect of the algorithm is that the parameters in the FracM optimization algorithm are calculated through the fractional order, which affects the circulation of the algorithm. However, the default parameters of the FracM optimization algorithm show the promising performance.

Conclusion
In this work, we propose a new optimization method FracM based on fractional order. Fractional order calculus inherits almost all the characteristics of integral calculus, and have some memorization and nonlocality. The coefficient of the gradient not only depends on the moment, but also depend on fractional order, which help avoid falls into a local minimum. When the current gradient is close to 0, the past gradient in FracM is not close to 0 because of the fractional order coefficient. When the parameter moment gradually increases, validation accuracy will gradually decrease and oscillate. It means that moment should not occupy a large proportion. When the parameter fractional order gradually increases, validation accuracy will gradually decrease and oscillate. It means that moment should not occupy a large proportion. When the fractional order gradually increases, validation accuracy will gradually increase then stabilize. When a fractional order is large, fractional coefficient will drop rapidly, the past gradient in FracM is almost close to 0, the effect of memorization and nonlocality will gradually fade. The convergence of the algorithm can be proved through the analysis of regret bound. It is clear that original FracM as well as its variants outperform other state of the art optimization methods (such as SGDM, AdaGrad, AdaDelta, RMSProp, AMSGrad, and Adam) on the image classification dataset CIFAR10/100 and textual datasets IMDB with transformer-based models.

Keywords
Deep neural networks
Optimization
Gradient descent
Fractional-order
Residual network
Image classification