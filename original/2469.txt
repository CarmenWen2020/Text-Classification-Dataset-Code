This theoretical research study proposes a novel Chaotic Quasi-Oppositional Arithmetic Optimization Algorithm (COAOA) for thermo-economic optimization of a shell and tube condenser working with refrigerant mixtures. Arithmetic Optimization Algorithm (AOA) is a recently emerged metaheuristic algorithm considering different mathematical operators to optimize the candidate solutions over a wide range of search domains. The effectiveness the COAOA is assessed by applying it to a set of benchmark optimization problems and comparing the obtained solutions with that of the original AOA and its quasi-oppositional variant. The COAOA has been employed to acquire the minimum value of the total annual cost of the shell and tube condenser by iteratively varying nine decision variables of mass flow rate, shell diameter, the tube inside diameter, tube length, number of tube passes, tube layout, tube pitch ratio, the total number of baffles, and diameter ratio. Three different case studies are solved using different refrigerant pairs used for in-tube flow to show the proposed metaheuristic optimizer’s efficiency and effectivity on real-world mixed-integer optimization problem. Optimal results retrieved for different mixture pairs with varying mass fractions are compared with each other, and parametric configuration yielding the minimum total cost is decided. Finally, a comprehensive sensitivity analysis is performed to investigate the influences of the design variables over the considered problem objective. Overall analysis results indicate that COAOA can be an excellent optimizer to obtain a shell and tube condenser’s optimal configuration within a reasonable computation time.

Introduction
Shell and tube heat exchangers (STHE) have been utilized in many industries ranging from chemical power plants to HVAC (heating, ventilating, and air-conditioning) applications. They can provide a relatively high area to density ratio greater than 700 m2/m3 for gases and greater than 300 m2/m3 for liquids [1]. Apart from these advantages, they have a reduced volumetric capacity and a lower cost designed for a predefined heat duty. However, they have some intrinsic constructional drawbacks, such as higher costs and relatively lower thermal efficiencies than the other type of heat exchangers. Some of the essential components of a typical shell and tube heat exchanger are tubes, nozzles, baffles, shell, front ends, and rear ends. Researchers should take these parameters seriously into their consideration to model an efficient and cost-effective design. For instance, using small tube diameters results in higher heat transfer coefficient values, which increases the overall heat transfer rates between two mediums and yields a relatively compact design. However, it is easier to clean and maintain the high-diameter tubes, allowing lower pressure drop rates when necessary. Minimizing a heat exchanger’s investment cost can be possible using small shell diameters and long tubes for a given fixed heat exchange surface. Furthermore, the total number of tubes is directly influenced by the in-tube mass flow rate, which affects the total pressure drop rates. Therefore, considering all these parametric relations, it can be concluded that the traditional design of a STHE requires a tedious path of selecting optimum configuration parameters without violating operational constraints.

Producing turbulent flow across the tube banks and determining the optimum geometric features are the essential factors yielding the minimum equipment cost. The optimum design depends on several operational aspects, including operating temperatures, thermal shear stress, the pressure drop across and inside the tubes, fouling resistance, thermophysical properties of the running refrigerants, etc. A design engineer benefits from his or her previous accumulated knowledge and experience to seek effective and efficient heat exchanger configuration. However, it is challenging to maintain a compromise solution between the alternative configurations that meet the consumer’s needs, even for an experienced engineer. The conventional design procedure of a STHE involves rating different possible configuration geometries to satisfy the requested heat load demand by the end-users. However, this approach is too time-consuming and may lead to unexpected configurations far away from the optimal solution [2]. Between the completed research studies, more effort has been made to minimize the total cost of a heat exchanger rather than optimize the other design objectives, such as maximizing thermal efficiencies or minimizing irreversibilities.

Recent years have witnessed the various intelligently devised advanced algorithms to the shell and tube heat exchanger design problems. Notwithstanding that, an extensive literature survey on this hot spot research issue reveals that some of the pioneer works on this subject is based on constructal theory [3, 4]. Early attempts at designing optimal STHEs were based upon several variants of the genetic algorithm [5, 6]. Selbas et al. [5] used genetic algorithm to optimize a STHE concerning thermo-economic considerations. Fettaka et al. [6] concurrently optimized the total heat exchange area and pumping power of a STHE, which are considered problem objectives that create a trade-off between them. A Pareto frontier composed of non-dominated solutions of these two optimization objectives provides a wide range of alternative heat exchanger configurations. Amini and Bazargan [7] considered eleven decision variables for multi-objective optimization of a STHE. The genetic algorithm simultaneously optimized conflicting problem objectives of minimizing total cost and maximizing heat exchanger effectiveness. A significant improvement is observed in objective function values concerning the baseline case study. Different variants of the swarm intelligence-based metaheuristics called particle swarm optimization were employed to find optimal parameters of a STHE by different researchers [8, 9]. Sahin et al. [2] applied artificial bee colony optimization algorithm to minimize the total investment and operating cost of a STHE by adjusting the selected decision variables of tube length, baffle spacing, tube diameter, and pitch size. Mohanty [10] utilized the gravitational search algorithm, which is conceptualized on the interactions between masses and law of gravity to retain a heat exchanger’s best possible configuration. The total annual cost of a heat exchanger is optimized by varying the considered decision variables between the prescribed upper and lower bounds of the search limits. It is concluded that optimum solutions found by gravitational search algorithm are better than those retained by the compared literature metaheuristic optimizers. Imperialist competitive algorithm [11] is another metaheuristic-based solution applied for finding a favorable geometric configuration of a STHE, which minimizes the total cost of a heat exchanger by iteratively adjusting the system parameters. Inspired by the basic principles of the exhaustive teaching and learning process, the teaching–learning-based optimization algorithm [12] with ameliorative modifications was applied to multi-objective optimization of plate-fin and shell and tube heat exchangers. The best results acquired by this optimizer are validated against those obtained by the genetic algorithm through comparative statistical analysis. Rao and Saroj [13] proposed an elitist—Jaya algorithm for thermo-economic optimization of a STHE. Three case studies that were previously solved in the literature approaches are solved by this method, and promising system configurations with the minimum total cost are obtained. Sai and Rao [14] evaluated the bacterial foraging metaheuristic algorithm’s efficiency in finding optimal design parameters of a STHE. Iyre et al. [15] proposed a hybrid intelligent heuristic procedure by integrating the genetic algorithm’s fundamentals with a sample space reduction technique of the cohort intelligence algorithm [16]. The optimization capabilities of the proposed hybrid are benchmarked against real-world optimization problems of STHE design.

The very basics of the oppositional learning concepts (OBL) were firstly coined by Tishoosh [17,18,19]. The main idea behind building this efficient and easy-to-implement scheme in any metaheuristic algorithm is to simultaneously consider the current estimate and its opposite point to eliminate the local optimum points over the search space. Its first application was on improving the learning and backpropagation capabilities of a neural network [20]. Since then, OBL has been embedded into different metaheuristic algorithms [21,22,23,24] and successfully applied to many engineering design samples ranging from combined heat and power dispatch problem [25] to PID control of a DC motor [26]. A contributive extension to QBL was made in terms of quasi-opposition point rather than opposite point, which proposes that using quasi-opposite points produces more efficient results than those found by the opposite point [27]. Quasi-oppositional learning principles have also been incorporated into different types of metaheuristic methods [28,29,30,31]. This research study proposed integrating chaotic sequences into the core quasi-opposition learning scheme to improve the convergence capability and solution efficiency of the algorithm. To the best of the author’s knowledge, using chaotic numbers instead of uniformly distributed Gaussian random numbers in a quasi-oppositional learning scheme has not been studied before in any literature study. This research paper aims to fill the gap in this context and scrutinize the predictive performance of the chaotic number-assisted embedded quasi-oppositional learning scheme is well-known optimization benchmark problem. Between twenty different chaotic random number generators incorporated into the arithmetic optimization algorithm, five best performing ones will be comparatively assessed in terms of statistical analysis.

Literature surveys on STHE design optimization show that different researchers use different advanced techniques to maintain an optimum system configuration. However, it should be kept in mind that every algorithm put into practice has its own merits and requires tedious parameter tuning operation, which jeopardizes their successful utilization on a wide range of application areas. Therefore, the optimum design is restricted by the impact of the algorithm-specific tuneable parameters on the considered problem objective, which could pave the way for further improvements over the current system configuration. Relying on this fact, this study proposes using a chaotic quasi-oppositional variant of the arithmetic optimization algorithm [32] for thermo-economic optimization of a shell and tube condenser, which has not been evaluated in the previous works before as it is investigated in this theoretical research study. Previous efforts made on shell and tube condenser optimization focuses on tube outside condensation process, which has been widely utilized in various industries. Allen and Goselin [33] presented a mathematical model for thermo-economic design optimization of shell and tube condenser running with R134a refrigerant. They used genetic algorithm to optimize eleven decision variables to obtain the total cost of a STHE. Haseli et al. [34] determined the optimum cooling water temperatures during the process of water vapor condensation within a shell and tube condenser by using the sequential quadratic programming (SQP) method. Khalifeh Soltan et al. [35] developed a computer program to find optimum baffle spacing for shell and tube condenser, considering the problem objectives of summations of contributions of investment and operational costs. A set of correlations defining the dependence of suitable baffle spacing on the problem objectives is proposed after completing the parametric analysis. Hajabdollahi et al. [36] extended the early research performed by Haseli et al. [34, 37]. They employed two evolutionary metaheuristic methods of genetic algorithm and particle swarm optimization for thermodynamic optimization of a shell and tube condenser. Parametrical analysis describing the influences of the considered design variables over the problem objective reveals that while the increase in the number of tube passes results in an increase in total cost rates, a decrease in tube diameters entails a reduction in investment cost values. This study’s primary goal is to propose a novel chaotic map embedded quasi-oppositional AOA to enhance the effectiveness of the original AOA. Optimization performance of the COAOA is evaluated on a set of benchmark optimization problems, including unimodal and multimodal test functions. It is observed that incorporating chaotic sequences into the quasi-oppositional algorithm which are collectively implemented on the AOA considerably increases the convergence performance along with the optimization accuracy of the conventional AOA. Furthermore, the proposed algorithm is applied to a shell and tube condenser operating with refrigerant mixtures flowing in the tubes as a case study. Evaluation of the refrigerant mixtures’ applicability for an optimized shell and tube condenser has not been extensively analyzed yet in the literature approaches so far. This is the first application of R134a-R1234yf, R32-R134a, and R32-R1234yf refrigerant pairs on a shell and tube condenser optimization, i.e., the first time these refrigerant pairs are employed as the primary fluid in shell and tube condenser optimization. The optimum mass fraction that yields the minimum total cost will be obtained for each refrigerant pair, which has not been discussed in the previous works devoted to condenser design optimization. This study mainly deals with the following research objectives.

To present a novel thermodynamic model for shell and tube condenser running with a refrigerant mixture in tubes.

To assess the optimization performance of the proposed chaotic quasi-oppositional arithmetic optimization algorithm with respect to the original AOA and its quasi-oppositional variants.

To assess the predictive performance of the new emerged metaheuristic method of chaotic quasi-oppositional arithmetic optimization algorithm on shell and tube condenser design problem.

To decide the commanding decision parameters on the defined problem objective.

Thermal modeling of a shell and tube condenser
The following assumptions have been considered for optimization and analysis purposes:

Condensing refrigerant mixture flow takes place in tubes

Cooling water is in the shell side and flows across the tube banks

The refrigerant mixture enters the tubes as saturated vapor and leaves the tubes as saturated liquid

Both pressure drops in shell and tube sides are taken into account

No heat transfer is allowed to the ambient

Effectiveness—NTU method is employed for calculating total heat load of HEX as only inlet temperatures shell and tube sides are given.

Heat transfer coefficient
The following equation computes the total heat duty of HEX

𝑄=𝜀⋅𝐶min⋅(𝑇𝑡,𝑖−𝑇𝑠,𝑖)
(1)
where Q is the imposed heat duty, 𝜀 is the heat exchanger effectiveness, Cmin is the lower-valued heat capacity between two mediums, Tt,I and Ts,I are, respectively, tube and shell inlet temperatures of running fluids. The following expression calculates heat exchanger effectiveness for condenser or evaporator

𝜀=1−exp(−𝑁𝑇𝑈)
(2)
where NTU is the abbreviated form of number of transfer units, which is a nondimensional number describing the thermal heat exchanger size and represented by the following term:

NTU=𝑈𝑜𝐴𝑜𝐶min
(3)
where Ao represents total heat exchange area based on tube outer diameter, whereas overall heat transfer coefficient is expressed by Uo, whose mathematical formulation is shown by the expression:

𝑈𝑜=1((1ℎ𝑠)+𝑅𝑓𝑠+(𝑑𝑜𝑢𝑡ln(𝑑out𝑑𝑖𝑛)2⋅𝑘tube)+(𝑅𝑓𝑡+𝑑outℎ⎯⎯⎯cond⋅𝑑in))
(4)
where hs is the shell side heat transfer coefficient; hcond is the in-tube condensation heat transfer coefficient; Rft and Rfs correspondingly stand for tube and shell side fouling factor; ktube is the thermal conductivity of the tube material; din and dout are tube inside an outside diameters. Below-defined Kern’s formulation [38] is used for computing the shell side heat transfer coefficient

ℎ𝑠=0.36𝑘tube𝐷𝑒Re0.55𝑠Pr1/3𝑠(𝜇𝑠𝜇𝑠𝑤)0.14
(5)
Here, µs and µsw are, respectively, the viscosity at the bulk flow temperature and outer tube wall temperature. The viscosity correction term (𝜇𝑠𝜇𝑠𝑤)0.14 is considered 1.0 for simplicity. Equivalent shell diameter De can be calculated by the following set of equations [2]:

𝐷𝑒←⎧⎩⎨⎪⎪4(𝑃2𝑡−0.25⋅𝜋⋅𝑑2out)𝜋⋅𝑑out←Squarepitch4(0.43⋅𝑃2𝑡−0.5⋅𝜋⋅𝑑2out)0.5⋅𝜋⋅𝑑out←Triangular pitch
(6)
where Pt is the tube pitch. The following equations obtain dimensionless Reynolds and Prandtl numbers used for calculating shell side heat transfer coefficient

Re𝑠=𝑚˙𝑠⋅𝐷𝑒𝜇𝑠⋅𝐴𝑠
(7)
Pr𝑠=𝜇𝑠⋅𝐶𝑝𝑠𝑘𝑠
(8)
where 𝑚˙𝑠 is the mass flow rate of the shell side fluid, and As is the cross-sectional area normal to the shell flow direction and calculated by the following term:

𝐴𝑠=𝐷𝑠⋅𝐵⋅(1−𝑑out𝑃𝑡)
(9)
where Ds is the shell diameter and B is the baffle spacing. Locating the baffles plays an important role in shell and tube heat exchanger design. They support the integrated tube bundles to hold their current position and direct the shell side fluid flow to obtain maximum thermal efficiency. Shah correlation [39] is used to calculate the in-tube condensation heat transfer coefficient, which can be defined as

ℎcond=0.023⋅Re0.8𝑙Pr𝑙0.4𝑘𝑙𝑑𝑖𝑛[(1−𝑥)0.8+3.8𝑥0.76(1−𝑥)0.04𝑝0.38𝑟]
(10)
where x is the thermodynamic vapor quality and pr is the reduced pressure which is the ratio between saturation pressure (psat) and critical pressure (pcrit) of the related fluid. Rel is the liquid Reynolds number calculated by

Re𝑙=𝐺𝑡⋅𝑑𝑖𝑛𝜇𝑙
(11)
where Gt is the mass velocity of the in-tube fluid. Prandtl number of the in-tube fluid is computed by

Pr𝑙=𝜇𝑙⋅𝐶𝑝𝑙𝑘𝑙
(12)
Liquid Prandtl number is the direct function of the thermophysical properties of running fluid. Liquid viscosity, liquid specific heat, and liquid conductivity of the in-tube fluid are, respectively, symbolized by µl, Cpl, and kl. By neglecting the smaller changes in transport properties of the liquid phase along the tube length, the mean condensation heat transfer coefficient can be expressed as

ℎ⎯⎯⎯cond=1𝐿∫𝐿0ℎcond⋅𝑑𝐿
(13)
The above-defined equation can be reformed by integrating over the length L1 to L2

ℎ⎯⎯⎯cond=0.023Re0.8𝑙Pr0.4𝑙𝑘𝑙𝑑𝑖𝑛(𝐿2−𝐿1)∫𝐿2𝐿1[(1−𝑥)0.8+3.8𝑥0.76(1−𝑥)0.04𝑝0.38𝑟]𝑑𝐿
(14)
Assuming vapor quality linearly varies with increasing tube length and expanding the term in the brackets by the binomial theorem, the final form of Eq. (14) becomes

ℎ⎯⎯⎯cond=0.023Re0.8𝑙Pr0.4𝑙𝑘𝑙𝑑in(𝑥2−𝑥1)[−(1−𝑥)1.81.8+3.8𝑝0.38𝑟⋅(𝑥1.761.76−0.04𝑥2.762.76)]𝑥2𝑥1
(15)
Relying on the assumption that operating in tube fluid enters the tube as saturated vapor (x2 = 1.0) and leaves the tubes as saturated liquid (x1 = 0.0), (15) yields

ℎ⎯⎯⎯cond=0.023Re0.8𝑙Pr0.4𝑙𝑘𝑙𝑑𝑖𝑛(0.55+2.09𝑝0.38𝑟)
(16)
The number of tubes in the tube banks can be formulated by equation [40]:

𝑁tube=𝐾1(𝐷𝑠𝑑out)𝑛1
(17)
where numerical coefficients K1 and n1 depend on the number of tube passes and flow arrangements. Variations of these coefficients for different configurations are given in Table 1 [5]. The total heat exchange area between hot and cold mediums is calculated by the following:

𝐴𝑜=𝜋⋅𝑑out⋅𝐿⋅𝑁tube
(18)
Table 1 Tabular values of K1 and n1 coefficients as a function of number of tube passes and tube configuration
Full size table
Figure 1 depicts the schematic representation of a shell and tube exchanger along with some auxiliary equipment.

Fig. 1
figure 1
Simple schematic representation of a shell and tube heat exchanger

Full size image
Pressure drops on tube and shell sides
Pressure drop rates across and inside the tubes play a crucial role in estimating a heat exchanger’s total expenditures. Increasing the fluid velocity produces a turbulent flow which increases heat transfer coefficient values. An increment in heat transfer coefficient rates increases total heat exchange rates entailing a more compact design and lower investment cost. However, any increase in the convective flow velocity increases the pressure drop rates, which incurs additional running costs for pumping. Therefore, the pressure drop along and across the tubes should be seriously considered while designing any heat exchanger, and a compromise system design should be configured to attain minimum investment and operating cost rates.

Three decisive factors form a two-phase pressure drop of an intube fluid. Total pressured drop is occurred by the friction on the tube walls, variations of the potential and kinetic energy of the fluid, and elevation head. In this study, the static pressure drop caused by the elevation head is not considered due to the tubes’ horizontal orientation. Contributions of static pressure drop (∆pstatic), frictional pressure drop (∆pfrict), and momentum pressure drop (∆pmom) are mathematically formulated by the following:

Δ𝑝tube=Δ𝑝static+Δ𝑝mom+Δ𝑝frict
(19)
Considering the assumption that only condensation phase change occurs for the in-tube flow, frictional pressure drop rate (∆pfrict) along the tubes for a phase changing flow is calculated by the famous Muller-Steinhagen Heck [41] correlation which is composed set of equations. Liquid (l) and vapor (v) phase pressure gradients along the tubes are calculated by

(𝑑𝑃𝑑𝐿)𝑙=𝑓𝑙𝐺22⋅𝜌𝑙⋅𝑑𝑖𝑛=𝐴
(20)
(𝑑𝑃𝑑𝐿)𝑣=𝑓𝑣𝐺22⋅𝜌𝑣⋅𝑑𝑖𝑛=𝐵
(21)
where friction factor values for liquid and vapor flows can be computed by

𝑓𝑙=64Re𝑙,𝑓𝑣=64Re𝑣 for Re𝑙,Re𝑣≤1187
(22)
𝑓𝑙=0.3164Re0.25𝑙,𝑓𝑣=0.3164Re0.25𝑣 for Re𝑙,Re𝑣>1187
(23)
where Re𝑙=𝐺⋅𝑑𝑖𝑛/𝜇𝑙 and Re𝑣=𝐺⋅𝑑𝑖𝑛/𝜇𝑣.

Above-given formulations can be integrated into a single equation, which covers a full range of thermodynamic qualities 0≤𝑥≤1

(𝑑𝑃𝑑𝐿)𝑡𝑝=[𝐴+2(𝐵−𝐴)𝑥](1−𝑥)0.333+𝐵𝑥3
(24)
Assuming a constant heat flux removal across the pipe boundaries, Eq. (24) can be integrated if the vapor quality decreases with increasing tube length. Then, Eq. (24) takes the final form of

Δ𝑝frict=∫𝐿0(𝑑𝑃𝑑𝐿)𝑡𝑝𝑑𝐿=⎧⎩⎨⎪⎪−0.75(1−𝑥)4/3[𝐴+2(𝐵−𝐴)𝑥]+0.25𝐵𝑥4−914(𝐵−𝐴)(1−𝑥)7/3⎫⎭⎬⎪⎪𝑥out𝑥in
(25)
Thermodynamic qualities at the inlet and outlet of the tubes are xin = 1.0 and xout = 0.0 in Eq. (25). Momentum pressure drop is affected by the variations of the kinetic energy of the fluid flow and calculated by the following equation:

Δ𝑝mom=𝐺2{[(1−𝑥)2𝜌𝑙(1−𝜀)+𝑥2𝜌𝑣𝜀]out−[(1−𝑥)2𝜌𝑙(1−𝜀)+𝑥2𝜌𝑣𝜀]in}
(26)
where ρl and ρv, respectively, stand for liquid and vapor density, and ε is the void fraction of vapor and vapor phases of the fluid flowing in the tubes, which considers two phases are artificially separated into two streams. Among the various models available in the literature, this study uses Rouhani and Axelsson [42] drift flux model for calculating the void fraction of artificial streams

𝜀=𝑥𝜌𝑣[(1+0.12(1−𝑥))(𝑥𝜌𝑣+(1−𝑥)𝜌𝑙)+1.18(1−𝑥)[𝑔𝜎(𝜌𝑙−𝜌𝑣)]0.25𝐺2𝜌0.5𝑙]−1
(27)
Shell side pressure drop (∆ps) is computed by equation [11]:

Δ𝑝𝑠=𝑓𝑠⋅(𝜌𝑠𝑣2𝑠2)⋅(𝐿𝐵)⋅(𝐷𝑠𝐷𝑒)
(28)
where the shell side friction factor (fs) is calculated by the following term:

𝑓𝑠=1.44Re−0.15𝑠Re𝑠<40000
(29)
Objective function
This research study aims to obtain the minimum total annual cost of a shell and tube heat exchanger working with refrigerant mixtures. Total annual cost (Ctot) [43] consists of annual operating cost (Co), total discounted operating cost (Cod), energy cost (Ce), and capital investment cost (Ci).

𝐶tot=𝐶𝑖+𝐶𝑜𝑑
(30)
Correlation proposed by Tall et al. [44] is used for calculating the capital investment cost

𝐶𝑖=8000+259.2𝐴0.91𝑜
(31)
Total discounted operating cost results from the pumping power expenditures to conquer the pressure losses in the tube and shell side, calculated by the below-given equation:

𝐶𝑜𝑑=∑𝑘=1𝑛𝑦𝐶𝑜(1+𝑖)𝑘
(32)
𝐶𝑜=𝑃𝑃⋅𝐶𝑒⋅𝐻
(33)
𝑃𝑃=1𝜂(𝑚˙𝑡𝜌𝑡Δ𝑝𝑡+𝑚˙𝑠𝜌𝑠Δ𝑝𝑠)
(34)
where ny = 10 is the operating years, i = 10% is the annual discount rate, Ce = 0.12 €/kWh is the energy cost, H = 7000 h/year is the total working hour in a year, and η = 75% is the pumping efficiency.

Arithmetic optimization algorithm
Usually, population-based algorithms begin their improvement stages with a random number of candidate solutions [45]. A series of iterations and rules incrementally enhance the created solutions. It is then evaluated iteratively by a fixed objective function, which is the core of the optimization technique. Since population-based algorithms aim to find the best solution to optimization problems in a stochastically efficient way, finding a solution in a single run is not guaranteed. An adequate collection of potential solutions iteratively for the given problem, on the other hand, increases the possibility of finding the best global solution. Moreover, the population-based algorithms are utilized in various research fields [46, 47].

The conventional arithmetic optimization algorithm (AOA) [32], which is stimulated by the arithmetic operators in math science (i.e., Multiplication (M), Division (D), Subtraction (S), and Addition (A)), is discussed and exploited in this portion. AOA is a population-based, gradient-free search approach for solving any optimization problem with a given objective function. The AOA’s used quest phases are shown in Fig. 2 and are defined as follows.

Fig. 2
figure 2
Optimization processes of the AOA

Full size image
Arithmetic is a necessary part of the numerical method. Along with geometry, arithmetic, and inquiry, it is an essential aspect of functional mathematics. The standard consideration measures used to evaluate the numbers are arithmetic operators (multiplication, division, subtraction, and addition). These basic operators are used as part of a mathematical optimization technique to find the best solution given a set of constraints. From the boundary to the heart, Fig. 3 illustrates the ladder of arithmetic operators and their rules—the mathematical form of the AOA as seen below.

Fig. 3
figure 3
Ladder of arithmetic operators and their rules

Full size image
Initialization phase
The solution matrix of the AOA is initialized with randomly generated variables as in Eq. (35). The best-obtained solution is saved as close to the optimum so far in each iteration.

𝑋𝑖=⎡⎣⎢⎢⎢⎢⎢𝑥11𝑥21𝑥11𝑥22⋯…𝑥11,𝐷𝑥2𝐷⋮𝑥𝑁1⋱𝑥𝑁𝐷⋱…⋮𝑥𝑁𝐷⎤⎦⎥⎥⎥⎥⎥
(35)
For each iteration, the search process (exploration or exploitation) should be chosen based on the math optimizer accelerated (MOA) function determined using Eq. (36).

MOA(𝐶_𝐼𝑡𝑒𝑟)=Min+𝐶_𝐼𝑡𝑒𝑟×(Max−Min𝑀_𝐼𝑡𝑒𝑟)
(36)
where MOA(C_Iter) is the MOA value determined by Eq. (36) for the current iteration, M_Iter is the cumulative number of iterations. C_Iter is the current iteration, which is between [1, M_Iter]. The accelerated function’s minimum and maximum values are called Min and Max, respectively.

Exploration phase
The exploratory operation of AOA is defined in this section. The phase’s optimization method used either the division (D) rule or the multiplication (M) rule to find high-distributed decisions dependent on the arithmetic operators. However, unlike other rules, these rules (i.e., D and M) cannot smoothly advance the goal area due to their high distribution (i.e., S and A). The effect of arithmetic operators on intricate mathematical formulas is shown in Fig. 4. As a result, the discovery quest seeks a near-optimal solution that can be sought after multiple iterations.

Fig. 4
figure 4
Influence of arithmetic operators for specific mathematical calculations

Full size image
AOA’s exploration phase searches the search space in many places at random. It employs two search procedures (D and M), which are modeled in Eq. (37), to arrive at a better solution. If r1 > MOA, where r1 is a random number and MOA is determined using Eq. (38), this step is enabled. The D operator is conditioned by r2 < 0.5 in this phase; otherwise, the other operator (M) would perform the current operation, with r2 being a random number. To have further diversification, a stochastic scaling coefficient is used.

𝑥𝑖,𝑗(𝐶_𝐼𝑡𝑒𝑟+1)=⎧⎩⎨⎪⎪𝑏𝑒𝑠𝑡(𝑥𝑗)÷(𝑀𝑂𝑃+)×((𝑈𝐵𝑗−𝐿𝐵𝑗)×𝜇+𝐿𝐵𝑗),𝑟2<0.5𝑏𝑒𝑠𝑡(𝑥𝑗)×𝑀𝑂𝑃×((𝑈𝐵𝑗−𝐿𝐵𝑗)×𝜇+𝐿𝐵𝑗),otherwise
(37)
where xi(C_Iter + 1) is the ith solution positions in the upcoming iteration, xi,j(C_Iter) is the jth position of the ith solution of the candidate solutions, and best(xj) is the jth in the best-obtained position in the ith solution. µ is a tuning parameter utilized to determine and control the search process, which is set equal to 0.5 according to the original paper [32].

MOP(𝐶_𝐼𝑡𝑒𝑟)=1−𝐶_𝐼𝑡𝑒𝑟(1𝛼)𝑀_𝐼𝑡𝑒𝑟(1𝛼)
(38)
where MOP is a coefficient value, MOP(C_Iter) is the value of the MOP calculated at the tth iteration, and C_Iter is the current iteration of the search process, and M_Iter is the fixed maximum number of iterations. α is a tuning parameter utilized to control and specify the exploitation accuracy throughout the optimization process, which is set equal to 5 according to the original paper [32].

Exploitation phase
The AOA exploitation protocol is defined in this section. To get high-dense results based on the arithmetic operators, mathematical formulas using these operators (i.e., S or A) are used. Compared to other operators, these operators can accurately identify the target region due to their low distribution. As a result, the exploitation process determines the near-optimal solution that can be identified over several iterations. By improved coordination between the search processes, the exploitation operators are used to facilitate the exploitation process.

If r1 ≤ MOA(C_Iter), this step is conditioned by the MOA value. The manipulation operators of AOA (i.e., S and A) analyze the quest area intensively on many thick regions and achieve a better solution, modeled in Eq. (39). This process uses the search space by performing an in-depth search, as shown in Fig. 2. If r3 < 0.5, the S operator in Eq. (39) will be used; otherwise, the A operator will be used to complete the current mission. This phase’s procedures are identical to the previous phase’s separations.

However, exploitation operators (i.e., S and A) typically aim to stay away from the local optimum. This technique deals with exploring search methods to find the right solution while maintaining the variety of applicant solutions. The parameter is set to have a random value at each iteration, allowing for experimentation of both the first and last iterations. This part of the search helps prevent local optima stagnation, especially in the final iterations.

𝑥𝑖,𝑗(𝐶_𝐼𝑡𝑒𝑟+1)=⎧⎩⎨⎪⎪best(𝑥𝑗)−MOP×((𝑈𝐵𝑗−𝐿𝐵𝑗)×𝜇+𝐿𝐵𝑗),𝑟3<0.5best(𝑥𝑗)+MOP×((𝑈𝐵𝑗−𝐿𝐵𝑗)×𝑚𝑢+𝐿𝐵𝑗),otherwise
(39)
Figure 5 illustrates the updating process in AOA using math operators and how a search solution renews its locations in a two-dimensional search space using math operators. The final-obtained region can be in a stochastic place within an area specified by math operators’ positions as the search range, which can be recognized.

Fig. 5
figure 5
Updating process using the math operators in AOA

Full size image
Structure of the arithmetic optimization algorithm (AOA)
To summarize, the optimization rule in AOA produces a random set of competitor solutions (population). The math operators determine the feasible positions of the near-optimal solution using the trajectory of repetition. From the best-obtained solution, each solution renews its place. The MOA value is increased linearly from 0.2 to 0.9 to sustain discovery and extraction. Competitor solutions try to turn from the near-optimal solution to the near-optimal solution as r1 > MOA and vice versa. Finally, until the end requirement is fulfilled, the AOA optimizer is terminated. Algorithm 1 illustrates the pseudo-code of the original AOA. Figure 6 describes the AOA process in detail.

Fig. 6
figure 6
Flowchart of the original AOA

Full size image
figure a
Opposition-based learning
Originally introduced by Tizhoosh [17] who asserted a conducive idea that artificial intelligence-based metaheuristic algorithms adopting stochastic numbers to iteratively increase the candidate solution diversity suffers from the slow convergence to the optimum solution. Population-based metaheuristic algorithms tend to converge the near-global optima within a relatively long computation time, and optimum convergence is not always guaranteed. To overcome this algorithmic drawback, a novel concept of using the opposite point to the current solution rather than the randomly generated solution is employed to enhance search effectivity [48]. This simple yet efficient concept has gained a remarkable interest in the community due to its simplicity in implementation and significant quality improvement over the trial solutions. Researchers have applied this dexterous intelligence method to various metaheuristic algorithms, including Harris Hawks optimization [22], teaching–learning-based optimization [49], crow search algorithm [50], equilibrium optimizer [23], and Grasshopper optimization [24]. The current solution and its mirror opposite point are concurrently evaluated to generate high-quality solutions. Oppositional-based learning (OBL) is conceptualized on below-defined mathematical attributes. Suppose that the opposite number is produced based on the current solution from the center of the solution domain. Let 𝑋∈[𝑎,𝑏] is a current solution generated between the allowable search space defined in [a,b]. Then, the corresponding opposite point (OX) can be mathematically formulated by

𝑂𝑋=𝑎+𝑏−𝑋
(40)
where OX is the opposition point, a and b are, respectively, lower and upper limits of the search space. This one-dimensional mathematical representation can be extended to the D-dimensional search space by the following expression:

𝑂𝑋𝑗=𝑎𝑗+𝑏𝑗−𝑋𝑗
(41)
where j = 1,2,..,D is the current dimension of the problem and 𝑋𝑗={𝑋1,𝑋2,..,𝑋𝐷}∈𝑅. Recent advancements over oppositional-based learning lead to a promising variant called quasi-opposition-based learning (QOBL) [27], which asserts that the solution lies in the quasi-opposite point is more close to the global optimum that is obtained by the opposite point without any prior provided domain information. The quasi-opposite point can be expressed as a random solution located between the search space center and the opposite point. D-dimensional quasi-opposite point 𝑄𝑂𝑋=(𝑄𝑂𝑋1,𝑄𝑂𝑋2,...,𝑄𝑂𝑋𝐷) defined in the respective lower and upper bounds [a,b] can be given by the following:

𝑄𝑂𝑋𝑗=𝑟𝑎𝑛𝑑[(𝑎𝑗+𝑏𝑗2),(𝑎𝑗+𝑏𝑗−𝑋𝑗)]
(42)
By application of quasi-opposite point QOX, the quasi-opposite point-assisted optimization can be realized. Let 𝑋=(𝑋1,𝑋2,..,𝑋𝐷) is a candidate solution point in a D-dimensional space, and assume 𝑓() is a fitness function used for evaluating the solution quality of the candidate point. Based on the definition of quasi-opposition point given in Eq. (42), if 𝑓(𝑄𝑂𝑋)<𝑓(𝑋) for an ordinary minimization problem, then the current X point is replaced with QOX; otherwise, the iterative process is continued with X. This process is the fundamental phase of the quasi-opposition-based optimization which enables to simultaneously evaluate both current and quasi-opposite point to reach a global optimum solution of the optimization problem. The pseudo-code for calculating quasi-opposite numbers is given in Algorithm 2.

figure b
In the above-defined Algorithm 2, N is the population size, and D is the dimension of the problem. OXi,j, and QOXi,j are, respectively, the opposition and quasi-opposition points of the jth dimension of the ith population member; rand1(0,1) and rand2(0,1) are different randomly generated Gaussian numbers. There is also another algorithm term used in the quasi-opposition-based optimization called “jumping rate,” which helps the base evolutionary algorithm to jump from the current solution to the new candidate solution generated by the quasi-opposition-based learning. The jumping rate is a useful parameter to avoid semi-optimal solutions, which also accelerates the convergence of the optimal global solution. In the previous literature approaches, the numerical value of this parameter is set to random values between 0.0 and 0.6; however, in this study, an iteratively adjusted jumping rate is employed [28] given in the following form:

𝐽𝑟=(𝐽𝑟,max−𝐽𝑟.min)−(𝐽𝑟,max−𝐽𝑟.min)⋅(𝑀𝑎𝑥𝑖𝑡𝑒𝑟−𝑖𝑡𝑒𝑟)Maxiter
(43)
where Jr,max and Jr,min are correspondingly predefined maximum and minimum values of the jumping rate; iter is the current iteration, while Maxiter is the maximum number of iteration. This study also aims to bring a novelty to the quasi-oppositional-based learning, proposing to use chaotic random numbers rather than uniformly distributed random numbers in the quasi-opposition-based learning scheme given in Algorithm 2. Chaos is some kind of nonlinear dynamic iterative system showing ergodic, randomized, and non-periodic behaviors which are highly sensitive to the initial conditions [51]. Chaotic systems can be considered as the randomness source relying on their unpredictable number generation patterns, which also paves the way for high-speed searchers in comparison with the stochastic searches that are mainly based on the probabilities [52]. Enormously different and long chaotic sequences can be guaranteed by simply changing the initial conditions, making the produced numbers applicable to various types of stochastic algorithms. Chaotic numbers generated from chaotics maps have been successfully implemented into a different types of metaheuristic algorithms, some of which can be exemplified as fruit fly optimization algorithm [53], Grasshopper optimiziation algorithm [54], crow search [55], Krill Herd algorithm [56], and whale optimization algorithm [57]. In most cases, uniformly distributed random numbers maintaining the stochasticity in the corresponding algorithm have been replaced with the chaotic number generated by a specific chaotic map. However, in this study, chaotic numbers have been incorporated into the quasi-opposition-based learning scheme rather than the base algorithm, which has never been experienced before in the literature studies. Recently, a trend has been emerged among the metaheuristics community to replace the traditional pseudo-random number generators with chaotic maps [58]. Many studies have been conducted regarding the incorporation of chaotic maps and metaheuristics. In most of these papers, it has been concluded that utilizing chaotic maps increases the optimization performance of the metaheuristics. It is observed that the chaotic maps have a significant influence on the exploitation and exploration capabilities of the metaheuristic optimizers. More than twenty different chaotic numbers have been implemented in the quasi-opposition-based learning scheme, and the top five best-performing chaotic maps have been compared in terms of solution quality improvement. Table 2 reports the corresponding formulations of the top five chaotic maps, yielding the best predictive results for the optimization benchmark functions discussed in the next section. Integration of chaotic numbers with quasi-oppositional learning is realized under the framework arithmetic optimization algorithm. Five different chaotic sequences produced from logistic map (AOA01) [59], sawtooth map (AOA02) [60], iterative map (AOA03) [61], sine map (AOA04) [62], and singer map (AOA05) [63] have been replaced with uniformly distributed random numbers embedded in the quasi-oppositional-based learning scheme. Figure 7 shows the distribution of the chaotic numbers from different chaotic maps over 500 iterations.

Table 2 Formulations of the best performing chaotic maps
Full size table
Fig. 7
figure 7
Distributions of chaotic numbers for different chaotic maps

Full size image
Chaos-embedded quasi-oppositional arithmetic optimization algorithm
This theoretical research study aims to incorporate the very basics of the quasi-oppositional learning concepts into the recently developed metaheuristic method of the arithmetic optimization algorithm. In addition, another valuable contribution is deemed to embed chaotic random numbers into the quasi-opposition learning scheme, which has not been discussed before in any literature work to the best of the authors’ knowledge. Arithmetic optimization algorithm is a powerful heuristic search strategy thanks to its crafty and dexterous perturbation equations. Chaotic sequences assisted the quasi-opposition-based learning embedded into AOA to improve convergence capabilities and avoid the local optimum solutions in the search space. This section will briefly explain how the basics of quasi-opposition learning concepts are included in AOA and how this hybridization yields the optimum answers.

Step 1. Initialize the specific algorithm parameters such as MOPmax, MOPmin, α, and µ along with problem dimension (D), population size (N), and maximum number of iteration (Maxiter) for the optimization problem to be solved.

Step 2. Generate randomly distributed population members (X) within the predefined search space [lowj, upj]

𝑓𝑜𝑟𝑖=1 to N𝑓𝑜𝑟 j = 1 to D X𝑖,𝑗=𝑙𝑜𝑤𝑗+𝑟𝑎𝑛𝑑(0,1)×(𝑢𝑝𝑗−𝑙𝑜𝑤𝑗) endend
Then, the final form of the population can be expressed as

𝑋=⎡⎣⎢⎢⎢⎢⎢𝑥1,1⋮⋮𝑥𝑁,1........................𝑥1,𝐷⋮⋮𝑥𝑁,𝐷⎤⎦⎥⎥⎥⎥⎥𝑁×𝐷
Calculate the fitness value of each population member and select the best solution (Xbest).

Step 3: Initialize the AOA phase by calculating math optimizer probability (MOP) with Eq. (38) and math optimizer accelerated (MOA) with Eq. (36).

Step 4: For each population member, employ exploration and exploitation phase, respectively, by the below-given procedure, utilizing the merits of iteration-dependent MOA and MOP coefficients

𝑓𝑜𝑟 i = 1 to N𝑖𝑓(𝑟𝑎𝑛𝑑1(0,1)<𝑀𝑂𝐴) if (𝑟𝑎𝑛𝑑2(0,1)>0.5)𝑋𝑋𝑖=𝑋𝑏𝑒𝑠𝑡/(𝑀𝑂𝑃+𝑒𝑝𝑠)×((𝑢𝑝−𝑙𝑜𝑤)×𝜇+𝑙𝑜𝑤) else𝑋𝑋𝑖=𝑋𝑏𝑒𝑠𝑡×(𝑀𝑂𝑃)×((𝑢𝑝−𝑙𝑜𝑤)×𝜇+𝑙𝑜𝑤) endif else if(𝑟𝑎𝑛𝑑3(0,1)>0.5)𝑋𝑋𝑖=𝑋𝑏𝑒𝑠𝑡−(𝑀𝑂𝑃)×((𝑢𝑝−𝑙𝑜𝑤)×𝜇+𝑙𝑜𝑤) else𝑋𝑋𝑖=𝑋𝑏𝑒𝑠𝑡+(𝑀𝑂𝑃)×((𝑢𝑝−𝑙𝑜𝑤)×𝜇+𝑙𝑜𝑤) endif endifendfor
Step 5: Apply boundary check mechanism to integrate violated individuals into the predefined search space.

Step 6: Update the population members with the newly generated solutions through the above-defined perturbation scheme 𝑋=𝑋∪𝑋𝑋.

Step 7: Employ chaotic sequence-assisted quasi-oppositional learning scheme through the below-defined equations. In the below scheme, rand(0,1) is a uniformly distributed random number defined in the range [0,1], Jr is an iterative jumping rate coefficient given in Eq. (43), low and up are, respectively, lower and upper ranges of search limits

if(𝑟𝑎𝑛𝑑(0,1)<𝐽𝑟)𝑓𝑜𝑟 i = 1 to N𝑓𝑜𝑟 j = 1 to D OX𝑖,𝑗=𝑙𝑜𝑤𝑗+𝑢𝑝𝑗−𝑋𝑖,𝑗 c𝑗=(𝑙𝑜𝑤𝑗+𝑢𝑝𝑗)/2𝑖𝑓(𝑂𝑋𝑖,𝑗<𝑐𝑗)𝑄𝑂𝑋𝑖,𝑗=𝑐𝑗+(𝑂𝑋𝑖,𝑗−𝑐𝑗)×𝑐ℎ1𝑖,𝑗𝑒𝑙𝑠𝑒𝑄𝑂𝑋𝑖,𝑗=𝑂𝑋𝑖,𝑗+(𝑐𝑗−𝑂𝑋𝑖,𝑗)×𝑐ℎ2𝑖,𝑗𝑒𝑛𝑑𝑒𝑛𝑑𝑒𝑛𝑑𝑒𝑛𝑑
Step 8: Apply boundary check mechanism to the new generated quasi-oppositional QOX population and select the fittest individuals from (𝑋∪𝑄𝑂𝑋) to construct a new population for the upcoming generations.

Step 9: Decide the best member from the population.

Step 10: Repeat the algorithmic processes between Step 4 and Step 8 until the termination criterion is met.

The overall procedure of the chaos-embedded quasi-oppositional AOA is given in Algorithm 3.

figure c
Computational experiments
A set of benchmark optimization functions are selected from the literature to assess the effectiveness of the AOA, quasi-oppositional AOA (AOAOP) and its chaotic variants. Moreover, the AOA variants are compared with particle swarm optimization (PSO) [64], poor and rich optimization (PRO) [65], Harris’ Hawks optimization (HARRIS) [22], aquila optimization (AQUILA) [66] and Barnacles mating optimization (BARNACLES) [67] algorithms to determine their optimization performance. The benchmark set includes two groups of functions, namely unimodal and multimodal functions. Unimodal functions contain a single global optimum solution and zero local optimum solutions. Unimodal functions can be an appropriate case study to determine the exploitation capabilities of the optimization algorithm. Multimodal functions contain more than one local optimum solution; therefore, they can be utilized to evaluate the exploration capabilities of the optimization algorithm. All metaheuristic algorithms possess exploration and exploitation phases, and achieving a proper balance between these two parts has long been the researchers’ foremost objective. All compared optimization algorithms are programmed in the Java programming environment on a computer that runs Windows 10 64-bit operating system with 16 GB RAM. The maximum iterations and population size parameters of the optimization algorithms are, respectively, selected as 100 and 10. The parameters of the each algorithm utilized in this study are listed below:

Particle Swarm Optimization (PSO): Cognitive and social parameters c1 = 2.0, c2 = 2.0.

Aquila Optimization (AQUILA): All parameters are selected similar to the original study.

Arithmetic Optimization Algorithm (AOA): α = 5.0, ϵ = 10–8, µ = 0.5.

Tables 3, 4, 5, and 6 report the optimization performance comparisons of the optimization algorithms for the selected set benchmark optimization functions. The optimization algorithms compared in this section are AOA, AOAOP, AOA01 (Logistic map), AOA02 (Sawtooth map), AOA03 (Iterative map), AOA04 (Sine map), and AOA05 (Singer map), PSO, PRO, AQUILA, HARRIS and BARNACLES. The benchmark optimization function set utilized in this study includes 22 multimodal and 18 unimodal test functions. Each optimization algorithm was run 50 times for each benchmark function, and the mean and standard deviation of the solutions were acquired and reported in the tables. AOA2 displays a better performance compared to its rivals for the unimodal test functions. AOA2 successfully finds the most desirable mean objective function values for f2, f3, f4, f5, f6, f10, f11, f12, f13, f14, f17 and f20. AOA shows the worst performance among the selected group of optimizers for the unimodal test functions. The superior performance of AOA2 can also be noted for the multimodal test functions. AOA2 achieves to find the global optimum of all multimodal test functions except f24, f33, f34 and f39. For this reason, AOA2 is selected as the best performer optimizer among its competitors and utilized as the optimization algorithm for the shell and tube condenser optimization problem. AOA4 is selected as the second-best performer for its remarkable prediction success of the multimodal test functions. Once again, AOA shows the worst performance for finding the optimum solution for the multimodal test functions. Furthermore, it can be noticed that chaotic AOA variants shows a more desirable overall optimization performance compared to the some other selected literature optimizers. Figures 8–14 depict the convergence histories of the competing optimization algorithms for the unimodal and multimodal test functions. For most cases, all algorithms except AOA show a similar convergence performance. On the other hand, AOA exhibits a more stagnant convergence performance compared to its competitors.

Table 3 Statistical results for multimodal test functions from f1-Levy to f16-AckleyN4
Full size table
Table 4 Mean and standard deviation results for AOA and its oppositional chaotic variants for multimodal test functions
Full size table
Table 5 Statistical performance of the AOA and its oppositional chaotic variants for unimodal test functions
Full size table
Table 6 Statistical comparison between original and different oppositional chaotic AOA variants for unimodal test functions
Full size table
Fig. 8
figure 8
Convergence maps of the seven compared algorithms for the benchmark functions between f1–f6

Full size image
Fig. 9
figure 9
Convergence maps of the AOA and its oppositional and chaotic variants for the benchmark functions between f7–f12

Full size image
Fig. 10
figure 10
Evolution histories of the seven compared algorithms for the benchmark functions between f13–f18

Full size image
Fig. 11
figure 11
Evolution histories of the AOA and its six different variants for a group benchmark functions

Full size image
Fig. 12
figure 12
Convergence histories of the seven compared algorithms for the benchmark functions between f25–f30

Full size image
Fig. 13
figure 13
Convergence maps histories of the seven compared algorithms for a group benchmark functions

Full size image
Fig. 14
figure 14
Evolution histories of the AOA and its oppositional and chaotic variants for the benchmark functions between f37–f40

Full size image
Results and discussion
The chaotic quasi-oppositional arithmetic optimization algorithm (COAOA) is adopted to determine the optimal design of a shell and tube condenser having 1.0 MW heat duty from an economic point of view in the current study. By looking at the results from the previous chapter, the sawtooth map, AOA02, is selected as the chaotic map to generate the chaotic number sequences for the COAOA due to its superior performance compared to the other maps and AOA variants. The COAOA was coded in the Java programming environment, and the optimization programs were run on a Windows 10 platform using Intel Core i5-4460 CPU with 3.20 GHz processor speed and 16.0 GB RAM. The solution capabilities of the AOA are tested by applying the algorithm on three different thermo-economic design optimization of shell and tube condenser case studies. For each discussed case study, water is utilized as the condenser’s secondary fluid, and the inlet temperature and mass flow rate of the water, respectively, took 12 °C and 20 kg/s, while inlet temperature of the refrigerant mixture is taken as 30.0 °C. Tunable COAOA model parameters of α and µ are, respectively, taken as 5.0 and 0.5. Heat exchanger design variables to be optimized iteratively through COAOA are considered as mass flow rate, shell diameter, inner tube diameter, tube length, number of tube passes, tube layout, tube pitch ratio, number of baffles in the shell side, and tube diameter ratio which is the proportion between outer and inner tube diameter. More details about the three different economic design optimization of the shell and tube condenser cases are given below. A total of 50 consecutive algorithm runs have been performed by considering 50,000 function evaluations for each case study due to the employed metaheuristic optimizer’s stochastic nature.

Case 1: R32-R1234yf zeotropic mixture is utilized as the primary refrigerant of the condenser.

Case 2: R32-R134a zeotropic mixture is employed as the primary refrigerant of the condenser.

Case 3: R134a-R1234yf zeotropic mixture is used as the primary refrigerant of the condenser.

The effect of refrigerant mass fractions in the mixtures on the shell’s optimal total cost and tube condensers are analyzed by manipulating them between 0.0 and 1.0 by 0.2 increments. The optimal total cost results of the three cases for each run and refrigerant mass fraction are shown in Fig. 15. Table 7 reports the upper and lower search ranges of the considered design variables. The most desirable solutions for each case are selected from these distributions and reported in Tables 8 , 9, 10.

Fig. 15
figure 15
Optimal solutions obtained after 50 consecutive algorithm runs for each different case study

Full size image
Table 7 Upper and lower bounds for shell and tube heat exchanger design variables
Full size table
Table 8 Optimal parameters of shell and tube heat condenser obtained for different mass fractions of R32 in the refrigerant mixture (R1234yf)
Full size table
Table 9 Mimimum total annual cost rates obtained for different mass fractions of R32
Full size table
Table 10 Optimal parameters of shell and tube heat condenser obtained for varying mass fractions of R32 in the mixture (R134a)
Full size table
Table 8 reports the cost-optimal design parameters of the shell and tube condenser obtained by the COAOA for the first case. The 0.8–0.2 mass fractions for the R32-R1234yf refrigerant mixture results in the most desirable total cost outcome, which is 12.69% lower than the maximum total cost result for the first case that belongs to the mixture with 0.0–1.0 mass fractions. The lower total cost outcome is directly tied to the reduced total heat exchange area (14.90%) and required pumping power (48.38%) values. Moreover, the decrease in the required total heat exchange area occurs due to the reduced tube length (43.31%) and tube outer diameter (1.47%) values. Reduced pumping power requirement happens due to decreased tube side mass flow rate (86.66%) and inner tube diameter (4.01%) values. Also, reduced total heat exchange area requirement can be explained with higher shell side (17.54%), tube side (33.09%), and overall (17.51%) heat transfer coefficients, which are reversely correlated with the total heat exchange area. According to the EU Mobile Air-Conditioning Directive, refrigerants with a GWP value higher than 150 cannot be utilized in all new vehicles starting from January 1, 2017 [68]. Therefore, the refrigerant mixture with the lowest total cost, the mixture with the R32 mass fraction 0.8, does not meet the EU MAC Directive regulations. On the other hand, the mixtures with the R32 mass fraction 0.0 and 0.2 meet the regulations. Figure 16 shows the bar chart of the investment costs plotted against the COAOA’s operational costs for the best results of every 0.2 increments of the R32 mass fractions for the first case. It is realized that the R32 mass fraction with the lowest total cost (x = 0.8) has, respectively, resulted in 8.44, 48.38 and 12.69% reduced investment, operational and total cost. Table 9 gives the statistical results of the best total cost solutions for the first case after 50 runs have been completed.

Fig. 16
figure 16
Total annual cost comparison for the first case study

Full size image
The optimal design parameter results obtained by the COAOA for Case 2 and comparison between the outcomes for refrigerant mass fractions are given in Table 10. The R32-R134a refrigerant mixture with 0.6–0.4 mass fractions gives the minimum shell and tube condenser total cost for this case, which is 11.96% lower than the refrigerant mixture with the maximum total cost, namely the R32-R134a mixture with 0.2–0.8 mass fractions. The reduced total cost is correlated with the drop in required pumping power (10.91%) and total heat exchange area (20.85%). The reduced total exchange area is tied to the decreased tube length (17.69%), outer tube diameter (11.97%), and increased tube side (11.46%), shell side (36.94%), and overall (26.35%) heat transfer coefficients. The pumping power requirement decrease can be explained with lower tube side mass flow rate (16.52%) and inner tube diameter (8.6%) values. Moreover, it is worth noting that the minimum total cost case’s tube side mass flux value is 8.47% lower than that of the maximum total cost case, which causes higher tube side pressure drop and annual operating cost values. For the second case, only the refrigerant mixtures with 0.0 and 0.2 R32 mass fractions meet the EU MAC Directive Regulations. Figure 17 depicts the bar graph of the investment, operational, and total cost values of the COAOA’s optimal results for different mass fractions of the refrigerants in the mixture. The minimum total cost case has, respectively, 12.03% and 10.91% lower investment and operational costs than the maximum total cost case. Table 11 shows the second case’s statistical optimal total cost results for the R32 mass fractions by 0.2 increments.

Fig. 17
figure 17
Comparison of the optimal results for different heat exchanger configurations

Full size image
Table 11 Optimal results for the system configuration running with different mass fractions of R32 in R32-134a mixture
Full size table
Table 12 reports the cost-minimum design parameters of the shell and tube condenser for Case 3. For this case, the refrigerant mixture with 1.0 R134a mass fraction results in the condenser design with the minimum total cost, and the mixture with 0.2 R134a mass fraction leads to the condenser design with maximum total cost. The obtained minimum and maximum total costs for this case are €21,844.004 and €23,586.909, respectively. The lower total cost value occurs due to the lower pumping power (15.83%) and total heat exchange area (11.04%) requirements. Significant drops in the tube length (66.70%) and outer tube diameter (22.07%) and rises in the shell side (6.96%) and overall (12.40%) heat transfer coefficients are the explanation for the lower total heat exchange area requirement. Reduced tube side mass flow rate (14.39%) and inner tube diameter (11.63%) values lead to the lower pumping power requirement. The annual operating cost and tube side pressure drop for the maximum total cost case are enhanced due to the 56.34% increase in the tube side mass flux value. The refrigerant mixtures with 0.0 and 0.2 R134a mass fractions meet the EU MAC Directive Regulations for Case 3. The optimal investment, operational, and total costs of the refrigerant mixtures with different mass fractions are shown in Fig. 18. The minimum total cost case results in 6.32% and 15.83% lower investment and operational costs than the maximum total cost case. Table 13 reports the statistical results of the optimal total cost values of Case 3 for various refrigerant mixture mass fractions.

Table 12 Optimal parameters of shell and tube heat condenser obtained for varying mass fractions of R134a in the mixture
Full size table
Fig. 18
figure 18
Distribution of investment and operational cost rates for different configurations for the third case study

Full size image
Table 13 Statistical results for different heat exchanger configurations for the third case study
Full size table
Figure 19 shows the influences of varying design parameters between the defined limits on the total annual cost rates for the system configuration running with the R32-R134a mixture in the tubes. As shown in Fig. 19, increasing shell diameters result in a massive increase in total cost rates, which is an expected inclination. It considerably increases the size of the heat exchanger. As the ratio between outer and inner tube diameter (diameter ratio) increases, the total cost of heat exchanger decreases except when the mass fraction of R32 is x = 0.4. An increase in the number of baffles on the shell side results in small increases until NB = 10, then show high increases, mainly when the mass fraction of R32 is x = 0.0. This tendency can be attributed to the increasing number of baffles leading to a decline in baffle spacing for the fixed tube length. Reduced baffle spacing causes a decline in shell side pressure drop rates, as shown in Eq. (28), which entails increased operational cost rates. The total cost of the heat exchanger sharply decreases when the pitch ratio increases from 1.1 to 1.15, for which the mass fraction of R32 is x = 0.2, then follows a steady trend until the end of the defined search limit. An increment in inner tube diameter between the prescribed search range decreases the total cost.

Fig. 19
figure 19
Influences of the design variables over the total annual cost of shell and tube condenser

Full size image
Variation of inner tube diameter has both effects on investment and operational cost rates. Any increase in inner tube diameter entails an increase in tube side Reynolds number, which gives rise in overall heat transfer coefficient values. This leads to a decrease in the total heat exchange area, eventually cause a decline in investment cost values. It is not easy to make conclusive comments on how variations of inner tube diameters affect the pressure drop rates. The complex interactions occurred between the governing model equations do not explain the direct influence of this design parameter. At the initial stages, increasing tube results in small declines in total cost rates; however, increasing tube lengths cause a considerable rise in the objective function values for each case as it directly influences the heat exchange surface. Increasing the number of tube passes in the shell side cause a mammoth rise in objective function rates, mainly when the mass fraction of R32 in the refrigerant mixture is x = 0.4. Shifting square to triangular tube layout increases the total cost rates to some extent.

Figure 20 visualizes the total cost rates’ inclinations with varying numerical values of the design parameters when R32-R1234yf mixture is employed for tube side refrigerant mixture. Similar tendencies have been observed compared to the former case in which the R32-R134a mixture is employed for in-tube flow. Except for the case where the mass fraction of R32 in the mixture is x = 0.6, total cots rates increase with increasing shell diameters along the whole search span. It is seen that increasing diameter ratios have no significant effect on total cost rates for the system configurations, which operate with the mixture whose R32 mass fractions are x = 0.0 and x = 0.6. An increase in the number of baffles increases the total cost rates in the former case. The decline in objective function value is more evident at the initial stages for the configurations running with R32 mass fractions of x = 0.0, x = 0.6, and x = 1.0. An increase in inner tube diameters yields a decrease in objective function values. However, this decline is more straightforward for the system operating with R1234yf refrigerant. An increase in tube length and tube passes on the shell side gives rise to total cost rates. Altering tube layout from square to triangular arrangement increases the objective function values. Figure 21 shows the influences of varying system parameters on the total annual cost rates for the system in which R134a–R1234yf refrigerant mixture is employed for in-tube condensation. An increase in shell diameters, the number of tube passes on the shell side, and tube length increase the total cost rates.

Fig. 20
figure 20
Variational effects on the considered decision parameters over the objective function value

Full size image
Fig. 21
figure 21
Variations of total annual cost values with varying decision paramaters of the shell and tube condenser

Full size image
Conclusion
The present research study investigates the effectiveness of the chaotic and oppositional variants of the recently emerged metaheuristic method of arithmetic optimization algorithm (AOA). A chaotic sequence-assisted quasi-oppositional learning scheme is embedded into the AOA to improve its convergence capabilities and avoidance of the local optimum. Optimization performances of five different chaotic map-assisted quasi-oppositional AOA, quasi-oppositional AOA and original AOA are compared with each other over a set of benchmark optimization functions. The sawtooth map-embedded quasi-oppositional AOA resulted in the most desirable solutions for the benchmarking studies. Therefore, the sawtooth map is utilized as the chaotic sequence generator for the proposed algorithm. The proposed chaotic quasi-oppositional arithmetic optimization algorithm (COAOA) is applied to the thermo-economic optimization of a shell and tube condenser operating with refrigerant mixtures on the tube side. The considered optimization objective is to minimize the total annual cost of the heat exchanger, comprised of investment and total discounted annual operating cost. The proposed optimization algorithm is applied to three different heat exchanger configurations running with different refrigerant mixtures. Based on the COAOA optimizer, a full computer code is developed in Java, and each case study is independently solved. Predictive results obtained for each mixture pair are compared with each other in terms of minimum total annual cost rates. The case studies’ optimized outcomes reveal that variational changes of nine design variables lead to optimum shell and tube condenser configuration. It is observed that the application of the present methodology can be a promising alternative between its contemporaries to provide a cost-effective thermal design for a shell and tube condenser. It is also found out that COAOA can provide a quick convergence to the optimum results without burdening excessive computational time. It gives a designer a more degree of freedom to select alternative answers to the design problem than conventional optimization strategies. Future research on this subject focuses on investigating multi-objective design optimization of the COAOA method over different heat exchanger configurations.

Keywords
Shell and Tube Heat Exchangers
Arithmetic Optimization Algorithm
Condensers
Metaheuristics