Deep packet inspection (DPI) has been extensively investigated in software-defined networking (SDN) as complicated attacks may intractably inject malicious payloads in the packets. Existing proprietary pattern-based or port-based third-party DPI tools can suffer from limitations in efficiently processing a large volume of data traffic. In this paper, a novel OpenFlow-enabled deep packet inspection (OFDPI) approach is proposed based on the SDN paradigm to provide adaptive and efficient packet inspection. First, OFDPI prescribes an early detection at the flow-level granularity by checking the IP addresses of each new flow via OpenFlow protocols. Then, OFDPI allows for deep packet inspection at the packet-level granularity: (i) for unencrypted packets, OFDPI extracts the features of accessible payloads, including tri-gram frequency based on Term Frequency and Inverted Document Frequency (TF–IDF) and linguistic features. These features are concatenated into a sparse matrix representation and are then applied to train a binary classifier with logistic regression rather than matching with specific pattern combinations. In order to balance the detection accuracy and performance bottleneck of the SDN controller, OFDPI introduces an adaptive packet sampling window based on the linear prediction; and (ii) for encrypted packets, OFDPI extracts notable features of packets and then trains a binary classifier with a decision tree, instead of decrypting the encrypted traffic to weaken user privacy. A prototype of OFDPI is implemented on the Ryu SDN controller and the Mininet platform. The performance and the overhead of the proposed solution are assessed using the real-world datasets through experiments. The numerical results indicate that OFDPI can provide a significant improvement in detection accuracy with acceptable overheads.

Previous
Keywords
Software-defined networking

Deep packet inspection

Machine learning

Linear prediction

1. Introduction
Recently, software-defined networking (SDN) has been considered as a popular paradigm that separates the control logic from underlying forwarding switches in a centralized manner, to enable fine-grained flow management (Mckeown et al., 2008). Meanwhile, soaring traffic traversing SDN-based network has led to potential security issues for network administrators. The attacks, e.g., the malicious packet payload injection, can directly lead to serious consequences, e.g., cross-site scripting and SQL injection, which are responsible for just over 51% of web attacks (Anon, 2019b). SDN provides flow-level verification to monitor layer1–layer4 traffic (Javid et al., 2014, Suh et al., 2014, Kaur et al., 2015, Othman et al., 2017) through matching against packet header fields with tuple space search (Srinivasan et al., 1999). However, the flow-level features are generally unreliable for in-depth payload inspection to monitor the actual packet contents without headers, and hence it can be circumvented by attackers.

To identify the high-level anomaly traffic, the researchers explore to provide deep packet inspection (DPI) service in the SDN paradigm. Existing DPI schemes in SDN can be divided into two categories. First, SDN has naturally resorted to third-party deep packet inspection (DPI) tools, e.g., OpenDPI (Bela Hullar and Laki, 2011), nDPI (ndpi, 2013), and L7-filter (Crotti et al., 2007), accomplished by incorporating DPI modules into specific vendor proprietary hardware or transforming DPI into middleboxes. Specifically, network function virtualization (NFV) opens up new venues for DPI approaches by mirroring flows to specific modules. In particular, (Huang et al., 2017, Bouet et al., 2013, Lin et al., 2015) extend the SDN architecture to redirect traffic to the specified DPI proxies. Apart from traffic redirection to DPI proxies, some researches (Larsson, 2018, Cho et al., 2016) turn their eyes on developing DPI modules in OpenFlow switch (OvS) to avoid additional routing hop. Nevertheless, enabling application-aware functionality in the data plane will result in dramatic performance degeneration in network nodes, whose QoS demands can no longer be guaranteed (Li et al., 2016). In fact, whether implementing DPI modules in the data plane or in a remote proxy, these approaches usually utilize open-source DPI tools that are largely pattern-based or port-based (Finsterbusch et al., 2014). Even though pattern matching is valid for checking payloads of captured packets, this approach still remains limitations in efficiently processing large volume of traffic (Lin et al., 2008). With the recognition of exponential growth of network traffic, packet inspection with high throughput as well as efficient intrusion detection is demanded.

The second category gains inspiration from machine learning and deep learning technologies. Recently, machine learning algorithms have emerged as a promising solution to identify anomalous packets, which are widely explored in many works (Wang et al., 2016, Cusack et al., 2018, Zhang et al., 2013). The payloads inside packets are sometimes text strings indeed (e.g., web queries), and thus such packet metadata can provide high-level information. Since the feature extraction in traditional machine learning is complicated and time-consuming, more and more researches pay attention to provide end-to-end detection with deep learning. De La Torre Parra et al. (2019) proposes a conceptual SDN-based security monitoring framework for the smart grid with behavioral analysis and deep learning models. Liu et al. (2018) provides an end-to-end payload classification without feature extraction using CNN-based and RNN-based classification approaches to learn features from raw payloads. Even though such machine learning or deep learning approaches achieve high detection accuracy, they can only handle unencrypted payloads.

Nevertheless, network traffic is increasingly transmitted with encryption by using the Transport Layer Security (TLS) protocol, covering 80% web traffic in 2019, estimated by Gartner (Gartner, 2016). Meanwhile, the attackers will use encryption to conceal malware traffic. In light of encrypted traffic, a typical approach is to use decryption to obtain the payloads of the packets, which unfortunately weakens the user privacy. BlindBox (Sherry et al., 2015) claims the first attempt to enable deep packet inspection on encrypted traffic without decrypting the payloads. Apart from supporting keyword matching and regular expression like Sherry et al. (2015), SPABox Fan et al. (2017) also supports malware detection via machine learning with a limited connection setup overhead. Similarly, Anderson and McGrew (2016a) safeguards user privacy by developing supervised machine learning models with contextual data. Machine learning techniques shed light on the deep packet inspection in SDN for both unencrypted payloads and encrypted payloads.

However, the integration of machine learning methods and the SDN paradigm still inherits some challenges. Specifically, how to customize the SDN controller with a lower overhead when processing large volume of traffic? Inspecting all the packets in the SDN paradigm brings a heavy burden to the SDN controller (Shah et al., 2013). The SDN controller needs to deal with the huge number of OpenFlow (OF) messages, at the expense of frequent redundant memory copy, incurring high CPU utilization. The imperfection of the current DPI schemes necessitates the development of an efficient deep packet inspection approach in SDN (Chin et al., 2015).

To this end, this paper proposes a novel OpenFlow-enabled deep packet inspection (OFDPI) approach in the software-defined networking paradigm by utilizing machine learning techniques. The main idea behind the proposed approach is as follows. OFDPI extracts the features of payloads and then train a binary logistic regression classifier. The payload features include tri-gram frequency based on Term Frequency and Inverted Document Frequency (TF–IDF) and linguistic features, e.g., the number of digits in the payload, the number of consecutive consonants. To seek a trade-off between detection accuracy and resource constraints of Ryu SDN controller, OFDPI devises a packet sampling window based on the linear prediction. Prior to in-depth payload inspection, OFDPI prescribes an early detection at flow-level by checking the IP addresses of each new flow via OpenFlow protocols, with an adoption of a pre-defined IP blacklist from Cisco. Besides, OFDPI also allows for the inspection of encrypted packets. Instead of decrypting the encrypted traffic to weaken user privacy, OFDPI extracts some notable features that can distinguish between malicious encrypted packets and benign packets to provide a statistical machine learning solution.

In this work, a prototype of OFDPI is further implemented on the Ryu SDN controller and the Mininet platform. Two real-world datasets are used to train the binary classifiers for unencrypted traffic and encrypted traffic, respectively. For unencrypted packets inspection, a binary logistic regression classifier outperforms other typical classifiers with a rather high detection accuracy of 98.86%. For encrypted packets inspection, a decision tree classifier achieves a high accuracy of 99.15%. To avoid overfitting with a particular dataset, another unencrypted dataset is adopted to evaluate the performance of the binary logistic regression classifier. The main technical contributions made in this paper are manifold:

•
This paper proposes a novel OpenFlow-enabled deep packet inspection (OFDPI) approach in the SDN paradigm incorporating with machine learning algorithms. Prior to deep packet inspection, OFDPI prescribes an early detection at flow-level granularity by checking the IP addresses of each new flow via OpenFlow protocols.

•
For unencrypted packets, OFDPI extracts the payload features (TF–IDF and linguistic features) and then trains a binary logistic regression classifier to perform packet inspection. To reduce the resource constraints of the SDN controller, OFDPI devises a packet window based on linear prediction and then performs adaptive packet sampling.

•
For encrypted packets, OFDPI extracts some notable features of encrypted traffic (e.g., TLS ciphersuites) to train a decision tree classifier in identifying malicious encrypted packets, rather than decrypt the encrypted traffic to weaken user privacy.

•
A prototype of OFDPI is implemented under the Ryu SDN controller and the Mininet platform to evaluate the performance and overheads of OFDPI. The experiments results show that OFDPI can provide high detection accuracy with acceptable overheads.

The rest of this paper is organized as follows. Section 2 presents the related work. Section 3 briefly introduces the overview of OFDPI. This is followed by an elaborate design of OFDPI in Section 4. The evaluation of the proposed scheme in Section 5 covers an offline training test and online analysis. Section 6 makes the concluding remarks of this paper.

2. Related work
An abundance of literature has investigated the issue of deep packet inspection in the SDN paradigm. Generally, previous researches have been predominant to consider the deployment of DPI engines on proprietary hardware to seek a trade-off between the number of DPI engines and network resource constraints.

Huang et al. (2017) provide a deep packet inspection method for traffic traversing the ingress switches in the context of an integrated DPI proxy allocation and routing determining problem. They formulate it as an ILP problem to minimize the overall delay of DPI processing. Accordingly, a two-phase heuristic algorithm is proposed to select the DPI proxy and determine corresponding routing paths. For better routing strategy decision, Adami et al. (2015) enables a DPI module in the control application to detect Session Initial Protocol (SIP) signaling messages, and thus applying a differentiated routing strategy. Bouet et al. (2013) optimize the deployment of DPI engines in SDN environment from a cost perspective. Considering operational constraints regarding maximum bandwidth per link and license fees of DPI engine, they minimize the number of DPI engines with genetic algorithms to reach a trade-off, reduce up to 58% of global cost. To reduce the overhead of the controller, Lin et al. (2015) extends the conventional SDN architecture with a two-tier traffic classification mechanism. First, it performs traffic classification on the data plane rather than the controller. If the first classification module is unable to handle traffic, the traffic will be redirected to a DPI module. However, redirecting traffic to particular DPI engines inevitably leads to global network load and link utilization issues.


Download : Download high-res image (445KB)
Download : Download full-size image
Fig. 1. The solution overview.

Packet processing delay and redundant memory copy motivate researchers to turn their eyes on developing DPI modules in OpenFlow switch to avoid additional routing hop, e.g., a pre-integrated DPI engine embedded in the OpenvSwitch (OvS), analogous to a next-generation network gateway. The DPI placed at the data link layer may sound applicable for efficient packet forwarding at line rate, but it should be noted that it partially violates the principle of SDN, in which OpenFlow switches are only capable of dispatching packets without any built-in application-aware intelligent logic. Cho et al. (2016) pay attention to payload information in the packets rather than only utilizing header information for packet classification. They propose a sophisticated packet forwarding scheme by implementing a DPI module in a virtual OpenFlow switch associated with a monitoring application. If the DPI module detects a pre-defined string pattern in a packet, the OpenFlow switch will send information to a log server where the monitoring application periodically gathers log information. Nevertheless, they only utilize a pre-defined string pattern based on Snort. Li et al. (2016) introduce DPI into application-aware traffic control plane of SDN with extensions of flow table, but they only send the first packet to the SDN controller for identification in consideration of the performance of the SDN controller. Actually, implementing the DPI in the data plane or in remote proxy is largely pattern-based or port-based.

Recently, machine learning and deep learning methods have been applied to develop classifiers to analyze payloads rather than traditional pattern-based models. Wang et al. (2016) classify the network traffic according to the QoS requirement in SDN. However, the traffic classification engine implemented in the SDN controller may cause the bottleneck of the controller. Cusack et al. (2018) collects the traffic with programmable forwarding engines (PFEs) and then detects ransomware by utilizing a random forest binary classifier. Since the feature extraction in traditional machine learning is complicated and time-consuming, more and more researches pay attention to provide end-to-end detection with deep learning. De La Torre Parra et al. (2019) proposed a conceptual SDN-based security monitoring framework for the smart grid, providing cyber-attacks detection with behavioral analysis and deep learning models. Unfortunately, the conceptual framework was shorted of experimental validation. Liu et al. (2018) present a convolutional neural network-based (CNN) and a recurrent neural network-based (RNN) approach in attack detection, performed by learning features from payloads in the packets. Even though Liu et al. (2018) achieves a high detection accuracy, it is unable to handle encrypted payloads. BlindBox (Sherry et al., 2015) claims the first attempt to enable deep packet inspection on encrypted traffic without decrypting the payloads. Apart from supporting keyword matching and regular expression like (Sherry et al., 2015), SPABox (Fan et al., 2017) also supports malware detection via machine learning with a limited connection setup overhead. Similarly, Anderson and McGrew (2016a) safeguards user privacy by developing supervised machine learning models with contextual data. Machine learning techniques shed light on the deep packet inspection in SDN for both unencrypted payloads and encrypted payloads.

In this paper, we implement an OFDPI scheme in SDN by utilizing machine learning techniques to perform deep packet inspection for both unencrypted packets and encrypted packets. Our earlier work explored the payload inspection in SDN with machine learning techniques (Cheng et al., 2018). However, the caused overhead is out of consideration. Rather than identifying the first packet of a flow in Li et al. (2016), we aim to sample partial packets for deep packet inspection to maintain a trade-off of the detection accuracy and the performance of the controller. We get inspirations from adaptive traffic sampling according to linear prediction (Hernandez et al., 2001, Zhang, 2013, Silva et al., 2017) to avoid redundant memory copy and long processing time. Some works implement a linear prediction-based algorithm to balance the monitoring overhead and anomaly detection accuracy (Zhang, 2013), but they always conduct a time-driven sampling model. Instead, we employ a packet-driven linear prediction model based on an adaptive packet window to enable packet sampling according to previous samples.

3. Overview
In this section, we briefly introduce the overview of the proposed OFDPI approach, as illustrated in Fig. 1. OFDPI enables deep packet inspection for both unencrypted traffic and encrypted traffic.

OFDPI allows for a two-stage deep packet inspection mechanism. Prior to deep packet inspection, OFDPI prescribes an early detection at flow-level granularity, accomplished by checking the IP addresses of each new flow via OpenFlow protocols with a pre-defined IP blacklist from Cisco. For those packets that match against flow entries in the kernel, in-depth payload analysis is necessary in case malicious packets evade the early detection phase.

In the second stage, the packets will be redirected to a DPI engine located in another server within the same datacenter by port mirroring, as illustrated in Fig. 1. The DPI engine is associated with two parts: unencrypted packets inspection and encrypted packets inspection. In order to reduce the overhead of inspection, we implement an adaptive traffic sampling mechanism in the DPI engine, in which the packet window based on linear prediction performs packet sampling by analyzing the previous consecutive packets. An  residing in the SDN controller is in charge of receiving the notification of the DPI engine and determining the stay of the packets. If the packet is confirmed anomalous, an FLOW_MOD message will be installed to block traffic accordingly.

For unencrypted packets, the payloads of the packets are easily accessible to extract features and then perform in-depth packet analysis. The payload features include tri-gram frequency based on Term Frequency and Inverted Document Frequency (TF–IDF) and linguistic features, e.g., the number of digits in the payload, the number of consecutive consonants. These features are concatenated into a sparse matrix representation and are then applied to train a binary classifier since there are two types of traffic: anomalous and benign. A binary classifier is training offline since it is generally time-consuming in machine learning, which is susceptible to real-time traffic transmission. However, analyzing all the payloads brings a huge cost to the system. To seek a trade-off between detection accuracy and resource constraints of the SDN controller, a packet window based on linear prediction is devised to perform adaptive packet sampling by analyzing some consecutive packets.

For encrypted packets, payloads are invisible to the network administrators. Rather than decrypt network traffic, this paper provides statistical machine learning solutions by employing some traffic features. After investigating a real encrypted botnet dataset, some notable features can distinguish between malicious traffic and benign traffic, including TTL, TLS Ciphersuites, duration, ports, and etc. OFDPI extracts these distinguished features to train a binary classifier under supervised learning. The online classification results provide information for remediation and also periodically updates offline training dataset.

4. OFDPI
Given a hierarchically structured overview of OFDPI, this section presents the design rationale of OFDPI in detail. First, OFDPI introduces an early detection mechanism associated with IP filtering at flow-level. Then, the packets are monitored by a DPI engine located in another server, which consists of two main components: unencrypted traffic inspection and encrypted traffic inspection. Table 1 lists the key notations of this paper.


Table 1. Notations used in mathematical models.

Symbol	Description
The real number of malicious packets in the th sample
The window size of the th sampling, i.e., the number of the sampled packets
Constant, 
The predicted malicious packets in the th sample
The variation of the packet window size between 
 and 
The variation of the packet window size in the next sample
The minimum value of the packet window size
The maximum value of the packet window size
The actual value of  linguistic feature in the  payload
The normalized value of 
The minimum value of the linguistic features
The maximum value of the linguistic features
4.1. Early detection
Before in-depth payload inspection, OFDPI maintains a simple early detection mechanism with the consideration of that IP address filtering is still necessary especially for elephant flow, for which partial payload inspection is not reliable.

Definition 1 Traffic Flow

Fig. 2 illustrates the workflow of packet processing in SDN. All packets from the external network first flow through datapath module in the OvS kernel space, and then OvS will extract key values (e.g., MAC layer message, network layer message) to match against flow tables cached in the kernel (Pfaff et al., 2015). If a match fails (for the first packet in a flow), the datapath module will append the packet to trigger upcall instead, a method that notifies the OvS user space (i.e., OvS-vSwitchd module) where a packet is received. For packets that do not have a matching flow entry in user space, a Packet_in message is always generated to inquire the controller. It is unnecessary for the subsequent packets to generate Packet-in message if they successfully match against flow tables cached in the kernel.

To perform early detection, a blacklist of IP addresses is available in the SDN controller to monitor the source IP address of the packet in this paper. Once receiving the first packet, the SDN controller decodes it and extracts key values of network layer message. If the SDN controller verifies the source IP address of the packet within the flow is illegal, the SDN controller blocks this flow via OpenFlow messages accordingly. Otherwise, the SDN controller installs corresponding flow entries in the OvS. Deep packet inspection is necessary only if the former packet succeeds in a flow table lookup.

4.2. Unencrypted packets inspection
For unencrypted traffic, payloads of the packets are accessible for deep packet inspection. However, analyzing all the payloads brings a huge cost to the system. To this end, this paper devises an adaptive packet-driven sampling mechanism based on linear prediction to address the dilemma of resources and performances in packet-level granularity.

4.2.1. LP-based adaptive packet sampling
First, a packet sampling window is defined in the following.

Definition 2 Packet Sampling Window

A packet sampling window captures a collection of consecutive packets selected for deep packet inspection. The packet window size equals the number of the sampled packets

Fig. 3 depicts the scalable packet sampling window mechanism. The central principle of LP-based adaptive packet sampling attempts to estimate the packet window size of the next sample to capture consecutive 
 packets from every  packets of a flow, where .  is a constant which is experimentally determined. The predicted sampled packets 
 in the ()th sample is written as a linear combination of the previous  samples: (1)
 
 
where 
 denotes the real number of malicious packets in the th sample, and  represents the current variation of the packet window size between 
 and 
 and is calculated as: (2)
  can be either positive or negative. If , the current packet window size 
 is larger than the previous packet window size. If , it indicates that 
 is smaller than the previous packet window size. If , it demonstrates that the packet window size remains unchanged.


Download : Download high-res image (109KB)
Download : Download full-size image
Fig. 3. Adaptive packet sampling with the scalable packet window.

This paper aims to control the variation of the packet window size in the next sample, 
. A set of rules are established to adjust 
 by analyzing the real number of malicious packets and the predicted value. According to the rate of change in the prediction and the rate of change in the real samples, we obtain that: (3)
 
 
If we use a ratio metric 
 
, then the ratio 
 can be written as: (4)
 

If 
, 
 is indeed undefined and thus the 
 can be computed as: (5)
 
 Note that when 
, this case indicates that the number of sampled malicious packets in two samples with the same packet window size is the same. In this case, it requires an enlarged packet window size (e.g., set 
) to determine the new traffic pattern. When 
, it indicates that the packet window should be narrow down and vice versa.

The variation of the packet window size in the next sample 
 on most occasions is given by Eq. (6). (6)
 
If 
, let 
 which keeps the same packet window size as 
. Therefore, we are able to obtain the packet window size of next sample, 
. Considering the storage of the measured data is limited, larger window size requires much more processing resources correspondingly. The range of values satisfies a condition: 
, where 
 denotes the minimum value of the packet window size and the 
 is the maximum value of the packet window that cannot be exceeded.


Download : Download high-res image (429KB)
Download : Download full-size image
The adaptive packet sampling algorithm based on linear prediction is demonstrated in Algorithm  1. On the observation of previous samples, the LP-based packet sampling mechanism attempts to estimate the packet window size of the next sample. The variation between the predicted value and the actual value helps the network administrator flexibly and timely adjust the packet window size, providing an adaptive packet sampling in a proactive way.

4.2.2. Feature extraction
Payloads are contents of the packets without packet headers, which are the actual data inside of a packet. The payloads within the packets are sometimes text strings associated with characters (e.g., web queries). A payload is a sequence of characters which consists of numbers and alphabets. However, the machine learning algorithm is incapable of directly processing the payloads in the string format. It is necessary to create the payload representation that reflects semantic relationships. To address this issue, word embedding that maps a word to a vector with a dictionary is utilized to obtain data features for further modeling. We define a feature vector of each payload within the packets, which concatenates all the extracted features, including term frequency and linguistic features.

TF–IDF. Generally, some words appear in higher frequency in all the payloads, e.g., ’jsp,’ php,’ ’asp,’ ’script,’ etc., which are of little relevance to a specific payload. Term Frequency–Inverse Document Frequency (TF–IDF) tries to allocate such frequent words with lower weights but increase the importance of those words significant to a particular payload, which reflects how important a specific word to a payload, and it can be written as: (7)where  represents the frequency of a specific word in a given payload. The word with low frequency in a document often results in bigger , which demonstrates that this word is much better for payload classification. TF–IDF aims to get numerical features of payload strings rather than directly handle encoded payload data, in particular, obtaining feature vectors from the payload.

In order to calculate the value of TF–IDF, trigrams is exploited to segment payloads. A tri-gram of the payload is a set of all character sequences with the length of 3. For example, if a payload is “/javascript/debug.exe”, the payload will be divided into several segmentations, like ‘/ja’, ‘jav’, ‘ava’, ‘vas’, ‘asc’, ‘scr’, ‘cri’, ‘rip’, ‘ipt’, ‘pt/’, ‘t/d’, ‘/de’, ‘deb’, ‘ebu’, ‘bug’, ‘ug.’, ‘g.e’, ‘.ex’, ‘exe’.

Fig. 4 illustrates the WordCloud of malicious payloads and benign payloads according to term frequency. We are easy to find that the malicious payloads look more random than a benign one and are concatenations of digits and alphabets, and thus we discuss the linguistic features in the following.

Linguistic Features. To rich the feature set, we focus on linguistic features within payloads in the following. As depicted in Fig. 4(a), the number of digits offers valuable information to differentiate malicious payloads from benign payloads. The number of digits is defined as the digits occurring in a payload. The number of consecutive digits sums up the lengths of sequences of digits continuously appear. For example, Table 2 presents five linguistic features extended in our feature set. Considering a malicious payload =“/starnet/addons/slideshow_full.php? album_name=288150554” and a benign one = “/tests/numbertotexttest.php”, where the number of consecutive digits are 9 and 0, respectively. The number of consecutive consonants is calculated analogously to the number of consecutive digits. The number of repeated letters are defined as the letter which occurs more than once in a payload. This feature is computed to 12 in  and 4 in , where the repeated letters are s, t, a, n, e, d, o, l, h, u, p, m and t, e, s, p accordingly. Similarly, the number of vowels is computed on a payload to 12 and 6 in  and , respectively.


Download : Download high-res image (339KB)
Download : Download full-size image
Fig. 4. Comparisons of payloads illustrations under WordCloud according to term frequencies: 4(a) Illustration of the anomalous payloads under WordCloud, 4(b) Illustration of the normal payloads under WordCloud.

Min–Max Normalization. We are easy to find that the value of linguistic features is much higher than the value of TF–IDF. Min–Max Normalization is a standard method to address this issue, and it can be accomplished by rescaling the range of linguistic features to a particular range. Let 
 be the actual value of th linguistic feature in the th payload. The normalized value of 
 can be denoted as 
. The normalization formula is given as: (8)
 
where 
 and 
 are the minimum, maximum value of linguistic features respectively. In this paper, we normalize the data to [0,1]. Finally, term frequency features incorporating linguistic features are concatenated into a sparse matrix representation to reduce computational complexity.


Table 2. Examples of linguistic features.

Feature		
Number of digits	9	0
Number of consecutive digits	9	0
Number of consecutive consonant	19	15
Number of repeated letters	12	4
Number of vowels	12	6
4.2.3. Binary classification
According to the feature vector obtained with Section 4.2.2, it is necessary to train a classifier for determining whether a packet is benign or malicious. In this paper, we focus on supervised learning classifier with labeled samples, specifically on logistic regression since there are only two labels of payloads: benign and malicious, which is a typical binary classification problem.

Due to low computing cost and high compute speed, Logistic regression, also named as generalized linear regression, is a regression model to predict the odds of dependent variables. We choose binary logistic regression with  penalty as a classifier which has only two outputs, such as ‘0’ and ‘1’, which represents benign payload and malicious payload discussed in this paper, respectively. Logistic regression uses the well-known  function as below: (9)
 
Assume that  is a linear function of , then  can be written as: (10)
Hence, the prediction function of logistic regression can be expressed as: (11)
 
where 
 is demonstrated as the probability of the dependent variable. Given an input payload, the probability of a malicious/benign payload is given as: (12)
For binary classification, the probability of a malicious payload is 
 if . In contrast, the probability of a normal payload is defined as 
. Considering that training model is a time-consuming job in machine learning, hence offline training is adopted and saved to provide real-time online detection.

4.3. Encrypted packets inspection
For encrypted traffic, the administrator cannot directly obtain the payload of the packet unless decrypted with the secret key. However, decrypting the encrypted traffic will affect user privacy, together with additional computational costs. In this paper, we observe that some notable features can distinguish between malicious encrypted traffic and benign traffic after analyzing an encrypted botnet dataset. Rather than decrypt network traffic, this paper proposes a statistical machine learning solution by employing some traffic features. Fig. 5 shows the process of identifying malware encrypted traffic. In the following, we present some notable features in identifying malware encrypted botnet traffic.

TLS Ciphersuites. According to recent research from Cisco (Anderson and McGrew, 2016b), the offered TLS ciphersuites in TLS are notably distinct in malware traffic and benign traffic. Malicious traffic always uses outdated ciphersuites in clientHello messages, while normal traffic uses more updated ciphersuites. Many new ciphersuites can only be contained after the TLS1.1 version. Therefore, the TLS version is chosen as one of the features that reflect different ciphersuites.


Download : Download high-res image (78KB)
Download : Download full-size image
Fig. 5. The workflow of detecting malicious encrypted traffic.

TTL. TTL specifies the maximum number of segments allowed to pass before the router drops IP packets. Generally, the number of router hops between two hosts is basically the same for a period of time. In a DDoS attack, an attacker sends a large number of malicious packets to the same host in a short period of time. As a result, there will be a large number of instantaneous data streams with the same TTL value on the client side. Thus, TTL can be a significant feature that distinguishes encrypted botnet traffic and benign traffic.

Duration. There is also a significant difference in the packet duration between sending benign traffic and malicious traffic. Compared to normal traffic, botnet communication has a large time interval for leaking data. In addition, the botnet will frequently send a large number of packets before the attack (5 10 pps). In this case, the duration is extremely short, which differs from normal communication.

Ports. Ports are often a target for attackers, such as Trojans (port 1001), worms (port 135, 445), which can be another notable feature.

5. Evaluation
In this section, we first introduce the dataset utilized in this paper. Then, two binary classifiers concerning unencrypted packets inspection and encrypted packets inspection are trained offline under supervised learning. Finally, this section evaluates the performance and overheads of OFDPI.

5.1. Dataset
Table 3 demonstrates three datasets utilized in this paper, including two unencrypted datasets and one encrypted dataset.

Github Payloads (Anon). In order to provide a reliable machine learning model, we choose labeled datasets from Github in the offline training process, consisting of more than 40,000 benign payloads and over 5000 malicious payloads.


Table 3. The dataset description.

Dataset	Class	Samples	Total
CTU-BOTNET	Encrypted	Normal	10000	20000
Anomalous	10000
Github payloads	Unencrypted	Normal	40000	45000
Anomalous	5000
HTTP CSTC 2010	Unencrypted	Normal	36000	60000
Anomalous	24000
HTTP CSIC 2010 (Carmen Torrano Gimez and Villegas, 2018a). To avoid overfitting to a particular dataset and provide a reliable machine learning model, we choose another real-world labeled dataset to evaluate the performance of OFDPI in online detection process. The HTTP CSIC 2010 is a labeled dataset that contains generated web requests with corresponding web attacks, e.g., SQL injection, cross-site scripting, buffer overflow, etc. After data preprocessing, we select 24,000 anomalous payloads and 36,000 normal payloads as our validation dataset.

CTU-BOTNET (Anon, 2019). This encrypted dataset captures botnet traffic and normal traffic in a university network. After data preprocessing, we selected 10,000 normal flows and 10,000 botnet flows as training sets, and selected 1000 normal flows and 1000 botnet flows as test sets to ensure that the training set and the test set are mutually exclusive.

5.2. Offline training test
In this section, OFDPI trains two binary classifiers in identifying unencrypted packets and encrypted packets, respectively.

5.2.1. Performance metrics
This section introduces some performance metrics when evaluating binary classifiers. Malicious packets are regarded as the positive class while negative class denotes the benign, given a set of testing packets. We select several standard classification measures to evaluate the performance when given a typical confusion matrix. We compute the following evaluation measures:

 The detection accuracy varies with different split ratios. The higher detection accuracy, the better model performance.

 
 The True Positive Rate (TPR), also viewed as , denotes the fraction of malicious packets among the total retrieved amount of malicious packets.

 
 The False Positive Rate (FPR), shows the fraction of benign packets classified to be malicious packets among the total retrieved amount of benign packets.

 
 Precision means the proportion of real malicious packets among all the malicious packets returned by the classifier, and it reflects there are how many real malicious packets in the classified positive results.

 
 An optimal binary classifier with an expectation to have a high value of both  and , but they are sometimes contradictory in fact. In the analysis of the proposed binary classifier, an unbalanced problem with much more clean packets than malicious packets, we adopt 
 as the harmonic average of the two values. In consideration of both  and , 
 can well demonstrate the performance of our classifier.

5.2.2. Unencrypted traffic training
In this section, logistic regression classifier is trained under 5-fold cross validation. Note that an imbalance of data distribution exists in the dataset (white samples are far more than black samples), this paper implements stratify method in the validation process. Besides, logistic regression is compared with other common classifiers.

The training results of performance metrics are demonstrated in Table 4. Even though the SVM and decision tree achieve high accuracy in identifying malicious payloads, they have longer training time in comparison with logistic regression. As demonstrated in Fig. 8, the training time of SVM exceeds 30 s which is not optimal in periodically updating models. In contrast, the average training process lasts about 2.93 s under logistic regression, with an accuracy of 98.96%. In summary, logistic regression is better than other classifiers in identifying anomalous payloads.

In order to get the learning curves of logistic regression classifier, we implement 5-fold cross validation with 50 iterations that the validation set is randomly selected with 20%. Fig. 9 shows the learning curve of a binary logistic regression classifier. It can be easily seen that the training score is higher than 0.95 at the beginning and it increases slowly. The validation score increases with more training examples, and the average score is more than 0.925, but a minute difference still exists between the training accuracy and validation accuracy, which indicates slight overfitting with the model. We can quickly conclude that adding more training examples is likely to help better the model with current logistic regression algorithm.


Table 4. Comparisons of different classifiers.

Different classifiers	Metrics (%)
Accuracy	Precision	Recall	F1-score
KNN	0.9741	0.9349	0.865	0.8986
Logistic regression	0.9896	0.9732	0.91	0.9486
Decision tree	0.9864	0.9406	0.9284	0.9345
MultinomialNB	0.9768	0.9563	0.7479	0.8394
Random forest	0.9219	0.9996	0.1505	0.2524
SVM	0.9926	0.9721	0.9349	0.9536
Even though OFDPI provides deep packet inspection with a high detection accuracy of 98.96%, it heavily relies on traditional feature engineering. In particular, we extract the payload features including tri-gram frequency-based TF–IDF and linguistic features. However, the feature extraction is a complicated and time-consuming process. In contrast, (Liu et al., 2018) provides an end-to-end payload classification without feature extraction using deep learning models. They adopt a word embedding technique to encode raw payloads and then apply the CNN-based and RNN-based classification approach to learn features from initial payloads. They achieve a high detection accuracy of 99.36% over the DARPA1998 dataset. Unfortunately, encrypted payloads are not validated in Liu et al. (2018).

In this paper, OFDPI performs traffic classification under supervised learning. Both unencrypted payloads and encrypted payloads are trained with labeled dataset whereas the labeled data is rare and expensive in realistic scenarios. Recently, Yu et al. (2018) achieves a rather high detection accuracy with 60% labeled data under semi-supervised machine learning. Even the performance of the SDN controller is a lack of evaluation in Yu et al. (2018), semi-supervised learning is still a promising direction in deep packet inspection in SDN. This can be discussed in our future work.

5.2.3. Encrypted traffic training
This section adopts an encrypted botnet dataset from CTU (Anon, 2019) to train a binary classifier with some machine learning algorithms. Table 5 shows the training results of different classifiers.

It is easy to observe that SVM has the worst classification performance even if its recall value is high. In comparison, Decision tree achieves the highest accuracy in detecting malware encrypted botnet traffic with 99.15%. This high value is partial because the features extracted from the CTU dataset are distinguished. Thus, OFDPI chooses a decision tree model to detect encrypted malware traffic.

This paper also compares the performance with nDPI, a popular OpenDPI library used for deep packet inspection. Table 6 shows the results when nDPI processes the malware botnet dataset from CTU. The results show that all the traffic is divided into several security levels, including safe, acceptable, unsafe, fun and unrated. nDPI classifies traffic with finer granularity in comparison with OFDPI. Nevertheless, 12.6085% of the tested malware traffic is misjudged as normal, and most traffic is considered acceptable and unrated.


Table 5. Training results of different classifiers with encrypted traffic.

Different classifiers	Metrics (%)
Accuracy	Precision	Recall	F1-score
SVM	0.5635	0.533903	0.98	0.696136
MLP	0.968	0.947419	0.991	0.968719
Decision tree	0.9915	0.997974	0.985	0.991444

Table 6. Detection results with nDPI.

Security level	Safe	Acceptable	Fun	Unsafe	Unrated
Percent	12.6085	39.0352	0.29043	0.0791	47.9868
5.3. Online detection
This section presents the online detection with OFDPI. In particular, we adopt a famous IP blacklist to perform early detection, and then sample traffic according to the LP-based traffic sampling window.

5.3.1. Evaluation testbed
This paper implements a prototype of OFDPI by using a Mininet network emulator and an SDN controller running on a virtual machine with Intel Core i7-6700 processor. The SDN controller in OFDPI needs to receive notifications from the DPI engine and then sends the FLOW_MOD message if an anomalous packet is detected. As a result, the deep packet inspection process inevitably induces the network latency. The lower latency requirement leads to our preference for Ryu SDN controller since Ryu exhibits the best latency results in comparison with ONOS, OpenDayLight and Floodlight (Mamushiane et al., 2018). In addition, Ryu has better TCP throughput as compared to POX (Ali et al., 2018). Moreover, Ryu is python-based which is much easier to integrate with existing mainstream machine learning libraries (e.g., scikit-learn in this paper).

The network topology is shown in Fig. 10. The controller is connected to two switches, each of which is connected to two hosts. The maximum bandwidth of each link is set to 10 Mbps. The OFDPI engine is placed on another server to ease the burden on the controller. When h1 attempts to connect to h4, traffic traversing the switch will be redirected to the DPI engine through port mirroring.

5.3.2. Detection with new dataset
In our experiments, a well-known IP blacklist from Cisco (Anon, 2018) is applied in the SDN controller to perform early IP address filtering. Initially, TCP packets containing the payloads reach the OpenvSwitch, they invoke datapath module in the kernel and then extract key values (e.g., IP addresses and MAC addresses) to match against flow entries in the flow table. The IP blacklist stored in the Ryu SDN controller is used to filter anomalous IP addresses. In our experiments, OFDPI only blocks a few packets containing the malicious IP address, whereas a large number of packets successfully match against the flow entries.

Then, OFDPI applies an adaptive packet sampling to those packets that bypass the IP blacklist. Unreasonable sampling rate may cause a burden on the CPU (Reuven and Evgeny, 2018). Considering the throughput of each link,  is determined as 100 in our scenarios, i.e., we select a packet window size from every 100 packets. The maximum and minimum packet window is set to be 5 and 15, respectively. Fig. 11 illustrates the detection results under linear prediction model. Each packet window is adaptively selected according to previous ten samples (i.e., let ) since the current traffic pattern has little to do with a large number of previous samples. The yellow graph in Fig. 11 shows the detected malicious packets, and the blue one deals with the packet window size. It shows that the number of malicious packets is linearly related to the packet window size. When the packet window size fluctuates around the maximum packet window size, it usually achieves the best detection results with more malicious packets but at the same time with an increase of resource consumption (detailed discussion in Section 5.4). However, the limitations in the LP-based packet sampling mechanism are obvious. We only utilize a simple adjustment algorithm to expand or contract the packet window size. As suggested in Zhang (2013), more accurate adjustment algorithms should be added into the LP-based mechanism, especially the latest network attacks are more uncertain and dynamic (Hoque et al., 2014).

As discussed above, it is likely to overfit with machine learning algorithms to a particular dataset especially where an imbalance of data distribution exists. In addition to address the class imbalance issue of a dataset in the training process (e.g., focal loss and stratify), we collect a supernumerary real dataset to validate the detection accuracy to avoid overfitting (Carmen Torrano Gimez and Villegas, 2018a). Experimental results reveal that the detection accuracy of OFDPI is 82.31% with the new dataset, and the ROC curve is as demonstrated in Fig. 12, in which the AUC under new dataset is 78.33%. The precision–recall curve is demonstrated in Fig. 13 with a recall of 56.51%. The results under a distinct dataset are not satisfied enough which needs further improvement on feature extraction.


Download : Download high-res image (291KB)
Download : Download full-size image
Fig. 11. LP-based adaptive packet sampling results.

5.4. Performance evaluation
This section evaluates the throughput of the SDN controller when identifying packets with OFDPI. In addition, CPU and memory utilization are also presented in OFDPI.

5.4.1. Throughput of SDN controller
Adding additional monitoring functions to the SDN controller may introduce some performance bottlenecks to the controller itself. This section uses the Cbench (Cbench) tool to test the throughput of the SDN controller with the OFDPI by continuously looping through the new Packetin messages. Initially, an SDN-based network is constructed as shown in Fig. 10, in which h1 persistently sends packets to the h4. Then, Cbench connects to the Ryu controller by emulating 14 switches, and each switch is associated with 1000 unique MAC addresses. We test 5 loops and each loop lasts for 10,000 ms, ignoring the first “warmup” and “cooldown” loops. Finally, we record the minimum, maximum, average and standard deviation values of the throughput of the Ryu SDN controller. In comparison, we also test the throughput of the Ryu SDN controller without OFDPI. The comparison results are demonstrated in Fig. 14.

5.4.2. Overheads
Besides, we evaluate the overheads caused by OFDPI concerning CPU and memory. In the first experiment, an SDN-based network with Mininet platform and the Ryu SDN controller is constructed, in which the  thread is monitoring the underlying traffic. When the dataset HTTP CSTC 2010 is running on the forwarding plane as Section 5.3.2, CPU and memory utilization of the current system is recorded per second. Finally, we get a total of 120 CPU and memory records, respectively. In comparison, the CPU and memory utilization without OFDPI are also tested under the same scenario.

Fig. 15 illustrates the cumulative distribution function (CDF) plot of the CPU utilization in different experimental settings. There is one bearing at each graph where the blue line represents the unmodified SDN controller and the red line with OFDPI. The data are distributed around values 12 and 25, respectively. Obviously, the average CPU utilization with OFDPI is greater than that without OFDPI. It is partly because the Ryu SDN controller consumes much more CPU when monitoring the underlying traffic with OFDPI.

Fig. 16 shows a CDF plot of the memory utilization of different settings. 30% of the values in the distribution are less than or equal to the 56% memory utilization without OFDPI. In contrary, the memory utilization caused by OFDPI is greater with an average value of 63%. In summary, the slight increase in overheads caused by OFDPI is acceptable in our experiments. In comparison, the overhead of the SDN controller in OFDPI is higher than that of Lin et al. (2015). In [R2], only a few percents of input traffic is sent to the controller, since they extend the data plane to redirect traffic to the DPI module or other NFV modules by service function chaining which eases the burden of the controller. However, the detection accuracy of the DPI module is not mentioned in Lin et al. (2015).


Download : Download high-res image (103KB)
Download : Download full-size image
Fig. 15. The probability distribution of the CPU utilization.


Download : Download high-res image (97KB)
Download : Download full-size image
Fig. 16. The probability distribution of the memory utilization.

6. Conclusion
Deep packet inspection (DPI) in software-defined networking (SDN) remains restrictions in the presence of a large volume of data. Despite third-party DPI tools, this paper proposes a novel OpenFlow-enabled deep packet inspection (OFDPI) approach in SDN using machine learning algorithms. OFDPI enables deep packet inspection for both unencrypted traffic and encrypted traffic by training two binary classifiers respectively. In addition, OFDPI is able to sample suspicious packets with a packet window based on linear prediction. We evaluate the performance of OFDPI on the Ryu SDN controller and the Mininet platform with real-world datasets. OFDPI achieves a rather high detection accuracy for both encrypted traffic and unencrypted traffic, as well as acceptable overheads.

