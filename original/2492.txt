In this paper, a hybrid cooperative differential evolution with the perturbation of the Covariance Matrix Adaptation Evolutionary Strategy (CMA-ES) with the local search of Limited-Memory Broyden‚ÄìFletcher‚ÄìGoldfarb‚ÄìShanno (LBFGS) mechanism, named jSO_CMA-ES_LBFGS, is proposed to solve the complex continuous problems. In the proposed algorithm, jSO, as a variant of Differential Evolution (DE), is used as a global search operator to explore the entire solution space. When the population falls into stagnation, a relatively reliable initial solution for the local search operator is generated by the CMA-ES, which is activated to perturb the optimal candidates in the solution space. The LBFGS utilized as the local search strategy is embedded in CMA-ES to obtain the potential local optimal solutions. A cooperative co-evolutionary dynamic system is formed by jSO and CMA-ES with a local search operator. The proposed jSO_CMA-ES_LBFGS is tested on the CEC2017 benchmark test suite and compared with eleven state-of-the-art algorithms. Further, two practical engineering problems are investigated utilizing the proposed method. The experimental results reveal the effectiveness and efficiency of the jSO_CMA-ES_LBFGS.

Introduction
As an important branch of artificial intelligence, evolutionary computation, which has the characteristics of self-adaptation, self-organization, and self-learning, is a kind of model and algorithm for simulating the behavior of ‚Äúthe survival of the fittest‚Äù in natural biological and ecological systems, and the algorithm is used to solving various complicated problems [1, 2]. The continuous optimization problem from the real world is an important application field of evolutionary computation [3, 4]. It has been an important issue and has been widely studied in recent years. Classical evolutionary algorithms mainly include genetic algorithm (GA) [5], differential evolution [6], artificial bee colony (ABC) [7], particle swarm optimization (PSO) [8], whale optimization algorithm (WOA) [9], and the other typical hybrid evolutionary computation algorithms.

The DE is proposed to find the global optimum solution for complex optimization problems [10]. The basic idea of DE stems from Darwin's theory of biological evolution. Owing to the efficiency and effectiveness of solving optimization problems, DE is applied to solve numerous real-world problems from diverse domains of engineering optimization, e.g., electrical and power systems [11], manufacturing science, and operation research [12, 13]. It is difficult to accurately classify the methods of DE since certain variants of DE are combinations of multiple mechanisms. The modifications of DE are roughly divided into three categories, and the details are shown as follows.

(i) DE with certain strategies.

A variant of DE with multi-population and mutation strategies (EDEV) is proposed by Wu et al. [14], which utilized the combination of different evolution strategies and different subpopulations to produce the next generation solution in different evolution stages. The surrogate is embedded as a strategy in DE to predict the optimal solution and guide the search direction of differential evolution [15, 16]. The experimental results verify that the surrogate helps speed up the convergence of DE. In [17], the stochastic mutation strategy and information sharing mechanism are introduced to enhance the search capability of DE. In addition, incorporating a local search heuristic is often useful in enhancing the search performance of DE [18].

(ii) DE with Adaptation of the Parameters.

The performance of DE depends on its control parameters and search operators. In DE, the values of two parameters are automatically configured and only one mutation strategy is used throughout the evolution process [19]. The evolution process of the algorithm is recognized as a closed-loop control system. In [20], two sinusoidal waves are used to adapt to the scaling factor. A performance adaptation scheme based on earlier success is used to choose one of the sinusoidal waves. Moreover, the covariance matrix learning strategy is used for the crossover operator to solve problems with a high correlation between the variables. In [21], a parameter with the adaptive learning mechanism (PALM) is introduced to tackle the ill interaction of control parameters in certain DE variants, and a timestamp mechanism is employed to update inferior solutions in the external archive.

(iii) Hybridization of DE with other algorithms.

In the domain of optimization, hybridization refers to the combination of different algorithms to achieve the effect of "chemical reaction" according to the optimization characteristics of the algorithm, rather than the simple flattening of the different operating mechanisms of the algorithms. In [22], the combination of ABC and DE, which is named HABCDE, is proposed to develop a more effective algorithm than ABC and DE in terms of convergence and exploration‚Äìexploitation. Moreover, in [23], DE is used as a local search process in the moth search algorithm to enhance local searchability. The experimental performance analysis confirms that the hybrid mechanism is effective for solving practical optimization problems. In [24], a hybrid system of DE and bat evolution algorithm (BA), in which DE and BA are in a competitive relationship, is introduced to balance the exploration and exploitation capabilities of BA.

According to the literature, since Zhang and Sanderson [25] proposed a variant of DE by implementing the mutation strategy ‚ÄúDE/current‚àíto‚àípbest‚Äù with the external archive ùê¥ùê¥ to improve optimization performance (JADE), there has been a variety of researches focusing on adaptation of the control parameters of DE. The feedback from the process of evolutionary search is employed to dynamically tune the value of control parameters. By adopting certain self-learning mechanism, the control parameters of DE are automatically adjusted to appropriate values. An improved JADE, which is named as SHADE [22], is proposed to improve the robustness of JADE.

A hybridization framework of LSHADE-SPACMA based on the LSHADE and CMA-ES is introduced to improve the optimization performance of L-SHADE algorithm [26]. DE as a local search operator is introduced into the Grey Wolf Optimizer (GWO) to improve the exploitation of the GWO (COGWO2D) [27]. The experimental results proved that COGWO2D is effective to find the optimal solutions of the global optimization problem. Adaptive neighborhood operators are borrowed from DE to promote exploration and exploitation of Migrating Birds Optimization (MBO) [28].

In summary, DE has been extensively studied on the operating mechanism of the algorithm regarding whether it is a single DE algorithm or a hybrid DE algorithm in recent years. However, DE tends to trap into the local optima and lose the diversity of the population in the evolution process. First, the size of the external archive is fixed in the classic evolution strategy of DE. As the evolution of the population progresses, the solutions in the external archive are constantly replaced by updated candidates with optimal fitness. The population falls into local optimal solutions, the external archive stores various suboptimal solutions rather than worse solutions. In other words, the perturbation strength is insufficient currently. Second, according to the evolutionary state of the population, the strength of the disturbance is automatically adjusted rather than a pre-determined single value. Third, to enhance the local search ability of the hybrid algorithm for DE, the population of DE will be degraded by injecting results of local optimization.

Inspired by the cooperative co-evolutionary framework, a hybrid cooperative jSO [19] (a optimization algorithm for solving single-objective real parameter problems) with the perturbation of CMA-ES with a local search of LBFGS, named jSO_CMA-ES_LBFGS, is proposed to solve the single objective numerical optimization problems. In the jSO_CMA-ES_LBFGS, the jSO provides a reliable initial solution for CMA-ES with LBFGS, and CMA-ES with LBFGS provides a potentially local optimal solution for jSO, which makes jSO have a wide range of learning capabilities. Therefore, a cooperative co-evolution between jSO and CMA-ES with LBFGS is achieved. The contributions of this paper are generalized as follows.

(1)
In this paper, a hybrid cooperative differential evolution algorithm is designed to solve the single-objective real-parameter numerical optimization problem, which effectively combines evolutionary algorithm (jSO), an evolutionary strategy (CMA-ES), and mathematical method (LBFGS). A de-randomized and anti-rotation CMA-ES [29] is used as a perturbation operator to provide a relatively reliable initial solution for the local search operator (LBFGS).

(2)
The Markov model of jSO_CMA-ES_LBFGS is presented to analyze the convergence performance of the jSO_CMA-ES_LBFGS mathematically. The evolutionary process of the jSO_CMA-ES_LBFGS is mapped to the state transition process in the Markov model, and then the convergence performance of the jSO_CMA-ES_LBFGS is proved.

(3)
The proposed jSO_CMA-ES_LBFGS is tested on CEC 2017 benchmarks and compared with the seven variants of DE and other evolutionary algorithms. The experimental results imply that the jSO_CMA-ES_LBFGS obtain more efficient and accurate solutions than that of the other algorithms. Furthermore, a desirable combination of parameters is also analyzed by executing the Taguchi method [30].

The remainder of the paper is organized as follows. The framework of the original DE and CMA-ES is summarized in Sect. 2. The proposed methodology is described and analyzed in Sect. 3. The experimental research and statistical analysis are provided in Sect. 4. In Sect. 5, two practical engineering problems including continuous and discrete decision space are investigated using the proposed jSO_CMA-ES_LBFGS. Finally, the conclusions and future work are presented in Sect. 6.

Basic algorithm and operators
In this section, jSO and CMA-ES are briefly introduced. The notation is described as follows.

jSO algorithm
The basic operations of the DE include mutation, crossover, and selection. When the population of DE is initialized, three basic operations are repeated until a certain termination criterion (e.g., exhaustion of maximum functional evaluations) is satisfied. In the DE, the population is a set of real value vectors ùë•ùëñ=(ùë•1,‚Ä¶,ùë•ùê∑), ùëñ=1,‚Ä¶,ùëÅùëÉ, where ùê∑ is the dimension of the objective function, and ùëÅùëÉ is the size of the population. The population is initialized randomly.

The mutation operator:

ùë£ùëñ,ùëî=ùë•ùëñ,ùëî+ùêπùë§(ùë•ùëùùêµùëíùë†ùë°,ùëî‚àíùë•ùëñ,ùëî)+ùêπ(ùë•ùëü1,ùëî‚àíùë•ùëü2,ùëî)
(1)
where ùêπ is scale factor and ùêπùë§ is calculated as follows:

ùêπùë§=‚éß‚é©‚é®‚é™‚é™0.7‚àóùêπ,ùëõùëìùëíùë†<0.2ùëÄùëéùë•_ùêπùê∏ùë†,0.8‚àóùêπ,ùëõùëìùëíùë†<0.4ùëÄùëéùë•_ùêπùê∏ùë†,1.2‚àóùêπ,ùëúùë°‚Ñéùëíùëüùë§ùëñùë†ùëí
(2)
The indexes ùëü1,ùëü2 are chosen from [1:ùëÅ+ùëÅùëÉ] randomly, where ùëÅ is the size of the external archive ùê¥ùê¥ and ùëü1‚â†ùëü2‚â†ùëñ. ùë•ùëùùêµùëíùë†ùë°,ùëî are the dominant individuals in the population. The parameter ùêπùúñ[0:1] is the scaling factor of the i-th individual, which controls the size of the difference term. If the donor vector goes beyond the feasible region of the problem, the following operation is performed:

ùë£ùëñ,ùëó,ùëî={(ùë•ùëöùëñùëõùëó+ùë•ùëñ,ùëó,ùëî)/2ùëñùëìùë£ùëñ,ùëó,ùëî<ùë•ùëöùëñùëõùëó(ùë•ùëöùëéùë•ùëó+ùë•ùëñ,ùëó,ùëî)/2ùëñùëìùë£ùëñ,ùëó,ùëî<ùë•ùëöùëéùë•ùëó
(3)
The crossover operator:

ùúáùëñ,ùëó,ùëî={ùë£ùëñ,ùëó,ùëîùëñùëìùëüùëéùëõùëë[0,1)>ùê∂ùëÖùëúùëüùëó=ùëóùëüùëéùëõùëë,ùë•ùëñ,ùëó,ùëîùëúùë°‚Ñéùëíùëüùë§ùëñùë†ùëí.
(4)
The selection operator:

ùë•ùëñ,ùëî={ùë¢ùëñ,ùëîùëñùëìùëì(ùë¢ùëñ,ùê∫)‚â§ùëì(ùë•ùëñ,ùê∫)ùë•ùëñ,ùëîùëúùë°‚Ñéùëíùëüùë§ùëñùë†ùëí
(5)
The jSO algorithm is one of the most advanced variants of the DE family [19, 31]. The jSO, with the new weighted version of the mutation strategy, inherits the evolutionary strategy and parameter control mechanism of the L-SHADE. The parameter control mechanism of jSO is an adaptive closed-loop control system. The values of the control parameters of jSO are different at different stages of evolution, which embodies a search process from global to local.

CMA-ES
A de-randomized evolutionary strategy with the covariance matrix adaptation (CMA-ES) is used as a perturbation operator to avoid using a pre-determined single value for the perturbation strength [29]. A standard CMA-ES consists of the three control parameters, including mean vector ùëö, covariance matrix ùê∂, and step-size ùúé. ùëö is the favorite solution. ùúé is the control step length. ùê∂ is the shape of the distribution ellipsoid. The adaptive update process for these three parameters is as follows.

ùëÅùëÉ	The population size of the jSO
D	Dimension size
ùëì(ùëã)	The object function
ùëî	Generation counter
ùë•ùëùùêµùëíùë†ùë°,ùëî	ùë•ùëùùêµùëíùë†ùë°,ùëî is randomly chosen as one of the top 100 p% individuals in the current population with ùëÉ‚àà[0.25,0.125]
ùê¥ùê¥	External archive
ùëãùëêùë¢ùëüùëüùëíùëõùë°ùëèùëíùë†ùë°	The best solution of current population
ùëõùë¢ùëöùëî	The number of times the ùëî-th generation population has stagnated
ùúé	The so-called step-size ùúé‚ààùëÖ+ controls the step length
ùëö	The mean vector ùëö‚ààùëÖùëõ represents the favorite solution
ùê∂	The covariance matrix ùê∂‚ààùëÖùëõ√óùëõ determines the shape of the distribution ellipsoid
ùëÅùëñ	The multi-variate normal distribution
ùëùùëê	The evolution path of ùê∂
ùëùùúé	The evolution path of ùúé
ùúÜ	The population size of CMA-ES, default value:ùúÜ=4+ùëüùëúùë¢ùëõùëë(3.0‚àólog(ùê∑))
ùëãùëèùëíùë†ùë°	The best solution obtained by the proposed algorithm
ùêªùëò	Hessian matrix of the objective function in the ùëò-th iteration of LBFGS
‚àáùëìùëò	The first derivative of the objective function in the ùëò-th iteration of LBFGS
ùê∏ùêπùë†	The number of evaluations
The search solutions are sampled by a normally distributed.

ùë•ùëñ=ùëö+ùúéùë¶ùëñ,ùë¶ùëñ‚àºùëÅùëñ(0,ùê∂)
(6)
The mean is updated.

ùëö‚Üê‚àëùëñ=1ùúáùë§ùëñùë•ùëñ:ùúÜ=ùëö+ùúéùë¶ùë§
(7)
where ùë¶ùë§=‚àëùúáùëñ=1ùë§ùëñùë¶ùëñ:ùúÜ. The evolutionary path of ùê∂ is constructed and accumulated.

ùëùùëê‚Üê(1‚àíùëêùëê)ùëùùëê+1‚àí(1‚àíùëêùëê)2‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àöùúáùë§‚Äæ‚Äæ‚Äæ‚àöùë¶ùë§
(8)
The evolutionary path of œÉ is constructed and accumulated.

ùëùùúé‚Üê(1‚àíùëêùúé)ùëùùúé+1‚àí(1‚àíùëêùúé)2‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚àöùúáùë§‚Äæ‚Äæ‚Äæ‚àöùê∂‚àí12ùë¶ùë§.
(9)
The covariance matrix ùê∂ is updated.

ùê∂‚Üê(1‚àíùëê1‚àíùëêùúá)ùê∂+ùëê1ùëùùëêùëùùëáùëê+ùëêùúá‚àëùëñ=1ùúáùë§ùëñùë¶ùëñ:ùúÜùë¶ùëáùëñ:ùúÜ.
(10)
The step length ùúé is updated.

ùúé‚Üêùúé√óùëíùë•ùëù(ùëêùúéùëëùúé(||ùëùùúé||ùê∏||ùëÅ(0,ùêº)||‚àí1))
(11)
In summary, the main characteristics of CMA-ES are as follows: (i) Multivariate normal distribution is adopted to generate search solutions and conforms to the maximum entropy principle, in which the least possible assumptions on target function are used in the distribution shape. (ii) A rank-based selection strategy implies rotational invariance. (iii) The convergence rate is improved by a step-size control mechanism. (iv) Covariance matrix adaptation (CMA) increases the likelihood of previously successful steps, which reduces any convex-quadratic function to the sphere model without using derivatives. Please refer to the mentioned literature which includes a further description of the CMA-ES.

The description of the proposed algorithm
The three problems mentioned earlier in Sect. 1 about DE are critical reasons that restrict the improvement of the algorithm. Firstly, for the problem of disturbance intensity mentioned in the first problem and the second problem, CMA-ES is utilized as a disturbance operator, so that the parameters in the evolution process of the algorithm change adaptively and dynamically. Secondly, the designed stagnation detection operator is used to detect the state of the population all the time, and different operations are activated according to different states, to ensure the self-cooperation between algorithm operations as far as possible. For the third problem, a mathematical method (LBFGS) is employed to fuse in the local search stage of the evolutionary algorithm to conduct in-depth exploitation. In Sects. 3.1 and 3.2, the importance of the LBFGS in the jSO_CMA-ES_LBFGS is proved by detailed experiments. In addition, the effect of ensemble operators has been proved by experiments in Sect. 4.4.

As shown in Fig. 1, firstly, the jSO searches the entire search space as a global search operator. In the process, the stagnation detection operator is performed to detect the state of the population. The perturbation operator is activated when the population falls into a locally optimal solution (red pentagram). Second, the local optimal solution generated by jSO is considered as the mean vector parameter of the perturbation operator (CMA-ES). New Œª search points, which distributes around the local optimal solution (red line), are generated by a normally distributed (gray spot). Furthermore, a local search (LBFGS) is performed on the Œª search points to obtain the potential local optimal solutions (green pentagram). Finally, these local optimal solutions guide the population of jSO out of the current attraction basin to explore another area containing a potential local optimal solution.

Fig. 1
figure 1
The operating mechanism of jSO_CMA-ES_LBFGS

Full size image
The jSO provides the CMA-ES_LBFGS with a reliable initial solution, while CMA-ES_LBFGS returns multiple local optimal solutions to jSO. Then, jSO learns from these multiple local optimal solutions, thus jumping out of the current attraction basin. Therefore, the cooperative evolution between jSO and CMA-ES_LBFGS is achieved.

figure a
The pseudocode of jSO_CMA-ES_LBFGS is presented in Algorithms 1‚Äì3. As the LBFGS performs a local search on a copy of the population of CMA-ES, LBFGS does not affect the adaptability and convergence of CMA-ES. At the same time, the local optimization results are not directly injected into the jSO. The adaptability and convergence of jSO are not affected by CMA-ES and LBFGS. The size of the perturbation is provided by the CMA-ES, which explores the neighborhood of the current optimal solution for the jSO.

figure b
figure c
Stagnation detection operator
To measure the diversity of the population of jSO_CMA-ES_LBFGS, the diversity metric ùê∑ùëÉ is defined as follows:

ùê∑ùëÉùëî=1ùëÅùëÉ‚ãÖ(‚àëùëñ=1ùëÅùëÉ‚à£‚à£‚à£‚à£ùë•ùëñ,ùëî‚àí1ùëÅùëÉ‚ãÖ‚àëùëó=1ùëÅùëÉùë•ùëó,ùëî‚à£‚à£‚à£‚à£),
(12)
ùëõùë¢ùëöùëî+1={ùëõùë¢ùëöùëî+1ùëñùëì‚à£‚à£ùê∑ùëÉùëî+1‚àíùê∑ùëÉùëî‚à£‚à£ùúé‚ãÖùê∑0Otherwise
(13)
where ùê∑ùëÉùëî is a metric that is used to measure the diversity of the ùëî-generation population. ùê∑ is the dimension size. The ùúé is the step size parameter in CMA-ES. The ùëõùë¢ùëöùê∫ is an indicator to detect whether the ùëî-generation population is in a state of stagnation. ùëõùë¢ùëö1=0, if ùëõùë¢ùëöùëî>ùëá, the population of jSO_CMA-ES_LBFGS is considered to be in a stagnant state and the perturbation operator (CMA-ES) is activated. Here, ùëá=10, the stagnation detection operator is executed to detect the state of the population of jSO. As shown in Figs. 2 and 3. The dynamics of jSO_CMA-ES_LBFGS in terms of population state (stagnation, explorative, and exploitative) are studied for ùëì4 and ùëì11 functions to show the role of the stagnation detection operator.

Fig. 2
figure 2
The diversity of the population of jSO_CMA-ES_LBFGS (ùëì4, ùê∑=30)

Full size image
Fig. 3
figure 3
The diversity of the population of jSO_CMA-ES_LBFGS (ùëì11, ùê∑=30)

Full size image
Local search
The local search methods for solving unconstrained numerical optimization problems are mainly divided into two categories: iterative gradient decrement algorithm and random local search algorithm. Random local search algorithms mainly include Multi-Trajectory Local Search algorithm (Mtsls1), Solis and Wets' Algorithm (SW), etc.

The SW is a local search algorithm proposed by Solis and Wets [32]. The basic principle is to give an initial solution and randomly generate a possible solution in a normal distribution. In the search process, according to the increase or decrease in the value of the objective function, the direction and step size of the search are adjusted to find the optimal solution. A candidate solution requires 3 times functional evaluations in the SW algorithm.

The Mtsls1 is a well-known local search algorithm [33]. As shown in Fig. 4, the Mtsls1 searches the solution space by dimension. A solution starts from the first dimension and ends with the last dimension. Furthermore, it is updated one by one.

Fig. 4
figure 4
Mtsls1 search along one dimension from the first dimension to the last dimension (Adapted from [31])

Full size image
Move step size ùë† along one dimension, if the fitness value is reduced, then obtained solution is kept for the next dimension (from solution ùëé to solution ùëè). If the fitness value increases, the Mtsls1 returns to the starting solution and moves by 0.5√óùë† along the reverse direction (from solution ùëè to solution ùëê). If the fitness of solution ùëê is smaller than that of ùëé, solution ùëê is kept as the starting solution in the next dimension. Therefore, the update process of the Mtsls1 is greedy.

The LBFGS belongs to an iterative gradient decrement algorithm. LBFGS is known for the fast convergence for solving the convex optimization problem and achieves higher accuracy with less number of function evaluations [34]. The core idea behinds the Broyden‚ÄìFletcher‚ÄìGoldfarb‚ÄìShanno (BFGS), without using second-order partial derivatives of the function, is to construct a positive definite symmetric matrix that approximates the Hessian matrix. The objective function is optimized by BFGS under the condition of "quasi-Newton".

Each step of the BFGS method has the form,

ùëëùëò=‚àíùêªùëò‚àáùëìùëò
(14)
ùë•ùëò+1=ùë•ùëò+ùõºùëòùëëùëò
(15)
where ùõºùëò is the step length and Œ±k satisfies the Wolfe conditions:

ùëì(ùë•ùëò+ùõºùëòùëëùëò)‚â§ùëì(ùë•ùëò)+ùõΩ‚Ä≤ùõºùëò(‚àáùëìùëò)ùëáùëëùëò,
(16)
(‚àáùëìùëò+1)ùëáùëëùëò‚â•ùõΩ(‚àáùëìùëò)ùëáùëëùëò,
(17)
0<ùõΩ‚Ä≤<12,ùõΩ‚Ä≤<ùõΩ<1.
(18)
Moreover, if ùõºùëò=1 satisfies Eq. (16), Eq. (17), and Eq. (18), ùõºùëò=1. ùêªùëò is updated at every iteration utilizing the formula,

ùêªùëò+1=ùëâùëáùëòùêªùëòùëâùëò+ùúåùëòùë†ùëòùë†ùëáùëò
(19)
where

ùúåùëò=1ùë¶ùëáùëòùë†ùëò,
(20)
ùëâùëò=ùêº‚àíùúåùëòùë¶ùëòùë†ùëáùëò,
(21)
ùë†ùëò=ùë•ùëò+1‚àíùë•ùëò,
(22)
ùë¶ùëò=‚àáùëìùëò+1‚àí‚àáùëìùëò.
(23)
The information from the recent iterations is utilized to construct the approximate Hessian in the LBFGS [35,36,37]. The termination condition of LBFGS is satisfied when the candidates move one step in the search space. According to the reference manual of ALGLIB and the user guidance, LBFGS uses a 4-point central formula for differentiation. Therefore, one gradient calculation requires 4√óùê∑ times function evaluations, where ùê∑ is dimension size. Because the gradient is the fastest direction in which the function value decreases, LBFGS is adopted as a local search operator to achieve the fast convergence speed of the proposed algorithm.

Principle and convergence analysis of jSO_CMA-ES_LBFGS
In this paper, the results of local optimization are not directly injected into jSO. Therefore, the adaptability and convergence of jSO are not affected by CMA-ES and LBFGS. The convergence of jSO proved to be equivalent to the convergence of jSO_CMA-ES_LBFGS.

As a population-based stochastic optimization algorithm, the evolutionary process of jSO is considered to be a stochastic process. Let ùëÜ=ùëÖùê∑ be the individual solution space, ùëÜùëÅùëÉ denote the population space, and ùëì:ùëÜ‚ÜíùëÖ+ be the fitness function, where ùê∑ is the dimension of the problem and ùëÅùëÉ is the population size. The basic operators of DE are described as follows.

The stochastic mapping of the mutation operator:

ùëáùëö:ùëÜùëÅùëÉ‚ÜíùëÜ
(24)
The probability distribution of the mutation operator:

ùëÉ{ùëáùëö(ùëã)=ùë£ùëñ}=‚àëùëÉ(ùëá1ùëö(ùë•){ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî})‚ãÖùëÉ(ùëá2ùëö(ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî)=ùë£ùëñ)=‚àëùëÉ(ùëá1ùëö(ùë•)={ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}),{ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}‚ààùëÜ4.
(25)
The stochastic mapping of the crossover operator:

ùëáùëê:ùëÜ2‚ÜíùëÜ
(26)
The probability distribution of the crossover operator:

P{ùëáùëê(ùë•ùëñ,ùë£ùëñ)=ùë¢ùëñ}=‚éß‚é©‚é®‚é™‚é™0,ùë¢ùëñ=ùë•ùëñùëö‚ãÖùê∂ùëòùê∑ùê∂ùëÖùëò(1‚àíùê∂ùëÖ)ùê∑‚àíùëò,ùëíùëôùë†ùëíùê∂ùëÖùëÅ+1ùëÅùëÉ,ùë¢ùëñ=ùë£ùëñ
(27)
The stochastic mapping of the selection operator:

ùëáùë†:ùëÜ2‚ÜíùëÜ.
(28)
The probability distribution of the selection operator:

ùëÉ{ùëáùë†(ùë•ùëñ,ùë¢ùëñ)=ùë¢ùëñ}={1,ùëì(ùë¢ùëñ)‚â§ùëì(ùë•ùëñ)0,ùëíùëôùë†ùëí
(29)
From the above analysis, jSO algorithm is written as

ùëã(ùëõ+1)={ùë•ùëñ(ùëõ+1)=ùëá‚àòùë†ùëá‚àòùëêùëáùëö(ùëã(ùëõ)),ùëñ=1,‚ãØùëÅùëÉ}
(30)
Definition 1
(Convergence in Probability) [38] Let {ùëã(ùëõ),ùëõ=0,1,2‚Ä¶} be a population sequence generated by a population-based stochastic algorithm, the stochastic sequence {ùëã(ùëõ)} weakly converges in probability to the global optimum. If and only if:

ùëôùëñùëöùëõ‚Üí‚àûùëÉ{ùëã(ùëõ)‚à©ùêµ‚àó‚â†‚àÖ}=1
(31)
where ùêµ‚àó is a set of global optimum of an optimization problem.

Lemma 1
In the jSO algorithm, the evolutional direction of the population is monotonically non-increasing, i.e., ùêπ(ùëã(ùëõ+1))‚â§ùêπ(ùëã(ùëõ)) .

Lemma 2
The population sequences of DE algorithm ùëã(ùëõ),ùëõ‚ààùëÅ+ form a Markov chain process.

Proof
The population sequences of jSO are.

ùëã(ùëõ+1)=ùëá(ùëã(ùëõ))=ùëá‚àòùë†ùëá‚àòùëêùëáùëö(ùëã(ùëõ)),
(32)
where the ùëáùë†, ùëáùëê, and ùëáùëö are irrelevant to the iteration ùëõ and ùëã(ùëõ+1) only depends on ùëã(ùëõ). The transition probability of states is calculated by

ùëÉ{ùëá(ùëã(ùëõ))ùëñ=ùë•ùëñ(ùëõ+1)}=‚àë‚àë‚àëùëÉ{ùëá1ùëö(ùëã(ùëõ))={ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}}‚ãÖùëÉ{ùëáùëê(ùë•ùëñ(ùëõ),ùë£ùëñ)=ùë¢ùëñ}‚ãÖùëÉ{ùëáùë†(ùë•ùëñ(ùëõ),ùë¢ùëñ)=ùë•ùëñ(ùëõ+1)},ùë¢ùëñ‚ààùëÜ,ùë£ùëñ‚ààùëÜ,{ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}‚ààùëÜ4.
(33)
It is obvious that ‚àÄùëã(ùëõ)‚ààùëÜùëÅùëÉ,‚àÉ{ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}‚ààùëÜùëÅùëÉ and ùë£ùëñ,ùë¢ùëñ‚ààùëÜùëÅùëÉ, subject to

ùëÉ{ùëá1ùëö(ùëã(ùëõ))={ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî}}>0
(34)
ùëÉ{ùëá2ùëö(ùë•ùëü1,ùë•ùëü2,ùë•ùëñ,ùê∫,ùë•ùëùùêµùëíùë†ùë°,ùëî)=ùë£ùëñ}>0,
(35)
ùëÉ{ùëáùëê(ùë•ùëñ(ùëõ),ùë£ùëñ)=ùë¢ùëñ}>0,
(36)
ùëÉ{ùëáùë†(ùë•ùëñ(ùëõ),ùë¢ùëñ)=ùë•ùëñ(ùëõ+1)}>0
(37)
So,

ùëÉ{ùëá(ùëã(ùëõ))ùëñ=ùë•ùëñ(ùëõ+1)}>0,
(38)
not depending on ùëõ. Thus, the transition probability of states is given as

ùëÉ{ùëá(ùëã(ùëõ))=ùëã(ùëõ+1)}=‚àèùëñ=1ùëÅùëÉùëÉ{ùëá(ùëã(ùëõ))ùëñ=ùë•ùëñ(ùëõ+1)}>0.
(39)
This transition probability is also independent of ùëõ. Therefore, the population sequence of DE is a homogeneous irreducible aperiodic Markov chain. Markov population sequence of jSO is represented by

ùëÉ{ùëã,ùëå}=ùëÉ{ùëã(ùëõ+1)=ùëå|ùëã(ùëõ)=ùëã}
(40)
‚ñ°

Theorem 1
Suppose that {ùë•(ùë°),ùë°=0,1,2,‚Ä¶} is the population sequence generated by DE, then, {ùë•(ùë°),ùë°=0,1,2,‚Ä¶} converges to the subset ùêµ‚àó0={ùëå=(ùë¶1,‚ãØùë¶ùëÅùëÉ);ùë¶ùëñ‚ààùêµ‚àó} of global optimum ùêµ‚àó with probability one, i.e.

limùëõ‚Üí‚àûùëÉ{ùëã(ùëõ)‚ààùêµ‚àó0|ùëã(0)=ùëã0}=1
(41)
Proof
Suppose ùë•‚àó is the unique optimum satisfaction solution. The following properties are derived according to Eq. (25) and Eq. (27).

(1)
if X, Y‚ààùêµ‚àó0, then ùëÉ{ùëã,ùëå}>0,ùëÉ{ùëå,ùëã}>0, in which these two states are interconnected; i.e.,ùëã‚Üîùëå.

(2)
if X‚ààùêµ‚àó0 and Y‚àâùêµ‚àó0 then ùëÉ{ùëã,ùëå}=0, i.e.,ùëã‚ÜÆùëå.

Hence ùêµ‚àó0 is a positive recurrent, irreducible, aperiodic, and closed set. According to the properties of the aperiodic, homogeneous Markov chain [39], the sequence {ùë•(ùë°),ùë°=1,2,‚Ä¶,} exists a limiting distribution ùúã(ùëå),

ùëôùëñùëön‚Üí‚àûùëÉ{ùëã(ùëõ)=ùëå|ùëã(0)=ùëã0}={ùúã(ùëå),0,ùëå‚ààùêµ‚àó0ùëúùë°‚Ñéùëíùëüùë§ùëñùë†ùëí.
(42)
Then,

ùëôùëñùëöt‚Üí‚àûùëÉ{ùëã(ùëõ)=ùêµ‚àó0}=1
(43)
So,

ùëôùëñùëöùëõ‚Üí‚àûùëÉ{ùëã(ùëõ)‚à©ùêµ‚àó‚â†‚àÖ}=1
(44)
According to Definition 1, we can obtain that jSO converges to the global optimum in probability.

‚óª
Experiments and comparisons
The performance of the proposed algorithm and the comparison algorithm is evaluated in this section. Firstly, a brief introduction of the CEC2017 benchmark function is shown as follows.

The CEC2017 benchmark test suite contains 30 test functions, ùëì1‚àíùëì2 are unimodal functions, ùëì4‚àíùëì10 are simple multimodal functions, ùëì11‚àíùëì20 are hybrid functions, and ùëì21‚àíùëì30 are composition functions. These functions are classic, representative single-objective continuous optimization functions, which are all parameter optimization functions. They are published by an expert group of the special theme of the annual CEC conference to test the current optimization methods (especially the Meta-heuristic optimization method). The summary of the CEC2017 test function is shown in Table 1. The last column in the table represents the optimal value of each function. ùëì2 has been excluded because it shows unstable behavior especially for higher dimensions. There are 20 basic functions [40] defined to construct the CEC2017 test function. The unimodal functions and simple multimodal functions are obtained by adding rotation and translation operations to the basic functions. The hybrid functions and composition functions are obtained by embedding different basic functions into different subcomponents of variables, where ùëÅùêπ is the number of basic functions.

Table 1 Summary of the CEC2017 test function
Full size table
In Sect. 4.1, the time complexity of the jSO_CMA-ES_LBFGS is analyzed. In Sect. 4.2, the experimental condition and parameters setting are described when the simulation is run. The role of the local search algorithm is tested in Sect. 4.3. The integration effect of different operators is provided in Sect. 4.4. The comparison of jSO_CMA-ES_LBFGS with certain representative algorithms is described in Sect. 4.5. Moreover, owing to limited space, interested readers obtain the experimental results of all algorithms from the online supplemental material.

jSO_CMA-ES_LBFGS time complexity
This subsection deals with the time complexity of the jSO_CMA-ES_LBFGS. The running time obtained by evaluating the benchmark function ùëì18 is compared with the running time of the test program.

The computing time of the test program is denoted as T0. Let us assume that variable T1 presents the time required for evaluating the benchmark function ùëì18 and variable T2 the time of jSO_CMA-ES_LBFGS execution for function ùëì18 within 200,000 evaluations for each dimension. Variable T2ÀÜ is an average of T2 values obtained in five independent runs. Table 2 shows the algorithm complexities relationship with dimension. The computational complexity of the algorithm jSO_CMA-ES_LBFGS is reflected by the measured and calculated variables T0, T1, T2ÀÜ, and (T2ÀÜ‚àíT1)/T0 for each of the observed dimensions ùê∑={10,30,50}. This calculation is independent of the computing system and programming language in which the measured algorithm is implemented. According to Table 2, it is easy to conclude that more computational cost is required with the increasing number of dimensions for the benchmark functions.

Table 2 The computational complexity of the algorithm jSO_CMA-ES_LBFGS (all times are in seconds)
Full size table
Experimental conditions and parameters setting
For a fair comparison among all the algorithms, they are executed using the same maximum number of function evaluations (ùê∏ùêπùë†=ùê∑√ó10000), where the ùê∑ is the size of the dimension. All the algorithms are executed independently 51 times on each test function. The experiments are run in the Windows Server 2012 R2 under the hardware environment of Intel (R) Core (TM) i7-6700 CPU @ 3.40 GHz processor and 8.0 GB of RAM. The proposed algorithm is implemented using the C‚Äâ+‚Äâ‚Äâ+‚Äâprogramming language. It is necessary to point out that a numerical analysis and processing library, ALGLIB (http://www.alglib.net/), is utilized to implement the process of LBFGS. For each comparison algorithm, the values of the control parameter are configured as recommended in the corresponding literature.

The value of the parameters has a significant impact on the performance of the jSO_CMA-ES_LBFGS. There are three crucial parameters: (1) stagnation threshold ùëá; (2) memory size ùêª; (3) the step length ùúé in the jSO_CMA-ES_LBFGS. The Taguchi method of design is adopted to calibrate the value of each parameter in jSO_CMA-ES_LBFGS. In the experiment, the proposed algorithm is calibrated using the 30-dimensional CEC2017 benchmark function [41]. The various values of ùëá, ùêª, and ùúé are listed in Table 3. The parameter combinations and average error values yielded by jSO_CMA-ES_LBFGS are listed in Table 4. According to Table 4, the significance rank of each parameter is listed in Table 5. Meanwhile, the tendency of the parameters is described in Fig. 5.

Table 3 The parameters for different levels
Full size table
Table 4 Parameter combinations
Full size table
Table 5 Response table for means
Full size table
Fig. 5
figure 5
Main effects plot of all parameters

Full size image
From Table 5, it is observed that ùêª is the most significant one among all the parameters, which implies that the memory size ùêª is an important influential factor to jSO_CMA-ES_BFGS. The large ùêª records more search history information. The external storage failure is caused by abnormal ùêª with a too large or too small value. The ùúé ranks the second place, which illustrates that it is also an important factor in jSO_CMA-ES_LBFGS. A small ùúé would cause the population easily to fall into the local optimum. A large ùúé leads the algorithm to search in the global space and wastes a lot of function evaluations, similar to the random search. The stagnation threshold parameter ùëá ranks third place. ùëá is the best combination point of the global search operator and the local search operator to achieve a trade-off between exploration and exploitation.

According to the results of the Taguchi method, the parameters in jSO_CMA-ES_LBFGS are suggested as follows: ùëá=10,ùêª=5,ùúé=0.1.

Selection of local search operators
The two local search algorithms, Solis&Wets algorithm (SW) and the Multi-Trajectory Local Search (Mtsls1) are tested in the paper. Although various adjustments in the parameter settings are combined to solve the problem in this paper, the essences of these comparison algorithms (e.g., the framework, encoding, operating mechanism) are not changed in the implementation process. According to the single factor principle, the parameters of jSO and CMA-ES remain unchanged. The parameter values used by SW and MTSLS1 are shown in Table 6. The experimental results of LBFGS, SW, and MTSLS1 are shown in Tables 7, 8, 9.

Table 6 The parameter values of SW and MTSLS1
Full size table
Table 7 Results of the multiple-problem Wilcoxon‚Äôs test
Full size table
Table 8 The mean error of different local search algorithm combinations on 10 dimensions
Full size table
Table 9 The mean error of different local search algorithm combinations on 30 dimensions
Full size table
The SW algorithm belongs to the estimation of distribution algorithm (EDA), the number of parameters of the SW algorithm is more than that of MTSLS1 and LBFGS. There is no prior knowledge to find the best combination of parameters of the SW algorithm. The Mtsls1 algorithm searches from one dimension to another without considering the dependencies between variables. LBFGS belongs to the iterative gradient decrement algorithm. LBFGS is known for the fast convergence for solving convex optimization problems and achieves higher accuracy with a fewer number of function evaluations.

From Table 7, the LBFGS is significantly better than SW and Mtsls1 on 29 benchmark functions with Œ±=0.1 and Œ±=0.05 for 30 dimensions. Therefore, the LBFGS is employed as a local search operator in the jSO_CMA-ES_LBFGS rather than the SW or MTSLS1.

The effect of ensemble operators
As shown in Figs. 6 and 7. If there is no LBFGS operator in jSO_CMA-ES_LBFGS, jSO_CMA-ES_LBFGS is degraded to jSO_CMA-ES. The diversity of the algorithm in the process of solving is increased effectively by the gray points in Fig. 6 (the solutions generated by CMA-ES). The mean values of jSO, jSO_CMA-ES, and jSO_LBFGS on 30 dimensions and 50 dimensions are showed in Table 10. From Table 11, it is found that jSO_CMA-ES is significantly better than jSO on 29 benchmark functions with Œ±=0.1 for 30 dimensions. Therefore, CMA-ES is embedded in jSO and has at least no side effects on the performance of jSO. According to the literature [42,43,44], CMA-ES has the characteristics of de-randomization and rotational invariance. New search points are sampled by normal distribution as perturbations of the mean (redpoint). The standard CMA-ES belongs to the estimation of the distribution algorithm, which has a strong global search ability and insufficient local searchability. It is not suitable for solving high-dimensional optimization problems.

Fig. 6
figure 6
The operating mechanism of jSO_CMA-ES

Full size image
Fig. 7
figure 7
The operating mechanism of jSO_LBFGS

Full size image
Table 10 The mean values of jSO, jSO_CMA-ES, and jSO_LBFGS
Full size table
Here, CMA-ES only as an agent provides a relatively reliable initial solution for LBFGS. As shown in Table 11, a significant difference between jSO_CMA-ES and jSO with ùõº=0.1 is not observed for 50-dimensional optimization problems, which demonstrates the rationality of the hypothesis proposed in this paper. As shown in Fig. 7. If there is no CMA-ES operator in jSO_CMA-ES_LBFGS, jSO_CMA-ES_LBFGS is degraded to jSO_LBFGS. It makes the search area limited to a locally optimal solution to fall into stagnation. As shown in Table 11, a significant difference between jSO_LBFGS and jSO with Œ±=0.1 is also not observed. Therefore, the disturbance strength of jSO_LBFGS is insufficient. However, as shown in Table 12, jSO_CMA-ES_LBFGS is significantly better than jSO with Œ±=0.1 and Œ±=0.05 for 30 and 50 dimensions.

Table 11 The results of the Wilcoxon‚Äôs test for jSO, jSO_CMA-ES, and jSO_LBFGS
Full size table
Table 12 The results of the Wilcoxon‚Äôs test for jSO_CMA-ES_LBFGS, and jSO
Full size table
The mean plot with a 95% confidence interval for the different operators is shown in Fig. 8. The abscissa represents three different kinds of functions including simple multimodal functions (ùëì4‚àíùëì10), hybrid functions (ùëì11‚àíùëì20), and composition functions (ùëì21‚àíùëì30) [19]. The horizontal axis is the different operators. The vertical axis is the normalized value of 51 independent tests by Eq. (45). To make the effect clear, the values of 51 independent tests were normalized as

Normalized Values=log10(Mean of51 independent tests)
(45)
Fig. 8
figure 8
Mean plot with a 95% confidence interval for the different operators

Full size image
The points in the figure below reflect the excellent performance of the operators, and the horizontal lines on both sides of each point represent the stability of the operators. The results show that each strategy contributes to the jSO_CMA-ES_LBFGS. In particular, the results have a significant improvement compared with the original jSO in hybrid functions and composition functions. Therefore, jSO, CMA-ES, and LBFGS are inseparable and indispensable organic whole, which achieves the effect of "1‚Äâ+‚Äâ1‚Äâ+‚Äâ1‚Äâ>‚Äâ3" instead of "1‚Äâ+‚Äâ1‚Äâ>‚Äâ2".

Comparison of jSO_CMA-ES_LBFGS with certain state-of-the-art algorithms
In this section, the proposed jSO_CMA-ES_LBFGS is compared with eleven state-of-the-art algorithms, including jSO [19], LSHADE_cnEpSin [20], AMECoDEs [45], ELSHADE [46], EBLSHADE [46], EBOwithCMAR [47], LSHADE_SPACMA [26], LSHADE-EpSin [48], CMA-ES [44], EWWO [49], and OLPSO [50]. The jSO, LSHADE_cnEpSin, AMECoDEs, ELSHADE, EBLSHADE, LSHADE_SPACMA, and LSHADE-EpSin are typical variants of DE. Significantly, jSO, LSHADE-cnEpSin, and LSHADE_SPACMA are on the second, third, and fourth place on CEC2017 competition on single objective real-parameter optimization. The EBOwithCMAR is in the first place on CEC2017. The EWWO is an improved water wave optimization algorithm enhanced by CMA-ES. The value of the control parameter of each compared algorithm is set to the value recommended in the original paper. The simulation experiment is carried out to evaluate the performance of the proposed jSO_CMA-ES_LBFGS on the CEC2017 test suite. All algorithms are executed independently 51 times on each test function, and the mean value and standard deviation (std) metrics are calculated.

The parameters of the compared algorithms use the same settings as in their original papers, which are listed in Table 13. For jSO_CMA-ES_LBFGS, the parameters used in these comparison experiments are set experimentally. Detailed parameter analysis about the jSO_CMA-ES_LBFGS is given in Sect. 4.2.

Table 13 Parameter settings
Full size table
Meanwhile, the jSO_CMA-ES_LBFGS and other comparison algorithms are compared on the convergence rate. The convergence plots of the ùëì1, ùëì4, ùëì7, ùëì11, ùëì12, ùëì26, and ùëì28 which include the unimodal, simple multimodal, hybrid, and composition functions are described in Fig. 9. The reason why these functions are selected for analysis is that they are the best reflection of the performance and operating mechanism of jSO_CMA-ES_LBFGS on all test functions. The mean value of  jSO_CMA-ES_LBFGS and jSO are listed in Table 14.

Fig. 9
figure 9
Convergence plots of jSO_CMA-ES_LBFGS and other compared algorithms

Full size image
Table 14 The mean value of jSO_CMA-ES_LBFGS and jSO
Full size table
As shown in Fig. 9, although the proposed algorithm does not converge at the fastest speed, it maintains a continuous downward trend and obtains a higher precision solution than that of the comparison algorithm, which is attributed to the role of perturbation operator and local search operator. In addition, a distinct separation between jSO and jSO_CMA-ES_LBFGS on the convergence rate for the late stage of population evolution is obvious from Fig. 9, which implicitly indicates that the operating mechanism of the proposed algorithm is effective.

The box plots for ùëì1, ùëì4, ùëì11, and ùëì28 are shown in Fig. 10 to further illustrate the stability and performance of the proposed algorithm. Box plots use the data of five statistics: minimum, first quartile, median, and the third quartile and the maximum value to describe a method of data, it can also roughly see whether data have symmetry, and the distribution of the dispersed degree of information, such as special, can be used for the comparison of several samples. The sides of the two sides of boxes will correspond to the top and bottom quartile of the data batch. The red line in the boxes is the position of the median value. An extension line is created between the top quartile and the maximum, which is called "whicker". Similarly, build an extension line between the bottom quartile and the minimum. The points outside the extension line represent outliers. Therefore, the narrower the box and the fewer outliers mean that the data tend to be stable. On the other hand, the ordinate of the box plots represents the normalized error value, so the closer the box is to the bottom, the better the performance of the algorithm for the considered minimization problems. The stability of the algorithm is indicated from the box plots of ùëì1(ùê∑=30) and ùëì28(ùê∑=50) from Fig. 9. Although the narrowest box is not shown from the two box plots of ùëì4(ùê∑=30) and ùëì11(ùê∑=30), the box position of the proposed algorithm is the closest to the bottom, so the performance of the proposed algorithm is better than other comparison algorithms.

Fig. 10
figure 10
Box plots of jSO_CMA-ES_LBFGS and other compared algorithms on some typical benchmark functions

Full size image
To testify the performance of the jSO_CMA-ES_LBFGS, Wilcoxon‚Äôs test [51] is performed to check the behaviors of the six algorithms which are introduced as compared algorithms. The statistical analysis results are summarized in Table 15, considering jSO_CMA-ES_LBFGS as a control algorithm. The "yes" in bold means that jSO_CMA-ES_LBFGS is significantly better than the another algorithm. From Table 15, it is found that jSO_CMA-ES_LBFGS is significantly better than jSO on 29 benchmark functions with ùõº=0.1 for 30, 50, 100 dimensions and significantly better than AMECoDEs with Œ±=0.05 and Œ±=0.1 for 30, 50, and 100 dimensions. The jSO_CMA-ES_LBFGS is significantly better than ELSHADE with ùõº=0.1 for 50 and 100 dimensions, and significantly better than EBLSHADE with ùõº=0.1 for 10 and 100 dimensions. Although the significant differences are not observed between jSO_CMA-ES_LBFGS and the comparison algorithms in a certain case, the value of ùëÖ‚àí is better than the value of ùëÖ+. Namely, the jSO_CMA-ES_LBFGS obtains better solutions than other comparison algorithms in the above cases.

Table 15 Results of the Wilcoxon‚Äôs test for jSO_CMA-ES_LBFGS and other compared algorithms
Full size table
Table 16 Results achieved by Friedman Test
Full size table
Friedman‚Äôs test [51] is carried out to further test the significant differences between jSO_CMA-ES_LBFGS and the eleven competitors. The results are listed in Table 16. As shown in Fig. 11, there is a significant difference between jSO_CMA-ES_LBFGS and AMECoDEs with Œ±=0.1 and Œ±=0.05 for 30 dimensions. As shown in Fig. 12, a significant difference among jSO_CMA-ES_LBFGS, AMECoDEs, and ELSHADE with Œ±‚Äâ=‚Äâ0.1 and Œ±‚Äâ=‚Äâ0.05 is observed on 50 dimensions. Although there is no significant difference between jSO_CMA-ES_LBFGS and other compared algorithms in other cases, the rank of jSO_CMA-ES_LBFGS is the smallest in all comparison algorithms.

Fig. 11
figure 11
Rankings for ùê∑=30

Full size image
Fig. 12
figure 12
Rankings for ùê∑=50

Full size image
In summary, the results of the statistical analysis imply that the performance of the proposed jSO_CMA-ES_LBFGS is significantly better than that of the other comparison algorithms for test problems with 30 and 50 dimensions, whereas with the increase in problem dimensions, the performance of jSO_CMA-ES_LBFGS and the comparison algorithms decreases. On the one hand, the growing functional dimensions make the number of decision variables expand dramatically. On the other hand, in the CEC2017 benchmark test suite, the number of evaluations specified for functions with different dimensions is limited. Especially in high-dimensional functions, the algorithm cannot effectively find an approximate optimal solution within the limited number of evaluations. With the increase in function dimensions, the complexity of the problems to be solved increases sharply, which affects the performance of the algorithm.

Application to the engineering problems
The proposed algorithm is tested on two important engineering problems including continuous and discrete decision space. In addition, the performance of the jSO_CMA-ES_LBFGS is compared with canonical methods to analysis the advantages of the jSO_CMA-ES_LBFGS in addressing engineering optimization problems. For each engineering problem, the algorithms are run independently 31 times.

Gear train engineering design problem
The gear train engineering design problem is utilized to verify the performance of the jSO_CMA-ES_LBFGS in addressing engineering problems. Gear train design aims to minimize the gear ration of the gear train as shown in Fig. 13. There are four types of parameters in the gear train engineering design problem. The details of the mathematical model about this problem are described as follows [52].

Fig. 13
figure 13
Geat train design problem

Full size image
Decision variable:

ùëî‚Éó =[ùëî1,ùëî2,ùëî3,ùëî4]=[ùëÄùê¥,ùëÄùêµ,ùëÄùê∂,ùëÄùê∑]
(46)
Objective:

ùëì(ùëî‚Éó )=(16.931‚àíùëî2ùëî3ùëî1ùëî4)2
(47)
Subject to:

12‚â§ùëî1,ùëî2,ùëî3,ùëî4‚â§60
(48)
The jSO_CMA-ES_LBFGS is run in 1000 fitness evaluations. The obtained statistical results for gear train engineering design problem are compared in Table 17. More details about Sandgren, GeneAS, and ABC are described in [52]. It is observed from Table 17 that the jSO_CMA-ES_LBFGS outperforms other algorithms.

Table 17 The results of five algorithms
Full size table
The blocking flow shop scheduling problem
The blocking flow shop scheduling problem (BFSP) [53], which is one of the most important scheduling types, is widespread in modern industries. In the BFSP, there are no buffers between machines, and the job remains in the current machine until the next machine is available for processing. With the increase of the scheduling scale, the difficulty and computation time of solving the problem increased exponentially. Existing experiments and literature have shown that BFSP with more than two machines is a typical NP-hard problem [53].

The definitions of the variables and parameters mentioned in this section are recorded in Table 18. The details of the mathematical model of BFSP are described as follows.

Table 18 The definitions of the notations
Full size table
Decision variable:

ùë•ùëñ,ùëò‚àà{0,1},(ùëñ,ùëò=1,2,‚Ä¶,ùëõ)
(49)
Objective:

minùê∂ùëöùëéùë•=maxùëò=1,2,‚Ä¶,ùëõ(ùê∑ùëò,ùëö)
(50)
Subject to:

‚àëùëò=1ùëõùë•ùëñ,ùëò=1,ùëñ‚àà{1,2,‚Ä¶,ùëõ}
(51)
‚àëùëñ=1ùëõùë•ùëñ,ùëò=1,ùëò‚àà{1,2,‚Ä¶,ùëõ}
(52)
ùê∑1,0‚â•0
(53)
ùê∑ùëò,0‚â•ùê∑ùëò‚àí1,1,(ùëò=2,3,‚Ä¶,ùëõ)
(54)
ùê∑ùëò,ùëó‚â•ùê∑ùëò,ùëó‚àí1+‚àëùëñ=1ùëõùë•ùëñ,ùëò‚ãÖùëÉùëñ,ùëó,(ùëò=1,2,‚Ä¶,ùëõ),(ùëó=1,2,‚Ä¶,ùëö)
(55)
ùê∑ùëò,ùëó‚â•ùê∑ùëò‚àí1,ùëó+1,(ùëò=2,3,‚Ä¶,ùëõ),(ùëó=1,2,‚Ä¶,ùëö‚àí1)
(56)
Mathematical model of BFSP
In this study, the objective is to minimize the makespan criterion. The makespan of the schedule ùúã is ùê∂ùëöùëéùë•=ùê∑ùëõ,ùëö. The computation complexity of this task is ùëÇ(ùëõ‚àóùëö).

[ùëÉùëñ,ùëó]3√ó3=‚é°‚é£‚é¢‚é¢‚é¢ùëÉ1,1ùëÉ2,1ùëÉ3,1ùëÉ1,2ùëÉ2,2ùëÉ3,2ùëÉ1,3ùëÉ2,3ùëÉ3,3‚é§‚é¶‚é•‚é•‚é•=‚é°‚é£‚é¢‚é¢312231123‚é§‚é¶‚é•‚é•
(57)
Here, an example is presented to show how the decision variables reflect the solution by considering a problem with three jobs (ùëõ=3) and three machines (ùëö=3). The processing times are given in Eq. (57). The scheduling Gantt is shown in Fig. 14. The makespan of schedule sets ùúã1={ùêΩ1,ùêΩ2,ùêΩ3} in BFSP is 13.

Fig. 14
figure 14
Gantt chart for a solution to the example problem

Full size image
Experimental settings and analysis
The traditional jSO algorithm and its variants cannot be directly utilized to solve the combinational optimization problem with discrete characteristics. Therefore, the coding scheme and decoding rule are utilized to help the algorithms work directly in the discrete domain by representing individuals as discrete job permutations. In this paper, the LOV rule is utilized to represented individuals as discrete job permutations. More details about LOV rule can be found in [54]. The average relative percentage deviation (ARPD) index is utilized to measure the results, and the calculate method is shown in Eq. (58), where R is the number of runs and ùê∂ùëñ is the solution generated by a specific algorithm in the ith experiment for a given instance. ùê∂ùëúùëùùë° is the minimum makespan found by all algorithms. The algorithm with minimum ARPD outperforms other algorithms.

ùê¥ùëÖùëÉùê∑=1ùëÖ‚ãÖ‚àëùëñ=1ùëÖùê∂ùëñ‚àíùê∂ùëúùëùùë°ùê∂ùëúùëùùë°‚ãÖ100%
(58)
The well-known standard benchmark set of Taillard [55] is used for evaluating the performance of jSO_CMA-ES_LBFGS. This benchmark is composed of 120 different problem instances. The instances are categorized into 12 subsets of different combinations of n (number of jobs) and m (number of machines). These combinations range from 20 jobs and 5 machines up to 500 jobs and 20 machines. The results of jSO, OLPSO, EWWO, CMA-ES, EBLSHADE, LSHADE-cnEpsin, and jSO_CMA-ES_LBFGS are shown in Table 19. Each algorithm is run in 10m‚ãÖn milliseconds (ms). The parameters of the comparison algorithms are consistent with the previous ones.

Table 19 The ARPD of all compared algorithms
Full size table
The number of jobs and machines have a significant impact on all the compared algorithms from Table 19. The experiment results show the excellent performance of the jSO_CMA-ES_LBFGS for solving the BFSP. The effectiveness of jSO_CMA-ES_LBFGS compared with jSO is that the local search capability of proposed algorithm is enhanced via LBFGS. On the other hand, the LBFGS is embedded in CMA-ES to perturb the optimal candidates in the solution space when the population is falling into stagnation. Therefore, jSO_CMA-ES_LBFGS is a competitive algorithm for solving BFSP.

Conclusions and future research
The paper presented a hybrid algorithm (jSO_CMA-ES_LBFGS) based on DE, CMA-ES, and LBFGS to solve the continuous optimization problems. The various experimental results imply the following conclusions: (1) LBFGS, as a local search operator, plays an important role in the proposed algorithm to enhance the local search capability of DE. (2) In the jSO_CMA-ES_LBFGS, a relatively reliable initial solution for the local search operator is generated by the CMA-ES, which is activated to perturb the optimal candidates in the solution space when the population is falling into stagnation. The LBFGS is embedded in CMA-ES as the local search strategy to obtain the potential local optimal solutions. (3) The search performance of jSO_CMA-ES_LBFGS is better than that of the other comparison algorithms on a certain confidence level. Further, jSO_CMA-ES_LBFGS is an effective algorithm to solve the continued optimization problems including the CEC2017 benchmarks and the gear train engineering design problem. On the other hand, the proposed jSO_CMA-ES_LBFGS is applied to solve BFSP effectively. The results for the benchmark set of Taillard demonstrate that the proposed algorithm is with good performance.

In future work, the search performance of jSO_CMA-ES_LBFGS is further improved, and the improved jSO_CMA-ES_LBFGS is applied to solve certain complex scheduling problems, e.g., the flow shop scheduling problems, the job shop scheduling problems, the lot-streaming flow shop scheduling problems. Moreover, DE is combined with other meta-heuristics for the multi-objective scheduling problems.

Differential Evolution (DE)
Covariance Matrix Adaptation Evolutionary Strategy (CMA-ES)
Limited-Memory Broyden‚ÄìFletcher‚ÄìGoldfarb‚ÄìShanno (LBFGS)
Cooperative coevolution
Numerical optimization