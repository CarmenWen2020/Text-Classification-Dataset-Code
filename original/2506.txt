Learning using privileged information (LUPI) paradigm, which pioneered teacher–student interaction mechanism, makes the learning models use additional information in the training stage. This paper is the first to propose an incremental learning algorithm with LUPI paradigm for random vector functional-link (RVFL) networks, named IRVFL+ . This novel algorithm can leverage privileged information into incremental RVFL (IRVFL) networks in the training stage, which provides a new constructive method to train IRVFL networks. In order to solve two scenarios that require fast speed of modeling but low-accuracy requirements and high accuracy but slow speed of modeling requirements, two algorithmic implementations of IRVFL+ , respectively, based on local update and global update strategies are presented for data classification and regression problems in this paper. Specifically, the first algorithm, named IRVFL-I+ , calculates the output weights of the newly added hidden nodes, while the input and output parameters of all the existing hidden nodes are fixed. In contrast to IRVFL-I+ , the second one named IRVFL-II + can update all the parameters of all the existing hidden nodes and newly added hidden nodes. Moreover, the convergences of two implementations have been studied in this paper. Finally, experimental results indicate that IRVFL+ indeed performs favorably.

Introduction
As an active borderline cross-science, neural networks have become a hot spot in related majors. It has been around for many decades and the history can be traced back to the 1940s. In 1943, McCulloch and Pitts proposed a formal model of neurons [1], which became the pioneering work of neural networks. Since then, the theoretical study of neural networks models has been initiated. Although the development of neural networks is not all smooth sailing, it has finally made great progress in signal processing, pattern recognition, image processing, nonlinear system modeling and control, big data processing, knowledge processing, etc.

So far, gradient algorithms [2] are the most widely used in neural network learnings. However, the traditional gradient algorithms have some difficulties to solve, such as slow convergence, easy to fall into local minimum, strong dependence on the setting of initial parameters [3]. Especially for deep neural networks and recurrent neural networks, gradient algorithms have the problems of gradient disappearance and gradient explosion, which makes it difficult for neural networks to exert the powerful learning ability [4]. On the other hand, through the anatomical reconstruction of the brain, people found that random connections exist in some brain regions and play an important role in the process of neural representation [5]. Based on this biological basis, some scholars have proposed randomized neural networks (RNNs), which calculate the networks weights connected to the output layer nodes by solving simple linear regression problems, while other networks weights and thresholds are randomly generated in a specific interval based on a given probability distribution [6]. This type of algorithm does not need to iterate repeatedly, which overcomes the bottleneck problem encountered by traditional gradient algorithms to a certain extent.

RNNs were first proposed in the 1990s. In 1994, Pao et al. [7] presented random vector functional-link (RVFL) networks, which added a direct link between the input and the output layers in the single-layer feedforward neural networks. The weights and biases between the input nodes and enhancement nodes in RVFL networks are randomly generated, and the direct link helps to keep the complexity of the model low [8,9,10]. In [11] Igelnik and Pao presented a theoretical justification for RVFL networks that showed RVFL network was a universal approximator with continuous functions on hounded finite-dimensional sets and closed-form solution. Henceforth, many scholars have proposed derivatives of RVFL networks, including quantum version of RVFL networks [12], recurrent RVFL networks [13], orthogonal polynomial expanded RVFL networks [14], exponentially expanded robust RVFL networks [15], etc. Today, RVFL networks have become one of the most popular single-layer feedforward neural networks due to its advantages of training speed, generalization performance and universal approximation ability.

Currently, a novel version of RVFL networks named RVFL+ was proposed [16]. RVFL+ incorporates learning using privileged information (LUPI) paradigm that can leverage additional source of information, which offers an alternative way to train the RVFL networks. The LUPI paradigm was first proposed by Vapnik and Vashist, whose motivation is to improve generalization performance of learning models [17]. They provided a support vector machine algorithm with privileged information termed SVM+ . LUPI paradigm fastens the learning attention on some elements of human teaching. It considers that a teacher who can provide students with explanations plays a significant role in human learning. In contrast to the traditional learning paradigm, LUPI paradigm can provide a set of additional information for the training data during the training process. That is to say, the privileged information is available in the training stage but unavailable in the test stage. By employing additional information, LUPI paradigm solves an open problem of how the data modalities being only available during training time help the learning model achieve better prediction. The new learning paradigm is incorporated into other algorithms, such as weighted SVM [18], metric learning [19, 20], learning to rank [21], multi-view transfer learning [22] and self-paced learning [23]. In addition, for solving practical problems, LUPI paradigm has been applied to visual tracking object [24], photoaesthetic assessment [25], pedestrian detection [26], etc. RVFL+ uses this idea to introduce the regularization term and correction function of privilege information into the training objective function, which improves the generalization of RVFL networks.

However, RVFL+ still has the limitation of RVFL networks that is the optimal network architecture is difficult to build. The number of hidden nodes plays a critical role in determining the learning performance of the network [27]. It is obvious that neural networks with too many nodes will easy to cause time-consuming training and overfitting problems, but too little will cause underfitting problem [28]. In other words, it is feasible only when the network architecture is chosen correctly. Therefore, algorithms that can select an appropriate network architecture automatically are highly desirable. There is no generally accepted theory concerning how to select the optimal number of hidden layer nodes. So far, most proposed methods to determine the number of hidden layer nodes only consider the case of any number of training samples and the most unfavorable situation, which is difficult to meet in general engineering practice. In fact, the number of hidden layer nodes obtained by various calculation formulas sometimes differs several times or even hundreds of times.

The most basic principle for determining the number of hidden layer nodes is to take as compact structure as possible under the premise of meeting accuracy requirements. In general, there are two methods to tackle this problem: pruning algorithms [29] and constructive algorithms [30,31,32]. The former first uses a larger than needed network to train and then remove some hidden layer nodes that are no longer effectively used. The latter starts with a small network architecture and then grows additional hidden units and weights until finds an acceptable solution. Comparing with pruning algorithms, constructive algorithms have more advantages [33]. First, the constructive algorithms directly define a small initial network, but the pruning algorithms do not know how large the initial network is. Second, constructive algorithms always search for small solutions, while pruning algorithms spend most of their training time on networks larger than the optimal solution, which is more time-consuming. Moreover, pruning solutions are largely dependent on the initial networks, but building a high-quality initial network is time-consuming and difficult in general. On the contrary, constructive algorithms usually grow additional hidden nodes and easily control the quality of nodes. Therefore, constructive algorithms are likely to find smaller network solutions than pruning algorithms. In this paper, the authors will mainly focus on constructive algorithms. Incremental RVFL (IRVFL) networks algorithm approximates the output by adding hidden nodes to the network one by one. An error tolerance can be predefined in an IRVFL network, which will terminate training when the training error meets the condition. This constructive method is able to obtain a more compact model while ensuring that the desired effect can be achieved. The authors note that incremental learning algorithms could solve the problem of selecting an optimal number of hidden nodes in RVFL networks.

This paper introduces the LUPI paradigm into IRVFL networks called IRVFL+ , which provides a constructive randomized approach with LUPI paradigm for flat networks. IRVFL+ can make use of additional information into constructive process to obtain a network model. The main contributions of this paper are summarized as follows.

Different from other advanced neural networks with LUPI paradigm that only consider the fixed network structures, the proposed IRVFL+ is an incremental learning method, which could solve the problem of constructing an appropriate network architecture.

This paper develops two algorithmic implementations with local updating and global updating strategies. Concretely, the first one just calculates the output weights when going on new grown (iteration), while the input and output parameters of all the existing hidden nodes are fixed; the second one will update all the parameters of all the existing hidden nodes and newly added nodes.

The convergence of two algorithmic implementations has been proved in this paper, which provides a strong theoretical support.

The remainder of this paper is organized as follows: The related work will be briefly introduced in Sect. 2. Section 3 details IRVFL+ , consisting of theoretical analysis, algorithmic description and implementations. The authors have carried out several sets of experiments to test the validity of IRVFL+ in Sect. 4, and Sect. 5 draws our concluding remarks.

Related work
Random vector functional-link networks
The architecture of a RVFL network is shown in Fig. 1. Given a set of labeled data {(xi,yi) | xi∈Rn, i =1, …, N}, a RVFL network with P enhancement nodes (hidden nodes) can be formulated as

𝐻𝛽=𝑌
(1)
𝐻=[𝐻1𝐻2]
𝐻1=⎡⎣⎢⎢⎢𝑥11⋮𝑥𝑁1⋯⋱⋯𝑥1𝑛⋮𝑥𝑁𝑛⎤⎦⎥⎥⎥
𝐻2=⎡⎣⎢⎢⎢𝐺(⟨𝜔1,𝑥1⟩+𝑏1)⋮𝐺(⟨𝜔1,𝑥𝑁⟩+𝑏1)⋯⋱⋯𝐺(⟨𝜔𝑃,𝑥1⟩+𝑏𝑃)⋮𝐺(⟨𝜔𝑃,𝑥𝑁⟩+𝑏𝑃)⎤⎦⎥⎥⎥
(2)
𝛽=⎡⎣⎢⎢⎢𝛽T1⋮𝛽T𝑛+𝑃⎤⎦⎥⎥⎥=⎡⎣⎢⎢⎢𝛽1,1⋮𝛽𝑛+𝑃,1⋯⋱⋯𝛽1,𝑚⋮𝛽𝑛+𝑃,𝑚⎤⎦⎥⎥⎥
(3)
where 𝜔j and bj (j = 1, 2, …, P) are the weights and bias between the input layer and the hidden nodes, ⟨𝜔j, xi⟩ denotes the inner product of vectors 𝜔j and xi, and G(·) is a nonlinear activation function.

Fig. 1
figure 1
Architecture of RVFL networks

Full size image
From (1), we can easily calculate the output weights by the Moore–Penrose pseudo-inverse or the ridge regression as

𝛽=𝐻†𝑌
(4)
𝛽=(𝐻T𝐻+𝐼𝐶)−1𝐻T𝑌
(5)
where † is the Moore–Penrose pseudo-inverse, I is an identity matrix, and C is a trading-off parameter.

Random vector functional-link networks with privileged information
The LUPI paradigm can be described as follows: Given a set of triplets (𝑥1, 𝑥̃ 1, 𝑦1), …, (𝑥𝑁, 𝑥̃ 𝑁, 𝑦𝑁), 𝑥̃ 𝑖∈𝑋̃ , 𝑥𝑖∈𝑋 generated according to a fixed but unknown probability measure P(x, 𝑥̃ , y) finds among a given set of functions f(x, 𝛼),𝛼∈Λ, the function y= f(x, 𝛼∼) that guarantees the smallest probability of incorrect classification or regression. Generally speaking, the additional information x∼∈X∼ belongs to the space X∼ which is different from the space X. In other words, this is a new learning paradigm that the additional information is available at the training stage, but it is not available for the test set.

Given a set of additional privileged information {𝑥∼i∈Rd, i = 1, …, N} in the training phase, the training data become {(xi,x∼i,yi) |xi∈Rn,𝑥∼i∈Rd,yi∈Rm, i = 1, …, N}. In the new training dataset, x∈X is in the original feature space and x∼∈X∼ belongs to a new privileged feature space X∼ that is different fromX.

Then the RVFL+ can be written as

min𝛽,𝛽̃ ,𝜁12‖𝛽‖22+𝛾2‖‖𝛽̃ ‖‖22+𝐶𝜁𝑖(𝛽̃ ,𝐻̃ )
𝑠.𝑡.𝐻𝛽=𝑦𝑖−𝜁𝑖(𝛽̃ ,𝐻̃ )
(6)
where γ is a regularization coefficient. H and H∼ are enhanced layer output matrices corresponding to the original feature xi and privileged feature x∼i. 𝜍i(𝛽∼, H∼) is the correcting function (or slack function) in the privileged feature space, and 𝛽∼ is an output weight matrix for the correcting function. Also, the correcting function can be written as

𝜁𝑖(𝛽̃ ,𝐻̃ )=𝐻̃ 𝛽̃ 
(7)
In the light of (6) and (7), the RVFL+ can be rewritten as

min𝛽,𝛽̃ ,𝜁12‖𝛽‖22+𝛾2‖‖𝛽̃ ‖‖22+𝐶𝐻̃ 𝛽̃ 
𝑠.𝑡.𝐻𝛽=𝑦𝑖−𝐻̃ 𝛽̃ 
(8)
The output weight matrix β can be calculated by

𝛽=𝐻T(𝐻𝐻T+1𝛾𝐻̃ 𝐻̃ T+𝐼𝐶)−1(𝑌−𝐻̃ 𝐻̃ T𝐶𝑙𝛾)
(9)
where 𝑙T=⎡⎣⎢⎢⎢1⋮0⋯⋱⋯0⋮1⋯⋱⋯0⋮0⎤⎦⎥⎥⎥𝑚×𝑁 is an identity matrix. Consequently, the output function of the RVFL+ can be defined as

𝑓(𝑥)=𝐻𝛽=𝐻𝐻T(𝐻𝐻T+1𝛾𝐻̃ 𝐻̃ T+𝐼𝐶)−1(𝑌−𝐻̃ 𝐻̃ T𝐶𝑙𝛾)
(10)
Incremental random vector functional-link networks with privileged information
Algorithm description
It is obvious that existing neural network algorithms with LUPI paradigm are difficult to determine the size of the network structures. To tackle this problem, this paper proposes an incremental learning algorithm with LUPI paradigm to build an IRVFL network in constructive way. The proposed learning algorithm is named as IRVFL+, and its learning process is shown in Fig. 2. In IRVFL+ , the definitions ofx, x∼ and y are same as RVFL+ , and the privileged information x∼ is only used in the training stage. Usually, IRVFL networks start with the direct link part and then gradually increase the hidden nodes until an acceptable performance is met. The initial residual error 𝑒0=𝑓−𝑓0, where f0=𝐻0𝛽0, and grown residual error eL=f−fL=f−(fL - 1+𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿)=eL - 1−(𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿) in the Lth (L = 1,2, …, Lmax) grown (where βL= [𝛽𝑛+𝐿,1, …, 𝛽𝑛+𝐿,𝑚] and 𝛽̃ L= [𝛽̃ 𝑛+𝐿,1, …, 𝛽̃ 𝑛+𝐿,𝑚] are the output weight vectors of newly added hidden nodes corresponding to the original feature x and privileged featurex∼, respectively, in the Lth grown. The hidden layer output vectors.

Fig. 2
figure 2
Architecture of IRVFL+ networks

Full size image
𝐻𝐿=⎡⎣⎢⎢⎢𝐺(⟨𝜔𝐿,𝑥1⟩+𝑏𝐿)⋮𝐺(⟨𝜔𝐿,𝑥𝑁⟩+𝑏𝐿)⎤⎦⎥⎥⎥ and 𝐻̃ 𝐿=⎡⎣⎢⎢⎢𝐺(⟨𝜔̃ 𝐿,𝑥̃ 1⟩+𝑏̃ 𝐿)⋮𝐺(⟨𝜔̃ 𝐿,𝑥̃ 𝑁⟩+𝑏̃ 𝐿)⎤⎦⎥⎥⎥.

are corresponding to the original feature and privileged feature after the Lth grown).

How to obtain the output weights is a crucial part of the constructive process. For two scenarios that require fast-speed but low-accuracy requirements and high-accuracy but low-speed requirements, this paper presents two algorithm implementations based on local update and global update strategies, namely IRVFL-I+ and IRVFL-II + . The details are shown in the following sections.

IRVFL-I+ : learning with local update strategy
IRVFL-I+ is a speed priority algorithm, which only updates the output weights when going on a new grown while keeping the previously constructed structure and parameters fixed. This method of updating parameters is suitable for scenarios that require high model construction speed but low-accuracy requirements. The training target function of IRVFL-I+ can be formulated as

min𝛽𝐿,𝛽̃ 𝐿𝑓=12[𝛽T𝛽T𝐿][𝛽𝛽𝐿]+𝛾2[𝛽̃ T𝛽̃ T𝐿][𝛽̃ 𝛽̃ 𝐿]+𝐶[𝐻̃ 𝐻̃ 𝐿][𝛽̃ 𝛽̃ 𝐿]+12‖𝑒𝐿‖2=12‖𝛽‖2+12‖𝛽𝐿‖2+𝛾2‖‖𝛽̃ ‖‖2+𝛾2‖‖𝛽̃ 𝐿‖‖2+𝐶𝐻̃ 𝛽̃ +𝐶𝐻̃ 𝐿𝛽̃ 𝐿+12‖𝑒𝐿‖2
𝑠.𝑡.𝐻𝛽+𝐻𝐿𝛽𝐿=𝑌−(𝐻̃ 𝛽̃ +𝐻̃ 𝐿𝛽̃ 𝐿)
(11)
where.

𝛽=[𝛽0,1⋯𝛽0,𝑛𝛽𝑛+1⋯𝛽𝑛+𝐿−1]T,

𝛽̃ =[𝛽̃ 0,1⋯𝛽̃ 0,𝑛𝛽̃ 𝑛+1⋯𝛽̃ 𝑛+𝐿−1]T,

𝐻=⎡⎣⎢⎢⎢𝑥11⋮𝑥𝑁1⋯⋱⋯𝑥1𝑛⋮𝑥𝑁𝑛𝐺(⟨𝜔1,𝑥1⟩+𝑏1)⋮𝐺(⟨𝜔1,𝑥𝑁⟩+𝑏1)⋯⋱⋯𝐺(⟨𝜔𝐿−1,𝑥1⟩+𝑏𝐿−1)⋮𝐺(⟨𝜔𝐿−1,𝑥𝑁⟩+𝑏𝐿−1)⎤⎦⎥⎥⎥
and

𝐻̃ =⎡⎣⎢⎢⎢𝑥̃ 11⋮𝑥̃ 𝑁1⋯⋱⋯𝑥̃ 1𝑛⋮𝑥̃ 𝑁𝑛𝐺(⟨𝜔̃ 1,𝑥̃ 1⟩+𝑏̃ 1)⋮𝐺(⟨𝜔̃ 1,𝑥̃ 𝑁⟩+𝑏̃ 1)⋯⋱⋯𝐺(⟨𝜔̃ 𝐿−1,𝑥̃ 1⟩+𝑏̃ 𝐿−1)⋮𝐺(⟨𝜔̃ 𝐿−1,𝑥̃ 𝑁⟩+𝑏̃ 𝐿−1)⎤⎦⎥⎥⎥
are constructed and fixed before the L-th grown. C𝐻̃ 𝛽∼ and C𝐻̃ 𝐿𝛽∼𝐿 are slack functions (or correction functions), and γ is a regularization coefficient.

Taking the partial derivative of the target function with respect to 𝛽𝐿 and 𝛽∼𝐿, we have

∂𝑓∂𝛽𝐿=𝛽𝐿+𝐻T𝐿(𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿−𝑒𝐿−1)=0
(12)
∂𝑓∂𝛽̃ 𝐿=𝛾𝛽̃ 𝐿+𝐻̃ T𝐿(𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿−𝑒𝐿−1)+𝐶𝐻̃ T𝐿𝑙=0
(13)
Combining (12) and (13), the output weights can be calculated as

𝛽𝐿=((𝛾+𝐻̃ T𝐿𝐻̃ 𝐿)𝐻T𝐿−𝐻T𝐿𝐻̃ 𝐿𝐻̃ T𝐿)𝑒𝐿−1+𝐶𝐻T𝐿𝐻̃ 𝐿𝐻̃ T𝐿𝑙(1+𝐻T𝐿𝐻𝐿)(𝛾+𝐻̃ T𝐿𝐻̃ 𝐿)−𝐻T𝐿𝐻̃ 𝐿𝐻̃ T𝐿𝐻𝐿
(14)
𝛽̃ 𝐿=(𝐻̃ T𝐿𝐻𝐿𝐻T𝐿−(1+𝐻T𝐿𝐻𝐿)𝐻̃ T𝐿)𝑒𝐿−1+𝐶(1+𝐻T𝐿𝐻𝐿)𝐻̃ T𝐿𝑙𝐻̃ T𝐿𝐻𝐿𝐻T𝐿𝐻̃ 𝐿−(1+𝐻T𝐿𝐻𝐿)(𝛾+𝐻̃ T𝐿𝐻̃ 𝐿)
(15)
where 𝑙T=⎡⎣⎢⎢⎢1⋮0⋯⋱⋯0⋮1⋯⋱⋯0⋮0⎤⎦⎥⎥⎥𝑚×𝑁 is an identity matrix. Furthermore, we can obtain the output function ftest(z)=H(z)𝛽 in the test stage when using the test data z.

IRVFL-II + : learning with global update strategy
IRVFL-II + is a performance priority algorithm that would update all input and output parameters when a new round of grown is coming in the training stage. This method of updating parameters is suitable for scenarios that require high model accuracy but low construction speed. The training target function of IRVFL-II + can be formulated as

min𝛽,𝛽̃ 𝑡=12‖𝛽‖2+𝛾2‖‖𝛽̃ ‖‖2+𝐶𝐻̃ 𝛽̃ 
𝑠.𝑡.𝐻𝛽=𝑌−𝐻̃ 𝛽̃ 
(16)
The output weights can be easily calculated according to [16]

𝛽=𝐻T(𝐻𝐻T+1𝛾𝐻̃ 𝐻̃ T+𝐼𝐶)−1(𝑌−𝐻̃ 𝐻̃ T𝐶𝑙𝛾)
(17)
𝛽̃ =1𝛾(𝐻̃ T(𝐻𝐻T+1𝛾𝐻̃ 𝐻̃ T+𝐼𝐶)−1(𝑌−𝐻̃ 𝐻̃ T𝐶𝑙𝛾)−𝐻̃ T𝐶𝑙)
(18)
Convergence analysis
For ease of reading and calculation, we simplify the target function of IRVFL-I+ as

minΔ𝛽𝐿𝑓=12Δ𝛽T𝐴Δ𝛽+12Δ𝛽T𝐿𝐴Δ𝛽𝐿+Δ𝐻𝐿𝐵Δ𝛽𝐿+12(Δ𝐻𝐿Δ𝛽𝐿−𝑒𝐿−1)T(Δ𝐻𝐿Δ𝛽𝐿−𝑒𝐿−1)
(19)
where Δ𝛽=[𝛽𝛽̃ ], Δ𝛽𝐿=[𝛽𝐿𝛽̃ 𝐿], 𝐴=[100𝛾], 𝐵=[000𝐶] and Δ𝐻𝐿=[𝐻𝐿𝐻̃ 𝐿].

In order to verify that the simplified equation is consistent with the original equation, take the derivative of (19) with respect to Δ𝛽𝐿, we have

∂𝑓∂Δ𝛽𝐿=𝐴Δ𝛽𝐿+𝐵Δ𝐻̃ T𝐿𝑙+Δ𝐻T𝐿(Δ𝐻𝐿Δ𝛽𝐿−𝑒𝐿−1)=0
(20)
Converting (20) to another form, we have

[𝛽𝐿𝛾𝛽̃ 𝐿]+[𝐻T𝐿(𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿−𝑒𝐿−1)𝐻̃ T𝐿(𝐻𝐿𝛽𝐿+𝐻̃ 𝐿𝛽̃ 𝐿−𝑒𝐿−1)+𝐶𝐻̃ T𝐿]=[00]
(21)
Obviously (21) is equal to (12) and (13). Therefore, we can obtain the output weights as

Δ𝛽𝐿=(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)
(22)
‖𝑒𝐿‖2−‖‖𝑒𝐿−1‖‖2=‖‖𝑒𝐿−1−Δ𝐻𝐿Δ𝛽𝐿‖‖2−‖‖𝑒𝐿−1‖‖2=⟨Δ𝐻𝐿Δ𝛽𝐿,Δ𝐻𝐿Δ𝛽𝐿⟩−2⟨𝑒𝐿−1,Δ𝐻𝐿Δ𝛽𝐿⟩=(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)T((𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†)T×(Δ𝐻T𝐿Δ𝐻𝐿)T(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)−2𝑒T𝐿−1Δ𝐻𝐿(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)<𝑒T𝐿−1Δ𝐻𝐿((𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†)T(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)T×(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)−2𝑒T𝐿−1Δ𝐻𝐿(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)=𝑒T𝐿−1Δ𝐻𝐿(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)−2𝑒T𝐿−1Δ𝐻𝐿(𝐶+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)=−𝑒T𝐿−1Δ𝐻𝐿(𝐴+Δ𝐻T𝐿Δ𝐻𝐿)†(Δ𝐻T𝐿𝑒𝐿−1−𝐵Δ𝐻T𝐿𝑙)=−⟨𝑒𝐿−1,Δ𝐻𝐿Δ𝛽𝐿⟩=−‖Δ𝐻𝐿Δ𝛽𝐿‖2≤0
(23)
Consequently, we can obtain an inequality: ‖eL‖<‖eL−1‖, which proves the convergence of IRVFL-I+ .

Below is the proof of IRVFL-II+ .

Define Δ𝛽̂ L=(A+ΔH𝑇LΔHL)†(ΔH𝑇Le∗L - 1−BΔH𝑇Ll) as intermediate values, Δ𝛽∗L as the output weights of IRVFL-II + , and then calculate the corresponding eˆL=e∗L−1−ΔHLΔ𝛽̂ L.

‖‖𝑒∗𝐿‖‖2−‖‖𝑒∗𝐿−1‖‖2≤‖𝑒̂ 𝐿‖2−‖‖𝑒∗𝐿−1‖‖2=‖‖𝑒∗𝐿−1−Δ𝐻𝐿Δ𝛽̂ 𝐿‖‖2−‖‖𝑒∗𝐿−1‖‖2=⟨Δ𝐻𝐿Δ𝛽̂ 𝐿,Δ𝐻𝐿Δ𝛽̂ 𝐿⟩−2⟨𝑒∗𝐿−1,Δ𝐻𝐿Δ𝛽̂ 𝐿⟩
	(24)
Then, the convergence of IRVFL-II+ can be proven.

Algorithm implementation
The detailed implementation procedures of IRVFL+ are summarized as follows.

figure a
figure b
Experiments and results
Evaluation on classification and regression datasets
This section compares with IRVFL-I+ , IRVFL-II + and IRVFL on five real-world multi-class classification datasets and five regression datasets from a machine learning repository named KEEL. All datasets are available: http://www.keel.es/. The statistics of the KEEL datasets are illustrated in Tables 1 and 2, including the number of training and test data, input attributes, the number of the normal features, the number of the privileged features, classes, and output. The authors randomly split attributes of each dataset mentioned above in half and select one part as normal ones and the others as privileged. All samples will be preprocessed with normalization and the best values of experimental result in each table will be bolded.

Table 1 Statistics of KEEL classification datasets
Full size table
Table 2 Statistics of KEEL regression datasets
Full size table
There is no exact theoretical basis to guide the selection of hyperparameters C and γ, which can be only set empirically or repeat the experiment. The authors will experiment with IRVFL-I+ on dataset Wine as an example to select parameters. The hyperparameters C, γ and u should be pre-defined by users. The maximum number of hidden layer nodes Lmax will be set as 50, and parameters C and γ are chosen from a random search within [11] and [10, 104], respectively. Figure 3 shows a part of results of selecting the parameters. As shown in Fig. 3, the IRVFL-I+ can achieve the best performance when C set as 0.1 and γ set as 1000. From the figure the authors can summarize that IRVFL-I+ will achieve the best performance, while C and γ set as a small number and big number, respectively. On the remaining datasets, the same method could be used to determine the optimal parameters for IRVFL-I+ and IRVFL-II + . Due to space limitations, the description of this process will be omitted later.

Fig. 3
figure 3
Performance of IRVFL-I+ with different user-defined parameters C and γ, in which the IRVFL-I+ uses the sigmoid function as the activation function, when Lmax = 50

Full size image
The expressivity of a network model is typically characterized by the internal neuron behavior, which is associated with activation functions. Identify and define a suitable AF for the specified tasks to boost up the performance of a network model. Therefore, we should select an appropriate activation function for IRVFL+ before comparison experiments. Table 3 reports the performance of the IRVFL+ with different activation functions in the light of accuracy on Wine. As Table 3 shows, both IRVFL-I+ and IRVFL-II + can achieve the best performance on Wine when choosing sigmoid function as activation function. Other datasets could be determined the activation functions in the same way.

Table 3 Performance of the IRVFL+ with different activation functions, when Lmax = 50
Full size table
For classification datasets, all experiments will fix the maximum hidden layer nodes Lmax to compare the performance of each algorithm. As shown in Table 4, the training accuracy and test accuracy of IRVFL IRVFL-I+ and IRVFL-II + are given. Besides, experiments on datasets Wine, Contraceptive, Flare, Iris and Texture fixed the maximum hidden layer nodes as 50, 50, 50, 100 and 50, respectively. The authors can obtain that the performance of IRVFL-I+ and IRVFL-II + is better remarkably than that of IRVFL, which means that the privilege information of IRVFL+ can improve the generalization of the model. More importantly, IRVFL-II + can always achieve the best performance on all above classification datasets. Figure 4 shows the training and testing accuracy curves of IRVFL, IRVFL-I+ and IRVFL-II + on different classification datasets.

Table 4 Comparisons with three approaches on classification datasets in terms of training accuracy and testing accuracy
Full size table
Fig. 4
figure 4
Performance of IRVFL, IRVFL-I+ and IRVFL-II + on classification datasets, where (a) and (b) represent the performance on Wine, (c) and (d) represent the performance on Contraceptive, (e) and (f) represent the performance on Flare, (g) and (h) represent the performance on Iris, (i) and (j) represent the performance on Texture

Full size image
Like the results in Table 4, the training and testing accuracy of IRVFL+ is always better than IRVFL. The above experimental results indicate that privileged information is effective in improving model performance on classification cases.

For regression datasets, all experiments will fix the error tolerance ɛ to compare the performance of each algorithm. Table 5 shows the training RMSE, the test RMSE and the number of hidden layer nodes of each algorithm on different regression datasets under the condition of achieving the same expected error. The error tolerance of datasets Mortgage, Treasury, Abalone, Laser and W-Izmir is set to 0.15, 0.15, 0.2, 0.225 and 0.15, respectively. As shown in Table 5, IRVFL-II + can achieve best performance. More importantly, under the premise of achieving the same error tolerance, the hidden layer nodes required by IRVFL-I+ on Mortgage are 4.1% less than IRVFL, while IRVFL-II + is 79.2% less than IRVFL; on Treasury, the hidden nodes number of IRVFL-I+ is 15.1% less than IRVFL, and IRVFL-II + is 84.3% less than IRVFL; on Abalone, the hidden nodes number of IRVFL-I+ is 26.8% less than IRVFL, and IRVFL-II + is 87.8% less than IRVFL; on Laser, the hidden nodes number of IRVFL-I+ is 10.4% less than IRVFL, and IRVFL-II + is 87.3% less than IRVFL; on W-Izmir, the hidden nodes number of IRVFL-I+ is 17.2% less than IRVFL, and IRVFL-II + is 74.8% less than IRVFL. It can be seen that the algorithms with LUPI paradigm can always get much smaller network structures than IRVFL under the condition of achieving the same error tolerance, which reduces the size of the models. Figure 5 shows the curves of the training RMSE and testing RMSE of the three algorithms on different datasets. The authors can obtain that the IRVFL+ always converges faster than IRVFL. Besides, under the premise of achieving the same desired solution, IRVFL-II + requires fewer hidden nodes than IRVFL-I+ , while IRVFL requires more than IRVFL+ algorithms. The above illustrates that IRVFL+ performs effectively on regression cases.

Table 5 Comparisons with three approaches on regression datasets in terms of training nodes (L), training RMSE and testing RMSE
Full size table
Fig. 5
figure 5
Performance of IRVFL, IRVFL-I+ and IRVFL-II + on regression datasets, where (a) and (b) represent the performance on Mortgage, (c) and (d) represent the performance on Treasury, (e) and (f) represent the performance on Abalone, (g) and (h) represent the performance on Laser, (i) and (j) represent the performance on W-Izmir

Full size image
Discussion
The authors conduct various experiments on different classification and regression datasets. The experimental results illustrate that IRVFL+ can always perform better than IRVFL which proves that leveraging different privileged information for different classification and regression tasks is useful. Not IRVFL-I+ but also IRVFL-II + have their own advantages and disadvantages. The former is faster but less accurate, and the latter is more accurate but slower.

Table 6 reports the complexity of IRVFL, IRVFL-I+ and IRVFL-II + [34]. Obviously, the highest orders of IRVFL-II + reach O(N2) but others just O(N) for the number of data N, which explains why IRVFL-II + is slower to train on large-scale data than IRVFL-I+ . The complexity of IRVFL-I+ is slightly more complicated than that of IRVFL that lead IRVFL trains faster than IRVFL-I+ . Nevertheless, IRVFL-I+ still performs better than IRVFL. The complexity of IRVFL-II+ seems more complicated, but it can achieve the best performance compared with IRVFL and IRVFL-I+ . Finally, the authors recommend using IRVFL-I+ -based strategy when aging is required and the accuracy requirement is not high, and IRVFL-II + -based strategy when higher accuracy is required and the aging requirement is not high. How to improve the computational efficiency of IRVFL+ is the focus of our future research.

Table 6 Comparison of the complexity of different algorithms
Full size table
Conclusion
By using LUPI paradigm, this paper proposes an incremental learning paradigm based on RVFL networks, named IRVFL+ . IRVFL+ leverages privileged information into the IRVFL networks in the training stage. Two algorithmic implementations of IRVFL+ have been developed with local updating and global updating strategies. IRVFL-I+ is a speed priority algorithm, while IRVFL-II + is a performance priority one. This paper has analyzed the convergence of two algorithmic implementations, which provides a strong theoretical guarantee. The fully discussions on why IRVFL-I+ and IRVFL-II + can achieve rapidity and accuracy, respectively, have been made through complexity analysis. This newly derived IRVFL+ can merge the incremental learning algorithm with the LUPI paradigm effectively, which provides a way of thinking for the application of LUPI paradigm in incremental learning.

Keywords
Learning using privileged information
Random vector functional-link networks
Incremental learning
Constructive method