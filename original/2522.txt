Inspired by the massive surge of interest in the Internet of Things (IoT), this work focuses on the kinetics of its security. By automating everything, starting from baby monitors to life-saving medical devices, IoT brought convenience to people’s lives and rapidly became a trillion-dollar industry. However, the future of IoT will be decided on how its security and privacy concerns are dealt with. It is a fact that at present, the security of IoT is lacking in coherent and logical perspectives. For example, the researchers do not adequately accommodate the uncertainty and insider attacks while developing the IoT security procedures, even though most security concerns related to IoT arise from an insider and uncertain habitat. This paper provides a critical analysis of the most recent and relevant state-of-art methods of IoT security and identifies the parameters that are crucial for any security posture in IoT. Considering all the intricate details of IoT environments, this work proposes a Generic and Lightweight Security mechanism for detecting malicious behavior in the uncertain IoT using a Fuzzy Logic- and Fog-based approach (GLSF2IoT). It is developed on the principle of “zero trust,” i.e., trust nothing and treat everything as hostile. While Fuzzy Logic has been used to remove uncertainties, the Fog-IoT architecture makes GLSF2IoT inherently better than the cloud-IoT. Once the malicious activity is detected, GLSF2IoT automatically limits the network access against the IoT device that initiated this activity, preventing it from targeting other devices. We evaluated GLSF2IoT for blackhole, selective forward, collusion and DDoS attacks, i.e., attacks which can invalidate any IoT architecture. Besides yielding better accuracy results than the existing benchmarks, we found that GLSF2IoT puts extremely low pressure on the constrained nodes, is scalable, supports heterogeneity, and uncertainty of the IoT environments.

Introduction
IoT quickly moved from being a buzzword to reality by making people’s lives a bit more pleasing and comfortable [1]. However, at present, IoT security, considering the very real and increasing security threats, is woefully inadequate at best and non-existent at worst [2]. Due to their limited storage and processing capacity, and the "walled off" nature of their architecture, most IoT devices cannot run anti-viruses or other security patches, turning them into sitting ducks for cyber-attackers [3]. Recent attacks like Mirai, Wicked, Hajime, Katana, and Amnesia: 33 vouches for the credibility of this statement [4, 5].

In the last phase of 2019, we woke up to headlines like “ring camera hacked by a man in 8-year-old girl’s room, taunted her by saying that I am Santa Claus [6],” and “Ring safety camera hacks see home-owners exposed to racial violence and requests for ransom [7].” Researchers have been warning about the vulnerabilities of smart TV’s and cameras right from the early days of IoT, i.e., 2013 [8]. Today after 7 years, the attackers and, as such, the attacks are more sophisticated, and yet, the individuals hacking into ring cameras were not highly technical or using Artificial Intelligence (AI). They were people who discovered the credentials on the dark-web by chance and bought them to attack insecure IoT devices [9]. That is, these criminals did not hack-in but simply logged-in using stolen or phished credentials. With this, we can only imagine what a qualified cyber-attacker can do to a “billion-device large” insecure IoT network [10]. As per the verified market research [11, 12], the magnitude of the global IoT market was estimated at USD 212.1 billion in 2019, and is projected to hit USD 1.6 trillion by 2025. The research established the expense of IoT hacks to account for 13.4 percent of annual revenue among businesses with under $5 million in revenue [13]. Users of KrebsOnSecurity lost $323 K when the Distributed Denial of Service attack (DDoS) was launched on the website. In addition to the loss of an 8% customer base of Dyn, the revenue loss caused by the Mirai botnet stands at a staggering $110-million [3].

Many attempts have been in the literature to address the Security and Privacy (S&P) concerns of IoT. A major weakness in most state-of-art security mechanisms is that they put intense pressure on the outsider attacks, i.e., they follow a “castle and moat” mentality [14], often ignoring the terrible insider attacks. If the most recently launched high-profile attacks have taught us anything, it is that insider attacks can render any secure surface-implementing encryption and authentication schemes meaningless [14]. Insider attacks are defined by negligent or corrupt employees and credential thieves [15]. According to the research conducted by Ponemon Institute, a total of 159 organizations from North America (The United States and Canada), Europe, the Middle East, Africa, and Asia–Pacific regions experienced a gigantic 3269 insider attacks over 12 months [15]. These companies focused on securing their parameters while presuming that everything inside is “trustworthy.” Figure 1 demonstrates the revenue loss caused by these insider profiles for various activity centers.

Fig. 1
figure 1
Revenue loss caused by insider attacks in different activity centers [15]

Full size image
These statistics tell us that in order to save the enormous sector of IoT from a total catastrophe, the need of the hour is to quickly deal with its S&P concerns [2, 16]. To acknowledge the concern of insider attacks, a security solution should use the approach of zero-trust, i.e., it must see the insider/authenticated nodes and outsider nodes with equal doubt until they earn that trust.

Besides insider attacks, one of the most neglected among IoT’s S&P challenges is the uncertainty of the IoT environment. Humans reason in approximate terms rather than precise [17]. For example, the answers to questions like Ali are slimmer than most of his colleagues. How slim is Ali? 68.8% of India’s population live on less than $2 per day [18]. Ambani lives in India. What can be said about Ambani’s income? In which manner will a child crawl to reach its toy? Shall all be uncertain and approximate. The information is always incomplete and imperfect in an ecosystem created by humans [19]. Hence, it also applies to the world of IoT.

Some illustrations from the world of IoT include; 70% of IoT devices are insecure [20], abc is one such device. How secure is abc? Similarly, their pattern of mobility has uncertainty about their position or membership in any particular group/cluster. A mobile IoT device can belong to multiple groups/clusters simultaneously. Moreover, how IoT consumers express their privacy concerns is also uncertain. For instance, inquire of the owner of a smart camera or a TV how frequently they modify their device's password. A response such as "often" or "rarely" is insufficient, because a normal person’s idea of security may be warped, and s/he may lack the qualifications to refer to any number as "frequently" or "rare." That instance, where two password changes each month may appear to be “frequent” to the average user, they may be “rare” in actuality. In general, the IoT world is fraught with such uncertainties. This is because, in most IoT situations, we see a partiality of fact and partiality of possibility. The IoT environment is dynamic, because the information here can sometimes be imperfect, incomplete, or contradictory. Therefore, the answers cannot be precise and drawn by logical systems using precise reasoning [21]. Hence, until we follow our viewpoint on IoT adjustments, an approach where the S&P of IoT is deliberated a critical necessity in the planning stage itself, any attack should only come as a shock and not a surprise.

Fuzzy logic and fog computing
In this study, we have tried to address the uncertainty of IoT environments by using Fuzzy logic, which is essentially a precise logic of imprecision and approximate reasoning. More precisely, we chose to use fuzzy logic to deal with uncertain IoT, because it is possible to interpret fuzzy logic as an effort to mechanize two extraordinary human capabilities. First, it can converse, think, and make logical choices in an imprecise, imperfect, and ambiguous environment [22]. Secondly, it can execute a massive range of physical and mental jobs without requiring complex estimations, and calculations [23, 24]. For example, in the password dilemma stated above, a fuzzy logic foundation can be used to fuzzify data, determining whether it is frequently or seldom modified depending on a numerical value provided by the owner. In the query of IoT device security, an answer yielded by fuzzy logic might be expressed as: the possibility of abc to be vulnerable to an attack is 0.7. The application can then decide if 0.7 vulnerability is acceptable to it or not. To this end, we propose using Generic and Lightweight Security Mechanism for Detecting Malicious Behavior in the Uncertain IoT using a Fuzzy Logic- and Fog-based Approach (GLSF2IoT). Apart from fuzzy logic, we propose the use of fog nodes in between the edge and cloud nodes. This, in addition, to branching out the workload from the cloud, helps in bringing support to geographical diversities, time-constrained, mobility, and location-aware S&P applications of IoT. All these inherent advantages are missing from the cloud-based IoT architectures [16]. As such, Fog-based IoT provides a distributed, decentralized, and heterogeneous computing environment, pushing the cloud services closer to the network’s edge devices. As a result, fog-based IoT brings cloud services closer to network edge devices. Most S&P approaches offered by researchers ignore these considerations.

Contribution and structure of paper
The distinguishing characteristics of GLSF2IoT that make it different from other IoT security approaches are summarized as follows:

It tolerates the diversity of IoT devices. Most of the work from the literature on IoT security is inspired by Wireless Sensor Networks, making them inadequate for IoT.

The security function is pushed away from the constrained edge nodes to let them perform their intended functions and save their crucial resources. It is mainly implemented on cloud and fog layers, thus making it lightweight for edge devices.

It gives better results for detecting blackhole, selective forwarding, collusion, and DDoS attacks in the IoT environment.

One of the inherent features of IoT networks is that they are ubiquitous. The overwhelming majority of security procedures, although proposed for IoT, are not scalable to it. GLSF2IoT has been tested on this parameter and has yielded consistent results.

Most IoT devices use a single-threaded microcontroller with a 2 MB Random Access Memory (RAM) that is insufficient to run a full-fledged operating system or even a simple anti-virus [3] (common-touch requires 128 MB RAM). GLSF2IoT puts negligible memory overhead on them.

By using fog-based IoT architecture, it can handle the breaches that a mobile node may create.

Using Fuzzy logic, it is the first of its kind to deal with uncertainties in the IoT atmosphere.

GLSF2IoT initially assigns zero trust to all the nodes, i.e., insider (authenticated) and outsider nodes, to resist the insider attacks. The monitoring procedures run continuously to identify any misbehavior (an authorized and authenticated node can become corrupt at any time.)

The remainder of the paper is organized as follows: Sect. 2 identifies the motivation for choosing the attacks studied in this paper. To extrapolate the significance of our work, it also presents a critical analysis of the most recent, and relevant state-of-art methods discussing their advantages and shortcomings from an uncertain IoT environment perspective. Section 3 provides a detailed description of our proposed security posture, i.e., Generic and Lightweight Security Mechanism for Detecting Malicious Behavior in the Uncertain IoT using a Fuzzy Logic- and Fog-based Approach (GLSF2IoT). Section 4 analyzes the efficiency of GLSF2IoT under the effect of blackhole, selective forward, collusion and DDoS attacks. It weighs its performance on the parameters of heterogeneity, scalability, architecture employed, energy overhead, memory overhead. In Sect. 5, we have evaluated the suitability of GLSF2IoT to other IoT attacks. Section 6 extracts the conclusion and predicts an immediate future direction for research.

Significance of launching the chosen attacks and related work
In this section, we briefly explain the motivation for choosing the blackhole, selective forwarding, collusion and DDoS attacks in accessing the performance of our proposed security posture, i.e., GLSF2IoT. The most recent and relevant state-of-art solutions proposed for these attacks and the problems linked with those solutions are also discussed.

Motivation for choosing blackhole and selective forwarding attacks
In IoT application areas like healthcare, intelligent transportation systems, incident response systems, etc., reliable data delivery is important. If this objective is nullified, the whole purpose of having it is lost [25]. Both blackhole and selective forwarding attacks can cause such downfalls to the systems, and as such, they can invalidate any IoT architecture.

In a blackhole attack, for example, an attacker node broadcasts that it has the shortest path to the destination. Lured by this temptation, the source node sends the data. On reception, the attacker node drops all of its data instead of forwarding it to the destination [26]. A blackhole intruder can also imitate the wireless router that links the rest of the network to the IoT devices. Then, with an authorized wireless router, it can redirect the traffic.

In a selective forwarding attack, an attacker node sits somewhere in the selected path. The attack can be launched in two ways, viz. simple and cooperative [27]. A selective forwarding attack can be simple where one malicious node pretends to sit at the median of the shortest path to the destination. It forwards some data packets and drops others just to confuse the source about its credibility. In a cooperative selective forwarding attack, different attacker nodes work in tandem to launch the attack. To gain trust, the first attacker node forwards the data packets, showing a Packet Delivery Ratio (PDR) of 100%, to the other malicious node that drops all of them on reception.

Motivation for choosing collusion attack
Multiple devices conspire together to bring down the reputation of a particular node. Nodes that conspire to forge a specific object's trust value can do so by falling into one of four potential classifications, viz. Same owner, same geography (all reside in the same place), same workplace (different owners, same workplace), or same social circle (different owners, similar interests, i.e., one community) [28].

It is incredibly challenging to handle collusion attacks in IoT because of the myriad of connected devices in its uncertain and dynamic landscape. The groups keep on changing because of the continuous mobility of the devices [29, 30]. As such, the nodes on which detection procedures run do not get enough time to detect the attack. The use of close and powerful fog nodes in GLSF2IoT help to monitor and detect these attacks as the nodes are scanned every time, no matter where they reside.

Motivation for choosing DDoS attack
Among the most intriguing cyber-attacks, DDoS attack tries to cause a capacity overload of the server by flooding it with incessant requests, and make it ignore the legitimate customer requests. Several security systems have evaluated their effectiveness on DoS, but it is insufficient and paltry for an IoT network that provides the attackers with a huge attack surface. That is, several devices are likely to be utilized to assault a network, necessitating validation of the framework against a DDoS attack to ensure its relevance.

Moreover, many IoT applications are based on real-time inputs, such as autonomous vehicles, industry, etc. In such situations, the unavailability of a server is catastrophic. For example, when an autonomous vehicle is on the road, and an IoT DDoS attack is launched on the server, it may stop being steered by sensory inputs. The massive IoT network, resource constraints, and diversity of IoT devices make it a duck soup for professional intruders to launch the IoT server DDoS attack [8]. IoT resource constraints make cryptography less suitable due to the time, power, processing cycles, and memory needed to run these algorithms.

Critical analysis of state of art methods
Over the years, many researchers have attempted to address the S&P issues of IoT networks and devices. Here, we critically examine a considerable number of such security postures to highlight their contributions and clarify how the provided work advanced the state-of-the-art. We also point out their major shortcomings from IoT’s S&P perspective.

The major achievement of Seyedi [26], for example, is that they developed a smart agent-based mechanism for blackhole attack that gave less than 19.4% False Positive Rate (FPR), a False Negative Rate (FNR) of less than 22.2% and a Detection Accuracy of 80.5%. [31] Identify blackhole attacks that occur during wireless communication between the base station and nodes with a Detection accuracy of 87.72%. [32] uses genetic programming for detection of Hello flood, Version number, sinkhole, and blackhole attacks. It provides a Detection Accuracy of 92% for the Blackhole Attack with a True Positive Rate (TPR) of 94.7% and FPR of 0.7%. However, it uses the inherent security advantages of Routing Protocol for Low Power and Lossy Networks (RPL) to detect attacks. If a protocol disruption attack happens, the entire scheme gets nullified.

The authors of [27] employed a cryptographic authentication mechanism for identifying the selective forward attack. Their mechanism gave a Detection Accuracy of 94.5%, an FPR of 14.1% and an FNR of 17.5%. To identify the blackhole and selective forward attacks, the authors of [33] developed a lightweight heartbeat protocol. They claim it to be the best approach for detecting these attacks. However, it simples works on ICMPV6 echo requests. If the response isn’t received, it implies a blackhole attack. If ICMPV6 is filtered, it identifies selective forward. A very basic application is used, and that too gives a 10% communication overhead. To detect collusion attacks, Yaseen [29] uses SDN to collect data and claims to detect malicious devices during their movement among clusters. It is also scalable to IoT networks.

Svelte, given in [34], is the first Intrusion Detection System (IDS) designed for IoT networks with a TPR of 85% for selective forward and sinkhole attacks. [35] Aims to promote the minimization of FPR for DoS and Botnet attacks, increase the detection rate under distributed attacks, and minimize the workload for the end host. It shows less memory overhead and less power consumption. [36] Detects DDoS and Collusion threats at a faster rate by using the ELM-based Semi-supervised Fuzzy-C Means mechanism (ESFCM). It has a Detection time of 11 ms and an Accuracy of 86.53%. It doesn’t take the real-time data traffic, but instead works on the NSL-KDD dataset. ESFCM is just a post-attack observation.

An IDS was designed by Haripriya [37] using fuzzy logic with an FPR of 0.66%. It was implemented for the DDoS attack in IoT setup. However, it gives no clue about how Connection Message Ratio (CMR) and Connection Acknowledgment Message Ratio (CAMR) input parameters were set. Finally, [38] used Fuzzy & Taylor-elephant herd optimization. Three intrusion detection search databases (Db) are used viz. KDD cup, Db-1, and Db-2. The system gives a Detection Accuracy of 93.8% for DDoS attack, but it did not deal with the real attack scenarios.

The critical analysis of these methods is tabulated in Table 1. It identifies the major shortcomings of these procedures.

Table 1 Review of the related schemes
Full size table
It is observed that mostly the solutions are developed to identify one type of attack only. This is insufficient and scarce for an IoT network that provides the attackers with a massive extortion landscape. Heed must be paid that any attack is not being launched by the authenticated insiders. It was seen that most articles have missed dealing with this dimension also.

It was also observed that none of the studied approaches consider uncertainty of the IoT landscape while recommending a security mechanism. Also, very few postures ensure that edge devices do not lose all their energy in guaranteeing security, i.e., lightweight. Besides, it is essential to remember that in IoT scenarios, sensors are not viewed as parts of the sensor network connected to the Internet using gateways, as in WSNs. Sensor nodes are instead considered as nodes of the Internet [28, 39, 40]. Therefore, the solutions designed for WSN architectures won’t fit the heterogeneous IoT models. The symbols pro (*p) or con (*c) are placed to refer to the existence of the parameter addressed concerning its collective worth. GLSF2IoT is developed to address these issues on the lines of the crucial parameters (listed in Table 1) that are expected of a security procedure meant for IoT.

Proposed system
If the recently launched cyber-attacks like SolarWinds [41], Amnesia: 33, etc., have anything to say, it is that there is a continuous rise in the determination and sophistication of attackers. Till the time we establish a solid and reliable security cover to build cyber resilience, there exist illuminated paths to the downfall of IoT. In essence, it becomes imperative to develop a security posture that is built, keeping in view all the essential parameters of IoT security. Built on this ground, Fig. 2 demonstrates the general structure for the proposed GLSF2IoT.

Fig. 2
figure 2
GLSF2IoT architecture

Full size image
GLSF2IoT architecture is built on 3 layers, viz. edge device layer, fog layer, and cloud layer. The devices in each layer perform specific security tasks in sync to achieve high and real-time detection of attackers. For example, the cloud layer nodes run a hybrid of fuzzy logic-based trust management and anomaly-based detection methods for identifying malicious behavior in the fog layer of the IoT network and to identify the most trusted fog nodes. Also, before operating the security measures, it is critical to group multiple edge nodes with trusted fog nodes to reduce load and boost the system efficiency. For the reasons already described in the study, the grouping has been done to cover the belonging of a device to multiple groups at one time. The trusted fog nodes run unknown attack detection and flag generation procedures. Each layer consults its specific defense library for making various decisions. The following sub-sections go into detail about all the mechanisms that our GLSF2IoT architecture employs.

Fuzzy logic-based trust management mechanism
Malicious nodes sometimes behave normally to trick the neighbors into believing that they are honest, or to escape the punishment of being thrown out of the network. That is, an attacker displays uncertainty or irregularity in its behavior. To deal with this irregularity, we employ fuzzy logic in our trust management mechanism. This procedure is used to identify the most reliable fog nodes that can build up the local anomaly detection system of GLSF2IoT.

By creating groups around the reliable fog nodes, the devices will be monitored from the network perimeter itself, and the malicious activities, if detected, will be dealt with quickly. Such a quick remedy is not possible if the cloud is monitoring the entire network [42]. GLSF2IoT can formulate the overall final trust values of different fog nodes by aggregating the trust values received from multiple cloud nodes. It uses a combination of mutual interaction and anomaly-based methods, as shown in Fig. 3.

Mutual Interaction Method It analyzes three parameters for any discrepancies: energy, rank, and control packets. In a network, nodes transmit, forward and receive packets, send routing updates, etc. In GLSF2IoT, the cloud layer nodes monitor these interactions with the fog nodes, detect the inconsistencies (if any) and calculate their trust values. These disparities in interactions are seen by comparing the characteristics of recorded interactions (past) with the present interactions. The past-trust at a time “𝑡,” i.e., 𝑇𝑝(𝑡), is calculated using Eq. (1).

𝑇𝑝(𝑡𝑐)=∑𝑖=𝑡−1𝑖=1𝑇𝐼𝑖,𝑗(𝑡)𝑡𝑐−1
(1)
where 𝑇𝐼𝑖,𝑗(𝑡) is the trust of node i calculated by node j at present using the method “I,” i.e., Mutual Interaction. 𝑝 refers to the past. The summation is over the trust calculated previously from the beginning to time “t–1,” i.e., one less than the current time. For example, if trust is calculated after every one interval and currently the system is in the fourth interval. For the sake of understanding, if we assume that the trust value at t = 1 was 0.9, at t = 2 was 0.8 and at t = 3 was 0.7, then the current past trust value will be equal to 0.9+0.8+0.73=0.7. By doing this, we are taking all the values into consideration that helps in observing the discrepancies minutely and accurately. As such, the past trust at any moment is calculated by taking the average of all the previously recorded trust values for a particular node. Moreover, as this function is executed by the cloud, computation, and storage of all of these values was not a complex task.

Also, to calculate the trust values of fog nodes using anomaly detection, the rules given in Table 2 are used. All the reported anomalies are integrated, and depending on the overall sum of detected anomalies, the cloud layer nodes calculate the trust value 𝑇𝐴𝑖,𝑗(𝑡) for different fog layer nodes.

Fig. 3
figure 3
Fuzzy logic-based trust management mechanism

Full size image
Table 2 Anomaly detection rules for trust management module
Full size table
Mathematical Formulation The trust value calculated by a node ′𝑖′ at cloud layer for a particular fog layer node ′𝑗′ is the weighted sum of trust values calculated with the help of analyzing mutual-interaction with fog nodes 𝑇𝐼𝑖,𝑗(𝑡) and the anomalies detected 𝑇𝐴𝑖,𝑗(𝑡). Consequently, we get Eq. (2).

𝑇𝑖,𝑗=𝑤1∗𝑇𝐼𝑖,𝑗(𝑡)+𝑤2∗𝑇𝐴𝑖,𝑗(𝑡)
(2)
where w1 and w2 are the weights associated with respective trust values calculated using mutual-interaction analysis and anomaly detections. These are chosen in a way that the value of 𝑇𝑖,𝑗 at a particular instant of time “t” always lies in the range [0,1]. Therefore,𝑇𝑖,𝑗=1, indicates complete trust and 𝑇𝑖,𝑗=0, depicts complete distrust. The individual trust values in Eq. (2) are calculated as in Eq. (3):

𝑇𝑍𝑖,𝑗(𝑡)={𝑑×𝑇𝑍𝑖,𝑗(𝑡−𝛿(𝑡))+(1−𝑑)×[𝑇𝑍,direct𝑖,𝑗(𝑡)]𝑑×𝑇𝑍𝑖,𝑗(𝑡−𝛿(𝑡))+(1−𝑑)×[𝑇𝑍𝑘,𝑗(𝑡)]if𝑖 and𝑗are immediate neighbors(direct)otherwise(indirect)
(3)
𝑇𝑍,direct𝑖,𝑗(𝑡) is the trust value calculated by node ′𝑖′ with the help of method ′𝑍′ using direct communication with the node ′𝑗′, ′𝑍′ can take values ′𝐼′ or ′𝐴′ depending upon the method used for trust calculation. 𝑇𝑍𝑘,𝑗(𝑡) is the trust calculated for node ′𝑗′ due to ′𝑍′ by some other node ′𝑘′ in the network. In other words, it is a combination of direct, indirect, and past trust values. 𝛿(𝑡) is the update interval for trust and ′𝑑′ is the system parameter whose value lies in the range [0,1]. Lesser value of ′𝑑′ indicates more dependence on direct and current values for trust calculation. 𝑇𝐼𝑖,𝑗 is calculated using discrepancies in interactions.

Fuzzification process For mapping the crisp input variables (direct trust, indirect trust and past-trust) into fuzzy sets, we define triangular and trapezoidal membership functions for trust as (Eqs. 4–6);

𝜇𝐻(𝑥;𝑎,𝑏)=⎧⎩⎨⎪⎪0;𝑥−𝑎𝑏−𝑎;1;𝑥<𝑎𝑎≤𝑥≤𝑏𝑥>𝑏
(4)
𝜇𝐴(𝑥;𝑐,𝑑,𝑒)=⎧⎩⎨⎪⎪⎪⎪0;𝑥−𝑐𝑑−𝑐;𝑒−𝑥𝑒−𝑑;0;𝑥<𝑐𝑐≤𝑥≤𝑑𝑑<𝑥<𝑒𝑥≥𝑒
(5)
𝜇𝐿(𝑥;𝑓,𝑔)=⎧⎩⎨⎪⎪0;𝑓−𝑥𝑓−𝑔;1𝑥>𝑓𝑔≤𝑥≤𝑓𝑥<𝑔
(6)
here 𝜇𝑅(𝑥) where𝑅={𝐻,𝐴,𝐿} is not a probability value, but a subjective judgment of grade-𝑎 membership. It says to what degree the element 𝑥 in 𝑅 belongs to a fuzzy set (𝐻,𝐴 or𝐿). These functions are chosen, because they are proved to be computationally less intensive for sensor nodes.

The values for direct, indirect, and past trusts are calculated using the region boundaries (Table 3), and as such, are classified into three degrees, viz. high, average, and low.

Development of Fuzzy rule base The membership functions for demonstrating the trust values and the legitimacy of the obtained overall trust for a fog node are represented by three linguistic labels: Normal, less trusted, and malicious, as shown in Fig. 4. Consequently, the fuzzy rule base is developed as follows:

If direct trust is low, indirect is low, and the past is low, then the overall trust of a fog node is malicious.

If direct is high but indirect and past trusts are low, then the overall trust is malicious.

Table 3 Region Boundaries for membership functions
Full size table
Fig. 4
figure 4
Membership function for trust

Full size image
Likewise, 27 different trust values can be obtained for fog nodes. Among these, we choose the fog nodes whose trust values lie in the range of 0.8–1 (highly trusted).

Defuzzification The mean of centroids of gravity gives the crisp value of overall trust for every membership function (Eq. 7)

overall trust=∑𝑏𝑥=𝑎𝜇𝑅(𝑥)×𝑥∑𝑏𝑥=𝑎𝜇𝑅(𝑥)
(7)
Grouping technique employed in GLSF2IoT
Once the trusted fog nodes are identified, our grouping mechanism creates groups of edge nodes with the trusted fog nodes. Algorithm 1 depicts how grouping has been done. The grouping algorithm breaks the uncertainty of one node (edge or fog node) belonging to one crisp group at a time. Because of its mobile nature, a node can belong to multiple groups also. In that case, it will just be monitored by multiple trusted fog nodes.

figure a
Fuzzy logic-based energy consumption analysis
This is a known fact that IoT edge devices are constrained by energy. If the pressure of security is not taken away from the edge layer, then the purpose for which these devices are actually created is defeated, because their entire energy is lost in doing the security calculations. As such, if a security posture is proposed for an IoT network, one of its prime objectives should be to detect attacks in the network without increasing the burden on edge devices. While designing GLSF2IoT, we have acknowledged this requirement and made sure that it puts negligible energy overhead on the edge devices.

To extrapolate the procedure of fuzzy logic combination in this mechanism, we consider two metrics, viz. Total energy spent by nodes for exchanging information (𝐸T) and a total number of transmissions (𝑐𝑜𝑢𝑛𝑡) required to successfully transmit a packet.

Let the total energy consumed by source and destination nodes be represented by 𝐸T. It is given by Eq. (8).

𝐸T=(1−𝑃𝑟)×𝐸S+𝐸D
(8)
where 𝐸S is the energy drained by the sender node, and 𝐸D is the energy exhausted by the destination node. 𝑃𝑟 is the probability that the data packets transmitted to a particular destination fail to reach it. (1−𝑃𝑟) is the probability of successful transmission. The energy consumed by sender node 𝐸S is calculated using Eq. (9).

𝐸S𝑖.𝑒.,  𝐸S=𝑇cont×𝐸sensing+𝑇TA×𝐸sensing+𝑇D×𝐸TX+𝑇TA×𝐸sensing+𝑇ack×𝐸RX=𝐸sensing×(𝑇cont+2𝑇TA)+𝑇D×𝐸TX+𝑇ack×𝐸RX
(9)
where 𝑇cont is the time spent in sensing the carrier,𝐸sensing is the energy spent by a node to sense the channel,𝑇TA is the Turn-around-Time, i.e., a fixed duration for which the device waits on sensing a free channel, 𝑇D is the time spent by device for transmitting data, 𝐸TX is the energy spent by a node to transmit the data packet, 𝑇ack is the time spent by the receiver to send the acknowledgment, and 𝐸RX is the energy spent by the node for receiving a packet. Figure 5 provides a visual description of these times.

Fig. 5
figure 5
Times spent by source and destination nodes for various processes

Full size image
Also, the energy spent by a destination node is calculated as (Eq. 10):

𝐸D=𝑇D×𝐸RX+𝑇TA×𝐸sensing+𝑇ack×𝐸TX
(10)
where 𝑇D is calculated using Eq. (11).

𝑇D=noofslots× no ofbitsper slotpackettransmission rate
(11)
The 𝑐𝑜𝑢𝑛𝑡 is defined by three linguistic variables viz. Small (transmission successful in the first attempt), medium, and large (transmission successful after maximum transmissions). The variation in total number of transmissions is categorized into three sets, as shown in Fig. 6. Likewise, we have classified 𝐸𝑇 into three sets shown in Fig. 7

Fuzzification Table 4 demonstrates the development of fuzzy rules for identifying the routes with the most reliable nodes. It indicates lesser the 𝑐𝑜𝑢𝑛𝑡, the lesser will be the 𝐸T, and hence better will be the route.

Fig. 6
figure 6
Membership function for count

Full size image
Fig. 7
figure 7
Membership function for total energy

Full size image
Table 4 Development of fuzzy rules and output fuzzy matrix
Full size table
Where Good, Very Good, Average, Poor, and Very Poor are the output link qualities. Link Quality refers to the amount of energy consumed by it. 𝐶𝑜𝑢𝑛𝑡, and 𝐸T membership functions can be used to detect the link quality. Mamdani model helps in calculating the medium link quality [43] as follows (Eq. 12);

median(Qual)=maximum ⎧⎩⎨⎪⎪minimum(Small(count),High (𝐸T))minimum(Median(count),Median(𝐸T))minimum (Large(count),Small(𝐸T)),
(12)
For composing, it uses minimum operator, and for aggregation, it uses maximum operator.

Defuzzification The crisp output value is obtained by calculating the mean of centroids of gravity as in Eq. (7). Figure 8 shows the defuzzified output.

Fig. 8
figure 8
Defuzzified output for energy variation of a node

Full size image
After analyzing the packets transmitted in 6LoWPAN networks, we have deduced that the usual period for a single symbol is 16 µsec, and a single slot consists of approximately 20 symbols. To sense a carrier, a 12 symbol slot is used, each comprising of 4 bits. Moreover, we obtained TTA = 192 μsec and Tcount = 128 μsec

Rank-inconsistencies
RPL is a de-facto IPv6 routing protocol for low power and lossy networks used to find the optimal routing path between source and destination nodes in an IoT network. It constructs a Destination-Oriented Directed Acyclic Graph (DODAG) that depicts the graphical position of all nodes in the network. The Rank of a node defines its position in a DODAG with respect to the root node and relative to other nodes in the network. Some attacker nodes can produce wrong information regarding the ranks of different IoT nodes connected to each other, thereby causing inconsistency in the network. These attacker nodes can also propagate wrong information regarding their ranks to attract data traffic towards themselves, and then cause harm to received data. We have proposed algorithms 2 and 3 for detecting rank discrepancies.

figure b
figure c
Fuzzy logic-based change in control packet anomaly detection
We assume that the IoT nodes use TCP to provide transport layer services and all the data packets pass through a trusted fog node. Since the edge devices are deployed to provide a particular service, therefore only the traffic with specific characteristics should be being transmitted between the edge node and the trusted fog node. The malicious node, however, has to send more packets (to communicate with its command and control center) and packets lengths larger than usual (to launch an attack). Using the characteristics of normal IoT network traffic, we calculated the average length of packets transmitted, and used it as a threshold limit to detect an anomaly. Any deviation in the number or length of packets from a threshold detects a malicious node. The fuzzy rule base for this mechanism is given in Table 5. Input variables form the precedent part of the rule, and output forms the subsequent part. Figure 9 shows the mechanism.

Table 5 Fuzzy rule base for detecting anomalies in control packets
Full size table
Fig. 9
figure 9
Fuzzy logic-based change in control packet anomaly detection

Full size image
Cloud’s attack recovery mechanism
Using these mechanisms, the cloud identifies the most trusted and malicious fog nodes. Once it detects a malicious fog node, it puts its id in the blacklist and warns the network about it. It is to be noted that these procedures run continuously. That is, a fog node can be the most trusted at a particular time, but it can become corrupt later to launch an insider attack. GLSF2IoT doesn’t trust any node forever. If a previously trusted node is observed to behave maliciously, cloud directs the nodes falling in its group to break their connection with it, group with some other trusted fog node, or communicate directly with the cloud. It is associated with a database called Counter-Mechanism Knowledgebase (CMK). It consults CMK for making decisions as given in Eq. (13).

CMK={𝐵𝑖𝑑,𝑀𝑖𝑑,𝑀𝑛𝑎𝑚𝑒,𝑀𝑓−𝑏𝑎𝑠𝑒,𝐴𝑖𝑑,𝑙𝑎𝑦,𝑠𝑒𝑟}
(13)
where 𝐵𝑖𝑑 is the list of blacklisted node id’s, 𝑀𝑖𝑑, 𝑀𝑛𝑎𝑚𝑒, and 𝑀𝑓−𝑏𝑎𝑠𝑒 are the id, name, and fuzzy-logic rule base of the mutual-interaction method. 𝐴𝑖𝑑 is the attack id already known to the cloud. 𝑙𝑎𝑦𝑎𝑛𝑑,𝑠𝑒𝑟 refer to the layer and service that are responded to by the cloud. The dynamic nature of CMK is ensured by continuous updates concerning new attacks identified by fog layer. The CMK update is described in the following sub-section.

Anomaly-based detection
The responsibility of detecting blackhole, selective forward, collusion, and DDoS attacks was levied on the trusted fog nodes. To achieve this, we have added two sub-segments to the fog layer, viz. Unknown Attack Detection segment (UAD) and Attack Flag Generation segment (AFG).

Unknown Attack Detection segment (UAD) This segment identifies the threats by consulting the fuzzy logic-based Unknown Attack Library (UAL) given in Eq. (14).

UAL={𝐴𝑖𝑑,𝑛𝑎𝑚𝑒,𝑑𝑒𝑓,𝑙𝑎𝑦,𝑠𝑒𝑟}
(14)
where 𝐴𝑖𝑑 is the attack ID,𝑛𝑎𝑚𝑒 denotes the name of the attack, 𝑑𝑒𝑓 gives its description,𝑙𝑎𝑦,𝑠𝑒𝑟 identifies the layer and service type set off by the attack. UAD constantly screens network’s working through Forward Packet Ratio (FPR), Average Destination Sequence Number (ADSN), Average Packet Drop Rate (APDR), Internal Resemblance (IR), External Resemblance (ER), and Signal-to-Noise Ratio (SNR) to calculate the Degree of Attack (DoA). This choice of parameters was made, because the literature points out that they can identify any variation of the respective attacks for which they are chosen [40, 44, 45]. Table 6 shows how the parameters have been calculated for the nodes.

Table 6 Performance parameters for GLSF2IoT
Full size table
Research indicates that every new attack that is tossed is just a 1–2% variation of the existing ones, i.e., zero-day attacks are just the mutated versions of classical attacks [46]. Therefore, by using the knowledge of experts, the fuzzy rule base for detecting these attacks is developed (table 7) for threat detection in IoT. Using a conjunction (AND) operator, these fuzzy rules are executed partly and in parallel. However, if the execution of more than one rule results in the same outcome, the operator of a disjunction is used. Consulting UAL, UAD can classify DoA into 3 degrees viz. Low, medium, and high.

Attack Flag Generation segment (AFG) When the trusted fog node detects a threat, it sends an instant update to the cloud using a Flag function, defined as (Eq. 15):

𝐹𝑙𝑎𝑔(𝑡)=⟨𝐴𝑡𝑡𝑎𝑐𝑘,𝐴𝑡𝑡𝑎𝑐𝑘𝑒𝑟,𝑓𝑟𝑒𝑞⟩
(15)
where Attack refers to the type of attack that is launched, Attacker defines the malicious node (its id and the id of trusted fog node in whose group it currently falls), and freq is the number of times the attack was initiated by this node.

Table 7 Development of fuzzy rule base for blackhole, selective forward, collusion, and DDoS attacks
Full size table
The cloud, on receiving the 𝐹𝑙𝑎𝑔(𝑡), updates its CMK and propagates this information among all the other trusted fog nodes, and orders them to halt communication with these malicious nodes. The CMK update occurs as per Eq. (16).

CMK(𝑡)={(𝑐0,𝑐1,𝑐2,………,𝑐𝑛);CMK(𝑡−1)∪CMKnew(𝑡);𝑡=0𝑡>0
(16)
where(𝑐0,𝑐1,𝑐2,………,𝑐𝑛) is the cloud’s primary counter-mechanism knowledgebase, and CMKnew(𝑡) is the updated one.

Simulation results
The GLSF2IoT was instantiated on the open-source Contiki hybrid operating system optimized for IoT, using a workstation equipped with 64 GB RAM and an Intel Xeon processor running at 3.60 GHz. Evaluation was conducted using Cooja, Contiki’s simulation tool. Cooja is a flexible simulator conceived to simulate sensor and IoT networks running the Contiki operating system. The properties of Tmote-sky IoT devices were exploited to initiate the attacks. A lossy environment is considered because; the 6LoWPAN protocol used in IoT networks is inherently lossy [16, 34].

Figure 10 shows one of the experimental setups. The Cooja network simulator contains five windows that are studied for calculating the performance metrics of a system. The Network window shows the physical organization of the motes. To construct a topology, the physical positions of the motes could be changed. In the network window, each type of mote has a different color based on its purpose. For example, in Fig. 10, i.e., in the implementation of GLSF2IoT, the cloud node is green, the fog nodes are blue, the edge motes are pink, and the malicious nodes are yellow. Mote properties, radio environment of each mote, mote kind, and radio communication between the motes could all be seen graphically in the network window. The simulation control window allows us to modify the simulation speed as well as pause, restart, and reload the currently running simulation. The note window is used to write the theories and key points of the simulation and store them. The Cooja network simulator also displays a timeline for each sky mote (in our case, 65 motes). IoT networks' power consumption and network traffic could be seen with the timeline. The mote output also displays the similar information but in a different format. It tells what every mote is doing at a particular instant of time with a message. Transmitting radio signals are displayed in blue, receiving radio signals in green, and radio interference in red.

Fig. 10
figure 10
Experimental set-up

Full size image
The key parameters concerning the experiments are given in Table 8.

Table 8 Parameters for experimental evaluation
Full size table
Simulation environment
Figure 10 shows that GLSF2IoT can detect the attackers in real-time. The edge nodes are normal sky motes with a modified client.c file. The modification was made to allow these devices to send and receive data like normal IoT devices. The sky motes available in Cooja otherwise work only on the control packets. The IoT network with no malicious nodes is shown in Fig. 11 scenario-1. The fog nodes have been created by modifying the udp-server.c file. The cloud node is running the udp-server.c file. In scenario-2 of Fig. 11, we have launched the attacks (by modifying the edge node client files) at the edge layer only. In Scenario-3, a more aggressive attack landscape is created by having attackers at both the edge and fog layers.

Fig. 11
figure 11
Scenario-1: no malicious nodes (Green—Server node, Yellow—Fog node, Blue—Edge node), Scenario-2: malicious nodes at edge layer only (Green—Server node, Yellow—Non-malicious Fog node, Blue—Non-malicious Edge node, Red—Malicious Edge node) and Scenario-3: malicious nodes at fog layer as well as at edge layer (Green—Server node, Yellow—Non-malicious Fog node, Blue—Non-malicious Edge node, Encircled-Red—Malicious Fog node, Red—Malicious Edge node) (color figure online)

Full size image
Performance of comparative analysis of GLSF2IoT under various attacks
The parameters chosen for analyzing the performance of GLSF2IoT below the impact of blackhole, selective forward, collusion, and DDoS attacks are given in Table 9, and the performance of GLSF2IoT is tabulated in Table 10.

Table 9 Parameters for performance analysis
Full size table
Table 10 Performance of GLSF2IoT under various attacks and uncertain attack scenarios
Full size table
The detailed TPR analysis of GLSF2IoT is given in Figs. 12, 13, 14 and 15.

Fig. 12
figure 12
TPR for blackhole attack in scenario’s 2 and 3

Full size image
Fig. 13
figure 13
TPR for selective forward attack in scenario’s 2 and 3

Full size image
Fig. 14
figure 14
TPR for collusion attack in scenario’s 2 and 3

Full size image
Fig. 15
figure 15
TPR for DDoS attack in scenario’s 2 and 3

Full size image
It is seen from the graphs that no output is obtained until five minutes. It must be realized that this is the set-up time of the network, i.e., the time required for all units to synchronize. As soon as that is achieved, GLSF2IoT detects the attacks in real-time. Moreover, the fluctuations in the results are due to uncertainty in the time intervals when the attacks get launched. The uncertainty is introduced to make the simulated network closer to the realistic/physical IoT network scenario.

Also, Fig. 16 orchestrates the detection accuracy of individual attacks and the cumulative accuracy of GLSF2IoT under the influence of all the attacks launched together.

Fig. 16
figure 16
Attack detection accuracy

Full size image
The results obtained indicate that GLSF2IoT's success in detecting these attacks is impressive and admirable, because even in the highly aggressive attack environment, when all the attacks are launched together, the cumulative attack detection accuracy remains more than 90%. Figure 17 compares the detection accuracies of GLSF2IoT with various contemporaries, and it is observed that it gives far better results.

Fig. 17
figure 17
GLSF2IoT against state-of-the-art attack detection strategies

Full size image
Performance of GLSF2IoT in heterogeneous and scalable IoT
Heterogeneity is the classical characteristic of IoT. Diversity in software, hardware, and process requirements is justified by the range of functions performed by IoT devices. To show that the performance of GLSF2IoT in detecting malicious nodes remains unaffected under heterogeneity and scalability, we implemented an IoT network (Fig. 11 scenario-3) initially with 60 edge nodes. Out of these 55 nodes, we configured 30 as sky-motes and the remaining 25 as Z1-Zolertia motes. For testing the scalability of GLSF2IoT, the number of nodes was smoothly increased from 60 (20 attacker nodes; 12 at edge and 8 at fog) to 120 (40 attackers; 30 at the edge, 10 at the fog), and finally to 200 (85 attackers; 70 at the edge, 15 at the fog).

Sky-motes have 8 MHz Texas Instruments, MSP430 low power microcontroller, 10 KB RAM and 48 KB flash memory, 16-pin expansion support and optional SMA antenna connector [47], whereas Z1-Zolertia motes are equipped with 16 MHz MSP430F2617 low power microcontroller, 8 KB RAM, and 92 KB flash memory, 52-pin expansion support [48]. As such, there is heterogeneity in the capabilities and feature sets of the nodes.

With negligible (1.5%) variation in the detection accuracies of various attacks (Fig. 18), it is proven that GLSF2IoT works efficiently for larger IoT networks and performs the same for both heterogeneous and non-heterogeneous IoT networks, i.e., it is scalable and generic.

Fig. 18
figure 18
Attack detection accuracy of GLSF2IoT in heterogeneous and scalable IoT networks

Full size image
Performance comparison of GLSF2IoT and cloud-based security architectures
The State-of-art techniques proposed by [31, 32, 34, 35] use cloud-based IoT architectures for providing security against various threats. Although the cloud provides massive storage and processing capabilities to IoT networks, it suffers from inherent disadvantages [49,50,51], viz. (a) being located at a distance from the edge IoT devices, (b) Huge bandwidth utilized for device-cloud communication, and (c) latency in furnishing the requested service. Fog-based IoT architecture, on the other hand, offers cloud services to the edge devices from the perimeter of the network, sharing the load of the network as all the devices don’t need to connect directly with the cloud server [16].

To compare the two architectures, i.e., GLSF2IoT and cloud-based security, we compare the overhead laid on the edge devices. The overhead is calculated by analyzing the energy consumption of the edge nodes. This parameter is affected by the number of retransmissions required for establishing a connection with the cloud. The comparison is shown in Figs. 19, 20 and 21.

Fig. 19
figure 19
Network overhead comparison between GLSF2IoT and cloud-based security architectures for detecting Blackhole and Selective forwarding attacks in IoT networks

Full size image
Fig. 20
figure 20
Network overhead comparison between GLSF2IoT and cloud-based security architectures for detecting Collusion attack in IoT networks

Full size image
Fig. 21
figure 21
Network overhead comparison between GLSF2IoT and cloud-based security architectures for detecting DDoS attack in IoT networks

Full size image
Figures 19, 20 and 21 orchestrate that the fog-based GLSF2IoT security posture puts considerably less overhead on the edge devices than its cloud-based contemporaries [31, 32, 34, 35]. This is because all devices are directly connected to the cloud in cloud-based security designs. Because of the limited bandwidth, more energy is consumed for packet transmission and re-transmission attempts. The edge devices have to perform some security functions themselves. In contrast, GLSF2IoT shares the load of providing services and attack detection among multiple fog nodes, thereby sparing edge devices. As such, less number of retransmissions, and almost no pressure of attack detection is put on the edge nodes, which ultimately leads to less overhead.

Also, the number of devices being monitored by every single fog node is far less than the entire network monitored by a single cloud. Figures 22, 23 and 24 compare the detection accuracies of GLSF2IoT and cloud-based security designs [31, 32, 34, 35]. It is seen that there is a massive gap between the accuracies of these architectures. Henceforth, fog-based architecture must be used for providing security to IoT environments where less latency, less bandwidth, and consideration to real-time analytics are needed.

Fig. 22
figure 22
Comparison of attack detection accuracy between GLSF2IoT and cloud-based security architectures for detecting blackhole and selective forwarding attacks in IoT networks

Full size image
Fig. 23
figure 23
Comparison of attack detection accuracy between GLSF2IoT and cloud-based security architectures for detecting Collusion attack in IoT networks

Full size image
Fig. 24
figure 24
Comparison of attack detection accuracy between GLSF2IoT and cloud-based security architectures for detecting DDoS attack in IoT networks

Full size image
GLSF2IoT and energy overhead
To calculate the energy overhead on the edge devices in the presence of GLSF2IoT security posture, we first calculated the average energy consumed by edge devices under normal conditions (scenario-2 of Fig. 11). Then we simulated scenario-3, instantiated GLSF2IoT, and noted the average energy consumed by edge devices. The results are shown in Fig. 25. The energy value was calculated using the power-trace tool available in cooja. It gives the time taken by motes for transmission, reception, sleep, and processing of data. Using these values, we calculate the expression for energy as (Eq. 17):

𝐸=Voltage×(𝑡𝑇×19.5+𝑡𝑅×21.8+𝑡𝑆×0.0545+𝑡𝑃×1.8)
(17)
Fig. 25
figure 25
Comparison of energy consumed by edge nodes in malicious (with GLSF2IoT) and non-malicious IoT network

Full size image
And Power as (Eq. 18):

Power(mW)=𝐸(mJ)/Time(𝑠)
(18)
where 𝑡T,𝑡R are the times spent by motes for transmission and reception of packets, respectively, 𝑡𝑆 is time spent during sleep mode or low power mode, and 𝑡P is the time spent by mote during the processing of data. For checking the working conditions, i.e., voltage and current supplied in various modes of Tmote-sky motes, refer to [47]. Figure 25 shows the comparison of average energies consumed by edge IoT devices under normal and malicious environments.

Figure 25 shows a nominal variation in the average energy consumed by edge nodes while comparing a non-malicious IoT network with the malicious one. The overall energy and packet transmission overheads are depicted in Figs. 26 and 27. This proves that GLSF2IoT is lightweight, i.e., for providing security, it doesn’t rely on the already scarce energy of edge nodes.

Fig. 26
figure 26
Overall energy overhead for attack detection by GLSF2IoT

Full size image
Fig. 27
figure 27
Overall overhead due to extra packets transmitted by IoT nodes for attack detection using GLSF2IoT

Full size image
Figures 26 and 27 indicate that the overall energy or extra packet transmission overhead in the presence of GLSF2IoT on edge devices is 5%. Moreover, this overhead on cloud and fog nodes is not more than 30% of the energy consumed or other resources used by the devices.

GLSF2IoT and memory overhead
IoT edge devices are constrained by storage space [52]. Therefore, the security posture designed for IoT must put less memory overhead on the edge devices. We calculated the overall memory overhead on network devices to implement GLSF2IoT. It was seen that it uses 4.89 KB of ROM for the implementation. From the detailed memory overhead shown in Table 11, it is evident that GLSF2IoT puts negligible memory overhead on the devices. Figure 28 compares the memory overhead of GLSF2IoT with those of two crucial state-of-art methods [34, 35].

Table 11 Memory overhead on various IoT network devices for implementing GLSF2IoT
Full size table
Fig. 28
figure 28
Memory overhead comparison in implementing GLSF2IoT and other state-of-art security mechanisms to detect malicious attackers in IoT networks

Full size image
The results in Fig. 28 are calculated by varying the number of IoT network devices and implementing GLSF2IoT and security mechanisms given in [34, 35] separately. This is done to resonate with the methods used for comparison. While [34] uses a maximum of 32 nodes, [35] creates a 15 node topology. To this end, we used a total of 9 nodes (1-server, 2- fog nodes, and 6-edge devices), 32 nodes (1-server, 4-fog nodes, and 27-edge devices), and 65 nodes (1-Server, 9-fog nodes, and 55-edge devices) for the first, second and third readings. In each scenario, we calculated the overall memory overhead for the mentioned security mechanism. Figure 28 indicates that GLSF2IoT puts the least memory overhead than other benchmark security mechanisms.

Suitability of GLSF2IoT for other IoT attacks
Although we have used the blackhole, selective forwarding, collusion, and DDoS attacks for validating the efficacy, and credibility of GLSF2IoT, we do not in any way contend that only these attacks are worth tackling in an IoT set-up, but that they are dangerous, have high-impact, and can beat the purpose of any IoT network [25,26,27]. It is, however, critical that its validity against other attacks that could be launched in an IoT-fog set-up be pointed out. Table 12 reveals GLSF2IoT's applicability to other IoT attacks.

Table 12 Applicability of GLSF2IoT to other cyber attacks
Full size table
Conclusion and future work
The paper analyzed the inevitability of digital annihilation without cyber-security. It was ascertained that if the sharing of data and information is needed beyond the "stand-alone" closed model, then security cannot be layered as an afterthought. As IoT brings more devices online, incorporating modern technologies into historically analog environments, increased security risks are preordained. This article studies the most dangerous attacks in the uncertain IoT environment and proposes GLSF2IoT that incorporates the advantages of fog computing and fuzzy logic into the modeling of a lightweight security system for IoT. The work in this paper is the first that has dealt with the heterogeneity and uncertainty of the IoT environment. With the four procedures, and two layers working in tandem, it detects most of the attacks tossed in a constrained, heterogeneous, scalable and uncertain IoT landscape. Performance results affirm GLSF2IoT 's optimality in attaining greater accuracy rates. Our work also helps to maintain the vital IoT component, i.e., people in the form of expert knowledge included in maintaining security. GLSF2IoT operates in real-time, in contrast to the bulk of attack detection systems now available in the literature, which operate in post-attack mode.

In immediate future, we would like to attempt an extension to GLSF2IoT for hardware compromise attacks. Efforts will be made to further reduce the false alarms, energy, and memory overheads in the overall network. Also, a ransomware attack in an IoT setting can be extremely dangerous given that the IoT devices have come very near to the personal lives of people. It can not only cause monetary loss, but lead to critical information breach and life risks. It has the potential to have an effect on the entire spectrum of security services, including transparency, confidentiality, and availability. For handling these ransomware attacks, we intend to use honeypot and Deep Learning-based method. A honeypot will lure the attacker to itself to analyze its modus operandi. The deep neural network will be trained to identify ransomware attacks and will be deployed on the honeypots. Consequently, we will be able to detect the ransomware attacks in real-time. However, given the extreme sophistication of cyber attackers today, detection of honeypots by them is also a huge challenge. To ensure the honeypots remain undetectable, we will investigate and evaluate potential strategies for detecting SSH and telnet honeypots. Also, we will check the applicability of unsupervised Deep Learning models and Reinforcement Learning to ransomware attack detection. Due to the intrinsic complexity of ransomware attacks, there are scenarios that cannot be characterized by a simple label. As a result, unsupervised Deep Learning-based approaches and Reinforcement Learning could perform well even if no prior knowledge of attack is available, which is an obvious advantage.

Keywords
Fog-IoT
Fuzzy logic
Blackhole attack
Collusion attack
DDoS attack
Insider attacks