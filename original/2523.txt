Real-world engineering design problems are widespread in various research disciplines in both industry and industry. Many optimization algorithms have been employed to address these kinds of problems. However, the algorithm’s performance substantially reduces with the increase in the scale and difficulty of problems. Various versions of the optimization methods have been proposed to address the engineering design problems in the literature efficiently. In this paper, a comprehensive review of the meta-heuristic optimization methods that have been used to solve engineering design problems is proposed. We use six main keywords in collecting the data (meta-heuristic, optimization, algorithm, engineering, design, and problems). It is worth mentioning that there is no survey or comparative analysis paper on this topic available in the literature to the best of our knowledge. The state-of-the-art methods are presented in detail over several categories, including basic, modified, and hybrid methods. Moreover, we present the results of the state-of-the-art methods in this domain to figure out which version of optimization methods performs better in solving the problems studied. Finally, we provide remarkable future research directions for the potential methods. This work covers the main important topics in the engineering and artificial intelligence domain. It presents a large number of published works in the literature related to the meta-heuristic optimization methods in solving various engineering design problems. Future researches can depend on this review to explore the literature on meta-heuristic optimization methods and engineering design problems.

Introduction
Optimization problems can be found in pretty much any field of study [1]. Some of the most popular areas are: medical image, engineering problem [2,3,4], signal processing [5], cloud computing [6,7,8,9,10,11,12], feature selection [13,14,15], deep learning [16,17,18,19], text mining [20,21,22,23,24,25], photovoltaic models [26,27,28,29,30], and urban development [31, 32], others [33,34,35].

There are several techniques developed to tackling the different optimization problems [36,37,38,39]. Each algorithm has a particular behavior and process, which suite some problems by solving them efficiently and not suitable for others [40,41,42]. However, most of them can be classified into two groups. The first group is the traditional methods such as gradient descent and Newton [43]. These methods, in general, are easy and simple, but they are considered time-consuming methods, and they provide only one solution at each iteration. The methods belong to the second group of techniques that aim to avoid the limitation of the traditional method, these methods named meta-heuristic (MH) [44, 45]. In general, these MH techniques are inspired by nature, physics laws, human behavior. These methods can be classified into swarm-based, evolutionary-based, human-based, and natural phenomena-based methods [46, 47].

The swarm-based methods emulate the behavior of animals, fish, birds and other swarms during phase to find their food [48, 49]. This kind of MH techniques including salp swarm algorithm (SSA) [50], squirrel search algorithm (SSA) [51], krill herd algorithm (KHA) [52], gray wolf optimization (GWO) [53], and particle swarm optimization (PSO) [54, 55], whereas the natural phenomena-based methods simulate the phenomena from nature such as spiral, light, wind and rain. These methods include water cycle algorithm (WCA) [56], wind-driven optimization (WDO) [57], simulated annealing (SA) [58], gray wolf optimizer (GWO) [59], firefly algorithm (FA) [60], genetic algorithm (GA) [61], symbiotic organisms search (SOS) [62], water drops algorithm (WDA) [63], glowworm swarm optimization algorithm (GSOA) [64], bat algorithm (BA) [65], teaching–learning optimization algorithm (TLO) [66], gravitational search algorithm (GSA) [67], Aquila optimizer (AO) [68], chemical reaction optimization (CRO) [69] Electromagnetism algorithm [70], and others [71,72,73].

The human-based methods emulate the behavior of human as an optimization methods. These methods are including seeker optimization algorithm (SOA) [74], teaching learning-based optimization (TLBO) [75], volleyball premier league algorithm (VPL) [76], poor and rich optimization algorithm (PROA) [77], chimp optimization algorithm (COA) [78], human mental search (HMS) [79], league championship algorithm (LCA) [80], and cultural algorithm (CA) [81].

Evolutionary-based methods inspirit their mechanism from simulating the concepts of natural genetic which applied imitates the principle of natural genetic [82, 83]. These methods depend on using crossover, mutation, and natural selection as operators. Some examples of these methods are evolutionary programming (EP) [84], genetic algorithm (GA) [85, 86], genetic programming (GP) [87], differential evolution (DE) [88], interior search algorithm (ISA) [89], evolution strategies (ES) [90], and arithmetic optimization algorithm (AOA) [91].

The main contributions of this study can be summarized as:

1.
Reviewed the applications of meta-heuristic optimization methods to tackling a different set of engineering problems.

2.
Evaluated several variants of meta-heuristic optimization methods that applied to engineering problems.

3.
Defined the problems and challenges in the domain of engineering problems for using meta-heuristic optimization methods.

The rest of this paper is organized as follows. Section 2 presents the definitions and procedures of the most common engineering design optimization problems. Section 3 presents the recent optimization algorithms that have been used to solve different engineering design optimization problems. In Sect. 4 discussions and more informations regarding the algorithms and problems are given. Finally, in Sect. 6, the conclusions and potential feature work directions are given.

Definitions of the most common engineering design problems
In this section, the most common engineering design problems are presented. The mathematical representation and definition are given to explain the problems clearer [92, 93]. These problems are given as follows.

The problem with welded beam design

The problem with tension/compression spring design

The problem with pressure vessel design

The problem with the 3-bar truss design

The problem with speed reducer

The problem with cantilever beam design problem

The problem with multiple disc clutch brake problem

These are the most well-known engineering design problems in the real world. Usually, it needs an active method to find its optimal parameters to find the optimal design. Each problem has some parameters (variables) that need to be adjusted. Also, some constraints are given to provide the values of the variables within the given range. The following description shows the general details of the optimization problem.

Generally, bound-constrained and common constrained optimization problems are decided to investigate the utility of any optimization method. Every design vector is regularly demanded to give the bound-constrained for any engineering or optimization problem [94,95,96]:

𝐿𝐵(𝑗)≤𝑥(𝑖,𝑗)≤𝑈𝐵(𝑗),𝑗=1,2,3,…,𝑛
(1)
where 𝐿𝐵(𝑗) and 𝑈𝐵(𝑗) are the lower bound and upper bound of the given problem for the position 𝑥(𝑖,𝑗), and n is the length of given positions (vector size). Furthermore, the common constrained optimization problem can usually be given as follows.

𝑚𝑖𝑛𝑓(𝑋)𝑋={𝑥(110,𝑥(1𝑗),…,𝑥(1𝑛)}𝑠.𝑡.𝑔𝑖(𝑋)≤0,𝑗=1,2,3,…,𝑚ℎ𝑘(𝑋)=0,𝑘=1,2,3,…,𝑙𝐿𝐵(𝑗)≤𝑥(𝑖𝑗)≤𝑈𝐵(𝑗),𝑗=1,2,3,…,𝑛
(2)
where m presents the number of constraints given in the problem, and l presents the number of equality/equilibrium constraints.

By implementing the cost function in the evaluation of the used optimization method, all the given constrained problems in Eq. (2) are outlined into the bound-constrained structure. The used cost function can be merged into the used objective function for each infeasible solution. The cost function is calculated to be a result of its homogeneity in situations. It only requires an assistant cost function and [97,98,99,100] is satisfactory for all different problems.

Problem 1: Welded beam design
The welded beam design is one of the common engineering optimization problems, and it is unconstrained in life. In this problem, four decision variables need to be optimized by finding its optimal values, namely, h, l, t, and b. These variables are positive integers that fall inside a fixed range. The drew of the welded beam design is presented in Fig. 1. This design problem intends to reduce the cost of the welded beam in real life. The mathematical representation of this problem is presented as follows.

Fig. 1
figure 1
Welded beam design problem

Full size image
Consider 𝑥→ = [𝑥1 𝑥2 𝑥3 𝑥4] = [ h l t p],

Minimize f(𝑥→) = 1.10471𝑥21 𝑥1+0.04811𝑥3 𝑥4(14.0+𝑥2)

Subject to 𝑔1(𝑥→) = 𝜏 (𝑥→) − 𝜏max ≤ 0,

𝑔2(𝑥→)=𝜎 (𝑥→) − 𝜎max ≤ 0,

𝑔3(𝑥→) = 𝛿 (𝑥→) −𝛿max ≤ 0,

𝑔4(𝑥→) = 𝑥1 − 𝑥4 ≤ 0,

𝑔5(𝑥→) = p - 𝑝𝑐(𝑥→) ≤ 0,

𝑔6(𝑥→) = 0.125 - 𝑥1 ≤ 0,

𝑔7(𝑥→) = 1.10471𝑥21 + 0.04811𝑥3 𝑥4(14.0 + 𝑥2) −0.5 ≤ 0,

Variables range (0.1 ≤ 𝑥1, 𝑥4 ≤ 2), (0.1 ≤ 𝑥2, 𝑥3 ≤ 10), where 𝜏(𝑥→) = (𝜏′)2+2𝜏′𝜏″𝑥22𝑅+(𝜏″)‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√, 𝜏′ = 𝑃2𝑥1𝑥2√,

𝜏″ = 𝑀𝑅𝐽, M = P(L +𝑥22), R = 𝑥224+(𝑥1+𝑥32)2‾‾‾‾‾‾‾‾‾‾‾‾‾√,

𝑃𝑐(𝑥→) = 𝑥23𝑥640√4.013𝐸𝐿2, ( 1 − 𝑥32𝐿 𝐸4𝐺‾‾‾√), (1−𝑥32𝐿𝐸4𝐺‾‾‾√),

J = 2 {2𝑥1𝑥2‾‾‾‾‾‾√[𝑥2𝑥4+(𝑥1+𝑥32)2]}, 𝜎 (𝑥→) = 6𝑃𝐿𝑥4𝑥23, 𝛿 (𝑥→)=6𝑃𝐿3𝐸𝑥4𝑥23,

Note that, P = 6000 lb, L = 14, 𝛿max = 0.25, E = 30 × 16psi, G = 12 × 106psi, 𝜏max = 13600 psi, and 𝜎max= 30000 psi.

Problem 2: Tension/compression spring design problem
The tension/compression spring design is also one of the common engineering optimization problems, and it is unconstrained in life. In this problem, three decision variables need to be optimized by finding their minimum values, namely, d, D, and N. These variables are positive integers that take numbers in fixed ranges. The drew of the tension/compression spring design problem is presented in Fig. 2. This design problem intends to find the minimum cost of the tension/compression spring in real life. The mathematical representation of this problem is provided as follows.

Fig. 2
figure 2
Tension/compression spring design problem

Full size image
Consider 𝑥→ = [𝑥1 𝑥2 𝑥3] = [d D N],

Minimize f(𝑥→) = (𝑥3+2)𝑥2 𝑥21,

Subject to 𝑔1(𝑥→) = 1−𝑥3𝑥3271785𝑥41 ≤ 0,

𝑔2 = (𝑥→) = 4𝑥22−𝑥1𝑥112566(𝑥2𝑥31−𝑥41)+15108𝑥21 ≤ 0,

𝑔3 = (𝑥→) = 1−140.54𝑥1𝑥22𝑥3 ≤ 0,

𝑔4 = (𝑥→) = 𝑥1𝑥21.5−1 ≤ 0,

Variables range (0.05 ≤ 𝑥1 ≤ 2), (0.25 ≤ 𝑥2 ≤ 1.30), (2.00 ≤ 𝑥3 ≤ 15),

Problem 3: Pressure vessel design problem
The pressure vessel design is a famous unconstrained engineering optimization problem in the real world. In this problem, four decision variables need to be optimized by finding their minimum values, namely, 𝑇𝑠, 𝑇ℎ, R, and L. The problem variables are positive integers that come inside fixed ranges. The drew of the pressure vessel design problem is presented in Fig. 3. This engineering problem intends to find the minimum cost of the pressure vessel. The mathematical presentation of this problem is provided as follows.

Fig. 3
figure 3
Pressure vessel design problem

Full size image
Consider 𝑥→ = [𝑥1 𝑥2 𝑥3 𝑥4] = [ 𝑇𝑠 𝑇ℎ R L],

Minimize f(𝑥→) = 0.6224𝑥1 𝑥3 𝑥4 + 1.7781𝑥2 𝑥23 + 3.1661𝑥21 𝑥4 + 19.84𝑥21 𝑥3,

Subject to 𝑔1(𝑥→) = −𝑥1 + 0.0193𝑥3 ≤ 0,

𝑔2(𝑥→) = − 𝑥3 + 0.000954𝑥3 ≤ 0,

𝑔3(𝑥→) = − 𝜋 𝑥23 𝑥4 − 43 𝜋 𝑥33 +1296000 ≤ 0,

𝑔4(𝑥→) = 𝑥4 − 240 ≤ 0,

Variables range (0 ≤ 𝑥1, 𝑥2 ≤ 99), (10 ≤ 𝑥3, 𝑥4 ≤ 200),

Problem 4: 3-bar truss design
The 3-bar truss design is also a famous unconstrained engineering optimization problem in the real world. In this problem, three main decision variables need to be optimized by finding their minimum values, namely, A1, A2, and A3, where 𝐴1=𝐴3. All the given variables are positive integers that come inside fixed ranges. The 3-bar truss design is given in Fig. 4. This design problem intends to find the minimum cost weight of the 3-bar truss. The mathematical representation of this problem is provided as follows.

Fig. 4
figure 4
3-bar truss design problem

Full size image
Minimize f(x) = (22𝑥1‾‾‾‾√ + 𝑥2)× l

Subject to:

𝑔1x = 𝑥1√𝑥1+𝑥22√𝑥21+2𝑥1𝑥2 P − 𝜎 ≤ 0

𝑔2x = 𝑥22√𝑥21+2𝑥1𝑥2 P-𝜎 ≤ 0

𝑔3x = 12√𝑥2+𝑥1 P-𝜎 ≤ 0

l = 100cm, P = 2 kN/𝑐𝑚2, 𝜎 = 2 kN/𝑐𝑚2,

Variables range (0 ≤ 𝑥𝑖 ≤ 1, i = 1,2)

Problem 5: Speed reducer
The speed reducer design is also a widespread unconstrained engineering optimization problem in the real world. In this problem, seven main decision variables need to be optimized by finding their minimum values, namely, m, z, 𝑙2, 𝑙1, 𝑑1, 𝑑2, b, and b. All the given variables are positive integers that come inside fixed ranges. The drew of the speed reducer design is given in Fig. 5. This design problem intends to find the minimum cost weight of the speed reducer. The mathematical representation of this problem is provided as follows.

Fig. 5
figure 5
Construction of a speed reducer

Full size image
Consider 𝑥→ = 0.7854𝑥1𝑥22(3.3333𝑥23+14.9334𝑥3−43.0934)−1.508𝑥1(𝑥26+𝑥27)+7.4777𝑥36+𝑥37+0.7854𝑥4𝑥26+𝑥5𝑥27

Subject to:

g(1) = 27𝑥1𝑥22𝑥3−1≤0,

g(2) = 397.5𝑥1𝑥22𝑥23−1≤0,

g(3) = 1.93𝑥34𝑥2𝑥3𝑥46−1≤0,

g(4) = 1.93𝑥35𝑥2𝑥3𝑥47−1≤0,

g(5) = 1110𝑥36(745𝑥4𝑥2𝑥3)2+16.9×106‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√−1≤0,

g(6) = 185𝑥37(745𝑥5𝑥2𝑥3)2+157.5×106‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√ −1 ≤ 0,

g(7) = 𝑥2𝑥340−1≤0,

g(8) = 5𝑥2𝑥1−1≤0,

g(9) = (𝑥1/12𝑥2)−1≤0,

g(10) = 1.5𝑥6+1.9𝑥4−1≤0,

g(11) = 1.1𝑥7+1.9𝑥5−1≤0

Variables range (2.6 ≤ 𝑥1 ≤ 3.6), (0.7 ≤ 𝑥2 ≤ 0.8), (17 ≤ 𝑥3 ≤ 28), (7.3 ≤ 𝑥4 ≤ 8.3), (7.3 ≤ 𝑥5 ≤ 8.3), (2.9 ≤ 𝑥6 ≤ 3.9), (5 ≤ 𝑥7 ≤ 5.5)

Problem 6: Cantilever beam design
The cantilever beam design is also a widespread unconstrained engineering optimization problem in the real world. In this problem, five main decision variables need to be optimized by finding their minimum values, namely, x1, x2, x3, x4, and x5. All the given variables are positive integers that come inside fixed ranges. The drew of the speed reducer design is given in Fig. 6. This design problem intends to find the minimum cost weight of the cantilever beam. The mathematical representation of this problem is provided as follows.

Fig. 6
figure 6
Cantilever beam design problem

Full size image
Consider 𝑥=[𝑥1𝑥2𝑥3𝑥4𝑥5]

Minimize𝑓(𝑥)=0.6224(𝑥1 + 𝑥2 + 𝑥3 + 𝑥4 + 𝑥5),

subject to:

g(x) = 60𝑥31 + 27𝑥32 + 19𝑥33 + 7𝑥34 + 1𝑥35 − 1 ≤ 0

Variables range

0.01 ≤ 𝑥1 , 𝑥2 , 𝑥3 , 𝑥4 , 𝑥5 ≤ 100.

Problem 7: Multiple disc clutch brake
The multiple disc clutch brake design is also a widespread unconstrained engineering optimization problem in the real world. In this problem, five main decision variables need to be optimized by finding their minimum values, namely, F, 𝑟𝑖, 𝑟0, t, and 𝛿. All the given variables are positive integers that come inside fixed ranges. The drew multiple disc clutch brake design is given in Fig. 7. This design problem intends to find the minimum cost weight of the multiple disc clutch brake. The mathematical representation of this problem is provided as follows.

Fig. 7
figure 7
Multiple disc clutch brake problem

Full size image
Consider x = [𝑥1𝑥2𝑥3𝑥4𝑥5]

minimize 𝑓(𝑥)=Π(𝑟2𝑜−𝑟2𝑖)𝑡(𝑍+1)𝜌

𝑠𝑢𝑏𝑗𝑒𝑐𝑡𝑡𝑜

𝑔1(𝑥)=𝑟𝑜−𝑟𝑖−Δ𝑟≥0

𝑔2(𝑥)=𝑙max−(𝑍+1)(𝑡+𝛿)≥0

𝑔3(𝑥)=𝑃𝑚𝑎𝑥−𝑃𝑟𝑧⩾0

𝑔4(𝑥)=𝑃max 𝜈𝑠𝑟 𝑚𝑎𝑥−𝑃𝑟𝑧 𝜈𝑠𝑟≥0

𝑔5(𝑥)=𝜈𝑠𝑟 𝑚𝑎𝑥−𝜈𝑠𝑟≥0

𝑔6=𝑇max−𝑇≥0

𝑔7(𝑥)=𝑀ℎ−𝑠𝑀𝑠≥0

𝑔8(𝑥)=𝑇≥0

𝑤ℎ𝑒𝑟𝑒

𝑀ℎ=23𝜇𝐹𝑍𝑟3𝑜−𝑟2𝑖𝑟2𝑜−𝑟3𝑖,𝑃𝑟𝑧=𝐹Π(𝑟2𝑜−𝑟2𝑖),

𝜈𝑟𝑧=2Π(𝑟3𝑜−𝑟3𝑖)90(𝑟2𝑜−𝑟2𝑖),𝑇=𝐼𝑧 Π 𝑛30(𝑀ℎ+𝑀𝑓)

Δ𝑟=20 mm, 𝐼𝑧=55 kgmm2, 𝑃max=1 𝑀𝑃𝑎, 𝐹max=1000 N,

𝑇max=15 𝑠, μ=0.5, s=1.5, 𝑀𝑠=40Nm,

𝑀𝑓=3Nm, 𝑛=250 rpm,

𝜈𝑠𝑟 𝑚𝑎𝑥=10 m/s, 𝑙max=30 𝑚𝑚, 𝑟𝑖 𝑚𝑖𝑛=60,

𝑟𝑖 𝑚𝑎𝑥=80,𝑟𝑜 𝑚𝑖𝑛=90,

𝑟𝑜 𝑚𝑎𝑥=110, 𝑡min=1.5,𝑡max=3, 𝐹min=600,

𝐹max=1000, 𝑍min=2, 𝑍max=9

Engineering design methods: a review
In this section, we review all optimization-based methods that have been used to solve engineering design problems.

Particle swarm optimization (PSO)
The particle swarm optimization (PSO) method is one of the simple and easy optimizers to implement. PSO imitates the behavior of flying birds. PSO is used widely to solve a variety of engineering problems. In this paper [101], an improved approach is presented based on the splitting phenomenon of astrophysics, which is implemented to move the abilities between local exploitation and global exploration. Furthermore, the Cauchy mutation is employed to evade local optima to a particular dimension of the best particle. The simulation results show that this algorithm has a practical and superior performance. In this paper [102], the authors suggest a hybridization between three algorithms genetic algorithm (GA), ant colony optimization (ACO), and PSO. This algorithm utilizes the ACO continuous and discrete probability distribution method, which will support the exploratory search of the GA algorithm. Furthermore, two methods are proposed, called mutation operators and distinctive crossover, to enhance local exploitation and global exploration. The PSO algorithm is proposed to support the exploitative search. The experimental result shows a competitive performance compared with other methods. In this paper [103], another hybridized with the sequential quadratic programming (SQP). In this paper [104], a dynamic adaptive inactivity weighting element based on a combination of GA and PSO is introduced called DAPSO-GA. In this model, the GA operators are combined into the PSO algorithm and adopted to improve the PSO performance. A few particles in the swarm that match the GA standard in the selection process with different time probability are chosen to update the particles’ positions. The experimental results show that this approach improves convergence speed and robustness.

In this paper [105], a new approach is suggested to solve the drawbacks of PSO. The suggested algorithm build based on a combination of the three algorithms: PSO, sine-cosine algorithm (SCA), and elder-Mead simplex optimization (NMS), and named PSOSCANMS. The positions of particles are updated based on the optimal position founded by NMS and SCA. The results demonstrate that PSOSCANMS achieves an outperformance compared with other algorithms (i.e., PSO, GWO, GA, etc.). In this paper [106], an improved PSO version is introduced, this algorithm called multi-population ensemble particle swarm optimizer (MPEPSO). MPEPSO consists of three searching strategies. The particles are separated into four subpopulations, including three-pointer subpopulations and one recompense subpopulation. The velocities of the particles are updated in each pointer subpopulation. Further, at each learning stage, the improved function values are saved. At each learning stage, the recompense subpopulation is allocated to the optimal strategy. The CEC 2014 test suit is used to evaluate the performance of MPEPSO, which shows superior performance.

Salp swarm algorithm (SSA)
In this paper [50], Mirjalili et al. propose a novel meta-heuristic optimizer named Salp Swarm Algorithm (SSA) and a Multi-objective SSA (MSSA). This SSA mimics the swarming attitude of salps during searching and seeking in seas. In this paper [107], a new method combines several selection schemes based on the SSA with the hill climbing (HC) algorithm named (HSSA). This algorithm comprises two steps. Firstly, to improve the exploitation of basic SSA, it combines with HC local search. Secondly, to enhance the exploration process of SSA, the selection system is applied. Furthermore, proportional selection is proposed to be a selection scheme, this hybridization with SSA called PHSSA. The results demonstrate that the HSSA enhances the local search execution in the SSA. On the other hand, the PHSSA improves the performance of the SSA by balance exploitation and exploration.

In this paper, [108], a suggested approach combines a Multi-objective method of Spotted Hyena Optimizer called (MOSHO), SSA, and the Emperor Penguin Optimizer (EPO), namely, MoSSE. The MOSHO algorithm employs to explore the search space. The SSA is used for the selection process in terms of obtaining the global solution. EPO was implemented for the improvement of the next solution. MoSSE was validated in ten IEEE CEC- 9 functions and compared with other algorithms. The results show that the proposed algorithm achieves excellent performance in accuracy, convergence speed, and searchability.

Whale optimization algorithm (WOA)
In this paper [109], a novel approach for solving engineering problems is proposed based on the well-known algorithm Whale Optimization Algorithm (WOA). The WOA was modified to solve the multi-objective problems with Non-Dominated Sorting WOA called (NSWOA). The NSWOA gathers each non-dominated Pareto best solution until the evolution reaches the last iteration. Then, the crowding measure method is based on the coverage of solutions and the bubble-net fishing approach. In this paper [110], a modified version of the WOA algorithm was proposed based on integrating the Lévy flight algorithm and chaotic local search into the WOA optimizer named BWOA. This approach aims to lead the swarm and improve the balance between the neighborhood-informed and conventional method abilities of the conventional method and examine the core searching abilities of WOA. The experimental results provide highly competitive outcomes in terms of conventional speed and accuracy. In this paper [111], an enhanced version of the WOA is proposed to overcome its drawbacks. The proposed method is MIWOALS, which stands for multi-objective improved WOA combined by a local search operator. The distance factor of WOA will be generated dynamically in this method. To avoid local optimal, the arrangement between moving to the contrast of the optimal solution and its actual values is based upon specific probability. The Pareto Archived Evolution Strategy (PAES) and Nelder-Mead method were introduced to improve the convergence speed and coverage. The MIWOALS algorithm’s performance was validated on several benchmarks multi-objective functions such as CEC 2009, GLT, and DTLZ. The MIWOALS shows an outperformance comparing to other algorithms.

Teaching-learning-based optimization (TLBO)
The teaching-learning-based optimization (TLBO) mimics the classroom teaching aspect and consists of the teacher and learner stages. In this paper [112], a combination proposed of TLBO and neural network algorithm (NNA) called TLNNA. The experimental results demonstrate that the TLNNA achieves robustness performance in terms of accuracy and computational capability. In this paper [113], a new method suggested improving the TLBO algorithm (a reformative TLBO (RTLBO) method), excluding the bias of converging to the source and improving the exploration process through convergence time. Further, a self-learning stage is proposed to support the capability of exploration after convergence. Additionally, a mutation phase is presented to limiting untimely convergence and reliable combination capacity among the population. The results provide highly competitive performance better than other algorithms.

Artificial bee colony (ABC)
ABC became a new NIA based on the swarming concept. ABC is an effective and fast method for addressing global optimization problems. In [114], authors suggest an updated version of the ABC. The concept behind the updated version Dichotomous ABC (DABC) is to shift variably in two ways to establish a different trial stage. The validity of the suggested method is demonstrated by the findings of a trade analysis conducted on three main functional optimization problems based on the literature.

In [115], a combination technique that utilizes the ABC with Evolution Strategies (ES) from the Evolutionary PSO (EPSO) is proposed. This method combines ABC’s efficiency with Evolution Strategies’ detailed local search mechanism to create an algorithm that achieves high performance with a shorter time. Numerous benchmark methods and restricted optimization-engineering problems serve as an evaluation setting for this new algorithm. The ABC+ES findings are compared to ABC along with a variety of many other optimization methods.

In [116], a new homogeneous multi-agent optimization (HMAO) has been introduced. A computer-aided molecular (CAMD) problem is used to evaluate the framework. The CAMD is an explanation selection problem developed as a mixed-integer programming problem. Different effective ant colony optimization (EACO) method is treated as separate agents in developing the HMAO system. This method is demonstrated with a practical example of the best solvent design for liquid–liquid acetic acid extraction from a waste process source. The mixture properties are calculated using the UNIFAC system based on the infinite dilution activity coefficient. According to the findings, the accuracy of the objective method efficiency gains is increased. Compared to the solvents suggested in the literature, the introduced solvents have treatment thermodynamic properties highly.

An ABC meta-heuristic continued enhanced in [117] to optimize goal programming engineering design (GP) issues. The presented scheme firstly became modified to assist the GP through minimizing variations from determined goals and next enhanced with the excellent deluge meta-heuristic, particularly during the observer bee stage, to improve its local search performance. The introduced algorithm is named the great deluge artificial bee colony (GD-ABC). Tests on different methods demonstrated that the GD-ABC converges effectively addressed these issues. The comparison was developed using the nonparametric Mann–Whitney U test.

The ABC design imitates bees’ intelligent foraging performance. There are three types of bees in ABC. Employed bees carry out discovery, and observer bees carry out exploitation, while explorer bees are in charge of looking for food sources in the available area at random. ABC is commonly employed to overcome multifaceted optimization issues due to its simplicity and lack of control parameters. ABC is effective at discovery than it is at exploitation. These two antagonistic variables determine any non-traditional algorithm’s performance. With this limitation in view, the basic ABC food locations are improved in [118] utilizing the OBL principle. I-ABC greedy is a version that has been enhanced by integrating greediness into the searching behavior. The improvements help to preserve demographic diversity while also increasing exploitation. Seven mechanical engineering (ME) design issues are employed to validate the introduced algorithm. The findings demonstrated that the presented algorithms outperform state-of-the-art algorithms.

Cuckoo search (CS)
Mlakar et al. [119] explored how the hybrid self-adaptive cuckoo Search algorithm (HSA-CS) performs when faced with constraint engineering design optimization problems. These problems remain popular in research, such as welded beam, design of pressure vessels, speed reducer, and springs design. The findings are compared with the literature, which shows that the HSA-CS produced better results. It concluded from the findings that the HSA-CS is valid for use in real-world engineering applications.

Pauline et al. [120] suggested an adaptive cuckoo search algorithm (ACSA). In its diversification method, ACSA employs an optimized phase size selection approach. This method achieves the convergence characteristic by maintaining the CSA’s balance between diversification and intensification efficiency. Three structural engineering problems show the ACSA’s efficiency in solving structural optimization problems. Performance evaluation reveals that the ACSA performed the CSA standard and other literature approaches in several case studies.

The bat algorithm (BA) performs best at solving small-scale engineering problems and has the downside of being stuck in a local minimum with slow convergence when applied to more significant issues. Pathak et al. [121] introduced an enhanced bat algorithm named UBCSIW. In the UBCSIW, the bat method can influence optimum solutions and merge with cuckoo search to discover optimal solutions globally utilizing Levy fight. Next, the bat introduces a unique speed and location search formula to find the best candidate solution. This phase balances exploration and abilities and efficiently enhances performance using the greedy technique for optimal solution selection. Lastly, the Sugeno fuzzy inertia measurement is integrated with the speed update formula, which increases accuracy. The proposed UBCSIW algorithm’s outputs are compared to those of standard BA and other state-of-the-art swarm-based algorithms.

Firefly algorithm (FA)
Kasdirin et al. [122] introduced a Hybrid Invasive Weed Firefly Optimization (HIWFO) method for solving engineering optimization design issues. The FA has a problem getting stuck at local optimums, while the invasive weed optimization (IWO) method is efficient in global exploration accuracy. The firefly approach is inserted into the invasive weed optimization in the proposed algorithm to improve the local exploration functionality of the IWO method, which already has strong searchability. The HIWFO method has better-searching efficiency and robustness, according to the analysis.

The firefly method is an effective swarm-intelligence approach influenced by fireflies’ social technique, which is focused on their flashing and attraction features. In [123], authors examined how to use the firefly algorithm to address limited global optimization problems to incorporate a dynamic penalty approach. Some benchmark issues of engineering design optimization have been employed to evaluate the applicability and efficiency of the introduced method.

In [124], an efficient fruit fly optimization algorithm (named DSLC-FOA) has been presented using critical linear and logic chaos mapping to overcome optimization problems. The DSLC-FOA is more reliable than the literature to find the best solution to four standard benchmark functions. Various engineering design optimization issues are listed as applications, with approximate optimal results given by DSLC-FOA. Results indicated that the introduced DSLC-FOA method outperforms the standard FOA algorithms.

The FA is a well-known method to tackle a variety of global optimization problems. A survey of constraint management techniques is presented by Balande et al. [125]. It provides a hybrid algorithm for tackling restrained real-world engineering optimization issues, called the Stochastic Ranking with Improved Firefly Algorithm (SRIFA). The stochastic ranking method is widely employed to keep the weight functions and penalty in balance. FA is widely utilized because it converges high performance to other meta-heuristic methods. Furthermore, SRIFA employs feasibility-based principles to keep the penalty and objective roles in check. To test and analyze the efficiency of SRIFA, SRIFA is tested with the optimization of 24 standard CEC 2006 methods and five engineering problems. It has been shown that SRIFA’s overall calculation results are higher than the simple FA findings.

Genetic algorithm (GA)
Genetic algorithms (GA) have been used to solve several optimization issues with great success. They solve complex problems that cannot or are difficult to address using traditional linear or nonlinear optimization methods. The Constrained Stochastic Optimization (CSO) problem is an example of one of these problems [126].

Engineering design challenges are challenging by nature as they include multiple variables and constraints in their essential objective functions. Engineers must ensure that the imposed requirements are met while keeping production costs down. Furthermore, the approach used may differ depending on the design issue. The key issue is determining which method is best for optimization. In the past, traditional optimization methods such as gradient search, evolutionary optimization, and random search were used to solve design problems. These are referred to as classical techniques. As a result, the approaches are less reliable. Soft-computing methods are also commonly used for function optimization. These are a lot more durable. One such approach is the genetic algorithm. In the field of stochastic optimization, it is a valuable method (non-classical). The algorithm generates a vast number of strings to arrive at the best result. Basakper et al. in [127] conducted a study to use a genetic algorithm to optimize engineering design problems and to investigate how the algorithm approaches the optimal solution efficiently and precisely. For the design variables, it selects the mathematical expression and optimizes it with the GA.

The engineering design problem is among the traditional optimization problems with complex constraint conditions and qualitative variable parameters. Genetic algorithm has made huge progress in the area of overcoming constrained optimization problems. The effects of using a traditional mathematical optimization approach are often substandard. One hybrid search strategy was developed in [128] to address the limitations of a simple genetic algorithm. The algorithm is less likely to trap optimally locally as a result of improvement. In addition, the simulation test demonstrated that the proposed method for engineering design problems had a significant impact on the reliability and precision of convergence.

xia et al. [129] presented a new approach, the optimal solution function approximation by kriging model (OSFAKM). In the kriging scheme, the optimum solution formula is approximated. A comprehensive test shows that OSFAKM achieves high results than BLGAs. To explore the effectiveness of the suggested technique, various test problems are provided.

Gravitational search algorithm (GSA)
In [130], Rather et al. investigated the performance of a chaotic gravitational search algorithm (CGSA) when addressing automated engineering scheme structures. To improve the optimization power of the gravitational search (GSA) method, various chaotic maps have been merged with gravitational constant in this analysis. CGSA has also been employed to keep the gravitational constant’s adaptive capacity. To statistically check the findings, nonparametrical statistical tests, Wilcoxon rank-sum testing, were conducted at the level of 5% significance. Besides, 11 meta-heuristic methods were employed to verify the experimental outcomes, strengthening the experimental setup’s authenticity.

Rather et al. [131] proposed a stochastic hybrid optimization technique known as the Constriction Coefficient-based Particle Swarm Optimization and Chaotic Gravitational Search Algorithm (CPSOCGSA). The PSO combination is caused by the theoretical activity of bird fluctuation and GSA, a physical heuristic technology stimulated by the Newton law on universal gravity. CPSOCGSA’s advantages have been integrated into a variety of mechanical and civil engineering design frameworks. Compared to other algorithms, the proposed method effectively decreased the cost method.

Sine cosine algorithm (SCA)
Tawhid et al. [132] introduced the multi-objective sine-cosine algorithm (MO-SCA) using the sine-cosine exploration method algorithm. MO-SCA employs the elitist non-dominated sorting and crowding distance approaches to achieve various non-domination levels and support flexibility with the optimal explication range. The expected outcome is calculated by implementing multi-target comparison problems. The suggested technique has been evaluated for problems with distinctive features in the multi-objective engineering framework. Besides, it demonstrated that the proposed method outperforms other well-known methods.

Rizk et al. [133] introduced a novel technique for tackling engineering design issues called a multi-orthogonal sine cosine algorithm (MOSCA). The suggested MOSCA combines the benefits of the SCA and MOSS to reduce the shortcomings of the SCA. The suggested MOSCA is divided into two phases. The first phase begins with the discovery method to improve investigation ability. Second, the MOSS process begins its exploration by looking for SCA that has already been discovered to increase exploitation tendencies. As an alternative, the MOSS stage will help the SCA stage searching based on in-depth exploration/exploitation models. As a result, the MOSCA could be further stable. The MOSCA algorithm is tested on various benchmark issues and four engineering design issues. The findings show that MOSCA is an effective method and, in many cases, exceeds the other techniques.

To solve engineering design problems, a hybrid SCA and SSGA have been presented in [134]. This approach combines the value of SCA’s discovery and SSGA’s exploitation capacity to reduce susceptibility to initial concentration, accelerate the quest method, and speed up confluence in an efficient time. The proposed method combines SSGA and SCA principles to produce a new generation using SSGA and SCA mechanisms. To test the reliability of the introduced method, it uses two engineering design issues. According to the findings, the proposed method outperforms other optimization methods.

Gray wolf optimizer (GWO)
Kumar et al. [135] introduced a modified technique for avoiding the premature exploration and convergence of a gray wolf optimizer (GWO) on optimization problems. To improve the efficiency of the existing GWO, three new strategies are employed. The first technique makes use of the prey weight principle. The second technique employs astrophysics principles; the gray wolves are guided into the advancement areas of the quest space. The strength of this technique is that it allows each wolf to discover from the sun’s movement in the exploration room and the fact that the wolves are required to identify at the same time. The third strategy incorporates both first and second techniques to benefit from astrophysical and prey weight strategies. The suggested GWO enhancements were validated using thirteen benchmark test functions. The suggested improvements have been compared with five well-known techniques. The experimental findings demonstrate the importance of engineering solutions of the modified technique compared with other methods.

In [136], this research aims to find an optimum synergy exploration/exploitation SCA. The exploration capabilities are enhanced, firstly with integrating the social and the cognitive element and secondly with the gray wolf optimizer (GWO) maintaining the balance between exploration and operation. The introduced method is called SC-GWO. A collection of benchmark issues are used to evaluate results. The dimensions of benchmark testing issues vary from 30 to 100 to demonstrate the SC-GWO’s scalability. The analysis of findings reveals that the proposed SC-GWO has an accurate result compared with well-known methods.

An Improved Gray Wolf Optimizer (I-GWO) has been suggested in [93] to tackle global optimization and engineering design issues. The I-GWO method takes advantage of an unusual movement approach. DLH takes a modified way to identify neighbors for each wolf; the first is exchanging knowledge between neighbors. This learning method, employed in the DLH discovery method, helps preserve diversity while balancing local and global search. The suggested I-GWO technique is tested using the CEC 2018 benchmark dataset. I-GWO is compared with well-known methods validating the effectiveness of the proposed engineering design algorithm shows.

Moth–flame optimization (MFO)
The MFO technique has been considered a new nature-inspired heuristic model. This algorithm’s key source of motivation is the transverse orientation exploration system used by moths. Moths usually fly at night by having a fixed point with the moon, a powerful method for traveling long distances in a direct route. An enhanced variant of the MFO method called LMFO has been suggested in [137]. Levy flights could improve population diversity and enhance the efficiency of the introduced technique. This method can help deliver more reliable performance in MFO’s exploration/exploitation abilities, making LMFO faster and more stable than MFO. A comparison with DA, GGSA, BA, ABC, and PSOGSA is examined and demonstrates the performance of LMFO.

Jangir et al. [138] introduced a Non-Dominated Sorting Moth Flame Optimizer (NSMFO). The suggested NSMFO method gathers all optimum solutions obtained in non-dominated Pareto before the last limit of iteration evolves. From the collection of Pareto optimum solutions, the best solutions are chosen based on a crowded distance method, as a navigating technique, to direct moths to the dominant search areas. A collection of emotional, restrained, and engineering design issues is applied to verify the efficiency of the developed NSMFO method. NSMFO’s findings are compared to well-known techniques. The effectiveness of the suggested NSMFO method validates the performance of NSMFO in terms of faster convergence in the standard unconstrained, high-reach coverage, and restricted and engineering design issue.

Sayed et al. [139] introduced a hybrid combination of MFO and SA algorithms (SA-MFO) as it combines the benefits of both techniques. To control neighbor identification, it can avoid local optimum mechanisms of SA and achieve a quick discovering learning mechanism. The suggested SA-MFO technique is evaluated, and the findings illustrate that the introduced method is efficient. Moreover, SA-MFO is compared to current meta-heuristic methods. The findings demonstrate that SA-MFO can compete with MFO and other meta-heuristic algorithms.

Shehab et al. [140] presented two levels of improvement the standard Moth Flame Optimization(MFO) method. The first stage hybridized the MFO and the local algorithm, Hill Climbing (HC), known as the MFOHC. The suggested technique takes advantage of HC to optimize searches and enhance learning to find optimal solutions for standard MFOs. The second stage adds six typical selection schemes for improvements in the quality of the selected solution by providing an opportunity to choose with high fitness and diversity. The experimental results demonstrate that the proportional selection strategy (PMFOHC) with MFOHC outperforms the other suggested algorithms.

Differential evolution (DE)
In this section, the basic, modified, and hybrid differential evolution methods are presented that have been used in the literature to solve various engineering design problems. In evolutionary methods, differential evolution is a process that optimizes any optimization problem by iteratively seeking to develop a candidate solution concerning a provided measurement of quality [141].

Basic differential evolution
A fast differential evolution (FDE) framework is developed to solve constrained engineering design optimization problems. To achieve a compromise between population discovery and exploitation, Shen et al. [142] introduced a ‘DE/current-to-ppbest/bin.’ Furthermore, to update the population, a ranking-based selection process chooses the most promising individuals from a mix of parents and offspring. FDE can achieve very competitive efficiency, according to experimental results on five instances extracted from engineering design. In terms of solution efficiency, FDE is competitive with other existing approaches. FDE achieves better performance compared with other state-of-the-art approaches when it comes to convergence speed. FDE is a good option when the number of function evaluations is small, or the cost of function evaluation is high.

Dervis et al. [143] compared the achievement of the differential evolution (DE) algorithm with some other popular, efficient versions of genetic algorithms represented by PGA, Grefensstette, Eshelman. They tested the algorithm on some popular tested functions called De Jong’s functions, where the experiments depended on measuring the speed of convergence of the algorithms. The authors used different types of tested functions like convex, non-convex, discontinuous, stochastic, and multimodal.

Kim et al. [144] modified the differential evolution mechanism by adding some parameters and modifying them; this is for the global optimization problem, which is constrained. The modification depended on utilizing a scaling factor in the initialization phase. Such factor value is fixed in the range (0, 2] where there is no previous work concerned the value of this factor, and they used the value gained empirically, which ranges from 0.4 to 1. The authors also tried to handle the constraints to penalize the violations of these constraints by utilizing a penalty function. Where to handle the constraints, there are several criteria for selection, when two solutions are feasible, the solution with best fitness value is selected, and when there is only one feasible solution, it is selected. As well as, when the two solutions are infeasible, then the one with the lower violation is selected. After such modifications, they tested the machine on some engineering problems. The experimental results proved the superiority of the proposed technique, which also applied to the robust design of a gas circuit breaker to decrease the performance variation and enhance the ability of interruption.

Pant et al. [145] enhanced the differential evolution algorithm, where their algorithm called Modified Differential Evolution (MDE), where the enhancement depended on utilizing the technique of the opposition-based learning for initializing the starting population individuals, which differs from the traditional randomness techniques. Also, in the standard DE, the individual of mutation is generated randomly, but in MDE, it is tournament-best, and finally, MDE uses just one population set in opposite for two sets in the standard DE. The authors compared the proposed MDE and the standard DE according to the average fitness of function values, standard deviation, and t-values and studied changing the dimension of the problem and its influence at the dimensions 10, 30, and 50. In terms of the results obtained, MDE surpasses DE on 11 cases, while DE outperforms MDE in 4 cases out of 15 cases in terms of average fitness.

The authors then investigated the efficiency of the MDE algorithm by applying it to two real-world problems: transformer architecture [146], and transistor modeling [146], which are restricted and unconstrained problems, respectively. Consequently, the findings revealed that the proposed algorithm can solve problems of various dimensions in less time and with fewer feature evaluations without sacrificing solution efficiency.

Melo et al. [147] minimized the weight of a tension spring to test DE to solve constrained engineering design problems and compare the findings with some current optimization methods. The results revealed that both mechanisms could get very close to the right solution for each problem after a limited number of feature tests. Furthermore, small standard deviation values may suggest the mechanism’s supremacy. Moreover, DE produced better results with a lower mean (after 50 runs) and several objective evaluations when DE compared to other standard methods.

In [148], the DE has been applied to solve mixed-integer constrained process engineering problems. In addition, the results of this advanced method are compared with Branch-and-Bound as an exact method and a genetic algorithm. The experimental results consist of two analytical formulations for the batch plant design problem and examples gathering the three issues as mentioned earlier. The results established the high performance of DE to solve this kind of problem against Branch and-Bound and GA.

Modified differential evolution
A modified DE was proposed in [145], which has three different ways from the traditional DE. The first one is to use opposition-based learning instead of uniform random numbers for the initialization. The mutant individual is tournament-best, while in the traditional DE is random. Finally, two sets of population are used in the traditional DE, where this modified version uses only one set. This modified version was evaluated in different problems, using ten benchmark functions and two real applications. It was also compared to the traditional DE, and it reached better performance in all tests except one benchmark test.

Xiao et al. [149] proposed an improved evolutionary dynamic membrane algorithm for solving restricted engineering design problems based on the improvement of particle swarm and differential evolution (IDMEA-PSO/DE). The PSO/DE search strategy is combined with the complex membrane structure of P systems in this approach. Several engineering design issues have been used to estimate IDMEA-PSO/DE results. Simulation outcomes revealed that the introduced method outclasses various algorithms presented in the literature.

Ao and Chi [150] presented a new modified version of the DE using a mutation operator that generates multiple trial vectors that makes the best of selected multiple parents to enhance the probability of creating optimal offspring. Also, they proposed a new adaptive control parameter to improve the capacity of adaptation. It was applied in different constrained engineering optimization problems and compared to related methods. The modified version achieved significant performance, and it can be considered an efficient optimization algorithm that outperforms the traditional DE.

Ali et al. [151] proposed two modified versions of the DE, namely, DE with Parent Centric Crossover (DEPCX) and DE with probabilistic Parent Centric Crossover (Pro. DEPCX). The main modification of these two modified versions is to apply parent centric mechanism as a crossover operator in the mutation phase. It was tested with different nonlinear engineering design problems in comparison with the traditional DE. The outcomes confirmed that the two modified versions enhanced the convergence rate of the traditional DE.

In [152], another modified DE was proposed depending on the global competitiveness ranking. In this modified version, a modified mutation, self-adaptive control parameters, modified selection, and inversion operation are introduced to obtain global solutions. The global competitive ranking is incorporated to obtain the fitness of individual solutions. Sixteen engineering design optimization problems were utilized to evaluate the modified DE, which showed competitive performance compared to other methods.

In [147], a modified DE with a simple penalty function was applied to solve constrained engineering problems, using five mutation strategies. These strategies are employed with a straightforward strategy to handle constraints. It was evaluated on minimizing the weight of a tension/compression spring and the pressure vessel design. Also, it was compared to several well-known algorithms, and it reached significant performance, especially in terms of standard deviations.

In [153], a Multi-View DE approach was proposed for solving constrained and unconstrained engineering optimization tasks. This DE variant uses several mutation strategies to create different views for each iteration in the current population. After that, views are combined based on the winner-takes-all scheme, which automatically leads to balance exploitation and exploration.

In [154], a new modified self-adaptive strategy to control parameters in DE (ISADE), is proposed. Three mutation operators of the DE were chosen as candidates to be employed to individuals in the generated population because of their ability to improve solutions with different characteristics. It showed significant performance in solving constrained engineering optimization problems.

Muangkote in [155] proposed an improved constrained DE, called ICDE to handle constrained optimization problems in ME. The developed ICDE uses an archiving-based adaptive tradeoff model to deal with constraints. Also, another modification was applied to the ICDE using the penalty technique to handle the constraints. These two modifications, called ArATM-ICDE and Penalty-ICDE, were evaluated in ME constrained problems, and the ArATM-ICDE showed better performance.

Gong et al. [156] presented an improved constrained DE for solving constrained engineering problems. They proposed two improvements to enhance the traditional DE. The first one is to apply a ranking-based mutation operator to enhance converge of the DE. The second improvement is by applying a dynamic diversity mechanism is applied to maintain solutions. Twenty-four benchmark functions were utilized to test the proposed rank-iMDDE, and the results showed that it improved the quality of solutions.

To handle a nonlinear computing and engineering design problems, an improved differential evolution algorithm (IDEA) was presented by tsai [157]. The Taguchi form, sliding stages, and DEA algorithm are combined in the introduced IDEA. The DEA holds a strong microspace exploration capability with fewer control parameters. The orthogonal design with sliding stage and acknowledgment table’s hierarchical reasoning capacity is employed to identify the best individuals on microspace as future offspring. As a result, the presented IDEA on exploration and exploitation is well improved and developed. It examines the performance of the evolutionary parameters on the IDEA’s results. The IDEA demonstrates its efficiency comparing with DEA and the real-coded genetic algorithm. The IDEA was employed to overcome engineering design optimization issues and showed that it is more reliable. Based on the obtained results, the proposed IDEA achieves more reliable results than the introduced in the literature.

Moreover, Mohamed [158] developed a new DE method, called NDE for constrained optimization problems. A new triangular mutation rule was applied to boost the performance of the traditional DE. The NDE was tested on five CEC-2006 benchmark functions and compared to different methods. It had competitive performance using several evaluation metrics.

Mohamed et al. [159] developed an enhanced DE, called EDDE, using information given by reasonable individual solutions and bad individual solutions in the population. This new mutation process improved the efficiency of the balance between exploration and exploitation phases.

Kizilay et al.  [160] presented a Q-Learning differential evolution method (DE-QL) to tackle engineering problem design (EDPs) issues. The output of a DE algorithm relies on a mutation technique and its variables of control, namely crossover and mutation rates. Therefore, the proposed DE-QL produces the test population via the QL method to facilitate selecting the mutation strategy between four different strategies and crossover and mutation rates of the Q table.

Sun et al. [161] proposed an enhanced atom discovery optimization with a nonlinear inertia weight function, a neighbor learning variable, and updating mechanisms. First, a nonlinear inertia weight factor is calculated to identify the prior speed and acceleration retained to better balance discovery and exploitation. Second, a neighbor learning element is inserted into the updating speed formula to significantly enhance the exchange of information among atoms, which is essential for improving the exploitation capability. Third, an update method is suggested. A greedy collecting method is used to increase the chance of identifying the best selection. Finally, the performance evaluation of the proposed algorithm was demonstrated using the state-of-the-art CEC2017 benchmark datasets and various real-world engineering design issues. The findings indicate that the introduced method outperforms the comparative methods.

Hybrid differential evolution
In [162], a hybrid DE algorithm (MDE) with a set of mechanisms, most of them are inspirit from particle swarm optimization. For example, a modified mutation operator (MMO) performs a local search method according to the neighborhood best solution and best personal solution (as performed in PSO). Since all the solutions are produced around their neighborhood, the topology of these solutions has the most extensive influence on the algorithm’s performance. In general, four types of typologies can be used named stars, wheels, circles, and random edges. In this modification of DE, circles topology has been applied to enhance its performance when applied to the tension/compression string design problem and the economic dispatch problem in the power system. The results of MDE are compared with traditional DE and PSO. These results showed that MDE is better than other methods.

Bai et al. [163] introduced a hybrid DE evolution estimation of distribution algorithm (IHDE-EDA) to solve mixed-integer nonlinear programming (MINLP) and nonlinear programming (NLP) problems. IHDE-EDA combines the information extracted from the annealing mechanism-embedded EDA and the DE technique. In general, the solution is mutated either using the traditional mutated DE operator or the annealing mechanism for EDA. This leads to improve the global searching behavior of IHDE-EDA and increase the convergence rate. To assess IHDE-EDA, it has been applied to solve the industrial-size scheduling of two-pipeline crude oil blending problem. The comparison results with other methods established the performance of IHDE-EDA.

In [164], a hybrid between DE and cuckoo search (CS) has been developed to solve constrained engineering problems. In this algorithm named CSDE, the population is divided into two parts, and one of them is updated using DE, and another is updated using CS. To validate CSDE, it has been applied to solve several optimization problems, including six constrained engineering, ten constrained, and 30 unconstrained benchmark functions. In addition, it has been compared with 12 state-of-the-art algorithms, and it has been observed that high performance of CSDE among the tested problems.

Parouha [165] introduced a ‘Memory-based DE (MBDE)’ with two ‘swarm operators’ is proposed. The suggested method is compared with several well-known approaches, and its viability is evaluated on constrained and unconstrained engineering design issues. The introduced algorithm’s competence was demonstrated by numerical, mathematical, and graphical analyses.

Aliniya et al. [166] presented a crossover-based imperialist competitive algorithm (CB-ICA). As compared to ICA, the suggested algorithm has three differences. The consistent division crossover and levy modification approach is employed to increase exploration potential in the adaptation and substitution steps. Moreover, using a constant crossover during the improvement phase with relevant information sharing guides to an optimal solution improving convergence speed. The introduced technique can also be employed to solve problems in the real world by using restriction handling technology. Therefore, CB-ICA was examined with different well-known methods and achieved satisfactory results in five engineering design problems.

Balakrishnan [167] discussed the implementation of an evaluative system for a course with high PBL and TBL features, which ensures that students are not only subjected to all learning outcomes when dealing with a project but are tested individually to prove their skills. This framework’s primary approach is an evaluative tool known as an ‘open-ended design test,’ which uses a 1:1 mapping of the team and individual learning, with scaffolding in the course structures to help. Moreover, it describes how this method was used to design two courses at the University of Manitoba, the results and feedback to the course layout, and recommendations for future courses or programs.

Samma et al. [168] proposed an improved optimizer that includes a Q-learning algorithm with SA, called QLSA. The Q-learning method, in general, is integrated into SA to improve its efficiency by adjusting its variables at execution time. The key feature of this method is the employment of a reward/penalty method to monitor the highest-rated model parameters, such as the annealing factor and mutation rate. A seven restricted engineering design issues were utilized to test the efficiency of the suggested QLSA algorithm. The results show that QLSA exceeds other studied algorithms substantially (i.e., confidence level 95 percent).

Nadimi et al. [169] introduced a multi-trial vector-based differential evolution. The technique has been implemented based on the standard MTV method. MTV merges various exploration techniques as vector test manufacturers (TVPs). The suggested MTDE technique has been tested using the CEC 2018 benchmark package, which involves multiple engineering design issues and includes hybrid, multimodal, unimodal, and composition functions. The findings demonstrate that the MTDE algorithms perform better and high accuracy of the optimization process.

Sadeeq et al. [170] presented a hybrid Bird Mating Optimizer (BMO) with the DE method. BMO has been considered a novel method with several weaknesses, including slow convergence, weak solution consistency, and trapping in local optima. A new BMO-DE algorithm is introduced to overcome these shortcomings. BMO-DE was employed to overcome several engineering design optimization problems. Experimental findings indicate that the suggested technique could suggest better solutions compared with other modern meta-heuristic methods that solve such situations.

Other optimization algorithms
In this paper [171], the Artificial Atom Algorithm proposed to solve the three-bar truss problem, which is a famous engineering problem. Compared with several algorithms such as Cuckoo search, Mine Blast algorithm, Bat algorithm, and Cricket Algorithm shows an outperformance.

In this paper [172], the authors introduce a method to solve multi-objective problems based on an artificial algae algorithm called MO-AAA. This method used the crowding distance and selected a non-dominated sorting approach to maintain the variety among the optimal solutions. To validate this algorithm, MO-AAA was implemented in different engineering problems. The results demonstrate an efficient performance and ease of implementation.

In this paper [173], a multiple criteria optimization approach is introduced. This study hybridizes the Technique for Order Preference by Similarity to Ideal Solution (TOPSIS) and the design of experiment (DoE) to identify an objective function to solve a specific engineering problem. Then, the polynomial fitting to exploratory data is in various linear regression analysis fashion. Then, the regression function is combined within the criteria constraints and mathematical pattern to find the optimal criteria set. The proposed approach is applied in two different examples and shows a great performance in solving engineering problems.

In this paper [174], Chagwiza et al. present a method to solve engineering and networking problems called GHMMAS based on a combination of the Grotschel-Holland and Max-Min Ant System method. GHMMAS shows an efficient performance in solving higher-order polynomial problems. In this paper [175], an enhanced version of the Time evolutionary optimization algorithm is proposed, named ETEO. ETEO modifies the time evolutionary part and implemented population clustering. The proposed approach shows a superior performance among other algorithms.

In this paper [176], to solve various engineering problems, a model based on the Chaos-enhanced Stochastic Fractal Search (CFS) method has been proposed. The proposed approach uses to solve the Welded Beam design, Tension/compression spring, and Pressure Vessel Design. The CFS model outperforms in terms of convergence rate and accuracy regarding the standard Stochastic Fractal search algorithm.

In this paper [177], Bilel, Najlawi, et al. presented an improved model based on the colonial competitive algorithm(CCA) to solve different engineering problems. The proposed approach is called MOCCA, which refers to multi-objective problems. The CCA algorithm combined the Pareto concept and the adaptation operators. The performance of MOCCA was tested on multimodal and unimodal functions. The comparative analysis with different algorithms uses three metrics, i.e., solution diversity, convergence, and robustness. MOCCA shows an outperformance comparing with different algorithms implemented in the same multi-objective problems.

In this paper [178], a new method is based on the Learning Automata and modified Butterfly optimization algorithm (BOA) named LABOA. Switch probability is changed by learning automata to make a balance between global and local search. To validate the performance of the LABOA, different benchmark functions are used. The simulation result compared with different algorithms (e.g., BSO, ABC, BA, CLPSO) and LABOA demonstrates an outperformance among different algorithms.

In this paper [179], Li, Guocheng, et al. introduce an enhanced version of BOA combining with the cross-entropy (CE) algorithm called BOA-CE. BOA-CE uses the co-evolution method to balance exploration and exploitation. The proposed algorithm is validated based on 19 benchmarks. BOA-CE provides competitive results in enhancing exploration and exploitation, local optima avoidance, and convergence time.

In this paper [180], a new meta-heuristic method is proposed to solve the continuous nonlinear optimization. The algorithm is inspired by black widow spiders and namely the Black Widow Optimization Algorithm (BWO). This algorithm consists of an independent stage called cannibalism, which achieves a quick convergence. The proposed algorithm shows competitive results such as fast convergence time and reaching fitness value.

In this paper [181], an improved Equilibrium Optimization Algorithm, namely, IEOA. Furthermore, IEOA hybridizes with the recycling method for setting the power distribution grid, with the best allocation of shared generators. The effectiveness of the presented approach was tested on 23 benchmark functions. To examine this approach, verification on a large-scale distributed system with a deferent of control variables is proposed on a 137-bus system. IEOA compared with a different approach such as genetic algorithm, refined genetic, harmony search, refined genetic, firefly optimization algorithms, and fireworks. The result demonstrates that IEOA is adequate and robust compared with other algorithms.

In this paper [182], a new meta-heuristic approach is proposed and called Chaos Game Optimization (CGO). The algorithm build based on the chaos theory. To validate the CGO algorithm, the results were compared with different meta-heuristic algorithms. CGO shows superior performance in most cases.

In this paper [183], a new algorithm is proposed, namely, symbiotic organisms search (SOS), which is inspired by the symbiotic mutual impact system used by organisms to survive and proliferate within the ecosystem. To demonstrate the performance of SOS, four different constrained multi-objective problems were used to prove the stability and precision of multi-objective systems (MOSOS). The algorithm shows an outperformance comparing with different algorithms.

In this paper [91], Abualigah, et al. suggested a novel meta-heuristic approach inspired by four mathematical arithmetic operators including addition, subtraction, multiplication, and division. The proposed algorithm is called Arithmetic Optimization Algorithm (AOA). The performance of AOA validates 29 benchmark functions and different engineering problems. The result reveals that AOA outperforms other algorithms.

In this paper [184], a novel meta-heuristic approach is introduced called Henry gas solubility optimization (HGSO), which imitates the behavior ruled by Henry’s law. Henry’s law is a gas low measuring the dissolved gas in a specific volume and temperature. HGSO mimics the gathering gas behavior to achieve the balance between exploration and exploitation. The HGSO performance shows a competitive result comparing to several algorithms such as PSO, GWO, and WOA.

In this paper [185], the authors analyzed the performance of several meta-heuristic algorithms in solving engineering problems. The study cover spotted hyena optimizer (SHO), GWO, bat algorithm (BA), gravitational search algorithm (GSA), WOA, MFO, ACO, and PSO. The experimental results depict that the SHO and GOW algorithm provides the best performance among other algorithms.

Overview of the studied papers
From observing the behavior of these MH techniques, it has been noticed that the evolutionary-based methods (EBMs) have high efficiency over the other MH techniques. These can be observed from Figs. 8, 9 and 10 that depict the importance of MH and engineering optimization and their influence on different fields from 2008 to 2021. So, this motivated us to present a review for the use of MH in engineering optimization problems. Summary of some studied methods is given in Table 1.

Fig. 8
figure 8
Publications of optimization methods

Full size image
Fig. 9
figure 9
Engineering optimization over years from 2008 to 2021

Full size image
Fig. 10
figure 10
Publications per publisher

Full size image
Table 1 Summary of some studied methods
Full size table
Results analysis and discussion
In this section, the results of several engineering optimization problems are given. We have taken some of the most common methods applied to solve various engineering optimization problems.

The results of the selected optimization methods for solving the welded beam problem are given in Table 2. The comparative optimization algorithms (i.e., SIMPLEX [189], APPROX [189], RO [190], DAVID [189], GSA [186], MVO [186], WOA [187], CPSO [191], CSCA [192], HS [193], OBSCA [194], GA [195], and AOA [91]) are used to compare the benchmark problem. It is clear that some algorithms got promising results, such as RO got 1.735344, MVO got 1.72645, OBSCA got 1.722315, and AOA got the best results (i.e., 1.7164). The competitiveness is high in solving this problem due to the results of the presented algorithms. Thus, a new algorithm can be proposed to induce different and better results than the existing algorithms.

Table 2 Results of the selected optimization methods for solving the welded beam problem
Full size table
The results of the selected optimization methods for solving the tension/compression spring problem are given in Table 3. The comparative optimization algorithms (i.e., RO [190], WOA [187], GSA [67], ES [198], OBSCA [194], MVO [186], CSCA [192], CPSO [191], PSO [191], CC [199], CC [199], HS [200], GA [201], and AOA [91]) are used to compare this benchmark problem. The results in general for this problem are almost similar with a small difference. AOA got the best results in solving the tension/compression spring problem compared with other well-known algorithms. Almost all the other algorithms got the same results in solving this problem, which means that this problem needs an effective new optimization algorithm to get better results. Competitiveness exists in solving this problem due to the variation in the results obtained from the state-of-the-art algorithms. Thus, a new algorithm can be proposed to obtain different results compared with the existing algorithms.

Table 3 Results of the selected optimization methods for solving the tension/compression spring problem
Full size table
The results of the selected optimization methods for solving the pressure vessel problem are given in Table 4. The comparative optimization algorithms (i.e., MVO [186], HPSO [202], WOA [187], GSA [67], CSCA [192], ES [198], CPSO [191], ACO [203], PSO-SCA [204], HS [200], GA [201], and AOA [91]) are used to compare this benchmark problem. It is clear from the results achieved in solving this problem that the outputs have apparent discrepancies, supporting the need for an effective optimization method to solve this problem efficiently. The best method from the given in Table is AOA, it got the best optimal cost (6048.7844), followed by HPSO got 6059.7410, ACO got 6059.7258, PSO-SCA got 6059.71433, and GA got 6059.94634. Compared to the comparison table’s methods, the AOA method has proven its ability to solve this problem efficiently. This method can be developed in the future to obtain more accurate results.

Table 4 Results of the selected optimization methods for solving the pressure vessel problem
Full size table
The results of the selected optimization methods for solving the 3-bar truss problem are given in Table 5. The comparative optimization algorithms including CS [206], Tsa [207], DEDS [208], Ray and Sain [209], MBA [210], SSA [50], PSO-DE [204], PSO-DE [204], AOA [91], Artificial Atom Algorithm (A3) [171], and enhanced time evolutionary optimization (ETEO) [175]. are used to analyze this benchmark problem. The results listed for solving this problem using different optimization methods indicate that the results are very close. This indicates the need to develop a new and innovative way to obtain strong and distinct results to solve this problem due to the obtained results in solving this problem. Tsa got the best results in solving the 3-bar truss problem, and it got the best optimal weight (263.68) over the comparative methods.

Table 5 Results of the selected optimization methods for solving the 3-bar truss problem
Full size table
The results of the selected optimization methods for solving the pressure vessel problem are given in Table 6. The comparative optimization algorithms (i.e., CS [206], GWO [53], AAO [211], SCA [212], MFO [213], APSO [214], WSA [215], PSO-DE [204], LGSI2 [215], LGSI4 [216], FA [217], and AOA [91]) are used to this benchmark problem. There are apparent differences in the results obtained from the methods that solve this problem. Some methods got better results than others, but it is clear that there is still a need for better approaches to solve this problem and obtain more accurate results for the variables in this problem. LGSI2, LGSI4, and AOA obtained the best results, and it is clear that the ability of AOA is good in solving real-world engineering problems; it got 2997.9157. In future work, it is possible to develop a smart way to obtain better results.

Table 6 Results of the selected optimization methods for solving the speed reducer problem
Full size table
The results of the selected optimization methods for solving the pressure vessel problem are given in Table 7. The comparative optimization algorithms (i.e., ALO [218], CS [206], MMA [219], GCA_I [219], SOS [220], GCA_II [219], MFO [213], and AOA [91]) are used to compare benchmark problems for the analysis of the MCAOA results. There are few and unclear differences in the results obtained from the methods that solve this problem. Some methods achieved better results than others at low rates, but it is clear that there is still a need for better approaches to solve this problem and obtain more accurate results for the variables in this problem. The results indicate that this problem needs a compelling optimization method to get results different from the comparative results. This problem is considered more complex than other similar problems. The AOA method obtained the best results (1.339074), and almost all the remaining methods got the same results in solving the pressure vessel problem. It is possible to develop an innovative approach for obtaining better results in future work to be clear of improvement compared to previous results.

Table 7 Results of the selected optimization methods for solving the cantilever beam problem
Full size table
The results of the selected optimization methods for solving the pressure vessel problem are given in Table 7. The comparative optimization algorithms (i.e., MVO [222], CMVO [222], MFO [223], NSGA-II [224], TLBO [75], WCA [56], and AOA [91]) are utilized to compare this benchmark problem. It is also clear from the results to solve this problem that there are few and insufficient differences based on the results taken from the methods that solve this problem. Some methods obtained better results than others, with meager and insufficient rates. However, it is clear that there is still a need for better approaches to solve this problem and obtain more accurate results for the variables in this problem. The results indicate that this problem needs a powerful way to obtain results different from the comparative results. This problem is considered more complex than other similar problems. It is possible to produce a new innovative optimization method to obtain better results and improve compared to previous work results (Table 8).

Table 8 Results of the selected optimization methods for solving the multiple disc clutch brake problem
Full size table
The results mentioned in this research included the outputs of the essential research in engineering problems. Therefore, these results will be a vital reference for researchers in this field to prepare future comparisons between the algorithms used to solve such problems. Besides, researchers may benefit from explaining the problems mentioned in this research to prepare their future research. Moreover, based on the results, it is possible to identify areas that need more significant improvement than mentioned.

Discussion
Each paper in this survey produced results that show how continuous algorithms can be helpful in optimization problems. The vast number of published works supports this by adapting the various optimization algorithms for combinatorial engineering problems like a welded beam, tension/compression spring, pressure vessel, 3-bar truss, speed reducer, cantilever beam, and multiple disc clutch brake problem.

While most optimization algorithms in the literature are for continuous domains, they can also solve discrete problems. This seems to be a promising area for analysis, either introducing novel analytical methods or adapting them to particular discrete/combinatorial problems.

While nearly all of the optimization algorithms listed above were created to solve continuous optimization problems, a few were later modified to solve discrete domain problems. The elements within a discrete domain—such as integers or binary digits—accept only distinct, isolated values, unlike the components inside a continuous field, which have the property of changing smoothly. The discrete domain is described by dealing with finite or infinite countable sets. Discrete domain problems have binary and combinatorial implementations.

The most recent works and advances in the advancement and verification of optimization algorithms in solving various famous engineering problems were reviewed in this article. The collected works show that there are many factors to remember for both traditional and improved methods: first, efficiency. According to various reports, the success of optimization methods is one of the reasons for interest in them over other rivals.

The optimization methods produce high-quality results under the same conditions as other methods due to various factors such as dynamic modules, greedy filtering, and multi-phase searching laws. One of the critical reasons that optimization approaches are used in tracked articles is because of this. The need for performance enhancement is the second factor. The author of most variants states that the optimizers’ stability needs to be increased to achieve higher levels of convergence and lower stagnation problems. Both population-based approaches must meet this criterion to achieve a more stable equilibrium between local and global search inclinations.

The majority of experiments have improved the equilibrium between the optimization methods’ exploratory and exploitative propensities. Until now, the most often upgraded features in literature have been the accuracy of findings and convergence speed. As a result, we saw in the papers we looked at that the authors used various optimization techniques and variants to solve various new problems and datasets. According to the no free lunch (NFL) hypothesis, writers better understand how they adapt algorithm functionality and how some of their improved operations of each process add to the final effects’ effectiveness than before 2017. As a result, they may look at various facets of optimization methods’ success in dealing with various real-world problems.

Finally, the results of optimization techniques with a deeper evolutionary foundation, such as co-evolutionary technologies, multi-population techniques, memetic methods, and concurrent computation, can be improved further. Such a foundation will also help harmonize global and local patterns, resulting in enhanced optimization process variants.

Conclusions and future works
Engineering designs are famous problems in various research domains, such as science, industry, medicine, and engineering. Many optimization algorithms have been used in the literature to handle engineering design problems, such as meta-heuristic optimization methods. It is one of the most comment optimization search algorithms used to solve different problems. However, the algorithm’s achievement rapidly reduces with the increase in the problem’s dimensional and difficulty. Various versions of the meta-heuristic optimization methods have been proposed to address engineering design problems in the literature efficiently.

In this paper, a comprehensive survey is proposed, which reviews the meta-heuristic optimization methods that have been employed to solve engineering design problems. We used differential, evolution, engineering, design, and problems as search keywords to collect the related works. The state-of-the-art methods are shown in detail over various categories, including basic, modified, and hybrid meta-heuristic optimization methods. Moreover, we present the results of the most common state-of-the-art methods in that domain to determine which version of meta-heuristic optimization methods performs more beneficial in solving the considered problems.

Finally, we provide remarkable future research directions for the potential methods and conclude. The meta-heuristic optimization methods can be further modified using another optimization procedure from the recently published algorithms. Several optimization algorithms have been proposed recently, such as Aquila Optimizer, Arithmetic Optimization Algorithm, and Henry Gas Solubility Optimization. Many other engineering problems can be solved using the versions of the meta-heuristic optimization methods, such as multi-objective engineering problems, unconstrained engineering problems, a proportional-integral-derivative controller (PID), Constrained Truss Optimisation Problems, the power loss of large-scale photovoltaic array, power flow problem, parameter estimation of photovoltaic, a cam-follower mechanism, scheduling in cloud computing environments, etc.

This work reports the main vital topics in the engineering and artificial intelligence field. It presents all the published literature methods related to the differential evolution methods in solving various engineering design problems (i.e., welded beam design problem, tension/compression spring design problem, pressure vessel design problem, 3-bar truss design problem, speed reducer design problem, cantilever beam design problem, and multiple disc clutch brake problem). Future research can depend on this review to explore the meta-heuristic optimization methods and engineering design problems. The researchers can find the starting point for future researchers also easier by explore the given studies.

Keywords
Meta-heuristic optimization algorithms
Differential evolution
Real-world engineering design problems
Optimization problems
Algorithm
Benchmark