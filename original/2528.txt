In the present study, a novel application of backpropagated neurocomputing heuristics (BNCH) is presented for epidemic virus model that portrays the Stuxnet virus propagation in regimes of supervisory control and data acquisition (SCADA) networks using multi-layer structure of neural networks (NNs) optimized with competency of efficient backpropagation with Levenberg–Marquardt (LM) method. Stuxnet virus spread through removable storage media that used to transfer of data and virus to device connected to SCADA networks with ability to exploit the whole system. The reference dataset of mathematical model of Stuxnet virus dynamics is generated by the competency of Adams method and used arbitrary for training, testing and validation of BNCH through NNs learning with LM scheme. Comparative study of BNCH with reference results shows the matching of 4–7 decimal places of accuracy and the further validated through mean squared error-based figure of merit, histograms, and regression measures.

Introduction
The computer virus spread models are an old, exciting, imperative and crucial domain of research in computer system design and network infrastructure [1]. The first model of virus is associated with Cohen [2] on the idea of “self-replicating code”. The most common problem of computer security is spread of virus infection that cause a huge amount of financial losses. A virus of computer is piece of a code that replicates through the travelling of the worm from one machine to another machine independently in the form of program through networks [3]. The propagation of computer viruses has been model by mathematician, biologist, physicist, as well as, computer scientists for critical analysis. [4].

Related work for computer virus model
The propagation of computer viruses in the networks is developed on the mathematical modeling of classical epidemic procedure and such attempts are introduced in Refs. [5,6,7]. Later on a lot of contributions in the domain of computer virus model are reported and few recent applications include, propagation of malware in the mobile devices of computer [8], stochastic behavior models on SEIQS involving external source of infection [9], a theoretical approach of patch forwarding impact [10], a virus model of computer discontinuous strategy impact [11], analysis on the dynamics of stochastic computer virus spread [12], time delay interventional approach for computer virus dynamics [13], dynamics of complex computer networks [14], computer virus attack model and control [15], mixing spread of computer virus model [16], a delay epidemic model for malicious codes in wireless sensor networks [17], denial-of-service attacked model for networks [18], kill signals based computer virus propagation [19] and a delay SLBS model for computer virus [20], analyzing the characteristic of quarantine in the presence of immunity for computer virus model [21],

An epidemic mathematical model of computer viruses of the Stuxnet type known as digital weapon, cyber weapon, cyberwarfare, cybersecurity threat to critical networks infrastructure [22,23,24,25]. The Stuxnet virus propagation model is taken as a system model in the presented study.

System model: Stuxnet virus model
Stuxnet is a virus that has focus/target on industrial control systems and their components are presented in Fig. 1. Stuxnet has the characteristic to hide from antivirus program running/operating in the machine and exploit the vulnerabilities to attack. Two digital certificates were used by Stuxnet that were stolen to create a genuine program with full information of supervisory control and data acquisition (SCADA) systems which are targeted. In June 2010, Stuxnet virus vulnerabilities were exposed to attack the nuclear plant at Natanz in Iran [26], which is schematically presented in Fig. 2. The facility of centrifuge equipment is linked in cascade manner such that the output of one is given as an input to other and so on. Stuxnet can be considered as a complicated cyber weapon with several malicious modules that exploits the four zero-day vulnerabilities, attack 7 (Siemen SCADA), changes in system libraries, installation of signed drivers, hiding of its resources, clearing of logs and run secluded process server of call for message with center of control and the update version [27, 28].

Fig. 1
figure 1
Components of Stuxnet

Full size image
Fig. 2
figure 2
Overview of Stuxnet

Full size image
Mathematical representation of mathematical model of Stuxnet virus spread is presented graphically in Fig. 3 and the model can be represented in five number of ordinary differential equations (ODEs) based system as given below [29, 30]

𝑑𝑆𝑑𝑡=𝐴1−𝛽1𝑆(𝑡)𝐼(𝑡)232−𝛽2𝑆(𝑡)𝑈𝐼(𝑡)𝑁(𝑡)−𝑟1𝑆(𝑡)
(1)
𝑑𝐼𝑑𝑡=𝛽1𝑆(𝑡)𝐼(𝑡)232+𝛽2𝑆(𝑡)𝑈𝐼(𝑡)𝑁(𝑡)−𝜌𝐼(𝑡)−𝑟1𝐼(𝑡),
(2)
𝑑𝑃𝑑𝑡=𝜌𝐼(𝑡)−𝑟1𝑃(𝑡),
(3)
𝑑𝑈𝑆𝑑𝑡=𝐴2−𝛽2𝑈𝑆(𝑡)𝐼(𝑡)𝑁(𝑡)−𝑟2𝑈𝑆(𝑡),
(4)
𝑑𝑈𝐼𝑑𝑡=𝛽2𝑈𝑆(𝑡)𝐼(𝑡)𝑁(𝑡)−𝑟2𝑈𝐼(𝑡).
(5)
Fig. 3
figure 3
Schematic of proposed Stuxnet model

Full size image
Here, the independent variable is t while the dependent variables are represented with S, I, and P, for the susceptible, infected and protected internal machines/computers, respectively, while the dependable variables for USB susceptible and infected are represented by US and UI. Additionally, for simplicity, S(t), I(t), and P(t) denote with S, I, and P-computers at time t, respectively, in the rest of the study. The symbol N is representing the total number of populations, i.e., the sum of S, I and P. Population size N is set to be equal to 100,000 for the presented analysis.

The parameters used in the models are defined as follows:

A1 is external computers entering as a susceptible.

Every S-computer is infected by I-computers with probability β1/232, where β1 is a positive constant.

Every susceptible USB Us of computer is infected by probability β2/N, where β2 is a positive constant and N is total number of computers.

Every I-computer is cured with probability ρ.

A1 and A2 is the arrival of new computer and new USB, respectively.

r1 and r2 represents the natural death rate of computer and USB, respectively.

Problem statement and significance
The deterministic or traditional numerical computing solvers have been utilized for the solutions of computer virus models studies [20, 31, 32], cyber war attack models [33] and tiny hardware implants vulnerabilities [34]. On the other hand, neural networks (NNs) model based stochastic numerical solvers has broadly implemented for applications in diversified domains [35,36,37,38,39], but these solvers constructed on artificial intelligence paradigm have yet not exploited exhaustively for dynamical analysis of computer virus propagation studies. The stochastic numerical computing paradigm has already been established for solving nonlinear models arising in different applications, such as electric circuit models [40, 41], machines [42, 43], fractional order systems [44, 45], thermodynamics [46], plasma/atomic/astrophysics models [47,48,49,50], bioinformatics problems [51, 52], computational fluid dynamics [53,54,55], energy [56, 57], and finance [58, 59]. Additionally, stochastic methodologies based on neural networks and deep learning are exploited recently for cyber threads modelling [60], detecting cyber-attacks in industrial control systems [61] and malicious activities detection in industrial internet of things [62]. The said illustrative facts motivate researchers to explore in computational heuristic procedures and present an alternate, precise, feasible and competent solver based on integrated intelligent computing to solve computer virus studies of critical control infrastructure represented with Stuxnet model.

Contributions and innovative insights
Enlisted below are the contributions and innovative insights of proposed backpropagated neurocomputing heuristics (BNCH) in terms of prominent features as:

A novel application of BNCH is introduced for epidemic virus model that portrays the Stuxnet virus propagation in regimes of SCADA based control networks, represented with system of five nonlinear ODEs.

The proposed BNCH utilized the multi-layer structure of NNs trained with competency of efficient backpropagation with Levenberg–Marquardt (LM) method.

The reference dataset of mathematical model of Stuxnet virus dynamics is generated by the competency of Adams method and used arbitrary for training, testing and validation process in BNCH.

The superior attainments of the design methodology BNCH are certified through exhaustive assessments in terms of histograms studies, regression metrics and mean squared error (MSE) based objective function.

Organization
The rest of paper is presented as follows: Sect. 2 described mathematical representation of system model based on Stuxnet virus propagation. In Sect. 3, methodology adopted for the analysis of Stuxnet virus propagation is presented. In Sect. 4, the numerical outcomes along with elaborative discussions are presented, while concluding inferences are listed in Sect. 5 along with further relevant research opportunities.

Mathematical representation of Stuxnet virus spread
The six cases of Stuxnet model as given in Eqs. (1–5) are generated by changing the probability of arrival of new computer, removable storage devices, rate of infection spread in computers, storage devices and removal of storage devices. The numerical values of all six cases of Stuxnet model (1–5) are listed in Table 1.

Table 1 Construction of the scenarios Stuxnet virus propagation model
Full size table
All parameters of six cases of Stuxnet models are set circumspectly after exhaustive experimentations, and critical review. So, this study is confined to these six cases for studying the dynamics of the Stuxnet model to drawn reliable, effective and concreate inferences of BNCH based computing paradigm. Moreover, these cases of Stuxnet dynamical models are sufficient to drawn reliable, effective and concreate inferences on the performance of proposed BNCH based computing paradigm.

Mathematical representation of Stuxnet model (1–5) using the values of parameters as listed in Table 1 is provided in following six case studies as follows:

Stuxnet model for case 1
Mathematical expression for Stuxnet model for case 1 is given as:

𝑑𝑆𝑑𝑡=0.041−0.367𝑆𝑇232−0.7𝑆𝑈𝐼100000−0.1116𝑆,
(6)
𝑑𝐼𝑑𝑡=0.367𝑆𝐼232+0.7𝑆𝑈𝐼100000−0.00275𝐼−0.1116𝐼,
(7)
𝑑𝑃𝑑𝑡=0.00275𝐼−0.1116𝑃,
(8)
𝑑𝑈𝑆𝑑𝑡=0.041−0.7𝑈𝑆𝐼100000−0.0089𝑈𝑆,
(9)
𝑑𝑈𝐼𝑑𝑡=0.7𝑈𝑆𝐼100000−0.0089𝑈𝐼.
(10)
Stuxnet model for case 2
Mathematical equations for Stuxnet model for case 2 are updated as follows:

𝑑𝑆𝑑𝑡=0.043−0.5𝑆𝑇232−0.9𝑆𝑈𝐼100000−0.2𝑆,
(11)
𝑑𝐼𝑑𝑡=0.5𝑆𝐼232+0.9𝑆𝑈𝐼100000−0.0052𝐼−0.2𝐼,
(12)
𝑑𝑃𝑑𝑡=0.0052𝐼−0.2𝑃,
(13)
𝑑𝑈𝑆𝑑𝑡=0.043−0.9𝑈𝑆(𝑡)𝐼(𝑡)100000−𝑟0.028𝑈𝑆(𝑡),
(14)
𝑑𝑈𝐼𝑑𝑡=0.9𝑈𝑆𝐼100000−0.028𝑈𝐼.
(15)
Stuxnet model for case 3
Mathematical form of Stuxnet model in case 3 is given as:

𝑑𝑆𝑑𝑡=0.41−0.449𝑆𝑇232−0.781𝑆𝑈𝐼100000−0.0805𝑆,
(16)
𝑑𝐼𝑑𝑡=0.449𝑆𝐼232+0.781𝑆𝑈𝐼100000−0.0012𝐼−0.0805𝐼,
(17)
𝑑𝑃𝑑𝑡=0.0012𝐼−0.0805𝑃,
(18)
𝑑𝑈𝑆𝑑𝑡=0.42−0.781𝑈𝑆𝐼100000−𝑟0.0028𝑈𝑆,
(19)
𝑑𝑈𝐼𝑑𝑡=0.781𝑈𝑆𝐼100000−𝑟0.0028𝑈𝐼.
(20)
Stuxnet model for case 4
Mathematical form of Stuxnet model in case 4 is given as:

𝑑𝑆𝑑𝑡=0.5−0.1𝑆𝑇232−0.681𝑆𝑈𝐼100000−0.811𝑆,
(21)
𝑑𝐼𝑑𝑡=0.1𝑆𝐼232+0.681𝑆𝑈𝐼100000−0.0011𝐼−0.811𝐼,
(22)
𝑑𝑃𝑑𝑡=0.0011𝐼−0.811𝑃,
(23)
𝑑𝑈𝑆𝑑𝑡=0.35−0.681𝑈𝑆𝐼100000−0.028𝑈𝑆,
(24)
𝑑𝑈𝐼𝑑𝑡=0.681𝑈𝑆𝐼100000−0.028𝑈𝐼.
(25)
Stuxnet model for case 5
Mathematical description of Stuxnet model in case 5 is written as follows:

𝑑𝑆𝑑𝑡=0.04−0.42𝑆𝑇232−0.001𝑆𝑈𝐼100000−0.0805𝑆,
(26)
𝑑𝐼𝑑𝑡=0.42𝑆𝐼232+0.001𝑆𝑈𝐼100000−0.0013𝐼−0.0805𝐼,
(27)
𝑑𝑃𝑑𝑡=0.0013𝐼−0.0805𝑃,
(28)
𝑑𝑈𝑆𝑑𝑡=0.03−0.001𝑈𝑆𝐼100000−0.028𝑈𝑆,
(29)
𝑑𝑈𝐼𝑑𝑡=0.001𝑈𝑆𝐼100000−0.028𝑈𝐼.
(30)
Stuxnet model for case 6
Mathematical description of Stuxnet model in case 6 is written as follows:

𝑑𝑆𝑑𝑡=0.34−0.42𝑆𝑇232−0.001𝑆𝑈𝐼100000−0.0805𝑆,
(31)
𝑑𝐼𝑑𝑡=0.42𝑆𝐼232+0.001𝑆𝑈𝐼100000−0.0066𝐼−0.0805𝐼,
(32)
𝑑𝑃𝑑𝑡=0.0066𝐼−𝑃,
(33)
𝑑𝑈𝑆𝑑𝑡=0.23−0.001𝑈𝑆𝐼100000−0.028𝑈𝑆,
(34)
𝑑𝑈𝐼𝑑𝑡=0.001𝑈𝑆𝐼100000−0.028𝑈𝐼.
(35)
Design methodology for the system model
Neural network comprises of neurons and connection agents, these connection agents between the neurons are the associated weights and biases. The research community recognize three layers of neural networks, i.e., input, hidden and output layers, which are exploited for solving the problems representing the dynamics of significant nonlinear systems with log-sigmoid 𝜎=(1+𝑒−𝑥)−1 normally exhaustive incorporated as an activation function in hidden layers in different applications of broad fields [63,64,65,66,67,68,69,70]. The core reason sigmoid function is mainly used in neural networks as activation function because it exists between (0–1). Therefore, it is especially used by the research community extensively for the models where we have to predict the probability as an output. Since probability of anything exists only between the range of 0 and 1, sigmoid is the right choice. The softmax function is a more generalized logistic activation function which is used for multiclass classification. Hyperbolic tangent activation function, rectified linear unit (ReLU) activation function, randomized leaky ReLU can be a good alternative, while the present study is limited to sigmoidal activation function.

While the cost/merit function is used to examine the results of proposed BNCH output, we utilized mean squared error function as defined below

MSE=1𝑛∑𝑖−1𝑛(𝑦𝑖−𝑦̂ 𝑖)2,
(36)
where error is a difference between the reference 𝑦𝑖 and approximate 𝑦̂ 𝑖 results for ith inputs. The adaptation of the objective function normally made through Levenberg–Marquardt method using training, testing and validation processes. In brief, the proposed methodology consists of two parts; first step is the implementation of Stuxnet model with ordinary differential equation using Adam numerical solver and generate a reference dataset. While in second part, the entries in the reference dataset are used for training of BNCH. The proposed intelligence computing BNCH has one input layer, one hidden layer and one output layer [22] as shown in Fig. 4. The stepwise process flow of BNCH is shown in Fig. 5 and the overall flow chart of methodology is shown in Fig. 6.

Fig. 4
figure 4
Structure of deep neural network

Full size image
Fig. 5
figure 5
Supervised neural network modeling

Full size image
Fig. 6
figure 6
Graphical abstract of Stuxnet model

Full size image
Numerical experimentation and discussion
Results of BNCH based on neural networks are presented for Stuxnet model in this section.

Results of six cases of Stuxnet model as given in Eqs. (1–5) are generated by changing the probability of arrival of new computer, removable storage devices, rate of infection spread in computers, storage devices and removal of storage devices. The numerical values of all six cases of Stuxnet model (1–5) are listed in Table 1.

In the cases 1–3, the probability of entering of computer in network set as Ao = 0.041 and 0.42, susceptible computer is infected by infected computer at the rate of β1 = 0.367, 0.5 and 0.499, probability of infection by infected USB β2 = 0.7, 0.9 and 0.781, probability of cure is of infected computer ρ = 0.00275, 0.0052 and 0.0012 death rate of computer r1 = 0.1116, 0.2 and 0.0805 USB death rate r2 = 0.0089 and probability of susceptible USB A0 = 0.041, 0.043 and 0.042, while parameter information for the rest of the cases is given in Table 1.

The dataset for the system model of Stuxnet dynamics as portrayed in Eqs. (1–5) for all six cases for applying artificial technique based computing paradigm is generated with the help of Adams numerical method by using ‘NDSolve’ function of Mathematica with algorithm ‘Adams’. And results are presented in tables for t between 0 and 10 with step size of 0.5. Results for cases 1–2, 3–4 and 5–6 of Stuxnet model are presented in Tables 2, 3 and 4, respectively.

Table 2 Created dataset of Stuxnet model (1–6) for cases 1 and 2
Full size table
Table 3 Created dataset of Stuxnet model (1–6) for cases 3 and 4
Full size table
Table 4 Created dataset of Stuxnet model (1–6) for cases 5 and 6
Full size table
The neural networks back propagated with Levenberg–Marquardt algorithm are implemented for the solution of all six Stuxnet models (6–35) with segmentation of the data arbitrarily into training, validation and testing with percentage 90%, 5% and 5%, respectively. Number of hidden neurons are set 100, while the upper limit of epochs is set to be 1000 for all six case studies of Stuxnet model. All these parameter setting is after a lot of simulation studies with different combinations of training, testing and validations samples, i.e., 70%, 50% and 90% training, 15%, 25% and 5% testing, and 15%, 25% and 5% validation, different number of hidden neurons, 10–50, 80–120, and 200–300, while the upper limit of epochs is set 1000. Keeping in view of accuracy, convergence, complexity and over/under fitting scenarios, the besting results are achieved for training, validation and testing with percentage 90%, 5% and 5%, respectively, 100 number of hidden neurons and 1000 as a fixed upper limit of epochs. The same setting of the parameters is used in the simulation study conduct for the presented work.

The computing methodology is estimated on best validation analysis along with learning curves of training, validation and testing points on merit function via mean square error (MSE) between the target and approximated outputs.

The results of learning curves, adjustment of MSE on iterative increment of epochs, are presented in Fig. 7, i.e., Fig. 7a, for cases 1, of Stuxnet models and similar trend on MSE is observed for rest of the cases. The best validate performance attained for case 1 is MSE = 1.895E − 11 at 147 epochs, case 2 is MSE = 8.6486E − 11 at 281 epochs, case 3 is MSE = 2.6789E − 11 at epochs 237, case 4 is MSE = 9.6677E − 9 at epochs 667, case 5 is MSE = 6.6765E − 13 at epochs 22 and case 6 is MSE = 8.7156E − 11 at 243 epochs. The performance of proposed neural is certified with consistent achievement of relatively small values of MSE for each case of Stuxnet system model.

Fig. 7
figure 7
Neural network training performance analysis of Stuxnet model

Full size image
Training state analysis is conducted in terms of gradient, step size incorporated by Levenberg–Marquardt method during learning and validation checks at specified epoch for proposed neural networks. Results of training state analysis are presented in Fig. 7, i.e., Fig. 7b of the Stuxnet model (1–5), while similar trend is seen for rest of the cases. It is seen that respective for cases 1–6 have gradient values in case 1 is 9.9947E − 8 at epoch 147, case 2 is 9.8632E − 8 at epoch 281, case 3 is 9.8802E − 8 at epoch 237, case 4 is 9.9734E − 8 at epoch 667, case 5 is 9.2242E − 8 at epoch 22 and case 6 is 9.947E − 8 at epoch 243.

The approximate solution of neural network trained with Levenberg–Marquardt method for training validation and testing inputs is shown in Fig. 8. Along with training responses of fitness graphs, errors of Stuxnet models for each case. Further analysis of the proposed scheme is evaluated through histogram error graphs with 20 bins in which the error is plotted against instances for each data points involving training, testing and validation. The error histogram of Stuxnet models for each case is shown in Fig. 9. Almost all data points are seen converging on a zero-error line. On one side of the target line presented yellow in color, the negative error values are shown, whereas the positive error values are graphed on the right side. In case 1, the targeted zero error line occurred at 8.1E − 08 where it falls into the bin, and in case 2, the zero error falls into the bin at − 4.6E − 06, and similarly all other cases are shown in Fig. 9. Furthermore, the results presented in Fig. 9a–f show that the values of max error lie around 10−06–10−05, which endorsed the precision and consistency of the proposed intelligent computing approach for solving Stuxnet model.

Fig. 8
figure 8
Neural network training time series response of Stuxnet model

Full size image
Fig. 9
figure 9
Neural network training error histogram of Stuxnet model

Full size image
The detailed precision study of the proposed result neural networks is performed through error histogram graphs. Error histogram is the difference between targets and approximated outputs for training, testing and validation data and results of histograms are presented in Fig. 9a–f for cases 1, 2, 3, 4, 5 and 6 of Stuxnet dynamics, respectively. One may decipher from the presented results that bins are constructed with more data points near reference zero error line which ensure the reasonable level of the accuracy for approximate solution of proposed neural network model.

Results of the proposed supervised neural network based computing technique are evaluated further through regression analysis and outcomes of the regression analysis are presented in Fig. 10, i.e., Fig. 10a–f for cases 1, 2, 3, 4, 5 and 6 of the Stuxnet model (1–5), respectively. One may decipher from each subfigure of the cases that training, testing and validation results consistently attaining the regression value R equal to the unity which shows the close correlation, i.e., accuracy, between targets and approximated outputs.

Fig. 10
figure 10
Neural network training regression of Stuxnet model

Full size image
The results of neural networks for solving all six cases of Stuxnet model (1–5) are provided in Table 5. The precision of neural networks predicted solution is around 10−11–10−10, for all 1–6 cases of Stuxnet model for training, validation, testing and performance operators, while step size of the algorithm is around 10−08–10−09. The number of epochs vary from 147 to 667. These results presented in Table 5 established the consistent accuracy of the neural networks with backpropagation of Levenberg–Marquardt to solve the variants of Stuxnet models.

Table 5 Analysis for case study of Stuxnet model
Full size table
Furthermore, consistency and accuracy of the designed scheme BNCH is evaluated with the help of tenfold cross validation by segmenting the data randomly into ten sets, i.e., one set for testing while rest for training samples. The exhaustive simulation for BNCH for all six cases of Stuxnet virus propagation in regimes of SCADA networks has been conducted and results of statistics in terms of measures for central tendency and variation, i.e., median, mean and standard deviation (STD) values are provided in Table 6 for training, testing, and validation samples. Additionally, the statistics for the best performance on MSE along with epochs executed are also tabulated in Table 6 for each scenario of Stuxnet virus propagation model. In this analysis, 100 number of hidden neuron are taken in neural network models, while data for the differential system with 101 grid points for inputs t between 0 and 10 are used for each case of Stuxnet virus system. It can be observed that the mean values lie in the range of 1.71E − 11 to 7.49E − 11, 1.71E − 11 to 7.49E − 11, and 1.71E − 11 to 7.49E − 11 for cases 1–6 of Stuxnet virus model in case of training, validation and testing samples, respectively. Similar trend for median values is observed with results consistently close to 1E − 11. Moreover, a very small value of STD of 1E − 11 is observed for all six cases of Stuxnet virus model. One may see that the best performance lies in the range of 1E − 10 to 1E − 12 for each scenario of Stuxnet virus model, while a bit variation has been observed in total number of epochs executed in the neural network model for all six cases of Stuxnet virus models. In general, very small magnitudes of performance operator of measure of central tendency and variance are attained which validate and verify the consistent accuracy of the proposed BNCH for all six cases of Stuxnet virus propagation in regimes of SCADA networks.

Table 6 Analysis for case study of Stuxnet model
Full size table
The results approximate solutions of neural network backpropagated with Levenberg–Marquardt scheme are calculated for six different Stuxnet systems and are presented in Figs. 11, 12, 13, 14, 15 and 16. The approximate solutions are presented in Figs. 11a, 12a, 13a, 14a 15a and 16a for cases 1, 2, 3, 4, 5 and 6, respectively, while the individual solutions are presented in Figs. 11b–f, 12b–f, 13b–f, 14b–f, 15b–f and 16b–f for respective cases 1–6 along with the reference numerical solution of Adams method. One may decipher from these illustrations that results of proposed intelligent computing consistently overlapped with the reference solutions. All presented numerical and graphical illustrations certified the consistent accuracy, convergence and robust performance of neural networks based computing methodologies to solve the variants of Stuxnet model.

Fig. 11
figure 11
Stuxnet dynamic of case 1 along with in comparison with numerical results

Full size image
Fig. 12
figure 12
Stuxnet dynamic of case 2 along with in comparison with numerical results

Full size image
Fig. 13
figure 13
Stuxnet dynamic of case 2 along with in comparison with numerical results

Full size image
Fig. 14
figure 14
Stuxnet dynamic of case 4 along with in comparison with numerical results

Full size image
Fig. 15
figure 15
Stuxnet dynamic of case 5 along with in comparison with numerical results

Full size image
Fig. 16
figure 16
Stuxnet dynamic of case 6 along with in comparison with numerical results

Full size image
Conclusions
A novel investigation of backpropagated neurocomputing heuristics is presented for epidemic based computer virus model that portrays the Stuxnet virus propagation in regimes of SCADA environment using multi-layer structure of neural networks optimized with competency of efficient and effective backpropagation of Livenberg–Marquardt method. Stuxnet virus spread through removable storage media that used to transfer of data and virus to the device connected to SCADA networks with competency of exploitation of complete computer control infrastructure. The reference dataset of mathematical model of Stuxnet virus dynamics is made available by using the competency of numerical computing with Adams method. The proposed technique used arbitrary datasets for training, testing and validation for NNs modeling and its learning with LM scheme. The proposed design scheme BNCH is implemented for different scenarios of Stuxnet virus model and comparison with reference results shows the matching of order 4–7 decimal places of accuracy. The stability and robustness of BNCH are further validated through learning curves on mean squared error values, histograms and regression measures.

In future, the proposed design scheme BNCH is extended for solving nonlinear systems represented by differential terms of integer and non-integer orders. Additionally, deep neural networks can be applied in cybersecurity field specially for combating cybersecurity threats.

Keywords
Stuxnet virus
Supervisory control and data acquisition networks
Backpropagation
Neurocomputing
Levenberg–Marquardt method
Adams method