Learning urban community structures refers to the efforts of quantifying, summarizing, and representing an urban community’s (i) static structures, e.g., Point-Of-Interests (POIs) buildings and corresponding
geographic allocations, and (ii) dynamic structures, e.g., human mobility patterns among POIs. By learning the community structures, we can better quantitatively represent urban communities and understand
their evolutions in the development of cities. This can help us boost commercial activities, enhance public security, foster social interactions, and, ultimately, yield livable, sustainable, and viable environments.
However, due to the complex nature of urban systems, it is traditionally challenging to learn the structures of urban communities. To address this problem, in this article, we propose a collective embedding
framework to learn the community structure from multiple periodic spatial-temporal graphs of human
mobility. Specifically, we first exploit a probabilistic propagation-based approach to create a set of mobility graphs from periodic human mobility records. In these mobility graphs, the static POIs are regarded
as vertexes, the dynamic mobility connectivities between POI pairs are regarded as edges, and the edge
weights periodically evolve over time. A collective deep auto-encoder method is then developed to collaboratively learn the embeddings of POIs from multiple spatial-temporal mobility graphs. In addition, we
develop a Unsupervised Graph based Weighted Aggregation method to align and aggregate the POI embeddings into the representation of the community structures. We apply the proposed embedding framework to two applications (i.e., spotting vibrant communities and predicting housing price return rates)
to evaluate the performance of our proposed method. Extensive experimental results on real-world urban
communities and human mobility data demonstrate the effectiveness of the proposed collective embedding
framework.
CCS Concepts: • Information systems → Data mining; Location based services;
Additional Key Words and Phrases: Urban communities, community structure, collective embedding, periodic
mobility graphs
1 INTRODUCTION
Learning urban community structures refers to the efforts of quantifying, summarizing, and representing a community’s (i) static geographic structure, e.g., important Points-Of-Interests (POIs)
and corresponding spatial allocations, and (ii) dynamic mobility structure, e.g., human mobility
patterns among the important POIs. To be specific, the static geographic structure of a community
refers to the spatial allocations and relative distances of the important POIs that provide a variety
of urban functions [54] for the community. The dynamic mobility structure describes the strengths
and dynamics of human mobility connectivity among these important POIs [59]. By learning the
representation of community structures, we can better understand the evolution of urban communities over time. The knowledge and patterns obtained by analyzing urban community structures
can be further used to help us find better solutions to boost commercial activities, enhance public
security, foster social interactions, which will lead to livable, sustainable, and viable environments.
All the above pieces of evidence suggest that it is highly appealing to study how to quantify
and discover urban community structures. Indeed, the emerging methodological studies on representation learning provide a great opportunity to address this problem. Inspired by the idea
of representation learning, we propose to formulate the problem of learning urban community
structures as a spatial representation learning task. Along this line, we develop a collective embedding analytic framework to learn urban community structures. The proposed collective embedding framework can unify both static POIs data and dynamic human mobility data as periodic
spatiotemporal mobility graphs and collaboratively learn the embeddings of community structures
from the spatial-temporal autocorrelations among multiple mobility graphs.
However, due to the complex nature of urban systems, urban community structure learning is
not an easy task. Three unique challenges arise in achieving this goal:
• Graph construction: how to unify and represent the POIs and human periodic mobility
records as a set of mobility graphs;
• Collective embedding: how to collectively learn the embeddings of POIs from multiple
periodic mobility graphs;
• Embedding aggregation: how to align and aggregate POI embeddings for community
structure representation learning.
In what follows, we outline how we tackle these challenges.
First, to carry out daily activities, people in urban areas often leave from one POI, visit another
POI, and, thus, interact with communities. As a result, human movements create a dynamic association, which varies over time, between each POI pair in a community. Graphs are an effective
tool to represent such a kind of structural information where we can regard POIs as vertexes, and
treat mobility connectivities between POI pairs as edges. Then, given human periodic mobility
records, we can construct a set of periodic spatial-temporal mobility graphs to capture the dynamics of a community. Unfortunately, since most of human mobility data are GPS data recorded
by taxies, city bikes, subways, and buses, the pick-up and drop-off points are close to but not the
exact origins and destinations of the travelers. For example, a person may take a short walk from
his/her home to the bus stop while the dataset will only record the origin starting from the bus
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:3
stop instead of the home. To address this problem, we propose a probabilistic spatial propagation
method to estimate mobility volumes between POI pairs.
Second, after representing human mobility records as graphs, an intuitive method is to exploit
deep auto-encoder [6] to learn the embeddings of graph nodes (i.e., POIs). However, in this study,
a community is represented by multiple periodic mobility graphs, which highly necessitates a new
embedding method to simultaneously learn the embeddings of nodes (POIs) from multiple graphs
in a collective fashion. Therefore, we develop a collective deep auto-encoder method that can take
multiple graphs as inputs.
Third, after obtaining embeddings of each POI in the community, there is still a critical need
to devise an effective fusion method to align and aggregate all the individual POI embeddings
into the embedding of the community. We proceed with a two-step strategy. First, we use an unsupervised graph-based weighting method to compute the weight of each latent feature in the
POI embeddings and then combine the weights to aggregate the embeddings of individual POIs
to the embeddings of POI categories (e.g., education, shopping, restaurants, entertainment) that
are semantically aligned across communities. Later, we further aggregate the embeddings of POI
categories into the embeddings of the community.
To summarize, in this article, we propose a collective embedding framework to learn the community structure from the periodic spatiotemporal graphs of human mobility. Specifically, the
followings are our four main contributions: (1) We start with a probabilistic propagation approach
to construct a set of periodic mobility graphs to represent human periodic mobility records.(2) We
propose a collective deep auto-encoder method to collaboratively learn the embeddings of POIs
from multiple spatial-temporal mobility graphs. (3) Given the learned POI embeddings, we develop an unsupervised graph-based weighted aggregation approach to effectively align and aggregate the POI embeddings with the representation of the community structures. (4) We apply
the proposed embedding framework to spot vibrant communities (i.e., urban vibrancy for short)
and predict housing return rates (i.e,. willingness to pay for short), and the extensive experimental
results on real-world urban community and human mobility data demonstrate the effectiveness of
our approach.
2 PROBLEM STATEMENT
In this section, we first introduce some important definitions and then formalize the community
learning problem.
Definition 2.1 (Urban Community). A community consists of (i) a location (i.e., latitude and longitude) of a residential complex and (ii) a neighborhood area (e.g., a circle with radius of 1km).
Usually, in urban areas, a residential complex consists of multiple apartment buildings, where
each apartment building has many apartments. In addition, there are many POIs located in the
neighborhood area that provide a variety of urban functions and living services to residents in the
community. The residents in this community can access these urban facilities and services within
a walking distance. Figure 1 shows a sample urban community.
Community detection is a hot topic in social network. There are some social community detection algorithms, such as hierarchical clustering [25], spectral clustering [13], divisive algorithm [46], and modularity-based methods [15, 22, 23]. In the scenario of urban computing, there
are some studies that aim to detect urban regions using POI data and human mobility data [12,
59]. In our work, we focus on learning the representation of urban communities. To simplify the
spatial data preprocessing, we define an urban community as a circle neighborhood area with a
residential complex in the center of the circle area. In the future, we can explore the methods of
social community detection with the representation learning framework proposed in our article.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:4 P. Wang et al.
Fig. 1. This is a sample urban community, where the center is a residential complex. The drop pins surrounding the center are POIs located within one kilometer to the residential complex. The different colors of
the drop pins represent different POI categories, such as living services, educations, finance, shopping, and
restaurants.
Definition 2.2 (Mobility Graph). The mobility graph of a community is a graph extracted from
the POIs data and human mobility data of the community. In this graph, POIs are regarded as
nodes, and the weights of edges are the human mobility connectivities between two POIs.
In the methodology section, we introduce a probabilistic propagation-based method to compute
the human mobility connectivity between two POIs. Figure 2 shows an example of a mobility
graph.
Definition 2.3 (Periodic Mobility Graphs). Periodic mobility graphs describe the movements of
residents in a community throughout a period of time, which is the aggregation of the daily mobility graphs.
The movements of residents in a community are dynamic and always vary over time. Specifically, human movements are usually periodic [36, 37]. For instance, local residents mostly go to
work in the morning and get back home in the afternoon during weekdays. To describe such periodic dynamics of human mobility in a community, we propose to extract the periodic mobility
graphs of a community at a daily granularity. In our experiments, we extracted seven periodic
mobility graphs (from Monday to Sunday) for each community. In this way, we can learn the
representation of a community not only from the structure of such mobility graphs but also the
periodic dynamics of such mobility graphs. An example of periodic mobility graphs is shown in
Figure 3.
Definition 2.4 (Community Embedding). The embedding of a community is a vector representation of the community. The vector representation describes two types of information about the
community: (i) static spatial configuration, i.e., POIs, and (ii) dynamics of human mobility, i.e., the
evolving structures of mobility graphs.
It is very important to develop a representation learning model that can take periodic mobility
graphs as inputs and output the vector representations of communities.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:5
Fig. 2. This is a mobility graph that consists of six POIs. In this graph, each POI is regarded as a node in the
mobility graph. The human mobility connectivity between two POIs is regarded as the weight of an edge.
Definition 2.5 (Problem Formulation–Learning Urban Community Structure). By considering the
existence of a candidate urban community, in which there are a set of POIs and GPS trajectories of human mobility, we wish to learn the vector representation of the community, such that
the learned vector representation can describe not only static spatial configurations, such as POIs
and corresponding geographical allocations, but also the dynamic human mobility connectivity
of POIs in the community. We formulate this problem as a task of spatial representation learning.
Formally, given a set of spatial graphs G(k) = {G(k)
1 ,G(k)
2 ,..., G(k)
M } that describe both POIs and
human mobility connectivity between each POI pair for a community c, the spatial representation
learning problem aims at learning a mapping function f (ck ) : G(k) → Rd that can map the structural information of multiple mobility graphs into a vector representation for the community ck .
Essentially, there are three major steps: (1) Construct the periodic mobility graph set for a community, (2) collectively learn the POI embedding from multiple mobility graphs, and (3) aggregate
and align POI embedding into community embedding.
3 METHODOLOGY
We first present an overview of our proposed framework and then detail the three critical steps:
(i) constructing periodic mobility graphs, (ii) collective POI embedding, and (iii) aligning and aggregating POI embeddings into community embeddings.
3.1 Framework Overview
The focus of this article is to develop a representation learning framework of community structure
that can captures dynamic changes of community structure, due to the human mobility. Figure 4
shows our proposed framework that consists of three main steps: (i) periodic mobility graph
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:6 P. Wang et al.
Fig. 3. This is an example of seven periodic mobility graphs, each of which represents the mobility connectivity of the POI graphs on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday, respectively.
construction, (ii) collective POI embeddings, and (iii) aligning and aggregating POI embeddings
into community embeddings. Specifically, in the first step, we construct seven periodic mobility
graphs, where vertexes are POIs and edges represent human movement between POIs. Second, we
propose a collective deep auto-encoder to learn POI embeddings from the periodic mobility graphs
of each community. Finally, we exploit a graph-based unsupervised weighted aggregation method
to semantically align and aggregate POI embeddings into the embeddings of POI categories. Then,
we further aggregate POI-category embeddings into community embeddings.
3.2 Periodic Mobility Graph Construction
According to Definition 2.3, we aim to learn the representation of the structure of an urban community from mobility graphs that describe seven days of human movements among POIs. To construct periodic mobiity graphs, the key challenge is how to extract the connectivity measurements
between the POIs of a community from the large-scale human movement data.
Intuitively, people’s outdoor activities include the transitions from one POI to another POI, and,
ultimately, form massive mobility flows in a community. As a result, human mobility can indicate
the connectivity among POIs. Therefore, we estimate the possibility of mobile users that move
from one POI to another POI to quantify the mobility connectivity between two POIs. This step is
important, because it enables us to measure the human mobility connectivity between two POIs. In
this way, we can construct mobility graphs over different days to represent an urban community.
The extracted graphs will be fed into the collective embedding model to learn the representation of
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:7
Fig. 4. The overview of the proposed analytical framework.
urban communities. A straightfoward method for mobility connectivity estimation between two
POIs, e.g., POI(O) and POI(D), is to directly count the total number of visits from POI(O) for POI(D).
However, such a simple method highly depends on the availability of high-quality mobility data, in
which each trip must include an origin POI and a destination POI. In reality, human mobility data
are collected from different devices and sources (e.g., smartphones, cellular stations, GPS-equipped
vehicles, location-based services). Therefore, not every trip in the human mobility data includes
an accurate origin POI and an accurate destination POI. For instance, a taxi ride usually includes
an origin GPS point and a destination GPS point. But the original GPS point is not the origin POI;
the destination GPS point is not the destination GPS point as well. Thus, to develop a generalized
estimation method that fits various trajectory data and does not require exact origin POIs and
destination POIs, we propose to exploit a probability propagation-based method in Reference [19]
and propose the following three-step algorithm:
• Step 1: Propagate visit probability. Given the drop-off point d of a taxi trace, we model the
probability of a POI p visited by a passenger as a parametric function, whose input x is the
distance between the drop-off point d and the destination POI p:
P (x) = β1
β2
· x · exp
1 − x
β2

, (1)
where β1 and β2 are two given hyper-parameters that control the shape of the function P (x).
Figure 5 shows the function graph of P (x) with the maximum visiting probability, β1 = 0.8,
and the most comfortable walking distance between the drop-off point and the destination
POI, β2 = 100. We adopt such function to estimate visiting probability from drop-off points
to destination POIs, because the function has several mathematical properties as follows:
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.  
63:8 P. Wang et al.
Fig. 5. Probability distribution w.r.t β1 = 0.8, β2 = 100.
—β1 = maxx P (x): β1 is the maximum value of P (x), and thus β1 can be explained as how
likely a mobile user will visit the destination POI starting from the drop-off point under
the function P (x). This mathematical property can allow us to easily and empirically set
the maximum probability of visiting the destination POI from the drop-off point.
—β2 = arg maxx P (x): β2 is the value of x when P (x) = β1. Since x is the distance between
the drop-off point and the destination POI, β2 can be explain as the most comfortable
walking distance between the drop-off point and the destination POI for taxi passengers.
—When x = 0, P (x) = 0: Since a taxi may not send passengers into a POI building directly,
the drop-off point is usually not the destination POI. A passenger often walks a short
distance to reach the destination.
—When x > β2, the value P (x) keep dropping and shows an exponential heavy tail effect.
In the problem of visiting probability estimation, the drop-off point is usually close to
the destination POI. It is impossible for a mobile user to request a taxi driver to drop off
him/her at a place that is very far away from the destination. Hence, when the distance
exceeds the most comfortable walking distance β2, the probability keeps decreasing.
—When x < β2, the value P (x) keep increasing with distance increasing. The intuition behind this is that the drop-off point is usually not the same as the destination, and there
will be a short distance between the drop-off point and the destination. Subjected to the
road network, when the destinations locate in the neighboring buildings or plazas, the
drop-off points are usually the same, like at the intersections or beside the pavement near
buildings. For example, in one commercial circle, restaurants and movie theaters are usually close to each other. When it is dinner time, even if the welcoming theater is closer
to the drop-off point than the restaurant, the passengers will be more likely to visit the
restaurant instead of the movie theater. Therefore, the rule of “the closer, the more likely
to visit” is not applicable to the scenario of the visiting probability. However, if we apply the exponential decay function directly, the visiting probability will decrease with
the distance increasing. This means that the visiting probability to the closest POI is the
highest. It is inconsistent with the fact.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:9
With this function, we can propagate the visit probability of a passenger from the drop-off
point to its surrounding POIs.
• Step 2: Calculate POI visit probability. To evaluate the probability of the ith POI pi visited by
users, we need to aggregate all probabilities from all drop-off points in taxi traces: τ (pi ) = 
d ∈D P (dis(d,pi )), where D is the drop-off point set of taxi traces in the community.
• Step 3: Calculate mobility connectivity between POI pairs. We multiply the τ (pi ) with τ (pj)
to describe the possibility of users visiting pj from pi . This possibility is used to quantify
the mobility connectivity between pj and pi . The calculation can be formulised as:
τij =

τ (pi ) · τ (pj), if i  j
0, if i = j
. (2)
Given a community ck , we segment POI data and human mobility data into seven parts based
on days in a week. Then, we apply the three-step mobility graph construction method over the
seven parts of data. After that, we can obtain a graph setG(k) of seven mobility connectivity graphs
across POIs, where G(k) = {G(k)
1 , G(k)
2 ,..., G(k)
t ,..., G(k)
7 }, G(k)
t denotes the mobility connectivity
graph across POIs of the community ck on the tth day of a week.
3.3 Collective POI Embedding
Since POIs are links between communities and people, mobility-based POI-level features can reveal
more patterns about the structure of the community. Along this line, we propose a collective POI
embedding method over the periodic mobility graphs, based on auto-encoder.
Before introducing the details of our proposed collective POI embedding method, we first give
a brief review of the traditional auto-encoder model. Auto-encoder is an unsupervised neural
network model, which projects the instances (in original feature representations) into a lowerdimensional feature space via a series of non-linear mappings. However, the traditional autoencoder can only take one input in each training iteration. However, since we have constructed
periodic mobility graphs to capture the spatiotemporal dynamics of the community structure, we
need a collective learning method to learn the embeddings of community structure from the intercorrelations of multiple mobility graphs.
To solve the problem, we propose a collective POI embedding method. Formally, for a given
community ck , the ith row of the constructed periodic graph G(k)
t is used to represent the ith
POI p(k)
i,t on the day t of a week. Then, given a POI p(k)
i , we have seven vectors {p(k)
i,t }
∗, where
t = 1, 2,..., 7. We utilize these seven vectors as inputs. Meanwhile, we denote the embeddings of
the POI pi on the day t as {y(k),1
i,t , y(k),2
i,t ,..., y(k),o
i,t }, at hidden layers 1, 2,..., o in the encoding step,
respectively. The encoding result of pi in the targeted lower-dimensional feature space can be represented as z
(k)
i ∈ RN . To handle the problem of multiple inputs, we add embeddings ensembling
process on the o + 1 layer before generating z
(k)
i , as shown in Figure 6. Then, the encoding step
can be formulated as:
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪
⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪
⎩
y(k),1
i,t = σ (W(k),1
i,t p(k)
i,t + b(k),1
i,t ),∀t ∈ {1, 2,..., 7},
y(k),r
i,t = σ (W(k),r
i,t p(k)
i,t + b(k),r
i,t ),∀r ∈ {2, 3,..., o},
y(k),o+1
i = σ (

t W(k),o+1
t y(k),o
i,t + b(k),o+1
t ),
z
(k)
i = σ (W(k),o+2y(k),o+1
i + b(k),o+2),
(3)
where Ws and bs denote the weight terms and bias terms, respectively. In particular, W(k)
t denotes
the weight term and b(k)
t denotes the bias term for p(k)
i at the embeddings ensembling process.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.  
63:10 P. Wang et al.
Fig. 6. Collective POI embedding.
In the decoding step, the input will be the embedding z
(k)
i (the output of the encoding step),
and the final output will be the reconstructed vector pˆ
(k)
i,t . First, we dispatch z
(k)
i into seven latent
vectors for each day. Then, the reconstructed embeddings at each hidden layer can be represented
as yˆ
(k),o
i,t , yˆ
(k),o−1
i,t ,..., yˆ
(k),1
i,t . The relationship among these vector variables can be denoted as
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪
⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪
⎩
yˆ
(k),o+1
i = σ (Wˆ (k),o+2z
(k)
i + ˆ
b(k),o+2),
yˆ
(k),o
i,t = σ (Wˆ (k),o+1
t yˆ
(k),o+1
i + ˆ
b(k),o+1
t ),
yˆ
(k),r−1
i,t = σ (Wˆ (k),r
i,t yˆ
(k),r
i,t + ˆ
b(k),r
i,t ),∀r ∈ {2, 3,..., o},
pˆ
(k)
i,t = σ (Wˆ (k),1
i,t yˆ
(k),1
i,t + ˆ
b(k),1
i,t ),
(4)
where Ws and bs denote the weight terms and bias terms, respectively. In particular, Wˆ (k)
t denotes
the weight term and ˆ
b(k)
t denotes the bias term for p(k)
i at the embeddings dispatching process.
For the loss function, to tackle the sparsity problem (there are 0 for both z
(k)
i and pˆ
(k)
i,t ), we assign
a larger weight for the loss introduced by the non-zero features. Then, we aggregate the loss of
each day t to obtain the final loss function:
L(k) =

t ∈ {1,2,...,7}

i
(p(k)
i,t − pˆ
(k)
i,t )  v(k)
i,t 2
2 , (5)
where v(k)
i,t is the weight vector corresponding to the input p(k)
i,t . The entries in v(k)
i,t corresponding
to non-zero elements are set to a value λ (λ > 1 denotes a larger weight to fit these features); the
rest entries in v(k)
i,t are set to 1.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:11
3.4 Aligning and Aggregating POI Embeddings to Community Embeddings
With the collective deep auto-encoder, we can obtain the embeddings (vector representations) of
POIs. However, we aim to extract the embeddings of urban communities. Since an urban community has many POIs, our objective is to weight, align, and aggregate the POI embeddings into the
vector representations of urban communities.
To achieve this goal, we proceed with two steps: (1) aggregating POI embeddings to POIcategory embeddings and (2) aggregating POI-category embeddings into community embeddings.
(1) Aggregating POI embeddings to POI-category embeddings: Be sure to notice that different
urban communities might have different numbers of POIs, and, thus, the sizes of the mobility
graphs vary over communities. It therefore is very challenging to semantically align and aggregate
the embeddings of individual POIs into the embeddings of a community. Unlike indidividual
POIs, POI categories can be semantically aligned. More importantly, different from the number
POIs in urban communities, the number of POI categories is fixed in every urban community.
Along this line, we propose to aggregate POI embeddings into the embeddings of POI categories
for each community. Intuitively, given a POI category, for example, education, we can sum
up the embeddings of all the education POIs into the POI-category embedding of education.
However, such simple summation ignores the fact that the latent features in a POI embedding
indeed have different importances and weights. To quantify the importance of each latent
feature in the POI embeddings, we develop an unsupervised graph-based weighted aggregation
approach.
Traditionally, if the learned latent representations of urban communities are to be applied to a
specific application problem, e.g., crime rate prediction, then a straightforward method for estimating feature weights is to directly calculate the statistical relevance between the latent features
of the learned embedding vectors and the crime rates. However, this idea is not generalized and
highly depends on the availability of the target values in prediction tasks. Our proposed unsupervised weighting method is important, because the unsupervised fashion is designed to ensure
that the learning of feature weights does not depend on the availability of the target values to be
predicted and thus is independent from the application problems to be applied.
Formally, given a community ck , let G˜ (k) be the embedding vectors of all the POIs in the community ck . G˜ (k) ∈ RM×N , where M is the number of POIs and N is the number of latent features in
the POI embedding vectors, each row of G˜ (k) is the embedding (latent feature vector) of a POI, each
column of G˜ (k) is a latent feature (i.e., a dimension of the latent feature space) in POI embeddings.
The general idea of our proposed graph-based weighting method is as follows: We first create a POI similarity graph, where a vertex is a POI, and the weight of an edge is the similarity
of the two embedding vectors of two corresponding POIs. Then, we create an importance measurement to quantify the importantance of a latent feature in the embedding feature space by
exploiting such a POI similarity graph. Specifically, for two POIs that are highly smilar (a highweight edge in the graph), if the targeted latent feature is important, then the two values of the
latent feature in the two POI embeding vectors should be consistently similar, and we will increase its importance. Otherwise, we will penalize its importance measurement. Likewise, for two
POIs that are not similar (a low-weight edge in the graph), if the targeted latent feature is important, then the two values of the latent feature in the two POI embeding vectors should be
different.
Given the lth feature in the POI embedding vectors, we evaluate its importance based on the
following steps:
• First, for every POI pair, we calculate the similarity between two POIs based on their embedding vectors using the cosine similarity, which is given by
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:12 P. Wang et al.
simi,j =

l G˜ (k)
[i,l] × G˜ (k)
[j,l]

l G˜ (k)[i,l]2 ×

l G˜ (k)[j,l]2
. (6)
Based on the above, we can build a POI similarity graph.
• Second, we calculate the weight of lth dimension of the feature by examining every edge
(each POI pair) of the POI similarity graph. The weight is given by
w(k)
l =

i ∈ck

j ∈ck simi,j × |G˜ (k)
[i,l] − G˜ (k)
[j,l]|
M . (7)
The intuition behind Equation (6) and Equation (7) is as follows: If the lth dimension of the latent
feature makes more sense, when POI pi and pj are very similar, then the difference of pi and pj
on the lth dimension (|G˜ (k)
[i,l] − G˜ (k)
[j,l]|) should be very small. Therefore, if the lth dimension
of the latent feature does not make much sense, then |д[i,l] − д[j,l]| will increase; if pi and pj are
very similar, then simi,j will further penalize |д[i,l] − д[j,l]|.
By using this method, we can obtain the latent feature weight set w(k) = {w(k)
1 ,w(k)
2 ,...,
w(k)
l ,...,w(k)
N }.
Gˆ(k)
[s,l] =

pi ∈Φs
G˜ (k)
[i,l] × w(k)
l , (8)
where Gˆ(k) is the POI-category embedding graph for the community ck and Φs is the sth POI
category.
(2) POI alignment: Given a community ck , we align each row of Gˆ(k) into a vector: G(K) =
(Gˆ(k)
[1, ∗], Gˆ(k)
[2, ∗],..., Gˆ(k)
[s, ∗])
T , where G(K) is the aligned community embedding that is
also the output of the proposed representation learning framework.
4 APPLICATIONS
To evaluate and interpret the embeddings of residential communities, we apply our proposed embedding framework to two applications: (1) predicting willing to pay (WTP) for urban communities
and (2) spotting vibrant urban communities.
4.1 Predicting Willing to Pay (WTP)
Empirical studies have shown that the WTP for communities can be reflected by the return rates
of real estate prices over a market period, i.e., rising or falling markets [14, 21]. Therefore, given a
market period, WTP can be measured by the ratio of the price increase relative to the starting price
of a market period, i.e., r = Pf −Pi
Pi , where Pf and Pi denote the final and initial prices, respectively.
In this application, we first learn and extract the representation features of urban communities
using the proposed collective embedding method. Then, we calculate the benchmark WTP values
for each community. Finally, we utilize linear regression to predict the WTP for each community.
4.2 Spotting Vibrant Urban Communities
We aim to spot vibrant urban communities. Intuitively, a community can be considered prosperous and vibrant if the community can attract a great number of mobile users to visit and consume
or if the community can provide a variety of products and services to residents. Therefore, we
propose a measurement, which we call community vibrancy for simplicity, to measure the combined effect of both the density and diversity of consumption check-in activities. Specifically, for
the community ck , we first count the number of consumption check-in events as the density of
consumption activities, denoted by freq(k)
. In addition, we measure the diversity by calculating
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:13
Fig. 7. Analysis of community vibrancy.
the entropy of check-in events over different POI categories: div(k) = m
i=1 freq(k)
i , where freq(k)
i
denotes the consumption activity amount of the ith POI category in the community ck . Finally, we
fuse the density and diversity using the the harmonic mean to represent the score of community
vibrancy: uk = 2×freq(k)
×div(k)
freq(k)
×div(k) .
Figure 7(a) shows that all the communities are sorted in a descending order in terms of the
computed vibrancy scores. From the curve in Figure 7(b), we can identify four inflection points,
representing the vibrancy scores: 0.9667, 0.9171, 0.8934, and 0.8087, respectively. The four inflection points are used to segment the curve into five segments. Accordingly, we can assign five-level
ratings to each segment as its ranking relevance label, ranging from 0 to 4. We observe that the distribution of the community vibrancy scores complies with a power-law distribution, which means
that only a small number of residential communities are highly vibrant while most communities
are around the mean value of the vibrancy scores. This observation is consistent with our common
sense that most people are middle-class and only a small group of people are rich.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:14 P. Wang et al.
Table 1. Statistics of the Experimental Data
Data Sources Properties Statistics
Taxi Traces
Number of taxis 13,597
Effective days 92
Time period Apr. – Aug. 2012
Number of trips 8,202,012
Number of GPS points 111,602
Total distance(km) 61,269,029
Residential Communities
Number of residential communities 2,990
Latitude and Longitude
Time period of transactions 04/2011 – 09/2012
POIs
Number of POIs 328668
Number of POI categories 20
Latitude and Longitude
Check-Ins
Number of check-in events 2,762,128
Number of POI categories 20
Time Period 01/2012–12/2012
Formally, letuk be the vibrancy score of the community ck , and rank(k) denote the ranking of the
community ck based on the vibrancy score uk . Then, the problem of ranking vibrant communities
can be formulated as follows: Given the POI and human mobility data, we aim to predict the
vibrancy ranking rank(k) of the community ck using the community embeddings learned by the
our proposed framework.
5 EXPERIMENTAL RESULTS
We provide an empirical evaluation of the performances of the proposed method on real-world
urban community and human mobility data.
5.1 Data Description
Table 1 shows the statistics of four data sources used in the experiment. The taxi GPS traces are
collected from a Beijing taxi company. Each trajectory contains trip ID, distance(m), travel time(s),
average speed(km/h), pick-up time and drop-off time, pick-up point and drop-off point. We also
extracted POIs related data from www.dianping.com, which is a business review site in China. In
addition, we obtain the Beijing residential community data by crawling www.soufun.com, which
is the largest real-estate online system in China; and we obtain the check-in data of Beijing by
crawling www.jiepang.com, which is a Chinese version of Fourquare. Each check-in event includes
POI name, POI category, address, longitude, and latitude.
5.2 The Application of WTP Prediction
5.2.1 Experimental Setup.
(1) Baselines. To evaluate the effectiveness our proposed collective embedding method, we
compare six feature sets:
• Explicit Features (EF): Specifically, the explicit features are explicitly defined and
extracted from the data as follows: (i) POI numbers per category: There are 20 POI
categories including vehicle service, car dealer, repair & maintenance, motorbike dealer
& service, food & beverage, shopping, daily life service, sports recreation, medical
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:15
Table 2. The Performance Comparison on WTP Prediction
Feature set ELF LF EF V-1 V-2 V-3
RMSE 0.0036 0.0057 0.0422 0.0273 0.0350 0.0193
service, lodging, tourist, real estate, government & non-government, organization,
culture & education, transportation, finance & insurance, company & factory, road
furniture, named place & address, public service; (ii) Average commute distance;
(iii) Average commute speed; (iiii) Average commute time; (v) Number of mobilities;
(vi) Average distance between POIs.
• Latent Features (LF): Specifically, the latent features are learned from the proposed collective embedding method.
• The combination of EF and LF (ELF). Sppefically, we combine both the explicit features
via traditional feature extraction and the latent features via representation learning together into a new feature set.
• Variation of step1 (V-1). In the first step of the learning framework, we propose a probabilistic way to derive the mobility graphs over POIs for different days. There is a simple
variation that use distance-based matching of the records in the trajectories with the
POIs and build a transition graph deterministically. We modify the first step and keep
other parts of the learning framework the same. We use this version of framework to
generate features.
• Variation of step2 (V-2). In the second step of the learning framework, we propose a
collective learned method based on Autoencoder. An alternative way is to, first, derive
different embeddings using different graphs and then compute the POI embedding as
an average of the embeddings. We modify the second step and keep other parts of the
learning framework the same. We use this version of framework to generate features.
• Variation of step3 (V-3). In the third step of the learning framework, we propose graphbased method to aggregate the POI embeddings into community embeddings. An alternative way is just averaging over the POI embeddings in the community to derive the
community embedding. We modify the third step and keep other parts of the learning
framework the same. We use this version of framework to generate features.
(2) Evaluation Metrics.
We utilize the root-mean-square error (RMSE) to evaluate the performance.
5.2.2 Results and Analysis. Table 2 shows the performance comparison of six feature sets in
term of RMSE. In all cases, we observe that the combination of explicit features and latent features
achieves the best performance, while the explicit feature has the highest errors. For the three variations of our proposed learning framework, the performances are worse than the latent features.
This validates the necessity of designing such three steps for learning.
5.3 Spotting Vibrant Urban Communities
5.3.1 Performance Comparison with Application Related Methods. As mentioned before, we apply the proposed collective embedding method to ranking high-rated urban communities as an application. Here, we choose some application related (ranking) methods for comparison to demonstrate the effectivenes of our proposed method.
(1) Baseline Algorithms.
To show the effectiveness of the collective embedding framework, we compare the performances of different combinations of feature sets and ranking algorithms.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:16 P. Wang et al.
First, we used five learning methods to rank (LTR) algorithms for comparison:
• Multiple Additive Regression Trees (MART) [17]: This is a boosted tree model in which
the output of the model is a linear combination of the outputs of a set of regression trees.
MART is a class of boosting algorithms that may be viewed as performing gradient
descent in function space, using regression trees.
• RankBoost (RB) [16]: This is a boosted pairwise ranking method that trains multiple
weak rankers and combines their outputs as final ranking. The basic idea of RankBoost
is to formalize learning to rank as a problem of binary classification on instance pairs
and then to adopt boosting approach. Like all boosting algorithms, RankBoost trains one
weak ranker at each round of iteration and combines these weak rankers as the final
ranking function. After each round, the document pairs are re-weighted: It decreases
the weight of correctly ranked pairs and increases the weight of wrongly ranked pairs .
• LambdaMART (LM) [9]: This is the boosted tree version of LambdaRank, which is based
on RankNet. LambdaMART combines MART and LambdaRank.
• ListNet (LN) [10]: This is a listwise ranking model with permutation top-k ranking likelihood as objective function. It introduces two probability models, respectively referred
to as permutation probability and top-k probability, to define a listwise loss function
for learning. Neural Network and Gradient Descent are then employed as model and
algorithm in the learning method.
• RankNet (RN) [8]: This uses a neural network to model the underlying probabilistic
cost function.
In addition, we utilize six feature sets mentioned in Section 5.2.1 for comparison.
Finally, we create 30 combinations of features and rankers for comparisons. We use “-”
between a feature set and a ranker to denote a combination, for instance, “ELF-MART.”
We utilize RTree1 to index geographic items (i.e., taxi and bus trajectories, checkins, etc.)
and extract the defined features. For these five LTR algorithms, we use RankLib.2 We set
the number of trees = 500, the number of leaves = 10, the number of threshold candidates
= 256, and the learning rate = 0.1 for MART and LambdaMART. We set the number of
iteration = 300, the number of threshold candidates = 10 for RankBoost. We set learning
rate = 0.0005, number of hidden layers = 1, the number of hidden nodes per layer = 10, and
the number of epochs to train for ListNet and RankNet both. After we generate the data
pairs {f eature,rankinд relevance}, we shuffle the data pairs and select 80% for training
and 20% for testing, where f eature refers to EF, LF, or ELF and rankinд relevance is based
on corresponding vibrancy values.
(2) Evaluation Metrics.
Normalized Discounted Cumulative Gain (NDCG@N). The discounted cumulative
gain (DCG@N) is given by DCG[n] =
 reln if n = 1
DCG[n − 1] + reln loд2n , if n >= 2 , where reln denotes
the ranking relevance of the nth community, defined in Figure 7(b). Later, given the
ideal discounted cumulative gain DCG
, NDCG at the nth position can be computed as
NDCG[n] = DCG[n]
DCG
[n]
. The larger NDCG@N is, the higher top-N ranking accuracy is.
Kendall’s Tau Coefficient. Kendall’s Tau coefficient (or Tau for short) is a measure of
rank correlation, i.e., the similarity of the orderings of the data. Let us assume that each
community i is associated with a benchmark score yi and a predicted score fi . Then, for
a community pair < i, j >, < i, j > is said to be concordant if both yi > yj and fi > fj or if
1https://pypi.python.org/pypi/Rtree/. 2http://sourceforge.net/p/lemur/wiki/RankLib/.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:17
both yi < yj and fi < fj . Also, < i, j > is said to be discordant if both yi < yj and fi > fj
or if both yi < yj and fi > fj . Tau is given by Tau = #conc−#disc
#conc+#disc .
F-measure@N. F-measure@N incorporates both precision and recall in a single metric by taking their harmonic mean: F@N = 2×Precision@N ×Recall@N
Precision@N +Recall@N . Since we use a fivelevel rating system (4 > 3 > 2 > 1 > 0) instead of binary rating, we treat the rating ≥3 as
“high-vibrancy” and the rating <3 as “low-vibrancy.” Given a top-N community list EN
sorted in a descending order of the prediction values, the precision and recall are defined
as Precision@N = |EN
	 E≥3 |
N and Recall@N = |EN
	 E≥3 |
|E≥3 | , where E≥3 are the communities
whose ratings are greater or equal to 3.
(3) Results and Analysis. Figure 8 shows the performance comparison of the 15 combinations of the feature sets and the ranking algorithms in terms of Tau, NDCG@N, and Fmeasure@N. In all cases, we observe a significant improvement by considering the learned
embeddings with respect to baselines.
First, we control the ranker and investigate the effectiveness of different feature sets.
Among the five rankers, the combination of explicit features and latent features performs
the best. Besides, we observe that the latent features outperform the explicit features. In
particular, for NDCG@N, when N is getting larger, the results clearly demonstrate the
superiority of the latent features learned by our framework. This observation proves that
the latent features are discriminative for spotting top vibrant communities. A potential interpretation of this observation is that human mobility in dynamic spatiotemporal graphs
provide more information about community structures than the static geographical locations. When we combine the latent and explicit features together, both the dynamic and
static structural information of a community are combined to provide a more comprehensive and effective representation for communities. Therefore, the predictive accuracies are
significantly improved.
5.3.2 Comparison with Representation Learning Algorithms. We compare our proposed representation learning framework with other state-of-art representation learning algorithms to evaluate the representation learning performance.
(1) Baseline Algorithms.
We take three state-of-art representation learning algorithms as baselines, including Skipgram, Restricted Boltzmann Machines (RBMs), and Non-negative Matrix Factorization
(NMF).
• Skip-gram: This is a type of Word2vec model that is used to produce word embeddings.
Skip-gram uses the current word to predict the surrounding window of context words.
The skip-gram architecture weighs nearby context words more heavily than more distant context words [44].
• RBMs: This is a generative stochastic artificial neural network that can learn a probability distribution over its set of inputs. RBMs are a q two-layer undirected graphical
model that can produce distributed representations of the input and perform well in
terms of retrieval accuracy [29].
• NMF: This is a technique that learns a low-dimensional representation of a dataset.
When applying NMF over a matrix, the factorized sub-matrix can be interpreted as the
latent representation of the original matrix [49].
We use these three baselines and our proposed framework to generate representation
learning results. Then, we feed these representation learning results into five LTR algorithms to examine the representation learning performance. After we generate the data
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:18 P. Wang et al.
Fig. 8. The overall performance comparisons of the15 feature and ranker combinations in terms of NDCG,
F-measure, and Tau.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:19
pairs {f eature,rankinд relevance}, we shuffle the data pairs and select 80% for training
and 20% for testing, where f eature refers to EF, LF, or ELF and rankinд relevance is based
on corresponding vibrancy values.
(2) Evaluation Metric.
We compare the performance of our proposed framework, Skip-gram, RBMs, and NMF,
in terms of NDCG@N.
(3) Results and Analysis.
The experimental results are shown in Figure 9. As we can see in Figure 9, in most cases,
our proposed model outperforms the skip-gram model. However, for NDCG@5, the skipgram is better than our model in some cases. A potential explanation is that the skip-gram
algorithm weighs nearby context words more heavily than distant context words. In this
way, the connectivities of the neighboring POIs in a community play a more important
role in the skip-gram algorithm for identifying top vibrant communities. However, the
auto-encoder is still better suited for the spatial graph embedding scenario than the skipgram method. There are two main reasons.
(a) First, the skip-gram algorithm is originally designed for word embedding to consider
the semantics of neighboring words in the sentences. If we regard an urban community as a document and regard a POI as a word, then it is very difficult to define
what is “neighboring words in the sentences.” In the spatial scenario, human mobility connectivity is related to but not totally determined by geographic distances. No
matter whether the definition of “neighboring in the sentences” is based on distance
or human mobility connectivity, the POIs are difficult to be organized as a “semantic”
sentence properly. However, if we represent a mix of POIs, human mobility data, and
urban communities into graphs, Autoencoder is capable of projecting these graphs
into lower-dimensional vectors, while reserving the relationships between POIs in the
embedded vector implicitly. This mechanism does not require us to explicitly define
what “neighboring words in the sentences” are.
(b) Second, in this article, we consider the periodical patterns of the community structure. Therefore, we need to collectively model the inputs of different days in a week.
Thanks to the the nature of the neural network, Autoencoder can be easily modified
and improved to meet the requirement than the skip-gram model.
5.4 Robustness Check
We apply the learned embeddings and the ranking algorithms to different subgroups of the communities to examine the robustness of our method in these subgroups. We used two grouping methods
to segment the communities into multiple subgroups: (i) neighborhood profile-based grouping and
(ii) administrative district-based grouping. For (i), we applied k-means [31] to cluster the communities into five groups. The communities in each group generally share similar functionality and
representations. For (ii), for grouping, we chose four administrative districts in Beijing: Haidian,
Chaoyang, Xicheng, and Dongcheng, because most of the communities are located the above four
districts. Later, we conduct the robustness check from two perspectives.
(i) NDCG@N performance comparison. We intend to answer the following question: Compared to the accuracy of our method in all the communities, will our proposed method be consistently effective in the community subgroups? From Figure 8, we have observed that the “ELF-LN”
combination performs the best in all the communities. Therefore, we pick “ELF-LN” and examine
the effectiveness of “ELF-LN” on the community subgroups. Figure 10 indicates that, for neighborhood profile-based grouping, “ELF-LN” is consistently accurate in the neighborhood profile-based
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:20 P. Wang et al.
Fig. 9. The representation learning comparisons of the Skip-gram, RBMs,NMF, and our proposed framework
in terms of NDCG@N.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:21
Fig. 9. Continued.
community subgroups in terms of NDCG@N. We can obtain similar observations in the administrative district-based community subgroups.
(ii) Average variance of performance. For each feature set, we measure the performance
variance of all the feature-ranker combinations in terms of NDCG, F-measure, and Tau. Table 3
and Table 4 show that (1) overall, the variance of the “ELF” feature set is the smallest, and (2)
the latent features in community embeddings (“LF”) achieve the second smallest variance and are
much better than the explicit extracted features.
The results validate the robustness of our method in different community subgroups.
5.5 Investigation of Community Structure Properties
We investigate the structure of urban communities in Beijing in two aspects, (i) community connectivities and (ii) the learned representation of the community structure.
5.5.1 Community Connectivities. We utilize traffic flow as the estimation of the community
connectivities. As shown in Figure 11, we use heat map to visualize the results. The darker the color,
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:22 P. Wang et al.
Fig. 10. The NDCG@Ns of the ELF-LN combination over community subgroups. (N = 5, 10, 15, 20).
the higher the connectivity. We can observe that communities with high connectivities are mainly
distributed around the main road network of Beijing, which demonstrates that the convenience of
transportation utilities contributes a lot to connectivities.
5.5.2 The Learned Representation of the Community Structure. For simplicity, we choose two
similar communities with similar POI distributions in different POI categories, as shown in Table 5.
Then, we utilize heat map to visualize the learned representations of community structures of
these two communities. In Figure 12, each column represents the corresponding dimension of the
learned representation space, and each row represents the corresponding community. Moreover,
the color represents the value of the corresponding dimension. The darker the color, the higher the
value. We can observe that for these two communities with similar POI distributions, the learned
representations of community structures are still very similar.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:23
Table 3. The Performance Variances of Different Feature Sets over Neighborhood
Profile-based Community Subgroups
Features
Variances
on NDCG
@5
Variances
on NDCG
@10
Variances
on NDCG
@15
Variances
on NDCG
@20
Variances on
Fmeasure
@5
Variances on
Fmeasure
@10
Variances on
Fmeasure
@15
Variances on
Fmeasure
@20 Tau
ELF 0.0527 0.0581 0.0921 0.0652 0.0019 0.0023 0.0039 0.0059 0.0526
LF 0.0797 0.0825 0.1081 0.1072 0.0018 0.0009 0.0012 0.0019 0.0888
EF 0.1609 0.2116 0.2754 0.2422 0.0022 0.0023 0.0039 0.0059 0.0987
Table 4. The Performance Variances of Different Feature Sets over Administrative
District-based Community Subgroups
Features
Variances
on NDCG
@5
Variances
on NDCG
@10
Variances
on NDCG
@15
Variances
on NDCG
@20
Variances on
Fmeasure
@5
Variances on
Fmeasure
@10
Variances on
Fmeasure
@15
Variances on
Fmeasure
@20 Tau
ELF 0.0871 0.0867 0.0392 0.0963 0.0019 0.0022 0.0039 0.0059 0.0285
LF 0.0913 0.1103 0.0828 0.1389 0.0022 0.0023 0.0039 0.0059 0.0925
EF 0.2970 0.2937 0.2811 0.1961 0.0019 0.0023 0.0039 0.0059 0.1027
Fig. 11. Visualization of the community connectivities.
Table 5. The POI Distributions of Two Selected Communities
Restaurant Business/Public Agency Entertainment Transportation/Lodge Others
Community 1 3,572 7,858 1,951 2,136 311
Community 2 2,395 7,487 1,968 2,423 420
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:24 P. Wang et al.
Fig. 12. Visualization of the learned structure representations of two similar communities.
6 RELATED WORK
Representation learning. Our work has connections with representation learning that can
be categorized into three main approaches: (i) probabilistic models, (ii) geometrically motivated
manifold-learning approaches, and (iii) reconstruction-based algorithms related to auto-encoder.
The key idea of the probabilistic model-based approaches is to use unsupervised feature learning
to learn a hierarchy of features one level at a time [6, 28, 35, 45, 48]. For example, Wang et al. used
a regression learner to learn the optimized layout of heterogeneous elements on the search result
page (SERP) [51]. The work in Reference [2] used an unsupervised learning method to obtain a
hierarchy of features one level at a time and to learn a new transformation at each level to be
composed with the previously learned transformations.
In the second category, the large majority of the algorithms adopt a non-parametric approach,
based on a training set nearest-neighbor graph [7, 43, 47, 52, 52]. Hinton et al. [27] and Bengio et al.
[4] exploited the RBMs to perform unsupervised feature learning for natural image modeling. The
work in Reference [43] introduced “t-SNE” that was built on a geometric perspective that adopts
a non-parametric approach, based on a training set nearest-neighbor graph, which is a variation
of Stochastic Neighbor Embedding [26].
As for the auto-encoder-based methods, compared to probabilistic models, it does not need complicated posterior distributions because of the use of latent variables. Auto-encoders can directly
parameterize features or representation functions and learn a direct encoding [3, 5, 30, 34, 56, 63].
Therefore, we chose the auto-encoder method as our base model and further developed a collective
spatiotemporal auto-encoder to learn the representation of community structure.
Urban computing. Urban computing is a process aiming to tackle major issues in cities by analyzing and modeling urban data (e.g., traffic flow, human mobility, and geographical data). One of
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
Learning Urban Community Structures 63:25
the biggest challenges in urban computing is to compute with heterogeneous data [61]. Zheng et al.
proved that setting equally weight for different data source in a regression of classification model
does not achieve the best performance [62]. Yuan et al. discovered regional functions of a city
using POIs and taxi traces [59]. Zhang et al. first detected spatiotemporal hotspots and then from
geo-tagged social media data and then used both reconstruction- and single graph-based strategies to learn the representations of geo-tagged time-stampped words [60]. Zhang et al. employed
an accelerated mode seeking procedure to detect spatial-temporal hot spots underlying people’s
activities and jointly embedded all spatial, temporal, and textual units into the same space [60].
Compared to the embeddings of geo-tagged time-stampped words, our work targets at a different spatial gradularity and aims at learning the representation of an entire urban community. Fu
et al. proposed a probabilistic latent factor model to learn the portfolios of urban functions in
a zone [18]. Cici et al. identified emerging patterns with multi-relational approach from spatial
data [11]. Wang et al. adopted the skip-gram model to learn the region representation from urban
and mobile data [50]. Different from the skip-gram model on single graph, our work focuses on
collectively learning from multiple spatiotemporal graphs. Bejan et al. mined the driving route for
end users by considering physical features such as route, traffic flow, and driving behavior [1].
Liu et al. detected spatial-temporal causality of outliers in traffic data [40]. Liu et al. provided
an integrated mobility pattern analysis between the location traces of taxicabs and the mobility
records in bus transactions [41]. Lan et al. introduced a road segment-based anomaly detection
problemthat detects abnormal road segments, each of which has its “real” traffic deviating from
its “expected” traffic and infers the major causes of anomalies on the road network [33]. Liu et al.
focused on the identification and optimization of flawed region pairs with problematic bus routing to improve utilization efficiency of public transportation services, according to people’s real
demand for public transportation [42]. Liu et al. provided a focused study of temporal retweeting
patterns and their influence on social media marketing campaigns [38]. Yao et al. presented a novel
method that incorporates the degree of temporal matching between users and POIs into personalized POI recommendations [58]. Fu et al. developed a system, named CUMMA, for classifying
service usages of mobile messaging apps by jointly modeling user behavioral patterns, network
traffic characteristics, and temporal dependencies [20]. Liu et al. proposed a bike-sharing network
optimization approach by considering multiple influential factors to enhance the quality and efficiency of the bike-sharing service by selecting the right station locations [39]. Yao et al. proposed
a Deep Multi-View Spatial-Temporal Network (DMVST-Net) framework to model both spatial and
temporal relations [57].
Learning to rank. In addition, our work is related to the Learning-to-Rank method, which
includes pointwise, pairwise, and listwise approaches. The pointwise methods [24] reduce the LTR
task to a regression problem: Given a single query–document pair, predict its score. The pairwise
methods approximate the LTR task to a classification problem. The goal of the pairwise ranking is
to learn a binary classifier to identify the better document in a given document pair by minimizing
the average number of inversions in ranking [8, 16]. The listwise methods optimize a ranking loss
metric over lists instead of document pairs [53]. For instance, Li et al. proposed AdaRank [55] and
ListNet [10], and Burges et al. proposed LambdaMART [9]. More recent work in Reference [32]
further learned the ranking model that is constrained to be with only a few nonzero coefficients
using L1 constraint and propose a learning algorithm from the primal dual perspective.
7 CONCLUSION REMARKS
In this article, we studied the problem of learning urban community structures. We take into account not only the points of interests but also human movement among these POIs. We formulate the problem as a learning task over multiple mobility graphs of POIs and propose a novel
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 6, Article 63. Publication date: November 2018.
63:26 P. Wang et al.
collective embedding framework. The framework consists of three major steps. We started with a
probabilistic propagation method to unify and represent static POIs and dynamic human mobility
records as periodic spatial-temporal mobility graphs. We then developed a collective embedding
method to learn the embeddings of POIs from the obtained mobility graphs. Based on the POIs
embeddings, we further proposed an unsupervised graph-based weighted aggregation method to
identify community embeddings. To evaluate the performance of the proposed approach, we applied it to predict WTP for communities and spot vibrant communities from real datasets. The
experimental results show that our approach can effectively learn the representation of community structures and substantially enhance the vibrant community prediction accuracy. Finally, it is
worth noting that our proposed collective framework also has the potential to be generalized to
learn the structural representations of other geographic items.