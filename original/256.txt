At present, space information networks are widely used in various fields and gradually attract more and more users to access. However, because the wireless channel in space information networks is public, it is extremely vulnerable to attacks such as eavesdropping, replay and impersonation attacks, which may lead to the leakage of privacy and secret information. In recent years, many authentication schemes have been proposed to prevent malicious nodes from accessing and stealing resources, but most of these schemes either do not take into account the security of satellite relay nodes or the handover problems caused by dynamic topology. To solve the above-mentioned problems, we propose a novel ECC-based authentication scheme, which not only confirms the validity of the satellite node when user and ground station authenticate each other, but also designs the handover schemes based on two possible signal handover scenarios. For the handover involving the ground station, we also design an efficient multi-user batch handover authentication scheme, which can greatly reduce the computation overhead and delay. In the security analysis, we prove the security of our protocol based on the ROM model and AVISPA formal verification tool, and verify that our protocol can meet the security attributes and resist various forms of attacks through informal security analysis. Finally, security and performance analysis results demonstrate that our protocol is more suitable for user access and handover in space information networks while ensuring higher security requirements.

Keywords
Space information network
Authentication
Handover

ECC

ROM

AVISPA
1. Introduction
With the urgent needs of users for high-speed, stable and reliable global communications, signal transmission technology is developing rapidly and promoting the globalization process. Meanwhile, the concepts of Internet of Things (IoT), edge computing and fog computing have gradually become a new paradigm for the interconnection of everything (Chiang and Zhang, 2016). However, in some application scenarios, devices are usually located in remote areas with poorly constructed communication facilities, so data cannot be transmitted in real time through the traditional terrestrial network (Xue et al., 2019). Space information network (SIN) is proposed under this background requirement (Guo and Du, 2020, Zhang et al., 2019), which enables devices to receive stable communications, navigation, observation and other services anywhere through satellite relay. Furthermore, the communication delay between satellite and ground communication devices has now been reduced to 10 ms, which can also satisfy most delay-sensitive users (Yao et al., 2018).

Unfortunately, because the information in SIN is transmitted on the exposed wireless link, the adversary will launch eavesdropping attacks, replay attacks, man-in-the-middle attacks and other forms of attacks on the public link, which will make the privacy, confidential information and system resources stolen by illegal users (Roy-Chowdhury et al., 2005). As the first step for a user to apply for the service from ground stations, authentication protocol can be adopted first to enable both parties to authenticate each other, negotiate a sufficiently secure key to protect subsequent communications and prevent malicious nodes from accessing (Yang et al., 2018, Jiang et al., 2015). Although the issue of user access security has attracted the attention of academic community, there is still not a sufficiently reliable access authentication protocol to meet the security requirements of SIN. For example, Zheng et al., 2012, Zhang et al., 2015 and Qi and Chen (2018) only involve mutual authentication between the user and the ground station, without considering the situation where the satellite relay node is untrusted or semi-trusted. When the satellite relay node is malicious, the satellite can refuse to forward any communication messages without following the protocol, and will implement attacks in an attempt to obtain the session key of both sides of the communication.

In addition, the high-speed orbital movement of the satellite will affect the communication distance and angle between the satellite and the ground equipment, which leads to a decrease in the availability and reliability of communication (Li et al., 2020). At this time, signal handover authentication mechanism is needed to replace the poor-quality relay nodes with the nodes that can provide better services. The handover process not only requires the authentication of the new node, but also ensures that the overhead is small enough to not affect the quality of service (Xue et al., 2019, Jiang et al., 2015). Although some seamless handover schemes such as Alizadeh et al. (2015) and Ma et al. (2019) have been proposed in traditional wireless networks, these schemes cannot be directly applied to SIN with unique characteristics (Xue et al., 2020). Therefore, in this paper, we propose a new secure access and handover authentication protocol that is more suitable for SIN. Specifically, our main contributions in this paper are summarized as follows:

•
In our scheme, we propose a new provably secure ECC-based authentication protocol, which not only supports user access authentication but also applies to handover verification in SIN.

•
The proposed protocol can satisfy the mutual authentication between the user and the ground station, and negotiate a security key that is not known by a third party while confirming the legitimacy of the satellite relay node. At the same time, relay satellites can also reject illegal relay information, which avoids the satellite resource consumption caused by more illegal relay information request forwarding.

•
For two possible signal handover scenarios, we respectively propose two handover schemes, one of which also supports multi-user batch handover and has a lower computational cost compared with known handover solution in SIN.

•
We prove that our protocol meets the security requirements and resists a series of attacks through two formal and one informal analysis methods. In addition, our protocol is more secure compared with the security attributes of other protocols.

•
The comparison of computational and communication overhead with other protocols shows that our protocol is relatively efficient while ensuring higher security and functionality.

The rest of the paper is organized as follows. Section 2 involves the related work. Section 3 introduces the preliminaries. Section 4 elaborates our proposed protocol. Sections 5 Security analysis, 6 Performance analysis analyze the security and performance of the proposed protocol, respectively. Finally, Section 7 draws the conclusion of this paper.

2. Related work
Recently, in order to better protect the security and privacy when accessing SIN, many scholars have been engaged in the research and design of secure authentication protocols.

In 1996, Cruickshank (1996) proposed the first authentication protocol in SIN. All authentication messages transmitted are encrypted and use public key cryptography to authenticate each other, which results in significant computational overhead and has been proven to be vulnerable to a series of attacks, such as replay attacks, impersonation attacks and denial of service attacks. After that, Hwang et al. (2003) fixed the above problems and proposed a low-computation authentication scheme that only uses the symmetric key mechanism and protects user anonymity. However, Chang and Chang (2005) not only proves that Hwang et al. (2003) cannot meet perfect forward security, but also finds that when the number of users surges, it will lead to the computing bottleneck. In 2012, an anonymous authentication scheme based on hash chain was proposed by Zheng et al. (2012), which only involved hash operations and XOR operations, thereby greatly reducing the computational overhead. Unfortunately, Zhao et al. (2016) proved that Zheng’s scheme cannot resist denial of service and impersonation attacks.

Now, with the integration of IoT technology and satellite communications, more and more smart devices can obtain the services provided by SIN. In this context, some scholars have proposed schemes for users’ smart devices to access SIN. In 2014, Zhang et al. (2015) proposed a two-factor anonymous authentication scheme, in which users need to enter their identity and password before each authentication, and after successful authentication, a new temporary identity is assigned to users by NCC. Later, after rigorous analysis of Zhang’s scheme, Qi and Chen (2018) found that the scheme was vulnerable to privileged insider attacks and denial of service attacks. For this reason, Qi and Chen proposed an enhanced authentication and key agreement scheme that can fix these two vulnerabilities. Recently, Qi et al. (2019) and Xu et al. (2020) respectively proposed anonymous authentication protocols, which can hold users accountable and change the password locally without any interaction with other nodes. However, Ostad-Sharif et al. (2019) pointed out that neither of the above two protocols can resist device loss attacks and offline password guessing attacks.

All the above-mentioned authentication protocols use unauthenticated satellites as intermediate nodes to forward the information authenticated by both parties, and do not consider the handover authentication issue caused by the relative movement of the user and the satellite. To solve the above problems, Yang et al. (2018) and Xue et al., 2019, Xue et al., 2020 respectively proposed new mutual authentication schemes that can support relay node verification and signal handover. Yang et al. (2018) proposed a group signature-based authentication scheme for user roaming, in which the satellite serves as an intermediary between the two parties to authenticate the user and the ground station separately, and ultimately the user and ground station can negotiate the session key.

However, Xue et al. (2019) pointed out that Yang’s scheme due to the group signatures introduces considerable computational overhead and is not suitable for resource-constrained and time-constrained user equipment. In the scheme of Xue, the pre-negotiation mechanism between the satellite and the ground station allows users to access SIN by only performing mutual authentication with the satellite, and then proposes handover authentication schemes for the two possible handover scenarios. Nevertheless, Xue’s scheme still has the following two defects. First, there is a security vulnerability in mutual authentication between users and ground stations when the satellite is a semi-trusted or untrusted node. The relay satellite acts as a node to authenticate the mobile user, and the ground station no longer checks the user’s identity further, which will lead to the satellite can forge a fake user identity to communicate with the ground station. Moreover, by replacing the temporary public key of the user or the ground station with the public key generated by the semi-trusted relay satellite node, the communication between the user and the ground station can be monitored. Second, although Xue proposed a batch handover authentication scheme, the computational overhead is still large. Recently, Xue et al. (2020) has proposed a new scheme based on group key that only supports handover authentication. Although the computational overhead of the handover phase of this scheme is greatly reduced, it cannot meet the security requirements of device loss attacks and perfect forward security, that is, the leakage of the group key will lead to the possibility of impersonation attacks on users or satellites.

Therefore, in this paper, a more suitable provably secure access and handover scheme for SIN is proposed, which not only ensures the security of access authentication, but also reduces the computational overhead in batch handover.

3. Preliminaries
In this section, we first briefly review the elliptic curve cryptography and its difficulty assumptions involved in the scheme, and then introduce the biometric fuzzy extractor. Next, we discuss the system model and threat model. Finally, the security requirements of the protocol are illustrated.

3.1. Elliptic curve cryptography
Elliptic curve cryptography (ECC) was originally proposed by Koblitz (1987) and Miller (1985) in the 1980s, which can provide stronger security with smaller keys than RSA. We briefly introduce the ECC concepts related to the proposed protocol and the mathematical difficulties assumptions involved.

Let  is a big prime. The elliptic curve  over the prime field 
 defined as 
: 
, where 
, 
. Given the point 
 and a positive integer 
, the elliptic curve scalar multiplication calculation formula is  ( times). For a more detailed description of ECC, refer to Koblitz (1987) and Miller (1985). Besides, the security of the protocol is based on the difficult assumptions related to ECC as described below.

Elliptic curve discrete logarithm problem (ECDLP): Given two points 
, it is difficult to compute 
 in polynomial time such that .

Elliptic curve computational Diffie–Hellman problem (ECDHP): Given three points 
, it is difficult to compute  in polynomial time.

3.2. Biometric fuzzy extractor
As Dodis et al. (2004) points out, biometrics enable one to identify an individual with a lower error rate. More importantly, compared with traditional user passwords, biometric keys have the advantages of larger random range, lower reproducibility, and are not easy to lose and forget. In this paper, we apply biometric fuzzy extractor to generate a biometric key and an auxiliary information from human biometrics such as fingerprints, face, iris and other biological data (Challa et al., 2018b, Challa et al., 2018a). In addition, the biometric fuzzy extractor can re-extract the biometric key through auxiliary information and biometrics within the error threshold. The biometric fuzzy extractor contains two functions,  and , which are introduced as follows.

•
 is the probability generation function, which inputs the biometric  to obtain auxiliary information  and biometric key , that is, .

•
 is the reproduction function, which can obtain the biometric key  based on the auxiliary information  and the re-entered biometric 
, that is, 
, where the Hamming distance between  and 
 is less than the error threshold .

3.3. System model
•
Network control center. As a fully trusted entity, NCC issues public key and private key for satellite, GS and user in the registration phase. Furthermore, as the administrator of the entire network, NCC has the highest security protection capabilities, and no one can perform any attack to obtain confidential information stored in NCC.

•
Satellite node. Satellite node serves as the access point for the user to obtain the service of SIN, and is responsible for forwarding the communication with GS after the user’s identity is authenticated. Compared to medium earth orbit (MEO) and geostationary orbit (GEO) satellites, low earth orbit (LEO) satellites are closer to users and can provide lower transmission delays and ensure high availability, so the satellite node that traditionally provides communication services to users is LEO satellites. Previously, LEO satellites could only be used for information forwarding, but now with the in-depth development of satellite computing capabilities, many complex operations can also be performed (Xue et al., 2019, Yang et al., 2018).

•
Ground station. Ground stations are scattered on the earth, and the communication between each GS is through the public terrestrial link. Moreover, as a service provider, GS provides subscription services to users through a LEO satellite relay after mutual authentication.

•
User. Users request subscription services from ground stations using smart devices, which are not limited to smartphones but also automobiles, aircraft, ships, and so on.

It is worth reminding that in SIN, LEO satellites and ground stations are semi-trusted entities, that is, they are strictly implemented in accordance with the protocol process but are interested in user privacy information.

3.4. Threat model
The widely used Dolev–Yao model (Dolev and Yao, 1983) is applied in our protocol, in which each entity transmits information in a public and non-secure channel. The adversary is assumed to have the following capabilities.

•
Adversary can easily intercept the transmission information of each entity over the public channel.

•
Adversary can store, delete, modify, and replay the intercepted transmission information.

•
After obtaining the user equipment, adversary can obtain the information stored in the equipment through power analysis or side channel attack (Messerges et al., 2002).

•
All steps of the authentication protocol are known to the adversary (Srinivas et al., 2017).

3.5. Security requirements
According to the related protocols that have been proposed, we conclude that a well-designed protocol should have the following important security attributes. The definitions of security attributes and related attacks can be detailed in Wazid et al. (2019).

•
Mutual authentication: When the user sends an access request to SIN, not only can GS confirm the user’s legal identity, but also the user must be able to authenticate the identity of GS. In addition, each node can check the validity of the transmitted messages received in the system.

•
User anonymity: The user’s true identity as private information cannot be leaked to any other entity during the execution of the protocol except NCC.

•
Session key negotiation: After mutual authentication between the user and GS, a secure session key should be jointly negotiated to protect future communications, rather than determined by a single node or NCC.

•
Perfect forward and backward security: Loss of the session key and other key secret values in this session will not affect the security of previous or future session keys.

•
Attacks resistance: In order to ensure the accuracy and security of the mutual authentication, the protocol should be able to withstand various attacks, such as replay attacks, man-in-the-middle attacks, impersonation attacks, device loss attacks, privileged insider attacks and denial of service attacks.

4. The proposed scheme
In this section, we detail the proposed authentication protocol based on the system model, threat model, and security requirements mentioned above. According to the scheme, the user 
 and ground station 
 mutually authenticate each other through an intermediate LEO communication satellite node 
 and negotiate a secure session key to protect future subscription services provided to 
. Similar to most authentication schemes, our protocol will be introduced in the following order: system setup phase, registration phase, mutual authentication phase, handover phase, password change phase. It is worth reminding that the protocol is designed on the premise that the clocks of the nodes are synchronized (Yang et al., 2018). The symbols used in the protocol are shown in Table 1.


Table 1. Symbol list.

Notation	Description
True identity of 
Identity of 
Temporary identity of 
Password and biometrics of 
Two functions of the fuzzy extractor
Error threshold of 
Biometric key of 
Public auxiliary data
Large prime
Elliptic curve over 
Base point of 
One-way hash function
XOR operation
Public–private key pair
Random numbers in 
Timestamp
Maximum delay threshold
Session key
Encryption function with key 
Decryption function with key 
4.1. System setup phase
NCC generates system public parameters through the following steps.

(1)
NCC randomly selects a large prime  and the secure elliptic curve 
 over the finite field 
.

(2)
NCC chooses a secure one-way hash function 
 and two functions  and  of the biometric fuzzy extractor.

(3)
NCC randomly selects the master private key 
, and then calculates the master public key 
, where  is the base point of 
.

(4)
Finally, NCC publishes the public parameters 
, 
 and keeps 
 securely.

4.2. Registration phase
During the registration phase, legal users, LEO satellite nodes and ground stations submit registration requests to NCC through secure channels, and then NCC generates master public–private key pairs for these legal nodes to prove their legal identity during the authentication phase. It is worth mentioning that no information about user privacy such as passwords and biometric keys is submitted to the NCC.

LEO satellite registration. The LEO satellite node 
 sends the identity 
 to NCC. NCC randomly selects a positive integer 
 from 
, then computes 
, 
, where 
 and 
 are the master public key and private key of 
, respectively. NCC then publicize 
 to facilitate mutual authentication between nodes in the future and sends 
 to 
. Finally, 
 securely stores 
.

Ground station registration. 
 registration process is similar to LEO satellite. After receiving the authentication request, NCC randomly selects a positive integer 
 from 
, computes 
, 
, then sends 
 to 
. Finally, NCC stores and publicize 
, 
 securely stores 
.

(1)
Before sending the registration request, 
 enters the real identity 
, password 
 through the smart device, and obtains biometric features 
 such as fingerprints and irises through the biometric scanner. Then 
 generates the biological key 
 and public auxiliary data 
 by probability generation function 
. Next, 
 computes 
 and finally sends 
 to NCC over the secure channel.

(2)
After receiving the message 
, NCC first generates a random number 
 and computes temporary identity 
, master public key 
, master private key 
, 
. Finally, NCC securely stores 
, and sends the message 
 to 
, where 
 and 
 are made public.

(3)
 receives the registration response from the NCC, and computes 
 to obtain the master private key 
, then computes 
, which is used for verification when 
 logs in to the device. Finally, 
 stores the parameters 
, 
.

4.3. Mutual authentication phase
(1)
 first enters the identity 
, password 
, and obtains biometric features 
, then extracts the biometric key 
 through the reproduction function  with the help of public auxiliary data 
, that is, 
. Next, 
 computes 
, 
 and checks if 
. If equal, 
 passes the device login check. Then 
 generates a random number 
, computes 
, 
, 
, where 
 is the timestamp used to prevent replay attacks. Finally, 
 sends message 
 to 
.

(2)
After receiving the message 
, 
 first checks the freshness through 
, where 
 is the current timestamp, then computes 
, and finally checks whether 
. If the check passes, it is determined that 
 is indeed a fresh message sent by 
 and has not been modified. Next, 
 generates a random number 
, computes 
, 
, 
, where 
 is the timestamp. Finally, 
 sends message 
, 
 to 
.

(3)
After 
 receives authentication request, it first needs to check the freshness of 
 through 
, 
, where 
 is the current timestamp, the maximum time delay threshold 
 is greater than . Then 
 computes 
, 
 and check if 
. If the verification fails, 
 is illegal and the authentication process is terminated, otherwise, 
 confirms the legal identity of 
 and 
, then generates a random number 
, computes 
, 
, 
, 
, 
, 
, where 
 is the timestamp, 
 is the session key between 
 and 
. Finally, 
 sends message 
 to 
.

(4)
 first checks the freshness of the received 
 by 
. Then 
 computes 
 
 
, 
, 
 and checks whether 
 holds. If validation is passed, 
 is indeed sent by 
 and has not been tampered with, then 
 continues to compute 
, 
, where 
 is timestamp. Finally, 
 sends message 
 to 
.

(5)
After 
 receives the authentication response message 
, it first checks the timestamp 
 similar to the previous steps and then computes 
, 
, 
, 
. Then 
 checks if 
 holds. If the equation holds, 
 and 
 mutually authenticate successfully, negotiate a session key 
 and confirm the security of the relay node 
, otherwise 
 or 
 is a malicious node, 
 terminates the authentication.

4.4. Handover phase
In SIN, satellites move periodically at high speeds in accordance with expected orbits. At the same time, ground equipment or aircraft also have random mobility. This will cause the quality of service to drop or be interrupted due to the increase in communication distance and the change of the communication angle. In order to ensure that users can obtain seamless subscription services, communication handover between communication nodes is involved, that is, switching from a node with poor service quality to a node that can provide better services. In the following, we analyze two possible handover scenarios and propose two feasible authentication schemes for them respectively. In the second scenario, we also propose a batch authentication scheme.

4.4.1. Satellite handover
As shown in Fig. 4, the satellite 
 moves to the far end at the speed  and the user’s distance from the 
 will gradually increase, which will cause the signal transmission to be interrupted. Before the signal is interrupted, the user needs to apply to 
 for the communication signal between the user and the ground station to be relayed by the next satellite 
 with better communication quality. Obviously in this scenario, only the relay satellite used for communication is switched, and the subject of communication such as the user and the ground station has not changed, so the user needs to verify the identity of the new relay satellite without renegotiating a new session key with the ground station. The handover process is described below.

(1)
First, 
 generates a random number 
, then computes temporary public key 
, 
, 
. Finally, 
 sends the handover request 
, 
 to 
, where 
 is the satellite to be accessed in the next stage, 
 is the timestamp. It is worth noting that messages are transmitted over the public channel.

(2)
After receiving the handover request, 
 immediately forwards 
 to 
.

(3)
When 
 receives 
, it first checks the freshness through 
, then computes 
 and verifies whether 
 is equal. If the verification succeeds, 
 confirms the legal identity of 
, otherwise the handover authentication is terminated. Next, 
 generates a random number 
, computes 
, 
, 
, where 
 is the timestamp. Finally, 
 sends the handover response 
 via 
 to 
.

(4)
After receiving the response message, 
 first checks the timestamp 
, then computes 
 and checks whether 
 is equal. If they are equal, 
 authenticates the legal identity of 
 and confirms that 
 allows 
 access. Finally, 
 notifies GS via 
 that all subscription service provided to 
 thereafter is relayed by 
.

4.4.2. Ground station handover
As shown in Fig. 5, when 
 is gradually away from the ground station 
 at the speed , but the user 
 and the higher availability 
 are still within the communication range of 
, 
 needs to send a request to 
 to hand over the communication to 
. At this time, because the ground station providing services to 
 is replaced, 
 needs to renegotiate a new session key with 
 to avoid the previous communication content between 
 and 
 being captured by 
. Considering that the communication environments of multiple users in this scenario are similar, and these users need to perform the similar communication handover at the same time as the communication environment changes, we design a scheme suitable for batch user handover. Assume that there are  users who need to send the handover request to 
, that is, 
. Furthermore, the communication between 
 and 
 is transmitted on the ground non-secure channel, and the detailed batch handover process is as follows.


Download : Download high-res image (161KB)
Download : Download full-size image
Fig. 5. Ground station handover .

(1)
In step 1, each user performs the same process, taking 
 as an example. 
 first generates a random number 
, then computes the temporary public key 
. Finally, 
 sends the message 
 forwarded by relay node 
 to 
, where 
 is the identity of 
, and 
 is encrypted by the shared key 
 of 
 and 
.

(2)
When 
 receives message 
, computes 
 to obtain the identity of destination node and temporary public key. Then 
 organizes the handover requests sent by multiple users, and generates a random number 
, computes 
, 
, 
 
, 
, 
  
, where 
, 
, 
 are temporary identities of users, 
 are temporary public keys of users, 
 is the timestamp. Finally, 
 sends the message 
, 
, 
 to 
 over the terrestrial link.

(3)
After receiving the message 
, 
 first checks the timestamp 
, then computes 
, 
, 
, , 
, 
 and checks whether 
 is valid. If the verification is passed, these users are all legitimate users, and 
 accepts the user’s handover request, otherwise it refuses. Next, 
 continues to generates a random number 
 and computes temporary public key 
, 
 
, 
, 
, 
, where 
 is the timestamp. Finally, 
 sends the message 
 to 
 and computes the shared key 
 with each user, where .

(4)
When 
 receives the message 
, it first checks the timestamp 
, then computes 
 
 and checks whether 
 is holds. If the verification succeeds, 
 authenticates the legal identity of 
 and knows that 
 allows users to access, then 
 sends the message 
 to 
, where .

(5)
After receiving the message 
, 
 first computes 
 with 
 to obtain the temporary public key of 
, and then computes the shared key 
 with 
.

After all the handover steps are performed, 
 will provide services to 
 instead of 
 via the relay satellite 
 using the newly negotiated session key 
.

4.5. Password change phase
At this stage, the user can change the password as needed without having to interact with the NCC or other nodes, thereby saving system communication overhead. The specific steps are described below.

(1)
 enters the correct identity 
, password 
 and scans for biometrics 
.

(2)
The smart device then computes 
, 
, 
, 
, and checks if 
, 
. If the verification passes, 
 has entered the correct identity, password and biometrics. Otherwise, password change will be terminated.

(3)
 enters a new password 
. Then the device computes 
, 
, 
, 
, 
. Finally, the device updates the system authentication parameter to 
. At this point, the user password change phase is complete and the password is changed to 
.

5. Security analysis
In this section, we rigorously analyze the security of the proposed access and handover authentication protocol through formal and informal analysis methods. First, we use the widely accepted random oracle model (ROM) (Xue et al., 2019, Bellare and Rogaway, 1993, Wazid et al., 2017) to prove that the session key negotiated during protocol implementation is secure. Then, the Automated Validation of Internet Security Protocols and Applications tool (AVISPA) is used to show that the protocol is resistant to eavesdropping attacks, replay attacks and man-in-the-middle attacks. Finally, informal analysis proves the security attributes of the protocol and its ability to resist other attacks.

5.1. Formal security analysis using ROM
According to our protocol, during the authentication process, the three entities involved are the user 
, LEO satellite 
 and ground control station 
, and the security mainly relies on the assumptions that ECDLP and ECDHP are difficult. In addition, in random model, adversary  is modeled as a Turing machine with probability polynomial time trying to break the protocol. Before ROM proof, the following definitions need to be made.

. We use the symbols 
, 
, 
 to denote , ,  instances of 
, 
, 
, respectively. Each instance as an oracle (Wazid et al., 2019).

 . When an instance 
 receives the last expected information according to the protocol, it will be considered as an accepted state. If we rearrange all received and sent messages by 
 in the current session in order, the session identification () of 
 represents the current session.

. We call instance 
 or 
 fresh, if adversary  cannot get the session key 
 negotiated by instance 
 and 
 (Wazid et al., 2019, Wazid et al., 2017, Kumari and Renuka, 2020).

. Two instances 
 and 
 can be called partners when the following conditions are met at the same time. (1) They are all in an accepted state. (2) Both are mutually authenticated and have the same . (3) 
 or 
 are partners mutually.

.  is a polynomial time adversary defined under Dolev–Yao model, which can get all the messages transmitted in the insecure channel and has the ability to modify, forge and replay the messages. In addition,  can access the query defined below in order to break the protocol when interacting with instance 
 (Guo et al., 2019).

•
:  can use this query to obtain all the information transmitted by the instances 
, 
 and 
 during the authentication phase. This query simulates an eavesdropping attack (Feng et al., 2018).

•
: Through this query,  sends a message  to 
, which can be obtained by eavesdropping or modification or forgery. Then, 
 honestly responds to  in accordance with our protocol.

•
: With this query,  can get the current session key 
 of 
 and its partner 
.

•
: 
 maintains a list of hash values 
, where 
 is the hash value of message 
. When  performs a hash query on message  to 
, if  already exists in the hash list,  is returned. Otherwise 
 is randomly selected and  is saved in the hash list.

•
:  can get the smart device that 
 lost, and extract the information stored in the device.

•
: This query is to evaluate whether the key  negotiated by 
 meets the semantic security under the random oracle model. First select an unbiased coin  before being evaluated, and flip it. If , 
 returns the correct session key  to . If , 
 selects a random string 
 of the same length as  and then returns  to , otherwise returns .

Semantic security of session key. In ROM, if  can breach the security of the protocol, he must be able to distinguish the correct session key from a random string. Furthermore,  can query  multiple times, and each time  query needs to generate a bit . In order to guess the true value of ,  needs to give 
 according to the available query oracle. If 
,  wins the game. We use  to denote the probability that  winning in the game . The advantage of  breaking the semantic security of our proposed protocol is defined as 
. When 
, the protocol  can be considered secure, where  is a negligible value.

Theorem 1

Suppose  is an adversary of probability polynomial time who wants to break through protocol  and obtain the session key . 
, 
, 
 represent the maximum number of queries for the  oracle,  oracle and hash oracle, respectively.  is the size of the user password set,  is the length of the biometric fuzzy extraction value ,  indicates the value range of  function, and 
 and 
 are the probability that  solves the ECDLP and ECDHP assumptions in polynomial time, respectively. The probability that  breaks the security of protocol  and obtains the key  can be defined as 
 
 
 
.

Proof

In order to calculate the probability of  successfully breaking the protocol, we evaluate it through a series of games 
, 
, 
, 
, 
, 
. 
 means the event that  wins in the 
. The proof process is similar to Ostad-Sharif et al. (2019) and Chaudhry et al. (2017).

 In 
,  launch the real attack in the random oracle model.  is randomly selected, then we get the following formula: (1)

 In this game,  query oracles mentioned above is executed to simulate the authentication process of real entities, and  oracle creates 
.  can get all messages 
 transmitted on the public channel. Since the session key 
,  cannot improve the probability of winning the game based on the captured message, so we can obtain: (2)

 This game is the same as the previous game except that  modifies and forges the messages obtained in 
 through  and  oracles. When the information constructed by  collides with the authentication message, the current session is terminated. At this time,  can obtain the secret value hidden in the transmission message or access the system as an illegal user. According to the birthday paradox, the maximum probability of collision in  query oracle is 
 
. In addition, 
 and 
 used when 
 and 
 negotiate the key are randomly selected in 
. The maximum probability of collision during random number selection is 
 
 (Ostad-Sharif et al., 2019). so we can obtain: (3)
 
 

 This game is different from the previous game in that  uses  query oracle to guess the user password 
 and biometric extraction value 
 by obtaining the parameters 
 stored in the smart card, where 
. Among them, the probability that  guesses the correct extraction value 
 is 
 
, and the probability that the correct password 
 is guessed is 
 
. In addition, since 
 and 
 are both protected by , only when two parameters are correct at the same time can the verification be passed. In order to reduce the probability of  winning in this game, the maximum number of 
 needs to be limited. so we can obtain: (5)
 

 This game is different from the previous game in that  tries to guess the session key 
 without using  query oracle. The session key negotiated between 
 and 
 is 
, where 
 and 
 can be obtained by eavesdropping.  needs to get 
 from 
 and 
, which can be reduced to solve ECDLP or ECDHP assumption in polynomial time. so we can obtain: (6)
 

Finally,  has no other advantages after using all the query oracles to distinguish 
 and . so we can obtain: (7)
 
From Eqs. (1), (2), (7), we get (8)
 
Then, based on the triangle inequality and Eqs. (3), (4), (5), (6), (8), we can prove that the stated theorem holds: (9)
 
 
 
 

5.2. Formal security analysis using AVISPA
In this subsection, we formally verify that our proposed protocol can resist eavesdropping attacks, replay attacks and man-in-the-middle attacks using the widely accepted push-button AVISPA tool (Das et al., 2016, Amin and Biswas, 2016). AVISPA is designed and proposed based on the Dolev–Yao model, and its protocol validation process is as follows (Challa et al., 2018a). Firstly, role-oriented High Level Protocols Specification Language (HLPSL) is applied to represent the specifications of all roles in the protocol. Then HLPSL2IF translator converts the role specification into an intermediate format (IF) that can be accepted by the verification back-end. Next, input IF into any one of the four back-ends. Finally, the output format (OF) is produced after the back-end verification to indicate whether the protocol is safe or not. Currently, there are four verification back-ends that exist in AVISPA: On-the-fly Model-Checker (OFMC), Constraint Logic based Attack Searcher (CL-AtSe), SAT-based Model-Checker (SATMC) and Tree Automata based on Automatic Approximations for the Analysis of Security Protocols (TA4SP).

We define four role specifications based on the entities that exist in the protocol. Fig. 6 shows the role specification of 
 in HLPSL. Similarly, the role specifications of 
, 
, and NCC in HLPSL are shown in Fig. 7, Fig. 8, respectively. In addition to the above role specifications, the session, environment, and goals are defined in HLPSL as shown in Fig. 10.


Download : Download high-res image (743KB)
Download : Download full-size image
Fig. 7. Role specification for 
 in HLPSL .

The detailed role specification of 
 as system initiator is described below. When 
 receives the start signal of the system, it transits from state 0 to 1 and sends the registration request 
 to NCC through the secure channel. 
 then changes from state 1 to 2 after receiving the registration response 
 from NCC. In the access authentication phase, 
 generates 
 and 
 through  function and sends the authentication request 
 to the GS through 
 with the help of  operation. After 
 and GS have processed the authentication request, 
 receives the authentication response 
 with the help of  operation. The  and  functions are the send and receive operations in the non-secure channel declared under the Dolev–Yao model, respectively. The declaration 
 means that 
 generates a fresh timestamp for 
 and the declaration , , 
 means that 
 accepts the fresh timestamp 
 generated by 
. Furthermore, the declaration 
 means that 
 is a secret value and can only be obtained by 
 and NCC. Similarly, we also perform role specification analysis for 
, GS and NCC in HLPSL as shown in Figs. 7, 8, and 9, respectively.


Download : Download high-res image (548KB)
Download : Download full-size image
Fig. 8. Role specification for 
 in HLPSL .


Download : Download high-res image (404KB)
Download : Download full-size image
Fig. 9. Role specification for NCC in HLPSL .

The public parameters available to adversaries in the session are defined in Fig. 10. Moreover, since the security analysis of the protocol is based on Dolev–Yao model, an adversary as a malicious node can launch an attack as any entity of the user, LEO satellite or GS, so there are three forms of attack in  besides the normal session. Finally, we use the widely-used OFMC and CL-AtSe back-ends to evaluate the security of our protocol, and the simulation results are shown in Fig. 11, Fig. 12, respectively. It is clear from the results that our protocol is safe in both verification back-ends and there are no attacks that can break the protocol, such as eavesdropping attacks, replay attacks, man-in-the-middle attacks.


Download : Download high-res image (538KB)
Download : Download full-size image
Fig. 10. Role specification for the session, environment and goal in HLPSL .

5.3. Informal security analysis
In this subsection, we analyze the proposed authentication scheme informally, and discuss whether the protocol has the security attributes of mutual authentication, user anonymity, session key negotiation and forward and backward security, and then prove that our scheme can also resist a variety of known attacks, including replay attack, man-in-the-middle attack, impersonation attack, device loss attack, privileged insider attack and denial of service attack. As shown in Table 2, we also compare the security attributes with other related protocols, and it is clear that our protocol is more secure. It is worth noting that the reason why we believe that most protocols do not resist man-in-the-middle attacks and impersonation attacks is that these protocols do not confirm the identity of relay satellite nodes.


Table 2. Comparison of security attributes.

Security attribute	Cruickshank (1996)	Hwang et al. (2003)	Zheng et al. (2012)	Zhang et al. (2015)	Qi and Chen (2018)	Xu et al. (2020)	Ostad-Sharif et al. (2019)	Yang et al. (2018)	Xue et al. (2019)	Our
Mutual Authentication	✓	✓	✓	✓	✓	✓	✓	✓	✓	✓
User anonymity	×	✓	✓	✓	✓	✓	✓	✓	✓	✓
Session key negotiation	✓	✓	✓	✓	✓	✓	✓	✓	✓	✓
Perfect forward and backward security	×	×	×	×	×	✓	✓	✓	✓	✓
Replay attack	×	✓	✓	✓	✓	✓	✓	✓	✓	✓
Man-in-the-middle attack	×	×	×	×	×	×	×	✓	✓	✓
Impersonation attack	×	×	×	×	×	×	×	✓	✓	✓
Device loss attack	×	×	×	×	×	×	✓	×	×	✓
Privileged insider attack	✓	✓	✓	×	×	✓	✓	✓	✓	✓
Denial of service attack	×	×	×	×	✓	✓	✓	×	✓	✓
✓ indicates that the protocol can meet the security attribute or can resist the attack.

× indicates that the protocol cannot meet the security attribute or is vulnerable to the attack.

5.3.1. Mutual authentication
In our scheme, mutual authentication between 
, 
 and 
 can be achieved. In the second step of the authentication phase, after receiving the message 
 from 
, 
 checks whether 
 is established. If it is established, 
 is considered unmodified and 
 is a legitimate user. Since only 
 who owns 
 can generate legal 
 to make the equation hold, unless the adversary can solve the ECDLP hypothesis in polynomial time, so 
 can verify the identity of 
. Similarly, in the third step, 
 authenticates the identity of 
 and 
 at the same time by checking whether 
 holds, where 
. Only by possessing 
 and 
 issued by NCC can the equation be established, and due to the computational difficulty of the ECDLP assumption, 
 and 
 cannot be forged by the adversary, so 
 can verify the identity of 
 and 
. In the fourth and fifth steps, 
 and 
 use the same method to confirm the legal identity of 
 by verifying whether 
 and 
 respectively, where 
, 
. Therefore, our protocol meets the security requirements of secure mutual authentication.

5.3.2. User anonymity
During the authentication phase, 
 uses 
 to indicate the identity, where 
 is issued by NCC. The real identity 
 is protected by random numbers 
 and the secure one-way hash function . Due to the one-way nature of the hash function, the adversary cannot obtain 
 from the temporary identity 
, so our protocol can meet the security requirements of user anonymity.

5.3.3. Session key negotiation
In the third and fifth steps of the authentication phase, after authenticating each other’s legal identity, 
 and 
 compute the session keys 
 and 
, respectively, where 
. In addition, the session keys of 
 and 
 are negotiated by both parties, rather than determined by a single entity. The adversary can only obtain the temporary public keys 
 and 
 of both parties by intercepting the communication message. Due to the difficulty of the ECDLP and ECDHP assumptions, the adversary cannot infer the session key 
 from 
 and 
 in polynomial time. Therefore, our protocol can meet the security requirements of session key negotiation.

5.3.4. Perfect forward and backward security
During the authentication process, 
 selects a random number 
 and generates the temporary public key 
. Similarly, 
 also selects a random number 
 and generates the temporary public key 
. 
 and 
 obtain 
 and 
 after receiving the messages 
 and 
 respectively, and then both can compute the session key 
. Because 
 and 
 are randomly generated in each session, the session key  negotiated after each authentication is different. Even if , 
 and 
 of this session are obtained by the adversary, it will not affect the security of the session key negotiated in the previous and future authentication. Therefore, our protocol can meet the security requirements of perfect forward and backward security.

5.3.5. Replay attack
In our scheme, each message contains a timestamp , which is hashed along with other parameters in the message. After the adversary intercepts the authentication message 
 through eavesdropping attack, any one of the messages selected to initiate the replay attack will be rejected. Take adversary to replay message 
 as an example. After 
 receives the message 
, first checks whether the timestamp 
 is out of the allowed range. If the check passes, the next step is to verify whether 
 is hold, where 
. Even if the adversary can directly modify the timestamp 
 in the message 
, due to the one-way nature of the hash function, the adversary cannot modify 
 to make the above equation hold, so the replay attack initiated by the adversary can be detected and rejected. Therefore, our protocol is resistant to replay attack.

5.3.6. Man-in-the-middle attack
If the adversary launches man-in-the-middle attack on 
 and 
, it needs to disguise as a legitimate 
 to send or return correct response to 
 and 
. When the adversary receives the user access authentication request and forwards it to 
, it needs to use the master private key 
 issued by NCC to 
 during the registration phase to construct the legitimate message 
, where 
. 
 will confirm whether 
 is sent by 
 by verifying 
. However, due to the difficulty of ECDLP assumption, the adversary cannot compute 
 from the master public key 
, that is, the adversary cannot construct the legitimate response message. Therefore, our protocol is resistant to man-in-the-middle attack.

5.3.7. Impersonation attack
An adversary should be able to impersonate the user or the ground station when launching the attack. When the adversary is disguised as 
, a random number 
 needs to be generated and computes , 
, 
 according to the scheme so that 
 holds. However, without 
, the adversary could not make  pass 
 verification. Similarly, when the adversary is disguised as 
, the adversary needs to generate legitimate 
 and 
 so that 
 and 
. Due to the difficulty of the ECDLP assumption, the adversary cannot obtain 
 that makes the above formula established with the help of public parameters 
, so the adversary cannot disguise as 
. Therefore, our protocol is resistant to impersonation attack.

5.3.8. Device loss attack
The user’s device is lost or stolen and acquired by the adversary. Because the device has the login verification process, it is not only necessary to enter the user identity 
 and password 
, but also to scan biometrics 
, which makes it impossible for an adversary to directly use the device to access the SIN. In addition, even if the adversary obtains the parameters 
 stored in the smart device through power analysis (Srinivas et al., 2017), but still cannot obtain the master private key 
 through 
 without knowing the password 
 and biometric key 
, the adversary will not be able to initiate an authentication request through the device as 
. Therefore, our protocol is resistant to device loss attack.

5.3.9. Privileged insider attack
Assume that during the registration process of the user with the NCC, the insider of the NCC initiated the privileged insider attack in an attempt to obtain the user’s password  and biometric key . However, the user did not directly submit  and  to NCC when registering, but . Due to the one-way nature of the hash function, the adversary cannot extract  and  from . Therefore, our protocol is resistant to privileged insider attack.

5.3.10. Denial of service attack
During the authentication process, only legal users who have registered with the NCC can enter the correct identity 
, password , and biometrics  to pass the device login verification, that is, verifying whether  is established, which reduces the computational and communication overhead in the SIN that a malicious user uses the device to send the false authentication request. Besides, for the authentication request directly forged by the adversary, the receiver can judge whether to accept or reject the message by performing at most three multiplication operations, three addition operations in elliptic curve, and two hash operations. Therefore, our protocol is resistant to denial of service attack.

6. Performance analysis
In this section, we compare the computational and communication overhead of our proposed protocol with two other recent classic related protocols, where (Xue et al., 2019, Yang et al., 2018) support both access and handover authentication.

6.1. Computational overhead comparison
The computation overhead of the protocol refers to the total computation time of all entities participating in the authentication from the beginning to the end of the authentication process, which does not include the time required for the user to log in. We use the following symbols to represent the computational time of the cryptographic operations involved in our protocol and the two protocols for comparison, that is, 
, 
, 
, 
, 
, 
, 
 denote the computational time required for an elliptic curve scalar multiplication operation, an elliptic curve point addition operation, a symmetric key encryption/decryption operation, a hash operation, a modular exponentiation operation, a pairing operation, a ECDSA signature/verification operation, then use the OpenSSL cryptographic library in C to simulate the authentication overhead of our protocol and the other two protocols on a machine with 64-bit Intel(R) Core(TM) i7-7820HQ CPU and 4.00-GB RAM. To ensure the accuracy and reliability of the experimental results, we repeated the experiment 100 times and finally took the average value as the final comparison result. Note that, in the experiment of Xue et al. (2019), the secure link between satellite and ground station is achieved through 128bit-DES encryption mechanism. The experimental statistical results are shown in Fig. 13 and Table 3, where the red line in the figure represents the average of 100 experimental results the protocol.


Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 13. Computational overhead of related protocols .

It can be seen from Fig. 13 and Table 3 that our protocol is more efficient than (Yang et al., 2018) and the computational overhead is correspondingly reduced by about 3.35 ms, but it is about 4.38 ms more than (Xue et al., 2019). Although the computational overhand of Xue et al. (2019) is lower than ours, the security of our protocol is higher than (Xue et al., 2019), and our protocol achieves the mutual authentication of three-party legal identities in the authentication process, while Xue et al. (2019) only achieves the mutual authentication between satellite nodes and users, and does not realize the user’s authentication of the legitimacy of the ground station.


Table 3. Comparison of computational overhead.

Scheme	Computational overhead	Execution time (ms)
Yang et al. (2018)	
19.87
Xue et al. (2019)	
12.14
Ours	
16.52
In Table 4, we describe the computation overhead for single user,  users without batch validation and  users with batch validation when the ground station handover in our protocol is completed, and then compare it with the batch handover scheme of Xue et al. (2019). Similarly, when analyzing the batch handover scheme, we considered that the computational overhead of all entities involved in the handover included the computing overhead of the ground station, satellites and users. The results show that when  users initiate the ground station handover request at the same time, our batch handover schemes can reduce the computational overhead considerably, and compared with the existing batch verification scheme (Xue et al., 2019), our scheme can save up to 57.14% of precious computing resources in SIN.


Table 4. Batch authentication overhead.

Scheme	Computational overhead
Single user	
 users without batch	
 users with batch	
 users with batch in Xue et al. (2019)	
6.2. Communication overhead comparison
To more clearly compare our protocol with these related protocols on communication overhead, we set the size of additive cyclic group in bilinear pairings, identity, timestamp, hash value, elliptic curve point, encrypted information, random number to 160 bits, 100 bits, 100 bits, 160 bits, 320 bits, 128 bits, 160 bits, respectively, while ensuring the security of the protocol (Wazid et al., 2019). When analyzing the communication overhead of Xue et al. (2019), we considered the communication overhead caused by the construction of a secure channel in the pre-negotiation phase between the satellite and the ground station.


Table 5. Communication overhead comparison.

User	Satellite node	NCC	Total
Yang et al. (2018)	720	880	880	2480
Xue et al. (2019)	1328	3040	1100	5468
Ours	880	2200	740	3820
The unit of communication overhead is bit.

The results in Table 5 show that the communication overheads of Yang et al. (2018), Xue et al. (2019) and ours are 2480 bits, 5468 bits, and 3820 bits, respectively. In terms of communication overhead, our scheme is 1340 bits larger than Yang et al. (2018) and 1648 bits smaller than (Xue et al., 2019), which means our scheme is superior to Xue et al. (2019) and not as good as Yang et al. (2018). However, in the scheme of Yang et al. (2018), the computational overhead in the authentication phase is larger than ours, and batch user handover authentication is not supported, which is not suitable for delay-sensitive users and applications. Moreover, there are security vulnerabilities in Yang et al. (2018), that is, it cannot resist denial of service attacks and device loss attacks. Therefore, by combining the results of computation overhead, communication overhead and security comparison, comprehensively speaking, our protocol is more suitable for SIN under the premise of ensuring high security.

7. Conclusion
In this paper, in order to solve the security issues of access and handover authentication in SIN, we propose a provably secure ECC-based access and handover authentication protocol. The protocol ensures the validity of satellite nodes while guaranteeing mutual authentication between users and ground stations, and proposes efficient schemes for two handover scenarios. One of the handover authentication schemes supports batch user handover verification, which can greatly reduce the system overhead during multi-user handover. In security analysis, we use two formal analysis methods, random oracle model and the widely accepted AVISPA simulation tool, as well as informal security analysis, to verify the security of our protocol. The security analysis results show that our protocol can meet the security requirements of mutual authentication, user anonymity, key negotiation, perfect forward and backward security, and can resist a series of known attacks. Finally, combined with computation overhead, communication overhead performance analysis and security comparison of related protocols, it is shown that our protocol is more suitable for SIN than other protocols under the premise of ensuring security.