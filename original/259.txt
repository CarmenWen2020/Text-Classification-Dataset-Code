Recently, the rapid growth of network resources and the cybersecurity issues become more and more rigorous due to the rapid progress of Internet of Things (IoTs). How to integrate the network resources and enhance the defense capabilities effectively is an urgent problem. In this paper, inspired by the spread of friendly worms in the network, we put forward a novel concept of worm computing which is a decentralized computing platform. The worm computing model is able to integrate the useful information for resource sharing and cooperative defense, which can achieve the resource utilization refreshing, computing capacity improvement and network security enhancement. We use a blockchain platform to build a fundamental decentralization system and store collaborative data by delivering a private chain, which solves the problem of data sharing and trust computing in the traditional collaboration model by providing decentralized and credible services to ensure the unchangeable modification of transactions. We conduct experiments on resource utilization and collaborative defense of malicious URLs and the results validate the effectiveness of the proposed worm computing model in improving resource utilization and network security.

Previous
Keywords
Worm computing

Blockchain

Resource sharing

Cooperative defense

1. Introduction
RECENTLY, the development of Internet of Things (IoTs) (Zhang et al., 2019; Ai et al., 2020; Xia et al., 2016; Lin et al., 2020; Chen et al., 2017) promotes the explosive growth of global data volume, and has brought enormous challenges to traditional data analysis and processing technologies. First, The limitation of current PC architectures cannot fulfill the demand of computing capacity. It is difficult for a user to obtain high-performance computing power at a low cost without hardware upgradation. Second, the various demands of network resources to different users lead to the imbalance of network resource distribution and the incomplete utilization of network resources. In order to meet the requirements of high-performance computing in the era of big data, cloud computing has begun to be applied as a way of resource sharing. However, all the resources of cloud computing are deployed in data centers, and there will be a certain network delay due to the long transmission distance when users send requests to data centers. Separate network data transmission not only takes up a large amount of network resources, resulting in high broadband costs, but also slows the response rate of user requests, leading to the decline of user experience.

The proliferation of network users and data not only create several challenges to traditional data processing technology, but also generate several serious cybersecurity problems. Many approaches have been proposed to cope the cybersecurity problems. However, the number of cybersecurity incidents have not been reduced. Firstly, the dynamic data management depends on the third-party central node in the traditional network defense structure. Once the data center is destroyed, the network defense structure will be valueless. Secondly, another major challenge of traditional network defense structure is data sharing and trust computing (Meng, 2018). The participants of cybersecurity defense need a reliable platform to share defense information in an untrusted environment, and this reliable platform could ensure the credibility of each defense node. In addition, the traditional network defense system lacks effective incentives to increase the enthusiasm of network participants, expand the network defense area, and improve the network defense capabilities.

The traditional network worm is a computer attack program or code with intelligence and automation. It can automatically scan and attack the node hosts with vulnerabilities in the computer network without human intervention. Also it can spread rapidly among the computer nodes in the network. However, different from the traditional network worm, benign worms (Kim and Kang, 2004), (Zheng et al., 2012) can actively defend against the network worms in the network by patching or transforming worms into benign worms. It can reduce the network threat by maximizing the extent of basic retaining in the intelligence and automation and rapid propagation characteristics for the traditional network worms, which can lead to a positive impact on the network security.

Benign worms can defend against malicious worms or repair computer node vulnerabilities through self replication and propagation. For example, if host A knows that host B has a certain vulnerability, and host B is vulnerable to defend against worm attacks, host A can automatically transfer benign worm defense code to host B to help it repair the vulnerability or cure the malicious worm infection by using the authorized interface. Therefore, benign worms have stronger autonomous ability and propagation ability compared with traditional network worms.

According to prior feature description, benign worms mainly possess the following characteristics:

(1)
Autonomic defense: benign worms can autonomously defend against malicious worms and can resist malicious virus infection.

(2)
Controllability: the behavior of benign worms is controllable and the benign worms cannot attack the host.

(3)
Traceability: the route of transmission of benign worms is traceable.

At present, there are all kinds of resources scattered in the network. But it is necessary to put forward an effective way to integrate these resource data. If we provide services by integrating the scattered computer resources or data resources in the network, it will have a positive impact on improving the utilization rate of resources in the network or enhancing the ability of network defense. Therefore, the goal of this paper is to bring beneficial influence to computer network by integrating all kinds of resource information. Moreover, the goal in this paper has some common characteristics with benign worms that are widely distributed and actively bring positive effects to the Internet.

Inspired by the positive influence of benign worms in computer networks, this paper proposes the concept of worm computing. We focus our attention on benign worms, which are widely distributed and controllable. Through the worm computing model, the wide distribution of worm nodes in the network can quickly integrate effective resources including computer resources and collaborative defense information to provide sharing. In addition, blockchain technology is introduced to build a distributed collaboration framework of the model in terms of ensuring the stability and traceability of worm computing model. And the application of blockchain also provides a solution to the problem of centralization and data sharing in the traditional defense network.

Blockchain (Nakamoto, 2008) was first proposed by Nakamoto in 2008 and attracted wide attentions due to the application of Bitcoin (Tomescu and Devadas, 2017), (Yuan and Wang, 2018). Nodes participating in a blockchain can communicate with each other in a peer-to-peer (P2P) verifiable manner without mutual trust and third-party intermediaries. That means nodes participating enables cybersecurity defense users to communicate and share various resource information on the manner of P2P. Furthermore, the consensus and tamper-proof of blockchain technology allow each participant in the blockchain network to view and validate the recorded data according to the rules in the smart contracts. Once the data is accepted, the records are added to the data blocks in the chronological order of their validation, and then making them difficult to be tampered with. Using the tamper-proof property of the blockchain, we can store our resource sharing information and security defense information by constructing a private chain, which can also provide a reference for the formulation of incentive mechanism and the selection of defense measures.

The main contributions of this paper are summarized as follows:

•
We propose the concepts of worm node and worm computing respectively. In worm computing model, efficient information in the Internet is quickly integrated by the worm nodes to provide the resource sharing and the collaborative defense services.

•
We further introduce the blockchain technology to construct a distributed architecture of worm computing model. By designing the smart contracts and delivering a private chain to define the collaboration ways among the users and ensure that the transaction datas can not be tampered with.

•
We construct the framework of worm computing model and analyze its implementation strategies, after which we conduct the experiments to validate the effectiveness of the proposed worm computing model.

The rest of this paper is organized as follows: In Section II, we introduce the research works related to the blockchain-based resource sharing and network security. Section III gives the definitions of worm node and worm computing as well as constructs the blockchain-based worm computing model. Section IV introduces the main implementation strategies of blockchain-based worm computing model. The experiments are conducted in Section V and Section VI concludes this paper and puts forward the future work.

2. Related work
In this section, we first discuss the blockchain-based resource sharing and blockchain-based network security techniques. Then we compare and analyze the differences between the worm computing model and the traditional model.

2.1. Blockchain-based resource sharing
The emerging of blockchain-based applications in the field of resource sharing is applied to solve the centralization problem compared with the traditional resource sharing systems such as cloud computing, and cloud applications–Golem, iExec, and SNOM (The Golem Project Crowdfunding Whitepaper, 2016; iExec Blockchain-Based Decentralized Cloud Computing v3.0, 2018; SONM Supercomputer Organized by Network Mining, 2017). All these three architectures have their own coin and they share resources through task allocation (Uriarte and Nicola, 2018).

Recently, Docker has been proved to be able to achieve a more lightweight mechanism of virtual machines. Adam (Brinckman, 2017) discussed the possibility of sharing applications through shared containers in blockchains. He proposed a hybrid system, which records the hash values of data on block chains and stores the containers in auxiliary systems by using hash values as search methods, so as to achieve the purpose of sharing applications safely between users or groups.

2.2. Blockchain-based network security
Blockchain technology allows peers to communicate with each other in a verifiable way as well as maintain anonymity and data integrity without mutual trust or third-party intermediary. Blockchains have also been applied to various fields as a collaboration tool. In the field of Internet of Things, the distributed trust framework among devices in the IoT was constructed by blockchain technology, and a decentralized cross-platform collaboration mode was formed, therefore the trust problem in the process of equipment collaboration in the IoT was solved (Tang et al., 2019; Pietro et al., 2018; Xu and Viriyasitavat W, 2019).

Blockchain technology was also used to energy trading for ensuring the privacy and security of the transaction process (Aitzhan and Svetinovic, 2018; Li and Kang, 2018; Gai et al., 2019). In the field of microgrid, blockchain was used to regulate voltage and power losses in energy trading (Silvestre et al., 2019), (Silvestre et al., 2018). In combination with traditional e-commerce and other shared economies, Li (Li and Wang, 2018) introduced an e-commerce platform named PZKBP, which used blockchain technology to ensure the fairness of all parties’ transactions and protect the privacy of transaction data from the public perspective.

In Zhu et al. (2019), a distributed database SEBDB was constructed by using the functions of existing databases and blockchain technology. Zyskind (Zyskind and Nathan, 2015) implemented a data management system based on blockchain, which interacts data query, storage and sharing with blockchain as transactions, and achieve automatic access control management without the participation of third parties. Blockchain technology was also combined with cloud computing to achieve a credible and efficient cloud data management system (Liang and Shetty, 2017), (Tosh et al., 2017). Esposito used blockchain technology to process and store medical data for data sharing and collaboration (Esposito and Santis, 2018). In addition, blockchain was often used for privacy protection (Li et al., 2018), (Wan et al., 2019).

For intrusion detection, Hu (Hu et al., 2019) constructed a distributed collaborative intrusion detection method in smart grid MMG system by using the consensus mechanism of blockchain. Rodrigues (2017) proposed a novel architecture by combining blockchain and DDoS defense, which deploy existing public and distributed infrastructure on the blockchain to promote Whitelisted or blacklisted IP addresses. Gruhler (Gruhler et al., 2019) introduced a reputation-based collaboration scheme based on blockchain system called BLOSS, which promoted cooperation between service providers and consumers by providing necessary reputation incentives, thus improved the preventive ability of DDoS and reducing malicious behavior. Rodrigues (Rodrigues and Eisenring, 2019) conducted a global performance evaluation and proved the effectiveness of the proposed BLOSS (Gruhler et al., 2019) scheme by deploying eight examples in different geographical locations. In Id (2018), a collaborative anomaly monitoring framework was constructed from noisy sensor data in industrial Internet combined with blockchains. Blockchain technology was also applicated in power system, such as building a distributed cooperative defense framework by blockchain, enhancing the self-defense ability and stability of power system (Liang et al., 2019) through blockchain, and etc. L (Fengi et al., 2018) built a blockchain-based distributed data storage system. Then, the traditional wireless sensor's anti-attack capability was enhanced, and the sensor data was avoided from being tampered with and stolen.

The differences between worm computing model and traditional model are shown in Table 1. Compared with the proposed framework, the resource sharing methods mentioned in the foregoing mostly adopt the working style of cloud computing. They achieved the goal of sharing resources as well as improving computing power through task distribution and integration. However, the worm computing model directly contributes resources by means of p2p. It is more directly and more autonomous in improving resource utilization. In terms of malicious defense, the worm computing framework emphasizes group intelligence and pays more attention to the participation of Internet people. The enthusiasm of the participants can be mobilized in a more concise manner to increase the defense ability.


Table 1. Comparison between worm computing model and traditional model.

Type	Work form	Supplier	Scope of application	Variety and autonomy
Traditional model	Task allocation	Large operators	Relatively small	Relatively small
Worm computing model	Independent application through P2P	General Internet public	Relatively large	Relatively large
3. Worm-computing model based on blockchain
In this section, we first introduce the blockchain-based worm computing model and its application scenario. After that the worm node and worm computing related concepts are introduced. In the worm computing model, worm nodes can be regarded as either a sharer of effective information or a user of effective information. With the help of blockchain technology, all nodes work in an orderly and active manner to achieve the purpose of improving resource utilization and enhancing network security.

3.1. Application scenario
The application scenario is shown in Fig. 1. User A and user B are two participants in the worm computing model. Both of them are facing two problems: negatively efficient utilization of resources and increasingly serious threat to network security.

Fig. 1
Download : Download high-res image (416KB)
Download : Download full-size image
Fig. 1. Application scenario of blockchain-based worm computing module.

The participants in the worm computing model first need to create the smart contracts from the shared resources and the security defense information. Then, participants can record the resource's information since they want to share on the blockchain through smart contracts. In addition, once a participant detects malicious threats, it can also store the information of malicious threats via the smart contract.

When the participants want to use shared resources, they can establish connections with shared resources through the recorded information in blockchain, then forming a distributed resource sharing system. Otherwise, participants can update their defense information list through the integrated security defense information in the blockchain and achieve the goal of cooperative defense.

3.2. The definition of worm computing
Benign worms can be widely spread in the network through self replication. Its strong autonomy and rapid spread coincide with the requirements of this model for the general public to actively contribute effective resources in the network. In addition, the characteristics of self-defense, traceability and controllability for benign worms also bring inspiration to the study of key strategies of this model.

Considering the concept of benign worms and the application scenarios of this paper, we propose the definitions for worm computing as follows:

Definition 1

Worm node: A computer node or network user can bring positive effects to Internet by collecting valid information. Its characteristics emphasize initiative, distributed and usefulness.

Definition 2

Worm Computing: A decentralized computer model in which worm nodes can complete the active contribution to network by ways of resource sharing and cooperative defense, improving the resource utilization as well as enhancing the network security.

3.3. Blockchain-based worm computing model
The proposed architecture of a blockchain-based worm computing model is shown in Fig. 2. The underlying architecture of worm computing model is blockchain private chain, which contains multiple worm nodes that can conduct peer-to-peer communication based on private chain. Worm computing model includes two functional modules: resource sharing and cooperative defense. Each worm node can participate in the work of these two modules, and jointly maintain the same blockchain data book. The architecture is built on the following principles:

(1)
Helpfulness: Each worm node should try its best to deliver effective information without negative impact on the network.

(2)
Controllability: The behavior of each worm node should be controllable.

(3)
Traceability: The working process and data of each node are traceable.

Fig. 2
Download : Download high-res image (386KB)
Download : Download full-size image
Fig. 2. Blockchain-based worm computing model.

According to the above principles, we design each module of worm computing model in detail. For the resource sharing module, worm nodes can share resources as resource sharers and get certain rewards. Each node can also satisfy its own computing requirements as a user of shared resources. In the security defense module, the security defense information, which is detected by each node, is integrated by blockchain technology that can provide basic data information for nodes to formulate defense strategies, and solve the problems of data sharing and trust calculation in the traditional framework. It integrates the group wisdom of the unknown public in the Internet to form a collaborative defense system and improve network security. In addition, there is also a consensus layer based on the private chain of blockchain. Here, all worm nodes can participate in the consensus and upload all the working data to the blockchain in the worm computing model through smart contracts to ensure the integrity and unforgeability of the data. The working architecture of resource sharing module and security defense module is as follows:

3.3.1. Blockchain-based resource sharing module
The RSbc module is divided into three functional parts, they are resource sharing part, rewarding part and data recording part respectively, as shown in Fig. 3. The Rsharer is the resource sharer, which is the initiator of the RSbc module. Ruser is the user of the shared resources. RPprofit represents the reward for sharing resources that paid by Ruser to Rsharer. The RErecord means the resource usage information and the transaction information that will be recorded in the data blocks. The RDdata expresses the shared data resources. And similar to the RDdata, the RTsw and the RHhw are representing the shared software resources and the shared hardware resources respectively. The shared resources RAasset can be viewed as an asset:

Fig. 3
Download : Download high-res image (263KB)
Download : Download full-size image
Fig. 3. Blockchain-based resource-sharing module.

3.3.2. Blockchain-based security defiense module
The SDbc module is mainly composed of three parts as shown in Fig. 4, they are malicious URL collection part, malicious URL list updating part and malicious URL defense part respectively. The Dsharer is the cybersecurity defense information sharer. The Duser is the user of the security defense information, both the Dsharer and the Duser can also be treated as the worm nodes. The DPprofit is the security defense benefit, that is, the aggregation of defense information integrated by worm computing model acquired by each participant, so as to reap the security benefits via pre-warn and collaborative defense. And the DAasset is the identified cybersecurity defense information that the Dsharer wants to share, it can also be regarded as an asset. The DAasset can be formalized as:
where the DVvirus is the virus softwares, the DTtrojans represents the trojans and the DMmw indicates the malicious websites.

Fig. 4
Download : Download high-res image (239KB)
Download : Download full-size image
Fig. 4. Blockchain-based security-defense module.

3.3.3. Blockchain-based trust update module
The underlying architecture of the worm computing network is built based on a blockchain system. Unlike traditional social networks, data communication between nodes is conducted with a peer-to-peer manner, which does not involve the trust transfer between nodes. However, in the working process of worm computing model, each user has two identities: sharer and user. In order to prevent the malicious behavior of the worm node in the work process, the effective information sharers are prevented from sharing malicious resources or stealing user data of effective resources users. On the other hand, the valid information users are prevented from maliciously evaluating the effective resources shared by the sharers. The worm computing model introduces a bidirectional trust level updating mechanism to control the behavior of the worm node for the two identities of the valid information sharer and user. The trust update module based on blockchain is also composed of three parts as shown in Fig. 5, i.e., quality assessment, error calculation and trust calculation. The quality assessment is used to reflect the quality of shared resources, which determines the trust of sharers. The error calculation reflects the accuracy of the evaluation results, which will directly affect the trust of users. And the trust calculation is mainly used to calculate the updated trust between the two sides of effective resource sharing.

Fig. 5
Download : Download high-res image (256KB)
Download : Download full-size image
Fig. 5. Blockchain-based trust-update module.

3.4. Proposed model workflow
Fig. 6 shows the workflow of our proposed model, which includes the following steps:

Step 1: Building worm computing network based on blockchain and deploying smart contract.

Step 2: In RSbc moudle, its working process mainly includes the following parts:

(1)
The Rsharer uploads the information and usage of shared resources to the blockchain by calling the smart contract.

(2)
The Ruser can find the corresponding resources from the blockchain through smart contracts and establish connections with them according to the usage mode.

(3)
At the end of sharing, the Ruser evaluates the resource and completes the payment by pre-defined incentive mechanism.

(4)
The model updates the trust value according to the behavior of both sides of the resource sharing, and uploads the resource sharing data and transaction data of both sides to the data block through the smart contract.

Step 3: In this step, the working process of SDbc mainly includes the following parts:

(1)
The node uploads the known security defense information to the blockchain through the smart contract, and then the blockchain integrates the defense information submitted by the node.

(2)
The participating nodes can obtain the defense information aggregation and formulate the security defense strategy by interacting with the smart contract.

(3)
The participating nodes evaluate the obtained defense information and upload the results to the blockchain, and then the model updates the trust value according to the node behavior.

Fig. 6
Download : Download high-res image (636KB)
Download : Download full-size image
Fig. 6. Blockchain-based worm computing model workflow.

This paper uses blockchain technology to build the underlying architecture of the model, thus each blockchain node can work as a worm node. Each worm node can choose whether to participate in the work of worm computing model or only perform mining confirmation for worm computing model. Therefore, in worm computing model, blockchain nodes have very good scalability. In addition, worm computing model for the widespread Internet public, can integrate all kinds of effective information by defining the corresponding smart contract, so the whole model has high scalability. In this section, we analyze the workflow of the proposed model, which mainly includes four parts: effective resource information upload, effective information retrieval and use, resource evaluation and trust update. We integrate the effective information through blockchain, thus in the whole working process of worm computing model, the time and space consumption of blockchain nodes mainly come from the effective information retrieval. Therefore, combined with the storage structure of the blockchain, the time and space complexity of the blockchain nodes is O(m∗n) and M(m∗n) respectively.

4. Implementation strategies of worm computing model
In this section we will introduce the four key strategies of worm computing model. Among them, resource sharing strategy is proposed to solve the problem of resource sharing in resource sharing module. The trust update strategy is proposed to dynamically regulate the behavior of worm computing participants. The authority allocation strategy is used to limit the usage scope of resource users and enhance the security of the sharers. And the incentive strategy is used to motivate resource sharers.

4.1. Docker-based resource-sharing strategy
The Docker is a lightweight linux container that can be deployed continuously. The Docker containers can be used for packaging the applications into the images by LXC-based technology and provide portable and isolated applications (Merkel, 2014). As we known, the Docker containers produce the same or better performance than the VMs (Felter and Ferreira, 2015). Because the Docker containers use a lighter quantitative virtualization mechanisms.

The Docker container can be applied to the worm computing model as a lightweight application sharing mechanism to solve the resource sharing problems. But the Docker container is more about running the interfaceless applications than traditional virtualization mechanisms, and the Linux system itself is also an operating system without a graphical interface. Therefore if you want to run the desktop GUI applications through Docker, you need to work with the X11 protocol as shown in Fig. 7.

Fig. 7
Download : Download high-res image (258KB)
Download : Download full-size image
Fig. 7. Docker-based resource sharing schematic.

In this section, the process of using Firefox browser is introduced. The graphical interface of Linux operating system can be regarded as an application under Linux environment, and the graphical interface under Linux environment is based on X protocol. The X protocol consists of two parts: the Xserver part and the Xclient part. The role of the Xserver is to manage the hardware configurations that related to the graphical display on the computer. The Xserver is in charge of drawing and displaying the screen pictures as well as informing the Xclient of the input actions. Xclient is responsible for running the program logic corresponding to the input action.

As shown in Fig. 7, when the Ruser wants to use Firefox browser, the Ruser firstly needs to select the resource he wants to use, and then the Xserver informs the Xclient to select the resource by the action of the mouse. The Xclient obtains the corresponding of Firefox image, and meanwhile the Xclient will transfer the running result of Firefox image to the Xserver. Finally, the Xserver displays the running interface of Firefox browser on the screen. The X protocol has a essential application scenario, that is, the Xserver and the Xclient can run on different hosts. Therefore, with the use of SSH protocol, the Rsharer can provide resources for the Ruser in the way of docker images.

When the resource is shared, the participant of the SR module can provide shared resources by packing the resources into corresponding resource images. After the Ruser and the Rsharer establish a link through the SSH protocol, the Ruser can run the shared resource through the corresponding resource image. The Docker containers use less memory and have less response time than virtualization methods such as the VMs. Moreover, it can run multiple Docker images on the same server timely, which can support the multi-to-many access requirements of shared resources in our worm computing model and provide lightweight resource sharing methods.

4.2. Bidirectional Trust Level Updating Mechanism Based on Quality Assessment and Error Calculation
Worm computing model will give each added node an initial trust value, in terms of percentage. The model adjusts the trust degree according to the normalized behavior of nodes. The value of the trust degree of nodes represents the normalization degree of the behavior of worm nodes. Here, the trust update process of the resource sharing module is used to explain how the trust update mechanism works.

For the resource sharer, the trust level update mechanism is as follows: First, each participant take part in the worm computing model has an initial trust degree, and then the Rsharer provides the shared resources. After the Rusers using up the resources, they evaluate the resources according to their personal use (assuming that all the ratings of the Ruser is conform to the criteria). According to the evaluation results of resources, the trust level of the Rsharer will be adjusted. If the evaluation results are good, then the trust level will be increased. If the evaluation results is poor, the trust level will be reduced. Once a malicious resource is found, the trust level of the malicious resource sharer will be reduced to zero. When the Ruser searches the shared resources, the resource's evaluation result and the Rsharer's trust degree are simultaneously displayed in the shared resource lists in order to improve the quality of shared resources. For the security defense module, the trust update process of the defense information sharer is roughly the same as that of the resource sharing module. However, in the security defense module, the evaluation behavior of defense information users aims at the threat degree of malicious events. The higher the evaluation score is, the greater the threat of the shared malicious events to the computer will be, and the more attention should be paid. When users query the current collaborative defense information collection, malicious events and their evaluation results will be displayed together. We will set the corresponding threshold for the evaluation node, and determine whether the integrated security defense information in the worm computing model is adopted according to the threshold, so as to provide the basis for the node to formulate defense strategy.

The dynamic growth of Rsharer i's trust level is given as:(1)
where the STi represents the trust value of the Rsharer i. STi is a variable greater than or equal to 0 and less than or equal to 100, and the value of it is the smaller of 
 and (SOTi + SITi). 
 means the upper limit of the STi, and we set the value of 
 to 100. SOTi indicates the original trust value of Rsharer i before Ruser assessment. SITi is the increment of Rsharer i's trust level, it can be calculated as follows:(2) 
 		
 

where the St−i expresses the Rusert's assessment rating of Rshareri's shared resource i. The St−i is also a variable greater than or equal to 0 and less than or equal to 100. When a computer user registers as a participant of worm computing model, it will initialize a trust value of 50. In the subsequent process of resource sharing, the Rshareri's trust degree is worth updating dynamically according to the value of St−i. Here, If the value of St−i equals 50, we believe that the resource i provided by the Rshareri can barely complete the Rusert's needs, and the Rsharer i's trust value will remain unchanged. If the value of St−i is more than 50, it is considered that the Ruser t's experience is pretty, and the trust level of Rsharer i will be increased. If the value of St−i is less than 50, the provided resource i is considered to have poor quality, and the Rsharer i's trust degree will be reduced to a certain extent. If the value of St−i is lower than 20, the Rsharer i is considered to have the behavior of providing malicious resources, and the Rsharer i's trust degree will be directly to zero.

For the resource users, the trust level update mechanism is as follows: Firstly, the comprehensive evaluation result of the shared resource is calculated. When the Ruser scores the shared resource, the assessment result compare with the obtained comprehensive evaluation result. If the deviation between the score result and the comprehensive evaluation result is major, it is considered that the Ruser has malicious behavior to evaluate the shared resources and the Ruser's trust level will be decreased. If the deviation between the score result and the comprehensive evaluation result is the primary factor, the Ruser's trust will be increased. For the security defense module, the same is true for the trust update process of collaborative information users.

The comprehensive assessment of shared resource i was shown as:(3)
 
the ASi represents a comprehensive assessment of shared resource i. The UTt is the trust level of the Ruser t. The value of the UTt is also greater than or equal to 0 and less than or equal to 100.

The dynamic growth of the Ruser t's trust level was shown as:(4)
where the UOTt indicates the original trust degree of the Ruser t before using up the resource. The value of UTt is the smaller of 
 and (UOTt + UITt). 
 means the upper limit of the UTt, and we set the value of 
 to 100. UITt is the increment of the Ruser t's trust level, it can be calculated as follows:(5) 
 		
 where the E means the deviation between the score of Ruser t's evaluation and the score of comprehensive evaluation. The E is also a variable whose value is greater than or equal to 0 and less than or equal to 100, it can be shown as:(6)
if the value of E is minor, the Ruser t's rating is considered to be standardized, and the Ruser t's trust level will be increased. If the value of E is major, the Ruser t is considered to be maliciously assessment, and the Ruser t's trust level will be decreased.

The calculation process of trust update mechanism is shown in Algorithm 1 (taking resource sharing module as an example):


Algorithm 1. Bidirectional Trust Level Updating Mechanism Based on Quality Assessment and Error Calculation.

Input: The trust value of the sharer, ST; The shared resource, R; The comprehensive evaluation results of shared resources, ASR; The evaluation results of Ruser, X; The evaluation weight of shared resources, WR; The trust value of the user, UT;
Output: Updated ST, UT, ASR and WR;
1: Calculate the trust increment SIT of Rsharer according to Eq. (2);
2: Updating the trust value ST of Rsharer according to Eq. (1);
3: Calculate the comprehensive evaluation result ASR of shared resource R according to Eq. (3);
4: Calculate the error E between the evaluation result X and the comprehensive evaluation result ASR according to Eq. (6);
5: Calculate the trust increment UIT of Ruser according to Eq. (5);
6: Updating the trust value UT of Ruser according to Eq. (4);
7: Return ST, UT, ASR and WR;
4.3. Multi-role authority allocation strategy based on linux system
In the resource sharing module, in order to prevent the Ruser's malicious behavior in the process of using shared resources, it is necessary to adopt a certain security mechanism to protect the security and stability of the Rsharer. Here, the multi-role authority allocation strategy of the Linux system itself is adopted.

Linux is a multi-user operating system, which allocates a private space on the machine for each Linux user to store files and receive private messages. When the Rsharer provides the shared resource, the system automatically creates a new Linux user LUser 1, and the new user LUser 1 is only restricted to access shared resources with the rights allocation mechanism. When the Ruser wants to use the resources, it will establish a connection with LUser 1, then to acquire the permission to use the shared resources. The Linux system's permission allocation mechanism isolates the Rsharer's shared resources from the rest of resources, ensuring the Rsharer's robustness in the resource sharing process.

4.4. Blockchain-based incentive strategy
In the resource sharing module, the Rsharer can obtain certain revenue by sharing the computing resources. The model uses the blockchain technology based on Ethereum client to perform the transactions between the Rsharer and the Ruser. The transaction process is as follows: the model starts timing when the Rsharer and the Ruser establish a connection, and the timing will be ended when the connection is disconnected. The model will convert the use of the resource into the amount of Ethereum to be paid through a preset incentive mechanism, the incentive mechanism used in this model is shown as:(7) 
 

The 
 means the total Ethernet coin that needs to be delivered to the Rsharer i by the Ruser t on behalf of the Ruser t use up the resource. The EROi, ERHi, ERMi and ERTi represent the rewards gains from the word length, main frequency, memory and resource usage time contributed by the Rsharer i's computer respectively. The STi means the trust value of Rsharer i.

Different allocation of the shared resources will bring different user experience. In order to more fairly calculate the payment situation of the Ruser, comprehensive consideration method of computer's configuration and resource usage time is adopted. The main frequency, word length, memory and resource usage time are calculated separately. After the resource disconnected, the function of sending the transfer transaction and the function of recording the usage data are executed. Finally, the transaction results will be recorded into the blockchain node through PoW mechanism.

5. Experimental analysis
According to the key strategies described above, we design and implement a worm computing system based on blockchain technology, and then we evaluate the proposed worm computing system through Linux system. One of the goals of worm computing model is to improve resource utilization. We choose the usage of CPU and memory as the evaluation metrics in the process of resource sharing to reflect the resource utilization. We measure the increase of CPU and memory usage in different cases to illustrate the effectiveness of worm computing model in improving resource utilization. In the worm computing model, we regulate the behavior of the node by dynamically adjusting the trust degree of the node, so as to avoid the malicious behavior of the node. We apply the influence of node behavior on trust as an experimental plan. By measuring the impact of node behavior on trust and combining the influence of trust degree on resource utilization in the previous experiment, we show the effectiveness of trust mechanism in regulating user behavior. Another goal of worm computing model is to enhance the ability of network security defense. We choose malicious web page detection as the experimental scenario, and illustrate the effectiveness of collaborative defense by measuring the access rate of malicious web pages under different nodes’ cooperation in the model. In addition, we demonstrate the effectiveness of the trust mechanism in the experiments of malicious website accessing rate under different trust threshold conditions, in order to illustrate the enthusiasm of trust mechanism in reducing defense errors.

In the resource sharing module, we mainly collect experimental data through four kinds of softwares: Eclipse, Firefox, Spotify and Liberoffice. We setup 16 participants, five of whom are both sharing resource with Rsharers and Rusers. Table 2 shows the computer configuration of these five participants, and the remaining 11 are the resource users. In security defense module, the number of participants is 5, and Table 3 shows the computer configuration of the five participants. We do experiments on resource sharing and security defense, and analyze the performance of our model.


Table 2. Participant's computer configuration in resource-sharing module.

Participant	CPU	Memory	Operating System	Way of Working
Participant 1	i3	4G	64-bit	Rsharer/Ruser
Participant 2	i3	4G	32-bit	Rsharer/Ruser
Participant 3	i7	16G	64-bit	Rsharer/Ruser
Participant 4	i5	8G	64-bit	Rsharer/Ruser
Participant 5	i7	4G	64-bit	Rsharer/Ruser

Table 3. Participant's computer configuration in security-defense module.

Participant	CPU	Memory	Operating System	Way of Working
Participant 1	i3	4G	64-bit	Dsharer/Duser
Participant 2	i3	4G	32-bit	Dsharer/Duser
Participant 3	i7	16G	64-bit	Dsharer/Duser
Participant 4	i5	8G	64-bit	Dsharer/Duser
Participant 5	i7	4G	64-bit	Dsharer/Duser
5.1. Resource utilization testing
The main purpose of the resource sharing module in worm computing is to improve the utilization of participant's computer resources. The usage of shared resources are unique in terms of the participant's computer configurations are different. Therefore, for different computer configurations and participants, a comparative experiment is conducted in two aspects: CPU utilization increase rate and memory utilization increase rate.

5.1.1. Test of CPU usage increase rate for different participants
Fig. 8 shows the increasing rate of CPU usage between different users. As we known from Table 2, User 1 and User 2 use the same computer configuration except for the architect of system. Thus, when the same shared resource is provided, User 2 has a higher CPU growth rate than User 1 as shown in Fig. 8(a). As shown in Fig. 8(b), user 1 and User 3 apply the same configurations besides the CPU kernel. With the same shared resource, the CPU usage of user 3 increases relatively less due to the better CPU performance. In Fig. 8, we can discover that the change of CPU usage for the Eclipse and the Firefox increase the rate more obvious and bring more CPU consumption compared with the Spotify and the Liberoffice.

Fig. 8
Download : Download high-res image (528KB)
Download : Download full-size image
Fig. 8. Resource usage increase rate of different participants.

5.1.2. Test of memory usage increase rate for different participants
Table 2 shows that User 3 has four times as much memory size as User 1 and User 2. In Fig. 9, for the same shared resource, the memory usage increase rates of User 1 and User 2 are similar and both of them are higher than that of User 3. A smaller memory size will cause a more obvious changes in memory usage increase rate. And we can also find that the memory changes caused by the Eclipse and the Firefox are more evident than the other two shared resources.

Fig. 9
Download : Download high-res image (380KB)
Download : Download full-size image
Fig. 9. Memory usage increase rate of different participants.

5.1.3. Test of resource usage increase rate caused by different sharing methods
As shown in Fig. 10, for the same shared resource, whether its cpu or memory, the change of utilization increase rate is relatively insignificant by using docker as a way to provide shared resources. Additionally, the changes caused by the Eclipse and the Firefox are more obvious than others in these two resource sharing modes, which is completely same in the previous experiment results.

Fig. 10
Download : Download high-res image (871KB)
Download : Download full-size image
Fig. 10. Resource usage increase rate caused by different resource sharing methods.

In summary, in the case of providing a shared resource, sharing the same resources, and seting a good operating system configuration lead to a significant increase in the CPU utilization, which means a faster processing speed. And a computer with a better CPU kernel and a larger memory will have a less obvious increment in the CPU and memory utilization, therefore it can provide more resources. Using Docker container as a resource providing mode can share resources more convenient because it consumes less computer running resources. It can also provide the same resource for multiple people to use at the same time, which meets the multi-to-many working mode of worm computing model. In addition, when docker is used for a resource providing method, it can provide resources that the computer does not have, which can better meet the needs of the diversity of worm computing model.

5.2. Interaction between trust level and resource utilization
In the resource sharing module, a bidirectional trust level updating mechanism is introduced to regulate the participant's behavior in worm computing modle. In this section, the experiments are conducted on two parts: the mutual influence between the trust level and the resource utilization and the influence of user's behavior on trust.

5.2.1. Test of the interaction between trust level and resource utilization for the same resource sharer
Fig. 11 shows the different resource utilization of User 3 and its trust level changes, assuming that all the resources provided are in good quality. We can find in Fig. 11(a), the change trend of these four kinds of resources is basically the same. The changes caused by Eclipse and Firefox are more sharper than other two kinds of resources. Limited by the number of participants in the experiment, the trend of these four resources in the late stage has gradually slowed down. For the resources provided by the same sharer, the users are more willing to use the high-energy resources like the Eclipse and the Firefox as shown in the previous experiments, and improve themselves processing efficiency while improving the resource sharer's resource utilization.

Fig. 11
Download : Download high-res image (483KB)
Download : Download full-size image
Fig. 11. The resource usage and the trust level changement of the same resource sharer.

Fig. 11(b) displays the change of trust degree caused by different resources provided by User 3, its initial trust level is 74. The change of trust level caused by the Eclipse is the most obvious and it is the first one to reach the upper limit. The Liberoffice and The Spotify have lower resource utilization, and their resource utilization is roughly the same as shown in Fig. 11(a). Thus the trend of trust level's changement between them is similar. Apparently, the Liberoffice and the Spotify reach the upper limit more slowly than the other two resources. Therefore, for the resources provided by User 3 (assuming that all the resources provided are in good quality), the resource utilization is proportional to trust level. Fig. 11 also declares if you want to increase your trust level quickly, you can share more energy-intensive resources.

5.2.2. Test of the interaction between trust level and resource utilization for different resource sharer
Fig. 12 shows the changes of resource usage and trust level when User 1, User 2 and User 3 provide the same shared resource Firefox. Their initial trust levels were 68, 62 and 74 respectively. As can be seen from Fig. 12(a), the resource utilization of these three participants showed an upward trend, but the User 3 whose trust value was 74 changed most obviously. Due to the trust level of other two participants are both bellow 70, there is a certain crossover in the usage of resources. But, in general, the resource utilization of User 1 is higher than User 2 because User 1 has a higher trust level.

Fig. 12
Download : Download high-res image (477KB)
Download : Download full-size image
Fig. 12. The use of same resources shared by different sharers and the changes of trust level.

Fig. 12(b) shows the changes in trust level among different participants. Apparently, the resource utilization is proportional to the increase of trust. The participants with high trust level will have a positive resource utilization, and its resource utilization will also promote the increment of trust level.

5.3. The effect of User's behavior on trust level
5.3.1. Test of the impact about resource user's assessment behavior on their trust
This model judges whether there is a malicious evaluation behavior according to the deviation between the score of user's evaluation and the score of comprehensive evaluation, and regulates the evaluation behavior by adjusting the user's trust level. Fig. 13 shows the impact of the evaluation behavior on trust level after User 4 has used up the resources (assuming that the shared resources are in good quality), the blue bar represents the deviation between user's evaluation of the shared resources with the resource's comprehensive assessment, and the red line represents the change of user's trust level. The deviation in user's evaluation is inversely proportional to the increment in trust level. When the deviation is no more than 10 points, the trust level will raise. If the deviation is too large, the user's trust value will decrease sharply.

Fig. 13
Download : Download high-res image (228KB)
Download : Download full-size image
Fig. 13. The impact of resource user's assessment behavior on their trust.

5.3.2. Test of the impact about resource's quality on sharer's trust level
To prevent the resource sharers from providing poor resources, a trust mechanism is introduced to regulate the behavior of resource sharers. The quality of all resources provided by the resource sharers will directly affect their trust, thus affecting the overall utilization of the resources which can be seen from Fig. 12(a). Fig. 14 shows the impact of the resource quality provided by the User 5 on its trust level (assuming that there is no malicious evaluation and the Spotify provided is in poor quality), bar charts represent the resource user's assessment to User 5 and the red line represents the change of User 5's trust level. As shown in Fig. 14, the quality of resources provided by participants is proportional to the increment of trust level. The Spotify's evaluation score is less than 50, which indicates the Spotify has poor quality or malicious behavior, hence the trust level of participant has fallen dramatically.

Fig. 14
Download : Download high-res image (217KB)
Download : Download full-size image
Fig. 14. The impact of resource's quality provided by resource sharer on their trust.

In summary, through the above comparative experiments, it can be clearly seen that the trust level and the resource utilization are mutually influential, and can regulate participant's behavior effectively and increase the availability of resource sharing module. The trust level reflects the trustworthiness of resources and the participant's behaviors. We can intuitively regulate the participant's behavior from the change of trust level.

5.4. Parameter analysis of trust calculation formula
In this paper, a bidirectional trust level updating mechanism is applied to regulate the behavior of the resource sharing participants. Meanwhile, we provide a trust calculation formula for the proposed bidirectional trust model. In order to analyze the accuracy and errors of proposed trust model, we evaluate our worm computing model through a group of contrasting experiment based on the trust calculation formula. As shown in Table 4 and Table 5, we randomly select a value for the parameter of resource sharing trust module and resource usage trust module to measure the system errors.


Table 4. The experimental parameters in resource sharing trust module analyzing.

Parameters	As	Bs	Cs	Ds
Values	0.02	0.01	8	12

Table 5. The experimental parameters in resource usage trust module analyzing.

Parameters	Au	Bu	Cu	Du
Values	0.01	0.05	6	10
According to prior description, we validate the proposed trust model with different parameter values. However, the parameter selection of trust calculation formula should satisfy two principles. Here we take the parameter selection process of resource sharers as an example to illustrate, while the principles of parameter selection in trust calculation of resource users are similar:

1)
The increment of trust level cannot be too large in case of the trust level loses its effectiveness in regulating the behavior of resource sharers since the trust level reaches the peak value too quickly.

2)
In order to avoid losing the control of trust mechanism for the malicious behavior, the decrease in trust level should be much larger than the increase in trust level when the worm node has malicious behaviors.

We verify the reliability of trust level changes in the resource sharing process by randomly selecting experimental parameters. Table 6 is a comparison experiments with Table 4 by randomly selecting the calculation parameters.


Table 6. A comparison experiment with Table 4.

Parameters	As	Bs	Cs	Ds
Values	2	1	1	2
Take the process of user3 sharing liberoffice's resources as an example based on the selected parameter values in Table 4, Table 6. We count and record the changes in user3 trust level within a week. As shown in Table 7, the trust level of user3 reaches its peak quickly since the selected parameter value is too large for As and Bs in Table 6 compared with Table 6. Hence, user3 loses its original representativeness of trust level to the quality of the shared resources that makes errors appeared of the trust mechanism in regulating the behavior of resource sharers when the trust value increment is too large and the trust value of the resource sharer is high. Similarly, as shown in Table 6, if the values of Cs and Ds are too small, the decrease of trust level is inapparent when the trust level increases quickly for user3. Therefore, the proposed trust model loses its effective response to malicious behaviors, which causes errors in the control of resource users' behavior by the trust mechanism. Therefore, it illustrates that the trust level in the proposed trust model can efficiently regulate the behavior of resource usages and participants.


Table 7. The changes of user3's trust level within a week.

Days	Trust level in Table 4	Trust level in Table 6
Day 0	74	74
Day 1	75.48	79.18
Day 2	79.25	86.58
Day 3	84.01	100
Day 4	89.89	100
Day 5	97.942	100
Day 6	100	100
5.5. Security defense testing
The purpose of security defense module is to integrate the known cooperative defense information in the Internet through the blockchain, and generate a cooperative defense system via group intelligence. This section carries out experiments from three aspects: the influence on detection efficiency caused by different malicious URLs, the influence on detection efficiency caused by different participants and the influence of threshold on detection results.

In order to improve the efficiency of consensus in blockchain, the difficulty of mining is set to 0X9999. Since the access to malicious URLs is random, we conducted five experiments in each case, and the final results were the average of these five experiments. In the figures of the experiment results, the X represents the number of detection steps. We regard it as one step for each participant to access the URLs at the same time. The Y represents the overall malicious URL access rate of all participants in each experiment step.

5.5.1. Test of the efficiency comparison between cooperative defense and uncooperative defense
In this experiment, there are 2000 websites, 400 of which are malicious. There are three participants that taking part in the cooperative detection. It can be clearly find in Fig. 15, the access rate of malicious URLs in both cases is unstable and fluctuating. But in the case of cooperative, the access rate of malicious URLs is significantly lower than that of non-cooperative. Apart from this, the malicious URL access rate in cooperative are more likely to be reduced to zero, indicating that it is easier to distinguish all the malicious URLs in a collaborative situation.

Fig. 15
Download : Download high-res image (392KB)
Download : Download full-size image
Fig. 15. Efficiency comparison between cooperative defense and uncooperative defense.

5.5.2. Test of the detection efficiency caused by different malicious URLs
To avoid the contingency of the above experimental results, the effect on collaborative detection is detected by continuously increasing the number of malicious websites. There are 3 participants taking part in the cooperative detection and there are 2000 websites to be tested. And the number of malicious URLs in these two experiments is divided into 400 and 800. Fig. 16 shows the experiments results. It can be seen that the malicious URL access rate changes in the same situation in two cases, both of them show a gradual downward trend with ups and downs. Overall, the accessing rate of malicious URLs with 400 malicious URLs is lower than that with 800 malicious URLs. Obviously, in the case of reducing the number of malicious URLs, the malicious URLs access rate is easier to reduce to 0. And the results are both better than that in non-cooperative as shown in Fig. 15. The same trend of these two changes indicates that collaborative detection is effective for different malicious URLs, worm computing model is elastic compatible with the change of malicious event state.

Fig. 16
Download : Download high-res image (335KB)
Download : Download full-size image
Fig. 16. Detection efficiency caused by different number of malicious URLs.

5.5.3. Test of the detection efficiency caused by different participants
In Fig. 17, we compared the detection rate of 3, 4 and 5 participants respectively. There are 2000 URLs, 400 of which are malicious. The overall trend of malicious URL access rate is gradually decreasing in these three different situations. Apparently, the access rate is the lowest in the case of five participants take part in the cooperative detection. The experimental results also show that increasing the number of participants reduces the risk of each person and speeds up the detection efficiency of malicious URLs.

Fig. 17
Download : Download high-res image (323KB)
Download : Download full-size image
Fig. 17. Detection efficiency caused by different number of participants.

5.5.4. Test of the detection efficiency caused by different thresholds
In the worm computing model, the effective range of malicious information is determined by setting the threshold value of comprehensive evaluation results, which reduces the possibility of inaccurate security defense information mistransmitted by worm nodes. Only when the comprehensive evaluation results of malicious web pages exceed the threshold value, can we take defense measures against the malicious web address.

In Fig. 18, we compared the detection efficiency of different thresholds. There are also 2000 URLs, 400 of which are malicious. From the experimental results, we can see that all malicious URLs are detected first without the threshold, and the higher the threshold is, the slower the detection efficiency will be. However, on the whole, the detection efficiency of malicious web pages with the three cases is similar, which shows that worm computing model can tolerate the error of detection information to a certain extent. By setting different threshold values, we can guarantee the accuracy of malicious information uploaded in worm computing model as well as the efficiency of cooperative defense, which can achieve a win-win situation in defense scope and defense efficiency.

Fig. 18
Download : Download high-res image (354KB)
Download : Download full-size image
Fig. 18. Detection efficiency caused by different threshold.

5.6. Performance analysis of the worm computing architecture
In this paper, the proposed model using blockchain technology is configured as the underlying framework of the system. We analyze the impact of the number of worm nodes on network traffic consumption. Here, we define the communication cost as the total number of messages required to be sent. We assume that the size of the data to be confirmed is D1, and the size of the data after authentication is D2. The communication cost of a piece of data from upload to authentication is as Eq. 5.6, where Commucost represents the total communication cost of authenticating a piece of data and N represents the number of nodes in the architecture. D2 × N is the communication cost in the synchronization process after data confirmation.(8) 
 

In the traditional framework, data sharing authentication needs to be transmitted between nodes. In this scheme, once the data is confirmed, it will be synchronized to all nodes automatically. There is no need for mutual authentication between nodes, thus broadcasting or sending authentication messages between each other is unnecessary. This will greatly reduce the traffic consumption, resulting in a high communication efficiency.

POW is the key technology of blockchain, which also determines the speed of data authentication of the proposed model. We analyze the time delay when nodes send data to be authenticated simultaneously under the 0x9999 mining difficulty. Here we define the time delay as the total time from data submission to data block upload which can be presented as Eq. 5.6. T1 is the time taken to submit the data. T2 represents the time cost for worm nodes mining confirmation. And the T3 is the time taken for storing the data block.(9) 
 

The speed of data authentication is mainly related to the performance of Ethereum. Here, we compare the delay time of each transaction of the proposed model under different mining difficulties. Table 8 shows that the average confirmation time of each data is 1.53 s under the mining difficulty in this paper. And the confirmation time will increase as the difficulty increases. Therefore, in this case, our data loss rate is particularly low, which can meet the needs of updating our model data. Meanwhile, with the node number increasing, the time delay of data is also reduced in terms of reducing the negative impact of the increase of concurrent number, and meeting the real-time requirements of the proposed model.


Table 8. The influence of different mining difficulty on performance.

Mining difficulty	Time delay	Memory consumption
0X9999	1.53s	1964bit
0X133332	2.27s	1929bit
In addition, as shown in Table 8, different mining difficulty will bring different memory consumption. Under the mining difficulty in this paper, we confirm that the memory consumption of each data is about 1964 bits. The experimental results illustrate that the memory consumption decreases with the increase of mining difficulty. However, the increase of mining difficulty also relatively prolongs the time of transaction confirmation. As one of the goals of our proposed framework is to improve the security defense capability, if the process of transaction confirmation is too slow, it may lead to the situation that the security defense information is not updated timely under concurrent operation. Therefore, we can claim that it is very valuable to exchange relatively more memory consumption for faster data authentication speed under the condition of less mining difficulty.

6. Conclusion and future work
In this paper, we first propose the concepts of worm node and worm computing as well as give the related formal description. The effective information in the Internet are gathered timely to provide the resource sharing and the collaborative defense services. Then we elaborate the schemes of worm computing model based on blockchain technology, and store the transaction data as well as cooperative information by delivering a private chain. We finally conduct the experiments on resource utilization, collaborative defense respectively and performance. The results show that the proposed worm computing model is effective in enhancing the resource utilization and cybersecurity.

One of our future directions focuses on reducing the computing power consumption of the system and improving the speed of consensus. Secondly, we intend to study the shared hardware resources in the process of resource sharing. Finally, we would implement the response of the self defense strategy for the identified malicious events in the security defense module.

