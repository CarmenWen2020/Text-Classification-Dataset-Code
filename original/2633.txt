Cyber-physical systems (CPSs) are today ubiquitous in urban environments. Such systems now serve as the
backbone to numerous critical infrastructure applications, from smart grids to IoT installations. Scalable and
seamless operation of such CPSs requires sophisticated tools for monitoring the time series progression of
the system, dynamically tracking relationships, and issuing alerts about anomalies to operators. We present
an online monitoring system (illiad) that models the state of the CPS as a function of its relationships between constituent components, using a combination of model-based and data-driven strategies. In addition
to accurate inference for state estimation and anomaly tracking, illiad also exploits the underlying network
structure of the CPS (wired or wireless) for state estimation purposes. We demonstrate the application of
illiad to two diverse settings: a wireless sensor motes application and an IEEE 33-bus microgrid.
CCS Concepts: • Mathematics of computing → Time series analysis; • Information systems → Sensor
networks; Data mining; • Computing methodologies → Anomaly detection; • Hardware → Power
and energy; Smart grid;
Additional Key Words and Phrases: Urban computing, urban informatics, IoT, big-data, state-estimation
1 INTRODUCTION
It has been projected that by the year 2030, cities will grow by 590,000 square miles and add
an additional 1.47 billion people, so six of every ten people will live in a city. One of the most
Fig. 1. Urban microgrid examples and design and deployment scenarios. (a) Represents an AC grid connected
to main grid through a point of common coupling (PCC). (b) Represents a Diesel generator along with other
Distributed Generation sources without the main grid.
consequential changes with this global influx of citizens will be the stress placed on cyber-physical
systems across the urban landscape, from smart grids to massively distributed IoT installations to
support net-zero energy objectives. At the same time, as cities become seen as urban-scale cyberphysical systems, a vast amount of data about system management and operation is continuously
being harvested and analyzed through sensor networks. Scalable and seamless operation of such
cyber-infrastructure requires sophisticated tools for monitoring the progression of the system,
dynamically tracking relationships, and issuing anomaly alerts to operators.
Leveraging our prior work (Momtazpour et al. 2015), we develop a system dynamics approach
(illiad) to invariant and anomaly detection in cyber-physical systems. Our key contributions are:
—A state estimation and anomaly detection algorithm (KASE) that combines model-based
(Recursive Bayesian Filtering) and data-driven (Autoregression with Exogenous Inputs and
Exploratory Factor Analysis) approaches. The integration of model-based and data-driven
strategies leverages the selective superiorities of both into a comprehensive system.
—An approach to incorporate the underlying network structure of the cyber-physical system
(wired or wireless) into the state estimation process. We demonstrate how this idea significantly improves the computational complexity of inference and renders the approach
tractable to large urban settings.
—A visual dashboard application for real-time anomaly detection and alerting in urban-scale
cyber-physical systems. We demonstrate the application of illiad to two diverse settings: a
wireless sensor motes application and an IEEE 33-bus microgrid.
2 BACKGROUND AND RELATED WORK
Availing energy from renewable sources to meet increased energy demands due to increasing electrification in urban environments is a key challenge we are faced with today as alluded to by Zheng
et al. (2014). An integration of microgrids into the existing power grid has been widely acknowledged as a potential solution. Resilient operation of power and microgrid systems requires constant
monitoring of data to extract or predict anomalies and to support rapid system recovery. Figure
1 represents typical urban microgrids and deployment scenarios. The microgrid consists of several distributed generation units (DGs), such as a photovoltaic (PV) array and diesel generator, as
well as energy storage systems and loads. These components are connected together using power
lines, transformers, and feeders. Microgrids can operate in both islanded and grid-tied modes. In
the islanded mode, the microgrid is as shown in Figure 1(b).
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:3
Energy systems (e.g., PV, battery, load, diesel generator) are typically installed and connected
to the microgrid controller via TCP/IP with systems that feature Supervisory Control and Data
Acquisition (SCADA), exploiting open communication standards, such as OLE for Process Control
(OPC) and Modbus RTU/TCP, which is a master-slave protocol for use with its programmable
logic controllers (PLCs). Measurement data and its collected features vary depending on the type
of energy device and its communications protocol, such as the format of XML. The measurement
data contains active and reactive output power values of each device, voltage and frequency values
as microgrid data, and state of charge (SOC) for batteries for every second.
Microgrids, including those studied here, are typically based on traditional power distribution
system models, while also incorporating relatively modern urban components, such as electric vehicles (EVs) and energy storage (ES) devices along with renewable power generation components,
such as wind turbines and PV cells (Chowdhury and Crossley 2009). However, such new additions
make the operation of the distribution system more complex (Tsikalakis and Hatziargyriou 2011).
One factor, for example, would be the uncertain and intermittent power output of the renewable
distributed generation components, specifically PV panels and wind turbines. Such intermittent
power output makes system state estimation a challenging task.
State estimation of the power system is typically accomplished by learning invariant relationships between system components, and such invariants are then used in an energy management
system (EMS) to construct a real-time network model (Monticelli 2000). In Cobelo et al. (2007),
the authors proposed a method aimed at providing the distribution management system controller with real-time information from the microgrid to increase the penetration of the renewable distributed generation. Rana and Li (2015) have proposed a Kalman filter-based microgrid
state estimation method using an IoT network to acquire information about the distributed generation grid. Wang et al. (2014) also proposed a linear filtering-based state estimation method
that mainly focused on small signal models. Hu et al. (2011) developed a probabilistic model to
conduct real-time linear state estimation through belief propagation. Instead of focusing on a single microgrid, Korres et al. (2011) proposed a multi-microgrid state estimator with limited realtime measurement and investigated the impact of distributed generation in both grid-connected
and islanded scenarios. However, most existing research has focused on accuracy of estimation
rather than anomaly detection using invariant relationships between components. Even fewer approaches exist that successfully combine model-based and data-driven approaches with the goal of
anomaly detection through state estimation. Anomaly detection in microgrids using sensor location and connection information can be considered a spatio-temporal anomaly detection problem,
and some relevant work has been carried out by Chawla et al. (2012) in the transportation domain. In Zheng et al. (2015), the authors propose a spatio-temporal anomaly detection system for
detecting collective anomalies by leveraging multi-domain datastreams.
3 PROBLEM FORMULATION
As described earlier, our work builds upon the preliminary framework described in Momtazpour
et al. (2015), and we begin by introducing this approach in context.
We are given a set of n timeseries D = x1 (t) ... xn (t) in a single or across multiple cyberphysical systems, each timeseries xi (t) is modeled as a vector. The values of the vector for a time
window tk ...tk+w are represented as
Xk:k+w i = [xi (tk ), xi (tk+1),... xi (tk+w )]
T . (1)
Each timeseries xi (t) is represented by a random variable Xi and is assumed to be drawn from
a distribution represented by Xi . Every CPS has many direct and latent interactions amongst the
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:4 N. Muralidhar et al.
components and having sufficient insight into these interactions and relationships is crucial to
effectively manage the system.
Definition 3.1 (Approximate Dependency). At time step tm, time series xj (t) ∈ D approximately
depends on xi (t) ∈ D if and only if there exists a function f : R → R that for appropriately small
ϵ > 0:
xˆj (tm ) = f

X1:m−1 j , X1:m
i
 (2)
and
|xj (tm ) − xˆj (tm )| < ϵ. (3)
This dependency is depicted by xj (t) ϵ
−→ xi (t)|tm .
Definition 3.2 (System Invariants). Two timeseries, xj (t) ∈ D and xi (t) ∈ D, are systeminvariant up to time T within range of ϵ if and only if at least one of the following is satisfied:
∃f : R → R and ∀ t | 0 ≤ t ≤ T : xj (t) ϵ
−→ xi (t)|0≤t ≤T
or
∃f : R → R and ∀ t | 0 ≤ t ≤ T : xi (t) ϵ
−→ xj (t)|0≤t ≤T .
We denote an invariant time series by xi (t) ϵ
−− xj (t).
Based on the nature of the system, dependencies between time series can be linear or nonlinear
and this is modeled by the function f . In complex cyber-physical systems, when we have a large
number of time series, it is appropriate to represent the invariants in the form of a graph.
Definition 3.3 (Invariant Graph). Graph G = (V, E) with the set of vertices V = {v1,...,vn } and
the set of edges E = {e1,..., en } is called an invariant graph of a system with observed timeseries
D = {x1,... xn }, where e = (vi,vj) ∈ E if and only if xi (t) ϵ
−− xj (t).
From Definition 3.3, we can surmise that vertex vi is equivalent to a timeseries xi (t). System
invariants and invariant graphs represent features and system-function under normal conditions.
In the presence of anomalies, when the function of the system deviates from the norm, these dependencies might disappear. While two timeseries xi (t) and xj (t) might be invariant under normal
conditions, the invariant relationship might disappear in the case of an anomaly.
Definition 3.4 Broken Invariants. We say that system invariant xi (t) ϵ
−− xj (t) is broken at time
T = tm if and only if timeseries xi (t) and xj (t) satisfy the following conditions:
∃f : R → R
and
∀ t | 0 ≤ t < T =tm :


xj (t) ϵ
−→ xi (t)|t<T ∧ |xj (tm ) − f (X1:m−1 j , X1:m
i )| ≥ ϵ

or


xi (t) ϵ
−→ xj (t)|t<T ∧ |xi (tm ) − f (X1:m−1 i , X1:m
j )| ≥ ϵ

.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.            
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:5
Fig. 2. Original
System Topology.
Fig. 3. ARX Invariant
Graph.
Fig. 4. Original
Method (ARX + ARXL)
Invariant Graph.
Fig. 5. KASE Method
Invariant Graph.
In a CPS, the existence of certain unobserved factors has an effect on overall system behavior.
But modeling these factors and their effects on all the electro-mechanical devices in a CPS is a
non-trivial task. Characterizing these latent effects can aid in state estimation.
Figure 2 shows the network topology of an example CPS with N components X1,...,XN . Here,
the solid lines indicate direct relationships between sensors through physical connections while
the dashed lines indicate indirect relationships between sensors. We see five direct and two indirect relationships depicted here. Figures 3 and 4 represent invariant graphs that can be inferred
using current state-of-the-art methods (ARX and ARX+ARXL; introduced in Momtazpour et al.
(2015)). ARX is a classical autoregression method (with exogenous inputs) and thus captures only
direct relationships, as shown in Figure 3. ARX+ARXL, as shown in Figure 4 does learn indirect
relationships but these relationships are linear and rather simplistic in nature. Our proposed approach (KASE) aims to identify more complex hidden relationships through hidden factors labeled
h1,... hk and Kalman state estimates in Figure 5. These support the modeling of the system at
higher orders.
3.1 State Estimation with Kalman Filters
Anomaly detection in sensor networks can be addressed using a dynamic state estimation technique (Nishiya et al. 1982), wherein at any time point t, we wish to estimate the state of each
component in the system. As a function of these state estimates and corresponding actual state
measurements, we can then infer whether the system is stable or if there is an anomaly in one or
more components in the system. One of the most robust and widely used methods for state estimation is the Kalman filter (Kalman 1960), which is a special case of recursive Bayesian estimation
wherein the data is considered to obey the Gaussian distribution (Chen 2003). In this article, we
consider the effects of state estimation in CPS using the linear Kalman filter. We model the Kalman
filter as described by Welch and Bishop (2001). It attempts to estimate the state x ∈ Rn at time step
k of a discrete-time controlled process with a measurement z ∈ Rn, The Kalman filtering process
assumes that the matrices A,H,Q, and R, which represent the process transition matrix, the measurement transition matrix, the process covariance matrix, and measurement covariance matrix,
respectively, and the initial mean and covariance of the data are known at the outset. In our work,
we estimate A, Q, and R using expectation maximization (Borman 2004). The matrix H is the identity matrix. The initial state mean and covariance (μ0 and Σ0) are estimated from historical data.
3.2 Leveraging the Neighborhood Assumption
Section 3 outlines the basic problem framework and provides definitions about invariants, and
anomalies. Although the original (ARX + ARXL) method attempts to find all direct and indirect
dependencies in addition to learning complex latent variables, we hypothesize that considering the
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:6 N. Muralidhar et al.
network topology of the CPS to learn only a set of direct relationships for each component yields
equal or stronger state estimation and anomaly detection capabilities. We term this approach SAIL
for Structure Aware Invariant Learning.
Let us first consider the case when the topology of the CPS is known, for example, consider
the sample CPS depicted in Figure 2. Here, the system consists of N components X1,...,XN . If
we consider X1, then it has two direct connections, one to X3 and the other to X2 along with an
indirect relationship with XN . Our hypothesis in the context of X1 claims that the state of X1 (t) can
be estimated simply using only the values X1:t−1 1 , X1:t
3 , X1:t
2 and the Kalman filter a posteriori state
estimate k1 (t). Hence, set {X2,X3} forms the SAIL neighborhood of X1 denoted S1
n. In the context
of wireless sensor networks that lack a connected network topological structure, we exploit the
physical locations of sensors to obtain a proximal set of nearest neighbors for each component in
the wireless network of CPS components.
The SAIL approach requires us to augment our previously stated definition 3.1 as follows:
Definition 3.5 (Structure Aware Approximate Dependency). At time step tm, time series xj (t) ∈ D
with SAIL neighborhood Sj
n approximately depends on xi (t) ∈ D if and only if, xi (t) ∈ Sj
n and
there exists a function f : R → R that for appropriately small ϵ > 0:
xˆj (tm ) = f

X1:m−1 j , X1:m
i
 (4)
and
|xj (tm ) − xˆj (tm )| < ϵ (5)
This dependency is depicted by xj (t) ϵ
−→ xi (t)|tm
The aforementioned structure informed invariant learning methods help scale the invariant
learning procedure to large systems as they reduce the quadratic complexity of the algorithm.
This is because, although the complexity of the algorithm technically is still quadratic in the worst
case, the complexity of the newly proposed KASE (Kalman Autoregressive State Estimation with
Latent Factors and Exogenous Inputs) invariant learning algorithm is a function of the average
cardinality of the SAIL neighborhood for all the components. Since it is highly unlikely that all or
even most of the components of a CPS will be directly connected, the SAIL neighborhood of each
component will be relatively sparse hence achieving the scalability and speeding up the algorithm
relative to benchmarks that do not exploit the neighborhood assumption.
We now outline the proposed KASE approach and explain the algorithm in detail in Section 4.
In Figure 5, we observe different colored nodes and edges. If we consider one node, say X2 (t),
then we see that the SAIL neighborhood of X2 (t) denoted S2
n contains {X1 (t),X3 (t)}. The bluecolored incoming edges from X1 (t) and X3 (t) to X2 (t) denote the invariants calculated for state
estimation of X2 (t). The self-loop labelled k2 (t) indicates the Kalman filter state estimate for X2 (t)
at time t. The latent factors h1,... hk are the same as stated previously. Hence, the KASE algorithm
performs state estimation as a function of the current Kalman filter state estimate, the current
measurements of proximal components as well as the system-wide relationships learned through
the latent factors. The system hence seamlessly combines both model-based (Kalman filters) as
well as data-driven approaches (latent factor based autoregression) for state estimation.
4 METHODS
In this section, we describe the KASE algorithm for invariant learning and anomaly detection. We
also outline the working of the entire illiad application.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.  
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:7
4.1 Factor Analysis
Let X1,...Xn denote random variables and H1,...,Hk denote k hidden factors, and assume that
the latent variables are generated using factor analysis with the assumption that they can be expressed as linear combinations of the observed variables. Factor analysis attempts to model the
variation of the data and hence models the latent sources that cause said variation (De Winter and
Dodou 2016). Factor analysis although similar to PCA is more generalizable due to consistency of
factor loadings for different feature subsets (Suhr 2005). Details of the exact factor analysis procedure we have used can be obtained from Momtazpour et al. (2015). Other resources for factor
analysis are also available (Jöreskog 1967; Harman 1976).
4.2 KASE—Kalman Autoregressive State Estimation with Latent
Factors and Exogenous Inputs
If we were to once again consider the set D = {x1 (t),x2 (t),... xn (t)}, then according to the ARX
model in Jiang et al. (2006), the state estimate for a timeseries at time t is given by
xˆj (t) =
u
p=1
apxj (t − p) +
v
p=0
bpxi (t − l − p). (6)
Here, xˆj (t) represents the state estimate of the timeseries xj at time t and this is calculated as a
function of the previous values of timeseries xj and the values of the exogenous timeseries xi . The
parameters u,v,l represent the order of the model and control the number of previous timesteps
that affect the state estimate at the current timestep. ap and bp represent weight parameters that
control the effect of each of the historical values on the current timestep. In our model, u = v and
the values are estimated using cross-validation. In our case, we assume that l = 0 as there is no
lag.
Incorporating the previous assumptions, the corresponding equation for the Latent Factor ARX
model (ARX + ARXL) as outlined in Momtazpour et al. (2015) is
xˆj (t) =
u
p=1
apxj (t − p) +
u
p=0
bpxi (t − p) +
u
p=0

k
q=1
cpqhk (t − p). (7)
Here, k indicates the number of latent factors and u indicates the size of the sliding window we
use (the number of previous values we consider). For our experiments, we have set u = 10.
We modify Equation (7) to incorporate the Kalman filter state estimates step as follows:
xˆj (t) =
u
p=1
apxj (t − p) +
u
p=0
bpxi (t − p) +
u
p=0

k
q=1
cpqhk (t − p) +
u
p=0
dpkji (t − p). (8)
Equation (8) incorporates the Kalman state estimates for timeseries xj , represented by the symbol kji (t). The dp ’s represent the corresponding weights of each historical state estimate. The symbol kji (t) indicates the Kalman filter state estimate for xj (t) calculated using the measurements of
timeseries xj and xi at time t.
4.2.1 Learning Invariant Based State Estimates. In the context of two timeseries, xi and xj ,
wherein xj is the output timeseries and xi is the input timeseries, we calculate the state estimate
of xj (t) as follows:
Let x¯k ∈ R2X1 indicate the Kalman prior state mean of the state at time k, then the transition
equations of the Kalman filter is given by
x¯k = Axk−1 + Buk + wk−1. (9)
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:8 N. Muralidhar et al.
Here, A ∈ R2X2 is the transition matrix. xk−1 ∈ R2X1 indicates the a posteriori state estimate at
time k − 1. We ignore the optional control input term Buk and make the assumption as stated
previously that wk−1 ∈ R2X1 is a white-noise process that indicates the error at time k − 1:
yk = zk − Hx¯k , (10)
where H ∈ R2X2 is the measurement matrix. This, in our case, is the identity matrix. zk ∈ R2X1 are
the actual measurements at time k. In the case of the two timeseries xi (input) and xj (output),
zk =

xj (k)
xi (k)

.
yk ∈ R2X1 indicates the residual at time k:
xk = x¯k + Kyk . (11)
K ∈ R2X2 represents the Kalman gain and is calculated as a function of the process and measurement covariance matrices P and Q, and the measurement matrix H1
xk ∈ R2X1 represents the posterior state estimate. In the context of the time series xi and xj , where
xj is the output timeseries whose state at time t is to be estimated,
xt =

kji (t)
kij (t)

.
Here, kji (t) ∈ R indicates the a posteriori state estimate (mean) for timeseries xj using the exogenous input xi for time t. If we now refer back to Figure 5, and consider the node X2 (t) in blue, then
the self-loop labelled k2 (t) ∈ RCX1 represents a vector of a posteriori state means, where C = |S2
n |
and where the SAIL set S2
n of timeseries X2 = {X1,X3}:
k2 (t) =

k21 (t)
k23 (t)

.
A, P, Q are estimated (and periodically re-estimated) from historical data using the expectation
maximization algorithm (Borman 2004). The initial state mean and covariance μ0 and Σ0 are estimated from the data.
As acknowledged by Jiang et al. (2006), Ge et al. (2013), Chen et al. (2010), Chen et al. (2008),
and Sharma et al. (2013), ARX only takes into account direct linear relationships. Hence, we retain
the latent factor model to take into account the complex underlying relationships between the
components in the system. We also consider the model-based Kalman filtering approach owing to
the advantages and improvement of system performance in fault detection and health monitoring
of hybrid-approaches (model-based + data-driven) discussed in Tidriri et al. (2016).
Algorithm 1 represents the newly designed KASE algorithm that combines both model-based
and data-driven approaches in learning the invariant graph. The algorithm defined in Momtazpour
et al. (2015) has been augmented to incorporate topological structural assumptions (line 6). At each
timestep t, the UpdateKalman function (line 16) takes in the measurements of a pair of timeseries
xi (t), xj (t) and updates the model using Equations (9), (10), and (11). The posterior state estimate
of the updated model is then used to learn θKAS E
ji . The F ∗
ji ’s are calculated and superiority threshold
(Δ), minimum acceptable score (τ ) are enforced similar to Momtazpour et al. (2015). We also adopt
the same alerting and anomaly ranking and localization procedure with the RMSE evaluation
metric. In Section 5, we provide a comparison of the anomaly detection ranking scores of both the
original algorithm (ARX + ARXL) proposed in Momtazpour et al. (2015) and our newly proposed
KASE algorithm.
1The notation for Equations (9), (10), and (11) has been taken from Labbe Jr (2014) and Welch and Bishop (2001).
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:9
ALGORITHM 1: KASE Invariant Search Algorithm
Input: xi,i ∈ {1,...,n}: set of timeseries, Δ: ARX superiority threshold, τ : minimum acceptable score,
ts and te : start and end time of training dataset.
Output: G: Invariant Graph
1 SARX = {};
2 SARX L = {};
3 SKAS E = {};
4 for i = 1 to n do
5 for j = 1 to n do
6 if ((i == j) or (xi  Sj
n)) then
7 continue;
8 end
9 foreach ts ≤ t ≤ te do
10 Learn an ARX model, θARX
ji , using Equation (6);
11 Calculate xˆARX
j (t) using θARX
ji ;
12 Compute F ARX
ji (t) ;
13 Learn an ARXL model, θARX L
ji , using Equation (7);
14 Calculate xˆARX L
j (t) using θARX L
ji ;
15 Compute F ARX L
ji (t) ;
16 UpdateKalman( xi (t), xj (t) ) /*Add Measurements*/
17 Learn a KASE model, θKAS E
ji , using Equation (8);
18 Calculate xˆKAS E
j (t) using θKAS E
ji ;
19 Compute F KAS E
ji (t) ;
20 end
21 if  te
t=ts F ARX
ji (t) ≥ max (
te
t=ts F ARX L
ji and te
t=ts F KAS E
ji ) − Δ

and
(mint (F ARX
ji (t)) ≥ τ ) then
22 SARX = SARX ∪ {xi  xj};
23 else if  te
t=ts F ARX L
ji ≥ (
te
t=ts F KAS E
ji − Δ)
and (mint (F ARX L
ji (t)) ≥ τ ) then
24 SARX L = SARX L ∪ {xi  xj};
25 else
26 /*Indicates that F KAS E
ji has highest score*/
27 SKAS E = SKAS E ∪ {xi  xj};
28 end
29 end
4.3 illiad System Architecture
We outline the functioning of the illiad anomaly detection system in this section. Figure 6 depicts
the process flow/architecture diagram of the illiad system. The system periodically re-trains the
Kalman filter and the factor analysis model using historical data while also continuously updating
the state estimate of the Kalman filter using new data instances. The system also has a front-end
dashboard with the invariant graph depicted on screen aiding the system maintainer to easily
glean whether the system has anomalous components. Figures 7 and 8 represent the dashboard
of the wireless sensor motes temperature sensor network and the IEEE 33 bus microgrid network
described later in Section 5.1. The dashboard is interactive and allows for the user to click on nodes
in the network to view various historical data and metrics about them. In case of an anomaly,
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.        
35:10 N. Muralidhar et al.
Fig. 6. illiad System Architecture.
Fig. 7. illiad Dashboard - Sensormotes. Fig. 8. illiad Dashboard - IEEE 33 Bus
Microgrid.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:11
Fig. 9. Lab Layout Sensor Motes. Fig. 10. Clustering of Sensors Based on Original
Temperature Readings. A fair degree of spatial
correlation can be observed.
an alert is issued (indicated by a red box under the invariant graph) on the dashboard and the
corresponding broken invariants are highlighted in red as shown in the figures. It is apparent from
the broken invariants in Figure 7 that Sensor 4 has an anomaly. The timeseries graphs at the bottom
of the dashboard represent the residuals of each of the invariants of the anomalous sensor (sensor
4 in Figure 7 and Bus 30 in Figure 8). In addition to residuals, the actual temperature readings and
the voltage magnitudes, phase angles, and PV, Wind Generation statistics are also included in their
respective dashboards. The illiad system can thus be used for system health monitoring and fault
detection both for wired and wireless cyber-physical systems.
5 EXPERIMENTAL RESULTS
We present the application of our methodology to two diverse datasets in urban computing.
Through these experiments, we seek to showcase that our system is applicable to both wireless
and wired sensor networks in real-world settings. We will showcase how structural and proximal
relationships are inferred automatically in the case of wireless sensor networks. Most importantly,
we wish to demonstrate how our system leads to an improvement in the quality of anomaly and invariant detection over existing benchmarks. To this end, we conduct experiments to showcase the
strength of invariant graphs learned by illiad as well as its ability to accurately identify anomalies
even with a relatively sparse invariant graph. We also discuss the benefits of the SAIL invariant
learning approach over the combinatorial invariant learning approach used in prior work by analyzing the runtime behavior of the two systems.
We first describe the application of illiad to a wireless sensor network and subsequently to a
microgrid system.
5.1 Sensor Motes
Dataset Description: The sensor motes dataset contains measurements from wireless sensors at
Intel Berkeley Research lab.2 There are a total of 54 sensors located at a lab measuring temperature,
humidity, light, and voltage between February 28 and April 5, 2004. Each sensor was able to record
different variables every 31s. Figure 9 shows the location of each sensor in different parts of the
lab. We focus on temperature recordings between February 28 and March 10 for our study.
2http://db.csail.mit.edu/labdata/labdata.html.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:12 N. Muralidhar et al.
Fig. 11. Temperature Trends of Sensors in the top right yellow cluster in Figure 10.
Fig. 12. Average Relationship Strength Per Temperature Sensor.
Fig. 13. Average Residual Per Temperature Sensor.
Data Processing: We cleanse the data by eliminating sensors with a large number of missing
entries. The missing temperature readings in the remaining set of sensors were addressed using
linear interpolation (Meijering 2002). The dataset was then down-sampled to 10min intervals with
the mean as the sampling rule. Figure 10 depicts a representation of all the filtered set of sensors
used in our analysis, clustered according to their temperature readings. Figure 11 shows the temperature values of a group of sensors that are part of the same cluster. We can see that all the
sensors in the figure showcase similar patterns of temperature variation.
Results and Discussion: In Figure 12, we plot the average normalized relationship strength
(1 − avд_prediction_error) per temperature sensor. The relationship strength is indicative of how
well the invariants that a sensor is involved in are able to estimate the current state of the sensor. We observe that the relationship strengths of sensors obtained using KASE is higher than
that obtained using the original (ARX + ARXL) method indicating that KASE is able to infer a
higher number of invariant relationships that are stronger. This theory is further corroborated by
Figure 13, which depicts the average residuals per temperature sensor; in this case as well, we
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:13
Fig. 14. Original Nearest-Neighbor Graph
(based on sensor location information).
Fig. 15. Invariant Graph Learned from KASE algorithm.
Fig. 16. Invariant Graph Learned from
ARXL + ARX method (with SSAIL assumption).
Fig. 17. Temperature Sensor Number 4, Original Readings vs. Anomaly Injection Readings
Snapshot.
observe that KASE is able to generalize better on the test set and produce more accurate temperature state estimates. The network structure of the wireless sensor network is derived using the
SAIL method (using sensor locations) described in Section 3 and is shown in Figure 14. The invariant graph learned using this network from the KASE algorithm is depicted in Figure 15. We
observe that the invariant graph is identical to the original network structure shown in Figure 14.
Figure 16 indicates a similar invariant graph obtained by executing the original (ARX + ARXL)
algorithm with the SAIL neighborhood constraint on the same temperature sensormotes dataset.
We observe that the number of edges learned in the invariant graph is lower than in the case of
KASE. The missing edges are depicted in red in Figure 16.
Anomaly Detection: Apart from the invariant discovery and state estimation accuracy, we also
conducted experiments to test the anomaly detection capabilities of the KASE algorithm in comparison to the original (ARX + ARXL) algorithm. The experiment was carried out by first injecting
anomalies into temperature sensor number 4 between 11 a.m. and 23:59 p.m. on March 9, 2004, and
then running the two algorithms (original ARX + ARXL and the KASE algorithm) to understand
the behavior of the two systems when faced with an anomaly. The anomalous snippet of the time
series of sensor 4 and the original timeseries have been shown in Figure 17. The anomalies were
generated by adding Gaussian noise with 0 mean and 2.0 standard deviation to the sensor 4 temperature values at certain pre-determined timepoints between 11 a.m. and 23:59 p.m. on March 9,
2004. These anomalies have been indicated in red in Figure 17. We use the anomaly ranking algorithm used in Momtazpour et al. (2015) to quantify and compare the anomaly detection quality
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:14 N. Muralidhar et al.
Table 1. Anomaly Detection Score Sensormotes
Component Method Name Remaining Links Broken Links Ranking Score
Sensor 4 Original (ARX + ARXL) 14 15 0.517
Sensor 4 KASE 0 2 1.0
of both methods. The results of the anomaly detection are indicated in Table 1. Here, we observe
that although a significant number of invariants concerning the anomalous sensor (sensor 4) are
broken, there are almost an equivalent number of invariants still existing in the system indicating
that these invariants do not register the anomaly. The KASE algorithm, however, recognizes the
anomaly by breaking all the existing invariants (in this case sensor 4 initially has two invariants,
which are both broken) and hence obtaining a higher anomaly score and also providing for a more
interpretable detection mechanism.
Discussion: State estimation in the current illiad system could suffer if the sensor distribution
is significantly skewed spatially. Since we consider the spatially closest neighbors to a particular
sensor as candidates for invariant learning, a significant skew in that distribution could make estimation challenging due to sparse data in some locations. This in turn could lead to fewer invariants
inferred and thus diminished capacity for anomaly detection. The use of Gaussian processes for
dynamic sensor placement (Ramakrishnan et al. 2005; Krause et al. 2008) can aid in judicious placement of sensors. A second issue in generalization has to do with potential mobility of sensors in
practical settings (in which case, some violations of invariants could be normal). In IoT settings,
we need to inherently model sensor mobility into the analytics engine.
5.2 Electric Power Microgrid
Dataset Description: This simulated dataset is based on the (real) IEEE 33-bus standard distribution power system, a commonly used example distribution network. It is composed of 33 electric
buses or nodes. Bus 1 is a transformer connecting the distribution level system and bulk transmission power system. It is the feeder to the whole system, through which all the electric power
flows into the network. It serves as the regular energy source. The other 32 buses are all load buses
initially, which means that they only consume energy. We model all energy consumers and not
the energy source in Bus 1 during our experiments as the voltage and power of the transformer is
assumed constant throughout the dataset generation process. To imitate a typical mircrogrid, we
have integrated multiple non-traditional elements into the system, including two types of renewable distributed energy sources: PV and wind turbines, electric vehicles, and an energy storage
device.
Data Processing: The hourly operating conditions of this distribution system are simulated
for a year with a 1h sampling rate, which is 8,760 cases in total, using the MatPower package
(Zimmerman and Gan 1997). We conducted 8,760 power flow calculations based on hourly scales
of the regular and irregular load and the hourly outputs of the renewable distributed generation.
The load consumption, solar radiation and wind intensity values required as input for data generation were all considered for the city of Richmond, Virginia USA, to ensure consistency between
the electric load, and the energy produced using distributed generation. The 8,760h load data has
been taken from a dataset containing commercial and residential hourly load profiles for all TMY3
locations in the United States.3 For different load buses, we use 5% uniformly distributed deviation
to generate different load curves that follow the same general pattern. The load at Bus 33 has a
3https://en.openei.org/datasets/dataset/commercial-and-residential-hourly-load-profiles-for-all-tmy3-locations-in-theunited-states.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:15
Fig. 18. Original Network IEEE 33 Bus with Invariants and Anomalies.
solar panel attached to it. The solar radiation data used to generate the synthetic PV output is
available from the National Solar Radiation Data Base.4 One wind turbine is attached to Bus 15,
and the power output of a wind farm located close to Richmond the data for which was obtained
from the National Renewable Energy Laboratory Wind Prospector Data Set5 was used as a reference for the simulation. We have also attached an EV charging station to Bus 10. A one-year
charging load for this station was obtained from Idaho National Laboratory EV Project Quarterly and Annual Report Data.6 An energy storage battery is attached to Bus 2. For simplicity, we
adopt a charging/discharging strategy that assumes that the battery is charged during the load
valley from 00:00 a.m. to 8:00 a.m. and that it is discharged from 9:00 a.m. to 11:00 p.m. The physical connections among the various components of the microgrid system have been specified in
Figure 18(a) . It must be noted that the energy storage device depicted at Bus 2 has not been modeled as an explicit separate component; instead the load at Bus 2 has been modified appropriately
to depict behavior of having an energy storage device attached to it. Hence, we do not model the
battery as a separate component in our experiments.
Results and Discussion: Figure 18(a) represents the circuit diagram of the IEEE 33 Bus network
used in our experiments. We use the network structure depicted in the figure (excluding the dashed
lines that depict open switches) to learn the SAIL neighborhoods of each of the 35 components.
The Wind turbine, PV Cell, and the Electric Vehicle Load have been renamed Bus 35, Bus 36, and
Bus 37, respectively. The SAIL neighborhood learned by the KASE algorithm has been depicted
in Figure 18(b) and the broken links due to anomalies have been depicted in Figure 18(c). We see
that the invariants learned by the KASE algorithm correspond to the original circuit diagram. The
KASE has three sub-components—ARX, ARXL, Kalman State Estimation. These three algorithms
each try to learn relationships between each pair of invariants. From Algorithm 1 (lines 21 to 29), it
is clear that the invariant learning process attempts to select the strongest relationship between a
pair of components learned by ARX, ARXL and Kalman state estimation. Hence, we can conclude
that the algorithm that contributes the most number of invariants to the graph has the property
of learning stronger relationships between components. Table 2 depicts the number of invariants
learned as a function of Maximum Acceptable Error (MAE). The MAE is the maximum prediction error (per invariant) below which invariant-relationships learned by any of the aforementioned procedures qualify for selection (this can also be considered to be 1 − τ , where τ indicates
the minimum acceptable invariant-relationship strength) during the invariant learning process.
4http://rredc.nrel.gov/solar/old_data/nsrdb/1991-2005/tmy3/by_state_and_city.html. 5https://mapsbeta.nrel.gov/wind-prospector/?visible=wind_3tier_site_metadata. 6https://avt.inl.gov/project-type/downloads.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:16 N. Muralidhar et al.
Table 2. Number of Invariants Learned as a Function of MAE
Max. Acceptable Error (MAE) Original_SAIL KASE KASE_ARX KASE_ARXL KASE_KSE
0.0001 0 0 0 0 0
0.001 11 12 0 3 9
0.002 20 21 0 6 15
0.003 22 27 0 6 21
0.004 34 38 0 8 30
0.005 46 48 0 15 33
0.006 66 67 0 17 50
0.0851 68 68 0 18 50
Table 3. IEEE 33 Bus Avg. Residual, Avg. Errors, and
Percentage Improvement of KASE over Original
Name Original KASE % Improvement
RMSE 0.004153 0.003964 4.5639
RSE 0.148742 0.134409 9.6363
RAE 0.365744 0.347662 4.944
Residual 0.002909 0.0027889 4.14
The original_SAIL column represents the (ARX + ARXL) original algorithm run using the SAIL
neighborhood assumption. The KASE column represents Algorithm 1 and KASE_ARX, KASE_
ARXL, and KASE_KSE represent the number of invariants learned by each of ARX, ARXL, and
Kalman state estimation sub-components of KASE, respectively. We observe that for any particular value of Maximum Acceptable Error, KASE learns a greater subset of the true set of invariants
(the IEEE 33 Bus network has a total of 68 invariants) than the Original_SAIL algorithm. Even
amongst the KASE sub-components, we can see that a majority of edges are contributed by the
KSE procedure indicating that the Kalman filtering procedure plays a major role leading to the
KASE algorithm learning a more diverse set of edges and stronger invariant relationships as compared to the Original (ARX + ARXL) algorithm. We provide quantitative proof of our claim that
the KASE algorithm is indeed a better state-estimator by recording the average values for residual, RMSE (root mean squared error), RSE (relative squared error), RAE (relative absolute error)
on the test set in Table 3 and Figures 19, 20, and 21. We find that the KASE algorithm achieves a
significant percentage improvement over the Original (ARX + ARXL) algorithm in all cases. We
must note that we have left out the componenents (Bus20, Bus30, Bus7) in which anomalies were
injected in the test set as they will skew the results with high error values.7 Since this table specifically has been included to showcase the state-estimation capability of the KASE algorithm, we feel
excluding the anomalous nodes will have no effect as we have already demonstrated the anomaly
detection capabilities in Table 4.
Anomaly Detection: We introduce anomalies in the data to simulate a load surge at certain
time steps by decreasing the voltage at three different buses. We decrease the voltage magnitude
at Bus 7 between time steps 7,500 and 7,565. We also decrease the voltage at Bus 20 from time step
8,500 to 8,550 and at Bus 30 from time step 8,500 to 8,545 and showcase the effect of these anomalies
on the anomaly detection mechanism. These anomalies test the ability of the system not only to
detect and report the anomalies, but also the localization capability of the system in the presence
7If there is an anomaly, the system under/overestimates the state significantly, which is what is indicative of the anomaly.
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:17
Fig. 19. KASE vs. Original
(ARX+ARXL) Average RMSE.
IEEE 33 Bus Microgrid System.
Fig. 20. KASE vs. Original
(ARX+ARXL) Average RSE. IEEE
33 Bus Microgrid System.
Fig. 21. KASE vs. Original
(ARX+ARXL) Average RAE. IEEE
33 Bus Microgrid System.
Fig. 22. Anomaly Snapshot Bus 20. Fig. 23. Anomaly Snapshot Bus 30.
Fig. 24. Anomaly Snapshot Bus 7. Fig. 25. Running Time of Original (ARX + ARXL)
vs. Original (ARX+ARXL) + SAIL.
Table 4. Ranking and Anomaly Localization
Component Method Remaining Links Broken Links Score
Bus7 Original(ARX+ARXL) 6 14 0.7
KASE 0 2 1.0
Bus20 Original(ARX+ARXL) 11 21 0.66
KASE 0 2 1.0
Bus30 Original(ARX+ARXL) 4 13 0.76
KASE 0 2 1.0
of a single as well as multiple anomalous components. The voltages of the three buses around
the time steps of their respective anomalies have been depicted in Figures 22, 23, and 24. In each
figure the anomalous region has been bound by vertical red lines. Since the invariant relationships
learned are stronger, the anomaly detection procedure is also able to perform in a more robust
manner when it encounters an anomaly. This can be seen in Figure 18(c) where all the invariants
of Buses 7, 20, and 30 are broken in response to the injected anomalies. We also show that the
KASE algorithm is better at ranking anomalies; on average a higher score is learned using the
ranking procedure from Momtazpour et al. (2015). Table 4 shows that for each of the three buses,
all invariants involving the anomalous bus are broken for the KASE algorithm yielding a higher
anomaly score relative to the Original (ARX + ARXL) algorithm, further enforcing our belief that
the KASE algorithm proposed in this article learns stronger and more robust invariants most or all
of which are violated in case an anomaly occurs in the system. Finally, we depict the advantage of
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
35:18 N. Muralidhar et al.
the SAIL methods toward increasing the scalability of the invariant learning algorithms discussed
in this article, thereby enabling the algorithms to be run with larger datasets. To conduct this
experiment, we generated a random matrix X ∈ RmXn, where we varied n between 10 and 100.
Here, n represents the number of unique timeseries (or unique components in the CPS). We then
ran both the Original and the Original method with the SAIL assumption. We simulated the SAIL
neighborhood by assuming that the underlying network of the CPS had a 0.3 graph density (each
component is connected to 30% of the other components in the network), which is much denser
than either of our examples depicted in this article and is much denser than most connected CPSs.
Figure 25 shows the significant advantage in terms of running time of incorporating the network
information in the invariant learning. The figure clearly shows that the Original (ARX + ARXL)
algorithm with the SAIL assumption scales much better than its non SAIL counterpart.
Discussion: Although we have taken great care to model our microgrid design using actual
load profiles, and real solar and wind intensity data to simulate the generation of the PV and wind
turbines, the lack of open datasets for microgrids is a serious bottleneck in this area of research.
Similarly, our injection of anomalies can be generalized into a greater taxonomy of faults, for
example, component failure, cyber-attacks, and changing environmental situations. We aim to
build upon the work here to develop a broader framework for microgrid analytics.
5.3 System Function—Wireless versus Wired Networks
It is instructive to compare and contrast our wired and wireless network studies. While we have
shown that our method works in both settings, wireless networks exhibit broader profiles of faulttolerance not witnessed in wired networks (e.g., a sensor malfunction in a wireless network might
not affect the overall system dynamics as much as a component failure in a microgrid might, for
example, potentially leading to cascading failures). The illiad system has a built-in rule to raise
an alert when a a threshold number of samples from some component of the CPS have failed to
register but more elaborate fault models can be explored within our framework.
5.4 System Characteristics and Minimum Requirements
The proposed system has been shown to work with both wireless and wired sensor networks
and has been tuned to work with power systems like microgrids as well as sensors that measure
physical indicators such as temperature. Further, the system is able to perform with either static or
streaming data, in both wired and wireless settings. The system requires either an absolute physical
network diagram of the sensor network or a logical connectivity diagram so the invariant learning
can leverage this prior information as domain knowledge and further contribute to interpretability.
6 CONCLUSIONS AND FUTURE WORK
We have presented a system for anomaly detection and state estimation for wireless and wired
sensor networks. We have tested our models on multiple datasets (both real-world and synthetic)
and demonstrated the improvement in performance in comparison to the baseline method. Our
application successfully combines model-based (Kalman filter) and data-driven (auto-regression
and latent factor-based methods) approaches to learn a better state representation of the system
under surveillance. This higher accuracy in state estimation is achieved through learning stronger
relationships between various components in the networks while also being sensitive to potential
violations in these relationships resulting in anomalies. The sparse network structure of invariant
relationships learnt through the network-structure aware invariant learning procedures makes for
a scalable system, wherein the state of the system is easily interpretable by human experts tasked
with overseeing system maintenance. The real-time dashboard and the alerting system aid further
in this regard. The field of invariant discovery is vast as there are many varieties of latent, direct,
ACM Transactions on Intelligent Systems and Technology, Vol. 9, No. 3, Article 35. Publication date: January 2018.
illiad: InteLLigent Invariant and Anomaly Detection in Cyber-Physical Systems 35:19
indirect, simple, and complex relationships amongst components in cyber-physical systems. Power
systems are rife with non-linearities, like voltage phase-angles. Incorporating these components
into the invariant learning is a logical next step to improve the state estimation capabilities of
the system. Further, each component in a power system interacts with other components in compliance with certain well-known laws of physics and electricity; thus, augmenting the anomaly
detection procedure to be cognizant of these relationships would be a useful direction of future
work.