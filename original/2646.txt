Cyber attacks have become increasingly complicated, persistent, organized, and weaponized. Faces with this situation, drives a rising number of organizations across the world are showing a growing willingness to leverage the open exchange of cyber threat intelligence (CTI) for obtaining a full picture of the fast-evolving cyber threat situation and protecting themselves against cyber-attacks. However, modeling CTI is challenging due to the explicit and implicit relationships among CTI and the heterogeneity of cyber-threat infrastructure nodes involved in CTI. Owing to the limited labels of cyber threat infrastructure nodes involved in CTI, automatically identifying the threat type of infrastructure nodes for early warning is also challenging. To tackle these challenges, a practical system called HinCTI is developed for modeling cyber threat intelligence and identifying threat types. We first design a threat intelligence meta-schema to depict the semantic relatedness of infrastructure nodes. We then model cyber threat intelligence on heterogeneous information network (HIN), which can integrate various types of infrastructure nodes and rich relations among them. Following, we define a meta-path and meta-graph instances-based threat Infrastructure similarity (MIIS) measure between threat infrastructure nodes and present a MIIS measure-based heterogeneous graph convolutional network (GCN) approach to identify the threat types of infrastructure nodes involved in CTI. Moreover, through the hierarchical regularization strategy, our model can alleviate the problem of overfitting and achieve good results in the threat type identification of infrastructure nodes. To the best of our knowledge, this work is the first to model CTI on HIN for threat identification and propose a heterogeneous GCN-based approach for threat type identification of infrastructure nodes. With HinCTI , comprehensive experiments are conducted on real-world datasets, and experimental results demonstrate that our proposed approach can significantly improve the performance of threat type identification compared to the existing state-of-the-art baseline methods. Our work is beneficial to greatly relieve security analysts from heavy analysis work and efficiently protect organizations against cyber-attacks.
SECTION 1Introduction
Nowadays, to obtain the overall picture of the fast-evolving cyber threat situation and protect themselves from the complicated, persistent, organized, and weaponized cyber-attacks, a rising number of organizations across the world are showing an increasing willingness to leverage the open exchange of cyber threat intelligence (CTI) [1]. CTI is evidence-based knowledge about an existing or emerging threat to assets and can be used to inform decisions regarding a subject’s response to the threat [2]. As we know, cyber criminals usually make full use of network infrastructures (e.g., domain names and Internet Protocol or IP addresses) to conduct cyber-attacks. The Pyramid of Pain model [3] indicates six levels of threat indicators for detecting attack activities, and the lower three levels are file hashes, IP addresses, and domain names. These three levels are atomic indicators and can be consumed by network security devices such as intrusion detection system (IDS), firewall, and spam filters on email servers. Through the application program interfaces (APIs) provided by the threat intelligence sharing platforms (TISPs), users can acquire huge amounts of CTI about file hashes, IP addresses, and domain names (i.e., the lower three levels of the Pyramid of Pain model that are the focus of this study). Generally, diverse intelligence sources can help depict cyber-threat infrastructure nodes from different perspectives. For instance, a domain name can be described with information not only from commercial CTI sources such as IBM X-Force Exchange Platform1 and ThreatBook2 but also from the related datasets such as passive domain name system (DNS) and domain name blacklist. Facing increasingly sophisticated cyber-attacks, modeling CTI provides numerous advantages [4], [5], [6], [7], such as obtaining a full picture of the fast-evolving cyber threat situation and unveiling potential groups that are behind specific attacks. Take domain name infrastructure nodes as an example, the threat types of domain names can be spam URLs, brute force login attacks, malware activity, and botnet node activity. Identifying the threat types of infrastructure nodes not only benefits the fine-grained threat warning but also facilitates targeted defensive measures. Note that we only consider CTI represented in structured data in this research. The extraction of structured data from unstructured data such as security technique reports is another important research direction [8], [9].

1.1 Motivation
The modeling of CTI and the threat type identification of infrastructure nodes should undoubtedly be the most fundamental requirements for any cyber threat defense and warning system. In the past few years, academic and industry communities in the fields of cybersecurity and data mining have been attracted to this topic, and many state-of-the-art studies have been carried out, such as [7], [10], and [11]. Some of them are very creative and elaborate, but most of them face the following two key limitations that must be solved.

First, few studies have focused on the problem of limited threat type labels of infrastructure nodes involved in CTI. Owing to the high cost of manual labeling, the threat labels of cyber-threat infrastructure nodes is incomplete in the CTI database, and the labels are annotated with threat types by intelligence providers or security analysts [11]. Thus, how to accurately and effectively learn from the limited labeled infrastructure nodes and a large number of relationships among them to predict the threat types of unlabeled nodes is a paramount concern and key task for most security analysts and operators [11].

Furthermore, few studies have focused on the higher-level semantic relations among cyber-threat infrastructure nodes from the perspective of heterogeneous information network (HIN) [12]. In a large-scale CTI sharing environment, graph-based automatic analysis has attracted significant research efforts in recent years [5], [10], [13]. However, most of these works primarily focus on homogeneous information networks or bipartite graphs, which cannot discover the higher-level semantic relations among different types of nodes. As a special type of information network, HIN involves multiple types of nodes or relations, which have different semantic meanings. Such complex and semantically enriched information networks have great potential for knowledge discovery [14], [15]. However, the application of HIN in CTI mining is largely unexplored. Although some works have considered multiple types of nodes and relations, they have not considered higher-level semantics. Modeling CTI on HIN can provide an efficient and compact representation of linked cyber-threat infrastructure nodes in various semantics, such as capturing the complex relations among different types of infrastructure nodes, distinguishing different cyber-attacks based on the differences of network behaviors, and exploring how adversaries organize campaigns and adapt their techniques. Thus, a practical model for CTI on HIN, which leverages network correlations for better mining of CTI, should be further explored to relieve security analysts from heavy analysis work [16].

1.2 Our Contributions
To the best of our knowledge, we are the first to simultaneously design a HIN for CTI modeling, and propose a meta-path and meta-graph instances-based threat infrastructure similarity (MIIS) measure-based heterogeneous graph convolutional network (GCN) approach for threat type identification of cyber-threat infrastructure nodes. The main innovations of our mechanism go beyond those of existing approaches in terms of the following three aspects:

A CTI Modeling Approach Based on HIN is Proposed From the Perspective of Computation (Meta-Path and Meta-Graph Instances-Based Computing). By modeling CTI based on HIN, the proposed framework can not only integrate infrastructure nodes involved in CTI in a semantically meaningful way, including domain name, IP addresses, malware hashes, email addresses, and their relations but also extract and incorporate higher-level semantics of infrastructure nodes.

A MIIS Measure-Based Heterogeneous GCN Approach is Proposed to Identify the Threat Types of Infrastructure Nodes. We define a MIIS measure between threat infrastructure nodes, and present a MIIS measure-based heterogeneous GCN approach to identify the threat type of infrastructure nodes. Through hierarchical regularization, the approach can alleviate the problem of overfitting and achieve good results in the threat type identification of infrastructure nodes. This research can also promote cyber security investigations with partial or incomplete information.

A Practical System Called HinCTI is Developed for Modeling Cyber Threat Intelligence and Identifying Threat Types. With the system, we conduct comprehensive experiments on real-world datasets, and experimental results demonstrate that our proposed approach can significantly improve the performance of threat type identification compared with the existing state-of-the-art baseline methods.

These innovative designs collectively make HinCTI an efficient solution that can be used in the complex cyber security environment. A series of comprehensive experiments based on the real-world cyber-threat data from IBM X-Force Exchange Platform and other sources are conducted to evaluate the effectiveness and efficiency of the proposed approach. Experimental results demonstrate the superiority of the proposed approach by comparison with the state-of-the-art baseline methods.

The rest of the paper is organized as follows. Section 2 discusses the related work. Section 3 depicts the modeling of CTI on HIN, presents preliminary concepts, and gives an overview of the system architecture. Section 4 gives a detailed description of the proposed heterogeneous GCN-based threat type identification approach. Section 5 describes the experiments and performance results of the proposed approach by comparison with the state-of-the-art baseline methods. Section 6 summarizes the paper and outlines future work.

SECTION 2Related Work
The main contributions of our mechanism benefit from many existing representative work. In this section, we first review the typical work of modeling of CTI. We then analyze the graph-based threat identification and the network representation learning for threat identification.

2.1 Modeling of CTI
From the perspective of CTI sharing, numerous exchange formats, such as Structured Threat Information eXpression (STIX) [17], Incident Object Description and Exchange Format (IODEF) [18], and OpenIOC [19], are proposed to describe security incidents and observations related to attack campaigns. However, STIX, IODEF, and OpenIOC are not used for computational purposes. To extract and incorporate higher-level semantics of infrastructure nodes, CTI must be modeled from the perspective of computation.

The modeling of CTI based on multiple intelligence sources (e.g., IBM X-Force Exchange, and ThreatBook) can be very beneficial to discover the correlations among various cyber-attack events, facilitate the analysis of cyber attacks, and obtain a complete visibility across Kill Chain phases [20]. For instance, referring to IP and DNS registration information can be useful for malware database, and referring to malware database entries is useful for IP and DNS blacklists wherever appropriate. Likewise, a vulnerability database can refer to any malware samples, which exploit that vulnerability, and vice versa. Modi et al. [4] proposed an automated CTI fusion framework called ATIS, which considers multiple threat sources and connects apparently isolated cyber events. Gascon et al. [21] proposed MANTIS, a platform for CTI that provides a unified presentation for numerous standards and correlates threat data from different sources through a novel type-agnostic similarity algorithm based on attributed graphs. However, the similarity algorithm only considers the similarity of fingerprints (hash values) of any two objects, and the available higher-level semantics (indirect relations involving other types of nodes) are totally neglected. Boukhtouta et al. [5] presented an approach to investigate cyber-threats, in which tens of types of nodes are considered. However, the higher-level semantics among infrastructure nodes are not further analyzed.

Researchers have proposed approaches to automatically extract nodes and relations from unstructured CTI text, such as tweets, blogs, and forums [8], [9]. Liao et al. [8] proposed an approach to automatically extract Indicators of Compromises (IoCs) from blog posts in natural language. They model the problem as graph similarity problem and identify the IoC item if it has a similar graph structure as the training set. However, the identified IoCs do not preserve their roles in a malicious campaign, which makes analyzing the characteristics of campaign in different stages and correlating with field measurements difficult. Husari et al. [9] proposed TTPDrill, leveraging natural language processing (NLP) and information retrieval (IR) to extract threat actions from unstructured CTI text. However, we do not focus on the extraction of nodes and their relations from unstructured text, and we simply utilize the extraction results.

2.2 Graph-Based Threat Identification
Graph-based threat identification is an important research approach in the fields of network security and data mining, and it offers the characterization of the interaction between infrastructure nodes and the identification of influential entities and groups. By leveraging the linkage information between infrastructure nodes of interest, graph-based methods can uncover the potential relationships, which are relatively harder for attackers to evade because making a cyber attack unavoidably generate plenty of links in the graph [22].

In recent years, a number of innovative graph-based threat identification methods have been developed for cyber security. However, existing research heavily focuses on homogeneous information networks, which can only perform simple correlation analysis. Manadhata et al. [13] leveraged graph inference and adapted belief propagation to detect malicious domain names. However, only the host-domain graph is constructed, and ignoring IP-domain graph and other informative graphs greatly hinders the accuracy of identification. Shi et al. [23] proposed a malicious domain name identification approach based on extreme machine learning (ELM), in which construction-based, IP-based, TTL-based, and Whois-based features are extracted to characterize a domain name and fed into ELM. However, ignoring relationships among different types of infrastructure nodes can greatly reduce the performance of identification. Some scholars developed an ontology for cyber security knowledge graphs to represent the rich relations between cyber entities [24], [25], [26]. However, the approach requires a significant amount of work to build and is somewhat difficult to use. In our previous work [27], we proposed a graph mining-based trust evaluation mechanism with multidimensional features for heterogeneous CTI. In this paper, we further analyze the higher-level relationship between heterogeneous infrastructure nodes and study the infrastructure nodes in a complex and semantically enriched HIN, which is simple to build and use.

Topic modeling techniques such as Latent Dirichlet Allocation (LDA) have been widely used for automatically identifying the topics of large amounts of source code whose purposes are unknown [28], [29]. Samtani et al. [30] applied classification and topic modeling techniques to explore the functions and characteristics of assets in hacker forums. In [31], the authors proposed AZSecure Hacker Assets Portal, in which LDA is utilized on online hacker forum source code to identify major hacker code topics. In [32], the authors leveraged topic modeling to analyze hacker community source code and explore emerging hacker assets and key hackers for proactive CTI. Given that we only consider CTI represented in structured data in this research, topic modeling-based approaches, which are usually used for textual data, are unsuitable for this task. The extraction of structured data from textual data has been studied, e.g., [8], [9]. Log analysis techniques are widely used in threat identification, such as analysis of DNS log data for detecting malicious domain names [33], [34] and analysis of system audit logs for finding entry point of an attack [9]. Pei et al. [35] presented HERCULE, which conducts community discovery on logs from multiple systems to reconstruct a complete, intuitive, and human-understandable attack story. However, the aim of our research is a re-mining of CTI data for threat identification, which is quite different from log analysis-based anomaly detection.

2.3 Network Representation Learning for Threat Identification
Network representation learning, i.e., network embedding, aims to embed network into a low dimensional space while preserving the network structure and property so that the learned embedding can be easily applied by machine learning techniques. Recently, many efficient network embedding methods have been proposed to address representation learning problem for homogeneous network, such as DeepWalk [36], Node2Vec [37]. Compared to the widely studied homogeneous information network, the heterogeneous properties of HIN (i.e., containing multiple types of nodes or links) make directly apply homogeneous techniques for HIN representation learning difficult. To tackle this challenge, Dong et al. [38] proposed Metapath2Vec, which designs a meta-path-based random walk and utilizes skip-gram to perform heterogeneous graph embedding. However, Metapath2Vec can only utilize one meta-path and may ignore useful information. Fu et al. [39] proposed HIN2Vec to explore meta-paths in HINs for representation learning. Graph neural network (GNN) [40], [41] is proposed to extend the deep neural network to deal with arbitrary graph-structured data. Wang et al. [42] proposed heterogeneous graph attention network (HAN) to handle heterogeneous graph, considering node-level and semantic-level attentions. Compared to the research on areas such as bibliographic networks (classifying and clustering author and paper nodes) [38] and recommendation systems [43], [44], network representation learning has only recently been applied to the research on cybersecurity such as [45], [46].

SECTION 3CTI Modeling
In this section, we first define the problem of modeling CTI on HIN. We then introduce preliminary concepts. Finally, we give an overview of the system architecture.

3.1 CTI Modeling Based on HIN
The definition and characterization of “CTI” have received substantial attention across academic communities, including network security [10] and data mining [11], [27]. A piece of CTI generally refers to cyber-attack-related evidence, involving a group of different types of threat infrastructures, such as malicious IP addresses, malicious domain names, malware hashes, and malicious email addresses. We name the above infrastructures as threat infrastructure nodes. Relationships exist between threat infrastructure nodes, including relationships between nodes of the same type and between nodes of different types, i.e., relationships between domain names, relationships between IP addresses, relationships between malware hashes, relationships between email addresses, and relationships among them. We name the above relationships as threat infrastructure relations.

Through the APIs provided by threat intelligence providers, including open-source communities such as IoC Bucket3 and commercial CTI service providers such as ThreatBook, we can derive huge amounts of relations (i.e., domain-IP, domain-malware, IP-malware, domain-email, and IP-email) among different types of threat infrastructure nodes (i.e., domain names, IP addresses, email addresses, and malware hashes) to construct the cyber threat intelligence HIN. As for the relations between nodes of the same type, we extract related information from various sorts of external sources to enrich the context of threat infrastructure nodes. As shown in Fig. 1, the direct relations between two domain names can be enriched by domain-related service, such as from Whois4 database to get relations of co-owner, co-organization, co-location of DNS, and co-registrar. The direct relations between two IP addresses can be enriched by IP-related service, such as from IP2Location5 service to get relation of having the same internet service providers (ISPs). The direct relations between two malware hashes can be enriched by open-source malware analysis tools, such as from Common Vulnerabilities and Exposures (CVE) database to get relations of exploiting the same vulnerability. The direct relations between two email addresses can be enriched by the relation of same host name.


Fig. 1.
Examples of two cyber threat intelligence instances involving different types of threat infrastructure nodes and edges.

Show All

After extracting the above threat infrastructure nodes and threat infrastructure relationships from CTI instances and external sources, we can build a cyber threat intelligence HIN, as shown in Fig. 1, which contains four types of threat infrastructure nodes, i.e., malware hashes, IP addresses, domain names, and email addresses. The threat intelligence can be regarded as a group of threat infrastructure nodes and threat infrastructure relationships that can contribute to explain the relationship between various types of nodes. Thus, a piece of threat intelligence instance can be treated as a subgraph of the whole HIN. One particular advantage of HIN is that meta-paths (defined in Section 3.2) and meta-graphs (defined in Section 4.2) defined over node types can reflect semantically meaningful information about similarities and, thus, can naturally provide explainable results for threat analysis and identification. For instance, a relation between two domain names can be revealed by meta-path Domain-Malware-Domain, which describes two domain names are visited by the same malware, or by meta-path Domain-Email-Domain which describes two domain names registered by the same email address.

3.2 Preliminaries
Definition 1 (Cyber-Threat Infrastructure Nodes[5]):
As cybercriminals usually make full use of network resources to conduct their malicious activities, we define that cyber-threat infrastructure nodes consist of IP addresses, domain names, malware hashes, and email addresses.

The collected CTI from intelligence providers is generally in the form of hash values of malwares, malicious IP addresses and malicious domain names. Thus, we only consider the lower-level basic CTI and represent them as a HIN in this paper. The nodes in the graph represent cyber-threat infrastructures, i.e., domain names, IP addresses, malware hashes, and email addresses. In this paper, we investigate how to leverage the HIN to facilitate the mining of CTI datasets.

Definition 2 (HIN [47]):
A HIN is a graph G=(V,E) with a node type mapping ϕ:V→A and a relation type mapping ψ:E→R, where V denotes the node set, and E denotes the link set. A denotes the node type set, and R denotes the relation type set, where the number of node types |A|>1 or the number of relation types |R|>1.

Fig. 1 gives an example of two CTI instances connected with different types of nodes and relationships. After given a complex HIN for CTI modeling, describing its meta-level (i.e., schema-level) is necessary for better understanding.

Definition 3 (Meta-Schema (or Network Schema)):
Given a HIN G=(V,E) with the node type mapping ϕ:V→A and the relation type mapping ψ:E→R, the meta-schema (or network-schema) for network G, denoted as TG=(A,R), is a graph with nodes as node types from A and edges as relation types from R.

As described in Fig. 2, CTI modeling involves four types of nodes (i.e., domain names, IP addresses, malware hashes, and email addresses), and five types of relations among different types of nodes (i.e. R, S, G, C, N, as shown in Table 2). Fig. 2c shows an example of the HIN meta-schema characterizing the relationships of threat infrastructures described in CTI. Another important concept of HIN is meta-path defined over types, which can formulate the semantics of higher-level relationships among nodes and, thus, can naturally provide explainable results for threat infrastructure modeling. Here, we follow this concept and extend it to our HinCTI model.

TABLE 1 Notations and Their Descriptions

TABLE 2 Descriptions of Relation Matrices


Fig. 2.
CTI modeling based on HIN. (a) Four types of nodes (i.e., Domain Name (D), IP Address (I), Malware Hash (M), Email Address (E)). (b) The cyber threat intelligence HIN consists of four types of nodes and five types of relationships. Five different colored lines represent five distinct relations among various types of nodes. (c) Meta-schema of cyber threat intelligence HIN. (d) Examples of meta-paths and meta-graphs involved in HinCTI (e.g., domain-malware-domain, domain-IP-domain).

Show All

Definition 4 (Meta-Path [47]):
A meta-path P is a path defined on the graph of network schema TG=(A,R) and is denoted in the form of A1−→R1A2−→R2…−→RdAd+1, which defines a composite relation R=R1⋅R2⋅…⋅Rd between node types A1 and Ad+1, where symbol ⋅ denotes the composition operator on relations, and d is the length of P.

In general, a meta-path corresponds to a type of path within the network schema, containing a certain sequence of link types. For simplicity, we use object types connected by symbol “,” to denote the meta-path when there is only one relationship between a pair of types: P=(A1,A2,…,Ad+1). If ∀l,ϕ(vl)=Al and edge el=⟨vl,vl+1⟩ belongs to relation type Rl∈P, then a meta-path instance p=(v1,v2,…,vd+1) between v1 and vd+1 in network G follows the meta-path P=(A1,A2,…,Ad+1). We further introduce semantically meaningful meta-paths that describe infrastructure node relations in Section 4.2.

The literature gives many definitions of the term “threat type identification”, and they vary from team to team and from project to project. Here, we give a clear definition for describing the purpose of the paper as follows [48].

Definition 5 (Threat Type Identification):
For the collected cyber-threat infrastructure nodes without threat labels, threat type identification means to identify their threat type labels by the constructed heterogeneous GCN-based threat type identification model, leveraging those cyber-threat infrastructure nodes with threat labels and the relations among them.

On the threat intelligence sharing platforms, a large number of threat-infrastructure nodes are without threat labels, which is incomplete for CTI consumers. Thus, predicting the threat types of nodes without threat labels leveraging the threat-infrastructure nodes and their relations involved in the large amount of basic CTI is of great significance.

3.3 System Architecture
The architecture of our proposed CTI modeling and identification system based on HIN, called HinCTI, is shown in Fig. 3, which mainly consists of the following four modules:

CTI Modeling Based on HIN. Through the APIs provided by various CTI providers, we can obtain a large amount of valuable CTI, involving massive threat infrastructure nodes and relationships among them. In cyber threat intelligence HIN, the more context information correlates with nodes, the more conducive for CTI analysis. Thus, to enrich the context of infrastructure nodes, we extract information from external databases to establish relations between nodes of the same type and different types, e.g., “Whois” database for both domain name and IP nodes, “CVE” database for malware nodes, and “Passive DNS” database for both domain name and email address nodes. In this way, cyber threat intelligence HIN is constructed to depict the relationships among various types of infrastructure nodes.

Feature Extractor and Meta-Path and Meta-Graph Builder. Based on the meta-schema designed for cyber threat intelligence HIN, we build a set of meta-paths and meta-graphs to capture the higher-level relatedness over infrastructure nodes from different semantic meanings.

Heterogeneous GCN-Based Threat Type Identification. We first extract infrastructure node features and generate node feature matrix X. Then, meta-graph based adjacent matrices are aggregated to obtain the weighted adjacent matrix B. Finally, we leverage heterogeneous GCN to fuse X and B to learn the threat types of cyber-threat infrastructure nodes.

Threat Type Identifier. For each newly collected unknown threat infrastructure node, the node features will be first extracted, then its related infrastructure nodes will be extracted from external sources. The relationships among these infrastructure nodes will be further analyzed. Based on the extracted features and the constructed heterogeneous GCN-based threat type identification model, the threat type of the infrastructure node will be labeled by the threat identifier. Based on the identified threat type label, security analysts can give early warning and adopt defensive strategies.


Fig. 3.
System architecture of the proposed HinCTI. (1) Modeling of CTI on HIN, and generation of cyber threat intelligence HIN. (2) Extraction of node features and designing of a set of meta-paths and meta-graphs based on cyber threat intelligence HIN. (3) The node feature matrix X and the MIIS measure-based adjacent matrix B of domain name infrastructure nodes are the inputs of the heterogeneous GCN model. (4) The heterogeneous GCN model predicts the threat types of domain name infrastructure nodes, such as spam, and botnet C&C server. The threat type identification results of infrastructure nodes can be used for giving early warning and adopting defensive strategies. Note that the threat type identification task of different types of nodes (i.e., D, I, M, and E) in HinCTI are carried out separately, and we take the domain name infrastructure node (i.e., D) as an example.

Show All

SECTION 4Proposed Threat Type Identification Approach
In this section, we first introduce feature extraction, followed by the building of meta-paths and meta-graphs. We then describe the heterogeneous GCN-based threat type identification approach, and finally depict how the hierarchical regularization strategy alleviate the problem of overfitting. As CTI about domain names is more static and efficient than other types of infrastructure nodes in cybersecurity [3], we specifically focus on the threat type identification of domain name infrastructure nodes. Before the detailed description of the proposed approach, we first list key notations and their descriptions in Table 1.

4.1 Feature Extraction
Node Features. Domain names are frequently used by attackers to keep in touch with server. The malicious domain names have different attributes compared with benign domain names. Legitimate web owners choose a succinct domain name so that users can remember it better, whereas malicious domains are usually generated by domain name generation algorithm (DGA) in batches. That is, the average length of malicious domain names is longer than that of benign domain names [49]. Regarding the information entropy of distribution of alphanumerics within a domain name, the entropy is an expression of the disorder, and the higher the entropy, the more chaotic the distribution [50]. The character distribution of Domain-Flux based malicious domain names is usually chaotic [50]. Thus, we choose the length and information entropy of domain name as the character-based features in the threat type identification of domain names.

The active time of domain names for malicious purpose is considered short [23]. Whenever old domain names are deactivated by authorities, attackers register new ones rapidly and employ them for malicious purpose before they are detected and blocked by authorities, which typically makes the life time of malicious domain name much shorter. By contrast, benign web owners usually register their domain names for long-term business. Thus, we define the active time of domain name as the interval (counted in days) between registration expiration date and creation date based on the Whois data. Moreover, given that a legitimate domain name is frequently queried by users, owners of legitimate domain names will promptly update their Whois information to ensure the domain names serve users well. To the contrary, owners of malicious domain names do not update Whois information, and their update frequency is lower than that of owners of benign domain names. Following, we take the active time and update frequency of domain name as the time-related node features.

Relation-Based Features. Although node features of a domain name can be used to reflect their behaviors and detect malicious domain names like “amazon-gst-sale.com”, the intrinsic and complex relationships between it and its associated malwares can provide more critical information the identification. The relationships extracted among the nodes can provide a higher level of representation than that of the simple statistics, which requires more efforts for attackers to evade the detection. The area of attack will be greatly reduced if the attackers reduce communication with the related malwares, domain names, and IP addresses. Thus, to analyze the increasingly sophisticated malicious domain names, we consider not only the node features, but also the relationships summarized in Table 2, in which “element” denotes the element in the related relation matrices.

R: To describe the relation between a domain name and the IP address it resolved to, we build the domain-resolvedTo-IP matrix R where each element rij∈{0,1} means if domain i is resolved to IP address j.

S: To represent the relation between a malware and a domain name, we generate the domain-visitedBy-malware matrix S where each element sij∈{0,1} denotes whether domain name i is visited by malware j.

G: To describe the relation between a domain name and an email address, we generate the domain-registeredBy-email matrix G where each element gij∈{0,1} denotes if domain name i is registered by email address j.

C: To denote the relation that an IP address communicates with malware, we generate the IP-communicateWith-malware matrix C where each element cij∈{0,1} denotes if IP address i has communicated with malware j.

N: To represent the relation that an IP address connects to an email address, we generate the IP-connectTo-email matrix N where each element nij∈{0,1} denotes whether IP address i has connected to email address j. Note that matrix RT, ST, GT, CT,and NT represent the transposed matrix of R, S, G, C, and N, respectively.

4.2 Meta-Path and Meta-Graph Builder
Although meta-path can be used to depict the correlations between nodes, it fails to capture a more complex relationship. Meta-graph [51] is proposed to use a directed acyclic graph of nodes to handle more complex relationship between HIN nodes, which can be defined as follows:

Definition 6 (Meta-Graph [51]):
A meta-graph Φi is a directed acyclic graph with single source node ns and single target node nt, defined on a HIN G=(V,E) with schema TG=(A,R). Formally, a meta-graph is defined as Φi=(VΦi,EΦi,AΦi,RΦi,ns,nt), where VΦi⊆V and EΦi⊆E are constrained by AΦi⊆A and RΦi⊆R, respectively.

As depicted in Fig. 4, different meta-paths and meta-graphs characterize the relatedness over threat infrastructure nodes from different aspects, i.e., with varying semantic meanings. For instance, meta-path Φ1 depicts the relatedness over threat infrastructures through the domain-IP relations (i.e., two domain names are both resolved to the same IP address). Meta-path Φ2 describes the relatedness over infrastructure nodes through the domain-malware relations (i.e., two domain names are both visited by the same malware). Meta-graph Φ11 depicts the relatedness over threat infrastructures from a more comprehensive view which incorporates both external and intrinsic connections. That is, in meta-graph Φ11, two domain names are connected as they are both visited by the same malware (external connection), and their resolved IP addresses not only connect to the same email address but communicate with the same malware (intrinsic connection).


Fig. 4.
Meta-paths and meta-graphs designed for threat type identification of domain name infrastructure nodes. The symbol D stands for domain name, I stands for IP address, M stands for malware hash, and E stands for email-address.

Show All

In our approach, to detect the threat types of infrastructure nodes, meta-path and meta-graph are jointly considered to capture the complex relatedness among infrastructure nodes which is more expressive than pure meta-path-based or pure meta-graph-based approaches. Different meta-paths and meta-graphs measure the relatedness between two infrastructure nodes from different views. That is, the more meaningful meta-paths and meta-graphs enumerated by the meta-schema, the higher accuracy of the similarity measure is. To detect the threat type of domain name infrastructure nodes, based on the meta-schema described in Fig. 2c and the domain knowledge of human experts in the field of cyber security, we enumerate 12 meaningful symmetric meta-paths and meta-graphs (i.e., Φ1–Φ12 shown in Fig. 4) over different lengths to characterize the relatedness over domain name infrastructure nodes.

4.3 Heterogeneous GCN-Based Threat Type Identification
After extracting the features of infrastructure nodes and designing the meaningful meta-paths and meta-graphs depicted in the previous subsections, we introduce the proposed MIIS measure-based heterogeneous GCN approach to identify the threat types of infrastructure nodes involved in CTI. This heterogeneous GCN, which simultaneously integrates node features and meaningful meta-path and meta-graph-based similarity adjacency relations, enables the representation of infrastructure nodes in a more comprehensive way. Before the definition of MIIS, we present the definition of number of meta-path and meta-graph instances under Φk, called NumPΦk, as follows:

Definition 7 (:
Num ber of meta- P ath and meta-graph instances under Φk, NumPΦk). Given a network G=(V,E), its network schema TG=(A,R) and a symmetric meta-path or meta-graph Φk, the number of meta-path/meta-graph instances under Φk between two domain name infrastructure nodes vi,vj, denoted as NumPΦk(vi,vj), can be defined as
NumPΦk(vi,vj)=UΦk(vi,vj),(1)
View Sourcewhere UΦk is the commuting matrix between domain name infrastructure nodes under Φk.

As for meta-path Φk=(A1,A2…,Ad+1), its commuting matrix between node type A1 and Ad+1 can be calculated as
UΦk=QA1A2⋅QA2A3⋅…⋅QAdAd+1,(2)
View Sourcewhere QAiAi+1 is the adjacency matrix between type Ai and type Ai+1, and symbol ⋅ represents the matrix multiplication. However, as for meta-graph, the problem of calculating its commuting matrix to get the count of meta-graph instances becomes more complicated. Taking meta-graph Φ10 in Fig. 4 as an example, the two ways to pass through the meta-graph are path (D,I,E,I,D) and path (D,I,M,I,D). Note that D represents the type of domain name infrastructure node in cyber threat intelligence HIN. In the path (D,I,E,I,D), (I,E,I) means that two IP addresses (I) have similarities if they both connect to the same email address (E). Similarly, in the path (D,I,M,I,D), (I,M,I) means that two IP addresses (I) have similarities if they both communicate with the same malware (M). Inspired by [51], we define our logic of similarity when there are multiple ways for a flow passing through the meta-graph from the source node to the target node. When there are multiple paths, we constrain a flow to satisfy all of them, which requires one more matrix operation than simple matrix multiplication, i.e., the Hadamard product (Schur product). Taking meta-graph Φ10 in Fig. 4 as an example, Algorithm 1 depicts how to calculate its commuting matrix, where ⊙ is the Hadamard product and N, C, and R represent the IP-email, IP-malware, and domain-IP adjacency matrices, respectively, as shown in Table 2. After obtaining UPr, it is easier to obtain the whole commuting matrix UΦ10 by the multiplication of a sequence of matrices. In practice, all the meta-paths and meta-graphs (i.e., Φ1–Φ12 shown in Fig. 4) defined in this paper can be computed by multiplication operations and Hadamard product on the corresponding matrices.

As described in Section 4.2, we design 12 meta-paths and meta-graphs (i.e., Φ1–Φ12) with different types of nodes and relations. As different meta-paths and meta-graphs can define different similarities and introduce different higher-level semantics, it is natural to incorporate all useful meta-paths and meta-graphs when identifying the threat type of infrastructure nodes. However, different meta-paths and meta-graphs have varying importance. Treating different meta-paths and meta-graphs equally is unpractical and weakens the semantic information provided by the meaningful meta-paths and meta-graphs. For example, domain name D1 can either connect to domain name D2 via meta-path (D1,E1,D2) (both registered by the same email address E1) or connect to domain name D3 via meta-path (D1,M1,D3) (both visited by the same malware M1). When considering more on the source of threat, meta-path (D,E,D) usually plays a more important role than that of (D,M,D); however, it will be the other way around when considering more on the behavior of threat. Thus, given that different meta-paths and meta-graphs depict the relatedness over threat infrastructures in very diverse ways, to explore the complementary nature of these different aspects, we propose to leverage a meta-path and meta-graph-based weighted adjacent matrix to incorporate different semantics. Here, we define a similarity with weights for any two threat infrastructure nodes vi and vj, which is denoted as MIIS(vi,vj) and defined as follows:

Definition 8 (
MIIS). Given a meta-path and meta-graph set, denoted as Φ={Φk|k=1,2,…,n}, the MIIS measure between two infrastructure nodes vi and vj can be defined as
MIIS(vi,vj)=∑k=1nβk2×NumPΦk(vi,vj)NumPΦk(vi,vi)+NumPΦk(vj,vj),(3)
View Sourcewhere NumPΦk(vi,vj) is the number of meta-path and meta-graph instances between infrastructure nodes vi and vj under Φk, NumPΦk(vi,vi) is that between vi and vi, NumPΦk(vj,vj) is that between vj and vj. We use the parameter vector β=[β1,β2,…,βn] to denote the weights of Φ, where βk is the weight of meta-path/meta-graph Φk and satisfies βk≥0,∑nk=1βk=1.

The MIIS measure is defined from the perspective of two parts: the semantic overlap, which is defined by the number of paths between threat infrastructures vi and vj, and the semantic broadness, which is defined by the number of path instances between themselves (i.e., paths from vi to vi, and paths from vj to vj). The weight vector β, which can be learned automatically, is leveraged to incorporate the meta-path and meta-graph-based node similarities together.

Algorithm 1. Calculation of commuting matrix for MΦ10:
Calculate UP1=QIE⋅QTIE=N⋅NT, where P1 is the subpath (I,E,I);

Calculate UP2=QIM⋅QTIM=C⋅CT, where P2 is the subpath (I,M,I);

Calculate UPr=UP1⊙UP2;

Calculate UΦ10=QDI⋅UPr⋅QTDI=R⋅UPr⋅RT.

After calculating the similarity of any two domain name infrastructure nodes by the MIIS measure, we can construct a matrix B with dimension of N×N, where N is the number of domain name nodes and Bij=Bji=MIIS(vi,vj). According to the description in Section 4.1, we can derive the domain name node feature matrix X with dimension of N×m. Doing so is an obvious way to leverage the popular two-layer GCN [52] architecture to identify the threat types of infrastructure nodes. Here, the category labels represent the threat types of infrastructure nodes. The input of the GCN-based identification model is B and X, with B∈RN×N, X∈RN×m, which contains the m-dimensional original domain name node features. We first calculate B^=D˜−12B˜D˜−12, where B˜=B+IN is the MIIS measure-based adjacency matrix with added self-connections, IN is the identity matrix, and D˜ is diagonal matrix with D˜ii=∑jB˜ij. Then, the forward model takes the following simple form:
Z=f(X,B)=softmax(B^ReLU(B^XW(0))W(1)),(4)
View Sourcewhere ReLU denotes an activation function defined as ReLU(⋅)=max(0,⋅), and the softmax activation function is applied row-wise, which is defined as softmax(xi)=exi/∑jexj. The neural network weights W(0)∈Rm×h is an input-to-hidden trainable weight matrix for a hidden layer with h feature maps; the neural network weights W(1)∈Rh×K is a hidden-to-output trainable weight matrix, where K is the number of threat type labels. Both are trained using gradient descent, and we perform batch gradient descent using the full dataset for every training iteration, which is a viable option as long as datasets fit in memory. Stochasticity in the training process is introduced via dropout [53].

Given a set of threat type labeled threat infrastructures, our model optimizes the cross-entropy H between the true label distribution and the predicted distribution as follows:
H=−∑i∈YL∑k=1K(lk(vi)lnZk(vi)+(1−lk(vi))ln(1−Zk(vi))),(5)
View SourceYL is the set of domain name infrastructure node indices that have labels, K is the number of labels in the hierarchy, lk(vi) is a binary label to indicate whether infrastructure node vi belongs to label k, and Zk(vi) refers to the probability of neural network prediction of label k for infrastructure node vi.

4.4 Hierarchical Regularization
If we simply treat each label as an independent decision, then Eq. (5) can be used directly to train the neural network. However, there is usually a hierarchy structure among the threat type labels, in which a parent label contains several child labels. Fig. 5 shows examples of threat label hierarchy of all threat infrastructure nodes. The parent label “BotNet” contains multiple child labels, such as BruteForce, spam, Command and Control (C&C) server, backdoor, etc. Thus, introducing hierarchical dependencies among labels can improve the performance of threat type identification. That is, when a leaf label (which has no child label in the hierarchical structure) has few training examples, the decision can be regularized by its parent label. Inspired by [54] and [55], we use a hierarchical regularization over the final output layer of GCN model. As a simplification, the hierarchical dependencies among labels encourage the parameters of labels with hierarchical relationships to be similar. For instance, in Fig. 5, there is an edge between labels “BotNet” and “C&C Server”, so the parameters of these two labels tend to be similar to each other.


Fig. 5.
Simplified example of threat label hierarchy of all threat infrastructure nodes, where R2L represents unauthorized access from a remote machine to a local machine and U2R represents unauthorized access to local superuser privileges by a local unprivileged user.

Show All

Formally, we denote the threat type label set as L={li|i=1,2,…,K}, where K is the number of labels. As we focus on the hierarchical relationships of labels, we denote Li={l(j)i|j=1,2,…,Ki} as the child label set of label li where Ki is the number of li’s child labels. We denote W=[wl1,wl2,…,wlK] as the parameters of labels in the final output layer of GCN model, where wli is that of label li. We then use the following hierarchical regularization strategy to regularize the parameters in the final output layer:
λ(W)=∑i=1K∑j=1Ki12||wli−wl(j)i||2.(6)
View SourceFinally, we use the following loss function with hierarchical regularization to optimize the parameters:
J=H+Cλ(W),(7)
View Sourcewhere C is the penalty parameter.

From above, the overall process of HinCTI can be briefly described as Algorithm 2.

Algorithm 2. Overall process of HinCTI:
Input: The heterogeneous graph G=(V,E); meta-path and meta-graph set Φ={Φ1,Φ2,…,Φn}; feature matrix of infrastructure nodes X; the set of node indices that have labels in the training set YL and their labels L={li|i=1,2,…,K}.

Output: Predicted labels of nodes in the testing set.

for Φi∈{Φ1,Φ2,…,Φn} do

Calculate commuting matrix UΦk using Eq. (2) and Algorithm 1;

Calculate the number of meta-path and meta-graph instances using Eq. (1);

end

Calculate MIIS(vi,vj) using Eq. (3), and get B;

Fuse X and B using Eq. (4);

Calculate cross-entropy H←−∑i∈YL∑Kk=1(lk(vi)lnZk(vi)+(1−lk(vi))ln(1−Zk(vi)));

Calculate hierarchical regularization term λ(W)←∑Ki=1∑Kij=112||wli−wl(j)i||2 ;

Calculate loss function J←H+Cλ(W) ;

Back propagation and update parameters in heterogeneous GCN-based threat type identification model;

return The predicted labels of nodes in the testing set.

4.5 Analysis of the Proposed Approach
The proposed HinCTI can deal with various types of infrastructure nodes and relations and fuse rich semantics in a heterogeneous graph. Information can transfer from one type of node to another via diverse relationships. Benefitted from such a cyber threat intelligence HIN, diverse semantics can enhance the threat identification of infrastructure nodes. We then give the analysis of computational complexity of our proposed approach as follows. With regard to MIIS measure, multiplying adjacency matrices of a meta-path/meta-graph in a natural sequence way can be inefficient. However, the classic matrix chain multiplication problem can be optimized by dynamic programming [56] in O(d3), where d is the length of a meta-path/meta-graph which is usually very small. With regard to GCN training, inspired by [52], we leverage TensorFlow [57] for an efficient GPU-based implementation of Eq. (4) using sparse-dense matrix multiplications. The computational complexity of evaluating Eq. 4 is O(|ε|mhK), which scales linearly in terms of the number of graph edges denoted as |ε|.

SECTION 5Experiments
In this section, we conduct comprehensive experimental studies to demonstrate the effectiveness of the presented practical system HinCTI, which integrates the above proposed approach.

5.1 Experimental Setup
Datasets. We collect real-world data from two popular threat intelligence sharing platforms, namely, IBM X-Force Exchange Platform and VirusTotal6, and enrich the data as described in Section 3.1. Although the collected data set involves 126,933 infrastructure nodes, only 11,340 nodes are left after preprocessing due to crawler constraints and data sparsity.

Labels for 10,833 infrastructure nodes are crawled from the intelligence companies, and the remaining 507 unlabeled infrastructure nodes are labeled by three recruited security researchers with the help of third-party analysis tools. The statistics of the evaluation datasets is described in Table 3, including number of nodes for train, validation, and test and number of classes (i.e., number of threat types) for different types of infrastructure nodes.

TABLE 3 Statistics of the Evaluation Datasets

Baselines. We compare our proposed approach with the following baselines, including state-of-the-art network representation learning methods and several traditional threat type identification methods.

Node2Vec [37] + SVM: A random walk-based network embedding method for homogeneous graphs. Here, we use p=1 and q=1 and ignore the heterogeneity of nodes and perform Node2Vec on the whole heterogeneous graph.

Metapath2Vec [38] + SVM: A heterogeneous graph embedding method, which performs meta-path-based random walk and utilizes skip-gram to embed the heterogeneous graphs. Here we test all the meta-paths and report the best performance.

HAN [42] + SVM: A semi-supervised heterogeneous graph neural network, which considers node-level attention and semantic-level attention to learn the importance of nodes and meta-paths, respectively.

HinCTI-: The HinCTI model that does not consider hierarchical regularization.

Evaluation Metrics. To quantitatively evaluate the threat type identification performance of different methods, we follow [54] to use Macro-F1 score and Micro-F1 score as our evaluation metrics. The metrics involved in performance evaluation are shown in Table 4. We apply 10-fold cross-validation and report the average performance measures in terms of Macro-F1 and Micro-F1 scores with significance level α=0.05. Macro-F1 is a type of F1 score that evaluates averaged F1 of all different labels in the hierarchy. Let TPt, FPt, FNt denote the true-positives, false-positives, and false-negatives for the tth label in label set L respectively. Macro-F1 can be defined as:
Macro-F1Precisiont=1|L|∑t∈L2×Precisiont×RecalltPrecisiont+Recallt,=TPtTPt+FPt,Recallt=TPtTPt+FNt.(8)
View Source

TABLE 4 Metrics Involved in Performance Evaluation of Threat Type Identification Methods

Micro-F1 is another type of F1 score that considers the overall precision and recall of all labels. Micro-F1 can be defined as:
Micro-F1PrecisionRecall=2×Precision×RecallPrecision+Recall,=∑t∈LTPt∑t∈LTPt+∑t∈LFPt,=∑t∈LTPt∑t∈LTPt+∑t∈LFNt.(9)
View Source

Based on the experimental setup described, we conduct experiments of threat type identification of infrastructure nodes on the operating system Ubuntu 18.04.2, Intel(R) Core(TM) i5-6600K CPU@ 3.50GHz and NVIDIA GeForce GTX 1080 Ti GPU. The software platforms are TensorFlow-gpu 1.13.1 and Python 3.7.3.

5.2 Evaluation of Different Meta-Paths and Meta-Graphs
In this set of experiments, based on the dataset described in Section 5.1, we evaluate the performance of different correlations among threat infrastructures depicted by different meta-graphs (i.e., Φ1–Φ12). In the experiments, given a meta-graph Φk, we calculate the Φk based on MIIS measure described in Section 4.3 and leverage hierarchical regularization described in Section 4.4 to learn the threat type label of the nodes with type of domain names in the HIN. The optimal identification results of different meta-graphs are presented in Table 5. Different meta-graphs show different performances in threat type identification. Each of them represents a specific semantics in the task of threat type identification.

TABLE 5 Performance Evaluation of Different Meta-Paths and Meta-Graphs

From Table 5, we can also observe that: (1) some meta-paths, e.g., Φ4, perform well on the testing set, whereras other meta-paths do not perform well on their own, such as Φ5, which may be because the semantics of the meta-path cannot reflect the problem of threat type identification of infrastructure nodes well. (2) The approach based on meta-graph is generally more expressive than that based on pure meta-path in terms of depicting more complex and comprehensive relationships among nodes and thus achieve better identification performance. a) The performance of Φ10, which integrates Φ6 and Φ7, outperforms that of both Φ6 and Φ7. b) The relationships among nodes depicted by the meta-graphs consisting of complicated correlations (e.g.,Φ10–Φ12) can provide much higher-level semantics and obtain better identification results than others (e.g., Φ1-Φ3). Exploring the performance when different meta-paths and meta-graphs are incorporated together for the identification is meaningful, which is evaluated in the next set of experiments.

5.3 Performance Evaluation of HinCTI
In this set of experiments, we evaluate our proposed approach HinCTI by comparisons with several typical network representation learning methods combined with the SVM algorithm (i.e., Node2Vec [37] + SVM, Metapath2Vec [38] + SVM, and HAN [42] + SVM) and HinCTI-. For node2vec, we ignore the heterogeneous property of HIN and directly feed the HIN for representation learning. For metapath2vec, we test meta-path Φ1-Φ7 to guide the random walks in metapath2vec and report the best performance. For node2vec and metapath2vec, which are random walk-based methods, we set window size to 5, walk length to 100, and walks per node to 500. To facilitate the comparisons, we use the experimental procedure provided in [37], [42] and implement the algorithm according to the description of [38]. For a fair comparison, the dimension of embedding is set to 64. The learned node representation vector and node features are input of SVM algorithm to identify the threat types of infrastructure nodes.

We randomly select a portion of the samples described in Section 5.1 (ranging from 10 to 80 percent) as the training set, 10 percent of samples as validation set, and the remaining 10 percent of samples as the testing set. Fig. 6 shows the comparison results of HinCTI and several typical network representation learning methods in the task of threat type identification of infrastructure nodes in terms of Macro-F1 score (left) and Micro-F1 score (right). On the whole, the proposed model HinCTI consistently and significantly outperforms all these typical network representation learning methods: an improvement of approximately 4–11 percent in Macro-F1 and 3–10 percent in Micro-F1. That is, HinCTI can identify the threat type of infrastructure nodes better than those of the existing state-of-the-art network representation learning methods. The success of HinCTI lies in the proper consideration and accommodation of the heterogeneous property of HIN (i.e., the multiple types of nodes and relations) and the advantage of meta-path and meta-graph-guided similarity computing for infrastructure nodes.


Fig. 6.
Performance comparisons of different threat type identification approaches in terms of Macro-F1 score (Left) and Micro-F1 score (Right).

Show All

In addition, as shown in Fig. 6, we compare HinCTI (the red line) and HinCTI- (the green line). HinCTI, which considers hierarchical regularization, consistently achieves approximately 1 percent improvement in terms of both Macro-F1 and Micro-F1, which can demonstrate the effectiveness of hierarchical regularization leveraged in our system.

Furthermore, from Table 5 and Fig. 6, we observe that compared with any node representations learned based on individual meta-path or meta-graph (i.e., Φ1–Φ12), the proposed HinCTI, which efficiently incorporates different meta-paths and meta-graphs together and learns higher-level semantics of node representations, can significantly improve the performance of threat type identification of infrastructure nodes: an improvement of more than 6 percent in Macro-F1 and Micro-F1.

5.4 Comparisons Among HinCTI and Traditional Identification Methods
In this set of experiments, we compare HinCTI with four other typical identification methods, i.e., Naive Bayes (NB), Decision Tree(DT), Support Vector Machine (SVM), and K-Nearest Neighbors (KNN). In NB-1, DT-1, SVM-1, and KNN-1, we take the original node features discussed in Section 4.1 as input. In NB-2, DT-2, SVM-2, and KNN-2, we put all HIN-related nodes and relations as features for algorithms to learn.

All the algorithms are implemented in Python and trained and executed with best parameter values. For SVM, we use GridSearchCV in sklearn to obtain the best combination of parameters.

The experimental results are shown in Fig. 7. The proposed HinCTI significantly outperforms all these traditional identification methods. Compared to the performance results of NB-1, NB-2 achieves roughly 7–9 percent improvements in Macro-F1 and Micro-F1. Compared to the performance results of DT-1, DT-2 achieves around 6–8 percent improvements in Macro-F1 and 5–8 percent in Micro-F1. Compared to the performance results of SVM-1, SVM-2 achieves approximately 5–7 percent improvements in Macro-F1 and 4–7 percent in Micro-F1. Similarly, compared to the performance results of KNN-1, KNN-2 achieves nearly 4–6 percent improvements in Macro-F1 and 6–7 percent in Micro-F1. That is, HIN-related nodes and relations leveraged by machine learning methods can help improve the performance of threat type identification of infrastructure nodes, which demonstrates that rich semantics encoded in different types of relations can bring more information.


Fig. 7.
Performance comparisons among HinCTI and traditional identification methods on Macro-F1 score (Left) and Micro-F1 score (Right). “NB-1”, ‘DT-1‘”, “SVM-1”, and “KNN-1” represent the algorithms that take the original node features as input. “NB-2”, ‘DT-2‘”, “SVM-2”, and “KNN-2” represent the algorithms that HIN-related nodes and relations are also leveraged as features for algorithms to learn.

Show All

Moreover, compared to the performance results of NB-2, DT-2, SVM-2, and KNN-2, HinCTI achieves approximately 10–20 percent improvements in Macro-F1 and 11–19 percent in Micro-F1. HinCTI is significantly better than the best baseline methods we compared. The reason is that the inputs of traditional identification algorithms are simply flat features, i.e., the simple combination of different features. By contrast, in HinCTI, we design the expressive representation and build the connection between the higher-level semantics of the infrastructure node data and their threat type labels. To identify the threat types of the increasingly sophisticated threat infrastructures, HinCTI using meta-graph based approach over HIN can build the higher-level semantic and structural connection between threat infrastructures with a more expressive and comprehensive view and thus achieves better identification performance.

5.5 Performance of HinCTI for Other Types of Nodes
The proposed approach is relatively general in threat type identification and can be applied to nodes of domain names and other types of nodes. For the threat type identification of other infrastructure nodes considered in this research (i.e., IP address, malware hash, and email address), Fig. 8 shows preliminary results of HinCTI. On the whole, the proposed approach HinCTI consistently outperforms all other typical methods and achieves approaximately 6–8 percent improvements in Macro-F1 and 6–7 percent in Micro-F1.


Fig. 8.
Performance of HinCTI for other types of infrastructure nodes on Macro-F1 score (Left) and Micro-F1 score (Right).

Show All

5.6 Discussions and Limitations
A large amount of structured CTI can be first collected, and then the proposed approach can be leveraged to extract diverse semantic information. This is significant not only for threat type identification of threat infrastructure nodes but also for the mining of CTI, as demonstrated by our measurement study. Actually, our current design is still preliminary, and we discuss its limitations here. In this research, considering the limitations of data acquisition, only four types of infrastructure nodes and five types of relations are considered explicitly. However, our model is extensible, in which more types of nodes and relations can be introduced to produce higher-level semantics, such as organizations, domain owners, techniques and tools utilized to achieve the attack, occurrence time and locations of the attacks incidents, and relations among them. Moreover, we have not considered the dynamic nature of infrastructure nodes’ threat type, that is, we only process the latest threat type of infrastructure nodes in this research. However, ignoring infrastructure nodes’ history threat types affects the performance of identification.

SECTION 6Conclusions and Future Work
In this paper, we propose a CTI modeling and threat type identification system based on HIN, called HinCTI. We design meta-schema and a set of meta-paths and meta-graphs to model CTI on HIN, which can extract and incorporate higher-level semantics of cyber-threat infrastructure nodes involved in CTI. Through the proposed MIIS measure-based heterogeneous GCN-based threat type identification approach, we overcome the challenge of limited labels of cyber-threat infrastructure nodes. Through the hierarchical regularization, our identification approach can also alleviate the problem of overfitting. Experiments based on real-world dataset demonstrate that our developed system HinCTI that integrates our proposed approach can significantly improve the performance of threat type identification compared with the existing state-of-the-art baseline methods.

For future work, we plan to explore other information to enrich the node features and relations of the cyber threat intelligence HIN for further improving the performance of our approach. Another interesting direction for future work is the extraction of fine-grained structured data (including node and their relationships) from intelligence reports recorded in natural language, leveraging topic modeling and natural language processing techniques. Doing so will greatly enrich the heterogeneous information network and enhance the performance of threat identification.