Bike sharing service (BSS) networks have been proliferating all over the globe thanks to their success as the first/last-mile connectivity inside a smart city. Their (re)configuration — i.e., station (re)placement and dock resizing — has thus become increasingly important for BSS providers and smart city planners. Instead of using conventional labor-intensive manual surveys, we propose a novel information fusion framework called CBikes that (re)configures the BSS network by jointly fusing crowdsourced station suggestions from online websites and the usage history of bike stations. Using comprehensive real data analyses, we identify and exploit important global trip patterns to (re)configure the BSS network while mitigating the local biases of individual feedbacks. Specifically, crowdsourced feedbacks, station usage, cost and other constraints are fused into a joint optimization of BSS network configuration. We also model the spatial distributions of station usage to account for and estimate the unexplored regions without historical usage information. We further design a semidefinite programming transformation to solve the bike station (re)placement problem efficiently and effectively. Our extensive data analytics and evaluation have shown CBikes ’ effectiveness and accuracy in (re)placing stations and resizing docks based on three large BSS systems (with > 900 stations) in Chicago, Twin Cities (Minneapolis–Saint Paul), and Los Angeles.
SECTION 1Introduction
With the advent of smart cities/communities and Internet of Things (IoTs), the urban sharing economy has been evolving very rapidly. In particular, bike sharing service (BSS) has emerged as one of the most popular and revolutionary powers that change the people's urban life/health. Bike sharing enables the first/last-mile urban travel to be more economic, greener and healthier than traditional gasoline-engine-powered vehicle riding. City transportation also benefits from an additional network of bike stations connected by the trips with less hassle of traffic planning.

Experiencing deployment successes and receiving positive feedbacks, many BSS providers have begun expanding their BSS networks. Owing to such an expansion, the global bike sharing market is expected to grow at a compound annual growth rate of 21 percent during 2018–2022.1 For example, Divvy bicycle sharing program in Chicago, IL is adding 10,500 new bikes and 175 additional stations over the next three years from 2019. Meanwhile, Citi Bike in New York City will embrace another 4,000 bikes, 13 stations in the busiest areas and 2,500 docks since 2019. On the other hand, there exist BSS network shrinkages (at a micro or macro scale) for financial, event, seasonal or meteorological reasons.

With dynamic bike usage and complexity of urban environments, how to expand and shrink, or (re)configure the existing network of BSS stations becomes increasingly important for the BSS providers. As stations and bicycles are dynamically added/deleted/resized during the BSS (re)configuration, the station relocation, or station (re)placement (i.e., add, move or remove a station), as well as their dock resizing becomes challenging, involving more thorough site investigation and labor-intensive user surveys.

To better leverage the collective knowledge from the BSS users [5], many service providers, like aforementioned Divvy in Chicago, have attempted to crowdsource various station placement comments via their own websites, as illustrated in Fig. 1. Interested users can easily pinpoint, comment and vote for various potential station locations on an interactive map. This way, the BSS systems can easily and timelily obtain many online feedbacks for their next stage expansion or shrinkage, while reducing their traditional survey and investigation costs significantly.

Fig. 1. - 
Illustration of BSS (re)configuration via crowdsourcing.
Fig. 1.
Illustration of BSS (re)configuration via crowdsourcing.

Show All

Despite its importance, however, how to (re)configure the BSS network based on the aforementioned crowdsourced comments is still very challenging and remains an open problem due to the following concerns:

From the data perspective, the first challenge lies in the heterogeneity of information inputs. Crowdsourced feedbacks usually provide local, fragmented suggestions due to each individual's limited geographic scope or personal interest/preference (say, close to home residence), while BSS network (re)configuration needs global knowledge of user mobility and station-to-station dynamics. How to incorporate the local suggestions/comments together is important and should thus be considered carefully.

From the user's perspective, as all stations are “linked” by users’ trips, the second challenge stems from their trip tendency. Overcrowded or inadequate BSS network placement and ignorance of popular station-station pairs for users’ commute may discourage cyclists, thus lowering bike usage and platform profit.

From the platform's perspective, since the web crowds are enabled with large freedom to label locations they want, addressing such naturally-noisy/biased crowdsourced inputs becomes the third challenge, which should be considered by a joint fusion formulation.

To address above challenges, we propose CBikes, a novel joint information fusion framework for Crowd-sourced Bike sharing Station network (re)configuration. Specifically, CBikes integrates local crowdsourced suggestions with global historical bike usage data upon a geographical map which is discretized into regions/grids. The information fusion in CBikes not only takes into account the usage at deployed/explored city regions, but also estimates the usage at the unexplored/expansion ones. Given above, CBikes converts BSS network (re)configuration into a graph matching problem. Each vertex (station) of the graph (network) is matched against this spatially and temporally-varying map of fused knowledge, subject to edges (links) or trips from others. We then formulate a novel joint optimization problem to balance among crowd satisfaction, platform utility, and (re)configuration cost.

CBikes makes the following major contributions:

Comprehensive (re)configuration data analysis: We analyze extensive real data of several BSS (re)configuration cases, and identify the important properties of their bike usage distribution evolution, BSS network density alternation, trip correlations between bike stations and crowdsourced feedbacks for the BSS systems.

Novel data-driven and computational model designs: We derive important and practical data-driven model designs for bike sharing station network, including a novel metric for user trip tendencies, predicted usage at unexplored city grids and inter-station distance constraints, and integrate them in CBikes.

Crowdsourced information fusion & joint optimization : We propose a novel optimization framework which jointly considers multi-modal data from crowdsourcing and platform-usage statistics for BSS (re)configuration. We first formulate a grid-based candidate selection and graph matching problem, then transform it into a novel semidefinite programming (SDP) form, and finally solve it efficiently and effectively.

Extensive experimental evaluation: CBikes has been evaluated with significant amounts of real data (of more than 900 stations) from 3 premium BSS systems in Chicago, IL, Twin Cities (Minneapolis–Saint Paul),2 MN and Los Angeles, CA. These comprehensive studies validate the effectiveness and accuracy of CBikes in optimizing bike sharing station (re)configuration given crowdsourced inputs.

Despite its focus on BSS systems, CBikes can be extended to other sharing/connected vehicle network (re)configuration, including parking lot decisions for car-sharing [37], gas station redeployment [32] and charging station expansion for electric vehicles [14].

A preliminary version of this work was presented at a conference [10]. Besides motivating and elaborating more upon the core formulation (Sections 1, 4 & 7), this version makes significant improvements over the conference version as follows.

Estimated Usage at Unexplored Grids/Regions: The conference version [10] did not model the bike usage at those reconfigured or expansion grids, yielding less accurate grid matching. While many researchers studied demand distribution based on known historical trip data [18], [29], the problem of estimating the demands at unexplored grids/locations has not been investigated. In this version, we have also investigated the latter problem, and developed an efficient multi-layer neural network to estimate the usage distributions at those unexplored grids, which further enhances the (re)configuration (relocation) performance (Section 3).

Additional Experimental & Ablation Studies: We have also conducted more experimental evaluations of the proposed framework as well as several important system parameters (including search scope and grid size), validating the comprehensive model designs (Sections 5.2 & 5.3).

Performance Improvement: Our new designs have been shown to outperform those in the previous version in terms of (re)placement/resizing accuracy improvement and reconfiguration cost reduction (Section 5.3).

Deployment Discussions: We have also added more discussion upon the deployment of CBikes (Section 6).

The rest of this paper is organized as follows. We first overview the system framework and important concepts for our problem in Section 2. Then, Section 3 presents (re)configuration analysis and data-driven designs, followed by the core problem formulation and novel optimization framework in Section 4. Section 5 provides experimental evaluations, while Section 6 discusses some deployment considerations. After reviewing related work in Section 7, the paper finally concludes with Section 8.

SECTION 2System & Concepts
We present the basic CBikes framework (Section 2.1) and introduce important definitions of CBikes (Section 2.2), followed by the datasets evaluated (Section 2.3).

2.1 System Framework
Fig. 2 shows the components and layers of CBikes. Specifically, CBikes consists of 4 consecutive layers for computing bike station (re)configuration: input, design, core and action layers. At the input layer (Section 2.3), historical and estimated station-usages, crowdsourced feedback of station expansion/shrinkage suggestions, as well as predefined costs are collected and delivered to a central server, pre-processed and then stored into databases. Note that other practical geographic design concerns or constraints, including the number of service bikes and accessible station deployment areas, are also inputted by the service provider, processed and stored into its database. Our focus here is to develop a generic optimization framework, given the above primary and secondary information.

Fig. 2. - 
The system framework flow of CBikes.
Fig. 2.
The system framework flow of CBikes.

Show All

At the design layer (Section 3), we form the joint objective functions, and integrate map information and station geographic distances into constraints. Finally, we formulate a joint optimization framework, transform and solve it at the core layer (Section 4), optimizing station sites with respect to predefined map grids. Guided by the results of the action layer, the service provider may (re)place stations and resize their docks. In case results are not satisfactory, the parameters can be tuned interactively for another optimization trial.

2.2 Key Concepts
We elaborate on the important terms, concepts or definitions for our mathematical formulation. Formally, we have

Definition 1 Bike station network (BSN).
Each station i is represented by Si=(lati,loni,κi), i∈{1,…,M}, where tuple [lati,loni] denotes its geographic coordinates and κi≥0 is its capacity. Denote the location of each Si as a 2×1 vector li=[lati,loni]T, and let L=[l1,l2,…,lM]T be the M×2 coordinate matrix of all stations on the map. Given a set of M geographical nodes L and their links E⊆L×L connecting them, a network of BSS stations is represented by a graph G=(L,E).

Given an already-deployed BSN, after a certain period we obtain

Definition 2 Historical bike trip data.
Each trip corresponds to a user's bike ride which happens at a certain time from a station to another. Specifically, a set of bike trips from a start station Si to an end Sj can be represented as τ(i,j)={i,j,(ti,tj)′s}, where (ti,tj)′s are the set of pick-up/drop-off timestamps of each trip in τ(i,j). Note that τ(i,j) is symmetric if and only if riders return their bikes at the same station as they were rented, i.e., τ(i,j)=τ(j,i) iff i=j.

Based on the deployment results the service provider may initiate:

Definition 3 Bike station network (re)configuration (BSNR).
A phase of BSNR basically consists of station (re)placement and dock resizing. At each BSNR, the service provider can place new stations, remove or move existing ones, or just keep them, and resize the docks. We consider two consecutive stages of a BSNR, i.e., two sets of station status before and after a (re)configuration. For ease of description, denote the M˜ stations before BSNR as S˜i's, and let the old (prior to the (re)configuration) network be G˜=(L˜,E˜). Each S˜i's location before BSNR is denoted as l˜i=[lat˜i,lon˜i], with the pre-(re)configured capacity κ˜i. At each BSNR, we consider (re)placing M stations and resizing the dock capacity to accommodate a total of K bikes.

We note that the number of stations to be (re)placed, M, can be determined by the BSS platform as a known input factor (can be represented as a budgetary constraint). BSNR decisions should also involve public engagement and cater to users’ demand. Before each BSNR, via certain media or platform (like a website) interested users may easily suggest station sites, i.e.,

Definition 4 Crowdsourced station feedbacks.
Each feedback indexed by n on the interactive map is represented as fn=(latn,lonn, tn,textn), where the pair (latn,lonn) is the location/site coordinate, tn is its timestamp, and textn is the related posted comment, if any.

We briefly introduce the actions of BSNR. Station (re)placement is to find their appropriate locations. As searching in continuous geo-space may lead to a computation complexity problem, we discretize the entire map into multiple grids. This way, we have finite candidate sets for efficient computation, whose granularity can be determined via task customization [4], [18]. Formally, we have

Definition 5 Station (re)placement grid.
The entire city map is discretized into a set of R regular grids (rectangle grid in our case), i.e., G=[g1,…,gR]T, an R×2 matrix where each grid is given by a coordinate (2×1 vector) of its center, gr=[latr,lonr]T, r∈{1,…,R}.

Note that R, the number of grids, is determined by the trade-off of accuracy, granularity and computational efficiency (evaluated in Section 5). After station (re)placement, CBikes further resizes their docks.

Definition 6 Dock resizing.
The total dock capacity equals (or at least) the total number of bikes, i.e., ∑Mi=1κi≥K. CBikes resizes the dock κi (enlarge, decrease or maintain) at each station i to satisfy both incoming crowdsourced needs and historical/potential demands.

In our prototype studies, we consider the total dock capacity as a pre-determined input by the BSS provider, i.e., ∑Mi=1κi=K. Note that the cost of dock resizing only considers those stations staying at the same locations as in G˜. Dock-related costs of other newly-added/removed stations are included in their subtotals of creation and removal.

Profit, cost and station usage are critical from the platform perspective, while matching request and convenience may matter to the users. To accommodate both, we study in this paper:

Definition 7 Crowdsourcing-based BSNR (CBSNR).
Given historical bike trip data, crowdsourced feedbacks, cost of actions, and other practical BSS design constraints, CBSNR problem is to (re)configure the existing network to jointly match crowds’ feedbacks and station usage statistics at minimum cost.

2.3 Overview of Datasets Studied
We consider the following BSS data (including map information) for our CBSNR analysis here and evaluation in Section 5:

Divvy at Chicago, IL, which consists of total 582 stations by 2017 (2nd quarter). 3 major expansions with total 282 new stations were recorded since 2013. Overall, 11,544,750 trips are studied.

Nice Ride at Twin Cities, MN, which includes a total of 202 stations in Minneapolis-St. Paul Metropolitan area until 2016. 5 major expansions with 134 new stations are recorded since 2013. Overall, 2,857,027 trips are analyzed.

Metro Bike at Los Angeles County, CA, which consists of total 119 stations in Los Angeles (LA) County by 2017 (3rd quarter). 2 major network expansions with total 56 new stations are recorded since 2016. Overall, 277,195 trips are evaluated.

This massive trip data includes start/destination stations, related pick-up/drop-off timestamps (or trip durations), user type (say, day-pass holders or annual subscribers) or even age/gender/birthday information. We further scrape the crowdsourced feedbacks from “Suggest a Station” website of each BSS provider (Divvy,3 Nice Ride4 and Metro Bike5). For each CBSNR, we use the 1,100 latest feedbacks fn's with [latn,lonn]'s (with tn before the BSNR). In our studies, we have filtered out the crowdsourced feedbacks in inaccessible regions (Section 3.5).

Besides aforementioned datasets, we also collect the point-of-interest (POI) data for each BSS system (Chicago: 4,329; Twin Cities: 3,100; LA: 5,948) from the OpenStreetMap (OSM)6 website. As most observations are qualitatively similar, we focus on Divvy and Nice Ride in the following data analytics in Section 3.

SECTION 3(Re)Configuration Analysis & Design
The inherent complexity of CBSNR calls for careful and practical designs based on usage data and users’ feedback. We design key components of CBikes and their integration via comprehensive analysis of real data: historical and estimated station usages (Sections 3.1 and 3.2), inter-station trip tendency (Section 3.3), geographic distance constraint (Section 3.4), and finally crowdsourced feedbacks (Section 3.5). For each component, we make important observations from the data (before (re)configuration), and quantitatively formulate the design problem.

3.1 Historical Usage at Each Station
Observation. Intuitively, the more often a station was used at a certain location, the more likely it will be kept there. We first summarize and show the spatial station usage w.r.t. BSNR. Figs. 3 and 4 visualize the spatial distribution of usage as a heat map. The warmer the color, the more pick-ups/drop-offs are recorded (log10(usage)). Due to BSNR, clear configuration changes can be seen between 2013 and 2015. More city areas are covered, and higher usages can be observed among the points of interests (including the Skyline and Lake Coast) in Chicago as the network expands. Similar patterns can be observed from Twin Cities and LA County.

Fig. 3. - 
Distribution of total usage in Chicago, 2013.
Fig. 3.
Distribution of total usage in Chicago, 2013.

Show All

Fig. 4. - 
Distribution of total usage in Chicago, 2015.
Fig. 4.
Distribution of total usage in Chicago, 2015.

Show All

Design. To better differentiate historical usages of different stations, we design a usage-related measure for each Si w.r.t. each gr. Let
Tr={τ(i,j)|(Si is at gr)⋃(Sj is at gr)}(1)
View SourceRight-click on figure for MathML and additional features.be the aggregated set of trips starting or ending at grid r. We define the historical usage importance of gr for a station location candidate li as
Uir≜exp(λir|Tr|)1+exp(λir|Tr|),(2)
View SourceRight-click on figure for MathML and additional features.where
λir=l˜i⋅gr∥∥l˜i∥∥⋅∥gr∥.(3)
View SourceHere 0<λir≤1 characterizes the normalized affinity or closeness of station i with grid r in previous geographic space, i.e., the closer Si was with gr before BSNR, the larger λir gets. We consider 0<Uir<1, the scale of which can be easily integrated with other formulations, and the exponential function strengthens the effect of large usage and physical closeness. Clearly, the more a station i is used at grid r, the larger Uir is, and the more likely its location is kept or (re)placed there.

3.2 Estimated Usage at Unexplored Grids/Regions
Observation. For those grids/regions without records of historical usage, we need to further conduct the usage estimation based on spatial and temporal data to infer their potential in terms of popularity for a BSS station to relocate to. This way, Eq. (2) can better characterize those unexplored grids in CBikes’ core formulation. Since neighborhood urban functionality, as visualized in Figs. 3 and 4, largely plays an important role in bike pick-ups and drop-offs in practice, we further introduce an efficient scheme to estimate the usage based on the points-of-interest (POIs) at those unexplored grids.

Design. We consider the following factors in order to estimate the potential of usage at unexplored grids:

relative geographical location (2-D): We consider the relative location of each target grid r w.r.t. entire city map, by normalizing its longitude and latitude into [0, 1], i.e.,
zlat=latr−latminlatmax−latmin,zlon=lonr−lonminlonmax−lonmin,(4)
View Sourcewhere [latmax,latmin,lonmax,lonmin] is the geographic bounding box of the city (see Section 5.1). In practice, one may filter out (add or remove geo-spatial constraints from the search scope) the grids which cannot be accessed, e.g., rivers and buildings, before estimating the usage.

geographic distances from the P1 nearest stations before CBSNR (P1-D): Based on the street centerline map, we find the geographic distances between the target grid and each of its P1 nearest peer stations (before CBSNR). Then, we have P1 distance measures [zdist,1,…,zdist,P1].

number of POIs for each type and total numbers of PoIs ((P2+1)-D): For each grid gr, we find regarding each type of POI i (say, business or mall; i∈{1,…,P2}) the number of venues, zi, within it. We also find the total number of POIs, zsum within all the grids of the city. We visualize the distributions of POIs (including restaurants, cafes, banks, supermarkets and many others based on key:amenity in OpenStreetMap (OSM)) in the city of Chicago and Minneapolis-Saint Paul in Figs. 5 and 6.

Fig. 5. - 
POI distribution in Chicago.
Fig. 5.
POI distribution in Chicago.

Show All

Fig. 6. - 
POI distribution in Twin Cities.
Fig. 6.
POI distribution in Twin Cities.

Show All

PoI entropy (1-D): Since the functionality of a grid can also be specified by a few certain types of POIs, we further introduce the POI entropy to characterize it as:
zentropy=−∑ipzizsumlog(zizsum).(5)
View SourceRight-click on figure for MathML and additional features.

Specifically, we form a P-D (P=P1+P2+4) feature vector z consisting of the above factors as input. Given the aggregated historical usage of those explored grids before CBSNR, we train a multi-layer fully-connected (FC) dense neural network to estimate aggregated usage of the unexplored ones, denoted as |T′r|. Its layer-to-layer propagation can be given by
zl=σ(Wl⋅zl−1+bl),(6)
View SourceRight-click on figure for MathML and additional features.where Wl is the neuron weight matrix, bl is the bias vector for layer l, and σ(⋅) is the activation function (we use RELU in our prototype). The output after multiple stacked layers is the estimated |T′r| at each grid, given input of the feature vector z.

After predicting the potential usage Tˆr's for each gr without historical records, we feed them to Eq. (2) and calculate the estimated usage importance Uˆir of a grid r for each station candidate i. This way, CBikes accommodates both historical and estimated usage within the information fusion.

Note that the estimation model presented in Eq. (6) is general enough to accommodate many other factors if available for better performance. We will further evaluate the beneficial effect of usage estimation upon the reconfiguration of CBikes in Section 5.

3.3 Inter-station Trip Tendency
Observation. Despite its importance, considering total usage only may not be sufficient. For example, a BSS user may frequently commute between a pair of stations (say, her/his home and office or school). Individually considering each station without inter-station trip tendency may overlook such frequently commuting users (which yields a stable platform income) and remove those stations having strong links E⊆L×L with others.

To further illustrate this, Fig. 7 shows an example of trip tendency among 5 stations in Chicago in 2014. We summarize their pick-up/drop-off flows w.r.t. each outgoing/incoming direction (i.e., a vector between start and destination). Dark blue sectors indicate the volume of outgoing bike flows while light yellow represents incoming bikes. Volumes in all directions are normalized to [0, 1] for each Si. The larger radius of a sector, the more proportion of its bike flows start or end in that direction. We can observe that a strong north–south trip pattern w.r.t. stations along Lake Michigan beaches mainly because the tourists’ recreational rides create a large trip tendency at stations along the lake shore.

Fig. 7. - 
Flow directions of 5 stations in Chicago 2014.
Fig. 7.
Flow directions of 5 stations in Chicago 2014.

Show All

Similarly, Fig. 8 shows the trip tendency to/from several stations in Minneapolis, MN. We can see strong bike flows between west downtown and university area, indicating bike commutes by students, staff and faculty. In particular, we can observe significant south–west and south-east flows at the station of 6th Ave. SE & University Ave. (circled), which likely bridges the downtown and campus. Despite its less total usage (lower Uir in Eq. (2)) than others, CBSNR should also value importance of this station.


Fig. 8.
Flow directions of 6 stations in Minneapolis, MN 2016.

Show All

In summary, inter-station trip tendency is highly correlated with purposes of users’ trip choice (start, end), including commutes between home and school or recreational sightseeing. Further, its strength characterizes the volume/tendency of urban flows. Therefore, we incorporate the tendency in our optimization model.

Design. Recall that τ(i,j) represents the set of bike trips from Si to Sj (i≠j). To focus on the connectivity and trip-tendency, we adapt the link probability in theories of network embedding [21], and define a new tendency metric p(i,j) between Si and Sj as
p(i,j)=11+exp(−a⃗ ji⋅a⃗ ij),(7)
View Sourcewhere the vector a⃗ ji represents the proportion of trips from i to j, i.e., |τ(i,j)|, as well as that of the remaining trips, i.e.,
a⃗ ji=[|τ(i,j)|∑Mk=1,k≠i|τ(i,k)|, 1−|τ(i,j)|∑Mk=1,k≠i|τ(i,k)|],(8)
View Sourceand similarly for a⃗ ij. Note that p(⋅,⋅) is symmetric, i.e., p(i,j)=p(j,i). a⃗ ji⋅a⃗ ij returns the dot product of the two vectors.

In other words, the larger proportion of bikes are commuting between stations i and j, the larger p(i,j) is (0<p(i,j)<1), implying more important connectivity of these two stations. Then, we find ∑Mj=1,j≠ip(i,j) for each Si, further indicating its overall connectivity with other stations. This way, we may characterize the complex network structure efficiently [21], highlighting the connectivity and trip-tendency between stations. Considering the frequent usage and travel patterns of bike users, BSNR should preserve interactive connectivities between these stations.

We further visualize in Figs. 9 and 10 the distributions of p(i,j)'s (normalized) of two stations (red stars) in Chicago and Minneapolis, which correspond to the trip patterns discussed in Figs. 7 and 8. The color of each grid represents the value of the tendency metric of a station there with the target one. The warmer the color, the larger the metric value, meaning more trips happen between the target station and those neighbors. Thanks to the modeling of p(i,j) we can fuse the user preferences in CBikes’ formulation.

Fig. 9. - 
Distribution of tendency along Michigan Lake shore.
Fig. 9.
Distribution of tendency along Michigan Lake shore.

Show All


Fig. 10.
Distribution of tendency in downtown minneapolis.

Show All

From the data management's point of view, the total usage and the trip tendency of stations are inherently correlated, as the former is the result of aggregating the latter. To highlight station connectivity and mitigate inherent redundancy, as shown in Eq. (8) we normalize the usage in the model. Besides, our evaluation (Section 5) shows that inclusion of tendency beyond usage improves the performance, which has not yet been considered in previous siting studies [4], [16], [18].

3.4 Geographic Inter-Station Distance
The BSS is designed to provide first-/last-mile commute, and a user is allowed to return the bike at any station near her/his destination. Thus, the density of deployed stations is a critical design consideration, i.e., the network should be neither too dense nor too sparse.

Observation 1. We first overview the histograms of outgoing trip distances, which characterize the tendency of a user when deciding on a trip. We do not show round trips as they are included in single station usage (Section 3.1). Figs. 11 and 12 show the outgoing trip distance distribution w.r.t. years for each BSS system. We can observe that a clear “last-mile” traffic flow, i.e., more than 65 percent outgoing users tend to drop off bikes within 2km (around 1.5miles).


Fig. 11.
Trip distance distributions w.r.t. years (Divvy), with [0.5 km, 2.5 km] zoomed in.

Show All


Fig. 12.
Trip distance distributions w.r.t. years (Nice Ride), with [0.0 km, 3.5 km] zoomed in.

Show All

Interestingly, as BSS expands, increasingly more percentage (88%in2013→90%in2016) of users take short-distance (<4 km) trips in Chicago, while in Twin Cities this part is decreasing (97.34%in2010→93.3%in2013→89.81%in2016). It is likely due to the difference in network density. With markedly more nearby stations and available bikes, it is more convenient for Chicagoans to ride between near stations. For Nice Ride, as average distance to nearest station is larger (0.47 km in Divvy versus 0.58 km), under such nearby stations of a sparser network may take less usage percentage.

Unlike its peers, Metro Bike in LA County is distributed in LA, Santa Monica, Pasadena and Long Beach. Distances between nearest stations are much smaller within each city (often 0.25 km∼0.39 km), showing much denser urban networks. Hence, much more short-distance trips are expected.

Observation 2. We also show the bike usage of each station versus the distance to its nearest neighbor. This way, we can characterize the impact between stations due to service coverage overlap. Specifically, we conduct negative binomial regression (NBR) [12] on single station usage |T| (the number of trips) against different distances D (m) to the nearest peers. Considering the probability
P(|T|=a|D)=e−z⋅zaa!(9)
View Sourceand mean of |T| is z [12], NBR finds the set of b's which maximize the log-likelihood for
lnz=b0+bD.(10)
View Source

Fig. 13 shows the regression parameter b versus D. b characterizes sensitivity of station usage towards network density. Overall, we observe in both systems a positive effect (b>0) of the distance to the nearest neighbor over the station usage, implying that usage generally increases with distance from the nearest neighbor. A strong counter-effect upon a station can be inferred within a close distance from others (say, less than 400 or 500m) which may lower its usage. It is mainly because of a competitive effect [25] that close-by stations may serve the same group of users and prevent each other from being fully utilized. As a short-range effect, it saturates quickly after a certain range (say, 600m in Divvy and 700m in Nice Ride), due to discouraged usage of distant sites.


Fig. 13.
Regression parameter b versus distance to the nearest station (Divvy & Nice Ride, 2016).

Show All

Design. To reflect the above observations, over E⊆L×L we set the lower/upper bounds [d––ij,d¯¯¯ij] for the distance between two neighboring stations Si and Sj (in a neighborhood set N), i.e.,
d––2ij≤∥li−lj∥2≤d¯¯¯2ij,∀i≠j,(i,j)∈N,(11)
View SourceRight-click on figure for MathML and additional features.

We apply a heuristic local search [2] around all Si's in G based on historical usage statistics, crowd feedbacks or their fused map (Section 4.2) to determine a rough neighborhood set of N. As CBikes is a general framework, geographic distances other than the euclidean metric (like the Manhattan distance for metropolitan cities like New York City [33]) can be easily applied. Note that we consider locally constraining neighboring station candidates in close grids (say, within 2 to 3 grids), making differences of metrics rather small in practice. Similar to many state-of-the-art studies [18], [34], for prototype and illustration purposes we consider the euclidean distance here.

For convenience and utility, the upper bound caters to the majority of travel distance preferences, while the lower bound mitigates conflicts between neighboring stations. We consider distance at the 65-percentile of cumulative usage distributions from Figs. 11 and 12 for d¯¯¯ij, and distance at the “knee point” (where the plotted curve “turns”, or formally where a curve is best approximated by a pair of lines) in Fig. 13 for d––ij. Note that all derived parameters for each test are only based on periods before (re)configuration takes place. Despite the global bound setting here, one may easily customize [d––ij,d¯¯¯ij] further w.r.t. each station pair.

In summary, including links of stations (including inter-station trip tendency and distance) is important as simple scalar quantification and local feedbacks of crowds who have limited scopes may ignore the actual trip tendency. Their introduction helps assist the global optimization, and we will further validate their importance and effectiveness via evaluation of real data (Section 5).

3.5 Crowdsourced Feedbacks
Observation. Crowds are essential to CBSNR, and Fig. 14 visualizes the spatial distribution (“heat-map”) of aggregated crowd feedbacks before BSNR. The warmer color means more feedbacks. We also plot the initial station locations in 2013 (before expansions). From the spatial distribution of crowdsourced feedbacks, we may observe strong sociodemographic factors [17], [18], [29]. For example, many suggestions are made to the central business district and skyline (say, Magnificent Mile) of Chicago, matching intensive commuting needs there. Besides, anticipation also comes from south and west, probably due to student commuter demands around the university campus and introduction of metro stations. We also observe similar patterns in feedbacks of the other two systems. The crowdsourced feedbacks have potential and power in identifying latent factors (qualitatively and quantitatively) for network (re)configuration, and serve as an important supplement to many other GIS databases [38].

Fig. 14. - 
Crowd feedback distribution, and station locations in Chicago 2013.
Fig. 14.
Crowd feedback distribution, and station locations in Chicago 2013.

Show All

Note that the local and dispersed crowds’ feedbacks could not always directly reveal the overall trip tendency connecting the start and the destination, mainly because each individual usually recommends new stations closest to either her/his own work place or residence. Besides, one may not reveal both the start and end of each trip due to his privacy and identity concerns. The global inter-station trip tendency has been modeled in our optimization to account for the above biases or insufficiency.

Pre-processing the crowdsourced data, including filtering those in inaccessible regions, is essential. For example, we have noticed and filtered out some hilarious input locations in Lake Michigan for Divvy. Via comprehensive map boundary and building constraints, we can easily identify those unreasonable feedbacks. As users may vote for more reasonable labels for themselves, and CBikes jointly considers historical usage and geographic constraints, these noisy inputs can be suppressed further.

Design. Given Definitions 4 and 5, we consider crowds’ feedbacks in a discretized manner, i.e., we aggregate the number of feedbacks fn's falling into each rectangle grid. Intuitively, the more crowdsourced pin-points go into a grid, the more likely it would be selected. This way, we consider the aggregated feedbacks Vr for each gr, and define a measure of vote intensity as a penalty function ϕ(Vr) for our optimization input. A larger ϕ(Vr) due to more votes implies a heavier “penalty” to be minimized by the solver. Specifically, given input |Vr| votes at gr, we have

Definition 8 Deadzone-linear penalty (DLP).
the DLP function with a deadzone width β≥0 is given by
ϕ(Vr)={0|Vr|−β:if|Vr|≤β;:if|Vr|>β.(12)
View Source

In other words, our DLP de-emphasizes the grids with crowds’ votes less than β, mitigating outlier effect, and focuses on others with more support, which is also reasonable in traditional user surveys for BSS expansion [19], [25]. Using a linear |Vr|−β, CBikes also mitigates sensitivity towards large but noisy votes than other higher-order penalty functions [3]. After calculating for all gr's, we normalize each ϕ(Vr) (r∈{1,…,R}) into the range [0, 1].

In summary, as a joint optimization framework, CBikes fuses heterogeneous sources of information and data-driven designs, instead of single-point knowledge input, for final joint decisions, thus mitigating the noisiness of crowd feedbacks. The effectiveness of our proposed information fusion will be validated in Section 5.

SECTION 4Core Formulation & Methodology
We present the problem formulation to integrate the above designs. We first present the grid matching basics (Section 4.1), and provide the objective functions (Section 4.2). We then discuss the formulation (Section 4.3), followed by semidefinite programming transformation (Section 4.4). We finally provide a complexity analysis (Section 4.5).

4.1 Station (Re)Placement & Grid Matching
Station (re)placement is more challenging than dock resizing. We convert the BSS (re)placement problem to the problem of estimating affinity (closeness) of each station with predefined geographic grids. Each Si's location is considered as the weighted average of grid coordinates (Definition 5). Consider M stations are to be (re)placed. Let hir be the weight of grid r in determining Si's location li, i.e.,
li=∑r=1Rhirgr,∀i∈{1,…,M},(13)
View Sourcewhere each hir follows normalization and nonnegative constraints,
∑r=1Rhir=1,hir≥0,∀r∈{1,…,R}.(14)
View SourceFor ease of presentation, we define H, an M×R matrix consisting of all hir's. The set of location coordinates of all stations is then
LM×2=HM×RGR×2.(15)
View SourceRight-click on figure for MathML and additional features.In our problem formulation, we want to determine the grid weights, as the variables, for station (re)placement.

4.2 Objective Function Design
To incorporate heterogeneous sources of data, we present a novel information-fusion technique in our joint optimization. Specifically, we present the joint difference functions fusing crowds and historical usage, and the cost measures for (re)configuration actions. Combining these leads to our final objective function.

Metric of Joint Difference. To quantify the matching of knowledge fusion, we further design a generic metric, i.e., joint difference of grid matching, denoted as Δir, for each candidate station i at a grid r. Specifically, given V feature metrics Fv(i,r)≥0 showing the fitness of matching, we may define
Δir≜1∏Vv=1(1+Fv(i,r)).(16)
View SourceFv(i,r)'s are derived from available historical usage (Sections 3.1 & 3.3) and crowd feedbacks (Section 3.5), i.e.,
Δir≜1(1+Uir)(1+∑Mj=1,j≠ip(i,j))(1+ϕ(Vr)).(17)
View SourceThe inverse function in Eq. (17) means that the more historical usage Uir, total trip tendency ∑Mj=1,j≠ip(i,j) and votes ϕ(Vr), the smaller Δir and the more favored gr for Si. It guarantees 0<Δir≤1, and adapts to cases of either with little historical usage or few crowds’ votes (say, any Fv(i,r)→0).

We also illustrate and visualize the spatial distribution of joint difference Δir's in Eq. (18), i.e., “heat map” of fused knowledge. Fig. 15 shows Δir's of two station candidates in Divvy (dashed circle: id=1; solid circle: id=464). The warmer the color, the smaller the Δir, indicating a higher matching potential there for that station.

Fig. 15. - 
Spatial distribution of $\boldsymbol \Delta _r^i$Δri's for two selected stations of Divvy.
Fig. 15.
Spatial distribution of Δir's for two selected stations of Divvy.

Show All

Note that for further grid differentiation, the joint difference modeling in Eq. (17) is general to be integrated with other external information (other feature metrics Fv(i,r)'s) if available, including distance to the central business district, closeness to rail stations and other interesting sociodemographic factors (estate price, income or point of interest number) [25], [38] affecting the station functionality.

Given the joint difference for each station, we further look at the entire network. Let Δ be an M×R matrix consisting of all Si's joint differences. We define an operator ψ(H,Δ) returning sum of entry-wise products of elements in matrices H and Δ, or formally, the trace (denoted as Tr(⋅)) of product HΔT. Then, the total joint difference of CBSNR estimates and the map of fused knowledge is
ψ(HM×R,ΔM×R)≜Tr(HΔT)≜∑i=1M∑r=1RhirΔir.(18)
View SourceRight-click on figure for MathML and additional features.Specifically, the smaller the Δir, the higher hir assigned to gr, and the more likely Si is (re)placed there (Eq. (13)), i.e.,
hir≥hiq,if Δir≤Δiq,∀r≠q∈{1,…,R},∀i.(19)
View SourceRight-click on figure for MathML and additional features.

Cost of Station (re)placement. Considering the feasibility of CBSNR, we integrate the estimates of potential (re)placement cost. Let c∘≥0 and c×≥0 be the costs of adding and removing a station, respectively (customizable w.r.t. each gr and each Si). The move action is considered as a removal followed by an add. Then, we define the costs of all actions for each Si at gr as:
θir=⎧⎩⎨⎪⎪⎪⎪⎪⎪0c∘c×c×+c∘:if no action is imposed;:if a new station is added;:if an existing station is removed;:if a station is moved to other place.(20)
View SourceRecall that we consider li=∑Rr=1hirgr, the weighted average of closely-matched grids. For existing stations, let h˜ir=1 if S˜i was at gr and h˜ir=0 vice versa. For newly-added ones, h˜ir=0, for ∀r. Increasing or decreasing hir at grid r implies a higher potential of adding or removing Si. To fit these in our formulation, we characterize these two changes for each cost θir as
(hir)∘(hir)×=max{hir−h˜ir,0},=max{h˜ir−hir,0}.(21)
View SourceRight-click on figure for MathML and additional features.

Then, we set the total cost of (re)placing all M stations in R grids as
C∗≜∑i=1M∑r=1Rθir=∑i=1M∑r=1R((hir)∘⋅c∘+(hir)×⋅c×).(22)
View Source

Cost of Dock Resizing. Let M′≤M be the number of stations staying at their same locations without (re)placement (moved/removed). Recall in Definition 6, dock resizing considers only the cost of these M′ stations, where each resizing action for an Si costs
ηi=⎧⎩⎨⎪⎪0c↑c↓:if dock size is unchanged;:if dock size is increased by 1;:if dock size is decreased by 1.(23)
View SourceRight-click on figure for MathML and additional features.If a dock needs to be enlarged, we have κi≥κ˜i, and vice versa. Similar to Eq. (21), we define the changes at each station as
(κi)↑=max{κi−κ˜i,0},(κi)↓=max{κ˜i−κi,0}.(24)
View SourceRight-click on figure for MathML and additional features.We design the cost function to capture the change w.r.t. each station's location weight assignment in (re)configuration. Similarly, we may set the total cost of dock resizing as
C†≜∑i=1M′ηi=∑i=1M′((κi)↑⋅c↑+(κi)↓⋅c↓).(25)
View SourceRight-click on figure for MathML and additional features.

Summary. Fig. 16 summarizes the idea of joint difference “heat map” in CBikes formulation, as formulated in Eq. (17), fusing multiple heterogeneous information sources of usage, trip tendency and votes. Distances derived in Section 3.4 serve as constraints for the grid matching process against the heat map. Given the objective designs (including joint difference and cost) and distance constraints, the core formulation of CBikes determines the final actions, altering the weights {hir}'s in Eq. (15) and changing the sizes via {κi}'s, which are detailed as follows.


Fig. 16.
Illustration of formulation for CBikes: joint difference heatmap and constraints.

Show All

4.3 Problem Formulation
Station (re)placement problem in CBSNR is formulated as: given the crowds’ site suggestions and the historical usage, the objective is to (re)place stations such that total joint difference (in crowdsourced feedbacks and historical usage), as well as the total cost of station (re)placement are jointly minimized.

To accommodate both grid matching and (re)placement cost, we form the final objective as ψ(H,Δ)+αC∗, where α>0 is a tunable parameter (we empirically set α=0.5). Formally, we have
argminHs.t.ψ(H,Δ)+αC∗,Constraints in Eqs. (11), (14), (15) & (21).(26)
View SourceRight-click on figure for MathML and additional features.

We further present the formulation of dock resizing. Intuitively, more capacity should be assigned to stations with lower Δi≜∑Rr=1hirΔir (i∈{1,…,M′}), i.e., more crowd supports and historical usage. In other words, κi≥κj if Δi≤Δj. In practice, the dock size may not be too large due to space constraint in some city areas. The dock sizing also makes a trade-off between cost and service, where a larger dock size will reduce the time period when a station is out of stock or overstock at the cost of deployment. We may pose an upper limit κmax for each dock, which may vary with local street environment due to space availability or customization. Specifically, the dock resizing is to minimize the dock resizing cost C† and match the frequently-used and popular stations, i.e.,
argmin{κi}s.t. C†,κi≥κj,if Δi≤Δj,∀i≠j,0≤κi≤κmax,Δi=∑r=1RhirΔir,∑i=1M′κi+∑i=M′+1Mκi=K.(27)
View SourceRight-click on figure for MathML and additional features.Total capacity K can be slightly larger than actual bike number in order to be more resilient to bike flow dynamics.

4.4 SDP Transformation
Note that the lower distance bound, d––2ij≤∥li−lj∥2 in Formulation (26), is a non-convex constraint [3], making its solving rather difficult. To address this difficulty, we introduce a novel semidefinite programming (SDP) technique [3], [9], [20] in order to solve the station (re)placement problem efficiently. Our basic idea is to introduce interim variables representing the station candidate locations, which turn out to be positive semidefinite, and then relax the lower bound constraints via matrix transformation of SDP [20], making it easier to be solved in polynomial time by interior-point algorithms [3], [20].

Mathematically, we first define an indicator vector (oij)M×1 with M elements, among which the ith element is 1, the jth is −1 and all others are 0. Let d2ij=(li−lj)T(li−lj) be the resultant distance (squared) from predictions of Si and Sj, and we may further have
d2ij=oTijLLToij,∀i≠j,(i,j)∈N.(28)
View SourceWe then introduce a transition matrix Z∈RM×M as Z=LLT, or
Z−LLT=0.(29)
View SourceThen, we rewrite the aforementioned bound constraint into
d––2ij≤oTijZoij≤d¯¯¯2ij.(30)
View SourceNext we relax Eq. (29) into a semidefinite form [3], i.e.,
Z−LLT⪰0.(31)
View SourceRight-click on figure for MathML and additional features.

We aim at transforming Eq. (29) into one with linear matrix inequality (LMI) [3], [20] which turns out to be convex and solvable. Therefore, we introduce a block matrix form called Schur complement [3] for transformation, which is formally defined as follows.

Definition 9 Schur Complement.
Let A be a matrix which is partitioned into four matrix blocks B, C, D and E, i.e.,
A=[BDCE],(32)
View SourceRight-click on figure for MathML and additional features.where B and E are symmetric and nonsingular matrices. Then, Schur complement of block E in matrix A, denoted as A/E, is given by
A/E=B−CE−1D.(33)
View Source

According to related theory of matrices [3], we have A⪰0 if A/E⪰0. Recall that Z−LI2×2LT=I2×2/Z⪰0 (Eq. (31)), where I2×2 is a 2×2 diagonal unit matrix. We then have its (M+2)×(M+2) LMI form:
[ZM×M(LT)2×MLM×2I2×2]⪰0.(34)
View SourceThis way, a semidefinite programming solver [3], [20] can be applied upon the LMI, and the non-convex problem can be solved efficiently and effectively. In summary, the final formulation is given by
argminHs.t.ψ(H,Δ)+αC∗,Constraints in Eqs. (14), (15), (21), (30),& (34).(35)
View SourceRight-click on figure for MathML and additional features.Then, CBikes rounds each station estimation li to its nearest grid. Service providers may customize and enforce extra constraints (some inaccessible area, e.g., hir=0, or region boundary, e.g., A⋅loni+B⋅lati+C≥0) given geographical areas where a dock is not supposed to be deployed (say, a building or a river).

In practice, SDP relaxation renders Eq. (31) a slightly flexible design instead of an over-rigid one, helping adapt to more sophisticated network structures underneath. Other refinements, if needed, can be applied to fine-tune those relaxed distance bounds. One may also check on over-relaxed pairs and adjust using the gradient descent approach [3] to re-satisfy their constraints. We observed only a very small proportion (say, usually less than 1.85 percent) out of all station pairs need a cosmetic refinement, making our SDP design applicable in most cases.

4.5 Complexity Analysis
We briefly analyze the computational complexity of CBikes. Given M stations and total Nf feedbacks, finding Δir's of all R grids takes O(Nf+MR). With M stations and R grids, the complexity of SDP is O(M3R3) [3], [20], and the total sums to O(Nf+M3R3) for CBikes.

Further computation reductions can be made in several ways. For example, for each Si, out of all grids we may only consider the top several location candidates, which have lower joint differences Δir's, and locally search its potentially-nearby neighbors [2], [18] for fewer mutual distance constraints in the optimization. Specifically, for each BSS station i∈{1,…,R}, we find the top R′ (R′<R) grids as the pruned search scope.

Using the above methods, R and constraints (say, Eqs. (14), (19), and (30)) can be reduced significantly, thus achieving better computational efficiency.

SECTION 5Experimental Evaluation
We first present the evaluation setups in Section 5.1, and then illustrate the effects of different system settings in Section 5.2, followed by the experimental results in Section 5.3.

5.1 Evaluation Setups & Schemes Compared
We compare CBikes with the following schemes in BSNR design:

BSNR-w/o-Cost: which greedily considers crowds and historical usage, without considering the cost for CBSNR.

BSNR-w/o-Crow: which focuses on only historical usage [4], [18], without crowd feedbacks, to (re)place or resize the BSS stations.

BSNR-w/o-Hist: which greedily considers only crowdsourced feedbacks without historical usage, to (re)configure the stations.

BSNR-w/o-Tend: which considers no inter-station trip tendency, and independently (re)configures each station [16], [34].

BSNR-w/o-Dist: which does not consider any distance bound constraint [14].

HEU: a heuristic scheme, instead of joint optimization, adopted by some BSS providers (e.g., Capital Bikeshare)7 Site candidates are first filtered by some heuristic criteria7 (like utility). Top-ranked candidates are selected and further fine-grained.

RAND: which randomly (re)places the BSS stations into grids and resizes them without using any design metrics in Section 3.

Previous CBikes [10] (denoted as CBikes-1.0): which is the previously published conference version without considering the usage estimation.

We evaluate the above algorithms based on the datasets (i.e., Divvy, Nice Ride and Metro Bike) described in Section 2.3. For BSNR-w/o-Cost, BSNR-w/o-Crow, BSNR-w/o-Hist, BSNR-w/o-Tend, BSNR-w/o-Dist, HEU and RAND, we adopt the estimated usage at unexplored grids/regions in order to evaluate performance of other setups. We compare the station networks before and after each CBSNR phase, i.e., G˜ and G, including each station's status, i.e., S˜i=(lat˜i,lon˜i,κ˜i) against Si=(lati,loni,κi). We analyze (re)placement of stations and their capacity change. With the timestamps (tm in Definition 4), crowdsourced feedbacks before this CBSNR (or between two consecutive expansions, if any) are used as optimization inputs.

At each CBSNR phase, we use the following evaluation metrics:

Accuracy, precision, f-measure & recall: We compare the difference with the ground-truth station distribution. Specifically, we determine accuracyby checking whether each station is matched with its ground-truth grid. We measure the latter three well-known metrics of binary prediction w.r.t. the grids, i.e., a value 1 (0) represents that a station is (not) placed inside a grid.

(Re)configuration cost: we compare the costs of all schemes, i.e., station (re)placement (C∗) and dock resizing (C†). For the purpose of reference, we also show the ground-truth (GT) costs derived from the actual (re)configuration done by service providers.

Mean absolute error (MAE) & mean squared error (MSE): differences between predicted dock size {κˆi} and ground-truth {κi}.

All computation is done on a desktop of Windows 10, Intel Core i7-6700, 32 GB RAM and Nvidia GTX 1050Ti. Unless otherwise stated, the default parameter values are set as follows. For each CBSNR phase, by analyzing trips and stations before it happens, we empirically set the [d––ij,d¯¯¯ij] as described in Section 3.4, α=0.5 and β=10. We have empirically observed that a large β results in few crowdsourced feedbacks included in the problem formulation, and a small one introduces more noisy feedbacks (detailed results are left due to space limit). Taking into account the above trade-off, in our studies, we empirically set above β, and the setting leads to reasonable performance of CBikes upon the crowdsourced inputs.

To estimate bike usage at unexplored grids, we apply dropout between fully-connected (FC) layers and batch normalization on the data to mitigate overfitting and enhance convergence; the Adam optimizer is used and the learning rate is set to 0.01; for each CBSNR, we leave 10 percent of the grids for the validation of results, and train the neural network model using the rest (90 percent) of the data (feature vectors and the bike usage of the grids with stations); the neural network structure implemented with Tensorflow and Python is: input layer → FC(16) → FC(128) → FC(16) → output layer (with tanh activation), where dim in FC(dim) (with relu activation) represents the number of dimensions inside the fully-connected dense layer. The number of epochs is set to 2,000. The input feature vectors and the output usage data are min-max normalized. For each city, we find P1=5 nearest neighbors and P2=20 types of POIs for prediction of usage potential (the parameter selection is based on the validation process upon the dataset different from the test one). In our experimental studies, as a summary, we observe that the mean absolute percentage errors (MAPEs) for Divvy (446 unexplored grids), Nice Ride (112 unexplored grids) and Metro Ride (103 unexplored grids) are 0.1585, 0.2199, and 0.1942, respectively. Note that we are leveraging the estimated usage of these unexplored grids/regions to differentiate them for CBSNR, and the estimation performance suffices to support station (re)placement decisions.

To balance computation efficiency and (re)placement granularity, we set a 90×90 grid mesh (each grid is 0.23×0.40 km2) for Divvy (Chicago), with a bounding box [−87.80∘W,−87.55∘W;41.74∘ N,42.06∘N]. For Nice Ride (Twin Cities), we use a 60×60 grid mesh (each is 0.32×0.26 km2), within a box [−93.32∘W,−93.08∘W; 44.89∘ N, 45.03∘N]. As LA county is much larger, a 120×120 mesh (each is 0.29×0.42 km2) comes with a box [−118.49∘W, −118.12∘W; 33.71∘N,34.17∘N] for Metro Bike. Based on the existing public market analysis7, we consider c×=80, c∘=100 (station (re)placement) and c↑=c↓=10 (dock resizing).

5.2 Evaluation on System Settings
We first evaluate CBikes’ performance while varying its important components and settings. Note that we set the parameters based only on historical data of periods prior to each CBSNR for bias-free evaluation. Taking Divvy in Chicago as a representative example, we evaluate CBikes’ sensitivity to the following different important parameters.

Local search scope & number of neighbors (Section 4.5): Fig. 17 shows the effect of local search scope in reducing the computation complexity of CBikes. We conducted experimental studies on the reconfiguration of the Divvy system in 2015 when the number of stations increased from 300 to 474. As more grids are involved in the local grid search, the higher (re)placement granularity from CBikes is expected. However, the performance begins to converge after adding a few more neighbors and the computation overhead also increases. Therefore, we select 10 neighbors by default for reasonably efficient deployment.

Fig. 17. - 
(Re)Placement performance versus numbers of neighbors (Divvy).
Fig. 17.
(Re)Placement performance versus numbers of neighbors (Divvy).

Show All

Density of grids (Section 5.1): We show in Fig. 18 CBikes’ sensitivity to the density of grids in terms of accuracy, precision, f-measure and recall for the Divvy dataset. Clearly, the denser grids yield more fine-grained estimation results, at the cost of longer computation time and lower accuracy, especially above a certain grid density (say, after 90×90). On the other hand, sparser grids are easier to predict while their granularity may not represent practical BSS reconfiguration. To balance accuracy, overhead and granularity, we set 90×90 for Divvy by default (similarly for Nice Ride and Metro Bike).

Fig. 18. - 
(Re)Placement performance versus grid sizes (Divvy).
Fig. 18.
(Re)Placement performance versus grid sizes (Divvy).

Show All

5.3 Evaluation on Datasets
Overview. With additional knowledge of estimated usage at unexplored grids/regions, CBikes outperforms CBikes-1.0 in terms of station (re)placement (Tables 1, 2, and 3) and dock resizing (Tables 4, 5, and 6). Compared to our earlier results reported in [10], CBikes achieves higher accuracy (often by 6.58–11.21 percent) and lower reconfiguration cost (often by >40%) thanks to its more external and predicted knowledge. Considering the scale of BSS networks with hundreds of stations, CBikes can help the city planner significantly reduce the planning cost. Overall, the estimated usage improves the station (re)placement more than the dock resizing, mainly due to more location-dependent designs in the (re)placement problem. Since the current model of CBikes outperforms that in [10], unless otherwise stated, we will henceforth focus on evaluating the former.

TABLE 1 Performance Metrics of Station Replacement for Divvy, Chicago for Each Setup

TABLE 2 Performance Metrics of Station Replacement for Nice Ride, Twin Cities for Each Setup
Table 2- 
Performance Metrics of Station Replacement for Nice Ride, Twin Cities for Each Setup
TABLE 3 Performance Metrics of Station Replacement for Metro Ride, LA for Each Setup
Table 3- 
Performance Metrics of Station Replacement for Metro Ride, LA for Each Setup
TABLE 4 Dock Resizing Error in Divvy, Chicago

TABLE 5 Dock Resizing Error in Nice Ride, Twin Cities
Table 5- 
Dock Resizing Error in Nice Ride, Twin Cities
TABLE 6 Dock Resizing Cost in Divvy and Nice Ride
Table 6- 
Dock Resizing Cost in Divvy and Nice Ride
Station (re)placement. We first show the (re)placement performance (accuracy, precision, f-measure and recall) in Tables 1, 2 and 3. Each metric is provided with the mean and 75th/25th percentiles of all CBSNR phases. Note that accuracy is based on station index, while others are for binary grid mapping. As wrong matches of stations may still cause similar grid coverage, the accuracy value can in general be stricter and smaller.

Without mutual constraints, BSNR-w/o-Dist may get similar grid coverage, but lower matching w.r.t. each station. It may hence introduce a much higher moving cost. Overall, without support of historical data and joint fusion-based optimization, BSNR-w/o-Hist may be easily affected by noisy feedbacks, and suffers much worse and varied performance. Lacking crowdsourced feedbacks, BSNR-w/o-Crow cannot determine placement of new stations well, especially for the case of extensive expansion, causing larger variations. HEU (heuristic) adjusts stations without joint optimization and global pictures, and thus more post-processing is required before better results can be achieved. We also note that due to additional estimated usage at unexplored grids, the performance metrics of the schemes improve from the ones without estimated usage [10]. In contrast, with joint information fusion and optimization CBikes outperforms others.

Due to a much larger volume of trip data and denser network with more stations, CBikes in Chicago is optimized better and slightly outperforms those in other two cities. Considering the coupling of users and stations (trip tendency and distance bounds) makes CBikes outperform BSNR-w/o-Tend and BSNR-w/o-Dist. Divvy may witness stronger effect of inter-station trip tendency (more commute and recreational trips) and there is a slightly larger gap between CBikes and BSNR-w/o-Tend. Besides, as more CBSNR phases (total 5) are involved in Twin Cities, all schemes experience more performance variations than in other cases.

Tables 1, 2 and 3 also summarize the total (re)placement costs. Clearly, one may expect a huge cost to be incurred by BSNR-w/o-Cost. With more information fused, CBikes achieves much lower costs and outperforms others. The ground-truth station (re)placement costs (mean, 75, 25 percent) for Divvy, Nice Ride and Metro Ride are respectively (2.19, 2.52, 1.96), (0.62, 0.72, 0.53) and (1.381, 1.49, 0.0). We can also see that its differences with ground-truth (actual (re)placement costs) are also much smaller.

Dock Resizing. Due to space limit and similarity of results, we focus on dock resizing of Divvy and Nice Ride here. Tables 4 and 5 show the different schemes in terms of resizing MAEs and MSEs w.r.t. ground-truth κi's in Chicago and Twin Cities. Large resizing error may lead to underutilization or underprovisioning of docks, causing waste and imbalance of BSS resources. CBikes is shown to achieve much lower errors (usually more than 20 percent improvement) than other schemes. Overall, dock resizing may be easier in Chicago than in Twin Cities due to more trip data and better optimized (re)placement results.

Compared to Divvy, historical usage at Nice Ride is more important in dock resizing than crowd popularity. Due to a sparse network at Nice Ride, most crowds’ feedbacks focus on the issues of adapting coverage or density, without paying attention to the resizing of existing stations. Thus, without sufficient historical usage information, BSNR-w/o-Hist could not effectively determine the importance of each station's capacity, and hence larger error occurs to it at Nice Ride than BSNR-w/o-Crowd and others.

Table 6 summarizes the dock resizing costs (log10(C†)). The ground-truth costs (mean, 75 and 25 percent) for the Divvy and Nice Ride are respectively [3.29, 3.49, 3.06] and [2.94, 3.13, 2.78]. Note that similar costs may occur when wrong subsets of docks are resized at a similar scale. With better accuracy due to more comprehensive information fusion and lower adjustment cost (often by half an order of magnitude), CBikes helps effectively adapt to bike demands with better feasibility.

(Re)Configuration Visualization & Computation Overhead. We visualize (re)configuration prediction and ground-truth results in Figs. 19, 20, and 21 for Chicago ((re)configuration in 2016), Twin Cities ((re)configuration in 2015) and LA County ((re)configuration in 2017). One can see that the predictions via crowdsourced information fusion and joint optimization markedly resemble the actual values. In particular, we show the downtown replacement results without and with usage estimation in Figs. 22 and 23. Thanks to the additional knowledge of the downtown neighborhoods, our new scheme achieves better matching results compared with the previous version.

Fig. 19. - 
Visualization in Chicago (765.6 km$^2$2).
Fig. 19.
Visualization in Chicago (765.6 km2).

Show All

Fig. 20. - 
Matching visualization in Twin Cities (304.87 km$^2$2).
Fig. 20.
Matching visualization in Twin Cities (304.87 km2).

Show All


Fig. 21.
Matching visualization in Los Angeles County (1,754.5 km2).

Show All

Fig. 22. - 
Station (re)placement in Down Town, Minneapolis without usage estimation.
Fig. 22.
Station (re)placement in Down Town, Minneapolis without usage estimation.

Show All

Fig. 23. - 
Station (re)placement in Down Town, Minneapolis with usage estimation.
Fig. 23.
Station (re)placement in Down Town, Minneapolis with usage estimation.

Show All

In terms of computation, the optimization time w.r.t. datasets of Divvy, Nice Ride and Metro Bike are 93.71s (due to much more stations), 19.7s and 7.27s, which are suitable for periodic (monthly or annual) bike station network (re)configuration.

SECTION 6Discussions
Network Shrinkage: As most existing BSS systems are growing in recent years, our evaluation data in hand mainly contains expansions, and does not include any (re)configuration cases with only shrinkage. However, the data we studied includes removed/moved stations (say, around 21.25 percent of all stations). Our model is general enough to accommodate both expansion and shrinkage of BSN, and can achieve good accuracy.

Incorporating Other Information. Due to resource limit, a myriad of other factors, such as demographic distribution and city management regulation [17], [18], [29], may not be well considered in our current prototype. Their absence might also account for the discrepancy from actual results. However, as a generic information fusion framework, CBikes can easily integrate them if and when given. Also, note that we focused on urban-level BSNR, reducing the initial search scope and facilitating decision-making on management of BSNs. Given our results as a reference, secondary fine-grained adjustments of dock locations inside grids may be made subject to various constraints, including bike accessibility, user visibility and space compatibility, which are orthogonal to our focus.

Our studies focus on replacement and resizing cost for long-term decisions of the BSS providers, while operational cost including rebalancing actions and maintenance usually results from short-term and spatio-temporally dynamic factors (including weather and traffic conditions). Among the candidates with similar demands, a station with lower operational cost after (re)placement is often preferred. Despite the lack of dynamic operation data from the service providers, our formulation can be extended to such additional knowledge if available.

The demand from the bike transition is also affected by the inventory status, including the case of invisible demand loss due to a station's out-of-stock condition, and consequent substitution effect of its neighbors. While our comprehensive information fusion takes into account the ride preferences, further investigation should be conducted upon the above issues for better predictability of demands.

Further Denoising. Large error in using crowds’ feedbacks only (BSNR-w/o-Hist in Section 5) indicates the severity of “noisy” crowdsourcing. CBikes can exploit many state-of-the-art approaches [13], [19], [26] to filter the comments or incentivize better suggestions from the crowds. Besides, service providers periodically conduct formal panels or seminars7 where citizen representatives could discuss BSNR. One may design weighting schemes to assess the quality of various feedbacks for better accuracy.

Dynamic Traffic Prediction. Recently, researchers have proposed highly accurate traffic prediction based on deep learning [30], [35]. Yao et al. [30] proposed the meta learning to learn the bike flows from multiple different cities. Wang et al. [23] studied an entropy-based prediction model for future bike usage. While CBikes can be easily integrated with theirs for more accurate and prompt bike traffic prediction [15], [23], our coarse-grained study focuses on qualitative inference of the importance of new city grids in terms of potential bike usage over a long period. In future, we would like to study the prediction of dynamic traffic flows for smart transportation systems.

Acceleration. While CBikes leverages a centralized structure, it can be easily extended to the distributed designs. Furthermore, due to the last-mile nature of the bike sharing, we can cluster the bike stations into many clusters, which are more connected (say, in terms of trip volumes and time correlations) within each cluster than across any two of them, and conduct the cluster-wise computation to reduce centralized computation. Parallelization and GPU can be easily applied, which is outside the scope of this paper and will be part of our future work.

SECTION 7Related Work
We briefly review the related work in the areas of urban computing, station placement and bike sharing systems.

Urban Computing & Information Fusion. Urban computing [37] aims to improve social life quality under the trend of speedy urbanization. With faster computing, smarter IoTs and more sensing data, many urban transportation problems have been redefined intelligently and efficiently. CBikes serves as a novel cross-domain knowledge fusion technique [36], unleashing the data-driven and crowdsourcing power to look at traditional site (re)configuration for emerging bike sharing [6], [7], [11], [28].

Site Placement & Expansion. Due to the recent boom of intelligent transportation, site placement, including gas stations [32], ambulance points [37], and electric vehicle charging docks [14] has been investigated to improve their social and business values.

Note that our work is different from the problems of placing stores [27], gas or electric charging stations [14], since we are given crowdsourced comments and usage statistics from already-deployed stations to (re)configure the BSS network, thus making their initial station placement not directly applicable to our problem. Our joint optimization and crowdsourced fusion are also complementary to emerging urban dynamics [31] and functional zone inference [18], and their studies can be integrated with ours for further refinement of results. Unlike others estimating geographical dependencies of real estate [8], CBikes considers users’ trip tendency (pick-up/drop-off) between the bike stations.

Bike Sharing Systems & Services. Recent popularity of BSS has triggered many interesting studies, such as mobility and demand prediction [18], [24], [29], [33], station re-balancing [17], lane planning [1], trip recommendation and station deployment [16], [18]. However, few of state-of-the-art studies considered optimizing the (re)configuration of existing BSS network with crowdsourced knowledge. Orthogonal to the important spatial-temporal modeling for real-time bike demand prediction (including dynamic geographical, meteorological or seasonal factors) [17], [18], [29], CBikes focuses on fusing long-term batched station usage [25], [38] with aggregated crowdsourced feedbacks, for periodic network (re)configurations. Note that our (re)configuration can be done monthly, seasonally or annually subject to the urbanization process, profit, cost and the service provider's own customization.

Many external factors may influence the success of (re)configuration [33], [38], including human-built facilities (quality/availability), natural environments (like topography, season or weather [29]), socio-economic or psychological considerations (say, social norms or habits), and utility (cost and travel time). Though it is very challenging to design a complete model, incorporating historical spatial-temporal usages, large-scale crowdsourced preferences and refined cost metric would be a good way to accommodate these factors.

In contrast to recent approaches to BSS deployment [18], [34], we propose a generic optimization framework that accommodates both network expansion and reduction using data-driven designs and novel semidefinite programming [3]. CBikes adopts a flexible formulation fusing crowdsourced knowledge with historical usage statistics jointly, and accounts for interactions of users and stations, thus adapting much better to complex station correlations.

Our study is also orthogonal to emerging station-free BSS systems [1], [22]. CBikes can be used for station-free BSS if each parked bike is considered a “dock-less station”. However, as unregulated parking may still prevent its wide acceptance by social-norm, we focus on station-based bike sharing systems in this paper.

SECTION 8Conclusion
BSS network (re)configuration – i.e., station (re)placement and dock resizing – has become very important for many BSS providers. We have proposed a novel optimization framework, CBikes, to (re)configure bike station networks with crowdsourced station suggestions. A comprehensive data analysis first derives inter-station trip tendency and distance constraints. Crowds’ feedbacks, historical usage, costs and designs are then fused into a joint optimization formulation. We have also modeled the spatial distributions of station usage to account for, and estimate the unexplored regions without historical usage information. We further leverage SDP transformation to solve the nonconvex (re)placement problem efficiently and effectively. Extensive experiments with 3 premium BSS systems, supported by related crowds’ feedbacks, have validated the accuracy and effectiveness of CBikes.
