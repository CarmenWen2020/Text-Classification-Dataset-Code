As a key mission of the modern traffic management, crowd flow prediction (CFP) benefits in many tasks of intelligent transportation services. However, most existing techniques focus solely on forecasting entrance and exit flows of metro stations that do not provide enough useful knowledge for traffic management. In practical applications, managers desperately want to solve the problem of getting the potential passenger distributions to help authorities improve transport services, termed as crowd flow distribution (CFD) forecasts. Therefore, to improve the quality of transportation services, we proposed three spatiotemporal models to effectively address the network-wide CFD prediction problem based on the online latent space (OLS) strategy. Our models take into account the various trending patterns and climate influences, as well as the inherent similarities among different stations that are able to predict both CFD and entrance and exit flows precisely. In our online systems, a sequence of CFD snapshots is used as the training data. The latent attribute evolutions of different metro stations can be learned from the previous trend and do the next prediction based on the transition patterns. All the empirical results demonstrate that the three developed models outperform all the other state-of-the-art approaches on three large-scale real-world datasets.
SECTION 1Introduction
Crowd flow prediction is not only one of the crucial research hotspots in the field of intelligent transportation system and urban computing, but is also recognized as an important real-world application benefiting metro development and urban services, such as risk assessment, route planning, congestion avoidance, etc. [1], [2], [3], [4]. It is very important for public safety: for instance, streamed people caused a chaotic crowd stampede at the Falls Festival in Lorne on Victoria's south-west coast, leaved up to 80 people injured; and 36 people died in a catastrophic stampede at the 2015 New Years Eve celebrations in Shanghai [5]. An effective crowd warning and prediction system can effectively prevent people from such real tragedies by utilizing emergency mechanisms.

Thanks to the modern smart-card ticketing system for travel on public transport and portable GPS devices, a large collection of transactional data with spatiotemporal information are now available for analysts to make full use of data and discover useful knowledge. At present, a number of successful and applicable crowd flow prediction methods have been proposed to improve operational performance of transit authorities [6], [7], [8]. Unfortunately, to the best of our knowledge, most existing methods focusing on metro crowd flow prediction are non-network-wide framework. They formulate their problems on separate stations or a few subway lines and none of these approaches can be implemented in forecasting CFD directly.

It should be noted, however, it is inadequate to concentrate solely on entrance and exit flows, managers also desperately want to solve the problem of getting potential passenger distributions, i.e., forecast the crowd flow distribution, termed as CFD forecasts in this paper. Once the passenger flows across the entire transportation network can be gotten, the predicted CFD information will significantly assist the analysis of how a station affects others, which is utmost essential for urban transportation development, e.g., passenger route planning and train scheduling. For instance, Fig. 1a presents a predicted snapshot. The model makes a forecast that there are 272 passengers departure from Central station between 4:45 and 5:00 PM. Among them, 124 passengers will arrive at Bondi Junction, 88 at Redfern, and 60 at Stanmore, respectively. Through obtaining the CFD forecasts among all metro stations, transport managers can timely forecast irregular flow patterns and make a global regulation to maintain the normal train scheduled and make a warning for crowd evacuation. Fig. 1b illustrates this situation that when an irregular entrance flow appears in the Central station, the congestion warning will be transmitted to the all possibly affected stations (Redfern and Bondi Junction).

Fig. 1. - 
An example of crowd flow distribution.
Fig. 1.
An example of crowd flow distribution.

Show All

To date, limited techniques can be used directly to address the network-wide CFD prediction problem. Regression-based methods like Gaussian processes (GP) [9] and auto-regressive integrated moving averages (ARIMA) [10] are proposed to forecast entrance and exit crowd flows. While other approaches, such as wavelet-SVM [11] and probability trees [12] have successfully designed address the classical crowd flow prediction problem, they are hard to implement into the entire metro network. Even though deep neural networks [5], [13], [14], are able to fix the network-wide crowd flow prediction problem, they are sensitive to parameters and incomplete inputs, and require large training data that are not in line with our task. To summarize, our CFD prediction problem faces with three intrinsic challenges here:

High Computational Complexity. The specific CFD prediction problem requires getting all potential flows across entire metro stations, which calculates the entrance/exit flows and CFD simultaneously. Most advanced models like [1], [11], [13], [15], [16], are already computationally expensive even on a few metro lines. Meanwhile, they require repeated large off-line training processes that are difficult to be applied in the online system and network-wide problem.

Dynamic Complexity. The crowd flow changes dynamically which is influenced by complicating factors, such as time, station similarity and climate conditions.

Real-Time Delayed Data Collection. Considering the online system, when we focus on entrance CFD prediction, there is a travel time gap between a passenger enters a station and exits another. These time gaps lead to the online system cannot collect complete data because there are a large number of passengers still on their journeys. In this situation, most city-wide traffic flow prediction methods, such as [5], [14], [17], [18], fail to solve our problem because they require the complete data in training and testing processes. Sections 2.1, 2.2 and 2.2 illustrate the detailed discussions and explanations.

Motivated by these challenges, we propose three online latent space learning models for the CFD prediction of complex metro network, which enables us to forecast both CFD and entrance/exit flows precisely. Recently, the online latent space strategy has been used in the traffic flow prediction task and recognized as an advanced approach to address the spatiotemporal network-wide problem [19], [20], [21]. These models, first embedded the network-wide data into latent spaces by utilizing matrix factorization based methods. Then, temporal information is also involved to capture latent attributes and detect the dynamic patterns with time evolves [22].

In this paper, to effectively infer the spatiotemporal latent attributes among different stations, we take advantages of the non-negative matrix factorization (NMF) strategy to embed the CFD network of each timestamp into two latent spaces; the first latent space indicates the properties of all entrance metro stations, and the second one indicates the properties of all exit metro stations. The first contribution of this paper is to propose a CFD prediction model, called OLS-AO (online latent space model with average optimization), which is able to learn a smooth tendency by utilizing an average optimization strategy from previews timestamps in a given time window. Global similarities among all stations and climates are also involved in this model by a graph Laplacian embedding approach. However, the sudden increase/decrease flows will appear when suffering from some irregular events or during peak times. In such scenarios, the average strategy may prevent OLS-AO from gaining the sudden changes in flows, misleading to the next prediction. To keep the effectiveness of our method running in real-world applications, our second contribution is that we further design another variant model via the optimization of the most recent CFD trends, termed as OLS-MR (online latent space model with most recent trend). Empirical results demonstrate that the second model, OLS-MR, achieves better performances than OLS-AO when crowd flows change dramatically. Accordingly, given that each model performs relatively better in various situations, our third contribution is to propose a dual-track model, called OLS-DT, that takes advantages from both OLS-AO and OLS-MR in a parallel running way.

This paper is an extended version of [21], we improved our previous models by incorporating side information, provided detailed theoretical analyses and conducted more experiments for the comprehensively evaluation from many perspectives. Specifically, we perform a collection of experiments on a large real-world transactional data covering Sydney Trains and make comparisons with other state-of-the-art methods to test the effectiveness of our approaches. These are: (1) CFD predictions across the entire network; (2) major station test; (3) comparisons between weekdays and weekends; rush and non-rush hours.

It should be noted that though our models are proposed to address the CFD prediction problem, they can be transfered to other network-wide crowd flow prediction problem, such as forecasting city-wide crowd flows [5]. To demonstrate the transferability of our methods, we choose another dataset used in [5] to test our performances. All the evaluation results prove the superiority of our models over comparison methods.

SECTION 2Related Work
In this section, we review the current studies on the crowd flow and origin-destination prediction. Then provide the latent space model discussions.

2.1 Crowd Flow Prediction
City network-wide crowd flow prediction is not only a significant task for the modern transportation management, but also optimizes many urban services. Nowadays, some of methods were focusing on forecasting the citywide crowd flows which studied the human movement [3], [5], [18], [23]. Ma et al. devised a series of visualization approaches to show the flows’ dynamic changes in the networks [3]. Zhang et al. proposed deep learning models based on the ResNet to predict crowd inflows and outflows of the entire city regions [5], [14], [17]. The Probabilistic model is an effective approach to estimate the traffic speed. For example, [24] and [25] used trajectory data to estimate citywide traffic volume via probabilistic graphical models. [18] developed a spatial-temporal attention mechanism to predict the city-wide traffic flows. Unfortunately, due to the real-time delayed data collection problem, these city traffic prediction methods cannot be utilized to solve our CFD prediction problem directly because they require complete traffic data.

About the metro crowd flow prediction, most existing methods only focused on forecasting entrance/exit flows at certain stations, they neglected the crowd flows across different stations. We list some classical works here [1], [13], [16]. Wei et al. [16] developed an effective short-term passenger flow prediction model to explore the time variants and capture dynamic patterns on a single subway line. Subsequently, a modified approach is proposed based on the neural network, which aims to solve the same entrance/exit crowd flow prediction task in a few metro lines [13]. Ni et al. [1] used auxiliary information, such as social media events, to improve the forecast performance. Sun et al. [11] and Leng et al. [12] took into account a special flow named transfer passenger flow, which describes the volume of passengers transferring from one line to another. The transfer passenger flow are different from CFD, and their studies fail to formulate a network-wide framework. In fact, none of the discussed methods can solve the network-wide problem efficiently because the widely-used time series strategies, such as GPR [9], ARIMA [10] and recurrent neural network [26], are not suitable for the network-wide problem. They usually focus on the flow prediction for one station or few metro lines that will extremely time-consuming if they are applied to the network-wide problem. Other models focused on exploring subway scheduling delay detection and route choice rather than the network-wide crowd flow forecasting, such as [4], [27], [28]. In conclusion, limited approaches can be used to solve the network-wide CFD prediction directly and efficiently.

2.2 Origin-Destination (OD) Prediction
Origin-Destination Prediction aims to estimate the traffic conditions (e.g., travel times, route planning, traffic flows) between origin and destination points, which is a critical task for transportation planning, operation, and management [29]. Roughly speaking, it can be divided into two categories [30]. The first category is the static estimation [31], [32] that focuses on estimating the average OD pairs in a long-term time period, providing advice on transportation development to authorities. The second category is the dynamic model that usually applies to taxi demand prediction and travel time estimation [30], [33], [34], [35], [36], [37]. The most recent research is proposed in [37], which predicts the OD matrix based on a deep learning model via graph convolution strategy. It divides the city area into grids and predicts the passenger demands of given origin grid-areas and destination grid-areas at a given time slot. However, it seems that this method does not consider the real-time delayed data collection problem, since it makes all trajectory data observed when testing. A similar problem appears in [34], [35] that they are difficult to solve the real online problem.

In summary, to address our real online CFD prediction problem, we must consider the delayed data collection caused by the ongoing journeys.

2.3 Latent Space Models
Recent years have witnessed an explosive growth of the latent space learning for the applications in network-wide problems, such as in traffic prediction [19], community detection systems [38], and recommendation systems [39]. The benefits of low-rank approximation of latent space model is to remove the redundant information of the large-scale matrix and obtain a more compact matrix [40]. Many studies used latent space strategy in the traffic analysis have achieved the good performance. For example, to solve the problem of discovering and localizing abnormal activities in crowded scenes, Yu et al. designed a spatiotemporal detection model based on Laplacian eigenmap strategy [41].[42] focused on addressing the problem of high-order time-series prediction via a tensor structure. The learned latent core tensor can represent the most important attributes of the original time sequences.

As an effective method of latent space learning, non-negative matrix factorization (NMF) has achieved great performance on solving the network-wide problems. Differ from the original NMF, online latent space (OLS) model is able to capture the temporal transition patterns with time evolves [22], [43]. Recent years, many applicable approaches based on OLS were proposed. Deng et al. [19] proposed an online model that extracts temporal and topological attributes of roads for the network traffic speed prediction. The constrained optimization problem also can be solved by the online latent space learning [44], and Wang et al. [45] took advantage of OLS to handle the large-scale streaming datasets very efficiently. However, due to the particularity of CFD prediction problem, none of above studies can be directly used.

SECTION 3Problem Description
In this section, we first describe the crowd flow related data, and then formulate the network-wide CFD prediction problems as a graph network problem.

3.1 Data Description
We describe the mainly used dataset in this paper, which is a large-scale, real-world transactional dataset of Sydney Trains network. After data cleaning,1 the dataset contains above 30 million transactional records covering 178 stations between 7 November 2016 and 11 December 2016. We also downloaded the weather data from Australia Bureau of Meteorology2 of the same time span. Below sections introduce their formats and features.

3.1.1 Transactional Data
Transactional database stores a large number of activity attributes of passengers. We only used the records that are related to our problem and fulfilled the confidentiality deed that ensures the privacy of each passenger. The useful records include: (1) Passenger: a unique hashed identification number; (2) Origin: the time and location where the passenger started a journey; (3) Destination: the time and location where the passenger ended a journey; (4) Duration: the number of seconds taken to complete a journey. An example of data is presented in Fig. 2a.

Fig. 2. - 
A sample of our data.
Fig. 2.
A sample of our data.

Show All

3.1.2 Station Throughput
The station throughput data record the throughputs (entrance and exit) of each station at all timestamps (15 minute interval). This database can reflect the busy degree of each station. An example of data is shown in Fig. 2b.

3.1.3 Weather
Weather data were retrieved from the Australia Bureau of Meteorology. Our data were gathered from the longitude and latitude of staions in the entire Sydney area, so weather conditions for them may vary. Fig. 2c shows a sample of weather data.

3.2 Problem Formulation
Focusing on the CFD prediction problem, we need to record every travel path of every passenger. In this paper, each travel path is termed as an origin-destination pair. We use a directed graph G=(V,E) to define the CFD network, where E is the group of edges and V denotes the group of vertexes. A vertex vi⊆V records the ith entrance metro station, and an edge e(vi,vj) denotes an origin-destination pair from station vi to vj. Assume that the current time is T, for any previous time interval t, the value of each edge e(vi,vj) is associated with the observed flow x(vi,vj), i.e., x(vi,vj) is the total number of passengers that departure from ith station at timestamp t and are going to the jth station. We collect and calculate these passenger numbers from the travel information in the transactional data, i.e., if a passenger is detected departure from the ith station at t, and has arrived at jth station at current time T, the number will add one in the corresponding position of the CFD matrix. Then, G can be represented by CFD matrix Xt=(xij), where xij = x(vi,vj).

The time interval is 15 minutes, which is a appropriate and practical timespan in the real-world application [11], [16], [46]. With time evolves, there are different CFD matrix Xt at timestamp t. For instance, a sample of real Sydney trains network Gt is shown in Fig. 3a, its corresponding CFD matrix Xt is shown in Fig. 3b, where x12 = 100 means that we detected 100 travelers entering at Chatswood (v1) at time interval t and have exited at Town Hall (v2) at the current time interval T.


Fig. 3.
The topology example of metro network.

Show All

Real-Time Delayed Data Collection Problem. Standing at the current timestamp T, it is infeasible to build an exact XT (i.e., an exact XT is that all passengers have arrived their destinations). It is because XT needs to collect all crowd flows, the value, such as xij, is keep growing in the next several timestamps until all passengers have reached their destination. Fig. 4 illustrates an example of how the delayed data affect the data collection. In this case, how can we make sure that the data collected are complete and can be used for learning? To address this challenge, we propose a complete data condition in Section 4.2.

Fig. 4. - 
An example of delayed data collection. Suppose there are two stations ($v_1$v1 and $v_2$v2), and we will only focus on the OD pair from $v_1$v1 to $v_2$v2. At the current timestamp T, the data in $X_{T}$XT and $X_{T-1}$XT-1 are increasing until all passengers have reached their destinations. The blue box illustrates the data we can collect at T. Can we use the collected data “3” in $X_T$XT as a complete data? No, because there are a large number of passengers still on their journeys. Does “22” indicate the complete number of travels in $X_{T-1}$XT-1? Possible but uncertain, because there are many routes (or express and local train) between $v_1$v1 and $v_2$v2, the faster one may have arrived in one time interval, but the slower one maybe not. Make our attention at $X_{T-2}$XT-2. Is the number “75” complete? Much more possible, because two time intervals passed.
Fig. 4.
An example of delayed data collection. Suppose there are two stations (v1 and v2), and we will only focus on the OD pair from v1 to v2. At the current timestamp T, the data in XT and XT−1 are increasing until all passengers have reached their destinations. The blue box illustrates the data we can collect at T. Can we use the collected data “3” in XT as a complete data? No, because there are a large number of passengers still on their journeys. Does “22” indicate the complete number of travels in XT−1? Possible but uncertain, because there are many routes (or express and local train) between v1 and v2, the faster one may have arrived in one time interval, but the slower one maybe not. Make our attention at XT−2. Is the number “75” complete? Much more possible, because two time intervals passed.

Show All

In summary, our paper aims to predict the next short-term CFD matrix XT+1 on-the-fly by using a series of previous CFD, X (X1, X2, …, XT).

3.3 Exit Crowd Flow Prediction Problem
In the above section, we discussed the origin to destination (OD) flows, termed as entrance CFD. However, in real-world scenarios, there is another part of CFD, named as exit CFD. For example, let y(vi,vj) records the number of people that exit at ith station and came from jth station (i.e., a destination to origin pair, (DO)). The value (v3, v1) = 50 shown in Fig. 3b illustrates that there are 50 passengers exit at Strathfield (v3) at time interval t, that came from Chatwood (v1). In this situation, we can construct an exact exit CFD matrix because all the passengers have arrived at their destinations. Although there are two CFD types, they can be addressed in a similar way. Thus, to keep clarity of this paper, we have only presented the optimization strategy for entrance CFD prediction, but test them both in the experiments.

SECTION 4Online Latent Space Model: OLS-AO
In this section, we propose our first model OLS-AO (online latent space with average optimization). We will describe how the latent space model can be used in the metro network, and how to make the model capture temporal patterns. OLS-AO is able to learn the latent temporal transitions via an average optimization strategy, which takes into account climate influences and similarities among different stations as well as the historic trends. Fig. 5 shows the flowchart of this model.


Fig. 5.
The flowchart of OLS-AO. In the learning process, given a set of previous CFD matrices {Xt} with the time window T (use T=4 as an example), OLS-AO learns the latent spaces Wt and Ht of each Xt and the transitions matrices A and B by an average optimization method in Section 4.2.3. The side information is utilized to guide the updating of Wt, Ht, A and B during the learning process. Predicted latent spaces WT+1 and HT+1 can be inferred by the Algorithm 1 shown in Section 4.4.

Show All

4.1 The Basic Latent Space Model
Considering a slice X at timestamp t, the basic latent space model decomposes the CFD matrix X∈Rn×n+ into two matrices W∈Rn×k+ and H∈Rn×k+, where W and H represent the latent spaces; n is the number of stations and k is the number of dimension of latent space. Each row in these matrices represents k attributes of corresponding entrance and exit stations. Hence, the crowd flows between the entrance and exit stations are determined by the interactions between latent attributes
minW≥0,H≥0||X−WH⊤||2F,(1)
View SourceRight-click on figure for MathML and additional features.where H⊤ is the transpose of H.

In this basic latent space model, we utilize the non-negative matrix factorization method. One of the advantages of non-negative constraint is the interpretability of the results and reasonable assumptions of latent attributes [47], [48], [49]. Besides, due to the fact that the predicted values must be non-negative, W and H should be non-negative as well. Fig. 6 gives the intuition of this basic model.

Fig. 6. - 
The latent space example. It represents how to build the static latent space model for our CFD problem in each timestamp. As shown in subfigure(a), crowd flow ($x_{14}$x14) is determined by two sets of latent attributes. These attributes might illustrate many factors, such as time spans, business region, station size, etc. It is remarkable that subfigure(b) provides an example for these latent attributes when k = 3, and these latent attributes can be any factors without existing a strict explanation. The dimension of latent space k is a hyper-parameter.
Fig. 6.
The latent space example. It represents how to build the static latent space model for our CFD problem in each timestamp. As shown in subfigure(a), crowd flow (x14) is determined by two sets of latent attributes. These attributes might illustrate many factors, such as time spans, business region, station size, etc. It is remarkable that subfigure(b) provides an example for these latent attributes when k = 3, and these latent attributes can be any factors without existing a strict explanation. The dimension of latent space k is a hyper-parameter.

Show All

4.2 Online Strategy
4.2.1 Temporal Information Involved
To involve the temporal information, we formulate the original continuous problem as a time-dependent model. Given a time window T (i.e., a sequence contains T previous CFD matrix, and T is also used to present the current time), for each timestamp t ∈ (1, …, T), we aim to learn the corresponding time-dependent latent attribute representations Wt and Ht from Xt. After involving the time dimension, our model can be expressed as
minWt≥0,Ht≥0I=∑t=1T||Pt⊙(Xt−WtH⊤t)||2F,(2)
View SourceRight-click on figure for MathML and additional features.where ⊙ is the entrywise product; and Pt denotes the indication matrix for all the complete trips in Xt. The construction process of Pt is discussed next.

4.2.2 Address the Delayed Data Collection Problem
For entrance CFD problem, we only set Pt = 1 (1≤i,j≤n) if the time horizon between t and present time T is sufficient for the vast majority of people to have arrived at their destination. As we mentioned in Sections 1 and 3, the real-time delayed data collection problem illustrates that we can only obtain a part of complete trips, and other flows are incomplete until the last passenger finish his journey and exit at station. In this case, how can we make sure that the data collected are complete?

Complete Data Condition. To make the problem solvable, we assume that the travel times for each OD pair in each timestamp fits the normal distribution based on the suggestion in [50], i.e., Zq,t∼N(μq,t,σ2q,t). Zq,t denotes the travel times for one OD pair at timestamp t (qth, q∈ all CFD). Then, based on the property of normal distribution, if the time horizon is greater than μq,t+2σq,t, we have approximately 98 percent confidence that all passengers have reached their destination.

Fig. 7 represents the process of constructing the indication matrix Pt. X1 is the first CFD matrix in the time window. The value of x14 means we have collected 317 passengers that enter at v1 at time t=1 and then exit at v4 until T. Due to the fact that the time gap between 1 and T is larger than the learned μq,1+2σq,1, we have a very high confidence that the collected data (317) is complete. In contrast, as shown in X3, the time gap between 3 and T is smaller than μq,3+2σq,3, which does not gain the enough confidence level. Then the entry 153 is recognized as a incomplete data.

Fig. 7. - 
An example of building indication matrix $P_t$Pt. We take the entries $x_{14}$x14 and $p_{14}$p14 as the example. If the values meet the condition of data completion, then we can use these values as the guidance, $p_{14}$p14 = 1 as shown in the red solid line box; if not, set $p_{14}$p14 to 0 which means the collected data are incomplete yet as shown in the blue dotted line box.
Fig. 7.
An example of building indication matrix Pt. We take the entries x14 and p14 as the example. If the values meet the condition of data completion, then we can use these values as the guidance, p14 = 1 as shown in the red solid line box; if not, set p14 to 0 which means the collected data are incomplete yet as shown in the blue dotted line box.

Show All

4.2.3 Latent Transition Learning
Since our model is an online dynamic prediction system, crowd flow is continually changing over time. We focus on learning the transition patterns of latent spaces Wt and Ht from previous timestamps to the next. The evolving patterns can be captured by these learned transitions, so we can do a prediction based on the current CFD condition.

In our first model, OLS-AO, we choose an average optimization strategy to learn two transition matrices A∈Rk×k+ and B∈Rk×k+, which represent the smooth trends of Wt and H⊤t in T previous CFD matrices. The average optimization strategy is able to filter accidental noise in some degrees, such as urgent construction, Gate failure, etc. Therefore, the learned trends can be recognized as a representation of the stable CFD changes from previous timestamps. For example, A and B approximate the changes of W and H between t-1 to t, i.e., Wt=Wt−1A and Ht=Ht−1B.

To this stage, the latent transition learning process is shown as Equation (4)
minWt,Ht,A,BT=∑t=2T(||Wt−Wt−1A||2F+||Ht−Ht−1B||2F).(3)
View SourceRight-click on figure for MathML and additional features.

We consider our online optimization problems jointly, then we can get
minWt,Ht,A,BL1=I+λ1T,(4)
View SourceRight-click on figure for MathML and additional features.where λ1 is the regularization parameter.

In a real-world application, crowd flows would be influenced by various complex factors, such as the similarities among stations, weather, and periodic property. Therefore, to improve the forecasting performance, we will take these valuable resources into consideration in the next section.

4.3 Learning From Side Information
4.3.1 Incorporating With Inherent and External Influences
Based on the phenomenon that the development of a city gradually evolves various functional regions, such as residential, business, and tourist areas, where the regions have the same functional property will have strong connections with each other [2]. The stations located in the same functional regions will also have strong similarities with each other. To consider the inherent features and extract much more non-linear information, we build the kernel Kst to present the correlations among stations.

Let xi (1≤i≤n) be a flow distribution at timestamp t of ith entrance station, and ϕ(⋅) be the mapping that maps xi onto the reproducing kernel Hilbert space. In this case, a kernel matrix Kst is then calculated by applying the kernel function κ(xi,xj) = ϕ(xi)⊤ϕ(xj) into {xi}ni=1. The similarity kernel matrices are learned by historic data due to the incomplete data issue in the online process.

As similar to the building process of Kst, we can build a kernel matrix Kw based on the weather view. Unlike Kst changing with a small time span, Kw presents the weather condition in a day. We apply commonly used radial basis function (RBF) kernels to build Kst and Kw. For example, assume r1 and r2 indicate the weather properties of station v1 and v2, the weather kernel Kw is generated by Kw(r1,r2)=exp(−δ||r1,r2||2), where δ is an RBF kernel parameter, we set δ = 0.2 in our paper. Then we use the following equation to fuse these two components
Kt=Kst+αYt⊙Kw,(5)
View SourceRight-click on figure for MathML and additional features.where Yt is a weight matrix at timestamp t, which is learned by the throughput data (normalized into [0, 1]); Yt(i,j) = 1 - dist(yi,yj), where dist() is the euclidean distance; the function of Yt is to balance the different influences between large and small stations; and α is a balance factor. The sensitivity analysis of all parameters and the effects of performance with various settings are shown in Section 6.9.

After above steps, we take into account the graph Laplacian dynamics [51] into our model to obtain the spatial structure of each station. Specifically, we construct a graph Laplacian matrix Lt, defined as Lt=Dt−Kt, where Dt is a diagonal matrix Dt(ii)=∑j(Kt(ij)). This new constraint can be expressed as the following optimization:
minWtS=∑t=1TTr(W⊤tLtWt).(6)
View SourceRight-click on figure for MathML and additional features.

The intuition behind this graph-based optimization is that one of the latent spaces Wt can learn the similarity structure from Kt.

4.3.2 Historical Guidance
Traffic periodicity is a very important factor for the existing studies. Crowd flows also represent the stable and daily periodic properties, especially on weekdays. Thanks to this phenomenon, our prediction objective XT+1 is close to its historic guidance XhT+1. Thus, history information is an important guidance that should be considered. We denote that WhT+1 and HhT+1 are two latent matrices learned from history for the next timestamp T+1. We aim to learn variables by consulting these historical guidances. More importantly, the other benefit of this strategy is that it adapts to the sharpening transformation from peak time to non-peak time.

The historical guidance WhT+1 and HhT+1 can be learned by Equation (4) with a slight modification, of replacing Xt, Wt and Ht with Xht, Wht and Hht, respectively, and setting T to T+1. The indication matrix Pt should be removed in the learning process because all historical trips are completed. Then, historical guidance is expressed as
minWT,HT,A,BH=||WhT+1−WTA||2F+||HhT+1−HTB||2F,(7)
View SourceRight-click on figure for MathML and additional features.where WT and HT are the latent spaces at timestamp T.

Taking all the above techniques into consideration, our final jointly loss function is expressed as
minWt,Ht,A,BL=I+λ1T+λ2S+λ3H,(8)
View SourceRight-click on figure for MathML and additional features.where λ1 to λ3 are the regularization parameters.

After solving Equation (8), the learned matrices WT, HT, A and B can be used to do the prediction. The next CFD matrix XT+1 is
XT+1=(WTA)(HTB)⊤.(9)
View Source

4.4 Learning Process
Equation (8) is a complex non-convex problem. In this case, we choose an effective gradient descent method with multiplicative update strategy [47] to discover the local optimization.

Theorem 1.
L is non-increasing under the following update rules in Equations (10)-(14) by optimizing Wt, Ht, A and B alternatively
Wt=Wt⊙Pt⊙XtHt+λ1(Wt−1A+Wt+1A⊤)+λ2KtWt+λ3^WhT+1A⊤Pt⊙(WtH⊤t)Ht+λ1(Wt+WtAA⊤)+λ2DtWt+λ3^WTAA⊤(10)
View SourceRight-click on figure for MathML and additional features.
Ht=Ht⊙P⊤t⊙X⊤tWt+λ1(Ht−1B+Ht+1B⊤)+λ3^HhT+1B⊤P⊤t⊙(HtW⊤t)Wt+λ1(Ht+HtBB⊤)+λ3^HTBB⊤,(11)
View SourceRight-click on figure for MathML and additional features.where λ3^ is given by:
λ3^={λ3,t=T0,otherwise(12)
View SourceRight-click on figure for MathML and additional features.
A=A⊙λ1∑Tt=1W⊤t−1Wt+λ3W⊤TWhT+1λ1∑Tt=1W⊤t−1(Wt−1A)+λ3W⊤T(WTA)(13)
View Source
B=B⊙λ1∑Tt=1H⊤t−1Ht+λ3H⊤THhT+1λ1∑Tt=1H⊤t−1(Ht−1B)+λ3H⊤T(HTB).(14)
View SourceRight-click on figure for MathML and additional features.

It is noteworthy that the update rules indicate a time-related learning process, the information from previous and next timestamps (Wt−1 and Wt+1) affect each other. This chain updating rules make sure all variables are learned comprehensively with the side information guidance. We now derive the update rule of Wt as an example, other variables can be solved with a similar process. Considering Wt while all other variables are fixed, Equation (8) can be rewritten as follows:
L=∑t=1TTr((Pt⊙(Xt−WtH⊤t))(Pt⊙(Xt−WtH⊤t))⊤)+λ1∑t=2TTr((Wt−Wt−1A)(Wt−Wt−1A)⊤)+λ2∑t=1TTr(W⊤tLtWt)+λ3Tr((WhT+1−WTA)(WhT+1−WTA)⊤)+J(Ht,B),(15)
View SourceRight-click on figure for MathML and additional features.where J(Ht,B) indicates the components of L excluding Wt, which is a constant value when only considering the partial derivative of Wt.

Taking the derivation of L with respect to Wt, we can get g(Wt) according to [52]
g(Wt)=2(−Pt⊙XtHt+Pt⊙(WtH⊤t)Ht)+2λ1(−Wt−1A+Wt−Wt+1A⊤+WtAA⊤)+2λ2(−KtWt+DtWt)+2λ3^(−WhT+1A⊤+WTAA⊤).(16)
View SourceRight-click on figure for MathML and additional features.

As introduced in [47], the traditional gradient descent method is expressed as: Wt = Wt - γg(Wt) = Wt - γ(Pitem+Nitem), where Pitem and Nitem denote all positive and negative items in g(Wt), respectively (e.g., Pitem = 2(Pt⊙(WtH⊤t)Ht+λ1(Wt+WtAA⊤)+λ2DtWt+λ3^WTAA⊤)). We can set the step γ to
γ=WtPitem,(17)
View SourceRight-click on figure for MathML and additional features.then, we got the update rule of Wt as shown in Equation (10).

Algorithm 1 summarizes our learning and prediction process of OLS-AO.

Algorithm 1. OLS-AO
Input: CFD matrices [X1,…,XT]; similarty kernels [K1,…,KT]; historic guidance WhT+1, HhT+1

Output: prediction XT+1

initialize Wt,Ht,A and B by historical values

for Epoch = 1 to M do

if |Li−Li+1| / Li ≥ ε then

for t = 1 to T do

update Wt and Ht By Equations (10) - (12)

update A and B By Equations (13) and (14)

else

Break

Return XT+1 By Equation (9)

4.5 Analysis of Complexity and Convergence
We first discuss the computational complexity of OLS-AO. As shown in Equations (10)-(14) and Algorithm 1, the computational complexity is dominated by the matrix multiplication operations. For each iteration, the computational complexity of OLS-AO is O(Tn2k).

In terms of convergence, Algorithm 1 is guaranteed to converge at a local optimal solution by optimizing Wt, Ht, A and B alternatively. The convergence trends are plotted in Section 6.10. To prove Lemma 1, we will find an auxiliary function similar to that used in the [47]. We here give the convergence proof of HT and other variables can similarly be proofed.

4.5.1 Proof of Theorem 1
Definition 1.
Q(h,h′) is an auxiliary function for our final function L(h) if the following conditions are satisfied:
Q(h′,h)≥L(h) and Q(h,h)=L(h).(18)
View SourceRight-click on figure for MathML and additional features.

Lemma 1.
If Q is an auxiliary function, then L is non-increasing under the update
ht+1=argminhQ(h,ht),(19)
View SourceRight-click on figure for MathML and additional features.consequently, we have
L(ht+1)≤Q(ht+1,ht)≤Q(ht,ht)=L(ht).(20)
View SourceRight-click on figure for MathML and additional features.

The proof of Lemma 1 is given by [47]. Lemma 1 illustrates that L(ht+1)≤L(ht) when exits Q(h,ht).

Lemma 2.
If R(ht) is a diagonal matrix under the following definition:
R(ht)=diag((WTdiag(p)W+I+B⊤B)h/h),(21)
View Sourcewhere p is a column vector of PT⊙PT, then
Q(h,ht)=L(ht)+(h−ht)T∇L(ht)+12(h−ht)TR(ht)(h−ht),(22)
View SourceRight-click on figure for MathML and additional features.is an auxiliary function for L.

Proof.
Since Q(h,h) = L(h) is obvious, we need only show that Q(h,ht)≥L(h), which is equivalent to
0≤(h−ht)T[R(ht)−(WTdiag(p)W+I+B⊤B)](h−ht).(23)
View SourceRight-click on figure for MathML and additional features.

Let O = WTdiag(p)W+I+B⊤B, then [R(ht)−(WTdiag(p)W+I+B⊤B)] can be expressed as [diag(Oh/h)−O]. As the proof provided in [53], if O is a symmetric non-negative matrix and h be a positive vector, then the matrix O^=diag(Oh./h)−O⪰0.

Replacing Q(h,ht) in Equations (19) by (22), we can obtain update rules and proof L is non-increasing of Theorem 1.

SECTION 5A Variant Model OLS-MR and a Dual- Track Model OLS-DT
This section proposes one variant model OLS-MR (online latent space model via learning most recent trend) and a dual-track model to improve the CFD forecasting performance.

5.1 Motivation
Our first model, OLS-AO relies on the average optimization strategy to learn the transition matrices A and B. This learning method extracts long-term tendencies that can avoid abnormal noises, especially in the non-rush hours. However, it is insensitive to the sharp change of crowd flows. For example, Fig. 8a shows the real entrance flows of three stations between 10:00 AM and 3:00 PM. During these stable passenger flows, as shown in the green box, OLS-AO will perform well. However, a sudden increase flow will occur during the peak times, e.g., between 7:00 to 8:00 AM in Fig. 8b, the crowd flow shoots upward. Intuitively, OLS-AO is insensitive to this scenario due to the average optimization strategy. Hence, this situation inspires us to propose another model to handle situations where sudden changes flow appear.

Fig. 8. - 
Crowd flow changes in different scenarios.
Fig. 8.
Crowd flow changes in different scenarios.

Show All

5.2 Learning the Most Recent Trend
As discussed above, we want to learn the most recent trend to fix the weakness of OLS-AO. Motivated by this point, we partition the transition matrices A and B by each timestamp t, i.e., learning At and Bt from one snapshot to the next. Note that, even though A and B are disassembled to the time-related variables, it does not mean that At or Bt only learn knowledge from timestamp t-1. There is an association chain between time 1 to time T, which can be illustrated by the update rules in Equations (27) - (30).

In detail, we revise the optimization function T~ and H~ in Equations (3) and (7) respectively to tackle the most recent dynamic trends as follows:
minWt,Ht,At,BtT~=∑t=2T(||Wt−Wt−1At−1||2F+||Ht−Ht−1Bt−1||2F)(24)
View Source
minWT,HT,AT,BTH~=||WhT+1−WTAT||2F+||HT+1−HTBT||2F.(25)
View SourceRight-click on figure for MathML and additional features.AT and BT are transition matrices when t=T. After incorporating the side information described in Section 4.3, the final loss function of OLS-MR is
minWt,Ht,At,BtL~=I+η1T~+η2S+η3H~,(26)
View SourceRight-click on figure for MathML and additional features.where η1 to η3 are the regularization parameters.

5.3 Learning Process
Theorem 2.
L~ is non-increasing under the following update rules in Equations (27)-(30) by optimizing Wt, Ht, At and Bt alternatively
Wt=Wt⊙Pt⊙XtHt+η1(Wt−1At−1+Wt+1A⊤t)+η2KtWt+η3^WhT+1A⊤TPt⊙(WtH⊤t)Ht+η1(Wt+WtAtA⊤t)+η2DtWt+η3^WTATA⊤T(27)
View Source
Ht=Ht⊙P⊤t⊙X⊤tWt+η1(Ht−1Bt−1+Ht+1B⊤t)+η3^HhT+1B⊤TP⊤t⊙(HtW⊤t)Wt+η1(Ht+HtBtB⊤t)+η3^HTBTB⊤T(28)
View SourceRight-click on figure for MathML and additional features.
At=At⊙η1W⊤tWt+1+η3^W⊤TWhT+1η1W⊤t(WtAt)+η3^W⊤T(WTAT)(29)
View SourceRight-click on figure for MathML and additional features.
Bt=Bt⊙η1H⊤tHt+1+η3^H⊤THhT+1η1H⊤t(HtBt)+η3^H⊤T(HTBT).(30)
View Source

Equations (27) - (30) satisfy
η3^={η3,t=T0,otherwise.
View SourceRight-click on figure for MathML and additional features.

Theorem 2 can be proved as shown in Sections 4.4 and 4.5 with slight changes. Based on Theorem 2, the learning and prediction processes for OLS-MR are summarized in Algorithm 2.

Algorithm 2. OLS-MR
Input: CFD matrices [X1,…,XT]; similarty kernels [K1,…,KT]; historic guidance WhT+1, HhT+1

Output: prediction XT+1

initialize Wt,Ht,At and Bt by historical values

for Epoch = 1 to M do

if ∣∣L~i−L~i+1∣∣ / L~i ≥ ε do

for t = 1 to T do

update Wt and Ht By Equations (27) and (28)

update At and Bt By Equations (29) and (30)

else

Break

Return XT+1 By DT+1=(WTAT)(HTBT)⊤

We theoretically discuss the OLS-MR here. The computational complexity of OLS-MR is also determined by the matrix multiplication operations. For each iteration, the computational complexity is O(Tn2k). Furthermore, even though OLS-MR relies on the most previous trend, the learning process also leverage the information from previous and next timestamps (Wt−1 and Wt+1), as well as the transition matrices. This chain updating rules make sure all training data are considered and associated with each other.

5.4 A Dual-Track Model
As the fact that OLS-AO and OLS-MR execute respectively stronger in two different situations (the first adapts to the stable flows and the second adapts to the sudden changes of flows.) A dual-track strategy can be proposed to integrate both two models that to solve the prediction task in a variety of crowd flow situations.

Due to the real-time delayed data collection problem, the ground-truth at current time T is not available, but we only can obtain the total number of entrance crowd flows for each station at current time. Hence, we compare the sum of each row in XT with ground-truth, and use MAE as the selection criteria for the next prediction. Inspired by [54], we use a temporally-varying fusion strategy in our dual-track model. The prediction of OLS-DT is expressed as
XDTT+1=⎧⎩⎨⎪⎪⎪⎪τXAOT+1+(1−τ)XMRT+1XAOT+1XMRT+1if  |MAEAO−MAEMR|≤ξif  MAEMR−MAEAO>ξif  MAEAO−MAEMR>ξ,(31)
View SourceRight-click on figure for MathML and additional features.where τ = e−MAEAOe−MAEAO+e−MAEMR; and ξ = 0.1 is a threshold; MAEAO and MAEMR present the prediction errors at timestamp T of OLS-AO and OLS-MR, respectively. Our dual-track model (OLS-DT) is presented in Algorithm 3.

Algorithm 3. OLS-DT
while need to predict next XT+1 do

if |MAEAO−MAEMR|≤ξ then

XDTT+1 = τXAOT+1+(1−τ)XMRT+1;

else

if MAEMR−MAEAO>ξ then

XDTT+1 = XAOT+1;

else

XDTT+1 = XMRT+1;

SECTION 6Experiments
In this section, we report on the experiments carried out on three real-world datasets.

6.1 Datasets
The state-wide train network. This dataset is provided by NSW Sydney Trains as shown in Section 3.1. This dataset contains above 30 million trajectories covering 178 stations between 7 November 2016 and 11 December 2016; the average trajectories (including entrance and exit flows) on weekdays and weekends are 1.04 and 0.53 million, respectively. We pick the data between 7 November 2016 and 20 November 2016 as the training set (used to calculate the historic guidance and pick the parameters); the remaining data are used as the test set. For the detailed of strategy of picking the best hyper-parameters, please refer to the next section.

The major station network. We select the top 20 stations as the major stations based on throughput capacity. This selected dataset contains This dataset contains about 19.8 million trajectories in total; the average trajectories (including entrance and exit flows) on weekdays and weekends are 0.68 and 0.34 million, respectively. The division of training and test data is the same as the first dataset.

TaxiBJ. As we mentioned in the Introduction section, our methods not only can effectively address the CFD prediction, but also solve other network-wide flow forecasting task. We choose this widely used dataset to demonstrate the transferability of our models. For more details about this dataset, please refer to [5]. We used the data between 14 March 2016 and 10 April 2016 as our test data; the data between 15 February 2016 and 13 March 2016 were used as the training data (pick parameters).

6.2 Baselines & Measures & Parameters
Baselines. The baselines are outlined as follows. All parameters used in baselines are picked by a grid search approach.

HA: We predict CFD by the historical average method on each timespan. For example, all historical time spans from 9:45 to 10:00 AM on Tuesdays are utilized to do the forecast for the same time interval.

ONMF: the traditional Online non-negative matrix factorization based method without utilizing side information.

LSM-RN-All: A state-of-the-art OLS-based method to predict network-wide traffic speed problem [19].

SARIMA: A linear regression model with seasonal property to effectively predict future values in a time series.

GPR: Gaussian process regression (GPR) would handle the spatiotemporal pattern prediction in a stochastic process. It usually suffers from a heavy computational cost [55].

Measures. Two metrics are used in this paper, Mean Relative Error (MRE) and Mean Absolute Error (MAE), as they are generally employed in evaluating time series accuracy [56]
MAE=∑Ωi=1|ci−c^i|Ω,MRE=∑Ωi=1|ci−c^i|∑Ωi=1ci,
View SourceRight-click on figure for MathML and additional features.where c^i is a forecasting value and ci is the ground truth; Ω is the number of predictions.

Initialization. To ensure a better performance, we initialize latent space matrices of ONMF, LSM-RN-All, and proposed models in each time interval with corresponding historic data. This initialization method is reasonable under the assumption that model parameters will not change much compared to their historic values [19].

Picking Parameters. The hyper-parameters used in the experiments for different application scenarios are shown in Table 1. All regularization parameters are optimized by the grid search method. We set latent dimension k = 70, time window T of OLS-AO to 6 and T of OLS-MR to 3 for a good balance between time cost and performance. Much more details about sensitivity of parameters can be found in Section 6.9.

TABLE 1 Parameters
Table 1- 
Parameters
It is worth notice that the proposed methods are online models. For example, when we want to predict CFD matrix at T+1, the data in T previous timestamps can be seen as the training set, and data at timestamp T+1 is used for validation. For the next prediction step, data at T+2 becomes the validation set and data in its T previous timestamps is recognized as the training set. Finally we go through all the training set, and get the average error on validation set. The hyper-parameters achieved the lowest error are picked in the test.

6.3 Results on the State-Wide Train Network
We first assess the performances of our models across the state-wide train network. We consider two types of CFD flows (entrance and exit as discussed in Sections 3.2 and 3.3); comparisons between peak and non-peak times; and results between weekdays and weekends to evaluate our models comprehensively.

Table 2 reports the average MRE in different scenarios. We pick three noticeable time periods in this test, termed as M-rush (morning rush), Non-rush and A-rush (afternoon rush). In the weekday test, it is apparent that OLS-AO performs better during non-rush times, while OLS-MR performs better during rush times in both the entrance and the exit CFD prediction tasks. In the weekend test, OLS-AO achieves the better results because passenger flows are more stable throughout the day. The dual-track model which incorporates both OLS-AO and OLS-MR that performs almost the best through all experiments. Because OLS-AO and OLS-MR separately designed for the rush and non-rush hours, OLS-DT usually gets the closely results as the better one of the first two models. To keep image clear, we only draw top four methods in Fig. 9 because other baselines perform far worse than the select methods. In addition, we remove the lines of OLS-DT because it overlaps closely with the best one of OLS-AO and OLS-MR that leads to a bad visualization in Figures. The tests drawn in Fig. 9 demonstrate the conclusions above and the results of Table 2. For the regression methods, GPR and SARIMA, are both sensitive to the incomplete data, but SARIMA takes periodicity into consideration that gets the better results. They need to build models for every crowd flow that results in the huge re-training cost and the high complexity. Although, ONMF and LSM-RN-All can solve the network-wide prediction problem, they do not incorporate historic guidance that performance suffers. More comparisons are shown in Table 3.

TABLE 2 Comparisons on Different Time Spans
Table 2- 
Comparisons on Different Time Spans
TABLE 3 Overall Results
Table 3- 
Overall Results
Fig. 9. - 
CFD prediction on the entire trains network.
Fig. 9.
CFD prediction on the entire trains network.

Show All

Table 3 presents the average errors of all test methods for each timestamp between 6.00 am and 10.00 pm. OLS-AO provides the best performance on weekends compared with other baselines because sudden changes in flow are rare. However, on weekdays, OLS-AO and OLS-MR will outperform alternatively in different scenarios; in this case, the dual-track method achieve the best performance on weekdays.

In summary, the first two purpose-built models, OLS-AO and OLS-MR, have their own advantages for network-wide CFD predictions for complex metro system. OLS-DT achieves the best performances on weekdays and weekends.

6.4 Results for the Major Stations
This evaluation aims to remove any interference created by smaller stations to evaluate our methods’ more comprehensively. In this case, we select the top 20 stations as the major stations based on throughput capacity. Table 4 shows the performances from three perspectives, including tests on entrance/exit CFD, weekdays and weekends, rush and non-rush hours. It is apparent that the experimental results lead to similar conclusions to our first test. The proposed three models outperform other baseline methods, OLS-AO and OLS-MR are able to adapt to different scenarios, and OLS-DT achieve the best overall results.

TABLE 4 Comparisons on Major Stations
Table 4- 
Comparisons on Major Stations
6.5 Results on Different Time Intervals
In the real-world crowd flow prediction application, an appropriate and practical time interval is around 15 minutes [11], [16], [46]. Authorities prefer a short-term prediction that can manage services more flexibly. We add this set of experiments to demonstrate the robustness of our models with different time intervals.

Table 5 represents the average MAE and MRE with different time intervals (half-hour and one-hour). In this weekday test, it is apparent that OLS-DT achieves better results than OLS-AO and OLS-MR, and these three proposed online models outperform other baselines. Even though that the spatial-temporal continuity will become weaker when the time interval increases, our models can learn periodicity knowledge from the historical guidance. This strategy leads to good performances when testing on the longer time intervals.

TABLE 5 Comparisons With Different Time Intervals
Table 5- 
Comparisons With Different Time Intervals
6.6 Visualization of Crowd Flow Distribution
Fig. 10 gives an intuitive presentation of the CFD prediction in Sydney. The forecast time span is 3:45 – 4:00 PM on 7 November 2016. The first red marked value in the rectangle presents the predicted result of OLS-DT, while the value in the bracket is its ground truth. This visualization illustrates the effectiveness of our model. In this time period, people tend to go home (large residential areas, Hurstville and Burwood), and a small number of people are going to Central.

Fig. 10. - 
The visualization of CFD prediction.
Fig. 10.
The visualization of CFD prediction.

Show All

6.7 Transferability Test on TaxiBJ Dataset
This set of experiments is designed to assess the transferability of our three models. OLS-AO, OLS-MR and OLS-DT are not only used for CFD prediction but suitable for other network-wide prediction problem, such as city-wide crowd flow forecasting. There are two types of flows of each city area, named as “Outflow” and “Inflow” where Outflow is the number of traffic crowds leaving an area to other regions in one timestamp, and Inflow presents the number of traffic crowds entering an area from other regions in one timestamp [5]. The time interval in this dataset is 30 minutes. Due to the fact that this problem does not suffer from the incomplete data challenge, we can remove the indication matrix Pt when conducting experiments.

Table 6 shows results of our methods together with some baselines. Compared with other methods, our three models can achieve the great accuracies. OLS-DT is performs the best on weekdays and weekends. In general, our methods perform better than other baselines that have the strong transferability to solve other crowd flow problem.

TABLE 6 Transferability Test on TaxiBJ Dataset
Table 6- 
Transferability Test on TaxiBJ Dataset
6.8 Ablation Study
In this section, we analyses the contribution of each component of the final optimization function. We only report the average mean relative errors on entrance CFD predictions on weekdays because other parts of experiments obtain similar conclusions.

Table 7 illustrates that how the side information affect performance. The term “Online” means the online strategy with transition learning process, OLS-AO uses the average optimization and OLS-MR learns the most recent trend. Kt illustrates whether the model involve the inherent and external influences, e.g., station similarities and weather. h indicates the historical guidance is used or not.

TABLE 7 Ablation Studies on Models
Table 7- 
Ablation Studies on Models
As the tests shown in Table 7, we clearly see that two models perform bad when only considering the online strategy, that is also the reason why transitional ONMF model and LSM-RN-All cannot achieve good results. The other combinations show that the side information make great improvements of two models, especially for the historical guidance. This is mainly caused by the daily periodicity of crowd flows, which means CFDs are usually very stable and have a strong daily periodic property. The results of combination of “Online” and “h” represent the performances of our previous work in [21], which are slightly worse than the extended models. The inherent and external influences give a help for a better performance because it have drawn useful information from station correlations and the weather conditions.

6.9 The Sensitivity of Parameters
Table 1 presents the best choice of each parameter. To evaluate how they affect the performance of our methods, we varied them in a wide range in this test. In this section, we have only presented the outcomes for the entrance CFD on weekdays due to the page limitation.

Fig. 11a shows the different performances with a varying setting for α. This factor controls the weights of weather effect. As can be shown in the results, α = 2−3 is the best choice for both OLS-AO and OLS-MR. Beside, α is not sensitive in the range of 2−8 and 2−1.

Fig. 11. - 
Effect of parameters.
Fig. 11.
Effect of parameters.

Show All

Fig. 11b represents various results by varying λ1 and η1. These two parameters connect to our online process that control the strength of the current flow trends to use. λ1 = 26 and η1 = 21.5 achieve the best results for OLS-AO and OLS-MR, respectively.

Fig. 11c plots the effects with various λ2 and η2. The strength of guidance from inherent and external information are determined by these two parameters. λ2=2−1 and η2=2−5 yield the best performances for OLS-AO and OLS-MR, respectively.

Fig. 11d illustrates the impacts of varying λ3 and η3 which effect the power of historic guidance. Generally, OLS-AO requires more historical information than OLS-MR to perform better. The best values of λ3 and η3 were 213 and 25, respectively.

In a summary, the parameters used in this paper are benefit to the improvement of our models. Furthermore, they are not sensitively in a part of searching range which means our model are stable and easy fine-tuning.

6.10 Scalability
The scalability test is used to assess the efficiency of various approaches. We first to present the effects of window size T and the number of latent dimension k. Fig. 12a shows the various performances (left axis) and time costs (right axis) with various k. Generally, both OLS-AO and OLS-MR achieve the better performances but longer computational cost with k increased. Therefore, we set k to 70 for a good balance between computational cost and the prediction results. Fig. 12b shows the different prediction errors (left axis) and computational cost (right axis) with a varying setting for T. OLS-AO gets a minimum MAE when T = 6, while OLS-MR performs good when T≥3. Hence, due to the computational cost will grow rapidly with T increases, we suggest setting T to 3 in our task.

Table 8 illustrates the results of the forecasting times and training process for one prediction step on the state-wide metro network based on the above recommended T and k. The regression methods, SARIMA and GPR, required an enormous amount of re-training time, which is difficult to implement in a real-time system. LSM and ONMF were faster at prediction than OLS-AO, OLS-MR but show a lower accuracy. The scalability test demonstrates that our models, OLS-AO and OLS-MR, are able to be applied in the real-time network-wide problems, which cost approximately 5.5 seconds for each prediction step.

TABLE 8 Scalability Test
Table 8- 
Scalability Test
Convergence. As shown in Figs. 13a and 13b, our models OLS-AO and OLS-MR can efficiently converge into a local optimization with a small number of iterations.

Fig. 12. - 
Comparisons between running time and various $k$k, $T$T.
Fig. 12.
Comparisons between running time and various k, T.

Show All

Fig. 13. - 
Convergence rate.
Fig. 13.
Convergence rate.

Show All

SECTION 7Conclusions and Future Work
In this paper, we proposed three spatiotemporal models to effectively address the network-wide CFD prediction problem based on the online latent space (OLS) strategy. The first model named OLS-AO combines the stable flow trends with the side information guidance by using an average optimization strategy that adapts to stable crowd flows. The second model, OLS-MR, learning from the most recent trends, is able to handle the dramatical changes of crowd flows. To enhance the models’ applicability of handing real-world situations, our last dual-track model, OLS-DT, utilizes the benefits of both OLS-AO and OLS-MR to achieve the best performance in a variety of challenging traffic situations. All the empirical results demonstrate that the proposed models outperform all the other state-of-the-art methods.

Further efforts will be made towards analyzing passenger activities based on multi-view transactional data. Moreover, since recent deep learning models cannot address the CFD prediction problem directly, developing a real online model based on deep learning is one of our future work.