With the rapid development of mobile technology, nowadays, people spend a large amount of time on mobile devices. The locations and contexts of users are easily accessed by mobile advertising brokers, and the brokers can send customers related location-based advertisements. In this paper, we consider an important location-based advertising problem, namely maximum utility advertisement assignment (MUAA) problem, with the estimation of the interests of customers and the contexts of the vendors, we want to maximize the overall utility of ads by determining the ads sent to each customer subject to the constraints of the capacities of customers, the distance ranges and the budgets of vendors. We prove that the MUAA problem is NP-hard and intractable. Thus, we propose one offline approach, namely the reconciliation approach , which has an approximation ratio of (1−ϵ)⋅θ . In addition, we also address the online scenario, in which customers arrive in a streaming fashion, with one novel online algorithm, namely the online adaptive factor−aware approach , which has a competitive ratio (compared to the optimal solution of the offline scenario) of ln(g)+1θ , g>e , where e is the base of the natural logarithm. Through extensive experiments, we demonstrate the efficiency and effectiveness of our proposed approaches over both real and synthetic datasets.
SECTION 1Introduction
Nowadays, with the popularity of mobile devices, location-based mobile advertising (LBA), as a new form of advertising, can pinpoint the potential customers’ locations and provide location-based advertisements on their mobile devices, which integrates mobile advertising with location-based services. LBA has drawn much attention from industry (e.g., MobileAds [8] and xAd [10]). Specifically, in LBA, vendors create campaigns on the broker system with the specified information of ads and budgets to cover the ad fee of the broker. Then, the broker system sends LBA ads to potential customers based on their current locations, profiles (e.g., occupation) and preferences (e.g., interests) with a goal to increase the influence of the vendors and lure in interested customers. However, it is difficult to push ads to the most suitable customers with the limited budget such that the overall utility of the ads is maximized as the inherent complexity of the problem and the hardness of estimating the utility of each advertisement.

Under this background, in this paper, we will consider a practical problem, namely maximum utility advertisement assignment (MUAA), which pushes ads to suitable customers to maximize the overall utility subject to the constraints of distance ranges, capacities of customers and the limited budget. Here, the utility of an ad sent to a customer is the measure of its effect on attracting the customer to visit the shops of the ad owner, which will be modeled in Section 2. In the sequel, we illustrate the MUAA problem with a motivation example.

1Example 1
(Maximizing the utility in location-based mobile advertising). Consider a scenario in Fig. 1

Fig. 1. - 
An example of maximizing utility of LBA Ads.
Fig. 1.
An example of maximizing utility of LBA Ads.

Show All

a, in which there are three vendors, v1∼v3, represented by (blue) circular nodes and three customers, u1∼u3, denoted by (yellow) triangles, at 5:00 pm. Each vendor hopes that its ads are sent to customers in a limited range (e.g., one kilometer) indicated with dash circles. Vendor v1 is a noodle restaurant, vendor v2 is a teahouse, vendor v3 is a pizza restaurant. Vendors provide budgets to an advertising broker system to help them attract more customers for their shops (i.e., to maximize the utility of their ads on the customers). Their budgets are 3$.
Assume that the broker can send ads through two format: Text Link (TL) and Photo Link (PL), as shown in Fig. 1b. Their prices and effectivenesses are shown in Table 1

TABLE 1 Information of Ad Types
Table 1- 
Information of Ad Types
. In this example, we assume that three vendors belong to three distinct tags (e.g., teahouse) separately and the preference value of a customer for a vendor represents the similarity of the customer to the corresponding tag of the vendor. For each customer-and-vendor pair, the distance and the preference value at 5:00 pm are given in Table 2
TABLE 2 Distance and Preference
Table 2- 
Distance and Preference
. For example, a customer u1 like a pizza restaurant v3 more than a noodle restaurant v1, but is located closer to v1. In addition, to avoid the ads disturbing the customers too much, each customer may specify his/her limitation of receiving ads. In this example, each customer prefers to receiving at most 2 ads. We use a three tuple in format ⟨u,v,τ⟩ to indicate that a vendor v sends customer u an ad in τ type. Assume that the utility of ⟨u,v,τ⟩ is positively correlated to its preference of u towards v and effectiveness of τ and negatively correlated to the distance between u and v. For example, sending a PL ad of vendor v3 to customer u3 has the utility value of 0.0174 (=0.4×0.12.3). One possible solution is {⟨u1,v1,TL⟩, ⟨u2,v1,PL⟩, ⟨u1,v2,TL⟩, ⟨u2,v2,PL⟩, ⟨u3,v3,PL⟩}, which achieves an overall utility value of 0.1704. However, the optimal solution is {⟨u1,v1,PL⟩, ⟨u1, v2, PL⟩, ⟨u2,v2,TL⟩, ⟨u2,v3,PL⟩, ⟨u3,v3,TL⟩}, which results in an overall utility value of 0.2093.
Motivated by the example above, in this paper, we formalize the MUAA problem, which focuses on matching vendors with the most suitable customers and deciding the best ad type for each selected customer-and-vendor pair under the constraints of the limited numbers of receiving ads and the total budget, such that the overall utility of the sent ads is maximized. To optimize the overall utility of ads subject to limited budgets has twofold benefits. First, the higher the overall utility is, the better an ad-broker performed, which can attract more vendors to ask the ad-broker help them manage their location-based ads. From the perspective of vendors, the higher overall utility means the better ads results (e.g., more ad clicks or customer visits).

Existing studies focus on solving the privacy issues in LBA [12], [14], investigating the customer attitudes towards LBA [16], [30], analyzing the business models of LBA [18], [27] and proposing approaches to solve the continuous vendor selection problem [34]. Specifically, in [34], the approaches will only fire a recalculation process when the relevant vendors of a given customer have changed such that the response to the query of relevant vendors for each customer is fast, which can be used as a subroutine in our problem to search the relevant vendors for each coming customer. However, no existing works studies finding a good LBA ad strategy to match the vendors and customers having budget-constrained vendors with multiple ad types to select. Thus, we propose novel algorithms to solve MUAA efficiently and effectively.

In this paper, we first prove that our MUAA problem is NP-hard, by reducing it from the 0-1 Knapsack problem [31]. As a result, the MUAA problem is not tractable. Therefore, in order to efficiently handle the MUAA problem, we will propose approximate algorithms from both offline and online perspectives.

Specifically, we make the following contributions:

We formulate the MUAA problem in Section 2.3, and prove its NP-hardness in Section 2.4.

We design one efficient offline algorithm, namely the reconciliation approach, in Section 3.

We propose a novel online algorithm, namely online adaptive factor-aware approach, in Section 4.

We conduct extensive experiments on real and synthetic data sets, to show the efficiency and effectiveness of our MUAA approaches in Section 5.

In addition, the rest sections of the paper are arranged as follows, we review and compare the previous works on mobile advertising in Section 6 and conclude in Section 7.

SECTION 2Problem Definition
In this section, we first define the location-based mobile ads, which can influence customers (e.g., attracting the customers to visit the corresponding vendors). Assume that customers and vendors are depicted with a set of tags, such as “fast foods”, “sport shoes” and “electronic devices”. Let Ψ={g1,g2,…,gw} be a universe of w tags. Each customer/vendor has a vector reflecting his/her interests/similarities on the tags, which can be learned from the historical data of customers (e.g., clicking histories of ads, searching engine records or shopping histories) [18] or the ads contents of vendors (e.g., the text message contents of the ads) [15]. In addition, some location-based social networks, like Foursquare, provide a hierarchy structure (taxonomy) of categories of point-of-interests (e.g., shops, bus stations), as shown in Fig. 2. As assumed in [38], we utilize the hierarchy structure of Foursquare in this paper, which can also be built with data mining methods (e.g., Latent dirichlet allocation model [15]) if the taxonomy does not exist or we need to update it.


Fig. 2.
An example of categories from foursquare.

Show All

2.1 Spatial Customers and Vendors
Definition 1 (Spatial Customers).
Let Uφ = {u1, u2,…,um} be a set of m customers at timestamp φ. Each customer, ui, is at location l(ui,φ) at timestamp φ with a limited number ai of the received ads. Moreover, customer ui has a vector ψi of his/her interests on tags.

For a customer ui, he or she is located at l(ui,φ). To avoid too many ads sent to her/his mobile device, s/he specifies a maximum number ai of the received ads (In other words, the capacity of customer ui is ai). As the customers are moving around and free to come and go, the set of customers may change all the time (i.e., the members of customers are different and the locations of customers are changing). Most importantly, each customer ui has a vector ψi for the tags, which reflects his/her interest levels on the tags. For example, if a customer has visited a set of points-of-interests (POIs, e.g., shops and museums), the historical visiting records may reflect the interests of the vendor. Any element ψ(k)i∈ψi is in the range [0,1] and depicts the interest level of customer ui for the tag gk. The value of ψ(k)i can be estimated with the techniques used in recommendation systems (e.g., Collaborative Filtering [11], [22] and Taxonomy Driven Computation [34], [38]). Specifically, we use the taxonomy driven computation method in [38] to calculate the vector ψi of customer ui. We briefly introduce the process here. For a customer ui, we first evenly distribute an arbitrary fixed overall score s to the tags (categories) that the customer ui is interested in (has checked in) as his/her topic scores. Let h(gk) be the number of checkins of customer ui performed on tag gk, then the topic score sc(gk) of customer ui for tag gk is calculated as sc(gk)=s⋅h(gk)∑kh(gk).

Let Ek= (e0,e1,…,eq) denote the path from the top element e0 to descendant eq=gk within the tree-structured taxonomy for the tags in Ψ. The explicit checkins (historical records) on the tag eq may imply the interests on the super-tags em (m<q). Let sco(em) denote the interest score of customer ui to the tag em, then the interest score of tags on path Ek should hold the equation as ∑qm=0sco(em)=sc(gk).

Let sib(em) denote the number of siblings of em in the taxonomy. We assume that the sub-tags have equal shares of their super-tags within the taxonomy. Then, we have the equation to calculate the interest scores of the ancestors of tag gk as sco(em−1)=κ⋅sco(em)sib(em)+1, where κ is a propagation factor for fine-tuning the profile generation process. Then, the summation of the computed interest score sco(em) for each tag is used to build the interest vector Ψi for ui.

Definition 2 (Spatial Vendors).
Let Vφ = {v1, v2,…,vn} be a set of n spatial vendors at timestamp φ. Each spatial vendor vj is located at l(vj), specifies a circular area of radius rj centered at l(vj), and provides a limited budget Bj to support its ads. Also, a tag vector ψj is specified for depicting the characteristics of the vendor.

In Definition 2, a spatial vendor vj is located at location l(vj). As a result, the customers in the effective area (e.g., the distances from the customers to vj are smaller than rj at timestamp φ) may receive the ads of the vendor. To pay the fee of sending ads, the vendor provides a limited budget Bj for the ad broker system to cover its ads cost. In addition, a vector ψj reflects the similarities of the vendor on the tags. Any element ψ(k)j∈ψj is in the range [0,1] and depicts the relevance degree of vendor vj for the tag gk. For example, on Foursquare, users are allowed to label the categories of POIs, we can estimate the value of ψ(k)j for the similarity of the vendor vj towards the tag gk (e.g., use the similar method in estimating the vector ψi for customer ui). If we cannot know the detailed labeling information, we can simply set ψ(k)j=1 if the vendor vj has been classified into the category gk, which can be easily accessed from the API of Foursquare [1].

2.2 Ad Types and Ad Assignment Instance Set
We first introduce the definitions of ad types and the ad assignment instance set.

Definition 3 (Ad Types).
Let T = {τ1, τ2,…,τq} be a set of q types of ads. For each ad type τk, it costs ck and has an utility effectiveness βk.

As the location-based mobile advertising (LBA) broker may have different methods to push ads to the customers (e.g., text-link, photo-link and in-app video), sending one ad of type τk may need ck price. Then, the ad may have an utility effectiveness βk on the customer who has viewed it, which measures the probability of a customer taking action/transaction (e.g., using the coupons or visiting the shop) of the ad that he/she just viewed. For example, compared with a text-link ad, a multimedia ad may cost more, but has a better effect. Similarly, in search-engine based systems (e.g., AdWords [3] and Meituan [7]), the ad position (the ranking position of ads in the list of searching results) also affects its effectiveness and price dramatically. In this paper, ad types also imply the positions of ads.

Definition 4 (Ad Assignment Instance Set).
An ad assignment instance set, donated by I, is a set of triples in the form ⟨ui,vj,τk⟩, where each customer ui∈U is assigned with an ad of a vendor vj∈V in a type τk∈T.

For an ad assignment instance ⟨ui,vj,τk⟩, we evaluate its utility λijk with a similar method in [33] to derive the equation as below:
λijk=βk⋅s(ui,vj,φ)d(ui,vj,φ),(1)
View Sourcewhere βk is the utility effectiveness of ads in type τk. s(ui,vj,φ) indicates the temporal preference of ui towards vj at timestamp φ and d(ui,vj,φ) represents the distance between ui and vj at timestamp φ.

As the shops/services of a tag may be in different active status from time to time, we use αx(φ) to reflect the active level of tag gx at timestamp φ. For example, a tag of “coffee” may be active in the mornings and the afternoons but inactive at nights. A tag of “Chinese food” may be active in lunch or dinner time. We use the weighted Pearson correlation coefficient [26] to define s(ui,vj,φ) as below:
m(ψi,φ)cov(ψi,ψj,φ)s(ui,vj,φ)=∑xαx(φ)⋅ψ(x)i∑xαx(φ),=∑xαx(φ)(ψ(x)i−m(ψi,φ))(ψ(x)j−m(ψj,φ))∑xαx(φ),=cov(ui,vj,φ)cov(ui,ui,φ)cov(vj,vj,φ)−−−−−−−−−−−−−−−−−−−−√,
View SourceRight-click on figure for MathML and additional features.where, m(ψi,φ) indicates the weighted temporal mean of vector ψi and cov(ψi,ψj,φ) means the weighted temporal covariance of two vector ψi and ψj.

Intuitively, if a customer and a shop are both interested in or similar to an active tag, the customer may have a higher probability to visit the shop or use the coupon of the ad. For example, a customer who likes coffee may visit a nearby coffee shop sending coupons in the morning. However, the distance of the customer and the vendor may affect the customer's probability of taking actions/transactions: the closer they are, the more likely the customer visits the shop of the vendor.

Note that, to estimate of the utility of an ad instance, we can also use other existing methods in POI recommendation system [35], [36]. The major contribution of this paper is the ad assignment strategy to maximize the overall utility of the ad instances, which is independent to the definition of the ad utility. In addition, our ad assignment algorithms can work without modification when we use other methods to estimate the utility of ad instances.

2.3 The Maximum Utility Advertisement Assignment Problem
In this section, we will formalize the MUAA problem, which matches vendors with the most suitable customers and determines the best ad type for each selected customer-and-vendor pair with a goal of maximizing the overall utility subject to the constraints of the specified ranges and budgets of vendors, and the number of receiving ads of customers.

Definition 5 (Maximum Utility Advertisement Assignment Problem, MUAA).
Given a set of spatial customers U and a set of spatial vendors V, the MUAA problem is to obtain an ad assignment instance set, such that:

for any instance ⟨ui,vj,τk⟩, ui is located in the specified area of vj, that is, d(ui,vj)≤rj;

the number of assigned ads for each ui is not more than one's ad number limit ai;

for each vendor vj, the total cost of the assigned ads does not exceed its budget Bj, that is, ∑∀⟨ui,vj,τk⟩∈Ick ≤Bj; and

the overall utility, ∑⟨ui,vj,τk⟩∈Iλijk, of the ad assignment instance sets I is maximized.

Definition 5 can be rewritten in the form of the linear programming problem below:
max s.t.∑λijk⋅xijkd(ui,vj)⋅xijk≤rj,i=1:m;j=1:n;k=1:q,∑i=1m∑k=1qck⋅xijk≤Bj,j=1:n,∑j=1n∑k=1qxijk≤ai,i=1:m,∑k=1xxijk≤1,i=1:m;j=1:n,
View SourceRight-click on figure for MathML and additional features.where, xijk is an indicator, if an ad in type τk of vendor vj is sent to customer ui, xijk=1; otherwise, xijk=0. In addition, m is the number of spatial customers, n is the number of spatial vendors and q is the number of ad types. Note that as in our paper ad types imply the ad position information, we constrain that each each vendor can only send one type ad to a given customer.

Table 3 summarizes the commonly used symbols.

TABLE 3 Symbols and Descriptions
Table 3- 
Symbols and Descriptions
2.4 The Hardness of the MUAA Problem
We prove that the MUAA problem is NP-hard by reducing it from 0-1 Knapsack problem [31], which is NP-hard.

Theorem 2.1 (The Hardness of the MUAA Problem).
The MUAA problem is NP-hard.

Proof.
We prove the theorem by a reduction from the 0-1 knapsack problem. A 0-1 knapsack problem can be described as follows: Given a set, C, of n items i numbered from 1 up to n, each with a weight wi and a value xi, along with a maximum weight capacity W, the 0-1 knapsack problem is to find a subset C′ of C that maximizes ∑i∈C′xi subjected to ∑i∈C′wi≤W.

For a given 0-1 knapsack problem instance, we can transform it to an instance of MUAA as follows: we generate a MUAA problem with only one customer u0 and one vendor v0. Then, we give n valid ad assignment instances, such that for each instance tuple ⟨u0,v0,τi⟩, the ad cost ci=wi and the evaluated utility λ00i=xi. Also, we set the budget B0=W. Then, for this MUAA instance, we want to achieve an ad assignment instance set I that maximizes the overall utility ∑∀⟨u0,v0,τi⟩∈Iλ00i subjected to ∑∀⟨u0,v0,τi⟩∈Ici≤B0.

Given this mapping, we can show that the 0-1 knapsack problem instance can be solved, if and only if the transformed MUAA problem can be solved.

This way, we can reduce the 0-1 knapsack problem to the MUAA problem. Since the 0-1 knapsack problem is known to be NP-hard, MUAA is also NP-hard.

As MUAA is NP-hard and thus intractable, we design two efficient approximation algorithms, namely the reconciliation approach and the online adaptive factor-aware approach, to tackle the MUAA problem and achieve good assignment strategies. The reconciliation approach can handle the offline MUAA problem quickly with a theoretical bound, where all the information of vendors and customers are known. In addition, we also address the online scenario with the online adaptive factor-aware approach, where customers arrive in a streaming fashion. The result of reconciliation approach can be used as a lower bound of the optimal result. By comparing with the results of the reconciliation approach, we can know how far at least the result of the online adaptive factor-aware approach is compared to that of the optimal result quickly.

SECTION 3The Reconciliation Approach
In this section, we propose an efficient reconciliation algorithm to handle the MUAA problem, which first solves the single-vendor problems for each vendor separately (i.e., without considering the conflicts from other vendors) with existing algorithms of multi-choice knapsack problem [23], [28], and then reconciles the conflicts on the limited numbers of receiving ads of the customers to provide a global assignment strategy with the accuracy guarantee.

3.1 The Single-Vendor Problem
In this subsection, we discuss the single-vendor problem, where only one vendor exists. In Definition 5, an MUAA problem instance M may contain multiple vendors, and they may send their ads to the same customers to maximize the total utility. Then, some popular customers may receive many ads exceeding their limited numbers of receiving ads. However, if there is only one vendor existing, this kind of scenario will disappear.

Specifically, we assume that if there is only one vendor vo existing, we can obtain a single-vendor problem Mo. Then, we can present Mo as the linear programming problem below:
max s.t.∑λiok⋅xiokd(ui,vo)⋅xiok≤ro,i=1,…,m;k=1,…,q,∑i=1m∑k=1qck⋅xiok≤Bo,∑k=1qxiok≤1, i=1,…,m.
View Source

This single-vendor problem Mo is a variant of the existing problem, multi-choice knapsack problem [23], [28], which can be solved with ε-approximate LP-relaxation algorithm in O(m) time complexity. That is, the utility value of the solution obtained with the ε-approximate LP-relaxation algorithm is at least (1-ε) of that of the optimal solution. In this paper, we use the LP-relaxation algorithm in [23] to solve the single-vendor problems.

3.2 The Reconciliation Algorithm
The existing algorithm for multi-choice knapsack problem [23], [28] can only solve the single-vendor problems. However, our MUAA problem generally has multiple vendors who compete for suitable customers, and thus the existing single-vendor algorithms [23], [28] cannot be used to solve our MUAA problem directly. We propose a reconciliation algorithm to solve the general MUAA problem.

Specifically, we introduce the reconciliation algorithm to reconcile the violations on the limitation of the received number of ads, which iteratively picks a random customer from the set of the customers having ads limitation violations, and then resolves the violations by replacing the low-utility customer-and-vendor pairs with other available pairs, until all the ad limitation constraints are satisfied.

Algorithm 1. Reconciliation Algorithm
Input: A set Uφ of m customers and a set Vφ of n vendors at timestamp φ

Output: An ad assignment instance set I

I←∅

foreach vj∈Vφ do

obtain a set of valid customers Uj

construct a single-vendor problem Mj with vj and Uj

solve Mj to get the result Ij

obtain a set U^ of customers violating their ad limitations

foreach ui∈U^ do

sort the instances of ui based on their utility values in ascending order

while ad limitation violations of ui exist do

delete one ad assignment instance ⟨ui,vj,τk⟩ with the lowest utility value λijk from Ij

greedily assign new valid customers to vj and add the assignment instance to Ij

return I=⋃nj=1Ij

Algorithm 1 illustrates the reconciliation algorithm, namely ViolationReconcile, to take advantage of the existing single-vendor algorithms and to satisfy the limitation of the received number of ads, which first solves the single-vendor problems, then resolves the violations of ads limitation on customers, and returns a global ad assignment instance set without ad limitation violations.

First, we initialize the global ad assignment instance set I to an empty set, as no instances exist (line 1). Next, for each vendor vj, we obtain a set Uj of its valid customers, who are located in the effective range of vendor vj (i.e., the distance between each valid customer and the vendor vj is less than radius rj) (line 3). For each constructed single-vendor problem Mj, we solve it with the Linear Programming solver [6] and obtain the result Ij (lines 4-5). As there may exist ad limitation violations on customers, we first retrieve a set U^ of customers with violations (i.e., the number of assigned ads in all the results of single-vendor problems is larger than the limited number ai of receiving ad of customer ui) (line 6). Then, we randomly pick one violated customer ui in each iteration and replace the low-utility customer-and-vendor pairs with other valid pairs to resolve the violations (lines 7-11). Specifically, for the randomly selected customer ui, we greedily delete its ad assignment instance ⟨ui,vj,τk⟩ with the lowest utility value (calculated with Equation (1)) in Ij (line 10) and reassign one new valid customer to vj subject to the constraints of the budget of the vendor and the limitation number of the customer (line 11). We iteratively reduce the number of assigned ads of customer ui until the number of his/her assigned ads is less than ai. Finally, we return a union set of valid ad assignment instance sets.

3.3 Performance Analysis
The Approximation Ratio. We first present the approximation ratio of Algorithm 1, ViolationReconcile.

Theorem 3.1.
ViolationReconcile has an approximation ratio of (1−ε)⋅θ, where θ=min(a1nc1,a2nc2,…,amncm), and nci is the larger value between the number of valid vendors and the capacity ai of customer ui.

Proof.
For a given MUAA problem M with a set U of m customers and a set V of n vendors, we donate its optimal solution as I∗ and the solution achieved by ViolationReconcile as I. Let λ(I) be the overall influence value of the instances in I. Then, we have
λ(I)==∑⟨ui,vj,τk⟩∈Iλijk∑ui∈U∑⟨ui,vj,τk⟩∈I(ui)λijk.
View SourceLet U′ be the set of customers that are selected in any single-vendor problem's solution Ij, then U′⊆U. Thus, we have
λ(I)≥∑ui∈U′∑⟨ui,vj,τk⟩∈I(ui)λijk.(2)
View SourceRight-click on figure for MathML and additional features.

For each customer ui, let nsi be the number of ads sent among all the solutions of the single-vendor problems, that is nsi=∑nj=1|Ij(ui)|, where Ij(ui) is the set of instances associated with ui in Ij and |Ij(ui)| is its size. Let I(ui) be the set of instances associated with ui in I. If nsi≤ai, |I(ui)|nsi=1; if nsi>ai, as we only retain |I(ui)|(=ai) ad assignment instances having higher influences compared with the nsi−|I(ui)| ad assignment instances that are replaced, thus |I(ui)|nsi<1. Thus, we have |I(ui)|nsi≤1. Then, the Inequality (2) can be written as
λ(I)≥∑ui∈U′|I(ui)|nsi⋅∑j=1n∑⟨ui,vj,τk⟩∈Ij(ui)λijk.
View SourceRight-click on figure for MathML and additional features.

If a customer ui we have nsi≤ai, ainci=1=|I(ui)|nsi; if a customer ui has nsi>ai, then |I(ui)|=ai. As nci≥nsi, ainci<1=|I(ui)|nsi. Then, we have |I(ui)|nsi≥minui∈U′(ainci),∀ui∈U′. As for any customer uk∈U−U′, aknck=1≥minui∈U′(ainci), thus minui∈U(ainci)=minui∈U′(ainci). Next, we can have the inequality as below:
λ(I)≥minui∈U′(ainci)⋅∑ui∈U′∑j=1n∑⟨ui,vj,τk⟩∈Ij(ui)λijk=minui∈U(ainci)⋅∑j=1nλ(Ij).(3)
View Source

For each created single-vendor problem Mj, we donate its optimal solution as I∗j and the solution achieved by the LP-relaxation algorithm in [23] as Ij. As the LP-relaxation algorithm for the multi-choice knapsack problem is a ε-approximate algorithm, we have λ(Ij)≥(1−ε)⋅λ(I∗j). Then, based on the Inequality (3), we have
λ(I)≥(1−ε)⋅minui∈U(ainci)⋅∑j=1nλ(I∗j)≥(1−ε)⋅minui∈U(ainci)⋅λ(I∗).
View SourceRight-click on figure for MathML and additional features.

Therefore, we have λ(I)≥(1−ε)⋅θ⋅λ(I∗), where θ=minui∈U(ainci). Thus, I is a (1−ε)⋅θ-approximate solution for the muaa problem instance M w.r.t. the influence of the selected ad instances, which completes the proof.

The Time Complexity. We discuss the time complexity of the reconciliation algorithm in Algorithm 1 below. Specifically, the time complexity of retrieving a set of valid customers Uj for vendor vj is O(m). To solve each single-vendor problem, the time complexity is O(mlog(m)O(1)/εO(1)) [17]. Thus, lines 2-5 need O(mnlog(m)O(1)/εO(1)) time. To check the number of assigned ads for each customer needs O(n), line 6 needs O(mn) time. Since each customer can be assigned to at most m vendors, the time complexity of sorting the instances in line 8 needs O(mlogm). Line 10 needs O(1) and line 11 needs O(m). As the loop of lines 9-11 runs at most n times, the time complexity of lines 9-11 is O(mn). In addition, as at most m customers have violations, lines 8-11 run at most m times. Thus, lines 7-11 need time complexity of O(max{m2logm,m2n}). The time complexity of Algorithm 1 is O(max{m2logm,m2n,mnlog(m)O(1)/εO(1)).

SECTION 4Online Adaptive Factor-Aware Approach
Although the offline algorithm proposed in Section 3 can achieve good assignment strategies w.r.t the total utility values, in real-world applications, customers are appearing in a streaming fashion and may become inactive within several seconds, thus we cannot know all the information of the customers and vendors at the beginning and apply the offline algorithms. For example, when a customer is searching for a good restaurant to have dinner, the system needs to quickly return the results with ad instances to the customer in several seconds. To assign the ads to customers in an online mode, in this section, we propose a deterministic online adaptive factor-aware approach (O-AFA), which has a competitive ratio of ln(g)+1θ, g>e, where e is the base of the natural logarithm, θ=min(a1nc1,a2nc2,…,amncm), and nci is the larger value between the number of valid vendors and the capacity ai of customer ui. The competitive ratio of an online algorithm for the MUAA problem is σ if σ⋅λ(I)≥λ(Iopt),σ>1, where λ(I∗) is the overall influence value of the ad instances selected by the online algorithm and λ(Iopt) is the overall influence value of the ad instances of the optimal result. We assume that, for any possible ad assignment instance ⟨ui,vj,τk⟩, its budget efficiency γijk≥γmin, where γijk=λijkck.

4.1 The Online Adaptive Factor-Aware Algorithm
We should properly distribute the budgets and only push the ads to customers with high budget efficiencies. A simple and direct way is to set a threshold ϕ of the budget efficiency and only push ads to customers with budget efficiencies higher than the threshold ϕ. As discussed in [29], in the online matching and allocation problems, an adaptive threshold will perform better than a static threshold. Different from their approaches using a set of discrete thresholds, we will propose an algorithm with a threshold function of the remaining budget ratio for each vendor to achieve a competitive ratio under the assumption that every ad instance has the budget efficiency γijk≥γmin.

Briefly, when a new customer ui appears, the O-AFA approach first filters out a set of vendors that the customer is in the range of them. Next, for each vendor vj, if the “best” ad type for it has a higher budget efficiency than a threshold ϕ(δj) calculated with a function of the ratio δj(=b(Ij)Bj) between its used budget b(Ij)=∑⟨ui,vj,τk⟩∈Ijck and its total budget, we denote the vendor-customer-ad triple as a potential ad instance (the details of ϕ(δj) will be introduced in Section 4.2). Among the potential ad instances of the customer, O-AFA finally picks the top ai ad instances. The intuition of O-AFA is that when the budget of a vendor is sufficient at the beginning, we can push its ads to the customers without worrying about using up its budget; when there is low budget left, we only select the ad instances with high budget efficiencies. The pseudo code of O-AFA is shown in Algorithm 2.

Algorithm 2. Online Adaptive Factor-Aware Algorithm
Input: A customer ui appears at timestamp φ and a set Vφ of n vendors at timestamp φ

Output: An ad assignment instance set I to the customer ui

I←∅

select a set V′ of valid vendors for customer ui

foreach vj∈V′ do

select one “best” ad tpye τk for customer ui and vendor vj

if γijk≥ϕ(δ(i)j) then

add ⟨ui,vj,τk⟩ to I

if |I|>ai then

keep the ad instances with the top-ai highest budget efficiencies in I

return I

4.2 Performance Analysis
In the existing work [37], the authors studied an online knapsack problem with only one vendor. However, in MUAA problem, there are multiple vendors. Inspired by the situation of the online one-vendor problem in [37], we design a different threshold function ϕ(δj) and prove the competitive ratio of our O-AFA algorithm. In the analysis below, we have two assumptions: 1) we know the lower bound γmin of the budget efficiency of any ad instance; 2) the cost of any ad instance is much smaller than the budget of any vendor; 3) the threshold function ϕ(δj) of utility efficiencies is a monotone increasing function on the used budget ratio δj of vendor vj. Note that, the assumption 3) follows the intuition that when the remaining budget of a vendor is low, we should only select the ad instances with high budget efficiencies. Here we denote: a) the primitive integral of ϕ as Φ (i.e., Φ(x)=∫ϕ(x)dx); b) the maximum used budget ratio of all the vendors as δmax when the algorithm finishes; c) a constant h for the value of the threshold function ϕ to reach the lower bound budget efficiency γmin, that is ϕ(h)=γmin. Then, we have a theorem below.

Theorem 4.1.
The online algorithm, O-AFA, has a competitive ratio of 1θ⋅(ϕ(δmax)h⋅γmin+Φ(δmax)−Φ(h)+1).

Proof.
For a given MUAA problem instance M, let I and I∗ (Ij and I∗j) be the instance sets selected by the O-AFA algorithm and the optimum (of vendor vj), respectively. For each vendor vj, we denote its used budget ratio as δ(i)j when customer ui appears and final used budget ratio as δj when the O-AFA terminates. Then, δmax=maxvj∈Vδj.

From the view of a single vendor vj, if any instance ⟨ui,vj,τx⟩ is not picked by the O-AFA algorithm, the reason can be: 1) it has the budget efficiency γijx≤ϕ(δ(i)j); 2) it has the budget efficiency larger than γijx>ϕ(δ(i)j) but γijx≤γijk where γijk is the efficiency of the selected instance for customer ui.

Let Δij be the minimum value such that for the given customer ui, vendor vj and the selected advertising instance ⟨ui,vj,τk⟩, any other instance ⟨ui,vj,τx⟩ has γijx≤ϕ(δ(i)j)+Δij and γijk>ϕ(δ(i)j)+Δij. Since ϕ(δ) is a monotone increasing function of δ, then
λ(I∗j)−∑⟨ui,vj,τx⟩∈I∗jΔij⋅cx≤λ(Ij∩I∗j)+ϕ(δj)(Bj−Cj),
View Sourcewhere Cj=∑⟨ui,vj,τk⟩∈Ij∩I∗jck.

Next, as ∑⟨ui,vj,τx⟩∈I∗jΔij⋅cx<λ(Ij) we can have another inequality below:
λ(I∗j)λ(Ij)≤λ(Ij∩I∗j)+ϕ(δj)(Bj−Cj)λ(Ij∩I∗j)+λ(Ij/I∗j)+1.(4)
View Source

Here, we denote the used budget ratio of a vendor vj is δ(i)j when it selects the ad instance ⟨ui,vj,τk⟩. Thus, we have γijk≥ϕ(δ(i)j). Then, we have
λ(Ij∩I∗j)≥∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δ(i)j)⋅ck,λ(Ij/I∗j)≥∑⟨ui,vj,τk⟩∈Ij/I∗jϕ(δ(i)j)⋅ck.and
View SourceRight-click on figure for MathML and additional features.

As λ(I∗j)≥λ(Ij), inequality (4) can be rewritten as below:
λ(I∗j)λ(Ij)≤∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δ(i)j)ck+ϕ(δj)(Bj−Cj)∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δ(i)j)ck+λ(Ij/I∗j)+1≤∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δ(i)j)ck+ϕ(δj)(Bj−Cj)∑⟨ui,vj,τk⟩∈Ijϕ(δ(i)j)ck+1.
View Source

As ϕ(δ) is monotone increasing for δ, ∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δ(i)j)ck≤∑⟨ui,vj,τk⟩∈Ij∩I∗jϕ(δj)⋅ck=ϕ(δj)Cj. The above inequality implies that
λ(I∗j)λ(Ij)≤ϕ(δj)∑⟨ui,vj,τk⟩∈Ijϕ(δ(i)j)⋅ckBj+1.(5)
View SourceRight-click on figure for MathML and additional features.

As the cost of any ad instance is much smaller than the budget of vendor vj, we can have an integration below to approximate the summation
∑⟨ui,vj,τk⟩∈Ijϕ(δ(i)j)⋅ckBj≈∫δj0ϕ(δ)dδ=∫h0ϕ(δ)dδ+∫δjhϕ(δ)dδ≤hγmin+Φ(δj)−Φ(h).(6)
View Source

Then, we combine inequalities (5) and (6), we have
λ(I∗j)λ(Ij)≤ϕ(δj)h⋅γmin+Φ(δj)−Φ(h)+1.
View Source

Next, we combine the analysis of all the vendors together. We notice that for each customer ui we only select the ad instances with top-ai highest budget efficiency values. On each customer ui we at most reduce the his/her influence value to ainci of the summation of all the potential ad instances, where nci is the larger value between the number of valid vendors and the capacity ai of customer ui. In addition, as ϕ(δ) is larger than 0 and monotone increasing on δ, thus Φ(δ) is also increasing on δ. Since λ(I∗j)λ(Ij)≥1, when δj increase, λ(I∗j)λ(Ij) also increases. Then we have
λ(I∗)λ(I)≤1θ⋅∑λ(I∗j)∑λ(Ij)≤1θ⋅(ϕ(δmax)h⋅γmin+Φ(δmax)−Φ(h)+1),(7)
View Sourcewhere θ=min(a1nc1,a2nc2,…,amncm). The proof completes.

Corollary 4.1.
The online algorithm, O-AFA, has a competitive ratio of ln(g)+1θ when ϕ(δ)=γmine⋅gδ and g>e.

Proof.
The corollary can be proved by plugging the definition of ϕ(δ)=γmine⋅gδ in Inequality (7).

Specifically, when ϕ(δ)=γmine⋅gδ, Φ(δ)=γmine⋅gδln(g), and h=1ln(g). Then Inequality (7) can be rewritten as below:
λ(I∗)λ(I)≤1θ⋅(ϕ(δmax)h⋅γmin+Φ(δmax)−Φ(h)+1)=1θ⋅(γmine⋅gδmaxγminln(g)+γmine⋅gδmaxln(g)−γminln(g)+1)=ln(g)+1θ.(8)
View Source

We have the conclusion that the competitive ratio of our online algorithm O-AFA is ln(g)+1θ when ϕ(δ)=γmine⋅gδ and g>e.

Discussions of the Competitive Ratio. When we want to simplify the competitive ratio in Theorem 4.1, we have two concerns: 1) the value δmax in ϕ(δmax) and Φ(δmax) can be removed; 2) h⋅γmin should equal to Φ(h). For the first concern, we notice that only the derivative of an exponential function contains the same factor to be removed. However, if we choose some natural exponential functions for constructing ϕ(δ), we cannot meet the second concern. Then we construct ϕ(δ) as a form of ω⋅gδ to try to simplify the competitive ratio of O-AFA in Theorem 4.1, where ω and g are two constants.

Next, we need to determine the value of ω and g. When ϕ(δ)=ω⋅gδ, Φ(δ)=ω⋅gδln(g). Take h⋅γmin=Φ(h) and ϕ(h)=γmin into consideration, we have: h⋅ω⋅gh=φ⋅ghln(g). Thus, h=1ln(g) and ω⋅gh=γmin, then we have: ω=γmine. Then we have ϕ(δ)=γmine⋅gδ, and we get the Inequality below by plugging it into Theorem 4.1
λ(I∗)λ(I)≤ln(g)+1θ.(9)
View Source

As h=1ln(g) should be smaller than 1, we obtain g>e.

The Time Complexity. We discuss the time complexity of the online adaptive factor-aware algorithm in Algorithm 2 below. In particular, to retrieve a set of valid vendors for customer ui needs O(n) (line 2). To keep one “best” ad instance of vendor vj to customer ui needs O(q) where q is the number of ad types (line 4). Thus lines 3-6 need O(nq). Choosing top-ai ad instances from at most n candidates needs O(n). Thus, in total, the time complexity of Algorithm 2 is O(nq).

4.3 Configuration of Parameters
In this section, we first introduce the method to estimate the value of γmin.

4.3.1 Estimation of γmin
The main intuition of our O-AFA algorithm (shown in Algorithm 2) is to assign as many ads as possible at the beginning, then it will block ads with low budget efficiencies when the budgets of vendors become less and less. Thus, we can have a simple strategy to update γmin when we are running the O-AFA algorithm: we first initialize γmin as +∞; when a new customer ui appears and has a smaller budget efficiency γijk than the current minimum budget efficiency γmin, we update γmin as γijk. This updating process should be conducted before running O-AFA algorithm for each appearing customer. Similarly, we can use the same strategy to track the current maximum budget efficiency γmax to guide the selection of parameter g.

4.3.2 Selection of Parameter g
O-AFA can adaptively select ad instances with high budget efficiencies and block low budget-efficiency ads. The parameter g determine the the blocking effectiveness of O-AFA. Specifically, the larger g, the higher O-AFA threshold ϕ(δ(i)j) for each customer-and-vendor pair ⟨ui,vj⟩, which means only the ad instances with higher budget efficiency will be selected. However, on the other hand, the larger g is, the lower the ratio of used budget will be at the end of the algorithm. In conclusion, from the perspective of picking high-efficiency ad instances, we should have a larger g; from the perspective of using as much budget as possible at the end, we should have a smaller g.

An observation here is that the ad instance with the maximum budget efficiency γmax should always be selected if the remaining budget is sufficient, which means ϕ(1)≤γmax then g≤γmaxγmin⋅e. In addition, since e<g in Corollary 4.1, we have e<g≤γmaxγmin⋅e. The value of g is depended on the real situation of the problem, which can be estimated through the historical records, and we can gradually achieve a proper value of g for the real systems after a period of tuning.

SECTION 5Experimental Study
5.1 Experimental Methodology
Real/Synthetic Data Sets. For real data sets, we used one check-in data set of Foursquare [4], [13], which includes 1,641,620 review comments (check-ins) from 261,074 users towards 141,589 venues from 30 January 2017 to 22 February 2017 extracted from the Foursquare application through the public API. Each check-in record contains the timestamp, the ID of the user, and the ID of venue, category, and location of the venue. According to the discussion in Section 2.1, we use the category to indicate the tags and estimate the interests/similarities of customers and vendors for the tags with the methods in Section 2.1. In addition, we use the locations of the venues to initialize the locations of the vendors, and use the locations and timestamps of the check-ins to initialize the corresponding information of the customers. In the experiments on the real data set, we only use the check-ins related to the venues having at least 10 check-ins and users having at least 2 check-ins, which is 1,321,238 check-ins of 44,903 venues from 215,693 users. In other words, we can post ads to 215,693 customers for 44,903 vendors in the real data. For simplicity, we first linearly map check-in locations from Foursquare into a [0,1]2 data space. According to a report [9] of the statistics information of the AdWords system [3] based on the AdWords campaigns’ information of the accounts managed by Hallam [5], we use the average cost per click (the amount of money to pay for one ad click) and the average click through rate (i.e., the number of clicks that an ad receives divided by the number of times the ad is shown) for eight different ad positions to initialize the prices and the utility effectivenesses of eight ad types in our experiments, respectively. To initialize the budget of vendors, we use a social media ad campaign dataset [2], which contains the budget information of 1,143 vendors in a real social ad campaign on Facebook. We set the budget of vendors following the distribution of the budget in the ad campaign dataset.

For synthetic data sets, we generate customers and vendors as follows. We randomly produce locations of customers and vendors in a 2D data space [0,1]2, following Gaussian N(0.5,12) and Uniform distributions, respectively. As the specific timestamps of the customers will not affect the results of our online algorithm (only the orders of the customers affect the online algorithm), we use the orders of the customers to indicate their timestamps. We simulate the budget Bj of each vendor vi with Gaussian distribution N(B−+B+2,(B+−B−)2) within range [B−,B+], for 0<B−≤B+<1

For both real and synthetic data sets, we can generate the radius values of the range where vendor vj wants to post ads and the capacities of customers with Gaussian distributions within the ranges shown in Table 4.

TABLE 4 Experimental Settings
Table 4- 
Experimental Settings
Measures and Competitors. We evaluate the effectiveness and efficiency of our MUAA processing approaches (both offline and online algorithms), in terms of the overall utility score and the CPU time. Specifically, the utility of an ad instance is defined in Equation (1), which can measure the quality of the assignment strategy, and the CPU time is given by the average time cost of performing MUAA assignment for a single customer.

In our MUAA problem, w.r.t. the effectiveness, we compare our MUAA approaches, including the reconciliation (RECON) and the online adaptive factor-aware (ONLINE) algorithms, with a random (RANDOM) method (which randomly assigns vendors’ ads to valid customers under the budget constraint), a greedy (GREEDY) method (which iteratively selects one “currently best ad instance” that has the currently highest budget efficiency), and a nearest-neighbor (NEAREST) method (iteratively selects one “currently nearest ad instance” that has the currently shortest distance between the vendor and the worker). Specifically, The RECON algorithm first uses existing Linear Programming solver to solve the single-vendor problems, then reconciles the violations of the capacity constraints of the customers. To support the real world situation, where customers come in a stream fashion, the ONLINE algorithm decides to push or not to push ads to a newly incoming customers with no knowledge of the future customer. In particular, ONLINE algorithm only pushes ads to customers who have higher budget efficiencies than the values calculated by the adaptive threshold function shown in Section 4.

Experimental Settings. Table 4 shows our experimental settings, where the default values of parameters are in bold font. In subsequent experiments, each time we vary one parameter, while setting others to their default values. All our experiments were run on an Intel Xeon X5675 CPU @3.07 GHZ with 32 GB RAM in Java.

5.2 Experiments on Real Data
In this section, we show the effect of the range [r−,r+] of the radius of the vendors’ valid areas, and the range [a−,a+] of the customer capacities.

Effect of the Range [r−,r+] of Areas of Vendors.Fig. 3 reports the effect of the range [r−,r+] of the radius of the vendors’ valid areas over the real data set, which grows from [0.01, 0.02] to [0.04, 0.05]. As shown in Fig. 3a, when the radii of the valid areas increase, the overall utility values of our two proposed approaches improve while that of RANDOM will first increases, and then decreases. For our proposed two approaches (RECON and ONLINE), the improvement of the utility values is due to more customer-and-vendor pairs will become valid for larger radii. When the radii increase at the beginning more short-distance customer-and-vendor pairs can be used, which has a higher probability to have high utility ad instances. Later, when the radii become larger, the newly valid customer-and-vendor pairs have a higher probability to have low utility ad instances. However, as RANDOM just randomly selects one ad instance at each time, its utility value increases at the beginning and then drops. We can still find that our ONLINE can achieve much higher utility values than RANDOM, and not surprisingly three offline algorithms, GREEDY, NEAREST and RECON, can beat ONLINE. In Fig. 3b, the range of [r−,r+] affects ONLINE and RANDOM very little, and they always run fast. The running times of GREEDY and NEAREST increase linearly w.r.t. r.

Effect of the Range [a−,a+] of Customer Capacities. Fig. 4 presents the experimental results with different upper bounds of the customer capacities from [1,4] to [1,10] while other parameters are in their default value. In Fig. 4a, we can see that the more ads one customer allows to receive, the higher overall utility values the tested approaches can achieve. This is because when the capacities of customers improve, we can push more ad instances to customers such that the overall utility values increase. RECON is still the best w.r.t. the overall utility value. ONLINE is not as good as GREEDY and NEAREST but much better than RANDOM. In Fig. 4b, the running times of RECON, ONLINE and RANDOM are always low while that of GREEDY and NEAREST increases with the improvement of the upper bound of the capacities of customers. For RECON, larger capacities will not affect the problem size of each single-vendor problem, furthermore, fewer violations of the capacity constraints of customers reduce the reconciling cost. Thus, the running time of RECON will not increase. However, for GREEDY and NEAREST, larger capacities cause the valid ad instances to increase, which requires GREEDY and NEAREST to run more iterations, thus spends more time.

Fig. 3. - 
Effect of the range $[r^-, r^+]$[r-,r+] of areas of vendors.
Fig. 3.
Effect of the range [r−,r+] of areas of vendors.

Show All

Fig. 4. - 
Effect of range $[a^-, a^+]$[a-,a+] of customer capacities.
Fig. 4.
Effect of range [a−,a+] of customer capacities.

Show All

5.3 Experiments on Synthetic Data
In this subsection, we first show the effectiveness of our approaches compared with the optimal result on a small scale dataset, then we test the scalability and effectiveness of our two MUAA approaches, RECON and ONLINE, compared with GREEDY, NEAREST and RANDOM on synthetic data sets by varying the range [B−,B+] of the vendor budgets, the number m of customers and the number n of vendors.

Results on a Small MUAA Instance. To show the effectiveness, we test all the approaches on a small scale MUAA problem instance with only 30 vendors and 1,000 customers. In Table 5, we use LP-Solver [6] to solve the problem and get the optimal (OPT) result. The OPT achieves a total utility score of 248.653, but uses almost 2 hours to solve this small MUAA instance, which cannot be used to solve the real MUAA instances with thousands of vendors and customers. Our MUAA approaches RECON and ONLINE can achieve close utility scores but only use less than 1/4 seconds compared to the optimal result.

TABLE 5 Results of Small MUAA Instance
Table 5- 
Results of Small MUAA Instance
Effect of the Range [B−,B+] of Vendor Budgets. Fig. 5 illustrates the experimental results on different ranges, [B−,B+], of the vendor budgets Bj from [1,5] to [40, 50]. In Fig. 5a, the total utility values of all the tested approaches improve when the value range of the vendor budgets becomes larger first, and then remain with high values when the range of the vendor budgets reaches [20, 30]. The reason is that at the beginning, the budgets of vendors are low and insufficient thus only a small portion of the possible ad instances can be selected and the overall utility values of all the approaches are low. When the average budgets increase, the algorithms can select more ad instances, which leads to higher overall utility values. However, when the budgets are enough to select all the good ad instances, the overall utility values of our three approaches stay at a high level. Our two approaches can always achieve higher overall utility values compared to the RANDOM approach. The overall utility values of GREEDY and NEAREST are always lower than that of RECON. GREEDY and NEAREST can achieve higher utility values than ONLINE when the budgets are low, while their utility values are close to each other when range the budgets are higher than [20, 30]. As shown in Fig. 5b, the running times of ONLINE and RANDOM are always lower than 10 seconds, but that of GREEDY, NEAREST and RECON grow with the increase of the average budgets. For GREEDY and NEAREST, the reason is that, the number of iterations grows to use up the improved budgets, which requires more total running times. In addition, ONLINE can skip vendors when the budget efficiencies are lower than the thresholds, which make it faster than GREEDY and NEAREST. For RECON, higher vendor budgets cause the number of the selected ad instances for each single-vendor problem to increase, which in turn increases the number of violations of the capacity constraints of customers, and then the time for reconciling them as well. We can see that GREEDY and NEAREST use more time than other tested algorithms. The vendors provide the budgets to promote their businesses. Higher budgets can result in higher utility values, which confirms our intuitive expectation.

Effect of the Number m of Customers. Fig. 6 shows the effect of the number m of the customers, by varying m from 4,000 to 100,000. As shown in Fig. 6a, when the number of customers increases, our three MUAA approaches can obtain higher overall utilities, as more customers are available to be pushed with more ads. However, RANDOM just achieves similar utility values no matter what m is, as RANDOM does not choose “good” ad instances from all the possible ad instances. Thus, when the budgets and radii of vendors do not change, the results of RANDOM will also be unchanged. In Fig. 6b, the running times of GREEDY, NEAREST, ONLINE and RANDOM grow linearly w.r.t. the number of customers while that of RECON grows exponentially, as the running time of the existing Linear Programming (LP) solver is very sensitive to the problem size [6]. When the problem size gets larger, the LP solver needs more iterations to obtain a result that is very close to the optimal result (i.e., 1-ε approximation ratio), which makes the time to solve each single-vendor problem increase dramatically. As the running times of RECON grow faster than that of GREEDY and NEAREST when the number of customers increases, RECON is faster than GREEDY and NEAREST when m is small and it is the slowest when m is larger than 50K.

Fig. 5. - 
Effect of the range $[B^-, B^+]$[B-,B+] of budgets.
Fig. 5.
Effect of the range [B−,B+] of budgets.

Show All

Fig. 6. - 
Effect of the number $m$m of customers.
Fig. 6.
Effect of the number m of customers.

Show All

Effect of the Number n of Vendors. Fig. 7 illustrates the effect of the number n of the vendors, by varying n from 300 to 2,000. As shown in Fig. 7a, when n increases, all the tested algorithms can achieve higher utility values as more vendors need higher total budgets to support more ad instances. RECON still achieves the highest utility values. GREEDY performs close to RECON. The results of ONLINE are higher than RANDOM but lower than that of RECON and GREEDY and NEAREST. In Fig. 7b, the running time of RECON grows dramatically w.r.t. n, as more vendors mean that more single-vendor problems need to be solved by RECON. The running times of GREEDY and NEAREST grow slightly. The reason is that the number of customers does not change, and then the iterations of GREEDY and NEAREST do not change. The increasing costs of GREEDY and NEAREST are from the increasing cost of picking out one best instance in each iteration from more candidate customer-and-vendor pairs when n gets larger. ONLINE needs slightly more time when n increases, as for each customer there are more vendors to consider (only the vendors that the customer is in their effective areas affect the process of the customer). ONLINE is slightly slower than RANDOM but much faster than other competitors.


Fig. 7.
Effect of the number n of vendors.

Show All

SECTION 6Related Work
Recently, the popularity of GPS-equipped smart devices brings convenience to the daily life of people. The users can easily access the information of the POIs (e.g., shops, restaurants and cinemas) around them, which can help the users plan their trips, order dinners and book tickets online. The historical records reveal the interests of the users, which enable the advertising systems to accurately push ads to each individual to improve the effects of the ads. As a result, nowadays, the location-based advertising attracts much attention from both academia and industry. In POI recommendation system, existing studies [35], [36] focus on estimating the customers’ preference towards the POIs to recommend attracting and interesting places to customers. Another similar problem is the spatial matching problem [32], which assigns a set of customer to their closest service providers such that the total distance is minimized subject to the constraint of the capacity of each service provider. Then, [25] studies on fast maintaining the optimal matching (the total distance is minimized) in dynamic setting where customers are moving around. However, in our MUAA problem, we need to maximize the overall utility of spatial ad instances subject to the constraints of the budget and active ranges of vendors and capacities of customers. The main difference is that in our MUAA problem utility of a given ad instance depends on the preference and the distance of the related customer-and-vendor pair, and the utility effectiveness of the ad type while the spatial matching problem only considers the distance. In addition, in MUAA, ads with different types may have different costs, which is not considered in spatial matching problem. Existing methods [25], [32] cannot solve MUAA directly.

Some prior studies investigate the customer attitudes towards location-based advertising (LBA) [16], [19], [20], [30]. Specifically, the researchers investigate the attitudes of customers towards LBA and the relationship between the attitude and the behavior through surveys. Their results show that: (1) customers generally have negative attitudes toward LBA unless they have agreed to receive it explicitly; (2) customers’ attitude can directly affect their behavior (e.g., visiting the shop of the received ad). These studies reveal some location-based advertising types (e.g., Text-Link) have low budget efficiency [16], [30]. Gana and Thomas [20] discussed that the use of personal information of customers is still an important issue: how to enable customers to trust the service and how to guarantee the LBA advertising systems can use the sensitive information properly? Feng et al. [19] utilize structural equation modeling to analyze the conceptual model resulting that both intrinsic and extrinsic motivations mediate the effects of the advertising messages characteristics on mobile phone users attitudes toward mobile advertising. To successfully apply LBA and improve the revenues of vendors, well developed business models are necessary. Existing studies [18], [27] analyze the factors related to designing business models for LBA. Researchers also investigated the privacy issues in LBA advertising. For example, Gutierrez et al. pointed out customers’ willingness to disclose their location and other personal information is essential for the successful implementation of mobile location-based advertising [21]. Liu and Simpson designed a privacy-preserving targeted mobile advertising prototype to balance the privacy of customers and utility of ads [24].

In [34], the authors propose one novel location-based advertising framework on temporary social networks to select vendors as advertising sources for mobile customers under the constraint of the capacity of the customers. To query the relevant vendors quickly, they propose an algorithm to track the conservative safe region for moving customers to address the continuous vendor selection problem, which only fires a recalculation process when the relevant vendors have changed for a given customer. In our work, we consider the customer will come to the location-based advertising system randomly. When a customer comes, we need to report a set of “best” ad instances to the customer under his/her capacity constraint. We consider each vendor has a limited budget, and thus propose the O-AFA algorithm, which only selects the ad instances having high budget efficiency when the remaining budget of the vendors becomes less. We prove that the O-AFA algorithm has a competitive ratio of ln(g)+1θ, g>e, where θ=min(a1nc1,a2nc2,…,amncm), and nci is the larger value between the number of valid vendors and the capacity ai of customer ui. Besides that, we also propose one approximation offline algorithm, namely the reconciliation approach, to fast estimate the upper bound of the maximum utility for a given MUAA problem instance, which has an approximation ratio of (1−ϵ)⋅θ.

SECTION 7Conclusion
In this paper, we propose the problem of maximum utility ad assignment (MUAA) problem, which assigns a set of “best” ad instances of vendors to a given customer with the goal of maximizing the utility of the ads under the constraints of the budgets of vendors and the capacities of the customers. We prove that MUAA is NP-hard. We design one offline algorithm, namely the reconciliation approach, which has an approximation ratio of (1−ϵ)⋅θ. In addition, we also propose the online adaptive factor−aware approach (O-AFA) to return a set of “best” ad instances to each newly coming customer. We prove that O-AFA has a competitive ratio of ln(g)+1θ, g>e. Extensive experiments have been conducted to confirm the efficiency and effectiveness of our algorithms on both real and synthetic data sets.