Portfolio Selection is an important real-world financial task and has attracted extensive attention in artificial intelligence communities. This task, however, has two main difficulties: (i) the non-stationary price series and complex asset correlations make the learning of feature representation very hard; (ii) the practicality principle in financial markets requires controlling both transaction and risk costs. Most existing methods adopt handcraft features and/or consider no constraints for the costs, which may make them perform unsatisfactorily and fail to control both costs in practice. In this paper, we propose a cost-sensitive portfolio selection method with deep reinforcement learning. Specifically, a novel two-stream portfolio policy network is devised to extract both price series patterns and asset correlations, while a new cost-sensitive reward function is developed to maximize the accumulated return and constrain both costs via reinforcement learning. We theoretically analyze the near-optimality of the proposed reward, which shows that the growth rate of the policy regarding this reward function can approach the theoretical optimum. We also empirically evaluate the proposed method on real-world datasets. Promising results demonstrate the effectiveness and superiority of the proposed method in terms of profitability, cost-sensitivity and representation abilities.
SECTION 1Introduction
Portfolio Selection [43] aims at dynamically allocating the wealth among a set of assets to maximize the long-term return. This task, however, is difficult for many individual investors, since even an expert has to spend a lot of time and efforts to deal with each asset with professional knowledge. Recently, many intelligent portfolio selection methods have been proposed and have shown remarkable improvement in performance [9], [14], [16], [30], [31], [56], [69]. However, these methods can be limited in practice, due to two main challenges brought by the complex nature of portfolio selection as follows.

One of the key challenges in portfolio selection is how to represent the non-stationary price series, since the asset price sequences often contain a large number of noises, jumps and oscillations. Most existing methods use handcraft features, such as moving average [37] and stochastic technical indicators [48], which, however, perform unsatisfactorily because of poor representation abilities [15]. In recent years, deep neural networks (DNNs) have shown strong representation abilities in modeling sequence data [60] and often lead to better performance [34]. However, it is non-trivial for existing DNNs to directly extract price sequential patterns and asset correlations simultaneously. Nevertheless, both kinds of information significantly affect the decision-making for portfolio selection. More critically, the dynamic nature of portfolio selection and the lack of well-labeled data make DNNs hard to train.

Another key challenge of portfolio selection is how to control costs in decision-making, since the transaction cost and the risk cost highly affect the practicality of algorithms. The transaction cost (e.g., tax and commission) is common in decision-making [39], [50]. Ignoring this cost may lead to aggressive trading [13] and bring biases into the estimation of returns [52]. The risk cost is incurred by the fluctuation of returns and is an important concern in financial investment [49]. Neglecting this cost may lead to a disastrous consequence in practice [24]. Most existing methods consider either one of them but do not constrain both costs simultaneously, which may limit their practical performance.

In this paper, considering the challenges of portfolio selection and its dynamic nature, we formulate portfolio selection as a Markov Decision Process (MDP), and propose a cost-sensitive portfolio policy network (PPN) to address it via reinforcement learning. Our main contributions are summarized as follows.

To extract meaningful features, we devise a novel two-stream network architecture to capture both price sequential information and asset correlation information. With such information, PPN makes more profitable decisions.

To control both transaction and risk costs, we develop a new cost-sensitive reward function. By exploiting reinforcement learning to optimize this reward function, the proposed PPN is able to maximize the accumulated return while controlling both costs.

We theoretically analyze the near-optimality of the proposed reward. That is, the wealth growth rate regarding this reward function can be close to the theoretical optimum.

Extensive experiments on real-world datasets demonstrate the effectiveness and superiority of the proposed method in terms of profitability, cost-sensitivity and representation abilities.

SECTION 2Related Work
Following Kelly investment principle [32], many kinds of portfolio selection methods have been proposed, including online learning and reinforcement learning based methods.

Online learning based methods maximize the expected log-return with sequential decision-making. The pioneering studies include Constant Rebalanced Portfolios (CRP) [11], [12], Universal Portfolios (UP) [12], Exponential Gradient (EG) [26], Anti-correlation (Anticor) [6] and Online Netwon Step (ONS) [2]. Recently, several methods exploit the mean reversion property to select the portfolio, e.g., Confidence Weighted Mean Reversion (CWMR) [35], Passive Aggressive Mean Reversion (PAMR) [36], Online Moving Average Reversion (OLMAR) [37], Robust Median Reversion (RMR) [29] and Weighted Moving Average Mean Reversion (WMAMR) [18]. In addition, the work [58] proposes an ensemble learning method for Kelly growth optimal portfolio.

However, all the above methods ignore the learning of sequential features and only use some handcraft features, such as moving average and stochastic technical indicators. As a result, they may perform unsatisfactorily due to poor representation abilities [15]. More critically, many of the above methods assume no transaction cost. Such a cost will bring biases into the estimation of accumulative returns [52], and thus affects the practical performance of these methods. In contrast, our proposed method not only learns good feature representation based on the proposed two-stream architecture, but is also sensitive to both costs.

On the other hand, reinforcement learning based methods use reinforcement learning algorithms to optimize specific utility functions and make comprehensive policies [45], [46], [47], [49], [50], [51]. However, all these methods ignore the feature representation on portfolios. Very recently, some studies apply deep reinforcement learning to portfolio selection, where they use deep neural networks [10], [20], [67], [68], [74], [74] to extract features [22], [31]. Specifically, the state-of-the-art one is the ensemble of identical independent evaluations (EIIE) [31]. However, both methods [22], [31] ignore the asset correlation and do not control costs during optimization, leading to limited representation abilities and performance. In contrast, our method can control both kinds of costs relying on the new proposed cost-sensitive reward.

Beyond that, there are also some theoretical studies on the optimal portfolio. To be specific, a theoretical optimal policy can be obtained by maximizing the expected log-return [3]. Based on this, a mean-variance portfolio selection is studied [53]. However, both studies assume no transaction cost, making them less practical. When considering the transaction cost, a theoretical optimal strategy can be achieved by optimizing the expected rebalanced log-return [23]. This work, however, ignores the risk cost. Instead, in this paper, we provide theoretical analyses for the proposed reward in the presence of both costs.

SECTION 3Problem Settings
Consider a portfolio selection task over a financial market during n periods with m+1 assets, including one cash asset and m risk assets. On the tth period, we denote the prices of all assets as pt∈R(m+1)×d+, where each row pt,i∈Rd+ indicates the feature of asset i, and d denotes the number of prices. Specifically, we set d=4 in this paper. That is, we consider four kinds of prices, namely the opening, highest, lowest and closing prices. One can generalize it to more prices to obtain more information. The price series is represented by Pt={pt−k,..,pt−1}, where k is the length of the price series.

The price change on the tth period is specified by a price relative vector xt=pctpct−1∈Rm+1+, where pct is the closing price of assets. Typically, xt,0 represents the price change of the cash asset. Assuming there is no inflation or deflation, the cash is risk-free with invariant price, i.e., {∀t|xt,0=1}, and it has little influence on the learning process. We thus exclude the cash asset in the input, i.e., Pt∈Rm×k×4. When making decisions, the investment decision is specified by a portfolio vector at=[at,0,at,1,at,2,…,at,m]∈Rm+1, where at,i≥0 is the proportion of asset i, and ∑mi=0at,i=1. Here, the portfolio decision contains the proportion of all assets, including the cash at,0. We initialize the portfolio vector as a0=[1,0,..,0] and initialize the gross wealth as S0=1. After n periods, the accumulated wealth, if ignoring the transaction cost ct, is Sn=S0∏nt=1a⊤txt; otherwise, Sn=S0∏nt=1a⊤txt(1−ct).

There are two general assumptions [37], [62] in this task: (i) perfect liquidity: each investment can be carried out immediately; (ii) zero-market-impact: the investment by the agent has no influence on the financial market, i.e., the environment.

3.1 Markov Decision Process for Portfolio Selection
We formulate the investment process as a generalized Markov Decision Process by (S,A,T,R). Specifically, as shown in Fig. 1, on the tth period, the agent observes a state st=Pt∈S, and takes an action at=π(st,at−1)∈A, which determines the reward rt=a⊤txt∈R, while the next state is a stochastic transition st+1∼T(st). Specifically, π(st,at−1) is a portfolio policy, where at−1 is the action of last period. When considering the transaction cost, the reward will be adjusted as rct:=rt∗(1−ct), where ct is the proportion of transaction costs. In Fig. 1, portfolio policy network serves as an agent which aims at maximizing the accumulated return while controlling both the transaction and risk costs.

Fig. 1. - 
Markov decision process for portfolio selection (Better viewed in color).
Fig. 1.
Markov decision process for portfolio selection (Better viewed in color).

Show All

Remark 1.
When trading volumes in the financial market are high enough, both general assumptions are near to reality. Moreover, the assumption (ii) indicates that the action A will not affect the state transaction P. That is, the state transaction only depends on the environment.

SECTION 4Portfolio Policy Network
4.1 General Architecture
In practice, both the price sequential pattern and the asset correlation are significant for the decision-making in portfolio selection tasks. Specifically, the price sequential pattern reflects the price changes of each asset; while the asset correlation reveals the macro market trend and the relationship among assets. Therefore, it is necessary to capture both types of information in the learning process. To this end, we develop a two-stream architecture for portfolio policy network to extract portfolio features. As shown in Fig. 2, PPN consists of three major components, namely the sequential information net which is to extract price sequential patterns, the correlation information net which is to extract asset correlations, and the decision-making module. Specifically, we will detail these components in the following subsections.

Fig. 2. - 
The scheme of the proposed portfolio policy network, where Correlation Information Net consists of three temporal correlational convolution blocks and $\oplus$⊕ denotes the concatenation operation. More detailed architecture information can be found in Section 6.1.4 (Better viewed in color).
Fig. 2.
The scheme of the proposed portfolio policy network, where Correlation Information Net consists of three temporal correlational convolution blocks and ⊕ denotes the concatenation operation. More detailed architecture information can be found in Section 6.1.4 (Better viewed in color).

Show All

4.2 Sequential Information Net
It is non-trivial to extract the price sequential pattern of portfolio series due to the non-stationary property of asset prices. To solve this issue, we propose a sequential information net, based on LSTM [27], to extract the sequential pattern of portfolios. This is inspired by the strong ability of LSTM in modeling non-stationary and noisy sequential data [19]. Concretely, as shown in Fig. 2 (top), the sequential information net processes each asset separately, and concatenates the feature of each asset along the height dimension as a whole feature map. We empirically show that the sequential information net is able to extract good sequential features and helps to gain more profits when only considering the price sequential information (See results in Section 6.3).

4.3 Correlation Information Net
Although recurrent networks can model the price sequential information, they can hardly extract asset correlations, since they process the price series of each asset separately. Instead, we propose a correlation information net to capture the asset correlation information based on fully convolution operations [33], [42], [63]. Specifically, we devise a new temporal correlational convolution block (TCCB) and use it to construct the correlation information net, as shown in Fig. 2 (bottom).

The proposed TCCB is motivated by the complex nature of portfolio selection. To be specific, we need to extract the asset correlation and model the price series simultaneously. To this end, we exploit the dilated causal convolution operation to model the portfolio time-series variation, and devise a new correlational convolution operation to capture the asset correlation information. To make it clear, we summarize the detailed structure of TCCB in Fig. 3, and describe its two main components as follows.

Fig. 3. - 
Illustration of the temporal correlational convolution block, where $\otimes$⊗ denotes the ReLU activation operation (Better viewed in color).
Fig. 3.
Illustration of the temporal correlational convolution block, where ⊗ denotes the ReLU activation operation (Better viewed in color).

Show All

4.3.1 Dilated Causal Convolutions
Inspired by [63], we use the causal convolution operation, built upon 1D convolutions, to extract the sequential information. Specifically, it can keep the sequence order invariant and guarantee no information leakage from the future to the past by using padding and filter shifting. A simple example is presented in Fig. 4a, which depicts a stack of causal convolutions with kernel size 3×1. However, the causal convolution usually requires very large kernel sizes or too many layers to increase the receptive field, leading to a large number of parameters.

Fig. 4. - 
Superiority of dilated causal convolutions compared to casual convolutions (Better viewed in color).
Fig. 4.
Superiority of dilated causal convolutions compared to casual convolutions (Better viewed in color).

Show All

To overcome this, inspired by [5], we use the dilated operation to improve the causal convolution, since it can guarantee exponentially large receptive fields [66]. To be specific, the dilation operation is equivalent to introducing a fixed step between every two adjacent filter taps [5]. A simple example is provided in Fig. 4b, which depicts a stack of dilated causal convolutions with kernel size 3×1. One can find that the receptive field of the dilated causal convolution is much larger than the causal convolution. Specifically, the gap of receptive fields between the two convolutions increases exponentially with the increase of the network depth.

4.3.2 Correlational Convolutions
Note that existing fully convolution networks [5], [42], [63], e.g., dilated causal convolutions, can hardly extract asset correlations, since they process the price of each asset separately by using 1D convolutions. To address this, we devise a correlational convolution operation, which seeks to combine the price information from different assets, by fusing the features of all assets at every time step. Specifically, we apply padding operations to keep the structure of feature maps invariant. With this operation, the correlation information net can construct a multi-block architecture as shown in Fig. 2 (bottom), and asymptotically extract the asset correlation without changing the structure of asset features.

In addition, we denote a degenerate variant of TCCB as TCB which does not use the correlational convolution operation. Concretely, TCB only extracts the price sequential information by using dilated causal convolutions. We empirically show that the correlation information net with TCCB can extract good asset correlations and helps to gain more profits, compared to TCB (See results in Section 6.3). This result further demonstrates the significance of the asset correlation in portfolio selection and confirms the effectiveness of the correlation information net.

4.4 Decision-Making Module
Based on all extracted feature maps, PPN makes the final portfolio decision. To avoid heavy transaction costs, we adopt a recursive mechanism [45] in the decision-making. That is, the decision-making requires considering the action from last period, which helps to discourage huge changes between portfolios and thus constrains aggressive trading.

In practice, we directly concatenate the portfolio vector from last period into feature maps. Here, the recursive portfolio vector at−1∈Rm also excludes the cash term, since it is risk-free and has little influence on the learning process. We then add a fixed cash bias into all feature maps in order to construct complete portfolios, and decide the final portfolio at∈Rm+1 with a convolution operation via softmax function. We highlight that the final convolution operation is analogous to making decisions by voting all feature vectors.

Remark 2.
The recursion mechanism of PPN makes the optimal portfolio policy time-variant, i.e., it is a non-stationary portfolio selection process [23]. More critically, the well-labeled data in portfolio selection is very scarce. These challenges make PPN hard to train with supervised learning.

SECTION 5Reinforcement Learning
Considering the complexity of portfolio selection, instead of supervised learning, we adopt reinforcement learning to optimize PPN and develop a new cost-sensitive reward function to constrain both transaction and risk costs during the optimization.

5.1 Direct Policy Gradient Algorithm
With the success of AlphaGo, many deep reinforcement learning algorithms have been proposed and achieve impressive performance [41], [44], [55]. Among these reinforcement learning algorithms, the most suitable one seems to be DDPG, since it can directly approximate the deterministic portfolio decision with DNNs. Nevertheless, DDPG needs to estimate the state-action values via a Q network, which is often hard to learn and usually fails to converge even in a simple MDP [45]. In our case, this issue is more serious since the decision process is non-stationary. Hence, the selection of reinforcement learning algorithms is non-trivial.

Fortunately, the sequential decision-making is an immediate reward process. That is, the reward of portfolio selection is immediately available. We can directly optimize the reward function, and use the policy gradient from rewards to train PPN. We highlight that this simple policy gradient method can guarantee at least a sub-optimal solution as follows.

Proposition 1.
Let θ be the parameters of the policy network, e.g., PPN and R be the reward. If the policy network is updated approximately proportional to the gradient △θ≈η∂R∂θ, where η is the learning rate, then θ can usually be assured to converge to a local optimal policy in the reward R [61].

We will further discuss the selection of reinforcement learning in Section 7.2.

5.2 Cost-Sensitive Reward Function
To constrain both transaction and risk costs, we develop a new cost-sensitive reward function. To this end, we first devise a risk-sensitive reward regarding no transaction cost.

5.2.1 Risk-Sensitive Reward
Assuming there is no transaction cost, most existing methods use the log-return (logrt) as the reward, since it helps to guarantee a log-optimal strategy.

Proposition 2.
If there is no transaction cost and the market is stationary ergodic, the portfolio policy that maximizes the expected log-return E{logrt} can achieve a log-optimal strategy, with the theoretical maximal growth rate W¯∗=limt→∞1tlogS¯∗t, where S¯∗t is the accumulated wealth [23].

In practice, we can use the empirical approximation of the expected log-return E{logrt} as the reward: R=1T∑Tt=1r^t, where r^t:=logrt is the log-return on the tth period, and T is the total number of sampled portfolio data.

However, this reward ignores the risk cost, thus being less practical. To solve this issue, we define the empirical variance of log-return on sampled portfolio data as the risk penalty, i.e., σ2(r^t|t=1,..,T), shortly σ2(r^t), and then develop a risk-sensitive reward function as
R=1T∑t=1Tr^t−λσ2(r^t),
View Sourcewhere λ≥0 is a trade-off hyperparameter.

We next show the near-optimality of the risk-sensitive reward. It represents the relationship between the policy regarding this risk-sensitive reward and the log-optimal strategy in Proposition 2 which cannot constrain the risk cost.

Theorem 1.
Let W¯∗ be the growth rate of the log-optimal strategy and S∗t be the wealth achieved by the optimal portfolio policy that maximizes E{logrt}−λVar{logrt}. Under the same condition as in Proposition 2, for any λ≥0 and 1e≤rt≤e, the maximal growth rate of this policy satisfies
W¯∗≥liminft→∞1tlogS∗t≥W¯∗−94λ.
View SourceRight-click on figure for MathML and additional features.

See the supplementary for the proof, which can be found on the Computer Society Digital Library at http://doi.ieeecomputersociety.org.ezproxy.auckland.ac.nz/10.1109/TKDE.2020.2979700. From Theorem 1, when λ is sufficiently small, the growth rate of the optimal strategy regarding this reward can approach the theoretical best one, i.e., the log-optimal strategy.

5.2.2 Cost-Sensitive Reward
Despite having theoretical guarantees, the risk-sensitive reward assumes no transaction cost, thus being insufficient. To solve this issue, we improve it by considering the proportional transaction cost. In this setting, the log-return will be adjusted as r^ct:=logrct=logrt∗(1−ct). Specifically, the expected rebalanced log-return can also guarantee the optimality when facing the transaction cost.

Proposition 3.
If the market is stationary and the return process is a homogeneous first-order Markov process, the policy that maximizes the expected rebalanced log-return E{logrct} can be optimal when facing transaction costs, with the maximal growth rate W~∗=limt→∞1tlogS~∗t, where S~∗t is the wealth achieved by this optimal strategy [23].

However, optimizing this rebalanced log-return cannot control transaction costs well. To solve this, we further constrain the transaction cost proportion ct. Let ωt:=1−ct be the proportion of net wealth, and let ψp and ψs be transaction cost rates for purchases and sales. On the tth period, after making the decision at, we need to rebalance from the current portfolio a^t−1=at−1⊙xt−1a⊤t−1xt−1 to at, where ⊙ is the element-wise product. During rebalancing, the sales occur if a^t−1,i−at,iωt>0, while the purchases occur if at,iωt−a^t−1,i>0. Hence,
ct=ψs∑i=1m(a^t−1,i−at,iωt)++ψp∑i=1m(at,iωt−a^t−1,i)+,
View SourceRight-click on figure for MathML and additional features.where (x)+=max(x,0). Following [39], we set ψp=ψs=ψ∈[0,1], and then obtain
ct=ψ∥atωt−a^t−1∥1.
View SourceGetting rid of ωt, we can bound ct as follows.

Proposition 4.
Let ψ be the transaction cost rate, a^t−1 and at be the asset allocations before and after rebalancing. The cost proportion ct on the tth period is bounded
ψ1+ψ∥at−a^t−1∥1≤ct≤ψ1−ψ∥at−a^t−1∥1,
View SourceRight-click on figure for MathML and additional features.where ∥at−a^t−1∥1∈(0,2(1−ψ)1+ψ].

See the supplementary for the proof, available online. Proposition 4 shows that both upper/lower bounds of ct are related to ∥at−a^t−1∥1: the smaller the L1 norm, the smaller the upper/lower bounds and thus the ct. By constraining this L1 norm, we derive the final cost-sensitive reward based on Theorem 1 and Proposition 4 as
R=1T∑t=1Tr^ct−λσ2(r^ct)risk-sensitive reward−γT−1∑t=2T∥at−a^t−1∥1transaction cost constraint,(1)
View SourceRight-click on figure for MathML and additional features.where γ≥0 is a trade-off hyperparameter.

We next show the near-optimality of the cost-sensitive reward, which reflects the relationship between the strategy regarding this cost-sensitive reward and the theoretical optimal strategy in Proposition 3 which cannot control both costs.

Theorem 2.
Let W~∗ be the growth rate of the theoretical optimal strategy that optimizes E{logrct}, and S∗t be the wealth achieved by the optimal policy that maximizes E{logrct}−λVar{logrct}−γE{∥at−a^t−1∥1}. Under the same condition as in Propositions 3 and 4, for any λ≥0, γ≥0, ψ∈[0,1] and 1e≤rct≤e, the maximal growth rate of this policy satisfies
W~∗≥liminft→∞1tlogS∗t>W~∗−94λ−2γ(1−ψ)1+ψ.
View SourceRight-click on figure for MathML and additional features.

See the supplementary for the proof, available online. Specifically, when λ and γ are sufficiently small, the wealth growth rate of the strategy regarding the cost-sensitive reward can be close to the theoretical optimum.

We highlight that this reward can be helpful to design more effective portfolio selection methods with the near-optimality guarantee when facing both transaction and risk costs in practice tasks. Specifically, by optimizing this reward with the direct policy gradient method, the proposed PPN can learn at least a sub-optimal policy to effectively maximize accumulated returns while controlling both costs as shown in Proposition 1.

Remark 3.
The denominator T in Eqn. (1) ensures that the rewards from different price sequences are equivalent. Moreover, the assumption (ii) makes the action and environment isolated, allowing us to use the same price segment to evaluate different actions. These enable us to train PPN with the online stochastic batch method [31], which helps to improve the data efficiency.

SECTION 6Experimental Results
We evaluate PPN in three main aspects: (1) the profitability on real-world datasets; (2) the feature extraction ability for portfolio series; (3) the cost-sensitivity to both transaction and risk costs. To this end, we first describe the baselines, metrics, datasets and implementation details in experiments.

6.1 Experimental Settings
6.1.1 Baselines
We compare PPN with several state-of-the-art methods, including Uniform Buy-And-Hold (UBAH), best strategy in hindsight (Best), CRP [12], UP [12], EG [26], Anticor [6], ONS [2], CWMR [35], PAMR [36], OLMAR [37], RMR [29], WMAMR [18] and EIIE [31]. In addition, to evaluate the effectiveness of the asset correlation, we also compare PPN with a degenerate variant PPN-I that only exploits independent price information by using TCB.

6.1.2 Metrics
Following [39], [57], we use three main metrics to evaluate the performance. The first is accumulated portfolio value (APV), which evaluates the profitability when considering the transaction cost.
APV=Sn=S0∏t=1na⊤txt(1−ct),
View SourceRight-click on figure for MathML and additional features.where S0=1 is the initialized wealth. In addition, at, xt and ct indicate the portfolio vector, the price relative vector and the transaction cost proportion on the tth round, respectively.

A major drawback of APV is that it neglects the risk factor. That is, it only relies on the returns without considering the fluctuation of these returns. Thus, the second metric is Sharpe Ratio (SR), which evaluates the average return divided by the fluctuation, i.e., the standard deviation (STD) of returns.
SR=Average(rct)Standard Deviation(rct),
View Sourcewhere rct is the rebalanced log-return on the tth round.

Although SR considers the volatility of portfolio values, it treats upward and downward movements equally. However, downward movements are usually more important, since it measures algorithmic stability in the market downturn. To highlight the downward deviation, we further use Calmar Ratio (CR), which measures the accumulated profit divided by Maximum Drawdown (MDD)
CR=SnMDD,
View SourceRight-click on figure for MathML and additional features.where MDD denotes the biggest loss from a peak to a trough
MDD=maxt:τ>tSt−SτSt.
View Source

Note that the higher APV, SR and CR values, the better profitability of algorithms; while the lower STD and MDD values, the higher stability of returns. We also evaluate average turnover (TO) when examining the influence of transaction costs, since it estimates the average trading volume.
TO=12n∑t=1n∥a^t−1−atωt∥1,
View SourceRight-click on figure for MathML and additional features.where a^t−1 and ωt indicate the current portfolio before rebalance and net wealth proportion on the tth round.

6.1.3 Datasets and Preprocessing
The globalization and the rapid growth of crypto-currency markets yield a large number of data in the finance industry. Hence, we evaluate PPN on several real-world crypto-currency datasets. Following the data selection method in [31], all datasets are accessed with Poloniex.1 To be specific, we set the bitcoin as the risk-free cash and select risk assets according to the crypto-currencies with top month trading volumes in Poloniex. We summary statistics of the datasets in Table 1. All assets, except the cash asset, contain all 4 prices. The price window of each asset spans 30 trading periods, where each period is with 30-minute length.

TABLE 1 The Detailed Statistics Information of the Used Crypto-Currency Datasets
Table 1- 
The Detailed Statistics Information of the Used Crypto-Currency Datasets
Some crypto-currencies might appear very recently, containing some missing values in the early stage of data. To fill them, we use the flat fake price-movements method [31]. Moreover, the decision-making of portfolio selection relies on the relative price change rather than the absolute change [37]. We thus normalize the price series with the price of the last period. That is, the input price on the tth period is normalized by Pt=PtPt,30∈Rm×30×4, where Pt,30∈Rm×4 represents the prices of the last period.

6.1.4 Implementation Details
As mentioned above, the overall network architecture of PPN is shown in Fig. 2. Specifically, there are three main components: Correlation Information Net, Sequential Information Net and Decision-making Module. To make it more clearer, we record the detailed architectures in Table 2.

TABLE 2 Detailed Network Architecture of the Proposed Portfolio Policy Network, Where we use the Following Abbreviations: CONV: Convolution Layer; N: The Number of Output Channels; K: Kernel Size; S: Stride Size; P: Padding Size or Operation Name; DiR: Dilation Rate; DrR: Dropout Rate

To be specific, in Correlation Information Net, we adopt the temporal correlational convolutional block as the basic module. To be specific, it consists of two components, i.e., the dilated causal convolution layer (DCONV) and the correlation convolution layer (CCONV).

Note that the concatenation operation in the decision-making module has two steps. First, we concatenate all extracted features and the portfolio vector from last period. Then, we concatenate the cash bias into all feature maps.

In addition, we implement the proposed portfolio policy network with Tensorflow [1]. Specifically, we use Adam optimizer with batch size 128 on a single NVIDIA TITAN X GPU. We set the learning rate to 0.001, and choose γ and λ from 10[−4:1:−1] using cross-validations. Besides, the training step is 105, the cash bias is fixed to 0, and the transaction cost rate is 0.25 percent, which is the maximum rate at Poloniex. In addition, the training time of PPN is about 4, 5.5, 7.5 and 15 GPU hours on the Crypto-A, Crypto-B, Crypto-C and Crypto-D datasets, respectively. All results on crypto-currency datasets are averaged over 5 runs with random initialization seeds.

6.2 Evaluation on Profitability
We first evaluate the profitability of PPN, and record the detailed performance in Table 3.

TABLE 3 Performance Comparisons on Different Datasets
Table 3- 
Performance Comparisons on Different Datasets
From the results, EIIE and PPN-based methods perform better than all other baselines in terms of APV. Since the three methods adopt neural networks to learn policies via reinforcement learning, this observation demonstrates the effectiveness and superiority of deep reinforcement learning in portfolio selection.

Moreover, PPN-based methods perform better than EIIE. This finding implies that PPN-based methods can extract better sequential feature representation, which helps to learn more effective portfolio policies with better profitability.

In addition, PPN outperforms PPN-I in terms of APV. This observation confirms the effectiveness and significance of the asset correlation in portfolio selection.

Last, PPN also achieves the best or relatively good SR and CR performance. Since both metrics belong to risk-adjusted metrics, this finding implies that PPN is able to gain more stable profits than other baselines.

6.3 Evaluation on Representation Ability
We next evaluate the representation abilities of PPN with different extraction modules, when fixing all other parameters. Specifically, we compare PPN and PPN-I with the variants that only adopt one module, i.e., LSTM, TCB or TCCB, namely PPN-LSTM, PPN-TCB and PPN-TCCB. To demonstrate the parallel structure, we also compare PPN and PPN-I with the variants that use the cascaded structure, namely PPN-TCB-LSTM and PPN-TCCB-LSTM. The only difference among these variants is that the extracted features are different. We present the results in Table 4 and Fig. 5, from which we draw several observations.

TABLE 4 Evaluations of Portfolio Policy Network With Different Feature Extractors
Table 4- 
Evaluations of Portfolio Policy Network With Different Feature Extractors

Fig. 5.
The performance development of the proposed portfolio policy network with different feature extractors and EIIE on the Crypto-A dataset (Better viewed in color). A larger scale version of this figure can be found in Appendix. D.1, available online.

Show All

First, we discuss the variants that only use one feature extraction module. Specifically, PPN-LSTM outperforms PPN-TCB, which means the proposed sequential information net extracts better price sequential patterns. Besides, PPN-TCCB outperforms PPN-LSTM and PPN-TCB, which verifies both TCCB and the correlation information net.

Second, all variants that consider asset correlations, i.e., PPN, PPN-TCCB and PPN-TCCB-LSTM, outperform their independent variants, i.e., PPN-I, PPN-TCB and PPN-TCB-LSTM. This observation confirms the significance and effectiveness of the asset correlation in portfolio selection.

Third, all combined variants, i.e., PPN, PPN-I and cascaded modules, outperform the variants that only adopt LSTM, TCB or TCCB. This means that combining both types of information helps to extract better features, which further confirms the effectiveness of the two-stream architecture.

Next, PPN outperforms all other variants, which confirms its strong representation ability. Note that PPN is not always the best throughout the backtest in Fig. 5. For example, in the early stage, many variants perform similarly. But in the late stage, PPN performs very well. Considering that the correlation between two price events decreases exponentially with their sequential distance [28], this result demonstrates better generalization abilities of PPN.

Lastly, as shown in Fig. 5, there are some periods that all methods (EIIE and PPN based methods) suffer from significant draw-down, like in the middle November and the earlier December. Since it is model-agnostic, such draw-down may result from the market factor instead of the methods themselves. Motivated by this, it is interesting to explore the market influence based on social text information for better portfolio selection in the future.

6.4 Evaluation on Cost-Sensitivity
6.4.1 Influences of Transaction Costs
In previous experiments, we have demonstrated the effectiveness of PPN, where the transaction cost rate is 0.25 percent. However, the effect of the transaction cost rate has not been verified. We thus examine their influences on three dominant methods on Crypto-A.

From Table 5, PPN achieves the best APV performance across a wide range of transaction cost rates. This observation further confirms the profitability of PPN.

TABLE 5 Comparisons Under Different Transaction Cost Rates on the Crypto-A Dataset
Table 5- 
Comparisons Under Different Transaction Cost Rates on the Crypto-A Dataset
Compared to EIIE, PPN-based methods obtain relatively low TO, i.e., lower transaction costs. Since EIIE optimizes only the rebalanced log-return, this finding indicates that our proposed reward controls the transaction cost better.

Moreover, when the transaction cost rate is very large, e.g., c=5%, PPN-based algorithms tend to stop trading and make nearly no gains or losses, while EIIE, however, loses most of the wealth with relatively high TO. This implies our proposed methods are more sensitive to the transaction cost.

6.4.2 Cost-Sensitivity to Transaction Costs
We further evaluate the influences of γ in the cost-sensitive reward. From Table 6, we find that with the increase of γ, TO values of PPN decrease. This observation means that when introducing ∥at−a^t−1∥1 into the reward, PPN can better control the trading volume, and thus better overcome the negative effect of the transaction cost.

TABLE 6 The Performance of Portfolio Policy Network Under Different γγ
Table 6- 
The Performance of Portfolio Policy Network Under Different $\gamma$γ
This finding is also reflected in Fig. 6. With the increase of γ, there are more period intervals remaining unchanged. That is, when the transaction cost outweighs the benefit of trading, PPN will stop the meaningless trading.

Fig. 6. - 
Performance development of portfolio policy network under different $\gamma$γ on the Crypto-A dataset. A larger scale version of this figure can be found in Appendix. D.1, available online.
Fig. 6.
Performance development of portfolio policy network under different γ on the Crypto-A dataset. A larger scale version of this figure can be found in Appendix. D.1, available online.

Show All

Note that, PPN achieves the best APV performance when γ=10−3 in Table 6. This observation is easy to understand. If γ is too small, e.g., 10−4, PPN tends to trade aggressively, leading to a large number of transaction costs, thus affecting the profitability of PPN. If γ is large, e.g., 10−2 and 10−1, PPN tends to trade passively, thus limiting the model to seeking better profitability. As a result, when setting a more reasonable value, e.g., γ=10−3, PPN can learn a better portfolio policy and achieve a better trade-off between the profitability and transaction costs.

6.4.3 Cost-Sensitivity to Risk Costs
We also examine the influences of λ in the cost-sensitive reward, and report the results in Table 7. Specifically, with the increase of λ, the STD values of PPN asymptotically decrease on all datasets. Since λ controls the risk penalty σ2(r^t), this result is consistent with the expectation and also demonstrates the effectiveness of PPN in controlling the risk cost. Moreover, with the increase of λ, the MDD results decrease on most datasets. Since MDD depends on the price volatility of the financial market, this result implies that constraining the volatility of returns is helpful to control the downward risk.

TABLE 7 The Performance of Portfolio Policy Network Under Different λλ
Table 7- 
The Performance of Portfolio Policy Network Under Different $\lambda$λ
SECTION 7Discussion
In this section, we further discuss the architecture design of PPN, the selection of reinforcement learning algorithms for PPN and the generalization abilities of PPN.

7.1 Architecture Design of Portfolio Policy Network
As shown in Fig. 2, we propose a two-stream architecture for PPN. Concretely, the sequential information net is based on LSTM, and the correlation information net is built upon TCCB. Noting that the fully convolution networks (e.g., TCB and TCCB) can also extract price sequential patterns, one may ask why we still use LSTM.

To be specific, although TCB and TCCB can learn sequential information, they can hardly make full use of them. Specifically, the traditional convolution assumes time invariance, and uses time-invariant filters to combine convolutional features. This makes fully convolution networks hard to extract large-scale sequence order information [7].

As shown in Fig. 2, the last Conv4 layer of the correlation information net directly uses the time-invariant filter to combine features, and hence only extracts some local sequential information. This makes PPN-TCB perform inferior to PPN-LSTM in Table 4. We thus exploit LSTM to better extract the sequential representation.

On the other hand, we propose TCCB to effectively extract the asset correlation. Such information is beneficial to improve the profitability of PPN and makes PPN-TCCB outperform PPN-TCB and PPN-LSTM in Table 4.

In addition, note that combining both types of information can further strengthen the feature representation of portfolios and make more profitable decisions (See results in Section 6.3). Hence, we devise a two-stream network architecture for PPN to better learn the portfolio series.

7.2 Reinforcement Learning Algorithm Selection
We next discuss the selection of reinforcement learning algorithms. Since we use the direct policy gradient (DPG) method, we mainly discuss why not use Actor-Critic (AC) policy gradient methods.

AC requires learning a “critic” network to approximate the value function, which then generates the policy gradient to update the “actor” network. In AC, the key step is the accurate approximation of the value function. Typically, there are three kinds of value functions. (1) State value: measure the performance of the current state, i.e., good or bad; (2) State-Action value (Q value): measure the performance of the determined action in the current state; (3) Advantage value: measure the advantage of the determined action than the average performance in the current state.

However, all of them are difficult to optimize PPN. First, the state value is unsuitable for our case, since the action of PPN does not affect the environment state due to the general assumption (ii). Thus, it cannot accurately measure the policy performance. Next, the Q value is also unsuitable, since the Q network is often hard to train regarding the non-stationary decision process [45]. Finally, the advantage value is still inappropriate, since its optimization relies on the accurate estimations of both state and Q values.

In conclusion, the value functions are inappropriate for PPN, due to the difficult approximation for portfolio selection. Hence, they may lead to biased policy gradients and worse performance of AC. On the contrary, DPG is guaranteed to obtain at least a sub-optimal solution as shown in Proposition 1, and helps to obtain better performance.

We next empirically evaluate AC algorithms on Crypto-A. We refer to the variant as PPN-AC, which is built upon Q values. Specifically, we adopt the DDPG algorithm [41] to optimize PPN-AC. The actor network in PPN-AC uses the same architecture as PPN, while the Q network and target Q network follow the network architecture in DDPG [41]. To better stabilize the training, we improve both Q networks with the dueling architecture mechanism [64].

We record the detailed results on the Crypto-A dataset in Table 9. To be specific, the performance of PPN-AC is far worse than PPN. This is because the Q network fails to approximate the Q value accurately, leading to biased policy gradients and worse performance. Although PPN-AC cannot achieve a satisfactory result, it still performs better than other baselines in Table 3. Such superiority mainly attributes to the strong representation ability of the actor network, i.e., PPN. This further confirms the effectiveness of the two-stream architecture. In the future, we will continue to improve the task-specific deep reinforcement learning algorithm for portfolio selection.

TABLE 8 Performance Comparisons on the S&&P500 Dataset
Table 8- 
Performance Comparisons on the S$\&$&P500 Dataset
TABLE 9 Evaluations of Reinforcement Learning Algorithms for Portfolio Policy Network on the Crypto-A Dataset

7.3 Application to Stock Portfolio Selection
In previous experiments, we have demonstrated the effectiveness of the proposed methods on crypto-currency datasets. Here, we further evaluate our methods on the S&P500 stock dataset obtained from Kaggle,2 which is summarized in Table 10. All experimental settings and implementation details are the same as before, except that the results are averaged over 20 runs with random initialization seeds. The results in Table 8 further verify the effectiveness of the proposed method in terms of the superiority of reinforcement learning, and the importance of sequential feature learning and asset correlation extraction. Also, the results demonstrate the generalization ability of our method.

TABLE 10 The statistics of the S&&P500 Dataset
Table 10- 
The statistics of the S$\&$&P500 Dataset
SECTION 8Conclusion
This paper has proposed a novel cost-sensitive portfolio policy network to solve the financial portfolio selection task. Specifically, by devising a new two-stream architecture, the proposed network is able to extract both price sequential patterns and asset correlations. In addition, to maximize the accumulated return while controlling both transaction and risk costs, we develop a new cost-sensitive reward function and adopt the direct policy gradient algorithm to optimize it. We theoretically analyze the near-optimality of the reward and show that the growth rate of the policy regarding this reward function can approach the theoretical optimum. We also empirically study the proposed method on real-world crypto-currency and stock datasets. Extensive experiments demonstrate its superiority in terms of profitability, cost-sensitivity and representation abilities. In the future, we will further discuss two general assumptions, and continue to improve the task-specific deep reinforcement learning method for better effectiveness, stability and interpretability. For example, we can further explore the correlation between social text information and price sequential information [65].

