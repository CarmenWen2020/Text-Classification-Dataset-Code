Although wireless networks are becoming a fundamental infrastructure for various control applications, they are inherently exposed to network faults such as lossy links and node failures in environments such as mining, outdoor monitoring, and chemical process control. In this paper, we propose a proactive fault-tolerant mechanism to protect the wireless network against temporal faults without any explicit network state information for mission-critical control systems. Specifically, the proposed mechanism optimizes the multiple routing paths, link scheduling, and traffic generation rate such that it meets the control stability demands even if it experiences multiple link faults and node faults. The proactive network relies on a constrained optimization problem, where the objective function is the network robustness, and the main constraints are the set of the traffic demand, link, and routing layer requirements. To analyze the robustness, we propose a novel performance metric called stability margin ratio, based on the network performance and the stability boundary. Our numerical and experimental performance evaluation shows that the traffic generation rate and the delay of wireless networks are found as critical as the network reliability to guarantee the stability of control systems. Furthermore, the proposed proactive network provides more robust performance than practical state-of-the-art solutions while maintaining high energy efficiency.

Keywords
Proactive mechanism
Fault-tolerant design
Wireless mesh network
Robustness
Mission-critical control system
Constrained optimization

1. Introduction
Wireless networks provide a scalable and cost-effective solution for various Internet of Things (IoT) applications due to the prohibitively high cost and the practical difficulty of employing cables in a complex control environment (Kassab and Darabkh, 2020; Park et al., 2018; Elazhary, 2019). There is a strong pull from industrial control systems to apply wireless networks as critical infrastructure for enabling mission-critical control systems such as factory automation and power network protection (Luvisotto et al., 2019; Aalsalem et al., 2018; Queiroz et al., 2017).

Mission-critical wireless networks must support the right decision at the right moment, even in the presence of unexpected congestion, network failures, or external manipulations of the environment (Park et al., 2018, 2021bib_Park_et_al_2018bib_Park_et_al_2021; Chakraborty et al., 2015). Communication link and node failures are particularly severe in environments with harsh conditions, such as exposure to weather variations in outdoor monitoring, chemical corrosions and high temperatures in process controls, and high voltages in power stations (Zhang et al., 2018; Montazeri et al., 2018; Wan and Chen, 2019). Link faults such as transmission failures or deadline misses, caused by the impairments of the wireless communications (e.g., fading and interference), may result in significant performance degradation and even more critical economic loss, human injury, or environmental damage (Kassab and Darabkh, 2020; Park et al., 2019; Li et al., 2020). Furthermore, node faults may range from permanent faults ‚Äìwhere a node completely crashes‚Äì to temporal faults ‚Äìwhere a node operates arbitrarily or maliciously‚Äì due to an incorrect state of software or hardware. Several studies have shown the existence of frequent link and node faults in wireless networks (Zhang et al., 2018; Mahapatro and Khilar, 2013). Although enabling wireless communications was a significant achievement in traditional networks, availability and reliability requirements of mission-critical control systems exceed what current networks can offer (Park et al., 2018).

Since link and node faults are inevitable, the fault-tolerant network design is becoming the cornerstone of mission-critical wireless networks to guarantee the overall safety and stability of control systems (Koutsiamanis et al., 2018; Koren and Krishna, 2007). Most of the previous adaptive network approaches rely on the reactive mechanisms based on the network monitoring information (Mahapatro and Khilar, 2013; Chakraborty et al., 2015). However, the reactive mechanism inherently has reaction delays to the faults because it requires fault detection and the corresponding fault recovery of the network (Park, 2019). The fault detection and fault recovery mechanisms begin after the network problems have already started, and they can take a long time, particularly for large-scale wireless networks. For example, when a link or node fails to forward packets in multihop networks, nodes may quickly move traffic to other available routing paths. However, as this reconfiguration often does not account for link capacity constraints, it can severely congest some links, which may not be tolerable for mission-critical control systems.

In this paper, we propose a novel proactive fault-tolerant mechanism to protect the network against temporal fault scenarios for mission-critical control systems. A proactive mechanism operates the network such that no congestion or significant loss occurs for arbitrary combinations of maximum Œº faults without any explicit network monitoring information. The control system demands are defined to optimize wireless networks for control stability and analyze network effects on the control systems. Specifically, the proposed mechanism optimizes the resource of multiple routing paths, link scheduling, and traffic generation rate such that the network guarantees the control stability even if it has at most Œºe link faults and Œºv node faults. We develop a layered-wise proactive fault-tolerant mechanism to deal with the computational complexity of various network constraints. We extensively compare the performance of the proposed solution to the state-of-the-art using both Monte Carlo simulations and practical experiments on off-the-shelf wireless sensor nodes. We show that the critical factor in designing wireless networks for control systems is not only the network reliability but also the traffic generation rate and the network delay for control stability. Our proposed proactive mechanism provides essential insights for implementing mission-critical control systems using low-cost IoT sensors.

The paper is organized as follows. In Section 2, we summarize existing related work. Section 3 describes the system model and the assumptions used throughout the paper. We formulate the main problem and develop solution algorithms in Sections 4 Communication components, 5 Reducing computational complexity, 6 Optimization problem formulation. Section 7 discusses the results of extensive simulations and experiments, followed by concluding remarks in Section 8.

Notations: Normal font x, bold font x, and calligraphic font ùìß denote scalar, vector, and set, respectively. ùìß denotes the cardinality of set ùìß, and [x]i shows element i of vector x. Table 1 summarizes main symbols used in this paper. We mainly use Greek letters for demand parameters or critical network parameters directly related to the fault-tolerant network design.


Table 1. Main symbols used in the paper.

Symbol	Meaning	Symbol	Meaning
ùì• (resp. ùìî)	Set of nodes (resp. links)	ùìï	Set of flows
ùìü
Set of paths of flow f	ùìí	Set of channels
Œºe (resp. Œºv)	Maximum allowable number of link faults (resp. node faults)	ùì£	Set of time slots of a superframe
mf (resp. nf)	Maximum number of paths of flow f using a link (resp. node)	
Reliability of path p on channel c
Œªf	Traffic demand of flow f, 
œÉf	Number of survivor paths of flow f
Maximum allowable transmission interval of flow f		
Slot allocation indicator of path p, 
yp,e	Routing path indicator, yp,e ‚àà{0, 1}
Traffic generation rate of path p on channel c, 
2. Literature survey
We can group the literature of the proactive fault-tolerant network design into two categories: 1) building multiple routing paths (Chakraborty et al., 2015; Hasan et al., 2017; Ganesan et al., 2001; De Armas et al., 2016; Omran et al., 2013; Sha et al., 2017); and 2) allocating the network resource to a set of routing paths (Koutsiamanis et al., 2018; Duquennoy et al., 2015; Accettura et al., 2013; Tavakoli et al., 2019; Mozaffari Ahrar et al., 2019).

The disjoint paths (also called path diversity) of the network increase the end-to-end reliability in the presence of network faults (Hasan et al., 2017). Ganesan et al. (2001) investigate a node-disjoint path scheme to guarantee the robustness against node failures. Their proposed solution extends the celebrated ad-hoc on-demand distance vector to support the multi-path routing. Multiple data collection trees rooted in each of the multiple sinks are constructed so that there are multiple node-disjoint paths to multiple sinks from each node (Chakraborty et al., 2015). The fully disjoint paths can also be used to deliver the additional packet copies to improve reliability and delay, at the cost of increased energy consumption for low-power industrial networks (De Armas et al., 2016). While the fully disjoint paths can achieve the best robustness, in certain topologies, it is not always feasible to build these paths due to the network structure. Moreover, identifying disjoint paths would be very challenging in the presence of correlated failures (Yaghoubi et al., 2018). An alternative solution is to use partially disjoint paths called the maximally link-disjoint paths where the number of links shared by routing paths is minimum (Omran et al., 2013). In practice, the on-demand routing protocols are generally used to build the maximally disjoint paths between source and destination using request/reply cycles (Hasan et al., 2017). For mission-critical industrial wireless networks, WirelessHART and ISA 100.11a use a reliable routing mechanism called graph routing to enhance routing reliability through redundant paths (Sha et al., 2017). Multiple routing paths are formed by generating the subgraphs containing all the shortest paths for source-destination pairs.

One interesting approach is LeapFrog Collaboration (LFC) to guarantee deterministic and reliable Time Slotted Channel Hopping (TSCH) communication over wireless multi-hop networks (Koutsiamanis et al., 2018). TSCH is one of the scheduled Medium Access Control (MAC) protocols to provide strict low-power, low-delay, and reliable communications for multi-hop industrial networks (IEEE 2012). LFC combines a multi-path routing algorithm and a heuristic scheduling algorithm to make route diversity by duplicating the data flow onto an alternate path, where multiple copies of the same data packet traverse on parallel paths through the wireless network. However, the heuristic scheduling algorithm does not guarantee an efficient allocation of channel resources among the flows. Furthermore, this approach does not control the traffic load, which plays a critical role in the control stability, as we will see later.

Since the TSCH scheduling problem is NP-hard, the existing scheduling algorithms provide suboptimal solutions for specific performance metrics (Park et al., 2018). Tavakoli et al. (2019) propose cross-layer low-latency topology management and TSCH scheduling technique to minimize the communication delay while maintaining a specific reliability requirement. This is done by using dedicated links and grouped retransmissions. The scheduling algorithm uses an optimized network topology to improve parallel TSCH communications. However, the main target scenario is the convergecast of dense in-vehicle networks, in which all nodes can potentially directly reach the sink node. Mozaffari et al. (Mozaffari Ahrar et al., 2019) propose a centralized scheduling algorithm to assign slots for the primary and alternative paths simultaneously so that multiple transmitters can share the resource for the same receiver. The schedule is constructed in such a way that only one transmitter is active at a time. Orchestra (Duquennoy et al., 2015) is an alternative scheduler that allows TSCH nodes to maintain their schedules autonomously, driven by the state of the routing protocol. However, the distributed Orchestra scheduling technique mainly focuses on scalability and cannot guarantee a delay-bounded schedule.

To the best of our knowledge, our paper is the first study to propose a proactive fault-tolerant mechanism to protect the network against temporal faults without any explicit network state information for mission-critical control systems. Even though many network optimization problems of routing, scheduling, and rate control have been proposed for wireless mesh networks, most works fall into the reactive approaches rather than the proactive ones for mission-critical control systems.

3. System model and assumption
In this section, we describe the system models and main assumptions of the paper.

3.1. Control system demand
Three major metrics to design wireless networks for control systems are the sampling interval, packet loss ratio, and packet delay (Park et al., 2018). Many works of control systems model the packet losses as prolongations of the sampling interval since they assume that a new packet is transmitted at the next transmission time with new data if a packet is lost (Bauer et al., 2014). Hence, the controller essentially observes the stochastic time-varying sampling interval even if sensors periodically operate in wireless networks. The time-varying sampling interval of successfully received information called Transmission Interval (TI) effectively captures the complex characteristics of both packet loss and sampling interval (Heijmans et al., 2017, 2018bib_Heijmans_et_al_2017bib_Heijmans_et_al_2018). Another important requirement is the delay defined as the time between the sampling instance and its reception at the destination. The stochastic time-varying TIs and delays are the fundamental interfaces between control and communication layers (Park et al., 2018; Bauer et al., 2014).

Validating the control stability for a given set of Maximum Allowable Transmission Interval (MATI) and Maximum Allowable Delay (MAD) requirements is a crucial step to design wireless networks for control systems (Bauer et al., 2014; Heijmans et al., 2017, 2018bib_Heijmans_et_al_2017bib_Heijmans_et_al_2018). The polytopic over-approximation is used to analyze the control stability for a given linear time-invariant plant and controller models (Bauer et al., 2014).

Motivating Example: We consider the batch reactor system to visualize the stability regions as a function of various TIs and delays (Heijmans et al., 2018). We run Monte Carlo simulations of a single-hop network with the number of contending nodes 5. The packet loss is modeled as a Bernoulli random process with loss probability 0.3. We measure TIs and delays of two well-known access control schemes, namely, TDMA and slotted ALOHA, over the stability region. We set the optimal channel access probability of slotted ALOHA to maximize the network throughput while TDMA assigns a slot to each node of the network. Since each node of TDMA transmits its corresponding values on the assigned slot, it generates the packet before the transmitting slot. On the other hand, the slotted ALOHA only generates new packets after it successfully transmits the packets.

We first discuss the stability region of different TIs and delays and then describe the network effects on control stability. Fig. 1 shows the control stability region with different TIs œÑ = 0.01, ‚Ä¶, 1 s and delays Œ¥ = 0.01, ‚Ä¶, 1 s. The white-colored area and gray-colored area present the stable and unstable operating region for a given TI and delay, respectively. We clearly observe that increasing the TI and delay makes the control system unstable. In general, the MAD requirement of stability becomes more strict as we relax the MATI requirement. Hence, there is a fundamental tradeoff between MATI and MAD requirements to guarantee the control stability.

Fig. 1
Download : Download high-res image (390KB)
Download : Download full-size image
Fig. 1. Stability region with different TIs, œÑ, and delays, œÉ. The white-colored area and gray-colored area present the stable and unstable operating region of control systems for a given TI and delay, respectively. The color bar shows the probability density function Pr[œÑ, Œ¥] of the TIs and delays of both TDMA and slotted ALOHA. The red-colored arrow describes how each access scheme reacts to packet losses.

In Fig. 1, we present the measured TIs and delays of both TDMA and slotted ALOHA over the stability region. The color bar shows the probability density function Pr[œÑ, Œ¥] of the TIs and delays of different access schemes. The red-colored arrow describes how each access scheme reacts to packet losses. Two schemes show considerably different network performance. One interesting observation is that the protocol design is a critical factor in guiding the network performance within the stability region, as illustrated in Fig. 1. The delay of the TDMA scheme is constant to 1 time slot, 10 ms, due to the constant gap between the sampling instance and its transmission slot. On the other hand, the delay of the slotted ALOHA is equal to TI since it only generates new packets after successful transmissions of previous packets. Increasing the stochastic delay degrades the stability margin. Furthermore, the retransmission of old duplicated data to maximize the reliability is not useful for control applications since it basically degrades both TIs and delays (Park et al., 2018). By considering these observations, our proposed mechanism minimizes the time delay between the sampling instance and packet reception time to maximize the MATI requirement and simplify the analysis of wireless network-based control systems.

The overall system becomes robust by increasing the distance between the network operating point and the unstable boundary since it allows more packet losses and delays within the stability region. To characterize network robustness, we define the network stability margin as the minimum distance between the network operating point and the unstable boundary to explicitly consider the worst-case analysis. We introduce a novel performance metric called stability margin ratio, to quantify the network effects on the control stability.

Definition 1

(Stability Margin Ratio). The stability margin ratio is the ratio between network stability margin and maximum margin, where the maximum margin is the maximum distance between ideal operating point (0, 0) of Fig. 1 and the unstable region.

The system achieves higher robustness once the stability margin ratio approaches 1.

3.2. Network model
We consider a typical wireless embedded sensor network of industrial environments (Park et al., 2018). We model the network as a directed graph ùìñùì•ùìî, where ùì• is a set of nodes, and ùìî is a set of directed links. We assume the set of flows ùìï consisting with source sf and destination df in the network, as shown in Fig. 2. Note that sources and destinations are sensors and controllers in the context of control systems. The main objective of the proactive mechanism is to guarantee a minimum data rate demand Œªf for any flow f under the maximum allowable number of link and node faults, (Œºe, Œºv), respectively. The minimum traffic demand is defined as the inverse of the MATI requirement of flow f, 
. Furthermore, the energy-efficiency of the network operation is crucial since we assume a typical IoT of low-power industrial networks.

Fig. 2
Download : Download high-res image (204KB)
Download : Download full-size image
Fig. 2. Network model with a set of flows between sources and destinations. Each traffic flow f is carried on a set of (mf, nf) link-node disjoint paths to protect the network against link and node faults.

The proactive mechanism adopts the multi-path strategy to improve the reliability and the delay by redundant paths ùìü
 of flow f against network link and node faults. Note that the multi-path means the multiple routing paths at the network layer in this paper. Using fully disjoint paths, each flow should lose at most one routing path upon a link or node fault. However, this strict routing approach limits flow to a small number of paths and restricts the network throughput. Furthermore, it may be infeasible to derive the fully disjoint paths due to the limitations of the network topology. Instead of considering fully disjoint paths, we use (mf, nf) link-node disjoint paths to balance the throughput and the robustness of the network, as shown in Fig. 2. For an individual flow, at most, mf ‚â• 1 paths should use a link, and at most, nf ‚â• 1 paths should use a node. Hence, the maximum number of flow f's paths traversing a link (resp. a node) is mf (resp. nf).

We denote by 
 the reliability of end-to-end path p for flow f on channel ùìí, where ùìí is the set of all channels. We assume the primary interference with no channel reuse. The proposed proactive mechanism relies on the scheduled MAC protocol with multichannel to support a predefined quality of service levels such as TSCH (IEEE 2012) and WirelessHART (Wang and Jiang, 2016). We implement our proactive mechanism on Contiki-NG and Zolertia remote (Zolertia) and compare it against the state-of-the-art solutions of practical interest in Section 7.

3.3. Fault model
We consider a short-term temporal link and node faults where its specific locations are dynamically changed in the network. In particular, we assume that the fault model is a random process with some joint distribution of link and node faults. Let [Œ±]e (resp. [Œ≤]v) denote a binary fault indicator, taking 1 if there is a fault on link e (resp. node v) and 0 otherwise. Then, the binary vectors of link and node faults are represented by (Œ±, Œ≤) where 
ùìî and 
ùì•. Hence, the fault process takes input graph ùìñùì•ùìî and returns the binary fault vectors (Œ±, Œ≤). Given a maximum allowable number of link and node faults (Œºe, Œºv), the set of feasible link and node faults is ùì¢
ùìî
ùì•
. Note that the routing path p is only functional if the path does not have any link and node faults. We assume that the network operator have access to the distributions of faults but not to their realizations.

4. Communication components
We propose a proactive fault-tolerant mechanism to handle the unpredictable link and node faults of the network while meeting the control stability demand. The proposed proactive network does not rely on any explicit fault detection or any reaction mechanism. Fig. 3 describes the overall process of our proposed approach. The inputs to our proactive fault-tolerant optimization engine are the traffic demand 
 of flow f, robustness requirement of link-node (Œºe, Œºv), a directional graph ùìñùì•ùìî, and the number of paths of flow f, ùìü
. The choice of protection level (Œºe, Œºv) allows the trade-off between robustness and energy consumption, as we will discuss later.

Fig. 3
Download : Download high-res image (280KB)
Download : Download full-size image
Fig. 3. Overall process of the proactive fault-tolerant optimizer for wireless networks.

We have three set of decision variables: routing path yp,e ‚àà{0, 1}, traffic generation rate 
, and link scheduling of every path 
 for all ùìü
ùìïùìîùìíùì£. With these variables, we handle possible fault cases within link-node protection level (Œºe, Œºv) where ùì£ is the set of slots of the superframe. The major design components and constraints of the fault-tolerant network problem are as follows.

Traffic demand: Given a set of link and node faults (Œ±, Œ≤), we let ùìü
 be the set of survivor paths without any link and node faults of flow f. The proactive network should be able to support the traffic demand Œªf using all set of survivor paths ùìü
 with reliability 
. Given all possible fault cases ùì¢
, the total transmit rate of flow f should guarantee traffic demand Œªf over the survivor paths ùìü
. Hence, the traffic demand constraint becomes(1)
ùìü
ùìí
ùìïùì¢
where 
 if yp,e = 0. A number of combinations of up to Œºe link faults and Œºv node faults are 
ùìî
 and 
ùì•
, respectively. There is a serious scalability issue since the number of the constraints significantly increases as the network size increases. We will discuss how to overcome this limitation in Section 5.

Traffic scheduling: To maximize the stability margin, the proposed proactive mechanism achieves the minimum constant end-to-end delay between sampling instance and reception time by sequentially scheduling all links of a path. More precisely, the source nodes are configured to transmit first, and then relay nodes according to their distance from the destination in ùì£. Each time slot is long enough to deliver the packet from source to destination of a path. Given a sampling period 
 of path p on channel c, we sequentially assign the time slots to all links of path p within a superframe of length ùì£. Hence, the slot scheduling constraints become(2) 
ùìü
ùìï
ùì£
 where the binary variable 
 is 1 if all links of path p is allowed to schedule at time t and channel c. Note that the schedulability of routing paths also depends on the interference with other nodes, as we will formalize in (7), (8).

Flow conservation: Each node follows the flow conservation law where the incoming and outgoing loads of each node must be equal. Let us denote ùìò
 and ùìû
 are the set of incoming and outgoing links of node v, respectively. The flow conservation constraints of relay, ùì•
, are given by(3)
ùìò
ùìû
ùìü
ùìïMulti-path: Each flow builds (mf, nf) link-node disjoint path to meet the constraints on the maximum number of mf shared links and nf shared nodes. Hence, the link-node disjoint path constraints become(4)
ùìü
ùìîùìïand(5)
ùìû
ùìü
ùì•
ùìï

We also add the multi-hop limit umax to avoid the possible routing loops and to improve the reliability in practice. Furthermore, the routing path limitation can handle the delay requirement as well (Hasan et al., 2017). The constraint of the number of hops of path p is(6)
ùìî
ùìü
ùìïPrimary interference: Each node is only able to support a single path due to the primary interference at time slot t. Hence, the primary interference constraint becomes(7)
ùìü
ùìïùìí
ùì£ùì•where ùìü
 is the set of paths through node v.

No channel reuse: Since we do not allow the channel reuse, the maximum number of allocated time slots per channel is(8)
ùìü
ùìï
ùì£ùìíNote that the secondary interference problem is resolved by satisfying constraint (8).

We can formulate a proactive fault-tolerant optimization problem to minimize the energy consumption while handling the number of link and node faults and the control stability demands based on the path-constrained multi-commodity flow problem. However, this cross-layer resource allocation problem is generally a mixed-integer nonlinear problem with a large number of constraints.

5. Reducing computational complexity
In this section, we present a key approach for reducing the computational complexity of the traffic demand constraint without any explicit network fault information. Such a method will allow us to establish a computationally affordable solution to the resource allocation problem. The traffic demand constraint of (1) is one of the major computational challenges due to a large number of constraints depending on the fault realizations of links and nodes.

Let us define the number of survivor paths œÉf for a given fault case. œÉf is a random variable since every realization of the fault process generates a new œÉf. To make the network robust against possible faults, we first characterize œÉf. Following Lemma 1 shows universal lower and upper bounds on œÉf.

Lemma 1

When there are (Œºe, Œºv) link-node faults, the number of survivor paths is bounded as(9)ùìü
ùìü
for any fault cases ùì¢
.

Proof

Since œÉf is limited by the number of routing paths ùìü
 of flow f, the upper bound of œÉf is trivial. Regarding the lower bound, denote 
 (resp. 
) as the i-th largest number of paths using a link (resp. node) of the network carrying flow f. Hence, 
 (resp. 
) as the maximum number of paths using a link (resp. node) of the network. All routing paths 
 are failed once any link with 
 is faulty. Then,ùìü
ùìü
which completes the Proof.

‚ñ°

If we find the feasible solution to meet all constraints of (1), (2), (3), (4), (5), (6), (7), (8) subject to the lower bound  
 
 
ùìü
 of Eq. (9), then we guarantee the network protection against any possible fault cases ùì¢
. The number of linear constraints is reduced to 
ùìï
ùìü
 
 
 in (1). This significant reduction of the computation complexity comes at no penalty to the optimal solution. Still, the universal lower bound of (9) is very conservative as it considers the worst-case faults. Such worst cases may happen extremely rarely, yet meeting them may make the optimization problem infeasible. We have observed in our extensive numerical and experimental studies that (Œºe, Œºv) link-node faults corresponds to œÉf far greater than the lower bound of  
 
 
. We can design a proactive fault-tolerant mechanism that protects a network in almost all fault realizations, except for a few extremely rare cases. Since the network operator knows the fault random process, it can simulate the fault process on the network topology and find the Complementary Cumulative Density Function (CCDF) of random variable œÉf. We denote CCDF of œÉf by 
 
. The CCDF of œÉf provides a problem-specific bound that is much tighter than (9).

Definition 2

(Number of survivor paths). Let 
 
 for œÅ ‚àà [0, 1] be the minimum integer value of n for which 
 
. Define the nominal number of survivor paths as 
 
.

For any œÅ, 
 means that 
. Namely, 
 
 reduces to a lower bound on œÉf, given by (9). When we protect a network with minimum 
 survivor paths, we are implicitly protecting the network with probability œÅ. Our mechanism is not able to protect the network when 
 with probability 1 ‚àí œÅ. Note that 
 
 and therefore 
 
 are available a priori, for any positive integer n and œÅ ‚àà (0, 1].

By using 
, we modify the constraint (1) for efficient fault-tolerant design. All possible combinations of 
 paths out of all routing paths ùìü
 satisfy the traffic demand. We denote by ùìü
ùìü
 the set of paths with cardinality 
. Then we replace the traffic demand constraint (1) with the following equation:(10)
ùìü
ùìí
ùìü
ùìü
ùìü
This inequality constraint of Eq. (10) is reasonable because the traffic flow must meet traffic demand Œªf using minimum 
 survivor paths. The number of linear constraints is significantly reduced to 
ùìï
ùìü
. We set œÅ = 0.95 as the default parameter in this paper.

Now, we show the fundamental trade-off between robustness requirement and feasibility of œÉf. As an illustrative example, we consider a static wireless network with number of relays Nrp = 30, number flows ùìï, number of paths per flow ùìü
, and MATI 
 s. Fig. 4 shows the CCDF of the number of survivor paths per flow with different link protection level Œºe = 2, 3, 4 and node protection level Œºv = 0, 1 over the results of 500 simulations. The solid and dotted lines of the figure represent the number of survivor paths of flows œÉf and the lower bound of survivor paths  
 
 
, given in (9), respectively. Note that  
 
 
 is not constant since it also depends on the disjoint path properties (mf, nf) of each flow f for different simulations. We clearly observe the CCDF gaps between œÉf and  
 
 
. For a given link and node protection levels, the lower bound  
 
 
 shows a significantly low number of surviving routing paths than the actual œÉf. For instance, it is infeasible to provide any protection œÅ = 1 for Œºe = 3 and Œºv = 0 since œÉf < 0. However, we can still protect the network 95% of the time if we set Œºe = 3 and Œºv = 0 since 
. Furthermore, as the link and node protection level become stricter, the CCDF curves becomes more strict due to lower œÉf. Altogether, we use Definition 2 to design efficient proactive fault-tolerant optimizer and then use parameter œÅ to trade off between performance and fault tolerance.

Fig. 4
Download : Download high-res image (294KB)
Download : Download full-size image
Fig. 4. CCDF of the number of survivor paths per flow with link protection level Œºe = 2, 3, 4 and node protection level Œºv = 0, 1. The solid and dotted lines of the figure represent the number of survivor paths of flows œÉf and the lower bound of survivor paths  
 
 
, given in (9), respectively.

6. Optimization problem formulation
Our proactive fault-tolerant mechanism should compute the multiple routing paths, the slot scheduling, and the traffic generation rate to distribute the traffic flow such that no congestion occurs even after up to Œºe link and Œºv node faults while meeting the control stability demands. By using the key ideas of Section 5, three problems, namely, routing (11c), (11a), (11b), traffic generation control (12d), (12e), (12a), (12b), (12c), and slot scheduling (13a), (13b), (13c), (13d) are formulated to optimize the resource allocation.

Fig. 3 illustrates the overall process of the layered proactive fault-tolerant mechanism. Each problem corresponds to a layer, and the interfaces among layers are characterized as a function of the optimization variables to coordinate the problems. The routing optimization problem firstly computes optimal routing path 
, and maximum number of shared links 
 and nodes 
 of paths belonging to the flow. The optimal values of 
 and 
 are then inserted to the traffic generation control problem in order to compute the optimal rate 
. Note that the path reliability 
 of channel c is estimated based on the measured link reliability. We also compute the number of survivor paths 
 based on CCDF of œÉf to meet the protection probability œÅ, as described in Section 5. These optimal values 
, and 
 are the input to the slot scheduling problem. The slot scheduling block assigns slot ùì£ to path p to meet the sampling period 
.

It is worth mentioning that we can partially adapt the operation variables of our proactive network for certain cases. For instance, the proposed method can adapt the link scheduling and the traffic generation rate if some paths are permanently failed. We only need to find the solutions of two optimization problems of traffic generation control (12d), (12e), (12a), (12b), (12c) and slot scheduling (13a), (13b), (13c), (13d), and update these variables along the same path. Hence, the proposed approach is general enough to be applied to other scheduled MAC layers and other multi-path routing protocols.

6.1. Routing problem
While the number of survivor paths œÉf is a complex function of the network topology with time-varying link and node faults,  
 
 
 of Eq. (9) gives a simple lower bound on œÉf. Furthermore, maximizing  
 
 
 is still beneficial for the nominal number of survivor paths 
 since there is a correlation between œÉf and  
 
 
. The objective function of the routing optimization problem is to maximize the minimum lower bound of the number of survivor paths  
 
 
 of Eq. (9) subject to the flow conservation constraints (3), (mf, nf) link-node disjoint path constraints (4), (5), and number of hop limits (6). By considering Eq. (9) with the number of paths ùìü
, the objective function is to minimize the maximum value of Œºemf + Œºvnf for ùìï. Hence, the routing optimization problem becomes(11a) 
ùìï
 
(11b)(11c)
ùìîùìü
ùìïwhere the decision variables are routing paths yp,e and maximum number of shared links and nodes (mf, nf) of flows.

6.2. Traffic generation control problem
The main inputs of the traffic generation control problem are the traffic demand of the flow Œªf, the number of nominal survivor paths 
, the optimal routing path 
, and the path reliability 
. Our main policy is to maximize the path diversity and channel diversity by distributing the traffic flow over different paths and channels to improve the network robustness. Specifically, the objective function of the traffic generation control problem is formulated as the weighted sum of two terms, namely, traffic distributions over paths 
ùìí
 and traffic distributions over channels 
ùìïùìü
. The decision variables 
 basically distributes the traffic of flow f to different paths ùìü
 and channel ùìí. The traffic generation control problem becomes(12a) 
ùìïùìü
ùìí
 
 (12b)
ùìü
ùìí
ùìü
ùìü
ùìü
(12c)
ùìí
ùìïùìü
(12d)
ùìï
ùìü
ùìí(12e)
ùìü
ùìïRecall that ùìü
ùìü
 is the set of paths with cardinality of 
, as discussed in Section 5. In (12b), as the number of nominal survivor paths 
 decreases, fewer number of routing paths must meet the traffic demand Œªf. The traffic demand constraint becomes strict as 
 decreases.

6.3. Slot scheduling problem
The slot scheduling and the sampling instance are tightly aligned since new data is only generated before the assigned slot of the routing path due to Eqs. (2), (7), (8). The basic idea of the slot scheduling is to maximize the time diversity between multiple paths of the flow while meeting the sampling period 
. We introduce the sliding window to effectively distribute the slot scheduling of paths where the length of the sliding window is set to the minimum sampling period 
ùìïùìü
ùìí
. More precisely, the objective function of the slot allocation problem is to minimize the maximum number of assigned time slots of the sliding window over the superframe. Three main constraints are the traffic generation period (2), primary interference (7), and no channel reuse (8). The slot scheduling problem is(13a) 
ùìï
 
(13b)
ùìïùì£
(13c)(13d)
ùì£ùìü
ùìïwhere the decision variables 
 are the slot scheduling of path p on channel c at time slot t.

6.4. Complexity analysis
The routing optimization problem (11a), (11b), (11c) and slot scheduling problem (13a), (13b), (13c), (13d) are the binary programming problems, and the traffic generation control problem (12a), (12b), (12c), (12d), (12e) is the linear program. The binary optimization problem can be computationally expensive to solve even for a small network. Hence, we translate the binary problem into the satisfiability problem by using conjunctive normal form (Bordeaux et al., 2006). The satisfiability problem is efficiently solved using zChaff (Fu et al., 2004) in real-time, even for large-scale networks. Furthermore, it is also possible to apply the routing algorithm to build the maximally disjoint paths at a similar complexity cost of the Dijkstra algorithm (Taft-Plotkin et al., 1999).

By using the interior-point method (Vaidya, 1989), the traffic control problem takes 
ùìï
ùìü
ùìü
ùìî
ùìï
ùìü
ùìï
ùìü
 
ùìï
ùìü
 arithmetic operations in the worst case where up is the number of hops of path p and L is a complicated quantity, roughly the log of the largest absolute value of the subdeterminant of the coefficient matrix in linear programs. Despite such expression being involved, the traffic generation control problem has around O(8.5 √ó 104) for our practical simulation setups of Section 7.

7. Performance evaluation
7.1. Evaluation setup
In this section, we evaluate the proposed proactive fault-tolerant network with respect to two state-of-the-art solutions, namely, LFC (Koutsiamanis et al., 2018) and Orchestra (Duquennoy et al., 2015), in both Monte Carlo simulations and practical experiments. While LFC relies on the multiple routing paths, the resource scheduling of time slots and channels is not optimized to meet the strict MATI constraints. Hence, we apply the multichannel scheduling policy of our proposed scheme. We set an equal number of routing paths for both LFC and the proactive network. Orchestra allows each node maintains its schedule locally based on its neighbors and parents of the routing protocol (Duquennoy et al., 2015). While Orchestra provides different scheduling options, the sender-based scheduling method assigns one receiving slot per neighbor (coordinates based on the neighbor) and a single transmitting slot (coordinates based on sender node) within the superframe. Note that the sender-based Orchestra scheduling presents better reliability and delay than the ones using other scheduling options due to the lower contention level (Duquennoy et al., 2015). The default time slot of Orchestra is 10 ms comparable with various industrial standards (IEEE 2012; Wang and Jiang, 2016). On the other hand, the time slot of the proposed proactive network and LFC is extended to 20 ms to forward a packet over multi-hop paths. Note that the packet forward mechanism reduces the transmission time of the multi-hop paths at the cost of the routing inflexibility. The maximum (resp. minimum) number of hops of paths is 4 (resp. 2) for all solutions. The sampling periods of LFC and Orchestra are set to the MATI requirement and the superframe length based on the trade-off between TI and energy-efficiency, as we will see later. Table 2 presents the detailed parameters of simulations and experiments.


Table 2. Evaluation setup.

Parameter	Value
Simulation	Experiment
Deployment	Uniform random in	Grid in
150 m √ó 150 m	90 m √ó 70 m
Number of nodes	(20 ~50)+ùìï	60
Number of flows, ùìï	3 ~6	6
Duration	106 time slots	15 h
MATI, 
0.2s, 0.3s, 0.4s	0.2s, 0.4s
Sampling period, h	LFC: 
, Orchestra: ùì£
Number of paths, ùìü
Proactive/LFC: 3 ~5, Orchestra: 1
Superframe length, ùì£	Proactive/LFC: 0.4s, Orchestra: 0.07s
Slot length	Proactive/LFC: 20 ms, Orchestra: 10 ms
Set of channels, ùìí	15, 20, 25, 26
We use the Prowler simulator (Simon et al., 2003) in order to fully control the conditions of the simulations. In each simulation, we consider a static wireless network with a various number of relay nodes Nrp deployed in the field of 150 m √ó 150 m. We randomly locate the source-destination nodes of flows outside of the deployed relays while maintaining the minimum number of hops to 2. This paper runs two different fault models, namely, the link fault model and the concurrent fault model. In the link fault model, each packet loss is modeled as a Bernoulli random process where the packet loss probability is estimated based on the channel model (ITU-R, 2017). However, practical wireless links are highly correlated over time and space and are hard to predict. The concurrent fault model not only relies on the link fault model but also considers the bursty errors of multiple links and nodes of routing paths. We independently pick the number of concurrent link faults le and node faults lv of the routing paths where each fault lasts for 10 s. In each figure, SimL and SimC denote the link fault model and the concurrent fault model, respectively. We analyze the performance of different solutions with 500 randomly generated network topologies, each for 106 slots.

Besides simulation, we implement the proactive network by using TSCH implementation of Contiki-NG, and Zolertia remote (ARM Cortex-M3, 32 MHz clock speed, 32 kB RAM, 512 kB flash, CC2538 radio) (Zolertia) and compare it against LFC (Koutsiamanis et al., 2018) and Orchestra (Duquennoy et al., 2015). A timer interrupt governs all TSCH operations, and radio interrupts are disabled. TSCH is entirely responsible for managing the radio and reading out data whenever appropriate, as well as for generating and parsing IEEE 802.15.4e enhanced ACKs and beacons. Each relay disables the interactions with upper layers of TSCH MAC in order to forward the packet within 20 ms. The extensive set of experiments is conducted on the testbed containing 60 Zolertia remote deployed in the field of 90 m √ó 70 m. Our evaluation bases on 10 individual experiments, up to 15 h long each.

7.2. Numerical results
Fig. 5 presents the TI and delay CDFs of both the proactive network with protection level Œºe = 2, 4, Œºv = 0, LFC, and Orchestra as obtained by the set of simulations and experiments. We set the number of relays Nrp = 40, number flows ùìï, number of paths per-flow ùìü
, and MATI 
 s in both simulations and experiments. The link fault model is used for all simulations. We clearly observe that the proactive network outperforms LFC and Orchestra in terms of TI and delay for lower percentiles. One of the major observations is that the TI CDFs of both LFC and Orchestra follow the discrete function with the step size of the sampling period while the proactive network gives a smooth TI CDF, as shown in Fig. 5(a). The proactive mechanism allocates the traffic flow to all paths in order to protect the network against any faults up to (Œºe, Œºv). The sampling period of multiple paths is well-distributed thanks to the objective function of the slot scheduling problem (13a), (13b), (13c), (13d). On the other hand, LFC and Orchestra schedule the network resources with fixed sampling periods 0.2 s and 0.07 s, respectively. This is the main reason for the different characteristics of the CDF curves.

Fig. 5
Download : Download high-res image (473KB)
Download : Download full-size image
Fig. 5. TI and delay of both the proactive network, LFC, and Orchestra through simulations and experiments.

In Fig. 5(a), LFC provides the almost deterministic TI CDF around 0.2 s in the simulation since the multiple routing paths deliver the redundant packet copies. Fig. 5(b) presents the variable delays of LFC within 0.2 s due to packet losses of routing paths. Note that the delay of the proactive network is fixed to 20 ms due to its direct scheduling policy between sampling instances and allocated time of paths. On the other hand, the experimental TI CDF of LFC has a long tail with the multiple of the sampling period 0.2 s. It means that the TI performance of LFC is significantly degraded if the sampled data is not delivered within 0.2 s since all routing paths deliver the same redundant information. While this approach effectively improves the reliability, it does not provide robust TI and delay performance.

To quantify the performance robustness and cost, we use three main metrics, namely, percentile, stability margin ratio, and duty-cycle. Let us define the x-percentile TI q as 
 
 where Cq(n) = Pr[q ‚â§ n] and 
 is an inverse distribution function. Since we are interested in quantifying the robustness, we consider the 95th percentile value of TI and delay of the network as a default parameter. We also use the 95th percentiles of TI and delay as the operating point to compute the stability margin ratio of Definition 1. Finally, the duty-cycle is the portion of time spent with the radio on (either transmitting, listening, or receiving) of nodes.

We now evaluate the proposed proactive network with respect to LFC and Orchestra for different protection levels, number of relays, number of flows, and fault models through simulations and experiments. Fig. 6 shows the 95th percentile TI, stability margin ratio, and duty-cycle of the proactive network with protection level Œºe = 2, 4, Œºv = 0, LFC, Orchestra as a function of different number of relays Nrp = 20, ‚Ä¶, 50. We set the number flows ùìï, number of paths per flow ùìü
, and MATI 
 s. The concurrent fault model fixes le = Œºe and lv = Œºv.

Fig. 6
Download : Download high-res image (487KB)
Download : Download full-size image
Fig. 6. TI, stability margin ratio, duty-cycle of the proactive network with link protection level Œºe = 2, 4, LFC, and Orchestra as a function of different number of relays Nrp = 20, ‚Ä¶, 50 obtained by different link fault model and concurrent fault model of simulations.

Fig. 6(a) and (b) compare the 95th percentile TI and the stability margin ratio of benchmarks. All solutions operate under the stability region since the stability margin ratio is positive, while both the proactive network and LFC only meet the MATI requirement 
 s. The 95th percentile TI of both the proactive network and Orchestra usually decreases with the number of relays due to extra alternative paths. On the other hand, the constant TI of LFC basically means that most packets are successfully delivered within the sampling period. Furthermore, LFC shows the comparable 95th TI percentile to the ones of the proactive network with link protection level Œºe = 2 for a lower number of relays Nrp ‚â§ 30, as shown in Fig. 6(a). However, the stability margin ratio between the proactive network and LFC is significantly different. The main reason is that the stochastic delay of LFC severely degrades the minimum distance of the stability margin. The worst combination of both stochastic TIs and delays may incur catastrophic consequences to the unstable region, as illustrated in Fig. 1. On the other hand, the stability margin of the proactive network is more robust since it only depends on the TI performance due to the low constant delay. LFC has a low stability margin ratio similar to those using Orchestra, even with much lower TI since the maximum delay of Orchestra is smaller than the ones using LFC. Note that the sampling period bounds the maximum delay of both LFC and Orchestra.

By comparing Fig. 6(a) and (c), we clearly observe the fundamental trade-off between TI and duty-cycle of the proactive network. In Fig. 6(c), the proactive network considerably improves the duty-cycle as we increase the number of relays for a large number of relays Nrp ‚â• 25. The main reason is that the traffic distribution module between link-node disjoint paths of the proactive network efficiently utilizes a large number of relays. The higher link protection level Œºe = 4 provides better TI to the ones with lower protection level Œºe = 2 because the proactive network allocates more network resources to guarantee the MATI requirements with strict robustness requirements. Besides, the proactive network protects the link and node faults with the reasonable cost of energy consumption. While the single dominant routing path of Orchestra provides the lowest duty-cycle, it possibly incurs the unbalanced energy consumption between nodes.

LFC meets the MATI requirement for both the link fault model and the concurrent fault model. However, the concurrent fault model considerably affects both the stability margin ratio and the duty-cycle due to the long delay of packet arrivals. Our proactive network provides robust TI, stability margin ratio, and duty-cycle for both fault models because the optimization framework explicitly considers the protection demands of the link and node faults. Furthermore, the proposed proactive fault-tolerant mechanism does not need to reconfigure the network operations such as routing, link scheduling, and traffic distribution unless the maximum number of link and node faults are larger than (Œºe, Œºv), respectively. On the other hand, the traditional reactive method continuously runs the network monitoring procedure, and it must reconfigure its operations based on the current failed links and nodes, which may entail intolerable signaling and computational overheads. Even though the entire latency between fault occurrence and network reaction must be well bounded to protect the network, it is hard to guarantee it in practice (Mahapatro and Khilar, 2013). In fact, this is the main reason for presenting only the simulation results of Orchestra using the link fault model. Orchestra is not able to properly operate with the concurrent fault model since it takes several minutes to reconfigure the network routing and the resource allocation (Duquennoy et al., 2015).

While the proactive mechanism must effectively allocate the network resources to all paths to protect the network, we may not know the actual number of faulty links le in practice. Now, we analyze the performance of the proactive network when le ‚â† Œºe for the concurrent fault model. Fig. 7 presents the stability margin ratio of the proposed proactive network with link protection level Œºe = 3 and node protection level Œºv = 0, 1, and LFC as a function of different number of link faults le = 1, ‚Ä¶, 6 and node faults lv = 0, 1. We set the number of relays Nrp = 30, number of flows ùìï, number of paths per flow ùìü
, and MATI 
 s. Note that we do not show the simulation results of Orchestra since it has significantly low stability margin ratio due to the reconfiguration delay in the concurrent fault model. While the proactive network is primarily designed to meet the traffic demand for le ‚â§ Œºe, it still provides robust stability margin ratio with different flows ùìï and node faults Œºv for le ‚â• Œºe. In fact, the 95th percentile TI of the proactive network is still lower than MATI for le = 4 and is around 0.24 s for le = 6. Hence, the proactive network still provides the robust performance even beyond the link protection level le ‚â• Œºe. On the other hand, the stability margin ratio of LFC is seriously degraded for le = 6 and lv = 1 as the faulty node affects multiple links.

Fig. 7
Download : Download high-res image (235KB)
Download : Download full-size image
Fig. 7. Stability margin ratio of the proposed proactive network with link protection level Œºe = 3 and node protection level Œºv = 0, 1, and LFC as a function of different number of link faults le = 1, ‚Ä¶, 6 and node faults lv = 0, 1 obtained by the concurrent fault model. The proactive network provides the robust performance even beyond the link protection level le ‚â• Œºe.

Fig. 8 presents the experimental results of the stability margin ratio and the duty-cycle of the proposed proactive network with link protection level Œºe = 1, 2, 3, LFC, and Orchestra. We set the number flows ùìï, number of paths per-flow ùìü
, and MATI 
 s. While both the proactive network and LFC meet the MATI requirements 
 s, both solutions show considerably different stability margin ratios dependent on the MATI requirement due to the stochastic delay of LFC. By comparing the stability margin ratio and duty-cycle, we clearly observe a fundamental trade-off between robustness and energy consumption of both the proactive network and LFC. The proactive network with link protection level Œºe = 1, 2 provides a better stability margin ratio and duty-cycle to the ones using LFC. Besides, the stability margin ratio is slightly improved with the link protection level due to the redundant network resources at the slightly higher cost of the duty-cycle. Hence, the fault-tolerant mechanism efficiently improves the stability margin of the proactive network with the reasonable cost of energy consumption. While Orchestra achieves the low duty-cycle, it does not provide the high stability margin ratio due to the fundamental limits of the single routing path and the heuristic scheduling.

Fig. 8
Download : Download high-res image (210KB)
Download : Download full-size image
Fig. 8. Experimental stability margin ratio and duty-cycle of the proposed proactive network with link protection level Œºe = 1, 2, 3, LFC, and Orchestra. The fault-tolerant mechanism efficiently improves the stability margin of the proactive network with the reasonable cost of energy consumption.

Another interesting observation is that the link protection level with strict MATI requirement 
 s significantly affects the energy consumption to guarantee the lower TI. On the other hand, its effect is relatively small for the duty-cycle with relaxed MATI requirement 
 s. Furthermore, while the duty-cycle is approximately proportional to the inverse of the MATI requirement, the benefit of the MATI requirement is limited for the stability margin ratio. Hence, there are complex interactions between control stability demand, robustness requirement, and energy consumption, which requires further investigations.

8. Conclusions
This paper proposed a proactive fault-tolerant mechanism of wireless mesh networks to protect the network against temporal faults without any explicit network state information for mission-critical control systems. Our approach optimizes the routing path, link scheduling, and traffic generation rate to satisfy a control stability demand even if it has multiple link and node faults. The implementation and the operation complexity of the proactive network are low since it does not need to monitor and reconfigure the network up to protection level requirements. To analyze the robustness, we proposed a novel performance metric called stability margin ratio based on the percentiles of transmission interval and delay, and the stability boundary. Simulation and experimental results demonstrated that our proactive design provides a robust transmission interval and stability margin performance compared to the state-of-the-art solutions with a reasonable energy consumption cost. We also showed that the network robustness of the proactive network is still maintained even beyond the target protection levels. Furthermore, the traffic generation rate and the delay are found as critical as the reliability to design wireless networks for critical control systems since they significantly affect the operation direction of the stability margin. The proposed proactive mechanism provides crucial insights to use low-cost and low-power wireless sensors for mission-critical control systems.