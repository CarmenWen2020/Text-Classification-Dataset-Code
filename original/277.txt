Smart Healthcare systems compromise complex computations such as visualization of molecules, analysis of DNA, and therapy determination. These are considered to be complex problems that today's supercomputers are still facing. On the other hand, Quantum computing promises fast, efficient, and scalable computing resources that are sufficient to compute large and complex operations in exponential time. It is a fact that Quantum computing will adequately innovate the computation perspective. However, it is not a feasible solution yet as it is likely to be rare and highly expensive to produce. This paper presents a Quantum Cloud-as-a-service for an efficient, scalable, and secure solution for complex Smart Healthcare computations. Our novelty resides in the usage of Quantum Terminal Machines (QTM) and Blockchain technology to enhance the feasibility and security of the proposed architecture. Experimental results prove the feasibility of the architecture and the absolute security of the implemented Q-OTP encryption.
Keywords
Quantum cloud-as-a-service
Blockchain
Cloud computing
Security
Privacy
Smart healthcare
1. Introduction
A scalable Smart Healthcare system requires secure data collection, efficient and fast data processing, and systematic knowledge extraction (Demirkan, 2013). These applications are often computationally complex and require extensive and powerful computing resources. For instance, RNA sequencing requires at least 1.5–12 days or even more of computation time (Kukurba and Montgomery, 2015) using today's supercomputers. Moreover, healthcare data generated by sensors and health records reached  gigabytes in the U.S. only (Transforming Health, 2013). Healthcare big data consist of large and complex Electronic Health Record (EHR) such as radiology images, annotations, immunization dates, medications, treatment plans, laboratory data, and test results. Apart from EHR, computation on medical data may include DNA computations, molecules visualization, treatment discovery, and so on. The complexity of big medical data resides in the volume, diversity, and speed at which it should be computed and managed (Frost & Sullivan: Drownin). The volume and variety of medical data create a complex exponential searching problem over uninstructed records. While the long computation time needed to manage these kinds of data contributes to a critical restriction of improvement that can be fatal in several cases (Javed et al., 2020; Singh, Azzaoui, Kim, Pan, Park; He et al., 2020; Chen et al., 2020; Alshammari et al., 2020b). Furthermore, the security and privacy of big medical data is another concern urging quick management. The most significant healthcare data breach caused by a third-party vendor happened in 2019 (Healthsecurity and Lates, 2020).

Reportedly, a Blackbaud ransomware attack mirrored the AMCA breach; the attack affected more than 10 million patient records. Medical big data are an essential resource to create better-personalized treatment and medical service for patients. However, the main issues that face medical big data are the complexity, volume, variety, and security. The current computation resources and security measurements have failed multiple times to provide the required and designed service. The recent Coronavirus disease 2019 (COVID-19) case has proved how limited our systems are in discovering a fast and efficient diagnostic process (Naudé, 2020; Wang et al., 2020).

From another perspective, Quantum Information Science is the next promising area of computation and data processing. By nature, Quantum computing merges classical information theory with Quantum physics theorems (Abrams and Lloyd, 1997; EL Azzaoui, 2020). Quantum computers utilize Quantum mechanical states of elementary particles, notably the internal angular momentum known as spin, to creates Quantum bits (Qubits). And according to Quantum physics law, a single Qubit holds a proportion of two values; 1, which accords to a spin up, and 0 for a spin down. Thus, a Quantum computer with  Qubits is capable of performing  Computations synchronously, leading to an exponential computation speed-up.

Quantum computers can be a promising solution to enhance the usability of big medical data by performing scalable complex computation and search algorithms on uninstructed data efficiently and improve the Quality of Service provided by intelligent healthcare systems. However, just like the early generation of classical computers, Quantum computers are scarce and likely to be expensive. To this end, we present in this paper a Blockchain-based delegated Quantum cloud architecture for medical big data processing and security. Blockchain is used for security purposes to select and authenticate the nodes that can participate, share, and use the Quantum service in the cloud. In addition, a Quantum server is hosted at the cloud layer to store and process medical-related big data securely, and Quantum Terminal Machines are used as a safe and cost-effective intermediate between classical users and Quantum servers at the cloud.

The following points summarize our main research contribution:

•
We propose a Blockchain-based delegated Quantum cloud architecture for secure medical data processing. Our proposed architecture is divided into three phases: the Blockchain-cluster generation phase, Quantum Terminal Machine phase, and the Quantum cloud-as-a-service phase.

•
Blockchain, as a distributed technology, secure communication between classical users such as smart hospitals, medical research institutions, and smart healthcare providers with the Quantum Terminal Machine at the edge layer. This phase generates secure authenticated clusters that can access the Quantum cloud and benefit from its computation power.

•
Quantum Terminal Machines, known as Quantum Images, is used as a secure medium between classical and Quantum cloud servers. Its primary role is to transform classical bits into Qubits and compile the results received by the Quantum cloud back to deciphered classical bits for the users.

•
Delegated Quantum cloud concept is utilized to securely compute patient sensitive data at the cloud layer while conserving the information secrecy (inputs and outputs) and computation security.

The rest of our proposed research paper is organized as follows; a brief background study that includes related works and the proposed architecture's consideration is depicted in the second section. The third section comprises the main idea overview along with the phase followed in the proposed architecture. A security analysis and performance evaluation are discussed in the fourth section. At the same time, the fifth section interprets a detailed discussion with the open research challenges. And finally, we conclude this work by the sixth section.

2. Related work
The complex nature of medical data urges the usage of a more powerful computation resource to reach the desired Quality of Service (QoS) and Quality of Experience (QoE). Quantum computers at the cloud layer are theoretically capable of providing fast and efficient computation and analysis of big medical data. In the following, we will discuss some of the main proposed ideas and protocols for Quantum Cloud-as-a-service.

2.1. Seminar contribution
Singh et al. (Singh and Sachdev, 2014) discussed the possible advantage of deploying Quantum cloud-as-a-service. Their paper proposes a comprehensive analysis of Quantum technology integrated with cloud services. The authors stated that the essential benefit of Quantum cloud-as-a-service technology is the extermination of security dilemmas that can be possible using Quantum-based cryptography of Quantum Cloud. However, this paper did not present any concur case-study nor analysis that can support the proposed idea. On the other hand, Xin et al. (2018) depicted the concept of Quantum cloud on a nuclear magnetic resonance Quantum computer. The proposed service is similar to IBM Quantum cloud experience, where they deployed nuclear magnetic resonance to implement computing tasks. Nonetheless, they can only offer up to 2 Qubits fidelity via randomized benchmarking tests. Gong et al. (2021) proposed an advanced usage of the K-means algorithm, which is wildly used in solving clustering problems, on a trusted Quantum cloud server. The k-means algorithm executes a core subroutine “SwapTest” and “GroverOptim,” all while reducing the load of the client. However, their proposal requires regular clients to have a small Quantum machine at their disposal to communicate with the Quantum server at the cloud layer. Table 1 summarize the above discussed related works in comparison of our proposal.


Table 1. Related work comparison.

Research work	Year	Quantum Cloud	Security	Confidentiality	Efficiency	Limitation
Singh et al. (Singh and Sachdev, 2014)	2014	Yes	No	No	No	No case-study was presented to prove the feasibility of the proposed idea
Xin et al. (Xin et al., 2018)	2017	Yes	No	No	No	2 Qubits fidelity via randomized benchmarking tests
Gong et al. (Gong et al., 2021)	2021	Yes	Yes	Yes	No	requires regular clients to have a small Quantum machine at their disposal.
Our Contribution	2021	Yes	Yes	Yes	Yes	Tested only on medical data at the moment.
These states-of-art papers presented the utilities of Quantum server at the cloud layer and discussed how it would improve the computation efficiency at an exponential level testing it by using different algorithms such as Grover search algorithm, K-means algorithms, and others. However, the limitations of these works are quasi the same; users or clients are all required to have a Quantum machine to deliver the constructions as Qubits and compile the results back. This technique is known as Quantum Internet, where the communication is established between two Quantum machines, one at the client level and the other at the cloud level (more powerful server). Quantum Internet-based communication is cert a very secure means to deliver data and computation instructions, yet, it is not feasible due to multiple reasons, including cost requirements and entanglement complications (Kim et al., 2021). Thus, this paper proposes an achievable, cost-effective, scalable, secure, and efficient solution using Blockchain technology, Quantum Terminal Machines, and a medium.

2.2. Key consideration
The primary considerations of the proposed architecture are depicted as follows:

•
Scalability: Smart healthcare system combined advanced IoT devices, sensors, and big complex data, including radiology images and medical history. The end goal of this application is to improve the Quality of Life and Quality of Services for the patient. Medical big data are growing fast as more applications, sensors, and patients are contently added by the time. Thus, creating a scalable infrastructure that enables healthcare providers to maintain the needs of its fast-growing components, and Quantum cloud as a service can ensure this scalability.

•
Efficiency: The efficiency of computations is another critical requirement for big medical data. However, with the existing and fast-growing large-scale applications, efficiency is not always guaranteed as the needs and demands are higher than the current classical services and systems. Therefore, a fast and efficient computation system is highly required to balance the scalability and efficiency of medical data processing, thus improving the QoS for the patient.

•
Security and privacy: Smart Healthcare systems are designed to collect numerous amounts of data, notably real-time acquired data and information. Users' private information such as ID, names, locations, health conditions, and many more can lack to hackers intentionally and unintentionally. Thus, securing this data is a critical requirement. This issue is addressed by giving access to only pre-authenticated users.

•
Confidentiality: The main challenges of big medical data are the security and privacy of information. Sensitive data are vulnerable to attacks from third parties, which may lead to data manipulation, loss, or exposure by unauthorized individuals. In addition, smart healthcare systems are more prone to security attacks and disclosure of their data as they hold sensitive information about the users.

•
Integrity: Data manipulation or modification by any unauthorized party is another critical issue in the smart city environment. An attacker may use malware or masquerade attacks to erase the data.

•
Availability: In a smart healthcare environment, due to its sensitive nature, data should be accessible by authorized individuals and parties whenever needed. Assuring data availability is critical to the functionality of smart healthcare systems as it relies mainly on data acquisition.

3. System model
To secure medical data at the cloud level, improve the computation efficiency using Quantum technology, and solve the cost and feasibility dilemma of having Quantum machine at the user level, we propose in this paper a novel solution. Our proposed architecture can be divided into three layers: 1) Medical device layer, 2) Edge layer, 3) Cloud layer. The overview of the architecture is depicted in Fig. 1 bellow.

Fig. 1


Fig. 1. Architecture overview.

3.1. General Architecture Overview
The proposed architecture is composed of three layers, and it is designed to create a feasible, secure, and scalable Medical big data processing using delegated Quantum computing and Blockchain technology.

1)
Device layer: The first layer of our proposed architecture is the device layer; it compromises smart healthcare data collected by a trusted healthcare service provider such as hospitals. These data rely on patient's healthcare records that can be possessed directly from medical IoT devices and wearable sensors, or the hospital records of patient drugs, diseases, and analysis, and radiology histories. These data are referred to as Electronic Healthcare Records, and it is susceptible due to its nature, and essential to create a target and personalized treatment for every patient; thus, it requires higher security measurements. Moreover, the complex medical data that include DNA sequencing, drug molecule visualization, treatment discovery, and so on (Alshammari et al., 2020a; Farahani et al., 2021; Deng and Long, 1103; Kashefi and Pappa, 2017; Go Lang NaCryptography; W'ojcik, 2003; Serrano, 2021; He et al., 2020) are collected at this layer as well. These data are critical and challenging to compute using today's faster supercomputers, and they contribute directly to better treatment and understanding of each patient case; hence, they urge fast, scalable, and efficient data processing.

2)
Edge Layer: The second layer in the proposed architecture is the edge layer. This layer is the main contribution of our proposal. Blockchain technology resides in this layer to create a secure cluster of honest nodes with the right to access the Quantum cloud and benefit from its services. Moreover, Quantum Machine Terminals, known as Quantum Images, are included in this layer to facilitate communication between classical users and Quantum cloud.

3)
Cloud Layer: The final layer in the proposal is the cloud layer where the Quantum server resides. The Quantum server at the cloud layer perform all sorts of requested computations from the client, such as DNA sequencing, drug discovery, or search over uninstructed and variant databases, without pre-knowledge of the inputs. Thus, the name of delegated computation at the Quantum cloud server is provided. The requested analyses are executed exponentially faster, scalable, and more efficient than any classical computer, more secure as the communication channels between the client and the Quantum server at the cloud is verified and validated by Blockchain technology. Furthermore, the computations are blindly proceeded, which will secure the information and computation as well. For the purpose of implementation and simulation of this proposed architecture, we consider the case where each service provider in cloud has its own has its own embedded Quantum service; in the scenario of smart healthcare, the service provider is controlling a Quantum-based cloud dedicated for healthcare services only.

The main design of this architecture can be divided into three essential steps; first, the pre-initialization phase where Blockchain-based cluster selection is performed. To prevent malicious nodes and components of smart healthcare systems such as fake hospitals from accessing the services of Quantum network, a Blockchain is used to verify and validate every node that requests the provided services. The second is the essential initialization phase of Quantum Machine Terminals; Quantum Machine Terminal (QMT) plays a medium between the classical devices and the Quantum servers. QMT is a small Quantum machine with at least 1-qubit, and it helps compile classical bits into Qubits readable by the Quantum server s and vice-versa. And finally, the Quantum cloud computation phase at the cloud layer. The Quantum Cloud Computation (QCC) is the set of operations and functions run on Quantum servers for the benefits of Medical extensive data security and processing such as Delegated Quantum Computation (DQC) and Grover's search algorithm. In the following sub-sections, we will depict these phases in detail.

3.2. Pre-initialization phases
Due to the computation power guaranteed by the Quantum Cloud, not every client of a smart healthcare system should have the right to access it and utilize it. Only pre-validated and authenticated nodes such as honest hospitals and national health providers could request the usage of Quantum Cloud services, and as a result, only the same certified devices are capable of receiving the computation results back from the Quantum cloud and decrypting them. Blockchain as a distributed, secure, and cryptographically guaranteed neither non-falsified nor modified distributed ledger technology (Farahani et al., 2021; Serrano, 2021) can be used as a means of verification and authentication of nodes. In this case, we propose a Blockchain-based cluster selection; the consensus algorithm utilized is an improved version of the well-known Practical Byzantine Fault-Tolerance algorithm. A consortium Blockchain is considerate where the nodes that verify and validate the requests are all pre-selected nodes. Algorithm 1 depicted the required steps.

Algorithm 1: Honest Clients Selection (HCS)
1: Input: Client ID and the request message to join the Quantum Cloud
2: Output: Decision and final consensus result (If the client can join
and participate in the Quantum Cloud or not)
3: Process:
4: .Send(< , Msg, t>, request, CA);
//with : client identify, t: timestamp, CA: Check Authority
5: CA.Verify (< , h, Msg, t>, );//h: the Msg high
6: .Prepare(<v, h, d>, Msg);//d: the Msg digest, v: view identity
7: .Broadcast(<v, h, d, s>, );//s: the digest signature of 
8: for i = 1 to n
 {
9: .Receive(<v, h, d, s>);
10: .Verify(<v, h, d, s>, f, n);
11: .Prepare(<v, h, d, s>);
12: .Broadcast(<v, h, d, s>, );
13: .count(<f: fault d>, count m);
 }
//if m > f+1, broadcast commit, mark and reply to CA ().
14: while count: m > (f + 1) then
 {
//add a marking function to determine whether it
 is consistent with the final result.
//r: the result of the request operation
15: . Mark(<v, in: d, out: d, t, Mark: k>);
16: . Commit(<v, h, d, s, t>, Result: k, );
 }
17:  .Receive(<v, h, d, s, t>, Msg: r, count m);
18: while count: m>(2f+1) then
 {
19: .Compute (<v, h, d, s>, Msg: r,  = 0.Mark = r);
 }
20: for k = 1 to n
 {
21:  . FinalCheck (BSk.Mark = r);
22: i f .Mark = = .Mark then
 {
23: add  ToBlockhain (BC, , 0, );
 }
24: else
25: skip;
 }
The honest client selection can be explained as follows; When a client (healthcare provider, hospital) desires to benefit from the Quantum cloud services, it has to send a request to the Checking Authority (CA) first. In this algorithm, the CA can be a government healthcare authority that manages other clients; the CA is assigned the role of the root in this algorithm. The CA verifies the identification of the client; if it is accurate, CA becomes the root assigned  and start broadcasting the message. The peers that receive the message form  continue forwarding the messages and calculating the number of messages in their memory. Once the number of messages reaches f+1 round, the commit status is broadcasted, and the marked results are sent to . The function mark is deployed in this algorithm for final phase checking. The participated peers continue sending results to  until it reaches 2f+1. Using the mark function, the results of  and  can be compared. If results are consistent, the client is considered an honest client; if not, the request is omitted.

Blockchain-based cluster selection ensures that only honest clients can be a part of the system, thus providing the desired protection for smart healthcare clients. Therefore, only honest and verified clients can utilize this system. However, this is not the only role of Blockchain in our system. After verifying and validating the honest nodes, Blockchain will secure communication between the validated health service provider and the Quantum Machine Terminal at the edge layer. This additional phase tightens the security of private data and computation requests and ensures that the Quantum Machine Terminal is blind to the inputs and outputs.


Algorithm 2: Transaction of Secure Messaging(TSM)
1: Input: Honest clients selected using the first algorithm.
2: Output: Secure messaging transaction.
3: Process:
4: .Send(< , t>, request,  );
5: .Verify (, h, request, t);
6: if ValBC.include ( = true
7: {
8:  .Send(<  >,);
9: .Receive(<  >);
10: NPR = = .Convert(<CDHCK>, );
11:  .Encrypt(<NPR, NaCL>, Msg);
12: .send(Msg,  T, N);
13:  verify(, T, N);
//if the timestamp, nonce, and client id are correct
14: while true
{
//Create a new transaction and add it to the block
15: .Create(<Msg,  h, BCid, T, N > NewTransaction);
16: else
17: skip;
}
}
Using Algorithm 2, we encrypt all the messages sent from the healthcare client to the QMT at the edge layer using Blockchain, and the curve 25519 Diffie-Hellman cipher key (CDHCK) is used to encrypt the private client-key. The newly generated encrypted private key is utilized to encrypt the message intended to be sent using the NaCl Crypto Box algorithm. NaCl box is a novel high-speed library for network communication (Go Lang NaCryptography). It is used to encrypt, sign, and decrypt messages. We deployed this algorithm in our framework due to its easy usage and high-speed performance. The messages and computation requests sent from healthcare clients include sensitive information such as the patient's name, medical history, or even DNA information. All these data request heavy computations at the Quantum server. In our proposed framework, we use a Quantum Machine Terminal (QTM) at the edge layer as a means of communication between the healthcare client and the Quantum server in the cloud. And, differently from other related works, we considered the security of communication between the client and edge nodes using Blockchain technology. Thus, the QMT is entirely blind and does not know the data sent by the healthcare client or the computation requests. The role of QMT is to transform the message and request sent by the client from classical bits into a readable Qubit for the Quantum server. The following section will deploy in detail this step.

4. Quantum Machine Terminal
The Quantum Machine Terminal (QMT), also known as Quantum Image, is one of the main contributions of this paper. QMT is used as a medium between classical clients such as smart hospitals and Quantum Servers in the cloud. Thus, reducing the need to have a Quantum computer at the end-user level, which is not feasible in today's scenarios. Moreover, QMI enhances the security of communication between the client and the Quantum server using Quantum-based cryptography.

4.1. Initialization phase
The role of the encoding gates is to convert classical bit to Qubits and encodes the resulted Qubits to gates. To encode Qubits to gates, we deployed the Rx, Ry, and Rz Quantum Logical Gates.

•
 Gate:  is one of the rotation operators. It is a single qubit rotation based on the angle  around the x-axis such as:

(1) 
 
 
 
 
 
•
 Gate:  is one of the rotation operators. It is a single-qubit rotation through angle  around y-axis such as:

(2) 
 
 
 
 
 
•
 Gate:  is one of the rotation operators. It is a single-qubit rotation through angle  around z-axis such as:

(3) 
 
 
 
The usage of ,  gates along with the “CNOT” gate allow us to encode Qubits into gates ready to be sent to the cloud where the Quantum server resides. To build this system, we used IBM's Quantum cloud for researches and Qistkit language. Fig. 3. a capture the code deployed to create the desired gates, while Fig. 3. b depicts the its visual representation.

Fig. 3

Fig. 3. (a). Quantum Instruction Language to encode Qubits into gates. (b) Visual representation of the deployed.

4.2. Secure communication between QMT and QCS
The healthcare client forwards the message to the edge layer where Quantum Machine Terminal resides securely by adopting Blockchain. QMT has to dispatch the message to Quantum Cloud Servers for processing purposes. Numerous addressed the computation perspective and its errors correctness. However, to the best of our knowledge, the security aspect was yet to be considered. Quantum Key Distribution (QKD) enables secure communication based on a common secret key between two parties over long-distance. QKD is one of the most used Quantum cryptographical solutions, as it proved to be unconditionally secure over perfect Quantum communication channels. However, it is quasi-insecure over noisy channels, as W'ojcik (W'ojcik, 2003) has discussed. Moreover, QKD is suitable to detect whether the encoded message has been leaked to an eavesdropper or not, yet, the encoded secret message can be leaked before the eavesdropper is detected, which broke the security requirements for healthcare applications. On the other hand, Quantum One-Time Pad (Q-OTP) permits establishing an absolute secure communication between two entities where the private key is as long as the message. The usage of Q-OTP ensures total communication security and privacy in a secret direct communication environment. This paper improved on Deng et al. (Deng and Long, 1103) proposal of creating a Quantum Secure Direct Communication (QSDC). QSDC is used in urgent circumstances to send secure messages without producing a shared secret key. In our scenario, a healthcare client, after being verified and authenticated using Blockchain technology, can communicate directly with the QMT at the edge layer. The Healthcare client is capable of sending the desired computation function as an encrypted message to QTM. By its turn, QTM converts the message from classical bits to Qubit understandable by a Quantum server. At this phase, the QTM needs to establish a secure communication channel with the Quantum server at the cloud layer. To this end, we deploy a Q-OTP algorithm to ensure the security and privacy of communicated messages. Suppose a Hospital A (HA) laboratory needs to perform a certain set of computations over a patient's DNA on a Quantum Server (QS). The communication channel and messages need to be secured against eavesdroppers as the DNA holds sensitive information and data about patients. To securely transform the messages, HA and QS deploy the rectilinear basis:(4)

With  corresponds to the horizontal polarization state and  corresponds to the vertical polarization state. And a diagonal basis such as:(5)
 
 

The states  and  symbolize the binary value of 0, while  and  represent the binary value of 1. The rectilinear and diagonal basis is the primary measurement basis used in this proposal.

To create a Q-OTP, we have to follow two steps:

•
Sending phase: QS prepares and sends a single photon batch, where each photon is polarized based on one of the four primary states notably , , , and . HC receives the batch and randomly selects a set of photons to measure them. Based on the error-rate concept, QS can determine whether there is an eavesdropper or not (comparing the measurement of HC by its previous knowledge). If the error rate is low, the channel is considered secure, and the communication can be held. Otherwise, the transmission will be dropped. This method utilizes four states notably , , , and , and a random set of batches, which make it more secure under opaque attacks compared with other works. The sending phase can be summarized in Algorithm 3.

Algorithm 3: Single photon batch
1: Input: Polarized photons.
2: Output: Error rate.
3: Process:
4: QS.prepare (photon_batch)
5: QS.polarize (< , , ) >, photon_batch)
6: QS.send (<photon_batch>, HC)
7: HC.receive (photon_batch)
8: HC.Calculate (<photon_batch >, Error_rate)
9: HC.Compare (<Error_rate >, QS)
10: if Error_rate >  Error_rate then//  Error_rate is the acceptable
error rate in the system.
11: Eavesdrop.detected
12: Communication_channel. Dropped
13: else
14: Communication_channel.Open
15: end if
16: end
•
Message coding and returning: After checking the security of the communication channel, HC have to encode the messages and send them to QS. To do so, HC utilizes one of two unitary operations, notably I and U operations, as depicted in Algorithm 4. The operator U is utilized in both measuring basis to flip the respective state as follows:

(6)(7)(8)(9)
Algorithm 4: Encoding-based unitary operation
1: Input: Message to encode in Qubits.
2: Output: Secure encoded message.
3: Process:
4: if MessageToEncode = = 0 then
5: I = |0> <0| +|1> <1|
6: else
7: if MessageToEncode = = 1 then
8: 
9: end if
 HC.return (<photon_batch >, QS)
 QS.measure (photon_batch)
10: end
HC returns the encoded batch and message to QS. Since QS has previous knowledge of the measuring basis, it can read the secret message securely. Thus, at this phase, even if an eavesdropper manages to interrupt the communication, it cannot read the message, thus achieving the perfect secrecy of communication.

4.3. Delegated Quantum Computing
Delegated Quantum Computing (DQC) allows us to fully benefit from the Quantum Computation power while protecting the information and computation security. The computation operation in DQC is a set of measurement angles on an entangled state (Kashefi and Pappa, 2017). To compose the Quantum circuit, we can use the following sequence of gates: {X, Z, H, P, CNOT, and R} Fig. 5, Fig. 6, Fig. 7, Fig. 8, Fig. 9, Fig. 10, all with an auxiliary Qubit preparation and single Qubits computational basis measurements. The Quantum server at the cloud layer has access only to the inputs sent by the QMT in its encrypted form. We have to mention here that the QMT encrypts the delegated computation requests sent by the classical client using the Quantum One-Time pads method. The classical client can choose the nonce used in the encryption phase. Thus, it can decrypt the output when received; the server and the QMT do not learn anything about the input. For a recall of the Quantum information notations as mentioned in (Deng and Long, 1103), we note that:(10)
 

Fig. 5

Fig. 5. Protocol of X gates.

Fig. 6

Fig. 6. Protocol of Z gates.

2.
Based on the principle that state: XZ = ZH, we can express H-gate protocol as follow:

Fig. 7

Fig. 7. Protocol of H gates.

3.
Based on the fact that PZ = ZP and PX = -i ZXP, the P-gate protocol can be given as follow:

Fig. 8

Fig. 8. Protocol of P gates.

4.
Similarly, the CNOT-gate protocol can be described as following where  is a 2-qubit system.

Fig. 9

Fig. 9. Protocol of CNOT gate.

Fig. 10


Fig. 10. Protocol of R gate.

The Pauli gate X and Z noted Pauli-X respectively, and Pauli-Y are the Pauli matrices  and  such as:(11) 
 (12)

And,(13) 
 (14)

The Hadamard gate that maps the state  to 
 
 and  to 
 
 based on the following Hadamard matrix:(15)
 
 (16)
 

The phase gate can be represented as follows:(17)

And finally, the two-Qubits gate CNOT that can be represented as follows:(18)

Based on this knowledge, we can build the representative gates to perform a blind Quantum computation on the received encrypted data for healthcare clients. Although previously, we have checked whether the communication channel is saved to use or not, three more steps need to be executed to reach blind or delegated Quantum computation, notably:

•
The client encrypts her register with the one-time quantum pad and sends the encrypted register to the server.

•
The client and server perform series of communication according to the circuit that is to be executed, with the client re-adjusting the encryption keys on each relevant quantum wire after each communication.

•
The server returns the output register to the client, who decrypts it according to the key that she has computed.

The second step is denoted as Clifford group gates, where series of well-known relationships between the Pauli matrices and Clifford group operations is the basis for the following protocols:

1.
Implementation of X and Z gates protocol:

The only remaining gate required to implement universal quantum computation is a non-Clifford group gate (see Fig. 9). We choose to implement R gate for this phase, as depicted in Fig. 10.

This method will allow us to execute complete blind Quantum computation for healthcare clients such as DNA computation while securing the input, output, and computation. First, the QMT generates a Qubit sequence that includes the original message Qubits and an additional auxiliary Qubit to confuse the server. The generated sequence of Qubits will be divided equally and based on order between the gates {X, Z, H, P, CNOT, and R}, where one of the gates is randomly selected to hold the delegated message without the auxiliary Qubits, while the remaining gates contain the remaining Qubits. Next, the sequence of Qubits is encrypted based on Q-OTP and forwarded to the QS, where all sorts of needed functions and operations will be executed on all the Qubits sequences. Finally, the output is returned to QMT to extract the message Qubits based on the original selection, decrypted, and then forward to the client. The steps mentioned above can be summarized in Algorithm 5 and visualized in Fig. 12.

Algorithm 5: Delegated quantum computation
1: Input: Message to compute.
2: Output: Computed results
3: Process:
4: S = auxiliary Qubits + Message Qubits
5: QMT.Generate (S)
6: QMT.divid (S, {)
7: QMT.encrypt (S , )
8: QMT.send (<S , >, QS)
9: QS.compute (S )
10: QS.return (<results>, QMT)
11: QMT.extract (message)
12: QMT.decrypt (S 
)
13: QMT.send (<results>, HC)
14: end
Fig. 12


Fig. 12. Methodological flow of the secure communication between QTM and QS.

5. Evaluation and security analysis
To evaluate the first step (Blockchain-based Cluster Selection), we used Network Simulator-3 (ns-3), which relies on C++ to implement the smart city network models and Python for network topology. GO-Ethereum was deployed to implement the Blockchain. The simulation was performed on an intel core-i7 computer with 16 GB of RAM running under Ubuntu Linux. We put in use IBM Quantum Experience for the research's environment for the second and third steps. IBM Quantum Composer and IBM Quantum Lab platforms allow researchers to have access to a 5-Qubit Quantum server.

5.1. Performance evaluation
All of the algorithms and results were performed using the IBM access tool based on Qiskit, an open-source SDK for working with quantum computers at pulses, circuits, and application modules.

In order to prove the effectiveness of our proposed architecture based on Blockchain, we take into consideration three main network performance metrics; Latency of fault peers, general latency of execution over the network, and network throughput using PBFT compared with the classical algorithm. The proposed Blockchain algorithm shows better results than the classical PBFT algorithm in terms of execution, as depicted in Fig. 15, we run the simulation on NS-3 with GO-Ethereum under the case scenario of four fault peers, in order to create a secure and private cluster for communication data. Fig. 16 shows the general latency of implementing the PBFT over the network in comparison with the classical algorithm, as depicted in the figure, the proposed PBFT recorded a low latency at 2 s with the higher delay was recorder at 13 s, however, the classical algorithms recorded a short delay of 12 s and can go up to 48 s. It is clear that the proposed algorithm significantly reduces the latency, which improves the QoS and QoE.

Fig. 15


Fig. 15. Proposed Blockchain simulation result.

Fig. 16


Fig. 16. General execution latency of PBFT and classical algorithm.

The throughput simulation and results can be shown in Fig. 17. As it is depicted, the proposed PBFT managed to maintain a high and stable throughput over the simulation, on the other hand, the classical algorithm recorded a decline of throughput with the increasement of peer nodes in the network.

Fig. 17


Fig. 17. Throughput performance of the proposed PBFT algorithm.

The obtained results prove the feasibility of this architecture using Blockchain technology. The proposed solution records a low latency and high throughput compared with the classical BFT algorithm, which makes it perfect for implementation in real-tome scenarios to compliment and secure the Quantum-based cloud environment.

Thile Table 2 presents the latency, budget needed to perform the Quantum delegated computation and other operations on healthcare data, such as the Grover searching algorithm.


Table 2. Latency budget.

Task	Time
Compilation	180 ms
Single-Qubit gates	70 ns
Two-Qubits gates	350 ns
Readout and capture	2 us
Probability of finding the right element	87%
5.2. Security analysis
Giving a Quantum state , a message , and a key  the encryption of  is based on the bit flip operation  such as if  the state  be flipped, and nothing happens if . The following example, towing equation, describes the encryption of a message (19)

In this equation,  takes  to  such as:(20)

The decryption can be performed as follows:(21)

The encryption phase can be described as:(22)

In this case, if an Eavesdropper interferes with the communication, what eaves can see is either one of the two cases where the key is 1 or 0:

If , Eaves will see the matrix , and if , Eave will see. 

If we average these two cases, we got the following density matrix:(23)
 
 
 
 
 

With  is the state that Eaves can see, 
 
  is the identity matrix, and 
 
 is the maximally mixed state. We notice here that we got the maximally diverse state utterly independent of the message, and Eave cannot retrieve any information. The  operation is indeed capable of encrypting standard basis states; however, in case of Hadamard basis, we need to use  operator such as:(24)

For Q-OTP, we need to use both  and  operations simultaneously,  is suitable for standard basis encryption, while  is used for Hadamard basis encryption. And both of them are used to encrypt an arbitrary Qubit. However, to apply two operators, we will need to deploy two bits of classical keys for every Qubit of the message. Thus, for the message  we have the encryption equation as follows:(25)

While the decryption can be described as:(26)

A healthcare application urges high security and privacy measures as it holds sensitive information about the patient, such as his medical history and diseases accompanied by his identification, name, age, and so on. Or regarding laboratory data such as the drugs industry. Moreover, the heavy computation required by healthcare services such as DNA computation demands extensive computation power provided by a Quantum computer on the server layer. Multiple researches have studied the Quantum server performance on data computations, yet, to the best of our knowledge, very few of them addressed the security issues related to this type of delegation. The Quantum server itself is secure against multiple cyber-attacks. However, the communication between the client and server is not secure. An eavesdropper can interrupt the communication and get to know the messages sent from the client to the server. As a solution for this problem, in this proposal, we deployed Q-OTP that encodes the secret messages and verifies the communication channel's security before starting the communication with the server. This is proven to reach perfect secrecy as the message cannot be leaked even if an eavesdropper manages to interrupt the communication as the measuring basis is randomly selected.

The proposed architecture deployed Quantum-based cloud delegated computation for smart healthcare systems. As depicted in the above, the implemented PBFT recorded low latency and high throughput which makes is feasible and scalable, thus cheaper to execute. Moreover, the Quantum computation power used in the cloud service can deploy existing Quantum cloud services such as D-Wave, IonQ, and Rigetti. These services cost $0.3 per-task execution price, and less than $0.01 per-shot price, which is relatively cheap and feasible to execute. The delegated Quantum algorithm can be implemented directly into one of these Quantum cloud services, and each service provider can equip the edge with small 1 Qubit Quantum machine image to play the role of intermediate between the client and the Quantum cloud. The 1 Qubit Quantum machine is comparatively not expensive to implement, which makes our proposed architecture feasible, secure, scalable, and cost effective.

6. Conclusion
Quantum Computation in the cloud can surely provide the smart healthcare environment's desirable computation power and security. Our proposed Architecture deployed two leading technologies to create a better Quality of Service and assure better safety for smart healthcare. Blockchain will reduce the need of having a Quantum machine on the client-side, and it will provide secure access to honest devices and clients to the Quantum Cloud. Quantum Terminal (Quantum Image) at the edge layer will compile classical bits to Qubits and vis-versa. Using fully blind computation, Quantum Cloud is capable of computing complex healthcare clients' requests while preserving the information and computation security. For example, we computed the Grover searching algorithm over the fully encrypted data on Quantum Cloud to measure the safety of the proposed architecture. The performed analysis proves the unconditional security of the Q-OTP, and the simulation results show the implementation feasibility of a Blockchain-based delegated Quantum cloud architecture for medical big data security. As for our future work, we plan to implement this architecture and perform a variation of computation on real medical data for better measurement of Quantum error rates.

