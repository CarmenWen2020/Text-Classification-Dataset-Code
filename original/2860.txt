In this article, we have delved into detecting dense regions of weighted sparse networks through identification of cliques and communities. A novel clique finding method is introduced to generate all maximum cliques of a sparse network, with focus on analysis of real-life networks and a community detection algorithm is devised on maximal cliques to determine possible overlapping communities of the weighted sparse network. A good number of methods of clique detection already exist, some of which are truly efficient, but many of them lack direct applicability to real-life network analysis, as they deal with simple networks, hide intermediary details and allow cliques to be formed without information on strength of interactions in group behavior. The proposed method attaches a clique-intensity value with every clique and using two thresholds on intensity of interactions, at the individual level and group level, provides handle to filter stray or insignificant interactions at various stages of clique formation. Using differently sized weighted maximal cliques as building blocks, a new overlapping community detection method is proposed using a new measure, a weighted version of Jaccard index, called weighted Jaccard index. Experiments are done on real-life networks; the maximum clique structures reveal sensitivity to threshold values, while the resulting community structures demonstrate efficacy of the community detection method.

Access provided by University of Auckland Library

Introduction
Interaction networks arise from a wide variety of fields of research in which the underlying research problem is analyzed using graphs. The concerned entities are represented as nodes and their interactions are drawn as edges of the graph. The number of edges incidents on a particular node is called its degree. Degree provides a measure of how connected the particular node is to the rest of the graph. A few examples of interaction networks used widely in network science experiments [40] are transportation networks, biological networks, economic networks, friendship networks, scientific collaboration networks [31] and so on. Most real-life interaction networks are (i) weighted, i.e., they take into account the strength or intensity of interactions among entities, and (ii) sparse, i.e., the number of connections among entities is linear in number of entities [30]. Sparse graphs are characterized by low edge-densities (ratio of actual edges to potential number of edges of the graph [14]). However, for a majority of real-life interaction networks, edge density is not spread uniformly over the network. Rather, the networks tend to display intermittent dense regions weakly connected among each other, a phenomenon characterized by high transitivity and a scale-free degree distribution (presence of a few high degree nodes along with a large number of small degree nodes in the network) [32, 47]. For network analysis, we are often mandated to find out the closely interacting entities or the dense regions of the networks, and hence are the importance of cliques and communities in analysis of networks. A set of mutually connected nodes is said to form a clique. Clearly, cliques are complete graphs and thereby represent the densest regions of a network. The cardinality of the node-set is the size of the clique, i.e., a k-clique is a set of k completely connected nodes. Cliques may overlap. The clique(s) with maximum cardinality in the network is called the maximum clique(s). A maximal clique, however, is a clique, which is not a proper subset of any other clique. A community within a network is also a dense region, but need not be completely connected. In absence of a firm definition of a community in the literature, we adopt the most commonly used notion, which is, a community is a collection of nodes such that the connections among nodes within that collection are frequent but between collections are less frequent. Discovery of such structures plays a very important role in understanding the group dynamics of entities involved in the network. In the present article, we delve into methods of uncovering cliques and communities within weighted, undirected, sparse networks. Throughout this article, we consider only edge-weighted networks as weighted networks.

In the literature, finding the maximum cardinality cliques in a graph is known as maximum clique problem (MCP); this is regarded as an NP-hard problem [1, 8]. A new method is proposed in this article to find an exact solution for this combinatorial optimization problem in weighted graphs and we call this as weighted maximum clique problem (WMCP). For a weighted graph, WMCP still results in finding the maximum cardinality clique(s), but in addition, it provides clique intensity (formally defined in Sect. 3.1), indicative of the average weight of a clique. An alternative way to define maximum weighted clique problem in weighted networks is to find the maximum weighted maximal clique of the graph, popularly known as maximum weighted clique problem (MWCP) in the literature [34, 37, 49]. The outputs of WMCP and MWCP may differ, i.e., the maximum clique of maximum weight may be different from the maximum weighted maximal clique in a network. In this article, our focus is going to be on WMCP.

A variety of solutions to MCP and weighted MCP problems have been into existence over a span across centuries; yet, both of these problems are living and fully relevant even today, primarily because of their huge application potential. Newer methods are being introduced, sometimes with the objective of increasing efficiency compared to the previous methods [7, 23, 43], and some other times to model problems arising in different scenarios as maximum clique problem and solve them [4, 18, 26]. More recent applications of MCP-based techniques, for example, are in devising efficient sparse graph compression techniques [41] and in dynamic graphs [13]. However, we have noted that a good majority of the available MCP solutions are designed from the standpoint of maximizing efficiency and accuracy, of a long-standing combinatorial optimization problem. As a result, most MCP methods ignore the weights of a weighted graph completely and are focused on a single objective. For example, a method designed to generate all k-cliques of a graph, given a specific k, satisfies only the said objective. Consequently, the network analyst is faced with the task of combining multiple methods of multiple origins to perform meaningful analysis of the network and that task is not always very straightforward. With the backdrop of such disadvantages of the prevalent MCP or WMCP methods from a network analysis viewpoint, we have introduced certain characteristics to the proposed method. (i) The method is simple. It is based on ordering the sequentially numbered nodes of the network. (ii) The method is comprehensive and flexible. While generating the maximum clique(s) of the network, it also generates the trail of cliques of increasing sizes leading to the maximum clique(s). Also, if there are multiple maximum cliques in a network, it lists all of them in order of their intensity values. (iii) As the method lists all cliques of all sizes of the network up to the maximum clique, it attaches the clique-intensity values to the cliques. With minor modifications, the method can be made applicable to unweighted networks, in which case it returns only the maximum cliques, and no intensity value. (iv) The method provides control over the data toward its optimum use for the problem in hand. It utilizes two thresholds on clique intensities at the individual level and at the group level, to control interactions, which are allowed to participate in the process. The group-level threshold can even be a dynamic one, in the sense that it filters cliques with below-average intensities at every stage of the process. This helps only higher intensity cliques to participate to form the next higher sized cliques. Such dynamic thresholding may be particularly meaningful for very large real-life networks. For an example, we may look at the result reported by Abello et al. [1] on a massive telephone call graph consisting of over 170 million phone calls recorded in a single day. The number of cliques of size 30 (where the estimated upper bound of the size of the maximum clique was 32) was found to be the tune of 700. If the practical problem demands to pinpoint a few of them, out of so many, such dynamic threshold-based detection may prove to be useful.

There are obvious disadvantages of such a threshold-based method, the primary one being that it leads to information loss. But real-life situations often warrant that the strength of the interactions among the participating entities be maintained at a certain level, so that the interactions can be regarded as valid or useful for the problem in hand. Moreover, both of these thresholds can be made non-functional by setting their values to a minimum so that their effects become inconsequential to the process. Further, empirical evidence based on our analysis of a number of real-life interaction networks suggests that the maximum clique structures are highly sensitive to the values of the thresholds. Thus, the thresholds may actually act as handles to calibrate the data sanctity and improve reliability of the networks.

As a natural consequence of relaxing the rigidity of cliques, discovering community structures becomes an important function for analyzing networks. We have presented an overlapping community detection algorithm for weighted networks. The essence of the method lies in coagulating maximal cliques iteratively, based on a certain criterion, as the iterations are done over clique sizes in a descending manner. To form the criterion for candidate community formation, a very popular similarity measure called Jaccard index [21] has been extended. The measure is called weighted Jaccard index (WJI), as it integrates the edge-weight information into the similarity measure. Notably, WJI is defined in such a way that it becomes a normalized measure. Similarly, another similarity measure overlap coefficient [45] is also extended for weighted networks and it has been used to compare results in our proposed method. Experiments are performed on a few real-life weighted networks to evaluate the proposed method and the results show that it performs competitively with other well-known benchmark methods.

It is not so much from an interest about the theoretical aspects of raising the efficiency bar of a very popular and long existing problem of MCP or WMCP that we propose a new method; but it is more of the practical considerations of clique-based analysis of networks that have been the main motivation behind producing this article. That is one of the reasons we have designed a method, which produces all weighted maximum cliques, maximal cliques and all cliques in one go, with all intermediary results available. We have not rejected thresholds straightaway, with the reasoning that they cause information loss; rather we have acknowledged the practical advantage that they may potentially introduce. We have experimented with dynamic thresholds, which allows the process to keep on selecting cliques (there can be potentially a very large number of them in large networks) of higher intensities all the time, throughout the process. Through the design of a new community detection method, the application of the WMCP method has been emphasized further. We have extended a commonly used similarity measure (known as Jaccard index) to utilize edge weights, such that the newly defined measure (called weighted Jaccard index) becomes useful for weighted networks. In addition, we have illustrated the sensitivity of the maximum clique structures of a network to the thresholds used in our method.

The rest of this paper is organized as follows. The related works have been summarized in Sect. 2. The weighted maximum clique detection method has been introduced and analyzed in Sect. 3 and experimental results are discussed in Sect. 4. The paper is concluded in Sect. 5 with a few directions of possible future extension of this work.

Related works
Maximum clique detection in network graphs fascinates present-day researchers, even after being into existence across centuries and having solutions from numerous perspectives. A large majority of these solutions, however, are pertaining to unweighted graphs and many of them are inapplicable or ineffective for complex networks, as weights are not considered at all, or, are not given due importance in such methods. It is true that a good number of algorithms exist in the literature for MCP and MWCP; MWCP solutions are more recent. The earlier algorithms concern mostly MCP (a detailed review of MCP algorithms can be found in [49]), primarily because MWCP is a more complex problem to solve. Nevertheless, MWCP methods are gaining focus lately, as researchers are facing the dire need of analyzing large real-life interaction networks arising from different fields. Such networks tend to be highly sparse [5, 16] and the edge weights carry significant information (e.g., interaction frequency, volume or even importance). At this point, it is important that we make the distinction in terms of formulating the MWCP problem. One class of algorithms aims to detect clique(s) with maximum total node-weights of a graph. Notable among this class is an exact algorithm WLMC proposed by Jiang et al. [22] based on the branch-and-bound (BnB) technique and a little older but considerably used exact algorithm Cliquer by Ostergard [34]. The other class of MWCP algorithms deals with edge weights, instead of node-weights (often referred to in the literature as maximum edge-weighted clique problem or MEWCP). Notable in this class is a stochastic local search algorithm ReConSLS proposed by Chu et al. [11]. Mathematical formulations and solution approaches for solving MEWCP are discussed at length by Hosseinian et al. [20].

Traditionally, MEWCP has been formulated as detecting a complete subgraph of a certain size of a complete graph to maximize the sum of edge weights in the subgraph [3, 37, 44]. These methods do not apply directly to any real-life network, as real-life networks are inherently sparse. But to circumvent the restriction, additional steps have been suggested in the literature. One such technique [29] is to attach sufficiently large negative weights to the dummy edges or nonexistent edges of the original graph and thereby fit the sparse graph to the complete graph model. Another significant limitation of the early exact algorithms is their inability to deal with large graphs; even the relatively recent algorithms [27, 39] are able to solve the problem with up to 150 nodes [49]. Heuristic-based algorithms, utilizing different search techniques (e.g., edge-weighting local search approach [9, 38], tabu search [17]), were able to achieve scale and faster results on benchmark graphs. A more recent algorithm [19] formulates the MEWCP on sparse graphs, with the observation that a clique is an intersection of star sub-graphs, and uses discretization of node variables [28] to achieve a more compact representation of the MEWCP problem.

The proposed weighted maximum clique method
In this section, we first introduce the formal model, followed by detailed description of the method, the algorithm and its analysis.

Formal model
We consider an undirected weighted network graph G=(V,E,W), representing the interactions among a community of n individuals, i.e., the graph has n nodes with |V|=n; n>3. The edges of the graph represent the interactions among the n members of this community, with the set of edges denoted as E, and the intensity of the interactions represented by the weight matrix W (note: W=((wij))n×n). Here, the word community is simply used to denote the collection of individuals who are surveyed to produce the graph dataset. Without any loss of generality, let the nodes of the graph be numbered sequentially from 1 to n, whatever is the erstwhile naming scheme of the nodes of the network. Every edge weight wij indicates the frequency of interactions taken place between individuals i and j, for i, j=1,2,…,n and i≠j and can be denoted as wij=weight(i,j):E→N. The weights have been chosen as natural numbers, without any loss of generality. One of the ways of representing such a network graph G is by listing its edges, along with the edge weights. Let us denote the graph data file by D, which contains the weighted edge list. Let D be of the form D={(i,j,wij):i,j∈V,(i,j)∈E}.

We are interested to consider individuals who interact meaningfully among themselves, or, in other words whose interaction levels exceed a certain threshold ∂1>0, i.e., to find all individuals i and j such that wij≥∂1,i,j=1,2,…n,i≠j. Now, the number of interactions made by the i-th member of the community, i=1,2,…,n, is given by wi=∑nj=1wij, which is also the degree of the i-th node. Let the weighted adjacency matrix be given by A=((wij))n×n. We recognize that the graph G becomes unweighted graph, if A′=((w′ij))n×n is used as the adjacency matrix, where w′ij={1,0,ifwij>0ifwij=0. The unweighted graph captures the interaction pattern among these n individuals, while ignoring the strength of interactions. Instead of considering pair-wise interaction patterns, if we consider interactions made by 3-member tuples, we may define the weight value as in Eq. (1):

wijk={0,wij+wjk+wik,ifmax(wij,wjk,wik)<∂1otherwise
(1)
More generally, to produce a grouping of k individuals with k>2, we define wi1i2…ik as

wi1i2…ik=⎧⎩⎨⎪⎪0,∑1≤j1<j2≤kwij1ij2,ifmax1≤j1<j2≤kwij1ij2<∂1otherwise
(2)
The above grouping of k individuals produce a k-clique in the network, if the combined intensity of interactions exceeds a certain threshold, say ∂2>0, such that the inequality wi1i2…ik(k2)≥∂2 holds. The objective is to find the largest k to satisfy the relationship (3)

wi1i2…ik(k2)≥∂2
(3)
The average intensity of interactions among the group of k individuals participating to form the clique is defined as the intensity value of the k-clique, and is expressed by the quantity wi1i2…ik(k2).

Description of the proposed method
To start with, let us recall some of the fundamental properties of cliques which play a role, in some way, in devising the proposed algorithm. Firstly, cliques follow a nested structure, in the sense that a clique of size k contains a clique of size k−1. Secondly, cliques are closed under exclusion, i.e., if a node is removed from a clique, it is still a clique. In fact, every induced subgraph of a clique is a clique itself. Keeping these two properties in the background, a bottom-up approach of building cliques is adopted, such that cliques of increasing sizes are detected in the graph until the maximum clique is found. Therefore, to generate k-cliques, it is enough to look at the list of (k−1)-cliques and their possible combinations as we are going to describe shortly.

According to our model, we take weighted edge-list representation of the input network, in which the nodes have been numbered sequentially, to act as identity of the nodes (say, node ids). Each row in the edge list has three columns: the first node id, the second node id and the associated edge weight. At the heart of the method lies a simple ordering scheme, which is applied at every iteration (corresponding to clique-size) of the process.

Ordering scheme
The edge list is sorted row wise first and then column wise, in ascending order, such that (i) for each edge the smaller node id appears first, and (ii) edges with smaller first node ids appear earlier in the list. The graph being undirected, such sorting operations do not alter the actual graph. Figure 1 can be referred to for an illustration of the organization of the input graph data.

Fig. 1
figure 1
An illustration of the WeightedMaxClique algorithm by using an example graph. The algorithm stops after generating the 4-clique, which is the maximum clique for the graph

Full size image
In the first iteration of the algorithm, all valid three-cliques are produced from the list of edges of the network, for which the threshold on edge weights is met. In subsequent iterations, the algorithm scans a list of k-cliques in which the list is sorted on the first, second, up to the (k−1)-th columns, and generates (k+1)-cliques satisfying the threshold criteria on clique intensity. Note that in the list of k-cliques, every row represents a clique with k node ids along with its clique-intensity value. In the list of k-cliques, for every pair of rows for which the first (k−1) columns match, the pair of k-th columns are checked for a matching edge in the edge list. If found, a (k+1)-clique is formed with the common (k−1) columns and the two k-th columns of the row pair. The idea is that the first (k−1) columns common to the row pair already constitute a clique; the only edge that remains to be tested to form a higher-order clique is the edge between the two k-th columns. As we compare each pair of matching (k−1)-cliques in the list of k-cliques, there is a possibility to have a larger number of (k+1)-cliques than there are k-cliques in the network. As soon as the list of (k+1) cliques is formed, it is sorted row wise and column wise according to our ordering scheme. If no such (k+1)-clique is formed, the algorithm stops.

For dynamic threshold, we use median intensity of the cliques, corresponding to that particular iteration of the process; the threshold value changes at every iteration, and hence, it is called dynamic threshold. Usage of dynamic threshold is conveyed to the process by taking the clique-level threshold to be zero and cliques with intensity values less than the median are purged from the list of cliques to participate in the next iteration.

It may be noted that the k-cliques for which there is no matching combination of initial (k−1) columns, can be regarded as maximal cliques of size k. This information is used while computing the maximum weighted maximal clique of the graph.

It is clear from this discussion that the chosen ordering of the rows and columns of the input file plays a crucial role in minimizing the number of execution steps required to generate the next higher sized cliques, and also, to identify the maximal cliques. Precisely, this simple ordering scheme of the nodes of the network is fundamental to this process and has been addressed further in Sect. 3.3 while doing an analysis of the algorithm.

Pre-processing
To make the input graph data file D conform to the format as required by the proposed algorithm, a pre-processing stage may be necessary. We address this aspect, before discussing the details of the proposed WeightedMaxClique algorithm.

For the proposed method, the goal of the pre-processing is to ensure: (i) no self-loop (ii) no duplicate rows (iii) no outside-community interaction and (iv) an ordering of the rows and columns of the input graph data file D in accordance with the ordering scheme described earlier in this section. Further, all entries of the form {j,i} in D must be merged with entries of the form {i,j}, i,j=1,2,…,n with n>3. By merge we mean that the weight of {j,i} is added to the weight of {i,j} and the row {j,i} is deleted from D. Interactions made to the outside-community entities are excluded (for mobile networks, this may be equivalent of discarding calls made to toll-free numbers, business or corporate numbers, etc.). Further, all isolated edges, i.e., nodes of degree one, are eliminated from the list D. By doing this, (i) the size of D is potentially reduced and (ii) we are discarding cliques of sizes at most two, which is trivial (there is a minor probability that a maximal 2-clique of maximum weight gets deleted, but we are ignoring such a possibility in a real-life interaction network).

Before formally presenting the algorithm, it is explained with the help of a small example graph as in Fig. 1.

The weighted maximum clique detection process starts with the edge-list order according to our scheme, as indicated in Fig. 1. In the edge list, row numbers 2, 3 and 4 have the same first columns as in row 1. Hence, it is checked if the node ids in the second columns of these rows form valid edges with each other, as indicated in Fig. 1. Let the two thresholds for this example graph be taken as ∂1=2 and ∂2=10 (a fixed threshold is assumed; threshold values are selected experimentally). The edge (2, 3) of the example graph does not exist; therefore, the triplet (1, 2, 3) cannot form a clique. But, the edge (3, 5) exists and its weight is more than the threshold ∂1. Therefore, (1, 3, 5) forms a potentially valid clique. The clique intensity is computed on the basis of relationship (3) (rounded off to the nearest integer, 16) and is higher than ∂2. Therefore, the row (1, 3, 5, 16) qualifies to move forward in the process. But we note that the triplet (3, 4, 5), though pair-wise connected, the edge weight of (4, 5) falls short of ∂1; the overall clique intensity is also below the second threshold. Therefore, (3, 4, 5, 9) should be restricted from moving forward to form higher-order cliques.

While processing the 3-cliques to generate 4-cliques, the process checks for every row, if the combination of columns 1 and 2 match with the same combination of the previous row. If not, then it just moves to the next row. If yes, only then it checks whether the column 3 node ids form valid edges, with weights higher than ∂1. In the example graph, the process checks for existence of only (5, 6) along with its weight, as the first two columns match for only row numbers 1 and 2. Finally, the process arrives at the only 4-clique in the graph with intensity value as 16, obtained as described in Sect. 3.1.

The WeightedMaxClique algorithm
It may be noted that the main iteration of the algorithm is performed on size of the cliques. Let K denote the number of iterations of the main process of the algorithm, to generate the maximum clique of size (K+2). Note that at the first iteration, cliques of size three are generated from the edge list (or two cliques), and hence, the k-th iteration works on (k+1)-cliques and generates (k+2)-cliques. K should ideally be set to a value larger than the size of the maximum clique of the network; however, in practice, it is an arbitrary number, chosen on the basis of our first assumption on the size of the maximum clique. We have discussed more about the choice of K in a remark after formally stating the algorithm. If the maximum clique is generated before K executions, the process stops at that point.

As to the output of the algorithm, cliques of various sizes, starting from 3 to (K+2), are written in separate datastores, generating a series of output datastores 3-clique, 4-clique and so on up to (K+2)-clique. Each such k-clique output datastore contains a list of rows with k number of node ids (the participating nodes of the k-cliques) and the corresponding clique intensities. The number of rows denotes the number of k-cliques of the graph.

figure c
Remarks
1.
The values of the two input thresholds are driven by the domain from which the network arises and the context of the problem for analysis. For example, while analyzing a call network, we may want to disregard connections which are established only by chance and hence decide to ignore relationships for which the frequency of interactions is less than 2. For collaboration network, every single interaction counts, and the threshold may be set accordingly to minimize impact. Similarly, at the group level, we may consider a tightly knit community only if its members interact beyond a certain minimum frequency. We may even want to consider only those groups for which the average frequency exceeds the median (or, any other function definable over the range of weight values under consideration). In experimental results, it has been shown how the choice of the two thresholds influences the number and size of the maximum cliques of a network.

2.
To start with, one may not have any knowledge about the size of the maximum clique. In fact, determination of whether a graph has a clique of size k is itself an NP-hard problem. In case K is set to a value lower than the size of the actual maximum clique, the program generates a suitable message. Setting a large enough value of K is recommended; the program anyway ends if maximum clique is reached before executing K iterations.

Analysis of the method
In this section, the algorithm is analyzed to show that it generates a) all maximum cliques along with the clique intensities of the graph, and b) all maximal weighted cliques.

(a)
Maximum Clique(s)

In order to ensure that the results produced by the algorithm are the intended ones, we do some theoretical analysis of the algorithm and show that the method generates all possible (k+1)-cliques from an input list of k-cliques, k=2,3,…,K(size of maximum clique), and generates them with no repetition (i.e., the same clique does not appear twice in the output).

Case I k = 2.

The input to the process to generate (k+1)-cliques from k-cliques is the edge list; let it be denoted by (v1i,v2i),i=1,2,…,|E|, where v1i are the first nodes and v2i are the second nodes forming the edges of the network. Let the edge list be sorted according to our ordering scheme as stated in Sect. 3.2.2. The method traverses this edge list sequentially from top to bottom to check the possibility of forming 3-cliques. At any point in this traversal, let us consider two cases: a) v1j1=v1j2=…=v1jd;1<d<|E| and b) v1j1≠v1j2.

For case a), it implies that the same first node repeats itself for d consecutive rows (edges), which is its degree. If, for any l,m=1,2,…,d;l<m, (v2jl,v2jm) is a valid edge according to the adjacency matrix with acceptable weight, then (v1j1,v2jl,v2jm) forms a valid 3-clique. There is possibility of forming (d2) cliques of the form (v1j1,v2jl,v2jm);l,m=1,2,…,d;l<m and the method checks for all of them as it compares the (d2) second nodes. When it is at v1j2, it checks for the validity of (v2j1,v2j2); at v1j3, it checks for the validity of (v2j2,v2j3) and (v2j1,v2j3) and so on. Thus, every possibility of forming a 3-clique is explored. The order of appearance of v1i’s ensures that each of the nodes v1j1,v1j2,…,v1jd appears once and exactly once in the list and they appear consecutively. Therefore, other than this periphery of length d, they cannot receive consideration for higher-order clique formation and hence do not repeat.

For case b), the first nodes in two consecutive rows of the edge list are not same. Such rows are skipped as there is no possibility of higher sized clique formation.

The process continues until (i) it is not possible to produce the next higher-order clique(s), or, (ii) there is just a single clique at the present instance. Condition (i) arises when none of the combinations of the second nodes at the present instance can produce a valid edge. The set of cliques thus achieved are of maximum cardinality in the graph.

Case II k>2.

The input to the process of forming (k+1)-cliques from k-cliques is the list of k-cliques, sorted according to our scheme, in which every row has k node ids, apart from its clique intensity. Let the input k-cliques be denoted by (v1i,v2i,…,vki),i=1,2,…,mk where mk is the number of input k-cliques. Instead of considering the first nodes for equality in consecutive rows of the input data, as in the earlier case, here we consider the sequence of first (k−1) node ids in every row of this list. As if, we look for the degree of this node sequence, rather than the degree of a single node as in the earlier case. As the list is traversed sequentially from top to bottom, there arise two cases:

(a) the sequence {v1j1,v2j1,…,vk−1j1} = {v1j2,v2j2,…,vk−1j2}=…={v1jd,v2jd,…,vk−1jd};1<d<mk and (b) {v1j1,v2j1,…,vk−1j1}≠{v1j2,v2j2,…,vk−1j2}.

For case a), each of the (d2) pairs of the k-th node ids of these d rows, i.e., (vkjl,vkjm);l,m=1,2,…,d;l<m, is checked against the adjacency matrix for existence of valid edge with acceptable weight. If found, then a (k+1)-clique is formed, let us say, (v1jl,v2jl,…,vk−1jl,vkjl,vkjm) for some l and m; l,m=1,2,…,d;l<m. Thus, all possible (d2) many (k+1)-cliques are explored from these d many k-cliques. The ordering scheme ensures that the sequences {v1j1,v2j1,…,vk−1j1}, {v1j2,v2j2,…,vk−1j2},…,{v1jd,v2jd,…,vk−1jd} appear consecutively in the list of k-cliques, and each of them appears exactly once anyway. Hence, there is no possibility of the same (k+1)-cliques being formed twice.

For case (b), the sequence of the first (k−1) nodes in two consecutive rows of the list of k-cliques are not the same. Such rows are skipped as there is no possibility of higher sized clique formation.

The same arguments hold as in Case I to show that the process terminates only after generating cliques of maximum cardinality in the graph and no higher-order clique can exist.

(b)
Maximal weighted clique

A maximal clique is that clique which is not a subset of any higher sized clique. A maximal weighted clique is the one, which is maximal and has the maximum weight over all maximal cliques of the graph. From this definition, it follows that a maximal clique of a certain size does not take part in forming higher sized cliques according to our method (for, in that case, it becomes a subset of that higher sized clique). It may be noticed that case (b) of both the cases I and II as in Section (a) represents such a case. In case (b), the node ids (or the combinations of node ids) to be compared for two consecutive rows of the list of cliques differ. Consequently, such rows are skipped from the process of finding maximum cardinality cliques. But it can be recognized that they themselves are the maximal cliques of that particular size. Among these maximal cliques, the method identifies the one with the maximum weight. Finally, the maximal weighted clique of the graph is found by finding the maximum weighted maximal clique over all iterations of the method (i.e., over all clique sizes). Clearly, this may or may not match with the maximum cardinality clique of the graph.

We conclude the analysis of the algorithm by looking at it from the complexity point of view. It must be noted that the proposed method is an exact method and only sparse networks having more than 3 nodes have been considered. As a rule of thumb, a graph is considered sparse if the number of edges in it is linear in the number of nodes [30]. As the input to the process is the edge list, adding a group of isolated nodes to increase the sparsity of an otherwise dense graph is inconsequential. In fact, for the analysis of real-life large networks, often it is the largest connected component that is considered for the analysis. From the description of the algorithm and from Fig. 1, it can be seen that, to generate the list of 3-cliques from the edge list, the number of operations required is at most ∑ni=1∑di−1j=1j, where di,i=1,2,…,n, is the degree of the i-th node of the network. Also, the sum of degrees of all nodes of the network is ∑ni=1di=2|E|.

∑i=1n∑j=1di−1j=∑i=1ndi(di−1)2≈∑i=1nO(d2i)=O(∑i=1nd2i)≤O(∑i=1ndi)2=O(|E|)2=O(n2)
(4)
The last equality in the expression (4) holds, as the graph is sparse. Therefore, the first iteration of the method accomplishes with complexity quadratic in number of nodes of the network.

For subsequent iterations, we note that the algorithm gives us 4-cliques from 3 cliques, (k+1)-cliques from k-cliques and so on, and in the worst case, n-clique from (n−1)-clique. To generate (k+1)-cliques from k-cliques, let Sk be the set of k-tuples of nodes, each representing a k-clique. Let |Sk|=Ck be the number of cliques of size k. Further, all the k-tuples in Sk are arranged according to the ordering scheme of the algorithm. For every i-th tuple, the algorithm searches whether the j-th tuple may form a (k+1)-clique, or not. Let the i-th tuple be denoted as (v1i,v2i,…,vk−1i,vki) and the j-th tuple as (v1j,v2j,…,vk−1j,vkj). Then, we check if vxi=vxj∀x=1,2,…,(k−1). If all vxi=vxj,x=1,2,…,(k−1) and (vki,vkj) belongs to the adjacency matrix as a valid edge, then a clique of size (k+1) is obtained and is considered as a (k+1)-tuple; this takes O(k) time, in the worst case. This checking is done for all i=1,2,…,Ck and for all j=i+1,i+2,…,Ck. Therefore, to find all (k+1)-cliques from k-cliques the time required is O(k)O(C2k). The same process is repeated for k=2,3,…,(n−1) and in the worst case we get a clique of size n.

So,theworst - casetimecomplexityofthealgorithmis:∑k=2n−1O(k)O(C2k)
(5)
In general, the size of the maximum clique K is much smaller compared to the number of nodes of a large real-life graph, i.e., K≪n. In fact, such sparse graphs are often characterized by their low k-core numbers (another definition of sparsity of a graph hinges on its degeneracy, which is the largest k for which the graph has a non-empty k-core). If the graph is L-degenerate then L+1 is an upper bound on the size of the maximum clique K [14]. An example can be cited here from the works of Abello and Pardalos [1]. A real-life Call graph used by them to apply their heuristics-based approximation algorithm to find cliques in large multi-digraph, involved 53 million nodes and 170 million edges and the size of the maximum clique was upper bounded by only 32. If K happens to be small, then the number of iterations of the main process of the algorithm is also small, thereby the number of operations involved is within a workable limit. So, if the size of the maximum clique K is taken as a constant, then from relationship (5) it follows that the time complexity of the algorithm is given by: ∑K−1k=2O(C2k), as all of O(2),…,O(K−1) can be regarded as constant.

We conclude the analysis of the algorithm after highlighting that the proposed method being an exact method, it carries the inherent limitations of an exact solution of an NP-hard problem. The effectiveness of the algorithm lies in its ability to produce multiple outputs (weighted maximum clique(s), maximal weighted clique, list of all cliques of all sizes leading up to the maximum clique) within a reasonable time and within a set of assumptions, which are easily satisfied by most real-life networks. Because of this, we envisage that the present method becomes useful for real-life network analysis. It is worth noting that most algorithms in the current body of knowledge take up just one of these problems, as listed as our outputs, for optimization.

Clique-based community detection
There are several methods of clique-based community detection in the literature, of which we would mention two well-known methods, which follow the same line of work as our proposed method. The first overlapping network community detection method was suggested by Palla et al. in 2005 [35, 36] and is famously known as k-clique percolation-based community detection method. A k-clique community is defined as the union of all k-cliques (k is an integer) that can be reached from each other through a series of adjacent k-cliques, where a pair of k-cliques is adjacent if they share k−1 nodes. This method starts with locating all cliques of the network and communities are formed by analyzing the clique overlap matrix. The method, however, is exponential and high computational complexity is perhaps its biggest drawback. Moreover, the performance and quality of the communities is heavily dependent on k. The other method is based on minimizing clique conductance and was suggested by Lu et al. [25]. The authors argue that given the increasing complexity and volume of real-life networks that computer scientists are to analyze today, it is important to extend the dyadic relationships that exist between nodes and edges of a network to polyadic relationships, as local substructures are linked in a network. This method is essentially a graph-partitioning method to identify clusters of cliques. It minimizes an objective function called clique conductance, a function of numbers and sizes of cliques and the number of edges in the cliques. Another recent method by Wen et al. [48] formulates the overlapping community detection problem as a multi-objective optimization problem and proposes an evolutionary algorithm with a maximal clique graph-based representation scheme.

Community detection methods are classified traditionally in many ways depending on the nature of the algorithms to generate the groupings, e.g., spectral methods, divisive methods, modularity-based methods and so on. Here, we are dealing with clique-based methods. The maximal clique-based overlapping community detection algorithm proposed in this paper uses maximal cliques as basic building blocks of community formation and employs a merging technique based on the newly proposed similarity measure called weighted Jaccard index (defined in Sect. 4.1). Community detection problems are essentially graph-partitioning problems; we define precisely what we mean by an overlapping community detection solution: Given a graph G=(V,E), a partition C=(C1,C2,…,Ck), consisting of k communities, is said to be an overlapping community detection solution, if.

(i)
All nodes together in the partition C cover the graph, i.e., ⋃kj=1Cj=V and

(ii)
Each Cj,j=1,2,…,k is a connected subgraph.

We may note that the set of maximal cliques (of all sizes) covers the graph. To generate a solution feasible in our context, for a graph G which is not connected, multiple connected components are to be dealt with separately.

In Sect. 4.1, we introduce weighted Jaccard index; in Sect. 4.2, a detailed sketch of the proposed algorithm is drawn.

Weighted Jaccard index
Jaccard index, originally proposed by Jaccard [21], is a measure to compute similarity between two data objects. It is defined as the proportion of size of the intersection to the union of two data objects. We have explored ways to make this well-known similarity measure applicable to weighted network graphs, which has resulted in the following formulation.

Let C1 and C2 be two k-cliques of an edge-weighted network, i.e., each of C1 and C2 is a fully connected set of k nodes. Let the (k2)-many edge weights be specified for each of the sets. The weighted Jaccard index (WJI) between C1 and C2 is defined as in Eq. (6).

WJI(C1,C2)=⎧⎩⎨0,(|C1∩C2||C1∪C2|)1/p,ifthereisnoedgeintheregionC1∩C2otherwise
(6)
The quantity p in Eq. (6) is given by the expression (7), where 0<p<1.

p=thesumofedge - weightsofedgescomprisedofnodesinC1∩C2meanoftotaledgeweightsofC1andC2=∑w((u,v)|u,v∈C1∩C2)∑w((u,v)|u,v∈C1)+∑w((u,v)|u,v∈C2)2
(7)
Clearly, the WJI expression as in (6) has got two main parts: the Jaccard index (JI) and the factor p in the exponent; both of the parts lie individually within the range 0 to 1. As the exponent is the inverse of p, the same range is true for the overall WJI index. It may be noted that WJI(C1,C2)=1 for C1=C2. The quantity p takes into account the contribution of edge weights to the relative size of overlap between the two cliques.

To illustrate the functioning of this index, let us consider two small example graphs with structures as in Fig. 2. The first graph (graph I) has 5 nodes and has got two 4-cliques which are the maximum cliques. The edge weights are marked on each edge of the graph. The two 4-cliques have 3 nodes (and thereby 3 edges) in common, i.e., the 3 edges occur at the intersection region of the two maximum cliques. The second graph (graph II) has 6 nodes and edge weights as marked on each edge of the graph. The two maximum 4-cliques have just one edge in common. Clearly, the intersecting region between the two maximum cliques is more in graph I than graph II, and hence, the Jaccard index of graph I (computed as 0.6) is higher than that of the graph II (computed as 0.33). If we compute the WJI between the two maximum 4-cliques for each of these graphs, we observe that the WJI for graph II (equal to 0.17 after rounding off) exceeds that of the graph I (equal to 0.13). Conceptually, the actual overlap (indicated by the JI) between the two cliques gets qualified by the relative contribution of edge weights in the intersecting region in WJI, and hence, if this contribution is sufficiently strong, it may influence the result in its favor. In Fig. 2, we have also shown the nature of this index as a function of either the JI (keeping the quantity p fixed) or the quantity p (with fixed JI value).

Fig. 2
figure 2
Illustration of the nature of weighted Jaccard index: I and II describes two graphs to point out that a higher Jaccard index between two maximum cliques does not necessarily mean that the WJI would be higher. The plot in III denotes the nature of the index as a mathematical function, when (1) the Jaccard index is kept fixed and the quantity pp in the exponent is allowed to vary and (2) the exponent is kept fixed while the Jaccard index varies

Full size image
Another similarity measure known as overlap coefficient [45] closely follows the definition of Jaccard index. We qualify this measure in the same way by edge weights and use it as an alternative measure while comparing results of our experiments in Sect. 5.2. The weighted overlap coefficient (WOC) can be defined in Eq. (8), with C1,C2 and p remaining the same as in Eqs. (6) and (7).

WOC(C1,C2)=⎧⎩⎨0,(|C1∩C2|min(|C1|,|C2|))1/p,ifthereisnoedgeintheregionC1∩C2otherwise
(8)
We envisage that the similarity measures qualified by the edge weights as suggested in this article can be investigated further and can be applied to a variety of complex networks problems. But, for the present context, we use them as criterion to make a decision whether to merge two cliques for candidate community formation by our proposed method.

The proposed method
A pictorial description of the proposed community detection method has been provided in Fig. 3. The method starts with all maximal cliques (MaxClique) of the network, of different sizes, say, k=2,3,…,K where k denotes the size of the maximal clique. The main iteration of the process is done over k, starting from K, with k decreasing. For a k-sized maximal clique set, WJI is computed for every pair. This results in a MaxClique-MaxClique WJI matrix of dimension of size of the maximal clique set. If any value of WJI in the matrix exceeds a certain threshold, the corresponding pair of maximal cliques is merged. Here, “merge” indicates the induced subgraph of the original graph formed after taking the union of the corresponding node-sets. The threshold, a fractional value between 0 and 1, truly represents the granularity of community formation. A higher threshold results in more granular communities, whereas a lower threshold tends to yield coarser communities. The resulting candidate communities of a particular iteration are fed to the next iteration along with MaxCliques of the next lower size. At any iteration, if it is found that the entire node-set of the network is covered by the union of nodes of all the communities generated so far then the process is stopped. Otherwise, the process is allowed to run till k=2. The candidate communities thus obtained go through a further scrutiny, which we call final tuning, to eliminate insignificant or redundant communities, etc. It may be noted that for any specific k, there may not be any maximal clique of size k in the network; the process takes into account this special case by not doing anything for that specific k.

Fig. 3
figure 3
A diagrammatic representation of the proposed maximal clique (abbreviated as “MaxClq” in the figure)-based community detection method

Full size image
The proposed method of community detection aims at discovering the inherent groupings in a network naturally, without being driven by a specific number or size of the groups. It starts with maximal cliques as building blocks, as it fuses them considering the amount of overlap shared by the building blocks qualified by the associated edge weights. It may be noted that the number of maximal cliques is significantly smaller compared to the number of cliques of a network; even though the proposed method builds communities in a hierarchical manner, the relatively small size of the input dataset helps to keep the performance within workable limit. The threshold that works at this point provides a handle to determine the amount of overlap that can be accepted by the system, beyond which components are to be merged. With this handle, the number and size of the communities can be altered, keeping the density of the communities at the desired level. After the main process, another process, which we call final tuning, is required to sieve through the list of candidate communities to eradicate proper subsets, redundant communities (in case the union of the rest of the communities, excluding the current one, is capable of covering the entire graph), communities of insignificant size and so on, to produce the final list of communities. A second threshold may optionally operate at this point, in case one wants to merge the communities further, to get closer to the desired number or size of the communities, which is not pre-determined, but contextual. Thus, the method naturally produces the groupings, but at the same time, provides handles to the users to experiment with the granularity of the communities, in case one wants to do so.

figure dfigure d
Experimental results
The present article is about detecting dense regions in weighted sparse networks, through identification of maximum cliques and communities. We present the results of maximum clique detection and community identification in two sections, Sects. 5.1 and 5.2, respectively. In keeping consistency with our stated objective of addressing the real-life network analysis aspect of the proposed methods, in Sect. 5.1 our emphasis is on applications of maximum clique detection method to uncover interaction patterns in real-life example networks. Secondly, the sensitivity of the maximum clique structures to the thresholds on edge weights and clique-weights has been highlighted using a few other interaction networks. The implication of such sensitivity toward real-life network analysis has been discussed. In Sect. 5.2, the results of applying the proposed community detection method to a few benchmark real-life interaction networks have been discussed.

Network analysis based on maximum cliques
We consider a Call network based on MIT Media Lab Friends and Family dataset [2]. The network data, collected over a period of one year, pertain to a young-family residential living community of a US university in which at least one member of each family is affiliated to the university. Apart from the communication log, it also contains self-reported personal and social information. We generate two networks, the Call Log network and the SMS Log network from the dataset for our purpose. The generated Call Log network is a connected graph containing 128 nodes and 391 edges, after excluding (i) calls that are made to outside-network entities (ii) self and missed calls (after pre-processing as in Sect. 3.2.1). Similarly, the largest component of the SMS Log network, generated after pre-processing the data, contains 40 nodes and 106 edges. The two network graphs are drawn as in Fig. 4. In the Call Log network, the maximum clique with maximum weight (there are 4 maximum cliques) and the maximal clique with maximum weight are colored differently. For the SMS Log network, the maximum clique and the maximal clique with maximum weight are the same and that is colored differently.

Fig. 4
figure 4
a Call Log network with maximum clique of maximum weight marked in green and maximal clique of maximum weight marked in yellow. The four maximum cliques of the same network have been amplified and shown at the bottom, revealing the high degree of overlap among themselves. The nodes colored in “cyan” are common to all four maximum cliques. b SMS Log network with maximum clique marked in green, this is also the maximal clique of maximum weight, c heat map of self-rated friendship intensities among the maximum clique members (all members participating to form the four maximum cliques) of the Call Log network; the numbers along the axes denote the node ids of the maximum clique participants

Full size image
The Call Log network has got four maximum cliques of size nine as the two thresholds are set to minimum values or unity (i.e., thresholds have no effect). A high degree of overlap is observed among the nodes of these four maximum cliques (Fig. 4 can be referred for an illustration), with the inter-maximum-clique Jaccard indices (defined as the size of the intersection over the size of the union of two sets) ranging between 0.29 and 0.8 (the weighted Jaccard indices, however, range between 0.004 and 0.772, although the weighted Jaccard indices are not particularly relevant for the present purpose). As we observe the four maximum cliques, it can be noted that a total of 14 members participate to form these 9-cliques. Out of these 14 members, 12 are married, and there are altogether 5 couples (survey data on couples is part of the Friends and Family dataset). Therefore, it can be said that married couples dominate to form maximum cliques in this particular call network. The intensity of relationships is further corroborated by the survey data on friendship in which subjects have rated their friends on a scale of 0–7 in terms of intimacy. The pattern of self-rated friendships among the maximum clique members has been portrayed in Fig. 4 c) as a heat map and we note that more than 90% weights are above 3. In contrast, it can be seen from the overall data on friendship strength that only 8% of the weight values are 3 and above. Therefore, there is a high concentration of fairly intimate friends among maximum clique members and the social data fully supports the particular graph theoretic result.

In the corresponding SMS network however, we get just one maximum clique of size 6, without imposing threshold. Out of these 6 nodes forming the maximum clique, 5 are common with one of the maximum cliques for Call network. The dominance of married women is observed in the maximum clique for SMS network also, as there are two couples and four women among these 6 members. The friendship pattern among these 6 members shows an even stronger bond from the self-rated friendship strength data. Therefore, the two results, SMS and Call log, are consistent and we can say that nearly the same set of people who are completely and intimately connected among themselves through phone calls are similarly connected through text messages also.

The effect of varying the thresholds on structure of the maximum cliques, as has been observed in different networks, is going to be presented. In the call network, if the threshold on edge weights, ∂1, is raised to 2, the number of maximum cliques reduces to 2, their sizes remaining the same. The degree of overlap between these two maximum cliques is remarkably high (Jaccard index 0.8) and a total of 10 nodes form two completely connected communities of size 9 within the network. If we consider these ten nodes as a community, they have 44 edges within the community (just one short of (102) edges), but 55 external edges (an edge is external when a member node of the community is connected with another node external to the community). From the community detection viewpoint, however, this candidate community of ten members may not qualify to be a “good” community, as, by definition, a “good” community requires to be internally dense but, also, externally sparse. The community detection aspect, however, has been discussed more in Sect. 5.2. For now, we examine the effect of varying the two thresholds, including the dynamic threshold scenario, on the structure of the maximum cliques of these two networks. In Fig. 5, we have summarized our observations.

Fig. 5
figure 5
Call Log and SMS Log networks: maximum clique structures (numbers and sizes) a with chosen thresholds, b with dynamic threshold

Full size image
We recollect that the dynamic threshold scenario replaces the threshold applicable at the clique level with a zero value. Instead of having a fixed threshold, median clique intensity is computed on the set of cliques of a particular iteration and that acts as a threshold. Only those cliques are allowed to move on to the next iteration of the process, whose intensity exceeds this median value. Therefore, the process consistently retains only the top half of the clique set of every size, in terms of clique intensity and thereby produces a different maximum clique structure. The effect of using the dynamic threshold on weighted maximum clique detection in networks is more pronounced in large networks. With almost half of the intermediary cliques being dropped at every iteration, the convergence to maximum cliques (dynamic scenario) is faster. In the case of Call network, the sole maximum clique produced in the dynamic scenario is of size 7. But, notably, this maximum clique is not a proper subset of any of the four maximum cliques of size 9 of the original network; nor is it any of the 7 maximal cliques of size 7 pertaining to the original network. However, all of its nodes belong to the combined node-set of all four maximum cliques of the network. This clique structure is interesting, as high volume of interactions in the particular network domain is built consistently into its very making.

The maximum clique structures of some more interaction graphs [40] have been analyzed and presented as in Fig. 6. Among them, the first two are biological networks, the third one pertains to the passage of airlines flights among major US cities and the other is classified as a miscellaneous dataset by their authors. Out of the two biological networks, bio-diseasome network is unweighted, but it has been converted to a weighted network by associating an edge weight with each existing edge computed by the formula wij=(i+j)mod200+1. Such formula has been used before by Hosseinian et al. [20] to convert unweighted networks to weighted ones. Also, the fractional edge weights reported in USAir97 dataset are transformed to integer weights by a simple linear transformation, which has no impact on our present result. The basic characteristics of each of these networks have been mentioned in Fig. 6. The figure depicts the change of structure (size and number) of maximum cliques of four different real-life interaction networks with different threshold values, including a dynamic threshold on clique intensities. The figure also captures the plot of the frequency distribution of weights of each of these interaction networks. Based on this figure, a few observations can be highlighted. Firstly, the edge-weight frequency distributions of all four interaction networks are distinct, in the sense that the plots are of different patterns. The Bio-diseasome network does not display any pronounced skewness in its frequency distribution; however, the other three networks do. The rather haphazard frequency plot of the bio-diseasome network can be attributed to the fact that its edge weights are artificially generated. The other biological network, namely bio-CE-GT, is negatively skewed, whereas the USAir and the CAG-MAT72 are positively skewed. For CAG-MAT72, mode is attained at the weight value 1 (apparent from the frequency distribution graph) and more than half of the total weight of all edges of the network is concentrated on the value 1. For USAir97 network, the mode is attained at the weight value 3. Both USAir97 and CAG-MAT72 networks have long tail at the right. For CAG-MAT72 network, 3 maximum cliques of size 18 are obtained without imposing any restriction or threshold (both thresholds being set at value 1). However, just excluding the edges with weight values 1 from the graph (i.e., δ1=2,δ2=1) makes the graph to produce 2 maximum cliques of size 10. High concentration of edge weights on value 1 perhaps explains it. In case of bio-CE-GT, however, no change in maximum clique structure is detected even as edges with weight values up to 100 are excluded. The mode of the weight values of this interaction graph is attained at the value 244. The change in maximum clique structures of this graph with respect to the chosen thresholds, as displayed in the figure, is consistent with its weight frequency distribution.

Fig. 6
figure 6
Variation in weighted maximum clique structures of Interaction graphs with selected threshold values, including dynamic threshold. At the left of each network, the frequency distribution curve of its edge weights is provided

Full size image
The imposition of thresholds may cause a graph to display a lower-order maximal clique to yield a higher intensity than the maximum intensity of the highest order maximal cliques. It is well known that the maximum weight maximal clique may not coincide with the maximum weight maximum clique in a network. Earlier, it has been pointed out that for the Call Log network, there is a 5-clique with a total weight of 4877, whereas the maximum weight 9-clique has a total weight of only 3836. In the CAG-MAT72 network, the maximum weight maximal clique coincides with the maximum weight maximum clique; however, with δ1=2,δ2=2, one gets a maximal 9-clique with total weight of 156, whereas the highest weight 10-clique has total weight of 145.

An important observation that can be made from the maximum clique structures of these graphs is the high degree of overlap among the multiple maximum cliques. We may recollect that the Call Log network displays similar overlapping properties for multiple maximum cliques. To get an indication of the extent of such an overlap, Jaccard index range has been mentioned in Fig. 6 for each network, wherever applicable. Although we are limiting ourselves to the observations of only a few real-world interaction networks, to keep in line with the main scope of this article, it merits further study to probe to what extent the observations can be generalized. Truly speaking, the essential idea of the community detection algorithm proposed here rests on such overlapping nature of maximum or maximal cliques.

Implementation
The implementation of the proposed methods, weighted maximum clique detection and community detection, is done in R in Windows Desktop environment. We have used the “igraph” package of R, which has got built-in library functions applicable for networks. The accuracy of the results of our WMCP method has been checked by comparing with the results of the corresponding igraph function, namely, largest_cliques and max_cliques. According to the igraph documentation, the clique functions use the algorithm proposed by Eppstein et al. [15]. The igraph functions, however, act as if the graph is unweighted; the clique intensities associated with the generated cliques are cross-checked through simple R programs.

Result of applying the proposed community detection method to networks
Maximal cliques of different sizes are the building blocks of the community detection algorithm proposed in this article. The algorithm amalgamates the maximal cliques which share significant amount of overlap, qualified by the involved edge weights, to form initial list of communities. This initial list is “tuned,” or aggregated further, if need be, to produce the final list of communities (a description of the tuning process is provided in Sect. 4). This is a node-based method and produces overlapping communities, without requiring the size or the number of communities to be specified beforehand. For evaluation, the method has been applied to a few real-life benchmark networks as described in subsequent sub-sections. A majority of the real-life networks for which ground-truth communities are available are unweighted (may have node-weights, but no edge-weight information); Karate club network, Dolphin network, Political Blogs and American Football network have ground-truth communities available, but they are all edge unweighted. Therefore, instead of using these commonly used networks, we have chosen other real-life edge-weighted networks for evaluation of our method. In absence of the ground-truth community information, we are to rely upon internal quality metrics to evaluate generated community structures. The most commonly used internal quality metric for measuring community detection results is modularity, in its different forms depending on the clustering technique. The internal quality measure weighted modularity extended for overlapping communities, or, extended modularity [10] as mentioned by Chen et al. is used. As an additional measure, we have used weighted clustering coefficient (WCC), to compare the transitivity of the generated communities with respect to the overall transitivity of the network. Henceforth, the word partition is going to be used to indicate a set of possibly overlapping communities generated by the execution of a community detection method. For WCC of the entire network, the definition as used by Barrat et al. [6] has been followed. This definition of WCC considers not only the number of closed triplets in the neighborhood of a node, but also the relative weight with respect to the strength (i.e., total weight of all edges incident on a node) of the node. WCC of a node i,i=1,2,…,n, is given by: cwi=1si(ki−1)∑j,h(wij+wih)2aijaihajh, where si and ki denote, respectively, the strength and the degree of the node i, wij the edge weight between nodes i and j and aij are the adjacency matrix elements of the graph. The WCC averaged over all nodes of the network provide the WCC at the network level. For WCC of a partition, we have taken the average WCC of individual communities constituting the partition. For a good community detection scheme, it is expected that the clustering coefficient at the partition level should exceed the clustering coefficient of the network.

The definition of the internal quality metric modularity, extended to overlapping edge-weighted networks, is given by [42]:

Qo=1S∑c=1k∑i,j=1nαciαcj(aij−sisjS)
(9)
In Eq. (9), αci=sci∑kc=1sci; sci=∑j∈caij denotes the strength of the i-th node in the community c. Also, 0≤αci≤1∀c=1,2,…,k;i=1,2,…,n. Moreover, αci=1 if the node i belongs to the community c alone and αci=0 if node i∉ community c. The quantity S=∑ni=1∑nj=1;j≠iaij denotes the total edge weight of the network.

It is to be noted that R has been chosen as the programming platform for this work, and therefore, we have tried to exploit R built-in libraries, especially the igraph package to deal with graphical objects, to the extent possible in executing our experiments. For example, for computing clustering coefficients using R, the R igraph built-in library function transitivity is used with suitable options.

Call Log and SMS Log networks
As mentioned in Sect. 5.1, the Call Log network has 128 nodes and 391 edges, with edge weights ranging between 1 and 2523 and an overall edge density of 0.048. The network is sparse. Moreover, the weighted clustering coefficient (WCC) associated with the network is WCC = 0.458. As the proposed algorithm is applied on the network, with the WJI threshold set to 0.5, 25 communities are formed. The extended modularity score of this overlapping partition is Qo=0.839 and WCC = 0.859, which is substantially higher than the clustering coefficient of the network as a whole. Out of these 25 communities, two communities have at least 80% of their nodes in common with other communities in the partition, and hence, as part of the tuning process, we merge them with their larger counterparts and get 23 communities. This particular partition of 23 overlapping communities is shown in Fig. 7. We call this partition as the accepted partition. Note that 13 of these communities are node pairs. The extended modularity of the accepted partition is Qo=0.864, and the corresponding WCC = 0.825. The Call Log network has a peculiarity that two of its nodes have very high degrees compared to the other ones (node “4” has degree 67 and node “13” has degree 42; whereas the next degree in the ordered degree sequence is 17).

Fig. 7
figure 7
The generated communities after applying the proposed community detection method on Call Log network, with threshold on weighted Jaccard index set at 0.5

Full size image
It may be noted that we have executed our method with alternative values of WJI threshold (namely, 0.4 and 0.6); but the partition with the threshold set at 0.5 turns out to be better, or at par, with respect to our quality measures.

Instead of WJI, if we use weighted overlap coefficient (WOC) (refer to expression (8)) as a criterion for candidate community formation, we get 26 communities with Qo=0.865 and WCC = 0.783. The modularity score remains nearly the same as our accepted partition, but the clustering coefficient drops. Therefore, this partition does not fare better than our accepted partition in terms of our chosen quality norms.

Before we proceed to compare results with other community detection algorithms, we are interested to check the contribution of edge weights in detecting communities, and hence, we try out the same method with simple Jaccard index as the criterion. This implies that pair-wise maximal cliques of a particular size (and finally all sizes) are progressively joined together if the Jaccard index between them exceeds the given threshold. The method generates 24 communities with an extended modularity of Qo=0.848 and clustering coefficient of 0.734. If the communities are further tuned as we did earlier, by merging the ones having more than 80% of nodes in common with each other, we get 22 communities with extended modularity Qo=0.884. If we look at the composition of the communities, the lower sized communities match exactly as in the accepted partition, e.g., the 13 node-pair communities in this partition match exactly the ones in the accepted partition. Difference in composition is observed in larger sized communities; the largest community has cardinality 59 here, whereas the same in the accepted partition is 41.

A modularity optimization-based community detection method [12], originally proposed by Newman, is applied on this network. We use the edge-weighted version of the method named fast greedy, as implemented in the igraph package of the statistical software R version 4.0.3. It generates a partition of 32 disjoint communities with Qo=0.869 and WCC = 0.539. The modularity of this partition is a tad higher than that of our accepted partition, but the clustering coefficient is much lower.

Finally, the clique percolation method (CPM) [35] with parameters k=4 and k = 5 is applied on the network; k=4 yields 6 and k=5 yields 3 communities. The partitions generated by the CPM algorithm overlap only a little and do not cover the network. Moreover, the edge weights do not contribute to the community formation process. We use this method for comparison, mainly because it is a clique-based method, and also a commonly used benchmark method. For comparison of the results, we use the partition generated by CPM with k=4, with modularity of 0.446 and WCC of 0.915. Although the modularity score of this CPM partition is somewhat poor compared to the scores obtained by the other algorithms, the clustering coefficient is very high. Moreover, the community structure has marked similarity with the one obtained by our proposed algorithm; we have shown them in Table 1.

Table 1 Comparison of community structures generated by CPM, with k=4, and the accepted partition of the proposed algorithm, as applied on the Call Log network
Full size table
The largest component of the SMS Log network has got 40 nodes, 106 edges, edge-weight range [1, 4978] and an overall WCC of 0.509.

We summarize the result of execution of our proposed method on this network in Table 2, as we also portray the community structures obtained by the CPM algorithm (with parameter k=3) and our algorithm, side by side in the same table, for comparison. The execution statistics suggest that the partition generated by taking WJI = 0.5 gives the best result. We may note that the CPM algorithm with parameters k=3 and k=4 generates three disjoint communities in each case (with different compositions). The communities do not generate covers for the network anyway. We make a comparison of the composition of the communities between the CPM algorithm with k=3 and the proposed algorithm as in Table 2. The modularity score of the clique percolation partition with k=3 is 0.565 and is exactly the same as the extended modularity of the best partition of the proposed method. However, its WCC score is slightly lower at 0.713 than our proposed algorithm.

Table 2 The first block denotes the execution statistics of the proposed method applied on SMS Log network, identifying the “best” partition; the second block describes community structures obtained by CPM, with k=3, and the “best” partition of the proposed algorithm, for comparison
Full size table
It is observed that for each of the Call Log and SMS Log networks, the “best” partition of the proposed method either surpasses the partitions generated by other benchmark methods, or, performs nearly equally in terms of the chosen quality measures. Moreover, the use of WOC as an alternative criterion does not improve the result over the use of WJI for these two networks.

Les miserable network
This benchmark network consists of characters of the novel les Miserables by V. Hugo as its nodes and their co-appearance in at least one chapter of the book as its edges. The edge weights denote the number of times the corresponding pairs of characters co-appear. We have used the dataset from the les miserable dataset as compiled by Knuth [24]. There are 77 nodes and 254 edges in this network with an edge density of 0.087, edge-weight range of [1, 31] and an overall weighted clustering coefficient of 0.606. As the proposed algorithm is applied on the network, with WJI threshold of 0.5, 11 overlapping communities are formed after final tuning. The extended modularity of this partition is Qo=0.52 and WCC is 0.75. This community structure is portrayed in Fig. 8. The central character of the novel is the protagonist Jean Valjean, node number 12. Notably, 6 out of the 11 communities share the node no. 12. The character Marius, node no. 56, appears in 3 communities; with the evil inn-keeper Thenardier, node no. 26, with the revolutionaries, node nos. 58 to 68 and with his own family node nos. 50 to 57. Instead of WJI, if WOC is used in the algorithm, it results in 8 communities with extended modularity Qo = 0.521. Out of the 8 communities, 5 are identical to those of our accepted partition, and a giant community of size 40 is produced as one of the different ones. The extended modularity score remains almost the same, and hence, using WOC over WJI does not quite improve the result in terms of modularity of the communities. However, the WCC of this partition is slightly higher at 0.77 (compared to 0.75). We make use of some of the execution statistics reported by other authors, namely Wang et al. [46] and Zalik [50], on this specific network. From their reported data, we note the modularity score of the clique percolation method (CPM), as both of these articles have used CPM as a benchmark method to compare their algorithms. The kSIM algorithm proposed Zalik produces disjoint partitions and works independently of edge weights. Therefore, it uses the original modularity scores to evaluate the quality of communities. In spite of the difference in approach between the two methods kSIM and our proposed method, a strong similarity of the community structures is observed in the results. In Table 3, we have made a direct comparison of the community structures generated by our proposed algorithm with kSIM (k=4). One of the reasons of our choosing kSIM algorithm for comparing our results is that the corresponding article analyzes justification of groupings of the characters of the novel from which the network has been constructed. The modularity of the CPM method is 0.436 and that of kSIM (k=4) is 0.538 (highest in class), as reported by Zalik. Wang et al., however, report extended modularity scores, as their proposed LOCD algorithm generates overlapping partitions. The authors have compared extended modularity scores of seven different community detection methods applied on this specific network. As reported by them, the extended modularity score of CPM method is 0.3662 with 10 communities, whereas the corresponding score for their method is 0.4896 with 15 communities (highest reported extended modularity score among the methods compared). With the extended modularity score of 0.52 with 11 communities, we can say that the reported partition of our proposed method performs quite competitively with several benchmark algorithms. Moreover, significantly higher transitivity of our chosen partition than that of the overall network is a good indication toward its quality.

Fig. 8
figure 8
Community structure of the Les Miserable network as identified by the proposed community detection algorithm with threshold parameter 0.5

Full size image
Table 3 Community structures of les miserable network generated by kSIM and the proposed algorithm
Full size table
Network science collaboration network
The network science collaboration network [33] reflects the collaboration relationship of 1589 authors working in the Network Science field, and was compiled by M. E. J. Newman in 2006. The largest connected component of this network, consisting of 379 authors and 914 pair-wise collaborations, is going to be used for testing our proposed method. The edge weights in this network denote the frequency of collaborations and range between 0.125 and 4.75. The edge weights are fractional in this scientific collaboration network, because of the way they have been defined. The strength of collaboration wij between authors i and j is defined as [6]: wij=∑p∂pi∂pjnp−1;wii=0, where the index p denotes a paper, np is total number of papers, ∂pi is an indicator variable set to 1 if author i has contributed to paper p and zero otherwise. The clustering coefficient and the weighted clustering coefficient of the whole network are 0.43 and 0.761, respectively. WCC is significantly greater than CC (= 0.43) of this network, and, therefore, the interconnected triplets are more likely formed by the edges with larger weights [6]. The result of execution of the proposed method on this network using different parameters and candidate community formation criteria is described in Table 4. At the tuning stage, communities with large overlaps (more than 33%) are merged; this merging operation takes away large overlaps among communities and fuses some of the communities, insignificant in size, with their larger counterparts.

Table 4 Execution statistics of the proposed method on the network science graph
Full size table
For comparison of results, we again look at results reported by other authors of community detection methods on this network.

i.
With reference to the work of Chen et al. in 2010 [10], we note that the extended modularity score of the algorithm CONGA, an overlapping community detection method based on the concept of split-betweenness, is 0.75; that of the algorithm CPM is 0.42; and that of the authors’ own algorithm based on node-strength is 0.85 (highest score among the compared algorithms).

ii.
With reference to the work of Wang et al. in 2017 [46], the extended modularity score of the algorithm COPRA, an overlapping version of the famous label propagation algorithm, is 0.6854; that of the CPM is 0.5745; and the authors’ own algorithm LOCD scores 0.8913 (highest among the compared algorithms).

Compared to the above result reported by multiple authors on the same network, but by different methods, the extended modularity score obtained by our algorithm turns out to be at par with these benchmark methods.

Conclusion
MCP algorithms exist in quite a good number in the literature, as this long-standing and impactful problem has been investigated from various perspectives. We have introduced a new one, primarily from a practical network analysis viewpoint. The proposed method is simple; the algorithm is based essentially on maintaining a certain order of the numbered nodes of the network and it attaches a clique-intensity value with every clique it generates in the process, intermediary and final. The method is an exact method and theoretically the running time is exponential. However, it draws run time advantage by exploiting the high sparsity factor of most real-life networks. We have proved that the method yields accurate results. The application has been illustrated in two ways: firstly, by analyzing the weighted maximum cliques of a real-life Call network, a correspondence has been drawn among members of the maximum cliques and very intimately connected (self-reported) members of the community of people in the network. Secondly, by suitably merging maximal cliques of various sizes in the network, starting from maximum cliques, a new network community detection method has been introduced. The method has been tested on a few real-life weighted networks and the results indicate that the method is effective, and comparable to other similar methods in terms of quality. In this article, we have experimented with thresholds at the individual interaction level and at the group interaction level as handles to manipulate maximum clique structures in the weighted interaction network for analysis. Our observations demonstrate how sensitive the maximum clique structures are to the thresholds. Using the thresholds appropriately may help to calibrate the group structures as the specific problem demands. In other words, by tuning the values of the thresholds appropriately, one may obtain the optimum set of communities which maximize the quality function. Even the idea of a dynamic threshold, which consistently promotes higher weighted group formation within networks and thereby produces a different maximum clique structure, is just another expression of our experimentation with thresholds toward network analysis.

The experimental results presented in this article bring out an interesting characteristic of most real-life interaction networks, which is, the tendency of multiple maximum cliques to overlap. To what extent this observation can be generalized, if at all, is an open question, which can be taken up as a separate topic for research by experimenting more with real-life interaction networks. It may be worthwhile to explore the nature of relationship between network characteristics and high value of Jaccard indices among the network’s maximum cliques. As communities tend to be overlapping in most real-life large networks [36], maximum cliques may also display similar trend. Such conjectures merit further enquiry. More importantly, an analytical basis can be sought to explain such a phenomenon. This is a possible direction in which further research can be done.

The article proposes a new similarity measure called weighted Jaccard index. We have noted that a majority of the similarity measures existing in the literature ignore edge weights, where edge-eights are nothing but quantification of the strength of relationships existing among the entities of the network. But, intuitively, it appears that ignoring the strength of relationships in group formation, where relationship is the basis of group formation, amounts to discounting a vital piece of information. Therefore, along with the existence of relationships, the strength of relationships also should contribute toward effective group formation strategy within a network. The formulation of the new index WJI is an attempt in that direction. The well-known similarity measure called Jaccard index quantifies the relative overlap of two grouped entities; WJI is an attempt to qualify this measure by relative strength of the overlapping region between the groups. Along with JI, we have also experimented with a slight variation of JI, called overlap index, qualified similarly by edge weights of weighted networks. In this article, we have not quite explored the properties of this index; nor have we done any comparative analysis with other measures of its category. There is scope to experiment further with similarity measures like Salton’s cosine index, Sorenson-Dice coefficient and so on. We plan to work more on this in future.