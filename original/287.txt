Internet of Things (IoT) is a network of interconnected smart devices which provides tremendous benefits and can be applied in various fields including, but not limited to, healthcare, monitoring, and transportation. Since late of 2019, the world faces coronavirus (COVID-19) which has harmful consequences in humans’ life and economy. Reducing human interaction is the most important health measure to avoid the spread of the infection. In this context, leveraging IoT and cloud-based technology help to remedy COVID-19 consequences by means of enabling individuals to manage their essential activities remotely with minimum engagement. However, sharing and gathering sensitive information over public insecure channel brings enormous security risks. To avoid these risks, we present a new practical lightweight multi-factor authentication and authorization scheme for real-time data access in IoT cloud-based environment, called LMAAS-IoT. Our scheme is suitable for, but not limited to, managing large scale systems such as health infrastructures. LMAAS-IoT is secure, efficient and strengthens user anonymity using dynamic index. Our design supports high scalability systems with efficient user registration process in which the legitimate user can access current as well as newly added system entities without further processes. We employed “one-way cryptographic hash functions” along with “bitwise XOR operations”. In addition, a fuzzy extractor algorithm is used at user side to verify user’s biometric information. LMAAS-IoT is analyzed for security with the help of the widely used “Real-Or-Random (ROR)” model; proof of correctness using BAN-logic; formal security verification using the broadly accepted “Automated Validation of Internet Security Protocols and Applications (AVISPA)” tool as well as the informal security analysis. LMAAS-IoT is also implemented using NS-3.31 simulator to demonstrate the practicability of our design. Finally, LMAAS-IoT provides more desired attributes and achieves mutual authentication with low computation and communication cost compared with other existing schemes.

Keywords
Multi-fa
ctor authentication
Security
Lightweight
Internet of Things (IoT)
AVISPA tool
BAN-logic

1. Introduction
Internet of Things (IoT) takes the lead in modern information and communications technology (ICT) applications. IoT plays a salient role in modern daily life providing numerous Internet based services in various areas such as military, smart city, healthcare, traffic monitoring, smart grid, etc., Winkler et al., 2008, Sikder et al., 2018, Rathore et al., 2016, Yuehong et al., 2016, Bottero et al., 2013, Reka and Dragicevic, 2018 and Kolokotsa (2016). The IoT system is comprised of a large number of interconnected smart devices or IoT sensors which communicate over Internet. These autonomous devices are deployed in various targeted fields to sense and collect data or to perform designated actions. Generally, in IoT cloud-based systems, the collected data from IoT sensors are forwarded to the cloud servers for storing and further processing purposes. Then after, authorized users can access the desired data from the corresponding cloud-server database. However, in many other scenarios, a user may require a real-time data directly from the deployed sensor. For example, military surveillance, patient body sensors, vehicular and individuals tracking, etc., require real-time data access.

The number of IoT based systems is rapidly growing, due to the reasonable manufacturing cost and the huge diversity of IoT devices. Moreover, cloud technology proliferates the abilities of promising IoT applications in term of employing the synergy of computational power of cloud technology, and the physical components of IoT systems (Biswas and Giaffreda, 2014, Botta et al., 2016). In this context, IHS Markit predicts that the installed base of IoT devices will rise to 73 Billion by 2025 (Columbus, 2018).

IoT cloud-based systems with real-time access can help specialists, organizations and governments to efficiently manage their resources, provide in time and accurate data, and reduce human involvement. The aforementioned benefits are key motivating factors to adopt IoT cloud-based solutions to deal with the considerable concerns like COVID-19 (Lai et al., 2020, WHO, 2020a). Such solutions support legitimate users with real-time data access from desired sensors deployed in hospitals, quarantines, country borders, and other special places which help to manage and suppress the consequences of the disease spreading. However, security concerns are rapidly increasing alongside with the widespread adoption of IoT based services. Hence, there is a crucial need to design mature security solutions to protect modern IoT systems against potential risks. In this context, authentication takes place as a cornerstone security solution to withstand various security attacks such as user impersonation, sensor impersonation, replay, man-in-the-middle, and trace-ability attacks, etc., Menezes et al. (2018). For this purpose, we propose a new lightweight multi-factor authentication and authorization scheme for real-time data access in IoT cloud-based environment, called LMAAS-IoT. We analyze our scheme using broadly accepted ROR model (Abdalla et al., 2005), BAN-logic (Burrows et al., 1989), AVISPA tool (Armando et al., 2005), and NS-3.31 (nsnam.org, 2020) to prove the robustness, efficiency and practicability of LMAAS-IoT.

1.1. Motivation
Consider the scenario of coronavirus disease (Lai et al., 2020, WHO, 2020a) which is one of the biggest health concerns in 21st century. The virus is wildly spread between humans with high fatality rate as reported by the World Health Organization WHO (WHO, 2020b). It rises global fears and has harmful consequences in various fields (healthcare, manufacturing, trading, transportation, social and country relation, etc.,) showing how fragile are the existing systems in such a situation. Following WHO recommendation, the majority of affected countries prevents or reduces people movement to the minimum and applies a social distancing strategy. In such cases, applying suitable IoT based applications comes up with many benefits and gives the ability to remotely access and manage essential activities and businesses with minimum human engagement in real-time manner. However, collecting and sharing sensitive data among users and deployed IoT sensors/actuators over a public insecure connection is subject to serious security risks such as user impersonation, sensor impersonation, replay, man-in-the-middle, etc. Authentication is one of the most important mechanisms used to mitigate the aforementioned risks. Besides, the capability limitations of IoT devices should be taken into consideration as resource constrained smart objects. Thus, using lightweight security primitives such as bitwise XOR operation and cryptographic hash functions is highly desired in such environments. However, to the best of our knowledge most of the existing authentication schemes are still insecure and vulnerable to well known malicious attacks. Therefore, designing a lightweight and secure authentication mechanism is crucial to prevent malicious activities in modern applications. In this context, we aim to design a new lightweight and secure authentication and authorization scheme in IoT cloud-based environment to overcome the aforementioned problems and to facilitate modern business management, as we predict a significant increase in deploying IoT based services by 2025. The proposed scheme, LMAAS-IoT, achieves mutual authentication among honest system entities, e.g., users, gateway nodes and sensors. Moreover, a fresh session key is established between legitimate users and IoT sensors to secure their future communications in real-time manner as well as preventing an attacker from revealing any previous recorded communications.

1.2. Contributions of LMAAS-IoT
Our contributions are briefly listed below.

1.
We propose a new lightweight multi-factor authentication and authorization scheme for real-time data access in IoT cloud-based environment, called LMAAS-IoT. The proposed scheme uses cryptographic hash functions and bitwise XOR operations. Also, a fuzzy extractor mechanism is used to utilize user’s biometric information.

2.
We employ a lightweight authorization mechanism within LMAAS-IoT to provide convenience access control to protect sensitive system resources from unauthorized access.

3.
We formally analyze the security of LMAAS-IoT using Real Or Random model ROR (Abdalla et al., 2005), and prove the correctness of our scheme using BAN-logic (Burrows et al., 1989). Further, we test LMAAS-IoT using Automated Validation of Internet Security Protocols and Applications tool (AVISPA) (Armando et al., 2005). Furthermore, the informal security analysis shows the immunity of LMAAS-IoT against well-known potential attacks.

4.
We measure the impact of LMAAS-IoT on the network performance parameters using NS-3.31, the widely adopted network simulator (nsnam.org, 2020). Finally, a comprehensive comparison between LMAAS-IoT and other existing authentication schemes shows that our scheme is efficient, secure and more practical.

1.3. Related work
Since the first password-based authentication protocol (Lamport, 1981), many researchers tried to enhance the security and functionality of various targeted network environments (Li et al., 2001, Ramasamy and Muniyandi, 2009, Xu et al., 2009). Symmetric and asymmetric key cryptography alongside with cryptographic hash functions have been widely employed to secure wireless sensor networks (WSNs)  (Banerjee and Mukhopadhyay, 2006, Du et al., 2005, Chatterjee and Das, 2015, Chung et al., 2015, Park and Park, 2016). In 2006, Wong et al. (2006) proposed a password-based lightweight and dynamic user authentication scheme for securing WSNs environment. However, Das (2009) found that the scheme proposed by Wong et al. (2006) is insecure and proposed a two-factor user authentication scheme. Das (2009) claimed that their scheme provides strong authentication. Unfortunately, Khan and Alghathbar (2010), and He et al. (2010) show that the scheme proposed by Das (2009) is insecure and vulnerable to various known attacks such as impersonation, privileged-insider attacks, and susceptible to bypassing the gateway node. In addition, the scheme proposed by Das (2009) does not ensure mutual authentication among the gateway node and the attached sensor nodes. To overcome these security weaknesses, Khan and Alghathbar (2010) proposed an improved two-factor user authentication scheme. Khan and Alghathbar (2010) claimed that their scheme achieved several security features. Later on Vaidya et al. (2010) discovered that the scheme of Khan and Alghathbar (2010) could not withstand smart-card stolen, forgery, and node capture attacks. In 2011, Yeh et al. (2011) revisited Das (2009) scheme, reported several vulnerabilities and proposed a new user authentication scheme that uses Elliptic Curves Cryptography (ECC) and smart cards. Yeh et al. (2011) claimed that their scheme is suitable for higher security in WSNs environment. However, in 2013 Xue et al. (2013) showed that the scheme proposed by Yeh et al. (2011) is inefficient in terms of additional storage overhead and that it requires more computational resources. Then, Xue et al. (2013) proposed a new temporal-credential-based authentication scheme with mutual authentication and key agreement for wireless sensor networks. In the same year, Li et al. (2013) reported that several security flaws still remained in the scheme of Xue et al. (2013) such as stolen smart-card, offline-password guessing and insider attacks. Then after, in 2014 Turkanović et al. (2014) presented an enhanced lightweight mutual authentication mechanism to accord with these security challenges, achieving essential security features and lightweight attributes using hash functions and bitwise exclusive-OR (XOR) operations. In 2016, Farash et al. (2016) pointed out the security flaws in the scheme of Turkanović et al. (2014) and showed that the scheme does not ensure sensor node anonymity and, moreover, does not provide untraceability. To solve these security weaknesses, Farash et al. (2016) proposed a new user authentication and key agreement scheme for heterogeneous wireless sensor networks, their design being tailored for the Internet of things environment. However, in 2017 Kumari et al. (2017) analyze the scheme proposed by Farash et al. (2016) and reported that it does not provide user and sensor-node anonymity and could not withstand various known attacks. In 2017,  Dhillon and Kalra (2017) mention that, in practice, traditional two-factor authentication protocols are insecure when the password is cracked or loss of smart device happens. In the same year, Challa et al. (2017) proposed a new user authentication scheme for the IoT environment using ECC-based digital signature. Their scheme provides attributes such as user anonymity and untraceability. However, this scheme produces higher costs at the involved IoT entities in terms of computation and communication overheads. Moreover, recent techniques and methodologies are proposed by researchers to provide a variety of security solutions such as covert communication system based-blockchain (Wang and Su, 2020), preserving data in smart agriculture (Song et al., 2020), and securing smart grid (Wang et al., 2020).

Recently, Challa et al. (2020) proposed an authenticated key agreement scheme in cloud-assisted cyber–physical systems. However, their scheme has a critical design flaw as stated by Chaudhry et al. (2020). Wazid et al. (2020) proposed a new lightweight authentication mechanism in cloud-based IoT environment. They claimed that their scheme is efficient, scalable and can provide real-time data access of IoT sensors through corresponding gateway nodes which are deployed in various clusters. In 2020, Alsahlani and Popa (2020) analyzed Wazid et al. (2020) scheme and found that their scheme is still unstable and does not scale well when new gateway nodes are added. In addition, the scheme of Wazid et al. (2020) does not provide an authorization mechanism, thus exposing sensitive data to unauthorized access. In this context, in 2021, Chaudhry et al. (2021) proved that Wazid et al. (2020) cannot provide mutual authentication between system entities in the case of multiple registered users. To the best of our knowledge, most of the existing authentication schemes are not complete and less appropriate for high demand cloud-based applications in IoT and WSNs environments.

In this paper, we propose a new lightweight multi-factor authentication and authorization scheme, tailored for real-time data access in IoT cloud-based environment that uses only XOR operations, cryptographic hash functions, and fuzzy extractors to verify users biometrics.

1.4. Roadmap of the paper
The network and the threat models as well as the authorization mechanism of the proposed work, LMAAS-IoT, are demonstrated in Section 2. The preliminary information related to LMAAS-IoT is presented in Section 3. In Section 4 the eight phases of LMAAS-IoT are explained in detail. Then, the formal and informal security analysis are given in Section 5. In Section 6, we present the performance comparison between LMAAS-IoT and other related schemes. In Section 7, we discuss the network analysis and NS-3.31 simulation results. Finally, we conclude the paper in Section 8.

2. System models
In this section we demonstrate the network and threat models as well as the authorization mechanism of the proposed LMAAS-IoT.

2.1. Network model
The network model of LMAAS-IoT is comprised of four main entities, namely system administration, users, gateway nodes, and IoT sensors, denoted by , 
, 
, and 
 respectively. The proposed scheme supports large-scale systems which consist of many 
 and 
. However, due to the limited resources, each 
 can handle a certain amount of 
. Thus, the system is divided into fields, each field consists of a single 
 and a reasonable number of 
. With the help of cloud technology, 
 can access geographically distributed fields, Fig. 1 illustrates the deployed network model. LMAAS-IoT provides secure and efficient real-time data access among honest users, and in-site sensors. In brief, suppose a user 
 needs to access data from implanted IoT sensor 
 in real-time manner. In such case, both 
 and 
 need to mutually authenticate each other, which require three steps of mutual authentication (1) between 
 and 
, (2) between 
 and 
, and (3) between 
 and 
. Then after, both 
 and 
 establish a fresh session key to secure their future communications. In LMAAS-IoT, both 
 and 
 communicate together via gateway node 
 which is a gateway to the Internet. The system administration  plays a key role in the proposed model in which,  generates the required secret credentials for both 
 and 
. Then,  stores these credentials in corresponding 
’s and 
’s memory before deploying them in the targeted fields. Moreover,  generates required credentials for 
 through registration phase and stores the credentials in a smart card, then delivers it to 
 securely (for example, in person). In addition, according to the preferred policy,  manages 
’s privileges to provide authorization mechanism along side with authentication in order to secure sensitive system resources and add more practicability. LMAAS-IoT achieves efficient scalability: a single successful registration process allows legitimate 
 to access current and future attached devices. Fig. 2 briefly illustrates the flow diagram of LMAAS-IoT framework. LMAAS-IoT can be efficiently applied in various systems including but not limited to the scenario of coronavirus emergency management system. This scenario (in high level view) involves groups of users (such as doctors, officers, managers, and other specialist users), groups of gateway nodes deployed in hospitals, quarantines, country borders, and other special places, and groups of deployed sensors attached to each gateway node (e.g., cameras, thermometer, pollution-sensors, GPS, etc.). According to this scenario, doctors with various privileges can monitor patients condition in hospitals, quarantines, and deal with potential positive cases at borders; officers also can monitor borders, ensure social distancing, tracking cases under quarantine; managers can predict the future needs and supply-in-time, and so on. Thus, sharing accurate information directly and securely under the national emergency management system gives numerous advantages in quick response, saving lives, and economic benefits in terms of efficient resource management.

2.2. Threat model
We use the widely accepted Dovel–Yao threat model (Dolev and Yao, 1983) in LMAAS-IoT. Under this model, users and IoT sensors are not trustworthy, the communication channel is insecure, and the communications between end to end parties are insecure too. In this model, an adversary can eavesdrop the exchanged messages to execute passive attacks, and he/she can also alter and delete the messages communicated over the insecure channel to execute active attacks. In addition, the adversary can physically capture some of deployed IoT sensors and acquire all the sensitive information stored inside. We assume that the system administration and the gateway nodes are trusted parties and physically secured in LMAAS-IoT.

2.3. Authorization mechanism
In order to protect sensitive information and system resources, various authorization mechanisms are adopted as access control solutions to ensure that only authorized parties can gain access to certain resources. Using access policies and tokens, the system administration specifies which actions a user can perform on a certain IoT object. In general, the widely adopted authorization mechanisms are either policy-based or token-based architectures (Ravidas et al., 2019), each having its benefits and drawbacks. Typically, the policy-based architecture is suitable for centralized systems which require an entity to act as an evaluation server and policy enforcement of access control (Kaluvuri et al., 2015). The policy-based authorization may produce undesirable delay and communication overhead (Ravidas et al., 2019). However, token-based architectures emerge as an alternative to policy-based architectures which are more suitable for decentralized systems (Denniss and Bradley, 2017, Maler et al., 2017).

In LMAAS-IoT, our authorization strategy is to employ a lightweight authorization to provide the desired access control. Our mechanism does not affect system resources and does not require additional communication. The proposed authorization mechanism assures that only authorized users can access certain IoT sensors which is a natural security attribute in modern applications.

During setup phase of LMAAS-IoT, i.e., before deploying the IoT sensors, the system administration  assigns suitable authorization parameters 
 to each IoT sensor 
, where 
 contains the information about the users who are authorized to access 
. Fig. 3 shows an example of 
. Since each group of IoT sensors are attached to a single gateway node 
 as shown in Fig. 1,  stores all 
 in their corresponding 
’s database as mentioned in Section 4.1. Further,  assigns a suitable authorization parameter 
 to each user 
 during his/her registration phase as mentioned in Section 4.2, where 
 parameter contains 
’s authorization information. Fig. 3 shows an example of 
. Then,  stores 
 in 
’s database, in which 
 is authorized to access the IoT sensor through the corresponding 
.

In LMAAS-IoT, the gateway node plays a core role in the employed authorization mechanism. The gateway node verifies the user’s login request which contains the user’s information and the targeted IoT sensor’s information as well. Then, the gateway retrieves stored authorization parameters 
 and 
 corresponding to the user and targeted IoT sensor, respectively. In order to make a decision, the gateway node checks the content of 
 and 
 to decide whether the user is authorized to access requested real-time data or not. Fig. 4 summarizes the decision process of the employed lightweight authorization mechanism in sequential steps. Next we present a brief example. Assume that the three users in Fig. 3 try to access the IoT sensor (a) at the date (7 May 2021). However, only user (1) is authorized to access IoT sensor (a) as he/she belongs to authorized group and has a valid permission. Nevertheless, the user (1) still needs to prove his/her authenticity to the gateway node in order to have legal access to the gateway’s attached IoT sensor. In other words, only authorized and authenticated users can gain access to the system resources as demonstrated in Section 4.4. In the same context, both users (2) and (3) are denied, as the user (2) belongs to an unauthorized group, and the user (3) has expired permission. In addition, the system administration can customize their preferred authorization parameters according to their needs.


Fig. 3. Samples of authorization parameters.



Fig. 4. The authorization mechanism.

The employed authorization mechanism does not produce any communication overhead and it is very suitable for lightweight IoT systems. It is worth mentioning that  can easily and instantly update the authorization information in terms of granting or revoking access permissions by sending a new access control information to the selected 
, as demonstrated in Section 4.8.

3. Preliminaries
3.1. Notations
The notations used through this paper are described in Table 1.


Table 1. Notations used in this paper.

Symbol	Explanation
th user
’s smart card
th IoT sensor
th gateway
System administration
, 
, 
’s identity, password and biometric information, respectively
’s Identity
Pseudo identity of 
Pseudo identity of 
bit dynamic index of 
bit secret number of 
bit secret number of 
, 
bit secret keys generated by 
, 
, 
bit random nonces
’s authorization parameter
’s authorization parameter
Registration timestamps of 
Various current timestamps
Maximum transmission delay
Fuzzy extractor generation method
Fuzzy extractor reproduction method
’s personal biometrics
’s biometric secret key
 ’s public reproduction parameter
Error tolerance threshold
Cryptographic collision-resistant one-way hash function
Concatenation operation
Bitwise XOR operation
, 
Session key between 
 and 
3.2. Hash functions
A cryptographic one-way hash function (Schneier, 2015) is defined as: , where 
, and 
. The function  maps an arbitrary length string of bits (denoted by , as input message) to a fixed length string (denoted by , as output message) called the hashed value of size . Hash functions are key elements in many cryptographic applications especially in authentication schemes. The hash function satisfies the following properties:

1.
Easiness: Given , it is easy to compute  such that .

2.
Preimage resistant: It is hard to find  from given , where .

3.
Collision resistant: It is hard to find a pair 
 such that 
, where 
.

4.
Mixing-transformation: With any input , the hashed value  is computationally indistinguishable from an uniform binary string in the interval 
, where  is the output length of hash .

3.3. Fuzzy extractor
As a multi-factor authentication scheme, in LMAAS-IoT, we use the widely accepted fuzzy extractor technique (Dodis et al., 2004) to verify the user’s identity. The fuzzy extractor consists of two algorithms:

1.
Probabilistic generation algorithm  to extract uniformly random bits 
 and public information 
 from the biometric template 
 as original user’s biometric data obtained at the registration process. 
.

2.
Deterministic reproduction algorithm  to recover the original biometric key data 
 from a noisy biometric 
 as current user’s biometric data obtained at the login process corresponding to the computed public information 
 and predefined error tolerance between original and current user’s biometric information. 
.

4. The proposed scheme (LMAAS-IoT)
In this section, we propose a lightweight multi-factor authentication and authorization scheme for real-time data access in IoT cloud-based environment, called LMAAS-IoT, to overcome the weaknesses associated with Wazid et al. (2020) scheme which are pointed out in Alsahlani and Popa (2020). LMAAS-IoT uses only hash functions and bitwise XOR operations. Further, the three-factors used in LMAAS-IoT are (1) the smart card of a user 
, (2) user’s password 
, and (3) user’s personal biometrics 
. The advantages of using a biometric key are briefly listed as following: (1) it is unique; (2) it is hard to copy or share; (3) it is very hard to forge; (4) it is immune to be guessed; (5) it is immune to be lost or forgotten. The fuzzy extractor mechanism  (Dodis et al., 2004) is applied in our proposed scheme for user verification. Furthermore, we assume that the system entities involved in LMAAS-IoT are synchronized in time to manage timestamps of their communications to withstand replay attacks. Random nonce is also used to increase system immunity against replay attacks and to update the dynamic index parameter 
 at both of 
 and 
. Moreover, LMAAS-IoT ensures the synchronized value of 
 among 
 and 
 as discussed in details within this section. Our scheme consists of eight phases: setup phase, user registration phase, login phase, authentication and key exchange phase, password and biometric update phase, dynamic gateway and sensor addition phase, stolen smart card phase and authorization update phase. The notations used in LMAAS-IoT are given in Table 1. Next, we present LMAAS-IoT in detail.

4.1. Setup phase
In the setup phase, the system administration  performs the registration of both IoT sensors 
 and gateway nodes 
 prior to their deployment in targeted fields (such as hospitals, airports, etc.). This phase is demonstrated in the following steps:

•
Step Set1. For every IoT sensor 
,  generates a 160-bit shared secret key 
 and selects a unique identity 
. Then,  computes corresponding pseudo identity as 
. Further,  assigns corresponding privilege access control information 
 to facilitate the authorization.

•
Step Set2.  chooses 
 as a registration timestamp of 
. Then,  calculates corresponding temporal credential as 
.

•
Step Set3.  stores the information {
, 
, 
} in the memory of 
 and deploys it in the target field.

•
Step Set4.  also stores the information {
, 
, 
, 
} in the memory of 
 and deploys it in the target field (in which 
 is assumed to be physically secured).

•
Step Set5.  chooses a unique symmetric key 
 to secure future communications between  and 
.

4.2. User registration phase
This phase demonstrates the registration procedure for a new user 
 who intends to legally access real-time data from an IoT sensor 
 through the corresponding 
 node. For this purpose, 
 requires to register at  via a secure channel with the help of the following steps:

•
Step Reg1. 
 selects his/her identity 
 and sends a registration request message containing the 
 with 
’s credential to  via a secure channel. 
’s credential (ID card) is required to prove his/her identity to .

•
Step Reg2. After receiving the registration request,  checks the 
 and requests new 
 if duplication occurs. Then,  generates a 160-bit secret key 
 and computes 
’s pseudo identity as 
. In addition,  chooses a 160-bit secret number  and calculates 
 and 
.

•
Step Reg3.  chooses a 160-bit unique initial dynamic index 
 and generates a smart card 
 for 
 by storing the information {
, 
, , 
, 
} in its memory.  delivers 
 to 
 through a secure channel.

•
Step Reg4. After receiving 
, 
 chooses his/her desired password 
 and provides the biometric data 
 using specific reader device. Then, 
 computes (
, 
)  
, where 
 and 
 are the -bit biometric secret key and the reproduction public parameter, respectively.

•
Step Reg5. 
 chooses a 160-bit secret number  and also calculates pseudo-random password 
, 
, 
. Further, 
 calculates 
, 
, 
 and 
. Finally, 
 stores the information {
, 
, 
, 
, 
, 
, , , , , 
} in 
’s memory. 
 discards 
, 
, 
 and 
 from 
’s memory to protect the important information against potential lost/stolen smart card attack.

•
Step Reg6. Finally, according to ’s access control policy,  assigns a suitable authorization parameter 
 to provide access control over 
’s access requests. Also  initiates both last valid dynamic index 
 and temporal dynamic index 
 to facilitate 
’s first login attempt as discussed in login phase (see Section 4.3), and authentication and key agreement phase (see Section 4.4). Then,  sends the registration message {
, 
, 
, 
, 
, 
} encrypted with 
 to the corresponding 
 via a public channel. In case, 
 is authorized to access other 
 within the system,  also sends the registration message {
, 
, 
, 
, 
, 
} to the other 
 encrypted with their corresponding 
 via a public channel.

•
Step Reg7. Upon receiving the encrypted registration message, 
 decrypts the message using 
. Then, 
 stores {
, 
, 
, 
, 
, 
 } in its database. The summary of the registration phase is shown in Fig. 5.

4.3. Login phase
A legitimate 
 with valid 
 performs the following steps in order to login to the system resources. Firstly, 
 needs to prove his/her legitimacy, then accordingly generates the login request and delivers it to the targeted 
. The summary of the login phase is shown in Fig. 6.

•
Step Log1. With the help of using 
, 
 inputs his/her identity 
, password 
, and biometric information 
. Then, 
 computes the secret key of 
’s biometric 
. The hamming distance between the current 
, and the original 
 imprinted at the registration phase, should be less than or equal to the predefined error tolerance  as briefly mentioned in Section 3.3. Thereafter, 
 computes 
, 
, 
, 
. Further, 
 computes 
 and checks the equality of 
?. If 
, the login attempt ends immediately. Otherwise, 
 is legitimate.

•
Step Log2. 
 generates the current timestamp 
, the random nonce 
, and chooses 
’s corresponding 
. Then, 
 computes 
, 
, 
, 
, 
, 
, 
. Finally, 
 sends the login request message 
  {
, 
, 
, 
, 
} to 
 via public channel.

4.4. Authentication and key exchange phase
In LMAAS-IoT, we design an efficient authentication process. Within this phase, the following steps are performed between system parties 
, 
 and 
 in order to authenticate each other. Further, at the end of the successful authentication and key exchange phase a session key is established between 
 and 
 to secure their real-time communications over public channel. The summary of authentication and key exchange phase is shown in Fig. 6.

•
Step Auk1. Upon receiving the login request message 
  {
, 
, 
, 
, 
} from 
, 
 checks the timelines of 
 using the condition  
 - 
   , where 
 is the receiving time of 
 and  is the preset maximum transmission delay. If the condition does not hold, the session terminates immediately. Otherwise, 
 examines its database, i.e., last valid dynamic index 
 and temporal dynamic index 
 to find the matched value of the received dynamic index 
. If no matches exist, then the session terminates as 
 is not valid. On the contrary, 
 retrieves 
’s information corresponding to 
 from its database. It is worth mentioning that, if 
, then the last 
’s login request ended unsuccessfully. Otherwise, if 
, then the last 
’s login request completed successfully. Thus, 
 provides  with useful statistics about 
’s login requests. Then, 
 computes 
, 
. Further, 
 retrieves 
’s information corresponding to 
 from its database. Then, 
 checks if 
 is authorized to access targeted 
 based on authorization parameters 
 and 
 as briefly discussed in Section 2.3. If the condition does not hold, then the session ends immediately as 
’s access is not authorized. Otherwise, 
 computes 
 
, and 
. Then, 
 checks the equality of 
?. If 
, then the session terminates immediately. Otherwise, 
 is authenticated by 
 and authorized to access 
.

•
Step Auk2. 
 generates the current timestamp 
 and the random nonce 
, then computes 
, 
, 
 and 
. Further, 
 computes 
, 
 and updates its database using new 
 and 
. Thereafter, 
 sends the message 
  {
, 
, 
, 
} to 
 via a public channel.

•
Step Auk3. Upon receiving 
  {
, 
, 
, 
}, 
 checks the timelines of 
 using the condition  
 - 
   , where 
 is the receiving time of 
 and  is the preset maximum transmission delay. If the condition does not hold, then the session terminates immediately. Otherwise, 
 computes 
, 
 and 
. Then, 
 checks the equality of 
?. If the condition does not hold, then the session terminates immediately. Otherwise, 
 is authenticated by 
. Then, 
 generates 
 and 
 and computes 
, 
, 
. Further, 
 computes the session key 
 and 
. Then, 
 sends the authentication reply message 
  {
, 
, 
, 
} to 
 directly via a public channel.

•
Step Auk4. Upon receiving 
, 
 checks the timelines of 
 using the condition  
 - 
   , where 
 is the receiving time of 
 and  is the preset maximum transmission delay. If the condition does not hold, then the session terminates immediately. Otherwise, 
 computes 
, 
 and 
. Further, 
 computes shared session key 
 and 
. Then, 
 checks the equality of 
?. If the condition does not hold, the session terminates immediately. Otherwise, 
 is authenticated by 
. Further 
 computes 
. Furthermore, 
 updates 
’s memory by replacing the stored 
 with the recently computed one in this phase. A legitimate 
 will use the new 
 in the next future login request to access any desired 
 correlated to the current 
.

Remark

In practice, a legitimate 
 may need to access several existing and/or newly added 
 and their attached IoT sensors. In this case, 
 has to keep the initial value of 
 which was generated by  at the registration phase to facilitate the first login. Once 
 has a successful first login at the other existing and/or newly added 
, both 
 and the particular 
 will synchronize their dynamic index. In other words, using initial value of 
, 
 dynamically derives a random 
 corresponding to each 
 which he/she is authorized to access. Further, LMAAS-IoT ensures the synchronization of 
 among 
 and each 
 in which an adversary cannot desynchronize. Furthermore, this technique strengthens user anonymity and enhances untraceability by using a fresh index value in 
’s future login requests.

4.5. Password and biometric update phase
In LMAAS-IoT, an authorized user can efficiently update his/her password and/or biometric information independently without communicating to . The user should perform the following steps at the password and biometric update phase. Fig. 7 shows the summary of this phase.

•
Step PB1. Using 
, 
 inputs his/her identity 
, password 
, and biometric information 
. Then, 
 computes the secret key of 
’s biometric 
. The Hamming distance between the current 
, and the original 
 imprinted at the registration phase should be less than or equal to the predefined error tolerance  as briefly mentioned in Section 3.3. Thereafter, 
 computes 
, 
, 
, and 
. Further, 
 computes 
 and checks the equality of 
?. If the two values are not equal, then the password and biometric update phase ends immediately. Otherwise, 
 is legitimate and ready to update his/her secret factors.

•
Step PB2. 
 chooses his/her desired new password 
 and provides the new biometric data 
 using a specific reader device. However, 
 can still keep one of the old information without update. In this case, 
 can reuse old 
 and/or 
 as new 
 and 
 respectively. Then, using 
, 
 computes (
, 
)  
, where 
 and 
 are the biometric secret key with bits 
 and reproduction public parameter respectively.

•
Step PB3. 
/
 further calculates pseudo-random password 
, 
, 
. Furthermore, 
/
 calculates 
, 
, 
 and 
. Finally, 
 replaces the old secret information with the new computed ones and stores the information {
, 
 
, 
, 
, 
, , , , , 
} in 
’s memory.

4.6. Dynamic gateway and sensor addition phase
In practice, it is more likely to dynamically add new gateway nodes and IoT sensors to the existing systems. LMAAS-IoT provides an efficient and scalable procedure to add new 
 and 
. LMAAS-IoT allows previously registered 
 (but only authorized ones) to gain access to all existing and newly added 
, and 
 which he/she is authorized to access, without needing a new registration process. The details of this phase are shown in the following steps.

4.6.1. Add new gateway node
•
Step DG1. In case of adding a new gateway 
 to the system,  chooses a new symmetric key 
 to secure future communications between  and 
. Further,  retrieves the registration information of 
, but only 
 whom are authorized to access the new gateway 
. Then,  stores {
, 
, 
, 
, 
, 
 } into 
’s memory. This means, legible 
 does not require to register at 
 i.e., reduces corresponding costs. Then after, 
 is deployed in the targeted field in which 
 is assumed to be physically secured.  also informs 
 about the newly added node. So, 
 can communicate with 
.

4.6.2. Add new IoT sensor node
•
Step DS1. In case of adding a new IoT sensor 
,  generates a 160-bit shared secret key 
 and selects a unique identity 
. Then,  computes corresponding pseudo identity as 
. Further,  assigns a corresponding privilege access control category 
 to be used for authorization mechanism.

•
Step DS2.  chooses 
 as a registration timestamp of 
 and then calculates a corresponding temporal credential as 
.

•
Step DS3.  stores the information {
, 
, 
} in the memory of 
 and deploys it in the target field.

•
Step DS4. Using 
’s corresponding symmetric key 
,  encrypts then sends the information {
, 
, 
, 
} to the designated gateway node 
. Upon receiving the information, 
 decrypts, then stores {
, 
, 
, 
} in its memory.  also informs 
 about the newly added node. So, 
 can access 
 through the corresponding 
.

4.7. Stolen smart card phase
In LMAAS-IoT, a legitimate 
 can request a new smart card 
 in case of lost or stolen one. Fig. 8 shows the summary of stolen smart card phase. The following steps demonstrate this phase in detail.

•
Step SSC1. 
 selects his/her identity 
 and sends request message 
 alongside with 
’s credentials to  via a secure channel, the same 
’s credential submitted at the registration phase (such as the ID card) to prove his/her identity to .

•
Step SSC2.  verifies the request message. If the message is not correct, then the request is rejected. Otherwise,  generates a 160-bit secret key 
 and computes 
’s pseudo identity as 
. In addition,  chooses a 160-bit secret number  and calculates 
 and 
.

•
Step SSC3.  then chooses a 160-bit unique initial dynamic index 
, and generates a smart card 
 for 
 by storing the information {
, 
, , 
, 
} in its memory and delivers it to 
 through a secure channel.

•
Step SSC4. After receiving 
 from , 
 chooses his/her desired password 
 and provides the biometric data 
 using the specific reader device. Then, 
 computes (
, 
)  
, where 
 and 
 are the biometric secret key with bits 
 and reproduction public parameter respectively.

•
Step SSC5. 
 chooses a 160-bit secret number  and also calculates pseudo-random password 
, 
, 
. Further, 
 calculates 
, 
, 
 and 
. Finally, 
 stores the information {
, 
, 
, 
, 
, 
, , , , , 
} in 
’s memory. 
 discards the information 
, 
, 
 and 
 from 
’s memory to protect the important information against potential lost/stolen smart card attack.

•
Step SSC6.  assigns a suitable authorization parameter 
 to provide access control functionality. Also,  initiates both last valid dynamic index 
 and temporal dynamic index 
 to help legitimate 
 to gain successful first login attempt using new smart card 
. Then  sends update registration message {
, 
, 
, 
, 
, 
} encrypted with 
 to the corresponding 
 which 
 is authorized to access via a public channel. Upon receiving the encrypted update registration message, 
 decrypts the message using 
 and stores this information in its database.

4.8. Authorization update phase
In order to secure sensitive system resources, we employ an efficient authorization mechanism to manage the system’s access control. In LMAAS-IoT, the system administration  can efficiently manage the 
’s access control to grant and/or revoke access permissions to the registered users. Fig. 9 shows the summary of authorization update phase. The following steps demonstrate this phase in detail.

•
Step AU1. To update 
’s access control,  selects 
’s corresponding 
. Then,  selects a 160-bit secret key 
 and computes 
’s pseudo identity as 
.

•
Step AU2.  updates 
’s authorization parameter 
 to provide suitable access control over 
’s access requests. Then,  sends the authorization update message {
, 
, 
} encrypted with 
 to the corresponding 
 via a public channel. Notice that the authorization update message can be send to all 
 in the system in which 
 is authorized to access.

•
Step AU3. Upon receiving the encrypted authorization update message, 
 decrypts the message using 
. Then, 
 chooses 
’s corresponding secret information and updates his/her authorization parameter using new 
.

Remark

A legitimate user also can request to update his/her access control by sending an authorization request to  via a secure channel. If 
’s request is valid,  processes the request as mentioned in the authorization update phase (see Section 4.8). It is worth mentioning that in LMAAS-IoT,  can assign multiple access rules in 
 which adds flexible control of the system resources. For example, to manage global health issues like COVID-19 (Lai et al., 2020, WHO, 2020a), a specific registered doctor may need high access permissions to manage patient cases inside a hospital but relatively low permissions to manage potential cases in airports and borders.


Fig. 9. Summary of authorization update phase.

5. Security analysis
In this section, we do the formal and the informal security analysis to verify the security robustness of our proposed scheme, LMAAS-IoT.

5.1. Formal security proof using ROR model
In this section, we formally analyze LMAAS-IoT to measure the semantic security of the session key using the Real-Or-Random (ROR) security model (Abdalla et al., 2005). First, we give a brief introduction about (ROR) and then we formally prove the security of LMAAS-IoT.

5.1.1. ROR security model
In this paper, we follow the ROR model proposed by Abdalla et al. (2005). The involved participants of LMAAS-IoT are 
, 
, 
 and .

•
Participants. The notations 
, 
, 
 and 
 denote the instances , ,  and  of 
, 
, 
 and , respectively. These instances are treated as oracles.

•
Partnering. The notion of partnering refers to the instances sharing the same non-null session identifications (sid). The sid is a partial transcript of the conversation between the participants’ instances (Katz and Yung, 2003). In a certain session, the partner of 
’s instance 
 is 
’s instance 
 and vice versa.

•
Freshness. The instances 
 or 
 are considered fresh if their corresponding session key 
 is not revealed to the adversary .

•
Adversary. The adversary  is assumed to have a full control over the communications as mentioned in Section 2.2. Moreover,  has access to the following queries:

–
Execute (
, 
, 
): The adversary can execute this query to intercept the messages transmitted between honest participants 
, 
, and 
. This query models an eavesdropping attack.

–
Send (
, ): This query is used to model an active attack. This query allows  to send a message  to a participant instance 
 and to receive a response message.

–
CorruptSmartCard (
): This query is used to model the smart card stolen attack. The output of this query is the stored information in the smart card of 
.

–
CorruptIoTSensor (
): This query is used to model the attack in which  can compromise the long-term secret key {
, 
, 
} from the sensor node 
. This query is used to illustrate the perfect forward secrecy feature of the scheme. Similar to Chang and Le (2015) and Wazid et al. (2020) both CorruptSmartCard and CorruptIoTSensor queries follow the weak-corruption model in which the ephemeral keys and internal data of the participant instances are not corrupted.

–
Test (
)): This query is used to model the semantic security of the session key established between 
 and 
. Following the Real-Or-Random (ROR) model (Abdalla et al., 2005), the experiment starts by flipping unbiased coin , its value is kept secret from the adversary  to be used to decide the output of Test() query. When  executes this query, if the session key that has been established between 
 and 
 is fresh, then the instance 
 returns the session key if  or a random number in the same domain if ; otherwise, it returns  (null).

•
The Semantic security of the session key. During an experiment of the Real-Or-Random model, the adversary  is challenged to distinguish between an instance’s real and random session key.  can ask a limited number of CorruptSmartCard and CorruptIoTSensor queries. However,  can ask many Test() queries to either the user instance 
 or to the IoT sensor instance 
. We assume that  and 
 are trusted entities as mentioned in Section 2.2. Hence,  cannot access  and 
. The output of Test() query must be consistent with respect to the random bit . At the end of the experiment,  returns a guess bit 
 and wins the game if 
. Let  denote the event in which  wins the game. The advantage of  in breaking the semantic security of the session key derived using LMAAS-IoT is 
. In the ROR sense, we say that LMAAS-IoT is a secure authentication and key agreement scheme, if 
 is negligible.

•
Random oracle. All the involved participants in LMAAS-IoT and the adversary  have access to a collision-resistant hash function , which is modeled as a random oracle. Let  denote the random oracle which is simulated as a two-tuple ( and ) table of binary strings. When the oracle  receives a hash query , it returns  if  is found in the table; otherwise, it returns a uniformly random string  and stores the pair (, ) into the table.

5.1.2. The formal proof in ROR model
In this section, we formally analyze the semantic security of LMAAS-IoT in Theorem 1.

Theorem 1

Let  denote an adversary running in polynomial time  against our LMAAS-IoT scheme in Real-Or-Random (ROR) model, let  denote the uniformly distributed password dictionary, and let  denote the number of bits of the biometric key 
. The advantage of  to break the semantic security of LMAAS-IoT is expressed as 
 
 
where 
, 
, , and  denote the number of Hash queries, the number of Send queries, the range space of the hash function , and the size of , respectively.

Proof

We use a similar proof technique as Wazid et al. (2020) and Chang and Le (2015). We define a sequence of games 
, where   [0,1,2,3]. Let 
 denote an event where  correctly guesses the bit  in 
. The games start with 
 which represent a real attack and finally end with 
. The details are given below.

: This game is modeled as a real attack by the adversary  against LMAAS-IoT in ROR model. At the beginning of 
, the bit  is chosen at random. By definition, we have: (1)

: This game models the adversary’s eavesdropping attacks by querying the query Execute(
, 
, 
). Then, the adversary requests Test() query to verify whether the session key 
 is a real or a random number. Assume  intercepts the messages 
  {
, 
, 
, 
, 
}, 
  {
, 
, 
, 
} and 
  {
, 
, 
, 
} during the login and authentication phases of LMAAS-IoT. However,  gains no more advantage in computing 
, as the deriving of 
 requires the secret credentials 
, 
 and 
.  has no knowledge about these credentials and is computationally hard for  to derive them. As a consequence, the eavesdropping attack is not beneficial to . Thus, the winning probability of  in 
 remains the same as in 
, and we have (2)

: In this game,  has access to the Send() and the Hash() oracles to model an active attack.  aims to fabricate legal messages 
 and 
 to deceive the honest participants in order to accept the fabricated ’s message.  needs the secret credentials 
, 
, 
, 
 and 
. However, these credentials are protected using a collision-resistance hash function . Furthermore, in LMAAS-IoT, the messages 
 and 
 are associated with the random numbers 
 and 
 and current timestamps 
 and 
. Thus  cannot find a collision in the hash values, which makes 
 equivalent to 
. Considering the birthday paradox we have (3)
 

: In this game,  has access to the CorruptSmartCard() and the CorruptIoTSensor() oracles to simulate the stolen smart card and IoT sensor captured attacks. Accordingly,  can get the information {
, 
, 
, 
, 
, 
, , , , , 
} from the lost/stolen smart card. Also  can get the information {
, 
, 
} from the corrupted IoT sensor. Since the password has low-entropy, the adversary might try the online dictionary attack with the obtained information from the lost/stolen smart card. However, the number of incorrect password inputs is limited by the system. Furthermore, in LMAAS-IoT, we employ fuzzy extractor to maintain user’s biometric information which makes  probability of guessing 
 approximately 
, where 
  
  (Odelu et al., 2015). Therefore, without knowing 
 and 
,  cannot derive the required secret credentials {
, 
, and 
} from {
, 
, and 
}, respectively. Thus, it is computationally infeasible to calculate the session key 
 by the adversary  using this game. Then, we have (4)
 

In the last game,  accessed all oracles and tried all possible ways to break the security of LMAAS-IoT without any success. The last resource for  is to ask Test() query and guess the bit . Since  has no knowledge of bit , 
 equals the probability of guessing the bit . Thus, we have (5)
 

Finally, from the Eqs. (1), (2) and (5) we have (6)
 
 

From the Eqs. (3), (4) and (5) we have (7)
 
 
From the Eqs. (6) and (7) we have (8)
 
 
 
From the Eqs. (6), (7) and (8) we have (9)
 
 
 
Finally, we obtain the following result in Eq. (10), which (10)
 
 

Therefore, we prove that the adversary  cannot calculate the session key 
 which was computed securely between the honest 
 and the 
. Further, despite the fact that the adversary  has access to CorruptSmartCard() and CorruptIoTSensor() oracles which model stolen smart card and IoT capture attacks respectively,  cannot break the security of LMAAS-IoT. Furthermore, we show that  has no feasible way to calculate 
’s secret biometric 
. Thus, the proposed scheme LMAAS-IoT is secure against the above mentioned attacks in the ROR security model. □

5.2. Proof of correctness with BAN-logic
In this section, we prove the correctness of LMAAS-IoT using BAN-logic (Burrows et al., 1989). We demonstrate that the communicating entities mutually authenticate each other, and both 
 and 
 can establish a fresh and trustworthy session key. The notations used in BAN proof are listed in Table 2.

5.2.1. BAN-logic rules
•
Rule (1): Message-meaning rule: 
 

•
Rule (2): Nonce-verification rule: 
 

•
Rule (3): Jurisdiction rule: 
 

•
Rule (4): Belief rule: 
 

•
Rule (5): Freshness-conjuncatenation rule: 
 

The exchange messages:

•
  {
, 
, 
, 
, 
}

•
  {
, 
, 
, 
}

•
  {
, 
, 
, 
}

The idealized form of the exchanged messages:


Table 2. Notations used in BAN proof.

Symbol	Explanation
 	The principal  believes formula 
The formula  is fresh
 	 has jurisdiction over 
 	 once said the statement 
 	 sees the statement 
 or  is one part of 
 is hashed with the key 
 is combined with 
Shared secrets between 
 and 
Shared secrets between 
 and 
Shared secrets between 
 and 
 
 	 and  use the shared secret key 
Session key only known by principals  and 
•
 
 
 
, where 
 denotes to the shared secret credentials between 
 and 
.

•
 
 
 
, where 
 denotes to the shared secret credentials between 
 and 
.

•
 
 
 
, 
, where 
 denotes to the shared secret credentials between 
 and 
.

5.2.2. Proof goals
•
Goal(1): 
 

•
Goal(2): 
 

5.2.3. Proof assumptions
•
: 

•
: 

•
: 

•
: 

•
: 

•
: 

•
: 
 
 

•
: 
 
 

•
: 
 
 

•
: 

•
: 

•
: 

•
: 

•
: 

5.2.4. Proof postulates
•
: From 
, we obtain, 

•
: From 
, rule (1), and 
, we obtain, 

•
: From 
, rule (2 and 5), 
, and 
, we obtain, 

•
: From 
, rule (3 and 4), and 
, we obtain, 

•
: From 
, we obtain, 

•
: From 
, rule (1), and 
, we obtain, 

•
: From 
, rule (2 and 5), 
, and 
, we obtain, 

•
: From 
, rule (3 and 4), and 
, we obtain, 

•
: From 
, we obtain, 

•
: From 
, rule (1), and 
, we obtain, 

•
: From 
, rule (2 and 5), 
, and 
, we obtain, 

•
: From 
, rule (3 and 4), and 
, we obtain, 

•
: From 
, 
, 
, and rule (3 and 4), we obtain, 
 

•
: From 
, 
, 
, 
, and rule (3 and 4), we obtain, 
 

5.3. Formal security verification using AVISPA tool
In this section, we briefly demonstrate the widely adopted AVISPA tool (Armando et al., 2005), which we use to verify the security of LMAAS-IoT against active attacks, like man-in-the-middle and replay attacks. AVISPA is a widely adopted model checker tool for semi-automated formal security analysis, which tests the security protocols and shows whether a protocol is safe or unsafe against well-known attacks. AVISPA supports the High-Level Protocol Specification Language (HLPSL) (Von Oheimb, 2005) to specify security protocols and their properties. Using HLPSL2IF translator (Armando et al., 2005), HLPSL specification of the protocols is translated into a lower-level description language called the intermediate format (IF). Then, IF is delivered to one of the four existing backends and produces the output format (OF), which contains the security analysis results. The backends are: (1) On-the-fly-Model-Checker (OFMA), (2) CL-based Attack Searcher (CL-AtSe), (3) SAT-based Model-Checker (SATMC), and (4) Tree-Automata-based Protocol Analyzer (TA4SP).

We simulate LMAAS-IoT by AVISPA to evaluate its security. As a role based oriented language, we use HLPSL to implement the specification for:

•
basic roles: 
, , 
 and 
 as illustrated in Figs. 10, 11, 12, and 13.

•
composition roles: session, environment and goal as illustrated in Fig. 14.

We analyze LMAAS-IoT using four secrecy goals namely: sp1, sp2, sp3 and sp4, and six authentication goals namely: authentication-on ui-gwl-t1, ui-gwl-r1, gwl-sj-t2, gwl-sj-r2, sj-ui-t3 and sj-ui-r3 as shown in Fig. 14.

We select the widely accepted OFMC and CL-AtSe backends to verify the security of LMAAS-IoT, and we discard the SATMC and TA4SP backends as they do not support bitwise XOR operations. In this simulation, the intruder  is modeled in Dolev–Yao (DY) threat model as mentioned in Section 2.2. Accordingly,  has relevant knowledge about the communications between authentic entities. The simulation results shown in Fig. 15 formally prove the security of LMAAS-IoT. In Fig. 15, the “SAFE” status given by AVISPA simulation proves the robustness of LMAAS-IoT against passive as well as active attacks (Sammoud et al., 2020).

5.4. Informal security analysis
In this section we expose LMAAS-IoT to various well-known attacks in order to prove the robustness of the proposed scheme through informal analysis.

5.4.1. Replay attack
An attacker may eavesdrop the messages {
} exchanged between the valid entities 
, 
 and 
 during the login and authentication phases. However, the attacker cannot replay any message as each message is protected by the timestamp and the attacker cannot pass the acceptable delay interval . Thus, LMAAS-IoT is secure against replay attacks.

5.4.2. Man-in-the-middle attack
An attacker may eavesdrop the login message 
  {
, 
, 
, 
, 
} and tries to alter 
 into another valid login message 
. An attacker can generate 
 and 
. Since the attacker does not know the secret information {
}, the attacker cannot compute 
, 
, 
 
, 
. In the same context, the attacker cannot alter 
  {
, 
, 
, 
}, and 
  {
, 
, 
, 
}. Hence, LMAAS-IoT is secure against man-in-the-middle-attacks.

5.4.3. Impersonation attacks
An attacker may perform user, gateway, and sensor impersonation attacks as follows:

1.
User impersonation attack: Assume an attacker attempts to act as a legitimate 
. In order to execute this attack, the attacker needs to generate a valid login request 
  {
, 
, 
, 
, 
} on behalf of the original 
. Despite the fact that the attacker can generate 
 and 
, the attacker cannot compute valid login request without having 
’s secret information 
, and 
. Consequently, the attacker cannot generate a valid login request. Hence, LMAAS-IoT is secure against user impersonation attacks.

2.
Gateway impersonation attack: Assume an attacker attempts to execute this attack. The attacker can generate 
, 
 and 
. However, the attacker cannot compute and send the message 
  {
, 
, 
, 
} on behalf of 
 without having the secret information 
, and 
. Consequently, the attacker cannot generate valid 
. Hence, LMAAS-IoT is secure against gateway impersonation attacks.

3.
Sensor impersonation attack: Assume an attacker attempts to execute this attack. The attacker can generate 
, 
 and 
. However, the attacker cannot compute and send the message 
  {
, 
, 
, 
} on behalf of 
 without having the secret information 
, and 
. Consequently, the attacker cannot generate valid 
. Hence, LMAAS-IoT is secure against sensor impersonation attacks.

5.4.4. Anonymity and untraceability
Assume that an attacker can observe all communication messages 
, 
, and 
 exchanged between the valid entities 
, 
, and 
. The attacker aims to determine and trace 
, 
, and 
 during the login and the authentication and key exchange phases. In LMAAS-IoT, we employ the timestamps 
, 
 and 
, and the random nonces 
, 
 and 
 in communication messages which result in distinct messages in each session. Further, we employ the collision-resistance hash function to protect 
 and 
. Accordingly, the attacker cannot trace 
, 
 and 
. Hence, LMAAS-IoT assures anonymity and untraceability attributes.

5.4.5. Password alter attack
Assume that an attacker aims to alter 
’s password in lost/stolen smart card 
. The attacker can exploit stored information {
, 
, 
, 
, 
, 
, , , , , 
} from 
’s memory via a power analysis attack (Messerges et al., 2002). However, the attacker needs to produce valid 
, 
, and 
 in order to alter 
’s password 
 to attacker’s password 
. Since the attacker has no knowledge about the valid 
, 
, and 
, the attacker will fail to pass the verification process. Consequently, the attacker cannot alter 
’s password. Hence, LMAAS-IoT is secure against password alter attacks.

5.4.6. Stolen smart card attack
Assume that an attacker obtained the stored information {
, 
, 
, 
, 
, 
, , , , , 
} from stolen/lost 
’s memory via a power analysis attack (Messerges et al., 2002). In order to guess 
’s secret information 
 and 
, the attacker needs to know  and 
. Since the attacker has no knowledge about  and 
, it is hard to make a correct guess using only the extracted information {
, 
, 
, 
, 
, 
, , , , , 
}. Hence, LMAAS-IoT is secure against stolen smart card attacks.

5.4.7. Desynchronization attack
Assume that an attacker aims to break the synchronization between 
 and 
 to prevent 
 from login and authenticate him/her self to 
. The attacker can observe 
’s login request and record the value 
. Then, the attacker attempts to alter 
 by generating a fake random nonce 
 and sending attacker’s login request 
  {
, 
, 
, 
, 
}. However, in LMAAS-IoT, only legitimate users can generate a valid login request as discussed in Section 5.4.3. Consequently, as 
 value is updated only after a successful login process which is only available for genuine users, the attacker cannot break the synchronization as shown in Section 4.4. Hence, LMAAS-IoT is secure against desynchronization attacks.

5.4.8. Denial-of-service (DoS) attack
Assume that an attacker aims to execute a DoS attack by sending repeated login request on behalf of 
. However, the attacker cannot generate valid login requests as discussed in Section 5.4.3. Further, the attacker gains no benefit from replaying the recorded 
’s login request as it is protected by the timestamp 
 as discussed in Section 5.4.1. Furthermore, 
 will reject any repeated login request from the same 
 in a preset period of time to prevent malicious and undesired 
’s login conduct. Hence, LMAAS-IoT is secure against Denial-of-service attacks.

5.4.9. Securing session Key and forward secrecy
Assume that an attacker eavesdrop the messages 
, 
, and 
 exchanged among system entities during the login and the authentication and key exchange phases. The attacker aims to compromise the session key 
 to reveal previous communications. However, it is computationally infeasible for the attacker to compute 
 without knowing {
, 
, 
, 
, 
, and 
}. Hence, LMAAS-IoT obviously assures session key security and forward secrecy.

6. Performance analysis and comparisons
In this section, we produce a comparative study between LMAAS-IoT and other related schemes tailored for IoT environments such as the ones introduced by Farash et al., 2016, Challa et al., 2017, Wazid et al., 2020 and Wu et al. (2020). In addition, we compare LMAAS-IoT with the most recent authentication scheme proposed by Chaudhry et al. (2021). The comparison criteria are: (1) communication cost, (2) computation cost, and (3) security features.

6.1. Communication cost comparison
To compare the communication overhead of LMAAS-IoT and other related schemes, we assume the following sizes in bits:

•
All identities and dynamic index are 160 bits.

•
The output of hash function is 160 bits (if we use secure hash standard SHA-1 (Standard, 1995)).

•
The random nonce is 160 bits.

•
The timestamp is 32 bits.

•
As the 160-bit elliptic curve cryptography (ECC) gives the equivalent security of 1024-bit RSA cryptosystem (Vanstone, 1992), an elliptic curve point 
 requires (160  160)  320 bits.

Basically, the login and authentication phases are considered for the purpose of this comparison. In LMAAS-IoT, the three considered messages are 
  {
, 
, 
, 
, 
}, 
  {
, 
, 
, 
} and 
  {
, 
, 
, 
}, where 
  (160  160  160  160  32)  672 bits, 
  (160  160  160  32)  512 bits, and 
  (160  160  160  32)  512 bits. Hence, the total bits of the exchanged messages is (672  512  512)  1696 bits. Table 3 shows the comparison results of the communication costs of LMAAS-IoT and other related schemes. We observe that our scheme performs better than Farash et al., 2016, Challa et al., 2017, Wu et al., 2020 and Chaudhry et al. (2021). In this context, LMAAS-IoT has similar communication overhead compared to Wazid et al. (2020). However, the scheme in Wazid et al. (2020) suffers from several weaknesses and incorrectness, as stated by Alsahlani and Popa (2020) and Chaudhry et al. (2021). In addition, LMAAS-IoT provides more security features as illustrated in Table 4.

6.2. Computation cost comparison
In this section, we produce a computation comparison between LMAAS-IoT and other related schemes. The following notations 
, 
 and 
 respectively represent the time consumed by an ECC point multiplication, a fuzzy extractor or equivalent biometric function, and a one-way hash function. Using the approximate computation time reported in Kilinc and Yanik (2014) (
  2.226 ms, 
  0.0023 ms) and assuming (
  
  2.226 ms), we have the following comparisons.

6.2.1. Login and authentication cost comparison
During the login and the authentication phases of LMAAS-IoT, the total time cost is (1
  30
  2.2950 ms). We observe that LMAAS-IoT performs better than Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020, and  Chaudhry et al. (2021). However, Farash et al. (2016) has lower cost because it does not employ multi-factor security, i.e., no fuzzy extractor or other equivalent biometric function. Thus, LMAAS-IoT provides the best computation cost among multi-factor based schemes. We summarize the computation costs comparison in Table 3.


Table 3. Performance comparison.

Scheme	Computation cost (ms)	Exchanged messages	Total bits
Farash et al. (2016)	32
 = 0.0736	4	2752
Challa et al. (2017)	1
+12
+14
 = 33.4176	3	2528
Wazid et al. (2020)	1
+34
 = 2.3042	3	1696
Wu et al. (2020)	1
+32
 = 2.2996	4	2528
Chaudhry et al. (2021)	1
+39
 = 2.3157	4	2560
Ours	1
+30
 = 2.2950	3	1696

Table 4. Security features comparison.

Feature	Farash et al. (2016)	Challa et al. (2017)	Wazid et al. (2020)	Wu et al. (2020)	Chaudhry et al. (2021)	Ours
×	✓	✓	✓	✓	✓
×	✓	✓	✓	✓	✓
×	✓	✓	✓	✓	✓
×	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
×	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	✓	✓	✓
✓	✓	✓	×	✓	✓
✓	✓	✓	✓	✓	✓
×	✓	✓	×	✓	✓
✓	✓	✓	✓	×	✓
×	✓	✓	✓	✓	✓
×	✓	✓	✓	✓	✓
×	×	×	×	×	✓
×	×	×	×	×	✓
×	×	×	×	×	✓
Note: 
: user anonymity property; 
: privileged-insider attack; 
: off-line password guessing attack; 
: stolen smart card/mobile device attack; 
: denial-of-service attack; 
: user impersonation attack; 
: replay attack; 
: man-in-the middle attack; 
: mutual authentication; 
: session key agreement; 
: untraceability property; 
: resilience against sensor node/sensing device physical capture attack; 
: server independent password update phase; 
: sensor node/sensing device impersonation attack; 
: support biometric update phase; 
: provide formal security analysis using automated model checker tool; 
: smart card revocation phase; 
: known session-specific temporary information attack; 
: single registration in large-scale systems; 
: authorization mechanism; 
: authorization update phase. ×: insecure against a specific attack or does not support a particular feature; ✓: secure against a specific attack or supports a particular feature.

6.3. Security features comparison
In this section, we present a comparison of the security features between LMAAS-IoT and Farash et al., 2016, Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020 and Chaudhry et al. (2021). The comparison results are illustrated in Table 4. This table shows that LMAAS-IoT performs better than the other related schemes and achieves more security features. It is worth mentioning that Wazid et al. (2020) performs better than (Challa et al., 2017) as the scheme of Wazid et al. (2020) requires lower communication overhead. However, none of the related schemes provide an authorization mechanism. In 
 and 
, we show that only LMAAS-IoT provides both an authorization mechanism and an authorization update phase alongside with authentication, which makes LMAAS-IoT more suitable for practical use. Further, in 
 we show that LMAAS-IoT provides single registration technique, which has significant benefits in large-scale systems as briefly discussed in Section 7.1.1.

7. Network analysis
In this section, we demonstrate the impact of deploying LMAAS-IoT on the network parameters. We examine the average running time in different scenarios. Also, we measure the network performance in terms of throughput and end-to-end delay using the widely accepted network simulator NS-3.31 (nsnam.org, 2020).

7.1. Running time comparison
To measure running time of LMAAS-IoT and related schemes, we consider the impact of various user registration procedures in the scenario of scalable IoT systems. Moreover, we consider the running time of the login and the authentication phases with different number of IoT sensors.

7.1.1. Registration running time
In brief, we demonstrate the comparison circumstances. A user is required to register at the IoT system to have legal access. The registration process will be handled either by a trusted third party (Wazid et al., 2020, Wu et al., 2020, Chaudhry et al., 2021), or by the gateway node (Challa et al., 2017). It is worth mentioning that the majority of existing authentication schemes allows the user to access only IoT sensors attached to a certain gateway node at which the user previously registered. This means, that in order to access an IoT sensor attached to other existing or newly added gateway node, the user is required to perform a new corresponding registration. However, it is inadequate for the same user to have multiple registrations within the same system. Especially, IoT systems are highly scalable in terms of deploying new devices. In this context, LMAAS-IoT provides an efficient registration phase, i.e., once the user is registered at the system then no further registration is required to access future entities. In this section, we produce user-side registration cost comparison, using the scenario of a user that intends to register at a large-scale system consisting of several gateway nodes and their attached IoT sensors. In this comparison we select the schemes with multi-factor security (Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020, Chaudhry et al., 2021) and hence we exclude (Farash et al., 2016) which does not provide the user’s biometric security. Table 5 summarizes the comparison results among LMAAS-IoT and the other schemes and shows that LMAAS-IoT provides the best result in the scenario of scalable and large-scale IoT systems.


Table 5. User-side registration cost comparison.

Number of gateway nodes
Scheme	1	5	10	15
Challa et al. (2017)	4.4612	22.306	44.612	66.918
Wazid et al. (2020)	2.2398	11.199	22.398	33.597
Wu et al. (2020)	2.2352	11.176	22.352	33.528
Chaudhry et al. (2021)	2.2421	11.2105	22.421	33.6315
Ours	2.2421	2.2421	2.2421	2.2421
Note: Time in (ms).

7.1.2. Login & authentication running time
In this section, we examine the running time of login and authentication phases of LMAAS-IoT and related schemes. We assume a system with ten users and different number of IoT sensors e.g., case (1) ten IoT sensors; case (2) twenty IoT sensors; case (3) thirty IoT sensors. The comparison results illustrated in Table 6 show that (Challa et al., 2017) has the highest running time. We observe that LMAAS-IoT has the lowest running time in all three cases.


Table 6. Login & authentication running comparison.

Scheme	Case (1)	Case (2)	Case (3)
Challa et al. (2017)	334.176 ms	668.352 ms	1002.528 ms
Wazid et al. (2020)	23.042 ms	46.084 ms	69.126 ms
Wu et al. (2020)	22.996 ms	45.992 ms	68.988 ms
Chaudhry et al. (2021)	23.157 ms	46.316 ms	69.471 ms
Ours	22.950 ms	45.900 ms	68.850 ms
7.2. Simulation using NS-3.31
In this section we simulate LMAAS-IoT and other schemes (Farash et al., 2016, Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020) using NS-3.31 network simulator (nsnam.org, 2020), on Ubuntu 20.04 LTS platform. The simulation aims to measure the network performance in terms of throughput (in bps) and end-to-end delay (in milliseconds) to manifest the impact of the schemes. For the simulation purpose, we assume the parameters as illustrated in Table 7. Further, the packets (messages) exchanged between the network entities are illustrated in Table 8.


Table 7. Simulation parameters.

Parameters	Description
Platform	Ubuntu 20.04 LTS
Simulator used	NS-3.31
Number of 
1
Number of 
10
Number of 
10
Duration of simulation	1800 s

Table 8. Different messages exchanged during the simulation.

Exchanged	Farash et al. (2016)	Challa et al. (2017)	Wazid et al. (2020)	Wu et al. (2020)	Chaudhry et al. (2021)	Ours
messages						
  
–	992	672	992	672	672
  
512	–	–	–	–	–
  
672	1024	512	512	512	512
  
–	–	–	672	864	–
  
1024	–	–	352	512	–
  
544	512	512	–	–	512
Note: message size in bit.

7.2.1. Impact on throughput
Throughput is one of the important network parameters which measure the rate of transmitted bits in a period of time, generally bits per second. Throughput is calculated via the following formula:  , where  is the number of received packets,    is the size of the packet, and  is the total time required. The exchanged packets and their sizes are illustrated in Table 8. As shown in Fig. 16, the throughput of the schemes of Farash et al., 2016, Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020 and Chaudhry et al. (2021) and LMAAS-IoT are 20.2667 bps, 17.7777 bps, 13.1556 bps, 19.0222 bps, 19.2 bps and 13.1556 bps, respectively. The throughput of LMAAS-IoT is the lowest compared to the schemes of  Farash et al., 2016, Challa et al., 2017, Wu et al., 2020 and Chaudhry et al. (2021). Also, LMAAS-IoT produces a similar throughput as in Wazid et al. (2020) since they have equal size packets within the three exchange messages of the scheme. Nevertheless, LMAAS-IoT produces more security features as illustrated in Table 4. It is worth mentioning that less throughput means less communication overhead which is more desirable in practice.

7.2.2. Impact on end-to-end delay
The end-to-end delay measures the average one-way delay time taken for a packet to be received at receiver from a sender. The end-to-end delay is computed using the formula 
, where 
 and 
 denote the receiving and sending time of the packet , respectively, and 
 denotes the total number of packets. The end-to-end delay comparison results are 7.1360 ms, 6.6810 ms, 6.5860 ms, 6.6015 ms, 6.6212 ms and 6.5860 ms for the schemes of Farash et al., 2016, Challa et al., 2017, Wazid et al., 2020, Wu et al., 2020 and Chaudhry et al. (2021) and LMAAS-IoT, respectively. Fig. 17 shows that LMAAS-IoT has a comparable result as it uses small size authentication packets (messages).

8. Conclusion
In this paper, we have proposed a new lightweight authentication and authorization scheme for real-time data access in IoT cloud-based environment, called LMAAS-IoT. The proposed scheme is designed especially for distributed and high scalable systems to produce a secure and efficient solution that meets modern demands. The scenario of managing coronavirus disease and similar problems is considered in our proposed scheme. We perform rigorous formal security analysis using ROR model, BAN-logic, and AVISPA tool. Besides, we provide an informal security analysis. Thus, we prove the robustness and the correctness of LMAAS-IoT against several well-known attacks. Moreover, LMAAS-IoT is lightweight in terms of computation and communication cost, using only XOR operations and cryptographic hash functions. Furthermore, LMAAS-IoT, achieves mutual authentication alongside with an authorization mechanism and a session key agreement. Also, LMAAS-IoT provides multi-factor security. The performance analysis and security comparisons have shown that LMAAS-IoT provides the best performance and security as compared to some of the latest schemes. To conclude, LMAAS-IoT is secure, efficient, and more practical compared to the existing related schemes. In the future, we plan to investigate IoT based blockchain technology to design promising security solutions.