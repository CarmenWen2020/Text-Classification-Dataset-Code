With the advancement in communication techniques and sensor technologies, mobile crowdsensing (MCS)—one of the most successful applications of crowdsourcing—has recently become a powerful tool to solve complex and scalable sensing problems. Generally, MCS is a location-aware crowdsourcing technique in which participating workers must physically move to a specific location to complete tasks. Hence, workers must disclose information regarding their current true location to service providers. However, location information may contain sensitive data; therefore, most workers are not comfortable—or are even reluctant—to provide their exact location information to service providers because of privacy concerns. This is perceived as the most significant challenge faced in MCS. Thus, guaranteeing location privacy is essential for attracting more participants to actively participate in MCS. Accordingly, extensive studies have been conducted in the past few years to protect the location privacy of participating workers in MCS. In this study, we comprehensively survey the state-of-the-art mechanisms for protecting the location privacy of workers in MCS. We divide the location protection mechanisms into three categories depending on the nature of their algorithm and compare them from the viewpoints of architecture, privacy, computational overhead, and utility. Moreover, we discuss certain promising future research directions to spur further research in this area.

Previous
Next 
Keywords
Mobile crowdsensing

Location privacy

Privacy

Security

1. Introduction
Over the last decade, crowdsourcing has emerged as a promising approach for efficiently and effectively collecting and processing large amounts of data. Crowdsourcing outsources a complex problem, solving which by a single or a small group of experts is usually difficult, to a large number of participants (i.e., workers) who are not experts in that problem (Yuen et al., 2011, Chittilappilly et al., 2016). For example, to perform city-wide environmental monitoring (e.g. temperature, carbon-dioxide levels, water levels in creeks, and air pollution) that is hard to be completed by a small group of experts, a requester can ask participants to measure various environmental conditions using their mobile devices via a crowdsourcing platform.

One of the most successful categories of crowdsourcing is mobile crowdsensing (MCS) in which participants with mobile devices with sensing and computing capabilities contribute and share data sensed from their mobile devices to collectively measure, monitor, or analyze phenomena of common interest (Jaimes et al., 2015, Liu et al., 2016, Sun et al., 2019, Sun and Ma, 2014). Two technologies are crucial to the success of MCS. The first is the development of communication techniques, including 5G cellular networks and Wi-Fi, which can provide scalable and enriched network connectivity to end users. With the advancement of communication technologies, participants in MCS can transfer data sensed from their mobile devices to the server without time and spatial restrictions. The second is the development of various sensor technologies that mobile devices, such as smartphones, smartwatches and tablets, can be equipped with. For example, modern smartphones are equipped with sensors that can measure various environmental conditions such as temperature, relative humidity, ultraviolet radiation, and electromagnetic radiation (Hossain et al., 2015, Wang et al., 2016a). With the advancement of these two technologies, MCS has recently become a powerful tool to solve complex and scalable sensing problems.

Generally, MCS is a location-aware crowdsourcing technique (i.e., spatial crowdsourcing) in which participants must physically travel to the relevant location to complete tasks. A task in MCS can be any sensing task which is related to a particular location during a specific time period. Examples of MCS tasks include monitoring air pollution and noise (Liu et al., 2019c, Qin and Zhu, 2016), updating regarding natural disasters such as earthquakes, hurricanes, and flash floods (Kucuk et al., 2020), and reporting traffic flows and accidents (Shao et al., 2015, Wang et al., 2017d). MCS provides a cost-effective solution for collecting and aggregating sensed data. For example, consider a scenario for which a requester, such as an intelligent transportation system (ITS), is interested in generating a real time traffic congestion map. Traditionally, traffic information is first monitored and collected through transportation infrastructure installed on roads, equipped with various sensing devices having communication capabilities, and then is reported to a centralized ITS (Hoh et al., 2006, Datondji et al., 2016). However, this solution can be costly because of the need to install and maintain various transportation infrastructures on the road, which incurs a significant cost. However, with the introduction of vehicles with their own sensing and communication capabilities, drivers on the road can collect traffic data at the task location by using applications which exploit sensing devices of vehicles to obtain traffic information, and forward the collected data to the ITS, which in turn aggregates all the traffic information reported from participating vehicle drivers and generates a traffic congestion map (Wang et al., 2016c, Wu et al., 2013). This is much more cost effective than the previous solution because it does not need transportation infrastructures which entail high installation and maintenance costs.


Table 1. Comparison of previous survey papers.

Ref.	Year	Major contribution	Discussed
location-privacy issues
Jaimes et al. (2015)	2015	A detailed study on incentive mechanisms in MCS	✕
Liu et al. (2016)	2017	An overview about the strategies to reduce the resource cost and achieve high QoS in MCS	✕
Zhang et al. (2016c)	2016	A detailed survey over various incentive mechanisms for MCS	✕
Sauerwein et al. (2016)	2016	A systematic literature review for investigating crowdsourcing-based research	✕
Restuccia et al. (2017)	2017	In-depth analysis of the limitations and weaknesses of existing works on the topic of QoI in MCS	✕
Liu et al. (2019a)	2019	A comprehensive survey on the key techniques oriented to the data flow in MCS	✓ (Partially discussed)
Zhao and Han (2016)	2016	A brief discussion on unique characteristics of spatial crowdsourcing	✕
Gummidi et al. (2019)	2019	A comprehensive survey that provides an overview of the different problems in spatial crowdsourcing	✓ (Partially discussed)
Tong et al. (2020)	2020	A comprehensive and systematic review of the state-of-the-art research on spatial crowdsourcing	✓ (Partially discussed)
Christin et al. (2011)	2011	An overview about the mechanisms that protect the privacy of the participants in MCS	✓ (Partially discussed)
He et al. (2015)	2015	A brief discussion on user privacy and data trustworthiness in MCS	✕
Mousa et al. (2015)	2015	A detailed study concentrated on trust management, presenting comparisons of existing trust systems	✕
Pournajaf et al. (2016)	2016	A discussion about methods of preserving the privacy of participants during task management in MCS	✓ (Partially discussed)
Vergara-Laurens et al. (2017)	2017	A detailed survey on privacy-preserving mechanisms for the tasking process and the report process in MCS	✓ (Partially discussed)
Feng et al. (2018)	2018	A detailed study on security, privacy and trust managements in MCS	✕
Alharthi et al. (2018)	2018	A brief discussion on privacy attacks in spatial crowdsourcing	✕
Khan et al. (2019)	2019	A detailed discussion about privacy-preserving task management and assignment in MCS	✕
This work	A comprehensive survey on the state-of-the-art solutions for protecting the location privacy in MCS, providing an in-depth analysis and discussion of characterization of location privacy-preserving schemes
Similar to any other new innovative technique, MCS brings new problems. Because participants are required to physically move to a specific location to complete tasks, the MCS server assigns tasks to participants in a way that the traveling distance that each participant must move to complete them is minimized. For that purpose, participants must disclose their current true location information to the MCS server, which may lead to serious privacy issues. The location information of individuals usually contains information about their daily life, and thus, by tracking them, sensitive information, such as home and workplace locations, hospital visits, political affiliation, and religion, can be easily obtained (Ghinita, 2013). Most participants are not comfortable—or are even reluctant—to provide their exact location information to the MCS server because of privacy concerns, which is perceived as the most significant challenge faced by MCS. Thus, guaranteeing location privacy is essential to attract more participants to actively participate in MCS. Accordingly, in literature on MCS, in the past few years, numerous studies have focused on protecting the location privacy of participants. In this study, we comprehensively survey the state-of-the-art mechanisms for protecting location privacy of participants in MCS.

1.1. Contributions
Because of the growing popularity of MCS, numerous comprehensive surveys tracking its progress have been conducted over the years (Jaimes et al., 2015, Liu et al., 2016, Zhang et al., 2016c, Sauerwein et al., 2016, Restuccia et al., 2017, Liu et al., 2019a). Survey papers have also focused on spatial crowdsourcing (Zhao and Han, 2016, Gummidi et al., 2019, Tong et al., 2020). Additionally, several survey articles concentrate on privacy and security issues in various aspects of MCS, including incentive mechanisms, task management, and data analysis (Christin et al., 2011, He et al., 2015, Mousa et al., 2015, Pournajaf et al., 2016, Vergara-Laurens et al., 2017, Feng et al., 2018, Alharthi et al., 2018, Khan et al., 2019). Although these survey papers discuss the location-privacy issues of participants in the MCS context, they only give a brief (and incomprehensive) summary on the related topic. Different from existing survey papers, this work offers a comprehensive overview on the state-of-the-art solutions for protecting the location privacy of participants in the context of MCS (Table 1). The contributions of this paper can be briefly summarized as follows:

•
We present an overview of MCS, describe the privacy issues arising from the use of location data in MCS, and highlight the important aspects to evaluate and compare location-privacy protection mechanisms designed for MCS.

•
We survey and discuss the existing works for preserving location privacy in MCS. Especially, we categorize the existing studies into three categories, spatial cloaking-based approaches, DP-based approaches, and encryption-based approaches, and compare their characteristics based on important aspects of MCS.

•
We present the current status of MCS-based applications that have been developed in industry to solve diverse real-world sensing problems.

•
To spur further research in this area, we highlight certain promising future research directions that require further investigation.

1.2. Survey methodology
Preferred reporting items for systematic reviews and meta-analyzes (PRISMA) is commonly used to perform systematic reviews (Liberati et al., 2009). PRISMA defines four sequential steps, identification, screening, eligibility, and inclusion, to search for related articles systematically. In this survey, a similar process was used for paper selection.

1.
We first identified related articles through keyword searches in a set of major databases, such as Science Direct, IEEE Xplore, Springer Link, ACM Digital Library, and Google Scholar. These databases were chosen because they are sources of relevant articles within the area covered in this survey. One of the representative keyword combinations used for conducting database searches is as follows: ((“mobile crowdsensing” OR “spatial crowdsourcing” OR “participatory sensing”) AND (“privacy” OR “security”)).

2.
Subsequently, we filtered out articles whose scope did not include “location privacy” by exploring the title and abstract of each article identified in the previous step.

3.
We then determined whether the articles that had not been excluded in the previous step should be included in the survey by reading them completely or partially.

After performing the aforementioned steps, we obtained a final list of related articles. Furthermore, we carefully studied research papers that provide a survey on this area to cover related articles comprehensively.

1.3. Paper organization
The remainder of this paper is organized as follows: Section 2 first presents data privacy protection models which have been extensively studied in the database community and then summarizes various approaches to protect location privacy in the context of location-based services. In Section 3, we provide a brief overview of MCS and introduce the important aspects to evaluate and compare location-privacy protection mechanisms designed for MCS. In Section 4, we survey the existing literature for preserving location privacy in the context of MCS. Section 5 provides a summary of the current industry status of MCS-based applications. Then, Section 6 highlights future research directions that require further investigation. Section 7 concludes this paper.

2. Background
2.1. Data privacy model
In research literature on data management, extensive studies have been conducted in the area of data privacy protection. The most popular privacy models for protecting individual data are anonymization and differential privacy (DP). In this subsection, we briefly describe both privacy models.

2.1.1. Anonymization
The basic concept of anonymization-based approaches is to transform original data into a more generalized form in which individual data cannot be uniquely identified. The most popular anonymization algorithm, -anonymity, is introduced in Sweeney (2002). The -anonymity algorithm guarantees that, for each record, there are at least  other records included in the released data that have the same values for a set of quasi-identifier attributes, thereby ensuring that every record in the released data is indistinguishable from at least  others, despite a linkage attack (Sweeney, 2002, LeFevre et al., 2005). Here, quasi-identifier attributes correspond to special attributes that can be linked with external data to uniquely identify individual records in the released data.

Each record in a dataset is generalized into an indistinguishable group (i.e., the equivalent class) by replacing the specific values of the quasi-identifier attributes with more general values. For example, Fig. 1 shows the original table and 2-anonymized table. This example assumes that the quasi-identifiers correspond to “Gender” and “Age”. As can be seen in the 2-anonymized table, there are two equivalence classes (equivalence class consisting of records 1, 2, 3, and 4, and equivalence class consisting of records 5 and 6), and thus each record is indistinguishable from other records in the same class. Usually, the -anonymity model relies on a generalization method to generate equivalence classes.

Besides -anonymity, many privacy models have been introduced in the literature. For example, -diversity requires that each equivalence class, which corresponds to the data group having the same values for the specific attributes in the -anonymity, has at least  well represented values of a sensitive attribute (Machanavajjhala et al., 2007). -closeness requires that the distribution of a sensitive attribute in each equivalence class is similar to the distribution of the entire table (Li et al., 2007). A utility-preserving anonymization method, which aims to preserve the utility of anonymized data by inserting counterfeit record and creating catalog of the counterfeit records in the process of data anonymization, was also proposed (Lee et al., 2017). Although such methods differ in the way in which the original data are transformed into another format, they are all based on the same principle, i.e., individuals cannot be uniquely identified in the anonymized data.

2.1.2. Differential privacy
Recently, DP has emerged as a de facto standard for privacy preserving data computation. DP is based on a formal mathematical definition that provides a probabilistic privacy guarantee against attackers with arbitrary background knowledge (Dwork, 2006, Dwork et al., 2006). DP assumes the existence of a trusted server which is located between data owners and data users.

Definition 1

-DP
A randomized algorithm  satisfies -DP, if and only if for (1) any two neighboring databases, 
 and 
, where 
 can be obtained from 
 by adding or deleting exactly one tuple (or vice versa), and (2) any output  of , the following is satisfied: 

The above definition implies that, given any output of , an adversary who has arbitrary background knowledge cannot distinguish with high confidence (which is controlled by ) if the input of  is 
 or 
. Here, the parameter  is a privacy budget which controls the level of privacy. That is, smaller (larger) values of  ensure a stronger (weaker) privacy guarantee but introduce larger (smaller) noise to the true result.

Definition 2 Global Sensitivity

Given any two neighboring datasets 
 or 
, the global sensitivity of a query  is defined as: 
 

Global sensitivity denotes the maximum difference in the query result caused by one record difference between any two neighboring datasets, 
 and 
. For instance, the global sensitivity of count query is one because a particular record may or may not satisfy the query predicate.

The common method to implement DP in real-world application scenarios is either the Laplace mechanism (Dwork, 2006, Dwork et al., 2006) or the exponential mechanism (McSherry, 2009). The Laplace mechanism is used for the case of numerical results. With the Laplace mechanism, -DP is achieved by drawing a random noise from the Laplace distribution with mean  and scale 
 
 and adding it to a true result such as 
 
On the contrary, the exponential mechanism is used for the case of non-numerical result to which it is impossible to apply the Laplace mechanism. The first phase of the exponential mechanism is to assign a score to each possible result such that a result with a higher score indicates that it is closer to the true result. In the next phase, this mechanism randomly selects a result from the possible result set such that the higher the score, the more appeals the result.

With its strong privacy guarantees, DP has been used in diverse areas, such as the collection, analysis, and release of sensitive private data. Furthermore, several variants of DP have been proposed in the literature, such as distributed differential privacy (Goryczka and Xiong, 2017), local differential privacy (Erlingsson et al., 2014, Bassily and Smith, 2015, Wang et al., 2017a), etc.

2.2. Protecting location privacy in location-based services
With the widespread adoption of mobile devices with their own communication capabilities, various services adjusted to the location of a user are becoming increasingly prevalent. These services, which is called LBS (location-based services), are able to provide users with various convenience services. However, in order for users to receive various services from LBSs, they need to disclose the location information to the service providers, which leads to privacy concerns. Thus, several privacy-preserving techniques have been proposed to mitigate location privacy threats when using LBSs. In this subsection, we briefly summarize various approaches to protect location privacy in the context of LBSs.

2.2.1. Anonymization technique
Spatial cloaking (Gruteser and Grunwald, 2003) is one of the most popular anonymization-based techniques. In spatial cloaking, users, who want to receive a service adjusted to their current locations, first send the exact location to the trusted server. Then, the trusted server computes a broad region termed as the cloaking area in which the number of users is greater than or equal to , thereby achieving -anonymity. After computing the cloaking area, the trusted server reports it to the LBS server, instead of reporting the exact location.

The mix-zone approach is an effective technique for preventing continuous exposure of location information. These approaches break the continuity of location exposure by establishing a specific area, called a mix-zone, where an adversary cannot trace users’ movements (Beresford and Stajano, 2003). The -anonymity is achieved by enforcing that inside mix-zones at least  users change pseudonyms together such that the mapping between old and new pseudonyms of users are not revealed.

The concept of this anonymization technique has been successfully applied to location data. However, it is well known that anonymization-based approaches usually fail to guarantee adequate levels of privacy (Ohm, 2010).

2.2.2. Dummy location technique
In this scheme, a user dispatches a service request along with multiple location points instead of a single one to an LBS (Kido et al., 2007, You et al., 2007). For this purpose, the user first needs to generate a set of fake locations that are different from their true location, but are located within a close distance. The basic idea is that, among the set of answers provided by the LBS, one correct answer exists for the user’s actual location. Furthermore, the LBS, which receives multiple location points, is unable to exactly determine the user’s position. The fake location points are randomly generated by the user’s mobile device; therefore, this technique does not require a trusted server.

2.2.3. Obfuscation technique
Most of the solutions in this category work either by deliberately reducing the precision of the location information or adding carefully designed random noise to the true location (Primault et al., 2018, Liu et al., 2019b). For example, Micinski et al. (2013) study the effect of coarsening the location information sent to the app. Gutscher (2006) propose an approach to protect location privacy by obfuscating the location coordinates by using coordinate transformation. The challenge in perturbation-based techniques is to achieve a tradeoff between the level of privacy and data utility. More specifically, a large perturbation to the original data enforces a stronger privacy guarantee; however, it introduces a larger loss in accuracy.

The DP-based methods belong to this category. GeoInd (Geo-indistinguishability) extends DP with a distance metric to provide a privacy-preserving mechanism for location data (Andres et al., 2013). The basic idea behind GeoInd is to add random noise to the user’s actual location in such a manner that an adversary, who has arbitrary background knowledge, cannot infer the user’s location with high confidence.

2.2.4. Encryption-based technique
Solutions in this category rely on encryption schemes to protect user locations (Mascetti et al., 2011, Popa et al., 2011, Narayanan et al., 2011); therefore, they can achieve the highest level of privacy guarantee. For example, in Mascetti et al. (2011), which proposed a method for proximity notifications of nearby friends without exposing the current location to the LBS server, each user reported their encrypted current location to the LBS server. Consequently, the user’s true location is not revealed to an unauthorized LBS server. The main drawback of cryptography-based mechanisms is that they require expensive computational overhead on low-end mobile devices of the users.

3. Location privacy in MCS
3.1. Overview of mobile crowdsensing
As shown in Fig. 2, an MCS system has three main components: MCS service providers, requesters, and workers.

•
Service providers provide a platform for MCS. They are responsible for accepting sensing tasks from requesters, distributing tasks to the appropriate workers, aggregating task results from workers, and delivering aggregated results to requesters. Furthermore, the service providers must provide mechanisms for (1) task assignment to distribute tasks to workers in a cost-effective manner, (2) privacy protection to protect the privacy of the involved individuals, (3) data quality management to deliver trustworthy results to requesters, and (4) generating incentives to motivate workers to actively participate in the task.

•
Requesters are end-users that submit tasks, which are required to be performed at specific regions, to the MCS service provider. They can be persons or organizations who usually lack the ability to perform sensing tasks, and thus, wish to complete them by leveraging a service offered by the MCS service provider with a certain cost.

•
Workers are persons who voluntarily participate in the process of MCS with the expectation of earning a reward. They perform sensing tasks, which are assigned by the service provider or are selected by themselves, and report task results to the service provider. Usually, the workers must disclose their location information to the service providers so that tasks are assigned in an economical manner, such as minimizing the traveling distance that each worker has to physically move to complete the assigned tasks.

Fig. 2 shows the general structure of the task flow among service providers, requesters, and workers in MCS.

3.2. Characterizing the location-privacy protection mechanisms in MCS
In this subsection, we introduce the important aspects to evaluate and compare location-privacy protection mechanisms designed for MCS.

3.2.1. System architecture
From the viewpoint of protecting the location privacy of workers, the architecture of MCS can be broadly classified into two categories: MCS server with and without a trusted-party.

In the case of the MCS server with a trusted-party (MCS-TP), which is depicted in Fig. 3(a), the trusted-party is located between workers and the MCS server. The trusted-party receives genuine location information from a worker, applies a privacy-preserving mechanism, such as anonymization or perturbation, to it, and forwards the privacy-guaranteed location information to the MCS server. In the literature, it is commonly assumed that a cellular service provider (CSP), with which the worker already has a trust relationship, can be a trusted-party (To et al., 2014, Wang et al., 2017b).

Figs. 3(b) and (c) depict the scenarios of the MCS server without a trusted-party where workers themselves are responsible for applying a privacy-preserving mechanism to their location information to protect their location privacy. This is further categorized into two cases depending on whether workers need to directly communicate with each other to protect location privacy. In the case of an MCS server with peer-to-peer communication (MCS-P2P), each worker exchanges information with neighboring peers to collaboratively apply a privacy-preserving mechanism to its location information (Fig. 3(b)). In the case of the MCS server which does not require any communication among workers (MCS-LOC), a privacy-preserving mechanism for protecting the location information of a worker must be entirely executed on the mobile device locally.

3.2.2. Privacy model/mechanism and protected data
As stated in Section 2, anonymization and DP are the most popular privacy models for protecting individual data. Accordingly, these two privacy models are the most commonly used when designing location-privacy protection mechanisms for MCS. Most early works are based on anonymization schemes, such as -anonymity, whereas more recent works have been exploiting various variants of DP. Furthermore, another line of research focuses on the application of specific encryption techniques to the locations of workers in MCS.

Depending on the type of protected data, existing works can be classified into two categories: protecting a single location and protecting a sequence of locations (i.e., trajectory) located along the routes connecting origins to destinations. The first category is designed for the scenario in which each worker only reports its current single location to the MCS server. In contrast, the second one is intended for the scenario where each worker who is willing to perform tasks on the route to the destination discloses a sequence of locations to the MCS server.

3.2.3. Computational overhead
Protecting the location privacy of workers in MCS adds an extra computational overhead. The additional overheads imposed on the worker’s mobile device, an MCS server, and a trusted server are different, depending on the privacy model used while designing the privacy-preserving mechanisms. Even though the same privacy model is used, additional computational overhead imposed on the worker’s mobile device, an MCS server, and a trusted server may vary depending on the way it is implemented. For example, if a -anonymity–based privacy-preserving mechanism is implemented in the MCS-TP architecture, the computational overhead in the mobile device of a worker is low because the trusted server runs the -anonymity algorithm after receiving all workers’ locations. In contrast, if the privacy-preserving mechanism based on the same privacy model is implemented in the MCS-P2P architecture, the additional computational overhead added to the mobile device of a worker is relatively high because a worker itself must execute the -anonymity algorithm by communicating with its neighbors. In this paper, we use three ranks, low, medium and high, for computational overhead to relatively compare the surveyed solutions.

3.2.4. Data utility
Protecting the location information of a worker improves the privacy but affects the quality of results of the sensing task. For example, when a location-privacy-preserving mechanism based on DP is used, a worker reports the data sensed from its mobile device together with its perturbed location to the MCS server instead of its true location. In this case, the location privacy of a worker is protected; however, from the viewpoint of the service provider and service requester, this will lead to some degradation in the utility of the resulting data. In this paper, we use three ranks, namely, low, medium, and high, for data utility to compare the surveyed solutions relatively.

Furthermore, there is an inherent trade-off between utility and privacy. If more privacy-protected location information of a worker is sent to the MCS server, the utility of sensed data from the worker becomes lower. In contrast, if a worker reports less privacy-protected location information to the MCS server, the utility of sensed data from the worker becomes higher. Thus, the privacy-utility trade-off always exists, which can be determined in either a centrally controlled manner in which the MCS server decides the privacy level that will be applied to all workers or a personally controlled manner in which each worker decides its own privacy level.

3.3. Location privacy in LBS vs. MCS
In this subsection, we highlight the different requirements and challenges that should be considered while performing location-privacy protection in MCS compared with LBS.

First, unlike LBS, which focuses on protecting the location privacy of LBS users only, MCS aims to optimize the trade-off between task allocations and location-privacy protection of workers. The higher the privacy level used, the better the worker’s location can be protected. However, with a high level of privacy protection for workers’ locations, the MCS service provider is provided with low-utility information on the workers’ locations, which in turn, results in ineffective task assignment such that workers need to travel far away from their current location to complete the assigned tasks. Thus, location-privacy protection mechanisms designed for MCS must guarantee adequate levels of privacy for workers’ location while achieving cost-effective task allocation.

Second, in LBS, users who want to receive services adjusted to their current locations submit service request queries along with their location information to the LBS platform. The service request queries from LBS users usually do not contain sensitive information using which the user’s location can be indirectly inferred. However, workers in MCS report results of assigned sensing tasks to the MCS platform. Because the results of various sensing tasks often depend on the locations where sensing tasks are performed, they can be exploited by an adversary to infer the exact location of the participating workers. Thus, for such sensing tasks, both the location privacy of workers and the reported task results must be protected.

Third, LBS is a user-centric technique, which means that the users themselves can decide the level of location-privacy protection according to their requirements. For example, users who want to receive more accurate service results from LBS can reduce the level of privacy protection for their location and thus send less privacy-protected location information to the service provider. However, MCS is a platform-centric technique, in which the level of privacy location protection is usually determined by the service platform according to the requirements of service requesters. Recent MCS platforms such as the one proposed by Wang et al., 2018a, Jin et al., 2019 support the personalized privacy-preserving mechanism in which each worker independently selects its own privacy level. However, in most cases, location-privacy level is determined by the MCS service provider.

Fourth, because the purpose of LBS is to provide location-aware services for each user, the utility of the services provided by it is based on the single location of a user. In contrast, MCS aims to deliver aggregated results from service requesters by collecting individual task results from workers, and thus, the utility of the services offered by MCS is based on multiple locations of all participating workers. Thus, to maximize the service utility, location-privacy protection mechanisms in MCS are required to consider the global viewpoint of all participating users’ locations.

Because of the above mentioned requirements and challenges inherent to MCS, existing location-privacy protection mechanisms designed for LBS cannot be directly used for MCS. Accordingly, in research literature on MCS, extensive studies have been conducted in the past few years to design and implement location-privacy protection mechanisms that can address the above requirements and challenges.


Table 2. Comparison and characterization of location privacy-preserving schemes in MCS: In the column of computational overhead, we use the ‘–’ sign to represent that the corresponding component is not used.

Reference	Architecture	Privacy	Computational overhead	Utility
Privacy model/	Protected data	Worker	MCS	Trusted	Data utility	Personalized
mechanism	server	server	privacy level
Spatial cloaking-based mechanisms
Kapadia et al. (2008)	MCS-TP	-anony.	Location	Low	Low	High	Low	✕
Huang et al. (2010)	MCS-TP	-anony., -div.	Location	Low	Low	High	Low	✕
Murshed et al. (2010)	MCS-TP	-anony.	Location	Low	Low	High	Low	✕
Kazemi and Shahabi, 2011b, Kazemi and Shahabi, 2011a	MCS-P2P	-anony.	Location	High	Low	–	Low	✓
Vu et al. (2012)	MCS-TP	-anony.	Location	Low	Low	High	Low	✕
Pournajaf et al., 2014, Pournajaf et al., 2015	Unknown	Unknown	Location	Unknown	Unknown	Unknown	Low	Unknown
Vergara-Laurens et al. (2014)	MCS-LOC	Obfuscation	Location	Low	Medium	–	Low	✕
Wang et al. (2017b)	MCS-TP	-anony.	Location sequence	Low	Low	High	Low	✕
DP-based mechanisms
To et al., 2014, To et al., 2017	MCS-TP	PSD	Location	Low	Low	High	Medium–high	✕
Gong et al. (2015)	MCS-TP	PSD	Location	Low	Low	High	Medium–high	✕
Maruseac et al. (2015)	MCS-TP	PSD	Location	Low	Low	High	Medium–high	✕
Wang et al. (2017c)	MCS-LOC	-GeoInd	Location	Medium	High	–	Medium	✕
Qiu and Squicciarini (2019)	MCS-LOC	-GeoInd	Location	Medium	High	–	Medium	✕
Tao et al. (2020)	MCS-LOC	-GeoInd	Location	Medium	High	–	Medium	✕
Wang et al., 2016b, Wang et al., 2020	MCS-LOC	-GeoInd	Location	Medium	High	–	Medium	✕
Wang et al. (2018a)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✓
Jin et al. (2019)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✓
Yan et al. (2019b)	MCS-LOC	-GeoInd	Location sequence	Medium	Low	–	Low–medium	✕
Wang et al. (2015)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✕
To et al. (2018)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✕
Shen et al. (2019)	MCS-TP	-GeoInd	Location	Low	Low	High	Low–medium	✕
Jin et al. (2021)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✓
Huang et al. (2021b)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✕
Huang et al. (2019)	MCS-LOC	-GeoInd	Location sequence	Medium	Low	–	Low–medium	✕
Xia et al. (2021)	MCS-LOC	-GeoInd	Location	Medium	Low	–	Low–medium	✕
Jin et al. (2016)	MCS-LOC	-DP on	Location sequence	Medium	Low	–	Low–medium	✕
-location set
Yan et al. (2019a)	MCS-LOC	-DP	Location	Medium	Low	–	Low–medium	✓
Yang et al. (2021)	MCS-LOC	-DP	Location sequence	Medium	High	–	Medium	✕
Encryption-based mechanisms
Liu et al., 2017, Liu et al., 2017b	MCS-LOC	HE	Location	High	Medium	–	High	✕
Liu et al. (2018b)	MCS-LOC	HE	Location (& Velocity)	High	Medium	–	High	✕
Ren et al., 2018, Zhai et al., 2018	MCS-LOC	HE	Location	High	Medium	–	High	✕
Xiong et al. (2019)	MCS-LOC	HE	Location	High	Medium	–	High	✕
Han et al. (2020)	MCS-LOC	HE	Location	High	Medium	–	High	✕
He et al. (2020)	MCS-LOC	HE	Location	High	Medium	–	High	✕
Ding et al. (2021)	MCS-LOC	HE	Location	High	Medium	–	High	✕
Yuan et al. (2019)	MCS-LOC	ABE	Location	High	Medium	–	High	✕
Huang et al. (2021a)	MCS-LOC	ABE	Location	High	Medium	–	High	✕
Zhang et al. (2020)	MCS-P2P	HE &	Location	High	–	–	High	✕
Blockchain
Yang et al. (2019)	MCS-P2P	Blockchain	Location sequence	High	–	–	High	✕
Zou et al. (2021)	MCS-P2P	Blockchain	Location	High	–	–	High	✓
Shu et al., 2018, Zhou et al., 2020	MCS-LOC	Searchable	Location	High	Medium	–	High	✕
Encryption
Zina et al. (2016)	MCS-LOC	Secret sharing	Location	High	Medium	–	High	✕
4. Location privacy-preserving mechanisms in MCS
In this section, we survey the existing works for preserving location privacy in MCS. We divide the existing studies into three categories: spatial cloaking-based approaches, DP-based approaches, and encryption-based approaches. We summarize the surveyed articles in Table 2.

4.1. Spatial cloaking-based mechanisms
Spatial cloaking is a generalization method in which workers report coarser information to the MCS server, instead of their exact location. Early studies on location-privacy protection mechanisms designed for MCS leverage spatial regions to protect workers’ location.

4.1.1. Mechanism
AnonySense (Kapadia et al., 2008) is the first work to leverage -anonymity to protect location privacy of workers in MCS. AnonySense generates a Tessellation map that divides a geographical area into a set of tiles, each of which likely contains at least  workers. In its implementation, AnonySense first maps the locations of Wi-Fi access points (APs) as points on a two dimensional plane and, then, constructs a Voronoi diagram. Next, it estimates the number of workers in each cell using historical AP activity records, and then, clusters the Voronoi cells into tiles such that each tile satisfies -anonymity. During the task reporting process, the location privacy of workers is protected because workers submit their sensed data with the tile IDs to the MCS server, instead of their actual location. AnonySense requires a trusted-party because the Tessellation map is constructed according to the actual workers’ locations.

In Huang et al. (2010), the authors introduce two approaches to secure location privacy of workers in MCS. To address the problem of AnonySense where some tiles in a Tessellation map may have considerably large region which, in turn, leads to lower quality of the result of the sensing task, they first propose to leverage a variable size maximum distance to average vector (VMDAV) algorithm presented in Solanas and Martinez-Balleste (2006). In the VMDAV approach, -anonymity is achieved by changing the values of sensitive attributes in the records of a same equivalence class to an average value, instead of generalizing them. Given a set of workers’ locations, the proposed method first generates a set of equivalence classes based on the distance metric, and then, anonymizes each worker’s location using a center point of the equivalence where it belongs. Next, the authors demonstrate that -anonymous methods are insufficient to protect the location privacy of workers. Therefore, the second proposed approach diversifies values for the anonymized location by leveraging the notion of -diversity.

Murshed et al. (2010) present a greedy algorithm that protects the location privacy of participating workers using -anonymization while maximizing the quality of integrated task results from workers. A trusted anonymization server receives sensing data along with a true location from the worker via a secure channel such as SSL and generates an anonymized report that is returned back to the sender worker. For generating the anonymized report for the sender worker, they devise the greedy maximal approach that finds and selects the next anonymized rule that can maximize the quality of the integrated results at the MCS server side.

Kazemi and Shahabi, 2011b, Kazemi and Shahabi, 2011a present the first anonymization-based approach that protects the location privacy of workers in the MCS-P2P architecture. The proposed approach, PiRi, considers a scenario in which workers trust each other and do not trust any entity (e.g., MCS server), except the participating workers. Thus, in PiRi, workers communicate with their neighbors via multi-hop routing to identify at least  other workers. In PiRi, each worker specifies two privacy requirements: the minimum number of workers in the cloaked region (i.e., -anonymity) and the minimum area of the cloaked region (i.e., the circle with radius ). To compute the Voronoi diagram, PiRi relies on the distributed algorithm in Alsalih et al. (2008) which consists of two major phases: identifying the potential Voronoi neighbors and computing the boundary of the Voronoi cell by intersecting the bisectors of the neighbors. While computing the Voronoi cell containing at least -workers, each worker identifies the cloaked region that corresponds to the circle with radius  such that it is the smallest circle enclosing its Voronoi cell. Then, the worker sends the cloaked region to the MCS server to receive sensing tasks.

In Vu et al. (2012), to prevent disclosure of workers’ locations in the MCS setting, the authors propose the constructing of spatial cloaks by utilizing -anonymity and locality sensitive hashing (LSH) (Datar et al., 2004). A trusted anonymization server constructs spatial cloaks that achieve -anonymous location privacy by first partitioning the user locations into groups of at least  locations using LSH and then constructing the order- Voronoi diagram. With the LSH-based partitioning algorithm that uses multiple hash function, similar location points are likely to be grouped together with high probability. Each cell in the order- Voronoi diagram corresponds to spatial cloaks satisfying -anonymity, and the MCS server can only access the spatial cloaks of workers, instead of their genuine locations. Furthermore, authors devise an efficient algorithm to identify the -nearest tasks of a worker.

Pournajaf et al., 2014, Pournajaf et al., 2015 study the task assignment problem in MCS when participating workers provide their cloaked regions to the server, instead of their exact locations. In their proposed framework, a worker discloses its cloaked region, , to the MCS server where  corresponds to a spatial region and  is the probability density function of the worker at each location in . The proposed task assignment algorithm with cloaked regions includes two phases: the global optimization phase using cloaked regions and the local optimization phase using workers’ more precise location information without violating the privacy requirements.

Vergara-Laurens et al. (2014) propose a hybrid privacy-preserving scheme in which different privacy-preserving mechanisms for protecting the location privacy of workers are selected depending on the size of the cell of the grid of the interesting area. In case of large cells in which workers cannot be easily identified, the point-of-interest-based mechanism that obfuscates the actual location using a set of predefined locations (i.e., points of interest) is used to protect location privacy. In contrast, in the case of small cells where workers can be easily identified, the double encryption scheme presented in Hoh et al. (2008) is selected to protect the location privacy of workers.

Wang et al. (2017b) utilize -anonymity to incorporate workers’ location-privacy protection into an incentive mechanism for MCS. To mitigate the information loss incurred by location aggregation for privacy protection, the microaggregation method is used to cluster workers into groups, whose size is greater than or equal to , according to their location coordinates. In addition, the authors devise a reverse auction based incentive mechanism to efficiently select workers and rationally calculate the sensing costs based on clustered worker groups.

4.1.2. Discussion
In this subsection, we compare the spatial cloaking-based mechanisms surveyed in this subsection.

•
System architecture: Most spatial cloaking-based mechanisms rely on the trusted server to create cloaked regions and, thus, are implemented in the MCS-TP architecture. In Kazemi and Shahabi, 2011b, Kazemi and Shahabi, 2011a, a trusted server is not required because workers communicate with their neighbors to create cloaked regions.

•
Privacy Model/Mechanism and Protected Data: Most approaches exploit the -anonymity privacy model, guaranteeing that at least  workers are present at any time in the cloaking region. However, unlike other approaches, Vergara-Laurens et al. (2014) simply transforms a true worker’s location to a predefined cloaked region without requiring such privacy constraints, and thus, the worker’s location is less protected than by other approaches. Regarding the protected data, Wang et al. (2017b) protects a sequence of multiple locations, whereas others protect a single location.

•
Computational Overhead: Because in the MCS-TP architecture, a location-privacy preserving algorithm is executed on the trusted server, the computational overhead in the mobile device of a worker is low, whereas that of the trusted server is high. In Kazemi and Shahabi, 2011b, Kazemi and Shahabi, 2011a, workers communicated with their neighbors to create cloaked regions, and thus, the computational overhead in the mobile device of a worker is relatively high. In Vergara-Laurens et al. (2014), the MCS server creates cloaked regions by creating Voronoi cells based on the predefined points of interest, and thus, the computational overhead of the MCS server is higher than those of other approaches.

•
Data Utility: Overall, the spatial cloaking-based mechanisms have low data utility because cloaked regions can be considerably large.

We note that Pournajaf et al., 2014, Pournajaf et al., 2015 do not provide the implementation details regarding location-privacy protection mechanisms.

4.2. DP-based approaches
Existing works in this category can be further classified into PSD-based and GeoInd-based approaches.

4.2.1. PSD-based approaches
DP can be used for publishing location data using a spatial histogram under PSD. As shown in Fig. 4, PSD first partitions a target spatial region into several cells, computes the true count of the objects located within the boundaries of each cell, and then, adds noise to the true count such that -DP is satisfied. The perturbed spatial histogram is then released for public use. Existing PSD approaches are classified into two categories: data-dependent methods (Xiao et al., 2010, Cormode et al., 2012, Hay et al., 2010, To et al., 2015, Kim et al., 2018) and data-independent methods (Qardaji et al., 2013, Fanaeepour and Rubinstein, 2018, Zhang et al., 2016b).

•
In data-dependent methods, a series of split operations that partition a target spatial region into several cells are performed based on the underlying users’ location data. The users’ location data are used to determine the splitting points as well as to compute the noisy counts; thus, the privacy budget, , has to be distributed between both procedures. Data-dependent PSD techniques can better capture the distribution of location points. However, the accuracy of data-dependent PSD methods largely depends on the data distribution and the parameters related to spatial indexing structures.

•
In data-independent methods, the split points are independently determined without considering users’ locations. The partition does not disclose user location during spatial decomposition; therefore, the privacy budget is only consumed while calculating the noisy counts of cells. However, when the data distribution is highly skewed, these methods can build unbalanced histograms by creating numerous empty cells.

To et al. (2014) are the first to leverage PSD to protect the location privacy in MCS. They assume the presence of a trusted CSP located between the workers and the MCS server. Workers report their exact location to the CSP, instead of the MCS server, which does not have trust relationships with the workers. Then, the CSP constructs a worker PSD using the collected locations of the workers. Especially, they employ and slightly modify the data-independent method proposed in Qardaji et al. (2013) to address the specific requirements inherited in the MCS. After receiving the worker PSD from the CSP, the MCS server constructs effective geocast regions, which can achieve a high task assignment rate, and based on it, can then initiate a geocast communication process to all workers in geocast regions to distribute tasks. In To et al. (2017), this work is further extended to handle the case of dynamic worker datasets.


Fig. 4. The illustration of PSD structure.

Similarly, Gong et al. (2015) exploit PSD to protect the location privacy in the MCS environment. The proposed framework in Gong et al. (2015) is similar to To et al. (2014) in that workers disclose their true location information to the trusted CSP which, in turn, builds a worker PSD and sends it to the MCS server. They also leverage the data-independent method proposed in Qardaji et al. (2013) to build the worker PSD. In addition, to control, and thus eventually improve the quality of task results performed by workers, the authors propose to construct reputation-based PSD (R-PSD) by incorporating the reputation of workers into the traditional PSD. R-PSD enables us to disseminate tasks to regions that contain the workers located in nearby and high reputation scores. It is note that during the task assignment phase in To et al., 2014, To et al., 2017, and Gong et al. (2015), the location privacy of the workers is protected because the MCS server can access only the worker PSD.

Maruseac et al. (2015) propose the use of PSD to construct a heatmap capturing the spatial distribution of environmental parameters (e.g., temperature and air pollution) in a privacy-preserving manner. Upon receiving sensing tasks, workers report data sensed from their mobile devices together with their true location to a trusted-collector. Then, the collected data are used to generate a heatmap for which the grid-based PSD is used to protect location privacy of the worker.

4.2.2. GeoInd-Based approaches
As briefly explained in Section 2.2, GeoInd extends DP with a distance metric to provide a privacy-preserving mechanism for location data. The basic idea of GeoInd is to obfuscate a user’s true location such that an adversary having arbitrary background knowledge, who has access to the user’s obfuscated location, cannot infer the true location with high confidence. GeoInd is formally defined as follows:

Definition 3 Geo-Indistinguishability

Let  be a set of possible user locations. Let further assume that  be a set of reported locations. Note that it is often assumed that  is same with . Let  be a randomized mechanism which probabilistically generates an obfuscated location from a given true user location. Then, a randomized mechanism, , satisfies -GeoInd, if and only if for (1) all 
 and (2) any output location, , the following equation is satisfied: 
Here, 
 corresponds to the distance metric (e.g., Euclidean distance between two locations  and 
).

The definition of GeoInd implies that, given a reported location, , the ability of an adversary to identify whether the true location is  or 
 is limited by  (i.e., the privacy budget) and 
 (i.e., the distance between  and 
) even if she/he knows the internal implementation of . This denotes that the closer two locations  and 
 are, the more indistinguishable they are. GeoInd is the generalized version of DP. That is, when 
 is set to 1, the definition of GeoInd is same with that of DP.

There are two existing privacy mechanisms to archive GeoInd: the (planar) Laplace mechanism and the optimization mechanism. In the Laplace mechanism, a true location, , is obfuscated by adding random noises drawn from a 2-dimensional Laplace distribution centered at  on a user’s device, and then, the obfuscated location is reported to the server (Andres et al., 2013). In the optimization mechanism, an obfuscation function is first computed by solving the linear programming problem on a server side, and then is distributed to each user. After receiving the obfuscation function, each user obfuscates its actual location according to the probabilities encoded in the function, and sends the obfuscated location to the server (Bordenabe et al., 2014, Chatzikokolakis et al., 2017, Ahuja et al., 2019).


Fig. 5. (a) Obfuscation-function-based scheme vs. (b) Non-obfuscation-function-based scheme.

Existing works based on GeoInd can be classified into two categories depending on whether the MCS server generates an obfuscation function. As shown in Fig. 5(a), in the obfuscation-function-based scheme, the MCS server must first generate a function (or matrix) that satisfies GeoInd. After downloading the function, a worker perturbs its true location according to the probabilities encoded in the downloaded function and sends the perturbed location to the MCS server. In contrast, in the non-obfuscation-function-based scheme shown in Fig. 5(b), a worker perturbs its true location using the perturbation mechanism, such as the Laplace mechanism, without help from the MCS server.

Obfuscation-function-based Schemes:Wang et al. (2017c) are the first to use GeoInd to protect the location privacy of workers for the MCS process. The proposed framework includes the following three steps: (1) The MCS server first generates a geo-obfuscation function that satisfies GeoInd. (2) Next, each candidate worker downloads the geo-obfuscation function, obfuscates its true location according to the probabilities encoded in the function, and uploads the obfuscated location to the MCS server. (3) Then, the MCS server assigns tasks to proper workers based on the obfuscated location information received from candidate workers. To generate an optimal geo-obfuscation function which enables us to minimize the expected distance traveled by the selected workers while satisfying GeoInd, they devise an optimization-mechanism-based scheme in which the constraint of the expected travel distance of workers is incorporated in the linear programming problem.

With the emergence of intelligent vehicles, several studies have suggested the use of vehicles as workers in MCS (Wang et al., 2016c, Wu et al., 2013). In Qiu and Squicciarini (2019), location-privacy protection in vehicle-based MCS is investigated. Directly applying GeoInd to protect the locations of vehicles participating in MCS leads to a loss in the quality of service, because privacy and quality of service in GeoInd depend on the Euclidean distance between the actual and obfuscated locations, which is only measurable in the 2D plane. Thus, the Euclidean distance that is only measurable in straight lines cannot be suitable in vehicle-based MCS. They then address this challenge by modeling the road map as a weighted directed graph, with the tasks’ and workers’ locations as points on the graph. They propose the optimization-mechanism-based obfuscation scheme in which location obfuscation is achieved through probabilistic distribution over the graph.

Tao et al. (2020) propose a privacy-mechanism-based on hierarchically well-separated trees (HSTs) which satisfies -GeoInd. In their scheme, the MCS server constructs an HST with a predefined set of points and computes the privacy mechanism , which satisfies -GeoInd, on the HST. Upon downloading the HST and the privacy mechanism , each worker obfuscates its actual location by mapping it to a node on the HST according to the probabilities encoded in  and submits the obfuscated node to the MCS server. After receiving new sensing tasks, the MCS server assigns a worker to the task based on the obfuscated nodes on the HST.

Wang et al. (2016b) devise a location obfuscation mechanism for sparse MCS environments in which the sensing data of uncovered regions are inferred using historical records with available sensing data from covered regions. In their scheme, the MCS server generates a probabilistic obfuscation matrix satisfying -DP (which is the same as -GeoInd with the distance metric being set to 1) in an offline manner by solving linear programs. Then, each worker downloads this obfuscation matrix and obfuscates its true location according to the probabilities encoded in the matrix. In addition, their scheme uses a data adjustment function, the purpose of which is to minimize the data uncertainly incurred by location obfuscation. The method is extended in Wang et al. (2020) by adding the distortion privacy protection in addition to DP protection. The authors combine the notion of -distortion-privacy (Shokri, 2015), which guarantees that the inference error of the adversary regarding a worker’s location is larger than , and -DP to provide more comprehensive protection.

Non-obfuscation-function-based Schemes:Wang et al. (2018a) are the first to apply the concept of personalized privacy to task allocation processes in MCS. Because the distance traveled by the selected workers to complete tasks is an important metric in task allocation, each worker submits the distances to the interested tasks to the MCS server instead of its true location. Each worker independently selects the privacy budget, , perturbs the true distances to the interested tasks using the Laplace mechanism with its personalized privacy budget, and submits the perturbed distances to the MCS server. They devise a probabilistic winner selection mechanism that enables the MCS server to allocate each task to the worker with the largest probability of being closest to it with the perturbed distance information received from workers.

Similarly, Jin et al. (2019) propose a personalized privacy-preserving task allocation scheme for MCS. Each worker independently selects its own privacy level that reflects its valuation on privacy loss and the expected reward for performing tasks. Generally, the larger privacy is leaked to the MCS server, the higher payment is rewarded to the worker. The true location of each worker is obfuscated using the perturbation mechanism, which is similar with the Laplace mechanism, with the personalized privacy level, and the obfuscated location together with the privacy level is submitted to the MCS server. When assigning task to workers, the MCS server considers the bidding privacy levels of the candidate workers as well as an available total reward budget.

Yan et al. (2019b) design an MCS framework that considers the privacy of the workers’ mobility. Their proposed framework considers a scenario in which a worker is willing to perform tasks on its way to the destination and discloses a sequence of locations located on the routes connecting the origin to the destination to the MCS server. When reporting a sequence of locations, the worker also bids a radius  so that the MCS server assigns a task within the circle at each reported location with a radius of  to it. To protect each location in the sequence, the GeoInd mechanism is used. In particular, an entire sensing area is partitioned into 2-by-2 grids, and the location of each work is represented using the grid where it is located. They also devise the obfuscation mechanism that computes an obfuscated grid from the true grid (i.e., the grid wherein the worker is actually located) under GeoInd.

Wang et al. (2015) explore a privacy-preserving histogram aggregation mechanism in which the privacy of both worker’s location and sensed data is protected. In their scheme, each worker 
 observes data 
 at location 
 and reports a sanitized 
 to an aggregator (i.e., MCS server), instead of an original 
. Sanitization is performed locally and independently by the workers using the GeoInd mechanism. They develop the bit flipping matrix mechanism which takes the location-based data 
 represented as a bit array as input and outputs the sanitized bit array 
. The MCS server then generates statistical information from the sanitized bit array received from all workers.

To et al. (2018) develop a privacy-aware framework, SCGuard, to safeguard locations of both workers and tasks. In the SCGuard, the locations of both workers and tasks are obfuscated by the Laplace mechanism of GeoInd, and the obfuscated location information is submitted to the MCS server. They also propose the probability-based scheme to assign tasks to a proper worker by quantifying the probability of reachability from a worker to a task based on the obfuscated location information.

Shen et al. (2019) develop a privacy-aware framework, P2TA, for edge computing enhanced MCS. In P2TA, workers submit their true locations to the edge node, which performs obfuscation operations under DP, and then, submits the obfuscated location of all workers to the MCS server. In particular, they first define both an obfuscation function satisfying -GeoInd and an inference function (Shokri et al., 2011) through which the attacker can estimate the location regarding original one with the obfuscation location. Then, a Stackelberg game strategy (Wang et al., 2018b) is utilized to find the pair of the best obfuscation function and inference function which are mutually optimal against each other.

Jin et al. (2021) propose a user-centric location-privacy trading framework, ULPT, for MCS. Following the notion of GeoInd, they first model the quantization of location privacy using the Bayesian attack model that is a standard adversary model used to measure location privacy since GeoInd. In their location-privacy quantization model, each worker has its own location-privacy budget. Then, based on the location-privacy quantization model, the authors devise the location obfuscation mechanism which allows each worker to obfuscate its genuine location in a probabilistic manner with its own privacy budget. The proposed location obfuscation mechanism includes two major steps: the generation step and the probabilistic mapping step. In the generation step, a set of obfuscated locations is generated from a polar coordinate system with the worker’s true location as the origin. In the probabilistic mapping step, given the worker’s true location, the obfuscated location is selected among the obfuscated location set generated by the previous step by leveraging the exponential mechanism (McSherry, 2009).

Huang et al. (2021b) explore a privacy-aware scheme to protect the location privacy and data privacy for MCS-based noise monitoring. In their proposed framework, the MCS server first publishes a set of sensing tasks for noise monitoring, and then, workers report the perturbed locations and noise levels to the MCS server under DP. Each worker collaborates with a master who is carefully selected from workers in the same group to achieve a group GeoInd. In particular, the authors propose to leverage the DP mechanism via wavelet transformation (Xiao et al., 2011). This method first transforms a location in polar coordinates to wavelet coefficients, adds noises to these coefficients, and re-transforms the noisy coefficients to a location in polar coordinates to obtain the perturbed location. Furthermore, the noise level can reveal the distance between the noise source and a measuring mobile device which, in turn, can leak the worker’s location. The proposed framework perturbs the noise level sensed from the worker’s measuring mobile device using DP.

Huang et al. (2019) investigate a problem in which the MCS server collects trajectories from workers in a privacy-preserving manner. To protect location privacy of the workers, the authors define trajectory-DP, which applies the notion of GeoInd to a trajectory. Under trajectory-DP, each worker generates a perturbed trajectory and submits it to the MCS server.

Xia et al. (2021) develop a real-time privacy-preserving online task assignment scheme, called Repot. In Repot, the locations of workers and tasks are dynamically uploaded to the MCS server. Each worker reports an obfuscated location, which is obtained by using the GeoInd mechanism, to the MCS server. Upon dynamically receiving obfuscated locations from workers and actual task locations from service requesters, the MCS server assigns the received tasks to the current optimal workers, and unmatched workers and tasks remain on the server. To assign a task to an optimal worker in real time, the authors also design a probability-based method that measures the reachability probability between a worker and a task.

4.2.3. Other DP-based approaches
In this subsection, we summarize other approaches that exploit other variants of DP, except PSD and GeoInd.

Jin et al. (2016) develop an MCS framework, DPSense, for crowdsourced spectrum sensing, which allows a spectrum sensing provider to outsource the sensing of spectrum tasks to mobile users. In DPSense, each worker with advanced mobile devices with spectrum sensing capabilities submits its mobility traces for the upcoming time period to the MCS server. During this process, to protect location privacy, the worker obfuscates its original mobility traces using the DP mechanism in Xia and Xiong (2015) which satisfies -DP on the -location set. Here, given the prior probability of a worker’s location at a specific time, the -location set is defined as a set containing the minimum number of locations with the prior probability sum being no less than 1-.

Yan et al. (2019a) investigate a location-privacy-aware scheme for both task bidding and task assignment in MCS. In the proposed framework, the MCS server publishes a set of tasks to all workers, and each worker submits a bid, which is composed of a set of tasks and the bid price that it expects to earn as reward for completing tasks, to the MCS servers. Here, the bid price is defined as the Euclidean distance between the task’s location and the worker’s location. Thus, by reporting a truthful bid to the MCS server, the worker’s location may be revealed to the MCS server. Therefore, in their proposed framework, each worker perturbs the bid price by using the Laplace mechanism to satisfy -DP and submits the perturbed bid price to the MCS server. They also devise a privacy-aware task assignment scheme to assign tasks to proper workers in a cost-efficient manner with a set of perturbed bid prices.

Yang et al. (2021) investigate a method to protect the spatiotemporal activity of workers, which corresponds to a sequence of locations of the workers, in sparse MCS. Inspired by the definition of DP, the authors define -spatiotemporal activity privacy. In the proposed framework, the MCS server computes the data adjustment function by performing data fitting based on historical sensing data, and obtains the optimal location confusion matrix satisfying -spatiotemporal activity privacy. On the workers’ side, workers first collect the sensing data of their actual area and then obfuscate their actual location according to the probabilities encoded in the optimal location confusion matrix. Furthermore, the sensed data are adjusted according to the probabilities encoded in the data adjustment function. Finally, the workers forward the obfuscated location and the adjusted sensed data to the MCS server.

4.2.4. Discussion
In this subsection, we compare the DP-based approaches surveyed in this subsection.

•
System architecture: The PSD-based approaches require a trusted third party, whereas other DP-based approaches do not, with the exception of Shen et al. (2019). Note that in Shen et al. (2019), the edge node, located between workers and the MCS server, acts as the trusted server, and thereby receives actual location data of workers and performs obfuscation operations on them.

•
Privacy Model/Mechanism and Protected Data: Most DP-based approaches are based on either PSD or GeoInd. There are a few approaches, such as Jin et al., 2016, Yan et al., 2019a, Yang et al., 2021, that exploit the -DP model. However, as stated earlier, when the distance metric is set to 1, the definition of GeoInd is the same as that of DP. Regarding the protected data, Yan et al., 2019b, Huang et al., 2019, Jin et al., 2016 and Yang et al. (2021) protect a sequence of multiple locations, whereas others protect a single location.

•
Computational Overhead: In the case of PSD-based approaches, the trusted server performs obfuscation operations on the collection of workers’ true locations. Thus, the computational overhead of the trusted server is high, whereas that of workers and the MCS server is low. In contrast, in the case of the GeoInd-based approaches, the computational overhead of a worker is medium because the worker itself must obfuscate its true location. Furthermore, in the case of the obfuscation-function-based schemes, such as Wang et al., 2017c, Qiu and Squicciarini, 2019, Tao et al., 2020, Wang et al., 2016b, Wang et al., 2020, the MCS server should generate an obfuscation function, and thus, its computational overhead can be very high. Among other DP-based approaches, the computational overhead of the MCS server in Yang et al. (2021) is high, because the data adjustment function and the optimal location obfuscation matrix are computed by the MCS server, while that in Jin et al., 2016, Yan et al., 2019a is low because the MCS server does not need to compute such data adjustment function and location obfuscation matrix.

•
Data Utility: Overall, the utility of the PSD-based approaches is higher than that of the GeoInd-based approaches. Among the GeoInd-based approaches, the obfuscation-function-based schemes have higher utility than the non-obfuscation methods because the former computes the optimal probabilities, based on which a worker’s true location is perturbed, by solving the linear programming problem.

4.3. Encryption-based approaches
We broadly categorize the encryption-based approaches as homomorphic encryption, attribute-based encryption, and blockchain approaches.

4.3.1. Homomorphic encryption (HE)
In this approach, data is encrypted and calculations such as distance and velocity are correctly computed using the encrypted data, and so the results are returned in an encrypted form. For example, consider two messages 
 and 
 encrypted as E(
) and E(
), respectively. An addition operation on the two ciphertexts produces the encrypted sum of the two messages, i.e., E(
) + E(
) = E(
).

In Liu et al., 2017, Liu et al., 2018b, Liu et al., 2017b, the authors adopt the additive homomorphic encryption scheme, Paillier cryptosystem (Paillier, 1999), to encrypt the location information of the tasks and workers. The encrypted information is used to compute the distance between the tasks and workers during task assignment. Tasks are then assigned to the closest workers. The study in Liu et al. (2018b) also takes into consideration the velocity of the workers. Using the velocity, the time taken for a worker to reach a task’s location is computed in a secure manner and the task is assigned to workers with the shortest travel time. Distance comparisons in Liu et al. (2017b) are securely performed using the Yao’s protocol (Lindell and Pinkas, 2009, Yao, 1986).

In Ren et al. (2018) and Zhai et al. (2018), the bitwise XOR homomorphic cryptosystem (Zhang et al., 2016a) is employed to encrypt the workers’ travel costs into perturbed data. In these works, the information on tasks such as task locations is sent to the MCS platform in advance and stored in plaintext. Workers can browse through these tasks and submit their perturbed travel costs for any of them. The MCS platform then uses the perturbed travel costs to assign tasks to the workers.

Similarly, in Xiong et al. (2019), tasks and their relevant information are published in a MCS server in advance. Each worker then browses through the tasks and identifies a set of tasks that it wants to perform. It is assumed that each worker chooses the closest tasks. The chosen task locations are then aggregated and encrypted using the ElGamal homomorphic cryptosystem (ElGamal, 1985) and sent back to the MCS server by each worker. The MCS server additionally multiplies the encrypted aggregates from the workers and submits the result to the task requester for factorization and reward allocation. Thus, the privacy of each worker’s location is protected from the MCS server and the task requester during reward allocation.

Frameworks for computing privacy-preserving distance metrics between tasks and workers in MCS are proposed in Han et al. (2020). The considered distance metrics are Euclidean, Minkowski (Zhai et al., 2014), Manhattan (Craw, 2017) and Chebyshev metrics (Coghetto, 2016). The authors combine homomorphic encryption with composite-order multi-linear mapping (Boneh et al., 2011) to securely compute the Euclidean and Minkowski distance metrics, while the Manhattan and Chebyshev metrics are computed by combining homomorphic encryption with a prefix membership approach (Cheng et al., 2007). To compute the distance between a task and the workers, the requester encrypts the task location and sends it to a trusted MCS server. Workers periodically report their encrypted location information to the same MCS server. Using the homomorphic properties, the distances between the task and the workers’ location are computed. The MCS server then assigns the task to the worker whose distance from the task location is the closest. However, authentication using the requester/worker identity is a prerequisite to publish or execute tasks.

In He et al. (2020), He et al. employ the Paillier homomorphic cryptosystem with threshold decryption (PCTD) (Liu et al., 2018a) to protect the location privacy of workers in crowdsourced bus services. A worker encrypts its trip information that includes the source and destination information using the PCTD before sending it to the closest fog node. The fog node gathers encrypted trip information from users within its coverage and collaborates with the server to perform the density peaks clustering. The clustering operation is performed on the ciphertexts. Once completed, the server then uses a route planning method to optimize the bus routes.

Ding et al. (2021) propose a task allocation framework that preserves the location of workers and sensing data privacy for edge-computing-based MCS. Here, the edge servers are considered semi-honest. The Paillier cryptosystem is used to encrypt the distance of a worker to the task before it is uploaded to the nearest edge server. The edge servers save each other’s secret keys to keep the distance information private during task assignment. Whenever requesters request the MCS server for data collection, the MCS server distributes a series of tasks 
 to the edge servers, with each task 
 distributed together with its own public–private key pair 
. If task 
 is allocated to an edge server , then  will keep the public key of 
, whereas the private key of 
 is assigned to another edge server  closest to . The edge servers  and  then jointly and privately compare the distances of interested users from 
 to identify the winners (workers closer to 
). Subsequently, the winners perform the task 
 and encrypt their results using 
 before uploading them to . The proposed framework preserves the location of workers and sensing data privacy.

4.3.2. Attribute-based encryption (ABE)
In attribute-based encryption schemes, ciphertexts and user keys are labeled with attributes. Users whose attributes match those specified in the ciphertexts are the only ones to decrypt them. For example, a file might be encrypted for the Staff of Computer Science Department in a University A. Here, the attributes Staff, Computer Science, and University A are included during the encryption. Thus, this file can only be decrypted by the Staff (not the Student) of the Computer Science Department at University A.

Yuan et al. (2019) design a privacy-preserving framework for task assignments in MCS. The framework protects the task and workers’ location privacy while quantifying the distance between the task and each worker. The framework divides the geo-space into grids, and the task and workers’ locations are mapped into the grids. Next, the grids are encrypted into codes using a hash function. That is, locations in the same grid have the same code. Thus, if the task location code matches a worker’s location code, the worker is assigned the task. The authors also derive a technique (Valid Neighbor Grids) to assign tasks to workers in the neighboring grids who are within an acceptable distance from the task location. To ensure that the tasks are delivered securely and accurately to the workers, the framework leverages attribute-based encryption and symmetric-key encryption. Thus, the task content is protected from the untrusted MCS server and unchosen workers.

In Huang et al. (2021a), PTASC framework is proposed to prevent disclosure of task content and protect the location privacy of the workers. PTASC encodes regions and locations into sets of prefixes. The location prefixes are used as attributes and the region prefixes are used to generate access policies for ciphertext policy attribute-based encryption (CP-ABE). The framework can check whether a worker is within the required region by checking if the worker’s attributes satisfy the access policy, i.e., if the worker’s location prefix satisfies the region prefix of the task. This way, the task content is prevented from being observed by unauthorized entities and the workers’ location privacy is preserved.

4.3.3. Blockchain
Blockchain is a decentralized and distributed digital ledger with properties of open-consensus, non-temperability and traceability (Nakamoto, 2021, Saxena et al., 2021, Hewa et al., 2021). Information in blockchain is collected in blocks. When blocks are filled, they are chained together to form a chain of data as shown in Fig. 6.

Recently, blockchain together with homomorphic encryption has been deployed to protect location privacy in several MCS applications. In Zhang et al. (2020), Zhang et al. employ the blockchain technology to design a decentralized and privacy-preserving MCS framework for the internet of vehicles. This framework preserves the location privacy of both the tasks and workers. The spatial coverage is partitioned into grids. Here, the blockchain replaces the central server. During the task assignment, each participating vehicle first encrypts its location and border information using an order-preserving encryption (Popa et al., 2013). The encrypted location information and including its hash value are submitted to the blockchain through a nearby roadside unit (RSU). The requester sends the task including its location policy to the participating vehicles. The location policy is encrypted using the Paillier cryptosystem. Each participating vehicle then uses the ciphertext of the location policy to determine whether to participate in the task execution. Once a participating vehicle verifies its location suitability, it executes the task and returns the result and its location proof to the blockchain. Before accepting the result, the requester verifies the location proof. This prevents participating vehicles from forging their driving locations.


Fig. 6. The chain of data in blockchain.

Yang et al. (2019) employ the blockchain to protect the location privacy of workers’ past, current and future locations in MCS applications. First, the authors show a security attack that can expose a worker’s location to the server during payments. The attack exploits the weakness of the payment information being associated with the real identities of the workers. Therefore, by observing the payments, the server can infer the workers that have completed a specific task. For example, if the server has paid 20 to a worker for completing a task and the only task in the pool with the reward 20 is task 1 located at , then the server can infer that the worker has been at . The authors then propose a privacy protection framework to prevent such an attack. The proposed framework uses private blockchain to distribute the transactions of workers across multiple agents. This makes it impossible for an adversary to gather all the workers’ transactions and infer from them.

Zou et al. (2021) combine a hybrid blockchain architecture, -anonymity, and region optimization to design a decentralized and privacy-preserving crowdsensing framework. The hybrid blockchain architecture integrates a public blockchain network with one or more private blockchain networks. An additional entity called an agent is incorporated to maintain an interaction between the public and private blockchain networks. In other words, an agent synchronizes the public and private blockchain networks. Whenever a requester wants to publish a task for execution by workers, he/she signs the task with his/her public key. The task with its reward is broadcast to workers through blockchains. Workers who are conscious of their security register with the closest agents, who then create private blockchain networks and transfer the published task from the public blockchain to their respective private blockchains for access by security-conscious workers. Subsequently, the workers register their interest in the task by submitting their working information, including their location information, to a smart contract algorithm that selects the most suitable workers for the task. However, to preserve the location privacy of a worker, a radius  for a circular area is submitted instead of the actual location of the worker. To identify the winners privately, the framework combines -anonymity with spatial location privacy preservation during winner selection. The selected workers can then perform the task and submit their results to the blockchain. Security-conscious workers submit their results through private blockchains, whereas the rest can submit them through the public blockchain. Once the results are verified, each worker receives his/her rewards through their corresponding blockchains from the requester.

4.3.4. Other encryption approaches
In Shu et al. (2018), Shu et al. combine multi-user searchable encryption (Song et al., 2000) with segment tree (Lu et al., 2012) to protect the task and workers’ location privacy on crowdsourcing platforms. The basic idea in this work is that the task location is matched to the worker’s location in a privacy-preserving manner. The worker is allowed to execute the task if and only if the match is successful. The study presents locations in 2-dimensional form (). A spatial map is divided into 
 zones and each zone is labeled as (), where 
 and 
. The label information is then represented in a segment tree, with each leaf node representing the value of either  or . The path from the root node to a leaf node defines the cover path for the leaf node and each node in the tree is assigned a unique binary code. This is similar to the attribute group keys (Edemacu et al., 2020, Hur and Noh, 2010) in attribute-based encryption. During task outsourcing, a requester encrypts the task and its location . It sends the encrypted information to the MCS server. During the task assignment, a worker submits a query  for tasks in the region 
, where 
 and 
, i.e., 
 represents the range of  and 
 represents the range of . The worker uses the segment tree to encrypt the range query, generates a trapdoor and submits the trapdoor to the MCS server. The MCS server uses a hash function to match the trapdoor with the encrypted location information of the task. If a match exists, i.e., 
 and 
, the worker is allowed to execute the task. Otherwise, the worker is denied task execution. A similar approach is also used in Zhou et al. (2020).

To protect the location privacy of secondary users and prevent data injection attacks during crowdsourcing-based cooperative spectrum sensing in cognitive radio, Zina et al. (2016) proposes the IPCMD. IPCMD employs a secret sharing technique to allow the fusion center (FC) to aggregate the spectrum sensing reports from the secondary users without learning their individual reports. The framework then combines the aggregated reports with their scores during the data fusion. This prevents the FC from learning the location information of the secondary users.

4.3.5. Discussion
Here we compare the encryption-based frameworks discussed in this subsection.

•
System architecture: The trusted servers in encryption-based approaches only generate public–private key pairs. They do not take part in the actual data privacy protection process. As a result, most of the encryption-based approaches rely on the MCS-LOC architecture, except for Zhang et al., 2020, Yang et al., 2019, Zou et al., 2021 that employ blockchain to replace the server.

•
Privacy Model/Mechanism and Protected Data: Most encryption-based frameworks employ HE, ABE and blockchain mechanisms or their combinations for privacy protection. A few frameworks such as Shu et al. (2018) and Zhou et al. (2020) have employed a searchable encryption scheme while Zina et al. (2016) is based on a secret sharing mechanism. Regarding the protected data, most of the frameworks focus on protecting location privacy except Yang et al. (2019) that protects the location sequence privacy. On top of location privacy protection, Liu et al. (2018b) preserves the privacy of each worker’s velocity. Location and task content privacies are preserved in Yuan et al. (2019) and Huang et al. (2021a), and the privacy of each worker’s location and report is preserved in Zina et al. (2016).

•
Computational Overhead: In the encryption-based approaches, all the location encryption tasks are performed by the workers. This imposes a high computational overhead on the workers. The MCS servers generally perform computations on the encrypted locations, i.e., they either match an encrypted worker location with a task location or use the encrypted worker location to compute a worker’s distance from the task location. Thus, MCS servers experience moderate computational overheads.

•
Data Utility: Overall, the data utility in encryption-based frameworks is high since there is no noise involved during location privacy preservation.


Table 3. Comparison among spatial cloaking-based approach, DP-based approach, and encryption-based approach: In the column of computational overhead, we use the ‘–’ sign to represent that the corresponding component is not used.

Category	Architecture	Privacy model /	Computational overhead	Utility
mechanism	Worker	MCS server	Trusted server
Spatial cloaking-based appr.	MCS-TP	-anony., -div.	Low	Low	High	Low
DP-based	PSD-based appr.	MCS-TP	PSD	Low	Low	High	Medium–high
appr.	GeoInd-based appr.	MCS-LOC	-GeoInd	Medium	Low, High	–	Low–medium
Encryption-based Appr.	MCS-LOC,	HE, ABE, Blockchain	High	Medium	–	High
MCS-P2P
4.4. Comparison among major category approaches
Table 3 shows a comparison among the spatial-cloaking-based approach, DP-based approach, and encryption-based approach. Here, the DP-based approach is further categorized into PSD-based and GeoInd-based approaches, because although they belong to the same category, their characteristics are significantly different. Furthermore, some dimensions, such as protected data and personalized privacy level, are omitted in Table 3, because these dimensions depend on individual solutions; thus, solutions belonging to the same category are different from each other in these dimensions.

The spatial-cloaking-based approach commonly relies on the MCS-TP architecture because it requires a trusted server to generate cloaked regions. -anonymity is the most commonly used privacy model by this approach. The computational overhead of the trusted server is high, whereas that of the workers and the MCS server is low. This is because an expensive privacy-preserving mechanism is performed by the trusted server. Compared with the other approaches, the data utility of this approach is low.

The privacy mechanism used by the DP-based approach is either PSD or -GeoInd, with a few exceptions. The PSD-based approach requires a trusted third party, whereas the GeoInd-based approach does not. Thus, the DP-based approach relies on either MCS-TP or MCS-LOC, depending on the privacy model used. For the PSD-based approach, the computational overhead of the trusted server is high, whereas that of the workers and the MCS server is low because an expensive PDS mechanism is run by the trusted server. However, in the case of the GeoInd-based approach, the workers need to obfuscate their location, which requires moderate computational overhead. Furthermore, the computational overhead of the MCS server in the GeoInd-based approach can be either low (for a non-obfuscation-function-based scheme) or high (for an obfuscation-function-based scheme), depending on the need to generate an obfuscation function by the MCS server. The data utility of this approach is higher than that of the spatial-cloaking-based approach, but lower than that of the encryption-based approach.

In the case of the encryption-based approach, HE, ABE, and blockchain mechanisms are commonly used for privacy protection. This approach exploits either MCS-LOC architecture or MCS-P2P architecture (if the blockchain is employed). In terms of the computational overhead, as the workers need to perform all the necessary encryptions, the worker-side overhead is high. Overall, the MCS server in this approach experiences a medium-level computational overhead. The data utility of this approach is higher than that of the other approaches because noise is not added to the true location during location privacy preservation.

4.5. Implementation and evaluation dataset
A common challenge faced in MCS research is the lack of service platforms in which the proposed solutions can be extensively evaluated in real-world service scenarios. Consequently, the majority of solutions developed in MCS have been evaluated using simulators that utilize either synthetic datasets, real-world datasets, or their combinations, instead of using real-world MCS service platforms. This is the same for the works surveyed in this paper.

Table 4 summarizes datasets used in each surveyed paper in its simulator to evaluate the proposed solutions. Although some solutions rely on synthetic datasets that are carefully generated using various distribution mechanisms, most of the works employ real-world open datasets. The most commonly used real-world open datasets are check-in data, such as Gowalla (2021), Foursquare (2021), and Yelp (2021), and trajectory data, such as T-drive (2021) and Beijing taxis trajectory (Lian and Zhang, 2019). Additionally, 311 dataset (2021a), CRAWDAD (2021), and SensorScope Data (2021) are other commonly used datasets. These real-world datasets are adapted to the MCS scenarios in various ways. For example, in the cases of Gowalla, Foursquare, and Yelp datasets, which contain the check-in records of users of a location-based social network, the simulator assumes an MCS scenario where users represent workers, check-in locations are sensing task locations, and locations where users check-in correspond to spots on which workers accept sensing tasks.


Table 4. Summary of evaluation datasets that each surveyed paper uses in its simulator.

Reference	Synthetic datasets	Real-world datasets
Used	Used	Dataset name
Spatial cloaking-based mechanisms
Kapadia et al. (2008)		✓	CRAWDAD
Huang et al. (2010)		✓	CRAWDAD
Murshed et al. (2010)	✓		
Kazemi and Shahabi, 2011b, Kazemi and Shahabi, 2011a	✓		
Vu et al. (2012)	✓		
Pournajaf et al., 2014, Pournajaf et al., 2015	✓	✓	Gowalla
Vergara-Laurens et al. (2014)		✓	Air pollution data collected by the authors
Wang et al. (2017b)		✓	CRAWDAD
DP-based mechanisms
To et al., 2014, To et al., 2017		✓	Gowalla, Yelp
Gong et al. (2015)		✓	Gowalla
Maruseac et al. (2015)	✓		
Wang et al. (2017c)		✓	D4D (Blondel et al., 2013)
Qiu and Squicciarini (2019)		✓	CRAWDAD
Tao et al. (2020)	✓	✓	Didi Chuxing GAIA open dataset (Didi Chuxing GAIA Open Dataset, 2021)
Wang et al., 2016b, Wang et al., 2020		✓	SensorScope,
Beijing taxis trajectory
Wang et al. (2018a)		✓	Foursquare
Jin et al. (2019)		✓	311 dataset
Yan et al. (2019b)		✓	Gowalla
Wang et al. (2015)	✓		
To et al. (2018)		✓	T-drive
Shen et al. (2019)	✓		
Jin et al. (2021)		✓	311 dataset
Huang et al. (2021b)		✓	311 dataset, Yelp
Huang et al. (2019)		✓	Shanghai taxi trajectory
Xia et al. (2021)		✓	T-drive
Jin et al. (2016)		✓	CRAWDAD
Yan et al. (2019a)		✓	Foursquare
Yang et al. (2021)		✓	SensorScope
Encryption-based mechanisms
Liu et al., 2017, Liu et al., 2017b		✓	Gowalla, Yelp
Liu et al. (2018b)		✓	Gowalla, Yelp
Ren et al., 2018, Zhai et al., 2018		✓	Gowalla
Xiong et al. (2019)		✓	Gowalla, T-drive
Han et al. (2020)	✓		
He et al. (2020)		✓	New York city taxi (Anon, 2021e)
Ding et al. (2021)	✓		
Yuan et al. (2019)		✓	Dataset crawled from twitter by the authors
Huang et al. (2021a)		✓	Brightkite (Cho et al., 2011)
Zhang et al. (2020)		✓	Gowalla
Yang et al. (2019)		✓	Yelp
Zou et al. (2021)	✓		
Shu et al., 2018, Zhou et al., 2020		✓	Gowalla
Zina et al. (2016)	✓		
5. Current status of real-world applications
MCS has recently gained popularity because of its potential to solve diverse real-world sensing problems, and many real-world applications using MCS have been developed. In this subsection, we summarize the current industrial status of MCS-based applications.

5.1. Traffic system
The monitoring and collection of real-time traffic information is one of the most successful MCS applications. Google Waze (2021), whose primary functionality is to provide turn-by-turn navigation information to drivers, is the most successful MCS application in the traffic system domain. Waze exploits data from application users to provide a community-driven navigation map. It allows drivers on roads to report traffic conditions and incidents, which are then aggregated by the server. The aggregated information is used to update the navigation map in real time. DiDi Chuxing (2021), which provides an app-based transportation service, allows application users to share roadside events, such as visual information about road works, accidents, and traffic jams, through their mobile devices (Yu et al., 2021). The information gathered from drivers on roads is exploited to support crowdsourced road navigation services. Moovit (2021) uses crowdsensed data to provide public transit route planning services to users. Furthermore, several digitized map services provided by IT companies, such as Apple Maps (2021) and Google Maps (2021), are currently adopting crowdsensed incident reporting from drivers to provide better driving plans to map users.

5.2. Citizen collaboration
MCS opens a new way for citizens to contact their local governments to report and solve non-emergency community issues collaboratively. Citizens can instantly report various neighborhood non-emergency issues, such as potholes, graffiti, road obstructions, and park maintenance requests, to their local governments through free mobile applications, instead of physically visiting government offices. For example, FixMyStreet (2021), which is a smartphone- and web-based application, enables concerned citizens in the United Kingdom to report non-emergency neighborhood issues with photo images to their local government agencies. Similar applications include SeeClickFix (2021) and PublicStuff (2021) in the United States.

5.3. Mobile social networks
Foursquare (2021) is a popular social location-based service that uses the social contexts contributed by users. It allows users to share their current location (i.e., check-in at a location) and information about their visits, which are sensed by answering questions asked by the application. Foursquare leverages incentive mechanisms based on mayorships and badges to attract more users to contribute to sensed data actively. Yelp (2021) is a social networking site that connects people with local businesses. Yelp users are allowed to review (i.e., sense) local businesses and share the reviewed data. Then, the reviewed data are further voted by other Yelp users as useful, cool, or funny according to their usefulness.

5.4. Other applications
Gigwalk (2021) is a mobile crowdsensing platform that connects businesses with smartphone-enabled users who are willing to perform tasks at their nearby locations to earn money. Gigwalk presents various sensing tasks, such as taking photographs of neighborhood businesses, road signs, or social events, to users who can then select them to make some money. Field Agent (2021) is a crowdsensed mobile application that collects real-time market data. For example, users of Field Agent can visit nearby markets where they take photos of the products and prices, and upload them to the application server. Then, the aggregated data from the server are used to compare product prices across retailers in the country.

5.5. Discussion
MCS has attracted extensive attention from academia, and there have been extensive academic studies to address diverse issues in MCS, including incentive mechanisms, task assignment, quality control, security and privacy protection mechanisms, and resource management. Simultaneously, as summarized in the previous subsections, many MCS applications have been recently developed to solve various real-world problems in diverse fields. However, the majority of these applications have not yet fully adopted new innovations developed by academia. This is also the case for the location privacy protection mechanisms surveyed in this study. Several innovative mechanisms have been proposed to protect location privacy in MCS over the last decade, but they have not yet been adopted in real-world applications. Furthermore, although a few applications, such as Waze, claim that they perceive issues caused by location privacy, and thus, privacy protection mechanisms are considered, the details about which methodology is used are not disclosed to the outside.

6. Future research directions
This section discusses some open challenges and research directions for location-privacy provision in MCS.

Protection for continuous location disclosure: Continuously reporting location information to MCS service providers may raise privacy issues because of the potential threat posed by examining the correlation among different location reports. Even if there exist some approaches, such as Wang et al., 2017b, Yan et al., 2019b, Huang et al., 2019 and Jin et al. (2016), most existing approaches provide privacy protection for a single location data of a worker, without considering the potential tracking attacks caused by continuously disclosing the worker’s location to MCS service providers. Thus, developing effective and efficient algorithms that are resilient against tracking attacks in the context of MCS can be further investigated in the future.

Furthermore, even the existing solutions, such as Wang et al., 2017b, Yan et al., 2019b, Huang et al., 2019 and Jin et al. (2016), do not consider the potential threat incurred by continuously exposing the worker’s location information to the MCS service providers during the process of performing a series of different sensing tasks. To develop a mechanism that can provide privacy protection for such case, it is essential to maintain the history of workers who have performed a series of different sensing tasks and to leverage entire historical information of workers when quantifying location-privacy disclosure. The challenges here are how to efficiently maintain historical records of a large number of workers who performed a large number of sensing tasks and to effectively measure the risk of location-privacy leakage by exploiting the historical information on location-privacy disclosure. Thus, future investigations are required to address such challenges.

Privacy-utility trade-off: Although protecting location information of workers in MCS improves their privacy and thus attracts more potential workers to actively participate in MCS, it affects the quality of sensing task results. As workers report the task results together with their privacy-protected location information to the MCS server, from the viewpoint of service requesters, some degradation may occur in the utility of the final sensing results, caused by uncertainty regarding the information of workers’ real locations. Thus, MCS service providers must appropriately handle this privacy-utility trade-off. One possible research direction for this issue is to explore mechanisms that can automatically find the optimal degree of privacy level that satisfies both the privacy requirement expected from workers and the quality of sensing results expected from service requesters.

Considering the diverse privacy requirements from different workers in MCS, the demand on the personalized privacy-preserving mechanism will increase in which workers choose their own privacy level individually. Although a few approaches exist, including Wang et al., 2018a, Jin et al., 2019, in most existing approaches, the privacy-utility trade-off is centrally determined by the service providers. Usually, the individually decided workers’ privacy levels impose the additional computational complexity on the process of task allocation in MCS owing to the different privacy levels. Therefore, developing efficient and effective algorithms targeting MCS environments that support the individually decided workers’ privacy levels can be investigated further.

Computational efficiency: Much as encryption-based approaches exhibit high data utility, achieving acceptable security with encryption-based frameworks is generally computationally demanding. The existing encryption-based approaches rely on the workers encrypting their location data before reporting it to the MCS platform. This imposes a high computational overhead on the workers. Due to the heterogeneous nature of devices used by the workers, lessening the computational burden on the workers is a desirable attribute. One possible approach to alleviate this problem is by outsourcing the encryption computations to an external entity. Thus, a future investigation of encryption-based approaches with outsourced computations for efficient location privacy preservation in MCS can be conducted.

In addition, integrating the task content and report content privacy on top of the location privacy naturally makes more sense. Although the studies such as Yuan et al. (2019) and Huang et al. (2021a) have done so, they rely on bilinear maps which are computationally demanding. Thus, further investigations to achieve efficient task and location privacy and not reliant on bilinear maps are necessary.

7. Conclusion
Over the last decade, MCS has emerged as a powerful tool to efficiently and effectively solve complex and scalable sensing problems by outsourcing them to a large number of workers having mobile devices with sensing and computing capabilities. However, as with any other new innovative technique, MCS also brings with it new privacy issue problems. As workers have to disclose their location information to the MCS server, there exist risks of leakage of workers’ sensitive information, such as home and workplace locations, hospital visits, political affiliation, and religion, which can be inferred from location information. Thus, guaranteeing location privacy is essential to attract more workers to actively and voluntarily participate in MCS.

Accordingly, in the past few years, extensive studies have aimed to protect the location privacy of workers in MCS. Thus, in this paper, we comprehensively surveyed state-of-the-art mechanisms in protecting the location privacy of participants in MCS. We classified existing studies into three categories—spatial cloaking-based approaches, DP-based approaches, and encryption-based approaches—and evaluated and compared their characteristics based on four important aspects. We, then, highlighted certain promising future research directions to spur further research in this area. We believe that this study will promote more research efforts toward the wide adoption of location-privacy protection mechanisms in MCS.

