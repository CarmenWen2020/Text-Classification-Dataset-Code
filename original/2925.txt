Content area K-12 teachers are increasingly asked to integrate computing and computational thinking into their classrooms, yet they often have little experience with computing. The purpose of this study was to understand how science teachers, new to computing and integrating computational thinking into their classrooms, supported students as computational problem solvers. In the project from which this research was drawn, 8th grade science teachers in three US school districts integrated computer game design into their study of climate systems and climate change. We conducted participant observation, collected teacher implementation logs and interviewed 15 teachers engaged in the three-year design research project, Building Systems from Scratch. Analysis through grounded theory yielded several results related to teachers’ orientations, strategies, and use of resources to create systems of distributed expertise. We identified five major themes: a) releasing responsibility to students, b) co-learning with students, c) encouraging students’ independent problem solving, d) building interdependence among students, and e) providing multiple other resources. Findings are discussed in relation to the literature on integrating computational thinking into content area classrooms.

Previous
Next 
Keywords
Distributed learning environments

Teaching/learning strategies

Elementary education

Pedagogical issues

Applications in subject areas

1. Introduction
Educators have long called for computation to be included in core academic curricula (ACM, 2003). They have also recognized the complexity of such a task (Barr & Stephenson, 2011). Recently, educators have been asked to introduce computational thinking, or what we call computational thinking practices (CTP), across the curriculum, including science. Successful inclusion of CTP can deepen learning in science (NRC, 2011), and science can provide a context in which CTP are useful and meaningful (Weintrop et al., 2016) especially in student-centered contexts (e.g., Grover et al., 2019). Since science teachers often do not have experience with CTP themselves or with teaching CTP, they would benefit from learning how to restructure learning in the classroom for success (Bower et al., 2017; Israel et al., 2015; Kong et al., 2020; Lee & Malyn-Smith, 2020; Yadav et al., 2018).

Distributing expertise and responsibility for knowing among students is one strategy to mitigate teaching topics unfamiliar to teachers, including CTP. Thus, we ask, what orientations, strategies, and resources do science teachers draw on when using distributed expertise to support student computational problem-solving? We argue that teachers who are less, or not at all, familiar with CTP and computational problem-solving can successfully employ strategies for supporting students in learning settings that seek to integrate CTP in the content areas.

This paper explores themes related to the ways 15 eighth grade science teachers supported students’ CTP practices as they implemented a designed science curriculum in which students used the Scratch programming platform, an object-oriented drag and drop environment (Resnick et al., 2009) to create computer games about climate change. In addition to identifying tensions, science teachers with little experience in computing found several strategies useful in aiding computational problem-solving. These included leveraging distributed systems of expertise among students through online search strategies, curricular resources, and identifying student experts publicly to peers (Cassidy, Tucker-Raymond, & Puttick, 2020). The present study ends with recommendations for teachers and curriculum designers to consider as they integrate unfamiliar computational tools and practices as a part of student-centered science classrooms.

1.1. Literature review
1.1.1. Participatory pedagogy and distributed expertise
As we will argue, teachers must be flexible in structuring learning relations in integrated CTP-science classrooms. We understand learning as a constructive and cultural process that emphasizes the intellectual resources of participants and the ways in which they are enacted through joint engagement in activity (Cole, 1996). Furthermore, we recognize all learners as potential knowledge and content producers, not just consumers (Halverson, 2009; Jenkins, 2008). Participatory pedagogies encourage reliance on distributed expertise because responsibility for knowledge resides with all participants (Tucker-Raymond, Puttick, Cassidy, Harteveld, & Troiano, 2019; Kafai & Peppler, 2011), since the locus of authority in the classroom shifts away from the teacher (Halverson, 2012). Knowledge is spread across individuals, groups, and tools, creating distributed systems of expertise (Dillenbourg & Traum, 2006). Distributed expertise enables individuals to accomplish work that they would be unable to achieve alone (Valanides & Angeli, 2008). This approach emphasizes designed products and allows students to take ownership of their work and contribute to a shared purpose (Halverson, 2009). Not only are students responsible for knowing and for acting as resources for others, but they are also free to seek other sources of information (e.g., online forums) during learning. Extended time allotted for activities also permits expertise to arise naturally as teachers and students begin to recognize experts in the classroom (Brown et al., 1993) and participatory pedagogies have shown that shared responsibility for knowing creates an environment that broadens and deepens CTP (e.g., Kafai & Burke, 2014; Pinkard et al., 2020). Using game design as a participatory approach allows youth to shape content, collaboratively solve problems, draw on multiple resources including peers and others (Baytak & Land, 2011), and develop confidence and aptitude in making games (Tucker-Raymond, Lewis, Moses, & Milner, 2016, Tucker-Raymond et al., 2019).

However, participatory pedagogies require teachers to change their roles and relationships to students and to knowledge (Tucker-Raymond et al., 2019). No easy task, teachers need to be able to cede power and collaborate with students to engage practices that characterize participatory learning environments (Cassidy et al., 2020; Garcia, 2015; R.; Hadad, Shamir-Inbal, et al., 2020).

1.1.2. Teachers perceptions of student-centered curricula
In student-centered curricula, such as the one that served as the context for this study, the teacher and curricula set the final objective, but students work out how they will reach that objective (Aksit & Wiebe, 2019; Pedersen & Liu, 2003). However, a curriculum-centered paradigm dominates public schooling, and “has marginalized, and in some areas, even stigmatized child-centered practice in K-12 schools” (Stone, 2020, p. 51). Such a paradigm can be detrimental to developing practices based in participatory pedagogy and student-centered learning in technology-rich settings. In a survey of 130 teachers in Maryland integrating computational thinking into their classrooms, Garvin et al. (2019) found that, when asked what resources they used, no teacher mentioned looking to their students as possible resources and 19% said they had no resources at all. That is, teachers do not necessarily see the students in their classrooms as resources for other students' learning. Participatory pedagogy and distributed expertise change that paradigm. One of the challenges of child-centered practice is that the teacher may not know much about what the child is studying. Thus, learning to shift to student-centered instruction and recognizing students as resources for others’ learning can be difficult.

We argue that student-centered teaching is less about knowing the subject matter and more about becoming a co-learner and trusting students to teach each other. In student-centered learning, teachers become guides rather than tellers, helping students with resources, but not giving them the answers.

In a survey of eleven science teachers who participated in a technology integration mentoring program focused on student centered-learning, nine felt that they did not have enough time in their lives for their own learning about, and comfort levels with, student-centered learning to increase (Rosenberg & An, 2019). Understanding students as resources is a strategy that has been shown to support students’ learning and engagement in technology-rich student-centered experiences (Chen et al., 2020).

In another study (Hadad, Shamir-Inbal, et al., 2020), thirteen teachers were interviewed about their orientations, strategies, and resources for integrating CTP into a computing curriculum one year after professional development. Nineteen percent of codes from the study were related to using students as resources for other students’ learning. The authors found that teachers were much more likely to describe their roles as guides and partners in learning a year after their course than immediately after the course, suggesting that the teachers became more student-centered as they practiced integrating CTP concepts into the curriculum. Even so, it is clear that teachers seldom articulate the ability of students to teach one another (Pedersen & Liu, 2003). Teachers in the same study did believe that becoming more student-centered allowed their students to work through difficult problems on their own. Even in a successful program teaching computational thinking to students, Grover and colleagues (2017) found that students needed time to problem-solve together to engage more deeply with the computational thinking ideas in the curriculum.

1.1.3. Computational thinking practices
We use the phrase computational thinking practices (CTP) instead of the more prevalent computational thinking to reflect the doing and socially constituted nature of work with digital computing devices. CTP were first defined in the context of computer science, but they also include a range of practices that are central to other scientific and mathematical disciplines (NRC, 2008). These include modeling and simulation, systems thinking, data practices, computational problem-solving, and collaboration, among others (Puttick & Tucker-Raymond, 2018, Tucker-Raymond et al., 2019; Weintrop et al., 2016; Zhang et al., 2020).

Teaching CTP has become increasingly prevalent in K-12 education yet what compelling learning contexts look like is still under-researched (Angeli & Giannakos, 2020; Grover & Pea, 2018; Hsu et al., 2020; Lee et al., 2020). Sengupta et al. (2013) reviewed synergies between CTP and other curriculum domains identified by various researchers since 1988. They detail how CTP have not been systematically integrated into K-12 curricula, despite calls for integration into domains such as science and math (ACM, 2003; NRC 2011). More recently, scholars have explored the extent to which teacher planning reflects the push for integration (e.g., Israel & Lash, 2020). Like others, the motivation for our instructional design considers the fact that integrating CTP with science curricula requires designers to consider the challenges that students face in learning CTP, the high demand on teachers, and careful rethinking for successful integration (Cassidy et al., 2020; Rich et al., 2020; Sengupta & Wilensky, 2011).

Moreover, computational thinking is “inherently situative,” depending on the nature of the learning environment and the tasks at hand (Wilkerson et al., 2020). Zhang and Nouri (2019) examined 55 empirical studies from 2007 to 2017 that used Scratch to teach CTP. Their review confirmed Brennan and Resnick's (2012) framework of concepts (e.g., loops, algorithms, conditionals), practices (e.g., abstracting, testing and debugging) and perspectives (e.g., expressing) as well as other skills such as input and output, and reading, interpreting, and communicating code. However, Zhang and Nouri (2019) did not capture teachers' perspectives about their knowledge of or orientations to Scratch or CTP.

In this paper we focus on how teachers supported one category of CTP, computational problem-solving, because that was the primary way the teachers in our study defined CTP. Computational problem-solving in our study included learning to program, interpreting and communicating code, developing algorithms, debugging and troubleshooting, and anticipating user interaction. Table 1 presents one category of CTP, computational problem-solving. Although the authors have a more expansive definition of CTP that includes systems thinking, modeling and abstraction, and communication which we tried to convey to teachers, Table 1 contains the practices that teachers highlighted in their interviews, similar to Cabrera (2019).


Table 1. Computational thinking practices as computational problem solving.

CTP Category	CT Practices	Example: Representing climate systems
Computational Problem-solving	Problem decomposition	
-
Decompose problems into sub-problems

-
Simplify complex problems so that mapping of features onto computational solutions is more accessible

Logical thinking	
-
Use if, if else, logic operations, e.g., to support feedback interaction

Data representation	
-
Create and operate on variables, lists to introduce system complexity

Flow control	
-
Use repeat, forever commands to control sequencing, or flow

Abstraction	
-
See relationship between game event and related code (supports remixing)

Debugging	
-
Determine why components of game do not work

1.2. Computational thinking and science
CTP and many components of the science practices identified in the NGSS (NGSS Lead States, 2013) can be conceptualized as overlapping. Systems thinking and modeling for example, are key practices recognized both in science and in computational thinking (e.g., Aksit & Wiebe, 2019). Abstraction and data representation, while recognized as CTP, are likewise frequently discussed in the context of science (Weintrop et al., 2016). Integrating game design can support student learning both science and CTP. For example, prior work has shown that game design can be effective in teaching about systems thinking, specifically identifying systems components and interactions (Puttick, Strawhacker, Bernstein, & Sylvan, 2014; Puttick & Tucker-Raymond, 2018), which is foundational for learning about climate change. Litts et al. (2020) worked with youth engaged in game design in an afterschool program focused on environmental and civic concerns. They found that game design in this context empowered youth to “probe diverse interdisciplinary content and more deeply engage with CTP” (p. 312). While integration of CTP in STEM has been found to support learning in the relevant STEM discipline, integrated science and CTP learning opportunities for in-service teachers have remained limited (Garvin et al., 2019; Tang et al., 2020).

1.2.1. Computational thinking practices and teachers
Most extant research to date on CTP and teachers specifically is on what teachers think CTP are (Chipman et al., 2019; Kong & Lao, 2019; Kong et al., 2020). Some previous research has explored teachers’ beliefs about CTP and how they can learn about computational thinking (Cheng et al., 2020; Juškevičienė, 2020), as well as their perceptions of having students design before they begin programming (Waite et al., 2020), and what they think CTP are good for (Dong et al., 2019; Wheeler et al., 2020). Teachers often associate computational thinking with using a computer (Yadav et al., 2018), debugging, and programming (Yan et al., 2020); logical thinking and solving problems (Denning, 2017; Yan et al., 2020), and mathematical thinking (Cassidy et al., 2020; Sands et al., 2018).

Kong et al. (2020) described the need to understand teachers' pedagogical knowledge along with their content knowledge. They reported that teachers' beliefs about how to implement CTP changed in a statistically significant way after a two-semester professional learning opportunity that included classroom implementation yet did not go in depth qualitatively to analyze teachers' responses. Witherspoon and Schunn (2019) investigated the relationship of teacher learning goals to students’ attitudes and CTP learning gains in a robotics study. They reported that the level of importance teachers gave to CTP learning goals correlated to higher learning gains among students.

Professional development (PD) workshops have shown how teachers’ beliefs about computational thinking change over time (Bower et al., 2017). For example, teachers reported initially being intimidated about teaching CTP but became more comfortable with the idea of integrating computational thinking after their training (Celepkolu et al., 2020). Teacher self-efficacy and their understanding of the role of CTP in various disciplines increased after participating in PD to infuse CTP in their science, math, language arts and social studies curricula (Jocius et al., 2019).

Teachers with little computing experience have also shown willingness and ability to integrate CTP with integrity into their mathematics and science curricula. However, this research has not investigated how teachers support students’ problem solving (Hampton et al., 2019; Israel & Lash, 2020). For example, after a year-long PD workshop to integrate CTP in science, elementary teachers were excited to incorporate CTP in their instruction, believed that science and CTP can be taught simultaneously and thought CTP were engaging for students (Ketelhut et al., 2020). In a district wide implementation effort, Yan et al. (2020), found that teachers did create collaborative learning environments and scaffolded academic language in teaching CTP. Similarly, Waterman et al. (2020) helped teachers to enhance lessons to integrate CTP, which in turn enabled elementary students to make sense of population dynamics data. Yet, there is scant literature about how teachers adjust their orientations, strategies, and resources for classroom integration, particularly if they have little experience.

1.3. Research question
To summarize, most research on teachers and CTP is on what teachers think computational thinking is, not how they support it (e.g., Juškevičienė, 2020; Kong et al., 2020). Research on teachers integrating student centered classrooms in technology-rich settings indicates that teachers do not view students as resources (e.g., Garvin et al., 2019) and most work on supporting students' CTP has been from the viewpoint of researchers, not teachers (e.g., Zhang & Nouri, 2019). Our work adds to the field describing core academic teachers' orientations, strategies, and resources for supporting students’ learning of CTP in student-centered technology rich experiences through distributed expertise. Thus, we ask:

What orientations, strategies, and resources do science teachers draw on when using distributed expertise to support student computational problem-solving?

2. Material and methods
2.1. Overview
Data come from a three-year design research study, Building Systems from Scratch, in which multiple cycles of curriculum development were implemented with increasing numbers of teacher and student participants. The onto-epistemological position we take with respect to our research is that learning can only be understood through study in naturalistic settings and that learning settings can be improved through the study of participants' experiences. Thus, we employ design-based research for understanding teaching and learning (R. Hadad, Shamir-Inbal, et al., 2020; Papavlasopoulou et al., 2019). To understand teachers’ experiences in the learning environment we used interpretive methods of analysis so that we could then refine its design and generate principles for learning in other settings (Bell, 2004). We describe the design of the pedagogical context next.

The overall goal of the project was to design, study, and test the efficacy of a curricular unit that integrated CTP, game design, and climate change science in 8th grade science classrooms. We conjectured that integration would be fruitful, but the efficacy of the curriculum, enacted by teachers and students, was one of the original research questions of the project. The authors were the primary designers of the curriculum, participant observers in the classroom, and collected and analyzed the data. The project included three school districts serving a total of 18 teachers (15 in this study) and 1980 students. Primary data sources for the present study included teacher interviews, teacher implementation logs, and classroom observations and fieldnotes. We used video and audio data to corroborate and triangulate the accuracy of these data.

In the curriculum, students created climate change-themed computer games in Scratch with the stated goal of teaching others about some aspect of climate change. Across approximately 23 55-min class periods, curriculum topics included: a systems thinking approach to understanding climate change; defining educational games; introducing the programming platform; and then planning, designing, completing, and showcasing games to authentic audiences, for example, peers, other students.

2.2. Professional development and curriculum implementation
All teachers, except for two teachers who contributed to the original design in year one of the project, participated in a 3-day PD seminar (Table 2). The design teachers participated in their own explorations of the Scratch platform, assisted by the district technology integration specialist.


Table 2. Total number of teachers interviewed in the project each year.

Year 1	Year 2	Year 3
City Bridge	2 (1st implementation)	1 (2nd implementation)	–
Meadowlark	–	6 (1st implementation)	5 (1st implementation)
5 (2nd implementation)
Baskerville	–	–	2 (1st implementation)
Total	2	7	12
As designers, we used PD to give teachers exposure to the integrated curriculum as a whole but paid particular attention to the computational side because we knew from conversations with the district science coordinator that this would be where teachers would have the least amount of experience. We tried to mitigate the unease that teachers expressed about integrating computation in their classrooms through several strategies. We used Scratch as a computational environment for its accessibility as an entry-level programming language. In Year 1, we drew on the expertise of the district technology integration specialist to help design the PD and to provide support in teachers’ classrooms when she could. In subsequent years, although teachers asked building technology specialists to attend their classrooms from time to time, such assistance happened infrequently, if at all. When researchers were observing, we occasionally offered help with programming, although not all were familiar enough with Scratch to help. Therefore, teachers were on their own with their students for the most part.

Teachers were asked to do approximately 4 h of homework prior to the seminar to learn the basics of Scratch. A follow-up day of PD was offered during the school year which was attended by approximately half of the teachers. By design, the researchers modeled a participatory approach in leading the PD. During PD, teachers reviewed the curriculum (with an emphasis on (a) how systems thinking supported the understanding of climate science, and (b) strategies for differentiating engagement with programming based on students’ prior experience), reviewed and discussed vignettes that demonstrated student discourse in a classroom that supported participatory culture, and discussed strategies for supporting distributed expertise among students both with respect to modeling topics related to climate science from a systems perspective, and to support peers in programming. In addition, they gained experience with CTP through deep-play (Koehler et al., 2011) as they collaborated in pairs to create games about a self-selected system related to climate change. In all, teachers spent anywhere from 4 to 10 h learning Scratch and designing games.

The curriculum itself <URL> provided resources that supported distributed expertise in several ways:

●
Online and physical resources about climate change and computational problem-solving, for example, reviews of climate systems, tutorials on programming, instructions for remixing, backpacking and debugging, that students could consult:

o
Instructional cards from Scratch explaining how to create common coding procedures,

o
Links to community Scratch forums (e.g., scratch.mit.edu) for answers to common coding or design problems, and

o
The Creative Computing guide (scratched.harvard.edu), originally designed for teachers, to help students with certain scripts, for example, how to create variables, as well as to find code for possible remixing.

●
Instructional strategies recommended in the curriculum designed to elicit student expertise and set the expectation that they would learn from each other:

○
Collaborative activity structures (e.g., pair programming, jigsaw grouping),

○
Searching online,

○
Student critique of each other's games.

○
Assigning expert students to help others solve problems,

○
Allowing for expertise to emerge, and

○
Encouraging students to draw on others' expertise by remixing and borrowing code both from each other and from publicly available games.

2.3. Setting and participants
The teachers in this study came from three separate school districts. Two teachers came from City Bridge, an economically and ethnically diverse city in the Northeast US. Eleven teachers came from Meadowlark, an affluent suburban town in the Northeast US, serving mostly white and Asian students, and two teachers came from Baskerville, an economically diverse city in the US Midwest, serving mostly white students. Implementation in Meadowlark was part of a district-wide initiative that included six teachers in the first year of implementation, and all 8th grade teachers in the following year with support from the district science coordinator. Implementation in City Bridge and Baskerville was conducted by teachers who volunteered to participate in the study with approval from district leaders, while the remaining teachers were asked to participate by their district administrators. All 18 8th grade science teachers who participated in the implementation gave informed consent and participated in the study. Three teachers, all from Meadowlark, did not sit for interviews at the end of their implementations and were excluded from the study. We wanted to understand the broad range of patterns and related to orientations, strategies, and resources, and so we used data from all the remaining interviews. All participating teachers were new to computational problem-solving in their first year of implementation. No teachers reported much experience with creating computational programs or teaching about them.

Teachers' experience ranged from a first-year teacher to veterans with 12–28 years teaching middle school science. All had either a bachelor's or master's degree with a science concentration. Half had more than four years of experience teaching climate science. Teachers reported being somewhat familiar with the Next Generation Science Standards but not familiar at all with Computer Science standards.

Table 2 shows how many teachers participated each year and whether it was their 1st or 2nd implementation:

2.4. Data collection
Primary data sources for this paper are interviews with 15 different 8th grade teachers after their first year of implementation to understand their experiences in implementing the curriculum (interview protocol attached as an appendix). Six of those teachers were interviewed again after their returning implementation to understand their experiences in the second year of teaching and how they compared to the first year. When possible, teachers at the same school who implemented at the same time were paired for the interviews, resulting in 12 distinct interview sessions. Teachers were interviewed in pairs for three reasons: a) it helped reduce the data collection and logistics burden on the researchers, b) teachers implementing at the same time consulted with one another during implementation, and c) teachers were able to listen to the other teacher, be reminded about their own experiences, and fill in any gaps from initial statements (Arksey & Knight, 1999). Other data sources, consistent with design-research methods, include observations, fieldnotes and classroom recordings, and teacher implementation logs that teachers used to track changes they made to the curriculum, including a description of resources they provided to students. Initial interview protocols were informed by observations and fieldnotes and subsequently refined through the iterations of the project.

Researchers visited each local classroom in each implementation year, except for one distant district (Baskerville) in Year 3. In Years 1 and 2, researchers visited classrooms almost every day of implementation as participant observers, helping students and communicating with teachers about how the class was going. In Year 3, researchers visited each classroom at least once every four days of implementation. Qualitative data collection was reduced in Year 3 because research was focused on conducting a quasi-experimental study that sought to approximate if and how teachers with little outside support could implement the curriculum.

2.5. Data analysis
Data analysis in design-based research is ongoing and simultaneous with constant observation, data collection, and reflection on activities in the designed learning settings (Dede, 2004). Our analysis of teachers’ orientations, strategies, and resources for computational problem-solving was theoretically aligned with our design principles of student-led inquiry and distributed expertise (Sandoval, 2014). The ways in which teachers supported distributed expertise for learning computational problem-solving was an evolving and emergent theme that surfaced and was supported through our ongoing observations, classroom conversations with teachers and students, and reflections as a research team. The use of these ongoing methods contributed to the trustworthiness of the findings, including collecting data from multiple sources, participant checks, as well as investigator and theoretical triangulation (Twining et al., 2017).

After the project was complete, analysis of transcripts proceeded through inductive constant comparison utilizing the software program Dedoose ® (Corbin & Strauss, 1990). Consistent with interpretive research aimed at emic meanings, interviews were initially coded by two researchers using an open coding scheme that sought to establish main themes from the interviews. In this way, the analysis used methodologies grounded in the data to generate theory that could then be compared with the current state of the field (Charmaz, 2014). Twenty-seven percent of interviews were coded together, and a stable scheme was established. Researchers split and coded the remaining interviews independently. To provide further trustworthiness of our analysis we engaged multiple people in data analysis (Elliott et al., 1999). At each stage of coding a third researcher was brought in to discuss interpretations in the ongoing analysis (Elo et al., 2014). This first round of coding produced 627 excerpts across all interviews related to how the teachers and the learning environment supported students’ computational problem-solving.

Research in design research methodologies is integral to the design of the learning environment and asks questions about what dimensions of the environment contribute to learning outcomes and in what ways (Sandoval, 2014). Our design hypothesized that distributing expertise in the setting would have several positive effects on learning. Thus, we wanted to know how teachers talked about systems for supporting learning in their classroom given that they did not have much expertise in computational problem-solving. Accordingly, axial coding (Saldaña, 2016) identified 305 excerpts related to participatory pedagogy, distributing expertise, and CTP.

We completed a third round of coding in which we co-located codes for distributed expertise and CTP among the 305 excerpts and found 57 excerpts. The bulk of these excerpts, 52 of 57, were related to computational problem-solving. The remaining five were related to systems thinking. Thus, although the study began with a broader definition of CTP that included systems thinking, modeling and communication, the teachers’ emergent focus on computational problem-solving in the interviews narrowed our definition to a programming-centric view of CTP in this study.

In the last round of coding, two researchers read through and discussed the 57 remaining interview excerpts together and identified six emergent themes that helped deepen our understanding about how teachers enacted and talked about distributed expertise and computational problem-solving in their classrooms. The six themes were: a) comfort-teacher level of ease toward computational problem-solving; b) flattening hierarchies-recognizing students as decision makers; c) releasing responsibility-moving from direct instruction to student-led inquiry; d) student independence/interdependence-ways in which students solved problems without teacher assistance as well as teachers perceptions of students’ attitudes about it; e) developing classroom experts-how teachers promoted student skill development and encouraged classmates to seek out experts; and f) providing distributed resources-the different resources students used to engage in computational problem-solving.

Interpretations were complemented and corroborated by coding fieldnotes and teacher implementation logs using the co-located codes that had emerged from the interviews. For instance, we found 129 instances of codes related to the six categories above, with about 68 falling in providing distributed resources (category f), 52 in categories (b-e), and 9 in category (a). This distribution makes sense given the focus in fieldnotes on observable behaviors. For instance, fieldnotes recorded teachers asking students to seek out a classmate for help, described resources teachers set up such as a help desk staffed by class members, and times students sought each other out. Teacher implementation logs indicated what resources teachers used or brought in and how they modified the lesson plans from the curriculum. All data presented are representative of interpretations. We have identified whether responses were from new or returning interviews or in the case of fieldnotes and implementation logs, from what year of implementation.

An analytic memo was written for each emergent theme. Two researchers split writing the memos. Each memo separated data based on the interviewee's status as a new or returning implementer. Memos included representative excerpts along with interpretive analysis. Three researchers met to discuss the memos. Overlapping excerpts present across different analytic memos made it clear that comfort was apparent across all themes. Therefore, there were five, not six, main themes related to teachers' orientations, strategies, and resources helped us refine the original themes as follows: a) releasing responsibility-moving from direct instruction to student-led inquiry, b) co-learning with students-learning how to find resources or solve computational problems with students, c) encouraging independence-promoting students' confidence in their independent problem solving, d) building interdependence-helping students identify each other as resources, and e) distributed resources-helping students utilize online and classroom resources. The refined themes served as the basis for the findings presented below.

3. Findings
Teachers needed to release responsibility for problem-solving to students when implementing the curriculum because they did not have much experience in, or comfort with, computational problem-solving, programming in general, or the Scratch platform in particular. In addition, students, as game creators, were already in control of the content and its presentation. Therefore, teachers had to create and nurture student-centered classrooms by ceding power and creating a system of distributed expertise in which students were responsible for knowing just as much, or more, than the teachers (Garcia, 2015). This also meant that students had to become less dependent on the teacher and more dependent on themselves and other students. As such, teachers needed to shift their orientation to teaching and learning in their classrooms from teacher-led to distributed expertise. Since teachers, who were new to computational problem-solving, needed both to navigate content they were still somewhat unfamiliar with and help students become more independent and responsible for their own problem-solving, they had to create avenues for students to receive help through different strategies and resources.

3.1. Releasing responsibility
By design, the curriculum was student-centered—it gave students control over the climate issues they addressed and the game design they chose to represent them. Student-centered design in technology integration is a pedagogical approach meant to give learners more agency, autonomy, and authentic experiences in the classroom (Pedersen & Liu, 2003). Yet creating more student-centered classrooms can be difficult. The teachers in this study have been encouraged throughout their careers to be more student-centered yet may not put those goals into action as much as they like, evidenced by Mr. Mack's quote below in which he says,

“we throw words around all the time like ‘student-centered.’” At the end of his first implementation Mr. Mack articulated in the interview that because of his minimal expertise, he “had no choice” but to release responsibility for learning to the students and arrange for a classroom based on distributed expertise, We throw words around all the time like “student-centered” … but this was really a test of that. The application of that. And it was good for me, because I had no choice … So I told the kids and was up front with them, “You can call me over … and I can consult you and I can think aloud, but you really have to help solve it with X, Y, and Z.” And every time I kept saying it, they would grow from that, and I would grow from that and watch. I felt so bad at first, but then realizing, “Oh, they're doing it.“ … It was just a very genuine experience for me to let them do that and me to be the guide with that. So that's one big growth.

Mr. Mack and other teachers' lack of experience required them to recognize students’ capabilities to work independently, to “grow.” The excerpt from Mr. Mack also shows that he was willing to take risks and be a thinking partner with his students, thus flattening hierarchies of power and authority in the classroom.

After their first implementations, all the teachers voiced their inexperience and their uneasiness in being able to support students’ programming and game creation. Observations confirmed that over time, especially by the second year of implementation, teachers were more able to help students find solutions to their problems and suggest strategies, for example helping students work through a bug in their program and suggesting they use clones to create multiple sprites (programmable objects in Scratch) that would perform the same or similar behaviors. We observed that teachers, Ms. Paul and Ms. Wolf for example, were also more comfortable with stepping back and trying not to help students as much (e.g., Y2 Fieldnotes, Paul, 2/3). However, releasing responsibility was not enough.

3.2. Co-learning with students
For the teachers in this study, it was hard not to feel like they were somehow letting students down. Teachers expressed tensions because they did not know the direct answers students were looking for. For the teachers, it was a process of becoming comfortable with Scratch, computational problem-solving, and figuring out how to help students solve problems that arose. However, they became more comfortable with Scratch once they had some reliable strategies on which they could draw. For example, Ms. Solomon, integrating computer game design for the first time, and with no programming experience, indicated her discomfort at not knowing how to help students in computational problem-solving,

Probably the hardest part of it was feeling like I was letting them down every time they asked me for something, and I couldn't give them an answer. I feel like I really struggled with that personally, but maybe it’s because I have an unknown tendency to lead them further than I need to on a regular basis. But I was beating myself up when kids were coming up to me and saying, “Can you show me how to do this? Can you show me?” And I'm like, “We don't know together, let's start troubleshooting together. Did you go on the internet? Did you look up tutorials?” So that was a tough pill to swallow. (Ms. Solomon, Interview, Meadowlark 1st implementation)

Although she felt like she was “letting [ students] down,” Ms. Solomon also reflected on how she had been teaching in general. She considered for the first time her “unknown tendency” to help students more than they needed. Communicating their anxiety to students and to themselves was hard for teachers, as Ms. Solomon pointed out when she said not knowing how to help students was “a tough pill to swallow.” At the same time, Ms. Solomon believed her teaching had changed in this unit from giving “[students] an answer” when they asked for help—essentially solving problems for them—to co-learning and problem-solving with students. In coming to that realization, she encouraged students to do their own inquiry with a variety of tools, including tutorials. As they were becoming comfortable, teachers quickly realized that they needed to tell students that they did not know much about programming.

Once teachers had told students about their lack of experience, they worked with students to find strategies to help them answer their questions. In Ms. Adams's classroom she told her students, “I may not know the answer, so I may say let's go to Google for that.” (Adams, Fieldnotes, 11/8, Meadowlark, 1st Implementation). In telling students “… let's go to Google …” Ms. Adams, like Ms. Solomon, positioned herself as a co-learner alongside students. Such positioning is different from that in traditional classroom structures in which the teacher is the knower and the students are the learners. Positioning herself and the students as learners was also a way in which Ms. Solomon tried to instill more confidence in students. She explained in her interview that “When I was encouraging the students— And I told them, I said, ‘You know, we're not experts. I'm not an expert, you're not an expert.’”

3.3. Encouraging independence
To create student-centered classrooms teachers felt that students also needed to adjust. They felt that students needed to be comfortable with making mistakes, trying things out, struggling, and learning with their partners how to use the features of Scratch. In short, teachers needed to help students develop confidence in their ability to solve problems in a short amount of time, without explicit guidance. That meant showing students where they could go for help, but also, according to Inga, a technology integration specialist who helped design Year 1, “setting up the expectation that it's going to be hard and you're going to have to struggle and it's going to get messy and that's okay and saying that [to students].” Ms. Hornacek, describing her first implementation during her interview, echoed Inga's beliefs, “Yeah, that was a big thing, just me coming and saying, well, try it. Just try it. If it doesn't work, it doesn't work, but why don't you just try it? That was a huge thing too.”

Teachers also needed to address students’ discomfort or lack of confidence in solving problems on their own. Sometimes, this meant just being a good listener, as Ms. Carlton said,

I mean, the one thing I will say about it is, when it came down to us being experts in Scratch in terms of helping the kids, by the end, I couldn't help them, and I told them this repeatedly, that I could help you. It'll take me days to catch up to where you are in your program. And it's not that their programs were that complex. It's just, they were cumbersome. There's a lot there. And for me to answer their question. So, what I ended up doing was, I would just sit down next to them, and they would come up with the answer on their own. But they felt like they needed me to sit there to answer their question. So, it was like the kind of talking duck thing that [author1] recommended. (Carlton, Interview, Meadowlark, 1st Implementation).

The “talking duck” practice was to have students talk out loud about what they were doing in the moment, either directly to the teacher or to an inanimate object such as a wind-up robot or rubber ducky. One teacher, Ms. Paul (Meadowlark), wrote in her implementation log that it was scary beginning the project, but she was able to find strategies to help students nonetheless,

Not really knowing anything about Scratch myself was terrifying! I always want students to find their own answers, but usually I know the topic at hand well enough to provide guidance. I couldn't do that with Scratch, but - surprisingly - it turned out okay. I got very good at saying, “Why don't you review your code?” and, “Have you tried looking for something you can remix?”

In all, teachers believed that distributing expertise to students and other resources increased student independence. For Ms. Carlton, the disposition and skills required of students to work harder to figure out problems for themselves carried beyond the computational context into other contexts in the classroom,

Because I think they're so used to, they hit a wall and they're like, ah, help me, instead of trying to help themselves … And really, as it progressed, I saw them helping themselves more and more. And I think it's translated a little bit into what we've done since then, that they're not so quick to ask for an answer. They're working a little harder to figure it out for themselves, which, with our population in particular, is a major success.

(Interview, Meadowlark, 1st Implementation)

The “population” Ms. Carlton referred to is a mostly white upper middle-class population. In her quote, Ms. Carlton implies that this student body is privileged and used to having things done for them when they struggle, or that they are not often put in positions in which they must solve their own problems. As such, teachers felt students began to orient themselves as people who could solve complex problems, even if the problems were messy and hard to figure out. The game-making project brought the students out of their comfort zone and in so doing, helped them realize that they could struggle through other problems in their classrooms and eventually be successful. For example, Mr. Mack explained in an interview after his first implementation,

I really feel like it's a nice change of the class dynamic, where, you know, the teacher steps back in a very genuine way … cause I really can't help them as much as they can help themselves, and I think they learn that as you go. I also find that there's just a certain type of student that really has an opportunity to be seen in a different light. And when you step back as a teacher and you have the other students need to depend on each other, it allows these, some of my students who typically are seen as non-producers or not capable cognitively to understand things, they can at least help you code, and they can help you do this, and it boosts their self-esteem a bit, or it makes them a little more engaged. So, I think that's a benefit that will always stick with me, is watching the classroom sort of change its dynamic right in front of me.

3.4. Building interdependence
The approaches that teachers adopted created environments where students were constantly walking around, talking with one another, and sharing their expertise. Teachers often facilitated these interactions. If, when circulating, they noticed students struggling with something that another student had solved earlier, they would recommend that they talk with others (e.g., Y2 Fieldnotes, Carlton, Meadowlark, 11/10).

If students could not solve their computational problem using the resources, teachers encouraged them to ask a classmate for help. To facilitate classroom help, some teachers publicly identified students who had Scratch experience as experts. At the beginning, students completed a survey asking for their level of Scratch experience. Mr. Soucek in Year 1 used this information to pull students aside and ask if they wanted to be publicly identified as experts in class. In his returning implementation he gave specific students tags that identified them as the Scratch experts (Y2 Fieldnotes, Soucek, City Bridge, 5/23).

Not all teachers were able to identify Scratch experts in their classes before game creation commenced. However, by releasing responsibility to students for their own problem-solving, they created an environment that allowed all to share what they learned over time. Students also emerged as experts over time as they learned the usage of Scratch blocks to include in their games. As students emerged as experts, teachers would also point them out as helpers. Thus, students that were not previously identified or considered themselves as experts became experts. For example, Ms. Adams (Meadowlark) stated in her interview after her first implementation,

I didn't have a lot of kids who were expert coders or anything like that. So, I couldn't really identify experts, and then I figured some would kind of bubble up naturally. So, I think there were certain kids who loved helping, and some kids were helping rather than working on their own game.

After her second implementation, Ms. Carlton (Meadowlark) pointed out,

I had students who weren't experts but became experts along the way, which is always great, where kids are just like, okay, you know what? I know they're not these, like I had two or three in each class that were like, yeah, we had no, zero knowledge of Scratch, but now we're going to help you, because we've just picked up like that [snaps fingers].

As an intentional strategy, Ms. Hornacek created a “help desk” where students could ask an identified group of experts for help (Y2 Fieldnotes, Hornacek, Meadowlark, 3/27). She also had students come up to the front of the class and give a “tip of the day,” such as how to send commands between sprites. This strategy allowed multiple student groups to show what they had done and share something that they had learned. Students who had shared then became recognized as experts for that specific programming challenge. Another strategy, telling students to “remember your helpers” was a common reminder in Ms. Wolf's classroom (Y2 Fieldnotes, Wolf, Meadowlark, 6/14).

Building student interdependence also meant changing students’ mindsets about what practices for solving problems were sanctioned. They needed to learn that they could go to other people in the classroom to help them solve problems. For example, Ms. Duncan and Ms. Cadbury (Meadowlark) said in their interview, after their first implementation,

Ms. Duncan: Oh, like I said, I loved watching them work together and work through their problems.

Ms. Cadbury: And they really did. They relied on one another, definitely. [Asking each other] “What did you do to do this?” I saw a lot more of that kind of stuff during the Scratch stuff than most other times, they kind of just stay at their tables and— But they were getting up and moving around.

Ms. Duncan: It was pretty free form. You know, kids got up. They weren't glued to their seats. You know, they got up and looked at each other's stuff, and some of them would say, “Hey, come here …”

Ms. Cadbury: Yeah. Even kids that normally don't talk. Why does the ball keep going off the screen, and they'd be like, you “gotta do this, you gotta do this. Can you show so and so, they want to do—” No, I think that on that front, that they were really sharing with one another.

As noted by teachers, our team also documented students readily helping each other solve problems during game design on each day of classroom observation. Students sought help both from neighbors, who were sometimes friends, and from teacher-designated experts or from students whose expertise became recognized over time. Simply allowing students to move around the room encouraged the distribution of expertise. Teachers noticed that students who were not usually tapped for their knowledge by other students were contributing in major ways. Giving and receiving help also allowed those students who did not talk much to engage in conversation.

3.5. Providing resources
Teachers indicated much more comfort with the program in their second year than first year teachers did. Indicative of their growing knowledge and of their growing trust of students, teachers developed strategies for helping students problem-solve on their own. For example, Mr. Mack invited an outside expert, a 7th grader into his classroom to set up a station to help students with problem-solving and coding (Y2, Fieldnotes, Meadowlark, 4/3, 1st Implementation).

Ms. Adams's comfortable orientation in her second year of implementation was related to having more resources to draw on, including a studio full of students' games from the previous year that she could use to help students in her current class with specific problems or features they wanted to add to their own games. She described this strategy in her 2nd implementation interview,

I think overall for me, being my second year, some things that were helpful for me, it's like, I had a Google Sheet of my games from last year that I liked. And so, if kids needed something, I just would be like, “Oh, here's this game. Here's a timer.” So, I could kind of facilitate a little bit better this year, and I think my confidence in Scratch was a lot better. I could really solve their problems a lot quicker than last year. And other kids, we had challenges that were hard to fix, and they spent a lot of time. But they were kids who were fine with it. You know, they rolled with it.

Her comfort also had to do with her increased knowledge of the programming platform, “I think my confidence in Scratch was a lot better. I could really solve their problems a lot quicker than last year.” Perhaps in an undesired twist, Ms. Adams's increased comfort also often led to her solving students' problems for them or directing students to specific code that they could remix, rather than asking them to search on their own for games with that code or feature. Independently searching for games and determining whether others' code was compatible with their own game aligns with an inquiry approach and is arguably more beneficial for students' learning, although it also takes more time (Sengupta et al., 2013).

In their interview, Ms. Solomon and Ms. Hornacek pointed to more generalizable CTP that students took on, such as seeing other people's code as a viable resource for their own problem-solving,

Ms. Solomon: The Scratch community encourages you to backpack. They encourage people to remix. And it's like, it's almost like, I think at the beginning, they were afraid to do that, like it was the wrong thing to do, or that they were cheating by doing it.

Ms. Hornacek: Like plagiarizing.

(Y2 Solomon & Hornacek, Interview, Meadowlark)

In Scratch, remixing is using and adapting code that is already written, a mature practice frequently employed by programmers. In most core academic subjects, students cannot use what other people have produced and pass it off as their own work. However, in programming, especially for beginning programmers, learning how to think like a computer scientist by using existing code, is a useful scaffold for creating better products more efficiently than one could alone (e.g., Dasgupta, 2016).

Releasing responsibility to students for problem-solving, distributing resources and implementing strategies to support distributed expertise created participatory cultures in each teacher's classroom in which students were able to be agents of their own learning and to collaboratively solve problems. Problem-solving expertise did not lie with one individual, rather it was distributed throughout the classroom. Together, students and teachers created an environment that broadened and deepened their computational problem-solving skills.

4. Discussion
Instruction in CTP is increasingly a part of expectations for content area teachers and distributing expertise is one way teachers with little experience with CTP can support students. The goal of this study was to explore how middle school science teachers distributed expertise to support student computational problem-solving, and to describe which orientations, strategies, and resources—either provided by the curriculum or created by themselves—they drew on to do so. This study positioned CTP largely as programming, debugging, and problem solving (Yan et al., 2020). However, as Turvey and Pachler (2020) argue, teachers' perspectives in studies of technology integration have not been sufficiently contextualized regarding teachers' pedagogical approaches. Some work has explored teacher pedagogy in the context of how teachers have distributed expertise for students' critiques of each other's games (Tucker-Raymond et al., 2019; Bowden & Aarsand, 2020, pp. 1–19).

Turvey and Pachler (2020), in suggesting research design principles for future studies of technology integration, point out the importance of factors such as teacher's philosophical and pedagogical attitudes, among others, when seeking to understand how digital technologies are appropriated by students and teachers. Given that the appropriation of digital technologies in the classroom often brings additional sources of complexity, we believe that the broader research-to-practices recommendations our findings suggest--about the potential value of distributed expertise in supporting integration--situated within a rich description of teachers' orientations and strategies and the contexts in which they implemented an integrated curriculum, make a valuable contribution to the field.

This study further contextualizes teacher orientations and strategies within their pedagogies. Understanding teachers' changing orientations with integrating CTP and the tensions and opportunities they perceive in releasing responsibility for computational problem-solving to students helps us understand teachers’ orientations, resources, and strategies for computational thinking integration and support for learning in their classrooms in ways they may not usually consider (e.g., Garvin et al., 2019; S.; Hadad, 2020).

4.1. Changing orientations
The teachers in this study indicated that they initially knew very little about computational tools and computational problem-solving. As others have reported (e.g., Celepkolu et al., 2020; Hampton et al., 2019) teachers also indicated that, due to their lack of familiarity, they were not comfortable with the tools. They were also not comfortable helping students solve problems as students were building games. However, rather than hide or feign expertise, teachers were explicit with students that they lacked familiarity with computational problem-solving. For that reason, teachers encouraged students to seek help from each other, as well as from resources provided by the project and by the programming platform.

Although Kong et al. (2020) reported that teachers' beliefs about how to implement CTP changed in a statistically significant way after a two-semester PD that included classroom implementation, they did not analyze teachers' responses in depth. We found that teachers’ lack of experience and discomfort with the programming language, with supporting students, and with wanting students to take risks necessitated that they distribute epistemic authority in their classrooms among students, other resources, and gradually, themselves. However, as they gained comfort with releasing responsibility, teachers reported being able to help students solve problems more readily. They also acknowledged the benefits of CTP integration into science (Waterman et al., 2020). Issues of comfort also extended to students, who teachers reported were learning to become less dependent on their teachers for solving problems, relying more on themselves and their classmates. Releasing responsibility allowed them to shed schooled ways of being. Thus, allowing students to adapt to new parameters for what was acceptable.

For example, others have recommended remixing as a standard practice in computational problem-solving (Zhang et al., 2020), yet teachers in this study needed to actively encourage this practice in their classrooms. Openness to using others' work may be an accessible way for beginning game designers to create operational games and realize their visions for content. However, that orientation may be antithetical to the rest of schooling - both at odds with an emphasis on originality and creativity and, for students, resembling “cheating.” In learning new tools, the teachers recognized that students' computational problem-solving approaches also required shifts in students’ orientations to knowing and doing in content area classrooms (Pérez, 2018). Finally, as others have found teachers reported more comfort with CTP after the first implementation and even more so after the second (S. Hadad, 2020; Waterman et al., 2020).

4.2. Resources and strategies
Teachers noted how releasing responsibility marked a shift in the ways in which expertise had previously been distributed in their classrooms. As others have shown, moving towards student-centered learning sets the stage for students to be experts in computational problem-solving (Grover et al., 2019; Kafai & Burke, 2014; Pinkard, 2020).

We attempted to create a formal educational space for students to learn about climate change by designing games. Bower et al. (2017) stress that student-centered pedagogies must be deployed if “learners of computing [are to] consolidate understanding, transfer their knowledge, develop their creativity, and have opportunities to learn from peers” (Bower et al., 2017, p. 56). We also asked teachers to trust students to learn by doing. When the teachers could not solve the problem, they had to ask students to struggle through the problem on their own. We witnessed that the less a teacher knew about a computational platform, the more students needed to become experts and rely on each other. In turn, the technological hurdles for teachers were lessened and the students were empowered.

When teachers know very little about computational problem-solving, they simply must have students rely on other resources when they first attempt integration. The teachers in this study reported that, when they knew very little about computational problem solving themselves, their confidence in their students' abilities and their students’ confidence in their own abilities increased as students gained more experience solving their own problems. Yet, for some teachers in this study, as they became somewhat more knowledgeable, they began to take on more of the computational problem-solving responsibility for students. We hypothesize that as teachers become yet more experienced, they can release more responsibility for problem-solving to students again. This could be one potential future direction for research.

Understanding classroom science teachers' orientations, resources, and strategies for ways of supporting CTP integration in content classrooms and to create robust professional development (Lee et al., 2020). Our work aligns with others (e.g., Bower et al., 2017; Curzon et al., 2014; Israel et al., 2015; Repenning et al., 2010; Yadav et al., 2018) in documenting how teachers’ restructuring of learning in their classrooms supports technology integration, and computational problem-solving. We extend these previous studies to include the pedagogical contexts of teachers in science classrooms.

Middle school content teachers need to constantly attend to the ways in which they integrate computational tools in their classrooms (Burton et al., 2020). Computational tools are complex. Learning and teaching computational problem-solving means teachers must adapt their skill sets. Some authors have noted that such skills can or must be learned through professional development (e.g., Bower et al., 2017; Stevens et al., 2013). responsibility and distributing authority for knowing among students grows knowledge in the field about strategies for integrating CTP. Our findings are corroborated by Garvin et al. (2019) who found that teachers were more student-centered after a year of trying to implement CTP integrated curricula, but not immediately after a professional development session that argued the same. For teachers, seeing students struggle and succeed, is truly the motivator to shift to student-centered learning and to trust students as resources for each other.

4.3. Recommendations for building distributed expertise
This study suggests some recommendations for teachers and curriculum developers seeking to teach CTP in their content area classrooms through distributing expertise (see also, Cassidy et al., 2020). These include:

●
Breathe. You are amazing. Computational tools are complex.

●
Open yourself to learn from and with students

●
Set the expectation that students take responsibility for their own and their classmates' learning

●
Identify student experts if you can and allow other others to emerge as experts

●
Encourage remixing and using pre-existing code as a sound strategy for building on communal expertise

●
Provide a variety of online and offline resources that address both content and computational problem-solving questions

●
Listen to students describe their problems and encourage them to share those problems with others

5. Limitations
Qualitative research is meant to describe deeply one context or phenomenon, not necessarily create generalizable results (Erickson, 1985). Limitations of the study include that participants all implemented the same curriculum in which 8th grade students from the Northeastern United States designed and programmed computer games. Our results may not apply to other learning contexts focused on integrating CTP in middle school science classrooms, including those that utilize robotics, simulations, or engage students in designing applications. They may not apply to those at different age levels (e.g., younger children). Moreover, they may not apply to teachers with more experience integrating CTP. As with any qualitative study, generalizations must be extrapolated by readers to their own contexts in ways they see fit. Also, the interviews and analysis were conducted by the curriculum design research team. Teachers may have answered in ways that they thought would please the design researchers, resulting in social desirability response bias of their answers (Van de Mortel, 2008).

6. Conclusions
There has been increasing emphasis on the integration of computation and CTP in science classrooms over the past two decades. Therefore, researchers have sought to understand how science teachers can gain the necessary expertise to support students effectively in integrated CTP-science classrooms. This study revealed a promising strategy to effect integration - a reliance on distributed expertise. Almost all teachers in the study favorably viewed the shift to distributed expertise as a way to truly practice student-centered learning, which they had valued and aspired to prior to participation in this project. Teachers used a variety of ways to set up systems of distributed expertise in their classrooms.

Distributing expertise in the classroom helps teachers a) integrate complex computational, b) organize student-centered approaches to learning that promote student agency by creating a participatory culture in the classroom, and c) better reflect the distributed learning systems outside of school settings that require 21st century skills (Lye & Koh, 2018). We agree with Angeli and Giannakos (2020), Garvin et al. (2019) and Lee et al. (2020) that professional development is necessary, but our research suggests that mastery in integrating CTP is not necessary for successful teacher and student learning experiences. benefit from distributed intellectual authority among all members of the classroom.

