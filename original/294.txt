In an IoT network, a gateway plays a pivotal role that enables it to connect to the cloud services or external networks. In a fog/edge infrastructure, multiple gateways work simultaneously to prevent bottleneck for both inbound and outbound traffic. While gateway failure is inevitable, some diversion strategies to minimize the impact of network outage are needed. In this paper, we propose a generalization model of order- hops Voronoi diagram to provide precomputed  backup gateways and evaluate several gateway diversion strategies to redirect a router from multiple gateway failures to an alternate gateway with the closest hops. Our simulations show that device blackout during multiple gateway failure can be minimized by using at least 4 precomputed gateways. Furthermore, our model is able to identify the maximum -chain failure that can be tolerated during multiple gateway failure.

Previous
Next 
Keywords
Edge/fog computing

IoT network

Fault tolerance

Backup gateways

Hops Voronoi diagram

1. Introduction
The Internet of Things (IoT) has evolved rapidly, with billions of devices connected to the Internet. This massive connection to centralized services or the “cloud” provides convenient deployment where minimum infrastructure is needed. However, this approach has led to some serious challenges, such as bottleneck volume and the velocity of data arriving from IoT devices, network latency and the use of proprietary protocols among service providers. Therefore, edge/fog computing is a better option where the computation, storage, and network resources are brought closer to the IoT devices (Pan and McElhannon, 2018, Adhinugraha et al., 2020). Fig. 1 shows the differences between classical cloud-based topology and mesh topology in IoT applications. The simplicity of Cloud-based topology is shown in Fig. 1(a) where the IoT devices are connected directly to the cloud infrastructures. To support this topology, each IoT device must provide a dedicated connection to the cloud, sufficient processing power and energy which lead to the high production and running cost. While a mesh topology in Fig. 1 shows a complex network topology, the network connection is handled by the interconnected routers where at the same time minimize the risk of network failover. Furthermore, since the IoT sensors only connect to the nearest local routers, there is no need to embed complex networking device to the sensors. This lead to the low production and running cost.

In an IoT network, a gateway failure is an inevitable event. During an unplanned gateway failure, all affected routers are forced to divert network traffic to another gateway. The most common method to find a new route to an alternate gateway is by using network broadcast (Tanenbaum and Wetherall, 2011).


Fig. 2. Example of a gateway failure. All affected routers must seek alternate path to reach the new gateway.

Fig. 2 shows a gateway failure scenario that may occur in a mesh network where one of the gateways has failed unexpectedly and two routers that link to several IoT devices have failed as well. To restore the connection, all the affected routers have to find another reachable active gateway.

In a multiple gateway failure scenario where numerous routers are affected, broadcasting the message to all nodes in a network will disrupt the whole communication network. Moreover, a replacement gateway may be located in a multiple hops away, thus increasing communication latency which may lead to more serious problems in some applications (Lin et al., 2018). To obtain a fair distance coverage for a gateway, a Voronoi diagram model can be used for this purpose (Liu et al., 2021, Zhu et al., 2012).


Table 1. List of abbreviations.

Abbreviation	Explanation
IoT	Internet of Thing
HVD	Hops Voronoi Diagram
NVD	Network Voronoi Diagram
VD	Voronoi Diagram
QoS	Quality of Service
A Voronoi diagram is a space division method based on the nearest neighbour concept. A Voronoi cell indicates the catchment area or influence zone of a facility, where any objects in this area will consider this facility as the nearest (Adhinugraha et al., 2014). In IoT deployment, a Voronoi diagram can be used to group the sensors to minimize latency (Wan et al., 2019). In Adhinugraha et al. (2020), the authors proposed a hops Voronoi diagram (HVD) for gateway coverage using network hops to ensure a fair workload through the entire network. It is important to ensure there is a minimum number of hops to increase the QoS of the overall performance of the network (Seyedzadegan et al., 2013, Lin et al., 2016). The most commonly used abbreviation is provided in Table 1.

An order- Voronoi diagram is the generalization of Voronoi diagram, where a Voronoi cell indicates a catchment area for  nearest facility points. Using this concept, an order- HVD is proposed to identify the coverage of  nearest gateways in a mesh network for contingency plan (Adhinugraha et al., 2021). Although the  backup gateways can be identified using the order- HVD, some important issues have not been discussed such as a non-minimum number of hops for new gateways, outlying routers, and a high maximum number of hops or uncovered routers due to multiple gateway failures (Pascale et al., 2018). Furthermore, the existing network configuration might also contribute to robustness, hence we take node degree into account to analyse the effect of graph degree on mesh robustness.

Motivated by these issues, in this paper we conduct comprehensive simulations in precomputed  backup gateways using an order- HVD for the mesh edge/fog network to identify the best strategy in choosing the right alternate gateway from precomputed candidates. Our contributions are as follows:

1.
We propose a generalization of a hops Voronoi diagram for mesh network to provide a precomputed  backup gateway.

2.
We propose an Adjacency Gateway model to identify the shortest hops to alternate gateways to handle multiple gateway failure.

3.
We evaluate how many  backup gateways are actually needed to handle gateway failure.

4.
We determine if the number of interconnected routers affects the robustness of the system in a precomputed  backup gateways strategy.

The paper is organized as follows: Section 2 describes the related works. Section 4 briefly explains order-K HVD and the failure concept in order- HVD. Section 5.1 explains the dataset that will be used in the experiments. The main contributions are detailed in Section 5 with a discussion as to how preferences affect the precomputed  backup gateway selection. Section 6 evaluates the effective number of  to achieve failure backup and Section 7 explains the impact of graph degree on failure resistance. The conclusion is presented in Section 8.

2. Related works
In edge/fog computing for an IoT system, a mesh network is a commonly used topology for massive device deployment due to its superiority in ensuring network expansion and reliability and that there is no single point of failure (Leonardi et al., 2018, Rondon et al., 2019). A gateway in a mesh network is a critical device to connect the network to the outside world. A mesh network may consist of several gateways where each gateway will serve several routers within its range. Due to the vast number of devices and the high traffic demand on certain gateways, gateway management methods are needed to ensure network continuity, such as optimal gateway placement (He et al., 2007, Seyedzadegan et al., 2013), or multi-protocol gateways to support heterogeneous networks (Shih and Wu, 2016).

Despite its reliability, a gateway in a mesh network is also prone to various types of unplanned blackouts and planned blackouts (Jean-Philippe et al., 2004). An unplanned blackout can be caused by natural disasters, wear out, overload, bugs, human error or device attacks, while the most common planned blackout is usually caused by routine hardware replacement or maintenance. Since gateway blackout will cause partial or total network disruptions, a gateway recovery method is needed to maintain network availability.

Several strategies have been applied to handle device failure in a mesh network to maintain service continuity. In general, these strategies can be grouped into two parts, which are (1) providing reserved resources as alternate plans, or (2) calculating an alternate dynamic plan after the incident.

Providing reserved resources as a contingency plan is a method where an additional resource is prepared as a backup component to support network continuity. The fast recovery option is considered as the main advantage in using pre-computed resources for disaster recovery, although additional amount storage or infrastructure is required to make this method works. The authors of Sub-networks and Struyve (1997) proposed SSN by providing alternate routes for the interconnected routers at the sub-network level. The authors of Médard et al. (2002) and Choi et al. (2004) use loopback methods by providing precomputation backup paths during a network failure. The authors of Lakshmanan et al. (2009) and Kawai et al. (2014) use multi-gateways to avoid traffic load from being concentrated on one gateway node. The authors of (Adhinugraha et al., 2021) provide precomputed k backup routers using an order- HVD. Although all of these works have shown the effectiveness of pre-computed resources in handling the gateway or network failure, they did not discuss how to handle multiple gateway failure or -chain failure.

In the first method, if nothing happens in the network, none of the reserved resources will be utilized. The cost in providing reserved resources is dependent on the number of reserved resources that need to be kept as an alternate plan. Unlike pre-computed resources, the second method does not require reserved resources or pre-computed resources since the alternate plan is determined after the incident occurs by embedding a specific recovery algorithm in the network. The main advantage of calculating the recovery plan on-the-fly is to reduce the allocation of unnecessary resources. The authors of  Kim and Shin (2011) propose ARS to enable a wireless mesh network (WMN) to automatically recover from local link failures to maintain network availability. Route recalculation such as SDNMesh (Gilani et al., 2020) and RADAR (Sarkar et al., 2007) are proposed by recalculating the effective routes after node failure in the network . The authors of  (Mahiddin and Sarkar, 2019) propose a method for traffic congestion management to handle a huge hit to a particular node. A transformation method called OEMAN is proposed by  Minh et al. (2014) which assigns a mobile device as a substitute virtual access point (VAP) when the main gateway fails. Although the dynamic plan does not require unnecessary resources to be kept as the contingency plan, additional computation resources and time are required to determine the recovery plan. Furthermore, this approach requires neighbourhood interaction to determine the surrounding situation which increases the latency and processing time. The summary of the relevant works and research gaps is shown in Table 2. As seen from this summary, although some methods discussed how to deal with multiple gateways failure, none of these methods discuss about -chain failure. The -chain failure is the condition where the  nearby gateways have failed which makes network recovery is even harder.

Motivated by these limitations, in this paper we investigate the impact of multiple gateway failure and -chain gateway failure to the mesh network. Furthermore, we also investigate how many backup gateways are sufficient to avoid total blackout in the mesh network. For this research, we utilize the order- hops Voronoi diagram to provide precomputed alternate gateways and propose an adjacency gateway model to identify the shortest hops alternate gateways during multiple gateway failure.


Table 2. Previous works summary and gaps.

Ref	Method	Solution	GW(s) failure	-chain failure
Sub-networks and Struyve (1997)	SSN	Predefined path	Partial	N
Médard et al. (2002) and Choi et al. (2004)	Loopback	Predefined path	Y	N
Lakshmanan et al. (2009) and Kawai et al. (2014)	Multi GW	Predefined GWs	Y	N
Adhinugraha et al. (2021)	Hops VD	Predefined GWs	Y	N
Kim and Shin (2011)	ARS	recoverable MNs	Y	N
Gilani et al. (2020)	SDNMesh	Alternate route	Y	N
Mahiddin and Sarkar (2019)	GWRS	Route selection	N	N
Minh et al. (2014)	OEMAN	VAP	Y	N
Sarkar et al. (2007)	RADAR	Route calculation	Y	N
3. Prerequisites
In this section, we will discuss the implementation of Voronoi diagram in computer network using three different metrics as the distance measurement, which are Euclidean distance, network distance and hops distance.

3.1. Voronoi diagram
A Voronoi diagram is a common method that is used in nearest neighbour-related queries due to its uniqueness in defining the catchment area of a facility (Zhao et al., 2011, Xuan et al., 2011). The catchment area of a facility is also known as a Voronoi cell or an influence zone, where any objects located in a Voronoi cell of  will consider  as the nearest facility (Cheema et al., 2011). The first distance metric that is commonly used to construct a Voronoi diagram is Euclidean distance, where the distance is measured using an imaginary straight line between two objects.

In IoT deployment, a Voronoi diagram using Euclidean distance is used to cluster the sensors to the nearest aggregator device to minimize latency (Sung and Yang, 2014, Tang et al., 2019, Ferrucci et al., 2016). Fig. 3 shows an example of a Voronoi diagram application in distributing the IoT devices to the nearest aggregator or gateway. In this example, there are four gateways . Gateway  has four sensors within its catchment,  has two sensors,  has four sensors, and  has four sensors. Each sensor will be mapped exclusively to the nearest gateway.

While the previous example shows the Voronoi diagram in Euclidean distance, the distance in a computer network is determined by the network structure itself. Hence, NVD is more suitable to be implemented in the computer network. Fig. 4 shows the implementation comparison between Euclidean NVD and VD in a synthetic network that contains 100 routers and 10 gateways. The routers and gateways are randomly distributed. The line between points indicates the connection between two network devices in a certain metric distance. The large points indicate the gateways while the smaller dots indicates the routers. Each colour indicates a gateway and all dependent routers for NVD, while the polygon indicates the Voronoi cell for each gateway. As shown in this example, there are some misallocation routers in VD where routers are not allocated to the nearest gateway. For example, some green routers are incorrectly allocated to the black gateway because the network structure is not being considered while allocating the routers using VD.


Fig. 3. Example of VD application in IoT distribution to map devices to the nearest gateway.

While NVD is highly applicable for computer network, the device distance cannot be measure accurately using a metric unit. For example, the time to transmit a package between two nodes that are located 20 metres and two nodes that are located 100 metres are likely to be similar since there are only one hop for both cases. However, if there are more than one hops, the time to transmit the package will be longer. Fig. 5 shows the example of multi hops effect in the transmission time where  due to less intermediate nodes for the package transmission. The impact of the nodes to the transmission time is similar with the road intersections to the travelling time. If we assume each intersection has traffic light, the journey time will increase along with the increment number of the road intersections.


Fig. 4. Example application of VD and NVD in computer network where a colour represents a group of devices that are assigned to the nearest gateway in network distance.

3.2. Hops Voronoi diagram
A hops Voronoi diagram (HVD) is a Voronoi diagram in a computer network where a network hop is used to measure the distance between network nodes instead of physical distance (Adhinugraha et al., 2020). The motivation behind this concept is because physical distance might not be able to distribute the number of routers evenly in a condition where the distance between objects is not similar. The multi-source Dijkstra’s algorithm can be used to construct the HVD (Okabe and Sugihara, 2012).

Let  be the vertices, and  the weighted edges. Graph  is a graph that is constructed from a set of vertices  and weighted edges .  is a set of routers and  is a set of gateways where . Dijkstra’s algorithm identifies the minimum distance from a gateway to a router. A router  will be claimed by a gateway  if and only if the distance to this gateway is the shortest compared to other gateways . In a HVD, the distance between two adjacent points is 1.

Fig. 6 shows how HVD defines the coverage of a gateway. Instead of using physical distance as shown in Fig. 6(a) which means gateway  has more routers than router , a hop-based distance will share the workload more evenly amongst gateways and ensure all routers connect to the nearest hop gateway as illustrated in Fig. 6(b).


Fig. 6. The difference between mid points for physical and hops distance.

Fig. 7 compares the network Voronoi diagram and HVD. In this example, there are 64 routers with 4 gateways where the routers are arranged in this specific configuration so that the maximum hops from a gateway to its farthest router is 16 hops. The NVD generated in Fig. 7(a) uses physical distance. As we can see, two gateways (red and purple) have more routers than the other gateways and some routers have longer latency delay due to longer hops. In HVD, as shown in Fig. 7(b), all gateways have the same number of routers and all routers have the least number of hops to reach the nearest gateway.


Fig. 7. Graph Voronoi comparison for NVD and HVD.

4. Order- hops Voronoi diagram
In this section, we briefly explain the main concepts of the order- hops Voronoi diagram which is used in this paper. The Adjacency Gateway model is proposed to show the neighbourhood of gateways in the area. Lastly, we discuss the failure probability concept based on the adjacent gateway network.

4.1. Order- hops Voronoi diagram
An order- HVD concept is based on the order- VD where the aim is to find the k-nearest gateways for each router in a computer network (Papadopoulou and Zavershynskyi, 2016). A higher order Voronoi diagram (HOVD) is the generalization of a Voronoi diagram, where the aim is to provide a  nearest facility for a catchment area (Okabe et al., 2009). An order- HVD is the generalization of HVD that provides precomputed -nearest gateways from each available node. The order- HVD is constructed by overlaying multiple sink-trees. The multiple sink-trees are constructed using a multi-source Dijkstra algorithm as shown in Algorithm 1 and the parameters used for this algorithm are listed and explained in Table 3
The order- HVD algorithm starts by creating the sink tree for each gateway where each router will have a precomputed hops distance to a particular gateway (line 1–3). The process continues by sorting the hops distance in each router and keeping the -nearest gateways (line 4–6). The visualization for this algorithm is shown in Fig. 8. In this example, there are 3 gateways with 100 routers which are indicated by blue, green and red. The first step is to create the blue, green and red sink trees. The order for these sink trees is not important since the precomputed hops in each router will be ordered after all the sink trees have been processed. The last figure shows the order-2 HVD where each router has two precomputed nearest gateways.


Table 3. Algorithm’s parameter.

Symbols	Description
Graph representation of the mesh network
Routers as nodes
Gateways as nodes
Link between two nodes as edges
Number of predefined alternate gateways
In a router, the predefined  gateways represent the order of  nearest gateways. When the Dijkstra’s algorithm is processed for a gateway, the sink tree that shows the hop distance from this gateway to all of available routers will be constructed. Each router will record the hop distance to this particular gateway. In order to get the predefined  nearest gateways from a router, the Dijktra’s algorithm must be processed for all  gateways. Once all gateways have been processed, the predefined list for each router will be sorted in ascending order. It depends on the  value, only the first  gateways will be preserved. This means the complexity of order- HVD to obtain the precomputed  backup gateway is . Note that  does not affect the complexity since all gateways need to be processed independently.

4.2. Adjacency gateway model
Delaunay triangulation is another form of Voronoi diagram, where it can be formed from a Voronoi diagram and vice-versa. This relationship is also called the generalized Voronoi/Delaunay duality (Okabe et al., 2009). Delaunay triangulation shows the nearest neighbours for each facility point in a Voronoi diagram. The outer path in Delaunay triangulation is called the convex hull (Taniar and Rahayu, 2015).

Fig. 10 shows a Voronoi diagram from 11 generator points (shown by the solid red lines) along with Delaunay triangulation (shown by the dashed black lines) and convex hull (shown by the solid grey lines).

Delaunay triangulation is the best option by which to analyse the impact of the failure of multiple facilities since there are clear interconnections among gateways in the whole space. Therefore, it is easy to identify the weak spot in the network in the case of multiple gateway failure.

Fig. 10. The visualization of Voronoi diagram, Delaunay Triangulation, and Convex Hull from 11 generator points.

To the best of our knowledge, no work has been done to implement Delaunay triangulation in a computer network. Since Delaunay triangulation is needed to analyse the impact of gateway failure, we propose an adaptation of Delaunay triangulation in the network called the Adjacency Gateway.

Definition 4.1

Adjacency Gateway is a model to show the adjacency of facilities or gateways in a HVD or in a NVD.

Theorem 4.1

Two gateways  and  will have a Gateway Edge  if there is at least one router that considers both gateways as its two nearest gateways.

Definition 4.2

Gateway Edge  is an imaginary segment that connects two gateways  and  that have at least one router that considers these gateways as its two nearest gateways.

If there is a Gateway Edge , this means that  is an adjacent gateway of , and  is an adjacent gateway of .

Although the adjacency gateway can show the neighbouring gateways, it has the following characteristics that make it different from ordinary Delaunay triangulation:

1.
The adjacency gateway identifies the adjacent facilities/ gateways in a hops Voronoi diagram or in a network Voronoi diagram.

2.
The adjacency gateway can only be created after a complete hops Voronoi diagram has been constructed.

3.
A hops Voronoi diagram and the adjacency gateway have no duality. Therefore, it is impossible to construct a hops Voronoi diagram from a Delaunay network.

4.
An adjacency gateway does not have a convex hull

Fig. 11 shows the adjacency gateway with a hops Voronoi diagram from a 1k dataset with 10 gateways. The coverage of each gateway is shown in colour. As can be seen from this figure, the adjacency gateway shows neighbouring gateways in the mesh network. Gateway  has two adjacent gateways, which are gateway  and . However, gateway  is not an adjacent gateway of gateway , since no routers have  and  as their two nearest gateways.

Fig. 11. HVD with its adjacency gateway model.

In the graph, the vertex degree shows how many adjacent vertices a vertex might have. This shows the complexity of the graph itself (de Berg et al., 2008).

Definition 4.3

Graph Degree () is a value to show the dominated vertex degree in the mesh network.

Definition 4.4

Gateway Degree () is a value to show the dominated gateway degree in adjacency gateway.

To refer to the degree for a graph/network, we use the term graph degree  and to refer to the adjacency gateway degree, we use the term gateway degree .

4.3. Failure in order- hops Voronoi diagram
Gateway failure is a situation where a gateway device is unable to receive or forward the packages sent to it which causes problems for the routers in its service area. In a mesh network, a single point of failure caused by gateway failure can be avoided by setting up precomputed backup gateways for the routers. While this method is effective in handling single point failure, this method is also prone to multiple gateway failure.

Definition 4.5

Router blackout is a condition where both the primary and alternate gateways are down due to device failure.

Although not all multiple failures lead to total blackout, some failure scenarios might have a more significant impact on the mesh network. In this section, we discuss several failure scenarios that might lead to router blackout.

In multiple gateway failure, if two gateways on a gateway edge have failed, we call this a 2-chain gateway failure.

Definition 4.6

 failure is a situation where  failure gateways are located in the contiguous gateway edges.

We illustrate a failure scenario in the adjacency gateway in Fig. 12. In this figure, the adjacency gateway is indicated by the solid line that connects the 10 gateways. There are 2-chain gateway failure for gateway  and gateway  and the router has two precomputed nearest gateways. As shown in this figure, there are some routers from gateway  and some routers from gateway  that are unable to obtain the alternate gateway from the precomputed gateways as indicated by the red polygons since the alternate gateway is down as well. The other routers from both gateways can manage to relocate the gateway to the nearest alternate gateway from the precomputed gateway list.

Fig. 12. Gateway redirection during 2-chain failure in order-2 HVD.

Theorem 4.2

Precomputed  gateways with order- HVD can withstand the failure of up to -chain gateway failures/

Another example of  failure is illustrated in Fig. 13. In this example, gateways  have formed a 3-chain failure in the Delaunay network where this mesh is protected by 3 precomputed gateways. As expected, some routers are unable to connect to the online gateways since the three nearest gateways are completely down. The blackout routers are indicated by the black x mark on the map.


Fig. 13. Total blackout routers (indicated by X) during 3-chain gateway failure, with predefined backup gateways .

5. Backup selection priority in order- HVD
Order- HVD in a mesh network provides precomputed k-gateways, where one is assigned as the primary gateway and the rest are considered to be backups. In a failure scenario, more than one backup gateway can be chosen as the replacement for the failed one. As a router might need to obtain its neighbours preferences, privacy protection using an anonymous communication system is not applicable in this model (Alidoost Nia and Ruiz-Martínez, 2018). Since several options can be selected, the selection preference might impact the performance of the mesh network. Some of the issues that might arise are: (1) routers might have longer hops to the backup gateways, (2) maximum hops are too high, (3) scatter grouping and (4) possible blackout routers.

To overcome these issues, we examine several strategies to choose the backup preference for routers to avoid the selection of overloaded gateways. The strategies are explained in the following six preferences:

1.
Priority-based preference The next candidate is chosen based on the precomputed alternate gateways obtained from order- HVD. The aim is to minimize the hops required to reach the alternate gateway.

2.
Reverse priority preference The next candidate to be chosen is the last candidate from the list obtained from order- HVD. The aim is to avoid overloading the next closest gateway by choosing a gateway which is further away in relation to the number of hops.

3.
Nearest Neighbour preference This preference is based on the nearest adjacent router’s gateway if the chosen gateway is within the precomputed k-gateways. The aim is to ensure that the router will connect to the nearest gateway in relation to physical distance.

4.
Farthest Neighbour preference This preference is based on the farthest adjacent router’s gateway if the chosen gateway is within the precomputed list. The aim is to avoid overloading the gateway which is closest in relation to physical distance by choosing a gateway which is further away.

5.
Majority preference This preference is based on the gateway that is being used by the majority of its adjacent routers to ensure that all routers with the same gateway stay close together.

6.
Random preference The aim of this preference is to distribute the assignment of backup gateways over all available backups and minimize the concentration of routers in a particular gateway.

5.1. Dataset
For this experiment, we develop several datasets to cover all possible scenarios to represent real-world situations as shown in Table 4. The vertices of the graph are uniformly distributed and the graphs are undirected. The vertices represent IoT devices, where the devices can be either routers or gateways. We set the ratio of 1:100, where there will be 1 gateway for every 100 routers.

The visualization of the dataset is shown in Fig. 14 where small dots represent the routers, the rhombuses represent the gateways and the line represent the network connection between two devices. The routers are distributed in a way that the number of direct connections are vary among devices to simulate real world conditions where some routers or gateways might have direct connection with numerous devices, while other routers or gateways may only have few direct connections. The number of direct connected devices from one router is called connection degree, as shown in Fig. 14(d). In this dataset, we can also see the unfair gateways distribution, where some gateways might be located close to each other in a small region, while other large areas might have limited number of gateways. This scenario is commonly found in real world scenario where in a rural area, the network infrastructures have limited features, compared to the network infrastructures in urban/metropolitan area.

Most of the devices are connected to the -nearest vertices to construct a graph to simulate a mesh network where . We want to simulate interconnection variations that might occur in a real-world scenario. In this case, we vary the dataset from  to . The synthetic data characteristics are visualized in Fig. 15, where Fig. 15(a) shows the 10k dataset, and Fig. 15(b) shows the 20k dataset.


Fig. 14. Visualization of the dataset.

Fig. 16 shows the effect of graph degree  on gateway degree . As can be seen from the charts, the average  is stable for .

The Order- HVD precomputation cost where  is shown in Fig. 17. Fig. 17(a) shows the effect of graph degree to on precomputation time. From this figure, the graph degree has an almost unnoticeable impact on the precomputation time in all datasets although the number of edges is increased significantly. While the graph degree does not make a significant contribution, Fig. 17(b) shows that the number of routers contributes significantly to the precomputation cost. We built the program using Java in Netbeans 12. The precomputation time is the best in 8 cores i7-8665U CPU with 16 GB DDR4 RAM running Windows 10 Pro. To simulate a low computation device, we evaluate the precomputation performance on VM 1-core CPU with 4 GB RAM and VM 2-cores CPU with 6 GB RAM. Both VMs are running Linux Ubuntu 18 LTS as the operating system. As seen from this figure, the computation performance is similar on VM with low resources.


Table 4. List dataset.

Data type	Number of devices	Gateways
1K	1000	10
10K	10000	100
20K	20000	200


Fig. 15. Dataset degree distribution.

Fig. 16. Dataset characteristics.

5.2. Priority-based preference method
In the priority-based preference method, the next candidate is chosen based on the precomputed alternate gateways obtained from order- HVD. The aim is to minimize the hops to reach the alternate gateway.

Order- HVD provides precomputed  gateways for each router. During a failover situation, all affected routers will choose the next alternate gateway from the precomputed list. When multiple failures occur, this method will try to find the next candidate in the list until no more online gateways can be found. If no online gateways can be found, the routers will be considered to be blackout routers

5.3. Reverse priority preference method
In the reverse priority preference method, the next candidate to be chosen is the last candidate from the precomputed alternate gateways obtained from order- HVD. The aim is to avoid overloading the next closest gateway by choosing a gateway which is further away in relation to the number of hops.

During a failover situation, all the affected routers will choose the next alternate gateway from the reverse precomputed list. When multiple failures occur, this method will try to find the next candidate in the list from the last candidate and move upward to a closer candidate until no more online gateways can be found. If no online gateways can be found, the routers will be set as blackout routers.

The reverse priority-based preference algorithm is visualized in Fig. 19. The black nodes represent the routers whose main gateway has failed. In this example, the next available gateway for  is gateway . The case example in dataset 1k is shown in Fig. 19(b).

Fig. 19. Reverse order- HVD-based recovery concept where the next alternate gateway is picked in reverse order from the predefined list.

5.4. Nearest neighbour preference method
This method is based on the nearest adjacent router’s gateway if the chosen gateway is within the precomputed -gateways. The aim is to ensure that the router will connect to the nearest gateway in relation to physical distance.

In this method, during a failover situation, all affected routers will choose the next alternate gateway from the nearest neighbour’s active gateway. When its nearest neighbour’s gateway is offline or the gateway is not in the precomputed list, the router will try to find the gateway from the second nearest gateway. When no gateways can be obtained from the neighbours, the routers will be set as blackout routers. The blackout routers will check several times to see if there are any updates from its neighbours before they are permanently marked as blackout routers.

The nearest neighbour preference method is illustrated in Fig. 20. The black nodes represent the routers whose main gateway has failed. In this example, the next available gateway for  is gateway  since  is the nearest router that has an active gateway in  precomputed list. Since  gateway is , router  will use this gateway as the replacement gateway. The case example in dataset 1k is shown in Fig. 20(b).


Fig. 20. Nearest router-based recovery concept where the next alternate gateway is the same as the nearest neighbour’s gateway.

5.5. Farthest neighbour preference
This method is based on the farthest adjacent router’s gateway if the chosen gateway is within the precomputed list. The aim is to avoid overloading the gateway which is closest in relation to physical distance by choosing a gateway which is further away.

Similar to the previous method, during a failover situation, all the affected routers will choose the next alternate gateway from the farthest neighbour’s active gateway. When its farthest neighbour’s gateway is offline or the gateway is not in the precomputed list, the router will try to find the gateway from the second farthest gateway. When no gateways can be obtained from the neighbours, the routers will be set as blackout routers. The blackout routers will check several times to see if there are any updates from their neighbours before they are permanently marked as blackout routers.

The farthest neighbour preference method is illustrated in Fig. 21. The black nodes represent the routers whose main gateway has failed. In this example, the next available gateway for  is gateway  since  is the nearest router that has an active gateway in the  precomputed list. Since  gateway is , router  will use this gateway as the replacement gateway. The case example in dataset 1k is shown in Fig. 21(b).

Fig. 21. Farthest router-based recovery concept where the next alternate gateway is the same as the farthest neighbour’s gateway.

5.6. Majority preference method
This method is based on the gateway that is being used by the majority of its adjacent routers to ensure that all routers with the same gateway stay close together.

During a failover situation, all the affected routers will choose the next alternate gateway by selecting the most used online gateway in the vicinity of its neighbourhood. When a router cannot determine which gateway is being used by the majority, it is considered to be a blackout router. Similar to the nearest and farthest neighbour preferences, the blackout routers will check several times to see if there are any updates from their neighbours before they are permanently marked as blackout routers.

The majority preference method is illustrated in Fig. 22. The black nodes represent the routers whose main gateway has failed. In this example, blackout router  has 3 neighbours with an online gateway and 2 neighbours with an offline gateway. From all the online gateways, it can be seen that  is being used by two nearest neighbours while gateway  is only being used by one router. Therefore, router  will choose gateway  as its replacement gateway. The case example in dataset 1k is shown in Fig. 22(b).

Fig. 22. Majority-based recovery concept where the next alternate gateway is the most commonly use gateway around the neighbourhood.

5.7. Random preference method
The aim of this method is to distribute the assignment of backup gateways over all the available backups and minimize the concentration of routers in a particular gateway. During a failover situation, all the affected routers will choose the next alternate gateway by selecting an alternate online gateway from the list randomly. When no gateways can be obtained from the neighbours, the routers will be set as blackout routers.

The random preference method is illustrated in Fig. 23. The black nodes represent the routers whose main gateway has failed. In this example, blackout router  can choose a replacement gateway from three available gateways. The case example in dataset 1k is shown in Fig. 23(b). Unlike the other methods, the random preference method separates a router from the other routers in its group of chosen gateways. The group of chosen gateways cannot be seen when using this method.

Fig. 23. Random-based recovery concept where the next alternate gateway is randomly chosen from the predefined list.

5.8. Comparison and evaluation
This subsection compares the aforementioned six recovery preference methods. The evaluation focuses on the number of hops for the routers to reach their primary gateway, the number of gateways that are involved during the recovery and the number of possible blackout routers.

Fig. 24 shows the performance behaviour of the six methods using the 1k dataset with one failure. In the legend, hvd refers to priority preference, rhvd refers to reverse priority preference, nn refers to nearest neighbour preference, fn refers to farthest neighbour preference, mjr refers to majority preference and rdm refers to random preference.


Fig. 24. The result of 1k dataset with 1 failure.

As can be seen from these graphs, almost all the methods achieve a similar performance and keep the number of hops to a minimum, as shown in Fig. 24(a). Only the reverse priority preference and random preference methods have a higher number of hops for the recovery due to access to the last precomputed gateway in the order- HVD list as illustrated in Fig. 24(b). The number of gateways involved in the recovery process are similar, however only the rhvd and rdm methods have a higher number of gateways that are involved in the recovery process, as can be seen in Fig. 24(c). From Fig. 24(d), it can be seen that all the methods can find the replacement gateway successfully, hence none of these methods caused blackout routers.

Further experiments with 3-chain failure using the same dataset in Fig. 25 show similar results to single failure. Only reverse priority rhvd and random preference rdm methods have a higher number of hops than the other methods. From this experiment, it can be seen that the lowest number of hops is achieved by the priority preference hvd method by keeping the number of hops below the other methods, as illustrated in Fig. 25, Fig. 25. Method hvd also manages to keep the number of gateways that are involved in recovery low, as shown in Fig. 25(c). Furthermore, in Fig. 25(d), the nearest neighbour nn, farthest neighbour fn and majority preference mjr methods have blackout routers when  whereas the other methods successfully avoid blackout routers in these experiments.


Fig. 25. The result of 1k dataset with 3-chain failures.

In the next experiments, we use a 10k dataset with multiple gateway failures. Fig. 26 shows the result of 10k with 10% gateway failure. Similar to the previous experiments, hvd maintains the lowest number of hops, as seen in Fig. 26, Fig. 26 while both reverse priority and random preference methods suffer from a high number of hops. In Fig. 26(c), rhvd and rdm have a higher number of routers that are involved during the recovery process. To avoid blackout routers, as shown in Fig. 26(d), only hvd, rhvd and rdm achieve successful recovery when  and upwards.


Fig. 26. The result of 10k dataset with 10% failures.

Further experiments with 30% gateway failure reveal similar trends, as shown in Fig. 27. Method hvd has the lowest number of hops for all values of , as shown in Fig. 27, Fig. 27, while rhvd and rdm have more hops than the other methods. As shown in Fig. 27(c), hvd achieves the best performance by involving the lowest number of gateways during the recovery process. Furthermore, hvd, rhvd and rdm can successfully avoid blackout routers when  as shown in Fig. 27(d).

Fig. 27. The result of 10k dataset with 30% failure.

Based on our experiments, using the priority preference (hvd) method for precomputed -gateways to choose the replacement gateway during primary gateway failure is proven to have better overall performance than any other methods.

6. How many backups is enough?
The value of  in order- HVD indicates the number of precomputed  gateways for all routers in the mesh network. In theory, the more backups a router has, the more chance it has of not becoming a blackout router during multiple gateway failure. While this appears to be true, the question is, does it really work this way?

In this section, we investigate the impact of increasing the value of  to determine the precomputed  gateways in handling failure. Another aspect that needs to be taken into account is graph degree . In Fig. 16(c), we can see that gateway degree  remains static after . Therefore, in this part, we use  during the experiments to identify the effective number of  needed as the precomputed backup for each router.

To test how the failure rates and  affect the number of blackout routers, we conduct experiments using the random percentage of gateway failures on the 10k dataset with a static graph degree  multiple times and achieve the result in Fig. 28. As can be seen from Fig. 28(a), during the increment of percentage failures, the number of blackout routers also increases where  suffers the most losses from blackout gateways. Fig. 28(b) shows, unsurprisingly, the number of blackout routers can be reduced by providing more precomputed gateways to the routers.

Fig. 28. The number of blackout routers on 10k dataset,  during multiple gateway failure.

As an inverse graph of blackout routers, Fig. 29 shows the result from a different perspective, this being that the remaining online routers show the robustness of the mesh network in handling multiple gateway failure. From both Fig. 29, Fig. 29, we can see that  is not the best option to ensure the robustness of the overall system. Using four precomputed gateways () will ensure the overall mesh system can withstand 30% or more simultaneous gateway failures. When memory is not an issue for the routers or IoT devices, a higher  is proven to have better robustness than a lower .


Fig. 29. The number of online routers on 10k dataset,  during multiple gateway failure.

7. Mesh degree for handling gateway failure
The graph degree in a mesh network refers to the dominated degree in the IoT network, as given in Definition 4.3. A vertex degree indicates how many adjacent vertices are connected to a particular vertex. Theoretically, the more vertices which are adjacent to a vertex, the more possible ways there are to reach the nearest gateway or another alternate gateway. Therefore, the graph degree plays a pivotal role in preserving the mesh system to ensure there are more blackout routers during multiple gateway failure.

The experiments are performed by making the value of  static on the 10k dataset. The IoT network graphs are constructed with different values of  and the percentage of random gateway failure is increased gradually. These experiments are performed multiple times to ensure the correctness of the results.

Fig. 30. The number of blackout routers on 10k dataset with 
 
 during multiple gateway failure.

Fig. 30 shows the impact of graph degree  and the percentage of gateway failure on the percentage of blackout routers. As can be seen from both figures, the lowest percentage of blackout routers occurs when . When graph degree , the performance in minimizing the number of blackout routers is similar.

When comparing the outcome behaviour from graph degree in Fig. 30 and the number of predefined  backup as in Fig. 29, it is clear that the number of neighbours do not give significant improvement for the network robustness as long as the minimum number of neighbour is 3. What we can see from these results, the most important factor to increase the network robustness in handling multiple gateway failures is by providing at least 4 backup gateways in each router.

This experiment can also be seen from the online routers’ perspective shown in Fig. 31 where the impact of graph degree and percentage of gateway failures is investigated. As an inverted version of the blackout result, it can be seen from Fig. 31(a) that the percentage of online routers is stable for all number of failures after graph degree . While the trend of declining online routers during the increment of gateway failures remains similar for all degrees, only graph degree  performs better performance in keeping the number of online routers higher than the other degrees with an increment in gateway failures.


Fig. 31. The number of online routers on 10k dataset with 
 
 during multiple gateway failure.

8. Conclusion
In this paper, we conducted experiments on precomputed  backup gateways using order- HVD for the mesh edge/fog network to identify some important factors that might affect the recovery performance. From our experiments, we made the following interesting findings:

1.
The priority-based preference () method proved to be the best option for choosing the replacement gateway during gateway failure for the routers, as it can keep the number of hops low and ensure no routers are left in a blackout state.

2.
The adjacency gateway can be used to identify the robustness of HVD in identifying the maximum -chain failure that can occur in the mesh network.

3.
While increasing the number of precomputed alternate gateways can increase the routers survival rate during multiple gateway failures, the consequences that need to be considered is the storage size that need to be allocated in each router to keep the alternate gateway list. Depends on the expected survival rate, 4 predefined gateways can withstand 50% simultaneous gateway failures by keeping more than 90% routers online with the minimum latency to the nearest alternate gateway.

4.
The graph degree  value does not have a significant effect on reducing the percentage of blackout routers over numerous gateway failures when the graph degree  3.

5.
Several issues that might arise during the actual implementation of this method, such as network broadcast initialization that might cause a short network disruption and how to update the precomputed gateway list when the network structure is updated. We are still working to overcome these issues for the incoming works.