Currently, flipped learning requires a framework that will give novices and students the ability to face the complex problems encountered in programming courses. It is necessary to design a design thinking learning framework that addresses independent learning and specific processes that will improve students' 21st-century skills. The existing literature has not implemented flipped programming courses from a design thinking perspective (Cook & Bush, 2018), which would thus be an innovative approach to designing teaching methods and investigating the effects of this framework. The purpose of this study was to develop analyze, observe, reflect, conceive, design, implement, and operate (Crawley et al., 2007) a DT-CDIO model and to investigate the relationship of the flow experience to computational thinking and cognitive load in order to understand the impact of the flow experience on a flipped programming course. The participants in this study comprised 40 pre-service education students (Male = 17; Female = 23). The partial least squares (PLS) method was used for the data analysis to test the model. This study was intended to obtain and evaluate significant differences between the students' flow experience and their computational thinking ability and cognitive load. The results indicated that the DT-CDIO pedagogy filled a long-standing gap related to a lack of reflective pedagogy and design thinking problems. The flow experience negatively impacted creativity and problem solving ability. Meanwhile, intrinsic cognitive load negatively impacted the flow experience. Germane cognitive load positively impacted the flow experience. In particular, the flow experience is a crucial factor that can be used to predict various computational thinking skills in a programming curriculum. More importantly, this study provides important insights into the implications of the DT-CDIO approach and other related factors.

Previous
Next 
Keywords
Flipped classroom

Design thinking

Teaching/learning strategies

21st-century abilities

Computational thinking

Abbreviations
1. Introduction
In the face of the increasingly complex problems in the 21st century that must be solved by today's students, studies of flipped learning, design thinking, and programming have been conducted. These studies provide crucial information by which to improve students' 21st-century abilities. Currently, flipped learning is still a subject worthy of research, but it also is associated with many challenges and difficulties (Akçayır & ; Chen, Wang, Kinshuk, & Chen, 2014; Cheng, Ritzhaupt, & Antonenko, 2019; Lo, Lie, & Hew, 2018). In particular, the overall effectiveness of flipped learning may be highly affected by student-related factors (e.g., number of students, academic preparation, scientific reasoning ability, self-directed study skills), which may impact flipped learning at different levels (Jensen, Holt, Sowards, Ogden, & West, 2018). Flipped learning has to be adjusted to respond to subject characteristics, otherwise students might find it difficult to learn on their own (Cheng et al., 2019). When allowing students to use a self-study process, they do not always choose the best learning strategies (Dirkx, Camp, Kester, & Kirschner, 2019), which appears to be a common problem in flipped learning. These problems demonstrate the self-learning problem. Several studies have applied self-regulated learning to solve issues related to student learning and self-regulated learning (Çakıroğlu & Öztürk, 2017; van Alten et al., 2020a, 2020b) in flipped learning. However, their results indicate that students need an explicit teaching framework and an independent learning approach in order to continue to engage in flipped learning.

Furthermore, in order to improve the quality and degree of usability of flipped learning, it must be specifically based on a framework or an instructional design (Bond, 2020; Lundin, Rensfeldt, Hillman, Lantz-Andersson, & Peterson, 2018). Several studies have implemented problem-based learning (Çakıroğlu & Öztürk, 2017; Chis, Moldovan, Murphy, Pathak, & Muntean, 2018; Cukurbasi & Kiyici, 2018) in a flipped programming course. In particular, Zhang, Dang, and Amer (2016) demonstrated that most students view flipped learning as a useful teaching method, where it was considered to be particularly useful for hands-on learning (e.g., programming). The existing literature has not implemented flipped programming courses from a design thinking perspective intended to apply it to interdisciplinary learning (Cook & Bush, 2018). Flipped learning requires a framework that will give novices and students the ability to face complex problems in programming courses. It is necessary to design a design thinking learning framework that addresses independent learning and specific processes to improve students' 21st-century skills.

The complex challenges that lie ahead require teachers to integrate design thinking into their curricula in order for students to develop 21st-century skills, trigger creativity (Henriksen, Richardson, & Mehta, 2017; Lin, Shadiev, Hwang, & Shen, 2020), and develop talent (Hokanson & Kenny, 2020). Specifically, several studies have discussed how to implement and integrate design thinking into courses (Baker & Moukhliss, 2020; Cutumisu, Schwartz, & Lou, 2020; Henriksen et al., 2017; Lin et al., 2020; Novak & Mulvey, 2020). Several studies have also indicated the importance of reflection in any teaching method (e.g., design thinking (Cutumisu et al., 2020), in massive open online courses (MOOCs) (Michos & Hernández-Leo, 2020), and in flipped programming courses (Wang, Chiu, & Lee, 2020). Furthermore, when teachers use reflection to teach students, they should focus on both teaching knowledge and teaching action (McAlpine & Weston, 2002, pp. 59–78). A study by Bengtsson (1995) discusses additional ideas related to the pedagogical value of reflection. These ideas demonstrate that reflection is crucial to teachers. Reflection brings many learning benefits to students, helps them to improve their learning performance (Chen, KinshukWei, & Liu, 2011; Cutumisu et al., 2020; Duijnhouwer, Prins, & Stokking, 2012; McAlpine & Weston, 2002, pp. 59–78), and gives them the ability to design new solutions (Tracey, Hutchinson, & Grzebyk, 2014).

In current design thinking teaching methods, it is difficult for students and novices to develop their abilities and engage in interdisciplinary learning. Although research has proposed teaching strategies for design thinking, it is very rare for such research to incorporate reflection into teaching strategies related to design thinking.

Currently, many studies are examining the effects of flipped learning on programming course learning performance (Kanaparan, Cullen, & Mason, 2019; Wang, 2019; Zhang et al., 2016). In addition, Zhang et al. (2016) indicated that students’ degree of computer self-efficacy, motivation, and the teaching method can significantly impact their intention toward learning in any learning environment. Many studies have investigated the effects of the flow experience (Buil, Catalán, & Martínez, 2019; Chang, Liang, Chou, & Lin, 2017; Wang & Chiang, 2020; Zhao, Wang, & Sun, 2020), computational thinking ability (Doleck, Bazelais, Lemay, Saxena, & Basnet, 2017), and cognitive load (Stachel et al., 2013) on other factors that affect learning. In particular, Basawapatna, Repenning, Koh, and Nickerson (2013) proposed a framework called the Zones of Proximal Flow, which was applied to a programming course in order to enhance students' computational thinking skills. The impact of the student to program on the learning process is still unclear in terms of the relationship between flow experience, computational thinking ability, and cognitive load. Moreover, few programming studies have investigated the effects of the flow experience and cognitive load on computational thinking ability. Therefore, this study was intended to investigate the relationship between the flow experience, cognitive load, and computational thinking ability in the programming course.

In the present study, the key components and problems of current instructional design methodologies are considered in order to investigate the relationship of the flow experience with programming courses. A design thinking (DT) framework is proposed that incorporates analysis, observation, and reflection into the conceive, design, implement, and operate (CDIO) engineering design framework. There have been a few studies in which an instructional framework that incorporates design thinking, flipped learning, and programming comprise the design.

This framework supports the development of computational thinking skills in students in such a way as to help them become independent design thinking programmers. Therefore, it would be innovative to design a teaching method that investigates the effects of this framework. In addition, an analyze, observe, reflect, conceive, design, implement, and operate (DT-CDIO) framework is also used, and the flow experience model is used to evaluate its impact on cognitive load and computational thinking among college students in order to understand their programming experiences related to the flow experience, which may in turn help teachers design appropriate programming courses. The purpose of this study was to apply DT-CDIO model and to investigate the effects of the flow experience on computational thinking and the effects of cognitive load on the flow experience.

2. Literature review
2.1. Flipped learning
Flipped learning is an approach based on collaborative learning theories, cooperative learning theories, and constructivist theories (Bishop & Verleger, 2013). Flipped teaching is typically defined as a situation in which a teacher supplies students with learning materials before the class and then implements meaningful teaching activities during the class (Cheng et al., 2019; Jensen, Kummer, & Godoy, 2015; Lundin et al., 2018; van Alten et al., 2020a). In particular, teacher interaction in the classroom is critical to learning performance (Lin, Hung, Kinshuk, & Chen, 2019; Wang, 2019), and a successful flipped classroom thus incorporates a student-centered curriculum (O'Flaherty & Phillips, 2015). Several studies have indicated that flipped learning can lead to many benefits and advantages for students (Akçayır & ; Bond, 2020; Karabulut‐Ilgu, JaramilloCherrez, & Jahren, 2018; Kostaris, Sergis, Sampson, Giannakos, & Pelliccione, 2017; Lo et al., 2018). Bond’s (2020) systematic study found that students who have been exposed to flipped learning methods may not improve in terms of academic performance, but due to the change in the learning approach, their levels of motivation, self-efficacy, etc. may be improved. These studies showed that flipped learning provides specific learning benefits to students. It is important to design an appropriate instructional design or framework that provides learning benefits to students and novices in the flipped learning context.

2.2. Integrate design thinking into the curriculum
The design thinking is a thinking and understanding methodology that describes the learning and investigation process (Hokanson & Kenny, 2020). DT is a problem-solving approach that can help students deal with new challenges in a variety of environments (Baker & Moukhliss, 2020; Cutumisu et al., 2020). In addition, there are three main limitations that have been identified in design thinking (DT): desirability, viability, and feasibility (Brown, 2008). Design thinking provides an opportunity for students to learn, create, and think in ways that help them create products in a design culture (Cook & Bush, 2018), such as a social business model for people with disabilities (Wu, Liu, & Yuan, 2020). DT can help students gain basic knowledge and skills that enhance their 21st century skills (Lin et al., 2020). The integration of DT into a curriculum can improve students' learning and problem-solving abilities when they lack meaningful learning in traditional learning contexts (Chin et al., 2019). However, many studies have found that design thinking is still associated with many challenges and instructional design problems (Baker & Moukhliss, 2020; Cutumisu et al., 2020; Hokanson & Kenny, 2020; Lin et al., 2020; Novak & Mulvey, 2020). Teachers need frameworks and tools that support their design practices that also provide students with a variety of ways to engage in meaningful learning (Novak & Mulvey, 2020). These studies have demonstrated the importance of developing a design thinking framework.

2.3. Hypothesis/research model
2.3.1. The relationships between the flow experience and computational thinking ability
The concept of ﬂow was first proposed by Csikszentmihalyi (1975), who stated that a person in a flow state can easily accomplish a specific goal. A flow state is a concentrated, optimal state of mind that helps an individual to perform optimally and enthusiastically while engage in an activity (Fullagar, Knight, & Sovern, 2013). The flow experience has several intrinsic psychological characteristics (e.g., feelings of enjoyment, concentration, and immersion) that develop concentration and lead to self-determination in activities (Chen, 2006; Csikszentmihalyi & Csikzentmihaly, 1990).

In addition, programming can enhance students' computational thinking skills (Chen et al., 2017; Lye & Koh, 2014). Mental ability is basically correlated with a specific degree of computational thinking ability (Città et al., 2019; Román-González, Pérez-González, & Jiménez-Fernández, 2017). More importantly, computational thinking is associated with sensorimotor processes, which are advanced cognitive processes (Città et al., 2019). That is to say, computational thinking may be correlated with the flow experience. In general, the implementation of a programming curriculum is based on the teacher's use of different pedagogies or learning systems intended to improve specific computational thinking abilities. A programming course can enhance students' computational thinking abilities (e.g., creativity, critical thinking, algorithmic thinking, problem-solving, and cooperation (Korkmaz, Çakir, & Özden, 2017). In a teaching context, students in a flow state practice programming in order to improve specific computational thinking abilities while effectively balancing challenges and skills.

Furthermore, researchers have attempted to apply different teaching methods or learning systems to programming courses in order to promote computational thinking skills in students. For example, Li, Cheng, and Liu (2013) found that students with high levels of background knowledge use game-based systematic learning to enhance their algorithmic thinking skills through flow experiences. Liu, Cheng, and Huang (2011) used a simulation game to promote flow experiences and found that students with undergoing a flow experience used learning strategies (e.g., trial-and-error, case-based learning, and analytical reasoning) to promote computational problem-solving skills. These studies imply that students engaged in a flow experience use different teaching methods or learning systems in order to improve specific computational thinking abilities.

Therefore, two hypotheses are proposed as follows:

H1a

: The flow experience has a positive effect on algorithmic thinking.

H1b

: The flow experience has a positive effect on the ability to cooperate.

H1c

: The flow experience has a positive effect on creativity.

H1d

: The flow experience has a positive effect on critical thinking.

H1e

: The flow experience has a positive effect on problem solving.

2.3.2. The relationship between cognitive load and the flow experience
Sweller, Van Merrienboer, and Paas (1998) distinguished among three different types (intrinsic, extraneous, and germane) of cognitive load in the learning environment. Intrinsic cognitive load refers to the amount and interactivity of elements that must be processed in relation to the learning material (or task), where an attempt is made to determine which instructional design affects changes in cognitive load. Extraneous cognitive load refers to the loading associated with the organization of learning material or the learning multimedia presentation, where an attempt is made to determine which can be changed by an instructional design. Germane cognitive load refers to learner's effort and commitment to learning, where an attempt is made to determine which can be changed by an instructional design. It is clear that cognitive load is relevant to instructional design and that psychological factors such as the flow experience cannot be ignored in terms of their impact on the three types of cognitive load referenced above.

In addition, several studies have indicated that intrinsic cognitive load has a negative effect on the flow experience (Chang et al., 2017; Hong, Hwang, Tai, & Lin, 2019; Hong et al., 2019a,b,c; Hong, Tsai, et al., 2019). In particular, Chang et al. (2017) investigated the relationship between the flow experience and different types of cognitive load in a game-based learning context. They found that intrinsic and extraneous cognitive load have negative effects on the flow experience, and germane cognitive load has a positive effect on the flow experience. Based on previous research investigating the relationship between the cognitive load and flow experience, there is clearly a need to investigate the relationships among the available models.

Therefore, the following hypotheses are proposed:

H2a

: Intrinsic cognitive load has a negative effect on the flow experience.

H2b

Extraneous cognitive load has a negative effect on the flow experience.

H2c

: Germane cognitive load has a positive effect on the flow experience.

3. Method
3.1. DT-CDIO engineering design method
3.1.1. Comparison of design thinking frameworks
The research framework above is an extension of the Stanford University School of Design's Design Thinking Framework (d. school, 2010), a comparison and extension of this DT framework is shown in Fig. 2. In comparison to the DT framework from the Stanford School of Design, the analysis model extends the empathy and problem definition learning steps, so students can use a collection of relevant information to obtain more opportunities to understand a user's problem. Students can learn to analyze and identify user problems from a wide range of data. Second, the observed model is used to extend the definition and ideation learning steps, which provides a greater scope for problem solving and allows students to come up with different solutions to problems. With a precise definition of a problem, students can refine concepts and formulate innovative questions. Third, the reflection model allows students to evaluate their own solutions with more space in which to engage in problem-solving. Students can clearly understand the limitations, advantages, and disadvantages of their solutions in order to refine their problems and revise their solutions. Fourth, the evaluation model provides teachers with an opportunity to evaluate the feasibility of a website. If the student cannot solve the problem, he/she must reconsider the design idea and the problem. Last, we use the CDIO Engineering Design to develop students' engineering design skills. It provides students with an opportunity to help them complete their design solutions.

Fig. 2
Download : Download high-res image (349KB)
Download : Download full-size image
Fig. 2. Comparison of design thinking framework.

3.1.2. Development of the DT-CDIO engineering design method
This study is based on the O-CDIO study (Taajamaa et al., 2016), in which a DT-CDIO model was developed to create websites intended to help students analyze, observe, reflect, conceive, design, implement, an operate (DT-CDIO), as shown in Fig. 3. The DT-CDIO model supports learning or website creation based on design principles intended to enhance design thinking and computational thinking abilities in students.

Fig. 3
Download : Download high-res image (226KB)
Download : Download full-size image
Fig. 3. DT-CDIO engineering design model.

In this study, the DT-CDIO engineering design model is developed in such a way as to promote pre-service education students' design thinking and computational thinking abilities in the field of engineering design, as shown in Fig. 3. This design thinking and CDIO framework can be described through the following steps:

3.1.2.1. Analysis: what problem should be solved?
Search and collect relevant information: Through the use of interviews, focus groups, questionnaires, simulations, or other activities (e.g., role playing, profiles, ethnographies, stories), relevant information can be collected on the Internet in order to identify and determine relevant information and the questions to be answered. In this study, the steps involved in collecting relevant information are intended to help students understand the questions.

Analyze relevant data: We used the Empathy Mapping tool and the Human-Centered Design framework as tools for solving the problem and for the data analysis. These tools were used to analyze user behavior. In this study, the process of analyzing user behavior helps students understand the user experience and identify their problems.

3.1.2.2. Observe: what happened to the real problem?
Observe the real problem: Observe actual problems in context (e.g., phenomena, causes) and check user needs (e.g., user motivations, user pain points, and requirements) in order to understand actual problems. Our teaching tools involve the use of the AEIOU observation method tool, and forms were provided for students to practice their observations. Afterward, the problems are observed and identified by correlating the data with the previous data analysis. In this study, an understanding of the problem and the procedures taken to relate previously collected data to the problem can help students understand the true scope of the problem.

Define problems and analyze: Remain open while engaging in divergent thinking to think through the problem and refine the concepts associated with it in order to come up with innovative ideas. In this study, this step provides students with opportunities to define practical problems and supports the creative thinking necessary to come up with innovative ideas.

3.1.2.3. Reflection: why use this solution to solve this problem?
Reflect on the problem: Reflect again using human-centered thinking, and evaluate the solution with the 5W1H approach to reflect on whether there is a better solution to the problem. In this study, procedures were presented to help students refine their concepts by encouraging them to reflect on the actual problem and reconsider their solutions.

Reflect on implications: Students should consider the possible human and social implications of this problem as they rethink the problem and solutions. The point of view (POV) taken when attempting to solve this problem is considered, and an attempt is made to determine why this point of view is better than others. In this study, it is posited that procedures that require reflection can improve the quality of students' reflections and their ability to identify problems.

3.1.2.4. Evaluation: can the solution solve the problem?
Is this problem well resolved in terms of feasibility and perspective at this point in time? Students must return to design thinking and reconsider the problem if it cannot be solved.

The CDIO engineering design framework is given as follows (Crawley et al., 2007):

1.
Conceive: Divergence refers to observing problems from many perspectives.

Define task: Observe the situation, identify common problems and rules, and distribute the information and resources needed to consider the solutions.

Design concept: Use the flow chart as a preliminary observation problem; initially define the problem, and design the solution.

2
Design: Convergence design solutions

Measuring information: Confirm the required range of information, and use keywords to query online in order to collect the required information.

Detailed design: Use a mind map or flow chart to design a detailed solution and present the solution in different ways.

3
Implement: Obtain divergent development solutions.

Preliminary development: Develop the design as a solution through a validation process.

System integration and testing: Develop the complete solution using system integration and testing.

4
Operate: Conduct continuous convergence testing, and correct solutions.

The actual operational solution is a continuous revision of the solution until it is corrected to the best solution.

3.1.3. Applying DT-CDIO approach in a flipped programming course
In this study, teachers pre-produce relevant web-based courses and video lectures on the DT-CDIO method. Students can watch the lectures from the school's Moodle platform to engage in the flipped classroom, where teachers design the course material and create videos according to students' learning levels. All students can access the course through their computers or mobile devices and learn at their own pace.

The course is implemented for 9 weeks, and the Moodle platform is used to allow students to preview and review all course lectures. A new weekly discussion forum is created by the teacher to discuss the course content, and each student is required to participate in the discussion and give opinions. Each week, the students are required to spend 10 min on a pre-recorded video lecture, 20 min reading relevant materials, and 20 min answering questions on the discussion forum. The course includes coursework and a DT-CDIO teaching pack, and we have produced additional slides explaining the DT-CDIO approach and related materials for students to read over. An implementation of the DT-CDIO method into a flipped programming course is presented as follows:

3.1.3.1. Analyze learning step
In the collect information step, we asked students to go on the Internet to collect relevant educational or university websites. One innovative and one traditional case was collected from the Internet as a comparison of information collection and design. We used the university website as a traditional case study, and we used a traditional case study as a teaching example to analyze the website. We used the empathy map tool as a teaching tool and used these teaching tools to empathically analyze user behavior. In Fig. 4, the empathy map for the traditional case is shown.

Fig. 4
Download : Download high-res image (315KB)
Download : Download full-size image
Fig. 4. Empathy map for the traditional case.

3.1.3.2. Observe learning step
To observe the problem step, we used the actual problem (i.e., providing a topic to create a theme) and examined our potential user needs. In this case, the teacher set the project topic in the area of Education and Humanities, and students were required to design a web page with this purpose to focus on possible users. In the observation session, the AEIOU observation tool was explained, and forms were provided for students to practice their observations. In Fig. 5, the AEIOU observation form is shown.

Fig. 5
Download : Download high-res image (190KB)
Download : Download full-size image
Fig. 5. AEIOU observation form.

The AEIOU Observation tool provides students with an opportunity to learn to observe problems in novel ways. Students are asked to use the innovative data collected along with the previous data analysis to observe and identify the problem. After observing the problem, we ask students to define it. Students are allowed to keep thinking about the problem and refine the concepts associated with it to come up with innovative ideas.

3.1.3.3. Reflection learning step
To reflect the problem step, we taught the students to use the 5W1H approach to initially assess solutions and to rethink the problem using a human-centered approach. The students were asked to think of a new solution using different perspectives. Furthermore, after the initial reflection on the problem, we asked the students to rethink the problem and the solution in terms of the possible human and social implications of the problem. In the reflective teaching step, we taught the concept of Point of View (POV) and provided an additional self-reflection form. This self-reflection form allows students to practice self-reflection and enhances their ability to reflect on and identify problems. Fig. 6 provides an example of the self-reflection form.

Fig. 6
Download : Download high-res image (186KB)
Download : Download full-size image
Fig. 6. Self-reflection form.

The self-reflection form provided students with an opportunity to understand the strengths, weaknesses, and implications of their solutions. They were required to reflect on the website in order to determine how the website could be modified and how the website might impact the field of education and humanities. The students were asked to think carefully and to reflect on how to revise their work in order to design a website that would contribute to the fields of education and humanities. Students not only had to think about how to design for a specific audience (e.g., education, humanities), but they also had to refine the interface design and it degree of functionality.

3.1.3.4. Evaluation learning step
After completing the reflection form, the teachers assisted the students with evaluating the feasibility and implications of the project as well as with determining whether the design of the webpage will have an impact or provide a contribution in an educational or humanities context. If they didn't feel it would, the teachers used questioning strategies and guided students to think deeply about the website. Rather than pointing out problems directly, the teachers guided them to think more deeply about the website, and together, they discussed revisions that could be made to the website.

3.1.3.5. CDIO engineering design
3.1.3.5.1. Conceive
In the defining tasks step, we identified common web problems and initial design programming concepts. We taught the steps of gathering information and defining the problem to ensure that the students could determine the function of each program. In the conceive course, we taught the use of the Draw.io online flowchart website and related flowchart materials. The students were asked to define the functions and techniques of the program as an initial flowchart exercise. Fig. 7 shows a flowchart website for Draw.io.

Fig. 7
Download : Download high-res image (382KB)
Download : Download full-size image
Fig. 7. Draw.io website.

3.1.3.5.2. Design
Once we identified these concepts, various platforms (e.g., Google, StackOverflow) were used to search for relevant programming information. We taught information search techniques and advanced flowcharting steps to ensure that the students were able to find relevant program functions and could design programs from a variety of sources. During the detailed programming sessions, our teachers confirmed the students' flowcharts and use them as prototypes for programming.

3.1.3.5.3. Implement and operate
After determining the design of the flowchart, the students had to develop the program in detail and then they had to test and optimize the program. As mentioned earlier, they were required to create a website in the area of education and humanities, which included web design diagrams and related materials. The teachers set the theme as Education and Humanities, and the students were required to submit a web project for the final project. The current project theme was in line with the learning needs of the department and helped the students to link to the educational content they had already learned in the department. They had to use the DT-CDIO engineering design approach to create the website. Fig. 8 show the Humanities Education website created by the students.

Fig. 8
Download : Download high-res image (584KB)
Download : Download full-size image
Fig. 8. Humanities Education website created by the students.

3.2. Participants
The participants in this study comprised 45 pre-service education students (20–21 years old), recruited mostly from the Department of E-learning Design and Management. Only five students responded with incomplete data, so they were removed from the experiment. The total number of valid responses obtained from data collection was 40 participants (Male = 17; Female = 23). The data collection process was conducted at a university in Taiwan, and the participants were selected using convenience sampling. They hadn't taken related programming courses and had no previous design thinking learning experience in a programming course. The students were from the Teacher's College, where all students can take an internal examination to obtain an education program in the area of information technology at secondary schools. Students who complete the education program and passed the internal examinations can have the opportunity to participate in teacher examinations to obtain a teaching certificate that will engage them to teach information courses in secondary schools.

Furthermore, the researcher and teachers distributed questionnaires to the students in the final week of the study. All of the participants agreed to participate willingly, and no form of incentive was required. The students were free to decide whether or not to complete the questionnaires. The questionnaires were distributed to students who voluntarily chose to participate in the study.

3.3. Data collection
There were three questionnaires designed for this research (cognitive load, flow experience, and computational thinking) measured on a five-point Likert scale ranging from 1 = strongly disagree to 5 = strongly agree, as shown in Appendix A. The cognitive load questionnaire was also revised from Leppink, Paas, Van Gog, van Der Vleuten, and Van Merrienboer (2014). There were 13 items used to measure the three dimensions of cognitive load (intrinsic (INT), extraneous (EXT), and germane (GER)). Also, Leppink et al.’s (2014) study was adapted from their previous study (Leppink et al., 2013) in which the cognitive load questionnaire was developed and tested for reliability and validity. The flow experience questionnaire was also revised from Chen (2006). There were 23 items used to measure nine dimensions (immediate feedback (IME), clear goals (CLE), merger of action and awareness (MER), concentration (CON), sense of control (SEN), loss of self-consciousness (LOSC), time distortion (TIM), telepresence (TEL), and positive affects (POS)). In a study by Chen (2006), the reliability and validity of the flow experience questionnaire were validated. Wang et al.’s (2020) study also adapted the flow experience questionnaire (Chen, 2006). The computational thinking questionnaire was also adapted from Korkmaz et al. (2017). There were 29 items used to measure five dimensions (algorithmic thinking (ALG), cooperativeness (COPT), creativity (CRE), critical thinking (CRI), and problem-solving (PRO)). A study by Korkmaz et al. (2017) validated the reliability and validity of the computational thinking questionnaire. Overall, Cronbach's alpha for the questionnaires was 0.822 (Korkmaz et al., 2017). The definitions of the constructs were the same in all of the questionnaires used in this study.

3.4. Data analysis
The partial least squares (PLS) method was used to test the model, and SmartPLS 2.0 software was used to analyze the causal relationships between the different latent variables. PLS is suitable structural measurement model for small sample sizes, complex models, and formative measures (Hair, Sarstedt, Pieper, & Ringle, 2012). There were therefore many reasons why PLS was suitable for the analytical process used in this study. First, the sample was relatively small (n = 40), so PLS path modeling was deemed to be the most suitable model for data analysis. Second, the PLS approach was considered to be the most appropriate approach when considering the current research model and the exploratory and predictive nature of the study. Third, one useful approach to test theoretical alternatives is a partial least squares structural equation modeling (PLS-SEM) approach. In this study, the teachers implemented the DT-CDIO method for programming courses with students in a teacher education college. The PLS method was used to assess the predictive ability of the a priori variables. The aim of this study was to evaluate the differences between the students' flow experience and its effects on computational thinking ability and cognitive load.

3.5. Reliability and validity analyses
The validity and reliability of this model was examined using the following tests: (1) factor loading values > 0.7; (2) Cronbach's alpha values and composite reliability values > 0.7, and (3) average variance extracted (AVE) values > 0.5.

First, all factor loading items were significant. The values should be higher than 0.7 (Fornell & Larcker, 1981) and not less than 0.6 to be in an acceptable range. The current data met these reliability requirements, where loadings of 0.6 were retained because they would not affect the overall results. Therefore, we carefully considered each item and deleted all inappropriate items, as shown in Table 1 (44 items). Second, the Cronbach's alpha and composite reliabilities were higher than 0.7 (Fornell & Larcker, 1981; Hair, Hult, Ringle, & Sarstedt, 2016), which indicated that they were acceptable, as shown in Table 1. Third, the discriminant validity was examined using the square root of the AVE for each potential variable. The AVE is required to be greater than 0.5 (Hair et al., 2016). We evaluated the discriminant validity using the Fornell-Larcker method, and the data indicated that all square roots of the AVE were higher than their corresponding correlation coefficients, as shown in Table 2.


Table 1. Assessment of reliability and validity.

Dimensions	Variable	AVE	Composite reliabilities	Cronbach's alpha	R
Square	factor loadings
Computational thinking ability	ALG	0.55	0.78	0.73	0.11	ALG1 = 0.90; ALG5 = 0.64; ALG6 = 0.66;
CRE	0.72	0.88	0.80	0.38	CRE1 = 0.83; CRE2 = 0.86; CRE3 = 0.85
CRT	0.79	0.88	0.75	0.001	CRT1 = 0.87; CRT4 = 0.91
COPT	0.70	0.82	0.87	0.005	COPT1 = 0.98; COPT2 = 0.66
PBS	0.72	0.92	0.90	0.12	PBS1 = 0.84; PBS2 = 0.62; PBS3 = 0.93; PBS4 = 0.91; PBS5 = 0.89
Cognitive load	INT	0.83	0.94	0.90	0	INT1 = 0.92; INT2 = 0.94; INT3 = 0.87
EXT	0.87	0.95	0.92	0	EXT1 = 0.95; EXT2 = 0.96; EXT3 = 0.88
GER	0.71	0.92	0.90	0	GER1 = 0.73; GER2 = 0.92; GER3 = 0.88; GER4 = 0.92; GER5 = 0.74
Flow	FLOW	0.69	0.97	0.97	0.36	CLE1 = 0.85; CLE2 = 0.89; CON1 = 0.81; IME1 = 0.81; IME2 = 0.64; LOSC1 = 0.86;; LOSC2 = 0.78; MER2 = 0.82; POS1 = 0.90; POS2 = 0.88; POS3 = 0.89; POS4 = 0.89; POS5 = 0.77 POS6 = 0.90; SEN2 = 0.86; TEL1 = 0.85; TEL2 = 0.73; TEL3 = 0.84; TIM1 = 0.73; TIM2 = 0.76;

Table 2. Construct correlations.

Dimensions	Variable	ALG	CRE	CRT	COPT	PBS	INT	EXT	GER	FLOW
Computational thinking	ALG	0.74								
CRE	-.09	0.85							
CRT	.58	.21	0.89						
COPT	.03	.03	.005	0.84					
PBS	-.34	.36	.06	-.06	0.85				
Cognitive load	INT	-.08	.16	-.08	.16	.10	0.91			
EXT	-.01	.18	-.04	.11	-.08	.47	0.93		
GER	.10	-.45	-.16	-.04	-.28	-.21	-.48	0.84	
Flow	FLOW	.33	-.61	.01	.07	-.34	-.34	-.36	.56	0.83
In addition, the validity and reliability of the model were confirmed, where the value of the variance inflation factor (VIF) for the model was analyzed to determine if there were issues with collinearity. According to Hair et al. (2016), all of the VIF values for all predicted variables should be less than 4. We used SPSS software to calculate the VIF and tolerance values to demonstrate that the model was independent of multicollinearity and that the estimated coefficients were accurate. The results showed that the accuracy of the estimates was not affected by multicollinearity. All of these tests demonstrated the reliability and validity of the model, as shown in Table 1, Table 2

In this study, the evaluation of the structural model was carried out after verifying the reliability and validity of the measurement model. The R2 score was used to evaluate the predictive power of the model. The results revealed that the R-squared values for ALG, CRE, CRT, COPT, PBS, INT, EXT, GER, and FLOW were 0.11, 0.38, 0.001, 0.005, 0.12, 0, 0, 0, and 0.36, respectively.

4. Results
In this study, a 5000 sample bootstrap procedure was used to test the hypotheses. The results showed that the flow experience has a negative impact on both computational thinking and cognitive load, which supported the hypotheses, as shown in Fig. 9 and Table 3.

Fig. 9
Download : Download high-res image (183KB)
Download : Download full-size image
Fig. 9. Research model results.


Table 3. Results of the hypothesis testing.

Hypothesis	Path	Path coefficient (β)	T-Statistics	Results
H1a	Flow - > ALG	0.34	1.46	Rejected
H1b	Flow - > CRE	−0.61	7.48***	Accepted
H1c	Flow - > CRT	−0.01	0.04	Rejected
H1d	Flow - > COPT	0.07	0.39	Rejected
H1e	Flow - > PBS	−0.34	2.42*	Accepted
H2a	INT - > Flow	−0.22	1.98*	Accepted
H2b	EXT - > Flow	0.002	0.01	Rejected
H2c	GER - > Flow	0.51	3.52***	Accepted
*p < .05; t>1.96, **p < .01; t>2.57, ***p < .001; t > 3.29.

To examine the path coefficient (β) and the path (p-value), a structural model was used to test the hypotheses. The structural model was used to calculate the path coefficients for each link in the model and their corresponding p-values. The analysis provided the results for testing the hypotheses, as shown in Table 3.

4.1. The relationship between the flow experience and computational thinking
In the examination of the path coefficients, the path from the flow experience to creativity (β = −0.61; t = 7.48; ***p < .001) and problem-solving (β = −0.34; t = 2.42; *p < .05) were shown to be negatively significant, which supported H1b and H1e.

4.2. The relationship between cognitive load and the flow experience
In the examination of the path coefficients, the path from intrinsic cognitive load (β = −0.22; t = 1.98; *p < .05) to the flow experience was negatively significant, which supported H2a and H2b. Germane cognitive load (β = 0.51; t = 3.52; ***p < .001) was found to have positive effects on the flow experience, which supported H2c.

5. Discussion
The purpose of this study was to apply the DT-CDIO model to investigate the effects of the flow experience on computational thinking and the effects of cognitive load on the flow experience. A flow experience research model was developed using the DT-CDIO method and was used to explain the relationship between the flow experience and other factors. The findings of the study indicated that the flow experience negatively impacts creativity and problem solving, and intrinsic cognitive load negatively impacts the flow experience. However, germane cognitive load positively impacts the flow experience.

5.1. Developing the DT-CDIO method
Previous research has addressed the importance of reflection in the teaching process (Cutumisu et al., 2020; Michos & Hernández-Leo, 2020) and on the challenges related to design thinking (Cutumisu et al., 2020). In the current study, a DT-CDIO approach was proposed that bridges a gap in the existing reflective pedagogy and design thinking literature. In general, it is difficult for novices to understand the boundaries and limitations of their own knowledge domain, which makes it difficult for students to become active learners (Jehng & Chan, 1998). The DT-CDIO method is appropriate for a programming website novice. This instructional approach supports students in the development of design thinking and the practical implementation of an engineering design. It is a suitable method for interdisciplinary learning and helps make it possible for students to learn design thinking and create websites independently after school. The students can search for an online collection of relevant information in related works and can use their analyses and observations to learn and imitate the techniques discussed in these studies. Student modifications to their work can lead to correcting current mistakes or discovering new ideas that may lead to more effective performance (Michos & Hernández-Leo, 2020). Students can examine their work through a process of self-reflection, thus eliminating the need for frequent feedback. It is important to use appropriate methods to keep students on the right learning path in order for them to gain greater learning benefits from face-to-face instruction (Cheng et al., 2019). Although this study did not provide relevant data to support that improved learning outcomes were delivered using the DT-CDIO approach, it was argued that based on the reflection and design thinking literature, the DT-CDIO approach may be an appropriate pedagogical approach to cultivating novices, maximizing support for the development of strengths and skills in students, diversifying the learning process, and extending it to interdisciplinary subjects.

5.2. The relationship between the flow experience and computational thinking
The results for hypothesis H1 indicated that the students' flow experience in the DT-CDIO approach was negatively correlated to creativity and problem solving. The DT-CDIO framework used in this study has the ability to foster design thinking as well as convergence and divergence thinking in the CDIO engineering design process. It was found that students with high levels of the flow experience exhibited less creativity and worse problem-solving skills. That is to say, the students did not experience the flow experience to promote creativity and problem solving abilities through the use of the DT-CDIO method. However, the flow experience is a crucial factor related to improving students computational thinking skills in a programming curriculum. In particular, programming is a mental exercise, similar to the flow experience in sports or music, which allows students to focus on a specific behavior (e.g., problem solving or construction projects). Instructional activities that involve a high level of cognitive demand enable people with high flow experience abilities to experience the flow state (Payne, Jackson, Noh, & Stine-Morrow, 2011). Therefore, it is necessary to apply students' favorite multimedia to enhance their flow experience (Chang et al., 2017) as well as to design appropriate teaching activities based on the students' individual abilities and learning interests (Wong et al., 2020). When teachers implement different instructional designs, this may lead to different levels of the flow experience (Chang et al., 2017). For example, Colzato, Szapora, and Hommel (2012) investigated meditation based on focused-attention (FA) and meditation based on open-monitoring (OM) of creative tasks. They found that OM meditation led to the development of many new ideas. Yang, Lin, Cheng, Yang, and Ren (2019) found that participants using reminder feedback had significantly enhanced flow experiences, which in turn led to greater creativity. These studies appeared to demonstrate that specific behavioral outcomes can establish or trigger specific cognitive control states (Colzato et al., 2012). In this study, we argue that the results were affected by multiple factors: (1) Students were affected by the DT-CDIO framework or other psychological states, which interrupted the flow experience; (2) a reflection (R) model may interrupt a student's flow state and distract them; (3) students may need time to become familiar with the DT-CDIO framework, or the teaching method may not be suitable to measure the flow experience. Furthermore, in the present study, it is argued that a specific instructional design may in turn generate specific cognitive control states and improve the flow experience.

5.3. The relationship between cognitive load and the flow experience
In terms of Hypothesis H2, the results of this study are consistent with those found in previous studies, which indicated students’ intrinsic cognitive load was negatively correlated to the flow experience when using the DT-CDIO approach (Chang et al., 2017; Hong et al., 2019a,b,c; Hong et al., 2019a,b,c; Hong, Tsai, et al., 2019). The findings of this study were consistent with previous studies (Chang et al., 2017) indicating that the germane cognitive load is positively correlated with the flow experience. In other words, students who had higher flow state levels had lower intrinsic cognitive loads and higher germane cognitive loads. Typically, if there is not a sufficient burden on students' cognitive resources, this impacts the effects of cognitive load (Homer, Plass, & Blake, 2008). Extrinsic cognitive load is often interpreted as harmful to learning, where an increase or decrease in extrinsic cognitive load can determine germane cognitive load (Hung, Hsu, & Chen, 2015). Such as, several studies have used different types of video lectures (Hung, Kinshuk, & Chen, 2018) and teaching strategies (Hung et al., 2015) to reduce extraneous cognitive load. It is difficult to reduce cognitive load on students during programming processes (Stachel et al., 2013). This also indicates that students need an appropriate instructional design to help them learn to program. In particular, students who have experienced a high level of flow experience are more motivated to pursue meaningful learning (Erhel & Jamet, 2019). One of the aspects of cognitive load is related to the learning environment (Hong et al., 2019a,b,c). Students may experience reduced intrinsic cognitive load when they are in an online learning environment (Hong, Tsai, et al., 2019). This suggests that teachers need to establish appropriate learning environments and instructional activities that will help students learn to program.

6. Conclusions and implications
In this study, a DT-CDIO engineering design approach was developed that eliminated problems for students and novices to learn in the design thinking and programming fields. The DT-CDIO engineering approach is crucial to the field of programming. Students can follow the step-by-step process to learning design thinking and reflection in order to create an innovative solution and then can use the CDIO engineering design to implement the solution. In this study, the DT-CDIO approach was developed to implement in a flipped programming course to address the current gaps in the research.

First, a variety of teaching tools are used to develop novice design thinkers and 21st century abilities. Students can gradually move from design thinking to using CDIO engineering design to design programming concepts. This DT-CDIO approach may be appropriate for interdisciplinary learning and novice pedagogy. Second, we use a reflection teaching model to provide more learning benefits to students. Students can think more deeply about the implications of project creation and problem solving. More importantly, the DT-CDIO engineering design is different from the general design thinking framework. An evaluation teaching model helps teachers assess students' problems and projects. Teachers can use questions to guide students to think deeply about their projects and problems. Last, this DT-CDIO approach allows students to engage in interdisciplinary learning and obtain more learning benefits than may be otherwise possible, which may enhance their 21st century skills. However, this teaching method can be applied to other fields as well (e.g., STEAM and maker education), where students can obtain learning benefits, and novices may improve their 21st-century abilities.

Furthermore, most previous computational thinking research investigated student academic performance and psychomotor skills. There has been little research on the use of teaching methods (e.g., the POQE model (Hong, Tsai, et al., 2019)) to measure the effects of the flow experience in the area of programming. The flow experience negatively impacted creativity and problem solving ability. Meanwhile, intrinsic cognitive load negatively impacted the flow experience. Germane cognitive load positively impacted the flow experience. In particular, the flow experience is a crucial factor that can be used to predict various computational thinking skills in a programming curriculum. This study enhances the understanding of the student's flow experience during the programming process. Teachers need to design different flipped teaching methods (Wei et al., 2020) and consider the challenges inherent in the development of computational thinking skills (Zhang & Nouri, 2019) to adapt to their students' learning levels. Therefore, it is suggested that teachers apply teaching tools (e.g., programming language, programming tools) (Zhang & Nouri, 2019) and develop specific teaching activities based on students' learning backgrounds in order to maximize specific computational thinking skills. It is important to note the obvious. The content must be appropriate for the learner; otherwise, the teaching instruction may fail.

This study provides some implications for educational fields and also provides important insights into the implications of the flow experience and its effects on cognitive load. It also provides an initial understanding of the flow experience and cognitive load in programming courses.

First, a new approach was developed to expand related knowledge (e.g., design thinking, engineering design) through the use of the DT-CDIO method in flipped programming courses. Depending on different programming languages and teaching methods, students may make use of different computational thinking skills when they experience the flow state. This reflective DT-CDIO engineering design may be suitable to integrate into MOOCS or e-learning contexts. Students can learn design thinking and computational thinking through active interaction and communication. The DT-CDIO method may also help students engage in divergent and convergent thought processes that make it difficult for them to continuously concentrate during activities on programming websites. The skills of students that help them meet correspondingly difficult challenges can be improved, and teachers can also provide students with challenges that are balanced with their skill levels (Buil et al., 2019). This DT-CDIO pedagogy closes a long-standing gap in the research, where there is a lack of research on reflective pedagogy and design thinking problems.

Second, the flow experience was applied in this study to investigate the effects of the flow experience on computational thinking and the effects of cognitive load on the flow experience. Interestingly, the findings of the study indicated that the flow experience has negative effects on both creativity and problem-solving. Therefore, this implies that a student's flow experience may be impacted by the student's psychomotor state (e.g., divergent, convergent). In other words, a student's psychomotor state or flow experience may predict specific computational thinking abilities. It is important to note that the students were influenced by the DT-CDIO teaching framework used in this study. That is to say, the DT-CDIO framework helped them gain the ability to think in both divergent and convergent ways. In other words, the framework provides students without the flow experience an opportunity to enter into a psychological state where they may be able to create websites with a relaxed and easy-going attitude.

Third, there is a lack of available models that can be used to explore the relationship between cognitive load and flow experiences for students taking programming courses. Teachers need to pay attention to the cognitive load of students during programming instruction. It is important to reduce the cognitive load on students during the programming process. In addition, a user-friendly approach promotes the flow experience (Pilke, 2004), such as the use of a well-designed interface or an easy to follow instructional design. In this work, the relationship between the flow experience and cognitive load was investigated. Few studies have examined cognitive load and the flow experience as they relate to flipped programming courses.

7. Limitations and future work
This study suffers from many research limitations, as is the case with any empirical study. These limitations and challenges can be used as a pathway for further research.

First, the learning benefits of the DT-CDIO teaching method were not investigated. This restricted the contributions of this study to some degree. However, the findings of this study were interesting. The framework needs to be further evaluated and measured in terms of the learning benefits to students. A unique pedagogical DT-CDIO approach was used, where the psychomotor status was different at each stage. In the future, it might be interesting to apply the PLS questionnaire at each stage along with other measurements. Future research could apply three groups DT-CDIO, reflective flipped teaching, reflective traditional teaching to evaluate each student's learning stage of the flow experience, and other factors. Also, system developers can apply the DT-CDIO framework to develop related learning and support systems in the future.

Second, the DT-CDIO framework is appropriate for college students who are learning web programming for the first time. Currently, it is not yet known whether the framework is suitable for K-12 education in Taiwan, where programming is included in the curriculum. This educational transformation has created technological pressures and challenges for K-12 teachers (Califf & Brooks, 2020). In recent years, K-12 education in Taiwan has emphasized the importance of literacy education. In other words, teachers should know about literacy and how to integrate it into the subject they are teaching. In particular, Califf and Brooks (2020) implemented a literacy facilitation approach that can reduce the negative effects of technological pressure and burnout on teachers. Overall, it is necessary to further modify the framework to make it suitable for all students to learn design thinking and programming. Future researchers should revise the DT-CDIO method for use in online or flipped instruction, which seems to lead to better learning outcomes. Furthermore, future researchers could consider revising the DT-CDIO framework to attract science, technology, engineering, arts, and mathematics (STEAM) talent.

Lastly, this study was conducted with university students in Taiwan, where some demographic factors (e.g., learner characteristics, learning culture) may have impacted the findings. In addition, it is important to note that different learners may obtain different results, which suggests that the results could be affected by different factors. Flow experiences are critical to educational curricula, and other factors need to be added to gain a complete understanding of the learning process. In order to better understand the factors that affect the impact the flow experience as it relates to computational thinking skills in programming courses, it would be useful to conduct research around this change process. In the future, researchers should continue to explore and increase the number of significant factors (e.g., learner characteristics, learning environment, cognitive style, meaningful learning, gamification) in flow experience studies.

Acknowledgement
This study was supported by the Ministry of Science and Technology, Taiwan [Grant number: MOST110-2511-H-006-011-MY3; MOST108-2511-H-415-003-MY3].

Appendix A. Questionnaire
All our questionnaire items were measured using a 5-point Likert-type scale. We present all the questionnaire items in our questionnaires, and those that were deleted are marked with a symbol (*).

Computational thinking questionnaire revised from (Korkmaz et al., 2017)
Creativity
CRE1 I like people who are sure of most of their decisions.

CRE2 I like people who are realistic and neutral.

CRE3 I believe that I can solve most of the problems I face if I have a sufficient amount of time and if I exert effort.

*CRE4 I have a belief that I can solve the problems that may occur when I encounter a new situation.

*CRE5 I trust that I can apply the plan while using it to solve a personal problem.

*CRE6 Dreaming causes my most important projects to come to light.

*CRE7 I trust my intuitions and feelings of “trueness” and “wrongness” when I approach a solution to a problem.

*CRE8 When I encounter with a problem, I stop before proceeding to another subject and think over that problem.

Algorithmic thinking
ALG1 I can immediately establish the equity solutionthat will give a solution to a problem.

*ALG2 I feel that I have a special interest in mathematical processes.

*ALG3 I think that I understand instructions better that are made with the help of mathematical symbols and concepts.

*ALG4 I believe that I can easily understand relationships between figures.

ALG5 I can mathematically express the solutions to the problems I face in daily life.

ALG6 I can digitize a mathematical problem that has been expressed verbally.

Cooperativeness
COPT1 I like experiencing cooperative learning together with my group friends.

COPT2 In the cooperative learning process, I think that I attain/will attain more successful results because I am working in a group.

*COPT3 I like solving problems related to a group project with my friends in a cooperative learning context.

*COPT4 More ideas develop during cooperative learning.

Critical thinking
CRI1 I am good at preparing regular plans regarding solutions to complex problems.

*CRI2 It is fun to try to solve complex problems.

*CRI3 I am willing to learn challenging things.

CRI4 I am proud of being able to think with great precision.

*CRI5 I make use of a systematic method when comparing the options on hand and when reaching a decision.

Problem solving
PRO1 I have problems demonstrating the solution to a problem in my mind.

PRO2 I have problems with the issue of where and how I should use the variables such as X and Y in the solution to a problem.

PRO3 I cannot apply the solution ways I plan respectively and gradually to my solution.

PRO4 I cannot produce a lot of options when thinking of the possible solution ways to solve a problem.

PRO5 I cannot develop my own ideas a cooperative learning environment.

*PRO6 It tires me to try to learn something together with my group friends during the cooperative learning process.

Flow questionnaire revised from (Chen, 2006)
Immediate feedback
IME1 I obtained direct clues (feedback) as to how well I was doing from programming feedback.

IME2 I knew how well I learned the program.

Clear goals
When I write a program
CLE1 I understand clearly what I am supposed to do.

CLE2 I know where I am and where to go and what to do next.

Merger of action and awareness
When I write a program
*MER1 I wish I could be doing something else.

MER2 My mind and body seem to be working in perfect unison.

Concentration
CON1 I am intensely absorbed when writing a program.

*CON2 I am concentrating fully on the programming process.

Sense of control
When I write a program
*SEN1 I feel frustrated.

SEN2 I always feel in control.

Loss of self-consciousness
When I write a program
LOSC1 I am living up to my expectations.

LOSC2 I am self-conscious.

Time distortion
When I write a program
TIM1 I am so focused that I completely lose track of time.

TIM2 Time goes faster than I expect, and I am not aware of it.

Telepresence
TEL1 I felt that before I was given the questionnaire, I was more in the ‘computer world’ than the ‘real world’ around me.

TEL2 Before I was given the questionnaire, I forgot about my immediate surroundings.

TEL3 Before I was given the questionnaire, I felt that using the Web made me forget where I was.

Positive affects
When I write a program
POS1 I have fun.

POS2 I am excited.

POS3 I am enjoying myself.

POS4 I am active.

POS5 I feel sociable.

POS6 I feel relaxed.

Cognitive load questionnaire revised from (Leppink et al., 2013; Leppink et al., 2014)
Intrinsic cognitive load
INT1 The content of this course was very complex.

INT2 The problem/s covered in this course was/were very complex.

INT3 In this course, very complex terms were mentioned.

*INT4 I invested a very high level of mental effort on this course because of its complexity.

Extraneous cognitive load
EXT1 The explanations and instructions in this course were very unclear.

EXT2 The explanations and instructions in this course were full of unclear language.

EXT3 The explanations and instructions in this course were, in terms of learning, very ineffective.

*EXT4 I invested a very high level of mental effort on unclear and ineffective explanations and instructions given in this course.

Germane cognitive load
GER1 This activity really enhanced my understanding of the content that was covered.

GER2 This activity really enhanced my understanding of the problem/s that was/were covered.

GER3 This course really enhanced my knowledge of the terms that were mentioned.

GER4 This course really enhanced my knowledge and understanding of how to deal with the problem/s covered.

GER5 I invested a very high level of mental effort during this course in terms of enhancing my knowledge and understanding.

