Mobile cloud computing (MCC) is a trending technology employed in several domains to overcome the limitations of mobile devices by using cloud capabilities. Communication between mobile devices and clouds is maintained via wireless media to make use of cloud services. Hence, MCC models show vital security issues related to many disciplines, especially authentication, privacy, and trust. Current MCC models lack the ability to secure and protect data, resources, communication channels, and authentication (client-to-cloud and cloud-to-client). MCC security issues have appeared mainly as a result of the integration between mobile devices and cloud computing. MCC issues represent critical challenges that must be addressed by model developers and practitioners. Enormous models have been proposed to enhance mobile cloud computing security issues, which makes it essential to systematically review and analyze them. In this paper, 73 relevant papers are systemically reviewed, among which 34 different models are analyzed against the known security issues that were either inherited from mobile and cloud computing technologies or emerged as a result of this integration. This study showed that (i) cloud-to-client authentication issues are disregarded by existing MCC models, (ii) existing MCC models tend to address some but not all security issues, and (iii) related MCC model surveys do not sufficiently address comprehensive MCC security issues (in each survey) such as securing and protecting data, resources, and communication channels. This paper provides an important resource regarding MCC security issues for model developers and practitioners for future research and designs.

Previous
Next 
Keywords
Mobile cloud computing

Mobile computing

Cloud computing

Security

Offloading

1. Introduction
Due to the massive number of cloud-based mobile applications used in many domains of our life such as education, banking, and healthcare, the security of data and communications has become a high-priority issue (Stergiou and Psannis, 2020; Al-Ahmad and Kahtan, 2018a). Among the technology models that enable mobile devices to use cloud services is mobile cloud computing (MCC) (De et al., 2020; Al-Ahmad and Kahtan, 2018b; Al-Ahmad et al., 2013). MCC is trending in the technology domain for both industry and research, as both attempt to introduce and implement better models that improve efficiency while maintaining a high level of security (Al-Ahmad et al., 2019a). MCC is a trending technology used in several domains to overcome the limitations of mobile devices by using cloud capabilities. Communication between mobile devices and clouds is maintained via wireless media to make use of cloud services. Hence, MCC models bring along vital security issues related to many disciplines, especially authentication, privacy, and trust. Current MCC models lack the ability to secure and protect data, resources, communication channels, and authentication (Wu et al., 2020).

MCC is described as a computing model compose of mobile and cloud computing services via the Internet (Qi and Gani, 2012). The integration and convergence of these two technologies into a single seamless model is represented by MCC. While this integration has many benefits, the security of MCC models has also been compounded. To perform their tasks such as limitless storage and accelerated cloud computing processing power, MCC applications run on portable devices and leverage the power and availability of cloud services (Verma et al., 2020). MCC applications use cloud services by offloading mobile application tasks to the cloud. Offloading is processed based on a set of criteria and conditions and about the respective mobile device states to process the tasks and to indicate the cloud status (Derhab et al., 2020; Huerta-Canepa and Lee, 2010).

MCC applications inherit the issues and characteristics of both cloud and mobile computing (Costea, 2012; Fernando et al., 2013). Furthermore, MCC has more issues that are related to large data, mobile device cameras and sensors, heterogeneity, critical usage, and offloading (Chun et al., 2010; Kang et al., 2012; Turner, 2015). Applications built using the MCC models are unique and complex; therefore, securing MCC applications is challenging, as it must consider the various execution paths and locations of each process that represents different offloading implementations (Al-Ahmad et al., 2019a; Ya'u, 2020). Securing both mobile devices and clouds against mobile and cloud security threats while providing efficient use of mobile networks and allowing all event types is an essential mission for MCC model developers and practitioners (Al-Ahmad and Kahtan, 2018b; Al-Ahmad et al., 2019a; Al-Ahmad et al., 2019b; AL-AHMAD and KAHTAN, 2018). There are many proposals to overcome MCC security issues, but these solutions normally come with consequences. For example, one approach may require the sacrifice of usability by preventing certain events, ease of use by adding extra verification and validation steps, or performance when building a defense mechanism that increases computing resource usage or when adding an encryption layer to data usage that may lead to heavier communication overhead and more extensive power processes (Stergiou and Psannis, 2020; Derhab et al., 2020; Xie et al., 2017).

Accordingly, evaluating MCC models against security issues is a critical task that needs to be performed continuously and frequently. Therefore, a systematic review (SR) on MCC security issues is highly needed. To the best of the authors’ knowledge, there is no SR that sufficiently addresses comprehensive MCC security issues (in each SR), such as securing and protecting data, resources, and communication channels. Moreover, the client-to-cloud authentication issue is disregarded by existing surveys.

In this paper, security is referred to as a part of general protection for computer systems and networks except when explicitly referring to specific issues that have a tremendous amount of effect on MCC models. Then, a specific term is examined such as securing and protecting data, resources, and communications channels. Moreover, authentication is referred to as client-to-cloud, cloud-to-client, and multifactor to focus on the issues of authentication, as it represents one of the main concerns in MCC security.

This paper fills the gap of current MCC studies via a systematic analysis of the MCC security issues in the literature by fulfilling certain objectives: (i) reviewing common MCC security issues, (ii) reviewing MCC models, (iii) analyzing the MCC models against the security issues found, and (iv) discussing future implications for the security issues of MCC models. This paper has several contributions, which are summarized in Fig. 1. First, this paper presents a systematic review of MCC models against security issues. Second, this work critically reviews the most recent models that were not covered in previous review studies. Third, each MCC model was analyzed with regard to three areas: strengths, common issues, and security issues. Fourth, this paper revealed certain common MCC challenges. A set of those common issues involves critical security issues classified into four categories: securing and protecting data, resources, communications channels, and authentication (client-to-cloud and cloud-to-client). Finally, the identified lack of an MCC model related to security issues represents immense challenges for researchers when proposing MCC models.

Fig. 1


Fig. 1. Contributions of this paper.

The rest of this paper is organized as follows. Section 2 presents related works. Then, the research methodology, as well as some statistics about the reviewed papers, are discussed in Section 3. Section 4 answers the research questions and systematically reviews the MCC models pertaining to three areas: strengths, common issues, and security issues. Section 5 concludes the paper and discusses future work.

2. MCC security issues: related systematic review (SR)
In recent years, MCC has become an important field of research that has resulted in several surveys in the MCC domain. However, few studies have discussed MCC security issues. Moreover, security concerns in the MCC setting have not been addressed significantly, and several issues of MCC security still need more research. This section discusses the most related surveys pertaining to MCC security issues.

The principles and taxonomy of the MCC were reviewed and presented by Fernando et al. (Fernando et al., 2013). The authors provided a comprehensive survey of MCC research during the early days of MCC by emphasizing specific concerns in mobile cloud computing such as operational issues, end-user issues, service and application issues, and privacy, security, and trust. This survey paper is an important reference for researchers, as it systematically reviewed open issues and gaps in the domain of MCC.

A survey was conducted by Bhatia and Verma (2017) to examine several related to the deployment of mobile applications in the cloud. To ensure the reliability of the MCC platform, the authors suggested designing a secure-based data access scheme using two methods: biometric remote authentication and cryptography. Noor et al. (Noor et al., 2018), through a quantitative review and benchmark comparison, addressed the challenges of MCC deployment and adoption. They identified several challenges: privacy, trust, data management and synchronization, energy efficiency, and heterogeneity.

Zhou and Buyya (2018) surveyed the techniques and frameworks for MCC augmentation and presented a detailed taxonomy of MCC. The authors highlighted the security issues of data privacy and data interoperability. An analysis of the MCC challenges in terms of data-at-rest and data-in-transit security and privacy was carried out by Khan et al. (Khan et al., 2017). The authors, however, concentrated on evaluating current methods of port-knocking authentication. The authors concluded that port knocking offers a lightweight solution to the security problems in MCC for the application layer.

Au et al. (Au et al., 2018) reviewed the challenges of the MCC in terms of security and privacy risks from the perspective of applied cryptography. Seven challenges were identified for MCC: mobile client authentication, data integrity checks, secure data sharing, mobile cloud data search, malicious behaviour traceability, and outsourced data computation. Moreover, Mollah, et al. (Mollah et al., 2017) analyzed and compared the relevant security and privacy requirements and proposed a solution to the security risks of MCC.

Although useful, the abovementioned surveys did not sufficiently address comprehensive MCC security issues (in each survey) such as secure and protective data, resources, and communication channels. Moreover, the abovementioned surveys disregarded the vital MCC security issue of client-to-cloud authentication. Thus, this study aims to take the lead by performing a systematic review (SR) of the precise research on security issues of MCC models, including securing and protecting data, resources, communication channels, and authentication (client-to-cloud and cloud-to-client). SR is performed by critically reviewing current models developed in mobile computing, cloud computing, and MCC models. Then, this paper systematically reviews the MCC models against the security issue found and discusses the literature.

3. Research methodology
Given the enormous numbers and regularly revised work publications of information systems (ISs), it is impossible for IS experts, particularly security advisors and specialists, to check suitable papers for evidence-based practice (Bastian et al., 2010). IS experts, in particular security advisors and specialists, should not focus only on the findings of one study to make decisions. Other studies may have some prejudices, and the findings may be unsatisfactory (Abbas et al., 2008; Kahtan et al., 2014a). To adopt evidence-based practical and theoretical perspectives, IS experts, in particular security advisors and specialists, rely on solid empirical evidence that reports practice. SR is one of the most suitable methods to encourage evidence-based security practices (Evans, 2003; Alzoubi et al., 2016; Kahtan et al., 2012, 2014b).

Adhering to the rules and guidelines of SR is important for researchers (Kitchenham and Charters, 2007). The SR presented in this paper adopted the strategies and rules portrayed by Kitchenham and Charters (2007), (Al-Ahmad et al., 2019a) and Ali et al. (Ali et al., 2020a), (Ali and Osmanaj, 2020; Ali et al., 2020b; Kahtan et al., 2014c; Alzoubi et al., ). The review process consists of three stages: planning, execution, and reporting.

3.1. Planning stage
The identification of the requirement of SR is the first step in the planning stage. As discussed in the previous section, there is no particular SR that summarizes all studies that have been discovered and provides a deeper understanding of the study and practice recommendations for this research domain. The second stage of the planning stage represents the design of the SR protocol. This SR protocol provides a framework for understanding the unique security issues pertaining to the MCC. A review protocol was developed to demonstrate the classification process for this study. Ngai and Wat (2002) proposed a classification framework that aims at guiding SR within relevant journal papers that handle spontaneous customers focusing on topics related to the IS field. In addition, this SR adopted a comparative classification framework for studying the social science literature proposed by van Oranje-Nassau et al. (van Oranje-Nassau et al., 2009). In this SR, the categorization framework has three directions linked to the MCC. These directions include the chosen model strengths, weaknesses, and security issues.

The definition of the research questions forms the third step in the planning stage. The definition of research questions is a critical step in SR. By responding to research questions, literature reviews achieve their goals. The research study questions for this SR are expressed below:

•
What are the most common strengths and weaknesses in MCC models pertaining to security issues?

•
What are the available models that addressed MCC security issues?

•
What are the implications of previous MCC studies pertaining to security issues that guide forthcoming investigations?

The fourth step in the planning stage is the definition of the strategies for paper selection. In this step, an integrated search strategy covers comprehensive automated searches in various online databases and a manual analysis of the selected papers. The extensive automated search approach involves the selection of the most relevant online sources (Golder et al., 2014; Hu and Bai, 2014). The online databases selected for the exhibited literature review are Elsevier ScienceDirect, IEEE Xplore, Scopus, Google Scholar, and ACM Digital Library. In addition, major filtering tools were used for each database to limit study outcomes (McLean and Antony, 2014). The large manual review strategy initially involved reading the abstract and the title of the papers (Golder et al., 2014; Pucher et al., 2013). Then, the full papers were chosen to sort out irrelevant papers (Hu and Bai, 2014).

In addition to the comprehensive automatic search and manual analysis, the backward snowball approach was used, with the specific purpose of finding papers that could not be identified from the first strategy. Backward snowballing requires the use of the reference rundown to recognize new papers to be added (Wohlin, 2014). The initial step is to review the reference list and exclude papers that do not meet essential requirements such as the year of publication, the language, and the publication's type. The next step is to exclude papers from the rundown that have only been reviewed in light of being found prior to the previous concentration. Once these are excluded, the majority of the papers have a solid probability of incorporation. These steps in backward snowballing guarantee that a significant amount of information can reasonably be expected to be extracted from the papers being inspected before moving on to a new paper if no additional data are accessible in the paper being analyzed (Wohlin, 2014; Webster and Watson, 2002). The mix of the two strategies raises the possibility that several papers in any research field will be covered in the SR.

3.2. Execution stage
In the execution stage, filtering techniques were applied to help analyze the overall publication results and select related papers. This analysis research adopted the six strategies as follows:

•
The development of search keywords is a continuous technique starting with initial investigations using distinctive search keywords, taking into account an underlying search of papers that are already considered to have a place in the SR field of study (Golder et al., 2014; Hu and Bai, 2014). If the underlying arrangement of clearly known papers is found after the underlying pursuit, then the technique of determining search terms stops. All previously mentioned online databases offer the chance to play out a search utilizing advanced search in combination with relevance. In the current review, the search utilized the following keywords: security, issues, and mobile cloud computing.

•
To restrict the search results, filters were implemented by using all available resources for each database. Since numerous papers were generated by the underlying search of any database as a result of the use of unique catchphrases, the search restricted the number of papers by using filters such as the research field (Information Systems), selected year of publication (2009–2020), and type of documents (journal and conference papers).

•
Every searched paper was manually checked to ensure that the title and abstract of the papers were relevant, taking into account the ultimate objective of expelling nonessential papers from indexed lists (Golder et al., 2014; Pucher et al., 2013).

•
Full papers were analyzed to discern relevant knowledge on the subject of interest (Pucher et al., 2013; Shea et al., 2007).

•
The backward snowball method was used to support the large automated quest to discover unidentified papers from the main strategy (Hu and Bai, 2014; Spanos and Angelis, 2016).

The requirements for quality assessment were constructed to verify that all incorporated papers achieved value in the SR (Hu and Bai, 2014; Spanos and Angelis, 2016). To determine whether a paper was to be incorporated into this study, a high-quality checklist was designed. The checklist included test questions adopted from Petticrew and Roberts (2008), (Spanos and Angelis, 2016), and (Ali et al., 2020a). Criteria were included in the checklist with regard to the adequate discussion of the study goal, explicit statement of the study question or challenge, data availability and definition, and a definition of the adopted methodology. Papers that addressed all of these criteria were incorporated into the last review. This review included studies up to December 2019 by following the protocol as discussed in the planning stage. Detailed elements of the literature indexed lists are featured in Table 1.


Table 1. Review search results.

Database	1st Strategy	2nd Strategy	3rd Strategy	4th Strategy	5th Strategy	6th Strategy
Keywords Results	Apply Filter	Reading Title and Abstract	Reading Full Papers	Backward Snowball	Quality Assessment
Science Direct	104	77	32	10	12	11
IEEE	372	143	76	23	23	22
Scopus	1 91	96	47	12	14	13
ACM Digital	183	103	33	15	19	18
Google Scholar	134	79	15	8	10	9
Total	984	498	203	68	78	73
3.3. Summarizing stage
The initial keyword search identified 984 papers. To distinguish irrelevant or duplicated papers, a manual analysis was performed by reading the titles and abstracts of the candidate papers. As a result, 295 papers were eliminated, and 203 papers remained. Next, 135 irrelevant papers were discarded after reading the full papers, resulting in 68 papers remaining. Subsequently, the backward snowball method was performed, and 10 more papers were added from the reading of the sources. Thus, after using the entire study selection procedure, the final number of papers left was 73. The four quality management requirements listed previously deal with these 73 papers.

3.4. Some common attributes of the selected papers
This section presents details related to some common attributes of the selected papers in this review. These common attributes include publication trends, database sources, paper types, and ranking of selected papers.

3.4.1. Distribution of papers by publication year
In Fig. 2, the general number of selected papers is outlined. The highest number of papers was published in 2017, with 14 papers, followed by 10 papers published in 2015. The lowest number of published papers was in 2008, with only one paper. Additionally, no publication related to MCC was published in 2009. The majority of the papers were published between 2015 and 2020 (see Fig. 2).

Fig. 2

Fig. 2. Publications by year.

3.4.2. Distribution of papers by database sources
Fig. 3 indicates the exploitation of the selected papers by database sources. Twenty-nine papers emerged from the IEEE database, 21 papers from the ACM Digital database, 13 papers from Scopus, 8 papers from the Science Direct database, and 5 papers from the Google Scholar database (see Fig. 3).

Fig. 3

Fig. 3. Distribution of papers by database sources.

3.4.3. Distribution of papers by paper type
3.5. Research results and classification
The findings and analysis of the MCC models were examined according to three criteria: security issues, strengths, and common issues. Based on the categorization directions, the selected papers for this review analysis are delineated in Table 2.


Table 2. Selected MCC models.

Models	Delegation Method	Name and Objective	Details	Security Issues	Strengths	Common issues
1	Huang et al. (2010)	Layering	MobiCloud
Security (via layering)	MobiCloud model suggests creating 3 layers for MCC. Each layer has multiple components as service provider and service broker.	
1.
Data security.

2.
Authentication

1.
Provide computation as service.

2.
Trust Management.

3.
Data security.

1.
Interoperability

2.
Scalability

3.
Disregarded dynamic offloading

2	Chow et al. (2010)	Authentication	TrustCube
Authentication (client on-cloud)	TrustCube model for authenticating mobile client on the cloud.	
1.
Cloud to client authentication.

1.
Enhance authentication.

1.
Efficiency

2.
Disregarded dynamic offloading

3	Hung et al. (2011)	Mirroring	Mirror mobile device	Create client mobile mirror at the cloud servers that reflects the same client mobile specifications	
1.
Communication security.

1.
Provide computation as service.

2.
Trust Management.

3.
Multi-tenant secure data management.

1.
Damage recovery issues

2.
High communication overhead

3.
Disregarded dynamic offloading

4	Oberheide et al. (2008)	Using third party	Virtualized In-Cloud Security Services for Mobile Devices	Proposed a model to delegate the entire virus scan process for files in the mobile to the cloud storage.	
1.
Communication security

1.
System security.

2.
Enhance mobile device resource consumption.

1.
High communication overhead

2.
Operation interruption.

5	Kim et al. (2012)	Abnormal usage	Abnormal usage detection	Propose a model for detecting abnormal usage.	
1.
Focus on specific instances of the whole security threats set.

1.
Detect abnormal usage

1.
High communication overhead

2.
Operation interruptions

3.
Disregarded dynamic offloading

6	Chen and Wang (2011)	Layering	Security (Data)	Framework to secure the data by splitting it into two storages, each split is understandable only if integrated with the other resource.	
1.
Privacy

2.
Communication security.

1.
Data security.

1.
High communication overhead.

2.
Disregarded dynamic offloading

7	Khan et al. (2013a)	Authentication	User identity protection in mobile-cloud computing	Generates automatic dynamic credential identification for mobile using the cloud capabilities.	
1.
Privacy.

1.
Enhance authentication.

1.
Scalability.

2.
Disregarded dynamic offloading

8	Khan et al. (2014)	Encryption	Proposed an incremental version of proxy re-encryption scheme.	The proposed scheme uses incremental proxy re-encryption of file blocks using the mobile and cloud for both upload and download.	
1.
Cloud to client authentication

1.
Data security.

1.
High computation complexities.

2.
Disregarded dynamic offloading

9	Othman et al. (2015)	Context aware	Proposed context-aware MCC application model named as MobiByte.	Use predefined configurations for offloading parameters in order to use it in offloading decisions.	
1.
Security was disregarded.

1.
Enhance mobile device resource consumption.

1.
High communication overhead.

2.
Disregarded dynamic offloading

10	Othman et al. (2014)	Authentication	Pirax: which is a model that provide piracy control form mobile and cloud.	It uses the mobile IMEI in the licensing of mobile devices.	
1.
Cloud to client authentication.

2.
Data security

1.
Data security.

1.
Disregarded dynamic offloading

11	Khan et al. (2015)	Encryption	Proposed Cloud-Manager-based Reencryption Scheme (CMReS)	This schema uses manager-based re-encryption and cloudbased re-encryption.	
1.
Focus on specific instances of the whole security threats set.

1.
Data security.

1.
Scalability

2.
Disregarded dynamic offloading

12	de los Reyes et al. (2012)	Mirroring	Performance and security	Moving all applications used by the enterprise to the cloud, and install previous security LAN techniques to be in the middle between cloud and all endpoints “mobile, fixed” devices.	
1.
Authentication.

1.
System security.

2.
Provide computation as service.

1.
High communication overhead.

2.
Damage recovery issues

3.
Disregarded dynamic offloading

13	Zhou and Huang (2012)	Encryption	Encryption is used to provide security	Encryption model for MCC, by delegating the complex encryption to the cloud and keep simple encryption on the client.	
1.
Communication security.

1.
System security.

1.
High computation complexities.

2.
Disregarded dynamic offloading

14	Sumter (2010)	Layering	Logging	Agent between cloud and client to record each request and response.	
1.
Security was disregarded.

1.
System security.

1.
Interoperability

2.
Disregarded dynamic offloading

15	Jia et al. (2011)	Encryption	Encryption	Multiple levels of decryption, using public key and owner key.	
1.
Data security.

1.
System security.

1.
High computation complexities.

2.
Disregarded dynamic offloading

16	Xiu-feng et al. (2011)	Layering	Designs a general secure mobile cloud computing model.	Proposed model to provide security as a service for the cloud.	
1.
Privacy.

2.
Encryption key issues.

1.
System security.

1.
High computation complexities.

2.
Interoperability.

3.
Disregarded dynamic offloading

17	Mavromoustakis et al. (2015)	Dynamic offloading	Energy Saving	Improve consumption of energy in mobile devices by exploitation of a social-oriented model and partial process offloading to the cloud.	
1.
Data security

1.
Enhance mobile device resource consumption.

1.
High computation complexities.

18	Gai et al. (2016)	Dynamic offloading	Energy Saving	Improve consumption of energy in MCC wireless communications by leveraging dynamic cloudlets.	
1.
Data security

1.
Enhance mobile device resource consumption.

1.
High computation complexities.

19	Elwakil et al. (2015)	Context aware	GIS facilities	Mobile GIS cloud computing model that increases the efficiency of processing by decreasing the transmission time for data this is based on decreasing the size of transmitted data.	
1.
Communication security.

1.
Enhance mobile device resource consumption.

1.
High computation complexities.

2.
Disregarded dynamic offloading

20	Wu et al. (2017)	Authentication	Authentication	Provide a secure and cost-effective fuzzy access control protocol in mobile cloud computing during user authentication stage.	
1.
One point of failure.

1.
Enhance authentication.

1.
High computation complexities.

2.
Disregarded dynamic offloading

21	Kaur and Sohal (2017)	Dynamic offloading	Performance	Evaluate the cost of the process in the form of the execution time to be used in offloading decision.	
1.
Security was disregarded.

1.
Enhance mobile device resource consumption.

1.
Dynamic offloading disregarded the device and cloud status.

22	Baharon et al. (2015)	Encryption	Lightweight Homomorphic Encryption (LHE) encryption scheme	This schema used integer for encryption, which makes is more efficient. The key generation method also has been simplified in order to reduce the processing overhead.	
1.
Encryption key issues.

1.
System security.

1.
Dynamic offloading disregarded the device and cloud status.

23	Banerjee et al. (2017)	Encryption	Encryption	This paper has proposed CLOAK protocol which is based on stream cipher using an external server for the generation and distribution of cryptographically secure pseudo-random number (CSPRN) and mobile device to do the XORing on the mobile device.	
1.
Cloud to client authentication.

1.
Enhance authentication.

1.
Disregarded dynamic offloading

24	Alsulami and Monowar (2015)	Encryption and layering	Multiple cloud provider along with encryption.	This work has proposed a framework that use two cloud providers along with the mobile device. The first cloud provider is used for encryptions, decryption, and integrity verification. The second cloud provider is used tostore the encrypted files as cloud data storage provider. This framework requires the user to register on the cloud provider and the cloud provider use the registration information for authentication	
1.
Focus on specific instances of the whole security threats set.

1.
Integrity.

1.
High communication overhead.

2.
Disregarded dynamic offloading

25	Lin et al. (2017)	Encryption and layering	Multiple cloud provider along with encryption.	Proposed a comprehensive mobile provable data possession schemes.	
1.
Focus on specific instances of the whole security threats set.

1.
Integrity.

1.
High communication overhead.

2.
Disregarded dynamic offloading

26	Abdellaoui et al. (2016)	Layering	Propose a model to secure MCC using multi-agents system	This model implements a multi-agents system in MCC. This multi-agent system is added as a third party that create several important agents i.e. agent to authentication agent for mobile device in the platform and agent to manage privacy. The multi-agent system also divides tasks and distribute them for every agent according to the platform securely.	
1.
Cloud to client authentication.

1.
Enhance authentication.

2.
Enhance mobile device resource consumption.

1.
Disregarded dynamic offloading

27	Yadav (2018)	Layering	Proposed a lightweight security framework for mobile cloud computing using encryption techniques.	This framework used both Securely Outsourced Ciphertext Attribute Based Encryption (SO-CP-ABE) scheme and Provable Data Possession (PDP) scheme. SO-CP-ABE scheme. The PDP scheme used to verify the integrity of cloud stored files while the SO-CP-ABE secure the communication	
1.
Communication security.

1.
Enhance mobile device resource consumption.

2.
Integrity.

3.
Enhance data security.

1.
High computation complexities.

2.
Disregarded dynamic offloading

28	Bhatia et al. (2019)	Encryption	Proposed a pairing-free incremental proxy re-encryption scheme for MCC.	This scheme uses certificate less incremental proxy re-encryption method to reduce the. Certificate management overhead.	
1.
Privacy

1.
System security.

1.
Interoperability.

2.
Disregarded dynamic offloading

29	Othman et al. (2017)	Use third party	Proposed a secured federated data management.	This work proposes using third party trusted service provider that do encryption, decryption, encoding, decoding and authentication.	
1.
Communication security.

2.
Cloud to client authentication.

1.
System security.

1.
High communication overhead.

2.
Disregarded dynamic offloading

30	Tsai and Lo (2015)	Encryption	Proposed an authentication scheme for MCC services.	This scheme uses bilinear pairing cryptosystem and dynamic nonce generation to allow mobile users to use multiple cloud services using a single private key.	
1.
Focus on specific instances of the whole security threats set.

2.
Cloud to client authentication.

1.
Enhance Authentication

2.
Provide mutual authentication.

1.
High computation complexities.

2.
High communication overhead.

3.
Disregarded dynamic offloading

31	Irshad et al. (2019)	Encryption	Proposed an enhanced authentication scheme for MCC services using the scheme proposed by (Tsai and Lo, 2015).	This scheme uses bilinear pairing thorough two phase's authentication. The first phase is registration, and the second phase is authentication. The main contribution of this scheme is allowing the mobile to authenticate the cloud and allow the cloud to authenticate the mobile.	
1.
Communication security.

1.
Enhance Authentication.

2.
Provide mutual authentication.

1.
Disregarded dynamic offloading

32	Audithan et al. (2017)	Encryption	Proposed an authentication scheme for MCC services.	This scheme uses bilinear pairing cryptosystem and dynamic nonce generation to allow mobile users to use multiple cloud services using a single private key.	
1.
Communication security.

1.
Data security.

1.
Disregarded dynamic offloading

33	Donald et al. (2018)	Layering	Proposed a clustered authentication model for MCC.	Proposed a clustered model for MCC authentication. Authentication cluster head server manage and balance the load.	
1.
Cloud to client authentication.

1.
Enhance authentication.

1.
Disregarded dynamic offloading

34	Roy et al. (2017)	Encryption	Proposed an authentication scheme for MCC services.	This scheme uses cryptographic hash, bitwise XOR and fuzzy extractor functions.	
1.
Multi-factor authentication.

2.
Cloud to client authentication

1.
Enhance authentication.

2.
Provide mutual authentication.

1.
High computation complexities.

2.
High communication overhead.

As shown in Table 2, the models were summarized based on the methods used to delegate the processes from mobile to cloud. The delegation methods for the models were layering, authentication, mirroring, encryption, use of a third party, abnormal usage detection through context awareness, and dynamic offloading. Some of the MCC models considered security and provided mechanisms and methods to protect data, resources, and communications, while some other models disregarded security in their design and depended on the security mechanisms used in devices and the cloud.

3.5.1. Layering
Layering may help reduce security issues by adding one layer that is used to address security vulnerabilities. Among the surveyed models that used layering was the MobiCloud model proposed by Huang et al. (Huang et al., 2010). MobiCloud suggests creating 3 layers for MCC, and each layer has multiple components as a service provider and service broker that can be leveraged as security services. Similarly, Chen and Wang (2011) proposed a model to secure the data by splitting it into two storage areas, and each split is understandable only if integrated with the other resource. Moreover, Sumter (2010) proposed a model that uses layering by using agents. The Sumter model is located between the cloud and client to record each request and response and provide a log for the cloud.

Furthermore, Xiu-feng et al. (Xiu-feng et al., 2011) used layering in their model. The Xiu-feng model is a secured MCC model that provides security as a service for the cloud using multi-hierarchy, multilevel, elasticity, cross-platform, and unified user interface. Layering was also used by Abdellaoui et al. (Abdellaoui et al., 2016), who proposed a model that uses a multiagent system in MCC. This multiagent system creates several important agents (i.e., agents as authentication agents for mobile devices on platforms and agents to manage privacy). The multiagent system also divides tasks and distributes them securely for every agent according to the platform.

3.5.2. Authentication
Among the security methods used by the MCC models are authentication, which is used to authenticate users and devices. Chow et al. (Chow et al., 2010) proposed the TrustCube model, which is an MCC authentication model used to authenticate clients in the cloud. TrustCube uses implicit authentication in addition to regular authentication, which improves the authentication process. The Khan et al. (Khan et al., 2013a) model generates automatic dynamic credential identification using cloud capabilities for mobile device authentication. Similarly, the Pirax model that was proposed by Othman et al. (Othman et al., 2014) uses mobile IMEI in the authentication of mobile devices. In addition, Wu, et al. (Wu et al., 2017) provided a secure and cost-effective fuzzy access control protocol in mobile cloud computing during the user authentication stage.

3.5.3. Mirroring
Proving the same security mechanisms in mobile devices at the cloud layer can be accomplished by mirroring the mobile device in the cloud along with all protection software and techniques or by mirroring the internal network in the cloud along with the security precautions used. Hung et al. (Hung et al., 2011) mirrored mobile devices by creating a client mobile mirror in the cloud servers. This client reflects the same client mobile specifications that provide computation services that address security (i.e., trust management secures routing and risk management). Meanwhile, de los Reyes et al. (de los Reyes et al., 2012) proposed a model that moves all applications used by the enterprise to the cloud and installs previous LAN security techniques between the cloud and all endpoints of “mobile, fixed” devices to apply the same security procedure when accessing the cloud.

3.5.4. Encryption
Zhou and Huang (2012) proposed a model that uses encryption to provide security for MCC models, delegating the complex encryption to the cloud and keeping simple encryption on the client. Likewise, Jia, et al. (Jia et al., 2011) used encryption to provide security for MCC models using multiple levels of decryption by using public keys and owner keys to reduce processing requirements on the client side and provide encryption. Encryption is also used in the lightweight homomorphic encryption (LHE) encryption model (Baharon et al., 2015). LHE uses an integer for encryption, which makes it more efficient where the key generation method has also been simplified to reduce the processing overhead. The CLOUK model is based on a stream cipher using an external server to generate and distribute cryptographically secure pseudorandom numbers (CSPRNs) and mobile devices to perform XORing on mobile devices (Banerjee et al., 2017).

Additionally, Alsulami and Monowar (2015) proposed a model that uses two cloud providers along with a mobile device. The first is used for encryptions, decryption, and integrity verification, while the second is used to store the encrypted files. This model requires the user to register with the cloud provider, and the cloud provider uses the registration information for authentication. Similarly, Lin, et al. (Lin et al., 2017) proposed a scheme that represents comprehensive mobile provable data possession schemes to confirm the data integrity by the server before using it.

Bhatia et al. (Bhatia et al., 2019) proposed a pairing-free incremental proxy re-encryption model for MCC that implements a scheme with a certificateless incremental proxy re-encryption method to reduce the certificate management overhead. Likewise, the Khan et al. (Khan et al., 2014) model proposes an incremental version of the proxy re-encryption scheme that uses incremental proxy re-encryption of file blocks using the mobile device and cloud for both upload and download. Khan et al. (Khan et al., 2015) proposed a model that uses a cloud-manager-based re-encryption scheme (CMReS) with manager-based re-encryption and cloud-based re-encryption.

Tsai and Lo (2015) also used encryption to secure MCC applications. Tsai proposed an authentication model for MCC services. This model used an encryption scheme that uses a bilinear pairing cryptosystem and dynamic nonce generation to allow mobile users to use multiple cloud services using a single private key. The Tsai model has certain limitations, as shown in Table 2. Therefore, Irshad, et al. (Irshad et al., 2019) proposed an enhanced authentication scheme for MCC services using the Tsai model. The Irshad model uses bilinear pairing through two-phase authentication. The first phase is registration, and the second phase is authentication. The main contribution of this scheme is allowing the mobile device to authenticate the cloud and allowing the cloud to authenticate the mobile device. Similarly, Audithan, et al. (Audithan et al., 2017) proposed an authentication model for MCC services that uses a bilinear pairing cryptosystem and dynamic nonce generation to allow mobile users to use multiple cloud services via a single private key.

3.5.5. Use third party
Delegating some tasks to an outside provider that is not part of the organization providing the main service is called “use the third party.” The third-party virtualization in-cloud security services for the model of the mobile device proposed by Oberheide et al. (Oberheide et al., 2008) is used to delegate the entire virus scan process for files in the mobile to the cloud storage. Othman et al. (Othman et al., 2017) used a third party to secure federated data management. The Othman model uses a third-party trusted service provider to perform encryption, decryption, encoding, decoding, and authentication.

3.5.6. Abnormal usage with context aware
Among the methods that can be used to secure MCC applications is detecting abnormal usage that is influenced by the multiple types of contexts used, such as SMS, MMS, GIS, phone calls, Internet communication, and other network communications. The Kim et al. (Kim et al., 2012) model uses a methodology and model for detecting abnormal usage by detecting abnormal behaviors over the MCC. The MobiByte model proposed by Othman et al. (Othman et al., 2015) uses context awareness in the MCC application model. The MobiByte model uses predefined configurations for offloading parameters to use them in offloading decision evaluation. Similarly, Elwakil, et al. (Elwakil et al., 2015) proposed a context-aware MCC model that uses mobile GIS facilities. This mobile GIS cloud computing model increases the efficiency of processing by decreasing the transmission time for data. This is based on decreasing the size of transmitted data and improving the accessibility and usability of mobile GIS resources.

3.5.7. Dynamic offloading
Dynamic offloading is the partial or complete delegation of tasks and processes to the cloud dynamically during the execution of the application based on the mobile and cloud status (De et al., 2020; Akherfi et al., 2018). There are certain MCC models that use this delegation method, which makes it more challenging to secure such types of MCC applications (Akherfi et al., 2018; Ahmed et al., 2017). Mavromoustakis et al. (Mavromoustakis et al., 2015) and Gai et al. (Gai et al., 2016) used dynamic offloading in their model to enhance energy savings and to improve the consumption of energy in mobile devices. This was done by exploiting a socially oriented model and partial process offloading to the cloud (Mavromoustakis et al., 2015) and by leveraging dynamic cloudlets (Gai et al., 2016). Moreover, Kaur and Sohal (2017) used dynamic offloading in their model to improve performance. This model uses the cost of the process in the form of the execution time to be used in offloading decisions. Unfortunately, these models ignored the security of the data, resources, and communications.

4. Results discussion
As shown in Table 2, there were 34 different MCC models found in the literature. Each of these models has its strengths and weaknesses that were concluded based on reviewing these models. Furthermore, each of these models was analyzed using the SR procedure to determine how other researchers evaluated these models in terms of security. Together, all analysis results from this SR will be used to answer the research questions in the following subsections.

4.1. RQ1-strengths and weaknesses of MCC models pertaining to security issues
MCC is based on the delegation of processes and data to the cloud to overcome some of the mobile device limitations and to enhance its performance. There are certain benefits behind using the cloud resources that each MCC model is trying to use. These resources, in one or more parts of the application, use different techniques. Unfortunately, this delegation comes with some challenges because of the implementation of the MCC models in addition to challenges inherited from mobile and cloud computing. Here, the strengths and limitations of the MCC model are discussed next.

4.1.1. MCC Models Strengths
Several strengths of selected MCC models were identified in this SR, as shown in Fig. 5. The main strength shared by most of the MCC models is the ability to provide computation as a service from the cloud to mobile devices. For instance, Huang, et al. (Huang et al., 2010) proposed a model that uses cloud resources as a computation service provider, where mobile devices can delegate processing jobs to the cloud by implementing a multiple layer system model such that the cloud service represents one of these layers. Additionally, Hung, et al. (Hung et al., 2011) proposed a model that uses a mobile mirror resident in the cloud to execute the computation extensive tasks in the cloud. Similarly, the de los Reyes et al. (de los Reyes et al., 2012) model moves all mobile applications to the cloud and executes security tasks using cloud resources.

Fig. 5

Fig. 5. MCC models strengths.

On the other hand, some MCC models were built to enhance mobile device resource consumption in bandwidth, on-device CPU, memory, and power resources. Oberheide et al. (Oberheide et al., 2008) proposed a model that delegates extensive computing applications to a third-party cloud service. Similarly, Yadav (2018) added a layer to their MCC model to delegate the mobile processes to the cloud layer, which makes the applications use the resources efficiently. Abdellaoui et al. (Abdellaoui et al., 2016) proposed an agent-based MCC model that uses software agents to increase the performance and reduce the energy usage of the mobile device. Elwakil et al. (Elwakil et al., 2015) proposed a model that can improve the accessibility and usability of mobile GIS resources by decreasing the transmission size of data, which consecutively reduces the time and helps to reduce processing and storage and increases battery life for mobile devices.

Other models may enhance mobile device resource consumption by proposing an enhanced offloading technique that uses multiple parameters from the MCC environment. For example (Othman et al., 2015), proposed a model that uses an offloading procedure based on some parameters available in the configurations of mobile devices, which showed an enhancement in energy efficiency, performance, and execution with limited-resource mobile devices. Similarly (Mavromoustakis et al., 2015; Gai et al., 2016), proposed a model with an offloading procedure that helps minimize the energy consumption and maximize the lifetime of mobile devices.

Furthermore, some models were proposed to enhance the performance of specific tasks. For instance, the Huang et al. (Huang et al., 2010) and Hung et al. (Hung et al., 2011) models were designed to enhance trust management. Trust management is an important task that consumes a large amount of processing and storage capabilities. Trust management includes identity and key management, data access control, and security context-aware-based risk assessment. The performance of these processes can be enhanced once delegated to the cloud in MCC applications.

In addition to trust management, data security was one of the strengths of some of the MCC models. Some models were proposed to enhance data security, which in turn enhances privacy, confidentiality, and integrity. For instance, the Huang et al. (Huang et al., 2010) model has a layer for data security to enhance multitenant secure data management by using a new ESSI data processing model that implements attribute-based identity management (ABIDM). Moreover, the model proposed by (Abdellaoui et al., 2016) can improve the privacy and integrity of the data by using a software agent-based MCC model by proposing an agent for authenticating mobile devices in the platform and agent to manage privacy. Similarly, Chen and Wang (2011) made it difficult for attackers to obtain benefits from hacked data during transmission to the cloud by using two storage areas. Each split is understandable only if integrated with the other resource.

Encryption is also used to provide data security when using limited mobile device resources efficiently in MCC applications. Othman et al. (Othman et al., 2014) in their proposed model used encryption to protect the data in MCC applications to reduce piracy attacks using stolen privileges from other mobile devices. Similarly, Yadav (2018) used both the secure outsourced ciphertext attribute-based encryption (SO-CP-ABE) scheme and the probable data possession (PDP) scheme efficiently to improve the data integrity and enhance the data security in MCC. Furthermore, the Audithan et al. (Audithan et al., 2017) model, which uses a bilinear pairing cryptosystem, helps to protect the data from several types of attacks.

On the other hand, certain MCC models have been proposed to enhance system security by delegating system precaution processes to the cloud by delegating all system security tasks to the cloud. This can be done by using a comprehensive security management model, as in the (Othman et al., 2017) model. Security tasks that can be delegated to the cloud include virus scans (Oberheide et al., 2008), encryption and decryption processes (Zhou and Huang, 2012; Jia et al., 2011), key management (Baharon et al., 2015), detection of abnormal usage (Kim et al., 2012), logging by using an agent that records all requests and responses (Sumter, 2010), and the management of data modification operations via incremental re-encryption of file blocks using a mobile device and cloud for both upload and download (Khan et al., 2014, 2015; Bhatia et al., 2019). Alternatively, by using multi-hierarchy, multilevel, elasticity, cross-platform, and unified security management user interface as in the model proposed by Xiu-feng et al. (Xiu-feng et al., 2011). Otherwise, the LAN can be mirrored in the cloud by applying the same security procedures used in the LAN to access the cloud (de los Reyes et al., 2012).

Furthermore, the authentication process, which is the most common mechanism used to grant access, is one of the security processes that certain MCC models can enhance. In MCC, authentications should be done in two ways: authentication of the mobile device to the cloud and authentication of the cloud to mobile devices (Roy et al., 2017). This is because attackers may play the role of trusted cloud providers to gain access to user data or cloud resources. Multiple models were proposed to enhance authentication of the mobile device to the cloud, while only a few were proposed to authenticate the cloud to the mobile devices.

One of the earliest models that was designed to enhance the authentication process of mobile devices to the cloud is the Chow et al. (Chow et al., 2010) model. This model uses implicit authentication in addition to regular authentication, which improves the authentication process. Similarly, the Khan et al. (Khan et al., 2013a) model generates automatic dynamic credential identification for mobile devices using cloud capabilities to enhance the authentication process. Moreover, Othman, et al. (Othman et al., 2014) used mobile IMEI in the authentication process of mobile devices. Additionally, Wu, et al. (Wu et al., 2017) proposed a model in which the authentication process completely delegated to the cloud using a fuzzy access control protocol to reduce the cost for small and medium enterprises (SMEs).

Similarly, encryption was adapted in the MCC model to enhance the authentication process. Banerjee et al. (Banerjee et al., 2017) proposed an MCC model to enhance authentication by using an encryption protocol that is lightweight and efficient. This model generates a registration key that is used to authenticate the user for the external server. Similarly, Irshad, et al. (Irshad et al., 2019), Audithan, et al. (Audithan et al., 2017), Tsai and Lo (2015), Donald, et al. (Donald et al., 2018), and Roy et al. (Roy et al., 2017) proposed models that use encryption to enhance the authentication of the previous schemas by protecting the system from several types of attacks.

4.1.2. MCC Models Weaknesses
Mitigating the issues of limited resources mobile devices through MCC is a challenging process that may increase the complexity of the tasks and requires extra communications (Alsulami and Monowar, 2015). Furthermore, the mobile and cloud computing that are part of the MCC are heterogeneous in terms of hardware, operating systems, language, communication medium, and the model used (Al-Ahmad et al., 2019a). This makes it challenging to build an effective MCC model and may cause many weaknesses. These common issues are summarized in Table 2 and shown in Fig. 6. Below is a discussion of the main common weaknesses (rather than security) for the reviewed MCC models.

Fig. 6

Fig. 6. MCC models weaknesses.

The most common weakness of MCC models is high communication overhead. Many MCC models use complex methods and delegate extensive data tasks to the cloud, which causes real-time performance issues and high communication overhead between the cloud and the mobile device (Hung et al., 2011; Oberheide et al., 2008; Kim et al., 2012; Chen and Wang, 2011; Othman et al., 2015; de los Reyes et al., 2012; Othman et al., 2017). Other models increase the communication overhead due to the size of the encrypted data size compared to the original data, the need to transmit keys between the model components, and the need to have extra data to be transmitted during data changes (Alsulami and Monowar, 2015; Lin et al., 2017; Tsai and Lo, 2015; Roy et al., 2017).

As discussed earlier, MCC is a complex application model that makes high computational complexity one of the common issues in this domain. It is noticeable that most of the MCC models use encrypted data to transmit or store in the cloud. Encryption is one of the most complex operations in the computer domain and increases the computational complexities for the MCC models, as discussed in (Khan et al., 2014; Zhou and Huang, 2012; Jia et al., 2011; Tsai and Lo, 2015; Roy et al., 2017).

Other models increase the computation complexities by using multilevel hierarchy layers, as proposed in (Xiu-feng et al., 2011; Yadav, 2018). The dynamic offloading used in the model proposed by Mavromoustakis et al. (Mavromoustakis et al., 2015) and Gai et al. (Gai et al., 2016) increases the computation complexity. Similarly, the data synchronization used in the Elwakil et al. (Elwakil et al., 2015) model required a powerful client due to high computational complexity. The fuzzy access control protocol is also a computation-intensive process, which was used in the Wu et al. (Wu et al., 2017) model.

The interoperability issue means that the client can use only a single cloud provider (Farris et al., 2017) that can make the system locked to one provider (Parameswaran and Chaddha, 2009). Some MCC models face the interoperability issue due to a design that requires changes in the cloud providers to meet the model specifications. The Huang et al. (Huang et al., 2010) model faces interoperability issues, as discussed in AlShahwan et al. (AlShahwan et al., 2016), due to the cloud components that allow the use of only a single cloud provider for the reach layer. Similarly, models proposed by (Sumter, 2010; Xiu-feng et al., 2011) use the cloud as a layer in an MCC application that is attached to a single cloud provider. Likewise, Bhatia, et al. (Bhatia et al., 2019) proposed a model that uses a schema that is limited to secure the modification of the data in a single cloud source.

On the other hand, the design of some MCC models makes them sacrifice one of the important cloud benefits, which is scalability. Scalability is one of the main features of cloud computing that enables the user to extend the cloud computing resources when needed (Lehrig et al., 2018). For instance, Huang, et al. (Huang et al., 2010) proposed a model that uses layers that prevents MCC applications from using the scalability feature of the cloud due to pre-configuration limitations, as discussed in AlShahwan et al. (AlShahwan et al., 2016). Additionally, Khan, et al. (Khan et al., 2013a) proposed a model that uses an authentication technique that is unable to be enhanced even if the cloud provider is scalable. Similarly, Khan, et al. (Khan et al., 2015) proposed a model that uses the trusted entity, which negatively affects scalability.

Among the issues that appear due to mirroring in MCC models is the damage recovery issue. Mirroring requires having a cloud mirror of the mobile device and synchronizing the processes, input, environment, and output with the cloud, which makes it challenging to prepare damage backups for MCC applications. The Hung et al. (Hung et al., 2011) model uses mirroring and faces damage recovery issues due to fine-grained resources. This makes it impossible to recover after damage unless multiple copies of the same mirror are built and synchronized in real time. Similarly, the de los Reyes et al. (de los Reyes et al., 2012) model moves all mobile applications as well as security precautions to the cloud, which makes recovery from damage a major challenge.

Delegating tasks and processes to the cloud helps mobile devices overcomes some of the resource limitations; however, this may result in service interruptions due to a cloud provider or communication problems. Therefore, delegating the mobile critical internal function to the cloud may expose it to operation interruption, as in the Oberheide et al. (Oberheide et al., 2008) model, which delegates virus scans to the cloud. This means that mobile devices that implemented the Oberheide et al. (Oberheide et al., 2008) model may not be able to scan for viruses if the cloud is unavailable. Similarly, the Kim et al. (Kim et al., 2012) model may face service interruption issues for the same reasons as it delegates abnormal usage detection to the cloud.

The solution for such problems is to use dynamic offloading for delegated tasks. That is, whenever it is not possible to delegate the task to the cloudlet, the mobile device executes that task. Notably, most of the MCC models disregard dynamic offloading and use only static offloading, as shown in Table 2. Thus, it is challenging to complete a task if the cloud or the communication channels are unavailable. Even the models that use dynamic offloading may face issues related to disregarding the dynamic device and cloud status. For instance, Mavromoustakis, et al. (Mavromoustakis et al., 2015) and Gai et al. (Gai et al., 2016) augmented all sensitive resources to the cloud while disregarding mobile, cloud, and communication status in the offloading decision. Similarly, Kaur and Sohal (2017) disregarded the other dynamic environment parameters that may affect processing, such as memory size and communication medium status.

4.2. RQ2- MCC models security issues
As discussed earlier, MCC models are complex due to the incorporation of multiple computing domains, clouds, and mobile devices, which already have issues in addition to those that emerged due to the integration of these technologies. Security issues are considered the most complex category of MCC models in addition to being one of the main considerations for users once they use MCC applications (Al-Ahmad et al., 2019a). This subsection provides a critical discussion of the selected MCC models’ security issues, which are listed in Table 2 as MCC security issues and summarized in Fig. 7.

Fig. 7

Fig. 7. MCC models security issues.

Among the MCC models, some disregard the security of the applications and depend on the security precautions provided by the mobile device and the cloud provider. For instance, Othman, et al. (Othman et al., 2015) proposed a model that focuses on energy efficiency and performance while disregarding security, privacy, and communication (Khan et al., 2015; Ahmed et al., 2017). The Sumter (2010) model disregards the security of cloud resources and client resources (Al-Haj et al., 2013) while considering only publishing layer security among many other security layers in the cloud, such as SaaS and IaaS (Xie et al., 2013). The Kaur and Sohal (2017) model disregarded the security issues that appear due to the change of the execution path that occurs because of dynamic offloading (Al-Ahmad and Kahtan, 2018b).

The rest of the MCC models treat security as a dimension to be considered when designing the model. However, there are certain security issues that were disregarded by these MCC models that may affect the application, data, user, device, and cloud security (Stergiou and Psannis, 2020). This may lead to building an application that is exposed to security vulnerabilities such as a denial of service, spoofing, identity theft, SQL injection, data leakage, XSS, and viruses (Al-Ahmad et al., 2019b).

One of the critical issues of the MCC models is privacy. For instance, Chen and Wang (2011) proposed a model that exposes the mobile user identity with dynamic credentials in the mobile-cloud computing environment (Khan et al., 2013a). Additionally, the Xiu-feng et al. (Xiu-feng et al., 2011) model disregards user privacy and identity‐based concerns, as discussed by Irshad et al. (Irshad et al., 2019). Similarly, Bhatia, et al. (Bhatia et al., 2019) used an encryption scheme that may disclose the personal information of the user during communication (Sun et al., 2020). Furthermore, the Khan et al. (Khan et al., 2013a) model disregards privacy issues that arise due to the migration of tasks to the cloud (Khan et al., 2014) and disregards privacy control (Othman et al., 2014).

Another issue that faces some of the MCC models is the authentication issue, where both the client and the cloud in the MCC application should validate their identity. As per the review, it is noticed that some models did not consider all the authentication process tasks, such as the Huang et al. (Huang et al., 2010) model as discussed by Noor et al. (Noor et al., 2018) and the (de los Reyes et al., 2012) model as discussed by Alqahtani and Sant (2016). Other models consider one dimension of the authentication process, which includes authenticating the client to the cloud and disregards the other dimension. This also requires authenticating the cloud to the client (Banerjee et al., 2017; Abdellaoui et al., 2016; Bhatia et al., 2019; Othman et al., 2017). Moreover, the Khan et al. (Khan et al., 2014) model may not be suitable for mobile devices in authenticating the cloud due to the high computational power required (Khan et al., 2015). Likewise, the Chow et al. (Chow et al., 2010) model does not address the cloud-to-client authentication (Au et al., 2018). Furthermore, the Pirax model proposed by Othman et al. (Othman et al., 2014) uses a mobile device IMEI that can be spoofed as long as the device does not authenticate the cloud (Ali et al., 2015).

Furthermore, some researchers attempted to propose techniques and methods to authenticate the cloud as a service provider to the mobile device as a client in MCC applications. For example (Tsai and Lo, 2015; Irshad et al., 2019; Donald et al., 2018; Roy et al., 2017), proposed a model that supports mutual authentication, where the cloud authenticates the client and vice versa. Unfortunately, mutual authentication may not be achieved by these models (Roy et al., 2017; Wang et al., 2019, 2020). Mutual authentication, if successfully achieved, will enhance the MCC model security and will protect the resources in the cloud and in the mobile device.

In addition to mutual authentication, there are some authentication concepts that can be implemented to enhance the security of the MCC model and to protect the mobile device and cloud resources. Among these authentications is the multifactor authentication process, which can be used as a combination of authentication methods such as passwords, pin numbers, and verification codes (Alizadeh et al., 2014; Kim and Hong, 2011). The Roy et al. (Roy et al., 2017) model uses multifactor authentication but fails to achieve multifactor security and cannot preserve user intractability (Roy et al., 2017).

Another issue that certain MCC models face is communication security. MCC model communication issues may lead to security issues related to exposure of data, privacy, and integrity, which cause security threats to mobile devices, wireless mediums, and cloud data centers (Bheda and Lakhani, 2013). Some models disregard the security of the communications between the mobile devices and the data server, as in (Hung et al., 2011; Oberheide et al., 2008; Chen and Wang, 2011; Elwakil et al., 2015; Othman et al., 2017; Irshad et al., 2019; Audithan et al., 2017; AlShahwan et al., 2016; Olaleye and Kant, 2018). Similarly, the Zhou and Huang (2012) model is not suitable for data sharing, as it has no clear solution for communication security during attribute revocation (Li et al., 2017). Additionally, the Yadav (2018) model used a key distribution method that is not secured, which may lead to exposing the data (Taha et al., 2019).

Similarly, some MCC models have issues related to data security that may also lead to data exposure and many problems related to privacy. Some MCC models, such as those proposed in (Huang et al., 2010; Othman et al., 2014), disregard privacy, access control, and security of users’ data stored in the cloud and mobile devices (Khan et al., 2013b; Li et al., 2019). The Mavromoustakis et al. (Mavromoustakis et al., 2015) model can secure data of a small size but does not support a high volume of data security (Audithan et al., 2017). Similarly, the Jia et al. (Jia et al., 2011) model has a data security issue, as security precautions are applied only on certain levels of the MCC model (Noor et al., 2018).

Furthermore, some security issues are related to the encryption key. For example, the small key size used by the Baharon et al. (Baharon et al., 2015) model makes the system less secure and more vulnerable (Singh et al., 2017), while the large number of attributes used in the ciphertext by the Zhou and Huang (2012) model may cause an exponential increase in ciphertext (Othman et al., 2017; Nguyen, 2016). On the other hand, some models have issues related to one point of failure, such as the Wu et al. (Wu et al., 2017) model, which has a single point of failure that may reduce the security efficiency (Donald et al., 2018).

Hurel et al. (Hurel et al., 2014) stated that most MCC models focus on specific instances of the entire security threat set, as noticed in (Kim et al., 2012). For instance, the Khan et al. (Khan et al., 2015) model disregards denial-of-service attacks, and the Alsulami and Monowar (2015) model disposes of many eavesdropping attacks (Naik and Jenkins, 2016; Naik et al., 2017). Similarly, the Tsai and Lo (2015) model protects the system from some security issues but has issues related to session key security, user impersonation attacks, server impersonation attacks, and ephemeral secret key leakage attacks (Roy et al., 2017).

4.3. RQ3-MCC models implications
Industry and forthcoming studies in the MCC security domain should focus on the gap that previous studies disregarded. The previous MCC models were analyzed according to the security issues shown in Fig. 7 and discussed in the previous sections to identify gaps. This analysis is presented in Table 3, where the symbol ✓ indicates that the model has tackled the corresponding security issue, and ✗ indicates that the model disregarded this security issue.


Table 3. MCC model security issue analysis.

Security Issues
MCC Models	General Security	Privacy	Authentication	Cloud to client authentication	Multi-factor authentication	Communication channel	Data Security	Security threats set	Encryption key	Single failure point
Huang et al. (2010)	✓	✓	✓	✗	✗	✓	✗	✓	✓	✓
Chow et al. (2010)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✓
Hung et al. (2011)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✓
Oberheide et al. (2008)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Kim et al. (2012)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
Chen and Wang (2011)	✓	✗	✓	✗	✓	✗	✓	✓	✓	✓
Khan et al. (2013a)	✓	✗	✓	✗	✓	✓	✓	✓	✓	✓
Khan et al. (2014)	✗	✗	✗	✗	✗	✗	✓	✗	✗	✗
Othman et al. (2015)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✓
Othman et al. (2014)	✓	✓	✓	✗	✓	✓	✗	✓	✓	✓
Khan et al. (2015)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
de los Reyes et al. (2012)	✓	✓	✗	✗	✗	✓	✓	✓	✓	✓
Zhou and Huang (2012)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Sumter (2010)	✓	✗	✗	✗	✗	✗	✗	✗	✗	✗
Jia et al. (2011)	✓	✓	✓	✗	✓	✓	✗	✓	✓	✓
Xiu-feng et al. (2011)	✓	✗	✓	✗	✓	✓	✓	✓	✓	✓
Mavromoustakis et al. (2015)	✓	✓	✓	✗	✓	✓	✗	✓	✓	✓
Gai et al. (2016)	✓	✓	✓	✗	✓	✓	✗	✓	✓	✓
Elwakil et al. (2015)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Wu et al. (2017)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✗
Baharon et al. (2015)	✓	✓	✓	✗	✓	✓	✓	✓	✗	✓
Banerjee et al. (2017)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✓
Alsulami and Monowar (2015)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
Lin et al. (2017)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
Abdellaoui et al. (2016)	✓	✓	✓	✗	✓	✓	✓	✓	✓	✓
Yadav (2018)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Bhatia et al. (2019)	✓	✗	✓	✗	✓	✓	✓	✓	✓	✓
Othman et al. (2017)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Tsai and Lo (2015)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
Irshad et al. (2019)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Audithan et al. (2017)	✓	✓	✓	✗	✓	✓	✓	✗	✓	✓
Donald et al. (2018)	✓	✓	✓	✗	✓	✗	✓	✓	✓	✓
Roy et al. (2017)	✓	✓	✓	✗	✗	✓	✓	✓	✓	✓
The analysis in Table 3 clearly shows that the cloud-to-client authentication issue is common among all of the studied models. Therefore, future research needs to focus on methods and techniques to be used on cloud-to-client authentication along with all other issues. Forthcoming models need to propose an integrated method for client authentication that must be aligned with the other functionalities and security mitigations proposed previously.

4.4. Findings
Fig. 8 illustrates the percentage of security issues addressed vs. disregarded in MCC models. Fig. 8 shows that general security mitigation possesses the highest address percentage with 91% of the MCC models, while 9% of the models disregard general security mitigation, which may represent multiple security risks to the information system components. Moreover, the communication channel issue had the medium percentage with 68% of the MCC models, while 32% were disregarded. Hence, either those models rely on out-of-control communication provider security mechanisms, or they disregard this critical dimension of security that may lead to revealing the traffic to any packet sniffer tool. Furthermore, Fig. 8 clearly shows that the cloud-to-client authentication issue was disregarded with 100% of the MCC models. The cloud-to-client authentication issues must be addressed by MCC models to protect the applications from the man-in-the-middle attacks that may be used to steal the cloud session information and use it against the client's will.

Fig. 8

Fig. 8. Percentage of Security Issues Addressed vs. Disregarded in MCC Models.

As shown in Fig. 8, more attention should be given to reducing the risk of a single point of failure, multifactor authentication, and encryption key issues, as 12% of the models disregarded these issues and thus will expose the application to many attacks, for example, cryptographic key attacks and denial of service attacks. While 74% of the MCC models focus on a specific set of security threats and 26% disregard the other security threats, attackers are allowed to exploit vulnerabilities against the MCC applications. Data security, privacy, and authentication were disregarded by 24%, 21%, and 15%, respectively, of the MCC models; thus, data integrity and personal information are still at risk when using certain MCC models.

To sum up, Fig. 8 highlighted the following points:

•
Cloud-to-client authentication issues are disregarded by 100% of the MCC models and thus represent a research gap that should be filled in future MCC models.

•
None of the security issues were addressed 100% in the MCC models. Thus, the door is open for attackers to use unprotected vulnerabilities against MCC users.

•
None of the models could overcome the security issues together in one MCC model. Thus, there is a lack of comprehensive view on MCC security issues that focus on all immune components of the MCC models, i.e., cloud, mobile, and the communication medium.

Disregarding any of the mentioned security issues will result in the exposure of data security, privacy, and integrity, and will definitely pass those security threats to the MCC applications, mobile devices, wireless medium, and cloud data centers.

5. Conclusion and future work
Despite the large number of studies published in the domain of MCC models, many studies have not paid enough attention to security issues when implementing these models. Moreover, related MCC model surveys do not sufficiently address comprehensive MCC security issues (in each survey) such as secure and protective data, resources, and communication channels. This paper is among the first efforts to evaluate the proposed MCC models through the lens of security issues using SR techniques. SR was carried out based on the strategy discussed in the methodology section to analyze the reviewed MCC models against the strengths, common issues, and security issues found in the literature. As a result, issues RQ1, RQ2, and RQ3 were answered by analyzing the selected papers.

The findings of this paper reveal that cloud-to-client authentication was disregarded by existing MCC models. Moreover, the existing MCC models tend to address certain but not all security issues. Disregarding any of the MCC security issues will result in the exposure of data security, privacy, and integrity, and will definitely pass those security threats to the MCC applications, mobile devices, wireless medium, and cloud data centers.

The findings of this paper provide guidelines for industry and future research in the MCC domain to build a comprehensive model that addresses all MCC security issues. MCC model firms have yet to pay special attention to these aspects when implementing some of the existing MCC models. MCC models require emphasis on building models that involve updated methods and techniques that enhance cloud-to-client authentication along with the other solutions to overcome other security issues and guarantee privacy preservation.

Future research needs to focus on providing more holistic MCC models that address all recent security threats. Additionally, MCC models need to consider an integrated method to protect the communication channels, as this may lead to exposure of data security, privacy, and integrity and definitely will pass those security threats to MCC applications, mobile devices, wireless media, and cloud data centers. Additionally, MCC models need to consider privacy preservation in their design to protect user identity and mitigate the effect of other security threats. Future MCC models need to address all presented security issue aspects. The industry should pay more attention to this issue as part of the security plan.