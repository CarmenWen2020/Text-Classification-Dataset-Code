Advancement in very large scale integration (VLSI) technologies and the ever-shrinking size of the transistors have led the semiconductor designers to create a multiprocessor system on chips. Network on chip (NoC) provides an efficient and flexible communication infrastructure to these systems. One of the most prominent research problems in NoC is mapping the real-time application tasks to multiple cores. The aim is to map the cores, which require frequent and high-bandwidth communications close enough to increase the performance and decrease the chip’s power consumption. In this research, a nature-inspired Andean condor algorithm (ACA) is applied to the mapping problem of application tasks on multiple cores of NoC. Initially, a clustering-based technique provides the main algorithm a head-start for fast convergence, and then the main ACA is applied to achieve the optimal performance. The simulation results show that the proposed algorithm outperformed state-of-the-art algorithms in terms of various performance metrics, such as communication cost, average packet latency, throughput and energy consumption. The proposed algorithm achieves up to 27.11% improvement in communication cost and provides 78.9% savings in computational overhead.

Previous
Next 
Keywords
Andean condor

Application mapping

Communication cost

Computation time

Network on chip

1. Introduction
In this modern age, advance embedded designs heavily rely on multicore systems on a single chip to meet the multiprocessing requirements. Such a system’s performance depends on efficient and advanced processes and reliable integration and interconnections of different processing elements, such as microprocessors, memory elements, and other control units. With the advancement of very large scale integration (VLSI) designs, incorporating various processing elements on a single system on chip (SoC) is readily available. These systems uses the bus as a communication backbone to exchange the data between the interconnected cores. As the number of cores in SoCs increases, their layout becomes more complicated. The performance of the SoC may be saturated, if the structure of the SoC is not well-organized. Therefore, the bus-based infrastructure has become a bottleneck in such complicated multi-core system’s performance in terms of throughput, latency and power consumption.

To overcome this issue, a network on chip (NoC) has been proposed and studied as an alternate solution (Marculescu et al., 2009), which provides optimal performance and flexibility. NoC uses a topological-based network model for interconnecting multiple cores in a single chip. Packet switching is adopted as a network protocol to route data flow among the cores in NoC based systems. In NoC, link bandwidth, latency, throughput, power and energy consumption have a significant impact on the overall performance of the systems. Therefore, a careful design is an absolute requirement to accomplish these performance goals (Tatas et al., 2014). Fig. 1 depicts the basic architecture of 4 × 4 2D NoC. Routers are interconnected via physical links, and the intellectual property (IP) cores, i.e., processing elements, memory, etc., are connected with routers via a resource network interface (RNI).

Moreover, technologies shrinking size into nano-meter brings considerable challenges to the reliability of NoC systems. Faults in the network architecture also impact the performance of a system. Researchers proposed different architectural modifications for fault tolerant and trouble-free NoC designs to cope with this challenge. In Shafique et al. (2020), the authors proposed a reconfigurable architectural design to tolerate multiple faults in each pipeline stage of a generic router. Another fault-tolerant router architecture, i.e., Defender, which is capable of tolerating permanent faults, was introduced in Baloch et al. (2019). The Defender provides the fault tolerance to the input ports and a routing computation unit. The authors in Ibrahim et al., 2020, Rashid et al., 2020, proposed error correction techniques and fault tolerant designs for enhancing the reliability of NoC platforms, especially for internet of things (IoT) and edge computing devices (Alizadeh et al., 2020, Sim and Han, 2020).

Apart from this, the performance of target architecture is also dependent on the distance a packet traversed in the network. Therefore, an efficient mapping technique may be employed to achieve the goal of optimal performance. Intuitively, mapping is the topological arrangement of application’s tasks to the targeted architecture, which is considered as a computationally hard problem in the research community (Amin et al., 2020).

Several optimization algorithms have been investigated in the literature for the application mapping problem. These algorithms use different optimization approaches such as mathematical or exact mapping, heuristic, and meta-heuristic methods for application mapping. Among them, some techniques have high computational overhead due to their complex nature, whereas others are unable to provide the optimum solutions (Sahu and Chattopadhyay, 2013). In other words, there exists trade-off between complexity and performance. This research aims to provide an optimized mapping algorithm to associate the tasks of an application to the cores of 2-D NoC architecture with reduced cost in low computational overhead.

Solving large complex problems is not a practical approach to using mathematical-based linear programming methods. Therefore, researchers have proposed several heuristics and metaheuristic-based techniques to solve different optimization problems like in Khamayseh et al. (2020). Generally, the metaheuristic algorithms explore the whole search space and provide a quality solution depending on the nature of the problem. Scientists from different research communities have utilized the metaheuristic algorithms in combination with modern engineering techniques like machine learning DiTomaso et al., 2017, GS et al., 2020, Clayton et al., 2020, clustering techniques (Khedr et al., 2020) etc. to solve different optimization problems.

For example, in  Zhou et al. (2020), Zhou et al. utilized random forest (RF) model enhanced by particle swarm optimization (PSO) algorithm to diagnose the spontaneous rupture of endometriomas. In Jamil et al. (2020), a combination of PSO and a Belief Rule-Based Expert System (BRBES) was developed to evaluate technological improvement capabilities in firms.  Fan et al. in Fan et al. (2018), proposed support vector regression (SVR) to predict the vacant spaces in parking lot. In this technique, the fruit fly optimization strategy is used to fine-tune the parameters of SVR.

Motivated from above, we presented a metaheuristic-based mapping technique inspired by the natural behavior of Andean condor with reduced computational overhead to obtain the desired performance. A clustering-based technique is utilized to leverage the main algorithm. The proposed ACA algorithm dynamically tunes the exploration and exploitation rate at run time. This study describes the formulation of the proposed Andean condor algorithm (ACA), mimicking the search behavior of the Andean condor for its food to solve the application mapping problem.

The major contributions of this research are as follow:

1.
We proposed an efficient application mapping approach using a metaheuristic-based ACA algorithm for future NoC designs.

2.
We utilized a clustering-based mapping technique to optimize the proposed algorithm to reduce the overall computational overhead compared to the state-of-the-art metaheuristic algorithms.

3.
The proposed algorithm provides an optimal mapping solution for NoC-based systems. The experimental analysis shows that this novel strategy obtains reasonable improvements in power consumption and average network latency compared to the existing algorithms.

The remaining sections of the paper are organized as follows. In Section 2, we present the existing work on application mapping in NoC designs. The inspiration of the proposed ACA algorithm and the problem formulation is presented in Section 3. The models used for the evaluation of performance metrics are described in Section 4. Section 5 discusses the proposed ACA-based optimization technique for application mapping. Section 6 presents a comparative analysis of results obtained from the proposed technique with those from the existing algorithms on embedded applications. Finally, Section 7 includes concluding remarks.

2. Related work
Application mapping is an important step in designing NoC based systems. The performance of NoC based systems depends not only on the architectural design but also on the resource allocation, which is an important aspect of NoC system design for execution of embedded application. The relative position of intellectual property (IP) cores of the NoC platform may introduce communication delay besides other factors. Hence, an efficient resource allocation strategy may be employed to obtain the optimum performance of the system. In literature, different techniques have been reported to solve this particular problem. In (Sahu and Chattopadhyay, 2013), Sahu and Chattopadhyay presented a comprehensive analysis of the different mapping techniques with the existing trends in the NoC based designs.

Depending on the time at which the mapping technique is applied, application mapping is further categorized into two different domains; dynamic and static mapping. In dynamic mapping, the association of tasks to the cores of NoC is performed at run-time. Some recent work on dynamic mapping is reported in the literature, e.g., a thermal-aware dynamic mapping technique is presented in Reza et al. (2017). In which a first-come, first-served strategy is utilized for application mapping. If more than one application requests for mapping, then the application with the highest computational requirements will be selected. Similar work is proposed in Huang (2020), in which one core is chosen as a global manager that dynamically manages the task to core mapping using mean occupied position. L-shape isolated (LISO) dynamic mapping technique is reported in Sadeghi et al. (2019), which maps multiple applications on the common platform without communication interference by dividing the NoC into isolated regions.

The system’s complexity may increase by using a dynamic mapping approach, which will upsurge the energy consumption and introduce delays. However, the static mapping of tasks of application is performed at the design stage of the system. The computational cores of the platform are well defined and not change afterward. As the application mapping process is finalized before the application’s execution, it shows better results in energy dissipation and computational overheads over dynamic mapping. Various mapping solution based on the static mapping approach is presented in the literature for an application mapping problem.

In Tosun et al. (2009), proposed a mathematical approach, namely integer linear programming (ILP) method, which offers an exact optimal solution to a mapping problem. This approach led to the optimal solution, but the computational complexity increases exponentially with the size of an NoC system. To overcome this complexity issue, a cluster-based method for application mapping was investigated in Tosun (2011a), which is an advanced form of the ILP formulation and gives an optimal or near-optimal solution. In Hu and Marculescu (2003), the authors presented a branch and bound (BB) algorithm for application mapping on NoC-based systems. In this algorithm, though the computational overhead is reduced, but it fails to provide optimality in terms of performance. In Murali and De Micheli (2004), a near-optimal mapping technique, which is called NMAP, was presented. NMAP algorithm minimizes the communication delays by splitting the traffic and reducing the routing path in a mesh network based on bandwidth requirements between the tasks of an application.

A constructive heuristic mapping technique called as CASTNET, was presented in Tosun (2011b), which aims to reduce energy consumption. In CASTNET, highly communicating tasks are mapped close to each other in order to minimize the path that data travel through. In Sahu et al. (2015), presented a constructive heuristic strategy with iterative improvement, i.e., Map-Graph, for associating the tasks to the core of NoC with improved communication cost and minimized energy consumption. Khan et al. proposed a segmented brute-force mapping (SBMAP) algorithm for application mapping in NoC architecture, which divides a given application into modules, then a systematic search is applied to each module (Khan et al., 2018b). Segmentation is performed to avoid the computational complexity for applications with a large set of tasks. A BB-based exact mapping (BEMAP) algorithm was introduced in (Khan et al., 2018a), based on an amalgam optimization technique for application mapping. In BEMAP, initial mapping is performed with a fast BB algorithm, and then a modular exact optimization method is used to optimize the initial mapping. These algorithms either fails to provide optimal results or consume more computational power.

In Wang et al. (2011), introduced an algorithm based on the colonial behavior of ants as an optimization approach for application mapping. An ant colony optimization (ACO) algorithm helps to improve the mapping processes considering reducing a bandwidth requirement. It still has an uncertain nature in terms of convergence due to a large number of iterations. A two-step genetic algorithm (GA) for application mapping was proposed in Lei and Kumar (2003) with reduced execution time of task mapping procedure. However, this algorithm has drawback in terms of power and energy consumption. Morgan et al. presented a GA-based multi objective mapping technique to minimize area and power consumption (Morgan et al., 2013). Though, the GA-based algorithms perform well in global search, they are intensive in nature. Simulated annealing (SA) based meta-heuristic algorithm was presented in Marcon et al. (2005), but it takes a long execution time to find an optimal solution. A two-step contention and energy-aware task mapping on NoC was presented in Li and Wu (2016). In this, task mapping is performed using a quadratic binary problem, and then GA is utilized to assign the voltage and frequency levels to each task which minimizes the overall energy consumption of the system.

Particle swarm optimization (PSO) was presented in Sahu et al. (2011) as an application mapping technique. This algorithm has faster convergence than GA, but it fails to control the initial population due to its random initialization. This problem motivates the author to modify the basic PSO formulation by integrating many extensions as in Sahu et al. (2014), while considering the static operations of the system. This strategy improves the communication cost and power consumption but sometimes gets stuck in a local optima in complex mapping problems. In Li et al. (2017), introduced a meta-heuristic based bat algorithm (BA), which is inspired by the echolocation nature of bats. This energy-aware mapping approach improves computational time and reduces power consumption. However, the algorithm lacks to fine tune the balance between local and global search.

Authors in Tariq et al. (2019), presented a metaheuristic-based ARSH-FATI algorithm for task mapping, scheduling, and voltage scaling while considering the energy and contention-aware scheduling of precedence and deadline constrained tasks executed on edge computing devices. Tariq et al. in Tariq et al. (2020) proposed an energy and memory-aware re-timing conditional task graph approach that integrates task-level coarse-grained software pipelining with Dynamic Voltage and Frequency Scaling (DVFS). This approach not only optimizes energy consumption but ensures that memory capacity constraints are satisfied. But the limitation of this approach is memory overhead  (Ali et al., 2021). The algorithms proposed in Li and Wu, 2016, Tariq et al., 2019, Tariq et al., 2020, not only rely on task mapping and scheduling but also incorporate voltage and frequency scaling to reduce the overall system energy, which increases the computational complexities.

Recently, Alagarsamy et al. proposed another bio-inspired search algorithm, i.e., self-adaptive chicken swarm optimization (SCSO) (Alagarsamy et al., 2019). This algorithm performs well in terms of both communication cost and power reduction for standard and randomly generated graphs with reasonable computation time. Table 1 summarizes the comparison of the related work stated above. Though the convergence of SCSO algorithm is comparatively faster than previously reported bio-inspired algorithms in the literature, our research aims to introduce another meta-heuristic algorithm with minimum computational efforts. Hence, we introduce an Andean condor-based optimized mapping technique. The main advantage of this approach is the fine balance between exploration and exploitation, which reduces the computational cost in finding the optimal solution.


Table 1. Comparison of different mapping techniques.

Ref.	Mapping technique	Embedded benchmarks	Result comparison	Optimization goal	Shortcomings
Tosun et al. (2009)	ILP	VOPD, MPEG4, H.263, MP3	Communication Cost	Reduced Power Consumption	Large Computation Time
Tosun (2011a)	Clustered-ILP	VOPD, MPEG4, H.263, MP3	ILP	Reduced Execution time	Computation Time
Murali and De Micheli (2004)	NMAP	MPEG4, DSD, OPD, MWA, MWAG, PIP	Communication Cost	Reduced Communication bandwidth and cost	Not Optimal
Tosun (2011b)	CASTNET	VOPD, H.263, MPEG4, MP3, MWD, G25, G36	ILP, GA, SA, Random	Improved communication cost and energy	Not Optimal
Khan et al. (2018b)	SBMAP	VOPD, PIP, MMS, 80211arx	BB, NMAP, Random	Reduced power consumption and communication cos	Not Optimal
Khan et al. (2018a)	BEMAP	MMS, VOPD, CAVLC, TELECOM	NMAP, BB	Improved network latency, throughput and communication cost	Not Optimal
Wang et al. (2011)	ACO	VOPD, MPEG4	Random	Reduced Communication bandwidth	Large Computation Time
Lei and Kumar (2003)	GA	Random Graphs	Different GA based scenarios	Reduced average system delay	Computation Complexity
Sahu et al. (2011)	PSO	VOPD, MPEG4, PIP	NMAP, GA	Improved network latency, throughput and communication cost	Slow Convergence
Li et al. (2017)	BA	MWD, VOPD, DVOPD	GA, PSO	Reduced Power Consumption	Comm. Cost and slow convergence
Alagarsamy et al. (2019)	SCSO	MPEG4, VOPD, MWD, 263encMPdec	GA, PSO, ACO, SA	Reduced Communication cost	Slow Convergence
3. Proposed algorithm: ACA
This section discusses a brief overview of the Andean Condor Algorithm and the problem formulation for the NoC based systems.

3.1. Andean Condor Algorithm
The Andean condor (Vulture gryphus) is a flying bird species that belong to the Cathartidae family. They are distributed over the Andes mountains in South America along the Pacific coast. Pavez presented a meta-heuristic algorithm in Pavez (2014). The algorithm was developed from the observations made on the flying behavior of Andean condors for searching food at a different time of the year. Distance traveled by an Andean condor to search food is dependent on the current season. An Andean condor often travels farther away from its nest in spring and summer seasons than in winter and autumn. This traversed behavior gives rise to the exploration and intensification rate based on the average fitness value. If this value is good, the number of explorations decreases and the number of intensifications increases. Therefore, the average fitness quality eventually controls the fine balance between exploration and intensification rate.

According to Almonacid and Soto in Almonacid and Soto (2019), the ACA meta-heuristic is superior to the BA and migratory birds optimization (MBO) algorithms. Also, the ACA performs better than the PSO in various problems. From such observations, we apply this meta-heuristic technique to optimize the application mapping problem and find considerable performance improvement.

3.2. Problem formulation
In this section, the mapping problem for the NoC based designs is formulated in the following definitions:

Definition 1

Application Task Graph (ATG) is a weighted directed graph , where 
 is a set of vertices, representing cores/tasks of an application and 
 designates the set of directed edges, which represents the communication pattern between two adjacent cores 
 and 
, and  be the total number of tasks in an application.

Fig. 2 depicts the basic architecture of the video object plane decoder (VOPD) with its sub-tasks. In object-based coding, the video frames are defined as layers of video object planes (VOP). Each video object plane is then a video frame of a specific object of interest to be coded. After defining the video object planes, each VOP is encoded, and the encoded bitstreams are multiplexed to a single bitstream. VOPD is a decoder by which the chosen object planes are extracted from the bitstream and then are composed into an output video to be displayed. The ATG of VOPD is represented in Fig. 3 and will be utilized for illustration of the proposed scheme.

Fig. 3. Application task graph of VOPD.

Definition 2

A NoC Architecture Graph (NAG)is a topology graph , where 
 denotes the set of nodes, which represents the tiles in NoC architecture connected to local routers and 
 is said to be a set of physical link by means of ordered pair of the tiles 
 and 
, where  is the number of routers with processing elements in NoC architecture. The basic NoC architecture is represented in Fig. 1.

Definition 3

Application mapping is defined by one-on-one mapping function  in which each node (or task) 
 of ATG maps to an appropriate tile 
 of NAG. Where the mapping is done if and only if, the total number of tasks in ATG is less than or equal to the total number of tiles in NAG, i.e., . Where,  denotes the cardinality, i.e., size, of a set.


Table 2. Notations.

Notation	Description	Unit
Average network latency	cycles
Latency of packet , in processor 	cycles
Average power of network	
Active power of component 	
In-active power of component 	
Active percentage of component 	%
Average energy per packet	/packet
Simulation time	
Warm-up time	
Average throughput of network	packets/cycle
Number of processors in platform	–
Number of packets received by single processor 	–
Total number of packets transferred on network 
–
Bandwidth requirement b/w task  and 	
Manhattan distance	hops
4. Performance analysis model
The following mathematical models are used for the assessment of latency, power and energy estimation, communication cost, and throughput to evaluate the performance of the proposed ACA approach for application mapping on an NoC architecture (Tran and Baas, 2012). Some standard notations used in this section are listed in Table 2.

The average latency 
 of the network is represented by (1)
 
 

The average Power 
 of the network is given by (2)
 

The average energy 
 spent by each packet is given by (3)
 

The communication cost is calculated as (4)
 (5)
where, the ordered pair 
 and 
 represents the coordinates of tiles 
 and 
, which are associated with the tasks 
 and 
 respectively.

Additionally, the average throughput 
 of a network is expressed by (6)
 


Table 3. Symbology for ACA algorithm.

Nomenclature	Representation	Domain	Description
Andean condor population		Population of mapping solutions
Andean condor		A single solution  of population
Best Andean condor		Best mapping solution of population
Number of condors	
Size of population
Average fitness		Average fitness of population Eq. (4)
New average fitness		Average fitness of new population Eq. (4)
Distribution parameter	
Distribute the population in exploration and intensification
Percentage of change	
Exploration level adjustment in population
Quantity of exploration	
Quantity of intensification	
5. ACA based application mapping
The proposed ACA-based mapping method takes two graphs, i.e., ATG and NAG, as inputs and adequately carries out a mapping process of an embedded application to the NoC platform. The parameters and symbology used in the ACA-based method for application mapping are listed in Table 3.

The ACA is a population-based algorithm. The initial population of 
 number of mapping solutions (Andean condors) is represented by: (7)

5.1. Cluster-based initial population
Initial population  of 
 Andean condors for the ACA-based approach is generated with a cluster-based technique. The cluster-based initial population procedure comprises of following steps:

Step-1.
Select a single task 
 from ATG as a parent task, and identify direct connection 
 between the task 
 with each task in ATG. The ATG of VOPD is shown in Fig. 3.

Step-2.
Group the tasks directly linked with 
 and parent task in a single cluster.

Step-3.
Calculate the overall communication requirement of the cluster using Eq. (8). (8)
where, 
 is the communication bandwidth between task 
 and 
, and  is the total number of tasks in a single cluster. The clustered ATG of VOPD benchmark is shown in Fig. 4.

Step-4.
Rank the clusters according to communication density 
.

Step-5.
Select the highly ranked cluster and map the parent task of the selected cluster on a randomly chosen tile of the NoC architecture.

Step-6.
Map the remaining tasks (child tasks) of the selected cluster in the close vicinity of the parent task.

Step-7.
Select the cluster from the remaining which has a shared neighbor with already mapped cluster/s. If more than one cluster contains a shared neighbor, select the cluster with the highest communication density.

Step-8.
Map the task/s of a selected cluster, which has a direct link and highest communication requirement, close to the mapped tasks.

Step-9.
Repeat the Steps 7 and 8 until all the tasks of ATG are mapped to the NoC platform, NAG.

5.2. Mapping using ACA
The ACA-based approach requires initializing some parameters to control the iterative procedure of the algorithm. As the input to the ACA is the initial population , 
 the number of condors (population size),  the distribution parameter of exploration and intensification, and the percentage of change . The initial population  is generated with cluster-based method for a population size of 
. Initially, we set the value of , that is exploration is 50% of the population and the percentage of change to 10% by setting . ACA for application mapping is summarized as pseudo-code in Algorithm 1.

The fitness of each 
 is calculated using Eq. (4) and based on the fitness value, the population of condors is sorted from high to low. A highly ranked solution is assigned to 
. Subsequently, the average fitness  of the population is calculated as (9)
 

This  value will be used as a performance indicator to determine either there is an improvement in population or not. The value of quantities  and  is determined using the initial value of parameter . Based on these quantities, the number of condors in the initial population is determined to perform exploration or intensification.

In exploration, Steps 5–9 in cluster-based initial population is adapted to generate a new solution 
. For next generation, the number of condors with exploration status is set to perform the exploration to generate a new population. The fitness for each candidate in the new population is then calculated, and the population is sorted accordingly.


Calculate and update the states of the condor are performed using Algorithm 2. At this stage, the average fitness of the new population 
 is determined using Eq. (9) and compared with the average fitness of the previous generation . In our case, if the value 
 is greater than the value  of the previous generation, then , the distribution rate is revised in such a way to increase the quantity of exploration . The distribution parameter  is increased by adding the percentage of changing , which means the solutions with exploration status will increase with a fraction of 10% of the whole population, and the solutions with intensification status will decrease with a fraction of 10% of the whole population.

On the other hand, if the value 
 is obtained less than the value  of the previous generation, then the quantity of exploration  is decreased, and  is updated with 
. The distribution parameter  is decreased by subtracting the percentage of changing , which means the solutions with exploration status will decrease with a fraction of 10% of the whole population, and the solutions with intensification status will increase with a fraction of 10% of the whole population. The best condor 
 is updated with the solution having a top fitness value. The generation of new population and update states is repeated until the maximum number of iterations. Finally, 
 returns the best mapping solution (condor) for a particular application.

6. Results and discussions
In this section, the performance of the proposed ACA-based approach over performance parameters listed in Section 4 is estimated and evaluated against the existing mapping algorithms. NoCtweak simulator (Tran and Baas, 2012) have been explored in literature review and is utilized in this research work for analysis of applied mapping technique. It can give multiple performance constraints like communication bandwidth, latency, throughput, power, and energy using Eq. (1)–(6). NMAP is considered a standard technique for the comparative analysis of mapping algorithms. Normalization is used to structure all the data on a single scale. Therefore, the obtained power, energy, latency, and throughput results are normalized to the NMAP algorithm.

NMAP has already been embedded in NoCtweak for application mapping. We have implemented proposed ACA and CASTNET mapping algorithms in the open source NoCtweak simulator. The results are analyzed using build-in functions in the simulator. Intel Core-i7 platform with 8 GB RAM (main memory) and a clock frequency of 3.2 GHz is utilized to run the simulator. The NoC performance parameters are calculated using the commercial 65 nm CMOS standard cell library model embedded in Noctweak.

NoCtweak is a SystemC based open-source simulator, which provides flexibility of setting different network parameters (Tran and Baas, 2012) for various simulation environments. The Table 4 provides the default parameter setup utilized for a uniform simulation and fair comparison with the state-of-the-art research work. To analyze and evaluate the performance of the proposed algorithm, various experiments are conducted on real-world embedded benchmarks collected from literature, like VOPD, MPEG4, MWD, PIP, MMS, 802.11arx, CAVLC, DVOPD, TELECOM, 263encmp3dec, mp3encmp3dec, and 263decmp3dec available in NoCtweak. Table 5 shows the mesh sizes we have used against each embedded application. For simplicity, we have used a two-dimensional mesh topology.


Table 4. NoCtweak simulation setup.

Network type	2D mesh
Platform type	EMBEDDED
Packet delivery type	WITHOUT ACK
Packet inter-arrival time distribution	EXPONENTIAL
Fixed packet length	8 (flits)
Flit injection rate	0.1 (flits/cycle/node)
Embedded applications	MWD, MPEG-4, VOPD, MMS, 80211arx etc.
Embedded task mapping algorithm	ACA, NMAP, CASTNET, SBMAP, BEMAP
Router type	WORMHOLE-PIPELINE
Routing algorithm	XY DIMENSION-ORDERED
Arbitration policy	ROUND-ROBIN
Output channel selection	XY-ORDERED
Buffer size	8 (flits)
Inter-router link length	1000 (um)
Pipeline type	5
Pipeline stages	3
Input voltage	1 (V)
Input clock frequency	10 (GHz)
Operating clock frequency	10 (GHz)
Warm-up time	5000 cycles

Table 5. Mesh sizes for standard benchmarks.

Benchmark	No. of Tasks	Mesh Size (2D)
MWD	12	4 × 4
MPEG4	12	4 × 4
VOPD	16	4 × 4
MMS	25	5 × 5
802.11arx	24	5 × 5
CAVLC	16	4 × 4
Telecom	16	4 × 4
MP3encMP3dec	13	4 × 4
263encMP3dec	12	4 × 4
263decMP3dec	14	4 × 4

Fig. 6. Average power estimation (μ), normalized to NMAP.

6.1. Communication cost and computation time
This section includes various experiments on the proposed algorithm to compare and evaluate the performance over communication cost against different mapping algorithms. The Communication cost is the accumulative cost of the network for executing a particular application on the NoC platform after mapping and can be calculated using Eq. (4). Comparison of communication cost of the proposed algorithm with some existing heuristic and meta-heuristic algorithms is presented in Table 6.

The clustering-based technique is used to generate the initial population mainly aims to place highly communicating cores close to each other. This initial population which is the input to the proposed ACA-based approach provides the relatively pre-processed base to the algorithm. Moreover, the ACA-based approach controls the exploration rate based on the average fitness quality of the whole generation, which implicity generates new quality solutions as the process repeats iteratively. Additionally, the cluster-based mapping approach also provides foundation for fast convergence of the algorithm, making the proposed algorithm more efficient among algorithms of its category. The experimental results affirms that the proposed ACA-based approach performs better than the existing heuristic and meta-heuristics algorithms.


Table 6. Communication cost and percentage saving by ACA.

Communication cost (bandwidth × hop counts)
Mapping algorithm	MWD	MPEG-4	VOPD	MMS
Proposed AC algo.	1120	ACA Saving (%)	3567	ACA Saving (%)	4119	ACA Saving (%)	652637	ACA Saving (%)
ILP	1120	0.00%	3567	0.00%	4119	0.00%	—	—
NMAP	1312	17.14%	3672	2.94%	4265	3.54%	667628	2.30%
SBMAP	1280	14.29%	4474	25.43%	4125	0.15%	660931	1.27%
BB	1280	14.29%	—	—	4119	0.00%	671938	2.96%
BEMAP	1280	14.29%	3772.5	5.76%	4119	0.00%	664636	1.84%
CASTNET	1280	14.29%	3852	7.99%	4135	0.39%	672450	3.04%
BA	1122	0.18%	3567	0.00%	4119	0.00%	—	—
PSO	1120	0.00%	3567	0.00%	4119	0.00%	—	—
SCSO	1122	0.18%	3567	0.00%	4119	0.00%	—	—
Mapping algorithm	802.11arx	CAVLC	TELECOM	MP3encMP3dec
Proposed AC algo.	12733.7	ACA Saving (%)	6721	ACA Saving (%)	13054	ACA Saving (%)	17.021	ACA Saving (%)
ILP	—	—	—	—	—	—	17.021	0.00%
NMAP	16185.6	27.11%	6971	3.72%	14834	13.64%	18.141	6.58%
SBMAP	12749.8	0.13%	6803	0.13%	15050	15.29%	17.321	1.76%
BB	12733.7	0.00%	6778	0.85%	13660	4.64%	17.021	0.00%
BEMAP	12733.7	0.00%	—	—	13054	0.00%	17.021	0.00%
CASTNET	13384.8	5.11%	6789	1.01%	15478	18.57%	17.046	0.15%
BA	—	—	—	—	—	—	17.834	4.78%
PSO	—	—	—	—	—	—	17.021	0.00%
SCSO	—	—	—	—	—	—	17.021	0.00%
It can be concluded from the results that the proposed ACA-based approach has a cost saving of 17.14% compared to NMAP and 14.29% compared with SBMAP, BB, BEMAP, CASTNET, and 0.18% compared to BA and SCSO mapping algorithm for MWD embedded applications. For MMS application, ACA-based approach gives 2.30% over NMAP, 1.27% over SBMAP, 2.96% over BB, 1.84% over BEMAP, and 3.04% over CASTNET savings in communication cost. The likewise proposed algorithm performs 13.64% better than NMAP, 15.29% than SBMAP, 4.64% than BB, and 18.75% than the CASTNET algorithm in the telecom benchmark.

In general, on average ACA-based approach provides 9.62% savings over NMAP, 7.44% over SBMAP, 3.25% over BB, 2.70% over BEMAP, 6.32% over CASTNET, 1.24% over BA, and 0.04% over SCSO algorithm for all embedded applications listed in Table 6.

Moreover, the ACA-based approach provides optimum values against communication cost for each embedded benchmark like ILP but with minimum computation overhead. The computation time is the time required by an algorithm to compute its final output (best mapping solution). Table 7 represents the estimation of computation time in seconds for different application benchmarks.

Results show that the proposed algorithm also outperformed other nature-inspired algorithms such as BA, PSO, and SCSO. ACA consumes 159.3% less computation time for MWD, 146.4% for MPEG-4, 36.2% for VOPD, 143.2% for MP3encMP3dec, 156.3% for 263encMP3dec and 145.6% for 263decMP3dec in comparison with BA algorithm. Computation time savings of proposed algorithm for MWD, MPEG4, VOPD, MP3encMP3dec, 263encMP3dec, and 263-decMP3dec are 207.5%, 191.9%, 131.1%, 192.8%, 248.1%, and 233.1% respectively, with respect to PSO. Similarly, ACA outperforms SCSO by 78.9%, 69.3%, 36.2%, 63.6%, 66.9% and 57.9% respectively, for the above mention embedded applications.

We have also validated the flexibility of the proposed ACA based approach by considering randomly generated benchmarks of larger size. The random graphs are generated using TGFF tool (Dick et al., 1998) for 64 and 128 cores. The communication traffic among the cores is varied from 50 to 1000 MB/s for some graphs and from 20 to 150 MB/s for others. The degree of nodes varies between 1 to 8 for incoming and outgoing traffic. Moreover, we have utilized 8  8 mesh size for graphs with 64 cores and 8  16 mesh size for graphs with 128 cores. Table 8 represents the results of the proposed algorithm for randomly generated graphs.


Table 7. ACA saving in computation overhead.

Benchmark	Computation time (s)	Saving in computation time (%)
PSO	BA	SCSO	ACA	Over PSO	Over BA	Over SCSO
MWD	3.432	2.894	1.996	1.116	207.5	159.3	78.9
MPEG4	3.465	2.925	2.010	1.187	191.9	146.4	69.3
VOPD	3.785	2.231	2.231	1.638	131.1	36.2	36.2
MP3encMP3dec	3.194	2.653	1.785	1.091	192.8	143.2	63.6
263encMP3dec	3.185	2.345	1.527	0.915	248.1	156.3	66.9
263decMP3dec	3.188	2.350	1.511	0.957	233.1	145.6	57.9
6.2. Power
NoCtweak simulator is used to estimate the power and energy estimation. The simulator is equipped with standard data of CMOS cell library to calculate the power using Eq. (2). Synthesized RTL level data of routers components are embedded in NoCtweak. NoCtweak simulator uses this data to calculate power (Tran and Baas, 2012).

Power comparison of proposed ACA-based approach with NMAP, SBMAP, BB, BEMAP, and CASTNET mapping algorithms is shown in Fig. 6. Results indicate that the ACA-based approach comparatively consumes less power than existing algorithms for different embedded applications. On average, ACA consumes 8.70%, 1.82%, 8.09%, 1.59%, and 8.51% less power than NMAP, SBMAP, BB, BEMAP, and CASTNET algorithms, respectively. In NoCtweak, the performance assessment of NoC systems is estimated according to the activities of different components in the router. Usually, the router’s energy and power consumption is estimated on the active percentage of router components while routing the packets on the network. The power consumption of the network increases as the packets travels longer in the network. The proposed ACA-based approach provides optimum placement of tasks in the network, which reduces packet traversed paths. Hence, it has significant effects on power and energy consumption.

6.3. Energy
The energy estimation of the network is calculated using Eq. (3). In NoCtweak standard CMOS Cell library data is utilized to estimate the energy of the system. Like power, energy is also dependent on the active percentage of the components of the network. Therefore, the optimal placement of tasks will also reduce the energy consumption of the system.

Energy estimation of seven different embedded benchmarks is shown in Fig. 7. It can be concluded from the results that ACA has better performance in network energy than some existing heuristic algorithms. Overall, the average energy consumption of the proposed algorithm is 8.85% less than NMAP, 2.54% less than SBMAP, 8.22% less than BB, 2.32% less than BEMAP, and 8.16% less than the CASTNET algorithm.

6.4. Latency
Latency is the time a packet takes between the initiation at the source and complete reception at the destination. It has a dominant effect on network traffic and is also considered to be an important constraint in this research. In Noctweak, latency calculation is performed using Eq. (1). The packet latency also includes the time when a packet waits at the source queue due to network congestion. The proposed ACA algorithm provides an efficient mapping solution with minimal path-routing that reduces packet traversed path and network congestion. Hence, it shows reasonable improvements in average network latency. The average network latency of the proposed algorithm in comparison with existing heuristic algorithms is demonstrated in Fig. 8.

The results indicate that, the average improvement in network latency by ACA over NMAP is 1.49%, over SBMAP is 1.22%, over BB is 0.67%, over BEMAP is 1.03% and over CASTNET is 1.53%. It can be concluded from results that ACA outperforms some existing algorithms in network latency.

6.5. Throughput
Throughput is the total number of packets received by the network in a unit of time. It is also an important constraint in NoC system performance. An efficient mapping approach can yield in high throughput value. Like latency, throughput is also dependent on the packet traversed path. The longer the packet travels in the network, the more it will degrade the throughput. The proposed ACA based approach maps heavily communicating tasks in close vicinity, which eventually reduces the packet traversed path in the network. Hence, it provides high average network throughput.

In NoCtweak, Eq. (6) is used to calculate the average network throughput of the system. We have compared the throughput of the proposed algorithm with existing heuristics for standard applications with fixed injection rates. Fig. 9 shows the average network throughput of different mapping algorithms normalized with NMAP. It can be observed from the results that, on average improvement in network throughput of ACA over NMAP is 2.02%, over SBMAP is 0.5%, over BB is 4.31%, over BEMAP is 0.25% and over CASTNET is 0.74%. The proposed ACA technique gives better performance than existing algorithms in terms of throughput.

All the results mentioned earlier are analyzed on standard 2-D mesh configurations for NoC which shows that the proposed ACA performed well compared to state-of-the-art algorithms.


Table 9. Proposed algo. on standard mesh vs exact mesh.

Benchmark	Standard 2-D mesh	Exact 2-D mesh
Mesh size	Comm. cost 	Power 	Energy 	Mesh size	Comm. cost 	Power 	Energy 
MPEG-4	4 × 4	3567	675366	174.87	4 × 3	3633	614583	159.37
MWD	4 × 4	1120	622062	101.78	4 × 3	1216	553635	90.58
802.11arx	5 × 5	12733.7	623155	185.11	6 × 4	12733.7	608691	180.91
263encMP3dec	4 × 4	230.407	678357	130.27	4 × 3	230.417	594618	115.64
MP3encMP3dec	4 × 4	17.021	171826	208.19	7 × 2	17.046	161086	195.17

Fig. 9. Average throughput (), normalized to NMAP.

6.6. ACA over exact mesh configuration
In addition to standard mesh size, we have also evaluated our proposed algorithm on exact 2-D mesh configuration. In an exact mesh configuration, the number of routers in rows and columns is not equal. For example, MWD and MPEG-4 have 12 tasks, requiring 4  4 mesh sizes for standard mesh configuration. Consequently, this will cost four extra routers in the platform and will significantly impact the power and energy consumption. However, we have experimented with the exact mesh size of 4  3 for MWD, MPEG-4, and 263encMP3dec. For 802.11arx, we have utilized 6  4 mesh size and 7  2 for MP3encMP3dec benchmarks. As a result, the power and energy consumption is reduced with an optimal or near to optimal communication cost.

Table 9 represents the comparative analysis of the proposed ACA algorithm for standard mesh with the exact mesh configurations. The result shows that the proposed algorithm also performed well in exact mesh configuration and provides optimal or near to optimal results in terms of the communication cost. Also, the results indicate notable improvements in power and energy consumption for exact mesh size if utilized in NoC-based systems.

7. Conclusion
In this research, we have presented a nature-inspired Andean Condor algorithm for application mapping on NoC-based systems. ACA algorithm is based on the geographical search behavior of Andean condor for its food in different seasons of the year. This algorithm dynamically tunes the balance between global and local search, making it effective in large search space optimization problems. The number of condors that may participate in global and local search is purely dependent on the average fitness value of the population in the previous generation. This procedure iteratively improves the objective function based on these values. A clustering-based technique is employed for the initial population, which provides the main algorithm a head-start. Then the main ACA algorithm is applied to achieve the optimal performance. The clustering-based technique provides the relatively pre-processed base to the main algorithm, which helps in the fast convergence of the algorithm.

The results affirms that the proposed algorithm provides an optimal mapping solution for real-word embedded benchmarks for 2-D NoC systems with low computational overhead. The comparative analysis shows that the proposed algorithm offers the best results in communication cost, power, energy, and latency compared to the existing heuristic algorithms. The proposed algorithm achieves up to 27.11% improvement in communication cost and provides 78.9% savings in computational overhead.

In the proposed algorithm, we have placed the tasks with higher communication volume in the near vicinity, which may introduce congestion in particular links depending on the volume of data exchange. In future consideration, this shortcoming can easily be conquered by using an adaptive congestion-aware routing algorithm with the proposed method. Also, the proposed ACA-based approach can be extended for other standard topologies like Torus, C-Mesh, and 3-D mesh.