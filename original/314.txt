A mobile ad hoc network is an infrastructure-less network composed of autonomous and mobile hosts, which communicate only through wireless links. One of the fundamental communication operations in these networks is broadcast—a process of sending a message from one host to all hosts in the network. However, it is important for any broadcast protocol to provide some deterministic delivery guarantees, all the more so, if we make allowances for host failures. For mobile ad hoc networks, it is possible to provide such deterministic guarantees under the assumption of the network liveness property, which, informally, ensures that no host is permanently isolated. Therefore, in this paper, we propose uniform and regular reliable broadcast protocols, and discuss the implementation of best-effort reliable broadcast, for mobile ad hoc networks with the network liveness property. The proposed protocols facilitate concurrent message dissemination, but their time requirements are independent of the total number of messages that each node can start disseminate concurrently, and hence, of the total number of messages that can be disseminated concurrently in an ad hoc network by all nodes. For the proposed protocols, we prove analytically their correctness, and evaluate experimentally their efficiency in simulation tests. The obtained results show that the concurrent dissemination parameters of the proposed uniform and regular reliable broadcast protocols may be adjusted in actual ad hoc networks to improve broadcast efficiency.


Keywords
Mobile ad hoc networks
Reliable broadcast protocols
Protocol efficiency


1. Introduction
Mobile ad hoc networks (abbreviated to manets) are composed of autonomous and mobile hosts (or communication devices), which communicate through wireless links without any additional network infrastructure or central points Aggelou, 2004, Barbeau and Kranakis, 2007, Boukerche, 2008, Brzeziński et al., 2006, Misra et al., 2009, Murthy and Manoj, 2004, Perkins, 2001, Tonguz and Ferrari, 2006. The distance from a transmitting host at which its wireless signal strength remains above the minimal usable level is called transmission (or wireless) range of that host. Therefore, each pair of such devices, between whom the distance is less than their transmission range, is referred to as neighboring hosts and the hosts are able to communicate directly with each other. In mobile ad hoc networks, hosts are free to move and organize themselves arbitrary, so the resulting network topology may change rapidly and can get partitioned (i.e., disconnected into isolated subnets) and reconnected unpredictably. The absence of any centralized coordination is the reason why network operations in manets are performed in a distributed, that is decentralized, manner.

Broadcast is the process of sending a message from one host to all hosts in the network, and, to quote Lipman et al. from their chapter on broadcast protocols in [30], “it is a fundamental operation for communication in ad hoc networks” as it can be used for updating network information or for discovering and maintaining routes to support other multi-hop communication primitives. Since broadcast is also a basic communication requirement to construct other and more complex distributed algorithms, like consensus or coherency protocols, it is important for any broadcast protocol to provide some message delivery guarantees. Therefore, as in almost any other network or distributed protocol, a key issue consists here in finding concepts and solutions that are resilient enough to allow reducing, or even eliminating, the underlying uncertainty [2]. In mobile ad hoc networks, this uncertainty is mainly caused by highly dynamic network topologies and limited resources, like power supply, which may lead to host failures and temporal or even permanent disconnections resulting in the same effects as failures—a permanently disconnected host cannot take part in the processing just as a faulty one. For that reason, providing strong, i.e., deterministic, delivery guarantees in such changeable environments can be hard or even impossible to achieve Gilbert and Lynch, 2002, Lynch and Shvartsman, 2003. As a result, looking across all the research, one finds that heuristic broadcast protocols with only probabilistic guarantees have been mostly proposed for use in manets Borbasb and Jennings, 2002, Chandra et al., 2001, Jüttner and Magi, 2005, Lin and Gerla, 1997, Lou and Wu, 2002, Luo et al., 2003, Stojmenović et al., 2002, Wu, 2003. Most recently, the problem of broadcasting in manets has been investigated, i.a., in Carvajal-Gómez et al., 2019, Sanzida et al., 2020, Sharma and Vij, 2017. The authors in [38] have proposed a new protocol for the optimization of redundant message transmissions during broadcasting in wireless ad hoc networks. In [13], the design and implementation of so-called emergent overlays for efficient broadcast in heterogeneous manets have been proposed. Additionally, other research currently conducted, e.g., in Kausar et al., 2020, Niu et al., 2019, Song et al., 2018, Zahid et al., 2018, Zeng et al., 2017, investigates the use of various topology control methods to maintain network connectivity and to improve the performance of message transmission. A comprehensive survey of broadcast solutions for mobile ad hoc networks is presented, among others, in Misra et al., 2009, Sharma and Vij, 2017. On the other hand, however, if it can be assumed that a group of collaborating hosts in an ad hoc network can be partitioned and that partitions heal eventually, it is then possible to develop broadcast protocols with deterministic guarantees, even if hosts are unreliable. Informally, the assumption that any partition is not allowed to be permanently isolated is called the network liveness property Pagani and Rossi, 1999, Vollset, 2005, Vollset and Ezhilchelvan, 2005.

The deterministic guarantees of broadcast protocols are specified by broadcast communication abstractions, which differ according to the reliability of the dissemination in the case of host failures Cachin et al., 2011, Raynal, 2010. The weakest broadcast abstraction, best-effort reliable broadcast, puts the burden of ensuring reliability on senders, as it guarantees that all correct hosts (i.e., hosts that do not fail) deliver the same set of messages provided that the senders are correct. A stronger form of reliable dissemination is ensured by regular reliable broadcast that allows correct hosts to agree on the set of messages they deliver, even when the senders of these messages fail during dissemination. Finally, uniform reliable broadcast defines that the set of messages delivered by faulty hosts is always a subset of the messages delivered by correct hosts.

The protocols for manets with the network liveness property proposed till now guarantee, unconventionally, that only at least an arbitrary majority of operative hosts (i.e., hosts that have not failed) receives each broadcast message Vollset, 2005, Vollset and Ezhilchelvan, 2005. This means that the guarantees of these protocols are different from those of uniform, regular, and best-effort reliable broadcasts, and in [4], a modification of one of these protocols has only shortly been mentioned of how to ensure the properties of regular reliable broadcast. Moreover, in all these protocols, it is assumed that the minimum time of direct connectivity between any neighboring hosts is much longer than maximum message transmission time. This assumption covers, however, the dependence of the required minimum time of direct communications on some system parameters. As it has been shown and proved Brzeziński et al., 2012b, Brzeziński et al., 2012c, the minimum time of direct connectivity between hosts, and thus the correctness of all those protocols, depends on the total number of hosts in a network and on the total number of messages that can be disseminated by each host concurrently. This dependence is a significant drawback that has been partially overcome in [8], where the authors have shown a protocol for which the minimum time of direct connectivity is independent of the total number of hosts, but at most one message can be disseminated by each node concurrently.

The main contribution of the paper is the proposal of new uniform and regular reliable broadcast protocols for mobile ad hoc networks with the network liveness property, that are significant and important extensions of one showed in [8], enabling concurrent dissemination of many messages by each node. Moreover, we analytically prove the correctness of each of the proposed protocols. Finally, the protocols are evaluated through simulation experiments that show how the number of concurrently disseminated messages influences the protocols’ efficiency measures: the broadcast time, reachability of messages and the total number of message transmissions.

The remaining part of this paper has the following structure. First, a formal model of mobile ad hoc networks is explicitly defined in Section 2. Next, in Section 3, following Vollset, 2005, Vollset and Ezhilchelvan, 2005, we formally define the network liveness property and we present definitions of best-effort, regular, and uniform reliable broadcasts in Section 4. Section 5 presents uniform reliable broadcast protocol for ad hoc networks with the network liveness property, and Section 6 introduces regular reliable broadcast protocol and studies implementation of best-effort reliable broadcast for such networks. For the protocols we present proofs of correctness. In Section 7, we show an experiment evaluating efficiency of the presented protocols. It contains description of the simulator software, the methodology, and the analysis of the obtained outcomes. Some further research directions are discussed in Section 8, where the paper is also shortly concluded. A list of symbols used in the paper is given in Table 2, for ease of reference.

2. System model
Throughout this paper, a mobile ad hoc network is considered. The units that are able to perform computation in the network are abstracted through the notion of a node (or host), and a link abstraction is used to represent the communication facilities of the network. Thereby, the topology of the mobile ad hoc network is modeled by directed connectivity graph , where  is a set of all nodes, 
, and  is a set of links between neighboring nodes. Namely, if node 
 is within the transmission range of node 
, then there is ordered pair 
 in the  set. As the nodes are free to move, set  changes with time, and thus graph  can get disconnected and reconnected. Disconnection fragments the graph into isolated sub-graphs called components (or partitions of the network), such that there is a path in  for any two nodes in the same component, but there is no path in  for any two nodes in different components. It is also presumed that the considered network is composed of  uniquely identified nodes, and each node is aware of the number of all nodes in the  set.

To describe processing abstractions of nodes, an asynchronous event-based composition model, adopted from [12], will be used. In this case, each node runs a set of software components called modules in the form of state machines, whose transitions are triggered by the occurrence of events. A module is identified by a name, characterized by a set of properties, and provides an interface as a list of events that are accepted (requests) and produced in return (indications). Events may carry information of any type in one or more attributes, and they are denoted by: 
. It is also assumed that there is one special event  which is generated automatically when a module is created.

Every event is processed through a dedicated handler and may result in creating new events. Event handlers are presented in the form of algorithms, and a pseudo-code notation is used to describe them without any implementation-related details for the sake of the concise presentation. It is assumed that events are processed in the same order they were triggered, and each event triggered on a module is eventually processed (unless the host crashes) in a mutually exclusive (sequential) way (i.e., atomically).

Modules can be composed to build layered software stacks (at each host) with application layer on the top, and networking layer at the bottom. Adjacent modules, within the same stack, communicate with each other through the exchange of events.

In the network considered, we assume that a node is either faulty or correct. A faulty node crashes (stops its processing) at some moment without any warning (silent crash failure model, [15]). Precisely, when a node crashes, all its components fail at the same time and, henceforth, none of its modules will either trigger or accept any events. A correct node does not crash until the processing ends, and a node that has not crashed is said to be operative. We do not assume the availability of any mechanism that provides information about node failures (i.e., a failure detector), but it is presumed that the number of faulty nodes is bound to some known value , such that: 
 
. Thus, the  set contains at least  correct nodes and 
 
.

In ad hoc networks, nodes communicate with each other only by sending messages (message passing): Any node, at any time, can initiate the dissemination of message , and all nodes that are neighbors of the sender, at least for the duration of that message transmission, can receive the message.

To simplify description, and without loss of generality, let us assume, similarly as it is in Vollset, 2005, Vollset and Ezhilchelvan, 2005, that  is the maximum time required to resolve collisions and transfer a message between neighboring nodes at the mac layer. In this context, we introduce the abstraction of a reliable channel [12], as presented by Module 1. The interface of this module consists of two events: a request event, used to send a message, and an indication event, used to receive a message. Reliable channels neither lose (RC1 reliable transmission property), duplicate (RC2 no duplication property), nor create (RC3 no creation property) messages.

More formally, the reliable channels can be modeled using the concept of a dynamic set function [25]. Let 
 be a product set of 
, and 
 be the set of all subsets (power set) of 
. Then, dynamic set function 
 of node 
 is defined as follows:

Definition 1

Dynamic set function 
 of node 
 in some time interval 
 is a function: 
, such that 
 is a set of all reliable channels of 
 at time .

Finally, we introduce reliable connectivity as follows Vollset, 2005, Vollset and Ezhilchelvan, 2005:

Definition 2

Let , where  is an application-specified parameter. Then, two operative nodes 
 and 
 are said to be reliably connected at  iff: 
.


3. Network liveness property
Considering an ad hoc network that was initiated at 
, let  be a set of all correct nodes of . Then, let  be any non-empty subset of  at some time 
, and 
 
 be a complementary set of  in  (
 
 contains all correct nodes at time  that are not in ). Then, the network liveness property is specified as follows Vollset, 2005, Vollset and Ezhilchelvan, 2005:

Definition 3

An ad hoc network that was initiated at 
 satisfies the network liveness property iff: 
 

Informally, the network liveness property prevents the occurrence of permanent partitioning by requiring that reliable connectivity must emerge between some nodes of every non-empty set  and its complementary set 
 
 within some finite, but unknown, amount of time horizon  after each . The rationale behind this property, which legitimizes its assumption, is that nodes performing common processing should strive to connect with each other in order to be able to exchange messages. To give a better intuition for the concept of the network liveness property, we illustrate it in Example 1.

Example 1

Let us consider an ad hoc network composed of five correct nodes, 
, which, at some time 
, create three partitions: first consisting only of node 
, second consisting of nodes 
, and third consisting of nodes 
 and 
. The components considered in this example are depicted in Fig. 1. Say that nodes 
 and 
 never move, and hence are in isolated partitions (which is disallowed by the network liveness property). However, say also that node 
 moves across the network and reliably connects with a node in the second partition (between 
 and 
), and next with a node in the third partition (between 
 and 
). If 
 and 
, then the network fulfills the network liveness property at 
 after 
 seconds despite not being in one component. This results from the movement of node 
, which connects over time separated partitions, and as a consequence all possible  sets and their complementary sets 
 
 in . ■

4. Reliable broadcast abstractions
The communication operations that are the subject of this study are reliable broadcasts, which allow us to disseminate messages within a group of hosts. Guarantees of reliable broadcast protocols are specified according to the reliability of the dissemination in the case of node failures by reliable broadcast abstractions, and a few such specifications have been proposed so far Cachin et al., 2011, Hadzilacos, 1985, Hadzilacos and Toueg, 1993, Raynal, 2010. The basic three abstractions related to the examined silent crash failure model are: best-effort reliable broadcast, regular reliable broadcast, and uniform reliable broadcast. The importance of these abstractions is best expressed by the fact that protocols, which implement them, are used as a communication foundation to construct other, and often more complex, distributed algorithms, like consensus, coherency, or mutual exclusion protocols Cachin et al., 2011, Lynch, 1996, Santoro, 2006.

The weakest broadcast abstraction, best-effort reliable broadcast (brb), puts the burden of ensuring reliability on senders (or originators), as it guarantees that all correct nodes deliver the same set of messages provided that the senders are correct. The abstraction is formally defined in Module 2, which contains two events: a request event, used to broadcast a message, and an indication event, used to deliver a broadcast message. Best-effort reliable broadcast neither duplicates (BRB1 no duplication property) nor creates (BRB2 no creation property) messages, and requires that if a correct host broadcasts message , then every correct host eventually delivers  (BRB3 best-effort validity property). Accordingly, no message delivery guarantees are offered if the sender crashes.

A stronger form of a reliable dissemination is ensured by regular reliable broadcast (rrb) that allows correct nodes to agree on the set of messages they deliver, even when the senders of these messages crash during the dissemination. Regular reliable broadcast is characterized by four properties, which are depicted in Module 3. Two of these properties, RRB1 no duplication and RRB2 no creation, are the same as before, but they are repeated here for completeness. However, in contrast to the best-effort validity, with the use of a regular reliable broadcast protocol, if correct host 
 broadcasts message , then 
 eventually delivers the message (RRB3 validity property), and further, if some message  is delivered by any correct host, then  is eventually delivered by every correct host (RRB4 regular agreement property).

We observe that the combination of the RRB3 validity and RRB4 regular agreement properties also guarantees that if a correct node broadcasts message , then every correct host will eventually deliver , that is, the BRB3 best-effort validity property. Hence, regular reliable broadcast fulfills the requirements of best-effort reliable broadcast, and this is the reason why the former is termed to be stronger than the latter.

Finally, uniform reliable broadcast (urb) defines that the set of messages delivered by faulty hosts is always a subset of the messages delivered by correct hosts. Thus, the only difference between regular and uniform reliable broadcasts relates to the agreement property, as depicted in Module 4. In this case, the URB4 uniform agreement property states that if some node, whether correct or faulty, delivers message , then  is eventually delivered by every correct node in a network. Thereby, the property also satisfies the RRB4 regular agreement property, so a uniform reliable broadcast protocol fulfills the requirements of regular reliable and best-effort reliable broadcasts. Consequently, uniform reliable broadcast is the strongest form of the three reliable broadcast abstractions.

5. Uniform reliable broadcast protocol
The Uniform Reliable Broadcast Protocol (or urb protocol) implements the broadcast properties described in Module 4 and requires periodical message transmissions. The urb protocol uses sequence numbers combined with host numbers so as to uniquely identify each message and to impose an order of message sending and receiving Lamport, 1978, Lynch, 1996, Raynal, 1992.

In the urb protocol, every message  is always transmitted by each 
 in packets of the following structure: 
, where: 
 is an identifier of the originator of ,  is a sequence number value associated with  by 
, and 
 is a rectangular array of the size of . The array indicates the knowledge of node 
 on the messages received by other hosts, i.e., 
 means that the sequence number value of the last message received by 
 and originated by 
, according to the knowledge of 
, is  (similarly as it is in the case of matrix or array clocks, as described, among others, in [35]).

The urb protocol is presented in Algorithm 1 and it operates in the following manner.

At first, all variables that are maintained by each 
 are initialized in the  event (lines: 1–7): 
 is a set of records of messages received by 
, 
 is the knowledge array of 
, and 
 is the sequence counter of 
. 
 is a delivery vector of the size of , specifically 
 indicates that the sequence number value of the last message delivered by 
 and originated by 
 is . Set 
 is updated whenever 
 receives a message from the reliably connected host 
 on the basis of the received 
 array. If node 
 has message  originated by some 
 such that: 
, then  is added to the 
 set. In this way, the set contains messages that have not so far been received by 
 with respect to sequence number values associated with them (and the set may remain empty if 
 has no such messages). The 
 set is used to make decisions about which messages should be selected for transmission after each  seconds, that is, the time of periodic transmissions.

Upon  event (lines: 8–13), originator 
 of broadcast message  increments its sequence counter 
 (line 9) and adds , along with its identifier and the current sequence counter value, to the 
 set (line 12). The 
 knowledge array is also updated to be equal to the current sequence counter value in position 
 (line 11).

Once every  seconds, each 
 selects at most  messages, that is, the maximum number of messages that a node transmits within the time of periodic transmissions, to send based on their sequence number values. The messages which have the smallest value of their sequence numbers  are chosen. If there are more than one messages with the same sequence number values, the message that has been originated by a node with the smallest identifier number is selected. Namely, for any two messages:  originated by 
 and 
 originated by 
,  will be selected for transmission before 
 provided that 
, or 
 and . Let us denote this by 
. This relation is transitive, antisymmetric, and total, hence places a total order on the set of all broadcast messages in the system Lamport, 1978, Lynch, 1996.

For the sake of the concise presentation, we assume function 
 that, given set  of records 
, provides record 
 such that:

.

Thus, when the transmission of  messages is expected (lines: 14–31), at first, three local sets are initialized (lines: 15–17): 
 and 
 to contain all the records from the 
 set, and 
 to be the set of all the records of 
 that are not in the 
 set (recall that 
). If 
 has messages that have not been received by its neighbor(s), according to the received knowledge array(s), messages to be transmitted are selected from the 
 set (lines: 22–25). In this way, a reliably connected host is able to receive a new message. If set 
 is empty, messages to be transmitted are picked out from the 
 set (lines: 26–29). In both cases, an appropriate message is chosen with the use of the 
 function (lines 23 and 27). At last, if 
 has no messages to be sent, its 
 array is sent (lines: 18–19) to allow neighboring nodes to update their knowledge arrays. At the end of this event, the 
 set is cleared (line 30), as it must be updated anew in every -second period.

Next, whenever node 
 receives a message transmitted by some 
 and originated by some 
 (lines: 32–37), it first checks whether the message has yet been received, or whether it is a new one. This is accomplished by comparing sequence counter value  of the received message and local 
 knowledge array in position 
 (line 33). Condition 
 is used to ensure that messages are always received in order of their sequence counter values. In an actual implementation, the received messages for which 
 holds can be stored in an additional set and delivered locally, by triggering the  event, when the condition in line 33 is met (simplifying notation, this step is omitted in Algorithm 1). An example of a situation in which host 
 can receive such a message is when it reliably connects with nodes at the time when they are already transmitting messages based on their  sets, and thus have not yet the possibility to take into account the knowledge array of 
. Nevertheless, if the received message is a new one, 
 updates its knowledge array in position 
 to be equal to the sequence counter value of the received message (line 34) and adds the message to its 
 set (line 35).

After that, all the received messages in the 
 set are considered for delivery in the  event (lines: 41–56). First, 
 updates its own 
 knowledge array by setting the maximum value of its 
 and the currently received 
 arrays in each position (line 42). This allows nodes to upgrade their knowledge on the messages received by other hosts. Next, messages from the 
 set are examined in order of preceding relation 
 (lines: 43–54), and for each message the number of nodes that have received it is counted on the basis of local 
 knowledge array (lines: 45–47). If some message 
 has been received by at least  nodes and if it has not yet been delivered by 
, according to the 
 delivery vector (line 48), the message is delivered (line 50), and vector 
 is updated in position 
 to be equal to sequence counter value  (line 49). In this way, when 
 delivers message , it is guaranteed that the message is received by at least one correct host. Consequently, by the method used, messages originated by the same host are received and delivered in the first-in first-out order. Furthermore, if  has been received by all  hosts, its transmission will no longer be necessary, so it can be removed from the 
 set and the 
 set if necessary (lines: 51–54), and this may occur only if all the  nodes have been operative. At the end, the 
 set is updated to include messages that have not yet been received by node 
 with regard to the received 
 array, but to preserve message sending order, only messages for which: 
 holds are included, if any (line 55).

Finally, if 
 receives a packet containing only the 
 knowledge array (lines: 38–40), it triggers the  event to survey and updates its 
 and 
 sets as above.

5.1. Time requirements of the urb protocol
The minimal time requirements of message dissemination and reliable connectivities, required by the urb protocol to operate correctly, are as follows: (i) : to ensure that messages are not sent until the previous transmissions are completed; (ii) : to ensure that each reliably connected node is always able to receive  messages and send  messages within next -second period.

Example 2

Let us analyze the reliable connectivity between two operative nodes, 
 and 
, executing the urb protocol as shown in the space–time diagram in Fig. 2, where we assume that , , and . The minimal value of the time of periodic transmissions is , but in this example, we use a greater value  for the Figure clarity. In the space–time diagram, the horizontal lines represent the progress of the execution of the urb protocol at both nodes, and the slant arrows indicate message transfers.

Let us suppose that at 
 node 
 has only one message: 
, whereas 
 has two messages: 
; and say that 
. Obviously, in such a case: 
 (recall that messages are always received in order of their sequence counter values).

The two nodes reliably connect just after 
 sent its message at 
 (first arrow in the Figure). The message, at this time, cannot be received by 
. At 
, host 
 transmits a packet with message , which is received by 
 before 
 (second arrow in the Figure). Because host 
 has no message which has not been received by 
, according to the received 
 knowledge array, its 
 set remains empty and, at 
, 
 again transmits a packet with  (third arrow in the Figure). This time, the packet is received by node 
 just after 
. Since the node has a message that has not been received by neighboring node 
, it includes the 
 message in its 
 set 
, and after next the  seconds, at 
, it sends a packet containing message 
 (sixth arrow in the Figure), which is received by 
 before 
. ■

As it has been shown, the time requirements guarantee that whenever any nodes experience reliable connectivity, at least one of them is always able to receive a new message.

5.2. Correctness of the urb protocol
Given the fact that the correctness of any uniform reliable broadcast protocol is specified by two safety properties (URB1 no duplication and URB2 no creation) and two progress properties (URB3 validity and URB4 uniform agreement), the succeeding theorem regarding the Uniform Reliable Broadcast Protocol is now defined, and then proved to be true:

Theorem 1

If  and , then with the use of the URB protocol, the URB1 no duplication, URB2 no creation, URB3 validity and URB4 uniform agreement properties are met.

Proof

Assuming  and , let us consider an execution of the urb protocol in an ad hoc network of  hosts, 
, that was initiated at 
, and let 
 
.

URB1 no duplication property: Every message , originated by any 
, has associated sequence number value  that is equal to the value of the 
 counter at the time when broadcast of  was initiated. Because counter 
 is incremented whenever 
 initiates broadcast of a new message, it uniquely identifies each message originated by 
.

Before any 
 delivers , it checks whether 
 (line 48 in Algorithm 1), and if  is delivered, the 
 delivery vector is set to be equal to the  value in position 
. Hence, once  is delivered by 
, it will not be delivered again by 
.

URB2 no creation property: Each host 
 delivers only messages that are contained in its 
 set. Any message  can be added to the 
 set only in two ways: either upon the  event (local messages) or upon the  event (received messages).

Since each 
 periodically, every  seconds, transmits messages only from its 
 set (we notice that

), therefore, the URB2 no creation property is simply preserved from the RC3 no creation property of the underlying reliable channels.

URB3 validity property: The URB3 validity property requires that if any correct host 
 broadcasts message , then  is eventually delivered by 
. Say then that some correct node 
 initializes broadcast of message  at 
 by triggering the  event. Host 
 will deliver  only if the message is received by at least  nodes, according to its 
 knowledge array.

Let  be a set of all correct nodes that have  at some time 
, that is: 
, and let us assume that 
 
 (otherwise, simply all correct nodes have ). We observe that if 
, then  is a singleton: 
, and by the assumption that 
 is correct, the set will not be empty until  has been received by all nodes.

Whenever any node 
 of  and any node 
 of 
 
 reliably connect, which must occur in accordance with the network liveness property, node 
 receives at most  messages and  is one of them or not if for each received message 
: 
. But in the latter case, host 
 also updates its 
 knowledge array for the sequence number values associated with the received messages and transmission of those messages to 
 will not occur any more; precisely, the messages will not be included in the 
 set of any 
 based on the received 
 knowledge array.

Since the number of correct nodes and the number of messages such that: 
 is finite, and since no correct node can be permanently isolated for any , therefore, as the execution progress, eventually  will be selected for transmission to each 
 of 
 
 when it experiences reliable connectivity with some 
 of .

Hence, message  will eventually be received by at least  correct hosts. As a result, eventually every correct node 
 will update its knowledge array, such that: 
.

Now, let us denote by 
 the th column vector of knowledge array 
 of each 
 and choose 
 to be a subset of all those correct nodes, whose  vectors are identical with the 
 vector of host 
, including 
. Precisely, for every correct node 
: 
≔
. By the nature of the execution considered, it is possible 
 to be a singleton: 
.

On account of the network liveness property, some nodes of the 
 set and its complementary set 
 
 must eventually experience reliable connectivity after each time moment. On each occurrence of a reliable connection between any nodes of the 
 and 
 
 sets, the nodes exchange their knowledge arrays, and thus, increase the number of positions in their  vectors, whose values are equal to (or higher than) .

Since there are at least  correct nodes, and because no correct node can be permanently isolated after each time moment according to the network liveness property, eventually every host 
 will update at least  positions in its 
 vector to be equal to (or greater than) . As a consequence, every correct node, including the host 
, will eventually deliver .

URB4 uniform agreement property: With respect to the URB4 uniform agreement property if some node, whether correct or faulty, delivers message , then  is eventually delivered by every correct node in a network. So, let 
 be some host that delivers message  originated by host 
. To do so, 
 has to have at least  values that are equal to (or greater than)  in the th column of its 
 knowledge array, and it means that a majority of hosts has received . Hence, the assumption 
 
 implies that at least one correct node must have received message .

As it has been shown above, if any correct node 
 has message  in its 
 set, the message will be received and delivered by all correct nodes. □


6. Regular reliable broadcast protocol
The Uniform Reliable Broadcast Protocol, introduced in Section 5, provides strong delivery guarantees, but at the cost of delaying delivery of each message until it is assured that the message has been received by at least a majority of hosts. In many practical applications, however, such strong properties may not be necessary and protocols with weaker guarantees can be used instead [4]. All the more so if messages could be delivered without the delay required to ensure uniformity. These issues may be addressed by implementing regular reliable or best-effort reliable broadcasts, as defined in Module 3 and Module 2, respectively. Therefore, in this Section, we propose Regular Reliable Broadcast Protocol (or rrb protocol) based on the solutions from the previous Section. The protocol offers faster message delivery because it fulfills the weaker, when compared to URB4 uniform agreement, RRB4 regular agreement property. At the end of this Section, we also address the problem of implementing even weaker, best-effort reliable broadcast for mobile ad hoc networks with the network liveness property.

The main difference between uniform reliable and regular reliable broadcasts concerns the agreement on the delivery of messages originated by faulty hosts. Namely, the URB4 uniform agreement property requires that the set of messages delivered by faulty nodes must be a subset of the messages delivered by correct hosts, which is not claimed by the RRB4 regular agreement property, where messages delivered by faulty nodes may not be delivered by correct hosts. Although, both, uniform and regular reliable broadcasts, require that the sets of messages delivered by correct nodes must be equal. In the context of the broadcast protocol proposed in the previous Section, it means that, to apply only the regular agreement, there is no need to ensure that a message has been received by at least  hosts before its delivery, because it is not necessary to guarantee that a correct node will deliver messages originated and delivered by faulty hosts. As a consequence, the rrb protocol is a modification of the urb protocol, in which messages are delivered upon arrival.

The rrb protocol is implemented in Algorithm 2 and it operates similarly to the urb protocol, except for the changes described below.

At first, all variables that are maintained by each 
 are initialized in the  event (lines: 1–6). The protocol uses the same set of variables as the urb protocol, except for the delivery vector. This vector allowed us to keep track which messages, contained in the 
 set, have already been delivered by 
. In the rrb protocol, however, messages are delivered upon arrival, which means that the 
 set and the set of messages delivered by 
 are equal, and thus, the deliver vector is not necessary.

Upon  event (lines: 7–13), originator 
 of broadcast message  increments its sequence counter 
 (line 8) and adds , along with its identifier and the current sequence counter value, to the 
 set (line 11). The 
 knowledge array is also updated to be equal to the current sequence counter value in position 
 (line 10). Then, in contrast to the uniform reliable protocols, message  is delivered locally (line 12).

The same happens whenever host 
 receives a new message originated by some 
 (lines: 33–36). Then, node 
 updates its knowledge array in position 
 to be equal to the sequence counter value of the received message (line 34), adds the message to its 
 set (line 35), and delivers  (line 36). Therefore, in this protocol, the 
 knowledge array indicates the knowledge of node 
 on the messages that has not only been received, but also delivered by 
 and other hosts. Thus, 
 means that the sequence number value of the last message received and delivered by 
 and originated by 
, according to the knowledge of 
, is .

When node 
 receives any message or a knowledge array from some neighboring host 
, it triggers (line: 37 and 40) the  event (lines: 42–54). In this handler, node 
, at first, updates its 
 knowledge array by setting the maximum value of 
 and 
 arrays in each position (line 43). Next, messages from the 
 set are examined (lines: 44–52), and for each message the number of nodes that have received it is counted on the basis of local 
 knowledge array (lines: 46–48). If some message 
 has been received and delivered by all  hosts, its transmission will no longer be necessary, so it can be removed from the 
 set and the 
 set if necessary (lines: 49–52). At the end, the 
 set is updated to include messages that have not yet been received by node 
 with regard to the received 
 array (line 53), in the same way as previously.

Finally, once every  seconds, each 
 transmits  message packets or its knowledge array on the basis on the 
 and 
 sets (lines: 14–31), exactly as it is in the urb protocol. Because of this, the time requirements of the rrb protocol to operate correctly are preserved and amount to:  and .

6.1. Correctness of the rrb protocol
The correctness of any regular reliable broadcast protocols is specified by two safety properties (RRB1 no duplication and RRB2 no creation) and two progress properties (RRB3 validity and RRB4 regular agreement). Therefore, on this basis, the succeeding theorem regarding the Regular Reliable Broadcast Protocol is now defined, and then proved to be true:

Theorem 2

If  and , then with the use of the RRB protocol, the RRB1 no duplication, RRB2 no creation, RRB3 validity and RRB4 regular agreement properties are met.

Proof

Assuming  and , let us consider an execution of the rrb protocol in an ad hoc network of  hosts, 
, that was initiated at 
, and let 
 
.

RRB1 no duplication property: Every message , originated by any 
, has associated sequence number value  that is equal to a value of the 
 counter at the time when broadcast of  was initiated. Since counter 
 is incremented whenever 
 initiates broadcast of a new message, it uniquely identifies each message originated by 
.

If any host 
 receives a packet with  originated by host 
, it checks whether 
, and only in such a case, the message is delivered. Then, the 
 knowledge array is set to be equal to the  value in position 
. Hence, once  is delivered by 
, it will not be delivered again by 
.

Messages originated by 
 are delivered by 
 only once upon the  event, and also then the 
 knowledge array is set to be equal to the current sequence counter value in position 
. So, no message originated by 
 will be delivered by 
 more than once, even if received in a message packet from any neighboring node.

RRB2 no creation property: Each host 
 adds to its 
 set and delivers messages either upon the  event (local messages) or upon the  event (received messages).

Since each 
 periodically, every  seconds, transmits messages only from its 
 set (
), therefore, as previously, the RRB2 no creation property is simply preserved from the RC3 no creation property of the underlying reliable channels.

RRB3 validity property: The RRB3 validity property requires that if any correct host 
 broadcasts message , then  is eventually delivered by 
. And the property is ensured by the fact that messages originated by every 
 are delivered by 
 instantly upon the  event.

RRB4 regular agreement property: With respect to the RRB4 regular agreement property if some correct node delivers message , then  is eventually delivered by every correct node in a network. Say, then, that some correct node 
 delivers and initializes broadcast of message  at 
 by triggering the  event.

Let  be a set of all correct nodes that have  at some time 
, that is: 
, and let us assume that 
 
 (otherwise, simply all correct nodes have ). We observe that if 
, then  is a singleton: 
, and by the assumption that 
 is correct, the set will not be empty until  has been received by all nodes.

Whenever any node 
 of  and any node 
 of 
 
 reliably connect, which must occur in accordance with the network liveness property, node 
 receives at most  messages and  is one of them or not if for each received message 
: 
. But in the latter case, host 
 also updates its 
 knowledge array for the sequence number value associated with the received message and transmission of that message for 
 will not occur any more—the message will not be included in the 
 set of any 
 based on the received 
 knowledge array.

Since the number of correct nodes and the number of messages such that: 
 is finite, and since no correct node can be permanently isolated for any , therefore, as the execution progresses, eventually  will be selected for transmission for each 
 of 
 
 when it experiences reliable connectivity with some 
 of .

Hence, message  will eventually be received and delivered by all correct hosts. □

6.2. A note on the implementation of best-effort reliable broadcast
The hallmark of best-effort reliable broadcast is that it puts the burden of ensuring reliability solely on the originators of broadcast messages. This is a consequence of the BRB3 best-effort validity property, which requires that if some message  is broadcast by a correct node, then every correct host will eventually deliver . Such an approach can be successfully implemented in these networks, in which connections between originators and all the other nodes are provided by the network’s infrastructure without the involvement of other hosts, as it is, for instance, in the Internet with the use of switches, routers and other equipment Cachin et al., 2011, Tanenbaum and Wetherall, 2010. In ad hoc networks, however, there is no such infrastructure, and messages must be forwarded, that is kept and retransmitted, by other nodes instead.

Recall that the network liveness property does not specify which hosts should reliably connect and when, and in particular, it does not guarantee that every pair of nodes will experience reliable connectivity. Therefore, to broadcast a message to all operative or correct hosts, its is not possible to rely solely on its originator. But if the message is also forwarded by other hosts, then the reliability of such broadcast is also ensured by all of these intermediate nodes. Exactly as it happens in the rrb protocol designed in this Section.

We observe that best-effort reliable and regular reliable broadcasts share the same, no duplication and no creation, safety properties, and that the combination of the RRB3 validity and RRB4 regular agreement properties, of regular reliable broadcast, also guarantees that if a correct node broadcasts message , then every correct host will eventually deliver , that is the BRB3 best-effort validity property. Hence, regular reliable broadcast fulfills the requirements of best-effort reliable broadcast.

Based on the foregoing reasoning, we conclude that in any implementation of best-effort reliable broadcast for ad hoc networks with the network liveness property the burden of ensuring reliability cannot be put merely on originators. Therefore, in the absence of any network infrastructure, best-effort reliable broadcast must be achieved through intermediate hosts, and, as a consequence, by means of regular reliable (or even stronger, uniform reliable) broadcast.

7. Performance evaluation
In the worst case scenario, to disseminate a single message to  operative hosts in an ad hoc network with the network liveness property,  separated reliable connectivities would be required with an unknown number of the message transmissions in between. On the other hand, if the network is fully connected (i.e., forms a complete graph), a single transmission from an originator may be sufficient. If, however, more than one host is broadcasting more than one message, the actual number of transmissions of these messages is hard, if possible at all, to estimate. All the more so, if broadcast protocols with different properties and parameters are considered. Therefore, we evaluated the proposed uniform and regular reliable broadcast protocols by the means of simulation experiments with the main objective to discover how different values of the  parameter influence the efficiency of the protocols.

Towards this end, the experiments were carried out using a component-based C++ discrete event simulator named omnet++ (version 5.4.1). The simulator is available on the Internet1 along with technical documentation, and it allows us, among other things, to simulate mobile ad hoc networks of a given number of nodes that run custom protocols and communicate only by sending messages through wireless links. The simulations were executed on a Ubuntu 18.04.1 lts Linux server using an Intel cpu (Xeon 2.60 GHz E5–2670) and equipped with 20 GB ram.


Table 1. Default values of the simulation parameters.

#	Parameter	Value
1	Simulation time	2100 s
2	Simulation transient period	150 s
3	Area shape	Square
4	Area size	1000 m × 1000 m
5	Initial placement model	Uniform
6	Mobility model	Random waypoint
7	Pause time	0 s
8	Node speed a	
9	Propagation model	Path loss
10	Wireless range	250 m
11	Bit rate	11 
12	Message generation rateb	 N (10 s, 1 s)
13	Message size	512 B
14	Number of nodes 	50
15	Number of faulty nodes c	10
16	Time of periodic transmissions 	1 s
a
Uniformly randomized in range .

b
Per node, normal distribution, absolute values.

c
Failure times were uniformly randomized in the simulation time.

The values of the most important input parameters that did not change across all simulation experiments are presented in Table 1. A square simulation surface of the size of 1000 m   1000 m was used, and initially, nodes were placed over it with the use of the uniform probability distribution (parameters no. 3–5). Next, nodes moved according to the Random Waypoint mobility model (parameters no. 6–8). In this model, Broch et al., 1998, Johnson and Maltz, 1996, a node first stops for some random pause time, and then randomly picks a point within the area and starts moving toward it with a constant, but randomly selected speed that is uniformly distributed in range . Upon reaching the destination point (or waypoint), the node pauses again and then moves toward a newly randomized point. The transmission radio medium was simulated with the use of the Ieee80211ScalarRadioMedium module of the omnet++ framework, and the FreeSpacePathLoss module was used to model signal propagation (parameter no. 9). The model predicts the reduction in attenuation (power density) a signal encounters as it propagates through space, [44]. At random time moments, with the mean equal to 10 s, each node initialized broadcast of a message of the size of 512 B (parameters no. 12–13). Messages were transmitted with the bit rate equal to 11 , and the wireless range of up to 250 m (parameters no. 10–11). The simulations have been performed for ad hoc networks made up of =50 nodes, implemented with the use of the AdhocHost module of the omnet++ framework, of which =10 failed (parameters no. 14–15). It was ensured that time moments, at which nodes crashed, were uniformly distributed in the simulation time. The nodes executed the proposed urb and rrb reliable broadcast protocols with the time of periodic transmissions =1 s (parameter no. 16). Finally, each simulation experiment lasted up to 2100 s (parameter no. 1) and was repeated ten times to obtain measures of statistical significance (the presented results have been aggregated for all the repeated tests).

This setup is mainly based on the simulation environment used in Vollset, 2005, Vollset and Ezhilchelvan, 2005 (parameters no. 3–10, and 13), but the values have also been used in other simulations of manet protocols, for instance, in [23].

7.1. Simulation transient period
The simulation transient period is a time during which measurements taken are ignored in order to allow the simulated network to stabilize, and hence, to ensure that the collected results come only from the stable state of operation of the simulated environment. In the context of the broadcast protocols considered in this paper, that stabilization is best expressed by the total number of transmissions performed by all nodes in the simulated network per unit of time. Therefore, to determine the simulation transient period, the total number of transmissions in the simulated network per one second has been registered. Fig. 3 presents the results obtained for different values of the  parameter (={5, 10, 15, 20, 25, 30, 35, 40, 45, 50}) with the use of the urb protocol (the results for the rrb protocol were almost identical). The vertical axis represents the total number of transmissions in the network per one second, while the horizontal axis represents the simulation time. As it can be observed, the total number of transmissions stabilizes after about 100 s for all considered values of the  parameter. For that reason, we have decided to set the simulation transient period to 150 s (parameter no. 2 in Table 1), and thus, to collect simulation measures between 150 and 1950 s of the simulation time (that is, for 1800 s, or 30 min). The steady decline of the total number of transmissions over time, which is best visible for =50, has been caused by host failures, as nodes that crashed neither transmit nor receive messages.

Fig. 4. btm measure for two sets of values of the  parameter: in the upper plot ={1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50}, in the lower plot ={1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20}.

7.2. Efficiency measures and simulation results
To evaluate how different values of the  parameter, i.e., the maximum number of messages that a node transmits within the time of periodic transmissions , affect the efficiency of the urb and rrb broadcast protocols, three quantitative measures have been chosen:

•
Broadcast Time of Message  (btm): For message , which broadcast was initiated at some time 
, and that was delivered by all operative nodes in the network at some time 
, btm 
 seconds.

•
Reachability of Message  (rm): For message , which broadcast was initiated at some time 
, rm of  is the percentage of operative nodes that received  over the total number of operative nodes in the network at 
.

•
Total Transmissions of Message  (ttm): For message , which broadcast was initiated at some time 
, and that was delivered by all operative nodes in the network at some time 
, ttm is the total number of transmissions of message  in the network within 
.

We notice that the shorter the time of the btm measure and the smaller the number of transmissions of the ttm measure, the better the time and communication efficiency of the analyzed protocol.

Fig. 4 presents two plots that report the average values of the btm measure (the vertical axes of the plots) obtained for two different sets of values of the  parameter—in the upper plot ={1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50}, whereas in the lower plot ={1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20} (the horizontal axes of the plots). The first observation of the upper plot is that at first btm decreases slightly, to increase significantly with increasing values of the  parameter. To better visualize that btm reversal, the lower plot in Fig. 4 shows results for  values closer to that change. We notice that the shortest broadcast time has been achieved for =8 with btm increasing for the  values smaller and greater than this number. This supports the intuition that it is possible to adjust the maximum number of messages that a node transmits within the time of periodic transmissions , for a given ad hoc network, to improve the time efficiency of the proposed urb and rrb reliable broadcast protocols. We also note that for values of the  parameter in range  the urb protocol improves on the protocol we proposed in [8], which allows us to disseminate only one message, meaning that for the latter protocol  is constant and equal to 1. Finally, given the facts that the Uniform Reliable Broadcast Protocol delays delivery of each message until it is assured that the message has been received by at least a majority of hosts, and that the Regular Reliable Broadcast Protocol delivers messages upon arrival, the difference between btm values for these two protocols may be regarded as a measurement of the “delay” (or “time cost”) required to ensure uniformity. Again, that difference starts to increase relevantly for  values that are greater than 8 in the simulated ad hoc network.

Fig. 5. rm measure, ={1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50} (the rrb protocol).

The results that we have obtained for the btm measure are further detailed by the rm measure, as presented in Fig. 5. The vertical axis represents the average values of the rm measure collected with the use of the rrb protocol (using the urb protocol, nodes receive messages in the same manner), while the horizontal axis represents time . We notice that, by definition, the time, when the value of the rm measure reaches 100%, corresponds to the value of the btm measure for the rrb protocol and the same value of the  parameter. The key observation of the plot is that different values of the  parameter result in different broadcast times and different slopes of the rm measure (which cross only in the case of =1 and =30).


Fig. 6. ttm measure, ={1, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 25, 30, 35, 40, 45, 50}.


Fig. 7. The total number of dropped packets as a percentage of the total number of packet transmissions for different values of the  parameter (the urb protocol).

Fig. 6 shows the average values of the ttm measure (the vertical axis of the plot) for the two sets of values of the  parameter (the horizontal axis of the plot), which were used in the two plots in Fig. 4. Our main observation is that the obtained ttm increases almost linearly with the values of . This, however, should be expected, as with increasing number of messages that a node transmits within the time of periodic transmissions , a single broadcast message should be selected for transmission more often. It is also worth noticing that for the  values that are smaller than 10, in the simulated ad hoc network, the ttm measure is relatively low, which corresponds with relatively low values of the btm measure for the same values of . Finally, the difference between ttm values for the urb and rrb protocols starts to increase with  greater than 20, meaning that the “communication cost” of ensuring uniformity up to that number is insignificant.

Lastly, Fig. 7 presents the simulation results for the total number of dropped packets as a percentage of the total number of packet transmissions for different values of the  parameter with the use of the urb protocol (the results for the rrb protocol were almost identical). We notice that the total number of dropped packets increases almost logarithmically with the values of . Thus, increasing the value of that parameter comes at the cost of growing number of collisions. That number, in the simulated ad hoc network, reaches its maximum for the values of the  parameter equal to or greater than 35. The intuition behind that outcome is that from this value the network bandwidth is already fully used and hence almost a half of all transmitted packets is dropped.

To summarize, we observe that, with respect to the accuracy of the simulation method used, the proposed uniform and regular reliable broadcast protocols facilitating concurrent message dissemination, proposed in this paper, enable us to adjust their parameters to improve broadcast efficiency. That is, on the one hand to fully utilize network throughput, but on the other hand to avoid increasing number of collisions at mac layer, as Fig. 4, Fig. 5, Fig. 6, and Fig. 7 indicate. Therefore, as manets are resource constrained networks, the  and  parameters may also be used to obtain the expected balance between the broadcast efficiency and the traffic congestion in actual ad hoc networks.

8. Conclusions
This paper has described the uniform and regular reliable broadcast protocols for mobile ad hoc networks with the network liveness property. Towards this end, a strictly defined formal model of mobile ad hoc networks and the network liveness property with the use of the dynamic set function was developed, and definitions of best-effort, regular, and uniform reliable broadcasts were presented. The contribution of this paper is that the proposed protocols facilitate concurrent message dissemination but their time requirements (i.e., minimal values of  and ) are independent of the total number of messages that each node can start disseminate concurrently, and hence they are also independent of the total number of messages that can be disseminated in an ad hoc network by all nodes concurrently. For the protocols, we have proved analytically their correctness, and evaluated experimentally their efficiency in simulation tests. The obtained empirical outcomes show that the concurrent dissemination parameters of the urb and rrb protocols may be adjusted in an actual ad hoc network to improve broadcast efficiency.

Although the goal of this paper has been accomplished, some continuations of the presented research are possible. Firstly, different (e.g., reactive) transmission controls may be investigated to limit the total number of message transmissions. Next, the impact of link failures on the performance of message dissemination is worth further analysis. Finally, the termination property, which allows nodes to stop transmitting messages once all operating nodes received them, may be considered.

