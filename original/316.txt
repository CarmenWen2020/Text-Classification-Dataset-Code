Blockchain is a disruptive technology applied by academia and industry in a broad spectrum of applications ranging from cryptocurrency, financial services, IoT, 5G, risk management to public and social services. On the other hand, cloud computing is spearheading the Internet revolution and rapidly becomes the hottest topic in IT. However, cloud computing inherently suffers from centralization, lack of transparency and trust. Blockchain, with its innovative features like decentralization and immutability, adds trustworthiness and transparency to cloud computing.

This paper presents a comprehensive survey of Blockchain-based cloud services literature published over the period 2008–21. This survey focuses on the technical fusion of Blockchain and cloud computing and investigates the recent advances in the field of Blockchain-based cloud computing. In particular, we classify the literature into three categories: (1) Blockchain-based Infrastructure-as-a-Service (2) Blockchain-based Platform-as-a-Service and (3) Blockchain-based Software-as-a-Service. We start by identifying a set of characteristics of Blockchain and their potential benefits to cloud computing. Then, we present our research methodology and a brief introduction of essential backgrounds. Later, we present state-of-the-art works in Blockchain-based storage-as-a-service, resource management, computation-as-a-service, data aggregation-as-a-service, microservice-as-a-service and VNF-as-a-service. We conclude the paper with the current challenges in Blockchain-based cloud computing, their potential challenges and future research directions. We believe our survey will provide a comprehensive view of the state-of-the-art Blockchain-based cloud services and facilitate reengineering the cloud data centres in the future.

Previous
Next 
Keywords
Blockchain

Cloud computing

Cloud storage

Resource allocation

Verifiable computation

Crowdsensing

1. Introduction
Blockchain has become a prominent technology in recent years, and because of its characteristics like decentralization, immutability, and transparency, it is deemed as an alternative for establishing a trusted platform. Initially introduced through Bitcoin (Nakamoto, 2008) for peer-to-peer financial transactions, Blockchains have recently come to the forefront of the research and industrial communities (Al-Jaroodi and Mohamed, 2019). Smart contracts have been a major driving factor in the broad adoption of Blockchain technology as they introduce automatic control (Dorri et al., 2017). Smart contracts are computer protocols intended to facilitate, verify, or enforce a contract; they are described in an executable language and enable execution of trusted transactions without third parties.

Blockchain and smart contracts are disruptive in many engineering and computer science fields. Cloud computing is one such field that can benefit from adopting Blockchain technology to re-engineer its data centres. With its innovative concepts of decentralized operation, Blockchain can serve as a novel kind of software connector, considered a possible alternative to a centralized cloud setting (Xu et al., 2016). Blockchain is expected to be an indispensable tool to fulfil cloud systems’ performance expectations with minimal costs and management overheads. Many recent works focus on utilizing Blockchain technology for establishing trust and reliability in cloud operations. However, we observe that there are some challenges in integrating Blockchain and cloud computing:

(a)
The cloud is fully centralized and has minimal trust, and transparency settings, whereas the founding principle of Blockchain, is decentralization. As it is impossible to completely abandon the centralized setting for various reasons (legal, governmental, and others), a hybrid approach has to be derived where the provider has some control while instilling trust and transparency in cloud users.

(b)
The cloud providers offer complete data privacy from third parties, whereas data in Blockchain is publicly retrievable. So, privacy will be one of the significant factors in the broad adoption of Blockchain-based cloud services.

(c)
The cloud systems by design, scale quickly, whereas the Blockchain systems inherently suffer from scalability.

(d)
The cloud systems are optimized with the help of edge computing to generate as low latency as possible. In contrast, in Blockchain, the write latency is large enough to make Blockchain unsuitable for many real-time applications. Although there are some attempts to fix the above problems in the form of private/consortium Blockchains, these solutions reduce decentralization and transparency.

Despite these challenges, there is an urgent demand for Blockchain technology to be incorporated into cloud services. However, the question remains on making Blockchain and cloud compatible amidst the above-discussed challenges (Gai et al., 2020). We notice that the integration of Blockchain and cloud is rarely addressed in the literature. So in this survey paper, we try to fill the literature gap by discussing the existing Blockchain-based cloud services and presenting a road map for further integrating Blockchain and cloud.

1.1. Comparison with existing surveys
Many studies have surveyed Blockchain technology from various perspectives e.g., digital currencies (Tschorsch and Scheuermann, 2016), privacy (Feng et al., 2019), smart contracts (Bartoletti and Pompianu, 2017), consensus mechanisms (Wang et al., 2019a), IoT (Dai et al., 2019, Ali et al., 2019), cloud computing (Xie et al., 2020b, Gai et al., 2020), edge computing (Yang et al., 2019b), and 5G (Nguyen et al., 2020). The comparison of existing survey works on Blockchain in various domains is presented in Table 1.

Yang et al. (2019b) have focused on Blockchain-based edge computing and its challenges. Furthermore, the authors have discussed the integration of edge and IoT using the Blockchain. Ali et al. (2019) have discussed the challenges in integrating IoT and cloud and explored several solutions using Blockchain. Our survey and (Ali et al., 2019) discuss some of the topics like access control, data integrity, and data management. However, the survey in Ali et al. (2019) mainly discusses the above topics under IoT, whereas we have discussed the same, focusing on the cloud. Dai et al. (2019), and Nguyen et al. (2020) have discussed the integration of Blockchain with IoT and 5G technologies, respectively. The survey by Xie et al. (2020b) mainly focuses on the challenges in cloud exchanges and their solutions using Blockchain. As a result, they have considered only a few works regarding single cloud service provisioning. In contrast, we have considered many recent works in both Blockchain-based single cloud service provisioning and Blockchain-based federated cloud service provisioning. The technical dimensions of our survey match with the technical dimensions of the survey presented by  Gai et al. (2020). The topics like data access control, searchable encryption, data deduplication, and data management are explored in both surveys. However, when compared to Gai et al. (2020), we have considered many other topics like Blockchain-based verifiable computation, Blockchain-based crowdsensing, Blockchain-based resource allocation for cloud users, Blockchain-based microservices, and Blockchain-based VNF-as-a-services. Although Gai et al. (2020) considered resource allocation, the type of resource allocation we have considered is entirely different from that considered in Gai et al. (2020). Even under data management methods, we have considered the topics like data tracking and versioning, data timestamping, data migration, and monetary benefits, which are not considered in Gai et al. (2020). We observe that only a few works have discussed Blockchain from the perspective of cloud computing, and also, none of the works has discussed the Blockchain-based cloud applications from the standpoint of service models. In contrast, we discuss state-of-the-art Blockchain-based cloud systems in all the three service models Iaas, PaaS, and SaaS.


Table 1. Comparison of surveys on Blockchain in various domains.

S. No	Related surveys	Topic	Key contribution	Limitations and open issues
1	Yang et al. (2019b)	Blockchain and edge	The authors investigated the integration of Blockchain-based edge computing and its challenges.	There is a lack of discussion on service based cloud computing. The paper emphasizes on the integration of edge and IoT and have not considered the cloud.
2	Ali et al. (2019)	Blockchain and IoT	The authors discussed various shortcomings of integration of IoT and Cloud and investigated solutions for those shortcomings using Blockchain.	The paper only provides the concept of Blockchain for IoT, and a detailed cloud service-based analysis is missing.
3	Dai et al. (2019)	Blockchain and IoT	The authors investigated the integration of Blockchain with IoT.	The authors have focused more on IoT and discussed cloud only as a backend to IoT networks.
4	Nguyen et al. (2020)	Blockchain and 5G	The authors discussed the adoption of Blockchain in 5G technology, 5G IoT and 5G services.	The authors have discussed some of the Blockchain-based cloud computing models from the perspective of 5G networks. However, they have not analysed from the perspective of cloud services.
5	Xie et al. (2020b)	Blockchain and cloud exchanges	The authors discussed the integration of Blockchain and cloud exchanges.	The authors have focused on generalized cloud services, and a detailed service-based analysis is missing.
6	Gai et al. (2020)	Blockchain and cloud	The authors discussed the fusion of cloud services with Blockchain.	Although most aspects of cloud computing are covered some important topics like computation-as-a-service and data aggregation-as-a-service are not discussed.
7	Our work	Blockchain and cloud	We present a comprehensive survey of Blockchain-based cloud services. We present the works published in all the three service models IaaS, PaaS and SaaS of cloud computing.	–
1.2. Motivations and contributions
1.2.1. Motivations
This survey’s prime motivation is to classify and understand the existing Blockchain-based cloud services from the perspective of service models. As summarized in Table 2, we identify several key research questions that motivate our survey in this paper.

1.2.2. Contributions
We summarize our contributions in this survey paper as follows:

1.
We provide the essential background knowledge on Blockchain and cloud computing. Moreover, we present the obstacles to the growth of cloud computing and the opportunities for Blockchain to aid the growth of cloud computing.

2.
We conduct a review on the recently proposed Blockchain-based solutions in the areas of

•
Infrastructure-as-a-service model.

•
Platform-as-a-service model.

•
Software-as-a-service model.

3.
We list several research challenges, potential solutions and future research directions in the field of Blockchain-based cloud computing.


Table 2. Research questions and analysis of literature.

S. No	Research questions	Motivations
1	What are the current challenges of cloud computing?	Cloud computing severely suffers from trust and transparency due to centralized architecture. Currently, cloud providers and users have to depend on trusted third parties to resolve disputes which arise due to violation of service level agreements.
2	What are the key requirements of cloud computing?	The key requirements of cloud computing include availability, elasticity, data security, manageability federated systems, on-demand integration, multi-tenancy, resource management etc.
3	What are the key characteristics of Blockchain?	The key characteristics of Blockchain include decentralization, immutability, transparency, persistency, auditability, security and smart contracts
4	What are the potential benefits of Blockchain for cloud computing?	Cloud computing could benefit from Blockchain to build innovative applications providing trust, transparency and giving more control to cloud users.
5	What are the key advantages of Blockchain over the traditional technique for supporting cloud computing?	Blockchain offers new features like decentralization, trust, transparency and immutability which does not exist in traditional cloud computing. Significantly, Blockchain limits the dependency of the cloud provider and users on trusted third parties.
6	How is the current Blockchain-cloud research progress?	Many recent works discussed Blockchain-based cloud services for data management, access controls, resource management, data security, service management, etc., across all the three domains SaaS, PaaS and IaaS of cloud computing.
1.3. Survey methodology
Our objective is to explore the existing works on Blockchain-based cloud services, and hence we adopted the systematic literature mapping given by Yli-Huumo et al. (2016). The adopted mapping process is illustrated in Fig. 1. In the first step, we define research questions related to Blockchain and cloud computing integration, which are listed in Table 2. By analysing the key research questions, we discuss the merits of the Blockchain and the cloud computing technologies and observe the pivotal issues of cloud computing that can be solved with Blockchain technology. After defining the research scope, we have searched for the articles with the term “Blockchain and cloud computing” as query string. We have collected papers from well-known peer-reviewed article publishing platforms including (1) IEEE Xplore (2) Science direct (3) Springer Link and (4) ACM digital library. Based on the article title and abstract, we have filtered out some irrelevant papers and retained only papers related to Blockchain-based cloud services. We have presented the publisher-wise and year-wise data analysis of retained papers in Fig. 2, Fig. 3 respectively. With the help of keywords in the articles, we categorized papers into three sets based on the type of cloud service they have discussed. Finally, we extracted information from the articles that needed to address the research questions of this mapping study. Technical dimensions of this survey are presented in Fig. 4.

1.4. Structure of the survey
The technical dimensions of the survey are presented in Fig. 4, and the survey is organized, as shown in Fig. 5. In Section 2, we discuss Blockchain basics, Blockchain characteristics and their potential application to cloud computing, background knowledge of cloud computing, obstacles to the growth of cloud computing and opportunities for Blockchain to mitigate obstacles in cloud computing. In Section 3, we present current trends in Blockchain-based Infrastructure-as-a-Service model. In Section 4, we provide a comprehensive discussion of existing works in Blockchain-based Platform-as-a-Service (Paas) model. We outline the existing works in Blockchain-based Software-as-a-Service (SaaS) model in Section 5. In Section 6, we present the challenges in existing Blockchain-based cloud computing and discuss potential solutions to the challenges identified. Finally, we conclude the paper in Section 7.

2. Blockchain and cloud computing: background and definitions
2.1. Brief introduction to Blockchain
The term Blockchain has been introduced with the peer-to-peer electronic cash system known as Bitcoin (Nakamoto, 2008) designed by an anonymous person/group under the pseudonym Satoshi Nakamoto. Although the initial purpose of the Blockchain technology was to facilitate peer-to-peer financial transactions without trusted intermediaries, its fundamental concepts are used as building blocks to construct many decentralized applications in the fields of digital assets (Rosenfeld, 2020), smart contracts (Wang et al., 2019b), Internet of things (Conoscenti et al., 2016), public services (Lemieux, 2016), cloud computing (Gai et al., 2020), security services (Noyes, 2016), reputation systems (Sharples and Domingue, 2016) and 5G networks (Nguyen et al., 2020). The fundamental components in Blockchain technology are as follows (Iansiti and Lakhani, 2020):

(a)
Peer-to-peer transmission: All the communications (transactions) occur directly between peers without a central entity. Each peer stores and forwards information to all other peers.

(b)
Public key cryptography: Every peer in the Blockchain network is associated with a public–private key pair. The public key is used to identify a peer uniquely in the network, and the corresponding private key is used to sign the transactions during transfer of the assets (financial or non-financial) owned by the public key.

(c)
Distributed database (Blockchain): In Blockchain network, the transactions are stored in a one-way append distributed ledger also called as Blockchain. Every peer in the network has access to information stored at the Blockchain, and no single peer can control the data stored at the Blockchain. A block in Blockchain consists of two parts: block header and block body. The block header consists of:

(i)
Block version: It shows which set of block validations rules have to be followed during block validation.

(ii)
Merkle tree root hash: The hash of the Merkle tree root constructed with the transactions in the block.

(iii)
Timestamp: The current time as seconds in the universal time since January 1, 1970.

(iv)
Nonce: A 4-byte value computed during block creation.

(v)
nBits: Represents the current target threshold of the block hash.

(vi)
Parent/Previous block hash: A 256-bit hash value of the parent block.

The structure of the block is shown in Fig. 6.
A Blockchain is a sequence of blocks which are linked cryptographically. Fig. 7 illustrates an example of Blockchain.

(d)
Consensus algorithm: A secure consensus algorithm is executed by a set of decentralized peers known as miners to agree on a common global state of the Blockchain. Consensus algorithm guarantees the security of the Blockchain. Bitcoin (Nakamoto, 2008) uses the Proof-of-Work (PoW) consensus algorithm, and most of the public Blockchain networks (commonly called as alt-coins/Nakamoto-style ledgers) proposed later follows Bitcoin’s PoW with little/no modifications. PoW algorithm makes the miners compete to generate a new block periodically. The miners are rewarded for mining new blocks in the form of currency native to the Blockchain network (bitcoins in the case of Bitcoin). The PoW algorithm is composed of several transactions and block validation rules. The following two rules ensure the correctness of the execution of transactions: (1) The miners verify all the received transactions before adding them to a block, and (2) A miner after receiving a new block verifies the validity of block as well as transactions in that block before adding it to their local Blockchain. These verification steps make the Blockchain network trusted for correctness. The hardness in solving PoW puzzle makes the Blockchain immutable, and a large number of participating miners ensure availability of Blockchain network. Several consensus algorithms are proposed in the literature, and one can refer to Wang et al. (2019b) for the analysis and comparison of different consensus algorithms.

(e)
Smart contracts: A smart contract () is a program deployed and stored in a Blockchain. A smart contract can hold many contractual clauses between mutually distrusted parties. Similar to transactions, the smart contract is also executed by miners and, its execution correctness is guaranteed by miners running the consensus protocol. Assuming that the underlying consensus algorithm of a Blockchain is secure, the smart contract can be thought of as a program executed by a trusted global machine that will faithfully execute every instruction (Dong et al., 2017). The complete analysis, applications, design patterns and limitations of the smart contracts are found in Bartoletti and Pompianu (2017).

2.2. Main characteristics of Blockchain
We discuss some of the main characteristics of Blockchain and their potential applications to cloud computing.

(a)
Decentralization: Decentralization in Blockchain refers to a lack of centralized authority for managing identities, accounts, balances, databases, and code execution. The consensus algorithms like Proof-of-work, Proof-of-Stake, etc., ensure the security of the Blockchain without any trusted authorities. This feature is essential in cloud computing, especially when the cloud provider and user are mutually distrusted. As no central authority controls the Blockchain, Blockchain-enabled cloud computing services instil more trust and give more control to cloud users than traditional cloud computing services.

(b)
Immutability: The complexity in solving the PoW puzzle makes the data stored in the Blockchain immutable. The blocks in the Blockchain are chained cryptographically. To change a transaction/data in some th block of a Blockchain with th block as the current block, new PoW solutions have to be found for all blocks between  and . Finding PoW solutions is computationally expensive, especially if  is much smaller than . This property can be plausibly used to design data integrity and auditing schemes because the traditional cloud computing solutions rely on trusted party or heavy cryptographic primitives.

(c)
Transparency: All the interactions/transactions stored in the Blockchain are publicly viewable by every member. Also, many parties (miners) contribute their computational power to generate new blocks, verify newly generated transactions and blocks. These steps ensure strong transparency which in turn enhances the integrity of the data stored in the Blockchain. If Blockchain is adopted in cloud computing and the meta-data of interactions between users and cloud data/services are recorded in the Blockchain, then it enhances the trust and openness in cloud computing.

(d)
Persistency: Every transaction and block are verified for the common good before adding it to the Blockchain. Any malicious attempt to destabilize Blockchain by adding malicious transactions is not possible due to public verifications. Once the data is stored at Blockchain, then that data is persistent and cannot be modified. This property enhances the persistency and reliability of Blockchain-enabled cloud services.

(e)
Auditability: As the Blockchain data is retrievable publicly, it is subjected to public auditing. This characteristic is required in cloud computing as most of the existing cloud data integrity, and auditing schemes (Zafar et al., 2017) depend on third party auditor and complex cryptographic primitives. The auditability property of Blockchain reduces the cost of auditing and also eliminates the role of trusted parties in the traditional cloud auditing schemes.

(f)
Security and privacy: For sending transactions in Blockchain, every participating entity must generate an asymmetric key pair using public-key cryptography. Before sending, every transaction has to be signed with a private key of a sender. During verification of the transaction, the signature is verified with the help of the public key of the sender. The asymmetric key helps preserve the privacy, ownership and non-repudiation properties. However, in traditional cloud solutions, a trusted key generator (TKG) is required for generating and distributing keys causing the well-known key-escrow problem (Wang et al., 2016). The fusion of Blockchain and cloud greatly reduces the dependence on TKG and increases the security of cloud systems. Also, in traditional cloud computing, a trusted party is required for managing access control policies. The dependence on the trusted party can be eliminated by transcoding the access control policies as smart contracts. Nevertheless, the drawback of public Blockchain systems is that they cannot provide privacy to the data stored on the Blockchain. In order to mitigate the privacy problem, several privacy-preserving solutions (Feng et al., 2019) are being explored along with the development of private Blockchain networks.

Although public Blockchain systems possess decentralization, immutability, trust, and transparency properties, they suffer from scalability and privacy problems. To alleviate these problems, private Blockchains and consortium Blockchains are being developed. However, private/consortium Blockchains trade-off decentralization and transparency for the sake of scalability and privacy. The comparisons of public, consortium and private Blockchain is shown in Table 3. One may refer to Tschorsch and Scheuermann, 2016, Zheng et al., 2017 to further understand the core technology and the principle of Blockchain.


Table 3. Comparison among public, consortium and private Blockchains.

S. No	Characteristic	Public	Consortium	Private
1	Decentralization	Yes	No (selected set of nodes spread across multiple organizations)	No (single organization)
2	Immutability	Tamper-proof	Cloud be tampered	Cloud be tampered
3	Transparency	Yes	Cloud be public or restricted	Cloud be public or restricted
4	Persistency	Yes	No	No
5	Public auditability	Yes	No	No
6	Privacy	No	Partial	Yes
7	Smart contracts	Yes	Yes	Yes
2.3. Brief introduction to cloud computing
Cloud computing provides on-demand network access of configurable computing resources enabling individuals and enterprises to pay only for the resources or services they use. A cloud computing system is defined by the following set of properties (Ward and Barker, 2013):

(a)
On demand self service: Cloud users access cloud resources as per need without any human intervention.

(b)
Broad access: Standardized mechanisms and protocols are defined for accessing cloud resources.

(c)
Resource pooling: Cloud resources are pooled into shared resources by a cloud provider and are allocated to customers on demand.

(d)
Rapid elasticity: Resources are allocated and released dynamically according to the need of the user.

(e)
Measured service: The resource usage is measured automatically allowing users to monitor, control and report resource usage.

2.4. Cloud service models
National Institute of Standards and Technology (NIST) (Mell and Grance, 2020) defines three layers within cloud computing stack as shown in Fig. 8: (a) Infrastructure-as-a-service (IaaS) (b) Platform-as-a-service (PaaS) and (c) Software-as-a-services (SaaS).

(a)
Infrastructure-as-a-service: It is an instant computing infrastructure administered over the Internet. IaaS acts as a backbone for PaaS and SaaS. Some of the standard components in IaaS includes data centre physical building/plant, networking firewalls, computing servers, and storage discs. Well trained IT administrators manage the IaaS components while the general public/enterprises purchase, install, configure and manage their software—operating systems, middleware and applications. The typical examples of IaaS providers are Amazon web services, Microsoft Azure, Rackspace, and VMware.

(b)
Platform-as-a-service: PaaS is a development and deployment environment in the cloud. Any person/enterprise can develop and host their applications for their clients without worrying about the management of underlying hardware. It includes all the components of IaaS and also development tools, middleware, database management systems, and business intelligence (BI) services. The typical examples of PaaS include Force.com, Heroku, Google App Engine, AWS Elastic Beanstalk, and Apache Stratos.

(c)
Software-as-a-service: SaaS allows user to connect to and use cloud-based applications over the Internet. The applications are accessible through a web browser or application programming interfaces (APIs). The typical examples include Dropbox, Salesforce, Google workspace, and Office 365.


Table 4. Some of the obstacles to the growth of cloud computing and the opportunities for Blockchain to aid the growth of cloud computing.

S. No	Obstacle	Description	Opportunity for Blockchain
1	Service availability	In most cases, a cloud provider’s revenue depends on uninterrupted service provisioning. However, due to the massive demand for cloud services, several cloud providers form federated clouds to provide the service continuously. The obstacle in service availability is the trust between mutually untrusted service providers.	Blockchain can be a reliable communication medium that will instill trust between multiple cloud providers.
2	Data lock-in	The existing cloud computing architectures have minimal or no support to transfer data, products, or services from one provider to another, causing an obstacle to the growth of cloud computing.	Blockchain offers tamper-proof storage for publishing standardized APIs.
3	Data confidentiality and auditability	Cloud users do not trust the provider for their data privacy, and hence, most often, they will store the encrypted data. Nevertheless, encryption does not guarantee modifications to the data, and therefore data auditing is required. However, data auditing is conducted through a trusted intermediary. The obstacle here is the costs of data auditing and the trust on the auditing results.	Blockchain offers tamper-proof storage to publish access control policies defined on data stored in the cloud. In addition, Blockchain offers tamper-proof storage to store meta-data of the data/services stored/running at the cloud helps tamper-proof auditing.
4	Data transfer bottlenecks	Data is moved from one location to another in cloud computing due to several operational/management hassles. However, tracking the colossal number of data movements is an obstacle to the growth of cloud computing.	Efficient data migration tracking systems can be constructed using Blockchain. The user, through Blockchain, can know real-time movement information of his data.
5	Reputation-fate sharing	Sometimes cloud providers indulge in unfair practices to increase their reputation in order to attract users. Therefore, the lack of fair and open provider reputation management methods is an obstacle to the growth of cloud computing.	Fair, open, and untampered reputation management schemes can be constructed using Blockchain.
6	Billing	Although cloud computing has evolved many folds in the last decade, the billing process has no transparency. Most of the time, the users do not have clarity on the components of the billing. The lack of transparency in billing is an obstacle to the growth of cloud computing.	Fair and transparent billing and payments schemes without trusted intermediaries can be constructed using Blockchain.
3. Blockchain-based infrastructure-as-a-service
IaaS is one of the most significant and fast growing cloud computing service model. A cloud provider under IaaS offers computing resources like virtual machines, storage discs, network devices, load balancers and firewalls. Most of the existing works on Blockchain-based IaaS focus on storage management and computational resource management. Therefore in this section we would first discuss the challenges in existing cloud storage and resource management and then elaborate the existing Blockchain-based storage and resource management works. Finally, we conclude the section with the summary of our findings.

3.1. Storage-as-a-service
3.1.1. Issues in traditional cloud storage
Outsourcing data to a remote cloud has become a common practice (Li and Li, 2013). Every day large amounts of data are being generated, and data explosion is predicted when 5G and IoT networks are deployed worldwide. More and more users are adopting cloud storage to store their personal data, and many enterprises are also moving their data to the cloud in order to reduce on-premise costs. We categorize the entities involved in storage-as-a-service into three types: (1) Cloud provider (), (2) Data owner (), and (3) Data user ().  is a rational and untrusted party with a large storage capacity.  stores his data at cloud managed by .  also authorizes  to read/retrieve his/her data stored at the cloud. A  has very little, or no control over his data as  may give access of ’s data to third parties for monetary benefits. In today’s world,  will always try to reduce its costs adversely effecting data properties like:

(a)
Data integrity:  may modify stored data without the ’s knowledge.

(b)
Data auditability:  may not record or tamper the recorded data about the actions performed on ’s data.

(c)
Data searching: When requested for a data search operation,  may return incorrect or partial search results.

(d)
Data sharing and access control:  may not adhere to the access policy stated by a  or may change the already stored access policy without ’s knowledge.

(e)
Data migration:  may not comply with storage location policy and may migrate ’s data without his knowledge.

(f)
Data deduplication:  saves huge storage cost due to data deduplication, and a rational  may not pass those benefits to .

In the following subsections, we discuss how Blockchain-based methods enforce the above-discussed properties.1

3.1.2. Blockchain-based cloud data management schemes
Data auditing and sharing schemes .
Zyskind et al. (2015) have presented a personal data management model shown in Fig. 9 in which the encrypted data is stored at a cloud, and the meta-data about the stored data is embedded into a Blockchain along with the access control permissions. The data storage and retrieval requests are sent as transactions () to Blockchain, and similarly, the changes in access control policies are also requested through transactions (). During the verification of  for data retrieving, the access policy stored in the Blockchain is used to check whether the transaction initiator has necessary permissions to retrieve the data. As meta-data about the data and all the actions performed on the data are recorded in the immutable ledger this model ensures correct data auditability. Since the access control rules are stored in the Blockchain, the model provides fair data sharing and policy verification.2 Shafagh et al. (2017) and Liang et al. (2017) applied the same technique of Zyskind et al. (2015) for IoT stream data and data collected from drones respectively

In Gaetani et al. (2017), Gaetani et al. have designed a two-tier Blockchain model to ensure the integrity of data stored in the cloud federation environment. The first tier Blockchain adopts a light-weight consensus protocol for fast performance by storing every operation performed on the federated database. The second tier Blockchain adopts proof-of-work (PoW) to ensure the integrity of the data stored at the first-tier Blockchain. Wang et al. (2018b) have developed a data-sharing mechanism by leveraging Blockchain as a communication channel to distribute the secret key used in attribute-based encryption of the data. They also store encrypted data indexes in smart contracts to increase trust on search operation.

Li et al. (2018a) have adopted Blockchain to store all the logs generated while storing a data block in cloud. However, storing logs increases search time during data auditing. To solve this problem, the authors introduced a proxy node which analyzes the blocks in Blockchain and forms an index. This indexing will reduce time when a  searches for all the historical changes of his data. L. Zhu and Choo (2019) have used smart contracts to validate and trace modifications to cloud data. They designed a delegated proof-of-stake (DPOS) (King and Nadal, 2021) like consensus mechanism with a Blockchain node having a veto power to detect and override the attempts of adding erroneous data to Blockchain.

One of the main challenges in traditional cloud data auditing is that a trusted auditor may compute the auditing result ahead of time and provide the evidence that he has executed the auditing protocol correctly. So, the challenge messages generated during the auditing must not depend on the  or auditor and cannot be predefined (truly random challenge messages are required). To solve this problem, Xue et al. (2019) presented an auditing model which uses random nonces generated during block creation of Bitcoin Blockchain. The auditor has to include the nonce of a particular block specified by the  while generating challenge messages required for auditing. In Xue et al. (2019), the auditors also publish the auditing results to public Blockchain for further tracing and auditing in future. Xu et al. (2020c) uses smart contracts as an arbitrator to resolve disputes regarding the integrity of data stored in the cloud and penalize misbehaving parties. Huang et al. (2020a) have introduced collaborative auditing Blockchain (CAB) running a credit-based consensus algorithm to increase the trust on data auditing results.

Electronic Health Records (EHR) auditing and sharing .
Xia et al. have presented two Blockchain-based secure medical data sharing methods namely BBDS (Xia et al., 2017b) and MeDShare (Xia et al., 2017a). In BBDS, the authors have employed a light-weight permissioned Blockchain with a new Block structure to enhance the scalability and in MeDShare, the authors have proposed to use smart contracts for storing access policies and routed the access requests through Blockchain for secure data sharing. As smart contract tracks every action on data stored in the cloud, trust-less auditing is possible. Li et al. (2018) have constructed a data preservation system (DPS) to store and share personal health data securely. DPS allows the users to submit the hash of the unpreserved data to Blockchain. Later, the users can check and validate the preserved data by retrieving hash from the Blockchain. In Nguyen et al. (2019), the authors have introduced a trusted manager who on receiving a data request verifies the request with access controls stored in smart contracts and take appropriate action based on the verification result. Cao et al. (2019) have adopted Blockchain to protect patient’s health data outsourced to the cloud from illegal modifications by doctors.  Benil and Jasper (2020) have presented an authorized Blockchain-based data sharing, and auditing model for personal health records. Recently, Huang et al. (2021) have proposed a Blockchain-based solution for identifying manipulation of EHR data. They have constructed proof-chain to store users’ manipulation logs on EHR data. At the later stage, the logs stored in the proof-chain are used as evidence for rights protection.

Data tracking and versioning .
In SeShare (Huang et al., 2017), multiple ’s share and modify cloud data and record those changes in the Blockchain for avoiding conflicts arising due to file sharing. In Ramachandran and Kantarcioglu (2017), a document management system called DataProv is constructed. DataProv contains two types of smart contracts: Document_Track and Vote. The Document_Track contract facilitates operations like adding a document, granting and revoking access to the document, and tracking the changes in the document. Any changes to the document are recorded in the ledger only through a voting process conducted by the vote contract. Zhang et al. (2018d) designed a document life-cycle management method where all stages of document management like creation, modification and ownership transfer are recorded in the Blockchain to ensure integrity and auditability. Endolith (Renner et al., 2018) stores meta-data of the data stored in the cloud using a smart contract enabling data auditing, validation, tracking and versioning.

To provide high availability and to avoid accidental loss of data, multiple replicas of data may be stored at multiple clouds. However, managing multiple-replicas correctly without loss of integrity of every replica is a challenging task. This challenge is considered by Yang et al. (2020a), where a modification record table is maintained to track file changes, and similar to Xue et al. (2019), they have also used the random nonces from Blockchain to generate challenge messages during auditing.

Data time-stamping .
A tamper-proof, and correct time-stamping of files is required before storing them in the cloud. However, in traditional cloud computing, a trusted time-stamping server is recruited, which may deviate from its operation by colluding with  or . To mitigate this problem, a time-stamping service based on Ethereum Blockchain known as Chronos is developed by Zhang et al. (2020). For secure and correct time-stamping for a file, a  has to retrieve the hash values of - successive blocks that are most recently accepted on the Ethereum Blockchain and include those hash values in the file. This procedure enables the users to prove that the file was generated no longer than the physical time of the last block of - successive blocks. However, miners to some extent can affect the block time-stamp. To mitigate this problem, Estevam et al. (2021) have proposed a time-stamping service which combines smart contracts and distinct time providers. They have achieved a time-stamping accuracy of milliseconds.

Data migration .
A  do not have control over migration of his/her data between cloud providers. Kirkman and Newman (2018) uses smart contracts to record data migration between cloud providers. A  can know the current position and status of their data by querying the smart contract. Another data migration process between a group of connected cloud data centres is discussed in Li et al. (2019a). Every data duplication and data migration operation between cloud providers are recorded on the Blockchain.

Data deletion .
Yang et al. (2018a) have introduced a cloud data deletion method, where the cloud provider generates a proof of deletion and publish it on a Blockchain. Then, the proof is verified publicly making the deletion operation transparent.

Monetary benefits .
Fan et al. (2018) have stored encrypted data in the cloud and its access policies on Blockchain, but they have innovated in sharing the data by adopting the DPOS (King and Nadal, 2021) consensus mechanism. The miners in Fan et al. (2018) are rewarded with data of their interest. When a  needs data, he/she has to send a request to the miner holding that data. The miner verifies the access policy on data and sends the data to the  if and only if the access policy is satisfied.  has to obtain the key to decrypt the data from the . This setup reduces congestion and latency in the network as miners are distributed around the world, and s are not required to send requests to a centralized cloud. Zheng et al. (2018) have designed a smart contract-based market place for selling and buying personal data. They designed a crypto-token known as Personal Health Data coin (PHD coin) to pay a  in exchange for personal data.

Some s do not share/sell their data but allows the queries on the data. In this model, the data is protected with differential privacy techniques, and a threshold limit is set on the number of queries allowed before leaking privacy. Yang et al. (2018b) employs smart contracts to manage privacy budget. Smart contract may accept/reject a query based on the remaining privacy budget. If a query is accepted, then an anonymization service outputs result by adding sufficient noise to the actual query result, and the privacy budget in the smart contract is updated accordingly. DStore (Xue et al., 2018) explores the idea of using empty discs of home users (lessors) to form a distributed cloud. A single data file may be stored on several discs stationed at different locations across the globe under different lessors causing data auditing problems. A smart contract is used to check data auditing results, to pay storage fee to lessors, and to impose fines on the lessors if they provide incorrect auditing results. Huang et al. (2020c) extended their work of Huang et al. (2017) with fair incentives so that the users who contributed to the meta-data stored in Blockchain will get their incentives fairly.

The comparison of different data management schemes is presented in Table 5.


Table 5. Comparison of Data Management models. DHT—Distributed hash table/Interplanetary file system (IPFS) in cloud. DB—Database in cloud. HDFS—Hadoop distributed file system.

Paper	Data	Blockchain platform/
Consensus algorithm	Off-chain data storage	Data access control through BC	Data sharing	Data integrity/
auditing	Data deletion	Data versioning	Data time stamping
Zyskind et al. (2015)	Generic	Bitcoin	DHT	Yes	Yes	Yes	No	No	No
Shafagh et al. (2017)	IoT	Bitcoin	DHT	Yes	Yes	Yes	No	No	No
Gaetani et al. (2017)	Generic	Two tier:
Consortium PoW	Distributed cloud	No	No	Yes	No	No	No
Alansari et al. (2017)	Generic	Ethereum	Federated cloud	Yes	Yes	Yes	No	No	No
BBDS (Xia et al., 2017b)	EHR	Not discussed	DB	Yes	Yes	No	No	No	No
MeDShare (Xia et al., 2017a)	EHR	Ethereum	DB	Yes	Yes	Yes	No	No	No
Wang et al. (2018b)	Generic	Ethereum	DHT	No	Yes	No	No	No	No
Zhang et al. (2018d)	Generic	Ethereum	DB	No	No	Yes	No	Yes	Yes
Liang et al. (2017)	Drone	PoW	DB	No	No	Yes	No	No	No
SeShare (Huang et al., 2017)	Generic	Not discussed	DB	No	Yes	Yes	No	Yes	No
Yang et al. (2018a)	Generic	Not discussed	DB	No	No	No	Yes	No	No
Endolith (Renner et al., 2018)	Generic	Ethereum	HDFS	No	No	Yes	Yes	Yes	No
DataProv (Ramachandran and Kantarcioglu, 2017)	Generic	Ethereum	DB	No	No	Yes	No	Yes	No
Fan et al. (2018)	ESR	Voting-based	DB	Yes	Yes	No	No	No	No
Kirkman and Newman (2018)	Generic	Ethereum	DB	Yes	Yes	No	No	No	No
Li et al. (2019a)	Generic	Private Ethereum	Federated cloud	No	Yes	Yes	No	No	No
Li et al. (2018a)	Generic	Ethereum	Aliyun	No	No	Yes	No	No	No
Zheng et al. (2018)	EHR	Ethereum	DB	No	Yes	No	No	No	No
Yang et al. (2018b)	Privacy
sensitive data	Hyperledger (BFT)	DB	Yes	Yes	No	No	No	No
DStore (Xue et al., 2018)	Generic	Ethereum	Distributed cloud	No	No	Yes	No	No	No
L. Zhu and Choo (2019)	Generic	Ethereum	DB	No	No	Yes	No	Yes	No
Xue et al. (2019)	Generic	Bitcoin	DB	No	No	Yes	No	No	No
Nguyen et al. (2019)	EHR	Ethereum	DHT	Yes	Yes	Yes	No	No	No
Cao et al. (2019)	EHR	Ethereum	DB	No	No	Yes	No	No	No
Li et al. (2018)	EHR	Ethereum	DB	No	Yes	Yes	No	No	No
Chronos+ (Zhang et al., 2020)	Generic	Ethereum	DB	No	No	No	No	No	Yes
Xu et al. (2020c)	Generic	Two tier:
Consortium Ethereum	DB	No	No	Yes	No	No	No
IPANM (Huang et al., 2020c)	Generic	Ethereum	DB	No	Yes	Yes	No	No	No
Yang et al. (2020a)	Generic	Not discussed	DHT	No	No	Yes	Yes	Yes	No
Benil and Jasper (2020)	EHR	Ethereum	DB	No	Yes	Yes	No	No	No
Huang et al. (2020a)	Generic	Credit-based	DB	No	No	Yes	No	No	No
Huang et al. (2021)	EHR	PBFT	Cloud	No	Yes	Yes	No	No	No
Estevam et al. (2021)	Generic	Ethereum	DB	No	No	No	No	No	Yes
3.1.3. Blockchain-based cloud data access controls
In traditional cloud computing, the access policies are stored in the cloud, which is assumed to process the access requests honestly according to the policy. However, in practice, the cloud provider may deviate from the access policy and may reject access to legitimate /s or allow access to illegitimate /s.

Alansari et al. (2017) have presented an identity and access control system for federated cloud by integrating Blockchain and Intel SGX (Corporation, 2015) technologies. Blockchain ensures non-tampering of access policies, and Intel SGX protects the confidentiality and integrity of the policy enforcement process. Laurent et al. (2018) have recommended creating a smart contract with a specific access control list for every data block outsourced to a remote cloud. So, a  is authorized based on the challenge–response protocol played between him and remote cloud based on the information stored in the smart contract. Cruz et al. (2018) have designed role-based access control using smart contracts (RBAC-SC) to verify access permission across different organizations effectively. Every organization creates a smart contract which consists of functionalities for storing user-role assignments, modifying assignments, and revoking assignments. Similar to Laurent et al. (2018) during authorization, a challenge–response protocol is executed that verifies the ownership of roles based on information stored in the smart contract. Lee and Lee (2019) also introduce RBAC with smart contracts without the challenge–response protocol. Chatterjee et al. (2020) have decoupled access control logic with the business logic of the smart contract and proposes a dynamic role-based access control model using smart contracts.

As the RBAC model suffers from scalability, heterogeneity, and spontaneity problems, Xu et al. (2018) have transcoded capability-based access control policy as smart contracts to support hierarchical and multi-hop delegation in a federated environment. In their work, a smart contract manages federated delegation relationships and capability tokens.  issues authorization and revocation tokens through smart contracts so that the other nodes in the federation accept or reject the access requests.  Di Francesco Maesa et al. (2019) have codified attribute-based access control policies as smart contracts. They adopted XACML (Standard, 2013) for defining policies, and the smart contracts are considered as an executable version of XACML policy. The smart contract also manages the attributes representing the features of subjects required to evaluate the policy. Guo et al. (2019) have introduced multi-authority attribute-based access control with smart contracts. Guo et al. (2021) have designed an efficient traceable attribute-based encryption scheme for fine grained data sharing on Blockchain.

Zhang et al. (2019d) have designed a smart contract-based access control framework with both static access rights control and dynamic rights validation. Their scheme is illustrated in Fig. 10. They have developed three types of contracts: (1) Access control contracts (ACCs) (2) Judge Contract (JC) and (3) Register Contract (RC). For every object–subject pair, an ACC is created to support adding, deleting and updating access controls. ACC also reports misbehaviour of subjects to JC. JC on receiving ACC request initiates a misbehaviour judging method and returns appropriate penalty. RC manages all the ACCs and the judging methods.

Fig. 10. Smart contract-based access control scheme (Zhang et al., 2019d).

All the access control framework discussed till now suffer from privacy problems because the access data stored in Blockchain is publicly available. To mitigate this problem, Yang et al. (2020b) presents AuthPrivacyChain in which the access control policies are encrypted and stored in the Blockchain. Whenever a cloud receives the access request, it retrieves and decrypts the policy from a smart contract and verifies the access request. The cloud also publishes logs of all the access requests on the Blockchain.

3.1.4. Blockchain-based cloud data searchable encryption
In tradition searchable encryption (SE),  is assumed to perform the search service and return the search results correctly. However, in practice,  is untrusted and rational entity which may indulge in fraudulent activity and may return partial or incorrect search results. At the same time, a  may act as malicious and refuse to pay the service fee after receiving the correct search results. This situation leads to the problem of service-payment unfairness and mutual distrust between the  and .

Hu et al. (2018) presented a Blockchain-based solution to address the limitations of searchable encryption. The search index is stored in a smart contract, and the search algorithm is also modelled as a smart contract functionality. These two steps ensure the integrity of the index and correctness of search results. They also introduced the notion of fairness in SE such that a  receives the search results if and only if he pays for the search operation and a  receives the payment if the search token for the requested keyword is sent to the smart contract. Chen et al. (2019) adopted (Hu et al., 2018) for EHR data. They build an index using complex logical expressions facilitating  to construct queries like ”(disease = ‘disease name‘) AND (num1  age  num2)”. In both the works, the search functionality is invoked by the  inducing unnecessary cost to him.

Zhang et al. (2018c) presented a Bitcoin-like transaction model for obtaining fairness in search results. In their model, a  commits a transaction with enough deposit on Bitcoin so that if it provides wrong results or aborts during the subsequent phases, a  can claim the deposit committed by . Similarly,  also commits the payment, which will be transferred to  on providing correct search results or refunded in case the  behaves maliciously. Jiang et al. (2019b) have applied a stealth authorization method to achieve privacy-preserving access authorization delivery through smart contract. In their method, first, a  sends a stealth authorization information to a smart contract and later this information is retrieved by  to construct a search token. With that search token,  calls the search functionality to obtain search results, thereby reducing the burden on . Another advantage is that once the  is authorized, he can search the same keyword multiple times without contacting .

Storing index and performing search operations are costly as they consume more computing resources and time, leading to verifiers dilemma (Jain et al., 2016). To reduce search cost, Jiang et al. (2019a) introduced bloom filter based search to find out low-frequency keyword in the multi-keyword search and filter the encrypted database using the keyword. Since the selected keyword is of low frequency, most of the keywords are excluded from the result, thus reducing the search cost significantly. Another bloom filter based method developed on Hyperledger fabric is discussed by Aigissinova et al. (2020).

Cai et al. (2021) have presented a reliable SE model with negligible cost when both  and  are honest.  verifies the correctness of the search result returned by a  (IPFS service peer), and if found that the result is not correct, then he invokes a dispute resolution mechanism. When a dispute has raised a set of volunteer nodes known as arbiter shard perform the search operation independently. They use a Byzantine voting mechanism to reach consensus among the arbiter shard nodes. A smart contract rewards/penalizes the  and  according to the results returned by arbiter shard. Yang et al. (2019) have designed a set of smart contracts interacting with each other to facilitate fair payments between ,  and .

Contrary to other smart contract-based works, in Yang et al. (2019), search results are computed by  and are verified by the smart contract for correctness. To further reduce the cost incurred due to public Blockchain, Zhang et al., 2019b, Fu et al., 2020b employed a consortium chain whose major stakeholders are s. Encrypted files are stored in Inter-Planetary file system (IPFS) which returns the hash of the stored file as URL. Through transactions, the consortium chain stores the mapping of URLs with the corresponding plain-text. The Merkle root hash of the state of the consortium chain is committed periodically on a public Blockchain guaranteeing its integrity. Apart from maintaining the consortium chain, the s also provide computing power to  for search operations and provide resultant IPFS hash pointers of the queried data to the .

Niu et al. (2019) have adopted the permissioned Blockchain model for securely searching and sharing electronic health records. Tang (2020) have discussed several limitations of directly adopting Blockchain to solve problems in searchable encryption. More importantly, he has identified two privacy leakages: (a) Search patten leakages and (b) Access pattern leakages. He has also pointed out that storing search index and search results forever in the immutable ledger may lead to attacks in future which are currently unknown. He has presented two new methods by storing and searching the encrypted indexes in centralized servers, thus by limiting the Blockchain to ensure only the fairness. He has employed  servers, all servers will perform search operation on locally stored indexes and commits the search result on the Blockchain. At a later stage, the servers reveal the commitment and the smart contract compares all the results returned by servers for similarity. If all are equal, then each server receives payment for computing search operation correctly; otherwise, an off-line arbitration mechanism is initiated. To overcome employing third-party arbitration, the author has improved the initial design by using public-key encryption and zero-knowledge proofs, where the entire dispute resolution will happen through a smart contract.

Sometimes a data owner/user may send a miss-pelt keyword for searching the index. As the above mentioned works fail to handle miss-pelt keywords, Yan et al. (2020) have designed a verifiable fuzzy keyword SE (Li et al., 2010) to handle miss-pelt keywords. Similar to Yang et al. (2019), in Yan et al. (2020) also the search results are computed by  and are verified by a smart contract for correctness. However, the authors applied RSA accumulators (Zhu et al., 2016) for verifying the search results. A  after generating index computes an accumulated value  for a document set  and sends this value to a smart contract. , after receiving search token computes search results along with verification evidence proof  and sends the proof to a smart contract. The verify functionality of smart contract takes both  and  along with search results as input and outputs search results if  has sent the correct result. Otherwise it outputs , indicating wrong results or wrong proof. Their design also supports fair payments and penalizes malicious entities.

In most of the works discussed till now, the search token is generated by , and in some works,  generates search token based on authorization information sent by the . However, in both models,  knows about ’s keyword revealing their private interest. To avoid this retrieval information leakage and hide data user’s keyword Jiang et al. (2020) constructed searchchain that aims to assure private search over authorized keywords with unchanged retrieval order. They modified the oblivious keyword search (OKS) (Ogata and Kurosawa, 2004) as OKS with authorization (OKSA) through which  can search privately within an authorized set of keywords. Further, they use ordered multi-signatures (OMS) while generating blocks to commit the sequence of retrieval transactions. Comparison of Blockchain-based searchable encryption systems is presented in Table 6.


Table 6. Comparison of Blockchain-based searchable encryption systems.

S. No	Paper	Platform	Storage location	Keyword	Search	Verification	Fair payments
1	Hu et al. (2018)	Ethereum	Cloud	Single	Smart contract	Not required	Yes
2	Zhang et al. (2018c)	Bitcoin	Cloud	Single	Cloud	Bitcoin script	Yes
3	Cai et al. (2021)	Ethereum	Decentralized	Single	Decentralized node	Data user/Arbitar Shard	Yes
4	Zhang et al. (2019b)	Hybrid (consortium and public)	IPFS	Multiple	Cloud	Data user	No
5	Jiang et al. (2019b)	Ethereum	Cloud/IPFS	Single	Smart contract	Not required	No
6	Chen et al. (2019)	Ethereum	Cloud	Single	Smart contract	Not required	Yes
7	Niu et al. (2019)	Permissioned	Cloud	Multiple	Permissioned Blockchain	Not required	No
8	Jiang et al. (2019a)	Ethereum	Cloud	Multiple	Smart contract	Not required	No
9	Yang et al. (2019)	Ethereum	Cloud	Multiple	Cloud	Smart contract	Yes
10	Tang (2020)	Ethereum	Cloud	Single	Cloud	Arbitar/smart contract	Yes
11	Aigissinova et al. (2020)	Hyperledger fabric	Cloud	Single	Smart contract	Not required	No
12	Jiang et al. (2020)	Searchchain	Decentralized	Single	Not discussed	Data user	No
13	Yan et al. (2020)	Ethereum	Cloud	Single	Cloud	Smart contract	Yes
3.1.5. Blockchain-based cloud data deduplication schemes
Most of the data being uploaded to the cloud is redundant (Meyer and Bolosky, 2012) and thus wasting large storage space. To avoid redundancy and save storage costs,  use data deduplication technique. However, the issues with existing deduplication techniques are:

(a)
Correct deduplication rate: As  save storage costs by adopting deduplication, proper incentives on storage fee are required for  to adopt deduplication. In general, the incentives on storage fee are calculated based on the deduplication rate. A rational  to increase its profits may not compute the deduplication rate correctly and thus making the  pay higher fees even though he opted for the deduplication.

(b)
Fair payments: An honest  should receive storage fee if and only if an honest  receives the file link of the data requested to store at the .

(c)
Cross- deduplication: Currently, to perform cross- deduplication, a trusted party have to be recruited, which maintains a central repository storing meta-data of all the files stored at different s. However, having a trusted party introduces a single point of failure and finding an idle party which will behave honestly at all times is difficult.

Li et al. (2017) have designed CloudShare to enable cross- data deduplication. When a  receives an upload request for file a , it checks whether it possesses a copy of . If the check is valid, then it simply adds the requested  to the set of s that are already registered to the file . If the check is not valid, then it queries the private Blockchain maintained by a set of s whether any  has a copy of . If a  holds the copy of , then the  is added to set of the s that are already registered to the file  at . Otherwise, it asks the  to upload the file and the ownership information is recorded in the private Blockchain. Collaborating through Blockchain eliminates the need for a central repository and saves a lot of storage spaces to  and also saves bandwidth to .

A smart contract-based deduplication method is presented by Li et al. (2018b). Before uploading the file,  downloads the meta-data of the files stored at a  from the Blockchain and performs the duplication check locally. If a duplicate is found, then the  requests the smart contract to register him as an owner to the duplicated file. The smart contract in-turn sends a script to .  signs and sends the script to the . Then, the  completes the script and sends it to the smart contract, which then adds the  as an owner to the requested file. Wang et al. (2019c) use a smart contract to facilitate fair payments for deduplication between  and a . They replaced the trusted party for payments in traditional deduplication with a smart contract. In their work, the  has an option to initiate the penalty transaction when the  behave maliciously without sending the file link to the .

3.2. Resource allocation, management and supervision
Resource allocation has been one of the most widely studied problems in cloud computing. Allocation of resources to users involves decision making concerning when, what, how much and where to allocate the available resources (Yousafzai et al., 2017). The resource management life cycle comprises resource advertisement, allocation, monitoring and freeing. During resource allocation, several factors, like resource utilization, pricing, availability, quality of service, etc., are considered. Once the resources are allocated through some mechanism, it is essential to monitor the state of the allocated resources. We categorize the entities involved in resource allocation and supervision as cloud user  and cloud provider .

3.2.1. Issues in cloud resource allocation, management and supervision
The issues in cloud resource allocation, management and supervision are as follows:

(a)
 advertises a resource for rent/lease. However, in conventional cloud computing, users cannot verify the authenticity of the advertised resources.

(b)
A rational  may allocate the same resource to one or more users leading to overloading of resource, thereby severely affecting the quality of service.

(c)
Resources are allocated by a resource allocator which is a part of . The allocator may behave maliciously during the allocation and may not run the allocation algorithm correctly without any prejudice.

(d)
 is in full possession of the logs generated during the resource usage. The provider may tamper the logs to cover up his lapses during the resource provisioning. The logs may also contain sensitive information which can be accessed by an untrusted provider.

3.2.2. Blockchain-based resource allocation, management and supervision
In Blockchain-based resource allocation, most of the works focus on resource pricing because pricing models increase the total utility of the cloud provider (Yousafzai et al., 2017). Among several resource pricing models, auction-style pricing mechanisms (Wang et al., 2012, Shi et al., 2014, Zhang et al., 2016) have gained more interest as they reflect the underlying trends in demand and supply of cloud resources. (Gu et al., 2018) have designed a Vickrey–Clarke–Groves (VCG)-based auction (Varian and Harris, 2014) mechanism using smart contracts where a  posts his request by sending a transaction to the smart contract.  responds with a sealed-bid which are revealed at the end of the bidding round. Then the smart contract computes the winner with the highest bid, and the winner pays price equal to the highest bid of losers. The smart contract also handles the payments to providers.

Zavodovski et al. (2019) have transcoded a dominant strategy incentive compatible (DISC) double auction (Roughgarden, 2010) method as a smart contract. They have also used a two-phase bidding protocol similar to Gu et al. (2018) where bids are committed initially and revealed later. The smart contract computes the matching of s with s according to the auction rules. Another two-phase bidding double auction method is presented in Liu et al. (2020), where a long-term auction for mobile Blockchain (LAMB) is modelled as a smart contract to determine optimal matching for users and providers.

A Blockchain-based combinatorial auction method for VM allocation is discussed by Chen et al. (2020). They realize auction fairness (bids once committed cannot be modified) and trade fairness (the honest provider receives pay if and only if the honest user receives the requested VMs). They use the ladder mechanism presented in Bentov and Kumaresan (2014) to obtain trade fairness. A continuous double auction (CDA) method is modelled as a smart contract by Xie et al. (2020a). In their work, the providers and users submit asks and bids respectively at any time to a smart contract. The smart contract runs CDA auction, and if there is a deal, then the result is broadcast to everyone.

Zanzi et al. (2020) have introduced NSBchain to allocate network slice resources to  through smart contracts. NSBchain is responsible for slice allocation, enforcing policy, billing and resource management. Reantongcome et al. (2020) also consider smart contracts for resource allocation in multi- scenario. They addressed the co-resident attack by auditing the activities of malicious users logged in the Blockchain. Zhang et al. (2019) have developed two smart contracts namely smart trading contract (STC) for facilitating resource trading and smart loan contract (SLC) for facilitating the resource constraint users to borrow coins from banks and use these coins to pay to providers for consuming resources.

Saranyu (Nayak et al., 2018) is an application built on Quorum (Chase, 2018) to provide user management through smart contracts. The architecture of Saranyu is illustrated in Fig. 11. Initially, users and providers have to be registered with a smart contract. Then, a mapping between users and providers will happen through a smart contract which results in issuing delegation rights to users. The smart contract also monitors the resource usage, and this information is used for billing users. The billing is settled in the native cryptocurrency of the underlying Blockchain technology. Overall, Saranyu offers four services: identity management, authentication of users, authorization on resource exploitation and sharing. Kempf et al. (2019) constructed a cloud market place based on (Nayak et al., 2018) improving the transparency and auditability of cloud market place.

Pan et al. (2018) have discussed a credit-based resource management model in which the provider’s resources are mapped with internal currency coins (credit coins). When a user’s account is created on a Blockchain, it is bootstrapped with some initial credit coins. The amount of coins a user is holding determines the number of resources he can obtain from the provider. The provider keeps an account of debits and credits of a user and provides the resources correspondingly (other factors like priority, application type, past behaviour, etc., are also considered). The interactions like registration, requesting and allocating resources triggers the smart contracts for secure logging and auditing. Another credit-based resource allocation model is discussed in Li et al. (2019c). The users can lend coins from other users or providers and pay the coins to providers for fast computing resource trading. All the lending and payment transactions are recorded on the Blockchain for secure transaction history, and the credit values are automatically adjusted according to their lending and payment transactions. Recently, Sun et al. (2020) presented a Blockchain-based cooperative method where the providers work cooperatively to provide resources to users. They have modelled break-even and break-even free double auctions as smart contracts to determine the price and to allocate resources.


Fig. 11. Saranyu architecture (Nayak et al., 2018).

Zhao et al. (2018) have designed a hybrid Blockchain, namely Mchain to log all the activities of VM (VM measurements) on Mchain to provide better transparency, integrity, auditability and controllability on allocated cloud resources. Mchain is a two-layered Blockchain where the first layer outputs a semi-finished block, and the second layer takes the output from the first layer and generates a mature block which is stored on Mchain. They are two types of blocks in Mchain: data block (VM measurements data) and policy block (VM’s user-defined access policy). In the first layer, a candidate block is broadcast, and every other node in the Blockchain validates all the data in the block and signs the block if validated. If every node signs the block, then consensus on the candidate block is achieved, and it is sent to the second layer. In the second layer, all the valid nodes compete to solve PoW puzzle, and when a nonce is found, the semi-finished block will become mature and is broadcast in the Blockchain network. Then, every node will validate the block and adds it to their local copy of Mchain.

In previously discussed works when the providers advertise their resources, there is no mechanism for users to verify the provider’s claims regarding available resources. Wang et al. (2020) have designed a hybrid Blockchain network consisting of a public Ethereum network and consortium Blockchains. A provider before joining the consortium network must brace for public verification of their resource capabilities on Ethereum network. The consortium Blockchain is used for real-time monitoring of computing resources. They have also introduced a token called ResourceCoin (RCoin) reflecting the available resources at the provider. The comparison of resource allocation and supervision methods is presented in Table 7.


Table 7. Comparison of Blockchain-based resource allocation methods.

Category	Paper	Platform	Blockchain objective
Auction based resource allocation	Gu et al. (2018)	Ethereum	VCG auction
Zavodovski et al. (2019)	Ethereum	Double auction (DISC)
Liu et al. (2020)	Ethereum (DPOS)	Double auction (LAMB)
Chen et al. (2020)	Ethereum	Combinatorial auction
Xie et al. (2020a)	Ethereum	Double auction (Continuous)
Multi-tenant resource allocation	Reantongcome et al. (2020)	Ethereum	Resource allocation and activity logging
Saranyu (Nayak et al., 2018)	Quorum	Resource allocation and activity logging
Credit-based resource allocation	Zhang et al. (2019)	Ethereum	Resource allocation and coin loaning
Pan et al. (2018)	Permissioned Ethereum	Resource allocation and activity logging
Li et al. (2019c)	PoW	Resource allocation
Multi-provider
resource allocation	Sun et al. (2020)	Ethereum	Double (break-even and break-even free)
Resource supervision	Zhao et al. (2018)	Mchain	VM measurements
Wang et al. (2020)	Hybrid (Ethereum and Consortium)	Resource allocation and monitoring
Other	Zanzi et al. (2020)	Hyperledger	Network slice allocation
4. Blockchain-based platform-as-a-Service
PaaS support businesses to develop and host applications giving the developers freedom to concentrate on building software without having to worry about the operating system, software updates, infrastructure and storage. As PaaS is a connector between IaaS and SaaS, the literature of Blockchain-based PaaS overlaps with that of Blockchain-based IaaS and SaaS. Therefore, in this section, instead of discussing PaaS, we rather focus on the literature of Blockchain-based PaaS applications developed and hosted using PaaS. Mainly, we focus on two of the most widely developed PaaS applications: (1) Computation-as-a-service (CaaS) and (2) Data aggregation-as-a-service (DaaS). In CaaS, a cloud provider sets up an execution environment and a user outsources a computation to cloud expecting output. For example, user outsources a data mining task along with input to a cloud which executes the task and returns the mining results. Similarly, in DaaS, a cloud provider sets up a data collection application which requests specific data from users. For example, a cloud provider sets up a mobile crowdsensing task and publishes the task details publicly. Interested participants read the task requirements and send the requested data. The cloud platform processes the received data and obtains meaningful results.

4.1. Computation-as-a-service
4.1.1. Issues in CaaS
Outsourcing computation has become a common practice. A resource-constrained user outsources a resource-intensive computation to large computational systems like a cloud. The cloud computes and returns the result of the outsourced computation. The user pays a pre-agreed amount of money to cloud for using its computational resources. In today’s world, an agreement between the user and the cloud provider about the cost and other QoS parameters is needed before outsourcing the computation. In many cases, the cost of consuming resources has to be paid before actually using cloud service. The user to have greater confidence in the computation performed by the cloud, has to verify the result of the computation for correctness.

In traditional cloud computing, it is not possible for a user to pay to a cloud only after verifying the correctness of the returned result. In general, the cloud is assumed to be trusted by the user. However, the cloud may behave rational and to save computing resources; it may not compute the result correctly. Then, the only option for the user to get back his payment is by going through a cumbersome legal process which may take additional resources and time.

Nevertheless, with the advent of Blockchain technology and smart contracts, a new cloud computing paradigm has evolved where the cost for outsourcing a computation will be paid to the cloud provider if and only if the cloud provider computes and sends the result of the outsourced computation correctly. The verification of correctness of result depends on the type of the verification technique employed.

4.1.2. Types of verifiable computations
There are three techniques to verify the correctness of the result computed by the cloud: (1) Proof-based methods (PBVC), (2) Replication-based methods (RBVC), and (3) Challenge-based methods (CBVC). In PBVC, the cloud has to submit a proof of correctness along with the result of the computation. Some of the well known proof-based systems are summarized in Walfish and Blumberg (2015). In RBVC, the computation is outsourced to multiple clouds, and the results from them are compared for similarity. If the comparison is a success, then the user accepts the result; otherwise, a dispute-resolution protocol is initiated to identify the malicious cloud who submitted the wrong result. Some of the recent works in RBVC are Belenkiy et al. (2008), Canetti et al. (2011) and  Küpçü (2017). In CBVC, the computation is outsourced to only one cloud, and any public party can challenge the result computed by the cloud. If no party challenges the result, then the user accepts it. Otherwise, a dispute resolution mechanism is executed.

4.1.3. Blockchain-based verifiable computation
Kumaresan and Bentov (2014) have introduced the notion of Blockchain-based verifiable computation. In their work, a user creates a Bitcoin output script containing a pre-agreed pay amount. Then the computation is outsourced to a cloud. The script can be redeemed either by providing the correct output of the outsourced computation or by providing some pre-shared secrets. Zhang et al. have presented two works, namely BPay (Zhang et al., 2018b) and BCPay (Zhang et al., 2018a), for outsourcing computations using Bitcoin scripts. Similar to Kumaresan and Bentov (2014), the authors constructed a robust, fair payment model where a cloud provider receives the payment for computation if and if it produces a valid proof of correctness of the computation. A scalable solution using smart contracts is presented in Eberhardt and Tai (2018). The user and the cloud provider runs a one-time setup process after which the user generates a verifying contract and deploys it on the Ethereum network. The cloud computes the outsourced computation and sends the proof of correctness consisting of witness to verifying contract. Dorsala et al. (2020) constructed a fair payment model using (Eberhardt and Tai, 2018) as a verification contract and shows that the cost of running a fair verifiable method on top of Ethereum is negligible when both user and cloud provider are honest. Guan et al. (2021) also realized fairness in outsourcing polynomial computation using smart contracts.

Dong et al. (2017) have outsourced the same computation to two clouds and created a prisoner’s dilemma between them to avoid collusion. They have constructed three contracts to extract the correct result from two rational clouds: (1) Prisoner’s contract, which rewards honest cloud and punishes malicious cloud. (2) However, the clouds can collude and counter the prisoner’s dilemma using a colluder’s contract. (3) Traitor’s contract provides additional bounty to the honest cloud to counter collusion. The work in Dong et al. (2017) assumes that the user as trusted and requires a trusted third party to resolve disputes when the outputs of the clouds do not match. The work in Avizheh et al. (2019) assumes a rational user and uses a verification game to resolve disputes between the two clouds. The clouds have to construct a Merkle tree with the intermediate states of the computation and have to return the Merkle root hash along with the result of the computation. Then, a smart contract randomly generates two different indexes, one for each cloud and asks the clouds to submit Merkle proof. The smart contract identifies the malicious cloud by constructing the Merkle root from the Merkle proofs submitted by clouds and matches it against the Merkle root submitted earlier. However, Avizheh et al. (2019) does not discuss the collusion attack where the clouds collude to provide the same incorrect result, thereby increasing their payoff.

In Dorsala et al. (2020), the clouds have to submit an inner state hash (ISH) (Küpçü, 2017) along with the result of the computation. A lazy cloud cannot submit a correct ISH without actually computing the result. Even the copy attack cannot be performed because the clouds have to commit a hash of the random number while showing intent and this random has to be concatenated to ISH while submitting the result. In case of disputes, a verifying contract is executed, and its cost is collected from the malicious cloud. However, running a verifying contract is costly, and due to the verifier’s dilemma (Jain et al., 2016), the costly verifying contracts can jeopardize the Ethereum network. The major drawback of RBVC methods is that the user has to pay the cost of computation to every cloud provider, which is a major burden to the user.

In TrueBit (Teutsch and Reitwießner, 2017), the computation is outsourced to a single cloud who submits the result to a smart contract. Then challengers are invited to challenge the correctness of the result. If there is a challenge, then a verification game is initiated through a series of rounds, where each round recursively checks a smaller and smaller subset of the computation. The challengers are rewarded for finding the errors and penalized for wrong alarms. To encourage the challengers to take part in the system, the system occasionally forces the honest cloud to submit wrong results (forced errors) and offers a big bounty to verifiers for finding the errors. Harz and Boman (0000) presented a method similar to TrueBit except that a cloud and challengers are randomly assigned, and all will compute the computation and report the result to a smart contract, and any disputes in the results are resolved by a dispute resolution protocol similar to TrueBit. In Harz and Boman (0000), the probability of finding false computation depends on the number of challengers recruited for a computation. The verification game in Harz and Boman (0000) is illustrated in Fig. 12.

Król and Psaras (2018) presented a method using a trusted execution environment (TEE) (Corporation, 2015). Challengers are not required in their method because the honest behaviour of the cloud is enforced by executing the outsourced computation in a TEE. The shortcomings like collusion and sybil attacks of Harz and Boman (0000) are discussed by Nabi et al. (2020). The authors introduce a random audit of results returned by clouds and penalize malicious clouds by sharing their pre-committed deposit as a reward to diligent clouds. Although (Nabi et al., 2020) is better method than (Harz and Boman, 0000), it cannot eliminate the collusion attacks completely. More recently, Eisele et al. (2020) have proposed use of trusted mediators for dispute resolution. In Table 8, we show the comparison of different verifiable computation schemes.


Fig. 12. Verification game (Harz and Boman, 0000).

Three practical systems, namely  Golem (2014), iExec (Fedak et al., 2018), and SONM (SONM, 0000) all built on Ethereum for outsourcing computation to large computational systems. Golem uses RBVC and log analysis for checking correctness whereas iExec employs an Intel SGX for correct computation. SONM currently supports verification only by users, and no verification method is adopted. One may refer to Uriarte and DeNicola (2018) for a detailed analysis of these three systems.


Table 8. Comparison of Blockchain-based verifiable computing methods.

S. No	Paper	PB/RB/CB	Platform	Verifier	Dispute resolution	Penalties	Fair payment
1	Kumaresan and Bentov (2014)	PB	Bitcoin	Bitcoin scripts	Not required	Yes	Yes
2	Dong et al. (2017)	RB	Ethereum	Third-party	TTP	Yes	Yes
3	Teutsch and Reitwießner (2017)	CB	Ethereum	Verifiers	Verification game	Yes	Yes
4	Harz and Boman (0000)	CB	Ethereum	Verifiers	TTP	No	Yes
5	Eberhardt and Tai (2018)	PB	Ethereum	Smart contract	Not required	No	Yes
6	Król and Psaras (2018)	CB	Ethereum	Trusted execution environments	Not discussed	Yes	Yes
7	Zhang et al. (2018b)	CB	Bitcoin	Bitcoin scripts	Verification game	Yes	Yes
8	Zhang et al. (2018a)	CB	Bitcoin	Bitcoin scripts	Verification game	Yes	Yes
9	Avizheh et al. (2019)	RB	Ethereum	Smart contract	Verification game using Merkle tree	Yes	Yes
10	Nabi et al. (2020)	RB	Ethereum	Verifiers	TTP	Yes	Yes
11	Dorsala et al. (2020)	PB
RB	Ethereum	Smart contracts	Verification contracts	Yes	Yes
12	Eisele et al. (2020)	CB	Ethereum	Third-party	TTP	Yes	Yes
13	Guan et al. (2021)	PB	Ethereum	Smart contracts	Not required	No	Yes
4.2. Data aggregation-as-a-service
In this section, we review Blockchain-based crowdsensing methods as crowdsensing is the widely explored data aggregation service.

4.2.1. Issues in crowdsensing
The rapid increase in the number of mobile devices and wearable devices, equipped with multiple sensors (e.g., gyroscope, accelerometer, microphone etc.) led to the emergence of new sensing paradigm known as Mobile Crowdsensing (MCS). In MCS, a cloud provider  posts a sensing task and a data provider  responds to the task by sending the data. Although crowdsensing shows prominence in many applications such as transportation (Mohan et al., 2008, Thiagarajan et al., 2009), healthcare (Datta et al., 2019), and environment monitoring (Maisonneuve et al., 2009, Mun et al., 2009), it suffers from the following problems:

(a)
Privacy: Sensing data reveals users personal information, and hence privacy is the utmost priority in MCS.

(b)
Rewards: The rewards to a  depends on factors like sensitivity of data, sensing time, data quality, etc., The  cannot be trusted to compute rewards correctly.

(c)
Fairness: The  may not pay to  after receiving the data or a  may not provide data after receiving data.

4.2.2. Blockchain-based crowdsensing solutions
Li et al. (2019b) have presented a Blockchain-based framework known as CrowdBC in which a set of smart contracts are employed to perform sensing task posting, data receiving, reputation management and reward assignment operations without a centralized entity. In CrowdBC, a  evaluates the quality of the data submitted by a set of s, and the evaluated results are given to smart contract based on which the rewards and reputation values are calculated. To achieve fairness and preserve privacy, Wang et al. (2018a) have presented a -anonymity privacy protection method where s form as a group of  members and submit their data as group data for quality-evaluation. Miners evaluate the data and pay the group according to the quality of the data. However, the members in a group trust each other and the group leader is expected to distribute the rewards correctly to group members.

Another work aiming to monetize sensing data fairly without compromising privacy is discussed in Cai et al. (2018). They employ two servers as mediators between  and s. The two servers execute a protocol based on secret sharing and garbled circuits to establish ground truth on encrypted data. Then, each server encrypts the learned ground truth and commits it along with a masked encryption key (,  is actual encryption key) on a smart contract. A  interested in buying the providers data sends two keys encrypted with the corresponding server’s public key along with payment to the smart contract. If the cloud server accepts the ’s offer, it will encrypt the  with the key sent by the  (,  is the key sent by the ). In order to avail the pay sent by the , the cloud server must reveal the masked key  and . Then, a smart contract verifies the commitments and sends rewards to the server, which will be shared to providers according to the quality of their data with respect to the estimated ground truth. The method is fair in between servers and , but the  still needs to trust the servers for correct computation of ground truth.

In ZebraLancer (Lu et al., 2018), the s encrypt their data with ’s public key and send it to the smart contract.  decrypts the data off-chain and computes the rewards to s based on the quality of the data provided. Then, the  computes a proof of correctness using zk-SNARK about the computation of rewards and sends this proof to the smart contract. The smart contract consists of zk-SNARK verification algorithm and returns true if and only if the  computed the rewards correctly. If the  fails to produce correct proof, the reward deposited by him is distributed to providers. ZebraLancer provides both privacy and fairness, but zk-SNARK requires a setup phase where either a trusted entity or all the participating entities jointly should establish a common reference string. Also, the verification time increases with an increase in the number of s limiting the applicability of the system. Shi et al. (2018) have developed a decentralized application (Dapp) known as MPCSToken, where a fault-tolerant incentivization mechanism is modelled as a functionality of a smart contract to facilitate payments between  and . Chatzopoulos et al. (2018) have employed a trusted party (Internet service providers) to protect the location privacy of the s by masking their real-identities with pseudonyms. However, employing a trusted, centralized party opposes the cause of using Blockchain.

To protect location privacy, a hybrid Blockchain model is discussed by Yang et al. (2019c). The authors propose to use a public Blockchain to publish task and assume a trusted agent who retrieves the tasks from the public chain and publishes them to a private Blockchain. s are allowed to transact with multiple private chains to thwart re-identifications attack caused due to s transaction history. The trusted agent submits the sensory data to the public Blockchain on behalf of the s, and the payments are transferred according to the employed quality estimation method. MCS-Chain (Feng and Yan, 2019) is similar to Li et al. (2019b), except that a new light-weight consensus mechanism suitable for mobile crowdsourcing is designed. Unlike in PoW, the generation of new blocks in the presented consensus mechanism is determined by the total amount of payment records waiting to be stored in the next block. The mechanism is guaranteed to eliminate forks by enforcing rules based on time, reputation and awards. Miners compute the reputation values by running a trust evaluation algorithm based on feedback received from all the participating entities.

Zhang et al. (2019a) have put forward a Blockchain-based MCS model without the use of smart contracts. Initially,  commits an incentive policy on a Blockchain and announces the task. Then the s encrypt their sensing data with a homomorphic encryption key generated by the  and send the commitment of the ciphertext to the Blockchain. Later, the providers and  reveal the committed data and the incentive policy, respectively, by sending a transaction to Blockchain. Then, the  decrypts the data, evaluates it and computes the rewards accordingly, which will be transferred to s through Blockchain. However, the model lacks fairness since the  receives the data before actually paying s.

CrowdR-FBC (Yu et al., 2020) propose to use fog nodes as an intermediary between s and data providers. The fog nodes are responsible for maintaining the Blockchain network. A  announces the task on an MCS platform which then encrypts the task and sends it to the fog nodes. The fog nodes select the data providers based on the reputation maintained in the Blockchain and send the encrypted task to the provider who then decrypts, computes the task and sends the encrypted result back to fog nodes. Then the fog nodes forward the encrypted results to MCS platform along with pseudo-ID of the s. Then the MCS platform decrypts the result, computes the new reputation values and sends them to fog nodes. The fog node maps the reputation values to real-world identities and updates them on the Blockchain network. This approach solves the privacy problem as the MCS platform does not know the real identities of s, and the fog nodes do not know the task or the data. However, the work does not discuss the collusion between crowdsourcing platform and the fog nodes which will seriously affect the privacy of the providers, and also did not discuss the incentive policy for different participating entities. Wei et al. (2020) have presented the use of consortium Blockchain and constructed an incentive method based on reputation, quality of data and provider’s valuation. Similar to Zhang et al. (2019a), the method also lacks fairness.

Hu et al. (2020) have transcoded a three-stage Stackelberg (von Stackelberg, 2010) game as a smart contract which pays the s according to their category (instant and monthly). A fair payment model similar to Li et al. (2019b) is constructed using smart contracts in SenseChain (Kadadha et al., 2020) except that the platform is constructed for multiple s and multiple s and reputation is maintained for both s and s. A hybrid Blockchain platform for MCS is presented in Zhu et al. (2020). A public chain running DPOS consensus and many private subchains running PBFT consensus are used to publish and record the information of public and private crowdsourcing tasks, respectively. After the private task is completed, the leader of the subchain generates a zk-SNARK proof about the all the subchain blocks of a task and sends it to the public chain where a zk-SNARK functionality verifies the proof and records it into Blockchain ledger. CrowdBLPS (Zou et al., 2020) use Blockchain to preserve location-privacy of the s, and their main emphasis is on modelling an optimized s selection algorithm as a smart contract. Huang et al. (2020b) have introduced Blockchain-based MCS into smart factories where s record the noise of the machines through their mobile and submit the data on the Blockchain expecting a reward. They have designed a new reward mechanism, namely dynamic reward ranking as a smart contract. Comparison of different Blockchain-based MCS methods is given in Table 9.


Table 9. Comparison of Blockchain-based crowdsensing systems.

S. No.	Paper	Blockchain platform	Registration	Provider selection criteria	Quality evaluation	Reward distribution	Reputation feedback	Worker privacy	Data privacy	Fair payments
R	W			
1	CrowdBC (Li et al., 2019b)	Ethereum	Yes	Reputation	SC (Miners)	Equal	Yes	Yes	Pseudoanonymity	Encryption	No
2	Wang et al. (2018a)	Bitcoin	No	Open	Miners	Quality-aware	No	No	k-anonymity	No
3	Cai et al. (2018)	Ethereum	No	Open	SC (Miners)	Quality-aware	No	No	Pseudoanonymity	Encryption	Yes
4	ZebraLancer (Lu et al., 2018)	Ethereum	Yes	Open	Requestor	Quality-aware	No	No	ZKSNARKs	Yes
5	MPCSToken (Shi et al., 2018)	Ethereum	No	Auction	No	Fault Tolerance Incentivization Mechanism (FTIM)	No	No	No	No	No
6	Chatzopoulos et al. (2018)	Ethereum	Yes	Auction	Third-party	Equal	No	Yes	Pseudoanonymity with TTP	No	Yes
7	Yang et al. (2019c)	–	No (public BC)
Yes (private BC)	Open	SC (Miners)	Equal	No	No	Private Blockchain run by third-party	No	No
8	MCS-Chain (Feng and Yan, 2019)	MCS-Chain	Yes	Bargain and Reputation	Requestor	Equal	Yes	Yes	Pseudoanonymity	Encryption	No
9	Zhang et al. (2019a)	Transaction-based	No	Open	Requestor	Equal	No	No	Pseudoanonymity	Homomorphic encryption	No
10	CrowdR-FBC (Yu et al., 2020)	CrowdR-FBC	Yes	Reputation	Third-party	No	No	Yes	Pseudoanonymity	Encryption	No
11	Wei et al. (2020)	Consortium	Yes	Auction	Requestor	Quality-aware, Bid-based and Reputation-based	No	Yes	Consortium Blockchain run by trusted agents	Encryption	No
12	Hu et al. (2020)	Ethereum	Yes	Reputation	SC (Miners)	Quality-aware and Reputation-based	No	Yes	Pseudoanonymity	No	Yes
13	SenseChain (Kadadha et al., 2020)	Ethereum	Yes	Reservation	SC (Miners)	Quality-aware	Yes	Yes	Pseudoanonymity	No	Yes
14	zkCrowd (Zhu et al., 2020)	Hybrid (DPOS, PBFT)	Yes	Capacity	No	Equal	No	No	ZK-SNARK (private tasks)	No
15	CrowdBLPS (Zou et al., 2020)	Ethereum	Yes	Location	Requestor	Quality-aware	No	No	Pseudoanonymity	Encryption	No
16	Huang et al. (2020b)	Ethereum	No	Open	SC (Miners)	Dynamic reward ranking	No	No	Pseudoanonymity	No	Yes
5. Blockchain-based Software-as-a-Service
Software-as-a-service allows users to access the software through the Internet on a subscription basis. However, most of the SaaS applications are migrating from a monolithic architecture to microservice architectures. Therefore, in this survey, we have considered two emerging SaaS models: (1) Microservices and (2) Virtual network functions.

5.1. Microservice-as-a-service
5.1.1. Challenges in microservice-as-a-service
Containerization technology decomposes the traditional monolithic applications into a suite of small services known as microservices each running in its own process and communicating through lightweight mechanisms. However, existing microservices architecture suffers from the following problems:

1.
Microservices are advertised on a centralized platform which may be untrusted, and hence a trusted registry and service discovery is required for the advertisement and discovery of microservices.

2.
Microservices lacks trusted communication platform for exchanging messages. They either depend on secret channels or public-key cryptography for secure and authenticated message exchanges.

5.1.2. Blockchain-based microservices
Tonelli et al. (2019) have mapped the existing microservices architecture to smart contracts architecture. They have also demonstrated a case study by modelling the existing microservices-based system as a set of smart contracts and tested them on Ethereum Blockchain. Nagothu et al. (2018) have adopted Blockchain for a smart surveillance system constructed as a set of microservices. They have employed Blockchain for securing messages exchanged between microservices and also to provide integrity to the microservice database by periodically storing the hash of the database in the Blockchain. Xu et al. (2019a) have constructed BlendMAS; a Blockchain-based decentralized microservices architecture for smart public safety. They have divided the permissioned Blockchain into two sets of microservices: mining services and security policy services. Mining services are responsible for running the consensus algorithms, and security services are responsible for identity management, access controls etc. These decentralized security microservices work as a service cluster to offer a scalable, flexible and lightweight data sharing and access control mechanism. Similar approach is followed in Xu et al. (2019b) for constructing decentralized marketplace and in Xu et al. (2020a) for constructing decentralized multi-domain avionics systems.

5.2. VNF-as-a-service
Cloud computing infrastructures contain a number of servers with storage and compute capabilities. With the advancement of technology and increase in demand of cloud servers, the existing cloud infrastructure is being enhanced to support ETSI Network Function Virtualization (NFV) architecture (Functions Virtualisation, NFV). The core objective of NFV is to decouple the physical network infrastructure from the service functions that run on them. NFV mainly consists of three components: NFV Infrastructure (NFVI), Virtual Network Functions (VNF) and Management and Network Orchestration (MANO). In NFV, a cloud service is decomposed into a set of VNFs, which could be then deployed as a software running on one or more physical servers (Mijumbi et al., 2016). VNFs can be easily managed as they can be relocated and instantiated at different network locations on-demand.

5.2.1. Issues in VNF-as-a-service
In NFV, the VNF orchestrator (VNFO) receives the request from the user for setting up a new VNF or scaling the already running VNF. Then, the VNFO relays the request to a virtual machine manager (VMM). However, the communications between the VNFO and VMM occurs through the unauthenticated channel leading to a variety of attacks (Lal et al., 2017). Another issue in VNF is that multiple cloud providers may cooperatively deploy NFVs leading to data leakage problems.

5.2.2. Blockchain-based VNF-as-a-service
The communication between VNFO and VMM is generally secured by public-key cryptography systems that depend on trusted third parties. The communication involves orchestration requests regarding how to create, modify, destroy or migrate the VMs. A compromised communication channel may cause malicious creation, modification, destruction, or migration of VMs. Hence, a secure, reliable and tamper-resistant interface is required to relay requests from orchestrator to VMM.

Bozic et al. (2017) built a Blockchain-based Virtual Machine Orchestration Authentication (VMOA) system to relay messages from orchestrator to VMM securely. In VMOA, the orchestrator before sending a request to VMM, sends the request as a transaction to a Blockchain network which is then stored in a secure and immutable ledger. When VMM receives the request, it uses the information stored in the ledger for authenticating the orchestrator and allocates the VMs only on successful authentication. The proposed mechanism is illustrated in Fig. 13. The authors propose to build VMOA using Hyperledger Fabric.

Alvarenga et al. (2018) have proposed a secure configuration management of VNFs by logging the signed VNF configuration and management information on the Blockchain. They employed a BFT consensus algorithm (Castro and Liskov, 0000) and designed two types of transactions: a configuration transaction to install configurations on VNFs and a configuration request transaction to request the configuration state of a particular VNF. These transactions are appended to the Blockchain aiding traceability and accountability of VNF configuration updates. Besides, they have also presented a secure VNF migration through transactions on the Blockchain.

Fig. 13. Transactions as allocation and de-allocation orchestration commands (Bozic et al., 2017).

Another problem in NFV is to identify a malicious or faulty VNF configuration because the presence of a single malicious VNF configuration can affect the entire service function chain. Further, if the orchestrator is compromised, it may overwrite the log to hide its malicious activity/threats. In order to mitigate the activities of malicious VNFO, Rebello et al., 2019a, Rebello et al., 2019b have proposed to connect every VNF in a network with Blockchain to log all operations during service chain execution. The recording of operations in Blockchain provides tamper-proof auditing of orchestration operations which helps in identifying threats caused due to malicious VNF. In Rebello et al. (2019a), the authors built BSec-NFVO for providing non-repudiation, auditability and integrity of orchestration operations in multi-tenant NFV environment. In Rebello et al. (2019b), the authors demonstrated the applicability of their proposal by adopting network slices as a use case where all the VNFs in a particular network slice are connected to a particular Blockchain. They exploited the Hyperledger Fabric channels to create different network slices running their own Blockchains in isolation.

Fu et al. (2020a) have put forward an idea of adopting Blockchain for synchronizing messages between distributed NFV–MANO systems. In their work, the NFV-based edge servers perform Blockchain computations along with assigned tasks. Each NFV–MANO system collects their local messages, divides them into transactions and broadcasts them. A Blockchain node tracks all the transactions from the last synchronized state of the MANO systems, and a consensus process will start after receiving the synchronization request from MANO systems. They have used BFT protocol (Castro and Liskov, 0000) for consensus in which one of the NFV-based nodes is designated as Blockchain primary node and others as replica nodes. The primary node broadcasts the pre-prepared messages consisting of transactions collected from the last synchronized state of the MANO systems. Next, the replica nodes send a prepare message to all the Blockchain nodes. Then, all the nodes send a commit message to all other nodes. Finally, the Blockchain nodes reply to all NFV–MANO systems with the new validated messages. Thus, all the NFV–MANO systems are message synchronized.

Another critical factor in NFV is the trust in VNF orchestrator as it oversees the end-to-end VNF lifecycle management. Mishra et al. (2020) have developed a series of smart contracts to increase transparency in the operations of VNF orchestrator for end-to-end VNF lifecycle management. The smart contracts act as a market place for third-party VNF developers to advertise their VNF packages and acts as a trusted platform for edge clouds to buy the advertised packages. The VNF orchestrator will validate the package sent by developers and requests sent by edge clouds. Upon successful validation, the orchestrator selects the best suitable VNF from the available VNF pool and migrates that VNF from cloud to the requested edge cloud. The system also contains a reputation/feedback contract to eliminate malicious VNF packages.

Although the above-discussed works solve some of the problems in NFV through Blockchain, the limitation from the perspective of end-users is how to ensure that the VNF package acquired by the end-user is not malicious and not tampered. Currently, the end-users rely on a trusted centralized database to trust that the VNF packages are not malicious and not tampered. However, the centralized database may be compromised or becomes a single point of failure. Scheid et al. (2019) have presented a VNF package repository called BUNKER by replacing the centralized database with a smart contract. In BUNKER, a package creator registers its new VNF packages with a smart contract by sending the hash value of a VNF package. Users interested in a VNF package must obtain a licence from the smart contract by transferring the necessary payment. After obtaining the licence, the users can retrieve the VNF source code from the external VNF storage and can verify the integrity of the obtained package by querying the smart contract. BUNKER also has a smart contract-based reputation/feedback mechanism to avoid users submitting malicious VNF packages.

6. Challenges, potential solutions and future research directions
The integration of Blockchain and cloud computing is an emerging research topic. In recent years, many research efforts have been devoted to publishing novel works on this emerging topic. In the previous sections, we have presented a comprehensive survey of the existing Blockchain-based cloud services. In particular, we have discussed Blockchain-based storage-as-a-service, resource allocation, outsourcing-as-a-service, crowdsensing-as-a-service, microservice-as-a-service, and VNF-as-a-service models. This section lists key research challenges, potential solutions, and future research directions that will encourage more innovative studies in this research area.

6.1. Blockchain for infrastructure-as-a-service
We have discussed two essential services as a part of IaaS: (1) Storage-as-a-service and (2) Resource allocation and management. We have presented several schemes which replace trusted parties with Blockchain for obtaining data integrity and auditability. The commonality of all the schemes is that the data is stored in the cloud, and the meta-data is stored in public/private Blockchain to ensure integrity and auditability. Also, many works suggested transcoding access control policies as smart contracts to ensure fair data access and sharing. Some of the works also realized version management and timestamping of the cloud data through Blockchain. We have also discussed the schemes storing indexes of the cloud data in the smart contracts to ensure correct search results. Outsourcing search queries to smart contract yield a correct and immutable result and requires no further verification. Finally, a few works discussed realizing correctness and fairness in data deduplication through Blockchain.

One of the IaaS provider’s primary responsibilities is to allocate and supervise the resources under their control. Current cloud models have little or no transparency since most resource allocation and supervision operations are hidden from the IaaS user. Recent works suggested integrating Blockchain in resource allocation and supervision for better transparency. Specifically, many Blockchain-based auctions schemes are designed for resource allocation. A few schemes also discussed logging VM measurements in tamper-proof Blockchain for future auditing and threat detections. Billing schemes are also constructed using Blockchain to increase trust in IaaS users and visualize the resource components involved in the billing.

6.1.1. Challenges in Blockchain-based IaaS
1.
Current public Blockchains like Bitcoin and Ethereum already suffer from large storage requirements, and storing all meta-data of cloud data in these Blockchains increases their size tremendously.

2.
Cloud computing needs low latency while allocating and scaling resources. However, the use of smart contracts for the allocation of cloud resources increases the latency.

3.
Storing access policies in smart contracts and frequent interactions with smart contracts reveal a company’s sensitive data publicly. To avoid the privacy problem of access policies, as suggested by Yang et al. (2020b), encrypted access policies can be stored in smart contracts. However, in this case, the decision of granting an access right remains with the cloud, which is not a trusted entity.

4.
Mining nodes are not synchronized in the current public Blockchain systems, leading to unauthorized access control problems. To understand the problem, consider the following scenario. Let a company with a revoke transaction has revoked a user. After some time, the revoked user has issued an access transaction. Let us assume that the winning mining node has not received the revoke transaction and received only the access transaction due to the delay in network propagation. In this case, the revoked user’s access transaction is mined, and he will get access to a company’s resources even though he is revoked.

5.
Allocating resources through smart contract-based resource auctions may reveal a cloud user’s usage trends, leading to data leakage treat.

6.
The non-compliance of Blockchain with GDPR rules (Goddard, 2017) is also one of the significant roadblocks in the broad adoption of Blockchain-based IaaS.

6.1.2. Potential solutions to challenges in Blockchain-based IaaS
1.
To solve storage and latency issues in Blockchain-based IaaS solutions, researchers explore emerging technologies like decentralized cloud Blockchain systems based on RIFT protocol. For example, Ilcoin (Ilcoin, 2021), based on RIFT protocol, can produce a 5 GB block with high transaction throughput. Similar to RIFT protocol, Aternity channels (Aeternity channels, 2021) are also claimed to solve scalability issues of Blockchain. Another solution for the storage issue is integrating decentralized storage systems like IPFS and public Blockchains like Ethereum with oracles like Chainlink (Chainlink, 2021). With oracles, smart contracts can know the data stored at an IPFS and take decisions according to the results returned.

2.
To solve the privacy problems in Blockchain-based IaaS, researchers earlier used mixing techniques and zero-knowledge proofs. However, new privacy solutions like Secret network (Secret network, 2021) can be investigated to solve privacy problems in Blockchain. The secret network contains secret contracts which enable encrypted input, state, and output.

3.
To solve GDPR compliance, many works based on the road-maps presented in Anon, 2019, Blockchain and GDPR, 2021 are starting to explore GDPR compliant Blockchain systems.

6.2. Blockchain for platform-as-a-service
This survey has discussed two major PaaS applications: (1) CaaS and (2) DaaS. With the advent of Blockchain-based CaaS, a user can pay to the cloud provider if the cloud provider returns the correct computation results. This survey has discussed different types of Blockchain-based CaaS: proof-based, replication-based, and challenge-based.

6.2.1. Challenges in Blockchain-based CaaS
1.
The current Blockchain systems cannot support proof-based verifiable computations for large input sizes.

2.
Replication-based verifiable computations have cost with respect to the number of cloud providers recruited.

3.
Challenge-based verifiable computations are efficient in cost, but they either take many rounds or require trusted parties to resolve disputes.

6.2.2. Potential solutions to challenges in Blockchain-based CaaS
1.
The native support for zero-knowledge proofs and elliptic curve operations in Blockchain architecture greatly reduces the setup and execution costs of proof-based verifiable computation.

2.
The native support for verifying the operations of the trusted execution environments also stimulates the growth of new Blockchain-based CaaS applications.

We have discussed several Blockchain-based data aggregation-as-a-service methods which focus on preserving the privacy of the data provider, computing correct rewards for data providers and realizing financial fairness.

6.2.3. Challenges in Blockchain-based DaaS
1.
The primary concern in DaaS is the privacy of the data provider. We have observed that many schemes adopted the pseudo-anonymity of Blockchain to protect the privacy of the user. However, there are also a large number of deanonymization techniques (Khalilov and Levi, 2018) that imperil privacy. The challenge is to adopt better privacy protection schemes to thwart the deanonymization attempts.

2.
The second concern in DaaS is the correct reward distribution to data providers. Some schemes model reward functions as smart contracts to obtain correctness in the computation of reward functions. However, this method is not feasible for many data providers due to the cost involved and the limitations of smart contract execution. Thus, the challenge is to create a cost-efficient Blockchain-based reward distribution method.

6.2.4. Potential solutions to challenges in Blockchain-based DaaS
1.
As discussed earlier, solutions like mixing techniques, zero-knowledge proofs, and secret networks can be explored to solve privacy issues in Blockchain-based DaaS. In addition, the support to techniques like homomorphic encryption, multi-party computations, and distributed or threshold privacy greatly increases the adoption of Blockchain-based DaaS.

2.
The execution of reward distribution function on-chain is a poor design choice of a Blockchain-based DaaS system. Instead, the reward function can be executed off-chain similar to Lu et al. (2018), and by using zero-knowledge proofs or trusted execution environments, its correctness proof can be verified on-chain. Again, native support for zero-knowledge proofs or trusted execution environments in Blockchain architecture is required.

6.3. Blockchain for software-as-a-service
In this survey, we have discussed schemes mapping the microservice architecture to smart contracts architecture. In addition, we have discussed schemes that provide trust between the VNF orchestrator and VMM. Some schemes also discussed logging of VNF operations on a Blockchain to provide tamper-proof auditing. Finally, some schemes also discussed establishing a Blockchain-based trusted VNF package registry to provide tamper-proof packages to end-users.

6.3.1. Challenges in Blockchain-based SaaS
1.
The existing Blockchain architectures have minimal or no integration with well-established systems like ERP and CRM, which hinders the adoption of Blockchain-based SaaS applications.

2.
There are many similarities between microservices and smart contract architectures. However, if a microservice is deployed as a smart contract on a public Blockchain system, then updating the code or functionalities of the microservice is not possible. Each time a microservice needs an update, it has to be deployed as a new smart contract, causing many microservice management issues. Also, microservice QoS parameters like execution time and response time greatly increase due to the inherent latency problems of Blockchain systems.

6.3.2. Potential solutions to challenges in Blockchain-based SaaS
1.
New paradigms like Blockchain-oriented software engineering (Rocha and Ducasse, 2018, Marchesi et al., 2018) are actively explored for integration of Blockchain with software development architectures.

6.4. Future research directions
Apart from the potential solutions discussed in previous subsections, in this subsection we will list some more future research directions in Blockchain-based cloud computing:

1.
We have observed that most of the Blockchain-based IaaS research is focused on storage-as-a-service. However, there is a lack of focus on other IaaS services such as network firewalls, security, and load balancing.

2.
Fair payments models using Blockchain in IaaS are mostly unexplored, and we expect a great potential of useful work on constructing fair payment models in the future.

3.
In recent years, different cloud providers are mutually providing resources giving rise to a federated paradigm. Blockchain with its properties can benefit federated cloud computing to inculcate trust among untrusted cloud providers.

4.
We have observed that the existing Blockchain-based resource allocation schemes mostly follow commit and reveal methods during auctions. However, there is a gap in designing online resource allocation schemes using Blockchain.

5.
We have observed not many studies on Blockchain-based SaaS except a few on microservices and VNF. Hence, we believe there is much scope to explore Blockchain-based SaaS models.

6.
As fair payments are not only related to cloud computing and are a requirement across different domains, a token (For example, ERC 20 token) like standards with necessary functionalities can be developed for fair payments between two parties.

7.
We have observed that one of the least explored but most important aspects of cloud computing is the rating, charging, and billing of cloud services. In SaaS, there are many types of billings like transaction-based, account-based, subscription-based, etc.; The current SaaS models face challenges in managing the complexities evolved due to different types of billing while ensuring transparency. Blockchain, with its novel properties, can ensure transparency and trust in the billing of cloud services.

8.
As Blockchain is not a part of the current legal framework protecting cloud users and providers’ rights, a comprehensive legal framework has to be developed for board adoption of Blockchain-based cloud services.

9.
The development of globally accepted standards like ISO can bolster the growth of Blockchain-based cloud computing.

7. Conclusion
In the past decade, we witnessed a huge demand for cloud services and applications. Nevertheless, cloud computing inherently suffers from centralization, lack of trust and transparency. On the other hand, Blockchain is an emerging area being adopted in many engineering fields, including cloud computing. However, the integration of cloud and Blockchain is still in its infancy stage. In this paper, we conducted a comprehensive survey of existing Blockchain-based cloud services to promote future research. We listed the important characteristics of Blockchain that are essential for the reengineering of cloud data centres. Our comprehensive survey maps the existing Blockchain-based cloud services to the most primitive cloud service models IaaS, PaaS and SaaS. To be specific, we explored Blockchain-based storage-as-a-service, resource allocation, computation-as-a-service, data collection-as-a-service, microservice-as-a-service and VNF-as-a-service. We have summarized the challenges in existing works and listed potential solutions and future directions that will motivate the interested researchers and practitioners to put more research efforts into this promising area.