In the program-driven information age, programming education is concerned by the global education system, which makes the cultivation of children’s programming ability become the focus of attention. However, there is no clear definition of programming ability and teaching model. Through the snowball method, 86 studies from 1980 to 2020 were reviewed. The results showed that K-12 programming ability is defined as a stable personality and psychological characteristic that consisted of metacognition, cognition, operation and communication, including 17 sub-abilities. On this basis, the K-12 programming ability teaching model was constructed by integrating the educational levels, teaching methods, teaching tools, assessment approach in each research. Among them, the programming education of K-12 was committed to cultivate students’ cognitive and operational ability. Additionally, There are most researches on teaching intervention for primary school students. Block-based tools are most widely used in research, and project-based learning and problem-based learning are common teaching methods in current programming teaching, while game-based learning, blended learning and cooperative learning have also become the trend in programming teaching. In the meanwhile, programming testing, observation and interview are widely used in programming teaching. This model provides more scientific and standardized reference and guidance for researchers and teachers, and contribute to significant implication for policy, theory and practice of K-12 programming education.

Access provided by University of Auckland Library

Introduction
In today’s artificial intelligence era, programs drive the informatization of human society, which makes programming education attract more and more attention from global education systems (Nouri et al., 2019). In the process of human thinking development, childhood is the golden age of enlightening and cultivating thinking. Some research results have proved that computer programming education can improve children’s information literacy (Grover & Pea, 2013). Hence, there are many different views have emerged in experimental research focusing on “programming ability”, such as computational thinking, logic reasoning thinking, spatial imagination. (Unal & Topu, 2021; Pérez-Marín et al., 2020;).

The core of K-12 programming education is to enrich students’ programming experience. (Sáez-López et al., 2016). Applicable teaching methods and tools can increase students’ interest in the classroom and promote their motivation for programming learning (Erümit, 2020). At present, most of the research on programming teaching relies on the development of programming tools to improve the quality of the course (Andrew et al., 2018). For instance, visual programming software has improved the teaching method and the sense of the students’ experience (Erümit, 2020). Besides, the choice of teaching methods and tools in the classroom may produce different teaching effects. Studies have shown that game-based teaching provides students with a gamified environment that can make learners involved in programming activities with a playful and dynamic way (Koupritzioti & Xinogalos, 2020).

However, with the continuous review of the research on children’s programming ability, the existing research has not yet provided sufficient perspectives to make a more detailed explanation and integration of children’s programming ability (Grover & Pea, 2013). In various educational experimental studies, the intervention results will be affected by the participants’ different educational levels(Bursal, 2013). And the utilization of different teaching methods and tools will also cause differences of teaching effects (Scherer et al., 2020). Programming teaching required to be carried out in a way that conformed to the children’s thinking characteristics in order to promote children to adapt to the development of information age as soon as possible (Erümit, 2020). Therefore, it is necessary to extract the education level, teaching methods, tools, and assessment approach in programming teaching to form appropriate teaching model. In general, our study integrated the teaching methods and conditions of programming ability, summarized the connotation of children’s programming ability in detail, and provided a comprehensive teaching model for cultivating programming ability.

Clarifying the definition of programming ability
The purpose of computer programming teaching is to improve students’ skills through different teaching methods and tools (Scherer et al., 2020). Moreover, the improvement of programming ability required to be taken as the instruction purpose, which is also the direction of programming instructional design. Nevertheless, the specific definition of “programming ability” is still not clear through the retrieval and further screening of students’ programming ability. Therefore, to clarify the concept of boundaries programming abilities, performance and explore the specific connotation, the two concepts of programming and ability as the source was sorted out through the interpretation of the concept “programming + abilities” perspective of the integration concept.

The early definition of “programming” mainly focused on the field of computer science and the concept was proposed by computer practitioners. They held the standpoint that programming was the process of formulating a timetable for a single sequence of operations required to perform calculations (Blackwell, 2002). Along with the development of programming languages, numerous scholars combined programming with the field of mathematics and asserted that programming is essentially the translation of human-oriented language into a computer-oriented language to solve mathematical problems (Blackwell et al., 2019; Papert, 1980), which was more inclined to program in a specific environment. Furthermore, the field of integration computer science with mathematics advocated that programming was the basic process of accurately searching for mathematical formulas to find solutions and labeled content related to problem-solving through computer-oriented languages and symbols (Xinogalos et al., 2018; Erümit, 2020).

With the continuous development of applied technology, programming plays a significant role in other fields. Due to the different fields of programming, its related language expressions and symbols have an essential change (Xinogalos et al., 2018). Programming languages gradually changed from machine-oriented languages such as assembly language and C language to object-oriented languages, which raise factors such as object, function, and scheduling process in the design process (Xinogalos et al., 2018). Not only that, but “non-traditional coding” environments have gradually appeared in the process of programming applications, such as Logo, Scratch (Pérez-Marín et al., 2020; Erol & Çırak, 2021). This kind of programming environment makes programming gradually change from “specialization” “high barriers” to “generalization” “low barriers” (Papert, 1980). The transformation has improved the limitations of early programming that used computer-oriented languages and symbols to design and solve problems in the field of mathematics, indicating that programming application has shifted from solving specialized field problems to more general data processing problems (Blackwell et al., 2019). Therefore, the definition of “programming” at this stage is the process of writing code instructions in a suitable programming language for solving general problems.

After that, people gradually realized that the difficulty of programming activities will be affected by the programmers’ performance in the interaction process of programming and programmer (Flórez, et al., 2017; Demir, 2021). Thus, programmers’ cognitive ability was considered as a certain influence factor. After analyzing the cognitive challenges faced in programming activities and combing the background and practical experience of programmers, it is indicated that the key to programming depend on the handling and presentation of problems (Erol & Çırak, 2021). Blackwell et al. (2019) summarized the cognitive challenges and practical experience of programmers and suggested that the definition of programming should be far away from the traditional field of computer science. The connotation of programming shows commonality through the combing: a. The programming is that programmers write code instructions and input them into the computers in an appropriate form for processing. b. The process of general problems is affected by the relevant social environment of the programmer.

Ability is usually used to measure and maintain to people’s stable self-potential characteristics when completing specific activities, which is a direct factor affecting activity efficiency (Wheldall et al., 2017; Christine, 2010). It’s related to brain function and it is usually used to measure the performance of adults for any type of task. The ability of children will not be as stable as adults for a long time and it will reveal a systematic growth trend with the increase of age. Hence, the child’s ability is reflected in whether the child completes various tasks in a relatively stable state in a short period (Wheldall et al., 2017). According to the ability function and the cognitive object dimension, the children’s ability was classified into four kinds (Christine, 2010): a. Metacognitive ability, the ability of an individual to recognize and regulate his cognitive process, mainly including the ability of self-evaluation and self-monitoring (Schoenfeld, 2016); b. Cognitive ability, the ability of the individual to receive, process, and use information, mainly including observation ability, thinking ability. (Francisco, 2017); c. Operation ability, the ability of individual to manipulate, product, and sports; d. Communication ability, the individual participates in social group life, interacts with the surrounding environment, and maintains a coordinated psychological condition (Fleming & Dolan, 2012).

Overall, the concrete manifestation of programming ability should not only be based on the conceptual perspective of programming, but should be measured by whether students can complete the code writing tasks independently. Moreover, in the process of learning programming and computer-related knowledge, more attention to the effect of ability transfer in this process should be considered. Programming is the utilization of appropriate code algorithms to run computers smoothly and achieve the effect of solving general problems; ability is the psychological characteristic of self-stability when completing a specific task, and both are affected by the social environment. “Programming” provides a specific environment for the concept of programming ability, that is, the purpose of problem-solving is achieved through appropriate code instructions. Simultaneously, the “ability” provides the concept of programming ability with the conditions for problem-solving, that is, the psychological characteristics of the process of problem-solving. Therefore, integrating the concepts of “programming” and “ability”, programming ability refers to the stable personality and psychological characteristics of the individual in order to make the computer run to solve general problems in the process of using appropriate languages ​​and algorithms to write code instructions for the computers.

This study focused “programming ability” on the stable personality psychological characteristics for utilizing the computers to successfully achieve the goal of problem-solving, as the subject direction for subsequent research and include it in the subsequent search criteria. According to the classification standard of “ability”, we also summarized the overall programming ability into four categories as the basis for screening relevant research results (see Fig. 1). Programming metacognitive ability is the individual’s self-cognition process in the programming teaching process based on the cognitive ability, which mainly includes self-evaluation and self-monitoring in the task of writing code for problem-solving (Christine, 2010; Erol, & Çırak, 2021). Programming cognitive ability is the ability of the individual to receive, process, and use relevant information in the process of programming, which mainly includes thinking ability, imagination, logical reasoning ability. Programming operation ability is the ability of the individual to manipulate computers and make related programs ability, such as writing code instructions, numerical calculations, graph drawing. Communication ability is that individuals participate in programming activities to interact with teachers and peers and maintain a coordinated psychological condition (Fleming & Dolan, 2012).

Fig. 1
figure 1
K-12 programming ability

Full size image
Intervention factors of programming teaching
Teaching methods and tools
At present, computer programming in basic courses is introduced into the education systems of various countries. Programming is a compulsory course for children aged 5 to 16 in the UK. It is worth mentioning that programming classrooms mostly use gamified programming software for teaching.To promote the improvement of students’ programming ability, part of the research focused on the changes in teaching methods and teaching tools. For example, the project based learning in the block programming environment (Scratch, Alice.etc.) can develope the problem-solving ability of K-12 students (Zhao and Shute, 2019; Erol and Çırak, 2021; Iskrenovic-Momcilovic, 2019; Mladenović et al., 2018). The game software platform provided new experience for programming teaching, which can promote the development of students’ abstract thinking (Xinogalos et al., 2018; Pellas & Vosinakis, 2018; Seralidou & Douligeris, 2021; Arféa et al., 2020). The use of different teaching methods and tools can provide students with richer learning conditions (Garcia, 2021; Erümit, 2020). Although the development and application of teaching methods and tools have been generally accepted, little attention has been paid to the system integration of corresponding teaching conditions for the development of programming ability (Grover & Pea, 2013).

Educational level
Educational level may also be one of the essential factors affecting programming ability, which may reflect the continuous improvement of students’ cognitive level with the change of educational level (Bursal, 2013). At the meantime, the educational level is regarded as the standard of students’ cognitive level to conduct programming intervention. For example, in the study of programming on CT skills, the cognitive ability of primary school students is lower than that of high school students, that is to say, high school students are better able to develop their CT skills in programming. (Waterman et al., 2020). Considering that in the process of programming teaching, the growth of students’ programming ability will be affected by their cognitive level, and the teaching methods and tools conformed to each stage of programming teaching are different. Therefore, this study takes the educational level as an intervention factor.

Assessment approaches
Currently, the assessment approach of students’ programming ability mainly included test questions, rubric, work analysis and so on. (Golding and Adam, 2014; Lindh & Holgersson, 2007; Clements et al, 2018). For example, game-based teaching usually be related to the qualitative analysis (such as observations and interviews with students) to fully understand the students’ learning experience (Asbell-Clarkea et al., 2020). Different teaching methods are suitable for different assessment approaches. In higher education, teachers can reflect on the teaching process based on students’ feedback, thereby improving teaching effectiveness (Clinton & Lee, 2014). Therefore, we considered that the assessment approaches may affect the growth of students’ programming ability. And appropriate teaching methods and tools utilized in programming teaching at each stage of the assessment approach are also different.

Research purposes
In the collation of previous research, various researches lack comprehensive attention to all dimensions of developing children’s programming ability. This study tried to classify children’s programming ability through systematic literature review, utilized programming teaching factors in different dimensions to compile a new theoretical model. Three problems were principally answered in this study:

RQ1: Which children’s programming abilities can be effectively promoted by K-12 programming teaching?

RQ2: What are the common and applicable teaching methods, tools, and assessment approaches at different educational levels in K-12 programming teaching?

RQ3: How to combine various dimensions into a new comprehensive teaching model to promote children’s programming ability?

Methods
This study adopts systematic literature review to explore the connotation of programming ability and better programming teaching design. Positive retrieval strategies and methods ensure the systematisms and integrity of the literature review (Kitchenham et al., 2009). In this regard, an article retrieval method that combines retrieval formulas and snowball was selected. The snowball method based on the conventional literature search utilized the reference list of the literature or literature citation to expand the scope and determine the review literature sample (Wohlin, 2014).

Search strings and inclusion criteria
This study identified various literature sources to facilitate retrieval of formula extract the relevant literature. Research sources include a. Academic databases: Web of Science, Science Direct, and supplementary data database Google Scholar; b. Academic journals: Computers & Education, Computers in Human Behaviour, Journal of Computers in Education, etc.; c. Scholars’ works or studies who have published important research or reviews in computer science education; d. Existing meta-analysis and literature review references.

Search keywords include children, K-12, K-6, computer, code, programming, ability, etc. The specific search formulas include the following:

a.
(child* OR K-12 OR K-6) AND (comput* OR program* OR cod*)

b.
(comput* OR program* OR cod*) AND teach*

c.
(program* OR comput* OR cod*) AND ability

The snowball method was adopted in the retrieval process. To consider the setting of the initial articles collection, we screened the title or subject of the articles for the first time. The selected articles are tentatively designated as the candidate’s initial article set. To further exclude irrelevant articles, the keywords and abstracts of the candidate’s initial article set were screened a second time. The specific standards are as follows:

a.
Research articles related to programming teaching effect and programming ability (unlimited type);

b.
The article is highly cited or the latest published in the related field;

c.
The article covers as much possible as different authors and years.

Not only that, the inclusion criteria of the literature samples in the literature review have been refined to facilitate analysis and research. The specific criteria are as follows:

a.
Articles must be peer-reviewed, excluding unpublished papers or bachelor papers;

b.
Articles cover different databases, magazines, authors, and years as much as possible;

c.
Empirical or case study articles related to programming teaching effectiveness and programming ability;

d.
The subjects of empirical research must be in any stage of K-12;

e.
The study specifically reported the subjects’ educational level, teaching methods, teaching tools, and other factors.

Snowballing approach
The key to the snowball method depends on the iteration in the search process. Wohlin (2014) summarized the iteration process into three steps (see Fig. 2): a. Start set: Articles retrieval through search formulas and selection of high-quality articles to set up the initial articles collection, which serves as the starting point for snowballing. b. Backward snowballing: Filter articles that meet the standard through the reference list of the initial articles collection c. Forward snowballing: Filter articles that meet the standard through the reference list of the initial articles collection.

Fig. 2
figure 2
Snowballing Flowchart

Full size image
The initial collection of articles plays a significant role in the subsequent snowballing iterative process (Wohlin, 2014). Based on completing the search formulas, 35 highly cited papers of different authors and related to the topic as a candidate of initial articles were selected for the setting of the initial article collection. And then 35 papers have reviewed the theme and abstracts. Finally, 13 papers were selected as the initial article collection (see Appendix A).

The first snowballing round was started based on the initial articles collection. A preliminary screening of titles and abstracts was carried out for the references in the initial articles collection and the articles in the citation list. A total of 516 articles (389 from the backward snowballing and 127 from the forward snowballing) need to be further reviewed. According to the sample inclusion criteria, 16 articles were finally selected as the literature samples. In the iterative process, the search efficiency N is the ratio of the number of articles included to the number of reviews. When N = 0, the iterative process can end (Wohlin, 2014). The efficiency N1 of the first round of snowballing is 3.1% (N1 > 0%), which means that a second snowballing round is required. The 16 articles mentioned above were taken as the new beginning in the second round. A total of 481 articles (319 from the backward snowballing and 162 from the forward snowballing) were reviewed. Finally, 11 articles were selected as samples. The efficiency was calculated as N2 = 2.2% (N2 > 0%), which means the third searching is required.

Repeating the above steps, a total of 207 articles (154 from backward snowballing and 53 from forward snowballing) were reviewed in the third snowballing. 7 articles were included in the study, with an efficiency of N3 = 3.3% (N3 > 0%). A total of 159 articles (115 from backward snowballing and 44 from forward snowballing) were reviewed for the 4th snowballing. 2 articles were included as samples, with the efficiency of N4 = 1.2% (N4 > 0%). In the 5th snowballing, a total of 86 articles (65 of them from reverse snowballing and 21 from forward snowballing) were reviewed. However, the number of articles meeting the inclusion criteria was 0, that is, the efficiency N5 = 0, which indicates the snowballing iteration process end.

Finally, after 5 times snowballing iterations, 86 articles were included in the literature samples. Among them, 54 articles were searched by the previous retrieval formula, and the other 32 articles were searched by snowballing method (see Table 1).

Table 1 The number of papers and efficiency in the iterative process
Full size table
Data analysis
The specific process of systematic literature analysis is as follows: Step 1. carefully review each article included in the study and extract the factors that need to be analysed, including educational level, teaching methods, tools, programming ability, assessment approaches. Step 2. Based on step 1, sort and summarize the factors and perform coding analysis to form charts. Step 3. Compare and analyse the relevant data of the factors in the articles. Step 4. Based on the data of each dimension to construct children programming ability model.

Results
86 studies were screened and included in this research through search formulas and snowballing approach. Each article contains factors such as programming ability, teaching methods and tools, subjects. Through the extraction and coding of various elements such as publication year, programming ability, teaching methods, and tools, we conducted analysis and summarised to answer the research problems.

Statistical description and distribution of studies
Distribution by publication year
This study sets the time span of the literature from 1980 to 2020, comprehensively considering the influence of the development of theoretical and practical tools of children programming education. Papert created the Logo language in 1968 as the beginning of children’ s programming education (Mcnerney, 2004), but since then the teaching practice of Logo in school has not been satisfactory.

Because computer science courses in schools tend to teach computer application skills, which lead to the research on the teaching of children’s programming has stalled (Papert, 1993). In 1980, Papert published the book “Mindstorms: Children, Computers, and Powerful Ideas”, which redefined the way of children learning in a computer environment on the basis of Piaget’s constructivism. Papert argued that “children need to create and build cognitive models through specific media” and “children can rely on specific artifacts to achieve great-leap-forward development of thinking”. And the terminology “computational thinking” was put forward for the first time, which provided a new theoretical and practical starting point for children’s programming education and people begin to focus on the development of children’s ability in the process of learning programming. Since then, various programming tools, such as Scratch (Jr), tangible programming and robotics have emerged, which provide a rich supporting environment for the development of children’s programming ability (Mcnerney, 2004). Therefore, the time span from 1980 to 2020 was adopted as the scope of literature retrieval in this study.

Figure 3 shows the publication years of research on children’s programming ability from January 1980 to 2020. It can be seen that taking five years as the unit interval on the abscissa, count the number of years of publication of each paper, and calculate the number of articles published in this interval. In the five years (1980–1984), there are three studies about programming intervention to promote children’s programming ability (Gorman & Bourne, 1983; Clements & Gullo, 1984; Pea & Kurland, 1984). Gorman and Bourne (1983) study proposed that the teaching of computer programming through Logo can improve the logical thinking of primary school students. Subsequently, research on the impact of Logo teaching on children’s cognitive abilities has emerged. From 1980 to 2020, the number of experimental studies on programming ability showed an overall increasing trend, which reached the peak after 2015. The number of research has shown a significant growth trend after 2000.

Fig. 3
figure 3
Number of articles from 1980 to 2020

Full size image
With the advancement of technology, programming teaching tools have gradually enriched and improved. For example, Scratch is a popular visual block programming language with the characteristic of simplicity and fun, which provides convenient conditions for children programming education and research (Tikva and Tambouris, 2021; Scherer et al., 2020).

Description and distribution by programming ability
Table 2 reveals a summary of children’s programming abilities. There are 17 kinds of programming teaching in 86 studies to promote the performance of students’ ability, such as self-monitoring ability, logical thinking, critical thinking, coding, organizational planning, language expression. According to the classification criteria of “ability” in the dimensions of functions and cognitive objects, we summarized the 17 abilities that appeared in the research into 4 categories, named metacognition, cognition, operation, and communication.

Table 2 Classification of programming ability
Full size table
Metacognition is the ability of people to think about self-recognition, which mainly includes self-supervision and self-regulation. And it reflected the students’ reflections and views on programming learning in the programming process (Schoenfeld, 2016). From the perspective of programming teaching, cognitive ability is the acceptance and application of programming things. It is the abstract psychological changes that students show through brain thinking processing in the course of programming (Wheldall et al., 2017), mainly including logical thinking, spatial imagination. Operation ability is reflected in the physical operation of programming tools to make projects. The interaction between students and teachers, and peers reflects children’s communication ability (Fleming & Dolan, 2012).

Figure 4a showed the proportion of various programming sub-capabilities in researches. The number of articles related to different programming abilities was summarized. Programming ability is classified as the grouping criteria, which is named metacognition (A1), cognition(A2), operation(A3), communication(A4). The results showed that compared with the other three types of abilities, metacognition ability accounts for the least proportion (F = 0.070). While operation accounts for the largest proportion in the overall study (F = 0.48), followed by cognitive ability (F = 0.30). We speculate that due to the multidimensional nature of brain, operational ability is easier to evaluate than metacognitive and cognitive ability (Wheldall et al., 2017; Christine, 2010). The accumulation of cognition provides conditions for the exercise of operation, and the development of operation promotes the improvement of cognition (Schoenfeld, 2016; Waterman et al., 2020).

Fig. 4
figure 4
Distribution of intervention factors of programming teaching

Full size image
Description and distribution by teaching methods and tools
Table 3 indicated a summary of specific programming teaching methods. At present, there is no exact standard for the classification of teaching methods, and different educational backgrounds and themes also lead to the diversity of teaching methods(Akdeniz, 2016). Thus, the interaction among students, teachers and technology should be comprehensively considered in programming teaching, so various teaching methods are also applied to programming education (Erümit, 2020; Ibáñez & Delgado-Kloos, 2018). Through the detailed review and coding of the included research content, and combined with the essential characteristics of programming education, this study divides the teaching methods in programming education into 6 categories: a) game-based learning. To cultivate programming ability by making programming games or playing programming activities is a wide form of programming education. Through the fascinating teaching situation design, the programming teaching activities are both challenging and interesting. Such as students made the craft touchpads, augmented board games, and wearable controllers for their Scratch games (Kafai & Vasudevan, 2015; Ke & Im, 2014).

Table 3 Programming teaching methods
Full size table
Project-based learning and problem-based learning are the most widely used teaching methods in programming teaching. Project-based learning was guided by the final project works and use multi-disciplinary knowledge to actively explore challenges in order to cultivate more profound abilities. In the programming class, it is shown that students design, produce, communicate and share programming works in periodic summer camps, clubs, workshops and programming session (Casey, et al., 2018; Kalelioğlu, 2015; Lieto et al., 2007; Albion, 2015). Problem-based learning take the poorly structured problems in the real situation as the guide, explore the results of the problems under the guidance of teachers, and focus more on solving the specific problems in the field of teaching. For example, programming is used to assist the teaching of mathematical geometry (Egbert, et al., 2021; Meyer, et al., 2010).

Blended learning combined the advanced technology and traditional teaching methods. In the programming classroom, it focused on the optimal design of mixed teaching between visual programming vs text programming, plugged- in vs unplugged programming, pen-paper programming vs computer-based programming and block-based vs text-based programming (Grover, et al., 2015; Attali and Kleijb, 2017). Cooperative learning pay attention to the influence of the interaction between peers or group members on the teaching effect. Such as collaborative learning in programming and pair programming(Ruggiero & Green, 2017; Hooshyar, et al., 2021). Scaffolded refers to a variety of techniques in teaching to help learners gain greater independence and gradually deepen their understanding. For example, teachers use different scaffolding methods in teaching or technology to help students develop programs and develop programming skills (Sun & Hsu, 2019; Yeh, et al., 2011).

As the results showed, project-based learning (M3) and problem-based learning (M2) accounted for the same proportion and had the largest proportion (F = 0.31). Besides, game-based learning (M1) took the second place (F = 0.16), followed by blended learning (M4) (F = 0.09). Especially in recent years, these two teaching methods have been widely utilized. In the included literature, the proportion of cooperative learning (M5) is (F = 0.08). Although scaffold (M6) (F = 0.03) is the least included in the literature, its potential in programming education should not be ignored.

Table 4 showed the categories of programming teaching tools. This study summarized the teaching tools into 7 categories: Educational robotics (T1), Block-based tool (T2), Logo (T3), PAP (T4), Game platform (T5), Code-editing environment (T6), Other software (T7). We classified the teaching tools in programming teaching in detail and listed the typical and common tools in each type of teaching tool in Table 3, such as Scratch and code.org in Block-based tool. Figure 4c showed the proportion of different teaching tools. The results demonstrated that the number of researches based on paper-and-pencil programming teaching tools is the least (F = 0.03), while the block programming teaching tools have the largest number of applications in the research process (F = 0.33). The code-editing environments are also widely used(F = 0.16), and followed by the educational robotics (F = 0.13). Moreover, Logo is also less used in programming classes nowadays (F = 0.1), which may be because it is the main tool of early programming education and it is replaced by visual software and robotics.

Table 4 Programming teaching tools
Full size table
Description and distribution by assessment approaches
Table 5 revealed the specific types of assessment approaches. We summarized the assessment approaches in 86 studies into 7 categories. Programming ability test(E1), Programming ability scale(E2), Programming ability rubric(E3), Workpiece analysis (E4), Observation and interview (E5), Questionnaire investigation (E6), Other (E7). Figure 4d showed the proportions of different assessment approaches and its brief description. Programming ability test used standardized questions to measure students’ abilities, such as the Bebras computational thinking challenge (Grover & Basu, 2017; Williams, et al., 2014). Programming ability scale is a procedure that attempts to determine the quantitative measurement of subjective and abstract cognitive ability, such as the Computational Thinking Scale (CTS) (Korkmaz, et al., 2017; Clements, et al., 2018; Kalelioğlu, 2015). Because programming learning is a procedural activity, and teachers need to grade students’ operating steps, so the rubric was also applied to the evaluation of programming ability (Lieto et al., 2007; Martín-Ramos, et al., 2017).

Table 5 Assessment approaches
Full size table
Additionally, the analysis of the physical works produced by students (workpiece analysis) is also a form of evaluation of programming ability, especially in robotics education (Baytak & Land, 2011; Ke & Im, 2014). Observation and interview can record and understand the natural state of students in the programming class (Ricker and Richert, 2021; Slof, et al., 2016). The questionnaire is a series of survey questions designed for students’ attitudes, behaviors, values or beliefs in programming learning (Lambić, 2011; Sáez-López, et al., 2016). The results demonstrated that programming testing account for the highest proportion (F = 0.27), while the programming ability scale are the least (F = 0.06). Observation and interview is also one of the common ways to evaluate students’ programming ability (F = 0.24). To meet the needs of different programming teaching, workpiece analysis (F = 0.15) and questionnaire investigation (F = 0.09) are also used as effective assessment approach in the studies.

The relationship between education level and programming ability
Figure 5a was the distribution of the proportion of different education level, which was classified into 4 levels. a. Kindergarten (G1) b. Primary school (G2) c. Secondary school (G3) d. High school (G4). As shown in Fig. 5a, the number of studies related to the primary school stage accounted for the larger proportion (F = 0.30). On the contrary, the number of programming studies in the kindergarten stage was the least (F = 0.12). Studies have shown that the brains of children in this period are not fully developed and do not fully understand abstract concepts and language symbols(Christine, 2010).

Fig. 5
figure 5
The relationship between education level and programming ability

Full size image
Figure 5b showed the distribution of different abilities at different levels of education. On the whole, programming teaching is mainly concentrated in primary and high school, and mainly develops students’ cognitive ability and operational ability, while the research on metacognition and communication accounted for less.

The research on cognitive cultivation in kindergarten reached 41%, but the number of studies decreased with the increase of educational level. On the contrary, the number of operational ability studies is increasing with the growth of the educational level. Metacognition is the understanding of a person’s cognitive performance (Christine, 2010). The quantity of metacognition is evenly distributed at all levels of education and is much lower than other abilities. At the meantime, the research on communication ability is mainly concentrated in kindergarten.

The relationship between teaching methods and tools
Figure 6 showed the coding information about the correspondence between teaching tools and teaching methods. On the whole, problem-based learning and project-based learning are frequently used in programming teaching, and they are usually carried out in cooperation with Logo, block-based tools and educational robotics. In the meantime, game-based learning and blended learning combined with block-based tools have become a major trend of programming education. PAP programming is also one of the forms of programming education, which gets rid of the computer environment. The principle of programming is combined with real problems, so as to better reflect the essential characteristics of programming education (Peralbo-Uzquiano, et al., 2020). More and more studies pay attention to the comparison of the teaching effects of PAP programming (unplugged programming) and computer-based programming as well as the teaching orders of the two.

Fig. 6
figure 6
Corresponding coding information of programming methods and programming tools

Full size image
The relationship between education level, programming ability, and teaching methods
Figure 7 showed the different teaching methods for different programming abilities in each educational level. The comprehensive corresponding relationship between education level (kindergarten, primary school, secondary school, and high school), teaching method (Game-Based Learning, Problem-based learning, Project-based learning, Blended learning, Cooperative learning, Scaffolded), and programming ability (Metacognition, Cognition, Operation, Communication) is shown as a whole by matrix bubble diagram. On the whole, no matter what education levels, cognitive and operational ability are the main training objectives of programming education. In comparison, game-based learning, problem-based learning, project-based learning and blended learning are applied more frequently in all stages. At kindergarten and primary school, problem-based learning and project-based learning are the essential ways to cultivate children’s programming ability, especially for primary school students. The results showed that problem-based learning is used to cultivate students’ programming operation ability accounted for the largest proportion. Besides, with the growth of grades, teaching methods such as blended learning, cooperative learning and scaffold have been carried out more and more in programming teaching.

Fig. 7
figure 7
Bubble matrix diagram of teaching methods developing programming ability at educational levels (K-12)

Full size image
New model for developing programming ability
Based on the above work, a teaching model of programming ability development (Fig. 8) was constructed, which comprehensively considered the programming ability, teaching methods, tools and assessment approaches. The model reflected the corresponding relationship among them. In the Figure, G(n) (n = int(n);n ∈ [1,4]) stands for a total of 4 stages( G1-G4), which named kindergarten, primary school, secondary school, and high school; A (n) (n = int (n); n ∈ [1,4]) includes four types programming abilities: metacognition (A1), cognition (A2), operation (A3) and communication (A4). There are 16 choices after the arrangement and combination of G (N) and A (N). Taking the usage frequency as the standard, a more suitable teaching method M (N) (n = int (N); n ∈ [1, 6]) for these 16 choices was provided. Similarly, different teaching methods M(n) correspond to different teaching tools T(n)(n = int(n);n ∈ [1,7]). Based on the model, it is easy to choose what programming ability to cultivate and how to cultivate it. For example, if teachers intend to cultivate the operational ability (A3) of primary school students (G2), problem based learning (M2) and block-based tool (T2), such as Scratch, are more suitable. Additionally, workpiece analysis (E4) or observation (E5) can be considered to evaluate teaching.

Fig. 8
figure 8
Teaching model for developing programming ability

Full size image
Discussion
Effective factors in programming teaching
Programming ability (RQ1)
The programming ability is the final goal of teaching intervention (Nouri et al, 2019; Blackwell, 2002). From the perspective of psychology, this study gives a new explanation of the connotation of programming ability. Programming ability is defined as a stable personality psychological characteristic that utilizing computers to solve the general problems. The basic classification of ability mainly includes metacognitive ability, cognitive ability, operational ability, and communication ability (Wheldall et al., 2017; Christine, 2010). The influence of different programming teaching on different programming ability content was also sorted out. It is worth mentioning that CT is classified into the cognitive ability. Wing (2006) proposed that CT is a thinking skill, emphasizing that it can express the problem and its solution in a form that can be effectively implemented. By sorting out the definition of all kinds of CT, it is generally accepted as a thinking skill that focuses on problem-solving (ISTE, 2015). Likely, cognition is the process by which individuals receive, process, and use information, while cognitive ability is the stable psychology possessed in the process, including thinking skills, imagination. Therefore, we generalize CT to cognitive ability.

Educational level (RQ2)
The results of combing through the education level showed that the number of programming teaching research in the kindergarten stage is less than in others. The development of children’s thinking skills depends on the states of their cognitive development level (Whitton, 2010). It may be due to the limited developmental cognition level in kindergarten, and children may not be able to fully understand abstract procedural logic (Whitton, 2010). On the contrary, there are most researches on programming teaching on cultivating cognition of primary schools. The study has proved that the fourth grade of primary school is a critical period for the development of children’s computational thinking (CT) (Sun et al., 2021a; Harel & Sowder, 2005). Bers (2018) proposed that children at an early age required more auxiliary and carrier to develop their programming ability. Therefore, appropriate programming teaching tools and methods will also promote the phased transition of children’s thinking skills.

Teaching methods and tools (RQ2)
The teaching method with programming teaching tools is the framework to support programming education (Clements, et al., 2018). The research results showed that problem-based learning and project-based learning are the popular trend of programming education at present. Most of the two methods are based on Logo, robot and block-based tools. As we all know, Papert was committed to creating constructionism learning situations that enable children to improve their “mental structure” when interacting with programming artifacts, which leads the younger development trend of programming education (Papert, 1980). Furthermore, the emergence of computational thinking set a new logical starting point for programming education (Sun et al., 2021a). Therefore, the practice and research of programming education are generally carried out in kindergarten and primary school. Researchers use interesting programming tools (Scratch, Alice) and educational robots (Arduino, Kibo, Tangible programming) to help children learn programming knowledge and skills (Resnick et al., 2009; Laschic et al., 2017; Olelewe & Agomuo, 2016). Moreover, due to the continuous development of programming game platform, game-based learning has become an important programming method. Piaget believed that games are a form of thinking (Piaget and Cook, 1954). Resnick proposed that kindergarten children exploring the form of learning through games is the greatest achievement of mankind for thousands of years (Resnick & Robinson, 2017). Similarly, blended learning is also widely used in programming teaching, plug-in and unplugged, text programming and block-based programming, physical programming and computer-based programming have also become the focus of researchers. For example, Sun et al. (2021) proposed that unplugged programming before block-based programming can more effectively improve the computational thinking skills of junior high school students. Therefore, programming teaching methods are constantly evolving with the continuous updating of programming tools.

Intervention combination (RQ2)
The effects of different teaching methods used by different stages are not the same (Hsu et al., 2018). From a comprehensive point of view, for the primary level, The improvement of students’ operational abilities such as coding and problem-solving is mainly based on problem-based learning, which is problem-oriented and helps students to improve their programming skills by combining specific subject domain problems(Lindh, & Holgersson, 2007). The cognitive ability at this stage is mainly to improve their CT skills and imagination, using game-based teaching methods to achieve positive effects (Ayman et al., 2018). At the secondary and high school stages, cooperative learning are mainly used to stimulate students’ logical thinking, computational thinking, and affinity, to improve their cognitive abilities, and promote teamwork skills (Iskrenovic-Momcilovic, 2019). Additionally, most of the programming teaching research is mainly concentrated in primary school. This may be because the time span of primary school is long. And the primary school stage is the turning point in the development of students’ thinking skills, such as mathematical thinking, logical thinking, which made the implementation effect of primary school programming teaching obvious. (Schoenfeld, 2016).

Assessment approaches (RQ2)
By sorting out the evaluation methods, difference in the purpose of the experiment and the experimental environment may cause distinction in the choice of evaluation methods (Martín-Ramos et al., 2017; Sullivan & Bers, 2015). A combination of quantitative and qualitative methods in the programming ability evaluation is used in studies (Statter, & Armoni, 2016). It may be difficult to judge students’ acceptance of teaching methods and interest in teaching content from objective test results. Utilizing only one assessment approach in the teaching process may cause deviations in the results (Meijer et al., 2020). Therefore, appropriately adding subjective questions such as interviews and the combination of objective and quantitative methods that can better understand students’ mastery are recommend.

K-12 programming ability model and usage examples (RQ3)
GAMT model
The programming ability model constructed by comprehensively integrating education level, programming ability, teaching methods, teaching tools, and assessment approach creates conditions for promoting programming teaching. The model (see Fig. 8) took the promotion of programming ability as the core, which covered various teaching intervention elements extracted from the results of previous research. It is necessary to design programming teaching according to students’ education levels. Although some researchers did not consider education level as a separate research dimension, all studies described the background of the subjects. The education level as the overall background has a significant relationship with the choice of teaching strategies, abilities, and subject knowledge (Xia, & Zhong, 2018). Therefore, the educational level served as the starting point for building the model. Then the second stage of the model was the determination of programming ability. The establishment of programming ability is the final result and purpose of programming instructional design, which was classified into 4 types (A1-A4). The third phase of the model is based on K-12-stage programming ability and teaching methods, which means that programming abilities are transferred to a wide range of teaching areas (Palts & Pedaste, 2020). Teachers can design programming courses according to the teaching method (M1-M6) provided in the model. The usage of teaching tools is crucial to the importance of the method and choices of teaching tools can bring different teaching effects (Waite et al., 2020). Teachers can rectify the teaching process based on student feedback to achieve better teaching results. Therefore, it provides tool and assessment approach choices for corresponding teaching methods (T1-T7) in the end.

Usage examples
The programming teaching process can be divided into the following main stages based on the model: the analysis and establishment of teaching goals, the definition of students’ cognitive level, the choice of teaching methods, and the application of teaching tools, which provides a practical path for the development of programming ability. To better understand how the programming ability model guides teaching, this part takes the programming teaching of “Driving A Car” in the third grade as an example to illustrate each step in the process of instructional design. “How to make a car drive?” is the problem of this teaching. And the content was analysed to make clear the teaching goal. The change direction of left or right and the movement are involved in the driving process, which need to define the status flag and each input and output port and master its code and operate. The code-writing and related operations can be summarized as the sub-abilities of students’ operational ability A3 (see Table 2). In other words, the teaching goal is to improve students’ operation. Secondly, the cognitive level of students through their education levels should be determined. In this part, take the third grade of elementary school as an example, then Gn = G3. According to the model, the best teaching method is M1, which is the Project-based learning. Accordingly, the corresponding appropriate teaching tool is T2 (block programming) and the assessment approaches is E4 or E5 (observation and interview or workpiece analysis). It means that teachers can take “Driving A Car” as a problem-solving project. Specifically, students think about the code problems of car driving and use block programming tools such as Scratch to design “Driving A Car”, so as to achieve the teaching effect that students master the code writing and improve their operation ability. As for teachers, they can choose observation and interview or workpiece analysis as evaluation methods. In general, this model can provide a more standardized way for the selection of teaching methods and tools when designing programming teaching.

Implications for policy, theoretical and practical significance
The results of this study provided significant implications for K-12 programming education at the policy, theoretical and practical levels. In the aspect of programming education policy, under the background that many countries have introduced programming courses into K-12 national curriculum system, how to design more effective and coherent programming curriculum system has been the breakthrough to promote the further development of programming education. The results of this study provide more clear evidence and reference for policy makers on how to deploy the curriculum system to effectively cultivate students’ programming ability. In terms of theoretical significance, on the one hand, this study offered a definition of K-12 programming ability, which provided a theoretical reference and research basis for the future research of programming ability; on the other hand, this study constructed the teaching model of K-12 programming ability by integrating the corresponding relationship among educational levels, teaching methods, teaching tools, assessment approach and programming ability, which enriched the connotation of K-12 programming teaching theory. K-12 programming education researchers can refer to this teaching model to carry out research and design, and constantly explore a more accurate and efficient programming teaching model. Last but not the least, through the summary of 86 studies, we made a fine division and correspondence of the elements in programming teaching design, and provided more specific and clear guidance for programming teaching practitioners. For example, according to the teaching model, teachers can clearly determine what teaching methods, tools and assessment approach are used by students with different levels of education in order to develop students’ programming ability more effectively. Therefore, we encourage teachers and researchers to take this model as the basis, according to their own needs to determine appropriate intervention methods for experiments or teaching design, in order to produce the best teaching effect.

Limitations and next steps
In the research process, we used formulas and snowball approaches to retrieve and screen the articles. Nevertheless, there is still related programming teaching research that is excluded because they do not meet the inclusion criteria. Hence, the amount of literature may have an impact on the results of the study. We believe that as the research on programming teaching continues to accumulate, the inclusion criteria of literature research can be further divided to ensure the expansion of the search scope. Additionally, this research is mainly on English-based literature. With the deepening of research, we suggest that subsequent studies include literature in other languages, such as Chinese or Japanese literature. Secondly, during the research process, we found that some studies did not describe their detailed information. For example, the studies did not provide complete background information. Taking this into account, we did not sort out more detailed factors in the teaching process. Future research can expand the scope of factors and consider and arrange related research more specifically. Finally, this research has developed a new model for programming ability development teaching, but the model lacks more specific practice. We suggest that this model can be used as a research reference and encourage researchers and teachers to conduct more detailed practical explorations. We believe that this research will provide a lot of help for the students’ programming teaching.

Conclusion
In this study, a systematic review of K-12 programming teaching research was conducted by snowball method, and a total of 86 studies were sorted out. Based on the literature included, programming ability was defined as a stable personality and psychological characteristics which consisted of metacognition, cognition, operation and communication, including a total of 17 sub-abilities. The elements of programming teaching design in each study, such as educational levels, teaching methods, teaching tools and assessment approach, were extracted, and the main corresponding relations among the elements are comprehensively considered to construct the K-12 programming ability teaching model. The results showed that the K-12 programming teaching was committed to cultivate students’ cognitive and operational ability. There are most researches on teaching intervention for primary school students. Besides, Block-based tools are most widely used in research, and project-based learning and problem-based learning are common teaching methods in current programming teaching, while game-based learning, blended learning and cooperative learning have also become the trend in programming teaching. Simultaneously, programming testing, observation and interview are widely used in programming teaching. Researchers and teachers can use the model as a reference to design programming teaching. For example, the use of block-based programming tools and problem-based learning methods in primary school can develop students’ programming ability more effectively. Overall, this study defined the connotation of K-12 programming ability, and constructed a programming teaching model, which contribute to K-12 programming education policy, theory and practice.