Ensuring that an active path is provided at all times in a Wireless Sensor Network (WSN) is fundamental for securing the timely delivery of critical data and maintaining the quality of service required to effectively support delay-sensitive applications. In duty cycling mode, ensuring such a path becomes a real challenge as the activity scheduling of different nodes should be regulated and adjusted to provide a pipe-lined node activity from source to sink. Furthermore, some transmission delays may be incurred in waiting for a next-hop node to be awakened. The data transfer time is mainly influenced by the performance of both MAC and routing protocols; an inter-layer design allowing efficient coordination between the MAC and routing is then necessary to make the appropriate decisions relating to the selection of the next hop and the adjustment of the duty cycle. In this article, we provide a cross-layer multi-path routing approach designed to support the transfer of critical data over duty-cycled WSN networks. This approach establishes multi-node disjoint paths with complementary duty-cycling schedules to ensure the availability of an active path capable of transmitting critical data at all times. It relies on a tight cooperation between the routing and MAC layers in order to appropriately adjust and regulate the wake-up schedules of involved nodes in the forwarding phase. We analytically proved the correctness of the proposed scheduling adjustment rules. We conducted extensive simulations to show the ability of the CL-NDRECT to provide a viable trade-off between energy conservation and real time responsiveness. Simulation results show that CL-NDRECT provides around 65% cumulative energy saving during route establishment and data transfer compared to the always-on multipath approach at the cost of around 10% increase in response time.

Previous
Next 
Keywords
Multi-path routing

WSNs

Critical traffic

Duty-cycle mode

Cross-layer design

Context-awareness

1. Introduction
Despite the intrinsic resource limitations and constraints of sensors such as energy, memory, low computing speed and communication bandwidth, Wireless Sensor Networks (WSNs) have become the pivotal technology to support new and novel Internet of Things (IoT) applications (Nord et al., 2019, Kassab and Darabkh, 2020, Ang and Seng, 2019, Kandris et al., 2020, Airehrour et al., 2016). Currently, IoT applications are widely used in various domains: in the environmental field to monitor their conditions and report urgent events (Ali et al., 2017), in healthcare to perform remote health monitoring of patients and offer assisted living for the elderly (Negra et al., 2016, Negra et al., 2019), in smart transportation to report traffic incidents (Ksouri et al., 2018, Aymen et al., 2020), in industry to monitor the industrial assets, including machines and control systems and ensure critical infrastructure protection. These large-scale applications collect and report notifications about detected events. Critical events are urgently reported in a timely manner. For example, in the context of smart homes, an emergency notification is sent when the relevant sensors detect the occurrence of a fire. Likewise, remote health monitoring apps intervene when an emergency occurs or when a patient needs help if an abnormality is detected in its physiological signals. In addition, the health status of an elderly at home can be monitored; in the event of a fall or any health deterioration, an emergency alert is immediately sent to the medical staff. Even for some event-based communications, the recourse to data fusion is a prerequisite to reduce the amount of handled data and avoid waste of networking resources (Esposito et al., 2018). Hence, only meaningful and relevant data is transmitted. The availability of an active path is a perquisite to ensure the timely delivery of such critical data and to maintain the required Quality of Service (QoS) in order to efficiently support delay sensitive applications (Ali et al., 2017, Hasan et al., 2017, Hasan and Al-Turjman, 2017).

However, energy conservation remains a basic challenge in WSNs (Rault et al., 2014, Singh et al., 2020). Consequently, it is required to provide efficient solutions ensuring a balanced trade-off between network performances and energy conservation. In this context, we have witnessed an increased interest in using energy harvesting to capture energy from ambient power sources such as heat, solar, vibration and electromagnetic waves (Shaikh and Zeadally, 2016, Sah and Amgoth, 2020). However, this technology is still costly and may not be affordable for some applications (Sanislav et al., 2018, Singh et al., 2021). Optimizing power consumption, by avoiding wasting energy at the MAC layer due to both active and idle listening, is an attractive alternative to extend battery life. Using a low duty cycle, nodes remain asleep most of the time and only become active when needed (Afroz and Braun, 2020, Ghrab et al., 2018, Ghrab et al., 2016, Ghribi and Meddeb, 2020). Such a functional behaviour is suitable for long-term and self-sustainable operations of a variety of event-driven applications, where the network remains idle and only activated in response to a critical change in the observed phenomena or at the advent of specific events. In addition to their effectiveness in reducing power consumption and extending network life, duty cycling techniques pose new challenges and impose more constraints in the design of protocols to support efficient data communications (Doudou et al., 2014, Liu et al., 2019). In fact, while the main problem with enabling media streaming over multi-hop WSNs is to provide enough bandwidth to support the large amount of data being produced, timely delivery is more relevant for critical and urgent data. In always-on networks, routing protocols have fewer constraints when selecting next hops because neighbouring nodes are active and they are able to quickly transmit the received data. This network operation mode tacitly amounts to a rapid energy depletion despite the rarity of emergency events. On the opposite, in duty-cycled networks, the intermittent activity of neighbours may alter the node decision during the routing process. Besides, the additional delay induced by the duty-cycle mode cannot be neglected as it greatly affects the operation of delay-sensitive applications. In this context, multipath routing (Chikh and Lehsaini, 2018, Li et al., 2019, Kaur and Kumar, 2020) presents a viable solution for the reliability of data transmission and enhances network performances in terms of delay and throughput. Multipath routing (Radi et al., 2012) preserves the best routes offering minimal end-to-end delay for urgent traffic while non-critical data can be forwarded through the remaining explored routes. Our main idea is to establish multiple node-disjoint paths and keep only one active path towards the sink to allow a smooth forwarding of urgent packets whenever an emergency or unpredictable situation occurs. In this paper, we provide a cross-layer routing approach that can effectively support critical data forwarding in duty-cycled WSNs. Specifically, the main contributions of this work are:

(1)
A CL-NDRECT (Cross-Layer Node-Disjoint Routes Establishment for Critical Traffic) approach is proposed to support critical traffic delivering under a duty-cycled networking mode. CL-NDRECT aims to always ensure an available route to the sink for the transfer of urgent messages with minimal latency. It establishes disjoint paths to be consequently used in a rotational manner. At the MAC level, a duty cycle scheduling adjustment at the intermediate node level is triggered by the source node, while taking into account information related to neighbourhood activity, traffic load, state of the channel and history of operations. The goal is to achieve sequential overlapping periods between the activity periods of adjacent nodes to allow pipe-lined forwarding on the selected route. Complementary schedules are adopted by the disjoint node paths established to provide at least one route available at all times.

(2)
An analytical proof of the correctness of the applied scheduling adjustment rules among nodes to regulate and orchestrate the wake-up schedules of involved nodes in the forwarding phase and to establish a pipe-lined path form source to sink.

(3)
Extensive simulations to show the ability of the CL-NDRECT to provide an appropriate trade-off between energy conservation and real-time responsiveness, and to compare the performance of the CL-NDRECT with always-on multipath approaches.

The rest of the paper is organized as follows. In Section 2, the related works are reviewed. The CL-NDRECT is detailed in Section 3. The correctness of the scheduling adjustment is demonstrated in Section 4, while the performance analysis and simulation results are provided in Section 5. Finally, we conclude in Section 6.

2. State of the art
In this section, we review some of the existing multipath routing protocols proposed to support delay-sensitive data. In Heikalabad et al. (2011), the authors proposed the QoS and Energy aware Multi-Path Routing algorithm QEMPAR which exploits load balancing in order to satisfy the QoS requirements for real time applications with minimum energy. QEMPAR performs paths discovery using multiple criteria including the remaining energy, the probability of packet sending, the average probability of packet receiving and the interference. In order to reduce end to end delay, the source node matches all paths according to their hop counts in several classes and sends each packets through separate paths. In Fu et al. (2021), The authors proposed the Sustainable Multipath Routing Protocol SMRP which selects paths with a trade-off among delivery latency, energy balance and routing survivability. A similar approach is adopted in the Environment-Fusion Multipath Routing Protocol EFMRP proposed in Fu et al. (2020). EFMRP performs routing decisions according to a mixed potential field in terms of depth, residual energy and environment in order to forward data along routes having the best trade-off among latency, energy conservation and routing survivability.

In Jaiswal and Anand (2020), the authors avoided congested nodes to speed up packet transfer. They proposed the Energy-Efficient Optimal Multi-path Routing protocol EOOMR, a technique to tackle unfairness in a network with high traffic load for IoT applications. It constructs multiple paths based on an optimality factor taking into account the lifetime of a node, reliability of communication and traffic intensity. Then, based on the optimality factor, only one path among established paths is selected for data forwarding. Nodes with maximum lifetime, lower traffic intensity, and high communication reliability of communication will be selected as next-hops. Similarly, in Jaiswal and Anand (2019), the authors considered the estimated lifetime and the congestion level for the next-hop selection.

Forwarding data along neighbouring paths may involve adjacent nodes and therefore concurrent transmissions, even over node-disjoint multiple paths, will not be allowed (Maimour, 2018, Maimour, 2020). In this context, many interference-aware multipath routing protocols were proposed to increase spatial reuse and enhance end-to-end delay and throughput. The Fast Multipath Routing Protocol FMRP, a query based routing protocol, constructs multiple paths while avoiding the effects of inter-path interference (Jemili et al., 2014). Thanks to its local view acquired during the discovery phase, each node classifies neighbours depending on their position on the path towards the sink. During route establishment, the common neighbours represent nodes to avoid when establishing the route by subsequent nodes in order to have non-correlated and node-disjoint paths. The Low-Interference Energy-efficient Multipath Routing protocol (Radi et al., 2011) also adopts an adaptive iterative approach to construct a sufficient number of node-disjoint paths with minimum interference from each event area towards the sink node, in order to improve packet delivery ratio, lifetime and latency. During route construction, whenever a node overhears a RREP, it updates its interference level value based on the backward packet reception probability of the sender node. Once the first path is active, the source triggers the discovery phase for another one. A similar approach is adopted by the Interference-Minimized Multipath Routing Protocol (Radi et al., 2014) which relies on a minimum cost data gathering tree rooted at the sink node. It aims to construct minimum interfering paths through the nodes which have experienced a lower interference level from the existing active paths. Once the first path is established, the construction process of subsequent paths is postponed to allow neighbours to update their experienced interference level from the nodes along the first path. In Zhang and Ni (2020), the authors construct a multipath route to enhance the quality of routing in terms of energy consumption, packet delay and network bandwidth. The sink initiates the establishment of a minimum spanning tree among all nodes in the network by broadcasting a RREQ packet. During this path discovery phase, each node has to update its inter- and intra-stream interference level. They introduces the Neighbourhood Interference Detection and Mitigation NIDM method to detect and mitigate inter- and intra-stream interference among neighbours. To this end, NIDM uses the delay caused by intra- and inter-stream interference and several QoS requirements, such as traffic priority. Finally, the node depth, interference level, and residual energy of neighbouring nodes are used to select the best path towards the sink node. In Hossain et al. (2016), he authors used correlation and hop-count metrics to construct lower interfering backup paths with respect to the primary path. In Bennis et al. (2016), the authors proposed the Carrier Sense Aware Multipath Geographic Routing protocol which employs the Number of Common Neighbours to guarantee a faster and efficient path construction. Once the first path is constructed, the second path construction is started by avoiding the use of banish nodes and their neighbours to build a non-interfering path. The banish node state refers to nodes located in the neighbourhood of nodes involved in the first path. To ensure real-time and reliability, the authors in Kim et al. (2020) relied on the construction of main and sub paths. To enable cooperation among the paths, a bridge node overhears packets sent along the paths; the cached packet will be relayed in case of a transmission failure or delay.

To improve the overall network performance, many approaches opted for a cross layer design. The Multipath Multispeed Protocol (MMSPEED) (Felemban et al., 2006) used a cross-layer design approach between the network and MAC layers in order to offer QoS differentiation in terms of reliability and timeliness. It introduced multiple speed levels to guarantee timeliness packet delivery over a single network; each speed level is mapped onto a MAC layer priority class. To support service reliability, probabilistic multi-path forwarding is used to control the number of delivery paths based on the required end-to-end reaching probability. The Triangle link quality metric and minimum inter-path Interference based Geographic Multipath Routing is proposed in Aswale and Ghorpade (2021). It is a cross-layer geographic routing protocol that constructs multiple node-disjoint paths in IEEE 802.15.4 compliant network. Thanks to the cross-layer information exchange between physical and network layer, it selects forwarding node based on a triangle link quality metric, remaining energy and distance between the 1-hop neighbouring nodes and the sink, while anticipating a minimum adjacent path interference effect. During the establishment phase of the first route, each selected node changes its state to OCCUPIED, while the 1-hop neighbouring nodes of the selected next-hops change their state to INTERFER upon overhearing an RREP packet. To discover the second path, the source node avoids nodes marked as INTERFER or OCCUPIED when selecting its next-hop. In Ahrar et al. (2019), the authors considered multipath in IEEE802.15.4 Time Synchronized Channel Hopping networks. They exploited multiple paths with a braided structure by selecting two next-hop per node, a preferred parent and an alternative parent. Then, they proposed a scheduling algorithm where multiple senders target the same receiver in a single cell in order to provide high-reliability and fault-tolerance. In Rehan et al. (2020), the authors adopted a multi-channel methodology to enhance the network performance. They proposed QCM2R, a reactive QoS-aware Cross-layered Multi-channel Multi-sink Routing protocol in order to achieve reliable communication in stream-based multi-channel Wireless Sensor Networks. Upon the occurrence of an event in the region of interest, node link-disjoint paths are established between sources and sinks. The best path is selected for the end-to-end data delivery. Overtime, other paths may be used to enable load balancing between the available routes during the communication session and avoid congestion in the network. During the establishment phase of node link-disjoint routes, each sender has to check whether the forwarding node of an RREQ is not reserved for any path and whether it has the highest metric taking into account the hop count distance from corresponding sink and the residual energy. Such forwarding node is allowed to rebroadcast RREQ packets towards the corresponding sink.

In the quest to conserve energy, sensor nodes alternate between active and inactive periods. This duty cycling mode of operation has a direct impact on the network performance. It remains a real challenge to keep a low network latency while conserving the maximum of energy. This motivated researchers to design multipath routing protocols that suit the needs of duty-cycled WSNs. In Yang and Heinzelman (2013), the authors proposed a Sleeping Multipath Routing and a duty-cycled MAC protocol, which aims to meet the application’s reliability requirement and to prolong the network lifetime by putting sensors to sleep at both the routing and the MAC layers. This adaptive solution sorts different disjoint paths in decreasing probability of successful data delivery. It determines the minimum number of paths to support the reliability requirement. A cross-layer interaction allows to estimate packet delays at the MAC layer in order to select the best timer values for Sleeping Multipath Routing. In Jiang et al. (2016), two geographic multipath routing algorithms were proposed; namely the Greedy Geographic Forwarding based on Geospatial Division (GGFGD) and the Geographic Forwarding based on Geospatial Division (GFGD). They were designed for duty-cycled underwater wireless sensor networks. The authors assumed that the network is logically divided into Small Cube (SC) spaces. Two steps are required: selecting the next target small cube and choosing the next hop node in the target small cube. In GGFGD, data packets are greedily forwarded to the sink node; the next-hop node can be selected among neighbours in the closest SC which has higher residual energy, shorter transmission delay and lower path loss. In GFGD, data packets are directionally transmitted to the destination. The selection of target SCs is based on the sub-cubes and the relative position of the source node and the destination node. Only neighbour nodes in the selected target SCs are used for data directional transmission. In addition, the two protocols incorporated a duty-cycle mechanism to save energy. However, it is not clear how nodes update their duty-cycle scheduling.

To construct non correlated paths, the Correlation-Free MultiPath Routing protocol for Multimedia traffic (Ghrab et al., 2017) prevents some nodes, namely the eligible candidates to be involved in braided paths, from forwarding some RREQ packets during the discovery phase. To this end, the source includes in the sent RREQ a list of First Hop pairs allowed to forward the received RREQ packet. Each pair is composed of 2 successor nodes that are non-immediate neighbours; each first hop can be included only in one pair. During route discovery phase, each node, receiving 2 RREQ packets with the same hop count from two different First Hop belonging to the same First Hop pair, ignores the RREQ. The cross-layer interaction between MAC and routing layers allows to adjust the duty-cycle scheduling of nodes. E-ECAB an Enhanced-Efficient Context-Aware multi-hop Broadcasting protocol is proposed in Jemili et al., 2017, Jemili et al., 2019. This is an enhanced version of ECAB (Ghrab et al., 2015) used as an underlying MAC protocol. This cross-layer multipath routing protocol is mainly designed to support multimedia communications in duty-cycled networks.

In Table 1, we compare the different reviewed protocols according to their protocol characteristics and their underlying routing functionalities. The fundamental characteristics of interest are : (i) support of delay-sensitive data, (ii) construction of non-correlated paths, (iii) use of a cross-layer approach, and (iv) use of a duty-cycle operating mode. The main routing functionalities of interest concern (i) energy awareness, (ii) QoS handling, and (iii) capability of balancing the load among selected paths. As we clearly note, various multipath routing protocols were indeed designed for delay sensitive applications, but very few considered sensor nodes operating in duty-cycled mode. The latter approaches relied on a cross-layer interaction between MAC and Network layers to reduce the negative impact of this mode on the performance of the network (Yang and Heinzelman, 2013, Jiang et al., 2016, Ghrab et al., 2017). To sum up, critical data forwarding over a duty-cycled networks was not properly tackled by previous work.


Table 1. Summary of reviewed multi-path protocols.

Reference	Protocol characteristics	Routing functionalities
DSa	IAb	CLc	DCd	EAe	QRf	LBg
QEMPAR (Heikalabad et al., 2011)	✓	–	–	–	–	✓	✓
SMRP (Fu et al., 2021)	✓	–	–	–	–	✓	✓
EFMRP (Fu et al., 2020)	✓	–	–	–	–	✓	✓
EOMR (Jaiswal and Anand, 2020)	–	–	–	–	–	✓	–
Jaiswal and Anand (2019)	–	–	–	–	–	✓	–
FMRP (Jemili et al., 2014)	✓	✓	–	–	–	–	✓
LIEMRO (Radi et al., 2011)	✓	✓	–	–	–	–	✓
IM2PR (Radi et al., 2014)	✓	✓	–	–	–	–	✓
Zhang and Ni (2020)	✓	✓	–	–	–	✓	–
NDM (Hossain et al., 2016)	✓	✓	–	–	–	–	–
CSA-MGR (Bennis et al., 2016)	✓	✓	–	–	–	–	✓
Kim et al. (2020)	✓	✓	–	–	–	–	–
MMSPEED (Felemban et al., 2006)	✓	–	✓	–	–	✓	–
TIGMR (Aswale and Ghorpade, 2021)	✓	✓	✓	–	–	–	✓
Ahrar et al. (2019)	–	–	✓	–	–	–	–
QCM2R (Rehan et al., 2020)	–	–	✓	–	–	✓	✓
Yang and Heinzelman (2013)	✓	–	✓	✓	–	–	✓
Jiang et al. (2016)	–	–	✓	✓	–	–	–
CFMPR-M (Ghrab et al., 2017)	–	✓	✓	✓	–	–	✓
CL-NDRECT	✓	–	✓	✓	✓	✓	✓
a
DS: delay sensitive.

b
IA: interference aware.

c
CL: Cross layer.

d
DC: duty cycle mode.

e
EA: Energy Aware Routing.

f
QR : QoS Constrained Routing.

g
LB : Load Balancing Capable Routing.

3. NDRECT: Node-Disjoint Route Establishment for Critical Traffic in WSNs
Forwarding critical traffic with reasonable delay without penalizing resources usage in terms of energy and bandwidth constitutes our main motivation. In this context, our basic idea consists in building n node-disjoint paths from the source to the sink and then adjusting nodes duty-cycle scheduling to ensure complementary availability of the different routes. As illustrated in Fig. 1b, at least one path must be available to promptly report any critical data, whenever an urgent event occurs; other paths have to keep silent. As exposed in Fig. 1a, two main phases are required in our cross-layer multipath routing approach: namely route construction maintenance, and duty cycle adjustment.

Route construction/maintenance: The Node-Disjoint Routes Establishment for Critical Traffic NDRECT (Ghrab et al., 2017) builds n node-disjoint paths, to be activated successively in a rotating manner. With node-disjoint paths, we reduce the probability of a node involvement in multiple established paths between the same source and sink. To ensure a seamless and smooth transfer of critical data along a specific path, nodes that are less involved in other routes are favoured as they provide more flexibility to adjust their duty-cycle scheduling.

Duty-cycle adjustment/Forwarding phase: We adapt E-ECAB (Jemili et al., 2017, Jemili et al., 2019), an asynchronous MAC protocol designed for broadcasting under duty-cycled environment. Thanks to a tightly coordination between MAC and Network levels, the enhanced version of E-ECAB allows nodes along established paths to have complementary duty-cycle schedules. Only one active route will be available during any specific period of time. Besides, in order to transfer urgent messages to the sink with minimal latency, a pipeline of overlapping intervals between active periods of adjacent nodes along the same path is established and maintained.

3.1. Route construction/maintenance
The aim is to achieve an energy-efficient and a low latency communication for critical data transfer in WSNs by exploiting multipath routing. As established paths from a specific source are node-disjoint and assigned complementary schedules, we are not concerned by wireless conflict or eventual interference due to simultaneous transmissions within a transmitter neighbourhood. In fact, there is no need to have non-correlated paths; as transmissions over these paths are not concurrent. For our routing protocol, two phases are required: a discovery phase followed by the route establishment phase:

Discovery phase.
The discovery phase allows each node to acquire local knowledge about its neighbourhood and its suitability to be part of the forwarding process as potential next-hop. The source broadcasts a RREQ packet including the source ID, hop-count initialized to 0, sequence number, the sink ID and the First Hop to be taken by the RREQ packet. The latter field as well as the hop count will be updated by the source’s immediate neighbours. According to hop-count backwards to the source node, each node can classify its neighbours into 3 groups to efficiently handle the RREQ broadcast:

-
Predecessors: They refer to neighbouring nodes having lower a hop-count. Only RREQ packets received from the predecessors, providing a minimal hop-count and a new First-Hop, are considered. The others are discarded.

-
Successors: They refer to neighbours with higher hop-count. Received RREQ packets from these nodes will be ignored.

-
Nodes at the same level: They represent nodes with similar hop-count (i.e., siblings). RREQ packets received from these nodes will also be discarded.

Each node must wait long enough to receive all RREQ packets sent by all of its predecessors in order to retrieve the relevant information about each predecessor and each route that passes through it. During this phase, intermediate nodes are brought to store the information extracted from valid received RREQs in the RREQ table. Such information will be shared among neighbours through exchanged RREQ and be helpful to guide nodes to take the local decision about the next-hop selection during the route selection step. To construct node-disjoint paths satisfying the expected characteristics required by our cross-layer approach, two novel mechanisms are introduced; namely node tagging and node aggregation.

3.1.1. Node tagging
The objective of node tagging is to allow learning the involvement of each node in eventual established routes crossing distinct First-Hop nodes. Each node is to be tagged as it receives RREQ packets from different neighbours with distinct First-Hop nodes.

The tag value is computed based on RREQ packets reception depending according to four distinguished situations:

-
The node is tagged 0 if it receives one or multiple RREQ packets from only one predecessor

-
The node is tagged 1 if 2 distinct RREQ packets are received from different predecessors

-
The node is tagged 2 if it receives 3 distinct RREQ packets from different predecessors

-
The node is tagged 3 if more than 3 distinct RREQ packets are received from different predecessors

Each node includes its forwarded RREQ packet its tag value, the number of tagged nodes along the path and the sum of the tag values of all nodes along the path. This tagging information will serve as a guidance to the intermediate nodes and the sink node during the route establishment phase. In fact, nodes which may be involved in many routes derived from different First-Hop nodes, will be assigned higher tag values. Avoiding these nodes tacitly reduces the risk of selecting crossed routes or selecting a next-hop that can be involved in multiple paths.

In order to favour the selection of the shortest paths comprising nodes with lower tags during the route establishment phase, each node chooses, with respect to each First-Hop, the most eligible candidate among its predecessors as the next-hop. The most qualified predecessor is the neighbour from which the node received a RREQ packet containing nodes with lower tags and lower cumulative tag value for the corresponding First-Hop. To avoid the construction of crossed paths sharing a common node, whenever a predecessor had been associated to one First-Hop, the next selection relative to the next First-Hop should lead to a distinct predecessor if possible. Otherwise, in the absence of other alternatives, the node will be constrained to select an already chosen predecessor. Each node keeps, as a local view, the best alternative for each First-Hop (predecessor ID, First-Hop ID, number of tagged nodes, total tag, hop-count). This information is stored locally in the RREQ table of each node.

As illustrated in Fig. 2, we consider a source node with four First-Hop nodes, namely nodes A, B, C and D. Each intermediate node computes its tag value after receiving RREQ packets from all its neighbours; only valid RREQ will be considered. As nodes E and J received only one RREQ packet from respectively nodes A and D, they got assigned a tag value  0. Nodes (I, F, K, O, P) are tagged with 1 since they received 2 distinct RREQ packets. Nodes, tagged with 2, have received 3 RREQ packets, such as node L which received RREQ packets from nodes F, G and E. In Table 2, we expose the local view built by node L from received and handled RREQs. The table summarizes the information collected from all received and not discarded RREQ packets and shows the decision about best alternatives that match each predecessor to a distinct First-Hop based according to the tagging information.



Fig. 2. Illustration of the node tagging mechanism used during the discovery phase.

Initially, L picks the predecessor with the lowest tagging value, which is node E tagged 0 and associated to a unique First-Hop, node A therefore selects its first alternative (E,A,1,2). Then, it considers its predecessor F, showing the lowest tagging value among the remaining alternatives. As the First-Hop A is already associated to the predecessor E, node F will be associated to the First-Hop B, and the second alternative will be (F, B, 2, 3). Finally, node L repeats the same procedure with node G and retains the following matching (G, C, 2, 4). Thanks to the tagging information, routes having nodes with lower tags and a lower cumulative tag value will be privileged, since they contain nodes less involved in multiple paths.


Table 2. Local view built by node L at the completion of the node tagging mechanism shown on Fig. 2.

Predecessor	First Hop	Nb. tagged nodes	Total tag value	Decisions
E	A	0	0	(E,A,1,2)
F		A	1	1	(F,B,2,3)
B	1	1
G		A	1	2	(G,C,2,4)
B	1	2
C	1	2
3.1.2. RREQ aggregation
To reduce the overhead resulting from the RREQ flooding, each intermediate node forwards only one RREQ packet aggregating the results obtained from all valid received RREQ. As explained previously and detailed in Algorithm 1, each node, on the basis of the tagging information received in the valid RREQs, associates the most appropriate predecessor with each first hop. Each node should include this information in its RREQ packet. In this way, subsequent nodes will exploit such information to select, in turn, their best alternatives. As the RREQ packets propagate through the network until reaching the sink, information about the best routes will be gradually collected.

The aggregated RREQ packet contains the following additional information:

-
Tag value: this is the tag value of the node computed according to the number of distinct received valid RREQ packets as we have detailed previously.

-
List of First Hop ID : This list includes the IDs of the associated First Hop nodes when selecting the best alternative for each predecessor.

-
List of corresponded cumulative tag value : The cumulative value of the tags for each first hop corresponds to the sum of the values of the tags of the nodes along the route segment from the source to the concerned node; this route segment passes through the specified pair (first hop and the associated predecessor). This sum also includes the tag value of the node itself. The tag values are sorted so that the total tag value  corresponds to the First Hop .

-
List of corresponded number of tagged nodes . This information refers to the total number of tagged nodes, including the node itself, along the path backward to the source. Such an information is provided for each First Hop and its corresponding predecessor. Similar to the previous list, included items are sorted in a way that  corresponds to the First Hop .

For scalability issues, the added information concern only the best selected alternatives. Besides, we do not include the list of predecessors in the aggregated packet; this list is stored in the RREQ table and will be useful for the node itself to locally select the next hop during the next phase.



For a better understanding, we refer again to Table 2 showing the details of the RREQ packets received by node L relative to the example in Fig. 2. After processing all information included in received RREQ packets, node L prepares its aggregated RREQ packet which includes the following information:

-
Tag value: it Equals to 2, since it receives RREQ packets from three different predecessors which are E, F and G,

-
List of First Hop ID: Node L associates predecessors E, F and G with First Hop nodes A, B and C respectively; the list of First Hop ID will include .

-
List of total tag value: The sum of tag values of nodes belonging to the route associated with each pair (First Hop, predecessor) are: 0 for First Hop A, 1 for First Hop B and 2 for First Hop C. Node L adds its tag value, equal to 2, to the sum of tag values associated with each First Hop; the list of total tag value should be: .

-
List of the sum of tagged nodes: Similarly, the node L is tagged so it increments the sum of tagged nodes corresponding to each First Hop node by 1. Thus, the final list should be: .

A node receiving this aggregated RREQ, for example node Q, becomes aware that three best routes can pass through node L. The first best path is derived from the First Hop A and contains only one tagged node with total tag value equal to 2. The second best path is derived from the First Hop B and contains 2 tagged nodes with total tag value equal to 3. The third best path is derived from the First Hop C and contains 2 tagged nodes with total tag value equal to 4.

3.1.3. Establishment phase
After the reception of all RREQ packets from its predecessors, the sink node should associate each selected predecessor with a distinct First-Hop node in order to construct n node-disjoint paths. To this end, the sink exploits the acquired knowledge from received RREQ and computes a tagging coefficient T for each pair (First-Hop node, predecessor), as follows: 

Then, the sink node starts by choosing the best alternative among the associations (First-Hop, sink predecessor), which corresponds to the one with the lowest tagging coefficient. Then, the sink proceeds similarly with the remaining predecessors, while excluding the already selected First-Hop node. It continues until all First-Hop nodes are selected or all predecessors are handled. After parsing all its predecessors, the sink node will select the n best alternatives and triggers the construction of the corresponding routes through transmitting a RREP packet towards each concerned predecessor.

The example, shown in Fig. 3, illustrates the best node-disjoint discovered paths. In this example, the sink node receives four distinct RREQ packets from its predecessors Q, R, S and T. Table 3 gives an insight on the local view at the sink node acquired thanks to the extracted information from received RREQ. After sorting all alternatives (First Hop, predecessor) according to the tagging coefficient, the sink selects the pairs (A,Q) and (D,T) which have the lowest tagging coefficient equal to 5 (32). Then, the sink excludes the First-Hop nodes A and D and the predecessors Q and T from the selection process and continues with the remaining predecessors.



Fig. 3. Illustration of the best discovered routes established by our proposed CL-NDRECT.

After selecting the appropriate pairs (First-Hop, associated Predecessor), the sink sends to each selected neighbour a RREP packet containing all necessary information to guide it in the selection of the next-hop backwards to the source via the associated First-Hop.


Table 3. Local view perceived by the Sink (destination) node built according to the extracted information from received RREQ.

First Hop	Predecessor	Tagged nodes	Total tag	Decision
A	Q	3	2	(A,Q)
R	4	2
S	5	3
T	6	3
B	Q	4	3	(B,R)
or
(B,S)
R	5	3
S	5	3
T	5	3
C	Q	6	3	(C,S)
or
(C,R)
R	5	3
S	5	3
T	4	3
D	Q	6	3	(D,T)
R	6	3
S	5	3
T	3	2
A RREP packet includes the following fields: Source Id, sender Id, the selected pair related to this specific next-hop and selected pairs associated to other routes. This last information is required to avoid selecting common neighbours already involved in another path. We distinguish between two types of RREP packets:

i.
Forced RREP: Whenever the sender has a unique alternative as next-hop towards the sink node, a FORCED RREP is sent towards the selected neighbour. Upon receipt of such an RREP, the node must accept it. If this node is already involved in a route, it has to cancel the established segment built after receiving a RELEASED RREP. To do so, it has to send a REJECT packet to the sender of the received RREP packet for the establishment of the first route and a second REJECT packet to the corresponding selected predecessor. However, when the previously received RREP packet is also a FORCED RREP, the node keeps its already established link and sends a REJECT packet towards the sender of the current FORCED RREP, which should cancel the established segment by sending back a REJECT packet to its predecessor.

ii.
Released RREP: When a node has many alternatives as next-hop, it sends a RELEASED RREP to a specific node selected among these potential candidates. This specific node replies then by sending an acknowledgement. However, if it is already implied in another path, it rejects the RELEASED RREP by sending back a REJECT packet towards the sender neighbour. The latter will forward the RREP packet to a different predecessor.

The sink as well as the intermediate nodes broadcast RREP packets, but only concerned nodes have to reply with an acknowledgement. With such functional behaviour, neighbouring nodes are able to overhear sent RREPs and update accordingly their neighbourhood knowledge by storing relevant information about their implication in routes. In this way, they can avoid the selection of a next-hop already involved in another route. Besides, overhearing a RREP packet indicates the end of the routing process; nodes can then adjust their duty-cycle scheduling at MAC level according to the current situation, and adopt the minimal activity scheduling if required. The establishment phase is completely achieved when the source node receives the n RREP packets corresponding to the n selected paths. The overhead complexity is , where N refers to the number of nodes in the WSN. In fact, each node will receive RREQs from all its neighbours; however, only RREQs sent by its predecessors with a minimal hop-count and a new First-Hop will be handled. Besides, regardless of the number of valid RREQs, each node will transmit only one aggregated RREQ during the route discovery phase, and later, it may send just one RREP once selected as next-hop. Thus, during the routing process, each sensor node needs to process valid RREQs from all its predecessors to generate its own RREQ. During the route establishment phase, it has to handle one RREP once selected as next-hop. For memory space, each node maintains a neighbour table including at most  entries, where  is the maximum node degree. Moreover, each node maintains a RREQs table, useful for the route establishment phase. As only received RREQs from predecessors and originating from a novel First-Hop node will be considered as valid, at most  RREQs will be handled, where f represents the number of First-Hop nodes. The worst case is when received RREQs from different predecessors have similar number of hops and must be stored. Thus, the efficiency of memory space for CL-CFMPR is equal to .

The use of multiple paths to forward urgent data allows balancing the energy consumption among multiple nodes. Operating under the duty-cycle mode, on the other hand, contributes to further prolong network lifetime. Still, the energy of the nodes involved in data transfer drops faster than that of other nodes. A route failure due energy depletion affects greatly the data forwarding process, and the failure of a critical node may even result in the partition of the whole network. To prevent the occurrence of such situations, each involved node tracks over time the level of its residual energy. To this end, it computes its energy consumption periodically and estimates its lifetime based on its residual energy. Once its residual energy reaches a predefined threshold, it informs the source node, which triggers a new discovery phase to establish new paths, while excluding energy-limited nodes.

3.2. Duty-cycle adjustment for critical traffic
CL-NDRECT builds for each source n routes towards the sink. As emergency events are unpredictable, the source node should be ready to transmit related data at any time even during its inactive period. It has to wake up and transmit the urgent data. As such, at least one route should be active to transfer urgent data. To this end, we use successively the established node-disjoint paths; over time only one is kept available. We adjust the duty-cycle scheduling of involved nodes in the different paths in a way to have complementary schedules with consecutive overlapping periods between adjacent nodes to build a pipeline along the same path. An adapted version of E-ECAB (Jemili et al., 2017, Jemili et al., 2019), is used as an underlying MAC protocol. E-ECAB is an adaptive asynchronous MAC protocol which takes into account multi-contextual information and adjusts its scheduling for communications in duty-cycled WSNs. Each node adopts a fixed cycle with alternating between active period (PA) and inactive period (PI). In a newly deployed sensor network, each node should adopt a default behaviour and follow a default duty-cycle scheduling allowing nodes to be active for a maximal period, noted . This guarantees the good reception of neighbours’ beacons, and followed by a minimal inactive period, noted . In addition to local information, each node acquires some knowledge about the current situation of its neighbourhood and the network dynamics through passive listening and exchange of beacons. Each node should continue working with the default scheduling until acquiring enough knowledge enabling it to adjust its scheduling while taking into account the neighbourhood activity, the traffic load, the medium state and the communication history. A node can adopt either  or  scheduling, where  refers to the minimal activity period and  refers to the maximal inactivity period. We here consider an asynchronous duty-cycle where a node can wake up within a period of length . To ensure the correct functioning of the protocol, the lengths of the active and inactive periods should respect the following rules: (1)(2)
 
(3)

Two new rules are added to be able to adjust properly the duty-cycle scheduling of involved nodes and to consequently fulfil the delay requirement of delay-sensitive applications: (4)
 
(5)

During the routing process and upon the triggering of the discovery phase by the source, each node adopts the scheduling . This maximal activity period is meant to mitigate the negative impact of the duty-cycle mode on the routing process. During the data transfer phase, every involved node remains awake for a minimal active period during each cycle in order to avoid energy waste. As a result, it adopts the scheduling  unless it is already involved in more than one paths. In this latter case, the node determines the appropriate scheduling according to E-ECAB rules and may stay active for a longer period; it adjusts its wake-up time to meet the constraints imposed by the source of the critical traffic.

We assume that the cycle is divided into n slots where p slots are dedicated to the minimal active period and q slots are composing the duration of the maximal inactive period. We assume, also, that one slot is sufficient to transmit a data packet. In fact, the slot of E-ECAB is calculated as follows: (6)where  is the time needed to broadcast one beacon frame and  represents the time required to send a data packet.

As nodes involved in routes are active for , the number of required paths, noted n, are to be computed as follows: (7)We denote by  the time duration of one cycle in E-ECAB,  the minimal active period in E-ECAB and  the number of discovered node-disjoint routes. The latter corresponds to the number of distinct RREQ packets received by the sink from its predecessors.

The source has to orchestrate and triggers all scheduling adjustments at intermediate nodes along each path. So, routes should have complementary wake-up schedules as depicted in Fig. 4.

Initially, the source begins by sending PION frames containing information about the earliest possible transmission time of an urgent frame during the interval covered by a specific next-hop. Three required paths with complementary schedules are needed to cover the entire cycle. The earliest transmission instant for the First-Hop is at the source wake-up, for the second First-Hop right after , and for the third First-Hop right after . According to the wake-up time of the selected First-Hop nodes, the source specifies the activity time of each established path and sorts consequently these First-Hop nodes as FH1, FH2 and FH3. The transmission order of each frame is according to the wake-up time of each First-Hop.


Fig. 4. Optimal complementary schedules for established paths by CL-NDRECT.

Each First-Hop estimates its adequate new wake-up slot Sw and makes the required adjustment. Hence, the First-Hop computes, first, the slot position according to the current scheduling and then computes the translation vector to be applied as following: (8)
 
where  represents the wake-up time of the source node,  is the wake up time of node FH,  refers to the duration time of one slot according to E-ECAB,  represents the slot time within one cycle where the source node should start transmitting its earliest data packet, and  refers to the cycle length of E-ECAB. 

To apply a translation of vector V, the node either extends its inactive period of the current cycle with V slots if V is positive or reduces the current inactive period by V slots. Then, the node restarts a new cycle  and continues operating normally.

After computing its new wake-up slot, each First-Hop node  notifies its next-hop node by sending a PION frame. The following next-hop node computes its new wake-up slot time, , according to its predecessor transmission time as follows: (9)
 
where  represents the wake-up time of the predecessor and  is the slot time during which the predecessor may start transmitting its earliest data packet. The predecessor transmission time is one slot after its wake-up, as one slot is enough to receive an urgent packet from the source. 

Each involved node behaves similarly to its First-Hop node, it adjusts its schedule and notifies its next-hop, and the above process goes on until reaching the sink.

4. Analytical study
In this section, we discuss the correctness of the adjustment rules used to obtain complementary activity periods for the established paths. As urgent events are unpredictable, we should ensure to have an active path to allow the source to send at any time during the cycle. Thus, we have to assign complementary schedules to the three paths in order to cover the entire cycle. To reduce energy waste due to idle listening and overhearing, the involved nodes have to adopt the  scheduling allowing them to be active for a minimal active period  and to sleep for a maximal inactive period . The same scheduling is adopted by the subsequent Next-Hops (NH) of each selected First Hop-node (FH) along the whole path, unless the concerned node is involved in other forwarding operations and needs more time.

In the following, we assume that the source node  wakes up at  and returns to sleep at . For each selected First-Hop , we denote by  the wake-up time and  the time when it returns to sleep.

We recall that all nodes wake up initially within the  interval. As such, the interval separating the wake-up times of the source and its immediate neighbours is equal to: (10)

Each First-Hop () computes its adequate new wake-up slot as follows: (11)
 

To simplify our reasoning, let us consider that . Then,  is computed as follows: (12)

Our aim is to adjust the scheduling of each First-Hop node and their subsequent next-hops along the established paths in order to have an active path during the entire cycle able to promptly forward critical data upon the event detection by the source. As exposed in Fig. 4, we have to prove that the adjustment rules provide indeed complementary schedules for established paths, where:

-
The  wakes up simultaneously with the source, thus the  will be the overlapping active period between these nodes;

-
The  has to wake up after the source by PImin, thus the overlapping period between their active periods will be ;

-
The  has to wake up after PAmax, thus the remaining period  will be covered.

Theorem 1

The number of required paths with complementary schedules to cover the entire cycle is 3.

Proof of Theorem 1

According to rules (5), (2), (4), we have: 
 
 
 
 
 
 
 
 
(13) Given (13), three  periods are required to cover the entire cycle.

Theorem 2

After the scheduling adjustment by the next-hop nodes, the active periods of the selected First-Hop nodes will cover the entire cycle.

Lemma 1

After the scheduling adjustment at intermediate nodes, the interval  will be at least covered by the active period of the first next-hop selected by the source, 

Proof of Lemma 1

We will discuss the scheduling adjustment of  while considering the three potential situations, as depicted in Fig. 5:

i.
Situation 1: The source node and the selected Next-Hop node wake up at the same time;

ii.
Situation 2: The source node wakes up the first one among its neighbours, as illustrated in Fig. 5b exposing the worst case where node  wakes up after . The source transmission is be delayed until its wake up;

iii.
Situation 3: The source node wakes up the last one among its neighbours. Thus, the overlapping between active periods will be reduced, as illustrated in Fig. 5c exposing the worst case where the source wakes up after . Beyond this period, the critical data transmission can be delayed if no other path is available.

Case 1: The source node and the First-Hop node  wake up simultaneously

As the source and its selected First-Hop node  wake up at the same time, the following rule is satisfied: (14) (15)

During cycle  (),  can compute its appropriate wake-up time as follows: (16)

In fact, the source can send its critical data as soon as it wakes up; therefore . Hence  will keep the same scheduling.

The overlapping interval is the interval separating the wake-up time of the source and the sleeping time of . This interval is computed as follows: (17)

According to the rules imposed by E-ECAB, we have: (18)which yields: (19)

Given (17), (19), we confirm that an overlapping interval , equals to , exists. Thus, during the interval ,  will be available to forward any critical data sent by the source.

Case 2: The source node wakes up before its First-Hop neighbour, 

 can wake up within  slots, where , so, . The worst case is when  wakes up after  interval; thus, we have . In such a situation, the source has to wait the  period in order to be able to report the earliest critical event, which may occur at the beginning of the cycle.

For scheduling adjustment, let consider the th cycle, where . We have: (20)

According to (20),  must reduce its inactive period by  slots and by  for the worst case. Thus, the next wake up of  is computed as follows: (21)

Given (21), the source and  will be synchronized and wake up at the same time. Similar to case 1, the overlapping interval between active periods will be .

Case 3: The source node wakes up after its First-Hop neighbour, 

The source can wake up within  slots, , so, . The worst case is when the source node wakes up after the  interval; therefore, we have . In such a situation, the overlapping interval between active periods of the source and FH1 is equal to . The critical data transmission can be throttled if no other path is available through another active First-Hop.

We consider the th cycle, where . We have: (22)

According to (22),  will extend its inactive period by  slots and by  for the worst case. Thus, the next wake-up of  is computed as follows: (23)

Given Eq. (23), we proved that  will wake up simultaneously with the source after applying the adjustment rule and it will be available for any data transmission during the interval .

Lemma 2

After applying the scheduling adjustment rule, the interval  will at least be covered by the active period of the second next-hop selected by the source, 

Proof of Lemma 2

Similar to Lemma 1, we consider three potential situations relative to  wake-up, as exposed in Fig. 6:

i.
Situation 1: The source node and  wake up simultaneously. The period of activity of  will overlap with the activity period of  and the two paths crossing these two First-Hop nodes will be active at the same time, as illustrated in Fig. 6a. In such a situation, no path will be available for some period of time during the cycle.

ii.
Situation 2: The source node wakes up before . The latest wake up of the source will be after the  period;

iii.
Situation 3: The source node wakes up after . The worst case is when the source wakes up after . As depicted in Fig. 6c, a certain period of time will not be covered by an active First-Hop node.

Case 1: The source node and the First-Hop node  wake up simultaneously

The source and  wake up at the same time; so, we have: (24)  can compute its appropriate wake-up time during cycle , where , as follows: (25)

According to (25),  will extend its inactive period by . Therefore, the next wake-up of  is computed as follows: (26)

Given (26),  will wake up after the source by . Therefore, the overlapping interval between activity periods of the source and  is the interval separating the source sleeping time and the wake up of . It is computed as follows: (27)

Given (25), (27), (5), we confirm that an overlapping interval  exists. During this interval,  will be active and able to receive any critical data sent by the source.

Case 2: The source node wakes up before its First-Hop neighbour, 

 can wake up within  slots, where ; thus, we have . During  (),  computes its appropriate wake-up time as follows: (28)

According to (28),  must extend its inactive period by . If  wakes up after , it will keep the same scheduling. Therefore, the next wake up of  is computed as follows: (29)

Given (29), (5),  will be active during the overlapping interval , since this node will wake up after the source by  with the new scheduling, similarly to case (1) relative to .

Case 3: The source node wakes up after its First-Hop neighbour, 

The source can wake up within  slots, ; therefore, we have . The worst case is when the source node wakes up after  interval. In such a situation, the overlapping interval between active periods of the source and  is equal to . This interval will overlap with the activity period of .

We consider the th cycle, where .  computes its appropriate wake-up time: (30)

According to (30),  will extend its inactive period by . If the source wakes up after  by , this latest must extend its inactivity period by . The next wake up of  will be: (31)

Given Eqs. (31), (32), (5), we proved that  will wake up after the source by  after applying the adjustment rule and it will be available for any data transmission during  interval, since: (32)

Lemma 3

After applying the scheduling adjustment rule, the interval  will at least be covered by the active period of the third next-hop selected by the source, 

Proof of Lemma 3

For , we consider three potential situations relative to its wake up instant, as exposed in Fig. 7:

i.
Situation 1: The source node and  wake up simultaneously. The period of activity of  will overlap with the activity period of  and the two paths crossing these two First-Hop nodes will be active at the same time, as illustrated in Fig. 7a. In such a situation, no path will be available for some period of time during the cycle.

ii.
Situation 2: The source node wakes up before . The worst case is when  wakes up after . As depicted in Fig. 7b, the period of activity of  will overlap with the activity period of  and no active path will be available for a certain period of time. We assume that the source can wake up even during its inactive period to send any critical data, upon event occurrence, in order to support effectively delay sensitive applications even in duty-cycled networks.

iii.
Situation 3: The source node wakes up after . The latest wake-up of the source will be after the period , as exposed in Fig. 7c.

Case 1: The source node and the First-Hop node  wake up simultaneously

The source and  wake up at the same time; so, we have: (33)

 compute its appropriate wake-up time during cycle , where , as follows: (34)

According to (34),  will extend its inactive period by . Thus, the next wake-up of  is computed as follows: (35)

Given (35),  will wake up after the source by .  adopts the  scheduling. Then, according to (3),  will be awake during . In fact, we have: (36)

Thus, even if the source adopts  scheduling and will be inactive during the  interval, an active path will be available. In urgent situations, the source can wake up and promptly send its data through .

Case 2: The source node wakes up before its First-Hop neighbour, 

 can wake up within  slots, where ; thus, we have . Let consider the cycle () for the wake up time computation of : (37)

According to (37),  must extend its inactive period by . The next wake-up of  is computed as follows: (38)

Given (38), (36),  will be available during x interval, since this node will wake up after the source by  with the new scheduling.

Case 3: The source node wakes up after its First-Hop neighbour, 

The source can wake up within  slots, ; thus, we have . The latest wake-up of the source is after the  interval. We consider the th cycle, where .  computes its appropriate wake-up time: (39)

According to (39),  will extend its inactive period by . If the source wakes up after  by ,  will keep the same scheduling, as . The next wake up of  will be: (40)

Given Eqs. (40), (36), we proved that  has to wake up before the source by  in order to be available for any data transmission during  interval.

Proof of Theorem 2

After applying the scheduling adjustment, we proved through Lemma 1, Lemma 2, Lemma 3 that:

-
 will be available during , the overlapping interval between the active periods of  and the source;

-
 will have to wake up after the source by , thus the overlapping period between their active periods will be ;

-
 will have to wake up after , thus the remaining period  will be covered.

With these scheduling modifications, made by the selected First-Hop nodes, the entire cycle will be covered by their active periods. The same reasoning is applied for each intermediate node and its subsequent next-hop node in order to have a complete overlapping between their activity periods to set up a pipeline forwarding along the same path. The process continues until reaching the sink node for all three paths crossing FH1, FH2 and FH3. By means of complementary schedules orchestrated over these established paths, an active path will be available to deliver urgent traffic at any time during the entire cycle.

5. Performance evaluation
In order to assess the performance of our cross-layer multipath routing approach, we propose two phases for our evaluation:

Evaluation of routes construction: We propose to evaluate the route construction phase as it has a deep impact on the routing process, yet the characteristics of established paths influence deeply the data transfer phase. In this context, we evaluate the path construction process of CL-NDRECT and FMRP (Jemili et al., 2014), a multipath routing protocol operating under always-on WSNs. FMRP, in a similar way to our approach, is able to construct multiple node-disjoint and non-correlated paths using two phases. For FMRP, the discovery phase is triggered by the sink by flooding an interest message throughout the network. In order to build a local view during this first phase, each node includes in its interest message the list of its known predecessors and siblings (neighbours within the same level). The route construction phase is triggered by the source node by sending RREP packets. The source node includes in the RREP packets information about common neighbours of selected next-hop nodes. The subsequent nodes must avoid these common neighbours when selecting their next-hop nodes in order to have node-disjoint and non-correlated paths. Since our proposed CL-NDRECT is designed for duty-cycled networks, it is then important to highlight the improvement related to the route construction as well as the price to pay against FMRP which on the opposite necessitate always-on network operational mode.

Evaluation of data transfer: We focus in this phase on the evaluation of the data transfer phase in order to highlight the benefits brought by applying a cross-layer and context-aware multipath routing approach to deliver urgent traffic with zero penalty in terms of additional delay (as we are operating under a duty-cycle mode). In our approach, we exploit multipath routing to establish  paths to be used sequentially in order to balance the traffic load and distribute energy consumption among several nodes. In fact, it is not useful to use multiple paths concurrently since urgent events are rather not that frequent in nature. As only one route is made be available for data transfer at any time, it is worthy to compare the performances of CL-NDRECT against both FMRP and also a single path approach under an always-on network.

We evaluate the performance of our approach by simulation using the OMNeT++ simulator (Varga et al., 2010). We implemented all proposed protocols. We varied the network size and we considered dense networks where each node has at least 4 neighbours with an average degree equal to 7. We allowed communications between one sink and a unique source. The source node is placed at the left side while the sink is placed at the right side of the simulation area to allow multi-hop communications. The confidence intervals shown on all figures are 95% confidence intervals obtained by replicating each simulation run 12 times. Simulation parameters are summarized in Table 4.


Table 4. Simulation parameters.

Parameter	Value	Parameter	Value
Network size	50; 100; 150; 200		0.00445 s
Average degree	7		0.0017 s
Bandwidth	1 Mb/s		0.002225 s
Transmission range	10 m	Battery capacity	10 mAh
5.1. Evaluation of route construction
To quantify the cost of operating in duty-cycle mode and assess its impact on the routing process, we consider the following metrics:

-
Control overhead: it refers to the sum of all control packets sent during the route construction phase.

-
The total time spent for path establishment: It refers to the time needed for path construction. For CL-NDRECT, it represents the time spent from sending the first RREQ packet until receiving the RREP packets by the source. For FMRP, it represents the time spent from the interest flooding by the sink node until the reception of the RREP packet by the sink.

-
The average amount of energy consumed during path establishment: It is equal to the sum of energy consumed by all the nodes during the simulation time divided by the number of nodes in the network.

Fig. 8 illustrates the total delay required to build multiple routes for both protocols as a function of the number of nodes in the network. FMRP slightly outperforms CL-NDRECT since it operates under the always-on mode. For FMRP, nodes, being always active, are able to receive and forward routing packets promptly with no virtually no delay. On the opposite, CL-NDRECT operates under the duty-cycle mode, and as such a node may have to wait the wake-up of its neighbours in order to be able to broadcast the RREQs. During the routing process, each node remains active for a maximal period  and inactive for a minimal period , which induces this extra delay. However, the difference is not remarkable as E-ECAB, at the MAC level, allows each node to compute the appropriate instants to broadcast its data packets in order to decrease latency and the broadcast count through selecting overlapping periods including the maximum number of active neighbours not already reached. Operating under a duty-cycled environment allows CL-NDRECT to better conserve the energy of nodes. This is clearly observed on Fig. 9 illustrating the amount of energy consumed for route establishment as a function of the number of nodes within the network. FMRP nodes experience overhearing and idle listening which contribute to wasting energy. CL-NDRECT, however, succeeds to overcome these issues thank to the duty-cycle mode. Besides, the use of the RREQ aggregation permits to reduce the number of forwarded RREQ, as perceived in Fig. 10 illustrating the control overhead as a function of the number of nodes. FMRP produces higher control overhead, resulting in a higher energy consumption.

Fig. 8. Total time of paths establishment as a function of the number of nodes.

Fig. 9. Average consumed energy per node as a function of the number of nodes.

5.2. Evaluation of data transfer
In this phase, we consider a scenario where only 10 events are detected at different times during 100 s of simulation time. To point out the effectiveness of our approach, we focus on the following metrics:

•
Maximum end-to-end delay: It corresponds to the maximum time separating the generation instant of a data packet until its reception at the sink.

•
Energy consumption: It corresponds to the average energy consumed by nodes involved in the route.

The results related to the maximum end-to-end delivery delay for the considered protocols are depicted on Fig. 11 as a function of the number of nodes. As expected, Both FMRP and the single PATH techniques slightly outperform NDRECT as they both rely on an always-on mode. FMRP very slightly outperforms the single PATH alternative, however the difference is not that significant. Recall that CL-NDRECT establishes three paths with complementary schedules, and keeps just one available path at any time to ensures a maximal coverage of a whole cycle. The adjustment rules of the duty-cycle scheduling of involved nodes along the same path allows a fluent transfer, despite the temporary unavailability of the nodes.

Alternatives working with always-on nodes slightly outperform CL-NDRECT in terms of end-to-end delay, but at the expense of much higher energy consumption as shown in Fig. 12. This figure illustrates the average energy consumed by involved nodes in data transfer. For the single PATH alternative and FMRP, involved nodes waste much more energy due to the passive listening and overhearing. FMRP slightly outperforms the single path alternative since it allows energy balancing among multiple paths. In addition, the scarcity (or lack of abundance) of urgent traffic explains the reduction in the gap between the results obtained for these two alternatives. CL-NDRECT allows each node to adopt the  scheduling without affecting the route availability. Therefore, concerned nodes will be active only for a minimal active period  and inactive for a maximal inactive period . As critical data is sent in small packets, a minimal active period is enough to receive and forward such a packet immediately during the same cycle. Besides, the complementary schedules of the three established paths will ensure the timely delivery of urgent data, regardless of the occurrence instant.

Fig. 11. Maximum End-to-End delay as a function of the node number.


Fig. 12. Average consumed energy per node in a route.

6. Conclusion
Multipath routing is widely used to improve the network performances by authorizing concurrent transmissions over multiple paths. In this context, we proposed a cross-layer multipath routing approach to ensure critical data transfer with minimum delay under duty-cycled WSNs. The cross-layer interaction between the routing and MAC levels allows to (i) build n node-disjoint paths satisfying the requirements needed to support such traffic (ii) adjust the duty-cycle schedules of involved nodes along the established routes in order to mitigate operating in a duty-cycle mode with no noteworthy increase in consumed energy. We proved that the adopted scheduling adjustment rules provide the appropriate scheduling for each node in each path to ensure a smooth seamless pipelined transfer of critical data. Other improvements and further simulation scenarios could shed more light on the various facets of the proposed approach and better assess its effectiveness.