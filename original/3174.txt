Learning to code is far from an easy task, it is a promising approach that underscores the use of the video game culture of students to motivate them to invest their time in the practice of programming. The students in this discipline are often discouraged by the amount of information to remember and the complex and constraining syntaxes. Moreover, the computer environment they use daily has little relation to that proposed for learning programming and they do not immediately perceive the links between the two universes. In this article we have proposed a tool which aims to help learners in the one of the different programming language; it's a learning game called Java shooter to promote learning java programming with high motivation rate. This game will allow learners to understand the lessons learned with a kind of interesting motivation. The development of this game idea is carried out using the IMIE model for the creation of learning games, this model is characterized by its clarity, and simplicity of adaptation which give the hand to the teacher to integrate himself in the process of creation in most of the stages of learning, in order to ensure a better pedagogical playful adaptation, whose goal is to integrate this new technology into the education system. Overall, the teachers greatly appreciated the design of the "Java Shooter" which is based on the chosen model in several steps. Analysis of the empirical results shows that most learners have accepted this tool to strengthen the classical teaching materials of Java programming.

Access provided by University of Auckland Library

Introduction
In everyday life, the majority of people consume phenomenal time in video games on smart-phones, computers and consoles, .... This is explained by the increase in video game markets which currently compete with the video game industry television, film and smart-phones (Chang et al., 2020). In this sense, the researchers took advantage of this wave to transmit serious content in a playful way through serious games. It is a tool that uses computer technologies to transmit serious content, through the playful springs embedded in video games, with a very high rate of consistency.

From the year 2002, which saw the birth of the serious game America’s Army (Prima Games and al., 2002) by the American army with an enormously high budget (33 million dollars) and which made a very big success at the World level. Several sectors have started to invest in integrating games into their systems (Stamatios Papadakis, 2020) (Muratet et al., 2019) (Seemiller & Grace, 2017). The serious gaming market has grown rapidly since 2005, with an estimated turnover between 1.5 and 5 billion dollars in 2007 (Alvarez and Djaouti, 2010). According to a very recent report, on the forecasts for 2021-2027, the serious gaming market in the fields of education, culture, health, trade, media and advertising is expected to reach 8 billion dollars by 2027 against 3.8 billion dollars in 2020 with an annual growth rate of 10.9% (Androidfun, 2021). The emergence of serious games since the early 2000s has been accompanied by several attempts to propose games in different sectors. Several examples are published in the field of education and teaching: the PyRat game (Bastien & Marine 2017) for teaching computer science, Missions in Emosson (Vermeulen et al., 2017), developed to help learners in fluid mechanics, World of variables (Zapušek & Rugelj, 2013) to introduce the basic notions of programming to learners.

At university, serious games could emerge as additional pedagogical training tools piloted by teachers. They are positioned as new solutions that bridge the imbalance between the multimedia aspect (attractive and interactive) and educational systems anchored on academic modes of knowledge transfer (Lavergne-Boudier & Dambach, 2010). The advantages of serious games give them a particular interest in teaching, they are not destined to replace traditional courses but as useful and effective complements that make it possible to contextualize the theory through concrete cases (Alvarez, 2007).

In this context, we suggested enriching the existing learning games by developing the "Java Shooter" idea. It is a combination between an educational content presented by a java programming language course, and the motivational side resulting from the shooting games. The choice of this category compared to other types (role-playing, strategy, puzzle and sports games), is justified by the fact that it is appropriate for both sexes: boy and girl Several advantages are mentioned in this category which aim to improve the visual acuity, the concentration rate of the learners and to enrich their skills at the syntax very quickly The interactions between the player and his opponent in shooting games, offers the learner a significant and indeterminist motivation with minimum mental effort. The modeling of "Java Shooter" game is based on IMIE model, which simplifies the design process by clear, adaptable steps, ensuring good schematization of both sides serious and motivational. The goal is to design an interesting pedagogical-playful tool to attract learners to learn Java programming in a fun way compared to classical teaching methods. The object of our contribution is to put into practice the model that we proposed in previous works by the development of a game to help the learning of java programming, which responds to the limitations of existing games.

Following this introduction, we will discuss the problematic study of learning to program in the second part. The description of the chosen model and the development of the "java shooter" game will be presented, successively, in the third and fourth parts. The conclusion and prospects are discussed in part five.

Learning programming: problematic study
To help people with learning, there is a scientific basis that recommends using colors, emotions, and even games. Because, the functioning of brain in the fun and playful state is highly responsive compared to others states (Michaut & Roche, 2017). The idea that focuses on serious games to facilitate learning in complex areas is confirmed by their uses in many sectors. We can cite for example: Health and language learning (Jing Guo, 2016), economics and management (Lang et al., 2016), education (Brunet et al., 2020) whose priority is to arouse the desire to learn (De Gloria et al., 2014).

In the education sector, the discipline of computer science for example causes of several problems influencing the choice of this specialty among students who are at the beginning of their university studies (Ali et al., 2019). This is confirmed by Mathieu Muratet: «Regularly, 50% or more of students who initially chose computer science studies quickly decide to drop out» (Muratet Mathieu, 2010). Some studies have explained this to the fact that students have a feeling of boredom towards the discipline of computer science which has increased in recent years (Ouahbi Ibrahim, 2018). Some others, link the difficulty in learning computer science and programming to the lack of innovation in teaching methods, the lack of interaction between and with students and the demotivation of students through the use of the classic pedagogy of lectures, tutorials and practical work Brito & de Sá-Soares, 2014; Rubiano et al., 2015). In addition, the programming logic presents several difficulties and obstacles at several levels, one can note for example complexities at the level of manipulation and use of loops (Alaeeddine Y. and al, 2017), the construction of programs (Shahdatunnaim Azmi and al., 2016) and the structuring of algorithms and control instructions (Seppälä et al., 2006).

To remedy the problems mentioned above, some researchers have directed this work towards the evaluation of environments and programming languages for beginners (Miljanovic & Bradbury, 2018) (Mathrani et al., 2016), some others have turned to the articulation on serious games to attract their attention by the motivational side in this type of games (Kroustalli & Xinogalos, 2021) (H. Montes et al., 2021). Indeed, the use of serious games vision remains most effective if we take into account the propagation of the games culture in the minds of majority of learners in recent years. Except that the serious games progress in educational systems remains very slow because of the absence of dedicated models for the Learning Games creation, participation of the teacher from the start in the creation process, the distribution of tasks to the intervening, and finally a model that does not require computer skills to use it.

To meet the constraints mentioned above, we will present in the rest of this article a game that we have developed. The game idea "Java Shooter" is dedicated to novices to promote learning java programming with high motivation rate.

Choice of design model
In the directory of authorship tools designed for serious game design, a variety of models and methods are set up to help designers develop their game ideas, where each of these models and methods is valid for the creation of serious games in a general way, some others are dedicated precisely to develop the learning games to consume in the educational sector. To develop the idea of the game, we have studied several examples of models in the field such as: MISA, EMERGO, DISC and IMIE in order to choose the most suitable and which meets our objectives traced. The criteria for selecting the favorable model have been presented in the Table 1 below:

Table 1 Distribution of skills for "Java Shooter
Full size table
According to the table above, the IMIE model verifies the four criteria which justify our choice:

Presents several sub-models dealing the educational aspect of the game.

Integrates the main actor in most steps to clarify their responsibilities in each.

Identification of the intervening necessary to ensure better collaboration and accelerate the pace of creation.

Adaptation of the iteration cycle to our objectives.

In the following, we describe this model which consists of four stages

Identification (Analysis and Planning)
Specification of the two main functions: Analysis and Planning through collaboration between: researchers, teachers, pedagogues and game creators. The analysis includes on the viewing of the environment in which to use the game, and the determination of the sampled learners/targeted users, their achievements, their prerequisites and their problems. The planning focuses on: tracing the pedagogical and technical objectives of the game, structuring the idea and integrating the factor of motivation into the scenario of the game.

Modelisation
Formatting the learning system through the definition of the triplet of sub-models to be treated pedagogically by the teacher and the pedagogue.

i.
Domain sub-model

Presentation and architecture of the game idea to be presented in the form of a graph that illustrates the relationships that link the necessary skills of prerequisite, precedence and composition (El-Kechaï et al., 2015).

ii.
Motivation sub-model

Integration of the motivational factor in the pedagogical content intended to be transmitted, by the support of the ARCS elements of the Keller motivation model (Keller, 1987).

iii.
Scenario sub-model

Tracing the paths of the pedagogical-playful scenarios of the game, applying the schematization of the MoPPliq model designed by its author Bertrand Marne (Marne et al., 2013).

Implementation
Assemblages of pedagogical and playful elements constituting the whole game such as: The triplet of pedagogical sub-models treated with the playful scenario and media components necessary to achieve a pedagogical-playful adaptation. This work is done through the collaboration of essential intervening: Game Creators and pedagogue.

Evaluation
The test the relevance of the game in front of a sample of the identified population is done to verify two main things. On one hand, that the game meets the educational objectives traced at the beginning and the possibility to be used as a complementary tool in a suitable training. On the other hand, to discover the strengths and weaknesses in the game, and to study possible improvements to be made, by the two possibilities of iterations proposed in the model (towards the modeling phase to remedy the problem of the content, or towards the implementation phase to improve the playful side in the game).

Development of "Java Shooter"
Based on the structuring of the IMIE model for learning games modeling, we will present in this section, the development of our game approach: "Java Shooter" for learning the Java programming language, the purpose of which is to help learners/players, on the one hand to practice their course learning, and to improve and know how to use these acquired in Java on the other hand.

Identification for "Java Shooter"
Before progressing in the process of developing a serious game, the identification phase is necessary to determine the desired goal of this game. As part of "Java Shooter", a start-up meeting was held between the work team (researcher, teacher, pedagogue and game creator) to define all the objectives targeted by the game, the pedagogical and playful elements, in order to identify the framework of the adapted game to improve the skills of the sampled learners targeted in java programming. Figure 1 below shows the different factors that define the idea of the game.

Fig. 1
figure 1
Identification for "Java Shooter"

Full size image
Pedagogical modeling of the game
The technical and educational characteristics of our game approach are determined. We have established in this step, the triplet of sub-models that will be treated pedagogically. This work is carried out by our research group in collaboration with a pedagogue to achieve a better pedagogical mapping and meet the requirements outlined previously.

Domain sub-model for "Java Shooter"
Identify as a first step the most important parts of the course that will be treated in the game (which can be modified or changed in future versions of the game):

General syntax of a Java program.

Structuring of loops, classes and objects.

Schematization of the tables.

Then, these large selected parts will be connected by links of prerequisites, preference and composition which respectively represent the skills of prerequisites, preferences and composition. The set of competencies describes the domain model (competency model) to ensure better playability and consistency between the learning parts proposed in the game. Figure 2 below illustrates the domain model for "Java shooter".

Fig. 2
figure 2
Domain model for "Java Shooter"

Full size image
With, the links of:

Precedence (P) present the preferable skills to acquire ahead.

Prerequisites (Pr) present the essential skills to acquire ahead.

Composition (C) present the sub-skills.

After developing the domain model for "Java Shooter", we assigned all these skills according to the necessary levels. Table 2 shows the distribution of competences in the three proposed levels.

Table 2 Distribution of skills for "Java Shooter
Full size table
The distribution of the levels in the table above, presents a global vision on the different skills of the java language to integrate in each level. As in most games, the first level always has an initialization game that aims to encourage players to move forward in the game. Thus, we dedicated this first level to support by exposing the basic skills of Java programming language. After the players have recalled basic notions treated in the first level, the second level focuses on the structuring of loops, classes and objects, by exploiting the skills acquired in the first level. Finally, the third level is presented with a high complexity rate compared to the previous levels, dedicated to the schematization of the tables.

Motivation sub-model for "Java Shooter"
In this part, we will describe the motivating aspect in the pedagogical content of the "Java Shooter" by exploiting the four ARCS factors of the Keller model (Keller, 1987): Attention, Relevance, Confidence and Satisfaction. The value added by these factors is to trace from the start, the motivational side that creates the difference between educational games and other teaching materials. Moreover, they make it possible to designate the motivating points from the course that must be placed in the game. In Fig. 3, the ARCS factors are presented according to the content of the "Java Shooter".

Fig. 3
figure 3
ARCS Elements for "Java Shooter"

Full size image
Scenario sub-model for "Java Shooter"
To pedagogically script "Java Shooter", the IMIE model is based on the MoPPliq tool (Marne et al., 2013) for the schematization of pedagogical-playful paths. The latter is characterized by the diversity of adapting to any type of scenario through the division in the form of black boxes representing the levels (the cases studied) which will be characterized afterwards by input and output states, constituting at the end a tree structure of activities. We present in Fig. 4 below, the pedagogical-playful course of the "Java Shooter" represented by his three levels: 1, 2 and 3.

Fig. 4
figure 4
Pedagogical-playful paths of "Java Shooter"

Full size image
The graphical representation of scenario is in linear form, which is perfectly compatible with the general framework of the game and the activities chosen. The states in green in Fig. 4 represent the objectives which are prerequisites for using the selected input state. For the output states which are indicated in brown, they represent the objectives that have been targeted in the level if this output state is activated.

Implementation and assembly of elements
In order for the triplet of the sub-models to be adapted to the content of the game, in this part we will assemble the pedagogical elements with the playful content from the video games. This work will be carried out by our research team in collaboration with the pedagogue and the creator of the games (the developer).

Choice of game structure
To identify the structure of our game, we took into account: the trends of the target audience, the techno-pedagogical expectations and motivation support mechanisms. Our choice is the frame of a shooting game from which the scenario is always the same: The player is asked to complete a series of puzzles to win the game whose the obstacles are also created by the game scenario. To meet the objectives pursued, we adapted the framework of this type of games to our pedagogical content, in order to build "Java Shooter" represented by:

A variety of sessions are offered to learners/players to improve their teaching skills and earn score points through each full session, in order to achieve a place in the list of the game’s top three scores.

Obstacles come from the game system.

Several sessions each with different programs to maintain the degree of difficulty and challenge.

Design of the overall game scenario
To script the idea, several elements of the structure and content of the game were defined in order to develop the game (Fig. 5).

Fig. 5
figure 5
Set of constituent elements "Java Shooter"

Full size image
Start menu For "Java Shooter"
Consists of four proposals, each offering the player to perform one or more operations (Figure 6 below).

Fig. 6
figure 6
Start menu of "Java Shooter"

Full size image
Levels proposed in "Java Shooter"
The game environment "Java Shooter" offers the player three levels with varying difficulty rate (Figure 7 below):

Fig. 7
figure 7
Levels proposed in "Java Shooter"

Full size image
Components of a Java Shooter Game Session
Figure 8 below illustrates the all elements that make up the interface of a game session in "Java Shooter" which consists of a variety of factors to attract the attention of the player.

Fig. 8
figure 8
Interface of a "Java Shooter" session

Full size image
Scenario propose in "Java Shooter"
The scenario architecture in "Java Shooter" is presented in a readable, simple and easy way to navigate between his interfaces (Fig. 9). The Start Menu offers players the choice of several possible proposals:

Fig. 9
figure 9
Scenario proposed in "Java Shooter"

Full size image
When starting a game session, the player selects in the first place, a level (1, 2 or 3) according to his skill in java programming, then he will choose an exercise in the same level selected. The game session starts on the screen, the learner starts playing taking into account the constraints proposed by the game system Figure 10 below) :

The learner has win the game session (Complete), he will have the choice to either :

Continue with other exercises in the same level click on "Next".

Choose other types of exercises presented in the other levels to click on "Next" after "Back".

The learner does not manage to complete the session (Failed), he will have the choice to either:

Continue with another exercise in the same level to click on "Replay".

Leave the "Play" menu to click on "Home".

Fig. 10
figure 10
Play scenario in "Java shooter"

Full size image
Before starting a game session, the player has the choice to modify the game mode: Activate→← Silent (click on "Setting"), also to discover more information about the game (click on "About the Game") (Figure 11 below).

Fig. 11
figure 11
Scenario Option in "Java shooter"

Full size image
The player chooses to discover the scores obtained. Then "Best Score" will allow him to discover the last three best scores obtained in the game (Figure 12 below).

Fig. 12
figure 12
High score scenario in "Java shooter"

Full size image
Evaluation of "Java shooter"
During this part, we present the evaluation conducted to validate the game idea "Java Shooter" which can judge us the effectiveness of the design model chosen (IMIE model) as well as to evaluate the game on the analytical and empirical side.

Validation of the IMIE model chosen
In order to judge the relevance of the IMIE model for the identification and design of this game, we presented the process of creating "Java Shooter" to a several university professor having a wide experience in the field of higher education, except that it is new in the field of Learning Games (LG). Several remarks were noted from this contact:

The teacher noted the importance of the objective identification phase before starting in the design details: "The identification makes it possible to trace the design path to be followed, taking into account the samples of the targeted learners and the pedagogical content to be transmitted according to the existing constraints".

The general modeling phase of the sub-models to be treated pedagogically incites the interest of the teacher, despite the difficulties encountered during his exhibition.

The architecture of the domain is necessary before dealing with any work on the pedagogical side; the problem exists in extracting motivating factors from serious content. Yet this factor is totally absent in classical teaching methods.

Learning java programming with such a kind of motivation for example as that presented in "Java Shooter", according to him is attractive and delicate.

Tracing the scenario sub-model that determines the missions proposed to the learners/players requires a varying degree of difficulty, while the presence of a pedagogue during this part ensures the correct distribution of levels.

The teacher involvement in the model as an actor can be seen as an advantage and also a limitation of the model’s applicability.

Possible that the model suffers from the constraint of the learner's follow-up.

How can the teacher know that a good score reflects the learners understanding of the course?

It is a very good way to transmit knowledge to learners while playing.

Finally, the teacher’s general intervention during most phases was appreciated. Afterwards, we will present the overall evaluation of the game idea that would allow us to measure analytically and empirically the proposed game.

Overall Evaluation of the Game
To measure the effectiveness of Java Shooter, there are several methods of evaluation that make it possible to check whether the objectives set out at the start are actually achieved, in order to ensure a good adaptation of the pedagogical and playful qualities (Denise & Szilas, 2017). In this sense, we present in the sub-parts below the evaluation of Java Shooter by the two analytical and empirical methods, in order to discuss the results obtained.

Analytical Evaluation
To analyze a learning game, there are several grids and models that bring together the criteria that characterize this category of games. These analysis models provided designers with a list of quality control indicators to identify potential errors in an LG, and to ensure that compliance is achieved in the final version of the game. For this, we have identified in the Table 3 below, a set of quality indicators (Marfisi et al., 2012; Sanchez, 2011;Fahima, 2016) to verify the relevance of Java Shooter and remedy the possible limitations at the pedagogical level, motivational and technological, before presenting it to a sample of learners.

Table 3 Proposed quality indicators for the analytical evaluation of "Java shooter"
Full size table
Empirical evaluation
This evaluation part is based on the analysis of experimental data from activity tracing (questionnaires, observation notes …) (Loh, 2012; Marfisi et al., 2012). In order to discover the behavior of learners in front of the Learning Games as support for learning, we submitted a questionnaire to a sample of 100 learners in the field of mathematical and computer sciences at the Polydisciplinary Faculty of Taza, to generally measure their behavior vis-à-vis the Learning Games. Thus, to judge their opinions before the integration of this type of games as a support for learning.

Experimental result
The questionnaire we have proposed consists in addition to a preface of three parts: A, B and C, each with a different intention. Before presenting the results of each part of the questionnaire, we will present the preface of the learners participating in this survey (Figure 13).

Fig. 13
figure 13
Preface of the learners participating in the survey

Full size image
From the statistics obtained in the preface part of the questionnaire (Fig. 14 above) it can be deduced that the discipline of computer science is appropriate for both genders for an average age between [20 and 21] years. However, there is a significant number of learners who have repeated in this module, which indicates that learners find difficulties in learning programming.

Fig. 14
figure 14
Statistics on learner habits in relation to video game consumption

Full size image
Part A
In this first part, we have just presented the habits of learners towards video games consumed by all of the learners identified for the survey (Figure 14).

As expected, the video games are strongly presented in the daily lives of learners (83% play on smart-phones) although they do not benefit from this category of games (Figure 14 above). This seems important to us to benefit from this very high consumption rate, by the integration of a game for pedagogical purposes for learning java programming with a kind of important motivation.

Part B
To judge the attitude of learners towards learning java programming as a subject, we have presented in this second part, a set of questions that allow us to determine their level of satisfaction with the training presented for this discipline (Figure 15).

Fig. 15
figure 15
Statistics on learner habits in relation to video game consumption

Full size image
Due to the statistics mentioned above in (Figure 15), the majority of learners are not interested in practicing Java programming outside the scheduled sessions, as they find the training presented for this module to be difficult, unsatisfactory and boring.

Part C
In this part we have just exposed some of the statistics (Figure 16) mentioned the opinions of this sample towards the Serious Game in a general way.

Fig. 16
figure 16
Statistics on learner habits in relation to video game consumption

Full size image
Following the statistics mentioned in (Fig. 16). Almost half of the sample played Serious Games, yet they never have the opportunity to practice this type of games in an educational setting. This motivates more than half of the samples to agree with the integration of Serious Games into their education system.

Conclusion and perspectives
To help learners overcome the limitations mentioned in the java programming teaching , we presented in this work the development of Learning Game java Shooter which aims to facilitate the learning of this programming language. The novelty in this Learning Game is mentioned in the adaptability between the framework of the shooting game and the java programming through identify, target and shooter the instructions necessary to complete the program and win the session. Moreover, the modeling of the game by IMIE model showed his simplicity on the creative side, which enhances its use by the generation of creators of this type of games. The results show that learners are motivated to integrate this new technology into their education system. For this reason, we aim in the next work to create a Learning Game base for the different disciplines in order to integrate this tool as a support for teaching.