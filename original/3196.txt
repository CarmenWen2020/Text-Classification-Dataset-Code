This study aims to evaluate the teaching of the programming process carried out through scenarios related to daily life within the framework of Reverse Engineering and the Theory of Didactical Situations. The sample of the study consists of 15 prospective computer and instructional technology education teachers. Quantitative and qualitative data were collected simultaneously and analysed independently in this study, which was designed according to an embedded mixed method. In the study, the prospective teachers’ perceptions of self-efficacy, holistic and analytical thinking skills in problem-solving, academic achievements, and data collected for reverse engineering processes were evaluated in accordance with the effectiveness of programming education. After applications based on Reverse Engineering and the Theory of Didactical Situations, it was determined that the prospective teachers’ perceptions of self-efficacy towards programming and their academic achievement increased, and that their analytical and holistic thinking skills when solving problems were also positively affected.

Access provided by University of Auckland Library

Introduction
Programming, which first came to the agenda in the 1960s in an educational sense, have since been included (to varying degrees) in educational systems from primary schooling right through to university (Fessakis et al., 2013). In this process, with programming taught using different teaching methods and techniques (Guzdial & du Boulay, 2019), learners are expected to become skilled problem solvers (Sáez-López et al., 2016). However, programming languages have an abstract structure (Gomes & Mendes, 2007) and situations such as new beginners often seeing the programming process as complex (Erol & Kurt, 2017) and difficult (Robins et al., 2003) pose certain obstacles in programming education. A sufficient programming education can be conducted through implementing learning scenarios that target the problem-solving and creative thinking skills of individuals (Klimek et al., 2011). This aims to increase the students’ self-efficacy in programming as they learn to structure their knowledge more robustly. Therefore, learning scenarios are needed that increase students’ self-efficacy, and support their learning problem-solving and programming skills as part of their programming education. In line with these results, it is considered that significant contributions will be made to the field through evaluating the impact of teaching scenarios that have been organised within the scope of new theoretical frameworks on the learning process.

The aim of the study is to investigate the effects of programming education carried out using the frameworks of Reverse Engineering (RE) together with the Theory of Didactical Situations (TDS). In parallel with this aim, the main question sought in the research is; ‘What is the impact of the configuration of programming education with Reverse Engineering and the Theory of Didactical Situations on the teaching process and its conclusion?’ From this, four specific research questions have guided the study:

RQ1: What is the impact of using RE and TDS frameworks together in programming education on prospective teachers’ academic achievement?

RQ2: What is the effect of using RE and TDS frameworks together in programming education on prospective teachers’ perception of self-efficacy in programming?

RQ3: What is the effect of using RE and TDS frameworks together in programming education on prospective teachers’ holistic and analytical thinking skills in problem-solving?

RQ4: What are the prospective teachers’ views on the RE process?

Theoretical background and related works
Programming education
The idea of turning students from being passive recipients into active practitioners has become popular in recent years with the implementation of student-centric approaches to programming education. The goal being that the problem-solving skills of students develop from attending programming education classes designed according to student-centred learning approaches such as those which are project-based or problem-based (Sayın & Seferoğlu, 2016). Improving problem-solving skills is important for students to learn and implement programming (Mathew et al., 2019). In terms of the programming education process, it has been determined that students can experience difficulties with the structure, design, and syntax of programming language (Ahmad & Gestwicki, 2013; Baist & Pamungkas, 2017). However, failure to provide adequate content or good management of the teaching process is considered to be among the factors that can negatively affect the outcomes of programming education (Chandra & Liem, 2013). In this context, researchers have preferred different teaching approaches in order to improve the programming education process so that students gain the appropriate programming skills (Giacaman & De Ruvo, 2018; Malik et al., 2020). Programming education has been supported in different studies by theories and strategies such as game-based learning (Mathrani et al., 2016; Papadakis & Kalogiannakis, 2019), collaborative learning (Echeverría et al., 2017), problem-based learning (Çakıroğlu & Öztürk, 2017), inquiry-based learning (Coleman & Nichols, 2011), self-regulating learning (Çakıroğlu et al., 2018), and Reliability-Quality-Reliability (RQR) chain strategy (Majid, 2014) with the aim of enriching situations and to better structure the mental processes within teaching. In programming applications designed within the framework of various theories in the teaching process, it is important to structure a learning process based on collaborative activities in which learners can hold discussions with their peers (Çakıroğlu et al., 2016; Kordaki, 2010; Sawyer & Goldman, 2010). In addition, programming should include a feedback process from instructors and/or peers to learners as part of an appropriately structured teaching process (Scherer et al., 2020). Thus, students’ self-proficiency can develop in the intended direction (Burke, 2012; Yukselturk & Altiok, 2017).

Reverse engineering
Reverse Engineering (RE) is the process of analysing the existing system in order to determine the components of the systems and their relationship with each other (Chikofsky & Cross, 1990; West et al., 2015). RE is also used for purposes such as developing different products based on an existing part or product, or for prototyping (Lee & Woo, 1998). RE is considered to be a valid educational tool (Dempere, 2009; Verner & Greenholts, 2016) because the process itself helps to increase students’ motivation, as well as their systematic structuring of critical thinking (Griffin et al., 2012; Rogers-Chapman, 2014) and logical thinking capabilities, and thereby their analytical skills (Klimek et al., 2011). Wood et al. (2001) stated that RE in engineering education affords students the experience of how products are designed, which can lead to their increased enthusiasm and learning in lessons. West et al. (2015) mentioned that employing the RE process in science education offered students the opportunity to ask critical questions about design features, thus helping them to better understand the science and engineering components behind the design process. Taşçı and Şahin (2020) reached the conclusion that RE applications can positively affect students’ academic achievement and problem-solving skills in science education. In parallel with the contribution of RE to different fields, it is predicted that it will also make it in programming education.

Thayer (2017) identified the RE stages as determining the purpose of the design, observing how it works, dismantling/distorting, analysing, and reporting/redesigning. Similarly, Kennedy et al. (2016) listed the stages of RE in six steps: estimating, observing, dismantling, analysing, testing, and documentation. For the study, the RE process has been designated as Preview, Question, Revise, Reflect, and Review (PQ3R).

Theory of didactical situations (and adidactical situations)
Within the framework of the Theory of Didactical Situations, learning has been defined as the return of a system to a state of equilibrium by eliminating external influences on the system during the individual, situational interaction (Brousseau, 2002). The concept of the situation in this theory can be explained as follows: it is a learning context that is purposefully designed and organised for the realisation of certain learning as targeted by the teacher (Sensevy et al., 2005). In adidactic situations (AS), the student is unaware of the intended goals and the determined didactic goal is not shared with the student for a certain period of time; instead, this goal is attempted to be achieved by way of indirect methods (Brousseau, 2002). AS include the stages of devolution, action, formulation, validation, and institutionalisation. In this situation, the individual learns as a result of their interaction with the ‘situation’. In the learning process, the individual sends an effect to the ‘situation’, and in response, the ‘situation’ sends a return back to the individual. When an individual receives approval from the situation for all effects that they sent to the situation, that is when they are considered to have actually learnt (Brousseau, 2002). The need for applying this theory when designing the teaching processes for “programming is based on the grounds of creating a production-oriented process, which supports learners gaining knowledge within situations structured according to this theory” (Brousseau, 2002) and “the student can search for solutions to the problem situation they face by conducting appropriate research, experiencing the process, and then producing alternative solutions if the solution path does not reach the intended result” (Radford, 2008).

Furthermore, TDS was first offered as a theory for use in mathematics teaching (Brousseau, 2002). As a result, when the literature is examined, it is seen that a significant part of the studies based on this theory are carried out in mathematics education (Lalaude-Labayle et al., 2018; Miyakawa & Winsløw, 2009) and some in science education (Petersen, 2010; Achiam et al., 2013; Durukan, 2019). However, no previous research on the use of TDS in programming education has been uncovered.

Students’ perceptions that programming can be disassociated with or disconnected from the real world, due to its abstract structure (Ahmad & Gestwicki, 2013), can be addressed with RE offering real-world examples to learners (Zalewski et al., 2019) in support of the programming education process. Both RE (Zhong et al., 2021; Elizalde et al., 2008) and TDS (Aldon & Panero, 2020; Danisman & Guler, 2019) are recommended to be used in cooperative learning and product-oriented processes. It is seen in the literature that RE (Griffin, Kaplan & Burke, 2012; Taşçı & Şahin, 2020) and TDS (Brousseau, 2002; Danisman & Guler, 2019; Gök & Erdoğan, 2017) theories are effectively used in the process of producing solutions to the current problem situation of the students. Besides, when the studies in which RE is used are examined, it is seen that the process positively affects the academic achievement of students as well as their learning performance (Zhong et al., 2021; Barr et al., 2000). Similarly, in the literature, it has been determined that TDS increases the academic achievement of students (Durukan, 2019). Based on these explanations, RE applications within TDS can be applied in harmony in the field of programming instruction.

Methodology
Research design
In the research, an embedded mixed-method study design was preferred. The embedded mixed method is formed by adding a quantitative stage to qualitative research such as a situation study, or a qualitative stage to quantitative research such as with an experimental design (Creswell, 2014; Creswell & Plano Clark, 2011). In this context, both qualitative and quantitative data can be collected simultaneously and then separately analysed within a qualitative study.

Study group
The study group of the research was comprised of 15 s-grade prospective teachers (PTs) from a Computer Education and Instructional Technology department, who were taking the ‘Programming Languages-II’ (PLII) course during the Spring semester of the 2018-2019 academic year. In addition to learning programming languages, the PTs studying in the department also received training on how to teach these languages to students. Therefore, it was considered that the best test of the process followed in the research would be its application to the target audience. All of the PTs who participated in the study had already completed the ‘Programming Languages-I’ (PLI) course during the first semester of the same academic year, and thereby had gained sufficient knowledge regarding basic programming concepts such as variables, loops, and functions using C#. In the PLII course, the PTs were tasked with developing an application using their accrued basic programming knowledge. Demographic information regarding the participant PTs is presented in Table 1.

Table 1 Demographic information of PTs
Full size table
Data collection tools
Within the application process, the Programming Success Test (PST), Computer Programming Self-Efficacy Scale (CPSES), the scale of Holistic and Analytical Thinking While Problem Solving (HATPS), and the Reverse Engineering Information Form (REIF) were applied to the participant PTs as a means of collecting data during the preliminary and final applications. These data collection tools are introduced as follows:

Programming success test
The PST was developed by the researchers and consists of 12 open-ended questions. The expression given in each question is tasked to be expressed using four different forms such as program code, graphical user interface, mathematical representation, and flowcharting. The questions and the rubric key in PST were prepared by the researchers and finalised in accordance with statements received from five academician experts of programming education.

Computer programming self-efficacy scale
The CPSES was developed by Ramalingam and Wiedenbeck (1998) and subsequently adapted to the Turkish context by Altun and Mazman (2012). The scale consists of nine items and the reliability coefficient of the resulting scale was calculated as .928.

Holistic and analytical thinking while problem solving
The HATPS was developed by Umay and Arıol (2011) and consists of five items. Each item contains two different situations in accordance with an analytical and holistic thinking style that individuals can adopt when solving problems. The reliability coefficient of the scale was found to be .780.

Reverse engineering information form
The REIF was developed by the researchers and consists of seven open-ended questions concerning RE. In preparing the questions, the focus was on the concept of RE, the purposes of use of RE applications, and the use of these applications in training activities. The development of the form was supported by the opinions of three field educators and education experts.

Teaching process
The teaching process of the study includes four independent RE sessions: digital air conditioning, beverage vending machines, microwave oven, and free projects. For each session, one researcher assumed the role of teacher, while the other two researchers collected the data. These teaching sessions were structured according to the stages of the aforementioned theoretical frameworks. During the teaching process, the PTs received three different forms of feedback (3F); from their group peers, from peers in the role of the tester in other groups, and from the teacher. The PT who was tasked with finding solutions to each problem situation conducted the working process according to a cycle of discussion, coding, implementation, and reporting (DCIR). Figure 1 presents a flowchart of the implementation process of the study.

Fig. 1
figure 1
Flowchart of the application process

Full size image
The implementation of a session in the process corresponds to 1 week of course time (5 × 50 minutes). The teaching process was planned as four sessions for the PLII course over a total of 4 weeks, with each session lasting for 1 week (see Fig. 1). In the study, the CPSES, HATPS, and PST were applied prior to the teaching process as a data collection tool; then, following the teaching application, the CPSES, HATPS, PST, and REIF were applied. As shown in Fig. 1, the application was conducted on the same scenario for all PT groups for the first 3 weeks, and then conducted according to a scenario of the PT groups’ choice in the fourth week. How the in-class applications were executed through the RE scenario (microwave device usage system) used in the third week of the application process is briefly explained as follows:

Problem: To develop a software interface for a microwave device.

Stage 1 (Preview & Devolution): The problem situation was first presented to the PTs. At this stage, the PTs define the problem situation and conducts research on the solution. The PTs were shown microwave videos, and then asked to determine how the microwave works. At this stage, the tasks (on-off, time setting, temperature setting, function keys, locking system) determined by a group of PTs for solving the problem were included.

Stage 2 (Question & Action): The PTs’ researched and designed solutions for the given problem. The tasks they determined in the design were tested in the form of small steps, and changes applied in collaboration with group peers for the encountered problem. The working principles of the microwave’s five tasks for the working process were discussed with their peers, the structure of Windows Forms Controls and Components in the Microsoft Visual Studio user interface was designed, and the appropriate C# codes were searched. They tested the tasks they determined in the design in small steps, and as a consequence of the test, agreements were made with the groupmates for any problems that arose during the process. The testing of the program created by one of the groups for temperature adjustment and the arrangements made in the process are given in Table 2.

Table 2 Example arrangements for temperature setting task in microwave application
Full size table
Stage 3 (Revise & Formulation): The work flow for the tasks developed by the PTs in the previous stage and the codes for this flow were determined with the group peers at this step. The solution suggestions determined by one of the groups for the time setting and the design of these suggestions are given in Table 3.

Table 3 Example solution for time setting task in microwave application
Full size table
Stage 4 (Reflect & Validation): The PT groups completed their solutions to the given problem situation, which was then shared with the other groups and peers. A PT from different groups is hosted in the group and the software is tested. The microwave program, which was developed as a group by the PTs, was retested by the tester, one of the PTs in another group. The errors determined by Tester for the application prepared by one of the groups are given in Table 4.

Table 4 Example of error determined by tester in microwave application
Full size table
Stage 5 (Review & Institutionalisation): The problem solutions developed and tested by PTs were supervised by the teacher, and any required changes applied to order to obtain a correctly working software designed in accordance with the problem situation. The applications created by the PT groups were then tested by the teacher, and feedback on the process given to each group. A user control panel has been constructed with the addition of interactive components. Figure 2 shows the real interface for the problem situation used in the microwave example and the microwave application interface example prepared by one of the groups.

Fig. 2
figure 2
a An example of a program that is appropriate for the problem situation and functions correctly b The program prepared by the PTs at the end of the TM process

Full size image
Data analysis
Analysis of the data obtained within the scope of this study is described as follows:

Answers to the PST are rated as ‘2’ for a correct answer, ‘1’ for a partially correct answer, and ‘0’ for an incorrect answer. The data from PST were scored independently by two researchers. In order to determine the reliability of the study, Pearson’s Product-Moment Correlation was calculated for the consistency between the two scores. Pearson’s Product-Moment Correlation coefficient value was calculated as .96 (r = .963, p < .01), and this value showed a significant, positive, and high level of correlation between the two ratings. In this case, it can be said that the scoring was deemed to be sufficiently reliable. After scoring the responses to the PST, each PTs’ academic achievement score was calculated. The Wilcoxon signed-rank test was used to establish whether or not a statistically significant difference existed between the success scores that the PTs received from the preliminary practice and the final practice.

Data obtained from the CPSES and HATPS applications were analysed according to the Wilcoxon signed-rank test using IBM’s SPSS package software. The test established whether or not there was a statistically significant difference between the scores that the PTs received from these two scales from the preliminary practice and the final practice.

The data obtained from the REIF was analysed by way of content analysis. During the analysis, codes were determined from the statements of the PTs, and frequency calculations were made for these codes. The obtained REIF data was independently analysed by two researchers. Agreement between the researchers was calculated using Miles and Huberman’s (1994) percentage of compliance in order to determine the reliability of the study, and was found to be .87.

Examples from the of PTs statements are presented in the Results section, with the PTs encoded as PT1, PT2, PT3,..., PT15. The coding was reduced by inserting “-” between the numbers in the code if the PTs answered sequentially. For example, instead of “PT1, 2, 3, 4, 5”, “PT1-5” is displayed.

Results
The study aimed to investigate the effects of programming education carried out according to the RE and TDS frameworks. The following results were obtained, which are presented on the basis of the study’s research questions.

RQ1, What is the impact of using RE and TDS frameworks together in programming education on prospective teachers’ academic achievement?

The Wilcoxon signed-rank test results of the relationship between the PT’s scores from the PST are presented in Table 5.

Table 5 Wilcoxon signed ranks test results of PTs’ scores taken from PST
Full size table
The analysis shows that a significant difference existed between the PT’s pre-test and post-test scores (z = 3.41, p < .05). Taking into account the rank average and totals of the difference scores, it appears that this observed difference is in favour of positive ranks, that is, the post-test. According to these results, it can be said that the designed RE applications had an impact on improving the academic achievements of the PTs.

RQ2, What is the effect of using RE and TDS frameworks together in programming education on prospective teachers’ perception of self-efficacy in programming?

Results from the Wilcoxon signed-rank test of the relationship between the PTs’ scores taken from the CPSES are presented in Table 6.

Table 6 Wilcoxon signed-rank test results of PTs’ CPSES scores
Full size table
The results of the analysis show that a significant difference was found to exist between the PTs’ scores received from the pre-test and post-test (z = 1981, p < .05). Taking into account the rank average and rank sum of difference scores, it appears that this observed difference is in favour of positive ranks, that is, the post-test. According to these results, the PTs’ perception of self-efficacy in programming increased after implementation of the designed RE applications.

RQ3, What is the effect of using RE and TDS frameworks together in programming education on prospective teachers’ holistic and analytical thinking skills in problem-solving?

The results of the Wilcoxon signed-rank test of the relationship between the scores obtained by the PTs from the HATPS are presented in Table 7.

Table 7 Wilcoxon signed-rank test results of PTs’ HATPS scores
Full size table
The results of the analysis show that a significant difference was found to exist between the scale scores that the PTs achieved from their pre-tests and post-tests (z = 2122, p < .05). Taking into account the rank average and rank sum of difference scores, it appears that the observed difference is in favour of positive ranks, that is, the post-test. According to these results, it can be said that the designed RE applications had an effect on the PTs’ holistic and analytical thinking when solving problems.

RQ4, What are the prospective teachers’ views on the RE process?

Answers given by the PTs to the question, ‘Have you ever heard of the Reverse Engineering concept prior to this application? If yes, indicate where you heard about this concept’ in the REIF are presented in Table 8.

Table 8 PTs’ explanations of RE concept (from REIF)
Full size table
Only four of the PTs in the study stated having previously heard of the concept, with two of those four having heard of it from a programming languages course they had attended. However, the other participants of the study stated having not previously heard of the concept.

The PTs’ answers to the question, ‘What do you think Reverse Engineering is?’ in the REIF are summarised in Table 9.

Table 9 PTs’ explanations of RE (from REIF)
Full size table
A significant number of PTs defined the concept of RE using phrases under the codes of understanding the logic of programs, examining a program that has been constructed by themselves, or examining a program that was of their own design. These codes can be grouped under two different themes, analysis and synthesis. The majority of the PTs (n = 13, 87%) analysed this question based on an example using RE. The examples they gave were an elevator, fan, cash register, entrance system, parking system, clothing vending machine, heat thermostat, real estate, and cinema automation. However, it was observed that three of the PTs were unable to provide an example of the RE process.

The answers given by the PTs to the question, ‘For which purpose(s) can Reverse Engineering applications be used?’ are summarised in Table 10.

Table 10 PTs purposes of using RE applications (from REIF)
Full size table
The PTs listed example purposes of using RE such as creating devices, understanding how machines work, and for self-improvement in the field of programming (see Table 10). The reason why a significant number of the participants associated their expressions with hardware such as machines used in daily life, as well as software, may be explained from the type of RE implementation they experienced. In addition, the PTs stated that RE applications can be used in different fields such as education, industry, electronics, automotive, health, commerce, transportation, etc. The PTs’ responses to the question, ‘Can Reverse Engineering applications be utilised in programming education?’ are presented in Table 11.

Table 11 PTs’ opinions on use of RE applications in programming education (from REIF)
Full size table
A significant number of the PTs (n = 14) stated that RE applications could be used in programming education. The PTs stated that these applications could be integrated into the programming course when teaching programming (PT2, PT4, PT6, PT7, PT8, PT9, PT13, PT14), when producing solutions to daily life problems (PT1, PT3), when determining what kind of commands devices used in daily life contain (PT5, PT15), and when inventing a new product (PT10). However, PT11 provided no statement regarding the use of RE applications in programming education.

Discussion
The applications made in the RE and TDS frameworks designed in the research boosted the academic achievements of the PTs, according to the results of the study on academic achievement, which is the first research question. It may be stated that the increase in academic achievement related to teamwork practices of the programming education applied in this study. Similarly, the collaboration increased the student teachers’ academic performance and self-efficacy in programming (McDowell et al., 2006; Sawyer & Goldman, 2010). In the process of configuring programming education with RE and TDS, enriching it with three different forms of feedback (same group peers, other group peers, and teachers) may also have supported the increase in the students’ academic achievements. Therefore, it may be said that the provision of instant feedback is important to a successful learning of the programming process (Kordaki, 2010).

It is expected that teacher candidates whose academic achievement increases will also increase their perception of self-sufficiency in programming. Similarly, Burke (2012) noted that effective programming education can improve students’ self-efficacy. In addition, continuous interaction with program code during the process can help make it easier for students to learn and improve in terms of their academic performance (Hwang et al., 2008). This may be explained through the analysis of existing products in daily life, or from the rich interaction environments created by RE applications conducted within the scope of research during new product creation in accordance with programming education. Given that students mostly describe programming courses as being very technical, disconnected from the real world, and devoid of creativity (Ahmad & Gestwicki, 2013),the results of the second research question of the study are crucial for designing and structuring students’ self-efficacy acquisition processes. In general, when students feel more adequate, they are more likely to gain confidence in their proficiency to perform a given task (Chiu & Klassen, 2010).

When the designed TM applications are examined within the framework of the third research question of the study; it has been determined that the problem solving and analytical and holistic thinking processes of PTs are positively affected in this process. Similarly, Griffin et al. (2012) found that RE practices positively contribute to students’ critical thinking and problem-solving skills. It is therefore possible to say that the PTs in the study conducted their analyses by considering the whole application in terms of RE, and then structured their processes accordingly through thinking analytically, including how to solve a problem by dividing it into more simple and manageable elements (Dewey, 2007), and a holistic thinking style that includes solving the problem by first seeing the problem as a whole (Hammouri, 2003). As Salleh et al. (2018) stated, programming education, which progresses according to certain predetermined steps, contributes to the achieving of positive results in problem-solving. Problem situations studied with RE can provide students with real-world examples by providing the necessary theoretical background support to conduct the appropriate analysis in order to arrive at a working resolution to a real problem (Zalewski et al., 2019). Learning activities involving RE processes encourage students to practice high-level thinking in order to achieve a depth of knowledge in a context that involves real-world problems (Rybachuk, 2020). In this case, RE directs students through taking smaller steps during the process of problem-solving (Hofuku et al., 2013), supports problem-solving skills (Griffin et al., 2012), and helps to make students more active (Giacaman & De Ruvo, 2018) in the process, thereby supporting a positive increase in their analytical thinking. Similarly, Taşçı and Şahin (2020) investigated the prototypes drawn by students during training conducted on the basis of RE applications, and found that the holistic thinking approach was at the forefront of their preliminary drawings, whilst their analytical thinking approach was at the forefront of their final drawings.

Although the PTs in the study stated that they had never heard of the concept of RE before this study; following their applications, they explained how they understood RE to be a process of solving the logic of products and examining them, and also as a means of creating and realising their own designs. Although they were unaware of the name of the RE process, it may be considered that they used this application unawares during their education process. From this perspective, it may be interpreted as an indication that the RE process supports holistic and analytical thinking in this forth research question of the study, since the PTs considered the products in the applications as a whole, and then analysed and configured the process accordingly within certain steps. Similarly, was stated by some of the PTs that RE could be used in order to learn about how the products we use in daily life work, to make our lives easier, as well as for use in the programming education context. In the literature, it is emphasised that RE is a process that examines an existing product and determines detailed information and characteristics in order to then teach how that product is made and how it works (Batni et al., 2010; Thayer, 2017). Within this process, it is also important for students to analyse the characteristics of a product and to accurately configure the process (West et al., 2015). This is an indication that the increase in holistic and analytical thinking when solving problems has been successfully conducted by both the PTs and researchers in the study. In addition, RE applications can be used in the teaching process as they allow the information learnt to be transferred to daily life, and subsequently turned into products (Taşçı & Şahin, 2020). However, by using RE applications in educational activities, students can also gain a better and deeper understanding of the subject (Ali, 2005).

Conclusion
Through the study’ structure using the RE and TDS frameworks, the following results were achieved in terms of effective programming education:

Applications designed in RE and TDS frameworks in programming education can contribute to increased academic achievement.

Unlike the teaching of programming being seen as very technical, disconnected from the real world, and devoid of creativity, teaching using RE applications, such as analysing products from daily life by interacting with the code or producing new products, can positively affect self-efficacy in programming learning.

Based on products used in daily life, the PTs’ reversing the process within certain steps, that is, first analysing the part by considering the whole and then structuring the application process, supports the development of analytical and holistic thinking skills in this process.

It is important that applications designed within the RE and TDS frameworks are integrated into research studies or lessons, which are often focused on a product-process and rich feedback, as they help transfer information learnt to daily life and then to transform it into a product.

As a result, it is recommended that applications developed in RE and TDS frameworks in programming education should be used as a teaching framework, especially so that students can experience interaction with rich feedback within the actual situation, to provide experience to students, and to contribute to their self-efficacy and their logical thinking processes (e.g., holistic and analytical thinking). In particular, this type of developed framework can be applied to groups with low motivation in programming education, or where they lack the desired level of self-efficacy in programming.