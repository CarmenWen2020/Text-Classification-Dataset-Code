Video traffic over Internet of vehicles is increasing day by day to provide passengers on-board infotainment services. A video streaming service over Internet of vehicles involves design challenges of vehicular gateway selection, and vehicle to vehicle collaboration. Vehicular gateway selection is challenging due to high vehicle mobility and time-varying link conditions. Existing works on vehicular gateway selection focus on either service cost minimization, or quality of experience. To achieve a balance between these two aspects, we propose a novel vehicular gateway selection protocol that minimizes streaming service cost, keeping end-to-end delivery delay as a constraint. In our work, the vehicular gateway selection problem is formulated centrally as the minimum set-covering problem, and is solved by the greedy approximation method. In existing works, vehicle to vehicle collaboration happens in the application layer ignoring the presence of network layer nodes which do not run any proprietary application. To make the vehicle to vehicle collaboration in the network layer, we propose a novel multicast protocol SS-CAST specifically designed for streaming service over vehicular networks. Compared to existing protocols, the simulation results show VSIM as the clear winner for minimizing service cost while giving a competitive performance in the quality of experience metrics.

Keywords

Internet of vehicles
Video streaming
Gateway selection
IP multicast


1. Introduction
A Vehicular ad-hoc network (VANET) is an Ad-hoc network consisting of mobile vehicles and static infrastructure nodes called roadside unit (RSU). Vehicles and RSUs communicate among themselves using dedicated short range communication (DSRC) (Kenney, 2011) technology. Though VANET is derived from mobile ad-hoc network (MANET), VANET has some special characteristics which make it a distinguished area of research. VANET nodes (vehicles) are equipped with high storage, computation, and energy resources. Unlike MANET, VANET node (vehicle) mobility can be very high. Moreover, vehicle movement is restricted by road topology. Unlike MANET, both vehicle to vehicle (V2V) and vehicle to infrastructure (V2I) communications are possible in VANET. The primary motivation behind VANET is cooperation among vehicles to increase on-road human safety and transport efficiency. For this purpose, surrounding environment of each vehicle needs to be sensed, shared, and processed globally. VANET alone is incapable of achieving this task. Therefore, Internet of vehicles (IoV) is introduced, which is an integration of intra-vehicle network, inter-vehicular VANET, and vehicular Internet (Contreras-Castillo et al., 2018). Intra-vehicle network comprises of various interconnected sensors installed in a vehicle to collect surrounding environment data. Inter-vehicular network is used to build local network topology awareness and to disseminate safety messages. Through vehicular Internet, vehicles send their in-vehicle sensor data and local network topology information to a remote IoV server for global processing and intelligent decision making. Apart from safety applications, another kind of IoV application that intends to provide value-added infotainment services has gained popularity as it increases passenger’s onboard convenience. Besides home and offices, working people spend a significant amount of time in vehicles on a daily basis which creates a huge potential market for infotainment applications. As mentioned in Contreras-Castillo et al. (2018), continuous Internet connectivity for vehicles can facilitate various commercial infotainment services on vehicles. Vehicles connect through Internet by infrastructure nodes like WiFi access point/hot-spot (Cheng et al., 2014), DSRC RSU, or cellular base station. Due to small communication radius of RSU and WiFi, dense deployment along all roads is needed for continuous Internet connectivity for vehicles, which incurs huge costs. A small communication radius also results in frequent handover problem for high-velocity vehicles. Moreover, DSRC V2I communication uses contention-based shared wireless channel, which makes communication unreliable in high load conditions. On the other hand, cellular macro base stations are already existing infrastructure nodes. They use a dedicated channel for each V2I communication, and the communication radius can span up to a few kilometers (Ndashimye et al., 2017). However, unlike DSRC V2I communication with RSU, V2I communication with cellular base station is not free. For V2V communication, 3GPP has introduced vehicle to everything (V2X) communication in 5G release 16 (Vehicle-to-Everything, 2020). Here vehicles are provisioned with a PC5 side link channel for direct V2V communication. Vehicles can do unicast, broadcast, or group-cast communication using PC5. However, unlike DSRC V2V communication, PC5 V2V communication is not free and is yet to hit the market. Accordingly, to benefit from both the networks, an IoV infotainment application may use heterogeneous radio access technology (multi-RAT) to provide cost-effective service. Vehicles can avail reliable and uninterrupted V2I communication through cellular network and free V2V communication through DSRC network (Ndashimye et al., 2017).

Few examples of IoV infotainment applications are Internet access, online games, video advertisement by local restaurants/hotels, etc. According to CISCO prediction report (Cisco Visual Networking Index, 2020), by 2022, video traffic share of Internet will be 82% globally. Consequently, onboard video services (like sports event streaming, video conference) could be an essential vehicle infotainment application type in the near future. If several vehicles show interest in an identical streaming video, the cost of content fetching over Internet can be reduced. An application can select few vehicles as gateways to fetch the content using cellular network, and distribute the content among peer vehicles using free DSRC. Few of the design challenges involved in cost-effective content distribution over IoV are enlisted below.

1.
To decide an appropriate number of vehicles to be selected as gateways, and to assign each client vehicle one of the selected vehicular gateways.

2.
To decide a mechanism of client-gateway association, or to form clusters of client vehicles around their assigned vehicular gateways. The terms client-gateway association and cluster formation has been used interchangeably in the rest of this document.

3.
To decide a method to distribute data from a gateway vehicle to its associated client vehicles within each cluster.

Though there are some existing works on static gateway (RSU) deployment for vehicular networks, we found limited works on mobile vehicular gateway selection, and very few among them are designed for streaming services. Existing literature towards this direction can be categorized based on objective of the proposed work. Some of the existing works aim to minimize number of gateways, while some works focus on enhancing end users’ quality of experience (QoE). Our work has the distinguished objective of delay constrained cost-effective streaming service, where cost minimization is done by selecting a minimum number of vehicular gateways while ensuring end-to-end delivery delay within a threshold. In existing works, association between gateway vehicles and peer client vehicles happens in application layer and is tightly coupled with streaming application. This makes all vehicles present in a network run a proprietary application to participate in this association process. However, in a real scenario of vehicular network, usually only a few vehicles may get interested in a streaming service, and run streaming client application. This realistic assumption makes existing works in literature infeasible for deployment. As most vehicles of a network are unaware of any proprietary streaming application, they can only collaborate in network layer. Accordingly, we propose a novel multicast streaming protocol for network layer cooperation specifically designed for streaming service on VANET. Based on computation model, existing literature on vehicular gateway selection can be categorized in centralized or distributed model. A distributed model for vehicular gateway selection imposes significant control packet overhead on shared wireless medium. On the other hand, a centralized model imposes server deployment cost and incurs cellular network access cost to send control information to server periodically. Performance of a distributed model depends on the local topology of individual vehicles, whereas a central model uses global topology to achieve optimum performance. As our primary objective is to minimize the number of vehicular gateways to minimize service cost, we choose centralized computation model for optimum result. Based on the above discussion, we motivate to propose our protocol named Video Streaming over IoV using IP Multicast (VSIM), which is based on realistic assumptions, and is feasible to deploy with present-day infrastructure. The contributions of our work are summarized as follows:

•
VSIM formulates the vehicular gateway minimization and assignment problem as an integer linear programming problem (ILPP), where streaming cost minimization (business goal) is the objective function, and delivery latency (user satisfaction) is a constraint.

•
To avoid the large number of decision parameters of the formulated ILPP, the problem is divided into two sub-problems as vehicular gateway minimization and gateway assignment. Gateway minimization sub-problem is handled centrally in application layer whereas, gateway assignment sub-problem is handled distributively in network layer along with client-gateway association. To the best of our knowledge, we are the first to decouple client-gateway association from streaming application.

•
The vehicular gateway minimization sub-problem is reduced to the well-known minimum set-covering (MSC) problem and solved by centralized greedy approximation method. To the best of our knowledge, this is the first time the vehicular gateway minimization problem is solved as MSC problem.

•
The vehicular gateway assignment sub-problem is solved distributively along with the network layer client-gateway association method. For this purpose, we have proposed a novel IP multicast protocol named Synchronized Streaming Multicast (SS-CAST), which specializes in network layer V2V collaboration for streaming data distribution in VANET. Unlike existing protocols in literature, VSIM makes (by using SS-CAST) client-gateway association transparent to application layer, which makes the participation of network layer vehicles possible in cluster formation and routing.

•
Performance metrics are defined such that both the aspects of cost minimization and user satisfaction are captured and are compared with two existing protocols.

The rest of the document is organized as follows: In Section 2, brief literature surveys on gateway selection, assignment and client-gateway association are presented. In Section 3, a detailed description of the proposed VSIM and its methodology is given. The performance analysis and comparison of VSIM with other existing solutions are done in Section 3. Section 5 summarizes the contributions of this work.

2. Related work
The task of streaming content distribution over IoV in a heterogeneous network environment is divided into phases of gateway selection and assignment, client-gateway association, and V2V data sharing. Individually each of the sub-tasks is a research area of its own. We have discussed the state of arts in each of the research areas in the following subsections.

2.1. Gateway selection and assignment
Gateway selection and assignment in a heterogeneous vehicular network is an active research area. Gateways can be static infrastructure nodes or mobile vehicles. The work of Omar et al. (2015) is on static gateway placement which aims to minimize deployment cost. Mobile gateways are also termed as edge vehicles in some literature as they may serve as local cache in vehicular network. Zhuang et al. (2020) discussed various aspects of edge caching and edge computing in IoV using SDN/NFV. However, the discussed metrics for caching like cache deployment, cache-hit ratio, cache updation are not applicable for real-time streaming content. Wu et al. (2020) and Wu et al. (2018) in their works proposed edge enabled route finding for various IoV applications where data flows from vehicles to gateways. Existing gateway selection strategies are largely influenced by intended applications or objectives. Retal and Idrissi (2019) proposed a centralized gateway assignment algorithm with the objective of load balancing of gateways for generic Internet access. They have formulated the problem as multi-objective optimization, where one objective tries to maximize the number of connected vehicles while the other objective tries to minimize the total traffic handled by individual gateways. Zhioua et al. (2015) proposed a centralized fuzzy-based QoS balancing method to reduce LTE network access cost for the purpose of providing generic Internet access. Received Signal Strength (RSS), current cluster head load, candidate gateways, and V2V link duration are selected as fuzzy criteria. Benslimane et al. (2011) proposed a distributed method to minimize the number of gateways for generic Internet access. Aggregation of user equipment (UE) signaling is the objective for which Chekkouri et al. (2018) formulated the problem as centralized multi-objective binary programming to select minimal relay nodes (gateways). Duan et al. (2016) proposed a software defined networking (SDN) assisted method to reduce LTE network cost to send in-car generated data to remote sink. One active and one backup cluster head is selected for each cluster to increase reliability against mobility. Ucar et al. (2016) proposed a distributed algorithm for efficient safety message dissemination application with minimum number of gateways. For route planning and driving assistance application in heterogeneous vehicular network, Ahmad et al. (2018) proposed a centralized game theoretic algorithm to minimize the number of gateways. For real-time video streaming applications, Yaacoub et al. (2015) proposed a centralized scheme that maximizes the quality of experience (QoE) for on-board users. Khan et al. (2020) proposed an algorithm where vehicles are categorized into: slice leaders, free vehicles, and compelled vehicles. Network wide QoE maximization is solved using the Lyapunov drift plus penalty method. In both of the above-mentioned works, network cost is unconstrained. Another example of real-time media streaming application is the work of Abbas et al. (2017), where the objective is to minimize the number of gateways by solving binary programming problem. However, this work is for handheld UE devices and not targeted for vehicular network.

In existing literature, we found no work which has objective of minimizing the number of gateways with constrained delivery latency. This motivates us to propose our VSIM gateway selection algorithm.

2.2. Client-gateway association
Though clustering in a vehicular network is a widely explored area, we restrict our discussion within the context of client-gateway association in heterogeneous vehicular network. Few existing works terms this as relay selection towards/from gateway. If both gateway selection and gateway assignment algorithms are centralized, client-gateway association is implicit. The works of Retal and Idrissi (2019) and Yaacoub et al. (2015) are few examples of this kind. In the work of Zhou et al. (2018), the problem of gateway-client relay selection is formulated as multi-commodity network flow optimization problem, where the different scalable video coding (SVC) layers are treated as multi commodity. Distributive client-gateway association algorithms can be of single-hop or multi-hop technique. Vehicle collaboration is simple in single-hop technique. However, the number of clusters gets increased resulting in more gateways and cellular access cost. In multi-hop technique, though there are fewer clusters, multi-hop communication path maintenance becomes an overhead. Ahmad et al. (2018) devised a cooperative single-hop method using game theory, and proved that joining a cluster and becoming cluster head is the dominant strategy for a vehicle. A multi-hop technique is proposed by Benslimane et al. (2011). In this work, all vehicles in a highway topology are divided by their movement directions. Vehicles with good cellular connectivity become gateway candidates (GWC). Connected GWCs of same direction forms a cluster. The central vehicle of this cluster declares itself as cluster head. In the work of Duan et al. (2016), clusters are formed by a central algorithm whereas, cluster heads are distributively elected by vehicles. The vehicle with velocity closest to the average velocity of a cluster and with good signal to noise ratio (SNR) value is chosen as cluster head. Ucar et al. (2016) proposed a distributed multi-hop technique that selects cluster head with minimum relative average velocity within k-hop same direction neighbors. Xing and Cai (2012) proposed relay selection scheme for SVC video stream, where RSUs are used as static gateways. As RSU uses shared channel, only one vehicle request it can serve at a time, while others are deprived.

In the existing literature, the client-gateway association is handled in application layer, which prevents network layer nodes in topology from participating in V2V collaboration. This motivates us to use our proposed multicast SS-CAST, where client-gateway association is achieved in network layer multicast control plane.

2.3. V2V streaming data sharing
Early-day MANET routing algorithms are of topology based uni-path routing types such as AODV, DSDV, and DSR. However, these protocols are not suitable for VANET because of high dynamic network. Accordingly, a kind of any-path routing, namely opportunistic routing (OR), is widely used in VANET. In OR protocols, instead of creating an end-to-end route, an opportunistic routing decision is made independently for an individual packet in each hop based on local connectivity. Consequently, individual packets of a source–destination flow may take different paths to reach destination from source. However, OR protocols are not suitable for distributing streaming content. This is because any-path routing may increase delay and jitter. As a result, OR protocols need adaptations for video streaming. One adaptation is to retain a routing decision temporarily by a node to readily apply for few next consecutive packets, instead of taking independent routing decisions for every individual packet. The works of Rezende et al. (2015) and Felice et al. (2015) are examples of this kind. Reliability of streaming video distribution in VANET cannot be increased by acknowledgment and re-transmission message techniques due to dynamic connectivity. Instead, reliability can be increased either by adding simple redundancy or by introducing network coding method. The work of Rezende et al. (2014) is an example of simple counter-based redundancy. In network coding, transmitted packets are linear combinations of source packets. On receiving a sufficient number of packets with linearly independent combinations, receivers can get back the source packets. Naeimipoor and Boukerche (2014) in their work have proposed erasure network coding technique. However, the above-mentioned reliability schemes impose network overhead and increase latency. Information-centric networking (ICN) is a new paradigm that has an implicit in-network caching property. However, ICN for wireless network suffers from broadcast-storm problem (Tariq et al., 2020). Though there are some proposed solutions (Tariq et al., 2020, Khelifi et al., 2020) to mitigate this issue, those solutions cannot be used for delay and jitter constrained services. The above-mentioned facts motivate us to use our proposed SS-CAST multicast protocol for V2V streaming video distribution. In SS-CAST, redundancy scheme is opportunistic and does not impose network overhead.

Above mentioned works have used either broadcast or unicast methods for V2V streaming video distribution, depending on the requirement of video streaming applications. VSIM requires video data to be delivered to a subset of vehicles present in a topology. For that purpose, broadcasting imposes high network congestion, whereas unicast results in high redundancy and delay. Multicast is an appropriate choice in this scenario. There are many multicast protocols available for MANET. Junhai et al. (2009) mentioned that topology wise they can be classified as source tree based, shared tree based, and mesh based. In source tree based protocols, each multicast source maintains its own tree to reach all member nodes. MOLSR (Jacquet et al., 2002) is an example of this kind. In shared tree based protocols, there is a core node (pre-defined or elected), which is responsible for creating and maintaining a shared tree with all member nodes. MAODV (Royer and Perkins, 1999) and STAMP (Canourgues et al., 2006) are examples of this kind. Mesh based scheme has mesh structured forwarding group, which increases redundancy at the cost of high network overhead. ODMRP (Lee et al., 2002) and E-ODMRP (Oh et al., 2008) are examples of this kind. In VSIM, each multicast source node (gateway) simultaneously distributes identical streaming content. So, it is sufficient for a multicast member node to attach itself with any one of the available source nodes. In existing multicast protocols, member nodes establish connections to all of the available source nodes. To the best of our knowledge, there is no multicast protocol that specializes in peer-to-peer streaming content distribution for VANET. There are few location-based multicasts or geo-cast protocols designed for VANET which are not applicable in this context. Thus, we propose the novel multicast protocol SS-CAST.

3. Proposed protocol
This section describes the proposed VSIM protocol in details. Section 3.1 mentions the system model assumptions. Protocol overview and state transition sequence are described in Section 3.2. Subsequently, gateway selection, client-gateway association, and V2V data phases of VSIM is described in Section 3.3, Section 3.4, and Section 3.5 respectively. An analysis of VSIM protocol is given in Section 3.6.

3.1. System model
Wireless Access in Vehicular Environments (WAVE) (wav, 2014) is a DSRC standard, which has specified two data plane protocol stacks above the logical link control layer, which are WAVE short message protocol(WSMP) stack, and IPv6 stack. Packet gateway of LTE-A/5G configures IPv6 in the vehicles and acts as the default gateway to connect to Internet. Fig. 1 illustrates an example scenario of video streaming on a multi-RAT vehicular network of IoV. A cab service provider (CSP) may want to provide free video streaming (for ex. live football matches) for its onboard passengers to attract more customers. Here the CSP becomes the streaming service provider for its cabs within an area of interest (AOI), and its business goal is to minimize streaming service cost. CSP starts its service by renting a cloud-based server in a nearby location of AOI and running the VSIM server application on it. It also installs the VSIM client application in all of its cabs. The CSP is not the originator of the video content and procures the content from an originator (for ex. hot-star) through Internet. We assume all vehicles are equipped with one DSRC interface and one cellular interface. Shared DSRC channel is used for V2V communication, and dedicated cellular channel is used for V2I communication. Accessing cellular channel incurs cost whereas unlicensed DSRC channel is free of cost. All vehicles in system are by default network layer router nodes that are capable of providing basic routing services. We abbreviate these nodes as r-nodes and are colored in black in Fig. 1. Besides routing services, all r-nodes always run network layer multicast protocol SS-CAST. Among these r-nodes, few are CSP’s cabs that run VSIM client applications on them when hired. We call them c-node and are colored in white in Fig. 1. Therefore, c-nodes have all the capabilities of r-nodes whereas, the converse is not true. We assume no vehicle (r-node/c-node) in our system is selfish or malicious, and always cooperates in routing. All nodes run a beaconing application that exchanges basic safety messages (BSM) to gather knowledge about local topology. As recommended in IEEE WAVE standard (wav, 2014), we assume BSM application runs on a dedicated DSRC WAVE safety channel (for example, channel number 172). The occurrence frequency of BSM can be up to 10 Hz which can vary depending on safety channel load condition (Kenney, 2011). A vehicle includes its ID, current position, current direction, and current velocity in a beacon message. While receiving any beacon message, a receiver vehicle adds two pieces of information about the sender vehicle. It adds the sender address and the experienced SNR value of the wireless link. Vehicles create a table of neighbor information (NBR_TABLE) from the received BSMs. Along with other in-car generated data, vehicles also send NBR_TABLE to the central authority (CA) (refer Fig. 1) through cellular interface periodically (Contreras-Castillo et al., 2018). The CA acts as a remote IoV server that builds the global network topology graph  (bi-directional) from all the received NBR_TABLE information by assigning SNR values as edge weights. The CA uses  for various tracking and data mining purposes of IoV, and may also export  to licensed applications when requested through Internet. We assume the VSIM server application is a licensed application that procures  from the CA with an agreement. In this paper, the words ‘vehicle’ and ‘node’ are used interchangeably. In our work, the term ‘gateway’ indicates ‘vehicular gateway’.

3.2. Protocol overview
VSIM runs in epochs of duration 
 chosen suitably by the VSIM server. At the beginning of every epoch, the VSIM server selects a minimum number of vehicular gateways among c-nodes considering delay-constrained streaming service. Each c-node associates itself with one of the selected vehicular gateways by establishing a multi-hop path with it. A cost is involved only when a gateway c-node establishes a connection to the remote server via cellular interface to fetch streaming data. No cost is involved when a gateway vehicle distributes the fetched data to its associated c-nodes via V2V multi-hop path through DSRC interface. An example of the proposed scheme is illustrated in Fig. 2. Among the three c-nodes, only one c-node (id 2) is selected as gateway, which uses cellular interface to fetch the streaming content, and distributes the content among the other two c-nodes via multi-hop V2V communication through DSRC interface. As DSRC channel access is free of cost, the total service cost of CSP is reduced to one-third. As shown in the figure, depending on the network topology, r-nodes may help in V2V multi-hop content distribution via DSRC interface. In a given topology of vehicular network, the problem is to select a minimum number of gateway vehicles such that all c-nodes receive streaming service within a constrained delay.

In a multi-hop path from a gateway to end c-node, if the relative velocity between any two consecutive hop vehicles is high, that path is likely to be broken before an epoch ends, causing disruption in streaming service. When vehicles are moving freely in highway, only the vehicles of same lane (same direction) are expected to collaborate. In case of a congested vehicular traffic scenario, vehicles move slowly, allowing V2V collaboration among different lanes (opposite directions). The VSIM server needs to decide the value of relative velocity threshold  such that no multi-hop path can exist where two consecutive hop vehicles have relative velocity more than . The upper bound of relative velocity threshold  can be determined with the statistical information of vehicle velocities within an AOI (Speedtest Global Index, 2021). Smaller  decreases the degree of V2V collaboration, resulting in more vehicular gateways (implies increased streaming cost) with the benefit of increased link stability. With the decided value of , the upper bound of epoch duration 
 is calculated such that relative movement between any two consecutive hop vehicles is less than the DSRC communication radius  during an epoch. Based on current system performance, the VSIM server can decide different values of  and 
 dynamically. The VSIM server also decides a suitable video bit rate  for the streaming service. The total amount of video data  that needs to be distributed within one epoch is given by 
 and is abbreviated as video block in this work. The value of  can also be adjusted dynamically by the VSIM server based on current system performance. If each video data packet carries a payload of size , then the number of data packets  that needs to be distributed within one epoch is given by . The calculations of the values of the above-mentioned parameters are given in Section 4.1.

Each epoch is responsible for distributing one block of video data. The VSIM server application instance (running on the server) and each VSIM client application instance (running on individual c-nodes) go through multiple synchronized state transitions in each epoch. When a VSIM client application starts, it gets synchronized with the VSIM server application by querying for the remaining time to begin the next epoch, duration of the states, and the DSRC channel to tune with. The timeline sequence of VSIM is given in Fig. 3. At the start of an epoch, all clients and the server reset their states to , and stay in that state for a duration of 
. In this state, clients send a streaming request message to the server that includes its node ID and the current cellular link SNR value (derived from RSS). This message also works as a keep-alive message from clients by which the server assumes that a vehicle is interested in receiving data during the current epoch. With these request messages, the server creates a data structure that associates a vehicle’s ID with its IP address (received from message IP header) and its cellular link SNR value. During this state, along with gathering information about c-nodes, the server also downloads  from the CA over Internet. The VSIM server sends a relative velocity threshold  along with the request message to the CA. Receiving the request from the VSIM server, the CA creates a customized  where two neighbor vehicles with relative velocity more than  are disconnected by the CA by deleting the edge between them. This is done to avoid link disruption due to excessive mobility within an epoch. For example, in Fig. 1, we assume vehicles V9 and V10 both are moving at the speed of 16.66 m/s (60 km/h) in opposite directions. Therefore the relative velocity between them is 33.33 m/s (120 km/h). If DSRC radius is 50 m, V9 and V10 will definitely go out of each other’s range within 2 s. Suppose the VSIM server sends a request message to the CA with the value of  as 15 meters/s (54 km/h). In this case, though V9 and V10 are within communication range, the CA removes the edge between them from . When  state is over, clients switch to state , and the server switches to the state . The duration of both  and  state is 
. In  state, with the help of customized  and the information received from c-nodes, the server selects an optimum number of c-nodes as vehicular gateways. The VSIM server needs to finish all the required computations for vehicular gateway selection within predefined 
 duration. For this purpose, computation resources of the cloud-based VSIM server may be dynamically added/removed by cloud service, depending on the size of . The detailed methodology for gateway selection is given in Section 3.3. When  state is over, all clients and the server switch to state  for a small duration 
, when the server informs selected vehicular gateways about their selection as gateways. The next state for the server is , and clients switch to  state. Duration of  is 
, and duration of  is 
. In  state, the server pushes one block of video data to all selected gateway vehicles via cellular interface. At the same time, being in  state, each gateway node initiates a new SS-CAST multicast session through DSRC WAVE interface and advertises itself as a multicast data source. The proposed SS-CAST method is described in Section 3.4. Once  state is over, clients switch to  state of duration 
. In  state, non-gateway c-nodes initiate multicast reply messages towards gateways. Network layer vehicles or r-nodes may help in forwarding both the advertise and reply messages, as shown in Fig. 3. As a result, by the end of  state, all c-nodes are associated with one of the selected vehicular gateways, which results in forming clusters (Refer Fig. 3). By the end of  state, the server switches to  state and remains idle till the beginning of the next epoch. When vehicle density is high, the number of vehicles present in a network also becomes large. Therefore to finish downloading  from the CA before  state, the VSIM server can send an early request to the CA for the next epoch  while in  state. Once vehicles are clustered,  state starts for all clients (c-nodes) and remains for duration 
. In this state, gateway vehicles distribute received video block data to other c-nodes by the SS-CAST multicast method, which is described in Section 3.5. Few r-nodes may participate and help in distributing data packets. When  state is over, all c-nodes switch state to . In this state, c-nodes sort and assemble received data packets with sequence numbers before pushing the data to media player buffer. Duration of  state is 
. Section 4.1 describes how to obtain duration values of all the above-mentioned states.

Fig. 3. Timeline sequence of state transitions and packet transmissions of VSIM.

The media player is active throughout all the time a vehicle runs client application. When a vehicle starts VSIM client, in case it sends a streaming request just after an epoch has started, it waits for 
 duration for the next epoch to start. In another 
 duration (data phase of next epoch), that c-node fetches  amount of video data which is made available to its media player. Thus, maximum initial startup delay of playback is 
 for any c-node. The fetched video block is played for the next epoch duration 
, by which time the VSIM client of that c-node fetches the next video block. As the data receiving rate is more than the video playback rate, a vehicle experiences smooth playback without any interruption in an ideal situation. The VSIM server is always connected to the content originator through Internet via a separate interface and continuously fetches data.

3.3. Vehicular gateway selection phase
The VSIM server acquires  from the CA as adjacency list graph representation format where an edge weight represents the SNR value of the wireless link between two nodes. Let us assume, at the beginning of an epoch, vehicles present in scenario are represented by the set . There are  vehicles, and they are indexed by their ID starting from  to . Let us assume, within these  vehicles, only a few vehicles are c-nodes which form the set   {
 is a c-node}. Let us assume a function Ϝ such that when a vehicle instance is given as input, it returns the ID of that vehicle. Its inverse function Ϝ
 returns the vehicle from a valid ID. The VSIM server does some pre-processing on , which are mentioned in the following steps:

Pre-processing steps:

1.
The server converts  from adjacency list representation to adjacency matrix representation, where the missing edges are assigned SNR value , and diagonal elements (representing self-loop edge weight) are assigned by a very high SNR value defined as .

2.
For each edge , the wireless link capacity 
 is estimated by Shannon’s formula: 
 where  is the channel bandwidth.

3.
Let the overhead because of the headers from all layers for each DSRC frame be  Bytes.  (88 Bytes) is composed of UDP header (8 Bytes), IPv6 header (40 Bytes), 802.11p MAC header (36 Bytes), and frame check sequence (4 Bytes). As one block of video data is transmitted into  data packets, the total header overhead for the entire block is . For each edge , the delay 
 to transmit one block of video data of size  is calculated as: (1)
 For diagonal elements, 
, which implies data can be transferred from a node to itself in no time. All edge weights are replaced by their respective 
.

4.
On the resulting graph, Floyd–Warshall (Cormen et al., 2009) algorithm is run to get all-pairs shortest path graph. The output graph is represented as matrix format referred as delay matrix , where the element 
 denotes minimum multi-hop path delay from the vehicle with ID  to the vehicle with ID  to transmit a video block of size .

5.
For all 
, the VSIM server checks if the stored cellular SNR value for 
 is less than a predefined threshold value 
. If yes, the server considers 
 as unfit to become a gateway. This is because if the node receives partial data from the server due to poor cellular connection, it has a cascading effect on all nodes in that cluster. So, the server replaces all elements of the Ϝ
 row of  except element 
Ϝ
Ϝ
 with . 
 value is chosen such that the data rate is sufficient to deliver one block of video data within the duration of  state.

The problem of minimum gateway selection and assignment with constrained delay can be formulated as integer linear programming problem (ILPP) as described next. A set of binary elements, named gateway set  of size  is defined such that 
, if 
 is selected as a gateway. Otherwise, 
. An assignment matrix  of size  is constructed where the element 
, if 
 is assigned as gateway for 
. Otherwise, 
. The objective of the ILPP is given below.

Minimize 
 subject to the following constraints.

1.
All c-nodes must be served and should be served by only one gateway. 

2.
Vehicular gateways are always assigned to itself for streaming. 

3.
Data delivery delay from a vehicular gateway to any c-node must be within  state duration 
, which we term as threshold delay. 
Ϝ
Ϝ

4.
All the decision variables are binary. 
 and 

Constraints 1 and 2 are for gateway assignment, whereas constraint 3 is for gateway selection. ILPP is a known NP-hard problem. It can be seen that with  requesting vehicles, the number of decision variables becomes as large as 
. Therefore, any heuristic algorithm may take significant time to converge. So we break the ILPP into two subproblems  gateway selection and gateway assignment. Gateway selection subproblem is solved centrally as an MSC problem in the VSIM server, and gateway assignment subproblem is handled distributively by SS-CAST as described in Section 3.4.

Minimum set-covering problem: An instance of minimum set covering or MSC problem consists of a finite set , and a given set of predefined subsets of  as: 
 such that the elements of  covers , i.e, 
. The problem is to find the minimum size subset of , which covers .


We converted gateway selection subproblem to MSC problem by the method mentioned in Algorithm 1. The algorithm runs in the VSIM server which initializes  with  and creates elements 
 (subset of ) for  corresponding to each 
 by the following way. In the Ϝ
 row of , we find the column indexes which are IDs of those vehicles in set , that have delay less than 
. The vehicles corresponding to those column indexes are inserted in the subset 
. An element of , i.e. 
 denotes that if the vehicle 
 is selected as gateway, all the c-nodes in the subset 
 can receive streaming video data from 
 within duration 
. In other words, vehicle 
 covers the vehicles in the subset 
. The goal is to select a minimum number of 
 such that all elements of  are covered. Initially, all elements of set  are assigned to . As the MSC problem is also a known NP-hard problem, we use a well-known approximation algorithm named greedy set cover(GSC) (Cormen et al., 2009) algorithm to solve it. GSC has an approximation ratio () where  (i.e. ) is the cardinality of the set to be covered. The algorithm follows a simple greedy approach. In each iteration, it selects a subset that covers the maximum remaining uncovered elements. We have modified the algorithm when a tie occurs among a few candidate subsets. In this case, we select a candidate subset, which has a minimum cumulative delay for all newly covered elements. From the solution of MSC problem, we find all 
 for which the corresponding subset 
 is included in the MSC solution. We set the value of those 
 elements to 1 to obtain the solution of gateway selection subproblem.

The gateway selection phase only makes the selection of gateways. The assignment of c-nodes to gateway nodes is not done in this phase. This is because the multi-hop path between a gateway to any c-node may include one or more r-nodes. There is no way the VSIM server can instruct a r-node to forward data from a specified upstream node to one or more specified downstream node(s). Therefore, gateway assignment and multi-hop client-gateway association in VSIM is handled by SS-CAST multicast in network layer, which is described next.

3.4. Client-gateway association phase
As mentioned in Section 2.3, we need a multicast routing protocol specialized for V2V streaming data sharing for VANET. We propose SS-CAST protocol for this purpose. SS-CAST solves the gateway assignment problem distributively along with client-gateway association method. SS-CAST is a source tree based multicast protocol in which each multicast member attaches itself to only one of the available sources. This is illustrated in Fig. 4 where GX are gateway nodes, CX are c-nodes, and RX are r-nodes. Once the VSIM server selects gateway vehicles, it informs those gateways about their selection in  state. The server also includes relative velocity threshold , video block size , and threshold delay 
 in the message.

The proposed SS-CAST control plane is divided into two phases, namely, advertise phase and reply phase. The advertise phase happens in the duration of  state when all gateways initiate the  control message through DSRC interface.  contains the multicast session ID 
, source vehicle ID 
, relative velocity threshold , video block size , accumulated delay 
 (0 for gateways), threshold delay 
, and current hop-count  to the source (0 for gateways). Each node (c-node or r-node) that receives a  message consults its NBR_TABLE and does the following. If the node finds relative velocity between itself and the sending node greater than , it discards the message. Otherwise, it finds the SNR value for this sender stored in NBR_TABLE, calculates expected transmission rate and delay 
 for data size  (refer Section 3.3), and discards the message if 
. In case 
, it stores locally the values of 
, 
, increased hop-count 
 as , and the address of sender as immediate upstream node. It changes the packet fields 
 and  to (
) and () respectively, and re-transmits the . Duplicate messages are ignored by checking the tuple 
, 
. If the above-mentioned conditions do not discard a non-duplicate message, the receiving node checks if the locally stored hop count 
 is greater than () value from current message. If true, it indicates that the gateway node which initiated this current message is nearer to the receiving node. In that case, the node replaces all the previously stored values with the new values of the current message and re-transmits . Otherwise, the message is ignored. This hop-count comparison is made to restrict flooding of  in network as explained later in Section 3.6.3.

When the advertise phase is over, the reply phase of SS-CAST begins and continues for the duration of  state. In the reply phase, a non-gateway c-node initiates a unicast message  to its upstream node through DSRC interface. On receiving a  message, a node (c-node or r-node) makes an entry for the  sender as a downstream node. If the receiving node is a r-node and has received  for the first time, it forwards  to its upstream node. As c-nodes have already initiated  message for their own, they do not forward any received  further. On receiving any subsequent  messages, a node only creates an entry for the downstream sender node. It does not forward the message further to its upstream node. In this way, multicast trees are formed with gateways as roots. These trees can also be viewed as clusters with gateways as cluster heads. As can be seen from Fig. 4b, c-nodes have formed clusters around gateway vehicles. Gateway selection algorithm mentioned in Section 3.3 ensures that each c-node finds at least one gateway node from which, end to end data transfer delay is within the duration of state . In Fig. 4b, G3 has not received  message from any c-node, and so it forms a singleton cluster and does not need to share data.

3.5. V2V data phase
A video block is divided into  packets and transmitted with sequence numbers from 1 to . In the client-gateway association phase (control plane of SS-CAST), gateway vehicles receive one block of video data from the VSIM server through cellular interface. Once client c-nodes are clustered around their respective gateways, all c-nodes (including gateways) switch to  state, and V2V data phase starts. Gateway vehicles that receive at least one  message start multicasting video data to their immediate downstream nodes through DSRC interface. The first packet sent is a metadata packet containing the block index, the number of packets to be sent, and the expected transmission duration. Receiving this metadata packet, receiving nodes that are part of any multicast tree start a data-receive timer with the expected duration. Subsequent packets are data packets, which contain packet index along with data. Once the data-receive timer is expired, a receiving node waits for a short random duration and initiates multicasting of the received packets to its downstream nodes by the same above-mentioned method. Once all the received data packets are delegated, a r-node becomes idle, whereas a c-node checks whether it has missed any packet index while receiving from its upstream node. In case few indexes are missing, it listens for any ongoing transmission of other clusters in the hope of recovering them. This simple and opportunistic redundancy enhancement scheme avoids imposing overhead on the network. In the topology shown in Fig. 4b, data forwarding happens in the reversed path of  message flow. Once V2V data phase ends, c-nodes switch to  state when they assemble the received data packets by their indexes and push the data to the media player buffer for playback.

3.6. Protocol analysis
In this section, we have done a thorough analysis of the VSIM protocol.

3.6.1. Protocol correctness
The gateway selection phase and client-gateway association phase of VSIM together solves the ILPP formulated in Section 3.3. The MSC solution ensures that each c-node is covered by at least one gateway. SS-CAST associates only one gateway to each c-node. Combining the above two facts, constraint 1 of ILPP is satisfied. SS-CAST always sets a gateway as its own data provider, which satisfies constraint 2. SS-CAST selects a path from c-node to gateway with accumulated delivery latency less than 
, and the MSC solution ensures the existence of at least one such path. With the above facts and having constraint 1 already satisfied, constraint 3 is also satisfied. Pre-processing step 5 avoids the ill-effect of short-term fading experienced for cellular connection. While receiving data from the VSIM server, if a vehicle moves from one evolved node base station (eNodeB) to another, we assume that an application transparent cellular handover mechanism takes place. Because of the above two facts, the chance of packet loss experienced by a vehicular gateway through cellular interface is negligible and can be ignored.

3.6.2. Protocol complexity
The steps 1,2,3 and 5 of server pre-processing (refer Section 3.3) on the topology graph  have time complexity of 
. Step 4 runs Floyd–Warshall algorithm which runs in 
. Therefore, running time of server pre-processing is 
 or 
. Both the outer loop and inner loop of the MSC reduction algorithm (Algorithm 1) go through  iterations. All other steps of Algorithm 1 are of  which makes the complexity of MSC reduction algorithm 
. For the gateway selection problem, we have used the well-known GSC approximation algorithm, which runs in 
 (Cormen et al., 2009) time. Therefore, the overall running complexity of the centralized gateway selection algorithm in the VSIM server is given by 
. As , the running complexity is simplified to 
. In a real scenario, neighbor set of any given vehicle is a very small subset of total vehicles present in topology. As a result, vehicle network connectivity graph is represented by a sparse matrix. Therefore, more efficient algorithms like Johnson’s algorithm (Johnson, 1977) can be used instead of Floyd–Warshall. Moreover, in the study (Naboulsi and Fiore, 2017) authors found that vehicular network is very much fragmented into smaller networks. The probability of a large connected network is extremely low. In that study, no connected network is found with more than 1000 vehicles when DSRC communication radius is 50 m. Therefore, the gateway selection algorithm can be run parallel for each small connected network to reduce processing time.

3.6.3. Client-gateway association phase analysis
Now we analyze the performance of the control phase of SS-CAST. It can be seen from Fig. 4a, that  does not get flooded in the entire network. If two gateway nodes are k-hop apart in a one-dimensional highway scenario, two  messages originated by two gateways propagate only k/2  1 hops before they cross each other and get ignored by subsequent nodes. In case there is no gateway in a direction,  eventually stops propagating once the accumulated delay exceeds the threshold 
. For example, node R7 node in Fig. 4a received first  with increased hop-count 2 initiated by G2. So it forwards , which is received by R6 and C5. Later R7 receives  from G3 and G4 with increased hop-count 2, and 4 respectively. So it ignores both of them. C5 receives first  with increased hop-count 3 from C6, which is initiated by G4, and forwards it further. Later it ignores the  initiated by G2. The control messages  and  are of very small size (few Bytes), and vehicles wait for some random time before each re-transmission. Therefore, the probability of packet collision is very less and can be ignored.

3.6.4. V2V data phase analysis
Next, we analyze the performance of the V2V data phase (DATA_V state). We have considered a one-dimensional highway scenario where width can be ignored compared to the length of the road. As mentioned in Section 3.5, a downstream node starts transmission only when its upstream node has finished transmitting all data packets. As a result, data packets propagate hop-by-hop in a batch within a one-dimensional cluster, making the probability of packet loss within a cluster due to collision negligible. However, packet loss occurs during transmission if an upstream and downstream node moves out of each other’s communication range. Also, while an upstream node is transmitting, a node can experience packet collision by a neighbor cluster’s ongoing transmission.

First, we formulate the probability of the event 
 that a node experiences packet loss due to mobility, given that it is receiving data from its upstream node. If the video playback rate is , the size of the video block  is given by 
. This gives the one-hop DSRC transmission duration 
 of a block as 
, where 
 is current wireless link rate. In worst case, a node experiences maximum relative velocity  from its upstream node. So in duration 
, the node moves away 
 distance from its upstream node. Let the range of DSRC communication be , and the downstream node experiences packet loss only if its distance with upstream node is more than 
 at the beginning of receiving data. As a downstream node is equally likely to be present anywhere between  and  distance from its upstream node when it starts receiving data, the probability 
 that it experiences packet loss due to moving out of communication range is (2)
Now we derive the probability of the event 
, that a downstream node experiences packet collision from a neighbor cluster’s transmitting node, given that it is receiving from its upstream node. Let there are  lanes in a highway topology. Let us assume the average cluster hop length is , which means a data packet traverses an average  hops from a gateway in both directions of a one-dimensional highway scenario. Among  hops towards a single direction within a cluster, SS-CAST allows only one vehicle to transmit at any given time. This is because each node transmits at most once and transmits in a batch. The state switching of all vehicles is synchronous in SS-CAST, so all gateway nodes go to DATA_V state synchronously and start data packet sharing. As data block size is fixed, the number of hops traversed by a block of data packets within each cluster is ideally the same in a given duration. As a result, transmission duration of  hop upstream nodes of all clusters overlap with each other. The conditions of packet collision in a given time instance on  hop downstream node of a cluster 
 while its upstream node is transmitting are

1.
cluster 
 has at least one neighbor cluster 
, and

2.
 hop upstream node of 
 is within communication range of  hop node of 
.

Now, the probability that a receiving node is  hop node in a cluster is . The probability that the node has  hop upstream node of a given neighbor cluster in its communication range is also . As these two events are independent, the probability that a given node experiences packet collision from a neighbor cluster is 
. Now, as the highway contains  lanes, a vehicle can have max  neighbor clusters. So, the probability that a node does not experience packet loss is given by 
. So, the probability 
, that a node experiences packet collision given its upstream node is transmitting is given by: (3)
It is to be noted that 
 and 
 are mutually exclusive events. When event 
 occurs on a c-node, it rules out the possibility of any collision event 
 on that node. If 
 occurs, it implies that the c-node is receiving packets from its upstream node, and therefore, event 
 cannot occur. So we get the total probability  that a given vehicle experiences packet loss is the sum of two mutually exclusive events (
) and the equation is given below: (4)

We assume  to be constant, and all DSRC links are experiencing the same 
. In that case, the probability of packet loss increases with an increase in , 
, and . It should be noted that  depends on relative velocity , not on the actual velocity of vehicles. As long as relative mobility is less among vehicles (which is usually true in highway lanes), VSIM can tolerate high mobility. The average number of hops  in a cluster has a weak positive correlation with the vehicle density  of the topology. This is because, with higher , the network is well connected, and k can be increased until the data delivery delay exceeds 
. It can be observed that the term 
 of Eq. (4) reduces with increasing . Therefore,  experiences a weakly negative correlation with . This may seem counterintuitive in a wireless scenario. However, it is to be noted that in SS-CAST, the number of transmitting vehicles does not increase with . It is dependent only on , and the vehicles have a hop by hop synchronized sequential transmission schedule. As  increases, the number of receiving vehicles increases in each hop, which increases the packet delivery ratio. In this analysis, we have ignored the presence of any other application data in the scenario which may contest and collide with SS-CAST data. Simulation results presented in the next section support these analytical facts.

4. Performance evaluation
This section describes simulation environment, defines performance metrics, and presents comparative simulation results of VSIM.

4.1. Simulation environment and performance metrics
We have simulated our protocol in NS3 version 3.30.1 (ns3, 2020a) and created a highway topology which is 1 km long and has four lanes namely 
, 
, 
, and 
. Out of the four lanes, vehicles on 
, 
 move from west to east, and vehicles on 
, 
 move from east to west. Velocities of vehicles are not fixed and depend on topology density. Denser topology makes vehicle movement slower as average inter-vehicle distance gets reduced with density. A line-of-sight path is available to each vehicle from eNodeB. We have categorized all simulation parameters in static or dynamic type. Static parameter values are fixed in all simulation runs. Static parameters are mentioned in Table 1.

From Eq. (1) we see that total header overhead of a video block depends on the number of data packets  needed to transmit the block. Therefore, to keep the value of N low, data packet size needs to be as large as possible. On the other hand, packet size should not exceed the maximum transmission unit (MTU) of underline link layer (for example, 1500 Bytes). Otherwise, packet fragmentation will happen resulting in increased header overhead due to the increased number of transmitted packets. Therefore, we set data packet payload size  as 1024 Bytes or 8 Kbit. For our simulation, we set Internet download speed 
 and LTE download speed 
 as 50 Mbps and 25 Mbps, respectively. We set  state duration 
 as 50 ms to support up to a maximum of 5000 vehicles within an AOI of 25 km stretch of highway. We get the estimation by following method. In reality, 
 and 
 depend on the data rate provided by Internet service provider (ISP). According to Ookla speed test global index, the global average of 
 is around 100 Mbps. With DRSC communication radius  of 50 meter (100 meter diameter), in 200 vehicles/km density, we can estimate each vehicle on average has  vehicles as neighbors. Now, lets estimate the download size of . Let the weighted graph , where  is the set of vertices,  is the set of edges, and  is a function which assigns a weight 
 to any edge 
. The data structure used by adjacency list representation of a weighted graph  is an array . 
 represents the vertex 
 by its ID 
, along with the list of IDs of the neighbor vertices of 
 as 
. Let 
 has neighbor vertex set 
. Each element 
 contains a tuple of two values: the ID 
 of 
 where 
, and the weight  of the connecting edge from 
 to 
. When sending this data structure as an offline file, instead of connecting each 
 by next pointer values, they are put into comma separated csv format. Therefore, the size of one list element  becomes: 
. Accordingly, we get the size of 
 as 
. From the above equation, we get the size of one array element  as 
. We get the size 
 of adjacency list representation of graph  as follows. 
. Substituting all the equations, we get the following equation. (5)
In our system, vehicle ID 
 is represented by 16 bit short integer, and edge metric  is represented by 32 bit real number. Substituting , 
, , and 
(average neighbor size as discussed above) into Eq. (5), we get 
. Therefore, the download time of  is . In case of lower available download speed or bigger communication radius, the VSIM server has the provision to send an early download request to the CA while in 
 state of the preceding epoch as described in Section 3.2. The VSIM server needs to finish all the required computations of  state within fixed 
 duration. This is required to make the duration of the gateway selection phase feasible as a streaming service. For this purpose, computational resources of the cloud-based VSIM server may be dynamically added/removed by cloud service, depending on the size of . As mentioned in Section 3.6.2, usually a vehicular network is highly fragmented with a number of small networks. Therefore, parallel processing for each smaller network can be done for fast convergence. For our simulation, we set the duration 
 of  state as 50 ms. In  state, the server sends a small notification message to clients, and therefore the transmission time can be ignored. So, we set the  state duration 
 as 5 ms. We set the duration of  state 
 as 5 ms to allow vehicles to sort, assemble received data packets, and make them available to the media player.


Table 1. Simulation static parameters.

Parameter	Description	Value
Data packet payload size	1024 Bytes
Inter-beacon interval	100 ms
Internet download speed	50 Mbps
LTE download speed	25 Mbps
DSRC channel data rate	6 Mbps
Communication range of DSRC	50 m
Duration of  state	50 ms
Duration of  state	50 ms
Duration of  state	5 ms
Duration of  state	5 ms
Dynamic simulation parameter values are varied across simulation runs. The  of topology is varied from 50 vehicles/km to 175 vehicles/km. As given in Speedtest Global Index (2021), the differences in average velocity among same direction vehicles in a free speed model do not exceed 50 km/h. Therefore, we varied  from 8 m/s (29 km/h) to 15 m/s (54 km/h) to include all possible same lane V2V collaboration. When  is large (small), topology graph  is stable for small (large) duration. When a vehicle congestion situation occurs, vehicle movement is slow, which allows V2V collaboration among opposite direction lanes. With a 15 meters/s relative velocity, the maximum duration for which two vehicles can remain within each other’s communication range is given by . Therefore, we varied 
 from 1 s to 3 s.

With 6 Mbps DSRC data rate, we can support video streaming of Standard Definition (SD) quality which is acceptable for the small/ medium screens installed in vehicles. We varied video playback rate  from 0.8 Mbps to 1.5 Mbps. Depending on 
 and ,  is calculated as 
. The number of data packets in each epoch  is obtained by: . As mentioned in Section 3.2, both 
 and 
 are equal to 
. Duration 
 is divided into two parts. In the first part, data reaches to LTE packet gateway from the VSIM server through Internet, and in the second part, data is transferred from LTE packet gateway to gateway vehicles. So, the value of 
 is obtained as (
). Finally, the value of 
 ( state duration) is obtained by: (6)
For example, for 
 s and  Mbps, we get  Mb. In that case, we get 
 s or . Substituting the values of 
, 
, 
, 
, 
, and 
 in Eq. (6) we get the value of 
. It is to be noted that VSIM performance is evaluated with worst possible DSRC data rate 
 (Morgan, 2010). In average, 
 is much higher than 6 Mbps which allows VSIM to provide HD video streaming. To measure the effectiveness of our proposed scheme, we define the following parameters.

•
LTE cost effectiveness (): This metric reflects the business goal of VSIM. In an epoch, it is the ratio of vehicles which can access freely shared data (without requiring LTE connection), with respect to total vehicle count. The average ratio is taken over all epochs. As only selected gateway nodes require LTE connection, the number of required LTE channels in a given epoch is same as the selected gateway count of that epoch. If total epoch count is 
, selected gateway count for epoch  is 
, and total vehicle count is , the metric  is calculated as given below: (7)
 
 

•
Packet delivery ratio (): For a vehicle, this is the ratio of received packet count in an epoch by that vehicle with respect to the actual video data packet count in that epoch. The average over all vehicles in all epochs is taken to get the value of . This metric measures the effectiveness of VSIM as a service.

•
Number of video interruptions (): This is the ratio of the number of epochs when a client vehicle is unable to fetch video data, with respect to total epoch count. This happens when SS-CAST fails to assign any gateway to a c-node. When a vehicle fails to fetch data in an epoch, the media player of that vehicle is interrupted for the next 
 duration due to buffer underflow. The average over all vehicles is taken to get the value of . This metric helps to assess users’ satisfaction. If number of c-nodes is , number of epoch loss faced by  c-node is 
, and total epoch count is 
, the metric  is calculated as: (8)
 

•
Peak signal to noise ratio (): This is one of the standard techniques for video quality assessment that captures users’ satisfaction. The method of calculating  is well-known and can be found in psn (2020b). VSIM applies a video error concealment technique in data assemble phase before pushing data to media player buffer. If a video frame is constructed with 
 data packets, a loss of one packet results in a loss of 
 frame area. In this case, that frame area is replaced by the correctly received previous frame area. However, this process creates some distortion in frames compared to original frames. To capture the distortion, we used the standard  metric for each frame of each vehicle, and their average is taken. The type of video also influences the value of . For the same , a video showing dynamic content usually has less  value than a video showing static content due to less similarity between consecutive frames in the former case. In our experiment, we used sport event streaming, which is considered as dynamic content.

Simulation results based on the above-defined metrics are given in the next subsection. In VSIM, jitter is consumed by the media player buffer and therefore not included as a performance metric. If delivery latency is less than 
, it is stored in buffer and sorted to its right place before consumed by media player. With delivery latency greater than 
, the packet is considered as lost. So, the streaming delay metric is also not applicable here. The video startup delay in VSIM is 
 as mentioned in Section 3.2 and is not presented as performance metric.

4.2. Simulation results
The proposed VSIM protocol is new of its kind, and there is no existing protocol that is collectively similar in all of the aspects of VSIM, which are enlisted below.

•
Video streaming service in multi-RAT heterogeneous vehicular network.

•
Minimizing vehicular gateways with constrained delivery delay.

•
Centralized gateway selection algorithm in application layer and distributed multi-hop client-gateway association algorithm in network layer.

•
Presence of network layer vehicles in network and their participation in V2V multicast streaming data delivery.

So, we compare VSIM’s performance with one centralized gateway selection protocol with single-hop clustering method proposed by Yaacoub et al. (2015), and one distributed gateway selection protocol with multi-hop clustering method named VMaSC_LTE (Ucar et al., 2016). Though the authors originally used VMaSC_LTE for safety message dissemination, we used VMaSC_LTE to distribute video data to compare V2V data delivery performance and the number of selected gateways. Elias et al. did not give an abbreviation for their proposed work, so for convenience, we use the name SVC_QOE to refer to their work. Fig. 5a, Fig. 5b, Fig. 6a, and Fig. 6b shows the comparative performance of VSIM with SVC_QOE and VMaSC_LTE on the defined metrics with varying . We choose 
 as 2 s and  as 1 Mbps for all these experiments. We kept the ratio of c-node and r-node as 1:3.

Fig. 5b shows  values against varying . As can be seen, VSIM has the trend of increasing LTE cost-effectiveness with the increasing . This can be easily understood because, in higher , a block of video from a gateway can reach more vehicles within 
. SVC_QOE performs poorly in this metric, which is justified because its objective is not to provide cost-effective streaming. In our simulation topology, there is a line of sight path from an eNodeB to each vehicle. Therefore, in a sparse scenario, where vehicles have neighbors with less SNR and data rate, almost no V2V collaboration takes place in SVC_QOE. The degree of collaboration increases a little bit as topology becomes dense, with vehicles having neighbors of good SNR. Though VMaSC_LTE performs far better than SVC_QOE, it is less efficient than VSIM because there is a hop-count limitation in the clusters of VMaSC_LTE.


Fig. 6. Effect of  and  w.r.t vehicle density.

Fig. 5b shows the  values with varying . It can be seen that VSIM has an overall trend of increasing  with increasing . When density is less, network connectivity is less, resulting in high vehicle velocity causing packet loss. We observe a slight decrease in VSIM  from  value 100 to 150. This is because of interfering transmissions from overlapping clusters. With a further increase in density, network connectivity also increases, which decreases the number of clusters, and increases the average number of hops in clusters. It is shown in 3.6.4 that the probability of inter-cluster collision decreases with an increase in average hop-count of clusters clusters (refer Eq.  (3)), which increases . SVC_QOE performs better than VSIM because most vehicles receive data packets directly from eNodeBs through cellular channels, which are contention free. When the topology is moderately dense and vehicle cooperation exists,  of SVC_QOE reduces to some extent. Though VMaSC_LTE performs very well in dissemination of short safety messages, it performs poorly for large video data packets. This is because control messages are asynchronous (depends on asynchronous state switching) and are transmitted at any time, which may collide with ongoing transmission of a large data packet. VSIM and SVC_QOE are able to avoid this problem because control packets of VSIM and SVC_QOE are periodic and do not overlap with data packets. As a result, VMaSC_LTE shows a steady decrease in  with increasing , as control packet transmission also increases with .

Figs. 6a and 6b shows the  and  metrics respectively, with varying . As can be seen, these two metrics are direct consequences of the metric . As observed for VSIM, there is a small increment of  from  value 100 to 150, which is because of the increment of  in that range.  metric for VSIM is also affected in the same manner. However, we see a slight improvement of  from  value 125 to 150. We observed that packet loss event is distributed across frames allowing error concealment technique (mentioned in  metric introduction) to increase  slightly. SVC_QOE receives most packets correctly, resulting in low  and increased . SVC_QOE is the clear winner in these two matrices, while VSIM performs significantly better than VMaSC_LTE. The performance of VMaSC_LTE in metrics  and  steadily decreases with increasing .

Based on the above experiments, we found that though SVC_QOE is able to achieve its goal to provide the best streaming experience to users, it fails to meet the primary business goal of VSIM, which is to minimize cellular channel access cost. On the other hand, though the distributed clustering technique of VMaSC_LTE is efficient, it is very inefficient for large data packet distribution, and as claimed by the authors, it is only useful for disseminating small data packets (safety messages). Our proposed protocol VSIM is able to achieve the business goal of the streaming service provider, as well as it can provide compatible streaming service.

Next, we perform experiments to realize the VSIM performance trade-offs with various dynamic simulation parameters. In these experiments, we measured the performances of metrics  and , while keeping  fixed at 100 vehicles/km. The ratio of c-node to r-node is kept as 1:3. As  and  are direct consequences of , those results are not presented here. Fig. 7 shows the  metric performances of epoch duration of 1,2, and 3 s with varying  when  is fixed at 10 m/s. The  is varied from 0.8 Mbps to 1.5 Mbps. The general trend for all epochs (
) is observed as the decrease of  with an increase in . This is because the probability of packet loss increases with an increase in , which can be seen in Eq. (2). In the case of 
  3, vehicles change their positions significantly within epoch duration resulting in a change in network connectivity. However, data packets continue to follow stale paths causing packet loss. For larger , epoch 
  1 suffers from insufficient data phase duration 
 clusters (refer Eq. (6)) for data packets to reach to the furthest nodes of clusters. We observed that the performance of 
  2 is the best among the three.

Fig. 7. Packet delivery ratio vs Video data rate.

Figs. 8a and 8b show the  and  metric performances of epoch duration of 1,2, and 3 s with varying  with fixed  of 1 Mbps, and fixed  of 100 vehicles/km. Fig. 8a shows the effect on  of different 
 values with varying . In general,  decreases with increasing . This is because, the probability of packet loss increases with an increase in  as can be seen in Eq. (2). It is observed that the performance of 
 s is the worst. The reason is, the probability of packet loss increases with 
, as shown in Eq. (2). The performance of 
 s is less than the performance of 
 s. This is because, as seen from Fig. 7, for 1 Mbps data rate, 
 suffers from insufficient data phase duration. Fig. 8b shows the common trend of increasing  with increasing . This is expected because, when supported  is increased, less number of edges are deleted by the CA from the topology graph as described in Section 3.2. This makes the resultant customized graph denser, which increases gateway selection efficiency and increases . It is observed that  metric performance improves with increasing epoch duration. When 
 increases, 
 also gets increased resulting in an increased average hop-count of clusters. This happens because with the increased time budget 
, a video block data can traverse more hop distance from a gateway. A larger cluster size decreases the number of clusters in the network, resulting in fewer gateways, which improves .

Fig. 8. Effect of  and  w.r.t relative velocity threshold.

Based on the above experiments, we found that VSIM can best support 1 Mbps video data rate with 2 s epoch duration with 6 Mbps DSRC channel. For relative velocity support, we found that  is best when  is 10 m/s, whereas  is best when  is 12 m/s. We recommend  to set as 12 m/s because improving  is the primary goal of VSIM, and  can still achieve more than 90% rate, which is quite acceptable.

The performance of VSIM also depends on the ratio of c-nodes to r-nodes. We varied the ratio from 100% c-nodes to 10% c-nodes in topology keeping , , , and 
. To measure the gateway selection efficiency, we define a new metric “Gateway selection ratio” (), which is the ratio (percentage) of c-nodes that are selected as gateways by the VSIM server. The average value of  is taken for all simulation runs. Clearly, VSIM wants to keep  as low as possible. Fig. 9a shows the performance of  with varying c-node ratio of topology. It is observed that in general,  gets decreased when the c-node ratio in topology increases. As the ratio of c-nodes w.r.t r-nodes goes down, multi-hop path delay between c-nodes increases. In that case, the VSIM server tends to select more c-nodes as gateways to satisfy the delay constraint resulting in increased . In an extreme case, when all the c-nodes are sufficiently far from each other, the VSIM server may select all the c-nodes as gateways. Therefore,  metric may be misleading while assessing VSIM performance in a topology with a low c-node ratio. It is observed that  is not influenced by epoch duration as it depends only on the topology. We measured the performance of  metrics with varying c-node ratios. From Fig. 9b it is observed that  tends to decrease with an increase in c-node ratio in the topology. With deep analysis of the plot behavior, we found that keeping vehicle density fixed, when c-node ratio increases, V2V collaboration also increases, which increases DSRC transmissions. Data packets tend to collide due to the lossy nature of DSRC and high velocities among vehicles which reduce . On the other hand, as c-node ratio decreases, most of the c-nodes are selected as gateways by the VSIM server. As gateways receive data packets through dedicated cellular channel,  gets improved. The  performance also decreases as epoch duration increases. The reason is, any client-gateway multi-hop path tends to break as epoch duration is increased.

Fig. 9. Effect of  and  w.r.t c-node percentange.

5. Conclusions
This work proposes the protocol VSIM which is a cost-effective video streaming solution for IoV scenarios. VSIM reduces the streaming service cost by selecting a minimum number of vehicular gateways while ensuring constrained delivery latency to all client vehicles. Unlike protocols in existing literature, we have considered the presence of network layer vehicles in the system that is unaware of any streaming application. For that purpose, we have proposed a novel IP multicast protocol named SS-CAST, which is specially designed for network layer V2V cooperation for streaming data distribution in VANET. The minimum gateway selection problem is solved by the centralized method of the greedy approximation technique for the minimum set-covering problem. The gateway assignment problem is solved by the distributed client-gateway association method of the SS-CAST multicast control plane. The performance of VSIM is measured with defined metrics to assess the cost-effectiveness of the streaming service and user satisfaction. Comparative result analysis of VSIM with respect to two existing protocols demonstrates VSIM as the most cost-effective video streaming service protocol. This work has not considered an adaptive video bit-rate solution depending on channel load. Also, this work is not evaluated on grid type or two-dimensional irregular road topology of urban scenarios. These can be the future extensions of this work.