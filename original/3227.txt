Providing interactive video-on-demand streaming over mobile ad hoc networks is still a challenge. Mobile nodes are dynamically and arbitrarily located in such a manner that interconnections between them change on a continual basis, thereby making timely video-delivery strenuous to achieve. To help to tackle this adversity, this paper proposes two BitTorrent-like algorithms. Their design concept lies in the combination of different criteria to wisely (i) select the nodes which may request video file pieces from another node, and (ii) delimit the video file pieces to be requested with the highest priority. Performance evaluation is carried out by means of simulations, which assess different metrics on scenarios encompassing two client-mobility models and two client-interactivity profiles. The final results highlight the efficiency of our proposals compared to other recent literature works. General conclusions and avenues for further research are included at the end of this paper.

Previous
Next 
Keywords
Streaming

VoD

MANET

BitTorrent

Mobility

Interactivity

1. Introduction
BitTorrent has already proven to be the most efficient peer-to-peer (P2P) algorithm for file replication on the Internet (Cohen, 2003; Legout et al., 2006; Anjum et al., 2017; Malatras, 2015; de Souza e Silva et al., 2019). Its operation is based on the formation of swarms, i.e., sets of peers that work collaboratively to replicate the files stored in a server. The files to be replicated are firstly divided into pieces, which are then exchanged between the peers belonging to the corresponding swarm.

A peer-selection policy and a piece-selection policy constitute the core of the BitTorrent algorithm. They jointly regulate the piece-exchanging process among peers inside the swarm (Cohen, 2003; Legout et al., 2006; de Souza e Silva et al., 2019).

BitTorrent is unaware of the physical topology of the subjacent communication network (Cohen, 2003; Legout et al., 2006; Varvello et al., 2012; Malatras, 2015; Anjum et al., 2017; de Souza e Silva et al., 2019). This means that piece-selection and peer-selection policies operate exclusively on a logical topology, being therefore strictly confined to the application-layer view. The rationale for this lies in the fact that BitTorrent's deployment primarily targets at wired networks, i.e., peers wire-connected to a fixed cabled infrastructure. Hence, stable communication channels and low data-packet losses are supposed to be guaranteed.

BitTorrent's notable efficiency has soon fostered its adaptation to interactive (i.e., VCR-like) video-on-demand streaming over wired networks, resulting in a number of proposals (e.g., (Carlsson and Eager, 2007a; Ma et al., 2012; D'Acunto et al., 2013; Rodrigues, 2014)). This adaptation is necessary because file pieces are not retrieved sequentially (i.e., strictly in-order) under the original BitTorrent paradigm. Rather than that, the rarest (i.e., the least replicated) pieces are firstly requested, hence preventing the continuous file playback.

More recently, wireless networks have been playing an increasingly important role to support on-demand streaming applications (e.g., (Hassan and Farooq, 2016; Baldesi et al., 2015; Maccari et al., 2017; Zhang et al., 2019)). In other words, streaming and wireless technologies are interrelated nowadays and will likely continue to be in the upcoming years. For instance, wireless-device traffic is forecast to account for more than 63% of the world IP traffic by the year of 2021 (Cisco Visual Networking Index, 2017). The question is whether BitTorrent may be still adapted to interactive video-on-demand streaming over wireless networks in the presence of mobile nodes, i.e., mobile wireless networks (Mao et al., 2017; Obayiuwana and Falowo, 2017; Shah et al., 2017; Hasan et al., 2019).

The greatest concern regarding the aforementioned scenario is that selecting peers (i.e., mobile nodes) according to a logical network topology may sometimes severely degrade the system quality of service (QoS) and client quality of experience (QoE). On a logical topology, neighbors appear as if they were directly connected (i.e., single-hop link), but they may be actually multiple hops away from each other on the actual physical topology (i.e., multiple-hop paths), being connected via intermediate nodes. Additionally, wireless links significantly differ from wired links, being often characterized by unstable communication channels and high data-packet losses (Rethfeldt et al., 2018; Sbai and Barakat, 2009; Salhi et al., 2009; Abid et al., 2014).

Mobile wireless networks may be categorized as infrastructured and infrastructureless (e.g., (Kanellopoulos, 2019; Liu et al., 2018; Shah et al., 2017)). In the former, a complex static cabled platform supports the communication between the mobile nodes. In the latter, also denoted by the acronym MANET (Mobile Ad Hoc Network), mobile nodes operate in parallel as servers, clients, and routers, which may communicate between themselves without relying on any kind of physical platform. In particular, a MANET is characterized by self-configuration, self-formation, and self-maintenance, what makes feasible a number of applications in various areas, ranging from military communications to education and entertainment activities.

The discussion above is the chief motivation for this paper, which aims at proposing two BitTorrent-like algorithms for interactive video-on-demand streaming over MANETs. The first proposal, denoted as Interactive BitTorrent - Application (IB-A), follows the layered-architecture paradigm, whereas the second, denoted as Interactive BitTorrent - Network (IB-N), uses the cross-layer paradigm.

The overall design concept of both IB-A and IB-N resides in the combination of different criteria to wisely select neighbors and request file pieces during the playback of the video. This is done in such a manner that the main positive features of previous literature works are jointly deployed.

By means of simulations on various scenarios, IB-A and IB-N are evaluated according to different metrics which assess the system QoS and the client QoE. The key contribution of this article is thus to provide the literature with valuable insights for real-world protocol designs, targeting at interactive video-on-demand streaming over MANETs.

The remainder of this article is organized as follows. Section 2 briefly reviews the BitTorrent algorithm and presents general concepts with respect to MANETs. Section 3 discusses related work. Section 4 elaborates on the criteria to be used in the peer-selection and piece-selection policies of our new proposals. In Section 5, we explain our new proposals. Section 6 is devoted to experiments, results and analyses. At last, general conclusions and future works constitute Section 7.

2. Background
This section briefly reviews the original BitTorrent and a few basic concepts related to MANETs. For those wanting a more detailed explanation of BitTorrent, please refer to (Cohen, 2003; Legout et al., 2006).

2.1. The BitTorrent protocol
As mentioned in Section 1, in BitTorrent the file to be replicated is first divided into pieces. Each piece is then divided into blocks. Pieces are usually 256 kB in size, whereas blocks are 16 kB in size (Cohen, 2003; Legout et al., 2006). Although blocks are the data unit in the physical network, the replication analysis considers the transmitted pieces only.

When a peer p of the BitTorrent’ swarm wishes to receive a file F, it must initially obtain a metadata file of F from a public Internet web server. Among other information, this metadata file has the location of the tracker, which is the coordinator of the communication between the swarm peers. After being contacted by peer p, the tracker sends it a list L with typically 50 peers (Cohen, 2003; Legout et al., 2006).

In the sequence, peer p randomly attempts to establish TCP (Transmission Control Protocol) connections with the peers in the list L. The resulting successful connections form the neighbor set of peer p. The neighbors are those peers to which, and from which, peer p can send, and receive, pieces of file F (Cohen, 2003; Legout et al., 2006).

There are two types of swarm peers: leecher and seed. The former is a peer that downloads pieces of file F, but also allows other peers to download pieces from it. The latter is a peer that already has all the pieces of file F, but remains in the system to allow other peers to download pieces from it (Cohen, 2003; Legout et al., 2006). As mentioned in Section 1, the piece-exchange process among peers is governed by the peer-selection and the piece-selection policies, detailed in the following subsections.

2.1.1. The peer-selection policy
The peer-selection policy, also called the choke algorithm, allows each swarm peer to select which other peers from its neighbor set may request the pieces it owns. For that, the peer transfer capacity is divided into four logical data slots, which are filled by two processes: the regular and the optimistic unchokings.

In the first process, the three neighbors that upload pieces to p, in case p is a leecher (or download pieces from p, in case p is a seed), at the highest average rates are selected and put in the unchoked state, whereas the other neighbors are put in the choked state. This selection is typically repeated at every 10 s (Cohen, 2003; Legout et al., 2006). In the second process, peer p randomly selects another peer from its neighbor set and puts it in the unchoked state. This selection is typically repeated at every 30 s (Cohen, 2003; Legout et al., 2006).

2.1.2. The piece-selection policy
The piece-selection policy allows each swarm peer to decide which pieces to request when it is in the unchoked state. The decision follows the rarest-piece policy, i.e., to find the least replicated piece being shared by the neighbors.

For that, peer p keeps a list containing the number of copies of each piece in its neighbor set. This information is used to define the set of the rarest pieces, i.e., the set of the least replicated pieces. Let m be the number of copies of the rarest piece. The index of each piece with m copies in the neighbor set is then added to the set of rarest pieces. Peer p then requests the next piece taking into account the set of rarest pieces as well as the available pieces in the neighbor that has just put it in the unchoked state. Finally, after receiving the piece, peer p then tells all its neighbors about the received piece (Cohen, 2003; Legout et al., 2006).

2.2. Mobile ad hoc networks – MANETs
As already mentioned, a MANET does not own a static cabled platform for supporting communication between the mobile nodes. In fact, the mobile nodes operate simultaneously as clients, routers, and servers (Kanellopoulos, 2019; Liu et al., 2018; Shah et al., 2017).

In a MANET, each mobile node may directly communicate with another node within its radio range, by means of a wireless link (i.e., a single-hop path). To communicate with a node beyond its radio range, a mobile node must employ intermediate nodes to forward its messages, by means of a multiple-hop path. Moreover, due to node mobility, the network topology may change rapidly and unpredictably. Hence, interconnections between mobile nodes are continuously modified and timely content-delivery becomes hard to achieve (Kanellopoulos, 2019; Liu et al., 2018; Shah et al., 2017; Hu et al., 2017).

Over the time, the evolution of mobile technologies has led to the emergence of variations of the original concept of MANET, which may be assumed as subcategories or new types of mobile wireless networks. Among those, we can mention, e.g., Vehicular Ad Hoc Network (VANET) (Ali et al., 2019), Flying Ad Hoc Network (FANET) (Chriki et al., 2019), and Wireless Mesh Network (WMN) (Gokbayrak, 2018).

In this context, we must highlight the relevance of carefully choosing proper mobility models to use in simulation experiments. This is to ensure that the observed results turn out to be as realistic as possible and, consequently, may be deployed for real-world projects. The mobility models we consider in this work are detailed in Section 6.

To end this section, it is worth mentioning that the proposed IB-A and IB-N algorithms are both aimed at applications envisioning the original concept of a MANET. In this sense, we assume the mobile nodes as ordinary individuals, moving over an obstacle-free flat area and fully communicating between themselves, even in the absence of a structured network (i.e., with the Internet and infrastructure depending on a wireless local area network) (Ghalib et al., 2018). This scenario may represent, e.g., part of a university campus, where students wish to attend an outdoor class, or maybe an airport lounge, where passengers watch a movie prior to boarding. Furthermore, these individuals can also perform VCR-like interactivity actions (e.g., pause, play, jump, and stop) during the media playback.

3. Related work
This section discusses some of the major literature works that contribute to the general purpose of this article. It is structured in four subsections as follows: Subsection 3.1 considers BitTorrent's adaptations for wired network; Subsection 3.2 refers to adaptations for wireless networks; Subsection 3.3 mostly examines adaptations for interactive on-demand streaming over MANETs; and Subsection 3.4 highlights the main differences and similarities between our new proposals and past literature proposals. Additionally, for simplicity and ease of reference, the terms peer and node are used interchangeably henceforth.

3.1. Adaptations for wired networks
The adaptations of BitTorrent regarding on-demand streaming largely refer to wired networks (e.g., (Romero et al., 2013; D'Acunto et al., 2013; Rodrigues, 2014; Borghol et al., 2010; Hoffmann et al., 2011; Carlsson and Eager, 2007b; Paris and Shah, 2007; Vlavianos et al., 2006)). These proposals are physical-topology unaware. Additionally, they often seek to modify the piece-selection and the peer-selection policies to obtain an adequate trade-off between (i) time requirements of on-demand streaming applications and (ii) high piece-diversity. For example, we comment on five important works of this type in the following.

Borghol et al. (2010) define a sliding window that delimits the file pieces to be requested. Its size dynamically changes according to the number of in-order file pieces in the peer's buffer and the peer's current playback position. Besides, when the window becomes small (i.e., below a certain threshold), an in-order piece retrieval occurs, and when the window becomes large (i.e., above a certain threshold), a rarest-first piece retrieval is considered. No support for interactivity is provided. Despite the efficiency shown in the experiments, the main drawback is the overhead due to permanent on-line calculation of the window size.

Carlsson and Eager (2007b) propose a complex scheme in that each file piece is assigned an exclusive request probability, computed from a Zipf distribution. This proposal especially enables a significant freedom for deciding about the specificity to be employed for selecting each file piece, what is suitable for retrieving certain categories of media objects (e.g., movies, songs, ads, etc.). No support for interactivity is though provided.

D'Acunto et al. (D'Acunto et al., 2013) propose three schemes to adjust the number of data slots a peer may open at a time. The first employs formulas which consider the peer's upload capacity and playback rate. The second lets peers dynamically adjust the number of data slots according to the current system QoS. The third gives higher priority to recently-logged peers during optimistic unchokings. These schemes are suitable in heterogeneous scenarios, where peers own different upload and/or download capacities. Nevertheless, there may be an unacceptable overhead due to permanent on-line computations. Besides, no support for interactivity is provided either.

Hoffmann et al. (2011) propose the BitTorrent Interactive Protocol - The First (BIP-F) and the BitTorrent Interactive Protocol - The Second (BIP-S). The peer-selection policy of both proposals is the same as the traditional BitTorrent's, whereas the piece-selection policy deploys priority-piece sets: two sets in BIP-F, and three sets in BIP-S. These sets are probabilistically chosen during the file playout. In particular, a user-behavior model is used to forecast the pieces to be delimited within one of the piece sets. The simulation results show that BIP-F outperforms BIP-S, revealing that a smaller number of piece sets yields a more efficient piece retrieval. Comparing to other proposals in the literature, BIP-F and BIP-S show to be reasonably competitive, besides providing support for interactivity. Nevertheless, the implementation and deployment of a user-behavior model to forecast pieces may consist in a non-trivial obstacle.

At last, Rodrigues (2014) proposes the Exclusive Interactive Streaming Protocol (EISP). This proposal deploys a sliding window with an interior buffer to delimit the pieces which may be retrieved at a time. Besides, the piece retrieval alternates between a rarest-first policy and an in-order policy during file playout. The simulation results confirm the competitive performance of the EISP protocol compared to a theoretical ideal scheme. Furthermore, it is worth mentioning that this proposal in one of the few in the literature to provide support for client interactivity and probe the time interval of unchoking processes.

3.2. Adaptations for mobile wireless networks
BitTorrent's adaptations aimed at wireless networks may be classified into two categories: layered-architecture (e.g., (Balázsfalvi and Sztrik, 2006; Sbai et al., 2009; Quental and Gonçalves, 2011; Mawji and Hassanein, 2011; Casini et al., 2016)) and cross-layer (e.g., (Sbai et al., 2008; Krifa et al., 2009; Sbai and Barakat, 2009; Salhi et al., 2009; Marques et al., 2009; D'Elia et al., 2011; Di Stasi et al., 2011; Castro et al., 2012; Manousakis et al., 2015; Rethfeldt et al., 2018)). For the former, the network operation is divided into different layers, and a hierarchy of services to be provided by the individual layers is strictly defined. There is no direct communication between nonadjacent layers, and communication between adjacent layers is restricted to procedure calls and responses.

The layered-architecture adaptations tend to be easily implemented and executed in a conflict-free manner along with pre-installed applications. Simplicity is indeed the main advantage. On the other hand, these adaptations are unaware of the subjacent physical communication network. Hence, it is true that they may present some performance degradation when deployed in wireless and mobile services, since considering both logical and physical topologies in parallel may be decisive in these scenarios (Lindeberg et al., 2011; Mantzouratos et al., 2012; Ghalib et al., 2018).

The cross-layer category relaxes the hierarchy of the layered paradigm. This implies that nonadjacent layers may communicate for better performance. On one hand, implementations tend to be more complex and yield information dependency between several layers. On the other hand, implementations are aware of the subjacent physical communication network. Hence, they may properly mitigate the mismatch between the logical P2P topology and the physical network topology, mostly resulting in final performance optimization (Lindeberg et al., 2011; Mantzouratos et al., 2012).

The authors of (Sbai et al., 2008, Sbai and Barakat, 2009; Krifa et al., 2009; Salhi et al., 2009) propose the BitHoc protocol and some extensions to it focusing on MANETs. Their works fall into the cross-layer category. They define a peer-selection policy that balances piece-sharing and piece-diversification efforts, besides proposing the employment of a denoted optimal neighbor scope, i.e., a hop count limit for routes connecting two endpoints. The information of the network topology is provided by the proactive routing protocol called Optimized Link State Routing (OLSR). Despite its proven efficiency, assessed by means of extensive simulations, client mobility is modestly considered and client interactivity is not supported.

Considering the layered-architecture category, the authors of Quental and Gonçalves (2011) propose the Mobile-BitTorrent protocol for MANETs. Two types of peers are assumed: disseminator and common. The former periodically broadcasts content messages to its 1-hop neighbors, and may respond to content requests from any of its neighbors via unicast. The latter responds to content requests from any of its neighbors via unicast, and may receive both unicast and broadcast content messages. The authors outline that message broadcasting must be done judiciously to prevent the increase of packet collisions. In this sense, the works of Casini et al. (2016); Jenkac et al. (2006); Leung and Chan (2007) present interesting investigations regarding broadcast-based content dissemination. In spite of a competitive performance compared to that of the original BitTorrent, assessed via simulations, simplicity is indeed the pivotal advantage of the Mobile-BitTorrent protocol. Neither interactivity nor mobility are though considered in the experiments.

Rethfeldt et al. (2018) present MeNTor, which is a cross-layer protocol devoted to WMNs. This work broadly considers to: (i) modify the default BitTorrent's peer-selection policy to integrate the 802.11s MAC-layer link information and the Airtime Link Metric (ALM) as priority criteria; (ii) limit concurrent uploads per peer and deactivate uploads to random optimistic peers to further reduce the level of wireless contention; and (iii) deploy a so-called generous mode, which modifies the peer-selection policy in the sense that a neighbor may be selected despite its low average upload rate. Their proposal exhibits an attractive performance, assessed in a 25-node real-world mesh testbed. Nevertheless, neither mobility nor interactivity are though considered in the experiments.

3.3. Interactive on-demand streaming adaptations
From the previous subsections, it is reasonable to conceive a timeline evolution that points to on-demand streaming applications in MANETs, which meet delivery-time requirements besides providing both client mobility and client interactivity. Notwithstanding, to the best of our knowledge, there are only four literature proposals that fit this overall purpose, where three of them are BitTorrent-based. These four proposals are discussed in what follows.

Rodrigues (da Silva Rodrigues, 2018) proposes the Minimum-Distance Indirect-Reciprocity Algorithm (MDIRA), which follows the layered-architecture paradigm. Its peer-selection policy uses upload rate, geographical distance, and indirect reciprocity as criteria, whereas the piece-selection policy deploys a sliding window. The simulation results reveal a competitive performance compared to a theoretical-ideal scheme. Nonetheless, the scenarios evaluated are restricted to a 25-node network and to a single mobility model. In this same work, it is proposed a variant which adds data dispersion as a peer-selection criterion too, but it does not result effective because of the additional computation burden that is then introduced.

In the work of Rodrigues and Rocha (2019), we propose the Application-layer Interactive BitTorrent Algorithm (AIBA), which follows the layered-architecture paradigm, and the Network-layer Interactive BitTorrent Algorithm (NIBA), which fits within the cross-layer approach. The AIBA's peer-selection policy deploys the upload rate and the download rate as criteria. The NIBA's peer-selection policy basically differs from the AIBA's in the aspect that, for the former, the upload rate and the download rate are computed for neighbors within (or beyond) a certain number of hops in distance. In both proposals, the piece-selection policy is based on a sliding window to prioritize the pieces to request. The simulation results suggest attractive performance of both proposals comparing to other literature works, with a slight superiority for the NIBA proposal. The experiments are though confined to few scenarios and just one mobility model is considered.

Finally, Hu et al. (Hu et al., 2017) propose the Delay-Sensitive Segment Scheduling Algorithm (DSSSA), which is a non-based BitTorrent proposal and falls into the cross-layer category. The baseline idea is to schedule the file pieces (i.e., segments) according to the following order. First, the pieces with approaching play deadlines (i.e., urgent pieces) are scheduled. Second, the pieces that are not urgent, regarding their playback deadlines (i.e., normal pieces), are scheduled. Third, the pieces which are only stored at very few peers (i.e., rare pieces) are scheduled. Additionally, since a piece may be cached at multiple peers, DSSSA schedules the piece to be transmitted from the peer with less bandwidth consumption to the network. In order to achieve this, DSSSA selects the route with minimal total medium time (Hu, 2011). Despite the suitable efficiency assessed by means of simulation experiments, only 50-node networks are considered, and mobility and interactivity features are barely examined.

It is worth noting that there are various non-BitTorrent-based works devoted to non-interactive streaming over MANETs. For example, we comment on two works of this type in the following.

The authors of Ben Rhaiem et al. (2016) focus on improving the QoS of video streaming over MANETs using the concept of network coding (NC). More precisely, they consider video coded by the widely-used H264/SVC codec that generates packets with different priorities and provides traffic differentiation using the IEEE 802.11e MAC. Their proposal, denoted as Extended Multicast Scalable Video Transmission using Classification-Scheduling Algorithms and Network Coding over MANET (EMSCNC), adopts a cross-layer design between the H.264/SVC codec, the network and MAC layers. Simulation results confirm the substantial performance improvement brought by their approach.

In Subramaniam and Tamilselvan (2016), the authors introduce an efficient buffer management protocol focused on streaming data in multicast groups. The overall concept relies in the idea that the frequently requested video data can be buffered in any intermediate nodes along the multicast tree from the source to the receivers. When packets are received, they are classified as real-time or non-real-time and placed into queues. Cumulative weight of the packets in the real-time buffer is then estimated based on number of hops, deadline and waiting time. Based on the estimated weight value, transmission priorities are therefore assigned. Simulation results show that the proposed buffer management protocol reduces the latency and energy consumption while increasing the packet delivery ratio.

For those readers interested in other non-BitTorrent-based discussions about streaming over MANETs, we would recommend the surveys of Mantzouratos et al. (2012); Fleury and Qadri (2019); Shah et al. (2017) and references therein.

3.4. Differences and similarities
The two new algorithms we introduce in this work, namely IB-A and IB-N, may yield valuable contributions to real-life protocol projects, since their design is especially directed to interactive on-demand streaming services and combines the main positive features of past literature proposals, encompassing wired networks (e.g., (Rodrigues, 2014; Hoffmann et al., 2011)) and wireless networks (e.g., (Rethfeldt et al., 2018; Rodrigues and Rocha, 2019)).

To highlight our new algorithms’ distinguishing features, we next cite their main conceptual differences and/or similarities with respect to the MDIRA, AIBA, NIBA and DSSSA proposals.

●
To MDIRA: The IB-A and IB-N's piece-selection policies are the same as the MDIRA's. The IB-A's peer-selection policy is simpler than the MDIRA's, since the former does not use the geographical distance as a criterion. The IB-N's peer-selection policy is more elaborated than the MDIRA's, since the former uses the number of hops along the path connecting two endpoints as a criterion.

●
To AIBA: The IB-A and IB-N's piece-selection policies are the same as the AIBA's. IB-A basically differs from AIBA because the former uses indirect reciprocity besides the upload rate (or download rate) as criterion for peer-selection. In turn, IB-N differs from AIBA because the former uses the number of hops along the path as a criterion for peer-selection, besides the upload rate (or download rate).

●
To NIBA: The IB-A and IB-N's piece-selection policies are the same as the NIBA's. IB-A mainly differs from NIBA because the former does not use the number of hops as a criterion for peer-selection. In turn, IB-N differs from NIBA because the former uses the indirect reciprocity as a criterion for peer-selection, in addition to the number of hops along the path.

●
To DSSSA: The IB-A and IB-N proposals mainly differ from the DSSSA proposal in the aspect that DSSSA schedules pieces to be transmitted from peers with less bandwidth consumption to the network, by selecting routes according to the computed minimal total medium time (Hu, 2011). Besides, IB-N uses the number of hops as a criterion for peer-selection.

4. Selection criteria
This section explains the most common peer-selection criteria deployed in BitTorrent-like adaptations for interactive streaming over MANETs, including the IB-A and IB-N algorithms. Even though these criteria have been referred in the previous section, the goal now is to well clarify their definitions.

Let g be a peer which is neighbor of another peer p. Peer g is said to be interested in peer p when peer p has pieces that peer g does not have. Conversely, peer g is not interested in peer p when peer p only has a subset of the pieces of peer g. The following criteria may be then assumed for selecting a peer g that is interested in peer p.

1)
Upload rate: among all neighbors interested in peer p, peer g must be the one that more rapidly sends pieces to p on average. This reinforces the direct reciprocity, since only peers that directly contribute to peer p may retrieve data from it. Hence, selfish peers, i.e., peers just wanting to receive pieces, are cleared away from the system. The side effect is that slow peers, i.e., low-upload-capacity peers, will have difficulties to participate and will mostly depend on optimistic unchockings.

2)
Download rate: among all neighbors interested in peer p, peer g must be the one that more rapidly may receives pieces from peer p on average. This criterion is especially used in the case peer p already has all the pieces of the file and stays in the system just to collaborate with the file distribution, i.e., peer p is a seed.

3)
Indirect reciprocity: among all neighbors interested in peer p, peer g must be the one that has shared pieces the most on average with peers other than peer p, i.e., disregarding the pieces shared directly with peer p. This criterion aims to normalize the data distribution in the network by preventing that only high-upload-capacity peers may receive data. Moreover, this criterion helps to mitigate the side effect of the upload rate criterion previously mentioned.

4)
Hop count: among all neighbors interested in peer p, peer g must be the closest to peer p in number of hops. The motivation for this criterion is to eliminate the overhead to establish long physical routes which often end up being useless. This is because longer routes tend to be less competitive than shorter routes to deliver pieces between a same pair of endpoints. In general, the shorter the route is, the faster the pieces are delivered.

5. The IB-A and IB-N algorithms
This section explains our new proposals. To this end, Subsection 5.1 discusses the peer selection, and Subsection 5.2 elaborates on the piece selection. Additionally, the same previous assumptions taken for peers p and g remain valid: peer g and peer p are neighbors, and peer g is interested in peer p.

5.1. Peer-selection policies
IB-A and IB-N deploy both regular unchoking and altruistic unchoking for peer selection. Moreover, the upload capacity of peer p is divided into (y + x) data slots: y slots for regular unchoking, and x slots altruistic unchokings. Both of these unchokings periodically occur at every δt seconds.

For the IB-A's regular unchoking, consider the following steps.

1.
Neighbors interested in peer p are ordered by average upload rate.

2.
The (y − 1) fastest neighbors are then selected by peer p, and one data slot is allocated to each of them.

3.
The first k remaining neighbors are then ordered by average indirect reciprocity, where k < (y − 1).

4.
The neighbor having the highest average indirect reciprocity is then selected by peer p, and one data slot is allocated to it.

Two different criteria are used in the above: upload rate and indirect reciprocity. The former may be computed individually by each peer, whereas the latter may be informed by the neighbor itself. Moreover, the smaller the parameter k is, the less probable it becomes to select a low-upload-capacity peer in Step 4.

For the IB-A's altruistic unchoking, consider the following steps.

1.
Neighbors interested in peer p are ordered by average download rate.

2.
The x fastest neighbors are then selected by peer p, and one data slot is allocated to each of them.

The download rate is the only criterion to be used in the above. Even those neighbors providing no direct contribution to peer p may now be selected. This altruism is likely to result in a more efficient piece sharing. The reason is that an exclusive direct-reciprocity posture inhibits the selection of high-capacity neighbors which may be temporarily blocked to send data due to the continuous vagaries of mobile connections. The computation of this criterion may be individually done by each peer.

For the IB-N's regular and altruistic unchockings, we use the same as the IB-A's, but with the knowledge of the hop count criterion being applied to Step 1 as follows.

1.
Neighbors interested in peer p, which are within the limit of h hops away, are ordered according to average: (i) upload rate, for regular unchoking; and (ii) download rate, for altruistic unchoking.

Comparing to the IB-A's peer-selection policy, the corresponding IB-N's uses one additional criterion: hop count. This criterion evaluation may be obtained from a routing protocol, such as OLSR and Ad hoc On-Demand Distance Vector (AODV), as already discussed in prior literature works (e.g., (Rethfeldt et al., 2018; Ghalib et al., 2018; Hu et al., 2017)).

To summarize, the IB-A's peer-selection policy is layered-architecture based, whereas IB-N's peer-selection policy is cross-layer based. In the latter, network-layer information is required to determine the number of hops along the routes connecting two peers which are endpoints. We therefore achieve P2P-underlay awareness at the application layer.

5.2. Piece-selection policies
The piece-selection policy is the same for both IB-A and IB-N. It is based on the criterion that combines a sliding window, W, and an interior buffer, V, as explained in what follows.

Assume the file is divided into u pieces: 1, 2, …, u. Let d be the piece that corresponds to the current playback point. Still, let w be the window size in number of pieces. Hence, W comprises the following pieces: [d; d + w]. Furthermore, W is dynamically updated as the pieces are played and interactivity actions are performed. For example, let Δplay be the number of pieces just played. The first piece of W is then updated to (d + Δplay), while the last piece is updated to (d + w + Δplay).

Now, let v be the buffer size in number of pieces. The first piece of V is always coincident with the first piece of W. Before a peer g requests the next piece from a peer p, it checks if all pieces of buffer V have already been retrieved. If so, peer g requests the rarest piece within W; otherwise, it greedily requests the next missing in-order piece within V. Greedy piece retrieval and rarest-first piece retrieval when employed together (one by turn) set a compromise between playback continuity and piece diversity. An illustrative relationship between W and V is depicted in Fig. 1.

Fig. 1
Download : Download high-res image (130KB)
Download : Download full-size image
Fig. 1. Sliding window W and buffer V.

Additionally, the pieces transmitted via intermediate peers, using TCP, are locally stored in them (using local buffers) as well. This is to compensate the intermediate peers for the usage of their respective upload capacity to forward pieces along routes between endpoints. Still, this mainly prevents intermediate peers from requesting pieces which have already been forwarded by them. To implement this feature, the routing protocol may be enabled to inspect the forwarded TCP packets, identify them as IB-A's or IB-N's packets, and deliver them to the application level.

Finally, to end this subsection and ease of reference, we recap in Table 1 the respective definitions of the parameters used in the IB-A and IB-N proposals.


Table 1. Definitions.

Parameter	Definition
δt	time interval for unchokings, measured in seconds.
v	size of the buffer V, measured in file pieces.
w	size of the sliding window W, measured in file pieces.
y	number of data slots used by IB-A's optimized regular unchoking, and by IB-N's limited optimized regular unchocking.
x	number of data slots used by IB-A's altruistic unchoking, and by IB-N's limited altruistic unchocking.
k	number of peers that are ordered according to the indirect reciprocity criterion, right after they have been ordered according to the upload rate criterion.
h	maximum number of hops along a path connecting two peers that are endpoints.
6. Performance evaluation
By means of simulations, this section aims at carrying out the performance evaluation of the IB-A and IB-N algorithms. The experiments consider a MANET formed by n peers. Each peer acts as a mobile client, which performs interactivity actions during a video-file playback.

Each peer has a communication channel capacity divided into five logical concurrent TCP data-stream slots that are serialized over its WLAN interface: three upload slots (for regular unchoking); one upload slot (for altruistic unchoking); and one download slot (for piece retrieval). Each slot's effective data rate might not be the same, since it depends on the connection characteristics to the remote peer. Nevertheless, for the sake of simulations, we herein assume this effective data rate to be at 1 Mbps on average. To exemplify, the 802.11 g standard supports up to 54 Mbps in total.

Moreover, among the n peers, we assume there is always a tracker which operates uninterruptedly and is directly reachable (i.e., single-hop link) by all other system peers. This reachability lies in the following rationale. First, the communication protocol standard and the covered physical area should be compatibly chosen. To exemplify, the 802.11n standard has radio ranges of 70 m (indoor) and 250 m (outdoor). Second, as the peer moves, the tracker is eventually found in some moment, since the covered physical area in the experiments is relatively small. Our algorithms then focus on analyzing the distribution of pieces from that moment on.

At last, for the sake of organization and clarity, we opt to divide this section into three subsections as follows. Subsection 6.1 discusses client mobility and client interactivity. Subsection 6.2 focuses on explaining the simulation models and performance metrics. Lastly, Subsection 6.3 discusses the experiments and analyzes the outcomes.

6.1. Mobility and interactivity
The peers move over an obstacle-free flat area of 100 m2, according to two mobility models, at a speed of 0 − 2 m/s, and at a direction of 0–360°. Each of these mobility models is generated by one of the following model generators: Small World in Motion (SWIM) (Mei and Stefa, 2009) and Bonnmotion (Aschenbruck et al., 2010).

In the case of the SWIM model, we have three assumptions: (i) a peer often visits places that are popular or close to where it stays most of the time; (ii) peers stay for a long time in a few specific places (e.g., homes, offices, and schools), whereas peers stay for a short time in many other specific places (e.g., banks, restaurants, and shopping centers); (iii) at last, the speed of a peer depends on how close the final destination is: the closer it gets, the faster it moves. When a peer arrives to the destination, it follows a decaying power-law distribution to decide how long to remain there. The parameter values used to configure the generator are shown in Table 2, which considers the same as used in Mei and Stefa (2009).


Table 2. SWIM configuration parameters.

Parameter	Value	Description
Peers	10 to 100	The number of peers to be simulated.
CellDistanceWeight	0.8	The probability a peer chooses, as its next destination, a place either near to its own home (value closer to 1) or a popular place (value closer to 0).
WaitingTimeExponent	1.35	The power-law exponent of the waiting time distribution.
WaitingTimeUpperBound	10s	The maximum time interval a peer stays in a certain place before moving again.
PeerSpeedMultiplier	1	The multiplier factor added to the peer speed in order to accelerate it.
In the case of Bonnmotion (Aschenbruck et al., 2010), we have the Pursue Mobility Model (Camp et al., 2002), where peers attempt to chase a certain target peer. In the generator, the target peer is created in some random place at the initialization process. Although each of the peers has independent movements, chasing a certain peer leads to a group behavior. In a MANET, this scenario may correspond to a person transmitting a video while moving within a certain limited area, such as a university campus or a museum. For instance, in the latter, a guide can explain to a group of tourists details of a specific artist's paint while sending them a video that shows other paints of this same artist. The parameter values used to configure the generator are shown in Table 3, which considers the same as used in Alla (2017).


Table 3. BonnMotion/Pursue configuration parameters.

Parameter	Value	Description
Peers	10 to 100	The number of peers to be simulated.
MinSpeed	0.0	The minimum speed of the peer in m/s.
MaxSpeed	2.0	The maximum speed of the peer in m/s.
Aggressiveness	0.6	How aggressive the peers are to follow the target peer. The closer to 1.0, the more aggressive the followers are.
Randomness Magnitude	0.2	The length of the location vector that is updated at each movement.
The main difference between the SWIM and Pursue models is that, in the latter, the peers are more concentrated, leading to a more stable communication. Additionally, in the SWIM model, we may sometimes have small silos, i.e., groups of peers that cannot communicate with each other because they are beyond each other's radio range.

Regarding the client interactivity, we adopt a behavior model inspired by the works of Abram-Profeta and Shin (1998); Rodrigues (2014). The interactivity actions may be of the following types: Play, Pause, Jump Forwards (JF), and Jump Backwards (JB). The action Play means that the peer is watching the video. The action Pause indicates that the playback is paused. The actions JF and JB stand for a jump to a playing point after and before the current one, respectively.

Additionally, the actions Play, Pause, JF, and JB are triggered according to a Poisson distribution with rate λ, and with probabilities pplay, ppause, pjf, and pjb, respectively. The actions Play, Pause, JF, and JB have each a same length L. The value L is computed as a percentage of the video-file size, denoted by fsize. Two client interactivity profiles are considered: Low Interactivity (LI) and High Interactivity (HI). Table 4 lists the values of these configuration parameters, which are the same as used in Rodrigues (2014).


Table 4. Interactivity profiles.

Parameter	Low (LI)	High (HI)
λ	0.005/s	0.025/s
L	14.5% of fsize	1.5% of fsize
pplay; ppause	0.89; 0.01	0.55; 0.15
pjf; pjb	0.05; 0.05	0.15; 0.15
fsize	99.84 MB	99.84 MB
6.2. Simulation and metrics
The experiments are implemented in the PeerSim (Montresor and Jelasity, 2009) environment. The computer platform is an Intel Core i7 (2.6 GHz), 24 GB of RAM, running a GNU/Linux operating system. The simulation results have 95% confidence intervals that are within 5% of the reported values, for a total of 15 runs. For objectivity and brevity, only the most important results are herein presented.

At the network layer, we deploy the AODV protocol implementation of the WiFi Direct simulator (Baresi et al., 2016). For the 802.11 MAC and physical layer, we assume that the effect of both can be summarized by the packet drop rate and its transfer delay. To obtain these values, the simulator first uses the Friis's path loss formula to compute the signal strength between two peers. If the strength is greater than 0.5, there is no packet loss; otherwise, the packet is dropped with a probability calculated from the distance between them. The packet transfer delay is calculated by adding a delay given by the packet loss retransmissions.

The file to be distributed by video-on-demand streaming is a video encoded at 300 kbps. It is divided into 390 pieces of 256 kB each, and each piece is divided into blocks of 16 kB each. Thereby, the video has an approximate total size of 100 MB. Even though a block is the data unit sent on the physical network, our analysis only considers the transmitted pieces. The simulation ends when all nodes receive the whole file.

The experiments assess the two following performance metrics: download rate (DR), which estimates the node's average rate to receive the video; and discontinuity time (DT), which estimates the node's total average interruption time during the video playback. The joint analysis of these two metrics allows us to infer about the system QoS and the client QoE.

For the sake of quality judgment, we assume DR must be at a minimum of 300 kbps for a satisfactory QoS (Wang et al., 2008). This value has shown to be largely used as the encoding rate for Internet video clips. For DT, we assume it to be at a maximum of 600s for a satisfactory QoE. This means that the total interruption time is at most 25% of the total transfer time, being within the upper limit taken in other past literature works or may be effectively mitigated by appropriate techniques when not tolerable (Rodrigues, 2014; Xhafa et al., 2016; Barolli et al., 2020).

6.3. Results and analysis
For ease of understanding, this subsection is further divided into four subsections as follows. 6.3.1 Tuning parameter, 6.3.2 Tuning parameters discuss the tuning of IB-A and IB-N. The goal is to determine near-ideal values for the parameters δt, v, and w. By near-ideal value, we mean a value that achieves a suitable trade-off between DR and DT metrics in the scenarios to be evaluated. Subsection 6.3.3 shows how IB-A and IB-N behave in a noisy channel. At last, Subsection 6.3.4 carries out a competitive analysis between the IB-A, IB-N, NIBA and DSSSA.

6.3.1. Tuning parameter δt
Parameter δt is mostly affected by node's mobility and hence is herein assumed to be independent of other related parameters (e.g., number of data slots, buffer size, processing capacity, etc.). To determine a near-ideal value, we vary it within the time interval from 10s to 320s, and assume the other parameters' values given in Table 5 as baseline assessments. The corresponding rationales for these values are informed in the same table and have been mostly inspired by experiments and discussions within past literature works (e.g., (Cohen, 1103; Sbai and Barakat, 2009; Salhi et al., 2009; Rodrigues, 2014; Rethfeldt et al., 2018)).


Table 5. Baseline estimates.

Parameter	Value	Rationale
δt	10s–320s	The value 10s is taken as the lower limit since it is the default value in the original BitTorrent. In turn, the value 320s is taken as the upper limit since mobile-node groups' lifetimes may be longer than those eventually observed in wired networks.
v	30 pieces	The value 30 implies 8.0% of the total file size (Subsection 6.2). This is assumed to provide a reasonable trade-off between playout continuity and piece diversity. The analysis of v is left for Subsection 6.3.2.
w	390 pieces	The value 390 means the total file size. This is to provide the maximum possible flexibility to assure piece diversity. The analysis of w is left for Subsection 6.3.2.
n	50 peers	The value 50 is assumed to represent the typical size of an ordinary network topology. Other different values of n are considered later in Subsection 6.3.4.
y	3 slots	The value 3 expresses the usual higher prioritization given to high-capacity peers with respect to low-capacity peers, since the total number of data slots adds up to the value 4. In this case, the value of x is set to 1, as in the BitTorrent protocol (Cohen, 2003).
x	1 slot	See previous line.
k	40 peers	The value 40 is set to relax to some extent the selection of peers in Step 4 of the new algorithms (i.e., IB-A and IB-N), giving more weight to indirect reciprocity than to upload rate.
h	2 hops	The value 2 comes from empirical observations that the best candidates to receive the pieces a peer owns are seldom connected to it by more-than-2-hop routes (Salhi et al., 2009; Sbai and Barakat, 2009).
The Pursue model is the first to be examined. Fig. 2(a) and (b) show the DR provided by IB-N and IB-A, respectively, in function of δt. For instance, δt should be 240s in the case of IB-N for both LI and HI profiles. In turn, Fig. 2(c) and (d) depict a similar analysis of the DT metric. For instance, δt should then be 200s in the case of IB-N for both HI and LI profiles. For ease of comparison, Table 6 consolidates all values observed for δt in the experiments.

Fig. 2
Download : Download high-res image (837KB)
Download : Download full-size image
Fig. 2. DR and DT for variation of δt, under the Pursue model.


Table 6. Determination of δt.

Algorithm	IB-N	IB-A	–
Mobility	Parameter	LI	HI	LI	HI	Target Metric
Pursue	δt (s)	280	240	240	240	max. DR
Pursue	δt (s)	200	200	240	200	min. DT
SWIM	δt (s)	280	280	200	240	max. DR
SWIM	δt (s)	200	200	280	200	min. DT
The SWIM model is the second to be examined. Fig. 3(a) and (b) bring the DR metric. For instance, δt should be 280s in the case of IB-N for both HI and LI profiles. Fig. 3(c) and (d) introduce the results of the DT metric. For instance, the value of δt becomes 200s in the case of IB-N for both HI and LI profiles. As before, for ease of comparison, one may see in Table 6 all values that are observed.

Fig. 3
Download : Download high-res image (821KB)
Download : Download full-size image
Fig. 3. DR and DT for variation of δt, under the SWIM model.

We may therefore see that the values of δt varies according to the scenario. In general, it is ≈ 20 to 28 times larger than the default value of 10s related to the original BitTorrent. These results lead to the following observation. There may be unstable connections due to possible low-power signals and electromagnetic noise, producing communication failures. This instability though does not imply that neighbors must be changed during unchokings. In fact, the peers chosen to form a group (i.e., a neighbor set) remain as the best candidates for a quite reasonable time. This way, subsequent unchokings within short time intervals do not yield any benefit.

To determine a single near-ideal value for δt from the values just observed, we assume the following simple approach. The maximum value is not a good candidate given that we may not precisely determine the lifetime of the nodes forming the neighbor set. So, we opt to be conservative and choose the minimum observed value, i.e., we henceforth assume δt = 200s for both IB-A and IB-N in all scenarios to follow. Note that setting δt = 200s in general leads to DR ≥ 300 kbps and DT ≤ 600 s for IB-N and IB-A (LI and HI profiles), implying a satisfactory system QoS and client QoE, as previously discussed.

6.3.2. Tuning parameters v and w
This section analyzes the sizes of the buffer V and the sliding window W considering the value of δt derived in the last section. To this end, we vary v within the interval from 15 to 90 pieces, which stands for ≈3%–23% of fsize (see Table 4 for reference). Besides, we vary w within the interval from 30 to 390 pieces, which stands for ≈6%–100% of fsize. These intervals are assumed to be wide enough to appropriately compute the near-ideal values for both v and w. Still, we consider the other parameter values given in Table 5.

For the case of IB-A, we have the following. Fig. 6 assesses the DR metric, whereas Fig. 7 considers the DT metric. For instance, under the SWIM model, the minimum DT is obtained in tuple (v = 90, w = 150) for the LI profile, and in tuple (v = 60, w = 120) for the HI profile. For ease of comparison, Table 7 consolidates the observed values.

Fig. 6
Download : Download high-res image (869KB)
Download : Download full-size image
Fig. 6. Analysis of the DR metric in IB-A, varying v and w.

Fig. 7
Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 7. Analysis of the DT metric in IB-A, varying v and w.


Table 7. Determination of parameters v and w.

Algorithm	IB-N	IB-A	–
Profile	LI	HI	LI	HI	–
Parameters	v	w	v	w	v	w	v	w	Metric
Pursue	30	90	15	45	15	75	60	180	max. DR
SWIM	90	150	90	120	60	150	60	180	max. DR
Pursue	90	150	15	105	60	150	60	150	min. DT
SWIM	30	150	90	150	90	150	60	120	min. DT
Determining a single near-ideal tuple (v, w) in practice turns out to be an intricate task, since it varies according to the circumstances. Being aware of this, we first assume v expressed as a percentage of w, and w as a percentage of fsize. We then compute dispersion measures regarding the ratios (v/w) and (w/fsize). These results are in Table 8, which is discussed in the following.


Table 8. Ratios (v/w) and (w/fsize), for fsize = 390.

Algorithm	Ratio	Max	Min	Average	Standard Deviation
IB-N	v/w	0.75	0.14	0.44	0.22
IB-N	w/fsize	0.38	0.12	0.31	0.10
IB-A	v/w	0.60	0.20	0.40	0.12
IB-A	w/fsize	0.46	0.19	0.37	0.09
For IB-N, we see that the ratio (v/w) has a significant standard deviation, which precludes the simple usage of the average, median, or mode values. We then choose the maximum value (i.e., ≈0.75) to prioritize playout continuity. Recall that the larger v is, the more pieces are sequentially retrieved. For the ratio (w/fsize), which has a small standard deviation, the average (i.e., ≈0.31) may be therefore assumed as a reasonable estimate.

The following general formulation may be thus considered to compute near-ideal estimates for w and v in cases where IB-N is deployed: w = 0.31 × fsize and v = 0.75 × w. Consequently, we assume the tuple (v = 90; w = 120) for IB-N (LI and HI profiles). See that setting the tuple (v = 90; w = 120) for IB-N leads to DR ≥ 300 kbps and DT ≤ 600 s.

For IB-A, the ratio (v/w) has a non-negligible standard deviation, what precludes the simple choice of the average, median, or mode values. In this case, we compute the average between the minimum and maximum values (i.e., ≈0.4), since the non-negligible standard deviation is not sufficiently large to make us think of the extremes (i.e., minimum and maximum values). Conversely, the ratio (w/fsize) has a negligible standard deviation. In this case, the simple average (i.e., ≈0.37) may be therefore assumed as a reasonable estimate.

Consequently, the following general formulation may be assumed to compute near-ideal estimates for w and v when IB-A is deployed: w = 0.37 × fsize and v = 0.4 × w. Thereby, we assume the tuple (v = 60; w = 150) for IB-A (LI and HI profiles) in the experiments to come. Note that setting the tuple (v = 60; w = 150) for IB-A in general yields DR ≥ 300 kbps and DT ≤ 600 s.

6.3.3. Behavior in a noisy channel
The packet dropping we have considered in the experiments of 6.3.1 Tuning parameter, 6.3.2 Tuning parameters occurs exclusively in function of the distance between two peers which are endpoints (see Subsection 6.2). Nevertheless, noise interference may corrupt the packets being delivered, thereby contributing to the total packet dropping in the network too.

Being aware of this fact, this section therefore aims at assessing the additional performance degradation due to a noisy channel, what results in a more realistic channel modeling. To this end, we now additionally consider the following packet-drop percentage interval: from 0% (i.e., a noise-free channel) to 10% (a maximum-noise channel), likewise assumed in other literature works (e.g., (Adebomi and Mwela, 2010; Khan et al., 2017)).

Fig. 8(a) and (c) focus on the SWIM mobility model. As expected, we have a lower DO and a longer TD as more packets are dropped. Nevertheless, the QoS and QoE are still adequate in the worst case (i.e., 10%) for IB-N. On the other hand, in the case of IB-A, the QoS and QoE are already compromised beyond a packet-drop percentage of just 3%. The superior performance of IB-N with respect to IB-A is because the routes between endpoints are usually shorter in IB-N. This is further detailed in Section 6.3.4.

Fig. 8
Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 8. Analysis of IB-N and IB-A, varying a packet drop percentage.

Fig. 8(b) and (d) refer to the Pursue mobility model. Comparing to the SWIM model, we now notice a slightly better performance of both IB-N and IB-A. This is mainly noted in the case of IB-A. For example, IB-A achieves the same QoS as under the SWIM model even with a percentage surplus of 1% (LI profile) and 2% (HI profile). This overall better performance under the Pursue model is because the peers are more concentrated than under the SWIM model. This is further detailed in Section 6.3.4.

In summary, both IB-A and IB-N may be adequately used in scenarios with a noisy channel given that certain limits are observed for a maximum packet-drop percentage due to noise, namely: IB-A (up to 3%) and IB-N (up to 10%).

6.3.4. Competitive analysis
The experiments to follow competitively analyze the IB-A, IB-N, EISP (Rodrigues, 2014), NIBA (Rodrigues and Rocha, 2019) and DSSSA (Hu et al., 2017) proposals. We choose EISP and NIBA because they are among the most recent and efficient BitTorrent's adaptations targeted at interactive streaming over wired networks and MANETs, respectively. DSSSA is chosen because of being the unique non-BitTorrent-based proposal focused on interactive streaming over MANETs, as already discussed in Section 3.

The pivotal goal of this section is to highlight the comparative efficiency of IB-A and IB-N with respect to the aforementioned literature works. The examined scenarios consist of networks categorized by n: small-sized network (n = 25); medium-sized networks (50 ≤ n ≤ 75); and large-sized networks (n = 100). The larger n is, the closer the peers tend to stay from each other, since the physical area where peers move around remains limited to 100 m2.

In Fig. 9(a) and (b), we present the results for the DR metric under the Pursue model. For instance, we may see that IB-N performs the best in all scenarios, regardless the size of the network and the interactivity profile. In turn, Fig. 9(c) and (d) evaluate the DT metric under the same Pursue model. For instance, we may see that IB-N again turns out to be the best alternative in the experiments.

Fig. 9
Download : Download high-res image (1014KB)
Download : Download full-size image
Fig. 9. Scalability analysis under the Pursue model.

Using the results depicted in the figures mentioned above, we then build up Table 9 to ease the analysis and have an overall picture. We may chiefly conclude that the proposals deploying the hop count criterion (i.e., IB-N and NIBA) are the most competitive, being in general the first and second best choices, respectively.


Table 9. Competitive analysis under the Pursue model.

Profile	LI	HI
Metric	DR	DT	DR	DT
Size	n = 25	n > 25	n = 25	n > 25	n = 25	n > 25	n = 25	n > 25
1st	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N
2nd	DSSSA	NIBA	DSSSA	NIBA	NIBA	NIBA	NIBA	NIBA
3rd	NIBA	IB-A	NIBA	IB-A	IB-A	IB-A	IB-A	IB-A
4th	IB-A	EISP	IB-A	EISP	DSSSA	EISP	DSSSA	EISP
5th	EISP	DSSSA	EISP	DSSSA	EISP	DSSSA	EISP	DSSSA
The only exception in the above is for small-sized networks, where DSSSA appears as the second-best choice for the LI profile. Comparing to medium and large-sized networks, small-sized networks are likely to present less interfering transmissions and medium contention due to the smaller number of peers communicating over a same physical area (i.e., smaller n). This results in more stable and lower-delay data-piece deliveries. This way, selecting routes according to the minimal total medium time (Hu, 2011) in small-sized networks turns out to be a very effective criterion for peer-selection, which is considered in DSSSA.

Notwithstanding, as the network becomes larger, the routes tend to have a similar total medium time and, consequently, this criterion becomes less pivotal. In this case, limiting the number of hops between two endpoints (i.e., hop count criterion), in addition to allowing peers to locally store the data pieces they forward, becomes more effective for overall performance, which is considered in IB-N and NIBA.

Consider now the scenarios under the SWIM model. For the DR metric, Fig. 10(a) and (b) show that the overall behavior is similar to that already observed under the Pursue model, but presenting smaller absolute values. This happens because, under the SWIM model, peers are less concentrated (i.e., peers are more distant from each other) than under the Pursue model, thereby more likely generating unstable communications and, consequently, deteriorating piece retrieval.

Fig. 10
Download : Download high-res image (982KB)
Download : Download full-size image
Fig. 10. Scalability analysis under the SWIM model.

Moreover, in Fig. 10(c) and (d), we plot the results obtained for the DT metric. See that the values are worse for the HI profile when considering the BitTorrent-like alternatives. Interestingly, the values provided by BitTorrent-like alternatives vary little as the network size increases (i.e., the number of peers increases). The rationale for this is explained next.

Without loss of generality, assume that piece dissemination occurs in synchronized rounds. Besides, it takes one round for a peer to completely download a piece it does not own yet. Then, let d be a piece owned exclusively by the seed. Regardless the network size (in number of peers), among all peers needing piece d at the start of a round, just four of them may download piece d from the seed, since it (like any other peer) has only four logical data-upload slots. This way, at the ith-round, 4i peers may download piece d. This means that piece dissemination increases exponentially (limited to the total number of peers in the network), and this is why the DT metric is not significantly impacted as the network grows.

Now, we use the results plotted in the previous figures to build up a table in order to ease the analysis (see Table 10). Hence, we chiefly note that IB-N, NIBA, and IB-A are in general the most competitive, being the first, second, and third best choices, respectively. The only exception is again for small-sized networks, where DSSSA may be judged as the second best, according to the DT metric. The rationale for this is the same as explained in the Pursue model.


Table 10. Competitive analysis under the SWIM model.

Profile	LI	HI
Metric	DR	DT	DR	DT
Size	n = 25	n > 25	n = 25	n > 25	n = 25	n > 25	n = 25	n > 25
1st	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N	IB-N
2nd	NIBA	NIBA	DSSSA	NIBA	NIBA	NIBA	DSSSA	NIBA
3rd	IB-A	IB-A	NIBA	IB-A	IB-A	IB-A	NIBA	IB-A
4th	DSSSA	EISP	IB-A	EISP	DSSSA	EISP	IB-A	EISP
5th	EISP	DSSSA	EISP	DSSSA	EISP	DSSSA	EISP	DSSSA
For a quantitative evaluation, we introduce Table 11, Table 12. Using the results depicted in the previous figures, we therein compute the maximum and minimum optimizations, i.e., gains at DR and reductions at DT, reached by IB-N and IB-A with respect to DSSSA, EISP, and NIBA. From this, we may especially note what follows.


Table 11. Optimizations achieved by IB-N.

–	To DSSSA	To EISP	To NIBA
Mob./Metric	Min	Max	Min	Max	Min	Max
Pursue/DR	2%	43%	17%	24%	3%	8%
Pursue/DT	3%	69%	50%	67%	12%	35%
SWIM/DR	14%	37%	16%	29%	5%	11%
SWIM/DT	6%	75%	40%	61%	10%	34%

Table 12. Optimizations achieved by IB-A.

–	To DSSSA	To EISP	To NIBA
Mob./Metric	Min	Max	Min	Max	Min	Max
Pursue/DR	−16%	32%	1%	5%	−8%	−16%
Pursue/DT	−71%	51%	3%	35%	−24%	−60%
SWIM/DR	2%	18%	1%	6%	−6%	−23%
SWIM/DT	−32%	49%	1%	28%	−17%	−34%
Comparing to DSSSA, the proposals IB-N and IB-A provide gains of up to 37%–43% and 18%–32%, respectively, at DR, and reductions of up to 69%–75% and 49%–51%, respectively, at DT. The negative values refer to when DSSSA outperforms IB-A in small-sized networks. The rationale for this lies in the significant benefit due to selecting peers according to the minimal total medium time (Hu, 2011), as previously explained.

Comparing to EISP, the proposals IB-N and IB-A reach gains of up to 24%–29% and 5%–6%, respectively, at DR, and reductions of up to 61%–67% and 28%–35%, at DT. The results broadly demonstrate the superiority of our proposals. The rationale for this better performance mainly lies in the fact that both IB-A and IB-N deploy the indirect reciprocity criterion and intermediate peers store the forwarded pieces. Additionally, IB-N is aware of the underlying physical topology.

Comparing to NIBA, the IB-N proposal reaches gains of up to 8%–11% at DR, and reductions of up to 34%–35%, at DT. The gains at DT are mostly related to the usage of the indirect reciprocity criterion. Nevertheless, IB-A does not beat NIBA, as denoted by the negative values. This is due to the fact that IB-A is unaware of the underlying physical topology, what may result in longer routes between endpoints and, consequently, decrease the piece-delivery rate.

Comparing the IB-N and IB-A proposals, we see that the former is superior. This reinforces how important it is to be topology-aware when deciding about neighbors and file pieces to be requested. On the other hand, the results also reveal that IB-A is reasonably competitive, and may be a choice in cases where the cross-layer paradigm becomes prohibited due to implementation complexity.

Now considering specifically the mobility models, we have that peers are more concentrated under Pursue than under SWIM, as already mentioned. This leads to more stable communication in the case of Pursue, since no silos are formed. We may thus observe a better overall performance (i.e., higher DO and shorter DT) under Pursue. On the other hand, when the total number of network peers increases (i.e., above a certain peer-density threshold), the system performance then deteriorates. This is due to the fact that, as more peers exchange messages, more collisions are produced. These collisions, when detected, cause peers to discard packets, hence negatively impacting system throughput.

Finally, judging from the all results we obtained in the experiments, we may conclude that IB-N and IB-A are indeed efficient, scenario-adaptable, and scalable, since they broadly provide satisfactory QoS (i.e., DR ≥ 300 kpbs) and QoE (i.e., DT ≤ 25% of the total reproduction time) in MANETs of different sizes, under two different mobility models and two interactivity profiles.

7. Conclusions and ongoing work
This paper presented two BitTorrent-based adaptations to perform interactive multimedia on-demand streaming over MANETs, namely Interactive BitTorrent - Application (IB-A) and Interactive BitTorrent - Network (IB-N) algorithms. The former is based on the layered-architecture approach. Its operation mainly enhances the original BitTorrent because of deploying a sliding window to allow file streaming besides making use of indirect reciprocity. In turn, the latter mostly explores the cross-layer paradigm by enabling direct communication between application and network layers.

Through simulations on a variety of scenarios, we compared the IB-A and IB-N algorithms against the recent DSSSA (Hu et al., 2017), NIBA (Rodrigues and Rocha, 2019), and EISP (Rodrigues, 2014) proposals. Assessing two different performance metrics in scenarios with mobile clients performing VCR-like actions during file reproduction, we were able to confirm the overall attractive efficiency of our proposals. In particular, a file encoding rate of 300kbps was guaranteed in all scenarios, and the reproduction discontinuity was kept less than 25% of the total reproduction time, thereby leading to suitable system QoS and client QoE, respectively.

As an extension of this work, we especially plan to include modifications to our IB-N proposal by exploring below-network layers as well. The rationale for this mainly lies in the fact that wireless communication performance is indeed affected by link quality and medium utilization, in addition to physical-network topology. Finally, we also plan to complement this analysis with analytical modeling and real measurements.

