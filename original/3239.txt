In this study, we consider the Internet of Things (IoT) with an autonomous deployment framework and seek optimal localizable k-coverage (OLKC) strategies to preserve the connectivity and robustness in IoT networks to assist robots during disaster recovery activities. Therefore, we define localizable k-coverage as the covered region within which a mobile robot can localize itself aided by k neighboring beacon nodes (BNs) in a wireless sensor network (WSN). To this end, we first propose the optimal localizable k-coverage WSN deployment problem (OLKWDP) and present a novel framework that preserves WSN connectivity and robustness for mobile robots. To localize a mobile robot with at least k BNs and overcome the network hole problem that can occur in unknown hostile environments, we propose a hole recovery method for the OLKC achieved by a mobile robot that knows the concurrent mapping, deployment and localization of the WSN. We then present a mapping-to-image transformation method to reveal the interactions between the WSN deployment and the network holes for the OLKC while constructing the online mapping. To solve the OLKWDP, we also develop two optimality conditions to achieve maximum coverage by the proposed OLKC in the unknown hostile environment using the minimum number of sensors. Moreover, we analyze the factors that influence the probability of success of the OLKC and the factors that influence the performance of a mobile robot when determining the WSN deployment. The simulation results illustrate that our framework outperforms the trilateration and spanning tree (TST) method in unknown hostile environment exploration and can achieve the OLKC in a WSN. In 27 simulated situations, our framework achieved average rates of nearly 100% 1-coverage, 91.34% 2-coverage and 89.00% 3-coverage.

Previous
Keywords
Unknown hostile environment

Optimal localizable k-coverage network

Path planning

Autonomous deployment

Wireless sensor networks

1. Introduction
Recent advances in smart sensors, ad hoc wireless networks and low-cost network deployment have focused research attention on the Internet of Things (IoT), as IoT technology enables the internet to interconnect of all things (Zhao et al., 2019; Carlino et al., 2019; Xu et al., 2019; Shen et al., 2018; Elappila et al., 2020). Typical IoT applications include intelligent monitoring, intelligent manufacturing, and smart cities; such applications can protect society, enhance human abilities, and greatly enrich our lives (Reka and Dragicevic, 2018; Almusaylim and Zaman, 2019; Yang et al., 2020). A particularly challenging application of IoT is establishing IoT networks autonomously in an unknown hostile environment using a mobile robot to gather data, monitor the area and communicate among smart object. The primary concerns in such an application include the ability to localize mobile robots, perform online path planning and autonomously deploy sensor nodes in unknown hostile environments, which can confuse and obstruct the mobile robot through lack of perception, overwhelmed computing ability, network communication holes and obstacles (Yang et al., 2018; Feng et al., 2017; Sun et al., 2017; Deshpande et al., 2016). To address this issue, we present an autonomous deployment framework that employs a mobile robot and offers a satisfactory solution (Feng et al., 2017).

Wireless sensor networks (WSNs) are highly effective at achieving situation awareness in disaster relief contexts, but sensors are typically deployed in fixed positions; conversely, mobile robots are particularly valuable for actively intervening in disaster relief applications (Yadav and Yadav, 2016; Champion et al., 2012; Gumaida and Luo, 2018; Dash, 2018). With a smart sensor deployment system using mobile robots, a rescue team can be directed to handle rescue operations. Given their widespread applications in both civilian and military environments, some researchers have intentionally used mobile sensors to achieve maximum field coverage through sensor node deployment schemes (Mahboubi et al., 2016). Such methods adjust sensor ranges and direct movement within a corresponding region to increase the network's sensing coverage. However, to explore an unknown hostile environment, a mobile robot must localize itself dynamically while autonomously realizing online path planning and sensor nodes deployment in a WSN (Feng et al., 2017; González et al., 2016).

Natural disasters occur randomly and are unpredictable; therefore, autonomous mobile robots are useful for exploring unknown post-disaster areas unreachable by human beings (Qian et al., 2018; Singh and Khilar, 2015). The dynamic localization of mobile robots in WSNs provides a powerful solution to cumulative errors because the localization algorithm can calculate the real-time locations of mobile robots by received signal strength (RSSI) indicators and use the coordinates of BNs instead of relying on inertial navigation (e.g., odometer or gyroscope) (Feng et al., 2014). An efficient dynamic localization framework has been presented for mobile robots based on WSN deployment, namely, the shadow-edge localization approach with collinear avoidance (SELAc) (Feng et al., 2017). A main strength of that work is that the SELAc algorithm can localize mobile robots at the limits of the sensing range, while traditional trilateration approaches may fail.

In the literature, optimal path planning for autonomous mobile robots is a popular topic (Wang et al., 2018; Azpúrua et al., 2018); the best-known solutions include hexagon (Han et al., 2017a), spanning tree methods (Arezoumand et al., 2016), trilateration (Han et al., 2017b) and curve trajectory (Macwan et al., 2015) solutions. In particular, trilateration approaches can guarantee high localization accuracy, and the spanning tree approaches are highly effective at avoiding obstacles. In general, the structure of indoor environments is irregular, with obstacles such as buildings and underground pipes. Therefore, we propose a novel framework that provides high localization accuracy and effective obstacle avoidance by taking advantage of both the trilateration and spanning tree approaches.

Deterministic or random deployments are effective and optimal in known and friendly environments (Han et al., 2017a, 2017b; Kulkarni et al., 2017). However, they cannot guarantee effective network coverage and connectivity in unknown, hostile or inhospitable environments. Thus, path planning using TST trajectories as described in (Feng et al., (2017)) to guide mobile robots to explore unknown hostile indoor environments by taking advantage of high localization accuracy and obstacle avoidance is highly beneficial for ensuring optimal network coverage and connectivity in any unknown environment. In this paper, we first propose the definition of localizable k-coverage. Then, we extend (Feng et al., 2017) and present a novel framework to seek optimal localizable k-coverage (OLKC) strategies that preserve connectivity and robustness in IoT networks and assist robots during disaster recovery activities. Our proposed OLKC can improve network coverage and connectivity, making it suitable for localizing a mobile robot during disaster recovery activities. During the mission, the main challenge is to localize the mobile robot while establishing the WSN. The robot needs to explore an unknown hostile environment and localize itself while synchronously conducting online mapping and path planning. Thus, it is essential to establish the proposed OLKC to guarantee the performance of the localization algorithm. Moreover, the robot carries a set of nodes and can deploy them as beacon nodes (BNs) while exploring the unknown hostile environment. The objective is to achieve maximum coverage of our proposed OLKC in the unknown hostile environment while using the minimum number of sensors to help the mobile robot (and any additional players, including other robots, first responders, etc.) during disaster recovery activities.

To solve the OLKWDP and localize a mobile robot with the help of at least k BNs, we extend (Feng et al., 2017) and propose a novel framework named the Extended Trilateration and Spanning Tree (ETST) to establish the OLKC to preserve the connectivity and robustness of a mobile robot. ETST is a novel framework for concurrently exploring unknown hostile post disaster areas and localizing a mobile robot in the OLKC. Overall, the main contributions of this work can be summarized as the following primary and secondary contributions.

Primary contributions:

We first propose the optimal localizable k-coverage WSN deployment problem (OLKWDP) and present a novel framework, ETST, to preserve connectivity and robustness of a mobile robot in a WSN. To localize a mobile robot with at least k BNs and preserve the connectivity and robustness in WSN and overcome the network hole problem, we propose a hole recovery method for the optimal localizable k-coverage (OLKC) achieved by a mobile robot that knows the concurrent mapping, deployment and localization of the WSN. It is essential to construct our proposed OLKC to guarantee the localization algorithm performance for a mobile robot.

Secondary contributions:

1.
To precisely localize the network holes of the OLKC, we present a mapping-to-image transformation method to disclose interactions between the autonomous WSN deployment and network holes. This method transforms the online mapping construction problem into an image processing problem. Then, the network hole localization problem becomes a threshold region localization problem in a grayscale image. Subsequently, we can apply the efficient and convenient mathematical tools of image processing.

2.
To solve the OLKWDP, we also develop two optimality conditions to achieve maximum coverage by our proposed OLKC in an unknown hostile environment using the minimum number of sensors. Moreover, we show that when the BNs are deployed individually at the maximum distance based on the SELAc localization algorithm, then the total number of wireless nodes in the established WSN is the optimal solution to the OLKWDP.

The remainder of our paper is structured as follows. We briefly survey related works and our contribution, we also formally define our system model in Section 2. In Section 3, we define our optimization problem and present the fundamental mathematical tools for our later algorithm design. We propose our hole recovery method for the OLKC and analyze its performance in Section 4. We also interpret our mapping-to-image transformation method with respect to localizing the k-coverage holes. In Section 5, we report extensive simulation results confirming the efficacy of our proposed framework. Finally, Section 6 concludes our paper.

2. Related work and contribution
Path planning: Various approaches to path planning for unknown area exploration have been proposed (Chen et al., 2017; Khawaldah and Nuechter, 2015). Xue et al. (2018) focused on formulating the control strategy and minimizing energy consumption for hybrid underwater gliders to control their motions based on multibody theory through the adoption of artificial potential fields. A sea trial in the South China Sea proved the feasibility of their control strategy and motion optimization method. To find a collision-free path to guide an unmanned aerial vehicle, Liang et al. (2018) tackled the obstacle problem by considering the geometries in a complex environment. The authors showed that the shortest path can be found for different obstacle shapes based on geometrical computations. To localize unknown nodes in WSNs, Han et al. addressed the infeasibility of equipping each sensor node with a global positioning system (GPS) unit. The authors required mobile anchor nodes (MANs) to move among unknown nodes based on regular hexagons and localize nearby unknown nodes by their current locations. To improve the localization performance in heterogeneous WSNs, Han et al. (2017b) considered the movement trajectory problem of MANs as related to the localization performance of WSNs. The authors showed that path planning based on trilateration improves localization accuracy, especially when the anchor positions form an equilateral triangle. For wilderness search and rescue of survivors trapped underneath collapsed structures, Macwan et al. (2015) considered robust and real-time trajectory planning in uncertain environments and showed that the novel iso-probability curves for robot path planning are scalable to both greater robot team sizes and unbounded search spaces without compromising online feasibility. However, the abovementioned methods do not consider network connectivity instability in an unknown hostile environment, which affects the localization of the mobile robot using the RSSI information and poses a challenge to the path planning method.

Autonomous deployment: Autonomous WSN deployment is key to support an important role of wireless sensors (González-Parada et al., 2017). Regarding coverage and connectivity in WSNs, Arezoumand et al. (2016) considered network holes and redundant nodes under random deployment and time consumption under precise deployment. The authors used multiple robots acting as node carriers to explore the hazardous environment based on a spanning tree and then autonomously deployed sensor nodes with an obstacle avoidance mechanism. To maximize the coverage ratio and minimize the coverage holes after random deployment, Pournazari et al. (2017) focused on minimizing the needed rotations and movements of mobile nodes. The authors presented a distributed coverage optimization method for randomly deployed wireless multimedia sensor networks that outperformed the previous schemes in terms of coverage radio and energy efficiency. To perform autonomous deployment in unfavorable environments, Zhang et al. (2018) considered exploration costs and exploration abilities based on game theory. The authors showed that a multitype sensor target allocation method for autonomous sensor deployment can maintain WSN connectivity and achieve dynamic optimization deployment under complex conditions. For random deployment in a specified geographical location, Rout et al. (Rout and Roy, 2016) focused on the presence of obstacles and made decisions based on information acquired from a sensor node's neighbors. The authors presented an efficient autonomous deployment scheme for placing mobile sensor nodes over a square sensing field. Their approach enhanced the network coverage and ensured network connectivity despite the presence of obstacles. However, the above methods focus on the optimization strategy after random deployment and neglect how to achieve optimal deployment deterministically in an unknown hostile environment.

k-coverage network: One design challenge for mobile robot localization in WSN deployment is to guarantee that the mobile robot can be detected by multiple BNs while conserving limited energy resources in order to prolong the lifetime of the network, all without affecting node communication connectivity or sensing coverage. In a dense WSN, the larger the overlap of the sensing range, the greater the generation of redundant data, and the greater the energy consumption (Ramar and Shanmugasundaram, 2015; Tripathi et al., 2018). To fulfil both the coverage and connectivity requirements of WSNs, Ramar et al. (Ramar and Shanmugasundaram, 2015) considered connected dominating sets to implement energy-efficient topologically focused control. The authors used a weight metric that considers the energy of neighboring sensors in the k-coverage range, an approach that ensures that every nondominating node is related to the connected dominating set even if (k − 1) dominating nodes are dead. To meet the requirement that at least k sensor nodes must be monitoring any target, Elhoseny et al. (2018) focused on continuous monitoring of specified targets for the longest possible time under limited energy resources. The authors presented a new model that uses the genetic algorithm to optimize the coverage requirements in WSNs based on continuous and variable mobile sensors movement speeds to maintain all targets within the coverage range at all times. To address barrier coverage in WSNs, Weng et al. (2018) considered a competent intruder detection monitoring quality. The authors required the barrier to satisfy the k-barrier coverage and presented an efficient k-barrier construction mechanism based on adjacent network coverage. This mechanism is effective in terms of control overhead and number of barriers constructed. To ensure service quality in WSNs, Yu et al. (2017) focused on k-coverage, which requires the selection of a minimum subset of nodes among the deployed nodes. The authors presented both centralized and distributed protocols to tackle the k-coverage problem. These protocols can prolong network lifetime, which is crucial for WSNs. However, the k-coverage network established by the above methods cannot guarantee the ability to localize mobile robots and cannot guarantee that mobile robots can implement disaster relief tasks.

Motivation: Based on the previous literature in Table 1 the potential applications of autonomously co-deployed IoT sensors and devices include indoor localization, map construction andk-coverage network (Sardar et al., 2020; Chen et al., 2020). However, the physical limits of IoT devices severely restrict their mobility. Therefore, in order to satisfy the application requirements, a mobile robot must carry the sensor nodes and place them intentionally. Recent path planning technologies such as the TST trajectories in (Feng et al., (2017)) are the best candidates to provide optimal path planning for mobile IoT devices. As the TST algorithm cannot guarantee the ability of a mobile robot to localize itself in any place and suffers from the network hole problem, it cannot be utilized in many IoT system scenarios such as hospitals and underground mining areas. In addition, the localizable k-coverage strategy has become a prominent requirement to provide robust IoT networks to assist robots during disaster recovery activities. Therefore, a system that includes the benefits of both localizable k-coverage and network hole recovery technologies to establish an efficient and robust IoT network should be investigated.


Table 1. Application of localization and deployment algorithms in WSNs.

Ref	Loc	P·P	A.D	R.D	O.A	M.S	L.N	K·C	I.E	U.E
Ramalakshmi et al. (2015) (Ramar and Shanmugasundaram, 2015)							✓	✓		
Gabriele et al. (2015) (Oliva et al., 2015)	✓		✓	✓		✓				
Li et al. (2015) (Li et al., 2015)			✓	✓	✓	✓		✓		
Ashish et al. (2015) (Macwan et al., 2015)		✓	✓		✓	✓				
Hamid et al. (2016) (Mahboubi et al., 2016)			✓	✓		✓				
Reza et al. (2016) (Arezoumand et al., 2016)		✓	✓		✓	✓				
Mrutyunjay et al. (2016) (Rout and Roy, 2016)			✓	✓	✓	✓				
Han et al. (2017) (Han et al., 2017b)	✓	✓	✓			✓				
Feng et al. (2017) (Feng et al., 2017)	✓	✓	✓		✓	✓	✓		✓	✓
Santu et al. (2020) (Sardar et al., 2020)	✓								✓	
Chen et al. (2020) (Chen et al., 2020)	✓					✓	✓		✓	
Liu et al. (2020) (Liu et al., 2020)	✓						✓		✓	
Zhou et al. (2020) (Zhou et al., 2020)	✓						✓		✓	
Manan et al. (2020) (Jani et al., Gupta)	✓					✓	✓		✓	
Ref = Reference, Loc = Localization, P·P= Path Planning, A.D = Autonomous Deployment.

R.D = Random Deployment, O.A = Obstacle Avoidance, M.S= Mobile Sensor.

L.N = LOS/NLOS, K·C = k-coverage, I.E = Indoor Environment, U.E = Unknown Environment.

Furthermore, the literature review reveals that most research related to indoor WSN environments is based on known and friendly indoor environments only (Liu et al., 2020; Zhou et al., 2020; Jani et al., Gupta). In the scenario considered in the present study, the various parameters, such as the velocity and mobility of the robots, sensing range and connectivity of the nodes, and obstacles in the area, are random and not deterministic in nature. Therefore, a more suitable way to study these systems is to employ the OLKWDP, which influences the probability of success of the k-coverage and the performance of a mobile robot in the potential applications.

2.1. Background
In this subsection, we present the system model and define our optimization problem. To simplify the exposition, we consider an indoor environment surrounded by walls as obstacles, which are represented by line segments.

2.1.1. System model
We assume that the mobile robot is intended to explore an unknown hostile environment and deploy BNs to establish an ad hoc network in the region. In the initial stage, we know nothing about the environment, and no previous WSN exists in the region. Thus, in this task, a mobile robot carrying wireless sensor nodes needs to deploy the nodes individually to establish a WSN and then localize itself using the WSN in order to explore more distant and unknown areas. We assume that the established WSN, W, consists of a set of wireless sensor nodes W = {wi}, i = 1, …, N and that the total number of wireless sensor nodes in the established WSN is |W| = N. Let L = {li}, i = 1, …, N denote the locations of all the nodes in W. Each location li lies within the unknown hostile environment, U.

Our optimization problem involves determining the value of N. The objective is to minimize N while achieving a maximum localizable k-coverage network for U.

In the initial phase, to localize the mobile robot itself, we deploy three wireless sensor nodes (wi) at the predefined locations, li, i = 1, 2, 3 in U, as follows:(1) 
 where χ means that when we define the lower left vertex of U as the origin of the coordinate system, the spacing between wi, i = 1, 2, 3 and the x-axis and y-axis is χ because we can bound U by an external rectangular shape, although the shape of U is generally irregular. To simplify processing and improve the ranging accuracy, we use a unified r to represent the identical sensing and communication range of wireless sensor nodes, although the communication range of WSN nodes is typically larger than their sensing range because shorter measurement distances provide greater measurement accuracy. Due to the irregular shape of U, we cannot guarantee a predefined location for wi, i = 1, 2, 3. Thus, we employ the environmental noises 
 and 
 to describe the deviations caused by the irregular shape of U.

The nodes are initially carried by a mobile robot. The robot moves through region U and deploys the nodes intentionally and incrementally within the region. Each node is equipped with an omnidirectional range finder and a wireless communication mechanism. We assume that the ith wireless sensor node wi carried by a mobile robot can receive the location of its neighboring BNs and calculate the distances between those BNs and itself in real time. Therefore, each wi carried by a robot can localize itself by applying the SELAc localization algorithm; consequently, the location of wi can also be considered as the location of the robot. We define the neighboring BN set W(wi) of wi as follows (Yu et al., 2017):(2)
where ∥ li − lj ∥2 ≤ r means that the distance between wi and wj is less than the wireless transmission range r. The notation j ∈ [1, i − 1] means the robot has previously deployed (i − 1) nodes before wi and has successfully established an ad hoc network based on these nodes. In other words, wi can only communicate with the node set (i − 1) in the WSN.

In general, the sensing model of wi is omnidirectional, centered at li and with the radius r of a circle. The sensing range r is adjustable for different situations (Feng et al., 2017). We define node wi as covering point p in U if the Euclidean distance between p and li is less than r:(3)
 where we use f(p, li) to indicate whether node wi covers p. A 1 means that wi covers p, while a 0 indicates that wi does not cover p. To simplify the coverage computation for the entire U, the sampling points for p in U have 1-universal-unit spacing (i.e., for a 50 × 50 (universal unit)2 square area, the sampling points would be [0, 0], [0, 1], [1, 2], (Carlino et al., 2019) and so on).

2.1.2. Problem formulation
The nodes’ locations and sensing ranges determine a certain degree of network coverage by a WSN. Because our research work focuses on the concurrent deployment and localization of a WSN by means of a mobile robot, our objective is that regardless of where the robot moves, it should be able to detect at least two nodes to allow dynamic self-localization. This means that k ≥ 2 is a necessary condition for the OLKC. Furthermore, because the exact localizable area for a mobile robot is a small 3-Pl flower shape inside a k-coverage region (Feng et al., 2017), we need to add BNs to fill in the network holes to allow mobile robot localization anywhere in U.

Shadow-edge localization approach with collinear avoidance: In its original version, the shadow-edge localization approach (SELA) failed to handle collinear or almost collinear nodes(Oliva et al., 2015). However, we also note that when the node to be localized and two anchors are collinear, there is no need to determine a third anchor to achieve localization. As shown in Fig. 1(a) in (Feng et al., (2017)), let vh, vk be the anchors and let vi be the node to be localized. If node vi knows the positions pi1 and pi2 and the distances dhi and dki and additionally knows dhk, it can detect the fact that they are collinear in two cases:

●
when dhk = dhi + dki, the node can realize that it is collinear with the anchors and is positioned between them;

●
when dhi = dhk + dki, the node realizes that it is collinear with the anchors and is positioned distance dki from vk in the direction opposite to the position of vh (the reverse situation occurs when dhk = dhi + dki).

Fig. 1
Download : Download high-res image (531KB)
Download : Download full-size image
Fig. 1. Explanation of the SELA and SELAc approaches in (Feng et al., (2017)).

In the following, we refer to this method as SELAc, where the last c stands for collinear (Feng et al., 2017).

Fig. 1(b) in (Feng et al., (2017)) shows an example with three deployed anchors (cyan stars). Standard trilateration (TA) is able to localize nodes only in the blue zone; SELA can localize the nodes in the yellow and blue zones, and SELAc can localize nodes in the blue, yellow and magenta zones. Furthermore, the area that can be localized by the SELA algorithm is 65.49% larger than the area localized by the TA algorihtm. The SELAc algorithm extends the localizable area by an additional 23.36% compared with the TA algorithm.

Definition 1

A localizable k-coverage network for a mobile robot means that for ∀p ∈ U, a robot at position p carrying an unknown wireless sensor node wi can detect at least k neighboring BNs in W(wi) and obtain those BNs' locations and the distances between itself and the neighboring BNs, thus allowing the robot to be dynamically localized by the SELAc algorithm.

We define a localizable k-coverage network Ck as follows:(4)
(5)
(6)
(7)
where LOCSELAc denotes the dynamic localization of a mobile robot by the SELAc algorithm, 
 is a localizable point inside a k-coverage region, W(p) is the neighboring BN set of a point p ∈ U, and 
 is the distance between 
 and a neighboring BN lb ∈ W(p).

In previous works, many efforts have focused on WSN coverage and connectivity and on considering the limited energy resources (Eledlebi et al., 2018; Tsang et al., 2019; Wang et al., 2019) to enable the deployed sensors to ensure region of interest (ROI) monitoring and node interconnections. On this basis, we first propose the definition of localizable k-coverage. Then, our ETST framework provides an effective solution for exploring WSN deployment in an unknown hostile environment to ensure the deployment of the minimum number of BNs that can achieve the maximum OLKC. Moreover, our efforts focus on using a mobile robot to explore the unknown hostile environment and on deploying the BNs autonomously and intentionally rather than optimizing a random deployment in a friendly environment. To the best of our knowledge, this is the first paper to solve the OLKWDP in an unknown hostile environment in the IoT.

3. Problem setting
To achieve localizable k-coverage of U by the deployed wireless sensor nodes, we uniformly collect discrete points throughout region U with 1-universal-unit spacing as follows:(8) 
 where {pα,β} is the set of discrete points distributed evenly throughout U and X and Y are the maximum number of discrete points in the horizontal and vertical directions of U, respectively. The Euclidean distance between pa and pb is 1 universal unit, as long as pa and pb are the neighboring discrete points in U for pa, pb ∈{pα,β}. At least k deployed wireless sensor nodes can cover each discrete point. In other words, each node wi covers multiple discrete points, and we indicate this coverage relation by wi(pα,β):(9)
 We also denote 
 as the discrete points covered by wi:(10)

Our optimal localizable k-coverage WSN deployment problem (OLKWDP) can be formulated as follows:(11) 
 subject to(12)
(13)
and(14)
Each discrete point pα,β has 1-universal-unit spacing with its neighboring discrete point, which means that each discrete point pα,β represents a 1 (universal unit)2 square area. The total number X × Y of discrete points is approximately equal to the area of U. Literally, OLKWDP is intended to determine the wireless sensor node location set {li} and the covering relation set {wi(pα,β)}, such that U achieves a maximum OLKC and the total number N of the BNs in the established WSN is minimized.

4. Hole recovery method for optimal localizable k-coverage
Since we focus on mobile robot applications in U, the ith unknown wireless sensor node wi carried by a robot needs to be able to detect at least two BNs among the set of neighboring BNs W(wi) to localize itself. Therefore, we define the localizable k-coverage network as shown in (6). We also formulate the following proposition for any point li occupied by a mobile robot carrying an unknown node wi.

Proposition 1

A point li ∈ U occupied by a mobile robot is said to belong to a localizable k-coverage network if at least k neighboring BNs exist whose distances to li are less than r.

Proof

Assume that li belongs to a localizable k-coverage network but there were at most k − 1 neighboring BNs 
 such that ∥ lj − li ∥ ≤ r. Then, the point li would strictly belong to the (k − 1)-coverage network since 
 based on (4), which is a contradiction. Conversely, if at least k neighboring BNs exist 
 whose distances to li are less than r, we can find the set of li's k-nearest-neighbor BNs to satisfy a k-coverage network.

Based on the above proposition, assuming a mobile robot carrying the unknown node wi moving within U, we can redefine (4) for the localizable k-coverage network of wi as follows:(15)
where N is the optimization target in (11) and li is a localizable point based on (5), (6), (7).

4.1. Optimal conditions
To optimize our algorithm, we develop two optimality conditions for OLKWDP. First, for U, we show that if we deploy 
 at the maximum distance one by one based on the SELAc localization algorithm, then the number of Ns in W for the established WSN is the optimal solution to the OLKWDP.

Proposition 2

For U, if we place sensors at the locations 
 spaced at their maximum distances one by one based on the SELAc localization algorithm, the final number N of the wireless sensor nodes for the established WSN is the OLKC deployment of the WSN. Additionally, 
 will be satisfied for each deployed wireless sensor node wi, i = 4, …, N.

Proof

The proof is by contradiction. Suppose that for the deployed W, there exists an optimal solution to OLKWDP denoted by N∗, 
, and 
 
. Let 
 and ri = ∥ li−1 − li ∥2 when the robot places the unknown node wi after wi−1. Also assume that the optimal value is obtained for W, i.e., N∗ < N. If 
, then it is straightforward to see that N∗ = N. Otherwise, a contradiction of the definition of ri would exist: ri is the maximum distance between li−1 and li based on the SELAc localization algorithm, but we can find a new location for which 
, which is a contradiction. Therefore, in this case, the robot can find a new location to achieve a localizable k-coverage network. If 
, the robot can deploy the BN based on advance prior knowledge to cover the region with the minimum number of wireless sensor nodes. However, the robot cannot depend on prior knowledge to construct the trajectory in advance and avoid obstacles elegantly, forming another contradiction to the definition of U: the robot does not have advance prior knowledge; instead, it establishes the online map in real time.

The second optimality condition involves the structured environment. We consider U as surrounded by walls. Moreover, the walls are characterized as obstacles. We simulate the obstacle model as follows:(16)
which is the line equation for the walls in U, where i is the index of the ith indoor wall.

We consider a mobile robot initially placed at the boundary of U. The robot carries a set of wireless sensor nodes and can deploy them while moving within U. We assume that each sensor can exchange information with the robot and with any other sensors that fall within a given communication radius r if there is a direct line of sight (LOS) between them.

To filter out non-line-of-sight (NLOS) wireless communication, we employ the mathematical solution regarding the intersection point of two-line segments. First, we assume that the mobile robot's coordinate is li = (xr, yr) and the ath BN's coordinate is la = (xa, ya), where a is the index of the ath BN, li is the unknown node carried by the robot, and la is the location of the ath BN, a = 1, …, i − 1. Then, we can calculate the distance da between the mobile robot and the ath BN as follows:(17)
When da < r, the ath BN can detect the mobile robot and establish wireless communication with it. Furthermore, the line segment equation between the mobile robot and the ath BN is(18)

Second, let(19)
(20)
and(21)
Then, the general line equation between the mobile robot and the ath BN is(22)

Third, the intersection point (xi,a, yi,a) between the preceding two-line segment equations (16), (22) is(23) 
 Hence, the intersection point (xi,a, yi,a) is related to the line equation of the ith wall and to the wireless communication from the ath BN to the mobile robot. As long as the intersection point (xi,a, yi,a) belongs to the line segment of the ith wall, which is (xi,a, yi,a) ∈{obwi}, wi = 1, …, P, the robot will detect the P obstacles represented as obwi at the ith wall. (xi,a, yi,a) is one of these obstacles. It is possible that the ith wall can block wireless communication from the ath BN to the mobile robot. We classify this situation as the NLOS category. Although this approach is unable to classify all NLOS situations precisely, it works well for most cases and consistently helps increase the localization accuracy.

In general, the robot knows its position at each time instant based on the SELAc algorithm. Therefore, the mobile robot can also detect obstacles around itself. We can obtain the distance di between the mobile robot's location (xr, yr) and the ith wall according to (16) as follows:(24)
If di < gaphit and we let gaphit = 3 be a universal unit, then the mobile robot can encounters obstacles (walls) that may be horizontal or vertical. If the robot encounters a horizontal wall, it turns in the vertical direction. In total, there are four directions, i.e., right, up, left and down, for the mobile robot based on the path planning of the TST in (Feng et al., (2017)). Thus, the mobile robot can construct an online map that includes obstacles based on the detected obstacles. Our goal is to let the robot explore U and deploy sensors while guaranteeing that the sensors can localize themselves and offer localization services to third-party robots that may wish to navigate through U after the network has been deployed.

Using the robot's onboard sensors to detect and avoid obstacles is complicated because the robot cannot depend on prior knowledge to construct the trajectory in advance and avoid obstacles elegantly. Here, we try to achieve the OLKC, which is defined as the space covered by the circular regions covered by the communication radius r of the previously deployed BN. When using the minimum number of BNs and the 1-coverage network, defined as any location in the area covered by the circular region within the communication radius of a BN, any reduction in the OLKC increases the performance of our proposed algorithm. Thus, we present an online hole recovery algorithm to overcome network holes for the OLKC that mobile robots can use to localize themselves anywhere within U.

To find the optimal traveling trajectory of the mobile robot in U, two essential requirements must be considered. First, the mobile robot can explore the entire U and automatically deploy BNs intentionally at any location except the obstacles. Second, the mobile robot can receive a BN's messages from any BN in a circular region within the communication radius r of the robot. The distance between the mobile robot and BN is measured using the rangefinder technique. The geometric problem of determining the optimal position for the BNs is how to deploy the minimum number of BNs so that the entire U is covered by the circular regions within the communication radii of the BNs and any location within U is covered by at least two or three circles. Such a condition will allow the mobile robot to be localized by the SELAc algorithm as it moves within the U and can guarantee an OLKC with no holes for mobile robot engineering.

Even after the 1-coverage network has been nearly achieved in U by deploying sufficient BNs incrementally, it may still not be applicable for robot engineering because the SELAc algorithm requires at least two BNs to dynamically localize a mobile robot. This situation demands a reasonable localizable k-coverage network. Thus, to solve the problem of k-coverage holes (defined as the space covered by less than two BNs) in U, we propose a method named hole recovery by which the OLKC can recover k-coverage holes using a mobile robot. The hole recovery method can be described as (1) localizing the k-coverage holes based on the map in U, (2) building a pipeline between the robot and the nearest hole in the coarse cell phase and (3) constructing an online spanning tree edge toward the hole in the fine cell phase.

4.2. Mapping-to-image transformation method
Before presenting the k-coverage hole localization method, we provide the following definition based on (4).

Definition 2

Given an arbitrary set W = {wi} in U, the k-coverage hole is defined as(25) 
 where 
 are the neighboring discrete points, ξ is the total number of discrete points for the set 
, and δ is the image segmentation threshold for the minimum area of the bounding boxes.

Using Definition 2, given a set W in WSN and the discrete points {pα,β} in U, the k-coverage hole can be localized according to the set 
.

Proposition 3

If the mobile robot carries the unknown wireless sensor node wi and moves into the region of a k-coverage hole 
, the k-coverage network of wi will be less than k, denoted as 
.

Proof

Because the unknown node wi carried by the mobile robot can detect the neighboring BNs W(wi) in U, the location li of the node wi is inside the region of the neighboring discrete points 
 when the mobile robot moves into the 
 region. Then, because of 
, 
 is achieved, which coincides exactly with the property of a k-coverage hole; hence, the proposition follows.

To find the k-coverage holes 
, we propose a mapping-to-image transformation method in which the R × R (universal unit)2 map is converted into a grayscale image of the R × R pixels in U, i.e., R = 50. All the fine cells covered by only one or no BNs are set to 1; otherwise, they are set to 0. Therefore, the obtained gray image shows the k-coverage holes (shown as the white subregions in Fig. 2). With the help of the image processing technique, the bounding boxes and the centroids of each box can be determined precisely; these are represented by the green boxes and red crosses in the figure, respectively. Note that the image segmentation threshold for the minimum area of the bounding boxes is δ pixels.

Fig. 2
Download : Download high-res image (117KB)
Download : Download full-size image
Fig. 2. k-coverage hole localization based on the grayscale image.

First, we assume that the R × R (universal unit)2 matrix G has R × R fine cells in U. Then, we can obtain(26)

Furthermore, the continuous region f(x, y) inside G can be divided into fine cells (xi, yj)(i = 0, …, R − 1; j = 0, …, R − 1). Based on the mapping construction, we count cnti,j the number of fine cells f(xi, yj) covered by the circular regions within the communication radiuses of the BNs:(27)

Second, to take advantage of image processing techniques, we propose the mapping-to-image transformation method, which transforms the online mapping into the grayscale image. Thus, we employ the gray threshold T to transforming the online mapping into the grayscale image g(x, y) as follows:(28)
 where T = 1, which means that if the fine cell f(xi, yj) ≤ 1 cannot achieve a 2-coverage network, we label it as a network hole, e.g., g(xi, yj) = 1. Otherwise, when the fine cell achieves a 2-coverage network successfully, the result is g(xi, yj) = 0. This process yields a numerical matrix with values of 1 or 0, and we can transform this matrix into a grayscale image.

Finally, we employ an image segmentation technique to segment the connected regions of the grayscale image, which are represented by the fine cells whose cnti,j ≤ T. Based on the localization performance of the SELAc algorithm, we believe that even when the connected region of fine cells for cnti,j ≤ T consists of fewer than δ fine cells, the SELA algorithm will still work efficiently and provide precise localization services to mobile robots in most regions. Therefore, we use an image segmentation threshold because the minimum area of the bounding boxes is δ pixels. Fig. 2 shows the two connected regions for more than δ pixels marked with green bounding boxes. The centroids of the connected regions can be localized precisely, as indicated by the red cross markers in Fig. 1.

4.3. Hole recovery method
The hole recovery method causes the robot to move toward the centroid of the nearest hole by finding a free cell. It constructs the online trajectory in two phases: a coarse cell phase and a fine cell phase. In the coarse cell phase, the spanning tree algorithm suggests a free coarse cell in the direction of the nearest hole when a hole occurs in that direction free of the obstacles, which are the purple pipelines in the figure. Then, in the fine cell phase, the spanning tree algorithm expands the tree toward the hole along the fine cells of G. To avoid obstacles, if the robot encounters an obstacle as determined by (24), it tries to create a tree in another direction.

Fig. 3 illustrates three possible situations that can occur during the hole recovery method. First, when the robot places the last BN in U, it should determine the status of the map f(xi, yj), i = 0, …, R − 1, j = 0, …, R − 1 in the second line of the TST algorithm. If the map f(xi, yi) indicates a 1-coverage network, the map is converted into a grayscale image 
 by the mapping-to-image transformation method, and the k-coverage holes 
 are localized by the image processing technique. Second, in the coarse cell phase, the spanning tree algorithm starts looking for a free coarse cell in the direction of the nearest hole in a counterclockwise manner while simultaneously avoiding obstacles to expand the tree edge, which is represented as the purple pipelines. Third, in the fine cell phase, the spanning tree algorithm adjusts the tree edge in a counterclockwise manner to move the robot toward the hole 
, which is represented by the blue arrows in the figure. When the robot encounters an obstacle, it switches directions accordingly. Finally, after reaching the destination successfully, the robot places a new BN wi at location li (represented by the blue square) and moves toward the next nearest hole until all the holes have been recovered.

Fig. 3
Download : Download high-res image (217KB)
Download : Download full-size image
Fig. 3. Traveling trajectory of the hole recovery method for k-coverage holes.

Algorithm 1 shows the hole recovery procedure based on the 1-coverage network in U. First, the algorithm localizes the k-coverage holes 
 based on the map f(xi, yi). In the next line, the algorithm checks whether the holes are recovered in U and executes the loop body according. In line four, in the coarse cell phase, the algorithm selects a non-obstacle coarse cell in the direction of the nearest hole. Then, the current position li of the mobile robot is localized by the spanning tree algorithm from (Arezoumand et al., (2016)). After finding the free coarse cell by executing the create-new-edge method in the final stage of the coarse cell phase, the algorithm suggests the next cell to which the robot should move and builds a pipeline. In the fine cell phase, the algorithm constructs an online spanning tree trajectory for the robot toward the nearest hole intelligently. If the robot encounters an obstacle, the algorithm suggests a new direction based on the map f(xi, yi) until the destination is reached. At that point, the robot should place a new BN wi, update the map f(xi, yi) in U, and then continue to find any remaining k-coverage holes based on the current map, proceeding to the next loop body from line two, until all holes have been recovered successfully.


Algorithm 1. The hole recovery algorithm

Data: S	sensor's value
Data: PX	previous fine cell
Data: li	current fine cell
Data: W	next and suggested coarse cell
Data: G	matrix of fine cells in U
Data: Cell	coarse cells nearby li
Data: W(wi)	all neighboring BNs of wi
Data: LOSs	LOS neighboring BNs around li
Data: f(xi, yj)	Is network coverage for G
Data: Dir	Is counter-clockwise directions
Data: Angles	candidate angles in one direction
Data: 
k-coverage holes in the f(xi, yj)
;
while (
 have not been recovered) do
//Coarse Cell Phase
 W = select(Cell, Dir);
 S = getSensorData();
 LOSs = detectLOS(W(wi), PX, f(xi, yj));
 li = SpanningTree(f(xi, yj), W, Dir, Angles);
 if (Cell is empty) then
 CreateTreeEdge(Cell, W);
//Fine Cell Phase
 CreateSpanningTree(f(xi, yj), W, Dir, Angles);
 end
 if (
) then
 W(wi) = deployBeacon(li, W(wi));
 fα(xi, yj) = updateMap(W(wi), G, f(xi, yj));
 
;
 end
end
Fig. 4 presents our proposed autonomous WSN deployment framework with artificial intelligence (AI). The complete framework includes two subsystems: the OLKWDP and the hole recovery for the OLKC. The first subsystem starts by deploying three initial BNs wi at the predefined locations li by the mobile robot, i = 1, 2, 3. While the mobile robot moves along U, it needs to build the online map and detect the obstacles in real time. Then, the robot can make its own decision on the moving direction based on the TST path planning (Feng et al., 2017). Moreover, the robot can communicate with the neighboring BNs W(wi) and realize self-localization by the SELAc algorithm (Feng et al., 2017). When our proposed OLKWDP is satisfied, the robot deploys a new BN to strengthen the WSN autonomously. Furthermore, the robot can judge whether the WSN has achieved a 1-coverage network in U and determine whether to perform the next subsystem tasks or continue to perform the current subsystem tasks.

Fig. 4
Download : Download high-res image (589KB)
Download : Download full-size image
Fig. 4. The proposed autonomous WSN deployment framework.

The hole recovery subsystem for the OLKC starts with k-coverage hole localization based on the mapping-to-image transformation method. Then, the robot can build a pipeline between itself and the nearest hole during the coarse cell phase. Subsequently, the robot can construct an online spanning tree edge toward the hole in the fine cell phase. Furthermore, the robot can judge whether the WSN has achieved the OLKC. When the WSN satisfies the requirement, the robot will terminate the mission. Otherwise, the robot starts over and performs the first task in the current subsystem again.

5. Experiment and analysis
We conducted the simulation experiments using MATLAB R2014a on a computer equipped with a Windows 10 64-bit operating system, an i7-4500U CPU with 2 cores and 4 threads, and 8 GB of 1600 MHz RAM. The base processor frequency is 1.8 GHz, and its maximum turbo frequency is 3 GHz. The computer also has an AMD Radeon HD 8870 M GPU with a 775-MHz core clock and 2048 MB of graphics memory.

The deployment area is set to 50 × 50 (universal unit)2. The simulation parameters are listed in Table 2. To focus on the theoretical research, in this work, the velocity v and direction of motion θ are fixed without environmental noise, and the distance measurement is a linear relationship over the distance between the neighboring BNs and a mobile robot. We assume that the mobile robot carries an omnidirectional range finder and wireless communication mechanisms similar to those of unmanned vehicles and that the communication range r is 20, 30 or 40 universal units. The spacing χ of the three initial BNs is 5 universal units; the image segmentation threshold δ is 8; and the gray threshold T is 1.


Table 2. Simulation parameters.

Parameters	Value
Network size (universal unit)2	50 × 50
Radio range (r universal unit)	20, 30, 40
Initial BN number	3
Orientation angle (θ)	0, π/3, π/2, 2π/3, π, −2π/3, −π/2, −π/3
Moving speed (v (universal unit)/s)	0.5, 1.0, 2.0
Initial spacing (χ universal unit)	5
Segmentation threshold (δ)	8
Gray threshold (T)	1
To evaluate the performance of the proposed ETST algorithm, we simulate three different types of U (snake-shaped, U-shaped, and square-shaped indoor environments) and perform dynamic localization and autonomous deployment of the mobile robot simultaneously in the WSN. The BNs are endowed with three possible communication radiuses: r = 40, 30, or 20 universal units. Furthermore, the mobile robot can move within the area at three different constant speeds: v = 2.0, 1.0, 0.5 (universal unit)/s. Therefore, we execute the ETST algorithm in 27 situations and compare it with the TST algorithm in all situations. This approach reveals the fundamental performance characteristics of our proposed method.

Fig. 5, Fig. 6 depict two situations of our ETST in the U-shaped U. In the first situation, the sensing radius of the BNs is 40 universal units, and the constant speed of the mobile robot is set to 0.5 (universal unit)/s. Fig. 5(a) and (e) show the performances of the TST in (Feng et al., (2017)) and ETST. Fig. 5(b), (c), 5(d) and 5(e) show the running example, starting from the initial phase and ending with completion of the exploration at the end of the unknown environment. The three initial BNs w1,2,3 are represented by the purple hexagon in the initial phase of ETST in Fig. 5(b), and the trajectories (xr, yr) of the mobile robot are represented by the black dotted lines. At each corner of the trajectories, the robot incrementally deploys a BN wi; these BNs are represented by the green squares in Fig. 5(c) and (d). If the mobile robot detects a wall, represented by cyan lines, determined as an obstacle (OB), it is marked as an RGB color [1, 51/255, 1] dot accordingly. The mobile robot explores the entire U until the OLKC is achieved. The major difference between the TST and ETST is the communication radius. In our ETST, the communication radius and sensing radius are exactly the same r. However, in the TST, the communication radius is 2r, while the sensing radius is r. The purpose of unifying these two values is to simplify the processing and improve the ranging accuracy. We use the unified r to represent the identical sensing and communication range of the wireless sensor nodes in our ETST, although generally, the communication range of wireless sensor nodes is larger than their sensing range, because shorter measurement distances yield greater measurement accuracy. As shown in the second green square BN in the figure, the TST can deploy the BN with a wider coverage area than can our ETST because the communication radius of the TST is twice that of our ETST. Furthermore, the U-shaped environment provides relatively narrow spaces for the mobile robot to explore the whole U, while the TST can easily pass through the narrow twisted area and reach the end of U successfully based on the advantage it has due to the 2r communication radius. However, our ETST cannot pass through that area successfully; thus, it must start the hole recovery method to fill in the k-coverage holes (shown as the blue square for the BN d(wi); d(wi) represents the deployBeacon() function in the fifth line from the bottom of Algorithm 1, and the steel-blue dotted trajectory lines ST(xr, yr) represent the CreateSpanningTree() function in the eighth line from the bottom of Algorithm 1 in Fig. 5(e)) until the OLKC is achieved. Nevertheless, the outcomes show that with the help of the hole recovery method, our ETST solves the OLKWDP using fewer N than does the TST. Consequently, our ETST outperforms the TST under its narrower radius of r = 40 because the larger communication radius provides no advantage in the narrow area. Fig. 5(f) depicts the k-coverage network of the ETST algorithm, which clearly indicates that most locations in the area are covered by at least two BN circular regions. Therefore, the 2-coverage network is achieved, supporting further mobile robot engineering. The maximum coverage appears at the center of the area, while the minimum coverage is scattered along the edges. Fig. 5(g) shows the network connectivity of the ETST algorithm. Because obstacles are detected by the robot and saved on the map, when the robot detects NLOS network connectivity, it can be filtered out intelligently, and LOS network connectivity can be preserved accordingly. This result indicates that all the BNs can communicate with another BN via LOS network connectivity.

Fig. 5
Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 5. Our ETST with r = 40 and v = 0.5 in the U-shaped U.

Fig. 6
Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 6. Our ETST with r = 20 and v = 0.5 in the U-shaped U.

The results obtained when r = 20 and v = 0.5 are shown in Fig. 6. Fig. 6(b), (c), 6(d) and 6(e) show the running example, starting from the initial phase and ending with completion of exploration at the end of the U. In this situation, the TST in (Feng et al., (2017)) still performs well in the narrow twisted area and successfully reaches the end of U. Because the communication radius of our ETST is half that of the TST, our ETST must deploy BNs closer together than the TST (shown as the second green square in Fig. Fig. 5:d). Thus, our ETST requires a larger N than the TST to solve the OLKWDP. Another major difference between the TST and our ETST is the hole recovery method. The hole recovery method of our ETST is intended to achieve the OLKC, while that of the TST is intended to achieve the 3-coverage network holes, which increases the number of network holes. In addition, our ETST employs the mapping-to-image transformation method to localize the network holes based on the segmentation threshold δ, which filters out many unnecessary network holes in Fig. fig:5:e. Therefore, the hole recovery method of the TST localizes many more network holes than does our ETST, as shown by the blue squares in Fig. 5(a). The achieved k-coverage network is shown in Fig. 6(f). The 1-coverage regions are scattered near the corners of the area, while the bulk of the area achieves a 2-coverage network. The network connectivity shown in Fig. 6(g) indicates that the BNs are fully connected with each other with no interference from NLOS connectivity.

The significant improvement of our ETST in Fig. 5, Fig. 6 can be summarized as follows. (1) Our ETST solves the OLKWDP using fewer N than does the TST in (Feng et al., (2017)) as shown in Fig. 5(a): N = 12 versus 5(e) N = 10, which is− 16.67% decrease. (2) Our ETST achieves the k-coverage network instead of 1-coverage network for the TST. Fig. 5, Fig. 6 of the k-coverage network for ETST clearly indicate that most locations in the area are covered by at least two BN circular regions. Therefore, the 2-coverage network is achieved, supporting further mobile robot engineering. (3) The hole recovery method of our ETST is intended to achieve the OLKC, while that of the TST is intended to achieve the 3-coverage network holes, which increases the number of network holes. In addition, our ETST employs the mapping-to-image transformation method to localize the network holes based on the segmentation threshold δ, which filters out many unnecessary network holes. Therefore, the hole recovery method of the TST localizes three more network holes than does our ETST, as shown in Fig. 6(a) versus Fig. 6(e).

Furthermore, due to the propagation of NLOS errors, the signal reflects and diffracts, and signal transmission channels become longer. Therefore, the measurement has positive deviation, which is called NLOS error. NLOS error is the most significant factor affecting localization accuracy in WSN localization algorithms (You and Zhang, 2020; Cheng et al., 2021). Identifying and mitigating NLOS error is both a hotspot and challenge in localization algorithm research. With the aim of addressing this problem, our ETST identifies and avoids NLOS connectivity based on equations (17), (18), (19), (20), (21), (22), (23), (24), which is designed at the thirteenth line from the bottom in Algorithm 1. Fig. 5, Fig. 6 demonstrate that our ETST has prominent performance in filtering out the NLOS connections and retaining only LOS connections.

To analyze the performance of our ETST in this work, we propose an evaluation index suitable for comparing its performance with that of the TST. We assume that our ETST needs to deploy ani BNs, which reflects the number of BNs, to achieve the 1-coverage network for the ith situation. There are 27 kinds of simulation situations. The TST needs to place ami BNs to achieve similar coverage for the ith situation. The growth rate, σi, is the evaluation index, which provides a contrastive analysis of the coverage efficiency of our ETST and the TST for the ith situation. The growth rate can be described as follows:(29)
 

Furthermore, to evaluate the performance of our ETST in a specific set of situations, the mean of the growth rates, μS, is presented to provide a contrastive analysis on the coverage efficiency of our ETST and the TST for a given set of situations. The set can be all situations of the snake-shaped environment, all situations where r = 40, all situations where v = 0.5, and so on. The mean of the growth rates can be calculated by(30)
 
where S is a specific set of simulation situations, which can be a set such as all 27 situations, all situations of the U-shaped environment, all situations where r = 30, or all situations where v = 0.5. card(⋅) is the number of elements of the set S.

Fig. 7 describes the growth rates of our ETST for all 27 simulation situations. It clearly shows the three types of U, which are snake-shaped, U-shaped and square-shaped. For each type, there are 9 situations based on the sensing radius of the BNs (r = 40, 30 or 20) and the constant speed of the mobile robot (v = 2.0, 1.0, or 0.5). First, we denote the N of our ETST for each situation by the blue bar and that of the TST by the orange bar. Second, we present the σi, i = 1 … 27, of our ETST using the bold red or black numbers listed at the end of each bar. Therefore, the red sigmai shows that our ETST can deploy with a smaller N than can TST, while the black sigmai shows the opposite. The statistical results reveal that ETST performs better than the TST in 20 situations and worse than the TST in 7 situations, demonstrating that ETST provides better performance in most cases. However, the worst 4 situations all occur when r = 20, indicating that the TST outperforms ETST in narrow spaces when r = 20 because its communication radius is twice that of ETST. Finally, for the U-shaped type, ETST and the TST yield almost the same results, which indicates that both show good performance in narrow twisted regions.

Fig. 7
Download : Download high-res image (741KB)
Download : Download full-size image
Fig. 7. Comparison of the growth rates between our ETST and the TST in (Feng et al., (2017)) in all situations.

Fig. 8 depicts the k-coverage rates of the ETST in all 27 situations. First, it clearly indicates that the ETST achieves a 100% 1-coverage rate in all situations except when r = 30 and v = 0.5; the ETST falls into a local trap in this special situation and cannot reach the end of U. Second, there are 20 situations in which the ETST achieves a 2-coverage rate over 90%, and its average 2-coverage rate in all situations is 91.34%. This means that the ETST can guarantee mobile robot applications in approximately 91.34% of U situations. Third, our ETST achieves a 3-coverage rate of over 90% in 16 situations, and its average 3-coverage rate in all situations is 89.00%. This indicates that most mobile robot localization algorithms will work well in approximately 89.00% of U situations. Moreover, because the 2-coverage and 3-coverage regions appear at the center of U, while the 1-coverage and uncovered regions are scattered near the edges, we can draw the conclusion that our ETST ensures the ROI applications for mobile robots.

Fig. 8
Download : Download high-res image (800KB)
Download : Download full-size image
Fig. 8. The k-coverage rates of our ETST in all situations.

Table 3 compares our ETST and the TST in (Feng et al., (2017)) based on σi and μS in all 27 situations. First, for the snake-shaped type, the negative σi appears in almost all situations, indicating that our ETST deploys less BNs than the TST in most situations. The 
 achieves the best score, − 16.48%. This result indicates that our ETST outperforms the TST in the narrow snake-shaped type of U and deploys less BNs than the TST. Second, in the U-shaped type, almost half of the situations have a negative σi. The μ{S=‘U’} achieves the worst score, − 1.59%. This result means that both approaches yield good performances in narrow twisted regions. Third, our ETST achieves better performance in the r = 40 and r = 30 situations but relatively worse performance in the r = 20 situations. This result means that the TST outperforms our ETST in narrow spaces when r = 20 because its communication radius is twice that of our ETST. However, μ{S=‘All’} reaches − 9.51% because our ETST is better than the TST in 20 situations and worse in only 7 situations. This result demonstrates that the ETST provides better performance in most cases.


Table 3. Comparison Between our ETST and the TST in (Feng et al., (2017)) Based on σi and μS.

Type	Situation	σi vs TST	μ{S=Type} vs TST	μ{S=‘All’} vs TST
Snake-shaped	r = 40, v = 2.0	−22.22%	−16.48%	−9.51%
r = 40, v = 1.0	−22.22%
r = 40, v = 0.5	−22.22%
r = 30, v = 2.0	−30.00%
r = 30, v = 1.0	−30.00%
r = 30, v = 0.5	−11.11%
r = 20, v = 2.0	−13.33%
r = 20, v = 1.0	25.00%
r = 20, v = 0.5	−22.22%
U-shaped	r = 40, v = 2.0	10.00%	−1.59%	
r = 40, v = 1.0	−25.00%
r = 40, v = 0.5	−16.67%
r = 30, v = 2.0	7.14%
r = 30, v = 1.0	−7.69%
r = 30, v = 0.5	−16.67%
r = 20, v = 2.0	−4.35%
r = 20, v = 1.0	16.67%
r = 20, v = 0.5	22.22%
Square-shaped	r = 40, v = 2.0	−12.50%	−10.44%	
r = 40, v = 1.0	−40.00%
r = 40, v = 0.5	−25.00%
r = 30, v = 2.0	−18.18%
r = 30, v = 1.0	−9.09%
r = 30, v = 0.5	−9.09%
r = 20, v = 2.0	−15.38%
r = 20, v = 1.0	5.26%
r = 20, v = 0.5	30.00%
Table 4 describes the performance analysis of our ETST based on various features. First, the deployment scheme of our ETST is autonomous deployment in which the BNs are placed incrementally by a mobile robot. A grid-based deployment approach is used in (Arezoumand et al., (2016)) to place the nodes at predetermined positions of the grid mesh. A random deployment approach is utilized in (Han et al., (2017b)) to randomly throw the nodes in the square area. Second, the N value of the deployed nodes and the network coverage are the key indicators of the performance analysis. Our ETST can achieve 100% 1-coverage, 97.29% 2-coverage and 96.69% 3-coverage of U with 26 BNs in the r = 40 and v = 0.5 square-shaped situation sized at 100 × 100 (universal units)2. However (Arezoumand et al., 2016), requires at least 30 nodes to achieve a nearly 1-coverage network, and (Han et al., 2017b) cannot guarantee a 1-coverage network through its random deployment approach. Third, because (Arezoumand et al., 2016) and our ETST both employ the spanning tree algorithm for path planning, they can avoid obstacles and explore the unknown hostile environment successfully. However, because the predetermined situation of (Han et al., (2017b)) is the square area and free of obstacles, it fails to provide the ability to explore the unknown hostile environment and avoid obstacles. Fourth, LOS/NLOS identification is a challenging task in WSNs in the presence of obstacles. Neither (Arezoumand et al., 2016) nor (Han et al., 2017b) provide a convincing ability to identify and filter out NLOS connectivity, but our ETST can identify and filter out most NLOS connectivity successfully, which dramatically enhances its performance.


Table 4. Performance analysis based on features.

Features	Arezoumand et al. (2016)	Han et al. (2017b)	ETST
Deployment scheme	Grid	Random	Autonomous
N	30	Unknown	26
Unknown hostile	Yes	No	Yes
environment			
Obstacle avoidance	Yes	No	Yes
LOS/NLOS	No	No	Yes
Path Planning	Spanning Tree	Trilateration	Trilateration and Spanning Tree
k-coverage network	No	No	Yes
Table 5 describes the performance analysis of ETST for k-coverage. First, ETST employs incremental autonomous deployment by a mobile robot to intentionally place the BNs individually. However(Li et al., 2015), randomly disperses the mobile nodes throughout the square area and achieves k-coverage by replacing the mobile nodes in various locations. Second, our objective is to achieve the minimum number N of deployed nodes required for the OLKC. For sensing ranges of r = 30 m and v = 1 m/s with 100 × 100 m2, our ETST achieves 100% 1-coverage, 96.95% 2-coverage and 96.35% 3-coverage of U using 38 BNs. However (Li et al., 2015), results in a 1 km2 square area with 1000 nodes. In this case, a 1 km2 square area can be uniformly divided into 100 subregions, each of which is a 100 m × 100 m square area. Therefore, the number of nodes in each subregion is at least 8.36 nodes reached through over 100 rounds of iterative computation to achieve a nearly 2-coverage network by changing the locations of the mobile nodes. The final number of nodes by (Li et al., (2015)) is less than our ETST. However, because a 2-coverage network cannot guarantee mobile robot localization based on the SELAc algorithm, the shape of the localizable area for mobile robots is similar to a 3-Pl flower inside the 2-coverage area, and the method proposed by (Li et al., (2015)) is not suitable for mobile robot applications in complex real environments—such as areas that are not covered by satellite navigation systems. However, our ETST can guarantee mobile robot localization performance in most regions due to the OLKC. The initial number of nodes is 1,000, deployed randomly. That number is reduced to 836 through iterative computation, which is troublesome in real applications because it means that 20% of the nodes have performed useless work. Third, both (Li et al., 2015) and our ETST are capable of avoiding obstacles and deploying nodes in irregular regions successfully. However (Li et al., 2015), must have prior knowledge of U; it cannot deploy nodes in unknown hostile environments. Furthermore (Li et al., 2015), is not aware of the influences of LOS/NLOS for WSN communication in the presence of obstacles. and it present no solutions for avoiding NLOS. However, our ETST can identify and filter out the NLOS connectivity successfully, which dramatically enhances the performance of our ETST. Last but not least, achieving the OLKC is important in WSN applications, and our ETST can employ a mobile robot to deploy BNs incrementally to achieve that goal, making it practical in real-world applications.


Table 5. Performance Analysis for k-coverage.

Features	Li et al. (2015)	ETST
Deployment scheme	Random	Autonomous
N	8.36	38
Unknown hostile environment	No	Yes
Obstacle avoidance	Yes	Yes
LOS/NLOS	No	Yes
r	30 m	30 m
OLKC	No	Yes
6. Conclusions
To solve the problem of autonomous deployment and seek the OLKC, we first propose the OLKWDP and present a novel framework for preserving the connectivity and robustness in WSNs using a mobile robot. To ensure that the mobile robot can be localized by at least k BNs, we propose a hole recovery method for the OLKC that can be achieved by the mobile robot performing concurrent mapping, deployment and localization of a WSN to overcome the network hole problem of U. Then, using image processing technology, we employ a mapping-to-image transformation method to reveal interactions between the WSN deployment and network holes for the OLKC. Moreover, our approach filters out NLOS network connectivity, and can successfully avoid obstacles based on the online map and trajectories. To solve the OLKWDP, we also develop two optimality conditions for achieving maximum coverage of our proposed OLKC in U using the minimum number of sensors. Simulation results for 27 situations show that our ETST outperforms the TST method for exploring unknown hostile environments and achieves the OLKC with average coverage rates of almost 100% (1-coverage), 91.34% (2-coverage) and 89.00% (3-coverage). Furthermore, because the 2-coverage and 3-coverage regions appear at the center of U while the 1-coverage and uncovered regions are scattered at the edges, we can conclude that our ETST ensures that the ROI for mobile robot applications is covered.

The limitations of our ETST can be summarized as follows.

1.
To establish the k-coverage network and localize the robot simultaneously in the unknown hostile environment, our ETST deploys a certain number of BNs. However, there is still room for a further reduction in the number of BNs.

2.
To make the simulation experiment representative, we designed 27 scenarios and a certain number of obstacles. However, the unknown hostile environment in the real world is more complex and dynamically changing, which requires more in-depth exploration and research.

3.
To simplify the problem and focus the theoretical model, we only confine the unknown hostile environment to a two-dimensional plane, and build a two-dimensional solution to it. However, the k-coverage network for unknown hostile environments in the real world is mostly a three-dimensional space problem. Therefore, it is necessary to establish corresponding solutions for three-dimensional spatial model.

Furthermore, in future work, we plan to modify our ETST to adapt to environmental and measurement noise because unpredictable noise is a main challenge in practical applications. In addition, we plan to develop a mobile robot with a 12-degree-of-freedom (DOF) robotic arm and a 2-finger gripper mounted on a vertical prismatic joint to help solve the problems of deploying the BNs. More experiments will be conducted to apply our framework to real-world disaster relief activities.

