Emerging technologies are playing a critical role in the evolution of healthcare systems by presenting eHealth to provide high-quality services and better health to wide-range of patients. Achieving the eHealth goals highly depends on employing modern information and communication technologies (ICTs) to securely and efficiently collect and transmit electronic health records (EHRs) and make them accessible to authorized users and healthcare providers. However, the adoption of EHRs in healthcare providers puts the patients’ privacy and their information security at risk of data breaches. The advent of smart contracts and blockchain technology paves a way for developing efficient EHR access control methods to support secure identification, authentication, and authorization of the clients. This paper delineates an extensive survey on the state-of-the-art blockchain-based access control methods in healthcare domain as a basis for categorizing the existing and future developments in access control area. A thematic taxonomy of the blockchain-based access control methods is also presented to recognize the security issues of the existing methods and highlight the fundamental security requirements to design a granular access control method. This paper also aims for examining the similarities and differences of the traditional access control methods and describes some substantial and outstanding issues and challenges as further directions.

Previous
Next 
Keywords
Blockchain

Smart contract

eHealth

Access control

Authentication

Authorization

1. Introduction
Nowadays, by developing the smart technologies, such as Internet of Things (IoT) and virtual and augmented reality, the majority of healthcare providers are interested in replacing the conventional healthcare systems with eHealth. The main objective of eHealth is to revolutionize health information management and improve the healthcare system through modern information and communication technologies (ICTs) (Pagliari et al., 2005). Delivering the health services and information, through smart IoT devices by using the Internet with the aim of reducing the cost, and enhancing the scalability and time efficiency is an application of eHealth (Sebestyen et al., 2014, Ahern et al., 2006).

To achieve these potential benefits of eHealth, it is essential for healthcare providers and industries to regulate and optimize the electronic distribution and transmission of medical information to the physicians. Undoubtedly, the key component of eHealth systems is Electronic Health Record (EHR), which refers to storing a patient’s paper chart digitally, with the purpose to promptly and securely make the information available for authorized third part (Iakovidis, 1998, Giannelos, 2019). EHRs, as a vital part of eHealth, may include all required information of a patient regarding medical history, diagnoses and treatments, laboratory results, and images (i.e., X-ray and MRI) (Shickel et al., 2018). They help to simplify the healthcare providers’ work-flow by providing an access to evidence-based tools and practices to improve patient’s care services. Indeed, the core feature of EHRs for healthcare providers is to create and manage the digital format of health information, which can be shared across multiple authorized healthcare providers (What is an electronic health record (EHR), 2019). As a result, developing a secure and efficient medical data access control to validate the permissions and share the EHRs is a fundamental prerequisite for healthcare providers.

The National Coordinator for Health Information Technology (ONC) provided a list of guidelines and regulations to meet the medical data access control requirements and overcome the existing security and privacy issues and challenges. These regulations can be categorized into four groups: (1) Identity Verification and Authentication: Patient’s authentication plays a critical role in healthcare providers and origination to preserve the patient data and prevent medical identity fraud. In other words, electronic health information in the health centers and care providers should be easily authenticable and identity proofing. However, the majority of health organizations suffer from the lack of consistent identity proofing and authentication (DeSalvo, 2015). (2) Data storage and transmission: Managing and storing huge amount of EHRs locally along with secure data sharing are known as critical challenges of electronic data in healthcare providers. (3) Developing privacy rule using computable contracts: Natural language includes legal options, relationships, and constraints, which are used to define daily interactions and transactions. However, applying natural language to legalese will usually affect a negative impact on both parties due to its incompleteness and ambiguity (Rosenberg and Xu, 2015). (4) Consistent Data Formats: Healthcare providers and IT venders usually encounter different standard format for clinical data transmission. To share the healthcare information between healthcare IT venders, the Continuity of Care Document (CCD) was developed as an XML-based standard considering with Health Level Seven International (HL7) Clinical Document Architecture (CDA) elements (, which are interoperability, understandability, security, quality and reliability, and efficiency). Due to inefficiency of CCD, in 2014, the Consolidated-Clinical Document Architecture (C-CDA) was developed as a base standard for creation and transmission of patients’ EHRs, which consists of diverse file types, progress reports, clinical summaries, and consult notes (Ali et al., 2019).

The ideal solution to meet these requirements and improve the scalability and efficiency is to leverage of cloud-based healthcare system (Li et al., 2013, Qian et al., 2014, Zhang et al., 2018b) and in which the EHRs must be outsource to the cloud storage and the management of data will be delegated to cloud service providers. These methods usually use attribute-based encryption (ABE) or identity-based encryption (IBE) to define the access policies and permission revocations (Sookhak et al., 2017). However, the CSPs are not fully trustable (honest but curious) and the patients’ privacy may be at risk. For example, the CSPs may share the EHRs with other organizations for research or drug advertising purposes without taking the data owners’ permissions results in critical information leakage issues. Preserving the integrity of outsourced data in cloud-based system also requires leveraging a remote data auditing schemes that inures considerable computation and communication overhead on users and cloud servers. Moreover, cloud computing can be used to develop centralized applications, which are not secure when the CSPs are under attacked and compromised (Sookhak et al., 2014, Sookhak et al., 2015, Sookhak et al., 2018). The huge number of data breach reports clearly shows the data security and privacy deficiencies, which can be addressed using blockchain technology (HHS Proposes, 2019).

As a matter of fact, implementing a score EHR access control method highly depends on supporting identification, authentication, and authorization (permission verification) (Ausanka-Crues, 2001). Access control methods require to ensure the legitimated users are only able to access resources while they are able to track and audit effectively the users’ activities. The blockchain technology has arisen as a potential solution to meet such requirements, which provides a decentralized, trust-less, tamper-proof, distributed ledgers over pear to pear network (Zheng et al., 2018). The blockchain is also invulnerable against the central point of failure since all nodes in blockchain architecture are correspondingly and collaboratively provides services without relying on a central server. Moreover, the blockchain consists of a set of immutable and distributed digital ledgers that are responsible for tracking the transactions and record them on digital blocks (Halamka et al., 2017). The immutable audit trail feature of blockchain makes it suitable to develop a trustworthy and secure environment against integrity issues. The next reason to apply blockchain in access control methods is enabling transparency of information in which all participants have capability to view all information leads to data leakage prevention and higher possibility of malicious detection. On the other hand, the blockchain technologies are capable of using the smart contract features to facilitate users’ authentication and authorization under programmable policies in a fully distributed nature (Hölbl et al., 2018, Frey, 2018, McLeod and Dolezel, 2018). Smart contracts have been developed as an alternative to translate the legal relationships from natural language to a set of computer standard that can be run effectively by blockchain.

It is worth noting that blockchains are generally categorized in two main classes, namely permissionless and permissioned. In a permissionless (also called public) blockchain, any participant can read and write on the ledger and even can participate in consensus process. In the latter case, participant actions are controlled by a central entity. Permissioned blockchains are further classified into public and private categories. In private permissioned blockchains all actions including read, write and consensus are taken unilaterally by a per-selected group of participant. However, public permissioned blockchains allow all participant to read the ledger (Meng et al., 2018).

The main contributions of the survey are: (1) Providing a detail review on the state-of-the-art EHR access control methods over blockchain, which have not be fully covered in the existing works, (2) Critical analysis and classification of the recent access control methods in healthcare into two diverse groups, namely permissioned and permissionless blockchain, with focusing on smart contracts feature as the core factor to develop such techniques, (3) Presenting a thematic taxonomy of the blockchain-based access control methods on the basis of essential parameters and attributes, such as type of blockchain and ledger, consensus protocol, access control development strategy (identification, authentication and authorization, type of EHR storage, and supporting features, and (4) Comparing the existing methods based on the proposed thematic taxonomy to identify the substantial and outstanding issues and challenges as further directions.

The organization of the remainder of the article is as follows. Section 2 reviews on the related works in healthcare domain. Section 3 describes the principal concept of smart contract along with its mechanism and architecture. Section 4 explains the permissionless blockchain technology and provides a critical review on the EHR access control using permissionless-based smart contract. The permissioned blockchain as well as the comprehensive survey on permissioned-based EHR access control methods are presented in Section 5. Section 6 describes a thematic taxonomy of the traditional access control method in healthcare system to compare these methods based on the designed taxonomy. Section 7 discusses security issues and challenge of current approaches and finally Section 8 concludes the survey and provide some future directions.

2. Related work
Although blockchain and smart contracts are widely utilized in different domains including supply chain control (Salah et al., 2019), proof of delivery (Hasan and Salah, 2018a, Hasan and Salah, 2018b), and IoT access control (Novo, 2018), this paper concentrates on access control development over blockchain system for healthcare. Hence, this section makes an overview on the existing works in this specific area.

Kumar et al. (2018) provides an overview on blockchain applications in healthcare system with focusing on their requirements, without considering the access control requirements. In McGhin et al. (2019) and Khezr et al. (2019), general literature about blockchain applications in healthcare domain are presented. However, due to the extensive domain of this paper, the majority of access control-based methods have not been discussed. Jin et al. (2019) presented a review paper on medical data sharing in blockchain system. However, this paper only focuses on privacy preserving issue without considering the access control methods in detail. Finally, a work in Hölbl et al. (2018), presents a systematic review on blockchain technology in healthcare.

To the best of our knowledge, this is the first survey on blockchain-based access control methods in healthcare wherein we critically reviewed the existing works in detail with concentrating on their advantages and limitations on the basis of a new thematic taxonomy. This paper highlights the smart contracts applications in developing access control methods as well as identification, authentication, and authorization as three critical requirements of such techniques.

3. Smart contract
Smart contracts refer to a series of computer codes and protocols that can automatically execute and enforce an agreement when the specified conditions are met. The contract may be presented in either a standalone code or a traditional written agreement between parties with the aim of executing specific provisions, such as transferring fees (Levi and Lipton, 2018, Cieplak and Leefatt, 2017, Liu and Liu, 2019). Smart contracts help to reduce transaction fees by excluding the trusted third-party requirement in comparison with traditional contracts. Szabo (1997) was the first to introduce smart contracts in 1997 as “a set of promises, specified in digital form, including protocols within which the parties perform on these promises”.

However, the smart contract idea was not emerged in the real applications until the development of blockchain because of the its critical requirements, such as digital asset systems to develop a programmable smart contact (Liu and Liu, 2019). Indeed, development of smart contracts depend on the following necessities: (1) The existence of manipulative digital assets for transferring the assets automatically among parties in the real world. (2) The creation of computational law to emphasize the automation of legal reasoning which supports regulations, bossiness, and contract principles in a self-executive code and manner. (3) The development of reliable environment to securely support self-executive contracts, with emphasis of integrity and non-tampering, confidently and correctness, and transparency and availability.

Indeed, the appearance of blockchain as a public ledger to guarantee the correctness and tamper-resistant of transaction helps the development of smart contracts in the real environment (Alharby et al., 2018). Blockchain also enables smart contracts to be applicable among anonymous and trustless parties without having to establish a centralized control system and third-party authority. It helps smart contracts to develop the logical connections between contractors in logical flows format of programming languages, where in the execution of contract statements can be stored in the blockchain as an incontrovertible transaction (Zheng et al., 2020). As a result, it is possible to automatically execute a statement whenever its smart contract condition is satisfied. For example, Alice and Bob make a smart contract on renting a car and setting penalty for the late return. If Alice forget to return the car on time, the penalty will be deducted from her account automatically.

Smart contracts based blockchain help to reduce the risk and cost and improve the business effectiveness due to the immutability of blockchain transactions, trustworthiness of consensus mechanism and eradication of third-part authority requirement respectively. As a result, the combination of smart contracts and blockchain has been embedded in numerous applications, such as, smart healthcare as a patient monitoring (Griggs et al., 2018, Liang et al., 2018) and secure data sharing system (Dagher et al., 2018, Omar et al., 2019, Nguyen et al., 2019), smart energy (Knirsch et al., 2017, Pop et al., 2018, Liu et al., 2018, Mengelkamp et al., 2018), finance to reduce the cost and improve the fraud detection and transparency (Peters and Panayi, 2016, Zhao et al., 2016, Eyal, 2017), supply chain management with supporting secure digital currencies (Saberi et al., 2019, Kamble et al., 2019, Chen et al., 2017), and secure data sharing among IoT devices (Yu et al., 2018, Dwivedi et al., 2019, Shafagh et al., 2017). Smart contracts and blockchain have been recently used in COVID-19 related researches as well. The work in Marbouh et al. (2020) provides an overview in the blockchain-based tracking systems. For instance, in Hasan et al. (2020) a digital medical passports and immunity certificates is developed to track the tests. The main idea is to develop a patient smart contract to hold the medical history of the patient along with the hash of the vaccination and immunization records as a base for digital health passport.

3.1. Smart contract mechanisms
A smart contract generally consists of a collection of executive codes and state that can be recognized by a specific address. The contracts are coded by using specific condition statements in different programming languages, such as Python or Solidity. After signing contracts by all contractors, a transaction, including the required parameters for smart contract functions, is submitted to the blockchain. Then, the miners are responsible to verify and store the transaction into an explicit block with the aim of creating a unique contract address for invoking smart contract. After that, the blockchain users can invoke the contract codes by transferring a transaction to the contract which will be checked by the state variable and external trusted data feeds (oracle). As a result, a corresponding response action will be executed and validated by miners whenever any conditions are met in smart contracts. Fig. 1 clearly shows the operational mechanism of smart contracts based on blockchain system.

3.2. Blockchain based smart contract architecture
Smart contract development relies on blockchain technology. As a result, the architecture of smart contracts must be compatible with blockchain architecture. But there is not a unique architecture for blockchain, and the scientists considered different layers in blockchain and smart contracts architecture. Generally, smart contracts consist of the following layers: (1) Infrastructure layer: supports the basic and fundamental management services for blockchain based smart contract model, including node management, digital asset management, transaction and account management, chaining and cryptographic algorithms. (2) Functional and Security layer: Functional and Security layer: is responsible to handle the functional and security requirements of blockchain and smart contract by focusing on contract, consensus, communications, key management, and formal verifications. Key management is known as the crucial requirements of the majority of systems, which elaborates the generation, exchange, storage and replacement of the keys. Indeed, applying a secure key management system helps to protect the privacy of on chain data in public blockchains. This is because the data may be available for all participants who have access to the blockchain. To overcome this issue, the data must be encrypted with a unique key before storing in the blockchain. Therefore, the client must store huge number of keys for all blocks that stored in the blockchain which incur storage overhead on the clients. The best way to alleviate it is to leverage a secure key management model. (3) Data and network communication layer: offers centralized/decentralized storage resources for ledgers, file system management and ledger management. This layer also provides network communication requirements for blockchain nodes to make the p2p networking along with some security features. (4) Consensus layer provide a list of Consensus models that can be support in the blockchain system, including Proof-of-Work (PoW), Proof-of-Stake (PoS), Delegated Proof-of-Stake (dPoS), Byzantine Fault Tolerance (BFT), Practical Byzantine Fault Tolerance (pBFT), Delegated Byzantine Fault Tolerance (dBFT), Asynchronous byzantine fault tolerance (aBFT), Proof-of-Weight (PoW), Proof-of-Activity (PoA), and Proof-of-Capacity (PoC). According to the consensus model of blockchain system, this layer must be responsible to meet the requirements, for example providing the fairness voting system on the basis of the existing agreement of delegates through encrypted sortation in proof of voting (PoV) (HNB, 2019). (5) Contract (smart contract service) Layer: is the main layer of blockchain based smart contract systems, which includes contracts invocation, communication and execution rules, static analysis and verification, life cycle management, operation cost management of smart contracts. Developing the contracts may be vary based on the initial architecture of smart contracts. Indeed, different advanced programming languages, such as Solidity, Golang, Javascript, C++, and Java, can be used by the developers to design the preliminary contracts while considering all rules and requirements (i.e., access controls and communication modes) (Sharma, 2019). (6) Decentralized Application Layer: Supports the fundamental tasks of the decentralized organizations, consisting of a set of humans interacting with each other on the basis of self-execution rules and principles through blockchain. This layer, which provides potential application of smart contracts in distributed manner, includes decentralized applications (Dapps), Decentralized Autonomous Organizations (DAOs), Decentralized Autonomous Corporations (DACs), Corporations as Technology, and Fully Automated Business Entity. Smart contract features will be used to convert the existing rules into self-execution manner using open source distributed software in different companies (Types of Decentralized Organizations, 2019, Wang et al., 2019).

3.3. Smart contract platforms
Nowadays, more than 40 smart contract platforms have been developed by scientist with different applications. Table 1 compare some of the existing platforms (Ethereum Home — Ethereum.org, 0000, Zilliqa Team and Barrett, 2018, Tezos Goodman, 2014, Quorum Home — Quorum, 0000, Quorum Whitepaper, 2018, HyperLedger Fabric Hyperledger.org, 2018, EOS EOS.IO Technical White Paper v2, 2018, Neo Neo White Paper, 2017, Stellar Mazieres, 2016, Corda Brown, 2018, and OpenChain OPEN Chain White Paper, 2017) on the basis of diverse criteria, such as, platform, blockchain and ledger types, consensus protocol, cryptocurrency, smart contract languages, and applications.


Table 1. A comparison of smart contract-based platforms.

Platform	BTa	LTb	Consc	Ccd	SC Lane	Descriptions & Applications
Ethereum (Home — Ethereum.org, 0000)	Public, Private, Consortium	Permissionless	PoW	Ether	Solidity	Executes on the EVM by every miner in the network.
Turing Complete.
Solidity is not powerful in comparison with C++, Java, and python.
Zilliqa (Team and Barrett, 2018)	Public	BFT	ZIL	Scilla	Enhances the scalability by dividing transactions into smaller group to be verified parallelly through miners.
Tezos (Goodman, 2014)	Public, Private	PoS	XTZ	Michelson	Enables formal verification of onchain code.
Improves security with Michelson.
Provides cryptographic proof of arbitrarily complex transactions.
Allows stakeholders vote on changes to the protocol.
Provides security token offering (STO).
Quorum (Home — Quorum, 0000, Quorum Whitepaper, 2018)	Public, Private	Permissioned	Majority voting	Ether	Solidity	Free-of-cost transactions.
Running private transactions between selected parties by constellation.
HyperLedger fabric (Hyperledger.org, 2018)	Private	BFT	N/A	GoLang, Nodejs	Allows user to fully control performance and scalability.
The contracts are installed on nodes rather than on network.
It requires to deploy the contract code on every endorser on the network.
EOS (EOS.IO Technical White Paper v2, 2018)	Public, Private	dPoS	N/A	C++, C	Zero fee transactions.
Works on an ownership model, which allows developer to predict hosting costs.
High scalability and flexibility due to using dPoS and C++ respectively.
Faster transaction due to using WASM programming language.
Neo White Paper (2017)	Private	dBFT	NeoGas	C#, VB.Net, F#, Java, Kotlin, Python;	Better performance and scaling due to using dBFT.
Using NEO token to generate GAS tokens.
Secure against quantum cryptography due to using lattice cryptography cryptosystem.
Stellar (Mazieres, 2016)	Public, Private	FBA	Stellar
Lumen
(XLM)	All languages	Not Turing complete.
Focus on financial services (transferring money).
Developed as an agreement between multiple parties, which will be enforced by transactions.
Corda (Brown, 2018)	Private	aBFT	N/A	Java, Kotlin	Supports Tailor-made for financial agreements.
The CorDapps are installed at node level, rather than on the network.
Main application for financial and healthcare enterprises.
OpenChain (OPEN Chain White Paper, 2017)	Private	Partitioned	N/A	All languages	Focus on digital asset management
Creates an instance as a single authority for validation of transactions.
No need to have a single central ledger (each organization controls its own Openchain instance.)
a
Blockchain Type.

b
Ledger Type.

c
Consensus.

d
Cryptocurrency.

e
Smart Contract Language.

4. Permissionless blockchain
Permissionless blockchains emerged as a form of Distributed Ledger Technology (DLT) that is constructed on the basis of cryptographic protocols to be resistant to tampering while storing and transmitting information through peer-to-peer (P2P) networks (Neudecker and Hartenstein, 2019). The blockchain users are capable of creating personal addresses to be interacted with the network by submitting transactions to the ledgers with the aim of modifying the state. Since permissionless blockchains are public and anyone can join the network, the authorized users should only be able to submit a request by signing the transactions using their private keys.

Furthermore, all parties require to leverage the mining protocol to verify transactions and add them as a new block in the network. To make sure about the consistency of states, miners follow a consensus protocol to create a new block. Despite the anonymity of participants, the permissionless blockchains can be secure against the security attacks (i.e. Sybil Douceur, 2002) by employing proof-of-work (PoW) mechanism where in the miners must be able to solve a mathematical puzzle. Litecoin (2011), Ethereum (Buterin, 2014), Monero coin (Möser et al., 2018), Dogecoin (Chohan, 2018) are a few PoW-based cryptocurrencies. However, the PoW protocol is not efficient due to high computation and storage overhead on miners and the 51% risk (controlling more than 50% of network’s capacity may result in breaking the blockchain security) (Bastiaan, 2015).

The majority of permissionless blockchain systems, i.e., Ethereum, support smart contracts as a self-executed transaction once specific policies are met. They also provide the following characteristics: (1) Decentralization: There is not ant requirement to have a central authority to monitor the network and ledgers; (2) Digital assets: refers to supporting a kind of user-incentivizing token as a financial system that may grow or fall based on blockchain state; (3) Anonymity: There is no requirement to force users to register in such networks; and (4) Transparency: All participants have access to the existing information through their private keys. Therefore, the permissionless blockchain have a great potential to be used as a basis to implement an EHR access control method. The rest of this section firstly highlights the Ethereum as a most famous permissionless blockchain and then critically reviews permissionless access control methods in healthcare.

4.1. Ethereum-based smart contract (permissionless)
Ethereum has been emerged as an open blockchain platform, which supports the development of smart contracts in the real environment. The main idea behind Ethereum is to provide a flexible and programmable blockchain-based environment to develop decentralized applications (Dapp) with the capability of supporting self-manner interaction between peers, performing complex computation, and preventing fraud and tamper possibility. The main difference between Ethereum and bitcoin is introducing an account as a new concept, which is the Ethereum’s basic unit. These accounts can be divided into two categories: (1) Externally Owned Accounts (EOAs): are governed by humans while keeping private keys; and (2) Contract Accounts: are internally programmed to be handled by the EOAs. The contract accounts, indeed, are constructing the smart contract features because they can only be executed by an EOA transaction (Wood, 2019).

EOAs are the only accounts who are able to perform the actions in Ethereum by issuing transactions, which are the signed message with EOAs’ private keys, to other accounts. The transactions will be submitted to blockchain nodes to be verified and executed by Ethereum Virtual Machines (EVMs) on each node. To prevent the Distributed Denial of Services (DDoS) attack and infinite loops, the sender must pay the transaction fee in ether as a native Ethereum currency. However, the ether price may have a catastrophic effect on Ethereum system. To alleviate such side effects, the Ethereum inventors suggested Gas as a unit of calculating the computation cost of executing transactions or smart contracts in the Ethereum network. This is because the computation cost will not change quickly (Aziz, 2018). Indeed, users have to buy gas on the basis of the Gas price because each transition requires a specific amount of gas.

Generally, a transaction as a signed instruction in Ethereumblockchain includes the following components: the number of transactions sent by sender, Gas price, The maximum amount of gas in current transaction (Gas limit), destination account or recipient address, and the number of Wei (the smallest unit of ether) to be transferred to the recipient or to a new account (Wood, 2019).

Fig. 2 shows a transaction work-flow through Ethereum in which an EOA submit a signed transaction to the miners to be validated and broadcast into the Ethereum network. The miners validate and execute the transactions on the basis of their order in the transaction pool. According to the type of transaction, the miners must transfer money to other accounts, create a new contract, or invoke and existing contract. The miners also require solving a Proof-of-Work (PoW) problem to be able to create a new block to add to the blockchain and also broadcast it to other nodes.

4.2. EHR access control using permissionless-based smart contract
Azaria et al. (2016) was the first to propose a decentralized method, namely MedRec, which allows patients to securely access and share their EHRs across divers healthcare providers and treatment sites through Ethereum blockchain. The main idea behind MedRec is to leverage the smart contracts features to set and store permission policies and corresponding operations on the blockchain network instead of original EHRs due to limitation of storage and size of EHRs. To achieve these goals, three diverse smart contracts was developed, such as (1) Register Contract (RC): conceals the patients’ identification by mapping their identity to the Ethereum addresses using a Domain Name System (DNS) technique; (2) Patient–Provider Relationship Contract (PPR): designed to address data storage issue in blockchain systems by defining a pointer to healthcare providers’ databases, which stores patients’ EHRs and the associated access permissions; and (3) Summary Contract (SC): to show the patents’ medical record history in the system by keeping a list of patients’ PPRs as all existing patients’ activities.

Yang and Yang (2017) extended MedRec method, namely advance MedRec, by leveraging signcryption (Morales-Sandoval et al., 2018) and attribute-based encryption (ABE) (Arita, 2012) to preserve authentication and the privacy of the patients. Indeed, before uploading EHRs to the local servers, the patient has to encrypt such data  by an AES algorithm keyed with a K. The encryption key  needs to be encrypted  by using patient attribute key set generated by existing key issuers. Finally, the encrypted EHRs and Key will be hashed  with a secure one-way hash function and then signed by with patients’ private keys, which were created based on their Ethereum addresses. Since each patient can have different addresses, the generated signature may not release his/her identity. Advance MedRec helps patients to share EHRs with other clients and centers providers by defining an accurate access control policy, which will be generated by attribute key issuers.

Healthcare data gateways (HGD) (Yue et al., 2016) focuses on the patient’s privacy issue for managing access control over the stored EHRs in healthcare provider databases through a cloud blockchain. HGD composes of three layers, including: (1) Storage Layer: which is a cloud blockchain to store EHRs, (2) Data Usage Layer: which indicates all healthcare providers who are authorized to access the data, and (3) Data Management Layer: works as an interval between data usage and data storage layers and is responsible to manage the different types of personal data (i.e., records and images) using Indicator Centric Schema (ICS) model while evaluating all access requests. The key idea to design ICS is considering a single table to store all patient’s data, which consists of the following columns: time of data generation, indicator to describe the meaning of data), data type, actual data value, and indicator category. ICS creates a more flexible and efficient way to integrate healthcare data. HGD overcomes the privacy issue by developing a purpose-centric access control model based on ICS wherein each data access request includes the indicator, access purpose, and retention period. Data access requests are divided based on the purposes, into two categories, such as raw purpose for users (r-users) who need to access raw data, and process purpose which is used by p-users to analyze raw data and get some results. The access will be granted as a URL link and a QR-code of target HGD.

In Vora et al. (2018), a blockchain-based framework was proposed, namely BHEEM, for securely storing and transferring EHRs among healthcare providers and patients. The blockchain network nodes in the designed framework are divided into three groups: (1) Full Nodes: are responsible to store all transactions for every block; (2) Light Nodes: are storing the block headers for verifying any changes in blocks or transactions; and (3) Archive Nodes: are used to retrieve the required data by storing all transaction for each block along with the receipts of the transactions. BHEEM overcomes data storage issue of blockchains using a database manager entity for generating a link to the patients’ EHRs in local databases. BHEEM consists of five smart contracts with specific applications and requirements, such as (1) Classification Contract: to categorize the nodes into patients, care providers, and external parties; (2) Consensus Contract: to store the list of registered users, voting permission, and Ethereal address of the nodes with the aim of validating the newer nodes that will be added to the blockchain; (3) Service Contracts: to track the delegated access control of each patient by storing the existing relationships and permission requests; (4) Owner Contract: to track the healthcare providers that have access and are using the patients’ records; and (5) Permissions Contract: stores the address of the existing nodes, which are interacting with EHRs in local databases to define and validate the different levels of access control (i.e., read, write, transfer, and owner) for each EHR. The permission contract is also responsible to initiate, revoke, and modify an existing permission. For example, to transfer the patient’s EHR to a provider, permission contract, firstly check that the patient is the owner of the data and validate the permission changes. To preserve the data privacy, the authors decided to use a differential privacy model (Dwork, 2008) for adding noises to the transactions, which was not implemented.

Zhang et al. (2018a) focused on HL7 Fast Healthcare Interoperability Resources (FHIR) standard by developing a blockchain-based architecture to securely sharing clinical data, namely FHIRChain. The designed architecture meets the critical requirements of medical data sharing, such as: (1) Secure data storage and transmission through storing sensitive data locally (i.e., local databases or cloud storage providers) and solely transferring its encrypted reference pointers in the blockchain; (2) Consistent permission to access databases by using a token-based permission model based on encrypt-then-authenticate method (Krawczyk, 2001) in which the signed EHRs will be signed with data owner’s private key and then encrypted using the requester’ digital health identities (public key) before storing in a smart contract for ubiquitous access as described in Fig. 3; (3) Using JSON Crockford (2006) method to provide a consistent data formats for sharing information on web under HL7 FHIR standard (Bender and Sartipi, 2013); and (4) Applying Model/View/Controller (MVC) design pattern (Leff and Rayfield, 2001) with the aim of managing the system responses to change state, managing information representation, and interpreting user inputs into appropriate messages respectively. As a result, it is inessential to update the existing smart contract when upgrading the system. FHIRChain consists of two smart contracts including registry smart contract and Access smart contract. Registry smart contract is responsible to keep digital health identities of healthcare providers to map such identities to their public encryption and signing keys. Access smart contract is designed as a log file to track the patients’ interactions and requests and provide a map between patients’ public keys and authorizations to custom-named access tokens.


Download : Download high-res image (329KB)
Download : Download full-size image
Fig. 3. FHIRChain access control.

The majority of proposed method for securing EHRs depend on local databases or the cloud storage to store the patients’ personal health information off-chain. It helps healthcare providers to adopt blockchain techniques with minimum maintenance cost while increasing the availability of medical services and EHRs. However, the lack of supporting decentralized architecture in cloud computing has a direct side effects on the proposed system specialty to manage the large-scale data. A promising solution to overcome such limitations is to leverage Inter Planetary File System (IPFS) as a decentralized peer-to-peer file system to develop secure file sharing in blockchain network (Benet, 2014). Indeed, IPFS removing the role of central server by allowing clients to keep their information in a network of distributed storage nodes on the original file system. As a result, IPFS can increase the storage throughput and data retrieval without requiring single point of failure. The main idea behind IPFS is to use Distributed Hash Tables (DHTs) to simplify the routing and identify the nodes (peers) on the network by storing hashes of contents as keys in DHT nodes (Distributed Hash Tables, 2020). In this study, integrating smart contracts concept with IPFS allows the clients to perform secure access control over the distributed storage system based on predefined policies for adding or deleting users, retrieving EHRs, and updating the policy lists (Confais et al., 2017).

Nguyen et al. (2019) used the IPFS benefits as a decentralized cloud storage system to develop a secure EHR sharing method. The core idea is to outsource encrypted medical records of patients into the IPFS while the Ethereum blockchain just stores the corresponding hashes along with owner addresses for managing the access permissions. Each patient in the blockchain is identified based on a pair of (patient ID and Area ID) in which the Area ID works as a representative of patients’ living area used to categorize them. The main component of the proposed method is an EHR manager, which is responsible to verify all requests to upload a new EHR to access the existing files through the smart contracts policies.

The work in Omar et al. (2020) focused on clinical trails (CT) and developed an Ethereum-based smart contract framework to deal with the CT data management issue where in the data outsourced into the IFPS. Madine et al. (2020) extended this method by proposing a decentralized data management model to enable the patients to fully control the EHRs in a secure and traceable manner. The main idea behind this method is to develop trusted re-encryption oracle nodes with the aim of re-encrypting the patients’ symmetric key to the doctors’ symmetric key. Indeed, a patient is responsible to generate the re-encryption key whenever received an access request from the trusted doctor. The re-encryption oracles retrieve the requested EHRs and encrypted symmetric key from IFPS for re-encrypting and transferring to the doctor. The oracles also generate the hash of the encrypted symmetric key and send it to the patient’s smart contract for the evaluation purposes. To prevent oracle misbehaviors, reputation system was designed on the basis of two main factors: (1) the interactions between the oracles and smart contracts: which depends on the verification of the hash of symmetric key, and (2) the interaction between oracles and doctors: which will be calculated by the doctors based on the average reputation of the oracle and the number of transactions.

Xu et al. (2019) focused on storage overhead issue of large-scale EHRs as well as the patients’ privacy in public blockchain system. They developed a hybrid blockchain-based privacy preserving scheme, namely Healthchain, in which each EHR must be encrypted using a symmetric encryption algorithm (to protect the patients’ privacy) and stored into the IPFS storage system while its corresponding hash will be kept in blockchain for preserving the data integrity and map data in IPFS storage. Healthchain supports fine-grained access control, which allows the patients to dynamically revoke the requesters’ access permission by updating the keys and upload it to the blockchain. The proposed method also protects the patients’ privacy using a symmetric encryption algorithm, such as AES. Moreover, Healthchain decreases the computation and communication cost of access control by separating data publishing transactions form fine-grained access control transactions. Healthchain consists of two types of blockchain: (1) Userchain as a public blockchain for publishing users’ data, and (2) Docchain as a consortium blockchain to record doctors’ diagnoses. Healthchain, indeed, is a remote patient monitoring system that remotely collects the patients’ data and stores them into the Userchain, whereas the authorized physicians can monitor the patients and store diagnoses into the Docchain. Userchain supports two types of transactions: (1) IoT transactions to preserve the data integrity by storing the hash of encrypted IoT data, and (2) key transactions to provide the access control by storing two symmetric keys as IoT key and diagnosis key to encrypt and decrypt the IoT data and diagnosis respectively. On the other hand, Docchain just has a diagnosis transaction that will be encrypted/decrypted using diagnosis key. To retrieve the diagnosis key and IoT data from IPFS, the authorized physicians must search Userchain to find the patient’s transaction. Finally, the physicians upload the diagnosis into IPFS and its corresponding hash into the Docchain.


Table 2. A comparison of permissionless EHR access control methods.

Methods	Objectives	Drawbacks
MedRec (Azaria et al., 2016)	Designing three different contracts to provide a secure EHR access control while keeping the patients anonymous.	Does not support patients’ authentication and authorization fully.
Advanced MedRec (Yang and Yang, 2017)	Extending MedRec using signcryption and ABE to overcome authentication, authorization, and privacy issues.	The performance of the proposed method is unclear.
HGD (Yue et al., 2016)	Addressing access control issue by using ICS to tabulate the patient data and then categorizing users based on the access requests for submitting transactions.	Does not support identity management;
Insufferable authentication delay and storage by increasing the number of users.
BHEEM (Vora et al., 2018)	Designing five different contracts to provide secure access EHR access control and preserve patients’ privacy over Proof of Vote (PoV) consensus protocol.	The centralized differential privacy protection method incurs high computation overhead in blockchain to preserve privacy of the clients.
FHIRChain (Zhang et al., 2018a)	Applying FHIR requirements into EHR storage while enforcing a secure access control using two different contracts.	Does not control medical errors;
Does not provide data interpretation based on FHIR standard.
Nguyen et al. (2019)	Combination of IPFS storage system and cloud computing to support secure EHR sharing to preserve patients’ privacy.	The performance of the proposed method is only evaluated based on network latency measurements.
Madine et al. (2020)	Designing a decentralized data sharing wherein EHRs access privilege can be delegated using proxy re-encryption by the oracle nodes.	System is not useful for emergency situations wherein the patient is not able to delegate the access to doctors.
Healthchain (Xu et al., 2019)	A Hybrid Blockchain system to support access control and protect privacy while storing data in IPFS storage system.	Although the patient can revoke the doctor’s permission by publishing a new IoT key to the userchain, the doctor still are able to retrieve the information.
Table 2 compares the Permissionless EHR access control methods.

5. Permissioned blockchain
Permissioned blockchains arise as closed ecosystems wherein the participants are known and must register into system before joining, are unable to read the recorded histories and submit a transaction. They usually controlled by centralized organizations as a private network. It is critical requirements and regulations in some enterprises, such as healthcare providers and financial sectors. In other words, the business sectors may not be able to entirely trust permissionless blockchains (i.e., Bitcoin and Ethereum) because of the following limitations: (1) Data Confidentiality and Privacy: Strict privacy requirements of healthcare providers do not allow anonymous users who joined blockchain, to access the sensitive information. To achieve this goal, permissioned blockchain must leverage advanced zero-knowledge proofs (Ben-Sasson et al., 2014), which incurs considerable computation overhead on parties. (2) Scalability and Sequential Execution: The majority of permissionless blockchains rely on sequentially execution of transactions by all peers, which has a catastrophic side effect on blockchain throughput and scalability. Moreover, these blockchain systems are at risk of DoS attack, which dramatically reduce their performance and cause excessive delay in executing smart contracts. To overcome such issues, public blockchains require to introduce a specific cryptocurrency (i.e., Ether (ETH) in Ethereum) (Androulaki et al., 2018). (3) Storage Overhead Issue: All peers in public blockchain store all data and transactions, which requires high storage capacity and incurs high maintenance cost on such organizations. To cope with issue, it is recommended to keep the data off-chain, which may put data at risk. (4) Consensus Model: The majority of permissionless (public) blockchains depend on a consensus based on proof-of-work (PoW), which requires high computation power. However, the permission blockchains use a traditional Byzantine-fault tolerant (BFT) consensus model, which incurs less computation overhead, because the peers are distinguishable (Pros and Cons, 2018).

5.1. Hyperledger based smart contract (permissioned)
Hyperledger Fabric was emerged as a permissioned blockchain network wherein all peers must be identifiable. Its architecture includes three essential services, such as: (1) Membership Service (MS): is used to manage identity, privacy and confidentiality of all peers in a private network, which is a critical requirement in permissioned blockchain systems. After registering the Hyperledger participants to get identities, the Attribute Authority will generate their secret keys that helps them to participant in issuing transactions and create a link between users and roles. (2) Blockchain Service: includes consensus manger, distributed ledger, and P2P protocol components with the aim of managing the ledgers through P2P protocols over HTTP/2 standards. Similar to permissionless blockchain systems, the large-scale files must be stored offchain, while their hashes can be preserved onchain in the distributed ledgers, which have been created based on RocksDB (Home, 0000) architecture. Hyperledger uses a traditional crash fault tolerant (CFT) censuses model due to identifiability of Hyperledger participants. (3) Chaincode (Smart Contract) Service: is a decentralized transactional program that uses a Docker to provide a secure sandbox to execute chaincode and validate the nodes. Chincode service can create a locked down container and a set of signed base images that consists of secure operating system, chaincode language, and SDK images to support different languages, such as Golang, Java, Node.js (Hyperledger, 2019).

Peers are an important component of Hyperledger, which host ledgers and chaincodes. Hyperledger transactions, which run a function on the ledger, are categorized into two groups, including code-deploying transaction as an initial function to deploy, update or terminate a piece of chaincode on the blockchain, and code-invoking transaction, which will be used to invoke chaincode functions for executing transactions on blockchain (Hyperledger, 2019).

To execute an untrusted code in an untrusted environment, Hyperledger leverages a execute-order-validate paradigm for transactions with the aim of overcoming the permissioned blockchain issues, such as scalability, performance, and confidentiality. The Hyperledger transaction flows into three phases: (1) Execution Phase: The transaction proposal will be signed and sent to other endorser(s) who is/are responsible to validate the transaction based on existing policies by invoking chaincode functions. (2) Ordering Phase: Grouping the transactions into blocks and creating a hash-chained sequence of blocks comprising transactions. (3) Validation Phase: Checking the validity of the new blocks to find any violation with the existing policies configured for the chaincode and adding them to the locally stored ledger after updating the blockchain state (Wang et al., 2019, Androulaki et al., 2018).

5.2. EHR access control using permissioned blockchain
Hardjono and Pentland (2016) was the first to propose a permissioned blockchain method, namely ChainAchor, to manage EHR access control security while anonymizing the data owner’s identity by employing the EPID zero-knowledge proof scheme (Brickell and Li, 2012). Indeed, EPID zero-knowledge proof scheme helps a user to have multiple distinct EPID private-keys to sign a transaction while there is only a single EPID public key to verify it. The main components of ChainAchor are Permissions Issuer (PI) and Permissions Verifier (PV). The PI is responsible to provide some user-specific keying materials for each user to prove his/her membership to the PV based on the zero-knowledge proof (ZKP) protocol with the aim of receiving the transaction public key. The transaction public key must be stated in a PV database. Since a single user can have multiple public keys the PV is unable to prove the identity of the user. ChainAchor enforces access control by employing the consensus nodes for verifying the signed transaction using the existing public keys in PV database. As a result, unknown transaction can be dropped easily through the proposed scheme due to the lack of public key in the PV database.

In Peterson et al. (2016), a permissioned blockchain-based method is developed to support EHR sharing in which the original data stored offchain based on Fast Healthcare Interoperability Resources (FHIR) while the URL will be recorded onchain. The key idea of the proposed method is to design a Proof of Interoperability (PoI) consensus protocol to confirm that the transactions are interoperable based on a known set of structural and semantic restrictions. According to the PoI, the user who submits a transaction, knows which consensus node will be selected as a miner without having to distributing to the entire network. On the other hand, the authorized user can access the FHIR URL by querying the blockchain using keywords search in the encrypted transactions (Chang and Mitzenmacher, 2005) to prevent data leakage. Similar to Bitcoin model, the address of data in blockchain was used as a patients’ identifier to preserve the anonymization. This is because each patient has more than a block address.

The work in Tanwar et al. (2020) designs an access control method for managing EHRs securely on the basis of Hyperledger system. The core idea is to consider various chaincodes, such as GrantAccess and RevokeAccess to assign or revoke a permission to/from a requester. The main component of developed architecture is a Membership Service Provider (MSP) which is responsible to register the patients and healthcare providers and generating the public and private keys.

Zhang and Poslad (2018) used Shamir’s secret sharing (SSharing) (Shamir, 1979) to authenticate the patients and requesters for developing a granular access control scheme. SSharing (Shamir, 1979) is known as a common access control method, which indicates if a secret  is divided into  pieces and shared among  parties in such a way that the secret  can be reconstructed from any  pieces, it is impossible to recreate the secret with fewer than k shares. As a result, there is no requirement to authenticate the participant by using public key infrastructure (PKI). The authors used a cloud chain to store the EHRs in cloud-based blockchain. After outsourcing the EHRs in cloud chain, the authorized users are able to submit a query to access the data through an agent layer, which is responsible to aggregate all queries. The submitted query may include a request to access certain blocks or all the data of specific attributes. After validating the query, the agent sent the query to the storage layer to retrieve the requested data. Finally, the agent encrypts the retrieved data by AES method and sends it to the user along with a random number that will be used by the user to regenerate the key to decrypt the EHR based on SSharing.

MeDShare (Xia et al., 2017a) is a medical data management method based on the smart contracts development, which allows patients to share the EHRs, monitor the access permissions, and track any changes on the EHRs. MeDShare consists of a three-tier architecture, including (1) data layer to classify the users; (2) data query as an intermediate layer to process the access request and translating the actions to/from smart contracts; and (3) data structure layer is responsible to authenticate the request (by the authenticator component), store and check the data access and modification requests (by using the smart contracts and permission database). Authenticator plays a critical rule in the designed architecture as a central authority unit to authenticate the requester through his/her signature. Then, the access request will be delivered to the processing and consensus nodes to store the request in the blockchain for auditing trail as well as retrieve the corresponding data from the cloud storage. Before transferring the data to the authenticator, the processing and consensus node asks smart contracts to attach sets of rules to the data, check the violation possibility based on owners’ policies and keep it into the permissioned database. To reduce the number of violation reports, the data have been classified into high and low sensitive with the aim of ignoring the violation report of low sensitive data by modifying the smart contracts. However, any action on highly sensitive data must be monitored and reported by smart contracts to identify any possible violation result in revoking the access to the requested data.

Blockchain-Based Data Sharing (BBDS) (Xia et al., 2017b) method uses a combination of cloud storage and permissioned blockchain system to support a secure EHR sharing and access management mechanism wherein cloud storage leveraged as a share repository to store EHRs and the blockchain keeps the access duration. The users are able to access the data after submitting a request to join the permissioned blockchain. As shown in Fig. 4, membership authentication and verification in BBDS includes two steps: (1) Applying identity based authentication (IBA) protocol (Wu et al., 2017) to set up a share key to securely communicate with the issuer which is responsible to generate the membership verification key along with some parameters based on user’s identity, (2) Playing a change-response authentication protocol between the user and the verifier which is responsible to create the membership private key based on the membership verification key. The user also generates the transaction key pair (asymmetric keys) on the basis of received parameters from the issuer. After joining the permissioned blockchain, the user is able to create an EHR access request by the membership private key, sign the request by using the transaction public key, and submit it to a pool unprocessed request. The unprocessed blocks must be validated based on the PoW consensus protocol with the aim of granting access to the cloud storage and adding the block to the blockchain.

In Dubovitskaya et al. (2017), a Hyperledger blockchain is used to develop a secure access control over EHRs, where in the data access granted to the authorized users on the basis of chaincode policies. The key components of the proposed permissioned access control method is a membership service in which the users (, including patient or physician role) must register firstly to be able to upload data or request to access the outsource data into cloud storage. After registering the user, the membership service generates a key pair for signing and verifying the signature along with another key pair for sharing the block securely. The patients also need a symmetric encryption key to encrypt the EHRs before outsourcing to the cloud storage (as an offchain data storage system). If the patient requires sharing the data with a physician, the patient’s encryption key can be encrypted by physician’s public key. When a blockchain nodes received the requests through role-based APIs of users, the leader node validates the transaction based on PFFT consensus protocol (Castro and Liskov, 2002). After that, the transaction can be executed on these nodes based on the predefined chaincode policies. The patients’ metadata stored in chaincode consists of (1) permissions, which determine physicians access control level according to their IDs and (2) clinical metadata that includes hash of file and a pointer to the offchain EHR in the cloud storage. It is important to note that the proposed method also preserved the privacy of the patients by anonymizing the information about the patients by a hash of the concatenation of patients’ symmetric keys and personally identifiable information (PII).


Download : Download high-res image (378KB)
Download : Download full-size image
Fig. 4. BBDS architecture.

Dagher et al. (2018) proposed a secure data access control method, namely Ancile, over a private Ethereum as a permissioned blockchain in which the original EHRs stored in local database of healthcare providers while the hashes of the data references are stored’ in the blockchain. Ancile uses proxy re-encryption method (Zhou et al., 2005) to facilitate the EHRs transmission to the trusted third party by re-encrypting the EHRs based on requester public key. Ancile (Dagher et al., 2018) utilizes six smart contracts to meet EHRs management requirements. (1) Consensus Contract: maintains the block mining responsibility on the basis of QuorumChain algorithm (Quorum Consensus, 2020). It also validates the new node request to access the higher level of classification during new node registration by storing the Ethereum addresses of nodes and the voting permission. (2) Classification Contract: provides three level for nodes (i.e., patients, providers, and third-party) and will be used during a node registration process to verify its identity without having to repeat the consensus protocol. (3) Service History Contract: will be created during node registration to keep the healthcare relationship histories of the node. It is also used to inquiry a patient for permission confirmation before allowing a provider to create a relationship with the patient to use his/her EHRs. (4) Ownership Contract (OC): tracks and lists the patients’ records generated by the healthcare providers. The OC, however, does not store the original EHRs due to the storage limitation. Instead, the hashes of EHRs will recorded in the blockchain system while the query link information will be sent through HTTPS link. Moreover, the OC keeps the hashes of transferred query links to ensure the integrity of the links. (5) Permissions Contract: is a unique contract for each record that will be created by the OC to show the access control level of each node, such as: Read only, Transfer for assigning a read only access in special condition, Owner with full control over the permission contract to add or modify nodes with any access control level to current contract, and Blind to shows the list of entities who can view the patient’s records. (6) Re-encryption Contract: used to facilitate the EHRs transmission to the trusted third party by performing re-encrypting the data owners’ symmetric through the designed proxy nodes.

Rouhani et al. (2018) designed a Hyperledger based data access control method, namely MediChain, where in the original EHRs must be outsourced into the cloud storage while the hashes of their uniform resource identifiers (URIs) will be stored in the blockchain. MediaChain allows data owners to define Discretionary Access Control (DAC) polices for the outsourced data through Business Network Archive (BNA) feature of chaincode in Hyperledger blockchain. However, the proposed method does not support most of access control requirements, such as access revocation, delegation, and policy update operations. The work in Dias et al. (2020) addressed the aforementioned issues by proposing an access control method for managing EHRs on the basis of the eXtensible Access Control Markup Language (XACML) standard where in access policies must be stored in a consortium blockchain. When a user, who wants to access the EHRs, submits an access request transaction, the miners check the request based on the existing policies in the blockchain. If there were not any predefined policies in the blockchain, an access request must be transferred to the data owner with the aim of defining a new access policy or denying the request.

EHR access control methods must be able to handle emergency situations to treat patients who are unable to delegate the required access permission to healthcare centers. The majority of the exiting EHR access control schemes do not have capability to overcome this issue due to lack of predefined access policies. Rajput et al. (2019) proposed an emergency access control management system (EACMS) in which some time-based polices were predefined in emergency conditions by using the chaincode of Hyperledger blockchain. However, there is not any information about the authentication, privacy, access delegation and revocation processes. Although the authors claim that EHRs will be kept offchain, there is not any detail about data storage. A new incentive mechanism was developed in Yang and Li (2018) for adding a new block into permissioned blockchain with the application in protecting EHRs against tampering and misuse. The main idea behind of the proposed incentive mechanism is to introduce a concept of significance of healthcare provider as a key factor to choose a provider who has to create a new block. Indeed, the significance of each provider will be calculated on the basis of the provider efforts to create and maintain new blocks using the following parameters: the number of records in the provider, the value of a record for the patient, the number of providers having the same records as a redundancy indicator. The significance concept can be dynamically updated, which allows the provider with more items of an existing record to create a new block or record. In other words, the significance of the selected provider will be increased when a provider is selected to create a new block, or a new record based on the value of the record. The smart contract of the proposed blockchain includes two contracts: (1) Record Relationship Contract (RRC): will be created for each EHR to shows the ownership, permission, significance of the record along with a log memo for tracking editing and reading permissions; and (2) Summary Contract: is designed to help the patients to control the permissions and securely share the EHRs with different providers. The smart contract records a pointer to RRC, the access permission (R/W), and a timestamp of last update for each record. These smart contracts allow the patients to securely track their EHRs and assigned permissions.


Download : Download high-res image (436KB)
Download : Download full-size image
Fig. 5. BSPP architecture.

Confidentiality and privacy of the patients’ medical data have been recognized as vital requirements of HER access control methods. Although many researches have been done to meet such requirements, the majority of the existing methods make the patients’ ID publicly available in blockchain transactions. Zhang and Lin (2018) focused on privacy preserving issue for securely sharing EHRs. The main contribution of this work (namely BSPP) is to design a private blockchain for storing EHRs in each healthcare provider while a consortium blockchain is used to store the corresponding indexes (keywords) for securely sharing EHRs among healthcare providers. BSPP relies on a system manager component which is responsible to register the users and physicians and record their public key as well as generating a consensus vector to validate the keywords in the consortium blockchain. When a patient refers to a healthcare provider (as shown in Fig. 5), a new block including the patient pseudo ID and the encrypted HER, will be added firstly to private blockchain, and then the secure indexes of all new blocks must be added to the consortium blockchain. A public encryption with keyword search (PEKS) method (Wang et al., 2012) is also used to encrypt the patients’ EHRs along with the corresponding keywords to make such EHRs searchable by the authorized physicians. Moreover, PEKS can be used to generate an identical pseudo identity for each patient by encrypting their original identity to preserve the privacy of the patients. Due to storing the patient’s pseudo identity in each block of the private blockchain, the physicians are unable to explore further records than the required patient’s history records. To add a new block in these blockchains, a new consensus model, namely proof of conformance (PoC), is also proposed on the basis of the polynomial structure of the keywords and the generated token for the patients when registering in the healthcare providers. According to PoC, the generated block by the physician will be added to the blockchain if more than  of the existing physicians or hospital servers approve the block generator identity and the secure token.

Hirtan et al. (2019) leveraged almost the same idea to develop privacy-preserving data access control for securely sharing EHRs by designing two types of blockchains as mainchain and sidechain. The network nodes are also divided into two categories: (1) Trusted Nodes, including approved healthcare providers, which can access bothblockchains and are responsible to validate the transactions, and (2) Untrusted Nodes, including all other institutes, which are interested in accessing the patients’ EHRs. Mainchain, indeed, is a permissioned blockchain where in trusted nodes are only able to add new blocks, while other nodes can send requests and browse the ledger. Mainchain supports two types of transactions as storage and policy. Storage transaction will be created by healthcare providers after visiting a patient and includes a unique temporary patient ID (that has been issued and stored by sidechain based on patients’ identity), a patient’s signature as a transaction approval, and a pointer to patient’s medical data in local database of healthcare providers. It is important to mention that sidechain is designed to create a map between temporary patient ID and original patient ID through link transaction issued by trusted healthcare providers. The next transaction of mainchain is policy transaction, which allows the patients to create a certain level of access control and data chairing for their medical data by defining the access permissioned blocks. The policy transaction also conceals original patient ID by storing patient’s temporary ID, patient’s signature, and type of policy. As a result, the proposed system preserves the data confidentiality by supporting patient’s anonymity through sidechains and temporary IDs, while using RSA cryptosystem to sign the transactions. The proposed blockchains use a new consensus protocol which relies on the approval of half of the nodes to allow a node to generate a new block. Fig. 6 illustrates the architecture of the proposed method.

The work in Liu et al. (2019) suggested a decentralized access control method among the healthcare providers by using proxy re-encryption (Blaze et al., 1998) wherein each healthcare provider store the patients’ EHRs in a private and permissioned blockchain. The proposed scheme depends on a secure system management (SM) as a trusted third part managed by health department, which is responsible to generate public/private keys for healthcare providers along with the re-encryption key based on requester’s public key. When a physician in a hospital requires to access all available EHRs of a patient in the existing blockchains of healthcare providers, the SM retrieves the EHRs from local blockchains, generates the encryption key based on the receivers’ public key, and re-encrypts the EHRs before sending to the physician. To decrease the computation and communication cost of the local blockchain systems, dPoS consensus protocol was improved by designating the SM as a unique component to evaluate the published records by physicians with the aim of increasing or decreasing physicians’ credit scores. Moreover, a Symptoms-matching mechanism designed to help patients, who registered in different healthcare system and have the same disease symptoms, to discuss together using a secure session key.


Download : Download high-res image (573KB)
Download : Download full-size image
Fig. 6. Hirtan access control architecture.

A traditional way to manage the access control of EHRs is to use the attribute-based encryption (ABE) (Bethencourt et al., 2007) and identity-based encryption (IBE) methods to preserve the security of the medical data over cloud storage. However, the majority of the proposed methods (as reviewed in Sookhak et al., 2017) rely on a trusted authority or central server. Wang and Song (2018) addressed this issue by using a consortium blockchain to develop a decentralized EHR sharing methods for insurance companies. To preserve the confidentiality and authentication, and manage the access control, a cipher-text-policy attribute-based encryption (CP-ABE (Bethencourt et al., 2007, Waters, 2011)) cryptosystem is used to encrypt and decrypt the messages by authorized clients. The proposed method uses a central key generation center to create the required keys for patients, hospitals, cloud service providers, and insurance companies. When a patient wants to share the EHRs (generated in a hospital) with an insurance company, he/she must sign an authorization letter with his private key and submit the signed letter to hospital and the blockchain data pool. Then, the hospital encrypts the patient’s EHRs based on the access policies and submits the encrypted EHRs to the blockchain data pool after signing the cipher-text. Before processing the information based on the consensus protocol, the consensus node requires matching the authorization letter and encrypted EHR and then verifying the signature of the provider. Finally, the encrypted data will be outsourced in the cloud storage and its corresponding address will be recorded in the blockchain.

Hyperledger composer (Introduction — Hyperledger Composer, 2019) is an open development framework under Hyperledger Company was developed to easily integrate the current business applications with the blockchain model. One of the key components of Hyperledger composer is supporting a set of access control logs and smart contracts. Guo et al. (2019) used such benefits of Hyperledger composer to propose an EHR access control method in which the medical data are outsourced in edge computing and the blockchain just stores its URL. After uploading the patient’ medical data in edge computing, an attribute-based access control will be applied on EHRs while the policies have been extracted by using abbreviated language for authorization (ALFA) with the aim of enforcing ABE on EHRs. After that, the physical address of the EHRs on the edge computing nodes will be created and transferred to the patient as an one-time self-destructing URL (One Time, 0000). Then, the patient requires registering in Hyperledger composer to define the Access Control Lists (ACLs) of policies with the aim of delegating permission to healthcare providers. ACL policy includes five components, such as subject to define the policy holder, operations to define access control level (R/W/U), object that refers to EHRs, conditions to define the policies through logical gates, and action as a final action to grant access or deny the request. As a result, any access request will be checked against ACLs through chaincode and the access will be granted if the ABAC policies are met. However, the proposed method may not preserve the privacy of the patients by releasing their personal information. To overcome this issue, an attribute-based multi-signature (ABMS) scheme is created in Guo et al. (2020), which is able to anonymously authenticate patients authenticate while leveraging ABE to encrypt the EHRs. ABMS as an extension scheme of Li et al. (2010) and Shahandashti and Safavi-Naini (2009), can be created in Hyperledger Ursa (Hyperledger Ursa – Hyperledger, 0000), which provides APIs for different signatures, is responsible to generate the keys while signing and verifying the patients’ ABMS. After initializing the participants (including patients, healthcare providers, and other entities) by their attributes (i.e., patient ID and driving license), BLS signature (Boneh et al., 2001) scheme will be used to generate a key pairs for each attribute to sign the hash of participants’ attribute values before sending to blockchain and verify their signatures on the basis of BLS bilinear pairing. Fig. 7 shows how the proposed method outsources the patient’s EHRs into edge computing and provides a secure access control.


Download : Download high-res image (367KB)
Download : Download full-size image
Fig. 7. Guo access control architecture.


Download : Download high-res image (579KB)
Download : Download full-size image
Fig. 8. Taxonomy of blockchain-based EHR access control methods.

The work in Niu et al. (2020), leveraged an ABE to meet the multi-user retrieval requirement of EHR managing system and provides a fine-grained access control of users. The core idea behind this method is to store the encrypted EHRs in local cloud storage system of healthcare providers whereas the extract keywords will be published into a permissioned blockchain. As a result, the users are only able to access the patient’s EHRs by obtaining his search trapdoors to run keyword searching through the blockchain.

Table 3 compares permissioned EHR access control methods by focusing on their advantages and disadvantages.


Table 3. A comparison of permissioned EHR access control methods.

Methods	Objectives	Drawbacks
ChainAchor (Hardjono and Pentland, 2016)	Providing anonymous identity verification through EPID zero-knowledge proof scheme in an EHR storage and access control model.	Lack of performance justification;
Peterson et al. (2016)	Utilizing PoI consensus protocol to facilitate data access control in permission smart contracts.	Lack of permission delegating and revoking;
Offchain data storage structure is unclear;
Tanwar et al. (2020)	Developing a Hyperledger-based access control to securely manage EHRs.	Incurs high storage overhead;
Dependents on MSP;
Zhang and Poslad (2018)	Utilizing SSharing scheme to authenticate the participants in a blockchain-based access control.	Incurs high storage overhead;
A centralized method due to developing blockchain over cloud;
MeDShare (Xia et al., 2017a)	A cloud-based method to support data access control using smart contact policies where in EHRs are classified from low to highly sensitive to reduce the policy violation reports.	Shares the user trust issue in cloud computing;
The performance of the proposed method is only evaluated based on network latency measurements;
BBDS (Xia et al., 2017b)	Utilizing permissioned blockchain to develop an efficient access control while outsourcing the original EHRS in cloud computing and authenticating users through identity-based method.	Lack of detailed solutions for data owners and users;
Dubovitskaya et al. (2017)	Developing an EHR access control method to simplify the patient monitoring and decision making process while authenticating the patients using a combination of PII as identity.	Utilizing a central patient authentication centered;
Ancile (Dagher et al., 2018)	A privacy preserving EHR access control method where in the original data can be accessible over HTTPS link.	Insecure against DoS attack;
MediChain (Rouhani et al., 2018)	A Hyperledger based healthcare data management system over cloud storage that allows patients to define DAC policies.	Lack of permission delegating and revoking;
Dias et al. (2020)	Leveraging XACML standard to develop a secure EHR access control.	Lack of performance justification;
Yang and Li (2018)	A tamper resistant EHR access control model by developing a new incentive mechanism as a significance.	Lack of performance justification;
BSPP (Zhang and Lin, 2018)	Developing a hybrid blockchain based access control including: A private blockchain to store EHRs locally, and A consortium blockchain to store the indices of EHRs to provide secure keyword search.	Incurs high storage and communication overhead;
Hirtan et al. (2019)	Developing a hybrid blockchain based access control including: A mainchain to store the EHRs locally and A sidechain to generate and store a unique temporary patient ID for each patient to preserve the privacy.	Incurs high storage overhead;
Liu et al. (2019)	Proposing a decentralized data management among hospitals using proxy re-encryption when EHRs recorded locally in blockchain of hospitals.	Incurs high storage overhead on the blockchain system for storing EHRs;
EACMS (Rajput et al., 2019)	Developing an EHR access control to support emergency conditions.	Lack of authentication and privacy preserving processes;
Wang and Song (2018)	Designing a secure EHR access control by a combination of identity-based encryption and identity-based signatures to sign and verify the EHRs.	Lack of performance justification;
Guo et al. (2019)	Using blockchain to provide a tamper-proof log of access events while storing EHRs on edge nodes (offchain) and imposing ABE to support secure access control.	Incurs high storage and computation overhead;
Niu et al. (2020)	Addressing multi-user retrieval requirement of EHR managing system using an ABE.	The performance of the system just checked based on number of attributes and search time;
6. Taxonomy and comparison of blockchain-based EHR access control methods
Fig. 8 displays a taxonomy of the existing Blockchain-based EHR access control methods, which is categorized on the basis of: Type of blockchain and ledger, Consensus protocol, Access control development strategy (Identification, Authentication and Authorization), Type of EHR storage, and Supporting features.

The attribute of Blockchain type indicates how the users can use or join the blockchain system. In public blockchain, any person who have access to internet connection is able to take part in the transaction verification process while the private blockchain is a centralized network controlled by an authority who check the authentication and authorization level of participants before joining the system. Consortium blockchain is constructed as a private blockchain sharing between several companies, which makes it partial centralized network (Zheng et al., 2017). Hybrid refers to use a combination of public and private or consortium blockchain for preserving the privacy of the patients by storing sensitive data (i.e., physician diagnosis) in private blockchain while the less sensitive data can be store publicly. Healthchain (Xu et al., 2019) is example of hybrid blockchain.

The Ledgers in permissionless blockchain are public without requiring authenticating the users. However, users’ authentication in permissioned blockchains is matter of fact. Indeed, there is a control layer on top of permissioned blockchain to govern the performed action by the permissible participants (Neudecker and Hartenstein, 2019).

There are different consensus protocols for existing blockchain systems: (1) PoW: The networks miners must solve a mathematical puzzle to be eligible to generate the next block (Nakamoto, 2008). (2) PoS: Is an energy efficient consensus protocol wherein the miners will be selected based on the possession of the amount of currency. However, it targets of huge amount of security attack due to negligible mining cost (King and Nadal, 2012). (3) PBFT: Is used in permissioned blockchain (i.e., Hyperledger Fabric) in which a miner will be selected based on three phases, such as pre-prepared, prepared and commit. The miner node can pass each phase by receiving more than 2/3 votes of all nodes. PBFT Is a safe model when not more than 1/3 of replicas are damaged (Castro and Liskov, 1999). (4) PoI: Introduced as an alternative of PoW to enhance its security wherein the miners validate the received transaction to check its interoperability with the existing structural and semantic standards (Zhou et al., 2005). (5) dPoS: Is an improved version of PoS in which the Stakeholders designate a few delegates for block generation and validation, results in increasing the transaction confirmation (Delegated Proof of Stake (DPoS), 2018). (6) dBFT: introduced by NEO blockchain (Home — Ethereum.org, 0000) to address the Byzantine Generals issues, where in the nodes elect delegates who are responsible to track the transactions and record the by building new blocks. (7) Proof of Vote (PoV): Is a voting-based consensus protocol in which there is an election authority to verify the blocks and grant permissions to each node for generating blocks (Li et al., 2018). (8) Proof of Conformance (PoC): designed in Zhang and Lin (2018) based on the validity of the block generator where in more than 2/3 of the existing users must authorize the block generator.

Developing a secure access control method generally relies on adopting an applicable identification, authentication, and authorization (Jabbarpour et al., 2020, Dabbagh et al., 2019). To preserve the identification, the blockchain-based access control methods can be categorized into two groups: (1) Anonymization: when concealing the identity is important, the access control methods just store blockchain address, temporary address of data owner/requester, Pseudo address of data owner, or the digital health identity; (2) Non-anonymization: In this methods the real patient/requester ID will be recorded in the blockchain. Authentication and authorization are two important components of data access control. Common method to check the authentication is applying public key cryptography where in a pair of public and private key must be generated for all parties. However, there are different approaches to check the authorization level of each user in such methods. A group of researchers prefer to define a set of policies by using smart contracts features. Such policies allow the data owner to validate, delegate, or revoke access permission when the smart contracts/or chaincode are triggered. MedRec (Azaria et al., 2016), HGD (Yue et al., 2016) and BHEEM (Vora et al., 2018) are example of this category. The other group of access control schemes have been designed over permissioned blockchain using chaincode feature. This is because permissioned blockchain provides better performance, scalability, and granular access control. However, the security of these methods highly depends on a central authentication unit. Moreover, these methods are more vulnerable to hack and may not lonely support anonymization. An example of this category is MediChain (Rouhani et al., 2018). To overcome these issues in permissioned blockchain and to support patient confidentiality and granular access control, it is possible to use some cryptographic methods, such as IBE, ABE, ABS, IBS, and proxy re-encryption. For instance, a combination of identity-based encryption and identity-based signatures is used in Wang and Song (2018). SSharing (Shamir, 1979) can also be used to provide an access control on the basis of a secret key S that will be divided into n pieces and shared among n parties. To reconstruct the secret key S, it is require to have access to at least k out of n pieces. Example of SShare access control can be find in Zhang and Poslad (2018). Public key encryption with keyword search (PEKS) (Gu et al., 2008) can also be used as an effective approach to reach an encrypted keyword without having to decrypt the data. Finally, it is possible to apply zero-knowledge protocol (ZKP) (Blaze et al., 1998) in access control methods to preserve the privacy of the patients in which the prover can convince the verifier to know a secret without revealing the critical information.

EHR storage attribute indicates the possible way to store EHRs through the blockchain-based access control methods. The easiest way to store and protect the integrity of EHRs is keep them in blockchain, namely onchain storage, which incurs high storage overhead on the system. This is because any data modification or access permission requires to add a new block to the blockchain. The examples of onchain are: (1) Cloud chain: where in the blockchain is designed in cloud computing where the data will be stored in it, and (2) local storage: in which a private blockchain is developed in the local storage system and the data will be stored in the blockchain. The scientist addressed the onchain methods limitations by storing EHRs outside of blockchain, namely offchain, through cloud computing (i.e., BBDS Xia et al., 2017b), edge computing (i.e., Guo et al., 2019), or IPFS (i.e., Healthchain Xu et al., 2019) and store a pointer or URL to the outsourced EHRs in the blockchain.

The features attribute is used to show the effectiveness of the existing methods based on some features or evaluation metrics, such as: (1) Scalability: generally refers how the system handle a growing number of tasks and responsibilities with respect to throughput, latency, bootstrap time, and transaction cost metrics (Croman et al., 2016); (2) Keyword Searching: is an effective technique allow the clients to search among encrypted data without having to decrypt the data to preserve the client’s privacy; (3) Decentralized access: refers the ability to access the data, define policies and privileges without requiring to have a central authority or registrar entity; (4) Access Revocation: is a critical component of access control methods that allows the data owners to revoke the access permission of the users using different techniques, such as proxy re-encryption and ABE (5) Anonymization: indicates concealing the identity of the data owners when outsourcing the information into the cloud, IPFS, edge, and public blockchain systems by different using techniques, such as EPID zero-knowledge proof scheme (Omar et al., 2020), or by using the user’s blockchain address; (6) Data Privacy: is an essential requirement of all healthcare system to protect all individually identifiable health information based on the existing polices, rules, and standards (i.e., Health Insurance Portability and Accountability Act of 1996 (HIPAA) Summary of the HIPAA Privacy Rule — HHS.gov, 2020) by using different cryptographic techniques (i.e., symmetric and asymmetric encryption algorithms). Table 4 compares the blockchain-based EHR access control methods based on the developed taxonomy.

7. Open issues and challenges
This section analyzes the issues and challenges of the existing EHR access control methods along with possible solutions to overcome such issues.

1.
User and Attribute Revocation in Smart Contract-bases access Control Methods: Smart contract is one of the most important components of blockchain technology that can be used by data owners to define access control polices. To support user revocation, the data owner needs to update the smart contract add a new block into the blockchain. However, supporting this feature in big companies with huge number of users is costly and incurs high computation overhead on blockchain. Moreover, such systems are unable to support attribute revocation in which the data owner can simultaneously revoke a permission of a group of users. To deal with these issues, some of the recent access control methods (Wang and Song, 2018, Guo et al., 2019, Niu et al., 2020) employed ABE and IBE methods where in data encryption and decryption as well as permission revocation can be managed on the basis of the existing polices and attributes. However, such methods are not fully secured against backward and forward issue. For example, new members who recently joined the system, have capability to access and decrypt the previously encrypted EHRs without data owner permission. The best way to overcome this issue is to employ lazy revocation cryptosystem (Backes et al., 2006) with the aim of updating the keys in an efficient manner.

2.
Privacy of Outsourced Data in Cloudchain: Data storage is a critical issue in the blockchain technology that can be handled either onchain or offchain. Cloud data storage is a potential way to alleviate this issue by outsourcing the EHRs into cloud and delegate the management of the data into the CSP. However, cloud computing is neither secure nor trustable and CSP can be curious about the medical information and violate the patients’ privacy by leering or releasing EHRs and other private information. Despite the auditability of blockchain technology, the curiosity nature of the CSP put the EHRs at risk. There are different solutions to deal with this issue. Firstly, utilizing Anonymity (Sweeney, 2002) algorithms before outsourcing the data to the cloud with the aim of generalizing the EHRs. anonymity was design as a possible solution for protecting the identity of individuals when sharing sensitive health data in the public data storage. As a result, it is difficult for an attackers to recognize the identity of the individuals in the public data set, such as cloud storage system. This is because a anonymized data set includes a list of properties which is similar to at least another  other records on the possibly identifying variables (El Emam and Dankar, 2008). It is also possible to leverage the Machine learning techniques (Crnoja, 2019) (i.e., federated learning and reinforcement learning) where in the original data can be stored locally and just the learning outcomes can be outsourced in cloud-based blockchain (cloudchain).

3.
Blockchain Scalability: The scalability concept refers to the how the proposed model handles a growing number of work without having to allocating more storage, computation and communication resources (Bondi, 2000). However, scalability has a different definition in the blockchain domain. Croman et al. (2016) defined scalability as the system capability to improve the throughput and bootstrap time while decreasing the latency and cost per transaction. Scalability is known as an essential component of e-health as a modern healthcare system where in there is a collaborative healthcare system among numerous healthcare providers (Nguyen et al., 2019). Consequently, extending the existing EHR access control methods to support a scalable and reliable healthcare system is a critical issue that has not been covered in the literature yet. There are some possible solutions to achieve a scalable access control method in healthcare: (1) developing a scalable IoT architecture to provide a reliable interconnection among IoT devices, blockchain network, and storage system (Xu et al., 2018); (2) developing a scalable PoW consensus protocol to achieve higher throughput by parallelizing the synchronization and validation steps (Ren and Zhou, 2019); (3) developing a scalable BFT consensus protocol by reducing the message complexity , where N indicates the number of validating and mining nodes) on the basis of removing the redundancy or provide a random communication between nodes as presented in Miller et al. (2016).

4.
Latency in Blockchain Network: Latency play a critical role in healthcare domain wherein the quality of life of patients highly depends on real-time healthcare systems, especially when EHRs are collected through the IoT devices and must be recorded into blockchain systems. The issue got worse when the EHRs outsourced on the centralized cloud storage systems. This is because the cloud services may not be available at the vicinity of the healthcare providers, results in considerable networks latency to outsource EHRs. It is worth to note that, network latency has a noticeable impact on developing a scalable blockchain-based system.

The possible solution to address the latency is to store the offchain data into the decentralized storage systems, such as edge computing (i.e., Guo et al., 2019) and IPFS (i.e., Healthchain Xu et al., 2019). However, IPFS may consume a huge amount of the bandwidth which may not be suitable for some of IoT devices.

8. Conclusion
This paper characterized the applications of smart contracts and blockchain technology in healthcare domain with focusing on EHR access control development. We started by explaining the smart contract as the core component of the majority of blockchain based access control methods along with the potential applications, mechanism, and general architecture of smart contracts. Moreover, we taxonomized the EHR access control methods on the basis of the blockchain and ledger types, consensus protocol, access control development strategy (identification, authentication and authorization), and types of EHR storage, aims at categorizing the common methods and presenting the differences and similarities to compare such methods in healthcare. We also highlighted the security issues and challenges of the state-of-the-art access control methods in order to identify the critical requirement to propose a granular access control method using a blockchain technology in healthcare. Finally, this article presented numerous open issues and challenges as future directions for further investigation.


Table 4. A comparison of blockchain-based EHR access control methods based on the basic parameters of taxonomy.

Method	BTa	LTb	Consc	Access control development	EHR storage	Features
Identification	Authentication	Authorization		1d	2e	3f	4g	5h	6i
MedRec (Azaria et al., 2016)	Public	Permissionless	PoW	Ethereum address	Public key cryptography	Smart contract	Offchain: Local storage			*			*
Adv. MedRec (Yang and Yang, 2017)			Public key cryptography, ABE & ABA					*		*	*
HGD (Yue et al., 2016)	N/A	N/A	N/A	Purpose-centric	Onchain: Chain cloud			*		*	*
BHEEM (Vora et al., 2018)	PoV	Ethereum address	Public key cryptography	Smart contract	Offchain: Local storage			*		*	*
FHIRChain (Zhang et al., 2018a)	PoW	Digital health identity	*		*	*		*
Nguyen et al. (2019)	Patient ID & Area ID	Offchain: IPFS			*	*		*
Madine et al. (2020)	N/A	Public key cryptography, Proxy Re-encryption			*	*		*
Healthchain (Xu et al., 2019)	Hybrid	PoW & dBFT	Userchain address	Public key Cryptography	*		*	*		*
ChainAchor (Hardjono and Pentland, 2016)	Private	Permissioned	N/A	EPID ZKP protocol	Public key cryptography, ZKP protocol	ZKP protocol	Onchain: Private blockchain				*	*	*
Peterson et al. (2016)	PoI	Blockchain address	Public key cryptography	Smart contract	Local storage	*				*	*
Tanwar et al. (2020)	BET	MSP Issued ID	Chaincode	Onchain: Private blockchain			*	*		*
Zhang and Poslad (2018)	N/A	N/A	Ssharing	SSharing	Onchain: Chain Cloud			*			
MeDShare (Xia et al., 2017a)	N/A	Patient/ Requester ID	Public key cryptography	Smart contract	Offchain: Cloud			*	*	*	*
BBDS (Xia et al., 2017b)	PoW	IBA	N/A	*					
Dubovitskaya et al. (2017)	PBFT	Public key cryptography	Chaincode	*				*	*
Ancile (Dagher et al., 2018)	PoV	Ethereum address	Public key & Symmetric cryptography	Smart contract	Offchain: Local storage			*	*	*	*
MediChain (Rouhani et al., 2018)	PBFT	Blockchain ID	Public key cryptography	Chaincode, DAC	Offchain: Cloud	*		*			*
EACMS (Rajput et al., 2019)	Patient ID	N/A	Chaincode	Offchain			*			
BSPP (Zhang and Lin, 2018)	Hybrid	PoC	Patient Pseudo ID	Public key cryptography	PEKS	Onchain: Private blockchain			*	*	*	*
Hirtan et al. (2019)	50% approval	Temporary patient ID	Stored policies in blockchain	Offchain: Local storage			*	*	*	*
Wang and Song (2018)	Consortium	N/A	Patient ID	ABE, IBE & IBS	ABE & IBE	Offchain: Cloud			*			*
Liu et al. (2019)	Private	dPoS	Patient Pseudo ID	Public key cryptography	Proxy Re-encryption	Onchain: Private blockchain			*		*	*
Guo et al. (2019)	PBFT	Patient ID	ABE	ABE, ALFA, Chaincode: ACL	Offchain: Edge			*			
Niu et al. (2020)	PoW	ABE	ABE	Offchain: local cloud		*	*			*
a
Blockchain type.

b
Ledger type.

c
Consensus.

d
Scalability.

e
Keyword searching.

f
Decentralized access.

g
Access revocation.

h
Anonymization.

i
Data privacy.

