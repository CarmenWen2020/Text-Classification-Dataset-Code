Mobile Ad-hoc Networks (MANETs) play a critical role for wireless communications within mission-critical applications. Wireless communications have the drawback of being susceptible to jamming. Jamming disturbs the normal reception of signals on the physical layer. While MANETs can adapt to continuous jamming, intermittent jamming can seriously disrupt the routing protocol and the traffic flow. In the intermittent case, the network topology during non-jamming is generally quite different from that during jamming. Much of the recent work on jamming mitigation has focused on how to adjust the transmitter-receiver system once an adversarial jamming attack has been detected. However, jamming need not be only adversarial in nature. Friendly jammers are supposed to disturb the adversarial networks but not the friendly ones. In this paper, we propose jamming-aware routing and MAC protocols for the friendly jamming scenario, where the jamming schedule is known to the friendly mobile nodes but hidden from all adversarial ones. In one scheme, the routing and MAC protocols freeze during jamming but resume during non-jamming. In another scheme, the routing protocol uses two sub-protocols: one for jamming and another for non-jamming. We have named the friendly-jamming-aware routing protocols as JOLSR, because their implementations have been based on OLSR, and the friendly-jamming-aware MAC protocol as JTDMA, as its implementation has been based on TDMA. We have shown through extensive simulations that these proposed protocols can significantly improve the packet delivery ratio and other metrics compared to off-the-shelf proactive unicast and reactive multicast routing protocols and a schedule based (TDMA) MAC protocol.

Previous
Index Terms
Routing

Jamming

Friendly jamming

Periodic jamming

Jamming schedule

1. Introduction
A Mobile Ad-hoc Network [MANET (Corson and Macker, 1999)] is a network where mobile nodes are connected by wireless links and form the network routing infrastructure. An ad-hoc network is suitable for disaster recovery situations with emergency responders and ambulances or a battlefield with soldiers and military vehicles. In a MANET, routing (Renu et al., 2013) is the process of forwarding a message from a source to the destination(s) through the intermediate nodes. Every node acts as a router and forwards the message towards the destination. In these networks, wireless transmission is broadcast by nature and hence is vulnerable to jamming attacks. An attacker or a defender can easily disturb the wireless networks by generating jamming signals on the spectrum used for normal communication.

Broadly defined, jamming is the broadcast of a signal on a wireless medium with the intention to interfere with legitimate traffic (Torrieri 1992). Jamming can be categorized as either malicious or friendly. In malicious jamming, adversaries create jamming signals to disrupt the communication of the friendly nodes. Alternatively, in friendly jamming, the friendly nodes generate jamming signals to disturb the adversarial nodes. In this case, we assume that all friendly communication nodes are aware of a jamming schedule, which is hidden from adversarial nodes. While there has been some effort on developing MANET protocols that reduce the impact of malicious jamming, friendly jamming has received little attention. Friendly jamming can play a critical role in modern electronic warfare. For example, friendly jamming can protect a wirelessly controlled improvised explosive device (IED) or the vehicle borne IED (VBIED) from being detonated by an attacker. Similarly, the Shortstop Electronic Protection System (SEPS) is a vehicle-based friendly jammer system. However, a drawback of this type of jamming is that the friendly jammer will disturb the wireless networks of both the enemy and friendly forces. To solve this problem, we propose friendly-jamming-aware protocols, JOLSR (Jamming-aware OLSR) and JTDMA (Jamming-aware TDMA), based on standard routing and MAC (Medium Access Control) protocols, namely, OLSR (Optimized Link State Routing) and TDMA (Time-division Multiple Access). Our one approach is similar to a laptop user's behavior. When a person stops working on his laptop, he hibernates his laptop by closing it. When he wants to work again, he re-opens his laptop and directly sees the last moment of his work on the screen. We call this behavior a freeze/resume mechanism. As an analogy between the human behavior and jamming, jamming time is the break time and non-jamming time is the working time. Therefore, during jamming (break time), we freeze our protocols and during non-jamming (working time), we resume them. In this way, our protocols behave as if there is no jamming at all.

The remainder of this paper is organized as follows. In Section II, we cover related work. Section III highlights our main contributions. Sections 4 Jamming-aware routing protocol description, 5 Jamming-aware MAC protocol description, 6 Jammer node implementation describe the proposed friendly-jamming-aware routing and MAC protocols along with the jammer node implementation. In Section VII, we provide the theory behind the capabilities of the proposed protocols with detailed discussions. Section VIII presents the simulation set-up, results and comparisons with other relevant routing & MAC protocols. We conclude the paper in Section IX with a summary and directions for future work.

2. Related work
Recent work has demonstrated a wide array of efficient jamming techniques using advanced algorithms and inferences about the target system (Thuente and Acharya, 2006; Xu et al., 2006; Tague et al., 2009; Wilhelm et al., 2011; Pelechrinis et al., 2011). Jamming is a specific DoS (Denial of Service) attack type targeting availability of the wireless medium (Torrieri 1992; Pelechrinis et al., 2011). Energy efficient jamming can be achieved by incorporating higher layer protocol information, like channels used for management and control in multi-channel systems (Tague et al., 2009) or by utilizing the knowledge of the measured jamming at each node (Sheikholeslami e al., 2016). Reactive jamming (Thuente and Acharya, 2006; Xu et al., 2006; Wilhelm et al., 2011), in which the attacker listens to the channel and jams whenever a transmission is detected, is another example of efficient jamming. The impact of jamming attacks on the performance of MANETs has also received considerable attention. Kaur and Sharma (2012) presented how different antenna patterns (omni-directional or isotropic antenna) affected the performance in the bit error rate and packet loss ratio. Jasim (2013) clearly showed the degradation in various performance metrics (e.g., throughput, delay) under jamming attacks.

Xu et al., 2005, 2006) described the different strategies of jamming attacks (constant, deceptive, random, and reactive jammers) as well as the different strategies of jamming detection. Thamilarasu et al. (2006) discussed a cross-layer approach to detect jamming attacks in wireless ad hoc networks. Beg et al. (2010) proposed to deceive the jammer and keep it busy on the jammed channel for jamming mitigation. To do this, normal nodes switched back and forth between the jammed channel and the non-jammed channel and they still transmitted decoy packets for the jammer on the jammed channel. Pelechrinis et al. (2011) introduced the detection mechanism at MAC layer. Tague et al. (2011) proposed traffic allocation based on the probabilistic information of dynamic jamming attack in multiple-path routing algorithms to mitigate the jamming attack. One multipath routing protocol is MP-OLSR [Multipath OLSR (Yi et al., 2011)] and we included this protocol in our simulations. Del-Valle-Sotto et al. (2017) presented the design of a jamming mitigation scheme integrated to the routing protocols MPH, AODV, and DSR.

Bayraktaroglu et al. (2008) discussed periodic jamming, while DeBruhl and Tague (2013) defined Short Form Periodic Jamming (SFPJ) as a class of periodic jamming using very short signal periods, where the attacker cycled the jamming signal on and off according to a regular period and duty cycle, and demonstrated that SFPJ attack could effectively bypass RSS (Received Signal Strength) based detection mechanisms.

A key assumption of these previous efforts is that jamming is malicious. However, jamming need not be only adversarial. Shen et al. (2013) introduced the Ally Friendly Jamming that jammed unauthorized wireless communication but maintained legitimate communication at the same time by sharing secret keys among authorized devices and the ally jammers to control the ally jamming signals. Berger et al. (2014) investigated the practical viability of friendly jamming in a real-world IEEE 802.11 network. Eletreby et al. (2015) used friendly jamming as a PHY-layer technique and showed how powers and locations of friendly jammers could be optimized to minimize the total jamming power, while simultaneously achieving a given secrecy constraint. Liu et al. (2015) proposed the use of a wireless-powered friendly jammer to secure communication between a source and a destination node, in the presence of an eavesdropper. Wan et al. (2017) studied scheduling strategies for maximizing the lifetime of randomly and redundantly deployed friendly jammers. Li and Dai (2017) suggested an anti-eavesdropping scheme based on artificial noise caused by friendly jammers deployed in wireless networks, as well as friendly jamming schemes applicable to Internet of Medical Things (IoMT) in Li et al. (2020).

3. Main contributions
In this paper, we focus on the case where the jamming is from friendly nodes and that full information about the timing of jamming is known to all friendly radios, but unknown to adversaries. Furthermore, we propose to mitigate friendly jamming at the Network and MAC layers. For the ease of presentation, we assume that the jamming is periodic (Bayraktaroglu et al., 2008, DeBruhl and Tague, 2013). Hence, the jamming schedule is characterized by a period and duty-cycle. However, periodic jamming is susceptible to being predicted by the enemy. Thus, in practice, the jamming would be aperiodic, following a pseudorandom schedule. By distributing the start time and seed of the pseudorandom generator during network initialization, all friendly radios can be made aware of the jamming schedule. Hence, the proposed protocols would function in the same way regardless of whether the jamming is periodic or aperiodic.

In an earlier shorter conference paper, we (Kim et al., 2018) briefly described two friendly jamming-aware routing protocols and showed their efficacy for simple static wireless networks for long periodic jamming. In this paper, we have extended these protocols with complete flow-charts, sequence diagrams, theories and discussions, as well as introduced a new jamming-aware MAC protocol and showed how the proposed jamming-aware routing protocols together with the proposed jamming-aware MAC protocol could be made applicable to mobile topologies even for short periodic friendly jamming. The performance evaluation of the proposed protocols and the simulation experiments conducted for this paper are much broader in scope than those used in the conference paper.

4. Jamming-aware routing protocol description
This section provides a description of the routing protocols, which we have proposed to mitigate friendly jamming in wireless ad-hoc networks with or without node mobility.

A single jamming signal can interfere with transmissions among several nodes. Several jammers can drastically alter the network topology. When the jamming is intermittent, a regular MANET routing protocol is unable to react to frequent changes in the topology caused by jamming. When the jamming starts, the protocol slowly detects “broken” links. The detection of broken links is slow because the routing protocol would not immediately interpret occasional packet losses as an indication of a broken link. When the jamming stops, links are re-detected and, in the case of OLSR (Clausen et al., 2013), link information is distributed to the other nodes in the network. Information about new links is distributed in Topology Control (TC) messages, which, by default, are generated every 6 s. Hence, when jamming starts, packets continue to be transmitted even though transmission is futile. When jamming ends, the protocol slowly uncovers (detects) the non-jamming network topology and eventually allows data transmissions. This slow reaction time causes degradation in performance.

4.1. Freeze/resume mechanism
Freeze/resume mechanism is the key concept to avoid performance degradation by misinterpreting transmission failures, caused by interferences from friendly jammers, as indications of broken links. Simply speaking, the proposed routing protocol freezes during jamming and resumes during non-jamming. In other words, the protocol does not generate or forward any routing control message (e.g., a Hello or TC message) during jamming. Moreover, all timers used in the protocol are also frozen. However, during non-jamming, the protocol functions as normal. Fig. 1 pictorially shows the freeze/resume mechanism. The protocol is inactive (I) during jamming and active (A) during non-jamming. It may be noted that the protocol functions only through the sequence of active times as if there is no jamming at all. Hence, the routing control messages will not be dropped by a jamming signal. In fact, the jamming has no impact on the routing protocol. In jamming-unaware routing protocols, however, many routing control messages will be lost during jamming, disrupting the forwarding of packets at all times. This indicates that the forwarding table created by our protocol will be more stable and converge faster than other jamming-unaware routing protocols.

Fig. 1
Download : Download high-res image (96KB)
Download : Download full-size image
Fig. 1. Given a jamming schedule, the protocol is inactive during jamming and active during non-jamming. “I” means inactive and “A” means active.

Generally, the implementation of the scheme as shown in Fig. 1 is straightforward. It can be applied to nearly any MANET protocol. The implementation of the freeze/resume mechanism consists of two parts. One part is to determine the next sending time of a routing control message by skipping each jamming duration. The other is to update a valid time of each entry (e.g., link) in a data set (e.g., link set) that the routing protocol maintains. Fig. 2 shows how to compute the next sending time. The next sending time is scheduled in 2 ​s, but jamming will occur within 2 ​s. To avoid jamming, the protocol adds T seconds, the jamming duration, to the next sending schedule and the actual next sending time becomes current sending time + 2 ​+ ​T. Note that in the figure, a + b should be 1 ​s, because the next sending time is scheduled in 2 ​s. One second is from 10 to 11 and plus another second which is a + b. If several jamming durations exist within the originally scheduled time, all jamming durations should be skipped. In this way, when jamming is occurring, the protocol not only does not generate periodic Hello and TC messages, but also does not relay a flooded TC message. Instead, these messages will be buffered in the routing protocol. Once jamming stops, the messages will be sent out almost immediately according to the schedule.

Fig. 2
Download : Download high-res image (115KB)
Download : Download full-size image
Fig. 2. The protocol determines the next sending time by skipping the jamming duration T. The next sending time was originally scheduled in 2 s.

OLSR maintains the data sets of link, neighbor, topology, etc. A valid time of each entry in a data set should be extended when jamming occurs. The best moment of updating the valid time is at the end of a jamming duration. The protocol simply adds the jamming duration to the valid time. Freezing various timers and resuming them are analogous to closing your laptop, re-opening it and noting that everything on the screen at the time of closing appears exactly on reopening.

To eliminate jamming effect further, a guard time should be added to each jamming duration. Without the guard time, it is possible for a packet to be dropped when the packet is transmitted at the time close to the start or end of jamming. The guard time can be set as a user defined parameter.

Note that the protocol implemented in this paper is based on OLSR version 2 (OLSRv2), but we can apply the freeze/resume mechanism to other routing protocols.

4.2. Buffering of data packets
Buffering is an option to rescue data packets. If data packets coming down from application layer are transmitted to a wireless medium during jamming, they will most likely be lost. The routing protocol with buffering enabled does not transmit data packets during jamming. Instead, data packets are stored in a buffer and transmitted during non-jamming. This approach will significantly increase the packet delivery ratio. However, the drawback is the increased end-to-end delay of a packet, depending on the jamming duration. The buffer size for data packets is a user defined parameter.

The routing protocol equipped with both the freeze/resume mechanism and buffering of data packets was developed and it is called JOLSRv1 (Jamming-aware OLSR version 1).

4.3. Multiplexing of sub-protocols
Multiplexing of two sub-routing protocols is another key concept to avoid performance degradation. In the first routing protocol like JOLSRv1, data packets can go through the jamming area only during non-jamming times. However, the goal of the second routing protocol (protocol 2) is to bypass the jamming area during jamming durations. To this end, identical freeze/resume mechanism is applied to protocol 2 reversely, that is, protocol 2 freezes during non-jamming and resumes during jamming. In this way, all times are utilized by employing both protocols 1 and 2.

Fig. 3 shows the protocol multiplexing between two sub-routing protocols. During jamming, the Protocol 2 is active and the jamming-driven forwarding (protocol) Table 2 is constructed and updated by transmitting the routing control messages, whereas it is the Protocol 1's turn during non-jamming and non-jamming-driven forwarding Table 1 is constructed. Two protocols are orthogonal and do not interact with each other. During jamming, the jamming-driven forwarding Table 2 is used to transmit a data packet, whereas non-jamming-driven forwarding Table 1 is used during non-jamming. Protocol 1 and 2 are very similar to JOLSRv1, but buffering option is disabled. An end-to-end packet delay is expected to be shorter than that in JOLSRv1.

Fig. 3
Download : Download high-res image (106KB)
Download : Download full-size image
Fig. 3. Multiplexing of two protocols. Two protocols are orthogonal and do not interact each other. Protocol 1 is active during non-jamming, whereas protocol 2 is active during jamming.

For better understanding of the protocol multiplexing, we showed two different routing paths during jamming and non-jamming in Fig. 4. During non-jamming, the packet goes through the shortest path, because the non-jamming driven forwarding table is used to forward a data packet. On the other hand, during jamming, the data packet is forwarded based on the jamming-driven forwarding table and hence the packet makes a detour around the jamming area affected by the jammer node. The routing protocol equipped with protocol multiplexing was developed and it is called JOLSRv2 (Jamming-aware OLSR version 2).

Fig. 4
Download : Download high-res image (239KB)
Download : Download full-size image
Fig. 4. Different routing paths during jamming and non-jamming. During non-jamming, a packet goes through the shortest path, whereas during jamming, the packet makes a tour around the jamming area affected by the jammer node.

4.4. Flow charts and sequence/interface diagrams for JOLSRv1
Various flow charts and diagrams describe the routing protocol JOLSRv1 in more details. The first and second parts of freeze/resume mechanism are described through Fig. 5, Fig. 6. Fig. 5 shows the flow chart when the protocol sends Hello or TC messages or checks valid times. The protocol computes the next event for the next sending time of routing control packets and for the next checking time of valid times by ignoring jamming times. After that, the protocol checks if jamming occurs within a next event. If yes, it generates the event at the end of jamming duration. If no, it waits until a next event. Fig. 6 shows the flow chart when the event occurs at the end of jamming duration. The best moment to update valid times in all data sets that the protocol maintains is the end of jamming duration. The protocol adds jamming duration to each valid time variable (e.g., link time, and topology time). After that, the protocol checks if there is a packet in the buffer. If yes, it transmits the packet. If no, it waits until a next event.

Fig. 5
Download : Download high-res image (218KB)
Download : Download full-size image
Fig. 5. The flow chart when sending Hello or TC messages or when checking valid times.

Fig. 6
Download : Download high-res image (189KB)
Download : Download full-size image
Fig. 6. The flow chart when an event occurs at the end of jamming duration.

Buffering of data packets is described in the flow chart shown in Fig. 7. When receiving a unicast packet, the protocol checks to see if the current time is within jamming duration. If no, the unicast packet is transmitted. If yes, the protocol further checks whether this packet is the first packet within jamming duration. If no, the packet is buffered. If yes, the protocol prepares to generate an event at the end of jamming duration and buffers the packet.

Fig. 7
Download : Download high-res image (154KB)
Download : Download full-size image
Fig. 7. The flow chart when receiving a unicast packet.

An interface diagram is the most detailed way to describe the routing protocol. The interface diagram of the JOLSRv1 protocol is shown in Fig. 11. First, JammingScheduler reads a jamming schedule from a text file via ReadJammingSchedule(). When IP receives a unicast packet from the transport layer, RoutePacketAndSendToMac() is called and RouterFunction() in OLSRv2 is called by the function. RouterFunction() calls IsJammingActive() in JammingScheduler to check whether jamming is occurring. If jamming is ongoing, BufferMsg() is called to buffer the packet and SendEventAtJammingEnd() is called to generate the event at the end of jamming duration. If not, TransmitThisMsg(), GetInterfaceAndNextHopFromForwardingTable(), and IpSendPacketToMacLayer() are sequentially called to transmit the packet.

Fig. 11
Download : Download high-res image (460KB)
Download : Download full-size image
Fig. 11. The interface diagram of JOLSRv1 protocol.

Layer() in OLSRv2 is called at the end of jamming duration. Layer() calls update_timers() in TimerControl and the other constituent functions to update all valid times in all data sets. If PacketBuffer holds a buffered packet, Layer() calls TransmitBufferedMsg() to transmit it. All other functions in OLSRv2 except for RouterFunctions() and Layer() call GetNextEventDelay() in EventControl to compute the next event time. EraseOldJammingTime() in JammingScheduler is called to erase old jamming time information.

4.5. Flow charts and sequence/interface diagrams for JOLSRv2
The JOLSRv2 protocol uses two sub-routing protocols on one network interface. The first one is called JOLSRv2_1 which runs during non-jamming only, whereas the second one is called JOLSRv2_2 which runs during jamming only. Each sub-routing protocol constructs its own forwarding table and all statistics information is combined by two protocols. When sending Hello or TC messages or when checking valid times, JOLSRv2_1 uses a flow chart identical to the one shown in Fig. 5. However, for JOLSRv2_2, the flow chart is applied by changing word “jamming” to “non-jamming” in the same chart. When an event occurs at the end of jamming or non-jamming duration, each protocol extends valid times in all data sets that each protocol maintains. The flow chart in Fig. 6 can be applied without checking a packet in the buffer. Fig. 12 shows the flow chart when receiving a unicast packet. If jamming occurs currently, the sub-routing protocol JOLSRv2_2 is set. Otherwise, JOLSRv2_1 is set. In any case, the unicast packet is transmitted based on the corresponding jamming driven (JOLSRv2_2) or non-jamming driven (JOLSRv2_1) forwarding table.

Fig. 12
Download : Download high-res image (151KB)
Download : Download full-size image
Fig. 12. The flow chart when receiving a unicast packet.

The sequence diagram for JOLSRv2, during jamming or non-jamming, is similar to that shown in Fig. 8. For the received data packet from the transport layer, the network layer requests the jamming scheduler for the current jamming schedule. If jamming is occurring, the sub-routing protocol JOLSRv2_2 is used. Otherwise, JOLSRv2_1 is used. The forwarding engine is then initiated to forward the data packet. The interface diagram for JOLSRv2 protocol is similar to Fig. 11. PacketBuffer should be excluded from the diagram. ReadJammingSchedule() used for JOLSRv2_2 is different from one used for JOLSRv2_1 or JOLSRv1. JOLSRv2_2 needs non-jamming time information instead of jamming time information and hence the function reads a non-jamming schedule from a text file.

5. Jamming-aware MAC protocol description
The idea behind the JOLSRv1 protocol at the network layer can also be applied to a protocol at the MAC layer. In this paper, TDMA (Time Division Multiple Access) protocol was considered as a MAC protocol. When TDMA knows a jamming schedule, it can avoid assigning slots to mobile nodes during jamming. The jamming-aware MAC protocol equipped with the freeze/resume mechanism was developed and it is called JTDMA (Jamming-aware TDMA). The combination of the routing protocol JOLSRv1 and the MAC protocol JTDMA in the protocol stack is best for improving performance under the friendly jamming attack. It is noted that JTDMA is not suitable for JOLSRv2.

5.1. Jamming-aware TDMA schedule, flow chart, and interface diagram
A normal jamming-unaware TDMA schedule is different from jamming-aware one. Fig. 13 shows the normal TDMA schedule of the TX (transmission) and the RX (reception) slot times, especially for node 0. Each node has its own slot duration for a transmission or a reception. For example, if node 0 holds any packet in its network queue, TDMA dequeues the packet and transmits it during TX slot times. Conversely, during RX slot times, TMDA receives a packet from the PHY (physical) layer. Note that an event occurs at the beginning of a TX or a RX slot time. Each node is enabled to listen to the channel for a packet reception at the beginning of the RX slot time.

Fig. 13
Download : Download high-res image (145KB)
Download : Download full-size image
Fig. 13. The normal TDMA schedule of the TX and RX slot times.

The normal TDMA schedule, jamming-aware TDMA schedule of the TX and the RX slot times, and the jamming schedule are shown in Fig. 14. In a normal jamming-unaware TDMA schedule, the next event occurs at the current time plus d and hence a de-queued packet will be sent out during jamming. However, in jamming-aware TDMA schedule, when jamming occurs within d seconds, the next event is extended to the current event time ​+ ​d ​+ ​T, where T is the jamming duration. Note that a + b should be d. In this way, TDMA will skip the jamming time so that the mobile node will not transmit the packet during jamming.

Fig. 14
Download : Download high-res image (268KB)
Download : Download full-size image
Fig. 14. The jamming-aware TDMA (JTDMA) schedule of the TX and RX slot times.

Fig. 15 shows the flow chart of the JTDMA MAC. The sequence of events consists of the event (TXE) at the beginning of a TX slot time and the event (RXE) at the beginning of a RX slot time and a repetition of these two events. In case of TXE, if a packet exists in the network queue, the packet is transmitted. For RXE, whether or not the PHY is listening to the channel is checked. The core part in the chart is “Compute the next event” which makes the MAC protocol be aware of jamming by applying the freeze/resume mechanism. As mentioned in Fig. 14, the next event time will be computed by skipping a jamming time.

Fig. 15
Download : Download high-res image (262KB)
Download : Download full-size image
Fig. 15. The flow chart of the JTDMA MAC protocol.

The interface diagram of the JTDMA protocol is shown in Fig. 16. The function MAC_ProcessEvent() in MAC calls the function TdmaLayer() in TDMA. If the event is TXE, OutputQueueIsEmpty() is called to check whether any packet exists in the network queue. If yes, the packet from the network queue is fetched by calling OutputQueueDequeuePacket(). TDMA adds MAC header to the packet and the constructed MAC frame is transmitted by PHY_StartTransmissingSignal(). If the event is RXE, TDMA checks to see if PHY is listening to the channel. If not, PHY_StartListeningToChannel() is called to listen to the PHY channel. In EventControl, the next event time is computed by GetNextEventDelay() function.

Fig. 16
Download : Download high-res image (309KB)
Download : Download full-size image
Fig. 16. The interface diagram of the JTDMA MAC protocol.

6. Jammer node implementation
We implemented a jammer node in the QualNet simulator for the evaluation of our friendly-jamming-aware routing and MAC protocols. All layers were involved in the implementation of the jammer node. In the application layer, the jammer node generates jamming traffic with broadcast and maximally allowable data rate, which the PHY layer supports, to mimic the continuous jamming signal during jamming time. In the network layer, routing is not needed for the jammer and jamming traffic is simply broadcast and not relayed. Jammer node does not use JTDMA at the MAC layer. To support the continuous jamming signal, the MAC layer ignores any delay (e.g., DIFS, EIFS, backoff, and NAV time) and simply transmits the jamming frame irrespective of the current status (i.e., idle, sensing, receiving, and transmitting) of the PHY layer. The PHY layer ignores not only any delay (e.g., delay until airborne) but also any arrival signal from the channel. Moreover, whenever the PHY layer receives a frame from MAC, it ignores the current PHY state and simply sets the PHY state to idle and transmits the frame to the channel. Before sending each jamming PHY frame, the jammer flag is enabled in the PLCP header.1 In this way, each node directly determines whether the receiving signal is from a jammer node or a normal node in the PHY layer. In the simulation, whenever a node detects that a receiving signal is from the jammer based on the PLCP header, the signal is considered as a garbage signal. The garbage signal will significantly increase the signal reception error for a legitimate packet depending on its signal strength.

The friendly jammer's main objective is to damage the communication of enemy nodes. The impact of jamming on the communication depends on the jamming schedule. For ease of presentation, the special case of periodic jamming was considered. However, in practice, jamming would be aperiodic and perhaps controlled via a pseudorandom generator that is initialized by a key. The key must be only known to the friendly troops. Two parameters are used to generate a periodic jamming signal; one is a jamming period (P) and the other is a jamming duration (D). The sequence of jamming times is [Px, Px ​+ ​D] where x = 0, 1, …. Fig. 17 shows the jammer's PHY layer timing of the jamming signal when P = 2 and D = 1. Jamming occurs from 0 to 1 and every other second. The sub-plot zoomed in at 0.5 s shows that the jamming signal is continuously generated without any gap between two signals. The single jamming duration between the start and the end of the jamming signal depends on the size of the jamming signal and the maximally allowable data rate in the PHY layer.

Fig. 17
Download : Download high-res image (277KB)
Download : Download full-size image
Fig. 17. The timing of the jammer's signals measured in the PHY layer. The jamming period (P) with 2 s and the jamming duration (D) with 1 s are used in this measurement.

7. Theory and discussion
In this section, we present formal statements for our main claims and theoretical guarantees with discussions on the routing capabilities of our proposed protocols.

Definition 7.1

Malicious jamming is a type of jamming where adversarial nodes create jamming signals to disrupt the communication of friendly nodes.

Definition 7.2

Friendly jamming is a type of jamming where friendly nodes generate jamming signals and all friendly nodes are aware of the jamming times, which are hidden from all adversarial nodes.

It should be noted that friendly jamming is not intended to block the communication of friendly nodes.

Definition 7.3

Jamming duration (D) is the time interval for which jamming occurs and jamming period (P) is the time interval after which jamming resumes. Within each jamming period, the jammer is active only for the jamming duration and jamming duration  jamming period. Every jamming period consists of a jamming duration and a non-jamming duration.

Definition 7.4

Jamming schedule is a sequence of time intervals where the first interval begins with the time when jamming starts and the last interval ends with the time when jamming ends completely, and where the start time for each time interval, from the second one onwards, is computed by adding the jamming period to the start time of the previous time interval and the end time is computed by adding the jamming duration to the start time of that interval, i.e., the sequence of [Px, Px ​+ ​D] where x ​= ​0, 1, ….

Definition 7.5

Periodic jamming is a type of jamming where the attacker cycles the jamming signal on and off according to a regular jamming period and duration.

Definition 7.6

Long periodic jamming uses a jamming period much larger than the frequency of control message generation of the corresponding routing protocol.

Long periodic jamming can significantly disturb both friendly and enemy nodes located around jammers. However, in some situation, this is needed. For long periodic jamming, we chose a jamming duration and period of more than or equal to 6 and 18 s, respectively, by taking into account that OLSR generates the TC messages every 6 s by default.

Definition 7.7

Short periodic jamming uses a very short signal period, where the jamming period is much smaller than long periodic jamming.

For short periodic jamming, we considered 10–100 ms jamming duration and 20–200 ms jamming period.

Claim 7.1

JOLSRv1 routing combines OLSR with freeze/resume mechanism and buffering to adapt to friendly jamming.

Discussion: In the presence of a jamming signal, JOLSRv1 is inactive and is not operational. It freezes transmission of application and control messages and buffers application messages, received from the upper layer or relayed by neighbors. It resumes normal operation at the start of non-jamming duration. Now, in the absence of any jamming signal, JOLSRv1 functions like regular OLSR (version 2) and uses one forwarding table. It sends application, Hello and TC messages, forwards buffered messages, or checks timeouts of all data sets. In this way, messages are not lost and jamming has no impact on routing.

Claim 7.2

JOLSRv2 routing combines OLSR with protocol multiplexing to adapt to friendly jamming.

Discussion: JOLSRv2 implements two sub-routing protocols based on OLSR, each with its own forwarding table. One sub-routing protocol is active during jamming and updates its own forwarding table, and the other does the same during non-jamming. As the jamming schedule changes from jamming to non-jamming times, JOLSRv2 protocol switches from one sub-routing protocol to the other. If a data packet is received during jamming, it will be forwarded according to the jamming-driven forwarding table constructed by the sub-routing protocol during jamming. Otherwise, it will be forwarded by the non-jamming-driven forwarding table constructed during non-jamming. In this way, JOLSRv2 multiplexes OLSR-based two sub-routing protocols to overcome friendly jamming.

Claim 7.3

JOLSRv1 improves packet delivery ratio at the expense of end-to-end delay under friendly jamming.

Discussion: In jamming-unaware routing protocols, many routing control messages are lost during jamming, disrupting the forwarding of packets even when jamming has stopped. In contrast, JOLSRv1 runs as if there is no jamming at all. Routing is active only during non-jamming. The routing control messages are not dropped by a jamming signal and the protocol constructs its forwarding table that is complete for routing during the non-jamming times. Thus, jamming has no impact on the routing protocol. The protocol implements buffering of data packets. If the protocol is frozen and a data packet is buffered during jamming and sent out during non-jamming, the packet is not lost. Therefore, this protocol increases the packet delivery ratio. However, the end-to-end delay of this packet also increases, depending on the duration of jamming, due to freezing and buffering. If the data is more important than delay or jamming duration is short, this protocol is very useful.

Claim 7.4

JOLSRv2 fully utilizes both friendly jamming and non-jamming times and eliminates routing convergence delays.

Discussion: For JOLSRv2, one sub-routing protocol is operational during jamming and the other during non-jamming. Therefore, JOLSRv2 is operational all the time and it will use more control messages than JOLSRv1. It eliminates routing convergence delay, which is present in JOLSRv1 due to switching between jamming and non-jamming durations.

Claim 7.5

JOLSRv2 is unsuitable for short periodic friendly jamming.

Discussion: JOLSRv2 multiplexes two sub-routing protocols. OLSR generates Hello and TC messages every 2 and 6 s, respectively, by default. For shorter jamming schedules, we used jamming duration between 10 and 100 ms and period between 20 and 200 ms. If JOLSRv2 has to switch between the two protocols, from jamming to non-jamming and vice versa, every 10–100 ms, neither protocol gets enough time to complete either the one-hop neighborhood table or the routing table. So routing won't converge well during short periodic friendly jamming. Several of the data packets transmitted either during jamming or non-jamming times won't reach their destinations in the absence of complete routes.

Claim 7.6

JTDMA improves packet delivery ratio under friendly jamming.

Discussion: JTDMA combines the TDMA MAC protocol with the freeze/resume mechanism used in JOLSRv1 and JOSRv2. Being aware of the jamming schedule, JTDMA does not assign TX slots to the source nodes during jamming. If jamming occurs during the receive time of a mobile node, JTDMA reschedules the node's next TX slot time (by extending its RX time) to the end of the jamming duration, thereby ignoring the impact of any jamming signal to the forwarding node. As the mobile node doesn't transmit or forward any packet during jamming, none is lost thereby improving the overall packet delivery ratio.

Claim 7.7

JTDMA is effective for short periodic friendly jamming but is ineffective for longer jamming schedules.

Discussion: JTDMA is effective for short periodic jamming, where the jamming duration and period are in milliseconds. It forms an effective combination with JOLSRv1 to adapt to short periodic friendly jamming. In JTDMA, a mobile node doesn't transmit during jamming, as it extends the RX slot time to include the jamming duration as shown in Fig. 14. Adding the jamming duration of a few milliseconds to the RX slot time only causes a minor delay for the next transmit. The node still gets enough TX slot times to transmit its packets. However, this is not the case for long periodic jamming, where the jamming duration and period are in seconds. The longer jamming duration delays the next transmit event by seconds and hence the node doesn't get enough transmission turns (TX slot times) allocated for transmitting or forwarding all new or received packets. This increases overall end-to-end packet delays and so this is ineffective for long jamming.

Lemma 7.1

JOLSR protocols route optimally under friendly jamming.

Proof

It has been proved in Jacquet et al. (2001) that for unicast as well as broadcast packets, OLSR provides optimal routes in terms of the number of hops which are immediately available when needed. Since the JOLSR protocols use either one or two instances of OLSR to construct their routing tables, they provide minimal paths to the destinations, when needed, under friendly jamming.

Claim 7.8

JOLSRv1 further optimizes over OLSR under friendly jamming.

Discussion: OLSR is an optimization over a pure link-state proactive protocol for MANETs. Firstly, it reduces the size of the control packets by declaring only a subset of each node's neighbors which are selected as multi-point relays (MPRs). Secondly, it minimizes the flooding of the control traffic by letting only the selected MPRs retransmit the broadcast messages periodically. This technique significantly reduces the number of retransmissions in a flooding or broadcast procedure (Jacquet et al., 2001). The smaller the number of MPRs used during the entire routing process, the more optimal the routing protocol is. Unlike OLSR, which is one of jamming-unaware protocols, JOLSRv1 is operational only during non-jamming. Thus, JOLSRv1 generates fewer control messages as it operates for shorter time (i.e., only non-jamming times) than OLSR. Moreover, JOLSRv1 operates as if there is no jamming at all; it encounters fewer changes to the MPR selector sets and so uses fewer (or at most equal) MPRs as compared to OLSR under friendly jamming. Consequently, JOLSRv1 further optimizes over OLSR under friendly jamming. Simulation results in the next section will justify our claims.

Definition 7.8

A MPR set of rank k of any node, where k is any integer, is the union of the MPR sets of all elements in the MPR set of rank k-1.

The above definition is based on (Jacquet et al., 2001). When k = 0, the MPR set is the node itself, and when k = 1, the MPR set consists of a subset of all its one-hop neighbors that cover all of its two-hop neighbors, and so on.

To analyze the complexity of JOLSR routing, the routing problem should be defined. Garey and Johnson (1978) defined a wide variety of routing problems. In general, routing problems are associated with finding paths in networks. If the problem is to find a simple path of at least length k between any two vertices 
 and 
 in a graph , where V is the set of vertices and E is the set of edges, the routing problem becomes similar to the longest path problem and the decision problem is NP-complete (Garey and Johnson, 1978). Based on this understanding, the decision problem of JOLSR routing for a MANET under friendly jamming can be stated in the following way:

Given a representative graph  , can we find a path of at least length k from a vertex 
 to a different vertex 
?

Theorem 7.1

JOLSR routing is NP-complete if the destination is one hop away from the MPR set of at least rank k-1 of the source.

Proof

We prove the theorem in two steps. First, we prove that the decision problem for JOLSR routing is in NP. Through Lemma 7.1, we discussed that JOLSR routing routes optimally. Given a routing path P, we check that P consists of at least k edges, and that these edges form a path with no loops. This verification can be done in a polynomial time. Secondly, we prove that the decision problem is NP-hard through reduction from the longest path problem (LP) . In JOLSR routing protocols, a routing path is a sequence of hops through the MPRs from a source to a destination. If the source node 
 has a MPR set of at least rank k-1, each element 
 of the MPR set of rank k-1 can be reached via a path 
, where 
 is a MPR of 
 and 
 is a MPR of 
. Let 
 be the element of the MPR set of rank k-1 of node 
. 
 is just one hop away from the destination node 
 and there is a path 
 of at least length  from 
 to 
. Therefore, a graph  has a simple path of at least length k if the source has a multi-point relay set of rank at least k-1 and the destination is just one-hop away from an element of that multi-point relay set. Since the decision problem for Longest-path is NP-complete, the decision problem for our proposed routing protocols is NP-hard (≥ LP). Thus, the decision problem for JOLSR routing is in NP and is NP-hard. Hence, it is NP-complete.

8. Performance evaluation
Unicast and multicast application traffic, single and multiple paths in unicast traffic, long and short jamming schedules, comparison with standard proactive and reactive routing as well as with TDMA based MAC protocols, were the various factors that we considered for the performance evaluation of our proposed protocols over mobile topologies of interest.

8.1. Simulation set-up and scenarios
We have used the QualNet 6.1 simulator from SNT (Scalable Network Technologies), which is one of the packet-based simulators to test our proposed protocols. Fig. 18 shows the simulation topology on the simulator's user interface. The friendly troops possessed 50 mobile devices and 47 of them were normal nodes and 3 were the dedicated friendly jammers colored as blue nodes in the topology and all nodes were located at the modeled area of 3000 m × 3000 m. Tactical group mobility scenarios were considered for many groups of nodes. Each group had a head and the group head moved according to a random waypoint model, where the location of the head was updated with a pause of 30 s, min and max speeds of 0 and 10 m/s and maximum position granularity of 1.0 m (distance from a previous location). Each group member followed its own respective group head.

Fig. 18
Download : Download high-res image (320KB)
Download : Download full-size image
Fig. 18. The simulation topology in the modeled area of 3000 m × 3000 m. The blue nodes are the friendly jammers and the others are normal nodes in the friendly troop.

For unicast traffic, the source nodes 1, 2, 3, and 4 generated the application CBR (Constant Bit Rate) traffic with 512 bytes data size toward nodes 22, 23, 37, and 47 respectively at the rate of 512 bytes/second. The routing paths were determined by the protocols: OLSR (version 2), MPOLSR (multipath extension of OLSR), JOLSRv1, or JOLSRv2. For multicast traffic, the source node 1 generated the application MCBR (Multicast CBR) traffic toward nodes 22, 45, 18, and 33. The multicast routing paths were determined by ODMRP (On-Demand Multicast Routing Protocol). During the initial duration of 100 s, the sources did not generate the application traffic to let the routing protocols converge first. After 100 s, the application traffic was launched and continued until the simulation ended at 1200 s.

Two jamming schedules for long and short jamming were considered in this simulation. For long jamming, the jamming period (P) and duration (D) were 18 and 6 s, respectively. On the other hand, for short jamming, P and D were 20 and 10 ms. The jammers 48, 49, and 50 started to generate a garbage signal at 300 s. In the MAC layer, normal nodes used TDMA and JTDMA, whereas the jammers used a modified version of MACDOT11. In the PHY layer, the 802.11a protocol operated at the data rate of 12 Mbps. Each node had an omni-directional antenna. The normal nodes used the transmission power of 33 dBm (1.9 Watt). However, the jammers used a higher power of 37 dBm (5 Watt).

8.2. Results and comparative analysis
We have used six different metrics as Key Performance Indicators (KPIs), namely, MCR (Message Completion Rate), E2E (End-to-End) delay, hop count, network accessibility, control traffic generated and MPR (Multi-Point Relay) count to evaluate and compare the performances of our proposed jamming-aware protocols against jamming-unaware ones. For long periodic jamming, we compared the performances of the routing protocols OLSR, MPOLSR, JOLSRv1, and JOLSRv2 using the TDMA MAC protocol. However, for short periodic jamming, we considered several pairs of the routing and MAC protocols, which were (OLSR, TDMA), (MPOLSR, TDMA), (JOLSRv1, JTDMA), (ODMRP, TDMA), and (ODMRP, JTDMA). Since short jamming is more practical than long jamming for tactical networks, various protocol combinations were considered.

Fig. 19 shows the time series plots of average MCRs over all nodes for long and short periodic friendly jamming. The MCR jumped at 100 s, because the traffic sources started to transmit the CBR or MCBR data packets at 100 s. The performance of almost all protocols appeared steady until 300 s. When the jammers started to disturb the network communication at 300 s, MCRs of jamming-unaware protocols decreased significantly. Fig. 19a compares the average MCRs among OLSR, MPOLSR, JOLSRv1, and JOLSRv2 for long periodic jamming. JOLSRv1 and JOLSRv2 outperformed OLSR and MPOLSR. JOLSRv1 maintained the highest MCR among all compared protocols at 95%. Fig. 19b compares the average MCRs among all protocol pairs considered for short periodic jamming. After 300 s, MCRs of jamming-unaware protocol pairs (OLSR, TDMA), (MPOLSR, TDMA), and (ODMRP, TDMA) decreased greatly. However, MCRs of (JOLSRv1, JTDMA) and (ODMRP, JTDMA) remained steady above 80%.

Fig. 19
Download : Download high-res image (726KB)
Download : Download full-size image
Fig. 19. (a): Time series plot of average MCRs for long periodic jamming. The jamming schedule parameters P = 18 s and D = 6 s were used. (b): Time series plot of average MCRs for short periodic jamming. The jamming schedule parameters P = 20 ms and D = 10 ms were used.

Fig. 20 displays the time series plots of average E2E delays of application data packets over all nodes for long and short periodic friendly jamming. For both jamming schedules, JOLSRv1 had the highest average E2E delays and MPOLSR had the lowest ones among all unicast routing protocols. Fig. 20a shows that the E2E delays of JOLSRv1 varied between 1 and 2.5 s and were the highest due to the freeze-resume mechanism and buffering of data packets. Fig. 20b indicates that for the shorter jamming schedule, the final average E2E delay of the protocol pair (JOLSRv1, JTDMA) was about 10 s, much longer than other protocol pairs. In this scenario, the main reason for a long delay was the low bandwidth in MANETs. The routing paths of all unicast traffic, found by JOLSRv1, went through a common node and hence the node received many unicast packets. In order to send all received packets, the node needed many transmission turns (i.e., TX slot times) in JTDMA. This bottleneck node and scarce bandwidth caused a long E2E delay. If the application traffic sources had transmitted their messages slowly, the E2E delay would have been much less.

Fig. 20
Download : Download high-res image (601KB)
Download : Download full-size image
Fig. 20. (a): Time series plot of average E2E delays for long periodic jamming. (b): Time series plot of average E2E delays for short periodic jamming.

Fig. 21 shows the time series plots of average hop counts over all nodes for long and short periodic friendly jamming. Since JOLSRv1 runs as if there is no jamming at all, it generally uses the shortest path from the source to the destination. Therefore, the average hop counts for JOLSRv1 were the smallest among all unicast routing protocols in both types of friendly jamming and hovered around 4. Fig. 21a indicates that for long periodic jamming, JOLSRv1 and JOLSRv2 had similar but lower average hop counts than OLSR and MPOLSR. Fig. 21b shows that the protocol pairs (OLSR, TDMA) and (MPOLSR, TDMA) had similar performances and were worst. However, the performances of the protocol pairs (ODMRP, TDMA) and (ODMRP, JTDMA), using multicast routing protocol, were much better (~2) than with unicast routing protocols.

Fig. 21
Download : Download high-res image (667KB)
Download : Download full-size image
Fig. 21. a): Time series plot of average hop counts for long periodic jamming. (b): Time series plot of average hop counts for short periodic jamming.

Fig. 22 shows the time series plots of network accessibilities over all nodes for long and short periodic friendly jamming. In the network accessibility metric, both unicast routing and MAC connectivity were considered. For both jamming schedules, OLSR, MPOLSR, JOLSRv1, and JOLSRv2 maintained different network accessibilities at different times, influenced by the presence or the absence of three jammers. Fig. 22a shows higher average network accessibilities (86% and 92%) for JOLSRv1 and JOLSRv2 against OLSR and MPOLSR for long jamming. Fig. 22b, shows higher average network accessibility (98%) for JOLSRv1 against OLSR and MPOLSR for short jamming.

Fig. 22
Download : Download high-res image (851KB)
Download : Download full-size image
Fig. 22. (a): Time series plot of network accessibility for long periodic jamming. (b): Time series plot of network accessibility for short periodic jamming.

Fig. 23 shows the time series plots of control traffic generated by all nodes in the different unicast routing protocols for long and short periodic jamming. JOLSRv1 generated the least control traffic for both jamming schedules. For the longer jamming schedule, JOLSRv2, running two sub-routing protocols, generated the most control traffic among all unicast routing protocols as shown in Fig. 23a. The traffic amount was about 1.3 times more than JOLSRv1. For the shorter jamming schedule, MPOLSR generated the most control traffic among three unicast routing protocols as shown in Fig. 23b. MPOLSR generated about 1.7 times more traffic than JOLSRv1.

Fig. 23
Download : Download high-res image (646KB)
Download : Download full-size image
Fig. 23. (a): Time series plot of control traffic generated for long periodic jamming. (b): Time series plot of control traffic generated for short periodic jamming.

Fig. 24 shows the total count of MPRs used by the different unicast routing protocols for long and short periodic jamming. Figs. 24a and b indicate that for both jamming schedules, JOLSRv1 deployed the least number of MPRs (~30) to build its routing table as compared to the other unicast routing protocols. This is also consistent with our Claim 7.8. Moreover, for the longer jamming schedule, JOLSRv2 deployed lesser number of MPRs than both OLSR and MPOLSR, which approximately used 40 MPRs, as shown in Fig. 24a.

Fig. 24
Download : Download high-res image (596KB)
Download : Download full-size image
Fig. 24. (a): The total count of MPRs used by routing protocols for long periodic jamming.(b): The total count of MPRs used by routing protocols for short periodic jamming.

We performed Monte Carlo simulations with ten different and well-spread seeds for MCRs, E2E delays and hop counts over different protocols and protocol pairs. Table 1 compares the performances of four unicast routing protocols for long periodic jamming over 40 Monte Carlo runs, whereas Table 2 compares the performances of five different pairs of unicast or multicast routing and MAC protocols for short periodic jamming over 50 Monte Carlo runs.


Table 1. Monte Carlo simulation results for different unicast routing protocols for long periodic jamming. 95% CI (Confidence Interval) was used.

Routing Protocol Performance Comparisons - I
No.	Protocol	Avg. MCR (%)	Avg. Delay (s)	Avg. Hop Count
1	OLSR	37.51
CI: [37.31–37.72]	1.1
CI: [1.08–1.11]	5.22
CI: [5.19–5.25]
2	MPOLSR	52.41
CI: [52.09–52.74]	0.59
CI: [0.58–0.59]	4.52
CI: [4.51–4.53]
3	JOLSRv1	95.88
CI: [95.74–96.03]	2.34
CI: [2.32–2.35]	4.24
CI: [4.238–4.24]
4	JOLSRv2	65.68
CI: [65.51–65.85]	0.68
CI: [0.67–0.68]	4.29
CI: [4.288–4.29]

Table 2. Monte Carlo simulation results for different pairs of unicast and multicast routing and MAC protocols for short periodic jamming. 95% CI (Confidence Interval) was used.

Routing Protocol Pair Performance Comparisons - II
No.	Pair	Avg. MCR (%)	Avg. Delay (s)	Avg. Hop Count
1	(OLSR, TDMA)	21.71
CI: [21.60–21.81]	0.93
CI: [0.91–0.94]	4.71
CI: [4.70–4.71]
2	(MPOLSR, TDMA)	20.62
CI: [20.42–20.82]	0.71
CI: [0.70–0.71]	4.75
CI: [4.74–4.76]
3	(JOLSRv1, JTDMA)	80.32
CI: [79.46–81.18]	10.40
CI: [10.21–10.6]	4.28
CI: [4.27–4.28]
4	(ODMRP, TDMA)	32.23
CI: [31.38–33.07]	0.15
CI: [0.14–0.15]	2.09
CI: [2.09–3.0]
5	(ODMRP, JTDMA)	92.32
CI: [91.79–92.85]	0.23
CI: [0.21–0.25]	2.03
CI: [2.02–2.03]
Monte Carlo simulations showed reasonably consistent results and trends with very low error margins at 95% confidence level. For both long and short periodic jamming, JOLSRv1 performed the best as a tradeoff among MCRs, E2E delays, and hop counts amongst the four unicast routing protocols. However, for the multicast routing protocol, a pair of ODMRP and JTDMA performed the best for the shorter jamming schedule.

9. Conclusion
In this paper, we proposed jamming-aware routing and MAC protocols for the friendly troops to operate properly under friendly jamming attack, which disturbs the enemy's wireless communication significantly. The jamming schedule is known to the friendly mobile nodes, but hidden from all the enemy mobile nodes. The key idea behind the jamming-aware routing protocol JOLSRv1 is that the protocol freezes during jamming but resumes during non-jamming. The freeze/resume mechanism was very effective in ignoring the jamming signals and hence the protocol runs as if no jamming exists in the network. The advantage of this mechanism is the quicker convergence of the forwarding table than for jamming-unaware routing protocols. Buffering of data packets during jamming prevents many data packets from being lost by the jamming signals. Another key idea behind the jamming-aware routing protocol JOLSRv2 is to multiplex two sub-routing protocols. One sub-routing protocol is active during jamming and the other is active during non-jamming. Two separate routing protocols maintain their own forwarding tables. Therefore, during jamming, a packet sent based on the jamming-driven forwarding table makes a detour around the jamming area. We applied the same freeze/resume mechanism to the jamming-aware MAC protocol JTDMA that complemented JOLSRv1 at the network layer. These protocols are easily applicable to mobile topologies, as the key mechanisms are agnostic to node mobility.

Our simulations showed that our protocols JOLSRv1, JOLSRv2, and JTDMA worked well with MANETs and significantly outperformed the jamming-unaware protocols in terms of MCRs and on other key metrics. Moreover, Monte Carlo simulations with 95% confidence level showed that for both jamming schedules, JOLSRv1 performed the best for unicast application traffic as a tradeoff among MCRs, E2E delays, and hop counts. They also showed that JTDMA performed better than TDMA for multicast traffic with the same multicast routing protocol. For some scenarios using longer jamming schedules, where lower E2E delays are more critical than higher MCRs, JOLSRv2 may be preferred over JOLSRv1. For shorter jamming schedule, the best combination of protocols is (JOLSRv1, JTDMA) for routing unicast traffic, though it may cause some additional delays.

Currently, efforts are underway to transfer these protocols from simulations to real tactical networks. Our future goal is to propose a malicious-jamming-aware protocol that will defend friendly nodes’ communications against malicious jamming by forwarding data packets probabilistically to the next hop. To perform the probabilistic forwarding, a jammer should be detected and the probability of each link being jammed should be computed. With this probability, a probabilistic forwarding table will be constructed. Based on this game (attacker, defender) theoretic routing, we will defeat malicious jamming.

