Energy efficient data collection with minimum delay is very essential for IoT applications using sensors attached to Low Rate Wireless Personal Area Networks (LR-WPAN). The nature and position of the data collection and processing point, termed as Sink, plays a vital role in the data reliability, delay, and network lifetime. The static sink causes hot-spot problem to occur in Wireless Sensor Network (WSN), since the nodes nearer to the sink may die quickly. The Mobile Data Collection Agent (MDCA), commonly known as Mobile Sink (MS), can be used to mitigate this problem. A two level clustering scheme with an optimal data collection strategy is proposed in this work. In the first level, hierarchical clusters are formed and the Cluster Heads (CHs) are selected based on the residual energy and connectivity of the devices. The CHs are partitioned into disjoint sets and each set is represented by a Rendezvous Point (RP) that covers every element in the set. In the second level clustering, a deterministic approach is used for the RP identification followed by a meta-heuristic approach known as Gravitational Search Algorithm (GSA) for RP optimization. Finally, the MDCA collects data by visiting RPs along the path obtained using Simulated Annealing (SA). The proposed method is compared with Particle Swarm Optimization based path finding, SPT-GDA, and BR-CTR algorithms. The algorithms are analyzed for number of CHs, RPs, path length, Average Residual Energy, and Network Lifetime in LR-WPAN.

Previous
Next 
Keywords
Hierarchical routing

Multilevel clustering

Rendezvous point

Trajectory design

Mobile data collection agent

Network lifetime

Average energy consumption

1. Introduction
The Internet of Things (IoT) plays a vital role in making the world smarter and connected via device to device communication. The applications of IoT are countless and those include healthcare (Catarinucci et al., 2015), agriculture (Feng et al., 2019), smart homes (Ghayvat et al., 2015), intelligent transport systems, industrial automation, disaster management (Rashid and Rehmani, 2016), etc. The increasing demand for low power, short range communication devices in IoT enabled technologies paved the way for the development of Low Rate - Wireless Personal Area Networks (LR-WPANs) (Gutierrez et al., 2001). The different types of sensors are the edge devices in the LR-WPAN and they form Wireless Sensor Networks (WSN). These battery powered devices are energy constrained and are capable of sensing various environmental conditions such as temperature, light, gas, pressure, motion, moisture, proximity, etc (Yick et al., 2008). This WSN counterpart acts as the data sensing and generating points in LR-WPAN. The generated data must be transmitted to the processing location known as Base Station (BS) or Sink for analysis. The data collection at the sink can be done in two ways. In the first case, sink is stationary and all the devices must use single hop or multi-hop communication to forward the data to the sink. The relay nodes nearer to the BS may die quickly due to energy depletion and will create hotspot problem (Singh et al., 2018) in the network. So the placement of sink is very crucial in order to reduce the data collection delay and energy consumption in LR-WPAN. In the second case, the resource rich sink can move in the sensing area and collect the data periodically. Sink mobility is an efficient way to resolve the hotspot problem (Jaichandran and Irudhayaraj, 2010; Khan et al., 2013) in low power wireless devices in LR-WPAN. This mobile sink is also known as Mobile Data Collection Agent (MDCA).

While dealing with sink mobility, researchers have proposed two different approaches viz. random mobility and controlled mobility (Di Francesco et al., 2011). In the former case, MDCA randomly visits few areas to collect data. This will cause buffer overflow problem in the sensors since random visits may leave some deployment areas unvisited. The latter case mainly deals with two steps. In the first step, MDCA moves to each LR-WPAN device to get the sensed data at periodic intervals. This will lead to longer travelling path and may lead to the slow down of the data delivery process. The second step selects few locations in the deployment region based on some constraints and sink will visit only those points during the data collection interval. These selected points are known as Rendezvous points(RPs) or Sojourn Points (SPs). During the data collection phase, mobile sink will stop at each RP to collect data from the nearby devices. This waiting time is termed as sojourn time. The selection of RPs and the order in which RPs are visited (Path of MDCA) are determined by various algorithms. This method minimizes the path length and reduces the data collection delay. But the trajectory design of the sink node is a challenging task because it influences the average data delivery latency and the lifetime of the network.

An energy efficient strategy for the data collection from LR-WPAN devices using mobile sink is proposed in this paper. Initially, the nodes are grouped into hierarchical clusters and the Cluster Heads (CHs) are selected based on their residual energy and coverage. In the next level of clustering, RPs are identified so that a group of CHs can communicate with that point. This RP selection can be done using deterministic method. This is followed by a meta-heuristic optimization approach known as the Gravitational Search Algorithm based RP Identification (GSA-RPI). Finally, the MDCA travels through the selected RPs. The optimal travel path of the agent is obtained by executing Travelling Salesman Problem(TSP) using Simulated Annealing (SA) technique (Fig. 1). To enhance the network lifetime, re-clustering is done at the first level when the energy of a CH goes below a threshold as described in Section.5.6. After this, the RP and path selection procedures are re-initiated.

Fig. 1
Download : Download high-res image (318KB)
Download : Download full-size image
Fig. 1. Block Diagram of the GSA-RPI data collection model.

The implementation of this work is done with the help of the LR-WPAN module in NS-3 simulator. The sensor nodes of the proposed algorithms are considered as LR-WPAN devices for the simulation. Since energy efficiency is a prime concern in WSN and IoT applications, a realistic energy model for IEEE 802.15.4 is used (Rege and Pecorella, 2016) for accurate computation of the energy consumption during transmission and reception. The proposed approaches were analyzed for path length, Packet Delivery Ratio (PDR), Average Residual Energy, and Network Lifetime. . The contributions in the proposed work are given below.

●
Hierarchical clustering of devices and CH selection.

●
Grouping of CHs and RP selection using a deterministic approach.

●
Optimizing the RP positions using Gravitational Search Algorithm (GSA).

●
Trajectory of MDCA is estimated using TSP based on Simulated Annealing (SA).

●
Data collection through optimal path obtained.

●
A re-clustering strategy to balance the energy consumption of the devices.

●
Various performance metrics are analyzed and compared with the Particle Swarm Optimization (PSO) based approach.

The rest of the paper is organized as follows: In Section 2, the related works in the field of Rendezvous Point Identification for data collection in WSN using controlled mobility of sink is presented. The meta-heuristic approaches in the existing works are also discussed. The considered network scenario, the used energy model, and the overview of the proposed work are discussed in Section 3. The optimization model for the problem is given in Section 4. The detailed description of the proposed algorithm is presented in Section 5. Implementation details and simulation results observed are given in Section 6, followed by conclusion and future work in Section 7.

2. Related works
There exists many strategies for data collection from WSN in the literature. The main focus of all these approaches are optimization of energy consumption in order to maximize the network lifetime. A survey was conducted by Curry and Smith, 2016, in which the lifetime optimization strategies in static and mobile WSN are discussed in detail. Moreover, the authors have presented and analyzed various clustering and routing mechanisms like delay tolerant routing using mobile and/or multiple sinks. Later, when the application domain of WSN expanded to Body Area Networks(BAN), Personal Area Networks(PAN), and Vehicular Ad-hoc Networks(VAN), the performance of classical optimization algorithms were degraded. This lead to the development of various bio-mimic algorithms for the optimization in large wireless networks. A detailed survey on bio-inspired algorithms for energy efficient clustering and routing was done by Adnan et al., 2014. The survey presents how Particle Swarm Optimization(PSO), Ant Colony Optimization (ACO), and Genetic Algorithms(GA) are used to address issues such as data aggregation, energy efficient cluster based routing, scheduling, etc. in wireless networks. In LR-WPAN devices, multi-hop communication is the best way to forward the data to the sink. In order to minimize the delay in data collection process, sink mobility through RPs can also be incorporated. There are various approaches for data collection using MS in the literature related to WSN (Singh and Kumar, 2020). Some of the existing works on RP selection based on deterministic and meta-heuristic approaches are discussed in this section.

In 2010, a Cluster Based (CB) data gathering algorithm was proposed by Almi'ani et al., which is based on k-means clustering for generating balanced clusters by initially selecting some random cluster centre nodes. After a number of iterations, stable clusters are formed and a node with minimum hop distance to all other nodes in a cluster is selected as the Cache Point(CP). TSP with Christofides method is used to connect the CPs, which determines the optimal tour for data collection. Zhao and Yang proposed a data gathering approach using bounded relay hop in WSN (SPT-DGA). A set of data collection points known as Polling Points (PPs) are determined based on the number of ‘d’ hop neighbours and the distance to the Sink. Mobile data collector travels through the path to collect data from PPs.

In 2013, multiple Mobile-sink based Energy-efficient Clustering Algorithm (MECA) was proposed byWang et al. (2013). for consumer home networks. The network is divided into number of clusters based on the size of deployment area and CHs are selected. The aggregated data is forwarded to nearby sink. It was observed that multiple sinks reduces energy consumption in the network in order to improve the network lifetime. Ghafoor et al. proposed a MS trajectory design method in WSN based on Hilbert Space Filling Curve (HSFC) in 2014. The entire region is divided into equal size grids and centre point of the grid acts as RP. MS sink visits RPs via HSFC. A Virtual Grid based Dynamic Routes Adjustment scheme (VGDRA) was proposed by Khan et al.. Network is partitioned after finding optimum number of cells. The nodes closest to the cell centre is taken as the cell header and a virtual connection is established. As the MS moves through the boundary of the area, the cell headers re-adjust their routes and forward the data towards the corresponding border cell headers. In Tree Cluster Based Data Gathering Algorithm (TCBDGA) (Zhu et al., 2015), clusters are formed in the form of trees based on the weight (residual energy, distance to BS, number of neighbours) of a node. A neighbour having maximum weight is selected as the parent. The root of a tree is taken as the RP and sub-RPs are taken from the sub-trees. The MS will traverse through the path connecting RPs and Sub-RPs in order to collect the data.

A lifetime optimization algorithm for WSN with mobile sink node (LOA-MSN) was proposed by Chen et al. (2015). The location of nodes are identified using Global Positioning System(GPS) and Received Signal Strength Information (RSSI). The clusters are formed and sink movement path is estimated using graph theory. The algorithm is extended with multiple sinks to enhance lifetime. The Timeliness Travelling Path Planning (TTPP) algorithm was proposed by Cheng et al., in 2017. The least square curve function is applied to find the minimal travel path after dividing the deployment region into different areas. The basic algorithm does not using any clustering mechanism but it is extended for multihop transmission. It is observed from the simulations that, TTPP algorithm will work for the network where there is high concentration of sensor nodes. A nature inspired optimization approach, PSO, was used by Wang et al. (2017). for clustering and routing in WSN. Here network is partitioned into sub-areas to form clusters using PSO. Then the centre of gravity of the region and the residual energy of each node is calculated. The node closer to the centre and having remaining energy greater than the average residual energy of all the nodes is elected.

A virtual grid based hierarchical data forwarding approach was explained by Mitra and Sharma (2018). The area is divided into square grids and Candidate Sub Sinks(CSS) are selected out of the sensor nodes in that grid. Subset of CSS are identified as sub sinks. The data collected from sensor node will be forwarded to CSS and then to sub sinks. The MS visits these sub sinks to collect data. In the approach proposed by Kumar et al. (2018), a forwarding tree is constructed and the node weights are updated. RPs are selected based on weight and a probabilistic function using Ant Colony Optimization (ACO) is used to identify the order in which RPs are visited. A scheme known as Bounded Relay Combine TSP-Reduce (BR-CTR) was introduced by Cheng and Yu, 2018. The communication overlap area formed by more sensors are selected as the visiting areas. The centre of mass of each area is the representative point. Local data gathering is done by the sensors (assist nodes) within the range of RPs. MS visits the RPs for data gathering. An approach to reduce the energy consumption in wireless sensor networks was developed by Karimi and Amini, 2019 known as Improved MECA (IMECA). The deployment area is assumed to be hexagonal in shape and is composed of three rhombuses, where each rhombus is considered as a cluster. Here multiple sinks are taken and the movement path of sink is pre-determined. Devices can send data to the nearest sink. Recently, in 2020, a PSO based scheme for RP identification (PSO-RPS) was proposed by (Mehto et al., (2020)). In this, PSO is used to select subset of the deployed nodes as RPs. The non-RPs will send data to their nearest RP nodes via single hop or Multihop communication. Then TSP with Chistofides heuristic is executed to find the MS travel path.

From Table 1, it is observed that there are many deterministic approaches existing in the literature. The RP selection is an NP-hard problem and can be efficiently solved using meta-heuristic approaches. The existing PSO and ACO based methods are used for clustering and finding optimal path. They select a subset of nodes from the set of deployed nodes as RPs. Instead of selecting nodes as RPs, some points that covers one or more nodes can be taken as RP. This will further reduce the number of RPs and also the path length. In this way, the data collection delay and network life time can be improved.


Table 1. Comparison of existing RP selection methods.

Reference	Method	Clustering	RP selection	MS Travel Path	Limitations
Almi’ani et al. (2010)	Cluster
Based(CB)	Similar to k-means clustering	Cluster centre node	TSP based on Christodes heuristic	Predefined number of clusters
Zhao and Yang (2010)	SPT-DGA	Local clustering with PP as root	’d’ hop neighbours and distance to the Sink	Optimal TSP path	Small value of ’d’ increases path length and delay.
Wang et al. (2013)	MECA	group of devices form clusters	Optimal Sink positions	Global sink finds the travel path	Better lifetime only when the number of sinks are more
Ghafoor et al. (2014)	Efficient Tra-jectory Design	Dividing area into equal size grids	Grid centre points are RPs	Hilbert Space Filling Curve	Poor performance when node density is low
Khan et al. (2014)	VGDRA	Square Grid cells are formed	Centre of grid cells	Through the border of sensing area	Frequent route re-construction at every CH
Zhu et al. (2015)	TCBDGA	Cluster tree based on node weight	Root is RP and sub-tree root is sub-RP	TSP tour approximation Algo-rithm	Unbalanced clustering and cost for re-clustering
Chen et al. (2015)	LOA-MSN	Grids of same sizes are formed	Grid centre is RP	Using TSP to find optimal path	Difficult to find location if GPS is not available
Wang et al. (2017)	EPMS	Dividing area into sub regions using PSO	Node closer to the centre & energy greater than average residual energy	Broadcasting HELLO message and visiting cluster with maxi- mum average energy at each step	Predetermined number of clus-ters and MS Travel path is not optimal
Mitra and Sharma (2018)	Grid based hi-erarchical rout- ing	Virtual square grids based on network area	Grid centre node having threshold energy	Selects subsinks using neighbour discovery and runs Decision TSP	High message complexity and control overhead
Kumar et al. (2018)	ACO-MSPD	Building directed span- ning tree to find the forwarding path	Based on node weight constrained on path length	Using a probabilistic function to select next RP at each step	Path length is not global opti- mal
Cheng and Yu (2018)	BR-CTR	Local data forwarding using BFS with assist nodes as root	Centre of mass of the area found using clique search algorithm	TSP to find optimal path con- necting representative points	The CHs are not optimal and is not changed
Karimi and Amini (2019)	IMECA	3 rhombus shaped clus-ters are formed	Stopping points are along the path	Six mobile sinks move along large diagonals of rhombuses	Works only for hexagonal shaped region and 6 MS nodes
Mehto et al. (2020)	PSO-RPS	Neighbouring nodes of selected RP	PSO is used to select subset of nodes as RPs	TSP based on Christodes Heuristic	Objective function considers only path length
The Gravitational Search Algorithm (GSA) proposed by Rashedi et al. (2009) is used in many WSN scenarios like CH selection, routing etc. In 2015, Rao et al., 2015. designed an energy efficient approach to map the sensor nodes to nearest gateways using GSA (GSA-EEC). In 2017, a balanced clustering method (GC-GSA) is done by Mamalis and Perlitis (2017) and CH is selected. Here, GSA is used to assign group of CHs to a gateway. A CH selection and routing using GSA was proposed by (Lalwani et al., (2017)) (GSA-CHSR). In this, subset of nodes are selected as CHs and multihop path from every CH to BS is obtained using GSA. In the method proposed by Morsy et al. (2018), CHs are selected based on the fitness of sensor nodes and cluster members are assigned to them using GSA (GSA-EC). All these approaches are based on static sink based WSN. From the existing works, it is concluded that GSA can be used for Mobile Sink based networks also. Besides clustering and routing, GSA can be experimented for optimal RP identification problems.

A two level clustering scheme with RP identification for efficient data collection using MS in LR-WPAN is proposed in this paper. The clustering and CH selection is done at the first level and grouping of CHs and RP selection using GSA is performed in the next level. The method is detailed in the subsequent sections.

3. Overview of the proposed methodology
This section describes the characteristics of the network under consideration, the energy model used for LR-WPAN devices, and the block diagram of the proposed work.

3.1. Network scenario
The wireless devices (LR-WPAN devices) are randomly placed in the observing area. The sink node moves around the deployment region with a specific speed and stops at pre-determined points for collecting data. The following are the set of assumptions made for the implementation.

●
LR-WPAN consists of a set of homogeneous wireless devices with unique identifier (PANiD).

●
The devices except the MDCA are stationary throughout the simulation period.

●
Initial energy is same for all the nodes.

●
The communication links are bi-directional.

●
Data rate is non-uniform.

●
MDCA is resourceful and is not having any energy constraint.

3.2. LR-WPAN energy model and device characteristics
LR-WPAN energy framework in the network simulator-3 (ns-3) focuses on a state based modeling of the radio energy consumption (Rege and Pecorella, 2016) in a wireless node. This model supports for broadcasting packets and unicasting is not supported. The Energy Source (ES) and the Device Energy Model(DEM) are the two main components of this framework. The energy supply of a node is represented by ES whereas the energy consumption of a node during simulation is defined by DEM. The radio transceiver is assumed to be in one of the five states as mentioned below.

●
TrRv_OFF → Transmitter & Receiver OFF

●
Tr_ON → Transmitter ON, Ready to transmit

●
Rv_ON → Receiver ON, Ready to accept message

●
BUSY_Tr → Transmitting control or data message

●
BUSY_Rv → Receiving control or data message

Each LR-WPAN device has an associated PHY Listener component. The state transitions are monitored by the PHY Listener and notifies the DEM. DEM informs the changes to the ES in order to update the energy. Energy Source calculates and updates the Consumed Energy (CE) and Transient Energy (TE) using equations (1), (2) respectively. When the energy is completely depleted or it goes below a specified threshold, it is informed to LR-WPAN Device Energy Model by the Energy Source to call special routines to stop sending or forwarding of packets.(1)
(2)
where.

Ts = State Duration: Time spent in a particular state

Cs = State Current: Current drawn by a state

Vs = Supply Voltage: Supply voltage of attached ES

Tt = Transition Time: Time taken to switch from one state to another

Ps = Power in the arrival state.

A well-known standard used in WSN field is ZigBee. It uses IEEE 802.15.4 LR-WPAN as its PHY layer and MAC sub-layer. This standard defines two types of network nodes. The Full Function Devices (FFD) and the Reduced-Function Devices (RFD). The FFDs serve as the coordinator of a personal area network and communicate with any other device. RFDs can can only communicate with FFDs. The physical channel is accessed through a CSMA/CA protocol. The LR-WPAN devices supports data transfer rates at up to 250 Kbit/s. The communication range of LR-WPAN device varies from 10 to 100 m.

4. Proposed optimization problem
4.1. Notations used in the formulation of optimization problem
Table 2 shows the notations used in the problem formulation.


Table 2. Notations used in Optimzation formulation.

Notation	Description
N	Number of sensor nodes
K	Number of cluster heads
P	Number of rendezvous points
Q = {1,2,3, …,N}	A set of LR_WPAN devices which are also known as set of candidate CHs
δ	Stationary data sink
Z = {1,2,3, …,P}	A set of Rendezvous points in the Hamiltonian path
duv	The distance between point u and point v
Ti = {0, 1}, ∀i∈(Q∪δ)	If device i is selected as CH, Ti = 1, Otherwise 0.
The data sink δ is a special RP, Tδ = 1
aij = {0, 1}, ∀i,j∈Q	If device i is on the routing tree rooted at CH device j, aij = 1, Otherwise 0.
euv = {0, 1}, ∀u,v∈(Z∪δ)	If a line segment exists between u and v, euv = 1, Otherwise 0.
4.1.1. Problem definition
Given a set of LR-WPAN devices which are deployed in a two dimensional rectangular area (0, 0, Xmax, Ymax), find.

1
A set Z of Rendezvous Points (RPs)

2
A set G of geometric trees where each tree is rooted at a CH. Each tree is denoted by Gi = (Vi, Ei), 
 and 
. The depth of the tree is not limited.

3
The data collection route is a Hamiltonian cycle where the mobile sink visits each RP in such a way that ∑(u,v)∈Z|uv| is minimized where (u, v) ∈ Z ∪ δ, (u,v) is a line segment in the circuit and |uv| is the euclidean distance.

4
The objective is to

(3)
(4)
(5)
(6)
(7)
(8)
In the above formulation, the objective function minimizes the tour distance of the mobile sink which also implies the minimum latency for the data collection. The set of constraints from 4 to 7 ensures that each LR-WPAN device is attached to one CH only. A CH device is also attached to itself. The constraint 8 ensures that all devices are connected to one of the CHs.
4.2. Block diagram of GSA-RPI based data collection model
The LR-WPAN devices are assumed to be at random locations in the Region of Interest (RoI). The various phases of the data collection model GSA-RPI is shown in Fig. 1.

●
Network Initialization: The devices are assigned with unique identifiers (PANiD). They are fully charged and the buffer is empty.

●
Hierarchical Cluster Formation: In this phase, tree based Clusters are created with data forwarding path within it.

●
Collecting CH information by MDCA: Dividing RoI into a set of sub-regions and MDCA will move in the predefined path covering all sub-regions.

●
Grouping of CHs & RP Identification: Initially, finding RPs using a deterministic approach and then optimizing these points with the heuristic based GSA. The optimal path connecting all the selected RPs are determined using TSP with SA.

●
Data Collection using MDCA: Finally, MDCA moves along the obtained path to collect the data.

●
Re-clustering: Whenever the residual energy of any one of the CHs goes below a threshold as described in Section.5.6, the MDCA initiates the re-clustering. Otherwise data collection is continued.

5. Various phases of GSA-RPI data collection model in LR-WPAN
5.1. Network Initialization
The wireless devices are deployed in the RoI at random positions. The deployment region is assumed to be rectangular. Each device is assigned a unique identifier known as PANiD. All devices are having the same initial energy and are stationary after deployment. There is a Mobile Data Collection Agent (MDCA) to collect data by moving around the network in a controlled manner.

5.2. Level 1 clustering - hierarchical Cluster formation
In this phase, a hierarchy of nodes is formed based on their coverage and connectivity. The Euclidean distance based method of selecting neighbours of a node within the communication range ‘R’, cannot guarantee connectivity as there are chances of obstacles in their line of sight. So here, a request-reply mechanism is used to ensure the connectivity among the nodes. Routing hierarchy is formed in such a way that the parent node's residual energy will always be greater than or equal to that of its children.

5.2.1. The clustering procedure
Initialize each node id with its PANiD, and make the node's role as NULL. Each node is having two attributes: Parent ID (ParentId) and Parent Remaining Energy (PRE). Initially, ParentId is set to NULL and PRE is the current energy of the node. Every node will broadcast a JOIN_CLUSTER message with its PANiD and Current Remaining Energy (CRE) in a TDMA schedule. The one hop neighbours on receiving this broadcast message, will compare their PRE with the CRE received through message. If receiver node's PRE is less than that of the CRE received, then the receiver ParentId is set to PANiD of the sender. The PRE is updated with CRE of the sender. The receiver's role is set to Cluster Member (CM). Otherwise, there is no change to ParentId and energy values. Similarly every node will update their attributes (Algorithm 1) on receiving the broadcast message from every other nodes. After one TDMA cycle, each node will be either a CH or a CM. At the end of this procedure,a number of clusters are formed and the node having the highest energy in a cluster is automatically elevated as the CH.


Algorithm 1. Process by the Receiver on receiving JOIN_CLUSTER message from Sender

1: if (Sender.CRE ≥ Receiver.PRE) then
2: Receiver.PRE =Sender.CRE
3: Receiver.role = CM
4: Receiver.ParentId = Sender.PANid
5: else
6: No change in Receiver
7: end if
5.2.2. An example of hierarchical cluster formation
Consider an LR-WPAN scenario at time ‘t’ with 12 devices and their PANiDs are 1–12. In the hierarchical cluster formation, the devices will broadcast their Ids and CRE. The broadcasting will be in a random manner and is assumed to be in the order 7, 2, 4, 6, 9, 1, 8, 11, 3, 5, 10, 12. The Node ID, CRE, PRE, and the ParentId at time ‘t = 0’ is given below (Table 3).


Table 3. The Node Id, CRE, PRE, and ParentId of nodes at time t = 0.

PANiD	1	2	3	4	5	6	7	8	9	10	11	12
CRE	0.9	0.8	1	0.5	0.8	1	0.6	0.5	0.3	0.4	0.2	0.7
PRE	0.9	0.8	1	0.5	0.8	1	0.6	0.5	0.3	0.4	0.2	0.7
ParentId	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
Fig. 2a, shows the deployment of devices at time ‘t = 0’ with their PANiD and CRE. In level 1 clustering. the sender, S, will broadcast its PANiD and residual energy. The receiver, R,(the devices in the reliable communication range) will compare the energy of sender (S.CRE) and the receiver (R.PRE) and appropriate action are taken by the receiver. These steps are shown in Table 4. From the table, it is observed that the role of a few receivers are changed to CM and their ParentIds are set to a higher level node in the hierarchy.

Fig. 2
Download : Download high-res image (250KB)
Download : Download full-size image
Fig. 2. Hierarchical clustering: An example.


Table 4. Hierarchical cluster formation: An example.

Sender, S	Receiver, R
< PANiD, CRE>	PANiD	CRE	PRE	ParentId	Role	Actions
<7, 0.6>	1	0.9	0.9	NULL	NULL	S.CRE<R.PRE => Do nothing
12	0.7	0.7	NULL	NULL	S.CRE<R.PRE => Do nothing
<2, 0.8>	5	0.8	0.8	NULL	NULL	S.CRE = R.PRE and S.PANiD <R.PANiD =>Do nothing
10	0.4	0.8	2	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
<4, 0.5>	1	0.9	0.9	NULL	NULL	S.CRE<R.PRE =>Do Nothing
<6, 1>	3	1	1	6	CM	S.CRE > R.PRE and S.PANId > R.PANiD, Update PRE, ParentId, Role
<9, 0.3>	11	0.2	0.3	9	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
<1, 0.9>	8	0.5	0.9	1	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
7	0.6	0.9	1	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
4	0.5	0.9	1	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
<8, 0.5>	1	0.9	0.9	NULL	NULL	S.CRE<R.PRE =>Do nothing
7	0.6	0.9	1	CM	S.CRE<R.PRE =>Do nothing
<11, 0.2>	3	1	1	6	CM	S.CRE<R.PRE =>Do nothing
9	0.3	0.3	NULL	NULL	S.CRE<R.PRE =>Do nothing
<3, 1>	11	0.2	1	3	CM	S.CRE > R.PRE, Update PRE, ParentId, Role
6	1	1	NULL	NULL	S.CRE = R.PRE and S.PANId < R.PANiD =>Do nothing
<5, 0.8>	2	0.8	0.8	5	CM	S.CRE = R.PRE and S.PANId > R.PANiD, Update PRE, ParentId, Role
<10, 0.4>	2	0.8	0.8	5	CM	S.CRE<R.PRE =>Do nothing
<12, 0.7>	7	0.6	0.9	1	CM	S.CRE<R.PRE =>Do nothing
When broadcasting from all the devices are completed, the devices with ParentId NULL are selected as CHs in the network. These are the high energy nodes in each cluster. In the given example, the algorithm selects nodes 1, 5, 6, 9, and 12 as CHs, based on their energy. The routing hierarchy of CMs towards CHs is shown in Fig. 2b.

5.3. Collecting CH information by MDCA
After the formation of clusters, the CH information has to be collected. As the location of each CH is not known, a device has to move in the region covering the whole deployment area. The initial path of the Mobile Data Collection Agent (MDCA) that moves in the RoI to collect the CH information is shown below.

The travel path and sojourn points are determined by the communication range “R” of the devices, such that, it covers all the devices in the entire region. The first sojourn point of the MDCA is assumed to be at a distance “R” diagonal from the top left corner of the region. The MDCA will broadcast GET_CH_INFO() message from this point. The CHs, if any, within the range “R” will reply with I_AM_CH (<PANiDCH, XCH, YCH > ) and MDCA will store this information. Then, it moves right and stops at a distance of  from the current position and repeats the broadcast. If reply is received from any CH, it will be recorded. The process is repeated by the MDCA. Once it reaches the right end of the region, MDCA moves down to a point at a distance of  and search for CH information from right to left. This left to right and right to left scanning continues until the boundary of the deployment area is covered as shown in Fig. 3

Fig. 3
Download : Download high-res image (318KB)
Download : Download full-size image
Fig. 3. CH Information collection Path of MDCA.

The selection of sojourn points at a distance  from the current position in each step ensures full coverage of MDCA in the RoI. If the dimension of the rectangular region is D1 × D2, the total sojourn points in the RoI is 
 
 
. The maximum length of MDCA travel path (MaxPathLength) is. 
 

5.4. Level 2 clustering: grouping of CHs & Rendezvous Point Identification (RPI)
After the hierarchical cluster formation phase, the MDCA will gather the CH information. The data aggregated at the CHs need to be periodically transferred to the mobile agent. Instead of moving to every CH for gathering data, the MDCA can move to a point which can cover one or more CHs. These data collection points are termed as Rendezvous Points (RPs) or Sojourn Points (SPs). The selection of RPs or SPs is done in two steps. As a first step, a deterministic approach in used where MDCA will form Rectangular Clusters (RCs) and centre of each RC is taken as RP. In the next step, a meta-heuristic approach known as Gravitational Search Algorithm (GSA) is used to find the optimal data collection points (RPs) and to map the set of CHs to these RPs.

5.4.1. Deterministic approach for RP identification (D-RPI)
Assume that there are ‘K’ CHs, CH[1], CH[2], …, CH[K]. MDCA performs clustering of CHs in order to find RPs. Here, Rectangular Clusters (RCs) are formed based on the communication range of CH's. Every RC is having an identifier, id, with area defined by the co-ordinates < RC[id].Xmin, RC[id].Xmax.

RC[id].Ymin, RC[id].Ymax > . The length of its diagonal should not exceed ‘2R′, where ‘R’ is the reliable communication range (MaxRange) of CH.


Algorithm 2. CHECK(
)

1: for each RC[j], 1 ≤ j ≤ p do
2: if CH[i] is within the area of RC[j] then
3: Return −1
4: end if
5:end for
6:for each RC[j], 1 ≤ j ≤ p do
7: if (Xi ≤ RC[j].Xmin) then
8: Txmin = Xi
9: else if (Xi ≥ RC[j].Xmax) then
10: Txmax = Xi
11: end if
12: if (Yi ≤ RC[j].Ymin) then
13: Tymin = Yi
14: else if (Yi ≥ RC[j].Ymax) then
15: Tymax = Yi
16: end if
17: if 
 then
18: Return j
19: end if
20: end for
21: Return 0
Initially, a new cluster is formed with a randomly selected CH, where Xmin & Xmax of RC are initialized to the X position and Ymin & Ymax of RC are initialized to the Y position of the selected CH. Then the next CH, say CH[i], is randomly selected. The procedure CHECK() is called to verify whether the selected CH is within the area of an existing RC (CHECK returns −1) or a particular RC can be enlarged by adding this CH (CHECK returns RC_id), or a new RC is to be formed with this CH(CHECK returns 0). If the CH[i] is within the area of any of the existing RCs (Algorithm 2 returns −1), then there is no need to create new RC. Otherwise, either an existing RC has to be enlarged (Algorithm 3, Steps: 4–8) or a new RC has to be formed with CH[i] (Algorithm 3, Steps: 10–13). While enlarging, the dimension of RC should not exceed  (Algorithm 2, Steps: 6–20) ie. Diagonal of RC must be less than or equal to 2R. The procedure of D-RPI is given in the Algorithm 3.


Algorithm 3. Deterministic Rendezvous Point Identification (D-RPI)

Require: 
Ensure: Set of ‘p’ Rectangular Clusters, 
1: p = 0, j = −1
2: for each CH[i], 1 ≤ i ≤ K do
3: j = CHECK(CH[i], RC[1..p])
4: if (j ≥ 1) then  RC[j] can be enlarged by adding CH[i]
5: RC[j].Xmin = min(RC[j].Xmin, Xi)
6: RC[j].Xmax = max(RC[j].Xmax, Xi)
7: RC[j].Ymin = min(RC[j].Ymin, Yi)
8: RC[j].Ymax = max(RC[j].Ymax, Yi)
9: else
10: if (j = = 0) then  Create new RC with X and Y positions of CH[i]
11: p = p+1
12: RC[p].Xmin = RC[p].Xmax = Xi
13: RC[p].Ymin = RC[p].Ymax = Yi
14: else CH[i] is within the Existing Cluster Area
15: Do nothing
16: end if
17: end if
18: end for
19: Return 
This algorithm returns a set of ‘p’ rectangular clusters. The centre of each rectangular cluster is selected as set of rendezvous points. So there will be ‘p’ RPs and each CH device in the network will be in the range of at least one of the RPs. At the end of this stage, set of rendezvous points are generated which covers multiple CHs in the RoI. This method will reduce the number of Sojourn Points to be visited by the MDCA.

5.4.2. D-RPI: An Example
The following example illustrates the second level clustering for RP identification. Assume that after first level of clustering, cluster heads are identified and numbered from 1 to 13. Now the CHs are selected randomly and will form rectangular clusters based on D-RPI algorithm as described in Table 5 (See Fig. 4, Fig. 5, Fig. 6, Fig. 7, Fig. 8.).


Table 5. Illustration of D-RPI with an example.

Step No.	CH Node Selected	Formation/Enlargement of RC[ ] (Algorithm CHECK())	Updation of RC Coordinates (Based on D-RPI Algorithm 3)
1	6	CHECK() returns 0
RC[1] formation with CH 6	RC[1].Xmin = RC[1].Xmax = X6
RC[1].Ymin = RC[1].Ymax = Y6
2	1	CHECK() returns 0
RC[2] formation with CH 1	RC[2].Xmin = RC[2].Xmax = X1
RC[2].Ymin = RC[2].Ymax = Y1
3	12	CHECK() returns 0
RC[3] formation with CH 12	RC[3].Xmin = RC[3].Xmax = X12
RC[3].Ymin = RC[3].Ymax = Y12
4	2	CHECK() returns 2
RC[2] Enlargement with CH 2	RC[2].Xmin = X1RC[2].Xmax = X2
RC[2].Ymin = Y1RC[2].Ymax = Y2
5	7	CHECK() returns 1
RC[1] Enlargement with CH 7	RC[1].Xmin = X7RC[1].Xmax = X6
RC[1].Ymin = Y6RC[1].Ymax = Y7
6	4	CHECK() returns 0
RC[4] formation with CH 4	RC[4].Xmin = RC[4].Xmax = X4
RC[4].Ymin = RC[4].Ymax = Y4
7	13	CHECK() returns 0
RC[5] formation with CH 13	RC[5].Xmin = RC[5].Xmax = X13
RC[5].Ymin = RC[5].Ymax = Y13
8	3	CHECK() returns 4
RC[4] Enlargement with CH 3	RC[4].Xmin = X3RC[4].Xmax = X4
RC[4].Ymin = Y3RC[4].Ymax = Y4
9	10	CHECK() returns 3
RC[3] Enlargement with CH 10	RC[3].Xmin = X12RC[3].Xmax = X10
10	9	CHECK() returns 1
RC[1] Enlargement with CH 9	RC[1].Xmin = X9RC[1].Xmax = X6
RC[1].Ymin = Y6RC[1].Ymax = Y9
11	5	CHECK() returns 4
RC[4] Enlargement with CH 5	RC[4].Xmin = X3RC[4].Xmax = X5
RC[4].Ymin = Y5RC[4].Ymax = Y4
12	8	CHECK() returns −1
CH 8 is within RC[1]	No updation in RC[1]. Same as step 10.
13	11	CHECK() returns 3
RC[3] Enlargement with CH 11	RC[3].Xmin = X12RC[3].Xmax = X11
RC[3].Ymin = Y11RC[3].Ymax = Y10
Fig. 4
Download : Download high-res image (162KB)
Download : Download full-size image
Fig. 4. Selected CHs (before D-RPI).

Fig. 5
Download : Download high-res image (176KB)
Download : Download full-size image
Fig. 5. D-RPI: Selecting CHs 6,1,&12.

Fig. 6
Download : Download high-res image (225KB)
Download : Download full-size image
Fig. 6. D-RPI: Selecting CHs 2,7,4,&13.

Fig. 7
Download : Download high-res image (257KB)
Download : Download full-size image
Fig. 7. D-RPI: Selecting CHs 3,10,&9.

Fig. 8
Download : Download high-res image (270KB)
Download : Download full-size image
Fig. 8. D-RPI: Selecting CHs 5,8,&11.

5.4.3. Generation of minimum Hamiltonian cycle using Simulated Annealing (SA)
After Identifying RPs, the travel path of the Mobile Data Collection Agent (MDCA) has to be determined. The aim is to minimize the path length of the Hamiltonian cycle (a special case of Travelling Salesman Problem) covering all RPs. The approach used here is Simulated Annealing with permutation encoding scheme to find the approximate global optimal path (Bayram and Şahin, 2013).


Algorithm 4. TSP using Simulated Annealing (TSP-SA)

Require: Set of RPs, RP[1..P]
Ensure: Set of RPs, (RP[1..P]), a Hamiltonian sequence with minimal path length, Lbest
1: Assume initial solution S = RP[1], RP[2], RP[3], …, RP[p]
2: Sprev = Scurr = S
3: Best PathLength Lbest = Distance(RP[p], RP[1]) + ∑_i = 1p−1Distance(RP[i], RP[i+1])
4: Lprev = Lcurr = Lbest
5: Initial temperature t,Cooling Rate r, Number of Iterations n & Minimum temperature tmin
6: while (t > tmin && n ≥ 0) do
7: Lprev = Lcurr
8: Generate a new solution S′ in the neighbourhood of S
9: Calculate current PathLength, Lcurr
10: if Lcurr < Lprev then Lprev = Lcurr
11: if Lcurr < Lbest then Lbest = Lcurr, S = Scurr
12: end if
13: else
14: Calculate 
 
 & n2 = 
 
15: if n2 < n1 then
16: Lprev = Lcurr, S = Sprev
17: end if
18: end if
19: Apply cooling t = t ∗ r
20: n = n-1
21: end while
22: Return S
Initially, a set of points (RPs) are selected from an array as the initial solution. The neighbour solutions are obtained by selecting two random positions and swapping elements of these positions. The order of points in the array represents the visiting order of RPs. The TSP-SA is given in Algorithm 4.

5.4.4. GSA based RP identification (GSA-RPI)
This algorithm aims at finding the optimum position of RPs and at the same time minimize the path length of MDCA. This is formulated as an optimization problem based on the meta-heuristic approach known as Gravitational Search Algorithm. The sequence of steps are given below.

a)
Agent Representation and Initialization

An agent represents a set of RPs. The dimension of an agent is ‘P’, which is the number of RPs obtained after executing D-RPI algorithm. Each dimension represents the < X, Y > co-ordinates of an RP. As the first step, one of the agents is assigned with the 2D co-ordinates of the RPs received from TSP-SA algorithm (Algorithm 4) and all other agents are initialized with random points. Let Agent[i] represents the ith agent and its representation at time t is. 

b)
Formation of Fitness Function

For the fitness function formulation, two points are considered. One is to maximize the coverage and the other is to minimize the MDCA path length.

●
Full Coverage

Here, the key objective is to find association between CHs and RPs. Whenever an RP is identified, the CHs that are within the reliable communication range (MaxRange,R) of that RP are added to its member set. In this way the members of all RPs are identified. Equation (9) will find the number of CHs that are associated with any one RP. This is achieved using two constraints. Equation (10) says that the node i will be added to the set only if it is a CH. The second constraint (Equation (11)) ensures that, the CH ‘i’ is within in the communucation range of RP ‘j’. The maximum value that can be obtained is the number of CHs.(9)
subject to(10)
(11)

●
MDCA trajectory length

The path length is obtained using the TSP-SA algorithm (Algorithm 4) explained in Section 5.4.3. To convert the path length to a fraction between 0 and 1, divide it by MaxPathLength (obtained from Section 5.3). This is represented in Equation (12). This can be changed to a maximization problem by subtracting it from 1 (Equation (13)).(12)
 
(13)
 
The final fitness, f, is the sum of fitness values derived from Equations (9), (13)), The acceptable values of f must be in between number of CHs and number of CHs +1 (No_of_CHs < f < No_of_CHs+1). If anyone of the CHs is not covered, f returns a value less than the No_of_CHs. When the fitness function f (Equation (14)) is maximum and within the specified range, it ensures full connectivity of CHs and minimal length of the Hamiltonian cycle covering all the RPs.(14)

c)
Calculation of Force, Acceleration, and Velocity of the agent

Assume that agent ‘j’ is having the maximum fitness (Bfit). Each agent's Mass is calculated from the fitness value of current agent, Bfit and worse fitness (Wfit) from the solution space (Algorithm 5: Steps 7–19). The force of attraction between current agent ‘i’ and agent ‘j’ at a distance ‘r’ in the ‘dth dimension is calculated as Tforced (Equation (15), where Gt is the gravitational constant at time t). Then, the X and Y components of the ith agent's force in the dth dimension is obtained using Equations (16), (17)). The agent's acceleration is obtained from the force and its Mass. Now, the velocity of the agents are derived from their current velocity and acceleration.(15)
 
(16)
(17)
(18)
 
(19)
 
(20)
(21)

d)
Updation of agent's position

The new X and Y positions of each agent in all the d dimensions will be updated using the following equations.(22)
(23)
Algorithm 5 is for GSA based RP Identification (GSA-RPI). This is executed for a predefined number of iterations (MaxIterations). Finally, the agent with best fitness (say Agent[j]) is returned and each dimension of the Agent[j] represents the optimized RP locations.


Algorithm 5. GSA based Rendezvous Point Identification (GSA-RPI)

Require: Predefined Set of N Agents with dimension P and Set of near optimal RPs, RP[1..p]
Ensure: Optimal positions for p RPs with reduced path length
1: Initialize agent[1] with < X, Y > co-ordinates of RP[1]..RP[p]
2: for each Agent[i], 2 ≤ i ≤ N do
3: Initialize with random < X, Y > co-ordinates in the range (0, 0) to (D1-1, D2-1)
4: end for
5: Bfit = 0
6: while MaxIterations do
7: for each Agent[i], 1 ≤ i ≤ N do  Calculate Fitness of each Agent
8: Calculate Fitness of Agent[i]
9: if Bfit < Agent[i].Fitness then Bfit = Agent[i].Fitness & j = i
10: end if
11: end for
12: WorstFitness Wfit = MIN(Fitness(Agent[1..N]))
13: TMass = 0
14: for each Agent[i], 1 ≤ i ≤ N do  Calculate mass of each Agent
15: 
 
16: Total mass of Agents, TMass = TMass + Agent[i].mass
17: end for
18: for each Agent[i], 1 ≤ i ≤ N do
19: 
 
20: end for
21: for each Agent[i], 1 ≤ i ≤ N do  Find Acceleration and Velocity of Agents
22: if i ≠ j then
23: for each d, 1 ≤ i ≤ p do
24: Calculate acceleration of the Agent using Equations (18), (19)
25: Calculate velocity of the Agent using Equations (20), (21)
26: end for
27: end if
28: end for
29: Update position of the Agent using Equations (22), (23)
30: end while
31: Return Agent with Bfit, 
5.5. Data collection using MDCA
Within a cluster, a hierarchical routing approach is used to forward data from devices to the CH. When a device senses an activity nearby, it is recorded and broadcasted. Since there exists a communication hierarchy in the network, the information will be received by the corresponding parent. This will again be routed to the next level parent. Finally the data will be received by the CH and it is stored in its buffer.

To collect data from the cluster heads of LR-WPAN, the MDCA moves with a constant speed via the path obtained in the previous phase. When it reaches an RP, a signal is broadcasted, to inform the CHs within the radius ‘R’. It waits for 1 s (sojourn time or pause time), collects data in the TDMA schedule calculated based on the number of CHs in the vicinity of that RP and moves to the next location. Single hop communication is used between CHs and MDCA to save energy of the LR-WPAN devices. The remaining energy of the CH is updated after sending data to the MDCA.

5.6. Re-clustering and path Re-construction
In case of hierarchical routing, the energy of the CHs may get depleted soon and it will in turn affect the network lifetime. To overcome this issue, a re-clustering approach is proposed. Every CH stores its residual energy and energy before last clustering step. When the residual energy of a particular CH falls below 5% (fixed during simulation in Section.6.5) of the energy before the last clustering, it requests for re-clustering. When MDCA receives re-clustering request from any one of the alive CH nodes in the network, it initiates re-clustering. A hierarchy is formed and the routes will be updated by the devices. The steps from Section 2 Related works, 3 Overview of the proposed methodology, 4 Proposed optimization problem, 5 Various phases of GSA-RPI data collection model in LR-WPAN.5 is continued until next re-clustering stage is reached.

6. Simulation and result analysis
The proposed algorithms are tested through simulations using LR-WPAN module in network simulator-3 (ns-3.29) on Ubuntu 16.04 platform. The LR-WPAN devices are randomly placed using constant position mobility model and have the same initial energy of 1J. The mobility of MDCA is implemented using waypoint mobility model with a constant speed. The radio propagation model used is ns3::LogDistancePropagationLossModel.

6.1. Simulation parameters
The network parameters related to deployment area, number of nodes, and energy consumption of the nodes during state changes are listed in Table 6. The experiment is conducted for network area of 500 × 500 m2 & 1000 × 1000 m2, by varying the number of nodes between 100 and 500.The proposed GSA-RPI is implemented and tested along with D-RPI, SPT-DGA, PSO-RPI, and BR-CTR algorithms. The D-RPI is the rectangular cluster formation algorithm for finding the near optimal set of RPs (Section 5.4.1) in a deterministic way. These RP positions are further optimized using PSO-RPI and GSA-RPI algorithms. The algorithms SPT-DGA and BR-CTR are explained in Section 2. The parameters used for PSO/GSA/SA meta-heuristic algorithms are given in Table 7.


Table 6. Simulation parameters.

Parameter	Value	Parameter	Value
Target Area	500 × 500 m2, 1000 × 1000 m2	TrRvOffCurrent	426 μA
Number of LR-WPAN Devices	100, 200, 300, 400, 500	RvBusyCurrent	18.8 mA
Device Initial Energy	1.0 J	TrCurrent	17.4 mA
Reliable Communication Range	10, 20, 30, 40, 50, 60 m	TrBusyCurrent	17.4 mA
Data Packet Size	0 to 20 Bytes	TrRvSwitchingCurrent	5 mA
Speed of MS	5 m/s	TrRvStartCurrent	5 mA
Pause time at RPs	1s	Supply Voltage	3.3 V
Time Tr_OFF to Tr_ON	110 μs	RvCurrent	18.8 mA
Time Tr_ON to TrRv_OFF	Negligible		
Time TrRv_OFF to Rv_ON	110 μs		
Time Rv_ON to TrRv_OFF	Negligible		
Time Tr_ON to Rv_ON	128 μs		
Time Rv_ON to Tr_ON	128 μs		

Table 7. Parameters used for GSA, PSO, and SA.

GSA Parameters	PSO Parameters	SA Parameters
Parameter	Value	Parameter	Value	Parameter	Value
α	0.5	Inertia weight, w	1	Initial Temperature, t	100000
G0	100	c1	1	Cooling rate, r	0.9995
ε	0.001	c2	1	Minimum Temperature tmin	0.00001
No.of Agents, NA	50	No.of Particles, NP	50	Maximum Iterations, TS	10000
Maximum Iterations, TG	700	Maximum Iterations, TP	700		
6.2. Number of CHs and RPs
The number of CHs and RPs have high impact in finding the path length of MDCA (see Fig. 9). It depends on the number of nodes and communication range of devises in the network. The average number of CHs obtained by varying the number of devices from 100 to 500 is compared in Fig. 10. Here, the simulation is done in an area of 500 × 500 m2 with 20 m communication range. The number of CHs are same in D-RPI, PSO-RPI and, GSA-RPI algorithms. This is because all the three algorithms use same method to perform first level clustering. But in SPT-DGA and BR-CTR, the number of CHs increases since there is an upper bound in the number of relay nodes. When the number of relay nodes in a cluster reaches a threshold, new clusters are created.

Fig. 9
Download : Download high-res image (334KB)
Download : Download full-size image
Fig. 9. D-RPI: Initial RPs and data collection path for MDCA.

Fig. 10
Download : Download high-res image (419KB)
Download : Download full-size image
Fig. 10. Comparison of No. of CHs by varying number of devices [Area: 500 × 500 m2 and r = 20 m].

Fig. 10 shows that the number of CHs in the proposed GSA-RPI is 19% and 13% less compared to SPT-DGA and BR-CTR algorithms respectively. Reduction in CHs helps to minimize the number of RPs. This will lead to reduction in MDCA path length also.

Fig. 11 depicts the comparison of the number RPs in the given network scenario by varying the number of devices(100–500). In D-RPI, PSO-RPI, and GSA-RPI, rectangular cluster formation algorithm is used to find the number of RPs. This will result in same number of RPs in all of these algorithms. But in SPT-DGA, CHs itself will act as data collection points or RPs. So the number of RPs will be same as that of CHs. BR-CTR algorithm chooses the communication overlap areas formed by more sensors, to be the first visiting area. As a result, the number of RPs can be reduced. In GSA-RPI, with respect to number of RPs, there is an improvement of 68% and 22% compared to SPT-DGA and BR-CTR algorithms respectively. The reduction in the number of RPs helps to minimize the path length and data collection delay in the network.

Fig. 11
Download : Download high-res image (314KB)
Download : Download full-size image
Fig. 11. Comparison of No. of RPs by varying number of devices [Area: 500 × 500 m2 and r = 20 m].

6.3. Fitness evaluation and path convergence
The fitness function, f, is composed of an integer part f1 and a decimal part f2 (Equations (9), (12), (13)). The first part f1 is the direct indicator of full coverage of CHs by RPs. In D-RPI, PSO-RPI, and GSA-RPI, the hierarchical cluster formation ensures full coverage of the network through CHs (Section 5.2)and returns the number of CHs. So the value of f1 will always be the number of CHs. The second part of fitness represents the path length component(f2). This is the travel path obtained through RPs after second level clustering which is mapped to a fraction between 0 and 1.

Fig. 12 shows only the average fitness f2 against varying number of nodes. From the graph, it is clear that the fitness value is high for GSA-RPI algorithm. It is 23% more than D-RPI and 18% more than PSO-RPI. This high value indicates that the path length obtained for GSA-RPI is minimum.

Fig. 12
Download : Download high-res image (208KB)
Download : Download full-size image
Fig. 12. Average fitness against varying number of nodes [Area: 1000 × 1000 m2 and r = 30 m].

The convergence of MDCA path length against number of iterations, TG, by varying the number of devices from 50 to 200 is plotted in Fig. 13. Here, the simulation is done in the area of 1000 × 1000 m2 with r = 30 m. From the graph, it is obvious that the path length using GSA-RPI decreases as TG increases. Also notice from Table 8 that, after 500 iterations the path convergence rate is less than 1%. For the remaining iterations, the path length is almost steady. Therefore, MaxIterations is fixed at 700 during simulation.

Fig. 13
Download : Download high-res image (250KB)
Download : Download full-size image
Fig. 13. Convergence of MDCA path length in GSA-RPI by increasing number of iterations.


Table 8. Path convergence rate.

Iteration	0–100	100–200	200–300	300–400	400–500	500–600	600–700
Convergence rate (in %)	7.7	8.2	5.9	3.5	1.3	0.5	0.3
6.4. MDCA path length comparison
When data is collected by cluster heads, it has to be delivered to the MDCA when it reaches the corresponding RPs. The delay in visiting time of MDCA will lead to data loss due to memory overflow. This will badly affect the energy consumption of CHs also. To overcome such a situation, the data collection delay need to be minimized. This is achieved by finding the optimal location of RPs, there by minimizing MDCA path length and travelling time.

After finding the RPs, the route of MDCA is identified for various algorithms. All the algorithms are analyzed by varying the number of devices and communication ranges. From Fig. 14, it is evident that the path length of the proposed GSA-RPI is minimum compared to all other methods. The improvement of GSA-RPI over BR-CTR, PSO-RPI, D-RPI, and SPT-DGA is 12.4%, 14.9%, 21.2%, and 32.3% respectively. GSA and PSO based RPI methods optimizes the location of RPs based on the fitness function. It is also noted that the performance of PSO-RPI and BR-CTR are almost the same.

Fig. 14
Download : Download high-res image (275KB)
Download : Download full-size image
Fig. 14. Path length against varying number of devices [Area: 500 × 500 m2, R = 20 m].

The path length is also analyzed by varying the communication range of the nodes [20–60 m] as shown in Fig. 15. As the communication range increases, the length of the trajectory decreases. PSO-RPI and BR-CTR generates almost similar values but D-RPI path length is high since RP points are not optimized in this case. Since the number of RPs are the highest in SPT-DGA, the performance of this algorithm is poor compared to others. The GSA-RPI path length is 14.8% and 13.9% less compared to BR-CTR and PSO-RPI.

Fig. 15
Download : Download high-res image (253KB)
Download : Download full-size image
Fig. 15. Path length against varying communication range [Area: 500 × 500 m2, Number of nodes = 300].

6.5. Lifetime of the network
The life of LR-WPAN devices is based on the energy level after each round. Here the network lifetime is defined as the round in which the energy level of certain number of the total node population (N is the total number of nodes deployed initially) in the network goes below 10% of initial energy. The performance indices First Node Dies(FND), Half Nodes Alive (HNA), and Last Node Dies (LND) are defined below.

●
FND: Round in which the first node's residual energy falls below 10% of initial energy.

●
HNA: Round at which the half of the nodes exhausts its energy (below 10% of initial energy).

●
LND: It is the round in which the last node's energy goes below 10% of initial energy.

The lifetime of GSA-RPI is analyzed for FND, HNA, and LND by varying re-clustering threshold which is fixed as the percentage of initial energy. The network area under consideration is 1000 × 1000 m2 with communication range as 30 m and number of nodes as 300. When any one of the CH's energy goes below this threshold, the MDCA initiates re-clustering. It is observed from Fig. 16 that, the lifetime decreases when threshold increases. Small value of threshold increases the frequency of re-clustering and this will lead to the increase in control overhead. But the network lifetime is increased for minimum threshold. So during the simulation, re-clustering threshold is fixed as 5% of initial energy.

Fig. 16
Download : Download high-res image (237KB)
Download : Download full-size image
Fig. 16. Lifetime of GSA-RPI vs re-clustering threshold.

Fig. 18 demonstrates the longevity of nodes during the data collection process by fixing the number of deployed nodes as 100, the communication range as 30 m, and the deployment area as 500 × 500 m2. The number of alive nodes diminishes as MDCA round progresses. The performance of SPT-DGA and BR-CTR are poor since there is no reclustering to choose a new CH and RP. The CHs will continue working until its energy gets exhausted. In D-RPI, the devices die 17.4% rounds earlier than GSA-RPI. The device death rate of GSA-RPI is better than PSO-RPI and D-RPI. It is 14.8% and 17.4% ahead of PSO-RPI and D-RPI respectively.

Fig. 18
Download : Download high-res image (285KB)
Download : Download full-size image
Fig. 18. Number of alive nodes for varying rounds.

Fig. 19 and Table 9 compares the network lifetime in terms of simulation rounds taking 100 devices with communication range of 20 m in the region 500 × 500 m2.

Fig. 19
Download : Download high-res image (336KB)
Download : Download full-size image
Fig. 19. Network Lifetime in terms of Number of alive nodes.


Table 9. Network lifetime interms of number of rounds for each algorithm.

Network lifetime	D-RPI	SPT-DGA	PSO-RPI	BR-CTR	GSA-RPI
FND	1254	978	1346	1144	1603
HNA	2913	1734	3013	2760	3343
LND	4192	2926	4323	3828	5077
All the nodes were alive till 978th round. The first node dead after 1603rd round in GSA-RPI whereas it happened at 1346th, 1254th, 1144th, and 978th rounds in PSO-RPI, D-RPI, BR-CTR, and SPT-DGA respectively. Out of the 5 algorithms, lifetime of SPT-DGA is poor since after round 2926 the network becomes inactive as all the nodes exhausts its energy. The GSA-RPI performed better than other algorithms by extending the longevity of the devices until 5077 rounds. The average lifetime of the network in GSA-RPI is 13.3%, 16.7%, 22.8%, and 43.7% higher compared to PSO-RPI, D-RPI, BR-CTR, and SPT-DGA respectively. This is because in GSA-RPI, the average remaining energy of the devices is high, thus the lifetime of the network is also increased. The optimum RP position and the reduced path length helps in maximizing the network lifetime of GSA-RPI.

7. Conclusion and future work
In this paper, an optimal trajectory design for MDCA is proposed by selecting rendezvous points for data collection from LR-WPAN devices. This approach uses a two level clustering scheme. In the first phase, the sensor attached devices are grouped into hierarchical clusters and CHs are selected based on the residual energy of the devices. Rendezvous points are identified in the next phase based on a deterministic approach and the path length of MDCA is optimized using a GSA based heuristic approach. The RPs helps in bringing down the number of data collection points and thereby reducing the length of the travel path by MDCA. The GSA-RPI method outperforms deterministic and PSO based approaches in terms of path length, average energy consumption, and network lifetime.

When the network density (number of nodes) is high, the energy based clustering approach will produce less number of clusters with high membership. This will increase the intra-cluster communication overhead and energy consumption in the network. So the proposed GSA-RPI is well suited for sparse network. The number of nodes in a cluster and the level of hierarchy can be reduced to achieve good load balancing. Some of the future research directions include the following.

●
A clustering approach in a high density network for uniform clustering.

●
A load balanced cluster formation mechanism for better resource utilization.

●
Use other meta-heuristic approaches for RP Identification.

●
MDCA travel path in a 3D space.

