Recent advances in today’s Internet introduced huge demand for End-to-End Quality of Service (E2E QoS) assurances for delivering different types of traffic (video, live streaming, and telemedicine), originating from a wide spectrum of applications. Such applications stretch across multiple administrative domains and require fair and robust coordination for E2E QoS provisioning. While the selection of trusted domains is of paramount importance for the successful realization of E2E QoS, the issue of domain’s trust while finding E2E QoS paths has not been actively explored in the existing works. Trust awareness reduces the risk of violating QoS and improves the confidence of operating QoS across multiple domains. However, identifying trusted domains, finding the source of trust, and quantifying trust are the major challenges for enabling trust aware E2E QoS routing. Auditability of QoS implementation results at each domain forms a vital source for verifying QoS compliance and subsequently evaluating the trust of the domain. However, securely obtaining logs from the domains and identifying the accountability of domains for E2E QoS, without relying on a third party introduces significant difficulty when evaluating domain trust with respect to QoS compliance. This work proposes Trust aware E2E QoS Routing (TRAQR) framework for provisioning E2E QoS with trust and verifying the QoS compliance in Multi-Domain Software Defined Networks (MD-SDN). TRAQR efficiently leverages the tamper-proof and decentralized properties of Blockchain to store and exchange different kinds of trust information required to provision and verify E2E QoS compliance of the domains. This work developed a proof of concept implementation of the TRAQR in an MD-SDN environment emulated using Mininet, RYU SDN controller, Ethereum Blockchain and Smart Contracts to demonstrate the performance and benefits of TRAQR. Further, the simulations showed that the domain trust parameter introduced significant improvement in QoS compliance, even in the presence of untrusted domains.

Previous
Next 
Keywords
Trust

Multi-domain SDN

End-to-End QoS

Auditability

QoS compliance

Blockchain

1. Introduction
The demand for End-to-End Quality of Service (E2E QoS) across multiple administrative domains or Autonomous Systems (ASes) is increasing in today’s Internet to enable a wide variety of applications. For example, applications involving inter-data centre communications, 5G, telemedicine, etc. stretch across different network domains. While each application can have a diverse set of QoS requirements, network domains also can have different policies and modes of QoS implementations. Hence, providing E2E QoS assurances in multi-domain networks requires fair and robust coordination among all the domains crossed by the E2E QoS traffic (Duan, 2014).

The feasibility and confidence of successful QoS operation across multiple domains are crucial factors for the successful E2E QoS implementation; they have not been actively addressed till now. Several existing works addressed the routing of E2E QoS across multiple domains in the Internet (Mirchev, 2015, Bouras and Sevasti, 2005) as well as in the emerging multi-domain SDN (MD-SDN) environment (Bagci and Tekalp, 2019, Zhou et al., 2017, Wang et al., 2016). The SDN based solutions for E2E QoS routing mainly focused on (1) sharing of QoS capabilities among the domains, (2) computing inter-domain QoS constrained paths for diverse QoS requirements, and (3) establishing E2E paths across multiple domains. However, successful path establishment does not guarantee the E2E path to be reliable and comply with QoS requirements. As illustrated in Fig. 1, QoS violation in a single domain on the E2E path can be a performance bottleneck to affect the entire E2E QoS. There can be several reasons for non-compliance of QoS internal to a domain that include sudden increase in traffic demands, infrastructure failures, misconfigurations, or conflicting policies within the domain (Zhao et al., 2012b, Anceaume et al., 2015). Hence, the awareness of trust about domains during the selection of inter-domain paths for routing E2E QoS traffic increases the confidence of operating QoS and reduces the risk of violating QoS guarantees for applications that demand stringent QoS.

However, in a highly competitive environment, a non-negligible set of domains will offer QoS assurances without actually providing the promised QoS. Further, the domains may hold their neighbouring domains accountable for the non-compliance of QoS within themselves to avoid penalties for non-compliance of QoS (Anceaume et al., 2015). Consequently, in order to enable trustworthiness on E2E QoS coordination and implementation, the following questions arise: (1) how to identify the trusted domains, (2) what is the source to evaluate trust, and (3) how to quantify the trust of a domain. Further (1) obtaining a trusted and consistent view of QoS capabilities of all the domains, and (2) finding the E2E path considering domain trust parameter and QoS constraints which is an NP-hard problem, are the challenging tasks for the domains to provide trust aware E2E QoS routing services.


Download : Download high-res image (196KB)
Download : Download full-size image
Fig. 1. The source domain 
 has two candidate E2E QoS paths to choose for the E2E QoS request received from Client to reach Server in the destination domain 
. An untrusted intermediate domain 
 along the E2E QoS path 2 (
) may violate the QoS required for the flow between Client and Server. Selection of E2E QoS path 1 (
) along the trusted intermediate domains 
 and 
 can introduce higher probability to successfully implement QoS between the Client and Server.

One way of identifying trusted domains among multiple domains for E2E QoS routing is to rely on the well-known reputation systems (Sankar et al., 2017). The reputation systems allow domains to estimate the trustworthiness of remote or unknown domains by combining their own experiences and the publicly available trust scores shared among different domains. The existing works (Sankar et al., 2017, Chang et al., 2012) aimed to identify trusted ASes by analysing anomalous BGP updates for secure inter-domain routing. However, to the best of our knowledge, none of the works has evaluated domain trust with respect to QoS compliance. Further, the conventional reputation systems are centralized and have fundamental issues, including verification of domain authenticity, storing and disseminating immutable trust information in the multi-domain network.

Auditability of logs generated by a domain corresponding to the provisioning and implementation of E2E QoS is an important source of verifying and evaluating trust. The logs show and justify how the QoS request is processed by a domain. However, the logs are internal to the domains, and transferring logs from the intermediate domains to the source domain for QoS compliance verification may tamper their integrity. Further, the domains may lie in the audit logs i.e., provide incorrect implementation results in the logs to avoid the penalties for non-compliance of QoS within their domains. Therefore, it is challenging to identify appropriate domains accountable for failed QoS along an E2E QoS path.

The existing works (Argyraki et al., 2010b, Kompella et al., 2009, Alowayed et al., 2018) verified the accountability of domain performances and enabled lie detection based on the inconsistencies in the reports provided by the network operators of different domains. These works rely on a centralized third party that accesses sensitive internal information of the domains to verify each domain’s accountability. However, it is unlikely that the independent network operators accept and trust a third party to monitor and access their private information for measuring domain performances (Haeberlen et al., 2009).

This paper proposes TRust Aware End-to-End QoS Routing (TRAQR) framework designed to guarantee the successful delivery of E2E QoS that stretch across multiple domains and to verify the QoS compliance of the domains using Ethereum Blockchain and Smart Contracts (Buterin et al., 2014). TRAQR uses the trust score as a metric to quantify trust of a domain. The domains in TRAQR select intermediate domains with higher trust scores to compute inter-domain QoS paths for E2E QoS requests. Upon completion of the E2E QoS delivery, the source domain securely obtains the logs that comprise of QoS implementation results from all the domains along the E2E path and verifies their QoS compliance as well as accountability. The verification result of the QoS compliance is used to compute the trust scores of the intermediate domains. The updated trust scores are further used for the next round of selecting trusted inter-domain paths for routing E2E QoS traffic.

TRAQR effectively leverages the tamper-proof and decentralized properties of the Blockchain for the following purposes; (a) verifying the identities of the domains, (b) exchanging QoS capabilities among the domains, (c) storing and exchanging tamper proof trust scores of the domains, and (d) verifying the integrity of the logs. The SDN controller in each domain interacts with the Blockchain to obtain the tamper proof information to make informed decisions about trusted E2E QoS routing and to verify the QoS compliance of the domains providing E2E QoS. In summary, the contributions of this work are the following.

i.
Developing a scalable trust aware QoS routing algorithm that finds the trusted E2E QoS paths by considering trust scores of the domains and QoS requirements of the E2E QoS request.

ii.
Enabling coordination among domain controllers and theBlockchain to establish an E2E QoS path and verify the QoS compliance of the domains along the path.

iii.
Developing a secure log exchange mechanism that takes advantage of off-chain and on-chain communication.

iv.
Developing QoS compliance verification and trust quantification mechanism.

v.
Providing a Proof of Concept (PoC) implementation of TRAQR as an operations support system integrating MD-SDN environment emulated using Mininet, Ryu SDN controller, and Ethereum Blockchain.

Rest of the paper is organized as the following. Section 2 gives the related work; Section 3 introduces the concept of TRAQR. Sections 4 TRAQR system design, 5 Implementation details describe the system design of TRAQR and the implementation details with an illustrative example. The evaluation of TRAQR along with the robustness of TRAQR against known security threats is discussed in Section 6. Section 7 discusses the potential limitations of TRAQR and the possible solutions. Finally, Section 8 concludes and gives the future scope of this paper.

2. Related work
2.1. Establishing trust among multi-domain networks using blockchain
Castro et al. (2015) proposed Route-bazaar, a contractual system using decentralized public ledger that allows mutually distrustful ASes to establish dynamic E2E QoS aware overlay paths in the Internet. In Route-bazaar, ASes can create multilateral contracts for E2E QoS routing on the public ledger along with the proofs of packet forwarding and payments of the corresponding contracts. However, this work does not provide any implementation detail about how ASes coordinate and interact with Blockchain to create and verify the contracts. Rosa and Rothenberg (2018) proposed Blockchain based system for enabling 5G services that stretch across multiple administrative domains. Multi-domain orchestrator in each domain is responsible for creating the decentralized applications that uses smart contracts on the Blockchain to access and manage E2E services across different domains. The system introduces overhead to the Blockchain nodes by storing large amounts of network state information to the Blockchain.

Alowayed et al. (2018) proposed a scoring protocol that allows ASes to rate their peers based on the SLA compliance. This work uses a third party to measure the network performances of domains peering at internet exchange points (IXPs). Further, it stores proofs of SLA compliance reports to the Blockchain that enables other domains to verify that the SLA scores are indeed generated based on the respective domain’s QoS compliance. Marcos et al. (2018) proposed Dynam-IX a system that offers ASes a dynamic way of establishing QoS agreements and build trust cooperatively among providers at the IXPs, aiming to improve wide area traffic delivery. Dynam-IX uses Blockchain to store the history of ASes performance at IXPs. Qiao et al. (2019) proposed a credible routing scheme for inter domain routing among cloud data centres. This work proposed to establish trust relationships between controllers of different cloud data centres and presented a Blockchain based on-demand update mechanism combining with sliding window for information sharing between controllers. The above-mentioned works focused on establishing contracts between the domains on the Blockchain mainly at IXPs, but do not address the trust among domains for E2E QoS routing.

Viriyasitavat et al. (2019) addressed the issue of trust while collecting QoS measurement data from centralized agents in the IoT environment. Viriyasitavat et al. (2019) proposed to integrate the Blockchain with a multi-agent approach to guarantee the trustiness of real-time data for the measurement of QoS in a large-scale IoT environment across multiple subnetworks. Wang et al. (2018) addressed the issue of trust among different service providers and proposed an approach to use Ethereum smart contracts for achieving QoS-aware service composition across different service providers. These works (Viriyasitavat et al., 2019, Wang et al., 2018) used Blockchain as a single communication channel for sharing QoS information across different IoT agents and web services providers respectively. Hence, the use of smart contract and the amount of information to be uploaded on Blockchain will be more in both the systems, which is not scalable and may compromise the privacy of QoS information.

2.2. End-to-end service provisioning across multiple network, cloud and edge domains
Duan et al. (2020) discussed the on-going research on convergence of network, cloud and edge convergence, and presented an architectural framework that enables provisioning of composite network-compute services in the converged network, cloud and edge domains. Duan et al. (2020) also emphasized that the inter-domain co-operations among networking and computing systems play an important role in network, cloud and edge convergence, and require new technologies for unified resource management, federated service management, and holistic life-cycle management of virtual network and compute functions and network, cloud, and edge services. However, trusted cooperation and compliance verification of services are also crucial for the successful deployment of E2E services across multiple network, cloud and edge domains. Yang et al. (2020) proposed a distributed Blockchain-based trusted mobile edge computing (MEC) collaboration architecture, ‘BlockTC’ to solve the problem of routing trust and privacy protection while multiple MEC server collaboration. ‘BlockTC’ uses two distributed routing verification schemes for (1) the multi-MEC server collaboration and (2) the topology privacy protection. Yang et al. (2019) introduced the Hierarchical Trust networking architecture to implement Joint Cloud ‘HTJC’ that facilitates a secure trusted trade environment among multiple cloud service providers. HTJC uses the credit bonus penalty strategy to solve the trust problem among CSPs and to provide users with a secure trusted trade environment. These works (Yang et al., 2020, Yang et al., 2019) applied Blockchain for the sharing and verifying trusted data for collaborations across multiple domains in MEC and cloud computing respectively. However, identifying trusted domains for collaboration and verifying their compliance are the key challenges for provisioning E2E services across different computing domains.

2.3. End-to-end QoS routing in multi-domain networks
The centralized control and network programmability of SDNgained importance in recent times to address end-to-end network coordination for provisioning of E2E QoS in multi-domain networks (Mirchev, 2015, Zhou et al., 2017) Chen et al. (2016) studied how SDN helps to facilitate the inter-domain routing and proposed a greedy algorithm that selects ASes for incremental SDN deployment. Bagci et al. (2016) proposed service level negotiations over multiple SDN networks for E2E service delivery. The authors proposed a mechanism where controllers in multiple domains coordinate to establish SLA across multiple domains. Further, Bagci and Tekalp (2019) proposed a distributed open exchange framework that includes a distributed procedure for E2E QoS path computation across multiple domains. The authors proposed a Multi Constraint shortest QoS (MCQ) path selection algorithm for routing E2E QoS traffic. MCQ algorithm utilizes Dijkstra algorithm and finds an optimal shortest path between the source and the destination domains while satisfying the user specified QoS parameters. The authors verified their work over a multi-operator SDN environment emulated using Mininet and included a controller-to-controller messaging protocol for provisioning E2E services with QoS guarantees. However, the above-stated works do not verify the trustworthiness of domains while computing E2E QoS paths; there is uncertainty towards the successful realization of E2E services. Further, the proposed frameworks do not verify and maintain a consistent view of QoS capabilities of all the domains participating in the multi-domain environment for the provisioning of E2E QoS.

2.4. Reputation systems for identifying trusted ASes
Anceaume et al. (2015) discussed the properties and security features of a reputation system for inter-domain routing with QoS guarantees. However, the proposed system is not implemented and evaluated. Chang et al. (2011) presented AS-TRUST, a trust characterization scheme that computes the trustworthiness of ASes concerning their adherence to behavioural assumptions such as the stability of a route to a prefix and the route adherence to the valley free routing policy. The proposed reputation mechanism uses Bayesian statistics to compute a probabilistic view of AS trust. Chang et al. (2012) proposed AS-CRED, a reputation and alert service for inter-domain routing. AS-CRED analyses the past update announcements made by ASes on the Internet for detecting anomalous BGP updates. Sankar et al. (2017) proposed a reputation system for identifying anomalous BGP paths. Their work focused on identifying suspicious deviations of AS paths between source and destination domains, by analysing the BGP update messages. These reputation systems verify the domain’s routing behaviour specific to BGP messages for evaluating trust in the domains, which cannot be used for trust aware E2E QoS routing. In addition, the traditional reputation systems rely on centralized servers which has fundamental issues that involve verifying the domain authenticity, storing and disseminating trust information among the domains in multi-domain network.

2.5. Determining accountability of ASes
Argyraki et al. (2007) proposed ‘AudIt’, an accountability interface where ISPs pro-actively provide feedback to traffic sources on loss and delay statistics at the administrative domain granularity. Extending their work, the authors proposed ‘Network-Confessional’ (Argyraki et al., 2010b) a system that monitors traffic samples periodically and sends it to a centralized trusted party for the verification of network operator performance with respect to the E2E QoS routing. Kompella et al. (2009) monitors the border routers in a domain to measure the packet loss and average delay between them by maintaining packet counts and average timestamps for packet aggregates. However, these works rely on centralized entities to verify the domain’s performance, which is not acceptable for network operators concerning their network’s privacy.

Chung et al. (2017) proposed Federated Auditing for SDX (FAS) that helps network operators verify if its policies are honoured by the SDN domains participating in an SDX. FAS confirms policy enforcement among peering domains but does not contribute to verify E2E QoS compliance that stretches across multiple domains. Maldonado-Lopez et al. (2016) proposed an auditing protocol for checking policy implementation across multiple SDN domains. The protocol works by sending related flow tables to an origin domain, each time an external switch receives an audit packet. This work does not guarantee the integrity of the log messages as they are transferred to the source domain for verifying the policy compliance of the domains.

2.6. Securing logs using blockchain
Ahmad et al. (2019) proposed BlockAudit, a scalable and tamper-proof system that uses Blockchain to achieve higher security of logs and defend against known attacks. The authors used practical byzantine fault tolerance Blockchain system and evaluated its performance in terms of latency, network size, and transaction rate. Suzuki and Murai (2017) proposed to use Blockchain as an audit-able communication channel for recording transactions in a client–server system. The authors explained the advantages of using Blockchain for auditability over other logging schemes that require trusted third party and public-key cryptography. Shekhtman and Waisbard (2019) presented a tamper-resistant log system using of hyperledger Blockchain. The authors added the encryption layer besides using Blockchain properties to develop a secure log system. Cucurull and Puiggalí (2016) proposed mechanisms to store the integrity proofs of logs to the Blockchain for the distributed banking systems. These works in different disciplines suggest that Blockchain’s immutable nature helps to verify the integrity of logs without relying on a centralized third party.

In summary, the use of the Blockchain technology for multi-domain networks are mainly focused on dynamically establishing contracts between the domains. Most of the existing works used Blockchain as a mode of communication between different domains, which is not scalable and may comprise the privacy of the domains. The current practices for E2E QoS routing do not consider the trust of the domains while selecting inter-domain paths, which may result in poor compliance of QoS. Further, the current reputation systems do not evaluate domain’s trust with respect to QoS compliance, and the QoS compliance verification mechanisms rely on a centralized third party that requires access to sensitive information internal to the domains. Contrary to the existing works, the proposed TRAQR framework introduces a new metric, ‘trust score’ which enumerates the trustability of a domain to be part of E2E QoS path selection. Further, our framework uses both off-chain and on-chain modes of communication for E2E QoS coordination and QoS compliance verification to maximize the benefit of Blockchain beyond a tamper resistant storage of information shared across multiple SDN domains.

3. TRAQR architecture overview
3.1. Definitions
Domain refers to an organization or a network administered by a single operator and has its own network policies and mode of QoS implementation.

Domain Controller (DC) of a domain is responsible for communication with the DCs of other domains, interacting with the blockchain, and handling intra-domain functionalities. DC has the complete knowledge of the topology and the network state information of its domain.

Trust refers to the confidence of one domain in another, to the extent in which the latter domain operates to deliver the QoS as promised to the former.

Trust Score is a metric used to measure the trust of the domain by verifying its QoS compliance. The range of trust score is [0,1]. 
 denotes the trust score given by domain 
 to domain 
. 
, indicates that 
 completely trust 
, while 
, indicates that 
 completely distrusts 
.

3.2. TRAQR overview
TRust Aware End-to-End QoS Routing (TRAQR) framework is developed for the successful delivery and verification of E2E QoS that can stretch across multiple administrative domains. TRAQR evaluates the trust of a domain by verifying the respective domain’s compliance with its commitment to E2E QoS provisioning. The Blockchain in TRAQR enables domains to exchange trust information related to their identities, QoS capabilities, recommendation trust scores (based on their experiences with other domains associated with QoS provisioning), and the integrity proofs of the QoS audit logs in a decentralized manner. Every domain calculates the overall trust score (called comprehensive trust score) of every other domain by combining the domain’s direct trust score and indirect trust score. While the direct trust score of a domain is calculated by observing its QoS compliance, the indirect trust score of a domain is calculated by aggregating the recommendation trust scores shared to the Blockchain by different other domains. The domains participating in TRAQR exchange IP prefix reachability, negotiate QoS parameters for E2E QoS provisioning, and exchange audit logs for QoS compliance verification out of the Blockchain.

Fig. 3 illustrates the QoS compliance verification process. Upon the completion of QoS traffic delivery for the E2E QoS flow, the intermediate domains 
 as well as the destination domain (
) generates an audit log corresponding to the E2E QoS flow, and send it to the source domain 
 off the Blockchain. Further, they update the corresponding log integrity proof to the Blockchain. The audit logs comprise of QoS implementation results generated in the respective domains. 
 checks the integrity of the audit logs using the log integrity proofs from the Blockchain and examines them to verify each intermediate domain’s QoS compliance. The verification results are used to evaluate and update the direct trust scores of the respective domains. Further, these scores are shared with the Blockchain, helping other domains to make informed decisions about selecting a trusted path for E2E QoS routing.

4. TRAQR system design
Fig. 4 shows the internal design of a domain controller and its interactions with other domain controllers and the Blockchain. A domain controller that receives an E2E QoS request from its client is called a source domain controller. The source DC has two major modules: (1) Trust Management Module (TMM) and (2) E2E QoS Routing and Verification (RVM) Module. TMM manages the identities and the trust scores of the domains participating in the TRAQR. RVM is responsible for finding the trusted E2E QoS path, coordinating QoS with domains along the trusted E2E path, securely obtaining logs and verifying their integrity, and determining the QoS compliance of the domains. TRAQR uses four different smart contracts on the Blockchain: (1) Domain Identity Smart Contract (DISC), (2) QoS Capability Smart Contract (QCSC), (3) Trust Score Smart Contract (TSSC), and (4) Integrity Check Smart Contract (ICSC) for storing domain identities, QoS capabilities, indirect trust scores and log integrity proofs respectively.

In TMM, Identity Manager interacts with the DISC to update its own identity and obtain the identities of the other domains participating in TRAQR. The Trust Score Manager quantifies the trust and finds the domains’ comprehensive trust scores by combining their direct and indirect trust scores. While the direct trust score of a domain is calculated based on QoS compliance feedback received from the RVM, the corresponding domain’s indirect trust score is calculated from the recommendation trust scores obtained from the TSSC. The identities and trust scores of all the domains are maintained in the Trust Information Base (TIB).

QoS Manager in RVM obtains and aggregates the QoS capabilities of all the domains from the QCSC and builds QoS Capability Graph (QCG). QCG is the aggregated topology graph whose vertices are the border switches of all domains, and edges are the QoS capabilities between border switches of different domains in the multi-domain network. For the E2E QoS requests, the Trust aware QoS Routing (TQR) algorithm takes QCG and comprehensive trust scores as inputs and finds the Trusted QoS Path (TQP) from source to the destination domain. TQP passes through a set of highly trusted intermediate domains while satisfying the QoS constraints of the E2E QoS requests. The Inter-domain Coordinator negotiates the QoS parameters with the DCs along the TQP for the actual implementation of the QoS.

After a successful negotiation, the Intra-domain handler in each domain along the TQP implements the QoS required for the E2E QoS request. Further, upon the flow expiry, it gathers the flow statistics from the border switches within its domain through which the E2E QoS flow passes. Audit Log handler in the source domain employs Secure Log Exchange Mechanism (SLEM) to collects the audit logs produced by intermediate and destination DCs and verifies their integrity based on the integrity proofs from the ICSC. The QoS Compliance verifier module then runs the QoS Compliance Verification (QCV) algorithm to determine non-compliant domains based on implementation results in the audit logs. The QoS compliance feedback of each intermediate domain is forwarded to the Trust Score Manager, which uses them to update the respective domain’s direct trust score. The rest of the subsections explain the TRAQR design in detail.

4.1. Trust management
4.1.1. Registering and exchanging domain identities
Identifying the domains uniquely in a multi-domain network is crucial for exchanging different kinds of information using the Blockchain. In TRAQR, every DC registers its identity to the DISC in the Blockchain; every DC participating in the TRAQR obtains the identities of all other domains from the DISC. The identity record of a domain includes the domain AS Number as its domain identity (D-ID), Blockchain address and its associated public key.1 Fig. 5 shows the identity record in DISC.

Each identity record of DISC maps the publicly known AS number of the domain to its blockchain account address and the public key. This mapping allows the use of an existing form of domain identity to globally identify the domain on the Blockchain and helps to prevent multiple fake identities being created by a single domain. All further interactions made by a domain to the Blockchain are considered valid only when they are carried out using the Blockchain account address registered to the DISC by that domain. The public key is exclusively included in the domain identity to enable the encryption of audit logs for secure log exchanges, that will be described in Section 4.3.1.


Download : Download high-res image (105KB)
Download : Download full-size image
Fig. 5. Identity record in DISC.

4.1.2. Quantifying trust based on QoS compliance
TRAQR adopts well known Bayesian system (Jøsang et al., 2007) to quantify trust of a domain based on its commitment towards QoS compliance. Bayesian systems take binary inputs (positive (1) or negative (0)) and compute the trust scores by statistically updating beta probability density functions (PDF). The beta distribution reflects the dynamic nature of trust as it takes into consideration, the total number of accumulated experiences while interacting with a domain and provides a probabilistic estimation of future trust of that domain. The trust score of a domain can be obtained from the probability expectation value of the beta PDF and is given by Eq. (1). (1)
 
where, S and F are the total number of successful and failed QoS operations of a domain, respectively. A successful QoS operation is a case where the domain complies with the promised QoS. On the other hand, the failed operation is a case where the domain has violated the promised QoS or when the domain has lied about its audit logs. ‘p’ is the probability that the domain will comply the promised QoS and‘p’  [0, 1] for .

The direct trust score of a domain is calculated using Eq. (1) by observing the domain’s QoS compliance over a period of time. Let 
 represent the direct trust score of domain 
 given by domain 
 at time . Initially, at , when 
 has no interactions with the domain 
, S  1, F  1; 
 is 0.5. For , 
 calculates 
 of 
 by combining the total successful and failed interactions between the domains until time t. If 
 are the total number of successful and failed QoS interactions between 
 and 
 until 
, and 
 and 
 are new successful and failed interactions between 
 and 
. The updated values 
 are calculated using Eqs. (2), (3) respectively. The new trust score at 
 is calculated using Eq. (1) with the updated values of S and F. (2)
(3)
 where, ‘h’ is called as the history dependence factor, which is used to control the impact of the history of the past interactions while updating the trust score of the domains. ‘h’ is essential when a domain tries to take advantage of its good history to maintain its high trust score even when it fails to deliver QoS frequently in the recent intervals of time.

Example 1

Let 
  30, 
  10 be the total number of successful and failed QoS operations between 
 and 
 until 
, then, 
  0.75 (30/(30  10)). If 
  25, 
  15 are the new successful and failed interactions between 
 and 
, and h  0.8, then 
  49 ((0.8)*30  25), and F  23 ((0.8)*10  15), 
  0.68 (49/(49  23)).

4.1.3. Finding the indirect trust scores of domains
TRAQR adopts trust based weighted mean (Ricci et al., 2015) for computing indirect trust score of a domain from all the recommendation trust scores given by different other domains for that domain. The recommendation trust scores are shared using the TSSC in the Blockchain and the recommendation trust score record in TSSC is illustrated in Fig. 6.

Example 2

Let the direct trust scores of the domains (
) evaluated by 
 are (0.5,0.3,0.7,0.5,0.6) respectively, the recommendation trust scores of different domains from the blockchain are given by values of matrix , as shown by Eq. (5), and 
 as 0.4, (5)the indirect trust score of 
 is given by 
 
 
  0.36. Note that recommendation trust score from 
 is not considered as it has the direct trust score of 0.3, which is less than 
.

4.1.4. Finding the comprehensive trust score of a domain
TRAQR finds the comprehensive trust score of a domain by combining the direct and indirect trust scores. The direct trust score is calculated using the Bayesian system described in Section 4.1.2 and the aggregated indirect trust scores is calculated using weighted mean described in Section 4.1.3. The comprehensive trust score of the domain 
 calculated by domain 
, is given by Eq. (6). (6)
where, 
 represent direct trust score, indirect trust score, weights of the direct and indirect trust scores of domain D respectively, and 
. In general, the domains assign more weight to the direct score as they are accurate and reliable as the direct trust score of a domain is calculated based on the direct interactions with that domain. Further, the domains may provide dishonest recommendation trust scores about other domains to the blockchain so as to increase or decrease recommending domain’s trust score. The issue of dishonest recommendation trust scores, its mitigation and incentive mechanisms to provide trusted recommendations are addressed in Zhao et al. (2012a) and Mohsenzadeh et al. (2020).

Example 3

If 
 of a domain are 0.6,0.8,0.7 and 0.3 respectively, the 
 is 0.66 (0.7*0.6 0.3*0.8).

4.2. Provisioning of E2E QoS across multiple domains
4.2.1. Exchanging QoS capabilities among domains
To enable E2E QoS across multiple domains, it is essential to exchange the QoS capabilities of each domain with the others. TRAQR maintains QCSC in the blockchain, with which the participating domains advertise their QoS capabilities to ensure that every domain gets a trusted and consistent view of QoS capabilities in the multi-domain network. Each domain in TRAQR abstracts its physical network in order to get a virtual network view consisting of only border switches (known as border switch abstraction (Zhou et al., 2017)). Based on the virtual network view, the domains advertise (a) intra-domain QoS capabilities along the (virtual) paths between border switches within the domain and (b) inter-domain QoS capabilities between the border switches along the inter-domain links. Fig. 7(a) and (b) illustrate the intra and inter-domain QoS capabilities based on the virtual network view of a domain. Fig. 7(c) shows example QoS capabilities of 
. Fig. 8(a) and (b) show the records of intra and inter-domain QoS capabilities used to update the QCSC. QoS Capability Identity (QC-ID) in each record is used to differentiate multiple QoS capabilities between the same pair of border switches and is unique to each QoS capability.

The QoS Manager module in the DC updates the domain’s QoS capabilities to the QCSC depending on the availability of network resources. Further, it builds the QoS capability graph (QCG) by combining all the QoS capabilities from different domains available in the QCSC. Consequently, QCG forms a multi-directed graph QCG(E,V), where E is the directed edge set representing the QoS capabilities between border switches of different domains, V is the vertex set consisting of the border switches in the multi-domain network. An example QCG is illustrated in Fig. 9.


Download : Download high-res image (181KB)
Download : Download full-size image
Fig. 9. An example QCG formed by combining QoS capabilities of four domains obtained from QCSC. QCG represents the global virtual network view of all the domains in MD-SDN. Every arc originating from a domain border switch to another border switch represents the QoS capability provided by the respective domain.

4.2.2. Finding trust aware QoS path
This work introduces the Trust-aware QoS Routing (TQR) algorithm to determine a Trust-aware QoS Path (TQP) for routing E2E QoS request received at its source domain. TQP passes through intermediate domains with higher trust scores that results in better compliance with the QoS requirements of the E2E QoS request. However, determining TQP considering both domain trust scores and QoS requirements, is a multi-constrained path selection problem, which is NP-hard problem (Bagci and Tekalp, 2019). The TQR algorithm described in Algorithm 1 solves this problem. TQR algorithm follows the breadth first search approach and uses ‘domain length’ metric to reduce the search space and mitigate computational complexity to find the TQP among all possible candidate TQPs.

The source DC identifies the source border switch 
 and the destination border switch 
 in the QCG that will be the end points of TQP. It then runs the TQR algorithm for determining TQP. The algorithm takes QCG, 
, 
, QoS requirement (
), D-IDs and comprehensive trust scores (from TIB), threshold trust score (
) as inputs, and returns TQP, D-IDs, and QoS capabilities (edges) along the TQP as output. First, the TQR algorithm eliminates the domains whose trust scores are less than 
 from the search process. The pre-processing step (lines 1 to 4) finds all such domains from the TIB, removes all the edges (that represent the QoS capabilities) and vertices of the corresponding domains from the QCG(E,V), and obtains a multi-graph QCG
(E
,V
). Now the TQR algorithm calls the Find_Candidate_Paths (line 5) function that searches for all possible candidate TQPs in the QCG
(E
,V
) between 
, 
, that satisfy 
.

Find_Candidate_Paths procedure uses two lists: Open_Paths and Candidate_Paths for searching the candidate TQPs. The  queues the intermediate paths found during the search and the Candidate_Paths is used to store the candidate TQPs. Let DL(P), Q(P) represent the domain length and minimum QoS resource available on all the edges along the path ‘P’. The domain length is the number of domains along path ‘P’ that keeps track of number of domains on the path and the minimum QoS resource of path ‘P’, is used to check whether the path satisfies the QoS requirements or not.

Initially Find_Candidate_Paths creates empty Open_Paths,Candidate_Paths lists, and pushes path with only the source vertex 
 into Open_Paths list (line 14). Then it retrieves the front most path from Open_Paths and calls it as parent_path and the last node of this parent_path as parent (lines 16–18). Now if the domain length of parent_path is less than a predefined value ‘K’ (line 19), it finds all the siblings adjacent to the parent, creates a new intermediate path ‘
’ by appending each sibling to the parent_path. Further, DL(
), Q(
) is calculated for every new intermediate path (lines 20–26). Now, if 
 of the sibling ‘s’, satisfies 
 and ‘s’ is the destination border switch 
, then 
 is added to Candidate_Paths. Otherwise it is added to Open_Paths list for further searching (lines 27–31). This process is iterated until the Open_Paths list has no more paths in it (line 32). Finally, Candidate_Paths list containing all the candidate TQPs is returned (line 33).


Download : Download high-res image (1MB)
Download : Download full-size image
The domain length value (K) for TQR algorithm is set as six for two reasons: (1) according to trust transitivity property (Jøsang et al., 2006), the trust decreases with increase in the number of intermediate domains along the E2E QoS path, and (2) the average AS path length in the Internet is below five i.e. the average number of ASes crossed by any traffic to reach from the source to destination is less than 5. In particular, the average AS path length is 4.3 according to RipeNCC (2016). For each of the candidate TQPs returned by Find_Candidate_Paths function, TQR algorithm finds the path trust score (lines 6–9). A candidate TQP’s trust score is the minimum of the trust scores of all the domains on the candidate TQP and is calculated using Eq. (7). (7) 
 
where, 
 represents the comprehensive trust score of domain 
 calculated by source domain 
. TQR algorithm returns the candidate TQP with highest trust score as TQP along with the D-IDs and their corresponding QC-IDs (edges) along the TQP (lines 11,12).

Complexity of TQR algorithm: The proposed TQR algorithm extends the breadth-first search (BFS) and uses the domain length metric to reduce the computational complexity to find all possible candidate E2E QoS paths, and selects the most trusted path among all the candidate QoS paths. In general, BFS takes 
 time and memory where, b is the average out-degree of the graph and d is the depth of search. However, the overall time and space complexity of the TQR algorithm is 
, where k is the domain length of the E2E QoS path, and b is the average out degree of the vertices in QCG’. TQR performs better than BFS because the domain length (k) in QCG’ which was fixed to a constant value of six, will be smaller than the depth of search d (given by log(V’), in the context of BFS) as the size of the graph increases.

4.2.3. Iterative E2E QoS negotiation
After identifying the TQP for the E2E QoS request, source DC initiates the QoS negotiation process with the DCs of other domains along the TQP, off the Blockchain. First, it generates an E2E QoS ID (EQID) that is unique for each E2E QoS request. It then sends an E2E QoS request message (
) to each of the intermediate and destination DCs along the TQP. As shown in Fig. 10(a), the 
 message sent to a receiving domain contains the EQID, source domain D-ID, receiving domain D-ID, QC-IDs of the intra and inter-domain QoS capabilities of the receiving domain, source and destination IP address of the E2E QoS request. Each DC receiving 
 verifies whether it can positively serve the E2E QoS request. If yes, then the respective DC will send 
 message with positive acknowledgement.

However, if any of the DCs are unable to respond positively to the QoS request (due to unavailability of resources), a negative acknowledgement is sent in the (
) message, and the negotiation process will end. The source DC identifies next most trusted candidate QoS path and initiates the negotiation process again. The 
 message format is shown in Fig. 10(b) and the successful E2E QoS negotiation process is shown in Fig. 11(a).


Download : Download high-res image (180KB)
Download : Download full-size image
Fig. 10. (a) E2E QoS Request (
) message format, (b) E2E QoS Reply (
) message format.

4.3. Auditability of the E2E QoS
4.3.1. Secure log exchange mechanism
Source DC requires the tamper-proof logs from all domains that implemented the QoS to verify each domain’s QoS compliance for the E2E QoS flow. The Secure Log Exchange Mechanism (SLEM) facilitates the source DC to get the tamper-proof logs from the intermediate and destination DCs, as illustrated in Fig. 11 part (b). Upon the completion of the traffic flow, every intermediate and destination DC collects the flow statistics from the border switches where the flow enters and exits within its domain, creates a log message (
) including the flow statistics, as shown in Fig. 12. The flow statistics at each border switch comprise of the implementation results specific to QoS requirements of the E2E flow such as the packet count, duration of the flow, start and end timestamps, and source, destination IP addresses of the E2E QoS flow.

Each of the intermediate and destination DC encrypts the 
 message generated within their domain using the source domain public key. Remember (from Section 4.1.1) that every DC has identities of all the domains available in its TIB. The encrypted messages are then sent to the source DC to prove their commitment to the QoS compliance. Further, each intermediate and destination DC calculates the hash value of the 
 message, creates an integrity check record in ICSC, and puts the hash value as log integrity proof into the record. The integrity check record in the ICSC is shown in Fig. 13. The encryption process ensures that the logs are confidential to the intermediate domains en-route to the source DC, and the log integrity proofs in the ICSC lets the source DC verify that the logs are not tampered. After receiving 
 messages from all the intermediate and destination DCs, the source DC decrypts the logs using its private key, verifies their integrity using the log integrity proofs from the corresponding integrity check record in ICSC. The source DC then proceeds to verify the QoS compliance of the intermediate and destination domains based on the flow statistics from the audit logs.

4.3.2. Verifying QoS compliance of the domains
Although SLEM enables the source DC to obtain tamper-proof audit logs, the intermediate DCs may deliberately provide incorrect implementation results in their 
 messages to falsely prove their QoS compliance. This usually happens when an intermediate domain along the TQP has not been able to fulfil its QoS commitment and attempts to avoid getting low trust scores for the non-compliance of the QoS. Hence, the source DC runs the QoS Compliance Verification (QCV) algorithm, to find the domains that lie and determine the accountability of each domain that implemented the E2E QoS, based on the approach proposed by Argyraki et al. (2010b). The QCV algorithm (described in Algorithm 2) works by identifying the inconsistencies among the QoS implementation results at the entry and exit border switches of each domain corresponding to the E2E QoS flow. In TRAQR, QCV algorithm verifies the QoS compliance of the domains specific to bandwidth requirement of the E2E QoS request. However, the QCV algorithm can be extended to verify QoS compliance for other QoS metrics such as delay and loss by using the techniques proposed in Argyraki et al., 2010a, Argyraki et al., 2007.


Download : Download high-res image (599KB)
Download : Download full-size image
Algorithm 2 takes inputs as 
 messages of the source domain 
, intermediate domains 
, destination domain 
 of the E2E QoS flow, 
, (a very small and acceptable difference in throughput) and returns the list of non-compliant domains as output. The algorithm initializes an empty non_compliant_domains list (line 1). It then calculates flow throughput values, 
 and 
 of the E2E QoS flow at the entry and exit border switches, where the flow enters and exits the source, intermediate and the destination domains (line 2) using the flow statistics in the respective 
 messages, as shown in Fig. 14. The throughput of the E2E QoS flow at a border switch 
 (read as border switch j of domain i) is calculated using Eq. (8). (8)
 

The algorithm first compares the flow throughput at the two end points of E2E QoS flow i.e. at the entry border switch of source domain, 
 and at the exit border switch of the destination domain, 
 to check if there is any QoS violation for the flow. If difference is less than 
, then QCV algorithm confirms that all intermediate domains fully complied the QoS of the E2E QoS request and exits the algorithm (lines 3–5). However, if QCV finds that the difference of 
, 
 is greater than 
, then there is a QoS violation. The QCV algorithm now iteratively checks the inconsistencies in the flow throughputs between every pair of domains starting from the source domain 
 to the destination domain 
 along the TQP (lines 7–11).

For each domain pair 
 starting from the source domain, the algorithm first compares the flow throughputs 
 at the border switches within the domain 
 (line 7). If the difference of flow throughput between the entry border switch (
) and the exit border switch (
) is greater than 
, there is a QoS violation within the domain 
, and the domain 
 is added to the non_compliant_domains list. Then, it compares the flow throughputs at the exit border switch (
) of domain 
 and entry border switch 
) of the domain 
 corresponding to E2E flow, along the inter-domain link (line 10). If the difference of 
) and 
 is greater than 
, then there is QoS violation along the inter-domain link connecting the domain pair 
, and the domain 
 is added to the non_compliant_domains list. Finally, after comparing all the domain pairs, the algorithm returns the non_compliant_domains list.

The QCV algorithm is effective in detecting lies told by an intermediate domain in its audit logs. If an intermediate domain 
 on the E2E QoS path lies in its audit log, there will be an inconsistency between the flow throughput values between border switches that connect the domains 
 and 
. Since 
 is also responsible to deliver QoS on the inter-domain link between 
 and 
, the QCV algorithm confirms that 
 has violated the QoS on one of the links within its control. Different cases arising out of QoS compliance verification which include (a) full QoS compliance, (b) QoS violation, and (c) QoS violation and a domain lying in the audit logs, are demonstrated with an illustrative example in Section 5.3.

After running the QCV algorithm, the source DC assigns a trust score of ‘1’ to the fully compliant domains and ‘0’ for the non-compliant domains. Further, it updates the direct trust score of the intermediate domains based on the previous interactions and the current interaction, using the Bayesian system described in Section 4.1.2.

5. Implementation details
5.1. Testbed setup
This work implemented a Proof of Concept (PoC) of the TRAQR system on a multi-domain SDN network with six SDN domains and a private Ethereum Blockchain. Fig. 15 shows the testbed design, and Table 1 gives the details of the software used for implementing PoC. The testbed is created on Ubuntu 18.04 server (Intel(R) Xeon(R) E5-32 core CPU with 32 GB Ram) that used kernel based virtual machine (KVM) to create virtual machines (VMs). A VM created for each domain runs the RYU SDN (RYU SDN Framework, 2016) DC and Ethereum BlockChain Node (BCN) for that domain. Additionally, a VM for Mininet (Mininet Topology Emulator, 2018) is created that emulates the multi-domain network topology. The virtual networks (VNs) in the testbed are used to isolate the traffic of different domains and the Blockchain.

The domain networks, their interconnection with the DCs and the Blockchain is illustrated in Fig. 16. Each domain network has two intra-domain switches and two border switches. The DC in the respective domain’s VM uses OpenFlow (2020) to manage the switches in its domain. Two hosts H1 and H2 are created in domains 
 respectively to test the E2E QoS traffic flows. The hosts are assigned IP addresses from different subnets (10.0.1.0/24, 10.0.6.0/24) to distinguish the IP prefixes of the domains. A BCN in a domain establishes a peering connection with the BCNs running in its adjacent domains and the BCNs of all the domains are interconnected to form a private Ethereum Blockchain network.


Download : Download high-res image (240KB)
Download : Download full-size image
Fig. 15. Testbed design for PoC. 
 is the virtual machine created of domain 
 and runs controller 
 and Blockchain Node 
. The virtual networks (
) are used to isolate the traffic of the domains and a separate virtual network is used for Blockchain traffic.


Table 1. Details of the software used for PoC implementation.

Tool	Software & version
Blockchain	Ethereum 1.8.23-stable
SDN controller	Ryu 4.34, using OpenFlow 1.3
Network emulator	Mininet 2.2.2, open vswitch 2.2
Smart contracts	Solidity language 0.4.25
Blockchain controller interface	Web3.py 5.11.1
The smart contracts (DISC, TSSC, QCSC, and ICSC) used for the functioning of the TRAQR are written in solidity language and deployed on the Blockchain using web3 (Web3 API, 2018). Web3 is a python library developed for interacting with the Ethereum Blockchain node. The smart contracts source code written in solidity language for TRAQR are available publicly at Solidity Smart Contract codes (2020). Each smart contract has a unique address; the functions defined in the smart contracts are called by using the APIs provided by the web3 library. For the PoC implementation, it is assumed that addresses of smart contracts are available to all the domains. The RYU SDN controller can read and write to different functions in smart contracts by importing the web3 library.


Download : Download high-res image (361KB)
Download : Download full-size image
Fig. 16. Network diagram of the testbed. 
 represents intra-domain switch j of domain i, 
 represents border domain switch j of domain i, 
 are domain controller and blockchain node of domain 
 respectively. The BCNs of all the domains form the blockchain network. DCs communicate to the switches in their domains using OpenFlow.


Download : Download high-res image (229KB)
Download : Download full-size image
Fig. 17. QCG constructed based on the QoS capability advertisements from Table 2. 
 finds E2E QoS path from 
 to 
 that connects to H1 and H2 respectively.

5.2. Communication among DCs
TRAQR uses in-band mode of inter-DC communication, i.e., DCs communicate using the data plane via border OpenFlow (OF) switches. This mode of communication avoids the overhead of creating and maintaining out-of-band channels for inter DC-communication. DCs create control packets each for a different purpose to enable inter-DC coordination. The inter-DC coordination messages that include 
, 
, and 
 are encapsulated in the payloads of control packets to enable E2E QoS negotiation and log exchanges among DCs. The DCs exchange IP prefix reachability information among themselves using the control messages described in Bagci et al. (2016).

5.3. Illustrative example for E2E QoS provisioning and QoS compliance verification
Consider an illustrative example scenario where H1 in 
 wants to send traffic to H2 in 
 with QoS requirement as 20 Mbps in the test network, shown in Fig. 16. Further, let the intra and inter-domain QoS capabilities of each domain in the test network are given by Table 2, threshold trust score be 0.4, the comprehensive trust scores of 
 and 
 are 0.7,0.8,0.6,0.3 respectively. 
 constructs the QCG from the QoS capabilities of all the domains from the QCSC, as shown in Fig. 17, and finds TQP for routing traffic from H1 to H2 using QCG. Note that there are three possible E2E QoS paths for H1 to reach H2 that satisfies the QoS requirement of 20 Mbps, as shown in Table 3. However, TQR finds only Paths 1 and 2 as candidate TQPs, as is it eliminates the domain 
 during its search process because of its lower trust score (than threshold trust score). TQR selects Path 1 as the final TQP for implementing the E2E QoS request because of its higher path trust score.

After successful negotiation of QoS with 
, 
, and 
, 
 allows H1 to send QoS traffic to H2. Every DC along the TQP installs flow rules required for the implementation of QoS in its domain and forwards the traffic to the destination of the flow. This work used OVS queues (OVS Queue, 2013) at the appropriate switch ports in all domains along the TQP to provision the bandwidth required for the E2E QoS request. Further, the domains include the  of the E2E QoS flow used in QoS negotiation process in the cookie field of the flow rule to uniquely identify each flow from a source domain, and enable the flow remove flag in the flow rule. This helps the DCs of the respective domains to uniquely identify and obtain the statistics of the E2E QoS flow from the corresponding switches once the flow is expired. After the completion of flow, 
, 
, 
 encrypts the 
 messages using the public key of 
 obtained from DISC, creates the log integrity proof by hashing the log message using SHA256 hash function and update it to the ICSC. 
 decrypts the encrypted logs obtained from 
, 
, 
 using its private key, calculates the hash of the log using SHA256 hash function and compares it with the log integrity proofs obtained from ICSC. If both hash values match, 
 confirms that the logs are not tampered. 
 now runs the QoS compliance verification algorithm with inputs as the log messages, to verify the QoS compliance of 
.


Table 2. Example intra and inter-domain QoS capabilities of the domains in test network in the direction of 
 to 
.

Domain	Intra-domain QoS capabilities	Inter-domain QoS capabilities
QID	Border
switch 1	Border
switch 2	QoS
(BW)	QID	Neighbour
DID	Border
switch 1	Border
switch 2	QoS
(BW)
01	
15 Mbps	03	
30 Mbps
02	
30 Mbps	04	
30 Mbps
01	
10 Mbps	03	
30 Mbps
02	
25 Mbps
01	
15 Mbps	03	
30 Mbps
02	
25 Mbps
01	
20 Mbps	03	
30 Mbps
02	
30 Mbps	04	
30 Mbps
01	
10 Mbps	03	
30 Mbps
02	
30 Mbps
01	
20 Mbps					
02	
30 Mbps					

Table 3. All possible E2E QoS paths from H1 to H2 with their trust scores and the bandwidth available on the path. TQR algorithm omits path 3 during its search as trust score of 
 is less than threshold trust score.

Path-id	E2E QoS Path and domains on the path	Path trust score	Available BW
1	 
 	0.8	25 Mbps
2	 
 	0.7	25 Mbps
3	 
 	0.3	30 Mbps
We used iperf tool (iperf3, 2020) to generate flows with 20 Mbps from H1 (client) to H2 (server) for a duration of 10 s to test the flows. The QoS compliance verification is explained using the following three cases.

Case (i) 
 observes full QoS compliance: Fig. 18 shows the iperf server report upon the completion of the E2E QoS flow from client to server. The logs at the source, and the logs obtained from each of the intermediate domain and destination domains are shown in Table 4. The source DC calculates the throughput on each of the border switches along the TQP using Eq. (8). For example, the throughput achieved at 
 is calculated as 
 
 20 Mbps. It can be seen that 
 finds no inconsistencies among the throughput calculated across all the border switches of each domain along TQP.

Case (ii) 
 observes QoS violation: In this case, we demonstrate the QoS violation scenario assuming the domain 
 has a lossy link along the TQP. To realize this, we modified a link internal to the domain 
 along the TQP to incur a packet loss of 25%. Fig. 19 shows the server report upon completion of the E2E flow from client to server. The logs obtained at the source, and the logs obtained from each of the intermediate domain and destination domains are shown in Table 5. It can be seen (marked in bold) that the number of packets at the border switches differ due to the lossy link in domain 
. At 
, the throughput calculated is 20 Mbps 
 
 which is equal to the throughput of 20 Mbps observed at the 
. However, the throughput at 
 is 15 Mbps 
 
 due to the lossy link. Further, the throughput of 15 Mbps can be observed along the subsequent border switches 
 and 
.


Download : Download high-res image (324KB)
Download : Download full-size image
Fig. 18. The iperf report showing 20 Mbps throughput achieved at the server as expected.


Download : Download high-res image (306KB)
Download : Download full-size image
Fig. 19. The iperf report showing only 15 Mbps throughput achieved at the server.


Table 4. Table showing the flow statistics of the entry and exit border switches of the domains along TQP in case of full QoS compliance.

Domain	Logs generated at the border switches
 
 
 
 
Case (iii) 
 observes QoS violation, and 
 is lying in its log: In this case 
 observes the QoS violation and the iperf server report is similar to case ii, as shown in Fig. 19, but the logs from the 
 differ as shown in Table 6. Specifically, 
 provides the same set of flow statistics for both the border switches 
 and 
, and claims that it has provisioned the QoS in accordance with the QoS requirement, even when it observes a loss internally. However, based on the flow statistics in the logs, QCV algorithm calculates the flow throughput at the exit border switch of 
 as 20 Mbps, and the flow throughput at the entry border switch of 
 as 15 Mbps. Based on this inconsistency, QCV algorithm confirms that the QoS violation has occurred before reaching the domain 
. It is to be noted that the domain 
 is also responsible for QoS delivery on the inter-domain link between the border switches 
 and 
.


Table 5. Table showing the flow statistics of the entry and exit border switches of the domains along TQP when QoS is violated.

Domain	Logs generated at the border switches
 
 
 
 

Table 6. Table showing the flow statistics of the entry and exit border switches of the domains along TQP, when QoS is violated and 
 lies in its audit logs.

Domain	Logs generated at the border switches
 
 
 
 
6. TRAQR evaluation
6.1. Time taken for different blockchain operations
Table 7 presents the average time taken to write or read different kinds of information from the smart contracts used in TRAQR. The operation involves the interaction with the Blockchain. It is observed that the write operations take longer time because, the transactions created for the write operation needs to be mined before permanently getting added to the Blockchain. On the other side, the read operation takes very less time as it is directly accessed from the Blockchain data that is present locally on the Blockchain node. TRAQR uses private Ethereum Blockchain, so the time taken for the creating transactions will be less than public Ethereum Blockchain (which on average takes 14 s to mine a new block (Buterin et al., 2014)).


Table 7. Average time taken for writing and reading different kinds of data from different smart contracts.

Operation	Average time (s)	Operation	Average time (s)
Write domain ID to DISC	9.531	Read domain ID from DISC	0.011
Write QoS capability to QCSC	9.472	Read QoS capability from QCSC	0.01
Write trust score to TSSC	8.47	Read trust score from TSSC	0.012
Write Log Integrity to ICSC	9.569	Read log integrity from ICSC	0.012
6.2. TQR algorithm performance evaluation
The performance of TQR algorithm is compared with the multi-constrained shortest QoS path (MCQ) algorithm (Bagci and Tekalp, 2019). MCQ algorithm finds an optimal shortest path from a source to a destination that satisfies the QoS requirements. However, it does not consider the trust parameter of the domains. Both the algorithms are developed in Python 3.5 and run on Intel Core i5 processor with 2.30 GHz clock speed, 8 GB RAM. The AS level multi-domain networks are generated using the Barabasi–Albert (BA) graph generator that is a widely used for generating AS-level graphs (Kalmbach et al., 2017). The BA graph model follows power law (as observed in Internet) and establishes links based on the preferential attachment principle. A BA graph of ‘n’ nodes (ASes) is built by attaching new nodes each with ‘m’ edges that are preferentially attached to existing nodes with high degree. The simulation considered three types of domains; trusted, moderate, and untrusted domains based on the domain’s behaviour while complying with the QoS. The threshold trust score of a domain is chosen as 0.4, so that most of the domains which are likely to provide QoS assurances are considered for E2E QoS path selection. Table 8 gives the simulation parameters used for comparing TQR and MCQ algorithms based on the metrics including (a) algorithm processing time, (b) Path discovery ratio, (c) QoS compliance ratio, (d) trust score distribution, (e) average path length. The following subsections explain the evaluation metrics and the observations in detail.


Table 8. Simulation parameters.

Simulation parameters	Range & values
Average node degree	5,10
Number of domains	Varying in the range (40, 60, 80, 100, 200)
Bandwidth on edges	Uniform random distribution [20 Mbps–30 Mbps]
Percentage of untrusted domains	Varying in the range (5, 10, 15, 20 30)
Percentage of moderate domains	10
Trust scores of untrusted domains	Randomly chosen between 0.1 and 0.4
Trust scores of trusted domains	Randomly chosen between 0.8 and 1
Trust scores of moderate domains	Randomly chosen between 0.4 and 0.7
Threshold trust score of domains	
  0.4
Number of source–destination pairs	
, where, N  no. of trusted domains
QoS requirements	
  20 Mbps
6.2.1. Algorithm processing time
Fig. 20 shows the average processing time of TQR and MCQ algorithms to find E2E QoS paths for all the source and destination pairs, when there is no untrusted domain in the multi-domain network. TQR algorithm takes slightly longer time to find the E2E QoS path. This is because TQR algorithm takes trust metric into consideration and processes the trust scores of the domains while searching for candidate E2E QoS paths from the source to destination domain, with satisfying the QoS constraints. Fig. 21 shows the time comparison of TQR and MCQ by increasing the number of untrusted domains in the multi-domain network. TQR algorithm takes lesser time compared to MCQ algorithm to find the E2E QoS path. This is because TQR algorithm eliminates the domains whose trust scores are less than the trust threshold, and hence the search space decreases while computing the E2E QoS path. However, due to elimination of untrusted domains, TQR may not always find a path for some E2E QoS requests that are discussed in the next evaluation item.

6.2.2. Path discovery ratio
TQR algorithm may not always find an E2E QoS path as it eliminates untrusted domains during the search for finding candidate E2E QoS paths. To show these cases, we evaluate the Path Discovery Ratio (PDR) of TQR and MCQ algorithms. PDR is calculated as the ratio of the number of paths discovered out of the total number of source–destination pairs considered for finding E2E QoS paths. PDR depends on average node degree on multi domain network. Fig. 22, Fig. 23 shows the PDR of 40 and 100 domain networks respectively, having an average node degree of 5. The PDR of TQR is above 95% for both the networks and the decrease of PDR is seen when the network has more than 15% of untrusted nodes. In case that TQR cannot find a path, TRAQR falls back to MCQ algorithm to find E2E QoS path. However, confidence of successful QoS operation decreases. On the other hand, for higher average node degree networks (more than 10 degree in average), PDR of TQR algorithm is always observed to be ‘1’ constantly, which means TQR always found a trusted path because of the large number of alternative paths between source to destination domains.


Download : Download high-res image (653KB)
Download : Download full-size image
Fig. 22. Path discovery ratio of TQR and MCQ for 40 domain network with node degree 5.


Download : Download high-res image (676KB)
Download : Download full-size image
Fig. 23. Path discovery ratio of TQR and MCQ for 100 domain network with node degree 5.

6.2.3. QoS compliance ratio
QoS Compliance Ratio (QCR) is evaluated as the ratio of number of paths whose trust score is greater than threshold trust score, to the total number of paths found for a given set of source–destination pairs. QCR gives the probability of successfully implementing the E2E QoS paths discovered by the TQR and MCQ algorithms. Fig. 24, Fig. 25 show the QCR of paths discovered by TQR and MCQ algorithms by varying the number of untrusted domains, for 100 candidate domain network with average node degree of 5 and 10 respectively. Since the trust scores of E2E QoS paths found by TQR is always greater than threshold, the QCR of TQR algorithm is ‘1’ as far as a path is found. The figures show that the QCR of MCQ algorithm decreases gradually as the number of untrusted domains in the network increases. This is because the MCQ algorithm does not consider domain trust metric resulting in including untrusted domains in E2E paths. The same trend has been observed across all sizes of multi-domain networks. The variation of trust scores of the E2E paths calculated by both the algorithms is discussed in the next evaluation item.

6.2.4. Trust score distribution
Trust score distribution shows the variation of trust scores of the E2E QoS paths found using TQR and MCQ algorithms. As explained in Section 4.2.2, the trust score of the E2E QoS path is the minimum of the trust scores of the domains on the path. Fig. 26, Fig. 27 show the CDF of trust scores for the paths found using TQR and MCQ for a 100 domain network with varying number of untrusted domains. When the untrusted domains are less than 20%, more than 90% of the E2E QoS paths found using TQR has a path trust score of greater than 0.7. Even at 30% of untrusted domains, 50% of E2E QoS paths have a path trust score greater than 0.6, which shows a higher probability of QoS compliance. For MCQ algorithm, the percentage of E2E QoS paths whose path trust scores are less than the threshold, increases with increase in untrusted domains. When 30% of domains are untrusted, more than 50% of paths have path trust scores less than the threshold, which means the probability of successful implementation of QoS is only 0.5.

6.2.5. Average path length
Fig. 28, Fig. 29 show the average length of E2E QoS paths found using TQR and MCQ algorithms by varying the number of domains and the number of untrusted domains, respectively. The path length in the simulation refers to the number of domains along the E2E QoS path. The average length of E2E QoS paths found using TQR algorithm is slightly higher than that of using MCQ algorithm in both the cases. This is because the TQR algorithm searches for paths with high trust scores to successfully deliver the E2E QoS. On the other hand, MCQ searches for shortest length paths, and the paths exhibit the lower average path length. However, the increase in the path length of TQR compared to MCQ is less (below 0.5) and affordable owing to the high compliance ratio of the path. Further, it is observed that there is a slight increase in the path length as the size of the multi-domain network increases as shown in Fig. 28. This is because, the number of alternative paths with high trust scores is more, and the TQR algorithm searches through all of them to find more trusted path for implementing the E2E QoS.

6.3. Efficiency of key management
TRAQR uses Blockchain as a decentralized public key infrastructure, that proves the ownership of public keys of domains in DISC, without relying on the third-party certificate authorities. TRAQR uses the same public–private key pair associated with the Blockchain account address for securely transferring the audit logs off the Blockchain. The key pair in Ethereum Blockchain is generated using Elliptic-Curve Digital Signature Algorithm (ECDSA). The key benefits of ECDSA over RSA include (a) small key sizes, (b) offers same level of security with smaller key sizes, has smaller encrypted messages, and (c) require less storage (Imem, 2015). However, ECDSA performs slowly when encrypting messages compared to RSA. This is acceptable for TRAQR since each domain encrypts only one log message per E2E QoS flow, and the size of log message is relatively low.

6.4. Efficiency of secure log exchange mechanism
The conventional way of securely exchanging logs using TLS/SSL requires the two communicating parties verify TLS/SSL certificates, signed by a certificate authority (CA) and agree on a session key for encrypting messages to initiate secure communication. The CAs are not always trustworthy and may sign fraudulent certificates due to misoperations, reckless identity validations, or intrusions (Wang et al., 2020). Further, the TLS/SSL mode of communication does not scale for exchanging logs for E2E QoS flows in TRAQR, as it introduces significant overhead for the intermediate and destination domains to send a single log message (that can be embedded into a control packet payload) for each E2E QoS flow to the source domain. In contrast, TRAQR uses Blockchain to prove the ownership of the public key of each domain without relying a centralized certificate authority. The SLEM in TRAQR allows the intermediate and destination domains to encrypt the log message using public key of source domain, embed into the payload of an 
 control packet, and send to source domain to prove their QoS compliance. Further, the corresponding integrity proofs put to the ICSC, helps the source domain to verify the integrity of logs.

6.5. Operational cost of a domain in TRAQR
Although TRAQR provides a higher probability of successfully delivering the E2E QoS, a domain in TRAQR needs to bear operational cost of (1) running a Blockchain node to obtain trust information related to identity, trust scores, QoS capabilities, and log integrity proofs from other domains, (2) verifying the authenticity and integrity of logs to verify the QoS compliance of the E2E flows, and (3) maintaining and periodically updating trust scores. The Secure Log Exchange Mechanism involves encryption operations and transfer of a log message per domain along the E2E QoS path. The source DC performs decryption of log messages and verifies their integrity using log integrity proofs from the ICSC of the Blockchain. The QoS Compliance Verification algorithm takes O(1) time and space after the decrypted logs are available. Furthermore, TRAQR involves the cost of maintaining Trust Information Base, that stores identity and trust score information of the domains participating in TRAQR. However, this additional cost is reasonable and affordable to the domains. On the other hand, the benefits of participating in TRAQR include high QoS compliance ratio of E2E QoS, and the accountability detection mechanism that enables the domains to deliver the QoS commitments as promised to their clients. Further, accountability detection mechanism helps the source domains to charge provider domains according to their QoS compliance.

6.6. Robustness of TRAQR against generic attacks
This subsection explains general attacks that can be made on the TRAQR and how the system copes with each one of them.

i.
Impersonation attack happens when an attacker steals a domain identity and attempts to update invalid information (related to QoS capabilities, trust scores or log integrity proofs) to the Blockchain. TRAQR is effective to prevent this attack, since all the transactions carried out by a domain using its Blockchain account address are duly signed by its private key. In general, as a nature of system involving Blockchain, the private key of a domain is expected to be highly secured and difficult to steal for the attacker.

ii.
Sybil attack creates multiple identities in the system for a single entity. In TRAQR, a domain may try to register to the Blockchain, as a different domain particularly after accumulating a poor trust score. In TRAQR, a domain provides its AS Number as the identity to be registered to the DISC together with its Blockchain account address and the associated public key. An arbitrary domain cannot register again to TRAQR as another domain as it represents a different network domain. The identity registration process in TRAQR can be extended to collect other details related to the domain profile for better identification of domains.

iii.
Ballot stuffing is an attack where a malicious domain attempts to provide higher trust scores to their friendly domains, without actually carrying out any E2E QoS operations. TRAQR does not prevent this attack. However, the trust based weighted mean method used to calculate the aggregated indirect trust scores in TRAQR, takes recommendation trust scores only from the known and trusted domains. This attack can still be effective if an attacker domain is a friend of the source domain. The issue of dishonest trust scores and its mitigation techniques have already been explored (Zhao et al., 2012a, Mohsenzadeh et al., 2020), and can be integrated to TRAQR system.

iv.
Bad mouthing using an altered trust score is the opposite of ballot stuffing attack, where a domain gives low trust score to another domain. A simple extension can be made to TRAQR based on the work ‘picking a partner’, proposed by Alowayed et al. (2018) to prevent this attack. ‘Picking a partner’ updates the proofs of compliance to the Blockchain to prove that the trust scores are calculated using the actual measurements and ensures that the domains reach an agreement on the trust scores before updating them to the Blockchain.

v.
Bad mouthing using an altered audit log is an attack where a domain lies in its audit logs about the input throughput at its border switch to malign the reputation of its neighbouring domain, even though the neighbour is actually compliant with a QoS request. A possible solution to prevent such a case is to share the audit logs among all the domains on the E2E QoS path instead of collecting them only at the source domain. For example, Argyraki et al. (2010b) proposed, ‘Network Confessional’ that enables log sharing to verify the loss and delay parameters of contractual partners (domains) on the Internet. By enabling the log sharing across domains, the participating domains will be demotivated to attempt to malign the reputation of domain their neighbours, given the fact that the consistency of audit logs can be now verified by any domain on the E2E QoS path. However, ‘Network Confessional’ expects that domains may share their logs with other domains using an administrative website. Such an approach involves a centralized storage of logs and the authenticity and integrity of logs may not be guaranteed. The Secure Log Exchange Mechanism (SLEM) employed inTRAQR can be extended to share encrypted logs to the other domains and to enable verification of integrity and authenticity using the log integrity proofs already stored in ICSC of the Blockchain. Hence, the extension of SLEM needs to be carefully planned as sharing logs across all domains can increase the overhead of log handling. Further, imposing heavy penalty on trust score for liar domains can demotivate them from lying. However, detecting domain to be a liar is a difficult problem, which is beyond the scope of this paper. Hence, mechanism to demotivate any domain from telling a lie and detection of liar will be pursued as part of our future work.

7. Discussion
7.1. Applicability of TRAQR framework to other E2E services
The TRAQR framework gave a specific focus on E2E QoS coordination in MD-SDN environment. However, there are other E2E services that need MD-SDN coordination. Service Function Chaining is one of the highly demanded use cases that may be deployed across different computing and resource management architectures, such as network, cloud and edge (Duan et al., 2020). In addition, identifying the trusted domains for service implementation, and verifying service performance and providers’ compliance are crucial for the successful deployment of E2E services. The concept and mechanism of TRAQR framework can be applied for such E2E service coordination in MD-SDN environment.

7.2. Exploring the balance between trust and excess resource availability for load balancing
TRAQR does not implement the active load balancing while selecting trust based E2E paths and the result of E2E QoS negotiation may indirectly result in load balancing with weak effect. Excess resource availability is one of the parameters which represent QoS capability of a domain and can be useful information for the active load balancing. However, revealing such information to other domains involves the aspect of operational privacy of a domain, and can be misused by an attacker to discover a target domain of DoS attack. Hence, the exploration of the balancing point between trust and available resources requires more consideration of security and will be considered as part of future work of this paper.

7.3. Potential scalability improvement in Secure Log Exchange Mechanism (SLEM)
The SLEM in TRAQR framework involves the transfer of logs (per flow) by the intermediate and destination DCs in the E2E QoS path to source DC in order to evaluate the QoS compliance of a domain. This requires the TRAQR framework to handle excessive log transfers as the network gets bigger. Aggregating multiple logs helps to reduce the frequency of log exchanges. In order to introduce the audit log aggregation, it is reasonable to apply the aggregation to both log transfers per source domain and log integrity proofs. The aggregation technique helps to reduce the frequencies of (1) the transactions related to integrity proofs to be updated in the Integrity Check Smart Contract in the Blockchain, and (2) the log message transfers outside the Blockchain. However, the size of the aggregated data to be shared can be larger. Further, in the distributed environment, extra coordination mechanisms among domains may be needed to decide on the frequency of aggregation, and handling of failure cases when the extraction of original logs results in a failure. Hence, although aggregating logs is beneficial to reduce the frequency of log exchanges, it needs some careful thoughts for its robust execution.

7.4. Convergence and stability of TRAQR ecosystem
If the domains frequently update their QoS capabilities, implementing QCSC may not be feasible and result in inconsistency of QoS capability information across multiple domains. We believe the adoption of a Blockchain technology with a different consensus algorithm and higher transaction throughput enables the domain controllers to obtain the frequently changing QoS capabilities, and update QoS Capability Graph (QCG) used for finding E2E QoS paths. A Proof of Authority based Blockchain or Directed Acyclic Graph based Blockchain (Benčić and Žarko, 2018) can be promising options. Another approach can be to use a centralized server with access control mechanisms to share and store QoS capabilities among different domains. However, the centralized server solution compromises the decentralized feature of data exchange and requires a trusted third party to facilitate the data collection and updation across different domains.

If high transaction throughput Blockchain is used, a domain may increase its frequency of updating QoS capabilities to QCSC. Such frequent updates can result in an adverse situation such as a DoS attack in the MD-SDN environment. In order to prevent such situation, a domain can use smoothing technique such as Exponentially Weighted Moving Average (Floyd et al., 2000) used to estimate TCP timeout to estimate the smoothed QoS capability change values of other domains out of the radically changing QoS capability updates. In addition, appropriate regulation of the QCG update frequency is also important to stabilize the QoS capability information across multiple domains.

8. Conclusion and future work
The awareness of domain trust while routing E2E QoS traffic increases the confidence of operating QoS and reduces the risk of violating QoS assurances for QoS sensitive applications. This work introduced TRAQR that enables trust aware E2E QoS routing in MD-SDN environment. TRAQR computes the trust score of a domain based on the verification result of its QoS compliance. The proposed TQR algorithm finds intermediate domains with higher trust scores for routing E2E QoS traffic. The secure log exchange mechanism and the QoS compliance verification mechanisms helps to determine the accountability of each domain and evaluate trust of a domain. We implemented and verified the proof of concept of TRAQR using private Ethereum Blockchain in MD-SDN environment, which was emulated using Mininet and RYU SDN controller. Further, the simulations conducted for evaluating the performance of TQR algorithm showed significant improvement in QoS compliance ratio. Besides E2E QoS routing, trust awareness is crucial for other application scenarios such as service function chaining, security, etc. that stretch across multiple domains. In future, we plan to address the issues discussed in Discussion section and evaluate the trust management functionality of the TRAQR framework for different types of trust aware applications.

