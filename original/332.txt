DDoS attack detection methods play a very important role in protecting computer network security. However, the existing flow-based DDoS attack detection methods face the non-negligible time delay and are not general for different types of DDoS attacks at different rates. In order to fill this research gap, a fast all-packets-based DDoS attack detection approach (FAPDD) is proposed. The FAPDD firstly designs a new time series network graph model to effectively simplify the processing of network traffic handling compared with the flow-based detections. Furthermore, it is the first time that the directed Weisfeiler-Lehman graph kernel is built for measuring the divergence between the current network graph and the normalization network graphs. Due to the new graph model and kernel measurement method to judge network changes, the different types and rates of DDoS attacks can be especially detected. In addition, the dynamic threshold and freezing mechanism are constructed to display standard traffic changes and prevent the pollution of attack traffic to the standard network. Finally, a number of real DDoS attack datasets are applied to evaluate the effectiveness of the proposed method, as well as the overall time efficiency and detection effect. Compared with other methods, the FAPDD can better meet the real-time requirements and achieve good detection effects in different types of DDoS attacks with different attack rates.

Graphical abstract
Figure 2 The overall frame of the fast DDoS attack detection approach.
Image 1

Keywords
Network security
Fast DDoS attack detection
Network graph based all packets
Directed weisfeiler-lehman graph kernel
Dynamic threshold mechanism



1. Introduction
DDoS attack is a grave threat to network security. With the continuous development of network services and network applications, DDoS attack has become a common and serious attack in Ethernet, wireless networks, wireless sensor networks and cloud networks (Shamshirband et al., 2014 and Shamshirband et al., 2020). This attack uses a group of connected devices as attackers to send mass redundant packets to the victim system, which makes legitimate clients unable to normally utilize the target service (Wang et al., 2020; Singh et al., 2018). DDoS attacks usually occur in well-known or significant websites. In March 2018, GitHub, a well-known code-hosting website, suffered the most serious DDoS attacks ever with 1.35Tbps peak traffic. The DDoS attacks caused the interruption of network services and huge economic losses. The global infrastructure security report pointed out that the serious damage of TB level DDoS attacks is incalculable. The damage of DDoS attacks lies not only in the enormous economic losses but also in the easy implementation (Alzahrani, 2018). At present, there are a variety of easy-to-use DDoS attack tools, such as LOIC (low orbit canon), HULK (HTTP unbearable loading king) and Hping3, which attack special victims through different protocols (HTTP, UDP, and TCP, etc.) to make the service invalid (Jisa and Ciza, 2019). Further, via the technology of fake IP or botnet, detecting and defending DDoS attack is becoming more difficult. Therefore, to avoid the serious harm of DDoS attacks, it is necessary to detect and defend DDoS attacks.

There are two types of DDoS attacks in general: high-rate DDoS (HDDoS) and low-rate DDoS (LDDoS) (Toklu, 2018). High-rate DDoS attacks lead to the rapid rise of network traffic. The volume of network traffic and the packet number are quite different from the normal traffic. Therefore, it is relatively easy to detect high-rate DDoS attacks. But the detection difficulties are the processing of massive attack traffic and real-time detection. On the other hand, due to the slow attack traffic of low-rate DDoS attacks, the traffic of LDDoS is more similar to the normal traffic. Hence, it is more difficult to detect LDDoS that makes detection results a high false positive rate and false negative rate (Al-Yaseen et al., 2015). At the same time, although slow and seemingly unnoticeable, the attack is still able to gradually degrade the exception-handling capability of target systems until completely fail (Tang and Cheng, 2011; Wang et al., 2012). At present, most of the existing methods only focus on a single type of DDoS attacks and cannot solve detection problems of high-rate and low-rate DDoS attacks simultaneously. Therefore, this paper proposes a new attack detection method to detect these two types of DDoS attacks.

The current DDoS attack detection methods can be divided into two categories according to the type of network traffic data: packet-based inspection and flow-based inspection (Li et al., 2013). In packet-based inspection, Wireshark or Tcpdump tools are usually used to capture network packets. In the detection process, the packet header is skipped, and the abnormal behaviors are identified by analyzing the packet load information (Guo et al., 2017). For example, Afek et al. (2019) detected the packet load and obtain attack signals and normal signals by feature extraction method. Zero-day attacks and application-layer DDoS attacks were detected by a signal matching method. Hwang et al. (2019) proposed a word embedding mechanism to extract the semantic information in the packet load and applied Long Short-Term Memory (LSTM) to learn the time relationship in the packet header, so as to identify malicious packets. However, in a large-scale network environment, it is an expensive task to obtain and analyze all the packet load information, which will consume a lot of CPU, memory and external storage resources. In addition, as the encryption of packet information is like a new trend, packet load analysis becomes an impossible or even invalid task.

On the other hand, flow-based inspection is based on the statistical information of network flows. At present, some network devices (such as routers or switches) collect and output network flows via network protocols (such as NetFlow) (Umera et al., 2017). A flow is a set of network packets with same attributes (for example, source and destination IP addresses) (Sperotto et al., 2010). This method greatly reduces the computational cost of attack detection methods, which is conducive to expand in a large-scale network environment. Most of the current DDoS attack detection methods are based on the network flow (Amaral et al., 2017). However, this type of methods also has obvious drawbacks. Literature (Hwang et al., 2019) pointed out that due to the time delay of flow generation, even the most advanced systems are facing a huge challenge of real-time detection. Literature (Daya et al., 2019) also showed that the process of flow generation usually results in a high computational overhead. In addition, due to the high sampling rate, the network flow cannot completely capture network communication mode. Hence, some attacks (such as low-rate DDoS attacks) cannot be detected. In order to represent the real network communication, the graph structure is proposed to detect whether the host node in the network graph is a zombie in botnet (Daya et al., 2019; Wang, 2017). Inspired by this viewpoint, this paper aggregates all network packets into network graphs without sampling, and further detects DDoS attacks by analyzing changes of network graphs. This model ensures the real-time detection of network attacks.

In order to solve many problems in DDoS attack detections, this paper proposes a fast all-packets-based DDoS attack detection method. This method mainly focuses on the huge time consumption and calculation cost of current flow-based methods. Instead of flow generation methods, a network graph model based on all network packets is proposed, which has a low time consumption. Based on the network graph model, a popular Weisfeiler-Lehman (WL) graph kernel is used to calculate the similarity between the current network graph and normalization network graphs (NNGs). The divergence value is obtained according to the exponential transformation of the similarity. However, because the network graph constructed in this paper is a directed graph, the traditional WL graph kernel is only suitable for the undirected graph. Therefore, an improved directed WL graph kernel method is proposed. And the Jaccard index is utilized in the label compression process of this graph kernel method, which makes this method more suitable for communication network. Based on the divergence value, an improved exponential weighted moving average method is designed to define the dynamic threshold. When the divergence value is greater than the dynamic threshold, the current network is suffering from DDoS attacks. Meanwhile, in order to avoid the pollution of the attack traffic to the normal threshold, a freezing mechanism is proposed to ensure the standardization of the normal threshold and NNGs. Finally, the effectiveness of each stage, time feasibility and detection performance of the FAPDD are analyzed and compared with other methods. The results show that our method has a perfect detection performance and time efficiency. The main contributions of this paper are as follows:

●
It is the first time to propose a fast all-packets-based DDoS attack detection method to detect different types of DDoS attacks with different attack rates in the complex network environment. This method not only guarantees the detection effect of DDoS attacks but also meets the real-time online detection requirements of DDoS attacks.

●
Based on the interaction between network packets, this paper proposes the new network traffic process models: network graph model and time series network graph model. The models minimize processes of the attack detection to the greatest extent and provide a strong time support for online execution of attack detection methods in the large scale network environment.

●
A novel network graph divergence measurement model based on the directed WL graph kernel is proposed to measure the divergence between the current network graph and normalization network graphs. The adaptive dynamic threshold mechanism and freezing mechanism are designed to detect the divergence value and judge whether the current network exists DDoS attacks. The measurement and judgment processes of the divergence value jointly ensure the detection accuracy of DDoS attacks.

The organization of this paper is as follows. Section 2 introduces the related detection methods of DDoS attacks and the basic graph kernel function. Section 3 presents the overall and details description of the proposed DDoS attack detection approach. Section 4 describes the experiment and performance evaluation. Section 5 and section 6 are the discussion and summary of this paper, respectively.

2. Related work
2.1. DDoS attack detection methods
Because of the serious damage and easy implementation of DDoS attacks, it is very important and meaningful to effectively detect DDoS attacks. This section summarizes the existing DDoS attack detection methods from different perspectives. Most of these methods are still flow-based inspection. In the flow-based detection, most methods are utilized to detect high-rate DDoS attacks, while the detection methods of low-rate DDoS attacks are relatively less.

According to different measurement indexes, flow-based inspection methods can be generally divided into the following categories: machine learning based model, probability model based one, information theory based one, signal processing based one and data compression based one. Among DDoS attack detection methods based on machine learning, Vidal et al. (2018) proposed a DoS flood attack detection and mitigation method based on human immune system. Indraneel and Venkata (2019) proposed a new method to detect application-layer HTTP flood attacks, and this method conbimes machine learning indexes and bat bio-heuristic algorithm. The CAIDA dataset was utilized to verify the effectiveness of this algorithm. Wang et al. (2019) proposed the SU-Genetic feature selection method and further combined with different classification algorithms (Bayes net, j48, and random tree) to detect DDoS attacks. The existing dataset NSL-LDD had verified the effectiveness of this algorithm. Shamshirband et al. (2019) proposed a high performance-ELM to detect malicious behaviors, especially DDoS attacks. Mobile Malware dataset and CTU-13 dataset were used to verify the proposed method. At present, the researches of DDoS attack detection methods based on machine learning are less. The main reason is that the existing DDoS attack datasets do not have a unified standard, so that this detection method cannot be effectively extended on the real network environment.

In the DDoS attack detection methods based on probability model, it is assumed that the characteristics of massive network traffic meet the normal distribution, and the distribution model of normal traffic is constructed according to the normal distribution law. Park et al. (2017) used normal network data (TCP throughput and CPU utilization) to construct a normal distribution model. The Mahalanobis distance MD between each data and the mean is calculated. Since MD2 obeys the chi-square distribution, the chi-square distribution model is constructed to detect DDoS attacks. Jisa and Ciza (2019)calculated the mean and variance of the normal distribution model. Then a dynamic threshold is constructed by combined the mean and variance by an adjustment factor to detect DDoS attacks. Gupta et al. (2018) conducted probabilistic modeling on the size of network packets and identified LDoS attack flows through the hypothesis test of t-statistics in a cloud environment. There are some assumptions, such as attackers only use legitimate IP addresses to carry out attacks, and attackers have a fixed attack mode. Therefore, this kind of methods has great limitations in the actual application. The drawback of this kind of methods is that it cannot achieve the real-time detection for massive traffic in a high-speed network.

In the DDoS attack detection methods based on information theory, information entropy, as a decentralized or centralized index to evaluate data distribution, is widely used in network anomaly detection. Behal et al. (2017) studied the generalization entropy and the generalization entropy distance to detect high-rate DDoS attacks. Further the differences between DDoS flood attacks and flash events were distinguished. The effectiveness of this method was verified on the real dataset and synthetic dataset. Kumar et al. (2018) proposed an early detection and mitigation framework of TCP SYN Flood attacks, which used Shannon entropy to measure network traffic. When the entropy is lower than the given threshold, it is determined that the SYN Flood attack occurs at this time interval. Sahoo et al. (2018) proposed an early detection scheme to detect low-rate DDoS attacks in the control layer of Software Defined Network. The scheme measured the generalized entropy difference of destination IP addresses. This paper further pointed out that statistical measurement methods such as Shannon entropy have a low accuracy in LDDoS attack detections. This kind of methods has a significant effect on high-rate DDoS attack detection, but it cannot effectively detect low-rate or hidden DDoS attacks.

Among the detection method based on signal processing, this kind of methods is effectively applied in different DDoS attack detections. This is because signal processing method has a higher sensitivity to data changes. For example, Jiang et al. (2015) proposed a multi-scale continuous wavelet transform for analyzing network flow characteristics. And principal component analysis was applied to extract the properties of abnormal network traffic. Toklu (2018) proposed a hybrid filtering scheme for both high-rate DDoS attacks and low-rate DDoS attacks. In this scheme, the average transform is used to filter network flows of high-rate DDoS attacks, and the Fourier transform is used to filter network flows of low-rate DDoS attacks. Tang and Cheng (2011) utilized the daub 4 wavelet analysis method to detect hidden SIP flooding attacks. Agrawal et al. (2018) proposed an LDDoS attack detection method based on power spectral density to detect and mitigate attacks in the frequency domain. For LDDoS attack flows, the attack spectrum is mainly distributed in the low frequency, while legitimate flows are uniformly distributed. According to the existing researches, the signal processing method can quickly perceive the weak signal changes and is helpful for LDDoS attack detections.

In the DDoS attack detection methods based on data compression, sketch, an effective data compression technology, is widely applied in DDoS attack detections (Callegari et al., 2011; Huang, 2015). Tang et al. (2009) proposed an efficient online SIP flooding attack detection scheme by combining sketch technology with Hellinger distance. The sketch structure summarized the source IP addresses into a fixed numeric set to calculate Hellinger distance. When the distance deviation between the current set and the normal set is greater than a given threshold, the SIP flooding attacks are considered to occur at this time. Wang et al., 2018 also used sketch technology and the improved Hellinger distance to detect application-layer DDoS flood attacks. Jing et al. (2019a) proposed a reversible sketch based on Chinese Remainder Theorem to map network traffic. The mutation of a one-to-one mapping between request packets and response packets is monitored to identify amplify attacks. In addition, Jing et al. (2019b) proposed a reversible sketch based on Chinese Remainder Theorem and an improved multiple cumulative sum control chart to detect DDoS attacks. Liu et al. (2020) combined multi-dimensional sketch technology with wavelet analysis method to detect low-rate DDoS attacks. Taking divergences of sketch with time as research signals, analyze the energy value of research signals to identify LDDoS attack traffic and normal traffic. Because this kind of methods compresses and summarizes network traffic and cannot keep the attack information. Therefore, without the additional data storage, it is difficult to effectively defend against DDoS attacks.

Besides the above methods, some researchers constructed traffic dispersion graphs (TDGs) to represent the information exchange in the host layer and simulate changes of network flows with time. It is conducive to monitor, analyze, and find DoS attacks (Iliofotou and Mitzenmacher, 2008, Le and Jeong, 2011). This method also does not pay attention to the problem of time and computation cost caused by the flow generation. Therefore, from the perspective of original traffic packages, some researches aggregate packages into a graph model to identify anomalies. Wang et al. (2017) built a graph model based on packets and further analyzed degree distribution via the large deviation theory to detect the botnet. Daya et al. (2019) alike constructed a graph model based on packets and extracted in-degree and out-degree characteristics of the graph model. According to these characteristics, machine learning method is as a classification to detect botnet attacks. However, at present, this method is mostly used to detect botnet and identify bots. To the best of our knowledge, it is few utilized to detect DDoS attacks.

2.2. Graph kernel
Given a graph G = (V, E, L), where the set of nodes V = {v1, v2, …, vn}, the set of edges E = {e1, e2, …, em}, and the set of labels L = {l1, l2, …, ln} to describe the size, shape, geometry and position information of graph data, respectively. Kernel method is as follows: given the vector x ∈ X in the original low-dimensional space X. Via the nonlinear mapping relation function Φ(•), the vector x is mapped to the high-dimensional feature space H (Hilbert space). The linear algorithm is constructed in H to solve the nonlinear problem in X (Ma et al., 2018). The kernel function needs to satisfy the positive definiteness, which is expressed as the inner product of the feature space ϕ(x) and ϕ(y) of two vectors x and y.(1)where <, > represents the inner product of vectors.

In recent years, numerous graph kernel functions have been defined to measure the similarity between two graphs (Vishwanathan et al., 2010). In this paper, Weisfeiler-Lehman shortest path kernel (Morris, 2017) is selected to map the graph to a high dimensional space. Each iteration in Weisfeiler-Lehman graph kernel for isomorphism test consists of four steps: (1) Determine the multiset-label and assign a multiset-label to each node in the graph set. The multiset-label of a node records the original label of this node and a label set of nodes that this node connects to. For example, in Fig. 1(a), the connection nodes of node 1 are nodes 2 and 4, and then the multiset-label of node 1 in G1 is 1, {2, 4} temporarily. (2) Sort each multiset-label in ascending order. Because each node in the graph may connect to multiple nodes, each multiset-label needs to be sorted. Take node 1 as an example, the final multiset-label of node 1 is 1, {2, 4}, not 1, {4, 2}. (3) Compress label. Map each multiset-label to a compressed label. The new compressed labels are not consistent with the existing labels. (4) Relabel the graph data with the corresponding compressed labels. Fig. 1 shows the first iteration of the Weisfeiler-Lehman graph kernel for two graphs.

Fig. 1
Download : Download high-res image (193KB)
Download : Download full-size image
Fig. 1. Illustration of the first iteration of Weisfeiler-Lehman graph kernel for two graph (a) Give graph G1 and G2 with label (b) Multiset-label determination and sorting (c) Label compression (d) Relabeling.

The Weisfeiler-Lehman shortest path kernel between G and G’ with h iterations is defined as follows.(2)
where Gi and Gi’ are the graphs obtained after i iterations. Ksp(G,G′) is a node-labeled shortest path kernel and defined in form of kernel function:(3)
where 
, 
. 
 and 
 point out the number of occurrences of the shortest path ej in G and G′ after i iterations. The shortest path ej can be represented as a triplet (a, b, p), where a, b, p are starting node, ending node and path length, respectively. 
 is the set of all shortest path triplets in G and G’. In a word, the elements in vector 
 and 
 are number of occurrences of shortest path triplets (a, b, p) in G and G’.

According to Weisfeiler-Lehman shortest path kernel, each graph Gi in graph set 
 can be converted to a high dimensional vector 
 to obtain a N × N kernel matrix 
 that describes the similarity among graphs.

3. The fast all-packets-based DDoS attack detection approach FAPDD
The overall framework of the FAPDD is shown in Fig. 2. The method mainly includes three stages: building the network graph model, calculating network graph divergence, and dynamic threshold detection. These three stages are executed in sequence and updated repeatedly. First of all, the coming network traffic is analyzed to get the information of each packet: timestamp, source IP address and destination IP address. According to the timestamp, packets in the tth time period are constructed as a network graph Gt. Next, the similarity between Gt and normalization network graphs NNGs is calculated. And further the similarity is exponentially transformed to get the divergence dt. When dt is larger, the network state is more likely to be an attack state. Next, input dt into the third stage. Based on the set of the previous value d, an improved exponential weighted moving average method is designed to generate the threshold. When the dt is less than the current threshold, it means that the current network is normal. The d set and NNGs are updated according to dt and Gt. Otherwise, the current network is in DDoS attacks. Then the current threshold and NNGs are frozen. When the network state returns to normal, the threshold and NNGs are updated again.

Fig. 2
Download : Download high-res image (288KB)
Download : Download full-size image
Fig. 2. The overall frame of the fast all-packets-based DDoS attack detection approach.

3.1. Time series network graph model
This section would describe the modeling process of the network graph and time series network graph in detail. For continuous network packets, each packet represents an interaction between source IP address and destination IP address. Assuming that in the per time period △T, packet pi = (timestampi, sipi, dipi) is placed into the corresponding time period according to timestampi. In the kth time period, Wk is the set of all packets, and the interaction behaviors of all packets in Wk are represented as the graph form. The definitions of the network graph and time series network graph are as follows.

Definition 1

(Network graph): the directed graph Gk =(Vk, Ek, Lk) represents the network graph formed by packets Wk in the time period k, where Vk = {Vsip∪Vdip}k represents the node set, Vsip = {sip1, sip2, …, sipn} is the set of source IP addresses, Vdip = {dip1, dip2, …, dipm} is the set of destination IP addresses. Ek = {∪eij}k is the edge set, eij = sipi→dipj is a directed edge. Lk = {(v),v ∈ Vk }k indicates the label set. The visual representation of the network graph is shown in Fig. 3.

Fig. 3
Download : Download high-res image (102KB)
Download : Download full-size image
Fig. 3. An sample of network graph.

Definition 2

(Time series network graph): In continuous time periods {△T1, △T2, …, △Tn, …}, the time series network graph model 
 is constructed, where Gn is the network graph of the nth time period. The time series network graph is shown as Fig. 4.

Fig. 4
Download : Download high-res image (109KB)
Download : Download full-size image
Fig. 4. An example of time series network graph.

In the process of network graph modeling, via Wireshark or Tcpdump tools, the incoming packets 
, 
, are captured and analyzed to obtain the features set pi = (timestampi, sipi, dipi). According to the timestamp information, in the time period △T, the packets are constructed to be a network graph. The detailed construction process of network graph and time series network graph model is shown in algorithm 1.


Algorithm 1. Time series network graph modeling

Input: 
，△T
Output: Time series network graph 
(1) Initialize Time series network graph 
(2) While true do
 (3) Gi = NGM(Wi);
 (4) .add(Gi)
(5) return 
Produce. G = NGM (W, △T)
(1) Initial G is an empty digraph
(2) For each p in W
 (3) timestamp, sip, dip = p.timestamp, p.sip, p.dip
 (4) If ! G.has_node(sip)
 (5) G.add_node(sip)
 (6) If ! G.has_node(dip)
 (7) G.add_node(dip)
 (8) If ! G.has_edge(sip, dip)
 (9) G.add_edge(sip, dip)

From algorithm 1, the network graph is a directed unweight graph. When a packet arrives, judge whether the graph contains the source IP node. If not, add the node. For the destination IP node, we performs the same operation. Then judge whether the edge from this source node to this destination node is in the graph. If not, add the edge, as shown in the produce NGM lines (3)–(7). In the same time period, the same nodes and edges are added only once. That is, packets with the same source IP address and destination IP address are considered as the same and added only once. In fact, this process of NGM is the same with the process of network flow aggregation in which packets with the same source IP address and destination IP address are aggregated into a network flow. Therefore, in theory, network graph has the ability of exposing attack behaviors. Fig. 5 shows the construction process of flow and network graph, respectively. And further compare the number of flows in the flow model and the degree information in the graph model to illustrate the similarity of these two models. In Fig. 5, assuming that there are 10 communication packets, process 1 represents the traditional flow aggregation process, and process 2 represents the network graph construction process. Analyzing these two processes, the number of flows of source IP and destination IP in process 1 is equal to the degree information in process 2. Hence, the network graph model also has the ability to detect the attack behaviors. However, compared with the traditional flow aggregation process, this network graph construction process greatly reduces the time cost of the aggregation process and retains all the information of data exchange. This will significantly promote the real-time and online executing of network anomaly detection, but also be conducive to discover attackers and victims.

Fig. 5
Download : Download high-res image (232KB)
Download : Download full-size image
Fig. 5. The analysis of network graph model.

In analyzing the time and space complexity, we only analyze the time and space complexity of Algorithm 1 in a single period. This is because the time domain is infinite theoretically. In Algorithm 1, the time consumption in the process of constructing network graph mainly focuses on traversing all network packets and functions has_node() and has_edge(). Assuming that the number of packets per unit period is Z, the number of different IP addresses is n, and the number of different edges is m, the time complexity is O(Z∗n) or O(Z∗m). There are no differences in the order of magnitude. When constructing network graph, we define a dictionary array to store IP addresses and an adjacency matrix to store the edge information. The space complexity is O(n2). Therefore, the overall time complexity of Algorithm 1 is O(Z∗n) and the space complexity is O(n2).

3.2. Network graph divergence measurement method based on directed WL graph kernel
This section will analyze the divergence of the network graph with time. Due to the influence of network dynamics, the network structure remains relatively stable in a short time. At the same time, because of the randomness of individual user interaction, the network structure is not fully fixed but small volatility. In other words, when the normal network state is normal, there is a high similarity between network structures in continuous time periods. On the contrary, when DDoS attacks occur, the network structure greatly changes to product a significant difference with the normal network structure. Generally, the more serious the attacks, the more obvious the changes of network structure. In order to measure the divergence of network structures with time, the concept of normalization network graphs is defined to represent the normal network state as follows.

Definition 3

(Normalization Network Graphs, NNGs). Normalization network graphs NNGs = {G1, G2, …, GN} contain N network graphs of normal network that are closest to the current time period. The elements in NNGs are not immutable, but dynamically changing over time to keep up to date.

In order to distinguish whether the current network occurs DDoS attacks, the directed WL graph kernel method is proposed to obtain the similarity between the current network graph Gt and NNGs. The divergence value is further gotten by exponent transform based on the similarity, which is more helpful to distinguish network state. The directed WL graph kernel method is described in the following subsections.

Suppose that 
 
 is a directed graph, where 
 is the node set, 
 is the directed edge set, and LD is the label set. The in-degree neighbors of the node 
 refer to the set of nodes connecting to 
 via a directed edge, represented as 
. The out-degree neighbors of the node 
 refer to the set of nodes connected by 
 through a directed edge, represented as 
. Suppose that there are a pair of network graphs 
 
 and 
 
. Because the label LD;p is a set of IP addresses, it is not suitable for the process of multiple label determination and sorting in WL method. Therefore, we convert the original label set of IP address into a label set of numeric, in which each IP address corresponds to a unique value. For the node 
 the numerical label is 
.

Next, determine the multiple label set for each node. Based on the numerical label, the traditional WL graph kernel method takes the node itself and the first-order neighbors of the node as the multiple label set. Different from the traditional method, the improved directed WL graph kernel method fully considers the in-degree and out-degree information of nodes in the directed graph. The three parts of a node that consists of the node itself, the in-degree label set and out-degree label set of the node are took as the multiple label set of the node. Take the node 
 as an example, the new label of this node is 
, in which 
 is the original label, 
 is the in-degree label set, and 
 is the out-degree label set.

Then, sort the multiple label set of each node. The ascending sorting process of the neighbors set in the label is similar to the original WL kernel method. In our method, the multiple label set of a node is composed of in-degree label set and out-degree label set. Hence, in the multiple label 
, the in-degree label 
 and out-degree label 
 are sorted in ascending order, respectively.

Next, label compression. That is, the multiple label set is compressed into a short new label. However, before this operation, it is necessary to take full account of the particularity of communication network that is different from the existing application fields of WL graph kernel, such as chemical element analysis. The chemical element structure graph is completely different due to the increase or decrease of an element, hence, the chemical element structure graph with a slight difference is regarded as different the chemical elements. However, in communication network, the access of individual users is random and the network structure can only remain relatively stable in a short time. That is the network graph is with a weak difference, but not exactly the same. At the same time, the weak difference of network graph cannot represent the drastic change of network state. Therefore, Jaccard similarity coefficient is used to define the network changes caused by the randomness of individual users. Jaccard similarity coefficient refers to the similarity between finite sample sets. The larger the Jaccard coefficient, the higher the similarity. The randomness change of the in-degree neighbors set and the out-degree neighbors set between the same node 
 and 
 is calculated by Jaccard index, respectively. The calculation formulas are as follows.(4)
(5)
 
(6)
 

According to the random access of individual users in the communication network, the nodes whose in-degree neighbors set and the out-degree neighbors set exist slight differences are still regarded as same nodes. When 
, τ is the label compression threshold, the new labels of nodes 
 and 
 are the same label. Next, we execute label compression. Compress the same long label into a new short label. That is, based on the original numerical label, set new short numerical label. For example, the original numerical label is {1, 2, 3}, and the new short value label is set from the numeric 4.

Finally, the new labels of the network graphs 
and 
 (the new labels are composed of the original numerical label and the newly generated short numerical label) are executed the inner product to get the similarity value in an iteration. At the same time, the above steps can be performed multiple times to obtain the similarity value of multiple iterations. The detailed process of the directed WL graph kernel is shown in algorithm 2.


Algorithm 2. Directed WL graph kernel between a pair of graphs

Input: Directed graphs 
 and 
, h
Output: The similarity matrix K of 
 and 

(1) Initialize the node labels of graphs 
 and 
. Assign the node labels 
 and 
 in graphs 
 and 
 according to Produce IniLabel().
(2) Sort the in-degree and out-degree labels on each node in ascending order. For the node 
, sort the set of in-degree label 
 and the set of out-degree label 
 to be 
 and 
, respectively. Carry out the same operation on graph 
.
(3) Update the label for each node, and h = h+1。Assign a new label 
 for each node 
. Carry out the same operation on graph 
.
(4) Calculate the Jaccard similarity of the same nodes between 
 and 
 based on (4), (5), (6).
(5) Compress the node label into a new short label on each node based on the map function ， 
。Carry out the same operation on graph 
. For same nodes of 
 in graphs 
 and 
, the nodes 
 and 
 are mapped as the same label 
.
(6) The graphs 
 and 
 are represented as feature vectors 
 and 
.This vector consists of the original labels and compress labels. The similarity of graphs 
 and 
 is 
 and the similarity matrix is 
.
(7) Check h and evaluate isomorphic results. Repeat the above steps until h reaches the expected value. Or terminate the algorithm until no new labels are generated.
Produce. Initialization label (IniLabel)
Input: the IP address of node 

Output: the node label 

(1) label = containers.Map();//label is a dictionary
(2) count = 1;
(3) If ~ isKey(label, 
)
 (4) label(
) = count;
 (5) 
 = count;
 (6) count = count+1;
(7) Else
 (8) 
 = label(
);
(9) End If

Algorithm 2 describes the calculation process of the similarity value between a pair of digraphs 
 and 
with h iterations. Parameter h determines the iteration number of the graph kernel method, which represents the neighbor order of a compressed label. For example, one iteration indicates that the compressed label of a node is composed of the first-order neighbors of this node. Because the network graph does not have a cascading propagation effect like other networks (such as social networks and software networks). Therefore, in the directed WL graph kernel method, label compression with only one order neighbor is enough. Hence, the directed WL graph kernel method only needs to carry out one iteration process, and h is set as 1. In algorithm 2, the same operation is performed twice in graphs 
 and 
, which does not increase the complexity magnitude of algorithm 2. Suppose the number of nodes is n and the number of edges is m in graphs 
. In Line (1), all nodes in a graph are traversed and a dictionary of length z is created to assign a numeric to each node. The time complexity is O(n(n-1)/2), which mainly reflects in traversing all nodes and function iskey(). The space complexity is O(z) mainly reflecting in the dictionary. In line (2), according to the adjacency matrix, each node is traversed, and the in-degree array and out-degree array of each node are obtained. The time complexity is O(n2). The spatial complexity is mainly reflected in the storage of the in-degree array and out-degree array. The space complexity of the in-degree array is much less than O(n2), and the total space complexity is much less than O(2n2). In line (3), we traverse the in-degree and out-degree arrays of each node to obtain new labels. The time complexity is O(n), and the space complexity is still O(2n2). In line (4), the same initial node, the in-degree label set and out-degree label set are searched by traversing all nodes of the two graphs. The time complexity is O(n2). The time complexity of Jaccard similarity calculation is O(1). When τ ≤ J < 1, the J value is saved with size f. Hence, the spatial complexity is O(f). In line (5), all nodes in two graphs are traversed to determine whether the multiple labels of the same node are the same. Among them, we need to traverse the set of J value and judge the J value of two nodes. If τ < = J < 1, the label of these two nodes is as the new same label. The maximum time complexity of this process is O(n2∗f). The new label is stored in a dictionary, and the space complexity is O(z). In line (6), the inner product of two vectors is calculated stored. The time complexity is O(1), and the space complexity is O(1). Therefore, the maximum time complexity of algorithm 2 is O(n2+n+1), and the maximum space complexity is O(n2+z ​+ ​f+1).

The similarity matrix 
 between the current network graph Gt at the time period t and normalization network graphs NNGs = {G1,G2, …,GN} is calculated by the directed WL graph kernel method, where 
 is the similarity vector between Gt and the N graphs in NNGs. In order to compare the similarity values of different time periods, the similarity values are standardized as follows.(7)
 

The divergence value d of network structure is obtained by exponential transformation of the similarity k. The exponential transformation changes the original size relationship of the similarity value k and expands the distance between the normal value and the abnormal value, which is more helpful to the process of DDoS attack detection. The transformation formula is as follows.(8)

Hence, the divergence value between the network state at time period t and NNGs is expressed as 
. The smaller the dt, the more normal the network state is. On the contrary, the larger the dt, the more likely the network state is an attack state. Therefore, the network threshold Th needs to be defined, which determines whether the current network state is normal or attack. When the network state is normal at time period t, update NNGs. That is, add the network graph Gt to NNGs and delete G1 in NNGs, as shown in Fig. 7. However, when DDoS attacks occur, NNGs would be frozen and not be updated, which will be described in Section 3.3 in detail.

Fig. 7
Download : Download high-res image (136KB)
Download : Download full-size image
Fig. 7. The update operation of normalization network graphs.

3.3. Dynamic threshold mechanism
Dynamic threshold mechanism means that the threshold is not predefined and fixed, but changes with the network state. Besides, the dynamic threshold can avoid overfitting and under-fitting problems caused by too large or too small static threshold. In the process of the dynamic threshold mechanism, the freezing mechanism is proposed to ensure the smooth implementation of the dynamic threshold mechanism. This freezing mechanism would guarantee the standardization of the dynamic threshold and normalization network graphs, and prevent the polluting of abnormal traffic.

Due to the inherent dynamic and volatility of network traffic, the fixed threshold cannot reflect the real network state, which would lead to a high false positive rate or false negative rate in the process of DDoS attack detection. For the precision of attack detection, the improved exponential weighted moving average method (Kimber, 1993) is used to calculate the adaptive threshold. The threshold of the (t+1)th time period is estimated according to the observed value and the estimation value of the divergence value in the tth time period. 
 and 
 represent the observation and the estimation value at time period t, respectively. 
 is the estimation value at the time period t+1. The estimation value at time period t+1 is expressed as:(9)

Next, the deviation between the observation and the estimation value at time period t is calculated.(10)

According to the deviation and cumulative deviation at time period t, the average deviation Vt+1 is obtained.(11)

According to the estimation value 
 and the average deviation value Vt+1 at the time period t+1, the threshold value Tht+1 at the time period t+1 is obtained.(12)
where σ, β, and λ are adjustable parameters. Appropriate parameter values of σ, β, and λ will greatly reduce attack detection errors. Therefore, in order to better display the real-time threshold of network state, the parameters σ, β, and λ will have different settings in the different network environments. In this paper, parameters σ, β, and λ will be evaluated and modified according to the specific experimental results. It is worth noting that at the initial time, 
, 
. According to the threshold value Tht+1 and the real divergence value dt+1 at time period t+1, the detection rule is defined as follows.(13)
 

When the actual divergence value exceeds the estimated threshold, DDoS attacks occur. On the contrary, the network state is normal. When DDoS attacks occurred, the anomaly detection system will produce an exception alarm. If the divergence value d of attack state is utilized to estimate the threshold of the next time, the normalization threshold would be polluted and increased, thus producing a high false positive rate. Meanwhile, if the network graph G at this time is used to update the NNGs, and then the NNGs will also be polluted and result in a high false positive rate. In order to avoid the above problems and accurately describe the normal network state, a freezing mechanism is proposed. The freezing mechanism mainly includes two aspects: freezing threshold and freezing NNGs. With the occurrence of attacks, the threshold keeps constant and the NNGs keep fixed. The freezing mechanism keeps the threshold at a relatively stable level and prevents the pollution of abnormal traffic. Algorithm 3 describes the detailed implementation process of the threshold freezing mechanism.


Algorithm 3. Threshold freezing mechanism

Input: dt of the tth time period, Tht of the tth time period, σ, β, λ
Output: the divergence value d, the threshold Th
(1) If dt > Tht
 (2) Freeze Tht
 (3) While dt+1>Tht
 (4) calculate the dt+1 of the next time period, and compare dt+1 and Tht
 (5) End while
(6) Else
 (7) calculate Tht+1, dt+1 of the next time period, and compare dt+1 and Tht+1
(8) End if
(9) unfreeze Tht, calculate the Tht+1 of the next time period, and compare dt+1 and Tht+1

In algorithm 3, if dt > Tht at the time period t, DDoS attacks occur, as shown in line (1). At this time, the freeze mechanism is activated as line (2). Next, the divergence value between the network graph at (t+1)th time period and NNGs is calculated. Then, it will be compared with the threshold to detect whether it is normal or attack. Until dt+z ≤ Tht, it refers that the network state is normal at this time, and the threshold is updated again as lines (3)–(9). Note that 
 and 
, combined with 
, the threshold 
 of the time period  is obtained.

In algorithm 3, lines (1)–(8) execute if-else statements that contain two processes: calculating threshold, and comparing the threshold and d. The time complexity and space complexity both are O(1) in the process of calculating threshold according to (9), (10), (11), (12). The time complexity and space complexity of the process of comparing threshold and d value are also O(1). Therefore, the overall time complexity of Algorithm 3 is O(1), and the space complexity is O(1).

The normalization network graphs are also frozen and unfrozen with the occurrence and disappearance of DDoS attacks as Fig. 8. When the attack occurs at time period t, the NNGs will not be updated until the attack disappears, as shown at time t ​+ ​z in Fig. 8. The normal network graph Gt+z is added to NNGs again, which maintains the latest state of normalization network graphs.

Fig. 8
Download : Download high-res image (226KB)
Download : Download full-size image
Fig. 8. The freezing operation of normalization network graphs.

3.4. Algorithm description
This section will describe the implementation process of FAPDD in detail, as shown in algorithm 4. In this algorithm, we assume that the network environment of the first m periods is normal, which is used to describe the initial state of the standard network graphs. Because most network environment is normal, it is very easy to set network graphs of m initial periods in network environment.


Algorithm 4. The fast all-packets-based DDoS attack detection approach based on network graph and graph kernel

Input: Packet-based set P, T, M, σ, β, λ
Output: detection result R
(1) Anomaly_flag = 0;//Anomaly flag is to indicate whether the previous moment is abnormal.
(2) NNGs is an empty set;
(3) t is the beginning time;
(4) While t is continuing do
 (5) Build NNGs = {G1, G2, …, GM} in first M time period
 (6) Th = getInitBaseline(NNGs, M, σ, β, λ)
 (7) Obtain GM+1, and calculate dM+1 of the time period M+1
 (8) If Anomaly_flag = = 0
 (9) Calculate Th of the time period M+1 according to (7), (8), (9), (10)
 (10) If Th >= dM+1
 (11) R.add(0)//The result is normal.
 (12) Anomaly_flag = 0
 (13) Calculate Th of the next time period
 (14) Update NNGs
 (15) Else
 (16) R.add(1)//The result is attack.
 (17) Anomaly_flag = 1
 (18) Start the freezing mechanism according Algorithm 3
 (19) End If
 (20) Else
 (21) If Th >= dM+1
 (22) R.add(0)
 (23) Anomaly_flag = 0
 (24) Calculate Th of the next time period
 (25) Update NNGs
 (26) Else
 (27) R.add(1)
 (28) Anomaly_flag = 1
 (29) End If
 (30) End If
(31) End While
Produce. Th = getInitBaseline(Gs, M, σ, β, λ)
(1) Calculate the similarity matrix KM╳M of Gs and obtain {d1, d2, …, dM-1}
(2) For i = 1:M-1 do
 (3) Calculate Th according to (9), (10), (11), (12)
(4) End For

In algorithm 4, line (1) sets anomaly_flag to indicate whether the attack occurred at previous moments. If anomaly_flag = 0, it means that the previous time is normal, then lines (8)–(19) are executed. Otherwise, lines (20)–(30) are executed. The difference between the two parts is the process of updating thresholds as line (9). If the previous time is abnormal, start the freezing mechanism as line (18). At this time, the threshold does not need to be updated again, as shown in lines (20)–(30).

4. Performance evaluation
The experiments in this paper were carried out in the environment of Windows 7 PC, Inter® Pentium® CPU G2020 @2.90 GHz, 4.00 GB RAM, and the proposed method was implemented by MATLAB 2019a.

4.1. Dataset description
In this paper, two different types of datasets are used to evaluate the proposed approach. The first dataset is 3%, 10% and 30% attack rates of DDoS dataset that contains attack traffic of ICMP, UDP and TCP protocols. Another dataset is SUEE8 dataset, which contains attack traffic of HTTP protocol generated by different attack tools. The details of these two datasets are as follows.

(1)
3%, 10% and 30% attack rates of DDoS dataset

The network traffic dataset combines the normal network traffic of the real environment and DDoS attack traffic. Normal network traffic is obtained in the real campus LAN environment of School of information science and engineering. This environment includes several PCs of windows 7 and windows 10 system as well as Ubuntu system servers. DDoS attack traffic is obtained via attacking the specific victim host by IP spoofing and pseudo randomization technology of Hping3 tool. Details of the attacker and the victim are as follows. The attacker system runs Kali Linux system, which is a Linux distribution based Debian. Kali Linux system is a practical security test kit, including as many penetration and audit tools as possible. Hping3 tool in Kali Linux system is as an attack tool to generate multiple DDoS attacks. Hping3 is usually used by system administrators and moral hackers for pinging tasks or advanced tasks. It can use protocols of TCP, UDP, ICMP and RAW-IP and a route tracking mode to transfer files between two mutually contained channels. The victim system runs the windows 7 system.

This dataset contains DDoS attack traffic (ICMP, UDP and TCP SYN Flood attacks) with different attack rates. The attack rate refers to the rate of the number of attack packets to the total packets per unit time in the attack scenario as formula (14) (Sagar et al., 2018). The detailed attack mode is shown in Table 1. The detailed description of the generated three network traffic datasets is shown in Table 2.(14)
 
where Pattack is the number of attack packets, and Ptotal refers the number of total packets.

(2)
SUEE8 dataset


Table 1. Details of simulated attacks.

Attack type	Attack rate
ICMP Flood	3%, 10%, 30%
UDP Flood	3%, 10%, 30%
TCP SYN Flood	3%, 10%, 30%

Table 2. Dataset description of 3%、10% and 30% attack rates of DDoS datasets.

Dataset Name	Dataset Description	Number of Total Packets	Number of Attack Packets	Duration	Attack Time
Dataset1	The dataset contains normal network traffic and 3% attack rate DDoS traffic.	2,667,367	23,956	1810s	1070s–1180s
1280s–1400s
1570s–1710s
Dataset2	The dataset contains normal network traffic and 10% attack rate DDoS traffic.	1,856,280	72,475	1290s	510s–600s
710s–850s
960s–1100s
Dataset3	The dataset contains normal network traffic and 30% attack rate DDoS traffic.	2,071,413	179,902	1660s	790s–870s
1060s–1160s
1330s–1420s
SUEE8 dataset includes network traffic in and out the network server of the electronic engineering student union in Ulm University lasting for 8 days (Lukaseder, 2017). The attack traffic is generated by slowloris, slowhttptest and slowloris-ng tools. The specific information is as follows: ①50 attackers (IP address from 10.128.0.1 to 10.128.0.50) run slowloris tool; ②50 attackers (IP address from 10.128.0.50 to 10.128.0.100) run slowhttptest tool; ③50 attackers (IP address from 10.128.0.100 to 10.128.0.150) run slowloris-ng tool. In this paper, some of SUEE8 datasets (called Dataset4) are selected, and the details are shown in Table 3. According to formula (14), the attack rate of Dataset4 is about 50%.


Table 3. Dataset description of SUEE8 dataset.

Dataset Name	Dataset Description	Number of Total Packets	Number of Attack Packets	Duration	Attack Time
Dataset4	The dataset contains normal network traffic and 50% attack rate DDoS traffic.	3,511,704	27,508	69602s	3650s–3935s
4.2. Performance evaluation index
To evaluate the detection effect of the FAPDD, Acc(Accuracy), TPR(True positive rate), FPR(False positive rate) and FNR(False negative rate) are adopted in this paper (Wang et al., 2018). Acc refers to the proportion of normal and attack behaviors identified correctly in the total behaviors. TPR refers to the proportion of the number of attacks correctly identified as attacks in the total attacks. FPR refers to the proportion of the number of normal behaviors that are mistakenly identified as attacks in the total normal behaviors. FNR measures the proportion of the number of attacks that are wrongly identified as normal behaviors in total attacks. The whole formulas are as follows.(15)
 
(16)
 
(17)
 
(18)
 
where, Ntotal = Nnormal ​+ ​Nattack, Ntotal is the number of total behaviors, Nnormal is the number of total normal behaviors, Nattack is the number of total attacks, nnormal is the number of normal behaviors correctly identified, nattack is the number of attacks correctly identified, 
 is the number of normal behaviors which are mistakenly identified as attacks, and 
 is the number of attacks which are wrongly identified as normal behaviors.

4.3. Experimental result
In this section, the performance of the FAPDD is evaluated by a large number of experiments that mainly contain the following parts. First, the traffic size (packets and bytes) of the above two types of traffic datasets is globally analyzed and visualized to show the overall distribution of network traffic. Next, via a large number of experiments, the configuration of algorithm parameters is discussed and the optimal values of these parameters are selected. Next, the effectiveness of each stage in the proposed FAPDD is discussed and analyzed. Finally, compare with other algorithms to illustrate the time efficiency and detection performance of our method.

4.3.1. Overall analysis of network traffic
The first experiment is mainly applied to show network traffic changes with time and analyze the impact of DDoS attack traffic with different attack rates. Take 10s as the time period to analyze network packets and bytes, and the statistical information is shown in Fig. 9 and Fig. 10. In the normal network, the network traffic remains relatively stable in a short time, but it still has a large volatility in different time periods. For example, in Fig. 9(a), the network traffic suddenly decreases in the 40th time period, but in the 40th to 60th time periods network traffic remains stable. From Figs. 9 and 10, when DDoS attacks with a small attack rate occur, network traffic will not greatly change. But when the attack rate becomes large, network traffic significantly changes with the occurrence of DDoS attacks as Fig. 9(c). Therefore, only according to network traffic changes, DDoS attacks cannot be effectively judged. In addition, DDoS attacks with smaller attack rates are easier to hide in normal network traffic and more difficult to be detected.

Fig. 9
Download : Download high-res image (569KB)
Download : Download full-size image
Fig. 9. Changes of total packets and attack packets with time (a)Dataset1 (b)Dataset2 (3)Dataset3 (d)Dataset4.

Fig. 10
Download : Download high-res image (579KB)
Download : Download full-size image
Fig. 10. Changes of total bytes and attack bytes with time (a)Dataset1 (b)Dataset2 (3)Dataset3 (d)Dataset4.

4.3.2. Parameter configuration
The second experiment is utilized to set several parameters involved in this method, which mainly include the detection period △T, the parameters τ and h in the directed WL graph kernel method, and the parameters α, β and λ in the improved exponential weighted moving average method. In the existing detection methods, parameter △T is usually set as 20s–60s. In order to better reflect the real-time performance of this method, the detection period is set as 10s to realize the real-time demand of DDoS attack detection. The parameter τ will affect the number of compressed labels in WL graph kernel method. Since the parameter τ is a product, which will affect the number of compression labels. Therefore, the parameter τ is set as 0.5.

For the parameters α, β and λ of the improved exponential weighted moving average method, α refers to the damping coefficient, β refers to the deviation damping coefficient, and λ refers to the threshold damping coefficient. Parameter α is used to smooth the estimated value, which determines the relationship between the predicted result at time period t and the historical data. The larger α is, the more important the nearest data is to estimate the next threshold. Parameter β is used to smooth the estimation of variable deviation. Similar to the parameter α, the larger the β is, the more important the nearest data is. Parameter λ directly determines the threshold, which were considered more important than parameters α and β. A variety of improved exponential weighted moving average (IEWMA) methods are applied in the field of network attack detection. Because these methods have different improvements, the values of these IEWMA’ parameters are also different. Parameter α were set as 0.125, 0.125 and 0.3 in literatures (Tang et al., 2014; Tang et al., 2009; Wang et al., 2018), respectively. Parameter β were set as 0.25, 0.25 and 0.4 in literatures (Tang et al., 2014; Tang et al., 2009; Wang et al., 2018), respectively. Parameter λ were set as 1, 1 and 6 in literatures (Tang et al., 2014; Tang et al., 2009; Wang et al., 2018), respectively. In reference (Hunter, 1986), the parameter α is suggested to be set as 0.2 to 0.3. Parameter β is recommended to be less than 0.5. The selection of parameters α, β and λ, especially parameter λ, determines the threshold of attack detection and directly affects the attack detection performance, such as accuracy and FPR. In order to obtain better detection performance, combining the existing parameter setting with our improved formulas, the values of parameters α, β and λ are set between [0,1]. Meanwhile, a large number of experiments are carried out to determine the final set of parameters α, β and λ. In the process of parameter tuning, firstly, values of parameters β and λ are fixed as 0. The value of parameter α is adjusting in an interval [0,1], and the value of parameter α with a best result is selected. Next, the value of parameters α and λ are fixed, and adjust and select the value of parameter β. Finally, fix the value of parameters α and β, and adjust the value of parameter λ. Because the dynamic threshold greatly varies with the network environment, the parameter settings of Dataset1, 2, 3 and Dataset4 are different. Taking Dataset1, 2, 3 as examples, the influence of parameters α, β and λ on the detection results is shown in Fig. 11, Fig. 12 and Fig. 13.

Fig. 11
Download : Download high-res image (209KB)
Download : Download full-size image
Fig. 11. Impact of parameter α for detection results (a) Dateset1, (b) Dateset2, (c) Dateset3.

Fig. 12
Download : Download high-res image (211KB)
Download : Download full-size image
Fig. 12. Impact of parameter β for detection results (a) Dateset1, (b) Dateset2, (c) Dateset3.

Fig. 13
Download : Download high-res image (219KB)
Download : Download full-size image
Fig. 13. Impact of parameter λ for detection results (a) Dateset1, (b) Dateset2, (c) Dateset3.

For the evaluation indexes of this paper, the larger the Acc and TPR, and the smaller the FPR and FNR, the better the detection results. In Fig. 11, TPR and FNR are not impacted by parameter α. Therefore, results of FPR and Acc determine the value of this parameter. According to detection results of Dataset1, 2, 3, parameter α has a greatest influence on the FPR and Acc in Dataset2. Hence, parameter α is set as 0.4. The effect of parameter β is similar to that of parameter α. In Dataset1,2,3, different parameter values have a more influence on the FPR and Acc. When β = 0.1, the detection effect of three datasets is the best. Therefore, Parameter β is set as 0.1. The influence of parameter λ for the detection results is far greater than that of parameters α and β. In Dataset1, when parameter λ is 0.4, the detection result is the best. In Dataset2 and Dataset3, the effect is the best when parameter λ is 0.3. However, when parameter λ is 0.4, there exists still good detection effects in Dataset2 and Dataset3. Therefore, parameter λ is set as 0.4. In Dataset4, the selection processes of parameters α, β and λ are similar to the above processes. The parameters α, β, and λ are set as 0.1, 0.1 and 0.3, respectively. Via analyzing two different network environments, the setting of multiple parameters is shown in Table 4.


Table 4. The setting of different parameters in the proposed FAPDD.

Parameters	Dataset1,2,3	Dataset4
△T	10s	10s
τ	0.5	0.5
h	1	1
α	0.4	0.1
β	0.1	0.1
λ	0.4	0.3
4.3.3. Time efficiency analysis of building network graph model
This part mainly analyzes the time efficiency of the network graph model. Meanwhile, the time efficiency is also the main focus of our method. Fig. 14 shows the comparison results between network graph model and network flow model in the construction time. It can be seen that the construction time of network graph model is far less than that of network flow model, especially in Dataset3. In Dataset3, the construction time of network graph model and network flow model is about 40s and 9000s, respectively. The construction time of 9000s will result in a huge delay in the process of DDoS attack detection. In addition, combined with the data information in Table 1, Table 2, Table 3, it can be analyzed that the construction time of these two models is related to the volume, duration and attack rate of network traffic. In Dataset1, 2, 3, the packet number of Dataset3 in a single period is least, but the construction time of network flow model is longest and much longer than that of Dataset1, 2. A big reason is the increase of the attack rate. For Dataset4, due to the least packet number in a single period, the construction time of network flow model is the shortest in Dataset4. However, because of the longest duration of Dataset4, the construction time of network graph model is the longest. Therefore, the construction time of network flow model is affected by the packet number in a single period, attack rate and duration. For network graph model, the main factor for the construction time is duration. In other words, network flow model is more suitable for smaller networks. However, the time consuming of network graph model keeps relatively stable in various network environments of different scales.

Fig. 14
Download : Download high-res image (197KB)
Download : Download full-size image
Fig. 14. Comparison of construction time of network graph model and network flow model.

4.3.4. Effectiveness analysis of directed WL graph kernel method
This experiment is mainly to verify the effectiveness of the directed WL graph kernel method. This effectiveness is mainly reflected in the obvious difference between normal network graphs and attack network graphs. Fig. 15 shows changes of the value d which is the divergence between network graphs of different periods and the normalization network graphs in the four datasets. It can be seen that the value d in normal network is basically stable at a low level and has a weak fluctuation. However, the d value in attack network keeps at a high level. There is a significant difference between normal network and attack network. At the same time, with the increase of attack rate, the boundary between normal network and attack network is more obvious. Combined with changes of network traffic in Figs. 9 and 10, we can see that under normal network, the decrease or increase of network traffic will not cause a huge change of network structure. Therefore, the directed WL graph kernel method proposed in this paper can effectively distinguish normal network from attack network. Meanwhile, this method would not be affected by changes of network traffic.

Fig. 15
Download : Download high-res image (340KB)
Download : Download full-size image
Fig. 15. Changes of the d value in different time periods (a)Dataset1 (b)Dataset2 (3)Dataset3 (d)Dataset4.

4.3.5. Effectiveness analysis of dynamic threshold mechanism
This section is mainly to illustrate the effectiveness of dynamic threshold mechanism and freezing mechanism. Fig. 16 shows changes of dynamic thresholds in four datasets and the effect of freezing mechanism for network threshold. From Fig. 16, no matter freezing mechanism exists or not, the threshold will change with the value d. When the value d increases, the threshold also increases. Otherwise, the threshold decreases. Therefore, the proposed dynamic threshold mechanism can well reflect real network changes. Freezing mechanism, a very important part of dynamic threshold mechanism, ensures that network threshold and NNGs are not polluted by attack traffic. In normal network state, the freezing mechanism does not work. In Fig. 16, the yellow and purple lines overlap, the green and orange lines overlap. In the absence of the freezing mechanism, the threshold is affected by the abnormal d value and sharply rises with the occurrence of DDoS attacks, as the orange line in Fig. 16. This situation makes DDoS attacks completely undetectable to result in a high FNR. Table 5 displays the effect of DDoS attack detection without freezing mechanism. From Table 5, the FPR is 0 and the FNR is more than 70%, indicating that a large number of DDoS attacks have not been detected. As a whole, the freezing mechanism keeps the network baseline at a standard level, which can effectively identify DDoS attacks. Therefore, the dynamic threshold mechanism and freezing mechanism proposed in this paper are very necessary and effective.

Fig. 16
Download : Download high-res image (621KB)
Download : Download full-size image
Fig. 16. Changes of dynamic threshold and the impact of freezing mechanism (a)Dataset1 (b)Dataset2 (3)Dataset3 (d)Dataset4.


Table 5. Detection effect of DDoS attacks without freezing mechanism.

Item	Dataset1	Dataset2	Dataset3	Dataset4
FPR	0	0	0	0
FNR	0.9	0.825	0.7	0.88
TPR	0.1	0.175	0.3	0.11
Acc	0.79	0.74	0.87	0.99
4.3.6. The overall effectiveness analysis of the FAPDD
This section is mainly used to illustrate the overall effectiveness of this method, including three parts: the detection effect analysis of the FAPDD, the comparative analysis of time effectiveness, and the comparative analysis of detection effect with other methods. First, Table 6 shows the detection results in different datasets. The results show that our method has achieved excellent detection results in different network datasets with different attack rates. The FPR is 0, and the FNR is also lower than 10% on all datasets. The FNR is highest on Dataset1 with only 7%. The TPR is more than 90%, and the accuracy is close to 100%. With the increase of attack rate, the accuracy, TPR, and FNR are improved. Therefore, the FAPDD can effectively detect different types of DDoS attacks with different attack rates.


Table 6. The detection effect of the proposed method.

Index	Dataset1	Dateset2	Dataset3	Dataset4
FPR	0	0	0	0
FNR	0.07	0.05	0.03	0
TPR	0.925	0.95	0.97	1
Acc	0.98	0.98	0.99	1
This part mainly analyzes the time efficiency by comparing with other methods. The time consuming of attack detection process basically includes the following aspects: data preprocessing, data generation (for example, network flow generation), model building (for example, entropy model), and attack detection. Because our method does not carry out these processes of data preprocessing and data generation, only model building and attack detection are executed. In theory, the proposed FAPDD has a very simple process, which is very helpful for a fast attack detection. Comparative experiments include two popular DDoS attack detection methods: Entropy method (Yang et al., 2016) and Sketch compression method (Tang et al., 2009). The overall execution time of these three methods is shown in Fig. 17. The overall run time of our method is far less than a single detection period and far less than that of the other two methods. It is worth noting that the displayed time of the sketch compression method does not include the time of data preprocessing. Data preprocessing refers to the time consuming of converting IP addresses into the numeric for sketch compression. This data preprocessing is a time-consuming operation by a single thread. Therefore, the detection delay of our method is less than 1s, and the FAPDD can fully achieve the real-time online execution of DDoS attack detections.

Fig. 17
Download : Download high-res image (221KB)
Download : Download full-size image
Fig. 17. Comparison of detection time between the FAPDD with other algorithms.

In order to further analyze the attack detection effect, this method is compared with the other three methods (Entropy method (Yang et al., 2016) and Sketch compression method (Tang et al., 2009), and SkyShield (Wang et al., 2018)). The comparison results are shown in Fig. 18. The detection performance of this method is not lower than that of other methods, even better than other methods. For four datasets, our method has the most excellent FPR, which means that the proposed FAPDD can clearly identify normal network. The FNR is slightly higher than that of other methods but lower than 5%. In Dataset2, 3 and 4, the detection effects of these methods are very close. The accuracy and TPR are close to 100%, and the FPR and FNR close to 0. In Dataset1, the detection effect of Sketch compression method is the worst, and DDoS attacks cannot be detected basically. This is because Hellinger Distance and dynamic threshold method in Sketch compression method cannot sensitively detect changes of sketch structure when the attack rate is small. The method SkyShield is an improvement of Sketch compression method on the Hellinger Distance and dynamic threshold mechanism. Therefore, the detection effect of the method SkyShield is better than that of Sketch compression method. In conclusion, our method can not only detect DDoS attacks in real-time, but also has a significant detection effect.

Fig. 18
Download : Download high-res image (546KB)
Download : Download full-size image
Fig. 18. Comparison of detection performance between the FAPDD with other algorithms.

5. Discussion
The core content of the proposed DDoS attack detection approach is network graph model, the directed WL graph kernel method and dynamic threshold. The network graph is a directed unweight graph, and the directed WL graph kernel method is used to identify changes of the graph structure. The dynamic threshold can detect DDoS attacks by analyzing the magnitude of changes. According to this method, for DDoS attacks generated from external networks by forged IP tools or botnets, whether the scale of such attacks is large or small, and whether the attack rate is large or small, they will cause changes of the network graph structure. The directed WL graph kernel method can sensitively capture changes of the network structure. At the same time, it shows the great difference between the network graph structure and the standard network graph structure. Therefore, our dynamic threshold method can effectively detect this kind of DDoS attacks and has an excellent detection effect in DDoS attacks with different attack rates. For DDoS attacks generated from the internal network, when DDoS attacks are generated by the forged IP tools, which are similar to the DDoS attacks generated by the forged IP tools of the external network. This kind of DDoS attacks can be easily detected by this method. For DDoS attacks generated by botnet which is composed of zombies in the internal network, when the attack scale is large, these attack behaviors also cause a huge change of network graph structure. Therefore, our method can also receive changes of network graph and detect attack behaviors. However, when this kind of DDoS attacks is small to be a DoS attack with only one attacker, the difference between the network graph and normalization network graphs is not obvious. The proposed dynamic threshold model is unable to detect this weak difference. At the same time, in the process of lowering the threshold and trying to detect DoS attacks, it causes some confusion between normal network graph and attack network graph to result in an increase of false positive rate. Therefore, the dynamic threshold method will be further improved to detect small DoS attacks.

The next work is to further improve the construction method of network graph model. The proposed network graph model is a kind of unweight graph. That is to say, the network graph pays attention to the existence of network interaction, but not the interaction intensity. Therefore, the network graph model will be improved to a directed weighted graph, which not only focuses on the existence of network interactions but also on the interaction strength. This kind of network graph can produce enough deviation between the attack network structure and the standard network structure, which will be more beneficial to detect DDoS attacks, especially hidden DDoS attacks. Meanwhile, in order to measure divergences of network graphs, we should improve the proposed directed WL graph kernel method to form a directed weighted graph kernel method that is utilized to calculate differences of directed weighted network graphs with time. On the basis, dynamic threshold mechanism is an effective method to measure graph differences. Exponential weighte moving average method is an easy-improved and effective threshold generation method, which is suitable for different application scenarios. In addition, the cumulative sum control chart method can also generate dynamic threshold, which is widely used in network traffic measurement. Therefore, the exponential weighted moving average method or cumulative sum control chart method can be improved to analyze the network graph deviation. It is feasible to detect high-rate and low-rate DDoS attacks.

6. Conclusion
In the complex and high-speed network environment, in order to realize online and real-time detection of DDoS attacks, this paper proposes a fast all-packets-based DDoS attack detection method based on network graph and graph kernel, which mainly includes three parts: time series network graph model, network graph divergence measure method based on directed WL graph kernel, and dynamic threshold mechanism. Firstly, based on all network packets, the network graph model and time series network graph model are constructed according to the source IP and destination IP information in per time period and continuous time periods, respectively. This model greatly simplifies the process of DDoS attack detection method. At the same time, compared with the traditional network flow model, the network graph model greatly reduces the time consumption of data process and detection model to realize the real-time detection requirements of DDoS attacks. Next, the normalization network graphs are defined to represent the standard network state. Network graph divergence measure method based on directed WL graph kernel is proposed to measure the difference between the current network and the standard network state. This method can effectively distinguish normal network and attack network on two different types of network datasets with multiple attack rates. Further, an improved exponential weighted moving average method is proposed to realize the dynamic threshold mechanism. Experiments show that the dynamic threshold coincides with the real network environment and the network dynamics. The proposed freezing mechanism ensures the standard state of network threshold and normalization network graphs, which effectively reduces false positive rate and false negative rate. Experiments are carried out on two real DDoS attack datasets with different attack types and different attack rates. Experiment results prove the overall time feasibility and the excellent detection effect. Compared with other algorithms, the time efficiency of the FAPDD is much higher than other methods. The detection delay of a single period is less than 1 s, which fully meets the real-time online demand of attack detections. This method has a good true positive rate and accuracy, as well as low false positive rate and false negative rate. Especially in the dataset with 3% attack rate, the detection effect is better than other comparison methods.