The proliferation of the Internet of things (IoT) devices and the corresponding high-volume sensing data pave the path for data-driven IoT services such as smart cities and smart farming. The first step towards achieving such services is to efficiently collect the data at collection centers, which requires an agile data collection strategy coping with dynamic environment changes. Network programmability (software-defined networking (SDN) or network function virtualization (NFV)) fits this need by enabling re-configurable IoT networks. However, existing SDN/NFV-based solutions in the IoT context fall back due to the lack of resource and overhead awareness and the compatibility with standard protocols. SoftIoT fills that gap by designing SDN/NFV-enabled IoT nodes and network architecture that consider resource and energy constraints a top priority. It optimizes the number of activated NFV nodes and assigns traffic sources to that VNFs over optimal routes of enough energy and link quality. We extensively evaluate the performance of SoftIoT in the Cooja simulator over the Contiki OS using real sensor traffic, which shows that the proposed solution consumes 40% and 60% less energy than existing works. SoftIoT also outperforms its counterparts over the packet delivery ratio, network lifetime, and overhead reduction while being compatible with standard protocols.

Previous
Next 
Keywords
SDN

NFV

IoT

ILP

Energy-aware routing

1. Introduction
The Internet of Things (IoT) is the key enabler of cutting-edge applications like smart healthcare, industry, cities, environmental monitoring, etc. In such applications, billions of IoT devices sense and transport traffic over the Internet. Nevertheless, many IoT devices consist of low-power sensors with constrained resources (energy, memory, processing). These sensors also communicate over wireless radio while forming a multi-hop wireless network that is susceptible to interference. Finally, coexisting IoT applications’ demands and environmental dynamics change over time. Unfortunately, fixed-function legacy IoT network architecture cannot offer dynamic network monitoring and configuration to cope with these dynamics (Haque and Abu-Ghazaleh, 2016). Network programmability approaches like Software-Defined Networking (SDN) (Kreutz et al., 2015) and Network Function Virtualization (NFV) (Han et al., 2015) have the potential for effectively managing the next-generation IoT network infrastructures.

SDN offers network programmability, hardware abstraction, and smooth protocol evolution, where network intelligence or control logic (control plane) is removed from network elements like IoT devices (data plane). The logically centralized control plane uses its global network view and configures data plane elements to cope with the application demand and network state change. NFV decouples network functions like a firewall or caching from proprietary hardware appliances and enables on-demand virtualized functions deployment in off-the-shelf hardware (Neves et al., 2016). Thus, SDN can offer a platform to implement various IoT services as demand-based virtual network functions (VNFs), where the controller can act as an orchestrator. For instance, an SDN controller can monitor IoT devices’ resource utilization and network interference to adjust the network configuration accordingly. An NFV orchestrator, on the other hand, can dynamically deploy network functions (e.g., data aggregation) as a VNF to intended IoT devices. Thus, SDN and NFV can complement each other to realize a programmable IoT network.

A plethora of IoT devices are out there with a wide range of capabilities and applications. This work focuses on low-power IoT devices used in environmental monitoring like smart buildings, farms, or forests for sensing pressure, temperature, humidity, etc. The collected sensed data can be gathered, analyzed, and visualized at the edge or cloud. However, the sensed data must first be collected efficiently from the interference-prone and resource constrained multi-hop last-mile wireless networks with the help of network programmability.

Baddeley et al. (2018) presents an IPv6 compatible and optimized SDN architecture for IoT networks called SDN. The authors use RPL (Winter et al., 2012) (the IPv6 Routing Protocol for Low-Power and Lossy Networks) and IEEE 802.15.4 as the foundation of the proposed architecture. The design, however, does not have any energy optimization or VNF provisioning.  Galluccio et al. (2015) propose SDN-WISE, an SDN-based stateful design for wireless sensor networks (WSNs) and Anadiotis et al. (2017) extend SDN-WISE to accommodate VNF deployment. However, unlike SDN, neither of the designs optimizes their architecture to cope with the resource-constrained interference-prone wireless networks. Also, they are not compatible with IPv6 and RPL. Low-power programmable IoT networks must consider resource (energy, processing, etc.) aware design, compatible with the standard protocols, not introduce additional control overhead to better transport the sensed traffic to the collectors. Unfortunately, there is no SDN/NFV based low-power IoT network design that accommodates such design criteria; thus, it suffers from inefficient resource utilization that hinders the realization of data-driven IoT applications.

Thus, we propose SoftIoT, a novel resource-aware SDN/NFV based low-power IoT system to minimize the constrained resource utilization (e.g., energy, memory), avoid interference, and reduce the control traffic. SoftIoT is also compatible with IPv6, RPL, and IEEE 802.15.4. We can deploy any appropriate VNF in SoftIoT; however, in this work, we choose data aggregation (Khan et al., 2018, Lin et al., 2018) as a use case. This VNF can improve the impact of control traffic and interference. As application and control traffic share the same network channel in IoT networks, reducing control traffic increases the available bandwidth for the application data and further improves energy utilization. In particular, we first design an SDN/NFV enabled IoT node and network architecture for SoftIoT. Then, we formulate an Integer Linear Programming (ILP) problem to activate an optimal number of NFV enabled IoT devices (nodes) and assign IoT data sources to those activated nodes over link quality and energy-aware optimal routes. Next, we develop a heuristic to support large IoT networks as the optimization problem is NP-hard. SoftIoT controller uses this heuristic to dynamically activate VNFs and configure routes in reaction to network state changes.

We solve the optimization problem in the CPLEX solver and show its behavior. Then, we implement a prototype of SoftIoT in the Cooja simulator for the Contiki OS (Dunkels et al., 2004) and evaluate it in grid and random topologies with different route lengths, traffic load, and sizes. We compare the performance of SoftIoT with two state-of-the-art solutions: SDN and SDN-WISE. The results reveal that SoftIoT improves 40% and 60% communication energy consumption than SDN and SDN-WISE, respectively. Also, it offers a better packet delivery ratio (PDR), network lifetime, and control overhead compared to its counterparts; thus, our contributions are as follows.

•
We design a programmable node for VNF service-chain provisioning in low-power IoT networks. We also devise an SDN/NFV based network architecture and optimizes it across the protocol stack to reduce control traffic and resource requirements. We call the entire system SoftIoT.

•
We implement a prototype of SoftIoT in the Cooja simulator for the Contiki OS using Texas Instrument’s sensors. The evaluation results confirm that the proposed solution outperforms its counterparts in communication energy consumption, PDR, network lifetime, control overhead, and reaction to network state changes.

•
We are the first to provide a systematic analysis of the control traffic overhead.

•
Finally, we share the SoftIoT prototype implementation code (Saha et al., 2020a) to reproduce and extend it.

To the best of our knowledge, SoftIoT is the first resource-aware SDN/NFV-based design for low-power IoT networks. This work extends our conference paper (Saha et al., 2020b) and presents a novel optimization model (the previous one is an instance), corresponding heuristic, and significant new evaluation results.

The rest of the paper is organized as follows. We present the necessary background to understand the proposed work in Section 2. Section 3 briefly compares and contrasts the state-of-the-art SDN/NFV IoT designs with the proposed solution. Then, we present our ILP problem and corresponding heuristic in the next two sections. After that, we describe the proposed SDN/NFV architecture in Section 6. The following two sections first present the evaluation setup, then discuss the evaluation results. We conclude the paper in Section 9.

2. Background
This section presents the necessary background to better understand the proposed work.

Overview of RPL: IPv6-based Routing Protocol for Low-Power-Lossy Networks (RPL) (Winter et al., 2012) organizes the routing topology as a tree called Destination Oriented Directed Acyclic Graph (DODAG), where the sink is deployed at the root. Once the root node is configured, the protocol starts sending DODAG Information Object (DIO) messages with different routing metrics (e.g., link quality, residual energy) and an objective function towards the other nodes. Each node uses that objective function to select an appropriate parent towards the sink and initiates a Destination Advertisement Object (DAO) message to form upstream routes. Nodes can also join the network after the topology is formed; in that case, a newly joined node uses ICMPv6 or control message (DODAG Informational Solicitation (DIS)) to request DAG information from their neighbors. In response, neighbors share DIOs, and then they exchange DAO/DAOACK. The process continues to reach the DAG root. RPL can operate in a non-storing mode, where regular relay nodes can deploy source routing to reduce memory usage and control overhead; hence, used in this work.

Interference detection: We can detect interference in wireless networks, either using interference modeling (Musaloiu-E and Terzis, 2008) or network data sampling. The network data sampling is a common approach in low-power networks, where we can use signal-to-noise ratio (Zhou et al., 2005) or RSSI threshold (Musaloiu-E and Terzis, 2008, Noda et al., 2011) measurement. The latter is widely used due to its availability in off-the-shelf sensors and easy usage (Konings et al., 2017). The RSSI threshold represents the ‘noise floor’ of a signal, where the standard value for low-power lossy IoT networks (from Texas Instruments) is −45 dBm (Musaloiu-E and Terzis, 2008), which we use in our evaluation.

Data aggregation: Data aggregation is a process of collecting, combining or compressing, and delivering the processed data to an intended receiver (Dehkordi et al., 2020). In large IoT networks, data aggregation can reduce the number of transmissions; hence, bandwidth demand, energy consumption, and interference. However, low-power IoT devices also pose a limited processing capability that requires a lightweight aggregation scheme. One of the data aggregation architectures in IoT networks is hierarchical model, where sensing nodes and the data collector or sink are located at the bottom and top of the hierarchy, respectively. In between, there are relays or aggregators. This tree-based hierarchical model usually offers low overhead and high scalability. Also, we can choose between Lossless and Lossy (Ullah et al., 2020) data compression, where the former is usually computationally heavy. Thus, we can choose any of these aggregations as a virtual network function depending on the IoT applications. We consider computationally light and energy-efficient in-network hierarchical aggregation, where an aggregator compresses received data as an average before sending it to the sink.

NFV service-chaining: A network service from a provider can be composed of multiple network functions to meet the SLA. The ordered lists of functions that form service are called network service-chain (Pham et al., 2017). We can deploy the required service chain in a single node that flow will pass through, or the chain can be distributed among multiple nodes. The former choice requires the node to have adequate resources and avoids communication overhead. The distributed deployment reduces the resource requirement from a single node at the cost of the communication overhead. Thus, we can choose a deployment scheme based on the network resource budget, and application demand (Boucadair et al., 2014). For instance, we want to reduce energy utilization and communication overhead; thus, we prefer deploying all VNFs from a service chain in a single IoT node. In SoftIoT, multiple NFV nodes form a hierarchical architecture and host service-chain for the assigned sources to offer scalability in large IoT networks without overwhelming a single NFV node.

3. Related work
We categorize the related works into NFV, data aggregation, and SDN/NFV-based IoT network designs, where the emphasis will be on the last category, the most relevant one to our work.

VNF and data aggregation in IoT networks. Tomovic et al. propose an intent-based network management framework for heterogeneous IoT networks. NFV provisioning is deployed at the management layer to accommodate users’ intent (Tomovic et al., 2017). A similar intent-based design is proposed in Xu et al. (2020) through optimal VNF placement and service chaining. A non-intent based version of the same problem can be found in Zheng et al. (2019). These works are not for low-power IoT networks and do not consider energy awareness. Non-SDN-based IoTSFC designs VNF placement and service chaining considering energy-awareness without interference awareness (Kouah et al., 2018). Different data aggregation techniques in wireless sensor networks and their comparisons are presented in Dehkordi et al., 2020, Ullah et al., 2020, Fute et al., 0000 and Guidi and Ricci (2019). An energy-aware data aggregation scheme in traditional WSN without SDN/NFV is proposed in Devika et al. (2019). In contrast, an SDN-based data aggregation without any NFV provisioning is proposed in Lin et al. (2018).

SDN/NFV based energy-aware IoT Networks.  Galluccio et al. (2015) propose SDN-WISE, the first stateful software-defined architecture for low-power WSNs. An SDN-WISE node consists of a WISE states array, an accepted IDs array, and a WISE flow table to keep state information, process chosen packets, maintain matching rules and actions, respectively. SDSense (Haque et al., 2019) emphasizes decomposing network functions based on their agility and scope. SDSense delegates fast-changing network functions like routing to programmable sensors while maintains slow-changing functions like topology discovery at the controller. Ding et al. (2019) design an energy-aware routing algorithm for software-defined WSNs. These solutions do not have IPv6 and RPL compatibility, provision for optimizing control overhead, and NFV capability.

SDN (Baddeley et al., 2018) programmable node has a protocol stack builds on IEEE 802.15.4, i.e., suitable for low-power devices. The design then optimizes the overall architecture and protocol stack to reduce the control overhead and is compatible with the RPL protocol. However, the architecture does not offer any NFV provisioning or energy-optimized routing. The authors in Huang et al. (2018) propose a software-defined energy-harvesting IoT network architecture without any NFV provisioning. Anadiotis et al. (2017) extend SDN-WISE with NFV capability, but the solution still lacks IPv6 and RPL compatibility and any energy optimization. A survey on SDN-based IoT applications can be found in Bekri et al. (2020).

It is evident that we need a new programmable IoT node and network architecture that supports IPv6, RPL, and NFV service-chaining while implementing energy and link quality-aware routing protocol for low-power lossy IoT networks, which is the contribution of this paper.

4. The optimization problem
In this section, we first define the proposed ILP problem and corresponding constraints. Our optimization formulation aims to minimize the cost of activating an optimal number of NFV nodes while finding energy-optimized and link quality-aware routes from source nodes to the sink via associated NFV nodes. The problem furthermore has the provisions for service-chaining, where a source node can demand services from VNFs on its routes towards a destination.

Network design: We assume that all available NFV nodes and corresponding service chains are already placed in the network’s optimal locations. Thus, in the proposed formulation, we need to activate an optimal number of NFV nodes and assign sources to those NFVs over energy and link quality-aware routes. Let us consider a graph  representing a network topology, where  be the network nodes (IoT nodes) and  be the set of edges connecting these nodes. We consider four types of nodes: sink , NFVs , sources  and intermediate relays , where  and . A source  generates traffic and intermediate relays  and an assigned NFV node  route that traffic towards the sink.


Table 1. The list of notations used in the formulation.

Notation	Description
Decision variable to activate an NFV node .
Budget for activating the NFV node
Cost of activating a NFV node .
Capacity of an NFV node .
Any demand of node  for service 
Energy threshold for a node .
Energy level of a node 
Set of service chains available
Any functions in the service chain set 
A link .
Set of all links.
Set of NFV nodes.
Set of relay nodes.
RSSI threshold value of a link 
RSSI value of a link 
Set of source nodes.
Sink node.
Availability of service  at node 
Set of all nodes.
Normalization or scaling factor.
Decision variable to assign a node  to .
Decision variable for a link  selection for the assignment of a node  to node .
Decision variable to assign a node  to node  and link selection .
We define the cost, , of activating an NFV node as the summation of energy associated with resource utilization (CPU and memory), i.e., processing and communication energy. There is a correlation between resource utilization and energy consumption (Fan et al., 2007, v. Kistowski et al., 2015). For example, when a controller first activates an NFV node, an energy cost is associated with that activation and communication. Also, after an NFV node is activated, it performs computation (e.g., aggregation) and communication (e.g., sends aggregated traffic). An NFV node’s capacity is , which denotes the maximum number of sources it can serve depending on the available resources at that NFV node. We define the budget of the entire network as  that indicates the maximum number of NFVs we can activate. The budget of the network should be set in a way that the set of active NFV nodes can serve all the source nodes. To this end, we define the budget in terms of the average capacity and the number of assigned sources, , i.e., 
 
.

The residual energy of a node  is denoted by  while the energy threshold is defined as . We consider the RSSI (Musaloiu-E and Terzis, 2008, Noda et al., 2011) value as an indicator of the link quality. The RSSI value of a link, , is denoted by  while the minimum RSSI threshold is denoted by . A summary of all the notation is presented in Table 1.

Also, we define a set of service-chains  consists of one or more services or VNFs available at the network. We consider all the VNFs in a service chain consolidated in a single NFV node to reduce the energy consumption and communication overhead. We define the availability of a service-chain  at an NFV node and the demand of a source for a service-chain as  and , respectively. Furthermore, an NFV node  can have multiple instances of a service chain if it has the available capacity. For example, in our design, an NFV node can support multiple instances of a service chain composed of aggregation functions if that NFV node has available capacity.

Decision variables:We also use the following three binary decision variables in the model.  decides if an NFV node  is activated or not while  takes care if a node  is assigned to , and  decides if a link  is selected for an assignment of  to .

Objective function:The objective function in (1) has two parts: the first part minimizes the activation cost of NFV nodes, and the second part calculates the assignment of sources to the activated NFV nodes via optimized routes. The route assignment considers minimizing the hop distance as well as maximizing the residual energy of the nodes along the constructed path.  and  are normalization factors to bring both the costs on the same scale. (1)

Constraints:Constraints in (2) guarantee that at least one NFV node is activated while constraints in (3) ensure that each source is assigned to exactly one NFV node. (4) confirms that sources are not assigned to a non-activated NFV, whereas constraints (5), (6) ensure that the assignment of sources to NFV nodes does not exceed the capacity of an NFV node and the total number of activated NFV nodes does not exceed the budget of the network, respectively. Constraints (7) ensure that an NFV node will not be activated if its activating cost is higher than its residual energy. (2)(3)(4)(5)(6)(7)

We offer service-chain provisioning based on the constraints (8) to (10). In particular, constraints (8), (9) say that each source must demand at least one service chain, and each NFV node must host at least one service-chain, respectively. The constraint in (10) assigns a source to an NFV node hosting the requested service chain. (8)(9)(10) (11)(12)

Constraints (11), (12) impose constraints on energy and link strength threshold, respectively, i.e., (11), (12) do not choose a link if the energy level of the end nodes and its link strength falls below a threshold, respectively.

The flow conservation along the paths from sources to the sink node via the assigned NFV nodes is preserved using constraints from (13) to (18). In particular, (13), (14) maintain links from sources to NFV nodes while (15), (16) are for links from NFV nodes to the sink, respectively. Finally, (17) maintains links for the relay nodes, and (18) ensures that there are no cycles in the constructed paths. (13)
(14)
(15)
(16)
(17)(18)
 Linearization:The optimization problem from (1) to (18) has a non-linear term (multiplication of two decision variables) in its objective function (1). Thus, we replace the multiplicative term of  and  with another decision variable . Then, we add three constraints to satisfy the equality . The new linearized formulation consists of (19) to (22). (19)(20)(21)(22)

In a nutshell, the above ILP formulation jointly optimizes the NFV node activation, assignment, and the energy and link quality-aware route construction towards the sink node. Such ILP formulation is proved to be NP-hard as discussed in these refereed works (Chu and Beasley, 1997, Giroire et al., 2010, Pourkabirian and Haghighat, 2007) and Awad et al. (2017). The energy-aware routes and the data aggregation at the NFV nodes optimize the overall network energy utilization to offer a better network lifetime and packet delivery ratio.

5. Proposed heuristic
We cannot quickly solve the proposed NP-hard problem and need a scalable solution for large IoT networks. Thus, we develop a heuristic Assignment and Path Selector (APS) in Algorithm 1.


Download : Download high-res image (482KB)
Download : Download full-size image
In APS , we assign sources to NFV nodes over constructed routes in such a way that the communication energy of the entire network and the activation cost of all NFV nodes is minimized. First, we compute shortest routes for  in terms of hop distance between a source and an NFV node. Then, we choose the two best routes out of three in minimizing communication energy (line 4), where the route with the best link quality becomes the primary route and the other one as the secondary route for the chosen source and NFV node (line 5). Next, we calculate the total assignment cost, i.e., the energy cost of the assigned routes and corresponding activation cost (CPU, memory, and energy) (line 6 to line 8) for the same pair. We repeat the process for all available NFV nodes for that chosen source and sort the corresponding list of NFV nodes in terms of minimizing the total assignment cost. Finally, we choose the best NFV node that minimizes the total assignment cost and has available service-chain and capacity in terms of resources (memory and CPU) (line 11 to line 18). We repeat the entire process for all source nodes (line 2 to line 20).

We now depict the correspondence between the proposed heuristic and the ILP problem. The first part of the objective function in (1) minimizes the total activation cost of the NFV nodes within the network budget and the capacity of NFV nodes, which is implemented from line 12 to line 16 in the APS algorithm. The second part of the objective function calculates and assigns optimal energy and link quality-aware routes from sources to NFVs within their capacity (implemented in line 11 to line 18). Thus, APS minimizes the total cost of activating the NFV nodes and communication energy of the network by constructing energy and link quality-aware routes from sources to those activated NFV nodes, which matches the ILP formulation.

Let us consider the ten node grid topology in Fig. 1 to illustrate the operation of the above heuristic. Suppose we want to assign the source node  to one of the two NFV nodes  and . We first calculate three-shortest paths, path1-, path2- and path3- (see Fig. 1(a)), from  to . We choose the best energy-cost two-shortest routes, where we discard path3 due to its largest energy cost (Fig. 1(b)). We set the two remaining routes as the primary and secondary routes based on their link quality, where path1 is the winner (see Fig. 1(c)) as the link  from path2 has the worst quality. We use the smallest number of hops to break a tie. We repeat the same process to construct routes from  to the remaining NFV node . Finally, we choose one of the NFV nodes that minimize both the route cost (communication energy consumption) and the NFV activation cost.


Download : Download high-res image (456KB)
Download : Download full-size image
Fig. 1. The illustration of heuristic steps.

Complexity analysis:Suppose there are  NFV nodes and  sources in a given network graph . APS computes -shortest (for ) routes from each  to each . The time complexity for to compute a -shortest from a source to an NFV is , which is  for  NFVs. Then, APS sort the set of NFV nodes based on the route and activation cost to choose the best one for the given source . We use quick sort with complexity . However, we argue that  is usually much smaller than ; thus, we consider the associated sorting cost constant. Finally, the entire process of route computation and NFV selection repeats for all  sources, which gives the final complexity of .

6. SoftIoT Design
This section presents SoftIoT architecture, where we first depict the proposed SDN/NFV-based node architecture. Then, we describe different functional modules of the SoftIoT control plane. We implement the proposed APS heuristic in this architecture.

6.1. SDN/NFV node architecture
We build our SDN/NFV enabled node on top of the IPv6 and RPL compatible SDN (Baddeley et al., 2018) node architecture as it reduces SDN control overhead and memory usage. The proposed node architecture is presented in Fig. 2. We introduce only two modules to SDN architecture: NFV Management Module (NMM) and Route Management Module (RMM). NMM allows the SDN controller to dynamically deploy appropriate VNF in an NFV enabled node. RMM maintains and manages routes from sources to the sink through the assigned NFV nodes. Thus, the sink and NFV nodes have the proposed SDN/NFV architecture, while the sources and the relay nodes can have the same architecture without the NMM module. In the following, we describe the operations of NMM and RMM modules.

NFV Management Module (NMM): The NMM consists of two components: VNF container and VNF manager. The VNF container maintains the available network function definitions, such as data aggregation. The VNF Manager manages the actual deployment, i.e., it provides an API to an NFV enabled node. It also maintains available service chains. Thus, any desired network function can be defined in the proposed SDN/NFV node architecture, and corresponding functions can be maintained in the cloud. The controller can dynamically load a function to an NFV enabled node as per the application demand. In our design, an NFV enabled node maintains available VNF definitions in its container, where each VNF has a unique ID. The controller uses this ID to activate a required VNF, i.e., the VNF manager activates the requested VNF after receiving an NFV-CONF control message from the controller.


Download : Download high-res image (250KB)
Download : Download full-size image
Fig. 2. The SDN/NFV enabled node architecture.

Route Management Module (RMM): The RMM module maintains the energy and link-state information of nodes’ neighbors in a state table. RMM at the relay nodes (NFV and non-NFV) can periodically share this state table with the SDN controller. The controller can also poll this state table as per its demand. The controller uses this state information to activate an optimal number of NFV nodes as well as constructs corresponding energy and link quality-aware routes. RMM also maintains these configured routes in the associated flow table.

6.2. The functional modules of SoftIoT
In the proposed design, we deploy the SDN controller at the sink. The controller uses five control packets: Node-state update (NSU), Flow table query (FTQ), Flow table set (FTS), Configuration (CONF), and NFV configuration (NFV-CONF). It also uses RPL control messages. The controller uses all these control messages to configure SDN/NFV enabled nodes as per the network policy. We present different functional modules (Fig. 3) of the controller below.

Topology discovery:This module uses RPL messages to construct and maintain the routing topology, where a node uses the RPL DAO message to connect to the controller. It then updates its state table and sends back a CONF message to the requesting nodes with various configuration metrics (e.g., NSU timer, frequency). The CONF message is an acknowledgment of the successful controller join operation. Nodes use SDN control message NSU to share their status (e.g., energy-level, link quality, neighbors, etc.) with the controller either on-demand (e.g., at the beginning of joining the routing topology or in the case of a local state change) or periodically. The controller uses this information to maintain and update the routing topology. The CONF and the initial NSU messages are shown in Fig. 4.


Download : Download high-res image (195KB)
Download : Download full-size image
Fig. 3. Functional modules of the proposed SDN/NFV architecture.

Route construction and NFV node activation: This module first runs the APS heuristic on the constructed routing topology to decide which NFV nodes will be activated and the corresponding routes from sources. The RMM module at the controller store the generated routes. The controller then initiates the NFV-CONF message to activate the VNF (data aggregation) at the chosen NFV nodes and informs sources about their assigned NFV nodes. Once sources have sensed data to send to the sink, they generate FTQ messages for the controller and receive two flow table entries (primary and secondary) over FTS messages. Sources use those entries to send the data to the next-hop neighbor (relay).

The intermediate relays use source-routing to avoid additional control traffic, i.e., use the Source-Routing Header (SRH) of a packet to forward it to the next-hop. Though source routing can avoid control traffic, it may add overhead on the packet-size in large networks (having long routes), which can be alleviated by deploying multiple controllers, each taking care of a subset of nodes. NFV nodes, on the other hand, aggregates the received packets once their buffer gets full. These nodes also use FTQ messages to get flow-table entries over FTS messages and maintain the entries in the RMM module. The NFV-CONF, FTQ, and FTS messages are shown in Fig. 4.

Network reconfiguration: In the case of a network state change, the controller uses DRS Algorithm 2 to reconfigure the network. DRS invokes the APS algorithm based on the current network state (line 3 to line 10) to get the new set of NFV nodes and corresponding routes assignment. In particular, the controller can invoke the APS algorithm if any (some) nodes have residual energy less than the threshold value or the RSSI value of some link falls below a given threshold (line 9 to line 7). In the current implementation, the controller invokes the reconfiguration if any NFV nodes get out of energy or a certain number of sources get disconnected from the assigned NFV nodes due to the topology change.

Workflow of SoftIoT In the above two sections, we have presented the SoftIoT node architecture and different functional modules of the control plan to configure the data plane devices. Then, data traffic is ready to flow, and we illustrate that operation in Fig. 5. Source  has two alternative routes; it starts sending data over the assigned primary route. After sending a pre-configured number of data packets, it switches to the secondary path. On the other hand, relays  extract the packet and generate an RPL routing packet using the non-storing mode, i.e., source routing, and forward it to the next-hop node, which in this example is the NFV node . NFV node waits until its buffer gets full, then it performs the data aggregation and uses its installed flow rules to forward the packet to  through the relays.

7. Evaluation setup
In this section, we describe the evaluation setup for the ILP model and corresponding heuristic, where we consider the following performance metrics.

•
Communication energy consumption (mJ): is the total energy consumed for a successful data packet transmission.

•
Packet delivery ratio (PDR): is the ratio of the total number of successfully delivered packets over the generated packets.

•
Control overhead: is the total number of control packets that nodes exchange in a given time period.

In the evaluation, IoT devices form either a grid or random topology, where a device consists of TI’s MSP430F5438 CPU and CC2420 radio (Baddeley et al., 2018). We consider a coin-type lithium-ion battery with 3 V and 150 mA-h power rating for the power supply (Anon., 0000a). We have found that the successful transmission of a packet needs 40 mj of communication energy. Thus, we declare that a node is unable to do any further transmissions if its energy level reaches 40 mj. The link quality is measured in terms of its strength following TI’s datasheet, where the threshold is -45 dbm including RSSI offset (Konings et al., 2017).

We solve the proposed ILP model using CPLEX in a 20 node random topology with three NFVs and six sources, where each source generates 100 data packets. We calculate the number of activated NFV nodes by varying the number of sources and the capacity of an NFV node. We also calculate the average hop distance from the sources to the assigned NFV nodes by changing the activation cost. We furthermore measure the distribution of the residual energy of the nodes.

Next, we evaluate the proposed architecture and protocol in the Cooja simulator running on the Contiki OS and compare the outcome with SDN and SDN-WISE. We consider 40 node grid and random topologies, where the controller is deployed at the sink. Also, there are five NFV and ten sources communicating over the remaining relay nodes. In the case of the grid topology, we change the locations of the NFV, sink, and other nodes in each run to create different topologies. In another set of evaluations, we vary the topology size from 10 to 40 nodes, where we use the maximum possible hop distance between sources and destinations and measure the energy consumption and PDR with varying traffic loads. We consider low packet rate to emulate the low-power and low-rate environment (e.g., smart farming), which is also useful to avoid excessive energy and interference. In particular, we use two to six packets per minute following existing standards (Baddeley et al., 2018, Schußet al., 2018).

The buffer size at the NFV nodes is ten packets, i.e., an NFV node aggregates received packets after the buffer gets full and sends to the sink. The sources also use this NFV buffer size to alternate between primary and secondary routes towards an NFV node to distribute load and energy utilization. After initialization, the controller invokes reconfiguration if a node’s energy level (set of nodes) along the routes between sources and the sink falls below the energy threshold and impacts the network topology. We also analyze the control overhead of the proposed protocol. We assign sources to the nearest NFV nodes in the case of SoftIoT without energy optimization. We run the evaluation 50 times to get the average with a 95% confidence interval. The heuristic evaluation parameters are listed in Table 2.


Table 2. The list of parameters used in the evaluation.

Parameter	Settings
Duration	10 min
MAC layer	ContikiMAC
Transmission range	100 m
Interference range	100 m
Max packet rate	6 packets/min
Link quality	90%
Radio medium	UDGM (distance loss)
RPL mode	Non-Storing
RPL route Lifetime	5 min
Flowtable lifetime	10 min
8. Discussion on results
We implement SoftIoT as a native C application on top of the ATOM controller (Baddeley et al., 2018), which is a customized SDN controller for low-power IoT networks. The source code and the detailed process of reproduction of results are provided in Saha et al. (2020a). In this section, we present and discuss the evaluation results of the proposed model and SoftIoT prototype.

8.1. Model evaluation
In Fig. 6, we show the effect of the capacity of NFV nodes and the number of sources on the number of activated NFV nodes. We observe that the number of activated NFV nodes decreases with the increasing capacity for a given number of sources because an NFV node can accommodate more service chains to serve more sources. However, we need to activate more NFV nodes if the number of sources increases for a given capacity of NFV nodes. Thus, the model will activate a required number of NFV nodes of a certain capacity to satisfy the demand of sources given a network budget.

We show the effect of NFV activation cost on the average hop distance between sources to the sink in Fig. 7. The activation cost of an NFV node is proportional to the available energy with a power rating of 150 mA-h and 3 V. We increase the activation cost from 10% to 50% of the energy to observe its impact on the hop distance from sources to the sink. The number of activated NFV nodes decreases with the increasing activation cost, which in turn assigns the sources to NFV nodes over a longer distance. In particular, sources compete for the NFV nodes that minimize both the communication energy and activation cost. However, with the increased activation cost, sources follow the next available NFV over longer routes. Thus, the model will guide the network providers to decide on their budget and NFV resources to meet the sources’ demand.


Download : Download high-res image (212KB)
Download : Download full-size image
Fig. 6. The number of activated NFV nodes.


Download : Download high-res image (129KB)
Download : Download full-size image
Fig. 7. The change in hop distances.

8.2. Heuristic evaluation
We investigate the energy distribution, transmission energy consumption, and PDR of SoftIoT both on grid and random topologies.

Grid topology: The impact of hop distances between sources and the sink in the grid topology is illustrated in Fig. 9. In particular, we present the impact on average communication energy consumption of data traffic in Fig. 9(a). The results confirm that SoftIoT outperforms the other schemes, whereas SDN-WISE has the worst performance. SDN and SoftIoT without optimization are in-between. SDN-WISE does not offer any optimization on the protocol stack or communication energy consumption. Furthermore, it creates high interference near the sink because of not using an aggregator, which is also the case in SDN. SDN, however, optimizes the RPL and IPv6 protocol stack and has a better performance compared to SDN-WISE. SoftIoT without optimization further improves the performance by deploying NFV nodes, which reduces the number of traffic flows near the sink. However, the solution still falls behind SoftIoT because of not having any communication energy optimization. The distribution of the data traffic over two energy and interference-aware routes, along with the data aggregation, helps SoftIoT to achieve the best performance. In particular, it improves the communication energy consumption by 40% and 60% compared to SDN and SDN-WISE, respectively.

We present the average PDR in Fig. 9(b), where the performance trend is similar to that of Fig. 9(a) as expected. SoftIoT offers 36% and 58% better performance compared to SDN and SDN-WISE, respectively. In SDN and SDN-WISE, packets close to the sink have a higher probability of experiencing interference, which results in large packet drops. The energy and link quality-aware route constructions help SoftIoT to have a higher network lifetime that ensures higher PDR compared to the other schemes. Also, SoftIoT alternates between two routes to distribute load and energy. Finally, the data aggregation reduces the number of packets near the sink to reduce the scope of interference. Thus, the deployment of NFV nodes shows a clear benefit of achieving high PDR.

We present the communication energy distribution in Fig. 10(a), where the energy consumption of SoftIoT reaches saturation quite slowly compared to others, i.e., it offers a better network lifetime. SDN-WISE has the worst distribution. We further investigate the distribution of the residual energy of all nodes in Fig. 10(b). It is evident that SoftIoT enables the nodes to conserve more energy because of constructing energy and link quality-aware routes and data aggregation.


Download : Download high-res image (283KB)
Download : Download full-size image
Fig. 9. The average communication energy consumption (a) and PDR (b).

The effect of loads and topology size: In this evaluation, we consider source–destination pairs separated by the longest hop distance to measure the impact of traffic loads and topology size. Fig. 11(a) illustrates the average communication energy consumption, where increasing the load increases the energy consumption in all schemes. As the load increases, relay nodes need to carry more traffic, and without appropriate energy distribution, they may get out of energy quickly. SoftIoT takes care of that unexpected situation and offers the best performance, 1.38× and 1.59× better than SDN and SDN-WISE, respectively. Also, this improvement is prominent at higher loads makes SoftIoT the appropriate candidate for IoT networks with high loads. We show the average packet delivery ratio in the same setup in Fig. 11(b), which follows the same performance trend, i.e., packets get dropped with the increasing load. When a large number of packets flow through the network, the chance of interference increases and impacts the PDR.


Download : Download high-res image (304KB)
Download : Download full-size image
Fig. 10. The distribution of communication energy consumption (a) and residual energy (b).

In the final evaluation of this set, we change the topology size and consider the longest possible hop-distance to measure energy consumption and PDR, which is shown in Fig. 12. The communication energy consumption increases with the increasing network size as packets need to travel longer routes. Also, the chance of experiencing interference is high in long routes, which impacts the PDR. However, SoftIoT takes care of both the energy distribution and interference management along with the data aggregation to offer the best performance. The performance trend is similar in random topologies; thus, we do not include those results to make the paper concise.


Download : Download high-res image (284KB)
Download : Download full-size image
Fig. 11. The impact of traffic loads on the average communication energy consumption (a) and PDR (b).

8.3. Control overhead analysis
In this section, we perform a detailed control overhead analysis of the four SDN-based protocols. The purpose of this analysis is to reveal the trade-off between performance and overhead in programmable networking. We consider the 40 node grid topology with five source nodes and three NFV nodes and measure the control overhead from four phases: Initialization, Route Configuration, Topology Maintenance, and Update. The initialization phase includes control traffic from topology discovery and node configuration (e.g., as a source or NFV). Control traffic for flow rule installation is part of the route configuration phase, whereas the topology maintenance phase includes all control traffics to maintain the routing topology. The network reconfiguration traffic belongs to the update phase. Table 3 presents the number of control packets from each of these phases except the topology maintenance phase as it is the same for all comparing schemes.

In the initialization phase, SDN-WISE uses the lowest number of control packets, whereas NFV based protocols need the highest number of packets. In particular, SDN-WISE uses two rounds of control packets: one from the controller and the other one towards the controller from all nodes. NFV based two protocols, on the other hand, exchange additional CONF, NFV-CONF, and NSU messages to configure the NFV functionalities. In the case of route configuration, the behavior completely inverts between SDN-WISE and the remaining protocols. Unlike SDN-WISE, the other three protocols deploy source-routing in relay nodes to reduce the control overhead, which is apparent from Table 3.

NFV based protocols and SDN reduce almost one-third and one-fourth of the control traffic compared to SDN-WISE, respectively. During the topology maintenance phase, all four protocols use the same number of control messages at the same exchange rate. Again, in the update phase, SDN-WISE uses the highest number of control packets because it needs to update all flow-table entries both at the sources and relays to accommodate the network state change. The remaining three protocols, however, reduce the control packets significantly by deploying source-routing at the relays, where NFV based schemes have a slightly higher number of control packets because of the NFV nodes configuration. Thus, we conclude that NFV based protocols utilize a similar number of control packets compared to SDN-WISE and SDN while offering significantly better energy utilization, network lifetime, and PDR.

We also observe that the control overhead highly depends on the size of the network topology as well as the distribution of the role of the network nodes (source, relay, or NFV). Suppose , , and  be the number of NFVs, sources, and relays, respectively. At each operational phase, the number of control messages is directly proportional to the number of , , and . As the number of sources and NFV nodes is usually much smaller compared to the relay nodes, the control overhead at each phase can be expressed as the function of  or . Furthermore, if the size of the network increases, the number of relays; hence the overall control overhead increases. Thus, a thoughtful design like using source-routing along with other protocol optimization can help to reduce the control overhead significantly, which is apparent from the above analysis.


Table 3. The comparison of control overhead.

Protocol	Initialization	Route config.	Update
(packets)	(packets)	(packets)
SDN-WISE	80	40	40
SDN	120	10	10
SoftIoT (w/o Opti.)	128	16	24
SoftIoT	128	16	24
8.4. Network reconfiguration
In this evaluation, we demonstrate the benefits of network programmability to dynamically reconfigure data plane elements in response to network state change. We only evaluate SoftIoT as it outperforms other protocols. In Fig. 13, we show the change in packet delivery ratio of SoftIoT with and without invoking network reconfiguration when an NFV node gets out of energy. Failure of an NFV node is a critical event; thus, the controller immediately invokes the network reconfiguration. We observe an immediate drop in the average PDR after the NFV node failure. In reconfiguration, SoftIoT catches up with the packet delivery after the configuration (assigning a new NFV) is over. Next, we consider the failure of a set of relays to initiate the reconfiguration. We first find the reconfiguration point that balances between the performance (PDR) and cost (control overhead) based on the number of affected sources (20%) because of the failure of one or more relays. Then, we observe a similar performance trend of SoftIoT as in Fig. 13, which we do not include due to the space limit.

In the second evaluation, we consider the failure of relay nodes, which can impact several sources. First, we investigate the variation in PDR (Fig. 14(a)) with the number of affected sources when one or more relay nodes fail. The PDR starts decreasing with the increasing number of affected sources as expected. However, we observe a tradeoff between the PDR and generated control traffic. If we want to reduce the drop in PDR, we need to initiate the network reconfiguration as frequently as possible, which will incur additional control traffic. Thus, we find a balance between the performance and cost (control overhead) to initiate the reconfiguration in the case of relay nodes failure. The reconfiguration point is 20% affected sources, where one or more relays can fail. We present the effect of reconfiguration on PDR in Fig. 14(b), The performance trend of SoftIoT with and without network reconfiguration is similar to that of Fig. 13. Thus, we conclude that an SDN/NFV based IoT network design must take advantage of network programmability to achieve better network performance, configuration, and management compared to traditional designs.


Download : Download high-res image (120KB)
Download : Download full-size image
Fig. 13. The average PDR with an NFV node failure.


Download : Download high-res image (206KB)
Download : Download full-size image
Fig. 14. The average PDR after relay nodes failure with affected sources (a) and with and without reconfiguration (b).

8.5. A case study using real sensed data
Our heuristic evaluations follow that data generate rate at Table 2 to generate a range of temperature data at the traffic sources. In this evaluation, we use a temperature dataset collected from WSU CASAS smart home over two years (Anon., 0000b). The data is gathered from temperature sensors every 5 min, where the sensor is compatible with TI’s MSP430 CPU that we use in the Cooja (Anon., 0000a). The data collected from those sensors demand energy, which can significantly be reduced, constructing energy and interference-aware routes. Also, the aggregated temperature is acceptable in the above application, which further reduces energy consumption.

Thus, we inject this real dataset into our prototype and measure the corresponding outcome for all the four schemes described above. The results are presented in Fig. 15(a). The performance trend on the real dataset again matches the results from the Cooja simulator, i.e., SoftIoT outperforms other schemes.

8.6. Discussion
In this section, we discuss some of the possible future extensions of SoftIoT.

Real-testbed Implementation. We use the Contiki OS-based Cooja simulator to emulate real network conditions, where IoT devices have processors and radio from Texas Instruments. Then, we tested the SoftIoT prototype using both simulated and actual sensor data from a smart home. The results offered a similar performance trend. As the next step, we will export the SoftIoT implementation to real hardware, i.e., deploy a testbed to evaluate SoftIoT.

VNF deployment. In the current implementation, we deploy a single VNF, data aggregation, to reduce the traffic volume, hence, the communication energy consumption of the network. However, SoftIoT can accommodate any number of VNFs in a node, where different service chains can be developed to render services to the users. In the future, we plan to test that functionality.

9. Conclusion
We have proposed SoftIoT, an SDN/NFV based IoT network system with NFV service-chaining provision. We have formulated an ILP problem to activate a number of NFV nodes and assign sources to them over link quality and energy-aware routes such that the total activation cost and communication energy consumption of the network is minimized. Then, we have developed a heuristic for large IoT networks as the proposed ILP problem is NP-hard. We have also designed an SDN/NFV enabled IoT node architecture to deploy the proposed service-chaining and protocols. We have solved the ILP problem using CPLEX solver and implemented and evaluated the SoftIoT prototype using the Cooja simulator based on the Contiki OS. The evaluation results have revealed that the SoftIoT outperforms state-of-the-art solutions in communication energy consumption, network lifetime, PDR, and control overhead. We have also demonstrated that the proposed design can dynamically cope with network state changes to offer better network performance.