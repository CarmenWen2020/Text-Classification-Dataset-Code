Providing a high-performance Intrusion Detection System (IDS) can be very effective in controlling malicious behaviors and cyber-attacks. Regarding the ever-growing negative impacts of the security attacks on computer systems and networks, various Artificial Intelligence (AI)-based techniques have been used to introduce versatile IDS approaches. Deep learning is a branch of AI techniques, mainly based on multi-layer artificial neural networks. Recently, deep learning techniques have gained momentum in the intrusion detection domain and several IDS approaches are provided in the literature using various deep neural networks to deal with privacy concerns and security threats. For this purpose, this article focuses on the deep IDS approaches and investigates how deep learning networks are employed by different approaches in different steps of the intrusion detection process to achieve better results. It classifies the studied IDS schemes regarding the deep learning networks utilized in them and describes their main contributions and capabilities. Besides, in each category, their main features such as evaluated metrics, datasets, simulators, and environments are compared. Also, a comparison of the deep IDS approaches main properties are provided to illuminate the main techniques applied in them as well as the area less focused in the literature. Finally, the concluding remarks in the deep IDS context are provided and possible directions at the subsequent studies are listed.

Previous
Keywords
Intrusion detection

Deep learning

Auto-encoder

CNN

DNN

GAN

LSTM

1. Introduction
Cyber-space threats are one of the significant issues that information technology-based organizations should deal with them (Von Solms and Van Niekerk, 2013). Generally, the security attacks often attempt aimed to gain unauthorized access to the critical data in the information systems and then modify, expose, or use them (AbdAllah et al., 2018). Also, some of the security attacks denoted as Distributed Denial of Service (DDoS) attacks (Masdari and Jalali, 2016), may attempt to disrupt the normal functioning of the computer systems and make them inaccessible to the other users and systems (Khalaf et al., 2019; Mahjabin et al., 2017). Therefore, regarding the ever-increasing ferocity and diversity of cybersecurity attacks, providing efficient and effective techniques to harness them seems to be essential. Fig. 1 indicates the malware infection growth rate between 2009 and 2018. In these statistics, all malicious software pieces such as spyware, Trojans, worms, computer viruses, ransomware are considered Malware.

Fig. 1
Download : Download high-res image (175KB)
Download : Download full-size image
Fig. 1. Malware infection growth rate (Vulnerabilities, 2021).

IDS are one of the key components of the security infrastructure that can deter cyber threats coming from various types of attackers. Various kinds of IDS schemes have been provided in the security literature. In this context, regarding the environment which should be IDS scheme protect, they can be classified as host IDS (Bridges et al., 2019) and network IDS (Sultana et al., 2019) approaches, in which the former intends to secure a computer system by monitoring all events and incoming/outgoing traffics and the latter is going to monitor and secure the whole computer network. Also, network-based IDS schemes are categorized into flow-based solutions (Sperotto et al., 2010; Umer et al., 2017), deep packet inspection schemes (Ren et al., 2020) in which the flow-based approaches only check the packets header data, but deep inspection schemes. Besides, based on their detection capability, IDS approaches are classified as signature detection and anomaly detection approaches (Aldweesh et al., 2020).

Typically, the signature-based IDS benefit from a predefined database of security attacks’ signatures and try to match the events and traffic to the specific attack patterns (Masdari and Khezri, 2020a). However, the signature-based IDS schemes cannot detect new attacks in which their pattern and signature are unknown. On the other hand, anomaly-based IDS approaches attempt to learn the normal behaviors and recognize everything else as anomaly or intrusion (Masdari and Khezri, 2021). Nonetheless, they suffer from the false positive problem that restricts their application.

One factor that has a direct impact on the effectiveness of the IDS approaches is the availability of the label datasets. Although having such datasets are costly, it increases the accuracy of the IDS schemes. Thus, when a fully labeled dataset is available, the supervised learning methods can be used which provides more accurate results. On the other hand, when a subset of the dataset is labeled, the semi-supervised learning methods seem to be applicable (Ashfaq et al., 2017). At last, when no labeled data is available the unsupervised learning methods should be used, at the cost of less accuracy and high false positives.

Many IDS schemes are presented in the literature using various machine learning methods to automatically recognize normal and abnormal events happening in the systems and networks. However, despite many efforts conducted in the intrusion detection context, the existing IDS approaches still suffer from a high false-positive rate and low detecting rate. For mitigating these issues, deep learning, a subset of the machine learning methods, has been extensively incorporated for dealing with various kinds of intrusions and security problems in different environments and increasing cyberspace security. Deep learning can model complex architectures data for performing various non-linear data transformations and recognizing some patterns in data with several neural network architectures. More specifically, deep learning is based on artificial neural networks(ANNs) that use multiple hidden layers for transforming data and have stronger learning capability (Pouyanfar et al., 2018). Several deep learning networks such as Deep Belief Networks (DBNs), Deep Neural Networks (DNNs), Convolutional Neural Networks (CNNs), Generative adversarial networks (GANs), and Recurrent Neural Networks (RNNs) are provided which have been widely employed in different application domains as well as security and intrusion detection contexts (Wang et al., 2019a; Alom et al., 2019; Bu and Cho, 2020). Deep learning networks can benefit from supervised, semi-supervised, or unsupervised learning methods. However, as an advantage, when there is a large labeled dataset for training the deep learning models, they provide results with high accuracy. Besides, deep learning supports incremental learning and can extract new features from the training data samples.

This article is going to provide a comprehensive survey and classification of the IDS approaches incorporating one or more deep learning techniques. To be more effective, it first provides a brief overview of the deep learning networks to illuminate their structure and capabilities. It provides a taxonomy of the deep IDS approaches considering the type of deep network incorporated in them which have been used for feature selection/extraction step or in the classification step. Besides, in each section, the intrusion detection steps conducted by the investigated schemes are described as well as their possible shortcoming and limitations. Also, to provide more insight about the studied intrusion detection approach their main properties such as evaluation metrics, applied IDS datasets, and classifiers are compared. Furthermore, a comprehensive comparison of the techniques and components, applied by all studied IDS approaches, is presented at the end of this article to illuminate the primary methods which are beneficial to build deep IDS schemes.

•
Illustrating different variants of deep learning networks, describing their architecture and capabilities.

•
Providing a classification of the studied intrusion detection and anomaly detection approaches, utilizing one or more deep learning networks. Describing some of the remarkable IDS schemes that have effectively incorporated the deep learning networks to extract features or conduct classification on the applied or collected dataset.

•
Comparing various features and issues regarding the deep IDS schemes, providing valuable insight into the datasets, classifiers, features selection/extraction method, and evaluation metrics.

•
Discussing possible future trends in the deep intrusion context and illuminating the topics that can be further investigated and focused on to enhance the performance of deep intrusion detection.

The remaining of this deep learning survey is organized as follows: Section 2 presents the research steps performed for conducting this survey, and Section 3 briefly clarifies the deep learning networks. Section 4 provides a classification of the investigated IDS approaches regarding the deep learning method used in them to boost the intrusion detection process. Section 5 presents the discussion section and comparison results, while section 6 gives the concluding issues and ongoing challenges in the deep learning-based intrusion detection context.

2. Research method
For conducting this study a systematic approach has been applied, which this section is aimed to elaborate this process.

Fig. 2 indicates the research method employed in this scheme. As shown in this figure, several research questions are specified regarding the deep learning-based intrusion detection schemes; these questions indicate the topics that will be covered in this survey. Table 1 indicates the main research questions and demonstrates the need for each question. Then, according to some of the specified questions, several keywords are determined for searching the deep learning-based IDS schemes and the number of search terms is determined based on these keywords to find the related articles. Mainly, these search terms are aimed to find different types of deep learning networks that benefited to conduct intrusion detection, anomaly intrusion detection, or both. After search terms are determined, some of the scientific libraries are selected to search for the necessary articles. Fig. 1 exhibits the scientific libraries that benefited to conduct this study. Since this article is aimed to conduct a comprehensive survey on the deep learning-based approaches, many searches have been conducted to find the required surveys and intrusion detection approaches and in this process, the scientific libraries indicated in Fig. 3 are applied. At first, for finding the survey articles about the intrusion detection and anomaly intrusion detection articles, we have applied the following search terms:

•
Intrusion Detection Survey

•
Intrusion Detection Overview

•
Intrusion Detection Comparative Study

•
Intrusion Detection literature Review

•
Intrusion Detection Comparison

•
Anomaly Detection Survey

•
Anomaly Detection Overview

•
Anomaly Detection Comparative Study

•
Anomaly Detection literature Review

•
Anomaly Detection Comparison

•
Anomaly Detection systematic study

Fig. 2
Download : Download high-res image (215KB)
Download : Download full-size image
Fig. 2. Research steps.


Table 1. Research questions.

Index	Question	Reason
1	Which kind of deep learning networks are applied by each IDS scheme?	The response to this question determines which deep learning method is appropriate for which step of the intrusion detection process.
2	How deep learning techniques are applied to effectively conduct feature selection or feature extraction?	Selecting the minimum set of features has a direct impact on the performance, training delay, and testing delay of intrusion detection. This question identifies the deep learning networks applied in combination with the proposed schemes and their contributions towards the feature selection/extraction step.
3	What kinds of classifiers are used in combination with the deep learning techniques in the intrusion detection schemes?	Determines the deep learning networks which have been used for classification purpose. Also, some schemes have integrated deep and shallow learning methods. More specifically, they have applied deep learning in feature extraction/selection or xx, while using shallow methods for classification.
4	What kinds of datasets are used by the intrusion detection scheme?	This question illuminates the intrusion detection datasets used by each scheme to conduct the required evaluations.
5	Which evaluation metrics have been employed in the studied intrusion detection scheme?	This determined the metrics that are primarily incorporated to verify the deep learning-based IDS schemes.
6	What are the advantages and shortcomings of each deep learning-based IDS scheme?	The response to this question determines the main benefits achieved by the IDS schemes and highlights the shortcomings that they suffer.
Fig. 3
Download : Download high-res image (339KB)
Download : Download full-size image
Fig. 3. Applied scientific libraries.

Several articles such as (Fernandes et al., 2019) are extracted from searching these terms, which appropriate references are made in this article's introduction section. Some of these review papers have focused on the intrusion detection approaches that use classifiers such as deep learning (Kwon et al., 2019a; Chalapathy and Chawla, 2019), random forest (Resende and Drummond, 2018), SVM (Hosseinzadeh et al., 2020), ensemble (Folino and Sabatino, 2016), etc. In contrast, others have addressed all data mining and machine learning techniques. Some of them studied the intrusion detection solutions designed for particular environments such as mobile ad hoc networks (Soni et al., 2015; Khan et al., 2020; Nadeem and Howarth, 2013), sensor networks (Butun et al., 2013), cloud computing (Mishra et al., 2017; Keegan et al., 2016; Patel et al., 2013), Software Defined Networking(SDN) (Jafarian et al., 2020; Hande and Muddana, 2020), Internet of Things(IoT) (Zarpelão et al., 2017; da Costa et al., 2019; Thamilarasu and Chawla, 2019; Chaabouni et al., 2019), etc. Some surveys have focused on network intrusion detections, and some surveys have addressed host-based intrusion detections. Also, for searching the published survey articles in the deep learning context, the following search terms are used:

•
Intrusion Detection Deep Learning Survey

•
Intrusion Detection Deep Learning Overview

•
Intrusion Detection Deep Learning Comparative Study

•
Intrusion Detection Deep Learning literature Review

•
Intrusion Detection Deep Learning Comparison

•
Anomaly Intrusion Detection Deep Learning Survey

•
Anomaly Intrusion Detection Deep Learning Overview

•
Anomaly Intrusion Detection Deep Learning Comparative Study

•
Anomaly Intrusion Detection Deep Learning literature Review

•
Anomaly Intrusion Detection Deep Learning Comparison

•
Anomaly Intrusion Detection Deep Learning systematic study

By using these items several surveys (Hodo et al., 2017) based on deep learning are found for anomaly detection (Kwon et al., 2019b), where some of them are discussing the intrusion detection approaches designed for special environments such as Internet-of-Things (Idrissi et al., 2020; Asharf et al., 2020), VANET, DBN (Sohn, 2020), deep generative networks (Yadav and Kalpana, 2021; Dutta et al., 2020), some of them only study the network intrusion detection, and the rest try to cover all proposed schemes.

•
Intrusion Detection Deep Learning

•
Intrusion Detection LSTM

•
Intrusion Detection Long Short-Term Memory

•
Intrusion Detection CNN

•
Intrusion Detection Convolutional neural network

•
Intrusion Detection Restricted Boltzmann Machine

•
Intrusion Detection Boltzmann Machine

•
Intrusion Detection RBM

•
Intrusion Detection Recurrent neural network

•
Intrusion Detection RNN

•
Intrusion detection auto-encoder

•
Intrusion detection auto-encoder

•
Intrusion detection AE

•
Intrusion Detection GAN

•
Intrusion Detection Generative Adversarial Network

•
Intrusion Detection Deep belief network

•
Intrusion Detection DBN

•
Anomaly Detection Deep Learning

•
Anomaly Detection LSTM

•
Anomaly Detection Long Short-Term Memory

•
Anomaly Detection CNN

•
Anomaly Detection Convolutional neural network

•
Anomaly Detection Restricted Boltzmann Machine

•
Anomaly Detection Boltzmann Machine

•
Anomaly Detection RBM

•
Anomaly Detection Recurrent neural network

•
Anomaly Detection RNN

•
Anomaly Detection auto-encoder

•
Anomaly Detection auto-encoder

•
Anomaly Detection AE

•
Anomaly Detection GAN

•
Anomaly Detection Generative Adversarial Network

•
Anomaly Detection Deep belief network

•
Anomaly Detection DBN

By using these search strings many articles have been found, which only a subset of them are useful. Therefore, by performing a quality assessment process, documents such as thesis files and low-quality journal articles and conference papers are not further processed. For performing the quality assessment these issues are considered:

•
Is the article allocated for intrusion detection in computer systems and networks?

•
Does the article have any prominent contribution in the intrusion detection context?

•
Is a comprehensive set of experiments applied to verify the proposed intrusion detection solution?

3. Background knowledge
This section discusses the various deep learning networks and IDS datasets employed by the studied IDS schemes.

3.1. Deep learning
Generally, machine learning is a subset of artificial intelligence and deep learning is a subset of machine learning techniques. Deep learning networks are constructed from several connected layers, in which the first one is called the input layer, the last one is denoted as output layer, and all layers between are called hidden layers. Each of the hidden layers consists of several neurons, in which the signal strength of a neuron depends on the factors such as bias, weight, and the activation function. Table 2 presents the comparison of the deep learning and machine learning techniques (Sarker et al., 2020), highlighting their main differences(Xin et al., 2018; Ferrag et al., 2020; Sarker, 2021; Geetha and Thilagam, 2020). However, the important issue in both methods is the quality of the data and it determines the quality of the final result.


Table 2. Comparison of the deep learning and machine learning techniques.

Item	Deep Learning	Machine Learning
1	Deep learning networks need a large dataset for training.	Machine learning methods can be trained with small datasets.
2	Deep learning networks can learn features from the raw data.	External intervention is necessary to provide the right input.
3	Deep learning networks do not require human intervention.	Machine learning algorithms need to be retrained through human intervention.
4	Regarding the overheads of the deep learning methods, they are more appropriate for dealing with large-scale problems.	Because machine learning needs labeled data, it is not appropriate for handling large-scale problems that need a large set of labeled data.
5	Solving large-scale problems using high-end computer systems or special hardware such as Graphics Processing Unit (GPU) can increase the performance of the deep learning algorithms.	Machine learning algorithms can be handled using CPU on low-end computer systems.
6	Deep learning networks require more execution time.	Machine learning techniques need less time for execution.
7	The problem solving using deep learning methods, based on multi-layered ANNs, are more intertwined and complex.	The problem solving using machine learning such as decision tree and linear regression, benefit from a simple structure and is much easier to interpret.
8	The output of the deep learning methods can be in various forms.	The output of the machine learning techniques is in numerical form.
3.1.1. DBMs
A DBM or deep Boltzmann machine is a kind of Markov random field. It is an undirected probabilistic graphical model that contains one visible layer and several hidden layers. A DBM learns the input's complex internal representations using few labeled data for fine-tuning the representation created with a set of unlabeled input. The DBMs support top-down or bottom-up training and inference procedures, allowing them to find the input's representations. Nonetheless, the DBMs' slow speed may limit their functionality and performance (Salakhutdinov and Hinton, 2009; Zhang et al., 2018a).

3.1.2. Auto-encoder
Auto-encoders are feed-forward ANNs in which the number of neurons in the input layer and output layers are the same. An Auto-encoder can also have several hidden layers and it builds its inputs aiming to minimize the difference between the output and the input. Furthermore, each auto-encoder has two steps: an encoder for mapping the input data into the code, and a decoder for constructing input data from the code. More specifically, auto-encoders support unsupervised learning of dataset encoding for dimensionality reduction, by training the network to ignore the signal noise (Tschannen et al., 2018).

3.1.3. DBNs
DBNs are probabilistic generative models, consisting of several stacked RBM modules. In a DBN, the output of each RBM is used as input of the subsequent RBM. Besides, neurons of the DBN layers have connections to the next layer, but not to the neurons in the same layer. DBNs can solve the ANNs training problems and prevents problems such as falling in a local minimum, slow training and needing for a large training dataset. DBNs are applied in different domains such as speech recognition, image identification, natural language processing, and intrusion detection. These deep learning networks have good capabilities in classification and feature learning (Keyvanrad and Homayounpour, 2014).

3.1.4. RNNs
RNNs can be considered as an enhanced version of the feed-forward ANNs that can remember data handled at each time step for calculating the subsequent results. For this purpose, in an RNN, the output of neurons in each layer is connected to the input of the other layer's neurons and also to itself. Thus, RNNs can apply their internal memory to deal with variable length inputs sequences such as times series and learns a data sequence to produce its new members. Furthermore, in RNNs, the input layer is unidirectionally connected to the hidden layers, while the neurons of the hidden layers are connected to themselves and all other neurons of the next layer for full information exchange. Regarding the temporal correlations of the security attacks and malicious behaviors, the RNNs can be effectively used to model them. For this purpose, the RNNs can be trained using current and historic inputs, in which the probability of an attack is based on the current and prior states of the features (Yu et al., 2019).

3.1.5. GAN
A GAN or Generative adversarial network consists of two ANNs contesting, trained with each other in a zero-sum game, where one's gain is another's loss. After being trained, a GAN is able to learn the distribution of data and generate synthetic data instances that can be used as real data. GANs are extensively applied in various domains such as voice, video, and image generations as well as intrusion detection context (Gui et al., 2020).

3.1.6. CNNs
The CNNs are deep learning networks mainly designed for handling image processing and analysis, but they can be applied in intrusion detection and other domains. In the intrusion detection domain, the CNNs often are incorporated to extract features from the raw data. Typically, a CNN is a multi-layered ANN that consists of input and output layers along with several hidden layers. A CNN receives its input as a 2D image and it then assigns some importance to different parts of the image to recognize the output. A CNN benefits from several hidden layers such as a convolutional layer, fully-connected layer, non-linearity layer, and pooling layer, in which the first two ones are parametric and the other two are not (Albawi et al., 2017).

3.2. IDS datasets
Several important IDS datasets are employed by the investigated deep learning-based IDS approaches which this section illustrates.

3.2.1. KDDCup’99
KDDCup’99 dataset is a version of the DARPA dataset, which has seven weeks of network traffic traces containing four gigabytes of binary Tcpdump data in the form of 5 million records. KDDCup’99 training dataset consists of 4,900,000 single connection vectors containing 41 features, labeled as an attack or normal. This dataset contains the following security attacks: DoS attacks, U2R or User to Root, R2L or Remote to Local Attack, and Probing Attack. In U2R attacks the attacker gains access to a user account and gains root access to that host. In the R2L attack, an attacker sends data packets to a remote host to gain access to it. Also, in Probing Attack, the attacker attempts to collect some information about a computer network for subsequent security attacks (Tavallaee et al., 2009).

3.2.2. NSL-KDD
NSL-KDD dataset solves the problems of the KDDCup'99 dataset and contains fewer records in the training and testing sets. This eliminates the need for selecting a small portion of the dataset and makes it possible to evaluate the newly designed IDS approaches on all portions of the dataset. As an advantage, the NSL-KDD dataset does not have duplicate and redundant records in its train set and this prevents any bias for redundant data records in the classification step, leading to an improvement in detection rates. However, this dataset suffers from some problems (McHugh, 2000) and may not perfectly represent the real network traffic (Meena and Choudhary, 2017).

3.2.3. ISCXIDS2012
ISCXIDS2012 is a dataset created using the concept of the profile and contains intrusion descriptions and abstract distribution models for lower-level network entities, protocols, applications. For simulating the user behavior, the profiles are applied. These profiles are utilized for generating a dataset in the required test-bed. For producing the anomalous section of this dataset, different scenarios for multi-stage attacks are used. Then, agents are used to running these profiles imitating the user activity. This dataset contains seven days of malicious and normal network activities.

3.2.4. CSE–CIC–IDS2018
This dataset considers profiles for human operators or agents in generating network traffic events for various network protocols. It applies two types of profiles, denoted as B-profiles and M-Profiles. The B-profiles encapsulates the users' behavior such as packet size distributions, packets in each flow, payload patterns, payload size, and request time distribution of protocols such as FTP, HTTP, HTTPS, IMAP, POP3, SMTP, and SSH. On the other hand, an M-Profile describes a scenario for security attacks. The CSE–CIC–IDS2018 contains attack scenarios for security attacks such as Brute-force, Web attacks, Botnet, DDoS, and Heartbleed. It also has each machine's log and captured network traffic with 80 features. In the scenarios considered for this dataset, the attack infrastructure has 50 machines while the victim benefits from 30 servers and 420 machines (Leevy and Khoshgoftaar, 2020).

3.2.5. CICIDS2017
This dataset contains a number of records for the security attack that resemble real traffic data. It uses the B-Profile system for profiling human behaviors and produces natural benign traffic. In this dataset, the behaviors of 25 users are built for protocols such as email protocols, HTTP, HTTPS, SSH, and FTP. Besides, it contains some records for security attacks such as Brute Force SSH, Brute Force FTP, Web Attack, Heartbleed, and DDoS (Sharafaldin et al., 2018).

3.2.6. UNSW-NB15
This dataset is used to evaluate NIDSs and a software tool denoted as IXIA PerfectStorm is incorporated to create its abnormal and normal network traffic traces. The IXIA tool can mimic nine types of security attacks and it can use new attacks data that can be updated from a site that includes the security vulnerabilities information. Also, the Tcpdump is utilized for 16 h to capture 100 GBs of network traffic (Kumar et al., 2020).

3.2.7. CIDDS
CIDDS or Coburg Intrusion Detection DataSets are provided for evaluating network anomaly intrusion detections and contain labeled flows using OpenStack for a virtual environment. The CIDDS-001 dataset considers a small environment, which includes several servers and clients. Also, in this dataset, the benign users’ behavior such as web browsing is created using the Python scripts. For ensuring realistic user behavior, each user performs his/her work regarding a specific schedule and his/her characteristics are specified in a configuration file. This dataset includes malicious traffic such as Brute Force attacks, DDoS attacks, and Port Scans (Verma and Ranga, 2018).

4. The proposed deep learning-based IDS approaches
This section provides a comprehensive study on the deep learning-based IDS schemes proposed in the literature. Fig. 6 presents a taxonomy of the investigated IDS approaches, regarding the deep learning networks applied in them. As shown in this figure, some of the IDS schemes have only have used one deep learning method in the intrusion detection process and some others have benefited from two deep learning networks. The rest of this section is organized according to this taxonomy and a subsection is allocated to investigate each category of the IDS approaches. Besides, in each subsection, the main contributions of the deep IDS schemes are demonstrated and their properties are compared.

Fig. 6
Download : Download high-res image (454KB)
Download : Download full-size image
Fig. 6. Taxonomy of the deep learning-based IDS schemes.

4.1. Auto-encoder-based schemes
This part of the paper discusses the Auto-encoder-based IDS schemes (Li et al., 2020a; Louati and Ktata, 2020; Mighan and Kahani, 2018; Ieracitano et al., 2020) introduced for different environments. For instance, in (Sadaf and Sultana, 2020), Sadaf and Sultana introduced an IDS approach denoted as Auto-IF, for real-time intrusion detection in fog computing environments using isolation forest and auto-encoder. This approach performs binary classification of the incoming packets as fog devices are more concerned about differentiating attacks from normal packets. The authors validated their method using NSL-KDD and indicated that it achieves a high accuracy rate.

Tang et al. (2020a), introduced LightGBM-AE, a NIDS based on auto-encoder and LightGBM in which the latter performs data preprocessing, feature selection, and classification steps. The LightGBM-AE model adopts the LightGBM algorithm for feature selection and uses an auto-encoder for training and detection. When a dataset containing intrusions is fed into an auto-encoder, there will be a large reconstruction error with the input data and to recognize the intrusion an appropriate threshold is used. The experiments are conducted on the NSL-KDD using Pytorch and the results are compared with denoising auto-encoder, variational auto-encoder, auto-encoder, and as well as Decision Tree, Random Forest, KNN, GBDT, and XGBoost. In the evaluation process metrics such as accuracy, precision, recall, F1-Score are used.

4.1.1. Stacked auto-encoder
Various types of auto-encoders are applied in the investigated scheme(Mighan and Kahani, 2020), in the intrusion detection process, which this subsection focuses on the stacked auto-encoders approaches.

Khan et al. (2019), proposed TSDL, a fast and two-staged IDS scheme using a deep-stacked auto-encoder in which each stage contains two hidden layers with a softmax classifier. They conducted a semi-supervised learning method for training their proposed deep model and pre-training the hidden layers on unlabeled network traffic features. This scheme consists of two steps, in which the first one classifies the network into abnormal and normal states. The second step can recognize the types of attacks. The authors carried out ten-fold cross-validation on UNSW-NB15 and KDDCup’99 datasets and achieved 89.134% accuracy for multi-class classification in UNSW-NB15 and 99.996% for multi-class classification using the KDDCup’99.

In (Telikani and Gandomi, 2019), Telikani and Gandomi proposed a cost-sensitive stacked auto-encoder denoted as CSSAE, to deal with the class imbalance problem in IDS. This scheme supports binary and multiclass classification and in its first stage, this scheme assigns a unique cost to each class regarding the different classes' distribution and this cost can be used in the deep learning feature learning, in which in the cost function layer, the neural network parameters are updated by using the relevant cost. Then, in its next phase, CSSAE applies a two-layer auto-encoder for learning features for better distinguishing the majority and minority classes. This scheme is evaluated using NSL-KDD and KDDCup’99 datasets and presents a better performance in handling low-frequent attacks.

4.1.2. Denoising auto-encoder
Several IDS schemes such as (Abusitta et al., 2019), are proposed in the literature which incorporates denoising auto-encoder for extracting features.

In (Zhang et al., 2018b), Zhang et al. proposed an effective deep learning-based network IDS scheme using DAE-based feature selection and an MLP-based classifier. This scheme adds weights to the loss functions of different samples, and this causes the selector to choose a few features, representing the security attacks. The performance of this scheme is evaluated by experiments performed on the UNSW-NB15 dataset, where 12 out of 202 features are selected after feature selection. After classification using an MLP with 2 hidden layers, they achieved a high detection accuracy and F1-Score.

Choi et al. in (Choi et al., 2019), introduced a NIDS based on unsupervised learning algorithm auto-encoders which can learn models without labeled data. They suggested a heuristic method for setting a reconstruction loss threshold based on the percentage of abnormal data in training data. As a result, by having prior knowledge in the percentage of abnormality using this method, the abnormality of data without actual labels can be recognized. They constructed three training datasets of real network conditions in which most of the data are normal. They trained their models to extract core features from input data. Then, using the core features, they constructed the original data for classifying data into normal and abnormal categories with the reconstruction error threshold. However, this scheme is only evaluated using the NSL-KDD dataset, and it is not analyzed with other datasets for justifying the achieved results.

4.1.3. Nonsymmetric auto-encoder
The NIDS scheme proposed in (Shone et al., 2018), combines deep and shallow learning methods for analyzing various network traffics. They combined the random forest, a shallow learning method, with the stacked non-symmetric deep auto-encoder, an auto-encoder containing multiple non-symmetrical hidden layers. In this scheme, the auto-encoder is applied for unsupervised feature learning and non-symmetric data dimension reduction. They evaluated their model using GPU-enabled TensorFlow and on the KDDCup’99 and NSL-KDD datasets. In these experiments metrics like precision, accuracy, recall, and training time are evaluated. The authors compared the NDAE model with the DBN and explained that it provides a 98.81% reduction in training time and a 5% improvement in accuracy. They demonstrated that their IDS model can improve detection accuracy and reduce training time. However, the authors failed to evaluate their scheme using real-world backbone network traffic.

4.1.4. Sparse auto-encoder
This subsection discusses the IDS approaches such as (Al-Qatf et al., 2018), which have utilized sparse auto-encoder to deal with intrusions and security attacks. For instance, in (Preethi and Khare, 2020), Preethi and Khare introduced SAE-SVR, an IDS scheme by using SVR or support vector regression classifier and sparse auto-encoder in which the latter is used for unsupervised reconstruction of new feature representation and dimension reduction. The sparse auto-encoder needs less training time and enhances the prediction accuracy of SVR. The experiments are conducted on the NSL-KDD using the Tensorflow tool and python language. Results validate that the SAE-SVR model accelerated the training time of SVR and improves the rate of prediction by bringing down the error rates. The authors are evaluated using metrics like training time, mean squared error, r2 score, root mean squared error, and mean absolute error, accuracy.

Yan et al. (Yan and Han, 2018), presented an IDS approach by applying the SSAE or stacked sparse auto-encoder to extract high-level sparse features from malicious behaviors. Initially, for learning the deep sparse features the classification features should be fed to the SSAE. Afterward, the achieved sparse features are applied to provide different classifiers. By performing the required experiments, the authors indicated that high-dimensional sparse features learned by SSAE can be very effective for binary and multiclass classifications of intrusion data.

4.1.5. Variational auto-encoder
This subsection studies the schemes such as (Chuang and Wu, 2019), which employed variational auto-encoders in the intrusion detection process. For example, in (Zavrak and İskefiyeli, 2020), Zavrak and İskefiyeli proposed unsupervised deep learning methods with semi-supervised learning for detecting intrusions and anomalous network traffic from flow-based data.

Auto-encoder and variational auto-encoder methods are employed to identify unknown attacks using flow features. This scheme extracts flow-based features from network traffic data. It also performs the reconstruction of features by recovering missing features for incomplete training datasets. The ROC and the area under the ROC curve, are calculated and compared with one-class SVM. By performing the required experiments, the authors demonstrated that variational auto-encoder performs, for the most part, better than auto-encoder and one-class SVM.

Nguyen et al. (2019), introduced GEE, an anomaly detection approach for detecting network traffic anomalies. It applies a gradient-based fingerprinting method and variational auto-encoder which is an unsupervised deep-learning method for dealing with detecting anomalies. The authors evaluated the GEE using the UGR dataset and exhibited that this scheme can effectively detect various anomalies.

4.1.6. Convolutional auto-encoder
In (Binbusayyis and Vaiyapuri, 2021), Binbusayyis and Vaiyapuri introduced an unsupervised IDS approach that extracts features and trains a classifier in two separate stages, a single-stage IDS approach that integrates a one-dimensional convolutional auto-encoder and a one-class SVM. Using only the normal traffic samples, the approach optimizes the 1D CAE for compact feature representation and the one-class SVM for classification by defining a unified objective function combining reconstruction error with classification error. Thus, the generated compact feature representation has not only reconstruction ability but also the discriminative ability for classification. The authors conducted their experiments on NSL-KDD and UNSW-NB15 datasets.

Ji et al. (2020), proposed an anomaly IDS approach by using ACAE, an asymmetric convolutional auto-encoder applied for the learning of features. This IDS scheme employs a by integrating the random forest classifier and asymmetric convolutional auto-encoder to benefit from the merits of both shallow and deep learning methods. This IDS scheme is tested using NSL-KDD and KDDCup’99 datasets and improves the accuracy of detecting abnormal traffic.

Table 3 exhibits various properties of the auto-encoder-based IDS schemes investigated in previous subsections.


Table 3. Properties of the auto-encoder based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Sadaf and Sultana (2020)	Accuracy, Precision, Recall, F1-Score	Keras, Tensorflow	Isolation Forest	stacked auto-encoder	NSL-KDD	95.4
Tang et al. (2020a)	Accuracy, Precision, Recall, F1-Score	Python
Pytorch	variational auto-encoder, denoising auto-encoder	LightGBM	NSL-KDD	89.82
Li et al. (2020a)	AUC, Detection Time	Python	Random forest		CSE–CIC–IDS 2018	
Louati and Ktata (2020)	Accuracy,
Precision, TNR, FPR, FNR, Detection Rate	Python		auto-encoder	KDDCup’99	99.73
Mighan and Kahani (2018)	FPR, Precision, Accuracy, Kappa	Weka	SVM	stacked Auto-encoder	ISCX	90.2
Ieracitano et al. (2020)	Accuracy, Precision, Recall, F1-Score				NSL-KDD	80.87
Mighan and Kahani (2020)	Accuracy, Precision, Recall, FPR, ROC,
F-measure, Kappa			Stack Auto-encoder
Network	CICIDS 2017,
ISCX	90.2
Khan et al. (2019)	Accuracy, FPR,
F-Measure, ROC	MATLAB	Random forests		KDDCup’99,
UNSW-NB15	89
Telikani and Gandomi (2019)	Accuracy, Recall, Precision, FPR,
F-Measure				NSL-KDD, KDDCup’99	KDDCup99 = 99.4
NSL-KDD = 99.45
Abusitta et al. (2019)	Accuracy,
Test Classification Error	Tensorflow		stacked denoising autoencoders	KDDCup’99	95
Zhang et al. (2018b)	Accuracy, F1-Score, Precision, Recall, FPR	Tensorflow	MLP	denoising auto-encoder	UNSW-NB15	98.80
Choi et al. (2019)	Accuracy, Precision, Recall, Specificity,
F1-Score	TensorFlow		Denoising auto-encoder	NSL-KDD	91.70
Shone et al. (2018)	Precision, Accuracy, Recall, Training Time	TensorFlow	Random forests	Nonsymmetric Deep
Auto-encoder	KDDCup’99,
NSL-KDD	KDDcUP99 = 
99.49
NSL-DD = 95.64
Al-Qatf et al. (2018)			SVM			
Preethi and Khare (2020)	Accuracy,
Mean absolute error Training Time	Keras,
Tensorflow	SVR	PCA	NSL-KDD	97
Yan and Han (2018)	Accuracy, detection rate, FPR	TensorFlow	SVM, KNN, random forests	stacked sparse auto-encoder	NSL-KDD	99.36
Chuang and Wu (2019)		Keras,
TensorFlow			NSL-KDD	
Zavrak and İskefiyeli (2020)	ROC, AUC	deeplearning4j
LibSVM	SVM	Auto-encoder	Kyoto 2006+,
CTU-13,
UNSW-NB15,
CIDDS-001, CICIDS2017	
Nguyen et al. (2019)	ROC	TensorFlow			UGR16	
Binbusayyis and Vaiyapuri (2021)	Accuracy,
Detection rate, FPR	Keras,
TensorFlow	SVM	Convolutional Auto-encoder	NSL-KDD,
UNSW-NB15	NSL-KDD = 98.45
UNSW-NB15 = 91.58
Ji et al. (2020)			Random-forest	Convolutional Auto-encoder	NSL-KDD, KDDCup’99	
4.2. RBM-based IDS schemes
RBMs are used by many IDS schemes such as (Mayuranathan et al., 2019) for handling intrusion in various environments such as cloud computing(Masdari and Khezri, 2020b; Masdari and Zangakani, 2019; Masdari and Khoshnevis, 2019). Also, in (Elsaeidy et al., 2019), Elsaeidy et al. proposed an IDS model for the smart cities using RBMs for unsupervised learning of high-level features from raw traffic data. On top of these extracted features, different classifiers are trained. Besides, in the classification step, classifiers such as two types of feed-forward ANNs, SVM, and random forest are used. The authors evaluated their scheme performance using a water plant dataset and exhibited that their approach can have high accuracy in detecting various security attacks.

(de Rosa et al., 2021), de Rosa et al. introduced an anomaly detection approach that handles raw features using an RBM as an auto encoder-decoder for mapping raw features into new features spaces. Each RBM learns its corresponding class data distribution and reconstructs samples in a new space. When the feature projection is performed classifiers such as SVM with RBF kernels, random forests, and decision trees are incorporated. For conducting the required experiments of this anomaly detection approach, the NSL-KDD dataset is employed.

Dawoud et al. (2018), presented a secure anomaly detection for an SDN-based IoT environment. In their considered architecture, IoT devices are located at the bottom layer, while the SDN layers such as control and forward layers are located at the top of the IoT devices. In this scheme, to allow the anomaly detection system to directly interact with the network, the proposed anomaly detection system is placed at the controller layer and applies RBM. This scheme applies a two-layer RBM network consisting of hidden and visible layers, in which the latter has 41 nodes, identical to the features of the KDDCup’99 dataset. Besides, the neurons of the hidden layer will be activated regarding the input neurons' activation functions. The evaluations of this anomaly detection approach indicated that it achieves a 94% precision rate, which is higher than that of the PCA and SVM.

Jing and Bin (2016), introduced an RBM-based NIDS approach that applies the relevance depth learning method. The experiments and evaluation results conducted in MATLAB software demonstrated that for unknown intrusions, this RBM-based NIDS method can achieve more detection accuracy and effectively reduces the average false detection rate.

In (Alom and Taha, 2017), the authors applied the unsupervised deep learning techniques to provide an effective NIDS. More specifically, it benefits from auto-encoder and RBM for feature extraction and dimension reduction. Afterward, this scheme applies the k-means clustering algorithm for clustering on only three remaining features and benefits from the unsupervised extreme learning machine for intrusion detection. This scheme is examined using the KDDCup’99 dataset and achieved 91.86% detection accuracy for the AE and 92.12% detection accuracy for RBM and K-means. However, further evaluations using other deep learning networks are needed to verify the achieved results. Table 4 compares the properties of the RBM-based IDS schemes studied in this subsection.


Table 4. Properties of the RBM-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Mayuranathan et al. (2019)	FPR, FNR, Recall, Specificity, Accuracy,
F1-Score, kappa value		RBM	Random Harmony Search-based	KDDCup’99	99.77
Elsaeidy et al. (2019)	F1-Score	Matlab	Feed-Forward ANNs, SVM, Random Forest		water plant dataset	
de Rosa et al. (2021)	Accuracy, precision, recall, F1-Score		SVM	RBM	NSL-KDD	79.05
Dawoud et al. (2018)	Specificity, Precision,
Recall, FPR, Accuracy,
F1-Score	Tensorflow		RBM	KDDCup’99	97
Jing and Bin (2016)	Detection rate, FPR	MATLAB				
Alom and Taha (2017)	Detection accuracy	SNORT	Extreme Learning Machine	RBM	NSL-KDD	92.12
4.3. DBN-based IDS schemes
The IDS schemes of this subsection such as (Yang et al., 2019a) incorporate DBN for intrusion detection and handling. Zhang et al. (2019a) presented an IDS model using an improved GA and DBN for IoT networks. In this scheme, the GA is applied for finding the optimum number of the hidden layers required for DBN to achieve a high level of detection rate. Besides, in each layer, the number of neurons is optimized. The authors applied the NSL-KDD for evaluating the proposed IDS model and showed that their DBN-based IDS model can increase the detection rate while reducing the neural network's structure complexity. However, this scheme suffers from the high training time and the authors have not dealt with this issue.

In (Wang et al., 2021), Wang et al. proposed DBN-EGWO-KELM, a NIDS model using an improved DBN, and replace the BP algorithm in DBN with the Kernel-based Extreme Learning Machine (KELM) that is capable of supervised learning. This scheme also presents EGWO, an enhanced grey wolf optimizer is designed to optimize the KELM parameters to solve the problem of poor classification performance caused by randomly initializing kernel parameters. Besides, for improving the optimization ability of the GWO, an optimization method using inner and outer hunting. The authors conducted their experiments using datasets such as CICIDS2017, UNSW-NB15, NSL-KDD, and KDDCup’99 regarding metrics like precision, accuracy, FPR, and TPR. Besides, they compared their approach against RBF, BP, KELM, SVM, CNN, LIBSVM, and DBN-KELM.

In (Peng et al., 2019), Peng et al. proposed a network intrusion detection method based on deep confidence neural network. The influence of parameters of the DBN network model on the intrusion detection effect is analyzed experimentally. The deep feature learning model based on deep confidence neural network and other traditional common methods are analyzed. They indicated that the detection rate of this method is improved compared with the traditional machine learning method.

Wang et al. (2019b), try to handle unlabeled network data using deep learning in feature dimension reduction and proposed IDBN-SC, an intrusion detection method of Softmax classification based on the improved DBN. They showed that the IDBN-SC improves the detection accuracy and reduces the processing time for the intrusion detections in comparison with IDBN-based original Softmax regression and IDBN-based SVM.

Zhang et al. (2018c), provided an IDS model based on a deep learning method that handles unbalanced datasets and improves the detection rate for minority classes. The minority samples are increased by SMOTE technology and under-sampling the majority of samples by NCL, to get a balanced dataset and solve the problem of low detection rate of minority categories. At the same time, the DBN model is improved. Combining the advantages of strong classification ability, accuracy, and simple training, the DBN-PNN model is proposed.

Table 5indicates the properties of the DBN-based IDS approaches discussed in this subsection.


Table 5. Properties of the DBN-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Yang et al. (2019a)	Accuracy,
Precision, Recall,
F1-Score,
ROC	Scikit-learn library	SVM	DBN	NSL-KDD	98.43
Zhang et al. (2019a)	Accuracy,
Detection Rate,
FPR, Precision,
Recall	MATLAB	DBN		KDDCup’99,
NSL-KDD	KDDCup’99 = 99.45,
NSL-KDD = 99.45
Wang et al. (2021)	Accuracy, Precision, Recall		Kernel-based Extreme Learning Machine	DBN	CICIDS2017, UNSW-NB15,
NSL-KDD, KDDCup’99	CICIDS2017 = 97.15, UNSW-NB15 = 93.42,
NSL-KDD = 98.6, KDDCup’99 = 98.6
Peng et al. (2019)	Accuracy,
FPR				KDDCup’99	95.45%
Wang et al. (2019b)	Accuracy, FPR	Eclipse ​+ ​PyDev plugin		DBN	NSL-KDD	96.46%
Zhang et al. (2018c)	Accuracy,
Detection Rate,
FPR		Probabilistic Neural
Network	DBN	NSL-KDD	96.48%
4.4. DNN-based IDS schemes
This section investigates the IDS schemes such as (Thamilarasu and Chawla, 2019), that have applied DNN for handling security attacks and intrusions. For instance, Su et al. (2020), presented BAT-MC, an IDS approach used to recognize the traffic anomalies using attention mechanism and LSTM. Besides, it uses the attention mechanism for screening network flow vectors which consists of BLSTM generated packet vectors, for obtaining network traffic key features. It uses several convolutional layers for capturing the traffic data local features and employs the softmax for classification of network traffic. This scheme learns the main features automatically. The authors conducted the required evaluations using the Keras. They have tested their IDS model with the NSL-KDD and compared their scheme against RNN and CNN. They exhibited that their scheme outperforms others in terms of metrics such as accuracy, precision, FPR.

Zhang et al. (2019b), introduced an in-vehicle anomaly detection system using a DNN model which attempts to automatically extract features required for the intrusion detection process from the vehicle's data packets. In this scheme, the GDM/AG and GDM algorithm is combined with the backpropagation method for iterative updating of the network, to improve its detection speed and accuracy. For evaluating this scheme, the authors collected 300,000 records of vehicle traffic data using the open-source BusMaster software. Also, each message contains a timestamp, message ID, description of relevant data, and description of relevant vehicle status information. The authors indicated that by using their DNN model a lower false-positive rate and a higher accuracy can be achieved.

Parvat et al. (2017), proposed a NIDS using an ensemble of multiple binary classifiers for multiclass classification. Each binary classifier is a deep learning model. This ensemble uses the One-vs-All decomposition method which divides multiclass classification into N classification problems, in which each classifier detects one class. They define five classifiers for DoS, Probe, U2R, R2L, and normal detection. While training each classifier, the subset of training data belonging to one class is marked as positive, and the rest all are marked as negative. Each classifier in phase 1 is a DNN with three hidden layers. In the second phase of this scheme, the output of classifiers is integrated to compute the ultimate result. The authors tested their system on the NSL-KDD dataset and achieved 99.99% accuracy for binary classification on training data and 99.89% accuracy for all five classes. Besides, 81.27% accuracy is observed on testing data for binary classification and 74.90% for five classes using the decision tree classifier. However, this scheme is not evaluated using other datasets and in real systems to further verify its claimed results.

Table 6 gives the comparison of the DNN-based IDS schemes investigated in this part of the paper.


Table 6. Properties of the DNN-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Thamilarasu and Chawla (2019)	Precision,
Recall,
F1-Scores	Keras library, Cooja simulator	DNN			
Su et al. (2020)	Accuracy,
Precision,
FPR		LSTM	Multiple convolutional layers	NSL-KDD	85
Zhang et al. 2019b)	Precision, FPR	MATLAB			Self-collected	
Parvat et al. (2017)	Accuracy	Keras	Ensemble Classifier		NSL-KDD	99.02
4.5. CNN-based IDS schemes
This section studies the IDS approaches such as (Song et al., 2020; Bu and Cho, 2017; Li et al., 2020b; Saraeian and Golchi, 2020; Riyaz and Ganapathy, 2020; Wu et al., 2018; Xiao et al., 2019) which have applied the CNN for handling intrusions and security attacks. For instance, in (Yang and Wang, 2019), Yang and Wang proposed a NIDS approach that preprocesses the wireless network traffic data and models the intrusion-related traffic using an improved version of the CNN denoted as ICNN. This scheme presents the low-level intrusion traffic data as features to the improved CNN, which extracts the features autonomously, and applies the stochastic gradient descent method to optimize the network parameters. By performing the experiments, the authors exhibited that their method can improve the accuracy, TPR, and FPR. The authors conducted the required training and testing on the KDDCup’99 dataset and exhibited that it can improve the detection accuracy and recall in comparison to the DBN and LeNet-5 while reducing the false positive rate than specified deep learning models.

In (Nguyen and Kim, 2020), Nguyen and Kim introduced a NIDS model which performs feature selection using GA and FCM or fuzzy C-means clustering. This scheme applies the bagging classifier and a CNN model. It also benefits from the GA for selecting the structure of the CNN model. In this scheme, the CNN model performs the feature extraction step and the achieved features are fed into the BG classifier. The authors validated the results of their NIDS using a 5-fold cross-validation process.

Zhang et al. (2020a), presented SGM, for dealing with the imbalanced classes in large datasets. Furthermore, this scheme applies Gaussian mixture model-based under-sampling for clustering and synthetic minority over-sampling technique. Afterward, they designed SGM-CNN, a flow-based IDS approach, and applies their proposed method for handling the imbalanced class with CNN, which investigated the convolution kernels impact and different rates of different learning. They further analyzed their scheme's effectiveness with datasets such as CICIDS2017 and UNSW-NB15 for multiclass and binary classifications. They demonstrated that their method can achieve a high detection rate for imbalanced intrusion detection methods and other IDS schemes.

Nie et al. (2020), designed a data-driven IDS for the Internet of vehicles environments which analyzes the irregular fluctuations of the traffic load on the roadside units. This scheme applies a CNN model with 7 layers for extracting the link loads features and detecting the possible intrusion at RSUs. It also utilizes the link loads spatial feature for design the loss function and on the output layer. Furthermore, it incorporates a redundant error term, based on error feedback from the output map, for enhancing the training error convergence. This scheme constructs a CNN-based deep architecture as a bayesian hierarchical model and proves its convergence in training error. The authors evaluated the sensitivity analysis and precision analysis on their scheme and evaluated it using metrics such as precision, accuracy, recall, F1-Score, false-positive rate.

In (Andresini et al., 2021), Andresini et al. presented a CNN-based ID approach for analyzing network traffic for malicious activities. This scheme presents the network flows as 2D images and applies them for training a 2D CNN model. Furthermore, this scheme applies clustering and nearest neighbor search methods for creating network flows imagery representation. The authors evaluated their approach on three datasets and exhibited that their scheme improves predictive accuracy in comparison to other IDS approaches.

In (Wang et al., 2020), Wang et al. introduced a NIDS using DMCNN or deep multi-scale CNN which using various convolution kernels to extract features from high-dimensional unlabeled data. In this scheme, the batch normalization method is used for optimizing the network structure learning rate and obtaining features from raw data. They used the NSL-KDD dataset and indicated that their model achieves a high rate of accuracy and precision while suffering less from FPR.

Hu et al. (2020), introduced an IDS model using an improved CNN and an algorithm denoted as ADASYN or adaptive synthetic sampling. They used the ADASYN for balancing the sample distribution while preventing ignoring small samples and sensitivity to large samples. In this scheme, SPC-CNN or split convolution module is used in CNN for increasing the features diversity and eliminating the inter-channel information redundancy impact on the training process. At last, for testing the AS-CNN, the NSL-KDD dataset is applied and the authors indicated that their scheme can achieve better results than RNN and CNN models in terms of accuracy, detection rate, and FPR. Table 7 indicates some of the properties of the CNN-based IDS solutions studied in this subsection.


Table 7. Properties of the CNN-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Song et al. (2020)	FNR,
Error Rate,
Precision, Recall,
F1-Score		CNN		Self-Collected	
Bu and Cho (2017)	Accuracy	TensorFlow	CNN		TPC-E	
Li et al. (2020b)	Accuracy, Precision, Recall, F1-Score	TensorFlow,
Keras	CNN		Real dataset	99.2
Saraeian and Golchi (2020)	Wireshark, Weka	MATLAB	CNN		ISCX,
NSL-KDD	ISCX = 97,
NSL-KDD = 99.9
Riyaz and Ganapathy (2020)	Accuracy	TensorFlow	CNN	Linear correlation coefficient	NSL-KDD	99.88
Wu et al. (2018)	Accuracy, Detection Rate, FPR	TensorFlow	Ensemble	CNN	NSL-KDD	79
Xiao et al. (2019)					KDDCup’99	
Yang and Wang (2019)	Accuracy,
Precision, FPR	TensorFlow			KDDCup’99	95.36
Nguyen and Kim (2020)	Accuracy,
Precision,
FPR	MATLAB	Ensemble		NSL-KDD	98.24
Zhang et al. (2020a)	Accuracy,
Detection Rate,
FPR,
F1-Score	TensorFlow,
Keras		CNN	CICIDS2017, UNSW-NB15	CICIDS2017 = 99.85,
UNSW-NB15 = 98.82
Nie et al. (2020)	Precision, Accuracy, Recall, F1-Score, FPR			CNN	Self-Collected	
Wang et al. (2020)	Accuracy,
Precision, FPR	TensorFlow		CNN	NSL-KDD	94.65
Hu et al. (2020)	Accuracy,
Detection Rate,
FPR			CNN	NSL-KDD	83.83
4.6. GAN-based IDS schemes
This section investigates the GAN-based IDS schemes (Liu et al., 2019), provided in the literature. For example, Lu et al. (2019), presented MalDeepNet, a deep neural network for the classification of malware behaviors. They used deep learning in the family clustering algorithm and designed Mal-GAN, a malware prediction model that recognizes the malware.

Shu et al. (2020), presented an IDS for VANETs by placing a distributed SDN controller on each base station to recognize normal network flows and attack network flows. They applied GAN and jointly train multiple SDN controllers for the whole VANET using the entire network flow information. This IDS scheme enables the distributed SDN controllers to independently detect their sub-network flows, and it can reduce the computation and communication overheads. The author evaluated their scheme with metrics such as precision, accuracy, F1-Score, recall, and AUC.

In (Huang and Lei, 2020), Huang and Lei tackled the imbalanced classes by proposing IGAN, or imbalanced GAN. For producing new data samples for a minority class in the dataset, they introduced IGAN, by adding convolutional layers and an imbalanced filter to the GAN. Afterward, using the IGAN and its generated data samples, an IDS approach denoted as IGAN-IDS is provided, which consists of feature extraction, IGAN, and DNN. They utilized a feed-forward ANN for computing feature vectors from raw network properties. The authors evaluated the IGAN-IDS using datasets such as CICIDS2017, UNSW-NB15, and NSL-KDD. They compared the achieved results against some deep and shallow learning methods using metrics such as F1-Score, AUC, and accuracy.

Shahriar et al. (2020), provided G-IDS, an IDS approach that employs GAN for producing synthetic data samples for handling problems such as missing data and imbalanced classes in the training of the IDS. They evaluated their approach on the NSL-KDD dataset and evaluated it using the following metrics: precision, recall, F1-Score. They compared their approach outperforms a standalone IDS, in terms of the specified metrics. However, it is not evaluated on other datasets and in real environments.

In (Ring et al., 2019), the authors attempted to generate data samples regarding various network traffic flows using GANs. However, the GANs can handle continuous features, while flow-based data may contain categorical features like port numbers or IP addresses. For transforming flow-based data to continuous values, the authors proposed three preprocessing methods. They also presented a method to evaluate the produced network traffic flows which for defining the quality tests incorporates the domain knowledge. They used the CIDDS-001 dataset for creating network flows. However, this scheme does not create sequences of flows and only presents a single flow.

Table 8 provides the comparison of the GAN-based IDS approaches described in this subsection.


Table 8. Properties of the GAN-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Liu et al. (2019)	Accuracy		SVM			96.6%
Lu et al. (2019)					DataCon	
Shu et al. (2020)	Precision, Recall,
F1-Score,
AUC	Tensorflow			KDDCup’99,
NSL-KDD	
Huang and Lei (2020)	Accuracy,
F1-Score,
AUC			Feed-forward
Neural Network	CICIDS2017, UNSW-NB15,
NSL-KDD	CICIDS2017 = 99.79,
UNSW-NB15 = 82.53,
NSL-KDD = 84.45
Shahriar et al. (2020)	Precision,
Recall,
F1-Score			PCA	NSL-KDD	
Ring et al. (2019)					CIDDS-001	
4.7. LSTM-based IDS schemes
In (Boukhalfa et al., 2088-8708), Boukhalfa et al. proposed a NIDS established on the deep learning method LSTM, which recognizes attacks and keeps a long-term memory of them, to block the other new attacks. They employed the NSL-KDD for training and testing, and applied evaluation metrics such as accuracy, sensitivity, false-positive rate, precision, and recall to compare their scheme against other classifiers. However, this scheme is not analyzed using other datasets and in real environments.

In (Haggag et al., 2020), Haggag et al. proposed DLS-IDS, a deep learning-based IDS scheme that has four main building blocks, the four system blocks are to choose and explore, preprocess, class imbalance solution, and the last block is training over Apache Spark. They indicated that the Spark cluster can be used for performing training of the model using a various number of hidden layers and different elements type. For handling a dataset containing a class imbalance, as a preprocessing phase, it uses the synthetic minority over-sampling technique to increase the accuracy and mitigate the overfitting. By performing necessary experiments on the NSL-KDD dataset indicated that their IDS approach reaches 83.57 detection accuracy. However, this scheme should be improved to be able to handle more types of attacks.

In (Liu et al., 2020), Liu et al. proposed a NIDS approach that uses the difficult set sampling technique for handling imbalanced attack data. For dividing the imbalanced training data of network traffic into easy and difficult sets, they incorporated the edited nearest neighbor algorithm. Afterward, for compressing the majority samples in the difficult set, they used the KMeans. At last, to provide a new training dataset, they combined the minority in a difficult set, the compressed majority in a difficult set, and the easy set. In this scheme, classifiers such as SVM, random forest, XGBoost, LSTM, Mini-VGGNet, and AlexNet are used. Besides, the necessary experiments are performed using datasets such as CSE–CIC–IDS2018 and NSL-KDD and indicated the effectiveness of their approach. Table 9 exhibits some of the properties of the LSTM-based IDS schemes.


Table 9. Properties of the LSTM-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
(Boukhalfa et al., 2088-8708)	Accuracy,
False Positive Rate, Precision,
Recall		LSTM		NSL KDD	99.93
Haggag et al. (2020)	Accuracy,
Precision,
Recall,
F1-Score,
FPR	Spark Cluster	LSTM
RNN
MLP		NSL-KDD	87.54
Liu et al. (2020)	Accuracy,
Precision,
Recall,
F1_Score	Sklearn ​+ ​Tensorflow	SVM, random forest, XGBoost, LSTM,
Mini-VGGNet, AlexNet		CSE–CIC–IDS2018, NSL-KDD	CSE–CIC–IDS2018 = 96.99,
NSL-KDD = 82.84
4.8. RNN-based IDS schemes
Several RNN-based intrusion detection approaches such as (Xu et al., 2018; Almiani et al., 2020; Tang et al., 2019) are provided in the literature, which this section discusses. For example, in (Kaur and Singh, 2019) Kaur and Singh proposed D-Sign, a hybrid deep learning-based IDS scheme for handling both anomalies and intrusions. This scheme can detect and generate signatures of web-based security attacks. More specifically, the D-Sign system uses an RNN containing multiple layers of LSTM for recognizing security attacks in network traffic. The reason for this combination is that RNN models often suffer from problems such as vanishing gradient and long-term dependency, which the LSTM can overcome. Besides, a two-layer LSTM network is used to recognize new security attacks, which their results are fed into a softmax function. The authors trained the D-Sign on datasets such as NSL-KDD and CICIDS 2017 for binary and multi-class classification. They applied metrics such as sensitivity, accuracy, specificity, false negatives, and false positives and exhibited that their approach outperforms other classifiers.

In (Tang et al., 2018), the authors proposed an anomaly intrusion detection scheme for SDN environments that applies GRU-RNN, an RNN model that uses GRU. The GRU-RNN represents the relationship between previous and current events and can increase the detection rate of the anomalies. The authors tested their anomaly detection approach using the NSL-KDD dataset and indicated that with six raw features, it can have 89% accuracy and it does not affect the performance of the network.

Yin et al. (2017), proposed RNN-IDS, an RNN-based IDS model, and studied its performance in multiclass and binary classification problems. They also investigated the impact of different learning rates and the number of neurons on the performance of their model. This scheme is evaluated on the NSL-KDD and KDDCup’99 datasets and the results are compared with the shallow classifiers such as J48, ANN, random forest, SVM, etc. The results showed that the proposed RNN-IDS provides good results with high accuracy in binary and multiclass intrusion detection problems.

In (Le et al., 2019) Le et al. proposed an IDS approach to deal with high false positives in anomaly detection systems and dealing with attacks with imbalanced training sets. This scheme presents a feature selection model, denoted as SFSDT which generates the best possible subset of features. The SFSDT model consists of a decision tree and Sequence Forward Selection. Then, it trains classifiers such as RNN, LSTM, and GRU on the selected features. At last, the authors evaluated their anomaly detection scheme on the ISCX and NSL-KDD datasets. They indicated their scheme outperforms other IDS approaches in terms of accuracy, detection rate and mitigates the required computation time. Table 10 compares the RNN-based IDS schemes regarding their evaluation metrics, simulators or environments, classifiers, feature extraction, and datasets.


Table 10. Properties of the RNN-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Xu et al. (2018)	Accuracy,
Precision, Detection Rate, FPR,
F1-Score	TensorFlow			NSL-KDD, KDDCup’99	NSL-KDD = 99.24, KDDCup’99 = 99.84
Almiani et al. (2020)	Accuracy, Precision, Detection Rate,
F1-Score, FPR, FNR, Kappa Coefficients, Mathew Correlation	MATLAB	RNN		NSL-KDD	90.32
Tang et al. (2019)	Accuracy,
ROC, Throughput,
Latency	TensorFlow,
Keras	GRU-RNN		NSL-KDD	89
Kaur and Singh (2019)	Recall,
Specificity, Accuracy,
F-Measure, AUC		RNN		CICIDS 2017,
NSL-KDD	CICIDS 2017 = 99.10,
NSL-KDD = 99.40
Tang et al. (2018)	Precision, Recall,
F1-Score,
Accuracy	Keras
Scikit-learn	GRU-RNN		NSL-KDD	89
Yin et al. (2017)	Accuracy,
Precision,
Recall, F1-Score	Python	DNN		NSL-KDD, KDDCup’99	NSL-KDD = 83.28, KDDCup’99 = 81.29
Le et al. (2019)	Accuracy,
Detection Rate, Computation Time	Python	RNN, LSTM, GRU	Sequence Forward Selection, Decision Tree	ISCX,
NSL-KDD	ISCX = 99.5,
NSL-KDD = 94
4.9. Hybrid IDS schemes
This section discusses the IDS schemes which have incorporated two or more deep learning techniques in various steps of the intrusion detection process.

4.9.1. AE ​+ ​CNN
The approaches discussed in this subsection (Xu et al., 2020), applies AE and CNN models for handling intrusion detection problems. For instance, Wang et al. (2019c) introduced a hybrid IDS model for the Android environment based on the auto-encoder and CNN. They reconstructed the features of the Android application and employed several CNN models for detecting malware. For preventing problems such as over-fitting and increasing the sparseness, they used an activation function in the CNN–S or serial CNN. Besides in this scheme, the pooling layer, convolutional layer, and full connection layer are combined to improve feature extraction. Furthermore, the authors used an auto-encoder for pre-training to reduce the training time. At last, the authors conducted experiments on several Android applications and indicated that a 5% improvement in accuracy is achieved in comparison with SVM, and 83% improvement in training time is gained.

In (Lopez-Martin et al., 2017), Lopez-Martin et al. proposed an IDS scheme for finding anomalies in HTTP messages in the IoT networks using a convolutional auto-encoder that applies binary image transformation. This auto-encoder has a decoder and an encoder with CNN architecture and for normal messages, it minimizes the binary cross-entropy among output and input images. When the training process is completed, this approach detects anomalous messages when its binary cross-entropy is bigger than a threshold. By performing the required experiments, the authors confirmed that this scheme can provide better results than isolation forest and SVM classifiers. They also indicated that a deeper convolutional auto-encoder better results can be achieved. However, the character embedding applied in the image transformation incurs computational complexity to achieve a little performance improvement.

4.9.2. AE ​+ ​DBN
In (Yang et al., 2020a), Yang et al. proposed an IDS scheme for wireless networks which employs conditional DBN to learn the temporal behavior features. They provided a window-based under-sampling algorithm for balancing the normal samples and attack samples in the AWID training dataset. They also used a stacked contractive auto-encoder for eliminating the data redundancy. By conducting the required experiments, the authors showed that their detection method can achieve a better detection performance compared to other deep learning and shallow learning methods. These experiments show that this proposed mechanism is fast and has a low average detection time.

4.9.3. AE ​+ ​DNN
This subsection illustrates the IDS schemes such as (Yang et al., 2019b), benefited deep learning techniques like AE and DNN. For instance, Yang et al. (2020b), proposed SAVAER-DNN, a NIDS that can detect known and unknown attacks and improves the detection rate of low-frequent attacks. SAVAER is a supervised variational auto-encoder with regularization, which uses WGAN-GP instead of the vanilla GAN to learn the latent distribution of the original data. SAVAER's decoder is used to synthesize samples of low-frequent and unknown attacks, increasing the diversity of training samples and balancing the training data set. SAVAER's encoder is used to initialize the weights of the hidden layers of the DNN and explore high-level feature representations of the original samples. The authors are conducted evaluations using UNSW-NB15 and NSL-KDD datasets in terms of metrics such as detection rate, accuracy, false-positive rate, and F1-Score.

In (Azmin and Islam, 2020), the authors presented a NIDS approach using Variational Laplace Auto-encoder and DNN. They used applied the class labels as an input to the auto-encoder and denoted it as CVLAE, or Conditional Variational Laplace Auto-encoder. They employed the CVLAE for probabilistic data synthesizing and learning the network data features variable representations. They used a DNN classifier and applied the synthesized and original data for its training. At last, the authors evaluated their NIDS using the NSL-KDD and demonstrated that it can even detect higher minority attacks with high. Also, in (Tang et al., 2020b), Tang et al. proposed SAAE-DNN, an IDS method that combines SAE and DNN. In this scheme, the data features are mined using the SAAE and after training is employed for initializing the DNN hidden layers’ weights. The performance of this IDS approach is analyzed with the NSL-KDD and the results are compared to various deep learning networks such as CNN, RNN, AE, etc. However, this scheme does not consider the imbalanced dataset problem and cannot handle attacks with fewer data samples.

4.9.4. AE ​+ ​GAN
This subsection describes approaches such as (Hara and Shiomoto, 2020), that have incorporated AE and GAN for anomaly and intrusion detection. In (Zhang et al., 2020b), Zhang et al. introduced CWGAN-CSSAE, a NIDS scheme that uses stacked auto-encoders and enhanced conditional Wasserstein generative adversarial network which uses gradient penalty and L2 regularization for generating minority attacks to reduce the class imbalance of the training dataset. Besides, a stacked auto-encoder is applied to extract network data deep features. Also, regarding the minority attacks, this scheme assigns a large misclassification cost to them with a cost-based loss function. The authors carried out the results of the required experiment based on KDDCup’99, and UNSW-NB15 datasets to show that this IDS model can handle minority attacks and unknown attacks and evaluated this capability regarding the accuracy and F1-Score metrics.

To deal with the lack of sufficient IoT traffic data for anomaly detection systems, in (Zixu et al., 2020), the authors presented an unsupervised anomaly detection approach using GAN and auto-encoder. This scheme trains a centralized auto-encoder and passes it to the networks for anomaly detection when it is adapted to the raw data from the IoT networks. The authors evaluated this scheme with the UNSW Bot-IoT dataset.

4.9.5. AE ​+ ​LSTM
Zhang et al. (2020c), Introduced AN-LSTM, a hybrid NIDS model that benefits from the auto-encoder and LSTM aiming for reducing the computational complexity of the intrusion detection process and eliminating redundant information. This scheme applies the KDDCup’99 dataset perform preprocessing on it. Then, it applies the auto-encoder for dimension reduction of features and LSTM for classification. At last, this scheme is evaluated using metrics such as false alarm rate and accuracy. It is indicated that this scheme achieves better results than LSTM and some other machine learning approaches. But, the encoding and decoding process of the Auto-encoder is time-consuming and no solution is provided by the authors to solve the problem.

4.9.6. CNN ​+ ​LSTM
A few numbers of the schemes such as (Zhang et al., 2020d), have applied CNN and LSTM for providing high-performance IDS approaches. For example, in (Wang et al., 2017), Wang et al. proposed HAST-IDS, which uses CNNs to learn the spatial-temporal features of the network packets and applies an LSTM to learn the temporal features among multiple network packets. As a result, their method obtains more accurate spatial-temporal traffic features. The authors evaluated their scheme using ISCX and DARPA1998 datasets. The experimental results show that the HAST-IDS improves the accuracy and DR and reduces the FPR because it automatically learns the spatial-temporal features. However, the HAST-IDS has low performance for the attack classes having fewer samples and as a result, its performance on imbalanced datasets should be enhanced. Also, in (Kim et al., 2020), Kim et al. proposed AI-IDS, an anomaly detection scheme that conducts payload-level deep learning using CNN, LSTM, and spatial feature learning. As an advantage, they used web traffic for their evaluations. However, this scheme should be continuously revalidated for reducing FPR.

4.9.7. DNN ​+ ​RNN
In (Tang et al., 2020c), Tang et al. introduced DeepIDS, a flow-based anomaly detection approach for the SDNs which applies a fully-connected DNN and GRU-RNN or Gated Recurrent Unit RNN. The DeepIDS can deal with different size networks and can be optimized to handle new threat models while not affecting the network performance. They conducted the required experiments using the NSL-KDD dataset on the Keras library to evaluate their flow-based anomaly detection approach regarding resource utilization, latency, and throughput. However, it is not evaluated their scheme using real network traffic and further performance evaluations are needed regarding latency and throughput.

Table 11 compares some of the properties of the hybrid deep learning-based IDS schemes.


Table 11. Properties of the hybrid deep learning-based IDS schemes.

Scheme	Evaluation Metrics	Simulators/Environments	Classifiers	Feature Extractions	Datasets	Accuracy (%)
Wang et al. (2019c)	FPR, Precision, Accuracy, Recall,
Positive predict value,
F1-Score,
Training Time.	TensorFlow,
Keras	CNN	Auto-encoder	Self-collected	99.82
Lopez-Martin et al. (2017)	FPR, Precision,
F1-Score, Matthews correlation coefficient	PyTorch	CNN	Auto-encoder	Modified National Institute of Standards and Technology dataset	
Yang et al. (2020a)	Accuracy,
Precision, Recall, F1-Score,
Matthews correlation coefficient	Python	Conditional DBN	Stacked Contractive Auto-Encoder	AWID	
Yang et al. (2019b)	Accuracy,
Recall, Precision, F1-Score, FPR	TensorFlow	DNN		NSL-KDD,
UNSW-NB15	NSL-KDD = 85.97,
UNSW-NB15 = 89.08
Yang et al. (2020b)	Accuracy,
Precision, Recall, detection rate,
FPR, F1-Score,
G-mean, ROC, AUC	TensorFlow	DNN	Variational
Auto-Encoder	NSL-KDD,
UNSW-NB15	NSL-KDD = 80.3,
UNSW-NB15 = 93.01
Tang et al. (2020b)	Accuracy,
Recall,
Precision,
F1-Score	TensorFlow,
Keras	DNN	Stacked Auto-encoder	NSL-KDD	87.74
Hara and Shiomoto (2020)	Accuracy,
Precision,
FPR	Python	DNN	Variational Auto-Encoder	NSL-KDD	83.11
Zhang et al. (2020b)	Accuracy, F1-Score	TensorFlow	GAN	Stacked
Auto-Encoder	NSL-KDD,
UNSW-NB15	KDD-KDD = 85.97,
UNSW-NB15 = 89.08
Zixu et al. (2020)	Accuracy,
Precision,
Recall, F1-Score		GAN	auto-encoder	UNSW Bot-IoT	95.12
Zhang et al. (2020c)	Accuracy, FPR		LSTM	auto-encoder	KDDCup’99	95
Zhang et al. (2020d)	Accuracy, Precision, Recall,
F1-Score	TensorFlow, TensorLayer	Ensemble Classifier		CSE–CIC–IDS2018	98.7
Wang et al. (2017)	Accuracy,
Detection Rate,
FPR	TensorFlow,
Keras		CNN ​+ ​LSTM	DARPA,
ISCX	DARPA = 99.99,
ISCX = 99.96
Kim et al. (2020)	Accuracy,
Precision,
F1-Score,
Recall,
Specificity	TensorFlow,
Keras		CNN ​+ ​LSTM	CICIDS2017	99.99
Tang et al. (2020c)	Precision,
Recall,
F1-measure,
Training Time, Testing Time	TensorFlow,
Keras	DNN		NSL-KDD	95.3%
5. Discussion
This section provides a discussion on the various issues about the investigated deep learning-based IDS schemes in the previous section. For this purpose, it provides some statics about the following issue:

•
The number of the IDS schemes provided using each type of deep learning network.

•
The number of the IDS approaches presented using auto-encoders.

•
The number of IDS solutions that benefit from two different types of deep learning networks.

•
The number of the IDS solutions incorporated different intrusion detection datasets to evaluate their performance.

•
The percentage of the IDS schemes evaluated their scheme using one, two, three, four, or five different intrusion detection datasets.

•
The percentage of the IDS schemes that have applied each evaluation metric in their experiments.

•
The percentage of the schemes that try to handle the imbalanced dataset problem.

•
Accuracy of the investigated IDS approaches regarding their employed datasets.

It is worth mentioning that, these statistics are provided based on the 85 deep learning-based IDS approaches studied in the previous section. At first, we analyze, which deep learning network is favored by the most IDS schemes. For this purpose, Fig. 7 exhibits the number of the IDS approaches which have applied different type of deep learning networks. As shown in this figure, auto-encoders are applied by 21 schemes, CNNs are used in 14 IDS solutions, and 17 IDS schemes have incorporated two deep learning techniques, categorized as hybrid schemes. Also, as shown in this figure, many IDS schemes using two deep learning approaches are designed to deal with various types of intrusions. Fig. 8 depicts the number of IDS schemes designed using a different type of auto-encoders.

Fig. 7
Download : Download high-res image (185KB)
Download : Download full-size image
Fig. 7. Number of the IDS schemes proposed using each deep learning method.

Fig. 8
Download : Download high-res image (194KB)
Download : Download full-size image
Fig. 8. Auto-encoder based IDS approaches.

Fig. 9 depicts the number of the IDS approaches which have benefited two deep learning networks to deal with various intrusions and anomalies. As shown in this figure, the combination of AE and DNN deep learning methods are used by the most number of IDS schemes, while the CNN ​+ ​LSTM, AE ​+ ​GAN, and AE ​+ ​CNN combinations are also applied by several IDS solutions.

Fig. 9
Download : Download high-res image (153KB)
Download : Download full-size image
Fig. 9. Number of the IDS approaches applied two deep learning networks.

Fig. 10 indicates the datasets applied in the studied deep learning-based IDS solutions. However, as shown in this figure, 34 and 15 IDS schemes are still applying NSL-KDD and KDDCup’99 legacy datasets, respectively. Also, for conducting a more complete evaluation of the proposed schemes, some schemes apply two or more datasets. This method.

Fig. 10
Download : Download high-res image (144KB)
Download : Download full-size image
Fig. 10. Datasets applied in the deep learning-based IDS schemes.

Fig. 11 exhibits the percentage of the deep learning-based IDS approaches that have applied a different number of datasets. As shown in this figure, 72% of the IDS approaches are verified with only one dataset and 25% of them have been evaluated using only two datasets. However, other categories are applied by only 1% of the studied IDS schemes.

Fig. 11
Download : Download high-res image (173KB)
Download : Download full-size image
Fig. 11. Percentage of the approaches which have used two or more datasets.

Fig. 12 indicates the percentage of the IDS schemes which have applied each evaluation metric. As shown in this figure, 27% of the IDS schemes are evaluated using accuracy metric, 24% of them are analyzed using precision metric, and 14% of them are evaluated using recall. However, fewer IDS approaches have considered the time required for training and testing.

Fig. 12
Download : Download high-res image (172KB)
Download : Download full-size image
Fig. 12. Percentage of the IDS schemes which have applied each evaluation metric.

The capability of handling the imbalanced IDS datasets is an interesting feature that some of the studied schemes support and apply the deep learning networks to generate synthetic data for the classes with fewer data samples. Fig. 13 exhibits the percentage of the schemes that can handle imbalanced datasets. As depicted in this figure, only 12% of the investigated IDS approaches can deal with imbalanced datasets. These schemes often use GAN models to generate synthetic data, for the classes which have fewer data samples. GANs can alleviate the problem with imbalanced datasets, but their data may not fully represent the real network traffic traces and some considerations are needed to further check the validity of the synthetically produced training data.

Fig. 13
Download : Download high-res image (167KB)
Download : Download full-size image
Fig. 13. Percentage of the schemes that can handle imbalanced datasets.

6. Conclusions and future researches directions
Intrusion detection systems (IDS) have an essential role in securing computer systems and networks. To increase the performance of the IDS schemes and increase their effectiveness against the new security challenges, various AI techniques are incorporated in the IDS solutions. Deep learning is one of the contexts which have been focused on by the researchers to improve the feature selection/extraction and classification steps of the IDS approaches. To this end, in recent years, many deep learning-based IDS solutions have been designed and proposed in the literature, which this paper is aimed to provide an extensive survey and classification on them. For this purpose, it first provides the background knowledge, in which various types of deep learning networks applied in the studied IDS approaches are illustrated; also, the main datasets benefited to evaluate and analyze the IDS schemes are described in this section. Then a taxonomy of the proposed deep learning-based IDS approaches regarding their applied deep learning network is provided. To be more specific, in each category, the application of deep learning techniques in different steps of the IDS approaches are discussed to indicate that how each IDS solution benefited from the deep learning to further enhance the performance of the intrusion detection process. Finally, various features of the studied deep learning-based based are discussed to illuminate the techniques and methods that are highly incorporated in the investigated schemes.

Although a great deal of research has been performed in the deep learning-based IDS context, in the subsequent researches, the following issues can be considered:

•
Several distributed IDS schemes have applied blockchain technology to improve the security of data, transmitted in the intrusion detection process. However, this issue has been neglected in investigated deep learning-based IDS approaches. Consequently, in the next studies, it can be focused to further enhance the proposed approaches using blockchain or other security technologies.

•
Most of the studied IDS schemes are approaches designed for the general environments and only 5% of them are allocated for IoT, 5% for the SDNs, and 3% for the vehicular networks. Also, from these few schemes, only a handful of them are allocated for anomaly intrusion detection. Thus, deep learning-based intrusion detection in special computing environments should be further investigated and much focus should be made on anomaly detection in special environments.

•
In the investigated schemes, most of the applied datasets are for the general networks. Therefore, regarding many emerging security attacks in the new computing environments and the dependency of the deep learning-based techniques on quality data, producing special datasets for them must be considered in the subsequent studies. This can improve the evaluation of new IDS schemes and reveal their real effectiveness in handling different intrusions and malware. Also, the new datasets should cover most of the known attacks or support the required profiles applied in the anomaly detections.

•
Although hardware technologies such as the Field Programmable Gate Array (FPGA) (Liu et al., 2018) and Application-Specific Integrated Circuit (ASIC) (Tefai et al., 2020) are applied in the literature for the training of the neural networks (Boutros et al., 2018; Venkataramanaiah et al., 2020), the investigated deep learning-based IDS schemes have not utilized these technologies and only have employed GPU and CPU in their training. Consequently, in the next studies in the deep learning-based intrusion detection domain, FGPA, ASIC and even other hardware technologies such as neural processing unit (NPU) or neural processor can be benefited.

•
Since it is unlikely to collect the same amount of record for all attack classes, having unbalanced datasets is inevitable, which leads to problems such as over-fitting. GANs are used in the studied IDS schemes for learning the distribution of input data and generating some synthetic data for imbalanced datasets. However, the produced data may not be realistic. Hence, using some techniques to inspect the synthetic data seems to be necessary.

•
Very few deep learning-based intrusion detection approaches support both misuse detection and anomaly detection. Regarding the capability of such hybrid schemes in handling known and unknown attacks, they can be further focused on in the upcoming studies.

•
Regarding the inefficiency of the misuse detection schemes in handling encrypted traffic and their need for having the attack signatures and keep updating the signatures database, anomaly detection schemes will gain momentum in the future IDS schemes. However, fewer deep learning-based anomaly intrusion detection approaches are currently provided, and in subsequent studies, this issue should be addressed.

•
For handling real-time intrusion detection with streaming data, techniques such as online learning and incremental learning can be used.

•
Regarding a huge number of data samples that deep learning models must be trained with, parallel (Jin and Kim, 2019) and distributed (Sergeev and Del Balso, 2018; Akiba et al., 2017) methods are provided in the literature for faster training of the deep learning networks (Ben-Nun and Hoefler, 2019). However, only a handful of IDS schemes (Al Jallad et al., 2019) have used the distributed deep learning methods and in the next studies, these techniques should be further analyzed and evaluated in the intrusion detection domain.