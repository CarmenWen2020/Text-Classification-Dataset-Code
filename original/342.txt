In this paper, novel task matching mechanisms with two-sided preferences of workers and requesters are proposed for blockchain-based crowdsourcing. Existing blockchain-based crowdsourcing frameworks match workers to tasks using allocation mechanisms considering metrics such as cost, location, and workers’ reputation to answer requesters’ requirements. However, they still match workers to tasks through mechanisms that are requester-biased with no consideration for workers’ preferences. This may lead to workers rejecting or neglecting their allocated tasks. As a solution, we propose two-sided preferences task matching mechanisms for blockchain-based crowdsourcing, namely SenseChain+, and Gale–Shapley Matching (GSM). In order to do the matching, the proposed mechanisms utilize the preferences of workers based on a proposed Quality-of-Task (QoT) metric, and the preferences of tasks based on a Quality-of-Information (QoI) metric. To ensure their autonomous, reliable, and transparent execution, these matching mechanisms are integrated in an existing blockchain-based crowdsourcing framework, implemented using smart contracts. The mechanisms and framework are implemented using Solidity on a private blockchain and evaluated using a real dataset. They are benchmarked to the Nearest Neighbor Matching (NNM) mechanism. The proposed mechanisms demonstrate higher performance compared to the benchmark in terms of workers’ QoI, payment, satisfaction, and confidence. To demonstrate the need for each mechanism, the performance under different demand to supply contexts is measured in terms of the workers’ QoI, confidence, and the minimum payment. Each proposed matching mechanism was found to outperform the others in a range of demand to supply ratios. Finally, the proposed matching mechanisms are stable and feasible on-chain with reasonable execution cost.

Previous
Next 
Keywords
Two-sided preference

Matching

Blockchain

Crowdsourcing

Smart contract

Gale–Shapley

1. Introduction
The digital connectivity of individuals and companies worldwide has led to a shift in employment strategies. Crowdsourcing rose as an alternative to traditional employment for workers. A crowd member is employed to an individual task, at a time, in lieu of payment after completing the task (Zheng et al., 2017). It has been applied in domains such as environment monitoring (Ghermandi and Sinclair, 2019, Picaut et al., 2019, Alagha et al., 2019), healthcare (Leiter et al., 2014, Losina et al., 2017), and transportation (Chaudhary et al., 2016, Mukheja et al., 2017). Commercial crowdsourcing applications such as UpWork (UpWork, 2019), Uber (Uber, 2019), and Amazon Mechanical Turk (MTurk) (Amazon Mechanical Turk, 2018) have successfully utilized the crowd to perform requesters’ tasks.

Though successful, existing crowdsourcing platforms suffer from some drawbacks. For instance, many of these applications depend on centralized platforms, which hinder their use due to possible security threats such as denial of service, privacy leakage, and unverifiable execution (Meyer et al., 2019, Fullerton, 2019). In addition, crowdsourcing platforms do not always incorporate a centralized task allocation mechanism. Platforms such as UpWork and MTurk rely on workers choosing from the set of available tasks, which cannot guarantee the task completion or the quality of the sensing outcome. On the other hand, platforms such as Uber, deploy a centralized worker-task allocation mechanism responsible for matching workers to tasks based on a set of given criteria, however this still cannot guarantee the fair allocation of worker. For instance, in the case of Uber, the allocation mechanism was deemed to be biased towards requesters.1 Additionally, even though Uber incorporates the rating of passengers, unlike other platforms, this feature is not necessarily taken into consideration by the users, thus reducing its utility.2

In order to overcome the drawbacks of centralized deployment of existing crowdsourcing applications, blockchain (Wood, 2014a) has been proposed as a deployment platform for multiple areas such as Vehicular Ad hoc NETworks (VANET) (Lu et al., 2018a), and Cloud (Singh, 2018). Blockchain (Dinh et al., 2018) is a distributed immutable ledger of transactions, organized as blocks, confirmed by independent miners in the network for a fee. With the introduction of smart contracts (Luu et al., 2016), programs deployed with built-in functions, it became able to provide a trusted, immutable, and traceable execution for transactions.

Some blockchain-based crowdsourcing applications are Arcade City as a replacement for Uber (Marr, 2020), and Taskopus as a replacement for MTurk (Redman, 2020). While blockchain-based crowdsourcing frameworks such as (Delgado-Segura et al., 2016, Wang et al., 2018, Lu et al., 2018b, Li et al., 2019, Kadadha et al., 2020, Chatzopoulos et al., 2018, An et al., 2019, Wu et al., 2019, Kadadha et al., 2020) overcome the central deployment drawback, they still match workers to tasks through allocation mechanisms that are requester-biased without considering workers’ preferences, which may lead to workers rejecting or neglecting their allocated tasks.

To solve this problem, matching with two-sided preferences can be incorporated.Through matching, mutually agreed upon pairs are formed between two sets of beneficiaries. It has been applied to multiple domain such as Vehicular Fog Computing (Zhou et al., 2019), UAVs (Zhou et al., 2018), Business Processes (Eshuis et al., 2016), and Crowdsourcing (Abououf et al., 2019, Yang et al., 2018). In crowdsourcing with centralized platforms (Abououf et al., 2019, Yang et al., 2018), task matching mechanisms with two-sided preferences reduce the motivation of workers to reject their allocated tasks, when compared to one-sided preference task matching mechanisms.

Consequently, the research challenge this work tries to tackle is: How can tasks be allocated to workers in a trusted manner considering the preference of workers and requesters in a blockchain-based crowdsourcing framework to ensure the stability of the allocation pairs?

Table 1 presents the abbreviations used throughout the paper.

Contribution. In this work, two-sided preferences task matching mechanisms are proposed for blockchain-based crowdsourcing frameworks. The preferences of workers are calculated based on a proposed Quality of Task (QoT) metric, while the preferences of tasks are calculated based on an existing Quality of Information (QoI) (Kadadha et al., 2020). The computed preferences are shared with the blockchain where the matching mechanism is hosted and executed. Consequently, the need for a trusted centralized platform that performs the matching is overcome where the blockchain provides reliable, and traceable execution.


Table 1. List of abbreviations.

Abbreviation	Interpretation	Abbreviation	Interpretation
QoI	Quality of Information	QoT	Quality of Task
UMC	User Manager Contract	TMC	Task Manager Contract
TDC	Task Detailed Contract	GSM	Gale–Shapley Matching
NNM	Nearest Neighbor Matching	ISP	Internet Service Provider
DSR	Demand Supply Ratio	EVMs	Ethereum Virtual Machines
The two proposed matching mechanisms are namely: SenseChain+, and Gale–Shapley Matching (GSM). By design, each of them matches a worker to a task based on submitted preference lists where multiple workers can be matched to a task based on its requirement.

With SenseChain+, workers need to declare one preference at a time from their preference lists while a task declares its complete preference list. Then, the mechanism matches tasks to their highest preferred workers that declare his/her preference for stable matching. With GSM, workers and tasks declare their complete preference lists. The mechanism goes through workers’ preference lists proposing to the highest preferred available task for each worker. A task accepts and breaks a given match based on proposing workers and its preference for them to ensure the stability of the matching.

The proposed mechanisms are integrated with a blockchain-based crowdsourcing framework, designed using smart contracts. Such an integration overcomes the need for a centralized crowdsourcing platform that manages the overall process. Moreover, the use of blockchain provides users with identity privacy (using pseudonym addresses), execution transparency (using on-chain execution), and payment guarantee (using cryptocurrency). Three smart contracts are used: User Manager Contract (UMC) for user information, Task Manager Contract (TMC) for task information and matching, and Task Detailed Contract (TDC) for each task’s process. TMC holds the list of tasks, collects preferences, and implements the proposed task matching mechanisms.

The proposed mechanisms and framework are implemented in Solidity (Solidity, 2018) and deployed on a private blockchain using Ganache (Ganache ONE, 2019). They are evaluated, using a real dataset collected from the Xively platform,3 against the Nearest Neighbor Matching (NNM) mechanism. NNM is chosen to show the impact of introducing sorted preference lists to the matching process. In our framework, NNM matches workers to tasks in their acceptable list by finding pairs with the closest QoT and QoI values. The results show that SenseChain+ and GSM significantly improve the performance for requesters and workers when compared to NNM. Table 2 presents the improvement seen by the proposed work for workers and requesters.

Each of the two proposed mechanisms outperforms the other in a different range of Demand (tasks) to Supply (workers) Ratio (DSR). Therefore, it is possible to select the matching mechanism, that is more suitable to the current crowdsensing context. The stability of the proposed mechanisms is discussed as well as their cost efficiency. Indeed, the mechanisms are considered stable and feasible for on-chain deployment.


Table 2. Contribution improvement comparison.

Percentage of allocated tasks	QoI	Confidence	Payments	Satisfaction
Requesters	✓	✓	✓		
Workers				✓	✓
Therefore, the contributions of this work can be summarized as follows:

•
Introducing two-sided preferences of workers and requesters for task matching in blockchain-based crowdsourcing using QoT and QoI.

•
Proposing a Quality of Task (QoT) metric for workers to evaluate the available tasks.

•
Proposing SenseChain+ where the matching mechanism in SenseChain is modified to incorporate workers’ preferences.

•
Introducing a repeated one to many Gale–Shapley matching mechanism (GSM) for stable task matching on blockchain.

•
Integrating the proposed task matching mechanisms with a blockchain-based crowdsourcing framework, running as smart contracts, to overcome the limitations of centralized platforms.

Organization. The remainder of this paper is organized as follows. Section 2 presents the background and related work. Section 3 presents the system model where the QoI and QoT metrics are described along with the preference computation algorithms. Section 4.3 presents the proposed solution consisting of the matching mechanisms and the blockchain-based crowdsourcing framework. Section 5 presents the blockchain implementation. Section 6 presents the performance evaluation. Section 6.4 presents the cost analysis. Section 7 concludes the paper.

2. Background and related work
2.1. Crowdsourcing
Crowdsourcing, introduced by Jeff Howe (Howe, 2006), is defined as taking tasks from end-users and sourcing them to crowd members. A crowdsourcing model includes three main entities: requesters, workers, and a framework, which are described below.

•
A requester is an individual, or an organization interested in issuing tasks to be completed, for a given payment to workers.

•
A worker is a user interested in fulfilling available tasks.

•
The framework is an intermediary platform deployed by an organization to manage the crowdsourcing process between requesters and workers.

Fig. 1 shows a high-level view of the traditional crowdsourcing system model while showing the sequence of events the occur during the crowdsourcing process.

Although frameworks are generally deployed on a centralized architecture, they suffer from various challenges such as availability, non-repudiation, verifiable execution, and service costs. Its availability is threatened by Denial-of-Service (DoS) attacks which can be easily launched. In April 2015, Uber China users were faced with a service break that prevented them from updating the status of their rides once the trip ended (Fullerton, 2019). The opaque mechanisms executed at the platform prevent members from verifying the outcome of execution when in doubt. These above challenges motivated the integration of crowdsourcing with the modern blockchain technology in different works (Delgado-Segura et al., 2016, Wang et al., 2018, Lu et al., 2018b, Li et al., 2019, Kadadha et al., 2020, Chatzopoulos et al., 2018, An et al., 2019, Wu et al., 2019, Kadadha et al., 2020) for transparency and trust. These works will be elaborated on in Section 2.3.


Download : Download high-res image (200KB)
Download : Download full-size image
Fig. 1. Traditional crowdsourcing system model with the three main entities being requester, worker, and framework. The sequence of the typical process is depicted in numerical sequence of events that the arrows show.

2.2. Blockchain and smart contracts
Blockchain was introduced by Nakamoto (2009) to establish trust in distributed systems (Pierro, 2017) for Bitcoin exchange between users. It is a distributed immutable ledger of transactions that are time-stamped and organized as blocks. These blocks are maintained by distributed members miners, who verify these blocks in a process called mining. Mining is done using different consensus mechanisms such as proof-of-work, and proof-of-stake. They ensure significant effort was spent by a miner to verify transactions before appending the block to the chain, hence reduce the possibility of maliciously injected blocks.

Ethereum (Wood, 2014a) is an extension of the Bitcoin Blockchain that allows the execution of built-in programs known as smart contracts (Luu et al., 2016), in addition to cryptocurrency exchange. A smart contract is a digital agreement between parties in the form of a program with built-in functions that can autonomously run when invoked on Ethereum. Smart contracts enable the deployment of decentralized applications, as Ethereum can process, execute, and verify transactions in a decentralized, transparent, trusted, and autonomous manner. Additionally, it is fault-tolerant, highly available, immutable, and censorship-resistant (what are smart, 2020).

Blockchain has been proposed in multiple application domains (Al-Jaroodi and Mohamed, 2019) such as finance, healthcare, business processes (Udokwu et al., 2018, Norta, 2017), and logistics. In the following section, we focus on the incorporation of blockchain in crowdsourcing.

2.3. Related work
The idea of incorporating blockchain into crowdsourcing frameworks was first introduced in PaySense (Delgado-Segura et al., 2016) for secure incentive exchange. PaySense is a general framework that incentivizes workers to participate in tasks and traces their reputations in a secure, autonomous, and anonymous manner. The anonymity of workers is enabled by using Bitcoin wallets and addresses in the interactions, which preserves the identities of workers. However, workers are required to obtain certificates from a centralized authority to be eligible to submit to the off-chain Data Collection Server (DCS). DCS evaluates submissions from workers to determine their qualities for reputation update and payment calculation.

In Wang et al. (2018), the use of blockchain is extended from sharing secure incentives to evaluating the submissions of workers transparently by the miners. The proposed framework uses blockchain miners to calculate the quality of workers’ submissions and their entitled rewards. The evaluation is done according to criteria shared by the requester transparently. However, miners are assumed to have an additional layer of computational capabilities to calculate the contribution and reward values. Additionally, the framework relies on an off-chain server for task publishing and payment coordination, where the server can be untrusted.

In Lu et al. (2018b), ZebraLancer is proposed as a blockchain-based crowdsourcing framework that maintains users’ identity privacy and decentralizes the platform. Identity privacy is maintained through pseudonym addresses used when interacting with the system. Smart contracts created by requesters permit the exchange of submitted solutions and corresponding rewards between users, requesters, and workers, without compromising data or identity privacy. A contract includes the reward policy for the submissions in addition to the budget of the task. However, the corresponding reward for each submission is calculated off-chain while the calculation proof is submitted for verification using the zero-knowledge proof.

In Li et al. (2019), similar to Lu et al. (2018b), a decentralized crowdsourcing framework built on top of the Ethereum blockchain is proposed named CrowdBC. The framework allows requesters and workers to interact without the intervention of a trusted third party through the designed smart contracts. Requesters post tasks with worker acceptance criteria and evaluation functions. A contract is created for each task to handle its operation. The contract checks workers’ eligibility and evaluates their submission for payment transfer. Workers cannot differentiate tasks when selecting among them in a metric other than the budget. However, the budget is not sufficient as it would be distributed to all contributing workers.

In Kadadha et al. (2020), a decentralized blockchain-based crowdsensing framework is proposed, SenseChain. The proposed framework integrates crowdsourcing functions such as allocation, evaluation, and payments within the designed smart contracts. Workers submit reservations based on the QoI they provide for available tasks. Smart contracts allocate the maximum QoI workers to perform the tasks. The evaluation and payment are also integrated within the smart contract. While the reputation of the requester is proposed, it is not utilized by workers reserving tasks.

In Chatzopoulos et al. (2018), a blockchain-based crowdsensing framework is proposed for identity privacy and cost optimization. The interactions between crowdsensing providers and users are orchestrated by smart contracts and an Internet Service Provider (ISP). ISP identifies relevant users for tasks and creates temporary accounts for them to maintain their identity privacy when submitting bids to the designed auction smart contract. Next, an auction is run within the smart contract to assign users to tasks according to their bids, reputation, and locations while optimizing the payments of providers. The framework assumes a single requester issue all tasks. Thus, a worker cannot choose based on his preference for a requester. Furthermore, workers might be unfairly ignored by ISP when finding relevant workers.

In An et al. (2019), a crowdsourcing node selection mechanism is deployed with twice consensus on the blockchain. A consensus node is utilized as an intermediary between task publishers and users in the framework. It collects published tasks and determines the matching degree of users to tasks based on the user’s reputation, serviceability, and task type. The matching degree is used for the selection of users as the first consensus stage. A requester collects workers’ submissions and evaluates them. A limitation in the work is the consensus node, which is assumed to be a trusted centralized entity. However, it can be exploited for attacks in the calculation of the matching degrees.

In Wu et al. (2019), a blockchain-based crowdsourcing platform is proposed with Searchable Encryption for task matching, BPTM. The platform permits requesters to share their encrypted tasks for authorized workers to match with them. While the matching mechanism runs within a smart contract, it returns a static result based on the worker invoking it, accepted or rejected, where a pre-established authorization of workers to tasks is assumed. Lastly, the quality and the stability of the resulting matches are not studied in this work.

2.4. Discussion
Table 3 summarizes the existing blockchain-based crowdsourcing frameworks. The following limitations can be seen:

•
Majority of the efforts rely on an off-chain component, i.e. a centralized platform, to complement the functionality of the crowdsourcing framework such as user certification, worker allocation, or submission evaluation.

•
Existing works use some requester criteria to accept workers such as worker location, reputation, or QoI.

•
While works in An et al. (2019) and Wu et al. (2019) perform task matching, neither of them studies the quality of the generated matches or their stability. Furthermore, none of the existing works perform the allocation while considering the preferences of workers and requesters in a fully decentralized manner.


Table 3. Comparison of existing blockchain-based crowdsourcing works.

Paper	Off-chain component	Allocation mechanism	Evaluation mechanism	Worker preference
PaySense (Delgado-Segura et al., 2016)	Yes	–	–	–
Wang et al. (2018)	Yes	–	–	–
ZebraLancer (Lu et al., 2018b)	Yes	–	Requester	–
CrowdBC (Li et al., 2019)	–	Requester criteria	Smart contract	–
SenseChain (Kadadha et al., 2020)	–	Criteria (QoI)	Smart contract	–
Chatzopoulos et al. (2018)	Yes	Auction mechanism	Smart contract	Yes (Worker Bid)
An et al. (2019)	–	Criteria (Matching score)	Requester	–
BPTM (Wu et al., 2019)	Yes	Searchable encryption matching	Smart contract	Yes
Our model	–	Matching (requester preference)	Smart contract	Yes
3. Sytem model
In this section, two-sided preferences task matching mechanisms for blockchain-based crowdsourcing are proposed. First, the metrics used to determine the preferences of workers and tasks are presented. Second, the preference list selection algorithms that utilize the proposed metrics are illustrated. Third, the proposed task matching mechanisms that use the computed preference lists are detailed. Finally, the stability of the proposed mechanisms is discussed. Table 4 summarizes the notations used throughout the section.


Table 4. Table of notations.

Symbol	Interpretation	Symbol	Interpretation
Set of available workers		Set of available tasks
/
Range of worker /task 	
Completion time required by worker  for task 
/
Preference list of worker /task 	
/
Location of worker /task 
Distance between worker  and task 	
/
Reputation of worker /task publisher 
Number of submission slots at task 	
Quality of Information provided by worker  to task 
Quality of Task  to worker 	
Budget of task 
Minimum payment from task  to an allocated worker		Weight values
Reservation request list for task 	
The list of allocated workers to task 
3.1. Quality of Information (QoI) and Quality of Task (QoT)
In this paper, QoI and QoT metrics are proposed for spatial crowdsourcing tasks such as ride-sharing and environment sensing. Nevertheless, they can be updated by introducing additional relevant metrics to make them application-specific QoI and QoT. Quality of Information (QoI) is a standard metric used in crowdsourcing (Kadadha et al., 2020, Suliman et al., 2019, Abououf et al., 2020, Azzam et al., 2016, Kadadha et al., 2020) which reflects a worker’s capability to perform a given task by combining various metrics such as distance, reputation, and/or completion time of a task. With multiple available workers for task allocation in crowdsourcing, QoI is required to evaluate these workers. In this work, the QoI metric is selected for the context of spatial crowdsourcing where tasks are geo-tagged. Alternative QoI metrics can be used based on the context of the tasks the platform is concerned with. The used QoI metric combines worker’s reputation (
) to reflect his/her reliability, distance between task and worker to reflect the proximity, and the expected time to complete the task to reflect the timeliness of task completion. The parameters are assumed of equal contribution to the QoI metric. Consequently, the QoI is formulated to reflect the proportional contribution of each parameter in a cost efficient manner for on-chain execution. The QoI of worker  for task  (
) being calculated according to Eq. (1) (Kadadha et al., 2020). (1)
 
where 
 is the time required by the worker to complete the task, 
 is the euclidean distance between the task and the worker locations, and 
 is the global worker reputation. It is associated to his/her task completion rate given the allocated tasks. 
 is maintained and updated in the smart contracts to make its management decentralized, trusted and traceable. Hence, a reputation mechanism that reflects the reliability of workers and that is cost-efficient is needed. The proposed reputation mechanism, inspired by the Transmission Control Protocol (TCP) timeout period calculation (Feit, 2000), takes into consideration both the historical reputation and the sampled reputation. 
 is initialized to a default value and is updated at the end of the task based on the status of his/her submission according to Eq. (2). (2)
 
 
Accordingly, workers with a high reputation, short expected completion time, and/or small distance from the task will have high . These workers would be more preferable by tasks during matching.

Quality of Task (QoT) metric is proposed for workers to evaluate available tasks. In this work, QoT combines the task requester’s reputation (
) to reflect his commitment for issued tasks, minimum payment for the incentive, and distance from the task to reflect its proximity. Similar to QoI, the parameters are assumed of equal contribution and incorporated in a QoT function that reflects their proportional contribution with efficient on-chain execution. QoT of task  for worker  (
) is calculated according to Eq. (3): (3)
 
where 
 is the distance between the worker and the tasks, 
 is the least payment a worker is expected to get from the task. 
 impacts the workers’ preferences as a worker would rather perform a task with high payment than a task with low payment. It is calculated according to the following Eq. (4): (4)
 
with 
 being the total budget of the task and 
 is the number of matched workers who completed the task. 
 is associated with his/her task cancellation rate given the tasks issued. The reputation is updated at the end of each task (whether completed or canceled). The reputation mechanism is similar to that used for 
, where 
 is initialized to a default value upon registration and is updated according to Eq. (5): (5)
 
 
Accordingly, tasks with high requester’s reputation, high guaranteed minimum payment, or a short distance from the worker are assigned high  values; hence, considered of higher preference to the worker.

3.2. Task and worker preference list computation
Algorithm 1 shows the task preference list computation process. For each task , its requester calculates the euclidean distance between the task location and the location of each available worker , 
. If 
 is within the acceptable range by the requester, 
, 
 is calculated using Eq. (1). Then, the worker ID and QoI are added to the task’s preference list, 
. After going through all available workers, the requester sorts 
 in a descending order based on workers’ QoIs. The sorted preference lists are used when matching available workers to tasks.

Algorithm 2 follows a similar process to determine workers’ preference lists. Each worker  calculates the euclidean distance between its current location and the location of each available task , 
. If 
 is within the acceptable range by the worker, 
, 
 is calculated using Eq. (3). Then, the task ID and QoT are added to the worker’s preference list, 
. Lastly, the worker sorts the list of preferences in a descending order based on tasks’ QoT. The sorted preference lists are used when workers choose tasks to perform.


Download : Download high-res image (199KB)
Download : Download full-size image

Download : Download high-res image (207KB)
Download : Download full-size image
4. Proposed solution
4.1. Two-sided task matching mechanisms
Two-sided preferences task matching mechanisms are proposed for blockchain-based crowdsourcing. Different from existing efforts that focus on the preferences of requesters, workers’ preference is also considered in the proposed mechanisms.

A worker’s preference plays an essential role in presenting his expected fulfillment to a matched task as the preference is computed according to his/her interest. Therefore, the objective of the task matching mechanisms can be seen as improving the quality of the selected workers for requesters while increasing the satisfaction of workers performing tasks. Both task matching mechanisms are designed to run within a decentralized blockchain-based crowdsourcing framework, hence are optimized to ensure their cost efficiency.

SenseChain+ improves on the allocation scheme proposed in SenseChain (Kadadha et al., 2020) where it is assumed that workers will reserve tasks their preferred tasks. In SenseChain, a reserve-allocate mechanism is used. A worker identifies available tasks and calculated his QoI to them. Then the worker submits a reservation request to the highest QoI task; the highest preferred task. The task accepts the highest QoI workers that submitted a reservation to it. In this scheme, workers sequentially reserve tasks and update their preferences based on the decision of the reserved tasks. SenseChain assumes that workers reserve tasks based on the QoI metric. However, workers might deviate from this assumption and reserve tasks that meet their own preferences quantified as QoT in our context. SenseChain+ overcomes this limitation by allowing workers to reserve based on their preferences determined according to the QoT metric while the acceptance of a worker is based on his/her QoI to a task. Thus, the preferences of both workers and tasks are considered in the matching.

Algorithm 3 illustrates the steps in SenseChain+ matching mechanism.


Download : Download high-res image (361KB)
Download : Download full-size image
The mechanism uses the preference lists of workers and requesters pre-shared with the smart contract. 
 is held the smart contract for each task. The preference of a worker is added to the list of reservation requests for the task he/she prefers, 
.

The smart contract evaluates all the collected 
. If 
 is sufficient to accept all current reservations, reservations are accepted and 
 is updated accordingly. Otherwise, the reservations are sorted in a descending order using the quicksort algorithm (Hoare, 1961) and the most preferred 
 workers by the task are accepted; workers with the highest QoI values. When 
 is zero, the task  is removed from . Once the matching is done, Workers update their locations based on their matched tasks and the smart contract clears the reservations for tasks. Workers reserve additional tasks based on their updated location. The mechanism accepts workers’ reservations until no more tasks are available, or no more workers are interested in any task.

Lemma 4.1

Each task allocation in SenseChain+ requires 
 time to be performed.

Proof

The allocation of a task requires sorting its reservation requests 
 in a descending order using the quicksort algorithm which is of  times complexity. □

Therefore, SenseChain+ has a run-time of 
.

Gale–Shapley Matching (GSM) allows users to submit a list of preferences for the matching mechanism. GSM is a repeated one-to-many adaptation of the original Gale–Shapley algorithm, which provides stable, high-quality matches. The proposed GSM matches based on workers and requesters’ preferences lists constructed using QoI and QoT metrics. The preference lists are constant during the execution of the matching mechanism.

Algorithm 4 illustrates how workers are allocated to tasks in GSM mechanism.


Download : Download high-res image (430KB)
Download : Download full-size image
The mechanism uses the preference lists of workers and requesters pre-shared with the smart contract. 
 and 
 are held in the smart contract. Different from SenseChain+, workers can submit more than one preference to GSM. It goes through the preference list of each worker sequentially. For each unallocated worker , a proposal is done from the worker to the next possible task  in its preference list. That is the task with the highest preference which has not rejected . While 
 is greater than zero,  accepts  and its ID is appended to the list of temporarily allocated workers, 
. Otherwise, the algorithm checks the currently allocated workers for . If there is another worker 
 which  prefers  over, based on 
, 
 is replaced with  in 
. After going through all the workers’ proposals, workers update their locations based on their allocated tasks. In addition, tasks which 
 are removed from . Lastly,  for each task is appended to their  list. The steps are repeated for workers to submit preference again based on their new locations. Nevertheless, each iteration of Gale–Shapley is considered an independent round, and accepted proposals by the end of an iteration cannot be revoked afterwards.

In terms of run-time analysis for GSM, the mechanism runs until there are no workers with proposals for available tasks.

Lemma 4.2

There are no more than  proposals during a run of the GSM algorithm.

Proof

No worker proposes to a task more than once. If all the  workers propose to all the  tasks, there would be  proposals. Since no worker propose to a task more than once, there cannot be any additional proposals. □

Lemma 4.3

Each proposal in GSM can be performed in  time.

Proof

This is achieved by using the mapping data structure to maintain the needed information about the proposals and index to it in constant time. □

Since there are at most  proposals each taking  time, the GSM algorithm has a run-time of .

Fig. 2 abstracts the method followed in the proposed task matching mechanisms. SenseChain+ evaluates all reservations submitted to a task on one go. GSM follows an iterative approach when matching workers and allows matches to be broken if a new match of higher preference appears.

4.2. Mechanism stability
The stability of the matching mechanism reflects its ability to generate matches without blocking pairs. A blocking pair is a worker-task matching that can be broken by either side for a better match. For a worker, a match is stable when there is no alternative task that would accept him and that he prefers more than the currently matched task. For a task, a match is stable if the task has no other interested worker it prefers over the currently allocated workers.


Download : Download high-res image (715KB)
Download : Download full-size image
Fig. 2. Task-matching mechanisms overview.

Both proposed mechanisms are stable by design. SenseChain+ guarantees the stability of the generated matches by making workers sequentially reserve for tasks according to their preference lists. When a worker requests a reservation to a task, the mechanism matches workers based on task preferences for them. If a worker is matched, he would be matched with his highest preference and available task. Thus, the match would be stable for both the task and the worker. Alternatively, if the worker is not matched, he continues to submit to subsequent tasks in his preference list. Once accepted, the worker would be matched to the highest preference possible task.

On the other hand, GSM ensures stability by considering the preferences of workers sequentially and allowing tasks to unmatch workers. The mechanism goes through the sorted list of preferences for a worker proposing to tasks. A task can accept, or reject a worker based on its preference for the worker. When the task receives a proposal, it evaluates the current worker against the previously matched workers. If the current worker is of higher preference than any of the matched workers and it has no slot to accept him, it unmatches with the lowest preference worker and accepts the new proposal. Thus, it accepts the highest preference workers making the match stable. The mechanism would then propose to the next preferred task for the unmatched worker. This way, a worker is always matched to the highest preference task that would accept him.

4.3. Blockchain-based crowdsourcing framework
This work proposes a blockchain-based crowdsourcing framework with two-sided preferences task matching mechanisms deployed for the allocation of workers to tasks. The framework integrates the two proposed matching mechanisms and is implemented using smart contracts fully deployed on Ethereum blockchain (Wood, 2014b). Workers and requesters interact through the transparent smart contracts rather than an opaque centralized platform.

Fig. 3 shows a high-level view of the proposed crowdsourcing framework architecture deployed on Ethereum. The framework assumes the existence of requesters and workers within a given area who interact with the framework. Three smart contract structures are used: User Manager Contract (UMC), Task Manager Contract (TMC), and Task Detailed Contract (TDC). They perform the full functionality of the blockchain-based crowdsourcing framework. The full implementation is detailed in Section 5.

In this framework, workers and requesters register to UMC to maintain their information. Requesters can issue geo-tagged tasks to be saved within TMC along with the preference lists of possible workers for these tasks. Then, workers with a given radius of interest can share their preferences for available tasks with TMC. TMC executes one of the proposed task matching mechanisms to allocate tasks to workers. Post allocation, workers and requesters can contact tasks’ TDCs to submit and retrieve solutions for a task. The TDC is responsible for the evaluation of submitted solutions and the fair distribution of incentives.


Table 5. Designed data structures.

User
Address (Ethereum address)	Role (string)	Reputation (uint8)
Accepted/Canceled requests (uint)	Total requests (uint)	
Task
Requester (Ethereum address)	Requester reputation (uint)	TDC address (Ethereum address)
Due date (uint8)	Minimum reputation (uint8)	Minimum payment (uint8)
Status (string)	Data type (string)	Location (string)
Total solutions (uint8)	Budget (uint)	
Solution
Worker (Ethereum address)	Completion time (uint)	QoI (uint)
Submission (string)	Submission quality (uint)	Payment (uint)
5. Blockchain implementation
5.1. Data structures
Table 5 shows the designed data structures for the proposed crowdsourcing framework , , and .

 holds the information of a single user registered to the framework. The address variable holds the user’s Ethereum address, while the Role conveys the role of the user within the framework (requester or worker). Reputation reflects the historical reliability of the user based on his previous interactions with the framework. Reputation is updated after each task using the accepted/canceled requests and total requests variables as proposed in Kadadha et al. (2020).

 holds the information of each task published to the framework. The requester’s address and reputation are saved for workers to use during computation of preference lists. The task’s TDC holds the address of the task’s contract, and is explained further in the next section. The due date reflects the deadline of the task. Minimum reputation holds the reputation value used to filter eligible workers based on the requester’s requirement. Total Solutions holds the maximum number of workers required for the task. Budget and Minimum Payment hold the total budget assigned by the requester to the task and the minimum payment a worker gets for completing the task, respectively. The minimum payment is calculated using the budget and total solutions as shown in Eq. (4). The Data Type identifies the required data by the requester. Lastly, the Status indicates the current status of the task: accepting workers or completed.

 holds the information of a matched worker and their submission. It holds the Address of the allocated worker, and the suggested Completion Time by the worker. Both metrics are set when an object is created. The Submission variable holds the data submitted by the worker for the task.Submission Quality and Payment are based on the evaluation result for the worker’s submission relative to other workers’ submissions to the task.

5.2. Smart contracts
User Manager Contract (UMC), shown in Table 6, maintains a list of users, requesters, and workers, registered in the framework. Users’ information is saved as  objects in the array of users. The contract has two main functions: , and .  permits a user to register to use the framework by taking his/her Ethereum address and intended role. It appends the submitted parameters by the user with the default parameters needed to construct a  object. The new  object is appended to the array of users.  is an internal function called explicitly by TMC and TDC to update users’ reputations. Updating worker’s reputation is based on the evaluation of his submission, whether accepted submission or rejected. The update of a requester’s reputation is based on the final status of his task, canceled or completed.

Task Manager Contract (TMC), shown in Table 7, is responsible for maintaining a list of tasks that have been published by requesters to the framework. Tasks’ information are saved as objects in the array of tasks. In addition, TMC is responsible for allocating workers to tasks using the integrated task matching mechanism. The resulting allocations are saved in , a mapping of task addresses to an array of allocated workers’ addresses. The contract has 6 main functions within it: , , , , , and .


Table 6. User Manager Contract (UMC).

Variables
User list (User [])
Function	Parameters	Return
Ethereum address, role	–
User address, User evaluation result, Task status	–
 permits a requester to publish a task by submitting the  object attributes while transferring the task’s budget to TMC’s address. The budget ensures workers will receive their agreed-upon payments once they fulfill the task requirements. Otherwise, the budget will be transferred back to the requester.  creates a TDC corresponding to the task to which the task’s budget is transferred. The TDC’s address and the task’s information are encapsulated in a  object and appended to the list of tasks. The  function returns the list of tasks for interested workers.

 and  functions allow workers and requesters to submit their preference lists. The lists are an ordered array of addresses that reflect the preference of each of them. For the worker, the addresses are for available tasks reflecting their preferences to perform them. For the requesters, the addresses are for available workers and ordered based on the preference for workers to do a task.

The  function is the main component in the contract as it allocates workers to tasks. The function utilizes the preferences submitted by workers and requesters to determine the allocations based on the used task matching mechanism within the function. The allocations are then pushed to each task’s TDC. Workers do not start performing a task before being matched to a task to guarantee the evaluation of their submission.  function is used to keep track of the progress of the task. The task can be  if it has not received all the required workers, or  if it is waiting for allocated workers. Besides, the task can be  if it has received all the submissions it requires or  if the requester decides to cancel it.

Task Detailed Contract (TDC), shown in Table 8, is responsible for the process of a single task. In addition to holding the information of the task, the contract receives the list of allocated workers and creates  objects for each of them. These objects are used by workers to submit their solutions for the task. A worker not allocated to the task cannot submit to it. TDC has three main functions: , , and . The  function is invoked by TMC to inform TDC about the list of workers’ addresses that have been allocated to the task. In turn, TDC creates a  object for each worker’s address. The  function takes the solution from an allocated worker and saves it to his corresponding  object. Lastly, the  function is invoked when all submissions have been collected, or when the task reaches its due date. It evaluates the quality of collected solutions with respect to one another and determines the corresponding payment for each worker. As TDC has the task budget, it transfers the corresponding payment to each worker.


Table 7. Task Manager Contract (TMC).

Variables
Task list (Task [])	Allocated (Task Address = Workers Addresses [])
Function	Parameters	Return
Task attributes and budget	–
–	Tasks[]
Addresses []	–
Addresses []	–
–	Allocations
Status	–

Table 8. Task Detailed Contract (TDC).

Variables
Task information (Task)	Task solutions (Solution [])	
Function	Parameters	Return
Workers addresses []	–
Data (string)	–
–	Quality (uint[]) and Payments (uint[])
5.3. Framework scenario
Fig. 4 shows the scenario for the proposed crowdsourcing framework. It presents the interactions between workers, requesters, and the smart contracts constituting the framework.

User Registration. Users–requesters and workers, register to UMC by sharing their information; Ethereum addresses, role and location, with . UMC saves the information to the worker’s list and initializes the user reputation to the default value. Registration allows users to publish new tasks or fulfill existing ones, based on their roles. Each user is assumed to have a single Ethereum address associated to his identity to prevent him/her from biasing the framework through their submissions.


Download : Download high-res image (457KB)
Download : Download full-size image
Fig. 4. Framework Scenario. UMC is User Manager Contract, TMC is Task Manager Contract, TDC is Task Detailed Contract.

Requester Task Creation. A requester interested in publishing a task shares the task’s information with TMC’s  function.  requires the task’s budget, location, and the number of workers. The requester’s address is set as the sender’s address. Subsequently, TMC creates a TDC for the task to which it moves the task’s budget. The TDC address is appended to the task’s information to add it to the list of available tasks.

Requester Preference Declaration. A requester is required to submit his tasks’ preference list for the selected matching algorithm to run. The requester queries UMC to identify available workers and their information; reputation, average completion time and location. Next, the requester calculates the preference list using Eq. (1) and Algorithm 1 before submitting it to the  function in TMC.

Worker Preference Declaration. A worker interested in fulfilling tasks queries the  function in TMC. The function returns the available tasks with their locations, requesters’ reputations, and minimum payments. The worker identifies tasks within his radius of interest. Subsequently, the worker determines its preference list according to Eq. (3) and Algorithm 2 before submitting it to the  function in TMC.

Matching Allocation Process. An iteration of the proposed task matching mechanism  is executed at TMC.  implements either one of the proposed two-sided preferences task matching mechanisms shown in Algorithms 3–4. The function considers the submitted preferences of workers and requesters to TMC and matches workers according to the deployed matching mechanism. The resulting allocations are pushed to TDCs for the workers to submit their task results.

Worker Submission. Once a worker completes an assigned task, the worker submits the result to the  function in the task’s corresponding TDC. TDC waits for all allocated workers to submit their results before it evaluates their qualities in a quantitative manner. The evaluation result determines the payment TDC will transfer back to each worker for their task accomplishment. Payment is calculated as the minimum payment given in Eq. (4) in addition to a payment based on the quality of the submission.

While there are incomplete tasks, requesters can update the preference lists of their tasks, and workers can change their preference lists based on tasks’ availability. Then, the matching mechanism re-runs to allocate interested workers to tasks.

6. Performance evaluation
The proposed two-sided preferences task matching mechanisms for blockchain-based crowdsourcing aim to generate matches that take into consideration the preference of workers and requesters, while being cost-efficient. Two evaluations are conducted. First, the performance of the two proposed task-matching mechanisms is evaluated and compared to a matching mechanism without preference lists. The evaluation criteria are: (1) maximum achievable allocation for tasks to workers and the number of iterations required to achieve it, (2) QoIs of workers selected for tasks, and minimum expected payments given to workers, and (3) the quality of the resulting matches in terms of workers’ satisfaction for their task and confidence in workers completing them. Second, an evaluation for the execution cost of the proposed task-matching mechanisms to confirm their feasibility and cost-efficiency.

6.1. Benchmark
There is no existing blockchain-based crowdsourcing work that proposes task matching with two-sided preferences. While the work in Li et al. (2019) is very important, its contribution is different from ours as it focuses on the accuracy of the completed tasks and the cost of executing the framework functions. An advantage in Li et al. (2019) is that it requires less dependency on declared information by workers where no allocation mechanism is introduced. However, this might hinder the stability and the completion of tasks. On the other hand, our proposed framework has an allocation mechanism to improve performance by allowing workers and task requesters to declare their preferences.

Thus, the proposed mechanisms are benchmarked to a modified version of the Nearest Neighbor Matching (NNM) mechanism to ensure the evaluation fairness. NNM relies on propensity score (Dehejia and Wahba, 2002) and an acceptable list to match members. The propensity score, calculated based on existing observations to predict the outcome, is used to generate well-matched groups of similar propensity scores. For consistency with the proposed mechanisms, propensity score is replaced with the proposed QoI and QoT metrics. The QoI and QoT values are normalized to the same range to match tasks and workers using NNM.

Algorithm 5 illustrates the steps in NNM mechanism.


Download : Download high-res image (404KB)
Download : Download full-size image
The acceptable lists of available tasks, 
, are computed using Algorithm 1 by their respective requesters, and shared with the framework. Similarly, the preference lists of interested workers, 
, are computed using Algorithm 2, and shared with the framework. The framework identifies an unallocated worker  with the highest 
 value, and matches the worker to the task  with the closest 
 value to 
. Afterward,  is removed from  and 
 is updated. When 
 is zero,  is removed from . This is repeated until all workers are checked. Once the mechanism is terminated, the locations of workers are updated to update their preference lists for the next iteration of the mechanism.

6.2. Evaluation setup
The mechanisms are implemented and compiled using Solidity (version 0.5.3) (Solidity, 2018). Solidity is the programming language used for Ethereum. Web3j (Web3j, 2018), a library for Java applications on the Ethereum network, is used for interacting with the contracts and implemented mechanisms. A Ganache client (Ganache ONE, 2019) is used to deploy a local test Blockchain with several addresses that are created to map workers and requesters interacting with the framework. The dataset of radiation readings from approximately 500 workers is used in the evaluation. Table 9 presents: (1) the workers dataset attributes, (2) the parameters of the tasks within the area of the workers, as well as (3) the parameters for the matching mechanisms.


Table 9. Performance evaluation parameters.

Worker dataset attributes
Number of workers	100
Area (Latitude, Longitude)	([35, …,44],[136,…,142])
Data type	Radiation level (μSV)
Completion Time ()	[1, …, 24] h
Workers reputation ()	[40, …, 70]
Maximum tasks per worker	7
Task generation parameters
Number of tasks (N)	[50, 100, …,250]
Location (Latitude, Longitude)	([35,…,44],[136,…,142])
Task budget	[0.01,…,4] ($)
Number of slots per tasks ()	5–7 workers
0.5
Radius of task/worker interest ()	2
Matching algorithms parameters
Maximum 	1000
Maximum 	200,000
Maximum iterations for matching algorithm	Unlimited
Maximum preference list length	20
Maximum Total Worker Satisfaction ()	100
6.3. Evaluation results and analysis
Fig. 5a presents the percentage of allocated tasks by the proposed task matching mechanisms. The figure shows that GSM and SenseChain+ outperform NNM when the number of tasks is varied. GSM and SenseChain+ match workers to tasks in a sorted order based on the preference lists. This permits workers to perform the highest preferred tasks and maximizes the percentage of allocation. NNM results in a lower percentage of allocation as workers in each iteration are matched in each iteration based on their acceptable list rather than preference lists. In addition, the figure shows that the percentage of allocated tasks drops the as number of tasks increases for all the matching mechanisms. The drop is due to the lower number of available workers for increasing number of tasks, and the assumption that a worker can perform a maximum of 7 tasks.

Fig. 5b shows the number of iterations required by the proposed mechanisms to maximize the allocation percentage. The iterations are terminated when either all tasks are matched or no worker is interested in available tasks. NNM requires the highest number of iterations, followed by SenseChain+ and GSM. SenseChain+ and GSM match workers to tasks based on their sorted preferences. Hence, a worker will re-consider a task that has rejected him. SenseChain+ allows workers to reserve one preference within an iteration because it relies on a reserve-allocate scheme. Alternatively, GSM allows workers to submit up to 20 tasks in their preference list, which increases their matching probabilities. Hence, the difference in the number of iterations required to maximize the percentage of allocated tasks. The high number of iterations in NNM is a consequence of matching based on the similarity. Therefore, a worker might repeatedly show interest in the same task. The number of iterations required by the mechanisms increases with more tasks for NNM and SenseChain+. Contrarily, GSM requires an almost constant, low number of iterations, making it more scalable.

Fig. 6a presents the average QoI of workers matched to tasks. The figure shows that GSM outperforms the other two task matching mechanisms. SenseChain+ assumes workers will send their reservations one preference at a time, which results in tasks accepting workers from a smaller pool compared to GSM. Indeed, workers in GSM submit a list of preferences. Then, if a worker is rejected from a task in his preference list, he can still be considered in the other tasks. For NNM, the low QoI is a consequence of the matching mechanism. While it might generate well-matched pairs for the initially constructed matches, the quality of the later matches is low. Furthermore, for all the task-matching mechanisms, the figure shows that the QoI of selected workers increases for GSM when more tasks are available. For SenseChain+ and NNM, the QoI values fluctuate with a small margin of difference but remain lower than GSM in all cases.


Download : Download high-res image (267KB)
Download : Download full-size image
Fig. 5. Overall matching mechanisms performance.

Fig. 6b shows the average minimum payment each worker acquires from his matched tasks. Workers are interested in the payment acquired since it is part of their preference list computation. The figure shows that GSM gives workers the highest expected minimum payment followed by SenseChain+, then NNM. Furthermore, the minimum payment per worker increases with more tasks for all the matching models. This is due to the availability of more tasks that are willing to pay workers for their submissions in addition to the workers’ ability to perform the additional tasks.

Fig. 7a presents the satisfaction of all the workers with their matching — Total Worker Satisfaction (TWS). TWS shows the satisfaction given the deviation of the order of all the tasks matched to workers from how the tasks are ranked in their preference lists. It is calculated according to Eq. (6): (6)
 
 
where  is the number of available tasks, 
 is the set of selected workers for task , and  is the maximum total worker satisfaction.  occurs when all the ranks of the tasks are equal to their orders in the matching. 
 is a penalization factor given the deviation of task  matched to worker  in iteration  is calculated according to Eq. (7): (7)
 
where 
 is the number of tasks in the preference list of worker , 
 is the rank of task  in the preference list of worker , and 
 is the order of task  in the list of matched tasks to worker .


Download : Download high-res image (256KB)
Download : Download full-size image
Fig. 6. Workers’ performance.

GSM achieves the highest worker satisfaction compared to NNM and SenseChain+, though it does not always maximize TWS. SenseChain+ provides better performance than NNM as it matches workers based on their sorted preference lists. However, since workers reserve one task at a time, the probability of workers reserving the same task increases. With a limited number of slots, workers might be rejected from the reserved task and lose other preferred tasks due to the submission of one reservation. This increases the deviation in the order of matches from the ranks of the tasks in their workers’ preference lists. In GSM, the satisfaction increases since workers’ preferences are spread over more tasks, which in turn increases the probability of workers being assigned to tasks adhering to their ranks.

Fig. 7b shows the total confidence of matched workers — Total Worker Confidence (TWC). In this context, the confidence is inversely proportional to the rank of the allocated task in a worker’s preference lists. TWC is calculated according to Eq. (8). (8)
 
where  is the number of available tasks, 
 is the set of selected workers for task , and 
 is the rank of task  in the preference list of worker .

TWC defines the total confidence of the selected workers to a given task after applying the proposed matching mechanism. It is a metric that measures how well the mechanism conformed to the preferences of the workers. It is computed after the allocation. A high TWC value implies that the tasks assigned to workers are of higher order of preference.

As evident in Fig. 7b, the value of TWC is higher for SenseChain+ and GSM, when compared to NNM. The higher TWC value in former implies that the matches formed are also of higher preference to the workers. The lower confidence in NNM is attributed to neglecting the rank of tasks in the worker’s list when matching, which is not the case with SenseChain+ and GSM.

6.4. Cost analysis
In this section, the cost of submitting preferences and executing the proposed matching mechanisms on Ethereum blockchain are presented to assess their feasibility and cost-efficiency. For the cost analysis, the evaluation metrics in Table 9 are used while fixing the number of tasks to 50 available tasks. The smart contract functions are executed to collect consumed gas to mine the transactions. Next, the gas consumption is converted to Ether cost given a gas price of 
 Ether (4 Gwei). This value leads to an average transaction confirmation time (time for running the matching algorithm) of 0.8 min (Ethereum Gas Station, 2019). Last, the cost is converted to monetary value in USD currency where  Ether  $209.2 (as of June 1st ) (Ethereum Price, 2018). Table 10 summarizes the acquired costs for the functions in the three different units.

Creating a task requires the requester to pay an execution fee of $0.26 to the smart contract. Preference submission function charges each user–worker or requester, $0.06 for each preference they add as part of their preference list. The cost of running the task matching mechanisms varies with SenseChain+ requiring  $0.63 per task and GSM requiring  $0.28 per task. The difference in the cost is a consequence of the difference in the mechanism and the number of iterations required as shown in Fig. 5b.


Table 10. Cost of framework functions.

Functionality	Gas Consumption	Ether Cost	USD Cost
Task Creation	322 915	0.0013	$0.2687
Preference Submission	82 388	0.00033	$0.0686
Matching Model	SenseChain+	752 208	0.0030	$0.6288
Gale–Shapley Matching (GSM)	345 280	0.001381	$0.2873
SenseChain+ and GSM follow a sequential matching process by taking each worker’s preference, and checking it is feasibility for the task of interest. GSM indeed has a longer preference list compared to SenseChain+, but the latter still suffers from higher cost due to the higher number of iterations and workers re-submitting to tasks. On the other hand, GSM matches workers based on the order of their preference reducing the number of checks for redundant entries. It can be concluded that both mechanisms are feasible on-chain and require reasonable cost for execution.

To maintain the scalability of the matching mechanisms, the environment can be divided into geographical zones that tasks and workers are mapped to. Zones reduce the number of tasks and workers considered in the matching, especially for location-dependent tasks. The matching mechanisms can be run for each zone individually for a lower execution cost compared to one matching for the whole environment as in Kadadha et al. (2020).

6.5. Discussion
After conducting performance evaluation and the cost analysis of the proposed mechanisms, the following strengths and weakness could be derived.

The proposed matching mechanisms and framework indeed improve the performance from the framework, requester, and worker standpoint. For the framework, it is able to maximize the percentage of allocated tasks and reduce the number of runs of the matching mechanism, required to allocate the available tasks. For requesters, it improves the QoI of allocated workers to perform tasks, while also reducing the payment expected for these workers. For workers, it improves their satisfaction and task completion confidence are improved.

On the other hand, the results presented demonstrate the performance of the matching mechanisms for delay-tolerant tasks. With such tasks, the delay introduced from collecting the preferences and executing the matching mechanism is acceptable. For time-sensitive tasks, it would require further exploration to ensure that the performance is appropriate when blockchain is used.

6.5.1. Usability context evaluation
The performance of each the proposed mechanisms depends on the number of available tasks and workers, defined by the Demand (tasks) to Supply (workers) Ratio (DSR). DSR reflects the competition among workers. A small DSR indicates high competition while a big DSR implies low competition.

Table 11 illustrates how the performance of SenseChain+ and GSM changes when varying DSR. The ratio DSR is varied between 0.2 and 1.2 with increments of 0.2 by varying the number of workers and tasks for each DSR. When observing the QoI of selected workers, SenseChain+ performs better than GSM for DSR less than 0.8. GSM outperforms for DSR values equal to and greater than 0.8. For worker confidence, a similar trend is observed where SenseChain+ is better when DSR is less than 0.6 and GSM for higher values. The performance of the two mechanisms in terms of minimum payment is alike when DSR is less than 0.6. However, GSM exceeds SenseChain+ starting from 0.6 and above. The observed trend of SenseChain+ outperforming at small DSR values is attributed to having many workers sharing their preferences to a smaller number of tasks. Due to the high competition, workers need to update their preference constantly based on the availability rather than share a list of preferences.For a big DSR value, workers have a big pool of tasks to share preferences for. With the big number of tasks, a worker’s preference does not need constant update like SenseChain+ to do well.


Table 11. Mechanisms performance under varying task to worker ratio. The outperforming mechanism result is in bold and the transition in performance is highlighted.



7. Conclusions
In this work, two-sided preferences task matching mechanisms, SenseChain+, and GSM, are proposed for blockchain-based crowdsourcing. The preferences of workers are computed using the proposed QoT metric, while those of the tasks are computed based on the QoI metric. Despite that both matching mechanisms use the same metrics, each one runs a distinct algorithm to match workers and tasks. SenseChain+ considers a reserve-allocate scheme where the worker submits one preference at a time and waits for a decision. Alternatively, GSM lets workers submit a list of preferences and matches them to the highest possible one. The matching mechanisms are deployed within a blockchain-based crowdsourcing framework implemented through multiple smart contracts.

The matching mechanisms are evaluated on a private test blockchain using a real dataset. They are benchmarked against NNM, which matches based on the similarity between a worker and a task’s score. Compared to NNM, SenseChain+ and GSM show superior performance for requesters in terms of percentage of allocated tasks (at least 18%), selected workers’ QoIs (more than 13%), and the confidence of workers performing the tasks (at least 85%). They also demonstrate better performance for workers in terms of the payments expected (more than 6%) and satisfaction for the matches (greater than 5%). While both proposed mechanisms are better than NNM, each of them maximizes the performance in a different context based on the number of workers and tasks. Moreover, the mechanisms are feasible and cost-efficient when deployed on Ethereum to satisfy the desired properties of blockchain-based crowdsourcing. Indeed, introducing the QoT metric along with the QoI metric ensured that the matches fairly balanced the preferences of workers and tasks. Furthermore, incorporating two-sided preference lists contributed to the improved performance of the crowdsourcing framework in terms of the resulting matches when compared to matching without preference lists (NNM).

While stability is guaranteed with the proposed task matching mechanisms, they in fact require users to declare their preferences. In future work, this work can be extended to enable the framework to recommend tasks to available workers based on their previous task allocation. To do so, the framework could be provided with more information about the workers to increase the task completion rate.