Robotics is the multi-disciplinary domain that is booming in today’s world, and expanding its roots deep into various fields of research, manufacturing industries, healthcare, and even in our day-to-day lives. Nevertheless, as with any other evolving technology, robotics face numerous challenges. In this context, lately, blockchain technology has been identified as a promising technology to resolve many of these issues such as identification of malicious/rogue nodes, malfunctioning/faults in automated processes, non-compliance to the agreed norms and privacy rules, security attacks on robotic systems, and non-transparency in performance monitoring and audits. In particular, blockchain with its features like decentrality, immutability, provenance, low operational cost, tight access control, and trustworthy operations, can offer significant improvements to new applications and use cases driven by robotics. Thus, the paper begins with exploring the key requirements and technical challenges encountered by robots in general. Next, it provides detailed overview of blockchain technology in a tutorial style. Then, the role of blockchain for different uses cases of robotics are surveyed. Furthermore, various technical challenges that need to be mitigated to harness full potential of blockchain for robotics are highlighted. Finally, the future research directions are presented that can pave the way ahead for advancements and profitable integration of blockchain in the realm of robotics.

Previous
Next 
Keywords
Blockchain

Robotics

Smart contracts

1. Introduction
With the continuous advancements in the field of computer science, varying from high-speed computations to intelligent self-sustaining systems, there has been a huge impact on other related fields like biomedical engineering, robotics, aerospace engineering, and so on. Robotics, being the recent trend and major interdisciplinary field among the others in the scientific community, has adopted various technological assets from multiple disciplines. One such fast-developing and revolutionized asset is blockchain technology.

The blockchain, being a Peer-to-Peer (P2P) electronic record-handling technology, gives authentication and validation to the logged events in the form of transactions by acting as a distributed ledger without the need of a central authority. The transactions are stored as a growing list of records, called ‘blocks’, which are linked by cryptography techniques. The popularity of the blockchain is mostly due to its decentralized architecture and byzantine fault-tolerant consensus mechanism. With every node having the same copy of the chain of blocks with them, the fraudulence in the transactions can easily be detected and removed from the blockchain.


Table 1. Summary of the main Acronyms used in this paper.

Acronym	Definition
aRNS	Artificial Robot Nervous System
AI	Artificial Intelligence
AIRA	Autonomous Intelligent Robot Agent
ADV	Autonomous Delivery Vehicle
ASR	Adaptive Social Robot
CRs	Cooperative Robots
DCS	Distributed Control System
DLT	Distributed Ledger Technology
DPoS	Delegated Proof-of-Stake
EST	Energy Storage Technology
HRI	Human–Robot Interactions
IFR	International Federation of Robotics
IR	Infrared
IoT	Internet of Things
LED	Light Emitting Diodes
LIDAR	Light Detection and Ranging
LoRa	Long Range
MASs	Multi-Agent Systems
MEC	Mobile Edge Computing
MD5	Message Digest 5
PBFT	Practical-Byzantine-Fault-Tolerance
PoG	Proof-of-Graph
PoW	Proof-of-Work
PoS	Proof-of-Stake
PoA	Proof-of-Activity
PoA	Proof-of-Authority
PoB	Proof-of-Burn
PoET	Proof-of-Elapsed-Time
QoS	Quality of Service
RaaS	Robots as a Service
RADAR	Radio Detection And Ranging
RF	Radio Frequency
RFID	Radio Frequency Identification
ROS	Robot Operating System
RSA	Robotic Service Assistant
SSH	Secure Shell
SONAR	Sound Navigation and Ranging
SRS	Swarm Robotic System
TCP	Transmission Control Protocol
TTF	Time To Finality
UAV	Unmanned Aerial Vehicles
UAVNET	Unmanned Aerial Vehicles Network
UDP	User Datagram Protocol
WSN	Wireless Sensor Network
YARP	Yet Another Robot Platform
Concurrently, researchers have not only limited the concepts of blockchain to bitcoin (Nakamoto, 2008) and finance sectors, which it was initially meant for, but also started applying them in the robotics domain to achieve a more reliable, secure and flexible environment for the robots, both the one’s which work as a team and independently.

Since the last decade, the robotics industry has been on boom due to the up-gradation of technology in fields associated with robotics, such as electronics engineering, mechanical engineering, computer sciences and Artificial Intelligence (AI). This enabled people to work and research more robustly in the field of robotics, opening vast opportunities for humankind to exploit these technologies. From dancing robots of Boston Dynamics to the semi-autonomous rovers on Mars, everything we ever wondered about or read as sci-fi stories, is now becoming a reality.

Deloitte’s 2020 TMT report predicts that the global robotic market will witness 19% annual growth in the year 2020, which means that about 1 million robotic units will be traded for business use (Lee et al., 2020). Further, the report estimates that 50% of the sales will come from professional service robots. By 2021, the revenue generated by professional service robots will surpass that of an industrial robot. IFR (International Federation of Robotics) predicts that by 2022 there will be 4 million industrial robots working around the world, and the future will see Robots as a Service (RaaS) as a new business model (Anon, 2019). IFR also mentions that the annual turnover of robotic industries across the globe is $50 billion. On the other hand, as per Gartner’s recent prediction, blockchain technology is estimated to contribute $3.1 trillion of new business value by 2030 (Panetta, 2019). Thus, one can imagine the business values that can be garnered with the integration of the two technologies. Moreover, these two technologies are already listed among the top 10 trending technologies of 2020 (and beyond) by Gartner (Panetta, 2019a).

Table 1 provides definition of the frequently used acronyms in this paper.


Table 2. Summary of recent survey related to use of blockchain for robotics.

Reference	Key Contribution	Aspects Covered	1	2	3	4	5	6	7
Khan et al. (2018)	Illustrates the basics of a blockchain framework, distributed control systems (DCSs), and cooperative robots (CRs); also analyzes the security challenges in DCSs and CRs that can be curbed using blockchain, and the limitations associated while doing so.	Broadly defines each of the three fields and provides relevant and well-defined information even to the amateur readers of the said fields.	–	–	✓	–	–	–	–
Ferrer (2018)	Inspects four dominant issues in the field of swarm robotics: security, distributed decision making, behavior differentiation, and business models, for which blockchain can provide eminent solutions. Thereafter, it describes the limitations and future challenges which arise while doing so.	Vividly explains the blockchain framework, swarm robotics, and interaction of the two fields, giving away a gist of challenges that need to be addressed in the future.	–	✓	–	–	–	–	–
Afanasyev et al. (2019)	Studies the classification of blockchain-based multi-agent robotic systems so as increase the number of research platforms and libraries for further analysis of these technologies. Additionally, inspects WSN, smart buildings, smart cities and Industry 4.0 concepts as a part of Multi-Agent Systems (MASs), which can utilize blockchain framework.	Provides in-detail classification of the subject and presents effective solutions that need to be implemented to curb the challenges.	–	–	✓	–	–	–	–
Miller and Gandhi (2019)	Addresses the exogenous fault-detection and its diagnosis in swarm robotics, emphasizing the four research areas: Immune system, data modeling, blockchain-based fault detection, and local sensing-based fault detection; and analyzes the limitations and advantages of these methodologies.	“Blockchain-based fault detection method” gives an appropriate idea of diagnosing faults using blockchain framework to the readers. Disadvantages/limitations mentioned can be deemed as future research topics in this field.	–	✓	–	–	–	–	–
Al-Jaroodi and Mohamed (2019)	Explores different domains of industrial applications where blockchain has been deployed, along with the benefits, limitations and ways to implement blockchain technology in those domains of the industries. Also, highlights the prerequisites to successfully deploy blockchain technology such as need of supporting platforms and tools.	Gives out detailed review of use of blockchain in different industries including robotics, and states the benefits of doing so.	✓	–	–	–	–	–	–
Du et al. (2020)	Elaborates the benefits of blockchain technology in swarm robotics alongside presenting the swarm robotics-oriented blockchain model, which forms the information environment for swarm robotics.	Sketches a well-described seven-layer conceptual model that makes use of blockchain systems in the betterment of swarm communications.	–	✓	–	–	–	–	–
Alladi et al. (2020)	Reviews blockchain applications in UAVNETs for automation of supply chains, disaster relief, surveillance, decentralized data storage, securing UAVNETs, and edge computing, with real-life use cases and challenges in the combined applications.	Elaborately explains the applications and analyzes the implementational details of solutions for the challenges faced by UAVNET systems.	–	–	–	✓	–	–	–
Mehta et al. (2020)	Exploits the integration of blockchain technology and 5G-enabled UAVNETs, presenting the blockchain-based solutions for security and privacy issues in communications within 5G-enabled UAVNETs. Thereafter, the authors summarize research challenges and future scope within the said integration.	Presents a detailed case study to indicate the types of challenges and attack vectors faced during package delivery using the combination of blockchain and 5G-enabled UAVNETs.	–	–	–	✓	–	–	–
Fukawa (2020)	Presents brief review of challenges faced by service providers incorporating Robotic Service Assistants (RSAs) into various domains. Also proposes the concept of governing a robotic service organization using blockchain technology along with analysis of the impact of blockchain in robotic service economy.	Presents the robotic service organization concept to record and monitor activities between RSA & customers, service providers & suppliers, and suppliers & distributors on a distributed network; and provides potential applications, limitations and future research scopes of the technology.	–	–	–	–	–	–	✓
Our Paper	Comprehensive survey that studies the key requirements of robots in different roles and applications along-with their challenges, presents blockchain concepts, different types of blockchain, smart contracts, key metrics, different blockchain platforms and challenges, discusses in-depth the state-of-art research on the integration of blockchain and robotics, probes the technical challenges and provides six future directions for blockchainized robotics.	Sketches a clear and detailed picture of research going on in blockchainized robots, and its challenges	✓	✓	✓	✓	✓	✓	✓
1: Industrial Robots; 2: Swarm Robots; 3: Multi-Robot Systems; 4: UAVs; 5: Embedded systems in Robots; 6: Medical robots; 7: Service Robots.

1.1. Motivation
Blockchain technology, being in its nascent stage, has applications in the field of robotics at the rudimentary juncture of research. Conventional, web-based and cloud-based robotic systems are well established in the research field, having advantages of architectural flexibility, HRI adaptability and computational load-sharing (Wang et al., 2015). But, these centralized systems face safety and security challenges in resource management, information handling, communication and learning methodologies; which blockchain-based robotic systems address by facilitating reliable peer-to-peer communication with advanced security measures over a trust-less network. Process inefficiency, single point of failure, and limited task distribution operations are also resolved by using blockchain. Integration of blockchain technology enhances interaction and coordination in robotic systems and provides a reasonable solution for a decentralized task distribution in a dynamic environment. Blockchain integration ensures that the robotic operations are not affected even in case of failure of few nodes. It also helps in ensuring data integrity, resiliency, and scalability. Table 2 discusses the recent surveys relating to the use of blockchain in certain areas of robotics field, of which numerous surveys published are within the past 2–3 years. The papers listed here are focused on the applications, challenges/limitations, and future scopes of blockchain technology in different traits of robotics. Fig. 1 suggests the trend (i.e., research works per year till 2020) based on the papers we surveyed on blockchain in robotics.

To provide the readers with a diverse knowledge of the existing research work that has been carried out in these recent years, the authors of this paper have provided an in-depth and comprehensive review of the latest studies carried out on working principles and applications of blockchain technology in various traits of the robotics field; this includes, but not limited to, the blockchain in distributed cooperative robots (Khan et al., 2018), multi-agent and swarm robots (Afanasyev et al., 2019, Ferrer, 2018, Miller and Gandhi, 2019, Du et al., 2020), UAVs (Alladi et al., 2020, Mehta et al., 2020) and service-oriented robots (Fukawa, 2020).

1.2. Contribution
Our search for survey papers on blockchain technology used in robotics realized the fact that there are no such surveys which address a broad range of robotics’ field utilizing the blockchain. Hence, we provide the first work, which considers various traits of robotics and their challenges that in turn being solved by blockchain, which the readers of all levels of expertise and from diverse research backgrounds can refer to. The prime goal of this work is to signify the expansion of the roots of blockchain spreading across the heterogeneous domains of robotics — benefiting the researchers, industries, and the end-users. An overview of the contributions of our paper is as follows.

•
Study key features and identify key technical challenges for robotic: “What does it take for a machine to be called a robot?” is the question we try to answer in this section of the paper. Studying various research works which quantified the definition and properties of a robot, we classify crucial parameters for the same, such as perception, cognition, action, ethics, efficiency, and interaction.

•
Discuss blockchain technology and its characteristics: Blockchain technology has significantly outgrown from its cryptocurrency ‘Bitcoin’ origin. Thus, we discuss the basic principles of blockchain, mining process, types of blockchain, various consensus algorithms, smart contracts, and key metrics used to evaluate performance of a blockchainized system.

•
Investigate the role of blockchain for robotic use cases: Numerous use cases and applications of robotics have been continuously growing in recent years. On the one hand, this rise offers numerous advantages such as cost reduction, higher automation, improved efficiency, and efficient handling of the emergency situation; however, on the other hand, it leads to new issues like security, privacy, trust, and availability. Thus, we investigate the versatile role that blockchain in better designing robotic systems.

•
Highlight the technical deployment challenges: Though the use of blockchain for robotics is considered profitable, there are some technical challenges. Therefore, we discuss these deployment challenges that must be mitigated to harness the best of blockchain for robotics.

•
Present future research directions: Based on the findings and the lessons learned, we have provided eight different future research directions that can lead to the profitable integration of blockchain in the realm of robotics.

1.3. Organization
The outline of the paper is depicted in Fig. 2. Section 2 discusses key requirements and various technical challenges faced by robotic systems in general. Section 3 provides an overview of blockchain and smart contracts. Section 4 surveys the role of blockchain for different use cases of robotics. Challenges and future research directions are expounded in Sections 5 Technical challenges for use of blockchain in robotics, 6 Future research directions, respectively. Finally, Section 7 concludes the paper.

2. Key requirements and technical challenges in robotics
Any robot constrained to laboratory tests (i.e., in controlled environments) may outgrow basic expectations of achieving functional efficiency, robustness, and time/cost savings. Yet, the performance can drop steep low when deployed in the work-field.

The increase in demand for automation and improvement in throughput of processes in several sectors and domains, enabled the robotics field to be under limelight of research and development in recent years. These advancements have offered numerous real-life applications for robots, in varied fields.

So to ease the understanding of research-works carried out in these applications areas, we consider a simple and relevant classification of robots in Fig. 3 by International Federation of Robotics (2020). It is worthy to note that there can be several ways to classify the robots due to the diverse fields in which these robots are being employed, and hence we chose to focus on the major applications areas out of several in today’s world.

The robots are majorly classified into industry-oriented and service-oriented robots, which is further subdivided into groupings relevant to each sector, such as manufacturing, and agriculture as industrial robots, and professional as well as domestic robots for service-oriented applications (International Federation of Robotics, 2020). The professional and domestic service robots are in-turn classified into their basic expertise areas such as medical, workplace, and defense. As there can be feasibility of having swarms of robots in each of these domains, we showed the possibility of having swarm robots using the dotted boxes. Section 4 covers the categorization of robots in detail based of this classification diagram.

So, to understand the working and importance of these categorized robots (and their class), this section discusses core requirements as well as the key features a robot should possess in general, to work efficiently in real-world situations. Thereafter, the technical challenges are also discussed that may occur while doing so.

2.1. Features and requirements in robotics
In this section, we broadly discuss some of the basic features of the robots (Woodford, 2020) and highlight their importance. Fig. 4 summarizes the key features that are essential for robots to work independently or along side of humans.


Download : Download high-res image (332KB)
Download : Download full-size image
Fig. 4. Key features and requirements for robots (Woodford, 2020, Bräunl, 2008, Rajan and Saffiotti, 2017, Riek and Howard, 2014, Thill and Ziemke, 2015).

2.1.1. Perception
It is the ability to sense the surroundings through various sensory devices. Perception can be differentiated in terms of:

(a)
Vision: The capability of a robot to visualize the surrounding is a must for any autonomous (or even semi-autonomous) applications, such as obstacle recognition, gesture and facial expression recognition (Imani and Montazer, 2019), and so on. Cameras are not the only vision sensing devices. Light Detection and Ranging (LIDAR), Radio Detection And Ranging (RADAR), Sound Navigation and Ranging (SONAR), and Infrared detectors do the same job of perceiving surroundings like a camera does, in terms of machine vision.

(b)
Hearing: Sensing the sounds around itself gives a robot an extra advantage in communicating with the humans (especially). Microphones are a way to do so. However, the task of hearing does not end at capturing the sound waves from the atmosphere. Understanding words, phrases, or even the music is challenging for machines, which is being addressed for a long time (Sharma et al., 2020).

(c)
Smell: Any smell is a bunch of molecules of chemical vapors drifting up to our nose and binding onto nasal receptors, where they are stimulated electrochemically to our brain. Researchers are in the process of building nano-electrochemical detectors that act as artificial nose (Karakaya et al., 2020).

(d)
Touch: From the touch screens on our smartphones to the adaptive robotic end-effector (Zapciu et al., 2017), touch sensors are already a boom in the area of technology as well as robotics. There are still developments going on to improve these sensors’ sensitivity to detect the slightest brush that even the human skin might not recognize (Sun et al., 2019).

(e)
Pain and Reflexes: Researchers have developed sensors and the algorithms, such as Artificial Robot Nervous System (aRNS), that can replicate the naturally found human-reflexes into a robot (Kuehn and Haddadin, 2017). Also, as a recent advancement in the field of robotics, scientists have invented a robot that can feel pain when its synthetic skin is applied with an electric charge (Chi et al., 2018).

(f)
Taste, proprioception (self-body awareness), and many more humanly senses are big leaps for technologists and researchers to implement onto a machine, which are being explored intensively using various experimental methodologies (Wu et al., 2019, Taniguchi et al., 2016). These senses boil down to the development of sensors capable of converting the said signals into electrical signals.

2.1.2. Action
Intelligent systems not having the capability to move around are mere computers, but not robots. So, to implant movements to computers, different mechanical designs, as well as material sciences, have been developed to make a machine mobile and act upon the outside world with the help of actuators, wheels, and control mechanisms (Bräunl, 2008). For instance, factory robots are designed to have 360-degree movement at their arms for tasks like welding, and painting. Other outdoor robots designed for carrying payloads in rough grounds are designed to have legs inspired by animals, for adopting the flexibility and robustness found in nature. On the other hand, humanoids mimic the human structure (with variations for better motion) in addition to the capabilities that humans are not gifted naturally, like protection against harmful gases, traversing narrow and unstructured environments, and so on.

2.1.3. Cognition and AI
An entire field of science is dedicated to developing the machine capability to think, perceive and achieve adaptive motor-control using Artificial Intelligence (AI). AI is the virtual brain to the robots, responsible for learning, making sense of the data perceives from its surroundings, and autonomously taking decisions thereafter. The embodiment of natural intelligence in a robot enables them to act as a cognitive tool. The authors of Rajan and Saffiotti (2017) have noted the applications of AI in the robots which can know, reason and cooperate along with the challenges possessed. In this subsection, we talk about some of the major domains of ‘cognition in robots’ in terms of the expertise.

(a)
Social cognition: The theory of mind (ToM) framework (Bohl and van den Bos, 2012) governs the sociability in humans, in which a person can understand the plausible behavior as well as emotions of another person in a said situation, with the help of empathy and an understanding that the other person can have a different perspective, beliefs and desires. This framework enable successful social interactions among humans in day-to-day lives and adapt to their environment. The robots, thus, should be capable to understand the visible human cues, such as head nods and eye contacts, without being told to do so, to perform interactive communications (Gallagher, 2007).

(b)
Emotional cognition: Kismet is a research robot at MIT laboratory (Turkle et al., 2006), which is being explored by researchers to enable robots to mend with humans within their personal space. Although it just has two eyeball-like cameras, eyebrows, and lips to mimic, it is an excellent example of how people, both children, and adults, can grow very attached to a machine that can provoke an authentic emotional reaction in a very humane manner. Studies suggest that the greater the robots resemble to a human, the humans find it that much easier to interact with those entities. But, as per Mori’s uncanny valley hypothesis, the feeling of uncanniness is generated in the humans before the robot may completely resembles a human (MacDorman and Ishiguro, 2006). It is also worthy to note that emotions help humans choreograph behavior and provide sense of urgency for decision-making processes along with imparting expressions as a reaction. For the robots to sense the emotions of humans or other robotic entities it is crucial that the emotions and cognition need to be interwoven into every fabric of robot architecture (Pessoa, 2017).

(c)
Motor-Planning cognition: So as to mimic a human’s actions using feedforward and feedback control systems, the robots must perceive the surrounding in real-time and redefine their movement/path, in a flexible and intelligent manner, according to the unanticipated changes imparted (by external agents) (de Kleijn et al., 2015). Robotic action-effect learning, motor-blabbering and amalgamation of these techniques provide cognitive framework for such scenarios. Motor-control algorithms, such as Mohan and Morasso (2006), also enable the action-learning for the robotic systems to plan the kinematics of end-effector as well as deal with the uncertainty of the environment.

2.1.4. Ethics
Riek and Howard (2014) proposed a set of principles to infuse the sense of ethics in human–robot interaction. These principles are covered under four different classified considerations:

(i)
Human dignity consideration emphasizes that emotional needs, frailty (both physical and psychological), and privacy of humans must be taken into consideration.

(ii)
Design consideration highlights that predictability and trustworthiness must be intrinsic to robotic behavior.

(iii)
Legal consideration underlines that a robot must follow all laws protecting an individual’s rights.

(iv)
Social consideration accentuates that the robotic design must be free from racism, ableism, and sexism.

Further, Boden et al. (2017) advocate the fact that ethically correct behavior of robots is a responsibility which is shared by the humans who are the designers, developers, manufacturers, and users of the robots and not the robot themselves as they are merely machines. In this direction, the authors defined five ethical rules for designers and users of ‘responsible’ robots. The essence of these rules are:

(i)
Robots must not be weapons (except for security reasons).

(ii)
They must follow existing society laws.

(iii)
They must be safe as well as secure.

(iv)
Their illusive intelligence should not be used with malicious intent.

(v)
They must have registered owners who are responsible.

2.1.5. Efficiency
With the full-swing development of robots and implementation of multiple features within its’ system, their efficiency is becoming a debatable aspect. With the factories vividly transforming work culture by replacing on-field human laborers with more productive and efficient industrial robots to slash the manufacturing labor costs, more and more efficient systems are coming into existence (Eker, 2018). (i) Energy Efficiency (ii) Time Efficiency (iii) Cost Efficiency and (iv) Legal Compliance are the important parameters that a robot must be inculcated with to achieve maximum productivity with minimum wasted efforts.

2.1.6. Interaction
Technically speaking, Human–Robot Interaction (HRI) is a combination of perception, cognition, and action altogether. This subsection explores how a robot’s sight, speech, ‘thoughts’, social awareness, gesture, autonomy, and proximity to the users affect the way humans perceive and work with social robots (de Graaf et al., 2015). Thus, interactability is meant to be denoted as a distinct feature. It is worth mentioning that interaction amongst two entities can happen in different ways and cannot be defined specifically (Thill and Ziemke, 2015). Different robots demand different requisites to interact with the world around them, mostly depending on the use cases they are meant to work upon.

Marks (2019) presented a draft article about the delivery robots and their features. Focusing on the “last-mile delivery”, the author explored the nascent laws governing autonomous delivery vehicles’ (ADVs) operations, safety, efficiency, and social benefits. The key notable feature that the process demands from an ADV is, being able to autonomously navigate on the sidewalks and/or local roads, which are often narrower and unpredictable compared to cities and highways. This involves processes like (i) detection of obstacles, (ii) road mapping, (iii) accurate navigation in real-time, (iv) advanced algorithms that build up the core computing systems and the vital part, (v) traversing itself with differential velocities among crowded paths and sometimes uneven terrains (weathered roads or footpaths).

Ahmad et al. (2017) reported an intensive in-depth review of Adaptive Social Robots (ASRs) designed and implemented across specific four domains, i.e., Health care and therapy, Education, Public Domains and work environments, and Homes. The reviewed domains highlighted different essential features that are incorporated in the designs of the said robots, which are stated as follows.

(i)
Robot should adapt its dialog deliverance and speech patterns based on the style of user-interaction experiences.

(ii)
Capability of face, as well as emotion detection, should be equipped for better interaction.

(iii)
Gesture imitation and memory-based adaptations are useful to customize the user’s experiences with the robot.

(iv)
User profiling for scheduling visits and setting up medicine reminders helps patients in medical care.

(v)
Speech adaptation and stress level detection of the users can benefit the adaptive learning of ASR.

The interaction feature is not only limited to HRIs, but it also includes the interaction among the different robot entities to work as a team, as well as the entities and their environment individually.

Navarro and Matía (2012), have given an overview of Swarm robotics describing its characteristics and comparisons with other multi-robot systems. The features of swarm robots, which are within the scope of this section, are as follows.

(i)
Each robot of the swarm should be autonomous by nature and have the ability to perceive its surroundings as well as actuate in real-time.

(ii)
The swarm should be of multiple entities (i.e., robots) in large numbers.

(iii)
Swarm must contain similar kinds of robots; or if there is a need for dissimilar robots, such groupings should not be out-numbered.

(iv)
The swarms are meant to execute tasks that cannot be completed by a single entity; and thus, robots must be capable of collaborating and improving performance effectively.

(v)
Robots must be able to communicate and distribute the coordination among themselves so that the swarm can easily be scalable.

Higgins et al. (2009a), as well, surveyed on this important aspect of swarm robots and have broadly classified the required features into Confidentiality, Integrity, Entity Authentication, Data Origin Authentication and Availability of data from authorized entities.

2.2. Various technical challenges in robotics
Despite the technological advancements, there exist notable challenges that can be a threat to the robots and, in turn, to the people as users. Robots with well-equipped features do often leave room for loopholes that can compromise their performance and reliability. This section covers the wide range of challenges faced in the field of robotics as an overview.

2.2.1. Security threats
Being the utmost priority in the field of technology, security plays a vital role when it comes to robotics. As robotics is a multi-disciplinary field, it brings up multi-tiered security challenges, such as firmware, communication protocols, data storage, cryptography, control systems, and mechanical designs.

Priyadarshini (2018) has pointed out the shortcomings of the robotic software architectures that are widely used in robotic research/developmental projects as well as industry-grade robots. Robot Operating System (ROS) and Yet Another Robot Platform (YARP) are open-source middleware frameworks that can comprise multiple intercommunicating programs hosted on different nodes (i.e., processors), which further interact with the sensors, actuators, and other peripherals on the robot. ROS messages are transferred unencrypted using Transmission Control Protocol/Internet Protocol (TCP/IP) or User Datagram Protocol/Internet Protocol (UDP/IP) protocols across these nodes, making it easy to intercept by unauthorized entities. Message Digest 5 (MD5) algorithm, for example, and other authentication mechanisms are implemented in the newer versions, which increases the overall security of the system. However, the data is still not encrypted. Similarly, YARP utilizes the TCP handshake to communicate with the sensors, which is unencrypted and exposes the infrastructure, making it vulnerable to corrupted data.

To realize the vulnerabilities of the ROS platform, DeMarinis et al. (2019) conducted scans of IPv4 address space using ZMap research tool (Durumeric et al., 2013) selecting addresses by a pseudo-random permutation, to spot unprotected ROS hosts exposed to the public internet either intentionally or otherwise. Doing so, they inferred multiple inadequacies, which are potential threats to the robots and their users. They also mapped the locations where they found compromised robots, which can be fully actuated from anywhere in the world. Their live camera information was publicly published along with other robot-information available on the public internet via ROS hosts. Few other technical inadequacies that they found are listed below.

(a)
As ROS master, by default, runs on TCP port 11311, it is rather easy to spot the hosts on the public network. The authors mentioned a few of the prior research works published earlier, which provide a new architecture for the ROS platform. However, those architectures were found vividly complicated due to the infrastructure consumed by their authentication and authorization services.

(b)
Research/Work-in-progress robots usually run on Secure Shell (SSH) server in order to get remote access within the premises. SSH servers have publicly known username and password (which cannot be changed by users). Thus, this server can possibly be used for multistage attacks even if SSH does not directly provide admin access publicly.

(c)
In a case study presented by the authors, it is seen that the MD5 algorithm was implemented onto the “attacked” robot, which did not allow the service call to pass through. However, reconstruction of the required checksum file is quite possible to reconstruct, with the MD5 hash, which gets printed on failed attempts to gain access, threatening the robot’s integrity.

Switching our focus onto the outside world, Starship Technologies Ltd. addressed a vital yet basic issue faced by ADVs while operating out in the open, namely, the risk of getting ‘robbed’ or carrier goods getting tampered with by thieves or people with malicious intents. The robot itself can also be captured and reprogrammed into doing wrongful deeds. Having said the misuse of hardware, there are risks related to the data that is usually continuously collected from the surroundings by the sensors of the robot (e.g., cameras) for mapping trajectories or identifying the obstacles on the way (Hoffmann and Prause, 2018); which is of a great commercial value. Thus, data protection is seen as not only a security issue but also a legal issue.

Ahmad et al. (2017) have also raised concerns about ASRs’ security regarding the information on patterns of interaction with the users. As typical users can vary from young children (who can be vulnerable and might be intimidated with the robot’s adaptations) to adults (who can be human resources for various organizations), the misuse of their personal and behavioral data can impact on a large scale. Thus, data privacy is a must in the ASRs.

Bonaci et al. (2015), have recognized two feasible vulnerabilities prominent in the field of telerobotic surgery. In fact, telerobotics can be utilized in any manual or semi-autonomous robotic applications, such as ADVs, drones (Ruiz Estrada, 2020), and medical robots, which turn to be effective resources in times of emergency and outbreaks, like the Ebola epidemic (year 2015) and Coronavirus Disease (COVID-19) pandemic (year 2019), by using tele-medication and telecommuting inside hospitals and containment zones, for decontamination, food and medicine deliveries, diagnosing people, so on and so forth (Yang et al., 2020). Following are the vulnerabilities that these kind of systems can face while operating.


Download : Download high-res image (204KB)
Download : Download full-size image
Fig. 5. Network based attacks (Bonaci et al., 2015).

(a)
End-point compromise: The attacks on either end of the process, i.e., the human-operated console or the robot (e.g., drones, and rescue robots), can be vulnerable only if the physical access on either side is compromised.

(b)
Network/Communication based attacks: Due to attacks in this region are penetrable more easily than the End-point attacks, eavesdropping or hacking into the system by malicious code injection is much more feasible in the communication area (see Fig. 5). Thus, these attacks inhere are classified into three sub-categories.

(i)
Intention modification attacks: Modification of the intent of a robot’s operation, like unusual stopping or lagging of the movements.

(ii)
Intention manipulation attacks: Manipulating the feedback responses from the robot’s end to operator causing undetectable errors in the operation.

(iii)
Hijacking attacks: Loss of total control of the robot from the operator, leading to potentially dangerous results.

Along with the aforementioned primary challenges, Bonaci et al. (2015) had encountered few more implications out of the experiments they conducted, which can also be potential vulnerabilities that attackers may target.

(a)
Misuse of Emergency-stop feature.

(b)
Wearing of the actuators due to unmanageable high data transmission rate.

(c)
Disrupting/dropping data packets affecting real-time operation.

(d)
Addition of new streams of malicious robot-command data into the network.

Dieber and Breiling (2019) noted the security challenges for mobile manipulators in industrial uses as follows.

(a)
Physical access restriction to avoid malicious access into the system.

(b)
Ability to interact with external systems.

(c)
Secure user interaction for operating and maintenance of robot.

(d)
Limiting the risk of propagation of attacks in the subsystems.

(e)
Interactions within the subsystems need to be uninterrupted.

(f)
Security solutions must be scalable and resource-friendly.

On the other hand, with the features of Swarm robots (mentioned in the earlier sub-section) being implemented, multiple constraints come into play. Swarm robotics, by nature, introduces some of the challenges that do not exist in other technologies (Higgins et al., 2009a). This is mainly because individual entities of the swarm need to traverse/actuate independently yet by interacting with each other. So multiple modules such as processing unit, power unit, sensors, actuation devices, and body frame, need to be assembled in a confined space, keeping in mind the appropriate weight and dimensions of the robot depending upon the use cases. Some of the common challenges to be noted are as follows.

(a)
Resource constraints: Each entity of the swarm is built around embedded processors with limited storage and limited operational bandwidth on-board to be mobile and unobstructed in terms of physical dimensions. Thus, in return, this gives out limitations on deploying existing security solutions, making the entities vulnerable to permanent inoperability and loss of availability.

(b)
Physical capture and tampering: Single entity from the swarm robots being physically captured, tampered with, and replaced back in the swarm by attackers, can lead to loss of confidentiality of credentials, protocols, and data associated with the swarm. Also, the other entities can get influenced and can be manipulated by the attacker for carrying undesirable activities and/or for making the entire swarm inoperable.

(c)
Control: Entities in a swarm are supposed to be interactively decisive and autonomous in nature with the help of its peripheral sensors. This makes swarm robots lack the hierarchical structure of control. Thus, a plausible hardware/software attacker-induced malfunction in even a single entity can cause havoc in the whole system.

(d)
Communication: Exchange of data between entities of a swarm broadly takes place in either of two ways, ‘implicitly’ or ‘explicitly’. Sensing other robots and interacting with them via the environment (known as stigmergy Tang et al., 2017) is an implicit mode of communication; whereas interactions via Radio Frequency/Infrared (RF/IR) modules, Light Emitting Diode (LED) displays, body/sign languages, and audio/acoustic signaling, fall under the explicit mode of communication. So being an intermediate data transfer medium, these communication modes are vulnerable to attacks like data being intercepted, jammed, or even modified. Security concerns relating to explicit communications have been thoroughly demystified by researchers, but that of implicit mode is yet to be investigated. Moreover, while assigning the tasks to the swarms, upgrading the robot firmware remotely or installing applications that utilize open or public internet by the authorized personnel can give an ample opportunity to attackers for obtaining crucial data midway (Lacava et al., 2020). Additionally, unencrypted or poorly encrypted data may also make the swarm vulnerable to these attacks while communicating information to and fro.

(e)
Identity and authentication: Mutual trust between the entities of the swarm, by means of identity verification and authorization of data origin, is essential to ensure legitimacy of entities. If the identity is duplicated or altered in an unauthorized way, the swarm becomes vulnerable to attacks.

(f)
Key management: Entities using cryptography keys to validate themselves with peers and vice versa, while autonomously joining or leaving the swarm, need to secure these keys along with the communication data. So, to avoid interception or phishing-like attacks on the keys, key-altering mechanisms and related challenges need to be addressed.

2.2.2. Actuation and movement accuracy
For the purpose of physically interacting with humans as well as environment, robots are built around the idea of being movable by actuating their peripherals. The existing actuation technologies have limitations with respect to safety and performance capabilities, which are as follows (Zinn et al., 2004).

(a)
The hydraulic actuators, for instance, have very high stiffness characteristics and generate very high impact loads during collisions making it dangerous to work with.

(b)
Similarly, the pneumatic actuators are technically incapable of high-performance tasks as they have very low control bandwidths (around 20 Hz), which in turn contribute to a large amount of stored potential energy in the compressed gas. This can be hazardous while operating.

(c)
Currently, devices and robots tend to use electromagnetic actuators, which give an advantage over the former two actuators in terms of usability, yet have limitations of low torque and low power density. Gear reduction mechanisms or torque magnifying reducers are readily used to combat this limitation, but with a cost of increased weight and an increase in reflected inertia.

One of the divergent fields of traditional robotics is soft robotics, in which robots are built using composites of flexible materials with merely any rigid actuators. Unlike the rigid conventional robots, the soft robots actuate using their outer membranes and semi-rigid structures within the membrane controlled by pneumatic or hydraulic pressure variations, cables, and thermal variations. Though we have numerous advantages of these robots over conventional ones, there are significant limitations to be noted. Runciman et al. (2019), reviewed the challenges of these soft robots being used in Minimally Invasive Surgery (MIS), which demands high precision controllability and high accuracy actuation from the robots.

(a)
Foremost concern in this field remains the complexity of manufacturing methods. Multiple parameters, like robots’ stiffness, actuation accuracy, Degrees of freedom (DOF), amount of force exertion, and flexibility, depending on the material of which the robot is built.

(b)
Mostly, soft robots are driven by fluid actuation, which in turn gives rise to different stiffening effects of the robot depending on the type of actuation fluids. This is because the stiffness changes with the pose of the robot and the material in use.

2.2.3. Ethical challenges
Ethical challenges in robotics are primarily concerned with the HRI and techniques of designing and constructing robots (Riek and Howard, 2014) which shall be in-sync with the social and jurisdictional norms of human societies. Technological areas of these challenges are as follows.

(a)
Copyright violations of design and innovations.

(b)
Cyber-criminality using technology.

(c)
Genetic modifications (like in Organic robots).

Kopacek (2012), too, stated some of the ethical challenges robot developers might have to face while delivering the robots into the real world. A few of them are listed below:

(a)
Industrial Robots: Loss of workplace and increase in unemployment of unskilled labors.

(b)
Service Robots: Compromising the privacy of the users.

(c)
Humanoid Robots: Unpredictable robot behaviors may tend to overpower, or at the least, hurt humans.

(d)
Exploring Robots: Inconsiderate and threat to other forms of life on earth like microorganisms and marine biology.

(e)
Health Care Robots: Malfunction/breakdown during surgery can be fatal. Unpredictability may prove violent near younger or infant patients.

(f)
Military Robots: Psychologically challenging to the human teammates working alongside the robots in the war-fields.

(g)
Edutainment: Lack of intimacy and emotional bond. Risk of misusing user-related data-privacy.

2.2.4. Energy challenges
Robots, either mobile or stationary, need to be designed in such a way that energy source characteristics, such as availability, re-usability (or renewability), capacity, and lifetime, are known and well-considered in the nascent stages of development. Realistically, mobile robots, especially autonomous and tele-operated robots, have to carry the energy sources, i.e., batteries, on their body frames while actuating and traversing, whereas factory-use or stationary robots usually draw energy from the unlimited power supplies. Thus, making mobile robots’ operationally more dependant upon the battery’s power supply, size, and weight (Yang et al., 2018) that these robots need to carry along with their on-board actuators, sensors, and radios.

Unlike the ‘movable’ biological beings that harvest energy from carbohydrates by ingestion of food with remarkable efficiency, mobile robots tend to be inefficient and less energy-optimized while operating, as they lose much of the energy into unwanted mechanical vibrations, thermal and audible noises (Yang et al., 2018); thus, making the development of energy storage technologies (ESTs) complex and costlier to achieve similar behavior. In practice, drones, for example, power their flight using one of the four common energy sources: airplane fuel (kerosene), battery cells, fuel cells, and solar cells (Vergouw et al., 2016). Each one of these sources has limitations as they are chemically hazardous, have less operating time, are heavyweight, and have low efficiency, respectively, when in use. So, even though they provide electrical energy to the devices, these ESTs do not perform efficiently enough to make the robots comparable to biological beings.

3. Blockchain - An enabling technology
Blockchain has elevated itself as one of the disrupting technologies over the last couple of years. The technology has gained traction with the introduction of a Peer-to-Peer (P2P) electronic payment system called Bitcoin (Nakamoto, 2008) in 2008. It was the first use case that the world witnessed and was driven by the underlying blockchain technology. In general, blockchain is the most popular type of Distributed Ledger Technology (DLT) (Authority, 2017). Directed Acyclic Graph (DAG), Hashgraph, Holochain, and Tempo are some of the other known DLT technologies (Zia et al., 2020). Fig. 6 presents an overview of various aspects of blockchain technology which are discussed in this section.

3.1. Principles of blockchain
Blockchain is the underlying baseline upon which Bitcoin is based on. The strength of the blockchain is that what has made the cryptocurrency technically well trusted. Blockchain is a decentralized technology where the control and authority is not concentrated to a single entity rather distributed across the participants. As the term itself is intuitive - a blockchain means a series of blocks chained with each other logically with the use of cryptographic hashes. Technically, a blockchain consists of a number of blocks where each block contains certain number of transactions. These transactions are digitally signed by their generator accounts (i.e. by the users who launched them). Each block in the blockchain is chained with its previous block via a digital hash. This gives a user the ability to traverse the records in the blockchain from the current block to the initial block or the genesis block.

Unlike, centralized systems where the data records are kept in a concentrated ledger and the management of the ledger relied on a centralized authority, the records in the blockchain is distributed over the networks of nodes which are maintained independently (Atlam and Wills, 2019). Each node in the network eventually maintain the same instance of records that the other nodes are maintaining. The replication of data over different nodes in the network provides high availability and immutability to the data. An adversary attempting to alter the stored data would have to change records over multiple node unlike the centralized systems where single node alteration was enough to commit changes to the ledger (Ali et al., 2018). Thus making the alteration attempts highly infeasible and increasing the immutability of the records. As, the data records are spread over a number of nodes maintaining the consistency of data is yet another challenge. The challenge is addressed in blockchains with the notion of consensus. Consensus is a way in distributed computing where the distributed nodes come to a common agreement on the ordering and instance of the data stored by them individually (Xiao et al., 2019). The consensus mechanisms to be used in the blockchain varies depending upon the type of blockchain. Considering, the public blockchains such as the Bitcoin blockchain a Proof-of-Work(PoW) based consensus mechanism is used. The procedure of obtaining the consensus using PoW is also predominantly known as mining.

3.2. Mining
The nodes in the public blockchain network can be categorized into (i) Light Nodes: Low power consuming devices such as handheld devices, (ii) Full Node: High storage devices that maintains the full copy of the blockchain, and (iii) Miner Node: These are the Full Nodes having sufficient computational power (Reyna et al., 2018). Mining is performed by the miner nodes. They are the first class citizens of the blockchain networks upon which the security and trust of the system is dependent. Higher the miners in the system more decentralized the system is and thus more it is secure. Miner nodes in the network collects the incoming transactions from the network and bundle them together to form a block. In order to form a block the miners are required to fulfill certain conditions such as (i) Difficulty Level: This criteria asks the miners to obtain a hash value for the block preceding a number of zeros (Garay et al., 2017). More the number of preceding zeros are more difficult it is to obtain. This difficulty is obtained by changing the nonce field value of the block and finding the hash of the block (Garay et al., 2017). (ii) Size of the block: There is no such restriction on the minimum number of transactions to be included while forming the blocks. However, the size of the block does matters when it comes to block propagation in the network. Therefore, a block formed needs to satisfy the size property. Bitcoin blockchain restricts the size of each block formed to be maximum of 1MB (IOTA, 0000a). Once, a miner node founds a valid block it adds the new block to its local copy of the ledger and propagates the block to its peer miner nodes.

The miner nodes in the blockchain communicates with each other via a P2P network (Decker and Wattenhofer, 2013). Each node maintains a certain number of inbound and outbound connections with its peers. A node start listening to a connection out of the possible maintained connection and excepts messages from the connected nodes at a regular interval. If no message is received once the wait period has surpassed the node sends a heartbeat message to the connected node. Once, the heartbeat message also gets ignored, the node drops the maintained connection and starts listening to another peer node. Such a P2P network ensures that a block is never stuck with a particular node and each node in the network receives a generated block eventually. The miner node needs to propagate its found node to the network so that the other nodes can verify the validity of the node and can append to their local copy of the chain. This applies to all the miner nodes, they need to race with each other. The one whose block is accepted by the majority of the nodes in the network wins the race. Once, a new block is added the race starts again and this cycle continues. Each miner nodes is rewarded by the network for the computational expenses that it has performed to obtain the block. While forming the block each miner node writes a transaction to its own account with the amount equivalent to the current reward accepted by the network. This transaction is also known as the coin base transaction and the amount varies from time to time depending upon the number of blocks that have been already mined.

3.3. Blockchain types
There are numerous ways based on which blockchains can be classified. Fundamentally, one can say, there are four different types of blockchain: public, private, permissionless and permissioned blockchains. The distinction is based on read, write and commit permissions, restricted or unrestricted entry to blockchainized system, and the type of server hosting used for blockchain-enabled applications (Hileman and Rauchs, 2017, Carson et al., 2018). A node with read permission can view all the transactions stored in the distributed ledger. However, to add new content to blockchain (i.e., to create new blocks each containing unique set of transactions) a node needs a write permission (Hileman and Rauchs, 2017). Commit right allows a node to append a newly created block to the distributed ledger and thus confirm all the transactions within that block. It is worth to note that the read permission and the type of server hosting are the basis to distinguish difference between public and private blockchain. Whereas, the write and commit permission sets the distinction between permissionless and permissioned blockchain (Hileman and Rauchs, 2017).

3.3.1. Public and private blockchain
Public blockchains are open for participants without any authentication and authorization prior to join the network. A participant is free to join, participate (for e.g., in mining procedure), and leave at any point of time. In public blockchain anyone can join and perform read operations. Moreover, usually such blockchain is hosted over public servers (Carson et al., 2018). Examples of public blockchains are Ethereum, Bitcoin. Public blockchains scale well in terms of number of nodes, however their scalability in terms of transactions per unit time and storage is of concern.

Private blockchains are much restrictive in nature where only selected nodes are allowed to participate in the network. In other words, in private blockchain nodes need permission to join and perform read operations. Moreover, such blockchain are hosted on private servers (Carson et al., 2018). Examples of private blockchains are Hyperledger Fabric. Private blockchains offer better scalability in terms of number of transactions confirmed per unit time compared to the public blockchains.

3.3.2. Permissionless and permissioned blockchain
As mentioned above, it is the write and commit permissions that demarcate permissionless and permissioned blockchains. Permissionless blockchain can be defined as a setting in which all the participating nodes (by default) are permitted to write and commit. Whereas, in permissioned blockchain only an approved subset of total participating nodes can write and commit.

The four fundamental types of blockchain lead to four combinations which are public permissionless, public permissioned, private permissionless and private permissioned. Public permissionless blockchain will allow anyone to join, read, write and commit. Bitcoin and Ethereum fall under this category. Public permissioned blockchain permits anyone to enter and perform read operations, however, only few vetted nodes can write and commit. Voting record system or marketing supply chain are examples of this type. Private permissionless blockchain exercises approval-based entry to join the network in order to perform read operations. However, anyone can perform write operations. Examples of such types are governmental (cadastral) registry service or insurance services (Waelbroeck, 2018). Finally, the private permissioned blockchain is the one where nodes need permission to join the network and perform read operations. In addition, only the few selected nodes of the network operator (single enterprise or organization) can perform write and commit operations (Carson et al., 2018). Hyperledger fabric is a popular example of private permissioned blockchain.

Yet another types of blockchain are consortium and hybrid blockchain. In consortium type of blockchain all the operations are restrictively governed by the nodes deployed by collaborating multiple parties/organizations. In other words, in such a settings, blockchain is managed by a consortium (i.e., neither by everyone and nor by single authority). Lately, hybrid blockchain is becoming popular since it has the potential to offer the best features of various types of blockchain. In particular, depending on the needs of the system, some processes (and associated data) can be made public and the sensitive ones can be kept private. For instance, in Zhu et al. (2019), the public tasks are handled by public chain and private tasks are handled by various sub-chains. The examples of hybrid blockchain platform are Simlo (Smilo, 2021) and AERGO (AERGO, 2021).

3.4. Consensus algorithms
Blockchain being a distributed system has its data records spread over a number of nodes in the network. The nodes are independent in nature and no single authority in the network has a control over all the nodes. Thus guaranteeing, the consistency and integrity of the data stored on the blockchain is a challenging yet crucial task. In order to ensure the consistency and integrity of the data stored on the blockchain special algorithms are implemented. These algorithms make sure that all the nodes in the blockchain network holds the exact same copy of data all over the network. Such, algorithms are called consensus algorithms. In general there are two class of consensus algorithms, first is vote-based consensus algorithms which are more suitable for private or consortium type of blockchain and second is proof-based which are better suited for public blockchain (Benisi et al., 2020). Some of the popular consensus algorithms are discusses as follows:

(a)
Proof-of-Work (PoW) is a classical blockchain consensus algorithm and is the first ever blockchain consensus algorithm being used ever in the famous cryptocurrency application Bitcoin (Bitcoin, 0000). The algorithm requires certain work with a set difficulty to be performed by a node to make sure his data to be committed and accepted by other nodes in the network. The work is highly compute intensive that requires to find a numerical value often called as nonce. In a Proof-of-Work based consensus setting, a blockchain client produces a digitally signed transaction. The transaction is initially submitted to the full node to which the client is connected. The full node checks for the legitimacy of the submitted transaction and allows the transaction to reside in its local mining pool where the transaction waits to get itself mined into a block. At the same time the full node broadcast the received transaction to all its peers. The peers perform the same transaction legitimacy check by verifying the signature and propagates the transaction further to its peers. Eventually, the transaction is received by all the full nodes in the network. A full node collects a bunch of transactions waiting in its local pool of pending transactions and tries to form a valid block satisfying certain properties such as:

•
The size of the block should be less than or equal to the maximum block size set by the network.

•
The formed block should meet the difficulty level set by the network.

The difficulty level varies from time to time. And is stated by the notion that the block hash should precede certain number of zeros. Higher the number of zeros to be preceded, higher the difficulty level. Finding, a hash value satisfying the laid down rules is a computationally hard problem, as there exists no known easier method other than the brute-force approach. Once a valid block is found, the miner propagates the block in the network. Each full node receiving the block checks for the validity of the proof submitted by the miner for the problem that he has solved. If the proof is found to be valid the block is accepted and is linked and added to the growing end of the chain, else the block is dropped. All miners across the network perform this procedure in parallel. This opens up the scope for the scenarios under which more than one miner finds a valid solution for a block. Such scenarios result in fork in the blockchain, however such forks are resolved eventually when the next valid block is proposed. The chain with is longest pile of blocks or the chain with the largest block number is accepted and the other one is discarded. Fig. 7 provides an overview of the working of PoW consensus algorithm.
(b)
Proof-of-Stake (PoS) overcomes the disadvantages incurred because of compute intensive nature of the PoW (Gervais et al., 2016). With PoS special designated nodes also called the validators collect the incoming transactions from the network and form the block. Validators put their coins on stake, the higher the amount of coins on stake, the higher the chances of acceptance of a block from the validator. The validator gets incentives for each valid accepted block in the network similar to the PoW mechanism. In order to thwart any malicious attempt of a validator of proposing and invalid block, the network penalizes the validator by dissolving the staked coins of the validator.

(c)
Proof-of-Activity (PoA) algorithm combines the best of PoW and PoS (Saleh, 2021). It begins with a PoW like operations where the nodes in the network race among themselves to find the first block. Once, a block is mined steps similar to PoS is followed where a group of validators is randomly selected from the network to sign the mined block. A block obtaining the minimum number of required transactions is accepted by the network and is appended onto the global blockchain. The reward for the new block formation is distributed among the miner node mining the block and the validators of the block.

(d)
Proof-of-Elapsed-Time (PoET) is a consensus algorithm proposed by Intel Corp. for achieving consensus in permissioned blockchain network (Chen et al., 2017). The algorithm relies on a special CPU instruction set called SGX (Software Guard Extension) (Chen et al., 2017). SGX ensures correct execution of an application code inside a trusted environment. With the feature of attestation a network participant can prove to other network participants about the legitimacy of the code that it is execution. Also, SGX secure enclave makes any alteration of the code by a malicious entity. A network participant joins the validation network by downloading the executable code from the blockchain. Upon joining the participant sends an attestation verification request in the network. Once, the verification is successful participant can participate in block sealing lottery. It obtains a signed timer code from the trusted code and waits for the timer to be over. The participant then proposes a block along with the certificate signed by the trusted code’s private key and propagates it to the network. The signed certificate acts as a proof of time duration elapsed by the participant.

(e)
Proof-of-Burn (PoB) is a modified version of Proof-of-Work and aims to be less power and compute intensive. Although, there are different variants of PoB, however the most generic one begins with a PoW based system where the miners initially earn coins by participating in the mining procedure. Then the system moves to PoB where the sealing of the next blocks is determined by burning of the coins (Karantias et al., 2020). The coins are burnt by sending them to a public address. Coins belonging to this public address cannot be spent further. More the amount of coins a participant is investing to be burnt more are the chances of him to be the next block sealer. Analogous to the PoW where the network security was ensured with compute and resource intensive operations, here the network security is assured by investment made by coin burnt.

(f)
Proof-of-Authority (PoA) is a consensus algorithm suitable for private and permissioned blockchain which relies on a number of pre-chosen authoritative nodes called the validators (Singh et al., 2020a). The algorithm run in rounds where in each round a validator is supposed to propose a block containing the incoming transactions in the network. The procedure is also called sealing. Once, a validator seals a block it propagates the block in the network where other validator nodes checks for the validity of the block, if the block is found to be valid the block is accepted and is appended to the global blockchain. Whereas, if the block is found to be invalid the network rejects the proposed block and calls for a voting to kick out the validator node. Once the validator is kicked out it is not allowed to further propose a block.

(g)
Practical-Byzantine-Fault-Tolerance (PBFT) is a voting based consensus mechanism, that is based upon the assumption that the maximum number of malicious nodes in the network is not greater than or equal to 1/3 of total nodes in the system (De Angelis et al., 2018). Eventually one node is selected as primary or the leader and the others are termed as secondary or the backup nodes. PBFT mechanism achieves consensus among the participants in rounds where each round consists of 4 steps:

1.
Client node initiates a transaction request to the leader node.

2.
The leader node receives the transaction and package it in a block and broadcasts it to all secondary nodes for verification.

3.
The secondary nodes check the validity of the received block as well as the validity of enclosed transactions and compute a hash on the block and propagates the hash value into the network.

4.
A node waits to receive a valid hash value from 2/3 of the nodes in the network and adds the block to the chain upon receiving a valid response.

3.5. Smart contracts
Smart contract enhances the capabilities of the blockchain technology and allows development of Decentralized Applications (DApps) enabling automation. Although the use of smart contract has gained immense popularity in the current blockchain era, however, the concept of smart contract was put forward long before the advent of blockchain technology by Nick Szabo in the year 1994 (Szabo, 1997). Smart contract is a piece of computer program, comprising of functions and data variables, that can encode business policies and all the terms and conditions of various agreements between involved entities. Such softwarized contracts were first realized in the realm of blockchain by Ethereum platform (Strobel et al., 2019). Accordingly, the use of smart contracts in conjunction with blockchain has been seen as the fundamental offering of the second generation of blockchain, i.e., Blockchain 2.0 (Efanov and Roschin, 2018).

Usually, a smart contract comprises of functions and variables with instructions and predefined conditions (or events). When it is deployed on blockchain, it is assigned a unique address and added to the distributed ledger such that every node has access to exactly the same piece of code. When the pre-defined conditions are satisfied (or those events occur), the smart contract automatically executes a set of procedures (instructions) which gets eventually confirmed as transactions on blockchain with the mining of new block(s) (Zheng et al., 2020). Thus, smart contracts are also defined as self-executing codes.

The programming language used to develop smart contracts for some of the popular blockchain platforms are shown in Table 3. Moreover, smart contracts are equipped with various features based on the targeted application areas of a given blockchain platform (Hewa et al., 2020). For instance, Ethereum is broadly used for decentralized financial and asset trading in the areas such as music, arts, and market investment, analysis and prediction. To cater to these applications, Ethereum platform enabled with smart contracts is used to develop Decentralized Applications (DApps) that require tokenization (Hewa et al., 2020). Every smart contract deployed on Ethereum has ‘gas’ associated with it. The gas value is basically the cost to be paid by a user to execute a smart contract on blockchain because the execution requires computational work and resources (Anon, 2021). Furthermore, the ‘gas limit’ is the way of capping the maximum cost allowed to execute a smart contract. Thus, gas limit allows to tackle erroneous smart contract, for example a smart contract with infinite loops or accidental heavy but unnecessary computation (Anon, 2021).

Thus, in essence, smart contracts are softwarized set of rules pertaining to a given business logic, written in a programming language that depend on the underlying blockchain platform on which they are deployed, and enable development of DApps paving way for automation. Some of the salient features of smart contracts are code immutability and availability, transparency and trust building, autonomous execution and elimination of third-party (Hewa et al., 2020, Zheng et al., 2020)

3.6. Key metrics of blockchain
The properties of the blockchain make it very attractive to deploy it for various use cases. However, like any other system, it also needs to be tested against several quantitative performance measures. Some of the commonly used metrics for evaluating the performance of the deployed blockchain system are given as follows:

Throughput .
implies the number of transactions the deployed blockchain system will be able to process in one second. Throughput is related to the number of transactions in each block and block interval time (Xie et al., 2019).

Latency .
refers to the amount of time the deployed blockchain system takes from when a transaction is initiated until it reaches the consensus. Latency is measured by time to finality (TTF), which is defined as the time for transactions written in blockchain to be irreversible and finalized (Xie et al., 2019).

Fault tolerance .
specifies the maximum number of faulty nodes that can be tolerated by the respective blockchain system (Sukhwani et al., 2017). A Blockchain network should be able to tolerate considerable number of faults for its proper functioning. Faults may be crash fault or byzantine faults (Veronese et al., 2011).

Energy consumption .
indicated the amount of energy consumed by the deployed blockchain system in reaching the consensus (Sedlmeir et al., 2020). The energy consumption for maintaining the blockchain largely depends on the choice of consensus mechanism used. Such as challenge response based consensus mechanisms such as Proof-of-Work has more energy demands than that of fault tolerance based consensus mechanisms such as Practical Byzantine Fault Tolerance.

Scalability.
refers to the ability of the deployed blockchain system to scale in size and functionalities without any degradation in its initial performance. Scalability is measured in terms of storage, in addition to transaction throughput (Xie et al., 2019).

Cost.
Smart Contracts on the public blockchain mainly incur two types of costs — deployment cost and execution cost (Mishra et al., 2021). Deployment cost refers to the cost incurred to deploy the immutable smart contract onto the blockchain, whereas the execution cost refers to the cost incurred for executing an operation that modifies the state of the smart contract such as a data write operation and depends upon the number of writes to be made to the state variables, - higher the writes greater the cost. Execution cost is charged to the writes made on to the data stored in the turing complete smart contracts deployed on the public blockchain, in order to thwart the attempts of a malicious entity exhausting the resources of the network by executing malicious transactions or a logic error in the smart contract such as an infinite loop that may waste the network resources unnecessarily.


Table 3. Various blockchain platforms and their characteristics.

Platform	Type	Turing Completeness	Consensus Mechanism Used	Programming Language(s) (Shrivas and Yeboah, 2018)	Support for Smart Contract	Throughput	Applications
Bitcoin (0000)	Public permissionless	No	PoW	C++	No	4–7 txps (Bitcoin Throughput, 0000)	Finance (most cryptocurrency based)
Ethereum (0000)	Public permissionless	Yes	Proof-of-Work (planning to shift to Proof-of-Stake)	Golang, Solidity, C++	Yes	14 txps (Schäffer et al., 2019)	DeFi, Digital Identity Management, DApps
Hyperledger (0000)	Private/consortium permissioned	Yes	PBFT, RAFT, Pluggable Consensus	Golang, JavaScript	Yes	3000–20000 txps (Gorenflo et al., 2020)	Enterprise Applications, Identity Management, Supply Chains
BigChain DB (0000)	Depends on implementation (hybrid)	No	Tendermint	Python, JavaScript	No	Up to 1 million writes per second (Pon, 2016)	Decentralized Data Storage
Corda (0000)	Private/consortium permissioned	No	RAFT	Kotlin	Yes	6300 txps (Corda, 2019)	Enterprise Applications, Supply Chains, Digital Identity
Openchain (0000)	Depends on implementation (hybrid)	Yes	Partitioned Consensus	JavaScript	Yes	10 −100 txps (Openchain Throughput, 0000)	Enterprise Applications, Securities — bonds, stocks
IOTA (0000b)	Public permissionless	Yes	Fast Probabilistic Consensus	Rust, Golang	Yes	1000–1500 txps (Anadiotis, 2021)	Mobile IoT Applications
Multicoin (0000)	Private permissioned	Yes (from Multichain 2.0 onwards)	Round Robin Schedule	C++	Yes	2500 txps (Multichain Throughput, 0000)	Data Sharing and Archiving Applications
Solana (0000)	Public Blockchain	Yes	Proof-of-History	Rust	Yes	50,000 txps (Yakovenko, 2021)	NFT, Digital Identity Management, DApps
Polkadot (0000)	Public Blockchain	Yes	Hybrid Consensus (Hybrid Consensus, 0000)	Rust	Yes	Up to 100 parachains (Petrowski, 2019)	Oracle Chains, Transaction Chains, IoT Chains
Tezos (0000)	Public permissioned	Yes	Liquid Proof-of-Stake	OCaml, Michelson	Yes	40 txps (S., 2020)	NFT, DApps
txps — Transactions Per Second.

3.7. Various platforms
(a)
Ethereum (0000): Founded in 2014 by Vitalik Buterin, Ethereum is one of the most popular open source public blockchain platform supporting smart contracts and second largest cryptocurrency platform after Bitcoin. Ether is the default cryptocurrency provided by Ethereum, however with the support of smart contracts the platform provide developers the flexibility to develop their own tokens. Solidity is the default language for smart contract development on Ethereum platform, Vyper being the second one. The blockchain relies on Ethash a variant of PoW based algorithm to reach a consensus.

(b)
Bitcoin (0000): Bitcoin blockchain is the first blockchain platform supporting the bitcoin crypto-currency. Bitcoin was invented by a pseudonymous entity Satoshi Nakamoto in 2008 and was launched in the year 2009. The bitcoin blockchain supports a cryptocurrency which is not backed by any organization or banks.

(c)
Hyperledger (0000): Hyperledger is an umbrella project started by The Linux Foundation and is now backed by corporations such as Intel and IBM. The project focuses on development of a variety of blockchain platforms and related tools. Hyperledger fabric is one such framework from the hyperledger foundation which supports modular plug and play architecture. Hyperledger fabric one such blockchain platform from Hyperledger foundation which achieve data privacy via channels. Channels allow private communication between two or more peers in the network. Hyperledger platform supports languages such as Go, Java and Javascript for writing the smart contracts.

(d)
BigChain DB (0000): BigChainDB is a blockchain database. BigChainDB along with traditional database characteristics also possess characteristics of blockchain such as immutability, decentralization and native support to asset. BigchainDB can store data of any kind, but it is designed to be particularly good for storing asset registrations and transfers.

(e)
Corda (0000): Corda is an open source blockchain for business. Corda is a DLT created by R3 consortium. Corda provides improved data privacy by sharing transactions only on a need to know basis. Smart contracts on Corda can be written in either Java or Kotlin.

(f)
Openchain (0000): Openchain is yet another open source DLT suited for organization for issuing and managing digital assets in a secure, manageable and scalable way. Openchain does not use the concept of blocks from traditional blockchain for ordering their transactions. Instead, transactions are directly linked to one another and they are not organized into blocks. The transactions are linked to one another as soon as they are initiated. This allows openchain to confirm near realtime transactions.

(g)
IOTA (0000b): IOTA is an open-source, fee-less, and scalable DLT for value transfer. The value transfer is made via the transfer of IOTA token. In IOTA the publicly replicated ledger is called Tangle. Clients in the network initiate transactions whereas nodes in the network maintain the tangle.

(h)
Multicoin (0000): Multichain is an off the shelf platform for creation and deployment of private blockchains. The core objectives of the platform are - (i) Ensure privacy between participants of the blockchain. (ii) Fine, grained control over the rules of transaction acceptance. (iii) Efficient and secure mining protocol. Multichain provides the user the control to configure the blockchain parameters such as — chain protocol, block generation time, maximum block size.

(i)
Solana (0000): Solana is an open-source permissionless blockchain project. Solana aims to provide a high throughput blockchain platform for financial services and other decentralized applications. Solana achieves faster transaction processing than its counterparts as it uses the Proof of History as its consensus mechanism, which asks the maintainers of the Solana blockchain to perform a lightweight verifiable delay function(VDF). Because of the support of higher throughput Solana is attracting a number of DeFi applications to build upon it.

(j)
Polkadot (0000): Polkadot is often regarded as a next-generation blockchain protocol encapsulating features of different blockchains to a single platform. Polkadot is a sharded multichain network that allows it to processes several transactions across different chains in parallel which further improves the scalability. These different chains are referred to as parachains in the polkadot ecosystem. Polkadot design is highly modular that provides its developers better controls on customization of its features. Polkadot is being explored for different use cases such as IoT, Identity Management, Social Networking, and so on.

(k)
Tezos (0000): Tezos is an open-source blockchain platform for assets movement and upgradable application development. Tezos allows its stakeholders for on-chain governance. Tezos is considered to be an energy-efficient blockchain platform as it uses liquid PoS as the consensus mechanism for its operation. Tezos has support for smart contract development where the logic can be written in a turing complete Domain Specific Language (DSL) called Michelson. Tezos has evolved as a one-shot best choice for DeFi and NFT based projects. It has also been explored in robotics and smart industry domains. RobotChain is one such example (Solana Throughput, 0000b).

3.8. Key challenges of blockchain and smart contracts
3.8.1. Security challenges of blockchain
Blockchains being an open-source community-based software that is publically available to anyone for testing and validating provides an open surface for both the good as well as bad actors to play upon. Attacks on a blockchain platform can take place at different levels such as:

•
Network Level: Blockchains rely on Peer-to-Peer communications for information exchange or blocks and transactions propagation. The attacks that are prevalent at the network level include partitioning attacks, DNS attacks.

–
DNS attacks (Saad et al., 2020): When a new node joins the public blockchain it refers to the list of addresses bootstrapped in the blockchain software to establish the initial connections and to get in sync with the ongoing blockchain activities. Later on, the newly joined network can run the peer discovery protocol to find out other non bootstrapped peers in the network and can establish new connections with them. DNS level attacks take place when an adversary injects malicious addresses to the list of bootstrapped addresses in the blockchain software or poisons the DNS cache at the resolver. Which in turn gets the newly joined blockchain node to get itself connected to these malicious nodes that may mislead the newly joined node to maintain the incorrect instance of the blockchain.

–
Partitioning attacks (Saad et al., 2020): A partitioning attack happens when an adversary disrupts the blocks and transaction propagation flow to a full node or a miner node. This hampers the blockchain-based applications that are depending on the targeted blockchain node. If the targeted node is a miner node it may result in a decrease in the mining hash rate of the blockchain network. Thus giving the adversaries ample scope to tamper with the blockchain.

•
Consensus Level: Consensus level attacks happen when there arises a conflict of interests among the nodes in the network regarding the valid instance of the blockchain. There are two main types of consensus-based attacks known:

–
Majority attack or 51% attack (Ye et al., 2018): The majority attack takes place when a single entity acquires control of 51% of the mining power of the blockchain network, or a group of entities collude together to perform acts against the proper functioning of the activities in the blockchain network. These entities may be influenced and operated from the directions of one single entity or maybe multiple independent entities that have some common interests in going against the normal functioning of the blockchain. These attacks can result in reversing of the committed transactions on the blockchain, prevent legitimate miners to earn block rewards by neglecting their mined blocks, prevent legitimate transactions from getting accepted or delay their acceptance for a significant amount of time, fork the network, and so on.

–
Selfish Mining (Bai et al., 2019): Selfish mining results from the unethical behaviors from resource-rich miners in the network who mines valid blocks in advance however do not propagate their mined blocks to the network until the competitor chain reaches within a threat range.

–
Finney Attack (Kaushik et al., 2017): A Finney attack is an attack from the family of double-spending attacks. In this attack, an adversary creates two transactions one paying to himself and another one paying to the party from which he may obtain some goods or services. The attacker includes the first transaction into a block and mines the block. Post mining he propagates the second transaction into the network and obtains the good or services. Once, the adversary obtains the goods and services he propagates his mined block with the transaction that pays back himself encoded with it. That results in the cancellation of the second transaction automatically.

3.8.2. Security challenges of smart contract
Smart Contracts follow the notion of code is the law (He et al., 2020). A smart contract once deployed onto the blockchain cannot be modified. Smart Contracts that have not been tested thoroughly for bugs and vulnerability and not audited properly are often prone to several hacks:-

(a)
DAO Attack: DAO attack (Atzei et al., 2017) was one of the largest attacks on the Ethereum blockchain that costed the users of the DAO contract millions in ether. The attack exploited the reentrancy code vulnerability that allowed a caller of the contract to call the withdraw function multiple times without deducting his balance. The vulnerability could have been mitigated with a proper ordering of statements that assured proper transaction management in the contract.

(b)
Integer Underflow/Integer Overflow: Such vulnerability arises due to accidental use of datatypes without taking into account of their maximum and minimum bounds. Such as storing an uint16 data into a uint8 datatype variable, it will result in an overflow (Marx, 2018).

(c)
Privilege escalation: It occurs with the wrong selection of function calling privilege specification, such as specifying a highly critical function such as a function that transfers all the funds in the smart contract to an address as public. This will allow anybody to call the contract (Zhou et al., 2020). That should ideally not happen and only an authorized entity such as the deployer of the contract should be able to do so.

3.8.3. Privacy compliance
Blockchains, in general, are public such as the Bitcoin and Ethereum Blockchain. Any data inputted is publically visible. The access specifier in the smart contract controls the data to be manipulated at the application level (Henry et al., 2018). Such as specifying a variable as private does not make it inaccessible over the blockchain it will be still publically visible. So, it is preferable not to put any sensitive data onto the blockchain, if such a requirement is their one can put the hash of the data, however.

3.8.4. Throughput
Throughput of the blockchain platforms has been one of the hot topic of discussions. Public blockchains based on Proof-of-Work based consensus depicts much lower transaction throughput in comparison to private and permissioned blockchains (Kim et al., 2018). Public blockchains do have a restriction on the maximum block size, restricting the number of transactions that can be accommodated into the block. Along with that the resource intensive PoW algorithm used in maintaining the public blockchain results in lower transaction throughput. However, their do exists specific approaches such as Sharding that help increase the throughput to some extent. In case of a sharded blockchain each node in the does not require to validate every transactions coming to the network, instead the entire blockchain network is divided into communities where each community is responsible to process a subset of transactions (Dang et al., 2019). SegWit (Mechkaroska et al., 2018) is yet another approach that helps improve the throughput by removing signature data from the transactions.

3.8.5. Storage issue
With the virtue of being distributed in nature, blockchain requires the same copy of data to be stored over all the nodes across the network. This property causes concerns regarding the space requirements for the nodes maintaining the blockchain, with most of the public blockchain sizes in hundred of gigabytes (800+ GB for Ethereum and 300+ GB for Bitcoin) as of July 2021. Keeping the storage concerns of the devices light nodes were introduced which allows a storage resource constrained device to verify a transaction with Simple Payment Verification or SPV (Xie et al., 2019). Keeping blockchain storage blot in mind, blockchains should be considered only to store highly important data. Also, some careful notion of storing data on the chain will help in slowing the size growth such as — storing hash of data instead of the actual data itself.

3.8.6. Non-existence of technical standards
Blockchains of the present are self confined to its operation and maintenance such as transaction formats, consensus mechanisms and so on. There exists no way in which data from one blockchain can be utilized by another blockchains (Gramoli and Staples, 2018). Or an asset on a blockchain can be transferred to another. However, works are currently being carried out to work on shareable and inter-operable standards for blockchains. Polkadot is one such example.

3.8.7. Non-existence of legal frameworks
Blockchain along with the power of smart contract operates with the ideology of code is law. However, this ideology is only enforceable on the blockchain level in the digital world. There lacks a well defined procedure to enforce the ownership and possession of assets owned on the blockchain to the physical world (Yeoh, 2017). A well defined framework for the mapping of digital rights and ownerships on the blockchain to that of the physical assets is needful for the true utilization of blockchain. This will require inputs from the experts from the domains of legal matters, judiciary and other involved stakeholders (Ganne, 2018). Various governments are working on how to recognize blockchain transactions legally.

4. Blockchainized robotics
There has been a significant increase in the applications of robotics in a diverse and varying number of domains — manufacturing industries, medical and healthcare, rescue operations, movie productions, sports, construction works, and human assistance, being some of over-the-head domains exploiting robotics. Robots are being looked as a cheap and efficient alternative for human services which can tirelessly function 24 × 7. A primary requirement for deploying robots in the public/open environments is to have the trust among the robots as well as between the robots and its environmental set-up involving humans; be it in swarm robots, healthcare robots, UAVs, multi-robot systems or even industrial robots, trust and integrity is a must (Kok and Soh, 2020). However, such an assumption may not always turn out to be true. The robots can operate in remote and hostile environments and are open to the outside world, thus giving an attacker an open opportunity to take control over a robot and disrupt the operations of entire robotic system. A compromised robot often behaves in byzantine manner which can harm the whole chain of processes as well as the operators or users (Izumi et al., 2011).

Blockchain technology, thereby, can play a crucial role in providing trust, security, privacy, tight access control, auditability and availability for robotic system. Fig. 8 provides a panoramic view of what blockchain can offer to different class of robots. Many of these offerings have already been explored by various works, that we have surveyed in this section. Few other features, though not studied yet, are still promising and can be leveraged in near future for robotic systems.

This section discusses and surveys the research works done in recent times that mainly focused on integrating the blockchain technology with the robotics systems. Robotics is a vast domain and growing everyday in terms of its applicability, nevertheless, use of blockchain in robotics have been seen through the prism of eight key use cases. These use cases are based on the classification shown in Fig. 3 as well as on the papers which were surveyed. Efforts are made to provide a clear perspective of research domains that are in the lime-light as far as use of blockchain for robotics is concerned.

4.1. Industrial robots
4.1.1. Introduction
Industrial robots are the largest and well-know commercial application of robotic technology (Hägele et al., 2016). It has immense potential to automate all sorts of industrial processes. More specifically, the industrial processes which are difficult, mundane, risky, and unhealthy can be fully or partially automated with the use of industrial robots (Moulianitis and Aspragathos, 2015). As per Robotics Industries Association (RIA), industrial robots are characterized by automatic controllability, re-programmability, and multipurpose capability (Iqbal et al., 2016). The evident benefits of using industrial robots are reduced cost, improved accuracy, high reliability, improved quality of product, and high efficiency by reducing wastage (Iqbal et al., 2016, Moulianitis and Aspragathos, 2015).

The market value of industrial robotics is estimated to reach USD 75.6 billion by 2024 with an expected Compound Annual Growth Rate (CAGR) of 9.2% (MarketsandMarkets Research Private Ltd., 2020). The fact that supports the tremendous rise of industrial robotics is the reduction in average cost by more than 50% in last 30 years (Aljarboua et al., 2019). Today, with the advent of technologies like IoT, 3D printing, AI/ML and AR/VR, one can see the use of industrial robots in almost all the aspects of industrial processes like designing, manufacturing, packaging, and distributing.

4.1.2. Use of blockchain
Since the dawn of Industry 4.0 (Lasi et al., 2014, Schwab, 2017), industrial automation started inclusion of cyber–physical systems such as robotics, Internet of Things, BigData processing, and cloud computing. Distributed digital ledgers are profoundly favored over conventional techniques to store data and protect it from failures, errors or hacking (Jazdi, 2014). ‘Smart factories’ need trust within its internal entities and between other factories which is ensured by blockchain network at the core of its system architecture. Smart contracts with the embedded rules and software logic can ensure tight access control of the involved entities in any industrial automation systems. Moreover, blockchain can support other enabling technologies that are fueling the growth of Industry 4.0. For instance, blockchain can ensure secure ML model sharing, privacy protected sharing of data required for training, and trusted decision making (Liu et al., 2020).


Table 4. Summary of related works — Blockchainized industrial robots.

Reference	Key Contribution	On/Off Chain	Type of Blockchain	Blockchain Platform	Consensus	Remarks
Lopes and Alexandre (2019)	Proposes RobotChain method to log robotic events.	Off-Chain	Consortium	Tezos	DPoS	Integrates Robotics, Blockchain and AI
Kapitonov et al. (2018)	Describes the organization of smart factory for manufacturing mechanisms creating robot economy.	Off-Chain	Public	Ethereum	PoS	Integrates ROS, Ethereum and AIRA platform.
Teslya and Ryabchikov (2017)	Describes integration blockchain and Internet of Things (IoT) in smart factory setup.	Off-Chain	NA	Ethereum, Hyperledger, Bitcoin	NA	Proposes integration of Smart-M3 platform and blockchain.
Fernandes and Alexandre (2019a)	Utilized blockchain technology in the assembly lines to curb byzantine robots. Transaction Time was used to measure the performance of the system.	On Chain	Private	Tezos	DPoS	Authors suggested on improving Transaction throughput in their future works.
Kobzan et al. (2018)	Investigates the issues of the Industrial IoT and use of blockchain and DLTs as solution.	On-Chain	Private	Simulation-based	Not used	Advocates the use of simulation models to investigate the use of blockchain in industrial manufacturing.
4.1.3. Related work
This subsection presents the works related to Industrial robotics. Table 4 summarizes the related works while providing information like blockchain platform, type of blockchain and consensus algorithm used.

Teslya and Ryabchikov (2017) described the possible ways of integrating IoT and blockchain technology to solve interactions among various components of smart factory. They have proposed a blockchain based platform architecture that combines the Smart-M3 information sharing platform and blockchain platform. One of the main features of the proposed architecture is the use of smart contracts for processing and storing information about the interaction between smart space components.

Kobzan et al. (2018) investigated the issues of the Industrial IoT such as the ability to scale and adapt. The work looks blockchain and DLTs as a protection mechanism against malicious data forgery affecting the decision making processes. Blockchain is explored as a medium to establish trust among the IoT technologies. The work studies the application of Blockchain and other DLTs in a private IoT environment. Experiments were performed on OMNET++ with Ethereum as the blockchain platform using Proof-of-Work consensus algorithm.

Kapitonov et al. (2018) described the organization of smart factory for manufacturing mechanisms using multiple autonomous agents creating what they called robot economy. Authors presented market methods of organizing autonomous agents in smart factory setup. This article is written on top of the work published in the paper (Kapitonov et al., 2017) by the same authors previously. The advantages of robonomics for production processes are stated along with its architecture and applicability of decentralized technologies is illustrated. They listed making the fully automated factories understand customer needs and making the transfer of ownership to a consumer, as their future works.

Fernandes and Alexandre (2019a) exploited the capability of blockchain to eliminate the bottleneck points in the assembly line by keeping the unintentional and misbehavior of the robots. Their work proposed a new blockchain named Robotchain tailored to capture robotic events in a closed environment. The proposal also allows for performance monitoring and even robot tuning by taking advantages of smart contracts and implemented on Tezos blockchain.

Lopes and Alexandre (2019) proposed an approach using RoboChain platform to make the logs of robotic events, in a factory environment, immutable or unalterable by persons with malicious intents. RoboChain ensures information regarding robot’s status, anomalies and malfunctions, during the industrial processes, are not susceptible to tampering by malicious entities. Thus, this method can be used for anomaly detection by securely registering robotics events of an UR3 robot connected to ROS. The information of robot joints data is passed on to the consortium blockchain using smart-contract and use it to detect the anomalies.

4.1.4. Summary
In smart factories and industries, robots are increasingly getting deployed to boost the product-throughput and reduce human involvements in hazardous, repetitive and exhaustive tasks. Automation using industrial robots can yield error-free, timely and near-perfect results in these factory environments. Although employing robots at large scale brings several advantages to industrial scenarios, nevertheless, the responsibility of securing them against forgery and fraudulence of data, processes and communications also weigh in. To mitigate these issues, blockchain in conjunction with smart contracts turns out to be promising technology. In particular, the existing works propose the use of blockchain to develop a trustworthy backbone for industrial robotic systems, by acting as an immutable ledger for fault-detection, and a means to provide secure-envelope for automation processes against malicious agents. Numerous works illustrate how a blockchain-based architecture for robots, using smart contracts, can ensure security for trustworthy data and provide irreversible, immutable ledger platform for logging any malfunctions in the automation and process traceability. However, on the other hand, maintaining blockchain records over long period of time on all the network nodes can turn out to be heavy on storage constraint devices and can impact overall throughput by inducing latency in data processing. Thus, to harness the full potential of blockchain in industrial robotic systems such deployment challenges need to be addressed. To evaluate the performance of blockchain-enabled industrial robotics, platforms such as Ethereum and Tezos (integrated with robotics platforms like ROS and Smart-M3) have been proposed.

4.2. Swarm robotics

Table 5. Summary of related works — Blockchainized swarm robots.

Reference	Key Contribution	Type of Blockchain	Blockchain Platform	Consensus	Remarks
Strobel et al. (2018)	Showcased use of blockchain to efficiently manage security issues of swarm robotic system even in presence of pernicious robots.	private	Ethereum	PoW	Measured the exit probability and consensus time required to establish an agreement on all the genuine (white) nodes. Authors have put source code on github.
Strobel and Dorigo (2018)	Put forward a smart contract driven reputation management running over blockchain infrastructure to scrutinize malfunctioning robots in a swarm.	Private	Ethereum	PoW	Observed Mean Absolute Error (MAE), blockchain size and consensus time in the experiments performed.
Nishida et al. (2018)	Suggested information sharing method using suppression of data.	Private	Ethereum	PoW	Studied Latency, block generation time and blockchain size in the experiments conducted.
Melnik et al. (2019)	Illustrated the randomized rumor spreading algorithm and the weighted voting technique for making distributed decisions using blockchain for AR.	–	–	Voting based	Techniques had minimized the energy consumption of each robot.
Nguyen et al. (2019)	Advocated a new collective decision making algorithm for solving best-of-n problems of swarm robotics using blockchain.	Private	Ethereum (Geth)	PoW	Metrics used for evaluation are consensus time and exit probability.
Strobel et al. (2019)	Showcased consensus algorithms among swarm robots to avoid Sybil attacks.	private	Ethereum	PoW	Absolute error, harm percentage and consensus time were the metrics used. The developed robot-blockchain interface is made available on Github by authors.
Khawalid et al. (2019)	Proved the efficiency of DLT in Swarm robotics in search and rescue operation using Tendermint consensus algorithm.	Private	BigchainDB	PoW	Maximum transaction rate and Convergence time taken by agents were evaluated in the experiments.
Singh et al. (2020a)	Introduced less-resource-intensive blockchain-based framework.	Private	Ethereum (Geth)	PoA	Experimentation results showed increase in the process efficiency and decreased Memory consumption.
Karthik et al. (2020)	Exploits blockchain framework’s potential in construction fields which could be dangerous for humans to work.	Public	–	PoW	Swarms are equipped with autonomous path planning, traversing and pick-n-place functionalities using blockchain as backbone.
Ferrer et al. (2019)	Proposed model for swarm robots to prove their integrity without disclosing its raw data using merkel trees.	–	–	–	Foraging and maze formation missions were used to test the approach.
Pacheco et al. (2020)	Elaborates how to setup test-bed using Ethereum blockchain and Pi-pucks (an extension that uses Raspberry Pi board for e-puck)	Private	Ethereum (Geth)	PoA	The overall setup uses Pi-pucks, Ethereum blockchain, and WiFi network to from a mobile ad-hoc mesh network using robots.
4.2.1. Introduction
Swarm robotics is such a field of robotics that deals with the large number of modular robots actuating and sensing independently whilst communicating, cooperating, and coordinating with one another, inspired from nature. These simply-designed robots can easily accomplish critical and difficult tasks when working together, however, they cannot do the same when each of them is made to do in stand-alone mode (Beni, 2004). This domain of robotics is inspired by nature and biology of ants, insects, birds and more, which work in swarms. Usually, swarms are made of similar/identical robots such as drones, and they coordinate with each other by computing and formulating desired paths and actions independently (Dorigo et al., 2014).

Swarm robotics has its origins around three decades ago; although the research interests got faded in late nineties, but nevertheless roboticists fastened the research in this area since early 2000s (Beni, 2004). Although in recent years, the focus has been shifting from a bio-inspired field of research to an engineering field. Swarm robotics can turn out to be a strong contender in increasing efficacy and productivity in agriculture. Agriculture represents a challenging domain and constitute the second highest impact for mobile service robot after military (IFR, 0000). Applications of swarm robotics can range from military operations to search and rescue operations (Couceiro, 2017), smart logistics (Wen et al., 2018), and precision farming (Albani et al., 2017).

4.2.2. Use of blockchain
Since, swarm robots are deployed in isolated and hostile environment (Feng et al., 2021) thus most of the time they might not be accessible during operation by the centralized control system. Moreover, they need to cope up with the challenges such as communication failures, tampering and different types of attacks (Higgins et al., 2009b). Blockchain can act as a decentralized platform for trusted automation and secure data sharing among robots in a swarm, where the automation, data sharing and decision making is governed via smart contracts deployed over blockchain infrastructure.

4.2.3. Related work
The works pertaining to the use of blockchain for swarm robotics are discussed in this subsection. Table 5 captures the details like blockchain platform, type of blockchain and consensus algorithm used for the considered related works.

Strobel et al. (2018) proposes a blockchain based proof-of-concept for managing security issues in Swarm robotic system. The proposed approach was able to handle both faulty as well as misbehaving Byzantine robots by providing a security layer on top of existing algorithms. Experiments were performed using both the classical as well as blockchain based approach in presence of Byzantine robots on a white and black tiled floor. With the classical approach the experiment always converges to the wrong color if the simulation is not stopped when the sub swarm consensus is reached. In contrast, the consensus is being achieved in a fully decentralized manner with the use of blockchain based smart contracts without a prior knowledge of Byzantine Robots. The blockchain based approach used computation-intensive proof-of-work consensus mechanism to achieve consensus which in turn reduced the design space to algorithms that were meant to work without blockchain technology.

So, Strobel and Dorigo (2018) presented a new tailored-algorithm using blockchain technology with the same experimental setup as that of the above mentioned work, to exploit the blockchain’s capabilities to be a (i) Shared knowledge medium - provides shorter consensus time and ease of implementation of robotic control algorithms, as compared to conventional approach, (ii) Reputation management system - ensures high accuracy even in the presence of a few byzantine robots in robotic swarm (iii) Computing platform. The goals of experiments performed were mainly to (i) estimate the relative frequency of colored tiles, (ii) study the influence of threshold parameter on various attributes and (iii) study the influence of byzantine robots using secure and non-secure approaches.

Nishida et al. (2018) introduced a methodology to share information among autonomous robots and demonstrated through experiments that how the differences in sizes affect the data in the chain. In this work, an information sharing approach is being proposed for Swarm Robotic System (SRS) using blockchain whose size increase does not depend on the shared data. The suppression in the data size is made by sharing of the hash value instead of the raw data.

Melnik et al. (2019) proposed blockchain-based technique for distributed decision making of swarm robots keeping in mind the energy-efficiency of data being propagated within the swarm. The authors presented the method that utilizes the randomized rumor spreading algorithm and the weighted voting technique for making distributed decisions and minimize the energy consumption of each robot in the swarm while communicating with its peers. A limitation is also addressed by the authors, that the proposed technique is not stable if a byzantine robot is introduced in the swarm.

Similarly, Nguyen et al. (2019) noticed the shortcomings of the existing conventional algorithms and thus, proposed a collective distributed decision making algorithm, but, with an approach of selecting the best alternative out of n-problems in a robotic swarm. In contrast to the classical mechanism like DMMD, this algorithm encourages every node to caste a vote for decision making instead of majority voting decision making strategy. Five different experiment scenarios were considered for best-of-n problems. They compared their blockchain based approach with the non-blockchain based methods. The comparison was made on the basis of two metrics namely (i) Consensus Time and (ii) Exit Probability. The blockchain based approach outperformed the non-blockchain based approach. It required lesser time to reach the consensus with higher exit probability meaning lesser false positives.

Strobel et al. (2019) have showcased the consensus achieving mechanism among swarm robots, in presence of byzantine robots utilizing blockchain technology. They also differentiated different consensus algorithms for collective sensing scenarios and avoid Sybil attacks. Using ARGoS platform, experiments were conducted making each of 20 swarm robot as an etherum blockchain node to run obstacle avoidance and random walk routines. The robots get ether by mining and sending sensible correct sensor values to traverse on white and black tiles. This reward mechanism makes byzantine robots fail to include false values into the chain. They did statistical and experimental analysis of the LCP, W-MSR and blockchain-based consensus algorithms in the presence as well as absence of the byzantine robots.

Khawalid et al. (2019) tested the practicability and usability of Distributed Ledger Technology (DLT) in swarm robots. They proved the efficiency of DLT in Swarm robotics by conducting a search and rescue experiment using drones. These drones communicate within themselves via a blockchain ledger (DLT) while searching (mapping) for the point of interests and navigating there. Authors also mentioned that DLT solves six of the mentioned challenges faced by the swarm robotics using BigchainDB and NodeJS as environment.

Ferrer et al. (2019) proposed a novel model to encapsulate cooperative robotic missions in merkle trees. With the proposed model swarm robot has to prove their integrity without disclosing its raw data. This work analyzes and test the approach for two different robotic missions — foraging and maze formation. The proposed model achieved secure and secret robot communication thus making robotic swarm members resilient against swarm member capture and physical attacks. Results show that the larger number of robots in the swarm tend to increase the performance of the system.

Singh et al. (2020a) dealt with the issue of resource-intensive blockchain frameworks being difficult to be maintained on limited capacity resources available on-board the swarm robots. Authors introduced a blockchain-based framework based on PoA consensus mechanism to reduce the load on system resources without compromising the advantages of blockchain. They used a majority voting rule written in terms of smart contract logic deployed on top of the blockchain to reach an agreement. The experimental setup demonstrated promising results that this approach increased the efficiency in data processing.

Karthik et al. (2020) proposed decentralized blockchain-based Swarm robotic system inspired by bees, which can solve the issues in the construction field, where human presence and labor cannot be possible or turn out to be dangerous such as in underwater constructions and disaster rescue operations. They propose blockchain logic and path-planning algorithm, utilizing trajectory tracking and dynamic velocities of robots which are backed up by the experimental setup, in which individual robots completes the task of picking and placing the blocks from different positions to desired point, by traversing autonomously on the arena whose blueprint is initially fed to the robots.

Pacheco et al. (2020) have provided a technical report detailing how to use research robot e-puck and its extension with raspberry-pi to run blockchain-based experiments easily. The report has provided a detailed review of steps in terms of hardware and Pi-puck operating system, along with establishing a local etherum node for interacting with the blockchain and a mobile ad-hoc mesh network with WiFi communication. The setup have been tested using multiple Pi-pucks using python programming language.

4.2.4. Summary
Swarm robots, being a group of simple homogeneous robotic entities, coordinate and co-operate with each other to complete a desired job of automation in many diverse fields. The utmost advantage of such swarm robotic systems is being able to handle complex tasks, which if assigned to any single entity of the swarm, would be deemed to be hard to handle. In order to do coordinate efficiently, swarm entities need to incorporate architecture having secure communication and trustworthy data transmission among these (mostly) autonomous entities. Herein, blockchain facilitates such platform for developers, which can revolutionize the capabilities of swarm robots to change their behavior, functionality and the state of action, by trusting the data across the swarm. This helps in increased productivity and easy maintenance, independent of the nature of job. Authors have implemented distributed computing and decision making algorithms, fault-detection system, byzantine detection mechanism and secure communication platform using blockchain framework in their respective works. In a way, blockchain-enabled swarm robots can lead to significant benefits, however, some of the downsides of using blockchain are (i) blockchain can be resource-hungry to run on limited capacity robotic entities, (ii) process latency induced due to the block mining time, and (iii) network-wide communication overhead, can lead to serious issues typically when the formation and deployment of swarms has to be carried out in time-critical scenarios. This can be mitigated by using efficient consensus mechanisms and optimized parallel blockchains (Ferrer, 2018). Furthermore, the most used blockchain platform for swarm robotics is Ethereum and accordingly the PoW is the most popular consensus algorithm. Nonetheless, the preferred type of blockchain is private blockchain.

4.3. Multi-robot systems

Table 6. Summary of related works — Blockchainized multi-robot systems.

Reference	Key Contribution	Type of Blockchain	Blockchain Platform	Consensus	Remarks
Basegio et al. (2017)	Illustrated multi-robot systems for disaster response situations using blockchain as a decentralized task allocation and communication channel.	Private	–	–	Paper explains measures consistency, integrity, resilience, security, transparency and immutability of data among the agents.
Mokhtar et al. (2019)	Proposed a novel multi-robot path planning mechanism for real-time applications which is implemented using enterprise-grade hyperledger fabric.	Private	Hyperledger Fabric	SOLO	Metrics used for evaluation are path planning time and (ledger commit) latency.
Guo et al. (2019)	Suggested a Micro-Blockchain system for spherical Multi-robot system with Long Range (LoRa) technology for communication.	Private	–	Voting based	Both the blockchain system and collaborative algorithm showed promising results.
Queralta and Westerlund (2020)	Proposed blockchain-based system to curb the vulnerability of sybil attack, by estimating resource availability beforehand in multi-robot systems.	Public	Ethereum	PoW	Exploited PoW systems for the evaluation, however, suggested use of both PoS and PoW.
Alsamhi and Lee (2020)	Suggested blockchain framework in multi-robot systems to tackle COVID-like pandemics in quarantined areas using Robochain and smart contracts.	–	–	–	The proposal is supported with use cases.
Guo et al. (2020)	Proposed distributed data processing system based on edge computing and blockchain framework using LoRa communication technology to curb Byzantine fault-tolerant problems in spherical multi-robots.	Private	–	Voting based	A practical approach of using edge computing, blockchain and LoRa communication on embedded nodes is showcased along with architectural description.
4.3.1. Introduction
Multi-Robot systems are nothing but swarm robotic systems with lack of some or other form of decentralization at the computation, communication, and/or operation levels (Chamanbaz et al., 2017). Thus, multi-robot has broader scope than swarm robotics. In the multi-robot systems, each robot individually is indeed capable of doing a part of the given job, if not completely, unlike swarm robots. These systems can contain heterogeneous (non-identical) robots which communicate and coordinate to achieve the desired behavior to complete a task as shown in Fig. 9. Navarro and Matía (2013) distinguishes swarm robots from multi-robots in terms of characteristics and also reviews various taxonomies of the multi-robot systems for swarm robotics.

The research on multi-Robot systems came in to lime-light in late 1980s with a series of projects getting realized successfully (Yan et al., 2013). Today, there are numerous applications of this system contributing to the robotic industry’s success in the modern world, including environmental monitoring, network intrusion and structure stability detection, and healthcare (Baig, 2012, Sustarevas et al., 2020).

4.3.2. Use of blockchain
Multi-robot systems ought to have immunity to false information in forms of byzantine entities in the system and/or resistant from hacking/manipulation of data and path-planning systems which can lead to disastrous outcomes. The entities, if operated in the centralized multi-robotic system, can cause major distress upon the user if being hacked or fed with malicious information. Blockchain provides an unalterable, decentralized, secure and trustworthy platform to enabling functionalities like coordination and allocation of individual tasks, path-planning and control system, and as resource platform (Afanasyev et al., 2019). Smart contracts and decentralized computing makes effects from byzantine entities negligible, and important features of blockchain to be clubbed with these systems. Furthermore, in view of COVID-19 pandemic blockchain has been recognized as one of the key enabling technologies (Kritikos, 2021) that can offer multitude of benefits and support various applications and use cases (Kalla et al., 2020).

4.3.3. Related work
The works related to the use of blockchain for multi-robot systems are surveyed in this subsection. Table 6 highlights the information like blockchain platform, type of blockchain and consensus algorithm used for the considered related works.

Basegio et al. (2017) proposed an architecture using blockchain technology which enables dynamic and decentralized task allocation and a communication medium among the robots, and between robots and organization. The task allocation is done on the basis of available roles for the task and the capabilities needed to perform that task. The robots then calculate its bid on the basis of its capabilities and places the bid in the controller. The blockchain is used as a intermediate passage way to transfer the information of tasks and bids bidirectionally in a secure way. These mechanisms are tested out with an experimental case study of a flooding situation which concluded that the architecture they deployed provides sharing of knowledge within the system as well as to the new robots being added to the process.

Mokhtar et al. (2019) illustrated an approach to integrate multi-robot path-planning DCSs with permissioned, enterprise-grade blockchain platform using a robot client application, which prioritizes the order of robots to compute their own paths with the help of Probabilistic Road Map (PRM) algorithm. This application is deployed on the Hyperledger fabric platform (Dhillon et al., 2017, Androulaki et al., 2018) using Java Software Development Kit (SDK), in which, unlike conventional PoW mechanism, an alternate computationally power-efficient consensus mechanism, known as ordering service, is implemented. The authors projected the results of simulated Hyperledger Fabric network which showcased the minimal transactional latency and smaller delay times; thus, concluding that this solution enables secure and scalable DCSs.

Guo et al. (2019) proposed a micro blockchain and a collaborative algorithm based on decentralized architecture which can be used for Spherical Multi-robot system with P2P communication layer. LoRa was considered as the communication technology which along with communicating with the main controller, generates the new blocks in the blockchain network. Based on the experiments, the work showed that Spherical multi robot system can accomplish much complex tasks with micro blockchain based collaborative algorithms which can meet the real-time control requirements.

Queralta and Westerlund (2020) had taken into account the challenge of optimizing the amount and type of data being shared among the robots during their collaboration within heterogeneous multi-robot system. PoW system has been deployed to estimate the availability of computational resources of distinct robots. Smart contracts were integrated to analyze the quality of information and rank the trustworthiness of the robots’ sensor data. The algorithm thus proposed, curbs the vulnerability of sybil attack by mandating the PoW, for each of the nodes requesting to join the network, and authenticating them. Latency and bandwidth of the connection is also estimated at the same time.

Alsamhi and Lee (2020) proposed a conceptual framework involving blockchain technology in multi-robot systems to combat pandemics, such as recent COVID-19, in the quarantined areas; and also highlighted the challenges and opportunities related to the field. They have categorized the tasks from the start of the outbreak till the robots get into action to combat the situation. They have detailed the collaboration management and controlling mechanisms, monitoring systems and delivery systems at quarantine and hospital areas, using Robochain system as well as smart contracts. The proposed framework includes controlling multi-robot in a decentralized collaborative manner. Also application domains and use cases are mentioned to support their proposal.

Guo et al. (2020), continuing their previous work on spherical multi-robot system, proposed a distributed data processing system for decentralized multi-robot system exploiting blockchain and edge computing technologies, to solve the Byzantine fault-tolerant problem in limited-resource embedded entities. They utilized LoRa technology for establishing communication among the entities, which accounts for narrow-band network and communication delay. Hence, suggested using edge computing on a blockchain framework for distributed big data processing in the spherical multi-robot system, instead of overloading the nodes at each robot. This enables transfer and reception of large amount of robotic data in the multi-robot network.

4.3.4. Summary
Multi-robot systems are similar to swarm systems, but consists of different (or unique) entities of robots coordinating with each other, unlike swarms. Here, each of the entity is capable of completing a section of the job independently from other entities, which boosts the overall performance of the system when these entities are employed as a multi-robotic system. As the diversity brings some advantages for these systems, hacking and/or phishing of data from the vulnerable sections of the system is a vital concern, Blockchain and smart contracts have been proposed to perform decentralized task allocation and path-planning, to govern trust-less resource-handling and to secure the system from byzantine entities. Furthermore, blockchain with its inherent consensus mechanism has been used for authentication for establishing secure communications between the entities autonomously along with edge computing capabilities. On the flip side, it can become a cumbersome task to manage the addition of new entities (with varied functionalities) into the existing multi-robot system; in terms of trusting the quality of data they publish into the system. It is worth noticing that the mostly private blockchain along with varied consensus mechanisms. Hyperledger and Ethereum were the platforms exploited in the studies.

4.4. Unmanned Aerial Vehicles (UAVs)

Table 7. Summary of related works — Blockchainized UAVs.

Reference	Key Contribution	Type of Blockchain	Blockchain Platform	Consensus	Remarks
Kapitonov et al. (2017)	P2P decentralized network architecture and AIRA were utilized to connect and communicated different UAV agents.	Public	Ethereum	PoW	Blockchain platform was used as medium to pass the trajectory information to UAVs securely.
Fernández-Caramés et al. (2018)	RFID tags are used on goods to keep track of them, in industrial setup where UAVs carry them over places. Blockchain creates a trustworthy platform for UAVs.	–	–	–	Experimentation with blockchain and IoT-based smart contracts is considered as future scope of the paper.
Kuzmin and Znak (2018)	Proposed a blockchain based UAV Network, where each UAV is a blockchain node. Used Proof-of-Graph (PoG) as the consensus mechanism.	Private	–	PoG	PoG consensus mechanism requires dynamic partitioning of UAV groups. Future works may include research to improve functional and information security of UAV Nets and prevent air traffic accidents.
Islam and Shin (2019)	Proposed a blockchain based secure outdoor health monitoring scheme using UAV for smart city.	Private	Ethereum	PoW	Investigating procedure for health data diagnosis and user notification.
Sharma et al. (2019)	Proposed a drone-caching mechanism based on neural-network caching to provide highest possible communication reliability over blockchain model.	Public	NBTM	PoW	Conducted performance evaluations to analyze the network model using graphical and tabular outputs.
García-Magariño et al. (2019)	Illustrated the use of blockchain-based infrastructureless surveillance UAV network in a trustless environment, to detect UAVs which gets compromised.	–	–	–	ABS-SecurityUAV simulator shows the information diffusion approach of blockchain affirms the efficacy of their experiment results.
Fernández-Caramés et al. (2019)	Advocated the use of blockchain as a distributed ledger platform for UAV-based system in warehouse and inventory management, where UAVs are tagged with RFIDs which is used to estimate the item location just by hovering over the area.	Public	Ethereum	PoA, PoW	ABS-SecurityUAV simulator shows the information diffusion approach of blockchain affirms the efficacy of their experiment results.
Islam et al. (2020)	Represents a blockchain empowered smart surveillance architecture in which UAV performs surveillance and uses a two-phase authentication process to verify the marine vehicles	Private	–	–	Metrics used for evaluation were authentication time and energy consumption.
Ge et al. (2020)	Proposed a Blockchain-based IoT architecture that addresses the security and privacy issues in UAVs. Data control and reception is secured in the autonomous use-cases along with reducing data integrity and availability attacks.	Private	Ethereum	DPoS	Experiments are conducts to measure the throughput variation, time overhead and malicious-node reputation for their proposed solution
4.4.1. Introduction
UAVs are vehicles that can fly and operate without human on board (Schenkman, 1955). UAVs can be categorized as Low-Altitude UAVs (LAU), High-Altitude UAVs (HAU), and satellites (Alzahrani et al., 2020). Most UAVs have remote control facilities that are helpful to avoid unnecessary crashes and to navigate the UAVs away from danger, by the remote-pilots. However, with advancement in technology autopilots are getting popular for automated UAV control (Chao et al., 2010), which uses path-planning and trajectory algorithms.

Pilot-less airborne vehicle marks its inception in late 1910s with the design of Kettering Bug as the first significant appearance of UAV (Mueller, 2009). Since then, the last century has witnessed drastic evolution in the drone technologies. By 2022, the fleet of small model UAVs (primarily used for recreational purposes by hobbyists) is expected to reach a mark of 1.38 million units whereas small non-model UAVs (primarily used for commercial purposes) are forecast to be 789,000 units as per the Federal Aviation Administration FAA’s report (Federal Aviation Authority, 2019). Moreover, by same year i.e. 2022, the global market of UAVs is estimated to value at $68.6 billion (Intelligence, 2013). UAVs find their prospects in the domains of Product Delivery (Song et al., 2018), Disaster Relief (Erdelj et al., 2017), Fire fighting (Yuan et al., 2015), Ariel photography (Li and Yang, 2012).

4.4.2. Use of blockchain
The security aspect in UAV communication has not been studied by the researchers but after 2009 UAV hijacking incident (MacAskill, 2009) researchers started exploring cyber attacks on UAV systems (Mehta et al., 2020). UAVs being deployed in an open atmosphere are vulnerable to being lost, destroyed and even physically hijacked (Alladi et al., 2020). Blockchain being a decentralized and distributed system assures high availability and protects the data with secure cryptography protocols. Decentralization and automated decision making capabilities enforced by the smart contract over blockchain are the most crucial benefits of applications of blockchain in UAVs.

4.4.3. Related work
The works related to the use of blockchain for UAVs are discussed in this subsection. Table 7 summarizes information like blockchain platform, type of blockchain and consensus algorithm used for these related works.

Kapitonov et al. (2017) illustrated the protocol to establish communication between MAS to plan activities and map actions by intercommunicating with each other. The authors showcased the P2P decentralized network architecture for communication of the autonomous UAVs with each other and usage of smart contracts for securing local and network data communicated between agents. Autonomous Intelligent Robot Agent (AIRA) protocol was utilized in the architecture to connect variety of agents in a given network. a dispatcher services is also considered which assign safe flight routes to UAVs according to its traversal waypoints. These routes are put into a blockchain from where UAVs receives them and performs the flight trajectories.

Fernández-Caramés et al. (2018) authors exploited UAV and blockchain technologies to validate the data collected from industrial inventories as true within untrusted third-party environments and speed up the data collection process. The authors presented the design and communication architecture for automating and keeping trace of industrial inventories having Radio Frequency Identification (RFID) tags, under Industry 4.0, using UAVs; further, blockchain is used as a decentralized ledger to keep high levels of tracability, trustworthiness and transparency of the inventory data.

Kuzmin and Znak (2018) presented a concept of application of Blockchain in UAVNet for mitigating hacking attempts. The work takes on a detailed study on several threats to the UAVNets. It uses a concept of Proof-of-Graph (PoG) as the consensus mechanism. PoG works on the method of dynamic partitioning of aggregated UAVs involved into number of conditional groups.

Islam and Shin (2019) utilized blockchain technology to make the outdoor health monitoring system, using UAVs, immune to cyber-threat and maintain data integrity during communications. Authors used encryption methods to send Health Data (HD) to Mobile Edge Computing (MEC) servers via UAV to process and understand in real-time about health risks (if any) of the users of the wearable-sensor devices, and intimate users as well as the nearby hospitals for early signs of abnormalities. Thereafter, HD are securely stored in blockchain, for which simulation results are shown to check feasibility. Experimental setup is provided in the paper, but its results are kept for future scope. Also, user interface and HD Diagnosis are to be studied in the future works.

Sharma et al. (2019) provided an insight about ultra-reliable communication in MEC and presented neural blockchain-based drone caching approach which enables such a communication among the drones making efficient transport mechanisms. The approach presented in this paper, forms a transport model using neural-blockchain networks, leveraging three blockchains for creating a master blockchain. A drone caching model is formulated in which, drones are used as on-demand nodes for efficient caching which leads to high performance and improvised data collection and analysis rates between the cache servers. The paper then evaluates the performance for large sets of users to determine the efficiency of defined network and approach.

García-Magariño et al. (2019) proposes a technique for maintaining security in UAV networks in context of surveillance by corroborating information about events from different sources. UAV networks conform a P2P information sharing inspired by blockchain and detect compromised UAVs based on trust policies. The work considered different malicious behaviors of compromised UAVs. The approach safely detects intruders when a minority of the official UAVs is compromised.

Fernández-Caramés et al. (2019) developed a blockchain and distributed ledger solution to store certain inventory data collected by UAVs for validation and making them available to different interested parties. The work presented the design and development of an UAV and a blockchain based system for Inventory 4.0 and traceable applications. The system is used to collect and process inventory data in real time and is able to send it to blockchain and decentralized storage. The business logic is implemented using the smart contracts on the ethereum blockchain.

Islam et al. (2020) aimed to solve the issue of marine area infiltration by fishermen and unauthorized ships – which can effect country’s revenue and sovereignty in a negative way – with the help of UAV technology for surveillance and blockchain for securing the communication data. The authors illustrated a blockchain-based architecture for surveillance system with the help of UAVs, which uses two-level authentication for identifying marine vehicles, and a secured communication between control center and UAVs achieved by using blockchain technology. The authorized marine vehicles are registered in blockchain beforehand and later identity validation is performed by UAVs, if found unauthorized, UAVs alerts the control center.

Ge et al. (2020) proposed a novel, secure and lightweight blockchain architecture for secure UAV communications. The work present a blockchain based IoT architecture for UAV based applications to receive sensor data which is controlled in a trusted and automated way. The work was practically examined with experiments and based on evaluation scheme.

4.4.4. Summary
UAVs or drones are one of the most wide-spread technologies after mobile phones, that are now being exploited in research, industrial, artistic and household applications, including and not limited to, aerial photography, autonomous deliveries, warehouse management, and surveillance. In these applications, security and integrity of data are critical factors for protecting the drones from going rogue and harm the users and/or processes. Existing works have proposed ways to provide trustworthy data and create a guarded communication network among these systems, using blockchain technology. Some of the noteworthy benefits of using blockchain along with smart contracts are identity verification, blocking hacking attempts, detecting byzantine drones, providing immutable distributed ledger system for inventory data and establishing fraud-resistant communications with other drones. On the contrary, use of blockchain demands comparatively high energy requirements than the limited available on-board power source. Apart from that, the possibility of 51% attack and the complexity involved in both simulation-based and real-life testing and validation, pose challenges to analyze the performance, trade-offs and clear benefits of blockchain integrated UAVs. Ethereum is the common platform being utilized in the works constituting PoW mechanisms.

4.5. Embedded systems in robotics

Table 8. Summary of related works — Blockchainized embedded systems in robotics, medical robots and service robots.

Reference	Key Contribution	Type of Blockchain	Blockchain Platform	Consensus	Remarks
Embedded Systems in Robotics
Fernandes and Alexandre (2019b)	Time-segmentation technique is illustrated to store big chunks of blockchain on the memory-constraint embedded nodes by creating sub-blockchain segments.	Consortium	Tezos	PoS	Possibility of retrieving blocks of previous segments and dynamic allocation of ‘number of blocks per segment’ based on memory capability of the particular node is yet be studied as future scope of the paper.
Falcone et al. (2019)	Authors illustrated the optimization of the blockchain framework over limited bandwidth and proposed a decentralized mapping protocol for embedded hardware-based distributed robotic systems.	–	–	PoV	System efficiency and power consumption were studied and betterment of communication protocol in similar or worse limited-bandwidth is noted as future works.
Medical Robots
Gupta et al. (2019)	Proposed HAbiTS, a blockchain-based framework, to curb privacy and security issues presented by traditional telesurgery systems	Private	Hyperledger Fabric	–	Advocated how hyper-ledger platform secures patients’, surgeons’, and caregivers’ data.
Gupta et al. (2020a)	Proposed BATS which exploits both AI and UAVs to form a telesurgery system based on blockchain technology to provide better throughput than conventional systems.	Public	Ethereum	PoW	Metrics used for evaluation are throughput, latency, network packet loss, cost, and network bandwidth. Future work is to provide smart-contracts with minimum delay and high energy efficiency.
Service Robots
Leiding et al. (2016)	Proposed self-managed Vehicular ad-hoc networks (VANETs) with the help of Ethereum blockchain.	Public	Ethereum	PoW	Mandatory additional applications for traffic regulation, vehicle tax and vehicle insurance are proposed to be run on network.
Fukawa (2020)	Challenges relating to Robotic Service Assistants (RSA) were reviewed and blockchain-based robotic service organization was proposed.	Consortium	–	–	Impacts of RSA framework were described on the basis of customer service experience
4.5.1. Introduction
Almost all robots discussed until this subsection and further, consist of integrated embedded systems – such as System on Chips (SoCs) and Single-Board Computers (SBCs) – within them, combined with other peripherals and mechanical systems. These embedded systems make up the electronic hardware and software foundation which constitute the cognition and computational capabilities – ranging from basic control systems to complex path-planning algorithms – along with perception and actuation for the whole robot. Without these embedded systems, the robots shall solely depend upon external computational devices and control systems for completing specific tasks, leading to security, safety and response-delay issues.

4.5.2. Use of blockchain
Being a powerful technology, blockchain provides strong and fraud-resistant platform for robots, but due to the fact that robot’s fundamental architecture is based on embedded systems, there comes few limitations on deploying the full-fledged version of blockchain directly onto the embedded nodes of the robot. We, thus, considered ‘Embedded Systems in Robotics’ as a different subsection to address and turn the attention of researchers as well as curious readers towards development blockchain at the ground-level; creating tremendous scope to upgrade the embedded systems’ and develop compatible blockchain-based frameworks at system-level design itself.

4.5.3. Related work
Fernandes and Alexandre (2019b) addressed the issue of the low memory constraint of the embedded system nodes attached to robots for storing the continuous new entries contributed to the blockchain. To curb this issue, the authors proposed the time-segmentation technique integrated with robot-targeted blockchain called RobotChain. Instead of keeping entire blockchain on the memory-limited nodes, linked sub-blocks, known as segments with limited number of blocks, are created and stored in them while maintaining the integrity of data and non-modification of the chain.

Falcone et al. (2019) proposed a decentralized mapping protocol for distributed robotics systems running on embedded hardware, which traverses on lattice space structures. The authors illustrated use of blockchain technology in decentralizing mapping framework in robotic system, which have robots interacting with each other using wireless LoRa radio communication; as well as they discussed the optimization of the framework over limited bandwidth. The huge trade-off of having used blockchain on an embedded hardware was that the hardware power and computational time were increased which supposedly can be recovered using multiple processors at once. Thus, evolving the blockchain framework without substantially modifying the embedded system is to be seen as future works based on their paper.

Table 8 summarizes information like blockchain platform, type of blockchain and consensus algorithm used for the related works pertaining to embedded systems in robotics.

4.5.4. Summary
Embedded system is the heart of any robot, both in terms of hardware and firmware, including the processing unit, motor-control logic, power distribution system and other digital circuits which drive it. This system, thus, need to able to handle all the real-time requirements to support and manage working of the robot, using limited memory capacity, processing power and security features. Blockchain can be made to be implemented at this ground-level to provide low-level-data security and an immutable ledger for embedded firmware. It is evident from the less number of published works, that not much research has been conducted for integrating blockchain in robotic embedded systems particularly, at the ground-level, i.e., embedded hardware or firmware areas. The existing works propose segmentation of blockchain and low-bandwidth mapping protocol on embedded platforms. The significant obstacle for implementing a blockchain directly onto embedded system is the limited processing as well as memory capacity locally available.

4.6. Medical robots
4.6.1. Introduction
The robots deployed in medical fields, such as surgery (Howe and Matsuoka, 1999), assistance in hospitals (Kaiser et al., 2020), elderly-care robots (Abdi et al., 2018, Hing et al., 2020), nursing robots (Melkas et al., 2020), robotic prosthetics (Bogue, 2011), and targeted drug-delivery nanobots (Hu et al., 2020), come under the category of medical robots. Using robots in surgery began with 1985’s Puma560 robot to perform neurosurgical biopsies with high precision; followed by PROBOT and ROBODOC to be used in trans-urethral resection of the prostate and hip replacement surgeries respectively (Lanfranco et al., 2004).

4.6.2. Use of blockchain
As these robots are designed to provide high precision and error-free operations, for working closely with healthcare workers and patients, trustworthy systems are needed to control, operate and manage these (semi)intelligent-machines. Blockchain provides an fraudulence-immune platform for these robots to operate securely without compromising human health. In research centers where drug testing and developments take place, drug-manufacturing robots can entrust blockchain platform to store the medical information and help fight counterfeit drugs.

4.6.3. Related work
Gupta et al. (2019) proposed a blockchain based framework for telesurgery to address the issues of privacy, security and interoperability issues of the traditional telesurgery mechanisms. The work begins with studying the architecture of the traditional telesurgery systems and the challenges posed by it. In, the line a blockchain based framework named HAbiTS is proposed to resolve some the challenges in the traditional architecture. The operational logic were incorporated in the smart contract.

Gupta et al. (2020a) proposed a UAV-integrated Blockchain and AI-empowered Telesurgery System (BATS) using 6G communication network, and AI algorithms like eXtreme Gradient Boosting (XGBoost), to enable intelligent telesurgery system, for achieving extremely high throughput, low packet loss, low storage cost, high mining profit, low bandwidth consumption by the InterPlanetary File System (IPFS) protocol and high prediction accuracy as compared to conventional telesurgery systems such as HAbiTS (Gupta et al., 2019) and AaYusH (Gupta et al., 2020b) schemes. BATS is divided into 5 layers of operability, namely, (i) Patient layer, (ii) Analytic layer, (iii) Blockchain layer, (iv) Surgeon layer and (v) UAV layer. Authors also illustrated the security and network issues of existing telesurgery systems and how BATS is overcoming them.

Table 8 summarizes information like blockchain platform, type of blockchain and consensus algorithm used for the related works in context to medical robots.

4.6.4. Summary
There have been an exponential increase in demand for the robotic automation in Healthcare and medical fields within past decades. Tele-surgery, medicine delivery, patient assistance, and many more applications have began exploiting robotics technology. As these robots have to operate in close proximity to humans (e.g., doctors and patients), feature implementation such as (a) process security, (b) precision, (c) data privacy (d) immutable fault-logs and (e) byzantine robot-tolerance have to be of high priority. There exists high probability of human interactions and interference (in a way) in medical environments, so any misjudgment by robot controller or malicious data fed to robot can be hazardous to human life. Blockchain provides a vital framework for these robots to optimize the above features and attain a secure data transmission among the robot entities and the (hospital) servers. Network and process latency induced by blockchain system and smart contracts, creates issue which need to be handled by developers. Hyperledger and Ethereum are common platforms being used in blockchain implementation.

4.7. Service robots
4.7.1. Introduction
Service robots are a category of robots which are used in office environments, household assistance, public services, maintenance at factory sites and in many more social areas. As noted by the authors of the paper (Park and Del Pobil, 2012), the definition of a social robot goes as “a robot which operates semi or fully autonomously to perform services useful to the well-being of humans and equipment, excluding manufacturing operations”.

The authors of Letheren et al. (2020) had noted that the initial service robots were around since 1930s, but it was only in 2009 that the robotics community had started publishing journals in this specific area. It is expected that by 2022, service robots’ market value shall reach 12 billion U.S. dollars from 5.6 billion U.S. dollars of 2018. Being a young field (comparatively), the field offers much research scope, both with respect to core-robots as well as blockchain technology being used in service robots.

4.7.2. Use of blockchain
An important aspect of blockchain in the regard of service robot is to keep off malicious humans from hacking/manipulating these robots into doing malicious tasks. The immutable ledger acts as a secure authentication platform on which commands to these robots can be validated before the robot acts on it. The rules and control systems are provided by smart contracts hosted on the blockchain.

4.7.3. Related work
Leiding et al. (2016) introduced the blockchain based approaches in the domains of Vehicular Ad hoc Networks (VANETs) in order to improve transparency and decentralization and proposed a novel concept of blockchain powered decentralized and self managed VANETs. Used Ethereum blockchain platform as the baseline blockchain platform for the proposal.

Fukawa (2020) reviewed the challenges of Robotic Service Assistants (RSAs) and proposed potentials of application of blockchain technology in governing a robotic service organization. They addressed how a service provider transform RSAs into valuable, rare, and imperfectly imitable resource as well as how a service provider protects the RSA from external cyber threats. They proposed the concept of Robotic service organizations and studied how blockchain technology lowers transaction costs in a robotic service organization.

Table 8 highlights various information like blockchain platform, type of blockchain and consensus algorithm used for the related works pertaining to service robots.

4.7.4. Summary
Robots deployed in service domains such as offices, households, and public areas are classified into service robots including interactive assistive and companion robots, which need to have features of social and emotional cognition (discussed in Section 2). Service robots face issues such as physical manipulation of software, malicious functional changes made through hacking into the system and code injection attacks. Authors have proposed ways to tackle cyber threats and a decentralized blockchain architecture to optimize the sociability of robots in terms of securing its data. Typically, blockchain serves as a precautious step to avoid malicious use of service robots, but more research need to be made to address the situation where a robot has already been compromised.

4.8. General robotics

Table 9. Summary of related works — Blockchainized general robots.

Reference	Key Contribution	Type of Blockchain	Blockchain Platform	Consensus	Remarks
(Ferrer et al., 2018)	Proposed RoboChain to handle security issues during data and model sharing among robots in HRI.	–	–	–	Planned to enable efficient and real-time learning of Interaction Models and to extend the framework to handle multiple private networks at-once.
Cardenas and Kim (2018)	Proposed blockchain-based design model of robot in financial sector to assist humans come to financial agreement using cryptocurrency and smart-contract.	Public	Ethereum	PoW	Paper’s future work included creating more complex smart contracts that can exploit IoT components, upgrading roBU’s arms’ functionality, and developing more robust software and hardware.
Danilov et al. (2018)	Presented a validation methodology for a decentralized trading market for the autonomous agents, implemented in a Duckietown application moving an autonomous mobile robot to achieve a mission goal	–	–	–	Technique was introduced to suspend payments to malfunctioned service providers.
Kapitonov et al. (2019)	Authors illustrated methods to use blockchain-based techniques to be used for robotic serves in smart cities. Ethereum and ROS were used as a mechanism of interaction	Public	Ethereum	PoW	Effectiveness and practicality of each of the three techniques were studied.
Lopes et al. (2019)	Proposed a blockchain-based vision and human sensing system for controlling robot velocities according to the engagement level of humans in the robot’s work-area.	Private	Tezos	DPoS	Cloud services are suggested to be integrated in future works.
4.8.1. Introduction
Here we have accumulated generic use-cases of the blockchain in robotics domain. This category deals with the research and works done in the domains other than the specific categories that we already categorized in this paper. The general robots can be the robots deployed in public, research or even in closed environments where HRIs can be seen; or the work spaces in general, operating anywhere in the real-world (Lopes et al., 2019).

4.8.2. Use of blockchain
Blockchain in such areas provide a framework and/or platform to host a secure facility and decentralization to the autonomous robotic entities.

4.8.3. Related work
This subsection surveys the related work carried out various authors in context to general robotics. Furthermore, Table 9 highlights various information like blockchain platform, type of blockchain and consensus algorithm used for general robotics.

Ferrer et al. (2018) proposed the RoboChain – the learning decentralized framework – to curb security related issues with personal data handling scenarios during HRI; and make data and model sharing among multiple robots computationally efficient. The authors also illuminated the issues relating to HRI, in healthcare interventions as an example. They addressed three aspects of the HRI interactions to achieve an effective and efficient way of, (i) HRI based on patients’ data from clinical interventions without breaching the data privacy; (ii) training and continuously improving ML models using the previously collected data; (iii) updating and sharing the learned ML models among connected units in a scattered network of robots. They proposed to enable efficient and real-time learning of IMs/DLMs and to extend the framework to handle multiple private networks at-once in their future works.

Cardenas and Kim (2018) illustrated the design and interaction model of a robot to employ it in financial transactions to facilitate agreements with humans, and presented a use-case of a robot – roBU – whose goal is to travel the world; by taking assistance from humans in return of bilateral financial agreement, using 5-phase agreement processes, cryptocurrencies and smart contract technologies. An interaction schematic and key technical requirements are also described for the use-case. Making more complex smart contracts that can exploit IoT components and the development of more sophisticated oracles along with upgrading roBU’s arms’ functionality and more robust software and hardware were noted as their future developmental tasks.

Danilov et al. (2018) presented the validation methodology for a liability execution for an agent based service provider in a decentralized trading market. The proposed method is implemented in a Duckietown application moving an autonomous mobile robot to achieve a mission goal. The work considered one concept of a model of the decentralized trading market for the autonomous agents For special agent-based systems the new approach based on Model Checking formal software verification technique was introduced to address validation problem of a liability execution that can help to suspend payments to malfunctioned service providers and can be integrated together with a reputation model into a blockchain consensus protocol.

Kapitonov et al. (2019) illustrated different approaches to organize the robotic services in smart cities with the help of encrypted decentralized technologies and market mechanisms. They had provided three scenarios of robotics services out of which smart cities based on robot economy was presented in the paper. Three concepts of smart cities as its elements are described, i.e., (a) Unmanned Transport Systems, (b) Ecological Monitoring of the Environment, (c) Supply Chain Management and (d) Production as a Service. To make the proposed methods effective and practical, Ethereum and ROS were used as a mechanism of interaction. They experimented with a lab setup to demonstrate the potential smart factories, which concluded that the Ethereum network can indeed provide effective way to manage robotic services.

Lopes et al. (2019) proposed a blockchain-based system for controlling robot velocities and stopping it when a human enters robot’s work-area without permission, using Oracles, to process information, delegated PoS consensus algorithm and smart-contracts. The proposed method identifies the person’s face as known or unknown entering the robot work space and controls the speed of the robot accordingly; as well as saving the identity of the person in a blockchain using smart-contracts to handle the information. Kinect sensor is used to detect the people with 3D imaging and verifying if they are in critical zone or warning zone.

4.8.4. Summary
General robot classification consists of all the robotic applications which are otherwise deemed to be generic in nature. These include use-cases such as robot velocity control, personal data handling during HRI, decentralized smart city services, and so on, which are implemented using blockchain framework curbing varied robotics challenges such as (a) data security, (b) trust-less environment in financial and trading sector and (c) human sensing in robots. Mostly Ethereum and Tezos are used in this category of work, along with PoW mechanism.

5. Technical challenges for use of blockchain in robotics
In this section, we bring to limelight some of the interesting high-level challenges that are envisaged when we think of leveraging blockchain in the realm of robotics. The exact picture will emerge with time, given the fact that the current use of blockchain technology in robotics is still in its infancy. Fig. 10 delineates the challenges identified for the adaption of blockchain in robotics, which are performance, security, privacy, scalability, trust, deployment strategies, network selection, standards and regulations. In order to ensure a good fit of the blockchain in heterogeneous robotic environment, more concentrated efforts are needed to address these challenges and also to evaluate various characteristics in this scenario.

5.1. Performance
5.1.1. Size
There are various use cases of industrial and service robots where multiple robots work in a distributed architecture to perform a task and achieve a common goal. The distributed architecture makes the system robust to failure and flexible in its size as the scale of the task changes. However, this flexibility poses some challenges in terms of coordination and communication.

Challenges in context of Robotics: In robotics, it is crucial to decide the optimum number of robots (size) to perform the task. Otherwise, it may increase the cost of the system, increase the complexity of the coordination and communication mechanisms to be implemented, and degrade the performance because of action overlapping between different robots (Ben-Ari and Mondada, 2017).

Challenges in context of Blockchain Integration: In distributed robotics architecture, size, in terms of the number of robots, plays a vital role in distributed decision-making. On the one hand, larger size implies better sensing and sharing capabilities, leading to much better visibility and understanding of the robotic environment. In blockchain integration to such robotics use cases, the issue is that the task of decision making becomes increasingly difficult since it has to be done cooperatively (i.e., a consensus is required). On the other hand, if the size is too small, then the presence of even fewer bad actors becomes significant, raising the security issues for the use of blockchain. Thus, while using blockchain for robotics in a distributed architecture, an open-ended question is: What should be the optimum size for both better performance as well as strong security?

5.1.2. Latency and throughput
Different amounts and types of delays in robotics affect task performances. Ensuring maximum throughput within a defined latency range in robotics is very challenging. Blockchain integration in robotics adds a new set of challenges.

Challenges in context of Robotics: Dealing with mechanical, computational, and network delays and maximizing the throughput in robotics are very challenging. The latency due to these delays may affect the overall performance, especially during multiple activities that require specific tasks to be performed in real-time. The robotics operations is designed to be real-time, which means that any command issued needs to be executed within a defined period of time. However, sometimes it is allowable to exceed their deadline within a specified range or threshold. Missing these thresholds for hard and soft deadlines may result in unwanted results and behavior.

Challenges in context of Blockchain Integration: The latency of operation refers to the time one has to wait until a request gets processed in an appropriated way (Liu et al., 2018). In general, robotic operations involve sensing, processing and storing large amount of data. With the use of blockchain this data gets stored as immutable records in form of blocks which are logically chained together. Since, each of these blocks becomes a permanent member (immutable) only after the consensus is reached thus creation of new block introduces some latency or delay. For delay-sensitive mission critical robotic tasks latency in terms of communication, processing, and consensus can be the biggest hurdle. Hence, the questions to be answered are: Which robotic applications are well suited for the use of blockchain with its current state-of-art? and Can block formation and consensus happen in real-time without compromising security?

Throughput denotes the number of successful transactions per second. Most of the robotics applications require better performance in terms of high throughput and low latency. Identifying the bottlenecks can help to improve the permanence. Various factors can be considered for this, such as the scope of the blockchain, consensus mechanism, resource limitations, size, design of the data and network, faulty devices, and energy, as it is shown in Fig. 11. So, the challenging question is: How to enhance the throughput, in other words, how to increase the speed of successful transactions per unit time?

5.1.3. Energy consumption
Most present-day robots, especially drones, UAVs, and swarm robots, are highly energy-inefficient. Minimizing the energy consumption and maximizing the battery life of such robots are very challenging. Blockchain integration to various applications based on these robots can make it more challenging.

Challenges in context of Robotics: Different types of robots that operate wirelessly and in unstructured environments consume energy for processing, communication, vibrations, light, and mechanical movement. As a result of which the mounted batteries in robots deplete very quickly. Minimization of energy consumption in various operations is essential to power those robots for a longer duration.

Challenges in context of Blockchain Integration: In various use cases of robotics, use of battery-powered robots is common. Although, committing a transaction in blockchain is easy, data verification and validation are energy-intensive processes and consume high energy (Andoni et al., 2019). Consensus mechanism such as PoW is secure, however, it is energy-intensive. Moreover, in the case of industrial robots, more transactions will lead to frequent verification and validations that will certainly incur high energy consumption. The challenge is: How to minimize energy consumption, in general and in particular for energy-inefficient robotics?

5.2. Security
Robotics are witnessing tremendous expansion in recent times and especially with the rise of COVID-19. Robotics-based solutions with their integration to IoT are widely being adopted in healthcare and many other sectors like modern societies, industry, agriculture, military, and transportation. However, like other technologies, they are not secure and pose a lot of security risks and vulnerabilities.

Challenges in context of Robotics: Robots may suffer from similar cybersecurity problems that computers have faced for decades. Both, industrial and service robots are vulnerable to cyberattacks and hacks and can be exploited if security is weak. Robots connected to the network using IP addresses are prone to hacking and can wreak havoc, if compromised. Robotic systems are susceptible to several vulnerabilities that might affect their connectivity, productivity, operations, and reliability (Yaacoub et al., 2021). Some of these vulnerabilities related to network, platform, applications, management, and update are found to be very challenging (Laitinen et al., 2019).

Challenges in context of Blockchain Integration: The blockchain aims to resolve the security issue in robotics, however, it has its own security glitches (Sengupta et al., 2020). Hence, the security of blockchain system is an essential aspect of their acceptability in robotics. Security breaches are likely because the blockchain technology has not yet been widely explored in robotics sphere. Various blockchain platforms such as Ethereum have been the target of cyberattacks in the past. Fig. 12 illustrates the taxonomy of blockchain attacks provided by the authors in Saad et al. (2019). The authors classified attacks into three broad categories: (i) Attacks associated with blockchain structure (mathematical models used to create ledgers) (Decker and Wattenhofer, 2013, Eyal, 2015); (ii) Attacks related to the blockchain P2P system (Vyas and Lunagaria, 2014, Bastiaan, 2015, Eyal et al., 2016, Apostolaki et al., 2017, Marcus et al., 2018, Leelavimolsilp et al., 2018, Saad et al., 2018); (iii) Attacks associated with the blockchain applications (Fleder et al., 2015, Rubasinghe and De Zoysa, 2017, Bamert et al., 2014, Grincalaitis, 2019).

The integration of public Blockchains in robotics can make it open-access; however, at the cost of different attacks listed above. The attack surface in those three categories is as follows (Saad et al., 2019). Various attacks at the structure can affect the entire robotics operations based on blockchain. Attacks at blockchain P2P systems can affect miners taking part in robotics operations, mining pools, applications, and users. Similarly, various attacks at blockchain-based applications in robotics can affect the robotics operations, applications, users, mining, and overall management.

Resilience to the mentioned attacks is of great importance, especially for the use of blockchain in mission-critical robotic applications. With the advent of quantum computing, it has become more challenging to secure the blockchain not only against the attacks mentioned but also against the attack vectors generated from the resources of quantum computing. The adversaries will be more powerful to launch key cracking and 51% attack (Alladi et al., 2020). Thus with evolving technologies another challenging question is how to early detect anomalies and attacks? and What kind of automated and intelligent resiliency mechanism can be design to tackle those attacks?

5.3. Privacy
Lack of privacy in robotics can result in the exposure of various activities and critical transactions of various applications. It can affect the entire system’s reputation. Ensuring privacy in robotics is very challenging.

Challenges in context of Robotics: Recently, we have witnessed a surge in the use of domestic robots in our home, such as Google Assistant and Amazon Alexa-based devices. They are designed not only to recognize our voice and perform certain tasks, but with the use of advance machine techniques they are able to learn even our behavior. Another example of this type is UAVs, which can be deployed to monitor the property of others against their will and knowledge. Thus, they will enter into our personal space where we live and work, and will be able to perceive our presence, recognize what we say and do, record our voice and video, and will physically interact with us. Soon there will be robotic devices everywhere, which will create severe privacy concerns, unlike privacy concerns in other domains. Such robotics-based deployments by an organization, government, or any person can also be misused to monitor and track our actions and behavior. Thus, it can cause privacy concerns for many people, and disrupt their activities (Miller, 0000).

Challenges in context of Blockchain integration: Privacy concerns are gradually arising and may arise at unprecedented rate in near future, when humans coexist with robots. Blockchain is one such emerging technology when integrated with robotics can help to preserve privacy and minimize the risks. There are various factors of the blockchain, which need to be explored to ensure privacy in robotics. Some of the interesting questions in this dimension are: Which type of blockchain; public, private or hybrid?, Which mode of registration; PKI-based centralized registration and management or purely decentralized?, When to use which type of issuing; single certificate (and cryptography material) issuer or multiple and parallel issuer?, Maintaining transparency up to what extent and how?. However, the anonymity of users’ Identity and unlinkability of transactions are two important factors that must be taken into consideration to ensure the privacy in blockchain-based deployments (Zhang et al., 2019). Mixing services are one of the ways to provide transaction obfuscation and minimize linkability (Feng et al., 2019).

5.4. Scalability
Various robotics-based applications require the system to be scalable. However, ensuring scalability is very challenging because of communication and coordination complexity across multiple robots (a huge number of robots), leading to poor performance.

Challenges in context of Robotics: Scalability is an important and challenging issue of multi-robot systems, especially in planning, coordinating, and controlling the operation. Various studies assert that multi robotics systems such as swarm robotics are scalable as well as robust (Bjerknes and Winfield, 2013). It can scale to massive numbers, and in the homogeneous setup, it can maintain robustness against failures and faults to a great extent. However, the same might not always be true. As the system grows, more robots get added to the system, leading to complex computation, coordination, and communication scenarios and affecting the system performance.

Challenges in context of Blockchain integration: There are promising techniques such as sharding that can bring parallelism and maximize scalability when blockchain integration is done; nevertheless, it comes at the cost of decentralization and reduced security. So, the challenge is: How to design a blockchain-based robotic system that can scale-up without compromising with other requirements?

5.5. Trust management
In recent times, robots are increasingly being deployed in all sectors, starting from home to society. This requires trust to be established between humans and robots. For example, how do we ensure that fully autonomous cars and healthcare robots will not harm the users. Trust management in robotics is very crucial for its wide adaptation.

Challenges in context of Robotics: Without appropriate trust models, robots are vulnerable to misuse by hacks and attacks. Trust is considered a critical enabler that allows the use of robotics in sectors like industry, businesses, healthcare, military, and social environment. Trust management in robotics is a longstanding issue, and now it needs to be addressed through advanced techniques such as AI and Blockchain.

Challenges in context of Blockchain integration: In various multi-robots based system, the presence of faulty, compromised, and malicious robots or Byzantine robots can lead to disastrous outcomes by disrupting coordination mechanisms (Strobel et al., 2018). Their presence can make it impossible to achieve consensus in blockchain when using classical consensus mechanisms (Strobel and Dorigo, 2018). Though, various new blockchain techniques can be utilized to manage reputation and trust in such system; however, blockchain adaptation for this purpose has not been adequately explored (Lopes and Alexandre, 2019). The challenge is: How to devise an intelligent blockchain-based decentralized trust management system to record malicious and malfunction behavior and to detect and revoke byzantine robots. Thus, dedicated efforts are required to augment state-of-art blockchain with machine learning and analytical techniques.

5.6. Deployment strategies
In the case of a multi-robots system, there are three main approaches in system deployment, centralized, distributed and hybrid. These strategies have their advantages and challenges.

Challenges in context of Robotics: The key advantage of a centralized robotic system is that it is easy to implement. Some of the major challenges related to this strategy are scalability, security, single point of failure, privacy, and trust. It is not easy to expand as more robots increase the processing load to the central node. In such deployments, resources are not utilized in a balanced manner. If central nodes get compromised or stop working, then the entire system fails. Making these deployments suitable for critical environments is very challenging as they are not robust to failures. Unlike the centralized approach, the distributed approach is robust to failures. For example, if few robots fail, the remaining can coordinate and continue their task. This distributed strategy is flexible and scalable. It is considered to be relatively secure and trusted. However, the benefits come at the cost of challenges. Major challenges of distributed deployment strategy are related to designing and implementing efficient communication and coordination mechanisms among the robots. The hybrid deployment strategy inherits the challenges of both systems.

Challenges in context of Blockchain integration: Different use cases of industrial and service robotics have different requirements in terms of performance, security, confidentiality, scalability, and trust. Accordingly, the blockchain deployment strategies for different use cases will also be different. Blockchain techniques used in one scenario may not be optimum for other scenarios. For example, if applications can tolerate some delay but need to be highly secure, then PoW is suitable. However, if it is a delay-sensitive application, then consensus mechanism like PoA, and PoS might be more apt. Likewise, if we want to make robotics data available to multiple service providers in a secure way, then we need to integrate mechanisms like attribute-based encryption or attribute-based access control. However, restricted access does not need such techniques. Similarly, other factors will also play major roles such as parallelism, ownership, and management. Thus these heterogeneous characteristics make the road of blockchain adoption (from academia to real-world) daunting for various future robotics applications as shown in Fig. 13.

5.7. Standards and regulations
As robots are becoming increasingly prevalent in our social and professional lives, there is a need for well-defined standards and regulations to govern the entire robotics operations due to the existing challenges related to frameworks and the legal and ethical concerns raised on them (Leenes et al., 2017).

Challenges in context of Robotics: There are various emerging robotics use cases, such as robots in the home for households task, fully autonomous vehicles, robots in healthcare, industrial robots, and nanobots, which now require regulators’ attention. The heterogeneous environment of various robotics use cases is another big challenge in the standardization process. Due to diverse robotics use cases, universal or common robotics regulations and standards are not possible. Instead, general and use case-specific solutions will likely be more helpful to facilitate both technological development and protect our values. Some of the major challenges in the process are ensuring acceptability, safety, security, and privacy.

Challenges in context of Blockchain integration: With the proliferated penetration of robotics and automation systems, blockchain will have plenty of opportunities to disrupt the traditional activities of many industrial and service robotics applications. The ultimate challenge, however, is finding a suitable, acceptable, and inter-operable blockchain entry-point into the robotics. At present, there is no such specification and standard available for the integration of blockchain into robotics. Its applicability in robotics requires appropriate guidelines, norms, laws, and regulations. In the next few years, we may see standard specifications of blockchain technology integration for robotics from Standard Developing Organizations (SDOs) such as IEEE and ITU as the landscape is evolving rapidly. However, concentrated research needs to be carried out (to address critical challenges) so that appropriate technical standards, regulations, policies, and laws can be formulated for the efficient and secure deployment of blockchain in robotics.

6. Future research directions
The section aims to suggest directions in which research endeavors need to be aligned to harness the full benefit of blockchain technology in the realm of robotics. Fig. 14 depicts the six key research directions identified for future research. Table 10 summarizes how these six key research directions are mapped to the different class of blockchainized robotic systems.

6.1. An amalgamation of AI and blockchain for swarm robotics
The use of blockchain and AI in robotics is a relatively new concept. Still, we do not have a clear understanding of how to utilize their powerful capabilities to improve robotics system. However, these two technologies have great potentials and can offer new possibilities for secured and automated robotics. These two technologies can complement each other and help to boost robotics capabilities. AI-driven robots are in the plentiful form available to us. For example, driver-less cars, robots on assembly lines, robots in restaurants and homes, and robots in classrooms. We have already discussed the works, which leverages the blockchain technology in robotics. However, in almost all existing academical and industrial proposals an amalgamation of AI and Blockchain found missing for robotics. Some of the key research opportunities under this head are as follows.

Use of powerful deep learning models on data stored on a distributed ledger for analysis for various states of robots, monitoring, and controlling activities (Lopes, 2019). Role of AI in addressing challenges related to blockchain integration in robotics such as saving energy, improving efficiency, detecting Byzantine robots, finding anomalies, managing the trust, and improving the scalability. Use of smart contract logic to invoke AI models for better decision making in collaborative tasks. Blockchain to enhance security and data privacy of fully autonomous AI-powered robots.


Download : Download high-res image (527KB)
Download : Download full-size image
Fig. 14. Directions for future research.

6.2. Blockchain for the Internet of Robotics Things (IoRT)
In the emerging scenarios of IoT (Al-Fuqaha et al., 2015), robots also play a crucial role and can now be considered as a closely related field. IoRT is a newly defined concept that aims to describe how to integrate robots into IoT scenarios (Ray, 2016). The IoRT has been proposed to overcome the limitations of Networked robotics (tele-operated and multi-robot) (IEEE RAS Technical Committee and others, 2012) and Cloud robotics (Kehoe et al., 2015). The key limitations of networked robotics are their physical constraints due to limited computation, storage, power, and communication capabilities. The varying Quality-of-Service (QoS) requirements and intelligence integration are some of the major challenges. Cloud Robotics was proposed to use Cloud Computing infrastructure to overcome these limitations so that robotics can be facilitated with data analytics, human computation, and intelligent learning and decision making. However, cloud robotics inherits various challenges of a centralized system and suffers from issues such as interoperability, scalability, heterogeneity, resiliency, latency, security, QoS, privacy and trust issues. The IoRT is considered an advanced version of Cloud Robotics, an amalgamation of IoT and Cloud Robotics (Ray, 2016). Since the IoRT also relies on a centralized system, many of the questions related to security privacy, scalability, trust, interoperability, and scalability remain unanswered. The Blockchain and edge computing integration can be potential solution to these challenges, which is yet to be explored.

6.3. Blockchain driven robots under new network paradigm
At present, most of the existing deployments use the traditional network architecture and classical TCP/IP protocol suite. However, scenarios are changing with high demands of diverse robotics deployments such as UAVs, UGVs, and other highly mobile robotics applications. Moreover, the data sensed are of multi-modal nature and big-data type, which need better communication and control at the front as well as back-haul. Dealing with the big data, highly mobile robots, diversity across manufacturers’ specifications, managing, controlling, and re-configuring robots individually have now become challenging with the traditional approach. Thus, researchers have now started exploring the role of 5G (Voigtländer et al., 2017), edge, fog (Dey and Mukherjee, 2016), and also other emerging networking technologies in robotics, such as Named Data Networking (NDN) (Dauphin et al., 2017) and Software-Defined Networking (SDN) (Al-Bayaty, 2017). As discussed earlier, the centralized network architecture such as cloud computing may not be suitable for different robotics operations. Thus, there is a need for a distributed network architecture in the form of edge computing to fulfill key requirements of a distributed robotics system (Queralta et al., 2020). Edge computing can help increase the degree of intelligence, minimize the latency, meet the QoS requirements, and enhance the level of autonomy. Blockchain-driven robotics can be benefited from the required amount of storage, computation, and intelligence at the edge to enable secure, transparent, and reliable operation.

With the change of underlying network architecture and protocols in robotics, the blockchain adoption will become more challenging. For example, with the integration of MEC and cloud computing numerous interesting questions will rise: How and where smart contracts are to be kept? Where data is to be stored? Where mining is to be carried out? How offloading is going to take place? and How access grants are exercised? Similarly, with the underpinning of SDN, we have to work on several issues such as Where to introduce the blockchain layer, at the data plane, control plane, application plane, or somewhere in between these planes?. In case of NDN, a new set of challenges may arise in terms of interest forwarding, caching and store with the blockchain setup. Therefore, there is a great research scope in the migration of blockchain-driven robotics operations from traditional to new network architectures.


Table 10. Mapping of six future research directions with blockchainized robotics.



6.4. Dedicated protocol stacks with blockchain layer for robotics operations
There is a need for the development of dedicated protocol stacks for industrial as well as service robots. Various operations in these categories can be made simpler, flexible, scalable, inter-operable, and robust when we have dedicated and well defined layered protocol stacks. In addition to the hardware, data, network, transport, and application layer, we need to have a blockchain layer that can facilitate transaction operations, mining, consensus, and smart contract execution. This new layer can add security, privacy, trust, and consistency features to the protocol stack. There are enormous research opportunities in the design, implementation and improvement of rules, services and protocols for standard architecture in various categories of robotics. For instance, the dedicated protocol stack developed for the autonomous vehicles, and platooning operations (Singh et al., 2019) can be integrated with the blockchain (Singh et al., 2020b) and AI layers to improve the security and decision making processes. For each of those categories shown in Fig. 3, we need to have well-defined standard protocol stacks, regulations, and policies for broader acceptance of robotics operation. For example, medical robots need to have a standard operating procedure and well-defined rules and regulations. The entire process needs to work as per the standard protocol suite. However, standardization is in the early research phase, which makes it open for the research community to design and develop a common standardized framework and architecture for such applications.

6.5. Towards a lightweight blockchain for resource constraints robots
Blockchain has great potential in ensuring security, scalability, and trust in swarm robotics. However, it demands huge computation power, storage capacity, and an ample amount of energy. The on-board computing, storage, and battery power inside resource-constrained robots such as UAVs and IoRT are usually limited, which may not support computational intensive PoW, Merkle Hash Tree, and PKI computations. The blockchain to be implemented must have a lightweight design by considering these limitations of the resource-constrained robotics system. This is an open research area and has not been widely explored. Thus, there is a need of a lightweight blockchain solution that is resource-efficient and suitable for resource-constrained robotics scenarios. A better consensus mechanism with a lightweight data structure needs to be developed. The transaction redundancy and block replications across ledgers need to be adequately addressed. The performance in terms of latency, energy, storage, and computations needs to be demonstrated through extensive experiments. The security analysis is a must after migrating to lightweight blockchain solutions.

6.6. Development of simulation and emulation tools
Design and development of open-source platforms such as simulators and emulators that can facilitate blockchain experimentation in robotics scenarios would help the research community test, verify, and improve their proposals. The unavailability of such platforms is one of the biggest impediments in driving the research in this domain. Therefore, such platforms need to be developed that are easy to use and extend for the experiments of blockchain-based robotics scenarios and applications.

7. Conclusion
The landscape of robotics is continuously evolving and has penetrated various sectors and domains. Nevertheless, this rise has lead to various technical challenges like security, privacy, trusted automation, ethical issues and resource constraint challenges. Thus, the paper explored the key features and requirements of the world of robotics. One the other hand, the paper also reviewed the blockchain technology, types of blockchain and consensus algorithms, smart contracts, and key metrics that are used to measure performance of blockchainized systems. This survey covered the range of benefits that blockchain can bring in the realm of robotics. Further, various technical challenges that need to be handled to maximize the benefits are highlighted. Finally, the research directions are presented that can pave the way for future research on integration of blockchain for robotics.