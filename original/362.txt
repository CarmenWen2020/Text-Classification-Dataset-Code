As the number of blockchain (BC) platforms providing specific features increases, selecting a platform that fits all requirements needed for a specific case becomes a cumbersome task. For example, not only are BCs' technical details relevant, but also their intrinsic characteristics (e.g., cryptocurrency price) must be considered in selecting a BC for a given case. Hence, the management of data stored in multiple BCs and the selection process are not straightforward due to the myriad platforms and both technical and economic details (e.g., BC throughput and the underlying price fluctuation). This article defines a novel refinement flow (based on the policy continuum) of high-level BC selection policies to low-level BC transactions. Experiments with the BC selection framework developed applying policy-based management (PBM) in the BC context do show that such synergy simplifies data management in multiple BCs driven by user requirements (e.g., based on costs or performance policies). The performance analysis of the framework demonstrates the successful employment of PBM for BC selections with minimal overhead.

Introduction
As the number of blockchain platforms providing specific features increases, selecting a platform that fits all requirements needed for a specific case becomes a cumbersome task. For example, not only are BCs' technical details relevant, but also their intrinsic characteristics must be considered in selecting a BC for a given case. Hence, the management of data stored in multiple BCs and the selection process are not straightforward due to the myriad platforms and both technical and economic details.
Several blockchain (BC) platforms have been developed to address particular use cases (e.g., supply chains and the Internet of Things, IoT) since the release of Bitcoin in 2009. As of May 2021, there are more than 9000 cryptocurrencies, BC platforms, and BC-based tokens listed on websites determining market capitalizations [1]. With each new BC platform, novel algorithms and mechanisms are introduced, leading to myriad technical differences and details between BCs. As a result, the overall complexity of deciding which BC is suitable for particular use cases is not straightforward, which further ossifies the interaction of decentralized applications with the BC selected, since they are typically tailored to a specific BC, and BC interoperability is still under investigation.

Computer networks faced similar challenges regarding handling the management of different device configurations and the interoperability between them. These aspects were successfully addressed with the employment of policy-based management (PBM) applied to the management of physical networking devices [2], and to manage network functions (virtualized or not) decoupled from data plane devices and concentrated in a central point as software-defined networking (SDN) [3] and network function virtualization (NFV) [4]. Therefore, the use of rules (i.e., policies) on user requirements outlines a viable approach to managing interactions with different BC platforms while reducing manual efforts from system administrators on selecting a BC for a given case.

Furthermore, with the increasing development of BC- and distributed ledger technology (DLT)-enabled applications, organizations must be aware that cryptocurrency prices directly impact their operating expenses (OPEX). As typically there is no physical asset supporting cryptocurrencies, their prices tend to be volatile and highly prone to market speculation and emotions; thus, one BC might become prohibitive instantly. For example, the price of one Bitcoin fluctuated in May 2021 between US31,700andUS58,900 [1]. Therefore, BC-enabled applications should ideally comprise cost-aware mechanisms allowing service providers to comply with cost-related user requirements and service level agreements (SLAs) without increasing OPEX and losing the immutability provided by BCs.

As proved by [5], the employment of PBM to manage BC selection is not only feasible but also practical. Thus, this article extends [5] by:

Detailing a standard for the refinement of SLAs and intents to actions in BC nodes (e.g., broadcast of a BC transaction) based on the traditional policy continuum

Describing and comparing in detail the state of the art in BC selection

Performing an in-depth execution time analysis of its entire process, confirming that it presents a more efficient selection process compared to related work.

Further extending [5], this article:

Discusses the abstraction of technical details from BC selection policies

Presents directions on the employment of machine learning (ML) in the selection process

Details key points on the interoperability of BC solutions given the growing number of BC platforms and DLs

Although common to many areas, such challenges are novel to the BC area. Thus, they are detailed with BC-specific aspects guiding further research.

The remainder of this article is structured as follows. First, background details on BCs are provided. Then the state of the art on BC selection and Policy Continuum in the BC context proposed is discussed. Next, the framework and key components for which the performance analysis was performed are detailed, and selected research challenges under investigation are provided. Finally, concluding remarks and research directions are provided.

Blockchain Overview
A BC is a distributed, append-only, and immutable ledger relying on cryptographically signed transactions arranged in blocks. These characteristics combined remove the need for a trusted third party (TTP) to verify new transactions within a distributed environment of potentially unknown stakeholders. Six key characteristics include the following ones.

Consensus Mechanism
BC consensus mechanisms are designed to ensure a single view concerning the network state across all nodes. Thus, they are strictly related to the chain security against double-spending attacks by verifying transactions and maintaining the correct state in each peer. Besides a detailed view as in [6], major consensus mechanisms are described below:

Proof of work (PoW) requires competition between nodes to calculate the hash value of the next block to be appended in the BC. When a node finds a hash below a pre-calculated threshold, it broadcast the hash to all the nodes for verification and further inclusion in the BC.

Proof of stake (PoS) selects block validators depending on their cryptocurrency stake. The concept behind PoS is that nodes with higher stakes contribute toward securing the BC.

Delegated PoS (dPoS) employs a selection process based on a defined set of validators (often selected by votes), which take turns to verify and create new blocks.

Architecture and Deployment
The architecture of BC platforms and their deployment type can be classified into different categories depending on write and read permissions. Public and private categories relate to data visibility, and permissionless and permissioned categories relate to data writability [7]. The following categorization is the combination of these categories:

Public permissionless BCs are open to any interested peer to read the BC or write in the BC.

Public permissioned BCs allow any peer to read or hold a copy of the BC, but writing is limited to select peers.

Private permissionless BCs implement a closed network with reading and writing restricted to selected peers.

Private permissioned BCs operate as distributed databases with controlled reading and writing permissions.

Performance
An important parameter to measure BC performance is its throughput in terms of transactions per second. The measurement of transactions per second, however, relies on different aspects tackled from different angles by existing BC platforms.

BaaS offers customized solutions to meet the requirements of use-cases, where the number of nodes, daily transactions/and storage can be charged similarly to cloud solutions. Thus, it is hard to estimate costs for transactions without analyzing the use-case. Furthermore, they reintroduce TTPs, which raises trust and centralization concerns.
BC throughput is calculated by dividing the block size (i.e., maximum size of one block in the BC) by the transaction size (i.e., size of a standard transaction containing the exchange of funds between peers), which results in the maximum number of transactions that can be appended in a block. This value is divided by the block time (i.e., interval between blocks) to achieve the maximum theoretical transactions per second of a BC.

Data Size
This refers to the amount of arbitrary data (i.e., not transaction-related) a transaction is able to store. Early BCs (e.g., Bitcoin) were not designed for storing arbitrary data as they were not conceived as a database, but rather as a secure funds exchange system. However, given BC popularization, recent BCs have begun to allow data to be embedded in a dedicated transaction field (e.g., Ethereum), employing the BC as an immutable database.

Transaction Costs
Public BCs rely on incentives (e.g., block reward and transaction fees) for miners to secure the BC, avoiding double-spending by verifying transactions. While block rewards do not affect the cost of a transaction because they generate new coins, transaction fees rely on the BC platform and its consensus mechanisms. For example, Stellar assumes a fixed base fee for each operation performed by the transaction, and in Bitcoin and Ethereum, miners select high-fee transactions to maximize earnings. Thus, transactions with higher fees tend to be included in BCs faster.

In contrast, costs in private BCs or blockchain as a service (BaaS) [8] are bound to the infrastructure (e.g., servers, storage, and maintenance) required to maintain the BC network, depending on the number of stakeholders and the BC platform. BaaS offers customized solutions to meet the requirements of use cases, where the number of nodes, daily transactions, and storage can be charged similarly to cloud solutions. Thus, it is hard to estimate costs for transactions without analyzing the use case. Furthermore, they reintroduce TTPs, which raises trust and centralization concerns.

Turing-Complete Smart Contracts
Smart contracts (SCs) are verifiable, deterministic, immutable, and self-enforcing programs executed in a BC. Although transaction-focused BCs (e.g., Bitcoin) show SC capabilities, they are often constrained (i.e., not Turing-complete). In contrast, recent BCs (e.g., Ethereum) provide Turing-complete SCs able to execute loops and complex functions [9], allowing users to create distributed applications (dApps) from games to decentralized autonomous organizations (DAOs).

State of the Art in Blockchain Selection
Table 1 compares the state of the art in BC selection approaches. References [10], [12] require the user to manually input necessary criteria or to follow a defined flowchart selecting a suitable BC. These non-automated approaches are infeasible considering the high number of BC platforms but easy to grasp by non-technical users. Reference [11] automatically recommends a set of possible BCs to use, but does not automatically select a suitable one and does not react to requirement changes in an automated manner as [5], [13] do. Furthermore, users must have advanced BC knowledge to interact with [11], limiting its applicability.

Table 1. Comparison of related work.

References [5], [13] present similar aspects: an automated selection process and the support for BC interoperability (i.e., agnostic interaction with multiple BCs). However, [13] provides neither a performance analysis of its selection algorithm nor a complexity analysis. The latter reveals that, even though it is possible to implement a weighted metrics-based approach with logarithmic complexity, [13] was implemented with linear complexity to calculate BC scores. Hence, this is inefficient as the number of metrics and BCs grow. In contrast, [5]'s selection process filters unnecessary characteristics, presenting a logarithmic complexity. Furthermore, [5] provides:

A full-fledged framework with an intuitive graphical user interface (GUI)

A flexible interaction application programming interface (API)

A cost-aware policy switching mechanism to allow the user to comply with cost-related SLAs.

Thus, compared to [13] and the state of the art, [5] presents a comprehensive BC selection framework with an efficient selection process being integrated with a BC interoperability API.

Blockchains and the Policy Continuum
The refinement process of BC selection policies follows the policy continuum defined in [2], being specifically applied to the BC context (Fig. 1). This process defines the blockchain intent continuum organized into five views: business, system, network, device, and instance, ranging from the abstract to the technical level. The essential goal of this refinement process is to translate highly abstract requirements (e.g., intents and SLAs) to BC selection policies and into a BC-specific transaction (e.g., signed raw hexadecimal transaction), which is broadcast to the BC network.

Figure 1. - Proposed BC intent continuum refinement.
Figure 1.
Proposed BC intent continuum refinement.

Show All

The topmost element of Fig. 1, the business view, does not contain BC-specific or technology-specific information and is represented by high-level abstract policies (i.e., intents) and SLAs defined by stakeholders. This information can be refined into BC selection policies composing the system view. Such policies contain technical details about the system's execution (i.e., actions to be performed) and parameters guiding BC selection [5]. Policies are refined into specific interoperable API calls (i.e., GET and POST requests), which are not BC-specific but must be executed over HTTP and follow a pre-defined template [14]. Thus, they belong to the network view and are technology-specific. The interoperability API implements adapters to different BC implementations translating agnostic functions into BC-dependent transactions (e.g., signed Bit-coin transactions) [14].

Each BC platform (e.g., Table 2) is seen as a device since they require specific transaction templates and APIs [14]. Furthermore, by contrasting with the network management context, this aspect was identified in the configuration of networking devices from different vendors, which creates an interesting use case for PBM approaches. Therefore, BC-dependent transactions are defined in the device view. Once transactions are created and signed, they are sent to the BC network to be included in the ledger. The broadcast of transactions occurs in a low-level layer, where transactions are translated to raw hexadecimal byte sequences sent over remote procedure calls (RPCs), which are not technology-specific but highly dependent on a specific BC implementation. Thus, as raw hexadecimal transactions contain technical details (e.g., value, arbitrary data, fees, and sender's signature) of a transaction, they cannot be further refined, hence comprising the instance view.

Table 2. Summary of BCs and characteristics; tps: Transactions per second.

The proposed continuum and a policy-based BC selection framework can be applied, for example, in the context of a BC-based cold chain scenario with different stakeholders (e.g., a vaccine producer and a transportation service). For example, two SLAs can be defined as:

“for the producer select the fastest BC until costs reach 20 CHF and the cheapest after”

“for the transport company select the cheapest BC always”

Such SLAs are refined to BC selection policies in [5] being retrieved when the producer sends data regarding how the vaccine left the company and when the transportation sends temperature measurements to the framework. Then it selects the most suitable BC for each policy and creates the API calls to the BC interoperability API (e.g., [14]) containing the BC and data to be stored. In turn, [14] creates and signs the transaction, and calls the BC remote procedure to transmit the transaction to the BC network. Such steps are transparent to stakeholders, who only receive a confirmation that the data was stored, thus enabling such stakeholders to comply with the SLA defined in the first step without requiring complex or manual interactions.

A Policy-Based BC Selection Framework
As provided in [5], the off-chain PBM-based framework, termed PleBeuS, supports the selection of the most appropriate BC to store data based on user requirements. It allows users to represent their requirements in the form of policies used as inputs for filtering and selection algorithms. Subsequent sections revisit such a framework, detailing architectural components and summarizing policy parameters.

Design
The design of a policy-based BC selection framework follows the PBM concept. Thus, [5] is divided into the policy management tool (PMT), the policy decision point (PDP), and a notary-based BC interoperability API [14] acting as the policy enforcement point (PEP). Figure 2 illustrates its design in a detailed architecture, while Fig. 3 depicts its simplified workflow. Further details of such a PBM-based framework design are presented in [5].

API Request Handler: Manages the definition of policies by users and database interaction

Database: Stores users, policies, BC information (Table 2), and transactions enforced by the PEP

Policy Selector: Selects the active policy according to timeframe or cost thresholds

Blockchain Selector: Applies filters (e.g., BC type and BC throughput) and selects, using two possible algorithms, the BC based on the policy profile (e.g., prioritizing costs or performance)

Transaction Generator: Sends data and selected BC to the interoperability API


Figure 2.
Policy-based BC selection framework architecture.

Show All


Figure 3.
Policy-based BC selection framework workflow.

Show All

Table 2 presents the currently supported BCs by the PEP and their key characteristics.

Policy Parameters
Each Bc platform is seen as a device since they require specific transaction templates and APIs. Furthermore/by contrasting with the network management context this aspect was identified in the configuration of networking devices from different vendors, which creates an interesting use case for PBM approaches.
The policy parameters supported by [5] are divided into BC-specific and externally driven. BC-specific parameters (e.g., block time, arbitrary transaction data, private or public BC, and SC support) remain constant during the BC operation, and thus are used as filters. Externally driven parameters (e.g., prices, policy timeframe, and costs) are bound to external factors. Thus, they switch the currently active policy (e.g., if a cost threshold has been reached) and define the employed algorithm to either prioritize costs or BC performance. For further details on these two categories, refer to [5].

Moreover, [5] provides cost-aware selection, which is implemented in the PDP following a BC selection flow (Fig. 3) organized into two steps. The first step consists of filtering the BC set to remove platforms that do not match the BC-specific parameters. This reduces the number of comparisons to be made by the second step, the selection algorithms, which order the filtered set of BCs based on either the least costly (i.e., to prioritize costs) or the fastest (i.e., prioritizing performance in terms of TPS).

Performance Analysis and Discussion
Initial evaluations of the functionality of employing a PBM-based approach to manage data from multiple users in different BCs were presented in [5]. Results indicated viability toward the goals herein outlined. Nevertheless:

A fundamental aspect in the decision process is the performance of the selection solution concerning execution time of the underlying algorithm.

Research addressing open aspects to achieve solutions that are not only able to assist the selection process, but also a suitable BC interoperability mechanism are relevant.

Selection Algorithm Performance
Performance evaluations were performed with [5] running in a virtual machine (VM) configured with 4 vCPUs and 4 GB RAM, the hypervisor being an Intel NUC7 with an Intel® Core™ i7-8650U CPU at 1.90 GHz and 16 GB RAM.

The analysis methodology was based on six policies for a single user, each containing different cost thresholds and requirements, such as preferring Public BCs (policies #1 and #4), Private BCs (policies #2 and #5), or being Indifferent (policies #3 and #6). 1000 interactions were performed, each containing 10 API calls to store temperature measurements in the best-suited BC, in a total of 10,000 BC transactions.

The execution time of each phase of the workflow presented in Fig. 3 was measured and compared to the total execution time so that it was possible to have an overview of the entire workflow execution. Figure 4 depicts results from the conducted evaluation. It can be seen that the execution time of each phase is stable for all policies, with selecting the active policy requiring 70 percent of the total time because, as it evaluates costs thresholds and timeframes, it is the most complex phase. However, the BC selection process, after the BCs are retrieved and filters applied, varies from 0.2 percent of the total execution time for public BCs and private BCs (i.e., around 10 ms) to 0.4 percent for indifferently containing the complete BC set (i.e., around 20 ms). This behavior confirms the complexity analysis of [5] presented earlier, showing a stable and efficient BC selection process and PBM mechanism.

Figure 4. - Policy-based BC selection execution time.
Figure 4.
Policy-based BC selection execution time.

Show All

PleBeus [5] was designed as a modular framework to interact with distributed systems (i.e., BCs). Thus, external factors must be considered due to their influence on the overall solution time in contrast to the execution time of the selection algorithm. Such factors include:

Latency in sending transactions to the framework.

BC transaction data broadcast to miners [14].

While 1 is a relevant parameter to consider if requests to the selection framework come from customers in remote locations (i.e., [5] was not deployed on premises), 2 is concerned with the available bandwidth of the node connected to the BC network to upstream transactions. Furthermore:

Periodical monitoring of cryptocurrency prices (approximately 200 ms/API call) has a fundamental impact, reflecting accurate changes in BCs according to price fluctuations in real time.

The BC network's congestion is relevant since it relies on external BC network factors and the state of its participating nodes (i.e., nodes inadvertently leaving or joining the network).

Technical Challenges
Technical challenges relate to efforts, including:

The abstraction of technical details from policies

The employment of machine learning (ML) to allow more flexibility in the selection

The interaction with multiple BCs

Abstraction of Details
To decide on a suitable BC given a set of restrictions, efforts are required to standardize terms and procedures toward an abstraction of high-level policies into low-level parameters. The lack of standards restricts the use of a PBM-based framework when mapping business requirements to a given context. For example, if an application shows a requirement that transactions should be included as “fast” as possible in a BC (i.e., high transaction rate needed) to cope with the throughput of that application, such a “fast” requirement has to be translated to a quantifiable value (e.g., ≥ 100 TPS). In turn, the same “fast” requirement might be translated to “≥ 50 tps” by a different advanced user. In this context, values translated depend on the knowledge of the user creating policies.

Similarly, intents are used in autonomic networking to reduce the need for technical knowledge by allowing users to input expectations regarding the network behavior as abstract, high-level policies. However, in the context of BC selection, intents can be used to describe high-level requirements that a BC must satisfy to be selected for a given use case [15]. For example, the “fast” requirement can be considered a user's intent requiring its transactions to be submitted as quickly as possible, even if it does not contain information on “which” BC and “how” the data should be stored. Thus, it denotes the expectation of that user which must be refined in a conflict-free manner. Therefore, research on intent refinement techniques and BC characterizations (e.g., via ML techniques) can lead to automatic and adaptable BC selection.

Blockchain Selection
Selecting suitable BCs to meet user requirements is not trivial. Several low-level details impact the selection. Further, as BC platforms are developed at a fast pace without standards, the number of different consensus mechanisms, scalability and security features, and use cases increases. Hence, flexibility is required from BC recommendation and selection algorithms to cope with dynamic scenarios. Moreover, BC parameters are difficult to quantify (e.g., code maturity, stability, and popularity). Therefore, research on suitable ML algorithms is currently being conducted to provide flexible and resilient algorithms to tackle recommendations.

Decision trees can be used to fit required BC parameters (e.g., tps, block time, and supported data size) to determine which BC is the most suitable with these parameters. Furthermore, given a dataset disclosing choices of which BC to use for a given set of constraints, it is possible to define patterns and automate the decision process. In this sense, dedicated ML techniques (e.g., reinforcement learning) can be applied for specific contexts such as supply chain, IoT transparency, and cryptocurrencies. Additionally, clustering algorithms can form groups of BCs that share similar properties to recommend alternative BC platforms and correlate BC parameters (e.g., number of developers and commits, price, market capitalization, and security breaches) to classify BC platforms in terms of non-quantifiable aspects such as code maturity, stability, and popularity.

Blockchain Interoperability
To achieve BC interoperability, the use of centralized notary schemes removes interaction and management complexity by exposing simple user authentication and a straightforward API. However, it introduces security concerns in cases of deployments involving multiple organizations. Thus, solutions based on notary schemes become attractive when applied at end systems (i.e., the dApp) interfacing with multiple BCs. For example, as users do not need to be concerned with their private key management, the solution must:

Ensure that keys are stored securely (e.g., encrypted)

Manage the public/private key pair from several users

Control the balance of each address and transaction fees to ensure transactions are appended in the BCs selected

Nevertheless, moving a notary from a central to a distributed approach (e.g., to the organization's premises) minimizes security concerns but introduces management complexity. Thus, there is a trade-off involving security, centralization, and management complexity aspects that must be considered in the BC interoperability context.

Decentralized interoperability mechanisms, such as side-chains, present a promising solution to address these limitations at the cost of introducing another BC layer. The use of side-chain requires nodes to act as miners in conjunction with miners from the supported BCs; for example, mining blocks are appended in supported chains. Further, as the size of supported BCs increases at different paces (due to their different block times and the lacking standardization), any side-chain must cope with these differences to avoid bottlenecks. Moreover, a currency (e.g., a token) is required to incentivize miners to participate and secure the side-chain. Hence, these research gaps in terms of technology, standardization, and economics (incentivization) must be bridged so that BCs' interoperability is fully achieved.

Concluding Remarks
With over 10 years since BC's first proposal, it is still not straightforward to classify BCs as a novel concept. However, with the fast-paced development of new platforms in decentralized finance and high media attention regarding cryptocurrencies, the research on management and interoperability between BC platforms still faces major challenges.
Blockchains (BCs) offer benefits to many applications and use cases; for example, providing transparency to supply chains, immutability to IoT, and intermediary-free transactions in the financial sector. This work exploits data immutability using policy-based management (PBM) to manage data storage in multiple BCs considering different BC factors, such as throughput (in terms of transaction rate) and transaction costs. The use of PBM to support the BC selection process is valuable, since:

It is necessary to strike a balance between ease of management through the definition of policies.

Underlying BC technical details must be abstracted from the interaction with multiple BCs given different BC-based applications.

The policy-based BC selection framework outlined here and detailed in [5] fills this gap by seamlessly selecting the BC in which application data will be stored according to user policies. It communicates with the BC interoperability interface module [14] that crafts the corresponding transaction data to be immutably stored in the BC selected without any manual interaction. Furthermore, it allows applications to exploit BCs' immutability while being explicitly aware of such interactions' OPEX. Due to the functionality achieved and evaluations performed, PBM is a highly effective approach to address data management problems involving multiple BCs.

With over 10 years since BC's first proposal (i.e., Bitcoin), it is still not straightforward to classify BCs as a novel concept. However, with the fast-paced development of new platforms in decentralized finance and high media attention regarding cryptocurrencies, the research on management and interoperability between BC platforms still faces major challenges. Therefore, promising research directions with BC-specific details and next steps involving these aspects include:

Exploiting intents to abstract details concerning BC selection for a given use case

Employing ML algorithms to support the selection, recommendation, and classification of BCs

Prototyping of decentralized interoperability mechanisms to enable communications and transparent interactions between different BC platforms